
RTOS-TFT-LCD-ILI9341-lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000577c8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004577c8  004577c8  000677c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a10  20400000  004577d0  00070000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0003991c  20400a10  004581e0  00070a10  2**2
                  ALLOC
  4 .stack        00002004  2043a32c  00491afc  00070a10  2**0
                  ALLOC
  5 .heap         00000200  2043c330  00493b00  00070a10  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00070a10  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00070a3c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00096545  00000000  00000000  00070af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d817  00000000  00000000  00107035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00044690  00000000  00000000  0011484c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002988  00000000  00000000  00158edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005288  00000000  00000000  0015b864  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030100  00000000  00000000  00160aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003b62d  00000000  00000000  00190bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ae8dd  00000000  00000000  001cc219  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008530  00000000  00000000  0027aaf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 c3 43 20 bd cd 41 00 b9 cd 41 00 b9 cd 41 00     0.C ..A...A...A.
  400010:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 00 00 00 00     ..A...A...A.....
	...
  40002c:	49 15 40 00 b9 cd 41 00 00 00 00 00 e9 15 40 00     I.@...A.......@.
  40003c:	51 16 40 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     Q.@...A...A...A.
  40004c:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ..A...A...A...A.
  40005c:	b9 cd 41 00 b9 cd 41 00 00 00 00 00 45 c9 41 00     ..A...A.....E.A.
  40006c:	59 c9 41 00 6d c9 41 00 b9 cd 41 00 b9 cd 41 00     Y.A.m.A...A...A.
  40007c:	b9 cd 41 00 81 c9 41 00 95 c9 41 00 b9 cd 41 00     ..A...A...A...A.
  40008c:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ..A...A...A...A.
  40009c:	55 02 40 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     U.@...A...A...A.
  4000ac:	b9 cd 41 00 b9 cd 41 00 9d 13 40 00 b9 cd 41 00     ..A...A...@...A.
  4000bc:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ..A...A...A...A.
  4000cc:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ..A...A...A...A.
  4000dc:	b9 cd 41 00 b1 13 40 00 b9 cd 41 00 b9 cd 41 00     ..A...@...A...A.
  4000ec:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ..A...A...A...A.
  4000fc:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ..A...A...A...A.
  40010c:	b9 cd 41 00 b9 cd 41 00 00 00 00 00 00 00 00 00     ..A...A.........
  40011c:	00 00 00 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ......A...A...A.
  40012c:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ..A...A...A...A.
  40013c:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ..A...A...A...A.
  40014c:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00 b9 cd 41 00     ..A...A...A...A.
  40015c:	b9 cd 41 00 b9 cd 41 00 b9 cd 41 00                 ..A...A...A.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a10 	.word	0x20400a10
  400184:	00000000 	.word	0x00000000
  400188:	004577d0 	.word	0x004577d0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004577d0 	.word	0x004577d0
  4001c8:	20400a14 	.word	0x20400a14
  4001cc:	004577d0 	.word	0x004577d0
  4001d0:	00000000 	.word	0x00000000

004001d4 <vTimerEcgCallback>:
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);

  tc_start(TC, TC_CHANNEL);
}

void vTimerEcgCallback( TimerHandle_t xTimer ) {
  4001d4:	b508      	push	{r3, lr}
  // delay entre ECGs de [200, 500]
  g_ecgDelayValue = rand() % (500 + 1 - 200) + 200;
  4001d6:	4b08      	ldr	r3, [pc, #32]	; (4001f8 <vTimerEcgCallback+0x24>)
  4001d8:	4798      	blx	r3
  4001da:	4a08      	ldr	r2, [pc, #32]	; (4001fc <vTimerEcgCallback+0x28>)
  4001dc:	fb82 3200 	smull	r3, r2, r2, r0
  4001e0:	17c3      	asrs	r3, r0, #31
  4001e2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  4001e6:	f240 122d 	movw	r2, #301	; 0x12d
  4001ea:	fb02 0313 	mls	r3, r2, r3, r0
  4001ee:	33c8      	adds	r3, #200	; 0xc8
  4001f0:	4a03      	ldr	r2, [pc, #12]	; (400200 <vTimerEcgCallback+0x2c>)
  4001f2:	6013      	str	r3, [r2, #0]
  4001f4:	bd08      	pop	{r3, pc}
  4001f6:	bf00      	nop
  4001f8:	0041e9a1 	.word	0x0041e9a1
  4001fc:	1b37484b 	.word	0x1b37484b
  400200:	2043a068 	.word	0x2043a068

00400204 <config_DAC>:
static void config_DAC(void) {
  400204:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400206:	201e      	movs	r0, #30
  400208:	4b0b      	ldr	r3, [pc, #44]	; (400238 <config_DAC+0x34>)
  40020a:	4798      	blx	r3
  dacc_reset(DACC_BASE);
  40020c:	4c0b      	ldr	r4, [pc, #44]	; (40023c <config_DAC+0x38>)
  40020e:	4620      	mov	r0, r4
  400210:	4b0b      	ldr	r3, [pc, #44]	; (400240 <config_DAC+0x3c>)
  400212:	4798      	blx	r3
  dacc_set_transfer_mode(DACC_BASE, 0);
  400214:	2100      	movs	r1, #0
  400216:	4620      	mov	r0, r4
  400218:	4b0a      	ldr	r3, [pc, #40]	; (400244 <config_DAC+0x40>)
  40021a:	4798      	blx	r3
  dacc_set_osr(DACC_BASE, DACC_CHANNEL, 5 );
  40021c:	2205      	movs	r2, #5
  40021e:	2100      	movs	r1, #0
  400220:	4620      	mov	r0, r4
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <config_DAC+0x44>)
  400224:	4798      	blx	r3
  dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  400226:	2100      	movs	r1, #0
  400228:	4620      	mov	r0, r4
  40022a:	4b08      	ldr	r3, [pc, #32]	; (40024c <config_DAC+0x48>)
  40022c:	4798      	blx	r3
  dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  40022e:	210a      	movs	r1, #10
  400230:	4620      	mov	r0, r4
  400232:	4b07      	ldr	r3, [pc, #28]	; (400250 <config_DAC+0x4c>)
  400234:	4798      	blx	r3
  400236:	bd10      	pop	{r4, pc}
  400238:	0041cabd 	.word	0x0041cabd
  40023c:	40040000 	.word	0x40040000
  400240:	004004bd 	.word	0x004004bd
  400244:	004004c3 	.word	0x004004c3
  400248:	004004d9 	.word	0x004004d9
  40024c:	0040050d 	.word	0x0040050d
  400250:	00400521 	.word	0x00400521

00400254 <TC0_Handler>:
void TC0_Handler(void) {
  400254:	b500      	push	{lr}
  400256:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC0, 0);
  400258:	2100      	movs	r1, #0
  40025a:	4815      	ldr	r0, [pc, #84]	; (4002b0 <TC0_Handler+0x5c>)
  40025c:	4b15      	ldr	r3, [pc, #84]	; (4002b4 <TC0_Handler+0x60>)
  40025e:	4798      	blx	r3
  400260:	9001      	str	r0, [sp, #4]
  if (g_ecgCnt >= g_ecgSize) {
  400262:	4b15      	ldr	r3, [pc, #84]	; (4002b8 <TC0_Handler+0x64>)
  400264:	681a      	ldr	r2, [r3, #0]
  400266:	4b15      	ldr	r3, [pc, #84]	; (4002bc <TC0_Handler+0x68>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	429a      	cmp	r2, r3
  40026c:	db06      	blt.n	40027c <TC0_Handler+0x28>
    g_ecgCnt = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b11      	ldr	r3, [pc, #68]	; (4002b8 <TC0_Handler+0x64>)
  400272:	601a      	str	r2, [r3, #0]
    g_ecgDelayCnt = g_ecgDelayValue;
  400274:	4b12      	ldr	r3, [pc, #72]	; (4002c0 <TC0_Handler+0x6c>)
  400276:	681a      	ldr	r2, [r3, #0]
  400278:	4b12      	ldr	r3, [pc, #72]	; (4002c4 <TC0_Handler+0x70>)
  40027a:	601a      	str	r2, [r3, #0]
  if (g_ecgDelayCnt > 0) {
  40027c:	4b11      	ldr	r3, [pc, #68]	; (4002c4 <TC0_Handler+0x70>)
  40027e:	681b      	ldr	r3, [r3, #0]
  400280:	2b00      	cmp	r3, #0
  400282:	dd0f      	ble.n	4002a4 <TC0_Handler+0x50>
    g_ecgDelayCnt--;
  400284:	4a0f      	ldr	r2, [pc, #60]	; (4002c4 <TC0_Handler+0x70>)
  400286:	6813      	ldr	r3, [r2, #0]
  400288:	3b01      	subs	r3, #1
  40028a:	6013      	str	r3, [r2, #0]
  dacc_write_conversion_data(DACC_BASE, ecg[g_ecgCnt], DACC_CHANNEL);
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TC0_Handler+0x64>)
  40028e:	6819      	ldr	r1, [r3, #0]
  400290:	2200      	movs	r2, #0
  400292:	4b0d      	ldr	r3, [pc, #52]	; (4002c8 <TC0_Handler+0x74>)
  400294:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400298:	480c      	ldr	r0, [pc, #48]	; (4002cc <TC0_Handler+0x78>)
  40029a:	4b0d      	ldr	r3, [pc, #52]	; (4002d0 <TC0_Handler+0x7c>)
  40029c:	4798      	blx	r3
}
  40029e:	b003      	add	sp, #12
  4002a0:	f85d fb04 	ldr.w	pc, [sp], #4
    g_ecgCnt++;
  4002a4:	4a04      	ldr	r2, [pc, #16]	; (4002b8 <TC0_Handler+0x64>)
  4002a6:	6813      	ldr	r3, [r2, #0]
  4002a8:	3301      	adds	r3, #1
  4002aa:	6013      	str	r3, [r2, #0]
  4002ac:	e7ee      	b.n	40028c <TC0_Handler+0x38>
  4002ae:	bf00      	nop
  4002b0:	4000c000 	.word	0x4000c000
  4002b4:	0040055b 	.word	0x0040055b
  4002b8:	2043a060 	.word	0x2043a060
  4002bc:	00426064 	.word	0x00426064
  4002c0:	2043a068 	.word	0x2043a068
  4002c4:	2043a064 	.word	0x2043a064
  4002c8:	0042499c 	.word	0x0042499c
  4002cc:	40040000 	.word	0x40040000
  4002d0:	004004cf 	.word	0x004004cf

004002d4 <TC_init_modificado>:
void TC_init_modificado(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4002d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002d8:	b084      	sub	sp, #16
  4002da:	4605      	mov	r5, r0
  4002dc:	460c      	mov	r4, r1
  4002de:	4616      	mov	r6, r2
  4002e0:	461f      	mov	r7, r3
  pmc_enable_periph_clk(ID_TC);
  4002e2:	4608      	mov	r0, r1
  4002e4:	4b1c      	ldr	r3, [pc, #112]	; (400358 <TC_init_modificado+0x84>)
  4002e6:	4798      	blx	r3
  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4002e8:	491c      	ldr	r1, [pc, #112]	; (40035c <TC_init_modificado+0x88>)
  4002ea:	9100      	str	r1, [sp, #0]
  4002ec:	ab02      	add	r3, sp, #8
  4002ee:	aa03      	add	r2, sp, #12
  4002f0:	4638      	mov	r0, r7
  4002f2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400380 <TC_init_modificado+0xac>
  4002f6:	47c0      	blx	r8
  tc_init(TC, TC_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG);
  4002f8:	f244 0201 	movw	r2, #16385	; 0x4001
  4002fc:	4631      	mov	r1, r6
  4002fe:	4628      	mov	r0, r5
  400300:	4b17      	ldr	r3, [pc, #92]	; (400360 <TC_init_modificado+0x8c>)
  400302:	4798      	blx	r3
  tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / 16) / freq);
  400304:	4a17      	ldr	r2, [pc, #92]	; (400364 <TC_init_modificado+0x90>)
  400306:	fbb2 f2f7 	udiv	r2, r2, r7
  40030a:	4631      	mov	r1, r6
  40030c:	4628      	mov	r0, r5
  40030e:	4b16      	ldr	r3, [pc, #88]	; (400368 <TC_init_modificado+0x94>)
  400310:	4798      	blx	r3
  NVIC_SetPriority(ID_TC, 4);
  400312:	b263      	sxtb	r3, r4
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400314:	2b00      	cmp	r3, #0
  400316:	db17      	blt.n	400348 <TC_init_modificado+0x74>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400318:	4a14      	ldr	r2, [pc, #80]	; (40036c <TC_init_modificado+0x98>)
  40031a:	2180      	movs	r1, #128	; 0x80
  40031c:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40031e:	095b      	lsrs	r3, r3, #5
  400320:	f004 041f 	and.w	r4, r4, #31
  400324:	2201      	movs	r2, #1
  400326:	fa02 f404 	lsl.w	r4, r2, r4
  40032a:	4a11      	ldr	r2, [pc, #68]	; (400370 <TC_init_modificado+0x9c>)
  40032c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  400330:	2210      	movs	r2, #16
  400332:	4631      	mov	r1, r6
  400334:	4628      	mov	r0, r5
  400336:	4b0f      	ldr	r3, [pc, #60]	; (400374 <TC_init_modificado+0xa0>)
  400338:	4798      	blx	r3
  tc_start(TC, TC_CHANNEL);
  40033a:	4631      	mov	r1, r6
  40033c:	4628      	mov	r0, r5
  40033e:	4b0e      	ldr	r3, [pc, #56]	; (400378 <TC_init_modificado+0xa4>)
  400340:	4798      	blx	r3
}
  400342:	b004      	add	sp, #16
  400344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400348:	f004 010f 	and.w	r1, r4, #15
  40034c:	4a0b      	ldr	r2, [pc, #44]	; (40037c <TC_init_modificado+0xa8>)
  40034e:	440a      	add	r2, r1
  400350:	2180      	movs	r1, #128	; 0x80
  400352:	7611      	strb	r1, [r2, #24]
  400354:	e7e3      	b.n	40031e <TC_init_modificado+0x4a>
  400356:	bf00      	nop
  400358:	0041cabd 	.word	0x0041cabd
  40035c:	11e1a300 	.word	0x11e1a300
  400360:	00400529 	.word	0x00400529
  400364:	011e1a30 	.word	0x011e1a30
  400368:	0040054b 	.word	0x0040054b
  40036c:	e000e400 	.word	0xe000e400
  400370:	e000e100 	.word	0xe000e100
  400374:	00400553 	.word	0x00400553
  400378:	00400543 	.word	0x00400543
  40037c:	e000ecfc 	.word	0xe000ecfc
  400380:	00400563 	.word	0x00400563
  400384:	00000000 	.word	0x00000000

00400388 <task_aps2>:
 // printf("%d \n", g_ecgDelayValue);
}

void task_aps2(void *pvParameters) {
  400388:	b570      	push	{r4, r5, r6, lr}
  40038a:	ed2d 8b02 	vpush	{d8}
  40038e:	b084      	sub	sp, #16
  
  g_ecgDelayValue = 200;
  400390:	22c8      	movs	r2, #200	; 0xc8
  400392:	4b31      	ldr	r3, [pc, #196]	; (400458 <task_aps2+0xd0>)
  400394:	601a      	str	r2, [r3, #0]
  config_DAC();
  400396:	4b31      	ldr	r3, [pc, #196]	; (40045c <task_aps2+0xd4>)
  400398:	4798      	blx	r3
  TC_init_modificado(TC0, ID_TC0, 0, DAC_FS);
  40039a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40039e:	2200      	movs	r2, #0
  4003a0:	2117      	movs	r1, #23
  4003a2:	482f      	ldr	r0, [pc, #188]	; (400460 <task_aps2+0xd8>)
  4003a4:	4c2f      	ldr	r4, [pc, #188]	; (400464 <task_aps2+0xdc>)
  4003a6:	47a0      	blx	r4
  xTimer = xTimerCreate("ECG", pdMS_TO_TICKS(ECG_CHANGE_TIME), pdTRUE, (void *) 0, vTimerEcgCallback);
  4003a8:	4b2f      	ldr	r3, [pc, #188]	; (400468 <task_aps2+0xe0>)
  4003aa:	9300      	str	r3, [sp, #0]
  4003ac:	2300      	movs	r3, #0
  4003ae:	2201      	movs	r2, #1
  4003b0:	f242 7110 	movw	r1, #10000	; 0x2710
  4003b4:	482d      	ldr	r0, [pc, #180]	; (40046c <task_aps2+0xe4>)
  4003b6:	4c2e      	ldr	r4, [pc, #184]	; (400470 <task_aps2+0xe8>)
  4003b8:	47a0      	blx	r4
  4003ba:	4604      	mov	r4, r0
  4003bc:	4b2d      	ldr	r3, [pc, #180]	; (400474 <task_aps2+0xec>)
  4003be:	6018      	str	r0, [r3, #0]
  xTimerStart( xTimer, 0 );
  4003c0:	4b2d      	ldr	r3, [pc, #180]	; (400478 <task_aps2+0xf0>)
  4003c2:	4798      	blx	r3
  4003c4:	2300      	movs	r3, #0
  4003c6:	9300      	str	r3, [sp, #0]
  4003c8:	4602      	mov	r2, r0
  4003ca:	2101      	movs	r1, #1
  4003cc:	4620      	mov	r0, r4
  4003ce:	4c2b      	ldr	r4, [pc, #172]	; (40047c <task_aps2+0xf4>)
  4003d0:	47a0      	blx	r4
  
  // oxiometria
  char ox;
  float theta = 0;
  4003d2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 400480 <task_aps2+0xf8>
  4003d6:	e02e      	b.n	400436 <task_aps2+0xae>
    
    // Oxiometria: sin entre 88 e 100
    if (theta > 2*PI) {
      theta = 0;
    }
    ox = (char) ((arm_sin_f32(theta) + 1.0)*12.0/2.0 + 88.0);
  4003d8:	ee18 0a10 	vmov	r0, s16
  4003dc:	4b29      	ldr	r3, [pc, #164]	; (400484 <task_aps2+0xfc>)
  4003de:	4798      	blx	r3
  4003e0:	4e29      	ldr	r6, [pc, #164]	; (400488 <task_aps2+0x100>)
  4003e2:	47b0      	blx	r6
  4003e4:	4d29      	ldr	r5, [pc, #164]	; (40048c <task_aps2+0x104>)
  4003e6:	2200      	movs	r2, #0
  4003e8:	4b29      	ldr	r3, [pc, #164]	; (400490 <task_aps2+0x108>)
  4003ea:	47a8      	blx	r5
  4003ec:	4c29      	ldr	r4, [pc, #164]	; (400494 <task_aps2+0x10c>)
  4003ee:	2200      	movs	r2, #0
  4003f0:	4b29      	ldr	r3, [pc, #164]	; (400498 <task_aps2+0x110>)
  4003f2:	47a0      	blx	r4
  4003f4:	2200      	movs	r2, #0
  4003f6:	4b29      	ldr	r3, [pc, #164]	; (40049c <task_aps2+0x114>)
  4003f8:	47a0      	blx	r4
  4003fa:	2200      	movs	r2, #0
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <task_aps2+0x118>)
  4003fe:	47a8      	blx	r5
  400400:	4b28      	ldr	r3, [pc, #160]	; (4004a4 <task_aps2+0x11c>)
  400402:	4798      	blx	r3
  400404:	ac04      	add	r4, sp, #16
  400406:	f804 0d01 	strb.w	r0, [r4, #-1]!
    theta = theta + 0.3;
  40040a:	ee18 0a10 	vmov	r0, s16
  40040e:	47b0      	blx	r6
  400410:	a30f      	add	r3, pc, #60	; (adr r3, 400450 <task_aps2+0xc8>)
  400412:	e9d3 2300 	ldrd	r2, r3, [r3]
  400416:	47a8      	blx	r5
  400418:	4b23      	ldr	r3, [pc, #140]	; (4004a8 <task_aps2+0x120>)
  40041a:	4798      	blx	r3
  40041c:	ee08 0a10 	vmov	s16, r0
    xQueueSend(xQueueOx, &ox, 100);
  400420:	2300      	movs	r3, #0
  400422:	2264      	movs	r2, #100	; 0x64
  400424:	4621      	mov	r1, r4
  400426:	4821      	ldr	r0, [pc, #132]	; (4004ac <task_aps2+0x124>)
  400428:	6800      	ldr	r0, [r0, #0]
  40042a:	4c21      	ldr	r4, [pc, #132]	; (4004b0 <task_aps2+0x128>)
  40042c:	47a0      	blx	r4

    vTaskDelay(2000);
  40042e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400432:	4b20      	ldr	r3, [pc, #128]	; (4004b4 <task_aps2+0x12c>)
  400434:	4798      	blx	r3
    if (theta > 2*PI) {
  400436:	eddf 7a20 	vldr	s15, [pc, #128]	; 4004b8 <task_aps2+0x130>
  40043a:	eeb4 8ae7 	vcmpe.f32	s16, s15
  40043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400442:	ddc9      	ble.n	4003d8 <task_aps2+0x50>
      theta = 0;
  400444:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 400480 <task_aps2+0xf8>
  400448:	e7c6      	b.n	4003d8 <task_aps2+0x50>
  40044a:	bf00      	nop
  40044c:	f3af 8000 	nop.w
  400450:	33333333 	.word	0x33333333
  400454:	3fd33333 	.word	0x3fd33333
  400458:	2043a068 	.word	0x2043a068
  40045c:	00400205 	.word	0x00400205
  400460:	4000c000 	.word	0x4000c000
  400464:	004002d5 	.word	0x004002d5
  400468:	004001d5 	.word	0x004001d5
  40046c:	00421248 	.word	0x00421248
  400470:	00402e2d 	.word	0x00402e2d
  400474:	2043a2fc 	.word	0x2043a2fc
  400478:	00402455 	.word	0x00402455
  40047c:	00402e8d 	.word	0x00402e8d
  400480:	00000000 	.word	0x00000000
  400484:	0041d56d 	.word	0x0041d56d
  400488:	0041d8b5 	.word	0x0041d8b5
  40048c:	0041d5f9 	.word	0x0041d5f9
  400490:	3ff00000 	.word	0x3ff00000
  400494:	0041d95d 	.word	0x0041d95d
  400498:	40280000 	.word	0x40280000
  40049c:	3fe00000 	.word	0x3fe00000
  4004a0:	40560000 	.word	0x40560000
  4004a4:	0041dd81 	.word	0x0041dd81
  4004a8:	0041ddc1 	.word	0x0041ddc1
  4004ac:	2043a300 	.word	0x2043a300
  4004b0:	00401b79 	.word	0x00401b79
  4004b4:	004026b5 	.word	0x004026b5
  4004b8:	40c90fdb 	.word	0x40c90fdb

004004bc <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4004bc:	2301      	movs	r3, #1
  4004be:	6003      	str	r3, [r0, #0]
  4004c0:	4770      	bx	lr

004004c2 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  4004c2:	b911      	cbnz	r1, 4004ca <dacc_set_transfer_mode+0x8>
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
  4004c4:	6041      	str	r1, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4004c6:	2000      	movs	r0, #0
  4004c8:	4770      	bx	lr
		p_dacc->DACC_MR = ul_mode;
  4004ca:	6041      	str	r1, [r0, #4]
  4004cc:	e7fb      	b.n	4004c6 <dacc_set_transfer_mode+0x4>

004004ce <dacc_write_conversion_data>:
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
	p_dacc->DACC_CDR[channel] = ul_data;
  4004ce:	3206      	adds	r2, #6
  4004d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4004d4:	6051      	str	r1, [r2, #4]
  4004d6:	4770      	bx	lr

004004d8 <dacc_set_osr>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_osr(Dacc *p_dacc, uint32_t channel, uint32_t ul_osr)
{
	uint32_t mr = p_dacc->DACC_TRIGR;
  4004d8:	6883      	ldr	r3, [r0, #8]
	if(channel == 0) {
  4004da:	b139      	cbz	r1, 4004ec <dacc_set_osr+0x14>
{
  4004dc:	b410      	push	{r4}
		mr &= (~DACC_TRIGR_OSR0_Msk);
		mr |=  DACC_TRIGR_OSR0(ul_osr);
	}else if(channel == 1) {
  4004de:	2901      	cmp	r1, #1
  4004e0:	d00d      	beq.n	4004fe <dacc_set_osr+0x26>
		mr &= (~DACC_TRIGR_OSR1_Msk);
		mr |=  DACC_TRIGR_OSR1(ul_osr);
	}
	p_dacc->DACC_TRIGR = mr;
  4004e2:	6083      	str	r3, [r0, #8]
	return DACC_RC_OK;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ea:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR0_Msk);
  4004ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
		mr |=  DACC_TRIGR_OSR0(ul_osr);
  4004f0:	0412      	lsls	r2, r2, #16
  4004f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4004f6:	4313      	orrs	r3, r2
	p_dacc->DACC_TRIGR = mr;
  4004f8:	6083      	str	r3, [r0, #8]
}
  4004fa:	2000      	movs	r0, #0
  4004fc:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR1_Msk);
  4004fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
		mr |=  DACC_TRIGR_OSR1(ul_osr);
  400502:	0512      	lsls	r2, r2, #20
  400504:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
  400508:	4313      	orrs	r3, r2
  40050a:	e7ea      	b.n	4004e2 <dacc_set_osr+0xa>

0040050c <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  40050c:	2901      	cmp	r1, #1
  40050e:	d901      	bls.n	400514 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  400510:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  400512:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400514:	2301      	movs	r3, #1
  400516:	fa03 f101 	lsl.w	r1, r3, r1
  40051a:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  40051c:	2000      	movs	r0, #0
  40051e:	4770      	bx	lr

00400520 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400520:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400524:	2000      	movs	r0, #0
  400526:	4770      	bx	lr

00400528 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400528:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40052a:	0189      	lsls	r1, r1, #6
  40052c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40052e:	2402      	movs	r4, #2
  400530:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400532:	f04f 31ff 	mov.w	r1, #4294967295
  400536:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400538:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40053a:	605a      	str	r2, [r3, #4]
}
  40053c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400540:	4770      	bx	lr

00400542 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400542:	0189      	lsls	r1, r1, #6
  400544:	2305      	movs	r3, #5
  400546:	5043      	str	r3, [r0, r1]
  400548:	4770      	bx	lr

0040054a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40054a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40054e:	61ca      	str	r2, [r1, #28]
  400550:	4770      	bx	lr

00400552 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400552:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400556:	624a      	str	r2, [r1, #36]	; 0x24
  400558:	4770      	bx	lr

0040055a <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40055a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40055e:	6a08      	ldr	r0, [r1, #32]
}
  400560:	4770      	bx	lr

00400562 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400562:	b470      	push	{r4, r5, r6}
  400564:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400566:	2402      	movs	r4, #2
  400568:	9401      	str	r4, [sp, #4]
  40056a:	2408      	movs	r4, #8
  40056c:	9402      	str	r4, [sp, #8]
  40056e:	2420      	movs	r4, #32
  400570:	9403      	str	r4, [sp, #12]
  400572:	2480      	movs	r4, #128	; 0x80
  400574:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400576:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400578:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40057a:	9405      	str	r4, [sp, #20]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  40057c:	2500      	movs	r5, #0
  40057e:	2d04      	cmp	r5, #4
  400580:	d80d      	bhi.n	40059e <tc_find_mck_divisor+0x3c>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400582:	ac06      	add	r4, sp, #24
  400584:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  400588:	f854 4c14 	ldr.w	r4, [r4, #-20]
  40058c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400590:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400592:	4284      	cmp	r4, r0
  400594:	d312      	bcc.n	4005bc <tc_find_mck_divisor+0x5a>
			return 0;
		} else if (ul_freq >= ul_low) {
  400596:	4286      	cmp	r6, r0
  400598:	d901      	bls.n	40059e <tc_find_mck_divisor+0x3c>
			ul_index++) {
  40059a:	3501      	adds	r5, #1
  40059c:	e7ef      	b.n	40057e <tc_find_mck_divisor+0x1c>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40059e:	2d04      	cmp	r5, #4
  4005a0:	d80e      	bhi.n	4005c0 <tc_find_mck_divisor+0x5e>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  4005a2:	b12a      	cbz	r2, 4005b0 <tc_find_mck_divisor+0x4e>
		*p_uldiv = divisors[ul_index];
  4005a4:	a906      	add	r1, sp, #24
  4005a6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4005aa:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4005ae:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  4005b0:	b143      	cbz	r3, 4005c4 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  4005b2:	601d      	str	r5, [r3, #0]
	}

	return 1;
  4005b4:	2001      	movs	r0, #1
}
  4005b6:	b007      	add	sp, #28
  4005b8:	bc70      	pop	{r4, r5, r6}
  4005ba:	4770      	bx	lr
			return 0;
  4005bc:	2000      	movs	r0, #0
  4005be:	e7fa      	b.n	4005b6 <tc_find_mck_divisor+0x54>
		return 0;
  4005c0:	2000      	movs	r0, #0
  4005c2:	e7f8      	b.n	4005b6 <tc_find_mck_divisor+0x54>
	return 1;
  4005c4:	2001      	movs	r0, #1
  4005c6:	e7f6      	b.n	4005b6 <tc_find_mck_divisor+0x54>

004005c8 <insert_sort>:

int readTouchY(void) {
  return (readXm());
}

static void insert_sort(int array[], uint8_t size) {
  4005c8:	b430      	push	{r4, r5}
  uint8_t j;
  int save;

  for (int i = 1; i < size; i++) {
  4005ca:	2501      	movs	r5, #1
  4005cc:	e00e      	b.n	4005ec <insert_sort+0x24>
    save = array[i];
    for (j = i; j >= 1 && save < array[j - 1]; j--)
    array[j] = array[j - 1];
  4005ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  4005d2:	3b01      	subs	r3, #1
  4005d4:	b2db      	uxtb	r3, r3
  4005d6:	b133      	cbz	r3, 4005e6 <insert_sort+0x1e>
  4005d8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  4005dc:	441a      	add	r2, r3
  4005de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4005e2:	4294      	cmp	r4, r2
  4005e4:	dbf3      	blt.n	4005ce <insert_sort+0x6>
    array[j] = save;
  4005e6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for (int i = 1; i < size; i++) {
  4005ea:	3501      	adds	r5, #1
  4005ec:	428d      	cmp	r5, r1
  4005ee:	da03      	bge.n	4005f8 <insert_sort+0x30>
    save = array[i];
  4005f0:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  4005f4:	b2eb      	uxtb	r3, r5
  4005f6:	e7ee      	b.n	4005d6 <insert_sort+0xe>
  }
}
  4005f8:	bc30      	pop	{r4, r5}
  4005fa:	4770      	bx	lr

004005fc <config_AFEC_touch>:
static void config_AFEC_touch(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback) {
  4005fc:	b530      	push	{r4, r5, lr}
  4005fe:	b089      	sub	sp, #36	; 0x24
  400600:	4604      	mov	r4, r0
  400602:	4615      	mov	r5, r2
  afec_get_config_defaults(&afec_cfg);
  400604:	a802      	add	r0, sp, #8
  400606:	4b13      	ldr	r3, [pc, #76]	; (400654 <config_AFEC_touch+0x58>)
  400608:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  40060a:	a902      	add	r1, sp, #8
  40060c:	4620      	mov	r0, r4
  40060e:	4b12      	ldr	r3, [pc, #72]	; (400658 <config_AFEC_touch+0x5c>)
  400610:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  400612:	6863      	ldr	r3, [r4, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
  400614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  400618:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  40061a:	a801      	add	r0, sp, #4
  40061c:	4b0f      	ldr	r3, [pc, #60]	; (40065c <config_AFEC_touch+0x60>)
  40061e:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  400620:	2300      	movs	r3, #0
  400622:	f88d 3005 	strb.w	r3, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  400626:	b2ad      	uxth	r5, r5
  400628:	aa01      	add	r2, sp, #4
  40062a:	4629      	mov	r1, r5
  40062c:	4620      	mov	r0, r4
  40062e:	4b0c      	ldr	r3, [pc, #48]	; (400660 <config_AFEC_touch+0x64>)
  400630:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400632:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400634:	f44f 7300 	mov.w	r3, #512	; 0x200
  400638:	66e3      	str	r3, [r4, #108]	; 0x6c
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  40063a:	f640 73ff 	movw	r3, #4095	; 0xfff
  40063e:	429d      	cmp	r5, r3
  400640:	d005      	beq.n	40064e <config_AFEC_touch+0x52>
  400642:	2301      	movs	r3, #1
  400644:	fa03 f505 	lsl.w	r5, r3, r5
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400648:	6165      	str	r5, [r4, #20]
}
  40064a:	b009      	add	sp, #36	; 0x24
  40064c:	bd30      	pop	{r4, r5, pc}
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  40064e:	f640 75ff 	movw	r5, #4095	; 0xfff
  400652:	e7f9      	b.n	400648 <config_AFEC_touch+0x4c>
  400654:	004012f9 	.word	0x004012f9
  400658:	00401335 	.word	0x00401335
  40065c:	00401329 	.word	0x00401329
  400660:	004012c5 	.word	0x004012c5

00400664 <configure_touch>:
void configure_touch(void) {
  400664:	b570      	push	{r4, r5, r6, lr}
  pmc_enable_periph_clk(XM_PIO_ID);
  400666:	200c      	movs	r0, #12
  400668:	4c0d      	ldr	r4, [pc, #52]	; (4006a0 <configure_touch+0x3c>)
  40066a:	47a0      	blx	r4
  pmc_enable_periph_clk(YP_PIO_ID);
  40066c:	2010      	movs	r0, #16
  40066e:	47a0      	blx	r4
  pmc_enable_periph_clk(XP_PIO_ID);
  400670:	200c      	movs	r0, #12
  400672:	47a0      	blx	r4
  pmc_enable_periph_clk(YM_PIO_ID);
  400674:	2010      	movs	r0, #16
  400676:	47a0      	blx	r4
  afec_enable(XM_AFEC);
  400678:	4d0a      	ldr	r5, [pc, #40]	; (4006a4 <configure_touch+0x40>)
  40067a:	4628      	mov	r0, r5
  40067c:	4e0a      	ldr	r6, [pc, #40]	; (4006a8 <configure_touch+0x44>)
  40067e:	47b0      	blx	r6
  afec_enable(YP_AFEC);
  400680:	4c0a      	ldr	r4, [pc, #40]	; (4006ac <configure_touch+0x48>)
  400682:	4620      	mov	r0, r4
  400684:	47b0      	blx	r6
  config_AFEC_touch(YP_AFEC, YP_AFEC_ID, YP_CHANNEL, NULL);
  400686:	2300      	movs	r3, #0
  400688:	461a      	mov	r2, r3
  40068a:	211d      	movs	r1, #29
  40068c:	4620      	mov	r0, r4
  40068e:	4c08      	ldr	r4, [pc, #32]	; (4006b0 <configure_touch+0x4c>)
  400690:	47a0      	blx	r4
  config_AFEC_touch(XM_AFEC, XM_AFEC_ID, XM_CHANNEL, NULL);
  400692:	2300      	movs	r3, #0
  400694:	2201      	movs	r2, #1
  400696:	2128      	movs	r1, #40	; 0x28
  400698:	4628      	mov	r0, r5
  40069a:	47a0      	blx	r4
  40069c:	bd70      	pop	{r4, r5, r6, pc}
  40069e:	bf00      	nop
  4006a0:	0041cabd 	.word	0x0041cabd
  4006a4:	40064000 	.word	0x40064000
  4006a8:	004013c5 	.word	0x004013c5
  4006ac:	4003c000 	.word	0x4003c000
  4006b0:	004005fd 	.word	0x004005fd

004006b4 <readYp>:
	afec->AFEC_CSELR = afec_ch;
  4006b4:	4b02      	ldr	r3, [pc, #8]	; (4006c0 <readYp+0xc>)
  4006b6:	2200      	movs	r2, #0
  4006b8:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4006ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006bc:	4770      	bx	lr
  4006be:	bf00      	nop
  4006c0:	4003c000 	.word	0x4003c000

004006c4 <readXm>:
	afec->AFEC_CSELR = afec_ch;
  4006c4:	4b02      	ldr	r3, [pc, #8]	; (4006d0 <readXm+0xc>)
  4006c6:	2201      	movs	r2, #1
  4006c8:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4006ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006cc:	4770      	bx	lr
  4006ce:	bf00      	nop
  4006d0:	40064000 	.word	0x40064000

004006d4 <configReadTouchX>:
void configReadTouchX(void){
  4006d4:	b538      	push	{r3, r4, r5, lr}
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4006d6:	2201      	movs	r2, #1
  4006d8:	4b14      	ldr	r3, [pc, #80]	; (40072c <configReadTouchX+0x58>)
  4006da:	615a      	str	r2, [r3, #20]
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  4006dc:	2202      	movs	r2, #2
  4006de:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4006e2:	619a      	str	r2, [r3, #24]
  pio_configure(XP_PIO, PIO_OUTPUT_1, XP_MASK, PIO_DEFAULT);
  4006e4:	4d12      	ldr	r5, [pc, #72]	; (400730 <configReadTouchX+0x5c>)
  4006e6:	2300      	movs	r3, #0
  4006e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4006f0:	4628      	mov	r0, r5
  4006f2:	4c10      	ldr	r4, [pc, #64]	; (400734 <configReadTouchX+0x60>)
  4006f4:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_OUTPUT_0, XM_MASK, PIO_DEFAULT);
  4006f6:	2300      	movs	r3, #0
  4006f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4006fc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400700:	4628      	mov	r0, r5
  400702:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_INPUT, YM_MASK, PIO_DEFAULT);
  400704:	f505 7500 	add.w	r5, r5, #512	; 0x200
  400708:	2300      	movs	r3, #0
  40070a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40070e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400712:	4628      	mov	r0, r5
  400714:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  400716:	2300      	movs	r3, #0
  400718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40071c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400720:	4628      	mov	r0, r5
  400722:	47a0      	blx	r4
  delay_ms(5);
  400724:	4804      	ldr	r0, [pc, #16]	; (400738 <configReadTouchX+0x64>)
  400726:	4b05      	ldr	r3, [pc, #20]	; (40073c <configReadTouchX+0x68>)
  400728:	4798      	blx	r3
  40072a:	bd38      	pop	{r3, r4, r5, pc}
  40072c:	4003c000 	.word	0x4003c000
  400730:	400e1200 	.word	0x400e1200
  400734:	0041c705 	.word	0x0041c705
  400738:	0003dbc2 	.word	0x0003dbc2
  40073c:	20400001 	.word	0x20400001

00400740 <configReadTouchY>:
void configReadTouchY(void) {
  400740:	b538      	push	{r3, r4, r5, lr}
  400742:	2201      	movs	r2, #1
  400744:	4b14      	ldr	r3, [pc, #80]	; (400798 <configReadTouchY+0x58>)
  400746:	619a      	str	r2, [r3, #24]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400748:	2202      	movs	r2, #2
  40074a:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  40074e:	615a      	str	r2, [r3, #20]
  pio_configure(YP_PIO, PIO_OUTPUT_1, YP_MASK, PIO_DEFAULT);
  400750:	4d12      	ldr	r5, [pc, #72]	; (40079c <configReadTouchY+0x5c>)
  400752:	2300      	movs	r3, #0
  400754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400758:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40075c:	4628      	mov	r0, r5
  40075e:	4c10      	ldr	r4, [pc, #64]	; (4007a0 <configReadTouchY+0x60>)
  400760:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_0, YM_MASK, PIO_DEFAULT);
  400762:	2300      	movs	r3, #0
  400764:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400768:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40076c:	4628      	mov	r0, r5
  40076e:	47a0      	blx	r4
  pio_configure(XP_PIO, PIO_INPUT, XP_MASK, PIO_DEFAULT);
  400770:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
  400774:	2300      	movs	r3, #0
  400776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40077a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40077e:	4628      	mov	r0, r5
  400780:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  400782:	2300      	movs	r3, #0
  400784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400788:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40078c:	4628      	mov	r0, r5
  40078e:	47a0      	blx	r4
  delay_ms(5);
  400790:	4804      	ldr	r0, [pc, #16]	; (4007a4 <configReadTouchY+0x64>)
  400792:	4b05      	ldr	r3, [pc, #20]	; (4007a8 <configReadTouchY+0x68>)
  400794:	4798      	blx	r3
  400796:	bd38      	pop	{r3, r4, r5, pc}
  400798:	4003c000 	.word	0x4003c000
  40079c:	400e1400 	.word	0x400e1400
  4007a0:	0041c705 	.word	0x0041c705
  4007a4:	0003dbc2 	.word	0x0003dbc2
  4007a8:	20400001 	.word	0x20400001

004007ac <readTouchZ>:
int readTouchZ(int rxplate) {
  4007ac:	b570      	push	{r4, r5, r6, lr}
  4007ae:	ed2d 8b04 	vpush	{d8-d9}
  4007b2:	ee08 0a10 	vmov	s16, r0
  pio_configure(XP_PIO, PIO_OUTPUT_0, XP_MASK, PIO_DEFAULT);
  4007b6:	4d2e      	ldr	r5, [pc, #184]	; (400870 <readTouchZ+0xc4>)
  4007b8:	2300      	movs	r3, #0
  4007ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4007be:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4007c2:	4628      	mov	r0, r5
  4007c4:	4c2b      	ldr	r4, [pc, #172]	; (400874 <readTouchZ+0xc8>)
  4007c6:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_1, YM_MASK, PIO_DEFAULT);
  4007c8:	4e2b      	ldr	r6, [pc, #172]	; (400878 <readTouchZ+0xcc>)
  4007ca:	2300      	movs	r3, #0
  4007cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4007d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4007d4:	4630      	mov	r0, r6
  4007d6:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  4007d8:	2300      	movs	r3, #0
  4007da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4007de:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4007e2:	4630      	mov	r0, r6
  4007e4:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  4007e6:	2300      	movs	r3, #0
  4007e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4007ec:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4007f0:	4628      	mov	r0, r5
  4007f2:	47a0      	blx	r4
  4007f4:	2201      	movs	r2, #1
  4007f6:	4b21      	ldr	r3, [pc, #132]	; (40087c <readTouchZ+0xd0>)
  4007f8:	615a      	str	r2, [r3, #20]
  4007fa:	2202      	movs	r2, #2
  4007fc:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400800:	615a      	str	r2, [r3, #20]
  delay_ms(5);
  400802:	481f      	ldr	r0, [pc, #124]	; (400880 <readTouchZ+0xd4>)
  400804:	4b1f      	ldr	r3, [pc, #124]	; (400884 <readTouchZ+0xd8>)
  400806:	4798      	blx	r3
  int z1 = readXm();
  400808:	4c1f      	ldr	r4, [pc, #124]	; (400888 <readTouchZ+0xdc>)
  40080a:	47a0      	blx	r4
  40080c:	ee08 0a90 	vmov	s17, r0
  int z2 = readYp();
  400810:	4b1e      	ldr	r3, [pc, #120]	; (40088c <readTouchZ+0xe0>)
  400812:	4798      	blx	r3
  400814:	ee09 0a10 	vmov	s18, r0
  configReadTouchX();
  400818:	4b1d      	ldr	r3, [pc, #116]	; (400890 <readTouchZ+0xe4>)
  40081a:	4798      	blx	r3
  int x  = readXm();
  40081c:	47a0      	blx	r4
  rtouch = z2;
  40081e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  rtouch /= z1;
  400822:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  400826:	ee89 7a28 	vdiv.f32	s14, s18, s17
  rtouch -= 1;
  40082a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  40082e:	ee37 7a67 	vsub.f32	s14, s14, s15
  rtouch *= x;
  400832:	ee07 0a90 	vmov	s15, r0
  400836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40083a:	ee27 7a87 	vmul.f32	s14, s15, s14
  rtouch *= rxplate;
  40083e:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  400842:	ee67 7a87 	vmul.f32	s15, s15, s14
  rtouch /= 1024;
  400846:	ed9f 7a13 	vldr	s14, [pc, #76]	; 400894 <readTouchZ+0xe8>
  40084a:	ee67 7a87 	vmul.f32	s15, s15, s14
  if(rtouch < 100.0)
  40084e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 400898 <readTouchZ+0xec>
  400852:	eef4 7ac7 	vcmpe.f32	s15, s14
  400856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40085a:	d501      	bpl.n	400860 <readTouchZ+0xb4>
  rtouch = 1024.0;
  40085c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 40089c <readTouchZ+0xf0>
}
  400860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400864:	ee17 0a90 	vmov	r0, s15
  400868:	ecbd 8b04 	vpop	{d8-d9}
  40086c:	bd70      	pop	{r4, r5, r6, pc}
  40086e:	bf00      	nop
  400870:	400e1200 	.word	0x400e1200
  400874:	0041c705 	.word	0x0041c705
  400878:	400e1400 	.word	0x400e1400
  40087c:	4003c000 	.word	0x4003c000
  400880:	0003dbc2 	.word	0x0003dbc2
  400884:	20400001 	.word	0x20400001
  400888:	004006c5 	.word	0x004006c5
  40088c:	004006b5 	.word	0x004006b5
  400890:	004006d5 	.word	0x004006d5
  400894:	3a800000 	.word	0x3a800000
  400898:	42c80000 	.word	0x42c80000
  40089c:	44800000 	.word	0x44800000

004008a0 <readTouchX>:
int readTouchX(void) {
  4008a0:	b508      	push	{r3, lr}
  return(readYp());
  4008a2:	4b01      	ldr	r3, [pc, #4]	; (4008a8 <readTouchX+0x8>)
  4008a4:	4798      	blx	r3
}
  4008a6:	bd08      	pop	{r3, pc}
  4008a8:	004006b5 	.word	0x004006b5

004008ac <readTouchY>:
int readTouchY(void) {
  4008ac:	b508      	push	{r3, lr}
  return (readXm());
  4008ae:	4b01      	ldr	r3, [pc, #4]	; (4008b4 <readTouchY+0x8>)
  4008b0:	4798      	blx	r3
}
  4008b2:	bd08      	pop	{r3, pc}
  4008b4:	004006c5 	.word	0x004006c5

004008b8 <readRawPoint>:

void readRawPoint(int *x, int *y, int *z) {
  4008b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4008ba:	b0c1      	sub	sp, #260	; 0x104
  4008bc:	4607      	mov	r7, r0
  4008be:	460e      	mov	r6, r1
  4008c0:	4615      	mov	r5, r2
  int samples[TOUCH_NUMSAMPLES];
  char valid = 0 ;
  
  configReadTouchX();
  4008c2:	4b16      	ldr	r3, [pc, #88]	; (40091c <readRawPoint+0x64>)
  4008c4:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  4008c6:	2400      	movs	r4, #0
  4008c8:	e007      	b.n	4008da <readRawPoint+0x22>
    delay_us(1);
  4008ca:	2033      	movs	r0, #51	; 0x33
  4008cc:	4b14      	ldr	r3, [pc, #80]	; (400920 <readRawPoint+0x68>)
  4008ce:	4798      	blx	r3
    samples[i] = readTouchX();
  4008d0:	4b14      	ldr	r3, [pc, #80]	; (400924 <readRawPoint+0x6c>)
  4008d2:	4798      	blx	r3
  4008d4:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  4008d8:	3401      	adds	r4, #1
  4008da:	2c3f      	cmp	r4, #63	; 0x3f
  4008dc:	ddf5      	ble.n	4008ca <readRawPoint+0x12>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  4008de:	2140      	movs	r1, #64	; 0x40
  4008e0:	4668      	mov	r0, sp
  4008e2:	4b11      	ldr	r3, [pc, #68]	; (400928 <readRawPoint+0x70>)
  4008e4:	4798      	blx	r3
  *x = (samples[TOUCH_NUMSAMPLES / 2]);
  4008e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4008e8:	603b      	str	r3, [r7, #0]
  
  configReadTouchY();
  4008ea:	4b10      	ldr	r3, [pc, #64]	; (40092c <readRawPoint+0x74>)
  4008ec:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  4008ee:	2400      	movs	r4, #0
  4008f0:	e004      	b.n	4008fc <readRawPoint+0x44>
    samples[i] = readTouchY();
  4008f2:	4b0f      	ldr	r3, [pc, #60]	; (400930 <readRawPoint+0x78>)
  4008f4:	4798      	blx	r3
  4008f6:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  4008fa:	3401      	adds	r4, #1
  4008fc:	2c3f      	cmp	r4, #63	; 0x3f
  4008fe:	ddf8      	ble.n	4008f2 <readRawPoint+0x3a>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  400900:	2140      	movs	r1, #64	; 0x40
  400902:	4668      	mov	r0, sp
  400904:	4b08      	ldr	r3, [pc, #32]	; (400928 <readRawPoint+0x70>)
  400906:	4798      	blx	r3
  *y = (samples[TOUCH_NUMSAMPLES / 2]);
  400908:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40090a:	6033      	str	r3, [r6, #0]
  
  *z = readTouchZ(300);
  40090c:	f44f 7096 	mov.w	r0, #300	; 0x12c
  400910:	4b08      	ldr	r3, [pc, #32]	; (400934 <readRawPoint+0x7c>)
  400912:	4798      	blx	r3
  400914:	6028      	str	r0, [r5, #0]
}
  400916:	b041      	add	sp, #260	; 0x104
  400918:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40091a:	bf00      	nop
  40091c:	004006d5 	.word	0x004006d5
  400920:	20400001 	.word	0x20400001
  400924:	004008a1 	.word	0x004008a1
  400928:	004005c9 	.word	0x004005c9
  40092c:	00400741 	.word	0x00400741
  400930:	004008ad 	.word	0x004008ad
  400934:	004007ad 	.word	0x004007ad

00400938 <pointToCoordinate>:

// returns if valid touch
// checks Z pressure!
int pointToCoordinate(int x, int y, int z, int *px, int *py) {
  400938:	b510      	push	{r4, lr}
  int xtemp, ytemp;
  
  xtemp = TOUCH_LCD_WIDTH*(x-TOUCH_X_240)/(TOUCH_X_0-TOUCH_X_240);
  40093a:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
  40093e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  400942:	0104      	lsls	r4, r0, #4
  400944:	4818      	ldr	r0, [pc, #96]	; (4009a8 <pointToCoordinate+0x70>)
  400946:	fb80 e004 	smull	lr, r0, r0, r4
  40094a:	4420      	add	r0, r4
  40094c:	17e4      	asrs	r4, r4, #31
  40094e:	ebc4 24e0 	rsb	r4, r4, r0, asr #11
  if(xtemp > TOUCH_LCD_WIDTH) xtemp=TOUCH_LCD_WIDTH;
  400952:	2cf0      	cmp	r4, #240	; 0xf0
  400954:	dd00      	ble.n	400958 <pointToCoordinate+0x20>
  400956:	24f0      	movs	r4, #240	; 0xf0
  if(xtemp < 0) xtemp=0;
  400958:	2c00      	cmp	r4, #0
  40095a:	db1e      	blt.n	40099a <pointToCoordinate+0x62>
  *py = xtemp;
  40095c:	9802      	ldr	r0, [sp, #8]
  40095e:	6004      	str	r4, [r0, #0]
    
  ytemp = TOUCH_LCD_HEIGHT - TOUCH_LCD_HEIGHT*(y-TOUCH_Y_0)/(TOUCH_Y_320-TOUCH_Y_0);
  400960:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
  400964:	ebc1 6001 	rsb	r0, r1, r1, lsl #24
  400968:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
  40096c:	0188      	lsls	r0, r1, #6
  40096e:	490f      	ldr	r1, [pc, #60]	; (4009ac <pointToCoordinate+0x74>)
  400970:	fb81 4100 	smull	r4, r1, r1, r0
  400974:	4401      	add	r1, r0
  400976:	17c0      	asrs	r0, r0, #31
  400978:	ebc0 20e1 	rsb	r0, r0, r1, asr #11
  40097c:	f500 70a0 	add.w	r0, r0, #320	; 0x140
  if(ytemp > TOUCH_LCD_HEIGHT) ytemp=TOUCH_LCD_HEIGHT;
  400980:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  400984:	dd01      	ble.n	40098a <pointToCoordinate+0x52>
  400986:	f44f 70a0 	mov.w	r0, #320	; 0x140
  if(ytemp < 0) ytemp=0;
  40098a:	2800      	cmp	r0, #0
  40098c:	db07      	blt.n	40099e <pointToCoordinate+0x66>
  *px = ytemp;
  40098e:	6018      	str	r0, [r3, #0]

  if(z < TOUCH_PRESSURE_DETECT) {
  400990:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  400994:	db05      	blt.n	4009a2 <pointToCoordinate+0x6a>
    return 1;
  }  
  return 0;
  400996:	2000      	movs	r0, #0
}
  400998:	bd10      	pop	{r4, pc}
  if(xtemp < 0) xtemp=0;
  40099a:	2400      	movs	r4, #0
  40099c:	e7de      	b.n	40095c <pointToCoordinate+0x24>
  if(ytemp < 0) ytemp=0;
  40099e:	2000      	movs	r0, #0
  4009a0:	e7f5      	b.n	40098e <pointToCoordinate+0x56>
    return 1;
  4009a2:	2001      	movs	r0, #1
  4009a4:	bd10      	pop	{r4, pc}
  4009a6:	bf00      	nop
  4009a8:	cd9a6735 	.word	0xcd9a6735
  4009ac:	bc97c21f 	.word	0xbc97c21f

004009b0 <readPoint>:

int readPoint(int *px, int *py){
  4009b0:	b530      	push	{r4, r5, lr}
  4009b2:	b087      	sub	sp, #28
  4009b4:	4604      	mov	r4, r0
  4009b6:	460d      	mov	r5, r1
  int x, y, z;
  readRawPoint(&x, &y, &z);
  4009b8:	aa03      	add	r2, sp, #12
  4009ba:	a904      	add	r1, sp, #16
  4009bc:	a805      	add	r0, sp, #20
  4009be:	4b05      	ldr	r3, [pc, #20]	; (4009d4 <readPoint+0x24>)
  4009c0:	4798      	blx	r3
  return(pointToCoordinate(x,y,z, px, py));
  4009c2:	9500      	str	r5, [sp, #0]
  4009c4:	4623      	mov	r3, r4
  4009c6:	9a03      	ldr	r2, [sp, #12]
  4009c8:	9904      	ldr	r1, [sp, #16]
  4009ca:	9805      	ldr	r0, [sp, #20]
  4009cc:	4c02      	ldr	r4, [pc, #8]	; (4009d8 <readPoint+0x28>)
  4009ce:	47a0      	blx	r4
}
  4009d0:	b007      	add	sp, #28
  4009d2:	bd30      	pop	{r4, r5, pc}
  4009d4:	004008b9 	.word	0x004008b9
  4009d8:	00400939 	.word	0x00400939

004009dc <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4009dc:	2240      	movs	r2, #64	; 0x40
  4009de:	4b10      	ldr	r3, [pc, #64]	; (400a20 <ili9341_send_command+0x44>)
  4009e0:	635a      	str	r2, [r3, #52]	; 0x34
  4009e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4009e6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4009ea:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4009ec:	4b0d      	ldr	r3, [pc, #52]	; (400a24 <ili9341_send_command+0x48>)
  4009ee:	691b      	ldr	r3, [r3, #16]
  4009f0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4009f4:	d110      	bne.n	400a18 <ili9341_send_command+0x3c>
		return 1;
	} else {
		return 0;
  4009f6:	2300      	movs	r3, #0
 * \brief Helper function to wait for the last send operation to complete
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4009f8:	2b00      	cmp	r3, #0
  4009fa:	d0f7      	beq.n	4009ec <ili9341_send_command+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4009fc:	4b09      	ldr	r3, [pc, #36]	; (400a24 <ili9341_send_command+0x48>)
  4009fe:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a00:	4b08      	ldr	r3, [pc, #32]	; (400a24 <ili9341_send_command+0x48>)
  400a02:	691b      	ldr	r3, [r3, #16]
  400a04:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a08:	d108      	bne.n	400a1c <ili9341_send_command+0x40>
		return 0;
  400a0a:	2300      	movs	r3, #0
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d0f7      	beq.n	400a00 <ili9341_send_command+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a10:	2240      	movs	r2, #64	; 0x40
  400a12:	4b03      	ldr	r3, [pc, #12]	; (400a20 <ili9341_send_command+0x44>)
  400a14:	631a      	str	r2, [r3, #48]	; 0x30
  400a16:	4770      	bx	lr
		return 1;
  400a18:	2301      	movs	r3, #1
  400a1a:	e7ed      	b.n	4009f8 <ili9341_send_command+0x1c>
  400a1c:	2301      	movs	r3, #1
  400a1e:	e7f5      	b.n	400a0c <ili9341_send_command+0x30>
  400a20:	400e0e00 	.word	0x400e0e00
  400a24:	40008000 	.word	0x40008000

00400a28 <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
  400a28:	b510      	push	{r4, lr}
  400a2a:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
  400a2c:	202a      	movs	r0, #42	; 0x2a
  400a2e:	4b4e      	ldr	r3, [pc, #312]	; (400b68 <ili9341_send_draw_limits+0x140>)
  400a30:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
  400a32:	4b4e      	ldr	r3, [pc, #312]	; (400b6c <ili9341_send_draw_limits+0x144>)
  400a34:	f9b3 2000 	ldrsh.w	r2, [r3]
  400a38:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a3c:	4b4c      	ldr	r3, [pc, #304]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a3e:	691b      	ldr	r3, [r3, #16]
  400a40:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a44:	d17b      	bne.n	400b3e <ili9341_send_draw_limits+0x116>
		return 0;
  400a46:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400a48:	2b00      	cmp	r3, #0
  400a4a:	d0f7      	beq.n	400a3c <ili9341_send_draw_limits+0x14>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a4c:	4b48      	ldr	r3, [pc, #288]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a4e:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
  400a50:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a52:	4b47      	ldr	r3, [pc, #284]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a54:	691b      	ldr	r3, [r3, #16]
  400a56:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a5a:	d172      	bne.n	400b42 <ili9341_send_draw_limits+0x11a>
		return 0;
  400a5c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400a5e:	2b00      	cmp	r3, #0
  400a60:	d0f7      	beq.n	400a52 <ili9341_send_draw_limits+0x2a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a62:	4b43      	ldr	r3, [pc, #268]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a64:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400a66:	b1cc      	cbz	r4, 400a9c <ili9341_send_draw_limits+0x74>
		ili9341_send_byte(limit_end_x >> 8);
  400a68:	4b42      	ldr	r3, [pc, #264]	; (400b74 <ili9341_send_draw_limits+0x14c>)
  400a6a:	f9b3 2000 	ldrsh.w	r2, [r3]
  400a6e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a72:	4b3f      	ldr	r3, [pc, #252]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a74:	691b      	ldr	r3, [r3, #16]
  400a76:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a7a:	d164      	bne.n	400b46 <ili9341_send_draw_limits+0x11e>
		return 0;
  400a7c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400a7e:	2b00      	cmp	r3, #0
  400a80:	d0f7      	beq.n	400a72 <ili9341_send_draw_limits+0x4a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a82:	4b3b      	ldr	r3, [pc, #236]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a84:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
  400a86:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a88:	4b39      	ldr	r3, [pc, #228]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a8a:	691b      	ldr	r3, [r3, #16]
  400a8c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a90:	d15b      	bne.n	400b4a <ili9341_send_draw_limits+0x122>
		return 0;
  400a92:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400a94:	2b00      	cmp	r3, #0
  400a96:	d0f7      	beq.n	400a88 <ili9341_send_draw_limits+0x60>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a98:	4b35      	ldr	r3, [pc, #212]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a9a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a9c:	4b34      	ldr	r3, [pc, #208]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a9e:	691b      	ldr	r3, [r3, #16]
  400aa0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400aa4:	d153      	bne.n	400b4e <ili9341_send_draw_limits+0x126>
		return 0;
  400aa6:	2300      	movs	r3, #0
  400aa8:	2b00      	cmp	r3, #0
  400aaa:	d0f7      	beq.n	400a9c <ili9341_send_draw_limits+0x74>
  400aac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400ab0:	4b31      	ldr	r3, [pc, #196]	; (400b78 <ili9341_send_draw_limits+0x150>)
  400ab2:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
  400ab4:	202b      	movs	r0, #43	; 0x2b
  400ab6:	4b2c      	ldr	r3, [pc, #176]	; (400b68 <ili9341_send_draw_limits+0x140>)
  400ab8:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
  400aba:	4b30      	ldr	r3, [pc, #192]	; (400b7c <ili9341_send_draw_limits+0x154>)
  400abc:	f9b3 2000 	ldrsh.w	r2, [r3]
  400ac0:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ac4:	4b2a      	ldr	r3, [pc, #168]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400ac6:	691b      	ldr	r3, [r3, #16]
  400ac8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400acc:	d141      	bne.n	400b52 <ili9341_send_draw_limits+0x12a>
		return 0;
  400ace:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ad0:	2b00      	cmp	r3, #0
  400ad2:	d0f7      	beq.n	400ac4 <ili9341_send_draw_limits+0x9c>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ad4:	4b26      	ldr	r3, [pc, #152]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400ad6:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
  400ad8:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ada:	4b25      	ldr	r3, [pc, #148]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400adc:	691b      	ldr	r3, [r3, #16]
  400ade:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ae2:	d138      	bne.n	400b56 <ili9341_send_draw_limits+0x12e>
		return 0;
  400ae4:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ae6:	2b00      	cmp	r3, #0
  400ae8:	d0f7      	beq.n	400ada <ili9341_send_draw_limits+0xb2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400aea:	4b21      	ldr	r3, [pc, #132]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400aec:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400aee:	b1cc      	cbz	r4, 400b24 <ili9341_send_draw_limits+0xfc>
		ili9341_send_byte(limit_end_y >> 8);
  400af0:	4b23      	ldr	r3, [pc, #140]	; (400b80 <ili9341_send_draw_limits+0x158>)
  400af2:	f9b3 2000 	ldrsh.w	r2, [r3]
  400af6:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400afa:	4b1d      	ldr	r3, [pc, #116]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400afc:	691b      	ldr	r3, [r3, #16]
  400afe:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b02:	d12a      	bne.n	400b5a <ili9341_send_draw_limits+0x132>
		return 0;
  400b04:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400b06:	2b00      	cmp	r3, #0
  400b08:	d0f7      	beq.n	400afa <ili9341_send_draw_limits+0xd2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400b0a:	4b19      	ldr	r3, [pc, #100]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b0c:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
  400b0e:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400b10:	4b17      	ldr	r3, [pc, #92]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b12:	691b      	ldr	r3, [r3, #16]
  400b14:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b18:	d121      	bne.n	400b5e <ili9341_send_draw_limits+0x136>
		return 0;
  400b1a:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400b1c:	2b00      	cmp	r3, #0
  400b1e:	d0f7      	beq.n	400b10 <ili9341_send_draw_limits+0xe8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400b20:	4b13      	ldr	r3, [pc, #76]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b22:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400b24:	4b12      	ldr	r3, [pc, #72]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b26:	691b      	ldr	r3, [r3, #16]
  400b28:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b2c:	d119      	bne.n	400b62 <ili9341_send_draw_limits+0x13a>
		return 0;
  400b2e:	2300      	movs	r3, #0
  400b30:	2b00      	cmp	r3, #0
  400b32:	d0f7      	beq.n	400b24 <ili9341_send_draw_limits+0xfc>
  400b34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400b38:	4b0f      	ldr	r3, [pc, #60]	; (400b78 <ili9341_send_draw_limits+0x150>)
  400b3a:	631a      	str	r2, [r3, #48]	; 0x30
  400b3c:	bd10      	pop	{r4, pc}
		return 1;
  400b3e:	2301      	movs	r3, #1
  400b40:	e782      	b.n	400a48 <ili9341_send_draw_limits+0x20>
  400b42:	2301      	movs	r3, #1
  400b44:	e78b      	b.n	400a5e <ili9341_send_draw_limits+0x36>
  400b46:	2301      	movs	r3, #1
  400b48:	e799      	b.n	400a7e <ili9341_send_draw_limits+0x56>
  400b4a:	2301      	movs	r3, #1
  400b4c:	e7a2      	b.n	400a94 <ili9341_send_draw_limits+0x6c>
  400b4e:	2301      	movs	r3, #1
  400b50:	e7aa      	b.n	400aa8 <ili9341_send_draw_limits+0x80>
  400b52:	2301      	movs	r3, #1
  400b54:	e7bc      	b.n	400ad0 <ili9341_send_draw_limits+0xa8>
  400b56:	2301      	movs	r3, #1
  400b58:	e7c5      	b.n	400ae6 <ili9341_send_draw_limits+0xbe>
  400b5a:	2301      	movs	r3, #1
  400b5c:	e7d3      	b.n	400b06 <ili9341_send_draw_limits+0xde>
  400b5e:	2301      	movs	r3, #1
  400b60:	e7dc      	b.n	400b1c <ili9341_send_draw_limits+0xf4>
  400b62:	2301      	movs	r3, #1
  400b64:	e7e4      	b.n	400b30 <ili9341_send_draw_limits+0x108>
  400b66:	bf00      	nop
  400b68:	004009dd 	.word	0x004009dd
  400b6c:	20400a30 	.word	0x20400a30
  400b70:	40008000 	.word	0x40008000
  400b74:	20400a2c 	.word	0x20400a2c
  400b78:	400e1400 	.word	0x400e1400
  400b7c:	20400a32 	.word	0x20400a32
  400b80:	20400a2e 	.word	0x20400a2e

00400b84 <ili9341_interface_init>:
 * interface through either the SPI module in master mode or the USART in
 * Master SPI mode.  Configuration must be done in the associated
 * conf_ili9341.h file.
 */
static void ili9341_interface_init(void)
{
  400b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b88:	b084      	sub	sp, #16
	#error Interface for ILI9341 has not been selected or interface not\
	supported, please configure component driver using the conf_ili9341.h\
	file!
#endif

	struct spi_device device = { .id = BOARD_ILI9488_SPI_NPCS, };     	// Board specific chip select configuration
  400b8a:	2703      	movs	r7, #3
  400b8c:	ad04      	add	r5, sp, #16
  400b8e:	f845 7d04 	str.w	r7, [r5, #-4]!

	spi_master_init(CONF_ILI9341_SPI);
  400b92:	4c10      	ldr	r4, [pc, #64]	; (400bd4 <ili9341_interface_init+0x50>)
  400b94:	4620      	mov	r0, r4
  400b96:	4b10      	ldr	r3, [pc, #64]	; (400bd8 <ili9341_interface_init+0x54>)
  400b98:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags, CONF_ILI9341_CLOCK_SPEED, spi_select_id);
  400b9a:	2600      	movs	r6, #0
  400b9c:	9600      	str	r6, [sp, #0]
  400b9e:	4b0f      	ldr	r3, [pc, #60]	; (400bdc <ili9341_interface_init+0x58>)
  400ba0:	4632      	mov	r2, r6
  400ba2:	4629      	mov	r1, r5
  400ba4:	4620      	mov	r0, r4
  400ba6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400bf0 <ili9341_interface_init+0x6c>
  400baa:	47c0      	blx	r8
 	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400bac:	4632      	mov	r2, r6
  400bae:	4639      	mov	r1, r7
  400bb0:	4620      	mov	r0, r4
  400bb2:	4b0b      	ldr	r3, [pc, #44]	; (400be0 <ili9341_interface_init+0x5c>)
  400bb4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400bb6:	2601      	movs	r6, #1
  400bb8:	6026      	str	r6, [r4, #0]
	spi_enable(CONF_ILI9341_SPI);
  spi_select_device(CONF_ILI9341_SPI, &device);
  400bba:	4629      	mov	r1, r5
  400bbc:	4620      	mov	r0, r4
  400bbe:	4b09      	ldr	r3, [pc, #36]	; (400be4 <ili9341_interface_init+0x60>)
  400bc0:	4798      	blx	r3
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400bc2:	23f0      	movs	r3, #240	; 0xf0
  400bc4:	60e3      	str	r3, [r4, #12]
  400bc6:	60e6      	str	r6, [r4, #12]
	/* Send one dummy byte for the spi_is_tx_ok() to work as expected */
	spi_write_single(CONF_ILI9341_SPI, 0xF0);
  
  // from adafruit lib: https://github.com/adafruit/Adafruit_ILI9341/blob/1e4305308aae231bb5c475de9afc671e78caa722/Adafruit_ILI9341.cpp#L194
  spi_write_single(CONF_ILI9341_SPI, ILI9341_CMD_SOFTWARE_RESET); // Engage software reset
  delay_ms(150);
  400bc8:	4807      	ldr	r0, [pc, #28]	; (400be8 <ili9341_interface_init+0x64>)
  400bca:	4b08      	ldr	r3, [pc, #32]	; (400bec <ili9341_interface_init+0x68>)
  400bcc:	4798      	blx	r3
}
  400bce:	b004      	add	sp, #16
  400bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bd4:	40008000 	.word	0x40008000
  400bd8:	0041c1b5 	.word	0x0041c1b5
  400bdc:	02625a00 	.word	0x02625a00
  400be0:	0041cb75 	.word	0x0041cb75
  400be4:	0041c289 	.word	0x0041c289
  400be8:	0073c0b7 	.word	0x0073c0b7
  400bec:	20400001 	.word	0x20400001
  400bf0:	0041c209 	.word	0x0041c209

00400bf4 <ili9341_reset_display>:
 * \brief Reset the display using the digital control interface
 *
 * Controls the reset pin of the display controller to reset the display.
 */
static void ili9341_reset_display(void)
{
  400bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400bf6:	4d07      	ldr	r5, [pc, #28]	; (400c14 <ili9341_reset_display+0x20>)
  400bf8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
  400bfc:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(10);
  400bfe:	4f06      	ldr	r7, [pc, #24]	; (400c18 <ili9341_reset_display+0x24>)
  400c00:	4638      	mov	r0, r7
  400c02:	4c06      	ldr	r4, [pc, #24]	; (400c1c <ili9341_reset_display+0x28>)
  400c04:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c06:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(LCD_SPI_RESET_PIO, false);
	delay_ms(10);
  400c08:	4638      	mov	r0, r7
  400c0a:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c0c:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(150);
  400c0e:	4804      	ldr	r0, [pc, #16]	; (400c20 <ili9341_reset_display+0x2c>)
  400c10:	47a0      	blx	r4
  400c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c14:	400e0e00 	.word	0x400e0e00
  400c18:	0007b784 	.word	0x0007b784
  400c1c:	20400001 	.word	0x20400001
  400c20:	0073c0b7 	.word	0x0073c0b7

00400c24 <ili9341_exit_standby>:
{
  400c24:	b570      	push	{r4, r5, r6, lr}
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
  400c26:	2011      	movs	r0, #17
  400c28:	4e06      	ldr	r6, [pc, #24]	; (400c44 <ili9341_exit_standby+0x20>)
  400c2a:	47b0      	blx	r6
  400c2c:	4c06      	ldr	r4, [pc, #24]	; (400c48 <ili9341_exit_standby+0x24>)
  400c2e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  400c32:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(150);
  400c34:	4805      	ldr	r0, [pc, #20]	; (400c4c <ili9341_exit_standby+0x28>)
  400c36:	4b06      	ldr	r3, [pc, #24]	; (400c50 <ili9341_exit_standby+0x2c>)
  400c38:	4798      	blx	r3
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
  400c3a:	2029      	movs	r0, #41	; 0x29
  400c3c:	47b0      	blx	r6
  400c3e:	6325      	str	r5, [r4, #48]	; 0x30
  400c40:	bd70      	pop	{r4, r5, r6, pc}
  400c42:	bf00      	nop
  400c44:	004009dd 	.word	0x004009dd
  400c48:	400e1400 	.word	0x400e1400
  400c4c:	0073c0b7 	.word	0x0073c0b7
  400c50:	20400001 	.word	0x20400001

00400c54 <ili9341_set_top_left_limit>:
{
  400c54:	b508      	push	{r3, lr}
	limit_start_x = x;
  400c56:	4b04      	ldr	r3, [pc, #16]	; (400c68 <ili9341_set_top_left_limit+0x14>)
  400c58:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
  400c5a:	4b04      	ldr	r3, [pc, #16]	; (400c6c <ili9341_set_top_left_limit+0x18>)
  400c5c:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(false);
  400c5e:	2000      	movs	r0, #0
  400c60:	4b03      	ldr	r3, [pc, #12]	; (400c70 <ili9341_set_top_left_limit+0x1c>)
  400c62:	4798      	blx	r3
  400c64:	bd08      	pop	{r3, pc}
  400c66:	bf00      	nop
  400c68:	20400a30 	.word	0x20400a30
  400c6c:	20400a32 	.word	0x20400a32
  400c70:	00400a29 	.word	0x00400a29

00400c74 <ili9341_set_bottom_right_limit>:
{
  400c74:	b508      	push	{r3, lr}
	limit_end_x = x;
  400c76:	4b04      	ldr	r3, [pc, #16]	; (400c88 <ili9341_set_bottom_right_limit+0x14>)
  400c78:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
  400c7a:	4b04      	ldr	r3, [pc, #16]	; (400c8c <ili9341_set_bottom_right_limit+0x18>)
  400c7c:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(true);
  400c7e:	2001      	movs	r0, #1
  400c80:	4b03      	ldr	r3, [pc, #12]	; (400c90 <ili9341_set_bottom_right_limit+0x1c>)
  400c82:	4798      	blx	r3
  400c84:	bd08      	pop	{r3, pc}
  400c86:	bf00      	nop
  400c88:	20400a2c 	.word	0x20400a2c
  400c8c:	20400a2e 	.word	0x20400a2e
  400c90:	00400a29 	.word	0x00400a29

00400c94 <ili9341_set_limits>:
{
  400c94:	b510      	push	{r4, lr}
	limit_start_x = start_x;
  400c96:	4c06      	ldr	r4, [pc, #24]	; (400cb0 <ili9341_set_limits+0x1c>)
  400c98:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  400c9a:	4806      	ldr	r0, [pc, #24]	; (400cb4 <ili9341_set_limits+0x20>)
  400c9c:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  400c9e:	4906      	ldr	r1, [pc, #24]	; (400cb8 <ili9341_set_limits+0x24>)
  400ca0:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  400ca2:	4a06      	ldr	r2, [pc, #24]	; (400cbc <ili9341_set_limits+0x28>)
  400ca4:	8013      	strh	r3, [r2, #0]
	ili9341_send_draw_limits(true);
  400ca6:	2001      	movs	r0, #1
  400ca8:	4b05      	ldr	r3, [pc, #20]	; (400cc0 <ili9341_set_limits+0x2c>)
  400caa:	4798      	blx	r3
  400cac:	bd10      	pop	{r4, pc}
  400cae:	bf00      	nop
  400cb0:	20400a30 	.word	0x20400a30
  400cb4:	20400a32 	.word	0x20400a32
  400cb8:	20400a2c 	.word	0x20400a2c
  400cbc:	20400a2e 	.word	0x20400a2e
  400cc0:	00400a29 	.word	0x00400a29

00400cc4 <ili9341_copy_pixels_to_screen>:
{
  400cc4:	b538      	push	{r3, r4, r5, lr}
  400cc6:	4605      	mov	r5, r0
  400cc8:	460c      	mov	r4, r1
	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
  400cca:	202c      	movs	r0, #44	; 0x2c
  400ccc:	4b18      	ldr	r3, [pc, #96]	; (400d30 <ili9341_copy_pixels_to_screen+0x6c>)
  400cce:	4798      	blx	r3
	while (count--) {
  400cd0:	e018      	b.n	400d04 <ili9341_copy_pixels_to_screen+0x40>
		ili9341_send_byte(*pixel);
  400cd2:	782a      	ldrb	r2, [r5, #0]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400cd4:	4b17      	ldr	r3, [pc, #92]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400cd6:	691b      	ldr	r3, [r3, #16]
  400cd8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cdc:	d122      	bne.n	400d24 <ili9341_copy_pixels_to_screen+0x60>
		return 0;
  400cde:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	d0f7      	beq.n	400cd4 <ili9341_copy_pixels_to_screen+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ce4:	4b13      	ldr	r3, [pc, #76]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400ce6:	60da      	str	r2, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
  400ce8:	882a      	ldrh	r2, [r5, #0]
  400cea:	0a12      	lsrs	r2, r2, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400cec:	4b11      	ldr	r3, [pc, #68]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400cee:	691b      	ldr	r3, [r3, #16]
  400cf0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cf4:	d118      	bne.n	400d28 <ili9341_copy_pixels_to_screen+0x64>
		return 0;
  400cf6:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400cf8:	2b00      	cmp	r3, #0
  400cfa:	d0f7      	beq.n	400cec <ili9341_copy_pixels_to_screen+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400cfc:	4b0d      	ldr	r3, [pc, #52]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400cfe:	60da      	str	r2, [r3, #12]
		pixel++;
  400d00:	3502      	adds	r5, #2
	while (count--) {
  400d02:	460c      	mov	r4, r1
  400d04:	1e61      	subs	r1, r4, #1
  400d06:	2c00      	cmp	r4, #0
  400d08:	d1e3      	bne.n	400cd2 <ili9341_copy_pixels_to_screen+0xe>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d0a:	4b0a      	ldr	r3, [pc, #40]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400d0c:	691b      	ldr	r3, [r3, #16]
  400d0e:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d12:	d10b      	bne.n	400d2c <ili9341_copy_pixels_to_screen+0x68>
		return 0;
  400d14:	4623      	mov	r3, r4
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d16:	2b00      	cmp	r3, #0
  400d18:	d0f7      	beq.n	400d0a <ili9341_copy_pixels_to_screen+0x46>
  400d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d1e:	4b06      	ldr	r3, [pc, #24]	; (400d38 <ili9341_copy_pixels_to_screen+0x74>)
  400d20:	631a      	str	r2, [r3, #48]	; 0x30
  400d22:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
  400d24:	2301      	movs	r3, #1
  400d26:	e7db      	b.n	400ce0 <ili9341_copy_pixels_to_screen+0x1c>
  400d28:	2301      	movs	r3, #1
  400d2a:	e7e5      	b.n	400cf8 <ili9341_copy_pixels_to_screen+0x34>
  400d2c:	2301      	movs	r3, #1
  400d2e:	e7f2      	b.n	400d16 <ili9341_copy_pixels_to_screen+0x52>
  400d30:	004009dd 	.word	0x004009dd
  400d34:	40008000 	.word	0x40008000
  400d38:	400e1400 	.word	0x400e1400

00400d3c <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
  400d3c:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
  400d3e:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
  400d42:	f010 0f01 	tst.w	r0, #1
  400d46:	d124      	bne.n	400d92 <ili9341_set_orientation+0x56>
	uint8_t madctl = 0x48;
  400d48:	2448      	movs	r4, #72	; 0x48
		madctl &= ~(1 << 6);
	}

	if (flags & ILI9341_FLIP_Y) {
  400d4a:	f010 0f02 	tst.w	r0, #2
  400d4e:	d001      	beq.n	400d54 <ili9341_set_orientation+0x18>
		madctl |= 1 << 7;
  400d50:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
  400d54:	f010 0f04 	tst.w	r0, #4
  400d58:	d001      	beq.n	400d5e <ili9341_set_orientation+0x22>
		madctl |= 1 << 5;
  400d5a:	f044 0420 	orr.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
  400d5e:	2036      	movs	r0, #54	; 0x36
  400d60:	4b0f      	ldr	r3, [pc, #60]	; (400da0 <ili9341_set_orientation+0x64>)
  400d62:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d64:	4b0f      	ldr	r3, [pc, #60]	; (400da4 <ili9341_set_orientation+0x68>)
  400d66:	691b      	ldr	r3, [r3, #16]
  400d68:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d6c:	d113      	bne.n	400d96 <ili9341_set_orientation+0x5a>
		return 0;
  400d6e:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d70:	2b00      	cmp	r3, #0
  400d72:	d0f7      	beq.n	400d64 <ili9341_set_orientation+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d74:	4b0b      	ldr	r3, [pc, #44]	; (400da4 <ili9341_set_orientation+0x68>)
  400d76:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d78:	4b0a      	ldr	r3, [pc, #40]	; (400da4 <ili9341_set_orientation+0x68>)
  400d7a:	691b      	ldr	r3, [r3, #16]
  400d7c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d80:	d10b      	bne.n	400d9a <ili9341_set_orientation+0x5e>
		return 0;
  400d82:	2300      	movs	r3, #0
  400d84:	2b00      	cmp	r3, #0
  400d86:	d0f7      	beq.n	400d78 <ili9341_set_orientation+0x3c>
  400d88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d8c:	4b06      	ldr	r3, [pc, #24]	; (400da8 <ili9341_set_orientation+0x6c>)
  400d8e:	631a      	str	r2, [r3, #48]	; 0x30
  400d90:	bd10      	pop	{r4, pc}
		madctl &= ~(1 << 6);
  400d92:	2408      	movs	r4, #8
  400d94:	e7d9      	b.n	400d4a <ili9341_set_orientation+0xe>
		return 1;
  400d96:	2301      	movs	r3, #1
  400d98:	e7ea      	b.n	400d70 <ili9341_set_orientation+0x34>
  400d9a:	2301      	movs	r3, #1
  400d9c:	e7f2      	b.n	400d84 <ili9341_set_orientation+0x48>
  400d9e:	bf00      	nop
  400da0:	004009dd 	.word	0x004009dd
  400da4:	40008000 	.word	0x40008000
  400da8:	400e1400 	.word	0x400e1400

00400dac <ili9341_controller_init_registers>:
{
  400dac:	b510      	push	{r4, lr}
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
  400dae:	20cd      	movs	r0, #205	; 0xcd
  400db0:	4ba9      	ldr	r3, [pc, #676]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400db2:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400db4:	4ba9      	ldr	r3, [pc, #676]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400db6:	691b      	ldr	r3, [r3, #16]
  400db8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dbc:	f040 8195 	bne.w	4010ea <ili9341_controller_init_registers+0x33e>
		return 0;
  400dc0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400dc2:	2b00      	cmp	r3, #0
  400dc4:	d0f6      	beq.n	400db4 <ili9341_controller_init_registers+0x8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400dc6:	2239      	movs	r2, #57	; 0x39
  400dc8:	4ba4      	ldr	r3, [pc, #656]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dca:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400dcc:	4ba3      	ldr	r3, [pc, #652]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dce:	691b      	ldr	r3, [r3, #16]
  400dd0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dd4:	f040 818b 	bne.w	4010ee <ili9341_controller_init_registers+0x342>
		return 0;
  400dd8:	2300      	movs	r3, #0
  400dda:	2b00      	cmp	r3, #0
  400ddc:	d0f6      	beq.n	400dcc <ili9341_controller_init_registers+0x20>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400dde:	222c      	movs	r2, #44	; 0x2c
  400de0:	4b9e      	ldr	r3, [pc, #632]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400de2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400de4:	4b9d      	ldr	r3, [pc, #628]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400de6:	691b      	ldr	r3, [r3, #16]
  400de8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dec:	f040 8181 	bne.w	4010f2 <ili9341_controller_init_registers+0x346>
		return 0;
  400df0:	2300      	movs	r3, #0
  400df2:	2b00      	cmp	r3, #0
  400df4:	d0f6      	beq.n	400de4 <ili9341_controller_init_registers+0x38>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400df6:	2200      	movs	r2, #0
  400df8:	4b98      	ldr	r3, [pc, #608]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dfa:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400dfc:	4b97      	ldr	r3, [pc, #604]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dfe:	691b      	ldr	r3, [r3, #16]
  400e00:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e04:	f040 8177 	bne.w	4010f6 <ili9341_controller_init_registers+0x34a>
		return 0;
  400e08:	2300      	movs	r3, #0
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d0f6      	beq.n	400dfc <ili9341_controller_init_registers+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e0e:	2234      	movs	r2, #52	; 0x34
  400e10:	4b92      	ldr	r3, [pc, #584]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e12:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e14:	4b91      	ldr	r3, [pc, #580]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e16:	691b      	ldr	r3, [r3, #16]
  400e18:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e1c:	f040 816d 	bne.w	4010fa <ili9341_controller_init_registers+0x34e>
		return 0;
  400e20:	2300      	movs	r3, #0
  400e22:	2b00      	cmp	r3, #0
  400e24:	d0f6      	beq.n	400e14 <ili9341_controller_init_registers+0x68>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e26:	2202      	movs	r2, #2
  400e28:	4b8c      	ldr	r3, [pc, #560]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e2a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e2c:	4b8b      	ldr	r3, [pc, #556]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e2e:	691b      	ldr	r3, [r3, #16]
  400e30:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e34:	f040 8163 	bne.w	4010fe <ili9341_controller_init_registers+0x352>
		return 0;
  400e38:	2300      	movs	r3, #0
  400e3a:	2b00      	cmp	r3, #0
  400e3c:	d0f6      	beq.n	400e2c <ili9341_controller_init_registers+0x80>
  400e3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400e42:	4b87      	ldr	r3, [pc, #540]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400e44:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
  400e46:	20cf      	movs	r0, #207	; 0xcf
  400e48:	4b83      	ldr	r3, [pc, #524]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400e4a:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e4c:	4b83      	ldr	r3, [pc, #524]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e4e:	691b      	ldr	r3, [r3, #16]
  400e50:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e54:	f040 8155 	bne.w	401102 <ili9341_controller_init_registers+0x356>
		return 0;
  400e58:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400e5a:	2b00      	cmp	r3, #0
  400e5c:	d0f6      	beq.n	400e4c <ili9341_controller_init_registers+0xa0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e5e:	2200      	movs	r2, #0
  400e60:	4b7e      	ldr	r3, [pc, #504]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e62:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e64:	4b7d      	ldr	r3, [pc, #500]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e66:	691b      	ldr	r3, [r3, #16]
  400e68:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e6c:	f040 814b 	bne.w	401106 <ili9341_controller_init_registers+0x35a>
		return 0;
  400e70:	2300      	movs	r3, #0
  400e72:	2b00      	cmp	r3, #0
  400e74:	d0f6      	beq.n	400e64 <ili9341_controller_init_registers+0xb8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e76:	22aa      	movs	r2, #170	; 0xaa
  400e78:	4b78      	ldr	r3, [pc, #480]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e7a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e7c:	4b77      	ldr	r3, [pc, #476]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e7e:	691b      	ldr	r3, [r3, #16]
  400e80:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e84:	f040 8141 	bne.w	40110a <ili9341_controller_init_registers+0x35e>
		return 0;
  400e88:	2300      	movs	r3, #0
  400e8a:	2b00      	cmp	r3, #0
  400e8c:	d0f6      	beq.n	400e7c <ili9341_controller_init_registers+0xd0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e8e:	22b0      	movs	r2, #176	; 0xb0
  400e90:	4b72      	ldr	r3, [pc, #456]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e92:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e94:	4b71      	ldr	r3, [pc, #452]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e96:	691b      	ldr	r3, [r3, #16]
  400e98:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e9c:	f040 8137 	bne.w	40110e <ili9341_controller_init_registers+0x362>
		return 0;
  400ea0:	2300      	movs	r3, #0
  400ea2:	2b00      	cmp	r3, #0
  400ea4:	d0f6      	beq.n	400e94 <ili9341_controller_init_registers+0xe8>
  400ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400eaa:	4b6d      	ldr	r3, [pc, #436]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400eac:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
  400eae:	20f7      	movs	r0, #247	; 0xf7
  400eb0:	4b69      	ldr	r3, [pc, #420]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400eb2:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400eb4:	4b69      	ldr	r3, [pc, #420]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400eb6:	691b      	ldr	r3, [r3, #16]
  400eb8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ebc:	f040 8129 	bne.w	401112 <ili9341_controller_init_registers+0x366>
		return 0;
  400ec0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ec2:	2b00      	cmp	r3, #0
  400ec4:	d0f6      	beq.n	400eb4 <ili9341_controller_init_registers+0x108>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ec6:	2230      	movs	r2, #48	; 0x30
  400ec8:	4b64      	ldr	r3, [pc, #400]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400eca:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ecc:	4b63      	ldr	r3, [pc, #396]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400ece:	691b      	ldr	r3, [r3, #16]
  400ed0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ed4:	f040 811f 	bne.w	401116 <ili9341_controller_init_registers+0x36a>
		return 0;
  400ed8:	2300      	movs	r3, #0
  400eda:	2b00      	cmp	r3, #0
  400edc:	d0f6      	beq.n	400ecc <ili9341_controller_init_registers+0x120>
  400ede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400ee2:	4b5f      	ldr	r3, [pc, #380]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400ee4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
  400ee6:	20c0      	movs	r0, #192	; 0xc0
  400ee8:	4b5b      	ldr	r3, [pc, #364]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400eea:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400eec:	4b5b      	ldr	r3, [pc, #364]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400eee:	691b      	ldr	r3, [r3, #16]
  400ef0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ef4:	f040 8111 	bne.w	40111a <ili9341_controller_init_registers+0x36e>
		return 0;
  400ef8:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400efa:	2b00      	cmp	r3, #0
  400efc:	d0f6      	beq.n	400eec <ili9341_controller_init_registers+0x140>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400efe:	2225      	movs	r2, #37	; 0x25
  400f00:	4b56      	ldr	r3, [pc, #344]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f02:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f04:	4b55      	ldr	r3, [pc, #340]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f06:	691b      	ldr	r3, [r3, #16]
  400f08:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f0c:	f040 8107 	bne.w	40111e <ili9341_controller_init_registers+0x372>
		return 0;
  400f10:	2300      	movs	r3, #0
  400f12:	2b00      	cmp	r3, #0
  400f14:	d0f6      	beq.n	400f04 <ili9341_controller_init_registers+0x158>
  400f16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400f1a:	4b51      	ldr	r3, [pc, #324]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400f1c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
  400f1e:	20c1      	movs	r0, #193	; 0xc1
  400f20:	4b4d      	ldr	r3, [pc, #308]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400f22:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f24:	4b4d      	ldr	r3, [pc, #308]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f26:	691b      	ldr	r3, [r3, #16]
  400f28:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f2c:	f040 80f9 	bne.w	401122 <ili9341_controller_init_registers+0x376>
		return 0;
  400f30:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f32:	2b00      	cmp	r3, #0
  400f34:	d0f6      	beq.n	400f24 <ili9341_controller_init_registers+0x178>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f36:	2211      	movs	r2, #17
  400f38:	4b48      	ldr	r3, [pc, #288]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f3a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f3c:	4b47      	ldr	r3, [pc, #284]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f3e:	691b      	ldr	r3, [r3, #16]
  400f40:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f44:	f040 80ef 	bne.w	401126 <ili9341_controller_init_registers+0x37a>
		return 0;
  400f48:	2300      	movs	r3, #0
  400f4a:	2b00      	cmp	r3, #0
  400f4c:	d0f6      	beq.n	400f3c <ili9341_controller_init_registers+0x190>
  400f4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400f52:	4b43      	ldr	r3, [pc, #268]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400f54:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
  400f56:	20c5      	movs	r0, #197	; 0xc5
  400f58:	4b3f      	ldr	r3, [pc, #252]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400f5a:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f5c:	4b3f      	ldr	r3, [pc, #252]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f5e:	691b      	ldr	r3, [r3, #16]
  400f60:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f64:	f040 80e1 	bne.w	40112a <ili9341_controller_init_registers+0x37e>
		return 0;
  400f68:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f6a:	2b00      	cmp	r3, #0
  400f6c:	d0f6      	beq.n	400f5c <ili9341_controller_init_registers+0x1b0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f6e:	225c      	movs	r2, #92	; 0x5c
  400f70:	4b3a      	ldr	r3, [pc, #232]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f72:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f74:	4b39      	ldr	r3, [pc, #228]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f76:	691b      	ldr	r3, [r3, #16]
  400f78:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f7c:	f040 80d7 	bne.w	40112e <ili9341_controller_init_registers+0x382>
		return 0;
  400f80:	2300      	movs	r3, #0
  400f82:	2b00      	cmp	r3, #0
  400f84:	d0f6      	beq.n	400f74 <ili9341_controller_init_registers+0x1c8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f86:	224c      	movs	r2, #76	; 0x4c
  400f88:	4b34      	ldr	r3, [pc, #208]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f8a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f8c:	4b33      	ldr	r3, [pc, #204]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f8e:	691b      	ldr	r3, [r3, #16]
  400f90:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f94:	f040 80cd 	bne.w	401132 <ili9341_controller_init_registers+0x386>
		return 0;
  400f98:	2300      	movs	r3, #0
  400f9a:	2b00      	cmp	r3, #0
  400f9c:	d0f6      	beq.n	400f8c <ili9341_controller_init_registers+0x1e0>
  400f9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fa2:	4b2f      	ldr	r3, [pc, #188]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400fa4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
  400fa6:	20c7      	movs	r0, #199	; 0xc7
  400fa8:	4b2b      	ldr	r3, [pc, #172]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400faa:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fac:	4b2b      	ldr	r3, [pc, #172]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fae:	691b      	ldr	r3, [r3, #16]
  400fb0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fb4:	f040 80bf 	bne.w	401136 <ili9341_controller_init_registers+0x38a>
		return 0;
  400fb8:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400fba:	2b00      	cmp	r3, #0
  400fbc:	d0f6      	beq.n	400fac <ili9341_controller_init_registers+0x200>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400fbe:	2294      	movs	r2, #148	; 0x94
  400fc0:	4b26      	ldr	r3, [pc, #152]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fc2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fc4:	4b25      	ldr	r3, [pc, #148]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fc6:	691b      	ldr	r3, [r3, #16]
  400fc8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fcc:	f040 80b5 	bne.w	40113a <ili9341_controller_init_registers+0x38e>
		return 0;
  400fd0:	2300      	movs	r3, #0
  400fd2:	2b00      	cmp	r3, #0
  400fd4:	d0f6      	beq.n	400fc4 <ili9341_controller_init_registers+0x218>
  400fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fda:	4b21      	ldr	r3, [pc, #132]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400fdc:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
  400fde:	20e8      	movs	r0, #232	; 0xe8
  400fe0:	4b1d      	ldr	r3, [pc, #116]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400fe2:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fe4:	4b1d      	ldr	r3, [pc, #116]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fe6:	691b      	ldr	r3, [r3, #16]
  400fe8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fec:	f040 80a7 	bne.w	40113e <ili9341_controller_init_registers+0x392>
		return 0;
  400ff0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ff2:	2b00      	cmp	r3, #0
  400ff4:	d0f6      	beq.n	400fe4 <ili9341_controller_init_registers+0x238>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ff6:	2285      	movs	r2, #133	; 0x85
  400ff8:	4b18      	ldr	r3, [pc, #96]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400ffa:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ffc:	4b17      	ldr	r3, [pc, #92]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400ffe:	691b      	ldr	r3, [r3, #16]
  401000:	f413 7f00 	tst.w	r3, #512	; 0x200
  401004:	f040 809d 	bne.w	401142 <ili9341_controller_init_registers+0x396>
		return 0;
  401008:	2300      	movs	r3, #0
  40100a:	2b00      	cmp	r3, #0
  40100c:	d0f6      	beq.n	400ffc <ili9341_controller_init_registers+0x250>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40100e:	2201      	movs	r2, #1
  401010:	4b12      	ldr	r3, [pc, #72]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  401012:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401014:	4b11      	ldr	r3, [pc, #68]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  401016:	691b      	ldr	r3, [r3, #16]
  401018:	f413 7f00 	tst.w	r3, #512	; 0x200
  40101c:	f040 8093 	bne.w	401146 <ili9341_controller_init_registers+0x39a>
		return 0;
  401020:	2300      	movs	r3, #0
  401022:	2b00      	cmp	r3, #0
  401024:	d0f6      	beq.n	401014 <ili9341_controller_init_registers+0x268>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401026:	2278      	movs	r2, #120	; 0x78
  401028:	4b0c      	ldr	r3, [pc, #48]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  40102a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40102c:	4b0b      	ldr	r3, [pc, #44]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  40102e:	691b      	ldr	r3, [r3, #16]
  401030:	f413 7f00 	tst.w	r3, #512	; 0x200
  401034:	f040 8089 	bne.w	40114a <ili9341_controller_init_registers+0x39e>
		return 0;
  401038:	2300      	movs	r3, #0
  40103a:	2b00      	cmp	r3, #0
  40103c:	d0f6      	beq.n	40102c <ili9341_controller_init_registers+0x280>
  40103e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401042:	4b07      	ldr	r3, [pc, #28]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  401044:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
  401046:	20ea      	movs	r0, #234	; 0xea
  401048:	4b03      	ldr	r3, [pc, #12]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  40104a:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40104c:	4b03      	ldr	r3, [pc, #12]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  40104e:	691b      	ldr	r3, [r3, #16]
  401050:	f413 7f00 	tst.w	r3, #512	; 0x200
  401054:	e006      	b.n	401064 <ili9341_controller_init_registers+0x2b8>
  401056:	bf00      	nop
  401058:	004009dd 	.word	0x004009dd
  40105c:	40008000 	.word	0x40008000
  401060:	400e1400 	.word	0x400e1400
  401064:	d173      	bne.n	40114e <ili9341_controller_init_registers+0x3a2>
		return 0;
  401066:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401068:	2b00      	cmp	r3, #0
  40106a:	d0ef      	beq.n	40104c <ili9341_controller_init_registers+0x2a0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40106c:	2200      	movs	r2, #0
  40106e:	4b3d      	ldr	r3, [pc, #244]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  401070:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401072:	4b3c      	ldr	r3, [pc, #240]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  401074:	691b      	ldr	r3, [r3, #16]
  401076:	f413 7f00 	tst.w	r3, #512	; 0x200
  40107a:	d16a      	bne.n	401152 <ili9341_controller_init_registers+0x3a6>
		return 0;
  40107c:	2300      	movs	r3, #0
  40107e:	2b00      	cmp	r3, #0
  401080:	d0f7      	beq.n	401072 <ili9341_controller_init_registers+0x2c6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401082:	2200      	movs	r2, #0
  401084:	4b37      	ldr	r3, [pc, #220]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  401086:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401088:	4b36      	ldr	r3, [pc, #216]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  40108a:	691b      	ldr	r3, [r3, #16]
  40108c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401090:	d161      	bne.n	401156 <ili9341_controller_init_registers+0x3aa>
		return 0;
  401092:	2300      	movs	r3, #0
  401094:	2b00      	cmp	r3, #0
  401096:	d0f7      	beq.n	401088 <ili9341_controller_init_registers+0x2dc>
  401098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40109c:	4b32      	ldr	r3, [pc, #200]	; (401168 <ili9341_controller_init_registers+0x3bc>)
  40109e:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
  4010a0:	203a      	movs	r0, #58	; 0x3a
  4010a2:	4b32      	ldr	r3, [pc, #200]	; (40116c <ili9341_controller_init_registers+0x3c0>)
  4010a4:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010a6:	4b2f      	ldr	r3, [pc, #188]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  4010a8:	691b      	ldr	r3, [r3, #16]
  4010aa:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010ae:	d154      	bne.n	40115a <ili9341_controller_init_registers+0x3ae>
		return 0;
  4010b0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d0f7      	beq.n	4010a6 <ili9341_controller_init_registers+0x2fa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010b6:	2255      	movs	r2, #85	; 0x55
  4010b8:	4b2a      	ldr	r3, [pc, #168]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  4010ba:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010bc:	4b29      	ldr	r3, [pc, #164]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  4010be:	691b      	ldr	r3, [r3, #16]
  4010c0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010c4:	d14b      	bne.n	40115e <ili9341_controller_init_registers+0x3b2>
		return 0;
  4010c6:	2300      	movs	r3, #0
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d0f7      	beq.n	4010bc <ili9341_controller_init_registers+0x310>
  4010cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010d0:	4b25      	ldr	r3, [pc, #148]	; (401168 <ili9341_controller_init_registers+0x3bc>)
  4010d2:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
  4010d4:	2000      	movs	r0, #0
  4010d6:	4b26      	ldr	r3, [pc, #152]	; (401170 <ili9341_controller_init_registers+0x3c4>)
  4010d8:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
  4010da:	23f0      	movs	r3, #240	; 0xf0
  4010dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4010e0:	2100      	movs	r1, #0
  4010e2:	4608      	mov	r0, r1
  4010e4:	4c23      	ldr	r4, [pc, #140]	; (401174 <ili9341_controller_init_registers+0x3c8>)
  4010e6:	47a0      	blx	r4
  4010e8:	bd10      	pop	{r4, pc}
		return 1;
  4010ea:	2301      	movs	r3, #1
  4010ec:	e669      	b.n	400dc2 <ili9341_controller_init_registers+0x16>
  4010ee:	2301      	movs	r3, #1
  4010f0:	e673      	b.n	400dda <ili9341_controller_init_registers+0x2e>
  4010f2:	2301      	movs	r3, #1
  4010f4:	e67d      	b.n	400df2 <ili9341_controller_init_registers+0x46>
  4010f6:	2301      	movs	r3, #1
  4010f8:	e687      	b.n	400e0a <ili9341_controller_init_registers+0x5e>
  4010fa:	2301      	movs	r3, #1
  4010fc:	e691      	b.n	400e22 <ili9341_controller_init_registers+0x76>
  4010fe:	2301      	movs	r3, #1
  401100:	e69b      	b.n	400e3a <ili9341_controller_init_registers+0x8e>
  401102:	2301      	movs	r3, #1
  401104:	e6a9      	b.n	400e5a <ili9341_controller_init_registers+0xae>
  401106:	2301      	movs	r3, #1
  401108:	e6b3      	b.n	400e72 <ili9341_controller_init_registers+0xc6>
  40110a:	2301      	movs	r3, #1
  40110c:	e6bd      	b.n	400e8a <ili9341_controller_init_registers+0xde>
  40110e:	2301      	movs	r3, #1
  401110:	e6c7      	b.n	400ea2 <ili9341_controller_init_registers+0xf6>
  401112:	2301      	movs	r3, #1
  401114:	e6d5      	b.n	400ec2 <ili9341_controller_init_registers+0x116>
  401116:	2301      	movs	r3, #1
  401118:	e6df      	b.n	400eda <ili9341_controller_init_registers+0x12e>
  40111a:	2301      	movs	r3, #1
  40111c:	e6ed      	b.n	400efa <ili9341_controller_init_registers+0x14e>
  40111e:	2301      	movs	r3, #1
  401120:	e6f7      	b.n	400f12 <ili9341_controller_init_registers+0x166>
  401122:	2301      	movs	r3, #1
  401124:	e705      	b.n	400f32 <ili9341_controller_init_registers+0x186>
  401126:	2301      	movs	r3, #1
  401128:	e70f      	b.n	400f4a <ili9341_controller_init_registers+0x19e>
  40112a:	2301      	movs	r3, #1
  40112c:	e71d      	b.n	400f6a <ili9341_controller_init_registers+0x1be>
  40112e:	2301      	movs	r3, #1
  401130:	e727      	b.n	400f82 <ili9341_controller_init_registers+0x1d6>
  401132:	2301      	movs	r3, #1
  401134:	e731      	b.n	400f9a <ili9341_controller_init_registers+0x1ee>
  401136:	2301      	movs	r3, #1
  401138:	e73f      	b.n	400fba <ili9341_controller_init_registers+0x20e>
  40113a:	2301      	movs	r3, #1
  40113c:	e749      	b.n	400fd2 <ili9341_controller_init_registers+0x226>
  40113e:	2301      	movs	r3, #1
  401140:	e757      	b.n	400ff2 <ili9341_controller_init_registers+0x246>
  401142:	2301      	movs	r3, #1
  401144:	e761      	b.n	40100a <ili9341_controller_init_registers+0x25e>
  401146:	2301      	movs	r3, #1
  401148:	e76b      	b.n	401022 <ili9341_controller_init_registers+0x276>
  40114a:	2301      	movs	r3, #1
  40114c:	e775      	b.n	40103a <ili9341_controller_init_registers+0x28e>
  40114e:	2301      	movs	r3, #1
  401150:	e78a      	b.n	401068 <ili9341_controller_init_registers+0x2bc>
  401152:	2301      	movs	r3, #1
  401154:	e793      	b.n	40107e <ili9341_controller_init_registers+0x2d2>
  401156:	2301      	movs	r3, #1
  401158:	e79c      	b.n	401094 <ili9341_controller_init_registers+0x2e8>
  40115a:	2301      	movs	r3, #1
  40115c:	e7a9      	b.n	4010b2 <ili9341_controller_init_registers+0x306>
  40115e:	2301      	movs	r3, #1
  401160:	e7b2      	b.n	4010c8 <ili9341_controller_init_registers+0x31c>
  401162:	bf00      	nop
  401164:	40008000 	.word	0x40008000
  401168:	400e1400 	.word	0x400e1400
  40116c:	004009dd 	.word	0x004009dd
  401170:	00400d3d 	.word	0x00400d3d
  401174:	00400c95 	.word	0x00400c95

00401178 <ili9341_init>:
{
  401178:	b508      	push	{r3, lr}
	ili9341_interface_init();
  40117a:	4b04      	ldr	r3, [pc, #16]	; (40118c <ili9341_init+0x14>)
  40117c:	4798      	blx	r3
	ili9341_reset_display();
  40117e:	4b04      	ldr	r3, [pc, #16]	; (401190 <ili9341_init+0x18>)
  401180:	4798      	blx	r3
	ili9341_exit_standby();
  401182:	4b04      	ldr	r3, [pc, #16]	; (401194 <ili9341_init+0x1c>)
  401184:	4798      	blx	r3
	ili9341_controller_init_registers();
  401186:	4b04      	ldr	r3, [pc, #16]	; (401198 <ili9341_init+0x20>)
  401188:	4798      	blx	r3
  40118a:	bd08      	pop	{r3, pc}
  40118c:	00400b85 	.word	0x00400b85
  401190:	00400bf5 	.word	0x00400bf5
  401194:	00400c25 	.word	0x00400c25
  401198:	00400dad 	.word	0x00400dad

0040119c <afec_find_inst_num>:
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
#if defined(AFEC1)
	if (afec == AFEC1) {
  40119c:	4b03      	ldr	r3, [pc, #12]	; (4011ac <afec_find_inst_num+0x10>)
  40119e:	4298      	cmp	r0, r3
  4011a0:	d001      	beq.n	4011a6 <afec_find_inst_num+0xa>
		return 1;
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
		return 0;
  4011a2:	2000      	movs	r0, #0
	}
#endif
	return 0;
}
  4011a4:	4770      	bx	lr
		return 1;
  4011a6:	2001      	movs	r0, #1
  4011a8:	4770      	bx	lr
  4011aa:	bf00      	nop
  4011ac:	40064000 	.word	0x40064000

004011b0 <afec_find_pid>:
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  4011b0:	4b03      	ldr	r3, [pc, #12]	; (4011c0 <afec_find_pid+0x10>)
  4011b2:	4298      	cmp	r0, r3
  4011b4:	d001      	beq.n	4011ba <afec_find_pid+0xa>
		return ID_AFEC1;
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
		return ID_AFEC0;
  4011b6:	201d      	movs	r0, #29
	}
#endif
	return ID_AFEC0;
}
  4011b8:	4770      	bx	lr
		return ID_AFEC1;
  4011ba:	2028      	movs	r0, #40	; 0x28
  4011bc:	4770      	bx	lr
  4011be:	bf00      	nop
  4011c0:	40064000 	.word	0x40064000

004011c4 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  4011c4:	b410      	push	{r4}
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4011c6:	7ccb      	ldrb	r3, [r1, #19]
  4011c8:	b373      	cbz	r3, 401228 <afec_set_config+0x64>
  4011ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4011ce:	684a      	ldr	r2, [r1, #4]
  4011d0:	688c      	ldr	r4, [r1, #8]
  4011d2:	fbb2 f2f4 	udiv	r2, r2, r4
  4011d6:	3a01      	subs	r2, #1
  4011d8:	0212      	lsls	r2, r2, #8
  4011da:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4011dc:	4313      	orrs	r3, r2
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4011de:	7c0a      	ldrb	r2, [r1, #16]
  4011e0:	0612      	lsls	r2, r2, #24
  4011e2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
			AFEC_MR_ONE |
  4011e6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4011e8:	7c4a      	ldrb	r2, [r1, #17]
  4011ea:	0712      	lsls	r2, r2, #28
  4011ec:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
			AFEC_MR_TRACKTIM(config->tracktim) |
  4011f0:	4313      	orrs	r3, r2
			(config->startup_time);
  4011f2:	68ca      	ldr	r2, [r1, #12]
			AFEC_MR_TRANSFER(config->transfer) |
  4011f4:	4313      	orrs	r3, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4011f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000

	afec->AFEC_MR = reg;
  4011fa:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4011fc:	7d0b      	ldrb	r3, [r1, #20]
  4011fe:	b1ab      	cbz	r3, 40122c <afec_set_config+0x68>
  401200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
			(config->resolution) |
  401204:	680a      	ldr	r2, [r1, #0]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401206:	431a      	orrs	r2, r3
			(config->stm ? AFEC_EMR_STM : 0);
  401208:	7d4b      	ldrb	r3, [r1, #21]
  40120a:	b98b      	cbnz	r3, 401230 <afec_set_config+0x6c>
  40120c:	2300      	movs	r3, #0
			(config->resolution) |
  40120e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401210:	6083      	str	r3, [r0, #8]
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  401212:	7d8b      	ldrb	r3, [r1, #22]
  401214:	021b      	lsls	r3, r3, #8
  401216:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40121a:	f043 030c 	orr.w	r3, r3, #12
  40121e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  401222:	f85d 4b04 	ldr.w	r4, [sp], #4
  401226:	4770      	bx	lr
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  401228:	2300      	movs	r3, #0
  40122a:	e7d0      	b.n	4011ce <afec_set_config+0xa>
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40122c:	2300      	movs	r3, #0
  40122e:	e7e9      	b.n	401204 <afec_set_config+0x40>
			(config->stm ? AFEC_EMR_STM : 0);
  401230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  401234:	e7eb      	b.n	40120e <afec_set_config+0x4a>
	...

00401238 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  401238:	b508      	push	{r3, lr}
	if (afec_callback_pointer[inst_num][source]) {
  40123a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
  40123e:	4b03      	ldr	r3, [pc, #12]	; (40124c <afec_interrupt+0x14>)
  401240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  401244:	b103      	cbz	r3, 401248 <afec_interrupt+0x10>
		afec_callback_pointer[inst_num][source]();
  401246:	4798      	blx	r3
  401248:	bd08      	pop	{r3, pc}
  40124a:	bf00      	nop
  40124c:	2043a0a8 	.word	0x2043a0a8

00401250 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  401250:	b530      	push	{r4, r5, lr}
  401252:	b083      	sub	sp, #12
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  401254:	6b01      	ldr	r1, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  401256:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  401258:	400b      	ands	r3, r1
  40125a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);
  40125c:	4b17      	ldr	r3, [pc, #92]	; (4012bc <afec_process_callback+0x6c>)
  40125e:	4798      	blx	r3
  401260:	4605      	mov	r5, r0

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401262:	2400      	movs	r4, #0
  401264:	e009      	b.n	40127a <afec_process_callback+0x2a>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  401266:	2c0e      	cmp	r4, #14
  401268:	d81a      	bhi.n	4012a0 <afec_process_callback+0x50>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40126a:	f104 020c 	add.w	r2, r4, #12
  40126e:	2301      	movs	r3, #1
  401270:	4093      	lsls	r3, r2
  401272:	9a01      	ldr	r2, [sp, #4]
  401274:	4213      	tst	r3, r2
  401276:	d10e      	bne.n	401296 <afec_process_callback+0x46>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401278:	3401      	adds	r4, #1
  40127a:	2c0f      	cmp	r4, #15
  40127c:	d81c      	bhi.n	4012b8 <afec_process_callback+0x68>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40127e:	2c0b      	cmp	r4, #11
  401280:	d8f1      	bhi.n	401266 <afec_process_callback+0x16>
			if (status & (1 << cnt)) {
  401282:	2301      	movs	r3, #1
  401284:	40a3      	lsls	r3, r4
  401286:	9a01      	ldr	r2, [sp, #4]
  401288:	4213      	tst	r3, r2
  40128a:	d0f5      	beq.n	401278 <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40128c:	4621      	mov	r1, r4
  40128e:	b2e8      	uxtb	r0, r5
  401290:	4b0b      	ldr	r3, [pc, #44]	; (4012c0 <afec_process_callback+0x70>)
  401292:	4798      	blx	r3
  401294:	e7f0      	b.n	401278 <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  401296:	4621      	mov	r1, r4
  401298:	b2e8      	uxtb	r0, r5
  40129a:	4b09      	ldr	r3, [pc, #36]	; (4012c0 <afec_process_callback+0x70>)
  40129c:	4798      	blx	r3
  40129e:	e7eb      	b.n	401278 <afec_process_callback+0x28>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4012a0:	f104 020f 	add.w	r2, r4, #15
  4012a4:	2301      	movs	r3, #1
  4012a6:	4093      	lsls	r3, r2
  4012a8:	9a01      	ldr	r2, [sp, #4]
  4012aa:	4213      	tst	r3, r2
  4012ac:	d0e4      	beq.n	401278 <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4012ae:	4621      	mov	r1, r4
  4012b0:	b2e8      	uxtb	r0, r5
  4012b2:	4b03      	ldr	r3, [pc, #12]	; (4012c0 <afec_process_callback+0x70>)
  4012b4:	4798      	blx	r3
  4012b6:	e7df      	b.n	401278 <afec_process_callback+0x28>
			}
		}
	}
}
  4012b8:	b003      	add	sp, #12
  4012ba:	bd30      	pop	{r4, r5, pc}
  4012bc:	0040119d 	.word	0x0040119d
  4012c0:	00401239 	.word	0x00401239

004012c4 <afec_ch_set_config>:
{
  4012c4:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4012c6:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4012c8:	2301      	movs	r3, #1
  4012ca:	408b      	lsls	r3, r1
  4012cc:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4012d0:	7815      	ldrb	r5, [r2, #0]
  4012d2:	b175      	cbz	r5, 4012f2 <afec_ch_set_config+0x2e>
  4012d4:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4012d6:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4012d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4012da:	004c      	lsls	r4, r1, #1
  4012dc:	2103      	movs	r1, #3
  4012de:	40a1      	lsls	r1, r4
  4012e0:	ea23 0101 	bic.w	r1, r3, r1
	reg |= (config->gain) << (2 * channel);
  4012e4:	7853      	ldrb	r3, [r2, #1]
  4012e6:	fa03 f404 	lsl.w	r4, r3, r4
  4012ea:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4012ec:	6541      	str	r1, [r0, #84]	; 0x54
}
  4012ee:	bc30      	pop	{r4, r5}
  4012f0:	4770      	bx	lr
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4012f2:	2300      	movs	r3, #0
  4012f4:	e7ee      	b.n	4012d4 <afec_ch_set_config+0x10>
	...

004012f8 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4012f8:	2200      	movs	r2, #0
  4012fa:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4012fc:	4b08      	ldr	r3, [pc, #32]	; (401320 <afec_get_config_defaults+0x28>)
  4012fe:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  401300:	4b08      	ldr	r3, [pc, #32]	; (401324 <afec_get_config_defaults+0x2c>)
  401302:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  401304:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  401308:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40130a:	2302      	movs	r3, #2
  40130c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40130e:	2301      	movs	r3, #1
  401310:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  401312:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  401314:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  401316:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  401318:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40131a:	7583      	strb	r3, [r0, #22]
  40131c:	4770      	bx	lr
  40131e:	bf00      	nop
  401320:	11e1a300 	.word	0x11e1a300
  401324:	005b8d80 	.word	0x005b8d80

00401328 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  401328:	2300      	movs	r3, #0
  40132a:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  40132c:	2301      	movs	r3, #1
  40132e:	7043      	strb	r3, [r0, #1]
  401330:	4770      	bx	lr
	...

00401334 <afec_init>:
	return afec->AFEC_ISR;
  401334:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  401336:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40133a:	d001      	beq.n	401340 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40133c:	2019      	movs	r0, #25
  40133e:	4770      	bx	lr
{
  401340:	b510      	push	{r4, lr}
  401342:	4604      	mov	r4, r0
	afec->AFEC_CR = AFEC_CR_SWRST;
  401344:	2301      	movs	r3, #1
  401346:	6003      	str	r3, [r0, #0]
	afec_set_config(afec, config);
  401348:	4b10      	ldr	r3, [pc, #64]	; (40138c <afec_init+0x58>)
  40134a:	4798      	blx	r3
	if(afec == AFEC0) {
  40134c:	4b10      	ldr	r3, [pc, #64]	; (401390 <afec_init+0x5c>)
  40134e:	429c      	cmp	r4, r3
  401350:	d00c      	beq.n	40136c <afec_init+0x38>
	if(afec == AFEC1) {
  401352:	4b10      	ldr	r3, [pc, #64]	; (401394 <afec_init+0x60>)
  401354:	429c      	cmp	r4, r3
  401356:	d00b      	beq.n	401370 <afec_init+0x3c>
	return STATUS_OK;
  401358:	2000      	movs	r0, #0
  40135a:	bd10      	pop	{r4, pc}
			afec_callback_pointer[0][i] = 0;
  40135c:	2100      	movs	r1, #0
  40135e:	4a0e      	ldr	r2, [pc, #56]	; (401398 <afec_init+0x64>)
  401360:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401364:	3301      	adds	r3, #1
  401366:	2b0f      	cmp	r3, #15
  401368:	d9f8      	bls.n	40135c <afec_init+0x28>
  40136a:	e7f2      	b.n	401352 <afec_init+0x1e>
  40136c:	2300      	movs	r3, #0
  40136e:	e7fa      	b.n	401366 <afec_init+0x32>
  401370:	2300      	movs	r3, #0
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401372:	2b0f      	cmp	r3, #15
  401374:	d807      	bhi.n	401386 <afec_init+0x52>
			afec_callback_pointer[1][i] = 0;
  401376:	f103 0110 	add.w	r1, r3, #16
  40137a:	2000      	movs	r0, #0
  40137c:	4a06      	ldr	r2, [pc, #24]	; (401398 <afec_init+0x64>)
  40137e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401382:	3301      	adds	r3, #1
  401384:	e7f5      	b.n	401372 <afec_init+0x3e>
	return STATUS_OK;
  401386:	2000      	movs	r0, #0
  401388:	bd10      	pop	{r4, pc}
  40138a:	bf00      	nop
  40138c:	004011c5 	.word	0x004011c5
  401390:	4003c000 	.word	0x4003c000
  401394:	40064000 	.word	0x40064000
  401398:	2043a0a8 	.word	0x2043a0a8

0040139c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40139c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40139e:	4802      	ldr	r0, [pc, #8]	; (4013a8 <AFEC0_Handler+0xc>)
  4013a0:	4b02      	ldr	r3, [pc, #8]	; (4013ac <AFEC0_Handler+0x10>)
  4013a2:	4798      	blx	r3
  4013a4:	bd08      	pop	{r3, pc}
  4013a6:	bf00      	nop
  4013a8:	4003c000 	.word	0x4003c000
  4013ac:	00401251 	.word	0x00401251

004013b0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4013b0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4013b2:	4802      	ldr	r0, [pc, #8]	; (4013bc <AFEC1_Handler+0xc>)
  4013b4:	4b02      	ldr	r3, [pc, #8]	; (4013c0 <AFEC1_Handler+0x10>)
  4013b6:	4798      	blx	r3
  4013b8:	bd08      	pop	{r3, pc}
  4013ba:	bf00      	nop
  4013bc:	40064000 	.word	0x40064000
  4013c0:	00401251 	.word	0x00401251

004013c4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4013c4:	b500      	push	{lr}
  4013c6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  4013c8:	4b11      	ldr	r3, [pc, #68]	; (401410 <afec_enable+0x4c>)
  4013ca:	4798      	blx	r3
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4013cc:	4b11      	ldr	r3, [pc, #68]	; (401414 <afec_enable+0x50>)
  4013ce:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4013d0:	4b11      	ldr	r3, [pc, #68]	; (401418 <afec_enable+0x54>)
  4013d2:	789b      	ldrb	r3, [r3, #2]
  4013d4:	2bff      	cmp	r3, #255	; 0xff
  4013d6:	d01a      	beq.n	40140e <afec_enable+0x4a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4013d8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4013dc:	fab3 f383 	clz	r3, r3
  4013e0:	095b      	lsrs	r3, r3, #5
  4013e2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4013e4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4013e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4013ea:	2200      	movs	r2, #0
  4013ec:	4b0b      	ldr	r3, [pc, #44]	; (40141c <afec_enable+0x58>)
  4013ee:	701a      	strb	r2, [r3, #0]
	return flags;
  4013f0:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4013f2:	4a09      	ldr	r2, [pc, #36]	; (401418 <afec_enable+0x54>)
  4013f4:	7893      	ldrb	r3, [r2, #2]
  4013f6:	3301      	adds	r3, #1
  4013f8:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4013fa:	b129      	cbz	r1, 401408 <afec_enable+0x44>
		cpu_irq_enable();
  4013fc:	2201      	movs	r2, #1
  4013fe:	4b07      	ldr	r3, [pc, #28]	; (40141c <afec_enable+0x58>)
  401400:	701a      	strb	r2, [r3, #0]
  401402:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401406:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  401408:	b003      	add	sp, #12
  40140a:	f85d fb04 	ldr.w	pc, [sp], #4
  40140e:	e7fe      	b.n	40140e <afec_enable+0x4a>
  401410:	004011b1 	.word	0x004011b1
  401414:	0041cabd 	.word	0x0041cabd
  401418:	2043a0a0 	.word	0x2043a0a0
  40141c:	20400058 	.word	0x20400058

00401420 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401420:	f100 0308 	add.w	r3, r0, #8
  401424:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401426:	f04f 32ff 	mov.w	r2, #4294967295
  40142a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40142c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40142e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401430:	2300      	movs	r3, #0
  401432:	6003      	str	r3, [r0, #0]
  401434:	4770      	bx	lr

00401436 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401436:	2300      	movs	r3, #0
  401438:	6103      	str	r3, [r0, #16]
  40143a:	4770      	bx	lr

0040143c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40143c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40143e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401440:	689a      	ldr	r2, [r3, #8]
  401442:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401444:	689a      	ldr	r2, [r3, #8]
  401446:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401448:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40144a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40144c:	6803      	ldr	r3, [r0, #0]
  40144e:	3301      	adds	r3, #1
  401450:	6003      	str	r3, [r0, #0]
  401452:	4770      	bx	lr

00401454 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401454:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401456:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401458:	f1b5 3fff 	cmp.w	r5, #4294967295
  40145c:	d002      	beq.n	401464 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40145e:	f100 0208 	add.w	r2, r0, #8
  401462:	e002      	b.n	40146a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401464:	6902      	ldr	r2, [r0, #16]
  401466:	e004      	b.n	401472 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401468:	461a      	mov	r2, r3
  40146a:	6853      	ldr	r3, [r2, #4]
  40146c:	681c      	ldr	r4, [r3, #0]
  40146e:	42a5      	cmp	r5, r4
  401470:	d2fa      	bcs.n	401468 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401472:	6853      	ldr	r3, [r2, #4]
  401474:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401476:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401478:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40147a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40147c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40147e:	6803      	ldr	r3, [r0, #0]
  401480:	3301      	adds	r3, #1
  401482:	6003      	str	r3, [r0, #0]
}
  401484:	bc30      	pop	{r4, r5}
  401486:	4770      	bx	lr

00401488 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401488:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40148a:	6842      	ldr	r2, [r0, #4]
  40148c:	6881      	ldr	r1, [r0, #8]
  40148e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401490:	6882      	ldr	r2, [r0, #8]
  401492:	6841      	ldr	r1, [r0, #4]
  401494:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401496:	685a      	ldr	r2, [r3, #4]
  401498:	4290      	cmp	r0, r2
  40149a:	d005      	beq.n	4014a8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  40149c:	2200      	movs	r2, #0
  40149e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4014a0:	6818      	ldr	r0, [r3, #0]
  4014a2:	3801      	subs	r0, #1
  4014a4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4014a6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4014a8:	6882      	ldr	r2, [r0, #8]
  4014aa:	605a      	str	r2, [r3, #4]
  4014ac:	e7f6      	b.n	40149c <uxListRemove+0x14>
	...

004014b0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4014b0:	4b0d      	ldr	r3, [pc, #52]	; (4014e8 <prvTaskExitError+0x38>)
  4014b2:	681b      	ldr	r3, [r3, #0]
  4014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014b8:	d00a      	beq.n	4014d0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4014ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014be:	b672      	cpsid	i
  4014c0:	f383 8811 	msr	BASEPRI, r3
  4014c4:	f3bf 8f6f 	isb	sy
  4014c8:	f3bf 8f4f 	dsb	sy
  4014cc:	b662      	cpsie	i
  4014ce:	e7fe      	b.n	4014ce <prvTaskExitError+0x1e>
  4014d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d4:	b672      	cpsid	i
  4014d6:	f383 8811 	msr	BASEPRI, r3
  4014da:	f3bf 8f6f 	isb	sy
  4014de:	f3bf 8f4f 	dsb	sy
  4014e2:	b662      	cpsie	i
  4014e4:	e7fe      	b.n	4014e4 <prvTaskExitError+0x34>
  4014e6:	bf00      	nop
  4014e8:	2040000c 	.word	0x2040000c

004014ec <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4014ec:	4806      	ldr	r0, [pc, #24]	; (401508 <prvPortStartFirstTask+0x1c>)
  4014ee:	6800      	ldr	r0, [r0, #0]
  4014f0:	6800      	ldr	r0, [r0, #0]
  4014f2:	f380 8808 	msr	MSP, r0
  4014f6:	b662      	cpsie	i
  4014f8:	b661      	cpsie	f
  4014fa:	f3bf 8f4f 	dsb	sy
  4014fe:	f3bf 8f6f 	isb	sy
  401502:	df00      	svc	0
  401504:	bf00      	nop
  401506:	0000      	.short	0x0000
  401508:	e000ed08 	.word	0xe000ed08

0040150c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40150c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40151c <vPortEnableVFP+0x10>
  401510:	6801      	ldr	r1, [r0, #0]
  401512:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401516:	6001      	str	r1, [r0, #0]
  401518:	4770      	bx	lr
  40151a:	0000      	.short	0x0000
  40151c:	e000ed88 	.word	0xe000ed88

00401520 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401524:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401528:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40152c:	4b05      	ldr	r3, [pc, #20]	; (401544 <pxPortInitialiseStack+0x24>)
  40152e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401532:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401536:	f06f 0302 	mvn.w	r3, #2
  40153a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40153e:	3844      	subs	r0, #68	; 0x44
  401540:	4770      	bx	lr
  401542:	bf00      	nop
  401544:	004014b1 	.word	0x004014b1

00401548 <SVC_Handler>:
	__asm volatile (
  401548:	4b06      	ldr	r3, [pc, #24]	; (401564 <pxCurrentTCBConst2>)
  40154a:	6819      	ldr	r1, [r3, #0]
  40154c:	6808      	ldr	r0, [r1, #0]
  40154e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401552:	f380 8809 	msr	PSP, r0
  401556:	f3bf 8f6f 	isb	sy
  40155a:	f04f 0000 	mov.w	r0, #0
  40155e:	f380 8811 	msr	BASEPRI, r0
  401562:	4770      	bx	lr

00401564 <pxCurrentTCBConst2>:
  401564:	2040c244 	.word	0x2040c244
  401568:	4770      	bx	lr
  40156a:	bf00      	nop

0040156c <vPortEnterCritical>:
  40156c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401570:	b672      	cpsid	i
  401572:	f383 8811 	msr	BASEPRI, r3
  401576:	f3bf 8f6f 	isb	sy
  40157a:	f3bf 8f4f 	dsb	sy
  40157e:	b662      	cpsie	i
	uxCriticalNesting++;
  401580:	4a0b      	ldr	r2, [pc, #44]	; (4015b0 <vPortEnterCritical+0x44>)
  401582:	6813      	ldr	r3, [r2, #0]
  401584:	3301      	adds	r3, #1
  401586:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401588:	2b01      	cmp	r3, #1
  40158a:	d10f      	bne.n	4015ac <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40158c:	4b09      	ldr	r3, [pc, #36]	; (4015b4 <vPortEnterCritical+0x48>)
  40158e:	681b      	ldr	r3, [r3, #0]
  401590:	f013 0fff 	tst.w	r3, #255	; 0xff
  401594:	d00a      	beq.n	4015ac <vPortEnterCritical+0x40>
  401596:	f04f 0380 	mov.w	r3, #128	; 0x80
  40159a:	b672      	cpsid	i
  40159c:	f383 8811 	msr	BASEPRI, r3
  4015a0:	f3bf 8f6f 	isb	sy
  4015a4:	f3bf 8f4f 	dsb	sy
  4015a8:	b662      	cpsie	i
  4015aa:	e7fe      	b.n	4015aa <vPortEnterCritical+0x3e>
  4015ac:	4770      	bx	lr
  4015ae:	bf00      	nop
  4015b0:	2040000c 	.word	0x2040000c
  4015b4:	e000ed04 	.word	0xe000ed04

004015b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4015b8:	4b0a      	ldr	r3, [pc, #40]	; (4015e4 <vPortExitCritical+0x2c>)
  4015ba:	681b      	ldr	r3, [r3, #0]
  4015bc:	b953      	cbnz	r3, 4015d4 <vPortExitCritical+0x1c>
  4015be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015c2:	b672      	cpsid	i
  4015c4:	f383 8811 	msr	BASEPRI, r3
  4015c8:	f3bf 8f6f 	isb	sy
  4015cc:	f3bf 8f4f 	dsb	sy
  4015d0:	b662      	cpsie	i
  4015d2:	e7fe      	b.n	4015d2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4015d4:	3b01      	subs	r3, #1
  4015d6:	4a03      	ldr	r2, [pc, #12]	; (4015e4 <vPortExitCritical+0x2c>)
  4015d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4015da:	b90b      	cbnz	r3, 4015e0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4015dc:	f383 8811 	msr	BASEPRI, r3
  4015e0:	4770      	bx	lr
  4015e2:	bf00      	nop
  4015e4:	2040000c 	.word	0x2040000c

004015e8 <PendSV_Handler>:
	__asm volatile
  4015e8:	f3ef 8009 	mrs	r0, PSP
  4015ec:	f3bf 8f6f 	isb	sy
  4015f0:	4b15      	ldr	r3, [pc, #84]	; (401648 <pxCurrentTCBConst>)
  4015f2:	681a      	ldr	r2, [r3, #0]
  4015f4:	f01e 0f10 	tst.w	lr, #16
  4015f8:	bf08      	it	eq
  4015fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4015fe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401602:	6010      	str	r0, [r2, #0]
  401604:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401608:	f04f 0080 	mov.w	r0, #128	; 0x80
  40160c:	b672      	cpsid	i
  40160e:	f380 8811 	msr	BASEPRI, r0
  401612:	f3bf 8f4f 	dsb	sy
  401616:	f3bf 8f6f 	isb	sy
  40161a:	b662      	cpsie	i
  40161c:	f001 f8e6 	bl	4027ec <vTaskSwitchContext>
  401620:	f04f 0000 	mov.w	r0, #0
  401624:	f380 8811 	msr	BASEPRI, r0
  401628:	bc08      	pop	{r3}
  40162a:	6819      	ldr	r1, [r3, #0]
  40162c:	6808      	ldr	r0, [r1, #0]
  40162e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401632:	f01e 0f10 	tst.w	lr, #16
  401636:	bf08      	it	eq
  401638:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40163c:	f380 8809 	msr	PSP, r0
  401640:	f3bf 8f6f 	isb	sy
  401644:	4770      	bx	lr
  401646:	bf00      	nop

00401648 <pxCurrentTCBConst>:
  401648:	2040c244 	.word	0x2040c244
  40164c:	4770      	bx	lr
  40164e:	bf00      	nop

00401650 <SysTick_Handler>:
{
  401650:	b508      	push	{r3, lr}
	__asm volatile
  401652:	f3ef 8311 	mrs	r3, BASEPRI
  401656:	f04f 0280 	mov.w	r2, #128	; 0x80
  40165a:	b672      	cpsid	i
  40165c:	f382 8811 	msr	BASEPRI, r2
  401660:	f3bf 8f6f 	isb	sy
  401664:	f3bf 8f4f 	dsb	sy
  401668:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40166a:	4b05      	ldr	r3, [pc, #20]	; (401680 <SysTick_Handler+0x30>)
  40166c:	4798      	blx	r3
  40166e:	b118      	cbz	r0, 401678 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401674:	4b03      	ldr	r3, [pc, #12]	; (401684 <SysTick_Handler+0x34>)
  401676:	601a      	str	r2, [r3, #0]
	__asm volatile
  401678:	2300      	movs	r3, #0
  40167a:	f383 8811 	msr	BASEPRI, r3
  40167e:	bd08      	pop	{r3, pc}
  401680:	00402461 	.word	0x00402461
  401684:	e000ed04 	.word	0xe000ed04

00401688 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401688:	4a03      	ldr	r2, [pc, #12]	; (401698 <vPortSetupTimerInterrupt+0x10>)
  40168a:	4b04      	ldr	r3, [pc, #16]	; (40169c <vPortSetupTimerInterrupt+0x14>)
  40168c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40168e:	2207      	movs	r2, #7
  401690:	3b04      	subs	r3, #4
  401692:	601a      	str	r2, [r3, #0]
  401694:	4770      	bx	lr
  401696:	bf00      	nop
  401698:	0003a97f 	.word	0x0003a97f
  40169c:	e000e014 	.word	0xe000e014

004016a0 <xPortStartScheduler>:
{
  4016a0:	b500      	push	{lr}
  4016a2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4016a4:	4b22      	ldr	r3, [pc, #136]	; (401730 <xPortStartScheduler+0x90>)
  4016a6:	781a      	ldrb	r2, [r3, #0]
  4016a8:	b2d2      	uxtb	r2, r2
  4016aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4016ac:	22ff      	movs	r2, #255	; 0xff
  4016ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4016b0:	781b      	ldrb	r3, [r3, #0]
  4016b2:	b2db      	uxtb	r3, r3
  4016b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4016b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016c0:	4a1c      	ldr	r2, [pc, #112]	; (401734 <xPortStartScheduler+0x94>)
  4016c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4016c4:	2207      	movs	r2, #7
  4016c6:	4b1c      	ldr	r3, [pc, #112]	; (401738 <xPortStartScheduler+0x98>)
  4016c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016ca:	e009      	b.n	4016e0 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
  4016cc:	4a1a      	ldr	r2, [pc, #104]	; (401738 <xPortStartScheduler+0x98>)
  4016ce:	6813      	ldr	r3, [r2, #0]
  4016d0:	3b01      	subs	r3, #1
  4016d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4016d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016d8:	005b      	lsls	r3, r3, #1
  4016da:	b2db      	uxtb	r3, r3
  4016dc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016e4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016e8:	d1f0      	bne.n	4016cc <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4016ea:	4a13      	ldr	r2, [pc, #76]	; (401738 <xPortStartScheduler+0x98>)
  4016ec:	6813      	ldr	r3, [r2, #0]
  4016ee:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4016f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4016f4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4016f6:	9b01      	ldr	r3, [sp, #4]
  4016f8:	b2db      	uxtb	r3, r3
  4016fa:	4a0d      	ldr	r2, [pc, #52]	; (401730 <xPortStartScheduler+0x90>)
  4016fc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4016fe:	4b0f      	ldr	r3, [pc, #60]	; (40173c <xPortStartScheduler+0x9c>)
  401700:	681a      	ldr	r2, [r3, #0]
  401702:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401706:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401708:	681a      	ldr	r2, [r3, #0]
  40170a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40170e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401710:	4b0b      	ldr	r3, [pc, #44]	; (401740 <xPortStartScheduler+0xa0>)
  401712:	4798      	blx	r3
	uxCriticalNesting = 0;
  401714:	2200      	movs	r2, #0
  401716:	4b0b      	ldr	r3, [pc, #44]	; (401744 <xPortStartScheduler+0xa4>)
  401718:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40171a:	4b0b      	ldr	r3, [pc, #44]	; (401748 <xPortStartScheduler+0xa8>)
  40171c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40171e:	4a0b      	ldr	r2, [pc, #44]	; (40174c <xPortStartScheduler+0xac>)
  401720:	6813      	ldr	r3, [r2, #0]
  401722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401726:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401728:	4b09      	ldr	r3, [pc, #36]	; (401750 <xPortStartScheduler+0xb0>)
  40172a:	4798      	blx	r3
	prvTaskExitError();
  40172c:	4b09      	ldr	r3, [pc, #36]	; (401754 <xPortStartScheduler+0xb4>)
  40172e:	4798      	blx	r3
  401730:	e000e400 	.word	0xe000e400
  401734:	20400a34 	.word	0x20400a34
  401738:	20400a38 	.word	0x20400a38
  40173c:	e000ed20 	.word	0xe000ed20
  401740:	00401689 	.word	0x00401689
  401744:	2040000c 	.word	0x2040000c
  401748:	0040150d 	.word	0x0040150d
  40174c:	e000ef34 	.word	0xe000ef34
  401750:	004014ed 	.word	0x004014ed
  401754:	004014b1 	.word	0x004014b1

00401758 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401758:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40175c:	2b0f      	cmp	r3, #15
  40175e:	d911      	bls.n	401784 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401760:	4a12      	ldr	r2, [pc, #72]	; (4017ac <vPortValidateInterruptPriority+0x54>)
  401762:	5c9b      	ldrb	r3, [r3, r2]
  401764:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401766:	4a12      	ldr	r2, [pc, #72]	; (4017b0 <vPortValidateInterruptPriority+0x58>)
  401768:	7812      	ldrb	r2, [r2, #0]
  40176a:	4293      	cmp	r3, r2
  40176c:	d20a      	bcs.n	401784 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40176e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401772:	b672      	cpsid	i
  401774:	f383 8811 	msr	BASEPRI, r3
  401778:	f3bf 8f6f 	isb	sy
  40177c:	f3bf 8f4f 	dsb	sy
  401780:	b662      	cpsie	i
  401782:	e7fe      	b.n	401782 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401784:	4b0b      	ldr	r3, [pc, #44]	; (4017b4 <vPortValidateInterruptPriority+0x5c>)
  401786:	681b      	ldr	r3, [r3, #0]
  401788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40178c:	4a0a      	ldr	r2, [pc, #40]	; (4017b8 <vPortValidateInterruptPriority+0x60>)
  40178e:	6812      	ldr	r2, [r2, #0]
  401790:	4293      	cmp	r3, r2
  401792:	d90a      	bls.n	4017aa <vPortValidateInterruptPriority+0x52>
  401794:	f04f 0380 	mov.w	r3, #128	; 0x80
  401798:	b672      	cpsid	i
  40179a:	f383 8811 	msr	BASEPRI, r3
  40179e:	f3bf 8f6f 	isb	sy
  4017a2:	f3bf 8f4f 	dsb	sy
  4017a6:	b662      	cpsie	i
  4017a8:	e7fe      	b.n	4017a8 <vPortValidateInterruptPriority+0x50>
  4017aa:	4770      	bx	lr
  4017ac:	e000e3f0 	.word	0xe000e3f0
  4017b0:	20400a34 	.word	0x20400a34
  4017b4:	e000ed0c 	.word	0xe000ed0c
  4017b8:	20400a38 	.word	0x20400a38

004017bc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4017bc:	b538      	push	{r3, r4, r5, lr}
  4017be:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4017c0:	f010 0f07 	tst.w	r0, #7
  4017c4:	d002      	beq.n	4017cc <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4017c6:	f020 0407 	bic.w	r4, r0, #7
  4017ca:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4017cc:	4b12      	ldr	r3, [pc, #72]	; (401818 <pvPortMalloc+0x5c>)
  4017ce:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4017d0:	4b12      	ldr	r3, [pc, #72]	; (40181c <pvPortMalloc+0x60>)
  4017d2:	681b      	ldr	r3, [r3, #0]
  4017d4:	b193      	cbz	r3, 4017fc <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4017d6:	4b12      	ldr	r3, [pc, #72]	; (401820 <pvPortMalloc+0x64>)
  4017d8:	681b      	ldr	r3, [r3, #0]
  4017da:	441c      	add	r4, r3
  4017dc:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4017e0:	4294      	cmp	r4, r2
  4017e2:	d811      	bhi.n	401808 <pvPortMalloc+0x4c>
  4017e4:	42a3      	cmp	r3, r4
  4017e6:	d211      	bcs.n	40180c <pvPortMalloc+0x50>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4017e8:	4a0c      	ldr	r2, [pc, #48]	; (40181c <pvPortMalloc+0x60>)
  4017ea:	6815      	ldr	r5, [r2, #0]
  4017ec:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4017ee:	4b0c      	ldr	r3, [pc, #48]	; (401820 <pvPortMalloc+0x64>)
  4017f0:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4017f2:	4b0c      	ldr	r3, [pc, #48]	; (401824 <pvPortMalloc+0x68>)
  4017f4:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4017f6:	b15d      	cbz	r5, 401810 <pvPortMalloc+0x54>
		}
	}
	#endif

	return pvReturn;
}
  4017f8:	4628      	mov	r0, r5
  4017fa:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4017fc:	4b0a      	ldr	r3, [pc, #40]	; (401828 <pvPortMalloc+0x6c>)
  4017fe:	f023 0307 	bic.w	r3, r3, #7
  401802:	4a06      	ldr	r2, [pc, #24]	; (40181c <pvPortMalloc+0x60>)
  401804:	6013      	str	r3, [r2, #0]
  401806:	e7e6      	b.n	4017d6 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
  401808:	2500      	movs	r5, #0
  40180a:	e7f2      	b.n	4017f2 <pvPortMalloc+0x36>
  40180c:	2500      	movs	r5, #0
  40180e:	e7f0      	b.n	4017f2 <pvPortMalloc+0x36>
			vApplicationMallocFailedHook();
  401810:	4b06      	ldr	r3, [pc, #24]	; (40182c <pvPortMalloc+0x70>)
  401812:	4798      	blx	r3
	return pvReturn;
  401814:	e7f0      	b.n	4017f8 <pvPortMalloc+0x3c>
  401816:	bf00      	nop
  401818:	00402445 	.word	0x00402445
  40181c:	20400a3c 	.word	0x20400a3c
  401820:	2040c240 	.word	0x2040c240
  401824:	004025a5 	.word	0x004025a5
  401828:	20400a48 	.word	0x20400a48
  40182c:	0041d3d7 	.word	0x0041d3d7

00401830 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  401830:	b150      	cbz	r0, 401848 <vPortFree+0x18>
  401832:	f04f 0380 	mov.w	r3, #128	; 0x80
  401836:	b672      	cpsid	i
  401838:	f383 8811 	msr	BASEPRI, r3
  40183c:	f3bf 8f6f 	isb	sy
  401840:	f3bf 8f4f 	dsb	sy
  401844:	b662      	cpsie	i
  401846:	e7fe      	b.n	401846 <vPortFree+0x16>
  401848:	4770      	bx	lr
	...

0040184c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  40184c:	b510      	push	{r4, lr}
  40184e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401850:	4b06      	ldr	r3, [pc, #24]	; (40186c <prvIsQueueFull+0x20>)
  401852:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401854:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401856:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401858:	429a      	cmp	r2, r3
  40185a:	d004      	beq.n	401866 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
  40185c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
  40185e:	4b04      	ldr	r3, [pc, #16]	; (401870 <prvIsQueueFull+0x24>)
  401860:	4798      	blx	r3

	return xReturn;
}
  401862:	4620      	mov	r0, r4
  401864:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  401866:	2401      	movs	r4, #1
  401868:	e7f9      	b.n	40185e <prvIsQueueFull+0x12>
  40186a:	bf00      	nop
  40186c:	0040156d 	.word	0x0040156d
  401870:	004015b9 	.word	0x004015b9

00401874 <prvIsQueueEmpty>:
{
  401874:	b510      	push	{r4, lr}
  401876:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401878:	4b05      	ldr	r3, [pc, #20]	; (401890 <prvIsQueueEmpty+0x1c>)
  40187a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40187c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40187e:	b123      	cbz	r3, 40188a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
  401880:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401882:	4b04      	ldr	r3, [pc, #16]	; (401894 <prvIsQueueEmpty+0x20>)
  401884:	4798      	blx	r3
}
  401886:	4620      	mov	r0, r4
  401888:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  40188a:	2401      	movs	r4, #1
  40188c:	e7f9      	b.n	401882 <prvIsQueueEmpty+0xe>
  40188e:	bf00      	nop
  401890:	0040156d 	.word	0x0040156d
  401894:	004015b9 	.word	0x004015b9

00401898 <prvCopyDataToQueue>:
{
  401898:	b538      	push	{r3, r4, r5, lr}
  40189a:	4604      	mov	r4, r0
  40189c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40189e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4018a0:	b95a      	cbnz	r2, 4018ba <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4018a2:	6803      	ldr	r3, [r0, #0]
  4018a4:	2b00      	cmp	r3, #0
  4018a6:	d12e      	bne.n	401906 <prvCopyDataToQueue+0x6e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4018a8:	6840      	ldr	r0, [r0, #4]
  4018aa:	4b1b      	ldr	r3, [pc, #108]	; (401918 <prvCopyDataToQueue+0x80>)
  4018ac:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4018ae:	2300      	movs	r3, #0
  4018b0:	6063      	str	r3, [r4, #4]
	++( pxQueue->uxMessagesWaiting );
  4018b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018b4:	3301      	adds	r3, #1
  4018b6:	63a3      	str	r3, [r4, #56]	; 0x38
}
  4018b8:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4018ba:	b96d      	cbnz	r5, 4018d8 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4018bc:	6880      	ldr	r0, [r0, #8]
  4018be:	4b17      	ldr	r3, [pc, #92]	; (40191c <prvCopyDataToQueue+0x84>)
  4018c0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4018c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4018c4:	68a3      	ldr	r3, [r4, #8]
  4018c6:	4413      	add	r3, r2
  4018c8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4018ca:	6862      	ldr	r2, [r4, #4]
  4018cc:	4293      	cmp	r3, r2
  4018ce:	d31c      	bcc.n	40190a <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4018d0:	6823      	ldr	r3, [r4, #0]
  4018d2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4018d4:	2000      	movs	r0, #0
  4018d6:	e7ec      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4018d8:	68c0      	ldr	r0, [r0, #12]
  4018da:	4b10      	ldr	r3, [pc, #64]	; (40191c <prvCopyDataToQueue+0x84>)
  4018dc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4018de:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4018e0:	425b      	negs	r3, r3
  4018e2:	68e2      	ldr	r2, [r4, #12]
  4018e4:	441a      	add	r2, r3
  4018e6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4018e8:	6821      	ldr	r1, [r4, #0]
  4018ea:	428a      	cmp	r2, r1
  4018ec:	d202      	bcs.n	4018f4 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4018ee:	6862      	ldr	r2, [r4, #4]
  4018f0:	4413      	add	r3, r2
  4018f2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4018f4:	2d02      	cmp	r5, #2
  4018f6:	d10a      	bne.n	40190e <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4018f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018fa:	b153      	cbz	r3, 401912 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4018fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018fe:	3b01      	subs	r3, #1
  401900:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401902:	2000      	movs	r0, #0
  401904:	e7d5      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  401906:	2000      	movs	r0, #0
  401908:	e7d3      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  40190a:	2000      	movs	r0, #0
  40190c:	e7d1      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  40190e:	2000      	movs	r0, #0
  401910:	e7cf      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  401912:	2000      	movs	r0, #0
  401914:	e7cd      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  401916:	bf00      	nop
  401918:	00402bf9 	.word	0x00402bf9
  40191c:	0041e7b9 	.word	0x0041e7b9

00401920 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401920:	b530      	push	{r4, r5, lr}
  401922:	b083      	sub	sp, #12
  401924:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401926:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401928:	b174      	cbz	r4, 401948 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40192a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40192c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40192e:	429a      	cmp	r2, r3
  401930:	d315      	bcc.n	40195e <prvNotifyQueueSetContainer+0x3e>
  401932:	f04f 0380 	mov.w	r3, #128	; 0x80
  401936:	b672      	cpsid	i
  401938:	f383 8811 	msr	BASEPRI, r3
  40193c:	f3bf 8f6f 	isb	sy
  401940:	f3bf 8f4f 	dsb	sy
  401944:	b662      	cpsie	i
  401946:	e7fe      	b.n	401946 <prvNotifyQueueSetContainer+0x26>
  401948:	f04f 0380 	mov.w	r3, #128	; 0x80
  40194c:	b672      	cpsid	i
  40194e:	f383 8811 	msr	BASEPRI, r3
  401952:	f3bf 8f6f 	isb	sy
  401956:	f3bf 8f4f 	dsb	sy
  40195a:	b662      	cpsie	i
  40195c:	e7fe      	b.n	40195c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40195e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401960:	4293      	cmp	r3, r2
  401962:	d803      	bhi.n	40196c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401964:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401966:	4628      	mov	r0, r5
  401968:	b003      	add	sp, #12
  40196a:	bd30      	pop	{r4, r5, pc}
  40196c:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40196e:	a901      	add	r1, sp, #4
  401970:	4620      	mov	r0, r4
  401972:	4b0b      	ldr	r3, [pc, #44]	; (4019a0 <prvNotifyQueueSetContainer+0x80>)
  401974:	4798      	blx	r3
  401976:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401978:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40197a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40197e:	d10a      	bne.n	401996 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401980:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401982:	2b00      	cmp	r3, #0
  401984:	d0ef      	beq.n	401966 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401986:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40198a:	4b06      	ldr	r3, [pc, #24]	; (4019a4 <prvNotifyQueueSetContainer+0x84>)
  40198c:	4798      	blx	r3
  40198e:	2800      	cmp	r0, #0
  401990:	d0e9      	beq.n	401966 <prvNotifyQueueSetContainer+0x46>
						xReturn = pdTRUE;
  401992:	2501      	movs	r5, #1
		return xReturn;
  401994:	e7e7      	b.n	401966 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401996:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401998:	3301      	adds	r3, #1
  40199a:	64a3      	str	r3, [r4, #72]	; 0x48
  40199c:	e7e3      	b.n	401966 <prvNotifyQueueSetContainer+0x46>
  40199e:	bf00      	nop
  4019a0:	00401899 	.word	0x00401899
  4019a4:	004029c5 	.word	0x004029c5

004019a8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4019a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4019aa:	b172      	cbz	r2, 4019ca <prvCopyDataFromQueue+0x22>
{
  4019ac:	b510      	push	{r4, lr}
  4019ae:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4019b0:	68c4      	ldr	r4, [r0, #12]
  4019b2:	4414      	add	r4, r2
  4019b4:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4019b6:	6840      	ldr	r0, [r0, #4]
  4019b8:	4284      	cmp	r4, r0
  4019ba:	d301      	bcc.n	4019c0 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4019bc:	6818      	ldr	r0, [r3, #0]
  4019be:	60d8      	str	r0, [r3, #12]
  4019c0:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4019c2:	68d9      	ldr	r1, [r3, #12]
  4019c4:	4b01      	ldr	r3, [pc, #4]	; (4019cc <prvCopyDataFromQueue+0x24>)
  4019c6:	4798      	blx	r3
  4019c8:	bd10      	pop	{r4, pc}
  4019ca:	4770      	bx	lr
  4019cc:	0041e7b9 	.word	0x0041e7b9

004019d0 <prvUnlockQueue>:
{
  4019d0:	b510      	push	{r4, lr}
  4019d2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4019d4:	4b1e      	ldr	r3, [pc, #120]	; (401a50 <prvUnlockQueue+0x80>)
  4019d6:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4019d8:	e009      	b.n	4019ee <prvUnlockQueue+0x1e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4019da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4019dc:	b1cb      	cbz	r3, 401a12 <prvUnlockQueue+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4019de:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4019e2:	4b1c      	ldr	r3, [pc, #112]	; (401a54 <prvUnlockQueue+0x84>)
  4019e4:	4798      	blx	r3
  4019e6:	b988      	cbnz	r0, 401a0c <prvUnlockQueue+0x3c>
			--( pxQueue->xTxLock );
  4019e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019ea:	3b01      	subs	r3, #1
  4019ec:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4019ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019f0:	2b00      	cmp	r3, #0
  4019f2:	dd0e      	ble.n	401a12 <prvUnlockQueue+0x42>
				if( pxQueue->pxQueueSetContainer != NULL )
  4019f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d0ef      	beq.n	4019da <prvUnlockQueue+0xa>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4019fa:	2100      	movs	r1, #0
  4019fc:	4620      	mov	r0, r4
  4019fe:	4b16      	ldr	r3, [pc, #88]	; (401a58 <prvUnlockQueue+0x88>)
  401a00:	4798      	blx	r3
  401a02:	2801      	cmp	r0, #1
  401a04:	d1f0      	bne.n	4019e8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
  401a06:	4b15      	ldr	r3, [pc, #84]	; (401a5c <prvUnlockQueue+0x8c>)
  401a08:	4798      	blx	r3
  401a0a:	e7ed      	b.n	4019e8 <prvUnlockQueue+0x18>
							vTaskMissedYield();
  401a0c:	4b13      	ldr	r3, [pc, #76]	; (401a5c <prvUnlockQueue+0x8c>)
  401a0e:	4798      	blx	r3
  401a10:	e7ea      	b.n	4019e8 <prvUnlockQueue+0x18>
		pxQueue->xTxLock = queueUNLOCKED;
  401a12:	f04f 33ff 	mov.w	r3, #4294967295
  401a16:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401a18:	4b11      	ldr	r3, [pc, #68]	; (401a60 <prvUnlockQueue+0x90>)
  401a1a:	4798      	blx	r3
	taskENTER_CRITICAL();
  401a1c:	4b0c      	ldr	r3, [pc, #48]	; (401a50 <prvUnlockQueue+0x80>)
  401a1e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401a20:	e002      	b.n	401a28 <prvUnlockQueue+0x58>
				--( pxQueue->xRxLock );
  401a22:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401a24:	3b01      	subs	r3, #1
  401a26:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401a28:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401a2a:	2b00      	cmp	r3, #0
  401a2c:	dd0a      	ble.n	401a44 <prvUnlockQueue+0x74>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a2e:	6923      	ldr	r3, [r4, #16]
  401a30:	b143      	cbz	r3, 401a44 <prvUnlockQueue+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401a32:	f104 0010 	add.w	r0, r4, #16
  401a36:	4b07      	ldr	r3, [pc, #28]	; (401a54 <prvUnlockQueue+0x84>)
  401a38:	4798      	blx	r3
  401a3a:	2800      	cmp	r0, #0
  401a3c:	d0f1      	beq.n	401a22 <prvUnlockQueue+0x52>
					vTaskMissedYield();
  401a3e:	4b07      	ldr	r3, [pc, #28]	; (401a5c <prvUnlockQueue+0x8c>)
  401a40:	4798      	blx	r3
  401a42:	e7ee      	b.n	401a22 <prvUnlockQueue+0x52>
		pxQueue->xRxLock = queueUNLOCKED;
  401a44:	f04f 33ff 	mov.w	r3, #4294967295
  401a48:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401a4a:	4b05      	ldr	r3, [pc, #20]	; (401a60 <prvUnlockQueue+0x90>)
  401a4c:	4798      	blx	r3
  401a4e:	bd10      	pop	{r4, pc}
  401a50:	0040156d 	.word	0x0040156d
  401a54:	004029c5 	.word	0x004029c5
  401a58:	00401921 	.word	0x00401921
  401a5c:	00402b21 	.word	0x00402b21
  401a60:	004015b9 	.word	0x004015b9

00401a64 <xQueueGenericReset>:
{
  401a64:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401a66:	b308      	cbz	r0, 401aac <xQueueGenericReset+0x48>
  401a68:	4604      	mov	r4, r0
  401a6a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401a6c:	4b1d      	ldr	r3, [pc, #116]	; (401ae4 <xQueueGenericReset+0x80>)
  401a6e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401a70:	6821      	ldr	r1, [r4, #0]
  401a72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401a76:	fb03 1002 	mla	r0, r3, r2, r1
  401a7a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401a7c:	2000      	movs	r0, #0
  401a7e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401a80:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401a82:	3a01      	subs	r2, #1
  401a84:	fb02 1303 	mla	r3, r2, r3, r1
  401a88:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401a8a:	f04f 33ff 	mov.w	r3, #4294967295
  401a8e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401a90:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401a92:	b9fd      	cbnz	r5, 401ad4 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a94:	6923      	ldr	r3, [r4, #16]
  401a96:	b12b      	cbz	r3, 401aa4 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401a98:	f104 0010 	add.w	r0, r4, #16
  401a9c:	4b12      	ldr	r3, [pc, #72]	; (401ae8 <xQueueGenericReset+0x84>)
  401a9e:	4798      	blx	r3
  401aa0:	2801      	cmp	r0, #1
  401aa2:	d00e      	beq.n	401ac2 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401aa4:	4b11      	ldr	r3, [pc, #68]	; (401aec <xQueueGenericReset+0x88>)
  401aa6:	4798      	blx	r3
}
  401aa8:	2001      	movs	r0, #1
  401aaa:	bd38      	pop	{r3, r4, r5, pc}
  401aac:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab0:	b672      	cpsid	i
  401ab2:	f383 8811 	msr	BASEPRI, r3
  401ab6:	f3bf 8f6f 	isb	sy
  401aba:	f3bf 8f4f 	dsb	sy
  401abe:	b662      	cpsie	i
  401ac0:	e7fe      	b.n	401ac0 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ac6:	4b0a      	ldr	r3, [pc, #40]	; (401af0 <xQueueGenericReset+0x8c>)
  401ac8:	601a      	str	r2, [r3, #0]
  401aca:	f3bf 8f4f 	dsb	sy
  401ace:	f3bf 8f6f 	isb	sy
  401ad2:	e7e7      	b.n	401aa4 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401ad4:	f104 0010 	add.w	r0, r4, #16
  401ad8:	4d06      	ldr	r5, [pc, #24]	; (401af4 <xQueueGenericReset+0x90>)
  401ada:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401adc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ae0:	47a8      	blx	r5
  401ae2:	e7df      	b.n	401aa4 <xQueueGenericReset+0x40>
  401ae4:	0040156d 	.word	0x0040156d
  401ae8:	004029c5 	.word	0x004029c5
  401aec:	004015b9 	.word	0x004015b9
  401af0:	e000ed04 	.word	0xe000ed04
  401af4:	00401421 	.word	0x00401421

00401af8 <xQueueGenericCreate>:
{
  401af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401afa:	b950      	cbnz	r0, 401b12 <xQueueGenericCreate+0x1a>
  401afc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b00:	b672      	cpsid	i
  401b02:	f383 8811 	msr	BASEPRI, r3
  401b06:	f3bf 8f6f 	isb	sy
  401b0a:	f3bf 8f4f 	dsb	sy
  401b0e:	b662      	cpsie	i
  401b10:	e7fe      	b.n	401b10 <xQueueGenericCreate+0x18>
  401b12:	4606      	mov	r6, r0
	if( uxItemSize == ( UBaseType_t ) 0 )
  401b14:	b119      	cbz	r1, 401b1e <xQueueGenericCreate+0x26>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b16:	fb01 f000 	mul.w	r0, r1, r0
  401b1a:	3001      	adds	r0, #1
  401b1c:	e000      	b.n	401b20 <xQueueGenericCreate+0x28>
		xQueueSizeInBytes = ( size_t ) 0;
  401b1e:	2000      	movs	r0, #0
  401b20:	4617      	mov	r7, r2
  401b22:	460d      	mov	r5, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401b24:	3058      	adds	r0, #88	; 0x58
  401b26:	4b12      	ldr	r3, [pc, #72]	; (401b70 <xQueueGenericCreate+0x78>)
  401b28:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401b2a:	4604      	mov	r4, r0
  401b2c:	b190      	cbz	r0, 401b54 <xQueueGenericCreate+0x5c>
		if( uxItemSize == ( UBaseType_t ) 0 )
  401b2e:	b96d      	cbnz	r5, 401b4c <xQueueGenericCreate+0x54>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401b30:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401b32:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401b34:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401b36:	2101      	movs	r1, #1
  401b38:	4620      	mov	r0, r4
  401b3a:	4b0e      	ldr	r3, [pc, #56]	; (401b74 <xQueueGenericCreate+0x7c>)
  401b3c:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401b3e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401b42:	2300      	movs	r3, #0
  401b44:	6563      	str	r3, [r4, #84]	; 0x54
		xReturn = pxNewQueue;
  401b46:	4620      	mov	r0, r4
	configASSERT( xReturn );
  401b48:	b130      	cbz	r0, 401b58 <xQueueGenericCreate+0x60>
}
  401b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401b4c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401b50:	6003      	str	r3, [r0, #0]
  401b52:	e7ee      	b.n	401b32 <xQueueGenericCreate+0x3a>
QueueHandle_t xReturn = NULL;
  401b54:	2000      	movs	r0, #0
  401b56:	e7f7      	b.n	401b48 <xQueueGenericCreate+0x50>
  401b58:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b5c:	b672      	cpsid	i
  401b5e:	f383 8811 	msr	BASEPRI, r3
  401b62:	f3bf 8f6f 	isb	sy
  401b66:	f3bf 8f4f 	dsb	sy
  401b6a:	b662      	cpsie	i
  401b6c:	e7fe      	b.n	401b6c <xQueueGenericCreate+0x74>
  401b6e:	bf00      	nop
  401b70:	004017bd 	.word	0x004017bd
  401b74:	00401a65 	.word	0x00401a65

00401b78 <xQueueGenericSend>:
{
  401b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b7a:	b085      	sub	sp, #20
  401b7c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b7e:	b170      	cbz	r0, 401b9e <xQueueGenericSend+0x26>
  401b80:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b82:	b1b9      	cbz	r1, 401bb4 <xQueueGenericSend+0x3c>
  401b84:	2501      	movs	r5, #1
  401b86:	b9dd      	cbnz	r5, 401bc0 <xQueueGenericSend+0x48>
  401b88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b8c:	b672      	cpsid	i
  401b8e:	f383 8811 	msr	BASEPRI, r3
  401b92:	f3bf 8f6f 	isb	sy
  401b96:	f3bf 8f4f 	dsb	sy
  401b9a:	b662      	cpsie	i
  401b9c:	e7fe      	b.n	401b9c <xQueueGenericSend+0x24>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <xQueueGenericSend+0x3a>
  401bb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401bb6:	b90a      	cbnz	r2, 401bbc <xQueueGenericSend+0x44>
  401bb8:	2501      	movs	r5, #1
  401bba:	e7e4      	b.n	401b86 <xQueueGenericSend+0xe>
  401bbc:	2500      	movs	r5, #0
  401bbe:	e7e2      	b.n	401b86 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401bc0:	2b02      	cmp	r3, #2
  401bc2:	d00b      	beq.n	401bdc <xQueueGenericSend+0x64>
  401bc4:	b97d      	cbnz	r5, 401be6 <xQueueGenericSend+0x6e>
  401bc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bca:	b672      	cpsid	i
  401bcc:	f383 8811 	msr	BASEPRI, r3
  401bd0:	f3bf 8f6f 	isb	sy
  401bd4:	f3bf 8f4f 	dsb	sy
  401bd8:	b662      	cpsie	i
  401bda:	e7fe      	b.n	401bda <xQueueGenericSend+0x62>
  401bdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401bde:	2a01      	cmp	r2, #1
  401be0:	d0f0      	beq.n	401bc4 <xQueueGenericSend+0x4c>
  401be2:	2500      	movs	r5, #0
  401be4:	e7ee      	b.n	401bc4 <xQueueGenericSend+0x4c>
  401be6:	461e      	mov	r6, r3
  401be8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401bea:	4b4e      	ldr	r3, [pc, #312]	; (401d24 <xQueueGenericSend+0x1ac>)
  401bec:	4798      	blx	r3
  401bee:	b910      	cbnz	r0, 401bf6 <xQueueGenericSend+0x7e>
  401bf0:	9b01      	ldr	r3, [sp, #4]
  401bf2:	b103      	cbz	r3, 401bf6 <xQueueGenericSend+0x7e>
  401bf4:	2500      	movs	r5, #0
  401bf6:	b955      	cbnz	r5, 401c0e <xQueueGenericSend+0x96>
  401bf8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bfc:	b672      	cpsid	i
  401bfe:	f383 8811 	msr	BASEPRI, r3
  401c02:	f3bf 8f6f 	isb	sy
  401c06:	f3bf 8f4f 	dsb	sy
  401c0a:	b662      	cpsie	i
  401c0c:	e7fe      	b.n	401c0c <xQueueGenericSend+0x94>
  401c0e:	2500      	movs	r5, #0
  401c10:	e03e      	b.n	401c90 <xQueueGenericSend+0x118>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401c12:	4632      	mov	r2, r6
  401c14:	4639      	mov	r1, r7
  401c16:	4620      	mov	r0, r4
  401c18:	4b43      	ldr	r3, [pc, #268]	; (401d28 <xQueueGenericSend+0x1b0>)
  401c1a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401c1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401c1e:	b193      	cbz	r3, 401c46 <xQueueGenericSend+0xce>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401c20:	4631      	mov	r1, r6
  401c22:	4620      	mov	r0, r4
  401c24:	4b41      	ldr	r3, [pc, #260]	; (401d2c <xQueueGenericSend+0x1b4>)
  401c26:	4798      	blx	r3
  401c28:	2801      	cmp	r0, #1
  401c2a:	d107      	bne.n	401c3c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c30:	4b3f      	ldr	r3, [pc, #252]	; (401d30 <xQueueGenericSend+0x1b8>)
  401c32:	601a      	str	r2, [r3, #0]
  401c34:	f3bf 8f4f 	dsb	sy
  401c38:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401c3c:	4b3d      	ldr	r3, [pc, #244]	; (401d34 <xQueueGenericSend+0x1bc>)
  401c3e:	4798      	blx	r3
				return pdPASS;
  401c40:	2001      	movs	r0, #1
}
  401c42:	b005      	add	sp, #20
  401c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c48:	b173      	cbz	r3, 401c68 <xQueueGenericSend+0xf0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401c4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c4e:	4b3a      	ldr	r3, [pc, #232]	; (401d38 <xQueueGenericSend+0x1c0>)
  401c50:	4798      	blx	r3
  401c52:	2801      	cmp	r0, #1
  401c54:	d1f2      	bne.n	401c3c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c5a:	4b35      	ldr	r3, [pc, #212]	; (401d30 <xQueueGenericSend+0x1b8>)
  401c5c:	601a      	str	r2, [r3, #0]
  401c5e:	f3bf 8f4f 	dsb	sy
  401c62:	f3bf 8f6f 	isb	sy
  401c66:	e7e9      	b.n	401c3c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401c68:	2800      	cmp	r0, #0
  401c6a:	d0e7      	beq.n	401c3c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c70:	4b2f      	ldr	r3, [pc, #188]	; (401d30 <xQueueGenericSend+0x1b8>)
  401c72:	601a      	str	r2, [r3, #0]
  401c74:	f3bf 8f4f 	dsb	sy
  401c78:	f3bf 8f6f 	isb	sy
  401c7c:	e7de      	b.n	401c3c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401c7e:	4b2d      	ldr	r3, [pc, #180]	; (401d34 <xQueueGenericSend+0x1bc>)
  401c80:	4798      	blx	r3
					return errQUEUE_FULL;
  401c82:	2000      	movs	r0, #0
  401c84:	e7dd      	b.n	401c42 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401c86:	4620      	mov	r0, r4
  401c88:	4b2c      	ldr	r3, [pc, #176]	; (401d3c <xQueueGenericSend+0x1c4>)
  401c8a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c8c:	4b2c      	ldr	r3, [pc, #176]	; (401d40 <xQueueGenericSend+0x1c8>)
  401c8e:	4798      	blx	r3
		taskENTER_CRITICAL();
  401c90:	4b2c      	ldr	r3, [pc, #176]	; (401d44 <xQueueGenericSend+0x1cc>)
  401c92:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401c94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c98:	429a      	cmp	r2, r3
  401c9a:	d3ba      	bcc.n	401c12 <xQueueGenericSend+0x9a>
  401c9c:	2e02      	cmp	r6, #2
  401c9e:	d0b8      	beq.n	401c12 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401ca0:	9b01      	ldr	r3, [sp, #4]
  401ca2:	2b00      	cmp	r3, #0
  401ca4:	d0eb      	beq.n	401c7e <xQueueGenericSend+0x106>
				else if( xEntryTimeSet == pdFALSE )
  401ca6:	b91d      	cbnz	r5, 401cb0 <xQueueGenericSend+0x138>
					vTaskSetTimeOutState( &xTimeOut );
  401ca8:	a802      	add	r0, sp, #8
  401caa:	4b27      	ldr	r3, [pc, #156]	; (401d48 <xQueueGenericSend+0x1d0>)
  401cac:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401cae:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  401cb0:	4b20      	ldr	r3, [pc, #128]	; (401d34 <xQueueGenericSend+0x1bc>)
  401cb2:	4798      	blx	r3
		vTaskSuspendAll();
  401cb4:	4b25      	ldr	r3, [pc, #148]	; (401d4c <xQueueGenericSend+0x1d4>)
  401cb6:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401cb8:	4b22      	ldr	r3, [pc, #136]	; (401d44 <xQueueGenericSend+0x1cc>)
  401cba:	4798      	blx	r3
  401cbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cc2:	d101      	bne.n	401cc8 <xQueueGenericSend+0x150>
  401cc4:	2300      	movs	r3, #0
  401cc6:	6463      	str	r3, [r4, #68]	; 0x44
  401cc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cca:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cce:	d101      	bne.n	401cd4 <xQueueGenericSend+0x15c>
  401cd0:	2300      	movs	r3, #0
  401cd2:	64a3      	str	r3, [r4, #72]	; 0x48
  401cd4:	4b17      	ldr	r3, [pc, #92]	; (401d34 <xQueueGenericSend+0x1bc>)
  401cd6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401cd8:	a901      	add	r1, sp, #4
  401cda:	a802      	add	r0, sp, #8
  401cdc:	4b1c      	ldr	r3, [pc, #112]	; (401d50 <xQueueGenericSend+0x1d8>)
  401cde:	4798      	blx	r3
  401ce0:	b9c8      	cbnz	r0, 401d16 <xQueueGenericSend+0x19e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401ce2:	4620      	mov	r0, r4
  401ce4:	4b1b      	ldr	r3, [pc, #108]	; (401d54 <xQueueGenericSend+0x1dc>)
  401ce6:	4798      	blx	r3
  401ce8:	2800      	cmp	r0, #0
  401cea:	d0cc      	beq.n	401c86 <xQueueGenericSend+0x10e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401cec:	9901      	ldr	r1, [sp, #4]
  401cee:	f104 0010 	add.w	r0, r4, #16
  401cf2:	4b19      	ldr	r3, [pc, #100]	; (401d58 <xQueueGenericSend+0x1e0>)
  401cf4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401cf6:	4620      	mov	r0, r4
  401cf8:	4b10      	ldr	r3, [pc, #64]	; (401d3c <xQueueGenericSend+0x1c4>)
  401cfa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401cfc:	4b10      	ldr	r3, [pc, #64]	; (401d40 <xQueueGenericSend+0x1c8>)
  401cfe:	4798      	blx	r3
  401d00:	2800      	cmp	r0, #0
  401d02:	d1c5      	bne.n	401c90 <xQueueGenericSend+0x118>
					portYIELD_WITHIN_API();
  401d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d08:	4b09      	ldr	r3, [pc, #36]	; (401d30 <xQueueGenericSend+0x1b8>)
  401d0a:	601a      	str	r2, [r3, #0]
  401d0c:	f3bf 8f4f 	dsb	sy
  401d10:	f3bf 8f6f 	isb	sy
  401d14:	e7bc      	b.n	401c90 <xQueueGenericSend+0x118>
			prvUnlockQueue( pxQueue );
  401d16:	4620      	mov	r0, r4
  401d18:	4b08      	ldr	r3, [pc, #32]	; (401d3c <xQueueGenericSend+0x1c4>)
  401d1a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401d1c:	4b08      	ldr	r3, [pc, #32]	; (401d40 <xQueueGenericSend+0x1c8>)
  401d1e:	4798      	blx	r3
			return errQUEUE_FULL;
  401d20:	2000      	movs	r0, #0
  401d22:	e78e      	b.n	401c42 <xQueueGenericSend+0xca>
  401d24:	00402b2d 	.word	0x00402b2d
  401d28:	00401899 	.word	0x00401899
  401d2c:	00401921 	.word	0x00401921
  401d30:	e000ed04 	.word	0xe000ed04
  401d34:	004015b9 	.word	0x004015b9
  401d38:	004029c5 	.word	0x004029c5
  401d3c:	004019d1 	.word	0x004019d1
  401d40:	004025a5 	.word	0x004025a5
  401d44:	0040156d 	.word	0x0040156d
  401d48:	00402a5d 	.word	0x00402a5d
  401d4c:	00402445 	.word	0x00402445
  401d50:	00402a8d 	.word	0x00402a8d
  401d54:	0040184d 	.word	0x0040184d
  401d58:	004028c1 	.word	0x004028c1

00401d5c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401d5c:	b180      	cbz	r0, 401d80 <xQueueGenericSendFromISR+0x24>
{
  401d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d62:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d64:	b1b9      	cbz	r1, 401d96 <xQueueGenericSendFromISR+0x3a>
  401d66:	2001      	movs	r0, #1
  401d68:	b9d8      	cbnz	r0, 401da2 <xQueueGenericSendFromISR+0x46>
  401d6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d6e:	b672      	cpsid	i
  401d70:	f383 8811 	msr	BASEPRI, r3
  401d74:	f3bf 8f6f 	isb	sy
  401d78:	f3bf 8f4f 	dsb	sy
  401d7c:	b662      	cpsie	i
  401d7e:	e7fe      	b.n	401d7e <xQueueGenericSendFromISR+0x22>
  401d80:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d84:	b672      	cpsid	i
  401d86:	f383 8811 	msr	BASEPRI, r3
  401d8a:	f3bf 8f6f 	isb	sy
  401d8e:	f3bf 8f4f 	dsb	sy
  401d92:	b662      	cpsie	i
  401d94:	e7fe      	b.n	401d94 <xQueueGenericSendFromISR+0x38>
  401d96:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401d98:	b908      	cbnz	r0, 401d9e <xQueueGenericSendFromISR+0x42>
  401d9a:	2001      	movs	r0, #1
  401d9c:	e7e4      	b.n	401d68 <xQueueGenericSendFromISR+0xc>
  401d9e:	2000      	movs	r0, #0
  401da0:	e7e2      	b.n	401d68 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401da2:	2b02      	cmp	r3, #2
  401da4:	d00b      	beq.n	401dbe <xQueueGenericSendFromISR+0x62>
  401da6:	b978      	cbnz	r0, 401dc8 <xQueueGenericSendFromISR+0x6c>
  401da8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dac:	b672      	cpsid	i
  401dae:	f383 8811 	msr	BASEPRI, r3
  401db2:	f3bf 8f6f 	isb	sy
  401db6:	f3bf 8f4f 	dsb	sy
  401dba:	b662      	cpsie	i
  401dbc:	e7fe      	b.n	401dbc <xQueueGenericSendFromISR+0x60>
  401dbe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  401dc0:	2d01      	cmp	r5, #1
  401dc2:	d0f0      	beq.n	401da6 <xQueueGenericSendFromISR+0x4a>
  401dc4:	2000      	movs	r0, #0
  401dc6:	e7ee      	b.n	401da6 <xQueueGenericSendFromISR+0x4a>
  401dc8:	461e      	mov	r6, r3
  401dca:	4615      	mov	r5, r2
  401dcc:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401dce:	4b23      	ldr	r3, [pc, #140]	; (401e5c <xQueueGenericSendFromISR+0x100>)
  401dd0:	4798      	blx	r3
	__asm volatile
  401dd2:	f3ef 8711 	mrs	r7, BASEPRI
  401dd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dda:	b672      	cpsid	i
  401ddc:	f383 8811 	msr	BASEPRI, r3
  401de0:	f3bf 8f6f 	isb	sy
  401de4:	f3bf 8f4f 	dsb	sy
  401de8:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401dea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401dec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401dee:	429a      	cmp	r2, r3
  401df0:	d301      	bcc.n	401df6 <xQueueGenericSendFromISR+0x9a>
  401df2:	2e02      	cmp	r6, #2
  401df4:	d126      	bne.n	401e44 <xQueueGenericSendFromISR+0xe8>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401df6:	4632      	mov	r2, r6
  401df8:	4641      	mov	r1, r8
  401dfa:	4620      	mov	r0, r4
  401dfc:	4b18      	ldr	r3, [pc, #96]	; (401e60 <xQueueGenericSendFromISR+0x104>)
  401dfe:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401e00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e02:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e06:	d118      	bne.n	401e3a <xQueueGenericSendFromISR+0xde>
					if( pxQueue->pxQueueSetContainer != NULL )
  401e08:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e0a:	b15b      	cbz	r3, 401e24 <xQueueGenericSendFromISR+0xc8>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401e0c:	4631      	mov	r1, r6
  401e0e:	4620      	mov	r0, r4
  401e10:	4b14      	ldr	r3, [pc, #80]	; (401e64 <xQueueGenericSendFromISR+0x108>)
  401e12:	4798      	blx	r3
  401e14:	2801      	cmp	r0, #1
  401e16:	d117      	bne.n	401e48 <xQueueGenericSendFromISR+0xec>
							if( pxHigherPriorityTaskWoken != NULL )
  401e18:	b1c5      	cbz	r5, 401e4c <xQueueGenericSendFromISR+0xf0>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401e1a:	6028      	str	r0, [r5, #0]
	__asm volatile
  401e1c:	f387 8811 	msr	BASEPRI, r7
}
  401e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e26:	b19b      	cbz	r3, 401e50 <xQueueGenericSendFromISR+0xf4>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401e28:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e2c:	4b0e      	ldr	r3, [pc, #56]	; (401e68 <xQueueGenericSendFromISR+0x10c>)
  401e2e:	4798      	blx	r3
  401e30:	b180      	cbz	r0, 401e54 <xQueueGenericSendFromISR+0xf8>
								if( pxHigherPriorityTaskWoken != NULL )
  401e32:	b18d      	cbz	r5, 401e58 <xQueueGenericSendFromISR+0xfc>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401e34:	2001      	movs	r0, #1
  401e36:	6028      	str	r0, [r5, #0]
  401e38:	e7f0      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
				++( pxQueue->xTxLock );
  401e3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e3c:	3301      	adds	r3, #1
  401e3e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401e40:	2001      	movs	r0, #1
  401e42:	e7eb      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
			xReturn = errQUEUE_FULL;
  401e44:	2000      	movs	r0, #0
  401e46:	e7e9      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
			xReturn = pdPASS;
  401e48:	2001      	movs	r0, #1
  401e4a:	e7e7      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e4c:	2001      	movs	r0, #1
  401e4e:	e7e5      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e50:	2001      	movs	r0, #1
  401e52:	e7e3      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e54:	2001      	movs	r0, #1
  401e56:	e7e1      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e58:	2001      	movs	r0, #1
  401e5a:	e7df      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e5c:	00401759 	.word	0x00401759
  401e60:	00401899 	.word	0x00401899
  401e64:	00401921 	.word	0x00401921
  401e68:	004029c5 	.word	0x004029c5

00401e6c <xQueueGenericReceive>:
{
  401e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e6e:	b085      	sub	sp, #20
  401e70:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401e72:	b170      	cbz	r0, 401e92 <xQueueGenericReceive+0x26>
  401e74:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e76:	b1b9      	cbz	r1, 401ea8 <xQueueGenericReceive+0x3c>
  401e78:	2501      	movs	r5, #1
  401e7a:	b9dd      	cbnz	r5, 401eb4 <xQueueGenericReceive+0x48>
	__asm volatile
  401e7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e80:	b672      	cpsid	i
  401e82:	f383 8811 	msr	BASEPRI, r3
  401e86:	f3bf 8f6f 	isb	sy
  401e8a:	f3bf 8f4f 	dsb	sy
  401e8e:	b662      	cpsie	i
  401e90:	e7fe      	b.n	401e90 <xQueueGenericReceive+0x24>
  401e92:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e96:	b672      	cpsid	i
  401e98:	f383 8811 	msr	BASEPRI, r3
  401e9c:	f3bf 8f6f 	isb	sy
  401ea0:	f3bf 8f4f 	dsb	sy
  401ea4:	b662      	cpsie	i
  401ea6:	e7fe      	b.n	401ea6 <xQueueGenericReceive+0x3a>
  401ea8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401eaa:	b90a      	cbnz	r2, 401eb0 <xQueueGenericReceive+0x44>
  401eac:	2501      	movs	r5, #1
  401eae:	e7e4      	b.n	401e7a <xQueueGenericReceive+0xe>
  401eb0:	2500      	movs	r5, #0
  401eb2:	e7e2      	b.n	401e7a <xQueueGenericReceive+0xe>
  401eb4:	461f      	mov	r7, r3
  401eb6:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401eb8:	4b52      	ldr	r3, [pc, #328]	; (402004 <xQueueGenericReceive+0x198>)
  401eba:	4798      	blx	r3
  401ebc:	b910      	cbnz	r0, 401ec4 <xQueueGenericReceive+0x58>
  401ebe:	9b01      	ldr	r3, [sp, #4]
  401ec0:	b103      	cbz	r3, 401ec4 <xQueueGenericReceive+0x58>
  401ec2:	2500      	movs	r5, #0
  401ec4:	b955      	cbnz	r5, 401edc <xQueueGenericReceive+0x70>
  401ec6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eca:	b672      	cpsid	i
  401ecc:	f383 8811 	msr	BASEPRI, r3
  401ed0:	f3bf 8f6f 	isb	sy
  401ed4:	f3bf 8f4f 	dsb	sy
  401ed8:	b662      	cpsie	i
  401eda:	e7fe      	b.n	401eda <xQueueGenericReceive+0x6e>
  401edc:	2500      	movs	r5, #0
  401ede:	e046      	b.n	401f6e <xQueueGenericReceive+0x102>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401ee0:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401ee2:	4631      	mov	r1, r6
  401ee4:	4620      	mov	r0, r4
  401ee6:	4b48      	ldr	r3, [pc, #288]	; (402008 <xQueueGenericReceive+0x19c>)
  401ee8:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401eea:	b9e7      	cbnz	r7, 401f26 <xQueueGenericReceive+0xba>
					--( pxQueue->uxMessagesWaiting );
  401eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401eee:	3b01      	subs	r3, #1
  401ef0:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401ef2:	6823      	ldr	r3, [r4, #0]
  401ef4:	b913      	cbnz	r3, 401efc <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401ef6:	4b45      	ldr	r3, [pc, #276]	; (40200c <xQueueGenericReceive+0x1a0>)
  401ef8:	4798      	blx	r3
  401efa:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401efc:	6923      	ldr	r3, [r4, #16]
  401efe:	b16b      	cbz	r3, 401f1c <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401f00:	f104 0010 	add.w	r0, r4, #16
  401f04:	4b42      	ldr	r3, [pc, #264]	; (402010 <xQueueGenericReceive+0x1a4>)
  401f06:	4798      	blx	r3
  401f08:	2801      	cmp	r0, #1
  401f0a:	d107      	bne.n	401f1c <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  401f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f10:	4b40      	ldr	r3, [pc, #256]	; (402014 <xQueueGenericReceive+0x1a8>)
  401f12:	601a      	str	r2, [r3, #0]
  401f14:	f3bf 8f4f 	dsb	sy
  401f18:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401f1c:	4b3e      	ldr	r3, [pc, #248]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f1e:	4798      	blx	r3
				return pdPASS;
  401f20:	2001      	movs	r0, #1
}
  401f22:	b005      	add	sp, #20
  401f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401f26:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f2a:	2b00      	cmp	r3, #0
  401f2c:	d0f6      	beq.n	401f1c <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401f2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401f32:	4b37      	ldr	r3, [pc, #220]	; (402010 <xQueueGenericReceive+0x1a4>)
  401f34:	4798      	blx	r3
  401f36:	2800      	cmp	r0, #0
  401f38:	d0f0      	beq.n	401f1c <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  401f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f3e:	4b35      	ldr	r3, [pc, #212]	; (402014 <xQueueGenericReceive+0x1a8>)
  401f40:	601a      	str	r2, [r3, #0]
  401f42:	f3bf 8f4f 	dsb	sy
  401f46:	f3bf 8f6f 	isb	sy
  401f4a:	e7e7      	b.n	401f1c <xQueueGenericReceive+0xb0>
					taskEXIT_CRITICAL();
  401f4c:	4b32      	ldr	r3, [pc, #200]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f4e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401f50:	2000      	movs	r0, #0
  401f52:	e7e6      	b.n	401f22 <xQueueGenericReceive+0xb6>
						taskENTER_CRITICAL();
  401f54:	4b31      	ldr	r3, [pc, #196]	; (40201c <xQueueGenericReceive+0x1b0>)
  401f56:	4798      	blx	r3
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401f58:	6860      	ldr	r0, [r4, #4]
  401f5a:	4b31      	ldr	r3, [pc, #196]	; (402020 <xQueueGenericReceive+0x1b4>)
  401f5c:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401f5e:	4b2e      	ldr	r3, [pc, #184]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f60:	4798      	blx	r3
  401f62:	e032      	b.n	401fca <xQueueGenericReceive+0x15e>
				prvUnlockQueue( pxQueue );
  401f64:	4620      	mov	r0, r4
  401f66:	4b2f      	ldr	r3, [pc, #188]	; (402024 <xQueueGenericReceive+0x1b8>)
  401f68:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401f6a:	4b2f      	ldr	r3, [pc, #188]	; (402028 <xQueueGenericReceive+0x1bc>)
  401f6c:	4798      	blx	r3
		taskENTER_CRITICAL();
  401f6e:	4b2b      	ldr	r3, [pc, #172]	; (40201c <xQueueGenericReceive+0x1b0>)
  401f70:	4798      	blx	r3
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f74:	2b00      	cmp	r3, #0
  401f76:	d1b3      	bne.n	401ee0 <xQueueGenericReceive+0x74>
				if( xTicksToWait == ( TickType_t ) 0 )
  401f78:	9b01      	ldr	r3, [sp, #4]
  401f7a:	2b00      	cmp	r3, #0
  401f7c:	d0e6      	beq.n	401f4c <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
  401f7e:	b91d      	cbnz	r5, 401f88 <xQueueGenericReceive+0x11c>
					vTaskSetTimeOutState( &xTimeOut );
  401f80:	a802      	add	r0, sp, #8
  401f82:	4b2a      	ldr	r3, [pc, #168]	; (40202c <xQueueGenericReceive+0x1c0>)
  401f84:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401f86:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  401f88:	4b23      	ldr	r3, [pc, #140]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f8a:	4798      	blx	r3
		vTaskSuspendAll();
  401f8c:	4b28      	ldr	r3, [pc, #160]	; (402030 <xQueueGenericReceive+0x1c4>)
  401f8e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401f90:	4b22      	ldr	r3, [pc, #136]	; (40201c <xQueueGenericReceive+0x1b0>)
  401f92:	4798      	blx	r3
  401f94:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f96:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f9a:	d101      	bne.n	401fa0 <xQueueGenericReceive+0x134>
  401f9c:	2300      	movs	r3, #0
  401f9e:	6463      	str	r3, [r4, #68]	; 0x44
  401fa0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fa6:	d101      	bne.n	401fac <xQueueGenericReceive+0x140>
  401fa8:	2300      	movs	r3, #0
  401faa:	64a3      	str	r3, [r4, #72]	; 0x48
  401fac:	4b1a      	ldr	r3, [pc, #104]	; (402018 <xQueueGenericReceive+0x1ac>)
  401fae:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401fb0:	a901      	add	r1, sp, #4
  401fb2:	a802      	add	r0, sp, #8
  401fb4:	4b1f      	ldr	r3, [pc, #124]	; (402034 <xQueueGenericReceive+0x1c8>)
  401fb6:	4798      	blx	r3
  401fb8:	b9e0      	cbnz	r0, 401ff4 <xQueueGenericReceive+0x188>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401fba:	4620      	mov	r0, r4
  401fbc:	4b1e      	ldr	r3, [pc, #120]	; (402038 <xQueueGenericReceive+0x1cc>)
  401fbe:	4798      	blx	r3
  401fc0:	2800      	cmp	r0, #0
  401fc2:	d0cf      	beq.n	401f64 <xQueueGenericReceive+0xf8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401fc4:	6823      	ldr	r3, [r4, #0]
  401fc6:	2b00      	cmp	r3, #0
  401fc8:	d0c4      	beq.n	401f54 <xQueueGenericReceive+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401fca:	9901      	ldr	r1, [sp, #4]
  401fcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fd0:	4b1a      	ldr	r3, [pc, #104]	; (40203c <xQueueGenericReceive+0x1d0>)
  401fd2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401fd4:	4620      	mov	r0, r4
  401fd6:	4b13      	ldr	r3, [pc, #76]	; (402024 <xQueueGenericReceive+0x1b8>)
  401fd8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401fda:	4b13      	ldr	r3, [pc, #76]	; (402028 <xQueueGenericReceive+0x1bc>)
  401fdc:	4798      	blx	r3
  401fde:	2800      	cmp	r0, #0
  401fe0:	d1c5      	bne.n	401f6e <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
  401fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fe6:	4b0b      	ldr	r3, [pc, #44]	; (402014 <xQueueGenericReceive+0x1a8>)
  401fe8:	601a      	str	r2, [r3, #0]
  401fea:	f3bf 8f4f 	dsb	sy
  401fee:	f3bf 8f6f 	isb	sy
  401ff2:	e7bc      	b.n	401f6e <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
  401ff4:	4620      	mov	r0, r4
  401ff6:	4b0b      	ldr	r3, [pc, #44]	; (402024 <xQueueGenericReceive+0x1b8>)
  401ff8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401ffa:	4b0b      	ldr	r3, [pc, #44]	; (402028 <xQueueGenericReceive+0x1bc>)
  401ffc:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401ffe:	2000      	movs	r0, #0
  402000:	e78f      	b.n	401f22 <xQueueGenericReceive+0xb6>
  402002:	bf00      	nop
  402004:	00402b2d 	.word	0x00402b2d
  402008:	004019a9 	.word	0x004019a9
  40200c:	00402cbd 	.word	0x00402cbd
  402010:	004029c5 	.word	0x004029c5
  402014:	e000ed04 	.word	0xe000ed04
  402018:	004015b9 	.word	0x004015b9
  40201c:	0040156d 	.word	0x0040156d
  402020:	00402b4d 	.word	0x00402b4d
  402024:	004019d1 	.word	0x004019d1
  402028:	004025a5 	.word	0x004025a5
  40202c:	00402a5d 	.word	0x00402a5d
  402030:	00402445 	.word	0x00402445
  402034:	00402a8d 	.word	0x00402a8d
  402038:	00401875 	.word	0x00401875
  40203c:	004028c1 	.word	0x004028c1

00402040 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402040:	2300      	movs	r3, #0
  402042:	2b07      	cmp	r3, #7
  402044:	d80c      	bhi.n	402060 <vQueueAddToRegistry+0x20>
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402046:	4a07      	ldr	r2, [pc, #28]	; (402064 <vQueueAddToRegistry+0x24>)
  402048:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40204c:	b10a      	cbz	r2, 402052 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40204e:	3301      	adds	r3, #1
  402050:	e7f7      	b.n	402042 <vQueueAddToRegistry+0x2>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402052:	4a04      	ldr	r2, [pc, #16]	; (402064 <vQueueAddToRegistry+0x24>)
  402054:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402058:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40205c:	6058      	str	r0, [r3, #4]
				break;
  40205e:	4770      	bx	lr
  402060:	4770      	bx	lr
  402062:	bf00      	nop
  402064:	2043a128 	.word	0x2043a128

00402068 <vQueueWaitForMessageRestricted>:
	{
  402068:	b570      	push	{r4, r5, r6, lr}
  40206a:	4604      	mov	r4, r0
  40206c:	460d      	mov	r5, r1
  40206e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402070:	4b0f      	ldr	r3, [pc, #60]	; (4020b0 <vQueueWaitForMessageRestricted+0x48>)
  402072:	4798      	blx	r3
  402074:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402076:	f1b3 3fff 	cmp.w	r3, #4294967295
  40207a:	d00b      	beq.n	402094 <vQueueWaitForMessageRestricted+0x2c>
  40207c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40207e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402082:	d00a      	beq.n	40209a <vQueueWaitForMessageRestricted+0x32>
  402084:	4b0b      	ldr	r3, [pc, #44]	; (4020b4 <vQueueWaitForMessageRestricted+0x4c>)
  402086:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40208a:	b14b      	cbz	r3, 4020a0 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  40208c:	4620      	mov	r0, r4
  40208e:	4b0a      	ldr	r3, [pc, #40]	; (4020b8 <vQueueWaitForMessageRestricted+0x50>)
  402090:	4798      	blx	r3
  402092:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402094:	2300      	movs	r3, #0
  402096:	6463      	str	r3, [r4, #68]	; 0x44
  402098:	e7f0      	b.n	40207c <vQueueWaitForMessageRestricted+0x14>
  40209a:	2300      	movs	r3, #0
  40209c:	64a3      	str	r3, [r4, #72]	; 0x48
  40209e:	e7f1      	b.n	402084 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4020a0:	4632      	mov	r2, r6
  4020a2:	4629      	mov	r1, r5
  4020a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4020a8:	4b04      	ldr	r3, [pc, #16]	; (4020bc <vQueueWaitForMessageRestricted+0x54>)
  4020aa:	4798      	blx	r3
  4020ac:	e7ee      	b.n	40208c <vQueueWaitForMessageRestricted+0x24>
  4020ae:	bf00      	nop
  4020b0:	0040156d 	.word	0x0040156d
  4020b4:	004015b9 	.word	0x004015b9
  4020b8:	004019d1 	.word	0x004019d1
  4020bc:	00402945 	.word	0x00402945

004020c0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4020c0:	4b0a      	ldr	r3, [pc, #40]	; (4020ec <prvResetNextTaskUnblockTime+0x2c>)
  4020c2:	681b      	ldr	r3, [r3, #0]
  4020c4:	681b      	ldr	r3, [r3, #0]
  4020c6:	b94b      	cbnz	r3, 4020dc <prvResetNextTaskUnblockTime+0x1c>
  4020c8:	2301      	movs	r3, #1
  4020ca:	b94b      	cbnz	r3, 4020e0 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4020cc:	4b07      	ldr	r3, [pc, #28]	; (4020ec <prvResetNextTaskUnblockTime+0x2c>)
  4020ce:	681b      	ldr	r3, [r3, #0]
  4020d0:	68db      	ldr	r3, [r3, #12]
  4020d2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4020d4:	685a      	ldr	r2, [r3, #4]
  4020d6:	4b06      	ldr	r3, [pc, #24]	; (4020f0 <prvResetNextTaskUnblockTime+0x30>)
  4020d8:	601a      	str	r2, [r3, #0]
  4020da:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4020dc:	2300      	movs	r3, #0
  4020de:	e7f4      	b.n	4020ca <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
  4020e0:	f04f 32ff 	mov.w	r2, #4294967295
  4020e4:	4b02      	ldr	r3, [pc, #8]	; (4020f0 <prvResetNextTaskUnblockTime+0x30>)
  4020e6:	601a      	str	r2, [r3, #0]
  4020e8:	4770      	bx	lr
  4020ea:	bf00      	nop
  4020ec:	2040c248 	.word	0x2040c248
  4020f0:	2040c2f4 	.word	0x2040c2f4

004020f4 <prvDeleteTCB>:
	{
  4020f4:	b538      	push	{r3, r4, r5, lr}
  4020f6:	4605      	mov	r5, r0
			vPortFreeAligned( pxTCB->pxStack );
  4020f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
  4020fa:	4c02      	ldr	r4, [pc, #8]	; (402104 <prvDeleteTCB+0x10>)
  4020fc:	47a0      	blx	r4
		vPortFree( pxTCB );
  4020fe:	4628      	mov	r0, r5
  402100:	47a0      	blx	r4
  402102:	bd38      	pop	{r3, r4, r5, pc}
  402104:	00401831 	.word	0x00401831

00402108 <prvAllocateTCBAndStack>:
{
  402108:	b570      	push	{r4, r5, r6, lr}
  40210a:	4606      	mov	r6, r0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40210c:	460c      	mov	r4, r1
  40210e:	b919      	cbnz	r1, 402118 <prvAllocateTCBAndStack+0x10>
  402110:	0080      	lsls	r0, r0, #2
  402112:	4b0c      	ldr	r3, [pc, #48]	; (402144 <prvAllocateTCBAndStack+0x3c>)
  402114:	4798      	blx	r3
  402116:	4604      	mov	r4, r0
		if( pxStack != NULL )
  402118:	b18c      	cbz	r4, 40213e <prvAllocateTCBAndStack+0x36>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40211a:	2058      	movs	r0, #88	; 0x58
  40211c:	4b09      	ldr	r3, [pc, #36]	; (402144 <prvAllocateTCBAndStack+0x3c>)
  40211e:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402120:	4605      	mov	r5, r0
  402122:	b140      	cbz	r0, 402136 <prvAllocateTCBAndStack+0x2e>
				pxNewTCB->pxStack = pxStack;
  402124:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
  402126:	b125      	cbz	r5, 402132 <prvAllocateTCBAndStack+0x2a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402128:	00b2      	lsls	r2, r6, #2
  40212a:	21a5      	movs	r1, #165	; 0xa5
  40212c:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40212e:	4b06      	ldr	r3, [pc, #24]	; (402148 <prvAllocateTCBAndStack+0x40>)
  402130:	4798      	blx	r3
}
  402132:	4628      	mov	r0, r5
  402134:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
  402136:	4620      	mov	r0, r4
  402138:	4b04      	ldr	r3, [pc, #16]	; (40214c <prvAllocateTCBAndStack+0x44>)
  40213a:	4798      	blx	r3
  40213c:	e7f3      	b.n	402126 <prvAllocateTCBAndStack+0x1e>
			pxNewTCB = NULL;
  40213e:	2500      	movs	r5, #0
  402140:	e7f1      	b.n	402126 <prvAllocateTCBAndStack+0x1e>
  402142:	bf00      	nop
  402144:	004017bd 	.word	0x004017bd
  402148:	0041e8ed 	.word	0x0041e8ed
  40214c:	00401831 	.word	0x00401831

00402150 <prvInitialiseTCBVariables>:
{
  402150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402152:	4604      	mov	r4, r0
  402154:	4615      	mov	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402156:	2300      	movs	r3, #0
  402158:	2b09      	cmp	r3, #9
  40215a:	d918      	bls.n	40218e <prvInitialiseTCBVariables+0x3e>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40215c:	2300      	movs	r3, #0
  40215e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  402162:	2d04      	cmp	r5, #4
  402164:	d900      	bls.n	402168 <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  402166:	2504      	movs	r5, #4
	pxTCB->uxPriority = uxPriority;
  402168:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40216a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  40216c:	2600      	movs	r6, #0
  40216e:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402170:	1d20      	adds	r0, r4, #4
  402172:	4f0b      	ldr	r7, [pc, #44]	; (4021a0 <prvInitialiseTCBVariables+0x50>)
  402174:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402176:	f104 0018 	add.w	r0, r4, #24
  40217a:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40217c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40217e:	f1c5 0505 	rsb	r5, r5, #5
  402182:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402184:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402186:	6526      	str	r6, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402188:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
  40218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40218e:	5cc8      	ldrb	r0, [r1, r3]
  402190:	18e2      	adds	r2, r4, r3
  402192:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402196:	5cca      	ldrb	r2, [r1, r3]
  402198:	2a00      	cmp	r2, #0
  40219a:	d0df      	beq.n	40215c <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40219c:	3301      	adds	r3, #1
  40219e:	e7db      	b.n	402158 <prvInitialiseTCBVariables+0x8>
  4021a0:	00401437 	.word	0x00401437

004021a4 <prvInitialiseTaskLists>:
{
  4021a4:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4021a6:	2400      	movs	r4, #0
  4021a8:	2c04      	cmp	r4, #4
  4021aa:	d911      	bls.n	4021d0 <prvInitialiseTaskLists+0x2c>
	vListInitialise( &xDelayedTaskList1 );
  4021ac:	4e0c      	ldr	r6, [pc, #48]	; (4021e0 <prvInitialiseTaskLists+0x3c>)
  4021ae:	4630      	mov	r0, r6
  4021b0:	4c0c      	ldr	r4, [pc, #48]	; (4021e4 <prvInitialiseTaskLists+0x40>)
  4021b2:	47a0      	blx	r4
	vListInitialise( &xDelayedTaskList2 );
  4021b4:	4d0c      	ldr	r5, [pc, #48]	; (4021e8 <prvInitialiseTaskLists+0x44>)
  4021b6:	4628      	mov	r0, r5
  4021b8:	47a0      	blx	r4
	vListInitialise( &xPendingReadyList );
  4021ba:	480c      	ldr	r0, [pc, #48]	; (4021ec <prvInitialiseTaskLists+0x48>)
  4021bc:	47a0      	blx	r4
		vListInitialise( &xTasksWaitingTermination );
  4021be:	480c      	ldr	r0, [pc, #48]	; (4021f0 <prvInitialiseTaskLists+0x4c>)
  4021c0:	47a0      	blx	r4
		vListInitialise( &xSuspendedTaskList );
  4021c2:	480c      	ldr	r0, [pc, #48]	; (4021f4 <prvInitialiseTaskLists+0x50>)
  4021c4:	47a0      	blx	r4
	pxDelayedTaskList = &xDelayedTaskList1;
  4021c6:	4b0c      	ldr	r3, [pc, #48]	; (4021f8 <prvInitialiseTaskLists+0x54>)
  4021c8:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4021ca:	4b0c      	ldr	r3, [pc, #48]	; (4021fc <prvInitialiseTaskLists+0x58>)
  4021cc:	601d      	str	r5, [r3, #0]
  4021ce:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4021d0:	2014      	movs	r0, #20
  4021d2:	4b0b      	ldr	r3, [pc, #44]	; (402200 <prvInitialiseTaskLists+0x5c>)
  4021d4:	fb00 3004 	mla	r0, r0, r4, r3
  4021d8:	4b02      	ldr	r3, [pc, #8]	; (4021e4 <prvInitialiseTaskLists+0x40>)
  4021da:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4021dc:	3401      	adds	r4, #1
  4021de:	e7e3      	b.n	4021a8 <prvInitialiseTaskLists+0x4>
  4021e0:	2040c2cc 	.word	0x2040c2cc
  4021e4:	00401421 	.word	0x00401421
  4021e8:	2040c2e0 	.word	0x2040c2e0
  4021ec:	2040c2fc 	.word	0x2040c2fc
  4021f0:	2040c328 	.word	0x2040c328
  4021f4:	2040c314 	.word	0x2040c314
  4021f8:	2040c248 	.word	0x2040c248
  4021fc:	2040c24c 	.word	0x2040c24c
  402200:	2040c250 	.word	0x2040c250

00402204 <prvAddCurrentTaskToDelayedList>:
{
  402204:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402206:	4b0f      	ldr	r3, [pc, #60]	; (402244 <prvAddCurrentTaskToDelayedList+0x40>)
  402208:	681b      	ldr	r3, [r3, #0]
  40220a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  40220c:	4b0e      	ldr	r3, [pc, #56]	; (402248 <prvAddCurrentTaskToDelayedList+0x44>)
  40220e:	681b      	ldr	r3, [r3, #0]
  402210:	4298      	cmp	r0, r3
  402212:	d30e      	bcc.n	402232 <prvAddCurrentTaskToDelayedList+0x2e>
  402214:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402216:	4b0d      	ldr	r3, [pc, #52]	; (40224c <prvAddCurrentTaskToDelayedList+0x48>)
  402218:	6818      	ldr	r0, [r3, #0]
  40221a:	4b0a      	ldr	r3, [pc, #40]	; (402244 <prvAddCurrentTaskToDelayedList+0x40>)
  40221c:	6819      	ldr	r1, [r3, #0]
  40221e:	3104      	adds	r1, #4
  402220:	4b0b      	ldr	r3, [pc, #44]	; (402250 <prvAddCurrentTaskToDelayedList+0x4c>)
  402222:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402224:	4b0b      	ldr	r3, [pc, #44]	; (402254 <prvAddCurrentTaskToDelayedList+0x50>)
  402226:	681b      	ldr	r3, [r3, #0]
  402228:	429c      	cmp	r4, r3
  40222a:	d201      	bcs.n	402230 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40222c:	4b09      	ldr	r3, [pc, #36]	; (402254 <prvAddCurrentTaskToDelayedList+0x50>)
  40222e:	601c      	str	r4, [r3, #0]
  402230:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402232:	4b09      	ldr	r3, [pc, #36]	; (402258 <prvAddCurrentTaskToDelayedList+0x54>)
  402234:	6818      	ldr	r0, [r3, #0]
  402236:	4b03      	ldr	r3, [pc, #12]	; (402244 <prvAddCurrentTaskToDelayedList+0x40>)
  402238:	6819      	ldr	r1, [r3, #0]
  40223a:	3104      	adds	r1, #4
  40223c:	4b04      	ldr	r3, [pc, #16]	; (402250 <prvAddCurrentTaskToDelayedList+0x4c>)
  40223e:	4798      	blx	r3
  402240:	bd10      	pop	{r4, pc}
  402242:	bf00      	nop
  402244:	2040c244 	.word	0x2040c244
  402248:	2040c33c 	.word	0x2040c33c
  40224c:	2040c248 	.word	0x2040c248
  402250:	00401455 	.word	0x00401455
  402254:	2040c2f4 	.word	0x2040c2f4
  402258:	2040c24c 	.word	0x2040c24c

0040225c <xTaskGenericCreate>:
{
  40225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402260:	b083      	sub	sp, #12
  402262:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  402264:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	configASSERT( pxTaskCode );
  402268:	b168      	cbz	r0, 402286 <xTaskGenericCreate+0x2a>
  40226a:	4680      	mov	r8, r0
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  40226c:	2f04      	cmp	r7, #4
  40226e:	d915      	bls.n	40229c <xTaskGenericCreate+0x40>
  402270:	f04f 0380 	mov.w	r3, #128	; 0x80
  402274:	b672      	cpsid	i
  402276:	f383 8811 	msr	BASEPRI, r3
  40227a:	f3bf 8f6f 	isb	sy
  40227e:	f3bf 8f4f 	dsb	sy
  402282:	b662      	cpsie	i
  402284:	e7fe      	b.n	402284 <xTaskGenericCreate+0x28>
  402286:	f04f 0380 	mov.w	r3, #128	; 0x80
  40228a:	b672      	cpsid	i
  40228c:	f383 8811 	msr	BASEPRI, r3
  402290:	f3bf 8f6f 	isb	sy
  402294:	f3bf 8f4f 	dsb	sy
  402298:	b662      	cpsie	i
  40229a:	e7fe      	b.n	40229a <xTaskGenericCreate+0x3e>
  40229c:	4699      	mov	r9, r3
  40229e:	4616      	mov	r6, r2
  4022a0:	468a      	mov	sl, r1
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  4022a2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4022a4:	4610      	mov	r0, r2
  4022a6:	4b35      	ldr	r3, [pc, #212]	; (40237c <xTaskGenericCreate+0x120>)
  4022a8:	4798      	blx	r3
	if( pxNewTCB != NULL )
  4022aa:	4604      	mov	r4, r0
  4022ac:	2800      	cmp	r0, #0
  4022ae:	d062      	beq.n	402376 <xTaskGenericCreate+0x11a>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4022b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4022b2:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  4022b6:	4435      	add	r5, r6
  4022b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4022bc:	f023 0507 	bic.w	r5, r3, #7
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  4022c0:	9600      	str	r6, [sp, #0]
  4022c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4022c4:	463a      	mov	r2, r7
  4022c6:	4651      	mov	r1, sl
  4022c8:	4e2d      	ldr	r6, [pc, #180]	; (402380 <xTaskGenericCreate+0x124>)
  4022ca:	47b0      	blx	r6
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4022cc:	464a      	mov	r2, r9
  4022ce:	4641      	mov	r1, r8
  4022d0:	4628      	mov	r0, r5
  4022d2:	4b2c      	ldr	r3, [pc, #176]	; (402384 <xTaskGenericCreate+0x128>)
  4022d4:	4798      	blx	r3
  4022d6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4022d8:	f1bb 0f00 	cmp.w	fp, #0
  4022dc:	d001      	beq.n	4022e2 <xTaskGenericCreate+0x86>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4022de:	f8cb 4000 	str.w	r4, [fp]
		taskENTER_CRITICAL();
  4022e2:	4b29      	ldr	r3, [pc, #164]	; (402388 <xTaskGenericCreate+0x12c>)
  4022e4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4022e6:	4a29      	ldr	r2, [pc, #164]	; (40238c <xTaskGenericCreate+0x130>)
  4022e8:	6813      	ldr	r3, [r2, #0]
  4022ea:	3301      	adds	r3, #1
  4022ec:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4022ee:	4b28      	ldr	r3, [pc, #160]	; (402390 <xTaskGenericCreate+0x134>)
  4022f0:	681b      	ldr	r3, [r3, #0]
  4022f2:	2b00      	cmp	r3, #0
  4022f4:	d133      	bne.n	40235e <xTaskGenericCreate+0x102>
				pxCurrentTCB =  pxNewTCB;
  4022f6:	4b26      	ldr	r3, [pc, #152]	; (402390 <xTaskGenericCreate+0x134>)
  4022f8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4022fa:	6813      	ldr	r3, [r2, #0]
  4022fc:	2b01      	cmp	r3, #1
  4022fe:	d101      	bne.n	402304 <xTaskGenericCreate+0xa8>
					prvInitialiseTaskLists();
  402300:	4b24      	ldr	r3, [pc, #144]	; (402394 <xTaskGenericCreate+0x138>)
  402302:	4798      	blx	r3
			uxTaskNumber++;
  402304:	4a24      	ldr	r2, [pc, #144]	; (402398 <xTaskGenericCreate+0x13c>)
  402306:	6813      	ldr	r3, [r2, #0]
  402308:	3301      	adds	r3, #1
  40230a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40230c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40230e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402310:	2501      	movs	r5, #1
  402312:	fa05 f203 	lsl.w	r2, r5, r3
  402316:	4921      	ldr	r1, [pc, #132]	; (40239c <xTaskGenericCreate+0x140>)
  402318:	6808      	ldr	r0, [r1, #0]
  40231a:	4302      	orrs	r2, r0
  40231c:	600a      	str	r2, [r1, #0]
  40231e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402322:	009a      	lsls	r2, r3, #2
  402324:	1d21      	adds	r1, r4, #4
  402326:	481e      	ldr	r0, [pc, #120]	; (4023a0 <xTaskGenericCreate+0x144>)
  402328:	4410      	add	r0, r2
  40232a:	4b1e      	ldr	r3, [pc, #120]	; (4023a4 <xTaskGenericCreate+0x148>)
  40232c:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40232e:	4b1e      	ldr	r3, [pc, #120]	; (4023a8 <xTaskGenericCreate+0x14c>)
  402330:	4798      	blx	r3
			xReturn = pdPASS;
  402332:	4628      	mov	r0, r5
	if( xReturn == pdPASS )
  402334:	2801      	cmp	r0, #1
  402336:	d10f      	bne.n	402358 <xTaskGenericCreate+0xfc>
		if( xSchedulerRunning != pdFALSE )
  402338:	4b1c      	ldr	r3, [pc, #112]	; (4023ac <xTaskGenericCreate+0x150>)
  40233a:	681b      	ldr	r3, [r3, #0]
  40233c:	b163      	cbz	r3, 402358 <xTaskGenericCreate+0xfc>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40233e:	4b14      	ldr	r3, [pc, #80]	; (402390 <xTaskGenericCreate+0x134>)
  402340:	681b      	ldr	r3, [r3, #0]
  402342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402344:	429f      	cmp	r7, r3
  402346:	d907      	bls.n	402358 <xTaskGenericCreate+0xfc>
				taskYIELD_IF_USING_PREEMPTION();
  402348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40234c:	4b18      	ldr	r3, [pc, #96]	; (4023b0 <xTaskGenericCreate+0x154>)
  40234e:	601a      	str	r2, [r3, #0]
  402350:	f3bf 8f4f 	dsb	sy
  402354:	f3bf 8f6f 	isb	sy
}
  402358:	b003      	add	sp, #12
  40235a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( xSchedulerRunning == pdFALSE )
  40235e:	4b13      	ldr	r3, [pc, #76]	; (4023ac <xTaskGenericCreate+0x150>)
  402360:	681b      	ldr	r3, [r3, #0]
  402362:	2b00      	cmp	r3, #0
  402364:	d1ce      	bne.n	402304 <xTaskGenericCreate+0xa8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402366:	4b0a      	ldr	r3, [pc, #40]	; (402390 <xTaskGenericCreate+0x134>)
  402368:	681b      	ldr	r3, [r3, #0]
  40236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40236c:	429f      	cmp	r7, r3
  40236e:	d3c9      	bcc.n	402304 <xTaskGenericCreate+0xa8>
						pxCurrentTCB = pxNewTCB;
  402370:	4b07      	ldr	r3, [pc, #28]	; (402390 <xTaskGenericCreate+0x134>)
  402372:	601c      	str	r4, [r3, #0]
  402374:	e7c6      	b.n	402304 <xTaskGenericCreate+0xa8>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402376:	f04f 30ff 	mov.w	r0, #4294967295
  40237a:	e7db      	b.n	402334 <xTaskGenericCreate+0xd8>
  40237c:	00402109 	.word	0x00402109
  402380:	00402151 	.word	0x00402151
  402384:	00401521 	.word	0x00401521
  402388:	0040156d 	.word	0x0040156d
  40238c:	2040c2b4 	.word	0x2040c2b4
  402390:	2040c244 	.word	0x2040c244
  402394:	004021a5 	.word	0x004021a5
  402398:	2040c2c0 	.word	0x2040c2c0
  40239c:	2040c2c8 	.word	0x2040c2c8
  4023a0:	2040c250 	.word	0x2040c250
  4023a4:	0040143d 	.word	0x0040143d
  4023a8:	004015b9 	.word	0x004015b9
  4023ac:	2040c310 	.word	0x2040c310
  4023b0:	e000ed04 	.word	0xe000ed04

004023b4 <vTaskStartScheduler>:
{
  4023b4:	b510      	push	{r4, lr}
  4023b6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4023b8:	2300      	movs	r3, #0
  4023ba:	9303      	str	r3, [sp, #12]
  4023bc:	9302      	str	r3, [sp, #8]
  4023be:	9301      	str	r3, [sp, #4]
  4023c0:	9300      	str	r3, [sp, #0]
  4023c2:	2282      	movs	r2, #130	; 0x82
  4023c4:	4917      	ldr	r1, [pc, #92]	; (402424 <vTaskStartScheduler+0x70>)
  4023c6:	4818      	ldr	r0, [pc, #96]	; (402428 <vTaskStartScheduler+0x74>)
  4023c8:	4c18      	ldr	r4, [pc, #96]	; (40242c <vTaskStartScheduler+0x78>)
  4023ca:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4023cc:	2801      	cmp	r0, #1
  4023ce:	d00d      	beq.n	4023ec <vTaskStartScheduler+0x38>
	if( xReturn == pdPASS )
  4023d0:	2801      	cmp	r0, #1
  4023d2:	d00e      	beq.n	4023f2 <vTaskStartScheduler+0x3e>
		configASSERT( xReturn );
  4023d4:	bb18      	cbnz	r0, 40241e <vTaskStartScheduler+0x6a>
  4023d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023da:	b672      	cpsid	i
  4023dc:	f383 8811 	msr	BASEPRI, r3
  4023e0:	f3bf 8f6f 	isb	sy
  4023e4:	f3bf 8f4f 	dsb	sy
  4023e8:	b662      	cpsie	i
  4023ea:	e7fe      	b.n	4023ea <vTaskStartScheduler+0x36>
			xReturn = xTimerCreateTimerTask();
  4023ec:	4b10      	ldr	r3, [pc, #64]	; (402430 <vTaskStartScheduler+0x7c>)
  4023ee:	4798      	blx	r3
  4023f0:	e7ee      	b.n	4023d0 <vTaskStartScheduler+0x1c>
  4023f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023f6:	b672      	cpsid	i
  4023f8:	f383 8811 	msr	BASEPRI, r3
  4023fc:	f3bf 8f6f 	isb	sy
  402400:	f3bf 8f4f 	dsb	sy
  402404:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402406:	f04f 32ff 	mov.w	r2, #4294967295
  40240a:	4b0a      	ldr	r3, [pc, #40]	; (402434 <vTaskStartScheduler+0x80>)
  40240c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40240e:	2201      	movs	r2, #1
  402410:	4b09      	ldr	r3, [pc, #36]	; (402438 <vTaskStartScheduler+0x84>)
  402412:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402414:	2200      	movs	r2, #0
  402416:	4b09      	ldr	r3, [pc, #36]	; (40243c <vTaskStartScheduler+0x88>)
  402418:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40241a:	4b09      	ldr	r3, [pc, #36]	; (402440 <vTaskStartScheduler+0x8c>)
  40241c:	4798      	blx	r3
}
  40241e:	b004      	add	sp, #16
  402420:	bd10      	pop	{r4, pc}
  402422:	bf00      	nop
  402424:	0042124c 	.word	0x0042124c
  402428:	004027c1 	.word	0x004027c1
  40242c:	0040225d 	.word	0x0040225d
  402430:	00402dd1 	.word	0x00402dd1
  402434:	2040c2f4 	.word	0x2040c2f4
  402438:	2040c310 	.word	0x2040c310
  40243c:	2040c33c 	.word	0x2040c33c
  402440:	004016a1 	.word	0x004016a1

00402444 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402444:	4a02      	ldr	r2, [pc, #8]	; (402450 <vTaskSuspendAll+0xc>)
  402446:	6813      	ldr	r3, [r2, #0]
  402448:	3301      	adds	r3, #1
  40244a:	6013      	str	r3, [r2, #0]
  40244c:	4770      	bx	lr
  40244e:	bf00      	nop
  402450:	2040c2bc 	.word	0x2040c2bc

00402454 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402454:	4b01      	ldr	r3, [pc, #4]	; (40245c <xTaskGetTickCount+0x8>)
  402456:	6818      	ldr	r0, [r3, #0]
}
  402458:	4770      	bx	lr
  40245a:	bf00      	nop
  40245c:	2040c33c 	.word	0x2040c33c

00402460 <xTaskIncrementTick>:
{
  402460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402462:	4b41      	ldr	r3, [pc, #260]	; (402568 <xTaskIncrementTick+0x108>)
  402464:	681b      	ldr	r3, [r3, #0]
  402466:	2b00      	cmp	r3, #0
  402468:	d175      	bne.n	402556 <xTaskIncrementTick+0xf6>
		++xTickCount;
  40246a:	4b40      	ldr	r3, [pc, #256]	; (40256c <xTaskIncrementTick+0x10c>)
  40246c:	681a      	ldr	r2, [r3, #0]
  40246e:	3201      	adds	r2, #1
  402470:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402472:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402474:	b9d6      	cbnz	r6, 4024ac <xTaskIncrementTick+0x4c>
				taskSWITCH_DELAYED_LISTS();
  402476:	4b3e      	ldr	r3, [pc, #248]	; (402570 <xTaskIncrementTick+0x110>)
  402478:	681b      	ldr	r3, [r3, #0]
  40247a:	681b      	ldr	r3, [r3, #0]
  40247c:	b153      	cbz	r3, 402494 <xTaskIncrementTick+0x34>
  40247e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402482:	b672      	cpsid	i
  402484:	f383 8811 	msr	BASEPRI, r3
  402488:	f3bf 8f6f 	isb	sy
  40248c:	f3bf 8f4f 	dsb	sy
  402490:	b662      	cpsie	i
  402492:	e7fe      	b.n	402492 <xTaskIncrementTick+0x32>
  402494:	4a36      	ldr	r2, [pc, #216]	; (402570 <xTaskIncrementTick+0x110>)
  402496:	6811      	ldr	r1, [r2, #0]
  402498:	4b36      	ldr	r3, [pc, #216]	; (402574 <xTaskIncrementTick+0x114>)
  40249a:	6818      	ldr	r0, [r3, #0]
  40249c:	6010      	str	r0, [r2, #0]
  40249e:	6019      	str	r1, [r3, #0]
  4024a0:	4a35      	ldr	r2, [pc, #212]	; (402578 <xTaskIncrementTick+0x118>)
  4024a2:	6813      	ldr	r3, [r2, #0]
  4024a4:	3301      	adds	r3, #1
  4024a6:	6013      	str	r3, [r2, #0]
  4024a8:	4b34      	ldr	r3, [pc, #208]	; (40257c <xTaskIncrementTick+0x11c>)
  4024aa:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4024ac:	4b34      	ldr	r3, [pc, #208]	; (402580 <xTaskIncrementTick+0x120>)
  4024ae:	681b      	ldr	r3, [r3, #0]
  4024b0:	429e      	cmp	r6, r3
  4024b2:	d244      	bcs.n	40253e <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
  4024b4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4024b6:	4b33      	ldr	r3, [pc, #204]	; (402584 <xTaskIncrementTick+0x124>)
  4024b8:	681b      	ldr	r3, [r3, #0]
  4024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4024bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024c0:	009a      	lsls	r2, r3, #2
  4024c2:	4b31      	ldr	r3, [pc, #196]	; (402588 <xTaskIncrementTick+0x128>)
  4024c4:	589b      	ldr	r3, [r3, r2]
  4024c6:	2b01      	cmp	r3, #1
  4024c8:	d900      	bls.n	4024cc <xTaskIncrementTick+0x6c>
				xSwitchRequired = pdTRUE;
  4024ca:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4024cc:	4b2f      	ldr	r3, [pc, #188]	; (40258c <xTaskIncrementTick+0x12c>)
  4024ce:	681b      	ldr	r3, [r3, #0]
  4024d0:	b90b      	cbnz	r3, 4024d6 <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  4024d2:	4b2f      	ldr	r3, [pc, #188]	; (402590 <xTaskIncrementTick+0x130>)
  4024d4:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4024d6:	4b2f      	ldr	r3, [pc, #188]	; (402594 <xTaskIncrementTick+0x134>)
  4024d8:	681b      	ldr	r3, [r3, #0]
  4024da:	b103      	cbz	r3, 4024de <xTaskIncrementTick+0x7e>
			xSwitchRequired = pdTRUE;
  4024dc:	2401      	movs	r4, #1
}
  4024de:	4620      	mov	r0, r4
  4024e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
								xSwitchRequired = pdTRUE;
  4024e2:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4024e4:	4b22      	ldr	r3, [pc, #136]	; (402570 <xTaskIncrementTick+0x110>)
  4024e6:	681b      	ldr	r3, [r3, #0]
  4024e8:	681b      	ldr	r3, [r3, #0]
  4024ea:	b353      	cbz	r3, 402542 <xTaskIncrementTick+0xe2>
  4024ec:	2300      	movs	r3, #0
  4024ee:	bb53      	cbnz	r3, 402546 <xTaskIncrementTick+0xe6>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4024f0:	4b1f      	ldr	r3, [pc, #124]	; (402570 <xTaskIncrementTick+0x110>)
  4024f2:	681b      	ldr	r3, [r3, #0]
  4024f4:	68db      	ldr	r3, [r3, #12]
  4024f6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4024f8:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4024fa:	429e      	cmp	r6, r3
  4024fc:	d328      	bcc.n	402550 <xTaskIncrementTick+0xf0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4024fe:	1d2f      	adds	r7, r5, #4
  402500:	4638      	mov	r0, r7
  402502:	4b25      	ldr	r3, [pc, #148]	; (402598 <xTaskIncrementTick+0x138>)
  402504:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402506:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402508:	b11b      	cbz	r3, 402512 <xTaskIncrementTick+0xb2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40250a:	f105 0018 	add.w	r0, r5, #24
  40250e:	4b22      	ldr	r3, [pc, #136]	; (402598 <xTaskIncrementTick+0x138>)
  402510:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  402512:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  402514:	2201      	movs	r2, #1
  402516:	409a      	lsls	r2, r3
  402518:	4920      	ldr	r1, [pc, #128]	; (40259c <xTaskIncrementTick+0x13c>)
  40251a:	6808      	ldr	r0, [r1, #0]
  40251c:	4302      	orrs	r2, r0
  40251e:	600a      	str	r2, [r1, #0]
  402520:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402524:	009a      	lsls	r2, r3, #2
  402526:	4639      	mov	r1, r7
  402528:	4817      	ldr	r0, [pc, #92]	; (402588 <xTaskIncrementTick+0x128>)
  40252a:	4410      	add	r0, r2
  40252c:	4b1c      	ldr	r3, [pc, #112]	; (4025a0 <xTaskIncrementTick+0x140>)
  40252e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402530:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402532:	4b14      	ldr	r3, [pc, #80]	; (402584 <xTaskIncrementTick+0x124>)
  402534:	681b      	ldr	r3, [r3, #0]
  402536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402538:	429a      	cmp	r2, r3
  40253a:	d2d2      	bcs.n	4024e2 <xTaskIncrementTick+0x82>
  40253c:	e7d2      	b.n	4024e4 <xTaskIncrementTick+0x84>
  40253e:	2400      	movs	r4, #0
  402540:	e7d0      	b.n	4024e4 <xTaskIncrementTick+0x84>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402542:	2301      	movs	r3, #1
  402544:	e7d3      	b.n	4024ee <xTaskIncrementTick+0x8e>
						xNextTaskUnblockTime = portMAX_DELAY;
  402546:	f04f 32ff 	mov.w	r2, #4294967295
  40254a:	4b0d      	ldr	r3, [pc, #52]	; (402580 <xTaskIncrementTick+0x120>)
  40254c:	601a      	str	r2, [r3, #0]
						break;
  40254e:	e7b2      	b.n	4024b6 <xTaskIncrementTick+0x56>
							xNextTaskUnblockTime = xItemValue;
  402550:	4a0b      	ldr	r2, [pc, #44]	; (402580 <xTaskIncrementTick+0x120>)
  402552:	6013      	str	r3, [r2, #0]
							break;
  402554:	e7af      	b.n	4024b6 <xTaskIncrementTick+0x56>
		++uxPendedTicks;
  402556:	4a0d      	ldr	r2, [pc, #52]	; (40258c <xTaskIncrementTick+0x12c>)
  402558:	6813      	ldr	r3, [r2, #0]
  40255a:	3301      	adds	r3, #1
  40255c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40255e:	4b0c      	ldr	r3, [pc, #48]	; (402590 <xTaskIncrementTick+0x130>)
  402560:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402562:	2400      	movs	r4, #0
  402564:	e7b7      	b.n	4024d6 <xTaskIncrementTick+0x76>
  402566:	bf00      	nop
  402568:	2040c2bc 	.word	0x2040c2bc
  40256c:	2040c33c 	.word	0x2040c33c
  402570:	2040c248 	.word	0x2040c248
  402574:	2040c24c 	.word	0x2040c24c
  402578:	2040c2f8 	.word	0x2040c2f8
  40257c:	004020c1 	.word	0x004020c1
  402580:	2040c2f4 	.word	0x2040c2f4
  402584:	2040c244 	.word	0x2040c244
  402588:	2040c250 	.word	0x2040c250
  40258c:	2040c2b8 	.word	0x2040c2b8
  402590:	0041d3d5 	.word	0x0041d3d5
  402594:	2040c340 	.word	0x2040c340
  402598:	00401489 	.word	0x00401489
  40259c:	2040c2c8 	.word	0x2040c2c8
  4025a0:	0040143d 	.word	0x0040143d

004025a4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  4025a4:	4b35      	ldr	r3, [pc, #212]	; (40267c <xTaskResumeAll+0xd8>)
  4025a6:	681b      	ldr	r3, [r3, #0]
  4025a8:	b953      	cbnz	r3, 4025c0 <xTaskResumeAll+0x1c>
  4025aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025ae:	b672      	cpsid	i
  4025b0:	f383 8811 	msr	BASEPRI, r3
  4025b4:	f3bf 8f6f 	isb	sy
  4025b8:	f3bf 8f4f 	dsb	sy
  4025bc:	b662      	cpsie	i
  4025be:	e7fe      	b.n	4025be <xTaskResumeAll+0x1a>
{
  4025c0:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
  4025c2:	4b2f      	ldr	r3, [pc, #188]	; (402680 <xTaskResumeAll+0xdc>)
  4025c4:	4798      	blx	r3
		--uxSchedulerSuspended;
  4025c6:	4b2d      	ldr	r3, [pc, #180]	; (40267c <xTaskResumeAll+0xd8>)
  4025c8:	681a      	ldr	r2, [r3, #0]
  4025ca:	3a01      	subs	r2, #1
  4025cc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4025ce:	681b      	ldr	r3, [r3, #0]
  4025d0:	2b00      	cmp	r3, #0
  4025d2:	d14f      	bne.n	402674 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4025d4:	4b2b      	ldr	r3, [pc, #172]	; (402684 <xTaskResumeAll+0xe0>)
  4025d6:	681b      	ldr	r3, [r3, #0]
  4025d8:	bb1b      	cbnz	r3, 402622 <xTaskResumeAll+0x7e>
BaseType_t xAlreadyYielded = pdFALSE;
  4025da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4025dc:	4b2a      	ldr	r3, [pc, #168]	; (402688 <xTaskResumeAll+0xe4>)
  4025de:	4798      	blx	r3
}
  4025e0:	4620      	mov	r0, r4
  4025e2:	bd70      	pop	{r4, r5, r6, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4025e4:	4b29      	ldr	r3, [pc, #164]	; (40268c <xTaskResumeAll+0xe8>)
  4025e6:	68db      	ldr	r3, [r3, #12]
  4025e8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4025ea:	f104 0018 	add.w	r0, r4, #24
  4025ee:	4e28      	ldr	r6, [pc, #160]	; (402690 <xTaskResumeAll+0xec>)
  4025f0:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4025f2:	1d25      	adds	r5, r4, #4
  4025f4:	4628      	mov	r0, r5
  4025f6:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4025f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4025fa:	2201      	movs	r2, #1
  4025fc:	409a      	lsls	r2, r3
  4025fe:	4925      	ldr	r1, [pc, #148]	; (402694 <xTaskResumeAll+0xf0>)
  402600:	6808      	ldr	r0, [r1, #0]
  402602:	4302      	orrs	r2, r0
  402604:	600a      	str	r2, [r1, #0]
  402606:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40260a:	009a      	lsls	r2, r3, #2
  40260c:	4629      	mov	r1, r5
  40260e:	4822      	ldr	r0, [pc, #136]	; (402698 <xTaskResumeAll+0xf4>)
  402610:	4410      	add	r0, r2
  402612:	4b22      	ldr	r3, [pc, #136]	; (40269c <xTaskResumeAll+0xf8>)
  402614:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402616:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402618:	4b21      	ldr	r3, [pc, #132]	; (4026a0 <xTaskResumeAll+0xfc>)
  40261a:	681b      	ldr	r3, [r3, #0]
  40261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40261e:	429a      	cmp	r2, r3
  402620:	d214      	bcs.n	40264c <xTaskResumeAll+0xa8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402622:	4b1a      	ldr	r3, [pc, #104]	; (40268c <xTaskResumeAll+0xe8>)
  402624:	681b      	ldr	r3, [r3, #0]
  402626:	2b00      	cmp	r3, #0
  402628:	d1dc      	bne.n	4025e4 <xTaskResumeAll+0x40>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40262a:	4b1e      	ldr	r3, [pc, #120]	; (4026a4 <xTaskResumeAll+0x100>)
  40262c:	681b      	ldr	r3, [r3, #0]
  40262e:	b9ab      	cbnz	r3, 40265c <xTaskResumeAll+0xb8>
				if( xYieldPending == pdTRUE )
  402630:	4b1d      	ldr	r3, [pc, #116]	; (4026a8 <xTaskResumeAll+0x104>)
  402632:	681b      	ldr	r3, [r3, #0]
  402634:	2b01      	cmp	r3, #1
  402636:	d11f      	bne.n	402678 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
  402638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40263c:	4b1b      	ldr	r3, [pc, #108]	; (4026ac <xTaskResumeAll+0x108>)
  40263e:	601a      	str	r2, [r3, #0]
  402640:	f3bf 8f4f 	dsb	sy
  402644:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402648:	2401      	movs	r4, #1
  40264a:	e7c7      	b.n	4025dc <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
  40264c:	2201      	movs	r2, #1
  40264e:	4b16      	ldr	r3, [pc, #88]	; (4026a8 <xTaskResumeAll+0x104>)
  402650:	601a      	str	r2, [r3, #0]
  402652:	e7e6      	b.n	402622 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402654:	4a13      	ldr	r2, [pc, #76]	; (4026a4 <xTaskResumeAll+0x100>)
  402656:	6813      	ldr	r3, [r2, #0]
  402658:	3b01      	subs	r3, #1
  40265a:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40265c:	4b11      	ldr	r3, [pc, #68]	; (4026a4 <xTaskResumeAll+0x100>)
  40265e:	681b      	ldr	r3, [r3, #0]
  402660:	2b00      	cmp	r3, #0
  402662:	d0e5      	beq.n	402630 <xTaskResumeAll+0x8c>
						if( xTaskIncrementTick() != pdFALSE )
  402664:	4b12      	ldr	r3, [pc, #72]	; (4026b0 <xTaskResumeAll+0x10c>)
  402666:	4798      	blx	r3
  402668:	2800      	cmp	r0, #0
  40266a:	d0f3      	beq.n	402654 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
  40266c:	2201      	movs	r2, #1
  40266e:	4b0e      	ldr	r3, [pc, #56]	; (4026a8 <xTaskResumeAll+0x104>)
  402670:	601a      	str	r2, [r3, #0]
  402672:	e7ef      	b.n	402654 <xTaskResumeAll+0xb0>
BaseType_t xAlreadyYielded = pdFALSE;
  402674:	2400      	movs	r4, #0
  402676:	e7b1      	b.n	4025dc <xTaskResumeAll+0x38>
  402678:	2400      	movs	r4, #0
  40267a:	e7af      	b.n	4025dc <xTaskResumeAll+0x38>
  40267c:	2040c2bc 	.word	0x2040c2bc
  402680:	0040156d 	.word	0x0040156d
  402684:	2040c2b4 	.word	0x2040c2b4
  402688:	004015b9 	.word	0x004015b9
  40268c:	2040c2fc 	.word	0x2040c2fc
  402690:	00401489 	.word	0x00401489
  402694:	2040c2c8 	.word	0x2040c2c8
  402698:	2040c250 	.word	0x2040c250
  40269c:	0040143d 	.word	0x0040143d
  4026a0:	2040c244 	.word	0x2040c244
  4026a4:	2040c2b8 	.word	0x2040c2b8
  4026a8:	2040c340 	.word	0x2040c340
  4026ac:	e000ed04 	.word	0xe000ed04
  4026b0:	00402461 	.word	0x00402461

004026b4 <vTaskDelay>:
	{
  4026b4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4026b6:	2800      	cmp	r0, #0
  4026b8:	d02a      	beq.n	402710 <vTaskDelay+0x5c>
  4026ba:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4026bc:	4b1a      	ldr	r3, [pc, #104]	; (402728 <vTaskDelay+0x74>)
  4026be:	681b      	ldr	r3, [r3, #0]
  4026c0:	b153      	cbz	r3, 4026d8 <vTaskDelay+0x24>
  4026c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026c6:	b672      	cpsid	i
  4026c8:	f383 8811 	msr	BASEPRI, r3
  4026cc:	f3bf 8f6f 	isb	sy
  4026d0:	f3bf 8f4f 	dsb	sy
  4026d4:	b662      	cpsie	i
  4026d6:	e7fe      	b.n	4026d6 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4026d8:	4b14      	ldr	r3, [pc, #80]	; (40272c <vTaskDelay+0x78>)
  4026da:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4026dc:	4b14      	ldr	r3, [pc, #80]	; (402730 <vTaskDelay+0x7c>)
  4026de:	681b      	ldr	r3, [r3, #0]
  4026e0:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4026e2:	4b14      	ldr	r3, [pc, #80]	; (402734 <vTaskDelay+0x80>)
  4026e4:	6818      	ldr	r0, [r3, #0]
  4026e6:	3004      	adds	r0, #4
  4026e8:	4b13      	ldr	r3, [pc, #76]	; (402738 <vTaskDelay+0x84>)
  4026ea:	4798      	blx	r3
  4026ec:	b950      	cbnz	r0, 402704 <vTaskDelay+0x50>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4026ee:	4b11      	ldr	r3, [pc, #68]	; (402734 <vTaskDelay+0x80>)
  4026f0:	681b      	ldr	r3, [r3, #0]
  4026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4026f4:	2301      	movs	r3, #1
  4026f6:	fa03 f202 	lsl.w	r2, r3, r2
  4026fa:	4910      	ldr	r1, [pc, #64]	; (40273c <vTaskDelay+0x88>)
  4026fc:	680b      	ldr	r3, [r1, #0]
  4026fe:	ea23 0302 	bic.w	r3, r3, r2
  402702:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402704:	4620      	mov	r0, r4
  402706:	4b0e      	ldr	r3, [pc, #56]	; (402740 <vTaskDelay+0x8c>)
  402708:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40270a:	4b0e      	ldr	r3, [pc, #56]	; (402744 <vTaskDelay+0x90>)
  40270c:	4798      	blx	r3
  40270e:	e000      	b.n	402712 <vTaskDelay+0x5e>
	BaseType_t xAlreadyYielded = pdFALSE;
  402710:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
  402712:	b938      	cbnz	r0, 402724 <vTaskDelay+0x70>
			portYIELD_WITHIN_API();
  402714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402718:	4b0b      	ldr	r3, [pc, #44]	; (402748 <vTaskDelay+0x94>)
  40271a:	601a      	str	r2, [r3, #0]
  40271c:	f3bf 8f4f 	dsb	sy
  402720:	f3bf 8f6f 	isb	sy
  402724:	bd10      	pop	{r4, pc}
  402726:	bf00      	nop
  402728:	2040c2bc 	.word	0x2040c2bc
  40272c:	00402445 	.word	0x00402445
  402730:	2040c33c 	.word	0x2040c33c
  402734:	2040c244 	.word	0x2040c244
  402738:	00401489 	.word	0x00401489
  40273c:	2040c2c8 	.word	0x2040c2c8
  402740:	00402205 	.word	0x00402205
  402744:	004025a5 	.word	0x004025a5
  402748:	e000ed04 	.word	0xe000ed04

0040274c <prvCheckTasksWaitingTermination>:
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40274c:	4b13      	ldr	r3, [pc, #76]	; (40279c <prvCheckTasksWaitingTermination+0x50>)
  40274e:	681b      	ldr	r3, [r3, #0]
  402750:	b313      	cbz	r3, 402798 <prvCheckTasksWaitingTermination+0x4c>
{
  402752:	b510      	push	{r4, lr}
			vTaskSuspendAll();
  402754:	4b12      	ldr	r3, [pc, #72]	; (4027a0 <prvCheckTasksWaitingTermination+0x54>)
  402756:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402758:	4b12      	ldr	r3, [pc, #72]	; (4027a4 <prvCheckTasksWaitingTermination+0x58>)
  40275a:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
  40275c:	4b12      	ldr	r3, [pc, #72]	; (4027a8 <prvCheckTasksWaitingTermination+0x5c>)
  40275e:	4798      	blx	r3
			if( xListIsEmpty == pdFALSE )
  402760:	b924      	cbnz	r4, 40276c <prvCheckTasksWaitingTermination+0x20>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402762:	4b0e      	ldr	r3, [pc, #56]	; (40279c <prvCheckTasksWaitingTermination+0x50>)
  402764:	681b      	ldr	r3, [r3, #0]
  402766:	2b00      	cmp	r3, #0
  402768:	d1f4      	bne.n	402754 <prvCheckTasksWaitingTermination+0x8>
}
  40276a:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
  40276c:	4b0f      	ldr	r3, [pc, #60]	; (4027ac <prvCheckTasksWaitingTermination+0x60>)
  40276e:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402770:	4b0c      	ldr	r3, [pc, #48]	; (4027a4 <prvCheckTasksWaitingTermination+0x58>)
  402772:	68db      	ldr	r3, [r3, #12]
  402774:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402776:	1d20      	adds	r0, r4, #4
  402778:	4b0d      	ldr	r3, [pc, #52]	; (4027b0 <prvCheckTasksWaitingTermination+0x64>)
  40277a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40277c:	4a0d      	ldr	r2, [pc, #52]	; (4027b4 <prvCheckTasksWaitingTermination+0x68>)
  40277e:	6813      	ldr	r3, [r2, #0]
  402780:	3b01      	subs	r3, #1
  402782:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402784:	4a05      	ldr	r2, [pc, #20]	; (40279c <prvCheckTasksWaitingTermination+0x50>)
  402786:	6813      	ldr	r3, [r2, #0]
  402788:	3b01      	subs	r3, #1
  40278a:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
  40278c:	4b0a      	ldr	r3, [pc, #40]	; (4027b8 <prvCheckTasksWaitingTermination+0x6c>)
  40278e:	4798      	blx	r3
				prvDeleteTCB( pxTCB );
  402790:	4620      	mov	r0, r4
  402792:	4b0a      	ldr	r3, [pc, #40]	; (4027bc <prvCheckTasksWaitingTermination+0x70>)
  402794:	4798      	blx	r3
  402796:	e7e4      	b.n	402762 <prvCheckTasksWaitingTermination+0x16>
  402798:	4770      	bx	lr
  40279a:	bf00      	nop
  40279c:	2040c2c4 	.word	0x2040c2c4
  4027a0:	00402445 	.word	0x00402445
  4027a4:	2040c328 	.word	0x2040c328
  4027a8:	004025a5 	.word	0x004025a5
  4027ac:	0040156d 	.word	0x0040156d
  4027b0:	00401489 	.word	0x00401489
  4027b4:	2040c2b4 	.word	0x2040c2b4
  4027b8:	004015b9 	.word	0x004015b9
  4027bc:	004020f5 	.word	0x004020f5

004027c0 <prvIdleTask>:
{
  4027c0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
  4027c2:	4b07      	ldr	r3, [pc, #28]	; (4027e0 <prvIdleTask+0x20>)
  4027c4:	4798      	blx	r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4027c6:	4b07      	ldr	r3, [pc, #28]	; (4027e4 <prvIdleTask+0x24>)
  4027c8:	681b      	ldr	r3, [r3, #0]
  4027ca:	2b01      	cmp	r3, #1
  4027cc:	d9f9      	bls.n	4027c2 <prvIdleTask+0x2>
				taskYIELD();
  4027ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027d2:	4b05      	ldr	r3, [pc, #20]	; (4027e8 <prvIdleTask+0x28>)
  4027d4:	601a      	str	r2, [r3, #0]
  4027d6:	f3bf 8f4f 	dsb	sy
  4027da:	f3bf 8f6f 	isb	sy
  4027de:	e7f0      	b.n	4027c2 <prvIdleTask+0x2>
  4027e0:	0040274d 	.word	0x0040274d
  4027e4:	2040c250 	.word	0x2040c250
  4027e8:	e000ed04 	.word	0xe000ed04

004027ec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4027ec:	4b2e      	ldr	r3, [pc, #184]	; (4028a8 <vTaskSwitchContext+0xbc>)
  4027ee:	681b      	ldr	r3, [r3, #0]
  4027f0:	2b00      	cmp	r3, #0
  4027f2:	d12c      	bne.n	40284e <vTaskSwitchContext+0x62>
{
  4027f4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4027f6:	2200      	movs	r2, #0
  4027f8:	4b2c      	ldr	r3, [pc, #176]	; (4028ac <vTaskSwitchContext+0xc0>)
  4027fa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4027fc:	4b2c      	ldr	r3, [pc, #176]	; (4028b0 <vTaskSwitchContext+0xc4>)
  4027fe:	681b      	ldr	r3, [r3, #0]
  402800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402802:	681a      	ldr	r2, [r3, #0]
  402804:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402808:	d103      	bne.n	402812 <vTaskSwitchContext+0x26>
  40280a:	685a      	ldr	r2, [r3, #4]
  40280c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402810:	d021      	beq.n	402856 <vTaskSwitchContext+0x6a>
  402812:	4b27      	ldr	r3, [pc, #156]	; (4028b0 <vTaskSwitchContext+0xc4>)
  402814:	6818      	ldr	r0, [r3, #0]
  402816:	6819      	ldr	r1, [r3, #0]
  402818:	3134      	adds	r1, #52	; 0x34
  40281a:	4b26      	ldr	r3, [pc, #152]	; (4028b4 <vTaskSwitchContext+0xc8>)
  40281c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40281e:	4b26      	ldr	r3, [pc, #152]	; (4028b8 <vTaskSwitchContext+0xcc>)
  402820:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402822:	fab3 f383 	clz	r3, r3
  402826:	b2db      	uxtb	r3, r3
  402828:	f1c3 031f 	rsb	r3, r3, #31
  40282c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402830:	008a      	lsls	r2, r1, #2
  402832:	4922      	ldr	r1, [pc, #136]	; (4028bc <vTaskSwitchContext+0xd0>)
  402834:	588a      	ldr	r2, [r1, r2]
  402836:	b9ba      	cbnz	r2, 402868 <vTaskSwitchContext+0x7c>
	__asm volatile
  402838:	f04f 0380 	mov.w	r3, #128	; 0x80
  40283c:	b672      	cpsid	i
  40283e:	f383 8811 	msr	BASEPRI, r3
  402842:	f3bf 8f6f 	isb	sy
  402846:	f3bf 8f4f 	dsb	sy
  40284a:	b662      	cpsie	i
  40284c:	e7fe      	b.n	40284c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40284e:	2201      	movs	r2, #1
  402850:	4b16      	ldr	r3, [pc, #88]	; (4028ac <vTaskSwitchContext+0xc0>)
  402852:	601a      	str	r2, [r3, #0]
  402854:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402856:	689a      	ldr	r2, [r3, #8]
  402858:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40285c:	d1d9      	bne.n	402812 <vTaskSwitchContext+0x26>
  40285e:	68db      	ldr	r3, [r3, #12]
  402860:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402864:	d1d5      	bne.n	402812 <vTaskSwitchContext+0x26>
  402866:	e7da      	b.n	40281e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402868:	4814      	ldr	r0, [pc, #80]	; (4028bc <vTaskSwitchContext+0xd0>)
  40286a:	009a      	lsls	r2, r3, #2
  40286c:	18d4      	adds	r4, r2, r3
  40286e:	00a1      	lsls	r1, r4, #2
  402870:	4401      	add	r1, r0
  402872:	684c      	ldr	r4, [r1, #4]
  402874:	6864      	ldr	r4, [r4, #4]
  402876:	604c      	str	r4, [r1, #4]
  402878:	441a      	add	r2, r3
  40287a:	0091      	lsls	r1, r2, #2
  40287c:	3108      	adds	r1, #8
  40287e:	4408      	add	r0, r1
  402880:	4284      	cmp	r4, r0
  402882:	d009      	beq.n	402898 <vTaskSwitchContext+0xac>
  402884:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402888:	009a      	lsls	r2, r3, #2
  40288a:	4b0c      	ldr	r3, [pc, #48]	; (4028bc <vTaskSwitchContext+0xd0>)
  40288c:	4413      	add	r3, r2
  40288e:	685b      	ldr	r3, [r3, #4]
  402890:	68da      	ldr	r2, [r3, #12]
  402892:	4b07      	ldr	r3, [pc, #28]	; (4028b0 <vTaskSwitchContext+0xc4>)
  402894:	601a      	str	r2, [r3, #0]
  402896:	bd10      	pop	{r4, pc}
  402898:	6860      	ldr	r0, [r4, #4]
  40289a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40289e:	0091      	lsls	r1, r2, #2
  4028a0:	4a06      	ldr	r2, [pc, #24]	; (4028bc <vTaskSwitchContext+0xd0>)
  4028a2:	440a      	add	r2, r1
  4028a4:	6050      	str	r0, [r2, #4]
  4028a6:	e7ed      	b.n	402884 <vTaskSwitchContext+0x98>
  4028a8:	2040c2bc 	.word	0x2040c2bc
  4028ac:	2040c340 	.word	0x2040c340
  4028b0:	2040c244 	.word	0x2040c244
  4028b4:	0041d3bd 	.word	0x0041d3bd
  4028b8:	2040c2c8 	.word	0x2040c2c8
  4028bc:	2040c250 	.word	0x2040c250

004028c0 <vTaskPlaceOnEventList>:
{
  4028c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4028c2:	b1e8      	cbz	r0, 402900 <vTaskPlaceOnEventList+0x40>
  4028c4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4028c6:	4d17      	ldr	r5, [pc, #92]	; (402924 <vTaskPlaceOnEventList+0x64>)
  4028c8:	6829      	ldr	r1, [r5, #0]
  4028ca:	3118      	adds	r1, #24
  4028cc:	4b16      	ldr	r3, [pc, #88]	; (402928 <vTaskPlaceOnEventList+0x68>)
  4028ce:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4028d0:	6828      	ldr	r0, [r5, #0]
  4028d2:	3004      	adds	r0, #4
  4028d4:	4b15      	ldr	r3, [pc, #84]	; (40292c <vTaskPlaceOnEventList+0x6c>)
  4028d6:	4798      	blx	r3
  4028d8:	b948      	cbnz	r0, 4028ee <vTaskPlaceOnEventList+0x2e>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4028da:	682b      	ldr	r3, [r5, #0]
  4028dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4028de:	2301      	movs	r3, #1
  4028e0:	fa03 f202 	lsl.w	r2, r3, r2
  4028e4:	4912      	ldr	r1, [pc, #72]	; (402930 <vTaskPlaceOnEventList+0x70>)
  4028e6:	680b      	ldr	r3, [r1, #0]
  4028e8:	ea23 0302 	bic.w	r3, r3, r2
  4028ec:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4028ee:	f1b4 3fff 	cmp.w	r4, #4294967295
  4028f2:	d010      	beq.n	402916 <vTaskPlaceOnEventList+0x56>
			xTimeToWake = xTickCount + xTicksToWait;
  4028f4:	4b0f      	ldr	r3, [pc, #60]	; (402934 <vTaskPlaceOnEventList+0x74>)
  4028f6:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4028f8:	4420      	add	r0, r4
  4028fa:	4b0f      	ldr	r3, [pc, #60]	; (402938 <vTaskPlaceOnEventList+0x78>)
  4028fc:	4798      	blx	r3
  4028fe:	bd38      	pop	{r3, r4, r5, pc}
  402900:	f04f 0380 	mov.w	r3, #128	; 0x80
  402904:	b672      	cpsid	i
  402906:	f383 8811 	msr	BASEPRI, r3
  40290a:	f3bf 8f6f 	isb	sy
  40290e:	f3bf 8f4f 	dsb	sy
  402912:	b662      	cpsie	i
  402914:	e7fe      	b.n	402914 <vTaskPlaceOnEventList+0x54>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402916:	4b03      	ldr	r3, [pc, #12]	; (402924 <vTaskPlaceOnEventList+0x64>)
  402918:	6819      	ldr	r1, [r3, #0]
  40291a:	3104      	adds	r1, #4
  40291c:	4807      	ldr	r0, [pc, #28]	; (40293c <vTaskPlaceOnEventList+0x7c>)
  40291e:	4b08      	ldr	r3, [pc, #32]	; (402940 <vTaskPlaceOnEventList+0x80>)
  402920:	4798      	blx	r3
  402922:	bd38      	pop	{r3, r4, r5, pc}
  402924:	2040c244 	.word	0x2040c244
  402928:	00401455 	.word	0x00401455
  40292c:	00401489 	.word	0x00401489
  402930:	2040c2c8 	.word	0x2040c2c8
  402934:	2040c33c 	.word	0x2040c33c
  402938:	00402205 	.word	0x00402205
  40293c:	2040c314 	.word	0x2040c314
  402940:	0040143d 	.word	0x0040143d

00402944 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402944:	b1f0      	cbz	r0, 402984 <vTaskPlaceOnEventListRestricted+0x40>
	{
  402946:	b570      	push	{r4, r5, r6, lr}
  402948:	4615      	mov	r5, r2
  40294a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40294c:	4e16      	ldr	r6, [pc, #88]	; (4029a8 <vTaskPlaceOnEventListRestricted+0x64>)
  40294e:	6831      	ldr	r1, [r6, #0]
  402950:	3118      	adds	r1, #24
  402952:	4b16      	ldr	r3, [pc, #88]	; (4029ac <vTaskPlaceOnEventListRestricted+0x68>)
  402954:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402956:	6830      	ldr	r0, [r6, #0]
  402958:	3004      	adds	r0, #4
  40295a:	4b15      	ldr	r3, [pc, #84]	; (4029b0 <vTaskPlaceOnEventListRestricted+0x6c>)
  40295c:	4798      	blx	r3
  40295e:	b948      	cbnz	r0, 402974 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402960:	6833      	ldr	r3, [r6, #0]
  402962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402964:	2301      	movs	r3, #1
  402966:	fa03 f202 	lsl.w	r2, r3, r2
  40296a:	4912      	ldr	r1, [pc, #72]	; (4029b4 <vTaskPlaceOnEventListRestricted+0x70>)
  40296c:	680b      	ldr	r3, [r1, #0]
  40296e:	ea23 0302 	bic.w	r3, r3, r2
  402972:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402974:	2d01      	cmp	r5, #1
  402976:	d010      	beq.n	40299a <vTaskPlaceOnEventListRestricted+0x56>
				xTimeToWake = xTickCount + xTicksToWait;
  402978:	4b0f      	ldr	r3, [pc, #60]	; (4029b8 <vTaskPlaceOnEventListRestricted+0x74>)
  40297a:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40297c:	4420      	add	r0, r4
  40297e:	4b0f      	ldr	r3, [pc, #60]	; (4029bc <vTaskPlaceOnEventListRestricted+0x78>)
  402980:	4798      	blx	r3
  402982:	bd70      	pop	{r4, r5, r6, pc}
  402984:	f04f 0380 	mov.w	r3, #128	; 0x80
  402988:	b672      	cpsid	i
  40298a:	f383 8811 	msr	BASEPRI, r3
  40298e:	f3bf 8f6f 	isb	sy
  402992:	f3bf 8f4f 	dsb	sy
  402996:	b662      	cpsie	i
  402998:	e7fe      	b.n	402998 <vTaskPlaceOnEventListRestricted+0x54>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40299a:	4b03      	ldr	r3, [pc, #12]	; (4029a8 <vTaskPlaceOnEventListRestricted+0x64>)
  40299c:	6819      	ldr	r1, [r3, #0]
  40299e:	3104      	adds	r1, #4
  4029a0:	4807      	ldr	r0, [pc, #28]	; (4029c0 <vTaskPlaceOnEventListRestricted+0x7c>)
  4029a2:	4b02      	ldr	r3, [pc, #8]	; (4029ac <vTaskPlaceOnEventListRestricted+0x68>)
  4029a4:	4798      	blx	r3
  4029a6:	bd70      	pop	{r4, r5, r6, pc}
  4029a8:	2040c244 	.word	0x2040c244
  4029ac:	0040143d 	.word	0x0040143d
  4029b0:	00401489 	.word	0x00401489
  4029b4:	2040c2c8 	.word	0x2040c2c8
  4029b8:	2040c33c 	.word	0x2040c33c
  4029bc:	00402205 	.word	0x00402205
  4029c0:	2040c314 	.word	0x2040c314

004029c4 <xTaskRemoveFromEventList>:
{
  4029c4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4029c6:	68c3      	ldr	r3, [r0, #12]
  4029c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4029ca:	b324      	cbz	r4, 402a16 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4029cc:	f104 0518 	add.w	r5, r4, #24
  4029d0:	4628      	mov	r0, r5
  4029d2:	4b1a      	ldr	r3, [pc, #104]	; (402a3c <xTaskRemoveFromEventList+0x78>)
  4029d4:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4029d6:	4b1a      	ldr	r3, [pc, #104]	; (402a40 <xTaskRemoveFromEventList+0x7c>)
  4029d8:	681b      	ldr	r3, [r3, #0]
  4029da:	bb3b      	cbnz	r3, 402a2c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4029dc:	1d25      	adds	r5, r4, #4
  4029de:	4628      	mov	r0, r5
  4029e0:	4b16      	ldr	r3, [pc, #88]	; (402a3c <xTaskRemoveFromEventList+0x78>)
  4029e2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4029e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4029e6:	2201      	movs	r2, #1
  4029e8:	409a      	lsls	r2, r3
  4029ea:	4916      	ldr	r1, [pc, #88]	; (402a44 <xTaskRemoveFromEventList+0x80>)
  4029ec:	6808      	ldr	r0, [r1, #0]
  4029ee:	4302      	orrs	r2, r0
  4029f0:	600a      	str	r2, [r1, #0]
  4029f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4029f6:	009a      	lsls	r2, r3, #2
  4029f8:	4629      	mov	r1, r5
  4029fa:	4813      	ldr	r0, [pc, #76]	; (402a48 <xTaskRemoveFromEventList+0x84>)
  4029fc:	4410      	add	r0, r2
  4029fe:	4b13      	ldr	r3, [pc, #76]	; (402a4c <xTaskRemoveFromEventList+0x88>)
  402a00:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402a02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a04:	4b12      	ldr	r3, [pc, #72]	; (402a50 <xTaskRemoveFromEventList+0x8c>)
  402a06:	681b      	ldr	r3, [r3, #0]
  402a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a0a:	429a      	cmp	r2, r3
  402a0c:	d913      	bls.n	402a36 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402a0e:	2001      	movs	r0, #1
  402a10:	4b10      	ldr	r3, [pc, #64]	; (402a54 <xTaskRemoveFromEventList+0x90>)
  402a12:	6018      	str	r0, [r3, #0]
  402a14:	bd38      	pop	{r3, r4, r5, pc}
  402a16:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a1a:	b672      	cpsid	i
  402a1c:	f383 8811 	msr	BASEPRI, r3
  402a20:	f3bf 8f6f 	isb	sy
  402a24:	f3bf 8f4f 	dsb	sy
  402a28:	b662      	cpsie	i
  402a2a:	e7fe      	b.n	402a2a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402a2c:	4629      	mov	r1, r5
  402a2e:	480a      	ldr	r0, [pc, #40]	; (402a58 <xTaskRemoveFromEventList+0x94>)
  402a30:	4b06      	ldr	r3, [pc, #24]	; (402a4c <xTaskRemoveFromEventList+0x88>)
  402a32:	4798      	blx	r3
  402a34:	e7e5      	b.n	402a02 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402a36:	2000      	movs	r0, #0
}
  402a38:	bd38      	pop	{r3, r4, r5, pc}
  402a3a:	bf00      	nop
  402a3c:	00401489 	.word	0x00401489
  402a40:	2040c2bc 	.word	0x2040c2bc
  402a44:	2040c2c8 	.word	0x2040c2c8
  402a48:	2040c250 	.word	0x2040c250
  402a4c:	0040143d 	.word	0x0040143d
  402a50:	2040c244 	.word	0x2040c244
  402a54:	2040c340 	.word	0x2040c340
  402a58:	2040c2fc 	.word	0x2040c2fc

00402a5c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402a5c:	b130      	cbz	r0, 402a6c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402a5e:	4a09      	ldr	r2, [pc, #36]	; (402a84 <vTaskSetTimeOutState+0x28>)
  402a60:	6812      	ldr	r2, [r2, #0]
  402a62:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402a64:	4a08      	ldr	r2, [pc, #32]	; (402a88 <vTaskSetTimeOutState+0x2c>)
  402a66:	6812      	ldr	r2, [r2, #0]
  402a68:	6042      	str	r2, [r0, #4]
  402a6a:	4770      	bx	lr
  402a6c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a70:	b672      	cpsid	i
  402a72:	f383 8811 	msr	BASEPRI, r3
  402a76:	f3bf 8f6f 	isb	sy
  402a7a:	f3bf 8f4f 	dsb	sy
  402a7e:	b662      	cpsie	i
  402a80:	e7fe      	b.n	402a80 <vTaskSetTimeOutState+0x24>
  402a82:	bf00      	nop
  402a84:	2040c2f8 	.word	0x2040c2f8
  402a88:	2040c33c 	.word	0x2040c33c

00402a8c <xTaskCheckForTimeOut>:
{
  402a8c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402a8e:	b1c0      	cbz	r0, 402ac2 <xTaskCheckForTimeOut+0x36>
  402a90:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402a92:	b309      	cbz	r1, 402ad8 <xTaskCheckForTimeOut+0x4c>
  402a94:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402a96:	4b1d      	ldr	r3, [pc, #116]	; (402b0c <xTaskCheckForTimeOut+0x80>)
  402a98:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402a9a:	4b1d      	ldr	r3, [pc, #116]	; (402b10 <xTaskCheckForTimeOut+0x84>)
  402a9c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402a9e:	682b      	ldr	r3, [r5, #0]
  402aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
  402aa4:	d02e      	beq.n	402b04 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402aa6:	6820      	ldr	r0, [r4, #0]
  402aa8:	4a1a      	ldr	r2, [pc, #104]	; (402b14 <xTaskCheckForTimeOut+0x88>)
  402aaa:	6812      	ldr	r2, [r2, #0]
  402aac:	4290      	cmp	r0, r2
  402aae:	d002      	beq.n	402ab6 <xTaskCheckForTimeOut+0x2a>
  402ab0:	6862      	ldr	r2, [r4, #4]
  402ab2:	4291      	cmp	r1, r2
  402ab4:	d228      	bcs.n	402b08 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402ab6:	6862      	ldr	r2, [r4, #4]
  402ab8:	1a88      	subs	r0, r1, r2
  402aba:	4283      	cmp	r3, r0
  402abc:	d817      	bhi.n	402aee <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402abe:	2401      	movs	r4, #1
  402ac0:	e01c      	b.n	402afc <xTaskCheckForTimeOut+0x70>
  402ac2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ac6:	b672      	cpsid	i
  402ac8:	f383 8811 	msr	BASEPRI, r3
  402acc:	f3bf 8f6f 	isb	sy
  402ad0:	f3bf 8f4f 	dsb	sy
  402ad4:	b662      	cpsie	i
  402ad6:	e7fe      	b.n	402ad6 <xTaskCheckForTimeOut+0x4a>
  402ad8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402adc:	b672      	cpsid	i
  402ade:	f383 8811 	msr	BASEPRI, r3
  402ae2:	f3bf 8f6f 	isb	sy
  402ae6:	f3bf 8f4f 	dsb	sy
  402aea:	b662      	cpsie	i
  402aec:	e7fe      	b.n	402aec <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402aee:	1a52      	subs	r2, r2, r1
  402af0:	4413      	add	r3, r2
  402af2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402af4:	4620      	mov	r0, r4
  402af6:	4b08      	ldr	r3, [pc, #32]	; (402b18 <xTaskCheckForTimeOut+0x8c>)
  402af8:	4798      	blx	r3
			xReturn = pdFALSE;
  402afa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402afc:	4b07      	ldr	r3, [pc, #28]	; (402b1c <xTaskCheckForTimeOut+0x90>)
  402afe:	4798      	blx	r3
}
  402b00:	4620      	mov	r0, r4
  402b02:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402b04:	2400      	movs	r4, #0
  402b06:	e7f9      	b.n	402afc <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402b08:	2401      	movs	r4, #1
  402b0a:	e7f7      	b.n	402afc <xTaskCheckForTimeOut+0x70>
  402b0c:	0040156d 	.word	0x0040156d
  402b10:	2040c33c 	.word	0x2040c33c
  402b14:	2040c2f8 	.word	0x2040c2f8
  402b18:	00402a5d 	.word	0x00402a5d
  402b1c:	004015b9 	.word	0x004015b9

00402b20 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402b20:	2201      	movs	r2, #1
  402b22:	4b01      	ldr	r3, [pc, #4]	; (402b28 <vTaskMissedYield+0x8>)
  402b24:	601a      	str	r2, [r3, #0]
  402b26:	4770      	bx	lr
  402b28:	2040c340 	.word	0x2040c340

00402b2c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402b2c:	4b05      	ldr	r3, [pc, #20]	; (402b44 <xTaskGetSchedulerState+0x18>)
  402b2e:	681b      	ldr	r3, [r3, #0]
  402b30:	b123      	cbz	r3, 402b3c <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402b32:	4b05      	ldr	r3, [pc, #20]	; (402b48 <xTaskGetSchedulerState+0x1c>)
  402b34:	681b      	ldr	r3, [r3, #0]
  402b36:	b91b      	cbnz	r3, 402b40 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
  402b38:	2002      	movs	r0, #2
  402b3a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402b3c:	2001      	movs	r0, #1
  402b3e:	4770      	bx	lr
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402b40:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
  402b42:	4770      	bx	lr
  402b44:	2040c310 	.word	0x2040c310
  402b48:	2040c2bc 	.word	0x2040c2bc

00402b4c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402b4c:	2800      	cmp	r0, #0
  402b4e:	d047      	beq.n	402be0 <vTaskPriorityInherit+0x94>
	{
  402b50:	b538      	push	{r3, r4, r5, lr}
  402b52:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402b54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402b56:	4923      	ldr	r1, [pc, #140]	; (402be4 <vTaskPriorityInherit+0x98>)
  402b58:	6809      	ldr	r1, [r1, #0]
  402b5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402b5c:	428b      	cmp	r3, r1
  402b5e:	d216      	bcs.n	402b8e <vTaskPriorityInherit+0x42>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402b60:	6981      	ldr	r1, [r0, #24]
  402b62:	2900      	cmp	r1, #0
  402b64:	db05      	blt.n	402b72 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b66:	491f      	ldr	r1, [pc, #124]	; (402be4 <vTaskPriorityInherit+0x98>)
  402b68:	6809      	ldr	r1, [r1, #0]
  402b6a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402b6c:	f1c1 0105 	rsb	r1, r1, #5
  402b70:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402b72:	6960      	ldr	r0, [r4, #20]
  402b74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b78:	0099      	lsls	r1, r3, #2
  402b7a:	4b1b      	ldr	r3, [pc, #108]	; (402be8 <vTaskPriorityInherit+0x9c>)
  402b7c:	440b      	add	r3, r1
  402b7e:	4298      	cmp	r0, r3
  402b80:	d006      	beq.n	402b90 <vTaskPriorityInherit+0x44>
  402b82:	2300      	movs	r3, #0
  402b84:	b933      	cbnz	r3, 402b94 <vTaskPriorityInherit+0x48>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402b86:	4b17      	ldr	r3, [pc, #92]	; (402be4 <vTaskPriorityInherit+0x98>)
  402b88:	681b      	ldr	r3, [r3, #0]
  402b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
  402b8e:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402b90:	2301      	movs	r3, #1
  402b92:	e7f7      	b.n	402b84 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b94:	1d25      	adds	r5, r4, #4
  402b96:	4628      	mov	r0, r5
  402b98:	4b14      	ldr	r3, [pc, #80]	; (402bec <vTaskPriorityInherit+0xa0>)
  402b9a:	4798      	blx	r3
  402b9c:	b968      	cbnz	r0, 402bba <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402b9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402ba0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402ba4:	008a      	lsls	r2, r1, #2
  402ba6:	4910      	ldr	r1, [pc, #64]	; (402be8 <vTaskPriorityInherit+0x9c>)
  402ba8:	588a      	ldr	r2, [r1, r2]
  402baa:	b932      	cbnz	r2, 402bba <vTaskPriorityInherit+0x6e>
  402bac:	2201      	movs	r2, #1
  402bae:	409a      	lsls	r2, r3
  402bb0:	490f      	ldr	r1, [pc, #60]	; (402bf0 <vTaskPriorityInherit+0xa4>)
  402bb2:	680b      	ldr	r3, [r1, #0]
  402bb4:	ea23 0302 	bic.w	r3, r3, r2
  402bb8:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402bba:	4b0a      	ldr	r3, [pc, #40]	; (402be4 <vTaskPriorityInherit+0x98>)
  402bbc:	681b      	ldr	r3, [r3, #0]
  402bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402bc2:	2201      	movs	r2, #1
  402bc4:	409a      	lsls	r2, r3
  402bc6:	490a      	ldr	r1, [pc, #40]	; (402bf0 <vTaskPriorityInherit+0xa4>)
  402bc8:	6808      	ldr	r0, [r1, #0]
  402bca:	4302      	orrs	r2, r0
  402bcc:	600a      	str	r2, [r1, #0]
  402bce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402bd2:	009a      	lsls	r2, r3, #2
  402bd4:	4629      	mov	r1, r5
  402bd6:	4804      	ldr	r0, [pc, #16]	; (402be8 <vTaskPriorityInherit+0x9c>)
  402bd8:	4410      	add	r0, r2
  402bda:	4b06      	ldr	r3, [pc, #24]	; (402bf4 <vTaskPriorityInherit+0xa8>)
  402bdc:	4798      	blx	r3
  402bde:	bd38      	pop	{r3, r4, r5, pc}
  402be0:	4770      	bx	lr
  402be2:	bf00      	nop
  402be4:	2040c244 	.word	0x2040c244
  402be8:	2040c250 	.word	0x2040c250
  402bec:	00401489 	.word	0x00401489
  402bf0:	2040c2c8 	.word	0x2040c2c8
  402bf4:	0040143d 	.word	0x0040143d

00402bf8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402bf8:	2800      	cmp	r0, #0
  402bfa:	d04f      	beq.n	402c9c <xTaskPriorityDisinherit+0xa4>
	{
  402bfc:	b538      	push	{r3, r4, r5, lr}
  402bfe:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402c00:	4a29      	ldr	r2, [pc, #164]	; (402ca8 <xTaskPriorityDisinherit+0xb0>)
  402c02:	6812      	ldr	r2, [r2, #0]
  402c04:	4290      	cmp	r0, r2
  402c06:	d00a      	beq.n	402c1e <xTaskPriorityDisinherit+0x26>
  402c08:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c0c:	b672      	cpsid	i
  402c0e:	f383 8811 	msr	BASEPRI, r3
  402c12:	f3bf 8f6f 	isb	sy
  402c16:	f3bf 8f4f 	dsb	sy
  402c1a:	b662      	cpsie	i
  402c1c:	e7fe      	b.n	402c1c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402c1e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402c20:	b952      	cbnz	r2, 402c38 <xTaskPriorityDisinherit+0x40>
  402c22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c26:	b672      	cpsid	i
  402c28:	f383 8811 	msr	BASEPRI, r3
  402c2c:	f3bf 8f6f 	isb	sy
  402c30:	f3bf 8f4f 	dsb	sy
  402c34:	b662      	cpsie	i
  402c36:	e7fe      	b.n	402c36 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402c38:	3a01      	subs	r2, #1
  402c3a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402c3c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402c3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  402c40:	4288      	cmp	r0, r1
  402c42:	d02d      	beq.n	402ca0 <xTaskPriorityDisinherit+0xa8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402c44:	2a00      	cmp	r2, #0
  402c46:	d12d      	bne.n	402ca4 <xTaskPriorityDisinherit+0xac>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c48:	1d25      	adds	r5, r4, #4
  402c4a:	4628      	mov	r0, r5
  402c4c:	4b17      	ldr	r3, [pc, #92]	; (402cac <xTaskPriorityDisinherit+0xb4>)
  402c4e:	4798      	blx	r3
  402c50:	b970      	cbnz	r0, 402c70 <xTaskPriorityDisinherit+0x78>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402c54:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402c58:	008b      	lsls	r3, r1, #2
  402c5a:	4915      	ldr	r1, [pc, #84]	; (402cb0 <xTaskPriorityDisinherit+0xb8>)
  402c5c:	58cb      	ldr	r3, [r1, r3]
  402c5e:	b93b      	cbnz	r3, 402c70 <xTaskPriorityDisinherit+0x78>
  402c60:	2301      	movs	r3, #1
  402c62:	fa03 f202 	lsl.w	r2, r3, r2
  402c66:	4913      	ldr	r1, [pc, #76]	; (402cb4 <xTaskPriorityDisinherit+0xbc>)
  402c68:	680b      	ldr	r3, [r1, #0]
  402c6a:	ea23 0302 	bic.w	r3, r3, r2
  402c6e:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402c70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402c72:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402c74:	f1c3 0205 	rsb	r2, r3, #5
  402c78:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402c7a:	2401      	movs	r4, #1
  402c7c:	fa04 f203 	lsl.w	r2, r4, r3
  402c80:	490c      	ldr	r1, [pc, #48]	; (402cb4 <xTaskPriorityDisinherit+0xbc>)
  402c82:	6808      	ldr	r0, [r1, #0]
  402c84:	4302      	orrs	r2, r0
  402c86:	600a      	str	r2, [r1, #0]
  402c88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402c8c:	009a      	lsls	r2, r3, #2
  402c8e:	4629      	mov	r1, r5
  402c90:	4807      	ldr	r0, [pc, #28]	; (402cb0 <xTaskPriorityDisinherit+0xb8>)
  402c92:	4410      	add	r0, r2
  402c94:	4b08      	ldr	r3, [pc, #32]	; (402cb8 <xTaskPriorityDisinherit+0xc0>)
  402c96:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402c98:	4620      	mov	r0, r4
  402c9a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402c9c:	2000      	movs	r0, #0
  402c9e:	4770      	bx	lr
  402ca0:	2000      	movs	r0, #0
  402ca2:	bd38      	pop	{r3, r4, r5, pc}
  402ca4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402ca6:	bd38      	pop	{r3, r4, r5, pc}
  402ca8:	2040c244 	.word	0x2040c244
  402cac:	00401489 	.word	0x00401489
  402cb0:	2040c250 	.word	0x2040c250
  402cb4:	2040c2c8 	.word	0x2040c2c8
  402cb8:	0040143d 	.word	0x0040143d

00402cbc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402cbc:	4b05      	ldr	r3, [pc, #20]	; (402cd4 <pvTaskIncrementMutexHeldCount+0x18>)
  402cbe:	681b      	ldr	r3, [r3, #0]
  402cc0:	b123      	cbz	r3, 402ccc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402cc2:	4b04      	ldr	r3, [pc, #16]	; (402cd4 <pvTaskIncrementMutexHeldCount+0x18>)
  402cc4:	681a      	ldr	r2, [r3, #0]
  402cc6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402cc8:	3301      	adds	r3, #1
  402cca:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402ccc:	4b01      	ldr	r3, [pc, #4]	; (402cd4 <pvTaskIncrementMutexHeldCount+0x18>)
  402cce:	6818      	ldr	r0, [r3, #0]
	}
  402cd0:	4770      	bx	lr
  402cd2:	bf00      	nop
  402cd4:	2040c244 	.word	0x2040c244

00402cd8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402cd8:	4b06      	ldr	r3, [pc, #24]	; (402cf4 <prvGetNextExpireTime+0x1c>)
  402cda:	681a      	ldr	r2, [r3, #0]
  402cdc:	6813      	ldr	r3, [r2, #0]
  402cde:	fab3 f383 	clz	r3, r3
  402ce2:	095b      	lsrs	r3, r3, #5
  402ce4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
  402ce6:	b913      	cbnz	r3, 402cee <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ce8:	68d3      	ldr	r3, [r2, #12]
  402cea:	6818      	ldr	r0, [r3, #0]
  402cec:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  402cee:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
  402cf0:	4770      	bx	lr
  402cf2:	bf00      	nop
  402cf4:	2040c344 	.word	0x2040c344

00402cf8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402cf8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402cfa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402cfc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402cfe:	4291      	cmp	r1, r2
  402d00:	d80c      	bhi.n	402d1c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402d02:	1ad2      	subs	r2, r2, r3
  402d04:	6983      	ldr	r3, [r0, #24]
  402d06:	429a      	cmp	r2, r3
  402d08:	d301      	bcc.n	402d0e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402d0a:	2001      	movs	r0, #1
  402d0c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402d0e:	1d01      	adds	r1, r0, #4
  402d10:	4b0b      	ldr	r3, [pc, #44]	; (402d40 <prvInsertTimerInActiveList+0x48>)
  402d12:	6818      	ldr	r0, [r3, #0]
  402d14:	4b0b      	ldr	r3, [pc, #44]	; (402d44 <prvInsertTimerInActiveList+0x4c>)
  402d16:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d18:	2000      	movs	r0, #0
  402d1a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402d1c:	429a      	cmp	r2, r3
  402d1e:	bf2c      	ite	cs
  402d20:	2200      	movcs	r2, #0
  402d22:	2201      	movcc	r2, #1
  402d24:	4299      	cmp	r1, r3
  402d26:	bf38      	it	cc
  402d28:	2200      	movcc	r2, #0
  402d2a:	b10a      	cbz	r2, 402d30 <prvInsertTimerInActiveList+0x38>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402d2c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402d2e:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402d30:	1d01      	adds	r1, r0, #4
  402d32:	4b05      	ldr	r3, [pc, #20]	; (402d48 <prvInsertTimerInActiveList+0x50>)
  402d34:	6818      	ldr	r0, [r3, #0]
  402d36:	4b03      	ldr	r3, [pc, #12]	; (402d44 <prvInsertTimerInActiveList+0x4c>)
  402d38:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d3a:	2000      	movs	r0, #0
  402d3c:	bd08      	pop	{r3, pc}
  402d3e:	bf00      	nop
  402d40:	2040c348 	.word	0x2040c348
  402d44:	00401455 	.word	0x00401455
  402d48:	2040c344 	.word	0x2040c344

00402d4c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402d4c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402d4e:	4b15      	ldr	r3, [pc, #84]	; (402da4 <prvCheckForValidListAndQueue+0x58>)
  402d50:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402d52:	4b15      	ldr	r3, [pc, #84]	; (402da8 <prvCheckForValidListAndQueue+0x5c>)
  402d54:	681b      	ldr	r3, [r3, #0]
  402d56:	b113      	cbz	r3, 402d5e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402d58:	4b14      	ldr	r3, [pc, #80]	; (402dac <prvCheckForValidListAndQueue+0x60>)
  402d5a:	4798      	blx	r3
  402d5c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402d5e:	4d14      	ldr	r5, [pc, #80]	; (402db0 <prvCheckForValidListAndQueue+0x64>)
  402d60:	4628      	mov	r0, r5
  402d62:	4e14      	ldr	r6, [pc, #80]	; (402db4 <prvCheckForValidListAndQueue+0x68>)
  402d64:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402d66:	4c14      	ldr	r4, [pc, #80]	; (402db8 <prvCheckForValidListAndQueue+0x6c>)
  402d68:	4620      	mov	r0, r4
  402d6a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402d6c:	4b13      	ldr	r3, [pc, #76]	; (402dbc <prvCheckForValidListAndQueue+0x70>)
  402d6e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402d70:	4b13      	ldr	r3, [pc, #76]	; (402dc0 <prvCheckForValidListAndQueue+0x74>)
  402d72:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402d74:	2200      	movs	r2, #0
  402d76:	2110      	movs	r1, #16
  402d78:	2005      	movs	r0, #5
  402d7a:	4b12      	ldr	r3, [pc, #72]	; (402dc4 <prvCheckForValidListAndQueue+0x78>)
  402d7c:	4798      	blx	r3
  402d7e:	4b0a      	ldr	r3, [pc, #40]	; (402da8 <prvCheckForValidListAndQueue+0x5c>)
  402d80:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402d82:	b118      	cbz	r0, 402d8c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402d84:	4910      	ldr	r1, [pc, #64]	; (402dc8 <prvCheckForValidListAndQueue+0x7c>)
  402d86:	4b11      	ldr	r3, [pc, #68]	; (402dcc <prvCheckForValidListAndQueue+0x80>)
  402d88:	4798      	blx	r3
  402d8a:	e7e5      	b.n	402d58 <prvCheckForValidListAndQueue+0xc>
  402d8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d90:	b672      	cpsid	i
  402d92:	f383 8811 	msr	BASEPRI, r3
  402d96:	f3bf 8f6f 	isb	sy
  402d9a:	f3bf 8f4f 	dsb	sy
  402d9e:	b662      	cpsie	i
  402da0:	e7fe      	b.n	402da0 <prvCheckForValidListAndQueue+0x54>
  402da2:	bf00      	nop
  402da4:	0040156d 	.word	0x0040156d
  402da8:	2040c378 	.word	0x2040c378
  402dac:	004015b9 	.word	0x004015b9
  402db0:	2040c34c 	.word	0x2040c34c
  402db4:	00401421 	.word	0x00401421
  402db8:	2040c360 	.word	0x2040c360
  402dbc:	2040c344 	.word	0x2040c344
  402dc0:	2040c348 	.word	0x2040c348
  402dc4:	00401af9 	.word	0x00401af9
  402dc8:	00421254 	.word	0x00421254
  402dcc:	00402041 	.word	0x00402041

00402dd0 <xTimerCreateTimerTask>:
{
  402dd0:	b510      	push	{r4, lr}
  402dd2:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402dd4:	4b10      	ldr	r3, [pc, #64]	; (402e18 <xTimerCreateTimerTask+0x48>)
  402dd6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402dd8:	4b10      	ldr	r3, [pc, #64]	; (402e1c <xTimerCreateTimerTask+0x4c>)
  402dda:	681b      	ldr	r3, [r3, #0]
  402ddc:	b1bb      	cbz	r3, 402e0e <xTimerCreateTimerTask+0x3e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402dde:	2300      	movs	r3, #0
  402de0:	9303      	str	r3, [sp, #12]
  402de2:	9302      	str	r3, [sp, #8]
  402de4:	9301      	str	r3, [sp, #4]
  402de6:	2204      	movs	r2, #4
  402de8:	9200      	str	r2, [sp, #0]
  402dea:	f44f 7282 	mov.w	r2, #260	; 0x104
  402dee:	490c      	ldr	r1, [pc, #48]	; (402e20 <xTimerCreateTimerTask+0x50>)
  402df0:	480c      	ldr	r0, [pc, #48]	; (402e24 <xTimerCreateTimerTask+0x54>)
  402df2:	4c0d      	ldr	r4, [pc, #52]	; (402e28 <xTimerCreateTimerTask+0x58>)
  402df4:	47a0      	blx	r4
	configASSERT( xReturn );
  402df6:	b960      	cbnz	r0, 402e12 <xTimerCreateTimerTask+0x42>
  402df8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dfc:	b672      	cpsid	i
  402dfe:	f383 8811 	msr	BASEPRI, r3
  402e02:	f3bf 8f6f 	isb	sy
  402e06:	f3bf 8f4f 	dsb	sy
  402e0a:	b662      	cpsie	i
  402e0c:	e7fe      	b.n	402e0c <xTimerCreateTimerTask+0x3c>
BaseType_t xReturn = pdFAIL;
  402e0e:	2000      	movs	r0, #0
  402e10:	e7f1      	b.n	402df6 <xTimerCreateTimerTask+0x26>
}
  402e12:	b004      	add	sp, #16
  402e14:	bd10      	pop	{r4, pc}
  402e16:	bf00      	nop
  402e18:	00402d4d 	.word	0x00402d4d
  402e1c:	2040c378 	.word	0x2040c378
  402e20:	0042125c 	.word	0x0042125c
  402e24:	004031d5 	.word	0x004031d5
  402e28:	0040225d 	.word	0x0040225d

00402e2c <xTimerCreate>:
{
  402e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
  402e30:	460d      	mov	r5, r1
  402e32:	b1f9      	cbz	r1, 402e74 <xTimerCreate+0x48>
  402e34:	4680      	mov	r8, r0
  402e36:	4617      	mov	r7, r2
  402e38:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
  402e3a:	202c      	movs	r0, #44	; 0x2c
  402e3c:	4b10      	ldr	r3, [pc, #64]	; (402e80 <xTimerCreate+0x54>)
  402e3e:	4798      	blx	r3
		if( pxNewTimer != NULL )
  402e40:	4604      	mov	r4, r0
  402e42:	b158      	cbz	r0, 402e5c <xTimerCreate+0x30>
			prvCheckForValidListAndQueue();
  402e44:	4b0f      	ldr	r3, [pc, #60]	; (402e84 <xTimerCreate+0x58>)
  402e46:	4798      	blx	r3
			pxNewTimer->pcTimerName = pcTimerName;
  402e48:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  402e4c:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  402e4e:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  402e50:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  402e52:	9b06      	ldr	r3, [sp, #24]
  402e54:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  402e56:	1d20      	adds	r0, r4, #4
  402e58:	4b0b      	ldr	r3, [pc, #44]	; (402e88 <xTimerCreate+0x5c>)
  402e5a:	4798      	blx	r3
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
  402e5c:	b965      	cbnz	r5, 402e78 <xTimerCreate+0x4c>
  402e5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e62:	b672      	cpsid	i
  402e64:	f383 8811 	msr	BASEPRI, r3
  402e68:	f3bf 8f6f 	isb	sy
  402e6c:	f3bf 8f4f 	dsb	sy
  402e70:	b662      	cpsie	i
  402e72:	e7fe      	b.n	402e72 <xTimerCreate+0x46>
		pxNewTimer = NULL;
  402e74:	2400      	movs	r4, #0
  402e76:	e7f1      	b.n	402e5c <xTimerCreate+0x30>
}
  402e78:	4620      	mov	r0, r4
  402e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e7e:	bf00      	nop
  402e80:	004017bd 	.word	0x004017bd
  402e84:	00402d4d 	.word	0x00402d4d
  402e88:	00401437 	.word	0x00401437

00402e8c <xTimerGenericCommand>:
	configASSERT( xTimer );
  402e8c:	b1c8      	cbz	r0, 402ec2 <xTimerGenericCommand+0x36>
{
  402e8e:	b530      	push	{r4, r5, lr}
  402e90:	b085      	sub	sp, #20
  402e92:	4615      	mov	r5, r2
  402e94:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402e96:	4a18      	ldr	r2, [pc, #96]	; (402ef8 <xTimerGenericCommand+0x6c>)
  402e98:	6810      	ldr	r0, [r2, #0]
  402e9a:	2800      	cmp	r0, #0
  402e9c:	d02a      	beq.n	402ef4 <xTimerGenericCommand+0x68>
  402e9e:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402ea0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402ea2:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402ea4:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402ea6:	2905      	cmp	r1, #5
  402ea8:	dc1e      	bgt.n	402ee8 <xTimerGenericCommand+0x5c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402eaa:	4b14      	ldr	r3, [pc, #80]	; (402efc <xTimerGenericCommand+0x70>)
  402eac:	4798      	blx	r3
  402eae:	2802      	cmp	r0, #2
  402eb0:	d012      	beq.n	402ed8 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402eb2:	2300      	movs	r3, #0
  402eb4:	461a      	mov	r2, r3
  402eb6:	4669      	mov	r1, sp
  402eb8:	480f      	ldr	r0, [pc, #60]	; (402ef8 <xTimerGenericCommand+0x6c>)
  402eba:	6800      	ldr	r0, [r0, #0]
  402ebc:	4c10      	ldr	r4, [pc, #64]	; (402f00 <xTimerGenericCommand+0x74>)
  402ebe:	47a0      	blx	r4
  402ec0:	e016      	b.n	402ef0 <xTimerGenericCommand+0x64>
  402ec2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ec6:	b672      	cpsid	i
  402ec8:	f383 8811 	msr	BASEPRI, r3
  402ecc:	f3bf 8f6f 	isb	sy
  402ed0:	f3bf 8f4f 	dsb	sy
  402ed4:	b662      	cpsie	i
  402ed6:	e7fe      	b.n	402ed6 <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402ed8:	2300      	movs	r3, #0
  402eda:	9a08      	ldr	r2, [sp, #32]
  402edc:	4669      	mov	r1, sp
  402ede:	4806      	ldr	r0, [pc, #24]	; (402ef8 <xTimerGenericCommand+0x6c>)
  402ee0:	6800      	ldr	r0, [r0, #0]
  402ee2:	4c07      	ldr	r4, [pc, #28]	; (402f00 <xTimerGenericCommand+0x74>)
  402ee4:	47a0      	blx	r4
  402ee6:	e003      	b.n	402ef0 <xTimerGenericCommand+0x64>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402ee8:	2300      	movs	r3, #0
  402eea:	4669      	mov	r1, sp
  402eec:	4c05      	ldr	r4, [pc, #20]	; (402f04 <xTimerGenericCommand+0x78>)
  402eee:	47a0      	blx	r4
}
  402ef0:	b005      	add	sp, #20
  402ef2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
  402ef4:	2000      	movs	r0, #0
	return xReturn;
  402ef6:	e7fb      	b.n	402ef0 <xTimerGenericCommand+0x64>
  402ef8:	2040c378 	.word	0x2040c378
  402efc:	00402b2d 	.word	0x00402b2d
  402f00:	00401b79 	.word	0x00401b79
  402f04:	00401d5d 	.word	0x00401d5d

00402f08 <prvSwitchTimerLists>:
{
  402f08:	b570      	push	{r4, r5, r6, lr}
  402f0a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402f0c:	4b1c      	ldr	r3, [pc, #112]	; (402f80 <prvSwitchTimerLists+0x78>)
  402f0e:	681b      	ldr	r3, [r3, #0]
  402f10:	681a      	ldr	r2, [r3, #0]
  402f12:	2a00      	cmp	r2, #0
  402f14:	d02c      	beq.n	402f70 <prvSwitchTimerLists+0x68>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f16:	68db      	ldr	r3, [r3, #12]
  402f18:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f1a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f1c:	1d25      	adds	r5, r4, #4
  402f1e:	4628      	mov	r0, r5
  402f20:	4b18      	ldr	r3, [pc, #96]	; (402f84 <prvSwitchTimerLists+0x7c>)
  402f22:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402f26:	4620      	mov	r0, r4
  402f28:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402f2a:	69e3      	ldr	r3, [r4, #28]
  402f2c:	2b01      	cmp	r3, #1
  402f2e:	d1ed      	bne.n	402f0c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402f30:	69a3      	ldr	r3, [r4, #24]
  402f32:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
  402f34:	429e      	cmp	r6, r3
  402f36:	d207      	bcs.n	402f48 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402f38:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402f3a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402f3c:	4629      	mov	r1, r5
  402f3e:	4b10      	ldr	r3, [pc, #64]	; (402f80 <prvSwitchTimerLists+0x78>)
  402f40:	6818      	ldr	r0, [r3, #0]
  402f42:	4b11      	ldr	r3, [pc, #68]	; (402f88 <prvSwitchTimerLists+0x80>)
  402f44:	4798      	blx	r3
  402f46:	e7e1      	b.n	402f0c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402f48:	2100      	movs	r1, #0
  402f4a:	9100      	str	r1, [sp, #0]
  402f4c:	460b      	mov	r3, r1
  402f4e:	4632      	mov	r2, r6
  402f50:	4620      	mov	r0, r4
  402f52:	4c0e      	ldr	r4, [pc, #56]	; (402f8c <prvSwitchTimerLists+0x84>)
  402f54:	47a0      	blx	r4
				configASSERT( xResult );
  402f56:	2800      	cmp	r0, #0
  402f58:	d1d8      	bne.n	402f0c <prvSwitchTimerLists+0x4>
  402f5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f5e:	b672      	cpsid	i
  402f60:	f383 8811 	msr	BASEPRI, r3
  402f64:	f3bf 8f6f 	isb	sy
  402f68:	f3bf 8f4f 	dsb	sy
  402f6c:	b662      	cpsie	i
  402f6e:	e7fe      	b.n	402f6e <prvSwitchTimerLists+0x66>
	pxCurrentTimerList = pxOverflowTimerList;
  402f70:	4a07      	ldr	r2, [pc, #28]	; (402f90 <prvSwitchTimerLists+0x88>)
  402f72:	6810      	ldr	r0, [r2, #0]
  402f74:	4902      	ldr	r1, [pc, #8]	; (402f80 <prvSwitchTimerLists+0x78>)
  402f76:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402f78:	6013      	str	r3, [r2, #0]
}
  402f7a:	b002      	add	sp, #8
  402f7c:	bd70      	pop	{r4, r5, r6, pc}
  402f7e:	bf00      	nop
  402f80:	2040c344 	.word	0x2040c344
  402f84:	00401489 	.word	0x00401489
  402f88:	00401455 	.word	0x00401455
  402f8c:	00402e8d 	.word	0x00402e8d
  402f90:	2040c348 	.word	0x2040c348

00402f94 <prvSampleTimeNow>:
{
  402f94:	b538      	push	{r3, r4, r5, lr}
  402f96:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
  402f98:	4b08      	ldr	r3, [pc, #32]	; (402fbc <prvSampleTimeNow+0x28>)
  402f9a:	4798      	blx	r3
  402f9c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
  402f9e:	4b08      	ldr	r3, [pc, #32]	; (402fc0 <prvSampleTimeNow+0x2c>)
  402fa0:	681b      	ldr	r3, [r3, #0]
  402fa2:	4298      	cmp	r0, r3
  402fa4:	d305      	bcc.n	402fb2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
  402fa6:	2300      	movs	r3, #0
  402fa8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
  402faa:	4b05      	ldr	r3, [pc, #20]	; (402fc0 <prvSampleTimeNow+0x2c>)
  402fac:	601c      	str	r4, [r3, #0]
}
  402fae:	4620      	mov	r0, r4
  402fb0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
  402fb2:	4b04      	ldr	r3, [pc, #16]	; (402fc4 <prvSampleTimeNow+0x30>)
  402fb4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  402fb6:	2301      	movs	r3, #1
  402fb8:	602b      	str	r3, [r5, #0]
  402fba:	e7f6      	b.n	402faa <prvSampleTimeNow+0x16>
  402fbc:	00402455 	.word	0x00402455
  402fc0:	2040c374 	.word	0x2040c374
  402fc4:	00402f09 	.word	0x00402f09

00402fc8 <prvProcessExpiredTimer>:
{
  402fc8:	b570      	push	{r4, r5, r6, lr}
  402fca:	b082      	sub	sp, #8
  402fcc:	4605      	mov	r5, r0
  402fce:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fd0:	4b15      	ldr	r3, [pc, #84]	; (403028 <prvProcessExpiredTimer+0x60>)
  402fd2:	681b      	ldr	r3, [r3, #0]
  402fd4:	68db      	ldr	r3, [r3, #12]
  402fd6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fd8:	1d20      	adds	r0, r4, #4
  402fda:	4b14      	ldr	r3, [pc, #80]	; (40302c <prvProcessExpiredTimer+0x64>)
  402fdc:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402fde:	69e3      	ldr	r3, [r4, #28]
  402fe0:	2b01      	cmp	r3, #1
  402fe2:	d004      	beq.n	402fee <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402fe6:	4620      	mov	r0, r4
  402fe8:	4798      	blx	r3
}
  402fea:	b002      	add	sp, #8
  402fec:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402fee:	69a1      	ldr	r1, [r4, #24]
  402ff0:	462b      	mov	r3, r5
  402ff2:	4632      	mov	r2, r6
  402ff4:	4429      	add	r1, r5
  402ff6:	4620      	mov	r0, r4
  402ff8:	4e0d      	ldr	r6, [pc, #52]	; (403030 <prvProcessExpiredTimer+0x68>)
  402ffa:	47b0      	blx	r6
  402ffc:	2801      	cmp	r0, #1
  402ffe:	d1f1      	bne.n	402fe4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403000:	2100      	movs	r1, #0
  403002:	9100      	str	r1, [sp, #0]
  403004:	460b      	mov	r3, r1
  403006:	462a      	mov	r2, r5
  403008:	4620      	mov	r0, r4
  40300a:	4d0a      	ldr	r5, [pc, #40]	; (403034 <prvProcessExpiredTimer+0x6c>)
  40300c:	47a8      	blx	r5
			configASSERT( xResult );
  40300e:	2800      	cmp	r0, #0
  403010:	d1e8      	bne.n	402fe4 <prvProcessExpiredTimer+0x1c>
  403012:	f04f 0380 	mov.w	r3, #128	; 0x80
  403016:	b672      	cpsid	i
  403018:	f383 8811 	msr	BASEPRI, r3
  40301c:	f3bf 8f6f 	isb	sy
  403020:	f3bf 8f4f 	dsb	sy
  403024:	b662      	cpsie	i
  403026:	e7fe      	b.n	403026 <prvProcessExpiredTimer+0x5e>
  403028:	2040c344 	.word	0x2040c344
  40302c:	00401489 	.word	0x00401489
  403030:	00402cf9 	.word	0x00402cf9
  403034:	00402e8d 	.word	0x00402e8d

00403038 <prvProcessTimerOrBlockTask>:
{
  403038:	b570      	push	{r4, r5, r6, lr}
  40303a:	b082      	sub	sp, #8
  40303c:	4606      	mov	r6, r0
  40303e:	460c      	mov	r4, r1
	vTaskSuspendAll();
  403040:	4b17      	ldr	r3, [pc, #92]	; (4030a0 <prvProcessTimerOrBlockTask+0x68>)
  403042:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403044:	a801      	add	r0, sp, #4
  403046:	4b17      	ldr	r3, [pc, #92]	; (4030a4 <prvProcessTimerOrBlockTask+0x6c>)
  403048:	4798      	blx	r3
		if( xTimerListsWereSwitched == pdFALSE )
  40304a:	9b01      	ldr	r3, [sp, #4]
  40304c:	bb23      	cbnz	r3, 403098 <prvProcessTimerOrBlockTask+0x60>
  40304e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403050:	42b0      	cmp	r0, r6
  403052:	bf28      	it	cs
  403054:	2c00      	cmpcs	r4, #0
  403056:	d018      	beq.n	40308a <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
  403058:	b12c      	cbz	r4, 403066 <prvProcessTimerOrBlockTask+0x2e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40305a:	4b13      	ldr	r3, [pc, #76]	; (4030a8 <prvProcessTimerOrBlockTask+0x70>)
  40305c:	681b      	ldr	r3, [r3, #0]
  40305e:	681c      	ldr	r4, [r3, #0]
  403060:	fab4 f484 	clz	r4, r4
  403064:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403066:	4622      	mov	r2, r4
  403068:	1b71      	subs	r1, r6, r5
  40306a:	4b10      	ldr	r3, [pc, #64]	; (4030ac <prvProcessTimerOrBlockTask+0x74>)
  40306c:	6818      	ldr	r0, [r3, #0]
  40306e:	4b10      	ldr	r3, [pc, #64]	; (4030b0 <prvProcessTimerOrBlockTask+0x78>)
  403070:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403072:	4b10      	ldr	r3, [pc, #64]	; (4030b4 <prvProcessTimerOrBlockTask+0x7c>)
  403074:	4798      	blx	r3
  403076:	b988      	cbnz	r0, 40309c <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
  403078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40307c:	4b0e      	ldr	r3, [pc, #56]	; (4030b8 <prvProcessTimerOrBlockTask+0x80>)
  40307e:	601a      	str	r2, [r3, #0]
  403080:	f3bf 8f4f 	dsb	sy
  403084:	f3bf 8f6f 	isb	sy
  403088:	e008      	b.n	40309c <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
  40308a:	4b0a      	ldr	r3, [pc, #40]	; (4030b4 <prvProcessTimerOrBlockTask+0x7c>)
  40308c:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  40308e:	4629      	mov	r1, r5
  403090:	4630      	mov	r0, r6
  403092:	4b0a      	ldr	r3, [pc, #40]	; (4030bc <prvProcessTimerOrBlockTask+0x84>)
  403094:	4798      	blx	r3
  403096:	e001      	b.n	40309c <prvProcessTimerOrBlockTask+0x64>
			( void ) xTaskResumeAll();
  403098:	4b06      	ldr	r3, [pc, #24]	; (4030b4 <prvProcessTimerOrBlockTask+0x7c>)
  40309a:	4798      	blx	r3
}
  40309c:	b002      	add	sp, #8
  40309e:	bd70      	pop	{r4, r5, r6, pc}
  4030a0:	00402445 	.word	0x00402445
  4030a4:	00402f95 	.word	0x00402f95
  4030a8:	2040c348 	.word	0x2040c348
  4030ac:	2040c378 	.word	0x2040c378
  4030b0:	00402069 	.word	0x00402069
  4030b4:	004025a5 	.word	0x004025a5
  4030b8:	e000ed04 	.word	0xe000ed04
  4030bc:	00402fc9 	.word	0x00402fc9

004030c0 <prvProcessReceivedCommands>:
{
  4030c0:	b530      	push	{r4, r5, lr}
  4030c2:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4030c4:	e002      	b.n	4030cc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4030c6:	9b04      	ldr	r3, [sp, #16]
  4030c8:	2b00      	cmp	r3, #0
  4030ca:	da10      	bge.n	4030ee <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4030cc:	2300      	movs	r3, #0
  4030ce:	461a      	mov	r2, r3
  4030d0:	a904      	add	r1, sp, #16
  4030d2:	4839      	ldr	r0, [pc, #228]	; (4031b8 <prvProcessReceivedCommands+0xf8>)
  4030d4:	6800      	ldr	r0, [r0, #0]
  4030d6:	4c39      	ldr	r4, [pc, #228]	; (4031bc <prvProcessReceivedCommands+0xfc>)
  4030d8:	47a0      	blx	r4
  4030da:	2800      	cmp	r0, #0
  4030dc:	d069      	beq.n	4031b2 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4030de:	9b04      	ldr	r3, [sp, #16]
  4030e0:	2b00      	cmp	r3, #0
  4030e2:	daf0      	bge.n	4030c6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4030e4:	9907      	ldr	r1, [sp, #28]
  4030e6:	9806      	ldr	r0, [sp, #24]
  4030e8:	9b05      	ldr	r3, [sp, #20]
  4030ea:	4798      	blx	r3
  4030ec:	e7eb      	b.n	4030c6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4030ee:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4030f0:	6963      	ldr	r3, [r4, #20]
  4030f2:	b113      	cbz	r3, 4030fa <prvProcessReceivedCommands+0x3a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4030f4:	1d20      	adds	r0, r4, #4
  4030f6:	4b32      	ldr	r3, [pc, #200]	; (4031c0 <prvProcessReceivedCommands+0x100>)
  4030f8:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4030fa:	a803      	add	r0, sp, #12
  4030fc:	4b31      	ldr	r3, [pc, #196]	; (4031c4 <prvProcessReceivedCommands+0x104>)
  4030fe:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403100:	9b04      	ldr	r3, [sp, #16]
  403102:	2b09      	cmp	r3, #9
  403104:	d8e2      	bhi.n	4030cc <prvProcessReceivedCommands+0xc>
  403106:	a201      	add	r2, pc, #4	; (adr r2, 40310c <prvProcessReceivedCommands+0x4c>)
  403108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40310c:	00403135 	.word	0x00403135
  403110:	00403135 	.word	0x00403135
  403114:	00403135 	.word	0x00403135
  403118:	004030cd 	.word	0x004030cd
  40311c:	00403181 	.word	0x00403181
  403120:	004031ab 	.word	0x004031ab
  403124:	00403135 	.word	0x00403135
  403128:	00403135 	.word	0x00403135
  40312c:	004030cd 	.word	0x004030cd
  403130:	00403181 	.word	0x00403181
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403134:	9905      	ldr	r1, [sp, #20]
  403136:	69a5      	ldr	r5, [r4, #24]
  403138:	460b      	mov	r3, r1
  40313a:	4602      	mov	r2, r0
  40313c:	4429      	add	r1, r5
  40313e:	4620      	mov	r0, r4
  403140:	4d21      	ldr	r5, [pc, #132]	; (4031c8 <prvProcessReceivedCommands+0x108>)
  403142:	47a8      	blx	r5
  403144:	2801      	cmp	r0, #1
  403146:	d1c1      	bne.n	4030cc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403148:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40314a:	4620      	mov	r0, r4
  40314c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40314e:	69e3      	ldr	r3, [r4, #28]
  403150:	2b01      	cmp	r3, #1
  403152:	d1bb      	bne.n	4030cc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403154:	69a2      	ldr	r2, [r4, #24]
  403156:	2100      	movs	r1, #0
  403158:	9100      	str	r1, [sp, #0]
  40315a:	460b      	mov	r3, r1
  40315c:	9805      	ldr	r0, [sp, #20]
  40315e:	4402      	add	r2, r0
  403160:	4620      	mov	r0, r4
  403162:	4c1a      	ldr	r4, [pc, #104]	; (4031cc <prvProcessReceivedCommands+0x10c>)
  403164:	47a0      	blx	r4
							configASSERT( xResult );
  403166:	2800      	cmp	r0, #0
  403168:	d1b0      	bne.n	4030cc <prvProcessReceivedCommands+0xc>
  40316a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40316e:	b672      	cpsid	i
  403170:	f383 8811 	msr	BASEPRI, r3
  403174:	f3bf 8f6f 	isb	sy
  403178:	f3bf 8f4f 	dsb	sy
  40317c:	b662      	cpsie	i
  40317e:	e7fe      	b.n	40317e <prvProcessReceivedCommands+0xbe>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403180:	9905      	ldr	r1, [sp, #20]
  403182:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403184:	b131      	cbz	r1, 403194 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403186:	4603      	mov	r3, r0
  403188:	4602      	mov	r2, r0
  40318a:	4401      	add	r1, r0
  40318c:	4620      	mov	r0, r4
  40318e:	4c0e      	ldr	r4, [pc, #56]	; (4031c8 <prvProcessReceivedCommands+0x108>)
  403190:	47a0      	blx	r4
					break;
  403192:	e79b      	b.n	4030cc <prvProcessReceivedCommands+0xc>
  403194:	f04f 0380 	mov.w	r3, #128	; 0x80
  403198:	b672      	cpsid	i
  40319a:	f383 8811 	msr	BASEPRI, r3
  40319e:	f3bf 8f6f 	isb	sy
  4031a2:	f3bf 8f4f 	dsb	sy
  4031a6:	b662      	cpsie	i
  4031a8:	e7fe      	b.n	4031a8 <prvProcessReceivedCommands+0xe8>
					vPortFree( pxTimer );
  4031aa:	4620      	mov	r0, r4
  4031ac:	4b08      	ldr	r3, [pc, #32]	; (4031d0 <prvProcessReceivedCommands+0x110>)
  4031ae:	4798      	blx	r3
					break;
  4031b0:	e78c      	b.n	4030cc <prvProcessReceivedCommands+0xc>
}
  4031b2:	b009      	add	sp, #36	; 0x24
  4031b4:	bd30      	pop	{r4, r5, pc}
  4031b6:	bf00      	nop
  4031b8:	2040c378 	.word	0x2040c378
  4031bc:	00401e6d 	.word	0x00401e6d
  4031c0:	00401489 	.word	0x00401489
  4031c4:	00402f95 	.word	0x00402f95
  4031c8:	00402cf9 	.word	0x00402cf9
  4031cc:	00402e8d 	.word	0x00402e8d
  4031d0:	00401831 	.word	0x00401831

004031d4 <prvTimerTask>:
{
  4031d4:	b500      	push	{lr}
  4031d6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  4031d8:	a801      	add	r0, sp, #4
  4031da:	4b04      	ldr	r3, [pc, #16]	; (4031ec <prvTimerTask+0x18>)
  4031dc:	4798      	blx	r3
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  4031de:	9901      	ldr	r1, [sp, #4]
  4031e0:	4b03      	ldr	r3, [pc, #12]	; (4031f0 <prvTimerTask+0x1c>)
  4031e2:	4798      	blx	r3
		prvProcessReceivedCommands();
  4031e4:	4b03      	ldr	r3, [pc, #12]	; (4031f4 <prvTimerTask+0x20>)
  4031e6:	4798      	blx	r3
  4031e8:	e7f6      	b.n	4031d8 <prvTimerTask+0x4>
  4031ea:	bf00      	nop
  4031ec:	00402cd9 	.word	0x00402cd9
  4031f0:	00403039 	.word	0x00403039
  4031f4:	004030c1 	.word	0x004030c1

004031f8 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
  4031f8:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  4031fa:	4603      	mov	r3, r0
  4031fc:	b110      	cbz	r0, 403204 <lv_disp_get_scr_act+0xc>
    if(!disp) {
  4031fe:	b12b      	cbz	r3, 40320c <lv_disp_get_scr_act+0x14>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
  403200:	6c58      	ldr	r0, [r3, #68]	; 0x44
  403202:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403204:	4b02      	ldr	r3, [pc, #8]	; (403210 <lv_disp_get_scr_act+0x18>)
  403206:	4798      	blx	r3
  403208:	4603      	mov	r3, r0
  40320a:	e7f8      	b.n	4031fe <lv_disp_get_scr_act+0x6>
        return NULL;
  40320c:	2000      	movs	r0, #0
}
  40320e:	bd08      	pop	{r3, pc}
  403210:	00413f2d 	.word	0x00413f2d

00403214 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
  403214:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403216:	4603      	mov	r3, r0
  403218:	b110      	cbz	r0, 403220 <lv_disp_get_scr_prev+0xc>
    if(!disp) {
  40321a:	b12b      	cbz	r3, 403228 <lv_disp_get_scr_prev+0x14>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
  40321c:	6c98      	ldr	r0, [r3, #72]	; 0x48
  40321e:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403220:	4b02      	ldr	r3, [pc, #8]	; (40322c <lv_disp_get_scr_prev+0x18>)
  403222:	4798      	blx	r3
  403224:	4603      	mov	r3, r0
  403226:	e7f8      	b.n	40321a <lv_disp_get_scr_prev+0x6>
        return NULL;
  403228:	2000      	movs	r0, #0
}
  40322a:	bd08      	pop	{r3, pc}
  40322c:	00413f2d 	.word	0x00413f2d

00403230 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
  403230:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403232:	4603      	mov	r3, r0
  403234:	b110      	cbz	r0, 40323c <lv_disp_get_layer_top+0xc>
    if(!disp) {
  403236:	b12b      	cbz	r3, 403244 <lv_disp_get_layer_top+0x14>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
  403238:	6d18      	ldr	r0, [r3, #80]	; 0x50
  40323a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  40323c:	4b02      	ldr	r3, [pc, #8]	; (403248 <lv_disp_get_layer_top+0x18>)
  40323e:	4798      	blx	r3
  403240:	4603      	mov	r3, r0
  403242:	e7f8      	b.n	403236 <lv_disp_get_layer_top+0x6>
        return NULL;
  403244:	2000      	movs	r0, #0
}
  403246:	bd08      	pop	{r3, pc}
  403248:	00413f2d 	.word	0x00413f2d

0040324c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
  40324c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  40324e:	4603      	mov	r3, r0
  403250:	b110      	cbz	r0, 403258 <lv_disp_get_layer_sys+0xc>
    if(!disp) {
  403252:	b12b      	cbz	r3, 403260 <lv_disp_get_layer_sys+0x14>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
  403254:	6d58      	ldr	r0, [r3, #84]	; 0x54
  403256:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403258:	4b02      	ldr	r3, [pc, #8]	; (403264 <lv_disp_get_layer_sys+0x18>)
  40325a:	4798      	blx	r3
  40325c:	4603      	mov	r3, r0
  40325e:	e7f8      	b.n	403252 <lv_disp_get_layer_sys+0x6>
        return NULL;
  403260:	2000      	movs	r0, #0
}
  403262:	bd08      	pop	{r3, pc}
  403264:	00413f2d 	.word	0x00413f2d

00403268 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
  403268:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
  40326a:	2400      	movs	r4, #0
    while(i != NULL) {
  40326c:	e001      	b.n	403272 <obj_to_foreground+0xa>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
  40326e:	4b07      	ldr	r3, [pc, #28]	; (40328c <obj_to_foreground+0x24>)
  403270:	4798      	blx	r3
    while(i != NULL) {
  403272:	b130      	cbz	r0, 403282 <obj_to_foreground+0x1a>
        if(i->top != 0) last_top = i;
  403274:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403278:	f013 0f20 	tst.w	r3, #32
  40327c:	d0f7      	beq.n	40326e <obj_to_foreground+0x6>
  40327e:	4604      	mov	r4, r0
  403280:	e7f5      	b.n	40326e <obj_to_foreground+0x6>
    }

    if(last_top != NULL) {
  403282:	b114      	cbz	r4, 40328a <obj_to_foreground+0x22>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
  403284:	4620      	mov	r0, r4
  403286:	4b02      	ldr	r3, [pc, #8]	; (403290 <obj_to_foreground+0x28>)
  403288:	4798      	blx	r3
  40328a:	bd10      	pop	{r4, pc}
  40328c:	004052ad 	.word	0x004052ad
  403290:	004058a9 	.word	0x004058a9

00403294 <focus_next_core>:
{
  403294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(group->frozen) return;
  403298:	7d03      	ldrb	r3, [r0, #20]
  40329a:	f013 0f01 	tst.w	r3, #1
  40329e:	d15f      	bne.n	403360 <focus_next_core+0xcc>
  4032a0:	4690      	mov	r8, r2
  4032a2:	4689      	mov	r9, r1
  4032a4:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
  4032a6:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
  4032a8:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
  4032aa:	2500      	movs	r5, #0
        if(obj_next == NULL) {
  4032ac:	2c00      	cmp	r4, #0
  4032ae:	d042      	beq.n	403336 <focus_next_core+0xa2>
  4032b0:	2301      	movs	r3, #1
        if(obj_sentinel == NULL) {
  4032b2:	2d00      	cmp	r5, #0
  4032b4:	d04b      	beq.n	40334e <focus_next_core+0xba>
        if(can_move) {
  4032b6:	2b00      	cmp	r3, #0
  4032b8:	d14c      	bne.n	403354 <focus_next_core+0xc0>
        if(obj_next == NULL) continue;
  4032ba:	2c00      	cmp	r4, #0
  4032bc:	d0f6      	beq.n	4032ac <focus_next_core+0x18>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
  4032be:	2100      	movs	r1, #0
  4032c0:	6820      	ldr	r0, [r4, #0]
  4032c2:	4b28      	ldr	r3, [pc, #160]	; (403364 <focus_next_core+0xd0>)
  4032c4:	4798      	blx	r3
  4032c6:	f010 0f20 	tst.w	r0, #32
  4032ca:	d1ef      	bne.n	4032ac <focus_next_core+0x18>
        if(!lv_obj_get_hidden(*obj_next)) break;
  4032cc:	6820      	ldr	r0, [r4, #0]
  4032ce:	4b26      	ldr	r3, [pc, #152]	; (403368 <focus_next_core+0xd4>)
  4032d0:	4798      	blx	r3
  4032d2:	2800      	cmp	r0, #0
  4032d4:	d1ea      	bne.n	4032ac <focus_next_core+0x18>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
  4032d6:	68f3      	ldr	r3, [r6, #12]
  4032d8:	429c      	cmp	r4, r3
  4032da:	d041      	beq.n	403360 <focus_next_core+0xcc>
    if(group->obj_focus) {
  4032dc:	b183      	cbz	r3, 403300 <focus_next_core+0x6c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  4032de:	6818      	ldr	r0, [r3, #0]
  4032e0:	69c3      	ldr	r3, [r0, #28]
  4032e2:	2200      	movs	r2, #0
  4032e4:	2117      	movs	r1, #23
  4032e6:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  4032e8:	68f3      	ldr	r3, [r6, #12]
  4032ea:	2200      	movs	r2, #0
  4032ec:	210e      	movs	r1, #14
  4032ee:	6818      	ldr	r0, [r3, #0]
  4032f0:	4b1e      	ldr	r3, [pc, #120]	; (40336c <focus_next_core+0xd8>)
  4032f2:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  4032f4:	2801      	cmp	r0, #1
  4032f6:	d133      	bne.n	403360 <focus_next_core+0xcc>
        lv_obj_invalidate(*group->obj_focus);
  4032f8:	68f3      	ldr	r3, [r6, #12]
  4032fa:	6818      	ldr	r0, [r3, #0]
  4032fc:	4b1c      	ldr	r3, [pc, #112]	; (403370 <focus_next_core+0xdc>)
  4032fe:	4798      	blx	r3
    group->obj_focus = obj_next;
  403300:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403302:	6820      	ldr	r0, [r4, #0]
  403304:	69c3      	ldr	r3, [r0, #28]
  403306:	2200      	movs	r2, #0
  403308:	2116      	movs	r1, #22
  40330a:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  40330c:	68f3      	ldr	r3, [r6, #12]
  40330e:	2200      	movs	r2, #0
  403310:	210d      	movs	r1, #13
  403312:	6818      	ldr	r0, [r3, #0]
  403314:	4b15      	ldr	r3, [pc, #84]	; (40336c <focus_next_core+0xd8>)
  403316:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  403318:	2801      	cmp	r0, #1
  40331a:	d121      	bne.n	403360 <focus_next_core+0xcc>
    obj_to_foreground(*group->obj_focus);
  40331c:	68f3      	ldr	r3, [r6, #12]
  40331e:	6818      	ldr	r0, [r3, #0]
  403320:	4b14      	ldr	r3, [pc, #80]	; (403374 <focus_next_core+0xe0>)
  403322:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
  403324:	68f3      	ldr	r3, [r6, #12]
  403326:	6818      	ldr	r0, [r3, #0]
  403328:	4b11      	ldr	r3, [pc, #68]	; (403370 <focus_next_core+0xdc>)
  40332a:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
  40332c:	6933      	ldr	r3, [r6, #16]
  40332e:	b1bb      	cbz	r3, 403360 <focus_next_core+0xcc>
  403330:	4630      	mov	r0, r6
  403332:	4798      	blx	r3
  403334:	e014      	b.n	403360 <focus_next_core+0xcc>
            if(group->wrap || obj_sentinel == NULL) {
  403336:	7d33      	ldrb	r3, [r6, #20]
  403338:	f013 0f10 	tst.w	r3, #16
  40333c:	d100      	bne.n	403340 <focus_next_core+0xac>
  40333e:	b97d      	cbnz	r5, 403360 <focus_next_core+0xcc>
                if(!can_begin) return;
  403340:	b177      	cbz	r7, 403360 <focus_next_core+0xcc>
                obj_next  = begin(&group->obj_ll);
  403342:	4630      	mov	r0, r6
  403344:	47c8      	blx	r9
  403346:	4604      	mov	r4, r0
                can_begin = false;
  403348:	2700      	movs	r7, #0
                can_move  = false;
  40334a:	463b      	mov	r3, r7
                can_begin = false;
  40334c:	e7b1      	b.n	4032b2 <focus_next_core+0x1e>
            if(obj_sentinel == NULL) return; /*Group is empty*/
  40334e:	b13c      	cbz	r4, 403360 <focus_next_core+0xcc>
            obj_sentinel = obj_next;
  403350:	4625      	mov	r5, r4
  403352:	e7b0      	b.n	4032b6 <focus_next_core+0x22>
            obj_next = move(&group->obj_ll, obj_next);
  403354:	4621      	mov	r1, r4
  403356:	4630      	mov	r0, r6
  403358:	47c0      	blx	r8
  40335a:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
  40335c:	4285      	cmp	r5, r0
  40335e:	d1ac      	bne.n	4032ba <focus_next_core+0x26>
  403360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403364:	00406541 	.word	0x00406541
  403368:	0040569d 	.word	0x0040569d
  40336c:	00405229 	.word	0x00405229
  403370:	0040582d 	.word	0x0040582d
  403374:	00403269 	.word	0x00403269

00403378 <_lv_group_init>:
{
  403378:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
  40337a:	2118      	movs	r1, #24
  40337c:	4801      	ldr	r0, [pc, #4]	; (403384 <_lv_group_init+0xc>)
  40337e:	4b02      	ldr	r3, [pc, #8]	; (403388 <_lv_group_init+0x10>)
  403380:	4798      	blx	r3
  403382:	bd08      	pop	{r3, pc}
  403384:	2043a2d8 	.word	0x2043a2d8
  403388:	004152cb 	.word	0x004152cb

0040338c <lv_group_focus_next>:
{
  40338c:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
  40338e:	4a02      	ldr	r2, [pc, #8]	; (403398 <lv_group_focus_next+0xc>)
  403390:	4902      	ldr	r1, [pc, #8]	; (40339c <lv_group_focus_next+0x10>)
  403392:	4b03      	ldr	r3, [pc, #12]	; (4033a0 <lv_group_focus_next+0x14>)
  403394:	4798      	blx	r3
  403396:	bd08      	pop	{r3, pc}
  403398:	00415389 	.word	0x00415389
  40339c:	00415375 	.word	0x00415375
  4033a0:	00403295 	.word	0x00403295

004033a4 <lv_group_focus_prev>:
{
  4033a4:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
  4033a6:	4a02      	ldr	r2, [pc, #8]	; (4033b0 <lv_group_focus_prev+0xc>)
  4033a8:	4902      	ldr	r1, [pc, #8]	; (4033b4 <lv_group_focus_prev+0x10>)
  4033aa:	4b03      	ldr	r3, [pc, #12]	; (4033b8 <lv_group_focus_prev+0x14>)
  4033ac:	4798      	blx	r3
  4033ae:	bd08      	pop	{r3, pc}
  4033b0:	00415397 	.word	0x00415397
  4033b4:	0041537f 	.word	0x0041537f
  4033b8:	00403295 	.word	0x00403295

004033bc <lv_group_refocus>:
{
  4033bc:	b538      	push	{r3, r4, r5, lr}
  4033be:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
  4033c0:	7d03      	ldrb	r3, [r0, #20]
  4033c2:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
  4033c6:	f043 0310 	orr.w	r3, r3, #16
  4033ca:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
  4033cc:	f013 0f08 	tst.w	r3, #8
  4033d0:	d006      	beq.n	4033e0 <lv_group_refocus+0x24>
        lv_group_focus_prev(g);
  4033d2:	4b05      	ldr	r3, [pc, #20]	; (4033e8 <lv_group_refocus+0x2c>)
  4033d4:	4798      	blx	r3
    g->wrap = temp_wrap;
  4033d6:	7d23      	ldrb	r3, [r4, #20]
  4033d8:	f365 1304 	bfi	r3, r5, #4, #1
  4033dc:	7523      	strb	r3, [r4, #20]
  4033de:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_next(g);
  4033e0:	4b02      	ldr	r3, [pc, #8]	; (4033ec <lv_group_refocus+0x30>)
  4033e2:	4798      	blx	r3
  4033e4:	e7f7      	b.n	4033d6 <lv_group_refocus+0x1a>
  4033e6:	bf00      	nop
  4033e8:	004033a5 	.word	0x004033a5
  4033ec:	0040338d 	.word	0x0040338d

004033f0 <lv_group_add_obj>:
    if(group == NULL) return;
  4033f0:	2800      	cmp	r0, #0
  4033f2:	d031      	beq.n	403458 <lv_group_add_obj+0x68>
{
  4033f4:	b570      	push	{r4, r5, r6, lr}
  4033f6:	4605      	mov	r5, r0
  4033f8:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
  4033fa:	4606      	mov	r6, r0
  4033fc:	4b17      	ldr	r3, [pc, #92]	; (40345c <lv_group_add_obj+0x6c>)
  4033fe:	4798      	blx	r3
  403400:	b138      	cbz	r0, 403412 <lv_group_add_obj+0x22>
        if((*obj_i) == obj) {
  403402:	6803      	ldr	r3, [r0, #0]
  403404:	42a3      	cmp	r3, r4
  403406:	d01c      	beq.n	403442 <lv_group_add_obj+0x52>
    _LV_LL_READ(group->obj_ll, obj_i) {
  403408:	4601      	mov	r1, r0
  40340a:	4630      	mov	r0, r6
  40340c:	4b14      	ldr	r3, [pc, #80]	; (403460 <lv_group_add_obj+0x70>)
  40340e:	4798      	blx	r3
  403410:	e7f6      	b.n	403400 <lv_group_add_obj+0x10>
    if(obj->group_p) {
  403412:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403414:	b133      	cbz	r3, 403424 <lv_group_add_obj+0x34>
        if(lv_obj_is_focused(obj)) {
  403416:	4620      	mov	r0, r4
  403418:	4b12      	ldr	r3, [pc, #72]	; (403464 <lv_group_add_obj+0x74>)
  40341a:	4798      	blx	r3
  40341c:	b110      	cbz	r0, 403424 <lv_group_add_obj+0x34>
            lv_group_refocus(obj->group_p);
  40341e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  403420:	4b11      	ldr	r3, [pc, #68]	; (403468 <lv_group_add_obj+0x78>)
  403422:	4798      	blx	r3
    obj->group_p     = group;
  403424:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
  403426:	4628      	mov	r0, r5
  403428:	4b10      	ldr	r3, [pc, #64]	; (40346c <lv_group_add_obj+0x7c>)
  40342a:	4798      	blx	r3
  40342c:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
  40342e:	4b10      	ldr	r3, [pc, #64]	; (403470 <lv_group_add_obj+0x80>)
  403430:	4798      	blx	r3
  403432:	b138      	cbz	r0, 403444 <lv_group_add_obj+0x54>
    if(next == NULL) return;
  403434:	b12e      	cbz	r6, 403442 <lv_group_add_obj+0x52>
    *next = obj;
  403436:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
  403438:	4628      	mov	r0, r5
  40343a:	4b08      	ldr	r3, [pc, #32]	; (40345c <lv_group_add_obj+0x6c>)
  40343c:	4798      	blx	r3
  40343e:	4286      	cmp	r6, r0
  403440:	d006      	beq.n	403450 <lv_group_add_obj+0x60>
  403442:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(next);
  403444:	4632      	mov	r2, r6
  403446:	2300      	movs	r3, #0
  403448:	480a      	ldr	r0, [pc, #40]	; (403474 <lv_group_add_obj+0x84>)
  40344a:	490b      	ldr	r1, [pc, #44]	; (403478 <lv_group_add_obj+0x88>)
  40344c:	4788      	blx	r1
  40344e:	e7fe      	b.n	40344e <lv_group_add_obj+0x5e>
        lv_group_refocus(group);
  403450:	4628      	mov	r0, r5
  403452:	4b05      	ldr	r3, [pc, #20]	; (403468 <lv_group_add_obj+0x78>)
  403454:	4798      	blx	r3
  403456:	e7f4      	b.n	403442 <lv_group_add_obj+0x52>
  403458:	4770      	bx	lr
  40345a:	bf00      	nop
  40345c:	00415375 	.word	0x00415375
  403460:	00415389 	.word	0x00415389
  403464:	00407679 	.word	0x00407679
  403468:	004033bd 	.word	0x004033bd
  40346c:	00415329 	.word	0x00415329
  403470:	00415065 	.word	0x00415065
  403474:	00421264 	.word	0x00421264
  403478:	00415071 	.word	0x00415071

0040347c <lv_group_get_focused>:
    if(!group) return NULL;
  40347c:	b118      	cbz	r0, 403486 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
  40347e:	68c3      	ldr	r3, [r0, #12]
  403480:	b11b      	cbz	r3, 40348a <lv_group_get_focused+0xe>
    return *group->obj_focus;
  403482:	6818      	ldr	r0, [r3, #0]
  403484:	4770      	bx	lr
    if(!group) return NULL;
  403486:	2000      	movs	r0, #0
  403488:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
  40348a:	2000      	movs	r0, #0
}
  40348c:	4770      	bx	lr
	...

00403490 <lv_group_send_data>:
{
  403490:	b510      	push	{r4, lr}
  403492:	b082      	sub	sp, #8
  403494:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
  403496:	4b0a      	ldr	r3, [pc, #40]	; (4034c0 <lv_group_send_data+0x30>)
  403498:	4798      	blx	r3
    if(act == NULL) return LV_RES_OK;
  40349a:	b170      	cbz	r0, 4034ba <lv_group_send_data+0x2a>
  40349c:	4604      	mov	r4, r0
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
  40349e:	69c3      	ldr	r3, [r0, #28]
  4034a0:	aa01      	add	r2, sp, #4
  4034a2:	2118      	movs	r1, #24
  4034a4:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  4034a6:	2801      	cmp	r0, #1
  4034a8:	d001      	beq.n	4034ae <lv_group_send_data+0x1e>
}
  4034aa:	b002      	add	sp, #8
  4034ac:	bd10      	pop	{r4, pc}
    res = lv_event_send(act, LV_EVENT_KEY, &c);
  4034ae:	aa01      	add	r2, sp, #4
  4034b0:	210c      	movs	r1, #12
  4034b2:	4620      	mov	r0, r4
  4034b4:	4b03      	ldr	r3, [pc, #12]	; (4034c4 <lv_group_send_data+0x34>)
  4034b6:	4798      	blx	r3
  4034b8:	e7f7      	b.n	4034aa <lv_group_send_data+0x1a>
    if(act == NULL) return LV_RES_OK;
  4034ba:	2001      	movs	r0, #1
  4034bc:	e7f5      	b.n	4034aa <lv_group_send_data+0x1a>
  4034be:	bf00      	nop
  4034c0:	0040347d 	.word	0x0040347d
  4034c4:	00405229 	.word	0x00405229

004034c8 <lv_group_set_editing>:
    if(group == NULL) return;
  4034c8:	b1f8      	cbz	r0, 40350a <lv_group_set_editing+0x42>
{
  4034ca:	b538      	push	{r3, r4, r5, lr}
  4034cc:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
  4034ce:	7d03      	ldrb	r3, [r0, #20]
  4034d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
  4034d4:	4299      	cmp	r1, r3
  4034d6:	d013      	beq.n	403500 <lv_group_set_editing+0x38>
    group->editing     = en_val;
  4034d8:	7d03      	ldrb	r3, [r0, #20]
  4034da:	f361 0341 	bfi	r3, r1, #1, #1
  4034de:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
  4034e0:	4b0a      	ldr	r3, [pc, #40]	; (40350c <lv_group_set_editing+0x44>)
  4034e2:	4798      	blx	r3
    if(focused) {
  4034e4:	4605      	mov	r5, r0
  4034e6:	b158      	cbz	r0, 403500 <lv_group_set_editing+0x38>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
  4034e8:	69c3      	ldr	r3, [r0, #28]
  4034ea:	2200      	movs	r2, #0
  4034ec:	2116      	movs	r1, #22
  4034ee:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  4034f0:	68e3      	ldr	r3, [r4, #12]
  4034f2:	2200      	movs	r2, #0
  4034f4:	210d      	movs	r1, #13
  4034f6:	6818      	ldr	r0, [r3, #0]
  4034f8:	4b05      	ldr	r3, [pc, #20]	; (403510 <lv_group_set_editing+0x48>)
  4034fa:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  4034fc:	2801      	cmp	r0, #1
  4034fe:	d000      	beq.n	403502 <lv_group_set_editing+0x3a>
  403500:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(focused);
  403502:	4628      	mov	r0, r5
  403504:	4b03      	ldr	r3, [pc, #12]	; (403514 <lv_group_set_editing+0x4c>)
  403506:	4798      	blx	r3
  403508:	e7fa      	b.n	403500 <lv_group_set_editing+0x38>
  40350a:	4770      	bx	lr
  40350c:	0040347d 	.word	0x0040347d
  403510:	00405229 	.word	0x00405229
  403514:	0040582d 	.word	0x0040582d

00403518 <lv_group_focus_obj>:
    if(obj == NULL) return;
  403518:	2800      	cmp	r0, #0
  40351a:	d04e      	beq.n	4035ba <lv_group_focus_obj+0xa2>
{
  40351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40351e:	4605      	mov	r5, r0
    lv_group_t * g = obj->group_p;
  403520:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if(g == NULL) return;
  403522:	b356      	cbz	r6, 40357a <lv_group_focus_obj+0x62>
    if(g->frozen != 0) return;
  403524:	7d33      	ldrb	r3, [r6, #20]
  403526:	f013 0f01 	tst.w	r3, #1
  40352a:	d126      	bne.n	40357a <lv_group_focus_obj+0x62>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
  40352c:	68f3      	ldr	r3, [r6, #12]
  40352e:	b113      	cbz	r3, 403536 <lv_group_focus_obj+0x1e>
  403530:	681b      	ldr	r3, [r3, #0]
  403532:	4298      	cmp	r0, r3
  403534:	d021      	beq.n	40357a <lv_group_focus_obj+0x62>
    lv_group_set_editing(g, false);
  403536:	2100      	movs	r1, #0
  403538:	4630      	mov	r0, r6
  40353a:	4b20      	ldr	r3, [pc, #128]	; (4035bc <lv_group_focus_obj+0xa4>)
  40353c:	4798      	blx	r3
    _LV_LL_READ(g->obj_ll, i) {
  40353e:	4637      	mov	r7, r6
  403540:	4630      	mov	r0, r6
  403542:	4b1f      	ldr	r3, [pc, #124]	; (4035c0 <lv_group_focus_obj+0xa8>)
  403544:	4798      	blx	r3
  403546:	4604      	mov	r4, r0
  403548:	b1bc      	cbz	r4, 40357a <lv_group_focus_obj+0x62>
        if(*i == obj) {
  40354a:	6823      	ldr	r3, [r4, #0]
  40354c:	429d      	cmp	r5, r3
  40354e:	d005      	beq.n	40355c <lv_group_focus_obj+0x44>
    _LV_LL_READ(g->obj_ll, i) {
  403550:	4621      	mov	r1, r4
  403552:	4638      	mov	r0, r7
  403554:	4b1b      	ldr	r3, [pc, #108]	; (4035c4 <lv_group_focus_obj+0xac>)
  403556:	4798      	blx	r3
  403558:	4604      	mov	r4, r0
  40355a:	e7f5      	b.n	403548 <lv_group_focus_obj+0x30>
            if(g->obj_focus != NULL) {
  40355c:	68f3      	ldr	r3, [r6, #12]
  40355e:	b18b      	cbz	r3, 403584 <lv_group_focus_obj+0x6c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  403560:	6818      	ldr	r0, [r3, #0]
  403562:	69c3      	ldr	r3, [r0, #28]
  403564:	2200      	movs	r2, #0
  403566:	2117      	movs	r1, #23
  403568:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  40356a:	68f3      	ldr	r3, [r6, #12]
  40356c:	2200      	movs	r2, #0
  40356e:	210e      	movs	r1, #14
  403570:	6818      	ldr	r0, [r3, #0]
  403572:	4b15      	ldr	r3, [pc, #84]	; (4035c8 <lv_group_focus_obj+0xb0>)
  403574:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403576:	2801      	cmp	r0, #1
  403578:	d000      	beq.n	40357c <lv_group_focus_obj+0x64>
  40357a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_obj_invalidate(*g->obj_focus);
  40357c:	68f3      	ldr	r3, [r6, #12]
  40357e:	6818      	ldr	r0, [r3, #0]
  403580:	4b12      	ldr	r3, [pc, #72]	; (4035cc <lv_group_focus_obj+0xb4>)
  403582:	4798      	blx	r3
            g->obj_focus = i;
  403584:	60f4      	str	r4, [r6, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403586:	6820      	ldr	r0, [r4, #0]
  403588:	69c3      	ldr	r3, [r0, #28]
  40358a:	2200      	movs	r2, #0
  40358c:	2116      	movs	r1, #22
  40358e:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
  403590:	6933      	ldr	r3, [r6, #16]
  403592:	b10b      	cbz	r3, 403598 <lv_group_focus_obj+0x80>
  403594:	4630      	mov	r0, r6
  403596:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
  403598:	68f3      	ldr	r3, [r6, #12]
  40359a:	2200      	movs	r2, #0
  40359c:	210d      	movs	r1, #13
  40359e:	6818      	ldr	r0, [r3, #0]
  4035a0:	4b09      	ldr	r3, [pc, #36]	; (4035c8 <lv_group_focus_obj+0xb0>)
  4035a2:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  4035a4:	2801      	cmp	r0, #1
  4035a6:	d1e8      	bne.n	40357a <lv_group_focus_obj+0x62>
                lv_obj_invalidate(*g->obj_focus);
  4035a8:	68f3      	ldr	r3, [r6, #12]
  4035aa:	6818      	ldr	r0, [r3, #0]
  4035ac:	4b07      	ldr	r3, [pc, #28]	; (4035cc <lv_group_focus_obj+0xb4>)
  4035ae:	4798      	blx	r3
                obj_to_foreground(*g->obj_focus);
  4035b0:	68f3      	ldr	r3, [r6, #12]
  4035b2:	6818      	ldr	r0, [r3, #0]
  4035b4:	4b06      	ldr	r3, [pc, #24]	; (4035d0 <lv_group_focus_obj+0xb8>)
  4035b6:	4798      	blx	r3
  4035b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4035ba:	4770      	bx	lr
  4035bc:	004034c9 	.word	0x004034c9
  4035c0:	00415375 	.word	0x00415375
  4035c4:	00415389 	.word	0x00415389
  4035c8:	00405229 	.word	0x00405229
  4035cc:	0040582d 	.word	0x0040582d
  4035d0:	00403269 	.word	0x00403269

004035d4 <lv_group_get_editing>:
    if(!group) return false;
  4035d4:	b118      	cbz	r0, 4035de <lv_group_get_editing+0xa>
    return group->editing ? true : false;
  4035d6:	7d00      	ldrb	r0, [r0, #20]
  4035d8:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4035dc:	4770      	bx	lr
    if(!group) return false;
  4035de:	2000      	movs	r0, #0
}
  4035e0:	4770      	bx	lr
	...

004035e4 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
  4035e4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4035e8:	f013 0f02 	tst.w	r3, #2
  4035ec:	d022      	beq.n	403634 <indev_proc_reset_query_handler+0x50>
{
  4035ee:	b410      	push	{r4}
        indev->proc.types.pointer.act_obj           = NULL;
  4035f0:	2300      	movs	r3, #0
  4035f2:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
  4035f4:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
  4035f6:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
        indev->proc.long_pr_sent                    = 0;
  4035fa:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
  4035fe:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
  403600:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
  403602:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
  403604:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  403606:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  40360a:	2403      	movs	r4, #3
  40360c:	f364 0184 	bfi	r1, r4, #2, #3
  403610:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
  403614:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
  403616:	8643      	strh	r3, [r0, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
  403618:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
  40361c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.reset_query                     = 0;
  403620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  403624:	f363 0241 	bfi	r2, r3, #1, #1
  403628:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev_obj_act                               = NULL;
  40362c:	4a02      	ldr	r2, [pc, #8]	; (403638 <indev_proc_reset_query_handler+0x54>)
  40362e:	6013      	str	r3, [r2, #0]
    }
}
  403630:	f85d 4b04 	ldr.w	r4, [sp], #4
  403634:	4770      	bx	lr
  403636:	bf00      	nop
  403638:	2040c380 	.word	0x2040c380

0040363c <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
  40363c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  403640:	f010 0002 	ands.w	r0, r0, #2
  403644:	d002      	beq.n	40364c <indev_reset_check+0x10>
        indev_obj_act = NULL;
  403646:	2200      	movs	r2, #0
  403648:	4b02      	ldr	r3, [pc, #8]	; (403654 <indev_reset_check+0x18>)
  40364a:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
  40364c:	3000      	adds	r0, #0
  40364e:	bf18      	it	ne
  403650:	2001      	movne	r0, #1
  403652:	4770      	bx	lr
  403654:	2040c380 	.word	0x2040c380

00403658 <get_dragged_obj>:
{
  403658:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  40365a:	4604      	mov	r4, r0
  40365c:	b920      	cbnz	r0, 403668 <get_dragged_obj+0x10>
  40365e:	e009      	b.n	403674 <get_dragged_obj+0x1c>
        drag_obj = lv_obj_get_parent(drag_obj);
  403660:	4620      	mov	r0, r4
  403662:	4b05      	ldr	r3, [pc, #20]	; (403678 <get_dragged_obj+0x20>)
  403664:	4798      	blx	r3
  403666:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
  403668:	4620      	mov	r0, r4
  40366a:	4b04      	ldr	r3, [pc, #16]	; (40367c <get_dragged_obj+0x24>)
  40366c:	4798      	blx	r3
  40366e:	b108      	cbz	r0, 403674 <get_dragged_obj+0x1c>
  403670:	2c00      	cmp	r4, #0
  403672:	d1f5      	bne.n	403660 <get_dragged_obj+0x8>
}
  403674:	4620      	mov	r0, r4
  403676:	bd10      	pop	{r4, pc}
  403678:	004052ad 	.word	0x004052ad
  40367c:	004060a1 	.word	0x004060a1

00403680 <indev_drag_throw>:
    if(proc->types.pointer.drag_in_prog == 0) return;
  403680:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403684:	f013 0f02 	tst.w	r3, #2
  403688:	d100      	bne.n	40368c <indev_drag_throw+0xc>
  40368a:	4770      	bx	lr
{
  40368c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40368e:	b085      	sub	sp, #20
  403690:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
  403692:	69c0      	ldr	r0, [r0, #28]
  403694:	4b64      	ldr	r3, [pc, #400]	; (403828 <indev_drag_throw+0x1a8>)
  403696:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403698:	4605      	mov	r5, r0
  40369a:	b190      	cbz	r0, 4036c2 <indev_drag_throw+0x42>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
  40369c:	4b63      	ldr	r3, [pc, #396]	; (40382c <indev_drag_throw+0x1ac>)
  40369e:	4798      	blx	r3
  4036a0:	b9b8      	cbnz	r0, 4036d2 <indev_drag_throw+0x52>
        proc->types.pointer.drag_in_prog = 0;
  4036a2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4036a6:	f36f 0341 	bfc	r3, #1, #1
  4036aa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  4036ae:	69eb      	ldr	r3, [r5, #28]
  4036b0:	4a5f      	ldr	r2, [pc, #380]	; (403830 <indev_drag_throw+0x1b0>)
  4036b2:	6812      	ldr	r2, [r2, #0]
  4036b4:	2113      	movs	r1, #19
  4036b6:	4628      	mov	r0, r5
  4036b8:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4036ba:	4620      	mov	r0, r4
  4036bc:	4b5d      	ldr	r3, [pc, #372]	; (403834 <indev_drag_throw+0x1b4>)
  4036be:	4798      	blx	r3
  4036c0:	b108      	cbz	r0, 4036c6 <indev_drag_throw+0x46>
}
  4036c2:	b005      	add	sp, #20
  4036c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  4036c6:	2200      	movs	r2, #0
  4036c8:	2109      	movs	r1, #9
  4036ca:	4628      	mov	r0, r5
  4036cc:	4b5a      	ldr	r3, [pc, #360]	; (403838 <indev_drag_throw+0x1b8>)
  4036ce:	4798      	blx	r3
        return;
  4036d0:	e7f7      	b.n	4036c2 <indev_drag_throw+0x42>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  4036d2:	4628      	mov	r0, r5
  4036d4:	4b59      	ldr	r3, [pc, #356]	; (40383c <indev_drag_throw+0x1bc>)
  4036d6:	4798      	blx	r3
  4036d8:	4606      	mov	r6, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
  4036da:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  4036de:	4a54      	ldr	r2, [pc, #336]	; (403830 <indev_drag_throw+0x1b0>)
  4036e0:	6812      	ldr	r2, [r2, #0]
  4036e2:	7d51      	ldrb	r1, [r2, #21]
  4036e4:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
  4036e8:	fb01 f103 	mul.w	r1, r1, r3
  4036ec:	4854      	ldr	r0, [pc, #336]	; (403840 <indev_drag_throw+0x1c0>)
  4036ee:	fb80 7301 	smull	r7, r3, r0, r1
  4036f2:	17c9      	asrs	r1, r1, #31
  4036f4:	ebc1 1163 	rsb	r1, r1, r3, asr #5
    proc->types.pointer.drag_throw_vect.x =
  4036f8:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
  4036fa:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
  4036fe:	7d53      	ldrb	r3, [r2, #21]
  403700:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  403704:	fb03 f301 	mul.w	r3, r3, r1
  403708:	fb80 1003 	smull	r1, r0, r0, r3
  40370c:	17db      	asrs	r3, r3, #31
  40370e:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    proc->types.pointer.drag_throw_vect.y =
  403712:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
  403714:	6963      	ldr	r3, [r4, #20]
  403716:	2b00      	cmp	r3, #0
  403718:	d06c      	beq.n	4037f4 <indev_drag_throw+0x174>
        lv_obj_get_coords(drag_obj, &coords_ori);
  40371a:	4669      	mov	r1, sp
  40371c:	4628      	mov	r0, r5
  40371e:	4b49      	ldr	r3, [pc, #292]	; (403844 <indev_drag_throw+0x1c4>)
  403720:	4798      	blx	r3
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
  403722:	4628      	mov	r0, r5
  403724:	4b48      	ldr	r3, [pc, #288]	; (403848 <indev_drag_throw+0x1c8>)
  403726:	4798      	blx	r3
  403728:	8aa3      	ldrh	r3, [r4, #20]
  40372a:	fa13 f080 	uxtah	r0, r3, r0
  40372e:	b207      	sxth	r7, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
  403730:	4628      	mov	r0, r5
  403732:	4b46      	ldr	r3, [pc, #280]	; (40384c <indev_drag_throw+0x1cc>)
  403734:	4798      	blx	r3
  403736:	8ae2      	ldrh	r2, [r4, #22]
  403738:	fa12 f280 	uxtah	r2, r2, r0
  40373c:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  40373e:	2e03      	cmp	r6, #3
  403740:	d03c      	beq.n	4037bc <indev_drag_throw+0x13c>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403742:	2e01      	cmp	r6, #1
  403744:	d03f      	beq.n	4037c6 <indev_drag_throw+0x146>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403746:	2e02      	cmp	r6, #2
  403748:	d042      	beq.n	4037d0 <indev_drag_throw+0x150>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  40374a:	2e04      	cmp	r6, #4
  40374c:	d045      	beq.n	4037da <indev_drag_throw+0x15a>
        lv_obj_get_coords(drag_obj, &coord_new);
  40374e:	a902      	add	r1, sp, #8
  403750:	4628      	mov	r0, r5
  403752:	4b3c      	ldr	r3, [pc, #240]	; (403844 <indev_drag_throw+0x1c4>)
  403754:	4798      	blx	r3
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403756:	f9bd 2000 	ldrsh.w	r2, [sp]
  40375a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  40375e:	429a      	cmp	r2, r3
  403760:	d003      	beq.n	40376a <indev_drag_throw+0xea>
  403762:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403766:	2b00      	cmp	r3, #0
  403768:	d1ab      	bne.n	4036c2 <indev_drag_throw+0x42>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  40376a:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  40376e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403772:	429a      	cmp	r2, r3
  403774:	d003      	beq.n	40377e <indev_drag_throw+0xfe>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403776:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  40377a:	2b00      	cmp	r3, #0
  40377c:	d1a1      	bne.n	4036c2 <indev_drag_throw+0x42>
            proc->types.pointer.drag_in_prog      = 0;
  40377e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403782:	f36f 0341 	bfc	r3, #1, #1
  403786:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
  40378a:	2300      	movs	r3, #0
  40378c:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
  40378e:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
  403790:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
  403792:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403794:	69eb      	ldr	r3, [r5, #28]
  403796:	4a26      	ldr	r2, [pc, #152]	; (403830 <indev_drag_throw+0x1b0>)
  403798:	6812      	ldr	r2, [r2, #0]
  40379a:	2113      	movs	r1, #19
  40379c:	4628      	mov	r0, r5
  40379e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4037a0:	4620      	mov	r0, r4
  4037a2:	4b24      	ldr	r3, [pc, #144]	; (403834 <indev_drag_throw+0x1b4>)
  4037a4:	4798      	blx	r3
  4037a6:	2800      	cmp	r0, #0
  4037a8:	d18b      	bne.n	4036c2 <indev_drag_throw+0x42>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  4037aa:	2200      	movs	r2, #0
  4037ac:	2109      	movs	r1, #9
  4037ae:	4628      	mov	r0, r5
  4037b0:	4b21      	ldr	r3, [pc, #132]	; (403838 <indev_drag_throw+0x1b8>)
  4037b2:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4037b4:	4620      	mov	r0, r4
  4037b6:	4b1f      	ldr	r3, [pc, #124]	; (403834 <indev_drag_throw+0x1b4>)
  4037b8:	4798      	blx	r3
  4037ba:	e782      	b.n	4036c2 <indev_drag_throw+0x42>
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  4037bc:	4639      	mov	r1, r7
  4037be:	4628      	mov	r0, r5
  4037c0:	4b23      	ldr	r3, [pc, #140]	; (403850 <indev_drag_throw+0x1d0>)
  4037c2:	4798      	blx	r3
  4037c4:	e7c3      	b.n	40374e <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  4037c6:	4639      	mov	r1, r7
  4037c8:	4628      	mov	r0, r5
  4037ca:	4b22      	ldr	r3, [pc, #136]	; (403854 <indev_drag_throw+0x1d4>)
  4037cc:	4798      	blx	r3
  4037ce:	e7be      	b.n	40374e <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  4037d0:	4611      	mov	r1, r2
  4037d2:	4628      	mov	r0, r5
  4037d4:	4b20      	ldr	r3, [pc, #128]	; (403858 <indev_drag_throw+0x1d8>)
  4037d6:	4798      	blx	r3
  4037d8:	e7b9      	b.n	40374e <indev_drag_throw+0xce>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
  4037da:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  4037de:	b123      	cbz	r3, 4037ea <indev_drag_throw+0x16a>
  4037e0:	4639      	mov	r1, r7
  4037e2:	4628      	mov	r0, r5
  4037e4:	4b1b      	ldr	r3, [pc, #108]	; (403854 <indev_drag_throw+0x1d4>)
  4037e6:	4798      	blx	r3
  4037e8:	e7b1      	b.n	40374e <indev_drag_throw+0xce>
            else lv_obj_set_y(drag_obj, act_y);
  4037ea:	4611      	mov	r1, r2
  4037ec:	4628      	mov	r0, r5
  4037ee:	4b1a      	ldr	r3, [pc, #104]	; (403858 <indev_drag_throw+0x1d8>)
  4037f0:	4798      	blx	r3
  4037f2:	e7ac      	b.n	40374e <indev_drag_throw+0xce>
        proc->types.pointer.drag_in_prog = 0;
  4037f4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4037f8:	f36f 0341 	bfc	r3, #1, #1
  4037fc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403800:	69eb      	ldr	r3, [r5, #28]
  403802:	2113      	movs	r1, #19
  403804:	4628      	mov	r0, r5
  403806:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403808:	4620      	mov	r0, r4
  40380a:	4b0a      	ldr	r3, [pc, #40]	; (403834 <indev_drag_throw+0x1b4>)
  40380c:	4798      	blx	r3
  40380e:	2800      	cmp	r0, #0
  403810:	f47f af57 	bne.w	4036c2 <indev_drag_throw+0x42>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403814:	2200      	movs	r2, #0
  403816:	2109      	movs	r1, #9
  403818:	4628      	mov	r0, r5
  40381a:	4b07      	ldr	r3, [pc, #28]	; (403838 <indev_drag_throw+0x1b8>)
  40381c:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  40381e:	4620      	mov	r0, r4
  403820:	4b04      	ldr	r3, [pc, #16]	; (403834 <indev_drag_throw+0x1b4>)
  403822:	4798      	blx	r3
  403824:	e74d      	b.n	4036c2 <indev_drag_throw+0x42>
  403826:	bf00      	nop
  403828:	00403659 	.word	0x00403659
  40382c:	00406075 	.word	0x00406075
  403830:	2040c37c 	.word	0x2040c37c
  403834:	0040363d 	.word	0x0040363d
  403838:	00405229 	.word	0x00405229
  40383c:	00406049 	.word	0x00406049
  403840:	51eb851f 	.word	0x51eb851f
  403844:	004053c1 	.word	0x004053c1
  403848:	00405401 	.word	0x00405401
  40384c:	00405441 	.word	0x00405441
  403850:	00405911 	.word	0x00405911
  403854:	004059c9 	.word	0x004059c9
  403858:	00405a09 	.word	0x00405a09

0040385c <indev_proc_release>:
{
  40385c:	b538      	push	{r3, r4, r5, lr}
  40385e:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
  403860:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403864:	f013 0f08 	tst.w	r3, #8
  403868:	d00a      	beq.n	403880 <indev_proc_release+0x24>
        proc->types.pointer.act_obj  = NULL;
  40386a:	2300      	movs	r3, #0
  40386c:	6183      	str	r3, [r0, #24]
        proc->types.pointer.last_obj = NULL;
  40386e:	61c3      	str	r3, [r0, #28]
        proc->pr_timestamp           = 0;
  403870:	62c3      	str	r3, [r0, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
  403872:	6303      	str	r3, [r0, #48]	; 0x30
        proc->wait_until_release     = 0;
  403874:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  403878:	f363 02c3 	bfi	r2, r3, #3, #1
  40387c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
  403880:	69a0      	ldr	r0, [r4, #24]
  403882:	4b59      	ldr	r3, [pc, #356]	; (4039e8 <indev_proc_release+0x18c>)
  403884:	6018      	str	r0, [r3, #0]
    if(indev_obj_act) {
  403886:	2800      	cmp	r0, #0
  403888:	f000 8093 	beq.w	4039b2 <indev_proc_release+0x156>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
  40388c:	2110      	movs	r1, #16
  40388e:	4b57      	ldr	r3, [pc, #348]	; (4039ec <indev_proc_release+0x190>)
  403890:	4798      	blx	r3
  403892:	2800      	cmp	r0, #0
  403894:	d038      	beq.n	403908 <indev_proc_release+0xac>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403896:	4b54      	ldr	r3, [pc, #336]	; (4039e8 <indev_proc_release+0x18c>)
  403898:	6818      	ldr	r0, [r3, #0]
  40389a:	69c3      	ldr	r3, [r0, #28]
  40389c:	4a54      	ldr	r2, [pc, #336]	; (4039f0 <indev_proc_release+0x194>)
  40389e:	6812      	ldr	r2, [r2, #0]
  4038a0:	210e      	movs	r1, #14
  4038a2:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4038a4:	4620      	mov	r0, r4
  4038a6:	4b53      	ldr	r3, [pc, #332]	; (4039f4 <indev_proc_release+0x198>)
  4038a8:	4798      	blx	r3
  4038aa:	2800      	cmp	r0, #0
  4038ac:	f040 8088 	bne.w	4039c0 <indev_proc_release+0x164>
            if(proc->types.pointer.drag_in_prog == 0) {
  4038b0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4038b4:	f013 0f02 	tst.w	r3, #2
  4038b8:	d11a      	bne.n	4038f0 <indev_proc_release+0x94>
                if(proc->long_pr_sent == 0) {
  4038ba:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4038be:	f013 0f01 	tst.w	r3, #1
  4038c2:	d10a      	bne.n	4038da <indev_proc_release+0x7e>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4038c4:	2200      	movs	r2, #0
  4038c6:	2103      	movs	r1, #3
  4038c8:	4b47      	ldr	r3, [pc, #284]	; (4039e8 <indev_proc_release+0x18c>)
  4038ca:	6818      	ldr	r0, [r3, #0]
  4038cc:	4b4a      	ldr	r3, [pc, #296]	; (4039f8 <indev_proc_release+0x19c>)
  4038ce:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  4038d0:	4620      	mov	r0, r4
  4038d2:	4b48      	ldr	r3, [pc, #288]	; (4039f4 <indev_proc_release+0x198>)
  4038d4:	4798      	blx	r3
  4038d6:	2800      	cmp	r0, #0
  4038d8:	d172      	bne.n	4039c0 <indev_proc_release+0x164>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4038da:	2200      	movs	r2, #0
  4038dc:	2106      	movs	r1, #6
  4038de:	4b42      	ldr	r3, [pc, #264]	; (4039e8 <indev_proc_release+0x18c>)
  4038e0:	6818      	ldr	r0, [r3, #0]
  4038e2:	4b45      	ldr	r3, [pc, #276]	; (4039f8 <indev_proc_release+0x19c>)
  4038e4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  4038e6:	4620      	mov	r0, r4
  4038e8:	4b42      	ldr	r3, [pc, #264]	; (4039f4 <indev_proc_release+0x198>)
  4038ea:	4798      	blx	r3
  4038ec:	2800      	cmp	r0, #0
  4038ee:	d167      	bne.n	4039c0 <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  4038f0:	2200      	movs	r2, #0
  4038f2:	2107      	movs	r1, #7
  4038f4:	4b3c      	ldr	r3, [pc, #240]	; (4039e8 <indev_proc_release+0x18c>)
  4038f6:	6818      	ldr	r0, [r3, #0]
  4038f8:	4b3f      	ldr	r3, [pc, #252]	; (4039f8 <indev_proc_release+0x19c>)
  4038fa:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4038fc:	4620      	mov	r0, r4
  4038fe:	4b3d      	ldr	r3, [pc, #244]	; (4039f4 <indev_proc_release+0x198>)
  403900:	4798      	blx	r3
  403902:	2800      	cmp	r0, #0
  403904:	d030      	beq.n	403968 <indev_proc_release+0x10c>
  403906:	bd38      	pop	{r3, r4, r5, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403908:	4b37      	ldr	r3, [pc, #220]	; (4039e8 <indev_proc_release+0x18c>)
  40390a:	6818      	ldr	r0, [r3, #0]
  40390c:	69c3      	ldr	r3, [r0, #28]
  40390e:	4a38      	ldr	r2, [pc, #224]	; (4039f0 <indev_proc_release+0x194>)
  403910:	6812      	ldr	r2, [r2, #0]
  403912:	210e      	movs	r1, #14
  403914:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403916:	4620      	mov	r0, r4
  403918:	4b36      	ldr	r3, [pc, #216]	; (4039f4 <indev_proc_release+0x198>)
  40391a:	4798      	blx	r3
  40391c:	2800      	cmp	r0, #0
  40391e:	d14f      	bne.n	4039c0 <indev_proc_release+0x164>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
  403920:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403924:	f013 0f01 	tst.w	r3, #1
  403928:	d104      	bne.n	403934 <indev_proc_release+0xd8>
  40392a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40392e:	f013 0f02 	tst.w	r3, #2
  403932:	d046      	beq.n	4039c2 <indev_proc_release+0x166>
            if(proc->types.pointer.drag_in_prog == 0) {
  403934:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403938:	f013 0f02 	tst.w	r3, #2
  40393c:	d10a      	bne.n	403954 <indev_proc_release+0xf8>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  40393e:	2200      	movs	r2, #0
  403940:	2106      	movs	r1, #6
  403942:	4b29      	ldr	r3, [pc, #164]	; (4039e8 <indev_proc_release+0x18c>)
  403944:	6818      	ldr	r0, [r3, #0]
  403946:	4b2c      	ldr	r3, [pc, #176]	; (4039f8 <indev_proc_release+0x19c>)
  403948:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40394a:	4620      	mov	r0, r4
  40394c:	4b29      	ldr	r3, [pc, #164]	; (4039f4 <indev_proc_release+0x198>)
  40394e:	4798      	blx	r3
  403950:	2800      	cmp	r0, #0
  403952:	d135      	bne.n	4039c0 <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403954:	2200      	movs	r2, #0
  403956:	2107      	movs	r1, #7
  403958:	4b23      	ldr	r3, [pc, #140]	; (4039e8 <indev_proc_release+0x18c>)
  40395a:	6818      	ldr	r0, [r3, #0]
  40395c:	4b26      	ldr	r3, [pc, #152]	; (4039f8 <indev_proc_release+0x19c>)
  40395e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403960:	4620      	mov	r0, r4
  403962:	4b24      	ldr	r3, [pc, #144]	; (4039f4 <indev_proc_release+0x198>)
  403964:	4798      	blx	r3
  403966:	bb58      	cbnz	r0, 4039c0 <indev_proc_release+0x164>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
  403968:	4b1f      	ldr	r3, [pc, #124]	; (4039e8 <indev_proc_release+0x18c>)
  40396a:	6818      	ldr	r0, [r3, #0]
  40396c:	4b23      	ldr	r3, [pc, #140]	; (4039fc <indev_proc_release+0x1a0>)
  40396e:	4798      	blx	r3
        if(drag_obj) {
  403970:	4605      	mov	r5, r0
  403972:	b1d0      	cbz	r0, 4039aa <indev_proc_release+0x14e>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
  403974:	4b22      	ldr	r3, [pc, #136]	; (403a00 <indev_proc_release+0x1a4>)
  403976:	4798      	blx	r3
  403978:	b1b8      	cbz	r0, 4039aa <indev_proc_release+0x14e>
  40397a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40397e:	f013 0f02 	tst.w	r3, #2
  403982:	d012      	beq.n	4039aa <indev_proc_release+0x14e>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
  403984:	69eb      	ldr	r3, [r5, #28]
  403986:	b11b      	cbz	r3, 403990 <indev_proc_release+0x134>
  403988:	2200      	movs	r2, #0
  40398a:	2112      	movs	r1, #18
  40398c:	4628      	mov	r0, r5
  40398e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403990:	4620      	mov	r0, r4
  403992:	4b18      	ldr	r3, [pc, #96]	; (4039f4 <indev_proc_release+0x198>)
  403994:	4798      	blx	r3
  403996:	b998      	cbnz	r0, 4039c0 <indev_proc_release+0x164>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
  403998:	2200      	movs	r2, #0
  40399a:	210a      	movs	r1, #10
  40399c:	4628      	mov	r0, r5
  40399e:	4b16      	ldr	r3, [pc, #88]	; (4039f8 <indev_proc_release+0x19c>)
  4039a0:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  4039a2:	4620      	mov	r0, r4
  4039a4:	4b13      	ldr	r3, [pc, #76]	; (4039f4 <indev_proc_release+0x198>)
  4039a6:	4798      	blx	r3
  4039a8:	b950      	cbnz	r0, 4039c0 <indev_proc_release+0x164>
        proc->types.pointer.act_obj = NULL;
  4039aa:	2300      	movs	r3, #0
  4039ac:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
  4039ae:	62e3      	str	r3, [r4, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
  4039b0:	6323      	str	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
  4039b2:	69e3      	ldr	r3, [r4, #28]
  4039b4:	b123      	cbz	r3, 4039c0 <indev_proc_release+0x164>
  4039b6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4039ba:	f013 0f02 	tst.w	r3, #2
  4039be:	d00c      	beq.n	4039da <indev_proc_release+0x17e>
  4039c0:	bd38      	pop	{r3, r4, r5, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4039c2:	2200      	movs	r2, #0
  4039c4:	2103      	movs	r1, #3
  4039c6:	4b08      	ldr	r3, [pc, #32]	; (4039e8 <indev_proc_release+0x18c>)
  4039c8:	6818      	ldr	r0, [r3, #0]
  4039ca:	4b0b      	ldr	r3, [pc, #44]	; (4039f8 <indev_proc_release+0x19c>)
  4039cc:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  4039ce:	4620      	mov	r0, r4
  4039d0:	4b08      	ldr	r3, [pc, #32]	; (4039f4 <indev_proc_release+0x198>)
  4039d2:	4798      	blx	r3
  4039d4:	2800      	cmp	r0, #0
  4039d6:	d0ad      	beq.n	403934 <indev_proc_release+0xd8>
  4039d8:	e7f2      	b.n	4039c0 <indev_proc_release+0x164>
        indev_drag_throw(proc);
  4039da:	4620      	mov	r0, r4
  4039dc:	4b09      	ldr	r3, [pc, #36]	; (403a04 <indev_proc_release+0x1a8>)
  4039de:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4039e0:	4620      	mov	r0, r4
  4039e2:	4b04      	ldr	r3, [pc, #16]	; (4039f4 <indev_proc_release+0x198>)
  4039e4:	4798      	blx	r3
  4039e6:	e7eb      	b.n	4039c0 <indev_proc_release+0x164>
  4039e8:	2040c380 	.word	0x2040c380
  4039ec:	0040650d 	.word	0x0040650d
  4039f0:	2040c37c 	.word	0x2040c37c
  4039f4:	0040363d 	.word	0x0040363d
  4039f8:	00405229 	.word	0x00405229
  4039fc:	00403659 	.word	0x00403659
  403a00:	00406075 	.word	0x00406075
  403a04:	00403681 	.word	0x00403681

00403a08 <indev_click_focus>:
{
  403a08:	b570      	push	{r4, r5, r6, lr}
  403a0a:	4604      	mov	r4, r0
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
  403a0c:	4d58      	ldr	r5, [pc, #352]	; (403b70 <indev_click_focus+0x168>)
  403a0e:	6828      	ldr	r0, [r5, #0]
  403a10:	4b58      	ldr	r3, [pc, #352]	; (403b74 <indev_click_focus+0x16c>)
  403a12:	4798      	blx	r3
  403a14:	4606      	mov	r6, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403a16:	2120      	movs	r1, #32
  403a18:	6828      	ldr	r0, [r5, #0]
  403a1a:	4b57      	ldr	r3, [pc, #348]	; (403b78 <indev_click_focus+0x170>)
  403a1c:	4798      	blx	r3
  403a1e:	b9e8      	cbnz	r0, 403a5c <indev_click_focus+0x54>
       proc->types.pointer.last_pressed != obj_to_focus) {
  403a20:	6a23      	ldr	r3, [r4, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403a22:	429e      	cmp	r6, r3
  403a24:	d01a      	beq.n	403a5c <indev_click_focus+0x54>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
  403a26:	4630      	mov	r0, r6
  403a28:	4b54      	ldr	r3, [pc, #336]	; (403b7c <indev_click_focus+0x174>)
  403a2a:	4798      	blx	r3
  403a2c:	4605      	mov	r5, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403a2e:	6a20      	ldr	r0, [r4, #32]
  403a30:	b1a8      	cbz	r0, 403a5e <indev_click_focus+0x56>
  403a32:	4b52      	ldr	r3, [pc, #328]	; (403b7c <indev_click_focus+0x174>)
  403a34:	4798      	blx	r3
  403a36:	4603      	mov	r3, r0
        if(g_act == g_prev) {
  403a38:	42ab      	cmp	r3, r5
  403a3a:	d012      	beq.n	403a62 <indev_click_focus+0x5a>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403a3c:	2b00      	cmp	r3, #0
  403a3e:	d044      	beq.n	403aca <indev_click_focus+0xc2>
                if(proc->types.pointer.last_pressed) {
  403a40:	6a20      	ldr	r0, [r4, #32]
  403a42:	2800      	cmp	r0, #0
  403a44:	d074      	beq.n	403b30 <indev_click_focus+0x128>
                    if(g_prev == NULL) {
  403a46:	2b00      	cmp	r3, #0
  403a48:	d055      	beq.n	403af6 <indev_click_focus+0xee>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
  403a4a:	2200      	movs	r2, #0
  403a4c:	2115      	movs	r1, #21
  403a4e:	4b4c      	ldr	r3, [pc, #304]	; (403b80 <indev_click_focus+0x178>)
  403a50:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403a52:	4620      	mov	r0, r4
  403a54:	4b4b      	ldr	r3, [pc, #300]	; (403b84 <indev_click_focus+0x17c>)
  403a56:	4798      	blx	r3
  403a58:	2800      	cmp	r0, #0
  403a5a:	d05f      	beq.n	403b1c <indev_click_focus+0x114>
  403a5c:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403a5e:	2300      	movs	r3, #0
  403a60:	e7ea      	b.n	403a38 <indev_click_focus+0x30>
            if(g_act) {
  403a62:	b145      	cbz	r5, 403a76 <indev_click_focus+0x6e>
                lv_group_focus_obj(obj_to_focus);
  403a64:	4630      	mov	r0, r6
  403a66:	4b48      	ldr	r3, [pc, #288]	; (403b88 <indev_click_focus+0x180>)
  403a68:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403a6a:	4620      	mov	r0, r4
  403a6c:	4b45      	ldr	r3, [pc, #276]	; (403b84 <indev_click_focus+0x17c>)
  403a6e:	4798      	blx	r3
  403a70:	2800      	cmp	r0, #0
  403a72:	d065      	beq.n	403b40 <indev_click_focus+0x138>
  403a74:	bd70      	pop	{r4, r5, r6, pc}
                if(proc->types.pointer.last_pressed) {
  403a76:	6a20      	ldr	r0, [r4, #32]
  403a78:	b190      	cbz	r0, 403aa0 <indev_click_focus+0x98>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403a7a:	2200      	movs	r2, #0
  403a7c:	2117      	movs	r1, #23
  403a7e:	4b40      	ldr	r3, [pc, #256]	; (403b80 <indev_click_focus+0x178>)
  403a80:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403a82:	4620      	mov	r0, r4
  403a84:	4b3f      	ldr	r3, [pc, #252]	; (403b84 <indev_click_focus+0x17c>)
  403a86:	4798      	blx	r3
  403a88:	2800      	cmp	r0, #0
  403a8a:	d1e7      	bne.n	403a5c <indev_click_focus+0x54>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403a8c:	2200      	movs	r2, #0
  403a8e:	210e      	movs	r1, #14
  403a90:	6a20      	ldr	r0, [r4, #32]
  403a92:	4b3e      	ldr	r3, [pc, #248]	; (403b8c <indev_click_focus+0x184>)
  403a94:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403a96:	4620      	mov	r0, r4
  403a98:	4b3a      	ldr	r3, [pc, #232]	; (403b84 <indev_click_focus+0x17c>)
  403a9a:	4798      	blx	r3
  403a9c:	2800      	cmp	r0, #0
  403a9e:	d1dd      	bne.n	403a5c <indev_click_focus+0x54>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403aa0:	2200      	movs	r2, #0
  403aa2:	2116      	movs	r1, #22
  403aa4:	4630      	mov	r0, r6
  403aa6:	4b36      	ldr	r3, [pc, #216]	; (403b80 <indev_click_focus+0x178>)
  403aa8:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403aaa:	4620      	mov	r0, r4
  403aac:	4b35      	ldr	r3, [pc, #212]	; (403b84 <indev_click_focus+0x17c>)
  403aae:	4798      	blx	r3
  403ab0:	2800      	cmp	r0, #0
  403ab2:	d1d3      	bne.n	403a5c <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403ab4:	2200      	movs	r2, #0
  403ab6:	210d      	movs	r1, #13
  403ab8:	4630      	mov	r0, r6
  403aba:	4b34      	ldr	r3, [pc, #208]	; (403b8c <indev_click_focus+0x184>)
  403abc:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403abe:	4620      	mov	r0, r4
  403ac0:	4b30      	ldr	r3, [pc, #192]	; (403b84 <indev_click_focus+0x17c>)
  403ac2:	4798      	blx	r3
  403ac4:	2800      	cmp	r0, #0
  403ac6:	d03b      	beq.n	403b40 <indev_click_focus+0x138>
  403ac8:	bd70      	pop	{r4, r5, r6, pc}
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403aca:	6a20      	ldr	r0, [r4, #32]
  403acc:	2800      	cmp	r0, #0
  403ace:	d0b7      	beq.n	403a40 <indev_click_focus+0x38>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403ad0:	2200      	movs	r2, #0
  403ad2:	2117      	movs	r1, #23
  403ad4:	4b2a      	ldr	r3, [pc, #168]	; (403b80 <indev_click_focus+0x178>)
  403ad6:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403ad8:	4620      	mov	r0, r4
  403ada:	4b2a      	ldr	r3, [pc, #168]	; (403b84 <indev_click_focus+0x17c>)
  403adc:	4798      	blx	r3
  403ade:	2800      	cmp	r0, #0
  403ae0:	d1bc      	bne.n	403a5c <indev_click_focus+0x54>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403ae2:	2200      	movs	r2, #0
  403ae4:	210e      	movs	r1, #14
  403ae6:	6a20      	ldr	r0, [r4, #32]
  403ae8:	4b28      	ldr	r3, [pc, #160]	; (403b8c <indev_click_focus+0x184>)
  403aea:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403aec:	4620      	mov	r0, r4
  403aee:	4b25      	ldr	r3, [pc, #148]	; (403b84 <indev_click_focus+0x17c>)
  403af0:	4798      	blx	r3
  403af2:	b1e8      	cbz	r0, 403b30 <indev_click_focus+0x128>
  403af4:	bd70      	pop	{r4, r5, r6, pc}
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403af6:	2200      	movs	r2, #0
  403af8:	2117      	movs	r1, #23
  403afa:	4b21      	ldr	r3, [pc, #132]	; (403b80 <indev_click_focus+0x178>)
  403afc:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403afe:	4620      	mov	r0, r4
  403b00:	4b20      	ldr	r3, [pc, #128]	; (403b84 <indev_click_focus+0x17c>)
  403b02:	4798      	blx	r3
  403b04:	2800      	cmp	r0, #0
  403b06:	d1a9      	bne.n	403a5c <indev_click_focus+0x54>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403b08:	2200      	movs	r2, #0
  403b0a:	210e      	movs	r1, #14
  403b0c:	6a20      	ldr	r0, [r4, #32]
  403b0e:	4b1f      	ldr	r3, [pc, #124]	; (403b8c <indev_click_focus+0x184>)
  403b10:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403b12:	4620      	mov	r0, r4
  403b14:	4b1b      	ldr	r3, [pc, #108]	; (403b84 <indev_click_focus+0x17c>)
  403b16:	4798      	blx	r3
  403b18:	b150      	cbz	r0, 403b30 <indev_click_focus+0x128>
  403b1a:	bd70      	pop	{r4, r5, r6, pc}
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
  403b1c:	2200      	movs	r2, #0
  403b1e:	210f      	movs	r1, #15
  403b20:	6a20      	ldr	r0, [r4, #32]
  403b22:	4b1a      	ldr	r3, [pc, #104]	; (403b8c <indev_click_focus+0x184>)
  403b24:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403b26:	4620      	mov	r0, r4
  403b28:	4b16      	ldr	r3, [pc, #88]	; (403b84 <indev_click_focus+0x17c>)
  403b2a:	4798      	blx	r3
  403b2c:	2800      	cmp	r0, #0
  403b2e:	d195      	bne.n	403a5c <indev_click_focus+0x54>
            if(g_act) {
  403b30:	b14d      	cbz	r5, 403b46 <indev_click_focus+0x13e>
                lv_group_focus_obj(obj_to_focus);
  403b32:	4630      	mov	r0, r6
  403b34:	4b14      	ldr	r3, [pc, #80]	; (403b88 <indev_click_focus+0x180>)
  403b36:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b38:	4620      	mov	r0, r4
  403b3a:	4b12      	ldr	r3, [pc, #72]	; (403b84 <indev_click_focus+0x17c>)
  403b3c:	4798      	blx	r3
  403b3e:	b908      	cbnz	r0, 403b44 <indev_click_focus+0x13c>
        proc->types.pointer.last_pressed = obj_to_focus;
  403b40:	6226      	str	r6, [r4, #32]
  403b42:	e78b      	b.n	403a5c <indev_click_focus+0x54>
  403b44:	bd70      	pop	{r4, r5, r6, pc}
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403b46:	2200      	movs	r2, #0
  403b48:	2116      	movs	r1, #22
  403b4a:	4630      	mov	r0, r6
  403b4c:	4b0c      	ldr	r3, [pc, #48]	; (403b80 <indev_click_focus+0x178>)
  403b4e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b50:	4620      	mov	r0, r4
  403b52:	4b0c      	ldr	r3, [pc, #48]	; (403b84 <indev_click_focus+0x17c>)
  403b54:	4798      	blx	r3
  403b56:	2800      	cmp	r0, #0
  403b58:	d180      	bne.n	403a5c <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403b5a:	2200      	movs	r2, #0
  403b5c:	210d      	movs	r1, #13
  403b5e:	4630      	mov	r0, r6
  403b60:	4b0a      	ldr	r3, [pc, #40]	; (403b8c <indev_click_focus+0x184>)
  403b62:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b64:	4620      	mov	r0, r4
  403b66:	4b07      	ldr	r3, [pc, #28]	; (403b84 <indev_click_focus+0x17c>)
  403b68:	4798      	blx	r3
  403b6a:	2800      	cmp	r0, #0
  403b6c:	d0e8      	beq.n	403b40 <indev_click_focus+0x138>
  403b6e:	e775      	b.n	403a5c <indev_click_focus+0x54>
  403b70:	2040c380 	.word	0x2040c380
  403b74:	00408639 	.word	0x00408639
  403b78:	0040650d 	.word	0x0040650d
  403b7c:	00407651 	.word	0x00407651
  403b80:	00405269 	.word	0x00405269
  403b84:	0040363d 	.word	0x0040363d
  403b88:	00403519 	.word	0x00403519
  403b8c:	00405229 	.word	0x00405229

00403b90 <indev_drag>:
{
  403b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b94:	b083      	sub	sp, #12
  403b96:	4604      	mov	r4, r0
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
  403b98:	6980      	ldr	r0, [r0, #24]
  403b9a:	4bb3      	ldr	r3, [pc, #716]	; (403e68 <indev_drag+0x2d8>)
  403b9c:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403b9e:	b120      	cbz	r0, 403baa <indev_drag+0x1a>
  403ba0:	4605      	mov	r5, r0
    if(lv_obj_get_drag(drag_obj) == false) return;
  403ba2:	4bb2      	ldr	r3, [pc, #712]	; (403e6c <indev_drag+0x2dc>)
  403ba4:	4798      	blx	r3
  403ba6:	4680      	mov	r8, r0
  403ba8:	b910      	cbnz	r0, 403bb0 <indev_drag+0x20>
}
  403baa:	b003      	add	sp, #12
  403bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  403bb0:	4628      	mov	r0, r5
  403bb2:	4baf      	ldr	r3, [pc, #700]	; (403e70 <indev_drag+0x2e0>)
  403bb4:	4798      	blx	r3
  403bb6:	4606      	mov	r6, r0
    if(proc->types.pointer.drag_limit_out == 0) {
  403bb8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403bbc:	f013 0f01 	tst.w	r3, #1
  403bc0:	d142      	bne.n	403c48 <indev_drag+0xb8>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
  403bc2:	89a3      	ldrh	r3, [r4, #12]
  403bc4:	8a22      	ldrh	r2, [r4, #16]
  403bc6:	4413      	add	r3, r2
  403bc8:	b21b      	sxth	r3, r3
  403bca:	8223      	strh	r3, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
  403bcc:	89e2      	ldrh	r2, [r4, #14]
  403bce:	8a61      	ldrh	r1, [r4, #18]
  403bd0:	440a      	add	r2, r1
  403bd2:	b211      	sxth	r1, r2
  403bd4:	8261      	strh	r1, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403bd6:	2803      	cmp	r0, #3
  403bd8:	bf18      	it	ne
  403bda:	2801      	cmpne	r0, #1
  403bdc:	bf0c      	ite	eq
  403bde:	2001      	moveq	r0, #1
  403be0:	2000      	movne	r0, #0
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403be2:	1eb2      	subs	r2, r6, #2
  403be4:	b2d2      	uxtb	r2, r2
  403be6:	2a01      	cmp	r2, #1
  403be8:	d91e      	bls.n	403c28 <indev_drag+0x98>
        bool ver_en = false;
  403bea:	2700      	movs	r7, #0
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403bec:	2e04      	cmp	r6, #4
  403bee:	d01d      	beq.n	403c2c <indev_drag+0x9c>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
  403bf0:	b138      	cbz	r0, 403c02 <indev_drag+0x72>
  403bf2:	2b00      	cmp	r3, #0
  403bf4:	bfb8      	it	lt
  403bf6:	425b      	neglt	r3, r3
  403bf8:	4a9e      	ldr	r2, [pc, #632]	; (403e74 <indev_drag+0x2e4>)
  403bfa:	6812      	ldr	r2, [r2, #0]
  403bfc:	7d12      	ldrb	r2, [r2, #20]
  403bfe:	4293      	cmp	r3, r2
  403c00:	da0a      	bge.n	403c18 <indev_drag+0x88>
  403c02:	b317      	cbz	r7, 403c4a <indev_drag+0xba>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
  403c04:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  403c08:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  403c0c:	4b99      	ldr	r3, [pc, #612]	; (403e74 <indev_drag+0x2e4>)
  403c0e:	681b      	ldr	r3, [r3, #0]
  403c10:	7d1b      	ldrb	r3, [r3, #20]
  403c12:	429a      	cmp	r2, r3
  403c14:	f2c0 808d 	blt.w	403d32 <indev_drag+0x1a2>
            proc->types.pointer.drag_limit_out = 1;
  403c18:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403c1c:	f043 0301 	orr.w	r3, r3, #1
  403c20:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            drag_just_started                   = true;
  403c24:	4647      	mov	r7, r8
  403c26:	e010      	b.n	403c4a <indev_drag+0xba>
            ver_en = true;
  403c28:	4647      	mov	r7, r8
  403c2a:	e7df      	b.n	403bec <indev_drag+0x5c>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  403c2c:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
  403c30:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
  403c34:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  403c38:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  403c3c:	4596      	cmp	lr, r2
  403c3e:	dd01      	ble.n	403c44 <indev_drag+0xb4>
                hor_en = true;
  403c40:	4640      	mov	r0, r8
  403c42:	e7d5      	b.n	403bf0 <indev_drag+0x60>
                ver_en = true;
  403c44:	4647      	mov	r7, r8
  403c46:	e7d3      	b.n	403bf0 <indev_drag+0x60>
    bool drag_just_started = false;
  403c48:	2700      	movs	r7, #0
    if(proc->types.pointer.drag_limit_out != 0) {
  403c4a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403c4e:	f013 0f01 	tst.w	r3, #1
  403c52:	d0aa      	beq.n	403baa <indev_drag+0x1a>
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
  403c54:	68e3      	ldr	r3, [r4, #12]
  403c56:	2b00      	cmp	r3, #0
  403c58:	d0a7      	beq.n	403baa <indev_drag+0x1a>
            lv_coord_t prev_x     = drag_obj->coords.x1;
  403c5a:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
            lv_coord_t prev_y     = drag_obj->coords.y1;
  403c5e:	f9b5 b012 	ldrsh.w	fp, [r5, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  403c62:	4628      	mov	r0, r5
  403c64:	f8df 8234 	ldr.w	r8, [pc, #564]	; 403e9c <indev_drag+0x30c>
  403c68:	47c0      	blx	r8
  403c6a:	4b83      	ldr	r3, [pc, #524]	; (403e78 <indev_drag+0x2e8>)
  403c6c:	4798      	blx	r3
  403c6e:	9000      	str	r0, [sp, #0]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  403c70:	4628      	mov	r0, r5
  403c72:	47c0      	blx	r8
  403c74:	4b81      	ldr	r3, [pc, #516]	; (403e7c <indev_drag+0x2ec>)
  403c76:	4798      	blx	r3
  403c78:	9001      	str	r0, [sp, #4]
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
  403c7a:	4628      	mov	r0, r5
  403c7c:	4b80      	ldr	r3, [pc, #512]	; (403e80 <indev_drag+0x2f0>)
  403c7e:	4798      	blx	r3
  403c80:	4680      	mov	r8, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
  403c82:	4628      	mov	r0, r5
  403c84:	4b7f      	ldr	r3, [pc, #508]	; (403e84 <indev_drag+0x2f4>)
  403c86:	4798      	blx	r3
  403c88:	4681      	mov	r9, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
  403c8a:	2e03      	cmp	r6, #3
  403c8c:	d053      	beq.n	403d36 <indev_drag+0x1a6>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
  403c8e:	2e01      	cmp	r6, #1
  403c90:	d063      	beq.n	403d5a <indev_drag+0x1ca>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
  403c92:	2e02      	cmp	r6, #2
  403c94:	d071      	beq.n	403d7a <indev_drag+0x1ea>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403c96:	2e04      	cmp	r6, #4
  403c98:	d07f      	beq.n	403d9a <indev_drag+0x20a>
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
  403c9a:	2e03      	cmp	r6, #3
  403c9c:	bf18      	it	ne
  403c9e:	2e01      	cmpne	r6, #1
  403ca0:	d00d      	beq.n	403cbe <indev_drag+0x12e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  403ca2:	2e04      	cmp	r6, #4
  403ca4:	d10f      	bne.n	403cc6 <indev_drag+0x136>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  403ca6:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403caa:	2a00      	cmp	r2, #0
  403cac:	bfb8      	it	lt
  403cae:	4252      	neglt	r2, r2
  403cb0:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403cb4:	2b00      	cmp	r3, #0
  403cb6:	bfb8      	it	lt
  403cb8:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  403cba:	429a      	cmp	r2, r3
  403cbc:	dd03      	ble.n	403cc6 <indev_drag+0x136>
                act_x += proc->types.pointer.vect.x;
  403cbe:	89a3      	ldrh	r3, [r4, #12]
  403cc0:	4498      	add	r8, r3
  403cc2:	fa0f f888 	sxth.w	r8, r8
            if(allowed_dirs == LV_DRAG_DIR_VER ||
  403cc6:	1eb3      	subs	r3, r6, #2
  403cc8:	b2db      	uxtb	r3, r3
  403cca:	2b01      	cmp	r3, #1
  403ccc:	f240 809f 	bls.w	403e0e <indev_drag+0x27e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  403cd0:	2e04      	cmp	r6, #4
  403cd2:	f000 808f 	beq.w	403df4 <indev_drag+0x264>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
  403cd6:	4b67      	ldr	r3, [pc, #412]	; (403e74 <indev_drag+0x2e4>)
  403cd8:	681b      	ldr	r3, [r3, #0]
            uint16_t inv_buf_size =
  403cda:	68d8      	ldr	r0, [r3, #12]
  403cdc:	4b6a      	ldr	r3, [pc, #424]	; (403e88 <indev_drag+0x2f8>)
  403cde:	4798      	blx	r3
  403ce0:	4606      	mov	r6, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
  403ce2:	464a      	mov	r2, r9
  403ce4:	4641      	mov	r1, r8
  403ce6:	4628      	mov	r0, r5
  403ce8:	4b68      	ldr	r3, [pc, #416]	; (403e8c <indev_drag+0x2fc>)
  403cea:	4798      	blx	r3
            proc->types.pointer.drag_in_prog = 1;
  403cec:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403cf0:	f043 0302 	orr.w	r3, r3, #2
  403cf4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  403cf8:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  403cfc:	459a      	cmp	sl, r3
  403cfe:	f000 808b 	beq.w	403e18 <indev_drag+0x288>
            if(drag_just_started) {
  403d02:	2f00      	cmp	r7, #0
  403d04:	f43f af51 	beq.w	403baa <indev_drag+0x1a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
  403d08:	69eb      	ldr	r3, [r5, #28]
  403d0a:	4a5a      	ldr	r2, [pc, #360]	; (403e74 <indev_drag+0x2e4>)
  403d0c:	6812      	ldr	r2, [r2, #0]
  403d0e:	2111      	movs	r1, #17
  403d10:	4628      	mov	r0, r5
  403d12:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403d14:	4620      	mov	r0, r4
  403d16:	4b5e      	ldr	r3, [pc, #376]	; (403e90 <indev_drag+0x300>)
  403d18:	4798      	blx	r3
  403d1a:	2800      	cmp	r0, #0
  403d1c:	f47f af45 	bne.w	403baa <indev_drag+0x1a>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
  403d20:	2200      	movs	r2, #0
  403d22:	2108      	movs	r1, #8
  403d24:	4628      	mov	r0, r5
  403d26:	4b5b      	ldr	r3, [pc, #364]	; (403e94 <indev_drag+0x304>)
  403d28:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403d2a:	4620      	mov	r0, r4
  403d2c:	4b58      	ldr	r3, [pc, #352]	; (403e90 <indev_drag+0x300>)
  403d2e:	4798      	blx	r3
  403d30:	e73b      	b.n	403baa <indev_drag+0x1a>
    bool drag_just_started = false;
  403d32:	2700      	movs	r7, #0
  403d34:	e789      	b.n	403c4a <indev_drag+0xba>
                if(drag_just_started) {
  403d36:	2f00      	cmp	r7, #0
  403d38:	d0af      	beq.n	403c9a <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  403d3a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403d3e:	2203      	movs	r2, #3
  403d40:	f362 0384 	bfi	r3, r2, #2, #3
  403d44:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
  403d48:	8a23      	ldrh	r3, [r4, #16]
  403d4a:	4498      	add	r8, r3
  403d4c:	fa0f f888 	sxth.w	r8, r8
                    act_y += proc->types.pointer.drag_sum.y;
  403d50:	8a63      	ldrh	r3, [r4, #18]
  403d52:	4499      	add	r9, r3
  403d54:	fa0f f989 	sxth.w	r9, r9
  403d58:	e79f      	b.n	403c9a <indev_drag+0x10a>
                if(drag_just_started) {
  403d5a:	2f00      	cmp	r7, #0
  403d5c:	d09d      	beq.n	403c9a <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  403d5e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403d62:	2201      	movs	r2, #1
  403d64:	f362 0384 	bfi	r3, r2, #2, #3
  403d68:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
  403d6c:	2300      	movs	r3, #0
  403d6e:	8263      	strh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
  403d70:	8a23      	ldrh	r3, [r4, #16]
  403d72:	4498      	add	r8, r3
  403d74:	fa0f f888 	sxth.w	r8, r8
  403d78:	e78f      	b.n	403c9a <indev_drag+0x10a>
                if(drag_just_started) {
  403d7a:	2f00      	cmp	r7, #0
  403d7c:	d08d      	beq.n	403c9a <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  403d7e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403d82:	2202      	movs	r2, #2
  403d84:	f362 0384 	bfi	r3, r2, #2, #3
  403d88:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
  403d8c:	2300      	movs	r3, #0
  403d8e:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
  403d90:	8a63      	ldrh	r3, [r4, #18]
  403d92:	4499      	add	r9, r3
  403d94:	fa0f f989 	sxth.w	r9, r9
  403d98:	e77f      	b.n	403c9a <indev_drag+0x10a>
                if(drag_just_started) {
  403d9a:	2f00      	cmp	r7, #0
  403d9c:	f43f af7d 	beq.w	403c9a <indev_drag+0x10a>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  403da0:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403da4:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  403da8:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  403dac:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403db0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  403db4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  403db8:	4288      	cmp	r0, r1
  403dba:	dd0d      	ble.n	403dd8 <indev_drag+0x248>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  403dbc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403dc0:	2101      	movs	r1, #1
  403dc2:	f361 0384 	bfi	r3, r1, #2, #3
  403dc6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
  403dca:	2300      	movs	r3, #0
  403dcc:	8263      	strh	r3, [r4, #18]
                        act_x += proc->types.pointer.drag_sum.x;
  403dce:	fa18 f882 	uxtah	r8, r8, r2
  403dd2:	fa0f f888 	sxth.w	r8, r8
  403dd6:	e760      	b.n	403c9a <indev_drag+0x10a>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  403dd8:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  403ddc:	2102      	movs	r1, #2
  403dde:	f361 0284 	bfi	r2, r1, #2, #3
  403de2:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
  403de6:	2200      	movs	r2, #0
  403de8:	8222      	strh	r2, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
  403dea:	fa19 f983 	uxtah	r9, r9, r3
  403dee:	fa0f f989 	sxth.w	r9, r9
  403df2:	e752      	b.n	403c9a <indev_drag+0x10a>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  403df4:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403df8:	2a00      	cmp	r2, #0
  403dfa:	bfb8      	it	lt
  403dfc:	4252      	neglt	r2, r2
  403dfe:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403e02:	2b00      	cmp	r3, #0
  403e04:	bfb8      	it	lt
  403e06:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  403e08:	429a      	cmp	r2, r3
  403e0a:	f6bf af64 	bge.w	403cd6 <indev_drag+0x146>
                act_y += proc->types.pointer.vect.y;
  403e0e:	89e3      	ldrh	r3, [r4, #14]
  403e10:	4499      	add	r9, r3
  403e12:	fa0f f989 	sxth.w	r9, r9
  403e16:	e75e      	b.n	403cd6 <indev_drag+0x146>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  403e18:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
  403e1c:	459b      	cmp	fp, r3
  403e1e:	f47f af70 	bne.w	403d02 <indev_drag+0x172>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  403e22:	4628      	mov	r0, r5
  403e24:	f8df 8074 	ldr.w	r8, [pc, #116]	; 403e9c <indev_drag+0x30c>
  403e28:	47c0      	blx	r8
  403e2a:	4b13      	ldr	r3, [pc, #76]	; (403e78 <indev_drag+0x2e8>)
  403e2c:	4798      	blx	r3
  403e2e:	4681      	mov	r9, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  403e30:	4628      	mov	r0, r5
  403e32:	47c0      	blx	r8
  403e34:	4b11      	ldr	r3, [pc, #68]	; (403e7c <indev_drag+0x2ec>)
  403e36:	4798      	blx	r3
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
  403e38:	9b00      	ldr	r3, [sp, #0]
  403e3a:	461a      	mov	r2, r3
  403e3c:	9b01      	ldr	r3, [sp, #4]
  403e3e:	454a      	cmp	r2, r9
  403e40:	bf08      	it	eq
  403e42:	4283      	cmpeq	r3, r0
  403e44:	f47f af5d 	bne.w	403d02 <indev_drag+0x172>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
  403e48:	f8df 8028 	ldr.w	r8, [pc, #40]	; 403e74 <indev_drag+0x2e4>
  403e4c:	f8d8 3000 	ldr.w	r3, [r8]
  403e50:	68d8      	ldr	r0, [r3, #12]
  403e52:	4b0d      	ldr	r3, [pc, #52]	; (403e88 <indev_drag+0x2f8>)
  403e54:	4798      	blx	r3
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
  403e56:	f8d8 3000 	ldr.w	r3, [r8]
  403e5a:	1b81      	subs	r1, r0, r6
  403e5c:	b289      	uxth	r1, r1
  403e5e:	68d8      	ldr	r0, [r3, #12]
  403e60:	4b0d      	ldr	r3, [pc, #52]	; (403e98 <indev_drag+0x308>)
  403e62:	4798      	blx	r3
  403e64:	e74d      	b.n	403d02 <indev_drag+0x172>
  403e66:	bf00      	nop
  403e68:	00403659 	.word	0x00403659
  403e6c:	0040601d 	.word	0x0040601d
  403e70:	00406049 	.word	0x00406049
  403e74:	2040c37c 	.word	0x2040c37c
  403e78:	00405481 	.word	0x00405481
  403e7c:	004054b1 	.word	0x004054b1
  403e80:	00405401 	.word	0x00405401
  403e84:	00405441 	.word	0x00405441
  403e88:	00414041 	.word	0x00414041
  403e8c:	00405911 	.word	0x00405911
  403e90:	0040363d 	.word	0x0040363d
  403e94:	00405229 	.word	0x00405229
  403e98:	0041404b 	.word	0x0041404b
  403e9c:	004052ad 	.word	0x004052ad

00403ea0 <indev_gesture>:
{
  403ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->types.pointer.gesture_sent) return;
  403ea2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403ea6:	f013 0f20 	tst.w	r3, #32
  403eaa:	d153      	bne.n	403f54 <indev_gesture+0xb4>
  403eac:	4605      	mov	r5, r0
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
  403eae:	6984      	ldr	r4, [r0, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  403eb0:	e003      	b.n	403eba <indev_gesture+0x1a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
  403eb2:	4620      	mov	r0, r4
  403eb4:	4b33      	ldr	r3, [pc, #204]	; (403f84 <indev_gesture+0xe4>)
  403eb6:	4798      	blx	r3
  403eb8:	4604      	mov	r4, r0
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  403eba:	b124      	cbz	r4, 403ec6 <indev_gesture+0x26>
  403ebc:	4620      	mov	r0, r4
  403ebe:	4b32      	ldr	r3, [pc, #200]	; (403f88 <indev_gesture+0xe8>)
  403ec0:	4798      	blx	r3
  403ec2:	2800      	cmp	r0, #0
  403ec4:	d1f5      	bne.n	403eb2 <indev_gesture+0x12>
    if(gesture_obj == NULL) return;
  403ec6:	2c00      	cmp	r4, #0
  403ec8:	d044      	beq.n	403f54 <indev_gesture+0xb4>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  403eca:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403ece:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  403ed2:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  403ed6:	4a2d      	ldr	r2, [pc, #180]	; (403f8c <indev_gesture+0xec>)
  403ed8:	6812      	ldr	r2, [r2, #0]
  403eda:	7d91      	ldrb	r1, [r2, #22]
  403edc:	4288      	cmp	r0, r1
  403ede:	da09      	bge.n	403ef4 <indev_gesture+0x54>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
  403ee0:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  403ee4:	2800      	cmp	r0, #0
  403ee6:	bfb8      	it	lt
  403ee8:	4240      	neglt	r0, r0
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  403eea:	4281      	cmp	r1, r0
  403eec:	dd02      	ble.n	403ef4 <indev_gesture+0x54>
        proc->types.pointer.gesture_sum.x = 0;
  403eee:	2100      	movs	r1, #0
  403ef0:	84e9      	strh	r1, [r5, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
  403ef2:	8529      	strh	r1, [r5, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
  403ef4:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
  403ef6:	fa11 f383 	uxtah	r3, r1, r3
  403efa:	b21b      	sxth	r3, r3
  403efc:	84eb      	strh	r3, [r5, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
  403efe:	89e9      	ldrh	r1, [r5, #14]
  403f00:	8d28      	ldrh	r0, [r5, #40]	; 0x28
  403f02:	4401      	add	r1, r0
  403f04:	b209      	sxth	r1, r1
  403f06:	8529      	strh	r1, [r5, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  403f08:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  403f0c:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  403f10:	7dd0      	ldrb	r0, [r2, #23]
  403f12:	4286      	cmp	r6, r0
  403f14:	dc05      	bgt.n	403f22 <indev_gesture+0x82>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
  403f16:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
  403f1a:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  403f1e:	42b8      	cmp	r0, r7
  403f20:	da18      	bge.n	403f54 <indev_gesture+0xb4>
        proc->types.pointer.gesture_sent = 1;
  403f22:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
  403f26:	f040 0020 	orr.w	r0, r0, #32
  403f2a:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
  403f2e:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
  403f32:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
  403f36:	4286      	cmp	r6, r0
  403f38:	dd11      	ble.n	403f5e <indev_gesture+0xbe>
            if(proc->types.pointer.gesture_sum.x > 0)
  403f3a:	2b00      	cmp	r3, #0
  403f3c:	dd0b      	ble.n	403f56 <indev_gesture+0xb6>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
  403f3e:	2303      	movs	r3, #3
  403f40:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
  403f44:	69e3      	ldr	r3, [r4, #28]
  403f46:	2114      	movs	r1, #20
  403f48:	4620      	mov	r0, r4
  403f4a:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403f4c:	4628      	mov	r0, r5
  403f4e:	4b10      	ldr	r3, [pc, #64]	; (403f90 <indev_gesture+0xf0>)
  403f50:	4798      	blx	r3
  403f52:	b170      	cbz	r0, 403f72 <indev_gesture+0xd2>
  403f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
  403f56:	2302      	movs	r3, #2
  403f58:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  403f5c:	e7f2      	b.n	403f44 <indev_gesture+0xa4>
            if(proc->types.pointer.gesture_sum.y > 0)
  403f5e:	2900      	cmp	r1, #0
  403f60:	dd03      	ble.n	403f6a <indev_gesture+0xca>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
  403f62:	2301      	movs	r3, #1
  403f64:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  403f68:	e7ec      	b.n	403f44 <indev_gesture+0xa4>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
  403f6a:	2300      	movs	r3, #0
  403f6c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  403f70:	e7e8      	b.n	403f44 <indev_gesture+0xa4>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
  403f72:	2200      	movs	r2, #0
  403f74:	210b      	movs	r1, #11
  403f76:	4620      	mov	r0, r4
  403f78:	4b06      	ldr	r3, [pc, #24]	; (403f94 <indev_gesture+0xf4>)
  403f7a:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403f7c:	4628      	mov	r0, r5
  403f7e:	4b04      	ldr	r3, [pc, #16]	; (403f90 <indev_gesture+0xf0>)
  403f80:	4798      	blx	r3
  403f82:	e7e7      	b.n	403f54 <indev_gesture+0xb4>
  403f84:	004052ad 	.word	0x004052ad
  403f88:	004060ab 	.word	0x004060ab
  403f8c:	2040c37c 	.word	0x2040c37c
  403f90:	0040363d 	.word	0x0040363d
  403f94:	00405229 	.word	0x00405229

00403f98 <indev_keypad_proc>:
{
  403f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  403f9a:	7b8b      	ldrb	r3, [r1, #14]
  403f9c:	2b01      	cmp	r3, #1
  403f9e:	d02f      	beq.n	404000 <indev_keypad_proc+0x68>
    if(i->proc.wait_until_release) {
  403fa0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  403fa4:	f013 0f08 	tst.w	r3, #8
  403fa8:	d00b      	beq.n	403fc2 <indev_keypad_proc+0x2a>
        i->proc.wait_until_release      = 0;
  403faa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  403fae:	2200      	movs	r2, #0
  403fb0:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  403fb2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  403fb6:	f362 0300 	bfi	r3, r2, #0, #1
  403fba:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  403fbe:	f880 2020 	strb.w	r2, [r0, #32]
    lv_group_t * g = i->group;
  403fc2:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  403fc4:	b1de      	cbz	r6, 403ffe <indev_keypad_proc+0x66>
  403fc6:	460d      	mov	r5, r1
  403fc8:	4604      	mov	r4, r0
    indev_obj_act = lv_group_get_focused(g);
  403fca:	4630      	mov	r0, r6
  403fcc:	4b95      	ldr	r3, [pc, #596]	; (404224 <indev_keypad_proc+0x28c>)
  403fce:	4798      	blx	r3
  403fd0:	4b95      	ldr	r3, [pc, #596]	; (404228 <indev_keypad_proc+0x290>)
  403fd2:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  403fd4:	b198      	cbz	r0, 403ffe <indev_keypad_proc+0x66>
    uint32_t prev_key = i->proc.types.keypad.last_key;
  403fd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
  403fd8:	686b      	ldr	r3, [r5, #4]
  403fda:	6263      	str	r3, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
  403fdc:	f894 2020 	ldrb.w	r2, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
  403fe0:	7bab      	ldrb	r3, [r5, #14]
  403fe2:	f884 3020 	strb.w	r3, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  403fe6:	7bab      	ldrb	r3, [r5, #14]
  403fe8:	2b01      	cmp	r3, #1
  403fea:	d00f      	beq.n	40400c <indev_keypad_proc+0x74>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  403fec:	2b01      	cmp	r3, #1
  403fee:	d066      	beq.n	4040be <indev_keypad_proc+0x126>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
  403ff0:	b913      	cbnz	r3, 403ff8 <indev_keypad_proc+0x60>
  403ff2:	2a01      	cmp	r2, #1
  403ff4:	f000 810a 	beq.w	40420c <indev_keypad_proc+0x274>
    indev_obj_act = NULL;
  403ff8:	2200      	movs	r2, #0
  403ffa:	4b8b      	ldr	r3, [pc, #556]	; (404228 <indev_keypad_proc+0x290>)
  403ffc:	601a      	str	r2, [r3, #0]
  403ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404000:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404004:	f013 0f08 	tst.w	r3, #8
  404008:	d0ca      	beq.n	403fa0 <indev_keypad_proc+0x8>
  40400a:	e7f8      	b.n	403ffe <indev_keypad_proc+0x66>
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  40400c:	2a00      	cmp	r2, #0
  40400e:	d1ed      	bne.n	403fec <indev_keypad_proc+0x54>
        i->proc.pr_timestamp = lv_tick_get();
  404010:	4b86      	ldr	r3, [pc, #536]	; (40422c <indev_keypad_proc+0x294>)
  404012:	4798      	blx	r3
  404014:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  404016:	6869      	ldr	r1, [r5, #4]
  404018:	290a      	cmp	r1, #10
  40401a:	d009      	beq.n	404030 <indev_keypad_proc+0x98>
        else if(data->key == LV_KEY_ESC) {
  40401c:	291b      	cmp	r1, #27
  40401e:	d022      	beq.n	404066 <indev_keypad_proc+0xce>
        else if(data->key == LV_KEY_NEXT) {
  404020:	2909      	cmp	r1, #9
  404022:	d030      	beq.n	404086 <indev_keypad_proc+0xee>
        else if(data->key == LV_KEY_PREV) {
  404024:	290b      	cmp	r1, #11
  404026:	d03c      	beq.n	4040a2 <indev_keypad_proc+0x10a>
            lv_group_send_data(g, data->key);
  404028:	4630      	mov	r0, r6
  40402a:	4b81      	ldr	r3, [pc, #516]	; (404230 <indev_keypad_proc+0x298>)
  40402c:	4798      	blx	r3
  40402e:	e7e3      	b.n	403ff8 <indev_keypad_proc+0x60>
            lv_group_send_data(g, LV_KEY_ENTER);
  404030:	4630      	mov	r0, r6
  404032:	4b7f      	ldr	r3, [pc, #508]	; (404230 <indev_keypad_proc+0x298>)
  404034:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  404036:	4b7c      	ldr	r3, [pc, #496]	; (404228 <indev_keypad_proc+0x290>)
  404038:	6818      	ldr	r0, [r3, #0]
  40403a:	69c3      	ldr	r3, [r0, #28]
  40403c:	2200      	movs	r2, #0
  40403e:	210b      	movs	r1, #11
  404040:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404042:	341c      	adds	r4, #28
  404044:	4620      	mov	r0, r4
  404046:	4b7b      	ldr	r3, [pc, #492]	; (404234 <indev_keypad_proc+0x29c>)
  404048:	4798      	blx	r3
  40404a:	2800      	cmp	r0, #0
  40404c:	d1d7      	bne.n	403ffe <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  40404e:	2200      	movs	r2, #0
  404050:	4611      	mov	r1, r2
  404052:	4b75      	ldr	r3, [pc, #468]	; (404228 <indev_keypad_proc+0x290>)
  404054:	6818      	ldr	r0, [r3, #0]
  404056:	4b78      	ldr	r3, [pc, #480]	; (404238 <indev_keypad_proc+0x2a0>)
  404058:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40405a:	4620      	mov	r0, r4
  40405c:	4b75      	ldr	r3, [pc, #468]	; (404234 <indev_keypad_proc+0x29c>)
  40405e:	4798      	blx	r3
  404060:	2800      	cmp	r0, #0
  404062:	d0c9      	beq.n	403ff8 <indev_keypad_proc+0x60>
  404064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_send_data(g, LV_KEY_ESC);
  404066:	4630      	mov	r0, r6
  404068:	4b71      	ldr	r3, [pc, #452]	; (404230 <indev_keypad_proc+0x298>)
  40406a:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  40406c:	2200      	movs	r2, #0
  40406e:	2114      	movs	r1, #20
  404070:	4b6d      	ldr	r3, [pc, #436]	; (404228 <indev_keypad_proc+0x290>)
  404072:	6818      	ldr	r0, [r3, #0]
  404074:	4b70      	ldr	r3, [pc, #448]	; (404238 <indev_keypad_proc+0x2a0>)
  404076:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404078:	f104 001c 	add.w	r0, r4, #28
  40407c:	4b6d      	ldr	r3, [pc, #436]	; (404234 <indev_keypad_proc+0x29c>)
  40407e:	4798      	blx	r3
  404080:	2800      	cmp	r0, #0
  404082:	d0b9      	beq.n	403ff8 <indev_keypad_proc+0x60>
  404084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404086:	2100      	movs	r1, #0
  404088:	4630      	mov	r0, r6
  40408a:	4b6c      	ldr	r3, [pc, #432]	; (40423c <indev_keypad_proc+0x2a4>)
  40408c:	4798      	blx	r3
            lv_group_focus_next(g);
  40408e:	4630      	mov	r0, r6
  404090:	4b6b      	ldr	r3, [pc, #428]	; (404240 <indev_keypad_proc+0x2a8>)
  404092:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404094:	f104 001c 	add.w	r0, r4, #28
  404098:	4b66      	ldr	r3, [pc, #408]	; (404234 <indev_keypad_proc+0x29c>)
  40409a:	4798      	blx	r3
  40409c:	2800      	cmp	r0, #0
  40409e:	d0ab      	beq.n	403ff8 <indev_keypad_proc+0x60>
  4040a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4040a2:	2100      	movs	r1, #0
  4040a4:	4630      	mov	r0, r6
  4040a6:	4b65      	ldr	r3, [pc, #404]	; (40423c <indev_keypad_proc+0x2a4>)
  4040a8:	4798      	blx	r3
            lv_group_focus_prev(g);
  4040aa:	4630      	mov	r0, r6
  4040ac:	4b65      	ldr	r3, [pc, #404]	; (404244 <indev_keypad_proc+0x2ac>)
  4040ae:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4040b0:	f104 001c 	add.w	r0, r4, #28
  4040b4:	4b5f      	ldr	r3, [pc, #380]	; (404234 <indev_keypad_proc+0x29c>)
  4040b6:	4798      	blx	r3
  4040b8:	2800      	cmp	r0, #0
  4040ba:	d09d      	beq.n	403ff8 <indev_keypad_proc+0x60>
  4040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  4040be:	2a01      	cmp	r2, #1
  4040c0:	d196      	bne.n	403ff0 <indev_keypad_proc+0x58>
        if(data->key == LV_KEY_ENTER) {
  4040c2:	686b      	ldr	r3, [r5, #4]
  4040c4:	2b0a      	cmp	r3, #10
  4040c6:	d024      	beq.n	404112 <indev_keypad_proc+0x17a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4040c8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4040cc:	f013 0f01 	tst.w	r3, #1
  4040d0:	d037      	beq.n	404142 <indev_keypad_proc+0x1aa>
        else if(i->proc.long_pr_sent != 0 &&
  4040d2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4040d6:	f013 0f01 	tst.w	r3, #1
  4040da:	d08d      	beq.n	403ff8 <indev_keypad_proc+0x60>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  4040dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  4040de:	4b5a      	ldr	r3, [pc, #360]	; (404248 <indev_keypad_proc+0x2b0>)
  4040e0:	4798      	blx	r3
  4040e2:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
  4040e4:	4298      	cmp	r0, r3
  4040e6:	d987      	bls.n	403ff8 <indev_keypad_proc+0x60>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  4040e8:	4b50      	ldr	r3, [pc, #320]	; (40422c <indev_keypad_proc+0x294>)
  4040ea:	4798      	blx	r3
  4040ec:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  4040ee:	6869      	ldr	r1, [r5, #4]
  4040f0:	290a      	cmp	r1, #10
  4040f2:	d053      	beq.n	40419c <indev_keypad_proc+0x204>
            else if(data->key == LV_KEY_NEXT) {
  4040f4:	2909      	cmp	r1, #9
  4040f6:	d06b      	beq.n	4041d0 <indev_keypad_proc+0x238>
            else if(data->key == LV_KEY_PREV) {
  4040f8:	290b      	cmp	r1, #11
  4040fa:	d078      	beq.n	4041ee <indev_keypad_proc+0x256>
                lv_group_send_data(g, data->key);
  4040fc:	4630      	mov	r0, r6
  4040fe:	4b4c      	ldr	r3, [pc, #304]	; (404230 <indev_keypad_proc+0x298>)
  404100:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404102:	f104 001c 	add.w	r0, r4, #28
  404106:	4b4b      	ldr	r3, [pc, #300]	; (404234 <indev_keypad_proc+0x29c>)
  404108:	4798      	blx	r3
  40410a:	2800      	cmp	r0, #0
  40410c:	f43f af74 	beq.w	403ff8 <indev_keypad_proc+0x60>
  404110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
  404112:	69c3      	ldr	r3, [r0, #28]
  404114:	2200      	movs	r2, #0
  404116:	210c      	movs	r1, #12
  404118:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40411a:	f104 071c 	add.w	r7, r4, #28
  40411e:	4638      	mov	r0, r7
  404120:	4b44      	ldr	r3, [pc, #272]	; (404234 <indev_keypad_proc+0x29c>)
  404122:	4798      	blx	r3
  404124:	2800      	cmp	r0, #0
  404126:	f47f af6a 	bne.w	403ffe <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  40412a:	2200      	movs	r2, #0
  40412c:	2101      	movs	r1, #1
  40412e:	4b3e      	ldr	r3, [pc, #248]	; (404228 <indev_keypad_proc+0x290>)
  404130:	6818      	ldr	r0, [r3, #0]
  404132:	4b41      	ldr	r3, [pc, #260]	; (404238 <indev_keypad_proc+0x2a0>)
  404134:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404136:	4638      	mov	r0, r7
  404138:	4b3e      	ldr	r3, [pc, #248]	; (404234 <indev_keypad_proc+0x29c>)
  40413a:	4798      	blx	r3
  40413c:	2800      	cmp	r0, #0
  40413e:	d0c3      	beq.n	4040c8 <indev_keypad_proc+0x130>
  404140:	e75d      	b.n	403ffe <indev_keypad_proc+0x66>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  404142:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  404144:	4b40      	ldr	r3, [pc, #256]	; (404248 <indev_keypad_proc+0x2b0>)
  404146:	4798      	blx	r3
  404148:	8b23      	ldrh	r3, [r4, #24]
  40414a:	4298      	cmp	r0, r3
  40414c:	d9c1      	bls.n	4040d2 <indev_keypad_proc+0x13a>
            i->proc.long_pr_sent = 1;
  40414e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404152:	f043 0301 	orr.w	r3, r3, #1
  404156:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
  40415a:	686b      	ldr	r3, [r5, #4]
  40415c:	2b0a      	cmp	r3, #10
  40415e:	f47f af4b 	bne.w	403ff8 <indev_keypad_proc+0x60>
                i->proc.longpr_rep_timestamp = lv_tick_get();
  404162:	4b32      	ldr	r3, [pc, #200]	; (40422c <indev_keypad_proc+0x294>)
  404164:	4798      	blx	r3
  404166:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  404168:	4b2f      	ldr	r3, [pc, #188]	; (404228 <indev_keypad_proc+0x290>)
  40416a:	6818      	ldr	r0, [r3, #0]
  40416c:	69c3      	ldr	r3, [r0, #28]
  40416e:	2200      	movs	r2, #0
  404170:	210f      	movs	r1, #15
  404172:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404174:	341c      	adds	r4, #28
  404176:	4620      	mov	r0, r4
  404178:	4b2e      	ldr	r3, [pc, #184]	; (404234 <indev_keypad_proc+0x29c>)
  40417a:	4798      	blx	r3
  40417c:	2800      	cmp	r0, #0
  40417e:	f47f af3e 	bne.w	403ffe <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  404182:	2200      	movs	r2, #0
  404184:	2104      	movs	r1, #4
  404186:	4b28      	ldr	r3, [pc, #160]	; (404228 <indev_keypad_proc+0x290>)
  404188:	6818      	ldr	r0, [r3, #0]
  40418a:	4b2b      	ldr	r3, [pc, #172]	; (404238 <indev_keypad_proc+0x2a0>)
  40418c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40418e:	4620      	mov	r0, r4
  404190:	4b28      	ldr	r3, [pc, #160]	; (404234 <indev_keypad_proc+0x29c>)
  404192:	4798      	blx	r3
  404194:	2800      	cmp	r0, #0
  404196:	f43f af2f 	beq.w	403ff8 <indev_keypad_proc+0x60>
  40419a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  40419c:	4b22      	ldr	r3, [pc, #136]	; (404228 <indev_keypad_proc+0x290>)
  40419e:	6818      	ldr	r0, [r3, #0]
  4041a0:	69c3      	ldr	r3, [r0, #28]
  4041a2:	2200      	movs	r2, #0
  4041a4:	2110      	movs	r1, #16
  4041a6:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4041a8:	341c      	adds	r4, #28
  4041aa:	4620      	mov	r0, r4
  4041ac:	4b21      	ldr	r3, [pc, #132]	; (404234 <indev_keypad_proc+0x29c>)
  4041ae:	4798      	blx	r3
  4041b0:	2800      	cmp	r0, #0
  4041b2:	f47f af24 	bne.w	403ffe <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  4041b6:	2200      	movs	r2, #0
  4041b8:	2105      	movs	r1, #5
  4041ba:	4b1b      	ldr	r3, [pc, #108]	; (404228 <indev_keypad_proc+0x290>)
  4041bc:	6818      	ldr	r0, [r3, #0]
  4041be:	4b1e      	ldr	r3, [pc, #120]	; (404238 <indev_keypad_proc+0x2a0>)
  4041c0:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4041c2:	4620      	mov	r0, r4
  4041c4:	4b1b      	ldr	r3, [pc, #108]	; (404234 <indev_keypad_proc+0x29c>)
  4041c6:	4798      	blx	r3
  4041c8:	2800      	cmp	r0, #0
  4041ca:	f43f af15 	beq.w	403ff8 <indev_keypad_proc+0x60>
  4041ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4041d0:	2100      	movs	r1, #0
  4041d2:	4630      	mov	r0, r6
  4041d4:	4b19      	ldr	r3, [pc, #100]	; (40423c <indev_keypad_proc+0x2a4>)
  4041d6:	4798      	blx	r3
                lv_group_focus_next(g);
  4041d8:	4630      	mov	r0, r6
  4041da:	4b19      	ldr	r3, [pc, #100]	; (404240 <indev_keypad_proc+0x2a8>)
  4041dc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4041de:	f104 001c 	add.w	r0, r4, #28
  4041e2:	4b14      	ldr	r3, [pc, #80]	; (404234 <indev_keypad_proc+0x29c>)
  4041e4:	4798      	blx	r3
  4041e6:	2800      	cmp	r0, #0
  4041e8:	f43f af06 	beq.w	403ff8 <indev_keypad_proc+0x60>
  4041ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4041ee:	2100      	movs	r1, #0
  4041f0:	4630      	mov	r0, r6
  4041f2:	4b12      	ldr	r3, [pc, #72]	; (40423c <indev_keypad_proc+0x2a4>)
  4041f4:	4798      	blx	r3
                lv_group_focus_prev(g);
  4041f6:	4630      	mov	r0, r6
  4041f8:	4b12      	ldr	r3, [pc, #72]	; (404244 <indev_keypad_proc+0x2ac>)
  4041fa:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4041fc:	f104 001c 	add.w	r0, r4, #28
  404200:	4b0c      	ldr	r3, [pc, #48]	; (404234 <indev_keypad_proc+0x29c>)
  404202:	4798      	blx	r3
  404204:	2800      	cmp	r0, #0
  404206:	f43f aef7 	beq.w	403ff8 <indev_keypad_proc+0x60>
  40420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data->key = prev_key;
  40420c:	6069      	str	r1, [r5, #4]
        if(data->key == LV_KEY_ENTER) {
  40420e:	290a      	cmp	r1, #10
  404210:	d01c      	beq.n	40424c <indev_keypad_proc+0x2b4>
        i->proc.pr_timestamp = 0;
  404212:	2200      	movs	r2, #0
  404214:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  404216:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40421a:	f362 0300 	bfi	r3, r2, #0, #1
  40421e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  404222:	e6e9      	b.n	403ff8 <indev_keypad_proc+0x60>
  404224:	0040347d 	.word	0x0040347d
  404228:	2040c380 	.word	0x2040c380
  40422c:	00414345 	.word	0x00414345
  404230:	00403491 	.word	0x00403491
  404234:	0040363d 	.word	0x0040363d
  404238:	00405229 	.word	0x00405229
  40423c:	004034c9 	.word	0x004034c9
  404240:	0040338d 	.word	0x0040338d
  404244:	004033a5 	.word	0x004033a5
  404248:	00414361 	.word	0x00414361
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  40424c:	69c3      	ldr	r3, [r0, #28]
  40424e:	2200      	movs	r2, #0
  404250:	210e      	movs	r1, #14
  404252:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404254:	f104 051c 	add.w	r5, r4, #28
  404258:	4628      	mov	r0, r5
  40425a:	4b17      	ldr	r3, [pc, #92]	; (4042b8 <indev_keypad_proc+0x320>)
  40425c:	4798      	blx	r3
  40425e:	2800      	cmp	r0, #0
  404260:	f47f aecd 	bne.w	403ffe <indev_keypad_proc+0x66>
            if(i->proc.long_pr_sent == 0) {
  404264:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404268:	f013 0f01 	tst.w	r3, #1
  40426c:	d10b      	bne.n	404286 <indev_keypad_proc+0x2ee>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  40426e:	2200      	movs	r2, #0
  404270:	2103      	movs	r1, #3
  404272:	4b12      	ldr	r3, [pc, #72]	; (4042bc <indev_keypad_proc+0x324>)
  404274:	6818      	ldr	r0, [r3, #0]
  404276:	4b12      	ldr	r3, [pc, #72]	; (4042c0 <indev_keypad_proc+0x328>)
  404278:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40427a:	4628      	mov	r0, r5
  40427c:	4b0e      	ldr	r3, [pc, #56]	; (4042b8 <indev_keypad_proc+0x320>)
  40427e:	4798      	blx	r3
  404280:	2800      	cmp	r0, #0
  404282:	f47f aebc 	bne.w	403ffe <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404286:	2200      	movs	r2, #0
  404288:	2106      	movs	r1, #6
  40428a:	4b0c      	ldr	r3, [pc, #48]	; (4042bc <indev_keypad_proc+0x324>)
  40428c:	6818      	ldr	r0, [r3, #0]
  40428e:	4b0c      	ldr	r3, [pc, #48]	; (4042c0 <indev_keypad_proc+0x328>)
  404290:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404292:	4628      	mov	r0, r5
  404294:	4b08      	ldr	r3, [pc, #32]	; (4042b8 <indev_keypad_proc+0x320>)
  404296:	4798      	blx	r3
  404298:	2800      	cmp	r0, #0
  40429a:	f47f aeb0 	bne.w	403ffe <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40429e:	2200      	movs	r2, #0
  4042a0:	2107      	movs	r1, #7
  4042a2:	4b06      	ldr	r3, [pc, #24]	; (4042bc <indev_keypad_proc+0x324>)
  4042a4:	6818      	ldr	r0, [r3, #0]
  4042a6:	4b06      	ldr	r3, [pc, #24]	; (4042c0 <indev_keypad_proc+0x328>)
  4042a8:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4042aa:	4628      	mov	r0, r5
  4042ac:	4b02      	ldr	r3, [pc, #8]	; (4042b8 <indev_keypad_proc+0x320>)
  4042ae:	4798      	blx	r3
  4042b0:	2800      	cmp	r0, #0
  4042b2:	d0ae      	beq.n	404212 <indev_keypad_proc+0x27a>
  4042b4:	e6a3      	b.n	403ffe <indev_keypad_proc+0x66>
  4042b6:	bf00      	nop
  4042b8:	0040363d 	.word	0x0040363d
  4042bc:	2040c380 	.word	0x2040c380
  4042c0:	00405229 	.word	0x00405229

004042c4 <indev_encoder_proc>:
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4042c4:	7b8b      	ldrb	r3, [r1, #14]
  4042c6:	2b01      	cmp	r3, #1
  4042c8:	d040      	beq.n	40434c <indev_encoder_proc+0x88>
{
  4042ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  4042cc:	b083      	sub	sp, #12
    if(i->proc.wait_until_release) {
  4042ce:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4042d2:	f013 0f08 	tst.w	r3, #8
  4042d6:	d00b      	beq.n	4042f0 <indev_encoder_proc+0x2c>
        i->proc.wait_until_release      = 0;
  4042d8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  4042dc:	2200      	movs	r2, #0
  4042de:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  4042e0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4042e4:	f362 0300 	bfi	r3, r2, #0, #1
  4042e8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  4042ec:	f880 2020 	strb.w	r2, [r0, #32]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
  4042f0:	f890 7020 	ldrb.w	r7, [r0, #32]
    i->proc.types.keypad.last_state = data->state;
  4042f4:	7b8b      	ldrb	r3, [r1, #14]
  4042f6:	f880 3020 	strb.w	r3, [r0, #32]
    i->proc.types.keypad.last_key   = data->key;
  4042fa:	684b      	ldr	r3, [r1, #4]
  4042fc:	6243      	str	r3, [r0, #36]	; 0x24
    lv_group_t * g = i->group;
  4042fe:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  404300:	b316      	cbz	r6, 404348 <indev_encoder_proc+0x84>
  404302:	460c      	mov	r4, r1
  404304:	4605      	mov	r5, r0
    indev_obj_act = lv_group_get_focused(g);
  404306:	4630      	mov	r0, r6
  404308:	4b90      	ldr	r3, [pc, #576]	; (40454c <indev_encoder_proc+0x288>)
  40430a:	4798      	blx	r3
  40430c:	4b90      	ldr	r3, [pc, #576]	; (404550 <indev_encoder_proc+0x28c>)
  40430e:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404310:	b1d0      	cbz	r0, 404348 <indev_encoder_proc+0x84>
    if(data->state != LV_INDEV_STATE_REL) {
  404312:	7ba3      	ldrb	r3, [r4, #14]
  404314:	b10b      	cbz	r3, 40431a <indev_encoder_proc+0x56>
        data->enc_diff = 0;
  404316:	2300      	movs	r3, #0
  404318:	81a3      	strh	r3, [r4, #12]
    indev_obj_act = lv_group_get_focused(g);
  40431a:	4630      	mov	r0, r6
  40431c:	4b8b      	ldr	r3, [pc, #556]	; (40454c <indev_encoder_proc+0x288>)
  40431e:	4798      	blx	r3
  404320:	4b8b      	ldr	r3, [pc, #556]	; (404550 <indev_encoder_proc+0x28c>)
  404322:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404324:	b180      	cbz	r0, 404348 <indev_encoder_proc+0x84>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404326:	7ba3      	ldrb	r3, [r4, #14]
  404328:	2b01      	cmp	r3, #1
  40432a:	d015      	beq.n	404358 <indev_encoder_proc+0x94>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  40432c:	2b01      	cmp	r3, #1
  40432e:	d068      	beq.n	404402 <indev_encoder_proc+0x13e>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
  404330:	b913      	cbnz	r3, 404338 <indev_encoder_proc+0x74>
  404332:	2f01      	cmp	r7, #1
  404334:	f000 80fe 	beq.w	404534 <indev_encoder_proc+0x270>
    indev_obj_act = NULL;
  404338:	2200      	movs	r2, #0
  40433a:	4b85      	ldr	r3, [pc, #532]	; (404550 <indev_encoder_proc+0x28c>)
  40433c:	601a      	str	r2, [r3, #0]
    if(data->enc_diff != 0) {
  40433e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404342:	2b00      	cmp	r3, #0
  404344:	f040 81aa 	bne.w	40469c <indev_encoder_proc+0x3d8>
}
  404348:	b003      	add	sp, #12
  40434a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  40434c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404350:	f013 0f08 	tst.w	r3, #8
  404354:	d0b9      	beq.n	4042ca <indev_encoder_proc+0x6>
  404356:	4770      	bx	lr
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404358:	2f00      	cmp	r7, #0
  40435a:	d1e7      	bne.n	40432c <indev_encoder_proc+0x68>
        i->proc.pr_timestamp = lv_tick_get();
  40435c:	4b7d      	ldr	r3, [pc, #500]	; (404554 <indev_encoder_proc+0x290>)
  40435e:	4798      	blx	r3
  404360:	64a8      	str	r0, [r5, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  404362:	6861      	ldr	r1, [r4, #4]
  404364:	290a      	cmp	r1, #10
  404366:	d009      	beq.n	40437c <indev_encoder_proc+0xb8>
        else if(data->key == LV_KEY_LEFT) {
  404368:	2914      	cmp	r1, #20
  40436a:	d030      	beq.n	4043ce <indev_encoder_proc+0x10a>
        else if(data->key == LV_KEY_RIGHT) {
  40436c:	2913      	cmp	r1, #19
  40436e:	d033      	beq.n	4043d8 <indev_encoder_proc+0x114>
        else if(data->key == LV_KEY_ESC) {
  404370:	291b      	cmp	r1, #27
  404372:	d036      	beq.n	4043e2 <indev_encoder_proc+0x11e>
            lv_group_send_data(g, data->key);
  404374:	4630      	mov	r0, r6
  404376:	4b78      	ldr	r3, [pc, #480]	; (404558 <indev_encoder_proc+0x294>)
  404378:	4798      	blx	r3
  40437a:	e7dd      	b.n	404338 <indev_encoder_proc+0x74>
            bool editable = false;
  40437c:	aa02      	add	r2, sp, #8
  40437e:	2300      	movs	r3, #0
  404380:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404384:	4b72      	ldr	r3, [pc, #456]	; (404550 <indev_encoder_proc+0x28c>)
  404386:	6818      	ldr	r0, [r3, #0]
  404388:	69c3      	ldr	r3, [r0, #28]
  40438a:	2119      	movs	r1, #25
  40438c:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
  40438e:	4630      	mov	r0, r6
  404390:	4b72      	ldr	r3, [pc, #456]	; (40455c <indev_encoder_proc+0x298>)
  404392:	4798      	blx	r3
  404394:	b918      	cbnz	r0, 40439e <indev_encoder_proc+0xda>
  404396:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40439a:	2b00      	cmp	r3, #0
  40439c:	d1cc      	bne.n	404338 <indev_encoder_proc+0x74>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  40439e:	4b6c      	ldr	r3, [pc, #432]	; (404550 <indev_encoder_proc+0x28c>)
  4043a0:	6818      	ldr	r0, [r3, #0]
  4043a2:	69c3      	ldr	r3, [r0, #28]
  4043a4:	2200      	movs	r2, #0
  4043a6:	210b      	movs	r1, #11
  4043a8:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4043aa:	351c      	adds	r5, #28
  4043ac:	4628      	mov	r0, r5
  4043ae:	4b6c      	ldr	r3, [pc, #432]	; (404560 <indev_encoder_proc+0x29c>)
  4043b0:	4798      	blx	r3
  4043b2:	2800      	cmp	r0, #0
  4043b4:	d1c8      	bne.n	404348 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  4043b6:	2200      	movs	r2, #0
  4043b8:	4611      	mov	r1, r2
  4043ba:	4b65      	ldr	r3, [pc, #404]	; (404550 <indev_encoder_proc+0x28c>)
  4043bc:	6818      	ldr	r0, [r3, #0]
  4043be:	4b69      	ldr	r3, [pc, #420]	; (404564 <indev_encoder_proc+0x2a0>)
  4043c0:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4043c2:	4628      	mov	r0, r5
  4043c4:	4b66      	ldr	r3, [pc, #408]	; (404560 <indev_encoder_proc+0x29c>)
  4043c6:	4798      	blx	r3
  4043c8:	2800      	cmp	r0, #0
  4043ca:	d0b5      	beq.n	404338 <indev_encoder_proc+0x74>
  4043cc:	e7bc      	b.n	404348 <indev_encoder_proc+0x84>
            data->enc_diff--;
  4043ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043d2:	3b01      	subs	r3, #1
  4043d4:	81a3      	strh	r3, [r4, #12]
  4043d6:	e7af      	b.n	404338 <indev_encoder_proc+0x74>
            data->enc_diff++;
  4043d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043dc:	3301      	adds	r3, #1
  4043de:	81a3      	strh	r3, [r4, #12]
  4043e0:	e7aa      	b.n	404338 <indev_encoder_proc+0x74>
            lv_group_send_data(g, LV_KEY_ESC);
  4043e2:	4630      	mov	r0, r6
  4043e4:	4b5c      	ldr	r3, [pc, #368]	; (404558 <indev_encoder_proc+0x294>)
  4043e6:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  4043e8:	2200      	movs	r2, #0
  4043ea:	2114      	movs	r1, #20
  4043ec:	4b58      	ldr	r3, [pc, #352]	; (404550 <indev_encoder_proc+0x28c>)
  4043ee:	6818      	ldr	r0, [r3, #0]
  4043f0:	4b5c      	ldr	r3, [pc, #368]	; (404564 <indev_encoder_proc+0x2a0>)
  4043f2:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4043f4:	f105 001c 	add.w	r0, r5, #28
  4043f8:	4b59      	ldr	r3, [pc, #356]	; (404560 <indev_encoder_proc+0x29c>)
  4043fa:	4798      	blx	r3
  4043fc:	2800      	cmp	r0, #0
  4043fe:	d09b      	beq.n	404338 <indev_encoder_proc+0x74>
  404400:	e7a2      	b.n	404348 <indev_encoder_proc+0x84>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  404402:	2f01      	cmp	r7, #1
  404404:	d194      	bne.n	404330 <indev_encoder_proc+0x6c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  404406:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40440a:	f013 0f01 	tst.w	r3, #1
  40440e:	d01f      	beq.n	404450 <indev_encoder_proc+0x18c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  404410:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404414:	f013 0f01 	tst.w	r3, #1
  404418:	d08e      	beq.n	404338 <indev_encoder_proc+0x74>
  40441a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
  40441c:	4b52      	ldr	r3, [pc, #328]	; (404568 <indev_encoder_proc+0x2a4>)
  40441e:	4798      	blx	r3
  404420:	8b6b      	ldrh	r3, [r5, #26]
  404422:	4298      	cmp	r0, r3
  404424:	d988      	bls.n	404338 <indev_encoder_proc+0x74>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404426:	4b4b      	ldr	r3, [pc, #300]	; (404554 <indev_encoder_proc+0x290>)
  404428:	4798      	blx	r3
  40442a:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40442c:	6861      	ldr	r1, [r4, #4]
  40442e:	290a      	cmp	r1, #10
  404430:	d05c      	beq.n	4044ec <indev_encoder_proc+0x228>
            else if(data->key == LV_KEY_LEFT) {
  404432:	2914      	cmp	r1, #20
  404434:	d074      	beq.n	404520 <indev_encoder_proc+0x25c>
            else if(data->key == LV_KEY_RIGHT) {
  404436:	2913      	cmp	r1, #19
  404438:	d077      	beq.n	40452a <indev_encoder_proc+0x266>
                lv_group_send_data(g, data->key);
  40443a:	4630      	mov	r0, r6
  40443c:	4b46      	ldr	r3, [pc, #280]	; (404558 <indev_encoder_proc+0x294>)
  40443e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404440:	f105 001c 	add.w	r0, r5, #28
  404444:	4b46      	ldr	r3, [pc, #280]	; (404560 <indev_encoder_proc+0x29c>)
  404446:	4798      	blx	r3
  404448:	2800      	cmp	r0, #0
  40444a:	f43f af75 	beq.w	404338 <indev_encoder_proc+0x74>
  40444e:	e77b      	b.n	404348 <indev_encoder_proc+0x84>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  404450:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  404452:	4b45      	ldr	r3, [pc, #276]	; (404568 <indev_encoder_proc+0x2a4>)
  404454:	4798      	blx	r3
  404456:	8b2b      	ldrh	r3, [r5, #24]
  404458:	4298      	cmp	r0, r3
  40445a:	d9d9      	bls.n	404410 <indev_encoder_proc+0x14c>
            i->proc.long_pr_sent = 1;
  40445c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404460:	f043 0301 	orr.w	r3, r3, #1
  404464:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404468:	4b3a      	ldr	r3, [pc, #232]	; (404554 <indev_encoder_proc+0x290>)
  40446a:	4798      	blx	r3
  40446c:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40446e:	6863      	ldr	r3, [r4, #4]
  404470:	2b0a      	cmp	r3, #10
  404472:	d006      	beq.n	404482 <indev_encoder_proc+0x1be>
            i->proc.long_pr_sent = 1;
  404474:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404478:	f043 0301 	orr.w	r3, r3, #1
  40447c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  404480:	e75a      	b.n	404338 <indev_encoder_proc+0x74>
                bool editable = false;
  404482:	aa02      	add	r2, sp, #8
  404484:	2300      	movs	r3, #0
  404486:	f802 3d01 	strb.w	r3, [r2, #-1]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  40448a:	4b31      	ldr	r3, [pc, #196]	; (404550 <indev_encoder_proc+0x28c>)
  40448c:	6818      	ldr	r0, [r3, #0]
  40448e:	69c3      	ldr	r3, [r0, #28]
  404490:	2119      	movs	r1, #25
  404492:	4798      	blx	r3
                if(editable) {
  404494:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404498:	b173      	cbz	r3, 4044b8 <indev_encoder_proc+0x1f4>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
  40449a:	4630      	mov	r0, r6
  40449c:	4b33      	ldr	r3, [pc, #204]	; (40456c <indev_encoder_proc+0x2a8>)
  40449e:	4798      	blx	r3
  4044a0:	2801      	cmp	r0, #1
  4044a2:	d9e7      	bls.n	404474 <indev_encoder_proc+0x1b0>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
  4044a4:	4630      	mov	r0, r6
  4044a6:	4b2d      	ldr	r3, [pc, #180]	; (40455c <indev_encoder_proc+0x298>)
  4044a8:	4798      	blx	r3
  4044aa:	f080 0101 	eor.w	r1, r0, #1
  4044ae:	b2c9      	uxtb	r1, r1
  4044b0:	4630      	mov	r0, r6
  4044b2:	4b2f      	ldr	r3, [pc, #188]	; (404570 <indev_encoder_proc+0x2ac>)
  4044b4:	4798      	blx	r3
  4044b6:	e7dd      	b.n	404474 <indev_encoder_proc+0x1b0>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  4044b8:	4b25      	ldr	r3, [pc, #148]	; (404550 <indev_encoder_proc+0x28c>)
  4044ba:	6818      	ldr	r0, [r3, #0]
  4044bc:	69c3      	ldr	r3, [r0, #28]
  4044be:	2200      	movs	r2, #0
  4044c0:	210f      	movs	r1, #15
  4044c2:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4044c4:	f105 071c 	add.w	r7, r5, #28
  4044c8:	4638      	mov	r0, r7
  4044ca:	4b25      	ldr	r3, [pc, #148]	; (404560 <indev_encoder_proc+0x29c>)
  4044cc:	4798      	blx	r3
  4044ce:	2800      	cmp	r0, #0
  4044d0:	f47f af3a 	bne.w	404348 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  4044d4:	2200      	movs	r2, #0
  4044d6:	2104      	movs	r1, #4
  4044d8:	4b1d      	ldr	r3, [pc, #116]	; (404550 <indev_encoder_proc+0x28c>)
  4044da:	6818      	ldr	r0, [r3, #0]
  4044dc:	4b21      	ldr	r3, [pc, #132]	; (404564 <indev_encoder_proc+0x2a0>)
  4044de:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4044e0:	4638      	mov	r0, r7
  4044e2:	4b1f      	ldr	r3, [pc, #124]	; (404560 <indev_encoder_proc+0x29c>)
  4044e4:	4798      	blx	r3
  4044e6:	2800      	cmp	r0, #0
  4044e8:	d0c4      	beq.n	404474 <indev_encoder_proc+0x1b0>
  4044ea:	e72d      	b.n	404348 <indev_encoder_proc+0x84>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  4044ec:	4b18      	ldr	r3, [pc, #96]	; (404550 <indev_encoder_proc+0x28c>)
  4044ee:	6818      	ldr	r0, [r3, #0]
  4044f0:	69c3      	ldr	r3, [r0, #28]
  4044f2:	2200      	movs	r2, #0
  4044f4:	2110      	movs	r1, #16
  4044f6:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4044f8:	351c      	adds	r5, #28
  4044fa:	4628      	mov	r0, r5
  4044fc:	4b18      	ldr	r3, [pc, #96]	; (404560 <indev_encoder_proc+0x29c>)
  4044fe:	4798      	blx	r3
  404500:	2800      	cmp	r0, #0
  404502:	f47f af21 	bne.w	404348 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404506:	2200      	movs	r2, #0
  404508:	2105      	movs	r1, #5
  40450a:	4b11      	ldr	r3, [pc, #68]	; (404550 <indev_encoder_proc+0x28c>)
  40450c:	6818      	ldr	r0, [r3, #0]
  40450e:	4b15      	ldr	r3, [pc, #84]	; (404564 <indev_encoder_proc+0x2a0>)
  404510:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404512:	4628      	mov	r0, r5
  404514:	4b12      	ldr	r3, [pc, #72]	; (404560 <indev_encoder_proc+0x29c>)
  404516:	4798      	blx	r3
  404518:	2800      	cmp	r0, #0
  40451a:	f43f af0d 	beq.w	404338 <indev_encoder_proc+0x74>
  40451e:	e713      	b.n	404348 <indev_encoder_proc+0x84>
                data->enc_diff--;
  404520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404524:	3b01      	subs	r3, #1
  404526:	81a3      	strh	r3, [r4, #12]
  404528:	e706      	b.n	404338 <indev_encoder_proc+0x74>
                data->enc_diff++;
  40452a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40452e:	3301      	adds	r3, #1
  404530:	81a3      	strh	r3, [r4, #12]
  404532:	e701      	b.n	404338 <indev_encoder_proc+0x74>
        if(data->key == LV_KEY_ENTER) {
  404534:	6863      	ldr	r3, [r4, #4]
  404536:	2b0a      	cmp	r3, #10
  404538:	d01c      	beq.n	404574 <indev_encoder_proc+0x2b0>
        i->proc.pr_timestamp = 0;
  40453a:	2200      	movs	r2, #0
  40453c:	64aa      	str	r2, [r5, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  40453e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404542:	f362 0300 	bfi	r3, r2, #0, #1
  404546:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  40454a:	e6f5      	b.n	404338 <indev_encoder_proc+0x74>
  40454c:	0040347d 	.word	0x0040347d
  404550:	2040c380 	.word	0x2040c380
  404554:	00414345 	.word	0x00414345
  404558:	00403491 	.word	0x00403491
  40455c:	004035d5 	.word	0x004035d5
  404560:	0040363d 	.word	0x0040363d
  404564:	00405229 	.word	0x00405229
  404568:	00414361 	.word	0x00414361
  40456c:	0041553d 	.word	0x0041553d
  404570:	004034c9 	.word	0x004034c9
            bool editable = false;
  404574:	aa02      	add	r2, sp, #8
  404576:	2300      	movs	r3, #0
  404578:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  40457c:	69c3      	ldr	r3, [r0, #28]
  40457e:	2119      	movs	r1, #25
  404580:	4798      	blx	r3
            if(editable == false) {
  404582:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404586:	2b00      	cmp	r3, #0
  404588:	d044      	beq.n	404614 <indev_encoder_proc+0x350>
            else if(g->editing) {
  40458a:	7d33      	ldrb	r3, [r6, #20]
  40458c:	f013 0f02 	tst.w	r3, #2
  404590:	d079      	beq.n	404686 <indev_encoder_proc+0x3c2>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
  404592:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404596:	f013 0f01 	tst.w	r3, #1
  40459a:	d004      	beq.n	4045a6 <indev_encoder_proc+0x2e2>
  40459c:	4630      	mov	r0, r6
  40459e:	4b60      	ldr	r3, [pc, #384]	; (404720 <indev_encoder_proc+0x45c>)
  4045a0:	4798      	blx	r3
  4045a2:	2801      	cmp	r0, #1
  4045a4:	d8c9      	bhi.n	40453a <indev_encoder_proc+0x276>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  4045a6:	4b5f      	ldr	r3, [pc, #380]	; (404724 <indev_encoder_proc+0x460>)
  4045a8:	6818      	ldr	r0, [r3, #0]
  4045aa:	69c3      	ldr	r3, [r0, #28]
  4045ac:	2200      	movs	r2, #0
  4045ae:	210e      	movs	r1, #14
  4045b0:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4045b2:	f105 071c 	add.w	r7, r5, #28
  4045b6:	4638      	mov	r0, r7
  4045b8:	4b5b      	ldr	r3, [pc, #364]	; (404728 <indev_encoder_proc+0x464>)
  4045ba:	4798      	blx	r3
  4045bc:	2800      	cmp	r0, #0
  4045be:	f47f aec3 	bne.w	404348 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4045c2:	2200      	movs	r2, #0
  4045c4:	2103      	movs	r1, #3
  4045c6:	4b57      	ldr	r3, [pc, #348]	; (404724 <indev_encoder_proc+0x460>)
  4045c8:	6818      	ldr	r0, [r3, #0]
  4045ca:	4b58      	ldr	r3, [pc, #352]	; (40472c <indev_encoder_proc+0x468>)
  4045cc:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4045ce:	4638      	mov	r0, r7
  4045d0:	4b55      	ldr	r3, [pc, #340]	; (404728 <indev_encoder_proc+0x464>)
  4045d2:	4798      	blx	r3
  4045d4:	2800      	cmp	r0, #0
  4045d6:	f47f aeb7 	bne.w	404348 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4045da:	2200      	movs	r2, #0
  4045dc:	2106      	movs	r1, #6
  4045de:	4b51      	ldr	r3, [pc, #324]	; (404724 <indev_encoder_proc+0x460>)
  4045e0:	6818      	ldr	r0, [r3, #0]
  4045e2:	4b52      	ldr	r3, [pc, #328]	; (40472c <indev_encoder_proc+0x468>)
  4045e4:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4045e6:	4638      	mov	r0, r7
  4045e8:	4b4f      	ldr	r3, [pc, #316]	; (404728 <indev_encoder_proc+0x464>)
  4045ea:	4798      	blx	r3
  4045ec:	2800      	cmp	r0, #0
  4045ee:	f47f aeab 	bne.w	404348 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  4045f2:	2200      	movs	r2, #0
  4045f4:	2107      	movs	r1, #7
  4045f6:	4b4b      	ldr	r3, [pc, #300]	; (404724 <indev_encoder_proc+0x460>)
  4045f8:	6818      	ldr	r0, [r3, #0]
  4045fa:	4b4c      	ldr	r3, [pc, #304]	; (40472c <indev_encoder_proc+0x468>)
  4045fc:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4045fe:	4638      	mov	r0, r7
  404600:	4b49      	ldr	r3, [pc, #292]	; (404728 <indev_encoder_proc+0x464>)
  404602:	4798      	blx	r3
  404604:	2800      	cmp	r0, #0
  404606:	f47f ae9f 	bne.w	404348 <indev_encoder_proc+0x84>
                    lv_group_send_data(g, LV_KEY_ENTER);
  40460a:	210a      	movs	r1, #10
  40460c:	4630      	mov	r0, r6
  40460e:	4b48      	ldr	r3, [pc, #288]	; (404730 <indev_encoder_proc+0x46c>)
  404610:	4798      	blx	r3
  404612:	e792      	b.n	40453a <indev_encoder_proc+0x276>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404614:	4b43      	ldr	r3, [pc, #268]	; (404724 <indev_encoder_proc+0x460>)
  404616:	6818      	ldr	r0, [r3, #0]
  404618:	69c3      	ldr	r3, [r0, #28]
  40461a:	2200      	movs	r2, #0
  40461c:	210e      	movs	r1, #14
  40461e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404620:	f105 071c 	add.w	r7, r5, #28
  404624:	4638      	mov	r0, r7
  404626:	4b40      	ldr	r3, [pc, #256]	; (404728 <indev_encoder_proc+0x464>)
  404628:	4798      	blx	r3
  40462a:	2800      	cmp	r0, #0
  40462c:	f47f ae8c 	bne.w	404348 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404630:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404634:	f013 0f01 	tst.w	r3, #1
  404638:	d01e      	beq.n	404678 <indev_encoder_proc+0x3b4>
                if(indev_reset_check(&i->proc)) return;
  40463a:	4638      	mov	r0, r7
  40463c:	4b3a      	ldr	r3, [pc, #232]	; (404728 <indev_encoder_proc+0x464>)
  40463e:	4798      	blx	r3
  404640:	2800      	cmp	r0, #0
  404642:	f47f ae81 	bne.w	404348 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404646:	2200      	movs	r2, #0
  404648:	2106      	movs	r1, #6
  40464a:	4b36      	ldr	r3, [pc, #216]	; (404724 <indev_encoder_proc+0x460>)
  40464c:	6818      	ldr	r0, [r3, #0]
  40464e:	4b37      	ldr	r3, [pc, #220]	; (40472c <indev_encoder_proc+0x468>)
  404650:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404652:	4638      	mov	r0, r7
  404654:	4b34      	ldr	r3, [pc, #208]	; (404728 <indev_encoder_proc+0x464>)
  404656:	4798      	blx	r3
  404658:	2800      	cmp	r0, #0
  40465a:	f47f ae75 	bne.w	404348 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40465e:	2200      	movs	r2, #0
  404660:	2107      	movs	r1, #7
  404662:	4b30      	ldr	r3, [pc, #192]	; (404724 <indev_encoder_proc+0x460>)
  404664:	6818      	ldr	r0, [r3, #0]
  404666:	4b31      	ldr	r3, [pc, #196]	; (40472c <indev_encoder_proc+0x468>)
  404668:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40466a:	4638      	mov	r0, r7
  40466c:	4b2e      	ldr	r3, [pc, #184]	; (404728 <indev_encoder_proc+0x464>)
  40466e:	4798      	blx	r3
  404670:	2800      	cmp	r0, #0
  404672:	f43f af62 	beq.w	40453a <indev_encoder_proc+0x276>
  404676:	e667      	b.n	404348 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404678:	2200      	movs	r2, #0
  40467a:	2103      	movs	r1, #3
  40467c:	4b29      	ldr	r3, [pc, #164]	; (404724 <indev_encoder_proc+0x460>)
  40467e:	6818      	ldr	r0, [r3, #0]
  404680:	4b2a      	ldr	r3, [pc, #168]	; (40472c <indev_encoder_proc+0x468>)
  404682:	4798      	blx	r3
  404684:	e7d9      	b.n	40463a <indev_encoder_proc+0x376>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
  404686:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40468a:	f013 0f01 	tst.w	r3, #1
  40468e:	f47f af54 	bne.w	40453a <indev_encoder_proc+0x276>
                lv_group_set_editing(g, true); /*Set edit mode*/
  404692:	2101      	movs	r1, #1
  404694:	4630      	mov	r0, r6
  404696:	4b27      	ldr	r3, [pc, #156]	; (404734 <indev_encoder_proc+0x470>)
  404698:	4798      	blx	r3
  40469a:	e74e      	b.n	40453a <indev_encoder_proc+0x276>
        if(lv_group_get_editing(g)) {
  40469c:	4630      	mov	r0, r6
  40469e:	4b26      	ldr	r3, [pc, #152]	; (404738 <indev_encoder_proc+0x474>)
  4046a0:	4798      	blx	r3
  4046a2:	b1f8      	cbz	r0, 4046e4 <indev_encoder_proc+0x420>
            if(data->enc_diff < 0) {
  4046a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046a8:	2b00      	cmp	r3, #0
  4046aa:	db0f      	blt.n	4046cc <indev_encoder_proc+0x408>
            else if(data->enc_diff > 0) {
  4046ac:	2b00      	cmp	r3, #0
  4046ae:	f77f ae4b 	ble.w	404348 <indev_encoder_proc+0x84>
  4046b2:	2500      	movs	r5, #0
  4046b4:	e011      	b.n	4046da <indev_encoder_proc+0x416>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
  4046b6:	2114      	movs	r1, #20
  4046b8:	4630      	mov	r0, r6
  4046ba:	4b1d      	ldr	r3, [pc, #116]	; (404730 <indev_encoder_proc+0x46c>)
  4046bc:	4798      	blx	r3
  4046be:	3501      	adds	r5, #1
  4046c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046c4:	425b      	negs	r3, r3
  4046c6:	429d      	cmp	r5, r3
  4046c8:	dbf5      	blt.n	4046b6 <indev_encoder_proc+0x3f2>
  4046ca:	e63d      	b.n	404348 <indev_encoder_proc+0x84>
  4046cc:	2500      	movs	r5, #0
  4046ce:	e7f7      	b.n	4046c0 <indev_encoder_proc+0x3fc>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
  4046d0:	2113      	movs	r1, #19
  4046d2:	4630      	mov	r0, r6
  4046d4:	4b16      	ldr	r3, [pc, #88]	; (404730 <indev_encoder_proc+0x46c>)
  4046d6:	4798      	blx	r3
  4046d8:	3501      	adds	r5, #1
  4046da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046de:	429d      	cmp	r5, r3
  4046e0:	dbf6      	blt.n	4046d0 <indev_encoder_proc+0x40c>
  4046e2:	e631      	b.n	404348 <indev_encoder_proc+0x84>
            if(data->enc_diff < 0) {
  4046e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046e8:	2b00      	cmp	r3, #0
  4046ea:	db0e      	blt.n	40470a <indev_encoder_proc+0x446>
            else if(data->enc_diff > 0) {
  4046ec:	2b00      	cmp	r3, #0
  4046ee:	f77f ae2b 	ble.w	404348 <indev_encoder_proc+0x84>
  4046f2:	2500      	movs	r5, #0
  4046f4:	e00f      	b.n	404716 <indev_encoder_proc+0x452>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
  4046f6:	4630      	mov	r0, r6
  4046f8:	4b10      	ldr	r3, [pc, #64]	; (40473c <indev_encoder_proc+0x478>)
  4046fa:	4798      	blx	r3
  4046fc:	3501      	adds	r5, #1
  4046fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404702:	425b      	negs	r3, r3
  404704:	429d      	cmp	r5, r3
  404706:	dbf6      	blt.n	4046f6 <indev_encoder_proc+0x432>
  404708:	e61e      	b.n	404348 <indev_encoder_proc+0x84>
  40470a:	2500      	movs	r5, #0
  40470c:	e7f7      	b.n	4046fe <indev_encoder_proc+0x43a>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
  40470e:	4630      	mov	r0, r6
  404710:	4b0b      	ldr	r3, [pc, #44]	; (404740 <indev_encoder_proc+0x47c>)
  404712:	4798      	blx	r3
  404714:	3501      	adds	r5, #1
  404716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40471a:	429d      	cmp	r5, r3
  40471c:	dbf7      	blt.n	40470e <indev_encoder_proc+0x44a>
  40471e:	e613      	b.n	404348 <indev_encoder_proc+0x84>
  404720:	0041553d 	.word	0x0041553d
  404724:	2040c380 	.word	0x2040c380
  404728:	0040363d 	.word	0x0040363d
  40472c:	00405229 	.word	0x00405229
  404730:	00403491 	.word	0x00403491
  404734:	004034c9 	.word	0x004034c9
  404738:	004035d5 	.word	0x004035d5
  40473c:	004033a5 	.word	0x004033a5
  404740:	0040338d 	.word	0x0040338d

00404744 <lv_indev_get_act>:
}
  404744:	4b01      	ldr	r3, [pc, #4]	; (40474c <lv_indev_get_act+0x8>)
  404746:	6818      	ldr	r0, [r3, #0]
  404748:	4770      	bx	lr
  40474a:	bf00      	nop
  40474c:	2040c37c 	.word	0x2040c37c

00404750 <lv_indev_reset>:
    if(indev) {
  404750:	b1b0      	cbz	r0, 404780 <lv_indev_reset+0x30>
  404752:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
  404754:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  404758:	f042 0202 	orr.w	r2, r2, #2
  40475c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
  404760:	4a17      	ldr	r2, [pc, #92]	; (4047c0 <lv_indev_reset+0x70>)
  404762:	6812      	ldr	r2, [r2, #0]
  404764:	4290      	cmp	r0, r2
  404766:	d004      	beq.n	404772 <lv_indev_reset+0x22>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
  404768:	b139      	cbz	r1, 40477a <lv_indev_reset+0x2a>
  40476a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40476c:	4291      	cmp	r1, r2
  40476e:	d004      	beq.n	40477a <lv_indev_reset+0x2a>
  404770:	4770      	bx	lr
        if(indev_act == indev) indev_obj_act = NULL;
  404772:	2000      	movs	r0, #0
  404774:	4a13      	ldr	r2, [pc, #76]	; (4047c4 <lv_indev_reset+0x74>)
  404776:	6010      	str	r0, [r2, #0]
  404778:	e7f6      	b.n	404768 <lv_indev_reset+0x18>
            indev->proc.types.pointer.last_pressed = NULL;
  40477a:	2200      	movs	r2, #0
  40477c:	63da      	str	r2, [r3, #60]	; 0x3c
  40477e:	4770      	bx	lr
{
  404780:	b510      	push	{r4, lr}
  404782:	460c      	mov	r4, r1
        lv_indev_t * i = lv_indev_get_next(NULL);
  404784:	2000      	movs	r0, #0
  404786:	4b10      	ldr	r3, [pc, #64]	; (4047c8 <lv_indev_reset+0x78>)
  404788:	4798      	blx	r3
        while(i) {
  40478a:	e007      	b.n	40479c <lv_indev_reset+0x4c>
            if(indev_act == i) indev_obj_act = NULL;
  40478c:	2200      	movs	r2, #0
  40478e:	4b0d      	ldr	r3, [pc, #52]	; (4047c4 <lv_indev_reset+0x74>)
  404790:	601a      	str	r2, [r3, #0]
  404792:	e00e      	b.n	4047b2 <lv_indev_reset+0x62>
                i->proc.types.pointer.last_pressed = NULL;
  404794:	2300      	movs	r3, #0
  404796:	63c3      	str	r3, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
  404798:	4b0b      	ldr	r3, [pc, #44]	; (4047c8 <lv_indev_reset+0x78>)
  40479a:	4798      	blx	r3
        while(i) {
  40479c:	b178      	cbz	r0, 4047be <lv_indev_reset+0x6e>
            i->proc.reset_query = 1;
  40479e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4047a2:	f043 0302 	orr.w	r3, r3, #2
  4047a6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
  4047aa:	4b05      	ldr	r3, [pc, #20]	; (4047c0 <lv_indev_reset+0x70>)
  4047ac:	681b      	ldr	r3, [r3, #0]
  4047ae:	4298      	cmp	r0, r3
  4047b0:	d0ec      	beq.n	40478c <lv_indev_reset+0x3c>
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
  4047b2:	2c00      	cmp	r4, #0
  4047b4:	d0ee      	beq.n	404794 <lv_indev_reset+0x44>
  4047b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  4047b8:	429c      	cmp	r4, r3
  4047ba:	d1ed      	bne.n	404798 <lv_indev_reset+0x48>
  4047bc:	e7ea      	b.n	404794 <lv_indev_reset+0x44>
  4047be:	bd10      	pop	{r4, pc}
  4047c0:	2040c37c 	.word	0x2040c37c
  4047c4:	2040c380 	.word	0x2040c380
  4047c8:	004142b9 	.word	0x004142b9

004047cc <_lv_indev_init>:
{
  4047cc:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
  4047ce:	2100      	movs	r1, #0
  4047d0:	4608      	mov	r0, r1
  4047d2:	4b01      	ldr	r3, [pc, #4]	; (4047d8 <_lv_indev_init+0xc>)
  4047d4:	4798      	blx	r3
  4047d6:	bd08      	pop	{r3, pc}
  4047d8:	00404751 	.word	0x00404751

004047dc <lv_indev_search_obj>:
{
  4047dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4047e0:	4680      	mov	r8, r0
  4047e2:	460f      	mov	r7, r1
    if(lv_obj_hittest(obj, point)) {
  4047e4:	4b21      	ldr	r3, [pc, #132]	; (40486c <lv_indev_search_obj+0x90>)
  4047e6:	4798      	blx	r3
  4047e8:	2800      	cmp	r0, #0
  4047ea:	d03c      	beq.n	404866 <lv_indev_search_obj+0x8a>
        _LV_LL_READ(obj->child_ll, i) {
  4047ec:	f108 0604 	add.w	r6, r8, #4
  4047f0:	4630      	mov	r0, r6
  4047f2:	4b1f      	ldr	r3, [pc, #124]	; (404870 <lv_indev_search_obj+0x94>)
  4047f4:	4798      	blx	r3
  4047f6:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  4047f8:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  4047fa:	b15c      	cbz	r4, 404814 <lv_indev_search_obj+0x38>
            found_p = lv_indev_search_obj(i, point);
  4047fc:	4639      	mov	r1, r7
  4047fe:	4620      	mov	r0, r4
  404800:	f7ff ffec 	bl	4047dc <lv_indev_search_obj>
            if(found_p != NULL) {
  404804:	4605      	mov	r5, r0
  404806:	b928      	cbnz	r0, 404814 <lv_indev_search_obj+0x38>
        _LV_LL_READ(obj->child_ll, i) {
  404808:	4621      	mov	r1, r4
  40480a:	4630      	mov	r0, r6
  40480c:	4b19      	ldr	r3, [pc, #100]	; (404874 <lv_indev_search_obj+0x98>)
  40480e:	4798      	blx	r3
  404810:	4604      	mov	r4, r0
  404812:	e7f2      	b.n	4047fa <lv_indev_search_obj+0x1e>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  404814:	b115      	cbz	r5, 40481c <lv_indev_search_obj+0x40>
}
  404816:	4628      	mov	r0, r5
  404818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  40481c:	4640      	mov	r0, r8
  40481e:	4b16      	ldr	r3, [pc, #88]	; (404878 <lv_indev_search_obj+0x9c>)
  404820:	4798      	blx	r3
  404822:	2800      	cmp	r0, #0
  404824:	d0f7      	beq.n	404816 <lv_indev_search_obj+0x3a>
  404826:	4644      	mov	r4, r8
  404828:	e003      	b.n	404832 <lv_indev_search_obj+0x56>
                hidden_i = lv_obj_get_parent(hidden_i);
  40482a:	4620      	mov	r0, r4
  40482c:	4b13      	ldr	r3, [pc, #76]	; (40487c <lv_indev_search_obj+0xa0>)
  40482e:	4798      	blx	r3
  404830:	4604      	mov	r4, r0
            while(hidden_i != NULL) {
  404832:	b124      	cbz	r4, 40483e <lv_indev_search_obj+0x62>
                if(lv_obj_get_hidden(hidden_i) == true) break;
  404834:	4620      	mov	r0, r4
  404836:	4b12      	ldr	r3, [pc, #72]	; (404880 <lv_indev_search_obj+0xa4>)
  404838:	4798      	blx	r3
  40483a:	2800      	cmp	r0, #0
  40483c:	d0f5      	beq.n	40482a <lv_indev_search_obj+0x4e>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
  40483e:	2140      	movs	r1, #64	; 0x40
  404840:	4640      	mov	r0, r8
  404842:	4b10      	ldr	r3, [pc, #64]	; (404884 <lv_indev_search_obj+0xa8>)
  404844:	4798      	blx	r3
  404846:	b950      	cbnz	r0, 40485e <lv_indev_search_obj+0x82>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
  404848:	2c00      	cmp	r4, #0
  40484a:	d1e4      	bne.n	404816 <lv_indev_search_obj+0x3a>
  40484c:	2100      	movs	r1, #0
  40484e:	4640      	mov	r0, r8
  404850:	4b0d      	ldr	r3, [pc, #52]	; (404888 <lv_indev_search_obj+0xac>)
  404852:	4798      	blx	r3
  404854:	f010 0f20 	tst.w	r0, #32
  404858:	d1dd      	bne.n	404816 <lv_indev_search_obj+0x3a>
  40485a:	4645      	mov	r5, r8
  40485c:	e7db      	b.n	404816 <lv_indev_search_obj+0x3a>
                if(hidden_i == NULL) found_p = obj;
  40485e:	2c00      	cmp	r4, #0
  404860:	d1d9      	bne.n	404816 <lv_indev_search_obj+0x3a>
  404862:	4645      	mov	r5, r8
    return found_p;
  404864:	e7d7      	b.n	404816 <lv_indev_search_obj+0x3a>
    lv_obj_t * found_p = NULL;
  404866:	2500      	movs	r5, #0
  404868:	e7d5      	b.n	404816 <lv_indev_search_obj+0x3a>
  40486a:	bf00      	nop
  40486c:	004076f9 	.word	0x004076f9
  404870:	00415375 	.word	0x00415375
  404874:	00415389 	.word	0x00415389
  404878:	00405ff1 	.word	0x00405ff1
  40487c:	004052ad 	.word	0x004052ad
  404880:	0040569d 	.word	0x0040569d
  404884:	0040650d 	.word	0x0040650d
  404888:	00406541 	.word	0x00406541

0040488c <indev_proc_press>:
    indev_obj_act = proc->types.pointer.act_obj;
  40488c:	6983      	ldr	r3, [r0, #24]
  40488e:	4a5d      	ldr	r2, [pc, #372]	; (404a04 <indev_proc_press+0x178>)
  404890:	6013      	str	r3, [r2, #0]
    if(proc->wait_until_release != 0) return;
  404892:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  404896:	f012 0f08 	tst.w	r2, #8
  40489a:	f040 81bc 	bne.w	404c16 <indev_proc_press+0x38a>
{
  40489e:	b570      	push	{r4, r5, r6, lr}
  4048a0:	4604      	mov	r4, r0
    lv_disp_t * disp = indev_act->driver.disp;
  4048a2:	4a59      	ldr	r2, [pc, #356]	; (404a08 <indev_proc_press+0x17c>)
  4048a4:	6812      	ldr	r2, [r2, #0]
  4048a6:	68d5      	ldr	r5, [r2, #12]
    if(indev_obj_act == NULL) {
  4048a8:	b343      	cbz	r3, 4048fc <indev_proc_press+0x70>
    else if(proc->types.pointer.drag_in_prog == 0 &&
  4048aa:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
  4048ae:	f012 0f02 	tst.w	r2, #2
  4048b2:	d045      	beq.n	404940 <indev_proc_press+0xb4>
    bool new_obj_searched = false;
  4048b4:	2300      	movs	r3, #0
    if(new_obj_searched && proc->types.pointer.last_obj) {
  4048b6:	b13b      	cbz	r3, 4048c8 <indev_proc_press+0x3c>
  4048b8:	69e3      	ldr	r3, [r4, #28]
  4048ba:	b12b      	cbz	r3, 4048c8 <indev_proc_press+0x3c>
        proc->types.pointer.drag_throw_vect.x = 0;
  4048bc:	2300      	movs	r3, #0
  4048be:	82a3      	strh	r3, [r4, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
  4048c0:	82e3      	strh	r3, [r4, #22]
        indev_drag_throw(proc);
  4048c2:	4620      	mov	r0, r4
  4048c4:	4b51      	ldr	r3, [pc, #324]	; (404a0c <indev_proc_press+0x180>)
  4048c6:	4798      	blx	r3
    if(indev_obj_act != proc->types.pointer.act_obj) {
  4048c8:	69a5      	ldr	r5, [r4, #24]
  4048ca:	4b4e      	ldr	r3, [pc, #312]	; (404a04 <indev_proc_press+0x178>)
  4048cc:	681b      	ldr	r3, [r3, #0]
  4048ce:	429d      	cmp	r5, r3
  4048d0:	f000 80de 	beq.w	404a90 <indev_proc_press+0x204>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
  4048d4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4048d8:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
  4048da:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  4048de:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
  4048e0:	2d00      	cmp	r5, #0
  4048e2:	d060      	beq.n	4049a6 <indev_proc_press+0x11a>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
  4048e4:	69eb      	ldr	r3, [r5, #28]
  4048e6:	4a48      	ldr	r2, [pc, #288]	; (404a08 <indev_proc_press+0x17c>)
  4048e8:	6812      	ldr	r2, [r2, #0]
  4048ea:	210d      	movs	r1, #13
  4048ec:	4628      	mov	r0, r5
  4048ee:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4048f0:	4620      	mov	r0, r4
  4048f2:	4b47      	ldr	r3, [pc, #284]	; (404a10 <indev_proc_press+0x184>)
  4048f4:	4798      	blx	r3
  4048f6:	2800      	cmp	r0, #0
  4048f8:	d04b      	beq.n	404992 <indev_proc_press+0x106>
  4048fa:	bd70      	pop	{r4, r5, r6, pc}
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  4048fc:	4628      	mov	r0, r5
  4048fe:	4b45      	ldr	r3, [pc, #276]	; (404a14 <indev_proc_press+0x188>)
  404900:	4798      	blx	r3
  404902:	1d26      	adds	r6, r4, #4
  404904:	4631      	mov	r1, r6
  404906:	4b44      	ldr	r3, [pc, #272]	; (404a18 <indev_proc_press+0x18c>)
  404908:	4798      	blx	r3
  40490a:	4b3e      	ldr	r3, [pc, #248]	; (404a04 <indev_proc_press+0x178>)
  40490c:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  40490e:	b120      	cbz	r0, 40491a <indev_proc_press+0x8e>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404910:	4b3c      	ldr	r3, [pc, #240]	; (404a04 <indev_proc_press+0x178>)
  404912:	681b      	ldr	r3, [r3, #0]
  404914:	b153      	cbz	r3, 40492c <indev_proc_press+0xa0>
        new_obj_searched = true;
  404916:	2301      	movs	r3, #1
  404918:	e7cd      	b.n	4048b6 <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  40491a:	4628      	mov	r0, r5
  40491c:	4b3f      	ldr	r3, [pc, #252]	; (404a1c <indev_proc_press+0x190>)
  40491e:	4798      	blx	r3
  404920:	4631      	mov	r1, r6
  404922:	4b3d      	ldr	r3, [pc, #244]	; (404a18 <indev_proc_press+0x18c>)
  404924:	4798      	blx	r3
  404926:	4b37      	ldr	r3, [pc, #220]	; (404a04 <indev_proc_press+0x178>)
  404928:	6018      	str	r0, [r3, #0]
  40492a:	e7f1      	b.n	404910 <indev_proc_press+0x84>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  40492c:	4628      	mov	r0, r5
  40492e:	4b3c      	ldr	r3, [pc, #240]	; (404a20 <indev_proc_press+0x194>)
  404930:	4798      	blx	r3
  404932:	4631      	mov	r1, r6
  404934:	4b38      	ldr	r3, [pc, #224]	; (404a18 <indev_proc_press+0x18c>)
  404936:	4798      	blx	r3
  404938:	4b32      	ldr	r3, [pc, #200]	; (404a04 <indev_proc_press+0x178>)
  40493a:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  40493c:	2301      	movs	r3, #1
  40493e:	e7ba      	b.n	4048b6 <indev_proc_press+0x2a>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
  404940:	2110      	movs	r1, #16
  404942:	4618      	mov	r0, r3
  404944:	4b37      	ldr	r3, [pc, #220]	; (404a24 <indev_proc_press+0x198>)
  404946:	4798      	blx	r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404948:	b108      	cbz	r0, 40494e <indev_proc_press+0xc2>
    bool new_obj_searched = false;
  40494a:	2300      	movs	r3, #0
  40494c:	e7b3      	b.n	4048b6 <indev_proc_press+0x2a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  40494e:	4628      	mov	r0, r5
  404950:	4b30      	ldr	r3, [pc, #192]	; (404a14 <indev_proc_press+0x188>)
  404952:	4798      	blx	r3
  404954:	1d26      	adds	r6, r4, #4
  404956:	4631      	mov	r1, r6
  404958:	4b2f      	ldr	r3, [pc, #188]	; (404a18 <indev_proc_press+0x18c>)
  40495a:	4798      	blx	r3
  40495c:	4b29      	ldr	r3, [pc, #164]	; (404a04 <indev_proc_press+0x178>)
  40495e:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404960:	b120      	cbz	r0, 40496c <indev_proc_press+0xe0>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404962:	4b28      	ldr	r3, [pc, #160]	; (404a04 <indev_proc_press+0x178>)
  404964:	681b      	ldr	r3, [r3, #0]
  404966:	b153      	cbz	r3, 40497e <indev_proc_press+0xf2>
        new_obj_searched = true;
  404968:	2301      	movs	r3, #1
  40496a:	e7a4      	b.n	4048b6 <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  40496c:	4628      	mov	r0, r5
  40496e:	4b2b      	ldr	r3, [pc, #172]	; (404a1c <indev_proc_press+0x190>)
  404970:	4798      	blx	r3
  404972:	4631      	mov	r1, r6
  404974:	4b28      	ldr	r3, [pc, #160]	; (404a18 <indev_proc_press+0x18c>)
  404976:	4798      	blx	r3
  404978:	4b22      	ldr	r3, [pc, #136]	; (404a04 <indev_proc_press+0x178>)
  40497a:	6018      	str	r0, [r3, #0]
  40497c:	e7f1      	b.n	404962 <indev_proc_press+0xd6>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  40497e:	4628      	mov	r0, r5
  404980:	4b27      	ldr	r3, [pc, #156]	; (404a20 <indev_proc_press+0x194>)
  404982:	4798      	blx	r3
  404984:	4631      	mov	r1, r6
  404986:	4b24      	ldr	r3, [pc, #144]	; (404a18 <indev_proc_press+0x18c>)
  404988:	4798      	blx	r3
  40498a:	4b1e      	ldr	r3, [pc, #120]	; (404a04 <indev_proc_press+0x178>)
  40498c:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  40498e:	2301      	movs	r3, #1
  404990:	e791      	b.n	4048b6 <indev_proc_press+0x2a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
  404992:	2200      	movs	r2, #0
  404994:	2102      	movs	r1, #2
  404996:	4628      	mov	r0, r5
  404998:	4b23      	ldr	r3, [pc, #140]	; (404a28 <indev_proc_press+0x19c>)
  40499a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  40499c:	4620      	mov	r0, r4
  40499e:	4b1c      	ldr	r3, [pc, #112]	; (404a10 <indev_proc_press+0x184>)
  4049a0:	4798      	blx	r3
  4049a2:	2800      	cmp	r0, #0
  4049a4:	d1a9      	bne.n	4048fa <indev_proc_press+0x6e>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
  4049a6:	4b17      	ldr	r3, [pc, #92]	; (404a04 <indev_proc_press+0x178>)
  4049a8:	681b      	ldr	r3, [r3, #0]
  4049aa:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
  4049ac:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
  4049ae:	2b00      	cmp	r3, #0
  4049b0:	d06e      	beq.n	404a90 <indev_proc_press+0x204>
            proc->pr_timestamp                 = lv_tick_get();
  4049b2:	4b1e      	ldr	r3, [pc, #120]	; (404a2c <indev_proc_press+0x1a0>)
  4049b4:	4798      	blx	r3
  4049b6:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
  4049b8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4049bc:	f36f 0300 	bfc	r3, #0, #1
  4049c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
  4049c4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
  4049c8:	2300      	movs	r3, #0
  4049ca:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
  4049cc:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  4049ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  4049d2:	2103      	movs	r1, #3
  4049d4:	f361 0284 	bfi	r2, r1, #2, #3
            proc->types.pointer.gesture_sent   = 0;
  4049d8:	f363 1245 	bfi	r2, r3, #5, #1
  4049dc:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
  4049e0:	84e3      	strh	r3, [r4, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
  4049e2:	8523      	strh	r3, [r4, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
  4049e4:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
  4049e6:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * i        = indev_obj_act;
  4049e8:	4a06      	ldr	r2, [pc, #24]	; (404a04 <indev_proc_press+0x178>)
  4049ea:	6810      	ldr	r0, [r2, #0]
            lv_obj_t * last_top = NULL;
  4049ec:	461d      	mov	r5, r3
            while(i != NULL) {
  4049ee:	e001      	b.n	4049f4 <indev_proc_press+0x168>
                i = lv_obj_get_parent(i);
  4049f0:	4b0f      	ldr	r3, [pc, #60]	; (404a30 <indev_proc_press+0x1a4>)
  4049f2:	4798      	blx	r3
            while(i != NULL) {
  4049f4:	b1f0      	cbz	r0, 404a34 <indev_proc_press+0x1a8>
                if(i->top) last_top = i;
  4049f6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  4049fa:	f013 0f20 	tst.w	r3, #32
  4049fe:	d0f7      	beq.n	4049f0 <indev_proc_press+0x164>
  404a00:	4605      	mov	r5, r0
  404a02:	e7f5      	b.n	4049f0 <indev_proc_press+0x164>
  404a04:	2040c380 	.word	0x2040c380
  404a08:	2040c37c 	.word	0x2040c37c
  404a0c:	00403681 	.word	0x00403681
  404a10:	0040363d 	.word	0x0040363d
  404a14:	0040324d 	.word	0x0040324d
  404a18:	004047dd 	.word	0x004047dd
  404a1c:	00403231 	.word	0x00403231
  404a20:	004031f9 	.word	0x004031f9
  404a24:	0040650d 	.word	0x0040650d
  404a28:	00405229 	.word	0x00405229
  404a2c:	00414345 	.word	0x00414345
  404a30:	004052ad 	.word	0x004052ad
            if(last_top != NULL) {
  404a34:	b115      	cbz	r5, 404a3c <indev_proc_press+0x1b0>
                lv_obj_move_foreground(last_top);
  404a36:	4628      	mov	r0, r5
  404a38:	4b77      	ldr	r3, [pc, #476]	; (404c18 <indev_proc_press+0x38c>)
  404a3a:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
  404a3c:	4b77      	ldr	r3, [pc, #476]	; (404c1c <indev_proc_press+0x390>)
  404a3e:	6818      	ldr	r0, [r3, #0]
  404a40:	69c3      	ldr	r3, [r0, #28]
  404a42:	4a77      	ldr	r2, [pc, #476]	; (404c20 <indev_proc_press+0x394>)
  404a44:	6812      	ldr	r2, [r2, #0]
  404a46:	210b      	movs	r1, #11
  404a48:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404a4a:	4620      	mov	r0, r4
  404a4c:	4b75      	ldr	r3, [pc, #468]	; (404c24 <indev_proc_press+0x398>)
  404a4e:	4798      	blx	r3
  404a50:	2800      	cmp	r0, #0
  404a52:	f47f af52 	bne.w	4048fa <indev_proc_press+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404a56:	2200      	movs	r2, #0
  404a58:	4611      	mov	r1, r2
  404a5a:	4b70      	ldr	r3, [pc, #448]	; (404c1c <indev_proc_press+0x390>)
  404a5c:	6818      	ldr	r0, [r3, #0]
  404a5e:	4b72      	ldr	r3, [pc, #456]	; (404c28 <indev_proc_press+0x39c>)
  404a60:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404a62:	4620      	mov	r0, r4
  404a64:	4b6f      	ldr	r3, [pc, #444]	; (404c24 <indev_proc_press+0x398>)
  404a66:	4798      	blx	r3
  404a68:	2800      	cmp	r0, #0
  404a6a:	f47f af46 	bne.w	4048fa <indev_proc_press+0x6e>
            if(indev_act->proc.wait_until_release) return;
  404a6e:	4b6c      	ldr	r3, [pc, #432]	; (404c20 <indev_proc_press+0x394>)
  404a70:	6818      	ldr	r0, [r3, #0]
  404a72:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404a76:	f013 0f08 	tst.w	r3, #8
  404a7a:	f47f af3e 	bne.w	4048fa <indev_proc_press+0x6e>
            indev_click_focus(&indev_act->proc);
  404a7e:	301c      	adds	r0, #28
  404a80:	4b6a      	ldr	r3, [pc, #424]	; (404c2c <indev_proc_press+0x3a0>)
  404a82:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404a84:	4620      	mov	r0, r4
  404a86:	4b67      	ldr	r3, [pc, #412]	; (404c24 <indev_proc_press+0x398>)
  404a88:	4798      	blx	r3
  404a8a:	2800      	cmp	r0, #0
  404a8c:	f47f af35 	bne.w	4048fa <indev_proc_press+0x6e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
  404a90:	88a0      	ldrh	r0, [r4, #4]
  404a92:	8923      	ldrh	r3, [r4, #8]
  404a94:	1ac0      	subs	r0, r0, r3
  404a96:	b200      	sxth	r0, r0
  404a98:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
  404a9a:	88e1      	ldrh	r1, [r4, #6]
  404a9c:	8963      	ldrh	r3, [r4, #10]
  404a9e:	1ac9      	subs	r1, r1, r3
  404aa0:	b209      	sxth	r1, r1
  404aa2:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
  404aa4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  404aa8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404aac:	10d2      	asrs	r2, r2, #3
  404aae:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
  404ab0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  404ab4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404ab8:	10db      	asrs	r3, r3, #3
  404aba:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
  404abc:	2a00      	cmp	r2, #0
  404abe:	db7b      	blt.n	404bb8 <indev_proc_press+0x32c>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
  404ac0:	2a00      	cmp	r2, #0
  404ac2:	dd01      	ble.n	404ac8 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.x--;
  404ac4:	3a01      	subs	r2, #1
  404ac6:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
  404ac8:	2b00      	cmp	r3, #0
  404aca:	db78      	blt.n	404bbe <indev_proc_press+0x332>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
  404acc:	2b00      	cmp	r3, #0
  404ace:	dd01      	ble.n	404ad4 <indev_proc_press+0x248>
        proc->types.pointer.drag_throw_vect.y--;
  404ad0:	3b01      	subs	r3, #1
  404ad2:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
  404ad4:	8aa3      	ldrh	r3, [r4, #20]
  404ad6:	eb03 0060 	add.w	r0, r3, r0, asr #1
  404ada:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
  404adc:	8ae3      	ldrh	r3, [r4, #22]
  404ade:	eb03 0161 	add.w	r1, r3, r1, asr #1
  404ae2:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
  404ae4:	4b4d      	ldr	r3, [pc, #308]	; (404c1c <indev_proc_press+0x390>)
  404ae6:	6818      	ldr	r0, [r3, #0]
  404ae8:	2800      	cmp	r0, #0
  404aea:	f43f af06 	beq.w	4048fa <indev_proc_press+0x6e>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
  404aee:	69c3      	ldr	r3, [r0, #28]
  404af0:	4a4b      	ldr	r2, [pc, #300]	; (404c20 <indev_proc_press+0x394>)
  404af2:	6812      	ldr	r2, [r2, #0]
  404af4:	210c      	movs	r1, #12
  404af6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404af8:	4620      	mov	r0, r4
  404afa:	4b4a      	ldr	r3, [pc, #296]	; (404c24 <indev_proc_press+0x398>)
  404afc:	4798      	blx	r3
  404afe:	2800      	cmp	r0, #0
  404b00:	f47f aefb 	bne.w	4048fa <indev_proc_press+0x6e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  404b04:	2200      	movs	r2, #0
  404b06:	2101      	movs	r1, #1
  404b08:	4b44      	ldr	r3, [pc, #272]	; (404c1c <indev_proc_press+0x390>)
  404b0a:	6818      	ldr	r0, [r3, #0]
  404b0c:	4b46      	ldr	r3, [pc, #280]	; (404c28 <indev_proc_press+0x39c>)
  404b0e:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404b10:	4620      	mov	r0, r4
  404b12:	4b44      	ldr	r3, [pc, #272]	; (404c24 <indev_proc_press+0x398>)
  404b14:	4798      	blx	r3
  404b16:	2800      	cmp	r0, #0
  404b18:	f47f aeef 	bne.w	4048fa <indev_proc_press+0x6e>
        if(indev_act->proc.wait_until_release) return;
  404b1c:	4b40      	ldr	r3, [pc, #256]	; (404c20 <indev_proc_press+0x394>)
  404b1e:	681b      	ldr	r3, [r3, #0]
  404b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  404b24:	f013 0f08 	tst.w	r3, #8
  404b28:	f47f aee7 	bne.w	4048fa <indev_proc_press+0x6e>
        indev_drag(proc);
  404b2c:	4620      	mov	r0, r4
  404b2e:	4b40      	ldr	r3, [pc, #256]	; (404c30 <indev_proc_press+0x3a4>)
  404b30:	4798      	blx	r3
        indev_gesture(proc);
  404b32:	4620      	mov	r0, r4
  404b34:	4b3f      	ldr	r3, [pc, #252]	; (404c34 <indev_proc_press+0x3a8>)
  404b36:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404b38:	4620      	mov	r0, r4
  404b3a:	4b3a      	ldr	r3, [pc, #232]	; (404c24 <indev_proc_press+0x398>)
  404b3c:	4798      	blx	r3
  404b3e:	2800      	cmp	r0, #0
  404b40:	f47f aedb 	bne.w	4048fa <indev_proc_press+0x6e>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
  404b44:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404b48:	f013 0f02 	tst.w	r3, #2
  404b4c:	d104      	bne.n	404b58 <indev_proc_press+0x2cc>
  404b4e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404b52:	f013 0f01 	tst.w	r3, #1
  404b56:	d035      	beq.n	404bc4 <indev_proc_press+0x338>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
  404b58:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404b5c:	f013 0f02 	tst.w	r3, #2
  404b60:	f47f aecb 	bne.w	4048fa <indev_proc_press+0x6e>
  404b64:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404b68:	f013 0f01 	tst.w	r3, #1
  404b6c:	f43f aec5 	beq.w	4048fa <indev_proc_press+0x6e>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
  404b70:	6b20      	ldr	r0, [r4, #48]	; 0x30
  404b72:	4b31      	ldr	r3, [pc, #196]	; (404c38 <indev_proc_press+0x3ac>)
  404b74:	4798      	blx	r3
  404b76:	4b2a      	ldr	r3, [pc, #168]	; (404c20 <indev_proc_press+0x394>)
  404b78:	681a      	ldr	r2, [r3, #0]
  404b7a:	8b53      	ldrh	r3, [r2, #26]
  404b7c:	4298      	cmp	r0, r3
  404b7e:	f67f aebc 	bls.w	4048fa <indev_proc_press+0x6e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
  404b82:	4b26      	ldr	r3, [pc, #152]	; (404c1c <indev_proc_press+0x390>)
  404b84:	6818      	ldr	r0, [r3, #0]
  404b86:	69c3      	ldr	r3, [r0, #28]
  404b88:	2110      	movs	r1, #16
  404b8a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404b8c:	4620      	mov	r0, r4
  404b8e:	4b25      	ldr	r3, [pc, #148]	; (404c24 <indev_proc_press+0x398>)
  404b90:	4798      	blx	r3
  404b92:	2800      	cmp	r0, #0
  404b94:	f47f aeb1 	bne.w	4048fa <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404b98:	2200      	movs	r2, #0
  404b9a:	2105      	movs	r1, #5
  404b9c:	4b1f      	ldr	r3, [pc, #124]	; (404c1c <indev_proc_press+0x390>)
  404b9e:	6818      	ldr	r0, [r3, #0]
  404ba0:	4b21      	ldr	r3, [pc, #132]	; (404c28 <indev_proc_press+0x39c>)
  404ba2:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404ba4:	4620      	mov	r0, r4
  404ba6:	4b1f      	ldr	r3, [pc, #124]	; (404c24 <indev_proc_press+0x398>)
  404ba8:	4798      	blx	r3
  404baa:	2800      	cmp	r0, #0
  404bac:	f47f aea5 	bne.w	4048fa <indev_proc_press+0x6e>
                proc->longpr_rep_timestamp = lv_tick_get();
  404bb0:	4b22      	ldr	r3, [pc, #136]	; (404c3c <indev_proc_press+0x3b0>)
  404bb2:	4798      	blx	r3
  404bb4:	6320      	str	r0, [r4, #48]	; 0x30
  404bb6:	e6a0      	b.n	4048fa <indev_proc_press+0x6e>
        proc->types.pointer.drag_throw_vect.x++;
  404bb8:	3201      	adds	r2, #1
  404bba:	82a2      	strh	r2, [r4, #20]
  404bbc:	e784      	b.n	404ac8 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.y++;
  404bbe:	3301      	adds	r3, #1
  404bc0:	82e3      	strh	r3, [r4, #22]
  404bc2:	e787      	b.n	404ad4 <indev_proc_press+0x248>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
  404bc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404bc6:	4b1c      	ldr	r3, [pc, #112]	; (404c38 <indev_proc_press+0x3ac>)
  404bc8:	4798      	blx	r3
  404bca:	4b15      	ldr	r3, [pc, #84]	; (404c20 <indev_proc_press+0x394>)
  404bcc:	681a      	ldr	r2, [r3, #0]
  404bce:	8b13      	ldrh	r3, [r2, #24]
  404bd0:	4298      	cmp	r0, r3
  404bd2:	d9c1      	bls.n	404b58 <indev_proc_press+0x2cc>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
  404bd4:	4b11      	ldr	r3, [pc, #68]	; (404c1c <indev_proc_press+0x390>)
  404bd6:	6818      	ldr	r0, [r3, #0]
  404bd8:	69c3      	ldr	r3, [r0, #28]
  404bda:	210f      	movs	r1, #15
  404bdc:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404bde:	4620      	mov	r0, r4
  404be0:	4b10      	ldr	r3, [pc, #64]	; (404c24 <indev_proc_press+0x398>)
  404be2:	4798      	blx	r3
  404be4:	2800      	cmp	r0, #0
  404be6:	f47f ae88 	bne.w	4048fa <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  404bea:	2200      	movs	r2, #0
  404bec:	2104      	movs	r1, #4
  404bee:	4b0b      	ldr	r3, [pc, #44]	; (404c1c <indev_proc_press+0x390>)
  404bf0:	6818      	ldr	r0, [r3, #0]
  404bf2:	4b0d      	ldr	r3, [pc, #52]	; (404c28 <indev_proc_press+0x39c>)
  404bf4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404bf6:	4620      	mov	r0, r4
  404bf8:	4b0a      	ldr	r3, [pc, #40]	; (404c24 <indev_proc_press+0x398>)
  404bfa:	4798      	blx	r3
  404bfc:	2800      	cmp	r0, #0
  404bfe:	f47f ae7c 	bne.w	4048fa <indev_proc_press+0x6e>
                proc->long_pr_sent = 1;
  404c02:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404c06:	f043 0301 	orr.w	r3, r3, #1
  404c0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
  404c0e:	4b0b      	ldr	r3, [pc, #44]	; (404c3c <indev_proc_press+0x3b0>)
  404c10:	4798      	blx	r3
  404c12:	6320      	str	r0, [r4, #48]	; 0x30
  404c14:	e7a0      	b.n	404b58 <indev_proc_press+0x2cc>
  404c16:	4770      	bx	lr
  404c18:	004058a9 	.word	0x004058a9
  404c1c:	2040c380 	.word	0x2040c380
  404c20:	2040c37c 	.word	0x2040c37c
  404c24:	0040363d 	.word	0x0040363d
  404c28:	00405229 	.word	0x00405229
  404c2c:	00403a09 	.word	0x00403a09
  404c30:	00403b91 	.word	0x00403b91
  404c34:	00403ea1 	.word	0x00403ea1
  404c38:	00414361 	.word	0x00414361
  404c3c:	00414345 	.word	0x00414345

00404c40 <indev_pointer_proc>:
{
  404c40:	b538      	push	{r3, r4, r5, lr}
  404c42:	4604      	mov	r4, r0
  404c44:	460d      	mov	r5, r1
    if(i->cursor != NULL &&
  404c46:	6d40      	ldr	r0, [r0, #84]	; 0x54
  404c48:	b148      	cbz	r0, 404c5e <indev_pointer_proc+0x1e>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
  404c4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404c4c:	680b      	ldr	r3, [r1, #0]
    if(i->cursor != NULL &&
  404c4e:	429a      	cmp	r2, r3
  404c50:	d005      	beq.n	404c5e <indev_pointer_proc+0x1e>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
  404c52:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  404c56:	f9b1 1000 	ldrsh.w	r1, [r1]
  404c5a:	4b0d      	ldr	r3, [pc, #52]	; (404c90 <indev_pointer_proc+0x50>)
  404c5c:	4798      	blx	r3
    i->proc.types.pointer.act_point.x = data->point.x;
  404c5e:	f9b5 3000 	ldrsh.w	r3, [r5]
  404c62:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
  404c64:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  404c68:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
  404c6a:	7f23      	ldrb	r3, [r4, #28]
  404c6c:	2b01      	cmp	r3, #1
  404c6e:	d00a      	beq.n	404c86 <indev_pointer_proc+0x46>
        indev_proc_release(&i->proc);
  404c70:	f104 001c 	add.w	r0, r4, #28
  404c74:	4b07      	ldr	r3, [pc, #28]	; (404c94 <indev_pointer_proc+0x54>)
  404c76:	4798      	blx	r3
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  404c78:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  404c7c:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  404c7e:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  404c82:	84e3      	strh	r3, [r4, #38]	; 0x26
  404c84:	bd38      	pop	{r3, r4, r5, pc}
        indev_proc_press(&i->proc);
  404c86:	f104 001c 	add.w	r0, r4, #28
  404c8a:	4b03      	ldr	r3, [pc, #12]	; (404c98 <indev_pointer_proc+0x58>)
  404c8c:	4798      	blx	r3
  404c8e:	e7f3      	b.n	404c78 <indev_pointer_proc+0x38>
  404c90:	00405911 	.word	0x00405911
  404c94:	0040385d 	.word	0x0040385d
  404c98:	0040488d 	.word	0x0040488d

00404c9c <indev_button_proc>:
    if(i->btn_points == NULL) {
  404c9c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  404c9e:	2b00      	cmp	r3, #0
  404ca0:	d03a      	beq.n	404d18 <indev_button_proc+0x7c>
{
  404ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ca6:	460d      	mov	r5, r1
  404ca8:	4604      	mov	r4, r0
    lv_coord_t x = i->btn_points[data->btn_id].x;
  404caa:	688a      	ldr	r2, [r1, #8]
  404cac:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404cb0:	f933 7022 	ldrsh.w	r7, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
  404cb4:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
  404cb8:	7bab      	ldrb	r3, [r5, #14]
  404cba:	2b01      	cmp	r3, #1
  404cbc:	d01a      	beq.n	404cf4 <indev_button_proc+0x58>
    if(indev_reset_check(&i->proc)) return;
  404cbe:	f104 061c 	add.w	r6, r4, #28
  404cc2:	4630      	mov	r0, r6
  404cc4:	4b15      	ldr	r3, [pc, #84]	; (404d1c <indev_button_proc+0x80>)
  404cc6:	4798      	blx	r3
  404cc8:	b990      	cbnz	r0, 404cf0 <indev_button_proc+0x54>
    i->proc.types.pointer.act_point.x = x;
  404cca:	8427      	strh	r7, [r4, #32]
    i->proc.types.pointer.act_point.y = y;
  404ccc:	f8a4 8022 	strh.w	r8, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  404cd0:	7bab      	ldrb	r3, [r5, #14]
  404cd2:	2b01      	cmp	r3, #1
  404cd4:	d01c      	beq.n	404d10 <indev_button_proc+0x74>
    else indev_proc_release(&i->proc);
  404cd6:	4630      	mov	r0, r6
  404cd8:	4b11      	ldr	r3, [pc, #68]	; (404d20 <indev_button_proc+0x84>)
  404cda:	4798      	blx	r3
    if(indev_reset_check(&i->proc)) return;
  404cdc:	4630      	mov	r0, r6
  404cde:	4b0f      	ldr	r3, [pc, #60]	; (404d1c <indev_button_proc+0x80>)
  404ce0:	4798      	blx	r3
  404ce2:	b928      	cbnz	r0, 404cf0 <indev_button_proc+0x54>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  404ce4:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  404ce8:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  404cea:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  404cee:	84e3      	strh	r3, [r4, #38]	; 0x26
  404cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(i->proc.types.pointer.last_point.x != x ||
  404cf4:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  404cf8:	429f      	cmp	r7, r3
  404cfa:	d004      	beq.n	404d06 <indev_button_proc+0x6a>
            indev_proc_release(&i->proc);
  404cfc:	f104 001c 	add.w	r0, r4, #28
  404d00:	4b07      	ldr	r3, [pc, #28]	; (404d20 <indev_button_proc+0x84>)
  404d02:	4798      	blx	r3
  404d04:	e7db      	b.n	404cbe <indev_button_proc+0x22>
           i->proc.types.pointer.last_point.y != y) {
  404d06:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
  404d0a:	4598      	cmp	r8, r3
  404d0c:	d1f6      	bne.n	404cfc <indev_button_proc+0x60>
  404d0e:	e7d6      	b.n	404cbe <indev_button_proc+0x22>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  404d10:	4630      	mov	r0, r6
  404d12:	4b04      	ldr	r3, [pc, #16]	; (404d24 <indev_button_proc+0x88>)
  404d14:	4798      	blx	r3
  404d16:	e7e1      	b.n	404cdc <indev_button_proc+0x40>
  404d18:	4770      	bx	lr
  404d1a:	bf00      	nop
  404d1c:	0040363d 	.word	0x0040363d
  404d20:	0040385d 	.word	0x0040385d
  404d24:	0040488d 	.word	0x0040488d

00404d28 <_lv_indev_read_task>:
    indev_act = task->user_data;
  404d28:	68c0      	ldr	r0, [r0, #12]
  404d2a:	4b2e      	ldr	r3, [pc, #184]	; (404de4 <_lv_indev_read_task+0xbc>)
  404d2c:	6018      	str	r0, [r3, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
  404d2e:	68c3      	ldr	r3, [r0, #12]
  404d30:	2b00      	cmp	r3, #0
  404d32:	d055      	beq.n	404de0 <_lv_indev_read_task+0xb8>
{
  404d34:	b530      	push	{r4, r5, lr}
  404d36:	b085      	sub	sp, #20
    indev_proc_reset_query_handler(indev_act);
  404d38:	4b2b      	ldr	r3, [pc, #172]	; (404de8 <_lv_indev_read_task+0xc0>)
  404d3a:	4798      	blx	r3
    if(indev_act->proc.disabled) return;
  404d3c:	4b29      	ldr	r3, [pc, #164]	; (404de4 <_lv_indev_read_task+0xbc>)
  404d3e:	681b      	ldr	r3, [r3, #0]
  404d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  404d44:	f013 0f04 	tst.w	r3, #4
  404d48:	d018      	beq.n	404d7c <_lv_indev_read_task+0x54>
}
  404d4a:	b005      	add	sp, #20
  404d4c:	bd30      	pop	{r4, r5, pc}
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  404d4e:	68dc      	ldr	r4, [r3, #12]
  404d50:	4b26      	ldr	r3, [pc, #152]	; (404dec <_lv_indev_read_task+0xc4>)
  404d52:	4798      	blx	r3
  404d54:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  404d58:	e025      	b.n	404da6 <_lv_indev_read_task+0x7e>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  404d5a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  404d5e:	b312      	cbz	r2, 404da6 <_lv_indev_read_task+0x7e>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  404d60:	68dc      	ldr	r4, [r3, #12]
  404d62:	4b22      	ldr	r3, [pc, #136]	; (404dec <_lv_indev_read_task+0xc4>)
  404d64:	4798      	blx	r3
  404d66:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  404d6a:	e01c      	b.n	404da6 <_lv_indev_read_task+0x7e>
            indev_pointer_proc(indev_act, &data);
  404d6c:	4669      	mov	r1, sp
  404d6e:	4b20      	ldr	r3, [pc, #128]	; (404df0 <_lv_indev_read_task+0xc8>)
  404d70:	4798      	blx	r3
        indev_proc_reset_query_handler(indev_act);
  404d72:	4b1c      	ldr	r3, [pc, #112]	; (404de4 <_lv_indev_read_task+0xbc>)
  404d74:	6818      	ldr	r0, [r3, #0]
  404d76:	4b1c      	ldr	r3, [pc, #112]	; (404de8 <_lv_indev_read_task+0xc0>)
  404d78:	4798      	blx	r3
    } while(more_to_read);
  404d7a:	b35d      	cbz	r5, 404dd4 <_lv_indev_read_task+0xac>
        more_to_read = _lv_indev_read(indev_act, &data);
  404d7c:	4c19      	ldr	r4, [pc, #100]	; (404de4 <_lv_indev_read_task+0xbc>)
  404d7e:	4669      	mov	r1, sp
  404d80:	6820      	ldr	r0, [r4, #0]
  404d82:	4b1c      	ldr	r3, [pc, #112]	; (404df4 <_lv_indev_read_task+0xcc>)
  404d84:	4798      	blx	r3
  404d86:	4605      	mov	r5, r0
        indev_proc_reset_query_handler(indev_act);
  404d88:	6820      	ldr	r0, [r4, #0]
  404d8a:	4b17      	ldr	r3, [pc, #92]	; (404de8 <_lv_indev_read_task+0xc0>)
  404d8c:	4798      	blx	r3
        indev_obj_act = NULL;
  404d8e:	2200      	movs	r2, #0
  404d90:	4b19      	ldr	r3, [pc, #100]	; (404df8 <_lv_indev_read_task+0xd0>)
  404d92:	601a      	str	r2, [r3, #0]
        indev_act->proc.state = data.state;
  404d94:	6823      	ldr	r3, [r4, #0]
  404d96:	f89d 200e 	ldrb.w	r2, [sp, #14]
  404d9a:	771a      	strb	r2, [r3, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
  404d9c:	2a01      	cmp	r2, #1
  404d9e:	d0d6      	beq.n	404d4e <_lv_indev_read_task+0x26>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  404da0:	781a      	ldrb	r2, [r3, #0]
  404da2:	2a04      	cmp	r2, #4
  404da4:	d0d9      	beq.n	404d5a <_lv_indev_read_task+0x32>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
  404da6:	4b0f      	ldr	r3, [pc, #60]	; (404de4 <_lv_indev_read_task+0xbc>)
  404da8:	6818      	ldr	r0, [r3, #0]
  404daa:	7803      	ldrb	r3, [r0, #0]
  404dac:	2b01      	cmp	r3, #1
  404dae:	d0dd      	beq.n	404d6c <_lv_indev_read_task+0x44>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
  404db0:	2b02      	cmp	r3, #2
  404db2:	d007      	beq.n	404dc4 <_lv_indev_read_task+0x9c>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
  404db4:	2b04      	cmp	r3, #4
  404db6:	d009      	beq.n	404dcc <_lv_indev_read_task+0xa4>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
  404db8:	2b03      	cmp	r3, #3
  404dba:	d1da      	bne.n	404d72 <_lv_indev_read_task+0x4a>
            indev_button_proc(indev_act, &data);
  404dbc:	4669      	mov	r1, sp
  404dbe:	4b0f      	ldr	r3, [pc, #60]	; (404dfc <_lv_indev_read_task+0xd4>)
  404dc0:	4798      	blx	r3
  404dc2:	e7d6      	b.n	404d72 <_lv_indev_read_task+0x4a>
            indev_keypad_proc(indev_act, &data);
  404dc4:	4669      	mov	r1, sp
  404dc6:	4b0e      	ldr	r3, [pc, #56]	; (404e00 <_lv_indev_read_task+0xd8>)
  404dc8:	4798      	blx	r3
  404dca:	e7d2      	b.n	404d72 <_lv_indev_read_task+0x4a>
            indev_encoder_proc(indev_act, &data);
  404dcc:	4669      	mov	r1, sp
  404dce:	4b0d      	ldr	r3, [pc, #52]	; (404e04 <_lv_indev_read_task+0xdc>)
  404dd0:	4798      	blx	r3
  404dd2:	e7ce      	b.n	404d72 <_lv_indev_read_task+0x4a>
    indev_act     = NULL;
  404dd4:	2300      	movs	r3, #0
  404dd6:	4a03      	ldr	r2, [pc, #12]	; (404de4 <_lv_indev_read_task+0xbc>)
  404dd8:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
  404dda:	4a07      	ldr	r2, [pc, #28]	; (404df8 <_lv_indev_read_task+0xd0>)
  404ddc:	6013      	str	r3, [r2, #0]
  404dde:	e7b4      	b.n	404d4a <_lv_indev_read_task+0x22>
  404de0:	4770      	bx	lr
  404de2:	bf00      	nop
  404de4:	2040c37c 	.word	0x2040c37c
  404de8:	004035e5 	.word	0x004035e5
  404dec:	00414345 	.word	0x00414345
  404df0:	00404c41 	.word	0x00404c41
  404df4:	004142dd 	.word	0x004142dd
  404df8:	2040c380 	.word	0x2040c380
  404dfc:	00404c9d 	.word	0x00404c9d
  404e00:	00403f99 	.word	0x00403f99
  404e04:	004042c5 	.word	0x004042c5

00404e08 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
  404e08:	2850      	cmp	r0, #80	; 0x50
  404e0a:	d017      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e0c:	d90c      	bls.n	404e28 <style_prop_is_cacheble+0x20>
  404e0e:	28ff      	cmp	r0, #255	; 0xff
  404e10:	d014      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e12:	d82e      	bhi.n	404e72 <style_prop_is_cacheble+0x6a>
  404e14:	286e      	cmp	r0, #110	; 0x6e
  404e16:	d011      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e18:	d926      	bls.n	404e68 <style_prop_is_cacheble+0x60>
  404e1a:	287f      	cmp	r0, #127	; 0x7f
  404e1c:	d00e      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e1e:	2891      	cmp	r0, #145	; 0x91
  404e20:	d00c      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e22:	2872      	cmp	r0, #114	; 0x72
  404e24:	d115      	bne.n	404e52 <style_prop_is_cacheble+0x4a>
  404e26:	e009      	b.n	404e3c <style_prop_is_cacheble+0x34>
  404e28:	2818      	cmp	r0, #24
  404e2a:	d909      	bls.n	404e40 <style_prop_is_cacheble+0x38>
  404e2c:	2833      	cmp	r0, #51	; 0x33
  404e2e:	d816      	bhi.n	404e5e <style_prop_is_cacheble+0x56>
  404e30:	2830      	cmp	r0, #48	; 0x30
  404e32:	d203      	bcs.n	404e3c <style_prop_is_cacheble+0x34>
  404e34:	2820      	cmp	r0, #32
  404e36:	d001      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e38:	282c      	cmp	r0, #44	; 0x2c
  404e3a:	d10a      	bne.n	404e52 <style_prop_is_cacheble+0x4a>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
  404e3c:	2001      	movs	r0, #1
  404e3e:	4770      	bx	lr
    switch(prop) {
  404e40:	2815      	cmp	r0, #21
  404e42:	d2fb      	bcs.n	404e3c <style_prop_is_cacheble+0x34>
  404e44:	2807      	cmp	r0, #7
  404e46:	d806      	bhi.n	404e56 <style_prop_is_cacheble+0x4e>
  404e48:	2804      	cmp	r0, #4
  404e4a:	d2f7      	bcs.n	404e3c <style_prop_is_cacheble+0x34>
  404e4c:	3801      	subs	r0, #1
  404e4e:	2801      	cmp	r0, #1
  404e50:	d9f4      	bls.n	404e3c <style_prop_is_cacheble+0x34>
            break;
        default:
            return false;
  404e52:	2000      	movs	r0, #0
    }
}
  404e54:	4770      	bx	lr
    switch(prop) {
  404e56:	3810      	subs	r0, #16
  404e58:	2803      	cmp	r0, #3
  404e5a:	d8fa      	bhi.n	404e52 <style_prop_is_cacheble+0x4a>
  404e5c:	e7ee      	b.n	404e3c <style_prop_is_cacheble+0x34>
  404e5e:	2840      	cmp	r0, #64	; 0x40
  404e60:	d0ec      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e62:	2842      	cmp	r0, #66	; 0x42
  404e64:	d1f5      	bne.n	404e52 <style_prop_is_cacheble+0x4a>
  404e66:	e7e9      	b.n	404e3c <style_prop_is_cacheble+0x34>
  404e68:	2854      	cmp	r0, #84	; 0x54
  404e6a:	d0e7      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e6c:	2860      	cmp	r0, #96	; 0x60
  404e6e:	d1f0      	bne.n	404e52 <style_prop_is_cacheble+0x4a>
  404e70:	e7e4      	b.n	404e3c <style_prop_is_cacheble+0x34>
  404e72:	f248 0383 	movw	r3, #32899	; 0x8083
  404e76:	4298      	cmp	r0, r3
  404e78:	d0e0      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e7a:	d90c      	bls.n	404e96 <style_prop_is_cacheble+0x8e>
  404e7c:	f248 03a0 	movw	r3, #32928	; 0x80a0
  404e80:	4298      	cmp	r0, r3
  404e82:	d0db      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e84:	f248 03ad 	movw	r3, #32941	; 0x80ad
  404e88:	4298      	cmp	r0, r3
  404e8a:	d0d7      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e8c:	f248 038e 	movw	r3, #32910	; 0x808e
  404e90:	4298      	cmp	r0, r3
  404e92:	d1de      	bne.n	404e52 <style_prop_is_cacheble+0x4a>
  404e94:	e7d2      	b.n	404e3c <style_prop_is_cacheble+0x34>
  404e96:	f248 030c 	movw	r3, #32780	; 0x800c
  404e9a:	4298      	cmp	r0, r3
  404e9c:	d0ce      	beq.n	404e3c <style_prop_is_cacheble+0x34>
  404e9e:	d3d8      	bcc.n	404e52 <style_prop_is_cacheble+0x4a>
  404ea0:	4b02      	ldr	r3, [pc, #8]	; (404eac <style_prop_is_cacheble+0xa4>)
  404ea2:	4403      	add	r3, r0
  404ea4:	2b01      	cmp	r3, #1
  404ea6:	d8d4      	bhi.n	404e52 <style_prop_is_cacheble+0x4a>
  404ea8:	e7c8      	b.n	404e3c <style_prop_is_cacheble+0x34>
  404eaa:	bf00      	nop
  404eac:	ffff7f80 	.word	0xffff7f80

00404eb0 <refresh_children_position>:
{
  404eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404eb2:	460e      	mov	r6, r1
  404eb4:	4615      	mov	r5, r2
    _LV_LL_READ(obj->child_ll, i) {
  404eb6:	1d07      	adds	r7, r0, #4
  404eb8:	4638      	mov	r0, r7
  404eba:	4b0f      	ldr	r3, [pc, #60]	; (404ef8 <refresh_children_position+0x48>)
  404ebc:	4798      	blx	r3
  404ebe:	4604      	mov	r4, r0
  404ec0:	e017      	b.n	404ef2 <refresh_children_position+0x42>
        i->coords.x1 += x_diff;
  404ec2:	b2b2      	uxth	r2, r6
  404ec4:	8a23      	ldrh	r3, [r4, #16]
  404ec6:	4413      	add	r3, r2
  404ec8:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
  404eca:	b2ab      	uxth	r3, r5
  404ecc:	8a61      	ldrh	r1, [r4, #18]
  404ece:	4419      	add	r1, r3
  404ed0:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
  404ed2:	8aa1      	ldrh	r1, [r4, #20]
  404ed4:	440a      	add	r2, r1
  404ed6:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
  404ed8:	8ae2      	ldrh	r2, [r4, #22]
  404eda:	4413      	add	r3, r2
  404edc:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
  404ede:	462a      	mov	r2, r5
  404ee0:	4631      	mov	r1, r6
  404ee2:	4620      	mov	r0, r4
  404ee4:	f7ff ffe4 	bl	404eb0 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
  404ee8:	4621      	mov	r1, r4
  404eea:	4638      	mov	r0, r7
  404eec:	4b03      	ldr	r3, [pc, #12]	; (404efc <refresh_children_position+0x4c>)
  404eee:	4798      	blx	r3
  404ef0:	4604      	mov	r4, r0
  404ef2:	2c00      	cmp	r4, #0
  404ef4:	d1e5      	bne.n	404ec2 <refresh_children_position+0x12>
}
  404ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ef8:	00415375 	.word	0x00415375
  404efc:	00415389 	.word	0x00415389

00404f00 <style_snapshot_compare>:
    _lv_obj_disable_style_caching(obj, false);
    list->skip_trans = trans_ori;
}

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
  404f00:	b538      	push	{r3, r4, r5, lr}
  404f02:	4604      	mov	r4, r0
  404f04:	460d      	mov	r5, r1
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  404f06:	22bc      	movs	r2, #188	; 0xbc
  404f08:	4b55      	ldr	r3, [pc, #340]	; (405060 <style_snapshot_compare+0x160>)
  404f0a:	4798      	blx	r3
  404f0c:	2800      	cmp	r0, #0
  404f0e:	f000 8086 	beq.w	40501e <style_snapshot_compare+0x11e>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
  404f12:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
  404f16:	f9b5 3092 	ldrsh.w	r3, [r5, #146]	; 0x92
  404f1a:	429a      	cmp	r2, r3
  404f1c:	d001      	beq.n	404f22 <style_snapshot_compare+0x22>
  404f1e:	2002      	movs	r0, #2
  404f20:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
  404f22:	f9b4 2094 	ldrsh.w	r2, [r4, #148]	; 0x94
  404f26:	f9b5 3094 	ldrsh.w	r3, [r5, #148]	; 0x94
  404f2a:	429a      	cmp	r2, r3
  404f2c:	d001      	beq.n	404f32 <style_snapshot_compare+0x32>
  404f2e:	2002      	movs	r0, #2
  404f30:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
  404f32:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
  404f36:	f9b5 3096 	ldrsh.w	r3, [r5, #150]	; 0x96
  404f3a:	429a      	cmp	r2, r3
  404f3c:	d001      	beq.n	404f42 <style_snapshot_compare+0x42>
  404f3e:	2002      	movs	r0, #2
  404f40:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
  404f42:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
  404f46:	4293      	cmp	r3, r2
  404f48:	d001      	beq.n	404f4e <style_snapshot_compare+0x4e>
  404f4a:	2002      	movs	r0, #2
  404f4c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
  404f4e:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
  404f52:	f9b5 309a 	ldrsh.w	r3, [r5, #154]	; 0x9a
  404f56:	429a      	cmp	r2, r3
  404f58:	d001      	beq.n	404f5e <style_snapshot_compare+0x5e>
  404f5a:	2002      	movs	r0, #2
  404f5c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
  404f5e:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
  404f62:	f9b5 309c 	ldrsh.w	r3, [r5, #156]	; 0x9c
  404f66:	429a      	cmp	r2, r3
  404f68:	d001      	beq.n	404f6e <style_snapshot_compare+0x6e>
  404f6a:	2002      	movs	r0, #2
  404f6c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  404f6e:	f9b4 209e 	ldrsh.w	r2, [r4, #158]	; 0x9e
  404f72:	f9b5 309e 	ldrsh.w	r3, [r5, #158]	; 0x9e
  404f76:	429a      	cmp	r2, r3
  404f78:	d153      	bne.n	405022 <style_snapshot_compare+0x122>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  404f7a:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
  404f7e:	f9b5 30a2 	ldrsh.w	r3, [r5, #162]	; 0xa2
  404f82:	429a      	cmp	r2, r3
  404f84:	d14f      	bne.n	405026 <style_snapshot_compare+0x126>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  404f86:	f9b4 20a2 	ldrsh.w	r2, [r4, #162]	; 0xa2
  404f8a:	4293      	cmp	r3, r2
  404f8c:	d14d      	bne.n	40502a <style_snapshot_compare+0x12a>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  404f8e:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
  404f92:	f9b5 30a6 	ldrsh.w	r3, [r5, #166]	; 0xa6
  404f96:	429a      	cmp	r2, r3
  404f98:	d149      	bne.n	40502e <style_snapshot_compare+0x12e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  404f9a:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
  404f9e:	f9b5 30a8 	ldrsh.w	r3, [r5, #168]	; 0xa8
  404fa2:	429a      	cmp	r2, r3
  404fa4:	d145      	bne.n	405032 <style_snapshot_compare+0x132>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  404fa6:	f9b4 20aa 	ldrsh.w	r2, [r4, #170]	; 0xaa
  404faa:	f9b5 30aa 	ldrsh.w	r3, [r5, #170]	; 0xaa
  404fae:	429a      	cmp	r2, r3
  404fb0:	d141      	bne.n	405036 <style_snapshot_compare+0x136>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  404fb2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
  404fb6:	f9b5 30ac 	ldrsh.w	r3, [r5, #172]	; 0xac
  404fba:	429a      	cmp	r2, r3
  404fbc:	d13d      	bne.n	40503a <style_snapshot_compare+0x13a>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  404fbe:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
  404fc2:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
  404fc6:	429a      	cmp	r2, r3
  404fc8:	d139      	bne.n	40503e <style_snapshot_compare+0x13e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  404fca:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
  404fce:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
  404fd2:	429a      	cmp	r2, r3
  404fd4:	d135      	bne.n	405042 <style_snapshot_compare+0x142>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  404fd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
  404fd8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  404fda:	429a      	cmp	r2, r3
  404fdc:	d133      	bne.n	405046 <style_snapshot_compare+0x146>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  404fde:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  404fe2:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404fe6:	429a      	cmp	r2, r3
  404fe8:	d12f      	bne.n	40504a <style_snapshot_compare+0x14a>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  404fea:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
  404fee:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  404ff2:	429a      	cmp	r2, r3
  404ff4:	d12b      	bne.n	40504e <style_snapshot_compare+0x14e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  404ff6:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
  404ffa:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  404ffe:	429a      	cmp	r2, r3
  405000:	d127      	bne.n	405052 <style_snapshot_compare+0x152>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  405002:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
  405006:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
  40500a:	429a      	cmp	r2, r3
  40500c:	d123      	bne.n	405056 <style_snapshot_compare+0x156>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
  40500e:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
  405012:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
  405016:	429a      	cmp	r2, r3
  405018:	d01f      	beq.n	40505a <style_snapshot_compare+0x15a>
  40501a:	2002      	movs	r0, #2
  40501c:	bd38      	pop	{r3, r4, r5, pc}
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  40501e:	2000      	movs	r0, #0
  405020:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  405022:	2002      	movs	r0, #2
  405024:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  405026:	2002      	movs	r0, #2
  405028:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40502a:	2002      	movs	r0, #2
  40502c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  40502e:	2002      	movs	r0, #2
  405030:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  405032:	2002      	movs	r0, #2
  405034:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  405036:	2002      	movs	r0, #2
  405038:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  40503a:	2002      	movs	r0, #2
  40503c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  40503e:	2002      	movs	r0, #2
  405040:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  405042:	2002      	movs	r0, #2
  405044:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  405046:	2002      	movs	r0, #2
  405048:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  40504a:	2002      	movs	r0, #2
  40504c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  40504e:	2002      	movs	r0, #2
  405050:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  405052:	2002      	movs	r0, #2
  405054:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  405056:	2002      	movs	r0, #2
  405058:	bd38      	pop	{r3, r4, r5, pc}

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
  40505a:	2001      	movs	r0, #1
}
  40505c:	bd38      	pop	{r3, r4, r5, pc}
  40505e:	bf00      	nop
  405060:	0041e759 	.word	0x0041e759

00405064 <lv_init>:
    if(lv_initialized) {
  405064:	4b22      	ldr	r3, [pc, #136]	; (4050f0 <lv_init+0x8c>)
  405066:	781b      	ldrb	r3, [r3, #0]
  405068:	b103      	cbz	r3, 40506c <lv_init+0x8>
  40506a:	4770      	bx	lr
{
  40506c:	b510      	push	{r4, lr}
  40506e:	b084      	sub	sp, #16
    _lv_mem_init();
  405070:	4b20      	ldr	r3, [pc, #128]	; (4050f4 <lv_init+0x90>)
  405072:	4798      	blx	r3
    _lv_task_core_init();
  405074:	4b20      	ldr	r3, [pc, #128]	; (4050f8 <lv_init+0x94>)
  405076:	4798      	blx	r3
    _lv_fs_init();
  405078:	4b20      	ldr	r3, [pc, #128]	; (4050fc <lv_init+0x98>)
  40507a:	4798      	blx	r3
    _lv_anim_core_init();
  40507c:	4b20      	ldr	r3, [pc, #128]	; (405100 <lv_init+0x9c>)
  40507e:	4798      	blx	r3
    _lv_group_init();
  405080:	4b20      	ldr	r3, [pc, #128]	; (405104 <lv_init+0xa0>)
  405082:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
  405084:	2110      	movs	r1, #16
  405086:	4820      	ldr	r0, [pc, #128]	; (405108 <lv_init+0xa4>)
  405088:	4c20      	ldr	r4, [pc, #128]	; (40510c <lv_init+0xa8>)
  40508a:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
  40508c:	f44f 71c4 	mov.w	r1, #392	; 0x188
  405090:	481f      	ldr	r0, [pc, #124]	; (405110 <lv_init+0xac>)
  405092:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
  405094:	2160      	movs	r1, #96	; 0x60
  405096:	481f      	ldr	r0, [pc, #124]	; (405114 <lv_init+0xb0>)
  405098:	47a0      	blx	r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40509a:	f04f 0000 	mov.w	r0, #0
  40509e:	2316      	movs	r3, #22
  4050a0:	f363 00c7 	bfi	r0, r3, #3, #5
  4050a4:	2214      	movs	r2, #20
  4050a6:	f362 200c 	bfi	r0, r2, #8, #5
  4050aa:	f36f 304f 	bfc	r0, #13, #3
  4050ae:	f04f 0100 	mov.w	r1, #0
  4050b2:	220d      	movs	r2, #13
  4050b4:	f362 01c7 	bfi	r1, r2, #3, #5
  4050b8:	f363 210c 	bfi	r1, r3, #8, #5
  4050bc:	f36f 314f 	bfc	r1, #13, #3
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
  4050c0:	4b15      	ldr	r3, [pc, #84]	; (405118 <lv_init+0xb4>)
  4050c2:	9302      	str	r3, [sp, #8]
  4050c4:	9301      	str	r3, [sp, #4]
  4050c6:	9300      	str	r3, [sp, #0]
  4050c8:	2202      	movs	r2, #2
  4050ca:	4c14      	ldr	r4, [pc, #80]	; (40511c <lv_init+0xb8>)
  4050cc:	47a0      	blx	r4
    lv_theme_set_act(th);
  4050ce:	4b14      	ldr	r3, [pc, #80]	; (405120 <lv_init+0xbc>)
  4050d0:	4798      	blx	r3
    _lv_refr_init();
  4050d2:	4b14      	ldr	r3, [pc, #80]	; (405124 <lv_init+0xc0>)
  4050d4:	4798      	blx	r3
    _lv_indev_init();
  4050d6:	4b14      	ldr	r3, [pc, #80]	; (405128 <lv_init+0xc4>)
  4050d8:	4798      	blx	r3
    _lv_img_decoder_init();
  4050da:	4b14      	ldr	r3, [pc, #80]	; (40512c <lv_init+0xc8>)
  4050dc:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
  4050de:	2001      	movs	r0, #1
  4050e0:	4b13      	ldr	r3, [pc, #76]	; (405130 <lv_init+0xcc>)
  4050e2:	4798      	blx	r3
    lv_initialized = true;
  4050e4:	2201      	movs	r2, #1
  4050e6:	4b02      	ldr	r3, [pc, #8]	; (4050f0 <lv_init+0x8c>)
  4050e8:	701a      	strb	r2, [r3, #0]
}
  4050ea:	b004      	add	sp, #16
  4050ec:	bd10      	pop	{r4, pc}
  4050ee:	bf00      	nop
  4050f0:	2040c38c 	.word	0x2040c38c
  4050f4:	00415749 	.word	0x00415749
  4050f8:	0041615d 	.word	0x0041615d
  4050fc:	004150f5 	.word	0x004150f5
  405100:	00414581 	.word	0x00414581
  405104:	00403379 	.word	0x00403379
  405108:	2043a228 	.word	0x2043a228
  40510c:	004152cb 	.word	0x004152cb
  405110:	2043a184 	.word	0x2043a184
  405114:	2043a178 	.word	0x2043a178
  405118:	2040002c 	.word	0x2040002c
  40511c:	0041c021 	.word	0x0041c021
  405120:	004169e9 	.word	0x004169e9
  405124:	00408a99 	.word	0x00408a99
  405128:	004047cd 	.word	0x004047cd
  40512c:	00412cf5 	.word	0x00412cf5
  405130:	004122e5 	.word	0x004122e5

00405134 <lv_obj_set_click>:
{
  405134:	b538      	push	{r3, r4, r5, lr}
  405136:	4604      	mov	r4, r0
  405138:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40513a:	4b08      	ldr	r3, [pc, #32]	; (40515c <lv_obj_set_click+0x28>)
  40513c:	4798      	blx	r3
  40513e:	b130      	cbz	r0, 40514e <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
  405140:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405144:	f365 0300 	bfi	r3, r5, #0, #1
  405148:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40514c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40514e:	4622      	mov	r2, r4
  405150:	2300      	movs	r3, #0
  405152:	4803      	ldr	r0, [pc, #12]	; (405160 <lv_obj_set_click+0x2c>)
  405154:	4903      	ldr	r1, [pc, #12]	; (405164 <lv_obj_set_click+0x30>)
  405156:	4788      	blx	r1
  405158:	e7fe      	b.n	405158 <lv_obj_set_click+0x24>
  40515a:	bf00      	nop
  40515c:	00415065 	.word	0x00415065
  405160:	00421278 	.word	0x00421278
  405164:	00415071 	.word	0x00415071

00405168 <lv_event_send_func>:
{
  405168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40516c:	b084      	sub	sp, #16
  40516e:	4607      	mov	r7, r0
  405170:	4615      	mov	r5, r2
  405172:	461e      	mov	r6, r3
    if(obj != NULL) {
  405174:	460c      	mov	r4, r1
  405176:	b121      	cbz	r1, 405182 <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405178:	4608      	mov	r0, r1
  40517a:	4b24      	ldr	r3, [pc, #144]	; (40520c <lv_event_send_func+0xa4>)
  40517c:	4798      	blx	r3
  40517e:	2800      	cmp	r0, #0
  405180:	d034      	beq.n	4051ec <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
  405182:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
  405184:	2300      	movs	r3, #0
  405186:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
  40518a:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
  40518c:	4b20      	ldr	r3, [pc, #128]	; (405210 <lv_event_send_func+0xa8>)
  40518e:	681b      	ldr	r3, [r3, #0]
  405190:	b103      	cbz	r3, 405194 <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
  405192:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
  405194:	aa01      	add	r2, sp, #4
  405196:	4b1e      	ldr	r3, [pc, #120]	; (405210 <lv_event_send_func+0xa8>)
  405198:	601a      	str	r2, [r3, #0]
    const void * event_act_data_save = event_act_data;
  40519a:	4b1e      	ldr	r3, [pc, #120]	; (405214 <lv_event_send_func+0xac>)
  40519c:	f8d3 8000 	ldr.w	r8, [r3]
    event_act_data                   = data;
  4051a0:	601e      	str	r6, [r3, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
  4051a2:	4b1d      	ldr	r3, [pc, #116]	; (405218 <lv_event_send_func+0xb0>)
  4051a4:	4798      	blx	r3
    if(indev_act) {
  4051a6:	b118      	cbz	r0, 4051b0 <lv_event_send_func+0x48>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
  4051a8:	6883      	ldr	r3, [r0, #8]
  4051aa:	b10b      	cbz	r3, 4051b0 <lv_event_send_func+0x48>
  4051ac:	4629      	mov	r1, r5
  4051ae:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
  4051b0:	b117      	cbz	r7, 4051b8 <lv_event_send_func+0x50>
  4051b2:	4629      	mov	r1, r5
  4051b4:	4620      	mov	r0, r4
  4051b6:	47b8      	blx	r7
    event_act_data = event_act_data_save;
  4051b8:	4b16      	ldr	r3, [pc, #88]	; (405214 <lv_event_send_func+0xac>)
  4051ba:	f8c3 8000 	str.w	r8, [r3]
    event_temp_data_head = event_temp_data_head->prev;
  4051be:	4b14      	ldr	r3, [pc, #80]	; (405210 <lv_event_send_func+0xa8>)
  4051c0:	681a      	ldr	r2, [r3, #0]
  4051c2:	6892      	ldr	r2, [r2, #8]
  4051c4:	601a      	str	r2, [r3, #0]
    if(event_temp_data.deleted) {
  4051c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4051ca:	b9ab      	cbnz	r3, 4051f8 <lv_event_send_func+0x90>
    if(obj) {
  4051cc:	b1c4      	cbz	r4, 405200 <lv_event_send_func+0x98>
        if(obj->parent_event && obj->parent) {
  4051ce:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4051d2:	f013 0f40 	tst.w	r3, #64	; 0x40
  4051d6:	d015      	beq.n	405204 <lv_event_send_func+0x9c>
  4051d8:	6820      	ldr	r0, [r4, #0]
  4051da:	b1a8      	cbz	r0, 405208 <lv_event_send_func+0xa0>
            lv_res_t res = lv_event_send(obj->parent, event, data);
  4051dc:	4632      	mov	r2, r6
  4051de:	4629      	mov	r1, r5
  4051e0:	4b0e      	ldr	r3, [pc, #56]	; (40521c <lv_event_send_func+0xb4>)
  4051e2:	4798      	blx	r3
            if(res != LV_RES_OK) {
  4051e4:	2801      	cmp	r0, #1
  4051e6:	d008      	beq.n	4051fa <lv_event_send_func+0x92>
                return LV_RES_INV;
  4051e8:	2000      	movs	r0, #0
  4051ea:	e006      	b.n	4051fa <lv_event_send_func+0x92>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4051ec:	4622      	mov	r2, r4
  4051ee:	2300      	movs	r3, #0
  4051f0:	480b      	ldr	r0, [pc, #44]	; (405220 <lv_event_send_func+0xb8>)
  4051f2:	490c      	ldr	r1, [pc, #48]	; (405224 <lv_event_send_func+0xbc>)
  4051f4:	4788      	blx	r1
  4051f6:	e7fe      	b.n	4051f6 <lv_event_send_func+0x8e>
        return LV_RES_INV;
  4051f8:	2000      	movs	r0, #0
}
  4051fa:	b004      	add	sp, #16
  4051fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
  405200:	2001      	movs	r0, #1
  405202:	e7fa      	b.n	4051fa <lv_event_send_func+0x92>
  405204:	2001      	movs	r0, #1
  405206:	e7f8      	b.n	4051fa <lv_event_send_func+0x92>
  405208:	2001      	movs	r0, #1
  40520a:	e7f6      	b.n	4051fa <lv_event_send_func+0x92>
  40520c:	00415065 	.word	0x00415065
  405210:	2040c388 	.word	0x2040c388
  405214:	2040c384 	.word	0x2040c384
  405218:	00404745 	.word	0x00404745
  40521c:	00405229 	.word	0x00405229
  405220:	00421278 	.word	0x00421278
  405224:	00415071 	.word	0x00415071

00405228 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
  405228:	b198      	cbz	r0, 405252 <lv_event_send+0x2a>
{
  40522a:	b570      	push	{r4, r5, r6, lr}
  40522c:	4604      	mov	r4, r0
  40522e:	4616      	mov	r6, r2
  405230:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405232:	4b09      	ldr	r3, [pc, #36]	; (405258 <lv_event_send+0x30>)
  405234:	4798      	blx	r3
  405236:	b928      	cbnz	r0, 405244 <lv_event_send+0x1c>
  405238:	4622      	mov	r2, r4
  40523a:	2300      	movs	r3, #0
  40523c:	4807      	ldr	r0, [pc, #28]	; (40525c <lv_event_send+0x34>)
  40523e:	4908      	ldr	r1, [pc, #32]	; (405260 <lv_event_send+0x38>)
  405240:	4788      	blx	r1
  405242:	e7fe      	b.n	405242 <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
  405244:	4633      	mov	r3, r6
  405246:	462a      	mov	r2, r5
  405248:	4621      	mov	r1, r4
  40524a:	69a0      	ldr	r0, [r4, #24]
  40524c:	4c05      	ldr	r4, [pc, #20]	; (405264 <lv_event_send+0x3c>)
  40524e:	47a0      	blx	r4
    return res;
  405250:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
  405252:	2001      	movs	r0, #1
  405254:	4770      	bx	lr
  405256:	bf00      	nop
  405258:	00415065 	.word	0x00415065
  40525c:	00421278 	.word	0x00421278
  405260:	00415071 	.word	0x00415071
  405264:	00405169 	.word	0x00405169

00405268 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
  405268:	b120      	cbz	r0, 405274 <lv_signal_send+0xc>
{
  40526a:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
  40526c:	69c4      	ldr	r4, [r0, #28]
  40526e:	b11c      	cbz	r4, 405278 <lv_signal_send+0x10>
  405270:	47a0      	blx	r4
  405272:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
  405274:	2001      	movs	r0, #1
  405276:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
  405278:	2001      	movs	r0, #1
}
  40527a:	bd10      	pop	{r4, pc}

0040527c <lv_obj_refresh_ext_draw_pad>:
{
  40527c:	b510      	push	{r4, lr}
  40527e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405280:	4b07      	ldr	r3, [pc, #28]	; (4052a0 <lv_obj_refresh_ext_draw_pad+0x24>)
  405282:	4798      	blx	r3
  405284:	b928      	cbnz	r0, 405292 <lv_obj_refresh_ext_draw_pad+0x16>
  405286:	4622      	mov	r2, r4
  405288:	2300      	movs	r3, #0
  40528a:	4806      	ldr	r0, [pc, #24]	; (4052a4 <lv_obj_refresh_ext_draw_pad+0x28>)
  40528c:	4906      	ldr	r1, [pc, #24]	; (4052a8 <lv_obj_refresh_ext_draw_pad+0x2c>)
  40528e:	4788      	blx	r1
  405290:	e7fe      	b.n	405290 <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
  405292:	2200      	movs	r2, #0
  405294:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
  405296:	69e3      	ldr	r3, [r4, #28]
  405298:	2106      	movs	r1, #6
  40529a:	4620      	mov	r0, r4
  40529c:	4798      	blx	r3
  40529e:	bd10      	pop	{r4, pc}
  4052a0:	00415065 	.word	0x00415065
  4052a4:	00421278 	.word	0x00421278
  4052a8:	00415071 	.word	0x00415071

004052ac <lv_obj_get_parent>:
{
  4052ac:	b510      	push	{r4, lr}
  4052ae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4052b0:	4b05      	ldr	r3, [pc, #20]	; (4052c8 <lv_obj_get_parent+0x1c>)
  4052b2:	4798      	blx	r3
  4052b4:	b108      	cbz	r0, 4052ba <lv_obj_get_parent+0xe>
}
  4052b6:	6820      	ldr	r0, [r4, #0]
  4052b8:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4052ba:	4622      	mov	r2, r4
  4052bc:	2300      	movs	r3, #0
  4052be:	4803      	ldr	r0, [pc, #12]	; (4052cc <lv_obj_get_parent+0x20>)
  4052c0:	4903      	ldr	r1, [pc, #12]	; (4052d0 <lv_obj_get_parent+0x24>)
  4052c2:	4788      	blx	r1
  4052c4:	e7fe      	b.n	4052c4 <lv_obj_get_parent+0x18>
  4052c6:	bf00      	nop
  4052c8:	00415065 	.word	0x00415065
  4052cc:	00421278 	.word	0x00421278
  4052d0:	00415071 	.word	0x00415071

004052d4 <lv_obj_get_screen>:
{
  4052d4:	b510      	push	{r4, lr}
  4052d6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4052d8:	4b08      	ldr	r3, [pc, #32]	; (4052fc <lv_obj_get_screen+0x28>)
  4052da:	4798      	blx	r3
  4052dc:	b930      	cbnz	r0, 4052ec <lv_obj_get_screen+0x18>
  4052de:	4622      	mov	r2, r4
  4052e0:	2300      	movs	r3, #0
  4052e2:	4807      	ldr	r0, [pc, #28]	; (405300 <lv_obj_get_screen+0x2c>)
  4052e4:	4907      	ldr	r1, [pc, #28]	; (405304 <lv_obj_get_screen+0x30>)
  4052e6:	4788      	blx	r1
  4052e8:	e7fe      	b.n	4052e8 <lv_obj_get_screen+0x14>
        par   = lv_obj_get_parent(act_p);
  4052ea:	461c      	mov	r4, r3
  4052ec:	4620      	mov	r0, r4
  4052ee:	4b06      	ldr	r3, [pc, #24]	; (405308 <lv_obj_get_screen+0x34>)
  4052f0:	4798      	blx	r3
    } while(par != NULL);
  4052f2:	4603      	mov	r3, r0
  4052f4:	2800      	cmp	r0, #0
  4052f6:	d1f8      	bne.n	4052ea <lv_obj_get_screen+0x16>
}
  4052f8:	4620      	mov	r0, r4
  4052fa:	bd10      	pop	{r4, pc}
  4052fc:	00415065 	.word	0x00415065
  405300:	00421278 	.word	0x00421278
  405304:	00415071 	.word	0x00415071
  405308:	004052ad 	.word	0x004052ad

0040530c <lv_obj_get_disp>:
{
  40530c:	b570      	push	{r4, r5, r6, lr}
  40530e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405310:	4b14      	ldr	r3, [pc, #80]	; (405364 <lv_obj_get_disp+0x58>)
  405312:	4798      	blx	r3
  405314:	b1b8      	cbz	r0, 405346 <lv_obj_get_disp+0x3a>
    if(obj->parent == NULL)
  405316:	6823      	ldr	r3, [r4, #0]
  405318:	b11b      	cbz	r3, 405322 <lv_obj_get_disp+0x16>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
  40531a:	4620      	mov	r0, r4
  40531c:	4b12      	ldr	r3, [pc, #72]	; (405368 <lv_obj_get_disp+0x5c>)
  40531e:	4798      	blx	r3
  405320:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405322:	4812      	ldr	r0, [pc, #72]	; (40536c <lv_obj_get_disp+0x60>)
  405324:	4b12      	ldr	r3, [pc, #72]	; (405370 <lv_obj_get_disp+0x64>)
  405326:	4798      	blx	r3
  405328:	4605      	mov	r5, r0
  40532a:	b1c5      	cbz	r5, 40535e <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  40532c:	f105 0638 	add.w	r6, r5, #56	; 0x38
  405330:	4630      	mov	r0, r6
  405332:	4b0f      	ldr	r3, [pc, #60]	; (405370 <lv_obj_get_disp+0x64>)
  405334:	4798      	blx	r3
  405336:	b160      	cbz	r0, 405352 <lv_obj_get_disp+0x46>
            if(s == scr) return d;
  405338:	4284      	cmp	r4, r0
  40533a:	d010      	beq.n	40535e <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  40533c:	4601      	mov	r1, r0
  40533e:	4630      	mov	r0, r6
  405340:	4b0c      	ldr	r3, [pc, #48]	; (405374 <lv_obj_get_disp+0x68>)
  405342:	4798      	blx	r3
  405344:	e7f7      	b.n	405336 <lv_obj_get_disp+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405346:	4622      	mov	r2, r4
  405348:	2300      	movs	r3, #0
  40534a:	480b      	ldr	r0, [pc, #44]	; (405378 <lv_obj_get_disp+0x6c>)
  40534c:	490b      	ldr	r1, [pc, #44]	; (40537c <lv_obj_get_disp+0x70>)
  40534e:	4788      	blx	r1
  405350:	e7fe      	b.n	405350 <lv_obj_get_disp+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405352:	4629      	mov	r1, r5
  405354:	4805      	ldr	r0, [pc, #20]	; (40536c <lv_obj_get_disp+0x60>)
  405356:	4b07      	ldr	r3, [pc, #28]	; (405374 <lv_obj_get_disp+0x68>)
  405358:	4798      	blx	r3
  40535a:	4605      	mov	r5, r0
  40535c:	e7e5      	b.n	40532a <lv_obj_get_disp+0x1e>
}
  40535e:	4628      	mov	r0, r5
  405360:	bd70      	pop	{r4, r5, r6, pc}
  405362:	bf00      	nop
  405364:	00415065 	.word	0x00415065
  405368:	004052d5 	.word	0x004052d5
  40536c:	2043a184 	.word	0x2043a184
  405370:	00415375 	.word	0x00415375
  405374:	00415389 	.word	0x00415389
  405378:	00421278 	.word	0x00421278
  40537c:	00415071 	.word	0x00415071

00405380 <lv_obj_get_child>:
{
  405380:	b538      	push	{r3, r4, r5, lr}
  405382:	4604      	mov	r4, r0
  405384:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405386:	4b09      	ldr	r3, [pc, #36]	; (4053ac <lv_obj_get_child+0x2c>)
  405388:	4798      	blx	r3
  40538a:	b128      	cbz	r0, 405398 <lv_obj_get_child+0x18>
    if(child == NULL) {
  40538c:	b155      	cbz	r5, 4053a4 <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
  40538e:	4629      	mov	r1, r5
  405390:	1d20      	adds	r0, r4, #4
  405392:	4b07      	ldr	r3, [pc, #28]	; (4053b0 <lv_obj_get_child+0x30>)
  405394:	4798      	blx	r3
}
  405396:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405398:	4622      	mov	r2, r4
  40539a:	2300      	movs	r3, #0
  40539c:	4805      	ldr	r0, [pc, #20]	; (4053b4 <lv_obj_get_child+0x34>)
  40539e:	4906      	ldr	r1, [pc, #24]	; (4053b8 <lv_obj_get_child+0x38>)
  4053a0:	4788      	blx	r1
  4053a2:	e7fe      	b.n	4053a2 <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
  4053a4:	1d20      	adds	r0, r4, #4
  4053a6:	4b05      	ldr	r3, [pc, #20]	; (4053bc <lv_obj_get_child+0x3c>)
  4053a8:	4798      	blx	r3
  4053aa:	bd38      	pop	{r3, r4, r5, pc}
  4053ac:	00415065 	.word	0x00415065
  4053b0:	00415389 	.word	0x00415389
  4053b4:	00421278 	.word	0x00421278
  4053b8:	00415071 	.word	0x00415071
  4053bc:	00415375 	.word	0x00415375

004053c0 <lv_obj_get_coords>:
{
  4053c0:	b538      	push	{r3, r4, r5, lr}
  4053c2:	4604      	mov	r4, r0
  4053c4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4053c6:	4b0b      	ldr	r3, [pc, #44]	; (4053f4 <lv_obj_get_coords+0x34>)
  4053c8:	4798      	blx	r3
  4053ca:	b120      	cbz	r0, 4053d6 <lv_obj_get_coords+0x16>
    lv_area_copy(cords_p, &obj->coords);
  4053cc:	f104 0310 	add.w	r3, r4, #16
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  4053d0:	4629      	mov	r1, r5
  4053d2:	2208      	movs	r2, #8
  4053d4:	e00a      	b.n	4053ec <lv_obj_get_coords+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4053d6:	4622      	mov	r2, r4
  4053d8:	2300      	movs	r3, #0
  4053da:	4807      	ldr	r0, [pc, #28]	; (4053f8 <lv_obj_get_coords+0x38>)
  4053dc:	4907      	ldr	r1, [pc, #28]	; (4053fc <lv_obj_get_coords+0x3c>)
  4053de:	4788      	blx	r1
  4053e0:	e7fe      	b.n	4053e0 <lv_obj_get_coords+0x20>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  4053e2:	f813 0b01 	ldrb.w	r0, [r3], #1
  4053e6:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  4053ea:	3a01      	subs	r2, #1
    while(len) {
  4053ec:	2a00      	cmp	r2, #0
  4053ee:	d1f8      	bne.n	4053e2 <lv_obj_get_coords+0x22>
}
  4053f0:	bd38      	pop	{r3, r4, r5, pc}
  4053f2:	bf00      	nop
  4053f4:	00415065 	.word	0x00415065
  4053f8:	00421278 	.word	0x00421278
  4053fc:	00415071 	.word	0x00415071

00405400 <lv_obj_get_x>:
{
  405400:	b510      	push	{r4, lr}
  405402:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405404:	4b0a      	ldr	r3, [pc, #40]	; (405430 <lv_obj_get_x+0x30>)
  405406:	4798      	blx	r3
  405408:	b928      	cbnz	r0, 405416 <lv_obj_get_x+0x16>
  40540a:	4622      	mov	r2, r4
  40540c:	2300      	movs	r3, #0
  40540e:	4809      	ldr	r0, [pc, #36]	; (405434 <lv_obj_get_x+0x34>)
  405410:	4909      	ldr	r1, [pc, #36]	; (405438 <lv_obj_get_x+0x38>)
  405412:	4788      	blx	r1
  405414:	e7fe      	b.n	405414 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405416:	4620      	mov	r0, r4
  405418:	4b08      	ldr	r3, [pc, #32]	; (40543c <lv_obj_get_x+0x3c>)
  40541a:	4798      	blx	r3
    if(parent) {
  40541c:	4603      	mov	r3, r0
  40541e:	b120      	cbz	r0, 40542a <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
  405420:	8a20      	ldrh	r0, [r4, #16]
  405422:	8a1b      	ldrh	r3, [r3, #16]
  405424:	1ac0      	subs	r0, r0, r3
  405426:	b200      	sxth	r0, r0
  405428:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
  40542a:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
  40542e:	bd10      	pop	{r4, pc}
  405430:	00415065 	.word	0x00415065
  405434:	00421278 	.word	0x00421278
  405438:	00415071 	.word	0x00415071
  40543c:	004052ad 	.word	0x004052ad

00405440 <lv_obj_get_y>:
{
  405440:	b510      	push	{r4, lr}
  405442:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405444:	4b0a      	ldr	r3, [pc, #40]	; (405470 <lv_obj_get_y+0x30>)
  405446:	4798      	blx	r3
  405448:	b928      	cbnz	r0, 405456 <lv_obj_get_y+0x16>
  40544a:	4622      	mov	r2, r4
  40544c:	2300      	movs	r3, #0
  40544e:	4809      	ldr	r0, [pc, #36]	; (405474 <lv_obj_get_y+0x34>)
  405450:	4909      	ldr	r1, [pc, #36]	; (405478 <lv_obj_get_y+0x38>)
  405452:	4788      	blx	r1
  405454:	e7fe      	b.n	405454 <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405456:	4620      	mov	r0, r4
  405458:	4b08      	ldr	r3, [pc, #32]	; (40547c <lv_obj_get_y+0x3c>)
  40545a:	4798      	blx	r3
    if(parent) {
  40545c:	4603      	mov	r3, r0
  40545e:	b120      	cbz	r0, 40546a <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
  405460:	8a60      	ldrh	r0, [r4, #18]
  405462:	8a5b      	ldrh	r3, [r3, #18]
  405464:	1ac0      	subs	r0, r0, r3
  405466:	b200      	sxth	r0, r0
  405468:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
  40546a:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
  40546e:	bd10      	pop	{r4, pc}
  405470:	00415065 	.word	0x00415065
  405474:	00421278 	.word	0x00421278
  405478:	00415071 	.word	0x00415071
  40547c:	004052ad 	.word	0x004052ad

00405480 <lv_obj_get_width>:
{
  405480:	b510      	push	{r4, lr}
  405482:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405484:	4b07      	ldr	r3, [pc, #28]	; (4054a4 <lv_obj_get_width+0x24>)
  405486:	4798      	blx	r3
  405488:	b130      	cbz	r0, 405498 <lv_obj_get_width+0x18>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40548a:	8aa0      	ldrh	r0, [r4, #20]
  40548c:	8a23      	ldrh	r3, [r4, #16]
  40548e:	1ac0      	subs	r0, r0, r3
  405490:	b280      	uxth	r0, r0
  405492:	3001      	adds	r0, #1
}
  405494:	b200      	sxth	r0, r0
  405496:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405498:	4622      	mov	r2, r4
  40549a:	2300      	movs	r3, #0
  40549c:	4802      	ldr	r0, [pc, #8]	; (4054a8 <lv_obj_get_width+0x28>)
  40549e:	4903      	ldr	r1, [pc, #12]	; (4054ac <lv_obj_get_width+0x2c>)
  4054a0:	4788      	blx	r1
  4054a2:	e7fe      	b.n	4054a2 <lv_obj_get_width+0x22>
  4054a4:	00415065 	.word	0x00415065
  4054a8:	00421278 	.word	0x00421278
  4054ac:	00415071 	.word	0x00415071

004054b0 <lv_obj_get_height>:
{
  4054b0:	b510      	push	{r4, lr}
  4054b2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4054b4:	4b07      	ldr	r3, [pc, #28]	; (4054d4 <lv_obj_get_height+0x24>)
  4054b6:	4798      	blx	r3
  4054b8:	b130      	cbz	r0, 4054c8 <lv_obj_get_height+0x18>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4054ba:	8ae0      	ldrh	r0, [r4, #22]
  4054bc:	8a63      	ldrh	r3, [r4, #18]
  4054be:	1ac0      	subs	r0, r0, r3
  4054c0:	b280      	uxth	r0, r0
  4054c2:	3001      	adds	r0, #1
}
  4054c4:	b200      	sxth	r0, r0
  4054c6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4054c8:	4622      	mov	r2, r4
  4054ca:	2300      	movs	r3, #0
  4054cc:	4802      	ldr	r0, [pc, #8]	; (4054d8 <lv_obj_get_height+0x28>)
  4054ce:	4903      	ldr	r1, [pc, #12]	; (4054dc <lv_obj_get_height+0x2c>)
  4054d0:	4788      	blx	r1
  4054d2:	e7fe      	b.n	4054d2 <lv_obj_get_height+0x22>
  4054d4:	00415065 	.word	0x00415065
  4054d8:	00421278 	.word	0x00421278
  4054dc:	00415071 	.word	0x00415071

004054e0 <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
  4054e0:	b909      	cbnz	r1, 4054e6 <lv_obj_get_style_list+0x6>
  4054e2:	3028      	adds	r0, #40	; 0x28
  4054e4:	4770      	bx	lr
{
  4054e6:	b500      	push	{lr}
  4054e8:	b083      	sub	sp, #12
    info.part = part;
  4054ea:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
  4054ee:	2300      	movs	r3, #0
  4054f0:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
  4054f2:	466a      	mov	r2, sp
  4054f4:	2108      	movs	r1, #8
  4054f6:	4b05      	ldr	r3, [pc, #20]	; (40550c <lv_obj_get_style_list+0x2c>)
  4054f8:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
  4054fa:	2801      	cmp	r0, #1
  4054fc:	d103      	bne.n	405506 <lv_obj_get_style_list+0x26>
    return info.result;
  4054fe:	9801      	ldr	r0, [sp, #4]
}
  405500:	b003      	add	sp, #12
  405502:	f85d fb04 	ldr.w	pc, [sp], #4
    if(res != LV_RES_OK) return NULL;
  405506:	2000      	movs	r0, #0
  405508:	e7fa      	b.n	405500 <lv_obj_get_style_list+0x20>
  40550a:	bf00      	nop
  40550c:	00405269 	.word	0x00405269

00405510 <trans_del>:
{
  405510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405514:	4607      	mov	r7, r0
  405516:	4688      	mov	r8, r1
  405518:	4691      	mov	r9, r2
  40551a:	461e      	mov	r6, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  40551c:	4819      	ldr	r0, [pc, #100]	; (405584 <trans_del+0x74>)
  40551e:	4b1a      	ldr	r3, [pc, #104]	; (405588 <trans_del+0x78>)
  405520:	4798      	blx	r3
  405522:	4604      	mov	r4, r0
    while(tr != NULL) {
  405524:	e006      	b.n	405534 <trans_del+0x24>
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405526:	88a3      	ldrh	r3, [r4, #4]
  405528:	454b      	cmp	r3, r9
  40552a:	d015      	beq.n	405558 <trans_del+0x48>
  40552c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
  405530:	d012      	beq.n	405558 <trans_del+0x48>
{
  405532:	462c      	mov	r4, r5
    while(tr != NULL) {
  405534:	b31c      	cbz	r4, 40557e <trans_del+0x6e>
        if(tr == tr_limit) break;
  405536:	42b4      	cmp	r4, r6
  405538:	d021      	beq.n	40557e <trans_del+0x6e>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  40553a:	4621      	mov	r1, r4
  40553c:	4811      	ldr	r0, [pc, #68]	; (405584 <trans_del+0x74>)
  40553e:	4b13      	ldr	r3, [pc, #76]	; (40558c <trans_del+0x7c>)
  405540:	4798      	blx	r3
  405542:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405544:	6820      	ldr	r0, [r4, #0]
  405546:	42b8      	cmp	r0, r7
  405548:	d1f3      	bne.n	405532 <trans_del+0x22>
  40554a:	79a1      	ldrb	r1, [r4, #6]
  40554c:	4541      	cmp	r1, r8
  40554e:	d0ea      	beq.n	405526 <trans_del+0x16>
  405550:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  405554:	d1ed      	bne.n	405532 <trans_del+0x22>
  405556:	e7e6      	b.n	405526 <trans_del+0x16>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405558:	4b0d      	ldr	r3, [pc, #52]	; (405590 <trans_del+0x80>)
  40555a:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  40555c:	4b0d      	ldr	r3, [pc, #52]	; (405594 <trans_del+0x84>)
  40555e:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
  405560:	88a1      	ldrh	r1, [r4, #4]
  405562:	4b0d      	ldr	r3, [pc, #52]	; (405598 <trans_del+0x88>)
  405564:	4798      	blx	r3
            lv_anim_del(tr, NULL);
  405566:	2100      	movs	r1, #0
  405568:	4620      	mov	r0, r4
  40556a:	4b0c      	ldr	r3, [pc, #48]	; (40559c <trans_del+0x8c>)
  40556c:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  40556e:	4621      	mov	r1, r4
  405570:	4804      	ldr	r0, [pc, #16]	; (405584 <trans_del+0x74>)
  405572:	4b0b      	ldr	r3, [pc, #44]	; (4055a0 <trans_del+0x90>)
  405574:	4798      	blx	r3
            lv_mem_free(tr);
  405576:	4620      	mov	r0, r4
  405578:	4b0a      	ldr	r3, [pc, #40]	; (4055a4 <trans_del+0x94>)
  40557a:	4798      	blx	r3
  40557c:	e7d9      	b.n	405532 <trans_del+0x22>
  40557e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405582:	bf00      	nop
  405584:	2043a228 	.word	0x2043a228
  405588:	0041537f 	.word	0x0041537f
  40558c:	00415397 	.word	0x00415397
  405590:	004054e1 	.word	0x004054e1
  405594:	0040a035 	.word	0x0040a035
  405598:	00409491 	.word	0x00409491
  40559c:	00414621 	.word	0x00414621
  4055a0:	00415431 	.word	0x00415431
  4055a4:	00415831 	.word	0x00415831

004055a8 <lv_obj_clean_style_list>:
{
  4055a8:	b538      	push	{r3, r4, r5, lr}
  4055aa:	4604      	mov	r4, r0
  4055ac:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  4055ae:	4b06      	ldr	r3, [pc, #24]	; (4055c8 <lv_obj_clean_style_list+0x20>)
  4055b0:	4798      	blx	r3
    if(style_dsc == NULL) {
  4055b2:	b138      	cbz	r0, 4055c4 <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
  4055b4:	4b05      	ldr	r3, [pc, #20]	; (4055cc <lv_obj_clean_style_list+0x24>)
  4055b6:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
  4055b8:	2300      	movs	r3, #0
  4055ba:	22ff      	movs	r2, #255	; 0xff
  4055bc:	4629      	mov	r1, r5
  4055be:	4620      	mov	r0, r4
  4055c0:	4c03      	ldr	r4, [pc, #12]	; (4055d0 <lv_obj_clean_style_list+0x28>)
  4055c2:	47a0      	blx	r4
  4055c4:	bd38      	pop	{r3, r4, r5, pc}
  4055c6:	bf00      	nop
  4055c8:	004054e1 	.word	0x004054e1
  4055cc:	0040a049 	.word	0x0040a049
  4055d0:	00405511 	.word	0x00405511

004055d4 <_lv_obj_disable_style_caching>:
{
  4055d4:	b570      	push	{r4, r5, r6, lr}
  4055d6:	4605      	mov	r5, r0
  4055d8:	460e      	mov	r6, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  4055da:	2400      	movs	r4, #0
  4055dc:	2c3f      	cmp	r4, #63	; 0x3f
  4055de:	d80b      	bhi.n	4055f8 <_lv_obj_disable_style_caching+0x24>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4055e0:	4621      	mov	r1, r4
  4055e2:	4628      	mov	r0, r5
  4055e4:	4b0c      	ldr	r3, [pc, #48]	; (405618 <_lv_obj_disable_style_caching+0x44>)
  4055e6:	4798      	blx	r3
        if(list == NULL) break;
  4055e8:	b130      	cbz	r0, 4055f8 <_lv_obj_disable_style_caching+0x24>
        list->ignore_cache = dis;
  4055ea:	7942      	ldrb	r2, [r0, #5]
  4055ec:	f366 02c3 	bfi	r2, r6, #3, #1
  4055f0:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  4055f2:	3401      	adds	r4, #1
  4055f4:	b2e4      	uxtb	r4, r4
  4055f6:	e7f1      	b.n	4055dc <_lv_obj_disable_style_caching+0x8>
  4055f8:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  4055fa:	2cff      	cmp	r4, #255	; 0xff
  4055fc:	d00b      	beq.n	405616 <_lv_obj_disable_style_caching+0x42>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4055fe:	4621      	mov	r1, r4
  405600:	4628      	mov	r0, r5
  405602:	4b05      	ldr	r3, [pc, #20]	; (405618 <_lv_obj_disable_style_caching+0x44>)
  405604:	4798      	blx	r3
        if(list == NULL) break;
  405606:	b130      	cbz	r0, 405616 <_lv_obj_disable_style_caching+0x42>
        list->ignore_cache = dis;
  405608:	7942      	ldrb	r2, [r0, #5]
  40560a:	f366 02c3 	bfi	r2, r6, #3, #1
  40560e:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405610:	3401      	adds	r4, #1
  405612:	b2e4      	uxtb	r4, r4
  405614:	e7f1      	b.n	4055fa <_lv_obj_disable_style_caching+0x26>
  405616:	bd70      	pop	{r4, r5, r6, pc}
  405618:	004054e1 	.word	0x004054e1

0040561c <trans_anim_ready_cb>:
{
  40561c:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
  40561e:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405620:	4816      	ldr	r0, [pc, #88]	; (40567c <trans_anim_ready_cb+0x60>)
  405622:	4b17      	ldr	r3, [pc, #92]	; (405680 <trans_anim_ready_cb+0x64>)
  405624:	4798      	blx	r3
    bool running = false;
  405626:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405628:	e003      	b.n	405632 <trans_anim_ready_cb+0x16>
  40562a:	4601      	mov	r1, r0
  40562c:	4813      	ldr	r0, [pc, #76]	; (40567c <trans_anim_ready_cb+0x60>)
  40562e:	4b15      	ldr	r3, [pc, #84]	; (405684 <trans_anim_ready_cb+0x68>)
  405630:	4798      	blx	r3
  405632:	b178      	cbz	r0, 405654 <trans_anim_ready_cb+0x38>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
  405634:	42a0      	cmp	r0, r4
  405636:	d0f8      	beq.n	40562a <trans_anim_ready_cb+0xe>
  405638:	6802      	ldr	r2, [r0, #0]
  40563a:	6823      	ldr	r3, [r4, #0]
  40563c:	429a      	cmp	r2, r3
  40563e:	d1f4      	bne.n	40562a <trans_anim_ready_cb+0xe>
  405640:	6843      	ldr	r3, [r0, #4]
  405642:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  405646:	6863      	ldr	r3, [r4, #4]
  405648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40564c:	429a      	cmp	r2, r3
  40564e:	d1ec      	bne.n	40562a <trans_anim_ready_cb+0xe>
            running = true;
  405650:	2501      	movs	r5, #1
  405652:	e7ea      	b.n	40562a <trans_anim_ready_cb+0xe>
    if(!running) {
  405654:	b13d      	cbz	r5, 405666 <trans_anim_ready_cb+0x4a>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405656:	4621      	mov	r1, r4
  405658:	4808      	ldr	r0, [pc, #32]	; (40567c <trans_anim_ready_cb+0x60>)
  40565a:	4b0b      	ldr	r3, [pc, #44]	; (405688 <trans_anim_ready_cb+0x6c>)
  40565c:	4798      	blx	r3
    lv_mem_free(tr);
  40565e:	4620      	mov	r0, r4
  405660:	4b0a      	ldr	r3, [pc, #40]	; (40568c <trans_anim_ready_cb+0x70>)
  405662:	4798      	blx	r3
  405664:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405666:	79a1      	ldrb	r1, [r4, #6]
  405668:	6820      	ldr	r0, [r4, #0]
  40566a:	4b09      	ldr	r3, [pc, #36]	; (405690 <trans_anim_ready_cb+0x74>)
  40566c:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  40566e:	4b09      	ldr	r3, [pc, #36]	; (405694 <trans_anim_ready_cb+0x78>)
  405670:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
  405672:	88a1      	ldrh	r1, [r4, #4]
  405674:	4b08      	ldr	r3, [pc, #32]	; (405698 <trans_anim_ready_cb+0x7c>)
  405676:	4798      	blx	r3
  405678:	e7ed      	b.n	405656 <trans_anim_ready_cb+0x3a>
  40567a:	bf00      	nop
  40567c:	2043a228 	.word	0x2043a228
  405680:	00415375 	.word	0x00415375
  405684:	00415389 	.word	0x00415389
  405688:	00415431 	.word	0x00415431
  40568c:	00415831 	.word	0x00415831
  405690:	004054e1 	.word	0x004054e1
  405694:	0040a035 	.word	0x0040a035
  405698:	00409491 	.word	0x00409491

0040569c <lv_obj_get_hidden>:
{
  40569c:	b510      	push	{r4, lr}
  40569e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056a0:	4b06      	ldr	r3, [pc, #24]	; (4056bc <lv_obj_get_hidden+0x20>)
  4056a2:	4798      	blx	r3
  4056a4:	b120      	cbz	r0, 4056b0 <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
  4056a6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  4056aa:	f3c0 1000 	ubfx	r0, r0, #4, #1
  4056ae:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056b0:	4622      	mov	r2, r4
  4056b2:	2300      	movs	r3, #0
  4056b4:	4802      	ldr	r0, [pc, #8]	; (4056c0 <lv_obj_get_hidden+0x24>)
  4056b6:	4903      	ldr	r1, [pc, #12]	; (4056c4 <lv_obj_get_hidden+0x28>)
  4056b8:	4788      	blx	r1
  4056ba:	e7fe      	b.n	4056ba <lv_obj_get_hidden+0x1e>
  4056bc:	00415065 	.word	0x00415065
  4056c0:	00421278 	.word	0x00421278
  4056c4:	00415071 	.word	0x00415071

004056c8 <lv_obj_area_is_visible>:
{
  4056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4056cc:	b082      	sub	sp, #8
  4056ce:	4604      	mov	r4, r0
  4056d0:	460d      	mov	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
  4056d2:	4b34      	ldr	r3, [pc, #208]	; (4057a4 <lv_obj_area_is_visible+0xdc>)
  4056d4:	4798      	blx	r3
  4056d6:	b120      	cbz	r0, 4056e2 <lv_obj_area_is_visible+0x1a>
  4056d8:	2600      	movs	r6, #0
}
  4056da:	4630      	mov	r0, r6
  4056dc:	b002      	add	sp, #8
  4056de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4056e2:	4606      	mov	r6, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
  4056e4:	4620      	mov	r0, r4
  4056e6:	4b30      	ldr	r3, [pc, #192]	; (4057a8 <lv_obj_area_is_visible+0xe0>)
  4056e8:	4798      	blx	r3
  4056ea:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
  4056ec:	4b2f      	ldr	r3, [pc, #188]	; (4057ac <lv_obj_area_is_visible+0xe4>)
  4056ee:	4798      	blx	r3
  4056f0:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  4056f2:	4b2f      	ldr	r3, [pc, #188]	; (4057b0 <lv_obj_area_is_visible+0xe8>)
  4056f4:	4798      	blx	r3
  4056f6:	4287      	cmp	r7, r0
  4056f8:	d010      	beq.n	40571c <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_scr_prev(disp) ||
  4056fa:	4640      	mov	r0, r8
  4056fc:	4b2d      	ldr	r3, [pc, #180]	; (4057b4 <lv_obj_area_is_visible+0xec>)
  4056fe:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405700:	4287      	cmp	r7, r0
  405702:	d00b      	beq.n	40571c <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_top(disp) ||
  405704:	4640      	mov	r0, r8
  405706:	4b2c      	ldr	r3, [pc, #176]	; (4057b8 <lv_obj_area_is_visible+0xf0>)
  405708:	4798      	blx	r3
       obj_scr == lv_disp_get_scr_prev(disp) ||
  40570a:	4287      	cmp	r7, r0
  40570c:	d006      	beq.n	40571c <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
  40570e:	4640      	mov	r0, r8
  405710:	4b2a      	ldr	r3, [pc, #168]	; (4057bc <lv_obj_area_is_visible+0xf4>)
  405712:	4798      	blx	r3
       obj_scr == lv_disp_get_layer_top(disp) ||
  405714:	4287      	cmp	r7, r0
  405716:	d001      	beq.n	40571c <lv_obj_area_is_visible+0x54>
    return true;
  405718:	2601      	movs	r6, #1
  40571a:	e7de      	b.n	4056da <lv_obj_area_is_visible+0x12>
        lv_coord_t ext_size = obj->ext_draw_pad;
  40571c:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
  405720:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405724:	466a      	mov	r2, sp
  405726:	2308      	movs	r3, #8
  405728:	e004      	b.n	405734 <lv_obj_area_is_visible+0x6c>
        *d8 = *s8;
  40572a:	f811 0b01 	ldrb.w	r0, [r1], #1
  40572e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  405732:	3b01      	subs	r3, #1
    while(len) {
  405734:	2b00      	cmp	r3, #0
  405736:	d1f8      	bne.n	40572a <lv_obj_area_is_visible+0x62>
        obj_coords.x1 -= ext_size;
  405738:	b2bb      	uxth	r3, r7
  40573a:	f8bd 2000 	ldrh.w	r2, [sp]
  40573e:	1ad2      	subs	r2, r2, r3
  405740:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
  405744:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405748:	1ad2      	subs	r2, r2, r3
  40574a:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
  40574e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405752:	441a      	add	r2, r3
  405754:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
  405758:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  40575c:	4413      	add	r3, r2
  40575e:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
  405762:	466a      	mov	r2, sp
  405764:	4629      	mov	r1, r5
  405766:	4628      	mov	r0, r5
  405768:	4b15      	ldr	r3, [pc, #84]	; (4057c0 <lv_obj_area_is_visible+0xf8>)
  40576a:	4798      	blx	r3
        if(is_common == false) return false;  /*The area is not on the object*/
  40576c:	4607      	mov	r7, r0
  40576e:	2800      	cmp	r0, #0
  405770:	d0b3      	beq.n	4056da <lv_obj_area_is_visible+0x12>
        lv_obj_t * par = lv_obj_get_parent(obj);
  405772:	4620      	mov	r0, r4
  405774:	4b13      	ldr	r3, [pc, #76]	; (4057c4 <lv_obj_area_is_visible+0xfc>)
  405776:	4798      	blx	r3
  405778:	4604      	mov	r4, r0
        while(par != NULL) {
  40577a:	b18c      	cbz	r4, 4057a0 <lv_obj_area_is_visible+0xd8>
            is_common = _lv_area_intersect(area, area, &par->coords);
  40577c:	f104 0210 	add.w	r2, r4, #16
  405780:	4629      	mov	r1, r5
  405782:	4628      	mov	r0, r5
  405784:	4b0e      	ldr	r3, [pc, #56]	; (4057c0 <lv_obj_area_is_visible+0xf8>)
  405786:	4798      	blx	r3
            if(is_common == false) return false;       /*If no common parts with parent break;*/
  405788:	2800      	cmp	r0, #0
  40578a:	d0a6      	beq.n	4056da <lv_obj_area_is_visible+0x12>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  40578c:	4620      	mov	r0, r4
  40578e:	4b05      	ldr	r3, [pc, #20]	; (4057a4 <lv_obj_area_is_visible+0xdc>)
  405790:	4798      	blx	r3
  405792:	2800      	cmp	r0, #0
  405794:	d1a1      	bne.n	4056da <lv_obj_area_is_visible+0x12>
            par = lv_obj_get_parent(par);
  405796:	4620      	mov	r0, r4
  405798:	4b0a      	ldr	r3, [pc, #40]	; (4057c4 <lv_obj_area_is_visible+0xfc>)
  40579a:	4798      	blx	r3
  40579c:	4604      	mov	r4, r0
  40579e:	e7ec      	b.n	40577a <lv_obj_area_is_visible+0xb2>
    return true;
  4057a0:	463e      	mov	r6, r7
  4057a2:	e79a      	b.n	4056da <lv_obj_area_is_visible+0x12>
  4057a4:	0040569d 	.word	0x0040569d
  4057a8:	004052d5 	.word	0x004052d5
  4057ac:	0040530d 	.word	0x0040530d
  4057b0:	004031f9 	.word	0x004031f9
  4057b4:	00403215 	.word	0x00403215
  4057b8:	00403231 	.word	0x00403231
  4057bc:	0040324d 	.word	0x0040324d
  4057c0:	004147a1 	.word	0x004147a1
  4057c4:	004052ad 	.word	0x004052ad

004057c8 <lv_obj_invalidate_area>:
{
  4057c8:	b530      	push	{r4, r5, lr}
  4057ca:	b083      	sub	sp, #12
  4057cc:	4605      	mov	r5, r0
  4057ce:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057d0:	4b10      	ldr	r3, [pc, #64]	; (405814 <lv_obj_invalidate_area+0x4c>)
  4057d2:	4798      	blx	r3
  4057d4:	b118      	cbz	r0, 4057de <lv_obj_invalidate_area+0x16>
  4057d6:	4622      	mov	r2, r4
  4057d8:	4669      	mov	r1, sp
  4057da:	2308      	movs	r3, #8
  4057dc:	e00a      	b.n	4057f4 <lv_obj_invalidate_area+0x2c>
  4057de:	462a      	mov	r2, r5
  4057e0:	2300      	movs	r3, #0
  4057e2:	480d      	ldr	r0, [pc, #52]	; (405818 <lv_obj_invalidate_area+0x50>)
  4057e4:	490d      	ldr	r1, [pc, #52]	; (40581c <lv_obj_invalidate_area+0x54>)
  4057e6:	4788      	blx	r1
  4057e8:	e7fe      	b.n	4057e8 <lv_obj_invalidate_area+0x20>
        *d8 = *s8;
  4057ea:	f812 0b01 	ldrb.w	r0, [r2], #1
  4057ee:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  4057f2:	3b01      	subs	r3, #1
    while(len) {
  4057f4:	2b00      	cmp	r3, #0
  4057f6:	d1f8      	bne.n	4057ea <lv_obj_invalidate_area+0x22>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
  4057f8:	4669      	mov	r1, sp
  4057fa:	4628      	mov	r0, r5
  4057fc:	4b08      	ldr	r3, [pc, #32]	; (405820 <lv_obj_invalidate_area+0x58>)
  4057fe:	4798      	blx	r3
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  405800:	b128      	cbz	r0, 40580e <lv_obj_invalidate_area+0x46>
  405802:	4628      	mov	r0, r5
  405804:	4b07      	ldr	r3, [pc, #28]	; (405824 <lv_obj_invalidate_area+0x5c>)
  405806:	4798      	blx	r3
  405808:	4669      	mov	r1, sp
  40580a:	4b07      	ldr	r3, [pc, #28]	; (405828 <lv_obj_invalidate_area+0x60>)
  40580c:	4798      	blx	r3
}
  40580e:	b003      	add	sp, #12
  405810:	bd30      	pop	{r4, r5, pc}
  405812:	bf00      	nop
  405814:	00415065 	.word	0x00415065
  405818:	00421278 	.word	0x00421278
  40581c:	00415071 	.word	0x00415071
  405820:	004056c9 	.word	0x004056c9
  405824:	0040530d 	.word	0x0040530d
  405828:	00408a9d 	.word	0x00408a9d

0040582c <lv_obj_invalidate>:
{
  40582c:	b530      	push	{r4, r5, lr}
  40582e:	b083      	sub	sp, #12
  405830:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405832:	4b19      	ldr	r3, [pc, #100]	; (405898 <lv_obj_invalidate+0x6c>)
  405834:	4798      	blx	r3
  405836:	b130      	cbz	r0, 405846 <lv_obj_invalidate+0x1a>
    lv_coord_t ext_size = obj->ext_draw_pad;
  405838:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    lv_area_copy(&obj_coords, &obj->coords);
  40583c:	f104 0010 	add.w	r0, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405840:	4669      	mov	r1, sp
  405842:	2208      	movs	r2, #8
  405844:	e00a      	b.n	40585c <lv_obj_invalidate+0x30>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405846:	4622      	mov	r2, r4
  405848:	2300      	movs	r3, #0
  40584a:	4814      	ldr	r0, [pc, #80]	; (40589c <lv_obj_invalidate+0x70>)
  40584c:	4914      	ldr	r1, [pc, #80]	; (4058a0 <lv_obj_invalidate+0x74>)
  40584e:	4788      	blx	r1
  405850:	e7fe      	b.n	405850 <lv_obj_invalidate+0x24>
        *d8 = *s8;
  405852:	f810 5b01 	ldrb.w	r5, [r0], #1
  405856:	f801 5b01 	strb.w	r5, [r1], #1
        len--;
  40585a:	3a01      	subs	r2, #1
    while(len) {
  40585c:	2a00      	cmp	r2, #0
  40585e:	d1f8      	bne.n	405852 <lv_obj_invalidate+0x26>
    obj_coords.x1 -= ext_size;
  405860:	b29b      	uxth	r3, r3
  405862:	f8bd 2000 	ldrh.w	r2, [sp]
  405866:	1ad2      	subs	r2, r2, r3
  405868:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
  40586c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405870:	1ad2      	subs	r2, r2, r3
  405872:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  405876:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  40587a:	441a      	add	r2, r3
  40587c:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
  405880:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405884:	4413      	add	r3, r2
  405886:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
  40588a:	4669      	mov	r1, sp
  40588c:	4620      	mov	r0, r4
  40588e:	4b05      	ldr	r3, [pc, #20]	; (4058a4 <lv_obj_invalidate+0x78>)
  405890:	4798      	blx	r3
}
  405892:	b003      	add	sp, #12
  405894:	bd30      	pop	{r4, r5, pc}
  405896:	bf00      	nop
  405898:	00415065 	.word	0x00415065
  40589c:	00421278 	.word	0x00421278
  4058a0:	00415071 	.word	0x00415071
  4058a4:	004057c9 	.word	0x004057c9

004058a8 <lv_obj_move_foreground>:
{
  4058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058aa:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058ac:	4b11      	ldr	r3, [pc, #68]	; (4058f4 <lv_obj_move_foreground+0x4c>)
  4058ae:	4798      	blx	r3
  4058b0:	b928      	cbnz	r0, 4058be <lv_obj_move_foreground+0x16>
  4058b2:	462a      	mov	r2, r5
  4058b4:	2300      	movs	r3, #0
  4058b6:	4810      	ldr	r0, [pc, #64]	; (4058f8 <lv_obj_move_foreground+0x50>)
  4058b8:	4910      	ldr	r1, [pc, #64]	; (4058fc <lv_obj_move_foreground+0x54>)
  4058ba:	4788      	blx	r1
  4058bc:	e7fe      	b.n	4058bc <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  4058be:	4628      	mov	r0, r5
  4058c0:	4b0f      	ldr	r3, [pc, #60]	; (405900 <lv_obj_move_foreground+0x58>)
  4058c2:	4798      	blx	r3
  4058c4:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
  4058c6:	1d06      	adds	r6, r0, #4
  4058c8:	4630      	mov	r0, r6
  4058ca:	4b0e      	ldr	r3, [pc, #56]	; (405904 <lv_obj_move_foreground+0x5c>)
  4058cc:	4798      	blx	r3
  4058ce:	4285      	cmp	r5, r0
  4058d0:	d00f      	beq.n	4058f2 <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
  4058d2:	4620      	mov	r0, r4
  4058d4:	4f0c      	ldr	r7, [pc, #48]	; (405908 <lv_obj_move_foreground+0x60>)
  4058d6:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
  4058d8:	2301      	movs	r3, #1
  4058da:	462a      	mov	r2, r5
  4058dc:	4631      	mov	r1, r6
  4058de:	4630      	mov	r0, r6
  4058e0:	4e0a      	ldr	r6, [pc, #40]	; (40590c <lv_obj_move_foreground+0x64>)
  4058e2:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
  4058e4:	69e3      	ldr	r3, [r4, #28]
  4058e6:	462a      	mov	r2, r5
  4058e8:	2101      	movs	r1, #1
  4058ea:	4620      	mov	r0, r4
  4058ec:	4798      	blx	r3
    lv_obj_invalidate(parent);
  4058ee:	4620      	mov	r0, r4
  4058f0:	47b8      	blx	r7
  4058f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4058f4:	00415065 	.word	0x00415065
  4058f8:	00421278 	.word	0x00421278
  4058fc:	00415071 	.word	0x00415071
  405900:	004052ad 	.word	0x004052ad
  405904:	00415375 	.word	0x00415375
  405908:	0040582d 	.word	0x0040582d
  40590c:	004154c9 	.word	0x004154c9

00405910 <lv_obj_set_pos>:
{
  405910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405914:	b083      	sub	sp, #12
  405916:	4604      	mov	r4, r0
  405918:	460f      	mov	r7, r1
  40591a:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40591c:	4b24      	ldr	r3, [pc, #144]	; (4059b0 <lv_obj_set_pos+0xa0>)
  40591e:	4798      	blx	r3
  405920:	2800      	cmp	r0, #0
  405922:	d03f      	beq.n	4059a4 <lv_obj_set_pos+0x94>
    lv_obj_t * par = obj->parent;
  405924:	6826      	ldr	r6, [r4, #0]
    if(par) {
  405926:	b12e      	cbz	r6, 405934 <lv_obj_set_pos+0x24>
        x = x + par->coords.x1;
  405928:	8a33      	ldrh	r3, [r6, #16]
  40592a:	441f      	add	r7, r3
  40592c:	b23f      	sxth	r7, r7
        y = y + par->coords.y1;
  40592e:	8a73      	ldrh	r3, [r6, #18]
  405930:	441d      	add	r5, r3
  405932:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
  405934:	8a23      	ldrh	r3, [r4, #16]
  405936:	1afb      	subs	r3, r7, r3
  405938:	fa1f f883 	uxth.w	r8, r3
  40593c:	fa0f f788 	sxth.w	r7, r8
    diff.y = y - obj->coords.y1;
  405940:	8a63      	ldrh	r3, [r4, #18]
  405942:	1aed      	subs	r5, r5, r3
  405944:	b2ad      	uxth	r5, r5
  405946:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
  40594a:	b917      	cbnz	r7, 405952 <lv_obj_set_pos+0x42>
  40594c:	f1b9 0f00 	cmp.w	r9, #0
  405950:	d025      	beq.n	40599e <lv_obj_set_pos+0x8e>
    lv_obj_invalidate(obj);
  405952:	4620      	mov	r0, r4
  405954:	4b17      	ldr	r3, [pc, #92]	; (4059b4 <lv_obj_set_pos+0xa4>)
  405956:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  405958:	4669      	mov	r1, sp
  40595a:	4620      	mov	r0, r4
  40595c:	4b16      	ldr	r3, [pc, #88]	; (4059b8 <lv_obj_set_pos+0xa8>)
  40595e:	4798      	blx	r3
    obj->coords.x1 += diff.x;
  405960:	8a23      	ldrh	r3, [r4, #16]
  405962:	4443      	add	r3, r8
  405964:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
  405966:	8a63      	ldrh	r3, [r4, #18]
  405968:	442b      	add	r3, r5
  40596a:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
  40596c:	8aa3      	ldrh	r3, [r4, #20]
  40596e:	4443      	add	r3, r8
  405970:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
  405972:	8ae3      	ldrh	r3, [r4, #22]
  405974:	441d      	add	r5, r3
  405976:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
  405978:	464a      	mov	r2, r9
  40597a:	4639      	mov	r1, r7
  40597c:	4620      	mov	r0, r4
  40597e:	4b0f      	ldr	r3, [pc, #60]	; (4059bc <lv_obj_set_pos+0xac>)
  405980:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  405982:	69e3      	ldr	r3, [r4, #28]
  405984:	466a      	mov	r2, sp
  405986:	2102      	movs	r1, #2
  405988:	4620      	mov	r0, r4
  40598a:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  40598c:	b126      	cbz	r6, 405998 <lv_obj_set_pos+0x88>
  40598e:	69f3      	ldr	r3, [r6, #28]
  405990:	4622      	mov	r2, r4
  405992:	2101      	movs	r1, #1
  405994:	4630      	mov	r0, r6
  405996:	4798      	blx	r3
    lv_obj_invalidate(obj);
  405998:	4620      	mov	r0, r4
  40599a:	4b06      	ldr	r3, [pc, #24]	; (4059b4 <lv_obj_set_pos+0xa4>)
  40599c:	4798      	blx	r3
}
  40599e:	b003      	add	sp, #12
  4059a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059a4:	4622      	mov	r2, r4
  4059a6:	2300      	movs	r3, #0
  4059a8:	4805      	ldr	r0, [pc, #20]	; (4059c0 <lv_obj_set_pos+0xb0>)
  4059aa:	4906      	ldr	r1, [pc, #24]	; (4059c4 <lv_obj_set_pos+0xb4>)
  4059ac:	4788      	blx	r1
  4059ae:	e7fe      	b.n	4059ae <lv_obj_set_pos+0x9e>
  4059b0:	00415065 	.word	0x00415065
  4059b4:	0040582d 	.word	0x0040582d
  4059b8:	004053c1 	.word	0x004053c1
  4059bc:	00404eb1 	.word	0x00404eb1
  4059c0:	00421278 	.word	0x00421278
  4059c4:	00415071 	.word	0x00415071

004059c8 <lv_obj_set_x>:
{
  4059c8:	b538      	push	{r3, r4, r5, lr}
  4059ca:	4604      	mov	r4, r0
  4059cc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059ce:	4b09      	ldr	r3, [pc, #36]	; (4059f4 <lv_obj_set_x+0x2c>)
  4059d0:	4798      	blx	r3
  4059d2:	b928      	cbnz	r0, 4059e0 <lv_obj_set_x+0x18>
  4059d4:	4622      	mov	r2, r4
  4059d6:	2300      	movs	r3, #0
  4059d8:	4807      	ldr	r0, [pc, #28]	; (4059f8 <lv_obj_set_x+0x30>)
  4059da:	4908      	ldr	r1, [pc, #32]	; (4059fc <lv_obj_set_x+0x34>)
  4059dc:	4788      	blx	r1
  4059de:	e7fe      	b.n	4059de <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
  4059e0:	4620      	mov	r0, r4
  4059e2:	4b07      	ldr	r3, [pc, #28]	; (405a00 <lv_obj_set_x+0x38>)
  4059e4:	4798      	blx	r3
  4059e6:	4602      	mov	r2, r0
  4059e8:	4629      	mov	r1, r5
  4059ea:	4620      	mov	r0, r4
  4059ec:	4b05      	ldr	r3, [pc, #20]	; (405a04 <lv_obj_set_x+0x3c>)
  4059ee:	4798      	blx	r3
  4059f0:	bd38      	pop	{r3, r4, r5, pc}
  4059f2:	bf00      	nop
  4059f4:	00415065 	.word	0x00415065
  4059f8:	00421278 	.word	0x00421278
  4059fc:	00415071 	.word	0x00415071
  405a00:	00405441 	.word	0x00405441
  405a04:	00405911 	.word	0x00405911

00405a08 <lv_obj_set_y>:
{
  405a08:	b538      	push	{r3, r4, r5, lr}
  405a0a:	4604      	mov	r4, r0
  405a0c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a0e:	4b09      	ldr	r3, [pc, #36]	; (405a34 <lv_obj_set_y+0x2c>)
  405a10:	4798      	blx	r3
  405a12:	b928      	cbnz	r0, 405a20 <lv_obj_set_y+0x18>
  405a14:	4622      	mov	r2, r4
  405a16:	2300      	movs	r3, #0
  405a18:	4807      	ldr	r0, [pc, #28]	; (405a38 <lv_obj_set_y+0x30>)
  405a1a:	4908      	ldr	r1, [pc, #32]	; (405a3c <lv_obj_set_y+0x34>)
  405a1c:	4788      	blx	r1
  405a1e:	e7fe      	b.n	405a1e <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
  405a20:	4620      	mov	r0, r4
  405a22:	4b07      	ldr	r3, [pc, #28]	; (405a40 <lv_obj_set_y+0x38>)
  405a24:	4798      	blx	r3
  405a26:	462a      	mov	r2, r5
  405a28:	4601      	mov	r1, r0
  405a2a:	4620      	mov	r0, r4
  405a2c:	4b05      	ldr	r3, [pc, #20]	; (405a44 <lv_obj_set_y+0x3c>)
  405a2e:	4798      	blx	r3
  405a30:	bd38      	pop	{r3, r4, r5, pc}
  405a32:	bf00      	nop
  405a34:	00415065 	.word	0x00415065
  405a38:	00421278 	.word	0x00421278
  405a3c:	00415071 	.word	0x00415071
  405a40:	00405401 	.word	0x00405401
  405a44:	00405911 	.word	0x00405911

00405a48 <obj_align_core>:
{
  405a48:	b5f0      	push	{r4, r5, r6, r7, lr}
  405a4a:	b083      	sub	sp, #12
  405a4c:	4604      	mov	r4, r0
  405a4e:	461d      	mov	r5, r3
  405a50:	f89d 6020 	ldrb.w	r6, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
  405a54:	f101 0010 	add.w	r0, r1, #16
  405a58:	ab01      	add	r3, sp, #4
  405a5a:	f104 0110 	add.w	r1, r4, #16
  405a5e:	4f18      	ldr	r7, [pc, #96]	; (405ac0 <obj_align_core+0x78>)
  405a60:	47b8      	blx	r7
    lv_obj_t * par        = lv_obj_get_parent(obj);
  405a62:	4620      	mov	r0, r4
  405a64:	4b17      	ldr	r3, [pc, #92]	; (405ac4 <obj_align_core+0x7c>)
  405a66:	4798      	blx	r3
    lv_coord_t par_abs_x  = par->coords.x1;
  405a68:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  405a6c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.x += x_ofs;
  405a70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405a74:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  405a78:	4411      	add	r1, r2
  405a7a:	b289      	uxth	r1, r1
    new_pos.y += y_ofs;
  405a7c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  405a80:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  405a84:	4402      	add	r2, r0
  405a86:	b292      	uxth	r2, r2
    new_pos.x -= par_abs_x;
  405a88:	1bc9      	subs	r1, r1, r7
  405a8a:	b209      	sxth	r1, r1
  405a8c:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
  405a90:	1ad2      	subs	r2, r2, r3
  405a92:	b212      	sxth	r2, r2
  405a94:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  405a98:	4235      	tst	r5, r6
  405a9a:	d103      	bne.n	405aa4 <obj_align_core+0x5c>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  405a9c:	b935      	cbnz	r5, 405aac <obj_align_core+0x64>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  405a9e:	b94e      	cbnz	r6, 405ab4 <obj_align_core+0x6c>
}
  405aa0:	b003      	add	sp, #12
  405aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  405aa4:	4620      	mov	r0, r4
  405aa6:	4b08      	ldr	r3, [pc, #32]	; (405ac8 <obj_align_core+0x80>)
  405aa8:	4798      	blx	r3
  405aaa:	e7f9      	b.n	405aa0 <obj_align_core+0x58>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  405aac:	4620      	mov	r0, r4
  405aae:	4b07      	ldr	r3, [pc, #28]	; (405acc <obj_align_core+0x84>)
  405ab0:	4798      	blx	r3
  405ab2:	e7f5      	b.n	405aa0 <obj_align_core+0x58>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  405ab4:	4611      	mov	r1, r2
  405ab6:	4620      	mov	r0, r4
  405ab8:	4b05      	ldr	r3, [pc, #20]	; (405ad0 <obj_align_core+0x88>)
  405aba:	4798      	blx	r3
}
  405abc:	e7f0      	b.n	405aa0 <obj_align_core+0x58>
  405abe:	bf00      	nop
  405ac0:	00414add 	.word	0x00414add
  405ac4:	004052ad 	.word	0x004052ad
  405ac8:	00405911 	.word	0x00405911
  405acc:	004059c9 	.word	0x004059c9
  405ad0:	00405a09 	.word	0x00405a09

00405ad4 <lv_obj_align>:
{
  405ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405ad8:	b085      	sub	sp, #20
  405ada:	4604      	mov	r4, r0
  405adc:	460d      	mov	r5, r1
  405ade:	4690      	mov	r8, r2
  405ae0:	461f      	mov	r7, r3
  405ae2:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ae6:	4b19      	ldr	r3, [pc, #100]	; (405b4c <lv_obj_align+0x78>)
  405ae8:	4798      	blx	r3
  405aea:	b928      	cbnz	r0, 405af8 <lv_obj_align+0x24>
  405aec:	4622      	mov	r2, r4
  405aee:	2300      	movs	r3, #0
  405af0:	4817      	ldr	r0, [pc, #92]	; (405b50 <lv_obj_align+0x7c>)
  405af2:	4918      	ldr	r1, [pc, #96]	; (405b54 <lv_obj_align+0x80>)
  405af4:	4788      	blx	r1
  405af6:	e7fe      	b.n	405af6 <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
  405af8:	b14d      	cbz	r5, 405b0e <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  405afa:	4628      	mov	r0, r5
  405afc:	4b13      	ldr	r3, [pc, #76]	; (405b4c <lv_obj_align+0x78>)
  405afe:	4798      	blx	r3
  405b00:	b950      	cbnz	r0, 405b18 <lv_obj_align+0x44>
  405b02:	462a      	mov	r2, r5
  405b04:	2300      	movs	r3, #0
  405b06:	4812      	ldr	r0, [pc, #72]	; (405b50 <lv_obj_align+0x7c>)
  405b08:	4912      	ldr	r1, [pc, #72]	; (405b54 <lv_obj_align+0x80>)
  405b0a:	4788      	blx	r1
  405b0c:	e7fe      	b.n	405b0c <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
  405b0e:	4620      	mov	r0, r4
  405b10:	4b11      	ldr	r3, [pc, #68]	; (405b58 <lv_obj_align+0x84>)
  405b12:	4798      	blx	r3
  405b14:	4605      	mov	r5, r0
  405b16:	e7f0      	b.n	405afa <lv_obj_align+0x26>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
  405b18:	9602      	str	r6, [sp, #8]
  405b1a:	9701      	str	r7, [sp, #4]
  405b1c:	2301      	movs	r3, #1
  405b1e:	9300      	str	r3, [sp, #0]
  405b20:	4642      	mov	r2, r8
  405b22:	4629      	mov	r1, r5
  405b24:	4620      	mov	r0, r4
  405b26:	f8df 9034 	ldr.w	r9, [pc, #52]	; 405b5c <lv_obj_align+0x88>
  405b2a:	47c8      	blx	r9
    obj->realign.align       = align;
  405b2c:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  405b30:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  405b34:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  405b38:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
  405b3a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  405b3e:	f36f 0341 	bfc	r3, #1, #1
  405b42:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  405b46:	b005      	add	sp, #20
  405b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405b4c:	00415065 	.word	0x00415065
  405b50:	00421278 	.word	0x00421278
  405b54:	00415071 	.word	0x00415071
  405b58:	004052ad 	.word	0x004052ad
  405b5c:	00405a49 	.word	0x00405a49

00405b60 <obj_align_mid_core>:
{
  405b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b64:	b083      	sub	sp, #12
  405b66:	4680      	mov	r8, r0
  405b68:	9001      	str	r0, [sp, #4]
  405b6a:	460f      	mov	r7, r1
  405b6c:	4616      	mov	r6, r2
  405b6e:	469a      	mov	sl, r3
  405b70:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    lv_coord_t new_x = lv_obj_get_x(obj);
  405b74:	4ba4      	ldr	r3, [pc, #656]	; (405e08 <obj_align_mid_core+0x2a8>)
  405b76:	4798      	blx	r3
  405b78:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
  405b7a:	4640      	mov	r0, r8
  405b7c:	4ba3      	ldr	r3, [pc, #652]	; (405e0c <obj_align_mid_core+0x2ac>)
  405b7e:	4798      	blx	r3
  405b80:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  405b82:	4640      	mov	r0, r8
  405b84:	4ba2      	ldr	r3, [pc, #648]	; (405e10 <obj_align_mid_core+0x2b0>)
  405b86:	4798      	blx	r3
  405b88:	4681      	mov	r9, r0
  405b8a:	2800      	cmp	r0, #0
  405b8c:	db22      	blt.n	405bd4 <obj_align_mid_core+0x74>
  405b8e:	f349 094f 	sbfx	r9, r9, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  405b92:	9801      	ldr	r0, [sp, #4]
  405b94:	4b9f      	ldr	r3, [pc, #636]	; (405e14 <obj_align_mid_core+0x2b4>)
  405b96:	4798      	blx	r3
  405b98:	4680      	mov	r8, r0
  405b9a:	2800      	cmp	r0, #0
  405b9c:	db1d      	blt.n	405bda <obj_align_mid_core+0x7a>
  405b9e:	f348 084f 	sbfx	r8, r8, #1, #16
    switch(align) {
  405ba2:	2e14      	cmp	r6, #20
  405ba4:	d82e      	bhi.n	405c04 <obj_align_mid_core+0xa4>
  405ba6:	e8df f016 	tbh	[pc, r6, lsl #1]
  405baa:	001b      	.short	0x001b
  405bac:	0062005b 	.word	0x0062005b
  405bb0:	007c0071 	.word	0x007c0071
  405bb4:	009a0087 	.word	0x009a0087
  405bb8:	00b800a9 	.word	0x00b800a9
  405bbc:	00d200cb 	.word	0x00d200cb
  405bc0:	00ec00e1 	.word	0x00ec00e1
  405bc4:	010a00f7 	.word	0x010a00f7
  405bc8:	01200119 	.word	0x01200119
  405bcc:	01440139 	.word	0x01440139
  405bd0:	0162014f 	.word	0x0162014f
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  405bd4:	f100 0901 	add.w	r9, r0, #1
  405bd8:	e7d9      	b.n	405b8e <obj_align_mid_core+0x2e>
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  405bda:	f100 0801 	add.w	r8, r0, #1
  405bde:	e7de      	b.n	405b9e <obj_align_mid_core+0x3e>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405be0:	4638      	mov	r0, r7
  405be2:	4b8b      	ldr	r3, [pc, #556]	; (405e10 <obj_align_mid_core+0x2b0>)
  405be4:	4798      	blx	r3
  405be6:	4605      	mov	r5, r0
  405be8:	2800      	cmp	r0, #0
  405bea:	db35      	blt.n	405c58 <obj_align_mid_core+0xf8>
  405bec:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405bf0:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405bf2:	4638      	mov	r0, r7
  405bf4:	4b87      	ldr	r3, [pc, #540]	; (405e14 <obj_align_mid_core+0x2b4>)
  405bf6:	4798      	blx	r3
  405bf8:	4604      	mov	r4, r0
  405bfa:	2800      	cmp	r0, #0
  405bfc:	db2e      	blt.n	405c5c <obj_align_mid_core+0xfc>
  405bfe:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405c02:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
  405c04:	9801      	ldr	r0, [sp, #4]
  405c06:	4b84      	ldr	r3, [pc, #528]	; (405e18 <obj_align_mid_core+0x2b8>)
  405c08:	4798      	blx	r3
    lv_coord_t base_abs_x = base->coords.x1;
  405c0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    lv_coord_t base_abs_y = base->coords.y1;
  405c0e:	f9b7 e012 	ldrsh.w	lr, [r7, #18]
    lv_coord_t par_abs_x  = par->coords.x1;
  405c12:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  405c16:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_x += x_ofs + base_abs_x;
  405c1a:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
  405c1e:	4411      	add	r1, r2
  405c20:	fa15 f181 	uxtah	r1, r5, r1
  405c24:	b289      	uxth	r1, r1
    new_y += y_ofs + base_abs_y;
  405c26:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  405c2a:	4472      	add	r2, lr
  405c2c:	fa14 f282 	uxtah	r2, r4, r2
  405c30:	b292      	uxth	r2, r2
    new_x -= par_abs_x;
  405c32:	1bc9      	subs	r1, r1, r7
  405c34:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
  405c36:	1ad2      	subs	r2, r2, r3
  405c38:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  405c3a:	ea1a 0f0b 	tst.w	sl, fp
  405c3e:	f040 8125 	bne.w	405e8c <obj_align_mid_core+0x32c>
    else if(x_set) lv_obj_set_x(obj, new_x);
  405c42:	f1ba 0f00 	cmp.w	sl, #0
  405c46:	f040 8125 	bne.w	405e94 <obj_align_mid_core+0x334>
    else if(y_set) lv_obj_set_y(obj, new_y);
  405c4a:	f1bb 0f00 	cmp.w	fp, #0
  405c4e:	f040 8125 	bne.w	405e9c <obj_align_mid_core+0x33c>
}
  405c52:	b003      	add	sp, #12
  405c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405c58:	1c45      	adds	r5, r0, #1
  405c5a:	e7c7      	b.n	405bec <obj_align_mid_core+0x8c>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405c5c:	1c44      	adds	r4, r0, #1
  405c5e:	e7ce      	b.n	405bfe <obj_align_mid_core+0x9e>
            new_x = -obj_w_half;
  405c60:	f1c9 0500 	rsb	r5, r9, #0
  405c64:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405c66:	f1c8 0400 	rsb	r4, r8, #0
  405c6a:	b224      	sxth	r4, r4
            break;
  405c6c:	e7ca      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405c6e:	4638      	mov	r0, r7
  405c70:	4b67      	ldr	r3, [pc, #412]	; (405e10 <obj_align_mid_core+0x2b0>)
  405c72:	4798      	blx	r3
  405c74:	4605      	mov	r5, r0
  405c76:	2800      	cmp	r0, #0
  405c78:	db06      	blt.n	405c88 <obj_align_mid_core+0x128>
  405c7a:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405c7e:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405c80:	f1c8 0400 	rsb	r4, r8, #0
  405c84:	b224      	sxth	r4, r4
            break;
  405c86:	e7bd      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405c88:	1c45      	adds	r5, r0, #1
  405c8a:	e7f6      	b.n	405c7a <obj_align_mid_core+0x11a>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405c8c:	4638      	mov	r0, r7
  405c8e:	4b60      	ldr	r3, [pc, #384]	; (405e10 <obj_align_mid_core+0x2b0>)
  405c90:	4798      	blx	r3
  405c92:	b285      	uxth	r5, r0
  405c94:	eba5 0509 	sub.w	r5, r5, r9
  405c98:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405c9a:	f1c8 0400 	rsb	r4, r8, #0
  405c9e:	b224      	sxth	r4, r4
            break;
  405ca0:	e7b0      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405ca2:	f1c9 0500 	rsb	r5, r9, #0
  405ca6:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405ca8:	4638      	mov	r0, r7
  405caa:	4b5a      	ldr	r3, [pc, #360]	; (405e14 <obj_align_mid_core+0x2b4>)
  405cac:	4798      	blx	r3
  405cae:	b284      	uxth	r4, r0
  405cb0:	eba4 0408 	sub.w	r4, r4, r8
  405cb4:	b224      	sxth	r4, r4
            break;
  405cb6:	e7a5      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405cb8:	4638      	mov	r0, r7
  405cba:	4b55      	ldr	r3, [pc, #340]	; (405e10 <obj_align_mid_core+0x2b0>)
  405cbc:	4798      	blx	r3
  405cbe:	4605      	mov	r5, r0
  405cc0:	2800      	cmp	r0, #0
  405cc2:	db0a      	blt.n	405cda <obj_align_mid_core+0x17a>
  405cc4:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405cc8:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405cca:	4638      	mov	r0, r7
  405ccc:	4b51      	ldr	r3, [pc, #324]	; (405e14 <obj_align_mid_core+0x2b4>)
  405cce:	4798      	blx	r3
  405cd0:	b284      	uxth	r4, r0
  405cd2:	eba4 0408 	sub.w	r4, r4, r8
  405cd6:	b224      	sxth	r4, r4
            break;
  405cd8:	e794      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405cda:	1c45      	adds	r5, r0, #1
  405cdc:	e7f2      	b.n	405cc4 <obj_align_mid_core+0x164>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405cde:	4638      	mov	r0, r7
  405ce0:	4b4b      	ldr	r3, [pc, #300]	; (405e10 <obj_align_mid_core+0x2b0>)
  405ce2:	4798      	blx	r3
  405ce4:	b285      	uxth	r5, r0
  405ce6:	eba5 0509 	sub.w	r5, r5, r9
  405cea:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405cec:	4638      	mov	r0, r7
  405cee:	4b49      	ldr	r3, [pc, #292]	; (405e14 <obj_align_mid_core+0x2b4>)
  405cf0:	4798      	blx	r3
  405cf2:	b284      	uxth	r4, r0
  405cf4:	eba4 0408 	sub.w	r4, r4, r8
  405cf8:	b224      	sxth	r4, r4
            break;
  405cfa:	e783      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405cfc:	f1c9 0500 	rsb	r5, r9, #0
  405d00:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405d02:	4638      	mov	r0, r7
  405d04:	4b43      	ldr	r3, [pc, #268]	; (405e14 <obj_align_mid_core+0x2b4>)
  405d06:	4798      	blx	r3
  405d08:	4604      	mov	r4, r0
  405d0a:	2800      	cmp	r0, #0
  405d0c:	db03      	blt.n	405d16 <obj_align_mid_core+0x1b6>
  405d0e:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405d12:	b224      	sxth	r4, r4
            break;
  405d14:	e776      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405d16:	1c44      	adds	r4, r0, #1
  405d18:	e7f9      	b.n	405d0e <obj_align_mid_core+0x1ae>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405d1a:	4638      	mov	r0, r7
  405d1c:	4b3c      	ldr	r3, [pc, #240]	; (405e10 <obj_align_mid_core+0x2b0>)
  405d1e:	4798      	blx	r3
  405d20:	b285      	uxth	r5, r0
  405d22:	eba5 0509 	sub.w	r5, r5, r9
  405d26:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405d28:	4638      	mov	r0, r7
  405d2a:	4b3a      	ldr	r3, [pc, #232]	; (405e14 <obj_align_mid_core+0x2b4>)
  405d2c:	4798      	blx	r3
  405d2e:	4604      	mov	r4, r0
  405d30:	2800      	cmp	r0, #0
  405d32:	db03      	blt.n	405d3c <obj_align_mid_core+0x1dc>
  405d34:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405d38:	b224      	sxth	r4, r4
            break;
  405d3a:	e763      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405d3c:	1c44      	adds	r4, r0, #1
  405d3e:	e7f9      	b.n	405d34 <obj_align_mid_core+0x1d4>
            new_x = -obj_w_half;
  405d40:	f1c9 0500 	rsb	r5, r9, #0
  405d44:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405d46:	f1c8 0400 	rsb	r4, r8, #0
  405d4a:	b224      	sxth	r4, r4
            break;
  405d4c:	e75a      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405d4e:	4638      	mov	r0, r7
  405d50:	4b2f      	ldr	r3, [pc, #188]	; (405e10 <obj_align_mid_core+0x2b0>)
  405d52:	4798      	blx	r3
  405d54:	4605      	mov	r5, r0
  405d56:	2800      	cmp	r0, #0
  405d58:	db06      	blt.n	405d68 <obj_align_mid_core+0x208>
  405d5a:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405d5e:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405d60:	f1c8 0400 	rsb	r4, r8, #0
  405d64:	b224      	sxth	r4, r4
            break;
  405d66:	e74d      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405d68:	1c45      	adds	r5, r0, #1
  405d6a:	e7f6      	b.n	405d5a <obj_align_mid_core+0x1fa>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405d6c:	4638      	mov	r0, r7
  405d6e:	4b28      	ldr	r3, [pc, #160]	; (405e10 <obj_align_mid_core+0x2b0>)
  405d70:	4798      	blx	r3
  405d72:	b285      	uxth	r5, r0
  405d74:	eba5 0509 	sub.w	r5, r5, r9
  405d78:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405d7a:	f1c8 0400 	rsb	r4, r8, #0
  405d7e:	b224      	sxth	r4, r4
            break;
  405d80:	e740      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405d82:	f1c9 0500 	rsb	r5, r9, #0
  405d86:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405d88:	4638      	mov	r0, r7
  405d8a:	4b22      	ldr	r3, [pc, #136]	; (405e14 <obj_align_mid_core+0x2b4>)
  405d8c:	4798      	blx	r3
  405d8e:	b284      	uxth	r4, r0
  405d90:	eba4 0408 	sub.w	r4, r4, r8
  405d94:	b224      	sxth	r4, r4
            break;
  405d96:	e735      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405d98:	4638      	mov	r0, r7
  405d9a:	4b1d      	ldr	r3, [pc, #116]	; (405e10 <obj_align_mid_core+0x2b0>)
  405d9c:	4798      	blx	r3
  405d9e:	4605      	mov	r5, r0
  405da0:	2800      	cmp	r0, #0
  405da2:	db0a      	blt.n	405dba <obj_align_mid_core+0x25a>
  405da4:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405da8:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405daa:	4638      	mov	r0, r7
  405dac:	4b19      	ldr	r3, [pc, #100]	; (405e14 <obj_align_mid_core+0x2b4>)
  405dae:	4798      	blx	r3
  405db0:	b284      	uxth	r4, r0
  405db2:	eba4 0408 	sub.w	r4, r4, r8
  405db6:	b224      	sxth	r4, r4
            break;
  405db8:	e724      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405dba:	1c45      	adds	r5, r0, #1
  405dbc:	e7f2      	b.n	405da4 <obj_align_mid_core+0x244>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405dbe:	4638      	mov	r0, r7
  405dc0:	4b13      	ldr	r3, [pc, #76]	; (405e10 <obj_align_mid_core+0x2b0>)
  405dc2:	4798      	blx	r3
  405dc4:	b285      	uxth	r5, r0
  405dc6:	eba5 0509 	sub.w	r5, r5, r9
  405dca:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405dcc:	4638      	mov	r0, r7
  405dce:	4b11      	ldr	r3, [pc, #68]	; (405e14 <obj_align_mid_core+0x2b4>)
  405dd0:	4798      	blx	r3
  405dd2:	b284      	uxth	r4, r0
  405dd4:	eba4 0408 	sub.w	r4, r4, r8
  405dd8:	b224      	sxth	r4, r4
            break;
  405dda:	e713      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405ddc:	f1c9 0500 	rsb	r5, r9, #0
  405de0:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405de2:	f1c8 0400 	rsb	r4, r8, #0
  405de6:	b224      	sxth	r4, r4
            break;
  405de8:	e70c      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405dea:	f1c9 0500 	rsb	r5, r9, #0
  405dee:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405df0:	4638      	mov	r0, r7
  405df2:	4b08      	ldr	r3, [pc, #32]	; (405e14 <obj_align_mid_core+0x2b4>)
  405df4:	4798      	blx	r3
  405df6:	4604      	mov	r4, r0
  405df8:	2800      	cmp	r0, #0
  405dfa:	db03      	blt.n	405e04 <obj_align_mid_core+0x2a4>
  405dfc:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405e00:	b224      	sxth	r4, r4
            break;
  405e02:	e6ff      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405e04:	1c44      	adds	r4, r0, #1
  405e06:	e7f9      	b.n	405dfc <obj_align_mid_core+0x29c>
  405e08:	00405401 	.word	0x00405401
  405e0c:	00405441 	.word	0x00405441
  405e10:	00405481 	.word	0x00405481
  405e14:	004054b1 	.word	0x004054b1
  405e18:	004052ad 	.word	0x004052ad
            new_x = -obj_w_half;
  405e1c:	f1c9 0500 	rsb	r5, r9, #0
  405e20:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405e22:	4638      	mov	r0, r7
  405e24:	4b20      	ldr	r3, [pc, #128]	; (405ea8 <obj_align_mid_core+0x348>)
  405e26:	4798      	blx	r3
  405e28:	b284      	uxth	r4, r0
  405e2a:	eba4 0408 	sub.w	r4, r4, r8
  405e2e:	b224      	sxth	r4, r4
            break;
  405e30:	e6e8      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405e32:	4638      	mov	r0, r7
  405e34:	4b1d      	ldr	r3, [pc, #116]	; (405eac <obj_align_mid_core+0x34c>)
  405e36:	4798      	blx	r3
  405e38:	b285      	uxth	r5, r0
  405e3a:	eba5 0509 	sub.w	r5, r5, r9
  405e3e:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405e40:	f1c8 0400 	rsb	r4, r8, #0
  405e44:	b224      	sxth	r4, r4
            break;
  405e46:	e6dd      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405e48:	4638      	mov	r0, r7
  405e4a:	4b18      	ldr	r3, [pc, #96]	; (405eac <obj_align_mid_core+0x34c>)
  405e4c:	4798      	blx	r3
  405e4e:	b285      	uxth	r5, r0
  405e50:	eba5 0509 	sub.w	r5, r5, r9
  405e54:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405e56:	4638      	mov	r0, r7
  405e58:	4b13      	ldr	r3, [pc, #76]	; (405ea8 <obj_align_mid_core+0x348>)
  405e5a:	4798      	blx	r3
  405e5c:	4604      	mov	r4, r0
  405e5e:	2800      	cmp	r0, #0
  405e60:	db03      	blt.n	405e6a <obj_align_mid_core+0x30a>
  405e62:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405e66:	b224      	sxth	r4, r4
            break;
  405e68:	e6cc      	b.n	405c04 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405e6a:	1c44      	adds	r4, r0, #1
  405e6c:	e7f9      	b.n	405e62 <obj_align_mid_core+0x302>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405e6e:	4638      	mov	r0, r7
  405e70:	4b0e      	ldr	r3, [pc, #56]	; (405eac <obj_align_mid_core+0x34c>)
  405e72:	4798      	blx	r3
  405e74:	b285      	uxth	r5, r0
  405e76:	eba5 0509 	sub.w	r5, r5, r9
  405e7a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405e7c:	4638      	mov	r0, r7
  405e7e:	4b0a      	ldr	r3, [pc, #40]	; (405ea8 <obj_align_mid_core+0x348>)
  405e80:	4798      	blx	r3
  405e82:	b284      	uxth	r4, r0
  405e84:	eba4 0408 	sub.w	r4, r4, r8
  405e88:	b224      	sxth	r4, r4
            break;
  405e8a:	e6bb      	b.n	405c04 <obj_align_mid_core+0xa4>
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  405e8c:	9801      	ldr	r0, [sp, #4]
  405e8e:	4b08      	ldr	r3, [pc, #32]	; (405eb0 <obj_align_mid_core+0x350>)
  405e90:	4798      	blx	r3
  405e92:	e6de      	b.n	405c52 <obj_align_mid_core+0xf2>
    else if(x_set) lv_obj_set_x(obj, new_x);
  405e94:	9801      	ldr	r0, [sp, #4]
  405e96:	4b07      	ldr	r3, [pc, #28]	; (405eb4 <obj_align_mid_core+0x354>)
  405e98:	4798      	blx	r3
  405e9a:	e6da      	b.n	405c52 <obj_align_mid_core+0xf2>
    else if(y_set) lv_obj_set_y(obj, new_y);
  405e9c:	4611      	mov	r1, r2
  405e9e:	9801      	ldr	r0, [sp, #4]
  405ea0:	4b05      	ldr	r3, [pc, #20]	; (405eb8 <obj_align_mid_core+0x358>)
  405ea2:	4798      	blx	r3
}
  405ea4:	e6d5      	b.n	405c52 <obj_align_mid_core+0xf2>
  405ea6:	bf00      	nop
  405ea8:	004054b1 	.word	0x004054b1
  405eac:	00405481 	.word	0x00405481
  405eb0:	00405911 	.word	0x00405911
  405eb4:	004059c9 	.word	0x004059c9
  405eb8:	00405a09 	.word	0x00405a09

00405ebc <lv_obj_align_mid>:
{
  405ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405ec0:	b085      	sub	sp, #20
  405ec2:	4604      	mov	r4, r0
  405ec4:	460d      	mov	r5, r1
  405ec6:	4690      	mov	r8, r2
  405ec8:	461f      	mov	r7, r3
  405eca:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ece:	4b19      	ldr	r3, [pc, #100]	; (405f34 <lv_obj_align_mid+0x78>)
  405ed0:	4798      	blx	r3
  405ed2:	b928      	cbnz	r0, 405ee0 <lv_obj_align_mid+0x24>
  405ed4:	4622      	mov	r2, r4
  405ed6:	2300      	movs	r3, #0
  405ed8:	4817      	ldr	r0, [pc, #92]	; (405f38 <lv_obj_align_mid+0x7c>)
  405eda:	4918      	ldr	r1, [pc, #96]	; (405f3c <lv_obj_align_mid+0x80>)
  405edc:	4788      	blx	r1
  405ede:	e7fe      	b.n	405ede <lv_obj_align_mid+0x22>
    if(base == NULL) {
  405ee0:	b14d      	cbz	r5, 405ef6 <lv_obj_align_mid+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  405ee2:	4628      	mov	r0, r5
  405ee4:	4b13      	ldr	r3, [pc, #76]	; (405f34 <lv_obj_align_mid+0x78>)
  405ee6:	4798      	blx	r3
  405ee8:	b950      	cbnz	r0, 405f00 <lv_obj_align_mid+0x44>
  405eea:	462a      	mov	r2, r5
  405eec:	2300      	movs	r3, #0
  405eee:	4812      	ldr	r0, [pc, #72]	; (405f38 <lv_obj_align_mid+0x7c>)
  405ef0:	4912      	ldr	r1, [pc, #72]	; (405f3c <lv_obj_align_mid+0x80>)
  405ef2:	4788      	blx	r1
  405ef4:	e7fe      	b.n	405ef4 <lv_obj_align_mid+0x38>
        base = lv_obj_get_parent(obj);
  405ef6:	4620      	mov	r0, r4
  405ef8:	4b11      	ldr	r3, [pc, #68]	; (405f40 <lv_obj_align_mid+0x84>)
  405efa:	4798      	blx	r3
  405efc:	4605      	mov	r5, r0
  405efe:	e7f0      	b.n	405ee2 <lv_obj_align_mid+0x26>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
  405f00:	9602      	str	r6, [sp, #8]
  405f02:	9701      	str	r7, [sp, #4]
  405f04:	2301      	movs	r3, #1
  405f06:	9300      	str	r3, [sp, #0]
  405f08:	4642      	mov	r2, r8
  405f0a:	4629      	mov	r1, r5
  405f0c:	4620      	mov	r0, r4
  405f0e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 405f44 <lv_obj_align_mid+0x88>
  405f12:	47c8      	blx	r9
    obj->realign.align       = align;
  405f14:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  405f18:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  405f1c:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  405f20:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
  405f22:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  405f26:	f043 0302 	orr.w	r3, r3, #2
  405f2a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  405f2e:	b005      	add	sp, #20
  405f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405f34:	00415065 	.word	0x00415065
  405f38:	00421278 	.word	0x00421278
  405f3c:	00415071 	.word	0x00415071
  405f40:	004052ad 	.word	0x004052ad
  405f44:	00405b61 	.word	0x00405b61

00405f48 <lv_obj_realign>:
{
  405f48:	b510      	push	{r4, lr}
  405f4a:	b082      	sub	sp, #8
  405f4c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f4e:	4b13      	ldr	r3, [pc, #76]	; (405f9c <lv_obj_realign+0x54>)
  405f50:	4798      	blx	r3
  405f52:	b188      	cbz	r0, 405f78 <lv_obj_realign+0x30>
    if(obj->realign.mid_align)
  405f54:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  405f58:	f013 0f02 	tst.w	r3, #2
  405f5c:	d012      	beq.n	405f84 <lv_obj_realign+0x3c>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  405f5e:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  405f62:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  405f66:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  405f6a:	9100      	str	r1, [sp, #0]
  405f6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
  405f6e:	4620      	mov	r0, r4
  405f70:	4c0b      	ldr	r4, [pc, #44]	; (405fa0 <lv_obj_realign+0x58>)
  405f72:	47a0      	blx	r4
}
  405f74:	b002      	add	sp, #8
  405f76:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f78:	4622      	mov	r2, r4
  405f7a:	2300      	movs	r3, #0
  405f7c:	4809      	ldr	r0, [pc, #36]	; (405fa4 <lv_obj_realign+0x5c>)
  405f7e:	490a      	ldr	r1, [pc, #40]	; (405fa8 <lv_obj_realign+0x60>)
  405f80:	4788      	blx	r1
  405f82:	e7fe      	b.n	405f82 <lv_obj_realign+0x3a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  405f84:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  405f88:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  405f8c:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  405f90:	9100      	str	r1, [sp, #0]
  405f92:	6c21      	ldr	r1, [r4, #64]	; 0x40
  405f94:	4620      	mov	r0, r4
  405f96:	4c05      	ldr	r4, [pc, #20]	; (405fac <lv_obj_realign+0x64>)
  405f98:	47a0      	blx	r4
}
  405f9a:	e7eb      	b.n	405f74 <lv_obj_realign+0x2c>
  405f9c:	00415065 	.word	0x00415065
  405fa0:	00405ebd 	.word	0x00405ebd
  405fa4:	00421278 	.word	0x00421278
  405fa8:	00415071 	.word	0x00415071
  405fac:	00405ad5 	.word	0x00405ad5

00405fb0 <refresh_children_style>:
{
  405fb0:	b570      	push	{r4, r5, r6, lr}
  405fb2:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  405fb4:	2100      	movs	r1, #0
  405fb6:	4b0c      	ldr	r3, [pc, #48]	; (405fe8 <refresh_children_style+0x38>)
  405fb8:	4798      	blx	r3
  405fba:	4604      	mov	r4, r0
    while(child != NULL) {
  405fbc:	e011      	b.n	405fe2 <refresh_children_style+0x32>
        lv_obj_invalidate(child);
  405fbe:	4620      	mov	r0, r4
  405fc0:	4d0a      	ldr	r5, [pc, #40]	; (405fec <refresh_children_style+0x3c>)
  405fc2:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
  405fc4:	69e3      	ldr	r3, [r4, #28]
  405fc6:	2200      	movs	r2, #0
  405fc8:	2104      	movs	r1, #4
  405fca:	4620      	mov	r0, r4
  405fcc:	4798      	blx	r3
        lv_obj_invalidate(child);
  405fce:	4620      	mov	r0, r4
  405fd0:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
  405fd2:	4620      	mov	r0, r4
  405fd4:	f7ff ffec 	bl	405fb0 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
  405fd8:	4621      	mov	r1, r4
  405fda:	4630      	mov	r0, r6
  405fdc:	4b02      	ldr	r3, [pc, #8]	; (405fe8 <refresh_children_style+0x38>)
  405fde:	4798      	blx	r3
  405fe0:	4604      	mov	r4, r0
    while(child != NULL) {
  405fe2:	2c00      	cmp	r4, #0
  405fe4:	d1eb      	bne.n	405fbe <refresh_children_style+0xe>
}
  405fe6:	bd70      	pop	{r4, r5, r6, pc}
  405fe8:	00405381 	.word	0x00405381
  405fec:	0040582d 	.word	0x0040582d

00405ff0 <lv_obj_get_click>:
{
  405ff0:	b510      	push	{r4, lr}
  405ff2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ff4:	4b06      	ldr	r3, [pc, #24]	; (406010 <lv_obj_get_click+0x20>)
  405ff6:	4798      	blx	r3
  405ff8:	b120      	cbz	r0, 406004 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
  405ffa:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  405ffe:	f000 0001 	and.w	r0, r0, #1
  406002:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406004:	4622      	mov	r2, r4
  406006:	2300      	movs	r3, #0
  406008:	4802      	ldr	r0, [pc, #8]	; (406014 <lv_obj_get_click+0x24>)
  40600a:	4903      	ldr	r1, [pc, #12]	; (406018 <lv_obj_get_click+0x28>)
  40600c:	4788      	blx	r1
  40600e:	e7fe      	b.n	40600e <lv_obj_get_click+0x1e>
  406010:	00415065 	.word	0x00415065
  406014:	00421278 	.word	0x00421278
  406018:	00415071 	.word	0x00415071

0040601c <lv_obj_get_drag>:
{
  40601c:	b510      	push	{r4, lr}
  40601e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406020:	4b06      	ldr	r3, [pc, #24]	; (40603c <lv_obj_get_drag+0x20>)
  406022:	4798      	blx	r3
  406024:	b120      	cbz	r0, 406030 <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
  406026:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  40602a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40602e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406030:	4622      	mov	r2, r4
  406032:	2300      	movs	r3, #0
  406034:	4802      	ldr	r0, [pc, #8]	; (406040 <lv_obj_get_drag+0x24>)
  406036:	4903      	ldr	r1, [pc, #12]	; (406044 <lv_obj_get_drag+0x28>)
  406038:	4788      	blx	r1
  40603a:	e7fe      	b.n	40603a <lv_obj_get_drag+0x1e>
  40603c:	00415065 	.word	0x00415065
  406040:	00421278 	.word	0x00421278
  406044:	00415071 	.word	0x00415071

00406048 <lv_obj_get_drag_dir>:
{
  406048:	b510      	push	{r4, lr}
  40604a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40604c:	4b06      	ldr	r3, [pc, #24]	; (406068 <lv_obj_get_drag_dir+0x20>)
  40604e:	4798      	blx	r3
  406050:	b120      	cbz	r0, 40605c <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
  406052:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
  406056:	f3c0 0082 	ubfx	r0, r0, #2, #3
  40605a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40605c:	4622      	mov	r2, r4
  40605e:	2300      	movs	r3, #0
  406060:	4802      	ldr	r0, [pc, #8]	; (40606c <lv_obj_get_drag_dir+0x24>)
  406062:	4903      	ldr	r1, [pc, #12]	; (406070 <lv_obj_get_drag_dir+0x28>)
  406064:	4788      	blx	r1
  406066:	e7fe      	b.n	406066 <lv_obj_get_drag_dir+0x1e>
  406068:	00415065 	.word	0x00415065
  40606c:	00421278 	.word	0x00421278
  406070:	00415071 	.word	0x00415071

00406074 <lv_obj_get_drag_throw>:
{
  406074:	b510      	push	{r4, lr}
  406076:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406078:	4b06      	ldr	r3, [pc, #24]	; (406094 <lv_obj_get_drag_throw+0x20>)
  40607a:	4798      	blx	r3
  40607c:	b120      	cbz	r0, 406088 <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
  40607e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  406082:	f3c0 0080 	ubfx	r0, r0, #2, #1
  406086:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406088:	4622      	mov	r2, r4
  40608a:	2300      	movs	r3, #0
  40608c:	4802      	ldr	r0, [pc, #8]	; (406098 <lv_obj_get_drag_throw+0x24>)
  40608e:	4903      	ldr	r1, [pc, #12]	; (40609c <lv_obj_get_drag_throw+0x28>)
  406090:	4788      	blx	r1
  406092:	e7fe      	b.n	406092 <lv_obj_get_drag_throw+0x1e>
  406094:	00415065 	.word	0x00415065
  406098:	00421278 	.word	0x00421278
  40609c:	00415071 	.word	0x00415071

004060a0 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
  4060a0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
  4060a4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  4060a8:	4770      	bx	lr

004060aa <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
  4060aa:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  4060ae:	f000 0001 	and.w	r0, r0, #1
  4060b2:	4770      	bx	lr

004060b4 <lv_obj_get_focus_parent>:
    return obj->focus_parent == 0 ? false : true;
  4060b4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  4060b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4060bc:	4770      	bx	lr
	...

004060c0 <lv_obj_get_base_dir>:
{
  4060c0:	b510      	push	{r4, lr}
  4060c2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4060c4:	4b05      	ldr	r3, [pc, #20]	; (4060dc <lv_obj_get_base_dir+0x1c>)
  4060c6:	4798      	blx	r3
  4060c8:	b108      	cbz	r0, 4060ce <lv_obj_get_base_dir+0xe>
}
  4060ca:	2000      	movs	r0, #0
  4060cc:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4060ce:	4622      	mov	r2, r4
  4060d0:	2300      	movs	r3, #0
  4060d2:	4803      	ldr	r0, [pc, #12]	; (4060e0 <lv_obj_get_base_dir+0x20>)
  4060d4:	4903      	ldr	r1, [pc, #12]	; (4060e4 <lv_obj_get_base_dir+0x24>)
  4060d6:	4788      	blx	r1
  4060d8:	e7fe      	b.n	4060d8 <lv_obj_get_base_dir+0x18>
  4060da:	bf00      	nop
  4060dc:	00415065 	.word	0x00415065
  4060e0:	00421278 	.word	0x00421278
  4060e4:	00415071 	.word	0x00415071

004060e8 <lv_obj_create>:
{
  4060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4060ea:	460d      	mov	r5, r1
    if(parent == NULL) {
  4060ec:	4606      	mov	r6, r0
  4060ee:	b150      	cbz	r0, 406106 <lv_obj_create+0x1e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
  4060f0:	4b8e      	ldr	r3, [pc, #568]	; (40632c <lv_obj_create+0x244>)
  4060f2:	4798      	blx	r3
  4060f4:	2800      	cmp	r0, #0
  4060f6:	f040 8086 	bne.w	406206 <lv_obj_create+0x11e>
  4060fa:	4632      	mov	r2, r6
  4060fc:	2300      	movs	r3, #0
  4060fe:	488c      	ldr	r0, [pc, #560]	; (406330 <lv_obj_create+0x248>)
  406100:	498c      	ldr	r1, [pc, #560]	; (406334 <lv_obj_create+0x24c>)
  406102:	4788      	blx	r1
  406104:	e7fe      	b.n	406104 <lv_obj_create+0x1c>
        lv_disp_t * disp = lv_disp_get_default();
  406106:	4b8c      	ldr	r3, [pc, #560]	; (406338 <lv_obj_create+0x250>)
  406108:	4798      	blx	r3
        if(!disp) {
  40610a:	2800      	cmp	r0, #0
  40610c:	f000 81f0 	beq.w	4064f0 <lv_obj_create+0x408>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
  406110:	3038      	adds	r0, #56	; 0x38
  406112:	4b8a      	ldr	r3, [pc, #552]	; (40633c <lv_obj_create+0x254>)
  406114:	4798      	blx	r3
  406116:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  406118:	4b84      	ldr	r3, [pc, #528]	; (40632c <lv_obj_create+0x244>)
  40611a:	4798      	blx	r3
  40611c:	b928      	cbnz	r0, 40612a <lv_obj_create+0x42>
  40611e:	4622      	mov	r2, r4
  406120:	2300      	movs	r3, #0
  406122:	4887      	ldr	r0, [pc, #540]	; (406340 <lv_obj_create+0x258>)
  406124:	4983      	ldr	r1, [pc, #524]	; (406334 <lv_obj_create+0x24c>)
  406126:	4788      	blx	r1
  406128:	e7fe      	b.n	406128 <lv_obj_create+0x40>
        if(new_obj == NULL) return NULL;
  40612a:	2c00      	cmp	r4, #0
  40612c:	f000 81de 	beq.w	4064ec <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  406130:	214c      	movs	r1, #76	; 0x4c
  406132:	4620      	mov	r0, r4
  406134:	4b83      	ldr	r3, [pc, #524]	; (406344 <lv_obj_create+0x25c>)
  406136:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  406138:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  40613c:	f36f 1346 	bfc	r3, #5, #2
  406140:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  406144:	4b80      	ldr	r3, [pc, #512]	; (406348 <lv_obj_create+0x260>)
  406146:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  406148:	4b80      	ldr	r3, [pc, #512]	; (40634c <lv_obj_create+0x264>)
  40614a:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  40614c:	2700      	movs	r7, #0
  40614e:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
  406150:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
  406152:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
  406154:	4638      	mov	r0, r7
  406156:	4b7e      	ldr	r3, [pc, #504]	; (406350 <lv_obj_create+0x268>)
  406158:	4798      	blx	r3
  40615a:	b283      	uxth	r3, r0
  40615c:	3b01      	subs	r3, #1
  40615e:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
  406160:	4638      	mov	r0, r7
  406162:	4b7c      	ldr	r3, [pc, #496]	; (406354 <lv_obj_create+0x26c>)
  406164:	4798      	blx	r3
  406166:	b283      	uxth	r3, r0
  406168:	3b01      	subs	r3, #1
  40616a:	82e3      	strh	r3, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
  40616c:	214c      	movs	r1, #76	; 0x4c
  40616e:	1d20      	adds	r0, r4, #4
  406170:	4b79      	ldr	r3, [pc, #484]	; (406358 <lv_obj_create+0x270>)
  406172:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
  406174:	2300      	movs	r3, #0
  406176:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
  406178:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
  40617c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
  406180:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
  406184:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
  406188:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
  40618c:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
  40618e:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
  406192:	f363 0200 	bfi	r2, r3, #0, #1
  406196:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
  40619a:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
  40619c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    new_obj->click        = 1;
  4061a0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    new_obj->drag         = 0;
  4061a4:	f041 0101 	orr.w	r1, r1, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
  4061a8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  4061ac:	2003      	movs	r0, #3
  4061ae:	f360 0284 	bfi	r2, r0, #2, #3
    new_obj->protect      = LV_PROTECT_NONE;
  4061b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
  4061b6:	f001 01c1 	and.w	r1, r1, #193	; 0xc1
  4061ba:	f363 1186 	bfi	r1, r3, #6, #1
  4061be:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
  4061c2:	1af1      	subs	r1, r6, r3
  4061c4:	bf18      	it	ne
  4061c6:	2101      	movne	r1, #1
  4061c8:	f361 0200 	bfi	r2, r1, #0, #1
    new_obj->focus_parent  = 0;
  4061cc:	f363 0241 	bfi	r2, r3, #1, #1
  4061d0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
  4061d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
  4061d8:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
  4061da:	f104 0728 	add.w	r7, r4, #40	; 0x28
  4061de:	4638      	mov	r0, r7
  4061e0:	4b5e      	ldr	r3, [pc, #376]	; (40635c <lv_obj_create+0x274>)
  4061e2:	4798      	blx	r3
    if(copy == NULL) {
  4061e4:	2d00      	cmp	r5, #0
  4061e6:	f000 8096 	beq.w	406316 <lv_obj_create+0x22e>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
  4061ea:	f105 0128 	add.w	r1, r5, #40	; 0x28
  4061ee:	4638      	mov	r0, r7
  4061f0:	4b5b      	ldr	r3, [pc, #364]	; (406360 <lv_obj_create+0x278>)
  4061f2:	4798      	blx	r3
    if(copy != NULL) {
  4061f4:	2d00      	cmp	r5, #0
  4061f6:	f000 8170 	beq.w	4064da <lv_obj_create+0x3f2>
        lv_area_copy(&new_obj->coords, &copy->coords);
  4061fa:	f105 0110 	add.w	r1, r5, #16
    uint8_t * d8 = (uint8_t *)dst;
  4061fe:	f104 0210 	add.w	r2, r4, #16
  406202:	2308      	movs	r3, #8
  406204:	e0bb      	b.n	40637e <lv_obj_create+0x296>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
  406206:	1d30      	adds	r0, r6, #4
  406208:	4b4c      	ldr	r3, [pc, #304]	; (40633c <lv_obj_create+0x254>)
  40620a:	4798      	blx	r3
  40620c:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  40620e:	4b47      	ldr	r3, [pc, #284]	; (40632c <lv_obj_create+0x244>)
  406210:	4798      	blx	r3
  406212:	2800      	cmp	r0, #0
  406214:	d047      	beq.n	4062a6 <lv_obj_create+0x1be>
        if(new_obj == NULL) return NULL;
  406216:	2c00      	cmp	r4, #0
  406218:	f000 8168 	beq.w	4064ec <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  40621c:	214c      	movs	r1, #76	; 0x4c
  40621e:	4620      	mov	r0, r4
  406220:	4b48      	ldr	r3, [pc, #288]	; (406344 <lv_obj_create+0x25c>)
  406222:	4798      	blx	r3
        new_obj->parent = parent;
  406224:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  406226:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  40622a:	f36f 1346 	bfc	r3, #5, #2
  40622e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  406232:	4b45      	ldr	r3, [pc, #276]	; (406348 <lv_obj_create+0x260>)
  406234:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  406236:	4b45      	ldr	r3, [pc, #276]	; (40634c <lv_obj_create+0x264>)
  406238:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  40623a:	2000      	movs	r0, #0
  40623c:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
  40623e:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  406242:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  406244:	8a77      	ldrh	r7, [r6, #18]
  406246:	4b47      	ldr	r3, [pc, #284]	; (406364 <lv_obj_create+0x27c>)
  406248:	4798      	blx	r3
  40624a:	2332      	movs	r3, #50	; 0x32
  40624c:	fb03 f300 	mul.w	r3, r3, r0
  406250:	3350      	adds	r3, #80	; 0x50
  406252:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  406256:	da2c      	bge.n	4062b2 <lv_obj_create+0x1ca>
  406258:	2301      	movs	r3, #1
  40625a:	443b      	add	r3, r7
  40625c:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
  40625e:	4620      	mov	r0, r4
  406260:	4b41      	ldr	r3, [pc, #260]	; (406368 <lv_obj_create+0x280>)
  406262:	4798      	blx	r3
  406264:	2801      	cmp	r0, #1
  406266:	d033      	beq.n	4062d0 <lv_obj_create+0x1e8>
            new_obj->coords.x1    = parent->coords.x1;
  406268:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40626c:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  40626e:	8a37      	ldrh	r7, [r6, #16]
  406270:	2000      	movs	r0, #0
  406272:	4b3c      	ldr	r3, [pc, #240]	; (406364 <lv_obj_create+0x27c>)
  406274:	4798      	blx	r3
  406276:	2364      	movs	r3, #100	; 0x64
  406278:	fb03 f300 	mul.w	r3, r3, r0
  40627c:	3350      	adds	r3, #80	; 0x50
  40627e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  406282:	db46      	blt.n	406312 <lv_obj_create+0x22a>
  406284:	2000      	movs	r0, #0
  406286:	4b37      	ldr	r3, [pc, #220]	; (406364 <lv_obj_create+0x27c>)
  406288:	4798      	blx	r3
  40628a:	2364      	movs	r3, #100	; 0x64
  40628c:	fb03 f300 	mul.w	r3, r3, r0
  406290:	3350      	adds	r3, #80	; 0x50
  406292:	4a36      	ldr	r2, [pc, #216]	; (40636c <lv_obj_create+0x284>)
  406294:	fb82 1203 	smull	r1, r2, r2, r3
  406298:	17db      	asrs	r3, r3, #31
  40629a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  40629e:	b29b      	uxth	r3, r3
  4062a0:	443b      	add	r3, r7
  4062a2:	82a3      	strh	r3, [r4, #20]
  4062a4:	e762      	b.n	40616c <lv_obj_create+0x84>
        LV_ASSERT_MEM(new_obj);
  4062a6:	4622      	mov	r2, r4
  4062a8:	2300      	movs	r3, #0
  4062aa:	4825      	ldr	r0, [pc, #148]	; (406340 <lv_obj_create+0x258>)
  4062ac:	4921      	ldr	r1, [pc, #132]	; (406334 <lv_obj_create+0x24c>)
  4062ae:	4788      	blx	r1
  4062b0:	e7fe      	b.n	4062b0 <lv_obj_create+0x1c8>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  4062b2:	2000      	movs	r0, #0
  4062b4:	4b2b      	ldr	r3, [pc, #172]	; (406364 <lv_obj_create+0x27c>)
  4062b6:	4798      	blx	r3
  4062b8:	2332      	movs	r3, #50	; 0x32
  4062ba:	fb03 f300 	mul.w	r3, r3, r0
  4062be:	3350      	adds	r3, #80	; 0x50
  4062c0:	4a2a      	ldr	r2, [pc, #168]	; (40636c <lv_obj_create+0x284>)
  4062c2:	fb82 1203 	smull	r1, r2, r2, r3
  4062c6:	17db      	asrs	r3, r3, #31
  4062c8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  4062cc:	b29b      	uxth	r3, r3
  4062ce:	e7c4      	b.n	40625a <lv_obj_create+0x172>
            new_obj->coords.x2    = parent->coords.x2;
  4062d0:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  4062d4:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
  4062d6:	8ab7      	ldrh	r7, [r6, #20]
  4062d8:	2000      	movs	r0, #0
  4062da:	4b22      	ldr	r3, [pc, #136]	; (406364 <lv_obj_create+0x27c>)
  4062dc:	4798      	blx	r3
  4062de:	2364      	movs	r3, #100	; 0x64
  4062e0:	fb03 f300 	mul.w	r3, r3, r0
  4062e4:	3350      	adds	r3, #80	; 0x50
  4062e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4062ea:	db10      	blt.n	40630e <lv_obj_create+0x226>
  4062ec:	2000      	movs	r0, #0
  4062ee:	4b1d      	ldr	r3, [pc, #116]	; (406364 <lv_obj_create+0x27c>)
  4062f0:	4798      	blx	r3
  4062f2:	2364      	movs	r3, #100	; 0x64
  4062f4:	fb03 f300 	mul.w	r3, r3, r0
  4062f8:	3350      	adds	r3, #80	; 0x50
  4062fa:	4a1c      	ldr	r2, [pc, #112]	; (40636c <lv_obj_create+0x284>)
  4062fc:	fb82 1203 	smull	r1, r2, r2, r3
  406300:	17db      	asrs	r3, r3, #31
  406302:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406306:	b29b      	uxth	r3, r3
  406308:	1afb      	subs	r3, r7, r3
  40630a:	8223      	strh	r3, [r4, #16]
  40630c:	e72e      	b.n	40616c <lv_obj_create+0x84>
  40630e:	2301      	movs	r3, #1
  406310:	e7fa      	b.n	406308 <lv_obj_create+0x220>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  406312:	2301      	movs	r3, #1
  406314:	e7c4      	b.n	4062a0 <lv_obj_create+0x1b8>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
  406316:	b126      	cbz	r6, 406322 <lv_obj_create+0x23a>
  406318:	2102      	movs	r1, #2
  40631a:	4620      	mov	r0, r4
  40631c:	4b14      	ldr	r3, [pc, #80]	; (406370 <lv_obj_create+0x288>)
  40631e:	4798      	blx	r3
  406320:	e768      	b.n	4061f4 <lv_obj_create+0x10c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
  406322:	2101      	movs	r1, #1
  406324:	4620      	mov	r0, r4
  406326:	4b12      	ldr	r3, [pc, #72]	; (406370 <lv_obj_create+0x288>)
  406328:	4798      	blx	r3
  40632a:	e763      	b.n	4061f4 <lv_obj_create+0x10c>
  40632c:	00415065 	.word	0x00415065
  406330:	00421278 	.word	0x00421278
  406334:	00415071 	.word	0x00415071
  406338:	00413f2d 	.word	0x00413f2d
  40633c:	004152dd 	.word	0x004152dd
  406340:	00421264 	.word	0x00421264
  406344:	00415ca1 	.word	0x00415ca1
  406348:	00408669 	.word	0x00408669
  40634c:	00407a99 	.word	0x00407a99
  406350:	00413f39 	.word	0x00413f39
  406354:	00413f69 	.word	0x00413f69
  406358:	004152cb 	.word	0x004152cb
  40635c:	004091e9 	.word	0x004091e9
  406360:	0040a0c5 	.word	0x0040a0c5
  406364:	00413f95 	.word	0x00413f95
  406368:	004060c1 	.word	0x004060c1
  40636c:	66666667 	.word	0x66666667
  406370:	004169f5 	.word	0x004169f5
        *d8 = *s8;
  406374:	f811 0b01 	ldrb.w	r0, [r1], #1
  406378:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40637c:	3b01      	subs	r3, #1
    while(len) {
  40637e:	2b00      	cmp	r3, #0
  406380:	d1f8      	bne.n	406374 <lv_obj_create+0x28c>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
  406382:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  406386:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
  406388:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  40638c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
  406390:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
  406394:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
  406398:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  40639c:	f3c3 1341 	ubfx	r3, r3, #5, #2
  4063a0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  4063a4:	f363 1246 	bfi	r2, r3, #5, #2
  4063a8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
  4063ac:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  4063b0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
  4063b4:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
  4063b8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
  4063bc:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
  4063c0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
  4063c4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  4063c6:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
  4063c8:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
  4063cc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  4063d0:	f362 0300 	bfi	r3, r2, #0, #1
  4063d4:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
  4063d8:	69ab      	ldr	r3, [r5, #24]
  4063da:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
  4063dc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4063e0:	09db      	lsrs	r3, r3, #7
  4063e2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  4063e6:	f363 12c7 	bfi	r2, r3, #7, #1
  4063ea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
  4063ee:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  4063f2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4063f6:	f362 0300 	bfi	r3, r2, #0, #1
  4063fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
  4063fe:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406402:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406406:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  40640a:	f363 0241 	bfi	r2, r3, #1, #1
  40640e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
  406412:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406416:	f3c3 0382 	ubfx	r3, r3, #2, #3
  40641a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  40641e:	f363 0284 	bfi	r2, r3, #2, #3
  406422:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
  406426:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40642a:	f3c3 0380 	ubfx	r3, r3, #2, #1
  40642e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406432:	f363 0282 	bfi	r2, r3, #2, #1
  406436:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
  40643a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40643e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  406442:	b2d2      	uxtb	r2, r2
  406444:	f363 02c3 	bfi	r2, r3, #3, #1
  406448:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
  40644c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406450:	f3c3 1300 	ubfx	r3, r3, #4, #1
  406454:	b2d2      	uxtb	r2, r2
  406456:	f363 1204 	bfi	r2, r3, #4, #1
  40645a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
  40645e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406462:	f3c3 1340 	ubfx	r3, r3, #5, #1
  406466:	b2d2      	uxtb	r2, r2
  406468:	f363 1245 	bfi	r2, r3, #5, #1
  40646c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
  406470:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406474:	f3c3 1380 	ubfx	r3, r3, #6, #1
  406478:	b2d2      	uxtb	r2, r2
  40647a:	f363 1286 	bfi	r2, r3, #6, #1
  40647e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
  406482:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  406486:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
  40648a:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  40648e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406492:	f362 0300 	bfi	r3, r2, #0, #1
  406496:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
  40649a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  40649e:	f3c3 0340 	ubfx	r3, r3, #1, #1
  4064a2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  4064a6:	f363 0241 	bfi	r2, r3, #1, #1
  4064aa:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
  4064ae:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  4064b0:	b110      	cbz	r0, 4064b8 <lv_obj_create+0x3d0>
            lv_group_add_obj(copy->group_p, new_obj);
  4064b2:	4621      	mov	r1, r4
  4064b4:	4b0f      	ldr	r3, [pc, #60]	; (4064f4 <lv_obj_create+0x40c>)
  4064b6:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
  4064b8:	4628      	mov	r0, r5
  4064ba:	4b0f      	ldr	r3, [pc, #60]	; (4064f8 <lv_obj_create+0x410>)
  4064bc:	4798      	blx	r3
  4064be:	b160      	cbz	r0, 4064da <lv_obj_create+0x3f2>
  4064c0:	b15e      	cbz	r6, 4064da <lv_obj_create+0x3f2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
  4064c2:	4628      	mov	r0, r5
  4064c4:	4b0d      	ldr	r3, [pc, #52]	; (4064fc <lv_obj_create+0x414>)
  4064c6:	4798      	blx	r3
  4064c8:	4607      	mov	r7, r0
  4064ca:	4628      	mov	r0, r5
  4064cc:	4b0c      	ldr	r3, [pc, #48]	; (406500 <lv_obj_create+0x418>)
  4064ce:	4798      	blx	r3
  4064d0:	4602      	mov	r2, r0
  4064d2:	4639      	mov	r1, r7
  4064d4:	4620      	mov	r0, r4
  4064d6:	4b0b      	ldr	r3, [pc, #44]	; (406504 <lv_obj_create+0x41c>)
  4064d8:	4798      	blx	r3
    if(parent != NULL) {
  4064da:	b13e      	cbz	r6, 4064ec <lv_obj_create+0x404>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
  4064dc:	69f3      	ldr	r3, [r6, #28]
  4064de:	4622      	mov	r2, r4
  4064e0:	2101      	movs	r1, #1
  4064e2:	4630      	mov	r0, r6
  4064e4:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
  4064e6:	4620      	mov	r0, r4
  4064e8:	4b07      	ldr	r3, [pc, #28]	; (406508 <lv_obj_create+0x420>)
  4064ea:	4798      	blx	r3
}
  4064ec:	4620      	mov	r0, r4
  4064ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
  4064f0:	4634      	mov	r4, r6
  4064f2:	e7fb      	b.n	4064ec <lv_obj_create+0x404>
  4064f4:	004033f1 	.word	0x004033f1
  4064f8:	004052ad 	.word	0x004052ad
  4064fc:	00405401 	.word	0x00405401
  406500:	00405441 	.word	0x00405441
  406504:	00405911 	.word	0x00405911
  406508:	0040582d 	.word	0x0040582d

0040650c <lv_obj_is_protected>:
{
  40650c:	b538      	push	{r3, r4, r5, lr}
  40650e:	4604      	mov	r4, r0
  406510:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406512:	4b08      	ldr	r3, [pc, #32]	; (406534 <lv_obj_is_protected+0x28>)
  406514:	4798      	blx	r3
  406516:	b130      	cbz	r0, 406526 <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
  406518:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  40651c:	422b      	tst	r3, r5
}
  40651e:	bf14      	ite	ne
  406520:	2001      	movne	r0, #1
  406522:	2000      	moveq	r0, #0
  406524:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406526:	4622      	mov	r2, r4
  406528:	2300      	movs	r3, #0
  40652a:	4803      	ldr	r0, [pc, #12]	; (406538 <lv_obj_is_protected+0x2c>)
  40652c:	4903      	ldr	r1, [pc, #12]	; (40653c <lv_obj_is_protected+0x30>)
  40652e:	4788      	blx	r1
  406530:	e7fe      	b.n	406530 <lv_obj_is_protected+0x24>
  406532:	bf00      	nop
  406534:	00415065 	.word	0x00415065
  406538:	00421278 	.word	0x00421278
  40653c:	00415071 	.word	0x00415071

00406540 <lv_obj_get_state>:
{
  406540:	b530      	push	{r4, r5, lr}
  406542:	b083      	sub	sp, #12
  406544:	4604      	mov	r4, r0
  406546:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406548:	4b0d      	ldr	r3, [pc, #52]	; (406580 <lv_obj_get_state+0x40>)
  40654a:	4798      	blx	r3
  40654c:	b128      	cbz	r0, 40655a <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
  40654e:	2d3f      	cmp	r5, #63	; 0x3f
  406550:	d809      	bhi.n	406566 <lv_obj_get_state+0x26>
  406552:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
  406556:	b003      	add	sp, #12
  406558:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40655a:	4622      	mov	r2, r4
  40655c:	2300      	movs	r3, #0
  40655e:	4809      	ldr	r0, [pc, #36]	; (406584 <lv_obj_get_state+0x44>)
  406560:	4909      	ldr	r1, [pc, #36]	; (406588 <lv_obj_get_state+0x48>)
  406562:	4788      	blx	r1
  406564:	e7fe      	b.n	406564 <lv_obj_get_state+0x24>
    info.part = part;
  406566:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
  40656a:	2300      	movs	r3, #0
  40656c:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
  406570:	aa01      	add	r2, sp, #4
  406572:	2109      	movs	r1, #9
  406574:	4620      	mov	r0, r4
  406576:	4b05      	ldr	r3, [pc, #20]	; (40658c <lv_obj_get_state+0x4c>)
  406578:	4798      	blx	r3
    return info.result;
  40657a:	f89d 0005 	ldrb.w	r0, [sp, #5]
  40657e:	e7ea      	b.n	406556 <lv_obj_get_state+0x16>
  406580:	00415065 	.word	0x00415065
  406584:	00421278 	.word	0x00421278
  406588:	00415071 	.word	0x00415071
  40658c:	00405269 	.word	0x00405269

00406590 <_lv_obj_get_style_color>:
{
  406590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406594:	b083      	sub	sp, #12
  406596:	4606      	mov	r6, r0
  406598:	460d      	mov	r5, r1
  40659a:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  40659c:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  4065a0:	4614      	mov	r4, r2
  4065a2:	e006      	b.n	4065b2 <_lv_obj_get_style_color+0x22>
        if(res == LV_RES_OK) return value_act;
  4065a4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  4065a8:	e026      	b.n	4065f8 <_lv_obj_get_style_color+0x68>
        parent = lv_obj_get_parent(parent);
  4065aa:	4630      	mov	r0, r6
  4065ac:	4b15      	ldr	r3, [pc, #84]	; (406604 <_lv_obj_get_style_color+0x74>)
  4065ae:	4798      	blx	r3
  4065b0:	4606      	mov	r6, r0
    while(parent) {
  4065b2:	b1d6      	cbz	r6, 4065ea <_lv_obj_get_style_color+0x5a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4065b4:	4629      	mov	r1, r5
  4065b6:	4630      	mov	r0, r6
  4065b8:	4b13      	ldr	r3, [pc, #76]	; (406608 <_lv_obj_get_style_color+0x78>)
  4065ba:	4798      	blx	r3
  4065bc:	4607      	mov	r7, r0
        lv_state_t state = lv_obj_get_state(parent, part);
  4065be:	4629      	mov	r1, r5
  4065c0:	4630      	mov	r0, r6
  4065c2:	4b12      	ldr	r3, [pc, #72]	; (40660c <_lv_obj_get_style_color+0x7c>)
  4065c4:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  4065c6:	0204      	lsls	r4, r0, #8
  4065c8:	b2a4      	uxth	r4, r4
  4065ca:	4444      	add	r4, r8
  4065cc:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
  4065ce:	aa01      	add	r2, sp, #4
  4065d0:	4621      	mov	r1, r4
  4065d2:	4638      	mov	r0, r7
  4065d4:	4b0e      	ldr	r3, [pc, #56]	; (406610 <_lv_obj_get_style_color+0x80>)
  4065d6:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  4065d8:	2801      	cmp	r0, #1
  4065da:	d0e3      	beq.n	4065a4 <_lv_obj_get_style_color+0x14>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  4065dc:	f019 0f80 	tst.w	r9, #128	; 0x80
  4065e0:	d003      	beq.n	4065ea <_lv_obj_get_style_color+0x5a>
        if(part != LV_OBJ_PART_MAIN) {
  4065e2:	2d00      	cmp	r5, #0
  4065e4:	d0e1      	beq.n	4065aa <_lv_obj_get_style_color+0x1a>
            part = LV_OBJ_PART_MAIN;
  4065e6:	2500      	movs	r5, #0
  4065e8:	e7e3      	b.n	4065b2 <_lv_obj_get_style_color+0x22>
    prop = prop & (~LV_STYLE_STATE_MASK);
  4065ea:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  4065ee:	3c29      	subs	r4, #41	; 0x29
  4065f0:	2c01      	cmp	r4, #1
  4065f2:	d904      	bls.n	4065fe <_lv_obj_get_style_color+0x6e>
    return LV_COLOR_BLACK;
  4065f4:	f04f 0000 	mov.w	r0, #0
}
  4065f8:	b003      	add	sp, #12
  4065fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return LV_COLOR_WHITE;
  4065fe:	4b05      	ldr	r3, [pc, #20]	; (406614 <_lv_obj_get_style_color+0x84>)
  406600:	8818      	ldrh	r0, [r3, #0]
  406602:	e7f9      	b.n	4065f8 <_lv_obj_get_style_color+0x68>
  406604:	004052ad 	.word	0x004052ad
  406608:	004054e1 	.word	0x004054e1
  40660c:	00406541 	.word	0x00406541
  406610:	0040a321 	.word	0x0040a321
  406614:	00421274 	.word	0x00421274

00406618 <_lv_obj_get_style_opa>:
{
  406618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40661c:	b083      	sub	sp, #12
  40661e:	4607      	mov	r7, r0
  406620:	460e      	mov	r6, r1
  406622:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406624:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406628:	4614      	mov	r4, r2
  40662a:	e023      	b.n	406674 <_lv_obj_get_style_opa+0x5c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  40662c:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406630:	4631      	mov	r1, r6
  406632:	4638      	mov	r0, r7
  406634:	4b37      	ldr	r3, [pc, #220]	; (406714 <_lv_obj_get_style_opa+0xfc>)
  406636:	4798      	blx	r3
  406638:	e02e      	b.n	406698 <_lv_obj_get_style_opa+0x80>
                    if(list->opa_scale_cover) def = true;
  40663a:	796b      	ldrb	r3, [r5, #5]
  40663c:	f013 0f20 	tst.w	r3, #32
  406640:	d147      	bne.n	4066d2 <_lv_obj_get_style_opa+0xba>
            bool def = false;
  406642:	2300      	movs	r3, #0
            if(def) {
  406644:	2b00      	cmp	r3, #0
  406646:	d152      	bne.n	4066ee <_lv_obj_get_style_opa+0xd6>
        lv_state_t state = lv_obj_get_state(parent, part);
  406648:	4631      	mov	r1, r6
  40664a:	4638      	mov	r0, r7
  40664c:	4b32      	ldr	r3, [pc, #200]	; (406718 <_lv_obj_get_style_opa+0x100>)
  40664e:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406650:	0204      	lsls	r4, r0, #8
  406652:	b2a4      	uxth	r4, r4
  406654:	4444      	add	r4, r8
  406656:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
  406658:	f10d 0207 	add.w	r2, sp, #7
  40665c:	4621      	mov	r1, r4
  40665e:	4628      	mov	r0, r5
  406660:	4b2e      	ldr	r3, [pc, #184]	; (40671c <_lv_obj_get_style_opa+0x104>)
  406662:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406664:	2801      	cmp	r0, #1
  406666:	d03a      	beq.n	4066de <_lv_obj_get_style_opa+0xc6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406668:	f019 0f80 	tst.w	r9, #128	; 0x80
  40666c:	d03f      	beq.n	4066ee <_lv_obj_get_style_opa+0xd6>
        if(part != LV_OBJ_PART_MAIN) {
  40666e:	2e00      	cmp	r6, #0
  406670:	d038      	beq.n	4066e4 <_lv_obj_get_style_opa+0xcc>
            part = LV_OBJ_PART_MAIN;
  406672:	2600      	movs	r6, #0
    while(parent) {
  406674:	2f00      	cmp	r7, #0
  406676:	d03a      	beq.n	4066ee <_lv_obj_get_style_opa+0xd6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406678:	4631      	mov	r1, r6
  40667a:	4638      	mov	r0, r7
  40667c:	4b28      	ldr	r3, [pc, #160]	; (406720 <_lv_obj_get_style_opa+0x108>)
  40667e:	4798      	blx	r3
  406680:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406682:	7943      	ldrb	r3, [r0, #5]
  406684:	f013 0f08 	tst.w	r3, #8
  406688:	d1de      	bne.n	406648 <_lv_obj_get_style_opa+0x30>
  40668a:	7902      	ldrb	r2, [r0, #4]
  40668c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406690:	d0da      	beq.n	406648 <_lv_obj_get_style_opa+0x30>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406692:	f013 0f04 	tst.w	r3, #4
  406696:	d0c9      	beq.n	40662c <_lv_obj_get_style_opa+0x14>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
  406698:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  40669c:	f248 020c 	movw	r2, #32780	; 0x800c
  4066a0:	4293      	cmp	r3, r2
  4066a2:	d0ca      	beq.n	40663a <_lv_obj_get_style_opa+0x22>
  4066a4:	f248 02ad 	movw	r2, #32941	; 0x80ad
  4066a8:	4293      	cmp	r3, r2
  4066aa:	d00c      	beq.n	4066c6 <_lv_obj_get_style_opa+0xae>
  4066ac:	2b2c      	cmp	r3, #44	; 0x2c
  4066ae:	d001      	beq.n	4066b4 <_lv_obj_get_style_opa+0x9c>
            bool def = false;
  4066b0:	2300      	movs	r3, #0
  4066b2:	e7c7      	b.n	406644 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  4066b4:	79ab      	ldrb	r3, [r5, #6]
  4066b6:	f013 0f10 	tst.w	r3, #16
  4066ba:	d127      	bne.n	40670c <_lv_obj_get_style_opa+0xf4>
                    if(list->bg_opa_transp) def = true;
  4066bc:	f013 0f08 	tst.w	r3, #8
  4066c0:	d109      	bne.n	4066d6 <_lv_obj_get_style_opa+0xbe>
            bool def = false;
  4066c2:	2300      	movs	r3, #0
  4066c4:	e7be      	b.n	406644 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  4066c6:	79eb      	ldrb	r3, [r5, #7]
  4066c8:	f013 0f10 	tst.w	r3, #16
  4066cc:	d105      	bne.n	4066da <_lv_obj_get_style_opa+0xc2>
            bool def = false;
  4066ce:	2300      	movs	r3, #0
  4066d0:	e7b8      	b.n	406644 <_lv_obj_get_style_opa+0x2c>
                    if(list->opa_scale_cover) def = true;
  4066d2:	2301      	movs	r3, #1
  4066d4:	e7b6      	b.n	406644 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_transp) def = true;
  4066d6:	2301      	movs	r3, #1
  4066d8:	e7b4      	b.n	406644 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  4066da:	2301      	movs	r3, #1
  4066dc:	e7b2      	b.n	406644 <_lv_obj_get_style_opa+0x2c>
        if(res == LV_RES_OK) return value_act;
  4066de:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4066e2:	e014      	b.n	40670e <_lv_obj_get_style_opa+0xf6>
        parent = lv_obj_get_parent(parent);
  4066e4:	4638      	mov	r0, r7
  4066e6:	4b0f      	ldr	r3, [pc, #60]	; (406724 <_lv_obj_get_style_opa+0x10c>)
  4066e8:	4798      	blx	r3
  4066ea:	4607      	mov	r7, r0
  4066ec:	e7c2      	b.n	406674 <_lv_obj_get_style_opa+0x5c>
    prop = prop & (~LV_STYLE_STATE_MASK);
  4066ee:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  4066f2:	b2a4      	uxth	r4, r4
    switch(prop) {
  4066f4:	2c6d      	cmp	r4, #109	; 0x6d
  4066f6:	d007      	beq.n	406708 <_lv_obj_get_style_opa+0xf0>
  4066f8:	f248 03ad 	movw	r3, #32941	; 0x80ad
  4066fc:	429c      	cmp	r4, r3
  4066fe:	d003      	beq.n	406708 <_lv_obj_get_style_opa+0xf0>
  406700:	2c2c      	cmp	r4, #44	; 0x2c
  406702:	d001      	beq.n	406708 <_lv_obj_get_style_opa+0xf0>
    return LV_OPA_COVER;
  406704:	20ff      	movs	r0, #255	; 0xff
  406706:	e002      	b.n	40670e <_lv_obj_get_style_opa+0xf6>
            return LV_OPA_TRANSP;
  406708:	2000      	movs	r0, #0
  40670a:	e000      	b.n	40670e <_lv_obj_get_style_opa+0xf6>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  40670c:	20ff      	movs	r0, #255	; 0xff
}
  40670e:	b003      	add	sp, #12
  406710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406714:	00406729 	.word	0x00406729
  406718:	00406541 	.word	0x00406541
  40671c:	0040a3f1 	.word	0x0040a3f1
  406720:	004054e1 	.word	0x004054e1
  406724:	004052ad 	.word	0x004052ad

00406728 <update_style_cache>:
{
  406728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40672c:	4605      	mov	r5, r0
  40672e:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
  406730:	4610      	mov	r0, r2
  406732:	4baf      	ldr	r3, [pc, #700]	; (4069f0 <update_style_cache+0x2c8>)
  406734:	4798      	blx	r3
  406736:	b908      	cbnz	r0, 40673c <update_style_cache+0x14>
  406738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40673c:	4631      	mov	r1, r6
  40673e:	4628      	mov	r0, r5
  406740:	4bac      	ldr	r3, [pc, #688]	; (4069f4 <update_style_cache+0x2cc>)
  406742:	4798      	blx	r3
  406744:	4604      	mov	r4, r0
    bool ignore_cache_ori = list->ignore_cache;
  406746:	7943      	ldrb	r3, [r0, #5]
  406748:	f3c3 08c0 	ubfx	r8, r3, #3, #1
    list->ignore_cache = 1;
  40674c:	f043 0308 	orr.w	r3, r3, #8
  406750:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  406752:	f248 020c 	movw	r2, #32780	; 0x800c
  406756:	4631      	mov	r1, r6
  406758:	4628      	mov	r0, r5
  40675a:	4ba7      	ldr	r3, [pc, #668]	; (4069f8 <update_style_cache+0x2d0>)
  40675c:	4798      	blx	r3
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  40675e:	28ff      	cmp	r0, #255	; 0xff
  406760:	bf14      	ite	ne
  406762:	2000      	movne	r0, #0
  406764:	2001      	moveq	r0, #1
  406766:	7963      	ldrb	r3, [r4, #5]
  406768:	f360 1345 	bfi	r3, r0, #5, #1
  40676c:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  40676e:	f248 0282 	movw	r2, #32898	; 0x8082
  406772:	4631      	mov	r1, r6
  406774:	4628      	mov	r0, r5
  406776:	4fa1      	ldr	r7, [pc, #644]	; (4069fc <update_style_cache+0x2d4>)
  406778:	47b8      	blx	r7
  40677a:	b2c0      	uxtb	r0, r0
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  40677c:	fab0 f080 	clz	r0, r0
  406780:	0940      	lsrs	r0, r0, #5
  406782:	79e3      	ldrb	r3, [r4, #7]
  406784:	f360 1386 	bfi	r3, r0, #6, #1
  406788:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  40678a:	f248 028e 	movw	r2, #32910	; 0x808e
  40678e:	4631      	mov	r1, r6
  406790:	4628      	mov	r0, r5
  406792:	4b9b      	ldr	r3, [pc, #620]	; (406a00 <update_style_cache+0x2d8>)
  406794:	4798      	blx	r3
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
  406796:	4b9b      	ldr	r3, [pc, #620]	; (406a04 <update_style_cache+0x2dc>)
  406798:	4283      	cmp	r3, r0
  40679a:	bf14      	ite	ne
  40679c:	2000      	movne	r0, #0
  40679e:	2001      	moveq	r0, #1
  4067a0:	79e3      	ldrb	r3, [r4, #7]
  4067a2:	f360 13c7 	bfi	r3, r0, #7, #1
    list->text_space_zero = 1;
  4067a6:	b2db      	uxtb	r3, r3
  4067a8:	f043 0320 	orr.w	r3, r3, #32
  4067ac:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  4067ae:	f248 0280 	movw	r2, #32896	; 0x8080
  4067b2:	4631      	mov	r1, r6
  4067b4:	4628      	mov	r0, r5
  4067b6:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  4067b8:	2800      	cmp	r0, #0
  4067ba:	f000 80cf 	beq.w	40695c <update_style_cache+0x234>
        list->text_space_zero = 0;
  4067be:	79e3      	ldrb	r3, [r4, #7]
  4067c0:	f36f 1345 	bfc	r3, #5, #1
  4067c4:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4067c6:	222c      	movs	r2, #44	; 0x2c
  4067c8:	4631      	mov	r1, r6
  4067ca:	4628      	mov	r0, r5
  4067cc:	f8df 9228 	ldr.w	r9, [pc, #552]	; 4069f8 <update_style_cache+0x2d0>
  4067d0:	47c8      	blx	r9
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
  4067d2:	fab0 f280 	clz	r2, r0
  4067d6:	0952      	lsrs	r2, r2, #5
  4067d8:	79a3      	ldrb	r3, [r4, #6]
  4067da:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
  4067de:	28ff      	cmp	r0, #255	; 0xff
  4067e0:	bf14      	ite	ne
  4067e2:	2000      	movne	r0, #0
  4067e4:	2001      	moveq	r0, #1
  4067e6:	f360 1304 	bfi	r3, r0, #4, #1
  4067ea:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  4067ec:	2230      	movs	r2, #48	; 0x30
  4067ee:	4631      	mov	r1, r6
  4067f0:	4628      	mov	r0, r5
  4067f2:	4f82      	ldr	r7, [pc, #520]	; (4069fc <update_style_cache+0x2d4>)
  4067f4:	47b8      	blx	r7
    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
  4067f6:	fab0 f080 	clz	r0, r0
  4067fa:	0940      	lsrs	r0, r0, #5
  4067fc:	79a3      	ldrb	r3, [r4, #6]
  4067fe:	f360 1345 	bfi	r3, r0, #5, #1
  406802:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  406804:	2231      	movs	r2, #49	; 0x31
  406806:	4631      	mov	r1, r6
  406808:	4628      	mov	r0, r5
  40680a:	47b8      	blx	r7
  40680c:	b2c0      	uxtb	r0, r0
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
  40680e:	280f      	cmp	r0, #15
  406810:	bf14      	ite	ne
  406812:	2000      	movne	r0, #0
  406814:	2001      	moveq	r0, #1
  406816:	79a3      	ldrb	r3, [r4, #6]
  406818:	f360 1386 	bfi	r3, r0, #6, #1
  40681c:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  40681e:	2233      	movs	r2, #51	; 0x33
  406820:	4631      	mov	r1, r6
  406822:	4628      	mov	r0, r5
  406824:	47b8      	blx	r7
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
  406826:	fab0 f080 	clz	r0, r0
  40682a:	0940      	lsrs	r0, r0, #5
  40682c:	79a3      	ldrb	r3, [r4, #6]
  40682e:	f360 13c7 	bfi	r3, r0, #7, #1
  406832:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  406834:	2202      	movs	r2, #2
  406836:	4631      	mov	r1, r6
  406838:	4628      	mov	r0, r5
  40683a:	47b8      	blx	r7
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
  40683c:	fab0 f080 	clz	r0, r0
  406840:	0940      	lsrs	r0, r0, #5
  406842:	7963      	ldrb	r3, [r4, #5]
  406844:	f360 1386 	bfi	r3, r0, #6, #1
  406848:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  40684a:	f248 02ad 	movw	r2, #32941	; 0x80ad
  40684e:	4631      	mov	r1, r6
  406850:	4628      	mov	r0, r5
  406852:	47c8      	blx	r9
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  406854:	fab0 f080 	clz	r0, r0
  406858:	0940      	lsrs	r0, r0, #5
  40685a:	79e3      	ldrb	r3, [r4, #7]
  40685c:	f360 1304 	bfi	r3, r0, #4, #1
  406860:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  406862:	2240      	movs	r2, #64	; 0x40
  406864:	4631      	mov	r1, r6
  406866:	4628      	mov	r0, r5
  406868:	47b8      	blx	r7
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
  40686a:	fab0 f080 	clz	r0, r0
  40686e:	0940      	lsrs	r0, r0, #5
  406870:	79e3      	ldrb	r3, [r4, #7]
  406872:	f360 0300 	bfi	r3, r0, #0, #1
  406876:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  406878:	226e      	movs	r2, #110	; 0x6e
  40687a:	4631      	mov	r1, r6
  40687c:	4628      	mov	r0, r5
  40687e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 406a00 <update_style_cache+0x2d8>
  406882:	47c8      	blx	r9
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
  406884:	fab0 f080 	clz	r0, r0
  406888:	0940      	lsrs	r0, r0, #5
  40688a:	79e3      	ldrb	r3, [r4, #7]
  40688c:	f360 0341 	bfi	r3, r0, #1, #1
  406890:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  406892:	2201      	movs	r2, #1
  406894:	4631      	mov	r1, r6
  406896:	4628      	mov	r0, r5
  406898:	47b8      	blx	r7
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
  40689a:	fab0 f080 	clz	r0, r0
  40689e:	0940      	lsrs	r0, r0, #5
  4068a0:	7963      	ldrb	r3, [r4, #5]
  4068a2:	f360 1304 	bfi	r3, r0, #4, #1
  4068a6:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4068a8:	2250      	movs	r2, #80	; 0x50
  4068aa:	4631      	mov	r1, r6
  4068ac:	4628      	mov	r0, r5
  4068ae:	47b8      	blx	r7
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
  4068b0:	fab0 f080 	clz	r0, r0
  4068b4:	0940      	lsrs	r0, r0, #5
  4068b6:	79e3      	ldrb	r3, [r4, #7]
  4068b8:	f360 0382 	bfi	r3, r0, #2, #1
  4068bc:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  4068be:	227f      	movs	r2, #127	; 0x7f
  4068c0:	4631      	mov	r1, r6
  4068c2:	4628      	mov	r0, r5
  4068c4:	47c8      	blx	r9
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
  4068c6:	fab0 f080 	clz	r0, r0
  4068ca:	0940      	lsrs	r0, r0, #5
  4068cc:	79e3      	ldrb	r3, [r4, #7]
  4068ce:	f360 03c3 	bfi	r3, r0, #3, #1
  4068d2:	71e3      	strb	r3, [r4, #7]
    list->transform_all_zero  = 1;
  4068d4:	7963      	ldrb	r3, [r4, #5]
  4068d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4068da:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  4068dc:	2206      	movs	r2, #6
  4068de:	4631      	mov	r1, r6
  4068e0:	4628      	mov	r0, r5
  4068e2:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  4068e4:	2800      	cmp	r0, #0
  4068e6:	d042      	beq.n	40696e <update_style_cache+0x246>
        list->transform_all_zero  = 0;
  4068e8:	7963      	ldrb	r3, [r4, #5]
  4068ea:	f36f 13c7 	bfc	r3, #7, #1
  4068ee:	7163      	strb	r3, [r4, #5]
    list->pad_all_zero  = 1;
  4068f0:	79a3      	ldrb	r3, [r4, #6]
  4068f2:	f043 0301 	orr.w	r3, r3, #1
  4068f6:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4068f8:	2210      	movs	r2, #16
  4068fa:	4631      	mov	r1, r6
  4068fc:	4628      	mov	r0, r5
  4068fe:	4b3f      	ldr	r3, [pc, #252]	; (4069fc <update_style_cache+0x2d4>)
  406900:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  406902:	2800      	cmp	r0, #0
  406904:	d047      	beq.n	406996 <update_style_cache+0x26e>
        list->pad_all_zero  = 0;
  406906:	79a3      	ldrb	r3, [r4, #6]
  406908:	f36f 0300 	bfc	r3, #0, #1
  40690c:	71a3      	strb	r3, [r4, #6]
    list->margin_all_zero  = 1;
  40690e:	79a3      	ldrb	r3, [r4, #6]
  406910:	f043 0302 	orr.w	r3, r3, #2
  406914:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  406916:	2215      	movs	r2, #21
  406918:	4631      	mov	r1, r6
  40691a:	4628      	mov	r0, r5
  40691c:	4b37      	ldr	r3, [pc, #220]	; (4069fc <update_style_cache+0x2d4>)
  40691e:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  406920:	2800      	cmp	r0, #0
  406922:	d04e      	beq.n	4069c2 <update_style_cache+0x29a>
        list->margin_all_zero  = 0;
  406924:	79a3      	ldrb	r3, [r4, #6]
  406926:	f36f 0341 	bfc	r3, #1, #1
  40692a:	71a3      	strb	r3, [r4, #6]
    list->blend_mode_all_normal = 1;
  40692c:	79a3      	ldrb	r3, [r4, #6]
  40692e:	f043 0304 	orr.w	r3, r3, #4
  406932:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  406934:	2220      	movs	r2, #32
  406936:	4631      	mov	r1, r6
  406938:	4628      	mov	r0, r5
  40693a:	4b30      	ldr	r3, [pc, #192]	; (4069fc <update_style_cache+0x2d4>)
  40693c:	4798      	blx	r3
  40693e:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406940:	2800      	cmp	r0, #0
  406942:	d061      	beq.n	406a08 <update_style_cache+0x2e0>
        list->blend_mode_all_normal = 0;
  406944:	79a3      	ldrb	r3, [r4, #6]
  406946:	f36f 0382 	bfc	r3, #2, #1
  40694a:	71a3      	strb	r3, [r4, #6]
    list->ignore_cache = ignore_cache_ori;
  40694c:	7963      	ldrb	r3, [r4, #5]
  40694e:	f368 03c3 	bfi	r3, r8, #3, #1
    list->valid_cache = 1;
  406952:	b2db      	uxtb	r3, r3
  406954:	f043 0304 	orr.w	r3, r3, #4
  406958:	7163      	strb	r3, [r4, #5]
  40695a:	e6ed      	b.n	406738 <update_style_cache+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  40695c:	f248 0281 	movw	r2, #32897	; 0x8081
  406960:	4631      	mov	r1, r6
  406962:	4628      	mov	r0, r5
  406964:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  406966:	2800      	cmp	r0, #0
  406968:	f43f af2d 	beq.w	4067c6 <update_style_cache+0x9e>
  40696c:	e727      	b.n	4067be <update_style_cache+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40696e:	2204      	movs	r2, #4
  406970:	4631      	mov	r1, r6
  406972:	4628      	mov	r0, r5
  406974:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  406976:	2800      	cmp	r0, #0
  406978:	d1b6      	bne.n	4068e8 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40697a:	2205      	movs	r2, #5
  40697c:	4631      	mov	r1, r6
  40697e:	4628      	mov	r0, r5
  406980:	47b8      	blx	r7
       lv_obj_get_style_transform_width(obj, part) != 0 ||
  406982:	2800      	cmp	r0, #0
  406984:	d1b0      	bne.n	4068e8 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  406986:	2207      	movs	r2, #7
  406988:	4631      	mov	r1, r6
  40698a:	4628      	mov	r0, r5
  40698c:	47b8      	blx	r7
       lv_obj_get_style_transform_height(obj, part) != 0 ||
  40698e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  406992:	d1a9      	bne.n	4068e8 <update_style_cache+0x1c0>
  406994:	e7ac      	b.n	4068f0 <update_style_cache+0x1c8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  406996:	2211      	movs	r2, #17
  406998:	4631      	mov	r1, r6
  40699a:	4628      	mov	r0, r5
  40699c:	4b17      	ldr	r3, [pc, #92]	; (4069fc <update_style_cache+0x2d4>)
  40699e:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  4069a0:	2800      	cmp	r0, #0
  4069a2:	d1b0      	bne.n	406906 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4069a4:	2212      	movs	r2, #18
  4069a6:	4631      	mov	r1, r6
  4069a8:	4628      	mov	r0, r5
  4069aa:	4b14      	ldr	r3, [pc, #80]	; (4069fc <update_style_cache+0x2d4>)
  4069ac:	4798      	blx	r3
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
  4069ae:	2800      	cmp	r0, #0
  4069b0:	d1a9      	bne.n	406906 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4069b2:	2213      	movs	r2, #19
  4069b4:	4631      	mov	r1, r6
  4069b6:	4628      	mov	r0, r5
  4069b8:	4b10      	ldr	r3, [pc, #64]	; (4069fc <update_style_cache+0x2d4>)
  4069ba:	4798      	blx	r3
       lv_obj_get_style_pad_left(obj, part) != 0 ||
  4069bc:	2800      	cmp	r0, #0
  4069be:	d0a6      	beq.n	40690e <update_style_cache+0x1e6>
  4069c0:	e7a1      	b.n	406906 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4069c2:	2216      	movs	r2, #22
  4069c4:	4631      	mov	r1, r6
  4069c6:	4628      	mov	r0, r5
  4069c8:	4b0c      	ldr	r3, [pc, #48]	; (4069fc <update_style_cache+0x2d4>)
  4069ca:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  4069cc:	2800      	cmp	r0, #0
  4069ce:	d1a9      	bne.n	406924 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  4069d0:	2217      	movs	r2, #23
  4069d2:	4631      	mov	r1, r6
  4069d4:	4628      	mov	r0, r5
  4069d6:	4b09      	ldr	r3, [pc, #36]	; (4069fc <update_style_cache+0x2d4>)
  4069d8:	4798      	blx	r3
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
  4069da:	2800      	cmp	r0, #0
  4069dc:	d1a2      	bne.n	406924 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  4069de:	2218      	movs	r2, #24
  4069e0:	4631      	mov	r1, r6
  4069e2:	4628      	mov	r0, r5
  4069e4:	4b05      	ldr	r3, [pc, #20]	; (4069fc <update_style_cache+0x2d4>)
  4069e6:	4798      	blx	r3
       lv_obj_get_style_margin_left(obj, part) != 0 ||
  4069e8:	2800      	cmp	r0, #0
  4069ea:	d09f      	beq.n	40692c <update_style_cache+0x204>
  4069ec:	e79a      	b.n	406924 <update_style_cache+0x1fc>
  4069ee:	bf00      	nop
  4069f0:	00404e09 	.word	0x00404e09
  4069f4:	004054e1 	.word	0x004054e1
  4069f8:	00406619 	.word	0x00406619
  4069fc:	00406ba5 	.word	0x00406ba5
  406a00:	00406a9d 	.word	0x00406a9d
  406a04:	2040002c 	.word	0x2040002c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  406a08:	2232      	movs	r2, #50	; 0x32
  406a0a:	4631      	mov	r1, r6
  406a0c:	4628      	mov	r0, r5
  406a0e:	4b22      	ldr	r3, [pc, #136]	; (406a98 <update_style_cache+0x370>)
  406a10:	4798      	blx	r3
  406a12:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406a14:	2800      	cmp	r0, #0
  406a16:	d195      	bne.n	406944 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  406a18:	2260      	movs	r2, #96	; 0x60
  406a1a:	4631      	mov	r1, r6
  406a1c:	4628      	mov	r0, r5
  406a1e:	4b1e      	ldr	r3, [pc, #120]	; (406a98 <update_style_cache+0x370>)
  406a20:	4798      	blx	r3
  406a22:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406a24:	2800      	cmp	r0, #0
  406a26:	d18d      	bne.n	406944 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  406a28:	2242      	movs	r2, #66	; 0x42
  406a2a:	4631      	mov	r1, r6
  406a2c:	4628      	mov	r0, r5
  406a2e:	4b1a      	ldr	r3, [pc, #104]	; (406a98 <update_style_cache+0x370>)
  406a30:	4798      	blx	r3
  406a32:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406a34:	2800      	cmp	r0, #0
  406a36:	d185      	bne.n	406944 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  406a38:	2272      	movs	r2, #114	; 0x72
  406a3a:	4631      	mov	r1, r6
  406a3c:	4628      	mov	r0, r5
  406a3e:	4b16      	ldr	r3, [pc, #88]	; (406a98 <update_style_cache+0x370>)
  406a40:	4798      	blx	r3
  406a42:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406a44:	2800      	cmp	r0, #0
  406a46:	f47f af7d 	bne.w	406944 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  406a4a:	f248 0283 	movw	r2, #32899	; 0x8083
  406a4e:	4631      	mov	r1, r6
  406a50:	4628      	mov	r0, r5
  406a52:	4b11      	ldr	r3, [pc, #68]	; (406a98 <update_style_cache+0x370>)
  406a54:	4798      	blx	r3
  406a56:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406a58:	2800      	cmp	r0, #0
  406a5a:	f47f af73 	bne.w	406944 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  406a5e:	2291      	movs	r2, #145	; 0x91
  406a60:	4631      	mov	r1, r6
  406a62:	4628      	mov	r0, r5
  406a64:	4b0c      	ldr	r3, [pc, #48]	; (406a98 <update_style_cache+0x370>)
  406a66:	4798      	blx	r3
  406a68:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406a6a:	2800      	cmp	r0, #0
  406a6c:	f47f af6a 	bne.w	406944 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  406a70:	f248 02a0 	movw	r2, #32928	; 0x80a0
  406a74:	4631      	mov	r1, r6
  406a76:	4628      	mov	r0, r5
  406a78:	4b07      	ldr	r3, [pc, #28]	; (406a98 <update_style_cache+0x370>)
  406a7a:	4798      	blx	r3
  406a7c:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406a7e:	2800      	cmp	r0, #0
  406a80:	f47f af60 	bne.w	406944 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  406a84:	2254      	movs	r2, #84	; 0x54
  406a86:	4631      	mov	r1, r6
  406a88:	4628      	mov	r0, r5
  406a8a:	4b03      	ldr	r3, [pc, #12]	; (406a98 <update_style_cache+0x370>)
  406a8c:	4798      	blx	r3
  406a8e:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406a90:	2800      	cmp	r0, #0
  406a92:	f43f af5b 	beq.w	40694c <update_style_cache+0x224>
  406a96:	e755      	b.n	406944 <update_style_cache+0x21c>
  406a98:	00406ba5 	.word	0x00406ba5

00406a9c <_lv_obj_get_style_ptr>:
{
  406a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406aa0:	b083      	sub	sp, #12
  406aa2:	4607      	mov	r7, r0
  406aa4:	460e      	mov	r6, r1
  406aa6:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406aa8:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406aac:	4614      	mov	r4, r2
  406aae:	e02d      	b.n	406b0c <_lv_obj_get_style_ptr+0x70>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406ab0:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406ab4:	4631      	mov	r1, r6
  406ab6:	4638      	mov	r0, r7
  406ab8:	4b33      	ldr	r3, [pc, #204]	; (406b88 <_lv_obj_get_style_ptr+0xec>)
  406aba:	4798      	blx	r3
  406abc:	e037      	b.n	406b2e <_lv_obj_get_style_ptr+0x92>
                    if(list->value_txt_str) def = true;
  406abe:	79eb      	ldrb	r3, [r5, #7]
  406ac0:	f013 0f08 	tst.w	r3, #8
  406ac4:	d13f      	bne.n	406b46 <_lv_obj_get_style_ptr+0xaa>
            bool def = false;
  406ac6:	2300      	movs	r3, #0
  406ac8:	e00a      	b.n	406ae0 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  406aca:	79eb      	ldrb	r3, [r5, #7]
  406acc:	f013 0f02 	tst.w	r3, #2
  406ad0:	d13b      	bne.n	406b4a <_lv_obj_get_style_ptr+0xae>
            bool def = false;
  406ad2:	2300      	movs	r3, #0
  406ad4:	e004      	b.n	406ae0 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  406ad6:	f995 3007 	ldrsb.w	r3, [r5, #7]
  406ada:	2b00      	cmp	r3, #0
  406adc:	db37      	blt.n	406b4e <_lv_obj_get_style_ptr+0xb2>
            bool def = false;
  406ade:	2300      	movs	r3, #0
            if(def) {
  406ae0:	2b00      	cmp	r3, #0
  406ae2:	d13f      	bne.n	406b64 <_lv_obj_get_style_ptr+0xc8>
        lv_state_t state = lv_obj_get_state(parent, part);
  406ae4:	4631      	mov	r1, r6
  406ae6:	4638      	mov	r0, r7
  406ae8:	4b28      	ldr	r3, [pc, #160]	; (406b8c <_lv_obj_get_style_ptr+0xf0>)
  406aea:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406aec:	0204      	lsls	r4, r0, #8
  406aee:	b2a4      	uxth	r4, r4
  406af0:	4444      	add	r4, r8
  406af2:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
  406af4:	aa01      	add	r2, sp, #4
  406af6:	4621      	mov	r1, r4
  406af8:	4628      	mov	r0, r5
  406afa:	4b25      	ldr	r3, [pc, #148]	; (406b90 <_lv_obj_get_style_ptr+0xf4>)
  406afc:	4798      	blx	r3
        if(res == LV_RES_OK)  return value_act;
  406afe:	2801      	cmp	r0, #1
  406b00:	d027      	beq.n	406b52 <_lv_obj_get_style_ptr+0xb6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406b02:	f019 0f80 	tst.w	r9, #128	; 0x80
  406b06:	d02d      	beq.n	406b64 <_lv_obj_get_style_ptr+0xc8>
        if(part != LV_OBJ_PART_MAIN) {
  406b08:	b33e      	cbz	r6, 406b5a <_lv_obj_get_style_ptr+0xbe>
            part = LV_OBJ_PART_MAIN;
  406b0a:	2600      	movs	r6, #0
    while(parent) {
  406b0c:	b357      	cbz	r7, 406b64 <_lv_obj_get_style_ptr+0xc8>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406b0e:	4631      	mov	r1, r6
  406b10:	4638      	mov	r0, r7
  406b12:	4b20      	ldr	r3, [pc, #128]	; (406b94 <_lv_obj_get_style_ptr+0xf8>)
  406b14:	4798      	blx	r3
  406b16:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406b18:	7943      	ldrb	r3, [r0, #5]
  406b1a:	f013 0f08 	tst.w	r3, #8
  406b1e:	d1e1      	bne.n	406ae4 <_lv_obj_get_style_ptr+0x48>
  406b20:	7902      	ldrb	r2, [r0, #4]
  406b22:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406b26:	d0dd      	beq.n	406ae4 <_lv_obj_get_style_ptr+0x48>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406b28:	f013 0f04 	tst.w	r3, #4
  406b2c:	d0c0      	beq.n	406ab0 <_lv_obj_get_style_ptr+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406b2e:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406b32:	2b7f      	cmp	r3, #127	; 0x7f
  406b34:	d0c3      	beq.n	406abe <_lv_obj_get_style_ptr+0x22>
  406b36:	f248 028e 	movw	r2, #32910	; 0x808e
  406b3a:	4293      	cmp	r3, r2
  406b3c:	d0cb      	beq.n	406ad6 <_lv_obj_get_style_ptr+0x3a>
  406b3e:	2b6e      	cmp	r3, #110	; 0x6e
  406b40:	d0c3      	beq.n	406aca <_lv_obj_get_style_ptr+0x2e>
            bool def = false;
  406b42:	2300      	movs	r3, #0
  406b44:	e7cc      	b.n	406ae0 <_lv_obj_get_style_ptr+0x44>
                    if(list->value_txt_str) def = true;
  406b46:	2301      	movs	r3, #1
  406b48:	e7ca      	b.n	406ae0 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  406b4a:	2301      	movs	r3, #1
  406b4c:	e7c8      	b.n	406ae0 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  406b4e:	2301      	movs	r3, #1
  406b50:	e7c6      	b.n	406ae0 <_lv_obj_get_style_ptr+0x44>
        if(res == LV_RES_OK)  return value_act;
  406b52:	9801      	ldr	r0, [sp, #4]
}
  406b54:	b003      	add	sp, #12
  406b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  406b5a:	4638      	mov	r0, r7
  406b5c:	4b0e      	ldr	r3, [pc, #56]	; (406b98 <_lv_obj_get_style_ptr+0xfc>)
  406b5e:	4798      	blx	r3
  406b60:	4607      	mov	r7, r0
  406b62:	e7d3      	b.n	406b0c <_lv_obj_get_style_ptr+0x70>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406b64:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406b68:	b2a4      	uxth	r4, r4
    switch(prop) {
  406b6a:	2cbe      	cmp	r4, #190	; 0xbe
  406b6c:	d007      	beq.n	406b7e <_lv_obj_get_style_ptr+0xe2>
  406b6e:	f248 038e 	movw	r3, #32910	; 0x808e
  406b72:	429c      	cmp	r4, r3
  406b74:	d005      	beq.n	406b82 <_lv_obj_get_style_ptr+0xe6>
  406b76:	2c7e      	cmp	r4, #126	; 0x7e
  406b78:	d003      	beq.n	406b82 <_lv_obj_get_style_ptr+0xe6>
    return NULL;
  406b7a:	2000      	movs	r0, #0
  406b7c:	e7ea      	b.n	406b54 <_lv_obj_get_style_ptr+0xb8>
            return &lv_anim_path_def;
  406b7e:	4807      	ldr	r0, [pc, #28]	; (406b9c <_lv_obj_get_style_ptr+0x100>)
  406b80:	e7e8      	b.n	406b54 <_lv_obj_get_style_ptr+0xb8>
            return lv_theme_get_font_normal();
  406b82:	4b07      	ldr	r3, [pc, #28]	; (406ba0 <_lv_obj_get_style_ptr+0x104>)
  406b84:	4798      	blx	r3
  406b86:	e7e5      	b.n	406b54 <_lv_obj_get_style_ptr+0xb8>
  406b88:	00406729 	.word	0x00406729
  406b8c:	00406541 	.word	0x00406541
  406b90:	0040a4c5 	.word	0x0040a4c5
  406b94:	004054e1 	.word	0x004054e1
  406b98:	004052ad 	.word	0x004052ad
  406b9c:	00424818 	.word	0x00424818
  406ba0:	00416a19 	.word	0x00416a19

00406ba4 <_lv_obj_get_style_int>:
{
  406ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406ba8:	b083      	sub	sp, #12
  406baa:	4607      	mov	r7, r0
  406bac:	460e      	mov	r6, r1
  406bae:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406bb0:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406bb4:	4614      	mov	r4, r2
  406bb6:	e078      	b.n	406caa <_lv_obj_get_style_int+0x106>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406bb8:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406bbc:	4631      	mov	r1, r6
  406bbe:	4638      	mov	r0, r7
  406bc0:	4b82      	ldr	r3, [pc, #520]	; (406dcc <_lv_obj_get_style_int+0x228>)
  406bc2:	4798      	blx	r3
  406bc4:	e084      	b.n	406cd0 <_lv_obj_get_style_int+0x12c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406bc6:	3b04      	subs	r3, #4
  406bc8:	2b03      	cmp	r3, #3
  406bca:	d854      	bhi.n	406c76 <_lv_obj_get_style_int+0xd2>
                    if(list->transform_all_zero) def = true;
  406bcc:	f995 3005 	ldrsb.w	r3, [r5, #5]
  406bd0:	2b00      	cmp	r3, #0
  406bd2:	f2c0 80c0 	blt.w	406d56 <_lv_obj_get_style_int+0x1b2>
            bool def = false;
  406bd6:	2300      	movs	r3, #0
  406bd8:	e04e      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406bda:	2b20      	cmp	r3, #32
  406bdc:	d029      	beq.n	406c32 <_lv_obj_get_style_int+0x8e>
  406bde:	dd0c      	ble.n	406bfa <_lv_obj_get_style_int+0x56>
  406be0:	2b31      	cmp	r3, #49	; 0x31
  406be2:	f000 809c 	beq.w	406d1e <_lv_obj_get_style_int+0x17a>
  406be6:	dc24      	bgt.n	406c32 <_lv_obj_get_style_int+0x8e>
  406be8:	2b30      	cmp	r3, #48	; 0x30
  406bea:	d144      	bne.n	406c76 <_lv_obj_get_style_int+0xd2>
                    if(list->border_width_zero) def = true;
  406bec:	79ab      	ldrb	r3, [r5, #6]
  406bee:	f013 0f20 	tst.w	r3, #32
  406bf2:	f040 80b2 	bne.w	406d5a <_lv_obj_get_style_int+0x1b6>
            bool def = false;
  406bf6:	2300      	movs	r3, #0
  406bf8:	e03e      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406bfa:	3b15      	subs	r3, #21
  406bfc:	2b03      	cmp	r3, #3
  406bfe:	d83a      	bhi.n	406c76 <_lv_obj_get_style_int+0xd2>
                    if(list->margin_all_zero) def = true;
  406c00:	79ab      	ldrb	r3, [r5, #6]
  406c02:	f013 0f02 	tst.w	r3, #2
  406c06:	f040 80b6 	bne.w	406d76 <_lv_obj_get_style_int+0x1d2>
            bool def = false;
  406c0a:	2300      	movs	r3, #0
  406c0c:	e034      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406c0e:	2b72      	cmp	r3, #114	; 0x72
  406c10:	d00f      	beq.n	406c32 <_lv_obj_get_style_int+0x8e>
  406c12:	dc1a      	bgt.n	406c4a <_lv_obj_get_style_int+0xa6>
  406c14:	2b50      	cmp	r3, #80	; 0x50
  406c16:	f000 808e 	beq.w	406d36 <_lv_obj_get_style_int+0x192>
  406c1a:	dc11      	bgt.n	406c40 <_lv_obj_get_style_int+0x9c>
  406c1c:	2b40      	cmp	r3, #64	; 0x40
  406c1e:	d106      	bne.n	406c2e <_lv_obj_get_style_int+0x8a>
                    if(list->outline_width_zero) def = true;
  406c20:	79eb      	ldrb	r3, [r5, #7]
  406c22:	f013 0f01 	tst.w	r3, #1
  406c26:	f040 809e 	bne.w	406d66 <_lv_obj_get_style_int+0x1c2>
            bool def = false;
  406c2a:	2300      	movs	r3, #0
  406c2c:	e024      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406c2e:	2b42      	cmp	r3, #66	; 0x42
  406c30:	d121      	bne.n	406c76 <_lv_obj_get_style_int+0xd2>
                    if(list->blend_mode_all_normal) def = true;
  406c32:	79ab      	ldrb	r3, [r5, #6]
  406c34:	f013 0f04 	tst.w	r3, #4
  406c38:	f040 809f 	bne.w	406d7a <_lv_obj_get_style_int+0x1d6>
            bool def = false;
  406c3c:	2300      	movs	r3, #0
  406c3e:	e01b      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406c40:	2b54      	cmp	r3, #84	; 0x54
  406c42:	d0f6      	beq.n	406c32 <_lv_obj_get_style_int+0x8e>
  406c44:	2b60      	cmp	r3, #96	; 0x60
  406c46:	d116      	bne.n	406c76 <_lv_obj_get_style_int+0xd2>
  406c48:	e7f3      	b.n	406c32 <_lv_obj_get_style_int+0x8e>
  406c4a:	f248 0281 	movw	r2, #32897	; 0x8081
  406c4e:	4293      	cmp	r3, r2
  406c50:	dd0b      	ble.n	406c6a <_lv_obj_get_style_int+0xc6>
  406c52:	f248 0283 	movw	r2, #32899	; 0x8083
  406c56:	4293      	cmp	r3, r2
  406c58:	d0eb      	beq.n	406c32 <_lv_obj_get_style_int+0x8e>
  406c5a:	da4f      	bge.n	406cfc <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
  406c5c:	79eb      	ldrb	r3, [r5, #7]
  406c5e:	f013 0f40 	tst.w	r3, #64	; 0x40
  406c62:	f040 808c 	bne.w	406d7e <_lv_obj_get_style_int+0x1da>
            bool def = false;
  406c66:	2300      	movs	r3, #0
  406c68:	e006      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406c6a:	f248 0280 	movw	r2, #32896	; 0x8080
  406c6e:	4293      	cmp	r3, r2
  406c70:	da4f      	bge.n	406d12 <_lv_obj_get_style_int+0x16e>
  406c72:	2b91      	cmp	r3, #145	; 0x91
  406c74:	d0dd      	beq.n	406c32 <_lv_obj_get_style_int+0x8e>
            bool def = false;
  406c76:	2300      	movs	r3, #0
            if(def) {
  406c78:	2b00      	cmp	r3, #0
  406c7a:	f040 808c 	bne.w	406d96 <_lv_obj_get_style_int+0x1f2>
        lv_state_t state = lv_obj_get_state(parent, part);
  406c7e:	4631      	mov	r1, r6
  406c80:	4638      	mov	r0, r7
  406c82:	4b53      	ldr	r3, [pc, #332]	; (406dd0 <_lv_obj_get_style_int+0x22c>)
  406c84:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406c86:	0204      	lsls	r4, r0, #8
  406c88:	b2a4      	uxth	r4, r4
  406c8a:	4444      	add	r4, r8
  406c8c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_int(list, prop, &value_act);
  406c8e:	f10d 0206 	add.w	r2, sp, #6
  406c92:	4621      	mov	r1, r4
  406c94:	4628      	mov	r0, r5
  406c96:	4b4f      	ldr	r3, [pc, #316]	; (406dd4 <_lv_obj_get_style_int+0x230>)
  406c98:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406c9a:	2801      	cmp	r0, #1
  406c9c:	d071      	beq.n	406d82 <_lv_obj_get_style_int+0x1de>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406c9e:	f019 0f80 	tst.w	r9, #128	; 0x80
  406ca2:	d078      	beq.n	406d96 <_lv_obj_get_style_int+0x1f2>
        if(part != LV_OBJ_PART_MAIN) {
  406ca4:	2e00      	cmp	r6, #0
  406ca6:	d071      	beq.n	406d8c <_lv_obj_get_style_int+0x1e8>
            part = LV_OBJ_PART_MAIN;
  406ca8:	2600      	movs	r6, #0
    while(parent) {
  406caa:	2f00      	cmp	r7, #0
  406cac:	d073      	beq.n	406d96 <_lv_obj_get_style_int+0x1f2>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406cae:	4631      	mov	r1, r6
  406cb0:	4638      	mov	r0, r7
  406cb2:	4b49      	ldr	r3, [pc, #292]	; (406dd8 <_lv_obj_get_style_int+0x234>)
  406cb4:	4798      	blx	r3
  406cb6:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406cb8:	7943      	ldrb	r3, [r0, #5]
  406cba:	f013 0f08 	tst.w	r3, #8
  406cbe:	d1de      	bne.n	406c7e <_lv_obj_get_style_int+0xda>
  406cc0:	7902      	ldrb	r2, [r0, #4]
  406cc2:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406cc6:	d0da      	beq.n	406c7e <_lv_obj_get_style_int+0xda>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406cc8:	f013 0f04 	tst.w	r3, #4
  406ccc:	f43f af74 	beq.w	406bb8 <_lv_obj_get_style_int+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406cd0:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406cd4:	2b33      	cmp	r3, #51	; 0x33
  406cd6:	d028      	beq.n	406d2a <_lv_obj_get_style_int+0x186>
  406cd8:	dc99      	bgt.n	406c0e <_lv_obj_get_style_int+0x6a>
  406cda:	2b13      	cmp	r3, #19
  406cdc:	f73f af7d 	bgt.w	406bda <_lv_obj_get_style_int+0x36>
  406ce0:	2b10      	cmp	r3, #16
  406ce2:	da2e      	bge.n	406d42 <_lv_obj_get_style_int+0x19e>
  406ce4:	2b02      	cmp	r3, #2
  406ce6:	d00e      	beq.n	406d06 <_lv_obj_get_style_int+0x162>
  406ce8:	f73f af6d 	bgt.w	406bc6 <_lv_obj_get_style_int+0x22>
  406cec:	2b01      	cmp	r3, #1
  406cee:	d1c2      	bne.n	406c76 <_lv_obj_get_style_int+0xd2>
                    if(list->radius_zero) def = true;
  406cf0:	796b      	ldrb	r3, [r5, #5]
  406cf2:	f013 0f10 	tst.w	r3, #16
  406cf6:	d138      	bne.n	406d6a <_lv_obj_get_style_int+0x1c6>
            bool def = false;
  406cf8:	2300      	movs	r3, #0
  406cfa:	e7bd      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406cfc:	f248 02a0 	movw	r2, #32928	; 0x80a0
  406d00:	4293      	cmp	r3, r2
  406d02:	d1b8      	bne.n	406c76 <_lv_obj_get_style_int+0xd2>
  406d04:	e795      	b.n	406c32 <_lv_obj_get_style_int+0x8e>
                    if(list->clip_corner_off) def = true;
  406d06:	796b      	ldrb	r3, [r5, #5]
  406d08:	f013 0f40 	tst.w	r3, #64	; 0x40
  406d0c:	d11f      	bne.n	406d4e <_lv_obj_get_style_int+0x1aa>
            bool def = false;
  406d0e:	2300      	movs	r3, #0
  406d10:	e7b2      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  406d12:	79eb      	ldrb	r3, [r5, #7]
  406d14:	f013 0f20 	tst.w	r3, #32
  406d18:	d11b      	bne.n	406d52 <_lv_obj_get_style_int+0x1ae>
            bool def = false;
  406d1a:	2300      	movs	r3, #0
  406d1c:	e7ac      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  406d1e:	79ab      	ldrb	r3, [r5, #6]
  406d20:	f013 0f40 	tst.w	r3, #64	; 0x40
  406d24:	d11b      	bne.n	406d5e <_lv_obj_get_style_int+0x1ba>
            bool def = false;
  406d26:	2300      	movs	r3, #0
  406d28:	e7a6      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  406d2a:	f995 3006 	ldrsb.w	r3, [r5, #6]
  406d2e:	2b00      	cmp	r3, #0
  406d30:	db17      	blt.n	406d62 <_lv_obj_get_style_int+0x1be>
            bool def = false;
  406d32:	2300      	movs	r3, #0
  406d34:	e7a0      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  406d36:	79eb      	ldrb	r3, [r5, #7]
  406d38:	f013 0f04 	tst.w	r3, #4
  406d3c:	d117      	bne.n	406d6e <_lv_obj_get_style_int+0x1ca>
            bool def = false;
  406d3e:	2300      	movs	r3, #0
  406d40:	e79a      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  406d42:	79ab      	ldrb	r3, [r5, #6]
  406d44:	f013 0f01 	tst.w	r3, #1
  406d48:	d113      	bne.n	406d72 <_lv_obj_get_style_int+0x1ce>
            bool def = false;
  406d4a:	2300      	movs	r3, #0
  406d4c:	e794      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->clip_corner_off) def = true;
  406d4e:	2301      	movs	r3, #1
  406d50:	e792      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  406d52:	2301      	movs	r3, #1
  406d54:	e790      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->transform_all_zero) def = true;
  406d56:	2301      	movs	r3, #1
  406d58:	e78e      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->border_width_zero) def = true;
  406d5a:	2301      	movs	r3, #1
  406d5c:	e78c      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  406d5e:	2301      	movs	r3, #1
  406d60:	e78a      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  406d62:	2301      	movs	r3, #1
  406d64:	e788      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->outline_width_zero) def = true;
  406d66:	2301      	movs	r3, #1
  406d68:	e786      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->radius_zero) def = true;
  406d6a:	2301      	movs	r3, #1
  406d6c:	e784      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  406d6e:	2301      	movs	r3, #1
  406d70:	e782      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  406d72:	2301      	movs	r3, #1
  406d74:	e780      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->margin_all_zero) def = true;
  406d76:	2301      	movs	r3, #1
  406d78:	e77e      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->blend_mode_all_normal) def = true;
  406d7a:	2301      	movs	r3, #1
  406d7c:	e77c      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
                    if(list->text_decor_none) def = true;
  406d7e:	2301      	movs	r3, #1
  406d80:	e77a      	b.n	406c78 <_lv_obj_get_style_int+0xd4>
        if(res == LV_RES_OK) return value_act;
  406d82:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
}
  406d86:	b003      	add	sp, #12
  406d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  406d8c:	4638      	mov	r0, r7
  406d8e:	4b13      	ldr	r3, [pc, #76]	; (406ddc <_lv_obj_get_style_int+0x238>)
  406d90:	4798      	blx	r3
  406d92:	4607      	mov	r7, r0
  406d94:	e789      	b.n	406caa <_lv_obj_get_style_int+0x106>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406d96:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406d9a:	b2a4      	uxth	r4, r4
    switch(prop) {
  406d9c:	2c22      	cmp	r4, #34	; 0x22
  406d9e:	d00f      	beq.n	406dc0 <_lv_obj_get_style_int+0x21c>
  406da0:	d806      	bhi.n	406db0 <_lv_obj_get_style_int+0x20c>
  406da2:	2c03      	cmp	r4, #3
  406da4:	d010      	beq.n	406dc8 <_lv_obj_get_style_int+0x224>
  406da6:	2c07      	cmp	r4, #7
  406da8:	d10c      	bne.n	406dc4 <_lv_obj_get_style_int+0x220>
            return LV_IMG_ZOOM_NONE;
  406daa:	f44f 7080 	mov.w	r0, #256	; 0x100
  406dae:	e7ea      	b.n	406d86 <_lv_obj_get_style_int+0x1e2>
    switch(prop) {
  406db0:	2c31      	cmp	r4, #49	; 0x31
  406db2:	d003      	beq.n	406dbc <_lv_obj_get_style_int+0x218>
  406db4:	2cc0      	cmp	r4, #192	; 0xc0
  406db6:	d105      	bne.n	406dc4 <_lv_obj_get_style_int+0x220>
            return LV_DPI / 8;
  406db8:	2012      	movs	r0, #18
  406dba:	e7e4      	b.n	406d86 <_lv_obj_get_style_int+0x1e2>
            return LV_BORDER_SIDE_FULL;
  406dbc:	200f      	movs	r0, #15
  406dbe:	e7e2      	b.n	406d86 <_lv_obj_get_style_int+0x1e2>
            return 255;
  406dc0:	20ff      	movs	r0, #255	; 0xff
  406dc2:	e7e0      	b.n	406d86 <_lv_obj_get_style_int+0x1e2>
    return 0;
  406dc4:	2000      	movs	r0, #0
  406dc6:	e7de      	b.n	406d86 <_lv_obj_get_style_int+0x1e2>
            return LV_DPI / 20;
  406dc8:	2007      	movs	r0, #7
  406dca:	e7dc      	b.n	406d86 <_lv_obj_get_style_int+0x1e2>
  406dcc:	00406729 	.word	0x00406729
  406dd0:	00406541 	.word	0x00406541
  406dd4:	0040a24d 	.word	0x0040a24d
  406dd8:	004054e1 	.word	0x004054e1
  406ddc:	004052ad 	.word	0x004052ad

00406de0 <update_style_cache_children>:
{
  406de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406de4:	4606      	mov	r6, r0
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  406de6:	2500      	movs	r5, #0
  406de8:	e009      	b.n	406dfe <update_style_cache_children+0x1e>
            list->text_space_zero = 0;
  406dea:	79e3      	ldrb	r3, [r4, #7]
  406dec:	f36f 1345 	bfc	r3, #5, #1
  406df0:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
  406df2:	7963      	ldrb	r3, [r4, #5]
  406df4:	f368 03c3 	bfi	r3, r8, #3, #1
  406df8:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  406dfa:	3501      	adds	r5, #1
  406dfc:	b2ed      	uxtb	r5, r5
  406dfe:	2d40      	cmp	r5, #64	; 0x40
  406e00:	d058      	beq.n	406eb4 <update_style_cache_children+0xd4>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406e02:	4629      	mov	r1, r5
  406e04:	4630      	mov	r0, r6
  406e06:	4b34      	ldr	r3, [pc, #208]	; (406ed8 <update_style_cache_children+0xf8>)
  406e08:	4798      	blx	r3
        if(list == NULL) break;
  406e0a:	4604      	mov	r4, r0
  406e0c:	2800      	cmp	r0, #0
  406e0e:	d051      	beq.n	406eb4 <update_style_cache_children+0xd4>
        bool ignore_cache_ori = list->ignore_cache;
  406e10:	7943      	ldrb	r3, [r0, #5]
  406e12:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
  406e16:	f043 0308 	orr.w	r3, r3, #8
  406e1a:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  406e1c:	f248 020c 	movw	r2, #32780	; 0x800c
  406e20:	4629      	mov	r1, r5
  406e22:	4630      	mov	r0, r6
  406e24:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 406eec <update_style_cache_children+0x10c>
  406e28:	47c8      	blx	r9
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  406e2a:	28ff      	cmp	r0, #255	; 0xff
  406e2c:	bf14      	ite	ne
  406e2e:	2000      	movne	r0, #0
  406e30:	2001      	moveq	r0, #1
  406e32:	7963      	ldrb	r3, [r4, #5]
  406e34:	f360 1345 	bfi	r3, r0, #5, #1
  406e38:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  406e3a:	f248 0282 	movw	r2, #32898	; 0x8082
  406e3e:	4629      	mov	r1, r5
  406e40:	4630      	mov	r0, r6
  406e42:	4f26      	ldr	r7, [pc, #152]	; (406edc <update_style_cache_children+0xfc>)
  406e44:	47b8      	blx	r7
  406e46:	b2c0      	uxtb	r0, r0
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  406e48:	fab0 f080 	clz	r0, r0
  406e4c:	0940      	lsrs	r0, r0, #5
  406e4e:	79e3      	ldrb	r3, [r4, #7]
  406e50:	f360 1386 	bfi	r3, r0, #6, #1
  406e54:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  406e56:	f248 028e 	movw	r2, #32910	; 0x808e
  406e5a:	4629      	mov	r1, r5
  406e5c:	4630      	mov	r0, r6
  406e5e:	4b20      	ldr	r3, [pc, #128]	; (406ee0 <update_style_cache_children+0x100>)
  406e60:	4798      	blx	r3
  406e62:	4682      	mov	sl, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
  406e64:	4b1f      	ldr	r3, [pc, #124]	; (406ee4 <update_style_cache_children+0x104>)
  406e66:	4798      	blx	r3
  406e68:	4582      	cmp	sl, r0
  406e6a:	bf14      	ite	ne
  406e6c:	2000      	movne	r0, #0
  406e6e:	2001      	moveq	r0, #1
  406e70:	79e3      	ldrb	r3, [r4, #7]
  406e72:	f360 13c7 	bfi	r3, r0, #7, #1
  406e76:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  406e78:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406e7c:	4629      	mov	r1, r5
  406e7e:	4630      	mov	r0, r6
  406e80:	47c8      	blx	r9
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  406e82:	fab0 f080 	clz	r0, r0
  406e86:	0940      	lsrs	r0, r0, #5
  406e88:	79e3      	ldrb	r3, [r4, #7]
  406e8a:	f360 1304 	bfi	r3, r0, #4, #1
        list->text_space_zero = 1;
  406e8e:	b2db      	uxtb	r3, r3
  406e90:	f043 0320 	orr.w	r3, r3, #32
  406e94:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  406e96:	f248 0280 	movw	r2, #32896	; 0x8080
  406e9a:	4629      	mov	r1, r5
  406e9c:	4630      	mov	r0, r6
  406e9e:	47b8      	blx	r7
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  406ea0:	2800      	cmp	r0, #0
  406ea2:	d1a2      	bne.n	406dea <update_style_cache_children+0xa>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  406ea4:	f248 0281 	movw	r2, #32897	; 0x8081
  406ea8:	4629      	mov	r1, r5
  406eaa:	4630      	mov	r0, r6
  406eac:	47b8      	blx	r7
  406eae:	2800      	cmp	r0, #0
  406eb0:	d09f      	beq.n	406df2 <update_style_cache_children+0x12>
  406eb2:	e79a      	b.n	406dea <update_style_cache_children+0xa>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  406eb4:	2100      	movs	r1, #0
  406eb6:	4630      	mov	r0, r6
  406eb8:	4b0b      	ldr	r3, [pc, #44]	; (406ee8 <update_style_cache_children+0x108>)
  406eba:	4798      	blx	r3
  406ebc:	4604      	mov	r4, r0
    while(child) {
  406ebe:	e007      	b.n	406ed0 <update_style_cache_children+0xf0>
        update_style_cache_children(child);
  406ec0:	4620      	mov	r0, r4
  406ec2:	f7ff ff8d 	bl	406de0 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
  406ec6:	4621      	mov	r1, r4
  406ec8:	4630      	mov	r0, r6
  406eca:	4b07      	ldr	r3, [pc, #28]	; (406ee8 <update_style_cache_children+0x108>)
  406ecc:	4798      	blx	r3
  406ece:	4604      	mov	r4, r0
    while(child) {
  406ed0:	2c00      	cmp	r4, #0
  406ed2:	d1f5      	bne.n	406ec0 <update_style_cache_children+0xe0>
}
  406ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ed8:	004054e1 	.word	0x004054e1
  406edc:	00406ba5 	.word	0x00406ba5
  406ee0:	00406a9d 	.word	0x00406a9d
  406ee4:	00416a19 	.word	0x00416a19
  406ee8:	00405381 	.word	0x00405381
  406eec:	00406619 	.word	0x00406619

00406ef0 <invalidate_style_cache>:
{
  406ef0:	b538      	push	{r3, r4, r5, lr}
  406ef2:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
  406ef4:	4610      	mov	r0, r2
  406ef6:	4b19      	ldr	r3, [pc, #100]	; (406f5c <invalidate_style_cache+0x6c>)
  406ef8:	4798      	blx	r3
  406efa:	b170      	cbz	r0, 406f1a <invalidate_style_cache+0x2a>
  406efc:	2400      	movs	r4, #0
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  406efe:	2c3f      	cmp	r4, #63	; 0x3f
  406f00:	d80c      	bhi.n	406f1c <invalidate_style_cache+0x2c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406f02:	4621      	mov	r1, r4
  406f04:	4628      	mov	r0, r5
  406f06:	4b16      	ldr	r3, [pc, #88]	; (406f60 <invalidate_style_cache+0x70>)
  406f08:	4798      	blx	r3
        if(list == NULL) break;
  406f0a:	b138      	cbz	r0, 406f1c <invalidate_style_cache+0x2c>
        list->valid_cache = 0;
  406f0c:	7942      	ldrb	r2, [r0, #5]
  406f0e:	f36f 0282 	bfc	r2, #2, #1
  406f12:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  406f14:	3401      	adds	r4, #1
  406f16:	b2e4      	uxtb	r4, r4
  406f18:	e7f1      	b.n	406efe <invalidate_style_cache+0xe>
  406f1a:	bd38      	pop	{r3, r4, r5, pc}
  406f1c:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  406f1e:	2cff      	cmp	r4, #255	; 0xff
  406f20:	d00b      	beq.n	406f3a <invalidate_style_cache+0x4a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406f22:	4621      	mov	r1, r4
  406f24:	4628      	mov	r0, r5
  406f26:	4b0e      	ldr	r3, [pc, #56]	; (406f60 <invalidate_style_cache+0x70>)
  406f28:	4798      	blx	r3
        if(list == NULL) break;
  406f2a:	b130      	cbz	r0, 406f3a <invalidate_style_cache+0x4a>
        list->valid_cache = 0;
  406f2c:	7942      	ldrb	r2, [r0, #5]
  406f2e:	f36f 0282 	bfc	r2, #2, #1
  406f32:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  406f34:	3401      	adds	r4, #1
  406f36:	b2e4      	uxtb	r4, r4
  406f38:	e7f1      	b.n	406f1e <invalidate_style_cache+0x2e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  406f3a:	2100      	movs	r1, #0
  406f3c:	4628      	mov	r0, r5
  406f3e:	4b09      	ldr	r3, [pc, #36]	; (406f64 <invalidate_style_cache+0x74>)
  406f40:	4798      	blx	r3
  406f42:	4604      	mov	r4, r0
    while(child) {
  406f44:	e007      	b.n	406f56 <invalidate_style_cache+0x66>
        update_style_cache_children(child);
  406f46:	4620      	mov	r0, r4
  406f48:	4b07      	ldr	r3, [pc, #28]	; (406f68 <invalidate_style_cache+0x78>)
  406f4a:	4798      	blx	r3
        child = lv_obj_get_child(obj, child);
  406f4c:	4621      	mov	r1, r4
  406f4e:	4628      	mov	r0, r5
  406f50:	4b04      	ldr	r3, [pc, #16]	; (406f64 <invalidate_style_cache+0x74>)
  406f52:	4798      	blx	r3
  406f54:	4604      	mov	r4, r0
    while(child) {
  406f56:	2c00      	cmp	r4, #0
  406f58:	d1f5      	bne.n	406f46 <invalidate_style_cache+0x56>
  406f5a:	bd38      	pop	{r3, r4, r5, pc}
  406f5c:	00404e09 	.word	0x00404e09
  406f60:	004054e1 	.word	0x004054e1
  406f64:	00405381 	.word	0x00405381
  406f68:	00406de1 	.word	0x00406de1

00406f6c <lv_obj_refresh_style>:
{
  406f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f6e:	4605      	mov	r5, r0
  406f70:	460f      	mov	r7, r1
  406f72:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406f74:	4b37      	ldr	r3, [pc, #220]	; (407054 <lv_obj_refresh_style+0xe8>)
  406f76:	4798      	blx	r3
  406f78:	b928      	cbnz	r0, 406f86 <lv_obj_refresh_style+0x1a>
  406f7a:	462a      	mov	r2, r5
  406f7c:	2300      	movs	r3, #0
  406f7e:	4836      	ldr	r0, [pc, #216]	; (407058 <lv_obj_refresh_style+0xec>)
  406f80:	4936      	ldr	r1, [pc, #216]	; (40705c <lv_obj_refresh_style+0xf0>)
  406f82:	4788      	blx	r1
  406f84:	e7fe      	b.n	406f84 <lv_obj_refresh_style+0x18>
  406f86:	4606      	mov	r6, r0
    invalidate_style_cache(obj, part, prop);
  406f88:	4622      	mov	r2, r4
  406f8a:	4639      	mov	r1, r7
  406f8c:	4628      	mov	r0, r5
  406f8e:	4b34      	ldr	r3, [pc, #208]	; (407060 <lv_obj_refresh_style+0xf4>)
  406f90:	4798      	blx	r3
    switch(prop) {
  406f92:	2c71      	cmp	r4, #113	; 0x71
  406f94:	d83c      	bhi.n	407010 <lv_obj_refresh_style+0xa4>
  406f96:	2c70      	cmp	r4, #112	; 0x70
  406f98:	d20c      	bcs.n	406fb4 <lv_obj_refresh_style+0x48>
  406f9a:	2c41      	cmp	r4, #65	; 0x41
  406f9c:	d82e      	bhi.n	406ffc <lv_obj_refresh_style+0x90>
  406f9e:	2c40      	cmp	r4, #64	; 0x40
  406fa0:	d208      	bcs.n	406fb4 <lv_obj_refresh_style+0x48>
  406fa2:	2c02      	cmp	r4, #2
  406fa4:	d305      	bcc.n	406fb2 <lv_obj_refresh_style+0x46>
  406fa6:	2c07      	cmp	r4, #7
  406fa8:	d904      	bls.n	406fb4 <lv_obj_refresh_style+0x48>
  406faa:	f1a4 0310 	sub.w	r3, r4, #16
  406fae:	2b08      	cmp	r3, #8
  406fb0:	d900      	bls.n	406fb4 <lv_obj_refresh_style+0x48>
            real_refr = false;
  406fb2:	2600      	movs	r6, #0
    if(real_refr) {
  406fb4:	2e00      	cmp	r6, #0
  406fb6:	d048      	beq.n	40704a <lv_obj_refresh_style+0xde>
        lv_obj_invalidate(obj);
  406fb8:	4628      	mov	r0, r5
  406fba:	4b2a      	ldr	r3, [pc, #168]	; (407064 <lv_obj_refresh_style+0xf8>)
  406fbc:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
  406fbe:	69eb      	ldr	r3, [r5, #28]
  406fc0:	2200      	movs	r2, #0
  406fc2:	2104      	movs	r1, #4
  406fc4:	4628      	mov	r0, r5
  406fc6:	4798      	blx	r3
        switch(prop) {
  406fc8:	2c15      	cmp	r4, #21
  406fca:	d309      	bcc.n	406fe0 <lv_obj_refresh_style+0x74>
  406fcc:	2c18      	cmp	r4, #24
  406fce:	d901      	bls.n	406fd4 <lv_obj_refresh_style+0x68>
  406fd0:	2cff      	cmp	r4, #255	; 0xff
  406fd2:	d105      	bne.n	406fe0 <lv_obj_refresh_style+0x74>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
  406fd4:	6828      	ldr	r0, [r5, #0]
  406fd6:	b118      	cbz	r0, 406fe0 <lv_obj_refresh_style+0x74>
  406fd8:	69c3      	ldr	r3, [r0, #28]
  406fda:	2200      	movs	r2, #0
  406fdc:	2101      	movs	r1, #1
  406fde:	4798      	blx	r3
        lv_obj_invalidate(obj);
  406fe0:	4628      	mov	r0, r5
  406fe2:	4b20      	ldr	r3, [pc, #128]	; (407064 <lv_obj_refresh_style+0xf8>)
  406fe4:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
  406fe6:	0be3      	lsrs	r3, r4, #15
  406fe8:	2cff      	cmp	r4, #255	; 0xff
  406fea:	bf14      	ite	ne
  406fec:	461c      	movne	r4, r3
  406fee:	f043 0401 	orreq.w	r4, r3, #1
  406ff2:	b36c      	cbz	r4, 407050 <lv_obj_refresh_style+0xe4>
  406ff4:	4628      	mov	r0, r5
  406ff6:	4b1c      	ldr	r3, [pc, #112]	; (407068 <lv_obj_refresh_style+0xfc>)
  406ff8:	4798      	blx	r3
  406ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(prop) {
  406ffc:	2c53      	cmp	r4, #83	; 0x53
  406ffe:	d804      	bhi.n	40700a <lv_obj_refresh_style+0x9e>
  407000:	2c50      	cmp	r4, #80	; 0x50
  407002:	d2d7      	bcs.n	406fb4 <lv_obj_refresh_style+0x48>
  407004:	2c4c      	cmp	r4, #76	; 0x4c
  407006:	d1d4      	bne.n	406fb2 <lv_obj_refresh_style+0x46>
  407008:	e7d4      	b.n	406fb4 <lv_obj_refresh_style+0x48>
  40700a:	2c5c      	cmp	r4, #92	; 0x5c
  40700c:	d1d1      	bne.n	406fb2 <lv_obj_refresh_style+0x46>
  40700e:	e7d1      	b.n	406fb4 <lv_obj_refresh_style+0x48>
  407010:	2c7f      	cmp	r4, #127	; 0x7f
  407012:	d90c      	bls.n	40702e <lv_obj_refresh_style+0xc2>
  407014:	f248 0381 	movw	r3, #32897	; 0x8081
  407018:	429c      	cmp	r4, r3
  40701a:	d811      	bhi.n	407040 <lv_obj_refresh_style+0xd4>
  40701c:	f248 0380 	movw	r3, #32896	; 0x8080
  407020:	429c      	cmp	r4, r3
  407022:	d2c7      	bcs.n	406fb4 <lv_obj_refresh_style+0x48>
  407024:	2c90      	cmp	r4, #144	; 0x90
  407026:	d0c5      	beq.n	406fb4 <lv_obj_refresh_style+0x48>
  407028:	2cff      	cmp	r4, #255	; 0xff
  40702a:	d1c2      	bne.n	406fb2 <lv_obj_refresh_style+0x46>
  40702c:	e7c2      	b.n	406fb4 <lv_obj_refresh_style+0x48>
  40702e:	2c7e      	cmp	r4, #126	; 0x7e
  407030:	d2c0      	bcs.n	406fb4 <lv_obj_refresh_style+0x48>
  407032:	2c73      	cmp	r4, #115	; 0x73
  407034:	d3bd      	bcc.n	406fb2 <lv_obj_refresh_style+0x46>
  407036:	2c75      	cmp	r4, #117	; 0x75
  407038:	d9bc      	bls.n	406fb4 <lv_obj_refresh_style+0x48>
  40703a:	2c7c      	cmp	r4, #124	; 0x7c
  40703c:	d1b9      	bne.n	406fb2 <lv_obj_refresh_style+0x46>
  40703e:	e7b9      	b.n	406fb4 <lv_obj_refresh_style+0x48>
  407040:	f248 038e 	movw	r3, #32910	; 0x808e
  407044:	429c      	cmp	r4, r3
  407046:	d1b4      	bne.n	406fb2 <lv_obj_refresh_style+0x46>
  407048:	e7b4      	b.n	406fb4 <lv_obj_refresh_style+0x48>
        lv_obj_invalidate(obj);
  40704a:	4628      	mov	r0, r5
  40704c:	4b05      	ldr	r3, [pc, #20]	; (407064 <lv_obj_refresh_style+0xf8>)
  40704e:	4798      	blx	r3
  407050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407052:	bf00      	nop
  407054:	00415065 	.word	0x00415065
  407058:	00421278 	.word	0x00421278
  40705c:	00415071 	.word	0x00415071
  407060:	00406ef1 	.word	0x00406ef1
  407064:	0040582d 	.word	0x0040582d
  407068:	00405fb1 	.word	0x00405fb1

0040706c <lv_obj_reset_style_list>:
{
  40706c:	b538      	push	{r3, r4, r5, lr}
  40706e:	4604      	mov	r4, r0
  407070:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
  407072:	4b04      	ldr	r3, [pc, #16]	; (407084 <lv_obj_reset_style_list+0x18>)
  407074:	4798      	blx	r3
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  407076:	22ff      	movs	r2, #255	; 0xff
  407078:	4629      	mov	r1, r5
  40707a:	4620      	mov	r0, r4
  40707c:	4b02      	ldr	r3, [pc, #8]	; (407088 <lv_obj_reset_style_list+0x1c>)
  40707e:	4798      	blx	r3
  407080:	bd38      	pop	{r3, r4, r5, pc}
  407082:	bf00      	nop
  407084:	004055a9 	.word	0x004055a9
  407088:	00406f6d 	.word	0x00406f6d

0040708c <report_style_mod_core>:
{
  40708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40708e:	4604      	mov	r4, r0
  407090:	460e      	mov	r6, r1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407092:	2500      	movs	r5, #0
  407094:	e028      	b.n	4070e8 <report_style_mod_core+0x5c>
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
  407096:	1c59      	adds	r1, r3, #1
  407098:	b2c9      	uxtb	r1, r1
  40709a:	e012      	b.n	4070c2 <report_style_mod_core+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40709c:	2200      	movs	r2, #0
            if(_class == style || style == NULL) {
  40709e:	2c00      	cmp	r4, #0
  4070a0:	bf18      	it	ne
  4070a2:	4294      	cmpne	r4, r2
  4070a4:	d019      	beq.n	4070da <report_style_mod_core+0x4e>
        for(ci = 0; ci < list->style_cnt; ci++) {
  4070a6:	3301      	adds	r3, #1
  4070a8:	b2db      	uxtb	r3, r3
  4070aa:	793a      	ldrb	r2, [r7, #4]
  4070ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  4070b0:	4293      	cmp	r3, r2
  4070b2:	da17      	bge.n	4070e4 <report_style_mod_core+0x58>
    if(list->has_trans && list->skip_trans) id++;
  4070b4:	88b9      	ldrh	r1, [r7, #4]
  4070b6:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  4070ba:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  4070be:	d0ea      	beq.n	407096 <report_style_mod_core+0xa>
  4070c0:	4619      	mov	r1, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  4070c2:	7938      	ldrb	r0, [r7, #4]
  4070c4:	f010 0f3f 	tst.w	r0, #63	; 0x3f
  4070c8:	d0e8      	beq.n	40709c <report_style_mod_core+0x10>
  4070ca:	428a      	cmp	r2, r1
  4070cc:	dd03      	ble.n	4070d6 <report_style_mod_core+0x4a>
    return list->style_list[id];
  4070ce:	683a      	ldr	r2, [r7, #0]
  4070d0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4070d4:	e7e3      	b.n	40709e <report_style_mod_core+0x12>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  4070d6:	2200      	movs	r2, #0
  4070d8:	e7e1      	b.n	40709e <report_style_mod_core+0x12>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  4070da:	22ff      	movs	r2, #255	; 0xff
  4070dc:	4629      	mov	r1, r5
  4070de:	4630      	mov	r0, r6
  4070e0:	4b0f      	ldr	r3, [pc, #60]	; (407120 <report_style_mod_core+0x94>)
  4070e2:	4798      	blx	r3
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  4070e4:	3501      	adds	r5, #1
  4070e6:	b2ed      	uxtb	r5, r5
  4070e8:	2d40      	cmp	r5, #64	; 0x40
  4070ea:	d007      	beq.n	4070fc <report_style_mod_core+0x70>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4070ec:	4629      	mov	r1, r5
  4070ee:	4630      	mov	r0, r6
  4070f0:	4b0c      	ldr	r3, [pc, #48]	; (407124 <report_style_mod_core+0x98>)
  4070f2:	4798      	blx	r3
        if(list == NULL) break;
  4070f4:	4607      	mov	r7, r0
  4070f6:	b108      	cbz	r0, 4070fc <report_style_mod_core+0x70>
  4070f8:	2300      	movs	r3, #0
  4070fa:	e7d6      	b.n	4070aa <report_style_mod_core+0x1e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4070fc:	2100      	movs	r1, #0
  4070fe:	4630      	mov	r0, r6
  407100:	4b09      	ldr	r3, [pc, #36]	; (407128 <report_style_mod_core+0x9c>)
  407102:	4798      	blx	r3
  407104:	4605      	mov	r5, r0
    while(child) {
  407106:	e008      	b.n	40711a <report_style_mod_core+0x8e>
        report_style_mod_core(style, child);
  407108:	4629      	mov	r1, r5
  40710a:	4620      	mov	r0, r4
  40710c:	f7ff ffbe 	bl	40708c <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
  407110:	4629      	mov	r1, r5
  407112:	4630      	mov	r0, r6
  407114:	4b04      	ldr	r3, [pc, #16]	; (407128 <report_style_mod_core+0x9c>)
  407116:	4798      	blx	r3
  407118:	4605      	mov	r5, r0
    while(child) {
  40711a:	2d00      	cmp	r5, #0
  40711c:	d1f4      	bne.n	407108 <report_style_mod_core+0x7c>
}
  40711e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407120:	00406f6d 	.word	0x00406f6d
  407124:	004054e1 	.word	0x004054e1
  407128:	00405381 	.word	0x00405381

0040712c <lv_obj_report_style_mod>:
{
  40712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40712e:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
  407130:	2000      	movs	r0, #0
  407132:	4b0e      	ldr	r3, [pc, #56]	; (40716c <lv_obj_report_style_mod+0x40>)
  407134:	4798      	blx	r3
  407136:	4607      	mov	r7, r0
    while(d) {
  407138:	e00e      	b.n	407158 <lv_obj_report_style_mod+0x2c>
            report_style_mod_core(style, i);
  40713a:	4621      	mov	r1, r4
  40713c:	4630      	mov	r0, r6
  40713e:	4b0c      	ldr	r3, [pc, #48]	; (407170 <lv_obj_report_style_mod+0x44>)
  407140:	4798      	blx	r3
        _LV_LL_READ(d->scr_ll, i) {
  407142:	4621      	mov	r1, r4
  407144:	4628      	mov	r0, r5
  407146:	4b0b      	ldr	r3, [pc, #44]	; (407174 <lv_obj_report_style_mod+0x48>)
  407148:	4798      	blx	r3
  40714a:	4604      	mov	r4, r0
  40714c:	2c00      	cmp	r4, #0
  40714e:	d1f4      	bne.n	40713a <lv_obj_report_style_mod+0xe>
        d = lv_disp_get_next(d);
  407150:	4638      	mov	r0, r7
  407152:	4b06      	ldr	r3, [pc, #24]	; (40716c <lv_obj_report_style_mod+0x40>)
  407154:	4798      	blx	r3
  407156:	4607      	mov	r7, r0
    while(d) {
  407158:	b137      	cbz	r7, 407168 <lv_obj_report_style_mod+0x3c>
        _LV_LL_READ(d->scr_ll, i) {
  40715a:	f107 0538 	add.w	r5, r7, #56	; 0x38
  40715e:	4628      	mov	r0, r5
  407160:	4b05      	ldr	r3, [pc, #20]	; (407178 <lv_obj_report_style_mod+0x4c>)
  407162:	4798      	blx	r3
  407164:	4604      	mov	r4, r0
  407166:	e7f1      	b.n	40714c <lv_obj_report_style_mod+0x20>
}
  407168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40716a:	bf00      	nop
  40716c:	00414019 	.word	0x00414019
  407170:	0040708d 	.word	0x0040708d
  407174:	00415389 	.word	0x00415389
  407178:	00415375 	.word	0x00415375

0040717c <trans_anim_cb>:
{
  40717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407180:	4604      	mov	r4, r0
  407182:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  407184:	7981      	ldrb	r1, [r0, #6]
  407186:	6800      	ldr	r0, [r0, #0]
  407188:	4b4b      	ldr	r3, [pc, #300]	; (4072b8 <trans_anim_cb+0x13c>)
  40718a:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
  40718c:	4b4b      	ldr	r3, [pc, #300]	; (4072bc <trans_anim_cb+0x140>)
  40718e:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
  407190:	88a1      	ldrh	r1, [r4, #4]
  407192:	f001 030f 	and.w	r3, r1, #15
  407196:	2b08      	cmp	r3, #8
  407198:	dc1c      	bgt.n	4071d4 <trans_anim_cb+0x58>
        if(v == 0) x = tr->start_value._int;
  40719a:	b955      	cbnz	r5, 4071b2 <trans_anim_cb+0x36>
  40719c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
  4071a0:	4b47      	ldr	r3, [pc, #284]	; (4072c0 <trans_anim_cb+0x144>)
  4071a2:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
  4071a4:	88a2      	ldrh	r2, [r4, #4]
  4071a6:	79a1      	ldrb	r1, [r4, #6]
  4071a8:	6820      	ldr	r0, [r4, #0]
  4071aa:	4b46      	ldr	r3, [pc, #280]	; (4072c4 <trans_anim_cb+0x148>)
  4071ac:	4798      	blx	r3
  4071ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(v == 255) x = tr->end_value._int;
  4071b2:	2dff      	cmp	r5, #255	; 0xff
  4071b4:	d00b      	beq.n	4071ce <trans_anim_cb+0x52>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
  4071b6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
  4071ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4071be:	1a9b      	subs	r3, r3, r2
  4071c0:	fb03 f505 	mul.w	r5, r3, r5
  4071c4:	122d      	asrs	r5, r5, #8
  4071c6:	fa15 f282 	uxtah	r2, r5, r2
  4071ca:	b212      	sxth	r2, r2
  4071cc:	e7e8      	b.n	4071a0 <trans_anim_cb+0x24>
        else if(v == 255) x = tr->end_value._int;
  4071ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4071d2:	e7e5      	b.n	4071a0 <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  4071d4:	2b0b      	cmp	r3, #11
  4071d6:	dc50      	bgt.n	40727a <trans_anim_cb+0xfe>
        if(v <= 0) x = tr->start_value._color;
  4071d8:	2d00      	cmp	r5, #0
  4071da:	dd05      	ble.n	4071e8 <trans_anim_cb+0x6c>
        else if(v >= 255) x = tr->end_value._color;
  4071dc:	2dfe      	cmp	r5, #254	; 0xfe
  4071de:	dd05      	ble.n	4071ec <trans_anim_cb+0x70>
  4071e0:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
  4071e2:	4b39      	ldr	r3, [pc, #228]	; (4072c8 <trans_anim_cb+0x14c>)
  4071e4:	4798      	blx	r3
  4071e6:	e7dd      	b.n	4071a4 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._color;
  4071e8:	8922      	ldrh	r2, [r4, #8]
  4071ea:	e7fa      	b.n	4071e2 <trans_anim_cb+0x66>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
  4071ec:	b2ed      	uxtb	r5, r5
  4071ee:	89a7      	ldrh	r7, [r4, #12]
  4071f0:	8926      	ldrh	r6, [r4, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4071f2:	f3c7 03c4 	ubfx	r3, r7, #3, #5
  4071f6:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  4071fa:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
  4071fe:	fb0e f202 	mul.w	r2, lr, r2
  407202:	fb05 2303 	mla	r3, r5, r3, r2
  407206:	3380      	adds	r3, #128	; 0x80
  407208:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40720c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  407210:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  407214:	f04f 0200 	mov.w	r2, #0
  407218:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40721c:	f007 0c07 	and.w	ip, r7, #7
  407220:	f3c7 3342 	ubfx	r3, r7, #13, #3
  407224:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  407228:	f006 0807 	and.w	r8, r6, #7
  40722c:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  407230:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  407234:	fb0c fc0e 	mul.w	ip, ip, lr
  407238:	fb03 c305 	mla	r3, r3, r5, ip
  40723c:	3380      	adds	r3, #128	; 0x80
  40723e:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  407242:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  407246:	f3c3 6c82 	ubfx	ip, r3, #26, #3
  40724a:	f36c 0202 	bfi	r2, ip, #0, #3
  40724e:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  407252:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407256:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40725a:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40725e:	fb06 fe0e 	mul.w	lr, r6, lr
  407262:	fb07 e505 	mla	r5, r7, r5, lr
  407266:	3580      	adds	r5, #128	; 0x80
  407268:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  40726c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  407270:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  407274:	f365 220c 	bfi	r2, r5, #8, #5
  407278:	e7b3      	b.n	4071e2 <trans_anim_cb+0x66>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  40727a:	2b0d      	cmp	r3, #13
  40727c:	dc13      	bgt.n	4072a6 <trans_anim_cb+0x12a>
        if(v <= 0) x = tr->start_value._opa;
  40727e:	2d00      	cmp	r5, #0
  407280:	dd05      	ble.n	40728e <trans_anim_cb+0x112>
        else if(v >= 255) x = tr->end_value._opa;
  407282:	2dfe      	cmp	r5, #254	; 0xfe
  407284:	dd05      	ble.n	407292 <trans_anim_cb+0x116>
  407286:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
  407288:	4b10      	ldr	r3, [pc, #64]	; (4072cc <trans_anim_cb+0x150>)
  40728a:	4798      	blx	r3
  40728c:	e78a      	b.n	4071a4 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._opa;
  40728e:	7a22      	ldrb	r2, [r4, #8]
  407290:	e7fa      	b.n	407288 <trans_anim_cb+0x10c>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
  407292:	7a22      	ldrb	r2, [r4, #8]
  407294:	7b23      	ldrb	r3, [r4, #12]
  407296:	1a9b      	subs	r3, r3, r2
  407298:	fb03 f505 	mul.w	r5, r3, r5
  40729c:	f3c5 2507 	ubfx	r5, r5, #8, #8
  4072a0:	442a      	add	r2, r5
  4072a2:	b2d2      	uxtb	r2, r2
  4072a4:	e7f0      	b.n	407288 <trans_anim_cb+0x10c>
        if(v < 128) x = tr->start_value._ptr;
  4072a6:	2d7f      	cmp	r5, #127	; 0x7f
  4072a8:	dc03      	bgt.n	4072b2 <trans_anim_cb+0x136>
  4072aa:	68a2      	ldr	r2, [r4, #8]
        _lv_style_set_ptr(style, tr->prop, x);
  4072ac:	4b08      	ldr	r3, [pc, #32]	; (4072d0 <trans_anim_cb+0x154>)
  4072ae:	4798      	blx	r3
  4072b0:	e778      	b.n	4071a4 <trans_anim_cb+0x28>
        else x = tr->end_value._ptr;
  4072b2:	68e2      	ldr	r2, [r4, #12]
  4072b4:	e7fa      	b.n	4072ac <trans_anim_cb+0x130>
  4072b6:	bf00      	nop
  4072b8:	004054e1 	.word	0x004054e1
  4072bc:	0040a035 	.word	0x0040a035
  4072c0:	004095c1 	.word	0x004095c1
  4072c4:	00406f6d 	.word	0x00406f6d
  4072c8:	00409751 	.word	0x00409751
  4072cc:	004098e1 	.word	0x004098e1
  4072d0:	00409a71 	.word	0x00409a71

004072d4 <trans_anim_start_cb>:
{
  4072d4:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
  4072d6:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
  4072d8:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  4072da:	f005 030f 	and.w	r3, r5, #15
  4072de:	2b08      	cmp	r3, #8
  4072e0:	dd13      	ble.n	40730a <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  4072e2:	2b0b      	cmp	r3, #11
  4072e4:	dd18      	ble.n	407318 <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  4072e6:	2b0d      	cmp	r3, #13
  4072e8:	dd1d      	ble.n	407326 <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
  4072ea:	462a      	mov	r2, r5
  4072ec:	79a1      	ldrb	r1, [r4, #6]
  4072ee:	6820      	ldr	r0, [r4, #0]
  4072f0:	4b10      	ldr	r3, [pc, #64]	; (407334 <trans_anim_start_cb+0x60>)
  4072f2:	4798      	blx	r3
  4072f4:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
  4072f6:	2300      	movs	r3, #0
  4072f8:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
  4072fa:	4623      	mov	r3, r4
  4072fc:	462a      	mov	r2, r5
  4072fe:	79a1      	ldrb	r1, [r4, #6]
  407300:	6820      	ldr	r0, [r4, #0]
  407302:	4e0d      	ldr	r6, [pc, #52]	; (407338 <trans_anim_start_cb+0x64>)
  407304:	47b0      	blx	r6
    tr->prop = prop_tmp;
  407306:	80a5      	strh	r5, [r4, #4]
  407308:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
  40730a:	462a      	mov	r2, r5
  40730c:	79a1      	ldrb	r1, [r4, #6]
  40730e:	6820      	ldr	r0, [r4, #0]
  407310:	4b0a      	ldr	r3, [pc, #40]	; (40733c <trans_anim_start_cb+0x68>)
  407312:	4798      	blx	r3
  407314:	8120      	strh	r0, [r4, #8]
  407316:	e7ee      	b.n	4072f6 <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
  407318:	462a      	mov	r2, r5
  40731a:	79a1      	ldrb	r1, [r4, #6]
  40731c:	6820      	ldr	r0, [r4, #0]
  40731e:	4b08      	ldr	r3, [pc, #32]	; (407340 <trans_anim_start_cb+0x6c>)
  407320:	4798      	blx	r3
  407322:	8120      	strh	r0, [r4, #8]
  407324:	e7e7      	b.n	4072f6 <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
  407326:	462a      	mov	r2, r5
  407328:	79a1      	ldrb	r1, [r4, #6]
  40732a:	6820      	ldr	r0, [r4, #0]
  40732c:	4b05      	ldr	r3, [pc, #20]	; (407344 <trans_anim_start_cb+0x70>)
  40732e:	4798      	blx	r3
  407330:	7220      	strb	r0, [r4, #8]
  407332:	e7e0      	b.n	4072f6 <trans_anim_start_cb+0x22>
  407334:	00406a9d 	.word	0x00406a9d
  407338:	00405511 	.word	0x00405511
  40733c:	00406ba5 	.word	0x00406ba5
  407340:	00406591 	.word	0x00406591
  407344:	00406619 	.word	0x00406619

00407348 <trans_create>:
{
  407348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40734c:	b085      	sub	sp, #20
  40734e:	4604      	mov	r4, r0
  407350:	460d      	mov	r5, r1
  407352:	4617      	mov	r7, r2
  407354:	4699      	mov	r9, r3
  407356:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  40735a:	4611      	mov	r1, r2
  40735c:	4bab      	ldr	r3, [pc, #684]	; (40760c <trans_create+0x2c4>)
  40735e:	4798      	blx	r3
  407360:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
  407362:	4bab      	ldr	r3, [pc, #684]	; (407610 <trans_create+0x2c8>)
  407364:	4798      	blx	r3
  407366:	9000      	str	r0, [sp, #0]
    bool cache_ori = style_list->ignore_cache;
  407368:	f896 a005 	ldrb.w	sl, [r6, #5]
  40736c:	f3ca 0ac0 	ubfx	sl, sl, #3, #1
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407370:	f005 030f 	and.w	r3, r5, #15
  407374:	2b08      	cmp	r3, #8
  407376:	dd41      	ble.n	4073fc <trans_create+0xb4>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407378:	2b0b      	cmp	r3, #11
  40737a:	f340 80b2 	ble.w	4074e2 <trans_create+0x19a>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  40737e:	2b0d      	cmp	r3, #13
  407380:	f300 80fb 	bgt.w	40757a <trans_create+0x232>
        style_list->skip_trans = 1;
  407384:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407386:	f043 0309 	orr.w	r3, r3, #9
  40738a:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  40738c:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
  407390:	462a      	mov	r2, r5
  407392:	4639      	mov	r1, r7
  407394:	4620      	mov	r0, r4
  407396:	f8df b27c 	ldr.w	fp, [pc, #636]	; 407614 <trans_create+0x2cc>
  40739a:	47d8      	blx	fp
  40739c:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  40739e:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
  4073a2:	462a      	mov	r2, r5
  4073a4:	4639      	mov	r1, r7
  4073a6:	4620      	mov	r0, r4
  4073a8:	47d8      	blx	fp
  4073aa:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  4073ac:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  4073ae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4073b2:	f36a 03c3 	bfi	r3, sl, #3, #1
  4073b6:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
  4073b8:	9b01      	ldr	r3, [sp, #4]
  4073ba:	4283      	cmp	r3, r0
  4073bc:	f000 8123 	beq.w	407606 <trans_create+0x2be>
        obj->state = prev_state;
  4073c0:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
  4073c4:	462a      	mov	r2, r5
  4073c6:	4639      	mov	r1, r7
  4073c8:	4620      	mov	r0, r4
  4073ca:	4b92      	ldr	r3, [pc, #584]	; (407614 <trans_create+0x2cc>)
  4073cc:	4798      	blx	r3
  4073ce:	4606      	mov	r6, r0
        obj->state = new_state;
  4073d0:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
  4073d4:	4602      	mov	r2, r0
  4073d6:	4629      	mov	r1, r5
  4073d8:	9800      	ldr	r0, [sp, #0]
  4073da:	4b8f      	ldr	r3, [pc, #572]	; (407618 <trans_create+0x2d0>)
  4073dc:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  4073de:	488f      	ldr	r0, [pc, #572]	; (40761c <trans_create+0x2d4>)
  4073e0:	4b8f      	ldr	r3, [pc, #572]	; (407620 <trans_create+0x2d8>)
  4073e2:	4798      	blx	r3
  4073e4:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  4073e6:	4b8f      	ldr	r3, [pc, #572]	; (407624 <trans_create+0x2dc>)
  4073e8:	4798      	blx	r3
  4073ea:	2800      	cmp	r0, #0
  4073ec:	f000 80bf 	beq.w	40756e <trans_create+0x226>
        if(tr == NULL) return NULL;
  4073f0:	2c00      	cmp	r4, #0
  4073f2:	d03d      	beq.n	407470 <trans_create+0x128>
        tr->start_value._opa = o1;
  4073f4:	7226      	strb	r6, [r4, #8]
        tr->end_value._opa = o2;
  4073f6:	f884 b00c 	strb.w	fp, [r4, #12]
  4073fa:	e039      	b.n	407470 <trans_create+0x128>
        style_list->skip_trans = 1;
  4073fc:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  4073fe:	f043 0309 	orr.w	r3, r3, #9
  407402:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407404:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
  407408:	462a      	mov	r2, r5
  40740a:	4639      	mov	r1, r7
  40740c:	4620      	mov	r0, r4
  40740e:	f8df b218 	ldr.w	fp, [pc, #536]	; 407628 <trans_create+0x2e0>
  407412:	47d8      	blx	fp
  407414:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  407416:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
  40741a:	462a      	mov	r2, r5
  40741c:	4639      	mov	r1, r7
  40741e:	4620      	mov	r0, r4
  407420:	47d8      	blx	fp
  407422:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407424:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407426:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40742a:	f36a 03c3 	bfi	r3, sl, #3, #1
  40742e:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
  407430:	9b01      	ldr	r3, [sp, #4]
  407432:	4283      	cmp	r3, r0
  407434:	f000 80e5 	beq.w	407602 <trans_create+0x2ba>
        obj->state = prev_state;
  407438:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
  40743c:	462a      	mov	r2, r5
  40743e:	4639      	mov	r1, r7
  407440:	4620      	mov	r0, r4
  407442:	4b79      	ldr	r3, [pc, #484]	; (407628 <trans_create+0x2e0>)
  407444:	4798      	blx	r3
  407446:	4606      	mov	r6, r0
        obj->state = new_state;
  407448:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
  40744c:	4602      	mov	r2, r0
  40744e:	4629      	mov	r1, r5
  407450:	9800      	ldr	r0, [sp, #0]
  407452:	4b76      	ldr	r3, [pc, #472]	; (40762c <trans_create+0x2e4>)
  407454:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
  407456:	2d01      	cmp	r5, #1
  407458:	d00e      	beq.n	407478 <trans_create+0x130>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  40745a:	4870      	ldr	r0, [pc, #448]	; (40761c <trans_create+0x2d4>)
  40745c:	4b70      	ldr	r3, [pc, #448]	; (407620 <trans_create+0x2d8>)
  40745e:	4798      	blx	r3
  407460:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407462:	4b70      	ldr	r3, [pc, #448]	; (407624 <trans_create+0x2dc>)
  407464:	4798      	blx	r3
  407466:	b3b0      	cbz	r0, 4074d6 <trans_create+0x18e>
        if(tr == NULL) return NULL;
  407468:	b114      	cbz	r4, 407470 <trans_create+0x128>
        tr->start_value._int = int1;
  40746a:	8126      	strh	r6, [r4, #8]
        tr->end_value._int = int2;
  40746c:	f8a4 b00c 	strh.w	fp, [r4, #12]
}
  407470:	4620      	mov	r0, r4
  407472:	b005      	add	sp, #20
  407474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
  407478:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40747c:	459b      	cmp	fp, r3
  40747e:	bf18      	it	ne
  407480:	429e      	cmpne	r6, r3
  407482:	d1ea      	bne.n	40745a <trans_create+0x112>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  407484:	4620      	mov	r0, r4
  407486:	4b6a      	ldr	r3, [pc, #424]	; (407630 <trans_create+0x2e8>)
  407488:	4798      	blx	r3
  40748a:	4605      	mov	r5, r0
  40748c:	2800      	cmp	r0, #0
  40748e:	da00      	bge.n	407492 <trans_create+0x14a>
  407490:	1c45      	adds	r5, r0, #1
  407492:	f345 054f 	sbfx	r5, r5, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  407496:	4620      	mov	r0, r4
  407498:	4b65      	ldr	r3, [pc, #404]	; (407630 <trans_create+0x2e8>)
  40749a:	4798      	blx	r3
  40749c:	4603      	mov	r3, r0
  40749e:	2800      	cmp	r0, #0
  4074a0:	da00      	bge.n	4074a4 <trans_create+0x15c>
  4074a2:	1c43      	adds	r3, r0, #1
  4074a4:	f343 034f 	sbfx	r3, r3, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  4074a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4074ac:	4296      	cmp	r6, r2
  4074ae:	d105      	bne.n	4074bc <trans_create+0x174>
  4074b0:	1c5e      	adds	r6, r3, #1
  4074b2:	1c6a      	adds	r2, r5, #1
  4074b4:	4296      	cmp	r6, r2
  4074b6:	bfa8      	it	ge
  4074b8:	4616      	movge	r6, r2
  4074ba:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  4074bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4074c0:	4593      	cmp	fp, r2
  4074c2:	d1ca      	bne.n	40745a <trans_create+0x112>
  4074c4:	f103 0b01 	add.w	fp, r3, #1
  4074c8:	3501      	adds	r5, #1
  4074ca:	45ab      	cmp	fp, r5
  4074cc:	bfa8      	it	ge
  4074ce:	46ab      	movge	fp, r5
  4074d0:	fa0f fb8b 	sxth.w	fp, fp
  4074d4:	e7c1      	b.n	40745a <trans_create+0x112>
        LV_ASSERT_MEM(tr);
  4074d6:	4622      	mov	r2, r4
  4074d8:	2300      	movs	r3, #0
  4074da:	4856      	ldr	r0, [pc, #344]	; (407634 <trans_create+0x2ec>)
  4074dc:	4956      	ldr	r1, [pc, #344]	; (407638 <trans_create+0x2f0>)
  4074de:	4788      	blx	r1
  4074e0:	e7fe      	b.n	4074e0 <trans_create+0x198>
        style_list->skip_trans = 1;
  4074e2:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  4074e4:	f043 0309 	orr.w	r3, r3, #9
  4074e8:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  4074ea:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
  4074ee:	462a      	mov	r2, r5
  4074f0:	4639      	mov	r1, r7
  4074f2:	4620      	mov	r0, r4
  4074f4:	f8df b144 	ldr.w	fp, [pc, #324]	; 40763c <trans_create+0x2f4>
  4074f8:	47d8      	blx	fp
  4074fa:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  4074fe:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
  407502:	462a      	mov	r2, r5
  407504:	4639      	mov	r1, r7
  407506:	4620      	mov	r0, r4
  407508:	47d8      	blx	fp
  40750a:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  40750c:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  40750e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407512:	f36a 03c3 	bfi	r3, sl, #3, #1
  407516:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
  407518:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  40751c:	b283      	uxth	r3, r0
  40751e:	429a      	cmp	r2, r3
  407520:	d023      	beq.n	40756a <trans_create+0x222>
        obj->state = prev_state;
  407522:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
  407526:	462a      	mov	r2, r5
  407528:	4639      	mov	r1, r7
  40752a:	4620      	mov	r0, r4
  40752c:	4b43      	ldr	r3, [pc, #268]	; (40763c <trans_create+0x2f4>)
  40752e:	4798      	blx	r3
  407530:	4602      	mov	r2, r0
  407532:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407536:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
  40753a:	4629      	mov	r1, r5
  40753c:	9800      	ldr	r0, [sp, #0]
  40753e:	4b40      	ldr	r3, [pc, #256]	; (407640 <trans_create+0x2f8>)
  407540:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407542:	4836      	ldr	r0, [pc, #216]	; (40761c <trans_create+0x2d4>)
  407544:	4b36      	ldr	r3, [pc, #216]	; (407620 <trans_create+0x2d8>)
  407546:	4798      	blx	r3
  407548:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  40754a:	4b36      	ldr	r3, [pc, #216]	; (407624 <trans_create+0x2dc>)
  40754c:	4798      	blx	r3
  40754e:	b928      	cbnz	r0, 40755c <trans_create+0x214>
  407550:	4622      	mov	r2, r4
  407552:	2300      	movs	r3, #0
  407554:	4837      	ldr	r0, [pc, #220]	; (407634 <trans_create+0x2ec>)
  407556:	4938      	ldr	r1, [pc, #224]	; (407638 <trans_create+0x2f0>)
  407558:	4788      	blx	r1
  40755a:	e7fe      	b.n	40755a <trans_create+0x212>
        if(tr == NULL) return NULL;
  40755c:	b12c      	cbz	r4, 40756a <trans_create+0x222>
        tr->start_value._color = c1;
  40755e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  407562:	8123      	strh	r3, [r4, #8]
        tr->end_value._color = c2;
  407564:	f8a4 b00c 	strh.w	fp, [r4, #12]
  407568:	e782      	b.n	407470 <trans_create+0x128>
        if(c1.full == c2.full) return NULL;
  40756a:	2400      	movs	r4, #0
  40756c:	e780      	b.n	407470 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  40756e:	4622      	mov	r2, r4
  407570:	2300      	movs	r3, #0
  407572:	4830      	ldr	r0, [pc, #192]	; (407634 <trans_create+0x2ec>)
  407574:	4930      	ldr	r1, [pc, #192]	; (407638 <trans_create+0x2f0>)
  407576:	4788      	blx	r1
  407578:	e7fe      	b.n	407578 <trans_create+0x230>
        obj->state = prev_state;
  40757a:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        style_list->skip_trans = 1;
  40757e:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407580:	f043 0309 	orr.w	r3, r3, #9
  407584:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407586:	462a      	mov	r2, r5
  407588:	4639      	mov	r1, r7
  40758a:	4620      	mov	r0, r4
  40758c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 40764c <trans_create+0x304>
  407590:	47d8      	blx	fp
  407592:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407594:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
  407598:	462a      	mov	r2, r5
  40759a:	4639      	mov	r1, r7
  40759c:	4620      	mov	r0, r4
  40759e:	47d8      	blx	fp
  4075a0:	a904      	add	r1, sp, #16
  4075a2:	f841 0d04 	str.w	r0, [r1, #-4]!
        style_list->skip_trans = 0;
  4075a6:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  4075a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4075ac:	f36a 03c3 	bfi	r3, sl, #3, #1
  4075b0:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  4075b2:	2204      	movs	r2, #4
  4075b4:	a802      	add	r0, sp, #8
  4075b6:	4b23      	ldr	r3, [pc, #140]	; (407644 <trans_create+0x2fc>)
  4075b8:	4798      	blx	r3
  4075ba:	b300      	cbz	r0, 4075fe <trans_create+0x2b6>
        obj->state = prev_state;
  4075bc:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
  4075c0:	462a      	mov	r2, r5
  4075c2:	4639      	mov	r1, r7
  4075c4:	4620      	mov	r0, r4
  4075c6:	47d8      	blx	fp
  4075c8:	4602      	mov	r2, r0
  4075ca:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  4075cc:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
  4075d0:	4629      	mov	r1, r5
  4075d2:	9800      	ldr	r0, [sp, #0]
  4075d4:	4b1c      	ldr	r3, [pc, #112]	; (407648 <trans_create+0x300>)
  4075d6:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  4075d8:	4810      	ldr	r0, [pc, #64]	; (40761c <trans_create+0x2d4>)
  4075da:	4b11      	ldr	r3, [pc, #68]	; (407620 <trans_create+0x2d8>)
  4075dc:	4798      	blx	r3
  4075de:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  4075e0:	4b10      	ldr	r3, [pc, #64]	; (407624 <trans_create+0x2dc>)
  4075e2:	4798      	blx	r3
  4075e4:	b128      	cbz	r0, 4075f2 <trans_create+0x2aa>
        if(tr == NULL) return NULL;
  4075e6:	b154      	cbz	r4, 4075fe <trans_create+0x2b6>
        tr->start_value._ptr = p1;
  4075e8:	9b02      	ldr	r3, [sp, #8]
  4075ea:	60a3      	str	r3, [r4, #8]
        tr->end_value._ptr = p2;
  4075ec:	9b03      	ldr	r3, [sp, #12]
  4075ee:	60e3      	str	r3, [r4, #12]
  4075f0:	e73e      	b.n	407470 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  4075f2:	4622      	mov	r2, r4
  4075f4:	2300      	movs	r3, #0
  4075f6:	480f      	ldr	r0, [pc, #60]	; (407634 <trans_create+0x2ec>)
  4075f8:	490f      	ldr	r1, [pc, #60]	; (407638 <trans_create+0x2f0>)
  4075fa:	4788      	blx	r1
  4075fc:	e7fe      	b.n	4075fc <trans_create+0x2b4>
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  4075fe:	2400      	movs	r4, #0
  407600:	e736      	b.n	407470 <trans_create+0x128>
        if(int1 == int2)  return NULL;
  407602:	2400      	movs	r4, #0
  407604:	e734      	b.n	407470 <trans_create+0x128>
        if(o1 == o2) return NULL;
  407606:	2400      	movs	r4, #0
  407608:	e732      	b.n	407470 <trans_create+0x128>
  40760a:	bf00      	nop
  40760c:	004054e1 	.word	0x004054e1
  407610:	0040a035 	.word	0x0040a035
  407614:	00406619 	.word	0x00406619
  407618:	004098e1 	.word	0x004098e1
  40761c:	2043a228 	.word	0x2043a228
  407620:	004152dd 	.word	0x004152dd
  407624:	00415065 	.word	0x00415065
  407628:	00406ba5 	.word	0x00406ba5
  40762c:	004095c1 	.word	0x004095c1
  407630:	00405481 	.word	0x00405481
  407634:	00421264 	.word	0x00421264
  407638:	00415071 	.word	0x00415071
  40763c:	00406591 	.word	0x00406591
  407640:	00409751 	.word	0x00409751
  407644:	0041e759 	.word	0x0041e759
  407648:	00409a71 	.word	0x00409a71
  40764c:	00406a9d 	.word	0x00406a9d

00407650 <lv_obj_get_group>:
{
  407650:	b510      	push	{r4, lr}
  407652:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407654:	4b05      	ldr	r3, [pc, #20]	; (40766c <lv_obj_get_group+0x1c>)
  407656:	4798      	blx	r3
  407658:	b108      	cbz	r0, 40765e <lv_obj_get_group+0xe>
}
  40765a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  40765c:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40765e:	4622      	mov	r2, r4
  407660:	2300      	movs	r3, #0
  407662:	4803      	ldr	r0, [pc, #12]	; (407670 <lv_obj_get_group+0x20>)
  407664:	4903      	ldr	r1, [pc, #12]	; (407674 <lv_obj_get_group+0x24>)
  407666:	4788      	blx	r1
  407668:	e7fe      	b.n	407668 <lv_obj_get_group+0x18>
  40766a:	bf00      	nop
  40766c:	00415065 	.word	0x00415065
  407670:	00421278 	.word	0x00421278
  407674:	00415071 	.word	0x00415071

00407678 <lv_obj_is_focused>:
{
  407678:	b538      	push	{r3, r4, r5, lr}
  40767a:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40767c:	4b0a      	ldr	r3, [pc, #40]	; (4076a8 <lv_obj_is_focused+0x30>)
  40767e:	4798      	blx	r3
  407680:	b148      	cbz	r0, 407696 <lv_obj_is_focused+0x1e>
  407682:	4604      	mov	r4, r0
    if(obj->group_p) {
  407684:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  407686:	b160      	cbz	r0, 4076a2 <lv_obj_is_focused+0x2a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
  407688:	4b08      	ldr	r3, [pc, #32]	; (4076ac <lv_obj_is_focused+0x34>)
  40768a:	4798      	blx	r3
  40768c:	4285      	cmp	r5, r0
  40768e:	d000      	beq.n	407692 <lv_obj_is_focused+0x1a>
    return false;
  407690:	2400      	movs	r4, #0
}
  407692:	4620      	mov	r0, r4
  407694:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407696:	462a      	mov	r2, r5
  407698:	2300      	movs	r3, #0
  40769a:	4805      	ldr	r0, [pc, #20]	; (4076b0 <lv_obj_is_focused+0x38>)
  40769c:	4905      	ldr	r1, [pc, #20]	; (4076b4 <lv_obj_is_focused+0x3c>)
  40769e:	4788      	blx	r1
  4076a0:	e7fe      	b.n	4076a0 <lv_obj_is_focused+0x28>
    return false;
  4076a2:	2400      	movs	r4, #0
  4076a4:	e7f5      	b.n	407692 <lv_obj_is_focused+0x1a>
  4076a6:	bf00      	nop
  4076a8:	00415065 	.word	0x00415065
  4076ac:	0040347d 	.word	0x0040347d
  4076b0:	00421278 	.word	0x00421278
  4076b4:	00415071 	.word	0x00415071

004076b8 <lv_obj_is_point_on_coords>:
{
  4076b8:	b500      	push	{lr}
  4076ba:	b083      	sub	sp, #12
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
  4076bc:	8a02      	ldrh	r2, [r0, #16]
  4076be:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
  4076c2:	1ad2      	subs	r2, r2, r3
  4076c4:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
  4076c8:	8a82      	ldrh	r2, [r0, #20]
  4076ca:	4413      	add	r3, r2
  4076cc:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
  4076d0:	8a42      	ldrh	r2, [r0, #18]
  4076d2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4076d6:	1ad2      	subs	r2, r2, r3
  4076d8:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
  4076dc:	8ac2      	ldrh	r2, [r0, #22]
  4076de:	4413      	add	r3, r2
  4076e0:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
  4076e4:	2200      	movs	r2, #0
  4076e6:	4668      	mov	r0, sp
  4076e8:	4b02      	ldr	r3, [pc, #8]	; (4076f4 <lv_obj_is_point_on_coords+0x3c>)
  4076ea:	4798      	blx	r3
}
  4076ec:	b003      	add	sp, #12
  4076ee:	f85d fb04 	ldr.w	pc, [sp], #4
  4076f2:	bf00      	nop
  4076f4:	00414841 	.word	0x00414841

004076f8 <lv_obj_hittest>:
{
  4076f8:	b500      	push	{lr}
  4076fa:	b083      	sub	sp, #12
    if(obj->adv_hittest) {
  4076fc:	f990 3034 	ldrsb.w	r3, [r0, #52]	; 0x34
  407700:	2b00      	cmp	r3, #0
  407702:	db04      	blt.n	40770e <lv_obj_hittest+0x16>
        return lv_obj_is_point_on_coords(obj, point);
  407704:	4b07      	ldr	r3, [pc, #28]	; (407724 <lv_obj_hittest+0x2c>)
  407706:	4798      	blx	r3
}
  407708:	b003      	add	sp, #12
  40770a:	f85d fb04 	ldr.w	pc, [sp], #4
        hit_info.point = point;
  40770e:	9100      	str	r1, [sp, #0]
        hit_info.result = true;
  407710:	2301      	movs	r3, #1
  407712:	f88d 3004 	strb.w	r3, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
  407716:	69c3      	ldr	r3, [r0, #28]
  407718:	466a      	mov	r2, sp
  40771a:	210a      	movs	r1, #10
  40771c:	4798      	blx	r3
        return hit_info.result;
  40771e:	f89d 0004 	ldrb.w	r0, [sp, #4]
  407722:	e7f1      	b.n	407708 <lv_obj_hittest+0x10>
  407724:	004076b9 	.word	0x004076b9

00407728 <lv_obj_handle_get_type_signal>:
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  407728:	2300      	movs	r3, #0
  40772a:	2b06      	cmp	r3, #6
  40772c:	d805      	bhi.n	40773a <lv_obj_handle_get_type_signal+0x12>
        if(buf->type[i] == NULL) break;
  40772e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  407732:	b112      	cbz	r2, 40773a <lv_obj_handle_get_type_signal+0x12>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  407734:	3301      	adds	r3, #1
  407736:	b2db      	uxtb	r3, r3
  407738:	e7f7      	b.n	40772a <lv_obj_handle_get_type_signal+0x2>
    buf->type[i] = name;
  40773a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
  40773e:	2001      	movs	r0, #1
  407740:	4770      	bx	lr
	...

00407744 <lv_obj_init_draw_rect_dsc>:
{
  407744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407748:	4605      	mov	r5, r0
  40774a:	460e      	mov	r6, r1
  40774c:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  40774e:	2201      	movs	r2, #1
  407750:	4ba9      	ldr	r3, [pc, #676]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407752:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
  407754:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407756:	f248 020c 	movw	r2, #32780	; 0x800c
  40775a:	4631      	mov	r1, r6
  40775c:	4628      	mov	r0, r5
  40775e:	4ba7      	ldr	r3, [pc, #668]	; (4079fc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407760:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
  407762:	2802      	cmp	r0, #2
  407764:	d966      	bls.n	407834 <lv_obj_init_draw_rect_dsc+0xf0>
  407766:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
  407768:	7b23      	ldrb	r3, [r4, #12]
  40776a:	2b00      	cmp	r3, #0
  40776c:	d16d      	bne.n	40784a <lv_obj_init_draw_rect_dsc+0x106>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  40776e:	2230      	movs	r2, #48	; 0x30
  407770:	4631      	mov	r1, r6
  407772:	4628      	mov	r0, r5
  407774:	4ba0      	ldr	r3, [pc, #640]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407776:	4798      	blx	r3
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
  407778:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
  40777a:	b118      	cbz	r0, 407784 <lv_obj_init_draw_rect_dsc+0x40>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
  40777c:	7d23      	ldrb	r3, [r4, #20]
  40777e:	2b00      	cmp	r3, #0
  407780:	f040 8093 	bne.w	4078aa <lv_obj_init_draw_rect_dsc+0x166>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  407784:	2240      	movs	r2, #64	; 0x40
  407786:	4631      	mov	r1, r6
  407788:	4628      	mov	r0, r5
  40778a:	4b9b      	ldr	r3, [pc, #620]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40778c:	4798      	blx	r3
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
  40778e:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
  407790:	b118      	cbz	r0, 40779a <lv_obj_init_draw_rect_dsc+0x56>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
  407792:	7fa3      	ldrb	r3, [r4, #30]
  407794:	2b00      	cmp	r3, #0
  407796:	f040 80a5 	bne.w	4078e4 <lv_obj_init_draw_rect_dsc+0x1a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  40779a:	226e      	movs	r2, #110	; 0x6e
  40779c:	4631      	mov	r1, r6
  40779e:	4628      	mov	r0, r5
  4077a0:	4b97      	ldr	r3, [pc, #604]	; (407a00 <lv_obj_init_draw_rect_dsc+0x2bc>)
  4077a2:	4798      	blx	r3
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
  4077a4:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
  4077a6:	b120      	cbz	r0, 4077b2 <lv_obj_init_draw_rect_dsc+0x6e>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
  4077a8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4077ac:	2b00      	cmp	r3, #0
  4077ae:	f040 80b5 	bne.w	40791c <lv_obj_init_draw_rect_dsc+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4077b2:	2250      	movs	r2, #80	; 0x50
  4077b4:	4631      	mov	r1, r6
  4077b6:	4628      	mov	r0, r5
  4077b8:	4b8f      	ldr	r3, [pc, #572]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4077ba:	4798      	blx	r3
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
  4077bc:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->shadow_width) {
  4077be:	b120      	cbz	r0, 4077ca <lv_obj_init_draw_rect_dsc+0x86>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  4077c0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4077c4:	2b02      	cmp	r3, #2
  4077c6:	f200 80ee 	bhi.w	4079a6 <lv_obj_init_draw_rect_dsc+0x262>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  4077ca:	227f      	movs	r2, #127	; 0x7f
  4077cc:	4631      	mov	r1, r6
  4077ce:	4628      	mov	r0, r5
  4077d0:	4b8b      	ldr	r3, [pc, #556]	; (407a00 <lv_obj_init_draw_rect_dsc+0x2bc>)
  4077d2:	4798      	blx	r3
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
  4077d4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
  4077d6:	b120      	cbz	r0, 4077e2 <lv_obj_init_draw_rect_dsc+0x9e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
  4077d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4077dc:	2b02      	cmp	r3, #2
  4077de:	f200 8115 	bhi.w	407a0c <lv_obj_init_draw_rect_dsc+0x2c8>
    if(opa_scale < LV_OPA_MAX) {
  4077e2:	2ffc      	cmp	r7, #252	; 0xfc
  4077e4:	d824      	bhi.n	407830 <lv_obj_init_draw_rect_dsc+0xec>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
  4077e6:	7b23      	ldrb	r3, [r4, #12]
  4077e8:	b2bf      	uxth	r7, r7
  4077ea:	fb13 f307 	smulbb	r3, r3, r7
  4077ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4077f2:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
  4077f4:	7d23      	ldrb	r3, [r4, #20]
  4077f6:	fb17 f303 	smulbb	r3, r7, r3
  4077fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4077fe:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
  407800:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  407804:	fb17 f303 	smulbb	r3, r7, r3
  407808:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40780c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
  407810:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  407814:	fb17 f303 	smulbb	r3, r7, r3
  407818:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40781c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
  407820:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  407824:	fb17 f703 	smulbb	r7, r7, r3
  407828:	f3c7 2707 	ubfx	r7, r7, #8, #8
  40782c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  407830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
  407834:	2300      	movs	r3, #0
  407836:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
  407838:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
  40783a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
  40783e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
  407842:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
  407846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  40784a:	222c      	movs	r2, #44	; 0x2c
  40784c:	4631      	mov	r1, r6
  40784e:	4628      	mov	r0, r5
  407850:	4b6a      	ldr	r3, [pc, #424]	; (4079fc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407852:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
  407854:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
  407856:	2802      	cmp	r0, #2
  407858:	d989      	bls.n	40776e <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  40785a:	2229      	movs	r2, #41	; 0x29
  40785c:	4631      	mov	r1, r6
  40785e:	4628      	mov	r0, r5
  407860:	4b68      	ldr	r3, [pc, #416]	; (407a04 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407862:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
  407864:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  407866:	2223      	movs	r2, #35	; 0x23
  407868:	4631      	mov	r1, r6
  40786a:	4628      	mov	r0, r5
  40786c:	4b62      	ldr	r3, [pc, #392]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40786e:	4798      	blx	r3
  407870:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
  407872:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
  407874:	b930      	cbnz	r0, 407884 <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  407876:	2220      	movs	r2, #32
  407878:	4631      	mov	r1, r6
  40787a:	4628      	mov	r0, r5
  40787c:	4b5e      	ldr	r3, [pc, #376]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40787e:	4798      	blx	r3
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
  407880:	7360      	strb	r0, [r4, #13]
  407882:	e774      	b.n	40776e <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
  407884:	222a      	movs	r2, #42	; 0x2a
  407886:	4631      	mov	r1, r6
  407888:	4628      	mov	r0, r5
  40788a:	4b5e      	ldr	r3, [pc, #376]	; (407a04 <lv_obj_init_draw_rect_dsc+0x2c0>)
  40788c:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
  40788e:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  407890:	2221      	movs	r2, #33	; 0x21
  407892:	4631      	mov	r1, r6
  407894:	4628      	mov	r0, r5
  407896:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>
  40789a:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
  40789c:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  40789e:	2222      	movs	r2, #34	; 0x22
  4078a0:	4631      	mov	r1, r6
  4078a2:	4628      	mov	r0, r5
  4078a4:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
  4078a6:	8160      	strh	r0, [r4, #10]
  4078a8:	e7e5      	b.n	407876 <lv_obj_init_draw_rect_dsc+0x132>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  4078aa:	223c      	movs	r2, #60	; 0x3c
  4078ac:	4631      	mov	r1, r6
  4078ae:	4628      	mov	r0, r5
  4078b0:	4b52      	ldr	r3, [pc, #328]	; (4079fc <lv_obj_init_draw_rect_dsc+0x2b8>)
  4078b2:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
  4078b4:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
  4078b6:	2802      	cmp	r0, #2
  4078b8:	d806      	bhi.n	4078c8 <lv_obj_init_draw_rect_dsc+0x184>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  4078ba:	2232      	movs	r2, #50	; 0x32
  4078bc:	4631      	mov	r1, r6
  4078be:	4628      	mov	r0, r5
  4078c0:	4b4d      	ldr	r3, [pc, #308]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4078c2:	4798      	blx	r3
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
  4078c4:	7560      	strb	r0, [r4, #21]
  4078c6:	e75d      	b.n	407784 <lv_obj_init_draw_rect_dsc+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  4078c8:	2231      	movs	r2, #49	; 0x31
  4078ca:	4631      	mov	r1, r6
  4078cc:	4628      	mov	r0, r5
  4078ce:	4b4a      	ldr	r3, [pc, #296]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4078d0:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
  4078d2:	b2c0      	uxtb	r0, r0
  4078d4:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  4078d6:	2239      	movs	r2, #57	; 0x39
  4078d8:	4631      	mov	r1, r6
  4078da:	4628      	mov	r0, r5
  4078dc:	4b49      	ldr	r3, [pc, #292]	; (407a04 <lv_obj_init_draw_rect_dsc+0x2c0>)
  4078de:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
  4078e0:	81e0      	strh	r0, [r4, #14]
  4078e2:	e7ea      	b.n	4078ba <lv_obj_init_draw_rect_dsc+0x176>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4078e4:	224c      	movs	r2, #76	; 0x4c
  4078e6:	4631      	mov	r1, r6
  4078e8:	4628      	mov	r0, r5
  4078ea:	4b44      	ldr	r3, [pc, #272]	; (4079fc <lv_obj_init_draw_rect_dsc+0x2b8>)
  4078ec:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
  4078ee:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
  4078f0:	2802      	cmp	r0, #2
  4078f2:	d806      	bhi.n	407902 <lv_obj_init_draw_rect_dsc+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  4078f4:	2242      	movs	r2, #66	; 0x42
  4078f6:	4631      	mov	r1, r6
  4078f8:	4628      	mov	r0, r5
  4078fa:	4b3f      	ldr	r3, [pc, #252]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4078fc:	4798      	blx	r3
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
  4078fe:	77e0      	strb	r0, [r4, #31]
  407900:	e74b      	b.n	40779a <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  407902:	2241      	movs	r2, #65	; 0x41
  407904:	4631      	mov	r1, r6
  407906:	4628      	mov	r0, r5
  407908:	4b3b      	ldr	r3, [pc, #236]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40790a:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
  40790c:	83a0      	strh	r0, [r4, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  40790e:	2249      	movs	r2, #73	; 0x49
  407910:	4631      	mov	r1, r6
  407912:	4628      	mov	r0, r5
  407914:	4b3b      	ldr	r3, [pc, #236]	; (407a04 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407916:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
  407918:	8320      	strh	r0, [r4, #24]
  40791a:	e7eb      	b.n	4078f4 <lv_obj_init_draw_rect_dsc+0x1b0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  40791c:	226c      	movs	r2, #108	; 0x6c
  40791e:	4631      	mov	r1, r6
  407920:	4628      	mov	r0, r5
  407922:	4b36      	ldr	r3, [pc, #216]	; (4079fc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407924:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
  407926:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
  40792a:	2802      	cmp	r0, #2
  40792c:	f67f af41 	bls.w	4077b2 <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
  407930:	226d      	movs	r2, #109	; 0x6d
  407932:	4631      	mov	r1, r6
  407934:	4628      	mov	r0, r5
  407936:	4b31      	ldr	r3, [pc, #196]	; (4079fc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407938:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
  40793a:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
  40793e:	2261      	movs	r2, #97	; 0x61
  407940:	4631      	mov	r1, r6
  407942:	4628      	mov	r0, r5
  407944:	4b2c      	ldr	r3, [pc, #176]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407946:	4798      	blx	r3
  407948:	3000      	adds	r0, #0
  40794a:	bf18      	it	ne
  40794c:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
  40794e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  407952:	f360 0300 	bfi	r3, r0, #0, #1
  407956:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
  40795a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40795c:	4b2a      	ldr	r3, [pc, #168]	; (407a08 <lv_obj_init_draw_rect_dsc+0x2c4>)
  40795e:	4798      	blx	r3
  407960:	2802      	cmp	r0, #2
  407962:	d00b      	beq.n	40797c <lv_obj_init_draw_rect_dsc+0x238>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
  407964:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  407968:	2b02      	cmp	r3, #2
  40796a:	d815      	bhi.n	407998 <lv_obj_init_draw_rect_dsc+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  40796c:	2260      	movs	r2, #96	; 0x60
  40796e:	4631      	mov	r1, r6
  407970:	4628      	mov	r0, r5
  407972:	4b21      	ldr	r3, [pc, #132]	; (4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407974:	4798      	blx	r3
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
  407976:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  40797a:	e71a      	b.n	4077b2 <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  40797c:	2269      	movs	r2, #105	; 0x69
  40797e:	4631      	mov	r1, r6
  407980:	4628      	mov	r0, r5
  407982:	4b20      	ldr	r3, [pc, #128]	; (407a04 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407984:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  407986:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  407988:	f248 028e 	movw	r2, #32910	; 0x808e
  40798c:	4631      	mov	r1, r6
  40798e:	4628      	mov	r0, r5
  407990:	4b1b      	ldr	r3, [pc, #108]	; (407a00 <lv_obj_init_draw_rect_dsc+0x2bc>)
  407992:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
  407994:	6320      	str	r0, [r4, #48]	; 0x30
  407996:	e7e9      	b.n	40796c <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  407998:	2269      	movs	r2, #105	; 0x69
  40799a:	4631      	mov	r1, r6
  40799c:	4628      	mov	r0, r5
  40799e:	4b19      	ldr	r3, [pc, #100]	; (407a04 <lv_obj_init_draw_rect_dsc+0x2c0>)
  4079a0:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  4079a2:	86a0      	strh	r0, [r4, #52]	; 0x34
  4079a4:	e7e2      	b.n	40796c <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  4079a6:	225c      	movs	r2, #92	; 0x5c
  4079a8:	4631      	mov	r1, r6
  4079aa:	4628      	mov	r0, r5
  4079ac:	4b13      	ldr	r3, [pc, #76]	; (4079fc <lv_obj_init_draw_rect_dsc+0x2b8>)
  4079ae:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
  4079b0:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  4079b4:	2802      	cmp	r0, #2
  4079b6:	f67f af08 	bls.w	4077ca <lv_obj_init_draw_rect_dsc+0x86>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  4079ba:	2251      	movs	r2, #81	; 0x51
  4079bc:	4631      	mov	r1, r6
  4079be:	4628      	mov	r0, r5
  4079c0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4079f8 <lv_obj_init_draw_rect_dsc+0x2b4>
  4079c4:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
  4079c6:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  4079c8:	2252      	movs	r2, #82	; 0x52
  4079ca:	4631      	mov	r1, r6
  4079cc:	4628      	mov	r0, r5
  4079ce:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
  4079d0:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  4079d2:	2253      	movs	r2, #83	; 0x53
  4079d4:	4631      	mov	r1, r6
  4079d6:	4628      	mov	r0, r5
  4079d8:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
  4079da:	8520      	strh	r0, [r4, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  4079dc:	2259      	movs	r2, #89	; 0x59
  4079de:	4631      	mov	r1, r6
  4079e0:	4628      	mov	r0, r5
  4079e2:	4b08      	ldr	r3, [pc, #32]	; (407a04 <lv_obj_init_draw_rect_dsc+0x2c0>)
  4079e4:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
  4079e6:	8420      	strh	r0, [r4, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  4079e8:	2254      	movs	r2, #84	; 0x54
  4079ea:	4631      	mov	r1, r6
  4079ec:	4628      	mov	r0, r5
  4079ee:	47c0      	blx	r8
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
  4079f0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  4079f4:	e6e9      	b.n	4077ca <lv_obj_init_draw_rect_dsc+0x86>
  4079f6:	bf00      	nop
  4079f8:	00406ba5 	.word	0x00406ba5
  4079fc:	00406619 	.word	0x00406619
  407a00:	00406a9d 	.word	0x00406a9d
  407a04:	00406591 	.word	0x00406591
  407a08:	0040c9c5 	.word	0x0040c9c5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  407a0c:	227c      	movs	r2, #124	; 0x7c
  407a0e:	4631      	mov	r1, r6
  407a10:	4628      	mov	r0, r5
  407a12:	4b1d      	ldr	r3, [pc, #116]	; (407a88 <lv_obj_init_draw_rect_dsc+0x344>)
  407a14:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
  407a16:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
  407a1a:	2802      	cmp	r0, #2
  407a1c:	f67f aee1 	bls.w	4077e2 <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  407a20:	2273      	movs	r2, #115	; 0x73
  407a22:	4631      	mov	r1, r6
  407a24:	4628      	mov	r0, r5
  407a26:	f8df 806c 	ldr.w	r8, [pc, #108]	; 407a94 <lv_obj_init_draw_rect_dsc+0x350>
  407a2a:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
  407a2c:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  407a30:	2274      	movs	r2, #116	; 0x74
  407a32:	4631      	mov	r1, r6
  407a34:	4628      	mov	r0, r5
  407a36:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
  407a38:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  407a3c:	2279      	movs	r2, #121	; 0x79
  407a3e:	4631      	mov	r1, r6
  407a40:	4628      	mov	r0, r5
  407a42:	4b12      	ldr	r3, [pc, #72]	; (407a8c <lv_obj_init_draw_rect_dsc+0x348>)
  407a44:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
  407a46:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  407a4a:	227e      	movs	r2, #126	; 0x7e
  407a4c:	4631      	mov	r1, r6
  407a4e:	4628      	mov	r0, r5
  407a50:	4b0f      	ldr	r3, [pc, #60]	; (407a90 <lv_obj_init_draw_rect_dsc+0x34c>)
  407a52:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
  407a54:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  407a56:	2270      	movs	r2, #112	; 0x70
  407a58:	4631      	mov	r1, r6
  407a5a:	4628      	mov	r0, r5
  407a5c:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
  407a5e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
  407a62:	2271      	movs	r2, #113	; 0x71
  407a64:	4631      	mov	r1, r6
  407a66:	4628      	mov	r0, r5
  407a68:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
  407a6a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  407a6e:	2275      	movs	r2, #117	; 0x75
  407a70:	4631      	mov	r1, r6
  407a72:	4628      	mov	r0, r5
  407a74:	47c0      	blx	r8
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
  407a76:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  407a7a:	2272      	movs	r2, #114	; 0x72
  407a7c:	4631      	mov	r1, r6
  407a7e:	4628      	mov	r0, r5
  407a80:	47c0      	blx	r8
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
  407a82:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  407a86:	e6ac      	b.n	4077e2 <lv_obj_init_draw_rect_dsc+0x9e>
  407a88:	00406619 	.word	0x00406619
  407a8c:	00406591 	.word	0x00406591
  407a90:	00406a9d 	.word	0x00406a9d
  407a94:	00406ba5 	.word	0x00406ba5

00407a98 <lv_obj_design>:
{
  407a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407a9c:	b09a      	sub	sp, #104	; 0x68
  407a9e:	4604      	mov	r4, r0
  407aa0:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  407aa2:	2a02      	cmp	r2, #2
  407aa4:	d008      	beq.n	407ab8 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  407aa6:	2a00      	cmp	r2, #0
  407aa8:	d06d      	beq.n	407b86 <lv_obj_design+0xee>
    else if(mode == LV_DESIGN_DRAW_POST) {
  407aaa:	2a01      	cmp	r2, #1
  407aac:	f000 80f4 	beq.w	407c98 <lv_obj_design+0x200>
    return LV_DESIGN_RES_OK;
  407ab0:	2000      	movs	r0, #0
}
  407ab2:	b01a      	add	sp, #104	; 0x68
  407ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  407ab8:	2100      	movs	r1, #0
  407aba:	4ba3      	ldr	r3, [pc, #652]	; (407d48 <lv_obj_design+0x2b0>)
  407abc:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  407abe:	b108      	cbz	r0, 407ac4 <lv_obj_design+0x2c>
  407ac0:	2003      	movs	r0, #3
  407ac2:	e7f6      	b.n	407ab2 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  407ac4:	2201      	movs	r2, #1
  407ac6:	2100      	movs	r1, #0
  407ac8:	4620      	mov	r0, r4
  407aca:	4d9f      	ldr	r5, [pc, #636]	; (407d48 <lv_obj_design+0x2b0>)
  407acc:	47a8      	blx	r5
  407ace:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  407ad0:	2204      	movs	r2, #4
  407ad2:	2100      	movs	r1, #0
  407ad4:	4620      	mov	r0, r4
  407ad6:	47a8      	blx	r5
  407ad8:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  407ada:	2205      	movs	r2, #5
  407adc:	2100      	movs	r1, #0
  407ade:	4620      	mov	r0, r4
  407ae0:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  407ae2:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  407ae6:	aa05      	add	r2, sp, #20
  407ae8:	2308      	movs	r3, #8
    while(len) {
  407aea:	b12b      	cbz	r3, 407af8 <lv_obj_design+0x60>
        *d8 = *s8;
  407aec:	f811 5b01 	ldrb.w	r5, [r1], #1
  407af0:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  407af4:	3b01      	subs	r3, #1
  407af6:	e7f8      	b.n	407aea <lv_obj_design+0x52>
        coords.x1 -= w;
  407af8:	fa1f f888 	uxth.w	r8, r8
  407afc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  407b00:	eba3 0308 	sub.w	r3, r3, r8
  407b04:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
  407b08:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  407b0c:	4498      	add	r8, r3
  407b0e:	f8ad 8018 	strh.w	r8, [sp, #24]
        coords.y1 -= h;
  407b12:	b280      	uxth	r0, r0
  407b14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  407b18:	1a1b      	subs	r3, r3, r0
  407b1a:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
  407b1e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  407b22:	4418      	add	r0, r3
  407b24:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
  407b28:	463a      	mov	r2, r7
  407b2a:	a905      	add	r1, sp, #20
  407b2c:	4630      	mov	r0, r6
  407b2e:	4b87      	ldr	r3, [pc, #540]	; (407d4c <lv_obj_design+0x2b4>)
  407b30:	4798      	blx	r3
  407b32:	b908      	cbnz	r0, 407b38 <lv_obj_design+0xa0>
  407b34:	2002      	movs	r0, #2
  407b36:	e7bc      	b.n	407ab2 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  407b38:	222c      	movs	r2, #44	; 0x2c
  407b3a:	2100      	movs	r1, #0
  407b3c:	4620      	mov	r0, r4
  407b3e:	4b84      	ldr	r3, [pc, #528]	; (407d50 <lv_obj_design+0x2b8>)
  407b40:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  407b42:	28fc      	cmp	r0, #252	; 0xfc
  407b44:	d801      	bhi.n	407b4a <lv_obj_design+0xb2>
  407b46:	2002      	movs	r0, #2
  407b48:	e7b3      	b.n	407ab2 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  407b4a:	2220      	movs	r2, #32
  407b4c:	2100      	movs	r1, #0
  407b4e:	4620      	mov	r0, r4
  407b50:	4b7d      	ldr	r3, [pc, #500]	; (407d48 <lv_obj_design+0x2b0>)
  407b52:	4798      	blx	r3
  407b54:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  407b56:	b108      	cbz	r0, 407b5c <lv_obj_design+0xc4>
  407b58:	2002      	movs	r0, #2
  407b5a:	e7aa      	b.n	407ab2 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  407b5c:	2232      	movs	r2, #50	; 0x32
  407b5e:	2100      	movs	r1, #0
  407b60:	4620      	mov	r0, r4
  407b62:	4b79      	ldr	r3, [pc, #484]	; (407d48 <lv_obj_design+0x2b0>)
  407b64:	4798      	blx	r3
  407b66:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  407b68:	b108      	cbz	r0, 407b6e <lv_obj_design+0xd6>
  407b6a:	2002      	movs	r0, #2
  407b6c:	e7a1      	b.n	407ab2 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407b6e:	f248 020c 	movw	r2, #32780	; 0x800c
  407b72:	2100      	movs	r1, #0
  407b74:	4620      	mov	r0, r4
  407b76:	4b76      	ldr	r3, [pc, #472]	; (407d50 <lv_obj_design+0x2b8>)
  407b78:	4798      	blx	r3
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  407b7a:	28fc      	cmp	r0, #252	; 0xfc
  407b7c:	d901      	bls.n	407b82 <lv_obj_design+0xea>
        return LV_DESIGN_RES_COVER;
  407b7e:	2001      	movs	r0, #1
  407b80:	e797      	b.n	407ab2 <lv_obj_design+0x1a>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  407b82:	2002      	movs	r0, #2
  407b84:	e795      	b.n	407ab2 <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
  407b86:	a805      	add	r0, sp, #20
  407b88:	4b72      	ldr	r3, [pc, #456]	; (407d54 <lv_obj_design+0x2bc>)
  407b8a:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  407b8c:	2233      	movs	r2, #51	; 0x33
  407b8e:	2100      	movs	r1, #0
  407b90:	4620      	mov	r0, r4
  407b92:	4b6d      	ldr	r3, [pc, #436]	; (407d48 <lv_obj_design+0x2b0>)
  407b94:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  407b96:	b128      	cbz	r0, 407ba4 <lv_obj_design+0x10c>
            draw_dsc.border_post = 1;
  407b98:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  407b9c:	f043 0301 	orr.w	r3, r3, #1
  407ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  407ba4:	aa05      	add	r2, sp, #20
  407ba6:	2100      	movs	r1, #0
  407ba8:	4620      	mov	r0, r4
  407baa:	4b6b      	ldr	r3, [pc, #428]	; (407d58 <lv_obj_design+0x2c0>)
  407bac:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  407bae:	2204      	movs	r2, #4
  407bb0:	2100      	movs	r1, #0
  407bb2:	4620      	mov	r0, r4
  407bb4:	4d64      	ldr	r5, [pc, #400]	; (407d48 <lv_obj_design+0x2b0>)
  407bb6:	47a8      	blx	r5
  407bb8:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  407bba:	2205      	movs	r2, #5
  407bbc:	2100      	movs	r1, #0
  407bbe:	4620      	mov	r0, r4
  407bc0:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  407bc2:	f104 0710 	add.w	r7, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  407bc6:	4639      	mov	r1, r7
    uint8_t * d8 = (uint8_t *)dst;
  407bc8:	aa01      	add	r2, sp, #4
  407bca:	2308      	movs	r3, #8
  407bcc:	e004      	b.n	407bd8 <lv_obj_design+0x140>
        *d8 = *s8;
  407bce:	f811 5b01 	ldrb.w	r5, [r1], #1
  407bd2:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  407bd6:	3b01      	subs	r3, #1
    while(len) {
  407bd8:	2b00      	cmp	r3, #0
  407bda:	d1f8      	bne.n	407bce <lv_obj_design+0x136>
        coords.x1 -= w;
  407bdc:	fa1f f888 	uxth.w	r8, r8
  407be0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  407be4:	eba3 0308 	sub.w	r3, r3, r8
  407be8:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
  407bec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  407bf0:	4498      	add	r8, r3
  407bf2:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
  407bf6:	b280      	uxth	r0, r0
  407bf8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  407bfc:	1a1b      	subs	r3, r3, r0
  407bfe:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
  407c02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  407c06:	4418      	add	r0, r3
  407c08:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
  407c0c:	aa05      	add	r2, sp, #20
  407c0e:	4631      	mov	r1, r6
  407c10:	a801      	add	r0, sp, #4
  407c12:	4b52      	ldr	r3, [pc, #328]	; (407d5c <lv_obj_design+0x2c4>)
  407c14:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  407c16:	2202      	movs	r2, #2
  407c18:	2100      	movs	r1, #0
  407c1a:	4620      	mov	r0, r4
  407c1c:	4b4a      	ldr	r3, [pc, #296]	; (407d48 <lv_obj_design+0x2b0>)
  407c1e:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  407c20:	b908      	cbnz	r0, 407c26 <lv_obj_design+0x18e>
    return LV_DESIGN_RES_OK;
  407c22:	2000      	movs	r0, #0
  407c24:	e745      	b.n	407ab2 <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  407c26:	201c      	movs	r0, #28
  407c28:	4b4d      	ldr	r3, [pc, #308]	; (407d60 <lv_obj_design+0x2c8>)
  407c2a:	4798      	blx	r3
  407c2c:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  407c2e:	2201      	movs	r2, #1
  407c30:	2100      	movs	r1, #0
  407c32:	4620      	mov	r0, r4
  407c34:	4b44      	ldr	r3, [pc, #272]	; (407d48 <lv_obj_design+0x2b0>)
  407c36:	4798      	blx	r3
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  407c38:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  407c3c:	f013 0f01 	tst.w	r3, #1
  407c40:	d01e      	beq.n	407c80 <lv_obj_design+0x1e8>
  407c42:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  407c46:	2b01      	cmp	r3, #1
  407c48:	d91a      	bls.n	407c80 <lv_obj_design+0x1e8>
  407c4a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  407c4e:	2b00      	cmp	r3, #0
  407c50:	dd16      	ble.n	407c80 <lv_obj_design+0x1e8>
                cc_area.x1 = obj->coords.x1 + 1;
  407c52:	8a23      	ldrh	r3, [r4, #16]
  407c54:	3301      	adds	r3, #1
  407c56:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
  407c5a:	8a63      	ldrh	r3, [r4, #18]
  407c5c:	3301      	adds	r3, #1
  407c5e:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
  407c62:	8aa3      	ldrh	r3, [r4, #20]
  407c64:	3b01      	subs	r3, #1
  407c66:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
  407c6a:	8ae3      	ldrh	r3, [r4, #22]
  407c6c:	3b01      	subs	r3, #1
  407c6e:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
  407c72:	2300      	movs	r3, #0
  407c74:	4602      	mov	r2, r0
  407c76:	a903      	add	r1, sp, #12
  407c78:	4628      	mov	r0, r5
  407c7a:	4e3a      	ldr	r6, [pc, #232]	; (407d64 <lv_obj_design+0x2cc>)
  407c7c:	47b0      	blx	r6
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  407c7e:	e005      	b.n	407c8c <lv_obj_design+0x1f4>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
  407c80:	2300      	movs	r3, #0
  407c82:	4602      	mov	r2, r0
  407c84:	4639      	mov	r1, r7
  407c86:	4628      	mov	r0, r5
  407c88:	4e36      	ldr	r6, [pc, #216]	; (407d64 <lv_obj_design+0x2cc>)
  407c8a:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
  407c8c:	f504 7118 	add.w	r1, r4, #608	; 0x260
  407c90:	4628      	mov	r0, r5
  407c92:	4b35      	ldr	r3, [pc, #212]	; (407d68 <lv_obj_design+0x2d0>)
  407c94:	4798      	blx	r3
  407c96:	e7c4      	b.n	407c22 <lv_obj_design+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  407c98:	2202      	movs	r2, #2
  407c9a:	2100      	movs	r1, #0
  407c9c:	4b2a      	ldr	r3, [pc, #168]	; (407d48 <lv_obj_design+0x2b0>)
  407c9e:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  407ca0:	b938      	cbnz	r0, 407cb2 <lv_obj_design+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  407ca2:	2233      	movs	r2, #51	; 0x33
  407ca4:	2100      	movs	r1, #0
  407ca6:	4620      	mov	r0, r4
  407ca8:	4b27      	ldr	r3, [pc, #156]	; (407d48 <lv_obj_design+0x2b0>)
  407caa:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  407cac:	b940      	cbnz	r0, 407cc0 <lv_obj_design+0x228>
    return LV_DESIGN_RES_OK;
  407cae:	2000      	movs	r0, #0
  407cb0:	e6ff      	b.n	407ab2 <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
  407cb2:	f504 7018 	add.w	r0, r4, #608	; 0x260
  407cb6:	4b2d      	ldr	r3, [pc, #180]	; (407d6c <lv_obj_design+0x2d4>)
  407cb8:	4798      	blx	r3
            _lv_mem_buf_release(param);
  407cba:	4b2d      	ldr	r3, [pc, #180]	; (407d70 <lv_obj_design+0x2d8>)
  407cbc:	4798      	blx	r3
  407cbe:	e7f0      	b.n	407ca2 <lv_obj_design+0x20a>
            lv_draw_rect_dsc_init(&draw_dsc);
  407cc0:	a805      	add	r0, sp, #20
  407cc2:	4b24      	ldr	r3, [pc, #144]	; (407d54 <lv_obj_design+0x2bc>)
  407cc4:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  407cc6:	2500      	movs	r5, #0
  407cc8:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  407ccc:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  407cd0:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
  407cd4:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  407cd8:	aa05      	add	r2, sp, #20
  407cda:	4629      	mov	r1, r5
  407cdc:	4620      	mov	r0, r4
  407cde:	4b1e      	ldr	r3, [pc, #120]	; (407d58 <lv_obj_design+0x2c0>)
  407ce0:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  407ce2:	2204      	movs	r2, #4
  407ce4:	4629      	mov	r1, r5
  407ce6:	4620      	mov	r0, r4
  407ce8:	4f17      	ldr	r7, [pc, #92]	; (407d48 <lv_obj_design+0x2b0>)
  407cea:	47b8      	blx	r7
  407cec:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  407cee:	2205      	movs	r2, #5
  407cf0:	4629      	mov	r1, r5
  407cf2:	4620      	mov	r0, r4
  407cf4:	47b8      	blx	r7
            lv_area_copy(&coords, &obj->coords);
  407cf6:	3410      	adds	r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  407cf8:	aa03      	add	r2, sp, #12
  407cfa:	2308      	movs	r3, #8
  407cfc:	e004      	b.n	407d08 <lv_obj_design+0x270>
        *d8 = *s8;
  407cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
  407d02:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  407d06:	3b01      	subs	r3, #1
    while(len) {
  407d08:	2b00      	cmp	r3, #0
  407d0a:	d1f8      	bne.n	407cfe <lv_obj_design+0x266>
            coords.x1 -= w;
  407d0c:	fa1f f788 	uxth.w	r7, r8
  407d10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407d14:	1bdb      	subs	r3, r3, r7
  407d16:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
  407d1a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  407d1e:	441f      	add	r7, r3
  407d20:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
  407d24:	b280      	uxth	r0, r0
  407d26:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  407d2a:	1a1b      	subs	r3, r3, r0
  407d2c:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
  407d30:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  407d34:	4418      	add	r0, r3
  407d36:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
  407d3a:	aa05      	add	r2, sp, #20
  407d3c:	4631      	mov	r1, r6
  407d3e:	a803      	add	r0, sp, #12
  407d40:	4b06      	ldr	r3, [pc, #24]	; (407d5c <lv_obj_design+0x2c4>)
  407d42:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  407d44:	2000      	movs	r0, #0
  407d46:	e6b4      	b.n	407ab2 <lv_obj_design+0x1a>
  407d48:	00406ba5 	.word	0x00406ba5
  407d4c:	00414a15 	.word	0x00414a15
  407d50:	00406619 	.word	0x00406619
  407d54:	004116a5 	.word	0x004116a5
  407d58:	00407745 	.word	0x00407745
  407d5c:	004116f1 	.word	0x004116f1
  407d60:	00415b15 	.word	0x00415b15
  407d64:	0040f0ad 	.word	0x0040f0ad
  407d68:	0040ee31 	.word	0x0040ee31
  407d6c:	0040eed9 	.word	0x0040eed9
  407d70:	004158c5 	.word	0x004158c5

00407d74 <lv_obj_init_draw_label_dsc>:
{
  407d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407d76:	4605      	mov	r5, r0
  407d78:	460e      	mov	r6, r1
  407d7a:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
  407d7c:	f248 028c 	movw	r2, #32908	; 0x808c
  407d80:	4b2a      	ldr	r3, [pc, #168]	; (407e2c <lv_obj_init_draw_label_dsc+0xb8>)
  407d82:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
  407d84:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  407d86:	2802      	cmp	r0, #2
  407d88:	d800      	bhi.n	407d8c <lv_obj_init_draw_label_dsc+0x18>
  407d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407d8c:	f248 020c 	movw	r2, #32780	; 0x800c
  407d90:	4631      	mov	r1, r6
  407d92:	4628      	mov	r0, r5
  407d94:	4b25      	ldr	r3, [pc, #148]	; (407e2c <lv_obj_init_draw_label_dsc+0xb8>)
  407d96:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  407d98:	28fc      	cmp	r0, #252	; 0xfc
  407d9a:	d805      	bhi.n	407da8 <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  407d9c:	7b23      	ldrb	r3, [r4, #12]
  407d9e:	fb10 f003 	smulbb	r0, r0, r3
  407da2:	f3c0 2007 	ubfx	r0, r0, #8, #8
  407da6:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  407da8:	7b23      	ldrb	r3, [r4, #12]
  407daa:	2b02      	cmp	r3, #2
  407dac:	d9ed      	bls.n	407d8a <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  407dae:	f248 0289 	movw	r2, #32905	; 0x8089
  407db2:	4631      	mov	r1, r6
  407db4:	4628      	mov	r0, r5
  407db6:	4b1e      	ldr	r3, [pc, #120]	; (407e30 <lv_obj_init_draw_label_dsc+0xbc>)
  407db8:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
  407dba:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  407dbc:	f248 0280 	movw	r2, #32896	; 0x8080
  407dc0:	4631      	mov	r1, r6
  407dc2:	4628      	mov	r0, r5
  407dc4:	4f1b      	ldr	r7, [pc, #108]	; (407e34 <lv_obj_init_draw_label_dsc+0xc0>)
  407dc6:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
  407dc8:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  407dca:	f248 0281 	movw	r2, #32897	; 0x8081
  407dce:	4631      	mov	r1, r6
  407dd0:	4628      	mov	r0, r5
  407dd2:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
  407dd4:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  407dd6:	f248 0282 	movw	r2, #32898	; 0x8082
  407dda:	4631      	mov	r1, r6
  407ddc:	4628      	mov	r0, r5
  407dde:	47b8      	blx	r7
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
  407de0:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  407de4:	f248 0283 	movw	r2, #32899	; 0x8083
  407de8:	4631      	mov	r1, r6
  407dea:	4628      	mov	r0, r5
  407dec:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
  407dee:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  407df2:	f248 028e 	movw	r2, #32910	; 0x808e
  407df6:	4631      	mov	r1, r6
  407df8:	4628      	mov	r0, r5
  407dfa:	4b0f      	ldr	r3, [pc, #60]	; (407e38 <lv_obj_init_draw_label_dsc+0xc4>)
  407dfc:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
  407dfe:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
  407e00:	6962      	ldr	r2, [r4, #20]
  407e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
  407e06:	429a      	cmp	r2, r3
  407e08:	d0bf      	beq.n	407d8a <lv_obj_init_draw_label_dsc+0x16>
  407e0a:	69a2      	ldr	r2, [r4, #24]
  407e0c:	429a      	cmp	r2, r3
  407e0e:	d0bc      	beq.n	407d8a <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  407e10:	f248 028a 	movw	r2, #32906	; 0x808a
  407e14:	4631      	mov	r1, r6
  407e16:	4628      	mov	r0, r5
  407e18:	4f05      	ldr	r7, [pc, #20]	; (407e30 <lv_obj_init_draw_label_dsc+0xbc>)
  407e1a:	47b8      	blx	r7
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
  407e1c:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  407e1e:	f248 028b 	movw	r2, #32907	; 0x808b
  407e22:	4631      	mov	r1, r6
  407e24:	4628      	mov	r0, r5
  407e26:	47b8      	blx	r7
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
  407e28:	80a0      	strh	r0, [r4, #4]
  407e2a:	e7ae      	b.n	407d8a <lv_obj_init_draw_label_dsc+0x16>
  407e2c:	00406619 	.word	0x00406619
  407e30:	00406591 	.word	0x00406591
  407e34:	00406ba5 	.word	0x00406ba5
  407e38:	00406a9d 	.word	0x00406a9d

00407e3c <lv_obj_init_draw_img_dsc>:
{
  407e3c:	b570      	push	{r4, r5, r6, lr}
  407e3e:	4605      	mov	r5, r0
  407e40:	460e      	mov	r6, r1
  407e42:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  407e44:	f248 02ac 	movw	r2, #32940	; 0x80ac
  407e48:	4b25      	ldr	r3, [pc, #148]	; (407ee0 <lv_obj_init_draw_img_dsc+0xa4>)
  407e4a:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
  407e4c:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  407e4e:	2802      	cmp	r0, #2
  407e50:	d800      	bhi.n	407e54 <lv_obj_init_draw_img_dsc+0x18>
  407e52:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407e54:	f248 020c 	movw	r2, #32780	; 0x800c
  407e58:	4631      	mov	r1, r6
  407e5a:	4628      	mov	r0, r5
  407e5c:	4b20      	ldr	r3, [pc, #128]	; (407ee0 <lv_obj_init_draw_img_dsc+0xa4>)
  407e5e:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  407e60:	28fc      	cmp	r0, #252	; 0xfc
  407e62:	d805      	bhi.n	407e70 <lv_obj_init_draw_img_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  407e64:	7823      	ldrb	r3, [r4, #0]
  407e66:	fb10 f003 	smulbb	r0, r0, r3
  407e6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
  407e6e:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  407e70:	7823      	ldrb	r3, [r4, #0]
  407e72:	2b02      	cmp	r3, #2
  407e74:	d9ed      	bls.n	407e52 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
  407e76:	2300      	movs	r3, #0
  407e78:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
  407e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
  407e7e:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  407e80:	8aab      	ldrh	r3, [r5, #20]
  407e82:	8a2a      	ldrh	r2, [r5, #16]
  407e84:	1a9b      	subs	r3, r3, r2
  407e86:	b29b      	uxth	r3, r3
  407e88:	3301      	adds	r3, #1
  407e8a:	b21b      	sxth	r3, r3
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  407e8c:	2b00      	cmp	r3, #0
  407e8e:	db1b      	blt.n	407ec8 <lv_obj_init_draw_img_dsc+0x8c>
  407e90:	105b      	asrs	r3, r3, #1
  407e92:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  407e94:	8aeb      	ldrh	r3, [r5, #22]
  407e96:	8a6a      	ldrh	r2, [r5, #18]
  407e98:	1a9b      	subs	r3, r3, r2
  407e9a:	b29b      	uxth	r3, r3
  407e9c:	3301      	adds	r3, #1
  407e9e:	b21b      	sxth	r3, r3
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  407ea0:	2b00      	cmp	r3, #0
  407ea2:	db13      	blt.n	407ecc <lv_obj_init_draw_img_dsc+0x90>
  407ea4:	105b      	asrs	r3, r3, #1
  407ea6:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  407ea8:	f248 02ad 	movw	r2, #32941	; 0x80ad
  407eac:	4631      	mov	r1, r6
  407eae:	4628      	mov	r0, r5
  407eb0:	4b0b      	ldr	r3, [pc, #44]	; (407ee0 <lv_obj_init_draw_img_dsc+0xa4>)
  407eb2:	4798      	blx	r3
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
  407eb4:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
  407eb6:	b958      	cbnz	r0, 407ed0 <lv_obj_init_draw_img_dsc+0x94>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  407eb8:	f248 02a0 	movw	r2, #32928	; 0x80a0
  407ebc:	4631      	mov	r1, r6
  407ebe:	4628      	mov	r0, r5
  407ec0:	4b08      	ldr	r3, [pc, #32]	; (407ee4 <lv_obj_init_draw_img_dsc+0xa8>)
  407ec2:	4798      	blx	r3
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
  407ec4:	73a0      	strb	r0, [r4, #14]
  407ec6:	e7c4      	b.n	407e52 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  407ec8:	3301      	adds	r3, #1
  407eca:	e7e1      	b.n	407e90 <lv_obj_init_draw_img_dsc+0x54>
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  407ecc:	3301      	adds	r3, #1
  407ece:	e7e9      	b.n	407ea4 <lv_obj_init_draw_img_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  407ed0:	f248 02a9 	movw	r2, #32937	; 0x80a9
  407ed4:	4631      	mov	r1, r6
  407ed6:	4628      	mov	r0, r5
  407ed8:	4b03      	ldr	r3, [pc, #12]	; (407ee8 <lv_obj_init_draw_img_dsc+0xac>)
  407eda:	4798      	blx	r3
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
  407edc:	81a0      	strh	r0, [r4, #12]
  407ede:	e7eb      	b.n	407eb8 <lv_obj_init_draw_img_dsc+0x7c>
  407ee0:	00406619 	.word	0x00406619
  407ee4:	00406ba5 	.word	0x00406ba5
  407ee8:	00406591 	.word	0x00406591

00407eec <lv_obj_init_draw_line_dsc>:
{
  407eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407eee:	4605      	mov	r5, r0
  407ef0:	460e      	mov	r6, r1
  407ef2:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  407ef4:	2290      	movs	r2, #144	; 0x90
  407ef6:	4b24      	ldr	r3, [pc, #144]	; (407f88 <lv_obj_init_draw_line_dsc+0x9c>)
  407ef8:	4798      	blx	r3
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
  407efa:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
  407efc:	b900      	cbnz	r0, 407f00 <lv_obj_init_draw_line_dsc+0x14>
  407efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
  407f00:	229c      	movs	r2, #156	; 0x9c
  407f02:	4631      	mov	r1, r6
  407f04:	4628      	mov	r0, r5
  407f06:	4b21      	ldr	r3, [pc, #132]	; (407f8c <lv_obj_init_draw_line_dsc+0xa0>)
  407f08:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
  407f0a:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  407f0c:	2802      	cmp	r0, #2
  407f0e:	d9f6      	bls.n	407efe <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407f10:	f248 020c 	movw	r2, #32780	; 0x800c
  407f14:	4631      	mov	r1, r6
  407f16:	4628      	mov	r0, r5
  407f18:	4b1c      	ldr	r3, [pc, #112]	; (407f8c <lv_obj_init_draw_line_dsc+0xa0>)
  407f1a:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  407f1c:	28fc      	cmp	r0, #252	; 0xfc
  407f1e:	d805      	bhi.n	407f2c <lv_obj_init_draw_line_dsc+0x40>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  407f20:	7a23      	ldrb	r3, [r4, #8]
  407f22:	fb10 f003 	smulbb	r0, r0, r3
  407f26:	f3c0 2007 	ubfx	r0, r0, #8, #8
  407f2a:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  407f2c:	7a23      	ldrb	r3, [r4, #8]
  407f2e:	2b02      	cmp	r3, #2
  407f30:	d9e5      	bls.n	407efe <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  407f32:	2299      	movs	r2, #153	; 0x99
  407f34:	4631      	mov	r1, r6
  407f36:	4628      	mov	r0, r5
  407f38:	4b15      	ldr	r3, [pc, #84]	; (407f90 <lv_obj_init_draw_line_dsc+0xa4>)
  407f3a:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
  407f3c:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  407f3e:	2292      	movs	r2, #146	; 0x92
  407f40:	4631      	mov	r1, r6
  407f42:	4628      	mov	r0, r5
  407f44:	4b10      	ldr	r3, [pc, #64]	; (407f88 <lv_obj_init_draw_line_dsc+0x9c>)
  407f46:	4798      	blx	r3
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
  407f48:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
  407f4a:	b9b0      	cbnz	r0, 407f7a <lv_obj_init_draw_line_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  407f4c:	2294      	movs	r2, #148	; 0x94
  407f4e:	4631      	mov	r1, r6
  407f50:	4628      	mov	r0, r5
  407f52:	4f0d      	ldr	r7, [pc, #52]	; (407f88 <lv_obj_init_draw_line_dsc+0x9c>)
  407f54:	47b8      	blx	r7
  407f56:	3000      	adds	r0, #0
  407f58:	bf18      	it	ne
  407f5a:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
  407f5c:	7a63      	ldrb	r3, [r4, #9]
  407f5e:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
  407f62:	f360 03c3 	bfi	r3, r0, #3, #1
  407f66:	7263      	strb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  407f68:	2291      	movs	r2, #145	; 0x91
  407f6a:	4631      	mov	r1, r6
  407f6c:	4628      	mov	r0, r5
  407f6e:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
  407f70:	7a63      	ldrb	r3, [r4, #9]
  407f72:	f360 0301 	bfi	r3, r0, #0, #2
  407f76:	7263      	strb	r3, [r4, #9]
  407f78:	e7c1      	b.n	407efe <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  407f7a:	2293      	movs	r2, #147	; 0x93
  407f7c:	4631      	mov	r1, r6
  407f7e:	4628      	mov	r0, r5
  407f80:	4b01      	ldr	r3, [pc, #4]	; (407f88 <lv_obj_init_draw_line_dsc+0x9c>)
  407f82:	4798      	blx	r3
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
  407f84:	80e0      	strh	r0, [r4, #6]
  407f86:	e7e1      	b.n	407f4c <lv_obj_init_draw_line_dsc+0x60>
  407f88:	00406ba5 	.word	0x00406ba5
  407f8c:	00406619 	.word	0x00406619
  407f90:	00406591 	.word	0x00406591

00407f94 <style_snapshot>:
{
  407f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f98:	b083      	sub	sp, #12
  407f9a:	4605      	mov	r5, r0
  407f9c:	4689      	mov	r9, r1
  407f9e:	4614      	mov	r4, r2
    _lv_obj_disable_style_caching(obj, true);
  407fa0:	2101      	movs	r1, #1
  407fa2:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 408194 <style_snapshot+0x200>
  407fa6:	47c0      	blx	r8
    _lv_memset_00(shot, sizeof(style_snapshot_t));
  407fa8:	21bc      	movs	r1, #188	; 0xbc
  407faa:	4620      	mov	r0, r4
  407fac:	4b6d      	ldr	r3, [pc, #436]	; (408164 <style_snapshot+0x1d0>)
  407fae:	4798      	blx	r3
    lv_draw_rect_dsc_init(&shot->rect);
  407fb0:	4620      	mov	r0, r4
  407fb2:	4b6d      	ldr	r3, [pc, #436]	; (408168 <style_snapshot+0x1d4>)
  407fb4:	4798      	blx	r3
    lv_draw_label_dsc_init(&shot->label);
  407fb6:	f104 0a54 	add.w	sl, r4, #84	; 0x54
  407fba:	4650      	mov	r0, sl
  407fbc:	4b6b      	ldr	r3, [pc, #428]	; (40816c <style_snapshot+0x1d8>)
  407fbe:	4798      	blx	r3
    lv_draw_img_dsc_init(&shot->img);
  407fc0:	f104 0382 	add.w	r3, r4, #130	; 0x82
  407fc4:	9301      	str	r3, [sp, #4]
  407fc6:	4618      	mov	r0, r3
  407fc8:	4b69      	ldr	r3, [pc, #420]	; (408170 <style_snapshot+0x1dc>)
  407fca:	4798      	blx	r3
    lv_draw_line_dsc_init(&shot->line);
  407fcc:	f104 0678 	add.w	r6, r4, #120	; 0x78
  407fd0:	4630      	mov	r0, r6
  407fd2:	4b68      	ldr	r3, [pc, #416]	; (408174 <style_snapshot+0x1e0>)
  407fd4:	4798      	blx	r3
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407fd6:	4649      	mov	r1, r9
  407fd8:	4628      	mov	r0, r5
  407fda:	4b67      	ldr	r3, [pc, #412]	; (408178 <style_snapshot+0x1e4>)
  407fdc:	4798      	blx	r3
  407fde:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
  407fe0:	7943      	ldrb	r3, [r0, #5]
  407fe2:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
  407fe6:	f043 0301 	orr.w	r3, r3, #1
  407fea:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
  407fec:	4622      	mov	r2, r4
  407fee:	4649      	mov	r1, r9
  407ff0:	4628      	mov	r0, r5
  407ff2:	4b62      	ldr	r3, [pc, #392]	; (40817c <style_snapshot+0x1e8>)
  407ff4:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
  407ff6:	4652      	mov	r2, sl
  407ff8:	4649      	mov	r1, r9
  407ffa:	4628      	mov	r0, r5
  407ffc:	4b60      	ldr	r3, [pc, #384]	; (408180 <style_snapshot+0x1ec>)
  407ffe:	4798      	blx	r3
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
  408000:	9a01      	ldr	r2, [sp, #4]
  408002:	4649      	mov	r1, r9
  408004:	4628      	mov	r0, r5
  408006:	4b5f      	ldr	r3, [pc, #380]	; (408184 <style_snapshot+0x1f0>)
  408008:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
  40800a:	4632      	mov	r2, r6
  40800c:	4649      	mov	r1, r9
  40800e:	4628      	mov	r0, r5
  408010:	4b5d      	ldr	r3, [pc, #372]	; (408188 <style_snapshot+0x1f4>)
  408012:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  408014:	2210      	movs	r2, #16
  408016:	4649      	mov	r1, r9
  408018:	4628      	mov	r0, r5
  40801a:	4e5c      	ldr	r6, [pc, #368]	; (40818c <style_snapshot+0x1f8>)
  40801c:	47b0      	blx	r6
    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
  40801e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  408022:	2211      	movs	r2, #17
  408024:	4649      	mov	r1, r9
  408026:	4628      	mov	r0, r5
  408028:	47b0      	blx	r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
  40802a:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  40802e:	2213      	movs	r2, #19
  408030:	4649      	mov	r1, r9
  408032:	4628      	mov	r0, r5
  408034:	47b0      	blx	r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
  408036:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  40803a:	2212      	movs	r2, #18
  40803c:	4649      	mov	r1, r9
  40803e:	4628      	mov	r0, r5
  408040:	47b0      	blx	r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
  408042:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  408046:	2214      	movs	r2, #20
  408048:	4649      	mov	r1, r9
  40804a:	4628      	mov	r0, r5
  40804c:	47b0      	blx	r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
  40804e:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  408052:	2215      	movs	r2, #21
  408054:	4649      	mov	r1, r9
  408056:	4628      	mov	r0, r5
  408058:	47b0      	blx	r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
  40805a:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  40805e:	2216      	movs	r2, #22
  408060:	4649      	mov	r1, r9
  408062:	4628      	mov	r0, r5
  408064:	47b0      	blx	r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
  408066:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  40806a:	2217      	movs	r2, #23
  40806c:	4649      	mov	r1, r9
  40806e:	4628      	mov	r0, r5
  408070:	47b0      	blx	r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
  408072:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  408076:	2218      	movs	r2, #24
  408078:	4649      	mov	r1, r9
  40807a:	4628      	mov	r0, r5
  40807c:	47b0      	blx	r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
  40807e:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  408082:	2203      	movs	r2, #3
  408084:	4649      	mov	r1, r9
  408086:	4628      	mov	r0, r5
  408088:	47b0      	blx	r6
    shot->size = lv_obj_get_style_size(obj, part);
  40808a:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40808e:	2204      	movs	r2, #4
  408090:	4649      	mov	r1, r9
  408092:	4628      	mov	r0, r5
  408094:	47b0      	blx	r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
  408096:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40809a:	2205      	movs	r2, #5
  40809c:	4649      	mov	r1, r9
  40809e:	4628      	mov	r0, r5
  4080a0:	47b0      	blx	r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
  4080a2:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  4080a6:	2206      	movs	r2, #6
  4080a8:	4649      	mov	r1, r9
  4080aa:	4628      	mov	r0, r5
  4080ac:	47b0      	blx	r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
  4080ae:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4080b2:	2207      	movs	r2, #7
  4080b4:	4649      	mov	r1, r9
  4080b6:	4628      	mov	r0, r5
  4080b8:	47b0      	blx	r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
  4080ba:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  4080be:	22c0      	movs	r2, #192	; 0xc0
  4080c0:	4649      	mov	r1, r9
  4080c2:	4628      	mov	r0, r5
  4080c4:	47b0      	blx	r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
  4080c6:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
  4080ca:	22c1      	movs	r2, #193	; 0xc1
  4080cc:	4649      	mov	r1, r9
  4080ce:	4628      	mov	r0, r5
  4080d0:	47b0      	blx	r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
  4080d2:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  4080d6:	22c2      	movs	r2, #194	; 0xc2
  4080d8:	4649      	mov	r1, r9
  4080da:	4628      	mov	r0, r5
  4080dc:	47b0      	blx	r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
  4080de:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  4080e2:	22c3      	movs	r2, #195	; 0xc3
  4080e4:	4649      	mov	r1, r9
  4080e6:	4628      	mov	r0, r5
  4080e8:	47b0      	blx	r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
  4080ea:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  4080ee:	22c9      	movs	r2, #201	; 0xc9
  4080f0:	4649      	mov	r1, r9
  4080f2:	4628      	mov	r0, r5
  4080f4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 408198 <style_snapshot+0x204>
  4080f8:	47d0      	blx	sl
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
  4080fa:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  4080fe:	22ca      	movs	r2, #202	; 0xca
  408100:	4649      	mov	r1, r9
  408102:	4628      	mov	r0, r5
  408104:	47d0      	blx	sl
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
  408106:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  40810a:	f248 020c 	movw	r2, #32780	; 0x800c
  40810e:	4649      	mov	r1, r9
  408110:	4628      	mov	r0, r5
  408112:	4b1f      	ldr	r3, [pc, #124]	; (408190 <style_snapshot+0x1fc>)
  408114:	4798      	blx	r3
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
  408116:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  40811a:	2202      	movs	r2, #2
  40811c:	4649      	mov	r1, r9
  40811e:	4628      	mov	r0, r5
  408120:	47b0      	blx	r6
  408122:	3000      	adds	r0, #0
  408124:	bf18      	it	ne
  408126:	2001      	movne	r0, #1
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
  408128:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  40812c:	f360 0300 	bfi	r3, r0, #0, #1
  408130:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408134:	2233      	movs	r2, #51	; 0x33
  408136:	4649      	mov	r1, r9
  408138:	4628      	mov	r0, r5
  40813a:	47b0      	blx	r6
  40813c:	3000      	adds	r0, #0
  40813e:	bf18      	it	ne
  408140:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
  408142:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408146:	f360 0341 	bfi	r3, r0, #1, #1
  40814a:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
  40814e:	2100      	movs	r1, #0
  408150:	4628      	mov	r0, r5
  408152:	47c0      	blx	r8
    list->skip_trans = trans_ori;
  408154:	797b      	ldrb	r3, [r7, #5]
  408156:	f36b 0300 	bfi	r3, fp, #0, #1
  40815a:	717b      	strb	r3, [r7, #5]
}
  40815c:	b003      	add	sp, #12
  40815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408162:	bf00      	nop
  408164:	00415ca1 	.word	0x00415ca1
  408168:	004116a5 	.word	0x004116a5
  40816c:	0040d26d 	.word	0x0040d26d
  408170:	0040c6d9 	.word	0x0040c6d9
  408174:	0040e0bd 	.word	0x0040e0bd
  408178:	004054e1 	.word	0x004054e1
  40817c:	00407745 	.word	0x00407745
  408180:	00407d75 	.word	0x00407d75
  408184:	00407e3d 	.word	0x00407e3d
  408188:	00407eed 	.word	0x00407eed
  40818c:	00406ba5 	.word	0x00406ba5
  408190:	00406619 	.word	0x00406619
  408194:	004055d5 	.word	0x004055d5
  408198:	00406591 	.word	0x00406591

0040819c <lv_obj_set_state>:
    if(obj->state == new_state) return;
  40819c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  4081a0:	428b      	cmp	r3, r1
  4081a2:	f000 80e4 	beq.w	40836e <lv_obj_set_state+0x1d2>
{
  4081a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4081aa:	b0e5      	sub	sp, #404	; 0x194
  4081ac:	4688      	mov	r8, r1
  4081ae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4081b0:	4b6f      	ldr	r3, [pc, #444]	; (408370 <lv_obj_set_state+0x1d4>)
  4081b2:	4798      	blx	r3
  4081b4:	b120      	cbz	r0, 4081c0 <lv_obj_set_state+0x24>
    lv_state_t prev_state = obj->state;
  4081b6:	f894 a03d 	ldrb.w	sl, [r4, #61]	; 0x3d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  4081ba:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
  4081bc:	46ab      	mov	fp, r5
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  4081be:	e007      	b.n	4081d0 <lv_obj_set_state+0x34>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4081c0:	4622      	mov	r2, r4
  4081c2:	2300      	movs	r3, #0
  4081c4:	486b      	ldr	r0, [pc, #428]	; (408374 <lv_obj_set_state+0x1d8>)
  4081c6:	496c      	ldr	r1, [pc, #432]	; (408378 <lv_obj_set_state+0x1dc>)
  4081c8:	4788      	blx	r1
  4081ca:	e7fe      	b.n	4081ca <lv_obj_set_state+0x2e>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  4081cc:	3501      	adds	r5, #1
  4081ce:	b2ed      	uxtb	r5, r5
  4081d0:	2d3f      	cmp	r5, #63	; 0x3f
  4081d2:	d81c      	bhi.n	40820e <lv_obj_set_state+0x72>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  4081d4:	4629      	mov	r1, r5
  4081d6:	4620      	mov	r0, r4
  4081d8:	4b68      	ldr	r3, [pc, #416]	; (40837c <lv_obj_set_state+0x1e0>)
  4081da:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  4081dc:	b1b8      	cbz	r0, 40820e <lv_obj_set_state+0x72>
        obj->state = prev_state;
  4081de:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
  4081e2:	aa06      	add	r2, sp, #24
  4081e4:	4629      	mov	r1, r5
  4081e6:	4620      	mov	r0, r4
  4081e8:	4e65      	ldr	r6, [pc, #404]	; (408380 <lv_obj_set_state+0x1e4>)
  4081ea:	47b0      	blx	r6
        obj->state = new_state;
  4081ec:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
  4081f0:	aa35      	add	r2, sp, #212	; 0xd4
  4081f2:	4629      	mov	r1, r5
  4081f4:	4620      	mov	r0, r4
  4081f6:	47b0      	blx	r6
        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
  4081f8:	a935      	add	r1, sp, #212	; 0xd4
  4081fa:	a806      	add	r0, sp, #24
  4081fc:	4b61      	ldr	r3, [pc, #388]	; (408384 <lv_obj_set_state+0x1e8>)
  4081fe:	4798      	blx	r3
        if(r == STYLE_COMPARE_DIFF) {
  408200:	2802      	cmp	r0, #2
  408202:	d003      	beq.n	40820c <lv_obj_set_state+0x70>
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
  408204:	2801      	cmp	r0, #1
  408206:	d1e1      	bne.n	4081cc <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
  408208:	4683      	mov	fp, r0
  40820a:	e7df      	b.n	4081cc <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_DIFF;
  40820c:	4683      	mov	fp, r0
    obj->state = new_state;
  40820e:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
  408212:	f1bb 0f00 	cmp.w	fp, #0
  408216:	f000 80a3 	beq.w	408360 <lv_obj_set_state+0x1c4>
  40821a:	2500      	movs	r5, #0
  40821c:	f8cd a014 	str.w	sl, [sp, #20]
  408220:	e04b      	b.n	4082ba <lv_obj_set_state+0x11e>
                    a.early_apply = 0;
  408222:	f89d 310e 	ldrb.w	r3, [sp, #270]	; 0x10e
  408226:	f36f 0300 	bfc	r3, #0, #1
  40822a:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
                    lv_anim_start(&a);
  40822e:	a835      	add	r0, sp, #212	; 0xd4
  408230:	4b55      	ldr	r3, [pc, #340]	; (408388 <lv_obj_set_state+0x1ec>)
  408232:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  408234:	3601      	adds	r6, #1
  408236:	b2f6      	uxtb	r6, r6
  408238:	2e05      	cmp	r6, #5
  40823a:	d836      	bhi.n	4082aa <lv_obj_set_state+0x10e>
            if(props[i] != 0) {
  40823c:	ab06      	add	r3, sp, #24
  40823e:	f833 7016 	ldrh.w	r7, [r3, r6, lsl #1]
  408242:	2f00      	cmp	r7, #0
  408244:	d0f6      	beq.n	408234 <lv_obj_set_state+0x98>
                _lv_style_list_add_trans_style(style_list);
  408246:	4650      	mov	r0, sl
  408248:	4b50      	ldr	r3, [pc, #320]	; (40838c <lv_obj_set_state+0x1f0>)
  40824a:	4798      	blx	r3
                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
  40824c:	f8cd 8000 	str.w	r8, [sp]
  408250:	9b05      	ldr	r3, [sp, #20]
  408252:	462a      	mov	r2, r5
  408254:	4639      	mov	r1, r7
  408256:	4620      	mov	r0, r4
  408258:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4083b4 <lv_obj_set_state+0x218>
  40825c:	47c8      	blx	r9
                if(tr) {
  40825e:	4681      	mov	r9, r0
  408260:	2800      	cmp	r0, #0
  408262:	d0e7      	beq.n	408234 <lv_obj_set_state+0x98>
                    tr->obj = obj;
  408264:	6004      	str	r4, [r0, #0]
                    tr->prop = props[i];
  408266:	8087      	strh	r7, [r0, #4]
                    tr->part = part;
  408268:	7185      	strb	r5, [r0, #6]
                    lv_anim_init(&a);
  40826a:	a835      	add	r0, sp, #212	; 0xd4
  40826c:	4b48      	ldr	r3, [pc, #288]	; (408390 <lv_obj_set_state+0x1f4>)
  40826e:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  408270:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
  408274:	4b47      	ldr	r3, [pc, #284]	; (408394 <lv_obj_set_state+0x1f8>)
  408276:	9336      	str	r3, [sp, #216]	; 0xd8
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
  408278:	4b47      	ldr	r3, [pc, #284]	; (408398 <lv_obj_set_state+0x1fc>)
  40827a:	9337      	str	r3, [sp, #220]	; 0xdc
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
  40827c:	4b47      	ldr	r3, [pc, #284]	; (40839c <lv_obj_set_state+0x200>)
  40827e:	9338      	str	r3, [sp, #224]	; 0xe0
    a->start = start;
  408280:	2300      	movs	r3, #0
  408282:	933b      	str	r3, [sp, #236]	; 0xec
    a->current = start;
  408284:	933c      	str	r3, [sp, #240]	; 0xf0
    a->end   = end;
  408286:	23ff      	movs	r3, #255	; 0xff
  408288:	933d      	str	r3, [sp, #244]	; 0xf4
    a->time     = duration;
  40828a:	9b04      	ldr	r3, [sp, #16]
  40828c:	933e      	str	r3, [sp, #248]	; 0xf8
    a->act_time = -(int32_t)(delay);
  40828e:	9b03      	ldr	r3, [sp, #12]
  408290:	425b      	negs	r3, r3
  408292:	933f      	str	r3, [sp, #252]	; 0xfc
    const uint8_t * s8 = (const uint8_t *)src;
  408294:	9902      	ldr	r1, [sp, #8]
    uint8_t * d8 = (uint8_t *)dst;
  408296:	aa39      	add	r2, sp, #228	; 0xe4
  408298:	2308      	movs	r3, #8
    while(len) {
  40829a:	2b00      	cmp	r3, #0
  40829c:	d0c1      	beq.n	408222 <lv_obj_set_state+0x86>
        *d8 = *s8;
  40829e:	f811 0b01 	ldrb.w	r0, [r1], #1
  4082a2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4082a6:	3b01      	subs	r3, #1
  4082a8:	e7f7      	b.n	40829a <lv_obj_set_state+0xfe>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  4082aa:	f1bb 0f02 	cmp.w	fp, #2
  4082ae:	d048      	beq.n	408342 <lv_obj_set_state+0x1a6>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  4082b0:	f1bb 0f01 	cmp.w	fp, #1
  4082b4:	d04b      	beq.n	40834e <lv_obj_set_state+0x1b2>
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
  4082b6:	3501      	adds	r5, #1
  4082b8:	b2ed      	uxtb	r5, r5
  4082ba:	2d3f      	cmp	r5, #63	; 0x3f
  4082bc:	d84d      	bhi.n	40835a <lv_obj_set_state+0x1be>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  4082be:	4629      	mov	r1, r5
  4082c0:	4620      	mov	r0, r4
  4082c2:	4b2e      	ldr	r3, [pc, #184]	; (40837c <lv_obj_set_state+0x1e0>)
  4082c4:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  4082c6:	4682      	mov	sl, r0
  4082c8:	2800      	cmp	r0, #0
  4082ca:	d046      	beq.n	40835a <lv_obj_set_state+0x1be>
        if(style_list->ignore_trans) continue;
  4082cc:	7943      	ldrb	r3, [r0, #5]
  4082ce:	f013 0f02 	tst.w	r3, #2
  4082d2:	d1f0      	bne.n	4082b6 <lv_obj_set_state+0x11a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  4082d4:	22b0      	movs	r2, #176	; 0xb0
  4082d6:	4629      	mov	r1, r5
  4082d8:	4620      	mov	r0, r4
  4082da:	4e31      	ldr	r6, [pc, #196]	; (4083a0 <lv_obj_set_state+0x204>)
  4082dc:	47b0      	blx	r6
  4082de:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  4082e0:	22b1      	movs	r2, #177	; 0xb1
  4082e2:	4629      	mov	r1, r5
  4082e4:	4620      	mov	r0, r4
  4082e6:	47b0      	blx	r6
  4082e8:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
  4082ea:	22be      	movs	r2, #190	; 0xbe
  4082ec:	4629      	mov	r1, r5
  4082ee:	4620      	mov	r0, r4
  4082f0:	4b2c      	ldr	r3, [pc, #176]	; (4083a4 <lv_obj_set_state+0x208>)
  4082f2:	4798      	blx	r3
  4082f4:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
  4082f6:	22b2      	movs	r2, #178	; 0xb2
  4082f8:	4629      	mov	r1, r5
  4082fa:	4620      	mov	r0, r4
  4082fc:	47b0      	blx	r6
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
  4082fe:	f8ad 0018 	strh.w	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
  408302:	22b3      	movs	r2, #179	; 0xb3
  408304:	4629      	mov	r1, r5
  408306:	4620      	mov	r0, r4
  408308:	47b0      	blx	r6
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
  40830a:	f8ad 001a 	strh.w	r0, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  40830e:	22b4      	movs	r2, #180	; 0xb4
  408310:	4629      	mov	r1, r5
  408312:	4620      	mov	r0, r4
  408314:	47b0      	blx	r6
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
  408316:	f8ad 001c 	strh.w	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  40831a:	22b5      	movs	r2, #181	; 0xb5
  40831c:	4629      	mov	r1, r5
  40831e:	4620      	mov	r0, r4
  408320:	47b0      	blx	r6
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
  408322:	f8ad 001e 	strh.w	r0, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  408326:	22b6      	movs	r2, #182	; 0xb6
  408328:	4629      	mov	r1, r5
  40832a:	4620      	mov	r0, r4
  40832c:	47b0      	blx	r6
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
  40832e:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  408332:	22b7      	movs	r2, #183	; 0xb7
  408334:	4629      	mov	r1, r5
  408336:	4620      	mov	r0, r4
  408338:	47b0      	blx	r6
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
  40833a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  40833e:	2600      	movs	r6, #0
  408340:	e77a      	b.n	408238 <lv_obj_set_state+0x9c>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408342:	22ff      	movs	r2, #255	; 0xff
  408344:	4629      	mov	r1, r5
  408346:	4620      	mov	r0, r4
  408348:	4b17      	ldr	r3, [pc, #92]	; (4083a8 <lv_obj_set_state+0x20c>)
  40834a:	4798      	blx	r3
  40834c:	e7b0      	b.n	4082b0 <lv_obj_set_state+0x114>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
  40834e:	22ff      	movs	r2, #255	; 0xff
  408350:	4629      	mov	r1, r5
  408352:	4620      	mov	r0, r4
  408354:	4b15      	ldr	r3, [pc, #84]	; (4083ac <lv_obj_set_state+0x210>)
  408356:	4798      	blx	r3
  408358:	e7ad      	b.n	4082b6 <lv_obj_set_state+0x11a>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  40835a:	f1bb 0f01 	cmp.w	fp, #1
  40835e:	d002      	beq.n	408366 <lv_obj_set_state+0x1ca>
}
  408360:	b065      	add	sp, #404	; 0x194
  408362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(obj);
  408366:	4620      	mov	r0, r4
  408368:	4b11      	ldr	r3, [pc, #68]	; (4083b0 <lv_obj_set_state+0x214>)
  40836a:	4798      	blx	r3
  40836c:	e7f8      	b.n	408360 <lv_obj_set_state+0x1c4>
  40836e:	4770      	bx	lr
  408370:	00415065 	.word	0x00415065
  408374:	00421278 	.word	0x00421278
  408378:	00415071 	.word	0x00415071
  40837c:	004054e1 	.word	0x004054e1
  408380:	00407f95 	.word	0x00407f95
  408384:	00404f01 	.word	0x00404f01
  408388:	0041468d 	.word	0x0041468d
  40838c:	0040a1d5 	.word	0x0040a1d5
  408390:	004145d5 	.word	0x004145d5
  408394:	0040717d 	.word	0x0040717d
  408398:	004072d5 	.word	0x004072d5
  40839c:	0040561d 	.word	0x0040561d
  4083a0:	00406ba5 	.word	0x00406ba5
  4083a4:	00406a9d 	.word	0x00406a9d
  4083a8:	00406f6d 	.word	0x00406f6d
  4083ac:	00406ef1 	.word	0x00406ef1
  4083b0:	0040582d 	.word	0x0040582d
  4083b4:	00407349 	.word	0x00407349

004083b8 <lv_obj_add_state>:
{
  4083b8:	b538      	push	{r3, r4, r5, lr}
  4083ba:	4605      	mov	r5, r0
  4083bc:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4083be:	4b09      	ldr	r3, [pc, #36]	; (4083e4 <lv_obj_add_state+0x2c>)
  4083c0:	4798      	blx	r3
  4083c2:	b148      	cbz	r0, 4083d8 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
  4083c4:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  4083c8:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
  4083cc:	428b      	cmp	r3, r1
  4083ce:	d002      	beq.n	4083d6 <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
  4083d0:	4628      	mov	r0, r5
  4083d2:	4b05      	ldr	r3, [pc, #20]	; (4083e8 <lv_obj_add_state+0x30>)
  4083d4:	4798      	blx	r3
  4083d6:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4083d8:	462a      	mov	r2, r5
  4083da:	2300      	movs	r3, #0
  4083dc:	4803      	ldr	r0, [pc, #12]	; (4083ec <lv_obj_add_state+0x34>)
  4083de:	4904      	ldr	r1, [pc, #16]	; (4083f0 <lv_obj_add_state+0x38>)
  4083e0:	4788      	blx	r1
  4083e2:	e7fe      	b.n	4083e2 <lv_obj_add_state+0x2a>
  4083e4:	00415065 	.word	0x00415065
  4083e8:	0040819d 	.word	0x0040819d
  4083ec:	00421278 	.word	0x00421278
  4083f0:	00415071 	.word	0x00415071

004083f4 <lv_obj_clear_state>:
{
  4083f4:	b538      	push	{r3, r4, r5, lr}
  4083f6:	4604      	mov	r4, r0
  4083f8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4083fa:	4b0a      	ldr	r3, [pc, #40]	; (408424 <lv_obj_clear_state+0x30>)
  4083fc:	4798      	blx	r3
  4083fe:	b158      	cbz	r0, 408418 <lv_obj_clear_state+0x24>
    lv_state_t new_state = obj->state & (~state);
  408400:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  408404:	b259      	sxtb	r1, r3
  408406:	ea21 0105 	bic.w	r1, r1, r5
  40840a:	b2c9      	uxtb	r1, r1
    if(obj->state != new_state) {
  40840c:	428b      	cmp	r3, r1
  40840e:	d002      	beq.n	408416 <lv_obj_clear_state+0x22>
        lv_obj_set_state(obj, new_state);
  408410:	4620      	mov	r0, r4
  408412:	4b05      	ldr	r3, [pc, #20]	; (408428 <lv_obj_clear_state+0x34>)
  408414:	4798      	blx	r3
  408416:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408418:	4622      	mov	r2, r4
  40841a:	2300      	movs	r3, #0
  40841c:	4803      	ldr	r0, [pc, #12]	; (40842c <lv_obj_clear_state+0x38>)
  40841e:	4904      	ldr	r1, [pc, #16]	; (408430 <lv_obj_clear_state+0x3c>)
  408420:	4788      	blx	r1
  408422:	e7fe      	b.n	408422 <lv_obj_clear_state+0x2e>
  408424:	00415065 	.word	0x00415065
  408428:	0040819d 	.word	0x0040819d
  40842c:	00421278 	.word	0x00421278
  408430:	00415071 	.word	0x00415071

00408434 <lv_obj_get_draw_rect_ext_pad_size>:
{
  408434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408438:	b089      	sub	sp, #36	; 0x24
  40843a:	4604      	mov	r4, r0
  40843c:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  40843e:	2250      	movs	r2, #80	; 0x50
  408440:	4b78      	ldr	r3, [pc, #480]	; (408624 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408442:	4798      	blx	r3
    if(sh_width) {
  408444:	4607      	mov	r7, r0
  408446:	bb68      	cbnz	r0, 4084a4 <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  408448:	227f      	movs	r2, #127	; 0x7f
  40844a:	4631      	mov	r1, r6
  40844c:	4620      	mov	r0, r4
  40844e:	4b76      	ldr	r3, [pc, #472]	; (408628 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  408450:	4798      	blx	r3
    if(value_str) {
  408452:	4605      	mov	r5, r0
  408454:	b130      	cbz	r0, 408464 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  408456:	227c      	movs	r2, #124	; 0x7c
  408458:	4631      	mov	r1, r6
  40845a:	4620      	mov	r0, r4
  40845c:	4b73      	ldr	r3, [pc, #460]	; (40862c <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  40845e:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
  408460:	2802      	cmp	r0, #2
  408462:	d851      	bhi.n	408508 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  408464:	2240      	movs	r2, #64	; 0x40
  408466:	4631      	mov	r1, r6
  408468:	4620      	mov	r0, r4
  40846a:	4b6e      	ldr	r3, [pc, #440]	; (408624 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  40846c:	4798      	blx	r3
    if(outline_width) {
  40846e:	4605      	mov	r5, r0
  408470:	2800      	cmp	r0, #0
  408472:	f040 80c4 	bne.w	4085fe <lv_obj_get_draw_rect_ext_pad_size+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408476:	2204      	movs	r2, #4
  408478:	4631      	mov	r1, r6
  40847a:	4620      	mov	r0, r4
  40847c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 408624 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  408480:	47c0      	blx	r8
  408482:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408484:	2205      	movs	r2, #5
  408486:	4631      	mov	r1, r6
  408488:	4620      	mov	r0, r4
  40848a:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
  40848c:	42a8      	cmp	r0, r5
  40848e:	bfb8      	it	lt
  408490:	4628      	movlt	r0, r5
  408492:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
  408494:	2800      	cmp	r0, #0
  408496:	dd01      	ble.n	40849c <lv_obj_get_draw_rect_ext_pad_size+0x68>
  408498:	4438      	add	r0, r7
  40849a:	b207      	sxth	r7, r0
}
  40849c:	4638      	mov	r0, r7
  40849e:	b009      	add	sp, #36	; 0x24
  4084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  4084a4:	225c      	movs	r2, #92	; 0x5c
  4084a6:	4631      	mov	r1, r6
  4084a8:	4620      	mov	r0, r4
  4084aa:	4b60      	ldr	r3, [pc, #384]	; (40862c <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  4084ac:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
  4084ae:	2802      	cmp	r0, #2
  4084b0:	d801      	bhi.n	4084b6 <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
  4084b2:	2700      	movs	r7, #0
  4084b4:	e7c8      	b.n	408448 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  4084b6:	463b      	mov	r3, r7
  4084b8:	2f00      	cmp	r7, #0
  4084ba:	db23      	blt.n	408504 <lv_obj_get_draw_rect_ext_pad_size+0xd0>
  4084bc:	f343 074f 	sbfx	r7, r3, #1, #16
            sh_width++;
  4084c0:	3701      	adds	r7, #1
  4084c2:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  4084c4:	2253      	movs	r2, #83	; 0x53
  4084c6:	4631      	mov	r1, r6
  4084c8:	4620      	mov	r0, r4
  4084ca:	f8df 8158 	ldr.w	r8, [pc, #344]	; 408624 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  4084ce:	47c0      	blx	r8
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
  4084d0:	fa17 f780 	uxtah	r7, r7, r0
  4084d4:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  4084d6:	2251      	movs	r2, #81	; 0x51
  4084d8:	4631      	mov	r1, r6
  4084da:	4620      	mov	r0, r4
  4084dc:	47c0      	blx	r8
  4084de:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  4084e0:	2252      	movs	r2, #82	; 0x52
  4084e2:	4631      	mov	r1, r6
  4084e4:	4620      	mov	r0, r4
  4084e6:	47c0      	blx	r8
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
  4084e8:	2800      	cmp	r0, #0
  4084ea:	bfb8      	it	lt
  4084ec:	4240      	neglt	r0, r0
  4084ee:	2d00      	cmp	r5, #0
  4084f0:	bfb8      	it	lt
  4084f2:	426d      	neglt	r5, r5
  4084f4:	42a8      	cmp	r0, r5
  4084f6:	bfac      	ite	ge
  4084f8:	183f      	addge	r7, r7, r0
  4084fa:	197f      	addlt	r7, r7, r5
  4084fc:	b238      	sxth	r0, r7
            s = LV_MATH_MAX(s, sh_width);
  4084fe:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
  408502:	e7a1      	b.n	408448 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  408504:	1c7b      	adds	r3, r7, #1
  408506:	e7d9      	b.n	4084bc <lv_obj_get_draw_rect_ext_pad_size+0x88>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  408508:	2270      	movs	r2, #112	; 0x70
  40850a:	4631      	mov	r1, r6
  40850c:	4620      	mov	r0, r4
  40850e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 408624 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  408512:	47c0      	blx	r8
  408514:	4682      	mov	sl, r0
  408516:	2270      	movs	r2, #112	; 0x70
  408518:	4631      	mov	r1, r6
  40851a:	4620      	mov	r0, r4
  40851c:	47c0      	blx	r8
  40851e:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  408520:	227e      	movs	r2, #126	; 0x7e
  408522:	4631      	mov	r1, r6
  408524:	4620      	mov	r0, r4
  408526:	4b40      	ldr	r3, [pc, #256]	; (408628 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  408528:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
  40852a:	f04f 0900 	mov.w	r9, #0
  40852e:	f8cd 9008 	str.w	r9, [sp, #8]
  408532:	f647 4318 	movw	r3, #31768	; 0x7c18
  408536:	9301      	str	r3, [sp, #4]
  408538:	f8cd b000 	str.w	fp, [sp]
  40853c:	4653      	mov	r3, sl
  40853e:	4602      	mov	r2, r0
  408540:	4629      	mov	r1, r5
  408542:	a804      	add	r0, sp, #16
  408544:	4d3a      	ldr	r5, [pc, #232]	; (408630 <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
  408546:	47a8      	blx	r5
            value_area.x1 = 0;
  408548:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
  40854c:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
  408550:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  408554:	3b01      	subs	r3, #1
  408556:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
  40855a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40855e:	3b01      	subs	r3, #1
  408560:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  408564:	2275      	movs	r2, #117	; 0x75
  408566:	4631      	mov	r1, r6
  408568:	4620      	mov	r0, r4
  40856a:	47c0      	blx	r8
  40856c:	fa5f f980 	uxtb.w	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  408570:	2273      	movs	r2, #115	; 0x73
  408572:	4631      	mov	r1, r6
  408574:	4620      	mov	r0, r4
  408576:	47c0      	blx	r8
  408578:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  40857a:	2274      	movs	r2, #116	; 0x74
  40857c:	4631      	mov	r1, r6
  40857e:	4620      	mov	r0, r4
  408580:	47c0      	blx	r8
  408582:	4680      	mov	r8, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
  408584:	ab05      	add	r3, sp, #20
  408586:	464a      	mov	r2, r9
  408588:	a906      	add	r1, sp, #24
  40858a:	f104 0010 	add.w	r0, r4, #16
  40858e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 408634 <lv_obj_get_draw_rect_ext_pad_size+0x200>
  408592:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
  408594:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  408598:	442a      	add	r2, r5
  40859a:	b292      	uxth	r2, r2
  40859c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  4085a0:	4410      	add	r0, r2
  4085a2:	b205      	sxth	r5, r0
            value_area.y1 += p_align.y + yofs;
  4085a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4085a8:	4443      	add	r3, r8
  4085aa:	b29b      	uxth	r3, r3
  4085ac:	f8bd 101a 	ldrh.w	r1, [sp, #26]
  4085b0:	4419      	add	r1, r3
  4085b2:	b209      	sxth	r1, r1
            value_area.x2 += p_align.x + xofs;
  4085b4:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  4085b8:	4402      	add	r2, r0
  4085ba:	b212      	sxth	r2, r2
            value_area.y2 += p_align.y + yofs;
  4085bc:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  4085c0:	4403      	add	r3, r0
  4085c2:	b21b      	sxth	r3, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
  4085c4:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
  4085c8:	1b40      	subs	r0, r0, r5
  4085ca:	42b8      	cmp	r0, r7
  4085cc:	bfb8      	it	lt
  4085ce:	4638      	movlt	r0, r7
  4085d0:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
  4085d2:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  4085d6:	1a69      	subs	r1, r5, r1
  4085d8:	4288      	cmp	r0, r1
  4085da:	bfb8      	it	lt
  4085dc:	4608      	movlt	r0, r1
  4085de:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
  4085e0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  4085e4:	1a52      	subs	r2, r2, r1
  4085e6:	4290      	cmp	r0, r2
  4085e8:	bfb8      	it	lt
  4085ea:	4610      	movlt	r0, r2
  4085ec:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
  4085ee:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
  4085f2:	1bdf      	subs	r7, r3, r7
  4085f4:	42b8      	cmp	r0, r7
  4085f6:	bfb8      	it	lt
  4085f8:	4638      	movlt	r0, r7
  4085fa:	b207      	sxth	r7, r0
  4085fc:	e732      	b.n	408464 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4085fe:	224c      	movs	r2, #76	; 0x4c
  408600:	4631      	mov	r1, r6
  408602:	4620      	mov	r0, r4
  408604:	4b09      	ldr	r3, [pc, #36]	; (40862c <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408606:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
  408608:	2802      	cmp	r0, #2
  40860a:	f67f af34 	bls.w	408476 <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  40860e:	2241      	movs	r2, #65	; 0x41
  408610:	4631      	mov	r1, r6
  408612:	4620      	mov	r0, r4
  408614:	4b03      	ldr	r3, [pc, #12]	; (408624 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408616:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
  408618:	4428      	add	r0, r5
  40861a:	42b8      	cmp	r0, r7
  40861c:	bfb8      	it	lt
  40861e:	4638      	movlt	r0, r7
  408620:	b207      	sxth	r7, r0
  408622:	e728      	b.n	408476 <lv_obj_get_draw_rect_ext_pad_size+0x42>
  408624:	00406ba5 	.word	0x00406ba5
  408628:	00406a9d 	.word	0x00406a9d
  40862c:	00406619 	.word	0x00406619
  408630:	004165e9 	.word	0x004165e9
  408634:	00414add 	.word	0x00414add

00408638 <lv_obj_get_focused_obj>:
{
  408638:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  40863a:	4604      	mov	r4, r0
  40863c:	b928      	cbnz	r0, 40864a <lv_obj_get_focused_obj+0x12>
  40863e:	2000      	movs	r0, #0
  408640:	bd10      	pop	{r4, pc}
        focus_obj = lv_obj_get_parent(focus_obj);
  408642:	4620      	mov	r0, r4
  408644:	4b06      	ldr	r3, [pc, #24]	; (408660 <lv_obj_get_focused_obj+0x28>)
  408646:	4798      	blx	r3
  408648:	4604      	mov	r4, r0
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
  40864a:	4620      	mov	r0, r4
  40864c:	4b05      	ldr	r3, [pc, #20]	; (408664 <lv_obj_get_focused_obj+0x2c>)
  40864e:	4798      	blx	r3
  408650:	b118      	cbz	r0, 40865a <lv_obj_get_focused_obj+0x22>
  408652:	2c00      	cmp	r4, #0
  408654:	d1f5      	bne.n	408642 <lv_obj_get_focused_obj+0xa>
    return (lv_obj_t *)focus_obj;
  408656:	4620      	mov	r0, r4
  408658:	bd10      	pop	{r4, pc}
  40865a:	4620      	mov	r0, r4
}
  40865c:	bd10      	pop	{r4, pc}
  40865e:	bf00      	nop
  408660:	004052ad 	.word	0x004052ad
  408664:	004060b5 	.word	0x004060b5

00408668 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
  408668:	2908      	cmp	r1, #8
  40866a:	d01a      	beq.n	4086a2 <lv_obj_signal+0x3a>
{
  40866c:	b510      	push	{r4, lr}
  40866e:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  408670:	2907      	cmp	r1, #7
  408672:	d020      	beq.n	4086b6 <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
  408674:	2901      	cmp	r1, #1
  408676:	d023      	beq.n	4086c0 <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  408678:	2906      	cmp	r1, #6
  40867a:	d027      	beq.n	4086cc <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  40867c:	2903      	cmp	r1, #3
  40867e:	d030      	beq.n	4086e2 <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  408680:	2904      	cmp	r1, #4
  408682:	d039      	beq.n	4086f8 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
  408684:	290b      	cmp	r1, #11
  408686:	d03b      	beq.n	408700 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
  408688:	f1a1 030d 	sub.w	r3, r1, #13
  40868c:	b2db      	uxtb	r3, r3
  40868e:	2b01      	cmp	r3, #1
  408690:	d93b      	bls.n	40870a <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
  408692:	2916      	cmp	r1, #22
  408694:	d03e      	beq.n	408714 <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
  408696:	2917      	cmp	r1, #23
  408698:	d056      	beq.n	408748 <lv_obj_signal+0xe0>
    else if(sign == LV_SIGNAL_CLEANUP) {
  40869a:	2900      	cmp	r1, #0
  40869c:	d05b      	beq.n	408756 <lv_obj_signal+0xee>
    lv_res_t res = LV_RES_OK;
  40869e:	2001      	movs	r0, #1
}
  4086a0:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
  4086a2:	7813      	ldrb	r3, [r2, #0]
  4086a4:	b91b      	cbnz	r3, 4086ae <lv_obj_signal+0x46>
  4086a6:	3028      	adds	r0, #40	; 0x28
  4086a8:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
  4086aa:	2001      	movs	r0, #1
  4086ac:	4770      	bx	lr
        else info->result = NULL;
  4086ae:	2300      	movs	r3, #0
  4086b0:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
  4086b2:	2001      	movs	r0, #1
  4086b4:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4086b6:	492b      	ldr	r1, [pc, #172]	; (408764 <lv_obj_signal+0xfc>)
  4086b8:	4610      	mov	r0, r2
  4086ba:	4b2b      	ldr	r3, [pc, #172]	; (408768 <lv_obj_signal+0x100>)
  4086bc:	4798      	blx	r3
  4086be:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  4086c0:	4b2a      	ldr	r3, [pc, #168]	; (40876c <lv_obj_signal+0x104>)
  4086c2:	4798      	blx	r3
  4086c4:	2800      	cmp	r0, #0
  4086c6:	d14a      	bne.n	40875e <lv_obj_signal+0xf6>
    lv_res_t res = LV_RES_OK;
  4086c8:	2001      	movs	r0, #1
  4086ca:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
  4086cc:	2100      	movs	r1, #0
  4086ce:	4b28      	ldr	r3, [pc, #160]	; (408770 <lv_obj_signal+0x108>)
  4086d0:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
  4086d2:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  4086d6:	4298      	cmp	r0, r3
  4086d8:	bfb8      	it	lt
  4086da:	4618      	movlt	r0, r3
  4086dc:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
  4086de:	2001      	movs	r0, #1
  4086e0:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
  4086e2:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
  4086e6:	f013 0f01 	tst.w	r3, #1
  4086ea:	d101      	bne.n	4086f0 <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
  4086ec:	2001      	movs	r0, #1
  4086ee:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
  4086f0:	4b20      	ldr	r3, [pc, #128]	; (408774 <lv_obj_signal+0x10c>)
  4086f2:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4086f4:	2001      	movs	r0, #1
  4086f6:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
  4086f8:	4b1f      	ldr	r3, [pc, #124]	; (408778 <lv_obj_signal+0x110>)
  4086fa:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4086fc:	2001      	movs	r0, #1
  4086fe:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
  408700:	2110      	movs	r1, #16
  408702:	4b1e      	ldr	r3, [pc, #120]	; (40877c <lv_obj_signal+0x114>)
  408704:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408706:	2001      	movs	r0, #1
  408708:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  40870a:	2110      	movs	r1, #16
  40870c:	4b1c      	ldr	r3, [pc, #112]	; (408780 <lv_obj_signal+0x118>)
  40870e:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408710:	2001      	movs	r0, #1
  408712:	bd10      	pop	{r4, pc}
        editing = lv_group_get_editing(lv_obj_get_group(obj));
  408714:	4b1b      	ldr	r3, [pc, #108]	; (408784 <lv_obj_signal+0x11c>)
  408716:	4798      	blx	r3
  408718:	4b1b      	ldr	r3, [pc, #108]	; (408788 <lv_obj_signal+0x120>)
  40871a:	4798      	blx	r3
        if(editing) {
  40871c:	b138      	cbz	r0, 40872e <lv_obj_signal+0xc6>
            obj = lv_obj_get_focused_obj(obj);
  40871e:	4620      	mov	r0, r4
  408720:	4b1a      	ldr	r3, [pc, #104]	; (40878c <lv_obj_signal+0x124>)
  408722:	4798      	blx	r3
            lv_obj_add_state(obj, state);
  408724:	2106      	movs	r1, #6
  408726:	4b15      	ldr	r3, [pc, #84]	; (40877c <lv_obj_signal+0x114>)
  408728:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40872a:	2001      	movs	r0, #1
  40872c:	bd10      	pop	{r4, pc}
            obj = lv_obj_get_focused_obj(obj);
  40872e:	4620      	mov	r0, r4
  408730:	4b16      	ldr	r3, [pc, #88]	; (40878c <lv_obj_signal+0x124>)
  408732:	4798      	blx	r3
  408734:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
  408736:	2102      	movs	r1, #2
  408738:	4b10      	ldr	r3, [pc, #64]	; (40877c <lv_obj_signal+0x114>)
  40873a:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
  40873c:	2104      	movs	r1, #4
  40873e:	4620      	mov	r0, r4
  408740:	4b0f      	ldr	r3, [pc, #60]	; (408780 <lv_obj_signal+0x118>)
  408742:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408744:	2001      	movs	r0, #1
  408746:	bd10      	pop	{r4, pc}
        obj = lv_obj_get_focused_obj(obj);
  408748:	4b10      	ldr	r3, [pc, #64]	; (40878c <lv_obj_signal+0x124>)
  40874a:	4798      	blx	r3
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
  40874c:	2106      	movs	r1, #6
  40874e:	4b0c      	ldr	r3, [pc, #48]	; (408780 <lv_obj_signal+0x118>)
  408750:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408752:	2001      	movs	r0, #1
  408754:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  408756:	4b0e      	ldr	r3, [pc, #56]	; (408790 <lv_obj_signal+0x128>)
  408758:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40875a:	2001      	movs	r0, #1
  40875c:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  40875e:	2000      	movs	r0, #0
  408760:	bd10      	pop	{r4, pc}
  408762:	bf00      	nop
  408764:	00421288 	.word	0x00421288
  408768:	00407729 	.word	0x00407729
  40876c:	0040650d 	.word	0x0040650d
  408770:	00408435 	.word	0x00408435
  408774:	00405f49 	.word	0x00405f49
  408778:	0040527d 	.word	0x0040527d
  40877c:	004083b9 	.word	0x004083b9
  408780:	004083f5 	.word	0x004083f5
  408784:	00407651 	.word	0x00407651
  408788:	004035d5 	.word	0x004035d5
  40878c:	00408639 	.word	0x00408639
  408790:	004055a9 	.word	0x004055a9

00408794 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
  408794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408798:	b082      	sub	sp, #8
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  40879a:	2500      	movs	r5, #0
  40879c:	e057      	b.n	40884e <lv_refr_join_area+0xba>
        *d8 = *s8;
  40879e:	f811 0b01 	ldrb.w	r0, [r1], #1
  4087a2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4087a6:	3b01      	subs	r3, #1
    while(len) {
  4087a8:	2b00      	cmp	r3, #0
  4087aa:	d1f8      	bne.n	40879e <lv_refr_join_area+0xa>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
  4087ac:	4426      	add	r6, r4
  4087ae:	2301      	movs	r3, #1
  4087b0:	f886 3162 	strb.w	r3, [r6, #354]	; 0x162
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  4087b4:	3401      	adds	r4, #1
  4087b6:	4b2f      	ldr	r3, [pc, #188]	; (408874 <lv_refr_join_area+0xe0>)
  4087b8:	6819      	ldr	r1, [r3, #0]
  4087ba:	f8b1 3182 	ldrh.w	r3, [r1, #386]	; 0x182
  4087be:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4087c2:	429c      	cmp	r4, r3
  4087c4:	d242      	bcs.n	40884c <lv_refr_join_area+0xb8>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
  4087c6:	190b      	adds	r3, r1, r4
  4087c8:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  4087cc:	2b00      	cmp	r3, #0
  4087ce:	d1f1      	bne.n	4087b4 <lv_refr_join_area+0x20>
  4087d0:	42ac      	cmp	r4, r5
  4087d2:	d0ef      	beq.n	4087b4 <lv_refr_join_area+0x20>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
  4087d4:	f105 000c 	add.w	r0, r5, #12
  4087d8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
  4087dc:	f104 030c 	add.w	r3, r4, #12
  4087e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4087e4:	3102      	adds	r1, #2
  4087e6:	3002      	adds	r0, #2
  4087e8:	4b23      	ldr	r3, [pc, #140]	; (408878 <lv_refr_join_area+0xe4>)
  4087ea:	4798      	blx	r3
  4087ec:	2800      	cmp	r0, #0
  4087ee:	d0e1      	beq.n	4087b4 <lv_refr_join_area+0x20>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
  4087f0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 408874 <lv_refr_join_area+0xe0>
  4087f4:	f8d8 2000 	ldr.w	r2, [r8]
  4087f8:	f105 070c 	add.w	r7, r5, #12
  4087fc:	00ff      	lsls	r7, r7, #3
  4087fe:	19d1      	adds	r1, r2, r7
  408800:	f104 060c 	add.w	r6, r4, #12
  408804:	00f6      	lsls	r6, r6, #3
  408806:	4432      	add	r2, r6
  408808:	3202      	adds	r2, #2
  40880a:	3102      	adds	r1, #2
  40880c:	4668      	mov	r0, sp
  40880e:	4b1b      	ldr	r3, [pc, #108]	; (40887c <lv_refr_join_area+0xe8>)
  408810:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  408812:	4668      	mov	r0, sp
  408814:	f8df a068 	ldr.w	sl, [pc, #104]	; 408880 <lv_refr_join_area+0xec>
  408818:	47d0      	blx	sl
  40881a:	4681      	mov	r9, r0
  40881c:	f8d8 0000 	ldr.w	r0, [r8]
  408820:	4438      	add	r0, r7
  408822:	3002      	adds	r0, #2
  408824:	47d0      	blx	sl
  408826:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
  408828:	f8d8 0000 	ldr.w	r0, [r8]
  40882c:	4430      	add	r0, r6
  40882e:	3002      	adds	r0, #2
  408830:	47d0      	blx	sl
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  408832:	4438      	add	r0, r7
  408834:	4581      	cmp	r9, r0
  408836:	d2bd      	bcs.n	4087b4 <lv_refr_join_area+0x20>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
  408838:	f8d8 6000 	ldr.w	r6, [r8]
  40883c:	f105 020c 	add.w	r2, r5, #12
  408840:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
  408844:	3202      	adds	r2, #2
    const uint8_t * s8 = (const uint8_t *)src;
  408846:	4669      	mov	r1, sp
  408848:	2308      	movs	r3, #8
  40884a:	e7ad      	b.n	4087a8 <lv_refr_join_area+0x14>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  40884c:	3501      	adds	r5, #1
  40884e:	4b09      	ldr	r3, [pc, #36]	; (408874 <lv_refr_join_area+0xe0>)
  408850:	681b      	ldr	r3, [r3, #0]
  408852:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  408856:	f3c2 0209 	ubfx	r2, r2, #0, #10
  40885a:	4295      	cmp	r5, r2
  40885c:	d206      	bcs.n	40886c <lv_refr_join_area+0xd8>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
  40885e:	442b      	add	r3, r5
  408860:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  408864:	2b00      	cmp	r3, #0
  408866:	d1f1      	bne.n	40884c <lv_refr_join_area+0xb8>
  408868:	2400      	movs	r4, #0
  40886a:	e7a4      	b.n	4087b6 <lv_refr_join_area+0x22>
            }
        }
    }
}
  40886c:	b002      	add	sp, #8
  40886e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408872:	bf00      	nop
  408874:	2040c390 	.word	0x2040c390
  408878:	004149d1 	.word	0x004149d1
  40887c:	004147f9 	.word	0x004147f9
  408880:	00414785 	.word	0x00414785

00408884 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
  408884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408888:	4606      	mov	r6, r0
  40888a:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
  40888c:	2200      	movs	r2, #0
  40888e:	3110      	adds	r1, #16
  408890:	4b20      	ldr	r3, [pc, #128]	; (408914 <lv_refr_get_top_obj+0x90>)
  408892:	4798      	blx	r3
  408894:	b3b8      	cbz	r0, 408906 <lv_refr_get_top_obj+0x82>
  408896:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
  40889a:	f013 0f10 	tst.w	r3, #16
  40889e:	d134      	bne.n	40890a <lv_refr_get_top_obj+0x86>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
  4088a0:	f8d8 3020 	ldr.w	r3, [r8, #32]
  4088a4:	2202      	movs	r2, #2
  4088a6:	4631      	mov	r1, r6
  4088a8:	4640      	mov	r0, r8
  4088aa:	4798      	blx	r3
  4088ac:	4681      	mov	r9, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  4088ae:	2803      	cmp	r0, #3
  4088b0:	d02d      	beq.n	40890e <lv_refr_get_top_obj+0x8a>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  4088b2:	2801      	cmp	r0, #1
  4088b4:	d013      	beq.n	4088de <lv_refr_get_top_obj+0x5a>
            design_res = LV_DESIGN_RES_NOT_COVER;
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
  4088b6:	f108 0704 	add.w	r7, r8, #4
  4088ba:	4638      	mov	r0, r7
  4088bc:	4b16      	ldr	r3, [pc, #88]	; (408918 <lv_refr_get_top_obj+0x94>)
  4088be:	4798      	blx	r3
  4088c0:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  4088c2:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  4088c4:	b1b4      	cbz	r4, 4088f4 <lv_refr_get_top_obj+0x70>
            found_p = lv_refr_get_top_obj(area_p, i);
  4088c6:	4621      	mov	r1, r4
  4088c8:	4630      	mov	r0, r6
  4088ca:	f7ff ffdb 	bl	408884 <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
  4088ce:	4605      	mov	r5, r0
  4088d0:	b980      	cbnz	r0, 4088f4 <lv_refr_get_top_obj+0x70>
        _LV_LL_READ(obj->child_ll, i) {
  4088d2:	4621      	mov	r1, r4
  4088d4:	4638      	mov	r0, r7
  4088d6:	4b11      	ldr	r3, [pc, #68]	; (40891c <lv_refr_get_top_obj+0x98>)
  4088d8:	4798      	blx	r3
  4088da:	4604      	mov	r4, r0
  4088dc:	e7f2      	b.n	4088c4 <lv_refr_get_top_obj+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4088de:	f248 020c 	movw	r2, #32780	; 0x800c
  4088e2:	2100      	movs	r1, #0
  4088e4:	4640      	mov	r0, r8
  4088e6:	4b0e      	ldr	r3, [pc, #56]	; (408920 <lv_refr_get_top_obj+0x9c>)
  4088e8:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  4088ea:	28ff      	cmp	r0, #255	; 0xff
  4088ec:	d0e3      	beq.n	4088b6 <lv_refr_get_top_obj+0x32>
            design_res = LV_DESIGN_RES_NOT_COVER;
  4088ee:	f04f 0902 	mov.w	r9, #2
  4088f2:	e7e0      	b.n	4088b6 <lv_refr_get_top_obj+0x32>
                break;
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
  4088f4:	b115      	cbz	r5, 4088fc <lv_refr_get_top_obj+0x78>
            }
        }
    }

    return found_p;
}
  4088f6:	4628      	mov	r0, r5
  4088f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(design_res == LV_DESIGN_RES_COVER) {
  4088fc:	f1b9 0f01 	cmp.w	r9, #1
  408900:	d1f9      	bne.n	4088f6 <lv_refr_get_top_obj+0x72>
                found_p = obj;
  408902:	4645      	mov	r5, r8
  408904:	e7f7      	b.n	4088f6 <lv_refr_get_top_obj+0x72>
    lv_obj_t * found_p = NULL;
  408906:	2500      	movs	r5, #0
  408908:	e7f5      	b.n	4088f6 <lv_refr_get_top_obj+0x72>
  40890a:	2500      	movs	r5, #0
  40890c:	e7f3      	b.n	4088f6 <lv_refr_get_top_obj+0x72>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  40890e:	2500      	movs	r5, #0
  408910:	e7f1      	b.n	4088f6 <lv_refr_get_top_obj+0x72>
  408912:	bf00      	nop
  408914:	00414a15 	.word	0x00414a15
  408918:	00415375 	.word	0x00415375
  40891c:	00415389 	.word	0x00415389
  408920:	00406619 	.word	0x00406619

00408924 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
  408924:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  408928:	f013 0f10 	tst.w	r3, #16
  40892c:	d000      	beq.n	408930 <lv_refr_obj+0xc>
  40892e:	4770      	bx	lr
{
  408930:	b570      	push	{r4, r5, r6, lr}
  408932:	b08a      	sub	sp, #40	; 0x28
  408934:	460e      	mov	r6, r1
  408936:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
  408938:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
  40893c:	a904      	add	r1, sp, #16
  40893e:	4b33      	ldr	r3, [pc, #204]	; (408a0c <lv_refr_obj+0xe8>)
  408940:	4798      	blx	r3
    obj_area.x1 -= ext_size;
  408942:	b2a3      	uxth	r3, r4
  408944:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  408948:	1ad2      	subs	r2, r2, r3
  40894a:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
  40894e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  408952:	1ad2      	subs	r2, r2, r3
  408954:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
  408958:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40895c:	441a      	add	r2, r3
  40895e:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
  408962:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  408966:	4413      	add	r3, r2
  408968:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
  40896c:	aa04      	add	r2, sp, #16
  40896e:	4631      	mov	r1, r6
  408970:	a806      	add	r0, sp, #24
  408972:	4b27      	ldr	r3, [pc, #156]	; (408a10 <lv_refr_obj+0xec>)
  408974:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
  408976:	b1a8      	cbz	r0, 4089a4 <lv_refr_obj+0x80>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
  408978:	6a2b      	ldr	r3, [r5, #32]
  40897a:	b11b      	cbz	r3, 408984 <lv_refr_obj+0x60>
  40897c:	2200      	movs	r2, #0
  40897e:	a906      	add	r1, sp, #24
  408980:	4628      	mov	r0, r5
  408982:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
  408984:	a904      	add	r1, sp, #16
  408986:	4628      	mov	r0, r5
  408988:	4b20      	ldr	r3, [pc, #128]	; (408a0c <lv_refr_obj+0xe8>)
  40898a:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
  40898c:	aa04      	add	r2, sp, #16
  40898e:	4631      	mov	r1, r6
  408990:	a808      	add	r0, sp, #32
  408992:	4b1f      	ldr	r3, [pc, #124]	; (408a10 <lv_refr_obj+0xec>)
  408994:	4798      	blx	r3
        if(union_ok != false) {
  408996:	b938      	cbnz	r0, 4089a8 <lv_refr_obj+0x84>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
  408998:	6a2b      	ldr	r3, [r5, #32]
  40899a:	b11b      	cbz	r3, 4089a4 <lv_refr_obj+0x80>
  40899c:	2201      	movs	r2, #1
  40899e:	a906      	add	r1, sp, #24
  4089a0:	4628      	mov	r0, r5
  4089a2:	4798      	blx	r3
    }
}
  4089a4:	b00a      	add	sp, #40	; 0x28
  4089a6:	bd70      	pop	{r4, r5, r6, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
  4089a8:	1d2e      	adds	r6, r5, #4
  4089aa:	4630      	mov	r0, r6
  4089ac:	4b19      	ldr	r3, [pc, #100]	; (408a14 <lv_refr_obj+0xf0>)
  4089ae:	4798      	blx	r3
  4089b0:	4604      	mov	r4, r0
  4089b2:	e004      	b.n	4089be <lv_refr_obj+0x9a>
  4089b4:	4621      	mov	r1, r4
  4089b6:	4630      	mov	r0, r6
  4089b8:	4b17      	ldr	r3, [pc, #92]	; (408a18 <lv_refr_obj+0xf4>)
  4089ba:	4798      	blx	r3
  4089bc:	4604      	mov	r4, r0
  4089be:	2c00      	cmp	r4, #0
  4089c0:	d0ea      	beq.n	408998 <lv_refr_obj+0x74>
                lv_obj_get_coords(child_p, &child_area);
  4089c2:	a902      	add	r1, sp, #8
  4089c4:	4620      	mov	r0, r4
  4089c6:	4b11      	ldr	r3, [pc, #68]	; (408a0c <lv_refr_obj+0xe8>)
  4089c8:	4798      	blx	r3
                child_area.x1 -= ext_size;
  4089ca:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  4089cc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  4089d0:	1ad2      	subs	r2, r2, r3
  4089d2:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
  4089d6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  4089da:	1ad2      	subs	r2, r2, r3
  4089dc:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
  4089e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4089e4:	441a      	add	r2, r3
  4089e6:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
  4089ea:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  4089ee:	4413      	add	r3, r2
  4089f0:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
  4089f4:	aa02      	add	r2, sp, #8
  4089f6:	a908      	add	r1, sp, #32
  4089f8:	4668      	mov	r0, sp
  4089fa:	4b05      	ldr	r3, [pc, #20]	; (408a10 <lv_refr_obj+0xec>)
  4089fc:	4798      	blx	r3
                if(union_ok) {
  4089fe:	2800      	cmp	r0, #0
  408a00:	d0d8      	beq.n	4089b4 <lv_refr_obj+0x90>
                    lv_refr_obj(child_p, &mask_child);
  408a02:	4669      	mov	r1, sp
  408a04:	4620      	mov	r0, r4
  408a06:	f7ff ff8d 	bl	408924 <lv_refr_obj>
  408a0a:	e7d3      	b.n	4089b4 <lv_refr_obj+0x90>
  408a0c:	004053c1 	.word	0x004053c1
  408a10:	004147a1 	.word	0x004147a1
  408a14:	0041537f 	.word	0x0041537f
  408a18:	00415397 	.word	0x00415397

00408a1c <lv_refr_obj_and_children>:
{
  408a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408a1e:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  408a20:	4604      	mov	r4, r0
  408a22:	b150      	cbz	r0, 408a3a <lv_refr_obj_and_children+0x1e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
  408a24:	2c00      	cmp	r4, #0
  408a26:	d02c      	beq.n	408a82 <lv_refr_obj_and_children+0x66>
    lv_refr_obj(top_p, mask_p);
  408a28:	4631      	mov	r1, r6
  408a2a:	4620      	mov	r0, r4
  408a2c:	4b15      	ldr	r3, [pc, #84]	; (408a84 <lv_refr_obj_and_children+0x68>)
  408a2e:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
  408a30:	4620      	mov	r0, r4
  408a32:	4b15      	ldr	r3, [pc, #84]	; (408a88 <lv_refr_obj_and_children+0x6c>)
  408a34:	4798      	blx	r3
  408a36:	4607      	mov	r7, r0
    while(par != NULL) {
  408a38:	e01b      	b.n	408a72 <lv_refr_obj_and_children+0x56>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  408a3a:	4b14      	ldr	r3, [pc, #80]	; (408a8c <lv_refr_obj_and_children+0x70>)
  408a3c:	6818      	ldr	r0, [r3, #0]
  408a3e:	4b14      	ldr	r3, [pc, #80]	; (408a90 <lv_refr_obj_and_children+0x74>)
  408a40:	4798      	blx	r3
  408a42:	4604      	mov	r4, r0
  408a44:	e7ee      	b.n	408a24 <lv_refr_obj_and_children+0x8>
            lv_refr_obj(i, mask_p);
  408a46:	4631      	mov	r1, r6
  408a48:	4620      	mov	r0, r4
  408a4a:	4b0e      	ldr	r3, [pc, #56]	; (408a84 <lv_refr_obj_and_children+0x68>)
  408a4c:	4798      	blx	r3
            i = _lv_ll_get_prev(&(par->child_ll), i);
  408a4e:	4621      	mov	r1, r4
  408a50:	4628      	mov	r0, r5
  408a52:	4b10      	ldr	r3, [pc, #64]	; (408a94 <lv_refr_obj_and_children+0x78>)
  408a54:	4798      	blx	r3
  408a56:	4604      	mov	r4, r0
        while(i != NULL) {
  408a58:	2c00      	cmp	r4, #0
  408a5a:	d1f4      	bne.n	408a46 <lv_refr_obj_and_children+0x2a>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
  408a5c:	6a3b      	ldr	r3, [r7, #32]
  408a5e:	b11b      	cbz	r3, 408a68 <lv_refr_obj_and_children+0x4c>
  408a60:	2201      	movs	r2, #1
  408a62:	4631      	mov	r1, r6
  408a64:	4638      	mov	r0, r7
  408a66:	4798      	blx	r3
        par = lv_obj_get_parent(par);
  408a68:	4638      	mov	r0, r7
  408a6a:	4b07      	ldr	r3, [pc, #28]	; (408a88 <lv_refr_obj_and_children+0x6c>)
  408a6c:	4798      	blx	r3
        border_p = par;
  408a6e:	463c      	mov	r4, r7
        par = lv_obj_get_parent(par);
  408a70:	4607      	mov	r7, r0
    while(par != NULL) {
  408a72:	b137      	cbz	r7, 408a82 <lv_refr_obj_and_children+0x66>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
  408a74:	1d3d      	adds	r5, r7, #4
  408a76:	4621      	mov	r1, r4
  408a78:	4628      	mov	r0, r5
  408a7a:	4b06      	ldr	r3, [pc, #24]	; (408a94 <lv_refr_obj_and_children+0x78>)
  408a7c:	4798      	blx	r3
  408a7e:	4604      	mov	r4, r0
        while(i != NULL) {
  408a80:	e7ea      	b.n	408a58 <lv_refr_obj_and_children+0x3c>
  408a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408a84:	00408925 	.word	0x00408925
  408a88:	004052ad 	.word	0x004052ad
  408a8c:	2040c390 	.word	0x2040c390
  408a90:	004031f9 	.word	0x004031f9
  408a94:	00415397 	.word	0x00415397

00408a98 <_lv_refr_init>:
{
  408a98:	4770      	bx	lr
	...

00408a9c <_lv_inv_area>:
{
  408a9c:	b530      	push	{r4, r5, lr}
  408a9e:	b085      	sub	sp, #20
  408aa0:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
  408aa2:	4605      	mov	r5, r0
  408aa4:	2800      	cmp	r0, #0
  408aa6:	d035      	beq.n	408b14 <_lv_inv_area+0x78>
    if(!disp) return;
  408aa8:	2d00      	cmp	r5, #0
  408aaa:	d03d      	beq.n	408b28 <_lv_inv_area+0x8c>
    if(area_p == NULL) {
  408aac:	2c00      	cmp	r4, #0
  408aae:	d035      	beq.n	408b1c <_lv_inv_area+0x80>
    scr_area.x1 = 0;
  408ab0:	2300      	movs	r3, #0
  408ab2:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
  408ab6:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
  408aba:	4628      	mov	r0, r5
  408abc:	4b34      	ldr	r3, [pc, #208]	; (408b90 <_lv_inv_area+0xf4>)
  408abe:	4798      	blx	r3
  408ac0:	b280      	uxth	r0, r0
  408ac2:	3801      	subs	r0, #1
  408ac4:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
  408ac8:	4628      	mov	r0, r5
  408aca:	4b32      	ldr	r3, [pc, #200]	; (408b94 <_lv_inv_area+0xf8>)
  408acc:	4798      	blx	r3
  408ace:	b280      	uxth	r0, r0
  408ad0:	3801      	subs	r0, #1
  408ad2:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
  408ad6:	aa02      	add	r2, sp, #8
  408ad8:	4621      	mov	r1, r4
  408ada:	4668      	mov	r0, sp
  408adc:	4b2e      	ldr	r3, [pc, #184]	; (408b98 <_lv_inv_area+0xfc>)
  408ade:	4798      	blx	r3
    if(suc != false) {
  408ae0:	b310      	cbz	r0, 408b28 <_lv_inv_area+0x8c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
  408ae2:	692b      	ldr	r3, [r5, #16]
  408ae4:	b113      	cbz	r3, 408aec <_lv_inv_area+0x50>
  408ae6:	4669      	mov	r1, sp
  408ae8:	4628      	mov	r0, r5
  408aea:	4798      	blx	r3
{
  408aec:	2400      	movs	r4, #0
        for(i = 0; i < disp->inv_p; i++) {
  408aee:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408af6:	429c      	cmp	r4, r3
  408af8:	da18      	bge.n	408b2c <_lv_inv_area+0x90>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
  408afa:	f104 010c 	add.w	r1, r4, #12
  408afe:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  408b02:	2200      	movs	r2, #0
  408b04:	3102      	adds	r1, #2
  408b06:	4668      	mov	r0, sp
  408b08:	4b24      	ldr	r3, [pc, #144]	; (408b9c <_lv_inv_area+0x100>)
  408b0a:	4798      	blx	r3
  408b0c:	b960      	cbnz	r0, 408b28 <_lv_inv_area+0x8c>
        for(i = 0; i < disp->inv_p; i++) {
  408b0e:	3401      	adds	r4, #1
  408b10:	b2a4      	uxth	r4, r4
  408b12:	e7ec      	b.n	408aee <_lv_inv_area+0x52>
    if(!disp) disp = lv_disp_get_default();
  408b14:	4b22      	ldr	r3, [pc, #136]	; (408ba0 <_lv_inv_area+0x104>)
  408b16:	4798      	blx	r3
  408b18:	4605      	mov	r5, r0
  408b1a:	e7c5      	b.n	408aa8 <_lv_inv_area+0xc>
        disp->inv_p = 0;
  408b1c:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408b20:	f36f 0309 	bfc	r3, #0, #10
  408b24:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
}
  408b28:	b005      	add	sp, #20
  408b2a:	bd30      	pop	{r4, r5, pc}
        if(disp->inv_p < LV_INV_BUF_SIZE) {
  408b2c:	2b1f      	cmp	r3, #31
  408b2e:	dc1b      	bgt.n	408b68 <_lv_inv_area+0xcc>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
  408b30:	330c      	adds	r3, #12
  408b32:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  408b36:	3302      	adds	r3, #2
  408b38:	4669      	mov	r1, sp
  408b3a:	2208      	movs	r2, #8
  408b3c:	e004      	b.n	408b48 <_lv_inv_area+0xac>
        *d8 = *s8;
  408b3e:	f811 0b01 	ldrb.w	r0, [r1], #1
  408b42:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  408b46:	3a01      	subs	r2, #1
    while(len) {
  408b48:	2a00      	cmp	r2, #0
  408b4a:	d1f8      	bne.n	408b3e <_lv_inv_area+0xa2>
        disp->inv_p++;
  408b4c:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408b50:	f3c3 0209 	ubfx	r2, r3, #0, #10
  408b54:	3201      	adds	r2, #1
  408b56:	f362 0309 	bfi	r3, r2, #0, #10
  408b5a:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
  408b5e:	2103      	movs	r1, #3
  408b60:	6b68      	ldr	r0, [r5, #52]	; 0x34
  408b62:	4b10      	ldr	r3, [pc, #64]	; (408ba4 <_lv_inv_area+0x108>)
  408b64:	4798      	blx	r3
  408b66:	e7df      	b.n	408b28 <_lv_inv_area+0x8c>
            disp->inv_p = 0;
  408b68:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408b6c:	f36f 0309 	bfc	r3, #0, #10
  408b70:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
  408b74:	f105 0162 	add.w	r1, r5, #98	; 0x62
    const uint8_t * s8 = (const uint8_t *)src;
  408b78:	aa02      	add	r2, sp, #8
  408b7a:	2308      	movs	r3, #8
  408b7c:	e004      	b.n	408b88 <_lv_inv_area+0xec>
        *d8 = *s8;
  408b7e:	f812 0b01 	ldrb.w	r0, [r2], #1
  408b82:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  408b86:	3b01      	subs	r3, #1
    while(len) {
  408b88:	2b00      	cmp	r3, #0
  408b8a:	d1f8      	bne.n	408b7e <_lv_inv_area+0xe2>
  408b8c:	e7de      	b.n	408b4c <_lv_inv_area+0xb0>
  408b8e:	bf00      	nop
  408b90:	00413f39 	.word	0x00413f39
  408b94:	00413f69 	.word	0x00413f69
  408b98:	004147a1 	.word	0x004147a1
  408b9c:	00414a15 	.word	0x00414a15
  408ba0:	00413f2d 	.word	0x00413f2d
  408ba4:	004160c5 	.word	0x004160c5

00408ba8 <_lv_refr_get_disp_refreshing>:
}
  408ba8:	4b01      	ldr	r3, [pc, #4]	; (408bb0 <_lv_refr_get_disp_refreshing+0x8>)
  408baa:	6818      	ldr	r0, [r3, #0]
  408bac:	4770      	bx	lr
  408bae:	bf00      	nop
  408bb0:	2040c390 	.word	0x2040c390

00408bb4 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
  408bb4:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  408bb6:	4d1e      	ldr	r5, [pc, #120]	; (408c30 <lv_refr_vdb_flush+0x7c>)
  408bb8:	6828      	ldr	r0, [r5, #0]
  408bba:	4b1e      	ldr	r3, [pc, #120]	; (408c34 <lv_refr_vdb_flush+0x80>)
  408bbc:	4798      	blx	r3
  408bbe:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
  408bc0:	6828      	ldr	r0, [r5, #0]
  408bc2:	4b1d      	ldr	r3, [pc, #116]	; (408c38 <lv_refr_vdb_flush+0x84>)
  408bc4:	4798      	blx	r3
  408bc6:	b978      	cbnz	r0, 408be8 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
  408bc8:	2301      	movs	r3, #1
  408bca:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
  408bcc:	4b18      	ldr	r3, [pc, #96]	; (408c30 <lv_refr_vdb_flush+0x7c>)
  408bce:	681b      	ldr	r3, [r3, #0]
  408bd0:	685b      	ldr	r3, [r3, #4]
  408bd2:	6a1a      	ldr	r2, [r3, #32]
  408bd4:	f012 0f01 	tst.w	r2, #1
  408bd8:	d010      	beq.n	408bfc <lv_refr_vdb_flush+0x48>
  408bda:	6a1b      	ldr	r3, [r3, #32]
  408bdc:	f013 0f02 	tst.w	r3, #2
  408be0:	d00c      	beq.n	408bfc <lv_refr_vdb_flush+0x48>
  408be2:	2301      	movs	r3, #1
  408be4:	61e3      	str	r3, [r4, #28]
  408be6:	e00b      	b.n	408c00 <lv_refr_vdb_flush+0x4c>
        while(vdb->flushing) {
  408be8:	69a3      	ldr	r3, [r4, #24]
  408bea:	2b00      	cmp	r3, #0
  408bec:	d0ec      	beq.n	408bc8 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  408bee:	4b10      	ldr	r3, [pc, #64]	; (408c30 <lv_refr_vdb_flush+0x7c>)
  408bf0:	6818      	ldr	r0, [r3, #0]
  408bf2:	69c3      	ldr	r3, [r0, #28]
  408bf4:	2b00      	cmp	r3, #0
  408bf6:	d0f7      	beq.n	408be8 <lv_refr_vdb_flush+0x34>
  408bf8:	4798      	blx	r3
  408bfa:	e7f5      	b.n	408be8 <lv_refr_vdb_flush+0x34>
    else vdb->flushing_last = 0;
  408bfc:	2300      	movs	r3, #0
  408bfe:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  408c00:	4b0e      	ldr	r3, [pc, #56]	; (408c3c <lv_refr_vdb_flush+0x88>)
  408c02:	4798      	blx	r3
  408c04:	4605      	mov	r5, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  408c06:	6a43      	ldr	r3, [r0, #36]	; 0x24
  408c08:	b103      	cbz	r3, 408c0c <lv_refr_vdb_flush+0x58>
  408c0a:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
  408c0c:	68eb      	ldr	r3, [r5, #12]
  408c0e:	b123      	cbz	r3, 408c1a <lv_refr_vdb_flush+0x66>
  408c10:	68a2      	ldr	r2, [r4, #8]
  408c12:	f104 0110 	add.w	r1, r4, #16
  408c16:	4628      	mov	r0, r5
  408c18:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
  408c1a:	6823      	ldr	r3, [r4, #0]
  408c1c:	b12b      	cbz	r3, 408c2a <lv_refr_vdb_flush+0x76>
  408c1e:	6862      	ldr	r2, [r4, #4]
  408c20:	b11a      	cbz	r2, 408c2a <lv_refr_vdb_flush+0x76>
        if(vdb->buf_act == vdb->buf1)
  408c22:	68a1      	ldr	r1, [r4, #8]
  408c24:	428b      	cmp	r3, r1
  408c26:	d001      	beq.n	408c2c <lv_refr_vdb_flush+0x78>
            vdb->buf_act = vdb->buf2;
        else
            vdb->buf_act = vdb->buf1;
  408c28:	60a3      	str	r3, [r4, #8]
  408c2a:	bd38      	pop	{r3, r4, r5, pc}
            vdb->buf_act = vdb->buf2;
  408c2c:	60a2      	str	r2, [r4, #8]
  408c2e:	bd38      	pop	{r3, r4, r5, pc}
  408c30:	2040c390 	.word	0x2040c390
  408c34:	0041403d 	.word	0x0041403d
  408c38:	00414075 	.word	0x00414075
  408c3c:	00408ba9 	.word	0x00408ba9

00408c40 <lv_refr_area_part>:
{
  408c40:	b570      	push	{r4, r5, r6, lr}
  408c42:	b09c      	sub	sp, #112	; 0x70
  408c44:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  408c46:	4d4c      	ldr	r5, [pc, #304]	; (408d78 <lv_refr_area_part+0x138>)
  408c48:	6828      	ldr	r0, [r5, #0]
  408c4a:	4b4c      	ldr	r3, [pc, #304]	; (408d7c <lv_refr_area_part+0x13c>)
  408c4c:	4798      	blx	r3
  408c4e:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
  408c50:	6828      	ldr	r0, [r5, #0]
  408c52:	4b4b      	ldr	r3, [pc, #300]	; (408d80 <lv_refr_area_part+0x140>)
  408c54:	4798      	blx	r3
  408c56:	b940      	cbnz	r0, 408c6a <lv_refr_area_part+0x2a>
        while(vdb->flushing) {
  408c58:	69a3      	ldr	r3, [r4, #24]
  408c5a:	b133      	cbz	r3, 408c6a <lv_refr_area_part+0x2a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  408c5c:	4b46      	ldr	r3, [pc, #280]	; (408d78 <lv_refr_area_part+0x138>)
  408c5e:	6818      	ldr	r0, [r3, #0]
  408c60:	69c3      	ldr	r3, [r0, #28]
  408c62:	2b00      	cmp	r3, #0
  408c64:	d0f8      	beq.n	408c58 <lv_refr_area_part+0x18>
  408c66:	4798      	blx	r3
  408c68:	e7f6      	b.n	408c58 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
  408c6a:	f104 0210 	add.w	r2, r4, #16
  408c6e:	4631      	mov	r1, r6
  408c70:	a81a      	add	r0, sp, #104	; 0x68
  408c72:	4b44      	ldr	r3, [pc, #272]	; (408d84 <lv_refr_area_part+0x144>)
  408c74:	4798      	blx	r3
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
  408c76:	4d40      	ldr	r5, [pc, #256]	; (408d78 <lv_refr_area_part+0x138>)
  408c78:	6828      	ldr	r0, [r5, #0]
  408c7a:	4b43      	ldr	r3, [pc, #268]	; (408d88 <lv_refr_area_part+0x148>)
  408c7c:	4798      	blx	r3
  408c7e:	4601      	mov	r1, r0
  408c80:	a81a      	add	r0, sp, #104	; 0x68
  408c82:	4b42      	ldr	r3, [pc, #264]	; (408d8c <lv_refr_area_part+0x14c>)
  408c84:	4798      	blx	r3
  408c86:	4604      	mov	r4, r0
    if(disp_refr->prev_scr) {
  408c88:	682b      	ldr	r3, [r5, #0]
  408c8a:	6c99      	ldr	r1, [r3, #72]	; 0x48
  408c8c:	2900      	cmp	r1, #0
  408c8e:	d03d      	beq.n	408d0c <lv_refr_area_part+0xcc>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
  408c90:	a81a      	add	r0, sp, #104	; 0x68
  408c92:	4b3e      	ldr	r3, [pc, #248]	; (408d8c <lv_refr_area_part+0x14c>)
  408c94:	4798      	blx	r3
  408c96:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  408c98:	2c00      	cmp	r4, #0
  408c9a:	bf08      	it	eq
  408c9c:	2d00      	cmpeq	r5, #0
  408c9e:	d113      	bne.n	408cc8 <lv_refr_area_part+0x88>
        if(disp_refr->bg_img) {
  408ca0:	4b35      	ldr	r3, [pc, #212]	; (408d78 <lv_refr_area_part+0x138>)
  408ca2:	681b      	ldr	r3, [r3, #0]
  408ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  408ca6:	2b00      	cmp	r3, #0
  408ca8:	d04a      	beq.n	408d40 <lv_refr_area_part+0x100>
            lv_draw_img_dsc_init(&dsc);
  408caa:	a805      	add	r0, sp, #20
  408cac:	4b38      	ldr	r3, [pc, #224]	; (408d90 <lv_refr_area_part+0x150>)
  408cae:	4798      	blx	r3
            dsc.opa = disp_refr->bg_opa;
  408cb0:	4b31      	ldr	r3, [pc, #196]	; (408d78 <lv_refr_area_part+0x138>)
  408cb2:	681b      	ldr	r3, [r3, #0]
  408cb4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
  408cb8:	f88d 2014 	strb.w	r2, [sp, #20]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
  408cbc:	a902      	add	r1, sp, #8
  408cbe:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
  408cc0:	4b34      	ldr	r3, [pc, #208]	; (408d94 <lv_refr_area_part+0x154>)
  408cc2:	4798      	blx	r3
            if(res == LV_RES_OK) {
  408cc4:	2801      	cmp	r0, #1
  408cc6:	d023      	beq.n	408d10 <lv_refr_area_part+0xd0>
    if(disp_refr->prev_scr) {
  408cc8:	4b2b      	ldr	r3, [pc, #172]	; (408d78 <lv_refr_area_part+0x138>)
  408cca:	681b      	ldr	r3, [r3, #0]
  408ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408cce:	b12b      	cbz	r3, 408cdc <lv_refr_area_part+0x9c>
        if(top_prev_scr == NULL) {
  408cd0:	2d00      	cmp	r5, #0
  408cd2:	d048      	beq.n	408d66 <lv_refr_area_part+0x126>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
  408cd4:	a91a      	add	r1, sp, #104	; 0x68
  408cd6:	4628      	mov	r0, r5
  408cd8:	4b2f      	ldr	r3, [pc, #188]	; (408d98 <lv_refr_area_part+0x158>)
  408cda:	4798      	blx	r3
    if(top_act_scr == NULL) {
  408cdc:	2c00      	cmp	r4, #0
  408cde:	d044      	beq.n	408d6a <lv_refr_area_part+0x12a>
    lv_refr_obj_and_children(top_act_scr, &start_mask);
  408ce0:	a91a      	add	r1, sp, #104	; 0x68
  408ce2:	4620      	mov	r0, r4
  408ce4:	4d2c      	ldr	r5, [pc, #176]	; (408d98 <lv_refr_area_part+0x158>)
  408ce6:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
  408ce8:	4c23      	ldr	r4, [pc, #140]	; (408d78 <lv_refr_area_part+0x138>)
  408cea:	6820      	ldr	r0, [r4, #0]
  408cec:	4b2b      	ldr	r3, [pc, #172]	; (408d9c <lv_refr_area_part+0x15c>)
  408cee:	4798      	blx	r3
  408cf0:	a91a      	add	r1, sp, #104	; 0x68
  408cf2:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
  408cf4:	6820      	ldr	r0, [r4, #0]
  408cf6:	4b2a      	ldr	r3, [pc, #168]	; (408da0 <lv_refr_area_part+0x160>)
  408cf8:	4798      	blx	r3
  408cfa:	a91a      	add	r1, sp, #104	; 0x68
  408cfc:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
  408cfe:	6820      	ldr	r0, [r4, #0]
  408d00:	4b28      	ldr	r3, [pc, #160]	; (408da4 <lv_refr_area_part+0x164>)
  408d02:	4798      	blx	r3
  408d04:	2800      	cmp	r0, #0
  408d06:	d034      	beq.n	408d72 <lv_refr_area_part+0x132>
}
  408d08:	b01c      	add	sp, #112	; 0x70
  408d0a:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_t * top_prev_scr = NULL;
  408d0c:	2500      	movs	r5, #0
  408d0e:	e7c3      	b.n	408c98 <lv_refr_area_part+0x58>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
  408d10:	9b02      	ldr	r3, [sp, #8]
  408d12:	f3c3 238a 	ubfx	r3, r3, #10, #11
  408d16:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  408d1a:	f3c2 124a 	ubfx	r2, r2, #5, #11
  408d1e:	3a01      	subs	r2, #1
  408d20:	9200      	str	r2, [sp, #0]
  408d22:	3b01      	subs	r3, #1
  408d24:	2200      	movs	r2, #0
  408d26:	4611      	mov	r1, r2
  408d28:	a803      	add	r0, sp, #12
  408d2a:	4e1f      	ldr	r6, [pc, #124]	; (408da8 <lv_refr_area_part+0x168>)
  408d2c:	47b0      	blx	r6
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
  408d2e:	4b12      	ldr	r3, [pc, #72]	; (408d78 <lv_refr_area_part+0x138>)
  408d30:	681a      	ldr	r2, [r3, #0]
  408d32:	ab05      	add	r3, sp, #20
  408d34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  408d36:	a91a      	add	r1, sp, #104	; 0x68
  408d38:	a803      	add	r0, sp, #12
  408d3a:	4e1c      	ldr	r6, [pc, #112]	; (408dac <lv_refr_area_part+0x16c>)
  408d3c:	47b0      	blx	r6
  408d3e:	e7c3      	b.n	408cc8 <lv_refr_area_part+0x88>
            lv_draw_rect_dsc_init(&dsc);
  408d40:	a805      	add	r0, sp, #20
  408d42:	4b1b      	ldr	r3, [pc, #108]	; (408db0 <lv_refr_area_part+0x170>)
  408d44:	4798      	blx	r3
            dsc.bg_color = disp_refr->bg_color;
  408d46:	4b0c      	ldr	r3, [pc, #48]	; (408d78 <lv_refr_area_part+0x138>)
  408d48:	681b      	ldr	r3, [r3, #0]
  408d4a:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
  408d4e:	f8ad 2016 	strh.w	r2, [sp, #22]
            dsc.bg_opa = disp_refr->bg_opa;
  408d52:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  408d56:	f88d 3020 	strb.w	r3, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
  408d5a:	aa05      	add	r2, sp, #20
  408d5c:	a91a      	add	r1, sp, #104	; 0x68
  408d5e:	4608      	mov	r0, r1
  408d60:	4b14      	ldr	r3, [pc, #80]	; (408db4 <lv_refr_area_part+0x174>)
  408d62:	4798      	blx	r3
  408d64:	e7b0      	b.n	408cc8 <lv_refr_area_part+0x88>
            top_prev_scr = disp_refr->prev_scr;
  408d66:	461d      	mov	r5, r3
  408d68:	e7b4      	b.n	408cd4 <lv_refr_area_part+0x94>
        top_act_scr = disp_refr->act_scr;
  408d6a:	4b03      	ldr	r3, [pc, #12]	; (408d78 <lv_refr_area_part+0x138>)
  408d6c:	681b      	ldr	r3, [r3, #0]
  408d6e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  408d70:	e7b6      	b.n	408ce0 <lv_refr_area_part+0xa0>
        lv_refr_vdb_flush();
  408d72:	4b11      	ldr	r3, [pc, #68]	; (408db8 <lv_refr_area_part+0x178>)
  408d74:	4798      	blx	r3
}
  408d76:	e7c7      	b.n	408d08 <lv_refr_area_part+0xc8>
  408d78:	2040c390 	.word	0x2040c390
  408d7c:	0041403d 	.word	0x0041403d
  408d80:	00414075 	.word	0x00414075
  408d84:	004147a1 	.word	0x004147a1
  408d88:	004031f9 	.word	0x004031f9
  408d8c:	00408885 	.word	0x00408885
  408d90:	0040c6d9 	.word	0x0040c6d9
  408d94:	00412b51 	.word	0x00412b51
  408d98:	00408a1d 	.word	0x00408a1d
  408d9c:	00403231 	.word	0x00403231
  408da0:	0040324d 	.word	0x0040324d
  408da4:	0041408d 	.word	0x0041408d
  408da8:	0041476b 	.word	0x0041476b
  408dac:	0040c985 	.word	0x0040c985
  408db0:	004116a5 	.word	0x004116a5
  408db4:	004116f1 	.word	0x004116f1
  408db8:	00408bb5 	.word	0x00408bb5

00408dbc <lv_refr_area>:
{
  408dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  408dc0:	b083      	sub	sp, #12
  408dc2:	4606      	mov	r6, r0
    if(lv_disp_is_true_double_buf(disp_refr)) {
  408dc4:	4b62      	ldr	r3, [pc, #392]	; (408f50 <lv_refr_area+0x194>)
  408dc6:	6818      	ldr	r0, [r3, #0]
  408dc8:	4b62      	ldr	r3, [pc, #392]	; (408f54 <lv_refr_area+0x198>)
  408dca:	4798      	blx	r3
  408dcc:	2800      	cmp	r0, #0
  408dce:	d157      	bne.n	408e80 <lv_refr_area+0xc4>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  408dd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 408f50 <lv_refr_area+0x194>
  408dd4:	f8d9 0000 	ldr.w	r0, [r9]
  408dd8:	4b5f      	ldr	r3, [pc, #380]	; (408f58 <lv_refr_area+0x19c>)
  408dda:	4798      	blx	r3
  408ddc:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  408dde:	f8b6 8004 	ldrh.w	r8, [r6, #4]
  408de2:	8833      	ldrh	r3, [r6, #0]
  408de4:	eba8 0803 	sub.w	r8, r8, r3
  408de8:	fa1f f888 	uxth.w	r8, r8
  408dec:	f108 0801 	add.w	r8, r8, #1
  408df0:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  408df4:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
  408df8:	b2bc      	uxth	r4, r7
  408dfa:	8873      	ldrh	r3, [r6, #2]
  408dfc:	1ae4      	subs	r4, r4, r3
  408dfe:	b2a4      	uxth	r4, r4
  408e00:	3401      	adds	r4, #1
  408e02:	b224      	sxth	r4, r4
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  408e04:	f8d9 0000 	ldr.w	r0, [r9]
  408e08:	4b54      	ldr	r3, [pc, #336]	; (408f5c <lv_refr_area+0x1a0>)
  408e0a:	4798      	blx	r3
        lv_coord_t y2 =
  408e0c:	42b8      	cmp	r0, r7
  408e0e:	dd59      	ble.n	408ec4 <lv_refr_area+0x108>
  408e10:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
        int32_t max_row = (uint32_t)vdb->size / w;
  408e14:	68eb      	ldr	r3, [r5, #12]
  408e16:	fbb3 f3f8 	udiv	r3, r3, r8
        if(max_row > h) max_row = h;
  408e1a:	46a0      	mov	r8, r4
  408e1c:	42a3      	cmp	r3, r4
  408e1e:	dc00      	bgt.n	408e22 <lv_refr_area+0x66>
        int32_t max_row = (uint32_t)vdb->size / w;
  408e20:	4698      	mov	r8, r3
        if(disp_refr->driver.rounder_cb) {
  408e22:	4b4b      	ldr	r3, [pc, #300]	; (408f50 <lv_refr_area+0x194>)
  408e24:	681b      	ldr	r3, [r3, #0]
  408e26:	691b      	ldr	r3, [r3, #16]
  408e28:	b32b      	cbz	r3, 408e76 <lv_refr_area+0xba>
            tmp.x1 = 0;
  408e2a:	2300      	movs	r3, #0
  408e2c:	f8ad 3000 	strh.w	r3, [sp]
            tmp.x2 = 0;
  408e30:	f8ad 3004 	strh.w	r3, [sp, #4]
            tmp.y1 = 0;
  408e34:	f8ad 3002 	strh.w	r3, [sp, #2]
            lv_coord_t h_tmp = max_row;
  408e38:	fa0f f988 	sxth.w	r9, r8
                tmp.y2 = h_tmp - 1;
  408e3c:	f109 34ff 	add.w	r4, r9, #4294967295
  408e40:	b224      	sxth	r4, r4
  408e42:	f8ad 4006 	strh.w	r4, [sp, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
  408e46:	4b42      	ldr	r3, [pc, #264]	; (408f50 <lv_refr_area+0x194>)
  408e48:	6818      	ldr	r0, [r3, #0]
  408e4a:	6903      	ldr	r3, [r0, #16]
  408e4c:	4669      	mov	r1, sp
  408e4e:	4798      	blx	r3
  408e50:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  408e54:	b293      	uxth	r3, r2
  408e56:	f8bd 1002 	ldrh.w	r1, [sp, #2]
  408e5a:	1a5b      	subs	r3, r3, r1
  408e5c:	b29b      	uxth	r3, r3
  408e5e:	3301      	adds	r3, #1
  408e60:	b21b      	sxth	r3, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
  408e62:	4598      	cmp	r8, r3
  408e64:	da02      	bge.n	408e6c <lv_refr_area+0xb0>
                h_tmp--;
  408e66:	46a1      	mov	r9, r4
            } while(h_tmp > 0);
  408e68:	2c00      	cmp	r4, #0
  408e6a:	dce7      	bgt.n	408e3c <lv_refr_area+0x80>
            if(h_tmp <= 0) {
  408e6c:	f1b9 0f00 	cmp.w	r9, #0
  408e70:	dd25      	ble.n	408ebe <lv_refr_area+0x102>
                max_row = tmp.y2 + 1;
  408e72:	f102 0801 	add.w	r8, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  408e76:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
        lv_coord_t row_last = 0;
  408e7a:	f04f 0900 	mov.w	r9, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  408e7e:	e031      	b.n	408ee4 <lv_refr_area+0x128>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  408e80:	4c33      	ldr	r4, [pc, #204]	; (408f50 <lv_refr_area+0x194>)
  408e82:	6820      	ldr	r0, [r4, #0]
  408e84:	4b34      	ldr	r3, [pc, #208]	; (408f58 <lv_refr_area+0x19c>)
  408e86:	4798      	blx	r3
  408e88:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
  408e8a:	2700      	movs	r7, #0
  408e8c:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
  408e8e:	6820      	ldr	r0, [r4, #0]
  408e90:	4b33      	ldr	r3, [pc, #204]	; (408f60 <lv_refr_area+0x1a4>)
  408e92:	4798      	blx	r3
  408e94:	b280      	uxth	r0, r0
  408e96:	3801      	subs	r0, #1
  408e98:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
  408e9a:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
  408e9c:	6820      	ldr	r0, [r4, #0]
  408e9e:	4b2f      	ldr	r3, [pc, #188]	; (408f5c <lv_refr_area+0x1a0>)
  408ea0:	4798      	blx	r3
  408ea2:	b280      	uxth	r0, r0
  408ea4:	3801      	subs	r0, #1
  408ea6:	82e8      	strh	r0, [r5, #22]
        disp_refr->driver.buffer->last_part = 1;
  408ea8:	6823      	ldr	r3, [r4, #0]
  408eaa:	685a      	ldr	r2, [r3, #4]
  408eac:	f892 3020 	ldrb.w	r3, [r2, #32]
  408eb0:	f043 0302 	orr.w	r3, r3, #2
  408eb4:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
  408eb8:	4630      	mov	r0, r6
  408eba:	4b2a      	ldr	r3, [pc, #168]	; (408f64 <lv_refr_area+0x1a8>)
  408ebc:	4798      	blx	r3
}
  408ebe:	b003      	add	sp, #12
  408ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  408ec4:	f8d9 0000 	ldr.w	r0, [r9]
  408ec8:	4b24      	ldr	r3, [pc, #144]	; (408f5c <lv_refr_area+0x1a0>)
  408eca:	4798      	blx	r3
  408ecc:	b287      	uxth	r7, r0
  408ece:	3f01      	subs	r7, #1
        lv_coord_t y2 =
  408ed0:	b23f      	sxth	r7, r7
  408ed2:	e79f      	b.n	408e14 <lv_refr_area+0x58>
            row_last = vdb->area.y2;
  408ed4:	f9b5 9016 	ldrsh.w	r9, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  408ed8:	454f      	cmp	r7, r9
  408eda:	d018      	beq.n	408f0e <lv_refr_area+0x152>
            lv_refr_area_part(area_p);
  408edc:	4630      	mov	r0, r6
  408ede:	4b21      	ldr	r3, [pc, #132]	; (408f64 <lv_refr_area+0x1a8>)
  408ee0:	4798      	blx	r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  408ee2:	b223      	sxth	r3, r4
  408ee4:	eb03 0208 	add.w	r2, r3, r8
  408ee8:	3a01      	subs	r2, #1
  408eea:	42ba      	cmp	r2, r7
  408eec:	dc19      	bgt.n	408f22 <lv_refr_area+0x166>
            vdb->area.x1 = area_p->x1;
  408eee:	f9b6 2000 	ldrsh.w	r2, [r6]
  408ef2:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  408ef4:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  408ef8:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  408efa:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = row + max_row - 1;
  408efc:	4443      	add	r3, r8
  408efe:	b29c      	uxth	r4, r3
  408f00:	1e63      	subs	r3, r4, #1
  408f02:	b21b      	sxth	r3, r3
  408f04:	82eb      	strh	r3, [r5, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
  408f06:	429f      	cmp	r7, r3
  408f08:	dae4      	bge.n	408ed4 <lv_refr_area+0x118>
  408f0a:	82ef      	strh	r7, [r5, #22]
  408f0c:	e7e2      	b.n	408ed4 <lv_refr_area+0x118>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  408f0e:	4b10      	ldr	r3, [pc, #64]	; (408f50 <lv_refr_area+0x194>)
  408f10:	681b      	ldr	r3, [r3, #0]
  408f12:	685a      	ldr	r2, [r3, #4]
  408f14:	f892 3020 	ldrb.w	r3, [r2, #32]
  408f18:	f043 0302 	orr.w	r3, r3, #2
  408f1c:	f882 3020 	strb.w	r3, [r2, #32]
  408f20:	e7dc      	b.n	408edc <lv_refr_area+0x120>
        if(y2 != row_last) {
  408f22:	45b9      	cmp	r9, r7
  408f24:	d0cb      	beq.n	408ebe <lv_refr_area+0x102>
            vdb->area.x1 = area_p->x1;
  408f26:	f9b6 2000 	ldrsh.w	r2, [r6]
  408f2a:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  408f2c:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  408f30:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  408f32:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = y2;
  408f34:	82ef      	strh	r7, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
  408f36:	4b06      	ldr	r3, [pc, #24]	; (408f50 <lv_refr_area+0x194>)
  408f38:	681b      	ldr	r3, [r3, #0]
  408f3a:	685a      	ldr	r2, [r3, #4]
  408f3c:	f892 3020 	ldrb.w	r3, [r2, #32]
  408f40:	f043 0302 	orr.w	r3, r3, #2
  408f44:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
  408f48:	4630      	mov	r0, r6
  408f4a:	4b06      	ldr	r3, [pc, #24]	; (408f64 <lv_refr_area+0x1a8>)
  408f4c:	4798      	blx	r3
  408f4e:	e7b6      	b.n	408ebe <lv_refr_area+0x102>
  408f50:	2040c390 	.word	0x2040c390
  408f54:	0041408d 	.word	0x0041408d
  408f58:	0041403d 	.word	0x0041403d
  408f5c:	00413f69 	.word	0x00413f69
  408f60:	00413f39 	.word	0x00413f39
  408f64:	00408c41 	.word	0x00408c41

00408f68 <lv_refr_areas>:
    px_num = 0;
  408f68:	2200      	movs	r2, #0
  408f6a:	4b2b      	ldr	r3, [pc, #172]	; (409018 <lv_refr_areas+0xb0>)
  408f6c:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
  408f6e:	4b2b      	ldr	r3, [pc, #172]	; (40901c <lv_refr_areas+0xb4>)
  408f70:	681a      	ldr	r2, [r3, #0]
  408f72:	f8b2 3182 	ldrh.w	r3, [r2, #386]	; 0x182
  408f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408f7a:	2b00      	cmp	r3, #0
  408f7c:	d04b      	beq.n	409016 <lv_refr_areas+0xae>
{
  408f7e:	b570      	push	{r4, r5, r6, lr}
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  408f80:	1e5e      	subs	r6, r3, #1
  408f82:	2e00      	cmp	r6, #0
  408f84:	db05      	blt.n	408f92 <lv_refr_areas+0x2a>
        if(disp_refr->inv_area_joined[i] == 0) {
  408f86:	1993      	adds	r3, r2, r6
  408f88:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  408f8c:	b113      	cbz	r3, 408f94 <lv_refr_areas+0x2c>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  408f8e:	3e01      	subs	r6, #1
  408f90:	e7f7      	b.n	408f82 <lv_refr_areas+0x1a>
    int32_t last_i = 0;
  408f92:	2600      	movs	r6, #0
    disp_refr->driver.buffer->last_area = 0;
  408f94:	6851      	ldr	r1, [r2, #4]
  408f96:	f891 3020 	ldrb.w	r3, [r1, #32]
  408f9a:	f36f 0300 	bfc	r3, #0, #1
  408f9e:	f881 3020 	strb.w	r3, [r1, #32]
    disp_refr->driver.buffer->last_part = 0;
  408fa2:	6852      	ldr	r2, [r2, #4]
  408fa4:	f892 3020 	ldrb.w	r3, [r2, #32]
  408fa8:	f36f 0341 	bfc	r3, #1, #1
  408fac:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
  408fb0:	2400      	movs	r4, #0
  408fb2:	e01f      	b.n	408ff4 <lv_refr_areas+0x8c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  408fb4:	6842      	ldr	r2, [r0, #4]
  408fb6:	f892 3020 	ldrb.w	r3, [r2, #32]
  408fba:	f043 0301 	orr.w	r3, r3, #1
  408fbe:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
  408fc2:	6842      	ldr	r2, [r0, #4]
  408fc4:	f892 3020 	ldrb.w	r3, [r2, #32]
  408fc8:	f36f 0341 	bfc	r3, #1, #1
  408fcc:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
  408fd0:	f104 050c 	add.w	r5, r4, #12
  408fd4:	00ed      	lsls	r5, r5, #3
  408fd6:	4428      	add	r0, r5
  408fd8:	3002      	adds	r0, #2
  408fda:	4b11      	ldr	r3, [pc, #68]	; (409020 <lv_refr_areas+0xb8>)
  408fdc:	4798      	blx	r3
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
  408fde:	4b0f      	ldr	r3, [pc, #60]	; (40901c <lv_refr_areas+0xb4>)
  408fe0:	6818      	ldr	r0, [r3, #0]
  408fe2:	4428      	add	r0, r5
  408fe4:	3002      	adds	r0, #2
  408fe6:	4b0f      	ldr	r3, [pc, #60]	; (409024 <lv_refr_areas+0xbc>)
  408fe8:	4798      	blx	r3
  408fea:	4a0b      	ldr	r2, [pc, #44]	; (409018 <lv_refr_areas+0xb0>)
  408fec:	6813      	ldr	r3, [r2, #0]
  408fee:	4418      	add	r0, r3
  408ff0:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
  408ff2:	3401      	adds	r4, #1
  408ff4:	4b09      	ldr	r3, [pc, #36]	; (40901c <lv_refr_areas+0xb4>)
  408ff6:	6818      	ldr	r0, [r3, #0]
  408ff8:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  408ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409000:	429c      	cmp	r4, r3
  409002:	da07      	bge.n	409014 <lv_refr_areas+0xac>
        if(disp_refr->inv_area_joined[i] == 0) {
  409004:	1903      	adds	r3, r0, r4
  409006:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  40900a:	2b00      	cmp	r3, #0
  40900c:	d1f1      	bne.n	408ff2 <lv_refr_areas+0x8a>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  40900e:	42b4      	cmp	r4, r6
  409010:	d1d7      	bne.n	408fc2 <lv_refr_areas+0x5a>
  409012:	e7cf      	b.n	408fb4 <lv_refr_areas+0x4c>
  409014:	bd70      	pop	{r4, r5, r6, pc}
  409016:	4770      	bx	lr
  409018:	2040c394 	.word	0x2040c394
  40901c:	2040c390 	.word	0x2040c390
  409020:	00408dbd 	.word	0x00408dbd
  409024:	00414785 	.word	0x00414785

00409028 <_lv_disp_refr_task>:
{
  409028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40902c:	b085      	sub	sp, #20
  40902e:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
  409030:	4b58      	ldr	r3, [pc, #352]	; (409194 <_lv_disp_refr_task+0x16c>)
  409032:	4798      	blx	r3
  409034:	9001      	str	r0, [sp, #4]
    disp_refr = task->user_data;
  409036:	68eb      	ldr	r3, [r5, #12]
  409038:	4c57      	ldr	r4, [pc, #348]	; (409198 <_lv_disp_refr_task+0x170>)
  40903a:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
  40903c:	2100      	movs	r1, #0
  40903e:	4628      	mov	r0, r5
  409040:	4b56      	ldr	r3, [pc, #344]	; (40919c <_lv_disp_refr_task+0x174>)
  409042:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
  409044:	6823      	ldr	r3, [r4, #0]
  409046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  409048:	b18a      	cbz	r2, 40906e <_lv_disp_refr_task+0x46>
    lv_refr_join_area();
  40904a:	4b55      	ldr	r3, [pc, #340]	; (4091a0 <_lv_disp_refr_task+0x178>)
  40904c:	4798      	blx	r3
    lv_refr_areas();
  40904e:	4b55      	ldr	r3, [pc, #340]	; (4091a4 <_lv_disp_refr_task+0x17c>)
  409050:	4798      	blx	r3
    if(disp_refr->inv_p != 0) {
  409052:	4b51      	ldr	r3, [pc, #324]	; (409198 <_lv_disp_refr_task+0x170>)
  409054:	6818      	ldr	r0, [r3, #0]
  409056:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  40905a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40905e:	b96b      	cbnz	r3, 40907c <_lv_disp_refr_task+0x54>
    _lv_mem_buf_free_all();
  409060:	4b51      	ldr	r3, [pc, #324]	; (4091a8 <_lv_disp_refr_task+0x180>)
  409062:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
  409064:	4b51      	ldr	r3, [pc, #324]	; (4091ac <_lv_disp_refr_task+0x184>)
  409066:	4798      	blx	r3
}
  409068:	b005      	add	sp, #20
  40906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr->inv_p = 0;
  40906e:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409072:	f36f 0209 	bfc	r2, #0, #10
  409076:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        return;
  40907a:	e7f5      	b.n	409068 <_lv_disp_refr_task+0x40>
        if(lv_disp_is_true_double_buf(disp_refr)) {
  40907c:	4b4c      	ldr	r3, [pc, #304]	; (4091b0 <_lv_disp_refr_task+0x188>)
  40907e:	4798      	blx	r3
  409080:	b118      	cbz	r0, 40908a <_lv_disp_refr_task+0x62>
            if(disp_refr->driver.set_px_cb) {
  409082:	4b45      	ldr	r3, [pc, #276]	; (409198 <_lv_disp_refr_task+0x170>)
  409084:	6818      	ldr	r0, [r3, #0]
  409086:	6943      	ldr	r3, [r0, #20]
  409088:	b1fb      	cbz	r3, 4090ca <_lv_disp_refr_task+0xa2>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
  40908a:	4c43      	ldr	r4, [pc, #268]	; (409198 <_lv_disp_refr_task+0x170>)
  40908c:	6820      	ldr	r0, [r4, #0]
  40908e:	f44f 7180 	mov.w	r1, #256	; 0x100
  409092:	3062      	adds	r0, #98	; 0x62
  409094:	4d47      	ldr	r5, [pc, #284]	; (4091b4 <_lv_disp_refr_task+0x18c>)
  409096:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
  409098:	6820      	ldr	r0, [r4, #0]
  40909a:	2120      	movs	r1, #32
  40909c:	f500 70b1 	add.w	r0, r0, #354	; 0x162
  4090a0:	47a8      	blx	r5
        disp_refr->inv_p = 0;
  4090a2:	6823      	ldr	r3, [r4, #0]
  4090a4:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  4090a8:	f36f 0209 	bfc	r2, #0, #10
  4090ac:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        elaps = lv_tick_elaps(start);
  4090b0:	9801      	ldr	r0, [sp, #4]
  4090b2:	4b41      	ldr	r3, [pc, #260]	; (4091b8 <_lv_disp_refr_task+0x190>)
  4090b4:	4798      	blx	r3
        if(disp_refr->driver.monitor_cb) {
  4090b6:	6824      	ldr	r4, [r4, #0]
  4090b8:	69a3      	ldr	r3, [r4, #24]
  4090ba:	2b00      	cmp	r3, #0
  4090bc:	d0d0      	beq.n	409060 <_lv_disp_refr_task+0x38>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
  4090be:	4a3f      	ldr	r2, [pc, #252]	; (4091bc <_lv_disp_refr_task+0x194>)
  4090c0:	6812      	ldr	r2, [r2, #0]
  4090c2:	4601      	mov	r1, r0
  4090c4:	4620      	mov	r0, r4
  4090c6:	4798      	blx	r3
  4090c8:	e7ca      	b.n	409060 <_lv_disp_refr_task+0x38>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  4090ca:	4b3d      	ldr	r3, [pc, #244]	; (4091c0 <_lv_disp_refr_task+0x198>)
  4090cc:	4798      	blx	r3
  4090ce:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
  4090d0:	4b3c      	ldr	r3, [pc, #240]	; (4091c4 <_lv_disp_refr_task+0x19c>)
  4090d2:	4798      	blx	r3
                while(vdb->flushing);
  4090d4:	69a3      	ldr	r3, [r4, #24]
  4090d6:	2b00      	cmp	r3, #0
  4090d8:	d1fc      	bne.n	4090d4 <_lv_disp_refr_task+0xac>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
  4090da:	4b2f      	ldr	r3, [pc, #188]	; (409198 <_lv_disp_refr_task+0x170>)
  4090dc:	681b      	ldr	r3, [r3, #0]
  4090de:	f9b3 0000 	ldrsh.w	r0, [r3]
  4090e2:	0040      	lsls	r0, r0, #1
  4090e4:	4b38      	ldr	r3, [pc, #224]	; (4091c8 <_lv_disp_refr_task+0x1a0>)
  4090e6:	4798      	blx	r3
  4090e8:	9003      	str	r0, [sp, #12]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
  4090ea:	f8d4 b008 	ldr.w	fp, [r4, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  4090ee:	f8d4 a000 	ldr.w	sl, [r4]
  4090f2:	45d3      	cmp	fp, sl
  4090f4:	d006      	beq.n	409104 <_lv_disp_refr_task+0xdc>
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
  4090f6:	4b28      	ldr	r3, [pc, #160]	; (409198 <_lv_disp_refr_task+0x170>)
  4090f8:	6818      	ldr	r0, [r3, #0]
  4090fa:	4b34      	ldr	r3, [pc, #208]	; (4091cc <_lv_disp_refr_task+0x1a4>)
  4090fc:	4798      	blx	r3
  4090fe:	4681      	mov	r9, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
  409100:	2600      	movs	r6, #0
  409102:	e01d      	b.n	409140 <_lv_disp_refr_task+0x118>
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  409104:	f8d4 a004 	ldr.w	sl, [r4, #4]
  409108:	e7f5      	b.n	4090f6 <_lv_disp_refr_task+0xce>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
  40910a:	9a02      	ldr	r2, [sp, #8]
  40910c:	eb0a 0105 	add.w	r1, sl, r5
  409110:	9803      	ldr	r0, [sp, #12]
  409112:	4f2f      	ldr	r7, [pc, #188]	; (4091d0 <_lv_disp_refr_task+0x1a8>)
  409114:	47b8      	blx	r7
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
  409116:	9a02      	ldr	r2, [sp, #8]
  409118:	9903      	ldr	r1, [sp, #12]
  40911a:	eb0b 0005 	add.w	r0, fp, r5
  40911e:	47b8      	blx	r7
                            start_offs += hres * sizeof(lv_color_t);
  409120:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409124:	3401      	adds	r4, #1
  409126:	b224      	sxth	r4, r4
  409128:	4b1b      	ldr	r3, [pc, #108]	; (409198 <_lv_disp_refr_task+0x170>)
  40912a:	681b      	ldr	r3, [r3, #0]
  40912c:	f108 020c 	add.w	r2, r8, #12
  409130:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409134:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  409138:	429c      	cmp	r4, r3
  40913a:	dde6      	ble.n	40910a <_lv_disp_refr_task+0xe2>
                for(a = 0; a < disp_refr->inv_p; a++) {
  40913c:	3601      	adds	r6, #1
  40913e:	b2b6      	uxth	r6, r6
  409140:	46b0      	mov	r8, r6
  409142:	4b15      	ldr	r3, [pc, #84]	; (409198 <_lv_disp_refr_task+0x170>)
  409144:	681b      	ldr	r3, [r3, #0]
  409146:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  40914a:	f3c2 0209 	ubfx	r2, r2, #0, #10
  40914e:	4296      	cmp	r6, r2
  409150:	da18      	bge.n	409184 <_lv_disp_refr_task+0x15c>
                    if(disp_refr->inv_area_joined[a] == 0) {
  409152:	199a      	adds	r2, r3, r6
  409154:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
  409158:	2a00      	cmp	r2, #0
  40915a:	d1ef      	bne.n	40913c <_lv_disp_refr_task+0x114>
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
  40915c:	f108 020c 	add.w	r2, r8, #12
  409160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409164:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  409168:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40916c:	fb04 2509 	mla	r5, r4, r9, r2
                        uint32_t start_offs =
  409170:	006d      	lsls	r5, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  409172:	88db      	ldrh	r3, [r3, #6]
  409174:	b292      	uxth	r2, r2
  409176:	1a9b      	subs	r3, r3, r2
  409178:	b29b      	uxth	r3, r3
  40917a:	3301      	adds	r3, #1
  40917c:	b21b      	sxth	r3, r3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
  40917e:	005b      	lsls	r3, r3, #1
  409180:	9302      	str	r3, [sp, #8]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409182:	e7d1      	b.n	409128 <_lv_disp_refr_task+0x100>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
  409184:	9b03      	ldr	r3, [sp, #12]
  409186:	2b00      	cmp	r3, #0
  409188:	f43f af7f 	beq.w	40908a <_lv_disp_refr_task+0x62>
  40918c:	4618      	mov	r0, r3
  40918e:	4b11      	ldr	r3, [pc, #68]	; (4091d4 <_lv_disp_refr_task+0x1ac>)
  409190:	4798      	blx	r3
  409192:	e77a      	b.n	40908a <_lv_disp_refr_task+0x62>
  409194:	00414345 	.word	0x00414345
  409198:	2040c390 	.word	0x2040c390
  40919c:	004160c5 	.word	0x004160c5
  4091a0:	00408795 	.word	0x00408795
  4091a4:	00408f69 	.word	0x00408f69
  4091a8:	00415921 	.word	0x00415921
  4091ac:	00413e99 	.word	0x00413e99
  4091b0:	0041408d 	.word	0x0041408d
  4091b4:	00415ca1 	.word	0x00415ca1
  4091b8:	00414361 	.word	0x00414361
  4091bc:	2040c394 	.word	0x2040c394
  4091c0:	0041403d 	.word	0x0041403d
  4091c4:	00408bb5 	.word	0x00408bb5
  4091c8:	00415b15 	.word	0x00415b15
  4091cc:	00413f39 	.word	0x00413f39
  4091d0:	0041597d 	.word	0x0041597d
  4091d4:	004158c5 	.word	0x004158c5

004091d8 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
  4091d8:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
  4091da:	2104      	movs	r1, #4
  4091dc:	4b01      	ldr	r3, [pc, #4]	; (4091e4 <lv_style_init+0xc>)
  4091de:	4798      	blx	r3
  4091e0:	bd08      	pop	{r3, pc}
  4091e2:	bf00      	nop
  4091e4:	00415ca1 	.word	0x00415ca1

004091e8 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
  4091e8:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
  4091ea:	2108      	movs	r1, #8
  4091ec:	4b01      	ldr	r3, [pc, #4]	; (4091f4 <lv_style_list_init+0xc>)
  4091ee:	4798      	blx	r3
  4091f0:	bd08      	pop	{r3, pc}
  4091f2:	bf00      	nop
  4091f4:	00415ca1 	.word	0x00415ca1

004091f8 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
  4091f8:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
  4091fa:	7903      	ldrb	r3, [r0, #4]
  4091fc:	f013 063f 	ands.w	r6, r3, #63	; 0x3f
  409200:	d051      	beq.n	4092a6 <_lv_style_list_remove_style+0xae>
  409202:	2300      	movs	r3, #0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
  409204:	7902      	ldrb	r2, [r0, #4]
  409206:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40920a:	4293      	cmp	r3, r2
  40920c:	da07      	bge.n	40921e <_lv_style_list_remove_style+0x26>
        if(list->style_list[i] == style) {
  40920e:	6804      	ldr	r4, [r0, #0]
  409210:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  409214:	428c      	cmp	r4, r1
  409216:	d016      	beq.n	409246 <_lv_style_list_remove_style+0x4e>
    for(i = 0; i < list->style_cnt; i++) {
  409218:	3301      	adds	r3, #1
  40921a:	b2db      	uxtb	r3, r3
  40921c:	e7f2      	b.n	409204 <_lv_style_list_remove_style+0xc>
    bool found = false;
  40921e:	2300      	movs	r3, #0
            found = true;
            break;
        }
    }
    if(found == false) return;
  409220:	2b00      	cmp	r3, #0
  409222:	d040      	beq.n	4092a6 <_lv_style_list_remove_style+0xae>
  409224:	460d      	mov	r5, r1
  409226:	4604      	mov	r4, r0

    if(list->style_cnt == 1) {
  409228:	2e01      	cmp	r6, #1
  40922a:	d00e      	beq.n	40924a <_lv_style_list_remove_style+0x52>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
  40922c:	3a01      	subs	r2, #1
  40922e:	0090      	lsls	r0, r2, #2
  409230:	4b1d      	ldr	r3, [pc, #116]	; (4092a8 <_lv_style_list_remove_style+0xb0>)
  409232:	4798      	blx	r3
  409234:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
  409236:	4b1d      	ldr	r3, [pc, #116]	; (4092ac <_lv_style_list_remove_style+0xb4>)
  409238:	4798      	blx	r3
  40923a:	b190      	cbz	r0, 409262 <_lv_style_list_remove_style+0x6a>
    if(new_classes == NULL) {
  40923c:	2e00      	cmp	r6, #0
  40923e:	d032      	beq.n	4092a6 <_lv_style_list_remove_style+0xae>
  409240:	2100      	movs	r1, #0
  409242:	460b      	mov	r3, r1
  409244:	e015      	b.n	409272 <_lv_style_list_remove_style+0x7a>
            found = true;
  409246:	2301      	movs	r3, #1
  409248:	e7ea      	b.n	409220 <_lv_style_list_remove_style+0x28>
        lv_mem_free(list->style_list);
  40924a:	6800      	ldr	r0, [r0, #0]
  40924c:	4b18      	ldr	r3, [pc, #96]	; (4092b0 <_lv_style_list_remove_style+0xb8>)
  40924e:	4798      	blx	r3
        list->style_list = NULL;
  409250:	2200      	movs	r2, #0
  409252:	6022      	str	r2, [r4, #0]
        list->style_cnt = 0;
  409254:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
  409256:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40925a:	f362 1386 	bfi	r3, r2, #6, #1
  40925e:	7123      	strb	r3, [r4, #4]
        return;
  409260:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
  409262:	4632      	mov	r2, r6
  409264:	2300      	movs	r3, #0
  409266:	4813      	ldr	r0, [pc, #76]	; (4092b4 <_lv_style_list_remove_style+0xbc>)
  409268:	4913      	ldr	r1, [pc, #76]	; (4092b8 <_lv_style_list_remove_style+0xc0>)
  40926a:	4788      	blx	r1
  40926c:	e7fe      	b.n	40926c <_lv_style_list_remove_style+0x74>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
  40926e:	3301      	adds	r3, #1
  409270:	b2db      	uxtb	r3, r3
  409272:	7922      	ldrb	r2, [r4, #4]
  409274:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409278:	4293      	cmp	r3, r2
  40927a:	da09      	bge.n	409290 <_lv_style_list_remove_style+0x98>
        if(list->style_list[i] == style) continue;
  40927c:	6822      	ldr	r2, [r4, #0]
  40927e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  409282:	4295      	cmp	r5, r2
  409284:	d0f3      	beq.n	40926e <_lv_style_list_remove_style+0x76>
        new_classes[j] = list->style_list[i];
  409286:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
  40928a:	3101      	adds	r1, #1
  40928c:	b2c9      	uxtb	r1, r1
  40928e:	e7ee      	b.n	40926e <_lv_style_list_remove_style+0x76>

    }

    lv_mem_free(list->style_list);
  409290:	6820      	ldr	r0, [r4, #0]
  409292:	4b07      	ldr	r3, [pc, #28]	; (4092b0 <_lv_style_list_remove_style+0xb8>)
  409294:	4798      	blx	r3

    list->style_cnt--;
  409296:	7923      	ldrb	r3, [r4, #4]
  409298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  40929c:	323f      	adds	r2, #63	; 0x3f
  40929e:	f362 0305 	bfi	r3, r2, #0, #6
  4092a2:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  4092a4:	6026      	str	r6, [r4, #0]
  4092a6:	bd70      	pop	{r4, r5, r6, pc}
  4092a8:	0041576d 	.word	0x0041576d
  4092ac:	00415065 	.word	0x00415065
  4092b0:	00415831 	.word	0x00415831
  4092b4:	00421264 	.word	0x00421264
  4092b8:	00415071 	.word	0x00415071

004092bc <_lv_style_list_add_style>:
    if(list == NULL) return;
  4092bc:	2800      	cmp	r0, #0
  4092be:	d048      	beq.n	409352 <_lv_style_list_add_style+0x96>
{
  4092c0:	b570      	push	{r4, r5, r6, lr}
  4092c2:	4604      	mov	r4, r0
  4092c4:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
  4092c6:	4b23      	ldr	r3, [pc, #140]	; (409354 <_lv_style_list_add_style+0x98>)
  4092c8:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
  4092ca:	7923      	ldrb	r3, [r4, #4]
  4092cc:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  4092d0:	d117      	bne.n	409302 <_lv_style_list_add_style+0x46>
  4092d2:	2004      	movs	r0, #4
  4092d4:	4b20      	ldr	r3, [pc, #128]	; (409358 <_lv_style_list_add_style+0x9c>)
  4092d6:	4798      	blx	r3
  4092d8:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
  4092da:	4628      	mov	r0, r5
  4092dc:	4b1f      	ldr	r3, [pc, #124]	; (40935c <_lv_style_list_add_style+0xa0>)
  4092de:	4798      	blx	r3
  4092e0:	b1c8      	cbz	r0, 409316 <_lv_style_list_add_style+0x5a>
    if(new_classes == NULL) {
  4092e2:	2d00      	cmp	r5, #0
  4092e4:	d034      	beq.n	409350 <_lv_style_list_add_style+0x94>
    if(list->has_trans) first_style++;
  4092e6:	7923      	ldrb	r3, [r4, #4]
  4092e8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4092ec:	d119      	bne.n	409322 <_lv_style_list_add_style+0x66>
    uint8_t first_style = 0;
  4092ee:	2200      	movs	r2, #0
    if(list->has_local) first_style++;
  4092f0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4092f4:	d001      	beq.n	4092fa <_lv_style_list_add_style+0x3e>
  4092f6:	3201      	adds	r2, #1
  4092f8:	b2d2      	uxtb	r2, r2
    for(i = list->style_cnt; i > first_style; i--) {
  4092fa:	7923      	ldrb	r3, [r4, #4]
  4092fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  409300:	e01a      	b.n	409338 <_lv_style_list_add_style+0x7c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
  409302:	7921      	ldrb	r1, [r4, #4]
  409304:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  409308:	3101      	adds	r1, #1
  40930a:	0089      	lsls	r1, r1, #2
  40930c:	6820      	ldr	r0, [r4, #0]
  40930e:	4b14      	ldr	r3, [pc, #80]	; (409360 <_lv_style_list_add_style+0xa4>)
  409310:	4798      	blx	r3
  409312:	4605      	mov	r5, r0
  409314:	e7e1      	b.n	4092da <_lv_style_list_add_style+0x1e>
    LV_ASSERT_MEM(new_classes);
  409316:	462a      	mov	r2, r5
  409318:	2300      	movs	r3, #0
  40931a:	4812      	ldr	r0, [pc, #72]	; (409364 <_lv_style_list_add_style+0xa8>)
  40931c:	4912      	ldr	r1, [pc, #72]	; (409368 <_lv_style_list_add_style+0xac>)
  40931e:	4788      	blx	r1
  409320:	e7fe      	b.n	409320 <_lv_style_list_add_style+0x64>
    if(list->has_trans) first_style++;
  409322:	2201      	movs	r2, #1
  409324:	e7e4      	b.n	4092f0 <_lv_style_list_add_style+0x34>
        new_classes[i] = new_classes[i - 1];
  409326:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
  40932a:	4419      	add	r1, r3
  40932c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  409330:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    for(i = list->style_cnt; i > first_style; i--) {
  409334:	3b01      	subs	r3, #1
  409336:	b2db      	uxtb	r3, r3
  409338:	4293      	cmp	r3, r2
  40933a:	d8f4      	bhi.n	409326 <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
  40933c:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
    list->style_cnt++;
  409340:	7923      	ldrb	r3, [r4, #4]
  409342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409346:	3201      	adds	r2, #1
  409348:	f362 0305 	bfi	r3, r2, #0, #6
  40934c:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  40934e:	6025      	str	r5, [r4, #0]
  409350:	bd70      	pop	{r4, r5, r6, pc}
  409352:	4770      	bx	lr
  409354:	004091f9 	.word	0x004091f9
  409358:	0041576d 	.word	0x0041576d
  40935c:	00415065 	.word	0x00415065
  409360:	00415a9d 	.word	0x00415a9d
  409364:	00421264 	.word	0x00421264
  409368:	00415071 	.word	0x00415071

0040936c <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
  40936c:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
  40936e:	7902      	ldrb	r2, [r0, #4]
  409370:	f012 0f40 	tst.w	r2, #64	; 0x40
  409374:	d015      	beq.n	4093a2 <get_alloc_local_style+0x36>
  409376:	09d3      	lsrs	r3, r2, #7
    if(list->has_trans && list->skip_trans) id++;
  409378:	8881      	ldrh	r1, [r0, #4]
  40937a:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  40937e:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  409382:	d00c      	beq.n	40939e <get_alloc_local_style+0x32>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409384:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  409388:	d027      	beq.n	4093da <get_alloc_local_style+0x6e>
  40938a:	7902      	ldrb	r2, [r0, #4]
  40938c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409390:	4293      	cmp	r3, r2
  409392:	da24      	bge.n	4093de <get_alloc_local_style+0x72>
    return list->style_list[id];
  409394:	6802      	ldr	r2, [r0, #0]
  409396:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
  40939a:	4628      	mov	r0, r5
  40939c:	bd38      	pop	{r3, r4, r5, pc}
    if(list->has_trans && list->skip_trans) id++;
  40939e:	3301      	adds	r3, #1
  4093a0:	e7f0      	b.n	409384 <get_alloc_local_style+0x18>
  4093a2:	4604      	mov	r4, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
  4093a4:	2004      	movs	r0, #4
  4093a6:	4b0f      	ldr	r3, [pc, #60]	; (4093e4 <get_alloc_local_style+0x78>)
  4093a8:	4798      	blx	r3
  4093aa:	4605      	mov	r5, r0
    LV_ASSERT_MEM(local_style);
  4093ac:	4b0e      	ldr	r3, [pc, #56]	; (4093e8 <get_alloc_local_style+0x7c>)
  4093ae:	4798      	blx	r3
  4093b0:	b168      	cbz	r0, 4093ce <get_alloc_local_style+0x62>
    if(local_style == NULL) {
  4093b2:	2d00      	cmp	r5, #0
  4093b4:	d0f1      	beq.n	40939a <get_alloc_local_style+0x2e>
    lv_style_init(local_style);
  4093b6:	4628      	mov	r0, r5
  4093b8:	4b0c      	ldr	r3, [pc, #48]	; (4093ec <get_alloc_local_style+0x80>)
  4093ba:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
  4093bc:	4629      	mov	r1, r5
  4093be:	4620      	mov	r0, r4
  4093c0:	4b0b      	ldr	r3, [pc, #44]	; (4093f0 <get_alloc_local_style+0x84>)
  4093c2:	4798      	blx	r3
    list->has_local = 1;
  4093c4:	7923      	ldrb	r3, [r4, #4]
  4093c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4093ca:	7123      	strb	r3, [r4, #4]
    return local_style;
  4093cc:	e7e5      	b.n	40939a <get_alloc_local_style+0x2e>
    LV_ASSERT_MEM(local_style);
  4093ce:	462a      	mov	r2, r5
  4093d0:	2300      	movs	r3, #0
  4093d2:	4808      	ldr	r0, [pc, #32]	; (4093f4 <get_alloc_local_style+0x88>)
  4093d4:	4908      	ldr	r1, [pc, #32]	; (4093f8 <get_alloc_local_style+0x8c>)
  4093d6:	4788      	blx	r1
  4093d8:	e7fe      	b.n	4093d8 <get_alloc_local_style+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  4093da:	2500      	movs	r5, #0
  4093dc:	e7dd      	b.n	40939a <get_alloc_local_style+0x2e>
  4093de:	2500      	movs	r5, #0
  4093e0:	e7db      	b.n	40939a <get_alloc_local_style+0x2e>
  4093e2:	bf00      	nop
  4093e4:	0041576d 	.word	0x0041576d
  4093e8:	00415065 	.word	0x00415065
  4093ec:	004091d9 	.word	0x004091d9
  4093f0:	004092bd 	.word	0x004092bd
  4093f4:	00421264 	.word	0x00421264
  4093f8:	00415071 	.word	0x00415071

004093fc <lv_style_reset>:
{
  4093fc:	b510      	push	{r4, lr}
  4093fe:	4604      	mov	r4, r0
    lv_mem_free(style->map);
  409400:	6800      	ldr	r0, [r0, #0]
  409402:	4b02      	ldr	r3, [pc, #8]	; (40940c <lv_style_reset+0x10>)
  409404:	4798      	blx	r3
    style->map = NULL;
  409406:	2300      	movs	r3, #0
  409408:	6023      	str	r3, [r4, #0]
  40940a:	bd10      	pop	{r4, pc}
  40940c:	00415831 	.word	0x00415831

00409410 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
  409410:	6803      	ldr	r3, [r0, #0]
  409412:	b30b      	cbz	r3, 409458 <_lv_style_get_mem_size+0x48>
{
  409414:	b082      	sub	sp, #8
  409416:	2200      	movs	r2, #0
  409418:	e001      	b.n	40941e <_lv_style_get_mem_size+0xe>
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40941a:	2304      	movs	r3, #4
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
  40941c:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40941e:	6803      	ldr	r3, [r0, #0]
  409420:	5c99      	ldrb	r1, [r3, r2]
  409422:	f88d 1006 	strb.w	r1, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409426:	4413      	add	r3, r2
  409428:	785b      	ldrb	r3, [r3, #1]
  40942a:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40942e:	b2cb      	uxtb	r3, r1
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409430:	2bff      	cmp	r3, #255	; 0xff
  409432:	d00d      	beq.n	409450 <_lv_style_get_mem_size+0x40>
    prop_id &= 0xF;
  409434:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409438:	2b08      	cmp	r3, #8
  40943a:	d9ee      	bls.n	40941a <_lv_style_get_mem_size+0xa>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40943c:	2b0b      	cmp	r3, #11
  40943e:	d903      	bls.n	409448 <_lv_style_get_mem_size+0x38>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409440:	2b0d      	cmp	r3, #13
  409442:	d803      	bhi.n	40944c <_lv_style_get_mem_size+0x3c>
  409444:	2303      	movs	r3, #3
  409446:	e7e9      	b.n	40941c <_lv_style_get_mem_size+0xc>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409448:	2304      	movs	r3, #4
  40944a:	e7e7      	b.n	40941c <_lv_style_get_mem_size+0xc>
    else size += sizeof(const void *);
  40944c:	2306      	movs	r3, #6
  40944e:	e7e5      	b.n	40941c <_lv_style_get_mem_size+0xc>
    return i + sizeof(lv_style_property_t);
  409450:	1c90      	adds	r0, r2, #2
  409452:	b280      	uxth	r0, r0
}
  409454:	b002      	add	sp, #8
  409456:	4770      	bx	lr
    if(style->map == NULL) return 0;
  409458:	2000      	movs	r0, #0
  40945a:	4770      	bx	lr

0040945c <lv_style_copy>:
    if(style_src == NULL) return;
  40945c:	b181      	cbz	r1, 409480 <lv_style_copy+0x24>
{
  40945e:	b570      	push	{r4, r5, r6, lr}
  409460:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
  409462:	680a      	ldr	r2, [r1, #0]
  409464:	b15a      	cbz	r2, 40947e <lv_style_copy+0x22>
  409466:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
  409468:	4608      	mov	r0, r1
  40946a:	4b06      	ldr	r3, [pc, #24]	; (409484 <lv_style_copy+0x28>)
  40946c:	4798      	blx	r3
  40946e:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
  409470:	4b05      	ldr	r3, [pc, #20]	; (409488 <lv_style_copy+0x2c>)
  409472:	4798      	blx	r3
  409474:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
  409476:	4632      	mov	r2, r6
  409478:	6821      	ldr	r1, [r4, #0]
  40947a:	4b04      	ldr	r3, [pc, #16]	; (40948c <lv_style_copy+0x30>)
  40947c:	4798      	blx	r3
  40947e:	bd70      	pop	{r4, r5, r6, pc}
  409480:	4770      	bx	lr
  409482:	bf00      	nop
  409484:	00409411 	.word	0x00409411
  409488:	0041576d 	.word	0x0041576d
  40948c:	0041597d 	.word	0x0041597d

00409490 <lv_style_remove_prop>:
    if(style == NULL) return false;
  409490:	2800      	cmp	r0, #0
  409492:	f000 808d 	beq.w	4095b0 <lv_style_remove_prop+0x120>
{
  409496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40949a:	b082      	sub	sp, #8
  40949c:	4604      	mov	r4, r0
    if(style->map == NULL) return -1;
  40949e:	6803      	ldr	r3, [r0, #0]
  4094a0:	2b00      	cmp	r3, #0
  4094a2:	d05e      	beq.n	409562 <lv_style_remove_prop+0xd2>
    uint8_t id_to_find = prop & 0xFF;
  4094a4:	b2cd      	uxtb	r5, r1
    attr = (prop >> 8) & 0xFF;
  4094a6:	0a0e      	lsrs	r6, r1, #8
    size_t i = 0;
  4094a8:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  4094aa:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t weight = -1;
  4094ae:	46be      	mov	lr, r7
  4094b0:	e03b      	b.n	40952a <lv_style_remove_prop+0x9a>
    prop_p[0] = style->map[idx];
  4094b2:	f8d4 c000 	ldr.w	ip, [r4]
  4094b6:	f81c 8002 	ldrb.w	r8, [ip, r2]
  4094ba:	f88d 8006 	strb.w	r8, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  4094be:	f81c 0000 	ldrb.w	r0, [ip, r0]
  4094c2:	f88d 0007 	strb.w	r0, [sp, #7]
    return prop;
  4094c6:	f8bd c006 	ldrh.w	ip, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  4094ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
  4094ce:	fa5f f08c 	uxtb.w	r0, ip
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  4094d2:	ea86 0800 	eor.w	r8, r6, r0
  4094d6:	f018 0f7f 	tst.w	r8, #127	; 0x7f
  4094da:	d00c      	beq.n	4094f6 <lv_style_remove_prop+0x66>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  4094dc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4094e0:	f006 087f 	and.w	r8, r6, #127	; 0x7f
  4094e4:	ea30 0808 	bics.w	r8, r0, r8
  4094e8:	d12d      	bne.n	409546 <lv_style_remove_prop+0xb6>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  4094ea:	4570      	cmp	r0, lr
  4094ec:	dd2b      	ble.n	409546 <lv_style_remove_prop+0xb6>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  4094ee:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
                    id_guess = i;
  4094f2:	b217      	sxth	r7, r2
  4094f4:	e027      	b.n	409546 <lv_style_remove_prop+0xb6>
                return i;
  4094f6:	4617      	mov	r7, r2
    if(id >= 0) {
  4094f8:	2f00      	cmp	r7, #0
  4094fa:	db5b      	blt.n	4095b4 <lv_style_remove_prop+0x124>
        attr_found = get_style_prop_attr(style, id);
  4094fc:	463d      	mov	r5, r7
    prop_p[0] = style->map[idx];
  4094fe:	6823      	ldr	r3, [r4, #0]
  409500:	5dda      	ldrb	r2, [r3, r7]
  409502:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409506:	441f      	add	r7, r3
  409508:	787b      	ldrb	r3, [r7, #1]
  40950a:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40950e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        attr_goal = (prop >> 8) & 0xFFU;
  409512:	0a0b      	lsrs	r3, r1, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409514:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
  409518:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40951c:	d024      	beq.n	409568 <lv_style_remove_prop+0xd8>
    return false;
  40951e:	2000      	movs	r0, #0
}
  409520:	b002      	add	sp, #8
  409522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409526:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409528:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40952a:	6823      	ldr	r3, [r4, #0]
  40952c:	5c98      	ldrb	r0, [r3, r2]
  40952e:	f88d 0006 	strb.w	r0, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409532:	1c50      	adds	r0, r2, #1
  409534:	5c1b      	ldrb	r3, [r3, r0]
  409536:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40953a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40953e:	2bff      	cmp	r3, #255	; 0xff
  409540:	d0da      	beq.n	4094f8 <lv_style_remove_prop+0x68>
        if(prop_id == id_to_find) {
  409542:	429d      	cmp	r5, r3
  409544:	d0b5      	beq.n	4094b2 <lv_style_remove_prop+0x22>
    prop_id &= 0xF;
  409546:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40954a:	2b08      	cmp	r3, #8
  40954c:	d9eb      	bls.n	409526 <lv_style_remove_prop+0x96>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40954e:	2b0b      	cmp	r3, #11
  409550:	d903      	bls.n	40955a <lv_style_remove_prop+0xca>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409552:	2b0d      	cmp	r3, #13
  409554:	d803      	bhi.n	40955e <lv_style_remove_prop+0xce>
  409556:	2303      	movs	r3, #3
  409558:	e7e6      	b.n	409528 <lv_style_remove_prop+0x98>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40955a:	2304      	movs	r3, #4
  40955c:	e7e4      	b.n	409528 <lv_style_remove_prop+0x98>
    else size += sizeof(const void *);
  40955e:	2306      	movs	r3, #6
  409560:	e7e2      	b.n	409528 <lv_style_remove_prop+0x98>
    if(style->map == NULL) return -1;
  409562:	f04f 37ff 	mov.w	r7, #4294967295
  409566:	e7c7      	b.n	4094f8 <lv_style_remove_prop+0x68>
  409568:	460e      	mov	r6, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
  40956a:	4620      	mov	r0, r4
  40956c:	4b12      	ldr	r3, [pc, #72]	; (4095b8 <lv_style_remove_prop+0x128>)
  40956e:	4798      	blx	r3
    prop_id &= 0xF;
  409570:	f006 010f 	and.w	r1, r6, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409574:	2908      	cmp	r1, #8
  409576:	d905      	bls.n	409584 <lv_style_remove_prop+0xf4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409578:	290b      	cmp	r1, #11
  40957a:	d90f      	bls.n	40959c <lv_style_remove_prop+0x10c>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40957c:	290d      	cmp	r1, #13
  40957e:	d80f      	bhi.n	4095a0 <lv_style_remove_prop+0x110>
  409580:	2603      	movs	r6, #3
  409582:	e000      	b.n	409586 <lv_style_remove_prop+0xf6>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409584:	2604      	movs	r6, #4
            for(i = id; i < map_size - prop_size; i++) {
  409586:	462b      	mov	r3, r5
  409588:	b2f2      	uxtb	r2, r6
  40958a:	1a81      	subs	r1, r0, r2
  40958c:	428b      	cmp	r3, r1
  40958e:	d209      	bcs.n	4095a4 <lv_style_remove_prop+0x114>
                style->map[i] = style->map[i + prop_size];
  409590:	6821      	ldr	r1, [r4, #0]
  409592:	441a      	add	r2, r3
  409594:	5c8a      	ldrb	r2, [r1, r2]
  409596:	54ca      	strb	r2, [r1, r3]
            for(i = id; i < map_size - prop_size; i++) {
  409598:	3301      	adds	r3, #1
  40959a:	e7f5      	b.n	409588 <lv_style_remove_prop+0xf8>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40959c:	2604      	movs	r6, #4
  40959e:	e7f2      	b.n	409586 <lv_style_remove_prop+0xf6>
    else size += sizeof(const void *);
  4095a0:	2606      	movs	r6, #6
  4095a2:	e7f0      	b.n	409586 <lv_style_remove_prop+0xf6>
    style->map = lv_mem_realloc(style->map, sz);
  4095a4:	6820      	ldr	r0, [r4, #0]
  4095a6:	4b05      	ldr	r3, [pc, #20]	; (4095bc <lv_style_remove_prop+0x12c>)
  4095a8:	4798      	blx	r3
  4095aa:	6020      	str	r0, [r4, #0]
            return true;
  4095ac:	2001      	movs	r0, #1
  4095ae:	e7b7      	b.n	409520 <lv_style_remove_prop+0x90>
    if(style == NULL) return false;
  4095b0:	2000      	movs	r0, #0
  4095b2:	4770      	bx	lr
    return false;
  4095b4:	2000      	movs	r0, #0
  4095b6:	e7b3      	b.n	409520 <lv_style_remove_prop+0x90>
  4095b8:	00409411 	.word	0x00409411
  4095bc:	00415a9d 	.word	0x00415a9d

004095c0 <_lv_style_set_int>:
{
  4095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4095c2:	b085      	sub	sp, #20
  4095c4:	f8ad 1006 	strh.w	r1, [sp, #6]
  4095c8:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
  4095cc:	6803      	ldr	r3, [r0, #0]
  4095ce:	2b00      	cmp	r3, #0
  4095d0:	d061      	beq.n	409696 <_lv_style_set_int+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  4095d2:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  4095d4:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  4095d6:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  4095d8:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  4095dc:	4627      	mov	r7, r4
  4095de:	e023      	b.n	409628 <_lv_style_set_int+0x68>
    prop_p[0] = style->map[idx];
  4095e0:	f8d0 e000 	ldr.w	lr, [r0]
  4095e4:	f81e c002 	ldrb.w	ip, [lr, r2]
  4095e8:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  4095ec:	f81e 1001 	ldrb.w	r1, [lr, r1]
  4095f0:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  4095f4:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  4095f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  4095fc:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409600:	ea85 0c01 	eor.w	ip, r5, r1
  409604:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409608:	d02b      	beq.n	409662 <_lv_style_set_int+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40960a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40960e:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409612:	ea31 0c0c 	bics.w	ip, r1, ip
  409616:	d115      	bne.n	409644 <_lv_style_set_int+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409618:	42b9      	cmp	r1, r7
  40961a:	dd13      	ble.n	409644 <_lv_style_set_int+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40961c:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409620:	b214      	sxth	r4, r2
  409622:	e00f      	b.n	409644 <_lv_style_set_int+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409624:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409626:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409628:	6803      	ldr	r3, [r0, #0]
  40962a:	5c99      	ldrb	r1, [r3, r2]
  40962c:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409630:	1c51      	adds	r1, r2, #1
  409632:	5c5b      	ldrb	r3, [r3, r1]
  409634:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409638:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40963c:	2bff      	cmp	r3, #255	; 0xff
  40963e:	d00f      	beq.n	409660 <_lv_style_set_int+0xa0>
        if(prop_id == id_to_find) {
  409640:	429e      	cmp	r6, r3
  409642:	d0cd      	beq.n	4095e0 <_lv_style_set_int+0x20>
    prop_id &= 0xF;
  409644:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409648:	2b08      	cmp	r3, #8
  40964a:	d9eb      	bls.n	409624 <_lv_style_set_int+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40964c:	2b0b      	cmp	r3, #11
  40964e:	d903      	bls.n	409658 <_lv_style_set_int+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409650:	2b0d      	cmp	r3, #13
  409652:	d803      	bhi.n	40965c <_lv_style_set_int+0x9c>
  409654:	2303      	movs	r3, #3
  409656:	e7e6      	b.n	409626 <_lv_style_set_int+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409658:	2304      	movs	r3, #4
  40965a:	e7e4      	b.n	409626 <_lv_style_set_int+0x66>
    else size += sizeof(const void *);
  40965c:	2306      	movs	r3, #6
  40965e:	e7e2      	b.n	409626 <_lv_style_set_int+0x66>
    return id_guess;
  409660:	4622      	mov	r2, r4
    if(id >= 0) {
  409662:	2a00      	cmp	r2, #0
  409664:	db23      	blt.n	4096ae <_lv_style_set_int+0xee>
    prop_p[0] = style->map[idx];
  409666:	6803      	ldr	r3, [r0, #0]
  409668:	5c99      	ldrb	r1, [r3, r2]
  40966a:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40966e:	4413      	add	r3, r2
  409670:	785b      	ldrb	r3, [r3, #1]
  409672:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409676:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40967a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40967e:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409680:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  409684:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409688:	d111      	bne.n	4096ae <_lv_style_set_int+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
  40968a:	6803      	ldr	r3, [r0, #0]
  40968c:	3202      	adds	r2, #2
  40968e:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409690:	a901      	add	r1, sp, #4
  409692:	2302      	movs	r3, #2
  409694:	e007      	b.n	4096a6 <_lv_style_set_int+0xe6>
    if(style->map == NULL) return -1;
  409696:	f04f 32ff 	mov.w	r2, #4294967295
  40969a:	e7e2      	b.n	409662 <_lv_style_set_int+0xa2>
        *d8 = *s8;
  40969c:	f811 0b01 	ldrb.w	r0, [r1], #1
  4096a0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4096a4:	3b01      	subs	r3, #1
    while(len) {
  4096a6:	2b00      	cmp	r3, #0
  4096a8:	d1f8      	bne.n	40969c <_lv_style_set_int+0xdc>
}
  4096aa:	b005      	add	sp, #20
  4096ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4096ae:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  4096b0:	23ff      	movs	r3, #255	; 0xff
  4096b2:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  4096b6:	4b21      	ldr	r3, [pc, #132]	; (40973c <_lv_style_set_int+0x17c>)
  4096b8:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  4096ba:	4603      	mov	r3, r0
  4096bc:	b908      	cbnz	r0, 4096c2 <_lv_style_set_int+0x102>
  4096be:	3302      	adds	r3, #2
  4096c0:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
  4096c2:	3304      	adds	r3, #4
  4096c4:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  4096c6:	4621      	mov	r1, r4
  4096c8:	6828      	ldr	r0, [r5, #0]
  4096ca:	4b1d      	ldr	r3, [pc, #116]	; (409740 <_lv_style_set_int+0x180>)
  4096cc:	4798      	blx	r3
  4096ce:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  4096d0:	4b1c      	ldr	r3, [pc, #112]	; (409744 <_lv_style_set_int+0x184>)
  4096d2:	4798      	blx	r3
  4096d4:	b148      	cbz	r0, 4096ea <_lv_style_set_int+0x12a>
    if(style == NULL) return;
  4096d6:	2d00      	cmp	r5, #0
  4096d8:	d0e7      	beq.n	4096aa <_lv_style_set_int+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  4096da:	682b      	ldr	r3, [r5, #0]
  4096dc:	1f20      	subs	r0, r4, #4
  4096de:	1fa2      	subs	r2, r4, #6
  4096e0:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  4096e2:	f10d 0106 	add.w	r1, sp, #6
  4096e6:	2202      	movs	r2, #2
  4096e8:	e00a      	b.n	409700 <_lv_style_set_int+0x140>
    LV_ASSERT_MEM(style->map);
  4096ea:	682a      	ldr	r2, [r5, #0]
  4096ec:	2300      	movs	r3, #0
  4096ee:	4816      	ldr	r0, [pc, #88]	; (409748 <_lv_style_set_int+0x188>)
  4096f0:	4916      	ldr	r1, [pc, #88]	; (40974c <_lv_style_set_int+0x18c>)
  4096f2:	4788      	blx	r1
  4096f4:	e7fe      	b.n	4096f4 <_lv_style_set_int+0x134>
        *d8 = *s8;
  4096f6:	f811 6b01 	ldrb.w	r6, [r1], #1
  4096fa:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  4096fe:	3a01      	subs	r2, #1
    while(len) {
  409700:	2a00      	cmp	r2, #0
  409702:	d1f8      	bne.n	4096f6 <_lv_style_set_int+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
  409704:	682b      	ldr	r3, [r5, #0]
  409706:	3c02      	subs	r4, #2
  409708:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40970a:	a901      	add	r1, sp, #4
  40970c:	2202      	movs	r2, #2
  40970e:	e004      	b.n	40971a <_lv_style_set_int+0x15a>
        *d8 = *s8;
  409710:	f811 0b01 	ldrb.w	r0, [r1], #1
  409714:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  409718:	3a01      	subs	r2, #1
    while(len) {
  40971a:	2a00      	cmp	r2, #0
  40971c:	d1f8      	bne.n	409710 <_lv_style_set_int+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40971e:	682b      	ldr	r3, [r5, #0]
  409720:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409722:	f10d 020e 	add.w	r2, sp, #14
  409726:	2302      	movs	r3, #2
  409728:	e004      	b.n	409734 <_lv_style_set_int+0x174>
        *d8 = *s8;
  40972a:	f812 1b01 	ldrb.w	r1, [r2], #1
  40972e:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  409732:	3b01      	subs	r3, #1
    while(len) {
  409734:	2b00      	cmp	r3, #0
  409736:	d1f8      	bne.n	40972a <_lv_style_set_int+0x16a>
  409738:	e7b7      	b.n	4096aa <_lv_style_set_int+0xea>
  40973a:	bf00      	nop
  40973c:	00409411 	.word	0x00409411
  409740:	00415a9d 	.word	0x00415a9d
  409744:	00415065 	.word	0x00415065
  409748:	00421264 	.word	0x00421264
  40974c:	00415071 	.word	0x00415071

00409750 <_lv_style_set_color>:
{
  409750:	b5f0      	push	{r4, r5, r6, r7, lr}
  409752:	b085      	sub	sp, #20
  409754:	f8ad 2004 	strh.w	r2, [sp, #4]
  409758:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40975c:	6803      	ldr	r3, [r0, #0]
  40975e:	2b00      	cmp	r3, #0
  409760:	d061      	beq.n	409826 <_lv_style_set_color+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  409762:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409764:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409766:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409768:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40976c:	4627      	mov	r7, r4
  40976e:	e023      	b.n	4097b8 <_lv_style_set_color+0x68>
    prop_p[0] = style->map[idx];
  409770:	f8d0 e000 	ldr.w	lr, [r0]
  409774:	f81e c002 	ldrb.w	ip, [lr, r2]
  409778:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40977c:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409780:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409784:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409788:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40978c:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409790:	ea85 0c01 	eor.w	ip, r5, r1
  409794:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409798:	d02b      	beq.n	4097f2 <_lv_style_set_color+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40979a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40979e:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  4097a2:	ea31 0c0c 	bics.w	ip, r1, ip
  4097a6:	d115      	bne.n	4097d4 <_lv_style_set_color+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  4097a8:	42b9      	cmp	r1, r7
  4097aa:	dd13      	ble.n	4097d4 <_lv_style_set_color+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  4097ac:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  4097b0:	b214      	sxth	r4, r2
  4097b2:	e00f      	b.n	4097d4 <_lv_style_set_color+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  4097b4:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  4097b6:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  4097b8:	6803      	ldr	r3, [r0, #0]
  4097ba:	5c99      	ldrb	r1, [r3, r2]
  4097bc:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  4097c0:	1c51      	adds	r1, r2, #1
  4097c2:	5c5b      	ldrb	r3, [r3, r1]
  4097c4:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  4097c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  4097cc:	2bff      	cmp	r3, #255	; 0xff
  4097ce:	d00f      	beq.n	4097f0 <_lv_style_set_color+0xa0>
        if(prop_id == id_to_find) {
  4097d0:	429e      	cmp	r6, r3
  4097d2:	d0cd      	beq.n	409770 <_lv_style_set_color+0x20>
    prop_id &= 0xF;
  4097d4:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  4097d8:	2b08      	cmp	r3, #8
  4097da:	d9eb      	bls.n	4097b4 <_lv_style_set_color+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  4097dc:	2b0b      	cmp	r3, #11
  4097de:	d903      	bls.n	4097e8 <_lv_style_set_color+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  4097e0:	2b0d      	cmp	r3, #13
  4097e2:	d803      	bhi.n	4097ec <_lv_style_set_color+0x9c>
  4097e4:	2303      	movs	r3, #3
  4097e6:	e7e6      	b.n	4097b6 <_lv_style_set_color+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  4097e8:	2304      	movs	r3, #4
  4097ea:	e7e4      	b.n	4097b6 <_lv_style_set_color+0x66>
    else size += sizeof(const void *);
  4097ec:	2306      	movs	r3, #6
  4097ee:	e7e2      	b.n	4097b6 <_lv_style_set_color+0x66>
    return id_guess;
  4097f0:	4622      	mov	r2, r4
    if(id >= 0) {
  4097f2:	2a00      	cmp	r2, #0
  4097f4:	db23      	blt.n	40983e <_lv_style_set_color+0xee>
    prop_p[0] = style->map[idx];
  4097f6:	6803      	ldr	r3, [r0, #0]
  4097f8:	5c99      	ldrb	r1, [r3, r2]
  4097fa:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  4097fe:	4413      	add	r3, r2
  409800:	785b      	ldrb	r3, [r3, #1]
  409802:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409806:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40980a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40980e:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409810:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  409814:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409818:	d111      	bne.n	40983e <_lv_style_set_color+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
  40981a:	6803      	ldr	r3, [r0, #0]
  40981c:	3202      	adds	r2, #2
  40981e:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409820:	a901      	add	r1, sp, #4
  409822:	2302      	movs	r3, #2
  409824:	e007      	b.n	409836 <_lv_style_set_color+0xe6>
    if(style->map == NULL) return -1;
  409826:	f04f 32ff 	mov.w	r2, #4294967295
  40982a:	e7e2      	b.n	4097f2 <_lv_style_set_color+0xa2>
        *d8 = *s8;
  40982c:	f811 0b01 	ldrb.w	r0, [r1], #1
  409830:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409834:	3b01      	subs	r3, #1
    while(len) {
  409836:	2b00      	cmp	r3, #0
  409838:	d1f8      	bne.n	40982c <_lv_style_set_color+0xdc>
}
  40983a:	b005      	add	sp, #20
  40983c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40983e:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409840:	23ff      	movs	r3, #255	; 0xff
  409842:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409846:	4b21      	ldr	r3, [pc, #132]	; (4098cc <_lv_style_set_color+0x17c>)
  409848:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40984a:	4603      	mov	r3, r0
  40984c:	b908      	cbnz	r0, 409852 <_lv_style_set_color+0x102>
  40984e:	3302      	adds	r3, #2
  409850:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
  409852:	3304      	adds	r3, #4
  409854:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  409856:	4621      	mov	r1, r4
  409858:	6828      	ldr	r0, [r5, #0]
  40985a:	4b1d      	ldr	r3, [pc, #116]	; (4098d0 <_lv_style_set_color+0x180>)
  40985c:	4798      	blx	r3
  40985e:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409860:	4b1c      	ldr	r3, [pc, #112]	; (4098d4 <_lv_style_set_color+0x184>)
  409862:	4798      	blx	r3
  409864:	b148      	cbz	r0, 40987a <_lv_style_set_color+0x12a>
    if(style == NULL) return;
  409866:	2d00      	cmp	r5, #0
  409868:	d0e7      	beq.n	40983a <_lv_style_set_color+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40986a:	682b      	ldr	r3, [r5, #0]
  40986c:	1f20      	subs	r0, r4, #4
  40986e:	1fa2      	subs	r2, r4, #6
  409870:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  409872:	f10d 0106 	add.w	r1, sp, #6
  409876:	2202      	movs	r2, #2
  409878:	e00a      	b.n	409890 <_lv_style_set_color+0x140>
    LV_ASSERT_MEM(style->map);
  40987a:	682a      	ldr	r2, [r5, #0]
  40987c:	2300      	movs	r3, #0
  40987e:	4816      	ldr	r0, [pc, #88]	; (4098d8 <_lv_style_set_color+0x188>)
  409880:	4916      	ldr	r1, [pc, #88]	; (4098dc <_lv_style_set_color+0x18c>)
  409882:	4788      	blx	r1
  409884:	e7fe      	b.n	409884 <_lv_style_set_color+0x134>
        *d8 = *s8;
  409886:	f811 6b01 	ldrb.w	r6, [r1], #1
  40988a:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40988e:	3a01      	subs	r2, #1
    while(len) {
  409890:	2a00      	cmp	r2, #0
  409892:	d1f8      	bne.n	409886 <_lv_style_set_color+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
  409894:	682b      	ldr	r3, [r5, #0]
  409896:	3c02      	subs	r4, #2
  409898:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40989a:	a901      	add	r1, sp, #4
  40989c:	2202      	movs	r2, #2
  40989e:	e004      	b.n	4098aa <_lv_style_set_color+0x15a>
        *d8 = *s8;
  4098a0:	f811 0b01 	ldrb.w	r0, [r1], #1
  4098a4:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  4098a8:	3a01      	subs	r2, #1
    while(len) {
  4098aa:	2a00      	cmp	r2, #0
  4098ac:	d1f8      	bne.n	4098a0 <_lv_style_set_color+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  4098ae:	682b      	ldr	r3, [r5, #0]
  4098b0:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4098b2:	f10d 020e 	add.w	r2, sp, #14
  4098b6:	2302      	movs	r3, #2
  4098b8:	e004      	b.n	4098c4 <_lv_style_set_color+0x174>
        *d8 = *s8;
  4098ba:	f812 1b01 	ldrb.w	r1, [r2], #1
  4098be:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  4098c2:	3b01      	subs	r3, #1
    while(len) {
  4098c4:	2b00      	cmp	r3, #0
  4098c6:	d1f8      	bne.n	4098ba <_lv_style_set_color+0x16a>
  4098c8:	e7b7      	b.n	40983a <_lv_style_set_color+0xea>
  4098ca:	bf00      	nop
  4098cc:	00409411 	.word	0x00409411
  4098d0:	00415a9d 	.word	0x00415a9d
  4098d4:	00415065 	.word	0x00415065
  4098d8:	00421264 	.word	0x00421264
  4098dc:	00415071 	.word	0x00415071

004098e0 <_lv_style_set_opa>:
{
  4098e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4098e2:	b085      	sub	sp, #20
  4098e4:	f8ad 1006 	strh.w	r1, [sp, #6]
  4098e8:	f88d 2005 	strb.w	r2, [sp, #5]
    if(style->map == NULL) return -1;
  4098ec:	6803      	ldr	r3, [r0, #0]
  4098ee:	2b00      	cmp	r3, #0
  4098f0:	d064      	beq.n	4099bc <_lv_style_set_opa+0xdc>
    uint8_t id_to_find = prop & 0xFF;
  4098f2:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  4098f4:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  4098f6:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  4098f8:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  4098fc:	4627      	mov	r7, r4
  4098fe:	e023      	b.n	409948 <_lv_style_set_opa+0x68>
    prop_p[0] = style->map[idx];
  409900:	f8d0 e000 	ldr.w	lr, [r0]
  409904:	f81e c002 	ldrb.w	ip, [lr, r2]
  409908:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40990c:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409910:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409914:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409918:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40991c:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409920:	ea85 0c01 	eor.w	ip, r5, r1
  409924:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409928:	d02b      	beq.n	409982 <_lv_style_set_opa+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40992a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40992e:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409932:	ea31 0c0c 	bics.w	ip, r1, ip
  409936:	d115      	bne.n	409964 <_lv_style_set_opa+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409938:	42b9      	cmp	r1, r7
  40993a:	dd13      	ble.n	409964 <_lv_style_set_opa+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40993c:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409940:	b214      	sxth	r4, r2
  409942:	e00f      	b.n	409964 <_lv_style_set_opa+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409944:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409946:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409948:	6803      	ldr	r3, [r0, #0]
  40994a:	5c99      	ldrb	r1, [r3, r2]
  40994c:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409950:	1c51      	adds	r1, r2, #1
  409952:	5c5b      	ldrb	r3, [r3, r1]
  409954:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409958:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40995c:	2bff      	cmp	r3, #255	; 0xff
  40995e:	d00f      	beq.n	409980 <_lv_style_set_opa+0xa0>
        if(prop_id == id_to_find) {
  409960:	429e      	cmp	r6, r3
  409962:	d0cd      	beq.n	409900 <_lv_style_set_opa+0x20>
    prop_id &= 0xF;
  409964:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409968:	2b08      	cmp	r3, #8
  40996a:	d9eb      	bls.n	409944 <_lv_style_set_opa+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40996c:	2b0b      	cmp	r3, #11
  40996e:	d903      	bls.n	409978 <_lv_style_set_opa+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409970:	2b0d      	cmp	r3, #13
  409972:	d803      	bhi.n	40997c <_lv_style_set_opa+0x9c>
  409974:	2303      	movs	r3, #3
  409976:	e7e6      	b.n	409946 <_lv_style_set_opa+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409978:	2304      	movs	r3, #4
  40997a:	e7e4      	b.n	409946 <_lv_style_set_opa+0x66>
    else size += sizeof(const void *);
  40997c:	2306      	movs	r3, #6
  40997e:	e7e2      	b.n	409946 <_lv_style_set_opa+0x66>
    return id_guess;
  409980:	4622      	mov	r2, r4
    if(id >= 0) {
  409982:	2a00      	cmp	r2, #0
  409984:	db23      	blt.n	4099ce <_lv_style_set_opa+0xee>
    prop_p[0] = style->map[idx];
  409986:	6803      	ldr	r3, [r0, #0]
  409988:	5c99      	ldrb	r1, [r3, r2]
  40998a:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40998e:	4413      	add	r3, r2
  409990:	785b      	ldrb	r3, [r3, #1]
  409992:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409996:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40999a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40999e:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  4099a0:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  4099a4:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  4099a8:	d111      	bne.n	4099ce <_lv_style_set_opa+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
  4099aa:	6803      	ldr	r3, [r0, #0]
  4099ac:	3202      	adds	r2, #2
  4099ae:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4099b0:	f10d 0105 	add.w	r1, sp, #5
  4099b4:	2301      	movs	r3, #1
    while(len) {
  4099b6:	b923      	cbnz	r3, 4099c2 <_lv_style_set_opa+0xe2>
}
  4099b8:	b005      	add	sp, #20
  4099ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
  4099bc:	f04f 32ff 	mov.w	r2, #4294967295
  4099c0:	e7df      	b.n	409982 <_lv_style_set_opa+0xa2>
        *d8 = *s8;
  4099c2:	f811 0b01 	ldrb.w	r0, [r1], #1
  4099c6:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4099ca:	3b01      	subs	r3, #1
  4099cc:	e7f3      	b.n	4099b6 <_lv_style_set_opa+0xd6>
  4099ce:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  4099d0:	23ff      	movs	r3, #255	; 0xff
  4099d2:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  4099d6:	4b21      	ldr	r3, [pc, #132]	; (409a5c <_lv_style_set_opa+0x17c>)
  4099d8:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  4099da:	4603      	mov	r3, r0
  4099dc:	b908      	cbnz	r0, 4099e2 <_lv_style_set_opa+0x102>
  4099de:	3302      	adds	r3, #2
  4099e0:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
  4099e2:	3303      	adds	r3, #3
  4099e4:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  4099e6:	4621      	mov	r1, r4
  4099e8:	6828      	ldr	r0, [r5, #0]
  4099ea:	4b1d      	ldr	r3, [pc, #116]	; (409a60 <_lv_style_set_opa+0x180>)
  4099ec:	4798      	blx	r3
  4099ee:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  4099f0:	4b1c      	ldr	r3, [pc, #112]	; (409a64 <_lv_style_set_opa+0x184>)
  4099f2:	4798      	blx	r3
  4099f4:	b148      	cbz	r0, 409a0a <_lv_style_set_opa+0x12a>
    if(style == NULL) return;
  4099f6:	2d00      	cmp	r5, #0
  4099f8:	d0de      	beq.n	4099b8 <_lv_style_set_opa+0xd8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  4099fa:	682b      	ldr	r3, [r5, #0]
  4099fc:	1ee0      	subs	r0, r4, #3
  4099fe:	1f62      	subs	r2, r4, #5
  409a00:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  409a02:	f10d 0106 	add.w	r1, sp, #6
  409a06:	2202      	movs	r2, #2
  409a08:	e00a      	b.n	409a20 <_lv_style_set_opa+0x140>
    LV_ASSERT_MEM(style->map);
  409a0a:	682a      	ldr	r2, [r5, #0]
  409a0c:	2300      	movs	r3, #0
  409a0e:	4816      	ldr	r0, [pc, #88]	; (409a68 <_lv_style_set_opa+0x188>)
  409a10:	4916      	ldr	r1, [pc, #88]	; (409a6c <_lv_style_set_opa+0x18c>)
  409a12:	4788      	blx	r1
  409a14:	e7fe      	b.n	409a14 <_lv_style_set_opa+0x134>
        *d8 = *s8;
  409a16:	f811 6b01 	ldrb.w	r6, [r1], #1
  409a1a:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  409a1e:	3a01      	subs	r2, #1
    while(len) {
  409a20:	2a00      	cmp	r2, #0
  409a22:	d1f8      	bne.n	409a16 <_lv_style_set_opa+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
  409a24:	682b      	ldr	r3, [r5, #0]
  409a26:	3c02      	subs	r4, #2
  409a28:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  409a2a:	f10d 0105 	add.w	r1, sp, #5
  409a2e:	2201      	movs	r2, #1
    while(len) {
  409a30:	b92a      	cbnz	r2, 409a3e <_lv_style_set_opa+0x15e>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409a32:	682b      	ldr	r3, [r5, #0]
  409a34:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409a36:	f10d 020e 	add.w	r2, sp, #14
  409a3a:	2302      	movs	r3, #2
  409a3c:	e00a      	b.n	409a54 <_lv_style_set_opa+0x174>
        *d8 = *s8;
  409a3e:	f811 0b01 	ldrb.w	r0, [r1], #1
  409a42:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  409a46:	3a01      	subs	r2, #1
  409a48:	e7f2      	b.n	409a30 <_lv_style_set_opa+0x150>
        *d8 = *s8;
  409a4a:	f812 1b01 	ldrb.w	r1, [r2], #1
  409a4e:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  409a52:	3b01      	subs	r3, #1
    while(len) {
  409a54:	2b00      	cmp	r3, #0
  409a56:	d1f8      	bne.n	409a4a <_lv_style_set_opa+0x16a>
  409a58:	e7ae      	b.n	4099b8 <_lv_style_set_opa+0xd8>
  409a5a:	bf00      	nop
  409a5c:	00409411 	.word	0x00409411
  409a60:	00415a9d 	.word	0x00415a9d
  409a64:	00415065 	.word	0x00415065
  409a68:	00421264 	.word	0x00421264
  409a6c:	00415071 	.word	0x00415071

00409a70 <_lv_style_set_ptr>:
{
  409a70:	b5f0      	push	{r4, r5, r6, r7, lr}
  409a72:	b085      	sub	sp, #20
  409a74:	9200      	str	r2, [sp, #0]
  409a76:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  409a7a:	6803      	ldr	r3, [r0, #0]
  409a7c:	2b00      	cmp	r3, #0
  409a7e:	d061      	beq.n	409b44 <_lv_style_set_ptr+0xd4>
    uint8_t id_to_find = prop & 0xFF;
  409a80:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409a82:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409a84:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409a86:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  409a8a:	4627      	mov	r7, r4
  409a8c:	e023      	b.n	409ad6 <_lv_style_set_ptr+0x66>
    prop_p[0] = style->map[idx];
  409a8e:	f8d0 e000 	ldr.w	lr, [r0]
  409a92:	f81e c002 	ldrb.w	ip, [lr, r2]
  409a96:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409a9a:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409a9e:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409aa2:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409aa6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  409aaa:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409aae:	ea85 0c01 	eor.w	ip, r5, r1
  409ab2:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409ab6:	d02b      	beq.n	409b10 <_lv_style_set_ptr+0xa0>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409ab8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409abc:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409ac0:	ea31 0c0c 	bics.w	ip, r1, ip
  409ac4:	d115      	bne.n	409af2 <_lv_style_set_ptr+0x82>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409ac6:	42b9      	cmp	r1, r7
  409ac8:	dd13      	ble.n	409af2 <_lv_style_set_ptr+0x82>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409aca:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409ace:	b214      	sxth	r4, r2
  409ad0:	e00f      	b.n	409af2 <_lv_style_set_ptr+0x82>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409ad2:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409ad4:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409ad6:	6803      	ldr	r3, [r0, #0]
  409ad8:	5c99      	ldrb	r1, [r3, r2]
  409ada:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409ade:	1c51      	adds	r1, r2, #1
  409ae0:	5c5b      	ldrb	r3, [r3, r1]
  409ae2:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409ae6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409aea:	2bff      	cmp	r3, #255	; 0xff
  409aec:	d00f      	beq.n	409b0e <_lv_style_set_ptr+0x9e>
        if(prop_id == id_to_find) {
  409aee:	429e      	cmp	r6, r3
  409af0:	d0cd      	beq.n	409a8e <_lv_style_set_ptr+0x1e>
    prop_id &= 0xF;
  409af2:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409af6:	2b08      	cmp	r3, #8
  409af8:	d9eb      	bls.n	409ad2 <_lv_style_set_ptr+0x62>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409afa:	2b0b      	cmp	r3, #11
  409afc:	d903      	bls.n	409b06 <_lv_style_set_ptr+0x96>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409afe:	2b0d      	cmp	r3, #13
  409b00:	d803      	bhi.n	409b0a <_lv_style_set_ptr+0x9a>
  409b02:	2303      	movs	r3, #3
  409b04:	e7e6      	b.n	409ad4 <_lv_style_set_ptr+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409b06:	2304      	movs	r3, #4
  409b08:	e7e4      	b.n	409ad4 <_lv_style_set_ptr+0x64>
    else size += sizeof(const void *);
  409b0a:	2306      	movs	r3, #6
  409b0c:	e7e2      	b.n	409ad4 <_lv_style_set_ptr+0x64>
    return id_guess;
  409b0e:	4622      	mov	r2, r4
    if(id >= 0) {
  409b10:	2a00      	cmp	r2, #0
  409b12:	db23      	blt.n	409b5c <_lv_style_set_ptr+0xec>
    prop_p[0] = style->map[idx];
  409b14:	6803      	ldr	r3, [r0, #0]
  409b16:	5c99      	ldrb	r1, [r3, r2]
  409b18:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409b1c:	4413      	add	r3, r2
  409b1e:	785b      	ldrb	r3, [r3, #1]
  409b20:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409b24:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  409b28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  409b2c:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409b2e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  409b32:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409b36:	d111      	bne.n	409b5c <_lv_style_set_ptr+0xec>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
  409b38:	6803      	ldr	r3, [r0, #0]
  409b3a:	3202      	adds	r2, #2
  409b3c:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409b3e:	4669      	mov	r1, sp
  409b40:	2304      	movs	r3, #4
  409b42:	e007      	b.n	409b54 <_lv_style_set_ptr+0xe4>
    if(style->map == NULL) return -1;
  409b44:	f04f 32ff 	mov.w	r2, #4294967295
  409b48:	e7e2      	b.n	409b10 <_lv_style_set_ptr+0xa0>
        *d8 = *s8;
  409b4a:	f811 0b01 	ldrb.w	r0, [r1], #1
  409b4e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409b52:	3b01      	subs	r3, #1
    while(len) {
  409b54:	2b00      	cmp	r3, #0
  409b56:	d1f8      	bne.n	409b4a <_lv_style_set_ptr+0xda>
}
  409b58:	b005      	add	sp, #20
  409b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409b5c:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409b5e:	23ff      	movs	r3, #255	; 0xff
  409b60:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409b64:	4b21      	ldr	r3, [pc, #132]	; (409bec <_lv_style_set_ptr+0x17c>)
  409b66:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  409b68:	4603      	mov	r3, r0
  409b6a:	b908      	cbnz	r0, 409b70 <_lv_style_set_ptr+0x100>
  409b6c:	3302      	adds	r3, #2
  409b6e:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(const void *);
  409b70:	3306      	adds	r3, #6
  409b72:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  409b74:	4621      	mov	r1, r4
  409b76:	6828      	ldr	r0, [r5, #0]
  409b78:	4b1d      	ldr	r3, [pc, #116]	; (409bf0 <_lv_style_set_ptr+0x180>)
  409b7a:	4798      	blx	r3
  409b7c:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409b7e:	4b1d      	ldr	r3, [pc, #116]	; (409bf4 <_lv_style_set_ptr+0x184>)
  409b80:	4798      	blx	r3
  409b82:	b150      	cbz	r0, 409b9a <_lv_style_set_ptr+0x12a>
    if(style == NULL) return;
  409b84:	2d00      	cmp	r5, #0
  409b86:	d0e7      	beq.n	409b58 <_lv_style_set_ptr+0xe8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  409b88:	682b      	ldr	r3, [r5, #0]
  409b8a:	1fa0      	subs	r0, r4, #6
  409b8c:	f1a4 0208 	sub.w	r2, r4, #8
  409b90:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  409b92:	f10d 0106 	add.w	r1, sp, #6
  409b96:	2202      	movs	r2, #2
  409b98:	e00a      	b.n	409bb0 <_lv_style_set_ptr+0x140>
    LV_ASSERT_MEM(style->map);
  409b9a:	682a      	ldr	r2, [r5, #0]
  409b9c:	2300      	movs	r3, #0
  409b9e:	4816      	ldr	r0, [pc, #88]	; (409bf8 <_lv_style_set_ptr+0x188>)
  409ba0:	4916      	ldr	r1, [pc, #88]	; (409bfc <_lv_style_set_ptr+0x18c>)
  409ba2:	4788      	blx	r1
  409ba4:	e7fe      	b.n	409ba4 <_lv_style_set_ptr+0x134>
        *d8 = *s8;
  409ba6:	f811 6b01 	ldrb.w	r6, [r1], #1
  409baa:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  409bae:	3a01      	subs	r2, #1
    while(len) {
  409bb0:	2a00      	cmp	r2, #0
  409bb2:	d1f8      	bne.n	409ba6 <_lv_style_set_ptr+0x136>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
  409bb4:	682b      	ldr	r3, [r5, #0]
  409bb6:	3c02      	subs	r4, #2
  409bb8:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  409bba:	4669      	mov	r1, sp
  409bbc:	2204      	movs	r2, #4
  409bbe:	e004      	b.n	409bca <_lv_style_set_ptr+0x15a>
        *d8 = *s8;
  409bc0:	f811 0b01 	ldrb.w	r0, [r1], #1
  409bc4:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  409bc8:	3a01      	subs	r2, #1
    while(len) {
  409bca:	2a00      	cmp	r2, #0
  409bcc:	d1f8      	bne.n	409bc0 <_lv_style_set_ptr+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409bce:	682b      	ldr	r3, [r5, #0]
  409bd0:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409bd2:	f10d 020e 	add.w	r2, sp, #14
  409bd6:	2302      	movs	r3, #2
  409bd8:	e004      	b.n	409be4 <_lv_style_set_ptr+0x174>
        *d8 = *s8;
  409bda:	f812 1b01 	ldrb.w	r1, [r2], #1
  409bde:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  409be2:	3b01      	subs	r3, #1
    while(len) {
  409be4:	2b00      	cmp	r3, #0
  409be6:	d1f8      	bne.n	409bda <_lv_style_set_ptr+0x16a>
  409be8:	e7b6      	b.n	409b58 <_lv_style_set_ptr+0xe8>
  409bea:	bf00      	nop
  409bec:	00409411 	.word	0x00409411
  409bf0:	00415a9d 	.word	0x00415a9d
  409bf4:	00415065 	.word	0x00415065
  409bf8:	00421264 	.word	0x00421264
  409bfc:	00415071 	.word	0x00415071

00409c00 <_lv_style_get_int>:
    if(style == NULL) return -1;
  409c00:	2800      	cmp	r0, #0
  409c02:	d077      	beq.n	409cf4 <_lv_style_get_int+0xf4>
{
  409c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409c08:	b082      	sub	sp, #8
  409c0a:	4692      	mov	sl, r2
  409c0c:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  409c0e:	6803      	ldr	r3, [r0, #0]
  409c10:	2b00      	cmp	r3, #0
  409c12:	d072      	beq.n	409cfa <_lv_style_get_int+0xfa>
    if(style->map == NULL) return -1;
  409c14:	2b00      	cmp	r3, #0
  409c16:	d051      	beq.n	409cbc <_lv_style_get_int+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  409c18:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409c1a:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  409c1c:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  409c1e:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  409c22:	46f4      	mov	ip, lr
  409c24:	e02e      	b.n	409c84 <_lv_style_get_int+0x84>
    prop_p[0] = style->map[idx];
  409c26:	682a      	ldr	r2, [r5, #0]
  409c28:	f812 9000 	ldrb.w	r9, [r2, r0]
  409c2c:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409c30:	5d14      	ldrb	r4, [r2, r4]
  409c32:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  409c36:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409c3a:	ea4f 2818 	mov.w	r8, r8, lsr #8
  409c3e:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409c42:	ea87 0904 	eor.w	r9, r7, r4
  409c46:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  409c4a:	d00d      	beq.n	409c68 <_lv_style_get_int+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409c4c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  409c50:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  409c54:	ea34 0209 	bics.w	r2, r4, r9
  409c58:	d122      	bne.n	409ca0 <_lv_style_get_int+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409c5a:	4564      	cmp	r4, ip
  409c5c:	dd20      	ble.n	409ca0 <_lv_style_get_int+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409c5e:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  409c62:	fa0f fe80 	sxth.w	lr, r0
  409c66:	e01b      	b.n	409ca0 <_lv_style_get_int+0xa0>
                return i;
  409c68:	4686      	mov	lr, r0
    if(id < 0) {
  409c6a:	f1be 0f00 	cmp.w	lr, #0
  409c6e:	db47      	blt.n	409d00 <_lv_style_get_int+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
  409c70:	682b      	ldr	r3, [r5, #0]
  409c72:	4674      	mov	r4, lr
  409c74:	f10e 0e02 	add.w	lr, lr, #2
  409c78:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  409c7a:	4652      	mov	r2, sl
  409c7c:	2302      	movs	r3, #2
  409c7e:	e025      	b.n	409ccc <_lv_style_get_int+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409c80:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409c82:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  409c84:	682b      	ldr	r3, [r5, #0]
  409c86:	5c1c      	ldrb	r4, [r3, r0]
  409c88:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409c8c:	1c44      	adds	r4, r0, #1
  409c8e:	5d1b      	ldrb	r3, [r3, r4]
  409c90:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409c94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409c98:	2bff      	cmp	r3, #255	; 0xff
  409c9a:	d0e6      	beq.n	409c6a <_lv_style_get_int+0x6a>
        if(prop_id == id_to_find) {
  409c9c:	429e      	cmp	r6, r3
  409c9e:	d0c2      	beq.n	409c26 <_lv_style_get_int+0x26>
    prop_id &= 0xF;
  409ca0:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409ca4:	2b08      	cmp	r3, #8
  409ca6:	d9eb      	bls.n	409c80 <_lv_style_get_int+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409ca8:	2b0b      	cmp	r3, #11
  409caa:	d903      	bls.n	409cb4 <_lv_style_get_int+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409cac:	2b0d      	cmp	r3, #13
  409cae:	d803      	bhi.n	409cb8 <_lv_style_get_int+0xb8>
  409cb0:	2303      	movs	r3, #3
  409cb2:	e7e6      	b.n	409c82 <_lv_style_get_int+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409cb4:	2304      	movs	r3, #4
  409cb6:	e7e4      	b.n	409c82 <_lv_style_get_int+0x82>
    else size += sizeof(const void *);
  409cb8:	2306      	movs	r3, #6
  409cba:	e7e2      	b.n	409c82 <_lv_style_get_int+0x82>
    if(style->map == NULL) return -1;
  409cbc:	f04f 3eff 	mov.w	lr, #4294967295
  409cc0:	e7d3      	b.n	409c6a <_lv_style_get_int+0x6a>
        *d8 = *s8;
  409cc2:	f81e 0b01 	ldrb.w	r0, [lr], #1
  409cc6:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409cca:	3b01      	subs	r3, #1
    while(len) {
  409ccc:	2b00      	cmp	r3, #0
  409cce:	d1f8      	bne.n	409cc2 <_lv_style_get_int+0xc2>
    prop_p[0] = style->map[idx];
  409cd0:	682b      	ldr	r3, [r5, #0]
  409cd2:	5d1a      	ldrb	r2, [r3, r4]
  409cd4:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409cd8:	4423      	add	r3, r4
  409cda:	785b      	ldrb	r3, [r3, #1]
  409cdc:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  409ce0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  409ce4:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  409ce6:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  409cea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  409cee:	b002      	add	sp, #8
  409cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  409cf4:	f04f 30ff 	mov.w	r0, #4294967295
  409cf8:	4770      	bx	lr
    if(style->map == NULL) return -1;
  409cfa:	f04f 30ff 	mov.w	r0, #4294967295
  409cfe:	e7f6      	b.n	409cee <_lv_style_get_int+0xee>
        return -1;
  409d00:	f04f 30ff 	mov.w	r0, #4294967295
  409d04:	e7f3      	b.n	409cee <_lv_style_get_int+0xee>

00409d06 <_lv_style_get_opa>:
    if(style == NULL) return -1;
  409d06:	2800      	cmp	r0, #0
  409d08:	d076      	beq.n	409df8 <_lv_style_get_opa+0xf2>
{
  409d0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409d0e:	b082      	sub	sp, #8
  409d10:	4692      	mov	sl, r2
  409d12:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  409d14:	6803      	ldr	r3, [r0, #0]
  409d16:	2b00      	cmp	r3, #0
  409d18:	d071      	beq.n	409dfe <_lv_style_get_opa+0xf8>
    if(style->map == NULL) return -1;
  409d1a:	2b00      	cmp	r3, #0
  409d1c:	d063      	beq.n	409de6 <_lv_style_get_opa+0xe0>
    uint8_t id_to_find = prop & 0xFF;
  409d1e:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409d20:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  409d22:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  409d24:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  409d28:	46f4      	mov	ip, lr
  409d2a:	e040      	b.n	409dae <_lv_style_get_opa+0xa8>
    prop_p[0] = style->map[idx];
  409d2c:	682a      	ldr	r2, [r5, #0]
  409d2e:	f812 9000 	ldrb.w	r9, [r2, r0]
  409d32:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409d36:	5d14      	ldrb	r4, [r2, r4]
  409d38:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  409d3c:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409d40:	ea4f 2818 	mov.w	r8, r8, lsr #8
  409d44:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409d48:	ea87 0904 	eor.w	r9, r7, r4
  409d4c:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  409d50:	d00d      	beq.n	409d6e <_lv_style_get_opa+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409d52:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  409d56:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  409d5a:	ea34 0209 	bics.w	r2, r4, r9
  409d5e:	d134      	bne.n	409dca <_lv_style_get_opa+0xc4>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409d60:	4564      	cmp	r4, ip
  409d62:	dd32      	ble.n	409dca <_lv_style_get_opa+0xc4>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409d64:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  409d68:	fa0f fe80 	sxth.w	lr, r0
  409d6c:	e02d      	b.n	409dca <_lv_style_get_opa+0xc4>
                return i;
  409d6e:	4686      	mov	lr, r0
    if(id < 0) {
  409d70:	f1be 0f00 	cmp.w	lr, #0
  409d74:	db46      	blt.n	409e04 <_lv_style_get_opa+0xfe>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
  409d76:	6828      	ldr	r0, [r5, #0]
  409d78:	4674      	mov	r4, lr
  409d7a:	f10e 0e02 	add.w	lr, lr, #2
  409d7e:	4486      	add	lr, r0
    uint8_t * d8 = (uint8_t *)dst;
  409d80:	4652      	mov	r2, sl
  409d82:	2301      	movs	r3, #1
    while(len) {
  409d84:	bb93      	cbnz	r3, 409dec <_lv_style_get_opa+0xe6>
    prop_p[0] = style->map[idx];
  409d86:	682b      	ldr	r3, [r5, #0]
  409d88:	5d1a      	ldrb	r2, [r3, r4]
  409d8a:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409d8e:	4423      	add	r3, r4
  409d90:	785b      	ldrb	r3, [r3, #1]
  409d92:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  409d96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  409d9a:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  409d9c:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  409da0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  409da4:	b002      	add	sp, #8
  409da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409daa:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409dac:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  409dae:	682b      	ldr	r3, [r5, #0]
  409db0:	5c1c      	ldrb	r4, [r3, r0]
  409db2:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409db6:	1c44      	adds	r4, r0, #1
  409db8:	5d1b      	ldrb	r3, [r3, r4]
  409dba:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409dbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409dc2:	2bff      	cmp	r3, #255	; 0xff
  409dc4:	d0d4      	beq.n	409d70 <_lv_style_get_opa+0x6a>
        if(prop_id == id_to_find) {
  409dc6:	429e      	cmp	r6, r3
  409dc8:	d0b0      	beq.n	409d2c <_lv_style_get_opa+0x26>
    prop_id &= 0xF;
  409dca:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409dce:	2b08      	cmp	r3, #8
  409dd0:	d9eb      	bls.n	409daa <_lv_style_get_opa+0xa4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409dd2:	2b0b      	cmp	r3, #11
  409dd4:	d903      	bls.n	409dde <_lv_style_get_opa+0xd8>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409dd6:	2b0d      	cmp	r3, #13
  409dd8:	d803      	bhi.n	409de2 <_lv_style_get_opa+0xdc>
  409dda:	2303      	movs	r3, #3
  409ddc:	e7e6      	b.n	409dac <_lv_style_get_opa+0xa6>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409dde:	2304      	movs	r3, #4
  409de0:	e7e4      	b.n	409dac <_lv_style_get_opa+0xa6>
    else size += sizeof(const void *);
  409de2:	2306      	movs	r3, #6
  409de4:	e7e2      	b.n	409dac <_lv_style_get_opa+0xa6>
    if(style->map == NULL) return -1;
  409de6:	f04f 3eff 	mov.w	lr, #4294967295
  409dea:	e7c1      	b.n	409d70 <_lv_style_get_opa+0x6a>
        *d8 = *s8;
  409dec:	f81e 0b01 	ldrb.w	r0, [lr], #1
  409df0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409df4:	3b01      	subs	r3, #1
  409df6:	e7c5      	b.n	409d84 <_lv_style_get_opa+0x7e>
    if(style == NULL) return -1;
  409df8:	f04f 30ff 	mov.w	r0, #4294967295
  409dfc:	4770      	bx	lr
    if(style->map == NULL) return -1;
  409dfe:	f04f 30ff 	mov.w	r0, #4294967295
  409e02:	e7cf      	b.n	409da4 <_lv_style_get_opa+0x9e>
        return -1;
  409e04:	f04f 30ff 	mov.w	r0, #4294967295
  409e08:	e7cc      	b.n	409da4 <_lv_style_get_opa+0x9e>

00409e0a <_lv_style_get_color>:
    if(style == NULL) return -1;
  409e0a:	2800      	cmp	r0, #0
  409e0c:	d077      	beq.n	409efe <_lv_style_get_color+0xf4>
{
  409e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409e12:	b082      	sub	sp, #8
  409e14:	4692      	mov	sl, r2
  409e16:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  409e18:	6803      	ldr	r3, [r0, #0]
  409e1a:	2b00      	cmp	r3, #0
  409e1c:	d072      	beq.n	409f04 <_lv_style_get_color+0xfa>
    if(style->map == NULL) return -1;
  409e1e:	2b00      	cmp	r3, #0
  409e20:	d051      	beq.n	409ec6 <_lv_style_get_color+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  409e22:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409e24:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  409e26:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  409e28:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  409e2c:	46f4      	mov	ip, lr
  409e2e:	e02e      	b.n	409e8e <_lv_style_get_color+0x84>
    prop_p[0] = style->map[idx];
  409e30:	682a      	ldr	r2, [r5, #0]
  409e32:	f812 9000 	ldrb.w	r9, [r2, r0]
  409e36:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409e3a:	5d14      	ldrb	r4, [r2, r4]
  409e3c:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  409e40:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409e44:	ea4f 2818 	mov.w	r8, r8, lsr #8
  409e48:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409e4c:	ea87 0904 	eor.w	r9, r7, r4
  409e50:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  409e54:	d00d      	beq.n	409e72 <_lv_style_get_color+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409e56:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  409e5a:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  409e5e:	ea34 0209 	bics.w	r2, r4, r9
  409e62:	d122      	bne.n	409eaa <_lv_style_get_color+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409e64:	4564      	cmp	r4, ip
  409e66:	dd20      	ble.n	409eaa <_lv_style_get_color+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409e68:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  409e6c:	fa0f fe80 	sxth.w	lr, r0
  409e70:	e01b      	b.n	409eaa <_lv_style_get_color+0xa0>
                return i;
  409e72:	4686      	mov	lr, r0
    if(id < 0) {
  409e74:	f1be 0f00 	cmp.w	lr, #0
  409e78:	db47      	blt.n	409f0a <_lv_style_get_color+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
  409e7a:	682b      	ldr	r3, [r5, #0]
  409e7c:	4674      	mov	r4, lr
  409e7e:	f10e 0e02 	add.w	lr, lr, #2
  409e82:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  409e84:	4652      	mov	r2, sl
  409e86:	2302      	movs	r3, #2
  409e88:	e025      	b.n	409ed6 <_lv_style_get_color+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409e8a:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409e8c:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  409e8e:	682b      	ldr	r3, [r5, #0]
  409e90:	5c1c      	ldrb	r4, [r3, r0]
  409e92:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409e96:	1c44      	adds	r4, r0, #1
  409e98:	5d1b      	ldrb	r3, [r3, r4]
  409e9a:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409e9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409ea2:	2bff      	cmp	r3, #255	; 0xff
  409ea4:	d0e6      	beq.n	409e74 <_lv_style_get_color+0x6a>
        if(prop_id == id_to_find) {
  409ea6:	429e      	cmp	r6, r3
  409ea8:	d0c2      	beq.n	409e30 <_lv_style_get_color+0x26>
    prop_id &= 0xF;
  409eaa:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409eae:	2b08      	cmp	r3, #8
  409eb0:	d9eb      	bls.n	409e8a <_lv_style_get_color+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409eb2:	2b0b      	cmp	r3, #11
  409eb4:	d903      	bls.n	409ebe <_lv_style_get_color+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409eb6:	2b0d      	cmp	r3, #13
  409eb8:	d803      	bhi.n	409ec2 <_lv_style_get_color+0xb8>
  409eba:	2303      	movs	r3, #3
  409ebc:	e7e6      	b.n	409e8c <_lv_style_get_color+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409ebe:	2304      	movs	r3, #4
  409ec0:	e7e4      	b.n	409e8c <_lv_style_get_color+0x82>
    else size += sizeof(const void *);
  409ec2:	2306      	movs	r3, #6
  409ec4:	e7e2      	b.n	409e8c <_lv_style_get_color+0x82>
    if(style->map == NULL) return -1;
  409ec6:	f04f 3eff 	mov.w	lr, #4294967295
  409eca:	e7d3      	b.n	409e74 <_lv_style_get_color+0x6a>
        *d8 = *s8;
  409ecc:	f81e 0b01 	ldrb.w	r0, [lr], #1
  409ed0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409ed4:	3b01      	subs	r3, #1
    while(len) {
  409ed6:	2b00      	cmp	r3, #0
  409ed8:	d1f8      	bne.n	409ecc <_lv_style_get_color+0xc2>
    prop_p[0] = style->map[idx];
  409eda:	682b      	ldr	r3, [r5, #0]
  409edc:	5d1a      	ldrb	r2, [r3, r4]
  409ede:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409ee2:	4423      	add	r3, r4
  409ee4:	785b      	ldrb	r3, [r3, #1]
  409ee6:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  409eea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  409eee:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  409ef0:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  409ef4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  409ef8:	b002      	add	sp, #8
  409efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  409efe:	f04f 30ff 	mov.w	r0, #4294967295
  409f02:	4770      	bx	lr
    if(style->map == NULL) return -1;
  409f04:	f04f 30ff 	mov.w	r0, #4294967295
  409f08:	e7f6      	b.n	409ef8 <_lv_style_get_color+0xee>
        return -1;
  409f0a:	f04f 30ff 	mov.w	r0, #4294967295
  409f0e:	e7f3      	b.n	409ef8 <_lv_style_get_color+0xee>

00409f10 <_lv_style_get_ptr>:
    if(style == NULL) return -1;
  409f10:	2800      	cmp	r0, #0
  409f12:	d077      	beq.n	40a004 <_lv_style_get_ptr+0xf4>
{
  409f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409f18:	b082      	sub	sp, #8
  409f1a:	4692      	mov	sl, r2
  409f1c:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  409f1e:	6803      	ldr	r3, [r0, #0]
  409f20:	2b00      	cmp	r3, #0
  409f22:	d072      	beq.n	40a00a <_lv_style_get_ptr+0xfa>
    if(style->map == NULL) return -1;
  409f24:	2b00      	cmp	r3, #0
  409f26:	d051      	beq.n	409fcc <_lv_style_get_ptr+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  409f28:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409f2a:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  409f2c:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  409f2e:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  409f32:	46f4      	mov	ip, lr
  409f34:	e02e      	b.n	409f94 <_lv_style_get_ptr+0x84>
    prop_p[0] = style->map[idx];
  409f36:	682a      	ldr	r2, [r5, #0]
  409f38:	f812 9000 	ldrb.w	r9, [r2, r0]
  409f3c:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409f40:	5d14      	ldrb	r4, [r2, r4]
  409f42:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  409f46:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409f4a:	ea4f 2818 	mov.w	r8, r8, lsr #8
  409f4e:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409f52:	ea87 0904 	eor.w	r9, r7, r4
  409f56:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  409f5a:	d00d      	beq.n	409f78 <_lv_style_get_ptr+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409f5c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  409f60:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  409f64:	ea34 0209 	bics.w	r2, r4, r9
  409f68:	d122      	bne.n	409fb0 <_lv_style_get_ptr+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409f6a:	4564      	cmp	r4, ip
  409f6c:	dd20      	ble.n	409fb0 <_lv_style_get_ptr+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409f6e:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  409f72:	fa0f fe80 	sxth.w	lr, r0
  409f76:	e01b      	b.n	409fb0 <_lv_style_get_ptr+0xa0>
                return i;
  409f78:	4686      	mov	lr, r0
    if(id < 0) {
  409f7a:	f1be 0f00 	cmp.w	lr, #0
  409f7e:	db47      	blt.n	40a010 <_lv_style_get_ptr+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
  409f80:	682b      	ldr	r3, [r5, #0]
  409f82:	4676      	mov	r6, lr
  409f84:	f10e 0002 	add.w	r0, lr, #2
  409f88:	4418      	add	r0, r3
    uint8_t * d8 = (uint8_t *)dst;
  409f8a:	4652      	mov	r2, sl
  409f8c:	2304      	movs	r3, #4
  409f8e:	e025      	b.n	409fdc <_lv_style_get_ptr+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409f90:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409f92:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  409f94:	682b      	ldr	r3, [r5, #0]
  409f96:	5c1c      	ldrb	r4, [r3, r0]
  409f98:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409f9c:	1c44      	adds	r4, r0, #1
  409f9e:	5d1b      	ldrb	r3, [r3, r4]
  409fa0:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409fa4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409fa8:	2bff      	cmp	r3, #255	; 0xff
  409faa:	d0e6      	beq.n	409f7a <_lv_style_get_ptr+0x6a>
        if(prop_id == id_to_find) {
  409fac:	429e      	cmp	r6, r3
  409fae:	d0c2      	beq.n	409f36 <_lv_style_get_ptr+0x26>
    prop_id &= 0xF;
  409fb0:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409fb4:	2b08      	cmp	r3, #8
  409fb6:	d9eb      	bls.n	409f90 <_lv_style_get_ptr+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409fb8:	2b0b      	cmp	r3, #11
  409fba:	d903      	bls.n	409fc4 <_lv_style_get_ptr+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409fbc:	2b0d      	cmp	r3, #13
  409fbe:	d803      	bhi.n	409fc8 <_lv_style_get_ptr+0xb8>
  409fc0:	2303      	movs	r3, #3
  409fc2:	e7e6      	b.n	409f92 <_lv_style_get_ptr+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409fc4:	2304      	movs	r3, #4
  409fc6:	e7e4      	b.n	409f92 <_lv_style_get_ptr+0x82>
    else size += sizeof(const void *);
  409fc8:	2306      	movs	r3, #6
  409fca:	e7e2      	b.n	409f92 <_lv_style_get_ptr+0x82>
    if(style->map == NULL) return -1;
  409fcc:	f04f 3eff 	mov.w	lr, #4294967295
  409fd0:	e7d3      	b.n	409f7a <_lv_style_get_ptr+0x6a>
        *d8 = *s8;
  409fd2:	f810 4b01 	ldrb.w	r4, [r0], #1
  409fd6:	f802 4b01 	strb.w	r4, [r2], #1
        len--;
  409fda:	3b01      	subs	r3, #1
    while(len) {
  409fdc:	2b00      	cmp	r3, #0
  409fde:	d1f8      	bne.n	409fd2 <_lv_style_get_ptr+0xc2>
    prop_p[0] = style->map[idx];
  409fe0:	682b      	ldr	r3, [r5, #0]
  409fe2:	5d9a      	ldrb	r2, [r3, r6]
  409fe4:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409fe8:	4433      	add	r3, r6
  409fea:	785b      	ldrb	r3, [r3, #1]
  409fec:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  409ff0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  409ff4:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  409ff6:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  409ffa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  409ffe:	b002      	add	sp, #8
  40a000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a004:	f04f 30ff 	mov.w	r0, #4294967295
  40a008:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a00a:	f04f 30ff 	mov.w	r0, #4294967295
  40a00e:	e7f6      	b.n	409ffe <_lv_style_get_ptr+0xee>
        return -1;
  40a010:	f04f 30ff 	mov.w	r0, #4294967295
  40a014:	e7f3      	b.n	409ffe <_lv_style_get_ptr+0xee>

0040a016 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
  40a016:	7903      	ldrb	r3, [r0, #4]
  40a018:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a01c:	d008      	beq.n	40a030 <lv_style_list_get_local_style+0x1a>
    if(list->has_trans) return list->style_list[1];
  40a01e:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a022:	d102      	bne.n	40a02a <lv_style_list_get_local_style+0x14>
    else return list->style_list[0];
  40a024:	6803      	ldr	r3, [r0, #0]
  40a026:	6818      	ldr	r0, [r3, #0]
  40a028:	4770      	bx	lr
    if(list->has_trans) return list->style_list[1];
  40a02a:	6803      	ldr	r3, [r0, #0]
  40a02c:	6858      	ldr	r0, [r3, #4]
  40a02e:	4770      	bx	lr
    if(!list->has_local) return NULL;
  40a030:	2000      	movs	r0, #0
}
  40a032:	4770      	bx	lr

0040a034 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
  40a034:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40a038:	2b00      	cmp	r3, #0
  40a03a:	da02      	bge.n	40a042 <_lv_style_list_get_transition_style+0xe>
    return list->style_list[0];
  40a03c:	6803      	ldr	r3, [r0, #0]
  40a03e:	6818      	ldr	r0, [r3, #0]
  40a040:	4770      	bx	lr
    if(!list->has_trans) return NULL;
  40a042:	2000      	movs	r0, #0
}
  40a044:	4770      	bx	lr
	...

0040a048 <_lv_style_list_reset>:
    if(list == NULL) return;
  40a048:	2800      	cmp	r0, #0
  40a04a:	d032      	beq.n	40a0b2 <_lv_style_list_reset+0x6a>
{
  40a04c:	b538      	push	{r3, r4, r5, lr}
  40a04e:	4604      	mov	r4, r0
    if(list->has_local) {
  40a050:	7903      	ldrb	r3, [r0, #4]
  40a052:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a056:	d008      	beq.n	40a06a <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
  40a058:	4b16      	ldr	r3, [pc, #88]	; (40a0b4 <_lv_style_list_reset+0x6c>)
  40a05a:	4798      	blx	r3
        if(local) {
  40a05c:	4605      	mov	r5, r0
  40a05e:	b120      	cbz	r0, 40a06a <_lv_style_list_reset+0x22>
            lv_style_reset(local);
  40a060:	4b15      	ldr	r3, [pc, #84]	; (40a0b8 <_lv_style_list_reset+0x70>)
  40a062:	4798      	blx	r3
            lv_mem_free(local);
  40a064:	4628      	mov	r0, r5
  40a066:	4b15      	ldr	r3, [pc, #84]	; (40a0bc <_lv_style_list_reset+0x74>)
  40a068:	4798      	blx	r3
    if(list->has_trans) {
  40a06a:	f994 3004 	ldrsb.w	r3, [r4, #4]
  40a06e:	2b00      	cmp	r3, #0
  40a070:	db13      	blt.n	40a09a <_lv_style_list_reset+0x52>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
  40a072:	7923      	ldrb	r3, [r4, #4]
  40a074:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40a078:	d002      	beq.n	40a080 <_lv_style_list_reset+0x38>
  40a07a:	6820      	ldr	r0, [r4, #0]
  40a07c:	4b0f      	ldr	r3, [pc, #60]	; (40a0bc <_lv_style_list_reset+0x74>)
  40a07e:	4798      	blx	r3
    list->style_list = NULL;
  40a080:	2200      	movs	r2, #0
  40a082:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
  40a084:	7923      	ldrb	r3, [r4, #4]
    list->has_trans = 0;
  40a086:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40a08a:	f362 13c7 	bfi	r3, r2, #7, #1
  40a08e:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
  40a090:	7963      	ldrb	r3, [r4, #5]
  40a092:	f362 0300 	bfi	r3, r2, #0, #1
  40a096:	7163      	strb	r3, [r4, #5]
  40a098:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
  40a09a:	4620      	mov	r0, r4
  40a09c:	4b08      	ldr	r3, [pc, #32]	; (40a0c0 <_lv_style_list_reset+0x78>)
  40a09e:	4798      	blx	r3
        if(trans) {
  40a0a0:	4605      	mov	r5, r0
  40a0a2:	2800      	cmp	r0, #0
  40a0a4:	d0e5      	beq.n	40a072 <_lv_style_list_reset+0x2a>
            lv_style_reset(trans);
  40a0a6:	4b04      	ldr	r3, [pc, #16]	; (40a0b8 <_lv_style_list_reset+0x70>)
  40a0a8:	4798      	blx	r3
            lv_mem_free(trans);
  40a0aa:	4628      	mov	r0, r5
  40a0ac:	4b03      	ldr	r3, [pc, #12]	; (40a0bc <_lv_style_list_reset+0x74>)
  40a0ae:	4798      	blx	r3
  40a0b0:	e7df      	b.n	40a072 <_lv_style_list_reset+0x2a>
  40a0b2:	4770      	bx	lr
  40a0b4:	0040a017 	.word	0x0040a017
  40a0b8:	004093fd 	.word	0x004093fd
  40a0bc:	00415831 	.word	0x00415831
  40a0c0:	0040a035 	.word	0x0040a035

0040a0c4 <lv_style_list_copy>:
{
  40a0c4:	b570      	push	{r4, r5, r6, lr}
  40a0c6:	4605      	mov	r5, r0
  40a0c8:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
  40a0ca:	4b3d      	ldr	r3, [pc, #244]	; (40a1c0 <lv_style_list_copy+0xfc>)
  40a0cc:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
  40a0ce:	6823      	ldr	r3, [r4, #0]
  40a0d0:	2b00      	cmp	r3, #0
  40a0d2:	d059      	beq.n	40a188 <lv_style_list_copy+0xc4>
    if(list_src->has_local == 0) {
  40a0d4:	7923      	ldrb	r3, [r4, #4]
  40a0d6:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a0da:	d12f      	bne.n	40a13c <lv_style_list_copy+0x78>
        if(list_src->has_trans) {
  40a0dc:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a0e0:	d113      	bne.n	40a10a <lv_style_list_copy+0x46>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
  40a0e2:	7920      	ldrb	r0, [r4, #4]
  40a0e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a0e8:	0080      	lsls	r0, r0, #2
  40a0ea:	4b36      	ldr	r3, [pc, #216]	; (40a1c4 <lv_style_list_copy+0x100>)
  40a0ec:	4798      	blx	r3
  40a0ee:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
  40a0f0:	7922      	ldrb	r2, [r4, #4]
  40a0f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a0f6:	0092      	lsls	r2, r2, #2
  40a0f8:	6821      	ldr	r1, [r4, #0]
  40a0fa:	4b33      	ldr	r3, [pc, #204]	; (40a1c8 <lv_style_list_copy+0x104>)
  40a0fc:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
  40a0fe:	7922      	ldrb	r2, [r4, #4]
  40a100:	792b      	ldrb	r3, [r5, #4]
  40a102:	f362 0305 	bfi	r3, r2, #0, #6
  40a106:	712b      	strb	r3, [r5, #4]
  40a108:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a10a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  40a10e:	3801      	subs	r0, #1
  40a110:	0080      	lsls	r0, r0, #2
  40a112:	4b2c      	ldr	r3, [pc, #176]	; (40a1c4 <lv_style_list_copy+0x100>)
  40a114:	4798      	blx	r3
  40a116:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a118:	6821      	ldr	r1, [r4, #0]
  40a11a:	7922      	ldrb	r2, [r4, #4]
  40a11c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a120:	3a01      	subs	r2, #1
  40a122:	0092      	lsls	r2, r2, #2
  40a124:	3104      	adds	r1, #4
  40a126:	4b28      	ldr	r3, [pc, #160]	; (40a1c8 <lv_style_list_copy+0x104>)
  40a128:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40a12a:	7923      	ldrb	r3, [r4, #4]
  40a12c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a130:	3b01      	subs	r3, #1
  40a132:	792a      	ldrb	r2, [r5, #4]
  40a134:	f363 0205 	bfi	r2, r3, #0, #6
  40a138:	712a      	strb	r2, [r5, #4]
  40a13a:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
  40a13c:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a140:	d123      	bne.n	40a18a <lv_style_list_copy+0xc6>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a142:	7920      	ldrb	r0, [r4, #4]
  40a144:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a148:	3801      	subs	r0, #1
  40a14a:	0080      	lsls	r0, r0, #2
  40a14c:	4b1d      	ldr	r3, [pc, #116]	; (40a1c4 <lv_style_list_copy+0x100>)
  40a14e:	4798      	blx	r3
  40a150:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a152:	6821      	ldr	r1, [r4, #0]
  40a154:	7922      	ldrb	r2, [r4, #4]
  40a156:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a15a:	3a01      	subs	r2, #1
  40a15c:	0092      	lsls	r2, r2, #2
  40a15e:	3104      	adds	r1, #4
  40a160:	4b19      	ldr	r3, [pc, #100]	; (40a1c8 <lv_style_list_copy+0x104>)
  40a162:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40a164:	7923      	ldrb	r3, [r4, #4]
  40a166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a16a:	3b01      	subs	r3, #1
  40a16c:	792a      	ldrb	r2, [r5, #4]
  40a16e:	f363 0205 	bfi	r2, r3, #0, #6
  40a172:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
  40a174:	4628      	mov	r0, r5
  40a176:	4d15      	ldr	r5, [pc, #84]	; (40a1cc <lv_style_list_copy+0x108>)
  40a178:	47a8      	blx	r5
  40a17a:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
  40a17c:	4620      	mov	r0, r4
  40a17e:	47a8      	blx	r5
  40a180:	4601      	mov	r1, r0
  40a182:	4630      	mov	r0, r6
  40a184:	4b12      	ldr	r3, [pc, #72]	; (40a1d0 <lv_style_list_copy+0x10c>)
  40a186:	4798      	blx	r3
  40a188:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40a18a:	7920      	ldrb	r0, [r4, #4]
  40a18c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a190:	3802      	subs	r0, #2
  40a192:	0080      	lsls	r0, r0, #2
  40a194:	4b0b      	ldr	r3, [pc, #44]	; (40a1c4 <lv_style_list_copy+0x100>)
  40a196:	4798      	blx	r3
  40a198:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40a19a:	6821      	ldr	r1, [r4, #0]
  40a19c:	7922      	ldrb	r2, [r4, #4]
  40a19e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a1a2:	3a02      	subs	r2, #2
  40a1a4:	0092      	lsls	r2, r2, #2
  40a1a6:	3108      	adds	r1, #8
  40a1a8:	4b07      	ldr	r3, [pc, #28]	; (40a1c8 <lv_style_list_copy+0x104>)
  40a1aa:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
  40a1ac:	7923      	ldrb	r3, [r4, #4]
  40a1ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a1b2:	3b02      	subs	r3, #2
  40a1b4:	792a      	ldrb	r2, [r5, #4]
  40a1b6:	f363 0205 	bfi	r2, r3, #0, #6
  40a1ba:	712a      	strb	r2, [r5, #4]
  40a1bc:	e7da      	b.n	40a174 <lv_style_list_copy+0xb0>
  40a1be:	bf00      	nop
  40a1c0:	0040a049 	.word	0x0040a049
  40a1c4:	0041576d 	.word	0x0041576d
  40a1c8:	0041597d 	.word	0x0041597d
  40a1cc:	0040936d 	.word	0x0040936d
  40a1d0:	0040945d 	.word	0x0040945d

0040a1d4 <_lv_style_list_add_trans_style>:
{
  40a1d4:	b538      	push	{r3, r4, r5, lr}
  40a1d6:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40a1d8:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40a1dc:	2b00      	cmp	r3, #0
  40a1de:	db1c      	blt.n	40a21a <_lv_style_list_add_trans_style+0x46>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
  40a1e0:	2004      	movs	r0, #4
  40a1e2:	4b13      	ldr	r3, [pc, #76]	; (40a230 <_lv_style_list_add_trans_style+0x5c>)
  40a1e4:	4798      	blx	r3
  40a1e6:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
  40a1e8:	4b12      	ldr	r3, [pc, #72]	; (40a234 <_lv_style_list_add_trans_style+0x60>)
  40a1ea:	4798      	blx	r3
  40a1ec:	b1d0      	cbz	r0, 40a224 <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
  40a1ee:	b1bd      	cbz	r5, 40a220 <_lv_style_list_add_trans_style+0x4c>
    lv_style_init(trans_style);
  40a1f0:	4628      	mov	r0, r5
  40a1f2:	4b11      	ldr	r3, [pc, #68]	; (40a238 <_lv_style_list_add_trans_style+0x64>)
  40a1f4:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
  40a1f6:	4629      	mov	r1, r5
  40a1f8:	4620      	mov	r0, r4
  40a1fa:	4b10      	ldr	r3, [pc, #64]	; (40a23c <_lv_style_list_add_trans_style+0x68>)
  40a1fc:	4798      	blx	r3
    list->has_trans = 1;
  40a1fe:	7923      	ldrb	r3, [r4, #4]
  40a200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a204:	7123      	strb	r3, [r4, #4]
    if(list->has_local) {
  40a206:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a20a:	d009      	beq.n	40a220 <_lv_style_list_add_trans_style+0x4c>
        lv_style_t * tmp = list->style_list[0];
  40a20c:	6823      	ldr	r3, [r4, #0]
  40a20e:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
  40a210:	6859      	ldr	r1, [r3, #4]
  40a212:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
  40a214:	6823      	ldr	r3, [r4, #0]
  40a216:	605a      	str	r2, [r3, #4]
  40a218:	e002      	b.n	40a220 <_lv_style_list_add_trans_style+0x4c>
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40a21a:	4b09      	ldr	r3, [pc, #36]	; (40a240 <_lv_style_list_add_trans_style+0x6c>)
  40a21c:	4798      	blx	r3
  40a21e:	4605      	mov	r5, r0
}
  40a220:	4628      	mov	r0, r5
  40a222:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(trans_style);
  40a224:	462a      	mov	r2, r5
  40a226:	2300      	movs	r3, #0
  40a228:	4806      	ldr	r0, [pc, #24]	; (40a244 <_lv_style_list_add_trans_style+0x70>)
  40a22a:	4907      	ldr	r1, [pc, #28]	; (40a248 <_lv_style_list_add_trans_style+0x74>)
  40a22c:	4788      	blx	r1
  40a22e:	e7fe      	b.n	40a22e <_lv_style_list_add_trans_style+0x5a>
  40a230:	0041576d 	.word	0x0041576d
  40a234:	00415065 	.word	0x00415065
  40a238:	004091d9 	.word	0x004091d9
  40a23c:	004092bd 	.word	0x004092bd
  40a240:	0040a035 	.word	0x0040a035
  40a244:	00421264 	.word	0x00421264
  40a248:	00415071 	.word	0x00415071

0040a24c <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
  40a24c:	2800      	cmp	r0, #0
  40a24e:	d05e      	beq.n	40a30e <_lv_style_list_get_int+0xc2>
{
  40a250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a254:	b083      	sub	sp, #12
  40a256:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a258:	6803      	ldr	r3, [r0, #0]
  40a25a:	2b00      	cmp	r3, #0
  40a25c:	d059      	beq.n	40a312 <_lv_style_list_get_int+0xc6>
  40a25e:	4691      	mov	r9, r2
  40a260:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40a262:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
  40a266:	2400      	movs	r4, #0
  40a268:	f8ad 4006 	strh.w	r4, [sp, #6]
    int16_t weight = -1;
  40a26c:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a270:	e017      	b.n	40a2a2 <_lv_style_list_get_int+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40a272:	3101      	adds	r1, #1
  40a274:	b2c9      	uxtb	r1, r1
  40a276:	e020      	b.n	40a2ba <_lv_style_list_get_int+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a278:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
  40a27a:	f10d 0206 	add.w	r2, sp, #6
  40a27e:	4639      	mov	r1, r7
  40a280:	4b26      	ldr	r3, [pc, #152]	; (40a31c <_lv_style_list_get_int+0xd0>)
  40a282:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40a284:	4580      	cmp	r8, r0
  40a286:	d024      	beq.n	40a2d2 <_lv_style_list_get_int+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a288:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a28c:	2b00      	cmp	r3, #0
  40a28e:	db28      	blt.n	40a2e2 <_lv_style_list_get_int+0x96>
        else if(weight_act > weight) {
  40a290:	4286      	cmp	r6, r0
  40a292:	da04      	bge.n	40a29e <_lv_style_list_get_int+0x52>
            *res = value_act;
  40a294:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40a298:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40a29c:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a29e:	3401      	adds	r4, #1
  40a2a0:	b224      	sxth	r4, r4
  40a2a2:	792b      	ldrb	r3, [r5, #4]
  40a2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a2a8:	429c      	cmp	r4, r3
  40a2aa:	da2c      	bge.n	40a306 <_lv_style_list_get_int+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a2ac:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a2ae:	88aa      	ldrh	r2, [r5, #4]
  40a2b0:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a2b4:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a2b8:	d0db      	beq.n	40a272 <_lv_style_list_get_int+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a2ba:	792a      	ldrb	r2, [r5, #4]
  40a2bc:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a2c0:	d0da      	beq.n	40a278 <_lv_style_list_get_int+0x2c>
  40a2c2:	428b      	cmp	r3, r1
  40a2c4:	dd03      	ble.n	40a2ce <_lv_style_list_get_int+0x82>
    return list->style_list[id];
  40a2c6:	682b      	ldr	r3, [r5, #0]
  40a2c8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a2cc:	e7d5      	b.n	40a27a <_lv_style_list_get_int+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a2ce:	2000      	movs	r0, #0
  40a2d0:	e7d3      	b.n	40a27a <_lv_style_list_get_int+0x2e>
            *res = value_act;
  40a2d2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40a2d6:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a2da:	2001      	movs	r0, #1
}
  40a2dc:	b003      	add	sp, #12
  40a2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a2e2:	fab4 f384 	clz	r3, r4
  40a2e6:	095b      	lsrs	r3, r3, #5
  40a2e8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a2ec:	d1d0      	bne.n	40a290 <_lv_style_list_get_int+0x44>
  40a2ee:	2b00      	cmp	r3, #0
  40a2f0:	d0ce      	beq.n	40a290 <_lv_style_list_get_int+0x44>
  40a2f2:	796b      	ldrb	r3, [r5, #5]
  40a2f4:	f013 0f01 	tst.w	r3, #1
  40a2f8:	d1ca      	bne.n	40a290 <_lv_style_list_get_int+0x44>
            *res = value_act;
  40a2fa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40a2fe:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a302:	2001      	movs	r0, #1
  40a304:	e7ea      	b.n	40a2dc <_lv_style_list_get_int+0x90>
    if(weight >= 0) return LV_RES_OK;
  40a306:	2e00      	cmp	r6, #0
  40a308:	db05      	blt.n	40a316 <_lv_style_list_get_int+0xca>
  40a30a:	2001      	movs	r0, #1
  40a30c:	e7e6      	b.n	40a2dc <_lv_style_list_get_int+0x90>
    if(list == NULL) return LV_RES_INV;
  40a30e:	2000      	movs	r0, #0
  40a310:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a312:	2000      	movs	r0, #0
  40a314:	e7e2      	b.n	40a2dc <_lv_style_list_get_int+0x90>
    else return LV_RES_INV;
  40a316:	2000      	movs	r0, #0
  40a318:	e7e0      	b.n	40a2dc <_lv_style_list_get_int+0x90>
  40a31a:	bf00      	nop
  40a31c:	00409c01 	.word	0x00409c01

0040a320 <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
  40a320:	2800      	cmp	r0, #0
  40a322:	d05d      	beq.n	40a3e0 <_lv_style_list_get_color+0xc0>
{
  40a324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a328:	b083      	sub	sp, #12
  40a32a:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a32c:	6803      	ldr	r3, [r0, #0]
  40a32e:	2b00      	cmp	r3, #0
  40a330:	d058      	beq.n	40a3e4 <_lv_style_list_get_color+0xc4>
  40a332:	4691      	mov	r9, r2
  40a334:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40a336:	ea4f 2811 	mov.w	r8, r1, lsr #8
    value_act.full = 0;
  40a33a:	2400      	movs	r4, #0
  40a33c:	f8ad 4004 	strh.w	r4, [sp, #4]
    int16_t weight = -1;
  40a340:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a344:	e016      	b.n	40a374 <_lv_style_list_get_color+0x54>
    if(list->has_trans && list->skip_trans) id++;
  40a346:	3101      	adds	r1, #1
  40a348:	b2c9      	uxtb	r1, r1
  40a34a:	e01f      	b.n	40a38c <_lv_style_list_get_color+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a34c:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
  40a34e:	aa01      	add	r2, sp, #4
  40a350:	4639      	mov	r1, r7
  40a352:	4b26      	ldr	r3, [pc, #152]	; (40a3ec <_lv_style_list_get_color+0xcc>)
  40a354:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40a356:	4580      	cmp	r8, r0
  40a358:	d024      	beq.n	40a3a4 <_lv_style_list_get_color+0x84>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a35a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a35e:	2b00      	cmp	r3, #0
  40a360:	db28      	blt.n	40a3b4 <_lv_style_list_get_color+0x94>
        else if(weight_act > weight) {
  40a362:	4286      	cmp	r6, r0
  40a364:	da04      	bge.n	40a370 <_lv_style_list_get_color+0x50>
            *res = value_act;
  40a366:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40a36a:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40a36e:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a370:	3401      	adds	r4, #1
  40a372:	b224      	sxth	r4, r4
  40a374:	792b      	ldrb	r3, [r5, #4]
  40a376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a37a:	429c      	cmp	r4, r3
  40a37c:	da2c      	bge.n	40a3d8 <_lv_style_list_get_color+0xb8>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a37e:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a380:	88aa      	ldrh	r2, [r5, #4]
  40a382:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a386:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a38a:	d0dc      	beq.n	40a346 <_lv_style_list_get_color+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a38c:	792a      	ldrb	r2, [r5, #4]
  40a38e:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a392:	d0db      	beq.n	40a34c <_lv_style_list_get_color+0x2c>
  40a394:	428b      	cmp	r3, r1
  40a396:	dd03      	ble.n	40a3a0 <_lv_style_list_get_color+0x80>
    return list->style_list[id];
  40a398:	682b      	ldr	r3, [r5, #0]
  40a39a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a39e:	e7d6      	b.n	40a34e <_lv_style_list_get_color+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a3a0:	2000      	movs	r0, #0
  40a3a2:	e7d4      	b.n	40a34e <_lv_style_list_get_color+0x2e>
            *res = value_act;
  40a3a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40a3a8:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a3ac:	2001      	movs	r0, #1
}
  40a3ae:	b003      	add	sp, #12
  40a3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a3b4:	fab4 f384 	clz	r3, r4
  40a3b8:	095b      	lsrs	r3, r3, #5
  40a3ba:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a3be:	d1d0      	bne.n	40a362 <_lv_style_list_get_color+0x42>
  40a3c0:	2b00      	cmp	r3, #0
  40a3c2:	d0ce      	beq.n	40a362 <_lv_style_list_get_color+0x42>
  40a3c4:	796b      	ldrb	r3, [r5, #5]
  40a3c6:	f013 0f01 	tst.w	r3, #1
  40a3ca:	d1ca      	bne.n	40a362 <_lv_style_list_get_color+0x42>
            *res = value_act;
  40a3cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40a3d0:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a3d4:	2001      	movs	r0, #1
  40a3d6:	e7ea      	b.n	40a3ae <_lv_style_list_get_color+0x8e>
    if(weight >= 0)  return LV_RES_OK;
  40a3d8:	2e00      	cmp	r6, #0
  40a3da:	db05      	blt.n	40a3e8 <_lv_style_list_get_color+0xc8>
  40a3dc:	2001      	movs	r0, #1
  40a3de:	e7e6      	b.n	40a3ae <_lv_style_list_get_color+0x8e>
    if(list == NULL) return LV_RES_INV;
  40a3e0:	2000      	movs	r0, #0
  40a3e2:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a3e4:	2000      	movs	r0, #0
  40a3e6:	e7e2      	b.n	40a3ae <_lv_style_list_get_color+0x8e>
    else return LV_RES_INV;
  40a3e8:	2000      	movs	r0, #0
  40a3ea:	e7e0      	b.n	40a3ae <_lv_style_list_get_color+0x8e>
  40a3ec:	00409e0b 	.word	0x00409e0b

0040a3f0 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
  40a3f0:	2800      	cmp	r0, #0
  40a3f2:	d05e      	beq.n	40a4b2 <_lv_style_list_get_opa+0xc2>
{
  40a3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a3f8:	b083      	sub	sp, #12
  40a3fa:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a3fc:	6803      	ldr	r3, [r0, #0]
  40a3fe:	2b00      	cmp	r3, #0
  40a400:	d059      	beq.n	40a4b6 <_lv_style_list_get_opa+0xc6>
  40a402:	4691      	mov	r9, r2
  40a404:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40a406:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
  40a40a:	2400      	movs	r4, #0
  40a40c:	f88d 4007 	strb.w	r4, [sp, #7]
    int16_t weight = -1;
  40a410:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a414:	e017      	b.n	40a446 <_lv_style_list_get_opa+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40a416:	3101      	adds	r1, #1
  40a418:	b2c9      	uxtb	r1, r1
  40a41a:	e020      	b.n	40a45e <_lv_style_list_get_opa+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a41c:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
  40a41e:	f10d 0207 	add.w	r2, sp, #7
  40a422:	4639      	mov	r1, r7
  40a424:	4b26      	ldr	r3, [pc, #152]	; (40a4c0 <_lv_style_list_get_opa+0xd0>)
  40a426:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40a428:	4580      	cmp	r8, r0
  40a42a:	d024      	beq.n	40a476 <_lv_style_list_get_opa+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a42c:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a430:	2b00      	cmp	r3, #0
  40a432:	db28      	blt.n	40a486 <_lv_style_list_get_opa+0x96>
        else if(weight_act > weight) {
  40a434:	4286      	cmp	r6, r0
  40a436:	da04      	bge.n	40a442 <_lv_style_list_get_opa+0x52>
            *res = value_act;
  40a438:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40a43c:	f889 3000 	strb.w	r3, [r9]
            weight =  weight_act;
  40a440:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a442:	3401      	adds	r4, #1
  40a444:	b224      	sxth	r4, r4
  40a446:	792b      	ldrb	r3, [r5, #4]
  40a448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a44c:	429c      	cmp	r4, r3
  40a44e:	da2c      	bge.n	40a4aa <_lv_style_list_get_opa+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a450:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a452:	88aa      	ldrh	r2, [r5, #4]
  40a454:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a458:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a45c:	d0db      	beq.n	40a416 <_lv_style_list_get_opa+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a45e:	792a      	ldrb	r2, [r5, #4]
  40a460:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a464:	d0da      	beq.n	40a41c <_lv_style_list_get_opa+0x2c>
  40a466:	428b      	cmp	r3, r1
  40a468:	dd03      	ble.n	40a472 <_lv_style_list_get_opa+0x82>
    return list->style_list[id];
  40a46a:	682b      	ldr	r3, [r5, #0]
  40a46c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a470:	e7d5      	b.n	40a41e <_lv_style_list_get_opa+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a472:	2000      	movs	r0, #0
  40a474:	e7d3      	b.n	40a41e <_lv_style_list_get_opa+0x2e>
            *res = value_act;
  40a476:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40a47a:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40a47e:	2001      	movs	r0, #1
}
  40a480:	b003      	add	sp, #12
  40a482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a486:	fab4 f384 	clz	r3, r4
  40a48a:	095b      	lsrs	r3, r3, #5
  40a48c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a490:	d1d0      	bne.n	40a434 <_lv_style_list_get_opa+0x44>
  40a492:	2b00      	cmp	r3, #0
  40a494:	d0ce      	beq.n	40a434 <_lv_style_list_get_opa+0x44>
  40a496:	796b      	ldrb	r3, [r5, #5]
  40a498:	f013 0f01 	tst.w	r3, #1
  40a49c:	d1ca      	bne.n	40a434 <_lv_style_list_get_opa+0x44>
            *res = value_act;
  40a49e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40a4a2:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40a4a6:	2001      	movs	r0, #1
  40a4a8:	e7ea      	b.n	40a480 <_lv_style_list_get_opa+0x90>
    if(weight >= 0)  return LV_RES_OK;
  40a4aa:	2e00      	cmp	r6, #0
  40a4ac:	db05      	blt.n	40a4ba <_lv_style_list_get_opa+0xca>
  40a4ae:	2001      	movs	r0, #1
  40a4b0:	e7e6      	b.n	40a480 <_lv_style_list_get_opa+0x90>
    if(list == NULL) return LV_RES_INV;
  40a4b2:	2000      	movs	r0, #0
  40a4b4:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a4b6:	2000      	movs	r0, #0
  40a4b8:	e7e2      	b.n	40a480 <_lv_style_list_get_opa+0x90>
    else return LV_RES_INV;
  40a4ba:	2000      	movs	r0, #0
  40a4bc:	e7e0      	b.n	40a480 <_lv_style_list_get_opa+0x90>
  40a4be:	bf00      	nop
  40a4c0:	00409d07 	.word	0x00409d07

0040a4c4 <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
  40a4c4:	2800      	cmp	r0, #0
  40a4c6:	d058      	beq.n	40a57a <_lv_style_list_get_ptr+0xb6>
{
  40a4c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a4cc:	b083      	sub	sp, #12
  40a4ce:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a4d0:	6803      	ldr	r3, [r0, #0]
  40a4d2:	2b00      	cmp	r3, #0
  40a4d4:	d053      	beq.n	40a57e <_lv_style_list_get_ptr+0xba>
  40a4d6:	4691      	mov	r9, r2
  40a4d8:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40a4da:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a4de:	2400      	movs	r4, #0
    int16_t weight = -1;
  40a4e0:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a4e4:	e015      	b.n	40a512 <_lv_style_list_get_ptr+0x4e>
    if(list->has_trans && list->skip_trans) id++;
  40a4e6:	3101      	adds	r1, #1
  40a4e8:	b2c9      	uxtb	r1, r1
  40a4ea:	e01e      	b.n	40a52a <_lv_style_list_get_ptr+0x66>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a4ec:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
  40a4ee:	aa01      	add	r2, sp, #4
  40a4f0:	4639      	mov	r1, r7
  40a4f2:	4b25      	ldr	r3, [pc, #148]	; (40a588 <_lv_style_list_get_ptr+0xc4>)
  40a4f4:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40a4f6:	4580      	cmp	r8, r0
  40a4f8:	d023      	beq.n	40a542 <_lv_style_list_get_ptr+0x7e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a4fa:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a4fe:	2b00      	cmp	r3, #0
  40a500:	db26      	blt.n	40a550 <_lv_style_list_get_ptr+0x8c>
        else if(weight_act > weight) {
  40a502:	4286      	cmp	r6, r0
  40a504:	da03      	bge.n	40a50e <_lv_style_list_get_ptr+0x4a>
            *res = value_act;
  40a506:	9b01      	ldr	r3, [sp, #4]
  40a508:	f8c9 3000 	str.w	r3, [r9]
            weight =  weight_act;
  40a50c:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a50e:	3401      	adds	r4, #1
  40a510:	b224      	sxth	r4, r4
  40a512:	792b      	ldrb	r3, [r5, #4]
  40a514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a518:	429c      	cmp	r4, r3
  40a51a:	da2a      	bge.n	40a572 <_lv_style_list_get_ptr+0xae>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a51c:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a51e:	88aa      	ldrh	r2, [r5, #4]
  40a520:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a524:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a528:	d0dd      	beq.n	40a4e6 <_lv_style_list_get_ptr+0x22>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a52a:	792a      	ldrb	r2, [r5, #4]
  40a52c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a530:	d0dc      	beq.n	40a4ec <_lv_style_list_get_ptr+0x28>
  40a532:	428b      	cmp	r3, r1
  40a534:	dd03      	ble.n	40a53e <_lv_style_list_get_ptr+0x7a>
    return list->style_list[id];
  40a536:	682b      	ldr	r3, [r5, #0]
  40a538:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a53c:	e7d7      	b.n	40a4ee <_lv_style_list_get_ptr+0x2a>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a53e:	2000      	movs	r0, #0
  40a540:	e7d5      	b.n	40a4ee <_lv_style_list_get_ptr+0x2a>
            *res = value_act;
  40a542:	9b01      	ldr	r3, [sp, #4]
  40a544:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40a548:	2001      	movs	r0, #1
}
  40a54a:	b003      	add	sp, #12
  40a54c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a550:	fab4 f384 	clz	r3, r4
  40a554:	095b      	lsrs	r3, r3, #5
  40a556:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a55a:	d1d2      	bne.n	40a502 <_lv_style_list_get_ptr+0x3e>
  40a55c:	2b00      	cmp	r3, #0
  40a55e:	d0d0      	beq.n	40a502 <_lv_style_list_get_ptr+0x3e>
  40a560:	796b      	ldrb	r3, [r5, #5]
  40a562:	f013 0f01 	tst.w	r3, #1
  40a566:	d1cc      	bne.n	40a502 <_lv_style_list_get_ptr+0x3e>
            *res = value_act;
  40a568:	9b01      	ldr	r3, [sp, #4]
  40a56a:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40a56e:	2001      	movs	r0, #1
  40a570:	e7eb      	b.n	40a54a <_lv_style_list_get_ptr+0x86>
    if(weight >= 0)  return LV_RES_OK;
  40a572:	2e00      	cmp	r6, #0
  40a574:	db05      	blt.n	40a582 <_lv_style_list_get_ptr+0xbe>
  40a576:	2001      	movs	r0, #1
  40a578:	e7e7      	b.n	40a54a <_lv_style_list_get_ptr+0x86>
    if(list == NULL) return LV_RES_INV;
  40a57a:	2000      	movs	r0, #0
  40a57c:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a57e:	2000      	movs	r0, #0
  40a580:	e7e3      	b.n	40a54a <_lv_style_list_get_ptr+0x86>
    else return LV_RES_INV;
  40a582:	2000      	movs	r0, #0
  40a584:	e7e1      	b.n	40a54a <_lv_style_list_get_ptr+0x86>
  40a586:	bf00      	nop
  40a588:	00409f11 	.word	0x00409f11

0040a58c <map_blended>:
}
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
  40a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a590:	b085      	sub	sp, #20
  40a592:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
  40a596:	9400      	str	r4, [sp, #0]
  40a598:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40a59c:	8884      	ldrh	r4, [r0, #4]
  40a59e:	f9b0 c000 	ldrsh.w	ip, [r0]
  40a5a2:	fa1f f58c 	uxth.w	r5, ip
  40a5a6:	1b64      	subs	r4, r4, r5
  40a5a8:	b2a4      	uxth	r4, r4
  40a5aa:	3401      	adds	r4, #1
  40a5ac:	b224      	sxth	r4, r4
  40a5ae:	9402      	str	r4, [sp, #8]
  40a5b0:	8895      	ldrh	r5, [r2, #4]
  40a5b2:	f9b2 4000 	ldrsh.w	r4, [r2]
  40a5b6:	b2a6      	uxth	r6, r4
  40a5b8:	1bad      	subs	r5, r5, r6
  40a5ba:	b2ad      	uxth	r5, r5
  40a5bc:	3501      	adds	r5, #1
  40a5be:	b22e      	sxth	r6, r5
  40a5c0:	9603      	str	r6, [sp, #12]
  40a5c2:	889d      	ldrh	r5, [r3, #4]
  40a5c4:	f9b3 e000 	ldrsh.w	lr, [r3]
  40a5c8:	fa1f f68e 	uxth.w	r6, lr
  40a5cc:	1bad      	subs	r5, r5, r6
  40a5ce:	b2ad      	uxth	r5, r5
  40a5d0:	3501      	adds	r5, #1
  40a5d2:	b22e      	sxth	r6, r5
  40a5d4:	9601      	str	r6, [sp, #4]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40a5d6:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40a5da:	9d02      	ldr	r5, [sp, #8]
  40a5dc:	fb0b f605 	mul.w	r6, fp, r5
  40a5e0:	eb01 0646 	add.w	r6, r1, r6, lsl #1

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40a5e4:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40a5e8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40a5ec:	1aed      	subs	r5, r5, r3
  40a5ee:	ebab 0505 	sub.w	r5, fp, r5
  40a5f2:	9b01      	ldr	r3, [sp, #4]
  40a5f4:	fb05 f503 	mul.w	r5, r5, r3
  40a5f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a5fa:	eb03 0545 	add.w	r5, r3, r5, lsl #1

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
  40a5fe:	2f01      	cmp	r7, #1
  40a600:	d004      	beq.n	40a60c <map_blended+0x80>
  40a602:	2f02      	cmp	r7, #2
  40a604:	d00f      	beq.n	40a626 <map_blended+0x9a>
            disp_buf_tmp += disp_w;
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
  40a606:	b005      	add	sp, #20
  40a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40a60c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 40a6d0 <map_blended+0x144>
  40a610:	4617      	mov	r7, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40a612:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40a616:	2b01      	cmp	r3, #1
  40a618:	d008      	beq.n	40a62c <map_blended+0xa0>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40a61a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a61c:	eba3 0904 	sub.w	r9, r3, r4
        map_buf_tmp -= draw_area->x1;
  40a620:	eba5 0844 	sub.w	r8, r5, r4, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a624:	e04d      	b.n	40a6c2 <map_blended+0x136>
            blend_fp = color_blend_true_color_subtractive;
  40a626:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 40a6d4 <map_blended+0x148>
  40a62a:	e7f1      	b.n	40a610 <map_blended+0x84>
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40a62c:	ebae 030c 	sub.w	r3, lr, ip
  40a630:	1ae3      	subs	r3, r4, r3
        map_buf_tmp -= draw_area->x1;
  40a632:	0064      	lsls	r4, r4, #1
  40a634:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
  40a638:	441d      	add	r5, r3
  40a63a:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40a63e:	f8dd 8000 	ldr.w	r8, [sp]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a642:	e013      	b.n	40a66c <map_blended+0xe0>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
  40a644:	4642      	mov	r2, r8
  40a646:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
  40a64a:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
  40a64e:	47d0      	blx	sl
  40a650:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a654:	3401      	adds	r4, #1
  40a656:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40a65a:	429c      	cmp	r4, r3
  40a65c:	ddf2      	ble.n	40a644 <map_blended+0xb8>
            disp_buf_tmp += disp_w;
  40a65e:	eb06 0649 	add.w	r6, r6, r9, lsl #1
            map_buf_tmp += map_w;
  40a662:	9b01      	ldr	r3, [sp, #4]
  40a664:	eb05 0543 	add.w	r5, r5, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a668:	f10b 0b01 	add.w	fp, fp, #1
  40a66c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40a670:	459b      	cmp	fp, r3
  40a672:	dcc8      	bgt.n	40a606 <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a674:	f9b7 4000 	ldrsh.w	r4, [r7]
  40a678:	e7ed      	b.n	40a656 <map_blended+0xca>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40a67a:	9a00      	ldr	r2, [sp, #0]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
  40a67c:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
  40a680:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
  40a684:	47d0      	blx	sl
  40a686:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a68a:	3401      	adds	r4, #1
  40a68c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40a690:	429c      	cmp	r4, r3
  40a692:	dc0c      	bgt.n	40a6ae <map_blended+0x122>
                if(mask_tmp[x] == 0) continue;
  40a694:	4625      	mov	r5, r4
  40a696:	f819 2004 	ldrb.w	r2, [r9, r4]
  40a69a:	2a00      	cmp	r2, #0
  40a69c:	d0f5      	beq.n	40a68a <map_blended+0xfe>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40a69e:	2afc      	cmp	r2, #252	; 0xfc
  40a6a0:	d8eb      	bhi.n	40a67a <map_blended+0xee>
  40a6a2:	9b00      	ldr	r3, [sp, #0]
  40a6a4:	fb02 f203 	mul.w	r2, r2, r3
  40a6a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40a6ac:	e7e6      	b.n	40a67c <map_blended+0xf0>
            disp_buf_tmp += disp_w;
  40a6ae:	9b02      	ldr	r3, [sp, #8]
  40a6b0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
            mask_tmp += draw_area_w;
  40a6b4:	9b03      	ldr	r3, [sp, #12]
  40a6b6:	4499      	add	r9, r3
            map_buf_tmp += map_w;
  40a6b8:	9b01      	ldr	r3, [sp, #4]
  40a6ba:	eb08 0843 	add.w	r8, r8, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a6be:	f10b 0b01 	add.w	fp, fp, #1
  40a6c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40a6c6:	459b      	cmp	fp, r3
  40a6c8:	dc9d      	bgt.n	40a606 <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a6ca:	f9b7 4000 	ldrsh.w	r4, [r7]
  40a6ce:	e7dd      	b.n	40a68c <map_blended+0x100>
  40a6d0:	0040b899 	.word	0x0040b899
  40a6d4:	0040b987 	.word	0x0040b987

0040a6d8 <fill_set_px>:
{
  40a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a6dc:	b089      	sub	sp, #36	; 0x24
  40a6de:	4604      	mov	r4, r0
  40a6e0:	9106      	str	r1, [sp, #24]
  40a6e2:	4615      	mov	r5, r2
  40a6e4:	4698      	mov	r8, r3
  40a6e6:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40a6ea:	4b33      	ldr	r3, [pc, #204]	; (40a7b8 <fill_set_px+0xe0>)
  40a6ec:	4798      	blx	r3
  40a6ee:	4606      	mov	r6, r0
  40a6f0:	88a3      	ldrh	r3, [r4, #4]
  40a6f2:	8822      	ldrh	r2, [r4, #0]
  40a6f4:	1a9b      	subs	r3, r3, r2
  40a6f6:	b29b      	uxth	r3, r3
  40a6f8:	3301      	adds	r3, #1
  40a6fa:	b21b      	sxth	r3, r3
  40a6fc:	9305      	str	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40a6fe:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  40a702:	2b01      	cmp	r3, #1
  40a704:	d00d      	beq.n	40a722 <fill_set_px+0x4a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40a706:	f9b5 2000 	ldrsh.w	r2, [r5]
  40a70a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40a70c:	1abf      	subs	r7, r7, r2
  40a70e:	88ab      	ldrh	r3, [r5, #4]
  40a710:	b292      	uxth	r2, r2
  40a712:	1a9b      	subs	r3, r3, r2
  40a714:	b29b      	uxth	r3, r3
  40a716:	3301      	adds	r3, #1
  40a718:	b21b      	sxth	r3, r3
  40a71a:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a71c:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40a720:	e03f      	b.n	40a7a2 <fill_set_px+0xca>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a722:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40a726:	f8dd b018 	ldr.w	fp, [sp, #24]
  40a72a:	e014      	b.n	40a756 <fill_set_px+0x7e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
  40a72c:	f8d6 9014 	ldr.w	r9, [r6, #20]
  40a730:	9702      	str	r7, [sp, #8]
  40a732:	f8ad 8004 	strh.w	r8, [sp, #4]
  40a736:	fa0f f38a 	sxth.w	r3, sl
  40a73a:	9300      	str	r3, [sp, #0]
  40a73c:	b223      	sxth	r3, r4
  40a73e:	9a05      	ldr	r2, [sp, #20]
  40a740:	4659      	mov	r1, fp
  40a742:	4630      	mov	r0, r6
  40a744:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a746:	3401      	adds	r4, #1
  40a748:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40a74c:	429c      	cmp	r4, r3
  40a74e:	dded      	ble.n	40a72c <fill_set_px+0x54>
  40a750:	46b9      	mov	r9, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a752:	f10a 0a01 	add.w	sl, sl, #1
  40a756:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40a75a:	459a      	cmp	sl, r3
  40a75c:	dc28      	bgt.n	40a7b0 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a75e:	f9b5 4000 	ldrsh.w	r4, [r5]
  40a762:	464f      	mov	r7, r9
  40a764:	e7f0      	b.n	40a748 <fill_set_px+0x70>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a766:	3401      	adds	r4, #1
  40a768:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40a76c:	429c      	cmp	r4, r3
  40a76e:	dc14      	bgt.n	40a79a <fill_set_px+0xc2>
                if(mask_tmp[x]) {
  40a770:	5d3b      	ldrb	r3, [r7, r4]
  40a772:	2b00      	cmp	r3, #0
  40a774:	d0f7      	beq.n	40a766 <fill_set_px+0x8e>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40a776:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40a77a:	fb03 f309 	mul.w	r3, r3, r9
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40a77e:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40a782:	9302      	str	r3, [sp, #8]
  40a784:	f8ad 8004 	strh.w	r8, [sp, #4]
  40a788:	fa0f f38a 	sxth.w	r3, sl
  40a78c:	9300      	str	r3, [sp, #0]
  40a78e:	b223      	sxth	r3, r4
  40a790:	9a05      	ldr	r2, [sp, #20]
  40a792:	9906      	ldr	r1, [sp, #24]
  40a794:	4630      	mov	r0, r6
  40a796:	47d8      	blx	fp
  40a798:	e7e5      	b.n	40a766 <fill_set_px+0x8e>
            mask_tmp += draw_area_w;
  40a79a:	9b07      	ldr	r3, [sp, #28]
  40a79c:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a79e:	f10a 0a01 	add.w	sl, sl, #1
  40a7a2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40a7a6:	459a      	cmp	sl, r3
  40a7a8:	dc02      	bgt.n	40a7b0 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a7aa:	f9b5 4000 	ldrsh.w	r4, [r5]
  40a7ae:	e7db      	b.n	40a768 <fill_set_px+0x90>
}
  40a7b0:	b009      	add	sp, #36	; 0x24
  40a7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a7b6:	bf00      	nop
  40a7b8:	00408ba9 	.word	0x00408ba9

0040a7bc <map_set_px>:
{
  40a7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a7c0:	b089      	sub	sp, #36	; 0x24
  40a7c2:	4604      	mov	r4, r0
  40a7c4:	9105      	str	r1, [sp, #20]
  40a7c6:	4615      	mov	r5, r2
  40a7c8:	461f      	mov	r7, r3
  40a7ca:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40a7ce:	4b48      	ldr	r3, [pc, #288]	; (40a8f0 <map_set_px+0x134>)
  40a7d0:	4798      	blx	r3
  40a7d2:	4606      	mov	r6, r0
  40a7d4:	88a3      	ldrh	r3, [r4, #4]
  40a7d6:	f9b4 9000 	ldrsh.w	r9, [r4]
  40a7da:	fa1f f289 	uxth.w	r2, r9
  40a7de:	1a9b      	subs	r3, r3, r2
  40a7e0:	b29b      	uxth	r3, r3
  40a7e2:	3301      	adds	r3, #1
  40a7e4:	b21b      	sxth	r3, r3
  40a7e6:	9304      	str	r3, [sp, #16]
  40a7e8:	88ab      	ldrh	r3, [r5, #4]
  40a7ea:	f9b5 2000 	ldrsh.w	r2, [r5]
  40a7ee:	b291      	uxth	r1, r2
  40a7f0:	1a5b      	subs	r3, r3, r1
  40a7f2:	b29b      	uxth	r3, r3
  40a7f4:	3301      	adds	r3, #1
  40a7f6:	b21b      	sxth	r3, r3
  40a7f8:	9307      	str	r3, [sp, #28]
  40a7fa:	88b9      	ldrh	r1, [r7, #4]
  40a7fc:	f9b7 3000 	ldrsh.w	r3, [r7]
  40a800:	b298      	uxth	r0, r3
  40a802:	1a09      	subs	r1, r1, r0
  40a804:	b289      	uxth	r1, r1
  40a806:	3101      	adds	r1, #1
  40a808:	b209      	sxth	r1, r1
  40a80a:	9106      	str	r1, [sp, #24]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40a80c:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
  40a810:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
  40a814:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40a818:	1a09      	subs	r1, r1, r0
  40a81a:	eba8 0101 	sub.w	r1, r8, r1
  40a81e:	9806      	ldr	r0, [sp, #24]
  40a820:	fb01 f100 	mul.w	r1, r1, r0
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40a824:	eba3 0909 	sub.w	r9, r3, r9
  40a828:	eba2 0909 	sub.w	r9, r2, r9
  40a82c:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_tmp -= draw_area->x1;
  40a830:	eb09 0941 	add.w	r9, r9, r1, lsl #1
  40a834:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
  40a838:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a83a:	4499      	add	r9, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40a83c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  40a840:	2b01      	cmp	r3, #1
  40a842:	d024      	beq.n	40a88e <map_set_px+0xd2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40a844:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40a846:	1abf      	subs	r7, r7, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a848:	e047      	b.n	40a8da <map_set_px+0x11e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
  40a84a:	f8d6 a014 	ldr.w	sl, [r6, #20]
  40a84e:	9702      	str	r7, [sp, #8]
  40a850:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40a854:	f8ad 3004 	strh.w	r3, [sp, #4]
  40a858:	fa0f f388 	sxth.w	r3, r8
  40a85c:	9300      	str	r3, [sp, #0]
  40a85e:	b223      	sxth	r3, r4
  40a860:	9a04      	ldr	r2, [sp, #16]
  40a862:	4659      	mov	r1, fp
  40a864:	4630      	mov	r0, r6
  40a866:	47d0      	blx	sl
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a868:	3401      	adds	r4, #1
  40a86a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40a86e:	429c      	cmp	r4, r3
  40a870:	ddeb      	ble.n	40a84a <map_set_px+0x8e>
  40a872:	46ba      	mov	sl, r7
            map_buf_tmp += map_w;
  40a874:	9b06      	ldr	r3, [sp, #24]
  40a876:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a87a:	f108 0801 	add.w	r8, r8, #1
  40a87e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40a882:	4598      	cmp	r8, r3
  40a884:	dc30      	bgt.n	40a8e8 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a886:	f9b5 4000 	ldrsh.w	r4, [r5]
  40a88a:	4657      	mov	r7, sl
  40a88c:	e7ed      	b.n	40a86a <map_set_px+0xae>
  40a88e:	f8dd b014 	ldr.w	fp, [sp, #20]
  40a892:	e7f4      	b.n	40a87e <map_set_px+0xc2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a894:	3401      	adds	r4, #1
  40a896:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40a89a:	429c      	cmp	r4, r3
  40a89c:	dc16      	bgt.n	40a8cc <map_set_px+0x110>
                if(mask_tmp[x]) {
  40a89e:	5d3b      	ldrb	r3, [r7, r4]
  40a8a0:	2b00      	cmp	r3, #0
  40a8a2:	d0f7      	beq.n	40a894 <map_set_px+0xd8>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40a8a4:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40a8a8:	fb03 f30a 	mul.w	r3, r3, sl
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40a8ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40a8b0:	9302      	str	r3, [sp, #8]
  40a8b2:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40a8b6:	f8ad 3004 	strh.w	r3, [sp, #4]
  40a8ba:	fa0f f388 	sxth.w	r3, r8
  40a8be:	9300      	str	r3, [sp, #0]
  40a8c0:	b223      	sxth	r3, r4
  40a8c2:	9a04      	ldr	r2, [sp, #16]
  40a8c4:	9905      	ldr	r1, [sp, #20]
  40a8c6:	4630      	mov	r0, r6
  40a8c8:	47d8      	blx	fp
  40a8ca:	e7e3      	b.n	40a894 <map_set_px+0xd8>
            mask_tmp += draw_area_w;
  40a8cc:	9b07      	ldr	r3, [sp, #28]
  40a8ce:	441f      	add	r7, r3
            map_buf_tmp += map_w;
  40a8d0:	9b06      	ldr	r3, [sp, #24]
  40a8d2:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a8d6:	f108 0801 	add.w	r8, r8, #1
  40a8da:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40a8de:	4598      	cmp	r8, r3
  40a8e0:	dc02      	bgt.n	40a8e8 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40a8e2:	f9b5 4000 	ldrsh.w	r4, [r5]
  40a8e6:	e7d6      	b.n	40a896 <map_set_px+0xda>
}
  40a8e8:	b009      	add	sp, #36	; 0x24
  40a8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a8ee:	bf00      	nop
  40a8f0:	00408ba9 	.word	0x00408ba9

0040a8f4 <map_normal>:
{
  40a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a8f8:	b08f      	sub	sp, #60	; 0x3c
  40a8fa:	4686      	mov	lr, r0
  40a8fc:	4614      	mov	r4, r2
  40a8fe:	9206      	str	r2, [sp, #24]
  40a900:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
  40a904:	8882      	ldrh	r2, [r0, #4]
  40a906:	f9b0 0000 	ldrsh.w	r0, [r0]
  40a90a:	9003      	str	r0, [sp, #12]
  40a90c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40a910:	1a12      	subs	r2, r2, r0
  40a912:	b292      	uxth	r2, r2
  40a914:	3201      	adds	r2, #1
  40a916:	b212      	sxth	r2, r2
  40a918:	9208      	str	r2, [sp, #32]
  40a91a:	88a2      	ldrh	r2, [r4, #4]
  40a91c:	f9b4 c000 	ldrsh.w	ip, [r4]
  40a920:	fa1f f08c 	uxth.w	r0, ip
  40a924:	1a12      	subs	r2, r2, r0
  40a926:	b292      	uxth	r2, r2
  40a928:	3201      	adds	r2, #1
  40a92a:	b212      	sxth	r2, r2
  40a92c:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40a92e:	4693      	mov	fp, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40a930:	88e0      	ldrh	r0, [r4, #6]
  40a932:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  40a936:	b294      	uxth	r4, r2
  40a938:	1b00      	subs	r0, r0, r4
  40a93a:	b280      	uxth	r0, r0
  40a93c:	3001      	adds	r0, #1
  40a93e:	b204      	sxth	r4, r0
  40a940:	940a      	str	r4, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40a942:	8898      	ldrh	r0, [r3, #4]
  40a944:	f9b3 5000 	ldrsh.w	r5, [r3]
  40a948:	b2ac      	uxth	r4, r5
  40a94a:	1b00      	subs	r0, r0, r4
  40a94c:	b280      	uxth	r0, r0
  40a94e:	3001      	adds	r0, #1
  40a950:	b204      	sxth	r4, r0
  40a952:	9407      	str	r4, [sp, #28]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40a954:	9808      	ldr	r0, [sp, #32]
  40a956:	fb02 c400 	mla	r4, r2, r0, ip
  40a95a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40a95e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40a962:	f9be 1002 	ldrsh.w	r1, [lr, #2]
  40a966:	1a5b      	subs	r3, r3, r1
  40a968:	1ad3      	subs	r3, r2, r3
  40a96a:	9a07      	ldr	r2, [sp, #28]
  40a96c:	fb03 f302 	mul.w	r3, r3, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40a970:	9803      	ldr	r0, [sp, #12]
  40a972:	1a2d      	subs	r5, r5, r0
  40a974:	ebac 0505 	sub.w	r5, ip, r5
  40a978:	006d      	lsls	r5, r5, #1
  40a97a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40a97e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40a980:	441d      	add	r5, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40a982:	4b8a      	ldr	r3, [pc, #552]	; (40abac <map_normal+0x2b8>)
  40a984:	4798      	blx	r3
  40a986:	9003      	str	r0, [sp, #12]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40a988:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
  40a98c:	2b01      	cmp	r3, #1
  40a98e:	d008      	beq.n	40a9a2 <map_normal+0xae>
        if(opa > LV_OPA_MAX) {
  40a990:	2ffd      	cmp	r7, #253	; 0xfd
  40a992:	f240 8383 	bls.w	40b09c <map_normal+0x7a8>
            int32_t x_end4 = draw_area_w - 4;
  40a996:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a998:	3b04      	subs	r3, #4
  40a99a:	9303      	str	r3, [sp, #12]
            for(y = 0; y < draw_area_h; y++) {
  40a99c:	2300      	movs	r3, #0
  40a99e:	9306      	str	r3, [sp, #24]
  40a9a0:	e308      	b.n	40afb4 <map_normal+0x6c0>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
  40a9a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40a9a4:	b32b      	cbz	r3, 40a9f2 <map_normal+0xfe>
  40a9a6:	9e06      	ldr	r6, [sp, #24]
  40a9a8:	4630      	mov	r0, r6
  40a9aa:	4b81      	ldr	r3, [pc, #516]	; (40abb0 <map_normal+0x2bc>)
  40a9ac:	4798      	blx	r3
  40a9ae:	28f0      	cmp	r0, #240	; 0xf0
  40a9b0:	d91f      	bls.n	40a9f2 <map_normal+0xfe>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a9b2:	4631      	mov	r1, r6
  40a9b4:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40a9b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40a9bc:	f8dd a020 	ldr.w	sl, [sp, #32]
  40a9c0:	4689      	mov	r9, r1
  40a9c2:	46bb      	mov	fp, r7
  40a9c4:	e00e      	b.n	40a9e4 <map_normal+0xf0>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
  40a9c6:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  40a9ca:	f8cd b000 	str.w	fp, [sp]
  40a9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a9d0:	462a      	mov	r2, r5
  40a9d2:	4621      	mov	r1, r4
  40a9d4:	4640      	mov	r0, r8
  40a9d6:	47b8      	blx	r7
                disp_buf_first += disp_w;
  40a9d8:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40a9dc:	9b07      	ldr	r3, [sp, #28]
  40a9de:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40a9e2:	3601      	adds	r6, #1
  40a9e4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
  40a9e8:	429e      	cmp	r6, r3
  40a9ea:	ddec      	ble.n	40a9c6 <map_normal+0xd2>
}
  40a9ec:	b00f      	add	sp, #60	; 0x3c
  40a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(opa > LV_OPA_MAX) {
  40a9f2:	2ffd      	cmp	r7, #253	; 0xfd
  40a9f4:	d812      	bhi.n	40aa1c <map_normal+0x128>
  40a9f6:	f04f 0800 	mov.w	r8, #0
  40a9fa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40a9fe:	e069      	b.n	40aad4 <map_normal+0x1e0>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40aa00:	ea4f 0249 	mov.w	r2, r9, lsl #1
  40aa04:	4629      	mov	r1, r5
  40aa06:	4620      	mov	r0, r4
  40aa08:	4b6a      	ldr	r3, [pc, #424]	; (40abb4 <map_normal+0x2c0>)
  40aa0a:	4798      	blx	r3
                disp_buf_first += disp_w;
  40aa0c:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40aa10:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40aa14:	3601      	adds	r6, #1
  40aa16:	42be      	cmp	r6, r7
  40aa18:	dbf2      	blt.n	40aa00 <map_normal+0x10c>
  40aa1a:	e7e7      	b.n	40a9ec <map_normal+0xf8>
  40aa1c:	2600      	movs	r6, #0
  40aa1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40aa20:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40aa24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40aa28:	f8dd a020 	ldr.w	sl, [sp, #32]
  40aa2c:	e7f3      	b.n	40aa16 <map_normal+0x122>
  40aa2e:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
  40aa32:	f834 101c 	ldrh.w	r1, [r4, ip, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40aa36:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40aa3a:	f3c1 06c4 	ubfx	r6, r1, #3, #5
  40aa3e:	f1c7 00ff 	rsb	r0, r7, #255	; 0xff
  40aa42:	fb00 f606 	mul.w	r6, r0, r6
  40aa46:	fb07 6202 	mla	r2, r7, r2, r6
  40aa4a:	3280      	adds	r2, #128	; 0x80
  40aa4c:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40aa50:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40aa54:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40aa58:	f362 0ac7 	bfi	sl, r2, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40aa5c:	f003 0607 	and.w	r6, r3, #7
  40aa60:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40aa64:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  40aa68:	f001 0e07 	and.w	lr, r1, #7
  40aa6c:	f3c1 3642 	ubfx	r6, r1, #13, #3
  40aa70:	eb06 06ce 	add.w	r6, r6, lr, lsl #3
  40aa74:	fb06 f600 	mul.w	r6, r6, r0
  40aa78:	fb02 6207 	mla	r2, r2, r7, r6
  40aa7c:	3280      	adds	r2, #128	; 0x80
  40aa7e:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40aa82:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40aa86:	f3c2 6682 	ubfx	r6, r2, #26, #3
  40aa8a:	f366 0a02 	bfi	sl, r6, #0, #3
  40aa8e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40aa92:	f362 3a4f 	bfi	sl, r2, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40aa96:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40aa9a:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40aa9e:	fb01 f000 	mul.w	r0, r1, r0
  40aaa2:	fb03 0307 	mla	r3, r3, r7, r0
  40aaa6:	3380      	adds	r3, #128	; 0x80
  40aaa8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40aaac:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40aab0:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40aab4:	f363 2a0c 	bfi	sl, r3, #8, #5
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
  40aab8:	f824 a01c 	strh.w	sl, [r4, ip, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40aabc:	f10c 0c01 	add.w	ip, ip, #1
  40aac0:	45dc      	cmp	ip, fp
  40aac2:	dbb4      	blt.n	40aa2e <map_normal+0x13a>
                disp_buf_first += disp_w;
  40aac4:	9b08      	ldr	r3, [sp, #32]
  40aac6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                map_buf_first += map_w;
  40aaca:	9b07      	ldr	r3, [sp, #28]
  40aacc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40aad0:	f108 0801 	add.w	r8, r8, #1
  40aad4:	45c8      	cmp	r8, r9
  40aad6:	da89      	bge.n	40a9ec <map_normal+0xf8>
  40aad8:	f04f 0c00 	mov.w	ip, #0
  40aadc:	e7f0      	b.n	40aac0 <map_normal+0x1cc>
                    MAP_NORMAL_MASK_PX(x)
  40aade:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40aae2:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40aae6:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40aae8:	3301      	adds	r3, #1
  40aaea:	455b      	cmp	r3, fp
  40aaec:	f280 81e6 	bge.w	40aebc <map_normal+0x5c8>
  40aaf0:	f012 0f03 	tst.w	r2, #3
  40aaf4:	d04c      	beq.n	40ab90 <map_normal+0x29c>
                    MAP_NORMAL_MASK_PX(x)
  40aaf6:	7811      	ldrb	r1, [r2, #0]
  40aaf8:	2900      	cmp	r1, #0
  40aafa:	d0f4      	beq.n	40aae6 <map_normal+0x1f2>
  40aafc:	29ff      	cmp	r1, #255	; 0xff
  40aafe:	d0ee      	beq.n	40aade <map_normal+0x1ea>
  40ab00:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40ab04:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ab08:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40ab0c:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40ab10:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40ab14:	fb0e fc0c 	mul.w	ip, lr, ip
  40ab18:	fb01 c000 	mla	r0, r1, r0, ip
  40ab1c:	3080      	adds	r0, #128	; 0x80
  40ab1e:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40ab22:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40ab26:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ab2a:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ab2e:	f007 0c07 	and.w	ip, r7, #7
  40ab32:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40ab36:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40ab3a:	f006 0a07 	and.w	sl, r6, #7
  40ab3e:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40ab42:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40ab46:	fb0c fc0e 	mul.w	ip, ip, lr
  40ab4a:	fb00 c001 	mla	r0, r0, r1, ip
  40ab4e:	3080      	adds	r0, #128	; 0x80
  40ab50:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40ab54:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40ab58:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40ab5c:	f36c 0802 	bfi	r8, ip, #0, #3
  40ab60:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40ab64:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ab68:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40ab6c:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40ab70:	fb06 fe0e 	mul.w	lr, r6, lr
  40ab74:	fb07 e101 	mla	r1, r7, r1, lr
  40ab78:	3180      	adds	r1, #128	; 0x80
  40ab7a:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40ab7e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40ab82:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40ab86:	f361 280c 	bfi	r8, r1, #8, #5
  40ab8a:	f824 8013 	strh.w	r8, [r4, r3, lsl #1]
  40ab8e:	e7aa      	b.n	40aae6 <map_normal+0x1f2>
  40ab90:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40ab94:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40ab98:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40ab9c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40aba0:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40aba4:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40aba8:	e01b      	b.n	40abe2 <map_normal+0x2ee>
  40abaa:	bf00      	nop
  40abac:	00408ba9 	.word	0x00408ba9
  40abb0:	00414785 	.word	0x00414785
  40abb4:	0041597d 	.word	0x0041597d
                            disp_buf_first[x] = map_buf_first[x];
  40abb8:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40abbc:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
  40abc0:	1c59      	adds	r1, r3, #1
  40abc2:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40abc6:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
  40abca:	1c99      	adds	r1, r3, #2
  40abcc:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40abd0:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
  40abd4:	1cd9      	adds	r1, r3, #3
  40abd6:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40abda:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                    mask32++;
  40abde:	3204      	adds	r2, #4
                for(; x < x_end4; x += 4) {
  40abe0:	3304      	adds	r3, #4
  40abe2:	9903      	ldr	r1, [sp, #12]
  40abe4:	428b      	cmp	r3, r1
  40abe6:	f280 8176 	bge.w	40aed6 <map_normal+0x5e2>
                    if(*mask32) {
  40abea:	6811      	ldr	r1, [r2, #0]
  40abec:	2900      	cmp	r1, #0
  40abee:	d0f6      	beq.n	40abde <map_normal+0x2ea>
                        if((*mask32) == 0xFFFFFFFF) {
  40abf0:	f1b1 3fff 	cmp.w	r1, #4294967295
  40abf4:	d0e0      	beq.n	40abb8 <map_normal+0x2c4>
                            MAP_NORMAL_MASK_PX(x)
  40abf6:	7811      	ldrb	r1, [r2, #0]
  40abf8:	2900      	cmp	r1, #0
  40abfa:	d049      	beq.n	40ac90 <map_normal+0x39c>
  40abfc:	29ff      	cmp	r1, #255	; 0xff
  40abfe:	f000 8146 	beq.w	40ae8e <map_normal+0x59a>
  40ac02:	f835 c013 	ldrh.w	ip, [r5, r3, lsl #1]
  40ac06:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ac0a:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40ac0e:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40ac12:	f1c1 09ff 	rsb	r9, r1, #255	; 0xff
  40ac16:	fb09 f808 	mul.w	r8, r9, r8
  40ac1a:	fb01 8000 	mla	r0, r1, r0, r8
  40ac1e:	3080      	adds	r0, #128	; 0x80
  40ac20:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40ac24:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ac28:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ac2c:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ac30:	f00c 0807 	and.w	r8, ip, #7
  40ac34:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40ac38:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40ac3c:	f006 0707 	and.w	r7, r6, #7
  40ac40:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40ac44:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40ac48:	fb08 f809 	mul.w	r8, r8, r9
  40ac4c:	fb00 8001 	mla	r0, r0, r1, r8
  40ac50:	3080      	adds	r0, #128	; 0x80
  40ac52:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40ac56:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ac5a:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40ac5e:	f368 0e02 	bfi	lr, r8, #0, #3
  40ac62:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40ac66:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ac6a:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40ac6e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40ac72:	fb06 f609 	mul.w	r6, r6, r9
  40ac76:	fb0c 6601 	mla	r6, ip, r1, r6
  40ac7a:	3680      	adds	r6, #128	; 0x80
  40ac7c:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40ac80:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40ac84:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40ac88:	f366 2e0c 	bfi	lr, r6, #8, #5
  40ac8c:	f824 e013 	strh.w	lr, [r4, r3, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 1)
  40ac90:	7851      	ldrb	r1, [r2, #1]
  40ac92:	2900      	cmp	r1, #0
  40ac94:	d056      	beq.n	40ad44 <map_normal+0x450>
  40ac96:	29ff      	cmp	r1, #255	; 0xff
  40ac98:	f000 80fe 	beq.w	40ae98 <map_normal+0x5a4>
  40ac9c:	f103 0901 	add.w	r9, r3, #1
  40aca0:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40aca4:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40aca8:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40acac:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40acb0:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40acb4:	9705      	str	r7, [sp, #20]
  40acb6:	fb07 f808 	mul.w	r8, r7, r8
  40acba:	fb01 8000 	mla	r0, r1, r0, r8
  40acbe:	3080      	adds	r0, #128	; 0x80
  40acc0:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40acc4:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40acc8:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40accc:	9f04      	ldr	r7, [sp, #16]
  40acce:	f360 07c7 	bfi	r7, r0, #3, #5
  40acd2:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40acd4:	f00c 0807 	and.w	r8, ip, #7
  40acd8:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40acdc:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40ace0:	f006 0807 	and.w	r8, r6, #7
  40ace4:	4647      	mov	r7, r8
  40ace6:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40acea:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40acee:	9f05      	ldr	r7, [sp, #20]
  40acf0:	fb08 f807 	mul.w	r8, r8, r7
  40acf4:	fb00 8001 	mla	r0, r0, r1, r8
  40acf8:	3080      	adds	r0, #128	; 0x80
  40acfa:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40acfe:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ad02:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40ad06:	9f04      	ldr	r7, [sp, #16]
  40ad08:	f368 0702 	bfi	r7, r8, #0, #3
  40ad0c:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40ad10:	f360 374f 	bfi	r7, r0, #13, #3
  40ad14:	4638      	mov	r0, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ad16:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40ad1a:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40ad1e:	9f05      	ldr	r7, [sp, #20]
  40ad20:	fb06 f607 	mul.w	r6, r6, r7
  40ad24:	fb0c 6601 	mla	r6, ip, r1, r6
  40ad28:	3680      	adds	r6, #128	; 0x80
  40ad2a:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40ad2e:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40ad32:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40ad36:	4601      	mov	r1, r0
  40ad38:	f366 210c 	bfi	r1, r6, #8, #5
  40ad3c:	f8ad 1010 	strh.w	r1, [sp, #16]
  40ad40:	f824 1019 	strh.w	r1, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 2)
  40ad44:	7891      	ldrb	r1, [r2, #2]
  40ad46:	2900      	cmp	r1, #0
  40ad48:	d04e      	beq.n	40ade8 <map_normal+0x4f4>
  40ad4a:	29ff      	cmp	r1, #255	; 0xff
  40ad4c:	f000 80aa 	beq.w	40aea4 <map_normal+0x5b0>
  40ad50:	f103 0902 	add.w	r9, r3, #2
  40ad54:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40ad58:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ad5c:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40ad60:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40ad64:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40ad68:	9705      	str	r7, [sp, #20]
  40ad6a:	fb07 f808 	mul.w	r8, r7, r8
  40ad6e:	fb01 8000 	mla	r0, r1, r0, r8
  40ad72:	3080      	adds	r0, #128	; 0x80
  40ad74:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40ad78:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ad7c:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ad80:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ad84:	f00c 0807 	and.w	r8, ip, #7
  40ad88:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40ad8c:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40ad90:	f006 0807 	and.w	r8, r6, #7
  40ad94:	4647      	mov	r7, r8
  40ad96:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40ad9a:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40ad9e:	9f05      	ldr	r7, [sp, #20]
  40ada0:	fb08 f807 	mul.w	r8, r8, r7
  40ada4:	fb00 8001 	mla	r0, r0, r1, r8
  40ada8:	3080      	adds	r0, #128	; 0x80
  40adaa:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40adae:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40adb2:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40adb6:	f368 0a02 	bfi	sl, r8, #0, #3
  40adba:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40adbe:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40adc2:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40adc6:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40adca:	fb06 f607 	mul.w	r6, r6, r7
  40adce:	fb0c 6601 	mla	r6, ip, r1, r6
  40add2:	3680      	adds	r6, #128	; 0x80
  40add4:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40add8:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40addc:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40ade0:	f366 2a0c 	bfi	sl, r6, #8, #5
  40ade4:	f824 a019 	strh.w	sl, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 3)
  40ade8:	78d1      	ldrb	r1, [r2, #3]
  40adea:	2900      	cmp	r1, #0
  40adec:	f43f aef7 	beq.w	40abde <map_normal+0x2ea>
  40adf0:	29ff      	cmp	r1, #255	; 0xff
  40adf2:	d05d      	beq.n	40aeb0 <map_normal+0x5bc>
  40adf4:	f103 0903 	add.w	r9, r3, #3
  40adf8:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40adfc:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ae00:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40ae04:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40ae08:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40ae0c:	9705      	str	r7, [sp, #20]
  40ae0e:	fb07 f808 	mul.w	r8, r7, r8
  40ae12:	fb01 8000 	mla	r0, r1, r0, r8
  40ae16:	3080      	adds	r0, #128	; 0x80
  40ae18:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40ae1c:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ae20:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ae24:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ae28:	f00c 0807 	and.w	r8, ip, #7
  40ae2c:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40ae30:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40ae34:	f006 0807 	and.w	r8, r6, #7
  40ae38:	4647      	mov	r7, r8
  40ae3a:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40ae3e:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40ae42:	9f05      	ldr	r7, [sp, #20]
  40ae44:	fb08 f807 	mul.w	r8, r8, r7
  40ae48:	fb00 8001 	mla	r0, r0, r1, r8
  40ae4c:	3080      	adds	r0, #128	; 0x80
  40ae4e:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40ae52:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ae56:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40ae5a:	f368 0b02 	bfi	fp, r8, #0, #3
  40ae5e:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40ae62:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ae66:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40ae6a:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40ae6e:	fb06 f607 	mul.w	r6, r6, r7
  40ae72:	fb0c 6601 	mla	r6, ip, r1, r6
  40ae76:	3680      	adds	r6, #128	; 0x80
  40ae78:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40ae7c:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40ae80:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40ae84:	f366 2b0c 	bfi	fp, r6, #8, #5
  40ae88:	f824 b019 	strh.w	fp, [r4, r9, lsl #1]
  40ae8c:	e6a7      	b.n	40abde <map_normal+0x2ea>
                            MAP_NORMAL_MASK_PX(x)
  40ae8e:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40ae92:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40ae96:	e6fb      	b.n	40ac90 <map_normal+0x39c>
                            MAP_NORMAL_MASK_PX(x + 1)
  40ae98:	1c59      	adds	r1, r3, #1
  40ae9a:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40ae9e:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40aea2:	e74f      	b.n	40ad44 <map_normal+0x450>
                            MAP_NORMAL_MASK_PX(x + 2)
  40aea4:	1c99      	adds	r1, r3, #2
  40aea6:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40aeaa:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40aeae:	e79b      	b.n	40ade8 <map_normal+0x4f4>
                            MAP_NORMAL_MASK_PX(x + 3)
  40aeb0:	1cd9      	adds	r1, r3, #3
  40aeb2:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40aeb6:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40aeba:	e690      	b.n	40abde <map_normal+0x2ea>
  40aebc:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40aec0:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40aec4:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40aec8:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40aecc:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40aed0:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40aed4:	e685      	b.n	40abe2 <map_normal+0x2ee>
  40aed6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  40aeda:	f8ad b014 	strh.w	fp, [sp, #20]
  40aede:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40aee2:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
  40aee6:	f8ad e02e 	strh.w	lr, [sp, #46]	; 0x2e
  40aeea:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
  40aeee:	e005      	b.n	40aefc <map_normal+0x608>
                    MAP_NORMAL_MASK_PX(x)
  40aef0:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40aef4:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40aef8:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40aefa:	3301      	adds	r3, #1
  40aefc:	455b      	cmp	r3, fp
  40aefe:	da4c      	bge.n	40af9a <map_normal+0x6a6>
                    MAP_NORMAL_MASK_PX(x)
  40af00:	7811      	ldrb	r1, [r2, #0]
  40af02:	2900      	cmp	r1, #0
  40af04:	d0f8      	beq.n	40aef8 <map_normal+0x604>
  40af06:	29ff      	cmp	r1, #255	; 0xff
  40af08:	d0f2      	beq.n	40aef0 <map_normal+0x5fc>
  40af0a:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40af0e:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40af12:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40af16:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40af1a:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40af1e:	fb0e fc0c 	mul.w	ip, lr, ip
  40af22:	fb01 c000 	mla	r0, r1, r0, ip
  40af26:	3080      	adds	r0, #128	; 0x80
  40af28:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40af2c:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40af30:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40af34:	f360 09c7 	bfi	r9, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40af38:	f007 0c07 	and.w	ip, r7, #7
  40af3c:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40af40:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40af44:	f006 0a07 	and.w	sl, r6, #7
  40af48:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40af4c:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40af50:	fb0c fc0e 	mul.w	ip, ip, lr
  40af54:	fb00 c001 	mla	r0, r0, r1, ip
  40af58:	3080      	adds	r0, #128	; 0x80
  40af5a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40af5e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40af62:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40af66:	f36c 0902 	bfi	r9, ip, #0, #3
  40af6a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40af6e:	f360 394f 	bfi	r9, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40af72:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40af76:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40af7a:	fb06 fe0e 	mul.w	lr, r6, lr
  40af7e:	fb07 e101 	mla	r1, r7, r1, lr
  40af82:	3180      	adds	r1, #128	; 0x80
  40af84:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40af88:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40af8c:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40af90:	f361 290c 	bfi	r9, r1, #8, #5
  40af94:	f824 9013 	strh.w	r9, [r4, r3, lsl #1]
  40af98:	e7ae      	b.n	40aef8 <map_normal+0x604>
                disp_buf_first += disp_w;
  40af9a:	9b08      	ldr	r3, [sp, #32]
  40af9c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40afa0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40afa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40afa4:	4413      	add	r3, r2
  40afa6:	931a      	str	r3, [sp, #104]	; 0x68
                map_buf_first += map_w;
  40afa8:	9b07      	ldr	r3, [sp, #28]
  40afaa:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40afae:	9b06      	ldr	r3, [sp, #24]
  40afb0:	3301      	adds	r3, #1
  40afb2:	9306      	str	r3, [sp, #24]
  40afb4:	9b06      	ldr	r3, [sp, #24]
  40afb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40afb8:	4293      	cmp	r3, r2
  40afba:	f6bf ad17 	bge.w	40a9ec <map_normal+0xf8>
  40afbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40afc0:	2300      	movs	r3, #0
  40afc2:	e592      	b.n	40aaea <map_normal+0x1f6>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40afc4:	9b03      	ldr	r3, [sp, #12]
  40afc6:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
  40afca:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40afce:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  40afd2:	f3c1 07c4 	ubfx	r7, r1, #3, #5
  40afd6:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  40afda:	fb0c f707 	mul.w	r7, ip, r7
  40afde:	fb03 7202 	mla	r2, r3, r2, r7
  40afe2:	3280      	adds	r2, #128	; 0x80
  40afe4:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40afe8:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40afec:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40aff0:	f362 06c7 	bfi	r6, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40aff4:	f000 0707 	and.w	r7, r0, #7
  40aff8:	f3c0 3242 	ubfx	r2, r0, #13, #3
  40affc:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
  40b000:	f001 0907 	and.w	r9, r1, #7
  40b004:	f3c1 3742 	ubfx	r7, r1, #13, #3
  40b008:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
  40b00c:	fb07 f70c 	mul.w	r7, r7, ip
  40b010:	fb02 7203 	mla	r2, r2, r3, r7
  40b014:	3280      	adds	r2, #128	; 0x80
  40b016:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40b01a:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40b01e:	f3c2 6782 	ubfx	r7, r2, #26, #3
  40b022:	f367 0602 	bfi	r6, r7, #0, #3
  40b026:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40b02a:	f362 364f 	bfi	r6, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b02e:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40b032:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40b036:	fb01 fc0c 	mul.w	ip, r1, ip
  40b03a:	fb00 c303 	mla	r3, r0, r3, ip
  40b03e:	3380      	adds	r3, #128	; 0x80
  40b040:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  40b044:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  40b048:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b04c:	f363 260c 	bfi	r6, r3, #8, #5
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
  40b050:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40b054:	f108 0801 	add.w	r8, r8, #1
  40b058:	45d8      	cmp	r8, fp
  40b05a:	da0c      	bge.n	40b076 <map_normal+0x782>
                    if(mask[x]) {
  40b05c:	46c6      	mov	lr, r8
  40b05e:	f81a 3008 	ldrb.w	r3, [sl, r8]
  40b062:	2b00      	cmp	r3, #0
  40b064:	d0f6      	beq.n	40b054 <map_normal+0x760>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40b066:	2bfc      	cmp	r3, #252	; 0xfc
  40b068:	d8ac      	bhi.n	40afc4 <map_normal+0x6d0>
  40b06a:	9a03      	ldr	r2, [sp, #12]
  40b06c:	fb03 f302 	mul.w	r3, r3, r2
  40b070:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b074:	e7a7      	b.n	40afc6 <map_normal+0x6d2>
                disp_buf_first += disp_w;
  40b076:	9b08      	ldr	r3, [sp, #32]
  40b078:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40b07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b07e:	449a      	add	sl, r3
                map_buf_first += map_w;
  40b080:	9b07      	ldr	r3, [sp, #28]
  40b082:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b086:	9b04      	ldr	r3, [sp, #16]
  40b088:	3301      	adds	r3, #1
  40b08a:	9304      	str	r3, [sp, #16]
  40b08c:	9b04      	ldr	r3, [sp, #16]
  40b08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b090:	4293      	cmp	r3, r2
  40b092:	f6bf acab 	bge.w	40a9ec <map_normal+0xf8>
  40b096:	f04f 0800 	mov.w	r8, #0
  40b09a:	e7dd      	b.n	40b058 <map_normal+0x764>
  40b09c:	2300      	movs	r3, #0
  40b09e:	9304      	str	r3, [sp, #16]
  40b0a0:	9703      	str	r7, [sp, #12]
  40b0a2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  40b0a6:	e7f1      	b.n	40b08c <map_normal+0x798>

0040b0a8 <fill_normal>:
{
  40b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b0ac:	b091      	sub	sp, #68	; 0x44
  40b0ae:	4605      	mov	r5, r0
  40b0b0:	9103      	str	r1, [sp, #12]
  40b0b2:	4616      	mov	r6, r2
  40b0b4:	920a      	str	r2, [sp, #40]	; 0x28
  40b0b6:	461c      	mov	r4, r3
  40b0b8:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40b0bc:	9006      	str	r0, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b0be:	4bc5      	ldr	r3, [pc, #788]	; (40b3d4 <fill_normal+0x32c>)
  40b0c0:	4798      	blx	r3
  40b0c2:	900b      	str	r0, [sp, #44]	; 0x2c
  40b0c4:	88ab      	ldrh	r3, [r5, #4]
  40b0c6:	882a      	ldrh	r2, [r5, #0]
  40b0c8:	1a9b      	subs	r3, r3, r2
  40b0ca:	b29b      	uxth	r3, r3
  40b0cc:	3301      	adds	r3, #1
  40b0ce:	b218      	sxth	r0, r3
  40b0d0:	4605      	mov	r5, r0
  40b0d2:	9008      	str	r0, [sp, #32]
  40b0d4:	88b3      	ldrh	r3, [r6, #4]
  40b0d6:	4630      	mov	r0, r6
  40b0d8:	f9b6 1000 	ldrsh.w	r1, [r6]
  40b0dc:	b28a      	uxth	r2, r1
  40b0de:	1a9b      	subs	r3, r3, r2
  40b0e0:	b29b      	uxth	r3, r3
  40b0e2:	3301      	adds	r3, #1
  40b0e4:	b21b      	sxth	r3, r3
  40b0e6:	9307      	str	r3, [sp, #28]
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40b0e8:	461e      	mov	r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b0ea:	88c3      	ldrh	r3, [r0, #6]
  40b0ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  40b0f0:	b290      	uxth	r0, r2
  40b0f2:	1a1b      	subs	r3, r3, r0
  40b0f4:	b29b      	uxth	r3, r3
  40b0f6:	3301      	adds	r3, #1
  40b0f8:	b21b      	sxth	r3, r3
  40b0fa:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40b0fc:	4696      	mov	lr, r2
  40b0fe:	fb02 1205 	mla	r2, r2, r5, r1
  40b102:	9b03      	ldr	r3, [sp, #12]
  40b104:	eb03 0542 	add.w	r5, r3, r2, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b108:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  40b10c:	2b01      	cmp	r3, #1
  40b10e:	d00f      	beq.n	40b130 <fill_normal+0x88>
        last_dest_color.full = disp_buf_first[0].full;
  40b110:	9b03      	ldr	r3, [sp, #12]
  40b112:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40b116:	461a      	mov	r2, r3
        int32_t x_end4 = draw_area_w - 4;
  40b118:	9907      	ldr	r1, [sp, #28]
  40b11a:	3904      	subs	r1, #4
  40b11c:	9103      	str	r1, [sp, #12]
        if(opa > LV_OPA_MAX) {
  40b11e:	9906      	ldr	r1, [sp, #24]
  40b120:	29fd      	cmp	r1, #253	; 0xfd
  40b122:	f200 8335 	bhi.w	40b790 <fill_normal+0x6e8>
  40b126:	f04f 0800 	mov.w	r8, #0
  40b12a:	4641      	mov	r1, r8
  40b12c:	46a3      	mov	fp, r4
  40b12e:	e3a7      	b.n	40b880 <fill_normal+0x7d8>
        if(opa > LV_OPA_MAX) {
  40b130:	9b06      	ldr	r3, [sp, #24]
  40b132:	2bfd      	cmp	r3, #253	; 0xfd
  40b134:	d922      	bls.n	40b17c <fill_normal+0xd4>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40b136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40b13a:	b123      	cbz	r3, 40b146 <fill_normal+0x9e>
  40b13c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b13e:	4ba6      	ldr	r3, [pc, #664]	; (40b3d8 <fill_normal+0x330>)
  40b140:	4798      	blx	r3
  40b142:	28f0      	cmp	r0, #240	; 0xf0
  40b144:	d804      	bhi.n	40b150 <fill_normal+0xa8>
{
  40b146:	2600      	movs	r6, #0
  40b148:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40b14a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40b14e:	e010      	b.n	40b172 <fill_normal+0xca>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
  40b150:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40b152:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  40b154:	f8ad 4000 	strh.w	r4, [sp]
  40b158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b15a:	9a08      	ldr	r2, [sp, #32]
  40b15c:	9903      	ldr	r1, [sp, #12]
  40b15e:	47a8      	blx	r5
                return;
  40b160:	e009      	b.n	40b176 <fill_normal+0xce>
                lv_color_fill(disp_buf_first, color, draw_area_w);
  40b162:	9a07      	ldr	r2, [sp, #28]
  40b164:	4621      	mov	r1, r4
  40b166:	4628      	mov	r0, r5
  40b168:	4b9c      	ldr	r3, [pc, #624]	; (40b3dc <fill_normal+0x334>)
  40b16a:	4798      	blx	r3
                disp_buf_first += disp_w;
  40b16c:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b170:	3601      	adds	r6, #1
  40b172:	42be      	cmp	r6, r7
  40b174:	dbf5      	blt.n	40b162 <fill_normal+0xba>
}
  40b176:	b011      	add	sp, #68	; 0x44
  40b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40b17c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40b180:	b123      	cbz	r3, 40b18c <fill_normal+0xe4>
  40b182:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b184:	4b94      	ldr	r3, [pc, #592]	; (40b3d8 <fill_normal+0x330>)
  40b186:	4798      	blx	r3
  40b188:	28f0      	cmp	r0, #240	; 0xf0
  40b18a:	d864      	bhi.n	40b256 <fill_normal+0x1ae>
            lv_color_t last_dest_color = LV_COLOR_BLACK;
  40b18c:	f04f 0e00 	mov.w	lr, #0
  40b190:	4670      	mov	r0, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b192:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40b196:	9f06      	ldr	r7, [sp, #24]
  40b198:	fb07 f303 	mul.w	r3, r7, r3
  40b19c:	3380      	adds	r3, #128	; 0x80
  40b19e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b1a2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b1a6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b1aa:	f04f 0200 	mov.w	r2, #0
  40b1ae:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b1b2:	f004 0107 	and.w	r1, r4, #7
  40b1b6:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40b1ba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40b1be:	fb03 f307 	mul.w	r3, r3, r7
  40b1c2:	3380      	adds	r3, #128	; 0x80
  40b1c4:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40b1c8:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40b1cc:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40b1d0:	f361 0202 	bfi	r2, r1, #0, #3
  40b1d4:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40b1d8:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b1dc:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40b1e0:	fb03 f307 	mul.w	r3, r3, r7
  40b1e4:	3380      	adds	r3, #128	; 0x80
  40b1e6:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40b1ea:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40b1ee:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b1f2:	f363 220c 	bfi	r2, r3, #8, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40b1f6:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  40b1fa:	46bc      	mov	ip, r7
  40b1fc:	b2bb      	uxth	r3, r7
  40b1fe:	fb01 f103 	mul.w	r1, r1, r3
  40b202:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40b206:	f004 0707 	and.w	r7, r4, #7
  40b20a:	f3c4 3142 	ubfx	r1, r4, #13, #3
  40b20e:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40b212:	fb13 f101 	smulbb	r1, r3, r1
  40b216:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40b21a:	f3c4 2404 	ubfx	r4, r4, #8, #5
  40b21e:	fb03 f304 	mul.w	r3, r3, r4
  40b222:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            lv_opa_t opa_inv = 255 - opa;
  40b226:	4661      	mov	r1, ip
  40b228:	43cc      	mvns	r4, r1
  40b22a:	b2e4      	uxtb	r4, r4
  40b22c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40b230:	f8dd 8020 	ldr.w	r8, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
  40b234:	e069      	b.n	40b30a <fill_normal+0x262>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
  40b236:	4a6a      	ldr	r2, [pc, #424]	; (40b3e0 <fill_normal+0x338>)
  40b238:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
  40b23c:	3301      	adds	r3, #1
  40b23e:	42b3      	cmp	r3, r6
  40b240:	dbf9      	blt.n	40b236 <fill_normal+0x18e>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b244:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  40b248:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40b24a:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40b24e:	4690      	mov	r8, r2
  40b250:	f8dd a018 	ldr.w	sl, [sp, #24]
  40b254:	e00c      	b.n	40b270 <fill_normal+0x1c8>
  40b256:	2300      	movs	r3, #0
  40b258:	e7f1      	b.n	40b23e <fill_normal+0x196>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
  40b25a:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  40b25c:	f8cd a000 	str.w	sl, [sp]
  40b260:	9b07      	ldr	r3, [sp, #28]
  40b262:	4a5f      	ldr	r2, [pc, #380]	; (40b3e0 <fill_normal+0x338>)
  40b264:	4629      	mov	r1, r5
  40b266:	4630      	mov	r0, r6
  40b268:	47b8      	blx	r7
                    disp_buf_first += disp_w;
  40b26a:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b26e:	3401      	adds	r4, #1
  40b270:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40b274:	429c      	cmp	r4, r3
  40b276:	ddf0      	ble.n	40b25a <fill_normal+0x1b2>
  40b278:	e77d      	b.n	40b176 <fill_normal+0xce>
                    disp_buf_first[x] = last_res_color;
  40b27a:	803a      	strh	r2, [r7, #0]
                for(x = 0; x < draw_area_w; x++) {
  40b27c:	3101      	adds	r1, #1
  40b27e:	42b1      	cmp	r1, r6
  40b280:	da3f      	bge.n	40b302 <fill_normal+0x25a>
                    if(last_dest_color.full != disp_buf_first[x].full) {
  40b282:	b283      	uxth	r3, r0
  40b284:	eb05 0741 	add.w	r7, r5, r1, lsl #1
  40b288:	f835 9011 	ldrh.w	r9, [r5, r1, lsl #1]
  40b28c:	454b      	cmp	r3, r9
  40b28e:	d0f4      	beq.n	40b27a <fill_normal+0x1d2>
                        last_dest_color = disp_buf_first[x];
  40b290:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40b294:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  40b298:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40b29c:	fb04 2303 	mla	r3, r4, r3, r2
  40b2a0:	3380      	adds	r3, #128	; 0x80
  40b2a2:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b2a6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b2aa:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b2ae:	f363 0ac7 	bfi	sl, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40b2b2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  40b2b6:	f000 0907 	and.w	r9, r0, #7
  40b2ba:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40b2be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40b2c2:	fb03 2304 	mla	r3, r3, r4, r2
  40b2c6:	3380      	adds	r3, #128	; 0x80
  40b2c8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b2cc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b2d0:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40b2d4:	f362 0a02 	bfi	sl, r2, #0, #3
  40b2d8:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40b2dc:	f363 3a4f 	bfi	sl, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40b2e0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  40b2e4:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40b2e8:	fb03 2304 	mla	r3, r3, r4, r2
  40b2ec:	3380      	adds	r3, #128	; 0x80
  40b2ee:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b2f2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b2f6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b2fa:	f363 2a0c 	bfi	sl, r3, #8, #5
  40b2fe:	4652      	mov	r2, sl
  40b300:	e7bb      	b.n	40b27a <fill_normal+0x1d2>
                disp_buf_first += disp_w;
  40b302:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b306:	f10e 0e01 	add.w	lr, lr, #1
  40b30a:	45e6      	cmp	lr, ip
  40b30c:	f6bf af33 	bge.w	40b176 <fill_normal+0xce>
  40b310:	2100      	movs	r1, #0
  40b312:	e7b4      	b.n	40b27e <fill_normal+0x1d6>
                    FILL_NORMAL_MASK_PX(x, color)
  40b314:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40b318:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40b31a:	3301      	adds	r3, #1
  40b31c:	42b3      	cmp	r3, r6
  40b31e:	f280 81c0 	bge.w	40b6a2 <fill_normal+0x5fa>
  40b322:	f012 0f03 	tst.w	r2, #3
  40b326:	d04a      	beq.n	40b3be <fill_normal+0x316>
                    FILL_NORMAL_MASK_PX(x, color)
  40b328:	7811      	ldrb	r1, [r2, #0]
  40b32a:	2900      	cmp	r1, #0
  40b32c:	d0f4      	beq.n	40b318 <fill_normal+0x270>
  40b32e:	29ff      	cmp	r1, #255	; 0xff
  40b330:	d0f0      	beq.n	40b314 <fill_normal+0x26c>
  40b332:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b336:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40b33a:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40b33e:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40b342:	fb0c f909 	mul.w	r9, ip, r9
  40b346:	fb01 9000 	mla	r0, r1, r0, r9
  40b34a:	3080      	adds	r0, #128	; 0x80
  40b34c:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40b350:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40b354:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b358:	f360 07c7 	bfi	r7, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b35c:	f004 0007 	and.w	r0, r4, #7
  40b360:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40b364:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40b368:	f00e 0a07 	and.w	sl, lr, #7
  40b36c:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40b370:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40b374:	fb09 f90c 	mul.w	r9, r9, ip
  40b378:	fb00 9001 	mla	r0, r0, r1, r9
  40b37c:	3080      	adds	r0, #128	; 0x80
  40b37e:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40b382:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40b386:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40b38a:	f369 0702 	bfi	r7, r9, #0, #3
  40b38e:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b392:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b396:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40b39a:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40b39e:	fb0e fc0c 	mul.w	ip, lr, ip
  40b3a2:	fb00 c101 	mla	r1, r0, r1, ip
  40b3a6:	3180      	adds	r1, #128	; 0x80
  40b3a8:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b3ac:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b3b0:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b3b4:	f361 270c 	bfi	r7, r1, #8, #5
  40b3b8:	f825 7013 	strh.w	r7, [r5, r3, lsl #1]
  40b3bc:	e7ac      	b.n	40b318 <fill_normal+0x270>
  40b3be:	960a      	str	r6, [sp, #40]	; 0x28
  40b3c0:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40b3c4:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40b3c8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40b3cc:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40b3d0:	e015      	b.n	40b3fe <fill_normal+0x356>
  40b3d2:	bf00      	nop
  40b3d4:	00408ba9 	.word	0x00408ba9
  40b3d8:	00414785 	.word	0x00414785
  40b3dc:	00414f23 	.word	0x00414f23
  40b3e0:	2040c398 	.word	0x2040c398
                            disp_buf_first[x] = color;
  40b3e4:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
                            disp_buf_first[x + 1] = color;
  40b3e8:	1c59      	adds	r1, r3, #1
  40b3ea:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 2] = color;
  40b3ee:	1c99      	adds	r1, r3, #2
  40b3f0:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 3] = color;
  40b3f4:	1cd9      	adds	r1, r3, #3
  40b3f6:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                    mask32++;
  40b3fa:	3204      	adds	r2, #4
                for(; x <= x_end4; x += 4) {
  40b3fc:	3304      	adds	r3, #4
  40b3fe:	9903      	ldr	r1, [sp, #12]
  40b400:	428b      	cmp	r3, r1
  40b402:	f300 8158 	bgt.w	40b6b6 <fill_normal+0x60e>
                    if(*mask32) {
  40b406:	6811      	ldr	r1, [r2, #0]
  40b408:	2900      	cmp	r1, #0
  40b40a:	d0f6      	beq.n	40b3fa <fill_normal+0x352>
                        if((*mask32) == 0xFFFFFFFF) {
  40b40c:	f1b1 3fff 	cmp.w	r1, #4294967295
  40b410:	d0e8      	beq.n	40b3e4 <fill_normal+0x33c>
                            FILL_NORMAL_MASK_PX(x, color)
  40b412:	7811      	ldrb	r1, [r2, #0]
  40b414:	2900      	cmp	r1, #0
  40b416:	d047      	beq.n	40b4a8 <fill_normal+0x400>
  40b418:	29ff      	cmp	r1, #255	; 0xff
  40b41a:	f000 8133 	beq.w	40b684 <fill_normal+0x5dc>
  40b41e:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b422:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40b426:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b42a:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40b42e:	fb08 fc0c 	mul.w	ip, r8, ip
  40b432:	fb01 c000 	mla	r0, r1, r0, ip
  40b436:	3080      	adds	r0, #128	; 0x80
  40b438:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b43c:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b440:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b444:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b448:	f004 0007 	and.w	r0, r4, #7
  40b44c:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40b450:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40b454:	f006 0907 	and.w	r9, r6, #7
  40b458:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b45c:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
  40b460:	fb0c fc08 	mul.w	ip, ip, r8
  40b464:	fb00 c001 	mla	r0, r0, r1, ip
  40b468:	3080      	adds	r0, #128	; 0x80
  40b46a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b46e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b472:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b476:	f36c 0e02 	bfi	lr, ip, #0, #3
  40b47a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b47e:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b482:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40b486:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b48a:	fb06 f608 	mul.w	r6, r6, r8
  40b48e:	fb00 6601 	mla	r6, r0, r1, r6
  40b492:	3680      	adds	r6, #128	; 0x80
  40b494:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40b498:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
  40b49c:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b4a0:	f366 2e0c 	bfi	lr, r6, #8, #5
  40b4a4:	f825 e013 	strh.w	lr, [r5, r3, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40b4a8:	7851      	ldrb	r1, [r2, #1]
  40b4aa:	2900      	cmp	r1, #0
  40b4ac:	d04f      	beq.n	40b54e <fill_normal+0x4a6>
  40b4ae:	29ff      	cmp	r1, #255	; 0xff
  40b4b0:	f000 80eb 	beq.w	40b68a <fill_normal+0x5e2>
  40b4b4:	f103 0901 	add.w	r9, r3, #1
  40b4b8:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b4bc:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40b4c0:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b4c4:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40b4c8:	fb08 fc0c 	mul.w	ip, r8, ip
  40b4cc:	fb01 c000 	mla	r0, r1, r0, ip
  40b4d0:	3080      	adds	r0, #128	; 0x80
  40b4d2:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b4d6:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b4da:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b4de:	9f04      	ldr	r7, [sp, #16]
  40b4e0:	f360 07c7 	bfi	r7, r0, #3, #5
  40b4e4:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b4e6:	f004 0007 	and.w	r0, r4, #7
  40b4ea:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40b4ee:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40b4f2:	f006 0707 	and.w	r7, r6, #7
  40b4f6:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b4fa:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40b4fe:	fb0c fc08 	mul.w	ip, ip, r8
  40b502:	fb00 c001 	mla	r0, r0, r1, ip
  40b506:	3080      	adds	r0, #128	; 0x80
  40b508:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b50c:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b510:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b514:	9f04      	ldr	r7, [sp, #16]
  40b516:	f36c 0702 	bfi	r7, ip, #0, #3
  40b51a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b51e:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b522:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40b526:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b52a:	fb06 f608 	mul.w	r6, r6, r8
  40b52e:	fb00 6601 	mla	r6, r0, r1, r6
  40b532:	3680      	adds	r6, #128	; 0x80
  40b534:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40b538:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40b53c:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b540:	4639      	mov	r1, r7
  40b542:	f360 210c 	bfi	r1, r0, #8, #5
  40b546:	f8ad 1010 	strh.w	r1, [sp, #16]
  40b54a:	f825 1019 	strh.w	r1, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40b54e:	7891      	ldrb	r1, [r2, #2]
  40b550:	2900      	cmp	r1, #0
  40b552:	d049      	beq.n	40b5e8 <fill_normal+0x540>
  40b554:	29ff      	cmp	r1, #255	; 0xff
  40b556:	f000 809c 	beq.w	40b692 <fill_normal+0x5ea>
  40b55a:	f103 0902 	add.w	r9, r3, #2
  40b55e:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b562:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40b566:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b56a:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40b56e:	fb08 fc0c 	mul.w	ip, r8, ip
  40b572:	fb01 c000 	mla	r0, r1, r0, ip
  40b576:	3080      	adds	r0, #128	; 0x80
  40b578:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b57c:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b580:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b584:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b588:	f004 0007 	and.w	r0, r4, #7
  40b58c:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40b590:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40b594:	f006 0707 	and.w	r7, r6, #7
  40b598:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b59c:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40b5a0:	fb0c fc08 	mul.w	ip, ip, r8
  40b5a4:	fb00 c001 	mla	r0, r0, r1, ip
  40b5a8:	3080      	adds	r0, #128	; 0x80
  40b5aa:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b5ae:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b5b2:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b5b6:	f36c 0a02 	bfi	sl, ip, #0, #3
  40b5ba:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b5be:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b5c2:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40b5c6:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b5ca:	fb06 f608 	mul.w	r6, r6, r8
  40b5ce:	fb00 6601 	mla	r6, r0, r1, r6
  40b5d2:	3680      	adds	r6, #128	; 0x80
  40b5d4:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40b5d8:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40b5dc:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b5e0:	f360 2a0c 	bfi	sl, r0, #8, #5
  40b5e4:	f825 a019 	strh.w	sl, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40b5e8:	78d1      	ldrb	r1, [r2, #3]
  40b5ea:	2900      	cmp	r1, #0
  40b5ec:	f43f af05 	beq.w	40b3fa <fill_normal+0x352>
  40b5f0:	29ff      	cmp	r1, #255	; 0xff
  40b5f2:	d052      	beq.n	40b69a <fill_normal+0x5f2>
  40b5f4:	f103 0903 	add.w	r9, r3, #3
  40b5f8:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b5fc:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40b600:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b604:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40b608:	fb08 fc0c 	mul.w	ip, r8, ip
  40b60c:	fb01 c000 	mla	r0, r1, r0, ip
  40b610:	3080      	adds	r0, #128	; 0x80
  40b612:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b616:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b61a:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b61e:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b622:	f004 0007 	and.w	r0, r4, #7
  40b626:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40b62a:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40b62e:	f006 0707 	and.w	r7, r6, #7
  40b632:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b636:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40b63a:	fb0c fc08 	mul.w	ip, ip, r8
  40b63e:	fb00 c001 	mla	r0, r0, r1, ip
  40b642:	3080      	adds	r0, #128	; 0x80
  40b644:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b648:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b64c:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b650:	f36c 0b02 	bfi	fp, ip, #0, #3
  40b654:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b658:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b65c:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40b660:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b664:	fb06 f608 	mul.w	r6, r6, r8
  40b668:	fb00 6601 	mla	r6, r0, r1, r6
  40b66c:	3680      	adds	r6, #128	; 0x80
  40b66e:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40b672:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40b676:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b67a:	f360 2b0c 	bfi	fp, r0, #8, #5
  40b67e:	f825 b019 	strh.w	fp, [r5, r9, lsl #1]
  40b682:	e6ba      	b.n	40b3fa <fill_normal+0x352>
                            FILL_NORMAL_MASK_PX(x, color)
  40b684:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40b688:	e70e      	b.n	40b4a8 <fill_normal+0x400>
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40b68a:	1c59      	adds	r1, r3, #1
  40b68c:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40b690:	e75d      	b.n	40b54e <fill_normal+0x4a6>
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40b692:	1c99      	adds	r1, r3, #2
  40b694:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40b698:	e7a6      	b.n	40b5e8 <fill_normal+0x540>
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40b69a:	1cd9      	adds	r1, r3, #3
  40b69c:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40b6a0:	e6ab      	b.n	40b3fa <fill_normal+0x352>
  40b6a2:	960a      	str	r6, [sp, #40]	; 0x28
  40b6a4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40b6a8:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40b6ac:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40b6b0:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40b6b4:	e6a3      	b.n	40b3fe <fill_normal+0x356>
  40b6b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40b6b8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40b6bc:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
  40b6c0:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
  40b6c4:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
  40b6c8:	e003      	b.n	40b6d2 <fill_normal+0x62a>
                    FILL_NORMAL_MASK_PX(x, color)
  40b6ca:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40b6ce:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40b6d0:	3301      	adds	r3, #1
  40b6d2:	42b3      	cmp	r3, r6
  40b6d4:	da4a      	bge.n	40b76c <fill_normal+0x6c4>
                    FILL_NORMAL_MASK_PX(x, color)
  40b6d6:	7811      	ldrb	r1, [r2, #0]
  40b6d8:	2900      	cmp	r1, #0
  40b6da:	d0f8      	beq.n	40b6ce <fill_normal+0x626>
  40b6dc:	29ff      	cmp	r1, #255	; 0xff
  40b6de:	d0f4      	beq.n	40b6ca <fill_normal+0x622>
  40b6e0:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b6e4:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40b6e8:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40b6ec:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40b6f0:	fb0c f909 	mul.w	r9, ip, r9
  40b6f4:	fb01 9000 	mla	r0, r1, r0, r9
  40b6f8:	3080      	adds	r0, #128	; 0x80
  40b6fa:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40b6fe:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40b702:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b706:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b70a:	f004 0007 	and.w	r0, r4, #7
  40b70e:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40b712:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40b716:	f00e 0a07 	and.w	sl, lr, #7
  40b71a:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40b71e:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40b722:	fb09 f90c 	mul.w	r9, r9, ip
  40b726:	fb00 9001 	mla	r0, r0, r1, r9
  40b72a:	3080      	adds	r0, #128	; 0x80
  40b72c:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40b730:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40b734:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40b738:	f369 0802 	bfi	r8, r9, #0, #3
  40b73c:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b740:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b744:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40b748:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40b74c:	fb0e fc0c 	mul.w	ip, lr, ip
  40b750:	fb00 c101 	mla	r1, r0, r1, ip
  40b754:	3180      	adds	r1, #128	; 0x80
  40b756:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b75a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b75e:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b762:	f361 280c 	bfi	r8, r1, #8, #5
  40b766:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
  40b76a:	e7b0      	b.n	40b6ce <fill_normal+0x626>
                disp_buf_first += disp_w;
  40b76c:	9b08      	ldr	r3, [sp, #32]
  40b76e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
                mask += draw_area_w;
  40b772:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40b774:	9a07      	ldr	r2, [sp, #28]
  40b776:	4413      	add	r3, r2
  40b778:	931b      	str	r3, [sp, #108]	; 0x6c
            for(y = 0; y < draw_area_h; y++) {
  40b77a:	9b06      	ldr	r3, [sp, #24]
  40b77c:	3301      	adds	r3, #1
  40b77e:	9306      	str	r3, [sp, #24]
  40b780:	9b06      	ldr	r3, [sp, #24]
  40b782:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40b784:	4293      	cmp	r3, r2
  40b786:	f6bf acf6 	bge.w	40b176 <fill_normal+0xce>
  40b78a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40b78c:	2300      	movs	r3, #0
  40b78e:	e5c5      	b.n	40b31c <fill_normal+0x274>
  40b790:	2300      	movs	r3, #0
  40b792:	9306      	str	r3, [sp, #24]
  40b794:	e7f4      	b.n	40b780 <fill_normal+0x6d8>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
  40b796:	9c06      	ldr	r4, [sp, #24]
  40b798:	fb00 f804 	mul.w	r8, r0, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40b79c:	f3c8 2807 	ubfx	r8, r8, #8, #8
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40b7a0:	4281      	cmp	r1, r0
  40b7a2:	d05c      	beq.n	40b85e <fill_normal+0x7b6>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40b7a4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  40b7a8:	d05f      	beq.n	40b86a <fill_normal+0x7c2>
  40b7aa:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b7ae:	f3cb 03c4 	ubfx	r3, fp, #3, #5
  40b7b2:	f3c2 01c4 	ubfx	r1, r2, #3, #5
  40b7b6:	f1c8 04ff 	rsb	r4, r8, #255	; 0xff
  40b7ba:	fb04 f101 	mul.w	r1, r4, r1
  40b7be:	fb08 1303 	mla	r3, r8, r3, r1
  40b7c2:	3380      	adds	r3, #128	; 0x80
  40b7c4:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40b7c8:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40b7cc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b7d0:	f363 09c7 	bfi	r9, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b7d4:	f00b 0307 	and.w	r3, fp, #7
  40b7d8:	f3cb 3142 	ubfx	r1, fp, #13, #3
  40b7dc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40b7e0:	f002 0707 	and.w	r7, r2, #7
  40b7e4:	f3c2 3142 	ubfx	r1, r2, #13, #3
  40b7e8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40b7ec:	fb01 f104 	mul.w	r1, r1, r4
  40b7f0:	fb03 1308 	mla	r3, r3, r8, r1
  40b7f4:	3380      	adds	r3, #128	; 0x80
  40b7f6:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40b7fa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40b7fe:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40b802:	f361 0902 	bfi	r9, r1, #0, #3
  40b806:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40b80a:	f363 394f 	bfi	r9, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b80e:	f3cb 2304 	ubfx	r3, fp, #8, #5
  40b812:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40b816:	fb02 f204 	mul.w	r2, r2, r4
  40b81a:	fb03 2408 	mla	r4, r3, r8, r2
  40b81e:	3480      	adds	r4, #128	; 0x80
  40b820:	eb04 2304 	add.w	r3, r4, r4, lsl #8
  40b824:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
  40b828:	f3c4 54c4 	ubfx	r4, r4, #23, #5
  40b82c:	f364 290c 	bfi	r9, r4, #8, #5
  40b830:	464b      	mov	r3, r9
                            last_dest_color.full = disp_buf_first[x].full;
  40b832:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
                            last_mask = *mask_tmp_x;
  40b836:	4601      	mov	r1, r0
                        disp_buf_first[x] = last_res_color;
  40b838:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
                    mask_tmp_x++;
  40b83c:	f10a 0a01 	add.w	sl, sl, #1
                for(x = 0; x < draw_area_w; x++) {
  40b840:	f10c 0c01 	add.w	ip, ip, #1
  40b844:	45b4      	cmp	ip, r6
  40b846:	da12      	bge.n	40b86e <fill_normal+0x7c6>
                    if(*mask_tmp_x) {
  40b848:	f89a 0000 	ldrb.w	r0, [sl]
  40b84c:	2800      	cmp	r0, #0
  40b84e:	d0f5      	beq.n	40b83c <fill_normal+0x794>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40b850:	4281      	cmp	r1, r0
  40b852:	d0a5      	beq.n	40b7a0 <fill_normal+0x6f8>
  40b854:	28ff      	cmp	r0, #255	; 0xff
  40b856:	d19e      	bne.n	40b796 <fill_normal+0x6ee>
  40b858:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40b85c:	e7a0      	b.n	40b7a0 <fill_normal+0x6f8>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40b85e:	b294      	uxth	r4, r2
  40b860:	f835 701c 	ldrh.w	r7, [r5, ip, lsl #1]
  40b864:	42bc      	cmp	r4, r7
  40b866:	d19d      	bne.n	40b7a4 <fill_normal+0x6fc>
  40b868:	e7e6      	b.n	40b838 <fill_normal+0x790>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40b86a:	465b      	mov	r3, fp
  40b86c:	e7e1      	b.n	40b832 <fill_normal+0x78a>
                disp_buf_first += disp_w;
  40b86e:	9808      	ldr	r0, [sp, #32]
  40b870:	eb05 0540 	add.w	r5, r5, r0, lsl #1
                mask += draw_area_w;
  40b874:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40b876:	9c07      	ldr	r4, [sp, #28]
  40b878:	4420      	add	r0, r4
  40b87a:	901b      	str	r0, [sp, #108]	; 0x6c
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b87c:	f10e 0e01 	add.w	lr, lr, #1
  40b880:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b882:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  40b886:	4586      	cmp	lr, r0
  40b888:	f73f ac75 	bgt.w	40b176 <fill_normal+0xce>
  40b88c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
  40b890:	f04f 0c00 	mov.w	ip, #0
  40b894:	e7d6      	b.n	40b844 <fill_normal+0x79c>
  40b896:	bf00      	nop

0040b898 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40b898:	2a02      	cmp	r2, #2
  40b89a:	d972      	bls.n	40b982 <color_blend_true_color_additive+0xea>
{
  40b89c:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
  40b89e:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40b8a2:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40b8a6:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
  40b8a8:	2b1f      	cmp	r3, #31
  40b8aa:	bf28      	it	cs
  40b8ac:	231f      	movcs	r3, #31
  40b8ae:	f363 00c7 	bfi	r0, r3, #3, #5
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MATH_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40b8b2:	f001 0307 	and.w	r3, r1, #7
  40b8b6:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40b8ba:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40b8be:	f000 0407 	and.w	r4, r0, #7
  40b8c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40b8c6:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40b8ca:	4423      	add	r3, r4
    tmp = LV_MATH_MIN(tmp, 63);
  40b8cc:	2b3f      	cmp	r3, #63	; 0x3f
  40b8ce:	bf28      	it	cs
  40b8d0:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.green_h = tmp >> 3;
  40b8d2:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40b8d6:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40b8da:	f363 304f 	bfi	r0, r3, #13, #3

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
  40b8de:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40b8e2:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40b8e6:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
  40b8e8:	2b1f      	cmp	r3, #31
  40b8ea:	bf28      	it	cs
  40b8ec:	231f      	movcs	r3, #31
  40b8ee:	f363 200c 	bfi	r0, r3, #8, #5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
  40b8f2:	2aff      	cmp	r2, #255	; 0xff
  40b8f4:	d043      	beq.n	40b97e <color_blend_true_color_additive+0xe6>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b8f6:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40b8fa:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40b8fe:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40b902:	fb06 f404 	mul.w	r4, r6, r4
  40b906:	fb02 4303 	mla	r3, r2, r3, r4
  40b90a:	3380      	adds	r3, #128	; 0x80
  40b90c:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40b910:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40b914:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b918:	f04f 0500 	mov.w	r5, #0
  40b91c:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b920:	f000 0407 	and.w	r4, r0, #7
  40b924:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40b928:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40b92c:	f001 0707 	and.w	r7, r1, #7
  40b930:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40b934:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40b938:	fb04 f406 	mul.w	r4, r4, r6
  40b93c:	fb03 4302 	mla	r3, r3, r2, r4
  40b940:	3380      	adds	r3, #128	; 0x80
  40b942:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40b946:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40b94a:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40b94e:	f364 0502 	bfi	r5, r4, #0, #3
  40b952:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40b956:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b95a:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40b95e:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40b962:	fb04 f406 	mul.w	r4, r4, r6
  40b966:	fb03 4202 	mla	r2, r3, r2, r4
  40b96a:	3280      	adds	r2, #128	; 0x80
  40b96c:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40b970:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40b974:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40b978:	f362 250c 	bfi	r5, r2, #8, #5
  40b97c:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40b97e:	bcf0      	pop	{r4, r5, r6, r7}
  40b980:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40b982:	4608      	mov	r0, r1
  40b984:	4770      	bx	lr

0040b986 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40b986:	2a02      	cmp	r2, #2
  40b988:	d96f      	bls.n	40ba6a <color_blend_true_color_subtractive+0xe4>
{
  40b98a:	b4f0      	push	{r4, r5, r6, r7}

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
  40b98c:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40b990:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40b994:	1b1b      	subs	r3, r3, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
  40b996:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b99a:	f363 00c7 	bfi	r0, r3, #3, #5

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MATH_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40b99e:	f001 0307 	and.w	r3, r1, #7
  40b9a2:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40b9a6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40b9aa:	f000 0407 	and.w	r4, r0, #7
  40b9ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40b9b2:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40b9b6:	4423      	add	r3, r4
    tmp = LV_MATH_MAX(tmp, 0);
  40b9b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
  40b9bc:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40b9c0:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40b9c4:	f363 304f 	bfi	r0, r3, #13, #3
#endif

    tmp = bg.ch.blue - fg.ch.blue;
  40b9c8:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40b9cc:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40b9d0:	1b1b      	subs	r3, r3, r4
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
  40b9d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b9d6:	f363 200c 	bfi	r0, r3, #8, #5

    if(opa == LV_OPA_COVER) return fg;
  40b9da:	2aff      	cmp	r2, #255	; 0xff
  40b9dc:	d043      	beq.n	40ba66 <color_blend_true_color_subtractive+0xe0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b9de:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40b9e2:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40b9e6:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40b9ea:	fb06 f404 	mul.w	r4, r6, r4
  40b9ee:	fb02 4303 	mla	r3, r2, r3, r4
  40b9f2:	3380      	adds	r3, #128	; 0x80
  40b9f4:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40b9f8:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40b9fc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40ba00:	f04f 0500 	mov.w	r5, #0
  40ba04:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ba08:	f000 0407 	and.w	r4, r0, #7
  40ba0c:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40ba10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40ba14:	f001 0707 	and.w	r7, r1, #7
  40ba18:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40ba1c:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40ba20:	fb04 f406 	mul.w	r4, r4, r6
  40ba24:	fb03 4302 	mla	r3, r3, r2, r4
  40ba28:	3380      	adds	r3, #128	; 0x80
  40ba2a:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40ba2e:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40ba32:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40ba36:	f364 0502 	bfi	r5, r4, #0, #3
  40ba3a:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40ba3e:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ba42:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40ba46:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40ba4a:	fb04 f406 	mul.w	r4, r4, r6
  40ba4e:	fb03 4202 	mla	r2, r3, r2, r4
  40ba52:	3280      	adds	r2, #128	; 0x80
  40ba54:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40ba58:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40ba5c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40ba60:	f362 250c 	bfi	r5, r2, #8, #5
  40ba64:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40ba66:	bcf0      	pop	{r4, r5, r6, r7}
  40ba68:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40ba6a:	4608      	mov	r0, r1
  40ba6c:	4770      	bx	lr
	...

0040ba70 <fill_blended>:
{
  40ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ba74:	b085      	sub	sp, #20
  40ba76:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
  40ba7a:	9400      	str	r4, [sp, #0]
  40ba7c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40ba80:	8884      	ldrh	r4, [r0, #4]
  40ba82:	8800      	ldrh	r0, [r0, #0]
  40ba84:	1a20      	subs	r0, r4, r0
  40ba86:	b280      	uxth	r0, r0
  40ba88:	3001      	adds	r0, #1
  40ba8a:	b200      	sxth	r0, r0
  40ba8c:	9002      	str	r0, [sp, #8]
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40ba8e:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40ba92:	fb0b f000 	mul.w	r0, fp, r0
  40ba96:	eb01 0540 	add.w	r5, r1, r0, lsl #1
    switch(mode) {
  40ba9a:	2e01      	cmp	r6, #1
  40ba9c:	d004      	beq.n	40baa8 <fill_blended+0x38>
  40ba9e:	2e02      	cmp	r6, #2
  40baa0:	d01b      	beq.n	40bada <fill_blended+0x6a>
}
  40baa2:	b005      	add	sp, #20
  40baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40baa8:	f8df a154 	ldr.w	sl, [pc, #340]	; 40bc00 <fill_blended+0x190>
  40baac:	f8ad 3006 	strh.w	r3, [sp, #6]
  40bab0:	4690      	mov	r8, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40bab2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  40bab6:	2b01      	cmp	r3, #1
  40bab8:	d012      	beq.n	40bae0 <fill_blended+0x70>
  40baba:	8893      	ldrh	r3, [r2, #4]
  40babc:	f9b2 2000 	ldrsh.w	r2, [r2]
  40bac0:	b294      	uxth	r4, r2
  40bac2:	1b1b      	subs	r3, r3, r4
  40bac4:	b29b      	uxth	r3, r3
  40bac6:	3301      	adds	r3, #1
  40bac8:	b21b      	sxth	r3, r3
  40baca:	9303      	str	r3, [sp, #12]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40bacc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40bace:	1abf      	subs	r7, r7, r2
        last_dest_color.full = disp_buf_tmp[0].full;
  40bad0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
  40bad4:	4686      	mov	lr, r0
        lv_opa_t last_mask = LV_OPA_TRANSP;
  40bad6:	2100      	movs	r1, #0
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bad8:	e089      	b.n	40bbee <fill_blended+0x17e>
            blend_fp = color_blend_true_color_subtractive;
  40bada:	f8df a128 	ldr.w	sl, [pc, #296]	; 40bc04 <fill_blended+0x194>
  40bade:	e7e5      	b.n	40baac <fill_blended+0x3c>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
  40bae0:	f04f 0600 	mov.w	r6, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bae4:	f8bd 4006 	ldrh.w	r4, [sp, #6]
  40bae8:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40baec:	9900      	ldr	r1, [sp, #0]
  40baee:	fb01 f303 	mul.w	r3, r1, r3
  40baf2:	3380      	adds	r3, #128	; 0x80
  40baf4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40baf8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bafc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bb00:	4630      	mov	r0, r6
  40bb02:	f363 00c7 	bfi	r0, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bb06:	f004 0207 	and.w	r2, r4, #7
  40bb0a:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40bb0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40bb12:	fb03 f301 	mul.w	r3, r3, r1
  40bb16:	3380      	adds	r3, #128	; 0x80
  40bb18:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bb1c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bb20:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40bb24:	f362 0002 	bfi	r0, r2, #0, #3
  40bb28:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bb2c:	f363 304f 	bfi	r0, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bb30:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40bb34:	fb03 f301 	mul.w	r3, r3, r1
  40bb38:	3380      	adds	r3, #128	; 0x80
  40bb3a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bb3e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bb42:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bb46:	f363 200c 	bfi	r0, r3, #8, #5
  40bb4a:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40bb4e:	e018      	b.n	40bb82 <fill_blended+0x112>
                disp_buf_tmp[x] = last_res_color;
  40bb50:	8038      	strh	r0, [r7, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bb52:	3401      	adds	r4, #1
  40bb54:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40bb58:	429c      	cmp	r4, r3
  40bb5a:	dc0e      	bgt.n	40bb7a <fill_blended+0x10a>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  40bb5c:	b2b3      	uxth	r3, r6
  40bb5e:	eb05 0744 	add.w	r7, r5, r4, lsl #1
  40bb62:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
  40bb66:	4293      	cmp	r3, r2
  40bb68:	d0f2      	beq.n	40bb50 <fill_blended+0xe0>
                    last_dest_color = disp_buf_tmp[x];
  40bb6a:	f835 6014 	ldrh.w	r6, [r5, r4, lsl #1]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
  40bb6e:	9a00      	ldr	r2, [sp, #0]
  40bb70:	4631      	mov	r1, r6
  40bb72:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40bb76:	47d0      	blx	sl
  40bb78:	e7ea      	b.n	40bb50 <fill_blended+0xe0>
            disp_buf_tmp += disp_w;
  40bb7a:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bb7e:	f10b 0b01 	add.w	fp, fp, #1
  40bb82:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40bb86:	459b      	cmp	fp, r3
  40bb88:	dc8b      	bgt.n	40baa2 <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bb8a:	f9b8 4000 	ldrsh.w	r4, [r8]
  40bb8e:	e7e1      	b.n	40bb54 <fill_blended+0xe4>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40bb90:	fa1f f38e 	uxth.w	r3, lr
  40bb94:	f835 c014 	ldrh.w	ip, [r5, r4, lsl #1]
  40bb98:	4563      	cmp	r3, ip
  40bb9a:	d119      	bne.n	40bbd0 <fill_blended+0x160>
  40bb9c:	e009      	b.n	40bbb2 <fill_blended+0x142>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40bb9e:	9a00      	ldr	r2, [sp, #0]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
  40bba0:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
  40bba4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40bba8:	47d0      	blx	sl
                    last_mask = mask_tmp[x];
  40bbaa:	f899 1000 	ldrb.w	r1, [r9]
                    last_dest_color.full = disp_buf_tmp[x].full;
  40bbae:	f835 e016 	ldrh.w	lr, [r5, r6, lsl #1]
                disp_buf_tmp[x] = last_res_color;
  40bbb2:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bbb6:	3401      	adds	r4, #1
  40bbb8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40bbbc:	429c      	cmp	r4, r3
  40bbbe:	dc0f      	bgt.n	40bbe0 <fill_blended+0x170>
                if(mask_tmp[x] == 0) continue;
  40bbc0:	4626      	mov	r6, r4
  40bbc2:	eb07 0904 	add.w	r9, r7, r4
  40bbc6:	5d3a      	ldrb	r2, [r7, r4]
  40bbc8:	2a00      	cmp	r2, #0
  40bbca:	d0f4      	beq.n	40bbb6 <fill_blended+0x146>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40bbcc:	4291      	cmp	r1, r2
  40bbce:	d0df      	beq.n	40bb90 <fill_blended+0x120>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40bbd0:	2afc      	cmp	r2, #252	; 0xfc
  40bbd2:	d8e4      	bhi.n	40bb9e <fill_blended+0x12e>
  40bbd4:	9b00      	ldr	r3, [sp, #0]
  40bbd6:	fb02 f203 	mul.w	r2, r2, r3
  40bbda:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40bbde:	e7df      	b.n	40bba0 <fill_blended+0x130>
            disp_buf_tmp += disp_w;
  40bbe0:	9b02      	ldr	r3, [sp, #8]
  40bbe2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            mask_tmp += draw_area_w;
  40bbe6:	9b03      	ldr	r3, [sp, #12]
  40bbe8:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bbea:	f10b 0b01 	add.w	fp, fp, #1
  40bbee:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40bbf2:	459b      	cmp	fp, r3
  40bbf4:	f73f af55 	bgt.w	40baa2 <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40bbf8:	f9b8 4000 	ldrsh.w	r4, [r8]
  40bbfc:	e7dc      	b.n	40bbb8 <fill_blended+0x148>
  40bbfe:	bf00      	nop
  40bc00:	0040b899 	.word	0x0040b899
  40bc04:	0040b987 	.word	0x0040b987

0040bc08 <_lv_blend_fill>:
{
  40bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bc0c:	b08b      	sub	sp, #44	; 0x2c
  40bc0e:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40bc12:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40bc16:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40bc1a:	2d01      	cmp	r5, #1
  40bc1c:	d900      	bls.n	40bc20 <_lv_blend_fill+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40bc1e:	b916      	cbnz	r6, 40bc26 <_lv_blend_fill+0x1e>
}
  40bc20:	b00b      	add	sp, #44	; 0x2c
  40bc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc26:	461c      	mov	r4, r3
  40bc28:	f8ad 201e 	strh.w	r2, [sp, #30]
  40bc2c:	9106      	str	r1, [sp, #24]
  40bc2e:	9005      	str	r0, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40bc30:	4b37      	ldr	r3, [pc, #220]	; (40bd10 <_lv_blend_fill+0x108>)
  40bc32:	4798      	blx	r3
  40bc34:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40bc36:	4b37      	ldr	r3, [pc, #220]	; (40bd14 <_lv_blend_fill+0x10c>)
  40bc38:	4798      	blx	r3
  40bc3a:	4680      	mov	r8, r0
    const lv_area_t * disp_area = &vdb->area;
  40bc3c:	f100 0a10 	add.w	sl, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40bc40:	f8d0 b008 	ldr.w	fp, [r0, #8]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40bc44:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  40bc48:	b10b      	cbz	r3, 40bc4e <_lv_blend_fill+0x46>
  40bc4a:	4648      	mov	r0, r9
  40bc4c:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
  40bc4e:	9a06      	ldr	r2, [sp, #24]
  40bc50:	9905      	ldr	r1, [sp, #20]
  40bc52:	a808      	add	r0, sp, #32
  40bc54:	4b30      	ldr	r3, [pc, #192]	; (40bd18 <_lv_blend_fill+0x110>)
  40bc56:	4798      	blx	r3
    if(!is_common) return;
  40bc58:	2800      	cmp	r0, #0
  40bc5a:	d0e1      	beq.n	40bc20 <_lv_blend_fill+0x18>
    draw_area.x1 -= disp_area->x1;
  40bc5c:	f8b8 e010 	ldrh.w	lr, [r8, #16]
  40bc60:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40bc64:	eba2 020e 	sub.w	r2, r2, lr
  40bc68:	b292      	uxth	r2, r2
  40bc6a:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40bc6e:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  40bc72:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40bc76:	1a09      	subs	r1, r1, r0
  40bc78:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40bc7c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40bc80:	eba3 030e 	sub.w	r3, r3, lr
  40bc84:	b29b      	uxth	r3, r3
  40bc86:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40bc8a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40bc8e:	1a09      	subs	r1, r1, r0
  40bc90:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40bc94:	b1ac      	cbz	r4, 40bcc2 <_lv_blend_fill+0xba>
  40bc96:	f899 1008 	ldrb.w	r1, [r9, #8]
  40bc9a:	f011 0f01 	tst.w	r1, #1
  40bc9e:	d110      	bne.n	40bcc2 <_lv_blend_fill+0xba>
  40bca0:	1a9a      	subs	r2, r3, r2
  40bca2:	b292      	uxth	r2, r2
  40bca4:	3201      	adds	r2, #1
  40bca6:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40bca8:	2300      	movs	r3, #0
  40bcaa:	e002      	b.n	40bcb2 <_lv_blend_fill+0xaa>
  40bcac:	2000      	movs	r0, #0
  40bcae:	7008      	strb	r0, [r1, #0]
  40bcb0:	3301      	adds	r3, #1
  40bcb2:	4293      	cmp	r3, r2
  40bcb4:	da05      	bge.n	40bcc2 <_lv_blend_fill+0xba>
  40bcb6:	18e1      	adds	r1, r4, r3
  40bcb8:	5ce0      	ldrb	r0, [r4, r3]
  40bcba:	2880      	cmp	r0, #128	; 0x80
  40bcbc:	d9f6      	bls.n	40bcac <_lv_blend_fill+0xa4>
  40bcbe:	20ff      	movs	r0, #255	; 0xff
  40bcc0:	e7f5      	b.n	40bcae <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
  40bcc2:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40bcc6:	b153      	cbz	r3, 40bcde <_lv_blend_fill+0xd6>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40bcc8:	9602      	str	r6, [sp, #8]
  40bcca:	9401      	str	r4, [sp, #4]
  40bccc:	9500      	str	r5, [sp, #0]
  40bcce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40bcd2:	aa08      	add	r2, sp, #32
  40bcd4:	4659      	mov	r1, fp
  40bcd6:	4650      	mov	r0, sl
  40bcd8:	4c10      	ldr	r4, [pc, #64]	; (40bd1c <_lv_blend_fill+0x114>)
  40bcda:	47a0      	blx	r4
  40bcdc:	e7a0      	b.n	40bc20 <_lv_blend_fill+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40bcde:	b957      	cbnz	r7, 40bcf6 <_lv_blend_fill+0xee>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40bce0:	9602      	str	r6, [sp, #8]
  40bce2:	9401      	str	r4, [sp, #4]
  40bce4:	9500      	str	r5, [sp, #0]
  40bce6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40bcea:	aa08      	add	r2, sp, #32
  40bcec:	4659      	mov	r1, fp
  40bcee:	4650      	mov	r0, sl
  40bcf0:	4c0b      	ldr	r4, [pc, #44]	; (40bd20 <_lv_blend_fill+0x118>)
  40bcf2:	47a0      	blx	r4
  40bcf4:	e794      	b.n	40bc20 <_lv_blend_fill+0x18>
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
  40bcf6:	9703      	str	r7, [sp, #12]
  40bcf8:	9602      	str	r6, [sp, #8]
  40bcfa:	9401      	str	r4, [sp, #4]
  40bcfc:	9500      	str	r5, [sp, #0]
  40bcfe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40bd02:	aa08      	add	r2, sp, #32
  40bd04:	4659      	mov	r1, fp
  40bd06:	4650      	mov	r0, sl
  40bd08:	4c06      	ldr	r4, [pc, #24]	; (40bd24 <_lv_blend_fill+0x11c>)
  40bd0a:	47a0      	blx	r4
  40bd0c:	e788      	b.n	40bc20 <_lv_blend_fill+0x18>
  40bd0e:	bf00      	nop
  40bd10:	00408ba9 	.word	0x00408ba9
  40bd14:	0041403d 	.word	0x0041403d
  40bd18:	004147a1 	.word	0x004147a1
  40bd1c:	0040a6d9 	.word	0x0040a6d9
  40bd20:	0040b0a9 	.word	0x0040b0a9
  40bd24:	0040ba71 	.word	0x0040ba71

0040bd28 <_lv_blend_map>:
{
  40bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bd2c:	b08b      	sub	sp, #44	; 0x2c
  40bd2e:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40bd32:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40bd36:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40bd3a:	2d01      	cmp	r5, #1
  40bd3c:	d900      	bls.n	40bd40 <_lv_blend_map+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40bd3e:	b916      	cbnz	r6, 40bd46 <_lv_blend_map+0x1e>
}
  40bd40:	b00b      	add	sp, #44	; 0x2c
  40bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bd46:	461c      	mov	r4, r3
  40bd48:	4617      	mov	r7, r2
  40bd4a:	460a      	mov	r2, r1
  40bd4c:	9106      	str	r1, [sp, #24]
  40bd4e:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
  40bd50:	a808      	add	r0, sp, #32
  40bd52:	4b37      	ldr	r3, [pc, #220]	; (40be30 <_lv_blend_map+0x108>)
  40bd54:	4798      	blx	r3
    if(!is_common) return;
  40bd56:	2800      	cmp	r0, #0
  40bd58:	d0f2      	beq.n	40bd40 <_lv_blend_map+0x18>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40bd5a:	4b36      	ldr	r3, [pc, #216]	; (40be34 <_lv_blend_map+0x10c>)
  40bd5c:	4798      	blx	r3
  40bd5e:	4682      	mov	sl, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40bd60:	4b35      	ldr	r3, [pc, #212]	; (40be38 <_lv_blend_map+0x110>)
  40bd62:	4798      	blx	r3
  40bd64:	4681      	mov	r9, r0
    const lv_area_t * disp_area = &vdb->area;
  40bd66:	f100 0b10 	add.w	fp, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40bd6a:	6883      	ldr	r3, [r0, #8]
  40bd6c:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40bd6e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40bd72:	b10b      	cbz	r3, 40bd78 <_lv_blend_map+0x50>
  40bd74:	4650      	mov	r0, sl
  40bd76:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
  40bd78:	f8b9 e010 	ldrh.w	lr, [r9, #16]
  40bd7c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40bd80:	eba2 020e 	sub.w	r2, r2, lr
  40bd84:	b292      	uxth	r2, r2
  40bd86:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40bd8a:	f8b9 0012 	ldrh.w	r0, [r9, #18]
  40bd8e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40bd92:	1a09      	subs	r1, r1, r0
  40bd94:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40bd98:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40bd9c:	eba3 030e 	sub.w	r3, r3, lr
  40bda0:	b29b      	uxth	r3, r3
  40bda2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40bda6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40bdaa:	1a09      	subs	r1, r1, r0
  40bdac:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40bdb0:	b1ac      	cbz	r4, 40bdde <_lv_blend_map+0xb6>
  40bdb2:	f89a 1008 	ldrb.w	r1, [sl, #8]
  40bdb6:	f011 0f01 	tst.w	r1, #1
  40bdba:	d110      	bne.n	40bdde <_lv_blend_map+0xb6>
  40bdbc:	1a9a      	subs	r2, r3, r2
  40bdbe:	b292      	uxth	r2, r2
  40bdc0:	3201      	adds	r2, #1
  40bdc2:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40bdc4:	2300      	movs	r3, #0
  40bdc6:	e002      	b.n	40bdce <_lv_blend_map+0xa6>
  40bdc8:	2000      	movs	r0, #0
  40bdca:	7008      	strb	r0, [r1, #0]
  40bdcc:	3301      	adds	r3, #1
  40bdce:	4293      	cmp	r3, r2
  40bdd0:	da05      	bge.n	40bdde <_lv_blend_map+0xb6>
  40bdd2:	18e1      	adds	r1, r4, r3
  40bdd4:	5ce0      	ldrb	r0, [r4, r3]
  40bdd6:	2880      	cmp	r0, #128	; 0x80
  40bdd8:	d9f6      	bls.n	40bdc8 <_lv_blend_map+0xa0>
  40bdda:	20ff      	movs	r0, #255	; 0xff
  40bddc:	e7f5      	b.n	40bdca <_lv_blend_map+0xa2>
    if(disp->driver.set_px_cb) {
  40bdde:	f8da 3014 	ldr.w	r3, [sl, #20]
  40bde2:	b153      	cbz	r3, 40bdfa <_lv_blend_map+0xd2>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40bde4:	9603      	str	r6, [sp, #12]
  40bde6:	9402      	str	r4, [sp, #8]
  40bde8:	9501      	str	r5, [sp, #4]
  40bdea:	9700      	str	r7, [sp, #0]
  40bdec:	9b06      	ldr	r3, [sp, #24]
  40bdee:	aa08      	add	r2, sp, #32
  40bdf0:	9907      	ldr	r1, [sp, #28]
  40bdf2:	4658      	mov	r0, fp
  40bdf4:	4c11      	ldr	r4, [pc, #68]	; (40be3c <_lv_blend_map+0x114>)
  40bdf6:	47a0      	blx	r4
  40bdf8:	e7a2      	b.n	40bd40 <_lv_blend_map+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40bdfa:	f1b8 0f00 	cmp.w	r8, #0
  40bdfe:	d10a      	bne.n	40be16 <_lv_blend_map+0xee>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40be00:	9603      	str	r6, [sp, #12]
  40be02:	9402      	str	r4, [sp, #8]
  40be04:	9501      	str	r5, [sp, #4]
  40be06:	9700      	str	r7, [sp, #0]
  40be08:	9b06      	ldr	r3, [sp, #24]
  40be0a:	aa08      	add	r2, sp, #32
  40be0c:	9907      	ldr	r1, [sp, #28]
  40be0e:	4658      	mov	r0, fp
  40be10:	4c0b      	ldr	r4, [pc, #44]	; (40be40 <_lv_blend_map+0x118>)
  40be12:	47a0      	blx	r4
  40be14:	e794      	b.n	40bd40 <_lv_blend_map+0x18>
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
  40be16:	f8cd 8010 	str.w	r8, [sp, #16]
  40be1a:	9603      	str	r6, [sp, #12]
  40be1c:	9402      	str	r4, [sp, #8]
  40be1e:	9501      	str	r5, [sp, #4]
  40be20:	9700      	str	r7, [sp, #0]
  40be22:	9b06      	ldr	r3, [sp, #24]
  40be24:	aa08      	add	r2, sp, #32
  40be26:	9907      	ldr	r1, [sp, #28]
  40be28:	4658      	mov	r0, fp
  40be2a:	4c06      	ldr	r4, [pc, #24]	; (40be44 <_lv_blend_map+0x11c>)
  40be2c:	47a0      	blx	r4
  40be2e:	e787      	b.n	40bd40 <_lv_blend_map+0x18>
  40be30:	004147a1 	.word	0x004147a1
  40be34:	00408ba9 	.word	0x00408ba9
  40be38:	0041403d 	.word	0x0041403d
  40be3c:	0040a7bd 	.word	0x0040a7bd
  40be40:	0040a8f5 	.word	0x0040a8f5
  40be44:	0040a58d 	.word	0x0040a58d

0040be48 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
  40be48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40be4c:	b0bd      	sub	sp, #244	; 0xf4
  40be4e:	9016      	str	r0, [sp, #88]	; 0x58
  40be50:	911f      	str	r1, [sp, #124]	; 0x7c
  40be52:	4616      	mov	r6, r2
  40be54:	930a      	str	r3, [sp, #40]	; 0x28
  40be56:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
  40be5a:	930d      	str	r3, [sp, #52]	; 0x34
  40be5c:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
  40be60:	9308      	str	r3, [sp, #32]
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40be62:	aa3a      	add	r2, sp, #232	; 0xe8
  40be64:	2308      	movs	r3, #8
  40be66:	e004      	b.n	40be72 <lv_draw_map+0x2a>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40be68:	f811 0b01 	ldrb.w	r0, [r1], #1
  40be6c:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
  40be70:	3b01      	subs	r3, #1
    while(len) {
  40be72:	2b00      	cmp	r3, #0
  40be74:	d1f8      	bne.n	40be68 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40be76:	4ba6      	ldr	r3, [pc, #664]	; (40c110 <lv_draw_map+0x2c8>)
  40be78:	4798      	blx	r3
  40be7a:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40be7c:	4ba5      	ldr	r3, [pc, #660]	; (40c114 <lv_draw_map+0x2cc>)
  40be7e:	4798      	blx	r3
  40be80:	9014      	str	r0, [sp, #80]	; 0x50
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
  40be82:	8a01      	ldrh	r1, [r0, #16]
  40be84:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40be88:	1a5b      	subs	r3, r3, r1
  40be8a:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40be8e:	8a42      	ldrh	r2, [r0, #18]
  40be90:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40be94:	1a9b      	subs	r3, r3, r2
  40be96:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40be9a:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40be9e:	1a5b      	subs	r3, r3, r1
  40bea0:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40bea4:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40bea8:	1a9b      	subs	r3, r3, r2
  40beaa:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40beae:	4b9a      	ldr	r3, [pc, #616]	; (40c118 <lv_draw_map+0x2d0>)
  40beb0:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
  40beb2:	9015      	str	r0, [sp, #84]	; 0x54
  40beb4:	b930      	cbnz	r0, 40bec4 <lv_draw_map+0x7c>
  40beb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40beb8:	8853      	ldrh	r3, [r2, #2]
  40beba:	b91b      	cbnz	r3, 40bec4 <lv_draw_map+0x7c>
  40bebc:	8913      	ldrh	r3, [r2, #8]
  40bebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40bec2:	d055      	beq.n	40bf70 <lv_draw_map+0x128>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40bec4:	9b08      	ldr	r3, [sp, #32]
  40bec6:	2b00      	cmp	r3, #0
  40bec8:	d068      	beq.n	40bf9c <lv_draw_map+0x154>
  40beca:	2303      	movs	r3, #3
  40becc:	9307      	str	r3, [sp, #28]
  40bece:	9916      	ldr	r1, [sp, #88]	; 0x58
  40bed0:	888d      	ldrh	r5, [r1, #4]
  40bed2:	f9b1 2000 	ldrsh.w	r2, [r1]
  40bed6:	b293      	uxth	r3, r2
  40bed8:	1aed      	subs	r5, r5, r3
  40beda:	b2ad      	uxth	r5, r5
  40bedc:	3501      	adds	r5, #1
  40bede:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
  40bee0:	9519      	str	r5, [sp, #100]	; 0x64
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40bee2:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
  40bee6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40beea:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40beec:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  40bef0:	1a5b      	subs	r3, r3, r1
  40bef2:	1ac3      	subs	r3, r0, r3
  40bef4:	fb03 f305 	mul.w	r3, r3, r5
  40bef8:	9f07      	ldr	r7, [sp, #28]
  40befa:	971a      	str	r7, [sp, #104]	; 0x68
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  40befc:	f9bd c0e8 	ldrsh.w	ip, [sp, #232]	; 0xe8
  40bf00:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
  40bf04:	eba2 020e 	sub.w	r2, r2, lr
  40bf08:	ebac 0202 	sub.w	r2, ip, r2
  40bf0c:	fb02 f207 	mul.w	r2, r2, r7
  40bf10:	fb07 2303 	mla	r3, r7, r3, r2
  40bf14:	18f3      	adds	r3, r6, r3
  40bf16:	9311      	str	r3, [sp, #68]	; 0x44
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
  40bf18:	fa1f f78c 	uxth.w	r7, ip
  40bf1c:	fa17 f38e 	uxtah	r3, r7, lr
  40bf20:	b29b      	uxth	r3, r3
  40bf22:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  40bf26:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40bf2a:	1bd2      	subs	r2, r2, r7
  40bf2c:	b292      	uxth	r2, r2
  40bf2e:	3201      	adds	r2, #1
  40bf30:	b292      	uxth	r2, r2
  40bf32:	fa0f f982 	sxth.w	r9, r2
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
  40bf36:	4413      	add	r3, r2
  40bf38:	b29b      	uxth	r3, r3
  40bf3a:	3b01      	subs	r3, #1
  40bf3c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        blend_area.y1 = disp_area->y1 + draw_area.y1;
  40bf40:	b280      	uxth	r0, r0
  40bf42:	fa10 f381 	uxtah	r3, r0, r1
  40bf46:	b21b      	sxth	r3, r3
  40bf48:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        blend_area.y2 = blend_area.y1;
  40bf4c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40bf50:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40bf54:	1a1b      	subs	r3, r3, r0
  40bf56:	b29b      	uxth	r3, r3
  40bf58:	3301      	adds	r3, #1
  40bf5a:	b21b      	sxth	r3, r3
  40bf5c:	9318      	str	r3, [sp, #96]	; 0x60

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40bf5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bf60:	8853      	ldrh	r3, [r2, #2]
  40bf62:	b9f3      	cbnz	r3, 40bfa2 <lv_draw_map+0x15a>
  40bf64:	8913      	ldrh	r3, [r2, #8]
  40bf66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40bf6a:	d051      	beq.n	40c010 <lv_draw_map+0x1c8>
  40bf6c:	2301      	movs	r3, #1
  40bf6e:	e019      	b.n	40bfa4 <lv_draw_map+0x15c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
  40bf70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bf72:	2b00      	cmp	r3, #0
  40bf74:	d1a6      	bne.n	40bec4 <lv_draw_map+0x7c>
  40bf76:	9b08      	ldr	r3, [sp, #32]
  40bf78:	2b00      	cmp	r3, #0
  40bf7a:	d1a3      	bne.n	40bec4 <lv_draw_map+0x7c>
  40bf7c:	7a93      	ldrb	r3, [r2, #10]
  40bf7e:	2b00      	cmp	r3, #0
  40bf80:	d1a0      	bne.n	40bec4 <lv_draw_map+0x7c>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
  40bf82:	7b93      	ldrb	r3, [r2, #14]
  40bf84:	9302      	str	r3, [sp, #8]
  40bf86:	7813      	ldrb	r3, [r2, #0]
  40bf88:	9301      	str	r3, [sp, #4]
  40bf8a:	2301      	movs	r3, #1
  40bf8c:	9300      	str	r3, [sp, #0]
  40bf8e:	2300      	movs	r3, #0
  40bf90:	4632      	mov	r2, r6
  40bf92:	9916      	ldr	r1, [sp, #88]	; 0x58
  40bf94:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40bf96:	4c61      	ldr	r4, [pc, #388]	; (40c11c <lv_draw_map+0x2d4>)
  40bf98:	47a0      	blx	r4
  40bf9a:	e368      	b.n	40c66e <lv_draw_map+0x826>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40bf9c:	2302      	movs	r3, #2
  40bf9e:	9307      	str	r3, [sp, #28]
  40bfa0:	e795      	b.n	40bece <lv_draw_map+0x86>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40bfa2:	2301      	movs	r3, #1
  40bfa4:	9306      	str	r3, [sp, #24]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40bfa6:	f083 0301 	eor.w	r3, r3, #1
  40bfaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40bfac:	2a00      	cmp	r2, #0
  40bfae:	bf14      	ite	ne
  40bfb0:	2300      	movne	r3, #0
  40bfb2:	f003 0301 	andeq.w	r3, r3, #1
  40bfb6:	b133      	cbz	r3, 40bfc6 <lv_draw_map+0x17e>
  40bfb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bfba:	b923      	cbnz	r3, 40bfc6 <lv_draw_map+0x17e>
  40bfbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bfbe:	7a9b      	ldrb	r3, [r3, #10]
  40bfc0:	b90b      	cbnz	r3, 40bfc6 <lv_draw_map+0x17e>
  40bfc2:	9b08      	ldr	r3, [sp, #32]
  40bfc4:	bb33      	cbnz	r3, 40c014 <lv_draw_map+0x1cc>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40bfc6:	4640      	mov	r0, r8
  40bfc8:	4b55      	ldr	r3, [pc, #340]	; (40c120 <lv_draw_map+0x2d8>)
  40bfca:	4798      	blx	r3
  40bfcc:	4604      	mov	r4, r0
  40bfce:	9017      	str	r0, [sp, #92]	; 0x5c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40bfd0:	a83a      	add	r0, sp, #232	; 0xe8
  40bfd2:	4b54      	ldr	r3, [pc, #336]	; (40c124 <lv_draw_map+0x2dc>)
  40bfd4:	4798      	blx	r3
  40bfd6:	4284      	cmp	r4, r0
  40bfd8:	f080 80ac 	bcs.w	40c134 <lv_draw_map+0x2ec>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40bfdc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  40bfde:	0078      	lsls	r0, r7, #1
  40bfe0:	4c51      	ldr	r4, [pc, #324]	; (40c128 <lv_draw_map+0x2e0>)
  40bfe2:	47a0      	blx	r4
  40bfe4:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40bfe6:	4638      	mov	r0, r7
  40bfe8:	47a0      	blx	r4
  40bfea:	4682      	mov	sl, r0

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  40bfec:	214c      	movs	r1, #76	; 0x4c
  40bfee:	a827      	add	r0, sp, #156	; 0x9c
  40bff0:	4b4e      	ldr	r3, [pc, #312]	; (40c12c <lv_draw_map+0x2e4>)
  40bff2:	4798      	blx	r3
            if(transform) {
  40bff4:	9b06      	ldr	r3, [sp, #24]
  40bff6:	2b00      	cmp	r3, #0
  40bff8:	f000 80ca 	beq.w	40c190 <lv_draw_map+0x348>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40bffc:	9b08      	ldr	r3, [sp, #32]
  40bffe:	2b00      	cmp	r3, #0
  40c000:	f040 809d 	bne.w	40c13e <lv_draw_map+0x2f6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40c004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c006:	2b00      	cmp	r3, #0
  40c008:	f040 80f3 	bne.w	40c1f2 <lv_draw_map+0x3aa>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
  40c00c:	2204      	movs	r2, #4
  40c00e:	e097      	b.n	40c140 <lv_draw_map+0x2f8>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c010:	2300      	movs	r3, #0
  40c012:	e7c7      	b.n	40bfa4 <lv_draw_map+0x15c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c014:	4640      	mov	r0, r8
  40c016:	4b42      	ldr	r3, [pc, #264]	; (40c120 <lv_draw_map+0x2d8>)
  40c018:	4798      	blx	r3
  40c01a:	4604      	mov	r4, r0
  40c01c:	4680      	mov	r8, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c01e:	a83a      	add	r0, sp, #232	; 0xe8
  40c020:	4b40      	ldr	r3, [pc, #256]	; (40c124 <lv_draw_map+0x2dc>)
  40c022:	4798      	blx	r3
  40c024:	4284      	cmp	r4, r0
  40c026:	d20e      	bcs.n	40c046 <lv_draw_map+0x1fe>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c028:	ea4f 0048 	mov.w	r0, r8, lsl #1
  40c02c:	4c3e      	ldr	r4, [pc, #248]	; (40c128 <lv_draw_map+0x2e0>)
  40c02e:	47a0      	blx	r4
  40c030:	4605      	mov	r5, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c032:	4640      	mov	r0, r8
  40c034:	47a0      	blx	r4
  40c036:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
  40c038:	2600      	movs	r6, #0
        uint32_t px_i = 0;
  40c03a:	4632      	mov	r2, r6
  40c03c:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40c040:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
            for(y = 0; y < draw_area_h; y++) {
  40c044:	e02b      	b.n	40c09e <lv_draw_map+0x256>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c046:	a83a      	add	r0, sp, #232	; 0xe8
  40c048:	4b36      	ldr	r3, [pc, #216]	; (40c124 <lv_draw_map+0x2dc>)
  40c04a:	4798      	blx	r3
  40c04c:	4680      	mov	r8, r0
  40c04e:	e7eb      	b.n	40c028 <lv_draw_map+0x1e0>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c050:	3101      	adds	r1, #1
  40c052:	443b      	add	r3, r7
  40c054:	3201      	adds	r2, #1
  40c056:	4549      	cmp	r1, r9
  40c058:	da0b      	bge.n	40c072 <lv_draw_map+0x22a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40c05a:	7898      	ldrb	r0, [r3, #2]
                    mask_buf[px_i] = px_opa;
  40c05c:	54a0      	strb	r0, [r4, r2]
                    if(px_opa) {
  40c05e:	2800      	cmp	r0, #0
  40c060:	d0f6      	beq.n	40c050 <lv_draw_map+0x208>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
  40c062:	7818      	ldrb	r0, [r3, #0]
  40c064:	f893 e001 	ldrb.w	lr, [r3, #1]
  40c068:	eb00 200e 	add.w	r0, r0, lr, lsl #8
  40c06c:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
  40c070:	e7ee      	b.n	40c050 <lv_draw_map+0x208>
  40c072:	9707      	str	r7, [sp, #28]
                map_buf_tmp += map_w * px_size_byte;
  40c074:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c076:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c078:	fb01 aa03 	mla	sl, r1, r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c07c:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40c080:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
  40c084:	1a5b      	subs	r3, r3, r1
  40c086:	b29b      	uxth	r3, r3
  40c088:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40c08a:	fa02 f383 	sxtah	r3, r2, r3
  40c08e:	4598      	cmp	r8, r3
  40c090:	d90b      	bls.n	40c0aa <lv_draw_map+0x262>
                    blend_area.y2 ++;
  40c092:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40c096:	3301      	adds	r3, #1
  40c098:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            for(y = 0; y < draw_area_h; y++) {
  40c09c:	3601      	adds	r6, #1
  40c09e:	455e      	cmp	r6, fp
  40c0a0:	da1a      	bge.n	40c0d8 <lv_draw_map+0x290>
  40c0a2:	4653      	mov	r3, sl
  40c0a4:	2100      	movs	r1, #0
  40c0a6:	9f07      	ldr	r7, [sp, #28]
  40c0a8:	e7d5      	b.n	40c056 <lv_draw_map+0x20e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40c0aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c0ac:	7b93      	ldrb	r3, [r2, #14]
  40c0ae:	9302      	str	r3, [sp, #8]
  40c0b0:	7813      	ldrb	r3, [r2, #0]
  40c0b2:	9301      	str	r3, [sp, #4]
  40c0b4:	2302      	movs	r3, #2
  40c0b6:	9300      	str	r3, [sp, #0]
  40c0b8:	4623      	mov	r3, r4
  40c0ba:	462a      	mov	r2, r5
  40c0bc:	a925      	add	r1, sp, #148	; 0x94
  40c0be:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c0c0:	4f16      	ldr	r7, [pc, #88]	; (40c11c <lv_draw_map+0x2d4>)
  40c0c2:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
  40c0c4:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40c0c8:	3301      	adds	r3, #1
  40c0ca:	b21b      	sxth	r3, r3
  40c0cc:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40c0d0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    px_i = 0;
  40c0d4:	2200      	movs	r2, #0
  40c0d6:	e7e1      	b.n	40c09c <lv_draw_map+0x254>
            if(blend_area.y1 != blend_area.y2) {
  40c0d8:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40c0dc:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40c0e0:	429a      	cmp	r2, r3
  40c0e2:	d00f      	beq.n	40c104 <lv_draw_map+0x2bc>
                blend_area.y2--;
  40c0e4:	3b01      	subs	r3, #1
  40c0e6:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40c0ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c0ec:	7b93      	ldrb	r3, [r2, #14]
  40c0ee:	9302      	str	r3, [sp, #8]
  40c0f0:	7813      	ldrb	r3, [r2, #0]
  40c0f2:	9301      	str	r3, [sp, #4]
  40c0f4:	2302      	movs	r3, #2
  40c0f6:	9300      	str	r3, [sp, #0]
  40c0f8:	4623      	mov	r3, r4
  40c0fa:	462a      	mov	r2, r5
  40c0fc:	a925      	add	r1, sp, #148	; 0x94
  40c0fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c100:	4e06      	ldr	r6, [pc, #24]	; (40c11c <lv_draw_map+0x2d4>)
  40c102:	47b0      	blx	r6
            _lv_mem_buf_release(mask_buf);
  40c104:	4620      	mov	r0, r4
  40c106:	4c0a      	ldr	r4, [pc, #40]	; (40c130 <lv_draw_map+0x2e8>)
  40c108:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40c10a:	4628      	mov	r0, r5
  40c10c:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40c10e:	e2ae      	b.n	40c66e <lv_draw_map+0x826>
  40c110:	00408ba9 	.word	0x00408ba9
  40c114:	0041403d 	.word	0x0041403d
  40c118:	0040ef2d 	.word	0x0040ef2d
  40c11c:	0040bd29 	.word	0x0040bd29
  40c120:	00413f39 	.word	0x00413f39
  40c124:	00414785 	.word	0x00414785
  40c128:	00415b15 	.word	0x00415b15
  40c12c:	00415ca1 	.word	0x00415ca1
  40c130:	004158c5 	.word	0x004158c5
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c134:	a83a      	add	r0, sp, #232	; 0xe8
  40c136:	4bb6      	ldr	r3, [pc, #728]	; (40c410 <lv_draw_map+0x5c8>)
  40c138:	4798      	blx	r3
  40c13a:	9017      	str	r0, [sp, #92]	; 0x5c
  40c13c:	e74e      	b.n	40bfdc <lv_draw_map+0x194>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40c13e:	2205      	movs	r2, #5

                trans_dsc.cfg.angle = draw_dsc->angle;
  40c140:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c142:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40c146:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.zoom = draw_dsc->zoom;
  40c14a:	8903      	ldrh	r3, [r0, #8]
  40c14c:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.src = map_p;
  40c150:	9627      	str	r6, [sp, #156]	; 0x9c
                trans_dsc.cfg.src_w = map_w;
  40c152:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c156:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c158:	88cb      	ldrh	r3, [r1, #6]
  40c15a:	8849      	ldrh	r1, [r1, #2]
  40c15c:	1a5b      	subs	r3, r3, r1
  40c15e:	b29b      	uxth	r3, r3
  40c160:	3301      	adds	r3, #1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
  40c162:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                trans_dsc.cfg.cf = cf;
  40c166:	f88d 20ae 	strb.w	r2, [sp, #174]	; 0xae
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
  40c16a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  40c16e:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
  40c172:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  40c176:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.color = draw_dsc->recolor;
  40c17a:	8983      	ldrh	r3, [r0, #12]
  40c17c:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.antialias = draw_dsc->antialias;
  40c180:	7bc3      	ldrb	r3, [r0, #15]
  40c182:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40c186:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf

                _lv_img_buf_transform_init(&trans_dsc);
  40c18a:	a827      	add	r0, sp, #156	; 0x9c
  40c18c:	4ba1      	ldr	r3, [pc, #644]	; (40c414 <lv_draw_map+0x5cc>)
  40c18e:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
  40c190:	2300      	movs	r3, #0
  40c192:	9323      	str	r3, [sp, #140]	; 0x8c
  40c194:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
  40c198:	990a      	ldr	r1, [sp, #40]	; 0x28
  40c19a:	7a8a      	ldrb	r2, [r1, #10]
  40c19c:	43d3      	mvns	r3, r2
  40c19e:	b2db      	uxtb	r3, r3
  40c1a0:	9310      	str	r3, [sp, #64]	; 0x40
            if(draw_dsc->recolor_opa != 0) {
  40c1a2:	b1ba      	cbz	r2, 40c1d4 <lv_draw_map+0x38c>
  40c1a4:	898b      	ldrh	r3, [r1, #12]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40c1a6:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  40c1aa:	b292      	uxth	r2, r2
  40c1ac:	fb01 f102 	mul.w	r1, r1, r2
  40c1b0:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40c1b4:	f003 0007 	and.w	r0, r3, #7
  40c1b8:	f3c3 3142 	ubfx	r1, r3, #13, #3
  40c1bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40c1c0:	fb12 f101 	smulbb	r1, r2, r1
  40c1c4:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40c1c8:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40c1cc:	fb02 f203 	mul.w	r2, r2, r3
  40c1d0:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c1d6:	9a08      	ldr	r2, [sp, #32]
  40c1d8:	4313      	orrs	r3, r2
  40c1da:	9321      	str	r3, [sp, #132]	; 0x84
  40c1dc:	d10b      	bne.n	40c1f6 <lv_draw_map+0x3ae>
  40c1de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c1e0:	8853      	ldrh	r3, [r2, #2]
  40c1e2:	b9f3      	cbnz	r3, 40c222 <lv_draw_map+0x3da>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40c1e4:	8913      	ldrh	r3, [r2, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c1e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c1ea:	d01d      	beq.n	40c228 <lv_draw_map+0x3e0>
  40c1ec:	2302      	movs	r3, #2
  40c1ee:	931b      	str	r3, [sp, #108]	; 0x6c
  40c1f0:	e003      	b.n	40c1fa <lv_draw_map+0x3b2>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40c1f2:	2206      	movs	r2, #6
  40c1f4:	e7a4      	b.n	40c140 <lv_draw_map+0x2f8>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c1f6:	2302      	movs	r3, #2
  40c1f8:	931b      	str	r3, [sp, #108]	; 0x6c

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
  40c1fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c1fc:	b9bb      	cbnz	r3, 40c22e <lv_draw_map+0x3e6>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
  40c1fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c200:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  40c204:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
  40c208:	4413      	add	r3, r2
  40c20a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c20c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40c210:	1a9b      	subs	r3, r3, r2
  40c212:	9312      	str	r3, [sp, #72]	; 0x48
#endif
            for(y = 0; y < draw_area_h; y++) {
  40c214:	2300      	movs	r3, #0
  40c216:	930c      	str	r3, [sp, #48]	; 0x30
        uint32_t px_i = 0;
  40c218:	9313      	str	r3, [sp, #76]	; 0x4c
  40c21a:	4657      	mov	r7, sl
  40c21c:	f8cd 9014 	str.w	r9, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40c220:	e192      	b.n	40c548 <lv_draw_map+0x700>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c222:	2302      	movs	r3, #2
  40c224:	931b      	str	r3, [sp, #108]	; 0x6c
  40c226:	e7e8      	b.n	40c1fa <lv_draw_map+0x3b2>
  40c228:	2301      	movs	r3, #1
  40c22a:	931b      	str	r3, [sp, #108]	; 0x6c
  40c22c:	e7e5      	b.n	40c1fa <lv_draw_map+0x3b2>
                _lv_memset_ff(mask_buf, mask_buf_size);
  40c22e:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40c230:	4650      	mov	r0, sl
  40c232:	4b79      	ldr	r3, [pc, #484]	; (40c418 <lv_draw_map+0x5d0>)
  40c234:	4798      	blx	r3
  40c236:	e7e2      	b.n	40c1fe <lv_draw_map+0x3b6>
#if LV_USE_IMG_TRANSFORM
                    if(transform) {

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
  40c238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c23a:	4443      	add	r3, r8
  40c23c:	b21b      	sxth	r3, r3
  40c23e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c240:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c242:	440a      	add	r2, r1
  40c244:	b212      	sxth	r2, r2
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
  40c246:	9927      	ldr	r1, [sp, #156]	; 0x9c

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
  40c248:	f9bd 40a4 	ldrsh.w	r4, [sp, #164]	; 0xa4
  40c24c:	1b1b      	subs	r3, r3, r4
    int32_t yt = y - dsc->cfg.pivot_y;
  40c24e:	f9bd 40a6 	ldrsh.w	r4, [sp, #166]	; 0xa6
  40c252:	1b12      	subs	r2, r2, r4

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
  40c254:	f8bd 00aa 	ldrh.w	r0, [sp, #170]	; 0xaa
  40c258:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40c25c:	d035      	beq.n	40c2ca <lv_draw_map+0x482>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    }
    else if(dsc->cfg.angle == 0) {
  40c25e:	f9bd 00a8 	ldrsh.w	r0, [sp, #168]	; 0xa8
  40c262:	2800      	cmp	r0, #0
  40c264:	d143      	bne.n	40c2ee <lv_draw_map+0x4a6>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c266:	9835      	ldr	r0, [sp, #212]	; 0xd4
  40c268:	fb03 f300 	mul.w	r3, r3, r0
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c26c:	fb02 f200 	mul.w	r2, r2, r0
        xs = xt + dsc->tmp.pivot_x_256;
  40c270:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40c272:	eb00 1663 	add.w	r6, r0, r3, asr #5
        ys = yt + dsc->tmp.pivot_y_256;
  40c276:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40c278:	eb04 1362 	add.w	r3, r4, r2, asr #5
  40c27c:	9309      	str	r3, [sp, #36]	; 0x24
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
  40c27e:	1235      	asrs	r5, r6, #8
    int32_t ys_int = ys >> 8;
  40c280:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c282:	121b      	asrs	r3, r3, #8
  40c284:	461c      	mov	r4, r3
  40c286:	930f      	str	r3, [sp, #60]	; 0x3c

    if(xs_int >= dsc->cfg.src_w) return false;
  40c288:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
  40c28c:	429d      	cmp	r5, r3
  40c28e:	f280 80b3 	bge.w	40c3f8 <lv_draw_map+0x5b0>
    else if(xs_int < 0) return false;
  40c292:	2d00      	cmp	r5, #0
  40c294:	f2c0 80b6 	blt.w	40c404 <lv_draw_map+0x5bc>

    if(ys_int >= dsc->cfg.src_h) return false;
  40c298:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  40c29c:	4294      	cmp	r4, r2
  40c29e:	f280 80b3 	bge.w	40c408 <lv_draw_map+0x5c0>
    else if(ys_int < 0) return false;
  40c2a2:	2c00      	cmp	r4, #0
  40c2a4:	f2c0 80b2 	blt.w	40c40c <lv_draw_map+0x5c4>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
  40c2a8:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  40c2ac:	f012 0f04 	tst.w	r2, #4
  40c2b0:	d075      	beq.n	40c39e <lv_draw_map+0x556>
        if(dsc->tmp.has_alpha == 0) {
  40c2b2:	f012 0f02 	tst.w	r2, #2
  40c2b6:	d157      	bne.n	40c368 <lv_draw_map+0x520>
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40c2b8:	fb03 5304 	mla	r3, r3, r4, r5
  40c2bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
  40c2c0:	4461      	add	r1, ip
    uint8_t * d8 = (uint8_t *)dst;
  40c2c2:	aa2c      	add	r2, sp, #176	; 0xb0
  40c2c4:	2302      	movs	r3, #2
  40c2c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c2c8:	e02f      	b.n	40c32a <lv_draw_map+0x4e2>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
  40c2ca:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40c2cc:	fb05 f603 	mul.w	r6, r5, r3
  40c2d0:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40c2d2:	fb04 6612 	mls	r6, r4, r2, r6
  40c2d6:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40c2d8:	eb00 06a6 	add.w	r6, r0, r6, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
  40c2dc:	fb05 f202 	mul.w	r2, r5, r2
  40c2e0:	fb04 2403 	mla	r4, r4, r3, r2
  40c2e4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
  40c2e6:	eb03 03a4 	add.w	r3, r3, r4, asr #2
  40c2ea:	9309      	str	r3, [sp, #36]	; 0x24
  40c2ec:	e7c7      	b.n	40c27e <lv_draw_map+0x436>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c2ee:	9c35      	ldr	r4, [sp, #212]	; 0xd4
  40c2f0:	fb03 f304 	mul.w	r3, r3, r4
  40c2f4:	115b      	asrs	r3, r3, #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c2f6:	fb02 f204 	mul.w	r2, r2, r4
  40c2fa:	1152      	asrs	r2, r2, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
  40c2fc:	9c33      	ldr	r4, [sp, #204]	; 0xcc
  40c2fe:	fb04 f603 	mul.w	r6, r4, r3
  40c302:	9d32      	ldr	r5, [sp, #200]	; 0xc8
  40c304:	fb05 6612 	mls	r6, r5, r2, r6
  40c308:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40c30a:	eb00 26a6 	add.w	r6, r0, r6, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
  40c30e:	fb04 f402 	mul.w	r4, r4, r2
  40c312:	fb05 4303 	mla	r3, r5, r3, r4
  40c316:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40c318:	eb04 23a3 	add.w	r3, r4, r3, asr #10
  40c31c:	9309      	str	r3, [sp, #36]	; 0x24
  40c31e:	e7ae      	b.n	40c27e <lv_draw_map+0x436>
        *d8 = *s8;
  40c320:	f811 0b01 	ldrb.w	r0, [r1], #1
  40c324:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40c328:	3b01      	subs	r3, #1
    while(len) {
  40c32a:	2b00      	cmp	r3, #0
  40c32c:	d1f8      	bne.n	40c320 <lv_draw_map+0x4d8>
  40c32e:	9409      	str	r4, [sp, #36]	; 0x24
            px_size = LV_COLOR_SIZE >> 3;
  40c330:	2202      	movs	r2, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
  40c332:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
  40c336:	f013 0f01 	tst.w	r3, #1
  40c33a:	d00f      	beq.n	40c35c <lv_draw_map+0x514>
        lv_color_t ct = LV_COLOR_TRANSP;
  40c33c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40c33e:	f043 0307 	orr.w	r3, r3, #7
  40c342:	f36f 03c7 	bfc	r3, #3, #5
  40c346:	f36f 230c 	bfc	r3, #8, #5
  40c34a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
  40c34e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        if(dsc->res.color.full == ct.full) return false;
  40c352:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
  40c356:	b29b      	uxth	r3, r3
  40c358:	4299      	cmp	r1, r3
  40c35a:	d037      	beq.n	40c3cc <lv_draw_map+0x584>
    }

    if(dsc->cfg.antialias == false) return true;
  40c35c:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
  40c360:	2b00      	cmp	r3, #0
  40c362:	d135      	bne.n	40c3d0 <lv_draw_map+0x588>
  40c364:	9806      	ldr	r0, [sp, #24]
  40c366:	e048      	b.n	40c3fa <lv_draw_map+0x5b2>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40c368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c36a:	fb03 5302 	mla	r3, r3, r2, r5
  40c36e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40c372:	931e      	str	r3, [sp, #120]	; 0x78
  40c374:	469c      	mov	ip, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
  40c376:	18cb      	adds	r3, r1, r3
    uint8_t * d8 = (uint8_t *)dst;
  40c378:	a82c      	add	r0, sp, #176	; 0xb0
  40c37a:	2202      	movs	r2, #2
  40c37c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c37e:	e004      	b.n	40c38a <lv_draw_map+0x542>
        *d8 = *s8;
  40c380:	f813 eb01 	ldrb.w	lr, [r3], #1
  40c384:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  40c388:	3a01      	subs	r2, #1
    while(len) {
  40c38a:	2a00      	cmp	r2, #0
  40c38c:	d1f8      	bne.n	40c380 <lv_draw_map+0x538>
  40c38e:	9409      	str	r4, [sp, #36]	; 0x24
            dsc->res.opa = src_u8[pxi + px_size - 1];
  40c390:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40c392:	4419      	add	r1, r3
  40c394:	788b      	ldrb	r3, [r1, #2]
  40c396:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
  40c39a:	2203      	movs	r2, #3
  40c39c:	e7c9      	b.n	40c332 <lv_draw_map+0x4ea>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40c39e:	b229      	sxth	r1, r5
  40c3a0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  40c3a4:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  40c3a8:	9220      	str	r2, [sp, #128]	; 0x80
  40c3aa:	911e      	str	r1, [sp, #120]	; 0x78
  40c3ac:	a82d      	add	r0, sp, #180	; 0xb4
  40c3ae:	4c1b      	ldr	r4, [pc, #108]	; (40c41c <lv_draw_map+0x5d4>)
  40c3b0:	47a0      	blx	r4
  40c3b2:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
  40c3b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40c3b8:	991e      	ldr	r1, [sp, #120]	; 0x78
  40c3ba:	a82d      	add	r0, sp, #180	; 0xb4
  40c3bc:	4b18      	ldr	r3, [pc, #96]	; (40c420 <lv_draw_map+0x5d8>)
  40c3be:	4798      	blx	r3
  40c3c0:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
        pxi = 0; /*unused*/
  40c3c4:	f04f 0c00 	mov.w	ip, #0
        px_size = 0;    /*unused*/
  40c3c8:	4662      	mov	r2, ip
  40c3ca:	e7b2      	b.n	40c332 <lv_draw_map+0x4ea>
        if(dsc->res.color.full == ct.full) return false;
  40c3cc:	2000      	movs	r0, #0
  40c3ce:	e014      	b.n	40c3fa <lv_draw_map+0x5b2>

    dsc->tmp.xs = xs;
  40c3d0:	f8ad 60d8 	strh.w	r6, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
  40c3d4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c3d8:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
  40c3dc:	f8ad 50dc 	strh.w	r5, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
  40c3e0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40c3e4:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
  40c3e8:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
  40c3ec:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
  40c3f0:	a827      	add	r0, sp, #156	; 0x9c
  40c3f2:	4b0c      	ldr	r3, [pc, #48]	; (40c424 <lv_draw_map+0x5dc>)
  40c3f4:	4798      	blx	r3
  40c3f6:	e000      	b.n	40c3fa <lv_draw_map+0x5b2>
    if(xs_int >= dsc->cfg.src_w) return false;
  40c3f8:	2000      	movs	r0, #0
                        if(ret == false) {
  40c3fa:	b9b8      	cbnz	r0, 40c42c <lv_draw_map+0x5e4>
                            mask_buf[px_i] = LV_OPA_TRANSP;
  40c3fc:	2300      	movs	r3, #0
  40c3fe:	f807 3009 	strb.w	r3, [r7, r9]
                            continue;
  40c402:	e068      	b.n	40c4d6 <lv_draw_map+0x68e>
    else if(xs_int < 0) return false;
  40c404:	2000      	movs	r0, #0
  40c406:	e7f8      	b.n	40c3fa <lv_draw_map+0x5b2>
    if(ys_int >= dsc->cfg.src_h) return false;
  40c408:	2000      	movs	r0, #0
  40c40a:	e7f6      	b.n	40c3fa <lv_draw_map+0x5b2>
    else if(ys_int < 0) return false;
  40c40c:	2000      	movs	r0, #0
  40c40e:	e7f4      	b.n	40c3fa <lv_draw_map+0x5b2>
  40c410:	00414785 	.word	0x00414785
  40c414:	00411989 	.word	0x00411989
  40c418:	00415cf9 	.word	0x00415cf9
  40c41c:	00411769 	.word	0x00411769
  40c420:	0041188d 	.word	0x0041188d
  40c424:	00411c9d 	.word	0x00411c9d
  40c428:	0000e007 	.word	0x0000e007
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
  40c42c:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
  40c430:	f807 3009 	strb.w	r3, [r7, r9]
                            c.full = trans_dsc.res.color.full;
  40c434:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
  40c438:	e010      	b.n	40c45c <lv_draw_map+0x614>
#endif
                                continue;
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
  40c43a:	23ff      	movs	r3, #255	; 0xff
  40c43c:	f807 3009 	strb.w	r3, [r7, r9]
#if LV_COLOR_DEPTH == 1
                        c.full = map_px[0];
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
  40c440:	f89a 2000 	ldrb.w	r2, [sl]
  40c444:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c448:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  40c44c:	b292      	uxth	r2, r2
  40c44e:	4613      	mov	r3, r2
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
                        c.ch.alpha = 0xFF;
#endif
                        if(chroma_key) {
  40c450:	990d      	ldr	r1, [sp, #52]	; 0x34
  40c452:	b119      	cbz	r1, 40c45c <lv_draw_map+0x614>
                            if(c.full == chroma_keyed_color.full) {
  40c454:	f83f 1030 	ldrh.w	r1, [pc, #-48]	; 40c428 <lv_draw_map+0x5e0>
  40c458:	428a      	cmp	r2, r1
  40c45a:	d053      	beq.n	40c504 <lv_draw_map+0x6bc>
                                continue;
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
  40c45c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c45e:	7a92      	ldrb	r2, [r2, #10]
  40c460:	b3b2      	cbz	r2, 40c4d0 <lv_draw_map+0x688>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c462:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
  40c466:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40c46a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40c46c:	fb04 1202 	mla	r2, r4, r2, r1
  40c470:	3280      	adds	r2, #128	; 0x80
  40c472:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40c476:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40c47a:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c47e:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c482:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  40c486:	f003 0007 	and.w	r0, r3, #7
  40c48a:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40c48e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  40c492:	fb02 1204 	mla	r2, r2, r4, r1
  40c496:	3280      	adds	r2, #128	; 0x80
  40c498:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40c49c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40c4a0:	f3c2 6182 	ubfx	r1, r2, #26, #3
  40c4a4:	f361 0b02 	bfi	fp, r1, #0, #3
  40c4a8:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40c4ac:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c4b0:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
  40c4b4:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40c4b8:	fb03 2304 	mla	r3, r3, r4, r2
  40c4bc:	3380      	adds	r3, #128	; 0x80
  40c4be:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c4c2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c4c6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c4ca:	f363 2b0c 	bfi	fp, r3, #8, #5
  40c4ce:	465b      	mov	r3, fp
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
                    }

                    map2[px_i].full = c.full;
  40c4d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c4d2:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c4d6:	f108 0801 	add.w	r8, r8, #1
  40c4da:	9b07      	ldr	r3, [sp, #28]
  40c4dc:	449a      	add	sl, r3
  40c4de:	f109 0901 	add.w	r9, r9, #1
  40c4e2:	9b05      	ldr	r3, [sp, #20]
  40c4e4:	4598      	cmp	r8, r3
  40c4e6:	da11      	bge.n	40c50c <lv_draw_map+0x6c4>
                    if(transform) {
  40c4e8:	9b06      	ldr	r3, [sp, #24]
  40c4ea:	2b00      	cmp	r3, #0
  40c4ec:	f47f aea4 	bne.w	40c238 <lv_draw_map+0x3f0>
                        if(alpha_byte) {
  40c4f0:	9b08      	ldr	r3, [sp, #32]
  40c4f2:	2b00      	cmp	r3, #0
  40c4f4:	d0a1      	beq.n	40c43a <lv_draw_map+0x5f2>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40c4f6:	f89a 3002 	ldrb.w	r3, [sl, #2]
                            mask_buf[px_i] = px_opa;
  40c4fa:	f807 3009 	strb.w	r3, [r7, r9]
                            if(px_opa == 0) {
  40c4fe:	2b00      	cmp	r3, #0
  40c500:	d0e9      	beq.n	40c4d6 <lv_draw_map+0x68e>
  40c502:	e79d      	b.n	40c440 <lv_draw_map+0x5f8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
  40c504:	2300      	movs	r3, #0
  40c506:	f807 3009 	strb.w	r3, [r7, r9]
                                continue;
  40c50a:	e7e4      	b.n	40c4d6 <lv_draw_map+0x68e>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
  40c50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c50e:	bb8b      	cbnz	r3, 40c574 <lv_draw_map+0x72c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
  40c510:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c512:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c514:	9911      	ldr	r1, [sp, #68]	; 0x44
  40c516:	fb02 1303 	mla	r3, r2, r3, r1
  40c51a:	9311      	str	r3, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c51c:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40c520:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40c524:	1a9b      	subs	r3, r3, r2
  40c526:	b29b      	uxth	r3, r3
  40c528:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40c52a:	fa09 f383 	sxtah	r3, r9, r3
  40c52e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40c530:	429a      	cmp	r2, r3
  40c532:	d94c      	bls.n	40c5ce <lv_draw_map+0x786>
                    blend_area.y2 ++;
  40c534:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40c538:	3301      	adds	r3, #1
  40c53a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  40c53e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
            for(y = 0; y < draw_area_h; y++) {
  40c542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c544:	3301      	adds	r3, #1
  40c546:	930c      	str	r3, [sp, #48]	; 0x30
  40c548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c54a:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40c54c:	4293      	cmp	r3, r2
  40c54e:	da72      	bge.n	40c636 <lv_draw_map+0x7ee>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
  40c550:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c552:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  40c556:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
  40c55a:	4413      	add	r3, r2
  40c55c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c55e:	f9b2 2000 	ldrsh.w	r2, [r2]
  40c562:	1a9b      	subs	r3, r3, r2
  40c564:	930e      	str	r3, [sp, #56]	; 0x38
                map_px = map_buf_tmp;
  40c566:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c56a:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
  40c56e:	f04f 0800 	mov.w	r8, #0
  40c572:	e7b6      	b.n	40c4e2 <lv_draw_map+0x69a>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
  40c574:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c576:	443b      	add	r3, r7
  40c578:	461d      	mov	r5, r3
  40c57a:	f8bd 00e8 	ldrh.w	r0, [sp, #232]	; 0xe8
  40c57e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40c580:	8a21      	ldrh	r1, [r4, #16]
  40c582:	4401      	add	r1, r0
  40c584:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40c588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c58a:	441a      	add	r2, r3
  40c58c:	8a63      	ldrh	r3, [r4, #18]
  40c58e:	fa13 f282 	uxtah	r2, r3, r2
  40c592:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40c596:	1a1b      	subs	r3, r3, r0
  40c598:	b29b      	uxth	r3, r3
  40c59a:	3301      	adds	r3, #1
  40c59c:	b21b      	sxth	r3, r3
  40c59e:	b212      	sxth	r2, r2
  40c5a0:	b209      	sxth	r1, r1
  40c5a2:	4628      	mov	r0, r5
  40c5a4:	4c33      	ldr	r4, [pc, #204]	; (40c674 <lv_draw_map+0x82c>)
  40c5a6:	47a0      	blx	r4
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
  40c5a8:	b118      	cbz	r0, 40c5b2 <lv_draw_map+0x76a>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
  40c5aa:	2802      	cmp	r0, #2
  40c5ac:	d1b0      	bne.n	40c510 <lv_draw_map+0x6c8>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40c5ae:	901b      	str	r0, [sp, #108]	; 0x6c
  40c5b0:	e7ae      	b.n	40c510 <lv_draw_map+0x6c8>
  40c5b2:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
  40c5b6:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40c5ba:	1ac9      	subs	r1, r1, r3
  40c5bc:	b289      	uxth	r1, r1
  40c5be:	3101      	adds	r1, #1
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
  40c5c0:	b209      	sxth	r1, r1
  40c5c2:	4628      	mov	r0, r5
  40c5c4:	4b2c      	ldr	r3, [pc, #176]	; (40c678 <lv_draw_map+0x830>)
  40c5c6:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40c5c8:	2302      	movs	r3, #2
  40c5ca:	931b      	str	r3, [sp, #108]	; 0x6c
  40c5cc:	e7a0      	b.n	40c510 <lv_draw_map+0x6c8>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40c5ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40c5d0:	7bab      	ldrb	r3, [r5, #14]
  40c5d2:	9302      	str	r3, [sp, #8]
  40c5d4:	782b      	ldrb	r3, [r5, #0]
  40c5d6:	9301      	str	r3, [sp, #4]
  40c5d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c5da:	9300      	str	r3, [sp, #0]
  40c5dc:	463b      	mov	r3, r7
  40c5de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c5e0:	a925      	add	r1, sp, #148	; 0x94
  40c5e2:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c5e4:	4c25      	ldr	r4, [pc, #148]	; (40c67c <lv_draw_map+0x834>)
  40c5e6:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
  40c5e8:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40c5ec:	3301      	adds	r3, #1
  40c5ee:	b21b      	sxth	r3, r3
  40c5f0:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40c5f4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c5f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40c5fa:	b943      	cbnz	r3, 40c60e <lv_draw_map+0x7c6>
  40c5fc:	886b      	ldrh	r3, [r5, #2]
  40c5fe:	b96b      	cbnz	r3, 40c61c <lv_draw_map+0x7d4>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40c600:	892b      	ldrh	r3, [r5, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c606:	d00c      	beq.n	40c622 <lv_draw_map+0x7da>
  40c608:	2302      	movs	r3, #2
  40c60a:	931b      	str	r3, [sp, #108]	; 0x6c
  40c60c:	e001      	b.n	40c612 <lv_draw_map+0x7ca>
  40c60e:	2302      	movs	r3, #2
  40c610:	931b      	str	r3, [sp, #108]	; 0x6c

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
  40c612:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c614:	b943      	cbnz	r3, 40c628 <lv_draw_map+0x7e0>
                    px_i = 0;
  40c616:	2300      	movs	r3, #0
  40c618:	9313      	str	r3, [sp, #76]	; 0x4c
  40c61a:	e792      	b.n	40c542 <lv_draw_map+0x6fa>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c61c:	2302      	movs	r3, #2
  40c61e:	931b      	str	r3, [sp, #108]	; 0x6c
  40c620:	e7f7      	b.n	40c612 <lv_draw_map+0x7ca>
  40c622:	2301      	movs	r3, #1
  40c624:	931b      	str	r3, [sp, #108]	; 0x6c
  40c626:	e7f4      	b.n	40c612 <lv_draw_map+0x7ca>
                        _lv_memset_ff(mask_buf, mask_buf_size);
  40c628:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40c62a:	4638      	mov	r0, r7
  40c62c:	4b14      	ldr	r3, [pc, #80]	; (40c680 <lv_draw_map+0x838>)
  40c62e:	4798      	blx	r3
                    px_i = 0;
  40c630:	2300      	movs	r3, #0
  40c632:	9313      	str	r3, [sp, #76]	; 0x4c
  40c634:	e785      	b.n	40c542 <lv_draw_map+0x6fa>
  40c636:	46ba      	mov	sl, r7
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
  40c638:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40c63c:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40c640:	429a      	cmp	r2, r3
  40c642:	d00f      	beq.n	40c664 <lv_draw_map+0x81c>
                blend_area.y2--;
  40c644:	3b01      	subs	r3, #1
  40c646:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40c64a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c64c:	7b93      	ldrb	r3, [r2, #14]
  40c64e:	9302      	str	r3, [sp, #8]
  40c650:	7813      	ldrb	r3, [r2, #0]
  40c652:	9301      	str	r3, [sp, #4]
  40c654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c656:	9300      	str	r3, [sp, #0]
  40c658:	463b      	mov	r3, r7
  40c65a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c65c:	a925      	add	r1, sp, #148	; 0x94
  40c65e:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c660:	4c06      	ldr	r4, [pc, #24]	; (40c67c <lv_draw_map+0x834>)
  40c662:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
  40c664:	4650      	mov	r0, sl
  40c666:	4c07      	ldr	r4, [pc, #28]	; (40c684 <lv_draw_map+0x83c>)
  40c668:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40c66a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40c66c:	47a0      	blx	r4
        }
    }
}
  40c66e:	b03d      	add	sp, #244	; 0xf4
  40c670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c674:	0040ee65 	.word	0x0040ee65
  40c678:	00415ca1 	.word	0x00415ca1
  40c67c:	0040bd29 	.word	0x0040bd29
  40c680:	00415cf9 	.word	0x00415cf9
  40c684:	004158c5 	.word	0x004158c5

0040c688 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
  40c688:	b570      	push	{r4, r5, r6, lr}
  40c68a:	b0a0      	sub	sp, #128	; 0x80
  40c68c:	4604      	mov	r4, r0
  40c68e:	460d      	mov	r5, r1
  40c690:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
  40c692:	a80b      	add	r0, sp, #44	; 0x2c
  40c694:	4b0b      	ldr	r3, [pc, #44]	; (40c6c4 <show_error+0x3c>)
  40c696:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
  40c698:	4b0b      	ldr	r3, [pc, #44]	; (40c6c8 <show_error+0x40>)
  40c69a:	881b      	ldrh	r3, [r3, #0]
  40c69c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
  40c6a0:	aa0b      	add	r2, sp, #44	; 0x2c
  40c6a2:	4629      	mov	r1, r5
  40c6a4:	4620      	mov	r0, r4
  40c6a6:	4b09      	ldr	r3, [pc, #36]	; (40c6cc <show_error+0x44>)
  40c6a8:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  40c6aa:	a802      	add	r0, sp, #8
  40c6ac:	4b08      	ldr	r3, [pc, #32]	; (40c6d0 <show_error+0x48>)
  40c6ae:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
  40c6b0:	2300      	movs	r3, #0
  40c6b2:	9300      	str	r3, [sp, #0]
  40c6b4:	4633      	mov	r3, r6
  40c6b6:	aa02      	add	r2, sp, #8
  40c6b8:	4629      	mov	r1, r5
  40c6ba:	4620      	mov	r0, r4
  40c6bc:	4c05      	ldr	r4, [pc, #20]	; (40c6d4 <show_error+0x4c>)
  40c6be:	47a0      	blx	r4
}
  40c6c0:	b020      	add	sp, #128	; 0x80
  40c6c2:	bd70      	pop	{r4, r5, r6, pc}
  40c6c4:	004116a5 	.word	0x004116a5
  40c6c8:	00421290 	.word	0x00421290
  40c6cc:	004116f1 	.word	0x004116f1
  40c6d0:	0040d26d 	.word	0x0040d26d
  40c6d4:	0040d2b5 	.word	0x0040d2b5

0040c6d8 <lv_draw_img_dsc_init>:
{
  40c6d8:	b510      	push	{r4, lr}
  40c6da:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  40c6dc:	2110      	movs	r1, #16
  40c6de:	4b07      	ldr	r3, [pc, #28]	; (40c6fc <lv_draw_img_dsc_init+0x24>)
  40c6e0:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
  40c6e2:	2300      	movs	r3, #0
  40c6e4:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
  40c6e6:	23ff      	movs	r3, #255	; 0xff
  40c6e8:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
  40c6ea:	f44f 7380 	mov.w	r3, #256	; 0x100
  40c6ee:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
  40c6f0:	7be3      	ldrb	r3, [r4, #15]
  40c6f2:	f043 0301 	orr.w	r3, r3, #1
  40c6f6:	73e3      	strb	r3, [r4, #15]
  40c6f8:	bd10      	pop	{r4, pc}
  40c6fa:	bf00      	nop
  40c6fc:	00415ca1 	.word	0x00415ca1

0040c700 <lv_img_cf_get_px_size>:
    switch(cf) {
  40c700:	3804      	subs	r0, #4
  40c702:	280a      	cmp	r0, #10
  40c704:	d807      	bhi.n	40c716 <lv_img_cf_get_px_size+0x16>
  40c706:	e8df f000 	tbb	[pc, r0]
  40c70a:	0812      	.short	0x0812
  40c70c:	0e0c0a12 	.word	0x0e0c0a12
  40c710:	0e0c0a10 	.word	0x0e0c0a10
  40c714:	10          	.byte	0x10
  40c715:	00          	.byte	0x00
            px_size = 0;
  40c716:	2000      	movs	r0, #0
  40c718:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
  40c71a:	2018      	movs	r0, #24
            break;
  40c71c:	4770      	bx	lr
            px_size = 1;
  40c71e:	2001      	movs	r0, #1
            break;
  40c720:	4770      	bx	lr
            px_size = 2;
  40c722:	2002      	movs	r0, #2
            break;
  40c724:	4770      	bx	lr
            px_size = 4;
  40c726:	2004      	movs	r0, #4
            break;
  40c728:	4770      	bx	lr
            px_size = 8;
  40c72a:	2008      	movs	r0, #8
            break;
  40c72c:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
  40c72e:	2010      	movs	r0, #16
}
  40c730:	4770      	bx	lr

0040c732 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
  40c732:	2803      	cmp	r0, #3
  40c734:	d005      	beq.n	40c742 <lv_img_cf_is_chroma_keyed+0x10>
  40c736:	d302      	bcc.n	40c73e <lv_img_cf_is_chroma_keyed+0xc>
  40c738:	3806      	subs	r0, #6
  40c73a:	2804      	cmp	r0, #4
  40c73c:	d901      	bls.n	40c742 <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
  40c73e:	2000      	movs	r0, #0
}
  40c740:	4770      	bx	lr
            is_chroma_keyed = true;
  40c742:	2001      	movs	r0, #1
  40c744:	4770      	bx	lr

0040c746 <lv_img_cf_has_alpha>:
    switch(cf) {
  40c746:	3802      	subs	r0, #2
  40c748:	280c      	cmp	r0, #12
  40c74a:	d80a      	bhi.n	40c762 <lv_img_cf_has_alpha+0x1c>
  40c74c:	e8df f000 	tbb	[pc, r0]
  40c750:	07090907 	.word	0x07090907
  40c754:	07070709 	.word	0x07070709
  40c758:	07070707 	.word	0x07070707
  40c75c:	07          	.byte	0x07
  40c75d:	00          	.byte	0x00
            has_alpha = true;
  40c75e:	2001      	movs	r0, #1
  40c760:	4770      	bx	lr
            has_alpha = false;
  40c762:	2000      	movs	r0, #0
}
  40c764:	4770      	bx	lr
	...

0040c768 <lv_img_draw_core>:
{
  40c768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c76c:	b08f      	sub	sp, #60	; 0x3c
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
  40c76e:	781c      	ldrb	r4, [r3, #0]
  40c770:	2c02      	cmp	r4, #2
  40c772:	d803      	bhi.n	40c77c <lv_img_draw_core+0x14>
  40c774:	2001      	movs	r0, #1
}
  40c776:	b00f      	add	sp, #60	; 0x3c
  40c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c77c:	461c      	mov	r4, r3
  40c77e:	460d      	mov	r5, r1
  40c780:	4682      	mov	sl, r0
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
  40c782:	8999      	ldrh	r1, [r3, #12]
  40c784:	4610      	mov	r0, r2
  40c786:	4b73      	ldr	r3, [pc, #460]	; (40c954 <lv_img_draw_core+0x1ec>)
  40c788:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
  40c78a:	4606      	mov	r6, r0
  40c78c:	2800      	cmp	r0, #0
  40c78e:	f000 80de 	beq.w	40c94e <lv_img_draw_core+0x1e6>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
  40c792:	f890 800c 	ldrb.w	r8, [r0, #12]
  40c796:	f008 081f 	and.w	r8, r8, #31
  40c79a:	4640      	mov	r0, r8
  40c79c:	4b6e      	ldr	r3, [pc, #440]	; (40c958 <lv_img_draw_core+0x1f0>)
  40c79e:	4798      	blx	r3
  40c7a0:	4607      	mov	r7, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
  40c7a2:	4640      	mov	r0, r8
  40c7a4:	4b6d      	ldr	r3, [pc, #436]	; (40c95c <lv_img_draw_core+0x1f4>)
  40c7a6:	4798      	blx	r3
  40c7a8:	4680      	mov	r8, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
  40c7aa:	69b2      	ldr	r2, [r6, #24]
  40c7ac:	b12a      	cbz	r2, 40c7ba <lv_img_draw_core+0x52>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
  40c7ae:	4629      	mov	r1, r5
  40c7b0:	4650      	mov	r0, sl
  40c7b2:	4b6b      	ldr	r3, [pc, #428]	; (40c960 <lv_img_draw_core+0x1f8>)
  40c7b4:	4798      	blx	r3
    return LV_RES_OK;
  40c7b6:	2001      	movs	r0, #1
  40c7b8:	e7dd      	b.n	40c776 <lv_img_draw_core+0xe>
    else if(cdsc->dec_dsc.img_data) {
  40c7ba:	6933      	ldr	r3, [r6, #16]
  40c7bc:	2b00      	cmp	r3, #0
  40c7be:	d053      	beq.n	40c868 <lv_img_draw_core+0x100>
  40c7c0:	4651      	mov	r1, sl
  40c7c2:	aa0a      	add	r2, sp, #40	; 0x28
  40c7c4:	2308      	movs	r3, #8
  40c7c6:	e004      	b.n	40c7d2 <lv_img_draw_core+0x6a>
        *d8 = *s8;
  40c7c8:	f811 0b01 	ldrb.w	r0, [r1], #1
  40c7cc:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40c7d0:	3b01      	subs	r3, #1
    while(len) {
  40c7d2:	2b00      	cmp	r3, #0
  40c7d4:	d1f8      	bne.n	40c7c8 <lv_img_draw_core+0x60>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
  40c7d6:	8863      	ldrh	r3, [r4, #2]
  40c7d8:	b91b      	cbnz	r3, 40c7e2 <lv_img_draw_core+0x7a>
  40c7da:	8922      	ldrh	r2, [r4, #8]
  40c7dc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  40c7e0:	d030      	beq.n	40c844 <lv_img_draw_core+0xdc>
  40c7e2:	f8ba 1004 	ldrh.w	r1, [sl, #4]
  40c7e6:	f8ba 2000 	ldrh.w	r2, [sl]
  40c7ea:	1a89      	subs	r1, r1, r2
  40c7ec:	b289      	uxth	r1, r1
  40c7ee:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c7f0:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  40c7f4:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  40c7f8:	1a12      	subs	r2, r2, r0
  40c7fa:	b292      	uxth	r2, r2
  40c7fc:	3201      	adds	r2, #1
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
  40c7fe:	1d20      	adds	r0, r4, #4
  40c800:	9001      	str	r0, [sp, #4]
  40c802:	8920      	ldrh	r0, [r4, #8]
  40c804:	9000      	str	r0, [sp, #0]
  40c806:	b21b      	sxth	r3, r3
  40c808:	b212      	sxth	r2, r2
  40c80a:	b209      	sxth	r1, r1
  40c80c:	a80a      	add	r0, sp, #40	; 0x28
  40c80e:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40c980 <lv_img_draw_core+0x218>
  40c812:	47c8      	blx	r9
            map_area_rot.x1 += coords->x1;
  40c814:	f8ba 2000 	ldrh.w	r2, [sl]
  40c818:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40c81c:	4413      	add	r3, r2
  40c81e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
  40c822:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  40c826:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
  40c82a:	4419      	add	r1, r3
  40c82c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
  40c830:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  40c834:	440a      	add	r2, r1
  40c836:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
  40c83a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  40c83e:	4413      	add	r3, r2
  40c840:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
  40c844:	aa0a      	add	r2, sp, #40	; 0x28
  40c846:	4629      	mov	r1, r5
  40c848:	a80c      	add	r0, sp, #48	; 0x30
  40c84a:	4b46      	ldr	r3, [pc, #280]	; (40c964 <lv_img_draw_core+0x1fc>)
  40c84c:	4798      	blx	r3
        if(union_ok == false) {
  40c84e:	b908      	cbnz	r0, 40c854 <lv_img_draw_core+0xec>
            return LV_RES_OK;
  40c850:	2001      	movs	r0, #1
  40c852:	e790      	b.n	40c776 <lv_img_draw_core+0xe>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
  40c854:	6932      	ldr	r2, [r6, #16]
  40c856:	f8cd 8004 	str.w	r8, [sp, #4]
  40c85a:	9700      	str	r7, [sp, #0]
  40c85c:	4623      	mov	r3, r4
  40c85e:	a90c      	add	r1, sp, #48	; 0x30
  40c860:	4650      	mov	r0, sl
  40c862:	4c41      	ldr	r4, [pc, #260]	; (40c968 <lv_img_draw_core+0x200>)
  40c864:	47a0      	blx	r4
  40c866:	e7a6      	b.n	40c7b6 <lv_img_draw_core+0x4e>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
  40c868:	4652      	mov	r2, sl
  40c86a:	4629      	mov	r1, r5
  40c86c:	a808      	add	r0, sp, #32
  40c86e:	4b3d      	ldr	r3, [pc, #244]	; (40c964 <lv_img_draw_core+0x1fc>)
  40c870:	4798      	blx	r3
        if(union_ok == false) {
  40c872:	b908      	cbnz	r0, 40c878 <lv_img_draw_core+0x110>
            return LV_RES_OK;
  40c874:	2001      	movs	r0, #1
  40c876:	e77e      	b.n	40c776 <lv_img_draw_core+0xe>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c878:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c87c:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  40c880:	f839 2d18 	ldrh.w	r2, [r9, #-24]!
  40c884:	1a9b      	subs	r3, r3, r2
  40c886:	b29b      	uxth	r3, r3
  40c888:	3301      	adds	r3, #1
  40c88a:	b21b      	sxth	r3, r3
  40c88c:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
  40c88e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40c892:	4b36      	ldr	r3, [pc, #216]	; (40c96c <lv_img_draw_core+0x204>)
  40c894:	4798      	blx	r3
  40c896:	9007      	str	r0, [sp, #28]
    uint8_t * d8 = (uint8_t *)dst;
  40c898:	aa0a      	add	r2, sp, #40	; 0x28
  40c89a:	2308      	movs	r3, #8
  40c89c:	e004      	b.n	40c8a8 <lv_img_draw_core+0x140>
        *d8 = *s8;
  40c89e:	f819 1b01 	ldrb.w	r1, [r9], #1
  40c8a2:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  40c8a6:	3b01      	subs	r3, #1
    while(len) {
  40c8a8:	2b00      	cmp	r3, #0
  40c8aa:	d1f8      	bne.n	40c89e <lv_img_draw_core+0x136>
        lv_area_set_height(&line, 1);
  40c8ac:	2101      	movs	r1, #1
  40c8ae:	a80a      	add	r0, sp, #40	; 0x28
  40c8b0:	4b2f      	ldr	r3, [pc, #188]	; (40c970 <lv_img_draw_core+0x208>)
  40c8b2:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
  40c8b4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40c8b8:	f9ba 2000 	ldrsh.w	r2, [sl]
        int32_t y = mask_com.y1 - coords->y1;
  40c8bc:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
  40c8c0:	f9ba a002 	ldrsh.w	sl, [sl, #2]
  40c8c4:	eba9 0a0a 	sub.w	sl, r9, sl
  40c8c8:	9604      	str	r6, [sp, #16]
  40c8ca:	9e07      	ldr	r6, [sp, #28]
  40c8cc:	469b      	mov	fp, r3
  40c8ce:	9502      	str	r5, [sp, #8]
  40c8d0:	4615      	mov	r5, r2
  40c8d2:	9406      	str	r4, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40c8d4:	e009      	b.n	40c8ea <lv_img_draw_core+0x182>
                lv_img_decoder_close(&cdsc->dec_dsc);
  40c8d6:	9805      	ldr	r0, [sp, #20]
  40c8d8:	4b26      	ldr	r3, [pc, #152]	; (40c974 <lv_img_draw_core+0x20c>)
  40c8da:	4798      	blx	r3
                _lv_mem_buf_release(buf);
  40c8dc:	9807      	ldr	r0, [sp, #28]
  40c8de:	4b26      	ldr	r3, [pc, #152]	; (40c978 <lv_img_draw_core+0x210>)
  40c8e0:	4798      	blx	r3
                return LV_RES_INV;
  40c8e2:	2000      	movs	r0, #0
  40c8e4:	e747      	b.n	40c776 <lv_img_draw_core+0xe>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40c8e6:	f109 0901 	add.w	r9, r9, #1
  40c8ea:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40c8ee:	4599      	cmp	r9, r3
  40c8f0:	dc29      	bgt.n	40c946 <lv_img_draw_core+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40c8f2:	aa0a      	add	r2, sp, #40	; 0x28
  40c8f4:	9902      	ldr	r1, [sp, #8]
  40c8f6:	a80c      	add	r0, sp, #48	; 0x30
  40c8f8:	4b1a      	ldr	r3, [pc, #104]	; (40c964 <lv_img_draw_core+0x1fc>)
  40c8fa:	4798      	blx	r3
            if(union_ok == false) continue;
  40c8fc:	2800      	cmp	r0, #0
  40c8fe:	d0f2      	beq.n	40c8e6 <lv_img_draw_core+0x17e>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  40c900:	9804      	ldr	r0, [sp, #16]
  40c902:	9005      	str	r0, [sp, #20]
  40c904:	ebab 0105 	sub.w	r1, fp, r5
  40c908:	9600      	str	r6, [sp, #0]
  40c90a:	9b03      	ldr	r3, [sp, #12]
  40c90c:	fa0f f28a 	sxth.w	r2, sl
  40c910:	b209      	sxth	r1, r1
  40c912:	4c1a      	ldr	r4, [pc, #104]	; (40c97c <lv_img_draw_core+0x214>)
  40c914:	47a0      	blx	r4
            if(read_res != LV_RES_OK) {
  40c916:	2801      	cmp	r0, #1
  40c918:	d1dd      	bne.n	40c8d6 <lv_img_draw_core+0x16e>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
  40c91a:	f8cd 8004 	str.w	r8, [sp, #4]
  40c91e:	9700      	str	r7, [sp, #0]
  40c920:	9b06      	ldr	r3, [sp, #24]
  40c922:	4632      	mov	r2, r6
  40c924:	a90c      	add	r1, sp, #48	; 0x30
  40c926:	a80a      	add	r0, sp, #40	; 0x28
  40c928:	4c0f      	ldr	r4, [pc, #60]	; (40c968 <lv_img_draw_core+0x200>)
  40c92a:	47a0      	blx	r4
            line.y1++;
  40c92c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  40c930:	3301      	adds	r3, #1
  40c932:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
  40c936:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  40c93a:	3301      	adds	r3, #1
  40c93c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
  40c940:	f10a 0a01 	add.w	sl, sl, #1
  40c944:	e7cf      	b.n	40c8e6 <lv_img_draw_core+0x17e>
        _lv_mem_buf_release(buf);
  40c946:	9807      	ldr	r0, [sp, #28]
  40c948:	4b0b      	ldr	r3, [pc, #44]	; (40c978 <lv_img_draw_core+0x210>)
  40c94a:	4798      	blx	r3
  40c94c:	e733      	b.n	40c7b6 <lv_img_draw_core+0x4e>
    if(cdsc == NULL) return LV_RES_INV;
  40c94e:	2000      	movs	r0, #0
  40c950:	e711      	b.n	40c776 <lv_img_draw_core+0xe>
  40c952:	bf00      	nop
  40c954:	00412129 	.word	0x00412129
  40c958:	0040c733 	.word	0x0040c733
  40c95c:	0040c747 	.word	0x0040c747
  40c960:	0040c689 	.word	0x0040c689
  40c964:	004147a1 	.word	0x004147a1
  40c968:	0040be49 	.word	0x0040be49
  40c96c:	00415b15 	.word	0x00415b15
  40c970:	00414779 	.word	0x00414779
  40c974:	00412c75 	.word	0x00412c75
  40c978:	004158c5 	.word	0x004158c5
  40c97c:	00412c51 	.word	0x00412c51
  40c980:	00411ab1 	.word	0x00411ab1

0040c984 <lv_draw_img>:
{
  40c984:	b570      	push	{r4, r5, r6, lr}
  40c986:	4604      	mov	r4, r0
  40c988:	460d      	mov	r5, r1
    if(src == NULL) {
  40c98a:	b122      	cbz	r2, 40c996 <lv_draw_img+0x12>
  40c98c:	4611      	mov	r1, r2
    if(dsc->opa <= LV_OPA_MIN) return;
  40c98e:	781a      	ldrb	r2, [r3, #0]
  40c990:	2a02      	cmp	r2, #2
  40c992:	d804      	bhi.n	40c99e <lv_draw_img+0x1a>
  40c994:	bd70      	pop	{r4, r5, r6, pc}
        show_error(coords, mask, "No\ndata");
  40c996:	4a08      	ldr	r2, [pc, #32]	; (40c9b8 <lv_draw_img+0x34>)
  40c998:	4b08      	ldr	r3, [pc, #32]	; (40c9bc <lv_draw_img+0x38>)
  40c99a:	4798      	blx	r3
        return;
  40c99c:	bd70      	pop	{r4, r5, r6, pc}
    res = lv_img_draw_core(coords, mask, src, dsc);
  40c99e:	460a      	mov	r2, r1
  40c9a0:	4629      	mov	r1, r5
  40c9a2:	4e07      	ldr	r6, [pc, #28]	; (40c9c0 <lv_draw_img+0x3c>)
  40c9a4:	47b0      	blx	r6
    if(res == LV_RES_INV) {
  40c9a6:	2800      	cmp	r0, #0
  40c9a8:	d1f4      	bne.n	40c994 <lv_draw_img+0x10>
        show_error(coords, mask, "No\ndata");
  40c9aa:	4a03      	ldr	r2, [pc, #12]	; (40c9b8 <lv_draw_img+0x34>)
  40c9ac:	4629      	mov	r1, r5
  40c9ae:	4620      	mov	r0, r4
  40c9b0:	4b02      	ldr	r3, [pc, #8]	; (40c9bc <lv_draw_img+0x38>)
  40c9b2:	4798      	blx	r3
        return;
  40c9b4:	e7ee      	b.n	40c994 <lv_draw_img+0x10>
  40c9b6:	bf00      	nop
  40c9b8:	00421294 	.word	0x00421294
  40c9bc:	0040c689 	.word	0x0040c689
  40c9c0:	0040c769 	.word	0x0040c769

0040c9c4 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
  40c9c4:	b160      	cbz	r0, 40c9e0 <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
  40c9c6:	7802      	ldrb	r2, [r0, #0]
  40c9c8:	f1a2 0320 	sub.w	r3, r2, #32
  40c9cc:	b2db      	uxtb	r3, r3
  40c9ce:	2b5f      	cmp	r3, #95	; 0x5f
  40c9d0:	d908      	bls.n	40c9e4 <lv_img_src_get_type+0x20>
    else if(u8_p[0] >= 0x80) {
  40c9d2:	f012 0f80 	tst.w	r2, #128	; 0x80
  40c9d6:	d101      	bne.n	40c9dc <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
  40c9d8:	2000      	movs	r0, #0
}
  40c9da:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
  40c9dc:	2002      	movs	r0, #2
  40c9de:	4770      	bx	lr
    if(src == NULL) return img_src_type;
  40c9e0:	2003      	movs	r0, #3
  40c9e2:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
  40c9e4:	2001      	movs	r0, #1
  40c9e6:	4770      	bx	lr

0040c9e8 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
  40c9e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40c9ec:	b2db      	uxtb	r3, r3
  40c9ee:	2b09      	cmp	r3, #9
  40c9f0:	d917      	bls.n	40ca22 <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
  40c9f2:	2860      	cmp	r0, #96	; 0x60
  40c9f4:	d901      	bls.n	40c9fa <hex_char_to_num+0x12>
  40c9f6:	3820      	subs	r0, #32
  40c9f8:	b2c0      	uxtb	r0, r0

        switch(hex) {
  40c9fa:	3841      	subs	r0, #65	; 0x41
  40c9fc:	2805      	cmp	r0, #5
  40c9fe:	d80e      	bhi.n	40ca1e <hex_char_to_num+0x36>
  40ca00:	e8df f000 	tbb	[pc, r0]
  40ca04:	07051103 	.word	0x07051103
  40ca08:	0b09      	.short	0x0b09
            case 'A':
                result = 10;
  40ca0a:	200a      	movs	r0, #10
  40ca0c:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
  40ca0e:	200c      	movs	r0, #12
                break;
  40ca10:	4770      	bx	lr
            case 'D':
                result = 13;
  40ca12:	200d      	movs	r0, #13
                break;
  40ca14:	4770      	bx	lr
            case 'E':
                result = 14;
  40ca16:	200e      	movs	r0, #14
                break;
  40ca18:	4770      	bx	lr
            case 'F':
                result = 15;
  40ca1a:	200f      	movs	r0, #15
                break;
  40ca1c:	4770      	bx	lr
            default:
                result = 0;
  40ca1e:	2000      	movs	r0, #0
                break;
  40ca20:	4770      	bx	lr
        result = hex - '0';
  40ca22:	4618      	mov	r0, r3
  40ca24:	4770      	bx	lr
                result = 11;
  40ca26:	200b      	movs	r0, #11
        }
    }

    return result;
}
  40ca28:	4770      	bx	lr
	...

0040ca2c <draw_letter_subpx>:
{
  40ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ca30:	b09d      	sub	sp, #116	; 0x74
  40ca32:	f8bd 909c 	ldrh.w	r9, [sp, #156]	; 0x9c
  40ca36:	f89d 40a0 	ldrb.w	r4, [sp, #160]	; 0xa0
  40ca3a:	9409      	str	r4, [sp, #36]	; 0x24
  40ca3c:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
  40ca40:	9416      	str	r4, [sp, #88]	; 0x58
    uint32_t bpp = g->bpp;
  40ca42:	7a95      	ldrb	r5, [r2, #10]
    if(bpp == 3) bpp = 4;
  40ca44:	2d03      	cmp	r5, #3
  40ca46:	d00d      	beq.n	40ca64 <draw_letter_subpx+0x38>
    switch(bpp) {
  40ca48:	1e6c      	subs	r4, r5, #1
  40ca4a:	2c07      	cmp	r4, #7
  40ca4c:	f200 820e 	bhi.w	40ce6c <draw_letter_subpx+0x440>
  40ca50:	e8df f014 	tbh	[pc, r4, lsl #1]
  40ca54:	0019000a 	.word	0x0019000a
  40ca58:	000f020c 	.word	0x000f020c
  40ca5c:	020c020c 	.word	0x020c020c
  40ca60:	0014020c 	.word	0x0014020c
    if(bpp == 3) bpp = 4;
  40ca64:	2504      	movs	r5, #4
  40ca66:	e7ef      	b.n	40ca48 <draw_letter_subpx+0x1c>
            bitmask_init  = 0x80;
  40ca68:	2480      	movs	r4, #128	; 0x80
  40ca6a:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp1_opa_table;
  40ca6c:	4caf      	ldr	r4, [pc, #700]	; (40cd2c <draw_letter_subpx+0x300>)
  40ca6e:	940b      	str	r4, [sp, #44]	; 0x2c
  40ca70:	e00d      	b.n	40ca8e <draw_letter_subpx+0x62>
            bitmask_init  = 0xF0;
  40ca72:	24f0      	movs	r4, #240	; 0xf0
  40ca74:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp4_opa_table;
  40ca76:	4cae      	ldr	r4, [pc, #696]	; (40cd30 <draw_letter_subpx+0x304>)
  40ca78:	940b      	str	r4, [sp, #44]	; 0x2c
            break;
  40ca7a:	e008      	b.n	40ca8e <draw_letter_subpx+0x62>
            bitmask_init  = 0xFF;
  40ca7c:	24ff      	movs	r4, #255	; 0xff
  40ca7e:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp8_opa_table;
  40ca80:	4cac      	ldr	r4, [pc, #688]	; (40cd34 <draw_letter_subpx+0x308>)
  40ca82:	940b      	str	r4, [sp, #44]	; 0x2c
            break;       /*No opa table, pixel value will be used directly*/
  40ca84:	e003      	b.n	40ca8e <draw_letter_subpx+0x62>
            bitmask_init  = 0xC0;
  40ca86:	24c0      	movs	r4, #192	; 0xc0
  40ca88:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp2_opa_table;
  40ca8a:	4cab      	ldr	r4, [pc, #684]	; (40cd38 <draw_letter_subpx+0x30c>)
  40ca8c:	940b      	str	r4, [sp, #44]	; 0x2c
    int32_t box_w = g->box_w;
  40ca8e:	8854      	ldrh	r4, [r2, #2]
  40ca90:	9411      	str	r4, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
  40ca92:	f8b2 e004 	ldrh.w	lr, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40ca96:	fb05 f604 	mul.w	r6, r5, r4
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40ca9a:	f9b3 2000 	ldrsh.w	r2, [r3]
  40ca9e:	4282      	cmp	r2, r0
  40caa0:	f340 8097 	ble.w	40cbd2 <draw_letter_subpx+0x1a6>
  40caa4:	1a12      	subs	r2, r2, r0
  40caa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40caaa:	920f      	str	r2, [sp, #60]	; 0x3c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40caac:	4aa3      	ldr	r2, [pc, #652]	; (40cd3c <draw_letter_subpx+0x310>)
  40caae:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40cab0:	fb82 4204 	smull	r4, r2, r2, r4
  40cab4:	4402      	add	r2, r0
  40cab6:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  40caba:	42a2      	cmp	r2, r4
  40cabc:	f340 808c 	ble.w	40cbd8 <draw_letter_subpx+0x1ac>
  40cac0:	1a22      	subs	r2, r4, r0
  40cac2:	3201      	adds	r2, #1
  40cac4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40cac8:	9208      	str	r2, [sp, #32]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40caca:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40cace:	428a      	cmp	r2, r1
  40cad0:	f340 8085 	ble.w	40cbde <draw_letter_subpx+0x1b2>
  40cad4:	1a52      	subs	r2, r2, r1
  40cad6:	920d      	str	r2, [sp, #52]	; 0x34
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40cad8:	eb0e 0201 	add.w	r2, lr, r1
  40cadc:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
  40cae0:	42a2      	cmp	r2, r4
  40cae2:	dd7f      	ble.n	40cbe4 <draw_letter_subpx+0x1b8>
  40cae4:	1a64      	subs	r4, r4, r1
  40cae6:	1c62      	adds	r2, r4, #1
  40cae8:	9213      	str	r2, [sp, #76]	; 0x4c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40caea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40caec:	fb05 f402 	mul.w	r4, r5, r2
  40caf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40caf2:	fb06 4402 	mla	r4, r6, r2, r4
    map_p += bit_ofs >> 3;
  40caf6:	9e26      	ldr	r6, [sp, #152]	; 0x98
  40caf8:	eb06 06e4 	add.w	r6, r6, r4, asr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40cafc:	f004 0407 	and.w	r4, r4, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
  40cb00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cb02:	fb0e f202 	mul.w	r2, lr, r2
  40cb06:	9212      	str	r2, [sp, #72]	; 0x48
  40cb08:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
  40cb0c:	dd02      	ble.n	40cb14 <draw_letter_subpx+0xe8>
  40cb0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40cb12:	9212      	str	r2, [sp, #72]	; 0x48
  40cb14:	9317      	str	r3, [sp, #92]	; 0x5c
  40cb16:	468a      	mov	sl, r1
  40cb18:	4683      	mov	fp, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40cb1a:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40cb1c:	4638      	mov	r0, r7
  40cb1e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40cd4c <draw_letter_subpx+0x320>
  40cb22:	47c0      	blx	r8
  40cb24:	900c      	str	r0, [sp, #48]	; 0x30
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40cb26:	0078      	lsls	r0, r7, #1
  40cb28:	47c0      	blx	r8
  40cb2a:	900e      	str	r0, [sp, #56]	; 0x38
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40cb2c:	4b84      	ldr	r3, [pc, #528]	; (40cd40 <draw_letter_subpx+0x314>)
  40cb2e:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40cb30:	4b84      	ldr	r3, [pc, #528]	; (40cd44 <draw_letter_subpx+0x318>)
  40cb32:	4798      	blx	r3
  40cb34:	8a83      	ldrh	r3, [r0, #20]
  40cb36:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
  40cb3a:	b291      	uxth	r1, r2
  40cb3c:	1a5b      	subs	r3, r3, r1
  40cb3e:	b29b      	uxth	r3, r3
  40cb40:	3301      	adds	r3, #1
  40cb42:	b21b      	sxth	r3, r3
  40cb44:	4619      	mov	r1, r3
  40cb46:	9314      	str	r3, [sp, #80]	; 0x50
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
  40cb48:	f8d0 8008 	ldr.w	r8, [r0, #8]
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
  40cb4c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  40cb50:	ebaa 0303 	sub.w	r3, sl, r3
  40cb54:	4608      	mov	r0, r1
  40cb56:	fb03 b301 	mla	r3, r3, r1, fp
  40cb5a:	1a9b      	subs	r3, r3, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
  40cb5c:	4a77      	ldr	r2, [pc, #476]	; (40cd3c <draw_letter_subpx+0x310>)
  40cb5e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40cb60:	fb82 e107 	smull	lr, r1, r2, r7
  40cb64:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40cb68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40cb6a:	fb00 1007 	mla	r0, r0, r7, r1
  40cb6e:	0040      	lsls	r0, r0, #1
  40cb70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  40cb74:	4498      	add	r8, r3
    map_area.x1 = col_start / 3 + pos_x;
  40cb76:	fa1f f08b 	uxth.w	r0, fp
  40cb7a:	4401      	add	r1, r0
  40cb7c:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    map_area.x2 = col_end / 3  + pos_x - 1;
  40cb80:	9908      	ldr	r1, [sp, #32]
  40cb82:	fb82 2301 	smull	r2, r3, r2, r1
  40cb86:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  40cb8a:	4403      	add	r3, r0
  40cb8c:	b29b      	uxth	r3, r3
  40cb8e:	3b01      	subs	r3, #1
  40cb90:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    map_area.y1 = row_start + pos_y;
  40cb94:	eb07 030a 	add.w	r3, r7, sl
  40cb98:	b21b      	sxth	r3, r3
  40cb9a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    map_area.y2 = map_area.y1;
  40cb9e:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40cba2:	4b69      	ldr	r3, [pc, #420]	; (40cd48 <draw_letter_subpx+0x31c>)
  40cba4:	4798      	blx	r3
  40cba6:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
  40cba8:	f3c9 03c4 	ubfx	r3, r9, #3, #5
  40cbac:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  40cbb0:	f009 0207 	and.w	r2, r9, #7
  40cbb4:	f3c9 3342 	ubfx	r3, r9, #13, #3
  40cbb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40cbbc:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
  40cbc0:	f3c9 2904 	ubfx	r9, r9, #8, #5
  40cbc4:	f88d 9062 	strb.w	r9, [sp, #98]	; 0x62
    int32_t mask_p = 0;
  40cbc8:	2300      	movs	r3, #0
  40cbca:	9310      	str	r3, [sp, #64]	; 0x40
  40cbcc:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    for(row = row_start ; row < row_end; row++) {
  40cbd0:	e0eb      	b.n	40cdaa <draw_letter_subpx+0x37e>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40cbd2:	2200      	movs	r2, #0
  40cbd4:	920f      	str	r2, [sp, #60]	; 0x3c
  40cbd6:	e769      	b.n	40caac <draw_letter_subpx+0x80>
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40cbd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cbda:	9208      	str	r2, [sp, #32]
  40cbdc:	e775      	b.n	40caca <draw_letter_subpx+0x9e>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40cbde:	2200      	movs	r2, #0
  40cbe0:	920d      	str	r2, [sp, #52]	; 0x34
  40cbe2:	e779      	b.n	40cad8 <draw_letter_subpx+0xac>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40cbe4:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  40cbe8:	e77f      	b.n	40caea <draw_letter_subpx+0xbe>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
  40cbea:	2d08      	cmp	r5, #8
  40cbec:	d00b      	beq.n	40cc06 <draw_letter_subpx+0x1da>
  40cbee:	b2db      	uxtb	r3, r3
  40cbf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cbf2:	5cd2      	ldrb	r2, [r2, r3]
  40cbf4:	e007      	b.n	40cc06 <draw_letter_subpx+0x1da>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40cbf6:	b2da      	uxtb	r2, r3
  40cbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cbfa:	fb03 f202 	mul.w	r2, r3, r2
  40cbfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40cc02:	e000      	b.n	40cc06 <draw_letter_subpx+0x1da>
                px_opa = 0;
  40cc04:	2200      	movs	r2, #0
            font_rgb[subpx_cnt] = px_opa;
  40cc06:	ab1c      	add	r3, sp, #112	; 0x70
  40cc08:	440b      	add	r3, r1
  40cc0a:	f803 2c0c 	strb.w	r2, [r3, #-12]
            subpx_cnt ++;
  40cc0e:	3101      	adds	r1, #1
            if(subpx_cnt == 3) {
  40cc10:	2903      	cmp	r1, #3
  40cc12:	d028      	beq.n	40cc66 <draw_letter_subpx+0x23a>
            if(col_bit < (int32_t)(8 - bpp)) {
  40cc14:	f1c5 0308 	rsb	r3, r5, #8
  40cc18:	429c      	cmp	r4, r3
  40cc1a:	f280 8081 	bge.w	40cd20 <draw_letter_subpx+0x2f4>
                col_bit += bpp;
  40cc1e:	9b05      	ldr	r3, [sp, #20]
  40cc20:	442b      	add	r3, r5
  40cc22:	461c      	mov	r4, r3
                bitmask = bitmask >> bpp;
  40cc24:	fa2e fe05 	lsr.w	lr, lr, r5
        for(col = col_start; col < col_end; col++) {
  40cc28:	3001      	adds	r0, #1
  40cc2a:	9b08      	ldr	r3, [sp, #32]
  40cc2c:	4298      	cmp	r0, r3
  40cc2e:	f280 808f 	bge.w	40cd50 <draw_letter_subpx+0x324>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
  40cc32:	7833      	ldrb	r3, [r6, #0]
  40cc34:	ea0e 0203 	and.w	r2, lr, r3
  40cc38:	9405      	str	r4, [sp, #20]
  40cc3a:	426b      	negs	r3, r5
  40cc3c:	1b1b      	subs	r3, r3, r4
  40cc3e:	3308      	adds	r3, #8
  40cc40:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
  40cc44:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
  40cc48:	d0dc      	beq.n	40cc04 <draw_letter_subpx+0x1d8>
                if(opa == LV_OPA_COVER) {
  40cc4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40cc4c:	2fff      	cmp	r7, #255	; 0xff
  40cc4e:	d0cc      	beq.n	40cbea <draw_letter_subpx+0x1be>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40cc50:	2d08      	cmp	r5, #8
  40cc52:	d0d0      	beq.n	40cbf6 <draw_letter_subpx+0x1ca>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
  40cc54:	b2db      	uxtb	r3, r3
  40cc56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cc58:	5cd2      	ldrb	r2, [r2, r3]
  40cc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cc5c:	fb02 f203 	mul.w	r2, r2, r3
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40cc60:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40cc64:	e7cf      	b.n	40cc06 <draw_letter_subpx+0x1da>
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red,
  40cc66:	f898 9000 	ldrb.w	r9, [r8]
  40cc6a:	ea4f 0bd9 	mov.w	fp, r9, lsr #3
                                     (vdb_buf_tmp->ch.green_h << 3) + vdb_buf_tmp->ch.green_l,
  40cc6e:	f009 0107 	and.w	r1, r9, #7
  40cc72:	f898 2001 	ldrb.w	r2, [r8, #1]
  40cc76:	ea4f 1952 	mov.w	r9, r2, lsr #5
  40cc7a:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
                                     vdb_buf_tmp->ch.blue
  40cc7e:	f002 021f 	and.w	r2, r2, #31
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
  40cc82:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  40cc86:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
  40cc8a:	f1c1 0aff 	rsb	sl, r1, #255	; 0xff
  40cc8e:	fb0a fa0b 	mul.w	sl, sl, fp
  40cc92:	fb01 aa03 	mla	sl, r1, r3, sl
  40cc96:	f3ca 2a04 	ubfx	sl, sl, #8, #5
  40cc9a:	9b06      	ldr	r3, [sp, #24]
  40cc9c:	f36a 03c7 	bfi	r3, sl, #3, #5
  40cca0:	461f      	mov	r7, r3
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
  40cca2:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
  40cca6:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
  40ccaa:	f1ca 0bff 	rsb	fp, sl, #255	; 0xff
  40ccae:	fb0b f202 	mul.w	r2, fp, r2
  40ccb2:	fb0a 2203 	mla	r2, sl, r3, r2
  40ccb6:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40ccba:	463b      	mov	r3, r7
  40ccbc:	f362 230c 	bfi	r3, r2, #8, #5
  40ccc0:	461f      	mov	r7, r3
                uint8_t green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
  40ccc2:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
  40ccc6:	f89d b065 	ldrb.w	fp, [sp, #101]	; 0x65
  40ccca:	f1cb 02ff 	rsb	r2, fp, #255	; 0xff
  40ccce:	fb02 f909 	mul.w	r9, r2, r9
  40ccd2:	fb0b 9303 	mla	r3, fp, r3, r9
  40ccd6:	f3c3 2307 	ubfx	r3, r3, #8, #8
                res_color.ch.green_h = green >> 3;
  40ccda:	f3c3 02c2 	ubfx	r2, r3, #3, #3
  40ccde:	f362 0702 	bfi	r7, r2, #0, #3
  40cce2:	463a      	mov	r2, r7
                res_color.ch.green_l = green & 0x7;
  40cce4:	f363 324f 	bfi	r2, r3, #13, #3
  40cce8:	9206      	str	r2, [sp, #24]
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
  40ccea:	b951      	cbnz	r1, 40cd02 <draw_letter_subpx+0x2d6>
  40ccec:	f1bb 0f00 	cmp.w	fp, #0
  40ccf0:	d107      	bne.n	40cd02 <draw_letter_subpx+0x2d6>
  40ccf2:	f1ba 0f00 	cmp.w	sl, #0
  40ccf6:	d104      	bne.n	40cd02 <draw_letter_subpx+0x2d6>
  40ccf8:	2300      	movs	r3, #0
  40ccfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ccfc:	f802 300c 	strb.w	r3, [r2, ip]
  40cd00:	e003      	b.n	40cd0a <draw_letter_subpx+0x2de>
                else mask_buf[mask_p] = LV_OPA_COVER;
  40cd02:	23ff      	movs	r3, #255	; 0xff
  40cd04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40cd06:	f802 300c 	strb.w	r3, [r2, ip]
                color_buf[mask_p] = res_color;
  40cd0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cd0c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  40cd10:	f823 201c 	strh.w	r2, [r3, ip, lsl #1]
                mask_p++;
  40cd14:	f10c 0c01 	add.w	ip, ip, #1
                vdb_buf_tmp++;
  40cd18:	f108 0802 	add.w	r8, r8, #2
                subpx_cnt = 0;
  40cd1c:	2100      	movs	r1, #0
  40cd1e:	e779      	b.n	40cc14 <draw_letter_subpx+0x1e8>
                map_p++;
  40cd20:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40cd22:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
                col_bit = 0;
  40cd26:	2400      	movs	r4, #0
  40cd28:	e77e      	b.n	40cc28 <draw_letter_subpx+0x1fc>
  40cd2a:	bf00      	nop
  40cd2c:	0042129c 	.word	0x0042129c
  40cd30:	004212a4 	.word	0x004212a4
  40cd34:	004212b4 	.word	0x004212b4
  40cd38:	004212a0 	.word	0x004212a0
  40cd3c:	55555556 	.word	0x55555556
  40cd40:	00408ba9 	.word	0x00408ba9
  40cd44:	0041403d 	.word	0x0041403d
  40cd48:	0040ef2d 	.word	0x0040ef2d
  40cd4c:	00415b15 	.word	0x00415b15
  40cd50:	46e3      	mov	fp, ip
  40cd52:	f8bd 7018 	ldrh.w	r7, [sp, #24]
        if(other_mask_cnt) {
  40cd56:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40cd58:	2b00      	cmp	r3, #0
  40cd5a:	d134      	bne.n	40cdc6 <draw_letter_subpx+0x39a>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40cd5c:	9b08      	ldr	r3, [sp, #32]
  40cd5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cd60:	eba3 0902 	sub.w	r9, r3, r2
  40cd64:	465b      	mov	r3, fp
  40cd66:	444b      	add	r3, r9
  40cd68:	9912      	ldr	r1, [sp, #72]	; 0x48
  40cd6a:	4299      	cmp	r1, r3
  40cd6c:	dd4c      	ble.n	40ce08 <draw_letter_subpx+0x3dc>
            map_area.y2 ++;
  40cd6e:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40cd72:	3301      	adds	r3, #1
  40cd74:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
  40cd78:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
        col_bit += ((box_w - col_end) + col_start) * bpp;
  40cd7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40cd7e:	9a08      	ldr	r2, [sp, #32]
  40cd80:	1a9b      	subs	r3, r3, r2
  40cd82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cd84:	4413      	add	r3, r2
  40cd86:	fb03 4405 	mla	r4, r3, r5, r4
        map_p += (col_bit >> 3);
  40cd8a:	eb06 06e4 	add.w	r6, r6, r4, asr #3
        col_bit = col_bit & 0x7;
  40cd8e:	f004 0407 	and.w	r4, r4, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
  40cd92:	4b38      	ldr	r3, [pc, #224]	; (40ce74 <draw_letter_subpx+0x448>)
  40cd94:	fb83 2309 	smull	r2, r3, r3, r9
  40cd98:	ebc3 79e9 	rsb	r9, r3, r9, asr #31
  40cd9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40cd9e:	4499      	add	r9, r3
  40cda0:	eb08 0849 	add.w	r8, r8, r9, lsl #1
    for(row = row_start ; row < row_end; row++) {
  40cda4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cda6:	3301      	adds	r3, #1
  40cda8:	930d      	str	r3, [sp, #52]	; 0x34
  40cdaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cdac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40cdae:	4293      	cmp	r3, r2
  40cdb0:	da42      	bge.n	40ce38 <draw_letter_subpx+0x40c>
        bitmask = bitmask_init >> col_bit;
  40cdb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cdb4:	fa23 fe04 	lsr.w	lr, r3, r4
        for(col = col_start; col < col_end; col++) {
  40cdb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cdba:	980f      	ldr	r0, [sp, #60]	; 0x3c
        uint32_t subpx_cnt = 0;
  40cdbc:	2100      	movs	r1, #0
  40cdbe:	469c      	mov	ip, r3
  40cdc0:	f8ad 7018 	strh.w	r7, [sp, #24]
        for(col = col_start; col < col_end; col++) {
  40cdc4:	e731      	b.n	40cc2a <draw_letter_subpx+0x1fe>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
  40cdc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cdc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40cdca:	4413      	add	r3, r2
  40cdcc:	469a      	mov	sl, r3
  40cdce:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
  40cdd2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  40cdd6:	b28a      	uxth	r2, r1
  40cdd8:	1a9b      	subs	r3, r3, r2
  40cdda:	b29b      	uxth	r3, r3
  40cddc:	3301      	adds	r3, #1
  40cdde:	b21b      	sxth	r3, r3
  40cde0:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
  40cde4:	4650      	mov	r0, sl
  40cde6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 40ce84 <draw_letter_subpx+0x458>
  40cdea:	47c8      	blx	r9
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40cdec:	2800      	cmp	r0, #0
  40cdee:	d1b5      	bne.n	40cd5c <draw_letter_subpx+0x330>
  40cdf0:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
  40cdf4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  40cdf8:	1ac9      	subs	r1, r1, r3
  40cdfa:	b289      	uxth	r1, r1
  40cdfc:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
  40cdfe:	b209      	sxth	r1, r1
  40ce00:	4650      	mov	r0, sl
  40ce02:	4b1d      	ldr	r3, [pc, #116]	; (40ce78 <draw_letter_subpx+0x44c>)
  40ce04:	4798      	blx	r3
  40ce06:	e7a9      	b.n	40cd5c <draw_letter_subpx+0x330>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40ce08:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40ce0a:	9302      	str	r3, [sp, #8]
  40ce0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ce0e:	9301      	str	r3, [sp, #4]
  40ce10:	2302      	movs	r3, #2
  40ce12:	9300      	str	r3, [sp, #0]
  40ce14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ce16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ce18:	a91a      	add	r1, sp, #104	; 0x68
  40ce1a:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40ce1c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40ce7c <draw_letter_subpx+0x450>
  40ce20:	47d0      	blx	sl
            map_area.y1 = map_area.y2 + 1;
  40ce22:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  40ce26:	3301      	adds	r3, #1
  40ce28:	b21b      	sxth	r3, r3
  40ce2a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            map_area.y2 = map_area.y1;
  40ce2e:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            mask_p = 0;
  40ce32:	2300      	movs	r3, #0
  40ce34:	9310      	str	r3, [sp, #64]	; 0x40
  40ce36:	e7a1      	b.n	40cd7c <draw_letter_subpx+0x350>
    if(map_area.y1 != map_area.y2) {
  40ce38:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
  40ce3c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40ce40:	429a      	cmp	r2, r3
  40ce42:	d00e      	beq.n	40ce62 <draw_letter_subpx+0x436>
        map_area.y2--;
  40ce44:	3b01      	subs	r3, #1
  40ce46:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40ce4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40ce4c:	9302      	str	r3, [sp, #8]
  40ce4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ce50:	9301      	str	r3, [sp, #4]
  40ce52:	2302      	movs	r3, #2
  40ce54:	9300      	str	r3, [sp, #0]
  40ce56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ce58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ce5a:	a91a      	add	r1, sp, #104	; 0x68
  40ce5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40ce5e:	4c07      	ldr	r4, [pc, #28]	; (40ce7c <draw_letter_subpx+0x450>)
  40ce60:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40ce62:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ce64:	4c06      	ldr	r4, [pc, #24]	; (40ce80 <draw_letter_subpx+0x454>)
  40ce66:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
  40ce68:	980e      	ldr	r0, [sp, #56]	; 0x38
  40ce6a:	47a0      	blx	r4
}
  40ce6c:	b01d      	add	sp, #116	; 0x74
  40ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ce72:	bf00      	nop
  40ce74:	55555556 	.word	0x55555556
  40ce78:	00415ca1 	.word	0x00415ca1
  40ce7c:	0040bd29 	.word	0x0040bd29
  40ce80:	004158c5 	.word	0x004158c5
  40ce84:	0040ee65 	.word	0x0040ee65

0040ce88 <draw_letter_normal>:
{
  40ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ce8c:	b093      	sub	sp, #76	; 0x4c
  40ce8e:	468e      	mov	lr, r1
  40ce90:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
  40ce94:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
  40ce98:	910d      	str	r1, [sp, #52]	; 0x34
    uint32_t bpp = g->bpp;
  40ce9a:	f892 a00a 	ldrb.w	sl, [r2, #10]
    if(bpp == 3) bpp = 4;
  40ce9e:	f1ba 0f03 	cmp.w	sl, #3
  40cea2:	d00e      	beq.n	40cec2 <draw_letter_normal+0x3a>
    switch(bpp) {
  40cea4:	f10a 34ff 	add.w	r4, sl, #4294967295
  40cea8:	2c07      	cmp	r4, #7
  40ceaa:	f200 8147 	bhi.w	40d13c <draw_letter_normal+0x2b4>
  40ceae:	e8df f014 	tbh	[pc, r4, lsl #1]
  40ceb2:	000b      	.short	0x000b
  40ceb4:	0145001e 	.word	0x0145001e
  40ceb8:	01450011 	.word	0x01450011
  40cebc:	01450145 	.word	0x01450145
  40cec0:	0017      	.short	0x0017
    if(bpp == 3) bpp = 4;
  40cec2:	f04f 0a04 	mov.w	sl, #4
  40cec6:	e7ed      	b.n	40cea4 <draw_letter_normal+0x1c>
            shades = 2;
  40cec8:	2702      	movs	r7, #2
            bitmask_init  = 0x80;
  40ceca:	2180      	movs	r1, #128	; 0x80
  40cecc:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp1_opa_table;
  40cece:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 40d170 <draw_letter_normal+0x2e8>
  40ced2:	e011      	b.n	40cef8 <draw_letter_normal+0x70>
            shades = 16;
  40ced4:	2710      	movs	r7, #16
            bitmask_init  = 0xF0;
  40ced6:	21f0      	movs	r1, #240	; 0xf0
  40ced8:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp4_opa_table;
  40ceda:	f8df b298 	ldr.w	fp, [pc, #664]	; 40d174 <draw_letter_normal+0x2ec>
            break;
  40cede:	e00b      	b.n	40cef8 <draw_letter_normal+0x70>
            shades = 256;
  40cee0:	f44f 7780 	mov.w	r7, #256	; 0x100
            bitmask_init  = 0xFF;
  40cee4:	21ff      	movs	r1, #255	; 0xff
  40cee6:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp8_opa_table;
  40cee8:	f8df b28c 	ldr.w	fp, [pc, #652]	; 40d178 <draw_letter_normal+0x2f0>
            break;       /*No opa table, pixel value will be used directly*/
  40ceec:	e004      	b.n	40cef8 <draw_letter_normal+0x70>
            shades = 4;
  40ceee:	2704      	movs	r7, #4
            bitmask_init  = 0xC0;
  40cef0:	21c0      	movs	r1, #192	; 0xc0
  40cef2:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp2_opa_table;
  40cef4:	f8df b284 	ldr.w	fp, [pc, #644]	; 40d17c <draw_letter_normal+0x2f4>
    if(opa < LV_OPA_MAX) {
  40cef8:	2efc      	cmp	r6, #252	; 0xfc
  40cefa:	d821      	bhi.n	40cf40 <draw_letter_normal+0xb8>
        if(prev_opa != opa || prev_bpp != bpp) {
  40cefc:	4c91      	ldr	r4, [pc, #580]	; (40d144 <draw_letter_normal+0x2bc>)
  40cefe:	7824      	ldrb	r4, [r4, #0]
  40cf00:	42a6      	cmp	r6, r4
  40cf02:	d001      	beq.n	40cf08 <draw_letter_normal+0x80>
  40cf04:	2500      	movs	r5, #0
  40cf06:	e009      	b.n	40cf1c <draw_letter_normal+0x94>
  40cf08:	4c8f      	ldr	r4, [pc, #572]	; (40d148 <draw_letter_normal+0x2c0>)
  40cf0a:	6824      	ldr	r4, [r4, #0]
  40cf0c:	45a2      	cmp	sl, r4
  40cf0e:	d010      	beq.n	40cf32 <draw_letter_normal+0xaa>
  40cf10:	2500      	movs	r5, #0
  40cf12:	e003      	b.n	40cf1c <draw_letter_normal+0x94>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40cf14:	4631      	mov	r1, r6
  40cf16:	4c8d      	ldr	r4, [pc, #564]	; (40d14c <draw_letter_normal+0x2c4>)
  40cf18:	5561      	strb	r1, [r4, r5]
            for(i = 0; i < shades; i++) {
  40cf1a:	3501      	adds	r5, #1
  40cf1c:	42af      	cmp	r7, r5
  40cf1e:	d908      	bls.n	40cf32 <draw_letter_normal+0xaa>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40cf20:	f81b 1005 	ldrb.w	r1, [fp, r5]
  40cf24:	29ff      	cmp	r1, #255	; 0xff
  40cf26:	d0f5      	beq.n	40cf14 <draw_letter_normal+0x8c>
  40cf28:	fb01 f106 	mul.w	r1, r1, r6
  40cf2c:	f3c1 2107 	ubfx	r1, r1, #8, #8
  40cf30:	e7f1      	b.n	40cf16 <draw_letter_normal+0x8e>
        prev_opa = opa;
  40cf32:	4c84      	ldr	r4, [pc, #528]	; (40d144 <draw_letter_normal+0x2bc>)
  40cf34:	7026      	strb	r6, [r4, #0]
        prev_bpp = bpp;
  40cf36:	4c84      	ldr	r4, [pc, #528]	; (40d148 <draw_letter_normal+0x2c0>)
  40cf38:	f8c4 a000 	str.w	sl, [r4]
        bpp_opa_table_p = opa_table;
  40cf3c:	f8df b20c 	ldr.w	fp, [pc, #524]	; 40d14c <draw_letter_normal+0x2c4>
    int32_t box_w = g->box_w;
  40cf40:	8855      	ldrh	r5, [r2, #2]
    int32_t box_h = g->box_h;
  40cf42:	8897      	ldrh	r7, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40cf44:	fb0a f405 	mul.w	r4, sl, r5
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40cf48:	f9b3 2000 	ldrsh.w	r2, [r3]
  40cf4c:	4282      	cmp	r2, r0
  40cf4e:	dd5a      	ble.n	40d006 <draw_letter_normal+0x17e>
  40cf50:	1a12      	subs	r2, r2, r0
  40cf52:	9207      	str	r2, [sp, #28]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40cf54:	182a      	adds	r2, r5, r0
  40cf56:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
  40cf5a:	42b2      	cmp	r2, r6
  40cf5c:	dd56      	ble.n	40d00c <draw_letter_normal+0x184>
  40cf5e:	1a36      	subs	r6, r6, r0
  40cf60:	f106 0801 	add.w	r8, r6, #1
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40cf64:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40cf68:	4572      	cmp	r2, lr
  40cf6a:	dd51      	ble.n	40d010 <draw_letter_normal+0x188>
  40cf6c:	eba2 020e 	sub.w	r2, r2, lr
  40cf70:	9206      	str	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40cf72:	eb07 020e 	add.w	r2, r7, lr
  40cf76:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
  40cf7a:	42b2      	cmp	r2, r6
  40cf7c:	dd4b      	ble.n	40d016 <draw_letter_normal+0x18e>
  40cf7e:	eba6 060e 	sub.w	r6, r6, lr
  40cf82:	1c72      	adds	r2, r6, #1
  40cf84:	9209      	str	r2, [sp, #36]	; 0x24
  40cf86:	930e      	str	r3, [sp, #56]	; 0x38
  40cf88:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  40cf8c:	9008      	str	r0, [sp, #32]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40cf8e:	9b07      	ldr	r3, [sp, #28]
  40cf90:	fb0a f303 	mul.w	r3, sl, r3
  40cf94:	9a06      	ldr	r2, [sp, #24]
  40cf96:	fb04 3402 	mla	r4, r4, r2, r3
    map_p += bit_ofs >> 3;
  40cf9a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  40cf9c:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40cfa0:	f004 0407 	and.w	r4, r4, #7
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
  40cfa4:	4b6a      	ldr	r3, [pc, #424]	; (40d150 <draw_letter_normal+0x2c8>)
  40cfa6:	4798      	blx	r3
  40cfa8:	4b6a      	ldr	r3, [pc, #424]	; (40d154 <draw_letter_normal+0x2cc>)
  40cfaa:	4798      	blx	r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
  40cfac:	fb07 f705 	mul.w	r7, r7, r5
  40cfb0:	42b8      	cmp	r0, r7
  40cfb2:	bfa8      	it	ge
  40cfb4:	4638      	movge	r0, r7
  40cfb6:	900a      	str	r0, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40cfb8:	4b67      	ldr	r3, [pc, #412]	; (40d158 <draw_letter_normal+0x2d0>)
  40cfba:	4798      	blx	r3
  40cfbc:	4681      	mov	r9, r0
    fill_area.x1 = col_start + pos_x;
  40cfbe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40cfc2:	9b07      	ldr	r3, [sp, #28]
  40cfc4:	18d3      	adds	r3, r2, r3
  40cfc6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos_x - 1;
  40cfca:	eb02 0308 	add.w	r3, r2, r8
  40cfce:	b29b      	uxth	r3, r3
  40cfd0:	3b01      	subs	r3, #1
  40cfd2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos_y;
  40cfd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40cfd8:	9a06      	ldr	r2, [sp, #24]
  40cfda:	4411      	add	r1, r2
  40cfdc:	b20b      	sxth	r3, r1
  40cfde:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
  40cfe2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40cfe6:	4b5d      	ldr	r3, [pc, #372]	; (40d15c <draw_letter_normal+0x2d4>)
  40cfe8:	4798      	blx	r3
  40cfea:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32_t col_bit_max = 8 - bpp;
  40cfec:	f1ca 0708 	rsb	r7, sl, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
  40cff0:	9b07      	ldr	r3, [sp, #28]
  40cff2:	442b      	add	r3, r5
  40cff4:	eba3 0308 	sub.w	r3, r3, r8
  40cff8:	fb03 f30a 	mul.w	r3, r3, sl
  40cffc:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t mask_p = 0;
  40cffe:	f04f 0e00 	mov.w	lr, #0
  40d002:	9708      	str	r7, [sp, #32]
    for(row = row_start ; row < row_end; row++) {
  40d004:	e03f      	b.n	40d086 <draw_letter_normal+0x1fe>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40d006:	2200      	movs	r2, #0
  40d008:	9207      	str	r2, [sp, #28]
  40d00a:	e7a3      	b.n	40cf54 <draw_letter_normal+0xcc>
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40d00c:	46a8      	mov	r8, r5
  40d00e:	e7a9      	b.n	40cf64 <draw_letter_normal+0xdc>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d010:	2200      	movs	r2, #0
  40d012:	9206      	str	r2, [sp, #24]
  40d014:	e7ad      	b.n	40cf72 <draw_letter_normal+0xea>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d016:	9709      	str	r7, [sp, #36]	; 0x24
  40d018:	e7b5      	b.n	40cf86 <draw_letter_normal+0xfe>
                mask_buf[mask_p] = 0;
  40d01a:	2300      	movs	r3, #0
  40d01c:	f809 3005 	strb.w	r3, [r9, r5]
  40d020:	e012      	b.n	40d048 <draw_letter_normal+0x1c0>
                map_p++;
  40d022:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40d024:	9805      	ldr	r0, [sp, #20]
                col_bit = 0;
  40d026:	2400      	movs	r4, #0
            mask_p++;
  40d028:	3501      	adds	r5, #1
        for(col = col_start; col < col_end; col++) {
  40d02a:	3101      	adds	r1, #1
  40d02c:	4541      	cmp	r1, r8
  40d02e:	da11      	bge.n	40d054 <draw_letter_normal+0x1cc>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
  40d030:	7833      	ldrb	r3, [r6, #0]
  40d032:	4003      	ands	r3, r0
  40d034:	1b3a      	subs	r2, r7, r4
  40d036:	40d3      	lsrs	r3, r2
            if(letter_px) {
  40d038:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d03c:	d0ed      	beq.n	40d01a <draw_letter_normal+0x192>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
  40d03e:	b2db      	uxtb	r3, r3
  40d040:	f81b 3003 	ldrb.w	r3, [fp, r3]
  40d044:	f809 3005 	strb.w	r3, [r9, r5]
            if(col_bit < col_bit_max) {
  40d048:	42bc      	cmp	r4, r7
  40d04a:	d2ea      	bcs.n	40d022 <draw_letter_normal+0x19a>
                col_bit += bpp;
  40d04c:	4454      	add	r4, sl
                bitmask = bitmask >> bpp;
  40d04e:	fa20 f00a 	lsr.w	r0, r0, sl
  40d052:	e7e9      	b.n	40d028 <draw_letter_normal+0x1a0>
  40d054:	9708      	str	r7, [sp, #32]
        if(other_mask_cnt) {
  40d056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d058:	bb03      	cbnz	r3, 40d09c <draw_letter_normal+0x214>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d05a:	9b07      	ldr	r3, [sp, #28]
  40d05c:	eba8 0303 	sub.w	r3, r8, r3
  40d060:	442b      	add	r3, r5
  40d062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d064:	429a      	cmp	r2, r3
  40d066:	d938      	bls.n	40d0da <draw_letter_normal+0x252>
            fill_area.y2 ++;
  40d068:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40d06c:	3301      	adds	r3, #1
  40d06e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  40d072:	46ae      	mov	lr, r5
        col_bit += col_bit_row_ofs;
  40d074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d076:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
  40d078:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
  40d07c:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
  40d080:	9b06      	ldr	r3, [sp, #24]
  40d082:	3301      	adds	r3, #1
  40d084:	9306      	str	r3, [sp, #24]
  40d086:	9b06      	ldr	r3, [sp, #24]
  40d088:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d08a:	4293      	cmp	r3, r2
  40d08c:	da3d      	bge.n	40d10a <draw_letter_normal+0x282>
        bitmask = bitmask_init >> col_bit;
  40d08e:	9b05      	ldr	r3, [sp, #20]
  40d090:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
  40d094:	4675      	mov	r5, lr
  40d096:	9907      	ldr	r1, [sp, #28]
  40d098:	9f08      	ldr	r7, [sp, #32]
  40d09a:	e7c7      	b.n	40d02c <draw_letter_normal+0x1a4>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  40d09c:	eb09 030e 	add.w	r3, r9, lr
  40d0a0:	4618      	mov	r0, r3
  40d0a2:	930f      	str	r3, [sp, #60]	; 0x3c
  40d0a4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
  40d0a8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  40d0ac:	b28a      	uxth	r2, r1
  40d0ae:	1a9b      	subs	r3, r3, r2
  40d0b0:	b29b      	uxth	r3, r3
  40d0b2:	3301      	adds	r3, #1
  40d0b4:	b21b      	sxth	r3, r3
  40d0b6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40d0ba:	4f29      	ldr	r7, [pc, #164]	; (40d160 <draw_letter_normal+0x2d8>)
  40d0bc:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40d0be:	2800      	cmp	r0, #0
  40d0c0:	d1cb      	bne.n	40d05a <draw_letter_normal+0x1d2>
  40d0c2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  40d0c6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  40d0ca:	1ac9      	subs	r1, r1, r3
  40d0cc:	b289      	uxth	r1, r1
  40d0ce:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
  40d0d0:	b209      	sxth	r1, r1
  40d0d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40d0d4:	4b23      	ldr	r3, [pc, #140]	; (40d164 <draw_letter_normal+0x2dc>)
  40d0d6:	4798      	blx	r3
  40d0d8:	e7bf      	b.n	40d05a <draw_letter_normal+0x1d2>
            _lv_blend_fill(clip_area, &fill_area,
  40d0da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d0dc:	9302      	str	r3, [sp, #8]
  40d0de:	23ff      	movs	r3, #255	; 0xff
  40d0e0:	9301      	str	r3, [sp, #4]
  40d0e2:	2302      	movs	r3, #2
  40d0e4:	9300      	str	r3, [sp, #0]
  40d0e6:	464b      	mov	r3, r9
  40d0e8:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40d0ec:	a910      	add	r1, sp, #64	; 0x40
  40d0ee:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d0f0:	4d1d      	ldr	r5, [pc, #116]	; (40d168 <draw_letter_normal+0x2e0>)
  40d0f2:	47a8      	blx	r5
            fill_area.y1 = fill_area.y2 + 1;
  40d0f4:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  40d0f8:	3301      	adds	r3, #1
  40d0fa:	b21b      	sxth	r3, r3
  40d0fc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
  40d100:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
  40d104:	f04f 0e00 	mov.w	lr, #0
  40d108:	e7b4      	b.n	40d074 <draw_letter_normal+0x1ec>
    if(fill_area.y1 != fill_area.y2) {
  40d10a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  40d10e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40d112:	429a      	cmp	r2, r3
  40d114:	d00f      	beq.n	40d136 <draw_letter_normal+0x2ae>
        fill_area.y2--;
  40d116:	3b01      	subs	r3, #1
  40d118:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(clip_area, &fill_area,
  40d11c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d11e:	9302      	str	r3, [sp, #8]
  40d120:	23ff      	movs	r3, #255	; 0xff
  40d122:	9301      	str	r3, [sp, #4]
  40d124:	2302      	movs	r3, #2
  40d126:	9300      	str	r3, [sp, #0]
  40d128:	464b      	mov	r3, r9
  40d12a:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40d12e:	a910      	add	r1, sp, #64	; 0x40
  40d130:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d132:	4c0d      	ldr	r4, [pc, #52]	; (40d168 <draw_letter_normal+0x2e0>)
  40d134:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40d136:	4648      	mov	r0, r9
  40d138:	4b0c      	ldr	r3, [pc, #48]	; (40d16c <draw_letter_normal+0x2e4>)
  40d13a:	4798      	blx	r3
}
  40d13c:	b013      	add	sp, #76	; 0x4c
  40d13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d142:	bf00      	nop
  40d144:	2040c71c 	.word	0x2040c71c
  40d148:	2040c718 	.word	0x2040c718
  40d14c:	2040c618 	.word	0x2040c618
  40d150:	00408ba9 	.word	0x00408ba9
  40d154:	00413f39 	.word	0x00413f39
  40d158:	00415b15 	.word	0x00415b15
  40d15c:	0040ef2d 	.word	0x0040ef2d
  40d160:	0040ee65 	.word	0x0040ee65
  40d164:	00415ca1 	.word	0x00415ca1
  40d168:	0040bc09 	.word	0x0040bc09
  40d16c:	004158c5 	.word	0x004158c5
  40d170:	0042129c 	.word	0x0042129c
  40d174:	004212a4 	.word	0x004212a4
  40d178:	004212b4 	.word	0x004212b4
  40d17c:	004212a0 	.word	0x004212a0

0040d180 <lv_draw_letter>:
{
  40d180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d184:	b089      	sub	sp, #36	; 0x24
  40d186:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
  40d18a:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    if(opa < LV_OPA_MIN) return;
  40d18e:	2d01      	cmp	r5, #1
  40d190:	d937      	bls.n	40d202 <lv_draw_letter+0x82>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40d192:	2dfd      	cmp	r5, #253	; 0xfd
  40d194:	d900      	bls.n	40d198 <lv_draw_letter+0x18>
  40d196:	25ff      	movs	r5, #255	; 0xff
    if(font_p == NULL) {
  40d198:	b39a      	cbz	r2, 40d202 <lv_draw_letter+0x82>
  40d19a:	469b      	mov	fp, r3
  40d19c:	4614      	mov	r4, r2
  40d19e:	4689      	mov	r9, r1
  40d1a0:	4607      	mov	r7, r0
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
  40d1a2:	2300      	movs	r3, #0
  40d1a4:	465a      	mov	r2, fp
  40d1a6:	a905      	add	r1, sp, #20
  40d1a8:	4620      	mov	r0, r4
  40d1aa:	4e2c      	ldr	r6, [pc, #176]	; (40d25c <lv_draw_letter+0xdc>)
  40d1ac:	47b0      	blx	r6
    if(g_ret == false)  {
  40d1ae:	b340      	cbz	r0, 40d202 <lv_draw_letter+0x82>
    if((g.box_h == 0) || (g.box_w == 0)) return;
  40d1b0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40d1b4:	b32b      	cbz	r3, 40d202 <lv_draw_letter+0x82>
  40d1b6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40d1ba:	b312      	cbz	r2, 40d202 <lv_draw_letter+0x82>
    int32_t pos_x = pos_p->x + g.ofs_x;
  40d1bc:	f9b7 a000 	ldrsh.w	sl, [r7]
  40d1c0:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
  40d1c4:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
  40d1c6:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
  40d1ca:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  40d1ce:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  40d1d2:	1a09      	subs	r1, r1, r0
  40d1d4:	440f      	add	r7, r1
  40d1d6:	1aff      	subs	r7, r7, r3
  40d1d8:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  40d1dc:	1a7f      	subs	r7, r7, r1
    if(pos_x + g.box_w < clip_area->x1 ||
  40d1de:	4452      	add	r2, sl
  40d1e0:	f9b9 1000 	ldrsh.w	r1, [r9]
  40d1e4:	428a      	cmp	r2, r1
  40d1e6:	db0c      	blt.n	40d202 <lv_draw_letter+0x82>
       pos_x > clip_area->x2 ||
  40d1e8:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
  40d1ec:	4592      	cmp	sl, r2
  40d1ee:	dc08      	bgt.n	40d202 <lv_draw_letter+0x82>
       pos_y + g.box_h < clip_area->y1 ||
  40d1f0:	443b      	add	r3, r7
  40d1f2:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
       pos_x > clip_area->x2 ||
  40d1f6:	4293      	cmp	r3, r2
  40d1f8:	db03      	blt.n	40d202 <lv_draw_letter+0x82>
       pos_y > clip_area->y2)  {
  40d1fa:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
       pos_y + g.box_h < clip_area->y1 ||
  40d1fe:	429f      	cmp	r7, r3
  40d200:	dd02      	ble.n	40d208 <lv_draw_letter+0x88>
}
  40d202:	b009      	add	sp, #36	; 0x24
  40d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
  40d208:	4659      	mov	r1, fp
  40d20a:	4620      	mov	r0, r4
  40d20c:	4b14      	ldr	r3, [pc, #80]	; (40d260 <lv_draw_letter+0xe0>)
  40d20e:	4798      	blx	r3
    if(map_p == NULL) {
  40d210:	2800      	cmp	r0, #0
  40d212:	d0f6      	beq.n	40d202 <lv_draw_letter+0x82>
    if(font_p->subpx) {
  40d214:	7b22      	ldrb	r2, [r4, #12]
  40d216:	f012 0f03 	tst.w	r2, #3
  40d21a:	d00f      	beq.n	40d23c <lv_draw_letter+0xbc>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40d21c:	f8cd 800c 	str.w	r8, [sp, #12]
  40d220:	9502      	str	r5, [sp, #8]
  40d222:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40d226:	f8ad 2004 	strh.w	r2, [sp, #4]
  40d22a:	9000      	str	r0, [sp, #0]
  40d22c:	464b      	mov	r3, r9
  40d22e:	aa05      	add	r2, sp, #20
  40d230:	b239      	sxth	r1, r7
  40d232:	fa0f f08a 	sxth.w	r0, sl
  40d236:	4c0b      	ldr	r4, [pc, #44]	; (40d264 <lv_draw_letter+0xe4>)
  40d238:	47a0      	blx	r4
  40d23a:	e7e2      	b.n	40d202 <lv_draw_letter+0x82>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40d23c:	f8cd 800c 	str.w	r8, [sp, #12]
  40d240:	9502      	str	r5, [sp, #8]
  40d242:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40d246:	f8ad 2004 	strh.w	r2, [sp, #4]
  40d24a:	9000      	str	r0, [sp, #0]
  40d24c:	464b      	mov	r3, r9
  40d24e:	aa05      	add	r2, sp, #20
  40d250:	b239      	sxth	r1, r7
  40d252:	fa0f f08a 	sxth.w	r0, sl
  40d256:	4c04      	ldr	r4, [pc, #16]	; (40d268 <lv_draw_letter+0xe8>)
  40d258:	47a0      	blx	r4
  40d25a:	e7d2      	b.n	40d202 <lv_draw_letter+0x82>
  40d25c:	00412d7d 	.word	0x00412d7d
  40d260:	00412d75 	.word	0x00412d75
  40d264:	0040ca2d 	.word	0x0040ca2d
  40d268:	0040ce89 	.word	0x0040ce89

0040d26c <lv_draw_label_dsc_init>:
{
  40d26c:	b510      	push	{r4, lr}
  40d26e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
  40d270:	2124      	movs	r1, #36	; 0x24
  40d272:	4b0e      	ldr	r3, [pc, #56]	; (40d2ac <lv_draw_label_dsc_init+0x40>)
  40d274:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
  40d276:	23ff      	movs	r3, #255	; 0xff
  40d278:	7323      	strb	r3, [r4, #12]
    dsc->color = LV_COLOR_BLACK;
  40d27a:	2300      	movs	r3, #0
  40d27c:	8023      	strh	r3, [r4, #0]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
  40d27e:	4a0c      	ldr	r2, [pc, #48]	; (40d2b0 <lv_draw_label_dsc_init+0x44>)
  40d280:	60a2      	str	r2, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  40d282:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40d286:	6162      	str	r2, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
  40d288:	61a2      	str	r2, [r4, #24]
    dsc->sel_color = LV_COLOR_BLACK;
  40d28a:	8063      	strh	r3, [r4, #2]
    dsc->sel_bg_color = LV_COLOR_BLUE;
  40d28c:	7922      	ldrb	r2, [r4, #4]
  40d28e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  40d292:	f363 02c7 	bfi	r2, r3, #3, #5
  40d296:	7122      	strb	r2, [r4, #4]
  40d298:	7962      	ldrb	r2, [r4, #5]
  40d29a:	f042 021f 	orr.w	r2, r2, #31
  40d29e:	f363 1247 	bfi	r2, r3, #5, #3
  40d2a2:	7162      	strb	r2, [r4, #5]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
  40d2a4:	f884 3020 	strb.w	r3, [r4, #32]
  40d2a8:	bd10      	pop	{r4, pc}
  40d2aa:	bf00      	nop
  40d2ac:	00415ca1 	.word	0x00415ca1
  40d2b0:	2040002c 	.word	0x2040002c

0040d2b4 <lv_draw_label>:
{
  40d2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d2b8:	b0b7      	sub	sp, #220	; 0xdc
  40d2ba:	9c40      	ldr	r4, [sp, #256]	; 0x100
    if(dsc->opa <= LV_OPA_MIN) return;
  40d2bc:	7b15      	ldrb	r5, [r2, #12]
  40d2be:	2d02      	cmp	r5, #2
  40d2c0:	d903      	bls.n	40d2ca <lv_draw_label+0x16>
    const lv_font_t * font = dsc->font;
  40d2c2:	6895      	ldr	r5, [r2, #8]
  40d2c4:	9506      	str	r5, [sp, #24]
    if(txt[0] == '\0')  return;
  40d2c6:	781d      	ldrb	r5, [r3, #0]
  40d2c8:	b915      	cbnz	r5, 40d2d0 <lv_draw_label+0x1c>
}
  40d2ca:	b037      	add	sp, #220	; 0xdc
  40d2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d2d0:	930c      	str	r3, [sp, #48]	; 0x30
  40d2d2:	4616      	mov	r6, r2
  40d2d4:	460a      	mov	r2, r1
  40d2d6:	9109      	str	r1, [sp, #36]	; 0x24
  40d2d8:	4605      	mov	r5, r0
  40d2da:	9010      	str	r0, [sp, #64]	; 0x40
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
  40d2dc:	4601      	mov	r1, r0
  40d2de:	a834      	add	r0, sp, #208	; 0xd0
  40d2e0:	4ba8      	ldr	r3, [pc, #672]	; (40d584 <lv_draw_label+0x2d0>)
  40d2e2:	4798      	blx	r3
    if(!clip_ok) return;
  40d2e4:	2800      	cmp	r0, #0
  40d2e6:	d0f0      	beq.n	40d2ca <lv_draw_label+0x16>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
  40d2e8:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40d2ec:	f012 0f02 	tst.w	r2, #2
  40d2f0:	d12b      	bne.n	40d34a <lv_draw_label+0x96>
  40d2f2:	88ab      	ldrh	r3, [r5, #4]
  40d2f4:	882a      	ldrh	r2, [r5, #0]
  40d2f6:	1a9b      	subs	r3, r3, r2
  40d2f8:	b29b      	uxth	r3, r3
  40d2fa:	3301      	adds	r3, #1
  40d2fc:	b21b      	sxth	r3, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  40d2fe:	9a06      	ldr	r2, [sp, #24]
  40d300:	f9b2 8008 	ldrsh.w	r8, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
  40d304:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40d308:	4442      	add	r2, r8
  40d30a:	920d      	str	r2, [sp, #52]	; 0x34
    pos.x = coords->x1;
  40d30c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40d30e:	f9b0 2000 	ldrsh.w	r2, [r0]
  40d312:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
    pos.y = coords->y1;
  40d316:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    x_ofs = dsc->ofs_x;
  40d31a:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
  40d31e:	9112      	str	r1, [sp, #72]	; 0x48
    y_ofs = dsc->ofs_y;
  40d320:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
    pos.y += y_ofs;
  40d324:	440a      	add	r2, r1
  40d326:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    if(hint && y_ofs == 0 && coords->y1 < 0) {
  40d32a:	1c22      	adds	r2, r4, #0
  40d32c:	bf18      	it	ne
  40d32e:	2201      	movne	r2, #1
  40d330:	2900      	cmp	r1, #0
  40d332:	bf14      	ite	ne
  40d334:	2100      	movne	r1, #0
  40d336:	f002 0101 	andeq.w	r1, r2, #1
  40d33a:	b341      	cbz	r1, 40d38e <lv_draw_label+0xda>
  40d33c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
  40d340:	2900      	cmp	r1, #0
  40d342:	db13      	blt.n	40d36c <lv_draw_label+0xb8>
    int32_t last_line_start = -1;
  40d344:	f04f 37ff 	mov.w	r7, #4294967295
  40d348:	e023      	b.n	40d392 <lv_draw_label+0xde>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
  40d34a:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40d34e:	9202      	str	r2, [sp, #8]
  40d350:	f647 4218 	movw	r2, #31768	; 0x7c18
  40d354:	9201      	str	r2, [sp, #4]
  40d356:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40d35a:	9200      	str	r2, [sp, #0]
  40d35c:	68b2      	ldr	r2, [r6, #8]
  40d35e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d360:	a818      	add	r0, sp, #96	; 0x60
  40d362:	4d89      	ldr	r5, [pc, #548]	; (40d588 <lv_draw_label+0x2d4>)
  40d364:	47a8      	blx	r5
        w = p.x;
  40d366:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40d36a:	e7c8      	b.n	40d2fe <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
  40d36c:	68a0      	ldr	r0, [r4, #8]
  40d36e:	1a40      	subs	r0, r0, r1
  40d370:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d374:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d378:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d37a:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  40d37e:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
  40d382:	dd02      	ble.n	40d38a <lv_draw_label+0xd6>
            hint->line_start = -1;
  40d384:	f04f 31ff 	mov.w	r1, #4294967295
  40d388:	6021      	str	r1, [r4, #0]
        last_line_start = hint->line_start;
  40d38a:	6827      	ldr	r7, [r4, #0]
  40d38c:	e001      	b.n	40d392 <lv_draw_label+0xde>
    int32_t last_line_start = -1;
  40d38e:	f04f 37ff 	mov.w	r7, #4294967295
    if(hint && last_line_start >= 0) {
  40d392:	2f00      	cmp	r7, #0
  40d394:	bfb4      	ite	lt
  40d396:	2200      	movlt	r2, #0
  40d398:	f002 0201 	andge.w	r2, r2, #1
  40d39c:	b1d2      	cbz	r2, 40d3d4 <lv_draw_label+0x120>
        pos.y += hint->y;
  40d39e:	6862      	ldr	r2, [r4, #4]
  40d3a0:	f8bd 10ce 	ldrh.w	r1, [sp, #206]	; 0xce
  40d3a4:	440a      	add	r2, r1
  40d3a6:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40d3aa:	b21b      	sxth	r3, r3
  40d3ac:	4619      	mov	r1, r3
  40d3ae:	930e      	str	r3, [sp, #56]	; 0x38
  40d3b0:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40d3b4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40d3b8:	9300      	str	r3, [sp, #0]
  40d3ba:	460b      	mov	r3, r1
  40d3bc:	9906      	ldr	r1, [sp, #24]
  40d3be:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d3c0:	4438      	add	r0, r7
  40d3c2:	4d72      	ldr	r5, [pc, #456]	; (40d58c <lv_draw_label+0x2d8>)
  40d3c4:	47a8      	blx	r5
  40d3c6:	eb07 0b00 	add.w	fp, r7, r0
  40d3ca:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40d3ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    while(pos.y + line_height_font < mask->y1) {
  40d3d2:	e007      	b.n	40d3e4 <lv_draw_label+0x130>
    uint32_t line_start     = 0;
  40d3d4:	2700      	movs	r7, #0
  40d3d6:	e7e8      	b.n	40d3aa <lv_draw_label+0xf6>
        if(txt[line_start] == '\0') return;
  40d3d8:	782b      	ldrb	r3, [r5, #0]
        line_start = line_end;
  40d3da:	465f      	mov	r7, fp
        if(txt[line_start] == '\0') return;
  40d3dc:	2b00      	cmp	r3, #0
  40d3de:	f43f af74 	beq.w	40d2ca <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40d3e2:	4683      	mov	fp, r0
    while(pos.y + line_height_font < mask->y1) {
  40d3e4:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40d3e8:	4443      	add	r3, r8
  40d3ea:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40d3ee:	4293      	cmp	r3, r2
  40d3f0:	da28      	bge.n	40d444 <lv_draw_label+0x190>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40d3f2:	eb0a 050b 	add.w	r5, sl, fp
  40d3f6:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40d3fa:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40d3fe:	9300      	str	r3, [sp, #0]
  40d400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d402:	9906      	ldr	r1, [sp, #24]
  40d404:	4628      	mov	r0, r5
  40d406:	4f61      	ldr	r7, [pc, #388]	; (40d58c <lv_draw_label+0x2d8>)
  40d408:	47b8      	blx	r7
  40d40a:	4458      	add	r0, fp
        pos.y += line_height;
  40d40c:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40d410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d412:	4413      	add	r3, r2
  40d414:	b21b      	sxth	r3, r3
  40d416:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
  40d41a:	2c00      	cmp	r4, #0
  40d41c:	d0dc      	beq.n	40d3d8 <lv_draw_label+0x124>
  40d41e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
  40d422:	dbd9      	blt.n	40d3d8 <lv_draw_label+0x124>
  40d424:	6823      	ldr	r3, [r4, #0]
  40d426:	2b00      	cmp	r3, #0
  40d428:	dad6      	bge.n	40d3d8 <lv_draw_label+0x124>
            hint->line_start = line_start;
  40d42a:	f8c4 b000 	str.w	fp, [r4]
            hint->y          = pos.y - coords->y1;
  40d42e:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40d432:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d434:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40d438:	1a9b      	subs	r3, r3, r2
  40d43a:	6063      	str	r3, [r4, #4]
            hint->coord_y    = coords->y1;
  40d43c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40d440:	60a3      	str	r3, [r4, #8]
  40d442:	e7c9      	b.n	40d3d8 <lv_draw_label+0x124>
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40d444:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40d448:	f012 0f04 	tst.w	r2, #4
  40d44c:	d124      	bne.n	40d498 <lv_draw_label+0x1e4>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40d44e:	f012 0f08 	tst.w	r2, #8
  40d452:	d13d      	bne.n	40d4d0 <lv_draw_label+0x21c>
    lv_opa_t opa = dsc->opa;
  40d454:	7b33      	ldrb	r3, [r6, #12]
  40d456:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t sel_start = dsc->sel_start;
  40d458:	6973      	ldr	r3, [r6, #20]
  40d45a:	4619      	mov	r1, r3
  40d45c:	461c      	mov	r4, r3
    uint32_t sel_end = dsc->sel_end;
  40d45e:	f8d6 8018 	ldr.w	r8, [r6, #24]
    if(sel_start > sel_end) {
  40d462:	4543      	cmp	r3, r8
  40d464:	d802      	bhi.n	40d46c <lv_draw_label+0x1b8>
  40d466:	4643      	mov	r3, r8
    uint32_t sel_start = dsc->sel_start;
  40d468:	4688      	mov	r8, r1
    uint32_t sel_end = dsc->sel_end;
  40d46a:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
  40d46c:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40d470:	f013 0f03 	tst.w	r3, #3
  40d474:	d144      	bne.n	40d500 <lv_draw_label+0x24c>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
  40d476:	a81a      	add	r0, sp, #104	; 0x68
  40d478:	4b45      	ldr	r3, [pc, #276]	; (40d590 <lv_draw_label+0x2dc>)
  40d47a:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
  40d47c:	88b3      	ldrh	r3, [r6, #4]
  40d47e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    int32_t pos_x_start = pos.x;
  40d482:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40d486:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
  40d488:	2300      	movs	r3, #0
  40d48a:	9311      	str	r3, [sp, #68]	; 0x44
  40d48c:	f8cd b01c 	str.w	fp, [sp, #28]
  40d490:	46bb      	mov	fp, r7
  40d492:	46c2      	mov	sl, r8
  40d494:	46a0      	mov	r8, r4
    while(txt[line_start] != '\0') {
  40d496:	e170      	b.n	40d77a <lv_draw_label+0x4c6>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40d498:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40d49c:	9200      	str	r2, [sp, #0]
  40d49e:	9a06      	ldr	r2, [sp, #24]
  40d4a0:	ebab 0107 	sub.w	r1, fp, r7
  40d4a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d4a6:	4438      	add	r0, r7
  40d4a8:	4c3a      	ldr	r4, [pc, #232]	; (40d594 <lv_draw_label+0x2e0>)
  40d4aa:	47a0      	blx	r4
  40d4ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d4ae:	8893      	ldrh	r3, [r2, #4]
  40d4b0:	8812      	ldrh	r2, [r2, #0]
  40d4b2:	1a9b      	subs	r3, r3, r2
  40d4b4:	b29b      	uxth	r3, r3
  40d4b6:	3301      	adds	r3, #1
  40d4b8:	b21b      	sxth	r3, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40d4ba:	1a1b      	subs	r3, r3, r0
  40d4bc:	d406      	bmi.n	40d4cc <lv_draw_label+0x218>
  40d4be:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40d4c2:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40d4c6:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40d4ca:	e7c3      	b.n	40d454 <lv_draw_label+0x1a0>
  40d4cc:	3301      	adds	r3, #1
  40d4ce:	e7f6      	b.n	40d4be <lv_draw_label+0x20a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40d4d0:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40d4d4:	9200      	str	r2, [sp, #0]
  40d4d6:	9a06      	ldr	r2, [sp, #24]
  40d4d8:	ebab 0107 	sub.w	r1, fp, r7
  40d4dc:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d4de:	4438      	add	r0, r7
  40d4e0:	4c2c      	ldr	r4, [pc, #176]	; (40d594 <lv_draw_label+0x2e0>)
  40d4e2:	47a0      	blx	r4
  40d4e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d4e6:	8893      	ldrh	r3, [r2, #4]
  40d4e8:	8812      	ldrh	r2, [r2, #0]
  40d4ea:	1a9b      	subs	r3, r3, r2
  40d4ec:	b29b      	uxth	r3, r3
  40d4ee:	3301      	adds	r3, #1
  40d4f0:	b21b      	sxth	r3, r3
        pos.x += lv_area_get_width(coords) - line_width;
  40d4f2:	1a1b      	subs	r3, r3, r0
  40d4f4:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40d4f8:	4413      	add	r3, r2
  40d4fa:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40d4fe:	e7a9      	b.n	40d454 <lv_draw_label+0x1a0>
        lv_draw_line_dsc_init(&line_dsc);
  40d500:	a830      	add	r0, sp, #192	; 0xc0
  40d502:	4b25      	ldr	r3, [pc, #148]	; (40d598 <lv_draw_label+0x2e4>)
  40d504:	4798      	blx	r3
        line_dsc.color = dsc->color;
  40d506:	8833      	ldrh	r3, [r6, #0]
  40d508:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40d50c:	9b06      	ldr	r3, [sp, #24]
  40d50e:	f993 300e 	ldrsb.w	r3, [r3, #14]
  40d512:	b173      	cbz	r3, 40d532 <lv_draw_label+0x27e>
  40d514:	b21b      	sxth	r3, r3
  40d516:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
        line_dsc.opa = dsc->opa;
  40d51a:	7b33      	ldrb	r3, [r6, #12]
  40d51c:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
        line_dsc.blend_mode = dsc->blend_mode;
  40d520:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
  40d524:	f89d 30c9 	ldrb.w	r3, [sp, #201]	; 0xc9
  40d528:	f362 0301 	bfi	r3, r2, #0, #2
  40d52c:	f88d 30c9 	strb.w	r3, [sp, #201]	; 0xc9
  40d530:	e7a1      	b.n	40d476 <lv_draw_label+0x1c2>
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40d532:	2301      	movs	r3, #1
  40d534:	e7ef      	b.n	40d516 <lv_draw_label+0x262>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
  40d536:	4b19      	ldr	r3, [pc, #100]	; (40d59c <lv_draw_label+0x2e8>)
  40d538:	681b      	ldr	r3, [r3, #0]
  40d53a:	4459      	add	r1, fp
  40d53c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d53e:	4798      	blx	r3
  40d540:	9008      	str	r0, [sp, #32]
  40d542:	e093      	b.n	40d66c <lv_draw_label+0x3b8>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
  40d544:	b91f      	cbnz	r7, 40d54e <lv_draw_label+0x29a>
                        par_start = i;
  40d546:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40d548:	9311      	str	r3, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
  40d54a:	2701      	movs	r7, #1
                        continue;
  40d54c:	e07c      	b.n	40d648 <lv_draw_label+0x394>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
  40d54e:	2f01      	cmp	r7, #1
  40d550:	d004      	beq.n	40d55c <lv_draw_label+0x2a8>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
  40d552:	2f02      	cmp	r7, #2
  40d554:	f040 80a0 	bne.w	40d698 <lv_draw_label+0x3e4>
                        cmd_state = CMD_STATE_WAIT;
  40d558:	2700      	movs	r7, #0
  40d55a:	e075      	b.n	40d648 <lv_draw_label+0x394>
                        cmd_state = CMD_STATE_WAIT;
  40d55c:	2700      	movs	r7, #0
  40d55e:	e09b      	b.n	40d698 <lv_draw_label+0x3e4>
                    if(letter == ' ') {
  40d560:	9b05      	ldr	r3, [sp, #20]
  40d562:	2b20      	cmp	r3, #32
  40d564:	d170      	bne.n	40d648 <lv_draw_label+0x394>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
  40d566:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40d568:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d56a:	1a9b      	subs	r3, r3, r2
  40d56c:	2b07      	cmp	r3, #7
  40d56e:	d004      	beq.n	40d57a <lv_draw_label+0x2c6>
                            recolor.full = dsc->color.full;
  40d570:	8833      	ldrh	r3, [r6, #0]
  40d572:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40d576:	2702      	movs	r7, #2
                    continue;
  40d578:	e066      	b.n	40d648 <lv_draw_label+0x394>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
  40d57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d57c:	1899      	adds	r1, r3, r2
    uint8_t * d8 = (uint8_t *)dst;
  40d57e:	aa18      	add	r2, sp, #96	; 0x60
  40d580:	2306      	movs	r3, #6
  40d582:	e012      	b.n	40d5aa <lv_draw_label+0x2f6>
  40d584:	004147a1 	.word	0x004147a1
  40d588:	004165e9 	.word	0x004165e9
  40d58c:	0041645d 	.word	0x0041645d
  40d590:	004116a5 	.word	0x004116a5
  40d594:	0041653d 	.word	0x0041653d
  40d598:	0040e0bd 	.word	0x0040e0bd
  40d59c:	20400050 	.word	0x20400050
        *d8 = *s8;
  40d5a0:	f811 0b01 	ldrb.w	r0, [r1], #1
  40d5a4:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40d5a8:	3b01      	subs	r3, #1
    while(len) {
  40d5aa:	2b00      	cmp	r3, #0
  40d5ac:	d1f8      	bne.n	40d5a0 <lv_draw_label+0x2ec>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
  40d5ae:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
  40d5b2:	4db8      	ldr	r5, [pc, #736]	; (40d894 <lv_draw_label+0x5e0>)
  40d5b4:	47a8      	blx	r5
  40d5b6:	ea4f 1800 	mov.w	r8, r0, lsl #4
  40d5ba:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
  40d5be:	47a8      	blx	r5
  40d5c0:	4480      	add	r8, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
  40d5c2:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
  40d5c6:	47a8      	blx	r5
  40d5c8:	0104      	lsls	r4, r0, #4
  40d5ca:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
  40d5ce:	47a8      	blx	r5
  40d5d0:	4404      	add	r4, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  40d5d2:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
  40d5d6:	47a8      	blx	r5
  40d5d8:	0107      	lsls	r7, r0, #4
  40d5da:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
  40d5de:	47a8      	blx	r5
  40d5e0:	183b      	adds	r3, r7, r0
                            recolor = lv_color_make(r, g, b);
  40d5e2:	b2e4      	uxtb	r4, r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40d5e4:	0962      	lsrs	r2, r4, #5
  40d5e6:	f3c8 08c4 	ubfx	r8, r8, #3, #5
  40d5ea:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  40d5ee:	f3c4 0482 	ubfx	r4, r4, #2, #3
  40d5f2:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d5f4:	f362 0102 	bfi	r1, r2, #0, #3
  40d5f8:	460a      	mov	r2, r1
  40d5fa:	f368 02c7 	bfi	r2, r8, #3, #5
  40d5fe:	f363 220c 	bfi	r2, r3, #8, #5
  40d602:	4613      	mov	r3, r2
  40d604:	f364 334f 	bfi	r3, r4, #13, #3
  40d608:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  40d60c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40d610:	2702      	movs	r7, #2
  40d612:	e019      	b.n	40d648 <lv_draw_label+0x394>
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40d614:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
  40d618:	e045      	b.n	40d6a6 <lv_draw_label+0x3f2>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
  40d61a:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
  40d61e:	9302      	str	r3, [sp, #8]
  40d620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d622:	9301      	str	r3, [sp, #4]
  40d624:	f8ad 8000 	strh.w	r8, [sp]
  40d628:	9b05      	ldr	r3, [sp, #20]
  40d62a:	9a06      	ldr	r2, [sp, #24]
  40d62c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d62e:	a833      	add	r0, sp, #204	; 0xcc
  40d630:	4c99      	ldr	r4, [pc, #612]	; (40d898 <lv_draw_label+0x5e4>)
  40d632:	47a0      	blx	r4
            if(letter_w > 0) {
  40d634:	2d00      	cmp	r5, #0
  40d636:	dd07      	ble.n	40d648 <lv_draw_label+0x394>
                pos.x += letter_w + dsc->letter_space;
  40d638:	8a33      	ldrh	r3, [r6, #16]
  40d63a:	441d      	add	r5, r3
  40d63c:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40d640:	fa13 f585 	uxtah	r5, r3, r5
  40d644:	f8ad 50cc 	strh.w	r5, [sp, #204]	; 0xcc
        while(i < line_end - line_start) {
  40d648:	9b07      	ldr	r3, [sp, #28]
  40d64a:	eba3 030b 	sub.w	r3, r3, fp
  40d64e:	992f      	ldr	r1, [sp, #188]	; 0xbc
  40d650:	428b      	cmp	r3, r1
  40d652:	d95b      	bls.n	40d70c <lv_draw_label+0x458>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40d654:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40d658:	45a2      	cmp	sl, r4
  40d65a:	bf18      	it	ne
  40d65c:	45a1      	cmpne	r9, r4
  40d65e:	bf14      	ite	ne
  40d660:	2401      	movne	r4, #1
  40d662:	2400      	moveq	r4, #0
  40d664:	f47f af67 	bne.w	40d536 <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
  40d668:	2300      	movs	r3, #0
  40d66a:	9308      	str	r3, [sp, #32]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
  40d66c:	4d8b      	ldr	r5, [pc, #556]	; (40d89c <lv_draw_label+0x5e8>)
  40d66e:	682b      	ldr	r3, [r5, #0]
  40d670:	a92f      	add	r1, sp, #188	; 0xbc
  40d672:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40d676:	4640      	mov	r0, r8
  40d678:	4798      	blx	r3
  40d67a:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  40d67c:	682b      	ldr	r3, [r5, #0]
  40d67e:	2100      	movs	r1, #0
  40d680:	982f      	ldr	r0, [sp, #188]	; 0xbc
  40d682:	4440      	add	r0, r8
  40d684:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
  40d686:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40d68a:	f013 0f01 	tst.w	r3, #1
  40d68e:	d006      	beq.n	40d69e <lv_draw_label+0x3ea>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  40d690:	9b05      	ldr	r3, [sp, #20]
  40d692:	2b23      	cmp	r3, #35	; 0x23
  40d694:	f43f af56 	beq.w	40d544 <lv_draw_label+0x290>
                if(cmd_state == CMD_STATE_PAR) {
  40d698:	2f01      	cmp	r7, #1
  40d69a:	f43f af61 	beq.w	40d560 <lv_draw_label+0x2ac>
            lv_color_t color = dsc->color;
  40d69e:	f8b6 8000 	ldrh.w	r8, [r6]
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40d6a2:	2f02      	cmp	r7, #2
  40d6a4:	d0b6      	beq.n	40d614 <lv_draw_label+0x360>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  40d6a6:	4602      	mov	r2, r0
  40d6a8:	9905      	ldr	r1, [sp, #20]
  40d6aa:	9806      	ldr	r0, [sp, #24]
  40d6ac:	4b7c      	ldr	r3, [pc, #496]	; (40d8a0 <lv_draw_label+0x5ec>)
  40d6ae:	4798      	blx	r3
  40d6b0:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40d6b2:	2c00      	cmp	r4, #0
  40d6b4:	d0b1      	beq.n	40d61a <lv_draw_label+0x366>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
  40d6b6:	9a08      	ldr	r2, [sp, #32]
  40d6b8:	4613      	mov	r3, r2
  40d6ba:	4592      	cmp	sl, r2
  40d6bc:	bf8c      	ite	hi
  40d6be:	2300      	movhi	r3, #0
  40d6c0:	2301      	movls	r3, #1
  40d6c2:	4591      	cmp	r9, r2
  40d6c4:	bf98      	it	ls
  40d6c6:	2300      	movls	r3, #0
  40d6c8:	2b00      	cmp	r3, #0
  40d6ca:	d0a6      	beq.n	40d61a <lv_draw_label+0x366>
                    sel_coords.x1 = pos.x;
  40d6cc:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40d6d0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y1 = pos.y;
  40d6d4:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
  40d6d8:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
  40d6dc:	fa10 f383 	uxtah	r3, r0, r3
  40d6e0:	8a31      	ldrh	r1, [r6, #16]
  40d6e2:	fa11 f383 	uxtah	r3, r1, r3
  40d6e6:	b29b      	uxth	r3, r3
  40d6e8:	3b01      	subs	r3, #1
  40d6ea:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
  40d6ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d6f0:	fa13 f282 	uxtah	r2, r3, r2
  40d6f4:	b292      	uxth	r2, r2
  40d6f6:	3a01      	subs	r2, #1
  40d6f8:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
  40d6fc:	aa1a      	add	r2, sp, #104	; 0x68
  40d6fe:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d700:	a818      	add	r0, sp, #96	; 0x60
  40d702:	4b68      	ldr	r3, [pc, #416]	; (40d8a4 <lv_draw_label+0x5f0>)
  40d704:	4798      	blx	r3
                    color = dsc->sel_color;
  40d706:	f8b6 8002 	ldrh.w	r8, [r6, #2]
  40d70a:	e786      	b.n	40d61a <lv_draw_label+0x366>
  40d70c:	46c8      	mov	r8, r9
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
  40d70e:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40d712:	f013 0f02 	tst.w	r3, #2
  40d716:	d143      	bne.n	40d7a0 <lv_draw_label+0x4ec>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
  40d718:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40d71c:	f013 0f01 	tst.w	r3, #1
  40d720:	d166      	bne.n	40d7f0 <lv_draw_label+0x53c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40d722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d724:	9f07      	ldr	r7, [sp, #28]
  40d726:	19d5      	adds	r5, r2, r7
  40d728:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40d72c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40d730:	9300      	str	r3, [sp, #0]
  40d732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d734:	9906      	ldr	r1, [sp, #24]
  40d736:	4628      	mov	r0, r5
  40d738:	4c5b      	ldr	r4, [pc, #364]	; (40d8a8 <lv_draw_label+0x5f4>)
  40d73a:	47a0      	blx	r4
  40d73c:	183c      	adds	r4, r7, r0
        pos.x = coords->x1;
  40d73e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d740:	f9b3 3000 	ldrsh.w	r3, [r3]
  40d744:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40d748:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40d74c:	f012 0f04 	tst.w	r2, #4
  40d750:	d170      	bne.n	40d834 <lv_draw_label+0x580>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40d752:	f012 0f08 	tst.w	r2, #8
  40d756:	f040 8087 	bne.w	40d868 <lv_draw_label+0x5b4>
        pos.y += line_height;
  40d75a:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40d75e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d760:	4413      	add	r3, r2
  40d762:	b21b      	sxth	r3, r3
  40d764:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(pos.y > mask->y2) return;
  40d768:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d76a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        line_start = line_end;
  40d76e:	f8dd b01c 	ldr.w	fp, [sp, #28]
        if(pos.y > mask->y2) return;
  40d772:	4293      	cmp	r3, r2
  40d774:	f73f ada9 	bgt.w	40d2ca <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40d778:	9407      	str	r4, [sp, #28]
    while(txt[line_start] != '\0') {
  40d77a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d77c:	4613      	mov	r3, r2
  40d77e:	445b      	add	r3, fp
  40d780:	930a      	str	r3, [sp, #40]	; 0x28
  40d782:	f812 300b 	ldrb.w	r3, [r2, fp]
  40d786:	2b00      	cmp	r3, #0
  40d788:	f43f ad9f 	beq.w	40d2ca <lv_draw_label+0x16>
        pos.x += x_ofs;
  40d78c:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40d790:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d792:	4413      	add	r3, r2
  40d794:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        i         = 0;
  40d798:	2700      	movs	r7, #0
  40d79a:	972f      	str	r7, [sp, #188]	; 0xbc
  40d79c:	46c1      	mov	r9, r8
        while(i < line_end - line_start) {
  40d79e:	e753      	b.n	40d648 <lv_draw_label+0x394>
            p1.x = pos_x_start;
  40d7a0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40d7a4:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40d7a8:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40d7ac:	68b2      	ldr	r2, [r6, #8]
  40d7ae:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  40d7b2:	2a00      	cmp	r2, #0
  40d7b4:	db18      	blt.n	40d7e8 <lv_draw_label+0x534>
  40d7b6:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40d7ba:	b29b      	uxth	r3, r3
  40d7bc:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
  40d7c0:	2a00      	cmp	r2, #0
  40d7c2:	db13      	blt.n	40d7ec <lv_draw_label+0x538>
  40d7c4:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40d7c8:	b21b      	sxth	r3, r3
  40d7ca:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40d7ce:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40d7d2:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40d7d6:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40d7da:	ab30      	add	r3, sp, #192	; 0xc0
  40d7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d7de:	a918      	add	r1, sp, #96	; 0x60
  40d7e0:	a817      	add	r0, sp, #92	; 0x5c
  40d7e2:	4c32      	ldr	r4, [pc, #200]	; (40d8ac <lv_draw_label+0x5f8>)
  40d7e4:	47a0      	blx	r4
  40d7e6:	e797      	b.n	40d718 <lv_draw_label+0x464>
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40d7e8:	3201      	adds	r2, #1
  40d7ea:	e7e4      	b.n	40d7b6 <lv_draw_label+0x502>
  40d7ec:	3201      	adds	r2, #1
  40d7ee:	e7e9      	b.n	40d7c4 <lv_draw_label+0x510>
            p1.x = pos_x_start;
  40d7f0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40d7f4:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
  40d7f8:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40d7fc:	68b2      	ldr	r2, [r6, #8]
  40d7fe:	8911      	ldrh	r1, [r2, #8]
  40d800:	440b      	add	r3, r1
  40d802:	b29b      	uxth	r3, r3
  40d804:	8952      	ldrh	r2, [r2, #10]
  40d806:	1a9b      	subs	r3, r3, r2
  40d808:	b29b      	uxth	r3, r3
  40d80a:	9a06      	ldr	r2, [sp, #24]
  40d80c:	f992 200d 	ldrsb.w	r2, [r2, #13]
  40d810:	b292      	uxth	r2, r2
  40d812:	1a9b      	subs	r3, r3, r2
  40d814:	b21b      	sxth	r3, r3
  40d816:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40d81a:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40d81e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40d822:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40d826:	ab30      	add	r3, sp, #192	; 0xc0
  40d828:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d82a:	a918      	add	r1, sp, #96	; 0x60
  40d82c:	a817      	add	r0, sp, #92	; 0x5c
  40d82e:	4c1f      	ldr	r4, [pc, #124]	; (40d8ac <lv_draw_label+0x5f8>)
  40d830:	47a0      	blx	r4
  40d832:	e776      	b.n	40d722 <lv_draw_label+0x46e>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40d834:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40d838:	9200      	str	r2, [sp, #0]
  40d83a:	9a06      	ldr	r2, [sp, #24]
  40d83c:	4601      	mov	r1, r0
  40d83e:	4628      	mov	r0, r5
  40d840:	4d1b      	ldr	r5, [pc, #108]	; (40d8b0 <lv_draw_label+0x5fc>)
  40d842:	47a8      	blx	r5
  40d844:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d846:	8893      	ldrh	r3, [r2, #4]
  40d848:	8812      	ldrh	r2, [r2, #0]
  40d84a:	1a9b      	subs	r3, r3, r2
  40d84c:	b29b      	uxth	r3, r3
  40d84e:	3301      	adds	r3, #1
  40d850:	b21b      	sxth	r3, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40d852:	1a18      	subs	r0, r3, r0
  40d854:	d406      	bmi.n	40d864 <lv_draw_label+0x5b0>
  40d856:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40d85a:	eb03 0360 	add.w	r3, r3, r0, asr #1
  40d85e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40d862:	e77a      	b.n	40d75a <lv_draw_label+0x4a6>
  40d864:	3001      	adds	r0, #1
  40d866:	e7f6      	b.n	40d856 <lv_draw_label+0x5a2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40d868:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40d86c:	9200      	str	r2, [sp, #0]
  40d86e:	9a06      	ldr	r2, [sp, #24]
  40d870:	4601      	mov	r1, r0
  40d872:	4628      	mov	r0, r5
  40d874:	4d0e      	ldr	r5, [pc, #56]	; (40d8b0 <lv_draw_label+0x5fc>)
  40d876:	47a8      	blx	r5
  40d878:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d87a:	8893      	ldrh	r3, [r2, #4]
  40d87c:	8812      	ldrh	r2, [r2, #0]
  40d87e:	1a9b      	subs	r3, r3, r2
  40d880:	b29b      	uxth	r3, r3
  40d882:	3301      	adds	r3, #1
  40d884:	b21b      	sxth	r3, r3
            pos.x += lv_area_get_width(coords) - line_width;
  40d886:	1a1b      	subs	r3, r3, r0
  40d888:	f8bd 00cc 	ldrh.w	r0, [sp, #204]	; 0xcc
  40d88c:	4403      	add	r3, r0
  40d88e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40d892:	e762      	b.n	40d75a <lv_draw_label+0x4a6>
  40d894:	0040c9e9 	.word	0x0040c9e9
  40d898:	0040d181 	.word	0x0040d181
  40d89c:	20400054 	.word	0x20400054
  40d8a0:	00412d85 	.word	0x00412d85
  40d8a4:	004116f1 	.word	0x004116f1
  40d8a8:	0041645d 	.word	0x0041645d
  40d8ac:	0040e0d9 	.word	0x0040e0d9
  40d8b0:	0041653d 	.word	0x0041653d

0040d8b4 <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40d8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d8b8:	b08b      	sub	sp, #44	; 0x2c
  40d8ba:	4681      	mov	r9, r0
  40d8bc:	468a      	mov	sl, r1
  40d8be:	9204      	str	r2, [sp, #16]
  40d8c0:	461c      	mov	r4, r3
    lv_opa_t opa = dsc->opa;
  40d8c2:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40d8c6:	4b76      	ldr	r3, [pc, #472]	; (40daa0 <draw_line_hor+0x1ec>)
  40d8c8:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40d8ca:	4b76      	ldr	r3, [pc, #472]	; (40daa4 <draw_line_hor+0x1f0>)
  40d8cc:	4798      	blx	r3
  40d8ce:	4606      	mov	r6, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40d8d0:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
  40d8d4:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
  40d8d6:	ea4f 0865 	mov.w	r8, r5, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40d8da:	f005 0501 	and.w	r5, r5, #1
  40d8de:	4445      	add	r5, r8

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40d8e0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40d8e4:	b123      	cbz	r3, 40d8f0 <draw_line_hor+0x3c>
  40d8e6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40d8ea:	b943      	cbnz	r3, 40d8fe <draw_line_hor+0x4a>
  40d8ec:	2700      	movs	r7, #0
  40d8ee:	e000      	b.n	40d8f2 <draw_line_hor+0x3e>
  40d8f0:	2700      	movs	r7, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40d8f2:	4b6d      	ldr	r3, [pc, #436]	; (40daa8 <draw_line_hor+0x1f4>)
  40d8f4:	4798      	blx	r3
  40d8f6:	b920      	cbnz	r0, 40d902 <draw_line_hor+0x4e>
    else if(dashed) simple_mode = false;
  40d8f8:	bb7f      	cbnz	r7, 40d95a <draw_line_hor+0xa6>
    bool simple_mode = true;
  40d8fa:	2201      	movs	r2, #1
  40d8fc:	e002      	b.n	40d904 <draw_line_hor+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40d8fe:	2701      	movs	r7, #1
  40d900:	e7f7      	b.n	40d8f2 <draw_line_hor+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40d902:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
  40d904:	f9ba 3000 	ldrsh.w	r3, [sl]
  40d908:	f9b9 1000 	ldrsh.w	r1, [r9]
  40d90c:	4618      	mov	r0, r3
  40d90e:	428b      	cmp	r3, r1
  40d910:	bfa8      	it	ge
  40d912:	4608      	movge	r0, r1
  40d914:	f8ad 0020 	strh.w	r0, [sp, #32]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
  40d918:	428b      	cmp	r3, r1
  40d91a:	bfb8      	it	lt
  40d91c:	460b      	movlt	r3, r1
  40d91e:	b29b      	uxth	r3, r3
  40d920:	3b01      	subs	r3, #1
  40d922:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y1 = point1->y - w_half1;
  40d926:	f8b9 3002 	ldrh.w	r3, [r9, #2]
  40d92a:	1b5d      	subs	r5, r3, r5
  40d92c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
    draw_area.y2 = point1->y + w_half0;
  40d930:	4498      	add	r8, r3
  40d932:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40d936:	b192      	cbz	r2, 40d95e <draw_line_hor+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40d938:	7a63      	ldrb	r3, [r4, #9]
  40d93a:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40d93e:	8822      	ldrh	r2, [r4, #0]
  40d940:	9302      	str	r3, [sp, #8]
  40d942:	f8cd b004 	str.w	fp, [sp, #4]
  40d946:	2301      	movs	r3, #1
  40d948:	9300      	str	r3, [sp, #0]
  40d94a:	2300      	movs	r3, #0
  40d94c:	a908      	add	r1, sp, #32
  40d94e:	9804      	ldr	r0, [sp, #16]
  40d950:	4c56      	ldr	r4, [pc, #344]	; (40daac <draw_line_hor+0x1f8>)
  40d952:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40d954:	b00b      	add	sp, #44	; 0x2c
  40d956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40d95a:	2200      	movs	r2, #0
  40d95c:	e7d2      	b.n	40d904 <draw_line_hor+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40d95e:	aa08      	add	r2, sp, #32
  40d960:	9904      	ldr	r1, [sp, #16]
  40d962:	4610      	mov	r0, r2
  40d964:	4b52      	ldr	r3, [pc, #328]	; (40dab0 <draw_line_hor+0x1fc>)
  40d966:	4798      	blx	r3
        if(!is_common) return;
  40d968:	2800      	cmp	r0, #0
  40d96a:	d0f3      	beq.n	40d954 <draw_line_hor+0xa0>
        draw_area.x1 -= disp_area->x1;
  40d96c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
  40d970:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
  40d974:	b28b      	uxth	r3, r1
  40d976:	ebae 0503 	sub.w	r5, lr, r3
  40d97a:	b2ad      	uxth	r5, r5
  40d97c:	fa0f fc85 	sxth.w	ip, r5
  40d980:	f8ad c020 	strh.w	ip, [sp, #32]
        draw_area.y1 -= disp_area->y1;
  40d984:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40d988:	f8b6 8012 	ldrh.w	r8, [r6, #18]
  40d98c:	eba2 0008 	sub.w	r0, r2, r8
  40d990:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        draw_area.x2 -= disp_area->x1;
  40d994:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
  40d998:	1ac3      	subs	r3, r0, r3
  40d99a:	b29b      	uxth	r3, r3
  40d99c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= disp_area->y1;
  40d9a0:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
  40d9a4:	eba9 0808 	sub.w	r8, r9, r8
  40d9a8:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
  40d9ac:	1b5d      	subs	r5, r3, r5
  40d9ae:	b2ad      	uxth	r5, r5
  40d9b0:	3501      	adds	r5, #1
  40d9b2:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40d9b4:	f8ad e018 	strh.w	lr, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40d9b8:	f8ad 001c 	strh.w	r0, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40d9bc:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40d9c0:	f8ad 201e 	strh.w	r2, [sp, #30]
        if(dashed) {
  40d9c4:	b1a7      	cbz	r7, 40d9f0 <draw_line_hor+0x13c>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
  40d9c6:	4461      	add	r1, ip
  40d9c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40d9cc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  40d9d0:	4413      	add	r3, r2
  40d9d2:	fb91 fcf3 	sdiv	ip, r1, r3
  40d9d6:	fb03 111c 	mls	r1, r3, ip, r1
  40d9da:	b20b      	sxth	r3, r1
  40d9dc:	9305      	str	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40d9de:	46ab      	mov	fp, r5
  40d9e0:	4628      	mov	r0, r5
  40d9e2:	4b34      	ldr	r3, [pc, #208]	; (40dab4 <draw_line_hor+0x200>)
  40d9e4:	4798      	blx	r3
  40d9e6:	4681      	mov	r9, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40d9e8:	f9bd 8022 	ldrsh.w	r8, [sp, #34]	; 0x22
  40d9ec:	46ba      	mov	sl, r7
  40d9ee:	e037      	b.n	40da60 <draw_line_hor+0x1ac>
        lv_style_int_t dash_start = 0;
  40d9f0:	2300      	movs	r3, #0
  40d9f2:	9305      	str	r3, [sp, #20]
  40d9f4:	e7f3      	b.n	40d9de <draw_line_hor+0x12a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40d9f6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  40d9fa:	440b      	add	r3, r1
  40d9fc:	429a      	cmp	r2, r3
  40d9fe:	da13      	bge.n	40da28 <draw_line_hor+0x174>
                            mask_buf[i] = 0x00;
  40da00:	2300      	movs	r3, #0
  40da02:	f809 3000 	strb.w	r3, [r9, r0]
  40da06:	4613      	mov	r3, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  40da08:	3001      	adds	r0, #1
  40da0a:	b200      	sxth	r0, r0
  40da0c:	3301      	adds	r3, #1
  40da0e:	b21a      	sxth	r2, r3
  40da10:	42a8      	cmp	r0, r5
  40da12:	da0b      	bge.n	40da2c <draw_line_hor+0x178>
                        if(dash_cnt <= dsc->dash_width) {
  40da14:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40da18:	429a      	cmp	r2, r3
  40da1a:	dcec      	bgt.n	40d9f6 <draw_line_hor+0x142>
                            int16_t diff = dsc->dash_width - dash_cnt;
  40da1c:	b299      	uxth	r1, r3
  40da1e:	1a8a      	subs	r2, r1, r2
                            i += diff;
  40da20:	fa10 f082 	uxtah	r0, r0, r2
  40da24:	b200      	sxth	r0, r0
  40da26:	e7ef      	b.n	40da08 <draw_line_hor+0x154>
                            dash_cnt = 0;
  40da28:	2300      	movs	r3, #0
  40da2a:	e7ed      	b.n	40da08 <draw_line_hor+0x154>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40da2c:	2002      	movs	r0, #2
                           dsc->blend_mode);
  40da2e:	7a63      	ldrb	r3, [r4, #9]
  40da30:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(clip, &fill_area,
  40da34:	9302      	str	r3, [sp, #8]
  40da36:	7a23      	ldrb	r3, [r4, #8]
  40da38:	9301      	str	r3, [sp, #4]
  40da3a:	9000      	str	r0, [sp, #0]
  40da3c:	464b      	mov	r3, r9
  40da3e:	8822      	ldrh	r2, [r4, #0]
  40da40:	a906      	add	r1, sp, #24
  40da42:	9804      	ldr	r0, [sp, #16]
  40da44:	4f19      	ldr	r7, [pc, #100]	; (40daac <draw_line_hor+0x1f8>)
  40da46:	47b8      	blx	r7
            fill_area.y1++;
  40da48:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40da4c:	3301      	adds	r3, #1
  40da4e:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40da52:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40da56:	3301      	adds	r3, #1
  40da58:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40da5c:	f108 0801 	add.w	r8, r8, #1
  40da60:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40da64:	4598      	cmp	r8, r3
  40da66:	dc17      	bgt.n	40da98 <draw_line_hor+0x1e4>
            _lv_memset_ff(mask_buf, draw_area_w);
  40da68:	4659      	mov	r1, fp
  40da6a:	4648      	mov	r0, r9
  40da6c:	4b12      	ldr	r3, [pc, #72]	; (40dab8 <draw_line_hor+0x204>)
  40da6e:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40da70:	8a31      	ldrh	r1, [r6, #16]
  40da72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40da76:	4419      	add	r1, r3
  40da78:	8a72      	ldrh	r2, [r6, #18]
  40da7a:	4442      	add	r2, r8
  40da7c:	462b      	mov	r3, r5
  40da7e:	b212      	sxth	r2, r2
  40da80:	b209      	sxth	r1, r1
  40da82:	4648      	mov	r0, r9
  40da84:	4f0d      	ldr	r7, [pc, #52]	; (40dabc <draw_line_hor+0x208>)
  40da86:	47b8      	blx	r7
            if(dashed) {
  40da88:	f1ba 0f00 	cmp.w	sl, #0
  40da8c:	d0cf      	beq.n	40da2e <draw_line_hor+0x17a>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40da8e:	2800      	cmp	r0, #0
  40da90:	d0cd      	beq.n	40da2e <draw_line_hor+0x17a>
  40da92:	9a05      	ldr	r2, [sp, #20]
  40da94:	2000      	movs	r0, #0
  40da96:	e7bb      	b.n	40da10 <draw_line_hor+0x15c>
        _lv_mem_buf_release(mask_buf);
  40da98:	4648      	mov	r0, r9
  40da9a:	4b09      	ldr	r3, [pc, #36]	; (40dac0 <draw_line_hor+0x20c>)
  40da9c:	4798      	blx	r3
  40da9e:	e759      	b.n	40d954 <draw_line_hor+0xa0>
  40daa0:	00408ba9 	.word	0x00408ba9
  40daa4:	0041403d 	.word	0x0041403d
  40daa8:	0040ef2d 	.word	0x0040ef2d
  40daac:	0040bc09 	.word	0x0040bc09
  40dab0:	004147a1 	.word	0x004147a1
  40dab4:	00415b15 	.word	0x00415b15
  40dab8:	00415cf9 	.word	0x00415cf9
  40dabc:	0040ee65 	.word	0x0040ee65
  40dac0:	004158c5 	.word	0x004158c5

0040dac4 <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40dac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dac8:	b08b      	sub	sp, #44	; 0x2c
  40daca:	4680      	mov	r8, r0
  40dacc:	468a      	mov	sl, r1
  40dace:	9204      	str	r2, [sp, #16]
  40dad0:	461d      	mov	r5, r3
    lv_opa_t opa = dsc->opa;
  40dad2:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40dad6:	4b71      	ldr	r3, [pc, #452]	; (40dc9c <draw_line_ver+0x1d8>)
  40dad8:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40dada:	4b71      	ldr	r3, [pc, #452]	; (40dca0 <draw_line_ver+0x1dc>)
  40dadc:	4798      	blx	r3
  40dade:	4607      	mov	r7, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40dae0:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  40dae4:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
  40dae6:	ea4f 0964 	mov.w	r9, r4, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40daea:	f004 0401 	and.w	r4, r4, #1
  40daee:	444c      	add	r4, r9

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40daf0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40daf4:	b123      	cbz	r3, 40db00 <draw_line_ver+0x3c>
  40daf6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40dafa:	b943      	cbnz	r3, 40db0e <draw_line_ver+0x4a>
  40dafc:	2600      	movs	r6, #0
  40dafe:	e000      	b.n	40db02 <draw_line_ver+0x3e>
  40db00:	2600      	movs	r6, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40db02:	4b68      	ldr	r3, [pc, #416]	; (40dca4 <draw_line_ver+0x1e0>)
  40db04:	4798      	blx	r3
  40db06:	b920      	cbnz	r0, 40db12 <draw_line_ver+0x4e>
    else if(dashed) simple_mode = false;
  40db08:	bb7e      	cbnz	r6, 40db6a <draw_line_ver+0xa6>
    bool simple_mode = true;
  40db0a:	2201      	movs	r2, #1
  40db0c:	e002      	b.n	40db14 <draw_line_ver+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40db0e:	2601      	movs	r6, #1
  40db10:	e7f7      	b.n	40db02 <draw_line_ver+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40db12:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
  40db14:	f8b8 3000 	ldrh.w	r3, [r8]
  40db18:	1b1c      	subs	r4, r3, r4
  40db1a:	f8ad 4020 	strh.w	r4, [sp, #32]
    draw_area.x2 = point1->x + w_half0;
  40db1e:	4499      	add	r9, r3
  40db20:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
  40db24:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  40db28:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
  40db2c:	4618      	mov	r0, r3
  40db2e:	428b      	cmp	r3, r1
  40db30:	bfa8      	it	ge
  40db32:	4608      	movge	r0, r1
  40db34:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
  40db38:	428b      	cmp	r3, r1
  40db3a:	bfb8      	it	lt
  40db3c:	460b      	movlt	r3, r1
  40db3e:	b29b      	uxth	r3, r3
  40db40:	3b01      	subs	r3, #1
  40db42:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40db46:	b192      	cbz	r2, 40db6e <draw_line_ver+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40db48:	7a6b      	ldrb	r3, [r5, #9]
  40db4a:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40db4e:	882a      	ldrh	r2, [r5, #0]
  40db50:	9302      	str	r3, [sp, #8]
  40db52:	f8cd b004 	str.w	fp, [sp, #4]
  40db56:	2301      	movs	r3, #1
  40db58:	9300      	str	r3, [sp, #0]
  40db5a:	2300      	movs	r3, #0
  40db5c:	a908      	add	r1, sp, #32
  40db5e:	9804      	ldr	r0, [sp, #16]
  40db60:	4c51      	ldr	r4, [pc, #324]	; (40dca8 <draw_line_ver+0x1e4>)
  40db62:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40db64:	b00b      	add	sp, #44	; 0x2c
  40db66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40db6a:	2200      	movs	r2, #0
  40db6c:	e7d2      	b.n	40db14 <draw_line_ver+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40db6e:	aa08      	add	r2, sp, #32
  40db70:	9904      	ldr	r1, [sp, #16]
  40db72:	4610      	mov	r0, r2
  40db74:	4b4d      	ldr	r3, [pc, #308]	; (40dcac <draw_line_ver+0x1e8>)
  40db76:	4798      	blx	r3
        if(!is_common) return;
  40db78:	2800      	cmp	r0, #0
  40db7a:	d0f3      	beq.n	40db64 <draw_line_ver+0xa0>
        draw_area.x1 -= vdb->area.x1;
  40db7c:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
  40db80:	8a3b      	ldrh	r3, [r7, #16]
  40db82:	eba0 0b03 	sub.w	fp, r0, r3
  40db86:	fa1f fb8b 	uxth.w	fp, fp
  40db8a:	f8ad b020 	strh.w	fp, [sp, #32]
        draw_area.y1 -= vdb->area.y1;
  40db8e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40db92:	f8b7 e012 	ldrh.w	lr, [r7, #18]
  40db96:	eba2 010e 	sub.w	r1, r2, lr
  40db9a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        draw_area.x2 -= vdb->area.x1;
  40db9e:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40dba2:	1acb      	subs	r3, r1, r3
  40dba4:	b29b      	uxth	r3, r3
  40dba6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= vdb->area.y1;
  40dbaa:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
  40dbae:	eba4 040e 	sub.w	r4, r4, lr
  40dbb2:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  40dbb6:	eba3 0b0b 	sub.w	fp, r3, fp
  40dbba:	fa1f fb8b 	uxth.w	fp, fp
  40dbbe:	f10b 0b01 	add.w	fp, fp, #1
  40dbc2:	fa0f fb8b 	sxth.w	fp, fp
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40dbc6:	f8ad 0018 	strh.w	r0, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40dbca:	f8ad 101c 	strh.w	r1, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40dbce:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40dbd2:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40dbd6:	f8cd b014 	str.w	fp, [sp, #20]
  40dbda:	4658      	mov	r0, fp
  40dbdc:	4b34      	ldr	r3, [pc, #208]	; (40dcb0 <draw_line_ver+0x1ec>)
  40dbde:	4798      	blx	r3
  40dbe0:	4680      	mov	r8, r0
        if(dashed) {
  40dbe2:	b19e      	cbz	r6, 40dc0c <draw_line_ver+0x148>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
  40dbe4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
  40dbe8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
  40dbec:	441a      	add	r2, r3
  40dbee:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40dbf2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
  40dbf6:	444b      	add	r3, r9
  40dbf8:	fb92 f9f3 	sdiv	r9, r2, r3
  40dbfc:	fb03 2919 	mls	r9, r3, r9, r2
  40dc00:	fa0f f989 	sxth.w	r9, r9
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40dc04:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40dc08:	46b2      	mov	sl, r6
  40dc0a:	e01c      	b.n	40dc46 <draw_line_ver+0x182>
        lv_style_int_t dash_start = 0;
  40dc0c:	f04f 0900 	mov.w	r9, #0
  40dc10:	e7f8      	b.n	40dc04 <draw_line_ver+0x140>
                dash_cnt ++;
  40dc12:	f109 0901 	add.w	r9, r9, #1
  40dc16:	fa0f f989 	sxth.w	r9, r9
            _lv_blend_fill(clip, &fill_area,
  40dc1a:	2300      	movs	r3, #0
  40dc1c:	9302      	str	r3, [sp, #8]
  40dc1e:	7a2b      	ldrb	r3, [r5, #8]
  40dc20:	9301      	str	r3, [sp, #4]
  40dc22:	9000      	str	r0, [sp, #0]
  40dc24:	4643      	mov	r3, r8
  40dc26:	882a      	ldrh	r2, [r5, #0]
  40dc28:	a906      	add	r1, sp, #24
  40dc2a:	9804      	ldr	r0, [sp, #16]
  40dc2c:	4e1e      	ldr	r6, [pc, #120]	; (40dca8 <draw_line_ver+0x1e4>)
  40dc2e:	47b0      	blx	r6
            fill_area.y1++;
  40dc30:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40dc34:	3301      	adds	r3, #1
  40dc36:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40dc3a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40dc3e:	3301      	adds	r3, #1
  40dc40:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40dc44:	3401      	adds	r4, #1
  40dc46:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40dc4a:	429c      	cmp	r4, r3
  40dc4c:	dc21      	bgt.n	40dc92 <draw_line_ver+0x1ce>
            _lv_memset_ff(mask_buf, draw_area_w);
  40dc4e:	9905      	ldr	r1, [sp, #20]
  40dc50:	4640      	mov	r0, r8
  40dc52:	4b18      	ldr	r3, [pc, #96]	; (40dcb4 <draw_line_ver+0x1f0>)
  40dc54:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40dc56:	8a39      	ldrh	r1, [r7, #16]
  40dc58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40dc5c:	4419      	add	r1, r3
  40dc5e:	8a7a      	ldrh	r2, [r7, #18]
  40dc60:	4422      	add	r2, r4
  40dc62:	465b      	mov	r3, fp
  40dc64:	b212      	sxth	r2, r2
  40dc66:	b209      	sxth	r1, r1
  40dc68:	4640      	mov	r0, r8
  40dc6a:	4e13      	ldr	r6, [pc, #76]	; (40dcb8 <draw_line_ver+0x1f4>)
  40dc6c:	47b0      	blx	r6
            if(dashed) {
  40dc6e:	f1ba 0f00 	cmp.w	sl, #0
  40dc72:	d0d2      	beq.n	40dc1a <draw_line_ver+0x156>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40dc74:	2800      	cmp	r0, #0
  40dc76:	d0cc      	beq.n	40dc12 <draw_line_ver+0x14e>
                    if(dash_cnt > dsc->dash_width) {
  40dc78:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  40dc7c:	4591      	cmp	r9, r2
  40dc7e:	dd00      	ble.n	40dc82 <draw_line_ver+0x1be>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
  40dc80:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40dc82:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40dc86:	4413      	add	r3, r2
  40dc88:	4599      	cmp	r9, r3
  40dc8a:	dbc2      	blt.n	40dc12 <draw_line_ver+0x14e>
                        dash_cnt = 0;
  40dc8c:	f04f 0900 	mov.w	r9, #0
  40dc90:	e7bf      	b.n	40dc12 <draw_line_ver+0x14e>
        _lv_mem_buf_release(mask_buf);
  40dc92:	4640      	mov	r0, r8
  40dc94:	4b09      	ldr	r3, [pc, #36]	; (40dcbc <draw_line_ver+0x1f8>)
  40dc96:	4798      	blx	r3
  40dc98:	e764      	b.n	40db64 <draw_line_ver+0xa0>
  40dc9a:	bf00      	nop
  40dc9c:	00408ba9 	.word	0x00408ba9
  40dca0:	0041403d 	.word	0x0041403d
  40dca4:	0040ef2d 	.word	0x0040ef2d
  40dca8:	0040bc09 	.word	0x0040bc09
  40dcac:	004147a1 	.word	0x004147a1
  40dcb0:	00415b15 	.word	0x00415b15
  40dcb4:	00415cf9 	.word	0x00415cf9
  40dcb8:	0040ee65 	.word	0x0040ee65
  40dcbc:	004158c5 	.word	0x004158c5

0040dcc0 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
  40dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dcc4:	b0bf      	sub	sp, #252	; 0xfc
  40dcc6:	9206      	str	r2, [sp, #24]
  40dcc8:	9305      	str	r3, [sp, #20]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
  40dcca:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40dcce:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40dcd2:	4293      	cmp	r3, r2
  40dcd4:	f280 80e7 	bge.w	40dea6 <draw_line_skew+0x1e6>
        p1.y = point1->y;
  40dcd8:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
        p2.y = point2->y;
  40dcdc:	f8ad 20f2 	strh.w	r2, [sp, #242]	; 0xf2
        p1.x = point1->x;
  40dce0:	f9b0 3000 	ldrsh.w	r3, [r0]
  40dce4:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point2->x;
  40dce8:	f9b1 3000 	ldrsh.w	r3, [r1]
  40dcec:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
  40dcf0:	f9bd 80f0 	ldrsh.w	r8, [sp, #240]	; 0xf0
  40dcf4:	f9bd 70f4 	ldrsh.w	r7, [sp, #244]	; 0xf4
  40dcf8:	eba8 0907 	sub.w	r9, r8, r7
    int32_t ydiff = p2.y - p1.y;
  40dcfc:	f9bd 50f2 	ldrsh.w	r5, [sp, #242]	; 0xf2
  40dd00:	f9bd 60f6 	ldrsh.w	r6, [sp, #246]	; 0xf6
  40dd04:	1bab      	subs	r3, r5, r6
  40dd06:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
  40dd08:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
  40dd0c:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
  40dd10:	2b00      	cmp	r3, #0
  40dd12:	bfb8      	it	lt
  40dd14:	425b      	neglt	r3, r3
  40dd16:	469a      	mov	sl, r3
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
  40dd18:	9b05      	ldr	r3, [sp, #20]
  40dd1a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
  40dd1e:	45d3      	cmp	fp, sl
  40dd20:	f340 80ce 	ble.w	40dec0 <draw_line_skew+0x200>
  40dd24:	ea4f 134a 	mov.w	r3, sl, lsl #5
  40dd28:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
  40dd2c:	49a1      	ldr	r1, [pc, #644]	; (40dfb4 <draw_line_skew+0x2f4>)
  40dd2e:	5ccc      	ldrb	r4, [r1, r3]
  40dd30:	fb04 f402 	mul.w	r4, r4, r2
  40dd34:	343f      	adds	r4, #63	; 0x3f
  40dd36:	11e3      	asrs	r3, r4, #7
    int32_t w_half0 = w >> 1;
  40dd38:	1224      	asrs	r4, r4, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40dd3a:	f003 0201 	and.w	r2, r3, #1
  40dd3e:	18a2      	adds	r2, r4, r2
  40dd40:	9204      	str	r2, [sp, #16]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
  40dd42:	4642      	mov	r2, r8
  40dd44:	45b8      	cmp	r8, r7
  40dd46:	bfa8      	it	ge
  40dd48:	463a      	movge	r2, r7
  40dd4a:	b292      	uxth	r2, r2
  40dd4c:	b29b      	uxth	r3, r3
  40dd4e:	1ad2      	subs	r2, r2, r3
  40dd50:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
  40dd54:	4642      	mov	r2, r8
  40dd56:	45b8      	cmp	r8, r7
  40dd58:	bfb8      	it	lt
  40dd5a:	463a      	movlt	r2, r7
  40dd5c:	fa13 f282 	uxtah	r2, r3, r2
  40dd60:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
  40dd64:	462a      	mov	r2, r5
  40dd66:	42b5      	cmp	r5, r6
  40dd68:	bfa8      	it	ge
  40dd6a:	4632      	movge	r2, r6
  40dd6c:	b292      	uxth	r2, r2
  40dd6e:	1ad2      	subs	r2, r2, r3
  40dd70:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
  40dd74:	462a      	mov	r2, r5
  40dd76:	42b5      	cmp	r5, r6
  40dd78:	bfb8      	it	lt
  40dd7a:	4632      	movlt	r2, r6
  40dd7c:	fa13 f382 	uxtah	r3, r3, r2
  40dd80:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
  40dd84:	9a06      	ldr	r2, [sp, #24]
  40dd86:	a93a      	add	r1, sp, #232	; 0xe8
  40dd88:	4608      	mov	r0, r1
  40dd8a:	4b8b      	ldr	r3, [pc, #556]	; (40dfb8 <draw_line_skew+0x2f8>)
  40dd8c:	4798      	blx	r3
    if(is_common == false) return;
  40dd8e:	2800      	cmp	r0, #0
  40dd90:	f000 8187 	beq.w	40e0a2 <draw_line_skew+0x3e2>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
  40dd94:	45d3      	cmp	fp, sl
  40dd96:	f340 80b6 	ble.w	40df06 <draw_line_skew+0x246>
        if(xdiff > 0) {
  40dd9a:	f1b9 0f00 	cmp.w	r9, #0
  40dd9e:	f340 8094 	ble.w	40deca <draw_line_skew+0x20a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40dda2:	b2b6      	uxth	r6, r6
  40dda4:	b2a4      	uxth	r4, r4
  40dda6:	1b32      	subs	r2, r6, r4
  40dda8:	b2ad      	uxth	r5, r5
  40ddaa:	1b2c      	subs	r4, r5, r4
  40ddac:	2300      	movs	r3, #0
  40ddae:	9301      	str	r3, [sp, #4]
  40ddb0:	b224      	sxth	r4, r4
  40ddb2:	9400      	str	r4, [sp, #0]
  40ddb4:	4643      	mov	r3, r8
  40ddb6:	b212      	sxth	r2, r2
  40ddb8:	4639      	mov	r1, r7
  40ddba:	a82f      	add	r0, sp, #188	; 0xbc
  40ddbc:	4c7f      	ldr	r4, [pc, #508]	; (40dfbc <draw_line_skew+0x2fc>)
  40ddbe:	47a0      	blx	r4
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40ddc0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40ddc4:	441e      	add	r6, r3
  40ddc6:	441d      	add	r5, r3
  40ddc8:	2301      	movs	r3, #1
  40ddca:	9301      	str	r3, [sp, #4]
  40ddcc:	b22d      	sxth	r5, r5
  40ddce:	9500      	str	r5, [sp, #0]
  40ddd0:	4643      	mov	r3, r8
  40ddd2:	b232      	sxth	r2, r6
  40ddd4:	4639      	mov	r1, r7
  40ddd6:	a824      	add	r0, sp, #144	; 0x90
  40ddd8:	47a0      	blx	r4
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
  40ddda:	2100      	movs	r1, #0
  40dddc:	a82f      	add	r0, sp, #188	; 0xbc
  40ddde:	4c78      	ldr	r4, [pc, #480]	; (40dfc0 <draw_line_skew+0x300>)
  40dde0:	47a0      	blx	r4
  40dde2:	9008      	str	r0, [sp, #32]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
  40dde4:	2100      	movs	r1, #0
  40dde6:	a824      	add	r0, sp, #144	; 0x90
  40dde8:	47a0      	blx	r4
  40ddea:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
  40ddec:	9b05      	ldr	r3, [sp, #20]
  40ddee:	7a5b      	ldrb	r3, [r3, #9]
  40ddf0:	f013 0f10 	tst.w	r3, #16
  40ddf4:	f000 80a6 	beq.w	40df44 <draw_line_skew+0x284>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
  40ddf8:	f04f 33ff 	mov.w	r3, #4294967295
  40ddfc:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t mask_top_id = LV_MASK_ID_INV;
  40ddfe:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40de00:	4b70      	ldr	r3, [pc, #448]	; (40dfc4 <draw_line_skew+0x304>)
  40de02:	4798      	blx	r3
  40de04:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40de06:	4b70      	ldr	r3, [pc, #448]	; (40dfc8 <draw_line_skew+0x308>)
  40de08:	4798      	blx	r3
  40de0a:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
  40de0c:	8a00      	ldrh	r0, [r0, #16]
  40de0e:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
  40de12:	1a24      	subs	r4, r4, r0
  40de14:	b2a4      	uxth	r4, r4
  40de16:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40de1a:	f8ba 1012 	ldrh.w	r1, [sl, #18]
  40de1e:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40de22:	1a52      	subs	r2, r2, r1
  40de24:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40de28:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40de2c:	1a1b      	subs	r3, r3, r0
  40de2e:	b29b      	uxth	r3, r3
  40de30:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40de34:	f8bd 20ee 	ldrh.w	r2, [sp, #238]	; 0xee
  40de38:	1a52      	subs	r2, r2, r1
  40de3a:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
  40de3e:	1b1c      	subs	r4, r3, r4
  40de40:	b2a4      	uxth	r4, r4
  40de42:	3401      	adds	r4, #1
  40de44:	b224      	sxth	r4, r4
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
  40de46:	4628      	mov	r0, r5
  40de48:	4b60      	ldr	r3, [pc, #384]	; (40dfcc <draw_line_skew+0x30c>)
  40de4a:	4798      	blx	r3
  40de4c:	4683      	mov	fp, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40de4e:	a83a      	add	r0, sp, #232	; 0xe8
  40de50:	4b5f      	ldr	r3, [pc, #380]	; (40dfd0 <draw_line_skew+0x310>)
  40de52:	4798      	blx	r3
  40de54:	4583      	cmp	fp, r0
  40de56:	f200 80a3 	bhi.w	40dfa0 <draw_line_skew+0x2e0>
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40de5a:	4658      	mov	r0, fp
  40de5c:	4b5d      	ldr	r3, [pc, #372]	; (40dfd4 <draw_line_skew+0x314>)
  40de5e:	4798      	blx	r3
  40de60:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
  40de62:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40de66:	f8ba 3010 	ldrh.w	r3, [sl, #16]
  40de6a:	441a      	add	r2, r3
  40de6c:	b212      	sxth	r2, r2
  40de6e:	9204      	str	r2, [sp, #16]
  40de70:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    fill_area.x2 = draw_area.x2 + disp_area->x1;
  40de74:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40de78:	4413      	add	r3, r2
  40de7a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    fill_area.y1 = draw_area.y1 + disp_area->y1;
  40de7e:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40de82:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  40de86:	4413      	add	r3, r2
  40de88:	b21b      	sxth	r3, r3
  40de8a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    fill_area.y2 = fill_area.y1;
  40de8e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
  40de92:	4659      	mov	r1, fp
  40de94:	4b50      	ldr	r3, [pc, #320]	; (40dfd8 <draw_line_skew+0x318>)
  40de96:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40de98:	f9bd 50ea 	ldrsh.w	r5, [sp, #234]	; 0xea
  40de9c:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  40dea0:	441d      	add	r5, r3
    uint32_t mask_p = 0;
  40dea2:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40dea4:	e0bd      	b.n	40e022 <draw_line_skew+0x362>
        p1.y = point2->y;
  40dea6:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
        p2.y = point1->y;
  40deaa:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
        p1.x = point2->x;
  40deae:	f9b1 3000 	ldrsh.w	r3, [r1]
  40deb2:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point1->x;
  40deb6:	f9b0 3000 	ldrsh.w	r3, [r0]
  40deba:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
  40debe:	e717      	b.n	40dcf0 <draw_line_skew+0x30>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
  40dec0:	ea4f 134b 	mov.w	r3, fp, lsl #5
  40dec4:	fb93 f3fa 	sdiv	r3, r3, sl
  40dec8:	e730      	b.n	40dd2c <draw_line_skew+0x6c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40deca:	b2b6      	uxth	r6, r6
  40decc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40ded0:	18f2      	adds	r2, r6, r3
  40ded2:	b2ad      	uxth	r5, r5
  40ded4:	442b      	add	r3, r5
  40ded6:	2100      	movs	r1, #0
  40ded8:	9101      	str	r1, [sp, #4]
  40deda:	b21b      	sxth	r3, r3
  40dedc:	9300      	str	r3, [sp, #0]
  40dede:	4643      	mov	r3, r8
  40dee0:	b212      	sxth	r2, r2
  40dee2:	4639      	mov	r1, r7
  40dee4:	a82f      	add	r0, sp, #188	; 0xbc
  40dee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 40dfbc <draw_line_skew+0x2fc>
  40deea:	47d0      	blx	sl
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40deec:	b2a4      	uxth	r4, r4
  40deee:	1b36      	subs	r6, r6, r4
  40def0:	1b2d      	subs	r5, r5, r4
  40def2:	2301      	movs	r3, #1
  40def4:	9301      	str	r3, [sp, #4]
  40def6:	b22d      	sxth	r5, r5
  40def8:	9500      	str	r5, [sp, #0]
  40defa:	4643      	mov	r3, r8
  40defc:	b232      	sxth	r2, r6
  40defe:	4639      	mov	r1, r7
  40df00:	a824      	add	r0, sp, #144	; 0x90
  40df02:	47d0      	blx	sl
  40df04:	e769      	b.n	40ddda <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
  40df06:	b2bf      	uxth	r7, r7
  40df08:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40df0c:	18f9      	adds	r1, r7, r3
  40df0e:	fa1f f888 	uxth.w	r8, r8
  40df12:	4443      	add	r3, r8
  40df14:	2200      	movs	r2, #0
  40df16:	9201      	str	r2, [sp, #4]
  40df18:	9500      	str	r5, [sp, #0]
  40df1a:	b21b      	sxth	r3, r3
  40df1c:	4632      	mov	r2, r6
  40df1e:	b209      	sxth	r1, r1
  40df20:	a82f      	add	r0, sp, #188	; 0xbc
  40df22:	f8df a098 	ldr.w	sl, [pc, #152]	; 40dfbc <draw_line_skew+0x2fc>
  40df26:	47d0      	blx	sl
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
  40df28:	b2a4      	uxth	r4, r4
  40df2a:	1b3f      	subs	r7, r7, r4
  40df2c:	eba8 0804 	sub.w	r8, r8, r4
  40df30:	2301      	movs	r3, #1
  40df32:	9301      	str	r3, [sp, #4]
  40df34:	9500      	str	r5, [sp, #0]
  40df36:	fa0f f388 	sxth.w	r3, r8
  40df3a:	4632      	mov	r2, r6
  40df3c:	b239      	sxth	r1, r7
  40df3e:	a824      	add	r0, sp, #144	; 0x90
  40df40:	47d0      	blx	sl
  40df42:	e74a      	b.n	40ddda <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  40df44:	f9bd 10f4 	ldrsh.w	r1, [sp, #244]	; 0xf4
  40df48:	f9bd 20f6 	ldrsh.w	r2, [sp, #246]	; 0xf6
  40df4c:	b28b      	uxth	r3, r1
  40df4e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  40df52:	1b5b      	subs	r3, r3, r5
  40df54:	fa1f f989 	uxth.w	r9, r9
  40df58:	fa19 f082 	uxtah	r0, r9, r2
  40df5c:	2403      	movs	r4, #3
  40df5e:	9401      	str	r4, [sp, #4]
  40df60:	b200      	sxth	r0, r0
  40df62:	9000      	str	r0, [sp, #0]
  40df64:	b21b      	sxth	r3, r3
  40df66:	a819      	add	r0, sp, #100	; 0x64
  40df68:	4c14      	ldr	r4, [pc, #80]	; (40dfbc <draw_line_skew+0x2fc>)
  40df6a:	47a0      	blx	r4
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
  40df6c:	f9bd 10f0 	ldrsh.w	r1, [sp, #240]	; 0xf0
  40df70:	f9bd 20f2 	ldrsh.w	r2, [sp, #242]	; 0xf2
  40df74:	b28b      	uxth	r3, r1
  40df76:	1b5b      	subs	r3, r3, r5
  40df78:	fa19 f982 	uxtah	r9, r9, r2
  40df7c:	2002      	movs	r0, #2
  40df7e:	9001      	str	r0, [sp, #4]
  40df80:	fa0f f089 	sxth.w	r0, r9
  40df84:	9000      	str	r0, [sp, #0]
  40df86:	b21b      	sxth	r3, r3
  40df88:	a80e      	add	r0, sp, #56	; 0x38
  40df8a:	47a0      	blx	r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
  40df8c:	2100      	movs	r1, #0
  40df8e:	a819      	add	r0, sp, #100	; 0x64
  40df90:	4c0b      	ldr	r4, [pc, #44]	; (40dfc0 <draw_line_skew+0x300>)
  40df92:	47a0      	blx	r4
  40df94:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
  40df96:	2100      	movs	r1, #0
  40df98:	a80e      	add	r0, sp, #56	; 0x38
  40df9a:	47a0      	blx	r4
  40df9c:	900b      	str	r0, [sp, #44]	; 0x2c
  40df9e:	e72f      	b.n	40de00 <draw_line_skew+0x140>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40dfa0:	a83a      	add	r0, sp, #232	; 0xe8
  40dfa2:	4b0b      	ldr	r3, [pc, #44]	; (40dfd0 <draw_line_skew+0x310>)
  40dfa4:	4798      	blx	r3
  40dfa6:	4683      	mov	fp, r0
  40dfa8:	e757      	b.n	40de5a <draw_line_skew+0x19a>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
  40dfaa:	4621      	mov	r1, r4
  40dfac:	4638      	mov	r0, r7
  40dfae:	4b0b      	ldr	r3, [pc, #44]	; (40dfdc <draw_line_skew+0x31c>)
  40dfb0:	4798      	blx	r3
  40dfb2:	e048      	b.n	40e046 <draw_line_skew+0x386>
  40dfb4:	004213b4 	.word	0x004213b4
  40dfb8:	004147a1 	.word	0x004147a1
  40dfbc:	0040ef51 	.word	0x0040ef51
  40dfc0:	0040ee31 	.word	0x0040ee31
  40dfc4:	00408ba9 	.word	0x00408ba9
  40dfc8:	0041403d 	.word	0x0041403d
  40dfcc:	00413f39 	.word	0x00413f39
  40dfd0:	00414785 	.word	0x00414785
  40dfd4:	00415b15 	.word	0x00415b15
  40dfd8:	00415cf9 	.word	0x00415cf9
  40dfdc:	00415ca1 	.word	0x00415ca1
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
  40dfe0:	9905      	ldr	r1, [sp, #20]
  40dfe2:	7a4b      	ldrb	r3, [r1, #9]
  40dfe4:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(&fill_area, clip,
  40dfe8:	880a      	ldrh	r2, [r1, #0]
  40dfea:	f8ad 201c 	strh.w	r2, [sp, #28]
  40dfee:	9302      	str	r3, [sp, #8]
  40dff0:	7a0b      	ldrb	r3, [r1, #8]
  40dff2:	9301      	str	r3, [sp, #4]
  40dff4:	2302      	movs	r3, #2
  40dff6:	9300      	str	r3, [sp, #0]
  40dff8:	464b      	mov	r3, r9
  40dffa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40dffe:	9906      	ldr	r1, [sp, #24]
  40e000:	a80c      	add	r0, sp, #48	; 0x30
  40e002:	4e29      	ldr	r6, [pc, #164]	; (40e0a8 <draw_line_skew+0x3e8>)
  40e004:	47b0      	blx	r6

            fill_area.y1 = fill_area.y2 + 1;
  40e006:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
  40e00a:	3301      	adds	r3, #1
  40e00c:	b21b      	sxth	r3, r3
  40e00e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            fill_area.y2 = fill_area.y1;
  40e012:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
  40e016:	4659      	mov	r1, fp
  40e018:	4648      	mov	r0, r9
  40e01a:	4b24      	ldr	r3, [pc, #144]	; (40e0ac <draw_line_skew+0x3ec>)
  40e01c:	4798      	blx	r3
            mask_p = 0;
  40e01e:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e020:	3501      	adds	r5, #1
  40e022:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
  40e026:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  40e02a:	4413      	add	r3, r2
  40e02c:	429d      	cmp	r5, r3
  40e02e:	dc14      	bgt.n	40e05a <draw_line_skew+0x39a>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
  40e030:	eb09 0706 	add.w	r7, r9, r6
  40e034:	4623      	mov	r3, r4
  40e036:	b22a      	sxth	r2, r5
  40e038:	9904      	ldr	r1, [sp, #16]
  40e03a:	4638      	mov	r0, r7
  40e03c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40e0b8 <draw_line_skew+0x3f8>
  40e040:	47c0      	blx	r8
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40e042:	2800      	cmp	r0, #0
  40e044:	d0b1      	beq.n	40dfaa <draw_line_skew+0x2ea>
        mask_p += draw_area_w;
  40e046:	4426      	add	r6, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
  40e048:	19a3      	adds	r3, r4, r6
  40e04a:	459b      	cmp	fp, r3
  40e04c:	d9c8      	bls.n	40dfe0 <draw_line_skew+0x320>
            fill_area.y2 ++;
  40e04e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40e052:	3301      	adds	r3, #1
  40e054:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  40e058:	e7e2      	b.n	40e020 <draw_line_skew+0x360>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
  40e05a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
  40e05e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40e062:	429a      	cmp	r2, r3
  40e064:	d011      	beq.n	40e08a <draw_line_skew+0x3ca>
        fill_area.y2--;
  40e066:	3b01      	subs	r3, #1
  40e068:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
  40e06c:	9905      	ldr	r1, [sp, #20]
  40e06e:	7a4b      	ldrb	r3, [r1, #9]
  40e070:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(&fill_area, clip,
  40e074:	880a      	ldrh	r2, [r1, #0]
  40e076:	9302      	str	r3, [sp, #8]
  40e078:	7a0b      	ldrb	r3, [r1, #8]
  40e07a:	9301      	str	r3, [sp, #4]
  40e07c:	2302      	movs	r3, #2
  40e07e:	9300      	str	r3, [sp, #0]
  40e080:	464b      	mov	r3, r9
  40e082:	9906      	ldr	r1, [sp, #24]
  40e084:	a80c      	add	r0, sp, #48	; 0x30
  40e086:	4c08      	ldr	r4, [pc, #32]	; (40e0a8 <draw_line_skew+0x3e8>)
  40e088:	47a0      	blx	r4

    }

    _lv_mem_buf_release(mask_buf);
  40e08a:	4648      	mov	r0, r9
  40e08c:	4b08      	ldr	r3, [pc, #32]	; (40e0b0 <draw_line_skew+0x3f0>)
  40e08e:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
  40e090:	9808      	ldr	r0, [sp, #32]
  40e092:	4c08      	ldr	r4, [pc, #32]	; (40e0b4 <draw_line_skew+0x3f4>)
  40e094:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_right_id);
  40e096:	9809      	ldr	r0, [sp, #36]	; 0x24
  40e098:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_top_id);
  40e09a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e09c:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_bottom_id);
  40e09e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e0a0:	47a0      	blx	r4
}
  40e0a2:	b03f      	add	sp, #252	; 0xfc
  40e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e0a8:	0040bc09 	.word	0x0040bc09
  40e0ac:	00415cf9 	.word	0x00415cf9
  40e0b0:	004158c5 	.word	0x004158c5
  40e0b4:	0040eeb5 	.word	0x0040eeb5
  40e0b8:	0040ee65 	.word	0x0040ee65

0040e0bc <lv_draw_line_dsc_init>:
{
  40e0bc:	b510      	push	{r4, lr}
  40e0be:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
  40e0c0:	210a      	movs	r1, #10
  40e0c2:	4b04      	ldr	r3, [pc, #16]	; (40e0d4 <lv_draw_line_dsc_init+0x18>)
  40e0c4:	4798      	blx	r3
    dsc->width = 1;
  40e0c6:	2301      	movs	r3, #1
  40e0c8:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
  40e0ca:	23ff      	movs	r3, #255	; 0xff
  40e0cc:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
  40e0ce:	2300      	movs	r3, #0
  40e0d0:	8023      	strh	r3, [r4, #0]
  40e0d2:	bd10      	pop	{r4, pc}
  40e0d4:	00415ca1 	.word	0x00415ca1

0040e0d8 <lv_draw_line>:
{
  40e0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40e0dc:	b09b      	sub	sp, #108	; 0x6c
    if(dsc->width == 0) return;
  40e0de:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
  40e0e2:	2c00      	cmp	r4, #0
  40e0e4:	d05e      	beq.n	40e1a4 <lv_draw_line+0xcc>
    if(dsc->opa <= LV_OPA_MIN) return;
  40e0e6:	7a1d      	ldrb	r5, [r3, #8]
  40e0e8:	2d02      	cmp	r5, #2
  40e0ea:	d95b      	bls.n	40e1a4 <lv_draw_line+0xcc>
    if(point1->x == point2->x && point1->y == point2->y) return;
  40e0ec:	f9b0 5000 	ldrsh.w	r5, [r0]
  40e0f0:	f9b1 6000 	ldrsh.w	r6, [r1]
  40e0f4:	42b5      	cmp	r5, r6
  40e0f6:	d058      	beq.n	40e1aa <lv_draw_line+0xd2>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40e0f8:	42b5      	cmp	r5, r6
  40e0fa:	bfa8      	it	ge
  40e0fc:	4635      	movge	r5, r6
  40e0fe:	b2ad      	uxth	r5, r5
  40e100:	4626      	mov	r6, r4
  40e102:	2c00      	cmp	r4, #0
  40e104:	db58      	blt.n	40e1b8 <lv_draw_line+0xe0>
  40e106:	f3c6 064f 	ubfx	r6, r6, #1, #16
  40e10a:	1bad      	subs	r5, r5, r6
  40e10c:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
  40e110:	f9b1 4000 	ldrsh.w	r4, [r1]
  40e114:	f9b0 5000 	ldrsh.w	r5, [r0]
  40e118:	42ac      	cmp	r4, r5
  40e11a:	bfb8      	it	lt
  40e11c:	462c      	movlt	r4, r5
  40e11e:	fa16 f484 	uxtah	r4, r6, r4
  40e122:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40e126:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40e12a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40e12e:	42ac      	cmp	r4, r5
  40e130:	bfa8      	it	ge
  40e132:	462c      	movge	r4, r5
  40e134:	b2a4      	uxth	r4, r4
  40e136:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40e13a:	2d00      	cmp	r5, #0
  40e13c:	db3e      	blt.n	40e1bc <lv_draw_line+0xe4>
  40e13e:	eba4 0465 	sub.w	r4, r4, r5, asr #1
  40e142:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40e146:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40e14a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40e14e:	42ac      	cmp	r4, r5
  40e150:	bfb8      	it	lt
  40e152:	462c      	movlt	r4, r5
  40e154:	b2a4      	uxth	r4, r4
  40e156:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40e15a:	2d00      	cmp	r5, #0
  40e15c:	db30      	blt.n	40e1c0 <lv_draw_line+0xe8>
  40e15e:	461e      	mov	r6, r3
  40e160:	4690      	mov	r8, r2
  40e162:	460f      	mov	r7, r1
  40e164:	4681      	mov	r9, r0
  40e166:	eb04 0365 	add.w	r3, r4, r5, asr #1
  40e16a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
  40e16e:	a918      	add	r1, sp, #96	; 0x60
  40e170:	4608      	mov	r0, r1
  40e172:	4b45      	ldr	r3, [pc, #276]	; (40e288 <lv_draw_line+0x1b0>)
  40e174:	4798      	blx	r3
    if(!is_common) return;
  40e176:	b1a8      	cbz	r0, 40e1a4 <lv_draw_line+0xcc>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40e178:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40e17c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  40e180:	429a      	cmp	r2, r3
  40e182:	d01f      	beq.n	40e1c4 <lv_draw_line+0xec>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40e184:	f9b9 2000 	ldrsh.w	r2, [r9]
  40e188:	f9b7 3000 	ldrsh.w	r3, [r7]
  40e18c:	429a      	cmp	r2, r3
  40e18e:	d020      	beq.n	40e1d2 <lv_draw_line+0xfa>
    else draw_line_skew(point1, point2, &clip_line, dsc);
  40e190:	4633      	mov	r3, r6
  40e192:	aa18      	add	r2, sp, #96	; 0x60
  40e194:	4639      	mov	r1, r7
  40e196:	4648      	mov	r0, r9
  40e198:	4c3c      	ldr	r4, [pc, #240]	; (40e28c <lv_draw_line+0x1b4>)
  40e19a:	47a0      	blx	r4
    if(dsc->round_end || dsc->round_start) {
  40e19c:	7a73      	ldrb	r3, [r6, #9]
  40e19e:	f013 0f0c 	tst.w	r3, #12
  40e1a2:	d11d      	bne.n	40e1e0 <lv_draw_line+0x108>
}
  40e1a4:	b01b      	add	sp, #108	; 0x6c
  40e1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(point1->x == point2->x && point1->y == point2->y) return;
  40e1aa:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
  40e1ae:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
  40e1b2:	45be      	cmp	lr, r7
  40e1b4:	d1a0      	bne.n	40e0f8 <lv_draw_line+0x20>
  40e1b6:	e7f5      	b.n	40e1a4 <lv_draw_line+0xcc>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40e1b8:	1c66      	adds	r6, r4, #1
  40e1ba:	e7a4      	b.n	40e106 <lv_draw_line+0x2e>
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40e1bc:	3501      	adds	r5, #1
  40e1be:	e7be      	b.n	40e13e <lv_draw_line+0x66>
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40e1c0:	3501      	adds	r5, #1
  40e1c2:	e7cc      	b.n	40e15e <lv_draw_line+0x86>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40e1c4:	4633      	mov	r3, r6
  40e1c6:	aa18      	add	r2, sp, #96	; 0x60
  40e1c8:	4639      	mov	r1, r7
  40e1ca:	4648      	mov	r0, r9
  40e1cc:	4c30      	ldr	r4, [pc, #192]	; (40e290 <lv_draw_line+0x1b8>)
  40e1ce:	47a0      	blx	r4
  40e1d0:	e7e4      	b.n	40e19c <lv_draw_line+0xc4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40e1d2:	4633      	mov	r3, r6
  40e1d4:	aa18      	add	r2, sp, #96	; 0x60
  40e1d6:	4639      	mov	r1, r7
  40e1d8:	4648      	mov	r0, r9
  40e1da:	4c2e      	ldr	r4, [pc, #184]	; (40e294 <lv_draw_line+0x1bc>)
  40e1dc:	47a0      	blx	r4
  40e1de:	e7dd      	b.n	40e19c <lv_draw_line+0xc4>
        lv_draw_rect_dsc_init(&cir_dsc);
  40e1e0:	a803      	add	r0, sp, #12
  40e1e2:	4b2d      	ldr	r3, [pc, #180]	; (40e298 <lv_draw_line+0x1c0>)
  40e1e4:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
  40e1e6:	8833      	ldrh	r3, [r6, #0]
  40e1e8:	f8ad 300e 	strh.w	r3, [sp, #14]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
  40e1ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40e1f0:	f8ad 300c 	strh.w	r3, [sp, #12]
        cir_dsc.bg_opa = dsc->opa;
  40e1f4:	7a33      	ldrb	r3, [r6, #8]
  40e1f6:	f88d 3018 	strb.w	r3, [sp, #24]
        int32_t r = (dsc->width >> 1);
  40e1fa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  40e1fe:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
  40e200:	b29b      	uxth	r3, r3
  40e202:	f083 0301 	eor.w	r3, r3, #1
  40e206:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
  40e20a:	7a73      	ldrb	r3, [r6, #9]
  40e20c:	f013 0f04 	tst.w	r3, #4
  40e210:	d11d      	bne.n	40e24e <lv_draw_line+0x176>
        if(dsc->round_end) {
  40e212:	7a73      	ldrb	r3, [r6, #9]
  40e214:	f013 0f08 	tst.w	r3, #8
  40e218:	d0c4      	beq.n	40e1a4 <lv_draw_line+0xcc>
            cir_area.x1 = point2->x - r;
  40e21a:	883b      	ldrh	r3, [r7, #0]
  40e21c:	b2a4      	uxth	r4, r4
  40e21e:	1b1a      	subs	r2, r3, r4
  40e220:	f8ad 2004 	strh.w	r2, [sp, #4]
            cir_area.y1 = point2->y - r;
  40e224:	8879      	ldrh	r1, [r7, #2]
  40e226:	1b0a      	subs	r2, r1, r4
  40e228:	f8ad 2006 	strh.w	r2, [sp, #6]
            cir_area.x2 = point2->x + r - r_corr;
  40e22c:	18e2      	adds	r2, r4, r3
  40e22e:	b292      	uxth	r2, r2
  40e230:	b2ad      	uxth	r5, r5
  40e232:	1b52      	subs	r2, r2, r5
  40e234:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point2->y + r - r_corr ;
  40e238:	440c      	add	r4, r1
  40e23a:	b2a3      	uxth	r3, r4
  40e23c:	1b5b      	subs	r3, r3, r5
  40e23e:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40e242:	aa03      	add	r2, sp, #12
  40e244:	4641      	mov	r1, r8
  40e246:	a801      	add	r0, sp, #4
  40e248:	4b14      	ldr	r3, [pc, #80]	; (40e29c <lv_draw_line+0x1c4>)
  40e24a:	4798      	blx	r3
  40e24c:	e7aa      	b.n	40e1a4 <lv_draw_line+0xcc>
            cir_area.x1 = point1->x - r;
  40e24e:	f8b9 2000 	ldrh.w	r2, [r9]
  40e252:	b2a3      	uxth	r3, r4
  40e254:	1ad1      	subs	r1, r2, r3
  40e256:	f8ad 1004 	strh.w	r1, [sp, #4]
            cir_area.y1 = point1->y - r;
  40e25a:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  40e25e:	1ac1      	subs	r1, r0, r3
  40e260:	f8ad 1006 	strh.w	r1, [sp, #6]
            cir_area.x2 = point1->x + r - r_corr;
  40e264:	441a      	add	r2, r3
  40e266:	b292      	uxth	r2, r2
  40e268:	b2a9      	uxth	r1, r5
  40e26a:	1a52      	subs	r2, r2, r1
  40e26c:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point1->y + r - r_corr ;
  40e270:	4403      	add	r3, r0
  40e272:	b29b      	uxth	r3, r3
  40e274:	1a5b      	subs	r3, r3, r1
  40e276:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40e27a:	aa03      	add	r2, sp, #12
  40e27c:	4641      	mov	r1, r8
  40e27e:	a801      	add	r0, sp, #4
  40e280:	4b06      	ldr	r3, [pc, #24]	; (40e29c <lv_draw_line+0x1c4>)
  40e282:	4798      	blx	r3
  40e284:	e7c5      	b.n	40e212 <lv_draw_line+0x13a>
  40e286:	bf00      	nop
  40e288:	004147a1 	.word	0x004147a1
  40e28c:	0040dcc1 	.word	0x0040dcc1
  40e290:	0040d8b5 	.word	0x0040d8b5
  40e294:	0040dac5 	.word	0x0040dac5
  40e298:	004116a5 	.word	0x004116a5
  40e29c:	004116f1 	.word	0x004116f1

0040e2a0 <line_mask_flat>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
  40e2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e2a2:	9e06      	ldr	r6, [sp, #24]
    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
  40e2a4:	69f4      	ldr	r4, [r6, #28]
  40e2a6:	fb01 f504 	mul.w	r5, r1, r4
  40e2aa:	12ad      	asrs	r5, r5, #10

    if(p->yx_steep > 0) {
  40e2ac:	2c00      	cmp	r4, #0
  40e2ae:	dd09      	ble.n	40e2c4 <line_mask_flat+0x24>
        if(y_at_x > abs_y) {
  40e2b0:	4295      	cmp	r5, r2
  40e2b2:	dd11      	ble.n	40e2d8 <line_mask_flat+0x38>
            if(p->inv) {
  40e2b4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e2b8:	f013 0f02 	tst.w	r3, #2
  40e2bc:	f000 80e2 	beq.w	40e484 <line_mask_flat+0x1e4>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e2c0:	2001      	movs	r0, #1
  40e2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
  40e2c4:	4295      	cmp	r5, r2
  40e2c6:	da07      	bge.n	40e2d8 <line_mask_flat+0x38>
            if(p->inv) {
  40e2c8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e2cc:	f013 0f02 	tst.w	r3, #2
  40e2d0:	f000 80da 	beq.w	40e488 <line_mask_flat+0x1e8>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e2d4:	2001      	movs	r0, #1
  40e2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  40e2d8:	461f      	mov	r7, r3
  40e2da:	18cd      	adds	r5, r1, r3
  40e2dc:	fb05 f504 	mul.w	r5, r5, r4
  40e2e0:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40e2e2:	2c00      	cmp	r4, #0
  40e2e4:	dd09      	ble.n	40e2fa <line_mask_flat+0x5a>
        if(y_at_x < abs_y) {
  40e2e6:	4295      	cmp	r5, r2
  40e2e8:	da11      	bge.n	40e30e <line_mask_flat+0x6e>
            if(p->inv) {
  40e2ea:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e2ee:	f013 0f02 	tst.w	r3, #2
  40e2f2:	f000 80cb 	beq.w	40e48c <line_mask_flat+0x1ec>
                return LV_DRAW_MASK_RES_TRANSP;
  40e2f6:	2000      	movs	r0, #0
  40e2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
  40e2fa:	4295      	cmp	r5, r2
  40e2fc:	dd07      	ble.n	40e30e <line_mask_flat+0x6e>
            if(p->inv) {
  40e2fe:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e302:	f013 0f02 	tst.w	r3, #2
  40e306:	f000 80c3 	beq.w	40e490 <line_mask_flat+0x1f0>
                return LV_DRAW_MASK_RES_TRANSP;
  40e30a:	2000      	movs	r0, #0
  40e30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
  40e30e:	2c00      	cmp	r4, #0
  40e310:	dd39      	ble.n	40e386 <line_mask_flat+0xe6>
  40e312:	0212      	lsls	r2, r2, #8
  40e314:	69b4      	ldr	r4, [r6, #24]
  40e316:	fb04 f202 	mul.w	r2, r4, r2
  40e31a:	1292      	asrs	r2, r2, #10
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;

    int32_t xei = xe >> 8;
  40e31c:	ea4f 2e22 	mov.w	lr, r2, asr #8
    int32_t xef = xe & 0xFF;

    int32_t px_h;
    if(xef == 0) px_h = 255;
  40e320:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  40e324:	d036      	beq.n	40e394 <line_mask_flat+0xf4>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
  40e326:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40e32a:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40e32c:	fb04 f505 	mul.w	r5, r4, r5
  40e330:	122d      	asrs	r5, r5, #8
  40e332:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    int32_t k = xei - abs_x;
  40e336:	ebae 0101 	sub.w	r1, lr, r1
    lv_opa_t m;

    if(xef) {
  40e33a:	2a00      	cmp	r2, #0
  40e33c:	d05d      	beq.n	40e3fa <line_mask_flat+0x15a>
        if(k >= 0 && k < len) {
  40e33e:	2900      	cmp	r1, #0
  40e340:	db1f      	blt.n	40e382 <line_mask_flat+0xe2>
  40e342:	428b      	cmp	r3, r1
  40e344:	dd1d      	ble.n	40e382 <line_mask_flat+0xe2>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40e346:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40e34a:	f1c5 04ff 	rsb	r4, r5, #255	; 0xff
  40e34e:	fb04 f202 	mul.w	r2, r4, r2
  40e352:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40e356:	43d4      	mvns	r4, r2
  40e358:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40e35a:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40e35e:	f01e 0f02 	tst.w	lr, #2
  40e362:	d100      	bne.n	40e366 <line_mask_flat+0xc6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40e364:	4622      	mov	r2, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e366:	5c44      	ldrb	r4, [r0, r1]
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e368:	2afc      	cmp	r2, #252	; 0xfc
  40e36a:	d809      	bhi.n	40e380 <line_mask_flat+0xe0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e36c:	2a02      	cmp	r2, #2
  40e36e:	d913      	bls.n	40e398 <line_mask_flat+0xf8>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e370:	fb04 f202 	mul.w	r2, r4, r2
  40e374:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40e378:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40e37c:	f3c2 54c7 	ubfx	r4, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e380:	5444      	strb	r4, [r0, r1]
        k++;
  40e382:	1c4a      	adds	r2, r1, #1
  40e384:	e013      	b.n	40e3ae <line_mask_flat+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40e386:	3201      	adds	r2, #1
  40e388:	0212      	lsls	r2, r2, #8
  40e38a:	69b4      	ldr	r4, [r6, #24]
  40e38c:	fb04 f202 	mul.w	r2, r4, r2
  40e390:	1292      	asrs	r2, r2, #10
  40e392:	e7c3      	b.n	40e31c <line_mask_flat+0x7c>
    if(xef == 0) px_h = 255;
  40e394:	25ff      	movs	r5, #255	; 0xff
  40e396:	e7ce      	b.n	40e336 <line_mask_flat+0x96>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e398:	2400      	movs	r4, #0
  40e39a:	e7f1      	b.n	40e380 <line_mask_flat+0xe0>
  40e39c:	f04f 0e00 	mov.w	lr, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e3a0:	f88c e000 	strb.w	lr, [ip]
        px_h -= p->spx;
  40e3a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40e3a6:	1b2d      	subs	r5, r5, r4
        k++;
  40e3a8:	3201      	adds	r2, #1
        if(k >= len) break;
  40e3aa:	4297      	cmp	r7, r2
  40e3ac:	dd27      	ble.n	40e3fe <line_mask_flat+0x15e>
    while(px_h > p->spx) {
  40e3ae:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
  40e3b2:	4575      	cmp	r5, lr
  40e3b4:	dd23      	ble.n	40e3fe <line_mask_flat+0x15e>
        if(k >= 0 && k < len) {
  40e3b6:	2a00      	cmp	r2, #0
  40e3b8:	dbf4      	blt.n	40e3a4 <line_mask_flat+0x104>
  40e3ba:	42ba      	cmp	r2, r7
  40e3bc:	daf2      	bge.n	40e3a4 <line_mask_flat+0x104>
            m = px_h - (p->spx >> 1);
  40e3be:	b2ec      	uxtb	r4, r5
  40e3c0:	f3ce 0e47 	ubfx	lr, lr, #1, #8
  40e3c4:	eba4 040e 	sub.w	r4, r4, lr
  40e3c8:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40e3ca:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40e3ce:	f01e 0f02 	tst.w	lr, #2
  40e3d2:	d001      	beq.n	40e3d8 <line_mask_flat+0x138>
  40e3d4:	43e4      	mvns	r4, r4
  40e3d6:	b2e4      	uxtb	r4, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e3d8:	eb00 0c02 	add.w	ip, r0, r2
  40e3dc:	f810 e002 	ldrb.w	lr, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e3e0:	2cfc      	cmp	r4, #252	; 0xfc
  40e3e2:	d8dd      	bhi.n	40e3a0 <line_mask_flat+0x100>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e3e4:	2c02      	cmp	r4, #2
  40e3e6:	d9d9      	bls.n	40e39c <line_mask_flat+0xfc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e3e8:	fb04 f40e 	mul.w	r4, r4, lr
  40e3ec:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
  40e3f0:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
  40e3f4:	f3c4 5ec7 	ubfx	lr, r4, #23, #8
  40e3f8:	e7d2      	b.n	40e3a0 <line_mask_flat+0x100>
    int32_t k = xei - abs_x;
  40e3fa:	460a      	mov	r2, r1
  40e3fc:	e7d7      	b.n	40e3ae <line_mask_flat+0x10e>
    if(k < len && k >= 0) {
  40e3fe:	429a      	cmp	r2, r3
  40e400:	da27      	bge.n	40e452 <line_mask_flat+0x1b2>
  40e402:	2a00      	cmp	r2, #0
  40e404:	db25      	blt.n	40e452 <line_mask_flat+0x1b2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
  40e406:	69b4      	ldr	r4, [r6, #24]
  40e408:	fb04 f405 	mul.w	r4, r4, r5
  40e40c:	12a4      	asrs	r4, r4, #10
        m = (x_inters * px_h) >> 9;
  40e40e:	fb04 f505 	mul.w	r5, r4, r5
  40e412:	f3c5 2547 	ubfx	r5, r5, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
  40e416:	69f4      	ldr	r4, [r6, #28]
  40e418:	2c00      	cmp	r4, #0
  40e41a:	db15      	blt.n	40e448 <line_mask_flat+0x1a8>
        if(p->inv) m = 255 - m;
  40e41c:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40e420:	f014 0f02 	tst.w	r4, #2
  40e424:	d001      	beq.n	40e42a <line_mask_flat+0x18a>
  40e426:	43ed      	mvns	r5, r5
  40e428:	b2ed      	uxtb	r5, r5
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40e42a:	1887      	adds	r7, r0, r2
  40e42c:	5c84      	ldrb	r4, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e42e:	2dfc      	cmp	r5, #252	; 0xfc
  40e430:	d80e      	bhi.n	40e450 <line_mask_flat+0x1b0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e432:	2d02      	cmp	r5, #2
  40e434:	d90b      	bls.n	40e44e <line_mask_flat+0x1ae>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e436:	fb05 f504 	mul.w	r5, r5, r4
  40e43a:	eb05 2405 	add.w	r4, r5, r5, lsl #8
  40e43e:	eb05 15c4 	add.w	r5, r5, r4, lsl #7
  40e442:	f3c5 54c7 	ubfx	r4, r5, #23, #8
  40e446:	e003      	b.n	40e450 <line_mask_flat+0x1b0>
        if(p->yx_steep < 0) m = 255 - m;
  40e448:	43ed      	mvns	r5, r5
  40e44a:	b2ed      	uxtb	r5, r5
  40e44c:	e7e6      	b.n	40e41c <line_mask_flat+0x17c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e44e:	2400      	movs	r4, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40e450:	703c      	strb	r4, [r7, #0]
    if(p->inv) {
  40e452:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40e456:	f014 0f02 	tst.w	r4, #2
  40e45a:	d007      	beq.n	40e46c <line_mask_flat+0x1cc>
        if(k > len) {
  40e45c:	428b      	cmp	r3, r1
  40e45e:	db19      	blt.n	40e494 <line_mask_flat+0x1f4>
        if(k >= 0) {
  40e460:	2900      	cmp	r1, #0
  40e462:	db19      	blt.n	40e498 <line_mask_flat+0x1f8>
            _lv_memset_00(&mask_buf[0], k);
  40e464:	4b0e      	ldr	r3, [pc, #56]	; (40e4a0 <line_mask_flat+0x200>)
  40e466:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e468:	2002      	movs	r0, #2
  40e46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(k < 0) {
  40e46c:	3201      	adds	r2, #1
  40e46e:	d415      	bmi.n	40e49c <line_mask_flat+0x1fc>
        if(k <= len) {
  40e470:	4293      	cmp	r3, r2
  40e472:	da01      	bge.n	40e478 <line_mask_flat+0x1d8>
    return LV_DRAW_MASK_RES_CHANGED;
  40e474:	2002      	movs	r0, #2
}
  40e476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            _lv_memset_00(&mask_buf[k], len - k);
  40e478:	1a99      	subs	r1, r3, r2
  40e47a:	4410      	add	r0, r2
  40e47c:	4b08      	ldr	r3, [pc, #32]	; (40e4a0 <line_mask_flat+0x200>)
  40e47e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e480:	2002      	movs	r0, #2
  40e482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40e484:	2000      	movs	r0, #0
  40e486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40e488:	2000      	movs	r0, #0
  40e48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e48c:	2001      	movs	r0, #1
  40e48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e490:	2001      	movs	r0, #1
  40e492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40e494:	2000      	movs	r0, #0
  40e496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40e498:	2002      	movs	r0, #2
  40e49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40e49c:	2000      	movs	r0, #0
  40e49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e4a0:	00415ca1 	.word	0x00415ca1

0040e4a4 <line_mask_steep>:
{
  40e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e4a6:	9e06      	ldr	r6, [sp, #24]
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40e4a8:	69b5      	ldr	r5, [r6, #24]
  40e4aa:	fb02 f405 	mul.w	r4, r2, r5
  40e4ae:	12a4      	asrs	r4, r4, #10
    if(p->xy_steep > 0) x_at_y++;
  40e4b0:	2d00      	cmp	r5, #0
  40e4b2:	dd0a      	ble.n	40e4ca <line_mask_steep+0x26>
  40e4b4:	1c67      	adds	r7, r4, #1
    if(x_at_y < abs_x) {
  40e4b6:	428f      	cmp	r7, r1
  40e4b8:	da09      	bge.n	40e4ce <line_mask_steep+0x2a>
        if(p->inv) {
  40e4ba:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e4be:	f013 0f02 	tst.w	r3, #2
  40e4c2:	f000 8156 	beq.w	40e772 <line_mask_steep+0x2ce>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40e4c6:	2001      	movs	r0, #1
  40e4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40e4ca:	4627      	mov	r7, r4
  40e4cc:	e7f3      	b.n	40e4b6 <line_mask_steep+0x12>
    if(x_at_y > abs_x + len) {
  40e4ce:	18cf      	adds	r7, r1, r3
  40e4d0:	42bc      	cmp	r4, r7
  40e4d2:	dd07      	ble.n	40e4e4 <line_mask_steep+0x40>
        if(p->inv) {
  40e4d4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e4d8:	f013 0f02 	tst.w	r3, #2
  40e4dc:	f000 814b 	beq.w	40e776 <line_mask_steep+0x2d2>
            return LV_DRAW_MASK_RES_TRANSP;
  40e4e0:	2000      	movs	r0, #0
  40e4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
  40e4e4:	0217      	lsls	r7, r2, #8
  40e4e6:	fb07 f705 	mul.w	r7, r7, r5
    int32_t xsi = xs >> 8;
  40e4ea:	14bc      	asrs	r4, r7, #18
    int32_t xsf = xs & 0xFF;
  40e4ec:	f3c7 2e87 	ubfx	lr, r7, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40e4f0:	3201      	adds	r2, #1
  40e4f2:	0212      	lsls	r2, r2, #8
  40e4f4:	fb02 f205 	mul.w	r2, r2, r5
    int32_t xei = xe >> 8;
  40e4f8:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    int32_t xef = xe & 0xFF;
  40e4fc:	f3c2 2287 	ubfx	r2, r2, #10, #8
    k = xsi - abs_x;
  40e500:	1a67      	subs	r7, r4, r1
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40e502:	4564      	cmp	r4, ip
  40e504:	d001      	beq.n	40e50a <line_mask_steep+0x66>
  40e506:	2d00      	cmp	r5, #0
  40e508:	db68      	blt.n	40e5dc <line_mask_steep+0x138>
    if(xsi == xei) {
  40e50a:	4564      	cmp	r4, ip
  40e50c:	d06e      	beq.n	40e5ec <line_mask_steep+0x148>
        if(p->xy_steep < 0) {
  40e50e:	2d00      	cmp	r5, #0
  40e510:	f2c0 80ad 	blt.w	40e66e <line_mask_steep+0x1ca>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
  40e514:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
  40e518:	69f5      	ldr	r5, [r6, #28]
  40e51a:	fb05 f502 	mul.w	r5, r5, r2
  40e51e:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
  40e520:	2f00      	cmp	r7, #0
  40e522:	db22      	blt.n	40e56a <line_mask_steep+0xc6>
  40e524:	429f      	cmp	r7, r3
  40e526:	da20      	bge.n	40e56a <line_mask_steep+0xc6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40e528:	fb05 f202 	mul.w	r2, r5, r2
  40e52c:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40e530:	ea6f 0e02 	mvn.w	lr, r2
  40e534:	fa5f fe8e 	uxtb.w	lr, lr
                if(p->inv) m = 255 - m;
  40e538:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40e53c:	f01c 0f02 	tst.w	ip, #2
  40e540:	d100      	bne.n	40e544 <line_mask_steep+0xa0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40e542:	4672      	mov	r2, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e544:	eb00 0c07 	add.w	ip, r0, r7
  40e548:	f810 e007 	ldrb.w	lr, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e54c:	2afc      	cmp	r2, #252	; 0xfc
  40e54e:	d80a      	bhi.n	40e566 <line_mask_steep+0xc2>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e550:	2a02      	cmp	r2, #2
  40e552:	f240 80fd 	bls.w	40e750 <line_mask_steep+0x2ac>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e556:	fb02 f20e 	mul.w	r2, r2, lr
  40e55a:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  40e55e:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  40e562:	f3c2 5ec7 	ubfx	lr, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e566:	f88c e000 	strb.w	lr, [ip]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
  40e56a:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
  40e56e:	69b2      	ldr	r2, [r6, #24]
  40e570:	fb02 f205 	mul.w	r2, r2, r5
  40e574:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40e576:	f117 0e01 	adds.w	lr, r7, #1
  40e57a:	d41d      	bmi.n	40e5b8 <line_mask_steep+0x114>
  40e57c:	4573      	cmp	r3, lr
  40e57e:	dd1b      	ble.n	40e5b8 <line_mask_steep+0x114>
                m = ((255 - y_inters) * x_inters) >> 9;
  40e580:	fb02 f205 	mul.w	r2, r2, r5
  40e584:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  40e588:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40e58c:	f015 0f02 	tst.w	r5, #2
  40e590:	d001      	beq.n	40e596 <line_mask_steep+0xf2>
  40e592:	43d2      	mvns	r2, r2
  40e594:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e596:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e59a:	2afc      	cmp	r2, #252	; 0xfc
  40e59c:	d80a      	bhi.n	40e5b4 <line_mask_steep+0x110>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e59e:	2a02      	cmp	r2, #2
  40e5a0:	f240 80d9 	bls.w	40e756 <line_mask_steep+0x2b2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e5a4:	fb02 f205 	mul.w	r2, r2, r5
  40e5a8:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40e5ac:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40e5b0:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e5b4:	f800 500e 	strb.w	r5, [r0, lr]
            k++;
  40e5b8:	3702      	adds	r7, #2
            if(p->inv) {
  40e5ba:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40e5be:	f012 0f02 	tst.w	r2, #2
  40e5c2:	f000 80ca 	beq.w	40e75a <line_mask_steep+0x2b6>
                k = xsi - abs_x;
  40e5c6:	1a61      	subs	r1, r4, r1
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40e5c8:	428b      	cmp	r3, r1
  40e5ca:	f2c0 80e4 	blt.w	40e796 <line_mask_steep+0x2f2>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
  40e5ce:	2900      	cmp	r1, #0
  40e5d0:	f2c0 80e3 	blt.w	40e79a <line_mask_steep+0x2f6>
  40e5d4:	4b74      	ldr	r3, [pc, #464]	; (40e7a8 <line_mask_steep+0x304>)
  40e5d6:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e5d8:	2002      	movs	r0, #2
  40e5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40e5dc:	f1be 0f00 	cmp.w	lr, #0
  40e5e0:	d193      	bne.n	40e50a <line_mask_steep+0x66>
        k--;
  40e5e2:	3f01      	subs	r7, #1
        xsi = xei;
  40e5e4:	4664      	mov	r4, ip
        xsf = 0xFF;
  40e5e6:	f04f 0eff 	mov.w	lr, #255	; 0xff
  40e5ea:	e78e      	b.n	40e50a <line_mask_steep+0x66>
        if(k >= 0 && k < len) {
  40e5ec:	2f00      	cmp	r7, #0
  40e5ee:	db1c      	blt.n	40e62a <line_mask_steep+0x186>
  40e5f0:	429f      	cmp	r7, r3
  40e5f2:	da1a      	bge.n	40e62a <line_mask_steep+0x186>
            m = (xsf + xef) >> 1;
  40e5f4:	4472      	add	r2, lr
  40e5f6:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
  40e5fa:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40e5fe:	f015 0f02 	tst.w	r5, #2
  40e602:	d001      	beq.n	40e608 <line_mask_steep+0x164>
  40e604:	43d2      	mvns	r2, r2
  40e606:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e608:	eb00 0e07 	add.w	lr, r0, r7
  40e60c:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e60e:	2afc      	cmp	r2, #252	; 0xfc
  40e610:	d809      	bhi.n	40e626 <line_mask_steep+0x182>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e612:	2a02      	cmp	r2, #2
  40e614:	d91a      	bls.n	40e64c <line_mask_steep+0x1a8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e616:	fb05 f202 	mul.w	r2, r5, r2
  40e61a:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40e61e:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40e622:	f3c2 55c7 	ubfx	r5, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e626:	f88e 5000 	strb.w	r5, [lr]
        k++;
  40e62a:	3701      	adds	r7, #1
        if(p->inv) {
  40e62c:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40e630:	f012 0f02 	tst.w	r2, #2
  40e634:	d00c      	beq.n	40e650 <line_mask_steep+0x1ac>
            k = xsi - abs_x;
  40e636:	1a61      	subs	r1, r4, r1
            if(k >= len) {
  40e638:	428b      	cmp	r3, r1
  40e63a:	f340 809e 	ble.w	40e77a <line_mask_steep+0x2d6>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
  40e63e:	2900      	cmp	r1, #0
  40e640:	f2c0 809d 	blt.w	40e77e <line_mask_steep+0x2da>
  40e644:	4b58      	ldr	r3, [pc, #352]	; (40e7a8 <line_mask_steep+0x304>)
  40e646:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e648:	2002      	movs	r0, #2
  40e64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40e64c:	2500      	movs	r5, #0
  40e64e:	e7ea      	b.n	40e626 <line_mask_steep+0x182>
            if(k > len) k = len;
  40e650:	42bb      	cmp	r3, r7
  40e652:	da00      	bge.n	40e656 <line_mask_steep+0x1b2>
  40e654:	461f      	mov	r7, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40e656:	2f00      	cmp	r7, #0
  40e658:	f000 8093 	beq.w	40e782 <line_mask_steep+0x2de>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40e65c:	2f00      	cmp	r7, #0
  40e65e:	f340 8092 	ble.w	40e786 <line_mask_steep+0x2e2>
  40e662:	1bd9      	subs	r1, r3, r7
  40e664:	4438      	add	r0, r7
  40e666:	4b50      	ldr	r3, [pc, #320]	; (40e7a8 <line_mask_steep+0x304>)
  40e668:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e66a:	2002      	movs	r0, #2
  40e66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            y_inters = (xsf * (-p->yx_steep)) >> 10;
  40e66e:	69f2      	ldr	r2, [r6, #28]
  40e670:	4252      	negs	r2, r2
  40e672:	fb02 f20e 	mul.w	r2, r2, lr
  40e676:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40e678:	2f00      	cmp	r7, #0
  40e67a:	db23      	blt.n	40e6c4 <line_mask_steep+0x220>
  40e67c:	429f      	cmp	r7, r3
  40e67e:	da21      	bge.n	40e6c4 <line_mask_steep+0x220>
                m = (y_inters * xsf) >> 9;
  40e680:	fb02 fe0e 	mul.w	lr, r2, lr
  40e684:	f3ce 2e47 	ubfx	lr, lr, #9, #8
                if(p->inv) m = 255 - m;
  40e688:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40e68c:	f015 0f02 	tst.w	r5, #2
  40e690:	d003      	beq.n	40e69a <line_mask_steep+0x1f6>
  40e692:	ea6f 0e0e 	mvn.w	lr, lr
  40e696:	fa5f fe8e 	uxtb.w	lr, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e69a:	eb00 0c07 	add.w	ip, r0, r7
  40e69e:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e6a0:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
  40e6a4:	d80c      	bhi.n	40e6c0 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e6a6:	f1be 0f02 	cmp.w	lr, #2
  40e6aa:	d908      	bls.n	40e6be <line_mask_steep+0x21a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e6ac:	fb0e fe05 	mul.w	lr, lr, r5
  40e6b0:	eb0e 250e 	add.w	r5, lr, lr, lsl #8
  40e6b4:	eb0e 1ec5 	add.w	lr, lr, r5, lsl #7
  40e6b8:	f3ce 55c7 	ubfx	r5, lr, #23, #8
  40e6bc:	e000      	b.n	40e6c0 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e6be:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e6c0:	f88c 5000 	strb.w	r5, [ip]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
  40e6c4:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40e6c8:	69b2      	ldr	r2, [r6, #24]
  40e6ca:	4252      	negs	r2, r2
  40e6cc:	fb02 f205 	mul.w	r2, r2, r5
  40e6d0:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40e6d2:	f1b7 0e01 	subs.w	lr, r7, #1
  40e6d6:	d41f      	bmi.n	40e718 <line_mask_steep+0x274>
  40e6d8:	4573      	cmp	r3, lr
  40e6da:	dd1d      	ble.n	40e718 <line_mask_steep+0x274>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40e6dc:	fb02 f205 	mul.w	r2, r2, r5
  40e6e0:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40e6e4:	43d5      	mvns	r5, r2
  40e6e6:	b2ed      	uxtb	r5, r5
                if(p->inv) m = 255 - m;
  40e6e8:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40e6ec:	f01c 0f02 	tst.w	ip, #2
  40e6f0:	d100      	bne.n	40e6f4 <line_mask_steep+0x250>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40e6f2:	462a      	mov	r2, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e6f4:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e6f8:	2afc      	cmp	r2, #252	; 0xfc
  40e6fa:	d80b      	bhi.n	40e714 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e6fc:	2a02      	cmp	r2, #2
  40e6fe:	d908      	bls.n	40e712 <line_mask_steep+0x26e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e700:	fb02 f205 	mul.w	r2, r2, r5
  40e704:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40e708:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40e70c:	f3c2 55c7 	ubfx	r5, r2, #23, #8
  40e710:	e000      	b.n	40e714 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e712:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e714:	f800 500e 	strb.w	r5, [r0, lr]
            k += 2;
  40e718:	3701      	adds	r7, #1
            if(p->inv) {
  40e71a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40e71e:	f012 0f02 	tst.w	r2, #2
  40e722:	d00b      	beq.n	40e73c <line_mask_steep+0x298>
                k = xsi - abs_x - 1;
  40e724:	1a61      	subs	r1, r4, r1
  40e726:	3901      	subs	r1, #1
                if(k > len) k = len;
  40e728:	428b      	cmp	r3, r1
  40e72a:	da01      	bge.n	40e730 <line_mask_steep+0x28c>
    return LV_DRAW_MASK_RES_CHANGED;
  40e72c:	2002      	movs	r0, #2
  40e72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
  40e730:	2900      	cmp	r1, #0
  40e732:	dd2a      	ble.n	40e78a <line_mask_steep+0x2e6>
  40e734:	4b1c      	ldr	r3, [pc, #112]	; (40e7a8 <line_mask_steep+0x304>)
  40e736:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e738:	2002      	movs	r0, #2
  40e73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40e73c:	42bb      	cmp	r3, r7
  40e73e:	db26      	blt.n	40e78e <line_mask_steep+0x2ea>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
  40e740:	2f00      	cmp	r7, #0
  40e742:	db26      	blt.n	40e792 <line_mask_steep+0x2ee>
  40e744:	1bd9      	subs	r1, r3, r7
  40e746:	4438      	add	r0, r7
  40e748:	4b17      	ldr	r3, [pc, #92]	; (40e7a8 <line_mask_steep+0x304>)
  40e74a:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e74c:	2002      	movs	r0, #2
  40e74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40e750:	f04f 0e00 	mov.w	lr, #0
  40e754:	e707      	b.n	40e566 <line_mask_steep+0xc2>
  40e756:	2500      	movs	r5, #0
  40e758:	e72c      	b.n	40e5b4 <line_mask_steep+0x110>
                if(k > len) k = len;
  40e75a:	42bb      	cmp	r3, r7
  40e75c:	da00      	bge.n	40e760 <line_mask_steep+0x2bc>
  40e75e:	461f      	mov	r7, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40e760:	b1ef      	cbz	r7, 40e79e <line_mask_steep+0x2fa>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40e762:	2f00      	cmp	r7, #0
  40e764:	dd1d      	ble.n	40e7a2 <line_mask_steep+0x2fe>
  40e766:	1bd9      	subs	r1, r3, r7
  40e768:	4438      	add	r0, r7
  40e76a:	4b0f      	ldr	r3, [pc, #60]	; (40e7a8 <line_mask_steep+0x304>)
  40e76c:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e76e:	2002      	movs	r0, #2
  40e770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40e772:	2000      	movs	r0, #0
  40e774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_FULL_COVER;
  40e776:	2001      	movs	r0, #1
  40e778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40e77a:	2000      	movs	r0, #0
  40e77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40e77e:	2002      	movs	r0, #2
  40e780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40e782:	2000      	movs	r0, #0
  40e784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40e786:	2002      	movs	r0, #2
  40e788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e78a:	2002      	movs	r0, #2
  40e78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40e78e:	2001      	movs	r0, #1
  40e790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40e792:	2002      	movs	r0, #2
  40e794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40e796:	2000      	movs	r0, #0
  40e798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40e79a:	2002      	movs	r0, #2
  40e79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40e79e:	2000      	movs	r0, #0
  40e7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40e7a2:	2002      	movs	r0, #2
}
  40e7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e7a6:	bf00      	nop
  40e7a8:	00415ca1 	.word	0x00415ca1

0040e7ac <lv_draw_mask_line>:
{
  40e7ac:	b570      	push	{r4, r5, r6, lr}
  40e7ae:	b082      	sub	sp, #8
  40e7b0:	9c06      	ldr	r4, [sp, #24]
    abs_y -= p->origo.y;
  40e7b2:	8aa5      	ldrh	r5, [r4, #20]
  40e7b4:	1b52      	subs	r2, r2, r5
  40e7b6:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
  40e7b8:	8a65      	ldrh	r5, [r4, #18]
  40e7ba:	1b49      	subs	r1, r1, r5
  40e7bc:	b209      	sxth	r1, r1
    if(p->steep == 0) {
  40e7be:	6a26      	ldr	r6, [r4, #32]
  40e7c0:	2e00      	cmp	r6, #0
  40e7c2:	d146      	bne.n	40e852 <lv_draw_mask_line+0xa6>
        if(p->flat) {
  40e7c4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40e7c8:	f015 0f01 	tst.w	r5, #1
  40e7cc:	d015      	beq.n	40e7fa <lv_draw_mask_line+0x4e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
  40e7ce:	7c23      	ldrb	r3, [r4, #16]
  40e7d0:	f003 0303 	and.w	r3, r3, #3
  40e7d4:	2b01      	cmp	r3, #1
  40e7d6:	d94a      	bls.n	40e86e <lv_draw_mask_line+0xc2>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e7d8:	2b02      	cmp	r3, #2
  40e7da:	d003      	beq.n	40e7e4 <lv_draw_mask_line+0x38>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e7dc:	2b03      	cmp	r3, #3
  40e7de:	d006      	beq.n	40e7ee <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
  40e7e0:	2000      	movs	r0, #0
  40e7e2:	e03e      	b.n	40e862 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e7e4:	f112 0f01 	cmn.w	r2, #1
  40e7e8:	d5f8      	bpl.n	40e7dc <lv_draw_mask_line+0x30>
  40e7ea:	2001      	movs	r0, #1
  40e7ec:	e039      	b.n	40e862 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e7ee:	2a00      	cmp	r2, #0
  40e7f0:	dd01      	ble.n	40e7f6 <lv_draw_mask_line+0x4a>
  40e7f2:	2001      	movs	r0, #1
  40e7f4:	e035      	b.n	40e862 <lv_draw_mask_line+0xb6>
                return LV_DRAW_MASK_RES_TRANSP;
  40e7f6:	2000      	movs	r0, #0
  40e7f8:	e033      	b.n	40e862 <lv_draw_mask_line+0xb6>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
  40e7fa:	7c22      	ldrb	r2, [r4, #16]
  40e7fc:	f002 0203 	and.w	r2, r2, #3
  40e800:	1e94      	subs	r4, r2, #2
  40e802:	b2e4      	uxtb	r4, r4
  40e804:	2c01      	cmp	r4, #1
  40e806:	d934      	bls.n	40e872 <lv_draw_mask_line+0xc6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e808:	2a01      	cmp	r2, #1
  40e80a:	d009      	beq.n	40e820 <lv_draw_mask_line+0x74>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
  40e80c:	b992      	cbnz	r2, 40e834 <lv_draw_mask_line+0x88>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e80e:	18ca      	adds	r2, r1, r3
  40e810:	d431      	bmi.n	40e876 <lv_draw_mask_line+0xca>
                    int32_t k = - abs_x;
  40e812:	424d      	negs	r5, r1
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40e814:	2d00      	cmp	r5, #0
  40e816:	db30      	blt.n	40e87a <lv_draw_mask_line+0xce>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40e818:	42ab      	cmp	r3, r5
  40e81a:	dc05      	bgt.n	40e828 <lv_draw_mask_line+0x7c>
                    return LV_DRAW_MASK_RES_CHANGED;
  40e81c:	2002      	movs	r0, #2
  40e81e:	e020      	b.n	40e862 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e820:	2900      	cmp	r1, #0
  40e822:	ddf3      	ble.n	40e80c <lv_draw_mask_line+0x60>
  40e824:	2001      	movs	r0, #1
  40e826:	e01c      	b.n	40e862 <lv_draw_mask_line+0xb6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40e828:	4611      	mov	r1, r2
  40e82a:	4428      	add	r0, r5
  40e82c:	4b17      	ldr	r3, [pc, #92]	; (40e88c <lv_draw_mask_line+0xe0>)
  40e82e:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40e830:	2002      	movs	r0, #2
  40e832:	e016      	b.n	40e862 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40e834:	42d9      	cmn	r1, r3
  40e836:	d422      	bmi.n	40e87e <lv_draw_mask_line+0xd2>
                    int32_t k = - abs_x;
  40e838:	4249      	negs	r1, r1
                    if(k < 0) k = 0;
  40e83a:	2900      	cmp	r1, #0
  40e83c:	db07      	blt.n	40e84e <lv_draw_mask_line+0xa2>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40e83e:	4299      	cmp	r1, r3
  40e840:	da1f      	bge.n	40e882 <lv_draw_mask_line+0xd6>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
  40e842:	2900      	cmp	r1, #0
  40e844:	db1f      	blt.n	40e886 <lv_draw_mask_line+0xda>
  40e846:	4b11      	ldr	r3, [pc, #68]	; (40e88c <lv_draw_mask_line+0xe0>)
  40e848:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40e84a:	2002      	movs	r0, #2
  40e84c:	e009      	b.n	40e862 <lv_draw_mask_line+0xb6>
                    if(k < 0) k = 0;
  40e84e:	4631      	mov	r1, r6
  40e850:	e7f5      	b.n	40e83e <lv_draw_mask_line+0x92>
    if(p->flat) {
  40e852:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40e856:	f015 0f01 	tst.w	r5, #1
  40e85a:	d104      	bne.n	40e866 <lv_draw_mask_line+0xba>
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
  40e85c:	9400      	str	r4, [sp, #0]
  40e85e:	4c0c      	ldr	r4, [pc, #48]	; (40e890 <lv_draw_mask_line+0xe4>)
  40e860:	47a0      	blx	r4
}
  40e862:	b002      	add	sp, #8
  40e864:	bd70      	pop	{r4, r5, r6, pc}
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
  40e866:	9400      	str	r4, [sp, #0]
  40e868:	4c0a      	ldr	r4, [pc, #40]	; (40e894 <lv_draw_mask_line+0xe8>)
  40e86a:	47a0      	blx	r4
  40e86c:	e7f9      	b.n	40e862 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40e86e:	2001      	movs	r0, #1
  40e870:	e7f7      	b.n	40e862 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
  40e872:	2001      	movs	r0, #1
  40e874:	e7f5      	b.n	40e862 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e876:	2001      	movs	r0, #1
  40e878:	e7f3      	b.n	40e862 <lv_draw_mask_line+0xb6>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40e87a:	2000      	movs	r0, #0
  40e87c:	e7f1      	b.n	40e862 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40e87e:	2000      	movs	r0, #0
  40e880:	e7ef      	b.n	40e862 <lv_draw_mask_line+0xb6>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40e882:	2000      	movs	r0, #0
  40e884:	e7ed      	b.n	40e862 <lv_draw_mask_line+0xb6>
                    return LV_DRAW_MASK_RES_CHANGED;
  40e886:	2002      	movs	r0, #2
  40e888:	e7eb      	b.n	40e862 <lv_draw_mask_line+0xb6>
  40e88a:	bf00      	nop
  40e88c:	00415ca1 	.word	0x00415ca1
  40e890:	0040e4a5 	.word	0x0040e4a5
  40e894:	0040e2a1 	.word	0x0040e2a1

0040e898 <lv_draw_mask_radius>:
{
  40e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e89c:	b08b      	sub	sp, #44	; 0x2c
  40e89e:	9e14      	ldr	r6, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
  40e8a0:	7cb5      	ldrb	r5, [r6, #18]
  40e8a2:	f005 0501 	and.w	r5, r5, #1
    int32_t radius = p->cfg.radius;
  40e8a6:	f9b6 9010 	ldrsh.w	r9, [r6, #16]
    lv_area_copy(&rect, &p->cfg.rect);
  40e8aa:	f106 0c08 	add.w	ip, r6, #8
    uint8_t * d8 = (uint8_t *)dst;
  40e8ae:	f10d 0e20 	add.w	lr, sp, #32
  40e8b2:	2408      	movs	r4, #8
  40e8b4:	e004      	b.n	40e8c0 <lv_draw_mask_radius+0x28>
        *d8 = *s8;
  40e8b6:	f81c 7b01 	ldrb.w	r7, [ip], #1
  40e8ba:	f80e 7b01 	strb.w	r7, [lr], #1
        len--;
  40e8be:	3c01      	subs	r4, #1
    while(len) {
  40e8c0:	2c00      	cmp	r4, #0
  40e8c2:	d1f8      	bne.n	40e8b6 <lv_draw_mask_radius+0x1e>
    if(outer == false) {
  40e8c4:	2d00      	cmp	r5, #0
  40e8c6:	d13f      	bne.n	40e948 <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40e8c8:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40e8cc:	4294      	cmp	r4, r2
  40e8ce:	f300 829d 	bgt.w	40ee0c <lv_draw_mask_radius+0x574>
  40e8d2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40e8d6:	42a2      	cmp	r2, r4
  40e8d8:	f300 829c 	bgt.w	40ee14 <lv_draw_mask_radius+0x57c>
  40e8dc:	461f      	mov	r7, r3
  40e8de:	468b      	mov	fp, r1
  40e8e0:	4680      	mov	r8, r0
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40e8e2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40e8e6:	eb09 0103 	add.w	r1, r9, r3
  40e8ea:	458b      	cmp	fp, r1
  40e8ec:	db07      	blt.n	40e8fe <lv_draw_mask_radius+0x66>
  40e8ee:	eb07 000b 	add.w	r0, r7, fp
  40e8f2:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40e8f6:	eba1 0109 	sub.w	r1, r1, r9
  40e8fa:	4288      	cmp	r0, r1
  40e8fc:	dd0b      	ble.n	40e916 <lv_draw_mask_radius+0x7e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40e8fe:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
  40e902:	eb09 0001 	add.w	r0, r9, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40e906:	4282      	cmp	r2, r0
  40e908:	db50      	blt.n	40e9ac <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40e90a:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
  40e90e:	eba0 0009 	sub.w	r0, r0, r9
  40e912:	4282      	cmp	r2, r0
  40e914:	dc4a      	bgt.n	40e9ac <lv_draw_mask_radius+0x114>
        if(outer == false) {
  40e916:	bb6d      	cbnz	r5, 40e974 <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
  40e918:	eba3 050b 	sub.w	r5, r3, fp
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40e91c:	42bd      	cmp	r5, r7
  40e91e:	f300 827d 	bgt.w	40ee1c <lv_draw_mask_radius+0x584>
            if(last >= 0) {
  40e922:	2d00      	cmp	r5, #0
  40e924:	db03      	blt.n	40e92e <lv_draw_mask_radius+0x96>
                _lv_memset_00(&mask_buf[0], last);
  40e926:	4629      	mov	r1, r5
  40e928:	4640      	mov	r0, r8
  40e92a:	4ba7      	ldr	r3, [pc, #668]	; (40ebc8 <lv_draw_mask_radius+0x330>)
  40e92c:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
  40e92e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  40e932:	eba3 040b 	sub.w	r4, r3, fp
  40e936:	3401      	adds	r4, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40e938:	2c00      	cmp	r4, #0
  40e93a:	f340 8271 	ble.w	40ee20 <lv_draw_mask_radius+0x588>
            else if(first < len) {
  40e93e:	42a7      	cmp	r7, r4
  40e940:	dc0d      	bgt.n	40e95e <lv_draw_mask_radius+0xc6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40e942:	b195      	cbz	r5, 40e96a <lv_draw_mask_radius+0xd2>
            else return LV_DRAW_MASK_RES_CHANGED;
  40e944:	2002      	movs	r0, #2
  40e946:	e262      	b.n	40ee0e <lv_draw_mask_radius+0x576>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40e948:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40e94c:	42a2      	cmp	r2, r4
  40e94e:	f2c0 8263 	blt.w	40ee18 <lv_draw_mask_radius+0x580>
  40e952:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40e956:	42a2      	cmp	r2, r4
  40e958:	ddc0      	ble.n	40e8dc <lv_draw_mask_radius+0x44>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40e95a:	2001      	movs	r0, #1
  40e95c:	e257      	b.n	40ee0e <lv_draw_mask_radius+0x576>
                _lv_memset_00(&mask_buf[first], len - first);
  40e95e:	1b39      	subs	r1, r7, r4
  40e960:	eb08 0004 	add.w	r0, r8, r4
  40e964:	4b98      	ldr	r3, [pc, #608]	; (40ebc8 <lv_draw_mask_radius+0x330>)
  40e966:	4798      	blx	r3
  40e968:	e7eb      	b.n	40e942 <lv_draw_mask_radius+0xaa>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40e96a:	42a7      	cmp	r7, r4
  40e96c:	f000 825a 	beq.w	40ee24 <lv_draw_mask_radius+0x58c>
            else return LV_DRAW_MASK_RES_CHANGED;
  40e970:	2002      	movs	r0, #2
  40e972:	e24c      	b.n	40ee0e <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40e974:	ebb3 030b 	subs.w	r3, r3, fp
  40e978:	d403      	bmi.n	40e982 <lv_draw_mask_radius+0xea>
            if(first <= len) {
  40e97a:	42bb      	cmp	r3, r7
  40e97c:	dd03      	ble.n	40e986 <lv_draw_mask_radius+0xee>
        return LV_DRAW_MASK_RES_CHANGED;
  40e97e:	2002      	movs	r0, #2
  40e980:	e245      	b.n	40ee0e <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40e982:	2300      	movs	r3, #0
  40e984:	e7f9      	b.n	40e97a <lv_draw_mask_radius+0xe2>
                int32_t last =  rect.x2 - abs_x - first + 1;
  40e986:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40e98a:	eba1 010b 	sub.w	r1, r1, fp
  40e98e:	1ac9      	subs	r1, r1, r3
  40e990:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
  40e992:	185a      	adds	r2, r3, r1
  40e994:	4297      	cmp	r7, r2
  40e996:	da00      	bge.n	40e99a <lv_draw_mask_radius+0x102>
  40e998:	1af9      	subs	r1, r7, r3
                if(last >= 0) {
  40e99a:	2900      	cmp	r1, #0
  40e99c:	f2c0 8244 	blt.w	40ee28 <lv_draw_mask_radius+0x590>
                    _lv_memset_00(&mask_buf[first], last);
  40e9a0:	eb08 0003 	add.w	r0, r8, r3
  40e9a4:	4b88      	ldr	r3, [pc, #544]	; (40ebc8 <lv_draw_mask_radius+0x330>)
  40e9a6:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
  40e9a8:	2002      	movs	r0, #2
  40e9aa:	e230      	b.n	40ee0e <lv_draw_mask_radius+0x576>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
  40e9ac:	eba3 0b0b 	sub.w	fp, r3, fp
  40e9b0:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
  40e9b4:	b29b      	uxth	r3, r3
  40e9b6:	1ac3      	subs	r3, r0, r3
  40e9b8:	b29b      	uxth	r3, r3
  40e9ba:	3301      	adds	r3, #1
  40e9bc:	b21b      	sxth	r3, r3
  40e9be:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40e9c0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  40e9c4:	b28c      	uxth	r4, r1
  40e9c6:	1b1b      	subs	r3, r3, r4
  40e9c8:	b29b      	uxth	r3, r3
  40e9ca:	3301      	adds	r3, #1
  40e9cc:	b21b      	sxth	r3, r3
    abs_y -= rect.y1;
  40e9ce:	1b14      	subs	r4, r2, r4
  40e9d0:	b224      	sxth	r4, r4
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
  40e9d2:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
  40e9d6:	fb0a fa0a 	mul.w	sl, sl, sl
    if(abs_y < radius || abs_y > h - radius - 1) {
  40e9da:	45a1      	cmp	r9, r4
  40e9dc:	dc06      	bgt.n	40e9ec <lv_draw_mask_radius+0x154>
  40e9de:	eba3 0209 	sub.w	r2, r3, r9
  40e9e2:	3a01      	subs	r2, #1
  40e9e4:	4294      	cmp	r4, r2
  40e9e6:	dc01      	bgt.n	40e9ec <lv_draw_mask_radius+0x154>
    return LV_DRAW_MASK_RES_CHANGED;
  40e9e8:	2002      	movs	r0, #2
  40e9ea:	e210      	b.n	40ee0e <lv_draw_mask_radius+0x576>
        if(radius <= 256) sqrt_mask = 0x800;
  40e9ec:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  40e9f0:	f300 80b1 	bgt.w	40eb56 <lv_draw_mask_radius+0x2be>
  40e9f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40e9f8:	9201      	str	r2, [sp, #4]
        if(abs_y < radius) {
  40e9fa:	45a1      	cmp	r9, r4
  40e9fc:	f340 80b6 	ble.w	40eb6c <lv_draw_mask_radius+0x2d4>
            y = radius - abs_y;
  40ea00:	eba9 0404 	sub.w	r4, r9, r4
            if(y == p->y_prev) {
  40ea04:	6973      	ldr	r3, [r6, #20]
  40ea06:	429c      	cmp	r4, r3
  40ea08:	f000 80a9 	beq.w	40eb5e <lv_draw_mask_radius+0x2c6>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40ea0c:	9a01      	ldr	r2, [sp, #4]
  40ea0e:	a904      	add	r1, sp, #16
  40ea10:	fb04 a014 	mls	r0, r4, r4, sl
  40ea14:	4b6d      	ldr	r3, [pc, #436]	; (40ebcc <lv_draw_mask_radius+0x334>)
  40ea16:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40ea18:	1e63      	subs	r3, r4, #1
  40ea1a:	9a01      	ldr	r2, [sp, #4]
  40ea1c:	a905      	add	r1, sp, #20
  40ea1e:	9303      	str	r3, [sp, #12]
  40ea20:	fb03 a013 	mls	r0, r3, r3, sl
  40ea24:	4b69      	ldr	r3, [pc, #420]	; (40ebcc <lv_draw_mask_radius+0x334>)
  40ea26:	4798      	blx	r3
            p->y_prev = y - 1;
  40ea28:	9b03      	ldr	r3, [sp, #12]
  40ea2a:	6173      	str	r3, [r6, #20]
            p->y_prev_x.f = x1.f;
  40ea2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40ea30:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x1.i;
  40ea32:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40ea36:	8333      	strh	r3, [r6, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40ea38:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40ea3c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40ea40:	1e51      	subs	r1, r2, #1
  40ea42:	428b      	cmp	r3, r1
  40ea44:	f000 80b4 	beq.w	40ebb0 <lv_draw_mask_radius+0x318>
        if(x0.i == x1.i) {
  40ea48:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40ea4c:	4293      	cmp	r3, r2
  40ea4e:	f000 80bf 	beq.w	40ebd0 <lv_draw_mask_radius+0x338>
            int32_t ofs = radius - (x0.i + 1);
  40ea52:	3301      	adds	r3, #1
  40ea54:	eba9 0903 	sub.w	r9, r9, r3
            int32_t kl = k + ofs;
  40ea58:	eb0b 0609 	add.w	r6, fp, r9
            int32_t kr = k + (w - ofs - 1);
  40ea5c:	9b02      	ldr	r3, [sp, #8]
  40ea5e:	eba3 0909 	sub.w	r9, r3, r9
  40ea62:	f109 39ff 	add.w	r9, r9, #4294967295
  40ea66:	44d9      	add	r9, fp
            if(outer) {
  40ea68:	b175      	cbz	r5, 40ea88 <lv_draw_mask_radius+0x1f0>
                if(first < 0) first = 0;
  40ea6a:	1c70      	adds	r0, r6, #1
  40ea6c:	f100 8116 	bmi.w	40ec9c <lv_draw_mask_radius+0x404>
                int32_t len_tmp = kr - first;
  40ea70:	eba9 0100 	sub.w	r1, r9, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40ea74:	45b9      	cmp	r9, r7
  40ea76:	dd00      	ble.n	40ea7a <lv_draw_mask_radius+0x1e2>
  40ea78:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40ea7a:	42b8      	cmp	r0, r7
  40ea7c:	da04      	bge.n	40ea88 <lv_draw_mask_radius+0x1f0>
  40ea7e:	2900      	cmp	r1, #0
  40ea80:	db02      	blt.n	40ea88 <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40ea82:	4440      	add	r0, r8
  40ea84:	4b50      	ldr	r3, [pc, #320]	; (40ebc8 <lv_draw_mask_radius+0x330>)
  40ea86:	4798      	blx	r3
            uint32_t i = x0.i + 1;
  40ea88:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  40ea8c:	f100 0b01 	add.w	fp, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
  40ea90:	9a01      	ldr	r2, [sp, #4]
  40ea92:	a906      	add	r1, sp, #24
  40ea94:	fb00 a010 	mls	r0, r0, r0, sl
  40ea98:	4b4c      	ldr	r3, [pc, #304]	; (40ebcc <lv_draw_mask_radius+0x334>)
  40ea9a:	4798      	blx	r3
            if(y_prev.f == 0) {
  40ea9c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40eaa0:	b93b      	cbnz	r3, 40eab2 <lv_draw_mask_radius+0x21a>
                y_prev.i--;
  40eaa2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40eaa6:	3b01      	subs	r3, #1
  40eaa8:	f8ad 3018 	strh.w	r3, [sp, #24]
                y_prev.f = 0xFF;
  40eaac:	23ff      	movs	r3, #255	; 0xff
  40eaae:	f8ad 301a 	strh.w	r3, [sp, #26]
            if(y_prev.i >= y) {
  40eab2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40eab6:	429c      	cmp	r4, r3
  40eab8:	f300 8103 	bgt.w	40ecc2 <lv_draw_mask_radius+0x42a>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
  40eabc:	9a01      	ldr	r2, [sp, #4]
  40eabe:	a907      	add	r1, sp, #28
  40eac0:	fb0b a01b 	mls	r0, fp, fp, sl
  40eac4:	4b41      	ldr	r3, [pc, #260]	; (40ebcc <lv_draw_mask_radius+0x334>)
  40eac6:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40eac8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40eacc:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
  40ead0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40ead4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  40ead8:	fb03 f302 	mul.w	r3, r3, r2
  40eadc:	f3c3 2347 	ubfx	r3, r3, #9, #8
  40eae0:	43da      	mvns	r2, r3
  40eae2:	b2d2      	uxtb	r2, r2
                if(outer) m = 255 - m;
  40eae4:	b905      	cbnz	r5, 40eae8 <lv_draw_mask_radius+0x250>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40eae6:	4613      	mov	r3, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40eae8:	2e00      	cmp	r6, #0
  40eaea:	db13      	blt.n	40eb14 <lv_draw_mask_radius+0x27c>
  40eaec:	42be      	cmp	r6, r7
  40eaee:	da11      	bge.n	40eb14 <lv_draw_mask_radius+0x27c>
  40eaf0:	eb08 0106 	add.w	r1, r8, r6
  40eaf4:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40eaf8:	2bfc      	cmp	r3, #252	; 0xfc
  40eafa:	d80a      	bhi.n	40eb12 <lv_draw_mask_radius+0x27a>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eafc:	2b02      	cmp	r3, #2
  40eafe:	f240 80cf 	bls.w	40eca0 <lv_draw_mask_radius+0x408>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eb02:	fb03 f202 	mul.w	r2, r3, r2
  40eb06:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40eb0a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40eb0e:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40eb12:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40eb14:	f1b9 0f00 	cmp.w	r9, #0
  40eb18:	db13      	blt.n	40eb42 <lv_draw_mask_radius+0x2aa>
  40eb1a:	45b9      	cmp	r9, r7
  40eb1c:	da11      	bge.n	40eb42 <lv_draw_mask_radius+0x2aa>
  40eb1e:	eb08 0109 	add.w	r1, r8, r9
  40eb22:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40eb26:	2bfc      	cmp	r3, #252	; 0xfc
  40eb28:	d80a      	bhi.n	40eb40 <lv_draw_mask_radius+0x2a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eb2a:	2b02      	cmp	r3, #2
  40eb2c:	f240 80ba 	bls.w	40eca4 <lv_draw_mask_radius+0x40c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eb30:	fb03 f302 	mul.w	r3, r3, r2
  40eb34:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40eb38:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40eb3c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40eb40:	700a      	strb	r2, [r1, #0]
                kl--;
  40eb42:	3e01      	subs	r6, #1
                kr++;
  40eb44:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40eb48:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40eb4c:	f8ad 301a 	strh.w	r3, [sp, #26]
                i++;
  40eb50:	f10b 0b01 	add.w	fp, fp, #1
  40eb54:	e0b5      	b.n	40ecc2 <lv_draw_mask_radius+0x42a>
        else sqrt_mask = 0x8000;
  40eb56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40eb5a:	9201      	str	r2, [sp, #4]
  40eb5c:	e74d      	b.n	40e9fa <lv_draw_mask_radius+0x162>
                x0.f = p->y_prev_x.f;
  40eb5e:	8b73      	ldrh	r3, [r6, #26]
  40eb60:	f8ad 3012 	strh.w	r3, [sp, #18]
                x0.i = p->y_prev_x.i;
  40eb64:	8b33      	ldrh	r3, [r6, #24]
  40eb66:	f8ad 3010 	strh.w	r3, [sp, #16]
  40eb6a:	e755      	b.n	40ea18 <lv_draw_mask_radius+0x180>
            y = radius - (h - abs_y) + 1;
  40eb6c:	1b1b      	subs	r3, r3, r4
  40eb6e:	eba9 0003 	sub.w	r0, r9, r3
  40eb72:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
  40eb74:	6973      	ldr	r3, [r6, #20]
  40eb76:	4298      	cmp	r0, r3
  40eb78:	d013      	beq.n	40eba2 <lv_draw_mask_radius+0x30a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40eb7a:	9a01      	ldr	r2, [sp, #4]
  40eb7c:	a905      	add	r1, sp, #20
  40eb7e:	fb00 a010 	mls	r0, r0, r0, sl
  40eb82:	4b12      	ldr	r3, [pc, #72]	; (40ebcc <lv_draw_mask_radius+0x334>)
  40eb84:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40eb86:	9a01      	ldr	r2, [sp, #4]
  40eb88:	a904      	add	r1, sp, #16
  40eb8a:	fb04 a014 	mls	r0, r4, r4, sl
  40eb8e:	4b0f      	ldr	r3, [pc, #60]	; (40ebcc <lv_draw_mask_radius+0x334>)
  40eb90:	4798      	blx	r3
            p->y_prev = y;
  40eb92:	6174      	str	r4, [r6, #20]
            p->y_prev_x.f = x0.f;
  40eb94:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40eb98:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x0.i;
  40eb9a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40eb9e:	8333      	strh	r3, [r6, #24]
  40eba0:	e74a      	b.n	40ea38 <lv_draw_mask_radius+0x1a0>
                x1.f = p->y_prev_x.f;
  40eba2:	8b73      	ldrh	r3, [r6, #26]
  40eba4:	f8ad 3016 	strh.w	r3, [sp, #22]
                x1.i = p->y_prev_x.i;
  40eba8:	8b33      	ldrh	r3, [r6, #24]
  40ebaa:	f8ad 3014 	strh.w	r3, [sp, #20]
  40ebae:	e7ea      	b.n	40eb86 <lv_draw_mask_radius+0x2ee>
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40ebb0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40ebb4:	2900      	cmp	r1, #0
  40ebb6:	f47f af47 	bne.w	40ea48 <lv_draw_mask_radius+0x1b0>
            x1.i--;
  40ebba:	3a01      	subs	r2, #1
  40ebbc:	f8ad 2014 	strh.w	r2, [sp, #20]
            x1.f = 0xFF;
  40ebc0:	22ff      	movs	r2, #255	; 0xff
  40ebc2:	f8ad 2016 	strh.w	r2, [sp, #22]
  40ebc6:	e73f      	b.n	40ea48 <lv_draw_mask_radius+0x1b0>
  40ebc8:	00415ca1 	.word	0x00415ca1
  40ebcc:	00415679 	.word	0x00415679
            lv_opa_t m = (x0.f + x1.f) >> 1;
  40ebd0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40ebd4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40ebd8:	440a      	add	r2, r1
  40ebda:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
  40ebde:	b10d      	cbz	r5, 40ebe4 <lv_draw_mask_radius+0x34c>
  40ebe0:	43d2      	mvns	r2, r2
  40ebe2:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
  40ebe4:	eba9 0303 	sub.w	r3, r9, r3
  40ebe8:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
  40ebea:	eb1b 0103 	adds.w	r1, fp, r3
  40ebee:	d411      	bmi.n	40ec14 <lv_draw_mask_radius+0x37c>
  40ebf0:	42b9      	cmp	r1, r7
  40ebf2:	da0f      	bge.n	40ec14 <lv_draw_mask_radius+0x37c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ebf4:	f818 0001 	ldrb.w	r0, [r8, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ebf8:	2afc      	cmp	r2, #252	; 0xfc
  40ebfa:	d809      	bhi.n	40ec10 <lv_draw_mask_radius+0x378>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ebfc:	2a02      	cmp	r2, #2
  40ebfe:	d932      	bls.n	40ec66 <lv_draw_mask_radius+0x3ce>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ec00:	fb02 f000 	mul.w	r0, r2, r0
  40ec04:	eb00 2400 	add.w	r4, r0, r0, lsl #8
  40ec08:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  40ec0c:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ec10:	f808 0001 	strb.w	r0, [r8, r1]
            int32_t kr = k + (w - ofs - 1);
  40ec14:	9802      	ldr	r0, [sp, #8]
  40ec16:	1ac3      	subs	r3, r0, r3
  40ec18:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
  40ec1a:	eb1b 0303 	adds.w	r3, fp, r3
  40ec1e:	d411      	bmi.n	40ec44 <lv_draw_mask_radius+0x3ac>
  40ec20:	42bb      	cmp	r3, r7
  40ec22:	da0f      	bge.n	40ec44 <lv_draw_mask_radius+0x3ac>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ec24:	f818 0003 	ldrb.w	r0, [r8, r3]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ec28:	2afc      	cmp	r2, #252	; 0xfc
  40ec2a:	d809      	bhi.n	40ec40 <lv_draw_mask_radius+0x3a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ec2c:	2a02      	cmp	r2, #2
  40ec2e:	d91c      	bls.n	40ec6a <lv_draw_mask_radius+0x3d2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ec30:	fb02 f200 	mul.w	r2, r2, r0
  40ec34:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40ec38:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40ec3c:	f3c2 50c7 	ubfx	r0, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ec40:	f808 0003 	strb.w	r0, [r8, r3]
            if(outer == false) {
  40ec44:	b19d      	cbz	r5, 40ec6e <lv_draw_mask_radius+0x3d6>
                if(first < 0) first = 0;
  40ec46:	1c48      	adds	r0, r1, #1
  40ec48:	d426      	bmi.n	40ec98 <lv_draw_mask_radius+0x400>
                int32_t len_tmp = kr - first;
  40ec4a:	1a19      	subs	r1, r3, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40ec4c:	42bb      	cmp	r3, r7
  40ec4e:	dd00      	ble.n	40ec52 <lv_draw_mask_radius+0x3ba>
  40ec50:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40ec52:	42b8      	cmp	r0, r7
  40ec54:	f280 80be 	bge.w	40edd4 <lv_draw_mask_radius+0x53c>
  40ec58:	2900      	cmp	r1, #0
  40ec5a:	f2c0 80bb 	blt.w	40edd4 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40ec5e:	4440      	add	r0, r8
  40ec60:	4b72      	ldr	r3, [pc, #456]	; (40ee2c <lv_draw_mask_radius+0x594>)
  40ec62:	4798      	blx	r3
  40ec64:	e0b6      	b.n	40edd4 <lv_draw_mask_radius+0x53c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ec66:	2000      	movs	r0, #0
  40ec68:	e7d2      	b.n	40ec10 <lv_draw_mask_radius+0x378>
  40ec6a:	2000      	movs	r0, #0
  40ec6c:	e7e8      	b.n	40ec40 <lv_draw_mask_radius+0x3a8>
                kr++;
  40ec6e:	1c5c      	adds	r4, r3, #1
                if(kl > len)  {
  40ec70:	42b9      	cmp	r1, r7
  40ec72:	f300 80c9 	bgt.w	40ee08 <lv_draw_mask_radius+0x570>
                if(kl >= 0) {
  40ec76:	2900      	cmp	r1, #0
  40ec78:	db02      	blt.n	40ec80 <lv_draw_mask_radius+0x3e8>
                    _lv_memset_00(&mask_buf[0], kl);
  40ec7a:	4640      	mov	r0, r8
  40ec7c:	4b6b      	ldr	r3, [pc, #428]	; (40ee2c <lv_draw_mask_radius+0x594>)
  40ec7e:	4798      	blx	r3
                if(kr < 0) {
  40ec80:	2c00      	cmp	r4, #0
  40ec82:	f2c0 80c1 	blt.w	40ee08 <lv_draw_mask_radius+0x570>
                if(kr <= len) {
  40ec86:	42bc      	cmp	r4, r7
  40ec88:	f300 80a4 	bgt.w	40edd4 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[kr], len - kr);
  40ec8c:	1b39      	subs	r1, r7, r4
  40ec8e:	eb08 0004 	add.w	r0, r8, r4
  40ec92:	4b66      	ldr	r3, [pc, #408]	; (40ee2c <lv_draw_mask_radius+0x594>)
  40ec94:	4798      	blx	r3
  40ec96:	e09d      	b.n	40edd4 <lv_draw_mask_radius+0x53c>
                if(first < 0) first = 0;
  40ec98:	2000      	movs	r0, #0
  40ec9a:	e7d6      	b.n	40ec4a <lv_draw_mask_radius+0x3b2>
                if(first < 0) first = 0;
  40ec9c:	2000      	movs	r0, #0
  40ec9e:	e6e7      	b.n	40ea70 <lv_draw_mask_radius+0x1d8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eca0:	2200      	movs	r2, #0
  40eca2:	e736      	b.n	40eb12 <lv_draw_mask_radius+0x27a>
  40eca4:	2200      	movs	r2, #0
  40eca6:	e74b      	b.n	40eb40 <lv_draw_mask_radius+0x2a8>
  40eca8:	2200      	movs	r2, #0
  40ecaa:	e041      	b.n	40ed30 <lv_draw_mask_radius+0x498>
  40ecac:	2200      	movs	r2, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ecae:	700a      	strb	r2, [r1, #0]
                kl--;
  40ecb0:	3e01      	subs	r6, #1
                kr++;
  40ecb2:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40ecb6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40ecba:	f8ad 301a 	strh.w	r3, [sp, #26]
            for(; i <= x1.i; i++) {
  40ecbe:	f10b 0b01 	add.w	fp, fp, #1
  40ecc2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40ecc6:	459b      	cmp	fp, r3
  40ecc8:	d849      	bhi.n	40ed5e <lv_draw_mask_radius+0x4c6>
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
  40ecca:	fb0b a11b 	mls	r1, fp, fp, sl
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
  40ecce:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  40ecd2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40ecd6:	0913      	lsrs	r3, r2, #4
  40ecd8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    uint32_t raw2 = raw * raw;
  40ecdc:	fb03 f003 	mul.w	r0, r3, r3

    int32_t d = x - raw2;
  40ece0:	ebc0 2101 	rsb	r1, r0, r1, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
  40ece4:	0058      	lsls	r0, r3, #1
  40ece6:	fb91 f1f0 	sdiv	r1, r1, r0
  40ecea:	440b      	add	r3, r1

    q->i = d >> 4;
  40ecec:	1119      	asrs	r1, r3, #4
  40ecee:	f8ad 101c 	strh.w	r1, [sp, #28]
    q->f = (d & 0xF) << 4;
  40ecf2:	011b      	lsls	r3, r3, #4
  40ecf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40ecf8:	f8ad 301e 	strh.w	r3, [sp, #30]
                m = (y_prev.f + y_next.f) >> 1;
  40ecfc:	4413      	add	r3, r2
  40ecfe:	f3c3 0347 	ubfx	r3, r3, #1, #8
                if(outer) m = 255 - m;
  40ed02:	b10d      	cbz	r5, 40ed08 <lv_draw_mask_radius+0x470>
  40ed04:	43db      	mvns	r3, r3
  40ed06:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ed08:	2e00      	cmp	r6, #0
  40ed0a:	db12      	blt.n	40ed32 <lv_draw_mask_radius+0x49a>
  40ed0c:	42be      	cmp	r6, r7
  40ed0e:	da10      	bge.n	40ed32 <lv_draw_mask_radius+0x49a>
  40ed10:	eb08 0106 	add.w	r1, r8, r6
  40ed14:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ed18:	2bfc      	cmp	r3, #252	; 0xfc
  40ed1a:	d809      	bhi.n	40ed30 <lv_draw_mask_radius+0x498>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed1c:	2b02      	cmp	r3, #2
  40ed1e:	d9c3      	bls.n	40eca8 <lv_draw_mask_radius+0x410>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ed20:	fb03 f202 	mul.w	r2, r3, r2
  40ed24:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40ed28:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40ed2c:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ed30:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ed32:	f1b9 0f00 	cmp.w	r9, #0
  40ed36:	dbbb      	blt.n	40ecb0 <lv_draw_mask_radius+0x418>
  40ed38:	45b9      	cmp	r9, r7
  40ed3a:	dab9      	bge.n	40ecb0 <lv_draw_mask_radius+0x418>
  40ed3c:	eb08 0109 	add.w	r1, r8, r9
  40ed40:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ed44:	2bfc      	cmp	r3, #252	; 0xfc
  40ed46:	d8b2      	bhi.n	40ecae <lv_draw_mask_radius+0x416>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed48:	2b02      	cmp	r3, #2
  40ed4a:	d9af      	bls.n	40ecac <lv_draw_mask_radius+0x414>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ed4c:	fb03 f302 	mul.w	r3, r3, r2
  40ed50:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40ed54:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40ed58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  40ed5c:	e7a7      	b.n	40ecae <lv_draw_mask_radius+0x416>
            if(y_prev.f) {
  40ed5e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40ed62:	b3b2      	cbz	r2, 40edd2 <lv_draw_mask_radius+0x53a>
                m = (y_prev.f * x1.f) >> 9;
  40ed64:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40ed68:	fb03 f302 	mul.w	r3, r3, r2
  40ed6c:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
  40ed70:	b10d      	cbz	r5, 40ed76 <lv_draw_mask_radius+0x4de>
  40ed72:	43db      	mvns	r3, r3
  40ed74:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ed76:	2e00      	cmp	r6, #0
  40ed78:	db12      	blt.n	40eda0 <lv_draw_mask_radius+0x508>
  40ed7a:	42be      	cmp	r6, r7
  40ed7c:	da10      	bge.n	40eda0 <lv_draw_mask_radius+0x508>
  40ed7e:	eb08 0106 	add.w	r1, r8, r6
  40ed82:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ed86:	2bfc      	cmp	r3, #252	; 0xfc
  40ed88:	d809      	bhi.n	40ed9e <lv_draw_mask_radius+0x506>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed8a:	2b02      	cmp	r3, #2
  40ed8c:	d924      	bls.n	40edd8 <lv_draw_mask_radius+0x540>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ed8e:	fb03 f202 	mul.w	r2, r3, r2
  40ed92:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40ed96:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40ed9a:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ed9e:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40eda0:	f1b9 0f00 	cmp.w	r9, #0
  40eda4:	db12      	blt.n	40edcc <lv_draw_mask_radius+0x534>
  40eda6:	45b9      	cmp	r9, r7
  40eda8:	da10      	bge.n	40edcc <lv_draw_mask_radius+0x534>
  40edaa:	eb08 0109 	add.w	r1, r8, r9
  40edae:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40edb2:	2bfc      	cmp	r3, #252	; 0xfc
  40edb4:	d809      	bhi.n	40edca <lv_draw_mask_radius+0x532>
    if(mask_new <= LV_OPA_MIN) return 0;
  40edb6:	2b02      	cmp	r3, #2
  40edb8:	d910      	bls.n	40eddc <lv_draw_mask_radius+0x544>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40edba:	fb03 f302 	mul.w	r3, r3, r2
  40edbe:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40edc2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40edc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40edca:	700a      	strb	r2, [r1, #0]
                kl--;
  40edcc:	3e01      	subs	r6, #1
                kr++;
  40edce:	f109 0901 	add.w	r9, r9, #1
            if(outer == 0) {
  40edd2:	b12d      	cbz	r5, 40ede0 <lv_draw_mask_radius+0x548>
    return LV_DRAW_MASK_RES_CHANGED;
  40edd4:	2002      	movs	r0, #2
  40edd6:	e01a      	b.n	40ee0e <lv_draw_mask_radius+0x576>
    if(mask_new <= LV_OPA_MIN) return 0;
  40edd8:	2200      	movs	r2, #0
  40edda:	e7e0      	b.n	40ed9e <lv_draw_mask_radius+0x506>
  40eddc:	2200      	movs	r2, #0
  40edde:	e7f4      	b.n	40edca <lv_draw_mask_radius+0x532>
                kl++;
  40ede0:	1c71      	adds	r1, r6, #1
                if(kl > len) {
  40ede2:	42b9      	cmp	r1, r7
  40ede4:	dc10      	bgt.n	40ee08 <lv_draw_mask_radius+0x570>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
  40ede6:	2900      	cmp	r1, #0
  40ede8:	db02      	blt.n	40edf0 <lv_draw_mask_radius+0x558>
  40edea:	4640      	mov	r0, r8
  40edec:	4b0f      	ldr	r3, [pc, #60]	; (40ee2c <lv_draw_mask_radius+0x594>)
  40edee:	4798      	blx	r3
                if(kr < 0) {
  40edf0:	f1b9 0f00 	cmp.w	r9, #0
  40edf4:	db08      	blt.n	40ee08 <lv_draw_mask_radius+0x570>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
  40edf6:	45b9      	cmp	r9, r7
  40edf8:	daec      	bge.n	40edd4 <lv_draw_mask_radius+0x53c>
  40edfa:	eba7 0109 	sub.w	r1, r7, r9
  40edfe:	eb08 0009 	add.w	r0, r8, r9
  40ee02:	4b0a      	ldr	r3, [pc, #40]	; (40ee2c <lv_draw_mask_radius+0x594>)
  40ee04:	4798      	blx	r3
  40ee06:	e7e5      	b.n	40edd4 <lv_draw_mask_radius+0x53c>
                    return LV_DRAW_MASK_RES_TRANSP;
  40ee08:	2000      	movs	r0, #0
  40ee0a:	e000      	b.n	40ee0e <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_TRANSP;
  40ee0c:	2000      	movs	r0, #0
}
  40ee0e:	b00b      	add	sp, #44	; 0x2c
  40ee10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40ee14:	2000      	movs	r0, #0
  40ee16:	e7fa      	b.n	40ee0e <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40ee18:	2001      	movs	r0, #1
  40ee1a:	e7f8      	b.n	40ee0e <lv_draw_mask_radius+0x576>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40ee1c:	2000      	movs	r0, #0
  40ee1e:	e7f6      	b.n	40ee0e <lv_draw_mask_radius+0x576>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40ee20:	2000      	movs	r0, #0
  40ee22:	e7f4      	b.n	40ee0e <lv_draw_mask_radius+0x576>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ee24:	2001      	movs	r0, #1
  40ee26:	e7f2      	b.n	40ee0e <lv_draw_mask_radius+0x576>
        return LV_DRAW_MASK_RES_CHANGED;
  40ee28:	2002      	movs	r0, #2
  40ee2a:	e7f0      	b.n	40ee0e <lv_draw_mask_radius+0x576>
  40ee2c:	00415ca1 	.word	0x00415ca1

0040ee30 <lv_draw_mask_add>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40ee30:	2300      	movs	r3, #0
  40ee32:	2b0f      	cmp	r3, #15
  40ee34:	d806      	bhi.n	40ee44 <lv_draw_mask_add+0x14>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  40ee36:	4a0a      	ldr	r2, [pc, #40]	; (40ee60 <lv_draw_mask_add+0x30>)
  40ee38:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40ee3c:	b112      	cbz	r2, 40ee44 <lv_draw_mask_add+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40ee3e:	3301      	adds	r3, #1
  40ee40:	b2db      	uxtb	r3, r3
  40ee42:	e7f6      	b.n	40ee32 <lv_draw_mask_add+0x2>
    if(i >= _LV_MASK_MAX_NUM) {
  40ee44:	2b0f      	cmp	r3, #15
  40ee46:	d807      	bhi.n	40ee58 <lv_draw_mask_add+0x28>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
  40ee48:	4a05      	ldr	r2, [pc, #20]	; (40ee60 <lv_draw_mask_add+0x30>)
  40ee4a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
  40ee4e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40ee52:	6051      	str	r1, [r2, #4]
    return i;
  40ee54:	b218      	sxth	r0, r3
  40ee56:	4770      	bx	lr
        return LV_MASK_ID_INV;
  40ee58:	f04f 30ff 	mov.w	r0, #4294967295
}
  40ee5c:	4770      	bx	lr
  40ee5e:	bf00      	nop
  40ee60:	2043a258 	.word	0x2043a258

0040ee64 <lv_draw_mask_apply>:
{
  40ee64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ee68:	b082      	sub	sp, #8
  40ee6a:	4680      	mov	r8, r0
  40ee6c:	460f      	mov	r7, r1
  40ee6e:	4616      	mov	r6, r2
  40ee70:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
  40ee72:	4c0f      	ldr	r4, [pc, #60]	; (40eeb0 <lv_draw_mask_apply+0x4c>)
    bool changed = false;
  40ee74:	f04f 0900 	mov.w	r9, #0
    while(m->param) {
  40ee78:	e000      	b.n	40ee7c <lv_draw_mask_apply+0x18>
        m++;
  40ee7a:	3408      	adds	r4, #8
    while(m->param) {
  40ee7c:	6823      	ldr	r3, [r4, #0]
  40ee7e:	b16b      	cbz	r3, 40ee9c <lv_draw_mask_apply+0x38>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
  40ee80:	681d      	ldr	r5, [r3, #0]
  40ee82:	9300      	str	r3, [sp, #0]
  40ee84:	4653      	mov	r3, sl
  40ee86:	4632      	mov	r2, r6
  40ee88:	4639      	mov	r1, r7
  40ee8a:	4640      	mov	r0, r8
  40ee8c:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  40ee8e:	4603      	mov	r3, r0
  40ee90:	b140      	cbz	r0, 40eea4 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
  40ee92:	2802      	cmp	r0, #2
  40ee94:	d1f1      	bne.n	40ee7a <lv_draw_mask_apply+0x16>
  40ee96:	f04f 0901 	mov.w	r9, #1
  40ee9a:	e7ee      	b.n	40ee7a <lv_draw_mask_apply+0x16>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40ee9c:	f1b9 0f00 	cmp.w	r9, #0
  40eea0:	d004      	beq.n	40eeac <lv_draw_mask_apply+0x48>
  40eea2:	2302      	movs	r3, #2
}
  40eea4:	4618      	mov	r0, r3
  40eea6:	b002      	add	sp, #8
  40eea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40eeac:	2301      	movs	r3, #1
  40eeae:	e7f9      	b.n	40eea4 <lv_draw_mask_apply+0x40>
  40eeb0:	2043a258 	.word	0x2043a258

0040eeb4 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
  40eeb4:	f1b0 3fff 	cmp.w	r0, #4294967295
  40eeb8:	d00a      	beq.n	40eed0 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
  40eeba:	4b06      	ldr	r3, [pc, #24]	; (40eed4 <lv_draw_mask_remove_id+0x20>)
  40eebc:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
  40eec0:	2200      	movs	r2, #0
  40eec2:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
  40eec6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  40eeca:	605a      	str	r2, [r3, #4]
}
  40eecc:	4608      	mov	r0, r1
  40eece:	4770      	bx	lr
    void * p = NULL;
  40eed0:	2100      	movs	r1, #0
    return p;
  40eed2:	e7fb      	b.n	40eecc <lv_draw_mask_remove_id+0x18>
  40eed4:	2043a258 	.word	0x2043a258

0040eed8 <lv_draw_mask_remove_custom>:
{
  40eed8:	4601      	mov	r1, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40eeda:	2300      	movs	r3, #0
    void * p = NULL;
  40eedc:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40eede:	e004      	b.n	40eeea <lv_draw_mask_remove_custom+0x12>
}
  40eee0:	f85d 4b04 	ldr.w	r4, [sp], #4
  40eee4:	4770      	bx	lr
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40eee6:	3301      	adds	r3, #1
  40eee8:	b2db      	uxtb	r3, r3
  40eeea:	2b0f      	cmp	r3, #15
  40eeec:	d81a      	bhi.n	40ef24 <lv_draw_mask_remove_custom+0x4c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40eeee:	4a0e      	ldr	r2, [pc, #56]	; (40ef28 <lv_draw_mask_remove_custom+0x50>)
  40eef0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40eef4:	6852      	ldr	r2, [r2, #4]
  40eef6:	428a      	cmp	r2, r1
  40eef8:	d1f5      	bne.n	40eee6 <lv_draw_mask_remove_custom+0xe>
{
  40eefa:	b410      	push	{r4}
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40eefc:	4a0a      	ldr	r2, [pc, #40]	; (40ef28 <lv_draw_mask_remove_custom+0x50>)
  40eefe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
  40ef02:	2400      	movs	r4, #0
  40ef04:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
  40ef08:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40ef0c:	6054      	str	r4, [r2, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40ef0e:	3301      	adds	r3, #1
  40ef10:	b2db      	uxtb	r3, r3
  40ef12:	2b0f      	cmp	r3, #15
  40ef14:	d8e4      	bhi.n	40eee0 <lv_draw_mask_remove_custom+0x8>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40ef16:	4a04      	ldr	r2, [pc, #16]	; (40ef28 <lv_draw_mask_remove_custom+0x50>)
  40ef18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40ef1c:	6852      	ldr	r2, [r2, #4]
  40ef1e:	428a      	cmp	r2, r1
  40ef20:	d1f5      	bne.n	40ef0e <lv_draw_mask_remove_custom+0x36>
  40ef22:	e7eb      	b.n	40eefc <lv_draw_mask_remove_custom+0x24>
  40ef24:	4770      	bx	lr
  40ef26:	bf00      	nop
  40ef28:	2043a258 	.word	0x2043a258

0040ef2c <lv_draw_mask_get_cnt>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40ef2c:	2300      	movs	r3, #0
    uint8_t cnt = 0;
  40ef2e:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40ef30:	e001      	b.n	40ef36 <lv_draw_mask_get_cnt+0xa>
  40ef32:	3301      	adds	r3, #1
  40ef34:	b2db      	uxtb	r3, r3
  40ef36:	2b0f      	cmp	r3, #15
  40ef38:	d807      	bhi.n	40ef4a <lv_draw_mask_get_cnt+0x1e>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
  40ef3a:	4a04      	ldr	r2, [pc, #16]	; (40ef4c <lv_draw_mask_get_cnt+0x20>)
  40ef3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40ef40:	2a00      	cmp	r2, #0
  40ef42:	d0f6      	beq.n	40ef32 <lv_draw_mask_get_cnt+0x6>
  40ef44:	3001      	adds	r0, #1
  40ef46:	b2c0      	uxtb	r0, r0
  40ef48:	e7f3      	b.n	40ef32 <lv_draw_mask_get_cnt+0x6>
}
  40ef4a:	4770      	bx	lr
  40ef4c:	2043a258 	.word	0x2043a258

0040ef50 <lv_draw_mask_line_points_init>:
{
  40ef50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ef54:	4604      	mov	r4, r0
  40ef56:	4688      	mov	r8, r1
  40ef58:	4616      	mov	r6, r2
  40ef5a:	461f      	mov	r7, r3
  40ef5c:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
  40ef60:	212c      	movs	r1, #44	; 0x2c
  40ef62:	4b50      	ldr	r3, [pc, #320]	; (40f0a4 <lv_draw_mask_line_points_init+0x154>)
  40ef64:	4798      	blx	r3
    if(p1y > p2y) {
  40ef66:	42ae      	cmp	r6, r5
  40ef68:	dc05      	bgt.n	40ef76 <lv_draw_mask_line_points_init+0x26>
  40ef6a:	462b      	mov	r3, r5
  40ef6c:	4635      	mov	r5, r6
  40ef6e:	461e      	mov	r6, r3
  40ef70:	463b      	mov	r3, r7
  40ef72:	4647      	mov	r7, r8
  40ef74:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
  40ef76:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
  40ef78:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
  40ef7a:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
  40ef7e:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
  40ef80:	7c23      	ldrb	r3, [r4, #16]
  40ef82:	f89d 201c 	ldrb.w	r2, [sp, #28]
  40ef86:	f362 0301 	bfi	r3, r2, #0, #2
  40ef8a:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
  40ef8c:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
  40ef8e:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
  40ef90:	eba8 0707 	sub.w	r7, r8, r7
  40ef94:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
  40ef98:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
  40ef9c:	1b75      	subs	r5, r6, r5
  40ef9e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40efa2:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40efa6:	429a      	cmp	r2, r3
  40efa8:	bfd4      	ite	le
  40efaa:	2200      	movle	r2, #0
  40efac:	2201      	movgt	r2, #1
  40efae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40efb2:	f362 0300 	bfi	r3, r2, #0, #1
  40efb6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->yx_steep = 0;
  40efba:	2200      	movs	r2, #0
  40efbc:	61e2      	str	r2, [r4, #28]
    param->xy_steep = 0;
  40efbe:	61a2      	str	r2, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
  40efc0:	4939      	ldr	r1, [pc, #228]	; (40f0a8 <lv_draw_mask_line_points_init+0x158>)
  40efc2:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
  40efc4:	7122      	strb	r2, [r4, #4]
    if(param->flat) {
  40efc6:	f013 0f01 	tst.w	r3, #1
  40efca:	d024      	beq.n	40f016 <lv_draw_mask_line_points_init+0xc6>
        if(dx) {
  40efcc:	b13f      	cbz	r7, 40efde <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
  40efce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40efd2:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
  40efd6:	fb03 f305 	mul.w	r3, r3, r5
  40efda:	129b      	asrs	r3, r3, #10
  40efdc:	61e3      	str	r3, [r4, #28]
        if(dy) {
  40efde:	b13d      	cbz	r5, 40eff0 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40efe0:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  40efe4:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
  40efe8:	fb05 f707 	mul.w	r7, r5, r7
  40efec:	12bf      	asrs	r7, r7, #10
  40efee:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
  40eff0:	69e3      	ldr	r3, [r4, #28]
  40eff2:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
  40eff4:	7c23      	ldrb	r3, [r4, #16]
  40eff6:	f013 0303 	ands.w	r3, r3, #3
  40effa:	d121      	bne.n	40f040 <lv_draw_mask_line_points_init+0xf0>
  40effc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f000:	f36f 0341 	bfc	r3, #1, #1
  40f004:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
  40f008:	6a22      	ldr	r2, [r4, #32]
  40f00a:	1093      	asrs	r3, r2, #2
  40f00c:	6263      	str	r3, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
  40f00e:	2a00      	cmp	r2, #0
  40f010:	db45      	blt.n	40f09e <lv_draw_mask_line_points_init+0x14e>
  40f012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
  40f016:	b13d      	cbz	r5, 40f028 <lv_draw_mask_line_points_init+0xd8>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f018:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40f01c:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
  40f020:	fb03 f307 	mul.w	r3, r3, r7
  40f024:	129b      	asrs	r3, r3, #10
  40f026:	61a3      	str	r3, [r4, #24]
        if(dx) {
  40f028:	b13f      	cbz	r7, 40f03a <lv_draw_mask_line_points_init+0xea>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f02a:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  40f02e:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
  40f032:	fb07 f505 	mul.w	r5, r7, r5
  40f036:	12ad      	asrs	r5, r5, #10
  40f038:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
  40f03a:	69a3      	ldr	r3, [r4, #24]
  40f03c:	6223      	str	r3, [r4, #32]
  40f03e:	e7d9      	b.n	40eff4 <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40f040:	2b01      	cmp	r3, #1
  40f042:	d00d      	beq.n	40f060 <lv_draw_mask_line_points_init+0x110>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
  40f044:	2b02      	cmp	r3, #2
  40f046:	d012      	beq.n	40f06e <lv_draw_mask_line_points_init+0x11e>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  40f048:	2b03      	cmp	r3, #3
  40f04a:	d1dd      	bne.n	40f008 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
  40f04c:	6a23      	ldr	r3, [r4, #32]
  40f04e:	2b00      	cmp	r3, #0
  40f050:	dd1e      	ble.n	40f090 <lv_draw_mask_line_points_init+0x140>
  40f052:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f056:	f36f 0341 	bfc	r3, #1, #1
  40f05a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f05e:	e7d3      	b.n	40f008 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40f060:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f064:	f043 0302 	orr.w	r3, r3, #2
  40f068:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f06c:	e7cc      	b.n	40f008 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
  40f06e:	6a23      	ldr	r3, [r4, #32]
  40f070:	2b00      	cmp	r3, #0
  40f072:	dd06      	ble.n	40f082 <lv_draw_mask_line_points_init+0x132>
  40f074:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f078:	f043 0302 	orr.w	r3, r3, #2
  40f07c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f080:	e7c2      	b.n	40f008 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 0;
  40f082:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f086:	f36f 0341 	bfc	r3, #1, #1
  40f08a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f08e:	e7bb      	b.n	40f008 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 1;
  40f090:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f094:	f043 0302 	orr.w	r3, r3, #2
  40f098:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f09c:	e7b4      	b.n	40f008 <lv_draw_mask_line_points_init+0xb8>
    if(param->steep < 0) param->spx = -param->spx;
  40f09e:	425b      	negs	r3, r3
  40f0a0:	6263      	str	r3, [r4, #36]	; 0x24
}
  40f0a2:	e7b6      	b.n	40f012 <lv_draw_mask_line_points_init+0xc2>
  40f0a4:	00415ca1 	.word	0x00415ca1
  40f0a8:	0040e7ad 	.word	0x0040e7ad

0040f0ac <lv_draw_mask_radius_init>:
{
  40f0ac:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f0ae:	888c      	ldrh	r4, [r1, #4]
  40f0b0:	880e      	ldrh	r6, [r1, #0]
  40f0b2:	1ba4      	subs	r4, r4, r6
  40f0b4:	b2a4      	uxth	r4, r4
  40f0b6:	3401      	adds	r4, #1
  40f0b8:	b226      	sxth	r6, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f0ba:	88cd      	ldrh	r5, [r1, #6]
  40f0bc:	884c      	ldrh	r4, [r1, #2]
  40f0be:	1b2d      	subs	r5, r5, r4
  40f0c0:	b2ad      	uxth	r5, r5
  40f0c2:	3501      	adds	r5, #1
  40f0c4:	b22c      	sxth	r4, r5
    int32_t short_side = LV_MATH_MIN(w, h);
  40f0c6:	42b4      	cmp	r4, r6
  40f0c8:	bfa8      	it	ge
  40f0ca:	4634      	movge	r4, r6
    if(radius > short_side >> 1) radius = short_side >> 1;
  40f0cc:	1064      	asrs	r4, r4, #1
  40f0ce:	42a2      	cmp	r2, r4
  40f0d0:	dd00      	ble.n	40f0d4 <lv_draw_mask_radius_init+0x28>
  40f0d2:	b222      	sxth	r2, r4
    uint8_t * d8 = (uint8_t *)dst;
  40f0d4:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.rect, rect);
  40f0d8:	2408      	movs	r4, #8
  40f0da:	e004      	b.n	40f0e6 <lv_draw_mask_radius_init+0x3a>
        *d8 = *s8;
  40f0dc:	f811 6b01 	ldrb.w	r6, [r1], #1
  40f0e0:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  40f0e4:	3c01      	subs	r4, #1
    while(len) {
  40f0e6:	2c00      	cmp	r4, #0
  40f0e8:	d1f8      	bne.n	40f0dc <lv_draw_mask_radius_init+0x30>
    param->cfg.radius = radius;
  40f0ea:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
  40f0ec:	7c82      	ldrb	r2, [r0, #18]
  40f0ee:	f363 0200 	bfi	r2, r3, #0, #1
  40f0f2:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
  40f0f4:	4b05      	ldr	r3, [pc, #20]	; (40f10c <lv_draw_mask_radius_init+0x60>)
  40f0f6:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
  40f0f8:	2302      	movs	r3, #2
  40f0fa:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
  40f0fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40f100:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
  40f102:	2300      	movs	r3, #0
  40f104:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
  40f106:	8303      	strh	r3, [r0, #24]
}
  40f108:	bc70      	pop	{r4, r5, r6}
  40f10a:	4770      	bx	lr
  40f10c:	0040e899 	.word	0x0040e899

0040f110 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
  40f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f114:	b085      	sub	sp, #20
  40f116:	9002      	str	r0, [sp, #8]
  40f118:	9101      	str	r1, [sp, #4]
  40f11a:	4615      	mov	r5, r2
    int32_t s_left = sw >> 1;
  40f11c:	104f      	asrs	r7, r1, #1
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
  40f11e:	f011 0f01 	tst.w	r1, #1
  40f122:	d10e      	bne.n	40f142 <shadow_blur_corner+0x32>
  40f124:	f107 38ff 	add.w	r8, r7, #4294967295

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
  40f128:	9b02      	ldr	r3, [sp, #8]
  40f12a:	469a      	mov	sl, r3
  40f12c:	005e      	lsls	r6, r3, #1
  40f12e:	4630      	mov	r0, r6
  40f130:	4b50      	ldr	r3, [pc, #320]	; (40f274 <shadow_blur_corner+0x164>)
  40f132:	4798      	blx	r3
  40f134:	4604      	mov	r4, r0

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
  40f136:	46a9      	mov	r9, r5

    for(y = 0; y < size; y++) {
  40f138:	f04f 0b00 	mov.w	fp, #0
  40f13c:	9503      	str	r5, [sp, #12]
  40f13e:	9d02      	ldr	r5, [sp, #8]
  40f140:	e024      	b.n	40f18c <shadow_blur_corner+0x7c>
    int32_t s_left = sw >> 1;
  40f142:	46b8      	mov	r8, r7
  40f144:	e7f0      	b.n	40f128 <shadow_blur_corner+0x18>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
        for(x = size - 1; x >= 0; x--) {
            sh_ups_blur_buf[x] = v;

            /*Forget the right pixel*/
            uint32_t right_val = 0;
  40f146:	2200      	movs	r2, #0
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
            v -= right_val;
  40f148:	1a9b      	subs	r3, r3, r2

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40f14a:	eba0 0e08 	sub.w	lr, r0, r8
  40f14e:	f1be 0f01 	cmp.w	lr, #1
  40f152:	d410      	bmi.n	40f176 <shadow_blur_corner+0x66>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
  40f154:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40f158:	4472      	add	r2, lr
  40f15a:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
            v += left_val;
  40f15e:	4413      	add	r3, r2
        for(x = size - 1; x >= 0; x--) {
  40f160:	3801      	subs	r0, #1
  40f162:	2800      	cmp	r0, #0
  40f164:	db0a      	blt.n	40f17c <shadow_blur_corner+0x6c>
            sh_ups_blur_buf[x] = v;
  40f166:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
  40f16a:	19c2      	adds	r2, r0, r7
  40f16c:	4291      	cmp	r1, r2
  40f16e:	ddea      	ble.n	40f146 <shadow_blur_corner+0x36>
  40f170:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
  40f174:	e7e8      	b.n	40f148 <shadow_blur_corner+0x38>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40f176:	f8b9 2000 	ldrh.w	r2, [r9]
  40f17a:	e7f0      	b.n	40f15e <shadow_blur_corner+0x4e>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
  40f17c:	4632      	mov	r2, r6
  40f17e:	4621      	mov	r1, r4
  40f180:	4648      	mov	r0, r9
  40f182:	4b3d      	ldr	r3, [pc, #244]	; (40f278 <shadow_blur_corner+0x168>)
  40f184:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40f186:	44b1      	add	r9, r6
    for(y = 0; y < size; y++) {
  40f188:	f10b 0b01 	add.w	fp, fp, #1
  40f18c:	4629      	mov	r1, r5
  40f18e:	45ab      	cmp	fp, r5
  40f190:	da09      	bge.n	40f1a6 <shadow_blur_corner+0x96>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40f192:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40f196:	4453      	add	r3, sl
  40f198:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
  40f19c:	9a01      	ldr	r2, [sp, #4]
  40f19e:	fb02 f303 	mul.w	r3, r2, r3
        for(x = size - 1; x >= 0; x--) {
  40f1a2:	1e68      	subs	r0, r5, #1
  40f1a4:	e7dd      	b.n	40f162 <shadow_blur_corner+0x52>
  40f1a6:	9d03      	ldr	r5, [sp, #12]
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
  40f1a8:	882b      	ldrh	r3, [r5, #0]
  40f1aa:	9a01      	ldr	r2, [sp, #4]
  40f1ac:	4694      	mov	ip, r2
  40f1ae:	fb93 f3f2 	sdiv	r3, r3, r2
  40f1b2:	802b      	strh	r3, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40f1b4:	2301      	movs	r3, #1
  40f1b6:	e002      	b.n	40f1be <shadow_blur_corner+0xae>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40f1b8:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40f1bc:	3301      	adds	r3, #1
  40f1be:	fb0a f20a 	mul.w	r2, sl, sl
  40f1c2:	4293      	cmp	r3, r2
  40f1c4:	d20d      	bcs.n	40f1e2 <shadow_blur_corner+0xd2>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40f1c6:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  40f1ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40f1ce:	4418      	add	r0, r3
  40f1d0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40f1d4:	4282      	cmp	r2, r0
  40f1d6:	d0ef      	beq.n	40f1b8 <shadow_blur_corner+0xa8>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
  40f1d8:	fb92 f2fc 	sdiv	r2, r2, ip
  40f1dc:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
  40f1e0:	e7ec      	b.n	40f1bc <shadow_blur_corner+0xac>
  40f1e2:	f04f 0a00 	mov.w	sl, #0
  40f1e6:	e034      	b.n	40f252 <shadow_blur_corner+0x142>

    for(x = 0; x < size; x++) {
        sh_ups_tmp_buf = &sh_ups_buf[x];
        int32_t v = sh_ups_tmp_buf[0] * sw;
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40f1e8:	f04f 0b00 	mov.w	fp, #0
  40f1ec:	e011      	b.n	40f212 <shadow_blur_corner+0x102>

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40f1ee:	f8b9 0000 	ldrh.w	r0, [r9]
  40f1f2:	e017      	b.n	40f224 <shadow_blur_corner+0x114>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  40f1f4:	1e48      	subs	r0, r1, #1
  40f1f6:	fb00 a001 	mla	r0, r0, r1, sl
  40f1fa:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v += bottom_val;
  40f1fe:	4402      	add	r2, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40f200:	3301      	adds	r3, #1
  40f202:	44b1      	add	r9, r6
  40f204:	428b      	cmp	r3, r1
  40f206:	da18      	bge.n	40f23a <shadow_blur_corner+0x12a>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40f208:	0058      	lsls	r0, r3, #1
  40f20a:	2a00      	cmp	r2, #0
  40f20c:	dbec      	blt.n	40f1e8 <shadow_blur_corner+0xd8>
  40f20e:	f3c2 1b8f 	ubfx	fp, r2, #6, #16
  40f212:	f824 b000 	strh.w	fp, [r4, r0]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40f216:	1bd8      	subs	r0, r3, r7
  40f218:	2800      	cmp	r0, #0
  40f21a:	dde8      	ble.n	40f1ee <shadow_blur_corner+0xde>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
  40f21c:	fb00 a001 	mla	r0, r0, r1, sl
  40f220:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v -= top_val;
  40f224:	1a12      	subs	r2, r2, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  40f226:	eb08 0003 	add.w	r0, r8, r3
  40f22a:	3001      	adds	r0, #1
  40f22c:	4281      	cmp	r1, r0
  40f22e:	dde1      	ble.n	40f1f4 <shadow_blur_corner+0xe4>
  40f230:	fb00 a001 	mla	r0, r0, r1, sl
  40f234:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40f238:	e7e1      	b.n	40f1fe <shadow_blur_corner+0xee>
  40f23a:	2300      	movs	r3, #0
  40f23c:	e005      	b.n	40f24a <shadow_blur_corner+0x13a>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
  40f23e:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
  40f242:	f8ae 2000 	strh.w	r2, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
  40f246:	3301      	adds	r3, #1
  40f248:	44b6      	add	lr, r6
  40f24a:	428b      	cmp	r3, r1
  40f24c:	dbf7      	blt.n	40f23e <shadow_blur_corner+0x12e>
    for(x = 0; x < size; x++) {
  40f24e:	f10a 0a01 	add.w	sl, sl, #1
  40f252:	458a      	cmp	sl, r1
  40f254:	da08      	bge.n	40f268 <shadow_blur_corner+0x158>
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40f256:	eb05 0e4a 	add.w	lr, r5, sl, lsl #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
  40f25a:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
  40f25e:	fb02 f20c 	mul.w	r2, r2, ip
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40f262:	46f1      	mov	r9, lr
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40f264:	2300      	movs	r3, #0
  40f266:	e7cd      	b.n	40f204 <shadow_blur_corner+0xf4>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
  40f268:	4620      	mov	r0, r4
  40f26a:	4b04      	ldr	r3, [pc, #16]	; (40f27c <shadow_blur_corner+0x16c>)
  40f26c:	4798      	blx	r3
}
  40f26e:	b005      	add	sp, #20
  40f270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f274:	00415b15 	.word	0x00415b15
  40f278:	0041597d 	.word	0x0041597d
  40f27c:	004158c5 	.word	0x004158c5

0040f280 <shadow_draw_corner_buf>:
{
  40f280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f284:	b08f      	sub	sp, #60	; 0x3c
  40f286:	4688      	mov	r8, r1
  40f288:	4692      	mov	sl, r2
  40f28a:	461a      	mov	r2, r3
    int32_t size = sw_ori  + r;
  40f28c:	eb0a 0503 	add.w	r5, sl, r3
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  40f290:	4604      	mov	r4, r0
    uint8_t * d8 = (uint8_t *)dst;
  40f292:	a90c      	add	r1, sp, #48	; 0x30
  40f294:	2308      	movs	r3, #8
  40f296:	e004      	b.n	40f2a2 <shadow_draw_corner_buf+0x22>

    while(len) {
        *d8 = *s8;
  40f298:	f814 6b01 	ldrb.w	r6, [r4], #1
  40f29c:	f801 6b01 	strb.w	r6, [r1], #1
        d8++;
        s8++;
        len--;
  40f2a0:	3b01      	subs	r3, #1
    while(len) {
  40f2a2:	2b00      	cmp	r3, #0
  40f2a4:	d1f8      	bne.n	40f298 <shadow_draw_corner_buf+0x18>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40f2a6:	4651      	mov	r1, sl
  40f2a8:	f1ba 0f00 	cmp.w	sl, #0
  40f2ac:	db36      	blt.n	40f31c <shadow_draw_corner_buf+0x9c>
  40f2ae:	f3c1 014f 	ubfx	r1, r1, #1, #16
  40f2b2:	188b      	adds	r3, r1, r2
  40f2b4:	b29b      	uxth	r3, r3
  40f2b6:	f01a 0401 	ands.w	r4, sl, #1
  40f2ba:	9403      	str	r4, [sp, #12]
  40f2bc:	bf0c      	ite	eq
  40f2be:	2401      	moveq	r4, #1
  40f2c0:	2400      	movne	r4, #0
  40f2c2:	1b1b      	subs	r3, r3, r4
  40f2c4:	3b01      	subs	r3, #1
  40f2c6:	b29b      	uxth	r3, r3
  40f2c8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
  40f2cc:	3101      	adds	r1, #1
  40f2ce:	b289      	uxth	r1, r1
  40f2d0:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f2d4:	8884      	ldrh	r4, [r0, #4]
  40f2d6:	8806      	ldrh	r6, [r0, #0]
  40f2d8:	1ba4      	subs	r4, r4, r6
  40f2da:	b2a4      	uxth	r4, r4
  40f2dc:	3401      	adds	r4, #1
  40f2de:	b2a4      	uxth	r4, r4
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
  40f2e0:	1b1b      	subs	r3, r3, r4
  40f2e2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f2e6:	88c3      	ldrh	r3, [r0, #6]
  40f2e8:	8840      	ldrh	r0, [r0, #2]
  40f2ea:	1a1b      	subs	r3, r3, r0
  40f2ec:	b29b      	uxth	r3, r3
  40f2ee:	3301      	adds	r3, #1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
  40f2f0:	fa11 f183 	uxtah	r1, r1, r3
  40f2f4:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
  40f2f8:	2300      	movs	r3, #0
  40f2fa:	a90c      	add	r1, sp, #48	; 0x30
  40f2fc:	a805      	add	r0, sp, #20
  40f2fe:	4c4d      	ldr	r4, [pc, #308]	; (40f434 <shadow_draw_corner_buf+0x1b4>)
  40f300:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
  40f302:	f1ba 0f01 	cmp.w	sl, #1
  40f306:	d00c      	beq.n	40f322 <shadow_draw_corner_buf+0xa2>
    else sw = sw_ori >> 1;
  40f308:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
  40f30c:	46a9      	mov	r9, r5
  40f30e:	4628      	mov	r0, r5
  40f310:	4b49      	ldr	r3, [pc, #292]	; (40f438 <shadow_draw_corner_buf+0x1b8>)
  40f312:	4798      	blx	r3
  40f314:	4604      	mov	r4, r0
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
  40f316:	4646      	mov	r6, r8
    for(y = 0; y < size; y++) {
  40f318:	2700      	movs	r7, #0
  40f31a:	e00d      	b.n	40f338 <shadow_draw_corner_buf+0xb8>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40f31c:	f10a 0101 	add.w	r1, sl, #1
  40f320:	e7c5      	b.n	40f2ae <shadow_draw_corner_buf+0x2e>
    if(sw_ori == 1) sw = 1;
  40f322:	f04f 0a01 	mov.w	sl, #1
  40f326:	e7f1      	b.n	40f30c <shadow_draw_corner_buf+0x8c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  40f328:	ea4f 0149 	mov.w	r1, r9, lsl #1
  40f32c:	4630      	mov	r0, r6
  40f32e:	4b43      	ldr	r3, [pc, #268]	; (40f43c <shadow_draw_corner_buf+0x1bc>)
  40f330:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40f332:	eb06 0649 	add.w	r6, r6, r9, lsl #1
    for(y = 0; y < size; y++) {
  40f336:	3701      	adds	r7, #1
  40f338:	42af      	cmp	r7, r5
  40f33a:	da2c      	bge.n	40f396 <shadow_draw_corner_buf+0x116>
        _lv_memset_ff(mask_line, size);
  40f33c:	4649      	mov	r1, r9
  40f33e:	4620      	mov	r0, r4
  40f340:	4b3f      	ldr	r3, [pc, #252]	; (40f440 <shadow_draw_corner_buf+0x1c0>)
  40f342:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  40f344:	ab0e      	add	r3, sp, #56	; 0x38
  40f346:	f853 bd24 	ldr.w	fp, [r3, #-36]!
  40f34a:	9300      	str	r3, [sp, #0]
  40f34c:	b22b      	sxth	r3, r5
  40f34e:	b23a      	sxth	r2, r7
  40f350:	2100      	movs	r1, #0
  40f352:	4620      	mov	r0, r4
  40f354:	47d8      	blx	fp
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40f356:	2800      	cmp	r0, #0
  40f358:	d0e6      	beq.n	40f328 <shadow_draw_corner_buf+0xa8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40f35a:	7823      	ldrb	r3, [r4, #0]
  40f35c:	019b      	lsls	r3, r3, #6
  40f35e:	4650      	mov	r0, sl
  40f360:	fb93 f3fa 	sdiv	r3, r3, sl
  40f364:	8033      	strh	r3, [r6, #0]
            for(i = 1; i < size; i++) {
  40f366:	2301      	movs	r3, #1
  40f368:	e007      	b.n	40f37a <shadow_draw_corner_buf+0xfa>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40f36a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40f36e:	441a      	add	r2, r3
  40f370:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
  40f374:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
            for(i = 1; i < size; i++) {
  40f378:	3301      	adds	r3, #1
  40f37a:	42ab      	cmp	r3, r5
  40f37c:	dad9      	bge.n	40f332 <shadow_draw_corner_buf+0xb2>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40f37e:	5ce2      	ldrb	r2, [r4, r3]
  40f380:	18e1      	adds	r1, r4, r3
  40f382:	f811 1c01 	ldrb.w	r1, [r1, #-1]
  40f386:	428a      	cmp	r2, r1
  40f388:	d0ef      	beq.n	40f36a <shadow_draw_corner_buf+0xea>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40f38a:	0192      	lsls	r2, r2, #6
  40f38c:	fb92 f2f0 	sdiv	r2, r2, r0
  40f390:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
  40f394:	e7f0      	b.n	40f378 <shadow_draw_corner_buf+0xf8>
    _lv_mem_buf_release(mask_line);
  40f396:	4620      	mov	r0, r4
  40f398:	4b2a      	ldr	r3, [pc, #168]	; (40f444 <shadow_draw_corner_buf+0x1c4>)
  40f39a:	4798      	blx	r3
    if(sw == 1) {
  40f39c:	f1ba 0f01 	cmp.w	sl, #1
  40f3a0:	d021      	beq.n	40f3e6 <shadow_draw_corner_buf+0x166>
    shadow_blur_corner(size, sw, sh_buf);
  40f3a2:	b22c      	sxth	r4, r5
  40f3a4:	4642      	mov	r2, r8
  40f3a6:	4651      	mov	r1, sl
  40f3a8:	4620      	mov	r0, r4
  40f3aa:	4b27      	ldr	r3, [pc, #156]	; (40f448 <shadow_draw_corner_buf+0x1c8>)
  40f3ac:	4798      	blx	r3
    sw += sw_ori & 1;
  40f3ae:	9b03      	ldr	r3, [sp, #12]
  40f3b0:	4453      	add	r3, sl
  40f3b2:	b219      	sxth	r1, r3
    if(sw > 1) {
  40f3b4:	2901      	cmp	r1, #1
  40f3b6:	dd32      	ble.n	40f41e <shadow_draw_corner_buf+0x19e>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40f3b8:	f8b8 3000 	ldrh.w	r3, [r8]
  40f3bc:	019b      	lsls	r3, r3, #6
  40f3be:	460e      	mov	r6, r1
  40f3c0:	fb93 f3f1 	sdiv	r3, r3, r1
  40f3c4:	f8a8 3000 	strh.w	r3, [r8]
        for(i = 1; i < (uint32_t) size * size; i++) {
  40f3c8:	2301      	movs	r3, #1
  40f3ca:	e011      	b.n	40f3f0 <shadow_draw_corner_buf+0x170>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
  40f3cc:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40f3d0:	0992      	lsrs	r2, r2, #6
  40f3d2:	f808 2003 	strb.w	r2, [r8, r3]
        for(i = 0; i < size * size; i++) {
  40f3d6:	3301      	adds	r3, #1
  40f3d8:	fb05 f205 	mul.w	r2, r5, r5
  40f3dc:	4293      	cmp	r3, r2
  40f3de:	dbf5      	blt.n	40f3cc <shadow_draw_corner_buf+0x14c>
}
  40f3e0:	b00f      	add	sp, #60	; 0x3c
  40f3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f3e6:	2300      	movs	r3, #0
  40f3e8:	e7f6      	b.n	40f3d8 <shadow_draw_corner_buf+0x158>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  40f3ea:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
        for(i = 1; i < (uint32_t) size * size; i++) {
  40f3ee:	3301      	adds	r3, #1
  40f3f0:	fb09 f209 	mul.w	r2, r9, r9
  40f3f4:	4293      	cmp	r3, r2
  40f3f6:	d20e      	bcs.n	40f416 <shadow_draw_corner_buf+0x196>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  40f3f8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40f3fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40f400:	4418      	add	r0, r3
  40f402:	f838 0010 	ldrh.w	r0, [r8, r0, lsl #1]
  40f406:	4282      	cmp	r2, r0
  40f408:	d0ef      	beq.n	40f3ea <shadow_draw_corner_buf+0x16a>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40f40a:	0192      	lsls	r2, r2, #6
  40f40c:	fb92 f2f6 	sdiv	r2, r2, r6
  40f410:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
  40f414:	e7eb      	b.n	40f3ee <shadow_draw_corner_buf+0x16e>
        shadow_blur_corner(size, sw, sh_buf);
  40f416:	4642      	mov	r2, r8
  40f418:	4620      	mov	r0, r4
  40f41a:	4b0b      	ldr	r3, [pc, #44]	; (40f448 <shadow_draw_corner_buf+0x1c8>)
  40f41c:	4798      	blx	r3
        for(i = 1; i < (uint32_t) size * size; i++) {
  40f41e:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
  40f420:	fb05 f205 	mul.w	r2, r5, r5
  40f424:	4293      	cmp	r3, r2
  40f426:	dadb      	bge.n	40f3e0 <shadow_draw_corner_buf+0x160>
        res_buf[x] = sh_buf[x];
  40f428:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40f42c:	f808 2003 	strb.w	r2, [r8, r3]
    for(x = 0; x < size * size; x++) {
  40f430:	3301      	adds	r3, #1
  40f432:	e7f5      	b.n	40f420 <shadow_draw_corner_buf+0x1a0>
  40f434:	0040f0ad 	.word	0x0040f0ad
  40f438:	00415b15 	.word	0x00415b15
  40f43c:	00415ca1 	.word	0x00415ca1
  40f440:	00415cf9 	.word	0x00415cf9
  40f444:	004158c5 	.word	0x004158c5
  40f448:	0040f111 	.word	0x0040f111

0040f44c <draw_shadow>:
{
  40f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f450:	b0a7      	sub	sp, #156	; 0x9c
    if(dsc->shadow_width == 0) return;
  40f452:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
  40f456:	2c00      	cmp	r4, #0
  40f458:	f000 83f0 	beq.w	40fc3c <draw_shadow+0x7f0>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
  40f45c:	f892 702a 	ldrb.w	r7, [r2, #42]	; 0x2a
  40f460:	2f02      	cmp	r7, #2
  40f462:	f240 83eb 	bls.w	40fc3c <draw_shadow+0x7f0>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40f466:	2c01      	cmp	r4, #1
  40f468:	d07b      	beq.n	40f562 <draw_shadow+0x116>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
  40f46a:	8806      	ldrh	r6, [r0, #0]
  40f46c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
  40f46e:	441e      	add	r6, r3
  40f470:	b2b6      	uxth	r6, r6
  40f472:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
  40f476:	eba6 060e 	sub.w	r6, r6, lr
  40f47a:	b2b6      	uxth	r6, r6
  40f47c:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
  40f480:	8885      	ldrh	r5, [r0, #4]
  40f482:	441d      	add	r5, r3
  40f484:	fa1e f585 	uxtah	r5, lr, r5
  40f488:	b2ad      	uxth	r5, r5
  40f48a:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
  40f48e:	8843      	ldrh	r3, [r0, #2]
  40f490:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
  40f494:	4463      	add	r3, ip
  40f496:	b29b      	uxth	r3, r3
  40f498:	eba3 030e 	sub.w	r3, r3, lr
  40f49c:	b29b      	uxth	r3, r3
  40f49e:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
  40f4a2:	f8b0 8006 	ldrh.w	r8, [r0, #6]
  40f4a6:	44c4      	add	ip, r8
  40f4a8:	fa1e fe8c 	uxtah	lr, lr, ip
  40f4ac:	fa1f fe8e 	uxth.w	lr, lr
  40f4b0:	f8ad e096 	strh.w	lr, [sp, #150]	; 0x96
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  40f4b4:	46a0      	mov	r8, r4
  40f4b6:	2c00      	cmp	r4, #0
  40f4b8:	db5c      	blt.n	40f574 <draw_shadow+0x128>
  40f4ba:	ea4f 0868 	mov.w	r8, r8, asr #1
  40f4be:	f1c8 0800 	rsb	r8, r8, #0
  40f4c2:	fa1f f888 	uxth.w	r8, r8
  40f4c6:	eb06 0c08 	add.w	ip, r6, r8
  40f4ca:	fa1f fc8c 	uxth.w	ip, ip
  40f4ce:	f10c 3cff 	add.w	ip, ip, #4294967295
  40f4d2:	f8ad c088 	strh.w	ip, [sp, #136]	; 0x88
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  40f4d6:	46a4      	mov	ip, r4
  40f4d8:	2c00      	cmp	r4, #0
  40f4da:	db4e      	blt.n	40f57a <draw_shadow+0x12e>
  40f4dc:	f3cc 0c4f 	ubfx	ip, ip, #1, #16
  40f4e0:	4465      	add	r5, ip
  40f4e2:	b2ad      	uxth	r5, r5
  40f4e4:	3501      	adds	r5, #1
  40f4e6:	f8ad 508c 	strh.w	r5, [sp, #140]	; 0x8c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
  40f4ea:	eb03 0608 	add.w	r6, r3, r8
  40f4ee:	b2b6      	uxth	r6, r6
  40f4f0:	3e01      	subs	r6, #1
  40f4f2:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
  40f4f6:	eb0e 030c 	add.w	r3, lr, ip
  40f4fa:	b29b      	uxth	r3, r3
  40f4fc:	3301      	adds	r3, #1
  40f4fe:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40f502:	2ffd      	cmp	r7, #253	; 0xfd
  40f504:	d900      	bls.n	40f508 <draw_shadow+0xbc>
  40f506:	27ff      	movs	r7, #255	; 0xff
  40f508:	4615      	mov	r5, r2
  40f50a:	4688      	mov	r8, r1
  40f50c:	9104      	str	r1, [sp, #16]
  40f50e:	4681      	mov	r9, r0
  40f510:	9009      	str	r0, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40f512:	4b9a      	ldr	r3, [pc, #616]	; (40f77c <draw_shadow+0x330>)
  40f514:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40f516:	4b9a      	ldr	r3, [pc, #616]	; (40f780 <draw_shadow+0x334>)
  40f518:	4798      	blx	r3
  40f51a:	4606      	mov	r6, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
  40f51c:	4642      	mov	r2, r8
  40f51e:	a922      	add	r1, sp, #136	; 0x88
  40f520:	a820      	add	r0, sp, #128	; 0x80
  40f522:	4b98      	ldr	r3, [pc, #608]	; (40f784 <draw_shadow+0x338>)
  40f524:	4798      	blx	r3
    if(is_common == false) return;
  40f526:	9006      	str	r0, [sp, #24]
  40f528:	2800      	cmp	r0, #0
  40f52a:	f000 8387 	beq.w	40fc3c <draw_shadow+0x7f0>
    draw_area.x1 -= disp_area->x1;
  40f52e:	8a31      	ldrh	r1, [r6, #16]
  40f530:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  40f534:	1a5b      	subs	r3, r3, r1
  40f536:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  40f53a:	8a72      	ldrh	r2, [r6, #18]
  40f53c:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  40f540:	1a9b      	subs	r3, r3, r2
  40f542:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  40f546:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40f54a:	1a5b      	subs	r3, r3, r1
  40f54c:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  40f550:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  40f554:	1a9b      	subs	r3, r3, r2
  40f556:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    const uint8_t * s8 = (const uint8_t *)src;
  40f55a:	4649      	mov	r1, r9
    uint8_t * d8 = (uint8_t *)dst;
  40f55c:	aa1e      	add	r2, sp, #120	; 0x78
  40f55e:	2308      	movs	r3, #8
  40f560:	e013      	b.n	40f58a <draw_shadow+0x13e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40f562:	6a53      	ldr	r3, [r2, #36]	; 0x24
  40f564:	2b00      	cmp	r3, #0
  40f566:	d180      	bne.n	40f46a <draw_shadow+0x1e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
  40f568:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
  40f56c:	2b00      	cmp	r3, #0
  40f56e:	f73f af7c 	bgt.w	40f46a <draw_shadow+0x1e>
  40f572:	e363      	b.n	40fc3c <draw_shadow+0x7f0>
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  40f574:	f104 0801 	add.w	r8, r4, #1
  40f578:	e79f      	b.n	40f4ba <draw_shadow+0x6e>
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  40f57a:	f104 0c01 	add.w	ip, r4, #1
  40f57e:	e7ad      	b.n	40f4dc <draw_shadow+0x90>
        *d8 = *s8;
  40f580:	f811 0b01 	ldrb.w	r0, [r1], #1
  40f584:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40f588:	3b01      	subs	r3, #1
    while(len) {
  40f58a:	2b00      	cmp	r3, #0
  40f58c:	d1f8      	bne.n	40f580 <draw_shadow+0x134>
    bg_coords.x1 += 1;
  40f58e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
  40f592:	3201      	adds	r2, #1
  40f594:	b296      	uxth	r6, r2
  40f596:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    bg_coords.y1 += 1;
  40f59a:	f8bd 007a 	ldrh.w	r0, [sp, #122]	; 0x7a
  40f59e:	3001      	adds	r0, #1
  40f5a0:	b280      	uxth	r0, r0
  40f5a2:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    bg_coords.x2 -= 1;
  40f5a6:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
  40f5aa:	3a01      	subs	r2, #1
  40f5ac:	b292      	uxth	r2, r2
  40f5ae:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
    bg_coords.y2 -= 1;
  40f5b2:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
  40f5b6:	3b01      	subs	r3, #1
  40f5b8:	b29b      	uxth	r3, r3
  40f5ba:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    int32_t r_bg = dsc->radius;
  40f5be:	f9b5 1000 	ldrsh.w	r1, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f5c2:	1b92      	subs	r2, r2, r6
  40f5c4:	b292      	uxth	r2, r2
  40f5c6:	3201      	adds	r2, #1
  40f5c8:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f5ca:	1a1e      	subs	r6, r3, r0
  40f5cc:	b2b6      	uxth	r6, r6
  40f5ce:	3601      	adds	r6, #1
  40f5d0:	b236      	sxth	r6, r6
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
  40f5d2:	42b2      	cmp	r2, r6
  40f5d4:	da00      	bge.n	40f5d8 <draw_shadow+0x18c>
  40f5d6:	4616      	mov	r6, r2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
  40f5d8:	1076      	asrs	r6, r6, #1
  40f5da:	42b1      	cmp	r1, r6
  40f5dc:	dc00      	bgt.n	40f5e0 <draw_shadow+0x194>
    int32_t r_bg = dsc->radius;
  40f5de:	460e      	mov	r6, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f5e0:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
  40f5e4:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
  40f5e8:	1ad2      	subs	r2, r2, r3
  40f5ea:	b292      	uxth	r2, r2
  40f5ec:	3201      	adds	r2, #1
  40f5ee:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f5f0:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  40f5f4:	f8bd 0092 	ldrh.w	r0, [sp, #146]	; 0x92
  40f5f8:	1a1b      	subs	r3, r3, r0
  40f5fa:	b29b      	uxth	r3, r3
  40f5fc:	3301      	adds	r3, #1
  40f5fe:	fa0f f883 	sxth.w	r8, r3
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
  40f602:	4590      	cmp	r8, r2
  40f604:	dd00      	ble.n	40f608 <draw_shadow+0x1bc>
  40f606:	4690      	mov	r8, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
  40f608:	ea4f 0868 	mov.w	r8, r8, asr #1
  40f60c:	4541      	cmp	r1, r8
  40f60e:	dc00      	bgt.n	40f612 <draw_shadow+0x1c6>
    int32_t r_sh = dsc->radius;
  40f610:	4688      	mov	r8, r1
    int32_t corner_size = sw  + r_sh;
  40f612:	4444      	add	r4, r8
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
  40f614:	fb04 f004 	mul.w	r0, r4, r4
  40f618:	0040      	lsls	r0, r0, #1
  40f61a:	4b5b      	ldr	r3, [pc, #364]	; (40f788 <draw_shadow+0x33c>)
  40f61c:	4798      	blx	r3
  40f61e:	4601      	mov	r1, r0
  40f620:	9007      	str	r0, [sp, #28]
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
  40f622:	fa0f f388 	sxth.w	r3, r8
  40f626:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
  40f62a:	a824      	add	r0, sp, #144	; 0x90
  40f62c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 40f798 <draw_shadow+0x34c>
  40f630:	47c0      	blx	r8
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  40f632:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
  40f636:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  40f63a:	1a9b      	subs	r3, r3, r2
  40f63c:	b29b      	uxth	r3, r3
  40f63e:	3301      	adds	r3, #1
  40f640:	b21b      	sxth	r3, r3
  40f642:	2b00      	cmp	r3, #0
  40f644:	db21      	blt.n	40f68a <draw_shadow+0x23e>
  40f646:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40f64a:	b29b      	uxth	r3, r3
  40f64c:	930d      	str	r3, [sp, #52]	; 0x34
  40f64e:	fa0f fb83 	sxth.w	fp, r3
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  40f652:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f656:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  40f65a:	1a9b      	subs	r3, r3, r2
  40f65c:	b29b      	uxth	r3, r3
  40f65e:	3301      	adds	r3, #1
  40f660:	b21b      	sxth	r3, r3
  40f662:	2b00      	cmp	r3, #0
  40f664:	db13      	blt.n	40f68e <draw_shadow+0x242>
  40f666:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40f66a:	b29b      	uxth	r3, r3
  40f66c:	930e      	str	r3, [sp, #56]	; 0x38
  40f66e:	b21b      	sxth	r3, r3
  40f670:	930c      	str	r3, [sp, #48]	; 0x30
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  40f672:	4b46      	ldr	r3, [pc, #280]	; (40f78c <draw_shadow+0x340>)
  40f674:	4798      	blx	r3
  40f676:	b960      	cbnz	r0, 40f692 <draw_shadow+0x246>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  40f678:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40f67a:	2b00      	cmp	r3, #0
  40f67c:	d17a      	bne.n	40f774 <draw_shadow+0x328>
    else if(dsc->shadow_spread != 0) simple_mode = false;
  40f67e:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  40f682:	b143      	cbz	r3, 40f696 <draw_shadow+0x24a>
  40f684:	2300      	movs	r3, #0
  40f686:	9306      	str	r3, [sp, #24]
  40f688:	e005      	b.n	40f696 <draw_shadow+0x24a>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  40f68a:	3301      	adds	r3, #1
  40f68c:	e7db      	b.n	40f646 <draw_shadow+0x1fa>
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  40f68e:	3301      	adds	r3, #1
  40f690:	e7e9      	b.n	40f666 <draw_shadow+0x21a>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  40f692:	2300      	movs	r3, #0
  40f694:	9306      	str	r3, [sp, #24]
  40f696:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  40f69a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40f69e:	1ac0      	subs	r0, r0, r3
  40f6a0:	b280      	uxth	r0, r0
  40f6a2:	3001      	adds	r0, #1
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
  40f6a4:	b200      	sxth	r0, r0
  40f6a6:	4b38      	ldr	r3, [pc, #224]	; (40f788 <draw_shadow+0x33c>)
  40f6a8:	4798      	blx	r3
  40f6aa:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
  40f6ac:	b233      	sxth	r3, r6
  40f6ae:	461a      	mov	r2, r3
  40f6b0:	9308      	str	r3, [sp, #32]
  40f6b2:	2301      	movs	r3, #1
  40f6b4:	a91e      	add	r1, sp, #120	; 0x78
  40f6b6:	a817      	add	r0, sp, #92	; 0x5c
  40f6b8:	4e35      	ldr	r6, [pc, #212]	; (40f790 <draw_shadow+0x344>)
  40f6ba:	47b0      	blx	r6
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  40f6bc:	2100      	movs	r1, #0
  40f6be:	a817      	add	r0, sp, #92	; 0x5c
  40f6c0:	4b34      	ldr	r3, [pc, #208]	; (40f794 <draw_shadow+0x348>)
  40f6c2:	4798      	blx	r3
  40f6c4:	900b      	str	r0, [sp, #44]	; 0x2c
    a.x2 = sh_area.x2;
  40f6c6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  40f6ca:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  40f6ce:	b29b      	uxth	r3, r3
  40f6d0:	b2a6      	uxth	r6, r4
  40f6d2:	1b9b      	subs	r3, r3, r6
  40f6d4:	b29b      	uxth	r3, r3
  40f6d6:	3301      	adds	r3, #1
  40f6d8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1;
  40f6dc:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  40f6e0:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  40f6e4:	fa16 f383 	uxtah	r3, r6, r3
  40f6e8:	b29b      	uxth	r3, r3
  40f6ea:	3b01      	subs	r3, #1
  40f6ec:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
  40f6f0:	9a04      	ldr	r2, [sp, #16]
  40f6f2:	a915      	add	r1, sp, #84	; 0x54
  40f6f4:	a813      	add	r0, sp, #76	; 0x4c
  40f6f6:	4b23      	ldr	r3, [pc, #140]	; (40f784 <draw_shadow+0x338>)
  40f6f8:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40f6fa:	2800      	cmp	r0, #0
  40f6fc:	d14e      	bne.n	40f79c <draw_shadow+0x350>
    a.x2 = sh_area.x2;
  40f6fe:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  40f702:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  40f706:	b29b      	uxth	r3, r3
  40f708:	1b9b      	subs	r3, r3, r6
  40f70a:	b29b      	uxth	r3, r3
  40f70c:	3301      	adds	r3, #1
  40f70e:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y2 - corner_size + 1;
  40f712:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  40f716:	b293      	uxth	r3, r2
  40f718:	1b9b      	subs	r3, r3, r6
  40f71a:	b29b      	uxth	r3, r3
  40f71c:	3301      	adds	r3, #1
  40f71e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  40f722:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40f726:	9a04      	ldr	r2, [sp, #16]
  40f728:	a915      	add	r1, sp, #84	; 0x54
  40f72a:	a813      	add	r0, sp, #76	; 0x4c
  40f72c:	4b15      	ldr	r3, [pc, #84]	; (40f784 <draw_shadow+0x338>)
  40f72e:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40f730:	2800      	cmp	r0, #0
  40f732:	f040 80b0 	bne.w	40f896 <draw_shadow+0x44a>
    a.x2 = sh_area.x2;
  40f736:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  40f73a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  40f73e:	b29b      	uxth	r3, r3
  40f740:	1b9b      	subs	r3, r3, r6
  40f742:	b29b      	uxth	r3, r3
  40f744:	3301      	adds	r3, #1
  40f746:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1 + corner_size;
  40f74a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  40f74e:	4433      	add	r3, r6
  40f750:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  40f754:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  40f758:	1b9b      	subs	r3, r3, r6
  40f75a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40f75e:	9a04      	ldr	r2, [sp, #16]
  40f760:	a915      	add	r1, sp, #84	; 0x54
  40f762:	a813      	add	r0, sp, #76	; 0x4c
  40f764:	4b07      	ldr	r3, [pc, #28]	; (40f784 <draw_shadow+0x338>)
  40f766:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40f768:	2800      	cmp	r0, #0
  40f76a:	f040 8115 	bne.w	40f998 <draw_shadow+0x54c>
  40f76e:	9907      	ldr	r1, [sp, #28]
  40f770:	2000      	movs	r0, #0
  40f772:	e1ab      	b.n	40facc <draw_shadow+0x680>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  40f774:	2300      	movs	r3, #0
  40f776:	9306      	str	r3, [sp, #24]
  40f778:	e78d      	b.n	40f696 <draw_shadow+0x24a>
  40f77a:	bf00      	nop
  40f77c:	00408ba9 	.word	0x00408ba9
  40f780:	0041403d 	.word	0x0041403d
  40f784:	004147a1 	.word	0x004147a1
  40f788:	00415b15 	.word	0x00415b15
  40f78c:	0040ef2d 	.word	0x0040ef2d
  40f790:	0040f0ad 	.word	0x0040f0ad
  40f794:	0040ee31 	.word	0x0040ee31
  40f798:	0040f281 	.word	0x0040f281
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40f79c:	9a08      	ldr	r2, [sp, #32]
  40f79e:	a91e      	add	r1, sp, #120	; 0x78
  40f7a0:	a815      	add	r0, sp, #84	; 0x54
  40f7a2:	4ba2      	ldr	r3, [pc, #648]	; (40fa2c <draw_shadow+0x5e0>)
  40f7a4:	4798      	blx	r3
  40f7a6:	2800      	cmp	r0, #0
  40f7a8:	d1a9      	bne.n	40f6fe <draw_shadow+0x2b2>
        if(ca.y2 > h_half) ca.y2 = h_half;
  40f7aa:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  40f7ae:	459b      	cmp	fp, r3
  40f7b0:	da01      	bge.n	40f7b6 <draw_shadow+0x36a>
  40f7b2:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  40f7b6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40f7ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40f7bc:	429a      	cmp	r2, r3
  40f7be:	db03      	blt.n	40f7c8 <draw_shadow+0x37c>
  40f7c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f7c2:	3301      	adds	r3, #1
  40f7c4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f7c8:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  40f7cc:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  40f7d0:	b291      	uxth	r1, r2
  40f7d2:	1a5b      	subs	r3, r3, r1
  40f7d4:	b29b      	uxth	r3, r3
  40f7d6:	3301      	adds	r3, #1
  40f7d8:	b21b      	sxth	r3, r3
  40f7da:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f7dc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40f7e0:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  40f7e4:	b288      	uxth	r0, r1
  40f7e6:	1a1b      	subs	r3, r3, r0
  40f7e8:	b29b      	uxth	r3, r3
  40f7ea:	3301      	adds	r3, #1
  40f7ec:	b21b      	sxth	r3, r3
  40f7ee:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40f7f0:	2b00      	cmp	r3, #0
  40f7f2:	dd84      	ble.n	40f6fe <draw_shadow+0x2b2>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  40f7f4:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  40f7f8:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  40f7fc:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  40f800:	eba2 0808 	sub.w	r8, r2, r8
  40f804:	fb08 1804 	mla	r8, r8, r4, r1
  40f808:	9b07      	ldr	r3, [sp, #28]
  40f80a:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40f80c:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40f80e:	aa11      	add	r2, sp, #68	; 0x44
  40f810:	2308      	movs	r3, #8
    while(len) {
  40f812:	b12b      	cbz	r3, 40f820 <draw_shadow+0x3d4>
        *d8 = *s8;
  40f814:	f811 0b01 	ldrb.w	r0, [r1], #1
  40f818:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40f81c:	3b01      	subs	r3, #1
  40f81e:	e7f8      	b.n	40f812 <draw_shadow+0x3c6>
            fa.y2 = fa.y1;
  40f820:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40f824:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40f828:	f04f 0900 	mov.w	r9, #0
  40f82c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40f830:	46a3      	mov	fp, r4
  40f832:	46f2      	mov	sl, lr
  40f834:	e017      	b.n	40f866 <draw_shadow+0x41a>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  40f836:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40f83a:	9302      	str	r3, [sp, #8]
  40f83c:	9701      	str	r7, [sp, #4]
  40f83e:	9000      	str	r0, [sp, #0]
  40f840:	9b05      	ldr	r3, [sp, #20]
  40f842:	8c2a      	ldrh	r2, [r5, #32]
  40f844:	a911      	add	r1, sp, #68	; 0x44
  40f846:	9804      	ldr	r0, [sp, #16]
  40f848:	4c79      	ldr	r4, [pc, #484]	; (40fa30 <draw_shadow+0x5e4>)
  40f84a:	47a0      	blx	r4
                fa.y1++;
  40f84c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40f850:	3301      	adds	r3, #1
  40f852:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  40f856:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40f85a:	3301      	adds	r3, #1
  40f85c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  40f860:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  40f862:	f109 0901 	add.w	r9, r9, #1
  40f866:	45d1      	cmp	r9, sl
  40f868:	da11      	bge.n	40f88e <draw_shadow+0x442>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40f86a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f86c:	4641      	mov	r1, r8
  40f86e:	9c05      	ldr	r4, [sp, #20]
  40f870:	4620      	mov	r0, r4
  40f872:	4b70      	ldr	r3, [pc, #448]	; (40fa34 <draw_shadow+0x5e8>)
  40f874:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40f876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f878:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40f87c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40f880:	4620      	mov	r0, r4
  40f882:	4c6d      	ldr	r4, [pc, #436]	; (40fa38 <draw_shadow+0x5ec>)
  40f884:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40f886:	2801      	cmp	r0, #1
  40f888:	d1d5      	bne.n	40f836 <draw_shadow+0x3ea>
  40f88a:	2002      	movs	r0, #2
  40f88c:	e7d3      	b.n	40f836 <draw_shadow+0x3ea>
  40f88e:	465c      	mov	r4, fp
  40f890:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  40f894:	e733      	b.n	40f6fe <draw_shadow+0x2b2>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40f896:	9a08      	ldr	r2, [sp, #32]
  40f898:	a91e      	add	r1, sp, #120	; 0x78
  40f89a:	a815      	add	r0, sp, #84	; 0x54
  40f89c:	4b63      	ldr	r3, [pc, #396]	; (40fa2c <draw_shadow+0x5e0>)
  40f89e:	4798      	blx	r3
  40f8a0:	2800      	cmp	r0, #0
  40f8a2:	f47f af48 	bne.w	40f736 <draw_shadow+0x2ea>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  40f8a6:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40f8aa:	459b      	cmp	fp, r3
  40f8ac:	db03      	blt.n	40f8b6 <draw_shadow+0x46a>
  40f8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f8b0:	3301      	adds	r3, #1
  40f8b2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  40f8b6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40f8ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40f8bc:	429a      	cmp	r2, r3
  40f8be:	db03      	blt.n	40f8c8 <draw_shadow+0x47c>
  40f8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f8c2:	3301      	adds	r3, #1
  40f8c4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f8c8:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  40f8cc:	b293      	uxth	r3, r2
  40f8ce:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
  40f8d2:	1a5b      	subs	r3, r3, r1
  40f8d4:	b29b      	uxth	r3, r3
  40f8d6:	3301      	adds	r3, #1
  40f8d8:	b21b      	sxth	r3, r3
  40f8da:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f8dc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40f8e0:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  40f8e4:	b288      	uxth	r0, r1
  40f8e6:	1a1b      	subs	r3, r3, r0
  40f8e8:	b29b      	uxth	r3, r3
  40f8ea:	3301      	adds	r3, #1
  40f8ec:	b21b      	sxth	r3, r3
  40f8ee:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40f8f0:	2b00      	cmp	r3, #0
  40f8f2:	f77f af20 	ble.w	40f736 <draw_shadow+0x2ea>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  40f8f6:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  40f8fa:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  40f8fe:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  40f902:	eba8 0802 	sub.w	r8, r8, r2
  40f906:	fb08 1804 	mla	r8, r8, r4, r1
  40f90a:	9b07      	ldr	r3, [sp, #28]
  40f90c:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40f90e:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40f910:	aa11      	add	r2, sp, #68	; 0x44
  40f912:	2308      	movs	r3, #8
    while(len) {
  40f914:	b12b      	cbz	r3, 40f922 <draw_shadow+0x4d6>
        *d8 = *s8;
  40f916:	f811 0b01 	ldrb.w	r0, [r1], #1
  40f91a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40f91e:	3b01      	subs	r3, #1
  40f920:	e7f8      	b.n	40f914 <draw_shadow+0x4c8>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  40f922:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40f926:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  40f92a:	f04f 0900 	mov.w	r9, #0
  40f92e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40f932:	46a3      	mov	fp, r4
  40f934:	46f2      	mov	sl, lr
  40f936:	e017      	b.n	40f968 <draw_shadow+0x51c>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  40f938:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40f93c:	9302      	str	r3, [sp, #8]
  40f93e:	9701      	str	r7, [sp, #4]
  40f940:	9000      	str	r0, [sp, #0]
  40f942:	9b05      	ldr	r3, [sp, #20]
  40f944:	8c2a      	ldrh	r2, [r5, #32]
  40f946:	a911      	add	r1, sp, #68	; 0x44
  40f948:	9804      	ldr	r0, [sp, #16]
  40f94a:	4c39      	ldr	r4, [pc, #228]	; (40fa30 <draw_shadow+0x5e4>)
  40f94c:	47a0      	blx	r4
                fa.y1--;
  40f94e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40f952:	3b01      	subs	r3, #1
  40f954:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  40f958:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40f95c:	3b01      	subs	r3, #1
  40f95e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  40f962:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  40f964:	f109 0901 	add.w	r9, r9, #1
  40f968:	45d1      	cmp	r9, sl
  40f96a:	da11      	bge.n	40f990 <draw_shadow+0x544>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40f96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f96e:	4641      	mov	r1, r8
  40f970:	9c05      	ldr	r4, [sp, #20]
  40f972:	4620      	mov	r0, r4
  40f974:	4b2f      	ldr	r3, [pc, #188]	; (40fa34 <draw_shadow+0x5e8>)
  40f976:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40f978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f97a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40f97e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40f982:	4620      	mov	r0, r4
  40f984:	4c2c      	ldr	r4, [pc, #176]	; (40fa38 <draw_shadow+0x5ec>)
  40f986:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40f988:	2801      	cmp	r0, #1
  40f98a:	d1d5      	bne.n	40f938 <draw_shadow+0x4ec>
  40f98c:	2002      	movs	r0, #2
  40f98e:	e7d3      	b.n	40f938 <draw_shadow+0x4ec>
  40f990:	465c      	mov	r4, fp
  40f992:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  40f996:	e6ce      	b.n	40f736 <draw_shadow+0x2ea>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40f998:	9a08      	ldr	r2, [sp, #32]
  40f99a:	a91e      	add	r1, sp, #120	; 0x78
  40f99c:	a815      	add	r0, sp, #84	; 0x54
  40f99e:	4b23      	ldr	r3, [pc, #140]	; (40fa2c <draw_shadow+0x5e0>)
  40f9a0:	4798      	blx	r3
  40f9a2:	2800      	cmp	r0, #0
  40f9a4:	f47f aee3 	bne.w	40f76e <draw_shadow+0x322>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
  40f9a8:	9b06      	ldr	r3, [sp, #24]
  40f9aa:	b14b      	cbz	r3, 40f9c0 <draw_shadow+0x574>
  40f9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40f9ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  40f9b2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  40f9b6:	4293      	cmp	r3, r2
  40f9b8:	bfb8      	it	lt
  40f9ba:	4613      	movlt	r3, r2
  40f9bc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  40f9c0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40f9c4:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  40f9c8:	b291      	uxth	r1, r2
  40f9ca:	1a5b      	subs	r3, r3, r1
  40f9cc:	b29b      	uxth	r3, r3
  40f9ce:	3301      	adds	r3, #1
  40f9d0:	b21b      	sxth	r3, r3
  40f9d2:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40f9d4:	2b00      	cmp	r3, #0
  40f9d6:	f77f aeca 	ble.w	40f76e <draw_shadow+0x322>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f9da:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  40f9de:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  40f9e2:	ebaa 0a03 	sub.w	sl, sl, r3
  40f9e6:	fa1f fa8a 	uxth.w	sl, sl
  40f9ea:	f10a 0a01 	add.w	sl, sl, #1
  40f9ee:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  40f9f2:	1e63      	subs	r3, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  40f9f4:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  40f9f8:	1a52      	subs	r2, r2, r1
  40f9fa:	fb03 2304 	mla	r3, r3, r4, r2
  40f9fe:	9a07      	ldr	r2, [sp, #28]
  40fa00:	18d3      	adds	r3, r2, r3
  40fa02:	930e      	str	r3, [sp, #56]	; 0x38
    const uint8_t * s8 = (const uint8_t *)src;
  40fa04:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40fa06:	aa11      	add	r2, sp, #68	; 0x44
  40fa08:	2308      	movs	r3, #8
    while(len) {
  40fa0a:	b12b      	cbz	r3, 40fa18 <draw_shadow+0x5cc>
        *d8 = *s8;
  40fa0c:	f811 0b01 	ldrb.w	r0, [r1], #1
  40fa10:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40fa14:	3b01      	subs	r3, #1
  40fa16:	e7f8      	b.n	40fa0a <draw_shadow+0x5be>
            fa.y2 = fa.y1;
  40fa18:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fa1c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40fa20:	f04f 0800 	mov.w	r8, #0
  40fa24:	970f      	str	r7, [sp, #60]	; 0x3c
  40fa26:	46a1      	mov	r9, r4
  40fa28:	9c06      	ldr	r4, [sp, #24]
  40fa2a:	e02a      	b.n	40fa82 <draw_shadow+0x636>
  40fa2c:	00414a15 	.word	0x00414a15
  40fa30:	0040bc09 	.word	0x0040bc09
  40fa34:	0041597d 	.word	0x0041597d
  40fa38:	0040ee65 	.word	0x0040ee65
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40fa3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fa3e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40fa42:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40fa46:	9805      	ldr	r0, [sp, #20]
  40fa48:	4fbc      	ldr	r7, [pc, #752]	; (40fd3c <draw_shadow+0x8f0>)
  40fa4a:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40fa4c:	2801      	cmp	r0, #1
  40fa4e:	d023      	beq.n	40fa98 <draw_shadow+0x64c>
                _lv_blend_fill(clip, &fa,
  40fa50:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40fa54:	9302      	str	r3, [sp, #8]
  40fa56:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  40fa5a:	9301      	str	r3, [sp, #4]
  40fa5c:	9000      	str	r0, [sp, #0]
  40fa5e:	9b05      	ldr	r3, [sp, #20]
  40fa60:	8c2a      	ldrh	r2, [r5, #32]
  40fa62:	a911      	add	r1, sp, #68	; 0x44
  40fa64:	9804      	ldr	r0, [sp, #16]
  40fa66:	4fb6      	ldr	r7, [pc, #728]	; (40fd40 <draw_shadow+0x8f4>)
  40fa68:	47b8      	blx	r7
                fa.y1++;
  40fa6a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fa6e:	3301      	adds	r3, #1
  40fa70:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  40fa74:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40fa78:	3301      	adds	r3, #1
  40fa7a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40fa7e:	f108 0801 	add.w	r8, r8, #1
  40fa82:	45d0      	cmp	r8, sl
  40fa84:	da0a      	bge.n	40fa9c <draw_shadow+0x650>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40fa86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40fa88:	990e      	ldr	r1, [sp, #56]	; 0x38
  40fa8a:	9805      	ldr	r0, [sp, #20]
  40fa8c:	4bad      	ldr	r3, [pc, #692]	; (40fd44 <draw_shadow+0x8f8>)
  40fa8e:	4798      	blx	r3
                if(simple_mode) {
  40fa90:	2c00      	cmp	r4, #0
  40fa92:	d0d3      	beq.n	40fa3c <draw_shadow+0x5f0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40fa94:	2002      	movs	r0, #2
  40fa96:	e7db      	b.n	40fa50 <draw_shadow+0x604>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40fa98:	2002      	movs	r0, #2
  40fa9a:	e7d9      	b.n	40fa50 <draw_shadow+0x604>
  40fa9c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40fa9e:	464c      	mov	r4, r9
  40faa0:	e665      	b.n	40f76e <draw_shadow+0x322>
        for(x = 0; x < corner_size / 2; x++) {
  40faa2:	ebb3 0f62 	cmp.w	r3, r2, asr #1
  40faa6:	da0f      	bge.n	40fac8 <draw_shadow+0x67c>
            lv_opa_t tmp = sh_buf_tmp[x];
  40faa8:	f811 e003 	ldrb.w	lr, [r1, r3]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
  40faac:	1ae2      	subs	r2, r4, r3
  40faae:	3a01      	subs	r2, #1
  40fab0:	f811 c002 	ldrb.w	ip, [r1, r2]
  40fab4:	f801 c003 	strb.w	ip, [r1, r3]
            sh_buf_tmp[corner_size - x - 1] = tmp;
  40fab8:	f801 e002 	strb.w	lr, [r1, r2]
        for(x = 0; x < corner_size / 2; x++) {
  40fabc:	3301      	adds	r3, #1
  40fabe:	4622      	mov	r2, r4
  40fac0:	2c00      	cmp	r4, #0
  40fac2:	daee      	bge.n	40faa2 <draw_shadow+0x656>
  40fac4:	1c62      	adds	r2, r4, #1
  40fac6:	e7ec      	b.n	40faa2 <draw_shadow+0x656>
        sh_buf_tmp += corner_size;
  40fac8:	4421      	add	r1, r4
    for(y = 0; y < corner_size; y++) {
  40faca:	3001      	adds	r0, #1
  40facc:	42a0      	cmp	r0, r4
  40face:	da01      	bge.n	40fad4 <draw_shadow+0x688>
  40fad0:	2300      	movs	r3, #0
  40fad2:	e7f4      	b.n	40fabe <draw_shadow+0x672>
    a.x1 = sh_area.x1;
  40fad4:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  40fad8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  40fadc:	fa16 f383 	uxtah	r3, r6, r3
  40fae0:	b29b      	uxth	r3, r3
  40fae2:	3b01      	subs	r3, #1
  40fae4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  40fae8:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  40faec:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  40faf0:	fa16 f383 	uxtah	r3, r6, r3
  40faf4:	b29b      	uxth	r3, r3
  40faf6:	3b01      	subs	r3, #1
  40faf8:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fafc:	9a04      	ldr	r2, [sp, #16]
  40fafe:	a915      	add	r1, sp, #84	; 0x54
  40fb00:	a813      	add	r0, sp, #76	; 0x4c
  40fb02:	4b91      	ldr	r3, [pc, #580]	; (40fd48 <draw_shadow+0x8fc>)
  40fb04:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fb06:	2800      	cmp	r0, #0
  40fb08:	f040 809b 	bne.w	40fc42 <draw_shadow+0x7f6>
    a.x1 = sh_area.x1;
  40fb0c:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  40fb10:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  40fb14:	fa16 f383 	uxtah	r3, r6, r3
  40fb18:	b29b      	uxth	r3, r3
  40fb1a:	3b01      	subs	r3, #1
  40fb1c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  40fb20:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  40fb24:	b293      	uxth	r3, r2
  40fb26:	1b9b      	subs	r3, r3, r6
  40fb28:	b29b      	uxth	r3, r3
  40fb2a:	3301      	adds	r3, #1
  40fb2c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  40fb30:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fb34:	9a04      	ldr	r2, [sp, #16]
  40fb36:	a915      	add	r1, sp, #84	; 0x54
  40fb38:	a813      	add	r0, sp, #76	; 0x4c
  40fb3a:	4b83      	ldr	r3, [pc, #524]	; (40fd48 <draw_shadow+0x8fc>)
  40fb3c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fb3e:	2800      	cmp	r0, #0
  40fb40:	f040 810a 	bne.w	40fd58 <draw_shadow+0x90c>
    a.x1 = sh_area.x1;
  40fb44:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  40fb48:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  40fb4c:	fa16 f383 	uxtah	r3, r6, r3
  40fb50:	b29b      	uxth	r3, r3
  40fb52:	3b01      	subs	r3, #1
  40fb54:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  40fb58:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  40fb5c:	4433      	add	r3, r6
  40fb5e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  40fb62:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  40fb66:	1b9b      	subs	r3, r3, r6
  40fb68:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fb6c:	9a04      	ldr	r2, [sp, #16]
  40fb6e:	a915      	add	r1, sp, #84	; 0x54
  40fb70:	a813      	add	r0, sp, #76	; 0x4c
  40fb72:	4b75      	ldr	r3, [pc, #468]	; (40fd48 <draw_shadow+0x8fc>)
  40fb74:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fb76:	2800      	cmp	r0, #0
  40fb78:	f040 816c 	bne.w	40fe54 <draw_shadow+0xa08>
    a.x1 = sh_area.x1 + corner_size;
  40fb7c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40fb80:	4433      	add	r3, r6
  40fb82:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  40fb86:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  40fb8a:	1b9b      	subs	r3, r3, r6
  40fb8c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  40fb90:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  40fb94:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y1 + corner_size - 1;
  40fb98:	fa16 f383 	uxtah	r3, r6, r3
  40fb9c:	b29b      	uxth	r3, r3
  40fb9e:	3b01      	subs	r3, #1
  40fba0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fba4:	9a04      	ldr	r2, [sp, #16]
  40fba6:	a915      	add	r1, sp, #84	; 0x54
  40fba8:	a813      	add	r0, sp, #76	; 0x4c
  40fbaa:	4b67      	ldr	r3, [pc, #412]	; (40fd48 <draw_shadow+0x8fc>)
  40fbac:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fbae:	2800      	cmp	r0, #0
  40fbb0:	f040 81d1 	bne.w	40ff56 <draw_shadow+0xb0a>
    a.x1 = sh_area.x1 + corner_size;
  40fbb4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40fbb8:	4433      	add	r3, r6
  40fbba:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  40fbbe:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  40fbc2:	1b9b      	subs	r3, r3, r6
  40fbc4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  40fbc8:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  40fbcc:	b293      	uxth	r3, r2
  40fbce:	1b9b      	subs	r3, r3, r6
  40fbd0:	b29b      	uxth	r3, r3
  40fbd2:	3301      	adds	r3, #1
  40fbd4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  40fbd8:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fbdc:	9a04      	ldr	r2, [sp, #16]
  40fbde:	a915      	add	r1, sp, #84	; 0x54
  40fbe0:	a813      	add	r0, sp, #76	; 0x4c
  40fbe2:	4b59      	ldr	r3, [pc, #356]	; (40fd48 <draw_shadow+0x8fc>)
  40fbe4:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fbe6:	2800      	cmp	r0, #0
  40fbe8:	f040 8245 	bne.w	410076 <draw_shadow+0xc2a>
    a.x1 = sh_area.x1 + corner_size;
  40fbec:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40fbf0:	4433      	add	r3, r6
  40fbf2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  40fbf6:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  40fbfa:	1b9b      	subs	r3, r3, r6
  40fbfc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  40fc00:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  40fc04:	4433      	add	r3, r6
  40fc06:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  40fc0a:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  40fc0e:	1b9e      	subs	r6, r3, r6
  40fc10:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fc14:	9a04      	ldr	r2, [sp, #16]
  40fc16:	a915      	add	r1, sp, #84	; 0x54
  40fc18:	a813      	add	r0, sp, #76	; 0x4c
  40fc1a:	4b4b      	ldr	r3, [pc, #300]	; (40fd48 <draw_shadow+0x8fc>)
  40fc1c:	4798      	blx	r3
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fc1e:	9b06      	ldr	r3, [sp, #24]
  40fc20:	f083 0301 	eor.w	r3, r3, #1
  40fc24:	b2db      	uxtb	r3, r3
  40fc26:	4218      	tst	r0, r3
  40fc28:	f040 82a9 	bne.w	41017e <draw_shadow+0xd32>
    lv_draw_mask_remove_id(mask_rout_id);
  40fc2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40fc2e:	4b47      	ldr	r3, [pc, #284]	; (40fd4c <draw_shadow+0x900>)
  40fc30:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  40fc32:	9805      	ldr	r0, [sp, #20]
  40fc34:	4c46      	ldr	r4, [pc, #280]	; (40fd50 <draw_shadow+0x904>)
  40fc36:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
  40fc38:	9807      	ldr	r0, [sp, #28]
  40fc3a:	47a0      	blx	r4
}
  40fc3c:	b027      	add	sp, #156	; 0x9c
  40fc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fc42:	9a08      	ldr	r2, [sp, #32]
  40fc44:	a91e      	add	r1, sp, #120	; 0x78
  40fc46:	a815      	add	r0, sp, #84	; 0x54
  40fc48:	4b42      	ldr	r3, [pc, #264]	; (40fd54 <draw_shadow+0x908>)
  40fc4a:	4798      	blx	r3
  40fc4c:	2800      	cmp	r0, #0
  40fc4e:	f47f af5d 	bne.w	40fb0c <draw_shadow+0x6c0>
        if(ca.y2 > h_half) ca.y2 = h_half;
  40fc52:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  40fc56:	459b      	cmp	fp, r3
  40fc58:	da01      	bge.n	40fc5e <draw_shadow+0x812>
  40fc5a:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x2 > w_half) ca.x2 = w_half;
  40fc5e:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  40fc62:	990c      	ldr	r1, [sp, #48]	; 0x30
  40fc64:	4299      	cmp	r1, r3
  40fc66:	da01      	bge.n	40fc6c <draw_shadow+0x820>
  40fc68:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
  40fc6c:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  40fc70:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  40fc74:	b291      	uxth	r1, r2
  40fc76:	1a5b      	subs	r3, r3, r1
  40fc78:	b29b      	uxth	r3, r3
  40fc7a:	3301      	adds	r3, #1
  40fc7c:	b21b      	sxth	r3, r3
  40fc7e:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fc80:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40fc84:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  40fc88:	b288      	uxth	r0, r1
  40fc8a:	1a1b      	subs	r3, r3, r0
  40fc8c:	b29b      	uxth	r3, r3
  40fc8e:	3301      	adds	r3, #1
  40fc90:	b21b      	sxth	r3, r3
  40fc92:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40fc94:	2b00      	cmp	r3, #0
  40fc96:	f77f af39 	ble.w	40fb0c <draw_shadow+0x6c0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  40fc9a:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  40fc9e:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  40fca2:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  40fca6:	eba2 0808 	sub.w	r8, r2, r8
  40fcaa:	fb08 1804 	mla	r8, r8, r4, r1
  40fcae:	9b07      	ldr	r3, [sp, #28]
  40fcb0:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40fcb2:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40fcb4:	aa11      	add	r2, sp, #68	; 0x44
  40fcb6:	2308      	movs	r3, #8
    while(len) {
  40fcb8:	b12b      	cbz	r3, 40fcc6 <draw_shadow+0x87a>
        *d8 = *s8;
  40fcba:	f811 0b01 	ldrb.w	r0, [r1], #1
  40fcbe:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40fcc2:	3b01      	subs	r3, #1
  40fcc4:	e7f8      	b.n	40fcb8 <draw_shadow+0x86c>
            fa.y2 = fa.y1;
  40fcc6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fcca:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40fcce:	f04f 0900 	mov.w	r9, #0
  40fcd2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40fcd6:	46a3      	mov	fp, r4
  40fcd8:	46f2      	mov	sl, lr
  40fcda:	e017      	b.n	40fd0c <draw_shadow+0x8c0>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  40fcdc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40fce0:	9302      	str	r3, [sp, #8]
  40fce2:	9701      	str	r7, [sp, #4]
  40fce4:	9000      	str	r0, [sp, #0]
  40fce6:	9b05      	ldr	r3, [sp, #20]
  40fce8:	8c2a      	ldrh	r2, [r5, #32]
  40fcea:	a911      	add	r1, sp, #68	; 0x44
  40fcec:	9804      	ldr	r0, [sp, #16]
  40fcee:	4c14      	ldr	r4, [pc, #80]	; (40fd40 <draw_shadow+0x8f4>)
  40fcf0:	47a0      	blx	r4
                fa.y1++;
  40fcf2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fcf6:	3301      	adds	r3, #1
  40fcf8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  40fcfc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40fd00:	3301      	adds	r3, #1
  40fd02:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  40fd06:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  40fd08:	f109 0901 	add.w	r9, r9, #1
  40fd0c:	45d1      	cmp	r9, sl
  40fd0e:	da11      	bge.n	40fd34 <draw_shadow+0x8e8>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40fd10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40fd12:	4641      	mov	r1, r8
  40fd14:	9c05      	ldr	r4, [sp, #20]
  40fd16:	4620      	mov	r0, r4
  40fd18:	4b0a      	ldr	r3, [pc, #40]	; (40fd44 <draw_shadow+0x8f8>)
  40fd1a:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40fd1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fd1e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40fd22:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40fd26:	4620      	mov	r0, r4
  40fd28:	4c04      	ldr	r4, [pc, #16]	; (40fd3c <draw_shadow+0x8f0>)
  40fd2a:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40fd2c:	2801      	cmp	r0, #1
  40fd2e:	d1d5      	bne.n	40fcdc <draw_shadow+0x890>
  40fd30:	2002      	movs	r0, #2
  40fd32:	e7d3      	b.n	40fcdc <draw_shadow+0x890>
  40fd34:	465c      	mov	r4, fp
  40fd36:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  40fd3a:	e6e7      	b.n	40fb0c <draw_shadow+0x6c0>
  40fd3c:	0040ee65 	.word	0x0040ee65
  40fd40:	0040bc09 	.word	0x0040bc09
  40fd44:	0041597d 	.word	0x0041597d
  40fd48:	004147a1 	.word	0x004147a1
  40fd4c:	0040eeb5 	.word	0x0040eeb5
  40fd50:	004158c5 	.word	0x004158c5
  40fd54:	00414a15 	.word	0x00414a15
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fd58:	9a08      	ldr	r2, [sp, #32]
  40fd5a:	a91e      	add	r1, sp, #120	; 0x78
  40fd5c:	a815      	add	r0, sp, #84	; 0x54
  40fd5e:	4bb9      	ldr	r3, [pc, #740]	; (410044 <draw_shadow+0xbf8>)
  40fd60:	4798      	blx	r3
  40fd62:	2800      	cmp	r0, #0
  40fd64:	f47f aeee 	bne.w	40fb44 <draw_shadow+0x6f8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  40fd68:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40fd6c:	459b      	cmp	fp, r3
  40fd6e:	db03      	blt.n	40fd78 <draw_shadow+0x92c>
  40fd70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fd72:	3301      	adds	r3, #1
  40fd74:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x2 > w_half) ca.x2 = w_half;
  40fd78:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  40fd7c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40fd7e:	4299      	cmp	r1, r3
  40fd80:	da01      	bge.n	40fd86 <draw_shadow+0x93a>
  40fd82:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fd86:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  40fd8a:	fa1f fb82 	uxth.w	fp, r2
  40fd8e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  40fd92:	ebab 0b03 	sub.w	fp, fp, r3
  40fd96:	fa1f fb8b 	uxth.w	fp, fp
  40fd9a:	f10b 0b01 	add.w	fp, fp, #1
  40fd9e:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fda2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40fda6:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  40fdaa:	b288      	uxth	r0, r1
  40fdac:	1a1b      	subs	r3, r3, r0
  40fdae:	b29b      	uxth	r3, r3
  40fdb0:	3301      	adds	r3, #1
  40fdb2:	b21b      	sxth	r3, r3
  40fdb4:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40fdb6:	2b00      	cmp	r3, #0
  40fdb8:	f77f aec4 	ble.w	40fb44 <draw_shadow+0x6f8>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  40fdbc:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  40fdc0:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  40fdc4:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  40fdc8:	eba8 0802 	sub.w	r8, r8, r2
  40fdcc:	fb08 1804 	mla	r8, r8, r4, r1
  40fdd0:	9b07      	ldr	r3, [sp, #28]
  40fdd2:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40fdd4:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40fdd6:	aa11      	add	r2, sp, #68	; 0x44
  40fdd8:	2308      	movs	r3, #8
    while(len) {
  40fdda:	b12b      	cbz	r3, 40fde8 <draw_shadow+0x99c>
        *d8 = *s8;
  40fddc:	f811 0b01 	ldrb.w	r0, [r1], #1
  40fde0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40fde4:	3b01      	subs	r3, #1
  40fde6:	e7f8      	b.n	40fdda <draw_shadow+0x98e>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  40fde8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40fdec:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  40fdf0:	f04f 0900 	mov.w	r9, #0
  40fdf4:	46a2      	mov	sl, r4
  40fdf6:	e017      	b.n	40fe28 <draw_shadow+0x9dc>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  40fdf8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40fdfc:	9302      	str	r3, [sp, #8]
  40fdfe:	9701      	str	r7, [sp, #4]
  40fe00:	9000      	str	r0, [sp, #0]
  40fe02:	9b05      	ldr	r3, [sp, #20]
  40fe04:	8c2a      	ldrh	r2, [r5, #32]
  40fe06:	a911      	add	r1, sp, #68	; 0x44
  40fe08:	9804      	ldr	r0, [sp, #16]
  40fe0a:	4c8f      	ldr	r4, [pc, #572]	; (410048 <draw_shadow+0xbfc>)
  40fe0c:	47a0      	blx	r4
                fa.y1--;
  40fe0e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fe12:	3b01      	subs	r3, #1
  40fe14:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  40fe18:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40fe1c:	3b01      	subs	r3, #1
  40fe1e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  40fe22:	44d0      	add	r8, sl
            for(y = 0; y < h; y++) {
  40fe24:	f109 0901 	add.w	r9, r9, #1
  40fe28:	45d9      	cmp	r9, fp
  40fe2a:	da11      	bge.n	40fe50 <draw_shadow+0xa04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40fe2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40fe2e:	4641      	mov	r1, r8
  40fe30:	9c05      	ldr	r4, [sp, #20]
  40fe32:	4620      	mov	r0, r4
  40fe34:	4b85      	ldr	r3, [pc, #532]	; (41004c <draw_shadow+0xc00>)
  40fe36:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40fe38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fe3a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40fe3e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40fe42:	4620      	mov	r0, r4
  40fe44:	4c82      	ldr	r4, [pc, #520]	; (410050 <draw_shadow+0xc04>)
  40fe46:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40fe48:	2801      	cmp	r0, #1
  40fe4a:	d1d5      	bne.n	40fdf8 <draw_shadow+0x9ac>
  40fe4c:	2002      	movs	r0, #2
  40fe4e:	e7d3      	b.n	40fdf8 <draw_shadow+0x9ac>
  40fe50:	4654      	mov	r4, sl
  40fe52:	e677      	b.n	40fb44 <draw_shadow+0x6f8>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fe54:	9a08      	ldr	r2, [sp, #32]
  40fe56:	a91e      	add	r1, sp, #120	; 0x78
  40fe58:	a815      	add	r0, sp, #84	; 0x54
  40fe5a:	4b7a      	ldr	r3, [pc, #488]	; (410044 <draw_shadow+0xbf8>)
  40fe5c:	4798      	blx	r3
  40fe5e:	2800      	cmp	r0, #0
  40fe60:	f47f ae8c 	bne.w	40fb7c <draw_shadow+0x730>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
  40fe64:	9b06      	ldr	r3, [sp, #24]
  40fe66:	b14b      	cbz	r3, 40fe7c <draw_shadow+0xa30>
  40fe68:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  40fe6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40fe6e:	f9b2 2000 	ldrsh.w	r2, [r2]
  40fe72:	4293      	cmp	r3, r2
  40fe74:	bfa8      	it	ge
  40fe76:	4613      	movge	r3, r2
  40fe78:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  40fe7c:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
  40fe80:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40fe84:	b29a      	uxth	r2, r3
  40fe86:	ebab 0b02 	sub.w	fp, fp, r2
  40fe8a:	fa1f fb8b 	uxth.w	fp, fp
  40fe8e:	f10b 0b01 	add.w	fp, fp, #1
  40fe92:	fa0f fb8b 	sxth.w	fp, fp
        if(w > 0) {
  40fe96:	f1bb 0f00 	cmp.w	fp, #0
  40fe9a:	f77f ae6f 	ble.w	40fb7c <draw_shadow+0x730>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fe9e:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  40fea2:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
  40fea6:	ebaa 0a02 	sub.w	sl, sl, r2
  40feaa:	fa1f fa8a 	uxth.w	sl, sl
  40feae:	f10a 0a01 	add.w	sl, sl, #1
  40feb2:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  40feb6:	1e62      	subs	r2, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  40feb8:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  40febc:	1a59      	subs	r1, r3, r1
  40febe:	fb02 1304 	mla	r3, r2, r4, r1
  40fec2:	9a07      	ldr	r2, [sp, #28]
  40fec4:	18d3      	adds	r3, r2, r3
  40fec6:	930a      	str	r3, [sp, #40]	; 0x28
    const uint8_t * s8 = (const uint8_t *)src;
  40fec8:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40feca:	aa11      	add	r2, sp, #68	; 0x44
  40fecc:	2308      	movs	r3, #8
    while(len) {
  40fece:	b12b      	cbz	r3, 40fedc <draw_shadow+0xa90>
        *d8 = *s8;
  40fed0:	f811 0b01 	ldrb.w	r0, [r1], #1
  40fed4:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40fed8:	3b01      	subs	r3, #1
  40feda:	e7f8      	b.n	40fece <draw_shadow+0xa82>
            fa.y2 = fa.y1;
  40fedc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fee0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40fee4:	f04f 0800 	mov.w	r8, #0
  40fee8:	970c      	str	r7, [sp, #48]	; 0x30
  40feea:	46a1      	mov	r9, r4
  40feec:	9c06      	ldr	r4, [sp, #24]
  40feee:	e022      	b.n	40ff36 <draw_shadow+0xaea>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40fef0:	465b      	mov	r3, fp
  40fef2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40fef6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40fefa:	9805      	ldr	r0, [sp, #20]
  40fefc:	4f54      	ldr	r7, [pc, #336]	; (410050 <draw_shadow+0xc04>)
  40fefe:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ff00:	2801      	cmp	r0, #1
  40ff02:	d023      	beq.n	40ff4c <draw_shadow+0xb00>
                _lv_blend_fill(clip, &fa,
  40ff04:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40ff08:	9302      	str	r3, [sp, #8]
  40ff0a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  40ff0e:	9301      	str	r3, [sp, #4]
  40ff10:	9000      	str	r0, [sp, #0]
  40ff12:	9b05      	ldr	r3, [sp, #20]
  40ff14:	8c2a      	ldrh	r2, [r5, #32]
  40ff16:	a911      	add	r1, sp, #68	; 0x44
  40ff18:	9804      	ldr	r0, [sp, #16]
  40ff1a:	4f4b      	ldr	r7, [pc, #300]	; (410048 <draw_shadow+0xbfc>)
  40ff1c:	47b8      	blx	r7
                fa.y1++;
  40ff1e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40ff22:	3301      	adds	r3, #1
  40ff24:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  40ff28:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40ff2c:	3301      	adds	r3, #1
  40ff2e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40ff32:	f108 0801 	add.w	r8, r8, #1
  40ff36:	45d0      	cmp	r8, sl
  40ff38:	da0a      	bge.n	40ff50 <draw_shadow+0xb04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40ff3a:	465a      	mov	r2, fp
  40ff3c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ff3e:	9805      	ldr	r0, [sp, #20]
  40ff40:	4b42      	ldr	r3, [pc, #264]	; (41004c <draw_shadow+0xc00>)
  40ff42:	4798      	blx	r3
                if(simple_mode) {
  40ff44:	2c00      	cmp	r4, #0
  40ff46:	d0d3      	beq.n	40fef0 <draw_shadow+0xaa4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ff48:	2002      	movs	r0, #2
  40ff4a:	e7db      	b.n	40ff04 <draw_shadow+0xab8>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ff4c:	2002      	movs	r0, #2
  40ff4e:	e7d9      	b.n	40ff04 <draw_shadow+0xab8>
  40ff50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40ff52:	464c      	mov	r4, r9
  40ff54:	e612      	b.n	40fb7c <draw_shadow+0x730>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40ff56:	9a08      	ldr	r2, [sp, #32]
  40ff58:	a91e      	add	r1, sp, #120	; 0x78
  40ff5a:	a815      	add	r0, sp, #84	; 0x54
  40ff5c:	4b39      	ldr	r3, [pc, #228]	; (410044 <draw_shadow+0xbf8>)
  40ff5e:	4798      	blx	r3
  40ff60:	2800      	cmp	r0, #0
  40ff62:	f47f ae27 	bne.w	40fbb4 <draw_shadow+0x768>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
  40ff66:	9b06      	ldr	r3, [sp, #24]
  40ff68:	b14b      	cbz	r3, 40ff7e <draw_shadow+0xb32>
  40ff6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ff6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40ff70:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  40ff74:	4293      	cmp	r3, r2
  40ff76:	bfa8      	it	ge
  40ff78:	4613      	movge	r3, r2
  40ff7a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40ff7e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40ff82:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  40ff86:	1a9b      	subs	r3, r3, r2
  40ff88:	b29b      	uxth	r3, r3
  40ff8a:	3301      	adds	r3, #1
  40ff8c:	b21b      	sxth	r3, r3
  40ff8e:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40ff90:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
  40ff94:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40ff98:	b29a      	uxth	r2, r3
  40ff9a:	ebab 0b02 	sub.w	fp, fp, r2
  40ff9e:	fa1f fb8b 	uxth.w	fp, fp
  40ffa2:	f10b 0b01 	add.w	fp, fp, #1
  40ffa6:	fa0f fb8b 	sxth.w	fp, fp
        sh_buf_tmp = sh_buf + corner_size - 1;
  40ffaa:	46a6      	mov	lr, r4
  40ffac:	1e62      	subs	r2, r4, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  40ffae:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  40ffb2:	eba3 0808 	sub.w	r8, r3, r8
  40ffb6:	fb08 2804 	mla	r8, r8, r4, r2
  40ffba:	9b07      	ldr	r3, [sp, #28]
  40ffbc:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40ffbe:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40ffc0:	aa11      	add	r2, sp, #68	; 0x44
  40ffc2:	2308      	movs	r3, #8
  40ffc4:	e004      	b.n	40ffd0 <draw_shadow+0xb84>
        *d8 = *s8;
  40ffc6:	f811 0b01 	ldrb.w	r0, [r1], #1
  40ffca:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40ffce:	3b01      	subs	r3, #1
    while(len) {
  40ffd0:	2b00      	cmp	r3, #0
  40ffd2:	d1f8      	bne.n	40ffc6 <draw_shadow+0xb7a>
        fa.y2 = fa.y1;
  40ffd4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40ffd8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  40ffdc:	f04f 0900 	mov.w	r9, #0
  40ffe0:	940c      	str	r4, [sp, #48]	; 0x30
  40ffe2:	960d      	str	r6, [sp, #52]	; 0x34
  40ffe4:	9e06      	ldr	r6, [sp, #24]
  40ffe6:	46f2      	mov	sl, lr
  40ffe8:	e01e      	b.n	410028 <draw_shadow+0xbdc>
            _lv_memset(mask_buf, opa_tmp, w);
  40ffea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ffec:	9805      	ldr	r0, [sp, #20]
  40ffee:	4b19      	ldr	r3, [pc, #100]	; (410054 <draw_shadow+0xc08>)
  40fff0:	4798      	blx	r3
            if(simple_mode) {
  40fff2:	b38e      	cbz	r6, 410058 <draw_shadow+0xc0c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  40fff4:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  40fff6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40fffa:	9302      	str	r3, [sp, #8]
  40fffc:	23ff      	movs	r3, #255	; 0xff
  40fffe:	9301      	str	r3, [sp, #4]
  410000:	9000      	str	r0, [sp, #0]
  410002:	9b05      	ldr	r3, [sp, #20]
  410004:	8c2a      	ldrh	r2, [r5, #32]
  410006:	a911      	add	r1, sp, #68	; 0x44
  410008:	9804      	ldr	r0, [sp, #16]
  41000a:	4c0f      	ldr	r4, [pc, #60]	; (410048 <draw_shadow+0xbfc>)
  41000c:	47a0      	blx	r4
            fa.y1++;
  41000e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410012:	3301      	adds	r3, #1
  410014:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  410018:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41001c:	3301      	adds	r3, #1
  41001e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  410022:	44d0      	add	r8, sl
        for(y = 0; y < h; y++) {
  410024:	f109 0901 	add.w	r9, r9, #1
  410028:	45d9      	cmp	r9, fp
  41002a:	da21      	bge.n	410070 <draw_shadow+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  41002c:	f898 1000 	ldrb.w	r1, [r8]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410030:	2fff      	cmp	r7, #255	; 0xff
  410032:	bf08      	it	eq
  410034:	29ff      	cmpeq	r1, #255	; 0xff
  410036:	d0d8      	beq.n	40ffea <draw_shadow+0xb9e>
  410038:	fb01 f107 	mul.w	r1, r1, r7
  41003c:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410040:	e7d3      	b.n	40ffea <draw_shadow+0xb9e>
  410042:	bf00      	nop
  410044:	00414a15 	.word	0x00414a15
  410048:	0040bc09 	.word	0x0040bc09
  41004c:	0041597d 	.word	0x0041597d
  410050:	0040ee65 	.word	0x0040ee65
  410054:	00415c45 	.word	0x00415c45
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41005a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  41005e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410062:	9805      	ldr	r0, [sp, #20]
  410064:	4c73      	ldr	r4, [pc, #460]	; (410234 <draw_shadow+0xde8>)
  410066:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410068:	2801      	cmp	r0, #1
  41006a:	d1c4      	bne.n	40fff6 <draw_shadow+0xbaa>
  41006c:	2002      	movs	r0, #2
  41006e:	e7c2      	b.n	40fff6 <draw_shadow+0xbaa>
  410070:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  410072:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  410074:	e59e      	b.n	40fbb4 <draw_shadow+0x768>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410076:	9a08      	ldr	r2, [sp, #32]
  410078:	a91e      	add	r1, sp, #120	; 0x78
  41007a:	a815      	add	r0, sp, #84	; 0x54
  41007c:	4b6e      	ldr	r3, [pc, #440]	; (410238 <draw_shadow+0xdec>)
  41007e:	4798      	blx	r3
  410080:	2800      	cmp	r0, #0
  410082:	f47f adb3 	bne.w	40fbec <draw_shadow+0x7a0>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
  410086:	9b06      	ldr	r3, [sp, #24]
  410088:	b14b      	cbz	r3, 41009e <draw_shadow+0xc52>
  41008a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41008c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  410090:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410094:	4293      	cmp	r3, r2
  410096:	bfb8      	it	lt
  410098:	4613      	movlt	r3, r2
  41009a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41009e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  4100a2:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  4100a6:	1a9b      	subs	r3, r3, r2
  4100a8:	b29b      	uxth	r3, r3
  4100aa:	3301      	adds	r3, #1
  4100ac:	b21b      	sxth	r3, r3
  4100ae:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4100b0:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  4100b4:	fa1f f982 	uxth.w	r9, r2
  4100b8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  4100bc:	eba9 0903 	sub.w	r9, r9, r3
  4100c0:	fa1f f989 	uxth.w	r9, r9
  4100c4:	f109 0901 	add.w	r9, r9, #1
  4100c8:	fa0f f989 	sxth.w	r9, r9
        sh_buf_tmp = sh_buf + corner_size - 1;
  4100cc:	46a2      	mov	sl, r4
  4100ce:	1e61      	subs	r1, r4, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  4100d0:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  4100d4:	1a9b      	subs	r3, r3, r2
  4100d6:	fb03 1404 	mla	r4, r3, r4, r1
  4100da:	9b07      	ldr	r3, [sp, #28]
  4100dc:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4100de:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4100e0:	aa11      	add	r2, sp, #68	; 0x44
  4100e2:	2308      	movs	r3, #8
  4100e4:	e004      	b.n	4100f0 <draw_shadow+0xca4>
        *d8 = *s8;
  4100e6:	f811 0b01 	ldrb.w	r0, [r1], #1
  4100ea:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4100ee:	3b01      	subs	r3, #1
    while(len) {
  4100f0:	2b00      	cmp	r3, #0
  4100f2:	d1f8      	bne.n	4100e6 <draw_shadow+0xc9a>
        fa.y1 = fa.y2;
  4100f4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4100f8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(y = 0; y < h; y++) {
  4100fc:	f04f 0800 	mov.w	r8, #0
  410100:	f8dd b018 	ldr.w	fp, [sp, #24]
  410104:	960a      	str	r6, [sp, #40]	; 0x28
  410106:	e020      	b.n	41014a <draw_shadow+0xcfe>
            _lv_memset(mask_buf, opa_tmp, w);
  410108:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41010a:	9805      	ldr	r0, [sp, #20]
  41010c:	4b4b      	ldr	r3, [pc, #300]	; (41023c <draw_shadow+0xdf0>)
  41010e:	4798      	blx	r3
            if(simple_mode) {
  410110:	f1bb 0f00 	cmp.w	fp, #0
  410114:	d025      	beq.n	410162 <draw_shadow+0xd16>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  410116:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410118:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  41011c:	9302      	str	r3, [sp, #8]
  41011e:	23ff      	movs	r3, #255	; 0xff
  410120:	9301      	str	r3, [sp, #4]
  410122:	9000      	str	r0, [sp, #0]
  410124:	9b05      	ldr	r3, [sp, #20]
  410126:	8c2a      	ldrh	r2, [r5, #32]
  410128:	a911      	add	r1, sp, #68	; 0x44
  41012a:	9804      	ldr	r0, [sp, #16]
  41012c:	4e44      	ldr	r6, [pc, #272]	; (410240 <draw_shadow+0xdf4>)
  41012e:	47b0      	blx	r6
            fa.y1--;
  410130:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410134:	3b01      	subs	r3, #1
  410136:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2--;
  41013a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41013e:	3b01      	subs	r3, #1
  410140:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  410144:	4454      	add	r4, sl
        for(y = 0; y < h; y++) {
  410146:	f108 0801 	add.w	r8, r8, #1
  41014a:	45c8      	cmp	r8, r9
  41014c:	da15      	bge.n	41017a <draw_shadow+0xd2e>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  41014e:	7821      	ldrb	r1, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410150:	2fff      	cmp	r7, #255	; 0xff
  410152:	bf08      	it	eq
  410154:	29ff      	cmpeq	r1, #255	; 0xff
  410156:	d0d7      	beq.n	410108 <draw_shadow+0xcbc>
  410158:	fb01 f107 	mul.w	r1, r1, r7
  41015c:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410160:	e7d2      	b.n	410108 <draw_shadow+0xcbc>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410162:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410164:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410168:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41016c:	9805      	ldr	r0, [sp, #20]
  41016e:	4e31      	ldr	r6, [pc, #196]	; (410234 <draw_shadow+0xde8>)
  410170:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410172:	2801      	cmp	r0, #1
  410174:	d1d0      	bne.n	410118 <draw_shadow+0xccc>
  410176:	2002      	movs	r0, #2
  410178:	e7ce      	b.n	410118 <draw_shadow+0xccc>
  41017a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  41017c:	e536      	b.n	40fbec <draw_shadow+0x7a0>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41017e:	9a08      	ldr	r2, [sp, #32]
  410180:	a91e      	add	r1, sp, #120	; 0x78
  410182:	a815      	add	r0, sp, #84	; 0x54
  410184:	4b2c      	ldr	r3, [pc, #176]	; (410238 <draw_shadow+0xdec>)
  410186:	4798      	blx	r3
  410188:	2800      	cmp	r0, #0
  41018a:	f47f ad4f 	bne.w	40fc2c <draw_shadow+0x7e0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41018e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
  410192:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  410196:	1af6      	subs	r6, r6, r3
  410198:	b2b6      	uxth	r6, r6
  41019a:	3601      	adds	r6, #1
  41019c:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41019e:	f8bd 8052 	ldrh.w	r8, [sp, #82]	; 0x52
  4101a2:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  4101a6:	eba8 0803 	sub.w	r8, r8, r3
  4101aa:	fa1f f888 	uxth.w	r8, r8
  4101ae:	f108 0801 	add.w	r8, r8, #1
  4101b2:	fa0f f888 	sxth.w	r8, r8
    const uint8_t * s8 = (const uint8_t *)src;
  4101b6:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4101b8:	aa11      	add	r2, sp, #68	; 0x44
  4101ba:	2308      	movs	r3, #8
    while(len) {
  4101bc:	b12b      	cbz	r3, 4101ca <draw_shadow+0xd7e>
        *d8 = *s8;
  4101be:	f811 0b01 	ldrb.w	r0, [r1], #1
  4101c2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4101c6:	3b01      	subs	r3, #1
  4101c8:	e7f8      	b.n	4101bc <draw_shadow+0xd70>
        fa.y2 = fa.y1;
  4101ca:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4101ce:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  4101d2:	2400      	movs	r4, #0
  4101d4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4101d8:	e016      	b.n	410208 <draw_shadow+0xdbc>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4101da:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4101de:	9302      	str	r3, [sp, #8]
  4101e0:	23ff      	movs	r3, #255	; 0xff
  4101e2:	9301      	str	r3, [sp, #4]
  4101e4:	9000      	str	r0, [sp, #0]
  4101e6:	464b      	mov	r3, r9
  4101e8:	8c2a      	ldrh	r2, [r5, #32]
  4101ea:	a911      	add	r1, sp, #68	; 0x44
  4101ec:	9804      	ldr	r0, [sp, #16]
  4101ee:	4f14      	ldr	r7, [pc, #80]	; (410240 <draw_shadow+0xdf4>)
  4101f0:	47b8      	blx	r7
            fa.y1++;
  4101f2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4101f6:	3301      	adds	r3, #1
  4101f8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  4101fc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410200:	3301      	adds	r3, #1
  410202:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  410206:	3401      	adds	r4, #1
  410208:	4544      	cmp	r4, r8
  41020a:	f6bf ad0f 	bge.w	40fc2c <draw_shadow+0x7e0>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
  41020e:	4632      	mov	r2, r6
  410210:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
  410214:	4648      	mov	r0, r9
  410216:	4b09      	ldr	r3, [pc, #36]	; (41023c <draw_shadow+0xdf0>)
  410218:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  41021a:	4633      	mov	r3, r6
  41021c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410220:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410224:	4648      	mov	r0, r9
  410226:	4f03      	ldr	r7, [pc, #12]	; (410234 <draw_shadow+0xde8>)
  410228:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41022a:	2801      	cmp	r0, #1
  41022c:	d1d5      	bne.n	4101da <draw_shadow+0xd8e>
  41022e:	2002      	movs	r0, #2
  410230:	e7d3      	b.n	4101da <draw_shadow+0xd8e>
  410232:	bf00      	nop
  410234:	0040ee65 	.word	0x0040ee65
  410238:	00414a15 	.word	0x00414a15
  41023c:	00415c45 	.word	0x00415c45
  410240:	0040bc09 	.word	0x0040bc09

00410244 <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
  410244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410248:	b0a5      	sub	sp, #148	; 0x94
  41024a:	4683      	mov	fp, r0
  41024c:	460c      	mov	r4, r1
  41024e:	9205      	str	r2, [sp, #20]
  410250:	461e      	mov	r6, r3
  410252:	f89d 50b8 	ldrb.w	r5, [sp, #184]	; 0xb8
  410256:	f89d 70c0 	ldrb.w	r7, [sp, #192]	; 0xc0
  41025a:	f89d 80c4 	ldrb.w	r8, [sp, #196]	; 0xc4
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  41025e:	4baa      	ldr	r3, [pc, #680]	; (410508 <draw_full_border+0x2c4>)
  410260:	4798      	blx	r3
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;
  410262:	2800      	cmp	r0, #0
  410264:	d13d      	bne.n	4102e2 <draw_full_border+0x9e>
    bool simple_mode = true;
  410266:	f04f 0a01 	mov.w	sl, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41026a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
  41026e:	f8bb 2000 	ldrh.w	r2, [fp]
  410272:	1a8a      	subs	r2, r1, r2
  410274:	b292      	uxth	r2, r2
  410276:	3201      	adds	r2, #1
  410278:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41027a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
  41027e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  410282:	1ac0      	subs	r0, r0, r3
  410284:	b280      	uxth	r0, r0
  410286:	3001      	adds	r0, #1
  410288:	b200      	sxth	r0, r0

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
  41028a:	88a3      	ldrh	r3, [r4, #4]
  41028c:	1a59      	subs	r1, r3, r1
  41028e:	b289      	uxth	r1, r1
  410290:	910c      	str	r1, [sp, #48]	; 0x30
  410292:	fa0f f981 	sxth.w	r9, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410296:	8821      	ldrh	r1, [r4, #0]
  410298:	1a5b      	subs	r3, r3, r1
  41029a:	b29b      	uxth	r3, r3
  41029c:	3301      	adds	r3, #1
  41029e:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4102a0:	88e1      	ldrh	r1, [r4, #6]
  4102a2:	f8b4 e002 	ldrh.w	lr, [r4, #2]
  4102a6:	eba1 010e 	sub.w	r1, r1, lr
  4102aa:	b289      	uxth	r1, r1
  4102ac:	3101      	adds	r1, #1
  4102ae:	b209      	sxth	r1, r1
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
  4102b0:	b1d5      	cbz	r5, 4102e8 <draw_full_border+0xa4>
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
  4102b2:	4282      	cmp	r2, r0
  4102b4:	bfa8      	it	ge
  4102b6:	4602      	movge	r2, r0
        if(rin > short_side >> 1) rin = short_side >> 1;
  4102b8:	1055      	asrs	r5, r2, #1
  4102ba:	42ae      	cmp	r6, r5
  4102bc:	dc00      	bgt.n	4102c0 <draw_full_border+0x7c>
        rin = radius;
  4102be:	4635      	mov	r5, r6

        /*Get the outer area*/
        rout = rin + border_width;
  4102c0:	eb05 0309 	add.w	r3, r5, r9
  4102c4:	9306      	str	r3, [sp, #24]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  4102c6:	4b91      	ldr	r3, [pc, #580]	; (41050c <draw_full_border+0x2c8>)
  4102c8:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4102ca:	4b91      	ldr	r3, [pc, #580]	; (410510 <draw_full_border+0x2cc>)
  4102cc:	4798      	blx	r3
  4102ce:	4606      	mov	r6, r0

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
  4102d0:	9a05      	ldr	r2, [sp, #20]
  4102d2:	4621      	mov	r1, r4
  4102d4:	a822      	add	r0, sp, #136	; 0x88
  4102d6:	4b8f      	ldr	r3, [pc, #572]	; (410514 <draw_full_border+0x2d0>)
  4102d8:	4798      	blx	r3
    if(is_common == false) return;
  4102da:	b998      	cbnz	r0, 410304 <draw_full_border+0xc0>
        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
    lv_draw_mask_remove_id(mask_rout_id);
    _lv_mem_buf_release(mask_buf);
}
  4102dc:	b025      	add	sp, #148	; 0x94
  4102de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
  4102e2:	f04f 0a00 	mov.w	sl, #0
  4102e6:	e7c0      	b.n	41026a <draw_full_border+0x26>
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
  4102e8:	4299      	cmp	r1, r3
  4102ea:	bfa8      	it	ge
  4102ec:	4619      	movge	r1, r3
        if(rout > short_side >> 1) rout = short_side >> 1;
  4102ee:	104b      	asrs	r3, r1, #1
  4102f0:	9306      	str	r3, [sp, #24]
  4102f2:	429e      	cmp	r6, r3
  4102f4:	dc00      	bgt.n	4102f8 <draw_full_border+0xb4>
        rout = radius;
  4102f6:	9606      	str	r6, [sp, #24]
        if(rin < 0) rin = 0;
  4102f8:	9b06      	ldr	r3, [sp, #24]
  4102fa:	ebb3 0509 	subs.w	r5, r3, r9
  4102fe:	d5e2      	bpl.n	4102c6 <draw_full_border+0x82>
  410300:	2500      	movs	r5, #0
  410302:	e7e0      	b.n	4102c6 <draw_full_border+0x82>
    draw_area.x1 -= disp_area->x1;
  410304:	f8b6 e010 	ldrh.w	lr, [r6, #16]
  410308:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  41030c:	eba3 030e 	sub.w	r3, r3, lr
  410310:	b29a      	uxth	r2, r3
  410312:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
  410316:	8a70      	ldrh	r0, [r6, #18]
  410318:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
  41031c:	1a09      	subs	r1, r1, r0
  41031e:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    draw_area.x2 -= disp_area->x1;
  410322:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410326:	eba3 030e 	sub.w	r3, r3, lr
  41032a:	b29b      	uxth	r3, r3
  41032c:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    draw_area.y2 -= disp_area->y1;
  410330:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  410334:	1a09      	subs	r1, r1, r0
  410336:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41033a:	1a9b      	subs	r3, r3, r2
  41033c:	b29b      	uxth	r3, r3
  41033e:	3301      	adds	r3, #1
  410340:	b21b      	sxth	r3, r3
  410342:	9309      	str	r3, [sp, #36]	; 0x24
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
  410344:	2301      	movs	r3, #1
  410346:	b22a      	sxth	r2, r5
  410348:	4659      	mov	r1, fp
  41034a:	a81b      	add	r0, sp, #108	; 0x6c
  41034c:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 41052c <draw_full_border+0x2e8>
  410350:	47d8      	blx	fp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  410352:	2100      	movs	r1, #0
  410354:	a81b      	add	r0, sp, #108	; 0x6c
  410356:	4d70      	ldr	r5, [pc, #448]	; (410518 <draw_full_border+0x2d4>)
  410358:	47a8      	blx	r5
  41035a:	900d      	str	r0, [sp, #52]	; 0x34
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
  41035c:	2300      	movs	r3, #0
  41035e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  410362:	4621      	mov	r1, r4
  410364:	a814      	add	r0, sp, #80	; 0x50
  410366:	47d8      	blx	fp
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  410368:	2100      	movs	r1, #0
  41036a:	a814      	add	r0, sp, #80	; 0x50
  41036c:	47a8      	blx	r5
  41036e:	900e      	str	r0, [sp, #56]	; 0x38
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  410370:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410372:	9308      	str	r3, [sp, #32]
  410374:	4618      	mov	r0, r3
  410376:	4b69      	ldr	r3, [pc, #420]	; (41051c <draw_full_border+0x2d8>)
  410378:	4798      	blx	r3
  41037a:	9007      	str	r0, [sp, #28]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
  41037c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410380:	f109 39ff 	add.w	r9, r9, #4294967295
  410384:	464b      	mov	r3, r9
  410386:	9a06      	ldr	r2, [sp, #24]
  410388:	4591      	cmp	r9, r2
  41038a:	bfb8      	it	lt
  41038c:	4613      	movlt	r3, r2
  41038e:	4619      	mov	r1, r3
  410390:	930f      	str	r3, [sp, #60]	; 0x3c
    if(simple_mode) {
  410392:	f1ba 0f00 	cmp.w	sl, #0
  410396:	f000 8197 	beq.w	4106c8 <draw_full_border+0x484>
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
  41039a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  41039e:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  4103a2:	1ad2      	subs	r2, r2, r3
  4103a4:	188a      	adds	r2, r1, r2
  4103a6:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.x1 = area_outer->x1;
  4103a8:	f9b4 2000 	ldrsh.w	r2, [r4]
  4103ac:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  4103b0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  4103b4:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  4103b8:	f9bd 908a 	ldrsh.w	r9, [sp, #138]	; 0x8a
  4103bc:	fa1f f289 	uxth.w	r2, r9
  4103c0:	fa12 f383 	uxtah	r3, r2, r3
  4103c4:	b21b      	sxth	r3, r3
  4103c6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  4103ca:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  4103ce:	46ba      	mov	sl, r7
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  4103d0:	e02c      	b.n	41042c <draw_full_border+0x1e8>
            fill_area2.x1 = area_outer->x2 - rout + 1;
  4103d2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4103d6:	b29a      	uxth	r2, r3
  4103d8:	1b55      	subs	r5, r2, r5
  4103da:	b2ad      	uxth	r5, r5
  4103dc:	3501      	adds	r5, #1
  4103de:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  4103e2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  4103e6:	9a06      	ldr	r2, [sp, #24]
  4103e8:	1a9b      	subs	r3, r3, r2
  4103ea:	3301      	adds	r3, #1
  4103ec:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  4103f0:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  4103f4:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  4103f6:	1a9b      	subs	r3, r3, r2
  4103f8:	d46c      	bmi.n	4104d4 <draw_full_border+0x290>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  4103fa:	f8cd 8008 	str.w	r8, [sp, #8]
  4103fe:	f8cd a004 	str.w	sl, [sp, #4]
  410402:	9700      	str	r7, [sp, #0]
  410404:	9a07      	ldr	r2, [sp, #28]
  410406:	4413      	add	r3, r2
  410408:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  41040c:	a910      	add	r1, sp, #64	; 0x40
  41040e:	9805      	ldr	r0, [sp, #20]
  410410:	4d43      	ldr	r5, [pc, #268]	; (410520 <draw_full_border+0x2dc>)
  410412:	47a8      	blx	r5
            fill_area.y1++;
  410414:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410418:	3301      	adds	r3, #1
  41041a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  41041e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410422:	3301      	adds	r3, #1
  410424:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  410428:	f109 0901 	add.w	r9, r9, #1
  41042c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  41042e:	4599      	cmp	r9, r3
  410430:	dc52      	bgt.n	4104d8 <draw_full_border+0x294>
            _lv_memset_ff(mask_buf, draw_area_w);
  410432:	9908      	ldr	r1, [sp, #32]
  410434:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410438:	4658      	mov	r0, fp
  41043a:	4b3a      	ldr	r3, [pc, #232]	; (410524 <draw_full_border+0x2e0>)
  41043c:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  41043e:	8a31      	ldrh	r1, [r6, #16]
  410440:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410444:	4419      	add	r1, r3
  410446:	8a72      	ldrh	r2, [r6, #18]
  410448:	444a      	add	r2, r9
  41044a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41044c:	b212      	sxth	r2, r2
  41044e:	b209      	sxth	r1, r1
  410450:	4658      	mov	r0, fp
  410452:	4d35      	ldr	r5, [pc, #212]	; (410528 <draw_full_border+0x2e4>)
  410454:	47a8      	blx	r5
  410456:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
  410458:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41045c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  410460:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410464:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area2.x1 = area_outer->x1;
  410468:	f9b4 3000 	ldrsh.w	r3, [r4]
  41046c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  410470:	8823      	ldrh	r3, [r4, #0]
  410472:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  410476:	442b      	add	r3, r5
  410478:	b29b      	uxth	r3, r3
  41047a:	3b01      	subs	r3, #1
  41047c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  410480:	f8cd 8008 	str.w	r8, [sp, #8]
  410484:	f8cd a004 	str.w	sl, [sp, #4]
  410488:	9000      	str	r0, [sp, #0]
  41048a:	465b      	mov	r3, fp
  41048c:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410490:	a910      	add	r1, sp, #64	; 0x40
  410492:	9805      	ldr	r0, [sp, #20]
  410494:	f8df b088 	ldr.w	fp, [pc, #136]	; 410520 <draw_full_border+0x2dc>
  410498:	47d8      	blx	fp
            if(fill_area2.y2 < area_outer->y1 + border_width) {
  41049a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  41049e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  4104a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4104a4:	440b      	add	r3, r1
  4104a6:	429a      	cmp	r2, r3
  4104a8:	da93      	bge.n	4103d2 <draw_full_border+0x18e>
                fill_area2.x1 = area_outer->x1 + rout;
  4104aa:	8823      	ldrh	r3, [r4, #0]
  4104ac:	442b      	add	r3, r5
  4104ae:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  4104b2:	88a3      	ldrh	r3, [r4, #4]
  4104b4:	1b5b      	subs	r3, r3, r5
  4104b6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  4104ba:	f8cd 8008 	str.w	r8, [sp, #8]
  4104be:	f8cd a004 	str.w	sl, [sp, #4]
  4104c2:	2301      	movs	r3, #1
  4104c4:	9300      	str	r3, [sp, #0]
  4104c6:	2300      	movs	r3, #0
  4104c8:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4104cc:	a910      	add	r1, sp, #64	; 0x40
  4104ce:	9805      	ldr	r0, [sp, #20]
  4104d0:	47d8      	blx	fp
  4104d2:	e77e      	b.n	4103d2 <draw_full_border+0x18e>
            if(mask_ofs < 0) mask_ofs = 0;
  4104d4:	2300      	movs	r3, #0
  4104d6:	e790      	b.n	4103fa <draw_full_border+0x1b6>
  4104d8:	4657      	mov	r7, sl
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
  4104da:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
  4104de:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  4104e2:	eba9 0903 	sub.w	r9, r9, r3
  4104e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4104e8:	eba9 0902 	sub.w	r9, r9, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
  4104ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4104ee:	4549      	cmp	r1, r9
  4104f0:	db01      	blt.n	4104f6 <draw_full_border+0x2b2>
  4104f2:	f101 0901 	add.w	r9, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
  4104f6:	fa19 f383 	uxtah	r3, r9, r3
  4104fa:	b21b      	sxth	r3, r3
  4104fc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  410500:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  410504:	46ba      	mov	sl, r7
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  410506:	e040      	b.n	41058a <draw_full_border+0x346>
  410508:	0040ef2d 	.word	0x0040ef2d
  41050c:	00408ba9 	.word	0x00408ba9
  410510:	0041403d 	.word	0x0041403d
  410514:	004147a1 	.word	0x004147a1
  410518:	0040ee31 	.word	0x0040ee31
  41051c:	00415b15 	.word	0x00415b15
  410520:	0040bc09 	.word	0x0040bc09
  410524:	00415cf9 	.word	0x00415cf9
  410528:	0040ee65 	.word	0x0040ee65
  41052c:	0040f0ad 	.word	0x0040f0ad
            fill_area2.x1 = area_outer->x2 - rout + 1;
  410530:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  410534:	b29a      	uxth	r2, r3
  410536:	1b55      	subs	r5, r2, r5
  410538:	b2ad      	uxth	r5, r5
  41053a:	3501      	adds	r5, #1
  41053c:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  410540:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  410544:	9a06      	ldr	r2, [sp, #24]
  410546:	1a9b      	subs	r3, r3, r2
  410548:	3301      	adds	r3, #1
  41054a:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  41054e:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  410552:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  410554:	1a9b      	subs	r3, r3, r2
  410556:	d46d      	bmi.n	410634 <draw_full_border+0x3f0>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  410558:	f8cd 8008 	str.w	r8, [sp, #8]
  41055c:	f8cd a004 	str.w	sl, [sp, #4]
  410560:	9700      	str	r7, [sp, #0]
  410562:	9a07      	ldr	r2, [sp, #28]
  410564:	4413      	add	r3, r2
  410566:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  41056a:	a910      	add	r1, sp, #64	; 0x40
  41056c:	9805      	ldr	r0, [sp, #20]
  41056e:	4d79      	ldr	r5, [pc, #484]	; (410754 <draw_full_border+0x510>)
  410570:	47a8      	blx	r5
            fill_area.y1++;
  410572:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410576:	3301      	adds	r3, #1
  410578:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  41057c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410580:	3301      	adds	r3, #1
  410582:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  410586:	f109 0901 	add.w	r9, r9, #1
  41058a:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  41058e:	4599      	cmp	r9, r3
  410590:	dc52      	bgt.n	410638 <draw_full_border+0x3f4>
            _lv_memset_ff(mask_buf, draw_area_w);
  410592:	9908      	ldr	r1, [sp, #32]
  410594:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410598:	4658      	mov	r0, fp
  41059a:	4b6f      	ldr	r3, [pc, #444]	; (410758 <draw_full_border+0x514>)
  41059c:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  41059e:	8a31      	ldrh	r1, [r6, #16]
  4105a0:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4105a4:	4419      	add	r1, r3
  4105a6:	8a72      	ldrh	r2, [r6, #18]
  4105a8:	444a      	add	r2, r9
  4105aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4105ac:	b212      	sxth	r2, r2
  4105ae:	b209      	sxth	r1, r1
  4105b0:	4658      	mov	r0, fp
  4105b2:	4d6a      	ldr	r5, [pc, #424]	; (41075c <draw_full_border+0x518>)
  4105b4:	47a8      	blx	r5
  4105b6:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer->x1;
  4105b8:	f9b4 3000 	ldrsh.w	r3, [r4]
  4105bc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  4105c0:	8823      	ldrh	r3, [r4, #0]
  4105c2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  4105c6:	442b      	add	r3, r5
  4105c8:	b29b      	uxth	r3, r3
  4105ca:	3b01      	subs	r3, #1
  4105cc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
  4105d0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4105d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  4105d8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  4105dc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  4105e0:	f8cd 8008 	str.w	r8, [sp, #8]
  4105e4:	f8cd a004 	str.w	sl, [sp, #4]
  4105e8:	9000      	str	r0, [sp, #0]
  4105ea:	465b      	mov	r3, fp
  4105ec:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4105f0:	a910      	add	r1, sp, #64	; 0x40
  4105f2:	9805      	ldr	r0, [sp, #20]
  4105f4:	f8df b15c 	ldr.w	fp, [pc, #348]	; 410754 <draw_full_border+0x510>
  4105f8:	47d8      	blx	fp
            if(fill_area2.y2 > area_outer->y2 - border_width) {
  4105fa:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4105fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  410602:	990a      	ldr	r1, [sp, #40]	; 0x28
  410604:	1a5b      	subs	r3, r3, r1
  410606:	429a      	cmp	r2, r3
  410608:	dd92      	ble.n	410530 <draw_full_border+0x2ec>
                fill_area2.x1 = area_outer->x1 + rout;
  41060a:	8823      	ldrh	r3, [r4, #0]
  41060c:	442b      	add	r3, r5
  41060e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  410612:	88a3      	ldrh	r3, [r4, #4]
  410614:	1b5b      	subs	r3, r3, r5
  410616:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  41061a:	f8cd 8008 	str.w	r8, [sp, #8]
  41061e:	f8cd a004 	str.w	sl, [sp, #4]
  410622:	2301      	movs	r3, #1
  410624:	9300      	str	r3, [sp, #0]
  410626:	2300      	movs	r3, #0
  410628:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  41062c:	a910      	add	r1, sp, #64	; 0x40
  41062e:	9805      	ldr	r0, [sp, #20]
  410630:	47d8      	blx	fp
  410632:	e77d      	b.n	410530 <draw_full_border+0x2ec>
            if(mask_ofs < 0) mask_ofs = 0;
  410634:	2300      	movs	r3, #0
  410636:	e78f      	b.n	410558 <draw_full_border+0x314>
        fill_area.y1 = area_outer->y1 + corner_size + 1;
  410638:	8863      	ldrh	r3, [r4, #2]
  41063a:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  41063e:	444b      	add	r3, r9
  410640:	b29b      	uxth	r3, r3
  410642:	3301      	adds	r3, #1
  410644:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
  410648:	88e3      	ldrh	r3, [r4, #6]
  41064a:	eba3 0309 	sub.w	r3, r3, r9
  41064e:	b29b      	uxth	r3, r3
  410650:	3b01      	subs	r3, #1
  410652:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        fill_area.x1 = area_outer->x1;
  410656:	f9b4 3000 	ldrsh.w	r3, [r4]
  41065a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x1 + border_width - 1;
  41065e:	8823      	ldrh	r3, [r4, #0]
  410660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410662:	4413      	add	r3, r2
  410664:	b29b      	uxth	r3, r3
  410666:	3b01      	subs	r3, #1
  410668:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  41066c:	f8cd 8008 	str.w	r8, [sp, #8]
  410670:	f8cd a004 	str.w	sl, [sp, #4]
  410674:	2601      	movs	r6, #1
  410676:	9600      	str	r6, [sp, #0]
  410678:	2300      	movs	r3, #0
  41067a:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  41067e:	a912      	add	r1, sp, #72	; 0x48
  410680:	f8dd 9014 	ldr.w	r9, [sp, #20]
  410684:	4648      	mov	r0, r9
  410686:	4d33      	ldr	r5, [pc, #204]	; (410754 <draw_full_border+0x510>)
  410688:	47a8      	blx	r5
        fill_area.x1 = area_outer->x2 - border_width + 1;
  41068a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  41068e:	b293      	uxth	r3, r2
  410690:	990c      	ldr	r1, [sp, #48]	; 0x30
  410692:	1a5b      	subs	r3, r3, r1
  410694:	b29b      	uxth	r3, r3
  410696:	4433      	add	r3, r6
  410698:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  41069c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  4106a0:	f8cd 8008 	str.w	r8, [sp, #8]
  4106a4:	f8cd a004 	str.w	sl, [sp, #4]
  4106a8:	9600      	str	r6, [sp, #0]
  4106aa:	2300      	movs	r3, #0
  4106ac:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4106b0:	a912      	add	r1, sp, #72	; 0x48
  4106b2:	4648      	mov	r0, r9
  4106b4:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
  4106b6:	980d      	ldr	r0, [sp, #52]	; 0x34
  4106b8:	4c29      	ldr	r4, [pc, #164]	; (410760 <draw_full_border+0x51c>)
  4106ba:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
  4106bc:	980e      	ldr	r0, [sp, #56]	; 0x38
  4106be:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  4106c0:	9807      	ldr	r0, [sp, #28]
  4106c2:	4b28      	ldr	r3, [pc, #160]	; (410764 <draw_full_border+0x520>)
  4106c4:	4798      	blx	r3
  4106c6:	e609      	b.n	4102dc <draw_full_border+0x98>
        fill_area.x1 = area_outer->x1;
  4106c8:	f9b4 3000 	ldrsh.w	r3, [r4]
  4106cc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  4106d0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4106d4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  4106d8:	8a73      	ldrh	r3, [r6, #18]
  4106da:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
  4106de:	fa13 f384 	uxtah	r3, r3, r4
  4106e2:	b21b      	sxth	r3, r3
  4106e4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  4106e8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  4106ec:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4106f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  4106f4:	f8dd a014 	ldr.w	sl, [sp, #20]
  4106f8:	463d      	mov	r5, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4106fa:	e025      	b.n	410748 <draw_full_border+0x504>
            _lv_memset_ff(mask_buf, draw_area_w);
  4106fc:	9908      	ldr	r1, [sp, #32]
  4106fe:	4658      	mov	r0, fp
  410700:	4b15      	ldr	r3, [pc, #84]	; (410758 <draw_full_border+0x514>)
  410702:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410704:	8a31      	ldrh	r1, [r6, #16]
  410706:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  41070a:	4419      	add	r1, r3
  41070c:	8a72      	ldrh	r2, [r6, #18]
  41070e:	4422      	add	r2, r4
  410710:	464b      	mov	r3, r9
  410712:	b212      	sxth	r2, r2
  410714:	b209      	sxth	r1, r1
  410716:	4658      	mov	r0, fp
  410718:	4f10      	ldr	r7, [pc, #64]	; (41075c <draw_full_border+0x518>)
  41071a:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
  41071c:	f8cd 8008 	str.w	r8, [sp, #8]
  410720:	9501      	str	r5, [sp, #4]
  410722:	9000      	str	r0, [sp, #0]
  410724:	465b      	mov	r3, fp
  410726:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  41072a:	a912      	add	r1, sp, #72	; 0x48
  41072c:	4650      	mov	r0, sl
  41072e:	4f09      	ldr	r7, [pc, #36]	; (410754 <draw_full_border+0x510>)
  410730:	47b8      	blx	r7
            fill_area.y1++;
  410732:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410736:	3301      	adds	r3, #1
  410738:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  41073c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410740:	3301      	adds	r3, #1
  410742:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410746:	3401      	adds	r4, #1
  410748:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  41074c:	429c      	cmp	r4, r3
  41074e:	ddd5      	ble.n	4106fc <draw_full_border+0x4b8>
  410750:	e7b1      	b.n	4106b6 <draw_full_border+0x472>
  410752:	bf00      	nop
  410754:	0040bc09 	.word	0x0040bc09
  410758:	00415cf9 	.word	0x00415cf9
  41075c:	0040ee65 	.word	0x0040ee65
  410760:	0040eeb5 	.word	0x0040eeb5
  410764:	004158c5 	.word	0x004158c5

00410768 <draw_outline>:
    if(dsc->outline_opa <= LV_OPA_MIN) return;
  410768:	7f93      	ldrb	r3, [r2, #30]
  41076a:	2b02      	cmp	r3, #2
  41076c:	d957      	bls.n	41081e <draw_outline+0xb6>
    if(dsc->outline_width == 0) return;
  41076e:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
  410772:	2b00      	cmp	r3, #0
  410774:	d053      	beq.n	41081e <draw_outline+0xb6>
{
  410776:	b530      	push	{r4, r5, lr}
  410778:	b089      	sub	sp, #36	; 0x24
  41077a:	ac06      	add	r4, sp, #24
  41077c:	2308      	movs	r3, #8
  41077e:	e004      	b.n	41078a <draw_outline+0x22>
        *d8 = *s8;
  410780:	f810 5b01 	ldrb.w	r5, [r0], #1
  410784:	f804 5b01 	strb.w	r5, [r4], #1
        len--;
  410788:	3b01      	subs	r3, #1
    while(len) {
  41078a:	2b00      	cmp	r3, #0
  41078c:	d1f8      	bne.n	410780 <draw_outline+0x18>
    area_inner.x1 -= dsc->outline_pad;
  41078e:	8b93      	ldrh	r3, [r2, #28]
  410790:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  410794:	1ac0      	subs	r0, r0, r3
  410796:	f8ad 0018 	strh.w	r0, [sp, #24]
    area_inner.y1 -= dsc->outline_pad;
  41079a:	f8bd 001a 	ldrh.w	r0, [sp, #26]
  41079e:	1ac0      	subs	r0, r0, r3
  4107a0:	f8ad 001a 	strh.w	r0, [sp, #26]
    area_inner.x2 += dsc->outline_pad;
  4107a4:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  4107a8:	4418      	add	r0, r3
  4107aa:	f8ad 001c 	strh.w	r0, [sp, #28]
    area_inner.y2 += dsc->outline_pad;
  4107ae:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  4107b2:	4403      	add	r3, r0
  4107b4:	f8ad 301e 	strh.w	r3, [sp, #30]
    const uint8_t * s8 = (const uint8_t *)src;
  4107b8:	ac06      	add	r4, sp, #24
    uint8_t * d8 = (uint8_t *)dst;
  4107ba:	a804      	add	r0, sp, #16
  4107bc:	2308      	movs	r3, #8
  4107be:	e004      	b.n	4107ca <draw_outline+0x62>
        *d8 = *s8;
  4107c0:	f814 5b01 	ldrb.w	r5, [r4], #1
  4107c4:	f800 5b01 	strb.w	r5, [r0], #1
        len--;
  4107c8:	3b01      	subs	r3, #1
    while(len) {
  4107ca:	2b00      	cmp	r3, #0
  4107cc:	d1f8      	bne.n	4107c0 <draw_outline+0x58>
  4107ce:	4610      	mov	r0, r2
  4107d0:	460a      	mov	r2, r1
    area_outer.x1 -= dsc->outline_width;
  4107d2:	8b43      	ldrh	r3, [r0, #26]
  4107d4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4107d8:	1ae4      	subs	r4, r4, r3
  4107da:	f8ad 4010 	strh.w	r4, [sp, #16]
    area_outer.x2 += dsc->outline_width;
  4107de:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  4107e2:	441c      	add	r4, r3
  4107e4:	f8ad 4014 	strh.w	r4, [sp, #20]
    area_outer.y1 -= dsc->outline_width;
  4107e8:	f8bd 4012 	ldrh.w	r4, [sp, #18]
  4107ec:	1ae4      	subs	r4, r4, r3
  4107ee:	f8ad 4012 	strh.w	r4, [sp, #18]
    area_outer.y2 += dsc->outline_width;
  4107f2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  4107f6:	440b      	add	r3, r1
  4107f8:	f8ad 3016 	strh.w	r3, [sp, #22]
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
  4107fc:	f9b0 3000 	ldrsh.w	r3, [r0]
  410800:	7fc1      	ldrb	r1, [r0, #31]
  410802:	9103      	str	r1, [sp, #12]
  410804:	7f81      	ldrb	r1, [r0, #30]
  410806:	9102      	str	r1, [sp, #8]
  410808:	8b01      	ldrh	r1, [r0, #24]
  41080a:	f8ad 1004 	strh.w	r1, [sp, #4]
  41080e:	2101      	movs	r1, #1
  410810:	9100      	str	r1, [sp, #0]
  410812:	a904      	add	r1, sp, #16
  410814:	a806      	add	r0, sp, #24
  410816:	4c02      	ldr	r4, [pc, #8]	; (410820 <draw_outline+0xb8>)
  410818:	47a0      	blx	r4
}
  41081a:	b009      	add	sp, #36	; 0x24
  41081c:	bd30      	pop	{r4, r5, pc}
  41081e:	4770      	bx	lr
  410820:	00410245 	.word	0x00410245

00410824 <draw_border>:
    if(dsc->border_opa <= LV_OPA_MIN) return;
  410824:	7d13      	ldrb	r3, [r2, #20]
  410826:	2b02      	cmp	r3, #2
  410828:	f240 8197 	bls.w	410b5a <draw_border+0x336>
    if(dsc->border_width == 0) return;
  41082c:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  410830:	2b00      	cmp	r3, #0
  410832:	f000 8192 	beq.w	410b5a <draw_border+0x336>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
  410836:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
  41083a:	2b00      	cmp	r3, #0
  41083c:	f000 818d 	beq.w	410b5a <draw_border+0x336>
    if(dsc->border_post) return;
  410840:	7d93      	ldrb	r3, [r2, #22]
  410842:	f013 0f01 	tst.w	r3, #1
  410846:	f040 8188 	bne.w	410b5a <draw_border+0x336>
{
  41084a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41084e:	b0a3      	sub	sp, #140	; 0x8c
  410850:	8885      	ldrh	r5, [r0, #4]
  410852:	8803      	ldrh	r3, [r0, #0]
  410854:	1aed      	subs	r5, r5, r3
  410856:	b2ad      	uxth	r5, r5
  410858:	3501      	adds	r5, #1
  41085a:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41085c:	88c3      	ldrh	r3, [r0, #6]
  41085e:	8844      	ldrh	r4, [r0, #2]
  410860:	1b1b      	subs	r3, r3, r4
  410862:	b29b      	uxth	r3, r3
  410864:	3301      	adds	r3, #1
  410866:	b21b      	sxth	r3, r3
    int32_t rout = dsc->radius;
  410868:	f9b2 4000 	ldrsh.w	r4, [r2]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  41086c:	429d      	cmp	r5, r3
  41086e:	bfa8      	it	ge
  410870:	461d      	movge	r5, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
  410872:	106d      	asrs	r5, r5, #1
  410874:	42ac      	cmp	r4, r5
  410876:	dc00      	bgt.n	41087a <draw_border+0x56>
    int32_t rout = dsc->radius;
  410878:	4625      	mov	r5, r4
    const uint8_t * s8 = (const uint8_t *)src;
  41087a:	4606      	mov	r6, r0
    uint8_t * d8 = (uint8_t *)dst;
  41087c:	ac20      	add	r4, sp, #128	; 0x80
  41087e:	2308      	movs	r3, #8
  410880:	e004      	b.n	41088c <draw_border+0x68>
        *d8 = *s8;
  410882:	f816 7b01 	ldrb.w	r7, [r6], #1
  410886:	f804 7b01 	strb.w	r7, [r4], #1
        len--;
  41088a:	3b01      	subs	r3, #1
    while(len) {
  41088c:	2b00      	cmp	r3, #0
  41088e:	d1f8      	bne.n	410882 <draw_border+0x5e>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  410890:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
  410894:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
  410898:	b2b4      	uxth	r4, r6
  41089a:	f014 0f04 	tst.w	r4, #4
  41089e:	d039      	beq.n	410914 <draw_border+0xf0>
  4108a0:	8a13      	ldrh	r3, [r2, #16]
  4108a2:	443b      	add	r3, r7
  4108a4:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  4108a8:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
  4108ac:	f014 0f08 	tst.w	r4, #8
  4108b0:	d036      	beq.n	410920 <draw_border+0xfc>
  4108b2:	8a13      	ldrh	r3, [r2, #16]
  4108b4:	1afb      	subs	r3, r7, r3
  4108b6:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  4108ba:	f8bd 7082 	ldrh.w	r7, [sp, #130]	; 0x82
  4108be:	f014 0f02 	tst.w	r4, #2
  4108c2:	d033      	beq.n	41092c <draw_border+0x108>
  4108c4:	8a13      	ldrh	r3, [r2, #16]
  4108c6:	443b      	add	r3, r7
  4108c8:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  4108cc:	f8bd 7086 	ldrh.w	r7, [sp, #134]	; 0x86
  4108d0:	f014 0f01 	tst.w	r4, #1
  4108d4:	d030      	beq.n	410938 <draw_border+0x114>
  4108d6:	8a13      	ldrh	r3, [r2, #16]
  4108d8:	4692      	mov	sl, r2
  4108da:	9105      	str	r1, [sp, #20]
  4108dc:	4604      	mov	r4, r0
  4108de:	1afb      	subs	r3, r7, r3
  4108e0:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
  4108e4:	2e0f      	cmp	r6, #15
  4108e6:	d02d      	beq.n	410944 <draw_border+0x120>
        lv_opa_t opa = dsc->border_opa;
  4108e8:	f892 9014 	ldrb.w	r9, [r2, #20]
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  4108ec:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
  4108f0:	d901      	bls.n	4108f6 <draw_border+0xd2>
  4108f2:	f04f 09ff 	mov.w	r9, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  4108f6:	4b99      	ldr	r3, [pc, #612]	; (410b5c <draw_border+0x338>)
  4108f8:	4798      	blx	r3
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4108fa:	4b99      	ldr	r3, [pc, #612]	; (410b60 <draw_border+0x33c>)
  4108fc:	4798      	blx	r3
  4108fe:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
  410900:	9a05      	ldr	r2, [sp, #20]
  410902:	4621      	mov	r1, r4
  410904:	a80e      	add	r0, sp, #56	; 0x38
  410906:	4b97      	ldr	r3, [pc, #604]	; (410b64 <draw_border+0x340>)
  410908:	4798      	blx	r3
        if(is_common == false) return;
  41090a:	2800      	cmp	r0, #0
  41090c:	d12d      	bne.n	41096a <draw_border+0x146>
}
  41090e:	b023      	add	sp, #140	; 0x8c
  410910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  410914:	8a13      	ldrh	r3, [r2, #16]
  410916:	442b      	add	r3, r5
  410918:	b29b      	uxth	r3, r3
  41091a:	425b      	negs	r3, r3
  41091c:	b29b      	uxth	r3, r3
  41091e:	e7c0      	b.n	4108a2 <draw_border+0x7e>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  410920:	8a13      	ldrh	r3, [r2, #16]
  410922:	442b      	add	r3, r5
  410924:	b29b      	uxth	r3, r3
  410926:	425b      	negs	r3, r3
  410928:	b29b      	uxth	r3, r3
  41092a:	e7c3      	b.n	4108b4 <draw_border+0x90>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  41092c:	8a13      	ldrh	r3, [r2, #16]
  41092e:	442b      	add	r3, r5
  410930:	b29b      	uxth	r3, r3
  410932:	425b      	negs	r3, r3
  410934:	b29b      	uxth	r3, r3
  410936:	e7c6      	b.n	4108c6 <draw_border+0xa2>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  410938:	8a13      	ldrh	r3, [r2, #16]
  41093a:	442b      	add	r3, r5
  41093c:	b29b      	uxth	r3, r3
  41093e:	425b      	negs	r3, r3
  410940:	b29b      	uxth	r3, r3
  410942:	e7c9      	b.n	4108d8 <draw_border+0xb4>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
  410944:	f9b2 3000 	ldrsh.w	r3, [r2]
  410948:	7d52      	ldrb	r2, [r2, #21]
  41094a:	9203      	str	r2, [sp, #12]
  41094c:	f89a 2014 	ldrb.w	r2, [sl, #20]
  410950:	9202      	str	r2, [sp, #8]
  410952:	f8ba 200e 	ldrh.w	r2, [sl, #14]
  410956:	f8ad 2004 	strh.w	r2, [sp, #4]
  41095a:	2200      	movs	r2, #0
  41095c:	9200      	str	r2, [sp, #0]
  41095e:	460a      	mov	r2, r1
  410960:	4601      	mov	r1, r0
  410962:	a820      	add	r0, sp, #128	; 0x80
  410964:	4c80      	ldr	r4, [pc, #512]	; (410b68 <draw_border+0x344>)
  410966:	47a0      	blx	r4
  410968:	e7d1      	b.n	41090e <draw_border+0xea>
        draw_area.x1 -= disp_area->x1;
  41096a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  41096e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  410972:	1a5b      	subs	r3, r3, r1
  410974:	b29a      	uxth	r2, r3
  410976:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        draw_area.y1 -= disp_area->y1;
  41097a:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  41097e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  410982:	1a1b      	subs	r3, r3, r0
  410984:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        draw_area.x2 -= disp_area->x1;
  410988:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  41098c:	1a5b      	subs	r3, r3, r1
  41098e:	b29b      	uxth	r3, r3
  410990:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        draw_area.y2 -= disp_area->y1;
  410994:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  410998:	1a09      	subs	r1, r1, r0
  41099a:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41099e:	1a9b      	subs	r3, r3, r2
  4109a0:	b29b      	uxth	r3, r3
  4109a2:	3301      	adds	r3, #1
  4109a4:	b21b      	sxth	r3, r3
  4109a6:	9308      	str	r3, [sp, #32]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  4109a8:	9306      	str	r3, [sp, #24]
  4109aa:	4618      	mov	r0, r3
  4109ac:	4b6f      	ldr	r3, [pc, #444]	; (410b6c <draw_border+0x348>)
  4109ae:	4798      	blx	r3
  4109b0:	4607      	mov	r7, r0
        if(rout > 0) {
  4109b2:	2d00      	cmp	r5, #0
  4109b4:	dd53      	ble.n	410a5e <draw_border+0x23a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
  4109b6:	2300      	movs	r3, #0
  4109b8:	462a      	mov	r2, r5
  4109ba:	4621      	mov	r1, r4
  4109bc:	a812      	add	r0, sp, #72	; 0x48
  4109be:	4e6c      	ldr	r6, [pc, #432]	; (410b70 <draw_border+0x34c>)
  4109c0:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  4109c2:	2100      	movs	r1, #0
  4109c4:	a812      	add	r0, sp, #72	; 0x48
  4109c6:	4b6b      	ldr	r3, [pc, #428]	; (410b74 <draw_border+0x350>)
  4109c8:	4798      	blx	r3
  4109ca:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
  4109cc:	f8ba 2010 	ldrh.w	r2, [sl, #16]
  4109d0:	1aaa      	subs	r2, r5, r2
  4109d2:	2301      	movs	r3, #1
  4109d4:	b212      	sxth	r2, r2
  4109d6:	a920      	add	r1, sp, #128	; 0x80
  4109d8:	a819      	add	r0, sp, #100	; 0x64
  4109da:	4e65      	ldr	r6, [pc, #404]	; (410b70 <draw_border+0x34c>)
  4109dc:	47b0      	blx	r6
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  4109de:	2100      	movs	r1, #0
  4109e0:	a819      	add	r0, sp, #100	; 0x64
  4109e2:	4b64      	ldr	r3, [pc, #400]	; (410b74 <draw_border+0x350>)
  4109e4:	4798      	blx	r3
  4109e6:	900b      	str	r0, [sp, #44]	; 0x2c
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
  4109e8:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
  4109ec:	3b01      	subs	r3, #1
  4109ee:	429d      	cmp	r5, r3
  4109f0:	bfb8      	it	lt
  4109f2:	461d      	movlt	r5, r3
        lv_color_t color = dsc->border_color;
  4109f4:	f8ba 300e 	ldrh.w	r3, [sl, #14]
  4109f8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
  4109fc:	f89a 3015 	ldrb.w	r3, [sl, #21]
  410a00:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
  410a02:	f9b4 3000 	ldrsh.w	r3, [r4]
  410a06:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = coords->x2;
  410a0a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  410a0e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  410a12:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  410a16:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
  410a1a:	fa13 f386 	uxtah	r3, r3, r6
  410a1e:	b21b      	sxth	r3, r3
  410a20:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
  410a24:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  410a28:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  410a2c:	2b04      	cmp	r3, #4
  410a2e:	d01a      	beq.n	410a66 <draw_border+0x242>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
  410a30:	2b08      	cmp	r3, #8
  410a32:	d01f      	beq.n	410a74 <draw_border+0x250>
        uint32_t buf_ofs = 0;
  410a34:	f04f 0b00 	mov.w	fp, #0
        volatile bool top_only = false;
  410a38:	2200      	movs	r2, #0
  410a3a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
        volatile bool bottom_only = false;
  410a3e:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  410a42:	2b02      	cmp	r3, #2
  410a44:	d023      	beq.n	410a8e <draw_border+0x26a>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  410a46:	2b01      	cmp	r3, #1
  410a48:	d025      	beq.n	410a96 <draw_border+0x272>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
  410a4a:	2b03      	cmp	r3, #3
  410a4c:	d027      	beq.n	410a9e <draw_border+0x27a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  410a4e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
  410a52:	bb53      	cbnz	r3, 410aaa <draw_border+0x286>
  410a54:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
  410a58:	b363      	cbz	r3, 410ab4 <draw_border+0x290>
  410a5a:	2300      	movs	r3, #0
  410a5c:	e026      	b.n	410aac <draw_border+0x288>
        int16_t mask_rout_id = LV_MASK_ID_INV;
  410a5e:	f04f 33ff 	mov.w	r3, #4294967295
  410a62:	930a      	str	r3, [sp, #40]	; 0x28
  410a64:	e7b2      	b.n	4109cc <draw_border+0x1a8>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  410a66:	8822      	ldrh	r2, [r4, #0]
  410a68:	442a      	add	r2, r5
  410a6a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        uint32_t buf_ofs = 0;
  410a6e:	f04f 0b00 	mov.w	fp, #0
  410a72:	e7e1      	b.n	410a38 <draw_border+0x214>
            fill_area.x1 = coords->x2 - corner_size;
  410a74:	f8b4 b004 	ldrh.w	fp, [r4, #4]
  410a78:	ebab 0b05 	sub.w	fp, fp, r5
  410a7c:	fa0f fb8b 	sxth.w	fp, fp
  410a80:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
            buf_ofs = fill_area.x1 - coords->x1;
  410a84:	f9b4 2000 	ldrsh.w	r2, [r4]
  410a88:	ebab 0b02 	sub.w	fp, fp, r2
  410a8c:	e7d4      	b.n	410a38 <draw_border+0x214>
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  410a8e:	2201      	movs	r2, #1
  410a90:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  410a94:	e7d7      	b.n	410a46 <draw_border+0x222>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  410a96:	2201      	movs	r2, #1
  410a98:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  410a9c:	e7d5      	b.n	410a4a <draw_border+0x226>
            top_only = true;
  410a9e:	2301      	movs	r3, #1
  410aa0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            bottom_only = true;
  410aa4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  410aa8:	e7d1      	b.n	410a4e <draw_border+0x22a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  410aaa:	2300      	movs	r3, #0
  410aac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  410ab0:	46a2      	mov	sl, r4
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410ab2:	e02b      	b.n	410b0c <draw_border+0x2e8>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  410ab4:	2301      	movs	r3, #1
  410ab6:	e7f9      	b.n	410aac <draw_border+0x288>
                _lv_memset_ff(mask_buf, draw_area_w);
  410ab8:	9906      	ldr	r1, [sp, #24]
  410aba:	4638      	mov	r0, r7
  410abc:	4b2e      	ldr	r3, [pc, #184]	; (410b78 <draw_border+0x354>)
  410abe:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410ac0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  410ac4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  410ac8:	4419      	add	r1, r3
  410aca:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  410ace:	4432      	add	r2, r6
  410ad0:	9b08      	ldr	r3, [sp, #32]
  410ad2:	b212      	sxth	r2, r2
  410ad4:	b209      	sxth	r1, r1
  410ad6:	4638      	mov	r0, r7
  410ad8:	4c28      	ldr	r4, [pc, #160]	; (410b7c <draw_border+0x358>)
  410ada:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
  410adc:	9b07      	ldr	r3, [sp, #28]
  410ade:	9302      	str	r3, [sp, #8]
  410ae0:	f8cd 9004 	str.w	r9, [sp, #4]
  410ae4:	9000      	str	r0, [sp, #0]
  410ae6:	eb07 030b 	add.w	r3, r7, fp
  410aea:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  410aee:	a910      	add	r1, sp, #64	; 0x40
  410af0:	9805      	ldr	r0, [sp, #20]
  410af2:	4c23      	ldr	r4, [pc, #140]	; (410b80 <draw_border+0x35c>)
  410af4:	47a0      	blx	r4
            fill_area.y1++;
  410af6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
  410afa:	3301      	adds	r3, #1
  410afc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
  410b00:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410b04:	3301      	adds	r3, #1
  410b06:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410b0a:	3601      	adds	r6, #1
  410b0c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  410b10:	429e      	cmp	r6, r3
  410b12:	dc19      	bgt.n	410b48 <draw_border+0x324>
            if(normal ||
  410b14:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  410b18:	2b00      	cmp	r3, #0
  410b1a:	d1cd      	bne.n	410ab8 <draw_border+0x294>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  410b1c:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
            if(normal ||
  410b20:	b133      	cbz	r3, 410b30 <draw_border+0x30c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  410b22:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  410b26:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  410b2a:	442b      	add	r3, r5
  410b2c:	429a      	cmp	r2, r3
  410b2e:	ddc3      	ble.n	410ab8 <draw_border+0x294>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  410b30:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  410b34:	2b00      	cmp	r3, #0
  410b36:	d0de      	beq.n	410af6 <draw_border+0x2d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  410b38:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  410b3c:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
  410b40:	1b5b      	subs	r3, r3, r5
  410b42:	429a      	cmp	r2, r3
  410b44:	dbd7      	blt.n	410af6 <draw_border+0x2d2>
  410b46:	e7b7      	b.n	410ab8 <draw_border+0x294>
        lv_draw_mask_remove_id(mask_rin_id);
  410b48:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410b4a:	4c0e      	ldr	r4, [pc, #56]	; (410b84 <draw_border+0x360>)
  410b4c:	47a0      	blx	r4
        lv_draw_mask_remove_id(mask_rout_id);
  410b4e:	980a      	ldr	r0, [sp, #40]	; 0x28
  410b50:	47a0      	blx	r4
        _lv_mem_buf_release(mask_buf);
  410b52:	4638      	mov	r0, r7
  410b54:	4b0c      	ldr	r3, [pc, #48]	; (410b88 <draw_border+0x364>)
  410b56:	4798      	blx	r3
  410b58:	e6d9      	b.n	41090e <draw_border+0xea>
  410b5a:	4770      	bx	lr
  410b5c:	00408ba9 	.word	0x00408ba9
  410b60:	0041403d 	.word	0x0041403d
  410b64:	004147a1 	.word	0x004147a1
  410b68:	00410245 	.word	0x00410245
  410b6c:	00415b15 	.word	0x00415b15
  410b70:	0040f0ad 	.word	0x0040f0ad
  410b74:	0040ee31 	.word	0x0040ee31
  410b78:	00415cf9 	.word	0x00415cf9
  410b7c:	0040ee65 	.word	0x0040ee65
  410b80:	0040bc09 	.word	0x0040bc09
  410b84:	0040eeb5 	.word	0x0040eeb5
  410b88:	004158c5 	.word	0x004158c5

00410b8c <draw_pattern>:
    if(dsc->pattern_image == NULL) return;
  410b8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  410b8e:	2b00      	cmp	r3, #0
  410b90:	f000 814e 	beq.w	410e30 <draw_pattern+0x2a4>
{
  410b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410b98:	b09f      	sub	sp, #124	; 0x7c
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
  410b9a:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
  410b9e:	2c02      	cmp	r4, #2
  410ba0:	d802      	bhi.n	410ba8 <draw_pattern+0x1c>
}
  410ba2:	b01f      	add	sp, #124	; 0x7c
  410ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410ba8:	4614      	mov	r4, r2
  410baa:	460e      	mov	r6, r1
  410bac:	4605      	mov	r5, r0
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
  410bae:	4618      	mov	r0, r3
  410bb0:	4ba0      	ldr	r3, [pc, #640]	; (410e34 <draw_pattern+0x2a8>)
  410bb2:	4798      	blx	r3
  410bb4:	4680      	mov	r8, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
  410bb6:	2801      	cmp	r0, #1
  410bb8:	d908      	bls.n	410bcc <draw_pattern+0x40>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  410bba:	2802      	cmp	r0, #2
  410bbc:	d022      	beq.n	410c04 <draw_pattern+0x78>
        lv_draw_img(coords, clip, NULL, NULL);
  410bbe:	2300      	movs	r3, #0
  410bc0:	461a      	mov	r2, r3
  410bc2:	4631      	mov	r1, r6
  410bc4:	4628      	mov	r0, r5
  410bc6:	4c9c      	ldr	r4, [pc, #624]	; (410e38 <draw_pattern+0x2ac>)
  410bc8:	47a0      	blx	r4
        return;
  410bca:	e7ea      	b.n	410ba2 <draw_pattern+0x16>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
  410bcc:	a907      	add	r1, sp, #28
  410bce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  410bd0:	4b9a      	ldr	r3, [pc, #616]	; (410e3c <draw_pattern+0x2b0>)
  410bd2:	4798      	blx	r3
        if(res != LV_RES_OK) {
  410bd4:	2801      	cmp	r0, #1
  410bd6:	d1e4      	bne.n	410ba2 <draw_pattern+0x16>
        img_w = header.w;
  410bd8:	9b07      	ldr	r3, [sp, #28]
  410bda:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
        img_h = header.h;
  410bde:	f8bd a01e 	ldrh.w	sl, [sp, #30]
  410be2:	f3ca 1a4a 	ubfx	sl, sl, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
  410be6:	a81a      	add	r0, sp, #104	; 0x68
  410be8:	4b95      	ldr	r3, [pc, #596]	; (410e40 <draw_pattern+0x2b4>)
  410bea:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
  410bec:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  410bf0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
  410bf4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  410bf8:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
  410bfc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  410bfe:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  410c02:	e01d      	b.n	410c40 <draw_pattern+0xb4>
        lv_draw_label_dsc_init(&label_dsc);
  410c04:	a811      	add	r0, sp, #68	; 0x44
  410c06:	4b8f      	ldr	r3, [pc, #572]	; (410e44 <draw_pattern+0x2b8>)
  410c08:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
  410c0a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  410c0c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        label_dsc.font = dsc->pattern_font;
  410c10:	6b22      	ldr	r2, [r4, #48]	; 0x30
  410c12:	9213      	str	r2, [sp, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
  410c14:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  410c18:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
  410c1c:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
  410c20:	2100      	movs	r1, #0
  410c22:	9102      	str	r1, [sp, #8]
  410c24:	f647 4118 	movw	r1, #31768	; 0x7c18
  410c28:	9101      	str	r1, [sp, #4]
  410c2a:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
  410c2e:	9100      	str	r1, [sp, #0]
  410c30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  410c32:	a807      	add	r0, sp, #28
  410c34:	4f84      	ldr	r7, [pc, #528]	; (410e48 <draw_pattern+0x2bc>)
  410c36:	47b8      	blx	r7
        img_w = s.x;
  410c38:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
        img_h = s.y;
  410c3c:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
    if(img_w == 0 || img_h == 0) return;
  410c40:	f1ba 0f00 	cmp.w	sl, #0
  410c44:	bf18      	it	ne
  410c46:	f1bb 0f00 	cmpne.w	fp, #0
  410c4a:	d0aa      	beq.n	410ba2 <draw_pattern+0x16>
    if(dsc->pattern_repeat) {
  410c4c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  410c50:	f013 0f01 	tst.w	r3, #1
  410c54:	d148      	bne.n	410ce8 <draw_pattern+0x15c>
  410c56:	88a8      	ldrh	r0, [r5, #4]
  410c58:	882b      	ldrh	r3, [r5, #0]
  410c5a:	1ac0      	subs	r0, r0, r3
  410c5c:	b280      	uxth	r0, r0
  410c5e:	3001      	adds	r0, #1
  410c60:	b200      	sxth	r0, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410c62:	88ea      	ldrh	r2, [r5, #6]
  410c64:	8869      	ldrh	r1, [r5, #2]
  410c66:	1a52      	subs	r2, r2, r1
  410c68:	b292      	uxth	r2, r2
  410c6a:	3201      	adds	r2, #1
  410c6c:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  410c6e:	ebb0 000b 	subs.w	r0, r0, fp
  410c72:	f100 80ba 	bmi.w	410dea <draw_pattern+0x25e>
  410c76:	eb03 0360 	add.w	r3, r3, r0, asr #1
  410c7a:	b29b      	uxth	r3, r3
  410c7c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  410c80:	eba2 020a 	sub.w	r2, r2, sl
  410c84:	4610      	mov	r0, r2
  410c86:	2a00      	cmp	r2, #0
  410c88:	f2c0 80b1 	blt.w	410dee <draw_pattern+0x262>
  410c8c:	eb01 0160 	add.w	r1, r1, r0, asr #1
  410c90:	b289      	uxth	r1, r1
  410c92:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  410c96:	445b      	add	r3, fp
  410c98:	b29b      	uxth	r3, r3
  410c9a:	3b01      	subs	r3, #1
  410c9c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  410ca0:	eb01 030a 	add.w	r3, r1, sl
  410ca4:	b29b      	uxth	r3, r3
  410ca6:	3b01      	subs	r3, #1
  410ca8:	b29b      	uxth	r3, r3
  410caa:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(src_type == LV_IMG_SRC_SYMBOL) {
  410cae:	f1b8 0f02 	cmp.w	r8, #2
  410cb2:	f000 809e 	beq.w	410df2 <draw_pattern+0x266>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
  410cb6:	f9b4 2000 	ldrsh.w	r2, [r4]
  410cba:	4629      	mov	r1, r5
  410cbc:	a80f      	add	r0, sp, #60	; 0x3c
  410cbe:	4b63      	ldr	r3, [pc, #396]	; (410e4c <draw_pattern+0x2c0>)
  410cc0:	4798      	blx	r3
  410cc2:	2800      	cmp	r0, #0
  410cc4:	f000 809e 	beq.w	410e04 <draw_pattern+0x278>
        int16_t radius_mask_id = LV_MASK_ID_INV;
  410cc8:	f04f 35ff 	mov.w	r5, #4294967295
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  410ccc:	f1b8 0f02 	cmp.w	r8, #2
  410cd0:	f000 80a5 	beq.w	410e1e <draw_pattern+0x292>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  410cd4:	ab1a      	add	r3, sp, #104	; 0x68
  410cd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  410cd8:	4631      	mov	r1, r6
  410cda:	a80f      	add	r0, sp, #60	; 0x3c
  410cdc:	4c56      	ldr	r4, [pc, #344]	; (410e38 <draw_pattern+0x2ac>)
  410cde:	47a0      	blx	r4
        lv_draw_mask_remove_id(radius_mask_id);
  410ce0:	4628      	mov	r0, r5
  410ce2:	4b5b      	ldr	r3, [pc, #364]	; (410e50 <draw_pattern+0x2c4>)
  410ce4:	4798      	blx	r3
  410ce6:	e75c      	b.n	410ba2 <draw_pattern+0x16>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  410ce8:	2300      	movs	r3, #0
  410cea:	f9b4 2000 	ldrsh.w	r2, [r4]
  410cee:	4629      	mov	r1, r5
  410cf0:	a808      	add	r0, sp, #32
  410cf2:	4f58      	ldr	r7, [pc, #352]	; (410e54 <draw_pattern+0x2c8>)
  410cf4:	47b8      	blx	r7
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  410cf6:	2100      	movs	r1, #0
  410cf8:	a808      	add	r0, sp, #32
  410cfa:	4b57      	ldr	r3, [pc, #348]	; (410e58 <draw_pattern+0x2cc>)
  410cfc:	4798      	blx	r3
  410cfe:	9005      	str	r0, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410d00:	88ab      	ldrh	r3, [r5, #4]
  410d02:	882a      	ldrh	r2, [r5, #0]
  410d04:	1a9b      	subs	r3, r3, r2
  410d06:	b29b      	uxth	r3, r3
  410d08:	3301      	adds	r3, #1
  410d0a:	b21b      	sxth	r3, r3
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  410d0c:	fb93 f2fb 	sdiv	r2, r3, fp
  410d10:	fb02 331b 	mls	r3, r2, fp, r3
  410d14:	2b00      	cmp	r3, #0
  410d16:	db1e      	blt.n	410d56 <draw_pattern+0x1ca>
  410d18:	105b      	asrs	r3, r3, #1
  410d1a:	4618      	mov	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410d1c:	88ea      	ldrh	r2, [r5, #6]
  410d1e:	886b      	ldrh	r3, [r5, #2]
  410d20:	1ad2      	subs	r2, r2, r3
  410d22:	b292      	uxth	r2, r2
  410d24:	3201      	adds	r2, #1
  410d26:	b212      	sxth	r2, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  410d28:	fb92 f1fa 	sdiv	r1, r2, sl
  410d2c:	fb01 221a 	mls	r2, r1, sl, r2
  410d30:	2a00      	cmp	r2, #0
  410d32:	db12      	blt.n	410d5a <draw_pattern+0x1ce>
        coords_tmp.y1 = coords->y1 - ofs_y;
  410d34:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  410d38:	b29b      	uxth	r3, r3
  410d3a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  410d3e:	fa1f fa8a 	uxth.w	sl, sl
  410d42:	4453      	add	r3, sl
  410d44:	b29b      	uxth	r3, r3
  410d46:	3b01      	subs	r3, #1
  410d48:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  410d4c:	f8cd b010 	str.w	fp, [sp, #16]
  410d50:	4683      	mov	fp, r0
  410d52:	46a1      	mov	r9, r4
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  410d54:	e031      	b.n	410dba <draw_pattern+0x22e>
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  410d56:	3301      	adds	r3, #1
  410d58:	e7de      	b.n	410d18 <draw_pattern+0x18c>
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  410d5a:	3201      	adds	r2, #1
  410d5c:	e7ea      	b.n	410d34 <draw_pattern+0x1a8>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  410d5e:	2300      	movs	r3, #0
  410d60:	9300      	str	r3, [sp, #0]
  410d62:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  410d66:	aa11      	add	r2, sp, #68	; 0x44
  410d68:	4631      	mov	r1, r6
  410d6a:	a80f      	add	r0, sp, #60	; 0x3c
  410d6c:	4c3b      	ldr	r4, [pc, #236]	; (410e5c <draw_pattern+0x2d0>)
  410d6e:	47a0      	blx	r4
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  410d70:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  410d74:	443b      	add	r3, r7
  410d76:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  410d7a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  410d7e:	443b      	add	r3, r7
  410d80:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  410d84:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  410d88:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  410d8c:	429a      	cmp	r2, r3
  410d8e:	dc0a      	bgt.n	410da6 <draw_pattern+0x21a>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  410d90:	f1b8 0f02 	cmp.w	r8, #2
  410d94:	d0e3      	beq.n	410d5e <draw_pattern+0x1d2>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  410d96:	ab1a      	add	r3, sp, #104	; 0x68
  410d98:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
  410d9c:	4631      	mov	r1, r6
  410d9e:	a80f      	add	r0, sp, #60	; 0x3c
  410da0:	4c25      	ldr	r4, [pc, #148]	; (410e38 <draw_pattern+0x2ac>)
  410da2:	47a0      	blx	r4
  410da4:	e7e4      	b.n	410d70 <draw_pattern+0x1e4>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  410da6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
  410daa:	4453      	add	r3, sl
  410dac:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  410db0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  410db4:	4453      	add	r3, sl
  410db6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  410dba:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  410dbe:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  410dc2:	429a      	cmp	r2, r3
  410dc4:	dc0d      	bgt.n	410de2 <draw_pattern+0x256>
            coords_tmp.x1 = coords->x1 - ofs_x;
  410dc6:	882b      	ldrh	r3, [r5, #0]
  410dc8:	eba3 030b 	sub.w	r3, r3, fp
  410dcc:	b29b      	uxth	r3, r3
  410dce:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  410dd2:	f8bd 7010 	ldrh.w	r7, [sp, #16]
  410dd6:	443b      	add	r3, r7
  410dd8:	b29b      	uxth	r3, r3
  410dda:	3b01      	subs	r3, #1
  410ddc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  410de0:	e7d0      	b.n	410d84 <draw_pattern+0x1f8>
        lv_draw_mask_remove_id(radius_mask_id);
  410de2:	9805      	ldr	r0, [sp, #20]
  410de4:	4b1a      	ldr	r3, [pc, #104]	; (410e50 <draw_pattern+0x2c4>)
  410de6:	4798      	blx	r3
  410de8:	e6db      	b.n	410ba2 <draw_pattern+0x16>
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  410dea:	3001      	adds	r0, #1
  410dec:	e743      	b.n	410c76 <draw_pattern+0xea>
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  410dee:	1c50      	adds	r0, r2, #1
  410df0:	e74c      	b.n	410c8c <draw_pattern+0x100>
            coords_tmp.y1 += y_corr;
  410df2:	f002 0201 	and.w	r2, r2, #1
  410df6:	4411      	add	r1, r2
  410df8:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            coords_tmp.y2 += y_corr;
  410dfc:	4413      	add	r3, r2
  410dfe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  410e02:	e758      	b.n	410cb6 <draw_pattern+0x12a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  410e04:	2300      	movs	r3, #0
  410e06:	f9b4 2000 	ldrsh.w	r2, [r4]
  410e0a:	4629      	mov	r1, r5
  410e0c:	a808      	add	r0, sp, #32
  410e0e:	4d11      	ldr	r5, [pc, #68]	; (410e54 <draw_pattern+0x2c8>)
  410e10:	47a8      	blx	r5
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  410e12:	2100      	movs	r1, #0
  410e14:	a808      	add	r0, sp, #32
  410e16:	4b10      	ldr	r3, [pc, #64]	; (410e58 <draw_pattern+0x2cc>)
  410e18:	4798      	blx	r3
  410e1a:	4605      	mov	r5, r0
  410e1c:	e756      	b.n	410ccc <draw_pattern+0x140>
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  410e1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  410e20:	2200      	movs	r2, #0
  410e22:	9200      	str	r2, [sp, #0]
  410e24:	aa11      	add	r2, sp, #68	; 0x44
  410e26:	4631      	mov	r1, r6
  410e28:	a80f      	add	r0, sp, #60	; 0x3c
  410e2a:	4c0c      	ldr	r4, [pc, #48]	; (410e5c <draw_pattern+0x2d0>)
  410e2c:	47a0      	blx	r4
  410e2e:	e757      	b.n	410ce0 <draw_pattern+0x154>
  410e30:	4770      	bx	lr
  410e32:	bf00      	nop
  410e34:	0040c9c5 	.word	0x0040c9c5
  410e38:	0040c985 	.word	0x0040c985
  410e3c:	00412b51 	.word	0x00412b51
  410e40:	0040c6d9 	.word	0x0040c6d9
  410e44:	0040d26d 	.word	0x0040d26d
  410e48:	004165e9 	.word	0x004165e9
  410e4c:	00414a15 	.word	0x00414a15
  410e50:	0040eeb5 	.word	0x0040eeb5
  410e54:	0040f0ad 	.word	0x0040f0ad
  410e58:	0040ee31 	.word	0x0040ee31
  410e5c:	0040d2b5 	.word	0x0040d2b5

00410e60 <draw_value_str>:
{
  410e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  410e64:	b093      	sub	sp, #76	; 0x4c
    if(dsc->value_str == NULL) return;
  410e66:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  410e68:	b11d      	cbz	r5, 410e72 <draw_value_str+0x12>
    if(dsc->value_opa <= LV_OPA_MIN) return;
  410e6a:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
  410e6e:	2b02      	cmp	r3, #2
  410e70:	d802      	bhi.n	410e78 <draw_value_str+0x18>
}
  410e72:	b013      	add	sp, #76	; 0x4c
  410e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  410e78:	4614      	mov	r4, r2
  410e7a:	460e      	mov	r6, r1
  410e7c:	4680      	mov	r8, r0
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
  410e7e:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
  410e82:	2700      	movs	r7, #0
  410e84:	9702      	str	r7, [sp, #8]
  410e86:	f647 4218 	movw	r2, #31768	; 0x7c18
  410e8a:	9201      	str	r2, [sp, #4]
  410e8c:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
  410e90:	9200      	str	r2, [sp, #0]
  410e92:	6c22      	ldr	r2, [r4, #64]	; 0x40
  410e94:	4629      	mov	r1, r5
  410e96:	a811      	add	r0, sp, #68	; 0x44
  410e98:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 410f4c <draw_value_str+0xec>
  410e9c:	47c8      	blx	r9
    value_area.x1 = 0;
  410e9e:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
    value_area.y1 = 0;
  410ea2:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
    value_area.x2 = s.x - 1;
  410ea6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  410eaa:	3b01      	subs	r3, #1
  410eac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    value_area.y2 = s.y - 1;
  410eb0:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  410eb4:	3b01      	subs	r3, #1
  410eb6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
  410eba:	ab0e      	add	r3, sp, #56	; 0x38
  410ebc:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  410ec0:	a90f      	add	r1, sp, #60	; 0x3c
  410ec2:	4640      	mov	r0, r8
  410ec4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 410f50 <draw_value_str+0xf0>
  410ec8:	47c0      	blx	r8
    value_area.x1 += p_align.x + dsc->value_ofs_x;
  410eca:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  410ece:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  410ed2:	441a      	add	r2, r3
  410ed4:	b292      	uxth	r2, r2
  410ed6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  410eda:	4413      	add	r3, r2
  410edc:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    value_area.y1 += p_align.y + dsc->value_ofs_y;
  410ee0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  410ee4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  410ee8:	440b      	add	r3, r1
  410eea:	b29b      	uxth	r3, r3
  410eec:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  410ef0:	4419      	add	r1, r3
  410ef2:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    value_area.x2 += p_align.x + dsc->value_ofs_x;
  410ef6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
  410efa:	440a      	add	r2, r1
  410efc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    value_area.y2 += p_align.y + dsc->value_ofs_y;
  410f00:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
  410f04:	4413      	add	r3, r2
  410f06:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    lv_draw_label_dsc_init(&label_dsc);
  410f0a:	a805      	add	r0, sp, #20
  410f0c:	4b0d      	ldr	r3, [pc, #52]	; (410f44 <draw_value_str+0xe4>)
  410f0e:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
  410f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
  410f12:	9307      	str	r3, [sp, #28]
    label_dsc.letter_space = dsc->value_letter_space;
  410f14:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
  410f18:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    label_dsc.line_space = dsc->value_line_space;
  410f1c:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
  410f20:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    label_dsc.color = dsc->value_color;
  410f24:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  410f28:	f8ad 3014 	strh.w	r3, [sp, #20]
    label_dsc.opa = dsc->value_opa;
  410f2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  410f30:	f88d 3020 	strb.w	r3, [sp, #32]
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
  410f34:	9700      	str	r7, [sp, #0]
  410f36:	462b      	mov	r3, r5
  410f38:	aa05      	add	r2, sp, #20
  410f3a:	4631      	mov	r1, r6
  410f3c:	a80f      	add	r0, sp, #60	; 0x3c
  410f3e:	4c02      	ldr	r4, [pc, #8]	; (410f48 <draw_value_str+0xe8>)
  410f40:	47a0      	blx	r4
  410f42:	e796      	b.n	410e72 <draw_value_str+0x12>
  410f44:	0040d26d 	.word	0x0040d26d
  410f48:	0040d2b5 	.word	0x0040d2b5
  410f4c:	004165e9 	.word	0x004165e9
  410f50:	00414add 	.word	0x00414add

00410f54 <draw_bg>:
    if(dsc->bg_opa <= LV_OPA_MIN) return;
  410f54:	7b13      	ldrb	r3, [r2, #12]
  410f56:	2b02      	cmp	r3, #2
  410f58:	f240 839c 	bls.w	411694 <draw_bg+0x740>
{
  410f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410f60:	b0a5      	sub	sp, #148	; 0x94
  410f62:	ad22      	add	r5, sp, #136	; 0x88
  410f64:	2308      	movs	r3, #8
  410f66:	e004      	b.n	410f72 <draw_bg+0x1e>
        *d8 = *s8;
  410f68:	f810 6b01 	ldrb.w	r6, [r0], #1
  410f6c:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  410f70:	3b01      	subs	r3, #1
    while(len) {
  410f72:	2b00      	cmp	r3, #0
  410f74:	d1f8      	bne.n	410f68 <draw_bg+0x14>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
  410f76:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  410f7a:	2b01      	cmp	r3, #1
  410f7c:	dd22      	ble.n	410fc4 <draw_bg+0x70>
  410f7e:	7d13      	ldrb	r3, [r2, #20]
  410f80:	2bfc      	cmp	r3, #252	; 0xfc
  410f82:	d91f      	bls.n	410fc4 <draw_bg+0x70>
  410f84:	f9b2 3000 	ldrsh.w	r3, [r2]
  410f88:	b1e3      	cbz	r3, 410fc4 <draw_bg+0x70>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
  410f8a:	8a53      	ldrh	r3, [r2, #18]
  410f8c:	f3c3 0080 	ubfx	r0, r3, #2, #1
  410f90:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
  410f94:	4428      	add	r0, r5
  410f96:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
  410f9a:	f3c3 0040 	ubfx	r0, r3, #1, #1
  410f9e:	f8bd 508a 	ldrh.w	r5, [sp, #138]	; 0x8a
  410fa2:	4428      	add	r0, r5
  410fa4:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
  410fa8:	f3c3 05c0 	ubfx	r5, r3, #3, #1
  410fac:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  410fb0:	1b40      	subs	r0, r0, r5
  410fb2:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
  410fb6:	f003 0301 	and.w	r3, r3, #1
  410fba:	f8bd 008e 	ldrh.w	r0, [sp, #142]	; 0x8e
  410fbe:	1ac3      	subs	r3, r0, r3
  410fc0:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_opa_t opa = dsc->bg_opa;
  410fc4:	7b13      	ldrb	r3, [r2, #12]
  410fc6:	9305      	str	r3, [sp, #20]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  410fc8:	2bfd      	cmp	r3, #253	; 0xfd
  410fca:	d901      	bls.n	410fd0 <draw_bg+0x7c>
  410fcc:	23ff      	movs	r3, #255	; 0xff
  410fce:	9305      	str	r3, [sp, #20]
  410fd0:	4692      	mov	sl, r2
  410fd2:	460d      	mov	r5, r1
  410fd4:	910a      	str	r1, [sp, #40]	; 0x28
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  410fd6:	4bad      	ldr	r3, [pc, #692]	; (41128c <draw_bg+0x338>)
  410fd8:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  410fda:	4bad      	ldr	r3, [pc, #692]	; (411290 <draw_bg+0x33c>)
  410fdc:	4798      	blx	r3
  410fde:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
  410fe0:	462a      	mov	r2, r5
  410fe2:	a922      	add	r1, sp, #136	; 0x88
  410fe4:	a820      	add	r0, sp, #128	; 0x80
  410fe6:	4bab      	ldr	r3, [pc, #684]	; (411294 <draw_bg+0x340>)
  410fe8:	4798      	blx	r3
    if(is_common == false) return;
  410fea:	9006      	str	r0, [sp, #24]
  410fec:	b910      	cbnz	r0, 410ff4 <draw_bg+0xa0>
}
  410fee:	b025      	add	sp, #148	; 0x94
  410ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    draw_area.x1 -= disp_area->x1;
  410ff4:	8a39      	ldrh	r1, [r7, #16]
  410ff6:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  410ffa:	1a5b      	subs	r3, r3, r1
  410ffc:	b29a      	uxth	r2, r3
  410ffe:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  411002:	8a7d      	ldrh	r5, [r7, #18]
  411004:	f8bd 0082 	ldrh.w	r0, [sp, #130]	; 0x82
  411008:	1b40      	subs	r0, r0, r5
  41100a:	f8ad 0082 	strh.w	r0, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  41100e:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  411012:	1a5b      	subs	r3, r3, r1
  411014:	b29b      	uxth	r3, r3
  411016:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  41101a:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
  41101e:	1b49      	subs	r1, r1, r5
  411020:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411024:	1a9b      	subs	r3, r3, r2
  411026:	b29b      	uxth	r3, r3
  411028:	3301      	adds	r3, #1
  41102a:	b21b      	sxth	r3, r3
  41102c:	930d      	str	r3, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  41102e:	930c      	str	r3, [sp, #48]	; 0x30
  411030:	4618      	mov	r0, r3
  411032:	4b99      	ldr	r3, [pc, #612]	; (411298 <draw_bg+0x344>)
  411034:	4798      	blx	r3
  411036:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
  411038:	f89a 8006 	ldrb.w	r8, [sl, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  41103c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411040:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  411044:	429a      	cmp	r2, r3
  411046:	d00a      	beq.n	41105e <draw_bg+0x10a>
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
  411048:	4b94      	ldr	r3, [pc, #592]	; (41129c <draw_bg+0x348>)
  41104a:	4798      	blx	r3
  41104c:	b283      	uxth	r3, r0
  41104e:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
  411050:	b943      	cbnz	r3, 411064 <draw_bg+0x110>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  411052:	f1b8 0f02 	cmp.w	r8, #2
  411056:	d068      	beq.n	41112a <draw_bg+0x1d6>
    bool simple_mode = true;
  411058:	9b06      	ldr	r3, [sp, #24]
  41105a:	9309      	str	r3, [sp, #36]	; 0x24
  41105c:	e004      	b.n	411068 <draw_bg+0x114>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  41105e:	f04f 0800 	mov.w	r8, #0
  411062:	e7f1      	b.n	411048 <draw_bg+0xf4>
    if(other_mask_cnt) simple_mode = false;
  411064:	2300      	movs	r3, #0
  411066:	9309      	str	r3, [sp, #36]	; 0x24
  411068:	f8bd b08c 	ldrh.w	fp, [sp, #140]	; 0x8c
  41106c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411070:	ebab 0b03 	sub.w	fp, fp, r3
  411074:	fa1f fb8b 	uxth.w	fp, fp
  411078:	f10b 0b01 	add.w	fp, fp, #1
  41107c:	fa0f fb8b 	sxth.w	fp, fp
    int32_t coords_w = lv_area_get_width(&coords_bg);
  411080:	f8cd b010 	str.w	fp, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411084:	f8bd 508e 	ldrh.w	r5, [sp, #142]	; 0x8e
  411088:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  41108c:	1aed      	subs	r5, r5, r3
  41108e:	b2ad      	uxth	r5, r5
  411090:	3501      	adds	r5, #1
  411092:	b22d      	sxth	r5, r5
    int32_t rout = dsc->radius;
  411094:	f9ba 3000 	ldrsh.w	r3, [sl]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  411098:	455d      	cmp	r5, fp
  41109a:	bfa8      	it	ge
  41109c:	465d      	movge	r5, fp
    if(rout > short_side >> 1) rout = short_side >> 1;
  41109e:	106d      	asrs	r5, r5, #1
  4110a0:	42ab      	cmp	r3, r5
  4110a2:	dc00      	bgt.n	4110a6 <draw_bg+0x152>
    int32_t rout = dsc->radius;
  4110a4:	461d      	mov	r5, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
  4110a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4110a8:	2d00      	cmp	r5, #0
  4110aa:	bf14      	ite	ne
  4110ac:	2300      	movne	r3, #0
  4110ae:	f003 0301 	andeq.w	r3, r3, #1
  4110b2:	b113      	cbz	r3, 4110ba <draw_bg+0x166>
  4110b4:	f1b8 0f00 	cmp.w	r8, #0
  4110b8:	d03a      	beq.n	411130 <draw_bg+0x1dc>
        if(rout > 0) {
  4110ba:	2d00      	cmp	r5, #0
  4110bc:	dd4a      	ble.n	411154 <draw_bg+0x200>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
  4110be:	2300      	movs	r3, #0
  4110c0:	462a      	mov	r2, r5
  4110c2:	a922      	add	r1, sp, #136	; 0x88
  4110c4:	a819      	add	r0, sp, #100	; 0x64
  4110c6:	4e76      	ldr	r6, [pc, #472]	; (4112a0 <draw_bg+0x34c>)
  4110c8:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  4110ca:	2100      	movs	r1, #0
  4110cc:	a819      	add	r0, sp, #100	; 0x64
  4110ce:	4b75      	ldr	r3, [pc, #468]	; (4112a4 <draw_bg+0x350>)
  4110d0:	4798      	blx	r3
  4110d2:	9010      	str	r0, [sp, #64]	; 0x40
        lv_color_t grad_color = dsc->bg_color;
  4110d4:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  4110d8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(grad_dir == LV_GRAD_DIR_HOR) {
  4110dc:	f1b8 0f02 	cmp.w	r8, #2
  4110e0:	d03c      	beq.n	41115c <draw_bg+0x208>
        lv_color_t * grad_map = NULL;
  4110e2:	2300      	movs	r3, #0
  4110e4:	930f      	str	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4110e6:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
  4110ea:	b293      	uxth	r3, r2
  4110ec:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  4110f0:	b288      	uxth	r0, r1
  4110f2:	1a1b      	subs	r3, r3, r0
  4110f4:	b29b      	uxth	r3, r3
  4110f6:	3301      	adds	r3, #1
  4110f8:	b21b      	sxth	r3, r3
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
  4110fa:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4110fe:	2b32      	cmp	r3, #50	; 0x32
  411100:	dc01      	bgt.n	411106 <draw_bg+0x1b2>
        bool split = false;
  411102:	2300      	movs	r3, #0
  411104:	9306      	str	r3, [sp, #24]
        fill_area.x1 = coords_bg.x1;
  411106:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
        fill_area.x2 = coords_bg.x2;
  41110a:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  41110e:	8a7b      	ldrh	r3, [r7, #18]
  411110:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  411114:	fa13 f386 	uxtah	r3, r3, r6
  411118:	b21b      	sxth	r3, r3
  41111a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        fill_area.y2 = fill_area.y1;
  41111e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  411122:	46b9      	mov	r9, r7
  411124:	f8bd b01c 	ldrh.w	fp, [sp, #28]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411128:	e1ec      	b.n	411504 <draw_bg+0x5b0>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  41112a:	2300      	movs	r3, #0
  41112c:	9309      	str	r3, [sp, #36]	; 0x24
  41112e:	e79b      	b.n	411068 <draw_bg+0x114>
        _lv_blend_fill(clip, &coords_bg,
  411130:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411134:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411138:	9302      	str	r3, [sp, #8]
  41113a:	9b05      	ldr	r3, [sp, #20]
  41113c:	9301      	str	r3, [sp, #4]
  41113e:	2301      	movs	r3, #1
  411140:	9300      	str	r3, [sp, #0]
  411142:	2300      	movs	r3, #0
  411144:	a922      	add	r1, sp, #136	; 0x88
  411146:	980a      	ldr	r0, [sp, #40]	; 0x28
  411148:	4c57      	ldr	r4, [pc, #348]	; (4112a8 <draw_bg+0x354>)
  41114a:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
  41114c:	f04f 33ff 	mov.w	r3, #4294967295
  411150:	9310      	str	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &coords_bg,
  411152:	e234      	b.n	4115be <draw_bg+0x66a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
  411154:	f04f 33ff 	mov.w	r3, #4294967295
  411158:	9310      	str	r3, [sp, #64]	; 0x40
  41115a:	e7bb      	b.n	4110d4 <draw_bg+0x180>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
  41115c:	ea4f 004b 	mov.w	r0, fp, lsl #1
  411160:	4b4d      	ldr	r3, [pc, #308]	; (411298 <draw_bg+0x344>)
  411162:	4798      	blx	r3
  411164:	900f      	str	r0, [sp, #60]	; 0x3c
            for(i = 0; i < coords_w; i++) {
  411166:	f04f 0900 	mov.w	r9, #0
  41116a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  41116e:	9512      	str	r5, [sp, #72]	; 0x48
  411170:	4684      	mov	ip, r0
  411172:	9713      	str	r7, [sp, #76]	; 0x4c
  411174:	f8dd e010 	ldr.w	lr, [sp, #16]
  411178:	e004      	b.n	411184 <draw_bg+0x230>
    if(i <= min) return dsc->bg_color;
  41117a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
                grad_map[i] = grad_get(dsc, coords_w, i);
  41117e:	8033      	strh	r3, [r6, #0]
            for(i = 0; i < coords_w; i++) {
  411180:	f109 0901 	add.w	r9, r9, #1
  411184:	45f1      	cmp	r9, lr
  411186:	da66      	bge.n	411256 <draw_bg+0x302>
                grad_map[i] = grad_get(dsc, coords_w, i);
  411188:	eb0c 0649 	add.w	r6, ip, r9, lsl #1
  41118c:	fa0f f389 	sxth.w	r3, r9
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  411190:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
  411194:	fb0b f200 	mul.w	r2, fp, r0
  411198:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  41119a:	429a      	cmp	r2, r3
  41119c:	daed      	bge.n	41117a <draw_bg+0x226>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  41119e:	f9ba 100a 	ldrsh.w	r1, [sl, #10]
  4111a2:	fb01 f50b 	mul.w	r5, r1, fp
    if(i >= max) return dsc->bg_grad_color;
  4111a6:	ebb3 2f25 	cmp.w	r3, r5, asr #8
  4111aa:	da51      	bge.n	411250 <draw_bg+0x2fc>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  4111ac:	1a09      	subs	r1, r1, r0
    d = (s * d) >> 8;
  4111ae:	fb01 f10b 	mul.w	r1, r1, fp
  4111b2:	1209      	asrs	r1, r1, #8
    i -= min;
  4111b4:	1a9b      	subs	r3, r3, r2
  4111b6:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  4111b8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  4111bc:	fb93 f3f1 	sdiv	r3, r3, r1
  4111c0:	b2db      	uxtb	r3, r3
  4111c2:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  4111c6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4111ca:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  4111ce:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  4111d2:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  4111d6:	fb07 f505 	mul.w	r5, r7, r5
  4111da:	fb03 5202 	mla	r2, r3, r2, r5
  4111de:	3280      	adds	r2, #128	; 0x80
  4111e0:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  4111e4:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  4111e8:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4111ec:	f362 04c7 	bfi	r4, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4111f0:	f000 0507 	and.w	r5, r0, #7
  4111f4:	f3c0 3242 	ubfx	r2, r0, #13, #3
  4111f8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  4111fc:	f001 0807 	and.w	r8, r1, #7
  411200:	f3c1 3542 	ubfx	r5, r1, #13, #3
  411204:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
  411208:	fb05 f507 	mul.w	r5, r5, r7
  41120c:	fb02 5203 	mla	r2, r2, r3, r5
  411210:	3280      	adds	r2, #128	; 0x80
  411212:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  411216:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  41121a:	f3c2 6582 	ubfx	r5, r2, #26, #3
  41121e:	f365 0402 	bfi	r4, r5, #0, #3
  411222:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  411226:	f362 344f 	bfi	r4, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41122a:	f3c0 2004 	ubfx	r0, r0, #8, #5
  41122e:	f3c1 2104 	ubfx	r1, r1, #8, #5
  411232:	fb01 f707 	mul.w	r7, r1, r7
  411236:	fb00 7303 	mla	r3, r0, r3, r7
  41123a:	3380      	adds	r3, #128	; 0x80
  41123c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  411240:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  411244:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  411248:	f363 240c 	bfi	r4, r3, #8, #5
  41124c:	4623      	mov	r3, r4
  41124e:	e796      	b.n	41117e <draw_bg+0x22a>
    if(i >= max) return dsc->bg_grad_color;
  411250:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  411254:	e793      	b.n	41117e <draw_bg+0x22a>
  411256:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  41125a:	9d12      	ldr	r5, [sp, #72]	; 0x48
  41125c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  41125e:	e742      	b.n	4110e6 <draw_bg+0x192>
                    _lv_memset(mask_buf, opa, draw_area_w);
  411260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  411262:	9905      	ldr	r1, [sp, #20]
  411264:	9f08      	ldr	r7, [sp, #32]
  411266:	4638      	mov	r0, r7
  411268:	4b10      	ldr	r3, [pc, #64]	; (4112ac <draw_bg+0x358>)
  41126a:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  41126c:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  411270:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  411274:	4419      	add	r1, r3
  411276:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  41127a:	4432      	add	r2, r6
  41127c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41127e:	b212      	sxth	r2, r2
  411280:	b209      	sxth	r1, r1
  411282:	4638      	mov	r0, r7
  411284:	4f0a      	ldr	r7, [pc, #40]	; (4112b0 <draw_bg+0x35c>)
  411286:	47b8      	blx	r7
  411288:	9004      	str	r0, [sp, #16]
  41128a:	e028      	b.n	4112de <draw_bg+0x38a>
  41128c:	00408ba9 	.word	0x00408ba9
  411290:	0041403d 	.word	0x0041403d
  411294:	004147a1 	.word	0x004147a1
  411298:	00415b15 	.word	0x00415b15
  41129c:	0040ef2d 	.word	0x0040ef2d
  4112a0:	0040f0ad 	.word	0x0040f0ad
  4112a4:	0040ee31 	.word	0x0040ee31
  4112a8:	0040bc09 	.word	0x0040bc09
  4112ac:	00415c45 	.word	0x00415c45
  4112b0:	0040ee65 	.word	0x0040ee65
                _lv_memset(mask_buf, opa, draw_area_w);
  4112b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4112b6:	9905      	ldr	r1, [sp, #20]
  4112b8:	9f08      	ldr	r7, [sp, #32]
  4112ba:	4638      	mov	r0, r7
  4112bc:	4bb5      	ldr	r3, [pc, #724]	; (411594 <draw_bg+0x640>)
  4112be:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4112c0:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  4112c4:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  4112c8:	4419      	add	r1, r3
  4112ca:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  4112ce:	4432      	add	r2, r6
  4112d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4112d2:	b212      	sxth	r2, r2
  4112d4:	b209      	sxth	r1, r1
  4112d6:	4638      	mov	r0, r7
  4112d8:	4faf      	ldr	r7, [pc, #700]	; (411598 <draw_bg+0x644>)
  4112da:	47b8      	blx	r7
  4112dc:	9004      	str	r0, [sp, #16]
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
  4112de:	9b04      	ldr	r3, [sp, #16]
  4112e0:	2b02      	cmp	r3, #2
  4112e2:	d061      	beq.n	4113a8 <draw_bg+0x454>
            opa2 = opa;
  4112e4:	9b05      	ldr	r3, [sp, #20]
  4112e6:	9307      	str	r3, [sp, #28]
            if(grad_dir == LV_GRAD_DIR_VER) {
  4112e8:	f1b8 0f01 	cmp.w	r8, #1
  4112ec:	d05f      	beq.n	4113ae <draw_bg+0x45a>
            if(simple_mode && split &&
  4112ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4112f0:	9a06      	ldr	r2, [sp, #24]
  4112f2:	4013      	ands	r3, r2
  4112f4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4112f8:	f000 80e8 	beq.w	4114cc <draw_bg+0x578>
               (y < coords_bg.y1 + rout + 1 ||
  4112fc:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  411300:	442b      	add	r3, r5
  411302:	3301      	adds	r3, #1
            if(simple_mode && split &&
  411304:	429c      	cmp	r4, r3
  411306:	db06      	blt.n	411316 <draw_bg+0x3c2>
                y > coords_bg.y2 - rout - 1)) {
  411308:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  41130c:	1b5b      	subs	r3, r3, r5
  41130e:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
  411310:	429c      	cmp	r4, r3
  411312:	f340 80db 	ble.w	4114cc <draw_bg+0x578>
                fill_area2.x1 = coords_bg.x1;
  411316:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  41131a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x1 + rout - 1;
  41131e:	b2ac      	uxth	r4, r5
  411320:	fa14 f383 	uxtah	r3, r4, r3
  411324:	b29b      	uxth	r3, r3
  411326:	3b01      	subs	r3, #1
  411328:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                fill_area2.y1 = fill_area.y1;
  41132c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  411330:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                fill_area2.y2 = fill_area.y2;
  411334:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  411338:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                _lv_blend_fill(clip, &fill_area2,
  41133c:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411340:	9302      	str	r3, [sp, #8]
  411342:	9b07      	ldr	r3, [sp, #28]
  411344:	9301      	str	r3, [sp, #4]
  411346:	9b04      	ldr	r3, [sp, #16]
  411348:	9300      	str	r3, [sp, #0]
  41134a:	9b08      	ldr	r3, [sp, #32]
  41134c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411350:	a917      	add	r1, sp, #92	; 0x5c
  411352:	980a      	ldr	r0, [sp, #40]	; 0x28
  411354:	4f91      	ldr	r7, [pc, #580]	; (41159c <draw_bg+0x648>)
  411356:	47b8      	blx	r7
                if(grad_dir == LV_GRAD_DIR_VER) {
  411358:	f1b8 0f01 	cmp.w	r8, #1
  41135c:	f000 809c 	beq.w	411498 <draw_bg+0x544>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
  411360:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  411364:	b29a      	uxth	r2, r3
  411366:	1b14      	subs	r4, r2, r4
  411368:	b2a4      	uxth	r4, r4
  41136a:	3401      	adds	r4, #1
  41136c:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x2;
  411370:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  411374:	1b5b      	subs	r3, r3, r5
  411376:	3301      	adds	r3, #1
  411378:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
  41137c:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  411380:	440a      	add	r2, r1
                if(mask_ofs < 0) mask_ofs = 0;
  411382:	1a9b      	subs	r3, r3, r2
  411384:	f100 80a0 	bmi.w	4114c8 <draw_bg+0x574>
                _lv_blend_fill(clip, &fill_area2,
  411388:	f89a 200d 	ldrb.w	r2, [sl, #13]
  41138c:	9202      	str	r2, [sp, #8]
  41138e:	9a07      	ldr	r2, [sp, #28]
  411390:	9201      	str	r2, [sp, #4]
  411392:	9a04      	ldr	r2, [sp, #16]
  411394:	9200      	str	r2, [sp, #0]
  411396:	9a08      	ldr	r2, [sp, #32]
  411398:	4413      	add	r3, r2
  41139a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  41139e:	a917      	add	r1, sp, #92	; 0x5c
  4113a0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4113a2:	4c7e      	ldr	r4, [pc, #504]	; (41159c <draw_bg+0x648>)
  4113a4:	47a0      	blx	r4
                y > coords_bg.y2 - rout - 1)) {
  4113a6:	e0a2      	b.n	4114ee <draw_bg+0x59a>
                opa2 = LV_OPA_COVER;
  4113a8:	23ff      	movs	r3, #255	; 0xff
  4113aa:	9307      	str	r3, [sp, #28]
  4113ac:	e79c      	b.n	4112e8 <draw_bg+0x394>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4113ae:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
  4113b2:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  4113b6:	1ad2      	subs	r2, r2, r3
  4113b8:	b292      	uxth	r2, r2
  4113ba:	3201      	adds	r2, #1
  4113bc:	b212      	sxth	r2, r2
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
  4113be:	1ae3      	subs	r3, r4, r3
  4113c0:	b29b      	uxth	r3, r3
  4113c2:	fa0f fe83 	sxth.w	lr, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  4113c6:	f9ba c008 	ldrsh.w	ip, [sl, #8]
  4113ca:	fb02 f10c 	mul.w	r1, r2, ip
  4113ce:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
  4113d0:	4571      	cmp	r1, lr
  4113d2:	da59      	bge.n	411488 <draw_bg+0x534>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  4113d4:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
  4113d8:	fb00 f702 	mul.w	r7, r0, r2
    if(i >= max) return dsc->bg_grad_color;
  4113dc:	ebbe 2f27 	cmp.w	lr, r7, asr #8
  4113e0:	da57      	bge.n	411492 <draw_bg+0x53e>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  4113e2:	eba0 000c 	sub.w	r0, r0, ip
    d = (s * d) >> 8;
  4113e6:	fb00 f202 	mul.w	r2, r0, r2
  4113ea:	1212      	asrs	r2, r2, #8
    i -= min;
  4113ec:	1a5b      	subs	r3, r3, r1
  4113ee:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  4113f0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  4113f4:	fb93 f3f2 	sdiv	r3, r3, r2
  4113f8:	b2db      	uxtb	r3, r3
  4113fa:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  4113fe:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  411402:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  411406:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
  41140a:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  41140e:	fb0c fe0e 	mul.w	lr, ip, lr
  411412:	fb03 e202 	mla	r2, r3, r2, lr
  411416:	3280      	adds	r2, #128	; 0x80
  411418:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  41141c:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  411420:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  411424:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  411428:	f000 0e07 	and.w	lr, r0, #7
  41142c:	f3c0 3242 	ubfx	r2, r0, #13, #3
  411430:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  411434:	f001 0707 	and.w	r7, r1, #7
  411438:	f3c1 3e42 	ubfx	lr, r1, #13, #3
  41143c:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
  411440:	fb0e fe0c 	mul.w	lr, lr, ip
  411444:	fb02 e203 	mla	r2, r2, r3, lr
  411448:	3280      	adds	r2, #128	; 0x80
  41144a:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  41144e:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  411452:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  411456:	f36e 0b02 	bfi	fp, lr, #0, #3
  41145a:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  41145e:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  411462:	f3c0 2004 	ubfx	r0, r0, #8, #5
  411466:	f3c1 2104 	ubfx	r1, r1, #8, #5
  41146a:	fb01 fc0c 	mul.w	ip, r1, ip
  41146e:	fb00 c303 	mla	r3, r0, r3, ip
  411472:	3380      	adds	r3, #128	; 0x80
  411474:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  411478:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  41147c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  411480:	f363 2b0c 	bfi	fp, r3, #8, #5
  411484:	465b      	mov	r3, fp
  411486:	e001      	b.n	41148c <draw_bg+0x538>
    if(i <= min) return dsc->bg_color;
  411488:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  41148c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  411490:	e72d      	b.n	4112ee <draw_bg+0x39a>
    if(i >= max) return dsc->bg_grad_color;
  411492:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  411496:	e7f9      	b.n	41148c <draw_bg+0x538>
                    fill_area2.x1 = coords_bg.x1 + rout;
  411498:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  41149c:	4423      	add	r3, r4
  41149e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    fill_area2.x2 = coords_bg.x2 - rout;
  4114a2:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4114a6:	1b1b      	subs	r3, r3, r4
  4114a8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
  4114ac:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4114b0:	9302      	str	r3, [sp, #8]
  4114b2:	9b05      	ldr	r3, [sp, #20]
  4114b4:	9301      	str	r3, [sp, #4]
  4114b6:	2301      	movs	r3, #1
  4114b8:	9300      	str	r3, [sp, #0]
  4114ba:	2300      	movs	r3, #0
  4114bc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  4114c0:	a917      	add	r1, sp, #92	; 0x5c
  4114c2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4114c4:	47b8      	blx	r7
  4114c6:	e74b      	b.n	411360 <draw_bg+0x40c>
                if(mask_ofs < 0) mask_ofs = 0;
  4114c8:	2300      	movs	r3, #0
  4114ca:	e75d      	b.n	411388 <draw_bg+0x434>
                if(grad_dir == LV_GRAD_DIR_HOR) {
  4114cc:	f1b8 0f02 	cmp.w	r8, #2
  4114d0:	d034      	beq.n	41153c <draw_bg+0x5e8>
                else if(grad_dir == LV_GRAD_DIR_VER) {
  4114d2:	f1b8 0f01 	cmp.w	r8, #1
  4114d6:	d03f      	beq.n	411558 <draw_bg+0x604>
                else if(other_mask_cnt != 0 || !split) {
  4114d8:	9b06      	ldr	r3, [sp, #24]
  4114da:	f083 0301 	eor.w	r3, r3, #1
  4114de:	b2db      	uxtb	r3, r3
  4114e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4114e2:	2a00      	cmp	r2, #0
  4114e4:	bf18      	it	ne
  4114e6:	f043 0301 	orrne.w	r3, r3, #1
  4114ea:	2b00      	cmp	r3, #0
  4114ec:	d143      	bne.n	411576 <draw_bg+0x622>
            fill_area.y1++;
  4114ee:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  4114f2:	3301      	adds	r3, #1
  4114f4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2++;
  4114f8:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  4114fc:	3301      	adds	r3, #1
  4114fe:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411502:	3601      	adds	r6, #1
  411504:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  411508:	429e      	cmp	r6, r3
  41150a:	dc4b      	bgt.n	4115a4 <draw_bg+0x650>
            int32_t y = h + vdb->area.y1;
  41150c:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
  411510:	4434      	add	r4, r6
            if(y > coords_bg.y1 + rout + 1 &&
  411512:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  411516:	442b      	add	r3, r5
  411518:	3301      	adds	r3, #1
  41151a:	429c      	cmp	r4, r3
  41151c:	f77f aeca 	ble.w	4112b4 <draw_bg+0x360>
               y < coords_bg.y2 - rout - 1) {
  411520:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  411524:	1b5b      	subs	r3, r3, r5
  411526:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
  411528:	429c      	cmp	r4, r3
  41152a:	f6bf aec3 	bge.w	4112b4 <draw_bg+0x360>
                if(simple_mode == false) {
  41152e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411530:	2b00      	cmp	r3, #0
  411532:	f43f ae95 	beq.w	411260 <draw_bg+0x30c>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
  411536:	2301      	movs	r3, #1
  411538:	9304      	str	r3, [sp, #16]
  41153a:	e6d0      	b.n	4112de <draw_bg+0x38a>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
  41153c:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411540:	9302      	str	r3, [sp, #8]
  411542:	9b07      	ldr	r3, [sp, #28]
  411544:	9301      	str	r3, [sp, #4]
  411546:	9b04      	ldr	r3, [sp, #16]
  411548:	9300      	str	r3, [sp, #0]
  41154a:	9b08      	ldr	r3, [sp, #32]
  41154c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41154e:	a915      	add	r1, sp, #84	; 0x54
  411550:	980a      	ldr	r0, [sp, #40]	; 0x28
  411552:	4c13      	ldr	r4, [pc, #76]	; (4115a0 <draw_bg+0x64c>)
  411554:	47a0      	blx	r4
  411556:	e7ca      	b.n	4114ee <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  411558:	f89a 300d 	ldrb.w	r3, [sl, #13]
  41155c:	9302      	str	r3, [sp, #8]
  41155e:	9b07      	ldr	r3, [sp, #28]
  411560:	9301      	str	r3, [sp, #4]
  411562:	9b04      	ldr	r3, [sp, #16]
  411564:	9300      	str	r3, [sp, #0]
  411566:	9b08      	ldr	r3, [sp, #32]
  411568:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  41156c:	a915      	add	r1, sp, #84	; 0x54
  41156e:	980a      	ldr	r0, [sp, #40]	; 0x28
  411570:	4c0a      	ldr	r4, [pc, #40]	; (41159c <draw_bg+0x648>)
  411572:	47a0      	blx	r4
  411574:	e7bb      	b.n	4114ee <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  411576:	f89a 300d 	ldrb.w	r3, [sl, #13]
  41157a:	9302      	str	r3, [sp, #8]
  41157c:	9b07      	ldr	r3, [sp, #28]
  41157e:	9301      	str	r3, [sp, #4]
  411580:	9b04      	ldr	r3, [sp, #16]
  411582:	9300      	str	r3, [sp, #0]
  411584:	9b08      	ldr	r3, [sp, #32]
  411586:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  41158a:	a915      	add	r1, sp, #84	; 0x54
  41158c:	980a      	ldr	r0, [sp, #40]	; 0x28
  41158e:	4c03      	ldr	r4, [pc, #12]	; (41159c <draw_bg+0x648>)
  411590:	47a0      	blx	r4
  411592:	e7ac      	b.n	4114ee <draw_bg+0x59a>
  411594:	00415c45 	.word	0x00415c45
  411598:	0040ee65 	.word	0x0040ee65
  41159c:	0040bc09 	.word	0x0040bc09
  4115a0:	0040bd29 	.word	0x0040bd29
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
  4115a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4115a6:	f1b8 0f00 	cmp.w	r8, #0
  4115aa:	bf08      	it	eq
  4115ac:	2b00      	cmpeq	r3, #0
  4115ae:	d101      	bne.n	4115b4 <draw_bg+0x660>
  4115b0:	9b06      	ldr	r3, [sp, #24]
  4115b2:	b95b      	cbnz	r3, 4115cc <draw_bg+0x678>
        if(grad_map) _lv_mem_buf_release(grad_map);
  4115b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4115b6:	b113      	cbz	r3, 4115be <draw_bg+0x66a>
  4115b8:	4618      	mov	r0, r3
  4115ba:	4b37      	ldr	r3, [pc, #220]	; (411698 <draw_bg+0x744>)
  4115bc:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
  4115be:	9810      	ldr	r0, [sp, #64]	; 0x40
  4115c0:	4b36      	ldr	r3, [pc, #216]	; (41169c <draw_bg+0x748>)
  4115c2:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  4115c4:	9808      	ldr	r0, [sp, #32]
  4115c6:	4b34      	ldr	r3, [pc, #208]	; (411698 <draw_bg+0x744>)
  4115c8:	4798      	blx	r3
  4115ca:	e510      	b.n	410fee <draw_bg+0x9a>
            fill_area.x1 = coords_bg.x1 + rout;
  4115cc:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4115d0:	b2ad      	uxth	r5, r5
  4115d2:	442b      	add	r3, r5
  4115d4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2 - rout;
  4115d8:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4115dc:	1b5b      	subs	r3, r3, r5
  4115de:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1;
  4115e2:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4115e6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y1 + rout;
  4115ea:	fa15 f383 	uxtah	r3, r5, r3
  4115ee:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  4115f2:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4115f6:	9302      	str	r3, [sp, #8]
  4115f8:	9b05      	ldr	r3, [sp, #20]
  4115fa:	9301      	str	r3, [sp, #4]
  4115fc:	2301      	movs	r3, #1
  4115fe:	9300      	str	r3, [sp, #0]
  411600:	2300      	movs	r3, #0
  411602:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411606:	a915      	add	r1, sp, #84	; 0x54
  411608:	980a      	ldr	r0, [sp, #40]	; 0x28
  41160a:	4c25      	ldr	r4, [pc, #148]	; (4116a0 <draw_bg+0x74c>)
  41160c:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
  41160e:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	; 0x8e
  411612:	b28b      	uxth	r3, r1
  411614:	1b5b      	subs	r3, r3, r5
  411616:	b21b      	sxth	r3, r3
  411618:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
  41161c:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
  411620:	4293      	cmp	r3, r2
  411622:	dc03      	bgt.n	41162c <draw_bg+0x6d8>
  411624:	b293      	uxth	r3, r2
  411626:	3301      	adds	r3, #1
  411628:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2;
  41162c:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  411630:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411634:	9302      	str	r3, [sp, #8]
  411636:	9f05      	ldr	r7, [sp, #20]
  411638:	9701      	str	r7, [sp, #4]
  41163a:	2601      	movs	r6, #1
  41163c:	9600      	str	r6, [sp, #0]
  41163e:	2300      	movs	r3, #0
  411640:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411644:	a915      	add	r1, sp, #84	; 0x54
  411646:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  41164a:	4640      	mov	r0, r8
  41164c:	4c14      	ldr	r4, [pc, #80]	; (4116a0 <draw_bg+0x74c>)
  41164e:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
  411650:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  411654:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2;
  411658:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  41165c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1 + rout + 1;
  411660:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411664:	442b      	add	r3, r5
  411666:	b29b      	uxth	r3, r3
  411668:	4433      	add	r3, r6
  41166a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2 - rout - 1;
  41166e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  411672:	1b5b      	subs	r3, r3, r5
  411674:	b29b      	uxth	r3, r3
  411676:	3b01      	subs	r3, #1
  411678:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  41167c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411680:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411684:	9302      	str	r3, [sp, #8]
  411686:	9701      	str	r7, [sp, #4]
  411688:	9600      	str	r6, [sp, #0]
  41168a:	2300      	movs	r3, #0
  41168c:	a915      	add	r1, sp, #84	; 0x54
  41168e:	4640      	mov	r0, r8
  411690:	47a0      	blx	r4
  411692:	e78f      	b.n	4115b4 <draw_bg+0x660>
  411694:	4770      	bx	lr
  411696:	bf00      	nop
  411698:	004158c5 	.word	0x004158c5
  41169c:	0040eeb5 	.word	0x0040eeb5
  4116a0:	0040bc09 	.word	0x0040bc09

004116a4 <lv_draw_rect_dsc_init>:
{
  4116a4:	b510      	push	{r4, lr}
  4116a6:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
  4116a8:	2154      	movs	r1, #84	; 0x54
  4116aa:	4b0e      	ldr	r3, [pc, #56]	; (4116e4 <lv_draw_rect_dsc_init+0x40>)
  4116ac:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
  4116ae:	4b0e      	ldr	r3, [pc, #56]	; (4116e8 <lv_draw_rect_dsc_init+0x44>)
  4116b0:	881b      	ldrh	r3, [r3, #0]
  4116b2:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
  4116b4:	2300      	movs	r3, #0
  4116b6:	80a3      	strh	r3, [r4, #4]
    dsc->border_color = LV_COLOR_BLACK;
  4116b8:	81e3      	strh	r3, [r4, #14]
    dsc->pattern_recolor = LV_COLOR_BLACK;
  4116ba:	86a3      	strh	r3, [r4, #52]	; 0x34
    dsc->value_color = LV_COLOR_BLACK;
  4116bc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
  4116c0:	8423      	strh	r3, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
  4116c2:	23ff      	movs	r3, #255	; 0xff
  4116c4:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
  4116c6:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
  4116c8:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
  4116ca:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
  4116cc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
  4116d0:	4a06      	ldr	r2, [pc, #24]	; (4116ec <lv_draw_rect_dsc_init+0x48>)
  4116d2:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
  4116d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
  4116d8:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
  4116da:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
  4116de:	230f      	movs	r3, #15
  4116e0:	8263      	strh	r3, [r4, #18]
  4116e2:	bd10      	pop	{r4, pc}
  4116e4:	00415ca1 	.word	0x00415ca1
  4116e8:	004213d8 	.word	0x004213d8
  4116ec:	2040002c 	.word	0x2040002c

004116f0 <lv_draw_rect>:
{
  4116f0:	b570      	push	{r4, r5, r6, lr}
  4116f2:	88c3      	ldrh	r3, [r0, #6]
  4116f4:	8844      	ldrh	r4, [r0, #2]
  4116f6:	1b1b      	subs	r3, r3, r4
  4116f8:	b29b      	uxth	r3, r3
  4116fa:	3301      	adds	r3, #1
  4116fc:	b21b      	sxth	r3, r3
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
  4116fe:	2b00      	cmp	r3, #0
  411700:	dd25      	ble.n	41174e <lv_draw_rect+0x5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411702:	8883      	ldrh	r3, [r0, #4]
  411704:	8804      	ldrh	r4, [r0, #0]
  411706:	1b1b      	subs	r3, r3, r4
  411708:	b29b      	uxth	r3, r3
  41170a:	3301      	adds	r3, #1
  41170c:	b21b      	sxth	r3, r3
  41170e:	2b00      	cmp	r3, #0
  411710:	dd1d      	ble.n	41174e <lv_draw_rect+0x5e>
  411712:	4616      	mov	r6, r2
  411714:	460d      	mov	r5, r1
  411716:	4604      	mov	r4, r0
    draw_shadow(coords, clip, dsc);
  411718:	4b0d      	ldr	r3, [pc, #52]	; (411750 <lv_draw_rect+0x60>)
  41171a:	4798      	blx	r3
    draw_bg(coords, clip, dsc);
  41171c:	4632      	mov	r2, r6
  41171e:	4629      	mov	r1, r5
  411720:	4620      	mov	r0, r4
  411722:	4b0c      	ldr	r3, [pc, #48]	; (411754 <lv_draw_rect+0x64>)
  411724:	4798      	blx	r3
    draw_pattern(coords, clip, dsc);
  411726:	4632      	mov	r2, r6
  411728:	4629      	mov	r1, r5
  41172a:	4620      	mov	r0, r4
  41172c:	4b0a      	ldr	r3, [pc, #40]	; (411758 <lv_draw_rect+0x68>)
  41172e:	4798      	blx	r3
    draw_border(coords, clip, dsc);
  411730:	4632      	mov	r2, r6
  411732:	4629      	mov	r1, r5
  411734:	4620      	mov	r0, r4
  411736:	4b09      	ldr	r3, [pc, #36]	; (41175c <lv_draw_rect+0x6c>)
  411738:	4798      	blx	r3
    draw_value_str(coords, clip, dsc);
  41173a:	4632      	mov	r2, r6
  41173c:	4629      	mov	r1, r5
  41173e:	4620      	mov	r0, r4
  411740:	4b07      	ldr	r3, [pc, #28]	; (411760 <lv_draw_rect+0x70>)
  411742:	4798      	blx	r3
    draw_outline(coords, clip, dsc);
  411744:	4632      	mov	r2, r6
  411746:	4629      	mov	r1, r5
  411748:	4620      	mov	r0, r4
  41174a:	4b06      	ldr	r3, [pc, #24]	; (411764 <lv_draw_rect+0x74>)
  41174c:	4798      	blx	r3
  41174e:	bd70      	pop	{r4, r5, r6, pc}
  411750:	0040f44d 	.word	0x0040f44d
  411754:	00410f55 	.word	0x00410f55
  411758:	00410b8d 	.word	0x00410b8d
  41175c:	00410825 	.word	0x00410825
  411760:	00410e61 	.word	0x00410e61
  411764:	00410769 	.word	0x00410769

00411768 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
  411768:	b5f0      	push	{r4, r5, r6, r7, lr}
  41176a:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
  41176c:	2400      	movs	r4, #0
  41176e:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  411772:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
  411774:	7804      	ldrb	r4, [r0, #0]
  411776:	f004 041f 	and.w	r4, r4, #31
  41177a:	2c06      	cmp	r4, #6
  41177c:	bf18      	it	ne
  41177e:	2c04      	cmpne	r4, #4
  411780:	d010      	beq.n	4117a4 <lv_img_buf_get_px_color+0x3c>
  411782:	2c05      	cmp	r4, #5
  411784:	d00e      	beq.n	4117a4 <lv_img_buf_get_px_color+0x3c>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  411786:	2c07      	cmp	r4, #7
  411788:	d02b      	beq.n	4117e2 <lv_img_buf_get_px_color+0x7a>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  41178a:	2c08      	cmp	r4, #8
  41178c:	d03f      	beq.n	41180e <lv_img_buf_get_px_color+0xa6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  41178e:	2c09      	cmp	r4, #9
  411790:	d055      	beq.n	41183e <lv_img_buf_get_px_color+0xd6>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  411792:	2c0a      	cmp	r4, #10
  411794:	d06c      	beq.n	411870 <lv_img_buf_get_px_color+0x108>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  411796:	3c0b      	subs	r4, #11
  411798:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  41179a:	2c03      	cmp	r4, #3
  41179c:	d81d      	bhi.n	4117da <lv_img_buf_get_px_color+0x72>
        p_color = color;
  41179e:	f8ad 3004 	strh.w	r3, [sp, #4]
  4117a2:	e01a      	b.n	4117da <lv_img_buf_get_px_color+0x72>
  4117a4:	4616      	mov	r6, r2
  4117a6:	460f      	mov	r7, r1
  4117a8:	4604      	mov	r4, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  4117aa:	7800      	ldrb	r0, [r0, #0]
  4117ac:	f000 001f 	and.w	r0, r0, #31
  4117b0:	4b35      	ldr	r3, [pc, #212]	; (411888 <lv_img_buf_get_px_color+0x120>)
  4117b2:	4798      	blx	r3
  4117b4:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  4117b8:	6822      	ldr	r2, [r4, #0]
  4117ba:	f3c2 228a 	ubfx	r2, r2, #10, #11
  4117be:	fb02 7206 	mla	r2, r2, r6, r7
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  4117c2:	fb00 5002 	mla	r0, r0, r2, r5
    uint8_t * d8 = (uint8_t *)dst;
  4117c6:	aa01      	add	r2, sp, #4
  4117c8:	2302      	movs	r3, #2
  4117ca:	e004      	b.n	4117d6 <lv_img_buf_get_px_color+0x6e>
        *d8 = *s8;
  4117cc:	f810 1b01 	ldrb.w	r1, [r0], #1
  4117d0:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  4117d4:	3b01      	subs	r3, #1
    while(len) {
  4117d6:	2b00      	cmp	r3, #0
  4117d8:	d1f8      	bne.n	4117cc <lv_img_buf_get_px_color+0x64>
    }
    return p_color;
}
  4117da:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  4117de:	b003      	add	sp, #12
  4117e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t bit = x & 0x7;
  4117e2:	f001 0407 	and.w	r4, r1, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  4117e6:	6800      	ldr	r0, [r0, #0]
  4117e8:	f3c0 208a 	ubfx	r0, r0, #10, #11
  4117ec:	3007      	adds	r0, #7
  4117ee:	10c0      	asrs	r0, r0, #3
  4117f0:	fb00 f202 	mul.w	r2, r0, r2
  4117f4:	eb02 02e1 	add.w	r2, r2, r1, asr #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  4117f8:	18a8      	adds	r0, r5, r2
  4117fa:	7a03      	ldrb	r3, [r0, #8]
  4117fc:	f1c4 0207 	rsb	r2, r4, #7
  411800:	2101      	movs	r1, #1
  411802:	4091      	lsls	r1, r2
  411804:	400b      	ands	r3, r1
  411806:	4113      	asrs	r3, r2
  411808:	f8ad 3004 	strh.w	r3, [sp, #4]
  41180c:	e7e5      	b.n	4117da <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x3) * 2;
  41180e:	f001 0303 	and.w	r3, r1, #3
  411812:	005b      	lsls	r3, r3, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  411814:	6800      	ldr	r0, [r0, #0]
  411816:	f3c0 208a 	ubfx	r0, r0, #10, #11
  41181a:	3003      	adds	r0, #3
  41181c:	1080      	asrs	r0, r0, #2
  41181e:	fb00 f202 	mul.w	r2, r0, r2
  411822:	eb02 02a1 	add.w	r2, r2, r1, asr #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  411826:	18a8      	adds	r0, r5, r2
  411828:	7c02      	ldrb	r2, [r0, #16]
  41182a:	f1c3 0306 	rsb	r3, r3, #6
  41182e:	2103      	movs	r1, #3
  411830:	4099      	lsls	r1, r3
  411832:	400a      	ands	r2, r1
  411834:	fa42 f303 	asr.w	r3, r2, r3
  411838:	f8ad 3004 	strh.w	r3, [sp, #4]
  41183c:	e7cd      	b.n	4117da <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x1) * 4;
  41183e:	f001 0301 	and.w	r3, r1, #1
  411842:	009b      	lsls	r3, r3, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  411844:	6800      	ldr	r0, [r0, #0]
  411846:	f3c0 208a 	ubfx	r0, r0, #10, #11
  41184a:	3001      	adds	r0, #1
  41184c:	1040      	asrs	r0, r0, #1
  41184e:	fb00 f202 	mul.w	r2, r0, r2
  411852:	eb02 0261 	add.w	r2, r2, r1, asr #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  411856:	18a8      	adds	r0, r5, r2
  411858:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  41185c:	f1c3 0304 	rsb	r3, r3, #4
  411860:	210f      	movs	r1, #15
  411862:	4099      	lsls	r1, r3
  411864:	400a      	ands	r2, r1
  411866:	fa42 f303 	asr.w	r3, r2, r3
  41186a:	f8ad 3004 	strh.w	r3, [sp, #4]
  41186e:	e7b4      	b.n	4117da <lv_img_buf_get_px_color+0x72>
        uint32_t px  = dsc->header.w * y + x;
  411870:	6800      	ldr	r0, [r0, #0]
  411872:	f3c0 208a 	ubfx	r0, r0, #10, #11
  411876:	fb00 1202 	mla	r2, r0, r2, r1
        p_color.full = buf_u8[px];
  41187a:	18a8      	adds	r0, r5, r2
  41187c:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
  411880:	f8ad 3004 	strh.w	r3, [sp, #4]
  411884:	e7a9      	b.n	4117da <lv_img_buf_get_px_color+0x72>
  411886:	bf00      	nop
  411888:	0040c701 	.word	0x0040c701

0041188c <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
  41188c:	b5f0      	push	{r4, r5, r6, r7, lr}
  41188e:	b085      	sub	sp, #20
  411890:	4604      	mov	r4, r0
  411892:	460e      	mov	r6, r1
  411894:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  411896:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  411898:	7803      	ldrb	r3, [r0, #0]
  41189a:	f003 031f 	and.w	r3, r3, #31
  41189e:	2b05      	cmp	r3, #5
  4118a0:	d00a      	beq.n	4118b8 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
  4118a2:	2b0b      	cmp	r3, #11
  4118a4:	d012      	beq.n	4118cc <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
  4118a6:	2b0c      	cmp	r3, #12
  4118a8:	d029      	beq.n	4118fe <lv_img_buf_get_px_alpha+0x72>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
  4118aa:	2b0d      	cmp	r3, #13
  4118ac:	d043      	beq.n	411936 <lv_img_buf_get_px_alpha+0xaa>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  4118ae:	2b0e      	cmp	r3, #14
  4118b0:	d05f      	beq.n	411972 <lv_img_buf_get_px_alpha+0xe6>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
  4118b2:	20ff      	movs	r0, #255	; 0xff
}
  4118b4:	b005      	add	sp, #20
  4118b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
  4118b8:	6801      	ldr	r1, [r0, #0]
  4118ba:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4118be:	fb01 6102 	mla	r1, r1, r2, r6
  4118c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  4118c6:	440d      	add	r5, r1
  4118c8:	78a8      	ldrb	r0, [r5, #2]
  4118ca:	e7f3      	b.n	4118b4 <lv_img_buf_get_px_alpha+0x28>
        uint8_t bit = x & 0x7;
  4118cc:	f001 0207 	and.w	r2, r1, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
  4118d0:	6801      	ldr	r1, [r0, #0]
  4118d2:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4118d6:	3107      	adds	r1, #7
  4118d8:	10c9      	asrs	r1, r1, #3
  4118da:	fb01 f107 	mul.w	r1, r1, r7
  4118de:	eb01 01e6 	add.w	r1, r1, r6, asr #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  4118e2:	5c6b      	ldrb	r3, [r5, r1]
  4118e4:	f1c2 0207 	rsb	r2, r2, #7
  4118e8:	2101      	movs	r1, #1
  4118ea:	4091      	lsls	r1, r2
  4118ec:	400b      	ands	r3, r1
  4118ee:	4113      	asrs	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
  4118f0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4118f4:	d101      	bne.n	4118fa <lv_img_buf_get_px_alpha+0x6e>
  4118f6:	20ff      	movs	r0, #255	; 0xff
  4118f8:	e7dc      	b.n	4118b4 <lv_img_buf_get_px_alpha+0x28>
  4118fa:	2000      	movs	r0, #0
  4118fc:	e7da      	b.n	4118b4 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  4118fe:	4b20      	ldr	r3, [pc, #128]	; (411980 <lv_img_buf_get_px_alpha+0xf4>)
  411900:	681b      	ldr	r3, [r3, #0]
  411902:	9300      	str	r3, [sp, #0]
        uint8_t bit = (x & 0x3) * 2;
  411904:	f001 0203 	and.w	r2, r1, #3
  411908:	0052      	lsls	r2, r2, #1
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
  41190a:	6801      	ldr	r1, [r0, #0]
  41190c:	f3c1 218a 	ubfx	r1, r1, #10, #11
  411910:	3103      	adds	r1, #3
  411912:	1089      	asrs	r1, r1, #2
  411914:	fb01 f107 	mul.w	r1, r1, r7
  411918:	eb01 01a6 	add.w	r1, r1, r6, asr #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  41191c:	5c6b      	ldrb	r3, [r5, r1]
  41191e:	f1c2 0206 	rsb	r2, r2, #6
  411922:	2103      	movs	r1, #3
  411924:	4091      	lsls	r1, r2
  411926:	400b      	ands	r3, r1
  411928:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  41192a:	aa04      	add	r2, sp, #16
  41192c:	fa52 f383 	uxtab	r3, r2, r3
  411930:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  411934:	e7be      	b.n	4118b4 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
  411936:	4b13      	ldr	r3, [pc, #76]	; (411984 <lv_img_buf_get_px_alpha+0xf8>)
  411938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  41193a:	f10d 0e10 	add.w	lr, sp, #16
  41193e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
  411942:	f006 0201 	and.w	r2, r6, #1
  411946:	0092      	lsls	r2, r2, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
  411948:	6821      	ldr	r1, [r4, #0]
  41194a:	f3c1 218a 	ubfx	r1, r1, #10, #11
  41194e:	3101      	adds	r1, #1
  411950:	1049      	asrs	r1, r1, #1
  411952:	fb01 f107 	mul.w	r1, r1, r7
  411956:	eb01 0166 	add.w	r1, r1, r6, asr #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  41195a:	5c6b      	ldrb	r3, [r5, r1]
  41195c:	f1c2 0204 	rsb	r2, r2, #4
  411960:	210f      	movs	r1, #15
  411962:	4091      	lsls	r1, r2
  411964:	400b      	ands	r3, r1
  411966:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  411968:	fa5e f383 	uxtab	r3, lr, r3
  41196c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  411970:	e7a0      	b.n	4118b4 <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
  411972:	6801      	ldr	r1, [r0, #0]
  411974:	f3c1 218a 	ubfx	r1, r1, #10, #11
  411978:	fb01 6102 	mla	r1, r1, r2, r6
        return buf_u8[px];
  41197c:	5c68      	ldrb	r0, [r5, r1]
  41197e:	e799      	b.n	4118b4 <lv_img_buf_get_px_alpha+0x28>
  411980:	004213dc 	.word	0x004213dc
  411984:	004213e0 	.word	0x004213e0

00411988 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
  411988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41198c:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
  41198e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  411992:	021b      	lsls	r3, r3, #8
  411994:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
  411996:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  41199a:	021b      	lsls	r3, r3, #8
  41199c:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
  41199e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  4119a2:	4e3f      	ldr	r6, [pc, #252]	; (411aa0 <_lv_img_buf_transform_init+0x118>)
  4119a4:	fb86 3200 	smull	r3, r2, r6, r0
  4119a8:	17c3      	asrs	r3, r0, #31
  4119aa:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  4119ae:	b21b      	sxth	r3, r3
    int32_t angle_high = angle_low + 1;
  4119b0:	f103 0901 	add.w	r9, r3, #1
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
  4119b4:	f06f 0709 	mvn.w	r7, #9
  4119b8:	fb07 0703 	mla	r7, r7, r3, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
  4119bc:	b29d      	uxth	r5, r3
  4119be:	4268      	negs	r0, r5
  4119c0:	b200      	sxth	r0, r0
  4119c2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 411aac <_lv_img_buf_transform_init+0x124>
  4119c6:	47d0      	blx	sl
  4119c8:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(-angle_high);
  4119ca:	fa1f f989 	uxth.w	r9, r9
  4119ce:	f1c9 0000 	rsb	r0, r9, #0
  4119d2:	b200      	sxth	r0, r0
  4119d4:	47d0      	blx	sl
  4119d6:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
  4119d8:	f1c5 005a 	rsb	r0, r5, #90	; 0x5a
  4119dc:	b200      	sxth	r0, r0
  4119de:	47d0      	blx	sl
  4119e0:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
  4119e2:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
  4119e6:	b200      	sxth	r0, r0
  4119e8:	47d0      	blx	sl

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  4119ea:	f1c7 020a 	rsb	r2, r7, #10
  4119ee:	fb0b f307 	mul.w	r3, fp, r7
  4119f2:	fb02 3308 	mla	r3, r2, r8, r3
  4119f6:	fb86 e103 	smull	lr, r1, r6, r3
  4119fa:	17db      	asrs	r3, r3, #31
  4119fc:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  411a00:	fb00 f007 	mul.w	r0, r0, r7
  411a04:	fb02 0005 	mla	r0, r2, r5, r0
  411a08:	fb86 2600 	smull	r2, r6, r6, r0
  411a0c:	17c0      	asrs	r0, r0, #31
  411a0e:	ebc0 00a6 	rsb	r0, r0, r6, asr #2

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411a12:	115b      	asrs	r3, r3, #5
  411a14:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411a16:	1140      	asrs	r0, r0, #5
  411a18:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
  411a1a:	7ca0      	ldrb	r0, [r4, #18]
  411a1c:	4b21      	ldr	r3, [pc, #132]	; (411aa4 <_lv_img_buf_transform_init+0x11c>)
  411a1e:	4798      	blx	r3
  411a20:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411a24:	f360 0300 	bfi	r3, r0, #0, #1
  411a28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
  411a2c:	7ca0      	ldrb	r0, [r4, #18]
  411a2e:	4b1e      	ldr	r3, [pc, #120]	; (411aa8 <_lv_img_buf_transform_init+0x120>)
  411a30:	4798      	blx	r3
  411a32:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411a36:	f360 0341 	bfi	r3, r0, #1, #1
  411a3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  411a3e:	7ca2      	ldrb	r2, [r4, #18]
  411a40:	1f13      	subs	r3, r2, #4
  411a42:	b2db      	uxtb	r3, r3
  411a44:	2b02      	cmp	r3, #2
  411a46:	d924      	bls.n	411a92 <_lv_img_buf_transform_init+0x10a>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    }
    else {
        dsc->tmp.native_color = 0;
  411a48:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411a4c:	f36f 0382 	bfc	r3, #2, #1
  411a50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
  411a54:	6823      	ldr	r3, [r4, #0]
  411a56:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
  411a58:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
  411a5a:	f003 031f 	and.w	r3, r3, #31
  411a5e:	f362 0304 	bfi	r3, r2, #0, #5
  411a62:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
  411a64:	88a2      	ldrh	r2, [r4, #4]
  411a66:	69a3      	ldr	r3, [r4, #24]
  411a68:	f362 2394 	bfi	r3, r2, #10, #11
  411a6c:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
  411a6e:	88e2      	ldrh	r2, [r4, #6]
  411a70:	0c1b      	lsrs	r3, r3, #16
  411a72:	f362 134f 	bfi	r3, r2, #5, #11
  411a76:	8363      	strh	r3, [r4, #26]

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
  411a78:	89e2      	ldrh	r2, [r4, #14]
  411a7a:	0853      	lsrs	r3, r2, #1
  411a7c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  411a80:	fb93 f3f2 	sdiv	r3, r3, r2
  411a84:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
  411a86:	23ff      	movs	r3, #255	; 0xff
  411a88:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
  411a8a:	8a23      	ldrh	r3, [r4, #16]
  411a8c:	82a3      	strh	r3, [r4, #20]
  411a8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dsc->tmp.native_color = 1;
  411a92:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411a96:	f043 0304 	orr.w	r3, r3, #4
  411a9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  411a9e:	e7d9      	b.n	411a54 <_lv_img_buf_transform_init+0xcc>
  411aa0:	66666667 	.word	0x66666667
  411aa4:	0040c733 	.word	0x0040c733
  411aa8:	0040c747 	.word	0x0040c747
  411aac:	004155fd 	.word	0x004155fd

00411ab0 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
  411ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411ab4:	b083      	sub	sp, #12
  411ab6:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  411aba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
  411abc:	2b00      	cmp	r3, #0
  411abe:	bf08      	it	eq
  411ac0:	f5be 7f80 	cmpeq.w	lr, #256	; 0x100
  411ac4:	d109      	bne.n	411ada <_lv_img_buf_get_transformed_area+0x2a>
        res->x1 = 0;
  411ac6:	2300      	movs	r3, #0
  411ac8:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
  411aca:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
  411acc:	3901      	subs	r1, #1
  411ace:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
  411ad0:	3a01      	subs	r2, #1
  411ad2:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
  411ad4:	b003      	add	sp, #12
  411ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411ada:	461f      	mov	r7, r3
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
  411adc:	f9b5 6000 	ldrsh.w	r6, [r5]
  411ae0:	4276      	negs	r6, r6
  411ae2:	fb0e f606 	mul.w	r6, lr, r6
  411ae6:	1236      	asrs	r6, r6, #8
  411ae8:	3e01      	subs	r6, #1
  411aea:	b2b6      	uxth	r6, r6
  411aec:	8006      	strh	r6, [r0, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
  411aee:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  411af2:	4264      	negs	r4, r4
  411af4:	fb04 f40e 	mul.w	r4, r4, lr
  411af8:	1224      	asrs	r4, r4, #8
  411afa:	3c01      	subs	r4, #1
  411afc:	b2a4      	uxth	r4, r4
  411afe:	8044      	strh	r4, [r0, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
  411b00:	f9b5 3000 	ldrsh.w	r3, [r5]
  411b04:	1ac9      	subs	r1, r1, r3
  411b06:	fb01 f10e 	mul.w	r1, r1, lr
  411b0a:	1209      	asrs	r1, r1, #8
  411b0c:	3102      	adds	r1, #2
  411b0e:	b289      	uxth	r1, r1
  411b10:	8081      	strh	r1, [r0, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
  411b12:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  411b16:	1ad3      	subs	r3, r2, r3
  411b18:	fb03 f30e 	mul.w	r3, r3, lr
  411b1c:	121b      	asrs	r3, r3, #8
  411b1e:	3302      	adds	r3, #2
  411b20:	b29b      	uxth	r3, r3
  411b22:	80c3      	strh	r3, [r0, #6]
    if(angle == 0) {
  411b24:	b967      	cbnz	r7, 411b40 <_lv_img_buf_get_transformed_area+0x90>
        res->x1 += pivot->x;
  411b26:	882a      	ldrh	r2, [r5, #0]
  411b28:	4416      	add	r6, r2
  411b2a:	8006      	strh	r6, [r0, #0]
        res->y1 += pivot->y;
  411b2c:	886a      	ldrh	r2, [r5, #2]
  411b2e:	4414      	add	r4, r2
  411b30:	8044      	strh	r4, [r0, #2]
        res->x2 += pivot->x;
  411b32:	882a      	ldrh	r2, [r5, #0]
  411b34:	4411      	add	r1, r2
  411b36:	8081      	strh	r1, [r0, #4]
        res->y2 += pivot->y;
  411b38:	886a      	ldrh	r2, [r5, #2]
  411b3a:	4413      	add	r3, r2
  411b3c:	80c3      	strh	r3, [r0, #6]
        return;
  411b3e:	e7c9      	b.n	411ad4 <_lv_img_buf_get_transformed_area+0x24>
  411b40:	4604      	mov	r4, r0
    int32_t angle_low = angle / 10;
  411b42:	f8df 8150 	ldr.w	r8, [pc, #336]	; 411c94 <_lv_img_buf_get_transformed_area+0x1e4>
  411b46:	fb88 3007 	smull	r3, r0, r8, r7
  411b4a:	17fe      	asrs	r6, r7, #31
  411b4c:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
  411b50:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
  411b52:	f106 0a01 	add.w	sl, r6, #1
    int32_t angle_rem = angle  - (angle_low * 10);
  411b56:	f06f 0009 	mvn.w	r0, #9
  411b5a:	fb00 7706 	mla	r7, r0, r6, r7
    int32_t s1 = _lv_trigo_sin(angle_low);
  411b5e:	4630      	mov	r0, r6
  411b60:	f8df 9134 	ldr.w	r9, [pc, #308]	; 411c98 <_lv_img_buf_get_transformed_area+0x1e8>
  411b64:	47c8      	blx	r9
  411b66:	9001      	str	r0, [sp, #4]
    int32_t s2 = _lv_trigo_sin(angle_high);
  411b68:	fa0f f08a 	sxth.w	r0, sl
  411b6c:	47c8      	blx	r9
  411b6e:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
  411b70:	f106 005a 	add.w	r0, r6, #90	; 0x5a
  411b74:	b200      	sxth	r0, r0
  411b76:	47c8      	blx	r9
  411b78:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
  411b7a:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
  411b7e:	b200      	sxth	r0, r0
  411b80:	47c8      	blx	r9
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  411b82:	f1c7 030a 	rsb	r3, r7, #10
  411b86:	fb0b fb07 	mul.w	fp, fp, r7
  411b8a:	9a01      	ldr	r2, [sp, #4]
  411b8c:	fb03 bb02 	mla	fp, r3, r2, fp
  411b90:	fb88 210b 	smull	r2, r1, r8, fp
  411b94:	ea4f 72eb 	mov.w	r2, fp, asr #31
  411b98:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  411b9c:	fb00 f007 	mul.w	r0, r0, r7
  411ba0:	fb03 0606 	mla	r6, r3, r6, r0
  411ba4:	fb88 3806 	smull	r3, r8, r8, r6
  411ba8:	17f6      	asrs	r6, r6, #31
  411baa:	ebc6 08a8 	rsb	r8, r6, r8, asr #2
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411bae:	1152      	asrs	r2, r2, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411bb0:	ea4f 1868 	mov.w	r8, r8, asr #5
    xt = res->x1;
  411bb4:	f9b4 0000 	ldrsh.w	r0, [r4]
    yt = res->y1;
  411bb8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  411bbc:	fb00 f608 	mul.w	r6, r0, r8
  411bc0:	fb03 f102 	mul.w	r1, r3, r2
  411bc4:	eba6 0c01 	sub.w	ip, r6, r1
  411bc8:	882f      	ldrh	r7, [r5, #0]
  411bca:	eb07 2cac 	add.w	ip, r7, ip, asr #10
  411bce:	fa0f fc8c 	sxth.w	ip, ip
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  411bd2:	fb00 f002 	mul.w	r0, r0, r2
  411bd6:	fb03 f308 	mul.w	r3, r3, r8
  411bda:	eb00 0e03 	add.w	lr, r0, r3
  411bde:	886d      	ldrh	r5, [r5, #2]
  411be0:	eb05 2eae 	add.w	lr, r5, lr, asr #10
  411be4:	fa0f fe8e 	sxth.w	lr, lr
    xt = res->x2;
  411be8:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  411bec:	fb09 fb08 	mul.w	fp, r9, r8
  411bf0:	ebab 0101 	sub.w	r1, fp, r1
  411bf4:	eb07 21a1 	add.w	r1, r7, r1, asr #10
  411bf8:	b209      	sxth	r1, r1
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  411bfa:	fb09 f902 	mul.w	r9, r9, r2
  411bfe:	444b      	add	r3, r9
  411c00:	eb05 23a3 	add.w	r3, r5, r3, asr #10
  411c04:	b21b      	sxth	r3, r3
    yt = res->y2;
  411c06:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  411c0a:	fb0a f202 	mul.w	r2, sl, r2
  411c0e:	1ab6      	subs	r6, r6, r2
  411c10:	eb07 26a6 	add.w	r6, r7, r6, asr #10
  411c14:	b236      	sxth	r6, r6
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  411c16:	fb0a f808 	mul.w	r8, sl, r8
  411c1a:	4440      	add	r0, r8
  411c1c:	eb05 20a0 	add.w	r0, r5, r0, asr #10
  411c20:	b200      	sxth	r0, r0
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  411c22:	ebab 0202 	sub.w	r2, fp, r2
  411c26:	eb07 27a2 	add.w	r7, r7, r2, asr #10
  411c2a:	b23f      	sxth	r7, r7
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  411c2c:	44c8      	add	r8, r9
  411c2e:	eb05 25a8 	add.w	r5, r5, r8, asr #10
  411c32:	b22d      	sxth	r5, r5
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
  411c34:	460a      	mov	r2, r1
  411c36:	42b9      	cmp	r1, r7
  411c38:	bfa8      	it	ge
  411c3a:	463a      	movge	r2, r7
  411c3c:	46e0      	mov	r8, ip
  411c3e:	45b4      	cmp	ip, r6
  411c40:	bfa8      	it	ge
  411c42:	46b0      	movge	r8, r6
  411c44:	4542      	cmp	r2, r8
  411c46:	bfa8      	it	ge
  411c48:	4642      	movge	r2, r8
  411c4a:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
  411c4c:	42b9      	cmp	r1, r7
  411c4e:	bfb8      	it	lt
  411c50:	4639      	movlt	r1, r7
  411c52:	45b4      	cmp	ip, r6
  411c54:	bfb8      	it	lt
  411c56:	46b4      	movlt	ip, r6
  411c58:	458c      	cmp	ip, r1
  411c5a:	bfb8      	it	lt
  411c5c:	468c      	movlt	ip, r1
  411c5e:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
  411c62:	461a      	mov	r2, r3
  411c64:	42ab      	cmp	r3, r5
  411c66:	bfa8      	it	ge
  411c68:	462a      	movge	r2, r5
  411c6a:	4671      	mov	r1, lr
  411c6c:	4586      	cmp	lr, r0
  411c6e:	bfa8      	it	ge
  411c70:	4601      	movge	r1, r0
  411c72:	428a      	cmp	r2, r1
  411c74:	bfa8      	it	ge
  411c76:	460a      	movge	r2, r1
  411c78:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
  411c7a:	429d      	cmp	r5, r3
  411c7c:	bfb8      	it	lt
  411c7e:	461d      	movlt	r5, r3
  411c80:	4586      	cmp	lr, r0
  411c82:	bfb8      	it	lt
  411c84:	4686      	movlt	lr, r0
  411c86:	45ae      	cmp	lr, r5
  411c88:	bfb8      	it	lt
  411c8a:	46ae      	movlt	lr, r5
  411c8c:	f8a4 e006 	strh.w	lr, [r4, #6]
  411c90:	e720      	b.n	411ad4 <_lv_img_buf_get_transformed_area+0x24>
  411c92:	bf00      	nop
  411c94:	66666667 	.word	0x66666667
  411c98:	004155fd 	.word	0x004155fd

00411c9c <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
  411c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411ca0:	b089      	sub	sp, #36	; 0x24
  411ca2:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
  411ca4:	6801      	ldr	r1, [r0, #0]

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
  411ca6:	f9b0 603c 	ldrsh.w	r6, [r0, #60]	; 0x3c
  411caa:	b2f2      	uxtb	r2, r6
    int ys_fract = dsc->tmp.ys & 0xff;
  411cac:	f9b0 503e 	ldrsh.w	r5, [r0, #62]	; 0x3e
  411cb0:	b2eb      	uxtb	r3, r5
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
  411cb2:	2a6f      	cmp	r2, #111	; 0x6f
  411cb4:	dc28      	bgt.n	411d08 <_lv_img_buf_transform_anti_alias+0x6c>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  411cb6:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  411cba:	2a01      	cmp	r2, #1
  411cbc:	d422      	bmi.n	411d04 <_lv_img_buf_transform_anti_alias+0x68>
        xn = - 1;
  411cbe:	f04f 37ff 	mov.w	r7, #4294967295
        xr = xs_fract + 0x80;
  411cc2:	b2f6      	uxtb	r6, r6
  411cc4:	f086 0680 	eor.w	r6, r6, #128	; 0x80
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
  411cc8:	2b6f      	cmp	r3, #111	; 0x6f
  411cca:	dc34      	bgt.n	411d36 <_lv_img_buf_transform_anti_alias+0x9a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  411ccc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  411cd0:	2b01      	cmp	r3, #1
  411cd2:	d42d      	bmi.n	411d30 <_lv_img_buf_transform_anti_alias+0x94>
        yn = - 1;
  411cd4:	f04f 38ff 	mov.w	r8, #4294967295

        yr = ys_fract + 0x80;
  411cd8:	b2ed      	uxtb	r5, r5
  411cda:	f085 0580 	eor.w	r5, r5, #128	; 0x80
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
  411cde:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
  411ce2:	f894 a016 	ldrb.w	sl, [r4, #22]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
  411ce6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411cea:	f013 0f04 	tst.w	r3, #4
  411cee:	f000 808b 	beq.w	411e08 <_lv_img_buf_transform_anti_alias+0x16c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
  411cf2:	6c62      	ldr	r2, [r4, #68]	; 0x44
  411cf4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  411cf8:	fb03 2307 	mla	r3, r3, r7, r2
  411cfc:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  411cfe:	a807      	add	r0, sp, #28
  411d00:	2202      	movs	r2, #2
  411d02:	e034      	b.n	411d6e <_lv_img_buf_transform_anti_alias+0xd2>
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  411d04:	2700      	movs	r7, #0
  411d06:	e7dc      	b.n	411cc2 <_lv_img_buf_transform_anti_alias+0x26>
    else if(xs_fract > 0x90) {
  411d08:	2a90      	cmp	r2, #144	; 0x90
  411d0a:	dd0e      	ble.n	411d2a <_lv_img_buf_transform_anti_alias+0x8e>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  411d0c:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  411d10:	3201      	adds	r2, #1
  411d12:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
  411d16:	4282      	cmp	r2, r0
  411d18:	da05      	bge.n	411d26 <_lv_img_buf_transform_anti_alias+0x8a>
        xn =  1;
  411d1a:	2701      	movs	r7, #1
        xr = (0xFF - xs_fract) + 0x80;
  411d1c:	b2f6      	uxtb	r6, r6
  411d1e:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
  411d22:	b2f6      	uxtb	r6, r6
  411d24:	e7d0      	b.n	411cc8 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  411d26:	2700      	movs	r7, #0
  411d28:	e7f8      	b.n	411d1c <_lv_img_buf_transform_anti_alias+0x80>
        xr = 0xFF;
  411d2a:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
  411d2c:	2700      	movs	r7, #0
  411d2e:	e7cb      	b.n	411cc8 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  411d30:	f04f 0800 	mov.w	r8, #0
  411d34:	e7d0      	b.n	411cd8 <_lv_img_buf_transform_anti_alias+0x3c>
    else if(ys_fract > 0x90) {
  411d36:	2b90      	cmp	r3, #144	; 0x90
  411d38:	dd10      	ble.n	411d5c <_lv_img_buf_transform_anti_alias+0xc0>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  411d3a:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  411d3e:	3301      	adds	r3, #1
  411d40:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  411d44:	4293      	cmp	r3, r2
  411d46:	da06      	bge.n	411d56 <_lv_img_buf_transform_anti_alias+0xba>
        yn =  1;
  411d48:	f04f 0801 	mov.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
  411d4c:	b2ed      	uxtb	r5, r5
  411d4e:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
  411d52:	b2ed      	uxtb	r5, r5
  411d54:	e7c3      	b.n	411cde <_lv_img_buf_transform_anti_alias+0x42>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  411d56:	f04f 0800 	mov.w	r8, #0
  411d5a:	e7f7      	b.n	411d4c <_lv_img_buf_transform_anti_alias+0xb0>
        yr = 0xFF;
  411d5c:	25ff      	movs	r5, #255	; 0xff
        yn = 0;
  411d5e:	f04f 0800 	mov.w	r8, #0
  411d62:	e7bc      	b.n	411cde <_lv_img_buf_transform_anti_alias+0x42>
        *d8 = *s8;
  411d64:	f813 eb01 	ldrb.w	lr, [r3], #1
  411d68:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  411d6c:	3a01      	subs	r2, #1
    while(len) {
  411d6e:	2a00      	cmp	r2, #0
  411d70:	d1f8      	bne.n	411d64 <_lv_img_buf_transform_anti_alias+0xc8>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
  411d72:	6c62      	ldr	r2, [r4, #68]	; 0x44
  411d74:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  411d78:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  411d7c:	fb03 f300 	mul.w	r3, r3, r0
  411d80:	fb03 2308 	mla	r3, r3, r8, r2
  411d84:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  411d86:	a806      	add	r0, sp, #24
  411d88:	2202      	movs	r2, #2
  411d8a:	e004      	b.n	411d96 <_lv_img_buf_transform_anti_alias+0xfa>
        *d8 = *s8;
  411d8c:	f813 eb01 	ldrb.w	lr, [r3], #1
  411d90:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  411d94:	3a01      	subs	r2, #1
    while(len) {
  411d96:	2a00      	cmp	r2, #0
  411d98:	d1f8      	bne.n	411d8c <_lv_img_buf_transform_anti_alias+0xf0>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
  411d9a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  411d9c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  411da0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  411da4:	fb03 f302 	mul.w	r3, r3, r2
  411da8:	fb03 f308 	mul.w	r3, r3, r8
  411dac:	fb02 3307 	mla	r3, r2, r7, r3
  411db0:	4403      	add	r3, r0
  411db2:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  411db4:	a805      	add	r0, sp, #20
  411db6:	2202      	movs	r2, #2
  411db8:	e004      	b.n	411dc4 <_lv_img_buf_transform_anti_alias+0x128>
        *d8 = *s8;
  411dba:	f813 eb01 	ldrb.w	lr, [r3], #1
  411dbe:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  411dc2:	3a01      	subs	r2, #1
    while(len) {
  411dc4:	2a00      	cmp	r2, #0
  411dc6:	d1f8      	bne.n	411dba <_lv_img_buf_transform_anti_alias+0x11e>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
  411dc8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411dcc:	f013 0f02 	tst.w	r3, #2
  411dd0:	d06a      	beq.n	411ea8 <_lv_img_buf_transform_anti_alias+0x20c>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  411dd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
  411dd4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  411dd8:	fb03 f207 	mul.w	r2, r3, r7
  411ddc:	1887      	adds	r7, r0, r2
  411dde:	441f      	add	r7, r3
  411de0:	3f01      	subs	r7, #1
  411de2:	f811 b007 	ldrb.w	fp, [r1, r7]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
  411de6:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
  411dea:	fb07 f703 	mul.w	r7, r7, r3
  411dee:	fb07 f808 	mul.w	r8, r7, r8
  411df2:	eb00 0708 	add.w	r7, r0, r8
  411df6:	441f      	add	r7, r3
  411df8:	3f01      	subs	r7, #1
  411dfa:	5dcf      	ldrb	r7, [r1, r7]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  411dfc:	4442      	add	r2, r8
  411dfe:	4402      	add	r2, r0
  411e00:	4413      	add	r3, r2
  411e02:	3b01      	subs	r3, #1
  411e04:	5cc8      	ldrb	r0, [r1, r3]
  411e06:	e052      	b.n	411eae <_lv_img_buf_transform_anti_alias+0x212>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
  411e08:	f104 0318 	add.w	r3, r4, #24
  411e0c:	4618      	mov	r0, r3
  411e0e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  411e12:	b2bf      	uxth	r7, r7
  411e14:	4439      	add	r1, r7
  411e16:	8a23      	ldrh	r3, [r4, #16]
  411e18:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  411e1c:	b209      	sxth	r1, r1
  411e1e:	9001      	str	r0, [sp, #4]
  411e20:	f8df b300 	ldr.w	fp, [pc, #768]	; 412124 <_lv_img_buf_transform_anti_alias+0x488>
  411e24:	47d8      	blx	fp
  411e26:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
  411e2a:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  411e2e:	fa1f f888 	uxth.w	r8, r8
  411e32:	4442      	add	r2, r8
  411e34:	8a23      	ldrh	r3, [r4, #16]
  411e36:	b212      	sxth	r2, r2
  411e38:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  411e3c:	9801      	ldr	r0, [sp, #4]
  411e3e:	47d8      	blx	fp
  411e40:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
  411e44:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  411e48:	4439      	add	r1, r7
  411e4a:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  411e4e:	4442      	add	r2, r8
  411e50:	8a23      	ldrh	r3, [r4, #16]
  411e52:	b212      	sxth	r2, r2
  411e54:	b209      	sxth	r1, r1
  411e56:	9801      	ldr	r0, [sp, #4]
  411e58:	47d8      	blx	fp
  411e5a:	f8ad 0014 	strh.w	r0, [sp, #20]

        if(dsc->tmp.has_alpha) {
  411e5e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411e62:	f013 0f02 	tst.w	r3, #2
  411e66:	d058      	beq.n	411f1a <_lv_img_buf_transform_anti_alias+0x27e>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
  411e68:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
  411e6c:	9202      	str	r2, [sp, #8]
  411e6e:	fa17 f782 	uxtah	r7, r7, r2
  411e72:	b23f      	sxth	r7, r7
  411e74:	463b      	mov	r3, r7
  411e76:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  411e7a:	463a      	mov	r2, r7
  411e7c:	9303      	str	r3, [sp, #12]
  411e7e:	4619      	mov	r1, r3
  411e80:	9801      	ldr	r0, [sp, #4]
  411e82:	4ba7      	ldr	r3, [pc, #668]	; (412120 <_lv_img_buf_transform_anti_alias+0x484>)
  411e84:	4798      	blx	r3
  411e86:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
  411e88:	fa18 f887 	uxtah	r8, r8, r7
  411e8c:	fa0f f888 	sxth.w	r8, r8
  411e90:	4642      	mov	r2, r8
  411e92:	9902      	ldr	r1, [sp, #8]
  411e94:	9801      	ldr	r0, [sp, #4]
  411e96:	4fa2      	ldr	r7, [pc, #648]	; (412120 <_lv_img_buf_transform_anti_alias+0x484>)
  411e98:	47b8      	blx	r7
  411e9a:	4607      	mov	r7, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
  411e9c:	4642      	mov	r2, r8
  411e9e:	9903      	ldr	r1, [sp, #12]
  411ea0:	9801      	ldr	r0, [sp, #4]
  411ea2:	4b9f      	ldr	r3, [pc, #636]	; (412120 <_lv_img_buf_transform_anti_alias+0x484>)
  411ea4:	4798      	blx	r3
  411ea6:	e002      	b.n	411eae <_lv_img_buf_transform_anti_alias+0x212>
    lv_opa_t a11 = 0;
  411ea8:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  411eaa:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  411eac:	4683      	mov	fp, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
  411eae:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411eb2:	f013 0f02 	tst.w	r3, #2
  411eb6:	d036      	beq.n	411f26 <_lv_img_buf_transform_anti_alias+0x28a>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
  411eb8:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
  411ebc:	fb03 f10b 	mul.w	r1, r3, fp
  411ec0:	fb06 110a 	mla	r1, r6, sl, r1
  411ec4:	f3c1 2107 	ubfx	r1, r1, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
  411ec8:	fb03 f300 	mul.w	r3, r3, r0
  411ecc:	fb06 3307 	mla	r3, r6, r7, r3
  411ed0:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
  411ed4:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  411ed8:	fb02 f203 	mul.w	r2, r2, r3
  411edc:	fb05 2201 	mla	r2, r5, r1, r2
  411ee0:	1212      	asrs	r2, r2, #8
  411ee2:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  411ee4:	2902      	cmp	r1, #2
  411ee6:	bf98      	it	ls
  411ee8:	2b02      	cmpls	r3, #2
  411eea:	f240 8117 	bls.w	41211c <_lv_img_buf_transform_anti_alias+0x480>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  411eee:	2902      	cmp	r1, #2
  411ef0:	d800      	bhi.n	411ef4 <_lv_img_buf_transform_anti_alias+0x258>
  411ef2:	2500      	movs	r5, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
  411ef4:	2b02      	cmp	r3, #2
  411ef6:	d800      	bhi.n	411efa <_lv_img_buf_transform_anti_alias+0x25e>
  411ef8:	25ff      	movs	r5, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  411efa:	f1ba 0f02 	cmp.w	sl, #2
  411efe:	d910      	bls.n	411f22 <_lv_img_buf_transform_anti_alias+0x286>
    lv_opa_t xr0 = xr;
  411f00:	4632      	mov	r2, r6
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
  411f02:	f1bb 0f02 	cmp.w	fp, #2
  411f06:	d800      	bhi.n	411f0a <_lv_img_buf_transform_anti_alias+0x26e>
  411f08:	22ff      	movs	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
  411f0a:	2f02      	cmp	r7, #2
  411f0c:	d800      	bhi.n	411f10 <_lv_img_buf_transform_anti_alias+0x274>
  411f0e:	2600      	movs	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  411f10:	2802      	cmp	r0, #2
  411f12:	d962      	bls.n	411fda <_lv_img_buf_transform_anti_alias+0x33e>
  411f14:	4633      	mov	r3, r6
  411f16:	4616      	mov	r6, r2
  411f18:	e008      	b.n	411f2c <_lv_img_buf_transform_anti_alias+0x290>
    lv_opa_t a11 = 0;
  411f1a:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  411f1c:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  411f1e:	4683      	mov	fp, r0
  411f20:	e7c5      	b.n	411eae <_lv_img_buf_transform_anti_alias+0x212>
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  411f22:	2200      	movs	r2, #0
  411f24:	e7ed      	b.n	411f02 <_lv_img_buf_transform_anti_alias+0x266>
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
  411f26:	23ff      	movs	r3, #255	; 0xff
  411f28:	75a3      	strb	r3, [r4, #22]
        xr1 = xr;
  411f2a:	4633      	mov	r3, r6
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
  411f2c:	2e00      	cmp	r6, #0
  411f2e:	d157      	bne.n	411fe0 <_lv_img_buf_transform_anti_alias+0x344>
  411f30:	f8bd 901c 	ldrh.w	r9, [sp, #28]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
  411f34:	2b00      	cmp	r3, #0
  411f36:	f040 809c 	bne.w	412072 <_lv_img_buf_transform_anti_alias+0x3d6>
  411f3a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  411f3e:	2d00      	cmp	r5, #0
  411f40:	f000 80e5 	beq.w	41210e <_lv_img_buf_transform_anti_alias+0x472>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  411f44:	2dff      	cmp	r5, #255	; 0xff
  411f46:	f000 80e5 	beq.w	412114 <_lv_img_buf_transform_anti_alias+0x478>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  411f4a:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  411f4e:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  411f52:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
  411f56:	fb00 f101 	mul.w	r1, r0, r1
  411f5a:	fb05 1202 	mla	r2, r5, r2, r1
  411f5e:	3280      	adds	r2, #128	; 0x80
  411f60:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  411f64:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  411f68:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  411f6c:	f04f 0100 	mov.w	r1, #0
  411f70:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  411f74:	f009 0607 	and.w	r6, r9, #7
  411f78:	f3c9 3242 	ubfx	r2, r9, #13, #3
  411f7c:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  411f80:	f003 0707 	and.w	r7, r3, #7
  411f84:	f3c3 3642 	ubfx	r6, r3, #13, #3
  411f88:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  411f8c:	fb06 f600 	mul.w	r6, r6, r0
  411f90:	fb02 6205 	mla	r2, r2, r5, r6
  411f94:	3280      	adds	r2, #128	; 0x80
  411f96:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  411f9a:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  411f9e:	f3c2 6682 	ubfx	r6, r2, #26, #3
  411fa2:	f366 0102 	bfi	r1, r6, #0, #3
  411fa6:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  411faa:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  411fae:	f3c9 2904 	ubfx	r9, r9, #8, #5
  411fb2:	f3c3 2304 	ubfx	r3, r3, #8, #5
  411fb6:	fb03 f000 	mul.w	r0, r3, r0
  411fba:	fb09 0505 	mla	r5, r9, r5, r0
  411fbe:	3580      	adds	r5, #128	; 0x80
  411fc0:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  411fc4:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  411fc8:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  411fcc:	f365 210c 	bfi	r1, r5, #8, #5
    else dsc->res.color = lv_color_mix(c0, c1, yr);
  411fd0:	82a1      	strh	r1, [r4, #20]

    return true;
  411fd2:	2001      	movs	r0, #1
}
  411fd4:	b009      	add	sp, #36	; 0x24
  411fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411fda:	4616      	mov	r6, r2
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  411fdc:	23ff      	movs	r3, #255	; 0xff
  411fde:	e7a5      	b.n	411f2c <_lv_img_buf_transform_anti_alias+0x290>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
  411fe0:	2eff      	cmp	r6, #255	; 0xff
  411fe2:	d0a7      	beq.n	411f34 <_lv_img_buf_transform_anti_alias+0x298>
  411fe4:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  411fe8:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  411fec:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  411ff0:	f1c6 07ff 	rsb	r7, r6, #255	; 0xff
  411ff4:	fb07 f101 	mul.w	r1, r7, r1
  411ff8:	fb06 1202 	mla	r2, r6, r2, r1
  411ffc:	3280      	adds	r2, #128	; 0x80
  411ffe:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412002:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412006:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  41200a:	f04f 0100 	mov.w	r1, #0
  41200e:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412012:	f009 0e07 	and.w	lr, r9, #7
  412016:	f3c9 3242 	ubfx	r2, r9, #13, #3
  41201a:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  41201e:	f000 0c07 	and.w	ip, r0, #7
  412022:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  412026:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  41202a:	fb0e fe07 	mul.w	lr, lr, r7
  41202e:	fb02 e206 	mla	r2, r2, r6, lr
  412032:	3280      	adds	r2, #128	; 0x80
  412034:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412038:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  41203c:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  412040:	f36e 0102 	bfi	r1, lr, #0, #3
  412044:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412048:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41204c:	f3c9 2904 	ubfx	r9, r9, #8, #5
  412050:	f3c0 2004 	ubfx	r0, r0, #8, #5
  412054:	fb00 f707 	mul.w	r7, r0, r7
  412058:	fb09 7606 	mla	r6, r9, r6, r7
  41205c:	3680      	adds	r6, #128	; 0x80
  41205e:	eb06 2206 	add.w	r2, r6, r6, lsl #8
  412062:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
  412066:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  41206a:	f366 210c 	bfi	r1, r6, #8, #5
  41206e:	4689      	mov	r9, r1
  412070:	e760      	b.n	411f34 <_lv_img_buf_transform_anti_alias+0x298>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
  412072:	2bff      	cmp	r3, #255	; 0xff
  412074:	d048      	beq.n	412108 <_lv_img_buf_transform_anti_alias+0x46c>
  412076:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  41207a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41207e:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  412082:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  412086:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  41208a:	fb07 f101 	mul.w	r1, r7, r1
  41208e:	fb03 1202 	mla	r2, r3, r2, r1
  412092:	3280      	adds	r2, #128	; 0x80
  412094:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412098:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41209c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4120a0:	f04f 0100 	mov.w	r1, #0
  4120a4:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4120a8:	f006 0e07 	and.w	lr, r6, #7
  4120ac:	f3c6 3242 	ubfx	r2, r6, #13, #3
  4120b0:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  4120b4:	f000 0c07 	and.w	ip, r0, #7
  4120b8:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  4120bc:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  4120c0:	fb0e fe07 	mul.w	lr, lr, r7
  4120c4:	fb02 e203 	mla	r2, r2, r3, lr
  4120c8:	3280      	adds	r2, #128	; 0x80
  4120ca:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  4120ce:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  4120d2:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  4120d6:	f36e 0102 	bfi	r1, lr, #0, #3
  4120da:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  4120de:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4120e2:	f3c6 2604 	ubfx	r6, r6, #8, #5
  4120e6:	f3c0 2004 	ubfx	r0, r0, #8, #5
  4120ea:	fb00 f707 	mul.w	r7, r0, r7
  4120ee:	fb06 7303 	mla	r3, r6, r3, r7
  4120f2:	3380      	adds	r3, #128	; 0x80
  4120f4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4120f8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4120fc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  412100:	f363 210c 	bfi	r1, r3, #8, #5
  412104:	460b      	mov	r3, r1
  412106:	e71a      	b.n	411f3e <_lv_img_buf_transform_anti_alias+0x2a2>
  412108:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  41210c:	e717      	b.n	411f3e <_lv_img_buf_transform_anti_alias+0x2a2>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  41210e:	82a3      	strh	r3, [r4, #20]
    return true;
  412110:	2001      	movs	r0, #1
  412112:	e75f      	b.n	411fd4 <_lv_img_buf_transform_anti_alias+0x338>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  412114:	f8a4 9014 	strh.w	r9, [r4, #20]
    return true;
  412118:	2001      	movs	r0, #1
  41211a:	e75b      	b.n	411fd4 <_lv_img_buf_transform_anti_alias+0x338>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  41211c:	2000      	movs	r0, #0
  41211e:	e759      	b.n	411fd4 <_lv_img_buf_transform_anti_alias+0x338>
  412120:	0041188d 	.word	0x0041188d
  412124:	00411769 	.word	0x00411769

00412128 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
  412128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
  41212c:	4b4c      	ldr	r3, [pc, #304]	; (412260 <_lv_img_cache_open+0x138>)
  41212e:	881f      	ldrh	r7, [r3, #0]
  412130:	2f00      	cmp	r7, #0
  412132:	f000 8091 	beq.w	412258 <_lv_img_cache_open+0x130>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  412136:	4b4b      	ldr	r3, [pc, #300]	; (412264 <_lv_img_cache_open+0x13c>)
  412138:	681e      	ldr	r6, [r3, #0]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  41213a:	2300      	movs	r3, #0
  41213c:	e001      	b.n	412142 <_lv_img_cache_open+0x1a>
  41213e:	3301      	adds	r3, #1
  412140:	b29b      	uxth	r3, r3
  412142:	42bb      	cmp	r3, r7
  412144:	d20a      	bcs.n	41215c <_lv_img_cache_open+0x34>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  412146:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
  41214a:	00ac      	lsls	r4, r5, #2
  41214c:	4434      	add	r4, r6
  41214e:	6a25      	ldr	r5, [r4, #32]
  412150:	4a45      	ldr	r2, [pc, #276]	; (412268 <_lv_img_cache_open+0x140>)
  412152:	4295      	cmp	r5, r2
  412154:	dbf3      	blt.n	41213e <_lv_img_cache_open+0x16>
            cache[i].life -= LV_IMG_CACHE_AGING;
  412156:	3d01      	subs	r5, #1
  412158:	6225      	str	r5, [r4, #32]
  41215a:	e7f0      	b.n	41213e <_lv_img_cache_open+0x16>
  41215c:	4688      	mov	r8, r1
  41215e:	4607      	mov	r7, r0
  412160:	2400      	movs	r4, #0
  412162:	e00c      	b.n	41217e <_lv_img_cache_open+0x56>

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412164:	892a      	ldrh	r2, [r5, #8]
  412166:	fa1f f388 	uxth.w	r3, r8
  41216a:	429a      	cmp	r2, r3
  41216c:	d020      	beq.n	4121b0 <_lv_img_cache_open+0x88>
        bool match = false;
  41216e:	2300      	movs	r3, #0
  412170:	e002      	b.n	412178 <_lv_img_cache_open+0x50>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
  412172:	2801      	cmp	r0, #1
  412174:	d015      	beq.n	4121a2 <_lv_img_cache_open+0x7a>
        bool match = false;
  412176:	2300      	movs	r3, #0
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
        }

        if(match) {
  412178:	b9f3      	cbnz	r3, 4121b8 <_lv_img_cache_open+0x90>
    for(i = 0; i < entry_cnt; i++) {
  41217a:	3401      	adds	r4, #1
  41217c:	b2a4      	uxth	r4, r4
  41217e:	4b38      	ldr	r3, [pc, #224]	; (412260 <_lv_img_cache_open+0x138>)
  412180:	881b      	ldrh	r3, [r3, #0]
  412182:	429c      	cmp	r4, r3
  412184:	d223      	bcs.n	4121ce <_lv_img_cache_open+0xa6>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
  412186:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  41218a:	009d      	lsls	r5, r3, #2
  41218c:	4435      	add	r5, r6
  41218e:	6868      	ldr	r0, [r5, #4]
  412190:	4b36      	ldr	r3, [pc, #216]	; (41226c <_lv_img_cache_open+0x144>)
  412192:	4798      	blx	r3
        if(src_type == LV_IMG_SRC_VARIABLE) {
  412194:	2800      	cmp	r0, #0
  412196:	d1ec      	bne.n	412172 <_lv_img_cache_open+0x4a>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412198:	686b      	ldr	r3, [r5, #4]
  41219a:	42bb      	cmp	r3, r7
  41219c:	d0e2      	beq.n	412164 <_lv_img_cache_open+0x3c>
        bool match = false;
  41219e:	2300      	movs	r3, #0
  4121a0:	e7ea      	b.n	412178 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  4121a2:	4639      	mov	r1, r7
  4121a4:	6868      	ldr	r0, [r5, #4]
  4121a6:	4b32      	ldr	r3, [pc, #200]	; (412270 <_lv_img_cache_open+0x148>)
  4121a8:	4798      	blx	r3
  4121aa:	b118      	cbz	r0, 4121b4 <_lv_img_cache_open+0x8c>
        bool match = false;
  4121ac:	2300      	movs	r3, #0
  4121ae:	e7e3      	b.n	412178 <_lv_img_cache_open+0x50>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  4121b0:	2301      	movs	r3, #1
  4121b2:	e7e1      	b.n	412178 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  4121b4:	2301      	movs	r3, #1
  4121b6:	e7df      	b.n	412178 <_lv_img_cache_open+0x50>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  4121b8:	696b      	ldr	r3, [r5, #20]
  4121ba:	6a2a      	ldr	r2, [r5, #32]
  4121bc:	4413      	add	r3, r2
  4121be:	622b      	str	r3, [r5, #32]
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
  4121c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4121c4:	dd04      	ble.n	4121d0 <_lv_img_cache_open+0xa8>
  4121c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4121ca:	622b      	str	r3, [r5, #32]
  4121cc:	e000      	b.n	4121d0 <_lv_img_cache_open+0xa8>
    lv_img_cache_entry_t * cached_src = NULL;
  4121ce:	2500      	movs	r5, #0
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
  4121d0:	b115      	cbz	r5, 4121d8 <_lv_img_cache_open+0xb0>
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
  4121d2:	4628      	mov	r0, r5
  4121d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4121d8:	4634      	mov	r4, r6
  4121da:	2301      	movs	r3, #1
  4121dc:	e001      	b.n	4121e2 <_lv_img_cache_open+0xba>
    for(i = 1; i < entry_cnt; i++) {
  4121de:	3301      	adds	r3, #1
  4121e0:	b29b      	uxth	r3, r3
  4121e2:	4a1f      	ldr	r2, [pc, #124]	; (412260 <_lv_img_cache_open+0x138>)
  4121e4:	8812      	ldrh	r2, [r2, #0]
  4121e6:	4293      	cmp	r3, r2
  4121e8:	d209      	bcs.n	4121fe <_lv_img_cache_open+0xd6>
        if(cache[i].life < cached_src->life) {
  4121ea:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4121ee:	008a      	lsls	r2, r1, #2
  4121f0:	4432      	add	r2, r6
  4121f2:	6a10      	ldr	r0, [r2, #32]
  4121f4:	6a21      	ldr	r1, [r4, #32]
  4121f6:	4288      	cmp	r0, r1
  4121f8:	daf1      	bge.n	4121de <_lv_img_cache_open+0xb6>
            cached_src = &cache[i];
  4121fa:	4614      	mov	r4, r2
  4121fc:	e7ef      	b.n	4121de <_lv_img_cache_open+0xb6>
    if(cached_src->dec_dsc.src) {
  4121fe:	6863      	ldr	r3, [r4, #4]
  412200:	b113      	cbz	r3, 412208 <_lv_img_cache_open+0xe0>
        lv_img_decoder_close(&cached_src->dec_dsc);
  412202:	4620      	mov	r0, r4
  412204:	4b1b      	ldr	r3, [pc, #108]	; (412274 <_lv_img_cache_open+0x14c>)
  412206:	4798      	blx	r3
    t_start                          = lv_tick_get();
  412208:	4b1b      	ldr	r3, [pc, #108]	; (412278 <_lv_img_cache_open+0x150>)
  41220a:	4798      	blx	r3
  41220c:	4606      	mov	r6, r0
    cached_src->dec_dsc.time_to_open = 0;
  41220e:	2300      	movs	r3, #0
  412210:	6163      	str	r3, [r4, #20]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
  412212:	4642      	mov	r2, r8
  412214:	4639      	mov	r1, r7
  412216:	4620      	mov	r0, r4
  412218:	4b18      	ldr	r3, [pc, #96]	; (41227c <_lv_img_cache_open+0x154>)
  41221a:	4798      	blx	r3
    if(open_res == LV_RES_INV) {
  41221c:	b148      	cbz	r0, 412232 <_lv_img_cache_open+0x10a>
    cached_src->life = 0;
  41221e:	2300      	movs	r3, #0
  412220:	6223      	str	r3, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
  412222:	6963      	ldr	r3, [r4, #20]
  412224:	b19b      	cbz	r3, 41224e <_lv_img_cache_open+0x126>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  412226:	6963      	ldr	r3, [r4, #20]
  412228:	b9c3      	cbnz	r3, 41225c <_lv_img_cache_open+0x134>
  41222a:	2301      	movs	r3, #1
  41222c:	6163      	str	r3, [r4, #20]
    return cached_src;
  41222e:	4625      	mov	r5, r4
  412230:	e7cf      	b.n	4121d2 <_lv_img_cache_open+0xaa>
        lv_img_decoder_close(&cached_src->dec_dsc);
  412232:	4620      	mov	r0, r4
  412234:	4b0f      	ldr	r3, [pc, #60]	; (412274 <_lv_img_cache_open+0x14c>)
  412236:	4798      	blx	r3
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412238:	2120      	movs	r1, #32
  41223a:	4620      	mov	r0, r4
  41223c:	4e10      	ldr	r6, [pc, #64]	; (412280 <_lv_img_cache_open+0x158>)
  41223e:	47b0      	blx	r6
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
  412240:	2124      	movs	r1, #36	; 0x24
  412242:	4620      	mov	r0, r4
  412244:	47b0      	blx	r6
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
  412246:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  41224a:	6223      	str	r3, [r4, #32]
        return NULL;
  41224c:	e7c1      	b.n	4121d2 <_lv_img_cache_open+0xaa>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
  41224e:	4630      	mov	r0, r6
  412250:	4b0c      	ldr	r3, [pc, #48]	; (412284 <_lv_img_cache_open+0x15c>)
  412252:	4798      	blx	r3
  412254:	6160      	str	r0, [r4, #20]
  412256:	e7e6      	b.n	412226 <_lv_img_cache_open+0xfe>
        return NULL;
  412258:	2500      	movs	r5, #0
  41225a:	e7ba      	b.n	4121d2 <_lv_img_cache_open+0xaa>
    return cached_src;
  41225c:	4625      	mov	r5, r4
  41225e:	e7b8      	b.n	4121d2 <_lv_img_cache_open+0xaa>
  412260:	2040c71e 	.word	0x2040c71e
  412264:	2043a244 	.word	0x2043a244
  412268:	80000002 	.word	0x80000002
  41226c:	0040c9c5 	.word	0x0040c9c5
  412270:	0041ebc9 	.word	0x0041ebc9
  412274:	00412c75 	.word	0x00412c75
  412278:	00414345 	.word	0x00414345
  41227c:	00412bb5 	.word	0x00412bb5
  412280:	00415ca1 	.word	0x00415ca1
  412284:	00414361 	.word	0x00414361

00412288 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
  412288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41228c:	4606      	mov	r6, r0
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  41228e:	4b11      	ldr	r3, [pc, #68]	; (4122d4 <lv_img_cache_invalidate_src+0x4c>)
  412290:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  412292:	2400      	movs	r4, #0
  412294:	e00d      	b.n	4122b2 <lv_img_cache_invalidate_src+0x2a>
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
  412296:	b113      	cbz	r3, 41229e <lv_img_cache_invalidate_src+0x16>
                lv_img_decoder_close(&cache[i].dec_dsc);
  412298:	4628      	mov	r0, r5
  41229a:	4b0f      	ldr	r3, [pc, #60]	; (4122d8 <lv_img_cache_invalidate_src+0x50>)
  41229c:	4798      	blx	r3
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  41229e:	2120      	movs	r1, #32
  4122a0:	4628      	mov	r0, r5
  4122a2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4122e0 <lv_img_cache_invalidate_src+0x58>
  4122a6:	47c0      	blx	r8
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
  4122a8:	2124      	movs	r1, #36	; 0x24
  4122aa:	4628      	mov	r0, r5
  4122ac:	47c0      	blx	r8
    for(i = 0; i < entry_cnt; i++) {
  4122ae:	3401      	adds	r4, #1
  4122b0:	b2a4      	uxth	r4, r4
  4122b2:	4b0a      	ldr	r3, [pc, #40]	; (4122dc <lv_img_cache_invalidate_src+0x54>)
  4122b4:	881b      	ldrh	r3, [r3, #0]
  4122b6:	429c      	cmp	r4, r3
  4122b8:	d209      	bcs.n	4122ce <lv_img_cache_invalidate_src+0x46>
        if(cache[i].dec_dsc.src == src || src == NULL) {
  4122ba:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4122be:	0098      	lsls	r0, r3, #2
  4122c0:	183d      	adds	r5, r7, r0
  4122c2:	686b      	ldr	r3, [r5, #4]
  4122c4:	42b3      	cmp	r3, r6
  4122c6:	d0e6      	beq.n	412296 <lv_img_cache_invalidate_src+0xe>
  4122c8:	2e00      	cmp	r6, #0
  4122ca:	d1f0      	bne.n	4122ae <lv_img_cache_invalidate_src+0x26>
  4122cc:	e7e3      	b.n	412296 <lv_img_cache_invalidate_src+0xe>
        }
    }
#endif
}
  4122ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4122d2:	bf00      	nop
  4122d4:	2043a244 	.word	0x2043a244
  4122d8:	00412c75 	.word	0x00412c75
  4122dc:	2040c71e 	.word	0x2040c71e
  4122e0:	00415ca1 	.word	0x00415ca1

004122e4 <lv_img_cache_set_size>:
{
  4122e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4122e6:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
  4122e8:	4b1c      	ldr	r3, [pc, #112]	; (41235c <lv_img_cache_set_size+0x78>)
  4122ea:	681b      	ldr	r3, [r3, #0]
  4122ec:	b133      	cbz	r3, 4122fc <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
  4122ee:	2000      	movs	r0, #0
  4122f0:	4b1b      	ldr	r3, [pc, #108]	; (412360 <lv_img_cache_set_size+0x7c>)
  4122f2:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
  4122f4:	4b19      	ldr	r3, [pc, #100]	; (41235c <lv_img_cache_set_size+0x78>)
  4122f6:	6818      	ldr	r0, [r3, #0]
  4122f8:	4b1a      	ldr	r3, [pc, #104]	; (412364 <lv_img_cache_set_size+0x80>)
  4122fa:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
  4122fc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412300:	0098      	lsls	r0, r3, #2
  412302:	4b19      	ldr	r3, [pc, #100]	; (412368 <lv_img_cache_set_size+0x84>)
  412304:	4798      	blx	r3
  412306:	4b15      	ldr	r3, [pc, #84]	; (41235c <lv_img_cache_set_size+0x78>)
  412308:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  41230a:	4b18      	ldr	r3, [pc, #96]	; (41236c <lv_img_cache_set_size+0x88>)
  41230c:	4798      	blx	r3
  41230e:	b130      	cbz	r0, 41231e <lv_img_cache_set_size+0x3a>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
  412310:	4b12      	ldr	r3, [pc, #72]	; (41235c <lv_img_cache_set_size+0x78>)
  412312:	681b      	ldr	r3, [r3, #0]
  412314:	b153      	cbz	r3, 41232c <lv_img_cache_set_size+0x48>
    entry_cnt = new_entry_cnt;
  412316:	4b16      	ldr	r3, [pc, #88]	; (412370 <lv_img_cache_set_size+0x8c>)
  412318:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
  41231a:	2400      	movs	r4, #0
  41231c:	e019      	b.n	412352 <lv_img_cache_set_size+0x6e>
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  41231e:	4b0f      	ldr	r3, [pc, #60]	; (41235c <lv_img_cache_set_size+0x78>)
  412320:	681a      	ldr	r2, [r3, #0]
  412322:	2300      	movs	r3, #0
  412324:	4813      	ldr	r0, [pc, #76]	; (412374 <lv_img_cache_set_size+0x90>)
  412326:	4914      	ldr	r1, [pc, #80]	; (412378 <lv_img_cache_set_size+0x94>)
  412328:	4788      	blx	r1
  41232a:	e7fe      	b.n	41232a <lv_img_cache_set_size+0x46>
        entry_cnt = 0;
  41232c:	2200      	movs	r2, #0
  41232e:	4b10      	ldr	r3, [pc, #64]	; (412370 <lv_img_cache_set_size+0x8c>)
  412330:	801a      	strh	r2, [r3, #0]
        return;
  412332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412334:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412338:	009d      	lsls	r5, r3, #2
  41233a:	4f08      	ldr	r7, [pc, #32]	; (41235c <lv_img_cache_set_size+0x78>)
  41233c:	6838      	ldr	r0, [r7, #0]
  41233e:	2120      	movs	r1, #32
  412340:	4428      	add	r0, r5
  412342:	4e0e      	ldr	r6, [pc, #56]	; (41237c <lv_img_cache_set_size+0x98>)
  412344:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
  412346:	6838      	ldr	r0, [r7, #0]
  412348:	2124      	movs	r1, #36	; 0x24
  41234a:	4428      	add	r0, r5
  41234c:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
  41234e:	3401      	adds	r4, #1
  412350:	b2a4      	uxth	r4, r4
  412352:	4b07      	ldr	r3, [pc, #28]	; (412370 <lv_img_cache_set_size+0x8c>)
  412354:	881b      	ldrh	r3, [r3, #0]
  412356:	429c      	cmp	r4, r3
  412358:	d3ec      	bcc.n	412334 <lv_img_cache_set_size+0x50>
  41235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41235c:	2043a244 	.word	0x2043a244
  412360:	00412289 	.word	0x00412289
  412364:	00415831 	.word	0x00415831
  412368:	0041576d 	.word	0x0041576d
  41236c:	00415065 	.word	0x00415065
  412370:	2040c71e 	.word	0x2040c71e
  412374:	00421264 	.word	0x00421264
  412378:	00415071 	.word	0x00415071
  41237c:	00415ca1 	.word	0x00415ca1

00412380 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
  412380:	b530      	push	{r4, r5, lr}
  412382:	b085      	sub	sp, #20
  412384:	460c      	mov	r4, r1
  412386:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
  412388:	4608      	mov	r0, r1
  41238a:	4b2b      	ldr	r3, [pc, #172]	; (412438 <lv_img_decoder_built_in_info+0xb8>)
  41238c:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  41238e:	b9d8      	cbnz	r0, 4123c8 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
  412390:	7823      	ldrb	r3, [r4, #0]
  412392:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  412396:	3b04      	subs	r3, #4
  412398:	b2db      	uxtb	r3, r3
  41239a:	2b0a      	cmp	r3, #10
  41239c:	d849      	bhi.n	412432 <lv_img_decoder_built_in_info+0xb2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
  41239e:	6823      	ldr	r3, [r4, #0]
  4123a0:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4123a4:	682a      	ldr	r2, [r5, #0]
  4123a6:	f363 2294 	bfi	r2, r3, #10, #11
  4123aa:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
  4123ac:	8863      	ldrh	r3, [r4, #2]
  4123ae:	f3c3 134a 	ubfx	r3, r3, #5, #11
  4123b2:	886a      	ldrh	r2, [r5, #2]
  4123b4:	f363 124f 	bfi	r2, r3, #5, #11
  4123b8:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
  4123ba:	7822      	ldrb	r2, [r4, #0]
  4123bc:	782b      	ldrb	r3, [r5, #0]
  4123be:	f362 0304 	bfi	r3, r2, #0, #5
  4123c2:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
  4123c4:	2001      	movs	r0, #1
  4123c6:	e004      	b.n	4123d2 <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
  4123c8:	2801      	cmp	r0, #1
  4123ca:	d004      	beq.n	4123d6 <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  4123cc:	2802      	cmp	r0, #2
  4123ce:	d022      	beq.n	412416 <lv_img_decoder_built_in_info+0x96>
        return LV_RES_INV;
  4123d0:	2000      	movs	r0, #0
}
  4123d2:	b005      	add	sp, #20
  4123d4:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
  4123d6:	2202      	movs	r2, #2
  4123d8:	4621      	mov	r1, r4
  4123da:	a802      	add	r0, sp, #8
  4123dc:	4b17      	ldr	r3, [pc, #92]	; (41243c <lv_img_decoder_built_in_info+0xbc>)
  4123de:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
  4123e0:	b148      	cbz	r0, 4123f6 <lv_img_decoder_built_in_info+0x76>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  4123e2:	782b      	ldrb	r3, [r5, #0]
  4123e4:	f003 031f 	and.w	r3, r3, #31
  4123e8:	331c      	adds	r3, #28
  4123ea:	f003 031f 	and.w	r3, r3, #31
  4123ee:	2b0a      	cmp	r3, #10
  4123f0:	d80f      	bhi.n	412412 <lv_img_decoder_built_in_info+0x92>
    return LV_RES_OK;
  4123f2:	2001      	movs	r0, #1
  4123f4:	e7ed      	b.n	4123d2 <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
  4123f6:	ab01      	add	r3, sp, #4
  4123f8:	2204      	movs	r2, #4
  4123fa:	4629      	mov	r1, r5
  4123fc:	a802      	add	r0, sp, #8
  4123fe:	4c10      	ldr	r4, [pc, #64]	; (412440 <lv_img_decoder_built_in_info+0xc0>)
  412400:	47a0      	blx	r4
  412402:	4604      	mov	r4, r0
            lv_fs_close(&file);
  412404:	a802      	add	r0, sp, #8
  412406:	4b0f      	ldr	r3, [pc, #60]	; (412444 <lv_img_decoder_built_in_info+0xc4>)
  412408:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
  41240a:	b914      	cbnz	r4, 412412 <lv_img_decoder_built_in_info+0x92>
  41240c:	9b01      	ldr	r3, [sp, #4]
  41240e:	2b04      	cmp	r3, #4
  412410:	d0e7      	beq.n	4123e2 <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
  412412:	2000      	movs	r0, #0
  412414:	e7dd      	b.n	4123d2 <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
  412416:	682b      	ldr	r3, [r5, #0]
  412418:	2001      	movs	r0, #1
  41241a:	f360 2394 	bfi	r3, r0, #10, #11
  41241e:	602b      	str	r3, [r5, #0]
        header->h = 1;
  412420:	0c1a      	lsrs	r2, r3, #16
  412422:	f360 124f 	bfi	r2, r0, #5, #11
  412426:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
  412428:	220b      	movs	r2, #11
  41242a:	f362 0304 	bfi	r3, r2, #0, #5
  41242e:	702b      	strb	r3, [r5, #0]
  412430:	e7cf      	b.n	4123d2 <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  412432:	2000      	movs	r0, #0
  412434:	e7cd      	b.n	4123d2 <lv_img_decoder_built_in_info+0x52>
  412436:	bf00      	nop
  412438:	0040c9c5 	.word	0x0040c9c5
  41243c:	004151bd 	.word	0x004151bd
  412440:	00415139 	.word	0x00415139
  412444:	00415109 	.word	0x00415109

00412448 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
  412448:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  41244a:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
  41244c:	b1a4      	cbz	r4, 412478 <lv_img_decoder_built_in_close+0x30>
  41244e:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
  412450:	6820      	ldr	r0, [r4, #0]
  412452:	b120      	cbz	r0, 41245e <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
  412454:	4b09      	ldr	r3, [pc, #36]	; (41247c <lv_img_decoder_built_in_close+0x34>)
  412456:	4798      	blx	r3
            lv_mem_free(user_data->f);
  412458:	6820      	ldr	r0, [r4, #0]
  41245a:	4b09      	ldr	r3, [pc, #36]	; (412480 <lv_img_decoder_built_in_close+0x38>)
  41245c:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
  41245e:	6860      	ldr	r0, [r4, #4]
  412460:	b108      	cbz	r0, 412466 <lv_img_decoder_built_in_close+0x1e>
  412462:	4b07      	ldr	r3, [pc, #28]	; (412480 <lv_img_decoder_built_in_close+0x38>)
  412464:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
  412466:	68a0      	ldr	r0, [r4, #8]
  412468:	b108      	cbz	r0, 41246e <lv_img_decoder_built_in_close+0x26>
  41246a:	4b05      	ldr	r3, [pc, #20]	; (412480 <lv_img_decoder_built_in_close+0x38>)
  41246c:	4798      	blx	r3

        lv_mem_free(user_data);
  41246e:	4620      	mov	r0, r4
  412470:	4b03      	ldr	r3, [pc, #12]	; (412480 <lv_img_decoder_built_in_close+0x38>)
  412472:	4798      	blx	r3

        dsc->user_data = NULL;
  412474:	2300      	movs	r3, #0
  412476:	61eb      	str	r3, [r5, #28]
  412478:	bd38      	pop	{r3, r4, r5, pc}
  41247a:	bf00      	nop
  41247c:	00415109 	.word	0x00415109
  412480:	00415831 	.word	0x00415831

00412484 <lv_img_decoder_built_in_open>:
{
  412484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412488:	b082      	sub	sp, #8
  41248a:	4607      	mov	r7, r0
  41248c:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  41248e:	7a8b      	ldrb	r3, [r1, #10]
  412490:	2b01      	cmp	r3, #1
  412492:	d016      	beq.n	4124c2 <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412494:	b923      	cbnz	r3, 4124a0 <lv_img_decoder_built_in_open+0x1c>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
  412496:	684b      	ldr	r3, [r1, #4]
  412498:	689b      	ldr	r3, [r3, #8]
  41249a:	2b00      	cmp	r3, #0
  41249c:	f000 810b 	beq.w	4126b6 <lv_img_decoder_built_in_open+0x232>
    lv_img_cf_t cf = dsc->header.cf;
  4124a0:	7b20      	ldrb	r0, [r4, #12]
  4124a2:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  4124a6:	1f03      	subs	r3, r0, #4
  4124a8:	b2db      	uxtb	r3, r3
  4124aa:	2b02      	cmp	r3, #2
  4124ac:	d851      	bhi.n	412552 <lv_img_decoder_built_in_open+0xce>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  4124ae:	7aa3      	ldrb	r3, [r4, #10]
  4124b0:	2b00      	cmp	r3, #0
  4124b2:	d14a      	bne.n	41254a <lv_img_decoder_built_in_open+0xc6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
  4124b4:	6863      	ldr	r3, [r4, #4]
  4124b6:	689b      	ldr	r3, [r3, #8]
  4124b8:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  4124ba:	2001      	movs	r0, #1
}
  4124bc:	b002      	add	sp, #8
  4124be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  4124c2:	6848      	ldr	r0, [r1, #4]
  4124c4:	4b7d      	ldr	r3, [pc, #500]	; (4126bc <lv_img_decoder_built_in_open+0x238>)
  4124c6:	4798      	blx	r3
  4124c8:	497d      	ldr	r1, [pc, #500]	; (4126c0 <lv_img_decoder_built_in_open+0x23c>)
  4124ca:	4b7e      	ldr	r3, [pc, #504]	; (4126c4 <lv_img_decoder_built_in_open+0x240>)
  4124cc:	4798      	blx	r3
  4124ce:	b9a8      	cbnz	r0, 4124fc <lv_img_decoder_built_in_open+0x78>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
  4124d0:	2202      	movs	r2, #2
  4124d2:	6861      	ldr	r1, [r4, #4]
  4124d4:	4668      	mov	r0, sp
  4124d6:	4b7c      	ldr	r3, [pc, #496]	; (4126c8 <lv_img_decoder_built_in_open+0x244>)
  4124d8:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
  4124da:	b978      	cbnz	r0, 4124fc <lv_img_decoder_built_in_open+0x78>
        if(dsc->user_data == NULL) {
  4124dc:	69e3      	ldr	r3, [r4, #28]
  4124de:	b17b      	cbz	r3, 412500 <lv_img_decoder_built_in_open+0x7c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4124e0:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
  4124e2:	2008      	movs	r0, #8
  4124e4:	4b79      	ldr	r3, [pc, #484]	; (4126cc <lv_img_decoder_built_in_open+0x248>)
  4124e6:	4798      	blx	r3
  4124e8:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
  4124ea:	4b79      	ldr	r3, [pc, #484]	; (4126d0 <lv_img_decoder_built_in_open+0x24c>)
  4124ec:	4798      	blx	r3
  4124ee:	b1d8      	cbz	r0, 412528 <lv_img_decoder_built_in_open+0xa4>
        if(user_data->f == NULL) {
  4124f0:	682b      	ldr	r3, [r5, #0]
  4124f2:	bb3b      	cbnz	r3, 412544 <lv_img_decoder_built_in_open+0xc0>
            lv_img_decoder_built_in_close(decoder, dsc);
  4124f4:	4621      	mov	r1, r4
  4124f6:	4638      	mov	r0, r7
  4124f8:	4b76      	ldr	r3, [pc, #472]	; (4126d4 <lv_img_decoder_built_in_open+0x250>)
  4124fa:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  4124fc:	2000      	movs	r0, #0
  4124fe:	e7dd      	b.n	4124bc <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  412500:	200c      	movs	r0, #12
  412502:	4b72      	ldr	r3, [pc, #456]	; (4126cc <lv_img_decoder_built_in_open+0x248>)
  412504:	4798      	blx	r3
  412506:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  412508:	4b71      	ldr	r3, [pc, #452]	; (4126d0 <lv_img_decoder_built_in_open+0x24c>)
  41250a:	4798      	blx	r3
  41250c:	b928      	cbnz	r0, 41251a <lv_img_decoder_built_in_open+0x96>
  41250e:	69e2      	ldr	r2, [r4, #28]
  412510:	2300      	movs	r3, #0
  412512:	4871      	ldr	r0, [pc, #452]	; (4126d8 <lv_img_decoder_built_in_open+0x254>)
  412514:	4971      	ldr	r1, [pc, #452]	; (4126dc <lv_img_decoder_built_in_open+0x258>)
  412516:	4788      	blx	r1
  412518:	e7fe      	b.n	412518 <lv_img_decoder_built_in_open+0x94>
            if(dsc->user_data == NULL) {
  41251a:	69e0      	ldr	r0, [r4, #28]
  41251c:	2800      	cmp	r0, #0
  41251e:	d0ed      	beq.n	4124fc <lv_img_decoder_built_in_open+0x78>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  412520:	210c      	movs	r1, #12
  412522:	4b6f      	ldr	r3, [pc, #444]	; (4126e0 <lv_img_decoder_built_in_open+0x25c>)
  412524:	4798      	blx	r3
  412526:	e7db      	b.n	4124e0 <lv_img_decoder_built_in_open+0x5c>
        LV_ASSERT_MEM(user_data->f);
  412528:	682a      	ldr	r2, [r5, #0]
  41252a:	2300      	movs	r3, #0
  41252c:	486a      	ldr	r0, [pc, #424]	; (4126d8 <lv_img_decoder_built_in_open+0x254>)
  41252e:	496b      	ldr	r1, [pc, #428]	; (4126dc <lv_img_decoder_built_in_open+0x258>)
  412530:	4788      	blx	r1
  412532:	e7fe      	b.n	412532 <lv_img_decoder_built_in_open+0xae>
        *d8 = *s8;
  412534:	f811 0b01 	ldrb.w	r0, [r1], #1
  412538:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  41253c:	3a01      	subs	r2, #1
    while(len) {
  41253e:	2a00      	cmp	r2, #0
  412540:	d1f8      	bne.n	412534 <lv_img_decoder_built_in_open+0xb0>
  412542:	e7ad      	b.n	4124a0 <lv_img_decoder_built_in_open+0x1c>
  412544:	4669      	mov	r1, sp
  412546:	2208      	movs	r2, #8
  412548:	e7f9      	b.n	41253e <lv_img_decoder_built_in_open+0xba>
            dsc->img_data = NULL;
  41254a:	2300      	movs	r3, #0
  41254c:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  41254e:	2001      	movs	r0, #1
  412550:	e7b4      	b.n	4124bc <lv_img_decoder_built_in_open+0x38>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
  412552:	1fc3      	subs	r3, r0, #7
  412554:	b2db      	uxtb	r3, r3
  412556:	2b03      	cmp	r3, #3
  412558:	d909      	bls.n	41256e <lv_img_decoder_built_in_open+0xea>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
  41255a:	f1a0 030b 	sub.w	r3, r0, #11
  41255e:	b2db      	uxtb	r3, r3
  412560:	2b03      	cmp	r3, #3
  412562:	f200 80a2 	bhi.w	4126aa <lv_img_decoder_built_in_open+0x226>
        dsc->img_data = NULL;
  412566:	2300      	movs	r3, #0
  412568:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
  41256a:	2001      	movs	r0, #1
  41256c:	e7a6      	b.n	4124bc <lv_img_decoder_built_in_open+0x38>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
  41256e:	4b5d      	ldr	r3, [pc, #372]	; (4126e4 <lv_img_decoder_built_in_open+0x260>)
  412570:	4798      	blx	r3
  412572:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
  412574:	2601      	movs	r6, #1
  412576:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
  412578:	69e3      	ldr	r3, [r4, #28]
  41257a:	b17b      	cbz	r3, 41259c <lv_img_decoder_built_in_open+0x118>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  41257c:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
  41257e:	2002      	movs	r0, #2
  412580:	fa00 f00a 	lsl.w	r0, r0, sl
  412584:	4b51      	ldr	r3, [pc, #324]	; (4126cc <lv_img_decoder_built_in_open+0x248>)
  412586:	4798      	blx	r3
  412588:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
  41258a:	4b51      	ldr	r3, [pc, #324]	; (4126d0 <lv_img_decoder_built_in_open+0x24c>)
  41258c:	4798      	blx	r3
  41258e:	b9f0      	cbnz	r0, 4125ce <lv_img_decoder_built_in_open+0x14a>
  412590:	686a      	ldr	r2, [r5, #4]
  412592:	2300      	movs	r3, #0
  412594:	4850      	ldr	r0, [pc, #320]	; (4126d8 <lv_img_decoder_built_in_open+0x254>)
  412596:	4951      	ldr	r1, [pc, #324]	; (4126dc <lv_img_decoder_built_in_open+0x258>)
  412598:	4788      	blx	r1
  41259a:	e7fe      	b.n	41259a <lv_img_decoder_built_in_open+0x116>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  41259c:	200c      	movs	r0, #12
  41259e:	4b4b      	ldr	r3, [pc, #300]	; (4126cc <lv_img_decoder_built_in_open+0x248>)
  4125a0:	4798      	blx	r3
  4125a2:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  4125a4:	4b4a      	ldr	r3, [pc, #296]	; (4126d0 <lv_img_decoder_built_in_open+0x24c>)
  4125a6:	4798      	blx	r3
  4125a8:	b928      	cbnz	r0, 4125b6 <lv_img_decoder_built_in_open+0x132>
  4125aa:	69e2      	ldr	r2, [r4, #28]
  4125ac:	2300      	movs	r3, #0
  4125ae:	484a      	ldr	r0, [pc, #296]	; (4126d8 <lv_img_decoder_built_in_open+0x254>)
  4125b0:	494a      	ldr	r1, [pc, #296]	; (4126dc <lv_img_decoder_built_in_open+0x258>)
  4125b2:	4788      	blx	r1
  4125b4:	e7fe      	b.n	4125b4 <lv_img_decoder_built_in_open+0x130>
            if(dsc->user_data == NULL) {
  4125b6:	69e0      	ldr	r0, [r4, #28]
  4125b8:	b928      	cbnz	r0, 4125c6 <lv_img_decoder_built_in_open+0x142>
                lv_img_decoder_built_in_close(decoder, dsc);
  4125ba:	4621      	mov	r1, r4
  4125bc:	4638      	mov	r0, r7
  4125be:	4b45      	ldr	r3, [pc, #276]	; (4126d4 <lv_img_decoder_built_in_open+0x250>)
  4125c0:	4798      	blx	r3
                return LV_RES_INV;
  4125c2:	2000      	movs	r0, #0
  4125c4:	e77a      	b.n	4124bc <lv_img_decoder_built_in_open+0x38>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  4125c6:	210c      	movs	r1, #12
  4125c8:	4b45      	ldr	r3, [pc, #276]	; (4126e0 <lv_img_decoder_built_in_open+0x25c>)
  4125ca:	4798      	blx	r3
  4125cc:	e7d6      	b.n	41257c <lv_img_decoder_built_in_open+0xf8>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
  4125ce:	4630      	mov	r0, r6
  4125d0:	4b3e      	ldr	r3, [pc, #248]	; (4126cc <lv_img_decoder_built_in_open+0x248>)
  4125d2:	4798      	blx	r3
  4125d4:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
  4125d6:	4b3e      	ldr	r3, [pc, #248]	; (4126d0 <lv_img_decoder_built_in_open+0x24c>)
  4125d8:	4798      	blx	r3
  4125da:	b158      	cbz	r0, 4125f4 <lv_img_decoder_built_in_open+0x170>
        if(user_data->palette == NULL || user_data->opa == NULL) {
  4125dc:	686b      	ldr	r3, [r5, #4]
  4125de:	b17b      	cbz	r3, 412600 <lv_img_decoder_built_in_open+0x17c>
  4125e0:	68ab      	ldr	r3, [r5, #8]
  4125e2:	b16b      	cbz	r3, 412600 <lv_img_decoder_built_in_open+0x17c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  4125e4:	7aa3      	ldrb	r3, [r4, #10]
  4125e6:	2b01      	cmp	r3, #1
  4125e8:	d010      	beq.n	41260c <lv_img_decoder_built_in_open+0x188>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
  4125ea:	6863      	ldr	r3, [r4, #4]
  4125ec:	f8d3 c008 	ldr.w	ip, [r3, #8]
            for(i = 0; i < palette_size; i++) {
  4125f0:	2300      	movs	r3, #0
  4125f2:	e054      	b.n	41269e <lv_img_decoder_built_in_open+0x21a>
        LV_ASSERT_MEM(user_data->opa);
  4125f4:	68aa      	ldr	r2, [r5, #8]
  4125f6:	2300      	movs	r3, #0
  4125f8:	4837      	ldr	r0, [pc, #220]	; (4126d8 <lv_img_decoder_built_in_open+0x254>)
  4125fa:	4938      	ldr	r1, [pc, #224]	; (4126dc <lv_img_decoder_built_in_open+0x258>)
  4125fc:	4788      	blx	r1
  4125fe:	e7fe      	b.n	4125fe <lv_img_decoder_built_in_open+0x17a>
            lv_img_decoder_built_in_close(decoder, dsc);
  412600:	4621      	mov	r1, r4
  412602:	4638      	mov	r0, r7
  412604:	4b33      	ldr	r3, [pc, #204]	; (4126d4 <lv_img_decoder_built_in_open+0x250>)
  412606:	4798      	blx	r3
            return LV_RES_INV;
  412608:	2000      	movs	r0, #0
  41260a:	e757      	b.n	4124bc <lv_img_decoder_built_in_open+0x38>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
  41260c:	2104      	movs	r1, #4
  41260e:	6828      	ldr	r0, [r5, #0]
  412610:	4b35      	ldr	r3, [pc, #212]	; (4126e8 <lv_img_decoder_built_in_open+0x264>)
  412612:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
  412614:	2700      	movs	r7, #0
  412616:	e022      	b.n	41265e <lv_img_decoder_built_in_open+0x1da>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
  412618:	2300      	movs	r3, #0
  41261a:	2204      	movs	r2, #4
  41261c:	4669      	mov	r1, sp
  41261e:	6828      	ldr	r0, [r5, #0]
  412620:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4126ec <lv_img_decoder_built_in_open+0x268>
  412624:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
  412626:	6869      	ldr	r1, [r5, #4]
  412628:	f89d 0002 	ldrb.w	r0, [sp, #2]
  41262c:	f89d 3001 	ldrb.w	r3, [sp, #1]
  412630:	f89d 2000 	ldrb.w	r2, [sp]
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  412634:	ea4f 1e53 	mov.w	lr, r3, lsr #5
  412638:	08c0      	lsrs	r0, r0, #3
  41263a:	08d2      	lsrs	r2, r2, #3
  41263c:	f3c3 0382 	ubfx	r3, r3, #2, #3
  412640:	f36e 0902 	bfi	r9, lr, #0, #3
  412644:	f360 09c7 	bfi	r9, r0, #3, #5
  412648:	f362 290c 	bfi	r9, r2, #8, #5
  41264c:	f363 394f 	bfi	r9, r3, #13, #3
  412650:	f821 9017 	strh.w	r9, [r1, r7, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
  412654:	68ab      	ldr	r3, [r5, #8]
  412656:	f89d 2003 	ldrb.w	r2, [sp, #3]
  41265a:	55da      	strb	r2, [r3, r7]
            for(i = 0; i < palette_size; i++) {
  41265c:	3701      	adds	r7, #1
  41265e:	42b7      	cmp	r7, r6
  412660:	d3da      	bcc.n	412618 <lv_img_decoder_built_in_open+0x194>
  412662:	e01e      	b.n	4126a2 <lv_img_decoder_built_in_open+0x21e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
  412664:	6869      	ldr	r1, [r5, #4]
  412666:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
  41266a:	f890 e002 	ldrb.w	lr, [r0, #2]
  41266e:	7842      	ldrb	r2, [r0, #1]
  412670:	f81c 7023 	ldrb.w	r7, [ip, r3, lsl #2]
  412674:	ea4f 1952 	mov.w	r9, r2, lsr #5
  412678:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  41267c:	08ff      	lsrs	r7, r7, #3
  41267e:	f3c2 0282 	ubfx	r2, r2, #2, #3
  412682:	f369 0802 	bfi	r8, r9, #0, #3
  412686:	f36e 08c7 	bfi	r8, lr, #3, #5
  41268a:	f367 280c 	bfi	r8, r7, #8, #5
  41268e:	f362 384f 	bfi	r8, r2, #13, #3
  412692:	f821 8013 	strh.w	r8, [r1, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
  412696:	68aa      	ldr	r2, [r5, #8]
  412698:	78c1      	ldrb	r1, [r0, #3]
  41269a:	54d1      	strb	r1, [r2, r3]
            for(i = 0; i < palette_size; i++) {
  41269c:	3301      	adds	r3, #1
  41269e:	42b3      	cmp	r3, r6
  4126a0:	d3e0      	bcc.n	412664 <lv_img_decoder_built_in_open+0x1e0>
        dsc->img_data = NULL;
  4126a2:	2300      	movs	r3, #0
  4126a4:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
  4126a6:	2001      	movs	r0, #1
  4126a8:	e708      	b.n	4124bc <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
  4126aa:	4621      	mov	r1, r4
  4126ac:	4638      	mov	r0, r7
  4126ae:	4b09      	ldr	r3, [pc, #36]	; (4126d4 <lv_img_decoder_built_in_open+0x250>)
  4126b0:	4798      	blx	r3
        return LV_RES_INV;
  4126b2:	2000      	movs	r0, #0
  4126b4:	e702      	b.n	4124bc <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
  4126b6:	2000      	movs	r0, #0
  4126b8:	e700      	b.n	4124bc <lv_img_decoder_built_in_open+0x38>
  4126ba:	bf00      	nop
  4126bc:	0041527d 	.word	0x0041527d
  4126c0:	00421404 	.word	0x00421404
  4126c4:	0041ebc9 	.word	0x0041ebc9
  4126c8:	004151bd 	.word	0x004151bd
  4126cc:	0041576d 	.word	0x0041576d
  4126d0:	00415065 	.word	0x00415065
  4126d4:	00412449 	.word	0x00412449
  4126d8:	00421264 	.word	0x00421264
  4126dc:	00415071 	.word	0x00415071
  4126e0:	00415ca1 	.word	0x00415ca1
  4126e4:	0040c701 	.word	0x0040c701
  4126e8:	00415175 	.word	0x00415175
  4126ec:	00415139 	.word	0x00415139

004126f0 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
  4126f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4126f4:	b083      	sub	sp, #12
  4126f6:	4680      	mov	r8, r0
  4126f8:	4689      	mov	r9, r1
  4126fa:	4614      	mov	r4, r2
  4126fc:	461f      	mov	r7, r3
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4126fe:	69c6      	ldr	r6, [r0, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  412700:	7b00      	ldrb	r0, [r0, #12]
  412702:	f000 001f 	and.w	r0, r0, #31
  412706:	4b15      	ldr	r3, [pc, #84]	; (41275c <lv_img_decoder_built_in_line_true_color+0x6c>)
  412708:	4798      	blx	r3
  41270a:	4605      	mov	r5, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
  41270c:	f8d8 100c 	ldr.w	r1, [r8, #12]
  412710:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412714:	fb01 9104 	mla	r1, r1, r4, r9
  412718:	fb01 f100 	mul.w	r1, r1, r0
  41271c:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
  41271e:	3104      	adds	r1, #4
  412720:	6830      	ldr	r0, [r6, #0]
  412722:	4b0f      	ldr	r3, [pc, #60]	; (412760 <lv_img_decoder_built_in_line_true_color+0x70>)
  412724:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
  412726:	b118      	cbz	r0, 412730 <lv_img_decoder_built_in_line_true_color+0x40>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
  412728:	2000      	movs	r0, #0
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
  41272a:	b003      	add	sp, #12
  41272c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t btr = len * (px_size >> 3);
  412730:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  412734:	fb05 f507 	mul.w	r5, r5, r7
    uint32_t br  = 0;
  412738:	ab02      	add	r3, sp, #8
  41273a:	2200      	movs	r2, #0
  41273c:	f843 2d04 	str.w	r2, [r3, #-4]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
  412740:	462a      	mov	r2, r5
  412742:	990a      	ldr	r1, [sp, #40]	; 0x28
  412744:	6830      	ldr	r0, [r6, #0]
  412746:	4c07      	ldr	r4, [pc, #28]	; (412764 <lv_img_decoder_built_in_line_true_color+0x74>)
  412748:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
  41274a:	b920      	cbnz	r0, 412756 <lv_img_decoder_built_in_line_true_color+0x66>
  41274c:	9b01      	ldr	r3, [sp, #4]
  41274e:	429d      	cmp	r5, r3
  412750:	d1eb      	bne.n	41272a <lv_img_decoder_built_in_line_true_color+0x3a>
    return LV_RES_OK;
  412752:	2001      	movs	r0, #1
  412754:	e7e9      	b.n	41272a <lv_img_decoder_built_in_line_true_color+0x3a>
        return LV_RES_INV;
  412756:	2000      	movs	r0, #0
  412758:	e7e7      	b.n	41272a <lv_img_decoder_built_in_line_true_color+0x3a>
  41275a:	bf00      	nop
  41275c:	0040c701 	.word	0x0040c701
  412760:	00415175 	.word	0x00415175
  412764:	00415139 	.word	0x00415139

00412768 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
  412768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41276c:	b08b      	sub	sp, #44	; 0x2c
  41276e:	4680      	mov	r8, r0
  412770:	460c      	mov	r4, r1
  412772:	4693      	mov	fp, r2
  412774:	461e      	mov	r6, r3
  412776:	9d14      	ldr	r5, [sp, #80]	; 0x50

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
  412778:	2700      	movs	r7, #0
  41277a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
  41277e:	23ff      	movs	r3, #255	; 0xff
  412780:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  412784:	4b6a      	ldr	r3, [pc, #424]	; (412930 <lv_img_decoder_built_in_line_alpha+0x1c8>)
  412786:	f853 2b04 	ldr.w	r2, [r3], #4
  41278a:	9208      	str	r2, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
  41278c:	f10d 0e10 	add.w	lr, sp, #16
  412790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  412792:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
  412796:	f8b8 0008 	ldrh.w	r0, [r8, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
  41279a:	463b      	mov	r3, r7
  41279c:	e008      	b.n	4127b0 <lv_img_decoder_built_in_line_alpha+0x48>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
  41279e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4127a2:	b281      	uxth	r1, r0
  4127a4:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  4127a6:	3201      	adds	r2, #1
  4127a8:	0a09      	lsrs	r1, r1, #8
  4127aa:	54a9      	strb	r1, [r5, r2]
    for(i = 0; i < len; i++) {
  4127ac:	3301      	adds	r3, #1
  4127ae:	b21b      	sxth	r3, r3
  4127b0:	42b3      	cmp	r3, r6
  4127b2:	dbf4      	blt.n	41279e <lv_img_decoder_built_in_line_alpha+0x36>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
  4127b4:	f898 000c 	ldrb.w	r0, [r8, #12]
  4127b8:	f000 001f 	and.w	r0, r0, #31
  4127bc:	4b5d      	ldr	r3, [pc, #372]	; (412934 <lv_img_decoder_built_in_line_alpha+0x1cc>)
  4127be:	4798      	blx	r3
  4127c0:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  4127c2:	2701      	movs	r7, #1
  4127c4:	4087      	lsls	r7, r0
  4127c6:	b2bf      	uxth	r7, r7
  4127c8:	3f01      	subs	r7, #1
  4127ca:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
  4127cc:	f898 300c 	ldrb.w	r3, [r8, #12]
  4127d0:	f003 031f 	and.w	r3, r3, #31
  4127d4:	3b0b      	subs	r3, #11
  4127d6:	2b03      	cmp	r3, #3
  4127d8:	d864      	bhi.n	4128a4 <lv_img_decoder_built_in_line_alpha+0x13c>
  4127da:	e8df f003 	tbb	[pc, r3]
  4127de:	2802      	.short	0x2802
  4127e0:	5740      	.short	0x5740
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  4127e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4127e6:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4127ea:	10da      	asrs	r2, r3, #3
  4127ec:	b211      	sxth	r1, r2
  4127ee:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x7) w++;
  4127f0:	f013 0f07 	tst.w	r3, #7
  4127f4:	d001      	beq.n	4127fa <lv_img_decoder_built_in_line_alpha+0x92>
  4127f6:	1c53      	adds	r3, r2, #1
  4127f8:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 3); /*First pixel*/
  4127fa:	10e3      	asrs	r3, r4, #3
  4127fc:	9a01      	ldr	r2, [sp, #4]
  4127fe:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 7 - (x & 0x7);
  412802:	43e4      	mvns	r4, r4
  412804:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
  412808:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  41280c:	f8d8 301c 	ldr.w	r3, [r8, #28]
  412810:	9303      	str	r3, [sp, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  412812:	9801      	ldr	r0, [sp, #4]
  412814:	4b48      	ldr	r3, [pc, #288]	; (412938 <lv_img_decoder_built_in_line_alpha+0x1d0>)
  412816:	4798      	blx	r3
  412818:	9002      	str	r0, [sp, #8]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  41281a:	f898 300a 	ldrb.w	r3, [r8, #10]
  41281e:	2b00      	cmp	r3, #0
  412820:	d149      	bne.n	4128b6 <lv_img_decoder_built_in_line_alpha+0x14e>
        const lv_img_dsc_t * img_dsc = dsc->src;
  412822:	f8d8 3004 	ldr.w	r3, [r8, #4]

        data_tmp = img_dsc->data + ofs;
  412826:	689b      	ldr	r3, [r3, #8]
  412828:	449b      	add	fp, r3
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  41282a:	2100      	movs	r1, #0
  41282c:	e05d      	b.n	4128ea <lv_img_decoder_built_in_line_alpha+0x182>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  41282e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412832:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412836:	109a      	asrs	r2, r3, #2
  412838:	b211      	sxth	r1, r2
  41283a:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x3) w++;
  41283c:	f013 0f03 	tst.w	r3, #3
  412840:	d001      	beq.n	412846 <lv_img_decoder_built_in_line_alpha+0xde>
  412842:	1c53      	adds	r3, r2, #1
  412844:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 2); /*First pixel*/
  412846:	10a3      	asrs	r3, r4, #2
  412848:	9a01      	ldr	r2, [sp, #4]
  41284a:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 6 - ((x & 0x3) * 2);
  41284e:	b2a4      	uxth	r4, r4
  412850:	43e4      	mvns	r4, r4
  412852:	f004 0403 	and.w	r4, r4, #3
  412856:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
  412858:	f10d 0a20 	add.w	sl, sp, #32
            break;
  41285c:	e7d6      	b.n	41280c <lv_img_decoder_built_in_line_alpha+0xa4>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  41285e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412862:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412866:	105a      	asrs	r2, r3, #1
  412868:	b211      	sxth	r1, r2
  41286a:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x1) w++;
  41286c:	f013 0f01 	tst.w	r3, #1
  412870:	d001      	beq.n	412876 <lv_img_decoder_built_in_line_alpha+0x10e>
  412872:	1c53      	adds	r3, r2, #1
  412874:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 1); /*First pixel*/
  412876:	1063      	asrs	r3, r4, #1
  412878:	9a01      	ldr	r2, [sp, #4]
  41287a:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 4 - ((x & 0x1) * 4);
  41287e:	f014 0f01 	tst.w	r4, #1
  412882:	d114      	bne.n	4128ae <lv_img_decoder_built_in_line_alpha+0x146>
  412884:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
  412886:	f10d 0a10 	add.w	sl, sp, #16
  41288a:	e7bf      	b.n	41280c <lv_img_decoder_built_in_line_alpha+0xa4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  41288c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412890:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412894:	b29a      	uxth	r2, r3
  412896:	b21b      	sxth	r3, r3
  412898:	9301      	str	r3, [sp, #4]
            ofs += w * y + x;  /*First pixel*/
  41289a:	fb0b 4b02 	mla	fp, fp, r2, r4
            pos = 0;
  41289e:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
  4128a0:	46a2      	mov	sl, r4
            break;
  4128a2:	e7b3      	b.n	41280c <lv_img_decoder_built_in_line_alpha+0xa4>
    int8_t pos   = 0;
  4128a4:	2400      	movs	r4, #0
    uint32_t ofs = 0;
  4128a6:	46a3      	mov	fp, r4
    lv_coord_t w = 0;
  4128a8:	9401      	str	r4, [sp, #4]
    const lv_opa_t * opa_table = NULL;
  4128aa:	46a2      	mov	sl, r4
  4128ac:	e7ae      	b.n	41280c <lv_img_decoder_built_in_line_alpha+0xa4>
            pos       = 4 - ((x & 0x1) * 4);
  4128ae:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
  4128b0:	f10d 0a10 	add.w	sl, sp, #16
  4128b4:	e7aa      	b.n	41280c <lv_img_decoder_built_in_line_alpha+0xa4>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  4128b6:	f10b 0104 	add.w	r1, fp, #4
  4128ba:	9b03      	ldr	r3, [sp, #12]
  4128bc:	6818      	ldr	r0, [r3, #0]
  4128be:	4b1f      	ldr	r3, [pc, #124]	; (41293c <lv_img_decoder_built_in_line_alpha+0x1d4>)
  4128c0:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  4128c2:	2300      	movs	r3, #0
  4128c4:	9a01      	ldr	r2, [sp, #4]
  4128c6:	9902      	ldr	r1, [sp, #8]
  4128c8:	9803      	ldr	r0, [sp, #12]
  4128ca:	6800      	ldr	r0, [r0, #0]
  4128cc:	f8df b074 	ldr.w	fp, [pc, #116]	; 412944 <lv_img_decoder_built_in_line_alpha+0x1dc>
  4128d0:	47d8      	blx	fp
        data_tmp = fs_buf;
  4128d2:	f8dd b008 	ldr.w	fp, [sp, #8]
  4128d6:	e7a8      	b.n	41282a <lv_img_decoder_built_in_line_alpha+0xc2>
    }

    for(i = 0; i < len; i++) {
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  4128d8:	f805 e000 	strb.w	lr, [r5, r0]
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
  4128dc:	eba4 0409 	sub.w	r4, r4, r9
  4128e0:	b264      	sxtb	r4, r4
        if(pos < 0) {
  4128e2:	2c00      	cmp	r4, #0
  4128e4:	db17      	blt.n	412916 <lv_img_decoder_built_in_line_alpha+0x1ae>
    for(i = 0; i < len; i++) {
  4128e6:	3101      	adds	r1, #1
  4128e8:	b209      	sxth	r1, r1
  4128ea:	42b1      	cmp	r1, r6
  4128ec:	da19      	bge.n	412922 <lv_img_decoder_built_in_line_alpha+0x1ba>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  4128ee:	f89b 3000 	ldrb.w	r3, [fp]
  4128f2:	fa07 f204 	lsl.w	r2, r7, r4
  4128f6:	4013      	ands	r3, r2
  4128f8:	4123      	asrs	r3, r4
  4128fa:	fa5f fe83 	uxtb.w	lr, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  4128fe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
  412902:	3002      	adds	r0, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
  412904:	f898 200c 	ldrb.w	r2, [r8, #12]
  412908:	f002 021f 	and.w	r2, r2, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  41290c:	2a0e      	cmp	r2, #14
  41290e:	d0e3      	beq.n	4128d8 <lv_img_decoder_built_in_line_alpha+0x170>
  412910:	f81a e00e 	ldrb.w	lr, [sl, lr]
  412914:	e7e0      	b.n	4128d8 <lv_img_decoder_built_in_line_alpha+0x170>
            pos = 8 - px_size;
  412916:	f1c9 0408 	rsb	r4, r9, #8
  41291a:	b264      	sxtb	r4, r4
            data_tmp++;
  41291c:	f10b 0b01 	add.w	fp, fp, #1
  412920:	e7e1      	b.n	4128e6 <lv_img_decoder_built_in_line_alpha+0x17e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  412922:	9802      	ldr	r0, [sp, #8]
  412924:	4b06      	ldr	r3, [pc, #24]	; (412940 <lv_img_decoder_built_in_line_alpha+0x1d8>)
  412926:	4798      	blx	r3

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  412928:	2001      	movs	r0, #1
  41292a:	b00b      	add	sp, #44	; 0x2c
  41292c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412930:	004213f0 	.word	0x004213f0
  412934:	0040c701 	.word	0x0040c701
  412938:	00415b15 	.word	0x00415b15
  41293c:	00415175 	.word	0x00415175
  412940:	004158c5 	.word	0x004158c5
  412944:	00415139 	.word	0x00415139

00412948 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
  412948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41294c:	b083      	sub	sp, #12
  41294e:	4682      	mov	sl, r0
  412950:	460c      	mov	r4, r1
  412952:	4616      	mov	r6, r2
  412954:	4699      	mov	r9, r3
  412956:	9d0c      	ldr	r5, [sp, #48]	; 0x30

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  412958:	7b00      	ldrb	r0, [r0, #12]
  41295a:	f000 001f 	and.w	r0, r0, #31
  41295e:	4b5d      	ldr	r3, [pc, #372]	; (412ad4 <lv_img_decoder_built_in_line_indexed+0x18c>)
  412960:	4798      	blx	r3
  412962:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  412964:	2701      	movs	r7, #1
  412966:	4087      	lsls	r7, r0
  412968:	b2bf      	uxth	r7, r7
  41296a:	3f01      	subs	r7, #1
  41296c:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
  41296e:	f89a 300c 	ldrb.w	r3, [sl, #12]
  412972:	f003 031f 	and.w	r3, r3, #31
  412976:	3b07      	subs	r3, #7
  412978:	2b03      	cmp	r3, #3
  41297a:	d868      	bhi.n	412a4e <lv_img_decoder_built_in_line_indexed+0x106>
  41297c:	e8df f003 	tbb	[pc, r3]
  412980:	58412902 	.word	0x58412902
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  412984:	f8da 300c 	ldr.w	r3, [sl, #12]
  412988:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41298c:	10da      	asrs	r2, r3, #3
  41298e:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x7) w++;
  412992:	f013 0f07 	tst.w	r3, #7
  412996:	d001      	beq.n	41299c <lv_img_decoder_built_in_line_indexed+0x54>
  412998:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
  41299c:	10e3      	asrs	r3, r4, #3
  41299e:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 8;                /*Skip the palette*/
  4129a2:	f106 0308 	add.w	r3, r6, #8
  4129a6:	9301      	str	r3, [sp, #4]
            pos = 7 - (x & 0x7);
  4129a8:	43e4      	mvns	r4, r4
  4129aa:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4129ae:	f8da 601c 	ldr.w	r6, [sl, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  4129b2:	4658      	mov	r0, fp
  4129b4:	4b48      	ldr	r3, [pc, #288]	; (412ad8 <lv_img_decoder_built_in_line_indexed+0x190>)
  4129b6:	4798      	blx	r3
  4129b8:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  4129ba:	f89a 300a 	ldrb.w	r3, [sl, #10]
  4129be:	2b00      	cmp	r3, #0
  4129c0:	d14c      	bne.n	412a5c <lv_img_decoder_built_in_line_indexed+0x114>
        const lv_img_dsc_t * img_dsc = dsc->src;
  4129c2:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
  4129c6:	689b      	ldr	r3, [r3, #8]
  4129c8:	9a01      	ldr	r2, [sp, #4]
  4129ca:	441a      	add	r2, r3
  4129cc:	4696      	mov	lr, r2
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  4129ce:	2100      	movs	r1, #0
  4129d0:	e056      	b.n	412a80 <lv_img_decoder_built_in_line_indexed+0x138>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  4129d2:	f8da 300c 	ldr.w	r3, [sl, #12]
  4129d6:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4129da:	109a      	asrs	r2, r3, #2
  4129dc:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x3) w++;
  4129e0:	f013 0f03 	tst.w	r3, #3
  4129e4:	d001      	beq.n	4129ea <lv_img_decoder_built_in_line_indexed+0xa2>
  4129e6:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
  4129ea:	10a3      	asrs	r3, r4, #2
  4129ec:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 16;               /*Skip the palette*/
  4129f0:	f106 0310 	add.w	r3, r6, #16
  4129f4:	9301      	str	r3, [sp, #4]
            pos = 6 - ((x & 0x3) * 2);
  4129f6:	b2a4      	uxth	r4, r4
  4129f8:	43e4      	mvns	r4, r4
  4129fa:	f004 0403 	and.w	r4, r4, #3
  4129fe:	0064      	lsls	r4, r4, #1
            break;
  412a00:	e7d5      	b.n	4129ae <lv_img_decoder_built_in_line_indexed+0x66>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  412a02:	f8da 300c 	ldr.w	r3, [sl, #12]
  412a06:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412a0a:	105a      	asrs	r2, r3, #1
  412a0c:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x1) w++;
  412a10:	f013 0f01 	tst.w	r3, #1
  412a14:	d001      	beq.n	412a1a <lv_img_decoder_built_in_line_indexed+0xd2>
  412a16:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  412a1a:	1063      	asrs	r3, r4, #1
  412a1c:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 64;               /*Skip the palette*/
  412a20:	f106 0340 	add.w	r3, r6, #64	; 0x40
  412a24:	9301      	str	r3, [sp, #4]
            pos = 4 - ((x & 0x1) * 4);
  412a26:	f014 0f01 	tst.w	r4, #1
  412a2a:	d115      	bne.n	412a58 <lv_img_decoder_built_in_line_indexed+0x110>
  412a2c:	2404      	movs	r4, #4
  412a2e:	e7be      	b.n	4129ae <lv_img_decoder_built_in_line_indexed+0x66>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  412a30:	f8da 300c 	ldr.w	r3, [sl, #12]
  412a34:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
  412a38:	fa1f f38b 	uxth.w	r3, fp
  412a3c:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
  412a40:	fb06 4403 	mla	r4, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
  412a44:	f504 6380 	add.w	r3, r4, #1024	; 0x400
  412a48:	9301      	str	r3, [sp, #4]
            pos = 0;
  412a4a:	2400      	movs	r4, #0
            break;
  412a4c:	e7af      	b.n	4129ae <lv_img_decoder_built_in_line_indexed+0x66>
    uint32_t ofs = 0;
  412a4e:	2300      	movs	r3, #0
  412a50:	9301      	str	r3, [sp, #4]
    int8_t pos   = 0;
  412a52:	461c      	mov	r4, r3
    lv_coord_t w = 0;
  412a54:	469b      	mov	fp, r3
  412a56:	e7aa      	b.n	4129ae <lv_img_decoder_built_in_line_indexed+0x66>
            pos = 4 - ((x & 0x1) * 4);
  412a58:	2400      	movs	r4, #0
  412a5a:	e7a8      	b.n	4129ae <lv_img_decoder_built_in_line_indexed+0x66>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  412a5c:	9901      	ldr	r1, [sp, #4]
  412a5e:	3104      	adds	r1, #4
  412a60:	6830      	ldr	r0, [r6, #0]
  412a62:	4b1e      	ldr	r3, [pc, #120]	; (412adc <lv_img_decoder_built_in_line_indexed+0x194>)
  412a64:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  412a66:	2300      	movs	r3, #0
  412a68:	465a      	mov	r2, fp
  412a6a:	f8dd b000 	ldr.w	fp, [sp]
  412a6e:	4659      	mov	r1, fp
  412a70:	6830      	ldr	r0, [r6, #0]
  412a72:	f8df a070 	ldr.w	sl, [pc, #112]	; 412ae4 <lv_img_decoder_built_in_line_indexed+0x19c>
  412a76:	47d0      	blx	sl
        data_tmp = fs_buf;
  412a78:	46de      	mov	lr, fp
  412a7a:	e7a8      	b.n	4129ce <lv_img_decoder_built_in_line_indexed+0x86>
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
  412a7c:	3101      	adds	r1, #1
  412a7e:	b209      	sxth	r1, r1
  412a80:	4549      	cmp	r1, r9
  412a82:	da20      	bge.n	412ac6 <lv_img_decoder_built_in_line_indexed+0x17e>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  412a84:	f89e 3000 	ldrb.w	r3, [lr]
  412a88:	fa07 f204 	lsl.w	r2, r7, r4
  412a8c:	4013      	ands	r3, r2
  412a8e:	4123      	asrs	r3, r4

        lv_color_t color = user_data->palette[val_act];
  412a90:	6870      	ldr	r0, [r6, #4]
  412a92:	b2db      	uxtb	r3, r3
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
  412a94:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  412a98:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  412a9c:	54a8      	strb	r0, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
  412a9e:	f102 0c01 	add.w	ip, r2, #1
  412aa2:	0a00      	lsrs	r0, r0, #8
  412aa4:	f805 000c 	strb.w	r0, [r5, ip]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
  412aa8:	3202      	adds	r2, #2
  412aaa:	68b0      	ldr	r0, [r6, #8]
  412aac:	5cc3      	ldrb	r3, [r0, r3]
  412aae:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
  412ab0:	eba4 0408 	sub.w	r4, r4, r8
  412ab4:	b264      	sxtb	r4, r4
        if(pos < 0) {
  412ab6:	2c00      	cmp	r4, #0
  412ab8:	dae0      	bge.n	412a7c <lv_img_decoder_built_in_line_indexed+0x134>
            pos = 8 - px_size;
  412aba:	f1c8 0408 	rsb	r4, r8, #8
  412abe:	b264      	sxtb	r4, r4
            data_tmp++;
  412ac0:	f10e 0e01 	add.w	lr, lr, #1
  412ac4:	e7da      	b.n	412a7c <lv_img_decoder_built_in_line_indexed+0x134>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  412ac6:	9800      	ldr	r0, [sp, #0]
  412ac8:	4b05      	ldr	r3, [pc, #20]	; (412ae0 <lv_img_decoder_built_in_line_indexed+0x198>)
  412aca:	4798      	blx	r3
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  412acc:	2001      	movs	r0, #1
  412ace:	b003      	add	sp, #12
  412ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412ad4:	0040c701 	.word	0x0040c701
  412ad8:	00415b15 	.word	0x00415b15
  412adc:	00415175 	.word	0x00415175
  412ae0:	004158c5 	.word	0x004158c5
  412ae4:	00415139 	.word	0x00415139

00412ae8 <lv_img_decoder_built_in_read_line>:
{
  412ae8:	b530      	push	{r4, r5, lr}
  412aea:	b083      	sub	sp, #12
  412aec:	4608      	mov	r0, r1
  412aee:	4611      	mov	r1, r2
  412af0:	461a      	mov	r2, r3
  412af2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  412af6:	7b04      	ldrb	r4, [r0, #12]
  412af8:	f004 041f 	and.w	r4, r4, #31
  412afc:	1f25      	subs	r5, r4, #4
  412afe:	b2ed      	uxtb	r5, r5
  412b00:	2d02      	cmp	r5, #2
  412b02:	d80a      	bhi.n	412b1a <lv_img_decoder_built_in_read_line+0x32>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  412b04:	7a84      	ldrb	r4, [r0, #10]
  412b06:	2c01      	cmp	r4, #1
  412b08:	d002      	beq.n	412b10 <lv_img_decoder_built_in_read_line+0x28>
    lv_res_t res = LV_RES_INV;
  412b0a:	2000      	movs	r0, #0
}
  412b0c:	b003      	add	sp, #12
  412b0e:	bd30      	pop	{r4, r5, pc}
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
  412b10:	9c07      	ldr	r4, [sp, #28]
  412b12:	9400      	str	r4, [sp, #0]
  412b14:	4c0b      	ldr	r4, [pc, #44]	; (412b44 <lv_img_decoder_built_in_read_line+0x5c>)
  412b16:	47a0      	blx	r4
  412b18:	e7f8      	b.n	412b0c <lv_img_decoder_built_in_read_line+0x24>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  412b1a:	f1a4 050b 	sub.w	r5, r4, #11
  412b1e:	b2ed      	uxtb	r5, r5
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  412b20:	2d03      	cmp	r5, #3
  412b22:	d905      	bls.n	412b30 <lv_img_decoder_built_in_read_line+0x48>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  412b24:	3c07      	subs	r4, #7
  412b26:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
  412b28:	2c03      	cmp	r4, #3
  412b2a:	d906      	bls.n	412b3a <lv_img_decoder_built_in_read_line+0x52>
        return LV_RES_INV;
  412b2c:	2000      	movs	r0, #0
  412b2e:	e7ed      	b.n	412b0c <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
  412b30:	9c07      	ldr	r4, [sp, #28]
  412b32:	9400      	str	r4, [sp, #0]
  412b34:	4c04      	ldr	r4, [pc, #16]	; (412b48 <lv_img_decoder_built_in_read_line+0x60>)
  412b36:	47a0      	blx	r4
  412b38:	e7e8      	b.n	412b0c <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
  412b3a:	9c07      	ldr	r4, [sp, #28]
  412b3c:	9400      	str	r4, [sp, #0]
  412b3e:	4c03      	ldr	r4, [pc, #12]	; (412b4c <lv_img_decoder_built_in_read_line+0x64>)
  412b40:	47a0      	blx	r4
  412b42:	e7e3      	b.n	412b0c <lv_img_decoder_built_in_read_line+0x24>
  412b44:	004126f1 	.word	0x004126f1
  412b48:	00412769 	.word	0x00412769
  412b4c:	00412949 	.word	0x00412949

00412b50 <lv_img_decoder_get_info>:
{
  412b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  412b52:	4607      	mov	r7, r0
  412b54:	460e      	mov	r6, r1
    header->always_zero = 0;
  412b56:	780b      	ldrb	r3, [r1, #0]
  412b58:	f36f 1347 	bfc	r3, #5, #3
  412b5c:	700b      	strb	r3, [r1, #0]
    header->h = 0;
  412b5e:	884b      	ldrh	r3, [r1, #2]
  412b60:	f36f 134f 	bfc	r3, #5, #11
  412b64:	804b      	strh	r3, [r1, #2]
    header->w = 0;
  412b66:	680b      	ldr	r3, [r1, #0]
  412b68:	f36f 2394 	bfc	r3, #10, #11
  412b6c:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
  412b6e:	f36f 0304 	bfc	r3, #0, #5
  412b72:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412b74:	480c      	ldr	r0, [pc, #48]	; (412ba8 <lv_img_decoder_get_info+0x58>)
  412b76:	4b0d      	ldr	r3, [pc, #52]	; (412bac <lv_img_decoder_get_info+0x5c>)
  412b78:	4798      	blx	r3
  412b7a:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  412b7c:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412b7e:	e005      	b.n	412b8c <lv_img_decoder_get_info+0x3c>
        res = LV_RES_INV;
  412b80:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412b82:	4621      	mov	r1, r4
  412b84:	4808      	ldr	r0, [pc, #32]	; (412ba8 <lv_img_decoder_get_info+0x58>)
  412b86:	4b0a      	ldr	r3, [pc, #40]	; (412bb0 <lv_img_decoder_get_info+0x60>)
  412b88:	4798      	blx	r3
  412b8a:	4604      	mov	r4, r0
  412b8c:	b14c      	cbz	r4, 412ba2 <lv_img_decoder_get_info+0x52>
        if(d->info_cb) {
  412b8e:	6823      	ldr	r3, [r4, #0]
  412b90:	2b00      	cmp	r3, #0
  412b92:	d0f5      	beq.n	412b80 <lv_img_decoder_get_info+0x30>
            res = d->info_cb(d, src, header);
  412b94:	4632      	mov	r2, r6
  412b96:	4639      	mov	r1, r7
  412b98:	4620      	mov	r0, r4
  412b9a:	4798      	blx	r3
  412b9c:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
  412b9e:	2801      	cmp	r0, #1
  412ba0:	d1ef      	bne.n	412b82 <lv_img_decoder_get_info+0x32>
}
  412ba2:	4628      	mov	r0, r5
  412ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412ba6:	bf00      	nop
  412ba8:	2043a190 	.word	0x2043a190
  412bac:	00415375 	.word	0x00415375
  412bb0:	00415389 	.word	0x00415389

00412bb4 <lv_img_decoder_open>:
{
  412bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  412bb6:	4606      	mov	r6, r0
  412bb8:	460f      	mov	r7, r1
    dsc->color     = color;
  412bba:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
  412bbc:	4608      	mov	r0, r1
  412bbe:	4b1d      	ldr	r3, [pc, #116]	; (412c34 <lv_img_decoder_open+0x80>)
  412bc0:	4798      	blx	r3
  412bc2:	72b0      	strb	r0, [r6, #10]
    dsc->user_data = NULL;
  412bc4:	2300      	movs	r3, #0
  412bc6:	61f3      	str	r3, [r6, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  412bc8:	2801      	cmp	r0, #1
  412bca:	d006      	beq.n	412bda <lv_img_decoder_open+0x26>
        dsc->src       = src;
  412bcc:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412bce:	481a      	ldr	r0, [pc, #104]	; (412c38 <lv_img_decoder_open+0x84>)
  412bd0:	4b1a      	ldr	r3, [pc, #104]	; (412c3c <lv_img_decoder_open+0x88>)
  412bd2:	4798      	blx	r3
  412bd4:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  412bd6:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412bd8:	e00f      	b.n	412bfa <lv_img_decoder_open+0x46>
        size_t fnlen = strlen(src);
  412bda:	4638      	mov	r0, r7
  412bdc:	4b18      	ldr	r3, [pc, #96]	; (412c40 <lv_img_decoder_open+0x8c>)
  412bde:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
  412be0:	3001      	adds	r0, #1
  412be2:	4b18      	ldr	r3, [pc, #96]	; (412c44 <lv_img_decoder_open+0x90>)
  412be4:	4798      	blx	r3
  412be6:	6070      	str	r0, [r6, #4]
        strcpy((char *)dsc->src, src);
  412be8:	4639      	mov	r1, r7
  412bea:	4b17      	ldr	r3, [pc, #92]	; (412c48 <lv_img_decoder_open+0x94>)
  412bec:	4798      	blx	r3
  412bee:	e7ee      	b.n	412bce <lv_img_decoder_open+0x1a>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412bf0:	4621      	mov	r1, r4
  412bf2:	4811      	ldr	r0, [pc, #68]	; (412c38 <lv_img_decoder_open+0x84>)
  412bf4:	4b15      	ldr	r3, [pc, #84]	; (412c4c <lv_img_decoder_open+0x98>)
  412bf6:	4798      	blx	r3
  412bf8:	4604      	mov	r4, r0
  412bfa:	b1c4      	cbz	r4, 412c2e <lv_img_decoder_open+0x7a>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
  412bfc:	6823      	ldr	r3, [r4, #0]
  412bfe:	2b00      	cmp	r3, #0
  412c00:	d0f6      	beq.n	412bf0 <lv_img_decoder_open+0x3c>
  412c02:	6862      	ldr	r2, [r4, #4]
  412c04:	2a00      	cmp	r2, #0
  412c06:	d0f3      	beq.n	412bf0 <lv_img_decoder_open+0x3c>
        res = d->info_cb(d, src, &dsc->header);
  412c08:	f106 020c 	add.w	r2, r6, #12
  412c0c:	4639      	mov	r1, r7
  412c0e:	4620      	mov	r0, r4
  412c10:	4798      	blx	r3
  412c12:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
  412c14:	2801      	cmp	r0, #1
  412c16:	d1eb      	bne.n	412bf0 <lv_img_decoder_open+0x3c>
        dsc->error_msg = NULL;
  412c18:	2300      	movs	r3, #0
  412c1a:	61b3      	str	r3, [r6, #24]
        dsc->img_data  = NULL;
  412c1c:	6133      	str	r3, [r6, #16]
        dsc->decoder   = d;
  412c1e:	6034      	str	r4, [r6, #0]
        res = d->open_cb(d, dsc);
  412c20:	6863      	ldr	r3, [r4, #4]
  412c22:	4631      	mov	r1, r6
  412c24:	4620      	mov	r0, r4
  412c26:	4798      	blx	r3
  412c28:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
  412c2a:	2801      	cmp	r0, #1
  412c2c:	d1e0      	bne.n	412bf0 <lv_img_decoder_open+0x3c>
}
  412c2e:	4628      	mov	r0, r5
  412c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412c32:	bf00      	nop
  412c34:	0040c9c5 	.word	0x0040c9c5
  412c38:	2043a190 	.word	0x2043a190
  412c3c:	00415375 	.word	0x00415375
  412c40:	0041ef81 	.word	0x0041ef81
  412c44:	0041576d 	.word	0x0041576d
  412c48:	0041ee9d 	.word	0x0041ee9d
  412c4c:	00415389 	.word	0x00415389

00412c50 <lv_img_decoder_read_line>:
{
  412c50:	b570      	push	{r4, r5, r6, lr}
  412c52:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
  412c54:	6806      	ldr	r6, [r0, #0]
  412c56:	68b4      	ldr	r4, [r6, #8]
  412c58:	b154      	cbz	r4, 412c70 <lv_img_decoder_read_line+0x20>
  412c5a:	461d      	mov	r5, r3
  412c5c:	4613      	mov	r3, r2
  412c5e:	460a      	mov	r2, r1
  412c60:	4601      	mov	r1, r0
  412c62:	9806      	ldr	r0, [sp, #24]
  412c64:	9001      	str	r0, [sp, #4]
  412c66:	9500      	str	r5, [sp, #0]
  412c68:	4630      	mov	r0, r6
  412c6a:	47a0      	blx	r4
}
  412c6c:	b002      	add	sp, #8
  412c6e:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
  412c70:	2000      	movs	r0, #0
  412c72:	e7fb      	b.n	412c6c <lv_img_decoder_read_line+0x1c>

00412c74 <lv_img_decoder_close>:
    if(dsc->decoder) {
  412c74:	6803      	ldr	r3, [r0, #0]
  412c76:	b183      	cbz	r3, 412c9a <lv_img_decoder_close+0x26>
{
  412c78:	b510      	push	{r4, lr}
  412c7a:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
  412c7c:	68da      	ldr	r2, [r3, #12]
  412c7e:	b112      	cbz	r2, 412c86 <lv_img_decoder_close+0x12>
  412c80:	4601      	mov	r1, r0
  412c82:	4618      	mov	r0, r3
  412c84:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  412c86:	7aa3      	ldrb	r3, [r4, #10]
  412c88:	2b01      	cmp	r3, #1
  412c8a:	d000      	beq.n	412c8e <lv_img_decoder_close+0x1a>
  412c8c:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
  412c8e:	6860      	ldr	r0, [r4, #4]
  412c90:	4b02      	ldr	r3, [pc, #8]	; (412c9c <lv_img_decoder_close+0x28>)
  412c92:	4798      	blx	r3
            dsc->src = NULL;
  412c94:	2300      	movs	r3, #0
  412c96:	6063      	str	r3, [r4, #4]
}
  412c98:	e7f8      	b.n	412c8c <lv_img_decoder_close+0x18>
  412c9a:	4770      	bx	lr
  412c9c:	00415831 	.word	0x00415831

00412ca0 <lv_img_decoder_create>:
{
  412ca0:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
  412ca2:	480a      	ldr	r0, [pc, #40]	; (412ccc <lv_img_decoder_create+0x2c>)
  412ca4:	4b0a      	ldr	r3, [pc, #40]	; (412cd0 <lv_img_decoder_create+0x30>)
  412ca6:	4798      	blx	r3
  412ca8:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
  412caa:	4b0a      	ldr	r3, [pc, #40]	; (412cd4 <lv_img_decoder_create+0x34>)
  412cac:	4798      	blx	r3
  412cae:	b130      	cbz	r0, 412cbe <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
  412cb0:	b11c      	cbz	r4, 412cba <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
  412cb2:	2110      	movs	r1, #16
  412cb4:	4620      	mov	r0, r4
  412cb6:	4b08      	ldr	r3, [pc, #32]	; (412cd8 <lv_img_decoder_create+0x38>)
  412cb8:	4798      	blx	r3
}
  412cba:	4620      	mov	r0, r4
  412cbc:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
  412cbe:	4622      	mov	r2, r4
  412cc0:	2300      	movs	r3, #0
  412cc2:	4806      	ldr	r0, [pc, #24]	; (412cdc <lv_img_decoder_create+0x3c>)
  412cc4:	4906      	ldr	r1, [pc, #24]	; (412ce0 <lv_img_decoder_create+0x40>)
  412cc6:	4788      	blx	r1
  412cc8:	e7fe      	b.n	412cc8 <lv_img_decoder_create+0x28>
  412cca:	bf00      	nop
  412ccc:	2043a190 	.word	0x2043a190
  412cd0:	004152dd 	.word	0x004152dd
  412cd4:	00415065 	.word	0x00415065
  412cd8:	00415ca1 	.word	0x00415ca1
  412cdc:	00421264 	.word	0x00421264
  412ce0:	00415071 	.word	0x00415071

00412ce4 <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
  412ce4:	6001      	str	r1, [r0, #0]
  412ce6:	4770      	bx	lr

00412ce8 <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
  412ce8:	6041      	str	r1, [r0, #4]
  412cea:	4770      	bx	lr

00412cec <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
  412cec:	6081      	str	r1, [r0, #8]
  412cee:	4770      	bx	lr

00412cf0 <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
  412cf0:	60c1      	str	r1, [r0, #12]
  412cf2:	4770      	bx	lr

00412cf4 <_lv_img_decoder_init>:
{
  412cf4:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
  412cf6:	2110      	movs	r1, #16
  412cf8:	4810      	ldr	r0, [pc, #64]	; (412d3c <_lv_img_decoder_init+0x48>)
  412cfa:	4b11      	ldr	r3, [pc, #68]	; (412d40 <_lv_img_decoder_init+0x4c>)
  412cfc:	4798      	blx	r3
    decoder = lv_img_decoder_create();
  412cfe:	4b11      	ldr	r3, [pc, #68]	; (412d44 <_lv_img_decoder_init+0x50>)
  412d00:	4798      	blx	r3
    if(decoder == NULL) {
  412d02:	4604      	mov	r4, r0
  412d04:	b178      	cbz	r0, 412d26 <_lv_img_decoder_init+0x32>
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
  412d06:	4910      	ldr	r1, [pc, #64]	; (412d48 <_lv_img_decoder_init+0x54>)
  412d08:	4b10      	ldr	r3, [pc, #64]	; (412d4c <_lv_img_decoder_init+0x58>)
  412d0a:	4798      	blx	r3
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
  412d0c:	4910      	ldr	r1, [pc, #64]	; (412d50 <_lv_img_decoder_init+0x5c>)
  412d0e:	4620      	mov	r0, r4
  412d10:	4b10      	ldr	r3, [pc, #64]	; (412d54 <_lv_img_decoder_init+0x60>)
  412d12:	4798      	blx	r3
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
  412d14:	4910      	ldr	r1, [pc, #64]	; (412d58 <_lv_img_decoder_init+0x64>)
  412d16:	4620      	mov	r0, r4
  412d18:	4b10      	ldr	r3, [pc, #64]	; (412d5c <_lv_img_decoder_init+0x68>)
  412d1a:	4798      	blx	r3
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
  412d1c:	4910      	ldr	r1, [pc, #64]	; (412d60 <_lv_img_decoder_init+0x6c>)
  412d1e:	4620      	mov	r0, r4
  412d20:	4b10      	ldr	r3, [pc, #64]	; (412d64 <_lv_img_decoder_init+0x70>)
  412d22:	4798      	blx	r3
  412d24:	bd10      	pop	{r4, pc}
        LV_ASSERT_MEM(decoder);
  412d26:	4b10      	ldr	r3, [pc, #64]	; (412d68 <_lv_img_decoder_init+0x74>)
  412d28:	4798      	blx	r3
  412d2a:	2800      	cmp	r0, #0
  412d2c:	d1fa      	bne.n	412d24 <_lv_img_decoder_init+0x30>
  412d2e:	4622      	mov	r2, r4
  412d30:	2300      	movs	r3, #0
  412d32:	480e      	ldr	r0, [pc, #56]	; (412d6c <_lv_img_decoder_init+0x78>)
  412d34:	490e      	ldr	r1, [pc, #56]	; (412d70 <_lv_img_decoder_init+0x7c>)
  412d36:	4788      	blx	r1
  412d38:	e7fe      	b.n	412d38 <_lv_img_decoder_init+0x44>
  412d3a:	bf00      	nop
  412d3c:	2043a190 	.word	0x2043a190
  412d40:	004152cb 	.word	0x004152cb
  412d44:	00412ca1 	.word	0x00412ca1
  412d48:	00412381 	.word	0x00412381
  412d4c:	00412ce5 	.word	0x00412ce5
  412d50:	00412485 	.word	0x00412485
  412d54:	00412ce9 	.word	0x00412ce9
  412d58:	00412ae9 	.word	0x00412ae9
  412d5c:	00412ced 	.word	0x00412ced
  412d60:	00412449 	.word	0x00412449
  412d64:	00412cf1 	.word	0x00412cf1
  412d68:	00415065 	.word	0x00415065
  412d6c:	00421264 	.word	0x00421264
  412d70:	00415071 	.word	0x00415071

00412d74 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
  412d74:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
  412d76:	6843      	ldr	r3, [r0, #4]
  412d78:	4798      	blx	r3
}
  412d7a:	bd08      	pop	{r3, pc}

00412d7c <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
  412d7c:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
  412d7e:	6804      	ldr	r4, [r0, #0]
  412d80:	47a0      	blx	r4
}
  412d82:	bd10      	pop	{r4, pc}

00412d84 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
  412d84:	b510      	push	{r4, lr}
  412d86:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
  412d88:	4613      	mov	r3, r2
  412d8a:	460a      	mov	r2, r1
  412d8c:	a901      	add	r1, sp, #4
  412d8e:	4c04      	ldr	r4, [pc, #16]	; (412da0 <lv_font_get_glyph_width+0x1c>)
  412d90:	47a0      	blx	r4
    if(ret) return g.adv_w;
  412d92:	b118      	cbz	r0, 412d9c <lv_font_get_glyph_width+0x18>
  412d94:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
  412d98:	b004      	add	sp, #16
  412d9a:	bd10      	pop	{r4, pc}
    else return 0;
  412d9c:	2000      	movs	r0, #0
  412d9e:	e7fb      	b.n	412d98 <lv_font_get_glyph_width+0x14>
  412da0:	00412d7d 	.word	0x00412d7d

00412da4 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
  412da4:	7803      	ldrb	r3, [r0, #0]
  412da6:	780a      	ldrb	r2, [r1, #0]
  412da8:	4293      	cmp	r3, r2
  412daa:	d001      	beq.n	412db0 <kern_pair_8_compare+0xc>
  412dac:	1a98      	subs	r0, r3, r2
  412dae:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
  412db0:	7840      	ldrb	r0, [r0, #1]
  412db2:	784b      	ldrb	r3, [r1, #1]
  412db4:	1ac0      	subs	r0, r0, r3

}
  412db6:	4770      	bx	lr

00412db8 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
  412db8:	8803      	ldrh	r3, [r0, #0]
  412dba:	880a      	ldrh	r2, [r1, #0]
  412dbc:	4293      	cmp	r3, r2
  412dbe:	d001      	beq.n	412dc4 <kern_pair_16_compare+0xc>
  412dc0:	1a98      	subs	r0, r3, r2
  412dc2:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
  412dc4:	8840      	ldrh	r0, [r0, #2]
  412dc6:	884b      	ldrh	r3, [r1, #2]
  412dc8:	1ac0      	subs	r0, r0, r3
}
  412dca:	4770      	bx	lr

00412dcc <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
  412dcc:	8800      	ldrh	r0, [r0, #0]
  412dce:	880b      	ldrh	r3, [r1, #0]
}
  412dd0:	1ac0      	subs	r0, r0, r3
  412dd2:	4770      	bx	lr

00412dd4 <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
  412dd4:	460b      	mov	r3, r1
  412dd6:	2900      	cmp	r1, #0
  412dd8:	d061      	beq.n	412e9e <get_glyph_dsc_id+0xca>
{
  412dda:	b5f0      	push	{r4, r5, r6, r7, lr}
  412ddc:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  412dde:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  412de0:	6962      	ldr	r2, [r4, #20]
  412de2:	4291      	cmp	r1, r2
  412de4:	d013      	beq.n	412e0e <get_glyph_dsc_id+0x3a>
  412de6:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
  412de8:	8a61      	ldrh	r1, [r4, #18]
  412dea:	f3c1 0108 	ubfx	r1, r1, #0, #9
  412dee:	428a      	cmp	r2, r1
  412df0:	da51      	bge.n	412e96 <get_glyph_dsc_id+0xc2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  412df2:	68a0      	ldr	r0, [r4, #8]
  412df4:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  412df8:	00a9      	lsls	r1, r5, #2
  412dfa:	460e      	mov	r6, r1
  412dfc:	1847      	adds	r7, r0, r1
  412dfe:	5841      	ldr	r1, [r0, r1]
  412e00:	1a59      	subs	r1, r3, r1
        if(rcp > fdsc->cmaps[i].range_length) continue;
  412e02:	88b8      	ldrh	r0, [r7, #4]
  412e04:	4281      	cmp	r1, r0
  412e06:	d904      	bls.n	412e12 <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
  412e08:	3201      	adds	r2, #1
  412e0a:	b292      	uxth	r2, r2
  412e0c:	e7ec      	b.n	412de8 <get_glyph_dsc_id+0x14>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  412e0e:	69a0      	ldr	r0, [r4, #24]
  412e10:	e00a      	b.n	412e28 <get_glyph_dsc_id+0x54>
  412e12:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
  412e14:	7cbb      	ldrb	r3, [r7, #18]
  412e16:	2b02      	cmp	r3, #2
  412e18:	d008      	beq.n	412e2c <get_glyph_dsc_id+0x58>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
  412e1a:	b953      	cbnz	r3, 412e32 <get_glyph_dsc_id+0x5e>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
  412e1c:	68fb      	ldr	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
  412e1e:	88f8      	ldrh	r0, [r7, #6]
  412e20:	5c5b      	ldrb	r3, [r3, r1]
  412e22:	4418      	add	r0, r3
        fdsc->last_letter = letter;
  412e24:	6165      	str	r5, [r4, #20]
        fdsc->last_glyph_id = glyph_id;
  412e26:	61a0      	str	r0, [r4, #24]
}
  412e28:	b005      	add	sp, #20
  412e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
  412e2c:	88f8      	ldrh	r0, [r7, #6]
  412e2e:	4408      	add	r0, r1
  412e30:	e7f8      	b.n	412e24 <get_glyph_dsc_id+0x50>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
  412e32:	2b03      	cmp	r3, #3
  412e34:	d003      	beq.n	412e3e <get_glyph_dsc_id+0x6a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
  412e36:	2b01      	cmp	r3, #1
  412e38:	d017      	beq.n	412e6a <get_glyph_dsc_id+0x96>
        uint32_t glyph_id = 0;
  412e3a:	2000      	movs	r0, #0
  412e3c:	e7f2      	b.n	412e24 <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  412e3e:	a804      	add	r0, sp, #16
  412e40:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  412e44:	68b9      	ldr	r1, [r7, #8]
  412e46:	8a3a      	ldrh	r2, [r7, #16]
  412e48:	4b16      	ldr	r3, [pc, #88]	; (412ea4 <get_glyph_dsc_id+0xd0>)
  412e4a:	9300      	str	r3, [sp, #0]
  412e4c:	2302      	movs	r3, #2
  412e4e:	4f16      	ldr	r7, [pc, #88]	; (412ea8 <get_glyph_dsc_id+0xd4>)
  412e50:	47b8      	blx	r7
            if(p) {
  412e52:	4603      	mov	r3, r0
  412e54:	b138      	cbz	r0, 412e66 <get_glyph_dsc_id+0x92>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  412e56:	68a2      	ldr	r2, [r4, #8]
  412e58:	4416      	add	r6, r2
  412e5a:	68b0      	ldr	r0, [r6, #8]
  412e5c:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
  412e5e:	88f3      	ldrh	r3, [r6, #6]
  412e60:	eb03 0060 	add.w	r0, r3, r0, asr #1
  412e64:	e7de      	b.n	412e24 <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  412e66:	2000      	movs	r0, #0
  412e68:	e7dc      	b.n	412e24 <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  412e6a:	a804      	add	r0, sp, #16
  412e6c:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  412e70:	68b9      	ldr	r1, [r7, #8]
  412e72:	8a3a      	ldrh	r2, [r7, #16]
  412e74:	4b0b      	ldr	r3, [pc, #44]	; (412ea4 <get_glyph_dsc_id+0xd0>)
  412e76:	9300      	str	r3, [sp, #0]
  412e78:	2302      	movs	r3, #2
  412e7a:	4f0b      	ldr	r7, [pc, #44]	; (412ea8 <get_glyph_dsc_id+0xd4>)
  412e7c:	47b8      	blx	r7
            if(p) {
  412e7e:	b140      	cbz	r0, 412e92 <get_glyph_dsc_id+0xbe>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  412e80:	68a3      	ldr	r3, [r4, #8]
  412e82:	441e      	add	r6, r3
  412e84:	68b3      	ldr	r3, [r6, #8]
  412e86:	1ac2      	subs	r2, r0, r3
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
  412e88:	68f1      	ldr	r1, [r6, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
  412e8a:	88f3      	ldrh	r3, [r6, #6]
  412e8c:	5a88      	ldrh	r0, [r1, r2]
  412e8e:	4418      	add	r0, r3
  412e90:	e7c8      	b.n	412e24 <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  412e92:	2000      	movs	r0, #0
  412e94:	e7c6      	b.n	412e24 <get_glyph_dsc_id+0x50>
    fdsc->last_letter = letter;
  412e96:	6163      	str	r3, [r4, #20]
    fdsc->last_glyph_id = 0;
  412e98:	2000      	movs	r0, #0
  412e9a:	61a0      	str	r0, [r4, #24]
    return 0;
  412e9c:	e7c4      	b.n	412e28 <get_glyph_dsc_id+0x54>
    if(letter == '\0') return 0;
  412e9e:	4608      	mov	r0, r1
  412ea0:	4770      	bx	lr
  412ea2:	bf00      	nop
  412ea4:	00412dcd 	.word	0x00412dcd
  412ea8:	004166b9 	.word	0x004166b9

00412eac <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  412eac:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
  412eae:	7cd8      	ldrb	r0, [r3, #19]
  412eb0:	f010 0f20 	tst.w	r0, #32
  412eb4:	d13a      	bne.n	412f2c <get_kern_value+0x80>
{
  412eb6:	b570      	push	{r4, r5, r6, lr}
  412eb8:	b084      	sub	sp, #16
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
  412eba:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
  412ebc:	7ae3      	ldrb	r3, [r4, #11]
  412ebe:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
  412ec2:	d004      	beq.n	412ece <get_kern_value+0x22>
        else if(kdsc->glyph_ids_size == 1) {
  412ec4:	2b40      	cmp	r3, #64	; 0x40
  412ec6:	d01a      	beq.n	412efe <get_kern_value+0x52>
    int8_t value = 0;
  412ec8:	2000      	movs	r0, #0
}
  412eca:	b004      	add	sp, #16
  412ecc:	bd70      	pop	{r4, r5, r6, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
  412ece:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
  412ed0:	0212      	lsls	r2, r2, #8
  412ed2:	b292      	uxth	r2, r2
  412ed4:	440a      	add	r2, r1
  412ed6:	a804      	add	r0, sp, #16
  412ed8:	f820 2d04 	strh.w	r2, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
  412edc:	68a2      	ldr	r2, [r4, #8]
  412ede:	4b1d      	ldr	r3, [pc, #116]	; (412f54 <get_kern_value+0xa8>)
  412ee0:	9300      	str	r3, [sp, #0]
  412ee2:	2302      	movs	r3, #2
  412ee4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  412ee8:	4629      	mov	r1, r5
  412eea:	4e1b      	ldr	r6, [pc, #108]	; (412f58 <get_kern_value+0xac>)
  412eec:	47b0      	blx	r6
            if(kid_p) {
  412eee:	b120      	cbz	r0, 412efa <get_kern_value+0x4e>
                lv_uintptr_t ofs = kid_p - g_ids;
  412ef0:	1b43      	subs	r3, r0, r5
  412ef2:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
  412ef4:	6862      	ldr	r2, [r4, #4]
  412ef6:	56d0      	ldrsb	r0, [r2, r3]
  412ef8:	e7e7      	b.n	412eca <get_kern_value+0x1e>
    int8_t value = 0;
  412efa:	2000      	movs	r0, #0
  412efc:	e7e5      	b.n	412eca <get_kern_value+0x1e>
            const uint32_t * g_ids = kdsc->glyph_ids;
  412efe:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
  412f00:	eb01 4202 	add.w	r2, r1, r2, lsl #16
  412f04:	a804      	add	r0, sp, #16
  412f06:	f840 2d04 	str.w	r2, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
  412f0a:	68a2      	ldr	r2, [r4, #8]
  412f0c:	4b13      	ldr	r3, [pc, #76]	; (412f5c <get_kern_value+0xb0>)
  412f0e:	9300      	str	r3, [sp, #0]
  412f10:	2304      	movs	r3, #4
  412f12:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  412f16:	4629      	mov	r1, r5
  412f18:	4e0f      	ldr	r6, [pc, #60]	; (412f58 <get_kern_value+0xac>)
  412f1a:	47b0      	blx	r6
            if(kid_p) {
  412f1c:	b120      	cbz	r0, 412f28 <get_kern_value+0x7c>
                lv_uintptr_t ofs = kid_p - g_ids;
  412f1e:	1b43      	subs	r3, r0, r5
  412f20:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
  412f22:	6862      	ldr	r2, [r4, #4]
  412f24:	56d0      	ldrsb	r0, [r2, r3]
  412f26:	e7d0      	b.n	412eca <get_kern_value+0x1e>
    int8_t value = 0;
  412f28:	2000      	movs	r0, #0
  412f2a:	e7ce      	b.n	412eca <get_kern_value+0x1e>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
  412f2c:	68d8      	ldr	r0, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
  412f2e:	6843      	ldr	r3, [r0, #4]
  412f30:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
  412f32:	6881      	ldr	r1, [r0, #8]
  412f34:	5c8a      	ldrb	r2, [r1, r2]
        if(left_class > 0 && right_class > 0) {
  412f36:	2b00      	cmp	r3, #0
  412f38:	bf18      	it	ne
  412f3a:	2a00      	cmpne	r2, #0
  412f3c:	d007      	beq.n	412f4e <get_kern_value+0xa2>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
  412f3e:	6801      	ldr	r1, [r0, #0]
  412f40:	3b01      	subs	r3, #1
  412f42:	7b40      	ldrb	r0, [r0, #13]
  412f44:	3a01      	subs	r2, #1
  412f46:	fb00 2303 	mla	r3, r0, r3, r2
  412f4a:	56c8      	ldrsb	r0, [r1, r3]
  412f4c:	4770      	bx	lr
    int8_t value = 0;
  412f4e:	2000      	movs	r0, #0
  412f50:	4770      	bx	lr
  412f52:	bf00      	nop
  412f54:	00412da5 	.word	0x00412da5
  412f58:	004166b9 	.word	0x004166b9
  412f5c:	00412db9 	.word	0x00412db9

00412f60 <decompress>:
{
  412f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412f64:	b087      	sub	sp, #28
  412f66:	460e      	mov	r6, r1
  412f68:	4614      	mov	r4, r2
  412f6a:	9301      	str	r3, [sp, #4]
  412f6c:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
  412f70:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  412f74:	9304      	str	r3, [sp, #16]
    if(bpp == 3) wr_size = 4;
  412f76:	2f03      	cmp	r7, #3
  412f78:	d018      	beq.n	412fac <decompress+0x4c>
    uint8_t wr_size = bpp;
  412f7a:	9702      	str	r7, [sp, #8]
    rle_in = in;
  412f7c:	4ba8      	ldr	r3, [pc, #672]	; (413220 <decompress+0x2c0>)
  412f7e:	6018      	str	r0, [r3, #0]
    rle_bpp = bpp;
  412f80:	4ba8      	ldr	r3, [pc, #672]	; (413224 <decompress+0x2c4>)
  412f82:	701f      	strb	r7, [r3, #0]
    rle_state = RLE_STATE_SINGLE;
  412f84:	2300      	movs	r3, #0
  412f86:	4aa8      	ldr	r2, [pc, #672]	; (413228 <decompress+0x2c8>)
  412f88:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
  412f8a:	4aa8      	ldr	r2, [pc, #672]	; (41322c <decompress+0x2cc>)
  412f8c:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
  412f8e:	4aa8      	ldr	r2, [pc, #672]	; (413230 <decompress+0x2d0>)
  412f90:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
  412f92:	4aa8      	ldr	r2, [pc, #672]	; (413234 <decompress+0x2d4>)
  412f94:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
  412f96:	4620      	mov	r0, r4
  412f98:	4ba7      	ldr	r3, [pc, #668]	; (413238 <decompress+0x2d8>)
  412f9a:	4798      	blx	r3
  412f9c:	4605      	mov	r5, r0
    if(prefilter) {
  412f9e:	9b04      	ldr	r3, [sp, #16]
  412fa0:	b93b      	cbnz	r3, 412fb2 <decompress+0x52>
    uint8_t * line_buf2 = NULL;
  412fa2:	2300      	movs	r3, #0
  412fa4:	9303      	str	r3, [sp, #12]
    for(i = 0; i < w; i++) {
  412fa6:	2000      	movs	r0, #0
  412fa8:	46a6      	mov	lr, r4
  412faa:	e03a      	b.n	413022 <decompress+0xc2>
    if(bpp == 3) wr_size = 4;
  412fac:	2304      	movs	r3, #4
  412fae:	9302      	str	r3, [sp, #8]
  412fb0:	e7e4      	b.n	412f7c <decompress+0x1c>
        line_buf2 = _lv_mem_buf_get(w);
  412fb2:	4620      	mov	r0, r4
  412fb4:	4ba0      	ldr	r3, [pc, #640]	; (413238 <decompress+0x2d8>)
  412fb6:	4798      	blx	r3
  412fb8:	9003      	str	r0, [sp, #12]
  412fba:	e7f4      	b.n	412fa6 <decompress+0x46>
            bit_mask = 0x1;
  412fbc:	f04f 0801 	mov.w	r8, #1
  412fc0:	e011      	b.n	412fe6 <decompress+0x86>
            bit_mask = 0x7;
  412fc2:	f04f 0807 	mov.w	r8, #7
  412fc6:	e00e      	b.n	412fe6 <decompress+0x86>
            bit_mask = 0xF;
  412fc8:	f04f 080f 	mov.w	r8, #15
  412fcc:	e00b      	b.n	412fe6 <decompress+0x86>
            bit_mask = 0xFF;
  412fce:	f04f 08ff 	mov.w	r8, #255	; 0xff
  412fd2:	e008      	b.n	412fe6 <decompress+0x86>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  412fd4:	2301      	movs	r3, #1
  412fd6:	4093      	lsls	r3, r2
  412fd8:	b2db      	uxtb	r3, r3
  412fda:	3b01      	subs	r3, #1
  412fdc:	fa5f f883 	uxtb.w	r8, r3
  412fe0:	e001      	b.n	412fe6 <decompress+0x86>
            bit_mask = 0x3;
  412fe2:	f04f 0803 	mov.w	r8, #3
    uint32_t byte_pos = bit_pos >> 3;
  412fe6:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  412fe8:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  412fec:	eb01 0902 	add.w	r9, r1, r2
  412ff0:	f1b9 0f07 	cmp.w	r9, #7
  412ff4:	d83c      	bhi.n	413070 <decompress+0x110>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  412ff6:	f81a 3003 	ldrb.w	r3, [sl, r3]
  412ffa:	4249      	negs	r1, r1
  412ffc:	1a89      	subs	r1, r1, r2
  412ffe:	3108      	adds	r1, #8
  413000:	410b      	asrs	r3, r1
  413002:	ea03 0308 	and.w	r3, r3, r8
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413006:	b11c      	cbz	r4, 413010 <decompress+0xb0>
  413008:	4989      	ldr	r1, [pc, #548]	; (413230 <decompress+0x2d0>)
  41300a:	7809      	ldrb	r1, [r1, #0]
  41300c:	4299      	cmp	r1, r3
  41300e:	d03d      	beq.n	41308c <decompress+0x12c>
        rle_prev_v = ret;
  413010:	4987      	ldr	r1, [pc, #540]	; (413230 <decompress+0x2d0>)
  413012:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  413014:	4422      	add	r2, r4
  413016:	4985      	ldr	r1, [pc, #532]	; (41322c <decompress+0x2cc>)
  413018:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  41301a:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  41301e:	3001      	adds	r0, #1
  413020:	b200      	sxth	r0, r0
  413022:	4586      	cmp	lr, r0
  413024:	f340 8188 	ble.w	413338 <decompress+0x3d8>
        out[i] = rle_next();
  413028:	eb05 0c00 	add.w	ip, r5, r0
    if(rle_state == RLE_STATE_SINGLE) {
  41302c:	4b7e      	ldr	r3, [pc, #504]	; (413228 <decompress+0x2c8>)
  41302e:	781b      	ldrb	r3, [r3, #0]
  413030:	2b00      	cmp	r3, #0
  413032:	d136      	bne.n	4130a2 <decompress+0x142>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413034:	4b7a      	ldr	r3, [pc, #488]	; (413220 <decompress+0x2c0>)
  413036:	f8d3 a000 	ldr.w	sl, [r3]
  41303a:	4b7c      	ldr	r3, [pc, #496]	; (41322c <decompress+0x2cc>)
  41303c:	681c      	ldr	r4, [r3, #0]
  41303e:	4b79      	ldr	r3, [pc, #484]	; (413224 <decompress+0x2c4>)
  413040:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  413042:	1e51      	subs	r1, r2, #1
  413044:	2907      	cmp	r1, #7
  413046:	d8c5      	bhi.n	412fd4 <decompress+0x74>
  413048:	a301      	add	r3, pc, #4	; (adr r3, 413050 <decompress+0xf0>)
  41304a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
  41304e:	bf00      	nop
  413050:	00412fbd 	.word	0x00412fbd
  413054:	00412fe3 	.word	0x00412fe3
  413058:	00412fc3 	.word	0x00412fc3
  41305c:	00412fc9 	.word	0x00412fc9
  413060:	00412fd5 	.word	0x00412fd5
  413064:	00412fd5 	.word	0x00412fd5
  413068:	00412fd5 	.word	0x00412fd5
  41306c:	00412fcf 	.word	0x00412fcf
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413070:	f81a 9003 	ldrb.w	r9, [sl, r3]
  413074:	4453      	add	r3, sl
  413076:	785b      	ldrb	r3, [r3, #1]
  413078:	eb03 2309 	add.w	r3, r3, r9, lsl #8
  41307c:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41307e:	4249      	negs	r1, r1
  413080:	1a89      	subs	r1, r1, r2
  413082:	3110      	adds	r1, #16
  413084:	410b      	asrs	r3, r1
  413086:	ea03 0308 	and.w	r3, r3, r8
  41308a:	e7bc      	b.n	413006 <decompress+0xa6>
            rle_cnt = 0;
  41308c:	f04f 0800 	mov.w	r8, #0
  413090:	4968      	ldr	r1, [pc, #416]	; (413234 <decompress+0x2d4>)
  413092:	f881 8000 	strb.w	r8, [r1]
            rle_state = RLE_STATE_REPEATE;
  413096:	f04f 0801 	mov.w	r8, #1
  41309a:	4963      	ldr	r1, [pc, #396]	; (413228 <decompress+0x2c8>)
  41309c:	f881 8000 	strb.w	r8, [r1]
  4130a0:	e7b6      	b.n	413010 <decompress+0xb0>
    else if(rle_state == RLE_STATE_REPEATE) {
  4130a2:	2b01      	cmp	r3, #1
  4130a4:	d004      	beq.n	4130b0 <decompress+0x150>
    else if(rle_state == RLE_STATE_COUNTER) {
  4130a6:	2b02      	cmp	r3, #2
  4130a8:	f000 80f3 	beq.w	413292 <decompress+0x332>
    uint8_t ret = 0;
  4130ac:	2300      	movs	r3, #0
  4130ae:	e7b4      	b.n	41301a <decompress+0xba>
        v = get_bits(rle_in, rle_rdp, 1);
  4130b0:	4b5b      	ldr	r3, [pc, #364]	; (413220 <decompress+0x2c0>)
  4130b2:	f8d3 8000 	ldr.w	r8, [r3]
  4130b6:	4b5d      	ldr	r3, [pc, #372]	; (41322c <decompress+0x2cc>)
  4130b8:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  4130ba:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  4130bc:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4130c0:	1c5c      	adds	r4, r3, #1
  4130c2:	2c07      	cmp	r4, #7
  4130c4:	d81d      	bhi.n	413102 <decompress+0x1a2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4130c6:	f818 1001 	ldrb.w	r1, [r8, r1]
  4130ca:	f1c3 0307 	rsb	r3, r3, #7
  4130ce:	fa41 f303 	asr.w	r3, r1, r3
  4130d2:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  4130d6:	4b57      	ldr	r3, [pc, #348]	; (413234 <decompress+0x2d4>)
  4130d8:	781c      	ldrb	r4, [r3, #0]
  4130da:	3401      	adds	r4, #1
  4130dc:	b2e4      	uxtb	r4, r4
  4130de:	701c      	strb	r4, [r3, #0]
        rle_rdp += 1;
  4130e0:	3201      	adds	r2, #1
  4130e2:	4b52      	ldr	r3, [pc, #328]	; (41322c <decompress+0x2cc>)
  4130e4:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  4130e6:	2901      	cmp	r1, #1
  4130e8:	d018      	beq.n	41311c <decompress+0x1bc>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4130ea:	4b4e      	ldr	r3, [pc, #312]	; (413224 <decompress+0x2c4>)
  4130ec:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  4130ee:	1e63      	subs	r3, r4, #1
  4130f0:	2b07      	cmp	r3, #7
  4130f2:	f200 808e 	bhi.w	413212 <decompress+0x2b2>
  4130f6:	e8df f003 	tbb	[pc, r3]
  4130fa:	a184      	.short	0xa184
  4130fc:	8c8c8886 	.word	0x8c8c8886
  413100:	8a8c      	.short	0x8a8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413102:	f818 4001 	ldrb.w	r4, [r8, r1]
  413106:	4441      	add	r1, r8
  413108:	7849      	ldrb	r1, [r1, #1]
  41310a:	eb01 2104 	add.w	r1, r1, r4, lsl #8
  41310e:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413110:	f1c3 030f 	rsb	r3, r3, #15
  413114:	4119      	asrs	r1, r3
  413116:	f001 0101 	and.w	r1, r1, #1
  41311a:	e7dc      	b.n	4130d6 <decompress+0x176>
            ret = rle_prev_v;
  41311c:	4b44      	ldr	r3, [pc, #272]	; (413230 <decompress+0x2d0>)
  41311e:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  413120:	2c0b      	cmp	r4, #11
  413122:	f47f af7a 	bne.w	41301a <decompress+0xba>
    uint32_t byte_pos = bit_pos >> 3;
  413126:	08d4      	lsrs	r4, r2, #3
    bit_pos = bit_pos & 0x7;
  413128:	f002 0907 	and.w	r9, r2, #7
    if(bit_pos + len >= 8) {
  41312c:	f109 0a06 	add.w	sl, r9, #6
  413130:	f1ba 0f07 	cmp.w	sl, #7
  413134:	d815      	bhi.n	413162 <decompress+0x202>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413136:	f818 4004 	ldrb.w	r4, [r8, r4]
  41313a:	f1c9 0902 	rsb	r9, r9, #2
  41313e:	fa44 f409 	asr.w	r4, r4, r9
  413142:	f004 043f 	and.w	r4, r4, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  413146:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 413234 <decompress+0x2d4>
  41314a:	f889 4000 	strb.w	r4, [r9]
                rle_rdp += 6;
  41314e:	3206      	adds	r2, #6
  413150:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 41322c <decompress+0x2cc>
  413154:	f8c9 2000 	str.w	r2, [r9]
                if(rle_cnt != 0) {
  413158:	b18c      	cbz	r4, 41317e <decompress+0x21e>
                    rle_state = RLE_STATE_COUNTER;
  41315a:	2102      	movs	r1, #2
  41315c:	4a32      	ldr	r2, [pc, #200]	; (413228 <decompress+0x2c8>)
  41315e:	7011      	strb	r1, [r2, #0]
  413160:	e75b      	b.n	41301a <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413162:	f818 a004 	ldrb.w	sl, [r8, r4]
  413166:	4444      	add	r4, r8
  413168:	7864      	ldrb	r4, [r4, #1]
  41316a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
  41316e:	b2a4      	uxth	r4, r4
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413170:	f1c9 090a 	rsb	r9, r9, #10
  413174:	fa44 f409 	asr.w	r4, r4, r9
  413178:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  41317c:	e7e3      	b.n	413146 <decompress+0x1e6>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41317e:	4b29      	ldr	r3, [pc, #164]	; (413224 <decompress+0x2c4>)
  413180:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  413182:	1e63      	subs	r3, r4, #1
  413184:	2b07      	cmp	r3, #7
  413186:	d824      	bhi.n	4131d2 <decompress+0x272>
  413188:	e8df f003 	tbb	[pc, r3]
  41318c:	1f042905 	.word	0x1f042905
  413190:	21232323 	.word	0x21232323
            bit_mask = 0x7;
  413194:	2107      	movs	r1, #7
    uint32_t byte_pos = bit_pos >> 3;
  413196:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41319a:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  41319e:	eb03 0a04 	add.w	sl, r3, r4
  4131a2:	f1ba 0f07 	cmp.w	sl, #7
  4131a6:	d81c      	bhi.n	4131e2 <decompress+0x282>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4131a8:	f818 8009 	ldrb.w	r8, [r8, r9]
  4131ac:	425b      	negs	r3, r3
  4131ae:	1b1b      	subs	r3, r3, r4
  4131b0:	3308      	adds	r3, #8
  4131b2:	fa48 f303 	asr.w	r3, r8, r3
  4131b6:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  4131b8:	491d      	ldr	r1, [pc, #116]	; (413230 <decompress+0x2d0>)
  4131ba:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  4131bc:	4422      	add	r2, r4
  4131be:	491b      	ldr	r1, [pc, #108]	; (41322c <decompress+0x2cc>)
  4131c0:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  4131c2:	2100      	movs	r1, #0
  4131c4:	4a18      	ldr	r2, [pc, #96]	; (413228 <decompress+0x2c8>)
  4131c6:	7011      	strb	r1, [r2, #0]
  4131c8:	e727      	b.n	41301a <decompress+0xba>
            bit_mask = 0xF;
  4131ca:	210f      	movs	r1, #15
  4131cc:	e7e3      	b.n	413196 <decompress+0x236>
            bit_mask = 0xFF;
  4131ce:	21ff      	movs	r1, #255	; 0xff
  4131d0:	e7e1      	b.n	413196 <decompress+0x236>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4131d2:	2101      	movs	r1, #1
  4131d4:	40a1      	lsls	r1, r4
  4131d6:	b2c9      	uxtb	r1, r1
  4131d8:	3901      	subs	r1, #1
  4131da:	b2c9      	uxtb	r1, r1
  4131dc:	e7db      	b.n	413196 <decompress+0x236>
            bit_mask = 0x3;
  4131de:	2103      	movs	r1, #3
  4131e0:	e7d9      	b.n	413196 <decompress+0x236>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4131e2:	f818 a009 	ldrb.w	sl, [r8, r9]
  4131e6:	44c8      	add	r8, r9
  4131e8:	f898 8001 	ldrb.w	r8, [r8, #1]
  4131ec:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  4131f0:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4131f4:	425b      	negs	r3, r3
  4131f6:	1b1b      	subs	r3, r3, r4
  4131f8:	3310      	adds	r3, #16
  4131fa:	fa48 f303 	asr.w	r3, r8, r3
  4131fe:	400b      	ands	r3, r1
  413200:	e7da      	b.n	4131b8 <decompress+0x258>
            bit_mask = 0x1;
  413202:	2301      	movs	r3, #1
  413204:	e01b      	b.n	41323e <decompress+0x2de>
            bit_mask = 0x7;
  413206:	2307      	movs	r3, #7
  413208:	e019      	b.n	41323e <decompress+0x2de>
            bit_mask = 0xF;
  41320a:	230f      	movs	r3, #15
  41320c:	e017      	b.n	41323e <decompress+0x2de>
            bit_mask = 0xFF;
  41320e:	23ff      	movs	r3, #255	; 0xff
  413210:	e015      	b.n	41323e <decompress+0x2de>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413212:	2301      	movs	r3, #1
  413214:	40a3      	lsls	r3, r4
  413216:	b2db      	uxtb	r3, r3
  413218:	3b01      	subs	r3, #1
  41321a:	b2db      	uxtb	r3, r3
  41321c:	e00f      	b.n	41323e <decompress+0x2de>
  41321e:	bf00      	nop
  413220:	2040c724 	.word	0x2040c724
  413224:	2040c720 	.word	0x2040c720
  413228:	2040c730 	.word	0x2040c730
  41322c:	2040c72c 	.word	0x2040c72c
  413230:	2040c728 	.word	0x2040c728
  413234:	2040c721 	.word	0x2040c721
  413238:	00415b15 	.word	0x00415b15
            bit_mask = 0x3;
  41323c:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  41323e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413242:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  413246:	eb01 0a04 	add.w	sl, r1, r4
  41324a:	f1ba 0f07 	cmp.w	sl, #7
  41324e:	d810      	bhi.n	413272 <decompress+0x312>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413250:	f818 8009 	ldrb.w	r8, [r8, r9]
  413254:	4249      	negs	r1, r1
  413256:	1b09      	subs	r1, r1, r4
  413258:	3108      	adds	r1, #8
  41325a:	fa48 f101 	asr.w	r1, r8, r1
  41325e:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413260:	49b4      	ldr	r1, [pc, #720]	; (413534 <decompress+0x5d4>)
  413262:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  413264:	4422      	add	r2, r4
  413266:	49b4      	ldr	r1, [pc, #720]	; (413538 <decompress+0x5d8>)
  413268:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  41326a:	2100      	movs	r1, #0
  41326c:	4ab3      	ldr	r2, [pc, #716]	; (41353c <decompress+0x5dc>)
  41326e:	7011      	strb	r1, [r2, #0]
  413270:	e6d3      	b.n	41301a <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413272:	f818 a009 	ldrb.w	sl, [r8, r9]
  413276:	44c8      	add	r8, r9
  413278:	f898 8001 	ldrb.w	r8, [r8, #1]
  41327c:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  413280:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413284:	4249      	negs	r1, r1
  413286:	1b09      	subs	r1, r1, r4
  413288:	3110      	adds	r1, #16
  41328a:	fa48 f101 	asr.w	r1, r8, r1
  41328e:	400b      	ands	r3, r1
  413290:	e7e6      	b.n	413260 <decompress+0x300>
        ret = rle_prev_v;
  413292:	4ba8      	ldr	r3, [pc, #672]	; (413534 <decompress+0x5d4>)
  413294:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  413296:	49aa      	ldr	r1, [pc, #680]	; (413540 <decompress+0x5e0>)
  413298:	780a      	ldrb	r2, [r1, #0]
  41329a:	3a01      	subs	r2, #1
  41329c:	b2d2      	uxtb	r2, r2
  41329e:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  4132a0:	2a00      	cmp	r2, #0
  4132a2:	f47f aeba 	bne.w	41301a <decompress+0xba>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4132a6:	4ba7      	ldr	r3, [pc, #668]	; (413544 <decompress+0x5e4>)
  4132a8:	f8d3 a000 	ldr.w	sl, [r3]
  4132ac:	4ba2      	ldr	r3, [pc, #648]	; (413538 <decompress+0x5d8>)
  4132ae:	681c      	ldr	r4, [r3, #0]
  4132b0:	4ba5      	ldr	r3, [pc, #660]	; (413548 <decompress+0x5e8>)
  4132b2:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  4132b4:	1e53      	subs	r3, r2, #1
  4132b6:	2b07      	cmp	r3, #7
  4132b8:	d80d      	bhi.n	4132d6 <decompress+0x376>
  4132ba:	e8df f003 	tbb	[pc, r3]
  4132be:	1204      	.short	0x1204
  4132c0:	0c0c0806 	.word	0x0c0c0806
  4132c4:	0a0c      	.short	0x0a0c
            bit_mask = 0x1;
  4132c6:	2301      	movs	r3, #1
  4132c8:	e00c      	b.n	4132e4 <decompress+0x384>
            bit_mask = 0x7;
  4132ca:	2307      	movs	r3, #7
  4132cc:	e00a      	b.n	4132e4 <decompress+0x384>
            bit_mask = 0xF;
  4132ce:	230f      	movs	r3, #15
  4132d0:	e008      	b.n	4132e4 <decompress+0x384>
            bit_mask = 0xFF;
  4132d2:	23ff      	movs	r3, #255	; 0xff
  4132d4:	e006      	b.n	4132e4 <decompress+0x384>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4132d6:	2301      	movs	r3, #1
  4132d8:	4093      	lsls	r3, r2
  4132da:	b2db      	uxtb	r3, r3
  4132dc:	3b01      	subs	r3, #1
  4132de:	b2db      	uxtb	r3, r3
  4132e0:	e000      	b.n	4132e4 <decompress+0x384>
            bit_mask = 0x3;
  4132e2:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4132e4:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    bit_pos = bit_pos & 0x7;
  4132e8:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  4132ec:	eb01 0902 	add.w	r9, r1, r2
  4132f0:	f1b9 0f07 	cmp.w	r9, #7
  4132f4:	d810      	bhi.n	413318 <decompress+0x3b8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4132f6:	f81a 8008 	ldrb.w	r8, [sl, r8]
  4132fa:	4249      	negs	r1, r1
  4132fc:	1a89      	subs	r1, r1, r2
  4132fe:	3108      	adds	r1, #8
  413300:	fa48 f101 	asr.w	r1, r8, r1
  413304:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413306:	498b      	ldr	r1, [pc, #556]	; (413534 <decompress+0x5d4>)
  413308:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  41330a:	4422      	add	r2, r4
  41330c:	498a      	ldr	r1, [pc, #552]	; (413538 <decompress+0x5d8>)
  41330e:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413310:	2100      	movs	r1, #0
  413312:	4a8a      	ldr	r2, [pc, #552]	; (41353c <decompress+0x5dc>)
  413314:	7011      	strb	r1, [r2, #0]
  413316:	e680      	b.n	41301a <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413318:	f81a 9008 	ldrb.w	r9, [sl, r8]
  41331c:	44d0      	add	r8, sl
  41331e:	f898 8001 	ldrb.w	r8, [r8, #1]
  413322:	eb08 2809 	add.w	r8, r8, r9, lsl #8
  413326:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41332a:	4249      	negs	r1, r1
  41332c:	1a89      	subs	r1, r1, r2
  41332e:	3110      	adds	r1, #16
  413330:	fa48 f101 	asr.w	r1, r8, r1
  413334:	400b      	ands	r3, r1
  413336:	e7e6      	b.n	413306 <decompress+0x3a6>
  413338:	4674      	mov	r4, lr
    for(i = 0; i < w; i++) {
  41333a:	f04f 0c00 	mov.w	ip, #0
  41333e:	4660      	mov	r0, ip
  413340:	f8dd e008 	ldr.w	lr, [sp, #8]
  413344:	e048      	b.n	4133d8 <decompress+0x478>
        switch(val) {
  413346:	2907      	cmp	r1, #7
  413348:	d805      	bhi.n	413356 <decompress+0x3f6>
  41334a:	e8df f001 	tbb	[pc, r1]
  41334e:	0723      	.short	0x0723
  413350:	17130f0b 	.word	0x17130f0b
  413354:	1f1b      	.short	0x1f1b
        len = 4;
  413356:	f04f 0804 	mov.w	r8, #4
  41335a:	e01e      	b.n	41339a <decompress+0x43a>
  41335c:	f04f 0804 	mov.w	r8, #4
                val = 2;
  413360:	2102      	movs	r1, #2
  413362:	e01a      	b.n	41339a <decompress+0x43a>
        len = 4;
  413364:	f04f 0804 	mov.w	r8, #4
                val = 4;
  413368:	4641      	mov	r1, r8
  41336a:	e016      	b.n	41339a <decompress+0x43a>
        len = 4;
  41336c:	f04f 0804 	mov.w	r8, #4
                val = 6;
  413370:	2106      	movs	r1, #6
  413372:	e012      	b.n	41339a <decompress+0x43a>
        len = 4;
  413374:	f04f 0804 	mov.w	r8, #4
                val = 9;
  413378:	2109      	movs	r1, #9
  41337a:	e00e      	b.n	41339a <decompress+0x43a>
        len = 4;
  41337c:	f04f 0804 	mov.w	r8, #4
                val = 11;
  413380:	210b      	movs	r1, #11
  413382:	e00a      	b.n	41339a <decompress+0x43a>
        len = 4;
  413384:	f04f 0804 	mov.w	r8, #4
                val = 13;
  413388:	210d      	movs	r1, #13
  41338a:	e006      	b.n	41339a <decompress+0x43a>
        len = 4;
  41338c:	f04f 0804 	mov.w	r8, #4
                val = 15;
  413390:	210f      	movs	r1, #15
  413392:	e002      	b.n	41339a <decompress+0x43a>
        len = 4;
  413394:	f04f 0804 	mov.w	r8, #4
                val = 0;
  413398:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  41339a:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  41339e:	4252      	negs	r2, r2
  4133a0:	eba2 0208 	sub.w	r2, r2, r8
  4133a4:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4133a6:	2301      	movs	r3, #1
  4133a8:	fa03 f308 	lsl.w	r3, r3, r8
  4133ac:	b2db      	uxtb	r3, r3
  4133ae:	3b01      	subs	r3, #1
  4133b0:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  4133b2:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  4133b6:	43db      	mvns	r3, r3
  4133b8:	4093      	lsls	r3, r2
  4133ba:	f816 9008 	ldrb.w	r9, [r6, r8]
  4133be:	ea09 0303 	and.w	r3, r9, r3
  4133c2:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  4133c4:	fa01 f202 	lsl.w	r2, r1, r2
  4133c8:	431a      	orrs	r2, r3
  4133ca:	f806 2008 	strb.w	r2, [r6, r8]
        wrp += wr_size;
  4133ce:	4470      	add	r0, lr
    for(x = 0; x < w; x++) {
  4133d0:	f10c 0c01 	add.w	ip, ip, #1
  4133d4:	fa0f fc8c 	sxth.w	ip, ip
  4133d8:	45a4      	cmp	ip, r4
  4133da:	da05      	bge.n	4133e8 <decompress+0x488>
        bits_write(out, wrp, line_buf1[x], bpp);
  4133dc:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  4133e0:	2f03      	cmp	r7, #3
  4133e2:	d0b0      	beq.n	413346 <decompress+0x3e6>
  4133e4:	46b8      	mov	r8, r7
  4133e6:	e7d8      	b.n	41339a <decompress+0x43a>
  4133e8:	2301      	movs	r3, #1
  4133ea:	9300      	str	r3, [sp, #0]
  4133ec:	f000 bc62 	b.w	413cb4 <decompress+0xd54>
            bit_mask = 0x1;
  4133f0:	2301      	movs	r3, #1
  4133f2:	e00c      	b.n	41340e <decompress+0x4ae>
            bit_mask = 0x7;
  4133f4:	2307      	movs	r3, #7
  4133f6:	e00a      	b.n	41340e <decompress+0x4ae>
            bit_mask = 0xF;
  4133f8:	230f      	movs	r3, #15
  4133fa:	e008      	b.n	41340e <decompress+0x4ae>
            bit_mask = 0xFF;
  4133fc:	23ff      	movs	r3, #255	; 0xff
  4133fe:	e006      	b.n	41340e <decompress+0x4ae>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413400:	2301      	movs	r3, #1
  413402:	408b      	lsls	r3, r1
  413404:	b2db      	uxtb	r3, r3
  413406:	3b01      	subs	r3, #1
  413408:	b2db      	uxtb	r3, r3
  41340a:	e000      	b.n	41340e <decompress+0x4ae>
            bit_mask = 0x3;
  41340c:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  41340e:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  413412:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  413416:	eb02 0b01 	add.w	fp, r2, r1
  41341a:	f1bb 0f07 	cmp.w	fp, #7
  41341e:	d83d      	bhi.n	41349c <decompress+0x53c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413420:	f81a 8008 	ldrb.w	r8, [sl, r8]
  413424:	4252      	negs	r2, r2
  413426:	1a52      	subs	r2, r2, r1
  413428:	3208      	adds	r2, #8
  41342a:	fa48 f202 	asr.w	r2, r8, r2
  41342e:	4013      	ands	r3, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413430:	b118      	cbz	r0, 41343a <decompress+0x4da>
  413432:	4a40      	ldr	r2, [pc, #256]	; (413534 <decompress+0x5d4>)
  413434:	7812      	ldrb	r2, [r2, #0]
  413436:	429a      	cmp	r2, r3
  413438:	d041      	beq.n	4134be <decompress+0x55e>
        rle_prev_v = ret;
  41343a:	4a3e      	ldr	r2, [pc, #248]	; (413534 <decompress+0x5d4>)
  41343c:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
  41343e:	4401      	add	r1, r0
  413440:	4a3d      	ldr	r2, [pc, #244]	; (413538 <decompress+0x5d8>)
  413442:	6011      	str	r1, [r2, #0]
        out[i] = rle_next();
  413444:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  413448:	f10e 0e01 	add.w	lr, lr, #1
  41344c:	fa0f fe8e 	sxth.w	lr, lr
  413450:	4574      	cmp	r4, lr
  413452:	f340 8191 	ble.w	413778 <decompress+0x818>
        out[i] = rle_next();
  413456:	eb09 0c0e 	add.w	ip, r9, lr
    if(rle_state == RLE_STATE_SINGLE) {
  41345a:	4b38      	ldr	r3, [pc, #224]	; (41353c <decompress+0x5dc>)
  41345c:	781b      	ldrb	r3, [r3, #0]
  41345e:	2b00      	cmp	r3, #0
  413460:	d138      	bne.n	4134d4 <decompress+0x574>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413462:	4b38      	ldr	r3, [pc, #224]	; (413544 <decompress+0x5e4>)
  413464:	f8d3 a000 	ldr.w	sl, [r3]
  413468:	4b33      	ldr	r3, [pc, #204]	; (413538 <decompress+0x5d8>)
  41346a:	6818      	ldr	r0, [r3, #0]
  41346c:	4b36      	ldr	r3, [pc, #216]	; (413548 <decompress+0x5e8>)
  41346e:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  413470:	1e4b      	subs	r3, r1, #1
  413472:	2b07      	cmp	r3, #7
  413474:	d8c4      	bhi.n	413400 <decompress+0x4a0>
  413476:	a201      	add	r2, pc, #4	; (adr r2, 41347c <decompress+0x51c>)
  413478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  41347c:	004133f1 	.word	0x004133f1
  413480:	0041340d 	.word	0x0041340d
  413484:	004133f5 	.word	0x004133f5
  413488:	004133f9 	.word	0x004133f9
  41348c:	00413401 	.word	0x00413401
  413490:	00413401 	.word	0x00413401
  413494:	00413401 	.word	0x00413401
  413498:	004133fd 	.word	0x004133fd
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41349c:	f81a b008 	ldrb.w	fp, [sl, r8]
  4134a0:	44d0      	add	r8, sl
  4134a2:	f898 8001 	ldrb.w	r8, [r8, #1]
  4134a6:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  4134aa:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4134ae:	4252      	negs	r2, r2
  4134b0:	1a52      	subs	r2, r2, r1
  4134b2:	3210      	adds	r2, #16
  4134b4:	fa4b fb02 	asr.w	fp, fp, r2
  4134b8:	ea0b 0303 	and.w	r3, fp, r3
  4134bc:	e7b8      	b.n	413430 <decompress+0x4d0>
            rle_cnt = 0;
  4134be:	f04f 0800 	mov.w	r8, #0
  4134c2:	4a1f      	ldr	r2, [pc, #124]	; (413540 <decompress+0x5e0>)
  4134c4:	f882 8000 	strb.w	r8, [r2]
            rle_state = RLE_STATE_REPEATE;
  4134c8:	f04f 0801 	mov.w	r8, #1
  4134cc:	4a1b      	ldr	r2, [pc, #108]	; (41353c <decompress+0x5dc>)
  4134ce:	f882 8000 	strb.w	r8, [r2]
  4134d2:	e7b2      	b.n	41343a <decompress+0x4da>
    else if(rle_state == RLE_STATE_REPEATE) {
  4134d4:	2b01      	cmp	r3, #1
  4134d6:	d004      	beq.n	4134e2 <decompress+0x582>
    else if(rle_state == RLE_STATE_COUNTER) {
  4134d8:	2b02      	cmp	r3, #2
  4134da:	f000 80f3 	beq.w	4136c4 <decompress+0x764>
    uint8_t ret = 0;
  4134de:	2300      	movs	r3, #0
  4134e0:	e7b0      	b.n	413444 <decompress+0x4e4>
        v = get_bits(rle_in, rle_rdp, 1);
  4134e2:	4b18      	ldr	r3, [pc, #96]	; (413544 <decompress+0x5e4>)
  4134e4:	f8d3 8000 	ldr.w	r8, [r3]
  4134e8:	4b13      	ldr	r3, [pc, #76]	; (413538 <decompress+0x5d8>)
  4134ea:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  4134ec:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  4134ee:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4134f2:	1c58      	adds	r0, r3, #1
  4134f4:	2807      	cmp	r0, #7
  4134f6:	d829      	bhi.n	41354c <decompress+0x5ec>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4134f8:	f818 1001 	ldrb.w	r1, [r8, r1]
  4134fc:	f1c3 0307 	rsb	r3, r3, #7
  413500:	fa41 f303 	asr.w	r3, r1, r3
  413504:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  413508:	4b0d      	ldr	r3, [pc, #52]	; (413540 <decompress+0x5e0>)
  41350a:	7818      	ldrb	r0, [r3, #0]
  41350c:	3001      	adds	r0, #1
  41350e:	b2c0      	uxtb	r0, r0
  413510:	7018      	strb	r0, [r3, #0]
        rle_rdp += 1;
  413512:	3201      	adds	r2, #1
  413514:	4b08      	ldr	r3, [pc, #32]	; (413538 <decompress+0x5d8>)
  413516:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  413518:	2901      	cmp	r1, #1
  41351a:	d024      	beq.n	413566 <decompress+0x606>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41351c:	4b0a      	ldr	r3, [pc, #40]	; (413548 <decompress+0x5e8>)
  41351e:	7818      	ldrb	r0, [r3, #0]
    switch(len) {
  413520:	1e43      	subs	r3, r0, #1
  413522:	2b07      	cmp	r3, #7
  413524:	f200 809c 	bhi.w	413660 <decompress+0x700>
  413528:	e8df f003 	tbb	[pc, r3]
  41352c:	9694a092 	.word	0x9694a092
  413530:	989a9a9a 	.word	0x989a9a9a
  413534:	2040c728 	.word	0x2040c728
  413538:	2040c72c 	.word	0x2040c72c
  41353c:	2040c730 	.word	0x2040c730
  413540:	2040c721 	.word	0x2040c721
  413544:	2040c724 	.word	0x2040c724
  413548:	2040c720 	.word	0x2040c720
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41354c:	f818 0001 	ldrb.w	r0, [r8, r1]
  413550:	4441      	add	r1, r8
  413552:	7849      	ldrb	r1, [r1, #1]
  413554:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  413558:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41355a:	f1c3 030f 	rsb	r3, r3, #15
  41355e:	4119      	asrs	r1, r3
  413560:	f001 0101 	and.w	r1, r1, #1
  413564:	e7d0      	b.n	413508 <decompress+0x5a8>
            ret = rle_prev_v;
  413566:	4bb8      	ldr	r3, [pc, #736]	; (413848 <decompress+0x8e8>)
  413568:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  41356a:	280b      	cmp	r0, #11
  41356c:	f47f af6a 	bne.w	413444 <decompress+0x4e4>
    uint32_t byte_pos = bit_pos >> 3;
  413570:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  413572:	f002 0a07 	and.w	sl, r2, #7
    if(bit_pos + len >= 8) {
  413576:	f10a 0b06 	add.w	fp, sl, #6
  41357a:	f1bb 0f07 	cmp.w	fp, #7
  41357e:	d815      	bhi.n	4135ac <decompress+0x64c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413580:	f818 0000 	ldrb.w	r0, [r8, r0]
  413584:	f1ca 0a02 	rsb	sl, sl, #2
  413588:	fa40 f00a 	asr.w	r0, r0, sl
  41358c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  413590:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 413858 <decompress+0x8f8>
  413594:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
  413598:	3206      	adds	r2, #6
  41359a:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 413854 <decompress+0x8f4>
  41359e:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  4135a2:	b188      	cbz	r0, 4135c8 <decompress+0x668>
                    rle_state = RLE_STATE_COUNTER;
  4135a4:	2102      	movs	r1, #2
  4135a6:	4aa9      	ldr	r2, [pc, #676]	; (41384c <decompress+0x8ec>)
  4135a8:	7011      	strb	r1, [r2, #0]
  4135aa:	e74b      	b.n	413444 <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4135ac:	f818 b000 	ldrb.w	fp, [r8, r0]
  4135b0:	4440      	add	r0, r8
  4135b2:	7840      	ldrb	r0, [r0, #1]
  4135b4:	eb00 200b 	add.w	r0, r0, fp, lsl #8
  4135b8:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4135ba:	f1ca 0a0a 	rsb	sl, sl, #10
  4135be:	fa40 f00a 	asr.w	r0, r0, sl
  4135c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  4135c6:	e7e3      	b.n	413590 <decompress+0x630>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4135c8:	4ba1      	ldr	r3, [pc, #644]	; (413850 <decompress+0x8f0>)
  4135ca:	f893 b000 	ldrb.w	fp, [r3]
    switch(len) {
  4135ce:	f10b 33ff 	add.w	r3, fp, #4294967295
  4135d2:	2b07      	cmp	r3, #7
  4135d4:	d80b      	bhi.n	4135ee <decompress+0x68e>
  4135d6:	e8df f003 	tbb	[pc, r3]
  4135da:	1112      	.short	0x1112
  4135dc:	0a0a0604 	.word	0x0a0a0604
  4135e0:	080a      	.short	0x080a
            bit_mask = 0x7;
  4135e2:	2107      	movs	r1, #7
  4135e4:	e00b      	b.n	4135fe <decompress+0x69e>
            bit_mask = 0xF;
  4135e6:	210f      	movs	r1, #15
  4135e8:	e009      	b.n	4135fe <decompress+0x69e>
            bit_mask = 0xFF;
  4135ea:	21ff      	movs	r1, #255	; 0xff
  4135ec:	e007      	b.n	4135fe <decompress+0x69e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4135ee:	2101      	movs	r1, #1
  4135f0:	fa01 f10b 	lsl.w	r1, r1, fp
  4135f4:	b2c9      	uxtb	r1, r1
  4135f6:	3901      	subs	r1, #1
  4135f8:	b2c9      	uxtb	r1, r1
  4135fa:	e000      	b.n	4135fe <decompress+0x69e>
            bit_mask = 0x3;
  4135fc:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  4135fe:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  413600:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413604:	eb03 0a0b 	add.w	sl, r3, fp
  413608:	f1ba 0f07 	cmp.w	sl, #7
  41360c:	d811      	bhi.n	413632 <decompress+0x6d2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41360e:	f818 0000 	ldrb.w	r0, [r8, r0]
  413612:	425b      	negs	r3, r3
  413614:	eba3 030b 	sub.w	r3, r3, fp
  413618:	3308      	adds	r3, #8
  41361a:	fa40 f303 	asr.w	r3, r0, r3
  41361e:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  413620:	4989      	ldr	r1, [pc, #548]	; (413848 <decompress+0x8e8>)
  413622:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  413624:	445a      	add	r2, fp
  413626:	498b      	ldr	r1, [pc, #556]	; (413854 <decompress+0x8f4>)
  413628:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  41362a:	2100      	movs	r1, #0
  41362c:	4a87      	ldr	r2, [pc, #540]	; (41384c <decompress+0x8ec>)
  41362e:	7011      	strb	r1, [r2, #0]
  413630:	e708      	b.n	413444 <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413632:	f818 a000 	ldrb.w	sl, [r8, r0]
  413636:	4440      	add	r0, r8
  413638:	7840      	ldrb	r0, [r0, #1]
  41363a:	eb00 200a 	add.w	r0, r0, sl, lsl #8
  41363e:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413640:	425b      	negs	r3, r3
  413642:	eba3 030b 	sub.w	r3, r3, fp
  413646:	3310      	adds	r3, #16
  413648:	fa40 f303 	asr.w	r3, r0, r3
  41364c:	400b      	ands	r3, r1
  41364e:	e7e7      	b.n	413620 <decompress+0x6c0>
            bit_mask = 0x1;
  413650:	2301      	movs	r3, #1
  413652:	e00c      	b.n	41366e <decompress+0x70e>
            bit_mask = 0x7;
  413654:	2307      	movs	r3, #7
  413656:	e00a      	b.n	41366e <decompress+0x70e>
            bit_mask = 0xF;
  413658:	230f      	movs	r3, #15
  41365a:	e008      	b.n	41366e <decompress+0x70e>
            bit_mask = 0xFF;
  41365c:	23ff      	movs	r3, #255	; 0xff
  41365e:	e006      	b.n	41366e <decompress+0x70e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413660:	2301      	movs	r3, #1
  413662:	4083      	lsls	r3, r0
  413664:	b2db      	uxtb	r3, r3
  413666:	3b01      	subs	r3, #1
  413668:	b2db      	uxtb	r3, r3
  41366a:	e000      	b.n	41366e <decompress+0x70e>
            bit_mask = 0x3;
  41366c:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  41366e:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413672:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  413676:	eb01 0b00 	add.w	fp, r1, r0
  41367a:	f1bb 0f07 	cmp.w	fp, #7
  41367e:	d810      	bhi.n	4136a2 <decompress+0x742>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413680:	f818 800a 	ldrb.w	r8, [r8, sl]
  413684:	4249      	negs	r1, r1
  413686:	1a09      	subs	r1, r1, r0
  413688:	3108      	adds	r1, #8
  41368a:	fa48 f101 	asr.w	r1, r8, r1
  41368e:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413690:	496d      	ldr	r1, [pc, #436]	; (413848 <decompress+0x8e8>)
  413692:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  413694:	4402      	add	r2, r0
  413696:	496f      	ldr	r1, [pc, #444]	; (413854 <decompress+0x8f4>)
  413698:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  41369a:	2100      	movs	r1, #0
  41369c:	4a6b      	ldr	r2, [pc, #428]	; (41384c <decompress+0x8ec>)
  41369e:	7011      	strb	r1, [r2, #0]
  4136a0:	e6d0      	b.n	413444 <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4136a2:	f818 b00a 	ldrb.w	fp, [r8, sl]
  4136a6:	44d0      	add	r8, sl
  4136a8:	f898 8001 	ldrb.w	r8, [r8, #1]
  4136ac:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  4136b0:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4136b4:	4249      	negs	r1, r1
  4136b6:	1a09      	subs	r1, r1, r0
  4136b8:	3110      	adds	r1, #16
  4136ba:	fa4b fb01 	asr.w	fp, fp, r1
  4136be:	ea0b 0303 	and.w	r3, fp, r3
  4136c2:	e7e5      	b.n	413690 <decompress+0x730>
        ret = rle_prev_v;
  4136c4:	4b60      	ldr	r3, [pc, #384]	; (413848 <decompress+0x8e8>)
  4136c6:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  4136c8:	4963      	ldr	r1, [pc, #396]	; (413858 <decompress+0x8f8>)
  4136ca:	780a      	ldrb	r2, [r1, #0]
  4136cc:	3a01      	subs	r2, #1
  4136ce:	b2d2      	uxtb	r2, r2
  4136d0:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  4136d2:	2a00      	cmp	r2, #0
  4136d4:	f47f aeb6 	bne.w	413444 <decompress+0x4e4>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4136d8:	4b60      	ldr	r3, [pc, #384]	; (41385c <decompress+0x8fc>)
  4136da:	f8d3 a000 	ldr.w	sl, [r3]
  4136de:	4b5d      	ldr	r3, [pc, #372]	; (413854 <decompress+0x8f4>)
  4136e0:	6818      	ldr	r0, [r3, #0]
  4136e2:	4b5b      	ldr	r3, [pc, #364]	; (413850 <decompress+0x8f0>)
  4136e4:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  4136e6:	1e4b      	subs	r3, r1, #1
  4136e8:	2b07      	cmp	r3, #7
  4136ea:	d80d      	bhi.n	413708 <decompress+0x7a8>
  4136ec:	e8df f003 	tbb	[pc, r3]
  4136f0:	08061204 	.word	0x08061204
  4136f4:	0a0c0c0c 	.word	0x0a0c0c0c
            bit_mask = 0x1;
  4136f8:	2301      	movs	r3, #1
  4136fa:	e00c      	b.n	413716 <decompress+0x7b6>
            bit_mask = 0x7;
  4136fc:	2307      	movs	r3, #7
  4136fe:	e00a      	b.n	413716 <decompress+0x7b6>
            bit_mask = 0xF;
  413700:	230f      	movs	r3, #15
  413702:	e008      	b.n	413716 <decompress+0x7b6>
            bit_mask = 0xFF;
  413704:	23ff      	movs	r3, #255	; 0xff
  413706:	e006      	b.n	413716 <decompress+0x7b6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413708:	2301      	movs	r3, #1
  41370a:	408b      	lsls	r3, r1
  41370c:	b2db      	uxtb	r3, r3
  41370e:	3b01      	subs	r3, #1
  413710:	b2db      	uxtb	r3, r3
  413712:	e000      	b.n	413716 <decompress+0x7b6>
            bit_mask = 0x3;
  413714:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413716:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  41371a:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  41371e:	eb02 0b01 	add.w	fp, r2, r1
  413722:	f1bb 0f07 	cmp.w	fp, #7
  413726:	d810      	bhi.n	41374a <decompress+0x7ea>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413728:	f81a 8008 	ldrb.w	r8, [sl, r8]
  41372c:	4252      	negs	r2, r2
  41372e:	1a52      	subs	r2, r2, r1
  413730:	3208      	adds	r2, #8
  413732:	fa48 f202 	asr.w	r2, r8, r2
  413736:	4013      	ands	r3, r2
            rle_prev_v = ret;
  413738:	4a43      	ldr	r2, [pc, #268]	; (413848 <decompress+0x8e8>)
  41373a:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  41373c:	4401      	add	r1, r0
  41373e:	4a45      	ldr	r2, [pc, #276]	; (413854 <decompress+0x8f4>)
  413740:	6011      	str	r1, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
  413742:	2100      	movs	r1, #0
  413744:	4a41      	ldr	r2, [pc, #260]	; (41384c <decompress+0x8ec>)
  413746:	7011      	strb	r1, [r2, #0]
  413748:	e67c      	b.n	413444 <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41374a:	f81a b008 	ldrb.w	fp, [sl, r8]
  41374e:	44d0      	add	r8, sl
  413750:	f898 8001 	ldrb.w	r8, [r8, #1]
  413754:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  413758:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41375c:	4252      	negs	r2, r2
  41375e:	1a52      	subs	r2, r2, r1
  413760:	3210      	adds	r2, #16
  413762:	fa4b fb02 	asr.w	fp, fp, r2
  413766:	ea0b 0303 	and.w	r3, fp, r3
  41376a:	e7e5      	b.n	413738 <decompress+0x7d8>
  41376c:	f04f 0e00 	mov.w	lr, #0
  413770:	9005      	str	r0, [sp, #20]
  413772:	f8dd 900c 	ldr.w	r9, [sp, #12]
  413776:	e66b      	b.n	413450 <decompress+0x4f0>
  413778:	9805      	ldr	r0, [sp, #20]
    for(i = 0; i < w; i++) {
  41377a:	f04f 0c00 	mov.w	ip, #0
  41377e:	f8dd e008 	ldr.w	lr, [sp, #8]
  413782:	f8dd 800c 	ldr.w	r8, [sp, #12]
  413786:	e048      	b.n	41381a <decompress+0x8ba>
        switch(val) {
  413788:	2907      	cmp	r1, #7
  41378a:	d805      	bhi.n	413798 <decompress+0x838>
  41378c:	e8df f001 	tbb	[pc, r1]
  413790:	0f0b0723 	.word	0x0f0b0723
  413794:	1f1b1713 	.word	0x1f1b1713
        len = 4;
  413798:	f04f 0904 	mov.w	r9, #4
  41379c:	e01e      	b.n	4137dc <decompress+0x87c>
  41379e:	f04f 0904 	mov.w	r9, #4
                val = 2;
  4137a2:	2102      	movs	r1, #2
  4137a4:	e01a      	b.n	4137dc <decompress+0x87c>
        len = 4;
  4137a6:	f04f 0904 	mov.w	r9, #4
                val = 4;
  4137aa:	4649      	mov	r1, r9
  4137ac:	e016      	b.n	4137dc <decompress+0x87c>
        len = 4;
  4137ae:	f04f 0904 	mov.w	r9, #4
                val = 6;
  4137b2:	2106      	movs	r1, #6
  4137b4:	e012      	b.n	4137dc <decompress+0x87c>
        len = 4;
  4137b6:	f04f 0904 	mov.w	r9, #4
                val = 9;
  4137ba:	2109      	movs	r1, #9
  4137bc:	e00e      	b.n	4137dc <decompress+0x87c>
        len = 4;
  4137be:	f04f 0904 	mov.w	r9, #4
                val = 11;
  4137c2:	210b      	movs	r1, #11
  4137c4:	e00a      	b.n	4137dc <decompress+0x87c>
        len = 4;
  4137c6:	f04f 0904 	mov.w	r9, #4
                val = 13;
  4137ca:	210d      	movs	r1, #13
  4137cc:	e006      	b.n	4137dc <decompress+0x87c>
        len = 4;
  4137ce:	f04f 0904 	mov.w	r9, #4
                val = 15;
  4137d2:	210f      	movs	r1, #15
  4137d4:	e002      	b.n	4137dc <decompress+0x87c>
        len = 4;
  4137d6:	f04f 0904 	mov.w	r9, #4
                val = 0;
  4137da:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  4137dc:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  4137e0:	4252      	negs	r2, r2
  4137e2:	eba2 0209 	sub.w	r2, r2, r9
  4137e6:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4137e8:	2301      	movs	r3, #1
  4137ea:	fa03 f309 	lsl.w	r3, r3, r9
  4137ee:	b2db      	uxtb	r3, r3
  4137f0:	3b01      	subs	r3, #1
  4137f2:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  4137f4:	f3c0 09cf 	ubfx	r9, r0, #3, #16
  4137f8:	43db      	mvns	r3, r3
  4137fa:	4093      	lsls	r3, r2
  4137fc:	f816 a009 	ldrb.w	sl, [r6, r9]
  413800:	ea0a 0303 	and.w	r3, sl, r3
  413804:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  413806:	fa01 f202 	lsl.w	r2, r1, r2
  41380a:	431a      	orrs	r2, r3
  41380c:	f806 2009 	strb.w	r2, [r6, r9]
                wrp += wr_size;
  413810:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  413812:	f10c 0c01 	add.w	ip, ip, #1
  413816:	fa0f fc8c 	sxth.w	ip, ip
  41381a:	45a4      	cmp	ip, r4
  41381c:	f280 8246 	bge.w	413cac <decompress+0xd4c>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
  413820:	f818 100c 	ldrb.w	r1, [r8, ip]
  413824:	f815 300c 	ldrb.w	r3, [r5, ip]
  413828:	4059      	eors	r1, r3
  41382a:	f805 100c 	strb.w	r1, [r5, ip]
    if(len == 3) {
  41382e:	2f03      	cmp	r7, #3
  413830:	d0aa      	beq.n	413788 <decompress+0x828>
  413832:	46b9      	mov	r9, r7
  413834:	e7d2      	b.n	4137dc <decompress+0x87c>
            bit_mask = 0x1;
  413836:	f04f 0901 	mov.w	r9, #1
  41383a:	e01d      	b.n	413878 <decompress+0x918>
            bit_mask = 0x7;
  41383c:	f04f 0907 	mov.w	r9, #7
  413840:	e01a      	b.n	413878 <decompress+0x918>
            bit_mask = 0xF;
  413842:	f04f 090f 	mov.w	r9, #15
  413846:	e017      	b.n	413878 <decompress+0x918>
  413848:	2040c728 	.word	0x2040c728
  41384c:	2040c730 	.word	0x2040c730
  413850:	2040c720 	.word	0x2040c720
  413854:	2040c72c 	.word	0x2040c72c
  413858:	2040c721 	.word	0x2040c721
  41385c:	2040c724 	.word	0x2040c724
            bit_mask = 0xFF;
  413860:	f04f 09ff 	mov.w	r9, #255	; 0xff
  413864:	e008      	b.n	413878 <decompress+0x918>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413866:	2301      	movs	r3, #1
  413868:	4093      	lsls	r3, r2
  41386a:	b2db      	uxtb	r3, r3
  41386c:	3b01      	subs	r3, #1
  41386e:	fa5f f983 	uxtb.w	r9, r3
  413872:	e001      	b.n	413878 <decompress+0x918>
            bit_mask = 0x3;
  413874:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
  413878:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
    bit_pos = bit_pos & 0x7;
  41387c:	f008 0107 	and.w	r1, r8, #7
    if(bit_pos + len >= 8) {
  413880:	188b      	adds	r3, r1, r2
  413882:	2b07      	cmp	r3, #7
  413884:	d840      	bhi.n	413908 <decompress+0x9a8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413886:	f81b 300a 	ldrb.w	r3, [fp, sl]
  41388a:	4249      	negs	r1, r1
  41388c:	1a89      	subs	r1, r1, r2
  41388e:	3108      	adds	r1, #8
  413890:	410b      	asrs	r3, r1
  413892:	ea03 0309 	and.w	r3, r3, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413896:	f1b8 0f00 	cmp.w	r8, #0
  41389a:	d003      	beq.n	4138a4 <decompress+0x944>
  41389c:	49b9      	ldr	r1, [pc, #740]	; (413b84 <decompress+0xc24>)
  41389e:	7809      	ldrb	r1, [r1, #0]
  4138a0:	4299      	cmp	r1, r3
  4138a2:	d040      	beq.n	413926 <decompress+0x9c6>
        rle_prev_v = ret;
  4138a4:	49b7      	ldr	r1, [pc, #732]	; (413b84 <decompress+0xc24>)
  4138a6:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  4138a8:	4442      	add	r2, r8
  4138aa:	49b7      	ldr	r1, [pc, #732]	; (413b88 <decompress+0xc28>)
  4138ac:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  4138ae:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  4138b2:	f10e 0e01 	add.w	lr, lr, #1
  4138b6:	fa0f fe8e 	sxth.w	lr, lr
  4138ba:	4574      	cmp	r4, lr
  4138bc:	f340 81a0 	ble.w	413c00 <decompress+0xca0>
        out[i] = rle_next();
  4138c0:	eb05 0c0e 	add.w	ip, r5, lr
    if(rle_state == RLE_STATE_SINGLE) {
  4138c4:	4bb1      	ldr	r3, [pc, #708]	; (413b8c <decompress+0xc2c>)
  4138c6:	781b      	ldrb	r3, [r3, #0]
  4138c8:	2b00      	cmp	r3, #0
  4138ca:	d137      	bne.n	41393c <decompress+0x9dc>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4138cc:	4bb0      	ldr	r3, [pc, #704]	; (413b90 <decompress+0xc30>)
  4138ce:	f8d3 b000 	ldr.w	fp, [r3]
  4138d2:	4bad      	ldr	r3, [pc, #692]	; (413b88 <decompress+0xc28>)
  4138d4:	f8d3 8000 	ldr.w	r8, [r3]
  4138d8:	4bae      	ldr	r3, [pc, #696]	; (413b94 <decompress+0xc34>)
  4138da:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  4138dc:	1e53      	subs	r3, r2, #1
  4138de:	2b07      	cmp	r3, #7
  4138e0:	d8c1      	bhi.n	413866 <decompress+0x906>
  4138e2:	a101      	add	r1, pc, #4	; (adr r1, 4138e8 <decompress+0x988>)
  4138e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  4138e8:	00413837 	.word	0x00413837
  4138ec:	00413875 	.word	0x00413875
  4138f0:	0041383d 	.word	0x0041383d
  4138f4:	00413843 	.word	0x00413843
  4138f8:	00413867 	.word	0x00413867
  4138fc:	00413867 	.word	0x00413867
  413900:	00413867 	.word	0x00413867
  413904:	00413861 	.word	0x00413861
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413908:	f81b 300a 	ldrb.w	r3, [fp, sl]
  41390c:	44da      	add	sl, fp
  41390e:	f89a a001 	ldrb.w	sl, [sl, #1]
  413912:	eb0a 2303 	add.w	r3, sl, r3, lsl #8
  413916:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413918:	4249      	negs	r1, r1
  41391a:	1a89      	subs	r1, r1, r2
  41391c:	3110      	adds	r1, #16
  41391e:	410b      	asrs	r3, r1
  413920:	ea03 0309 	and.w	r3, r3, r9
  413924:	e7b7      	b.n	413896 <decompress+0x936>
            rle_cnt = 0;
  413926:	f04f 0900 	mov.w	r9, #0
  41392a:	499b      	ldr	r1, [pc, #620]	; (413b98 <decompress+0xc38>)
  41392c:	f881 9000 	strb.w	r9, [r1]
            rle_state = RLE_STATE_REPEATE;
  413930:	f04f 0901 	mov.w	r9, #1
  413934:	4995      	ldr	r1, [pc, #596]	; (413b8c <decompress+0xc2c>)
  413936:	f881 9000 	strb.w	r9, [r1]
  41393a:	e7b3      	b.n	4138a4 <decompress+0x944>
    else if(rle_state == RLE_STATE_REPEATE) {
  41393c:	2b01      	cmp	r3, #1
  41393e:	d004      	beq.n	41394a <decompress+0x9ea>
    else if(rle_state == RLE_STATE_COUNTER) {
  413940:	2b02      	cmp	r3, #2
  413942:	f000 80fa 	beq.w	413b3a <decompress+0xbda>
    uint8_t ret = 0;
  413946:	2300      	movs	r3, #0
  413948:	e7b1      	b.n	4138ae <decompress+0x94e>
        v = get_bits(rle_in, rle_rdp, 1);
  41394a:	4b91      	ldr	r3, [pc, #580]	; (413b90 <decompress+0xc30>)
  41394c:	f8d3 9000 	ldr.w	r9, [r3]
  413950:	4b8d      	ldr	r3, [pc, #564]	; (413b88 <decompress+0xc28>)
  413952:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  413954:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  413956:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  41395a:	f103 0801 	add.w	r8, r3, #1
  41395e:	f1b8 0f07 	cmp.w	r8, #7
  413962:	d822      	bhi.n	4139aa <decompress+0xa4a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413964:	f819 1001 	ldrb.w	r1, [r9, r1]
  413968:	f1c3 0307 	rsb	r3, r3, #7
  41396c:	4119      	asrs	r1, r3
  41396e:	f001 0101 	and.w	r1, r1, #1
        rle_cnt++;
  413972:	4b89      	ldr	r3, [pc, #548]	; (413b98 <decompress+0xc38>)
  413974:	f893 8000 	ldrb.w	r8, [r3]
  413978:	f108 0801 	add.w	r8, r8, #1
  41397c:	fa5f f888 	uxtb.w	r8, r8
  413980:	f883 8000 	strb.w	r8, [r3]
        rle_rdp += 1;
  413984:	3201      	adds	r2, #1
  413986:	4b80      	ldr	r3, [pc, #512]	; (413b88 <decompress+0xc28>)
  413988:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  41398a:	2901      	cmp	r1, #1
  41398c:	d01a      	beq.n	4139c4 <decompress+0xa64>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41398e:	4b81      	ldr	r3, [pc, #516]	; (413b94 <decompress+0xc34>)
  413990:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  413994:	f108 33ff 	add.w	r3, r8, #4294967295
  413998:	2b07      	cmp	r3, #7
  41399a:	f200 8099 	bhi.w	413ad0 <decompress+0xb70>
  41399e:	e8df f003 	tbb	[pc, r3]
  4139a2:	9e8f      	.short	0x9e8f
  4139a4:	97979391 	.word	0x97979391
  4139a8:	9597      	.short	0x9597
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4139aa:	f819 8001 	ldrb.w	r8, [r9, r1]
  4139ae:	4449      	add	r1, r9
  4139b0:	7849      	ldrb	r1, [r1, #1]
  4139b2:	eb01 2108 	add.w	r1, r1, r8, lsl #8
  4139b6:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4139b8:	f1c3 030f 	rsb	r3, r3, #15
  4139bc:	4119      	asrs	r1, r3
  4139be:	f001 0101 	and.w	r1, r1, #1
  4139c2:	e7d6      	b.n	413972 <decompress+0xa12>
            ret = rle_prev_v;
  4139c4:	4b6f      	ldr	r3, [pc, #444]	; (413b84 <decompress+0xc24>)
  4139c6:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  4139c8:	f1b8 0f0b 	cmp.w	r8, #11
  4139cc:	f47f af6f 	bne.w	4138ae <decompress+0x94e>
    uint32_t byte_pos = bit_pos >> 3;
  4139d0:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  4139d4:	f002 0b07 	and.w	fp, r2, #7
    if(bit_pos + len >= 8) {
  4139d8:	f10b 0806 	add.w	r8, fp, #6
  4139dc:	f1b8 0f07 	cmp.w	r8, #7
  4139e0:	d817      	bhi.n	413a12 <decompress+0xab2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4139e2:	f819 a00a 	ldrb.w	sl, [r9, sl]
  4139e6:	f1cb 0802 	rsb	r8, fp, #2
  4139ea:	fa4a f808 	asr.w	r8, sl, r8
  4139ee:	f008 083f 	and.w	r8, r8, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  4139f2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 413b98 <decompress+0xc38>
  4139f6:	f88a 8000 	strb.w	r8, [sl]
                rle_rdp += 6;
  4139fa:	3206      	adds	r2, #6
  4139fc:	f8df a188 	ldr.w	sl, [pc, #392]	; 413b88 <decompress+0xc28>
  413a00:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  413a04:	f1b8 0f00 	cmp.w	r8, #0
  413a08:	d013      	beq.n	413a32 <decompress+0xad2>
                    rle_state = RLE_STATE_COUNTER;
  413a0a:	2102      	movs	r1, #2
  413a0c:	4a5f      	ldr	r2, [pc, #380]	; (413b8c <decompress+0xc2c>)
  413a0e:	7011      	strb	r1, [r2, #0]
  413a10:	e74d      	b.n	4138ae <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413a12:	f819 800a 	ldrb.w	r8, [r9, sl]
  413a16:	44ca      	add	sl, r9
  413a18:	f89a a001 	ldrb.w	sl, [sl, #1]
  413a1c:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
  413a20:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413a24:	f1cb 0b0a 	rsb	fp, fp, #10
  413a28:	fa48 f80b 	asr.w	r8, r8, fp
  413a2c:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  413a30:	e7df      	b.n	4139f2 <decompress+0xa92>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413a32:	4b58      	ldr	r3, [pc, #352]	; (413b94 <decompress+0xc34>)
  413a34:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  413a38:	f108 33ff 	add.w	r3, r8, #4294967295
  413a3c:	2b07      	cmp	r3, #7
  413a3e:	d80b      	bhi.n	413a58 <decompress+0xaf8>
  413a40:	e8df f003 	tbb	[pc, r3]
  413a44:	06041112 	.word	0x06041112
  413a48:	080a0a0a 	.word	0x080a0a0a
            bit_mask = 0x7;
  413a4c:	2107      	movs	r1, #7
  413a4e:	e00b      	b.n	413a68 <decompress+0xb08>
            bit_mask = 0xF;
  413a50:	210f      	movs	r1, #15
  413a52:	e009      	b.n	413a68 <decompress+0xb08>
            bit_mask = 0xFF;
  413a54:	21ff      	movs	r1, #255	; 0xff
  413a56:	e007      	b.n	413a68 <decompress+0xb08>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413a58:	2101      	movs	r1, #1
  413a5a:	fa01 f108 	lsl.w	r1, r1, r8
  413a5e:	b2c9      	uxtb	r1, r1
  413a60:	3901      	subs	r1, #1
  413a62:	b2c9      	uxtb	r1, r1
  413a64:	e000      	b.n	413a68 <decompress+0xb08>
            bit_mask = 0x3;
  413a66:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  413a68:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413a6c:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413a70:	eb03 0b08 	add.w	fp, r3, r8
  413a74:	f1bb 0f07 	cmp.w	fp, #7
  413a78:	d811      	bhi.n	413a9e <decompress+0xb3e>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413a7a:	f819 900a 	ldrb.w	r9, [r9, sl]
  413a7e:	425b      	negs	r3, r3
  413a80:	eba3 0308 	sub.w	r3, r3, r8
  413a84:	3308      	adds	r3, #8
  413a86:	fa49 f303 	asr.w	r3, r9, r3
  413a8a:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  413a8c:	493d      	ldr	r1, [pc, #244]	; (413b84 <decompress+0xc24>)
  413a8e:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  413a90:	4442      	add	r2, r8
  413a92:	493d      	ldr	r1, [pc, #244]	; (413b88 <decompress+0xc28>)
  413a94:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  413a96:	2100      	movs	r1, #0
  413a98:	4a3c      	ldr	r2, [pc, #240]	; (413b8c <decompress+0xc2c>)
  413a9a:	7011      	strb	r1, [r2, #0]
  413a9c:	e707      	b.n	4138ae <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413a9e:	f819 b00a 	ldrb.w	fp, [r9, sl]
  413aa2:	44d1      	add	r9, sl
  413aa4:	f899 9001 	ldrb.w	r9, [r9, #1]
  413aa8:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  413aac:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413ab0:	425b      	negs	r3, r3
  413ab2:	eba3 0308 	sub.w	r3, r3, r8
  413ab6:	3310      	adds	r3, #16
  413ab8:	fa49 f303 	asr.w	r3, r9, r3
  413abc:	400b      	ands	r3, r1
  413abe:	e7e5      	b.n	413a8c <decompress+0xb2c>
            bit_mask = 0x1;
  413ac0:	2301      	movs	r3, #1
  413ac2:	e00d      	b.n	413ae0 <decompress+0xb80>
            bit_mask = 0x7;
  413ac4:	2307      	movs	r3, #7
  413ac6:	e00b      	b.n	413ae0 <decompress+0xb80>
            bit_mask = 0xF;
  413ac8:	230f      	movs	r3, #15
  413aca:	e009      	b.n	413ae0 <decompress+0xb80>
            bit_mask = 0xFF;
  413acc:	23ff      	movs	r3, #255	; 0xff
  413ace:	e007      	b.n	413ae0 <decompress+0xb80>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413ad0:	2301      	movs	r3, #1
  413ad2:	fa03 f308 	lsl.w	r3, r3, r8
  413ad6:	b2db      	uxtb	r3, r3
  413ad8:	3b01      	subs	r3, #1
  413ada:	b2db      	uxtb	r3, r3
  413adc:	e000      	b.n	413ae0 <decompress+0xb80>
            bit_mask = 0x3;
  413ade:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413ae0:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413ae4:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  413ae8:	eb01 0b08 	add.w	fp, r1, r8
  413aec:	f1bb 0f07 	cmp.w	fp, #7
  413af0:	d811      	bhi.n	413b16 <decompress+0xbb6>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413af2:	f819 900a 	ldrb.w	r9, [r9, sl]
  413af6:	4249      	negs	r1, r1
  413af8:	eba1 0108 	sub.w	r1, r1, r8
  413afc:	3108      	adds	r1, #8
  413afe:	fa49 f101 	asr.w	r1, r9, r1
  413b02:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413b04:	491f      	ldr	r1, [pc, #124]	; (413b84 <decompress+0xc24>)
  413b06:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  413b08:	4442      	add	r2, r8
  413b0a:	491f      	ldr	r1, [pc, #124]	; (413b88 <decompress+0xc28>)
  413b0c:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413b0e:	2100      	movs	r1, #0
  413b10:	4a1e      	ldr	r2, [pc, #120]	; (413b8c <decompress+0xc2c>)
  413b12:	7011      	strb	r1, [r2, #0]
  413b14:	e6cb      	b.n	4138ae <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413b16:	f819 b00a 	ldrb.w	fp, [r9, sl]
  413b1a:	44d1      	add	r9, sl
  413b1c:	f899 9001 	ldrb.w	r9, [r9, #1]
  413b20:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  413b24:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413b28:	4249      	negs	r1, r1
  413b2a:	eba1 0108 	sub.w	r1, r1, r8
  413b2e:	3110      	adds	r1, #16
  413b30:	fa49 f901 	asr.w	r9, r9, r1
  413b34:	ea09 0303 	and.w	r3, r9, r3
  413b38:	e7e4      	b.n	413b04 <decompress+0xba4>
        ret = rle_prev_v;
  413b3a:	4b12      	ldr	r3, [pc, #72]	; (413b84 <decompress+0xc24>)
  413b3c:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  413b3e:	4916      	ldr	r1, [pc, #88]	; (413b98 <decompress+0xc38>)
  413b40:	780a      	ldrb	r2, [r1, #0]
  413b42:	3a01      	subs	r2, #1
  413b44:	b2d2      	uxtb	r2, r2
  413b46:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  413b48:	2a00      	cmp	r2, #0
  413b4a:	f47f aeb0 	bne.w	4138ae <decompress+0x94e>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413b4e:	4b10      	ldr	r3, [pc, #64]	; (413b90 <decompress+0xc30>)
  413b50:	f8d3 a000 	ldr.w	sl, [r3]
  413b54:	4b0c      	ldr	r3, [pc, #48]	; (413b88 <decompress+0xc28>)
  413b56:	f8d3 9000 	ldr.w	r9, [r3]
  413b5a:	4b0e      	ldr	r3, [pc, #56]	; (413b94 <decompress+0xc34>)
  413b5c:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  413b60:	f108 33ff 	add.w	r3, r8, #4294967295
  413b64:	2b07      	cmp	r3, #7
  413b66:	d819      	bhi.n	413b9c <decompress+0xc3c>
  413b68:	e8df f003 	tbb	[pc, r3]
  413b6c:	08061f04 	.word	0x08061f04
  413b70:	0a181818 	.word	0x0a181818
            bit_mask = 0x1;
  413b74:	2301      	movs	r3, #1
  413b76:	e019      	b.n	413bac <decompress+0xc4c>
            bit_mask = 0x7;
  413b78:	2307      	movs	r3, #7
  413b7a:	e017      	b.n	413bac <decompress+0xc4c>
            bit_mask = 0xF;
  413b7c:	230f      	movs	r3, #15
  413b7e:	e015      	b.n	413bac <decompress+0xc4c>
            bit_mask = 0xFF;
  413b80:	23ff      	movs	r3, #255	; 0xff
  413b82:	e013      	b.n	413bac <decompress+0xc4c>
  413b84:	2040c728 	.word	0x2040c728
  413b88:	2040c72c 	.word	0x2040c72c
  413b8c:	2040c730 	.word	0x2040c730
  413b90:	2040c724 	.word	0x2040c724
  413b94:	2040c720 	.word	0x2040c720
  413b98:	2040c721 	.word	0x2040c721
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413b9c:	2301      	movs	r3, #1
  413b9e:	fa03 f308 	lsl.w	r3, r3, r8
  413ba2:	b2db      	uxtb	r3, r3
  413ba4:	3b01      	subs	r3, #1
  413ba6:	b2db      	uxtb	r3, r3
  413ba8:	e000      	b.n	413bac <decompress+0xc4c>
            bit_mask = 0x3;
  413baa:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413bac:	ea4f 01d9 	mov.w	r1, r9, lsr #3
    bit_pos = bit_pos & 0x7;
  413bb0:	f009 0207 	and.w	r2, r9, #7
    if(bit_pos + len >= 8) {
  413bb4:	eb02 0b08 	add.w	fp, r2, r8
  413bb8:	f1bb 0f07 	cmp.w	fp, #7
  413bbc:	d812      	bhi.n	413be4 <decompress+0xc84>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413bbe:	f81a a001 	ldrb.w	sl, [sl, r1]
  413bc2:	4251      	negs	r1, r2
  413bc4:	eba1 0108 	sub.w	r1, r1, r8
  413bc8:	3108      	adds	r1, #8
  413bca:	fa4a f101 	asr.w	r1, sl, r1
  413bce:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413bd0:	4a42      	ldr	r2, [pc, #264]	; (413cdc <decompress+0xd7c>)
  413bd2:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  413bd4:	eb08 0209 	add.w	r2, r8, r9
  413bd8:	4941      	ldr	r1, [pc, #260]	; (413ce0 <decompress+0xd80>)
  413bda:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413bdc:	2100      	movs	r1, #0
  413bde:	4a41      	ldr	r2, [pc, #260]	; (413ce4 <decompress+0xd84>)
  413be0:	7011      	strb	r1, [r2, #0]
  413be2:	e664      	b.n	4138ae <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413be4:	f81a b001 	ldrb.w	fp, [sl, r1]
  413be8:	4451      	add	r1, sl
  413bea:	7849      	ldrb	r1, [r1, #1]
  413bec:	eb01 210b 	add.w	r1, r1, fp, lsl #8
  413bf0:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413bf2:	4252      	negs	r2, r2
  413bf4:	eba2 0208 	sub.w	r2, r2, r8
  413bf8:	3210      	adds	r2, #16
  413bfa:	4111      	asrs	r1, r2
  413bfc:	400b      	ands	r3, r1
  413bfe:	e7e7      	b.n	413bd0 <decompress+0xc70>
    for(i = 0; i < w; i++) {
  413c00:	f04f 0c00 	mov.w	ip, #0
  413c04:	f8dd e008 	ldr.w	lr, [sp, #8]
  413c08:	e048      	b.n	413c9c <decompress+0xd3c>
        switch(val) {
  413c0a:	2907      	cmp	r1, #7
  413c0c:	d805      	bhi.n	413c1a <decompress+0xcba>
  413c0e:	e8df f001 	tbb	[pc, r1]
  413c12:	0723      	.short	0x0723
  413c14:	17130f0b 	.word	0x17130f0b
  413c18:	1f1b      	.short	0x1f1b
        len = 4;
  413c1a:	f04f 0804 	mov.w	r8, #4
  413c1e:	e01e      	b.n	413c5e <decompress+0xcfe>
  413c20:	f04f 0804 	mov.w	r8, #4
                val = 2;
  413c24:	2102      	movs	r1, #2
  413c26:	e01a      	b.n	413c5e <decompress+0xcfe>
        len = 4;
  413c28:	f04f 0804 	mov.w	r8, #4
                val = 4;
  413c2c:	4641      	mov	r1, r8
  413c2e:	e016      	b.n	413c5e <decompress+0xcfe>
        len = 4;
  413c30:	f04f 0804 	mov.w	r8, #4
                val = 6;
  413c34:	2106      	movs	r1, #6
  413c36:	e012      	b.n	413c5e <decompress+0xcfe>
        len = 4;
  413c38:	f04f 0804 	mov.w	r8, #4
                val = 9;
  413c3c:	2109      	movs	r1, #9
  413c3e:	e00e      	b.n	413c5e <decompress+0xcfe>
        len = 4;
  413c40:	f04f 0804 	mov.w	r8, #4
                val = 11;
  413c44:	210b      	movs	r1, #11
  413c46:	e00a      	b.n	413c5e <decompress+0xcfe>
        len = 4;
  413c48:	f04f 0804 	mov.w	r8, #4
                val = 13;
  413c4c:	210d      	movs	r1, #13
  413c4e:	e006      	b.n	413c5e <decompress+0xcfe>
        len = 4;
  413c50:	f04f 0804 	mov.w	r8, #4
                val = 15;
  413c54:	210f      	movs	r1, #15
  413c56:	e002      	b.n	413c5e <decompress+0xcfe>
        len = 4;
  413c58:	f04f 0804 	mov.w	r8, #4
                val = 0;
  413c5c:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  413c5e:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  413c62:	4252      	negs	r2, r2
  413c64:	eba2 0208 	sub.w	r2, r2, r8
  413c68:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413c6a:	2301      	movs	r3, #1
  413c6c:	fa03 f308 	lsl.w	r3, r3, r8
  413c70:	b2db      	uxtb	r3, r3
  413c72:	3b01      	subs	r3, #1
  413c74:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  413c76:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  413c7a:	43db      	mvns	r3, r3
  413c7c:	4093      	lsls	r3, r2
  413c7e:	f816 9008 	ldrb.w	r9, [r6, r8]
  413c82:	ea09 0303 	and.w	r3, r9, r3
  413c86:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  413c88:	fa01 f202 	lsl.w	r2, r1, r2
  413c8c:	431a      	orrs	r2, r3
  413c8e:	f806 2008 	strb.w	r2, [r6, r8]
                wrp += wr_size;
  413c92:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  413c94:	f10c 0c01 	add.w	ip, ip, #1
  413c98:	fa0f fc8c 	sxth.w	ip, ip
  413c9c:	45a4      	cmp	ip, r4
  413c9e:	da05      	bge.n	413cac <decompress+0xd4c>
                bits_write(out, wrp, line_buf1[x], bpp);
  413ca0:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  413ca4:	2f03      	cmp	r7, #3
  413ca6:	d0b0      	beq.n	413c0a <decompress+0xcaa>
  413ca8:	46b8      	mov	r8, r7
  413caa:	e7d8      	b.n	413c5e <decompress+0xcfe>
    for(y = 1; y < h; y++) {
  413cac:	9b00      	ldr	r3, [sp, #0]
  413cae:	3301      	adds	r3, #1
  413cb0:	b21b      	sxth	r3, r3
  413cb2:	9300      	str	r3, [sp, #0]
  413cb4:	9b00      	ldr	r3, [sp, #0]
  413cb6:	9a01      	ldr	r2, [sp, #4]
  413cb8:	4293      	cmp	r3, r2
  413cba:	da06      	bge.n	413cca <decompress+0xd6a>
        if(prefilter) {
  413cbc:	9b04      	ldr	r3, [sp, #16]
  413cbe:	2b00      	cmp	r3, #0
  413cc0:	f47f ad54 	bne.w	41376c <decompress+0x80c>
  413cc4:	f04f 0e00 	mov.w	lr, #0
  413cc8:	e5f7      	b.n	4138ba <decompress+0x95a>
    _lv_mem_buf_release(line_buf1);
  413cca:	4628      	mov	r0, r5
  413ccc:	4c06      	ldr	r4, [pc, #24]	; (413ce8 <decompress+0xd88>)
  413cce:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
  413cd0:	9803      	ldr	r0, [sp, #12]
  413cd2:	47a0      	blx	r4
}
  413cd4:	b007      	add	sp, #28
  413cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413cda:	bf00      	nop
  413cdc:	2040c728 	.word	0x2040c728
  413ce0:	2040c72c 	.word	0x2040c72c
  413ce4:	2040c730 	.word	0x2040c730
  413ce8:	004158c5 	.word	0x004158c5

00413cec <lv_font_get_bitmap_fmt_txt>:
{
  413cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413cf0:	b082      	sub	sp, #8
    if(unicode_letter == '\t') unicode_letter = ' ';
  413cf2:	2909      	cmp	r1, #9
  413cf4:	d01e      	beq.n	413d34 <lv_font_get_bitmap_fmt_txt+0x48>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  413cf6:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  413cf8:	4b37      	ldr	r3, [pc, #220]	; (413dd8 <lv_font_get_bitmap_fmt_txt+0xec>)
  413cfa:	4798      	blx	r3
    if(!gid) return NULL;
  413cfc:	4607      	mov	r7, r0
  413cfe:	2800      	cmp	r0, #0
  413d00:	d063      	beq.n	413dca <lv_font_get_bitmap_fmt_txt+0xde>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  413d02:	686e      	ldr	r6, [r5, #4]
  413d04:	eb06 08c0 	add.w	r8, r6, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
  413d08:	7ceb      	ldrb	r3, [r5, #19]
  413d0a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  413d0e:	d013      	beq.n	413d38 <lv_font_get_bitmap_fmt_txt+0x4c>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
  413d10:	f898 3004 	ldrb.w	r3, [r8, #4]
  413d14:	f898 4005 	ldrb.w	r4, [r8, #5]
  413d18:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
  413d1c:	2c00      	cmp	r4, #0
  413d1e:	d056      	beq.n	413dce <lv_font_get_bitmap_fmt_txt+0xe2>
        switch(fdsc->bpp) {
  413d20:	7ceb      	ldrb	r3, [r5, #19]
  413d22:	f3c3 0343 	ubfx	r3, r3, #1, #4
  413d26:	3b01      	subs	r3, #1
  413d28:	2b03      	cmp	r3, #3
  413d2a:	d80e      	bhi.n	413d4a <lv_font_get_bitmap_fmt_txt+0x5e>
  413d2c:	e8df f003 	tbb	[pc, r3]
  413d30:	44413e0b 	.word	0x44413e0b
    if(unicode_letter == '\t') unicode_letter = ' ';
  413d34:	2120      	movs	r1, #32
  413d36:	e7de      	b.n	413cf6 <lv_font_get_bitmap_fmt_txt+0xa>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
  413d38:	6828      	ldr	r0, [r5, #0]
  413d3a:	f856 3037 	ldr.w	r3, [r6, r7, lsl #3]
  413d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
  413d42:	4418      	add	r0, r3
  413d44:	e02f      	b.n	413da6 <lv_font_get_bitmap_fmt_txt+0xba>
                buf_size = (gsize + 7) >> 3;
  413d46:	3407      	adds	r4, #7
  413d48:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
  413d4a:	4b24      	ldr	r3, [pc, #144]	; (413ddc <lv_font_get_bitmap_fmt_txt+0xf0>)
  413d4c:	6818      	ldr	r0, [r3, #0]
  413d4e:	4b24      	ldr	r3, [pc, #144]	; (413de0 <lv_font_get_bitmap_fmt_txt+0xf4>)
  413d50:	4798      	blx	r3
  413d52:	4284      	cmp	r4, r0
  413d54:	d90c      	bls.n	413d70 <lv_font_get_bitmap_fmt_txt+0x84>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
  413d56:	4621      	mov	r1, r4
  413d58:	4b20      	ldr	r3, [pc, #128]	; (413ddc <lv_font_get_bitmap_fmt_txt+0xf0>)
  413d5a:	6818      	ldr	r0, [r3, #0]
  413d5c:	4b21      	ldr	r3, [pc, #132]	; (413de4 <lv_font_get_bitmap_fmt_txt+0xf8>)
  413d5e:	4798      	blx	r3
  413d60:	4604      	mov	r4, r0
            LV_ASSERT_MEM(tmp);
  413d62:	4b21      	ldr	r3, [pc, #132]	; (413de8 <lv_font_get_bitmap_fmt_txt+0xfc>)
  413d64:	4798      	blx	r3
  413d66:	b350      	cbz	r0, 413dbe <lv_font_get_bitmap_fmt_txt+0xd2>
            if(tmp == NULL) return NULL;
  413d68:	2c00      	cmp	r4, #0
  413d6a:	d032      	beq.n	413dd2 <lv_font_get_bitmap_fmt_txt+0xe6>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
  413d6c:	4b1b      	ldr	r3, [pc, #108]	; (413ddc <lv_font_get_bitmap_fmt_txt+0xf0>)
  413d6e:	601c      	str	r4, [r3, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
  413d70:	7ceb      	ldrb	r3, [r5, #19]
  413d72:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
  413d76:	2c40      	cmp	r4, #64	; 0x40
  413d78:	bf14      	ite	ne
  413d7a:	2400      	movne	r4, #0
  413d7c:	2401      	moveq	r4, #1
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  413d7e:	f8d5 e000 	ldr.w	lr, [r5]
  413d82:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
  413d86:	f3c0 0013 	ubfx	r0, r0, #0, #20
                   (uint8_t)fdsc->bpp, prefilter);
  413d8a:	f3c3 0143 	ubfx	r1, r3, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  413d8e:	f898 3005 	ldrb.w	r3, [r8, #5]
  413d92:	f898 2004 	ldrb.w	r2, [r8, #4]
  413d96:	4d11      	ldr	r5, [pc, #68]	; (413ddc <lv_font_get_bitmap_fmt_txt+0xf0>)
  413d98:	9401      	str	r4, [sp, #4]
  413d9a:	9100      	str	r1, [sp, #0]
  413d9c:	6829      	ldr	r1, [r5, #0]
  413d9e:	4470      	add	r0, lr
  413da0:	4c12      	ldr	r4, [pc, #72]	; (413dec <lv_font_get_bitmap_fmt_txt+0x100>)
  413da2:	47a0      	blx	r4
        return LV_GC_ROOT(_lv_font_decompr_buf);
  413da4:	6828      	ldr	r0, [r5, #0]
}
  413da6:	b002      	add	sp, #8
  413da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                buf_size = (gsize + 3) >> 2;
  413dac:	3403      	adds	r4, #3
  413dae:	08a4      	lsrs	r4, r4, #2
                break;
  413db0:	e7cb      	b.n	413d4a <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  413db2:	3401      	adds	r4, #1
  413db4:	0864      	lsrs	r4, r4, #1
                break;
  413db6:	e7c8      	b.n	413d4a <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  413db8:	3401      	adds	r4, #1
  413dba:	0864      	lsrs	r4, r4, #1
                break;
  413dbc:	e7c5      	b.n	413d4a <lv_font_get_bitmap_fmt_txt+0x5e>
            LV_ASSERT_MEM(tmp);
  413dbe:	4622      	mov	r2, r4
  413dc0:	2300      	movs	r3, #0
  413dc2:	480b      	ldr	r0, [pc, #44]	; (413df0 <lv_font_get_bitmap_fmt_txt+0x104>)
  413dc4:	490b      	ldr	r1, [pc, #44]	; (413df4 <lv_font_get_bitmap_fmt_txt+0x108>)
  413dc6:	4788      	blx	r1
  413dc8:	e7fe      	b.n	413dc8 <lv_font_get_bitmap_fmt_txt+0xdc>
    if(!gid) return NULL;
  413dca:	2000      	movs	r0, #0
  413dcc:	e7eb      	b.n	413da6 <lv_font_get_bitmap_fmt_txt+0xba>
        if(gsize == 0) return NULL;
  413dce:	2000      	movs	r0, #0
  413dd0:	e7e9      	b.n	413da6 <lv_font_get_bitmap_fmt_txt+0xba>
            if(tmp == NULL) return NULL;
  413dd2:	2000      	movs	r0, #0
  413dd4:	e7e7      	b.n	413da6 <lv_font_get_bitmap_fmt_txt+0xba>
  413dd6:	bf00      	nop
  413dd8:	00412dd5 	.word	0x00412dd5
  413ddc:	2043a174 	.word	0x2043a174
  413de0:	004158a5 	.word	0x004158a5
  413de4:	00415a9d 	.word	0x00415a9d
  413de8:	00415065 	.word	0x00415065
  413dec:	00412f61 	.word	0x00412f61
  413df0:	00421264 	.word	0x00421264
  413df4:	00415071 	.word	0x00415071

00413df8 <lv_font_get_glyph_dsc_fmt_txt>:
{
  413df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  413dfc:	4607      	mov	r7, r0
  413dfe:	460c      	mov	r4, r1
  413e00:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
  413e02:	2a09      	cmp	r2, #9
  413e04:	d034      	beq.n	413e70 <lv_font_get_glyph_dsc_fmt_txt+0x78>
    bool is_tab = false;
  413e06:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  413e08:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  413e0a:	4611      	mov	r1, r2
  413e0c:	4638      	mov	r0, r7
  413e0e:	4b20      	ldr	r3, [pc, #128]	; (413e90 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  413e10:	4798      	blx	r3
    if(!gid) return false;
  413e12:	4680      	mov	r8, r0
  413e14:	2800      	cmp	r0, #0
  413e16:	d035      	beq.n	413e84 <lv_font_get_glyph_dsc_fmt_txt+0x8c>
    if(fdsc->kern_dsc) {
  413e18:	68f3      	ldr	r3, [r6, #12]
  413e1a:	2b00      	cmp	r3, #0
  413e1c:	d030      	beq.n	413e80 <lv_font_get_glyph_dsc_fmt_txt+0x88>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
  413e1e:	4649      	mov	r1, r9
  413e20:	4638      	mov	r0, r7
  413e22:	4b1b      	ldr	r3, [pc, #108]	; (413e90 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  413e24:	4798      	blx	r3
        if(gid_next) {
  413e26:	4602      	mov	r2, r0
  413e28:	bb28      	cbnz	r0, 413e76 <lv_font_get_glyph_dsc_fmt_txt+0x7e>
    int8_t kvalue = 0;
  413e2a:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  413e2c:	6871      	ldr	r1, [r6, #4]
  413e2e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
  413e32:	8a33      	ldrh	r3, [r6, #16]
  413e34:	fb03 f300 	mul.w	r3, r3, r0
  413e38:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
  413e3a:	8848      	ldrh	r0, [r1, #2]
  413e3c:	f3c0 100b 	ubfx	r0, r0, #4, #12
    if(is_tab) adv_w *= 2;
  413e40:	b105      	cbz	r5, 413e44 <lv_font_get_glyph_dsc_fmt_txt+0x4c>
  413e42:	0040      	lsls	r0, r0, #1
    adv_w += kv;
  413e44:	4403      	add	r3, r0
    adv_w  = (adv_w + (1 << 3)) >> 4;
  413e46:	3308      	adds	r3, #8
  413e48:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
  413e4a:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
  413e4c:	794b      	ldrb	r3, [r1, #5]
  413e4e:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
  413e50:	790a      	ldrb	r2, [r1, #4]
  413e52:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
  413e54:	f991 3006 	ldrsb.w	r3, [r1, #6]
  413e58:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
  413e5a:	f991 3007 	ldrsb.w	r3, [r1, #7]
  413e5e:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
  413e60:	7cf3      	ldrb	r3, [r6, #19]
  413e62:	f3c3 0343 	ubfx	r3, r3, #1, #4
  413e66:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
  413e68:	b185      	cbz	r5, 413e8c <lv_font_get_glyph_dsc_fmt_txt+0x94>
  413e6a:	0052      	lsls	r2, r2, #1
  413e6c:	8062      	strh	r2, [r4, #2]
  413e6e:	e00a      	b.n	413e86 <lv_font_get_glyph_dsc_fmt_txt+0x8e>
        is_tab = true;
  413e70:	2501      	movs	r5, #1
        unicode_letter = ' ';
  413e72:	2220      	movs	r2, #32
  413e74:	e7c8      	b.n	413e08 <lv_font_get_glyph_dsc_fmt_txt+0x10>
            kvalue = get_kern_value(font, gid, gid_next);
  413e76:	4641      	mov	r1, r8
  413e78:	4638      	mov	r0, r7
  413e7a:	4b06      	ldr	r3, [pc, #24]	; (413e94 <lv_font_get_glyph_dsc_fmt_txt+0x9c>)
  413e7c:	4798      	blx	r3
  413e7e:	e7d5      	b.n	413e2c <lv_font_get_glyph_dsc_fmt_txt+0x34>
    int8_t kvalue = 0;
  413e80:	2000      	movs	r0, #0
  413e82:	e7d3      	b.n	413e2c <lv_font_get_glyph_dsc_fmt_txt+0x34>
    if(!gid) return false;
  413e84:	2500      	movs	r5, #0
}
  413e86:	4628      	mov	r0, r5
  413e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
  413e8c:	2501      	movs	r5, #1
  413e8e:	e7fa      	b.n	413e86 <lv_font_get_glyph_dsc_fmt_txt+0x8e>
  413e90:	00412dd5 	.word	0x00412dd5
  413e94:	00412ead 	.word	0x00412ead

00413e98 <_lv_font_clean_up_fmt_txt>:
{
  413e98:	b508      	push	{r3, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
  413e9a:	4b04      	ldr	r3, [pc, #16]	; (413eac <_lv_font_clean_up_fmt_txt+0x14>)
  413e9c:	6818      	ldr	r0, [r3, #0]
  413e9e:	b120      	cbz	r0, 413eaa <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
  413ea0:	4b03      	ldr	r3, [pc, #12]	; (413eb0 <_lv_font_clean_up_fmt_txt+0x18>)
  413ea2:	4798      	blx	r3
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
  413ea4:	2200      	movs	r2, #0
  413ea6:	4b01      	ldr	r3, [pc, #4]	; (413eac <_lv_font_clean_up_fmt_txt+0x14>)
  413ea8:	601a      	str	r2, [r3, #0]
  413eaa:	bd08      	pop	{r3, pc}
  413eac:	2043a174 	.word	0x2043a174
  413eb0:	00415831 	.word	0x00415831

00413eb4 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
  413eb4:	b510      	push	{r4, lr}
  413eb6:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
  413eb8:	2134      	movs	r1, #52	; 0x34
  413eba:	4b13      	ldr	r3, [pc, #76]	; (413f08 <lv_disp_drv_init+0x54>)
  413ebc:	4798      	blx	r3

    driver->flush_cb         = NULL;
  413ebe:	2300      	movs	r3, #0
  413ec0:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
  413ec2:	f44f 72a0 	mov.w	r2, #320	; 0x140
  413ec6:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
  413ec8:	22f0      	movs	r2, #240	; 0xf0
  413eca:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
  413ecc:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
  413ece:	7a22      	ldrb	r2, [r4, #8]
  413ed0:	f363 0241 	bfi	r2, r3, #1, #1
  413ed4:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
  413ed6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  413eda:	f042 0207 	orr.w	r2, r2, #7
  413ede:	f363 02c7 	bfi	r2, r3, #3, #5
  413ee2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  413ee6:	22e0      	movs	r2, #224	; 0xe0
  413ee8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    driver->dpi = LV_DPI;
  413eec:	8922      	ldrh	r2, [r4, #8]
  413eee:	2194      	movs	r1, #148	; 0x94
  413ef0:	f361 028b 	bfi	r2, r1, #2, #10
  413ef4:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
  413ef6:	b2d2      	uxtb	r2, r2
  413ef8:	f042 0201 	orr.w	r2, r2, #1
  413efc:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
  413efe:	62a3      	str	r3, [r4, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
  413f00:	62e3      	str	r3, [r4, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
  413f02:	6163      	str	r3, [r4, #20]
  413f04:	bd10      	pop	{r4, pc}
  413f06:	bf00      	nop
  413f08:	00415ca1 	.word	0x00415ca1

00413f0c <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
  413f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413f0e:	4604      	mov	r4, r0
  413f10:	460d      	mov	r5, r1
  413f12:	4617      	mov	r7, r2
  413f14:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
  413f16:	2124      	movs	r1, #36	; 0x24
  413f18:	4b03      	ldr	r3, [pc, #12]	; (413f28 <lv_disp_buf_init+0x1c>)
  413f1a:	4798      	blx	r3

    disp_buf->buf1    = buf1;
  413f1c:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
  413f1e:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
  413f20:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
  413f22:	60e6      	str	r6, [r4, #12]
  413f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  413f26:	bf00      	nop
  413f28:	00415ca1 	.word	0x00415ca1

00413f2c <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
  413f2c:	4b01      	ldr	r3, [pc, #4]	; (413f34 <lv_disp_get_default+0x8>)
  413f2e:	6818      	ldr	r0, [r3, #0]
  413f30:	4770      	bx	lr
  413f32:	bf00      	nop
  413f34:	2040c734 	.word	0x2040c734

00413f38 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
  413f38:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  413f3a:	4603      	mov	r3, r0
  413f3c:	b138      	cbz	r0, 413f4e <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
  413f3e:	b16b      	cbz	r3, 413f5c <lv_disp_get_hor_res+0x24>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  413f40:	7a1a      	ldrb	r2, [r3, #8]
  413f42:	f012 0f02 	tst.w	r2, #2
  413f46:	d006      	beq.n	413f56 <lv_disp_get_hor_res+0x1e>
  413f48:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  413f4c:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  413f4e:	4b05      	ldr	r3, [pc, #20]	; (413f64 <lv_disp_get_hor_res+0x2c>)
  413f50:	4798      	blx	r3
  413f52:	4603      	mov	r3, r0
  413f54:	e7f3      	b.n	413f3e <lv_disp_get_hor_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  413f56:	f9b3 0000 	ldrsh.w	r0, [r3]
  413f5a:	bd08      	pop	{r3, pc}
        return LV_HOR_RES_MAX;
  413f5c:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
  413f60:	bd08      	pop	{r3, pc}
  413f62:	bf00      	nop
  413f64:	00413f2d 	.word	0x00413f2d

00413f68 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
  413f68:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  413f6a:	4603      	mov	r3, r0
  413f6c:	b138      	cbz	r0, 413f7e <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
  413f6e:	b16b      	cbz	r3, 413f8c <lv_disp_get_ver_res+0x24>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  413f70:	7a1a      	ldrb	r2, [r3, #8]
  413f72:	f012 0f02 	tst.w	r2, #2
  413f76:	d006      	beq.n	413f86 <lv_disp_get_ver_res+0x1e>
  413f78:	f9b3 0000 	ldrsh.w	r0, [r3]
  413f7c:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  413f7e:	4b04      	ldr	r3, [pc, #16]	; (413f90 <lv_disp_get_ver_res+0x28>)
  413f80:	4798      	blx	r3
  413f82:	4603      	mov	r3, r0
  413f84:	e7f3      	b.n	413f6e <lv_disp_get_ver_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  413f86:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  413f8a:	bd08      	pop	{r3, pc}
        return LV_VER_RES_MAX;
  413f8c:	20f0      	movs	r0, #240	; 0xf0
}
  413f8e:	bd08      	pop	{r3, pc}
  413f90:	00413f2d 	.word	0x00413f2d

00413f94 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
  413f94:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  413f96:	4603      	mov	r3, r0
  413f98:	b120      	cbz	r0, 413fa4 <lv_disp_get_dpi+0x10>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  413f9a:	b13b      	cbz	r3, 413fac <lv_disp_get_dpi+0x18>
    return disp->driver.dpi;
  413f9c:	8918      	ldrh	r0, [r3, #8]
  413f9e:	f3c0 0089 	ubfx	r0, r0, #2, #10
  413fa2:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  413fa4:	4b02      	ldr	r3, [pc, #8]	; (413fb0 <lv_disp_get_dpi+0x1c>)
  413fa6:	4798      	blx	r3
  413fa8:	4603      	mov	r3, r0
  413faa:	e7f6      	b.n	413f9a <lv_disp_get_dpi+0x6>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  413fac:	2094      	movs	r0, #148	; 0x94
}
  413fae:	bd08      	pop	{r3, pc}
  413fb0:	00413f2d 	.word	0x00413f2d

00413fb4 <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
  413fb4:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  413fb6:	4605      	mov	r5, r0
  413fb8:	b1a0      	cbz	r0, 413fe4 <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
  413fba:	b1bd      	cbz	r5, 413fec <lv_disp_get_size_category+0x38>
    else w = lv_disp_get_hor_res(disp);
  413fbc:	4628      	mov	r0, r5
  413fbe:	4b10      	ldr	r3, [pc, #64]	; (414000 <lv_disp_get_size_category+0x4c>)
  413fc0:	4798      	blx	r3
  413fc2:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
  413fc4:	4628      	mov	r0, r5
  413fc6:	4b0f      	ldr	r3, [pc, #60]	; (414004 <lv_disp_get_size_category+0x50>)
  413fc8:	4798      	blx	r3

    w = w * 10 / dpi;
  413fca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  413fce:	0063      	lsls	r3, r4, #1
  413fd0:	fbb3 f0f0 	udiv	r0, r3, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  413fd4:	281d      	cmp	r0, #29
  413fd6:	d90c      	bls.n	413ff2 <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  413fd8:	2831      	cmp	r0, #49	; 0x31
  413fda:	d90c      	bls.n	413ff6 <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
  413fdc:	2845      	cmp	r0, #69	; 0x45
  413fde:	d80c      	bhi.n	413ffa <lv_disp_get_size_category+0x46>
  413fe0:	2002      	movs	r0, #2
  413fe2:	bd38      	pop	{r3, r4, r5, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  413fe4:	4b08      	ldr	r3, [pc, #32]	; (414008 <lv_disp_get_size_category+0x54>)
  413fe6:	4798      	blx	r3
  413fe8:	4605      	mov	r5, r0
  413fea:	e7e6      	b.n	413fba <lv_disp_get_size_category+0x6>
    if(disp == NULL) w = LV_HOR_RES_MAX;
  413fec:	f44f 74a0 	mov.w	r4, #320	; 0x140
  413ff0:	e7e8      	b.n	413fc4 <lv_disp_get_size_category+0x10>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  413ff2:	2000      	movs	r0, #0
  413ff4:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  413ff6:	2001      	movs	r0, #1
  413ff8:	bd38      	pop	{r3, r4, r5, pc}
    else return LV_DISP_SIZE_EXTRA_LARGE;
  413ffa:	2003      	movs	r0, #3
}
  413ffc:	bd38      	pop	{r3, r4, r5, pc}
  413ffe:	bf00      	nop
  414000:	00413f39 	.word	0x00413f39
  414004:	00413f95 	.word	0x00413f95
  414008:	00413f2d 	.word	0x00413f2d

0041400c <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
  41400c:	6842      	ldr	r2, [r0, #4]
  41400e:	2300      	movs	r3, #0
  414010:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
  414012:	6842      	ldr	r2, [r0, #4]
  414014:	61d3      	str	r3, [r2, #28]
  414016:	4770      	bx	lr

00414018 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
  414018:	b508      	push	{r3, lr}
    if(disp == NULL)
  41401a:	b120      	cbz	r0, 414026 <lv_disp_get_next+0xe>
  41401c:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
  41401e:	4804      	ldr	r0, [pc, #16]	; (414030 <lv_disp_get_next+0x18>)
  414020:	4b04      	ldr	r3, [pc, #16]	; (414034 <lv_disp_get_next+0x1c>)
  414022:	4798      	blx	r3
}
  414024:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
  414026:	4802      	ldr	r0, [pc, #8]	; (414030 <lv_disp_get_next+0x18>)
  414028:	4b03      	ldr	r3, [pc, #12]	; (414038 <lv_disp_get_next+0x20>)
  41402a:	4798      	blx	r3
  41402c:	bd08      	pop	{r3, pc}
  41402e:	bf00      	nop
  414030:	2043a184 	.word	0x2043a184
  414034:	00415389 	.word	0x00415389
  414038:	00415375 	.word	0x00415375

0041403c <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
  41403c:	6840      	ldr	r0, [r0, #4]
  41403e:	4770      	bx	lr

00414040 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
  414040:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
}
  414044:	f3c0 0009 	ubfx	r0, r0, #0, #10
  414048:	4770      	bx	lr

0041404a <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
  41404a:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  41404e:	f3c3 0309 	ubfx	r3, r3, #0, #10
  414052:	428b      	cmp	r3, r1
  414054:	db07      	blt.n	414066 <_lv_disp_pop_from_inv_buf+0x1c>
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
  414056:	1a5b      	subs	r3, r3, r1
  414058:	f8b0 2182 	ldrh.w	r2, [r0, #386]	; 0x182
  41405c:	f363 0209 	bfi	r2, r3, #0, #10
  414060:	f8a0 2182 	strh.w	r2, [r0, #386]	; 0x182
  414064:	4770      	bx	lr
        disp->inv_p = 0;
  414066:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  41406a:	f36f 0309 	bfc	r3, #0, #10
  41406e:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
  414072:	4770      	bx	lr

00414074 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
  414074:	6843      	ldr	r3, [r0, #4]
  414076:	681a      	ldr	r2, [r3, #0]
  414078:	b12a      	cbz	r2, 414086 <lv_disp_is_double_buf+0x12>
  41407a:	685b      	ldr	r3, [r3, #4]
  41407c:	b10b      	cbz	r3, 414082 <lv_disp_is_double_buf+0xe>
        return true;
  41407e:	2001      	movs	r0, #1
    else
        return false;
}
  414080:	4770      	bx	lr
        return false;
  414082:	2000      	movs	r0, #0
  414084:	4770      	bx	lr
  414086:	2000      	movs	r0, #0
  414088:	4770      	bx	lr
	...

0041408c <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
  41408c:	b538      	push	{r3, r4, r5, lr}
  41408e:	4605      	mov	r5, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
  414090:	f9b0 4000 	ldrsh.w	r4, [r0]
  414094:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414098:	fb03 f404 	mul.w	r4, r3, r4

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
  41409c:	4b06      	ldr	r3, [pc, #24]	; (4140b8 <lv_disp_is_true_double_buf+0x2c>)
  41409e:	4798      	blx	r3
  4140a0:	b130      	cbz	r0, 4140b0 <lv_disp_is_true_double_buf+0x24>
  4140a2:	4603      	mov	r3, r0
  4140a4:	686a      	ldr	r2, [r5, #4]
  4140a6:	68d2      	ldr	r2, [r2, #12]
  4140a8:	4294      	cmp	r4, r2
  4140aa:	d002      	beq.n	4140b2 <lv_disp_is_true_double_buf+0x26>
        return true;
    }
    else {
        return false;
  4140ac:	2300      	movs	r3, #0
  4140ae:	e000      	b.n	4140b2 <lv_disp_is_true_double_buf+0x26>
  4140b0:	2300      	movs	r3, #0
    }
}
  4140b2:	4618      	mov	r0, r3
  4140b4:	bd38      	pop	{r3, r4, r5, pc}
  4140b6:	bf00      	nop
  4140b8:	00414075 	.word	0x00414075

004140bc <lv_disp_drv_register>:
{
  4140bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4140be:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
  4140c0:	483b      	ldr	r0, [pc, #236]	; (4141b0 <lv_disp_drv_register+0xf4>)
  4140c2:	4b3c      	ldr	r3, [pc, #240]	; (4141b4 <lv_disp_drv_register+0xf8>)
  4140c4:	4798      	blx	r3
    if(!disp) {
  4140c6:	4604      	mov	r4, r0
  4140c8:	2800      	cmp	r0, #0
  4140ca:	d05c      	beq.n	414186 <lv_disp_drv_register+0xca>
    _lv_memset_00(disp, sizeof(lv_disp_t));
  4140cc:	f44f 71c4 	mov.w	r1, #392	; 0x188
  4140d0:	4b39      	ldr	r3, [pc, #228]	; (4141b8 <lv_disp_drv_register+0xfc>)
  4140d2:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
  4140d4:	2234      	movs	r2, #52	; 0x34
  4140d6:	4629      	mov	r1, r5
  4140d8:	4620      	mov	r0, r4
  4140da:	4b38      	ldr	r3, [pc, #224]	; (4141bc <lv_disp_drv_register+0x100>)
  4140dc:	4798      	blx	r3
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
  4140de:	214c      	movs	r1, #76	; 0x4c
  4140e0:	f104 0038 	add.w	r0, r4, #56	; 0x38
  4140e4:	4b36      	ldr	r3, [pc, #216]	; (4141c0 <lv_disp_drv_register+0x104>)
  4140e6:	4798      	blx	r3
    disp->last_activity_time = 0;
  4140e8:	2300      	movs	r3, #0
  4140ea:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    if(disp_def == NULL) disp_def = disp;
  4140ee:	4b35      	ldr	r3, [pc, #212]	; (4141c4 <lv_disp_drv_register+0x108>)
  4140f0:	681b      	ldr	r3, [r3, #0]
  4140f2:	2b00      	cmp	r3, #0
  4140f4:	d051      	beq.n	41419a <lv_disp_drv_register+0xde>
    lv_disp_t * disp_def_tmp = disp_def;
  4140f6:	4b33      	ldr	r3, [pc, #204]	; (4141c4 <lv_disp_drv_register+0x108>)
  4140f8:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
  4140fa:	601c      	str	r4, [r3, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
  4140fc:	4623      	mov	r3, r4
  4140fe:	2203      	movs	r2, #3
  414100:	211e      	movs	r1, #30
  414102:	4831      	ldr	r0, [pc, #196]	; (4141c8 <lv_disp_drv_register+0x10c>)
  414104:	4d31      	ldr	r5, [pc, #196]	; (4141cc <lv_disp_drv_register+0x110>)
  414106:	47a8      	blx	r5
  414108:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
  41410a:	4b31      	ldr	r3, [pc, #196]	; (4141d0 <lv_disp_drv_register+0x114>)
  41410c:	4798      	blx	r3
  41410e:	2800      	cmp	r0, #0
  414110:	d046      	beq.n	4141a0 <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
  414112:	6b63      	ldr	r3, [r4, #52]	; 0x34
  414114:	2b00      	cmp	r3, #0
  414116:	d049      	beq.n	4141ac <lv_disp_drv_register+0xf0>
    disp->inv_p = 0;
  414118:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
  41411c:	f36f 0309 	bfc	r3, #0, #10
  414120:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
    disp->last_activity_time = 0;
  414124:	2500      	movs	r5, #0
  414126:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
    disp->bg_color = LV_COLOR_WHITE;
  41412a:	4b2a      	ldr	r3, [pc, #168]	; (4141d4 <lv_disp_drv_register+0x118>)
  41412c:	881b      	ldrh	r3, [r3, #0]
  41412e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    disp->bg_img = NULL;
  414132:	65e5      	str	r5, [r4, #92]	; 0x5c
    disp->bg_opa = LV_OPA_COVER;
  414134:	23ff      	movs	r3, #255	; 0xff
  414136:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    disp->prev_scr  = NULL;
  41413a:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
  41413c:	4629      	mov	r1, r5
  41413e:	4628      	mov	r0, r5
  414140:	4e25      	ldr	r6, [pc, #148]	; (4141d8 <lv_disp_drv_register+0x11c>)
  414142:	47b0      	blx	r6
  414144:	6460      	str	r0, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
  414146:	4629      	mov	r1, r5
  414148:	4628      	mov	r0, r5
  41414a:	47b0      	blx	r6
  41414c:	6520      	str	r0, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
  41414e:	4629      	mov	r1, r5
  414150:	4628      	mov	r0, r5
  414152:	47b0      	blx	r6
  414154:	6560      	str	r0, [r4, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
  414156:	4629      	mov	r1, r5
  414158:	6d20      	ldr	r0, [r4, #80]	; 0x50
  41415a:	4e20      	ldr	r6, [pc, #128]	; (4141dc <lv_disp_drv_register+0x120>)
  41415c:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
  41415e:	4629      	mov	r1, r5
  414160:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414162:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
  414164:	4629      	mov	r1, r5
  414166:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414168:	4e1d      	ldr	r6, [pc, #116]	; (4141e0 <lv_disp_drv_register+0x124>)
  41416a:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
  41416c:	4629      	mov	r1, r5
  41416e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414170:	47b0      	blx	r6
    lv_obj_invalidate(disp->act_scr);
  414172:	6c60      	ldr	r0, [r4, #68]	; 0x44
  414174:	4b1b      	ldr	r3, [pc, #108]	; (4141e4 <lv_disp_drv_register+0x128>)
  414176:	4798      	blx	r3
    disp_def = disp_def_tmp; /*Revert the default display*/
  414178:	4b12      	ldr	r3, [pc, #72]	; (4141c4 <lv_disp_drv_register+0x108>)
  41417a:	601f      	str	r7, [r3, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
  41417c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  41417e:	4b1a      	ldr	r3, [pc, #104]	; (4141e8 <lv_disp_drv_register+0x12c>)
  414180:	4798      	blx	r3
}
  414182:	4620      	mov	r0, r4
  414184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
  414186:	4b12      	ldr	r3, [pc, #72]	; (4141d0 <lv_disp_drv_register+0x114>)
  414188:	4798      	blx	r3
  41418a:	2800      	cmp	r0, #0
  41418c:	d1f9      	bne.n	414182 <lv_disp_drv_register+0xc6>
  41418e:	4622      	mov	r2, r4
  414190:	2300      	movs	r3, #0
  414192:	4816      	ldr	r0, [pc, #88]	; (4141ec <lv_disp_drv_register+0x130>)
  414194:	4916      	ldr	r1, [pc, #88]	; (4141f0 <lv_disp_drv_register+0x134>)
  414196:	4788      	blx	r1
  414198:	e7fe      	b.n	414198 <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
  41419a:	4b0a      	ldr	r3, [pc, #40]	; (4141c4 <lv_disp_drv_register+0x108>)
  41419c:	601c      	str	r4, [r3, #0]
  41419e:	e7aa      	b.n	4140f6 <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
  4141a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
  4141a2:	2300      	movs	r3, #0
  4141a4:	4811      	ldr	r0, [pc, #68]	; (4141ec <lv_disp_drv_register+0x130>)
  4141a6:	4912      	ldr	r1, [pc, #72]	; (4141f0 <lv_disp_drv_register+0x134>)
  4141a8:	4788      	blx	r1
  4141aa:	e7fe      	b.n	4141aa <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
  4141ac:	2400      	movs	r4, #0
  4141ae:	e7e8      	b.n	414182 <lv_disp_drv_register+0xc6>
  4141b0:	2043a184 	.word	0x2043a184
  4141b4:	004152dd 	.word	0x004152dd
  4141b8:	00415ca1 	.word	0x00415ca1
  4141bc:	0041597d 	.word	0x0041597d
  4141c0:	004152cb 	.word	0x004152cb
  4141c4:	2040c734 	.word	0x2040c734
  4141c8:	00409029 	.word	0x00409029
  4141cc:	00415d71 	.word	0x00415d71
  4141d0:	00415065 	.word	0x00415065
  4141d4:	00424814 	.word	0x00424814
  4141d8:	004060e9 	.word	0x004060e9
  4141dc:	0040706d 	.word	0x0040706d
  4141e0:	00405135 	.word	0x00405135
  4141e4:	0040582d 	.word	0x0040582d
  4141e8:	00416139 	.word	0x00416139
  4141ec:	00421264 	.word	0x00421264
  4141f0:	00415071 	.word	0x00415071

004141f4 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
  4141f4:	b510      	push	{r4, lr}
  4141f6:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
  4141f8:	211c      	movs	r1, #28
  4141fa:	4b08      	ldr	r3, [pc, #32]	; (41421c <lv_indev_drv_init+0x28>)
  4141fc:	4798      	blx	r3

    driver->type                 = LV_INDEV_TYPE_NONE;
  4141fe:	2300      	movs	r3, #0
  414200:	7023      	strb	r3, [r4, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
  414202:	230a      	movs	r3, #10
  414204:	7523      	strb	r3, [r4, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
  414206:	7563      	strb	r3, [r4, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
  414208:	f44f 73c8 	mov.w	r3, #400	; 0x190
  41420c:	8323      	strh	r3, [r4, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
  41420e:	2364      	movs	r3, #100	; 0x64
  414210:	8363      	strh	r3, [r4, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
  414212:	2332      	movs	r3, #50	; 0x32
  414214:	75e3      	strb	r3, [r4, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
  414216:	2303      	movs	r3, #3
  414218:	75a3      	strb	r3, [r4, #22]
  41421a:	bd10      	pop	{r4, pc}
  41421c:	00415ca1 	.word	0x00415ca1

00414220 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
  414220:	b538      	push	{r3, r4, r5, lr}
  414222:	4605      	mov	r5, r0

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  414224:	68c3      	ldr	r3, [r0, #12]
  414226:	b313      	cbz	r3, 41426e <lv_indev_drv_register+0x4e>

    if(driver->disp == NULL) {
  414228:	68eb      	ldr	r3, [r5, #12]
  41422a:	2b00      	cmp	r3, #0
  41422c:	d02d      	beq.n	41428a <lv_indev_drv_register+0x6a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
  41422e:	4818      	ldr	r0, [pc, #96]	; (414290 <lv_indev_drv_register+0x70>)
  414230:	4b18      	ldr	r3, [pc, #96]	; (414294 <lv_indev_drv_register+0x74>)
  414232:	4798      	blx	r3
    if(!indev) {
  414234:	4604      	mov	r4, r0
  414236:	b1f0      	cbz	r0, 414276 <lv_indev_drv_register+0x56>
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
  414238:	2160      	movs	r1, #96	; 0x60
  41423a:	4b17      	ldr	r3, [pc, #92]	; (414298 <lv_indev_drv_register+0x78>)
  41423c:	4798      	blx	r3
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
  41423e:	221c      	movs	r2, #28
  414240:	4629      	mov	r1, r5
  414242:	4620      	mov	r0, r4
  414244:	4b15      	ldr	r3, [pc, #84]	; (41429c <lv_indev_drv_register+0x7c>)
  414246:	4798      	blx	r3

    indev->proc.reset_query = 1;
  414248:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  41424c:	f043 0302 	orr.w	r3, r3, #2
  414250:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
  414254:	2300      	movs	r3, #0
  414256:	6563      	str	r3, [r4, #84]	; 0x54
    indev->group            = NULL;
  414258:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->btn_points       = NULL;
  41425a:	65e3      	str	r3, [r4, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
  41425c:	4623      	mov	r3, r4
  41425e:	2204      	movs	r2, #4
  414260:	211e      	movs	r1, #30
  414262:	480f      	ldr	r0, [pc, #60]	; (4142a0 <lv_indev_drv_register+0x80>)
  414264:	4d0f      	ldr	r5, [pc, #60]	; (4142a4 <lv_indev_drv_register+0x84>)
  414266:	47a8      	blx	r5
  414268:	6120      	str	r0, [r4, #16]

    return indev;
}
  41426a:	4620      	mov	r0, r4
  41426c:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  41426e:	4b0e      	ldr	r3, [pc, #56]	; (4142a8 <lv_indev_drv_register+0x88>)
  414270:	4798      	blx	r3
  414272:	60e8      	str	r0, [r5, #12]
  414274:	e7d8      	b.n	414228 <lv_indev_drv_register+0x8>
        LV_ASSERT_MEM(indev);
  414276:	4b0d      	ldr	r3, [pc, #52]	; (4142ac <lv_indev_drv_register+0x8c>)
  414278:	4798      	blx	r3
  41427a:	2800      	cmp	r0, #0
  41427c:	d1f5      	bne.n	41426a <lv_indev_drv_register+0x4a>
  41427e:	4622      	mov	r2, r4
  414280:	2300      	movs	r3, #0
  414282:	480b      	ldr	r0, [pc, #44]	; (4142b0 <lv_indev_drv_register+0x90>)
  414284:	490b      	ldr	r1, [pc, #44]	; (4142b4 <lv_indev_drv_register+0x94>)
  414286:	4788      	blx	r1
  414288:	e7fe      	b.n	414288 <lv_indev_drv_register+0x68>
        return NULL;
  41428a:	2400      	movs	r4, #0
  41428c:	e7ed      	b.n	41426a <lv_indev_drv_register+0x4a>
  41428e:	bf00      	nop
  414290:	2043a178 	.word	0x2043a178
  414294:	004152dd 	.word	0x004152dd
  414298:	00415ca1 	.word	0x00415ca1
  41429c:	0041597d 	.word	0x0041597d
  4142a0:	00404d29 	.word	0x00404d29
  4142a4:	00415d71 	.word	0x00415d71
  4142a8:	00413f2d 	.word	0x00413f2d
  4142ac:	00415065 	.word	0x00415065
  4142b0:	00421264 	.word	0x00421264
  4142b4:	00415071 	.word	0x00415071

004142b8 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
  4142b8:	b508      	push	{r3, lr}
    if(indev == NULL)
  4142ba:	b120      	cbz	r0, 4142c6 <lv_indev_get_next+0xe>
  4142bc:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
  4142be:	4804      	ldr	r0, [pc, #16]	; (4142d0 <lv_indev_get_next+0x18>)
  4142c0:	4b04      	ldr	r3, [pc, #16]	; (4142d4 <lv_indev_get_next+0x1c>)
  4142c2:	4798      	blx	r3
}
  4142c4:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
  4142c6:	4802      	ldr	r0, [pc, #8]	; (4142d0 <lv_indev_get_next+0x18>)
  4142c8:	4b03      	ldr	r3, [pc, #12]	; (4142d8 <lv_indev_get_next+0x20>)
  4142ca:	4798      	blx	r3
  4142cc:	bd08      	pop	{r3, pc}
  4142ce:	bf00      	nop
  4142d0:	2043a178 	.word	0x2043a178
  4142d4:	00415389 	.word	0x00415389
  4142d8:	00415375 	.word	0x00415375

004142dc <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
  4142dc:	b538      	push	{r3, r4, r5, lr}
  4142de:	4604      	mov	r4, r0
  4142e0:	460d      	mov	r5, r1
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
  4142e2:	2110      	movs	r1, #16
  4142e4:	4628      	mov	r0, r5
  4142e6:	4b10      	ldr	r3, [pc, #64]	; (414328 <_lv_indev_read+0x4c>)
  4142e8:	4798      	blx	r3

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
  4142ea:	7823      	ldrb	r3, [r4, #0]
  4142ec:	2b01      	cmp	r3, #1
  4142ee:	d009      	beq.n	414304 <_lv_indev_read+0x28>
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
  4142f0:	2b02      	cmp	r3, #2
  4142f2:	d00e      	beq.n	414312 <_lv_indev_read+0x36>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
  4142f4:	2b04      	cmp	r3, #4
  4142f6:	d00f      	beq.n	414318 <_lv_indev_read+0x3c>
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
  4142f8:	6863      	ldr	r3, [r4, #4]
  4142fa:	b193      	cbz	r3, 414322 <_lv_indev_read+0x46>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
  4142fc:	4629      	mov	r1, r5
  4142fe:	4620      	mov	r0, r4
  414300:	4798      	blx	r3
  414302:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.act_point.x;
  414304:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  414308:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
  41430a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  41430e:	806b      	strh	r3, [r5, #2]
  414310:	e7f2      	b.n	4142f8 <_lv_indev_read+0x1c>
        data->key = indev->proc.types.keypad.last_key;
  414312:	6a63      	ldr	r3, [r4, #36]	; 0x24
  414314:	606b      	str	r3, [r5, #4]
  414316:	e7ef      	b.n	4142f8 <_lv_indev_read+0x1c>
        data->key = LV_KEY_ENTER;
  414318:	230a      	movs	r3, #10
  41431a:	606b      	str	r3, [r5, #4]
        data->enc_diff = 0;
  41431c:	2300      	movs	r3, #0
  41431e:	81ab      	strh	r3, [r5, #12]
  414320:	e7ea      	b.n	4142f8 <_lv_indev_read+0x1c>
    bool cont = false;
  414322:	2000      	movs	r0, #0
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
  414324:	bd38      	pop	{r3, r4, r5, pc}
  414326:	bf00      	nop
  414328:	00415ca1 	.word	0x00415ca1

0041432c <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
  41432c:	2200      	movs	r2, #0
  41432e:	4b03      	ldr	r3, [pc, #12]	; (41433c <lv_tick_inc+0x10>)
  414330:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
  414332:	4a03      	ldr	r2, [pc, #12]	; (414340 <lv_tick_inc+0x14>)
  414334:	6813      	ldr	r3, [r2, #0]
  414336:	4418      	add	r0, r3
  414338:	6010      	str	r0, [r2, #0]
  41433a:	4770      	bx	lr
  41433c:	2040c73c 	.word	0x2040c73c
  414340:	2040c738 	.word	0x2040c738

00414344 <lv_tick_get>:
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
  414344:	4b04      	ldr	r3, [pc, #16]	; (414358 <lv_tick_get+0x14>)
  414346:	2201      	movs	r2, #1
  414348:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
  41434a:	4a04      	ldr	r2, [pc, #16]	; (41435c <lv_tick_get+0x18>)
  41434c:	6810      	ldr	r0, [r2, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
  41434e:	781b      	ldrb	r3, [r3, #0]
  414350:	2b00      	cmp	r3, #0
  414352:	d0f7      	beq.n	414344 <lv_tick_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
  414354:	4770      	bx	lr
  414356:	bf00      	nop
  414358:	2040c73c 	.word	0x2040c73c
  41435c:	2040c738 	.word	0x2040c738

00414360 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
  414360:	b510      	push	{r4, lr}
  414362:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
  414364:	4b03      	ldr	r3, [pc, #12]	; (414374 <lv_tick_elaps+0x14>)
  414366:	4798      	blx	r3

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
  414368:	42a0      	cmp	r0, r4
  41436a:	d201      	bcs.n	414370 <lv_tick_elaps+0x10>
        prev_tick = act_time - prev_tick;
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
  41436c:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
  41436e:	bd10      	pop	{r4, pc}
        prev_tick = act_time - prev_tick;
  414370:	1b00      	subs	r0, r0, r4
  414372:	bd10      	pop	{r4, pc}
  414374:	00414345 	.word	0x00414345

00414378 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
  414378:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  41437a:	6a88      	ldr	r0, [r1, #40]	; 0x28
  41437c:	4282      	cmp	r2, r0
  41437e:	d00b      	beq.n	414398 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
  414380:	0280      	lsls	r0, r0, #10
  414382:	fb90 f0f2 	sdiv	r0, r0, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
  414386:	6a0b      	ldr	r3, [r1, #32]
  414388:	698a      	ldr	r2, [r1, #24]
  41438a:	1a9b      	subs	r3, r3, r2
  41438c:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
  414390:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
  414394:	b200      	sxth	r0, r0
  414396:	4770      	bx	lr
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
  414398:	f44f 6080 	mov.w	r0, #1024	; 0x400
  41439c:	e7f3      	b.n	414386 <lv_anim_path_linear+0xe>
	...

004143a0 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
  4143a0:	b508      	push	{r3, lr}
    anim_list_changed = true;
  4143a2:	2201      	movs	r2, #1
  4143a4:	4b08      	ldr	r3, [pc, #32]	; (4143c8 <anim_mark_list_change+0x28>)
  4143a6:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
  4143a8:	4808      	ldr	r0, [pc, #32]	; (4143cc <anim_mark_list_change+0x2c>)
  4143aa:	4b09      	ldr	r3, [pc, #36]	; (4143d0 <anim_mark_list_change+0x30>)
  4143ac:	4798      	blx	r3
  4143ae:	b128      	cbz	r0, 4143bc <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
  4143b0:	2104      	movs	r1, #4
  4143b2:	4b08      	ldr	r3, [pc, #32]	; (4143d4 <anim_mark_list_change+0x34>)
  4143b4:	6818      	ldr	r0, [r3, #0]
  4143b6:	4b08      	ldr	r3, [pc, #32]	; (4143d8 <anim_mark_list_change+0x38>)
  4143b8:	4798      	blx	r3
  4143ba:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
  4143bc:	2100      	movs	r1, #0
  4143be:	4b05      	ldr	r3, [pc, #20]	; (4143d4 <anim_mark_list_change+0x34>)
  4143c0:	6818      	ldr	r0, [r3, #0]
  4143c2:	4b05      	ldr	r3, [pc, #20]	; (4143d8 <anim_mark_list_change+0x38>)
  4143c4:	4798      	blx	r3
  4143c6:	bd08      	pop	{r3, pc}
  4143c8:	2040c744 	.word	0x2040c744
  4143cc:	2043a248 	.word	0x2043a248
  4143d0:	00415375 	.word	0x00415375
  4143d4:	2040c740 	.word	0x2040c740
  4143d8:	004160c5 	.word	0x004160c5

004143dc <anim_ready_handler>:
{
  4143dc:	b510      	push	{r4, lr}
  4143de:	b092      	sub	sp, #72	; 0x48
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
  4143e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  4143e4:	f013 0301 	ands.w	r3, r3, #1
  4143e8:	d107      	bne.n	4143fa <anim_ready_handler+0x1e>
  4143ea:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  4143ec:	b12a      	cbz	r2, 4143fa <anim_ready_handler+0x1e>
  4143ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4143f2:	428a      	cmp	r2, r1
  4143f4:	d001      	beq.n	4143fa <anim_ready_handler+0x1e>
        a->repeat_cnt--;
  4143f6:	3a01      	subs	r2, #1
  4143f8:	8702      	strh	r2, [r0, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  4143fa:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  4143fc:	b9b2      	cbnz	r2, 41442c <anim_ready_handler+0x50>
  4143fe:	6b02      	ldr	r2, [r0, #48]	; 0x30
  414400:	b102      	cbz	r2, 414404 <anim_ready_handler+0x28>
  414402:	b19b      	cbz	r3, 41442c <anim_ready_handler+0x50>
  414404:	4604      	mov	r4, r0
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
  414406:	2244      	movs	r2, #68	; 0x44
  414408:	4601      	mov	r1, r0
  41440a:	a801      	add	r0, sp, #4
  41440c:	4b16      	ldr	r3, [pc, #88]	; (414468 <anim_ready_handler+0x8c>)
  41440e:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  414410:	4621      	mov	r1, r4
  414412:	4816      	ldr	r0, [pc, #88]	; (41446c <anim_ready_handler+0x90>)
  414414:	4b16      	ldr	r3, [pc, #88]	; (414470 <anim_ready_handler+0x94>)
  414416:	4798      	blx	r3
        lv_mem_free(a);
  414418:	4620      	mov	r0, r4
  41441a:	4b16      	ldr	r3, [pc, #88]	; (414474 <anim_ready_handler+0x98>)
  41441c:	4798      	blx	r3
        anim_mark_list_change();
  41441e:	4b16      	ldr	r3, [pc, #88]	; (414478 <anim_ready_handler+0x9c>)
  414420:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
  414422:	9b04      	ldr	r3, [sp, #16]
  414424:	b1e3      	cbz	r3, 414460 <anim_ready_handler+0x84>
  414426:	a801      	add	r0, sp, #4
  414428:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  41442a:	e019      	b.n	414460 <anim_ready_handler+0x84>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  41442c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  41442e:	4252      	negs	r2, r2
  414430:	6282      	str	r2, [r0, #40]	; 0x28
        if(a->playback_time != 0) {
  414432:	6b02      	ldr	r2, [r0, #48]	; 0x30
  414434:	b1a2      	cbz	r2, 414460 <anim_ready_handler+0x84>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
  414436:	b913      	cbnz	r3, 41443e <anim_ready_handler+0x62>
  414438:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  41443a:	4249      	negs	r1, r1
  41443c:	6281      	str	r1, [r0, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
  41443e:	f083 0301 	eor.w	r3, r3, #1
  414442:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
  414446:	f363 0100 	bfi	r1, r3, #0, #1
  41444a:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
            tmp      = a->start;
  41444e:	6983      	ldr	r3, [r0, #24]
            a->start = a->end;
  414450:	6a04      	ldr	r4, [r0, #32]
  414452:	6184      	str	r4, [r0, #24]
            a->end   = tmp;
  414454:	6203      	str	r3, [r0, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
  414456:	f011 0f01 	tst.w	r1, #1
  41445a:	d100      	bne.n	41445e <anim_ready_handler+0x82>
  41445c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  41445e:	6242      	str	r2, [r0, #36]	; 0x24
}
  414460:	4b06      	ldr	r3, [pc, #24]	; (41447c <anim_ready_handler+0xa0>)
  414462:	7818      	ldrb	r0, [r3, #0]
  414464:	b012      	add	sp, #72	; 0x48
  414466:	bd10      	pop	{r4, pc}
  414468:	0041597d 	.word	0x0041597d
  41446c:	2043a248 	.word	0x2043a248
  414470:	00415431 	.word	0x00415431
  414474:	00415831 	.word	0x00415831
  414478:	004143a1 	.word	0x004143a1
  41447c:	2040c744 	.word	0x2040c744

00414480 <anim_task>:
{
  414480:	b538      	push	{r3, r4, r5, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  414482:	4836      	ldr	r0, [pc, #216]	; (41455c <anim_task+0xdc>)
  414484:	4b36      	ldr	r3, [pc, #216]	; (414560 <anim_task+0xe0>)
  414486:	4798      	blx	r3
  414488:	e009      	b.n	41449e <anim_task+0x1e>
        a->has_run = 0;
  41448a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  41448e:	f36f 0341 	bfc	r3, #1, #1
  414492:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  414496:	4601      	mov	r1, r0
  414498:	4830      	ldr	r0, [pc, #192]	; (41455c <anim_task+0xdc>)
  41449a:	4b32      	ldr	r3, [pc, #200]	; (414564 <anim_task+0xe4>)
  41449c:	4798      	blx	r3
  41449e:	2800      	cmp	r0, #0
  4144a0:	d1f3      	bne.n	41448a <anim_task+0xa>
    uint32_t elaps = lv_tick_elaps(last_task_run);
  4144a2:	4b31      	ldr	r3, [pc, #196]	; (414568 <anim_task+0xe8>)
  4144a4:	6818      	ldr	r0, [r3, #0]
  4144a6:	4b31      	ldr	r3, [pc, #196]	; (41456c <anim_task+0xec>)
  4144a8:	4798      	blx	r3
  4144aa:	4605      	mov	r5, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  4144ac:	482b      	ldr	r0, [pc, #172]	; (41455c <anim_task+0xdc>)
  4144ae:	4b2c      	ldr	r3, [pc, #176]	; (414560 <anim_task+0xe0>)
  4144b0:	4798      	blx	r3
  4144b2:	4604      	mov	r4, r0
    while(a != NULL) {
  4144b4:	e022      	b.n	4144fc <anim_task+0x7c>
            if(a->act_time <= 0 && new_act_time >= 0) {
  4144b6:	2a00      	cmp	r2, #0
  4144b8:	db31      	blt.n	41451e <anim_task+0x9e>
                if(a->start_cb) a->start_cb(a);
  4144ba:	68a3      	ldr	r3, [r4, #8]
  4144bc:	2b00      	cmp	r3, #0
  4144be:	d02e      	beq.n	41451e <anim_task+0x9e>
  4144c0:	4620      	mov	r0, r4
  4144c2:	4798      	blx	r3
  4144c4:	e02b      	b.n	41451e <anim_task+0x9e>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
  4144c6:	6923      	ldr	r3, [r4, #16]
  4144c8:	2b00      	cmp	r3, #0
  4144ca:	d032      	beq.n	414532 <anim_task+0xb2>
  4144cc:	4621      	mov	r1, r4
  4144ce:	f104 0010 	add.w	r0, r4, #16
  4144d2:	4798      	blx	r3
                if(new_value != a->current) {
  4144d4:	69e3      	ldr	r3, [r4, #28]
  4144d6:	4298      	cmp	r0, r3
  4144d8:	d005      	beq.n	4144e6 <anim_task+0x66>
                    a->current = new_value;
  4144da:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
  4144dc:	6863      	ldr	r3, [r4, #4]
  4144de:	b113      	cbz	r3, 4144e6 <anim_task+0x66>
  4144e0:	b201      	sxth	r1, r0
  4144e2:	6820      	ldr	r0, [r4, #0]
  4144e4:	4798      	blx	r3
                if(a->act_time >= a->time) {
  4144e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4144e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4144ea:	429a      	cmp	r2, r3
  4144ec:	da27      	bge.n	41453e <anim_task+0xbe>
        if(anim_list_changed)
  4144ee:	4b20      	ldr	r3, [pc, #128]	; (414570 <anim_task+0xf0>)
  4144f0:	781b      	ldrb	r3, [r3, #0]
  4144f2:	b343      	cbz	r3, 414546 <anim_task+0xc6>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  4144f4:	4819      	ldr	r0, [pc, #100]	; (41455c <anim_task+0xdc>)
  4144f6:	4b1a      	ldr	r3, [pc, #104]	; (414560 <anim_task+0xe0>)
  4144f8:	4798      	blx	r3
  4144fa:	4604      	mov	r4, r0
    while(a != NULL) {
  4144fc:	b34c      	cbz	r4, 414552 <anim_task+0xd2>
        anim_list_changed = false;
  4144fe:	2200      	movs	r2, #0
  414500:	4b1b      	ldr	r3, [pc, #108]	; (414570 <anim_task+0xf0>)
  414502:	701a      	strb	r2, [r3, #0]
        if(!a->has_run) {
  414504:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  414508:	f013 0f02 	tst.w	r3, #2
  41450c:	d1ef      	bne.n	4144ee <anim_task+0x6e>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
  41450e:	f043 0302 	orr.w	r3, r3, #2
  414512:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
  414516:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  414518:	18ea      	adds	r2, r5, r3
            if(a->act_time <= 0 && new_act_time >= 0) {
  41451a:	2b00      	cmp	r3, #0
  41451c:	ddcb      	ble.n	4144b6 <anim_task+0x36>
            a->act_time += elaps;
  41451e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  414520:	442b      	add	r3, r5
  414522:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
  414524:	2b00      	cmp	r3, #0
  414526:	dbe2      	blt.n	4144ee <anim_task+0x6e>
                if(a->act_time > a->time) a->act_time = a->time;
  414528:	6a62      	ldr	r2, [r4, #36]	; 0x24
  41452a:	4293      	cmp	r3, r2
  41452c:	ddcb      	ble.n	4144c6 <anim_task+0x46>
  41452e:	62a2      	str	r2, [r4, #40]	; 0x28
  414530:	e7c9      	b.n	4144c6 <anim_task+0x46>
                else new_value = lv_anim_path_linear(&a->path, a);
  414532:	4621      	mov	r1, r4
  414534:	f104 0010 	add.w	r0, r4, #16
  414538:	4b0e      	ldr	r3, [pc, #56]	; (414574 <anim_task+0xf4>)
  41453a:	4798      	blx	r3
  41453c:	e7ca      	b.n	4144d4 <anim_task+0x54>
                    anim_ready_handler(a);
  41453e:	4620      	mov	r0, r4
  414540:	4b0d      	ldr	r3, [pc, #52]	; (414578 <anim_task+0xf8>)
  414542:	4798      	blx	r3
  414544:	e7d3      	b.n	4144ee <anim_task+0x6e>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  414546:	4621      	mov	r1, r4
  414548:	4804      	ldr	r0, [pc, #16]	; (41455c <anim_task+0xdc>)
  41454a:	4b06      	ldr	r3, [pc, #24]	; (414564 <anim_task+0xe4>)
  41454c:	4798      	blx	r3
  41454e:	4604      	mov	r4, r0
  414550:	e7d4      	b.n	4144fc <anim_task+0x7c>
    last_task_run = lv_tick_get();
  414552:	4b0a      	ldr	r3, [pc, #40]	; (41457c <anim_task+0xfc>)
  414554:	4798      	blx	r3
  414556:	4b04      	ldr	r3, [pc, #16]	; (414568 <anim_task+0xe8>)
  414558:	6018      	str	r0, [r3, #0]
  41455a:	bd38      	pop	{r3, r4, r5, pc}
  41455c:	2043a248 	.word	0x2043a248
  414560:	00415375 	.word	0x00415375
  414564:	00415389 	.word	0x00415389
  414568:	2040c748 	.word	0x2040c748
  41456c:	00414361 	.word	0x00414361
  414570:	2040c744 	.word	0x2040c744
  414574:	00414379 	.word	0x00414379
  414578:	004143dd 	.word	0x004143dd
  41457c:	00414345 	.word	0x00414345

00414580 <_lv_anim_core_init>:
{
  414580:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
  414582:	2144      	movs	r1, #68	; 0x44
  414584:	480a      	ldr	r0, [pc, #40]	; (4145b0 <_lv_anim_core_init+0x30>)
  414586:	4b0b      	ldr	r3, [pc, #44]	; (4145b4 <_lv_anim_core_init+0x34>)
  414588:	4798      	blx	r3
    last_task_run = lv_tick_get();
  41458a:	4b0b      	ldr	r3, [pc, #44]	; (4145b8 <_lv_anim_core_init+0x38>)
  41458c:	4798      	blx	r3
  41458e:	4b0b      	ldr	r3, [pc, #44]	; (4145bc <_lv_anim_core_init+0x3c>)
  414590:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
  414592:	2300      	movs	r3, #0
  414594:	2204      	movs	r2, #4
  414596:	211e      	movs	r1, #30
  414598:	4809      	ldr	r0, [pc, #36]	; (4145c0 <_lv_anim_core_init+0x40>)
  41459a:	4c0a      	ldr	r4, [pc, #40]	; (4145c4 <_lv_anim_core_init+0x44>)
  41459c:	47a0      	blx	r4
  41459e:	4b0a      	ldr	r3, [pc, #40]	; (4145c8 <_lv_anim_core_init+0x48>)
  4145a0:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
  4145a2:	4b0a      	ldr	r3, [pc, #40]	; (4145cc <_lv_anim_core_init+0x4c>)
  4145a4:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actually changed*/
  4145a6:	2200      	movs	r2, #0
  4145a8:	4b09      	ldr	r3, [pc, #36]	; (4145d0 <_lv_anim_core_init+0x50>)
  4145aa:	701a      	strb	r2, [r3, #0]
  4145ac:	bd10      	pop	{r4, pc}
  4145ae:	bf00      	nop
  4145b0:	2043a248 	.word	0x2043a248
  4145b4:	004152cb 	.word	0x004152cb
  4145b8:	00414345 	.word	0x00414345
  4145bc:	2040c748 	.word	0x2040c748
  4145c0:	00414481 	.word	0x00414481
  4145c4:	00415d71 	.word	0x00415d71
  4145c8:	2040c740 	.word	0x2040c740
  4145cc:	004143a1 	.word	0x004143a1
  4145d0:	2040c744 	.word	0x2040c744

004145d4 <lv_anim_init>:
{
  4145d4:	b510      	push	{r4, lr}
  4145d6:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
  4145d8:	2144      	movs	r1, #68	; 0x44
  4145da:	4b0f      	ldr	r3, [pc, #60]	; (414618 <lv_anim_init+0x44>)
  4145dc:	4798      	blx	r3
    a->time    = 500;
  4145de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  4145e2:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
  4145e4:	2300      	movs	r3, #0
  4145e6:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
  4145e8:	2364      	movs	r3, #100	; 0x64
  4145ea:	6223      	str	r3, [r4, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
  4145ec:	f104 0110 	add.w	r1, r4, #16
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  4145f0:	4a0a      	ldr	r2, [pc, #40]	; (41461c <lv_anim_init+0x48>)
  4145f2:	2304      	movs	r3, #4
  4145f4:	e004      	b.n	414600 <lv_anim_init+0x2c>

    while(len) {
        *d8 = *s8;
  4145f6:	f812 0b01 	ldrb.w	r0, [r2], #1
  4145fa:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  4145fe:	3b01      	subs	r3, #1
    while(len) {
  414600:	2b00      	cmp	r3, #0
  414602:	d1f8      	bne.n	4145f6 <lv_anim_init+0x22>
    a->repeat_cnt = 1;
  414604:	2301      	movs	r3, #1
  414606:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
  414608:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  41460c:	f043 0301 	orr.w	r3, r3, #1
  414610:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  414614:	bd10      	pop	{r4, pc}
  414616:	bf00      	nop
  414618:	00415ca1 	.word	0x00415ca1
  41461c:	00424818 	.word	0x00424818

00414620 <lv_anim_del>:
{
  414620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414624:	4606      	mov	r6, r0
  414626:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414628:	4812      	ldr	r0, [pc, #72]	; (414674 <lv_anim_del+0x54>)
  41462a:	4b13      	ldr	r3, [pc, #76]	; (414678 <lv_anim_del+0x58>)
  41462c:	4798      	blx	r3
  41462e:	4604      	mov	r4, r0
    bool del = false;
  414630:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
  414634:	e00b      	b.n	41464e <lv_anim_del+0x2e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  414636:	4621      	mov	r1, r4
  414638:	480e      	ldr	r0, [pc, #56]	; (414674 <lv_anim_del+0x54>)
  41463a:	4b10      	ldr	r3, [pc, #64]	; (41467c <lv_anim_del+0x5c>)
  41463c:	4798      	blx	r3
            lv_mem_free(a);
  41463e:	4620      	mov	r0, r4
  414640:	4b0f      	ldr	r3, [pc, #60]	; (414680 <lv_anim_del+0x60>)
  414642:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
  414644:	4b0f      	ldr	r3, [pc, #60]	; (414684 <lv_anim_del+0x64>)
  414646:	4798      	blx	r3
            del = true;
  414648:	f04f 0801 	mov.w	r8, #1
  41464c:	462c      	mov	r4, r5
    while(a != NULL) {
  41464e:	b16c      	cbz	r4, 41466c <lv_anim_del+0x4c>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  414650:	4621      	mov	r1, r4
  414652:	4808      	ldr	r0, [pc, #32]	; (414674 <lv_anim_del+0x54>)
  414654:	4b0c      	ldr	r3, [pc, #48]	; (414688 <lv_anim_del+0x68>)
  414656:	4798      	blx	r3
  414658:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  41465a:	6823      	ldr	r3, [r4, #0]
  41465c:	42b3      	cmp	r3, r6
  41465e:	d1f5      	bne.n	41464c <lv_anim_del+0x2c>
  414660:	6863      	ldr	r3, [r4, #4]
  414662:	42bb      	cmp	r3, r7
  414664:	d0e7      	beq.n	414636 <lv_anim_del+0x16>
  414666:	2f00      	cmp	r7, #0
  414668:	d1f0      	bne.n	41464c <lv_anim_del+0x2c>
  41466a:	e7e4      	b.n	414636 <lv_anim_del+0x16>
}
  41466c:	4640      	mov	r0, r8
  41466e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414672:	bf00      	nop
  414674:	2043a248 	.word	0x2043a248
  414678:	00415375 	.word	0x00415375
  41467c:	00415431 	.word	0x00415431
  414680:	00415831 	.word	0x00415831
  414684:	004143a1 	.word	0x004143a1
  414688:	00415389 	.word	0x00415389

0041468c <lv_anim_start>:
{
  41468c:	b538      	push	{r3, r4, r5, lr}
  41468e:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
  414690:	6841      	ldr	r1, [r0, #4]
  414692:	b111      	cbz	r1, 41469a <lv_anim_start+0xe>
  414694:	6800      	ldr	r0, [r0, #0]
  414696:	4b18      	ldr	r3, [pc, #96]	; (4146f8 <lv_anim_start+0x6c>)
  414698:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
  41469a:	4818      	ldr	r0, [pc, #96]	; (4146fc <lv_anim_start+0x70>)
  41469c:	4b18      	ldr	r3, [pc, #96]	; (414700 <lv_anim_start+0x74>)
  41469e:	4798      	blx	r3
  4146a0:	b9e8      	cbnz	r0, 4146de <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
  4146a2:	4816      	ldr	r0, [pc, #88]	; (4146fc <lv_anim_start+0x70>)
  4146a4:	4b17      	ldr	r3, [pc, #92]	; (414704 <lv_anim_start+0x78>)
  4146a6:	4798      	blx	r3
  4146a8:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
  4146aa:	4b17      	ldr	r3, [pc, #92]	; (414708 <lv_anim_start+0x7c>)
  4146ac:	4798      	blx	r3
  4146ae:	b1e0      	cbz	r0, 4146ea <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
  4146b0:	b1a4      	cbz	r4, 4146dc <lv_anim_start+0x50>
    a->time_orig = a->time;
  4146b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4146b4:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
  4146b6:	2244      	movs	r2, #68	; 0x44
  4146b8:	4629      	mov	r1, r5
  4146ba:	4620      	mov	r0, r4
  4146bc:	4b13      	ldr	r3, [pc, #76]	; (41470c <lv_anim_start+0x80>)
  4146be:	4798      	blx	r3
    if(new_anim->early_apply) {
  4146c0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  4146c4:	f013 0f01 	tst.w	r3, #1
  4146c8:	d006      	beq.n	4146d8 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
  4146ca:	6863      	ldr	r3, [r4, #4]
  4146cc:	b123      	cbz	r3, 4146d8 <lv_anim_start+0x4c>
  4146ce:	6820      	ldr	r0, [r4, #0]
  4146d0:	b110      	cbz	r0, 4146d8 <lv_anim_start+0x4c>
  4146d2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
  4146d6:	4798      	blx	r3
    anim_mark_list_change();
  4146d8:	4b0d      	ldr	r3, [pc, #52]	; (414710 <lv_anim_start+0x84>)
  4146da:	4798      	blx	r3
  4146dc:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
  4146de:	4b0d      	ldr	r3, [pc, #52]	; (414714 <lv_anim_start+0x88>)
  4146e0:	4798      	blx	r3
  4146e2:	3801      	subs	r0, #1
  4146e4:	4b0c      	ldr	r3, [pc, #48]	; (414718 <lv_anim_start+0x8c>)
  4146e6:	6018      	str	r0, [r3, #0]
  4146e8:	e7db      	b.n	4146a2 <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
  4146ea:	4622      	mov	r2, r4
  4146ec:	2300      	movs	r3, #0
  4146ee:	480b      	ldr	r0, [pc, #44]	; (41471c <lv_anim_start+0x90>)
  4146f0:	490b      	ldr	r1, [pc, #44]	; (414720 <lv_anim_start+0x94>)
  4146f2:	4788      	blx	r1
  4146f4:	e7fe      	b.n	4146f4 <lv_anim_start+0x68>
  4146f6:	bf00      	nop
  4146f8:	00414621 	.word	0x00414621
  4146fc:	2043a248 	.word	0x2043a248
  414700:	004155e1 	.word	0x004155e1
  414704:	004152dd 	.word	0x004152dd
  414708:	00415065 	.word	0x00415065
  41470c:	0041597d 	.word	0x0041597d
  414710:	004143a1 	.word	0x004143a1
  414714:	00414345 	.word	0x00414345
  414718:	2040c748 	.word	0x2040c748
  41471c:	00421264 	.word	0x00421264
  414720:	00415071 	.word	0x00415071

00414724 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
  414724:	b410      	push	{r4}
    lv_coord_t r = (area->x2 - area->x1) / 2;
  414726:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  41472a:	f9b0 2000 	ldrsh.w	r2, [r0]
  41472e:	1a9b      	subs	r3, r3, r2
  414730:	d417      	bmi.n	414762 <lv_point_within_circle+0x3e>
  414732:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
  414734:	b29c      	uxth	r4, r3
  414736:	fa14 f282 	uxtah	r2, r4, r2
  41473a:	b292      	uxth	r2, r2
    lv_coord_t cy = area->y1 + r;
  41473c:	8840      	ldrh	r0, [r0, #2]
  41473e:	4404      	add	r4, r0
  414740:	b2a4      	uxth	r4, r4

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
  414742:	8808      	ldrh	r0, [r1, #0]
  414744:	1a82      	subs	r2, r0, r2
    lv_coord_t py = p->y - cy;
  414746:	8849      	ldrh	r1, [r1, #2]
  414748:	1b09      	subs	r1, r1, r4

    uint32_t r_sqrd = r * r;
  41474a:	fb13 f303 	smulbb	r3, r3, r3
    uint32_t dist = (px * px) + (py * py);
  41474e:	fb11 f101 	smulbb	r1, r1, r1
  414752:	fb12 1202 	smlabb	r2, r2, r2, r1

    if(dist <= r_sqrd)
  414756:	4293      	cmp	r3, r2
  414758:	d205      	bcs.n	414766 <lv_point_within_circle+0x42>
        return true;
    else
        return false;
  41475a:	2000      	movs	r0, #0
}
  41475c:	f85d 4b04 	ldr.w	r4, [sp], #4
  414760:	4770      	bx	lr
    lv_coord_t r = (area->x2 - area->x1) / 2;
  414762:	3301      	adds	r3, #1
  414764:	e7e5      	b.n	414732 <lv_point_within_circle+0xe>
        return true;
  414766:	2001      	movs	r0, #1
  414768:	e7f8      	b.n	41475c <lv_point_within_circle+0x38>

0041476a <lv_area_set>:
    area_p->x1 = x1;
  41476a:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
  41476c:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
  41476e:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
  414770:	f9bd 3000 	ldrsh.w	r3, [sp]
  414774:	80c3      	strh	r3, [r0, #6]
  414776:	4770      	bx	lr

00414778 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
  414778:	8843      	ldrh	r3, [r0, #2]
  41477a:	4419      	add	r1, r3
  41477c:	b289      	uxth	r1, r1
  41477e:	3901      	subs	r1, #1
  414780:	80c1      	strh	r1, [r0, #6]
  414782:	4770      	bx	lr

00414784 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
  414784:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  414788:	f9b0 3000 	ldrsh.w	r3, [r0]
  41478c:	1ad2      	subs	r2, r2, r3
  41478e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  414792:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
  414796:	1a18      	subs	r0, r3, r0
  414798:	3001      	adds	r0, #1
}
  41479a:	fb02 0000 	mla	r0, r2, r0, r0
  41479e:	4770      	bx	lr

004147a0 <_lv_area_intersect>:
{
  4147a0:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
  4147a2:	f9b2 4000 	ldrsh.w	r4, [r2]
  4147a6:	f9b1 3000 	ldrsh.w	r3, [r1]
  4147aa:	429c      	cmp	r4, r3
  4147ac:	bfb8      	it	lt
  4147ae:	461c      	movlt	r4, r3
  4147b0:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
  4147b2:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  4147b6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  4147ba:	429d      	cmp	r5, r3
  4147bc:	bfb8      	it	lt
  4147be:	461d      	movlt	r5, r3
  4147c0:	8045      	strh	r5, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
  4147c2:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  4147c6:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  4147ca:	42b3      	cmp	r3, r6
  4147cc:	bfa8      	it	ge
  4147ce:	4633      	movge	r3, r6
  4147d0:	8083      	strh	r3, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
  4147d2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  4147d6:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
  4147da:	428a      	cmp	r2, r1
  4147dc:	bfa8      	it	ge
  4147de:	460a      	movge	r2, r1
  4147e0:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
  4147e2:	429c      	cmp	r4, r3
  4147e4:	dc05      	bgt.n	4147f2 <_lv_area_intersect+0x52>
  4147e6:	4295      	cmp	r5, r2
  4147e8:	dd01      	ble.n	4147ee <_lv_area_intersect+0x4e>
        union_ok = false;
  4147ea:	2000      	movs	r0, #0
  4147ec:	e002      	b.n	4147f4 <_lv_area_intersect+0x54>
    bool union_ok = true;
  4147ee:	2001      	movs	r0, #1
  4147f0:	e000      	b.n	4147f4 <_lv_area_intersect+0x54>
        union_ok = false;
  4147f2:	2000      	movs	r0, #0
}
  4147f4:	bc70      	pop	{r4, r5, r6}
  4147f6:	4770      	bx	lr

004147f8 <_lv_area_join>:
{
  4147f8:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
  4147fa:	f9b2 3000 	ldrsh.w	r3, [r2]
  4147fe:	f9b1 4000 	ldrsh.w	r4, [r1]
  414802:	42a3      	cmp	r3, r4
  414804:	bfa8      	it	ge
  414806:	4623      	movge	r3, r4
  414808:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
  41480a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  41480e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  414812:	42a3      	cmp	r3, r4
  414814:	bfa8      	it	ge
  414816:	4623      	movge	r3, r4
  414818:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
  41481a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  41481e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  414822:	42a3      	cmp	r3, r4
  414824:	bfb8      	it	lt
  414826:	4623      	movlt	r3, r4
  414828:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
  41482a:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  41482e:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
  414832:	4293      	cmp	r3, r2
  414834:	bfb8      	it	lt
  414836:	4613      	movlt	r3, r2
  414838:	80c3      	strh	r3, [r0, #6]
}
  41483a:	f85d 4b04 	ldr.w	r4, [sp], #4
  41483e:	4770      	bx	lr

00414840 <_lv_area_is_point_on>:
{
  414840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414844:	b082      	sub	sp, #8
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
  414846:	f9b1 3000 	ldrsh.w	r3, [r1]
  41484a:	f9b0 6000 	ldrsh.w	r6, [r0]
  41484e:	42b3      	cmp	r3, r6
  414850:	db0f      	blt.n	414872 <_lv_area_is_point_on+0x32>
  414852:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  414856:	42a3      	cmp	r3, r4
  414858:	dc52      	bgt.n	414900 <_lv_area_is_point_on+0xc0>
  41485a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  41485e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  414862:	42a3      	cmp	r3, r4
  414864:	db4e      	blt.n	414904 <_lv_area_is_point_on+0xc4>
  414866:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  41486a:	42a3      	cmp	r3, r4
  41486c:	dd4c      	ble.n	414908 <_lv_area_is_point_on+0xc8>
    bool is_on_rect = false;
  41486e:	2500      	movs	r5, #0
  414870:	e000      	b.n	414874 <_lv_area_is_point_on+0x34>
  414872:	2500      	movs	r5, #0
    if(!is_on_rect)
  414874:	2d00      	cmp	r5, #0
  414876:	d03f      	beq.n	4148f8 <_lv_area_is_point_on+0xb8>
    if(radius <= 0) {
  414878:	2a00      	cmp	r2, #0
  41487a:	dd3d      	ble.n	4148f8 <_lv_area_is_point_on+0xb8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41487c:	8884      	ldrh	r4, [r0, #4]
  41487e:	b2b3      	uxth	r3, r6
  414880:	1ae4      	subs	r4, r4, r3
  414882:	b2a4      	uxth	r4, r4
  414884:	3401      	adds	r4, #1
  414886:	b224      	sxth	r4, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  414888:	2c00      	cmp	r4, #0
  41488a:	db3f      	blt.n	41490c <_lv_area_is_point_on+0xcc>
  41488c:	1064      	asrs	r4, r4, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41488e:	88c3      	ldrh	r3, [r0, #6]
  414890:	8847      	ldrh	r7, [r0, #2]
  414892:	1bdb      	subs	r3, r3, r7
  414894:	b29b      	uxth	r3, r3
  414896:	3301      	adds	r3, #1
  414898:	b21b      	sxth	r3, r3
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  41489a:	2b00      	cmp	r3, #0
  41489c:	db38      	blt.n	414910 <_lv_area_is_point_on+0xd0>
  41489e:	105b      	asrs	r3, r3, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
  4148a0:	429c      	cmp	r4, r3
  4148a2:	bfa8      	it	ge
  4148a4:	461c      	movge	r4, r3
  4148a6:	b224      	sxth	r4, r4
    if(radius > max_radius)
  4148a8:	42a2      	cmp	r2, r4
  4148aa:	dc00      	bgt.n	4148ae <_lv_area_is_point_on+0x6e>
  4148ac:	4614      	mov	r4, r2
  4148ae:	4688      	mov	r8, r1
  4148b0:	4607      	mov	r7, r0
    corner_area.x1 = a_p->x1;
  4148b2:	f8ad 6000 	strh.w	r6, [sp]
    corner_area.x2 = a_p->x1 + radius;
  4148b6:	8803      	ldrh	r3, [r0, #0]
  4148b8:	b2a4      	uxth	r4, r4
  4148ba:	4423      	add	r3, r4
  4148bc:	f8ad 3004 	strh.w	r3, [sp, #4]
    corner_area.y1 = a_p->y1;
  4148c0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  4148c4:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  4148c8:	8843      	ldrh	r3, [r0, #2]
  4148ca:	4423      	add	r3, r4
  4148cc:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  4148d0:	2200      	movs	r2, #0
  4148d2:	4668      	mov	r0, sp
  4148d4:	f7ff ffb4 	bl	414840 <_lv_area_is_point_on>
  4148d8:	b1e0      	cbz	r0, 414914 <_lv_area_is_point_on+0xd4>
        corner_area.x2 += radius;
  4148da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4148de:	4423      	add	r3, r4
  4148e0:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y2 += radius;
  4148e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4148e8:	441c      	add	r4, r3
  4148ea:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  4148ee:	4641      	mov	r1, r8
  4148f0:	4668      	mov	r0, sp
  4148f2:	4b36      	ldr	r3, [pc, #216]	; (4149cc <_lv_area_is_point_on+0x18c>)
  4148f4:	4798      	blx	r3
  4148f6:	4605      	mov	r5, r0
}
  4148f8:	4628      	mov	r0, r5
  4148fa:	b002      	add	sp, #8
  4148fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_on_rect = false;
  414900:	2500      	movs	r5, #0
  414902:	e7b7      	b.n	414874 <_lv_area_is_point_on+0x34>
  414904:	2500      	movs	r5, #0
  414906:	e7b5      	b.n	414874 <_lv_area_is_point_on+0x34>
        is_on_rect = true;
  414908:	2501      	movs	r5, #1
  41490a:	e7b3      	b.n	414874 <_lv_area_is_point_on+0x34>
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  41490c:	3401      	adds	r4, #1
  41490e:	e7bd      	b.n	41488c <_lv_area_is_point_on+0x4c>
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  414910:	3301      	adds	r3, #1
  414912:	e7c4      	b.n	41489e <_lv_area_is_point_on+0x5e>
    corner_area.y1 = a_p->y2 - radius;
  414914:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
  414918:	b293      	uxth	r3, r2
  41491a:	1b1b      	subs	r3, r3, r4
  41491c:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y2;
  414920:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414924:	2200      	movs	r2, #0
  414926:	4641      	mov	r1, r8
  414928:	4668      	mov	r0, sp
  41492a:	f7ff ff89 	bl	414840 <_lv_area_is_point_on>
  41492e:	b178      	cbz	r0, 414950 <_lv_area_is_point_on+0x110>
        corner_area.x2 += radius;
  414930:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  414934:	4423      	add	r3, r4
  414936:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y1 -= radius;
  41493a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41493e:	1b1c      	subs	r4, r3, r4
  414940:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  414944:	4641      	mov	r1, r8
  414946:	4668      	mov	r0, sp
  414948:	4b20      	ldr	r3, [pc, #128]	; (4149cc <_lv_area_is_point_on+0x18c>)
  41494a:	4798      	blx	r3
  41494c:	4605      	mov	r5, r0
  41494e:	e7d3      	b.n	4148f8 <_lv_area_is_point_on+0xb8>
    corner_area.x1 = a_p->x2 - radius;
  414950:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
  414954:	b293      	uxth	r3, r2
  414956:	1b1b      	subs	r3, r3, r4
  414958:	f8ad 3000 	strh.w	r3, [sp]
    corner_area.x2 = a_p->x2;
  41495c:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414960:	2200      	movs	r2, #0
  414962:	4641      	mov	r1, r8
  414964:	4668      	mov	r0, sp
  414966:	f7ff ff6b 	bl	414840 <_lv_area_is_point_on>
  41496a:	b178      	cbz	r0, 41498c <_lv_area_is_point_on+0x14c>
        corner_area.x1 -= radius;
  41496c:	f8bd 3000 	ldrh.w	r3, [sp]
  414970:	1b1b      	subs	r3, r3, r4
  414972:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y1 -= radius;
  414976:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41497a:	1b1c      	subs	r4, r3, r4
  41497c:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  414980:	4641      	mov	r1, r8
  414982:	4668      	mov	r0, sp
  414984:	4b11      	ldr	r3, [pc, #68]	; (4149cc <_lv_area_is_point_on+0x18c>)
  414986:	4798      	blx	r3
  414988:	4605      	mov	r5, r0
  41498a:	e7b5      	b.n	4148f8 <_lv_area_is_point_on+0xb8>
    corner_area.y1 = a_p->y1;
  41498c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  414990:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  414994:	887b      	ldrh	r3, [r7, #2]
  414996:	4423      	add	r3, r4
  414998:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  41499c:	2200      	movs	r2, #0
  41499e:	4641      	mov	r1, r8
  4149a0:	4668      	mov	r0, sp
  4149a2:	f7ff ff4d 	bl	414840 <_lv_area_is_point_on>
  4149a6:	2800      	cmp	r0, #0
  4149a8:	d0a6      	beq.n	4148f8 <_lv_area_is_point_on+0xb8>
        corner_area.x1 -= radius;
  4149aa:	f8bd 3000 	ldrh.w	r3, [sp]
  4149ae:	1b1b      	subs	r3, r3, r4
  4149b0:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y2 += radius;
  4149b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4149b8:	441c      	add	r4, r3
  4149ba:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  4149be:	4641      	mov	r1, r8
  4149c0:	4668      	mov	r0, sp
  4149c2:	4b02      	ldr	r3, [pc, #8]	; (4149cc <_lv_area_is_point_on+0x18c>)
  4149c4:	4798      	blx	r3
  4149c6:	4605      	mov	r5, r0
  4149c8:	e796      	b.n	4148f8 <_lv_area_is_point_on+0xb8>
  4149ca:	bf00      	nop
  4149cc:	00414725 	.word	0x00414725

004149d0 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
  4149d0:	f9b0 2000 	ldrsh.w	r2, [r0]
  4149d4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  4149d8:	429a      	cmp	r2, r3
  4149da:	dc13      	bgt.n	414a04 <_lv_area_is_on+0x34>
  4149dc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  4149e0:	f9b1 3000 	ldrsh.w	r3, [r1]
  4149e4:	429a      	cmp	r2, r3
  4149e6:	db0f      	blt.n	414a08 <_lv_area_is_on+0x38>
  4149e8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  4149ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  4149f0:	429a      	cmp	r2, r3
  4149f2:	dc0b      	bgt.n	414a0c <_lv_area_is_on+0x3c>
  4149f4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  4149f8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  4149fc:	429a      	cmp	r2, r3
  4149fe:	da07      	bge.n	414a10 <_lv_area_is_on+0x40>
        return false;
  414a00:	2000      	movs	r0, #0
  414a02:	4770      	bx	lr
  414a04:	2000      	movs	r0, #0
  414a06:	4770      	bx	lr
  414a08:	2000      	movs	r0, #0
  414a0a:	4770      	bx	lr
  414a0c:	2000      	movs	r0, #0
  414a0e:	4770      	bx	lr
        return true;
  414a10:	2001      	movs	r0, #1
}
  414a12:	4770      	bx	lr

00414a14 <_lv_area_is_in>:
{
  414a14:	b5f0      	push	{r4, r5, r6, r7, lr}
  414a16:	b083      	sub	sp, #12
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  414a18:	f9b0 5000 	ldrsh.w	r5, [r0]
  414a1c:	f9b1 3000 	ldrsh.w	r3, [r1]
  414a20:	429d      	cmp	r5, r3
  414a22:	db13      	blt.n	414a4c <_lv_area_is_in+0x38>
  414a24:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  414a28:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  414a2c:	429c      	cmp	r4, r3
  414a2e:	db13      	blt.n	414a58 <_lv_area_is_in+0x44>
  414a30:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  414a34:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  414a38:	429c      	cmp	r4, r3
  414a3a:	dc0f      	bgt.n	414a5c <_lv_area_is_in+0x48>
       ain_p->y2 <= aholder_p->y2) {
  414a3c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  414a40:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  414a44:	429c      	cmp	r4, r3
  414a46:	dd0b      	ble.n	414a60 <_lv_area_is_in+0x4c>
    bool is_in = false;
  414a48:	2300      	movs	r3, #0
  414a4a:	e000      	b.n	414a4e <_lv_area_is_in+0x3a>
  414a4c:	2300      	movs	r3, #0
    if(!is_in) return false;
  414a4e:	b103      	cbz	r3, 414a52 <_lv_area_is_in+0x3e>
    if(radius == 0) return true;
  414a50:	b942      	cbnz	r2, 414a64 <_lv_area_is_in+0x50>
}
  414a52:	4618      	mov	r0, r3
  414a54:	b003      	add	sp, #12
  414a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool is_in = false;
  414a58:	2300      	movs	r3, #0
  414a5a:	e7f8      	b.n	414a4e <_lv_area_is_in+0x3a>
  414a5c:	2300      	movs	r3, #0
  414a5e:	e7f6      	b.n	414a4e <_lv_area_is_in+0x3a>
        is_in = true;
  414a60:	2301      	movs	r3, #1
  414a62:	e7f4      	b.n	414a4e <_lv_area_is_in+0x3a>
  414a64:	4617      	mov	r7, r2
  414a66:	460c      	mov	r4, r1
  414a68:	4606      	mov	r6, r0
    p.x = ain_p->x1;
  414a6a:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  414a6e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414a72:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414a76:	a901      	add	r1, sp, #4
  414a78:	4620      	mov	r0, r4
  414a7a:	4b17      	ldr	r3, [pc, #92]	; (414ad8 <_lv_area_is_in+0xc4>)
  414a7c:	4798      	blx	r3
  414a7e:	4603      	mov	r3, r0
  414a80:	2800      	cmp	r0, #0
  414a82:	d0e6      	beq.n	414a52 <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  414a84:	f9b6 5004 	ldrsh.w	r5, [r6, #4]
  414a88:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  414a8c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  414a90:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414a94:	463a      	mov	r2, r7
  414a96:	a901      	add	r1, sp, #4
  414a98:	4620      	mov	r0, r4
  414a9a:	4b0f      	ldr	r3, [pc, #60]	; (414ad8 <_lv_area_is_in+0xc4>)
  414a9c:	4798      	blx	r3
  414a9e:	4603      	mov	r3, r0
  414aa0:	2800      	cmp	r0, #0
  414aa2:	d0d6      	beq.n	414a52 <_lv_area_is_in+0x3e>
    p.x = ain_p->x1;
  414aa4:	f9b6 3000 	ldrsh.w	r3, [r6]
  414aa8:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y2;
  414aac:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
  414ab0:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414ab4:	463a      	mov	r2, r7
  414ab6:	a901      	add	r1, sp, #4
  414ab8:	4620      	mov	r0, r4
  414aba:	4b07      	ldr	r3, [pc, #28]	; (414ad8 <_lv_area_is_in+0xc4>)
  414abc:	4798      	blx	r3
  414abe:	4603      	mov	r3, r0
  414ac0:	2800      	cmp	r0, #0
  414ac2:	d0c6      	beq.n	414a52 <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  414ac4:	a902      	add	r1, sp, #8
  414ac6:	f821 5d04 	strh.w	r5, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414aca:	463a      	mov	r2, r7
  414acc:	4620      	mov	r0, r4
  414ace:	4b02      	ldr	r3, [pc, #8]	; (414ad8 <_lv_area_is_in+0xc4>)
  414ad0:	4798      	blx	r3
  414ad2:	4603      	mov	r3, r0
  414ad4:	e7bd      	b.n	414a52 <_lv_area_is_in+0x3e>
  414ad6:	bf00      	nop
  414ad8:	00414841 	.word	0x00414841

00414adc <_lv_area_align>:
{
  414adc:	b430      	push	{r4, r5}
    switch(align) {
  414ade:	2a14      	cmp	r2, #20
  414ae0:	d842      	bhi.n	414b68 <_lv_area_align+0x8c>
  414ae2:	e8df f012 	tbh	[pc, r2, lsl #1]
  414ae6:	0015      	.short	0x0015
  414ae8:	00570053 	.word	0x00570053
  414aec:	00850074 	.word	0x00850074
  414af0:	00bf0096 	.word	0x00bf0096
  414af4:	00f900dc 	.word	0x00f900dc
  414af8:	012b0122 	.word	0x012b0122
  414afc:	0161014c 	.word	0x0161014c
  414b00:	018b016a 	.word	0x018b016a
  414b04:	01a901a0 	.word	0x01a901a0
  414b08:	01df01ca 	.word	0x01df01ca
  414b0c:	020901e8 	.word	0x020901e8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414b10:	8884      	ldrh	r4, [r0, #4]
  414b12:	8802      	ldrh	r2, [r0, #0]
  414b14:	1aa4      	subs	r4, r4, r2
  414b16:	b2a4      	uxth	r4, r4
  414b18:	3401      	adds	r4, #1
  414b1a:	b224      	sxth	r4, r4
  414b1c:	888a      	ldrh	r2, [r1, #4]
  414b1e:	880d      	ldrh	r5, [r1, #0]
  414b20:	1b52      	subs	r2, r2, r5
  414b22:	b292      	uxth	r2, r2
  414b24:	3201      	adds	r2, #1
  414b26:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414b28:	4625      	mov	r5, r4
  414b2a:	2c00      	cmp	r4, #0
  414b2c:	db26      	blt.n	414b7c <_lv_area_align+0xa0>
  414b2e:	106d      	asrs	r5, r5, #1
  414b30:	4614      	mov	r4, r2
  414b32:	2a00      	cmp	r2, #0
  414b34:	db24      	blt.n	414b80 <_lv_area_align+0xa4>
  414b36:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  414b3a:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414b3c:	88c4      	ldrh	r4, [r0, #6]
  414b3e:	8842      	ldrh	r2, [r0, #2]
  414b40:	1aa4      	subs	r4, r4, r2
  414b42:	b2a4      	uxth	r4, r4
  414b44:	3401      	adds	r4, #1
  414b46:	b224      	sxth	r4, r4
  414b48:	88ca      	ldrh	r2, [r1, #6]
  414b4a:	8849      	ldrh	r1, [r1, #2]
  414b4c:	1a52      	subs	r2, r2, r1
  414b4e:	b292      	uxth	r2, r2
  414b50:	3201      	adds	r2, #1
  414b52:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414b54:	4621      	mov	r1, r4
  414b56:	2c00      	cmp	r4, #0
  414b58:	db14      	blt.n	414b84 <_lv_area_align+0xa8>
  414b5a:	1049      	asrs	r1, r1, #1
  414b5c:	4614      	mov	r4, r2
  414b5e:	2a00      	cmp	r2, #0
  414b60:	db12      	blt.n	414b88 <_lv_area_align+0xac>
  414b62:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  414b66:	8059      	strh	r1, [r3, #2]
    res->x += base->x1;
  414b68:	8802      	ldrh	r2, [r0, #0]
  414b6a:	8819      	ldrh	r1, [r3, #0]
  414b6c:	440a      	add	r2, r1
  414b6e:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
  414b70:	8842      	ldrh	r2, [r0, #2]
  414b72:	8859      	ldrh	r1, [r3, #2]
  414b74:	440a      	add	r2, r1
  414b76:	805a      	strh	r2, [r3, #2]
}
  414b78:	bc30      	pop	{r4, r5}
  414b7a:	4770      	bx	lr
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414b7c:	1c65      	adds	r5, r4, #1
  414b7e:	e7d6      	b.n	414b2e <_lv_area_align+0x52>
  414b80:	1c54      	adds	r4, r2, #1
  414b82:	e7d8      	b.n	414b36 <_lv_area_align+0x5a>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414b84:	1c61      	adds	r1, r4, #1
  414b86:	e7e8      	b.n	414b5a <_lv_area_align+0x7e>
  414b88:	1c54      	adds	r4, r2, #1
  414b8a:	e7ea      	b.n	414b62 <_lv_area_align+0x86>
            res->x = 0;
  414b8c:	2200      	movs	r2, #0
  414b8e:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  414b90:	805a      	strh	r2, [r3, #2]
            break;
  414b92:	e7e9      	b.n	414b68 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414b94:	8884      	ldrh	r4, [r0, #4]
  414b96:	8802      	ldrh	r2, [r0, #0]
  414b98:	1aa4      	subs	r4, r4, r2
  414b9a:	b2a4      	uxth	r4, r4
  414b9c:	3401      	adds	r4, #1
  414b9e:	b224      	sxth	r4, r4
  414ba0:	888a      	ldrh	r2, [r1, #4]
  414ba2:	8809      	ldrh	r1, [r1, #0]
  414ba4:	1a52      	subs	r2, r2, r1
  414ba6:	b292      	uxth	r2, r2
  414ba8:	3201      	adds	r2, #1
  414baa:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414bac:	4621      	mov	r1, r4
  414bae:	2c00      	cmp	r4, #0
  414bb0:	db09      	blt.n	414bc6 <_lv_area_align+0xea>
  414bb2:	1049      	asrs	r1, r1, #1
  414bb4:	4614      	mov	r4, r2
  414bb6:	2a00      	cmp	r2, #0
  414bb8:	db07      	blt.n	414bca <_lv_area_align+0xee>
  414bba:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  414bbe:	8019      	strh	r1, [r3, #0]
            res->y = 0;
  414bc0:	2200      	movs	r2, #0
  414bc2:	805a      	strh	r2, [r3, #2]
            break;
  414bc4:	e7d0      	b.n	414b68 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414bc6:	1c61      	adds	r1, r4, #1
  414bc8:	e7f3      	b.n	414bb2 <_lv_area_align+0xd6>
  414bca:	1c54      	adds	r4, r2, #1
  414bcc:	e7f5      	b.n	414bba <_lv_area_align+0xde>
  414bce:	8882      	ldrh	r2, [r0, #4]
  414bd0:	8804      	ldrh	r4, [r0, #0]
  414bd2:	1b12      	subs	r2, r2, r4
  414bd4:	b292      	uxth	r2, r2
  414bd6:	3201      	adds	r2, #1
  414bd8:	b292      	uxth	r2, r2
  414bda:	888c      	ldrh	r4, [r1, #4]
  414bdc:	8809      	ldrh	r1, [r1, #0]
  414bde:	1a61      	subs	r1, r4, r1
  414be0:	b289      	uxth	r1, r1
  414be2:	3101      	adds	r1, #1
  414be4:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414be6:	1a52      	subs	r2, r2, r1
  414be8:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  414bea:	2200      	movs	r2, #0
  414bec:	805a      	strh	r2, [r3, #2]
            break;
  414bee:	e7bb      	b.n	414b68 <_lv_area_align+0x8c>
            res->x = 0;
  414bf0:	2200      	movs	r2, #0
  414bf2:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414bf4:	88c2      	ldrh	r2, [r0, #6]
  414bf6:	8844      	ldrh	r4, [r0, #2]
  414bf8:	1b12      	subs	r2, r2, r4
  414bfa:	b292      	uxth	r2, r2
  414bfc:	3201      	adds	r2, #1
  414bfe:	b292      	uxth	r2, r2
  414c00:	88cc      	ldrh	r4, [r1, #6]
  414c02:	8849      	ldrh	r1, [r1, #2]
  414c04:	1a61      	subs	r1, r4, r1
  414c06:	b289      	uxth	r1, r1
  414c08:	3101      	adds	r1, #1
  414c0a:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414c0c:	1a52      	subs	r2, r2, r1
  414c0e:	805a      	strh	r2, [r3, #2]
            break;
  414c10:	e7aa      	b.n	414b68 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414c12:	8884      	ldrh	r4, [r0, #4]
  414c14:	8802      	ldrh	r2, [r0, #0]
  414c16:	1aa4      	subs	r4, r4, r2
  414c18:	b2a4      	uxth	r4, r4
  414c1a:	3401      	adds	r4, #1
  414c1c:	b224      	sxth	r4, r4
  414c1e:	888a      	ldrh	r2, [r1, #4]
  414c20:	880d      	ldrh	r5, [r1, #0]
  414c22:	1b52      	subs	r2, r2, r5
  414c24:	b292      	uxth	r2, r2
  414c26:	3201      	adds	r2, #1
  414c28:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414c2a:	4625      	mov	r5, r4
  414c2c:	2c00      	cmp	r4, #0
  414c2e:	db15      	blt.n	414c5c <_lv_area_align+0x180>
  414c30:	106d      	asrs	r5, r5, #1
  414c32:	4614      	mov	r4, r2
  414c34:	2a00      	cmp	r2, #0
  414c36:	db13      	blt.n	414c60 <_lv_area_align+0x184>
  414c38:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  414c3c:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414c3e:	88c2      	ldrh	r2, [r0, #6]
  414c40:	8844      	ldrh	r4, [r0, #2]
  414c42:	1b12      	subs	r2, r2, r4
  414c44:	b292      	uxth	r2, r2
  414c46:	3201      	adds	r2, #1
  414c48:	b292      	uxth	r2, r2
  414c4a:	88cc      	ldrh	r4, [r1, #6]
  414c4c:	8849      	ldrh	r1, [r1, #2]
  414c4e:	1a61      	subs	r1, r4, r1
  414c50:	b289      	uxth	r1, r1
  414c52:	3101      	adds	r1, #1
  414c54:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414c56:	1a52      	subs	r2, r2, r1
  414c58:	805a      	strh	r2, [r3, #2]
            break;
  414c5a:	e785      	b.n	414b68 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414c5c:	1c65      	adds	r5, r4, #1
  414c5e:	e7e7      	b.n	414c30 <_lv_area_align+0x154>
  414c60:	1c54      	adds	r4, r2, #1
  414c62:	e7e9      	b.n	414c38 <_lv_area_align+0x15c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414c64:	8882      	ldrh	r2, [r0, #4]
  414c66:	8804      	ldrh	r4, [r0, #0]
  414c68:	1b12      	subs	r2, r2, r4
  414c6a:	b292      	uxth	r2, r2
  414c6c:	3201      	adds	r2, #1
  414c6e:	b292      	uxth	r2, r2
  414c70:	888c      	ldrh	r4, [r1, #4]
  414c72:	880d      	ldrh	r5, [r1, #0]
  414c74:	1b64      	subs	r4, r4, r5
  414c76:	b2a4      	uxth	r4, r4
  414c78:	3401      	adds	r4, #1
  414c7a:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414c7c:	1b12      	subs	r2, r2, r4
  414c7e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414c80:	88c2      	ldrh	r2, [r0, #6]
  414c82:	8844      	ldrh	r4, [r0, #2]
  414c84:	1b12      	subs	r2, r2, r4
  414c86:	b292      	uxth	r2, r2
  414c88:	3201      	adds	r2, #1
  414c8a:	b292      	uxth	r2, r2
  414c8c:	88cc      	ldrh	r4, [r1, #6]
  414c8e:	8849      	ldrh	r1, [r1, #2]
  414c90:	1a61      	subs	r1, r4, r1
  414c92:	b289      	uxth	r1, r1
  414c94:	3101      	adds	r1, #1
  414c96:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414c98:	1a52      	subs	r2, r2, r1
  414c9a:	805a      	strh	r2, [r3, #2]
            break;
  414c9c:	e764      	b.n	414b68 <_lv_area_align+0x8c>
            res->x = 0;
  414c9e:	2200      	movs	r2, #0
  414ca0:	801a      	strh	r2, [r3, #0]
  414ca2:	88c4      	ldrh	r4, [r0, #6]
  414ca4:	8842      	ldrh	r2, [r0, #2]
  414ca6:	1aa4      	subs	r4, r4, r2
  414ca8:	b2a4      	uxth	r4, r4
  414caa:	3401      	adds	r4, #1
  414cac:	b224      	sxth	r4, r4
  414cae:	88ca      	ldrh	r2, [r1, #6]
  414cb0:	8849      	ldrh	r1, [r1, #2]
  414cb2:	1a52      	subs	r2, r2, r1
  414cb4:	b292      	uxth	r2, r2
  414cb6:	3201      	adds	r2, #1
  414cb8:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414cba:	4621      	mov	r1, r4
  414cbc:	2c00      	cmp	r4, #0
  414cbe:	db07      	blt.n	414cd0 <_lv_area_align+0x1f4>
  414cc0:	1049      	asrs	r1, r1, #1
  414cc2:	4614      	mov	r4, r2
  414cc4:	2a00      	cmp	r2, #0
  414cc6:	db05      	blt.n	414cd4 <_lv_area_align+0x1f8>
  414cc8:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  414ccc:	8059      	strh	r1, [r3, #2]
            break;
  414cce:	e74b      	b.n	414b68 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414cd0:	1c61      	adds	r1, r4, #1
  414cd2:	e7f5      	b.n	414cc0 <_lv_area_align+0x1e4>
  414cd4:	1c54      	adds	r4, r2, #1
  414cd6:	e7f7      	b.n	414cc8 <_lv_area_align+0x1ec>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414cd8:	8882      	ldrh	r2, [r0, #4]
  414cda:	8804      	ldrh	r4, [r0, #0]
  414cdc:	1b12      	subs	r2, r2, r4
  414cde:	b292      	uxth	r2, r2
  414ce0:	3201      	adds	r2, #1
  414ce2:	b292      	uxth	r2, r2
  414ce4:	888c      	ldrh	r4, [r1, #4]
  414ce6:	880d      	ldrh	r5, [r1, #0]
  414ce8:	1b64      	subs	r4, r4, r5
  414cea:	b2a4      	uxth	r4, r4
  414cec:	3401      	adds	r4, #1
  414cee:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414cf0:	1b12      	subs	r2, r2, r4
  414cf2:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414cf4:	88c4      	ldrh	r4, [r0, #6]
  414cf6:	8842      	ldrh	r2, [r0, #2]
  414cf8:	1aa4      	subs	r4, r4, r2
  414cfa:	b2a4      	uxth	r4, r4
  414cfc:	3401      	adds	r4, #1
  414cfe:	b224      	sxth	r4, r4
  414d00:	88ca      	ldrh	r2, [r1, #6]
  414d02:	8849      	ldrh	r1, [r1, #2]
  414d04:	1a52      	subs	r2, r2, r1
  414d06:	b292      	uxth	r2, r2
  414d08:	3201      	adds	r2, #1
  414d0a:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414d0c:	4621      	mov	r1, r4
  414d0e:	2c00      	cmp	r4, #0
  414d10:	db07      	blt.n	414d22 <_lv_area_align+0x246>
  414d12:	1049      	asrs	r1, r1, #1
  414d14:	4614      	mov	r4, r2
  414d16:	2a00      	cmp	r2, #0
  414d18:	db05      	blt.n	414d26 <_lv_area_align+0x24a>
  414d1a:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  414d1e:	8059      	strh	r1, [r3, #2]
            break;
  414d20:	e722      	b.n	414b68 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414d22:	1c61      	adds	r1, r4, #1
  414d24:	e7f5      	b.n	414d12 <_lv_area_align+0x236>
  414d26:	1c54      	adds	r4, r2, #1
  414d28:	e7f7      	b.n	414d1a <_lv_area_align+0x23e>
            res->x = 0;
  414d2a:	2200      	movs	r2, #0
  414d2c:	801a      	strh	r2, [r3, #0]
  414d2e:	88ca      	ldrh	r2, [r1, #6]
  414d30:	8849      	ldrh	r1, [r1, #2]
  414d32:	1a52      	subs	r2, r2, r1
  414d34:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  414d36:	43d2      	mvns	r2, r2
  414d38:	805a      	strh	r2, [r3, #2]
            break;
  414d3a:	e715      	b.n	414b68 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414d3c:	8884      	ldrh	r4, [r0, #4]
  414d3e:	8802      	ldrh	r2, [r0, #0]
  414d40:	1aa4      	subs	r4, r4, r2
  414d42:	b2a4      	uxth	r4, r4
  414d44:	3401      	adds	r4, #1
  414d46:	b224      	sxth	r4, r4
  414d48:	888a      	ldrh	r2, [r1, #4]
  414d4a:	880d      	ldrh	r5, [r1, #0]
  414d4c:	1b52      	subs	r2, r2, r5
  414d4e:	b292      	uxth	r2, r2
  414d50:	3201      	adds	r2, #1
  414d52:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414d54:	4625      	mov	r5, r4
  414d56:	2c00      	cmp	r4, #0
  414d58:	db0d      	blt.n	414d76 <_lv_area_align+0x29a>
  414d5a:	106d      	asrs	r5, r5, #1
  414d5c:	4614      	mov	r4, r2
  414d5e:	2a00      	cmp	r2, #0
  414d60:	db0b      	blt.n	414d7a <_lv_area_align+0x29e>
  414d62:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  414d66:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414d68:	88ca      	ldrh	r2, [r1, #6]
  414d6a:	8849      	ldrh	r1, [r1, #2]
  414d6c:	1a52      	subs	r2, r2, r1
  414d6e:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  414d70:	43d2      	mvns	r2, r2
  414d72:	805a      	strh	r2, [r3, #2]
            break;
  414d74:	e6f8      	b.n	414b68 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414d76:	1c65      	adds	r5, r4, #1
  414d78:	e7ef      	b.n	414d5a <_lv_area_align+0x27e>
  414d7a:	1c54      	adds	r4, r2, #1
  414d7c:	e7f1      	b.n	414d62 <_lv_area_align+0x286>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414d7e:	8882      	ldrh	r2, [r0, #4]
  414d80:	8804      	ldrh	r4, [r0, #0]
  414d82:	1b12      	subs	r2, r2, r4
  414d84:	b292      	uxth	r2, r2
  414d86:	3201      	adds	r2, #1
  414d88:	b292      	uxth	r2, r2
  414d8a:	888c      	ldrh	r4, [r1, #4]
  414d8c:	880d      	ldrh	r5, [r1, #0]
  414d8e:	1b64      	subs	r4, r4, r5
  414d90:	b2a4      	uxth	r4, r4
  414d92:	3401      	adds	r4, #1
  414d94:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414d96:	1b12      	subs	r2, r2, r4
  414d98:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414d9a:	88ca      	ldrh	r2, [r1, #6]
  414d9c:	8849      	ldrh	r1, [r1, #2]
  414d9e:	1a52      	subs	r2, r2, r1
  414da0:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  414da2:	43d2      	mvns	r2, r2
  414da4:	805a      	strh	r2, [r3, #2]
            break;
  414da6:	e6df      	b.n	414b68 <_lv_area_align+0x8c>
            res->x = 0;
  414da8:	2200      	movs	r2, #0
  414daa:	801a      	strh	r2, [r3, #0]
  414dac:	88c2      	ldrh	r2, [r0, #6]
  414dae:	8841      	ldrh	r1, [r0, #2]
  414db0:	1a52      	subs	r2, r2, r1
  414db2:	b292      	uxth	r2, r2
  414db4:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  414db6:	805a      	strh	r2, [r3, #2]
            break;
  414db8:	e6d6      	b.n	414b68 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414dba:	8884      	ldrh	r4, [r0, #4]
  414dbc:	8802      	ldrh	r2, [r0, #0]
  414dbe:	1aa4      	subs	r4, r4, r2
  414dc0:	b2a4      	uxth	r4, r4
  414dc2:	3401      	adds	r4, #1
  414dc4:	b224      	sxth	r4, r4
  414dc6:	888a      	ldrh	r2, [r1, #4]
  414dc8:	8809      	ldrh	r1, [r1, #0]
  414dca:	1a52      	subs	r2, r2, r1
  414dcc:	b292      	uxth	r2, r2
  414dce:	3201      	adds	r2, #1
  414dd0:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414dd2:	4621      	mov	r1, r4
  414dd4:	2c00      	cmp	r4, #0
  414dd6:	db0d      	blt.n	414df4 <_lv_area_align+0x318>
  414dd8:	1049      	asrs	r1, r1, #1
  414dda:	4614      	mov	r4, r2
  414ddc:	2a00      	cmp	r2, #0
  414dde:	db0b      	blt.n	414df8 <_lv_area_align+0x31c>
  414de0:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  414de4:	8019      	strh	r1, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414de6:	88c2      	ldrh	r2, [r0, #6]
  414de8:	8841      	ldrh	r1, [r0, #2]
  414dea:	1a52      	subs	r2, r2, r1
  414dec:	b292      	uxth	r2, r2
  414dee:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  414df0:	805a      	strh	r2, [r3, #2]
            break;
  414df2:	e6b9      	b.n	414b68 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414df4:	1c61      	adds	r1, r4, #1
  414df6:	e7ef      	b.n	414dd8 <_lv_area_align+0x2fc>
  414df8:	1c54      	adds	r4, r2, #1
  414dfa:	e7f1      	b.n	414de0 <_lv_area_align+0x304>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414dfc:	8882      	ldrh	r2, [r0, #4]
  414dfe:	8804      	ldrh	r4, [r0, #0]
  414e00:	1b12      	subs	r2, r2, r4
  414e02:	b292      	uxth	r2, r2
  414e04:	3201      	adds	r2, #1
  414e06:	b292      	uxth	r2, r2
  414e08:	888c      	ldrh	r4, [r1, #4]
  414e0a:	8809      	ldrh	r1, [r1, #0]
  414e0c:	1a61      	subs	r1, r4, r1
  414e0e:	b289      	uxth	r1, r1
  414e10:	3101      	adds	r1, #1
  414e12:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414e14:	1a52      	subs	r2, r2, r1
  414e16:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414e18:	88c2      	ldrh	r2, [r0, #6]
  414e1a:	8841      	ldrh	r1, [r0, #2]
  414e1c:	1a52      	subs	r2, r2, r1
  414e1e:	b292      	uxth	r2, r2
  414e20:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  414e22:	805a      	strh	r2, [r3, #2]
            break;
  414e24:	e6a0      	b.n	414b68 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414e26:	888a      	ldrh	r2, [r1, #4]
  414e28:	8809      	ldrh	r1, [r1, #0]
  414e2a:	1a52      	subs	r2, r2, r1
  414e2c:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  414e2e:	43d2      	mvns	r2, r2
  414e30:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  414e32:	2200      	movs	r2, #0
  414e34:	805a      	strh	r2, [r3, #2]
            break;
  414e36:	e697      	b.n	414b68 <_lv_area_align+0x8c>
  414e38:	888a      	ldrh	r2, [r1, #4]
  414e3a:	880c      	ldrh	r4, [r1, #0]
  414e3c:	1b12      	subs	r2, r2, r4
  414e3e:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  414e40:	43d2      	mvns	r2, r2
  414e42:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414e44:	88c4      	ldrh	r4, [r0, #6]
  414e46:	8842      	ldrh	r2, [r0, #2]
  414e48:	1aa4      	subs	r4, r4, r2
  414e4a:	b2a4      	uxth	r4, r4
  414e4c:	3401      	adds	r4, #1
  414e4e:	b224      	sxth	r4, r4
  414e50:	88ca      	ldrh	r2, [r1, #6]
  414e52:	8849      	ldrh	r1, [r1, #2]
  414e54:	1a52      	subs	r2, r2, r1
  414e56:	b292      	uxth	r2, r2
  414e58:	3201      	adds	r2, #1
  414e5a:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414e5c:	4621      	mov	r1, r4
  414e5e:	2c00      	cmp	r4, #0
  414e60:	db07      	blt.n	414e72 <_lv_area_align+0x396>
  414e62:	1049      	asrs	r1, r1, #1
  414e64:	4614      	mov	r4, r2
  414e66:	2a00      	cmp	r2, #0
  414e68:	db05      	blt.n	414e76 <_lv_area_align+0x39a>
  414e6a:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  414e6e:	8059      	strh	r1, [r3, #2]
            break;
  414e70:	e67a      	b.n	414b68 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414e72:	1c61      	adds	r1, r4, #1
  414e74:	e7f5      	b.n	414e62 <_lv_area_align+0x386>
  414e76:	1c54      	adds	r4, r2, #1
  414e78:	e7f7      	b.n	414e6a <_lv_area_align+0x38e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414e7a:	888a      	ldrh	r2, [r1, #4]
  414e7c:	880c      	ldrh	r4, [r1, #0]
  414e7e:	1b12      	subs	r2, r2, r4
  414e80:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  414e82:	43d2      	mvns	r2, r2
  414e84:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414e86:	88c2      	ldrh	r2, [r0, #6]
  414e88:	8844      	ldrh	r4, [r0, #2]
  414e8a:	1b12      	subs	r2, r2, r4
  414e8c:	b292      	uxth	r2, r2
  414e8e:	3201      	adds	r2, #1
  414e90:	b292      	uxth	r2, r2
  414e92:	88cc      	ldrh	r4, [r1, #6]
  414e94:	8849      	ldrh	r1, [r1, #2]
  414e96:	1a61      	subs	r1, r4, r1
  414e98:	b289      	uxth	r1, r1
  414e9a:	3101      	adds	r1, #1
  414e9c:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414e9e:	1a52      	subs	r2, r2, r1
  414ea0:	805a      	strh	r2, [r3, #2]
            break;
  414ea2:	e661      	b.n	414b68 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414ea4:	8882      	ldrh	r2, [r0, #4]
  414ea6:	8801      	ldrh	r1, [r0, #0]
  414ea8:	1a52      	subs	r2, r2, r1
  414eaa:	b292      	uxth	r2, r2
  414eac:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  414eae:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  414eb0:	2200      	movs	r2, #0
  414eb2:	805a      	strh	r2, [r3, #2]
            break;
  414eb4:	e658      	b.n	414b68 <_lv_area_align+0x8c>
  414eb6:	8882      	ldrh	r2, [r0, #4]
  414eb8:	8804      	ldrh	r4, [r0, #0]
  414eba:	1b12      	subs	r2, r2, r4
  414ebc:	b292      	uxth	r2, r2
  414ebe:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  414ec0:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414ec2:	88c4      	ldrh	r4, [r0, #6]
  414ec4:	8842      	ldrh	r2, [r0, #2]
  414ec6:	1aa4      	subs	r4, r4, r2
  414ec8:	b2a4      	uxth	r4, r4
  414eca:	3401      	adds	r4, #1
  414ecc:	b224      	sxth	r4, r4
  414ece:	88ca      	ldrh	r2, [r1, #6]
  414ed0:	8849      	ldrh	r1, [r1, #2]
  414ed2:	1a52      	subs	r2, r2, r1
  414ed4:	b292      	uxth	r2, r2
  414ed6:	3201      	adds	r2, #1
  414ed8:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414eda:	4621      	mov	r1, r4
  414edc:	2c00      	cmp	r4, #0
  414ede:	db07      	blt.n	414ef0 <_lv_area_align+0x414>
  414ee0:	1049      	asrs	r1, r1, #1
  414ee2:	4614      	mov	r4, r2
  414ee4:	2a00      	cmp	r2, #0
  414ee6:	db05      	blt.n	414ef4 <_lv_area_align+0x418>
  414ee8:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  414eec:	8059      	strh	r1, [r3, #2]
            break;
  414eee:	e63b      	b.n	414b68 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414ef0:	1c61      	adds	r1, r4, #1
  414ef2:	e7f5      	b.n	414ee0 <_lv_area_align+0x404>
  414ef4:	1c54      	adds	r4, r2, #1
  414ef6:	e7f7      	b.n	414ee8 <_lv_area_align+0x40c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414ef8:	8882      	ldrh	r2, [r0, #4]
  414efa:	8804      	ldrh	r4, [r0, #0]
  414efc:	1b12      	subs	r2, r2, r4
  414efe:	b292      	uxth	r2, r2
  414f00:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  414f02:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414f04:	88c2      	ldrh	r2, [r0, #6]
  414f06:	8844      	ldrh	r4, [r0, #2]
  414f08:	1b12      	subs	r2, r2, r4
  414f0a:	b292      	uxth	r2, r2
  414f0c:	3201      	adds	r2, #1
  414f0e:	b292      	uxth	r2, r2
  414f10:	88cc      	ldrh	r4, [r1, #6]
  414f12:	8849      	ldrh	r1, [r1, #2]
  414f14:	1a61      	subs	r1, r4, r1
  414f16:	b289      	uxth	r1, r1
  414f18:	3101      	adds	r1, #1
  414f1a:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414f1c:	1a52      	subs	r2, r2, r1
  414f1e:	805a      	strh	r2, [r3, #2]
            break;
  414f20:	e622      	b.n	414b68 <_lv_area_align+0x8c>

00414f22 <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
  414f22:	f010 0f03 	tst.w	r0, #3
  414f26:	d002      	beq.n	414f2e <lv_color_fill+0xc>
        *buf = color;
  414f28:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
  414f2c:	3a01      	subs	r2, #1
    }

    uint32_t c32 = color.full + (color.full << 16);
  414f2e:	b28b      	uxth	r3, r1
  414f30:	eb03 4303 	add.w	r3, r3, r3, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
  414f34:	e009      	b.n	414f4a <lv_color_fill+0x28>
        *buf32 = c32;
  414f36:	6003      	str	r3, [r0, #0]
        buf32++;
        *buf32 = c32;
  414f38:	6043      	str	r3, [r0, #4]
        buf32++;
        *buf32 = c32;
  414f3a:	6083      	str	r3, [r0, #8]
        buf32++;
        *buf32 = c32;
  414f3c:	60c3      	str	r3, [r0, #12]
        buf32++;

        *buf32 = c32;
  414f3e:	6103      	str	r3, [r0, #16]
        buf32++;
        *buf32 = c32;
  414f40:	6143      	str	r3, [r0, #20]
        buf32++;
        *buf32 = c32;
  414f42:	6183      	str	r3, [r0, #24]
        buf32++;
        *buf32 = c32;
  414f44:	61c3      	str	r3, [r0, #28]
        buf32++;
  414f46:	3020      	adds	r0, #32

        px_num -= 16;
  414f48:	3a10      	subs	r2, #16
    while(px_num > 16) {
  414f4a:	2a10      	cmp	r2, #16
  414f4c:	d8f3      	bhi.n	414f36 <lv_color_fill+0x14>
  414f4e:	e002      	b.n	414f56 <lv_color_fill+0x34>
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
        *buf = color;
  414f50:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num --;
  414f54:	3a01      	subs	r2, #1
    while(px_num) {
  414f56:	2a00      	cmp	r2, #0
  414f58:	d1fa      	bne.n	414f50 <lv_color_fill+0x2e>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
  414f5a:	4770      	bx	lr

00414f5c <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
  414f5c:	b4f0      	push	{r4, r5, r6, r7}
  414f5e:	4602      	mov	r2, r0
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
  414f60:	4b23      	ldr	r3, [pc, #140]	; (414ff0 <lv_color_lighten+0x94>)
  414f62:	881c      	ldrh	r4, [r3, #0]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  414f64:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  414f68:	f3c2 00c4 	ubfx	r0, r2, #3, #5
  414f6c:	f1c1 05ff 	rsb	r5, r1, #255	; 0xff
  414f70:	fb05 f000 	mul.w	r0, r5, r0
  414f74:	fb01 0303 	mla	r3, r1, r3, r0
  414f78:	3380      	adds	r3, #128	; 0x80
  414f7a:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  414f7e:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  414f82:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  414f86:	f04f 0000 	mov.w	r0, #0
  414f8a:	f363 00c7 	bfi	r0, r3, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  414f8e:	f004 0607 	and.w	r6, r4, #7
  414f92:	f3c4 3342 	ubfx	r3, r4, #13, #3
  414f96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  414f9a:	f002 0707 	and.w	r7, r2, #7
  414f9e:	f3c2 3642 	ubfx	r6, r2, #13, #3
  414fa2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  414fa6:	fb06 f605 	mul.w	r6, r6, r5
  414faa:	fb03 6301 	mla	r3, r3, r1, r6
  414fae:	3380      	adds	r3, #128	; 0x80
  414fb0:	eb03 2603 	add.w	r6, r3, r3, lsl #8
  414fb4:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
  414fb8:	f3c3 6682 	ubfx	r6, r3, #26, #3
  414fbc:	f366 0002 	bfi	r0, r6, #0, #3
  414fc0:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  414fc4:	f363 304f 	bfi	r0, r3, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  414fc8:	f3c4 2404 	ubfx	r4, r4, #8, #5
  414fcc:	f3c2 2204 	ubfx	r2, r2, #8, #5
  414fd0:	fb02 f505 	mul.w	r5, r2, r5
  414fd4:	fb04 5101 	mla	r1, r4, r1, r5
  414fd8:	3180      	adds	r1, #128	; 0x80
  414fda:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  414fde:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
  414fe2:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  414fe6:	f361 200c 	bfi	r0, r1, #8, #5
}
  414fea:	bcf0      	pop	{r4, r5, r6, r7}
  414fec:	4770      	bx	lr
  414fee:	bf00      	nop
  414ff0:	00424820 	.word	0x00424820

00414ff4 <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
  414ff4:	b410      	push	{r4}
  414ff6:	4603      	mov	r3, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  414ff8:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  414ffc:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
  415000:	fb01 f202 	mul.w	r2, r1, r2
  415004:	3280      	adds	r2, #128	; 0x80
  415006:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  41500a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  41500e:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  415012:	f04f 0000 	mov.w	r0, #0
  415016:	f362 00c7 	bfi	r0, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41501a:	f003 0407 	and.w	r4, r3, #7
  41501e:	f3c3 3242 	ubfx	r2, r3, #13, #3
  415022:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  415026:	fb02 f201 	mul.w	r2, r2, r1
  41502a:	3280      	adds	r2, #128	; 0x80
  41502c:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  415030:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  415034:	f3c2 6482 	ubfx	r4, r2, #26, #3
  415038:	f364 0002 	bfi	r0, r4, #0, #3
  41503c:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  415040:	f362 304f 	bfi	r0, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  415044:	f3c3 2304 	ubfx	r3, r3, #8, #5
  415048:	fb03 f301 	mul.w	r3, r3, r1
  41504c:	3380      	adds	r3, #128	; 0x80
  41504e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  415052:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  415056:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41505a:	f363 200c 	bfi	r0, r3, #8, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
  41505e:	f85d 4b04 	ldr.w	r4, [sp], #4
  415062:	4770      	bx	lr

00415064 <lv_debug_check_null>:
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
    if(p) return true;
  415064:	b108      	cbz	r0, 41506a <lv_debug_check_null+0x6>
  415066:	2001      	movs	r0, #1
  415068:	4770      	bx	lr

    return false;
  41506a:	2000      	movs	r0, #0
}
  41506c:	4770      	bx	lr
	...

00415070 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
  415070:	b570      	push	{r4, r5, r6, lr}
  415072:	b0c0      	sub	sp, #256	; 0x100
  415074:	4606      	mov	r6, r0
  415076:	4614      	mov	r4, r2
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
  415078:	4b15      	ldr	r3, [pc, #84]	; (4150d0 <lv_debug_log_error+0x60>)
  41507a:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
  41507c:	28e5      	cmp	r0, #229	; 0xe5
  41507e:	d901      	bls.n	415084 <lv_debug_log_error+0x14>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
  415080:	b040      	add	sp, #256	; 0x100
  415082:	bd70      	pop	{r4, r5, r6, pc}
  415084:	4605      	mov	r5, r0
        _lv_memcpy(bufp, msg, msg_len);
  415086:	4602      	mov	r2, r0
  415088:	4631      	mov	r1, r6
  41508a:	4668      	mov	r0, sp
  41508c:	4b11      	ldr	r3, [pc, #68]	; (4150d4 <lv_debug_log_error+0x64>)
  41508e:	4798      	blx	r3
        bufp += msg_len;
  415090:	eb0d 0105 	add.w	r1, sp, r5
        *bufp = ' ';
  415094:	2320      	movs	r3, #32
  415096:	f80d 3005 	strb.w	r3, [sp, r5]
        *bufp = '(';
  41509a:	2328      	movs	r3, #40	; 0x28
  41509c:	704b      	strb	r3, [r1, #1]
        *bufp = '0';
  41509e:	2330      	movs	r3, #48	; 0x30
  4150a0:	708b      	strb	r3, [r1, #2]
        *bufp = 'x';
  4150a2:	2378      	movs	r3, #120	; 0x78
  4150a4:	70cb      	strb	r3, [r1, #3]
        bufp ++;
  4150a6:	3104      	adds	r1, #4
        for(i = value_len * 2 - 1; i >= 0; i--) {
  4150a8:	2307      	movs	r3, #7
  4150aa:	e00a      	b.n	4150c2 <lv_debug_log_error+0x52>
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
  4150ac:	009a      	lsls	r2, r3, #2
  4150ae:	fa24 f202 	lsr.w	r2, r4, r2
  4150b2:	f002 020f 	and.w	r2, r2, #15
            *bufp = hex[x];
  4150b6:	4808      	ldr	r0, [pc, #32]	; (4150d8 <lv_debug_log_error+0x68>)
  4150b8:	5c82      	ldrb	r2, [r0, r2]
  4150ba:	f801 2b01 	strb.w	r2, [r1], #1
        for(i = value_len * 2 - 1; i >= 0; i--) {
  4150be:	3b01      	subs	r3, #1
  4150c0:	b25b      	sxtb	r3, r3
  4150c2:	2b00      	cmp	r3, #0
  4150c4:	daf2      	bge.n	4150ac <lv_debug_log_error+0x3c>
        *bufp = ')';
  4150c6:	2329      	movs	r3, #41	; 0x29
  4150c8:	700b      	strb	r3, [r1, #0]
        *bufp = '\0';
  4150ca:	2300      	movs	r3, #0
  4150cc:	704b      	strb	r3, [r1, #1]
}
  4150ce:	e7d7      	b.n	415080 <lv_debug_log_error+0x10>
  4150d0:	0041ef81 	.word	0x0041ef81
  4150d4:	0041597d 	.word	0x0041597d
  4150d8:	00424824 	.word	0x00424824

004150dc <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
  4150dc:	3001      	adds	r0, #1

    while(*path != '\0') {
  4150de:	e000      	b.n	4150e2 <lv_fs_get_real_path+0x6>
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
  4150e0:	3001      	adds	r0, #1
    while(*path != '\0') {
  4150e2:	7803      	ldrb	r3, [r0, #0]
  4150e4:	b12b      	cbz	r3, 4150f2 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
  4150e6:	2b5c      	cmp	r3, #92	; 0x5c
  4150e8:	bf18      	it	ne
  4150ea:	2b3a      	cmpne	r3, #58	; 0x3a
  4150ec:	d0f8      	beq.n	4150e0 <lv_fs_get_real_path+0x4>
  4150ee:	2b2f      	cmp	r3, #47	; 0x2f
  4150f0:	d0f6      	beq.n	4150e0 <lv_fs_get_real_path+0x4>
            break;
        }
    }

    return path;
}
  4150f2:	4770      	bx	lr

004150f4 <_lv_fs_init>:
{
  4150f4:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
  4150f6:	2144      	movs	r1, #68	; 0x44
  4150f8:	4801      	ldr	r0, [pc, #4]	; (415100 <_lv_fs_init+0xc>)
  4150fa:	4b02      	ldr	r3, [pc, #8]	; (415104 <_lv_fs_init+0x10>)
  4150fc:	4798      	blx	r3
  4150fe:	bd08      	pop	{r3, pc}
  415100:	2043a21c 	.word	0x2043a21c
  415104:	004152cb 	.word	0x004152cb

00415108 <lv_fs_close>:
{
  415108:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  41510a:	6843      	ldr	r3, [r0, #4]
  41510c:	b173      	cbz	r3, 41512c <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
  41510e:	691a      	ldr	r2, [r3, #16]
  415110:	b172      	cbz	r2, 415130 <lv_fs_close+0x28>
  415112:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
  415114:	6801      	ldr	r1, [r0, #0]
  415116:	4618      	mov	r0, r3
  415118:	4790      	blx	r2
  41511a:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
  41511c:	6820      	ldr	r0, [r4, #0]
  41511e:	4b05      	ldr	r3, [pc, #20]	; (415134 <lv_fs_close+0x2c>)
  415120:	4798      	blx	r3
    file_p->file_d = NULL;
  415122:	2300      	movs	r3, #0
  415124:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
  415126:	6063      	str	r3, [r4, #4]
}
  415128:	4628      	mov	r0, r5
  41512a:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  41512c:	250b      	movs	r5, #11
  41512e:	e7fb      	b.n	415128 <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
  415130:	2509      	movs	r5, #9
  415132:	e7f9      	b.n	415128 <lv_fs_close+0x20>
  415134:	00415831 	.word	0x00415831

00415138 <lv_fs_read>:
{
  415138:	b5f0      	push	{r4, r5, r6, r7, lr}
  41513a:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
  41513c:	461e      	mov	r6, r3
  41513e:	b10b      	cbz	r3, 415144 <lv_fs_read+0xc>
  415140:	2300      	movs	r3, #0
  415142:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  415144:	6845      	ldr	r5, [r0, #4]
  415146:	b18d      	cbz	r5, 41516c <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  415148:	69af      	ldr	r7, [r5, #24]
  41514a:	b18f      	cbz	r7, 415170 <lv_fs_read+0x38>
  41514c:	4613      	mov	r3, r2
  41514e:	460a      	mov	r2, r1
  415150:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
  415152:	a804      	add	r0, sp, #16
  415154:	2100      	movs	r1, #0
  415156:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
  41515a:	6821      	ldr	r1, [r4, #0]
  41515c:	9000      	str	r0, [sp, #0]
  41515e:	4628      	mov	r0, r5
  415160:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
  415162:	b10e      	cbz	r6, 415168 <lv_fs_read+0x30>
  415164:	9b03      	ldr	r3, [sp, #12]
  415166:	6033      	str	r3, [r6, #0]
}
  415168:	b005      	add	sp, #20
  41516a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  41516c:	200b      	movs	r0, #11
  41516e:	e7fb      	b.n	415168 <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  415170:	2009      	movs	r0, #9
  415172:	e7f9      	b.n	415168 <lv_fs_read+0x30>

00415174 <lv_fs_seek>:
{
  415174:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  415176:	6844      	ldr	r4, [r0, #4]
  415178:	b134      	cbz	r4, 415188 <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
  41517a:	6a25      	ldr	r5, [r4, #32]
  41517c:	b135      	cbz	r5, 41518c <lv_fs_seek+0x18>
  41517e:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
  415180:	6801      	ldr	r1, [r0, #0]
  415182:	4620      	mov	r0, r4
  415184:	47a8      	blx	r5
    return res;
  415186:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  415188:	200b      	movs	r0, #11
  41518a:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
  41518c:	2009      	movs	r0, #9
}
  41518e:	bd38      	pop	{r3, r4, r5, pc}

00415190 <lv_fs_get_drv>:
{
  415190:	b510      	push	{r4, lr}
  415192:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  415194:	4806      	ldr	r0, [pc, #24]	; (4151b0 <lv_fs_get_drv+0x20>)
  415196:	4b07      	ldr	r3, [pc, #28]	; (4151b4 <lv_fs_get_drv+0x24>)
  415198:	4798      	blx	r3
  41519a:	b138      	cbz	r0, 4151ac <lv_fs_get_drv+0x1c>
        if(drv->letter == letter) {
  41519c:	7803      	ldrb	r3, [r0, #0]
  41519e:	42a3      	cmp	r3, r4
  4151a0:	d004      	beq.n	4151ac <lv_fs_get_drv+0x1c>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  4151a2:	4601      	mov	r1, r0
  4151a4:	4802      	ldr	r0, [pc, #8]	; (4151b0 <lv_fs_get_drv+0x20>)
  4151a6:	4b04      	ldr	r3, [pc, #16]	; (4151b8 <lv_fs_get_drv+0x28>)
  4151a8:	4798      	blx	r3
  4151aa:	e7f6      	b.n	41519a <lv_fs_get_drv+0xa>
}
  4151ac:	bd10      	pop	{r4, pc}
  4151ae:	bf00      	nop
  4151b0:	2043a21c 	.word	0x2043a21c
  4151b4:	00415375 	.word	0x00415375
  4151b8:	00415389 	.word	0x00415389

004151bc <lv_fs_open>:
{
  4151bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    file_p->drv    = NULL;
  4151c0:	2400      	movs	r4, #0
  4151c2:	6044      	str	r4, [r0, #4]
    file_p->file_d = NULL;
  4151c4:	6004      	str	r4, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  4151c6:	2900      	cmp	r1, #0
  4151c8:	d044      	beq.n	415254 <lv_fs_open+0x98>
  4151ca:	460d      	mov	r5, r1
  4151cc:	4690      	mov	r8, r2
  4151ce:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
  4151d0:	7808      	ldrb	r0, [r1, #0]
  4151d2:	4b23      	ldr	r3, [pc, #140]	; (415260 <lv_fs_open+0xa4>)
  4151d4:	4798      	blx	r3
  4151d6:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
  4151d8:	2800      	cmp	r0, #0
  4151da:	d03f      	beq.n	41525c <lv_fs_open+0xa0>
    if(file_p->drv->ready_cb != NULL) {
  4151dc:	6883      	ldr	r3, [r0, #8]
  4151de:	b10b      	cbz	r3, 4151e4 <lv_fs_open+0x28>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
  4151e0:	4798      	blx	r3
  4151e2:	b1a0      	cbz	r0, 41520e <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
  4151e4:	6867      	ldr	r7, [r4, #4]
  4151e6:	68fe      	ldr	r6, [r7, #12]
  4151e8:	b1ae      	cbz	r6, 415216 <lv_fs_open+0x5a>
    const char * real_path = lv_fs_get_real_path(path);
  4151ea:	4628      	mov	r0, r5
  4151ec:	4b1d      	ldr	r3, [pc, #116]	; (415264 <lv_fs_open+0xa8>)
  4151ee:	4798      	blx	r3
  4151f0:	4605      	mov	r5, r0
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
  4151f2:	8878      	ldrh	r0, [r7, #2]
  4151f4:	b198      	cbz	r0, 41521e <lv_fs_open+0x62>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
  4151f6:	4b1c      	ldr	r3, [pc, #112]	; (415268 <lv_fs_open+0xac>)
  4151f8:	4798      	blx	r3
  4151fa:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
  4151fc:	4b1b      	ldr	r3, [pc, #108]	; (41526c <lv_fs_open+0xb0>)
  4151fe:	4798      	blx	r3
  415200:	b1a0      	cbz	r0, 41522c <lv_fs_open+0x70>
    if(file_p->file_d == NULL) {
  415202:	6821      	ldr	r1, [r4, #0]
  415204:	b9c1      	cbnz	r1, 415238 <lv_fs_open+0x7c>
        file_p->drv = NULL;
  415206:	2300      	movs	r3, #0
  415208:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
  41520a:	250a      	movs	r5, #10
  41520c:	e023      	b.n	415256 <lv_fs_open+0x9a>
            file_p->drv = NULL;
  41520e:	2300      	movs	r3, #0
  415210:	6063      	str	r3, [r4, #4]
            return LV_FS_RES_HW_ERR;
  415212:	2501      	movs	r5, #1
  415214:	e01f      	b.n	415256 <lv_fs_open+0x9a>
        file_p->drv = NULL;
  415216:	2300      	movs	r3, #0
  415218:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
  41521a:	2509      	movs	r5, #9
  41521c:	e01b      	b.n	415256 <lv_fs_open+0x9a>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
  41521e:	4643      	mov	r3, r8
  415220:	462a      	mov	r2, r5
  415222:	4621      	mov	r1, r4
  415224:	4638      	mov	r0, r7
  415226:	47b0      	blx	r6
  415228:	4605      	mov	r5, r0
  41522a:	e014      	b.n	415256 <lv_fs_open+0x9a>
    LV_ASSERT_MEM(file_p->file_d);
  41522c:	6822      	ldr	r2, [r4, #0]
  41522e:	2300      	movs	r3, #0
  415230:	480f      	ldr	r0, [pc, #60]	; (415270 <lv_fs_open+0xb4>)
  415232:	4910      	ldr	r1, [pc, #64]	; (415274 <lv_fs_open+0xb8>)
  415234:	4788      	blx	r1
  415236:	e7fe      	b.n	415236 <lv_fs_open+0x7a>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
  415238:	6860      	ldr	r0, [r4, #4]
  41523a:	68c7      	ldr	r7, [r0, #12]
  41523c:	4643      	mov	r3, r8
  41523e:	462a      	mov	r2, r5
  415240:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
  415242:	4605      	mov	r5, r0
  415244:	b138      	cbz	r0, 415256 <lv_fs_open+0x9a>
        lv_mem_free(file_p->file_d);
  415246:	6820      	ldr	r0, [r4, #0]
  415248:	4b0b      	ldr	r3, [pc, #44]	; (415278 <lv_fs_open+0xbc>)
  41524a:	4798      	blx	r3
        file_p->file_d = NULL;
  41524c:	2300      	movs	r3, #0
  41524e:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
  415250:	6063      	str	r3, [r4, #4]
  415252:	e000      	b.n	415256 <lv_fs_open+0x9a>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  415254:	250b      	movs	r5, #11
}
  415256:	4628      	mov	r0, r5
  415258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LV_FS_RES_NOT_EX;
  41525c:	2503      	movs	r5, #3
  41525e:	e7fa      	b.n	415256 <lv_fs_open+0x9a>
  415260:	00415191 	.word	0x00415191
  415264:	004150dd 	.word	0x004150dd
  415268:	0041576d 	.word	0x0041576d
  41526c:	00415065 	.word	0x00415065
  415270:	00421264 	.word	0x00421264
  415274:	00415071 	.word	0x00415071
  415278:	00415831 	.word	0x00415831

0041527c <lv_fs_get_ext>:
{
  41527c:	b510      	push	{r4, lr}
  41527e:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
  415280:	4b09      	ldr	r3, [pc, #36]	; (4152a8 <lv_fs_get_ext+0x2c>)
  415282:	4798      	blx	r3
  415284:	b158      	cbz	r0, 41529e <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
  415286:	5c23      	ldrb	r3, [r4, r0]
  415288:	2b2e      	cmp	r3, #46	; 0x2e
  41528a:	d005      	beq.n	415298 <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
  41528c:	2b5c      	cmp	r3, #92	; 0x5c
  41528e:	bf18      	it	ne
  415290:	2b2f      	cmpne	r3, #47	; 0x2f
  415292:	d006      	beq.n	4152a2 <lv_fs_get_ext+0x26>
    for(i = strlen(fn); i > 0; i--) {
  415294:	3801      	subs	r0, #1
  415296:	e7f5      	b.n	415284 <lv_fs_get_ext+0x8>
            return &fn[i + 1];
  415298:	3001      	adds	r0, #1
  41529a:	4420      	add	r0, r4
  41529c:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
  41529e:	4803      	ldr	r0, [pc, #12]	; (4152ac <lv_fs_get_ext+0x30>)
  4152a0:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
  4152a2:	4802      	ldr	r0, [pc, #8]	; (4152ac <lv_fs_get_ext+0x30>)
}
  4152a4:	bd10      	pop	{r4, pc}
  4152a6:	bf00      	nop
  4152a8:	0041ef81 	.word	0x0041ef81
  4152ac:	00456e10 	.word	0x00456e10

004152b0 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
  4152b0:	460b      	mov	r3, r1
  4152b2:	b109      	cbz	r1, 4152b8 <node_set_prev+0x8>

    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_PREV_P_OFFSET(ll_p);
  4152b4:	6801      	ldr	r1, [r0, #0]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
  4152b6:	505a      	str	r2, [r3, r1]
  4152b8:	4770      	bx	lr

004152ba <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
  4152ba:	b129      	cbz	r1, 4152c8 <node_set_next+0xe>
{
  4152bc:	b410      	push	{r4}
    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_NEXT_P_OFFSET(ll_p);
  4152be:	6803      	ldr	r3, [r0, #0]
  4152c0:	3304      	adds	r3, #4
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
  4152c2:	50ca      	str	r2, [r1, r3]
}
  4152c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4152c8:	4770      	bx	lr

004152ca <_lv_ll_init>:
    ll_p->head = NULL;
  4152ca:	2300      	movs	r3, #0
  4152cc:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
  4152ce:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
  4152d0:	3103      	adds	r1, #3
  4152d2:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
  4152d6:	6001      	str	r1, [r0, #0]
  4152d8:	4770      	bx	lr
	...

004152dc <_lv_ll_ins_head>:
{
  4152dc:	b538      	push	{r3, r4, r5, lr}
  4152de:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  4152e0:	6800      	ldr	r0, [r0, #0]
  4152e2:	3008      	adds	r0, #8
  4152e4:	4b0d      	ldr	r3, [pc, #52]	; (41531c <_lv_ll_ins_head+0x40>)
  4152e6:	4798      	blx	r3
    if(n_new != NULL) {
  4152e8:	4605      	mov	r5, r0
  4152ea:	b190      	cbz	r0, 415312 <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
  4152ec:	2200      	movs	r2, #0
  4152ee:	4601      	mov	r1, r0
  4152f0:	4620      	mov	r0, r4
  4152f2:	4b0b      	ldr	r3, [pc, #44]	; (415320 <_lv_ll_ins_head+0x44>)
  4152f4:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
  4152f6:	6862      	ldr	r2, [r4, #4]
  4152f8:	4629      	mov	r1, r5
  4152fa:	4620      	mov	r0, r4
  4152fc:	4b09      	ldr	r3, [pc, #36]	; (415324 <_lv_ll_ins_head+0x48>)
  4152fe:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
  415300:	6861      	ldr	r1, [r4, #4]
  415302:	b119      	cbz	r1, 41530c <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
  415304:	462a      	mov	r2, r5
  415306:	4620      	mov	r0, r4
  415308:	4b05      	ldr	r3, [pc, #20]	; (415320 <_lv_ll_ins_head+0x44>)
  41530a:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
  41530c:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
  41530e:	68a3      	ldr	r3, [r4, #8]
  415310:	b10b      	cbz	r3, 415316 <_lv_ll_ins_head+0x3a>
}
  415312:	4628      	mov	r0, r5
  415314:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
  415316:	60a5      	str	r5, [r4, #8]
  415318:	e7fb      	b.n	415312 <_lv_ll_ins_head+0x36>
  41531a:	bf00      	nop
  41531c:	0041576d 	.word	0x0041576d
  415320:	004152b1 	.word	0x004152b1
  415324:	004152bb 	.word	0x004152bb

00415328 <_lv_ll_ins_tail>:
{
  415328:	b538      	push	{r3, r4, r5, lr}
  41532a:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  41532c:	6800      	ldr	r0, [r0, #0]
  41532e:	3008      	adds	r0, #8
  415330:	4b0d      	ldr	r3, [pc, #52]	; (415368 <_lv_ll_ins_tail+0x40>)
  415332:	4798      	blx	r3
    if(n_new != NULL) {
  415334:	4605      	mov	r5, r0
  415336:	b190      	cbz	r0, 41535e <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
  415338:	2200      	movs	r2, #0
  41533a:	4601      	mov	r1, r0
  41533c:	4620      	mov	r0, r4
  41533e:	4b0b      	ldr	r3, [pc, #44]	; (41536c <_lv_ll_ins_tail+0x44>)
  415340:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
  415342:	68a2      	ldr	r2, [r4, #8]
  415344:	4629      	mov	r1, r5
  415346:	4620      	mov	r0, r4
  415348:	4b09      	ldr	r3, [pc, #36]	; (415370 <_lv_ll_ins_tail+0x48>)
  41534a:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
  41534c:	68a1      	ldr	r1, [r4, #8]
  41534e:	b119      	cbz	r1, 415358 <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
  415350:	462a      	mov	r2, r5
  415352:	4620      	mov	r0, r4
  415354:	4b05      	ldr	r3, [pc, #20]	; (41536c <_lv_ll_ins_tail+0x44>)
  415356:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
  415358:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
  41535a:	6863      	ldr	r3, [r4, #4]
  41535c:	b10b      	cbz	r3, 415362 <_lv_ll_ins_tail+0x3a>
}
  41535e:	4628      	mov	r0, r5
  415360:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
  415362:	6065      	str	r5, [r4, #4]
  415364:	e7fb      	b.n	41535e <_lv_ll_ins_tail+0x36>
  415366:	bf00      	nop
  415368:	0041576d 	.word	0x0041576d
  41536c:	004152bb 	.word	0x004152bb
  415370:	004152b1 	.word	0x004152b1

00415374 <_lv_ll_get_head>:
    if(ll_p != NULL) {
  415374:	b108      	cbz	r0, 41537a <_lv_ll_get_head+0x6>
        head = ll_p->head;
  415376:	6840      	ldr	r0, [r0, #4]
  415378:	4770      	bx	lr
    void * head = NULL;
  41537a:	2000      	movs	r0, #0
}
  41537c:	4770      	bx	lr

0041537e <_lv_ll_get_tail>:
    if(ll_p != NULL) {
  41537e:	b108      	cbz	r0, 415384 <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
  415380:	6880      	ldr	r0, [r0, #8]
  415382:	4770      	bx	lr
    void * tail = NULL;
  415384:	2000      	movs	r0, #0
}
  415386:	4770      	bx	lr

00415388 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
  415388:	b118      	cbz	r0, 415392 <_lv_ll_get_next+0xa>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
  41538a:	6803      	ldr	r3, [r0, #0]
  41538c:	3304      	adds	r3, #4
    return *((lv_ll_node_t **)n_act_d);
  41538e:	58c8      	ldr	r0, [r1, r3]
  415390:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  415392:	2000      	movs	r0, #0
}
  415394:	4770      	bx	lr

00415396 <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
  415396:	b110      	cbz	r0, 41539e <_lv_ll_get_prev+0x8>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
  415398:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
  41539a:	58c8      	ldr	r0, [r1, r3]
  41539c:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  41539e:	2000      	movs	r0, #0
}
  4153a0:	4770      	bx	lr
	...

004153a4 <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
  4153a4:	2900      	cmp	r1, #0
  4153a6:	bf18      	it	ne
  4153a8:	2800      	cmpne	r0, #0
  4153aa:	d02f      	beq.n	41540c <_lv_ll_ins_prev+0x68>
{
  4153ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4153b0:	4604      	mov	r4, r0
  4153b2:	4688      	mov	r8, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
  4153b4:	4b18      	ldr	r3, [pc, #96]	; (415418 <_lv_ll_ins_prev+0x74>)
  4153b6:	4798      	blx	r3
  4153b8:	4580      	cmp	r8, r0
  4153ba:	d01f      	beq.n	4153fc <_lv_ll_ins_prev+0x58>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  4153bc:	6820      	ldr	r0, [r4, #0]
  4153be:	3008      	adds	r0, #8
  4153c0:	4b16      	ldr	r3, [pc, #88]	; (41541c <_lv_ll_ins_prev+0x78>)
  4153c2:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  4153c4:	4605      	mov	r5, r0
  4153c6:	b318      	cbz	r0, 415410 <_lv_ll_ins_prev+0x6c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
  4153c8:	4641      	mov	r1, r8
  4153ca:	4620      	mov	r0, r4
  4153cc:	4b14      	ldr	r3, [pc, #80]	; (415420 <_lv_ll_ins_prev+0x7c>)
  4153ce:	4798      	blx	r3
  4153d0:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
  4153d2:	462a      	mov	r2, r5
  4153d4:	4601      	mov	r1, r0
  4153d6:	4620      	mov	r0, r4
  4153d8:	4e12      	ldr	r6, [pc, #72]	; (415424 <_lv_ll_ins_prev+0x80>)
  4153da:	47b0      	blx	r6
        node_set_prev(ll_p, n_new, n_prev);
  4153dc:	463a      	mov	r2, r7
  4153de:	4629      	mov	r1, r5
  4153e0:	4620      	mov	r0, r4
  4153e2:	4f11      	ldr	r7, [pc, #68]	; (415428 <_lv_ll_ins_prev+0x84>)
  4153e4:	47b8      	blx	r7
        node_set_prev(ll_p, n_act, n_new);
  4153e6:	462a      	mov	r2, r5
  4153e8:	4641      	mov	r1, r8
  4153ea:	4620      	mov	r0, r4
  4153ec:	47b8      	blx	r7
        node_set_next(ll_p, n_new, n_act);
  4153ee:	4642      	mov	r2, r8
  4153f0:	4629      	mov	r1, r5
  4153f2:	4620      	mov	r0, r4
  4153f4:	47b0      	blx	r6
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  4153f6:	4628      	mov	r0, r5
  4153f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n_new = _lv_ll_ins_head(ll_p);
  4153fc:	4620      	mov	r0, r4
  4153fe:	4b0b      	ldr	r3, [pc, #44]	; (41542c <_lv_ll_ins_prev+0x88>)
  415400:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  415402:	b108      	cbz	r0, 415408 <_lv_ll_ins_prev+0x64>
  415404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
  41540c:	2000      	movs	r0, #0
  41540e:	4770      	bx	lr
        if(n_new == NULL) return NULL;
  415410:	2000      	movs	r0, #0
}
  415412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415416:	bf00      	nop
  415418:	00415375 	.word	0x00415375
  41541c:	0041576d 	.word	0x0041576d
  415420:	00415397 	.word	0x00415397
  415424:	004152bb 	.word	0x004152bb
  415428:	004152b1 	.word	0x004152b1
  41542c:	004152dd 	.word	0x004152dd

00415430 <_lv_ll_remove>:
{
  415430:	b570      	push	{r4, r5, r6, lr}
  415432:	4604      	mov	r4, r0
  415434:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == node_p) {
  415436:	4b1e      	ldr	r3, [pc, #120]	; (4154b0 <_lv_ll_remove+0x80>)
  415438:	4798      	blx	r3
  41543a:	4285      	cmp	r5, r0
  41543c:	d019      	beq.n	415472 <_lv_ll_remove+0x42>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
  41543e:	4620      	mov	r0, r4
  415440:	4b1c      	ldr	r3, [pc, #112]	; (4154b4 <_lv_ll_remove+0x84>)
  415442:	4798      	blx	r3
  415444:	4285      	cmp	r5, r0
  415446:	d023      	beq.n	415490 <_lv_ll_remove+0x60>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
  415448:	4629      	mov	r1, r5
  41544a:	4620      	mov	r0, r4
  41544c:	4b1a      	ldr	r3, [pc, #104]	; (4154b8 <_lv_ll_remove+0x88>)
  41544e:	4798      	blx	r3
  415450:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
  415452:	4629      	mov	r1, r5
  415454:	4620      	mov	r0, r4
  415456:	4b19      	ldr	r3, [pc, #100]	; (4154bc <_lv_ll_remove+0x8c>)
  415458:	4798      	blx	r3
  41545a:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
  41545c:	4602      	mov	r2, r0
  41545e:	4631      	mov	r1, r6
  415460:	4620      	mov	r0, r4
  415462:	4b17      	ldr	r3, [pc, #92]	; (4154c0 <_lv_ll_remove+0x90>)
  415464:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
  415466:	4632      	mov	r2, r6
  415468:	4629      	mov	r1, r5
  41546a:	4620      	mov	r0, r4
  41546c:	4b15      	ldr	r3, [pc, #84]	; (4154c4 <_lv_ll_remove+0x94>)
  41546e:	4798      	blx	r3
  415470:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
  415472:	4629      	mov	r1, r5
  415474:	4620      	mov	r0, r4
  415476:	4b11      	ldr	r3, [pc, #68]	; (4154bc <_lv_ll_remove+0x8c>)
  415478:	4798      	blx	r3
  41547a:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
  41547c:	b128      	cbz	r0, 41548a <_lv_ll_remove+0x5a>
            node_set_prev(ll_p, ll_p->head, NULL);
  41547e:	2200      	movs	r2, #0
  415480:	4601      	mov	r1, r0
  415482:	4620      	mov	r0, r4
  415484:	4b0f      	ldr	r3, [pc, #60]	; (4154c4 <_lv_ll_remove+0x94>)
  415486:	4798      	blx	r3
  415488:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
  41548a:	2300      	movs	r3, #0
  41548c:	60a3      	str	r3, [r4, #8]
  41548e:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
  415490:	4629      	mov	r1, r5
  415492:	4620      	mov	r0, r4
  415494:	4b08      	ldr	r3, [pc, #32]	; (4154b8 <_lv_ll_remove+0x88>)
  415496:	4798      	blx	r3
  415498:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
  41549a:	b128      	cbz	r0, 4154a8 <_lv_ll_remove+0x78>
            node_set_next(ll_p, ll_p->tail, NULL);
  41549c:	2200      	movs	r2, #0
  41549e:	4601      	mov	r1, r0
  4154a0:	4620      	mov	r0, r4
  4154a2:	4b07      	ldr	r3, [pc, #28]	; (4154c0 <_lv_ll_remove+0x90>)
  4154a4:	4798      	blx	r3
  4154a6:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
  4154a8:	2300      	movs	r3, #0
  4154aa:	6063      	str	r3, [r4, #4]
  4154ac:	bd70      	pop	{r4, r5, r6, pc}
  4154ae:	bf00      	nop
  4154b0:	00415375 	.word	0x00415375
  4154b4:	0041537f 	.word	0x0041537f
  4154b8:	00415397 	.word	0x00415397
  4154bc:	00415389 	.word	0x00415389
  4154c0:	004152bb 	.word	0x004152bb
  4154c4:	004152b1 	.word	0x004152b1

004154c8 <_lv_ll_chg_list>:
{
  4154c8:	b570      	push	{r4, r5, r6, lr}
  4154ca:	460c      	mov	r4, r1
  4154cc:	4615      	mov	r5, r2
  4154ce:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
  4154d0:	4611      	mov	r1, r2
  4154d2:	4b17      	ldr	r3, [pc, #92]	; (415530 <_lv_ll_chg_list+0x68>)
  4154d4:	4798      	blx	r3
    if(head) {
  4154d6:	b1ae      	cbz	r6, 415504 <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
  4154d8:	2200      	movs	r2, #0
  4154da:	4629      	mov	r1, r5
  4154dc:	4620      	mov	r0, r4
  4154de:	4b15      	ldr	r3, [pc, #84]	; (415534 <_lv_ll_chg_list+0x6c>)
  4154e0:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
  4154e2:	6862      	ldr	r2, [r4, #4]
  4154e4:	4629      	mov	r1, r5
  4154e6:	4620      	mov	r0, r4
  4154e8:	4b13      	ldr	r3, [pc, #76]	; (415538 <_lv_ll_chg_list+0x70>)
  4154ea:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
  4154ec:	6861      	ldr	r1, [r4, #4]
  4154ee:	b119      	cbz	r1, 4154f8 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
  4154f0:	462a      	mov	r2, r5
  4154f2:	4620      	mov	r0, r4
  4154f4:	4b0f      	ldr	r3, [pc, #60]	; (415534 <_lv_ll_chg_list+0x6c>)
  4154f6:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
  4154f8:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
  4154fa:	68a3      	ldr	r3, [r4, #8]
  4154fc:	b103      	cbz	r3, 415500 <_lv_ll_chg_list+0x38>
  4154fe:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
  415500:	60a5      	str	r5, [r4, #8]
  415502:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
  415504:	68a2      	ldr	r2, [r4, #8]
  415506:	4629      	mov	r1, r5
  415508:	4620      	mov	r0, r4
  41550a:	4b0a      	ldr	r3, [pc, #40]	; (415534 <_lv_ll_chg_list+0x6c>)
  41550c:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
  41550e:	2200      	movs	r2, #0
  415510:	4629      	mov	r1, r5
  415512:	4620      	mov	r0, r4
  415514:	4b08      	ldr	r3, [pc, #32]	; (415538 <_lv_ll_chg_list+0x70>)
  415516:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
  415518:	68a1      	ldr	r1, [r4, #8]
  41551a:	b119      	cbz	r1, 415524 <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
  41551c:	462a      	mov	r2, r5
  41551e:	4620      	mov	r0, r4
  415520:	4b05      	ldr	r3, [pc, #20]	; (415538 <_lv_ll_chg_list+0x70>)
  415522:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
  415524:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
  415526:	6863      	ldr	r3, [r4, #4]
  415528:	2b00      	cmp	r3, #0
  41552a:	d1e8      	bne.n	4154fe <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
  41552c:	6065      	str	r5, [r4, #4]
}
  41552e:	e7e6      	b.n	4154fe <_lv_ll_chg_list+0x36>
  415530:	00415431 	.word	0x00415431
  415534:	004152b1 	.word	0x004152b1
  415538:	004152bb 	.word	0x004152bb

0041553c <_lv_ll_get_len>:
{
  41553c:	b538      	push	{r3, r4, r5, lr}
  41553e:	4605      	mov	r5, r0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  415540:	4b06      	ldr	r3, [pc, #24]	; (41555c <_lv_ll_get_len+0x20>)
  415542:	4798      	blx	r3
    uint32_t len = 0;
  415544:	2400      	movs	r4, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  415546:	e004      	b.n	415552 <_lv_ll_get_len+0x16>
        len++;
  415548:	3401      	adds	r4, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  41554a:	4601      	mov	r1, r0
  41554c:	4628      	mov	r0, r5
  41554e:	4b04      	ldr	r3, [pc, #16]	; (415560 <_lv_ll_get_len+0x24>)
  415550:	4798      	blx	r3
  415552:	2800      	cmp	r0, #0
  415554:	d1f8      	bne.n	415548 <_lv_ll_get_len+0xc>
}
  415556:	4620      	mov	r0, r4
  415558:	bd38      	pop	{r3, r4, r5, pc}
  41555a:	bf00      	nop
  41555c:	00415375 	.word	0x00415375
  415560:	00415389 	.word	0x00415389

00415564 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
  415564:	4291      	cmp	r1, r2
  415566:	d02f      	beq.n	4155c8 <_lv_ll_move_before+0x64>
{
  415568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41556c:	4617      	mov	r7, r2
  41556e:	460c      	mov	r4, r1
  415570:	4605      	mov	r5, r0
    if(n_after != NULL)
  415572:	b30a      	cbz	r2, 4155b8 <_lv_ll_move_before+0x54>
        n_before = _lv_ll_get_prev(ll_p, n_after);
  415574:	4611      	mov	r1, r2
  415576:	4b15      	ldr	r3, [pc, #84]	; (4155cc <_lv_ll_move_before+0x68>)
  415578:	4798      	blx	r3
  41557a:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
  41557c:	42a6      	cmp	r6, r4
  41557e:	d019      	beq.n	4155b4 <_lv_ll_move_before+0x50>
    _lv_ll_remove(ll_p, n_act);
  415580:	4621      	mov	r1, r4
  415582:	4628      	mov	r0, r5
  415584:	4b12      	ldr	r3, [pc, #72]	; (4155d0 <_lv_ll_move_before+0x6c>)
  415586:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
  415588:	4622      	mov	r2, r4
  41558a:	4631      	mov	r1, r6
  41558c:	4628      	mov	r0, r5
  41558e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4155d8 <_lv_ll_move_before+0x74>
  415592:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
  415594:	4632      	mov	r2, r6
  415596:	4621      	mov	r1, r4
  415598:	4628      	mov	r0, r5
  41559a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4155dc <_lv_ll_move_before+0x78>
  41559e:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
  4155a0:	4622      	mov	r2, r4
  4155a2:	4639      	mov	r1, r7
  4155a4:	4628      	mov	r0, r5
  4155a6:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
  4155a8:	463a      	mov	r2, r7
  4155aa:	4621      	mov	r1, r4
  4155ac:	4628      	mov	r0, r5
  4155ae:	47c0      	blx	r8
    if(n_after == NULL) ll_p->tail = n_act;
  4155b0:	b137      	cbz	r7, 4155c0 <_lv_ll_move_before+0x5c>
    if(n_before == NULL) ll_p->head = n_act;
  4155b2:	b13e      	cbz	r6, 4155c4 <_lv_ll_move_before+0x60>
  4155b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        n_before = _lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
  4155b8:	4b06      	ldr	r3, [pc, #24]	; (4155d4 <_lv_ll_move_before+0x70>)
  4155ba:	4798      	blx	r3
  4155bc:	4606      	mov	r6, r0
  4155be:	e7dd      	b.n	41557c <_lv_ll_move_before+0x18>
    if(n_after == NULL) ll_p->tail = n_act;
  4155c0:	60ac      	str	r4, [r5, #8]
  4155c2:	e7f6      	b.n	4155b2 <_lv_ll_move_before+0x4e>
    if(n_before == NULL) ll_p->head = n_act;
  4155c4:	606c      	str	r4, [r5, #4]
  4155c6:	e7f5      	b.n	4155b4 <_lv_ll_move_before+0x50>
  4155c8:	4770      	bx	lr
  4155ca:	bf00      	nop
  4155cc:	00415397 	.word	0x00415397
  4155d0:	00415431 	.word	0x00415431
  4155d4:	0041537f 	.word	0x0041537f
  4155d8:	004152bb 	.word	0x004152bb
  4155dc:	004152b1 	.word	0x004152b1

004155e0 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
  4155e0:	b138      	cbz	r0, 4155f2 <_lv_ll_is_empty+0x12>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  4155e2:	6842      	ldr	r2, [r0, #4]
  4155e4:	b10a      	cbz	r2, 4155ea <_lv_ll_is_empty+0xa>
    return false;
  4155e6:	2000      	movs	r0, #0
  4155e8:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  4155ea:	6883      	ldr	r3, [r0, #8]
  4155ec:	b11b      	cbz	r3, 4155f6 <_lv_ll_is_empty+0x16>
    return false;
  4155ee:	2000      	movs	r0, #0
  4155f0:	4770      	bx	lr
    if(ll_p == NULL) return true;
  4155f2:	2001      	movs	r0, #1
  4155f4:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  4155f6:	2001      	movs	r0, #1
}
  4155f8:	4770      	bx	lr
	...

004155fc <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
  4155fc:	4b1c      	ldr	r3, [pc, #112]	; (415670 <_lv_trigo_sin+0x74>)
  4155fe:	fb83 2300 	smull	r2, r3, r3, r0
  415602:	181a      	adds	r2, r3, r0
  415604:	17c3      	asrs	r3, r0, #31
  415606:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  41560a:	f44f 72b4 	mov.w	r2, #360	; 0x168
  41560e:	fb02 0013 	mls	r0, r2, r3, r0
  415612:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
  415614:	2800      	cmp	r0, #0
  415616:	db15      	blt.n	415644 <_lv_trigo_sin+0x48>

    if(angle < 90) {
  415618:	2859      	cmp	r0, #89	; 0x59
  41561a:	dd16      	ble.n	41564a <_lv_trigo_sin+0x4e>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
  41561c:	b280      	uxth	r0, r0
  41561e:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
  415622:	b29b      	uxth	r3, r3
  415624:	2b59      	cmp	r3, #89	; 0x59
  415626:	d914      	bls.n	415652 <_lv_trigo_sin+0x56>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
  415628:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
  41562c:	b29b      	uxth	r3, r3
  41562e:	2b59      	cmp	r3, #89	; 0x59
  415630:	d916      	bls.n	415660 <_lv_trigo_sin+0x64>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
  415632:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
  415636:	b200      	sxth	r0, r0
        ret   = -sin0_90_table[angle];
  415638:	4b0e      	ldr	r3, [pc, #56]	; (415674 <_lv_trigo_sin+0x78>)
  41563a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  41563e:	4240      	negs	r0, r0
  415640:	b200      	sxth	r0, r0
    }

    return ret;
}
  415642:	4770      	bx	lr
    if(angle < 0) angle = 360 + angle;
  415644:	4410      	add	r0, r2
  415646:	b200      	sxth	r0, r0
  415648:	e7e6      	b.n	415618 <_lv_trigo_sin+0x1c>
        ret = sin0_90_table[angle];
  41564a:	4b0a      	ldr	r3, [pc, #40]	; (415674 <_lv_trigo_sin+0x78>)
  41564c:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  415650:	4770      	bx	lr
        angle = 180 - angle;
  415652:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
  415656:	b200      	sxth	r0, r0
        ret   = sin0_90_table[angle];
  415658:	4b06      	ldr	r3, [pc, #24]	; (415674 <_lv_trigo_sin+0x78>)
  41565a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  41565e:	4770      	bx	lr
        angle = angle - 180;
  415660:	b21b      	sxth	r3, r3
        ret   = -sin0_90_table[angle];
  415662:	4a04      	ldr	r2, [pc, #16]	; (415674 <_lv_trigo_sin+0x78>)
  415664:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  415668:	4240      	negs	r0, r0
  41566a:	b200      	sxth	r0, r0
  41566c:	4770      	bx	lr
  41566e:	bf00      	nop
  415670:	b60b60b7 	.word	0xb60b60b7
  415674:	00424838 	.word	0x00424838

00415678 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
  415678:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
  41567a:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
  41567c:	2400      	movs	r4, #0
  41567e:	e001      	b.n	415684 <_lv_sqrt+0xc>
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
        if(trial * trial <= x) root = trial;
        mask = mask >> 1;
    } while(mask);
  415680:	0852      	lsrs	r2, r2, #1
  415682:	d006      	beq.n	415692 <_lv_sqrt+0x1a>
        trial = root + mask;
  415684:	1913      	adds	r3, r2, r4
        if(trial * trial <= x) root = trial;
  415686:	fb03 f503 	mul.w	r5, r3, r3
  41568a:	42a8      	cmp	r0, r5
  41568c:	d3f8      	bcc.n	415680 <_lv_sqrt+0x8>
  41568e:	461c      	mov	r4, r3
  415690:	e7f6      	b.n	415680 <_lv_sqrt+0x8>

    q->i = root >> 4;
  415692:	0923      	lsrs	r3, r4, #4
  415694:	800b      	strh	r3, [r1, #0]
    q->f = (root & 0xf) << 4;
  415696:	0124      	lsls	r4, r4, #4
  415698:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
  41569c:	804c      	strh	r4, [r1, #2]
}
  41569e:	bc30      	pop	{r4, r5}
  4156a0:	4770      	bx	lr
	...

004156a4 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
  4156a4:	4603      	mov	r3, r0
  4156a6:	b158      	cbz	r0, 4156c0 <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
  4156a8:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
  4156aa:	681b      	ldr	r3, [r3, #0]
  4156ac:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  4156b0:	1d02      	adds	r2, r0, #4
  4156b2:	4b06      	ldr	r3, [pc, #24]	; (4156cc <ent_get_next+0x28>)
  4156b4:	681b      	ldr	r3, [r3, #0]
  4156b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  4156ba:	429a      	cmp	r2, r3
  4156bc:	d203      	bcs.n	4156c6 <ent_get_next+0x22>
    }

    return next_e;
}
  4156be:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
  4156c0:	4b02      	ldr	r3, [pc, #8]	; (4156cc <ent_get_next+0x28>)
  4156c2:	6818      	ldr	r0, [r3, #0]
  4156c4:	4770      	bx	lr
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  4156c6:	2000      	movs	r0, #0
    return next_e;
  4156c8:	e7f9      	b.n	4156be <ent_get_next+0x1a>
  4156ca:	bf00      	nop
  4156cc:	2040c774 	.word	0x2040c774

004156d0 <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  4156d0:	3103      	adds	r1, #3
  4156d2:	f021 0103 	bic.w	r1, r1, #3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
  4156d6:	6803      	ldr	r3, [r0, #0]
  4156d8:	f3c3 035e 	ubfx	r3, r3, #1, #31
  4156dc:	1d0a      	adds	r2, r1, #4
  4156de:	4293      	cmp	r3, r2
  4156e0:	d016      	beq.n	415710 <ent_trunc+0x40>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
  4156e2:	4299      	cmp	r1, r3
  4156e4:	d013      	beq.n	41570e <ent_trunc+0x3e>
{
  4156e6:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
  4156e8:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
  4156ea:	5c53      	ldrb	r3, [r2, r1]
  4156ec:	f36f 0300 	bfc	r3, #0, #1
  4156f0:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
  4156f2:	6803      	ldr	r3, [r0, #0]
  4156f4:	ebc1 0353 	rsb	r3, r1, r3, lsr #1
  4156f8:	3b04      	subs	r3, #4
  4156fa:	5854      	ldr	r4, [r2, r1]
  4156fc:	f363 045f 	bfi	r4, r3, #1, #31
  415700:	5054      	str	r4, [r2, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
  415702:	6803      	ldr	r3, [r0, #0]
  415704:	f361 035f 	bfi	r3, r1, #1, #31
  415708:	6003      	str	r3, [r0, #0]
    }
}
  41570a:	f85d 4b04 	ldr.w	r4, [sp], #4
  41570e:	4770      	bx	lr
        size = e->header.s.d_size;
  415710:	4619      	mov	r1, r3
  415712:	e7e6      	b.n	4156e2 <ent_trunc+0x12>

00415714 <ent_alloc>:
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
  415714:	7803      	ldrb	r3, [r0, #0]
  415716:	f013 0f01 	tst.w	r3, #1
  41571a:	d10f      	bne.n	41573c <ent_alloc+0x28>
  41571c:	6803      	ldr	r3, [r0, #0]
  41571e:	f3c3 035e 	ubfx	r3, r3, #1, #31
  415722:	428b      	cmp	r3, r1
  415724:	d30c      	bcc.n	415740 <ent_alloc+0x2c>
{
  415726:	b510      	push	{r4, lr}
  415728:	4604      	mov	r4, r0
        ent_trunc(e, size);
  41572a:	4b06      	ldr	r3, [pc, #24]	; (415744 <ent_alloc+0x30>)
  41572c:	4798      	blx	r3
        e->header.s.used = 1;
  41572e:	7823      	ldrb	r3, [r4, #0]
  415730:	f043 0301 	orr.w	r3, r3, #1
  415734:	4620      	mov	r0, r4
  415736:	f800 3b04 	strb.w	r3, [r0], #4
  41573a:	bd10      	pop	{r4, pc}
    void * alloc = NULL;
  41573c:	2000      	movs	r0, #0
  41573e:	4770      	bx	lr
  415740:	2000      	movs	r0, #0
    return alloc;
  415742:	4770      	bx	lr
  415744:	004156d1 	.word	0x004156d1

00415748 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
  415748:	4b06      	ldr	r3, [pc, #24]	; (415764 <_lv_mem_init+0x1c>)
  41574a:	4a07      	ldr	r2, [pc, #28]	; (415768 <_lv_mem_init+0x20>)
  41574c:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
  41574e:	781a      	ldrb	r2, [r3, #0]
  415750:	f36f 0200 	bfc	r2, #0, #1
  415754:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
  415756:	681a      	ldr	r2, [r3, #0]
  415758:	f647 71fc 	movw	r1, #32764	; 0x7ffc
  41575c:	f361 025f 	bfi	r2, r1, #1, #31
  415760:	601a      	str	r2, [r3, #0]
  415762:	4770      	bx	lr
  415764:	2040c778 	.word	0x2040c778
  415768:	2040c774 	.word	0x2040c774

0041576c <lv_mem_alloc>:
{
  41576c:	b570      	push	{r4, r5, r6, lr}
    if(size == 0) {
  41576e:	b330      	cbz	r0, 4157be <lv_mem_alloc+0x52>
  415770:	4606      	mov	r6, r0
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  415772:	3603      	adds	r6, #3
  415774:	f026 0603 	bic.w	r6, r6, #3
    lv_mem_ent_t * e = NULL;
  415778:	2400      	movs	r4, #0
    void * alloc = NULL;
  41577a:	4625      	mov	r5, r4
  41577c:	e006      	b.n	41578c <lv_mem_alloc+0x20>
    } while(e != NULL && alloc == NULL);
  41577e:	1c23      	adds	r3, r4, #0
  415780:	bf18      	it	ne
  415782:	2301      	movne	r3, #1
  415784:	2d00      	cmp	r5, #0
  415786:	bf18      	it	ne
  415788:	2300      	movne	r3, #0
  41578a:	b153      	cbz	r3, 4157a2 <lv_mem_alloc+0x36>
        e = ent_get_next(e);
  41578c:	4620      	mov	r0, r4
  41578e:	4b0d      	ldr	r3, [pc, #52]	; (4157c4 <lv_mem_alloc+0x58>)
  415790:	4798      	blx	r3
        if(e != NULL) {
  415792:	4604      	mov	r4, r0
  415794:	2800      	cmp	r0, #0
  415796:	d0f2      	beq.n	41577e <lv_mem_alloc+0x12>
            alloc = ent_alloc(e, size);
  415798:	4631      	mov	r1, r6
  41579a:	4b0b      	ldr	r3, [pc, #44]	; (4157c8 <lv_mem_alloc+0x5c>)
  41579c:	4798      	blx	r3
  41579e:	4605      	mov	r5, r0
  4157a0:	e7ed      	b.n	41577e <lv_mem_alloc+0x12>
    if(alloc == NULL) {
  4157a2:	b16d      	cbz	r5, 4157c0 <lv_mem_alloc+0x54>
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
  4157a4:	4b09      	ldr	r3, [pc, #36]	; (4157cc <lv_mem_alloc+0x60>)
  4157a6:	681b      	ldr	r3, [r3, #0]
  4157a8:	429d      	cmp	r5, r3
  4157aa:	d909      	bls.n	4157c0 <lv_mem_alloc+0x54>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
  4157ac:	1aeb      	subs	r3, r5, r3
  4157ae:	441e      	add	r6, r3
  4157b0:	4b07      	ldr	r3, [pc, #28]	; (4157d0 <lv_mem_alloc+0x64>)
  4157b2:	681b      	ldr	r3, [r3, #0]
  4157b4:	429e      	cmp	r6, r3
  4157b6:	d903      	bls.n	4157c0 <lv_mem_alloc+0x54>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
  4157b8:	4b05      	ldr	r3, [pc, #20]	; (4157d0 <lv_mem_alloc+0x64>)
  4157ba:	601e      	str	r6, [r3, #0]
  4157bc:	e000      	b.n	4157c0 <lv_mem_alloc+0x54>
        return &zero_mem;
  4157be:	4d05      	ldr	r5, [pc, #20]	; (4157d4 <lv_mem_alloc+0x68>)
}
  4157c0:	4628      	mov	r0, r5
  4157c2:	bd70      	pop	{r4, r5, r6, pc}
  4157c4:	004156a5 	.word	0x004156a5
  4157c8:	00415715 	.word	0x00415715
  4157cc:	2040c774 	.word	0x2040c774
  4157d0:	2040c770 	.word	0x2040c770
  4157d4:	20414778 	.word	0x20414778

004157d8 <lv_mem_defrag>:
{
  4157d8:	b510      	push	{r4, lr}
    e_free = ent_get_next(NULL);
  4157da:	2000      	movs	r0, #0
  4157dc:	4b13      	ldr	r3, [pc, #76]	; (41582c <lv_mem_defrag+0x54>)
  4157de:	4798      	blx	r3
  4157e0:	4604      	mov	r4, r0
  4157e2:	e017      	b.n	415814 <lv_mem_defrag+0x3c>
        if(e_free == NULL) return;
  4157e4:	b304      	cbz	r4, 415828 <lv_mem_defrag+0x50>
        e_next = ent_get_next(e_free);
  4157e6:	4620      	mov	r0, r4
  4157e8:	4b10      	ldr	r3, [pc, #64]	; (41582c <lv_mem_defrag+0x54>)
  4157ea:	4798      	blx	r3
        while(e_next != NULL) {
  4157ec:	b180      	cbz	r0, 415810 <lv_mem_defrag+0x38>
            if(e_next->header.s.used == 0) {
  4157ee:	7803      	ldrb	r3, [r0, #0]
  4157f0:	f013 0f01 	tst.w	r3, #1
  4157f4:	d10c      	bne.n	415810 <lv_mem_defrag+0x38>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
  4157f6:	6801      	ldr	r1, [r0, #0]
  4157f8:	6823      	ldr	r3, [r4, #0]
  4157fa:	f3c3 025e 	ubfx	r2, r3, #1, #31
  4157fe:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  415802:	3204      	adds	r2, #4
  415804:	f362 035f 	bfi	r3, r2, #1, #31
  415808:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
  41580a:	4b08      	ldr	r3, [pc, #32]	; (41582c <lv_mem_defrag+0x54>)
  41580c:	4798      	blx	r3
  41580e:	e7ed      	b.n	4157ec <lv_mem_defrag+0x14>
        if(e_next == NULL) return;
  415810:	b150      	cbz	r0, 415828 <lv_mem_defrag+0x50>
{
  415812:	4604      	mov	r4, r0
        while(e_free != NULL) {
  415814:	2c00      	cmp	r4, #0
  415816:	d0e5      	beq.n	4157e4 <lv_mem_defrag+0xc>
            if(e_free->header.s.used != 0) {
  415818:	7823      	ldrb	r3, [r4, #0]
  41581a:	f013 0f01 	tst.w	r3, #1
  41581e:	d0e1      	beq.n	4157e4 <lv_mem_defrag+0xc>
                e_free = ent_get_next(e_free);
  415820:	4620      	mov	r0, r4
  415822:	4b02      	ldr	r3, [pc, #8]	; (41582c <lv_mem_defrag+0x54>)
  415824:	4798      	blx	r3
  415826:	e7f4      	b.n	415812 <lv_mem_defrag+0x3a>
  415828:	bd10      	pop	{r4, pc}
  41582a:	bf00      	nop
  41582c:	004156a5 	.word	0x004156a5

00415830 <lv_mem_free>:
    if(data == &zero_mem) return;
  415830:	4b18      	ldr	r3, [pc, #96]	; (415894 <lv_mem_free+0x64>)
  415832:	4298      	cmp	r0, r3
  415834:	d02d      	beq.n	415892 <lv_mem_free+0x62>
    if(data == NULL) return;
  415836:	b360      	cbz	r0, 415892 <lv_mem_free+0x62>
{
  415838:	b510      	push	{r4, lr}
  41583a:	4604      	mov	r4, r0
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
  41583c:	3804      	subs	r0, #4
    e->header.s.used = 0;
  41583e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  415842:	f36f 0300 	bfc	r3, #0, #1
  415846:	f804 3c04 	strb.w	r3, [r4, #-4]
    full_defrag_cnt++;
  41584a:	4a13      	ldr	r2, [pc, #76]	; (415898 <lv_mem_free+0x68>)
  41584c:	8813      	ldrh	r3, [r2, #0]
  41584e:	3301      	adds	r3, #1
  415850:	b29b      	uxth	r3, r3
  415852:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
  415854:	2b0f      	cmp	r3, #15
  415856:	d816      	bhi.n	415886 <lv_mem_free+0x56>
        e_next = ent_get_next(e);
  415858:	4b10      	ldr	r3, [pc, #64]	; (41589c <lv_mem_free+0x6c>)
  41585a:	4798      	blx	r3
        while(e_next != NULL) {
  41585c:	b190      	cbz	r0, 415884 <lv_mem_free+0x54>
            if(e_next->header.s.used == 0) {
  41585e:	7803      	ldrb	r3, [r0, #0]
  415860:	f013 0f01 	tst.w	r3, #1
  415864:	d114      	bne.n	415890 <lv_mem_free+0x60>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
  415866:	6801      	ldr	r1, [r0, #0]
  415868:	f854 3c04 	ldr.w	r3, [r4, #-4]
  41586c:	f3c3 025e 	ubfx	r2, r3, #1, #31
  415870:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  415874:	3204      	adds	r2, #4
  415876:	f362 035f 	bfi	r3, r2, #1, #31
  41587a:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
  41587e:	4b07      	ldr	r3, [pc, #28]	; (41589c <lv_mem_free+0x6c>)
  415880:	4798      	blx	r3
  415882:	e7eb      	b.n	41585c <lv_mem_free+0x2c>
  415884:	bd10      	pop	{r4, pc}
        full_defrag_cnt = 0;
  415886:	2200      	movs	r2, #0
  415888:	4b03      	ldr	r3, [pc, #12]	; (415898 <lv_mem_free+0x68>)
  41588a:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
  41588c:	4b04      	ldr	r3, [pc, #16]	; (4158a0 <lv_mem_free+0x70>)
  41588e:	4798      	blx	r3
  415890:	bd10      	pop	{r4, pc}
  415892:	4770      	bx	lr
  415894:	20414778 	.word	0x20414778
  415898:	2040c74c 	.word	0x2040c74c
  41589c:	004156a5 	.word	0x004156a5
  4158a0:	004157d9 	.word	0x004157d9

004158a4 <_lv_mem_get_size>:
    if(data == NULL) return 0;
  4158a4:	b138      	cbz	r0, 4158b6 <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
  4158a6:	4a06      	ldr	r2, [pc, #24]	; (4158c0 <_lv_mem_get_size+0x1c>)
  4158a8:	4290      	cmp	r0, r2
  4158aa:	d006      	beq.n	4158ba <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
  4158ac:	f850 0c04 	ldr.w	r0, [r0, #-4]
  4158b0:	f3c0 005e 	ubfx	r0, r0, #1, #31
  4158b4:	4770      	bx	lr
    if(data == NULL) return 0;
  4158b6:	2000      	movs	r0, #0
  4158b8:	4770      	bx	lr
    if(data == &zero_mem) return 0;
  4158ba:	2000      	movs	r0, #0
}
  4158bc:	4770      	bx	lr
  4158be:	bf00      	nop
  4158c0:	20414778 	.word	0x20414778

004158c4 <_lv_mem_buf_release>:
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  4158c4:	2300      	movs	r3, #0
  4158c6:	2b01      	cmp	r3, #1
  4158c8:	d810      	bhi.n	4158ec <_lv_mem_buf_release+0x28>
        if(mem_buf_small[i].p == p) {
  4158ca:	4619      	mov	r1, r3
  4158cc:	4a12      	ldr	r2, [pc, #72]	; (415918 <_lv_mem_buf_release+0x54>)
  4158ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4158d2:	4282      	cmp	r2, r0
  4158d4:	d002      	beq.n	4158dc <_lv_mem_buf_release+0x18>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  4158d6:	3301      	adds	r3, #1
  4158d8:	b2db      	uxtb	r3, r3
  4158da:	e7f4      	b.n	4158c6 <_lv_mem_buf_release+0x2>
            mem_buf_small[i].used = 0;
  4158dc:	4b0e      	ldr	r3, [pc, #56]	; (415918 <_lv_mem_buf_release+0x54>)
  4158de:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4158e2:	798b      	ldrb	r3, [r1, #6]
  4158e4:	f36f 0300 	bfc	r3, #0, #1
  4158e8:	718b      	strb	r3, [r1, #6]
            return;
  4158ea:	4770      	bx	lr
  4158ec:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4158ee:	2b0f      	cmp	r3, #15
  4158f0:	d810      	bhi.n	415914 <_lv_mem_buf_release+0x50>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
  4158f2:	4619      	mov	r1, r3
  4158f4:	4a09      	ldr	r2, [pc, #36]	; (41591c <_lv_mem_buf_release+0x58>)
  4158f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4158fa:	4290      	cmp	r0, r2
  4158fc:	d002      	beq.n	415904 <_lv_mem_buf_release+0x40>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4158fe:	3301      	adds	r3, #1
  415900:	b2db      	uxtb	r3, r3
  415902:	e7f4      	b.n	4158ee <_lv_mem_buf_release+0x2a>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  415904:	4b05      	ldr	r3, [pc, #20]	; (41591c <_lv_mem_buf_release+0x58>)
  415906:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  41590a:	798b      	ldrb	r3, [r1, #6]
  41590c:	f36f 0300 	bfc	r3, #0, #1
  415910:	718b      	strb	r3, [r1, #6]
            return;
  415912:	4770      	bx	lr
  415914:	4770      	bx	lr
  415916:	bf00      	nop
  415918:	20400040 	.word	0x20400040
  41591c:	2043a19c 	.word	0x2043a19c

00415920 <_lv_mem_buf_free_all>:
{
  415920:	b510      	push	{r4, lr}
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  415922:	2300      	movs	r3, #0
  415924:	e008      	b.n	415938 <_lv_mem_buf_free_all+0x18>
        mem_buf_small[i].used = 0;
  415926:	4a12      	ldr	r2, [pc, #72]	; (415970 <_lv_mem_buf_free_all+0x50>)
  415928:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  41592c:	7991      	ldrb	r1, [r2, #6]
  41592e:	f36f 0100 	bfc	r1, #0, #1
  415932:	7191      	strb	r1, [r2, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  415934:	3301      	adds	r3, #1
  415936:	b2db      	uxtb	r3, r3
  415938:	2b01      	cmp	r3, #1
  41593a:	d9f4      	bls.n	415926 <_lv_mem_buf_free_all+0x6>
  41593c:	2400      	movs	r4, #0
  41593e:	e001      	b.n	415944 <_lv_mem_buf_free_all+0x24>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415940:	3401      	adds	r4, #1
  415942:	b2e4      	uxtb	r4, r4
  415944:	2c0f      	cmp	r4, #15
  415946:	d812      	bhi.n	41596e <_lv_mem_buf_free_all+0x4e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
  415948:	4b0a      	ldr	r3, [pc, #40]	; (415974 <_lv_mem_buf_free_all+0x54>)
  41594a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  41594e:	2800      	cmp	r0, #0
  415950:	d0f6      	beq.n	415940 <_lv_mem_buf_free_all+0x20>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
  415952:	4b09      	ldr	r3, [pc, #36]	; (415978 <_lv_mem_buf_free_all+0x58>)
  415954:	4798      	blx	r3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
  415956:	4b07      	ldr	r3, [pc, #28]	; (415974 <_lv_mem_buf_free_all+0x54>)
  415958:	2200      	movs	r2, #0
  41595a:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  41595e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  415962:	7999      	ldrb	r1, [r3, #6]
  415964:	f362 0100 	bfi	r1, r2, #0, #1
  415968:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
  41596a:	809a      	strh	r2, [r3, #4]
  41596c:	e7e8      	b.n	415940 <_lv_mem_buf_free_all+0x20>
}
  41596e:	bd10      	pop	{r4, pc}
  415970:	20400040 	.word	0x20400040
  415974:	2043a19c 	.word	0x2043a19c
  415978:	00415831 	.word	0x00415831

0041597c <_lv_memcpy>:
{
  41597c:	b430      	push	{r4, r5}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
  41597e:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
  415982:	f001 0303 	and.w	r3, r1, #3
    if(s_align != d_align) {
  415986:	429c      	cmp	r4, r3
  415988:	d050      	beq.n	415a2c <_lv_memcpy+0xb0>
  41598a:	4603      	mov	r3, r0
  41598c:	e042      	b.n	415a14 <_lv_memcpy+0x98>
            REPEAT8(COPY8);
  41598e:	780c      	ldrb	r4, [r1, #0]
  415990:	701c      	strb	r4, [r3, #0]
  415992:	784c      	ldrb	r4, [r1, #1]
  415994:	705c      	strb	r4, [r3, #1]
  415996:	788c      	ldrb	r4, [r1, #2]
  415998:	709c      	strb	r4, [r3, #2]
  41599a:	78cc      	ldrb	r4, [r1, #3]
  41599c:	70dc      	strb	r4, [r3, #3]
  41599e:	790c      	ldrb	r4, [r1, #4]
  4159a0:	711c      	strb	r4, [r3, #4]
  4159a2:	794c      	ldrb	r4, [r1, #5]
  4159a4:	715c      	strb	r4, [r3, #5]
  4159a6:	798c      	ldrb	r4, [r1, #6]
  4159a8:	719c      	strb	r4, [r3, #6]
  4159aa:	79cc      	ldrb	r4, [r1, #7]
  4159ac:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
  4159ae:	7a0c      	ldrb	r4, [r1, #8]
  4159b0:	721c      	strb	r4, [r3, #8]
  4159b2:	7a4c      	ldrb	r4, [r1, #9]
  4159b4:	725c      	strb	r4, [r3, #9]
  4159b6:	7a8c      	ldrb	r4, [r1, #10]
  4159b8:	729c      	strb	r4, [r3, #10]
  4159ba:	7acc      	ldrb	r4, [r1, #11]
  4159bc:	72dc      	strb	r4, [r3, #11]
  4159be:	7b0c      	ldrb	r4, [r1, #12]
  4159c0:	731c      	strb	r4, [r3, #12]
  4159c2:	7b4c      	ldrb	r4, [r1, #13]
  4159c4:	735c      	strb	r4, [r3, #13]
  4159c6:	7b8c      	ldrb	r4, [r1, #14]
  4159c8:	739c      	strb	r4, [r3, #14]
  4159ca:	7bcc      	ldrb	r4, [r1, #15]
  4159cc:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
  4159ce:	7c0c      	ldrb	r4, [r1, #16]
  4159d0:	741c      	strb	r4, [r3, #16]
  4159d2:	7c4c      	ldrb	r4, [r1, #17]
  4159d4:	745c      	strb	r4, [r3, #17]
  4159d6:	7c8c      	ldrb	r4, [r1, #18]
  4159d8:	749c      	strb	r4, [r3, #18]
  4159da:	7ccc      	ldrb	r4, [r1, #19]
  4159dc:	74dc      	strb	r4, [r3, #19]
  4159de:	7d0c      	ldrb	r4, [r1, #20]
  4159e0:	751c      	strb	r4, [r3, #20]
  4159e2:	7d4c      	ldrb	r4, [r1, #21]
  4159e4:	755c      	strb	r4, [r3, #21]
  4159e6:	7d8c      	ldrb	r4, [r1, #22]
  4159e8:	759c      	strb	r4, [r3, #22]
  4159ea:	7dcc      	ldrb	r4, [r1, #23]
  4159ec:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
  4159ee:	7e0c      	ldrb	r4, [r1, #24]
  4159f0:	761c      	strb	r4, [r3, #24]
  4159f2:	7e4c      	ldrb	r4, [r1, #25]
  4159f4:	765c      	strb	r4, [r3, #25]
  4159f6:	7e8c      	ldrb	r4, [r1, #26]
  4159f8:	769c      	strb	r4, [r3, #26]
  4159fa:	7ecc      	ldrb	r4, [r1, #27]
  4159fc:	76dc      	strb	r4, [r3, #27]
  4159fe:	7f0c      	ldrb	r4, [r1, #28]
  415a00:	771c      	strb	r4, [r3, #28]
  415a02:	7f4c      	ldrb	r4, [r1, #29]
  415a04:	775c      	strb	r4, [r3, #29]
  415a06:	7f8c      	ldrb	r4, [r1, #30]
  415a08:	779c      	strb	r4, [r3, #30]
  415a0a:	7fcc      	ldrb	r4, [r1, #31]
  415a0c:	77dc      	strb	r4, [r3, #31]
  415a0e:	3320      	adds	r3, #32
  415a10:	3120      	adds	r1, #32
            len -= 32;
  415a12:	3a20      	subs	r2, #32
        while(len > 32) {
  415a14:	2a20      	cmp	r2, #32
  415a16:	d8ba      	bhi.n	41598e <_lv_memcpy+0x12>
  415a18:	e004      	b.n	415a24 <_lv_memcpy+0xa8>
            COPY8
  415a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
  415a1e:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
  415a22:	3a01      	subs	r2, #1
        while(len) {
  415a24:	2a00      	cmp	r2, #0
  415a26:	d1f8      	bne.n	415a1a <_lv_memcpy+0x9e>
}
  415a28:	bc30      	pop	{r4, r5}
  415a2a:	4770      	bx	lr
    if(d_align) {
  415a2c:	b174      	cbz	r4, 415a4c <_lv_memcpy+0xd0>
        d_align = ALIGN_MASK + 1 - d_align;
  415a2e:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
  415a32:	4603      	mov	r3, r0
        while(d_align && len) {
  415a34:	e005      	b.n	415a42 <_lv_memcpy+0xc6>
            COPY8;
  415a36:	f811 5b01 	ldrb.w	r5, [r1], #1
  415a3a:	f803 5b01 	strb.w	r5, [r3], #1
            d_align--;
  415a3e:	3c01      	subs	r4, #1
            len--;
  415a40:	3a01      	subs	r2, #1
        while(d_align && len) {
  415a42:	2c00      	cmp	r4, #0
  415a44:	bf18      	it	ne
  415a46:	2a00      	cmpne	r2, #0
  415a48:	d1f5      	bne.n	415a36 <_lv_memcpy+0xba>
  415a4a:	e014      	b.n	415a76 <_lv_memcpy+0xfa>
    uint8_t * d8 = dst;
  415a4c:	4603      	mov	r3, r0
  415a4e:	e012      	b.n	415a76 <_lv_memcpy+0xfa>
        REPEAT8(COPY32)
  415a50:	680c      	ldr	r4, [r1, #0]
  415a52:	601c      	str	r4, [r3, #0]
  415a54:	684c      	ldr	r4, [r1, #4]
  415a56:	605c      	str	r4, [r3, #4]
  415a58:	688c      	ldr	r4, [r1, #8]
  415a5a:	609c      	str	r4, [r3, #8]
  415a5c:	68cc      	ldr	r4, [r1, #12]
  415a5e:	60dc      	str	r4, [r3, #12]
  415a60:	690c      	ldr	r4, [r1, #16]
  415a62:	611c      	str	r4, [r3, #16]
  415a64:	694c      	ldr	r4, [r1, #20]
  415a66:	615c      	str	r4, [r3, #20]
  415a68:	698c      	ldr	r4, [r1, #24]
  415a6a:	619c      	str	r4, [r3, #24]
  415a6c:	69cc      	ldr	r4, [r1, #28]
  415a6e:	61dc      	str	r4, [r3, #28]
  415a70:	3320      	adds	r3, #32
  415a72:	3120      	adds	r1, #32
        len -= 32;
  415a74:	3a20      	subs	r2, #32
    while(len > 32) {
  415a76:	2a20      	cmp	r2, #32
  415a78:	d8ea      	bhi.n	415a50 <_lv_memcpy+0xd4>
  415a7a:	e004      	b.n	415a86 <_lv_memcpy+0x10a>
        COPY32;
  415a7c:	f851 4b04 	ldr.w	r4, [r1], #4
  415a80:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
  415a84:	3a04      	subs	r2, #4
    while(len > 4) {
  415a86:	2a04      	cmp	r2, #4
  415a88:	d8f8      	bhi.n	415a7c <_lv_memcpy+0x100>
  415a8a:	e004      	b.n	415a96 <_lv_memcpy+0x11a>
        COPY8
  415a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
  415a90:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
  415a94:	3a01      	subs	r2, #1
    while(len) {
  415a96:	2a00      	cmp	r2, #0
  415a98:	d1f8      	bne.n	415a8c <_lv_memcpy+0x110>
  415a9a:	e7c5      	b.n	415a28 <_lv_memcpy+0xac>

00415a9c <lv_mem_realloc>:
{
  415a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
  415a9e:	3103      	adds	r1, #3
  415aa0:	f021 0403 	bic.w	r4, r1, #3
    if(data_p != NULL) {
  415aa4:	4605      	mov	r5, r0
  415aa6:	b128      	cbz	r0, 415ab4 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
  415aa8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  415aac:	f013 0f01 	tst.w	r3, #1
  415ab0:	d100      	bne.n	415ab4 <lv_mem_realloc+0x18>
            data_p = NULL;
  415ab2:	2500      	movs	r5, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
  415ab4:	4628      	mov	r0, r5
  415ab6:	4b12      	ldr	r3, [pc, #72]	; (415b00 <lv_mem_realloc+0x64>)
  415ab8:	4798      	blx	r3
  415aba:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  415abc:	4284      	cmp	r4, r0
  415abe:	d01d      	beq.n	415afc <lv_mem_realloc+0x60>
    if(new_size < old_size) {
  415ac0:	d30e      	bcc.n	415ae0 <lv_mem_realloc+0x44>
    new_p = lv_mem_alloc(new_size);
  415ac2:	4620      	mov	r0, r4
  415ac4:	4b0f      	ldr	r3, [pc, #60]	; (415b04 <lv_mem_realloc+0x68>)
  415ac6:	4798      	blx	r3
    if(new_p == NULL) {
  415ac8:	4607      	mov	r7, r0
  415aca:	b138      	cbz	r0, 415adc <lv_mem_realloc+0x40>
    if(data_p != NULL) {
  415acc:	b135      	cbz	r5, 415adc <lv_mem_realloc+0x40>
        if(old_size != 0 && new_size != 0) {
  415ace:	2e00      	cmp	r6, #0
  415ad0:	bf18      	it	ne
  415ad2:	2c00      	cmpne	r4, #0
  415ad4:	d10a      	bne.n	415aec <lv_mem_realloc+0x50>
        lv_mem_free(data_p);
  415ad6:	4628      	mov	r0, r5
  415ad8:	4b0b      	ldr	r3, [pc, #44]	; (415b08 <lv_mem_realloc+0x6c>)
  415ada:	4798      	blx	r3
}
  415adc:	4638      	mov	r0, r7
  415ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ent_trunc(e, new_size);
  415ae0:	4621      	mov	r1, r4
  415ae2:	1f28      	subs	r0, r5, #4
  415ae4:	4b09      	ldr	r3, [pc, #36]	; (415b0c <lv_mem_realloc+0x70>)
  415ae6:	4798      	blx	r3
        return &e->first_data;
  415ae8:	462f      	mov	r7, r5
  415aea:	e7f7      	b.n	415adc <lv_mem_realloc+0x40>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
  415aec:	4622      	mov	r2, r4
  415aee:	42b4      	cmp	r4, r6
  415af0:	bf28      	it	cs
  415af2:	4632      	movcs	r2, r6
  415af4:	4629      	mov	r1, r5
  415af6:	4b06      	ldr	r3, [pc, #24]	; (415b10 <lv_mem_realloc+0x74>)
  415af8:	4798      	blx	r3
  415afa:	e7ec      	b.n	415ad6 <lv_mem_realloc+0x3a>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  415afc:	462f      	mov	r7, r5
  415afe:	e7ed      	b.n	415adc <lv_mem_realloc+0x40>
  415b00:	004158a5 	.word	0x004158a5
  415b04:	0041576d 	.word	0x0041576d
  415b08:	00415831 	.word	0x00415831
  415b0c:	004156d1 	.word	0x004156d1
  415b10:	0041597d 	.word	0x0041597d

00415b14 <_lv_mem_buf_get>:
{
  415b14:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) return NULL;
  415b16:	2800      	cmp	r0, #0
  415b18:	f000 8085 	beq.w	415c26 <_lv_mem_buf_get+0x112>
  415b1c:	4604      	mov	r4, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
  415b1e:	2810      	cmp	r0, #16
  415b20:	d91d      	bls.n	415b5e <_lv_mem_buf_get+0x4a>
  415b22:	f04f 31ff 	mov.w	r1, #4294967295
  415b26:	2300      	movs	r3, #0
  415b28:	e028      	b.n	415b7c <_lv_mem_buf_get+0x68>
            if(mem_buf_small[i].used == 0) {
  415b2a:	4619      	mov	r1, r3
  415b2c:	4a3f      	ldr	r2, [pc, #252]	; (415c2c <_lv_mem_buf_get+0x118>)
  415b2e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  415b32:	7992      	ldrb	r2, [r2, #6]
  415b34:	f012 0f01 	tst.w	r2, #1
  415b38:	d007      	beq.n	415b4a <_lv_mem_buf_get+0x36>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  415b3a:	3301      	adds	r3, #1
  415b3c:	b2db      	uxtb	r3, r3
  415b3e:	2b01      	cmp	r3, #1
  415b40:	d9f3      	bls.n	415b2a <_lv_mem_buf_get+0x16>
  415b42:	f04f 31ff 	mov.w	r1, #4294967295
  415b46:	2300      	movs	r3, #0
  415b48:	e018      	b.n	415b7c <_lv_mem_buf_get+0x68>
                mem_buf_small[i].used = 1;
  415b4a:	4a38      	ldr	r2, [pc, #224]	; (415c2c <_lv_mem_buf_get+0x118>)
  415b4c:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  415b50:	7983      	ldrb	r3, [r0, #6]
  415b52:	f043 0301 	orr.w	r3, r3, #1
  415b56:	7183      	strb	r3, [r0, #6]
                return mem_buf_small[i].p;
  415b58:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  415b5c:	e034      	b.n	415bc8 <_lv_mem_buf_get+0xb4>
  415b5e:	2300      	movs	r3, #0
  415b60:	e7ed      	b.n	415b3e <_lv_mem_buf_get+0x2a>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  415b62:	4a33      	ldr	r2, [pc, #204]	; (415c30 <_lv_mem_buf_get+0x11c>)
  415b64:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  415b68:	798b      	ldrb	r3, [r1, #6]
  415b6a:	f043 0301 	orr.w	r3, r3, #1
  415b6e:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
  415b70:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
  415b74:	e028      	b.n	415bc8 <_lv_mem_buf_get+0xb4>
                i_guess = i;
  415b76:	b259      	sxtb	r1, r3
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415b78:	3301      	adds	r3, #1
  415b7a:	b2db      	uxtb	r3, r3
  415b7c:	2b0f      	cmp	r3, #15
  415b7e:	d818      	bhi.n	415bb2 <_lv_mem_buf_get+0x9e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
  415b80:	4618      	mov	r0, r3
  415b82:	4a2b      	ldr	r2, [pc, #172]	; (415c30 <_lv_mem_buf_get+0x11c>)
  415b84:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  415b88:	7992      	ldrb	r2, [r2, #6]
  415b8a:	f012 0f01 	tst.w	r2, #1
  415b8e:	d1f3      	bne.n	415b78 <_lv_mem_buf_get+0x64>
  415b90:	4a27      	ldr	r2, [pc, #156]	; (415c30 <_lv_mem_buf_get+0x11c>)
  415b92:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  415b96:	8892      	ldrh	r2, [r2, #4]
  415b98:	4294      	cmp	r4, r2
  415b9a:	d8ed      	bhi.n	415b78 <_lv_mem_buf_get+0x64>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
  415b9c:	d0e1      	beq.n	415b62 <_lv_mem_buf_get+0x4e>
            else if(i_guess < 0) {
  415b9e:	2900      	cmp	r1, #0
  415ba0:	dbe9      	blt.n	415b76 <_lv_mem_buf_get+0x62>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
  415ba2:	4823      	ldr	r0, [pc, #140]	; (415c30 <_lv_mem_buf_get+0x11c>)
  415ba4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  415ba8:	8880      	ldrh	r0, [r0, #4]
  415baa:	4282      	cmp	r2, r0
  415bac:	d2e4      	bcs.n	415b78 <_lv_mem_buf_get+0x64>
                i_guess = i;
  415bae:	b259      	sxtb	r1, r3
  415bb0:	e7e2      	b.n	415b78 <_lv_mem_buf_get+0x64>
    if(i_guess >= 0) {
  415bb2:	2900      	cmp	r1, #0
  415bb4:	db23      	blt.n	415bfe <_lv_mem_buf_get+0xea>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
  415bb6:	4a1e      	ldr	r2, [pc, #120]	; (415c30 <_lv_mem_buf_get+0x11c>)
  415bb8:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  415bbc:	7983      	ldrb	r3, [r0, #6]
  415bbe:	f043 0301 	orr.w	r3, r3, #1
  415bc2:	7183      	strb	r3, [r0, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
  415bc4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
}
  415bc8:	4618      	mov	r0, r3
  415bca:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
  415bcc:	4621      	mov	r1, r4
  415bce:	4b18      	ldr	r3, [pc, #96]	; (415c30 <_lv_mem_buf_get+0x11c>)
  415bd0:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
  415bd4:	4b17      	ldr	r3, [pc, #92]	; (415c34 <_lv_mem_buf_get+0x120>)
  415bd6:	4798      	blx	r3
            if(buf == NULL) {
  415bd8:	4603      	mov	r3, r0
  415bda:	b150      	cbz	r0, 415bf2 <_lv_mem_buf_get+0xde>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  415bdc:	4814      	ldr	r0, [pc, #80]	; (415c30 <_lv_mem_buf_get+0x11c>)
  415bde:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
  415be2:	7991      	ldrb	r1, [r2, #6]
  415be4:	f041 0101 	orr.w	r1, r1, #1
  415be8:	7191      	strb	r1, [r2, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
  415bea:	8094      	strh	r4, [r2, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
  415bec:	f840 3035 	str.w	r3, [r0, r5, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
  415bf0:	e7ea      	b.n	415bc8 <_lv_mem_buf_get+0xb4>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
  415bf2:	2200      	movs	r2, #0
  415bf4:	2300      	movs	r3, #0
  415bf6:	4810      	ldr	r0, [pc, #64]	; (415c38 <_lv_mem_buf_get+0x124>)
  415bf8:	4910      	ldr	r1, [pc, #64]	; (415c3c <_lv_mem_buf_get+0x128>)
  415bfa:	4788      	blx	r1
  415bfc:	e7fe      	b.n	415bfc <_lv_mem_buf_get+0xe8>
  415bfe:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415c00:	2b0f      	cmp	r3, #15
  415c02:	d80a      	bhi.n	415c1a <_lv_mem_buf_get+0x106>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
  415c04:	461d      	mov	r5, r3
  415c06:	4a0a      	ldr	r2, [pc, #40]	; (415c30 <_lv_mem_buf_get+0x11c>)
  415c08:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  415c0c:	7992      	ldrb	r2, [r2, #6]
  415c0e:	f012 0f01 	tst.w	r2, #1
  415c12:	d0db      	beq.n	415bcc <_lv_mem_buf_get+0xb8>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415c14:	3301      	adds	r3, #1
  415c16:	b2db      	uxtb	r3, r3
  415c18:	e7f2      	b.n	415c00 <_lv_mem_buf_get+0xec>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
  415c1a:	2200      	movs	r2, #0
  415c1c:	2300      	movs	r3, #0
  415c1e:	4808      	ldr	r0, [pc, #32]	; (415c40 <_lv_mem_buf_get+0x12c>)
  415c20:	4906      	ldr	r1, [pc, #24]	; (415c3c <_lv_mem_buf_get+0x128>)
  415c22:	4788      	blx	r1
  415c24:	e7fe      	b.n	415c24 <_lv_mem_buf_get+0x110>
    if(size == 0) return NULL;
  415c26:	2300      	movs	r3, #0
  415c28:	e7ce      	b.n	415bc8 <_lv_mem_buf_get+0xb4>
  415c2a:	bf00      	nop
  415c2c:	20400040 	.word	0x20400040
  415c30:	2043a19c 	.word	0x2043a19c
  415c34:	00415a9d 	.word	0x00415a9d
  415c38:	004248f0 	.word	0x004248f0
  415c3c:	00415071 	.word	0x00415071
  415c40:	00424944 	.word	0x00424944

00415c44 <_lv_memset>:
    if(d_align) {
  415c44:	f010 0303 	ands.w	r3, r0, #3
  415c48:	d00a      	beq.n	415c60 <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
  415c4a:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  415c4e:	e003      	b.n	415c58 <_lv_memset+0x14>
            SET8(v);
  415c50:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
  415c54:	3a01      	subs	r2, #1
            d_align--;
  415c56:	3b01      	subs	r3, #1
        while(d_align && len) {
  415c58:	2b00      	cmp	r3, #0
  415c5a:	bf18      	it	ne
  415c5c:	2a00      	cmpne	r2, #0
  415c5e:	d1f7      	bne.n	415c50 <_lv_memset+0xc>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
  415c60:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  415c64:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  415c68:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
  415c6c:	e009      	b.n	415c82 <_lv_memset+0x3e>
        REPEAT8(SET32(v32));
  415c6e:	6003      	str	r3, [r0, #0]
  415c70:	6043      	str	r3, [r0, #4]
  415c72:	6083      	str	r3, [r0, #8]
  415c74:	60c3      	str	r3, [r0, #12]
  415c76:	6103      	str	r3, [r0, #16]
  415c78:	6143      	str	r3, [r0, #20]
  415c7a:	6183      	str	r3, [r0, #24]
  415c7c:	61c3      	str	r3, [r0, #28]
  415c7e:	3020      	adds	r0, #32
        len -= 32;
  415c80:	3a20      	subs	r2, #32
    while(len > 32) {
  415c82:	2a20      	cmp	r2, #32
  415c84:	d8f3      	bhi.n	415c6e <_lv_memset+0x2a>
  415c86:	e002      	b.n	415c8e <_lv_memset+0x4a>
        SET32(v32);
  415c88:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  415c8c:	3a04      	subs	r2, #4
    while(len > 4) {
  415c8e:	2a04      	cmp	r2, #4
  415c90:	d8fa      	bhi.n	415c88 <_lv_memset+0x44>
  415c92:	e002      	b.n	415c9a <_lv_memset+0x56>
        SET8(v);
  415c94:	f800 1b01 	strb.w	r1, [r0], #1
        len--;
  415c98:	3a01      	subs	r2, #1
    while(len) {
  415c9a:	2a00      	cmp	r2, #0
  415c9c:	d1fa      	bne.n	415c94 <_lv_memset+0x50>
}
  415c9e:	4770      	bx	lr

00415ca0 <_lv_memset_00>:
    if(d_align) {
  415ca0:	f010 0303 	ands.w	r3, r0, #3
  415ca4:	d017      	beq.n	415cd6 <_lv_memset_00+0x36>
        d_align = ALIGN_MASK + 1 - d_align;
  415ca6:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  415caa:	e004      	b.n	415cb6 <_lv_memset_00+0x16>
            SET8(0);
  415cac:	2200      	movs	r2, #0
  415cae:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  415cb2:	3901      	subs	r1, #1
            d_align--;
  415cb4:	3b01      	subs	r3, #1
        while(d_align && len) {
  415cb6:	2b00      	cmp	r3, #0
  415cb8:	bf18      	it	ne
  415cba:	2900      	cmpne	r1, #0
  415cbc:	d1f6      	bne.n	415cac <_lv_memset_00+0xc>
  415cbe:	e00a      	b.n	415cd6 <_lv_memset_00+0x36>
        REPEAT8(SET32(0));
  415cc0:	2300      	movs	r3, #0
  415cc2:	6003      	str	r3, [r0, #0]
  415cc4:	6043      	str	r3, [r0, #4]
  415cc6:	6083      	str	r3, [r0, #8]
  415cc8:	60c3      	str	r3, [r0, #12]
  415cca:	6103      	str	r3, [r0, #16]
  415ccc:	6143      	str	r3, [r0, #20]
  415cce:	6183      	str	r3, [r0, #24]
  415cd0:	61c3      	str	r3, [r0, #28]
  415cd2:	3020      	adds	r0, #32
        len -= 32;
  415cd4:	3920      	subs	r1, #32
    while(len > 32) {
  415cd6:	2920      	cmp	r1, #32
  415cd8:	d8f2      	bhi.n	415cc0 <_lv_memset_00+0x20>
  415cda:	e003      	b.n	415ce4 <_lv_memset_00+0x44>
        SET32(0);
  415cdc:	2300      	movs	r3, #0
  415cde:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  415ce2:	3904      	subs	r1, #4
    while(len > 4) {
  415ce4:	2904      	cmp	r1, #4
  415ce6:	d8f9      	bhi.n	415cdc <_lv_memset_00+0x3c>
  415ce8:	e003      	b.n	415cf2 <_lv_memset_00+0x52>
        SET8(0);
  415cea:	2300      	movs	r3, #0
  415cec:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  415cf0:	3901      	subs	r1, #1
    while(len) {
  415cf2:	2900      	cmp	r1, #0
  415cf4:	d1f9      	bne.n	415cea <_lv_memset_00+0x4a>
}
  415cf6:	4770      	bx	lr

00415cf8 <_lv_memset_ff>:
    if(d_align) {
  415cf8:	f010 0303 	ands.w	r3, r0, #3
  415cfc:	d018      	beq.n	415d30 <_lv_memset_ff+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
  415cfe:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  415d02:	e004      	b.n	415d0e <_lv_memset_ff+0x16>
            SET8(0xFF);
  415d04:	22ff      	movs	r2, #255	; 0xff
  415d06:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  415d0a:	3901      	subs	r1, #1
            d_align--;
  415d0c:	3b01      	subs	r3, #1
        while(d_align && len) {
  415d0e:	2b00      	cmp	r3, #0
  415d10:	bf18      	it	ne
  415d12:	2900      	cmpne	r1, #0
  415d14:	d1f6      	bne.n	415d04 <_lv_memset_ff+0xc>
  415d16:	e00b      	b.n	415d30 <_lv_memset_ff+0x38>
        REPEAT8(SET32(0xFFFFFFFF));
  415d18:	f04f 33ff 	mov.w	r3, #4294967295
  415d1c:	6003      	str	r3, [r0, #0]
  415d1e:	6043      	str	r3, [r0, #4]
  415d20:	6083      	str	r3, [r0, #8]
  415d22:	60c3      	str	r3, [r0, #12]
  415d24:	6103      	str	r3, [r0, #16]
  415d26:	6143      	str	r3, [r0, #20]
  415d28:	6183      	str	r3, [r0, #24]
  415d2a:	61c3      	str	r3, [r0, #28]
  415d2c:	3020      	adds	r0, #32
        len -= 32;
  415d2e:	3920      	subs	r1, #32
    while(len > 32) {
  415d30:	2920      	cmp	r1, #32
  415d32:	d8f1      	bhi.n	415d18 <_lv_memset_ff+0x20>
  415d34:	e004      	b.n	415d40 <_lv_memset_ff+0x48>
        SET32(0xFFFFFFFF);
  415d36:	f04f 33ff 	mov.w	r3, #4294967295
  415d3a:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  415d3e:	3904      	subs	r1, #4
    while(len > 4) {
  415d40:	2904      	cmp	r1, #4
  415d42:	d8f8      	bhi.n	415d36 <_lv_memset_ff+0x3e>
  415d44:	e003      	b.n	415d4e <_lv_memset_ff+0x56>
        SET8(0xFF);
  415d46:	23ff      	movs	r3, #255	; 0xff
  415d48:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  415d4c:	3901      	subs	r1, #1
    while(len) {
  415d4e:	2900      	cmp	r1, #0
  415d50:	d1f9      	bne.n	415d46 <_lv_memset_ff+0x4e>
}
  415d52:	4770      	bx	lr

00415d54 <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
  415d54:	b510      	push	{r4, lr}
  415d56:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
  415d58:	6840      	ldr	r0, [r0, #4]
  415d5a:	4b04      	ldr	r3, [pc, #16]	; (415d6c <lv_task_time_remaining+0x18>)
  415d5c:	4798      	blx	r3
    if(elp >= task->period)
  415d5e:	6823      	ldr	r3, [r4, #0]
  415d60:	4298      	cmp	r0, r3
  415d62:	d201      	bcs.n	415d68 <lv_task_time_remaining+0x14>
        return 0;
    return task->period - elp;
  415d64:	1a18      	subs	r0, r3, r0
  415d66:	bd10      	pop	{r4, pc}
        return 0;
  415d68:	2000      	movs	r0, #0
}
  415d6a:	bd10      	pop	{r4, pc}
  415d6c:	00414361 	.word	0x00414361

00415d70 <lv_task_create>:
{
  415d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  415d74:	4607      	mov	r7, r0
  415d76:	4688      	mov	r8, r1
  415d78:	4615      	mov	r5, r2
  415d7a:	461e      	mov	r6, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  415d7c:	4831      	ldr	r0, [pc, #196]	; (415e44 <lv_task_create+0xd4>)
  415d7e:	4b32      	ldr	r3, [pc, #200]	; (415e48 <lv_task_create+0xd8>)
  415d80:	4798      	blx	r3
    if(NULL == tmp) {
  415d82:	4604      	mov	r4, r0
  415d84:	b338      	cbz	r0, 415dd6 <lv_task_create+0x66>
            if(tmp->prio <= prio) {
  415d86:	7d23      	ldrb	r3, [r4, #20]
  415d88:	f003 0307 	and.w	r3, r3, #7
  415d8c:	42ab      	cmp	r3, r5
  415d8e:	dd32      	ble.n	415df6 <lv_task_create+0x86>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  415d90:	4621      	mov	r1, r4
  415d92:	482c      	ldr	r0, [pc, #176]	; (415e44 <lv_task_create+0xd4>)
  415d94:	4b2d      	ldr	r3, [pc, #180]	; (415e4c <lv_task_create+0xdc>)
  415d96:	4798      	blx	r3
        } while(tmp != NULL);
  415d98:	4604      	mov	r4, r0
  415d9a:	2800      	cmp	r0, #0
  415d9c:	d1f3      	bne.n	415d86 <lv_task_create+0x16>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  415d9e:	4603      	mov	r3, r0
        if(tmp == NULL) {
  415da0:	2b00      	cmp	r3, #0
  415da2:	d03c      	beq.n	415e1e <lv_task_create+0xae>
    task_list_changed = true;
  415da4:	f04f 0901 	mov.w	r9, #1
  415da8:	4b29      	ldr	r3, [pc, #164]	; (415e50 <lv_task_create+0xe0>)
  415daa:	f883 9000 	strb.w	r9, [r3]
    new_task->period  = period;
  415dae:	f8c4 8000 	str.w	r8, [r4]
    new_task->task_cb = task_xcb;
  415db2:	60a7      	str	r7, [r4, #8]
    new_task->prio    = prio;
  415db4:	7d23      	ldrb	r3, [r4, #20]
  415db6:	f365 0302 	bfi	r3, r5, #0, #3
  415dba:	7523      	strb	r3, [r4, #20]
    new_task->repeat_count = -1;
  415dbc:	f04f 33ff 	mov.w	r3, #4294967295
  415dc0:	6123      	str	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
  415dc2:	4b24      	ldr	r3, [pc, #144]	; (415e54 <lv_task_create+0xe4>)
  415dc4:	4798      	blx	r3
  415dc6:	6060      	str	r0, [r4, #4]
    new_task->user_data = user_data;
  415dc8:	60e6      	str	r6, [r4, #12]
    task_created = true;
  415dca:	4b23      	ldr	r3, [pc, #140]	; (415e58 <lv_task_create+0xe8>)
  415dcc:	f883 9000 	strb.w	r9, [r3]
}
  415dd0:	4620      	mov	r0, r4
  415dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
  415dd6:	481b      	ldr	r0, [pc, #108]	; (415e44 <lv_task_create+0xd4>)
  415dd8:	4b20      	ldr	r3, [pc, #128]	; (415e5c <lv_task_create+0xec>)
  415dda:	4798      	blx	r3
  415ddc:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
  415dde:	4b20      	ldr	r3, [pc, #128]	; (415e60 <lv_task_create+0xf0>)
  415de0:	4798      	blx	r3
  415de2:	b928      	cbnz	r0, 415df0 <lv_task_create+0x80>
  415de4:	4622      	mov	r2, r4
  415de6:	2300      	movs	r3, #0
  415de8:	481e      	ldr	r0, [pc, #120]	; (415e64 <lv_task_create+0xf4>)
  415dea:	491f      	ldr	r1, [pc, #124]	; (415e68 <lv_task_create+0xf8>)
  415dec:	4788      	blx	r1
  415dee:	e7fe      	b.n	415dee <lv_task_create+0x7e>
        if(new_task == NULL) return NULL;
  415df0:	2c00      	cmp	r4, #0
  415df2:	d1d7      	bne.n	415da4 <lv_task_create+0x34>
  415df4:	e7ec      	b.n	415dd0 <lv_task_create+0x60>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  415df6:	4621      	mov	r1, r4
  415df8:	4812      	ldr	r0, [pc, #72]	; (415e44 <lv_task_create+0xd4>)
  415dfa:	4b1c      	ldr	r3, [pc, #112]	; (415e6c <lv_task_create+0xfc>)
  415dfc:	4798      	blx	r3
  415dfe:	4681      	mov	r9, r0
                LV_ASSERT_MEM(new_task);
  415e00:	4b17      	ldr	r3, [pc, #92]	; (415e60 <lv_task_create+0xf0>)
  415e02:	4798      	blx	r3
  415e04:	b128      	cbz	r0, 415e12 <lv_task_create+0xa2>
                if(new_task == NULL) return NULL;
  415e06:	f1b9 0f00 	cmp.w	r9, #0
  415e0a:	d018      	beq.n	415e3e <lv_task_create+0xce>
  415e0c:	4623      	mov	r3, r4
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  415e0e:	464c      	mov	r4, r9
  415e10:	e7c6      	b.n	415da0 <lv_task_create+0x30>
                LV_ASSERT_MEM(new_task);
  415e12:	464a      	mov	r2, r9
  415e14:	2300      	movs	r3, #0
  415e16:	4813      	ldr	r0, [pc, #76]	; (415e64 <lv_task_create+0xf4>)
  415e18:	4913      	ldr	r1, [pc, #76]	; (415e68 <lv_task_create+0xf8>)
  415e1a:	4788      	blx	r1
  415e1c:	e7fe      	b.n	415e1c <lv_task_create+0xac>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
  415e1e:	4809      	ldr	r0, [pc, #36]	; (415e44 <lv_task_create+0xd4>)
  415e20:	4b13      	ldr	r3, [pc, #76]	; (415e70 <lv_task_create+0x100>)
  415e22:	4798      	blx	r3
  415e24:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
  415e26:	4b0e      	ldr	r3, [pc, #56]	; (415e60 <lv_task_create+0xf0>)
  415e28:	4798      	blx	r3
  415e2a:	b928      	cbnz	r0, 415e38 <lv_task_create+0xc8>
  415e2c:	4622      	mov	r2, r4
  415e2e:	2300      	movs	r3, #0
  415e30:	480c      	ldr	r0, [pc, #48]	; (415e64 <lv_task_create+0xf4>)
  415e32:	490d      	ldr	r1, [pc, #52]	; (415e68 <lv_task_create+0xf8>)
  415e34:	4788      	blx	r1
  415e36:	e7fe      	b.n	415e36 <lv_task_create+0xc6>
            if(new_task == NULL) return NULL;
  415e38:	2c00      	cmp	r4, #0
  415e3a:	d1b3      	bne.n	415da4 <lv_task_create+0x34>
  415e3c:	e7c8      	b.n	415dd0 <lv_task_create+0x60>
                if(new_task == NULL) return NULL;
  415e3e:	464c      	mov	r4, r9
  415e40:	e7c6      	b.n	415dd0 <lv_task_create+0x60>
  415e42:	bf00      	nop
  415e44:	2043a168 	.word	0x2043a168
  415e48:	00415375 	.word	0x00415375
  415e4c:	00415389 	.word	0x00415389
  415e50:	2041478f 	.word	0x2041478f
  415e54:	00414345 	.word	0x00414345
  415e58:	2041478d 	.word	0x2041478d
  415e5c:	004152dd 	.word	0x004152dd
  415e60:	00415065 	.word	0x00415065
  415e64:	00421264 	.word	0x00421264
  415e68:	00415071 	.word	0x00415071
  415e6c:	004153a5 	.word	0x004153a5
  415e70:	00415329 	.word	0x00415329

00415e74 <lv_task_del>:
{
  415e74:	b510      	push	{r4, lr}
  415e76:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
  415e78:	4601      	mov	r1, r0
  415e7a:	4809      	ldr	r0, [pc, #36]	; (415ea0 <lv_task_del+0x2c>)
  415e7c:	4b09      	ldr	r3, [pc, #36]	; (415ea4 <lv_task_del+0x30>)
  415e7e:	4798      	blx	r3
    task_list_changed = true;
  415e80:	2201      	movs	r2, #1
  415e82:	4b09      	ldr	r3, [pc, #36]	; (415ea8 <lv_task_del+0x34>)
  415e84:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
  415e86:	4620      	mov	r0, r4
  415e88:	4b08      	ldr	r3, [pc, #32]	; (415eac <lv_task_del+0x38>)
  415e8a:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
  415e8c:	4b08      	ldr	r3, [pc, #32]	; (415eb0 <lv_task_del+0x3c>)
  415e8e:	681b      	ldr	r3, [r3, #0]
  415e90:	429c      	cmp	r4, r3
  415e92:	d000      	beq.n	415e96 <lv_task_del+0x22>
  415e94:	bd10      	pop	{r4, pc}
  415e96:	2201      	movs	r2, #1
  415e98:	4b06      	ldr	r3, [pc, #24]	; (415eb4 <lv_task_del+0x40>)
  415e9a:	701a      	strb	r2, [r3, #0]
}
  415e9c:	e7fa      	b.n	415e94 <lv_task_del+0x20>
  415e9e:	bf00      	nop
  415ea0:	2043a168 	.word	0x2043a168
  415ea4:	00415431 	.word	0x00415431
  415ea8:	2041478f 	.word	0x2041478f
  415eac:	00415831 	.word	0x00415831
  415eb0:	2043a238 	.word	0x2043a238
  415eb4:	2041478e 	.word	0x2041478e

00415eb8 <lv_task_exec>:
{
  415eb8:	b510      	push	{r4, lr}
  415eba:	4604      	mov	r4, r0
    if(lv_task_time_remaining(task) == 0) {
  415ebc:	4b0e      	ldr	r3, [pc, #56]	; (415ef8 <lv_task_exec+0x40>)
  415ebe:	4798      	blx	r3
  415ec0:	b108      	cbz	r0, 415ec6 <lv_task_exec+0xe>
    bool exec = false;
  415ec2:	2000      	movs	r0, #0
  415ec4:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
  415ec6:	4b0d      	ldr	r3, [pc, #52]	; (415efc <lv_task_exec+0x44>)
  415ec8:	4798      	blx	r3
  415eca:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
  415ecc:	68a3      	ldr	r3, [r4, #8]
  415ece:	b10b      	cbz	r3, 415ed4 <lv_task_exec+0x1c>
  415ed0:	4620      	mov	r0, r4
  415ed2:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
  415ed4:	4b0a      	ldr	r3, [pc, #40]	; (415f00 <lv_task_exec+0x48>)
  415ed6:	7818      	ldrb	r0, [r3, #0]
  415ed8:	b938      	cbnz	r0, 415eea <lv_task_exec+0x32>
            if(task->repeat_count > 0) {
  415eda:	6923      	ldr	r3, [r4, #16]
  415edc:	2b00      	cmp	r3, #0
  415ede:	dd01      	ble.n	415ee4 <lv_task_exec+0x2c>
                task->repeat_count--;
  415ee0:	3b01      	subs	r3, #1
  415ee2:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
  415ee4:	6923      	ldr	r3, [r4, #16]
  415ee6:	b10b      	cbz	r3, 415eec <lv_task_exec+0x34>
        exec = true;
  415ee8:	2001      	movs	r0, #1
}
  415eea:	bd10      	pop	{r4, pc}
                lv_task_del(task);
  415eec:	4620      	mov	r0, r4
  415eee:	4b05      	ldr	r3, [pc, #20]	; (415f04 <lv_task_exec+0x4c>)
  415ef0:	4798      	blx	r3
        exec = true;
  415ef2:	2001      	movs	r0, #1
  415ef4:	bd10      	pop	{r4, pc}
  415ef6:	bf00      	nop
  415ef8:	00415d55 	.word	0x00415d55
  415efc:	00414345 	.word	0x00414345
  415f00:	2041478e 	.word	0x2041478e
  415f04:	00415e75 	.word	0x00415e75

00415f08 <lv_task_handler>:
{
  415f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(already_running) return 1;
  415f0a:	4b5e      	ldr	r3, [pc, #376]	; (416084 <lv_task_handler+0x17c>)
  415f0c:	781b      	ldrb	r3, [r3, #0]
  415f0e:	2b00      	cmp	r3, #0
  415f10:	f040 80b5 	bne.w	41607e <lv_task_handler+0x176>
    already_running = true;
  415f14:	2201      	movs	r2, #1
  415f16:	4b5b      	ldr	r3, [pc, #364]	; (416084 <lv_task_handler+0x17c>)
  415f18:	701a      	strb	r2, [r3, #0]
    if(lv_task_run == false) {
  415f1a:	4b5b      	ldr	r3, [pc, #364]	; (416088 <lv_task_handler+0x180>)
  415f1c:	781d      	ldrb	r5, [r3, #0]
  415f1e:	b925      	cbnz	r5, 415f2a <lv_task_handler+0x22>
        already_running = false; /*Release mutex*/
  415f20:	2200      	movs	r2, #0
  415f22:	4b58      	ldr	r3, [pc, #352]	; (416084 <lv_task_handler+0x17c>)
  415f24:	701a      	strb	r2, [r3, #0]
        return 1;
  415f26:	2501      	movs	r5, #1
  415f28:	e0aa      	b.n	416080 <lv_task_handler+0x178>
    uint32_t handler_start = lv_tick_get();
  415f2a:	4b58      	ldr	r3, [pc, #352]	; (41608c <lv_task_handler+0x184>)
  415f2c:	4798      	blx	r3
  415f2e:	4606      	mov	r6, r0
    lv_task_t * task_interrupter = NULL;
  415f30:	2400      	movs	r4, #0
  415f32:	e04e      	b.n	415fd2 <lv_task_handler+0xca>
                LV_GC_ROOT(_lv_task_act) = next;
  415f34:	4b56      	ldr	r3, [pc, #344]	; (416090 <lv_task_handler+0x188>)
  415f36:	601f      	str	r7, [r3, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
  415f38:	2400      	movs	r4, #0
                continue; /*Load the next task*/
  415f3a:	e00f      	b.n	415f5c <lv_task_handler+0x54>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
  415f3c:	4b55      	ldr	r3, [pc, #340]	; (416094 <lv_task_handler+0x18c>)
  415f3e:	4798      	blx	r3
            if(task_created || task_deleted) {
  415f40:	4b55      	ldr	r3, [pc, #340]	; (416098 <lv_task_handler+0x190>)
  415f42:	781b      	ldrb	r3, [r3, #0]
  415f44:	2b00      	cmp	r3, #0
  415f46:	d153      	bne.n	415ff0 <lv_task_handler+0xe8>
  415f48:	4b54      	ldr	r3, [pc, #336]	; (41609c <lv_task_handler+0x194>)
  415f4a:	781b      	ldrb	r3, [r3, #0]
  415f4c:	2b00      	cmp	r3, #0
  415f4e:	d151      	bne.n	415ff4 <lv_task_handler+0xec>
            if(task_list_changed) {
  415f50:	4a53      	ldr	r2, [pc, #332]	; (4160a0 <lv_task_handler+0x198>)
  415f52:	7812      	ldrb	r2, [r2, #0]
  415f54:	2a00      	cmp	r2, #0
  415f56:	d14f      	bne.n	415ff8 <lv_task_handler+0xf0>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
  415f58:	4b4d      	ldr	r3, [pc, #308]	; (416090 <lv_task_handler+0x188>)
  415f5a:	601f      	str	r7, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  415f5c:	4b4c      	ldr	r3, [pc, #304]	; (416090 <lv_task_handler+0x188>)
  415f5e:	6819      	ldr	r1, [r3, #0]
  415f60:	2900      	cmp	r1, #0
  415f62:	d034      	beq.n	415fce <lv_task_handler+0xc6>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
  415f64:	484f      	ldr	r0, [pc, #316]	; (4160a4 <lv_task_handler+0x19c>)
  415f66:	4b50      	ldr	r3, [pc, #320]	; (4160a8 <lv_task_handler+0x1a0>)
  415f68:	4798      	blx	r3
  415f6a:	4607      	mov	r7, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
  415f6c:	4b48      	ldr	r3, [pc, #288]	; (416090 <lv_task_handler+0x188>)
  415f6e:	6818      	ldr	r0, [r3, #0]
  415f70:	7d03      	ldrb	r3, [r0, #20]
  415f72:	f013 0307 	ands.w	r3, r3, #7
  415f76:	d039      	beq.n	415fec <lv_task_handler+0xe4>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
  415f78:	4284      	cmp	r4, r0
  415f7a:	d0db      	beq.n	415f34 <lv_task_handler+0x2c>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
  415f7c:	2b05      	cmp	r3, #5
  415f7e:	d0dd      	beq.n	415f3c <lv_task_handler+0x34>
            else if(task_interrupter) {
  415f80:	b1b4      	cbz	r4, 415fb0 <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
  415f82:	7d02      	ldrb	r2, [r0, #20]
  415f84:	f002 0207 	and.w	r2, r2, #7
  415f88:	7d23      	ldrb	r3, [r4, #20]
  415f8a:	f003 0307 	and.w	r3, r3, #7
  415f8e:	429a      	cmp	r2, r3
  415f90:	ddd6      	ble.n	415f40 <lv_task_handler+0x38>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  415f92:	4b40      	ldr	r3, [pc, #256]	; (416094 <lv_task_handler+0x18c>)
  415f94:	4798      	blx	r3
  415f96:	2800      	cmp	r0, #0
  415f98:	d0d2      	beq.n	415f40 <lv_task_handler+0x38>
                        if(!task_created && !task_deleted) {
  415f9a:	4b3f      	ldr	r3, [pc, #252]	; (416098 <lv_task_handler+0x190>)
  415f9c:	781b      	ldrb	r3, [r3, #0]
  415f9e:	2b00      	cmp	r3, #0
  415fa0:	d1ce      	bne.n	415f40 <lv_task_handler+0x38>
  415fa2:	4b3e      	ldr	r3, [pc, #248]	; (41609c <lv_task_handler+0x194>)
  415fa4:	781b      	ldrb	r3, [r3, #0]
  415fa6:	2b00      	cmp	r3, #0
  415fa8:	d1ca      	bne.n	415f40 <lv_task_handler+0x38>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
  415faa:	4a39      	ldr	r2, [pc, #228]	; (416090 <lv_task_handler+0x188>)
  415fac:	6814      	ldr	r4, [r2, #0]
                            break;
  415fae:	e00f      	b.n	415fd0 <lv_task_handler+0xc8>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  415fb0:	4b38      	ldr	r3, [pc, #224]	; (416094 <lv_task_handler+0x18c>)
  415fb2:	4798      	blx	r3
  415fb4:	2800      	cmp	r0, #0
  415fb6:	d0c3      	beq.n	415f40 <lv_task_handler+0x38>
                    if(!task_created && !task_deleted) {
  415fb8:	4b37      	ldr	r3, [pc, #220]	; (416098 <lv_task_handler+0x190>)
  415fba:	781b      	ldrb	r3, [r3, #0]
  415fbc:	2b00      	cmp	r3, #0
  415fbe:	d1bf      	bne.n	415f40 <lv_task_handler+0x38>
  415fc0:	4b36      	ldr	r3, [pc, #216]	; (41609c <lv_task_handler+0x194>)
  415fc2:	781b      	ldrb	r3, [r3, #0]
  415fc4:	2b00      	cmp	r3, #0
  415fc6:	d1bb      	bne.n	415f40 <lv_task_handler+0x38>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
  415fc8:	4a31      	ldr	r2, [pc, #196]	; (416090 <lv_task_handler+0x188>)
  415fca:	6814      	ldr	r4, [r2, #0]
                        break;
  415fcc:	e000      	b.n	415fd0 <lv_task_handler+0xc8>
        end_flag                 = true;
  415fce:	462b      	mov	r3, r5
    } while(!end_flag);
  415fd0:	b9a3      	cbnz	r3, 415ffc <lv_task_handler+0xf4>
        task_deleted             = false;
  415fd2:	2300      	movs	r3, #0
  415fd4:	4a31      	ldr	r2, [pc, #196]	; (41609c <lv_task_handler+0x194>)
  415fd6:	7013      	strb	r3, [r2, #0]
        task_created             = false;
  415fd8:	4a2f      	ldr	r2, [pc, #188]	; (416098 <lv_task_handler+0x190>)
  415fda:	7013      	strb	r3, [r2, #0]
        task_list_changed        = false;
  415fdc:	4a30      	ldr	r2, [pc, #192]	; (4160a0 <lv_task_handler+0x198>)
  415fde:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  415fe0:	4830      	ldr	r0, [pc, #192]	; (4160a4 <lv_task_handler+0x19c>)
  415fe2:	4b32      	ldr	r3, [pc, #200]	; (4160ac <lv_task_handler+0x1a4>)
  415fe4:	4798      	blx	r3
  415fe6:	4b2a      	ldr	r3, [pc, #168]	; (416090 <lv_task_handler+0x188>)
  415fe8:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  415fea:	e7b7      	b.n	415f5c <lv_task_handler+0x54>
        end_flag                 = true;
  415fec:	462b      	mov	r3, r5
  415fee:	e7ef      	b.n	415fd0 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  415ff0:	2400      	movs	r4, #0
  415ff2:	e7ed      	b.n	415fd0 <lv_task_handler+0xc8>
  415ff4:	2400      	movs	r4, #0
  415ff6:	e7eb      	b.n	415fd0 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  415ff8:	2400      	movs	r4, #0
  415ffa:	e7e9      	b.n	415fd0 <lv_task_handler+0xc8>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  415ffc:	4829      	ldr	r0, [pc, #164]	; (4160a4 <lv_task_handler+0x19c>)
  415ffe:	4b2b      	ldr	r3, [pc, #172]	; (4160ac <lv_task_handler+0x1a4>)
  416000:	4798      	blx	r3
  416002:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TASK_READY;
  416004:	f04f 35ff 	mov.w	r5, #4294967295
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  416008:	e004      	b.n	416014 <lv_task_handler+0x10c>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
  41600a:	4621      	mov	r1, r4
  41600c:	4825      	ldr	r0, [pc, #148]	; (4160a4 <lv_task_handler+0x19c>)
  41600e:	4b26      	ldr	r3, [pc, #152]	; (4160a8 <lv_task_handler+0x1a0>)
  416010:	4798      	blx	r3
  416012:	4604      	mov	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  416014:	b154      	cbz	r4, 41602c <lv_task_handler+0x124>
  416016:	7d23      	ldrb	r3, [r4, #20]
  416018:	f013 0f07 	tst.w	r3, #7
  41601c:	d006      	beq.n	41602c <lv_task_handler+0x124>
        uint32_t delay = lv_task_time_remaining(next);
  41601e:	4620      	mov	r0, r4
  416020:	4b23      	ldr	r3, [pc, #140]	; (4160b0 <lv_task_handler+0x1a8>)
  416022:	4798      	blx	r3
        if(delay < time_till_next)
  416024:	4285      	cmp	r5, r0
  416026:	d9f0      	bls.n	41600a <lv_task_handler+0x102>
            time_till_next = delay;
  416028:	4605      	mov	r5, r0
  41602a:	e7ee      	b.n	41600a <lv_task_handler+0x102>
    busy_time += lv_tick_elaps(handler_start);
  41602c:	4630      	mov	r0, r6
  41602e:	4c21      	ldr	r4, [pc, #132]	; (4160b4 <lv_task_handler+0x1ac>)
  416030:	47a0      	blx	r4
  416032:	4a21      	ldr	r2, [pc, #132]	; (4160b8 <lv_task_handler+0x1b0>)
  416034:	6813      	ldr	r3, [r2, #0]
  416036:	4403      	add	r3, r0
  416038:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
  41603a:	4b20      	ldr	r3, [pc, #128]	; (4160bc <lv_task_handler+0x1b4>)
  41603c:	6818      	ldr	r0, [r3, #0]
  41603e:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
  416040:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  416044:	d315      	bcc.n	416072 <lv_task_handler+0x16a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
  416046:	4b1c      	ldr	r3, [pc, #112]	; (4160b8 <lv_task_handler+0x1b0>)
  416048:	681a      	ldr	r2, [r3, #0]
  41604a:	2364      	movs	r3, #100	; 0x64
  41604c:	fb03 f302 	mul.w	r3, r3, r2
  416050:	fbb3 f3f0 	udiv	r3, r3, r0
  416054:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  416056:	2b64      	cmp	r3, #100	; 0x64
  416058:	d80f      	bhi.n	41607a <lv_task_handler+0x172>
  41605a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  41605e:	b2db      	uxtb	r3, r3
  416060:	4a17      	ldr	r2, [pc, #92]	; (4160c0 <lv_task_handler+0x1b8>)
  416062:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
  416064:	2200      	movs	r2, #0
  416066:	4b14      	ldr	r3, [pc, #80]	; (4160b8 <lv_task_handler+0x1b0>)
  416068:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
  41606a:	4b08      	ldr	r3, [pc, #32]	; (41608c <lv_task_handler+0x184>)
  41606c:	4798      	blx	r3
  41606e:	4b13      	ldr	r3, [pc, #76]	; (4160bc <lv_task_handler+0x1b4>)
  416070:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
  416072:	2200      	movs	r2, #0
  416074:	4b03      	ldr	r3, [pc, #12]	; (416084 <lv_task_handler+0x17c>)
  416076:	701a      	strb	r2, [r3, #0]
    return time_till_next;
  416078:	e002      	b.n	416080 <lv_task_handler+0x178>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  41607a:	2300      	movs	r3, #0
  41607c:	e7f0      	b.n	416060 <lv_task_handler+0x158>
    if(already_running) return 1;
  41607e:	2501      	movs	r5, #1
}
  416080:	4628      	mov	r0, r5
  416082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  416084:	2041477c 	.word	0x2041477c
  416088:	2041478c 	.word	0x2041478c
  41608c:	00414345 	.word	0x00414345
  416090:	2043a238 	.word	0x2043a238
  416094:	00415eb9 	.word	0x00415eb9
  416098:	2041478d 	.word	0x2041478d
  41609c:	2041478e 	.word	0x2041478e
  4160a0:	2041478f 	.word	0x2041478f
  4160a4:	2043a168 	.word	0x2043a168
  4160a8:	00415389 	.word	0x00415389
  4160ac:	00415375 	.word	0x00415375
  4160b0:	00415d55 	.word	0x00415d55
  4160b4:	00414361 	.word	0x00414361
  4160b8:	20414780 	.word	0x20414780
  4160bc:	20414788 	.word	0x20414788
  4160c0:	20414784 	.word	0x20414784

004160c4 <lv_task_set_prio>:
{
  4160c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(task->prio == prio) return;
  4160c6:	7d03      	ldrb	r3, [r0, #20]
  4160c8:	f003 0307 	and.w	r3, r3, #7
  4160cc:	428b      	cmp	r3, r1
  4160ce:	d021      	beq.n	416114 <lv_task_set_prio+0x50>
  4160d0:	460d      	mov	r5, r1
  4160d2:	460f      	mov	r7, r1
  4160d4:	4606      	mov	r6, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  4160d6:	4813      	ldr	r0, [pc, #76]	; (416124 <lv_task_set_prio+0x60>)
  4160d8:	4b13      	ldr	r3, [pc, #76]	; (416128 <lv_task_set_prio+0x64>)
  4160da:	4798      	blx	r3
  4160dc:	4604      	mov	r4, r0
  4160de:	b18c      	cbz	r4, 416104 <lv_task_set_prio+0x40>
        if(i->prio <= prio) {
  4160e0:	7d23      	ldrb	r3, [r4, #20]
  4160e2:	f003 0307 	and.w	r3, r3, #7
  4160e6:	429d      	cmp	r5, r3
  4160e8:	da05      	bge.n	4160f6 <lv_task_set_prio+0x32>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  4160ea:	4621      	mov	r1, r4
  4160ec:	480d      	ldr	r0, [pc, #52]	; (416124 <lv_task_set_prio+0x60>)
  4160ee:	4b0f      	ldr	r3, [pc, #60]	; (41612c <lv_task_set_prio+0x68>)
  4160f0:	4798      	blx	r3
  4160f2:	4604      	mov	r4, r0
  4160f4:	e7f3      	b.n	4160de <lv_task_set_prio+0x1a>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
  4160f6:	42b4      	cmp	r4, r6
  4160f8:	d004      	beq.n	416104 <lv_task_set_prio+0x40>
  4160fa:	4622      	mov	r2, r4
  4160fc:	4631      	mov	r1, r6
  4160fe:	4809      	ldr	r0, [pc, #36]	; (416124 <lv_task_set_prio+0x60>)
  416100:	4b0b      	ldr	r3, [pc, #44]	; (416130 <lv_task_set_prio+0x6c>)
  416102:	4798      	blx	r3
    if(i == NULL) {
  416104:	b13c      	cbz	r4, 416116 <lv_task_set_prio+0x52>
    task_list_changed = true;
  416106:	2201      	movs	r2, #1
  416108:	4b0a      	ldr	r3, [pc, #40]	; (416134 <lv_task_set_prio+0x70>)
  41610a:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
  41610c:	7d33      	ldrb	r3, [r6, #20]
  41610e:	f367 0302 	bfi	r3, r7, #0, #3
  416112:	7533      	strb	r3, [r6, #20]
  416114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
  416116:	2200      	movs	r2, #0
  416118:	4631      	mov	r1, r6
  41611a:	4802      	ldr	r0, [pc, #8]	; (416124 <lv_task_set_prio+0x60>)
  41611c:	4b04      	ldr	r3, [pc, #16]	; (416130 <lv_task_set_prio+0x6c>)
  41611e:	4798      	blx	r3
  416120:	e7f1      	b.n	416106 <lv_task_set_prio+0x42>
  416122:	bf00      	nop
  416124:	2043a168 	.word	0x2043a168
  416128:	00415375 	.word	0x00415375
  41612c:	00415389 	.word	0x00415389
  416130:	00415565 	.word	0x00415565
  416134:	2041478f 	.word	0x2041478f

00416138 <lv_task_ready>:
{
  416138:	b510      	push	{r4, lr}
  41613a:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
  41613c:	4b03      	ldr	r3, [pc, #12]	; (41614c <lv_task_ready+0x14>)
  41613e:	4798      	blx	r3
  416140:	6823      	ldr	r3, [r4, #0]
  416142:	1ac0      	subs	r0, r0, r3
  416144:	3801      	subs	r0, #1
  416146:	6060      	str	r0, [r4, #4]
  416148:	bd10      	pop	{r4, pc}
  41614a:	bf00      	nop
  41614c:	00414345 	.word	0x00414345

00416150 <lv_task_enable>:
    lv_task_run = en;
  416150:	4b01      	ldr	r3, [pc, #4]	; (416158 <lv_task_enable+0x8>)
  416152:	7018      	strb	r0, [r3, #0]
  416154:	4770      	bx	lr
  416156:	bf00      	nop
  416158:	2041478c 	.word	0x2041478c

0041615c <_lv_task_core_init>:
{
  41615c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
  41615e:	2118      	movs	r1, #24
  416160:	4803      	ldr	r0, [pc, #12]	; (416170 <_lv_task_core_init+0x14>)
  416162:	4b04      	ldr	r3, [pc, #16]	; (416174 <_lv_task_core_init+0x18>)
  416164:	4798      	blx	r3
    lv_task_enable(true);
  416166:	2001      	movs	r0, #1
  416168:	4b03      	ldr	r3, [pc, #12]	; (416178 <_lv_task_core_init+0x1c>)
  41616a:	4798      	blx	r3
  41616c:	bd08      	pop	{r3, pc}
  41616e:	bf00      	nop
  416170:	2043a168 	.word	0x2043a168
  416174:	004152cb 	.word	0x004152cb
  416178:	00416151 	.word	0x00416151

0041617c <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
  41617c:	b430      	push	{r4, r5}
  41617e:	b082      	sub	sp, #8
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
  416180:	2300      	movs	r3, #0
  416182:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
  416184:	460c      	mov	r4, r1
  416186:	b151      	cbz	r1, 41619e <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
  416188:	6822      	ldr	r2, [r4, #0]
  41618a:	5c83      	ldrb	r3, [r0, r2]
  41618c:	f013 0f80 	tst.w	r3, #128	; 0x80
  416190:	d107      	bne.n	4161a2 <lv_txt_utf8_next+0x26>
        result = txt[*i];
  416192:	4618      	mov	r0, r3
        (*i)++;
  416194:	3201      	adds	r2, #1
  416196:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
  416198:	b002      	add	sp, #8
  41619a:	bc30      	pop	{r4, r5}
  41619c:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
  41619e:	ac01      	add	r4, sp, #4
  4161a0:	e7f2      	b.n	416188 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
  4161a2:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
  4161a6:	29c0      	cmp	r1, #192	; 0xc0
  4161a8:	d00b      	beq.n	4161c2 <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
  4161aa:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
  4161ae:	29e0      	cmp	r1, #224	; 0xe0
  4161b0:	d019      	beq.n	4161e6 <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
  4161b2:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
  4161b6:	29f0      	cmp	r1, #240	; 0xf0
  4161b8:	d033      	beq.n	416222 <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
  4161ba:	3201      	adds	r2, #1
  4161bc:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
  4161be:	2000      	movs	r0, #0
  4161c0:	e7ea      	b.n	416198 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
  4161c2:	019b      	lsls	r3, r3, #6
  4161c4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
  4161c8:	3201      	adds	r2, #1
  4161ca:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4161cc:	5c80      	ldrb	r0, [r0, r2]
  4161ce:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  4161d2:	2980      	cmp	r1, #128	; 0x80
  4161d4:	d001      	beq.n	4161da <lv_txt_utf8_next+0x5e>
  4161d6:	2000      	movs	r0, #0
  4161d8:	e7de      	b.n	416198 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  4161da:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  4161de:	4418      	add	r0, r3
            (*i)++;
  4161e0:	3201      	adds	r2, #1
  4161e2:	6022      	str	r2, [r4, #0]
  4161e4:	e7d8      	b.n	416198 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
  4161e6:	031b      	lsls	r3, r3, #12
  4161e8:	b29b      	uxth	r3, r3
            (*i)++;
  4161ea:	3201      	adds	r2, #1
  4161ec:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4161ee:	5c81      	ldrb	r1, [r0, r2]
  4161f0:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  4161f4:	2d80      	cmp	r5, #128	; 0x80
  4161f6:	d001      	beq.n	4161fc <lv_txt_utf8_next+0x80>
  4161f8:	2000      	movs	r0, #0
  4161fa:	e7cd      	b.n	416198 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  4161fc:	0189      	lsls	r1, r1, #6
  4161fe:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  416202:	440b      	add	r3, r1
            (*i)++;
  416204:	3201      	adds	r2, #1
  416206:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416208:	5c81      	ldrb	r1, [r0, r2]
  41620a:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  41620e:	2880      	cmp	r0, #128	; 0x80
  416210:	d001      	beq.n	416216 <lv_txt_utf8_next+0x9a>
  416212:	2000      	movs	r0, #0
  416214:	e7c0      	b.n	416198 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  416216:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  41621a:	1858      	adds	r0, r3, r1
            (*i)++;
  41621c:	3201      	adds	r2, #1
  41621e:	6022      	str	r2, [r4, #0]
  416220:	e7ba      	b.n	416198 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
  416222:	049b      	lsls	r3, r3, #18
  416224:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            (*i)++;
  416228:	3201      	adds	r2, #1
  41622a:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  41622c:	5c81      	ldrb	r1, [r0, r2]
  41622e:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  416232:	2d80      	cmp	r5, #128	; 0x80
  416234:	d001      	beq.n	41623a <lv_txt_utf8_next+0xbe>
  416236:	2000      	movs	r0, #0
  416238:	e7ae      	b.n	416198 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
  41623a:	0309      	lsls	r1, r1, #12
  41623c:	f401 317c 	and.w	r1, r1, #258048	; 0x3f000
  416240:	430b      	orrs	r3, r1
            (*i)++;
  416242:	3201      	adds	r2, #1
  416244:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416246:	5c81      	ldrb	r1, [r0, r2]
  416248:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  41624c:	2d80      	cmp	r5, #128	; 0x80
  41624e:	d001      	beq.n	416254 <lv_txt_utf8_next+0xd8>
  416250:	2000      	movs	r0, #0
  416252:	e7a1      	b.n	416198 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  416254:	0189      	lsls	r1, r1, #6
  416256:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  41625a:	440b      	add	r3, r1
            (*i)++;
  41625c:	3201      	adds	r2, #1
  41625e:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416260:	5c81      	ldrb	r1, [r0, r2]
  416262:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  416266:	2880      	cmp	r0, #128	; 0x80
  416268:	d001      	beq.n	41626e <lv_txt_utf8_next+0xf2>
  41626a:	2000      	movs	r0, #0
  41626c:	e794      	b.n	416198 <lv_txt_utf8_next+0x1c>
            result += txt[*i] & 0x3F;
  41626e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  416272:	1858      	adds	r0, r3, r1
            (*i)++;
  416274:	3201      	adds	r2, #1
  416276:	6022      	str	r2, [r4, #0]
  416278:	e78e      	b.n	416198 <lv_txt_utf8_next+0x1c>
	...

0041627c <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
  41627c:	b570      	push	{r4, r5, r6, lr}
  41627e:	b082      	sub	sp, #8
  416280:	4606      	mov	r6, r0
  416282:	460d      	mov	r5, r1
    uint32_t i        = 0;
  416284:	2400      	movs	r4, #0
  416286:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
  416288:	e005      	b.n	416296 <lv_txt_utf8_get_char_id+0x1a>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
  41628a:	4b06      	ldr	r3, [pc, #24]	; (4162a4 <lv_txt_utf8_get_char_id+0x28>)
  41628c:	681b      	ldr	r3, [r3, #0]
  41628e:	a901      	add	r1, sp, #4
  416290:	4630      	mov	r0, r6
  416292:	4798      	blx	r3
        char_cnt++;
  416294:	3401      	adds	r4, #1
    while(i < byte_id) {
  416296:	9b01      	ldr	r3, [sp, #4]
  416298:	42ab      	cmp	r3, r5
  41629a:	d3f6      	bcc.n	41628a <lv_txt_utf8_get_char_id+0xe>
    }

    return char_cnt;
}
  41629c:	4620      	mov	r0, r4
  41629e:	b002      	add	sp, #8
  4162a0:	bd70      	pop	{r4, r5, r6, pc}
  4162a2:	bf00      	nop
  4162a4:	20400054 	.word	0x20400054

004162a8 <_lv_txt_is_cmd>:
{
  4162a8:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  4162aa:	2923      	cmp	r1, #35	; 0x23
  4162ac:	d004      	beq.n	4162b8 <_lv_txt_is_cmd+0x10>
    bool ret = false;
  4162ae:	2000      	movs	r0, #0
    if(*state == LV_TXT_CMD_STATE_PAR) {
  4162b0:	7813      	ldrb	r3, [r2, #0]
  4162b2:	2b01      	cmp	r3, #1
  4162b4:	d014      	beq.n	4162e0 <_lv_txt_is_cmd+0x38>
}
  4162b6:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
  4162b8:	7803      	ldrb	r3, [r0, #0]
  4162ba:	b91b      	cbnz	r3, 4162c4 <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_PAR;
  4162bc:	2301      	movs	r3, #1
  4162be:	7003      	strb	r3, [r0, #0]
            ret    = true;
  4162c0:	4618      	mov	r0, r3
  4162c2:	e7f5      	b.n	4162b0 <_lv_txt_is_cmd+0x8>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
  4162c4:	2b01      	cmp	r3, #1
  4162c6:	d003      	beq.n	4162d0 <_lv_txt_is_cmd+0x28>
        else if(*state == LV_TXT_CMD_STATE_IN) {
  4162c8:	2b02      	cmp	r3, #2
  4162ca:	d005      	beq.n	4162d8 <_lv_txt_is_cmd+0x30>
    bool ret = false;
  4162cc:	2000      	movs	r0, #0
  4162ce:	e7ef      	b.n	4162b0 <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  4162d0:	2300      	movs	r3, #0
  4162d2:	7003      	strb	r3, [r0, #0]
    bool ret = false;
  4162d4:	4618      	mov	r0, r3
  4162d6:	e7eb      	b.n	4162b0 <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  4162d8:	2300      	movs	r3, #0
  4162da:	7003      	strb	r3, [r0, #0]
            ret    = true;
  4162dc:	2001      	movs	r0, #1
  4162de:	e7e7      	b.n	4162b0 <_lv_txt_is_cmd+0x8>
        if(c == ' ') {
  4162e0:	2920      	cmp	r1, #32
  4162e2:	d001      	beq.n	4162e8 <_lv_txt_is_cmd+0x40>
        ret = true;
  4162e4:	2001      	movs	r0, #1
  4162e6:	e7e6      	b.n	4162b6 <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
  4162e8:	2302      	movs	r3, #2
  4162ea:	7013      	strb	r3, [r2, #0]
        ret = true;
  4162ec:	2001      	movs	r0, #1
  4162ee:	4770      	bx	lr

004162f0 <lv_txt_get_next_word>:
{
  4162f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4162f4:	b089      	sub	sp, #36	; 0x24
  4162f6:	9103      	str	r1, [sp, #12]
  4162f8:	9202      	str	r2, [sp, #8]
  4162fa:	9304      	str	r3, [sp, #16]
  4162fc:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
  416300:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  416304:	9305      	str	r3, [sp, #20]
    if(txt == NULL || txt[0] == '\0') return 0;
  416306:	2800      	cmp	r0, #0
  416308:	f000 808f 	beq.w	41642a <lv_txt_get_next_word+0x13a>
  41630c:	4607      	mov	r7, r0
  41630e:	7803      	ldrb	r3, [r0, #0]
  416310:	2b00      	cmp	r3, #0
  416312:	f000 808d 	beq.w	416430 <lv_txt_get_next_word+0x140>
    if(font == NULL) return 0;
  416316:	2900      	cmp	r1, #0
  416318:	f000 8090 	beq.w	41643c <lv_txt_get_next_word+0x14c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  41631c:	f01b 0f02 	tst.w	fp, #2
  416320:	d002      	beq.n	416328 <lv_txt_get_next_word+0x38>
  416322:	f647 4318 	movw	r3, #31768	; 0x7c18
  416326:	9304      	str	r3, [sp, #16]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
  416328:	2600      	movs	r6, #0
  41632a:	9607      	str	r6, [sp, #28]
  41632c:	9606      	str	r6, [sp, #24]
    letter = _lv_txt_encoded_next(txt, &i_next);
  41632e:	4b47      	ldr	r3, [pc, #284]	; (41644c <lv_txt_get_next_word+0x15c>)
  416330:	681b      	ldr	r3, [r3, #0]
  416332:	a907      	add	r1, sp, #28
  416334:	4638      	mov	r0, r7
  416336:	4798      	blx	r3
  416338:	4604      	mov	r4, r0
    i_next_next = i_next;
  41633a:	9b07      	ldr	r3, [sp, #28]
  41633c:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
  41633e:	f04f 38ff 	mov.w	r8, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
  416342:	46b1      	mov	r9, r6
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
  416344:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
  416346:	9601      	str	r6, [sp, #4]
    while(txt[i] != '\0') {
  416348:	e039      	b.n	4163be <lv_txt_get_next_word+0xce>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  41634a:	9a01      	ldr	r2, [sp, #4]
  41634c:	4621      	mov	r1, r4
  41634e:	9803      	ldr	r0, [sp, #12]
  416350:	4b3f      	ldr	r3, [pc, #252]	; (416450 <lv_txt_get_next_word+0x160>)
  416352:	4798      	blx	r3
  416354:	b203      	sxth	r3, r0
        cur_w += letter_w;
  416356:	4428      	add	r0, r5
  416358:	b280      	uxth	r0, r0
  41635a:	b205      	sxth	r5, r0
        if(letter_w > 0) {
  41635c:	2b00      	cmp	r3, #0
  41635e:	dd02      	ble.n	416366 <lv_txt_get_next_word+0x76>
            cur_w += letter_space;
  416360:	9b02      	ldr	r3, [sp, #8]
  416362:	18c5      	adds	r5, r0, r3
  416364:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  416366:	f1b8 3fff 	cmp.w	r8, #4294967295
  41636a:	d00f      	beq.n	41638c <lv_txt_get_next_word+0x9c>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  41636c:	2c0d      	cmp	r4, #13
  41636e:	bf18      	it	ne
  416370:	2c0a      	cmpne	r4, #10
  416372:	bf0c      	ite	eq
  416374:	2101      	moveq	r1, #1
  416376:	2100      	movne	r1, #0
  416378:	d038      	beq.n	4163ec <lv_txt_get_next_word+0xfc>
  41637a:	2300      	movs	r3, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  41637c:	4a35      	ldr	r2, [pc, #212]	; (416454 <lv_txt_get_next_word+0x164>)
  41637e:	5cd2      	ldrb	r2, [r2, r3]
  416380:	b162      	cbz	r2, 41639c <lv_txt_get_next_word+0xac>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
  416382:	4294      	cmp	r4, r2
  416384:	d009      	beq.n	41639a <lv_txt_get_next_word+0xaa>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  416386:	3301      	adds	r3, #1
  416388:	b2db      	uxtb	r3, r3
  41638a:	e7f7      	b.n	41637c <lv_txt_get_next_word+0x8c>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  41638c:	9b02      	ldr	r3, [sp, #8]
  41638e:	1aeb      	subs	r3, r5, r3
  416390:	9a04      	ldr	r2, [sp, #16]
  416392:	4293      	cmp	r3, r2
  416394:	ddea      	ble.n	41636c <lv_txt_get_next_word+0x7c>
            break_index = i;
  416396:	46b0      	mov	r8, r6
  416398:	e7e8      	b.n	41636c <lv_txt_get_next_word+0x7c>
            ret = true; /*If match then it is break char*/
  41639a:	2101      	movs	r1, #1
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  41639c:	bb31      	cbnz	r1, 4163ec <lv_txt_get_next_word+0xfc>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
  41639e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4163a0:	3300      	adds	r3, #0
  4163a2:	bf18      	it	ne
  4163a4:	2301      	movne	r3, #1
  4163a6:	f1b8 3fff 	cmp.w	r8, #4294967295
  4163aa:	bf18      	it	ne
  4163ac:	2300      	movne	r3, #0
  4163ae:	b10b      	cbz	r3, 4163b4 <lv_txt_get_next_word+0xc4>
  4163b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4163b2:	601d      	str	r5, [r3, #0]
        i = i_next;
  4163b4:	9e07      	ldr	r6, [sp, #28]
        i_next = i_next_next;
  4163b6:	9b06      	ldr	r3, [sp, #24]
  4163b8:	9307      	str	r3, [sp, #28]
            ret = true; /*If match then it is break char*/
  4163ba:	46d1      	mov	r9, sl
  4163bc:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
  4163be:	5dbb      	ldrb	r3, [r7, r6]
  4163c0:	b1e3      	cbz	r3, 4163fc <lv_txt_get_next_word+0x10c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  4163c2:	4b22      	ldr	r3, [pc, #136]	; (41644c <lv_txt_get_next_word+0x15c>)
  4163c4:	681b      	ldr	r3, [r3, #0]
  4163c6:	a906      	add	r1, sp, #24
  4163c8:	4638      	mov	r0, r7
  4163ca:	4798      	blx	r3
  4163cc:	9001      	str	r0, [sp, #4]
        word_len++;
  4163ce:	f109 0a01 	add.w	sl, r9, #1
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  4163d2:	f01b 0f01 	tst.w	fp, #1
  4163d6:	d0b8      	beq.n	41634a <lv_txt_get_next_word+0x5a>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
  4163d8:	4621      	mov	r1, r4
  4163da:	9814      	ldr	r0, [sp, #80]	; 0x50
  4163dc:	4b1e      	ldr	r3, [pc, #120]	; (416458 <lv_txt_get_next_word+0x168>)
  4163de:	4798      	blx	r3
  4163e0:	2800      	cmp	r0, #0
  4163e2:	d0b2      	beq.n	41634a <lv_txt_get_next_word+0x5a>
                i = i_next;
  4163e4:	9e07      	ldr	r6, [sp, #28]
                i_next = i_next_next;
  4163e6:	9b06      	ldr	r3, [sp, #24]
  4163e8:	9307      	str	r3, [sp, #28]
                continue;   /*Skip the letter is it is part of a command*/
  4163ea:	e7e6      	b.n	4163ba <lv_txt_get_next_word+0xca>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
  4163ec:	2e00      	cmp	r6, #0
  4163ee:	bf08      	it	eq
  4163f0:	f1b8 3fff 	cmpeq.w	r8, #4294967295
  4163f4:	d102      	bne.n	4163fc <lv_txt_get_next_word+0x10c>
  4163f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4163f8:	b103      	cbz	r3, 4163fc <lv_txt_get_next_word+0x10c>
  4163fa:	601d      	str	r5, [r3, #0]
    if(break_index == NO_BREAK_FOUND) {
  4163fc:	f1b8 3fff 	cmp.w	r8, #4294967295
  416400:	d008      	beq.n	416414 <lv_txt_get_next_word+0x124>
    if(force) return break_index;
  416402:	9b05      	ldr	r3, [sp, #20]
  416404:	b9b3      	cbnz	r3, 416434 <lv_txt_get_next_word+0x144>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
  416406:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  416408:	b1eb      	cbz	r3, 416446 <lv_txt_get_next_word+0x156>
  41640a:	2300      	movs	r3, #0
  41640c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  41640e:	6013      	str	r3, [r2, #0]
    return 0;
  416410:	4698      	mov	r8, r3
  416412:	e00f      	b.n	416434 <lv_txt_get_next_word+0x144>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  416414:	f1b9 0f00 	cmp.w	r9, #0
  416418:	d004      	beq.n	416424 <lv_txt_get_next_word+0x134>
  41641a:	9b01      	ldr	r3, [sp, #4]
  41641c:	2c0d      	cmp	r4, #13
  41641e:	bf08      	it	eq
  416420:	2b0a      	cmpeq	r3, #10
  416422:	d10e      	bne.n	416442 <lv_txt_get_next_word+0x152>
  416424:	f8dd 801c 	ldr.w	r8, [sp, #28]
  416428:	e004      	b.n	416434 <lv_txt_get_next_word+0x144>
    if(txt == NULL || txt[0] == '\0') return 0;
  41642a:	f04f 0800 	mov.w	r8, #0
  41642e:	e001      	b.n	416434 <lv_txt_get_next_word+0x144>
  416430:	f04f 0800 	mov.w	r8, #0
}
  416434:	4640      	mov	r0, r8
  416436:	b009      	add	sp, #36	; 0x24
  416438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
  41643c:	f04f 0800 	mov.w	r8, #0
  416440:	e7f8      	b.n	416434 <lv_txt_get_next_word+0x144>
  416442:	46b0      	mov	r8, r6
  416444:	e7f6      	b.n	416434 <lv_txt_get_next_word+0x144>
    return 0;
  416446:	f04f 0800 	mov.w	r8, #0
  41644a:	e7f3      	b.n	416434 <lv_txt_get_next_word+0x144>
  41644c:	20400054 	.word	0x20400054
  416450:	00412d85 	.word	0x00412d85
  416454:	00424974 	.word	0x00424974
  416458:	004162a9 	.word	0x004162a9

0041645c <_lv_txt_get_next_line>:
{
  41645c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  416460:	b089      	sub	sp, #36	; 0x24
  416462:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
  416466:	2800      	cmp	r0, #0
  416468:	d05f      	beq.n	41652a <_lv_txt_get_next_line+0xce>
  41646a:	4689      	mov	r9, r1
  41646c:	4690      	mov	r8, r2
  41646e:	461d      	mov	r5, r3
  416470:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  416472:	2900      	cmp	r1, #0
  416474:	d05b      	beq.n	41652e <_lv_txt_get_next_line+0xd2>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
  416476:	f016 0f12 	tst.w	r6, #18
  41647a:	d145      	bne.n	416508 <_lv_txt_get_next_line+0xac>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  41647c:	f016 0f02 	tst.w	r6, #2
  416480:	d001      	beq.n	416486 <_lv_txt_get_next_line+0x2a>
  416482:	f647 4518 	movw	r5, #31768	; 0x7c18
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  416486:	2300      	movs	r3, #0
  416488:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
  41648c:	9306      	str	r3, [sp, #24]
    while(txt[i] != '\0' && max_width > 0) {
  41648e:	9b06      	ldr	r3, [sp, #24]
  416490:	18e0      	adds	r0, r4, r3
  416492:	5ce2      	ldrb	r2, [r4, r3]
  416494:	b332      	cbz	r2, 4164e4 <_lv_txt_get_next_line+0x88>
  416496:	2d00      	cmp	r5, #0
  416498:	dd24      	ble.n	4164e4 <_lv_txt_get_next_line+0x88>
        uint32_t word_w = 0;
  41649a:	2200      	movs	r2, #0
  41649c:	9205      	str	r2, [sp, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
  41649e:	fab3 f383 	clz	r3, r3
  4164a2:	095b      	lsrs	r3, r3, #5
  4164a4:	9303      	str	r3, [sp, #12]
  4164a6:	f10d 031f 	add.w	r3, sp, #31
  4164aa:	9302      	str	r3, [sp, #8]
  4164ac:	ab05      	add	r3, sp, #20
  4164ae:	9301      	str	r3, [sp, #4]
  4164b0:	9600      	str	r6, [sp, #0]
  4164b2:	462b      	mov	r3, r5
  4164b4:	4642      	mov	r2, r8
  4164b6:	4649      	mov	r1, r9
  4164b8:	4f1e      	ldr	r7, [pc, #120]	; (416534 <_lv_txt_get_next_line+0xd8>)
  4164ba:	47b8      	blx	r7
        max_width -= word_w;
  4164bc:	9b05      	ldr	r3, [sp, #20]
  4164be:	1aed      	subs	r5, r5, r3
  4164c0:	b22d      	sxth	r5, r5
        if(advance == 0) {
  4164c2:	4603      	mov	r3, r0
  4164c4:	b310      	cbz	r0, 41650c <_lv_txt_get_next_line+0xb0>
        i += advance;
  4164c6:	9806      	ldr	r0, [sp, #24]
  4164c8:	4418      	add	r0, r3
  4164ca:	9006      	str	r0, [sp, #24]
        if(txt[0] == '\n' || txt[0] == '\r') break;
  4164cc:	7823      	ldrb	r3, [r4, #0]
  4164ce:	2b0d      	cmp	r3, #13
  4164d0:	bf18      	it	ne
  4164d2:	2b0a      	cmpne	r3, #10
  4164d4:	d006      	beq.n	4164e4 <_lv_txt_get_next_line+0x88>
        if(txt[i] == '\n' || txt[i] == '\r') {
  4164d6:	5c23      	ldrb	r3, [r4, r0]
  4164d8:	2b0d      	cmp	r3, #13
  4164da:	bf18      	it	ne
  4164dc:	2b0a      	cmpne	r3, #10
  4164de:	d1d6      	bne.n	41648e <_lv_txt_get_next_line+0x32>
            i++;  /* Include the following newline in the current line */
  4164e0:	3001      	adds	r0, #1
  4164e2:	9006      	str	r0, [sp, #24]
    if(i == 0) {
  4164e4:	9b06      	ldr	r3, [sp, #24]
  4164e6:	b1d3      	cbz	r3, 41651e <_lv_txt_get_next_line+0xc2>
    return i;
  4164e8:	9806      	ldr	r0, [sp, #24]
}
  4164ea:	b009      	add	sp, #36	; 0x24
  4164ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  4164f0:	3001      	adds	r0, #1
  4164f2:	5c23      	ldrb	r3, [r4, r0]
  4164f4:	2b0a      	cmp	r3, #10
  4164f6:	bf18      	it	ne
  4164f8:	2b0d      	cmpne	r3, #13
  4164fa:	d001      	beq.n	416500 <_lv_txt_get_next_line+0xa4>
  4164fc:	2b00      	cmp	r3, #0
  4164fe:	d1f7      	bne.n	4164f0 <_lv_txt_get_next_line+0x94>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
  416500:	2b00      	cmp	r3, #0
  416502:	d0f2      	beq.n	4164ea <_lv_txt_get_next_line+0x8e>
  416504:	3001      	adds	r0, #1
  416506:	e7f0      	b.n	4164ea <_lv_txt_get_next_line+0x8e>
  416508:	2000      	movs	r0, #0
  41650a:	e7f2      	b.n	4164f2 <_lv_txt_get_next_line+0x96>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
  41650c:	9b06      	ldr	r3, [sp, #24]
  41650e:	2b00      	cmp	r3, #0
  416510:	d1e8      	bne.n	4164e4 <_lv_txt_get_next_line+0x88>
  416512:	4b09      	ldr	r3, [pc, #36]	; (416538 <_lv_txt_get_next_line+0xdc>)
  416514:	681b      	ldr	r3, [r3, #0]
  416516:	a906      	add	r1, sp, #24
  416518:	4620      	mov	r0, r4
  41651a:	4798      	blx	r3
  41651c:	e7e2      	b.n	4164e4 <_lv_txt_get_next_line+0x88>
        _lv_txt_encoded_next(txt, &i);
  41651e:	4b06      	ldr	r3, [pc, #24]	; (416538 <_lv_txt_get_next_line+0xdc>)
  416520:	681b      	ldr	r3, [r3, #0]
  416522:	a906      	add	r1, sp, #24
  416524:	4620      	mov	r0, r4
  416526:	4798      	blx	r3
  416528:	e7de      	b.n	4164e8 <_lv_txt_get_next_line+0x8c>
    if(txt == NULL) return 0;
  41652a:	2000      	movs	r0, #0
  41652c:	e7dd      	b.n	4164ea <_lv_txt_get_next_line+0x8e>
    if(font == NULL) return 0;
  41652e:	2000      	movs	r0, #0
  416530:	e7db      	b.n	4164ea <_lv_txt_get_next_line+0x8e>
  416532:	bf00      	nop
  416534:	004162f1 	.word	0x004162f1
  416538:	20400054 	.word	0x20400054

0041653c <_lv_txt_get_width>:
{
  41653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416540:	b085      	sub	sp, #20
  416542:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    if(txt == NULL) return 0;
  416546:	2800      	cmp	r0, #0
  416548:	d041      	beq.n	4165ce <_lv_txt_get_width+0x92>
  41654a:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  41654c:	2a00      	cmp	r2, #0
  41654e:	d041      	beq.n	4165d4 <_lv_txt_get_width+0x98>
    uint32_t i                   = 0;
  416550:	2000      	movs	r0, #0
  416552:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  416554:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
  416558:	b129      	cbz	r1, 416566 <_lv_txt_get_width+0x2a>
  41655a:	4698      	mov	r8, r3
  41655c:	9201      	str	r2, [sp, #4]
  41655e:	460d      	mov	r5, r1
  416560:	f04f 0a00 	mov.w	sl, #0
  416564:	e00e      	b.n	416584 <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
  416566:	4682      	mov	sl, r0
  416568:	e02d      	b.n	4165c6 <_lv_txt_get_width+0x8a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
  41656a:	464a      	mov	r2, r9
  41656c:	4659      	mov	r1, fp
  41656e:	9801      	ldr	r0, [sp, #4]
  416570:	4b1a      	ldr	r3, [pc, #104]	; (4165dc <_lv_txt_get_width+0xa0>)
  416572:	4798      	blx	r3
  416574:	b203      	sxth	r3, r0
            if(char_width > 0) {
  416576:	2b00      	cmp	r3, #0
  416578:	dd04      	ble.n	416584 <_lv_txt_get_width+0x48>
                width += char_width;
  41657a:	4450      	add	r0, sl
                width += letter_space;
  41657c:	fa18 f080 	uxtah	r0, r8, r0
  416580:	fa0f fa80 	sxth.w	sl, r0
        while(i < length) {
  416584:	9b03      	ldr	r3, [sp, #12]
  416586:	429d      	cmp	r5, r3
  416588:	d916      	bls.n	4165b8 <_lv_txt_get_width+0x7c>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
  41658a:	4e15      	ldr	r6, [pc, #84]	; (4165e0 <_lv_txt_get_width+0xa4>)
  41658c:	6833      	ldr	r3, [r6, #0]
  41658e:	a903      	add	r1, sp, #12
  416590:	4620      	mov	r0, r4
  416592:	4798      	blx	r3
  416594:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
  416596:	6833      	ldr	r3, [r6, #0]
  416598:	2100      	movs	r1, #0
  41659a:	9803      	ldr	r0, [sp, #12]
  41659c:	4420      	add	r0, r4
  41659e:	4798      	blx	r3
  4165a0:	4681      	mov	r9, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  4165a2:	f017 0f01 	tst.w	r7, #1
  4165a6:	d0e0      	beq.n	41656a <_lv_txt_get_width+0x2e>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
  4165a8:	4659      	mov	r1, fp
  4165aa:	f10d 000b 	add.w	r0, sp, #11
  4165ae:	4b0d      	ldr	r3, [pc, #52]	; (4165e4 <_lv_txt_get_width+0xa8>)
  4165b0:	4798      	blx	r3
  4165b2:	2800      	cmp	r0, #0
  4165b4:	d1e6      	bne.n	416584 <_lv_txt_get_width+0x48>
  4165b6:	e7d8      	b.n	41656a <_lv_txt_get_width+0x2e>
        if(width > 0) {
  4165b8:	f1ba 0f00 	cmp.w	sl, #0
  4165bc:	dd03      	ble.n	4165c6 <_lv_txt_get_width+0x8a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
  4165be:	ebaa 0008 	sub.w	r0, sl, r8
  4165c2:	fa0f fa80 	sxth.w	sl, r0
}
  4165c6:	4650      	mov	r0, sl
  4165c8:	b005      	add	sp, #20
  4165ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
  4165ce:	f04f 0a00 	mov.w	sl, #0
  4165d2:	e7f8      	b.n	4165c6 <_lv_txt_get_width+0x8a>
    if(font == NULL) return 0;
  4165d4:	f04f 0a00 	mov.w	sl, #0
  4165d8:	e7f5      	b.n	4165c6 <_lv_txt_get_width+0x8a>
  4165da:	bf00      	nop
  4165dc:	00412d85 	.word	0x00412d85
  4165e0:	20400054 	.word	0x20400054
  4165e4:	004162a9 	.word	0x004162a9

004165e8 <_lv_txt_get_size>:
{
  4165e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4165ec:	b087      	sub	sp, #28
  4165ee:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
  4165f2:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  4165f6:	9404      	str	r4, [sp, #16]
  4165f8:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    size_res->x = 0;
  4165fc:	2400      	movs	r4, #0
  4165fe:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
  416600:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
  416602:	2900      	cmp	r1, #0
  416604:	d04d      	beq.n	4166a2 <_lv_txt_get_size+0xba>
  416606:	460f      	mov	r7, r1
    if(font == NULL) return;
  416608:	2a00      	cmp	r2, #0
  41660a:	d04a      	beq.n	4166a2 <_lv_txt_get_size+0xba>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  41660c:	f018 0f02 	tst.w	r8, #2
  416610:	d002      	beq.n	416618 <_lv_txt_get_size+0x30>
  416612:	f647 4118 	movw	r1, #31768	; 0x7c18
  416616:	9104      	str	r1, [sp, #16]
  416618:	9303      	str	r3, [sp, #12]
  41661a:	9202      	str	r2, [sp, #8]
  41661c:	4604      	mov	r4, r0
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  41661e:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
  416622:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
  416624:	fa1f fa83 	uxth.w	sl, r3
    uint32_t line_start     = 0;
  416628:	2500      	movs	r5, #0
    while(text[line_start] != '\0') {
  41662a:	197e      	adds	r6, r7, r5
  41662c:	5d7b      	ldrb	r3, [r7, r5]
  41662e:	b323      	cbz	r3, 41667a <_lv_txt_get_size+0x92>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  416630:	f8cd 8000 	str.w	r8, [sp]
  416634:	9b04      	ldr	r3, [sp, #16]
  416636:	9a03      	ldr	r2, [sp, #12]
  416638:	9902      	ldr	r1, [sp, #8]
  41663a:	4630      	mov	r0, r6
  41663c:	f8df b074 	ldr.w	fp, [pc, #116]	; 4166b4 <_lv_txt_get_size+0xcc>
  416640:	47d8      	blx	fp
  416642:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  416644:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  416648:	eb03 020a 	add.w	r2, r3, sl
  41664c:	444a      	add	r2, r9
  41664e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  416652:	d226      	bcs.n	4166a2 <_lv_txt_get_size+0xba>
            size_res->y += letter_height;
  416654:	4453      	add	r3, sl
            size_res->y += line_space;
  416656:	fa19 f383 	uxtah	r3, r9, r3
  41665a:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
  41665c:	f8cd 8000 	str.w	r8, [sp]
  416660:	9b03      	ldr	r3, [sp, #12]
  416662:	9a02      	ldr	r2, [sp, #8]
  416664:	4601      	mov	r1, r0
  416666:	4630      	mov	r0, r6
  416668:	4e11      	ldr	r6, [pc, #68]	; (4166b0 <_lv_txt_get_size+0xc8>)
  41666a:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
  41666c:	f9b4 3000 	ldrsh.w	r3, [r4]
  416670:	4298      	cmp	r0, r3
  416672:	bfb8      	it	lt
  416674:	4618      	movlt	r0, r3
  416676:	8020      	strh	r0, [r4, #0]
  416678:	e7d7      	b.n	41662a <_lv_txt_get_size+0x42>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
  41667a:	b15d      	cbz	r5, 416694 <_lv_txt_get_size+0xac>
  41667c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  416680:	2b0d      	cmp	r3, #13
  416682:	bf18      	it	ne
  416684:	2b0a      	cmpne	r3, #10
  416686:	d105      	bne.n	416694 <_lv_txt_get_size+0xac>
        size_res->y += letter_height + line_space;
  416688:	eb0a 0309 	add.w	r3, sl, r9
  41668c:	8862      	ldrh	r2, [r4, #2]
  41668e:	fa12 f383 	uxtah	r3, r2, r3
  416692:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
  416694:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  416698:	b133      	cbz	r3, 4166a8 <_lv_txt_get_size+0xc0>
        size_res->y -= line_space;
  41669a:	eba3 0909 	sub.w	r9, r3, r9
  41669e:	f8a4 9002 	strh.w	r9, [r4, #2]
}
  4166a2:	b007      	add	sp, #28
  4166a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y = letter_height;
  4166a8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4166ac:	8063      	strh	r3, [r4, #2]
  4166ae:	e7f8      	b.n	4166a2 <_lv_txt_get_size+0xba>
  4166b0:	0041653d 	.word	0x0041653d
  4166b4:	0041645d 	.word	0x0041645d

004166b8 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
  4166b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4166bc:	4681      	mov	r9, r0
  4166be:	468a      	mov	sl, r1
  4166c0:	4615      	mov	r5, r2
  4166c2:	461f      	mov	r7, r3
  4166c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
  4166c8:	4608      	mov	r0, r1
  4166ca:	e003      	b.n	4166d4 <_lv_utils_bsearch+0x1c>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
            base = (middle += size);
        }
        else if(c < 0) {
  4166cc:	2800      	cmp	r0, #0
  4166ce:	da16      	bge.n	4166fe <_lv_utils_bsearch+0x46>
            n /= 2;
            middle = base;
  4166d0:	4650      	mov	r0, sl
            n /= 2;
  4166d2:	4635      	mov	r5, r6
    for(middle = base; n != 0;) {
  4166d4:	b185      	cbz	r5, 4166f8 <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
  4166d6:	086e      	lsrs	r6, r5, #1
  4166d8:	fb07 0406 	mla	r4, r7, r6, r0
        if((c = (*cmp)(key, middle)) > 0) {
  4166dc:	4621      	mov	r1, r4
  4166de:	4648      	mov	r0, r9
  4166e0:	47c0      	blx	r8
  4166e2:	2800      	cmp	r0, #0
  4166e4:	ddf2      	ble.n	4166cc <_lv_utils_bsearch+0x14>
            n    = (n / 2) - ((n & 1) == 0);
  4166e6:	f015 0f01 	tst.w	r5, #1
  4166ea:	bf0c      	ite	eq
  4166ec:	2501      	moveq	r5, #1
  4166ee:	2500      	movne	r5, #0
  4166f0:	1b75      	subs	r5, r6, r5
            base = (middle += size);
  4166f2:	19e0      	adds	r0, r4, r7
  4166f4:	4682      	mov	sl, r0
  4166f6:	e7ed      	b.n	4166d4 <_lv_utils_bsearch+0x1c>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
  4166f8:	2000      	movs	r0, #0
  4166fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return (char *)middle;
  4166fe:	4620      	mov	r0, r4
}
  416700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00416704 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  416704:	b570      	push	{r4, r5, r6, lr}
  416706:	4604      	mov	r4, r0
  416708:	460d      	mov	r5, r1
  41670a:	4616      	mov	r6, r2
    if(th->base) {
  41670c:	6880      	ldr	r0, [r0, #8]
  41670e:	b108      	cbz	r0, 416714 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
  416710:	f7ff fff8 	bl	416704 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
  416714:	6863      	ldr	r3, [r4, #4]
  416716:	b11b      	cbz	r3, 416720 <apply_theme+0x1c>
        th->apply_xcb(obj, name);
  416718:	4631      	mov	r1, r6
  41671a:	4628      	mov	r0, r5
  41671c:	4798      	blx	r3
  41671e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else if(th->apply_cb) {
  416720:	6823      	ldr	r3, [r4, #0]
  416722:	b123      	cbz	r3, 41672e <apply_theme+0x2a>
        th->apply_cb(act_theme, obj, name);
  416724:	4632      	mov	r2, r6
  416726:	4629      	mov	r1, r5
  416728:	4801      	ldr	r0, [pc, #4]	; (416730 <apply_theme+0x2c>)
  41672a:	6800      	ldr	r0, [r0, #0]
  41672c:	4798      	blx	r3
  41672e:	bd70      	pop	{r4, r5, r6, pc}
  416730:	20414790 	.word	0x20414790

00416734 <clear_styles>:
    }
}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
  416734:	b538      	push	{r3, r4, r5, lr}
  416736:	4604      	mov	r4, r0
    switch(name) {
  416738:	3901      	subs	r1, #1
  41673a:	2927      	cmp	r1, #39	; 0x27
  41673c:	f200 8150 	bhi.w	4169e0 <clear_styles+0x2ac>
  416740:	e8df f011 	tbh	[pc, r1, lsl #1]
  416744:	002c0028 	.word	0x002c0028
  416748:	0046006b 	.word	0x0046006b
  41674c:	00380034 	.word	0x00380034
  416750:	0057012d 	.word	0x0057012d
  416754:	00ea0083 	.word	0x00ea0083
  416758:	013a0030 	.word	0x013a0030
  41675c:	014500dd 	.word	0x014500dd
  416760:	005f005b 	.word	0x005f005b
  416764:	0063003f 	.word	0x0063003f
  416768:	00670095 	.word	0x00670095
  41676c:	00d900cf 	.word	0x00d900cf
  416770:	008a0141 	.word	0x008a0141
  416774:	00cb008e 	.word	0x00cb008e
  416778:	00c40099 	.word	0x00c40099
  41677c:	01220079 	.word	0x01220079
  416780:	00720129 	.word	0x00720129
  416784:	00f4004d 	.word	0x00f4004d
  416788:	00b300a3 	.word	0x00b300a3
  41678c:	00ba0115 	.word	0x00ba0115
  416790:	01110104 	.word	0x01110104
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  416794:	2100      	movs	r1, #0
  416796:	4b93      	ldr	r3, [pc, #588]	; (4169e4 <clear_styles+0x2b0>)
  416798:	4798      	blx	r3
            break;
  41679a:	bd38      	pop	{r3, r4, r5, pc}
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  41679c:	2100      	movs	r1, #0
  41679e:	4b91      	ldr	r3, [pc, #580]	; (4169e4 <clear_styles+0x2b0>)
  4167a0:	4798      	blx	r3
            break;
  4167a2:	bd38      	pop	{r3, r4, r5, pc}
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4167a4:	2100      	movs	r1, #0
  4167a6:	4b8f      	ldr	r3, [pc, #572]	; (4169e4 <clear_styles+0x2b0>)
  4167a8:	4798      	blx	r3
            break;
  4167aa:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4167ac:	2100      	movs	r1, #0
  4167ae:	4b8d      	ldr	r3, [pc, #564]	; (4169e4 <clear_styles+0x2b0>)
  4167b0:	4798      	blx	r3
            break;
  4167b2:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
  4167b4:	2100      	movs	r1, #0
  4167b6:	4d8b      	ldr	r5, [pc, #556]	; (4169e4 <clear_styles+0x2b0>)
  4167b8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
  4167ba:	2101      	movs	r1, #1
  4167bc:	4620      	mov	r0, r4
  4167be:	47a8      	blx	r5
            break;
  4167c0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
  4167c2:	2100      	movs	r1, #0
  4167c4:	4d87      	ldr	r5, [pc, #540]	; (4169e4 <clear_styles+0x2b0>)
  4167c6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
  4167c8:	2101      	movs	r1, #1
  4167ca:	4620      	mov	r0, r4
  4167cc:	47a8      	blx	r5
            break;
  4167ce:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
  4167d0:	2100      	movs	r1, #0
  4167d2:	4d84      	ldr	r5, [pc, #528]	; (4169e4 <clear_styles+0x2b0>)
  4167d4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
  4167d6:	2101      	movs	r1, #1
  4167d8:	4620      	mov	r0, r4
  4167da:	47a8      	blx	r5
            break;
  4167dc:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
  4167de:	2100      	movs	r1, #0
  4167e0:	4d80      	ldr	r5, [pc, #512]	; (4169e4 <clear_styles+0x2b0>)
  4167e2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
  4167e4:	2101      	movs	r1, #1
  4167e6:	4620      	mov	r0, r4
  4167e8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
  4167ea:	2102      	movs	r1, #2
  4167ec:	4620      	mov	r0, r4
  4167ee:	47a8      	blx	r5
            break;
  4167f0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
  4167f2:	2100      	movs	r1, #0
  4167f4:	4b7b      	ldr	r3, [pc, #492]	; (4169e4 <clear_styles+0x2b0>)
  4167f6:	4798      	blx	r3
            break;
  4167f8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  4167fa:	2100      	movs	r1, #0
  4167fc:	4b79      	ldr	r3, [pc, #484]	; (4169e4 <clear_styles+0x2b0>)
  4167fe:	4798      	blx	r3
            break;
  416800:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  416802:	2100      	movs	r1, #0
  416804:	4b77      	ldr	r3, [pc, #476]	; (4169e4 <clear_styles+0x2b0>)
  416806:	4798      	blx	r3
            break;
  416808:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  41680a:	2100      	movs	r1, #0
  41680c:	4b75      	ldr	r3, [pc, #468]	; (4169e4 <clear_styles+0x2b0>)
  41680e:	4798      	blx	r3
            break;
  416810:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  416812:	2100      	movs	r1, #0
  416814:	4b73      	ldr	r3, [pc, #460]	; (4169e4 <clear_styles+0x2b0>)
  416816:	4798      	blx	r3
            break;
  416818:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
  41681a:	2100      	movs	r1, #0
  41681c:	4d71      	ldr	r5, [pc, #452]	; (4169e4 <clear_styles+0x2b0>)
  41681e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
  416820:	2101      	movs	r1, #1
  416822:	4620      	mov	r0, r4
  416824:	47a8      	blx	r5
            break;
  416826:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
  416828:	2100      	movs	r1, #0
  41682a:	4d6e      	ldr	r5, [pc, #440]	; (4169e4 <clear_styles+0x2b0>)
  41682c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
  41682e:	2101      	movs	r1, #1
  416830:	4620      	mov	r0, r4
  416832:	47a8      	blx	r5
            break;
  416834:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
  416836:	2100      	movs	r1, #0
  416838:	4d6a      	ldr	r5, [pc, #424]	; (4169e4 <clear_styles+0x2b0>)
  41683a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
  41683c:	2101      	movs	r1, #1
  41683e:	4620      	mov	r0, r4
  416840:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
  416842:	2102      	movs	r1, #2
  416844:	4620      	mov	r0, r4
  416846:	47a8      	blx	r5
            break;
  416848:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
  41684a:	2100      	movs	r1, #0
  41684c:	4d65      	ldr	r5, [pc, #404]	; (4169e4 <clear_styles+0x2b0>)
  41684e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
  416850:	2140      	movs	r1, #64	; 0x40
  416852:	4620      	mov	r0, r4
  416854:	47a8      	blx	r5
            break;
  416856:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
  416858:	2100      	movs	r1, #0
  41685a:	4b62      	ldr	r3, [pc, #392]	; (4169e4 <clear_styles+0x2b0>)
  41685c:	4798      	blx	r3
            break;
  41685e:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  416860:	2140      	movs	r1, #64	; 0x40
  416862:	4d60      	ldr	r5, [pc, #384]	; (4169e4 <clear_styles+0x2b0>)
  416864:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
  416866:	2141      	movs	r1, #65	; 0x41
  416868:	4620      	mov	r0, r4
  41686a:	47a8      	blx	r5
            break;
  41686c:	bd38      	pop	{r3, r4, r5, pc}

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
  41686e:	2100      	movs	r1, #0
  416870:	4b5c      	ldr	r3, [pc, #368]	; (4169e4 <clear_styles+0x2b0>)
  416872:	4798      	blx	r3
            break;
  416874:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  416876:	2100      	movs	r1, #0
  416878:	4d5a      	ldr	r5, [pc, #360]	; (4169e4 <clear_styles+0x2b0>)
  41687a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  41687c:	2140      	movs	r1, #64	; 0x40
  41687e:	4620      	mov	r0, r4
  416880:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  416882:	2101      	movs	r1, #1
  416884:	4620      	mov	r0, r4
  416886:	47a8      	blx	r5
            break;
  416888:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
  41688a:	2100      	movs	r1, #0
  41688c:	4d55      	ldr	r5, [pc, #340]	; (4169e4 <clear_styles+0x2b0>)
  41688e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
  416890:	2140      	movs	r1, #64	; 0x40
  416892:	4620      	mov	r0, r4
  416894:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  416896:	2141      	movs	r1, #65	; 0x41
  416898:	4620      	mov	r0, r4
  41689a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
  41689c:	2143      	movs	r1, #67	; 0x43
  41689e:	4620      	mov	r0, r4
  4168a0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  4168a2:	2142      	movs	r1, #66	; 0x42
  4168a4:	4620      	mov	r0, r4
  4168a6:	47a8      	blx	r5
            break;
  4168a8:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  4168aa:	2100      	movs	r1, #0
  4168ac:	4d4d      	ldr	r5, [pc, #308]	; (4169e4 <clear_styles+0x2b0>)
  4168ae:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4168b0:	2140      	movs	r1, #64	; 0x40
  4168b2:	4620      	mov	r0, r4
  4168b4:	47a8      	blx	r5
            break;
  4168b6:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
  4168b8:	2100      	movs	r1, #0
  4168ba:	4d4a      	ldr	r5, [pc, #296]	; (4169e4 <clear_styles+0x2b0>)
  4168bc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  4168be:	2101      	movs	r1, #1
  4168c0:	4620      	mov	r0, r4
  4168c2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  4168c4:	2102      	movs	r1, #2
  4168c6:	4620      	mov	r0, r4
  4168c8:	47a8      	blx	r5
            break;
  4168ca:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
  4168cc:	2100      	movs	r1, #0
  4168ce:	4d45      	ldr	r5, [pc, #276]	; (4169e4 <clear_styles+0x2b0>)
  4168d0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
  4168d2:	2103      	movs	r1, #3
  4168d4:	4620      	mov	r0, r4
  4168d6:	47a8      	blx	r5
            break;
  4168d8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
  4168da:	2100      	movs	r1, #0
  4168dc:	4b41      	ldr	r3, [pc, #260]	; (4169e4 <clear_styles+0x2b0>)
  4168de:	4798      	blx	r3
            break;
  4168e0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
  4168e2:	2100      	movs	r1, #0
  4168e4:	4d3f      	ldr	r5, [pc, #252]	; (4169e4 <clear_styles+0x2b0>)
  4168e6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
  4168e8:	2140      	movs	r1, #64	; 0x40
  4168ea:	4620      	mov	r0, r4
  4168ec:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
  4168ee:	2101      	movs	r1, #1
  4168f0:	4620      	mov	r0, r4
  4168f2:	47a8      	blx	r5
            break;
  4168f4:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4168f6:	2100      	movs	r1, #0
  4168f8:	4b3a      	ldr	r3, [pc, #232]	; (4169e4 <clear_styles+0x2b0>)
  4168fa:	4798      	blx	r3
            break;
  4168fc:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
  4168fe:	2100      	movs	r1, #0
  416900:	4d38      	ldr	r5, [pc, #224]	; (4169e4 <clear_styles+0x2b0>)
  416902:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
  416904:	2140      	movs	r1, #64	; 0x40
  416906:	4620      	mov	r0, r4
  416908:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  41690a:	2141      	movs	r1, #65	; 0x41
  41690c:	4620      	mov	r0, r4
  41690e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  416910:	2142      	movs	r1, #66	; 0x42
  416912:	4620      	mov	r0, r4
  416914:	47a8      	blx	r5
            break;
  416916:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
  416918:	2100      	movs	r1, #0
  41691a:	4d32      	ldr	r5, [pc, #200]	; (4169e4 <clear_styles+0x2b0>)
  41691c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
  41691e:	2101      	movs	r1, #1
  416920:	4620      	mov	r0, r4
  416922:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
  416924:	2102      	movs	r1, #2
  416926:	4620      	mov	r0, r4
  416928:	47a8      	blx	r5
            break;
  41692a:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
  41692c:	2100      	movs	r1, #0
  41692e:	4d2d      	ldr	r5, [pc, #180]	; (4169e4 <clear_styles+0x2b0>)
  416930:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
  416932:	2101      	movs	r1, #1
  416934:	4620      	mov	r0, r4
  416936:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
  416938:	2102      	movs	r1, #2
  41693a:	4620      	mov	r0, r4
  41693c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
  41693e:	2103      	movs	r1, #3
  416940:	4620      	mov	r0, r4
  416942:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
  416944:	2104      	movs	r1, #4
  416946:	4620      	mov	r0, r4
  416948:	47a8      	blx	r5
            break;
  41694a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
  41694c:	2100      	movs	r1, #0
  41694e:	4d25      	ldr	r5, [pc, #148]	; (4169e4 <clear_styles+0x2b0>)
  416950:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
  416952:	2142      	movs	r1, #66	; 0x42
  416954:	4620      	mov	r0, r4
  416956:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  416958:	2141      	movs	r1, #65	; 0x41
  41695a:	4620      	mov	r0, r4
  41695c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
  41695e:	2140      	movs	r1, #64	; 0x40
  416960:	4620      	mov	r0, r4
  416962:	47a8      	blx	r5
            break;
  416964:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  416966:	2100      	movs	r1, #0
  416968:	4b1e      	ldr	r3, [pc, #120]	; (4169e4 <clear_styles+0x2b0>)
  41696a:	4798      	blx	r3
            break;
  41696c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
  41696e:	2100      	movs	r1, #0
  416970:	4d1c      	ldr	r5, [pc, #112]	; (4169e4 <clear_styles+0x2b0>)
  416972:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  416974:	2104      	movs	r1, #4
  416976:	4620      	mov	r0, r4
  416978:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  41697a:	2103      	movs	r1, #3
  41697c:	4620      	mov	r0, r4
  41697e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  416980:	2101      	movs	r1, #1
  416982:	4620      	mov	r0, r4
  416984:	47a8      	blx	r5
            break;
  416986:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
  416988:	2100      	movs	r1, #0
  41698a:	4d16      	ldr	r5, [pc, #88]	; (4169e4 <clear_styles+0x2b0>)
  41698c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
  41698e:	2103      	movs	r1, #3
  416990:	4620      	mov	r0, r4
  416992:	47a8      	blx	r5
            break;
  416994:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  416996:	2100      	movs	r1, #0
  416998:	4b12      	ldr	r3, [pc, #72]	; (4169e4 <clear_styles+0x2b0>)
  41699a:	4798      	blx	r3
            break;
  41699c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
  41699e:	2100      	movs	r1, #0
  4169a0:	4d10      	ldr	r5, [pc, #64]	; (4169e4 <clear_styles+0x2b0>)
  4169a2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
  4169a4:	2103      	movs	r1, #3
  4169a6:	4620      	mov	r0, r4
  4169a8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
  4169aa:	2101      	movs	r1, #1
  4169ac:	4620      	mov	r0, r4
  4169ae:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  4169b0:	2102      	movs	r1, #2
  4169b2:	4620      	mov	r0, r4
  4169b4:	47a8      	blx	r5
            break;
  4169b6:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
  4169b8:	2100      	movs	r1, #0
  4169ba:	4d0a      	ldr	r5, [pc, #40]	; (4169e4 <clear_styles+0x2b0>)
  4169bc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
  4169be:	2101      	movs	r1, #1
  4169c0:	4620      	mov	r0, r4
  4169c2:	47a8      	blx	r5
            break;
  4169c4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
  4169c6:	2100      	movs	r1, #0
  4169c8:	4b06      	ldr	r3, [pc, #24]	; (4169e4 <clear_styles+0x2b0>)
  4169ca:	4798      	blx	r3
            break;
  4169cc:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
  4169ce:	2100      	movs	r1, #0
  4169d0:	4d04      	ldr	r5, [pc, #16]	; (4169e4 <clear_styles+0x2b0>)
  4169d2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
  4169d4:	2101      	movs	r1, #1
  4169d6:	4620      	mov	r0, r4
  4169d8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
  4169da:	2102      	movs	r1, #2
  4169dc:	4620      	mov	r0, r4
  4169de:	47a8      	blx	r5
  4169e0:	bd38      	pop	{r3, r4, r5, pc}
  4169e2:	bf00      	nop
  4169e4:	004055a9 	.word	0x004055a9

004169e8 <lv_theme_set_act>:
    act_theme = th;
  4169e8:	4b01      	ldr	r3, [pc, #4]	; (4169f0 <lv_theme_set_act+0x8>)
  4169ea:	6018      	str	r0, [r3, #0]
  4169ec:	4770      	bx	lr
  4169ee:	bf00      	nop
  4169f0:	20414790 	.word	0x20414790

004169f4 <lv_theme_apply>:
{
  4169f4:	b538      	push	{r3, r4, r5, lr}
  4169f6:	4604      	mov	r4, r0
  4169f8:	460d      	mov	r5, r1
    clear_styles(obj, name);
  4169fa:	4b04      	ldr	r3, [pc, #16]	; (416a0c <lv_theme_apply+0x18>)
  4169fc:	4798      	blx	r3
    apply_theme(act_theme, obj, name);
  4169fe:	462a      	mov	r2, r5
  416a00:	4621      	mov	r1, r4
  416a02:	4b03      	ldr	r3, [pc, #12]	; (416a10 <lv_theme_apply+0x1c>)
  416a04:	6818      	ldr	r0, [r3, #0]
  416a06:	4b03      	ldr	r3, [pc, #12]	; (416a14 <lv_theme_apply+0x20>)
  416a08:	4798      	blx	r3
  416a0a:	bd38      	pop	{r3, r4, r5, pc}
  416a0c:	00416735 	.word	0x00416735
  416a10:	20414790 	.word	0x20414790
  416a14:	00416705 	.word	0x00416705

00416a18 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
  416a18:	4b01      	ldr	r3, [pc, #4]	; (416a20 <lv_theme_get_font_normal+0x8>)
  416a1a:	681b      	ldr	r3, [r3, #0]
}
  416a1c:	6958      	ldr	r0, [r3, #20]
  416a1e:	4770      	bx	lr
  416a20:	20414790 	.word	0x20414790

00416a24 <theme_apply>:

    return &theme;
}

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  416a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  416a28:	460c      	mov	r4, r1
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
  416a2a:	3a01      	subs	r2, #1
  416a2c:	2a27      	cmp	r2, #39	; 0x27
  416a2e:	d831      	bhi.n	416a94 <theme_apply+0x70>
  416a30:	e8df f012 	tbh	[pc, r2, lsl #1]
  416a34:	00370028 	.word	0x00370028
  416a38:	008800ae 	.word	0x008800ae
  416a3c:	0055004b 	.word	0x0055004b
  416a40:	003002af 	.word	0x003002af
  416a44:	01fd00fd 	.word	0x01fd00fd
  416a48:	02cb0041 	.word	0x02cb0041
  416a4c:	02ea01d3 	.word	0x02ea01d3
  416a50:	00300030 	.word	0x00300030
  416a54:	0030006f 	.word	0x0030006f
  416a58:	00300131 	.word	0x00300131
  416a5c:	01c901b4 	.word	0x01c901b4
  416a60:	011202db 	.word	0x011202db
  416a64:	01af0121 	.word	0x01af0121
  416a68:	019a013b 	.word	0x019a013b
  416a6c:	028500e2 	.word	0x028500e2
  416a70:	00d202a0 	.word	0x00d202a0
  416a74:	02270098 	.word	0x02270098
  416a78:	017b0160 	.word	0x017b0160
  416a7c:	01850264 	.word	0x01850264
  416a80:	025a023f 	.word	0x025a023f
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  416a84:	2100      	movs	r1, #0
  416a86:	4620      	mov	r0, r4
  416a88:	4b96      	ldr	r3, [pc, #600]	; (416ce4 <theme_apply+0x2c0>)
  416a8a:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
  416a8c:	4b96      	ldr	r3, [pc, #600]	; (416ce8 <theme_apply+0x2c4>)
  416a8e:	6819      	ldr	r1, [r3, #0]
  416a90:	4b96      	ldr	r3, [pc, #600]	; (416cec <theme_apply+0x2c8>)
  416a92:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  416a94:	22ff      	movs	r2, #255	; 0xff
  416a96:	4611      	mov	r1, r2
  416a98:	4620      	mov	r0, r4
  416a9a:	4b95      	ldr	r3, [pc, #596]	; (416cf0 <theme_apply+0x2cc>)
  416a9c:	4798      	blx	r3
  416a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  416aa2:	2100      	movs	r1, #0
  416aa4:	4620      	mov	r0, r4
  416aa6:	4b8f      	ldr	r3, [pc, #572]	; (416ce4 <theme_apply+0x2c0>)
  416aa8:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  416aaa:	4b8f      	ldr	r3, [pc, #572]	; (416ce8 <theme_apply+0x2c4>)
  416aac:	6819      	ldr	r1, [r3, #0]
  416aae:	3104      	adds	r1, #4
  416ab0:	4b8e      	ldr	r3, [pc, #568]	; (416cec <theme_apply+0x2c8>)
  416ab2:	4798      	blx	r3
            break;
  416ab4:	e7ee      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
  416ab6:	2100      	movs	r1, #0
  416ab8:	4620      	mov	r0, r4
  416aba:	4b8a      	ldr	r3, [pc, #552]	; (416ce4 <theme_apply+0x2c0>)
  416abc:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  416abe:	4b8a      	ldr	r3, [pc, #552]	; (416ce8 <theme_apply+0x2c4>)
  416ac0:	6819      	ldr	r1, [r3, #0]
  416ac2:	3104      	adds	r1, #4
  416ac4:	4b89      	ldr	r3, [pc, #548]	; (416cec <theme_apply+0x2c8>)
  416ac6:	4798      	blx	r3
            break;
  416ac8:	e7e4      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  416aca:	2100      	movs	r1, #0
  416acc:	4620      	mov	r0, r4
  416ace:	4b85      	ldr	r3, [pc, #532]	; (416ce4 <theme_apply+0x2c0>)
  416ad0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
  416ad2:	4b85      	ldr	r3, [pc, #532]	; (416ce8 <theme_apply+0x2c4>)
  416ad4:	6819      	ldr	r1, [r3, #0]
  416ad6:	3110      	adds	r1, #16
  416ad8:	4b84      	ldr	r3, [pc, #528]	; (416cec <theme_apply+0x2c8>)
  416ada:	4798      	blx	r3
            break;
  416adc:	e7da      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
  416ade:	2100      	movs	r1, #0
  416ae0:	4620      	mov	r0, r4
  416ae2:	4f80      	ldr	r7, [pc, #512]	; (416ce4 <theme_apply+0x2c0>)
  416ae4:	47b8      	blx	r7
  416ae6:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416ae8:	4e7f      	ldr	r6, [pc, #508]	; (416ce8 <theme_apply+0x2c4>)
  416aea:	6831      	ldr	r1, [r6, #0]
  416aec:	3104      	adds	r1, #4
  416aee:	4d7f      	ldr	r5, [pc, #508]	; (416cec <theme_apply+0x2c8>)
  416af0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  416af2:	6831      	ldr	r1, [r6, #0]
  416af4:	3118      	adds	r1, #24
  416af6:	4640      	mov	r0, r8
  416af8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
  416afa:	2101      	movs	r1, #1
  416afc:	4620      	mov	r0, r4
  416afe:	47b8      	blx	r7
  416b00:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  416b02:	6831      	ldr	r1, [r6, #0]
  416b04:	3104      	adds	r1, #4
  416b06:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  416b08:	6831      	ldr	r1, [r6, #0]
  416b0a:	3108      	adds	r1, #8
  416b0c:	4638      	mov	r0, r7
  416b0e:	47a8      	blx	r5
            break;
  416b10:	e7c0      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
  416b12:	2100      	movs	r1, #0
  416b14:	4620      	mov	r0, r4
  416b16:	4f73      	ldr	r7, [pc, #460]	; (416ce4 <theme_apply+0x2c0>)
  416b18:	47b8      	blx	r7
  416b1a:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->scr);
  416b1c:	4e72      	ldr	r6, [pc, #456]	; (416ce8 <theme_apply+0x2c4>)
  416b1e:	6831      	ldr	r1, [r6, #0]
  416b20:	4d72      	ldr	r5, [pc, #456]	; (416cec <theme_apply+0x2c8>)
  416b22:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
  416b24:	6831      	ldr	r1, [r6, #0]
  416b26:	316c      	adds	r1, #108	; 0x6c
  416b28:	4640      	mov	r0, r8
  416b2a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
  416b2c:	2101      	movs	r1, #1
  416b2e:	4620      	mov	r0, r4
  416b30:	47b8      	blx	r7
  416b32:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  416b34:	6831      	ldr	r1, [r6, #0]
  416b36:	3104      	adds	r1, #4
  416b38:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  416b3a:	6831      	ldr	r1, [r6, #0]
  416b3c:	3108      	adds	r1, #8
  416b3e:	4638      	mov	r0, r7
  416b40:	47a8      	blx	r5
            break;
  416b42:	e7a7      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
  416b44:	2100      	movs	r1, #0
  416b46:	4620      	mov	r0, r4
  416b48:	4f66      	ldr	r7, [pc, #408]	; (416ce4 <theme_apply+0x2c0>)
  416b4a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  416b4c:	4e66      	ldr	r6, [pc, #408]	; (416ce8 <theme_apply+0x2c4>)
  416b4e:	6831      	ldr	r1, [r6, #0]
  416b50:	3128      	adds	r1, #40	; 0x28
  416b52:	4d66      	ldr	r5, [pc, #408]	; (416cec <theme_apply+0x2c8>)
  416b54:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
  416b56:	2101      	movs	r1, #1
  416b58:	4620      	mov	r0, r4
  416b5a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  416b5c:	6831      	ldr	r1, [r6, #0]
  416b5e:	312c      	adds	r1, #44	; 0x2c
  416b60:	47a8      	blx	r5
            break;
  416b62:	e797      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
  416b64:	2100      	movs	r1, #0
  416b66:	4620      	mov	r0, r4
  416b68:	4f5e      	ldr	r7, [pc, #376]	; (416ce4 <theme_apply+0x2c0>)
  416b6a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  416b6c:	4e5e      	ldr	r6, [pc, #376]	; (416ce8 <theme_apply+0x2c4>)
  416b6e:	6831      	ldr	r1, [r6, #0]
  416b70:	3128      	adds	r1, #40	; 0x28
  416b72:	4d5e      	ldr	r5, [pc, #376]	; (416cec <theme_apply+0x2c8>)
  416b74:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
  416b76:	2101      	movs	r1, #1
  416b78:	4620      	mov	r0, r4
  416b7a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  416b7c:	6831      	ldr	r1, [r6, #0]
  416b7e:	312c      	adds	r1, #44	; 0x2c
  416b80:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
  416b82:	2102      	movs	r1, #2
  416b84:	4620      	mov	r0, r4
  416b86:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
  416b88:	6831      	ldr	r1, [r6, #0]
  416b8a:	31a0      	adds	r1, #160	; 0xa0
  416b8c:	47a8      	blx	r5
            break;
  416b8e:	e781      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
  416b90:	2100      	movs	r1, #0
  416b92:	4620      	mov	r0, r4
  416b94:	4f53      	ldr	r7, [pc, #332]	; (416ce4 <theme_apply+0x2c0>)
  416b96:	47b8      	blx	r7
  416b98:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416b9a:	4e53      	ldr	r6, [pc, #332]	; (416ce8 <theme_apply+0x2c4>)
  416b9c:	6831      	ldr	r1, [r6, #0]
  416b9e:	3104      	adds	r1, #4
  416ba0:	4d52      	ldr	r5, [pc, #328]	; (416cec <theme_apply+0x2c8>)
  416ba2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
  416ba4:	6831      	ldr	r1, [r6, #0]
  416ba6:	3120      	adds	r1, #32
  416ba8:	4640      	mov	r0, r8
  416baa:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
  416bac:	2101      	movs	r1, #1
  416bae:	4620      	mov	r0, r4
  416bb0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  416bb2:	6831      	ldr	r1, [r6, #0]
  416bb4:	311c      	adds	r1, #28
  416bb6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
  416bb8:	2102      	movs	r1, #2
  416bba:	4620      	mov	r0, r4
  416bbc:	47b8      	blx	r7
  416bbe:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  416bc0:	6831      	ldr	r1, [r6, #0]
  416bc2:	3104      	adds	r1, #4
  416bc4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  416bc6:	6831      	ldr	r1, [r6, #0]
  416bc8:	3108      	adds	r1, #8
  416bca:	4638      	mov	r0, r7
  416bcc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_knob);
  416bce:	6831      	ldr	r1, [r6, #0]
  416bd0:	3124      	adds	r1, #36	; 0x24
  416bd2:	4638      	mov	r0, r7
  416bd4:	47a8      	blx	r5
            break;
  416bd6:	e75d      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
  416bd8:	2100      	movs	r1, #0
  416bda:	4620      	mov	r0, r4
  416bdc:	4f41      	ldr	r7, [pc, #260]	; (416ce4 <theme_apply+0x2c0>)
  416bde:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
  416be0:	4e41      	ldr	r6, [pc, #260]	; (416ce8 <theme_apply+0x2c4>)
  416be2:	6831      	ldr	r1, [r6, #0]
  416be4:	3120      	adds	r1, #32
  416be6:	4d41      	ldr	r5, [pc, #260]	; (416cec <theme_apply+0x2c8>)
  416be8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
  416bea:	2101      	movs	r1, #1
  416bec:	4620      	mov	r0, r4
  416bee:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  416bf0:	6831      	ldr	r1, [r6, #0]
  416bf2:	311c      	adds	r1, #28
  416bf4:	47a8      	blx	r5
            break;
  416bf6:	e74d      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
  416bf8:	2100      	movs	r1, #0
  416bfa:	4620      	mov	r0, r4
  416bfc:	4f39      	ldr	r7, [pc, #228]	; (416ce4 <theme_apply+0x2c0>)
  416bfe:	47b8      	blx	r7
  416c00:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
  416c02:	4e39      	ldr	r6, [pc, #228]	; (416ce8 <theme_apply+0x2c4>)
  416c04:	6831      	ldr	r1, [r6, #0]
  416c06:	3128      	adds	r1, #40	; 0x28
  416c08:	4d38      	ldr	r5, [pc, #224]	; (416cec <theme_apply+0x2c8>)
  416c0a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
  416c0c:	6831      	ldr	r1, [r6, #0]
  416c0e:	3198      	adds	r1, #152	; 0x98
  416c10:	4640      	mov	r0, r8
  416c12:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
  416c14:	2101      	movs	r1, #1
  416c16:	4620      	mov	r0, r4
  416c18:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  416c1a:	6831      	ldr	r1, [r6, #0]
  416c1c:	312c      	adds	r1, #44	; 0x2c
  416c1e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
  416c20:	2102      	movs	r1, #2
  416c22:	4620      	mov	r0, r4
  416c24:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
  416c26:	6831      	ldr	r1, [r6, #0]
  416c28:	3194      	adds	r1, #148	; 0x94
  416c2a:	47a8      	blx	r5
            break;
  416c2c:	e732      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
  416c2e:	2100      	movs	r1, #0
  416c30:	4620      	mov	r0, r4
  416c32:	4f2c      	ldr	r7, [pc, #176]	; (416ce4 <theme_apply+0x2c0>)
  416c34:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
  416c36:	4e2c      	ldr	r6, [pc, #176]	; (416ce8 <theme_apply+0x2c4>)
  416c38:	6831      	ldr	r1, [r6, #0]
  416c3a:	3150      	adds	r1, #80	; 0x50
  416c3c:	4d2b      	ldr	r5, [pc, #172]	; (416cec <theme_apply+0x2c8>)
  416c3e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
  416c40:	2140      	movs	r1, #64	; 0x40
  416c42:	4620      	mov	r0, r4
  416c44:	47b8      	blx	r7
  416c46:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
  416c48:	6831      	ldr	r1, [r6, #0]
  416c4a:	3110      	adds	r1, #16
  416c4c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
  416c4e:	6831      	ldr	r1, [r6, #0]
  416c50:	3154      	adds	r1, #84	; 0x54
  416c52:	4638      	mov	r0, r7
  416c54:	47a8      	blx	r5
            break;
  416c56:	e71d      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
  416c58:	2100      	movs	r1, #0
  416c5a:	4620      	mov	r0, r4
  416c5c:	4b21      	ldr	r3, [pc, #132]	; (416ce4 <theme_apply+0x2c0>)
  416c5e:	4798      	blx	r3
  416c60:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  416c62:	4e21      	ldr	r6, [pc, #132]	; (416ce8 <theme_apply+0x2c4>)
  416c64:	6831      	ldr	r1, [r6, #0]
  416c66:	3104      	adds	r1, #4
  416c68:	4d20      	ldr	r5, [pc, #128]	; (416cec <theme_apply+0x2c8>)
  416c6a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
  416c6c:	6831      	ldr	r1, [r6, #0]
  416c6e:	3180      	adds	r1, #128	; 0x80
  416c70:	4638      	mov	r0, r7
  416c72:	47a8      	blx	r5
            break;
  416c74:	e70e      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  416c76:	2140      	movs	r1, #64	; 0x40
  416c78:	4620      	mov	r0, r4
  416c7a:	4f1a      	ldr	r7, [pc, #104]	; (416ce4 <theme_apply+0x2c0>)
  416c7c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
  416c7e:	4e1a      	ldr	r6, [pc, #104]	; (416ce8 <theme_apply+0x2c4>)
  416c80:	6831      	ldr	r1, [r6, #0]
  416c82:	3118      	adds	r1, #24
  416c84:	4d19      	ldr	r5, [pc, #100]	; (416cec <theme_apply+0x2c8>)
  416c86:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
  416c88:	2141      	movs	r1, #65	; 0x41
  416c8a:	4620      	mov	r0, r4
  416c8c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
  416c8e:	6831      	ldr	r1, [r6, #0]
  416c90:	3110      	adds	r1, #16
  416c92:	47a8      	blx	r5
            break;
  416c94:	e6fe      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
  416c96:	2100      	movs	r1, #0
  416c98:	4620      	mov	r0, r4
  416c9a:	4b12      	ldr	r3, [pc, #72]	; (416ce4 <theme_apply+0x2c0>)
  416c9c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
  416c9e:	4b12      	ldr	r3, [pc, #72]	; (416ce8 <theme_apply+0x2c4>)
  416ca0:	6819      	ldr	r1, [r3, #0]
  416ca2:	3170      	adds	r1, #112	; 0x70
  416ca4:	4b11      	ldr	r3, [pc, #68]	; (416cec <theme_apply+0x2c8>)
  416ca6:	4798      	blx	r3
            break;
  416ca8:	e6f4      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
  416caa:	2100      	movs	r1, #0
  416cac:	4620      	mov	r0, r4
  416cae:	4f0d      	ldr	r7, [pc, #52]	; (416ce4 <theme_apply+0x2c0>)
  416cb0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  416cb2:	4e0d      	ldr	r6, [pc, #52]	; (416ce8 <theme_apply+0x2c4>)
  416cb4:	6831      	ldr	r1, [r6, #0]
  416cb6:	3104      	adds	r1, #4
  416cb8:	4d0c      	ldr	r5, [pc, #48]	; (416cec <theme_apply+0x2c8>)
  416cba:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  416cbc:	2140      	movs	r1, #64	; 0x40
  416cbe:	4620      	mov	r0, r4
  416cc0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
  416cc2:	6831      	ldr	r1, [r6, #0]
  416cc4:	3114      	adds	r1, #20
  416cc6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  416cc8:	2101      	movs	r1, #1
  416cca:	4620      	mov	r0, r4
  416ccc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  416cce:	6831      	ldr	r1, [r6, #0]
  416cd0:	3184      	adds	r1, #132	; 0x84
  416cd2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
  416cd4:	2102      	movs	r1, #2
  416cd6:	4620      	mov	r0, r4
  416cd8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  416cda:	6831      	ldr	r1, [r6, #0]
  416cdc:	3188      	adds	r1, #136	; 0x88
  416cde:	47a8      	blx	r5
            break;
  416ce0:	e6d8      	b.n	416a94 <theme_apply+0x70>
  416ce2:	bf00      	nop
  416ce4:	004054e1 	.word	0x004054e1
  416ce8:	20414798 	.word	0x20414798
  416cec:	004092bd 	.word	0x004092bd
  416cf0:	00406f6d 	.word	0x00406f6d
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
  416cf4:	2100      	movs	r1, #0
  416cf6:	4620      	mov	r0, r4
  416cf8:	4f9b      	ldr	r7, [pc, #620]	; (416f68 <theme_apply+0x544>)
  416cfa:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  416cfc:	4e9b      	ldr	r6, [pc, #620]	; (416f6c <theme_apply+0x548>)
  416cfe:	6831      	ldr	r1, [r6, #0]
  416d00:	4d9b      	ldr	r5, [pc, #620]	; (416f70 <theme_apply+0x54c>)
  416d02:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  416d04:	2141      	movs	r1, #65	; 0x41
  416d06:	4620      	mov	r0, r4
  416d08:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  416d0a:	6831      	ldr	r1, [r6, #0]
  416d0c:	31ac      	adds	r1, #172	; 0xac
  416d0e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
  416d10:	2143      	movs	r1, #67	; 0x43
  416d12:	4620      	mov	r0, r4
  416d14:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_indic);
  416d16:	6831      	ldr	r1, [r6, #0]
  416d18:	31b0      	adds	r1, #176	; 0xb0
  416d1a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  416d1c:	2142      	movs	r1, #66	; 0x42
  416d1e:	4620      	mov	r0, r4
  416d20:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns);
  416d22:	6831      	ldr	r1, [r6, #0]
  416d24:	31a8      	adds	r1, #168	; 0xa8
  416d26:	47a8      	blx	r5
            break;
  416d28:	e6b4      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  416d2a:	2140      	movs	r1, #64	; 0x40
  416d2c:	4620      	mov	r0, r4
  416d2e:	4b8e      	ldr	r3, [pc, #568]	; (416f68 <theme_apply+0x544>)
  416d30:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  416d32:	4b8e      	ldr	r3, [pc, #568]	; (416f6c <theme_apply+0x548>)
  416d34:	6819      	ldr	r1, [r3, #0]
  416d36:	31b4      	adds	r1, #180	; 0xb4
  416d38:	4b8d      	ldr	r3, [pc, #564]	; (416f70 <theme_apply+0x54c>)
  416d3a:	4798      	blx	r3
            break;
  416d3c:	e6aa      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
  416d3e:	2100      	movs	r1, #0
  416d40:	4620      	mov	r0, r4
  416d42:	4f89      	ldr	r7, [pc, #548]	; (416f68 <theme_apply+0x544>)
  416d44:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  416d46:	4e89      	ldr	r6, [pc, #548]	; (416f6c <theme_apply+0x548>)
  416d48:	6831      	ldr	r1, [r6, #0]
  416d4a:	4d89      	ldr	r5, [pc, #548]	; (416f70 <theme_apply+0x54c>)
  416d4c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  416d4e:	2101      	movs	r1, #1
  416d50:	4620      	mov	r0, r4
  416d52:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  416d54:	6831      	ldr	r1, [r6, #0]
  416d56:	3184      	adds	r1, #132	; 0x84
  416d58:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  416d5a:	2102      	movs	r1, #2
  416d5c:	4620      	mov	r0, r4
  416d5e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  416d60:	6831      	ldr	r1, [r6, #0]
  416d62:	3188      	adds	r1, #136	; 0x88
  416d64:	47a8      	blx	r5
            break;
  416d66:	e695      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
  416d68:	2100      	movs	r1, #0
  416d6a:	4620      	mov	r0, r4
  416d6c:	4f7e      	ldr	r7, [pc, #504]	; (416f68 <theme_apply+0x544>)
  416d6e:	47b8      	blx	r7
  416d70:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416d72:	4e7e      	ldr	r6, [pc, #504]	; (416f6c <theme_apply+0x548>)
  416d74:	6831      	ldr	r1, [r6, #0]
  416d76:	3104      	adds	r1, #4
  416d78:	4d7d      	ldr	r5, [pc, #500]	; (416f70 <theme_apply+0x54c>)
  416d7a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
  416d7c:	6831      	ldr	r1, [r6, #0]
  416d7e:	318c      	adds	r1, #140	; 0x8c
  416d80:	4640      	mov	r0, r8
  416d82:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
  416d84:	2103      	movs	r1, #3
  416d86:	4620      	mov	r0, r4
  416d88:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
  416d8a:	6831      	ldr	r1, [r6, #0]
  416d8c:	3190      	adds	r1, #144	; 0x90
  416d8e:	47a8      	blx	r5
            break;
  416d90:	e680      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
  416d92:	2100      	movs	r1, #0
  416d94:	4620      	mov	r0, r4
  416d96:	4b74      	ldr	r3, [pc, #464]	; (416f68 <theme_apply+0x544>)
  416d98:	4798      	blx	r3
            break;
  416d9a:	e67b      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
  416d9c:	2100      	movs	r1, #0
  416d9e:	4620      	mov	r0, r4
  416da0:	4f71      	ldr	r7, [pc, #452]	; (416f68 <theme_apply+0x544>)
  416da2:	47b8      	blx	r7
  416da4:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416da6:	4e71      	ldr	r6, [pc, #452]	; (416f6c <theme_apply+0x548>)
  416da8:	6831      	ldr	r1, [r6, #0]
  416daa:	3104      	adds	r1, #4
  416dac:	4d70      	ldr	r5, [pc, #448]	; (416f70 <theme_apply+0x54c>)
  416dae:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
  416db0:	6831      	ldr	r1, [r6, #0]
  416db2:	3178      	adds	r1, #120	; 0x78
  416db4:	4640      	mov	r0, r8
  416db6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
  416db8:	2101      	movs	r1, #1
  416dba:	4620      	mov	r0, r4
  416dbc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  416dbe:	6831      	ldr	r1, [r6, #0]
  416dc0:	3184      	adds	r1, #132	; 0x84
  416dc2:	47a8      	blx	r5
            break;
  416dc4:	e666      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  416dc6:	2100      	movs	r1, #0
  416dc8:	4620      	mov	r0, r4
  416dca:	4b67      	ldr	r3, [pc, #412]	; (416f68 <theme_apply+0x544>)
  416dcc:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
  416dce:	4b67      	ldr	r3, [pc, #412]	; (416f6c <theme_apply+0x548>)
  416dd0:	6819      	ldr	r1, [r3, #0]
  416dd2:	317c      	adds	r1, #124	; 0x7c
  416dd4:	4b66      	ldr	r3, [pc, #408]	; (416f70 <theme_apply+0x54c>)
  416dd6:	4798      	blx	r3
            break;
  416dd8:	e65c      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
  416dda:	2100      	movs	r1, #0
  416ddc:	4620      	mov	r0, r4
  416dde:	4f62      	ldr	r7, [pc, #392]	; (416f68 <theme_apply+0x544>)
  416de0:	47b8      	blx	r7
  416de2:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416de4:	4e61      	ldr	r6, [pc, #388]	; (416f6c <theme_apply+0x548>)
  416de6:	6831      	ldr	r1, [r6, #0]
  416de8:	3104      	adds	r1, #4
  416dea:	4d61      	ldr	r5, [pc, #388]	; (416f70 <theme_apply+0x54c>)
  416dec:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  416dee:	6831      	ldr	r1, [r6, #0]
  416df0:	3108      	adds	r1, #8
  416df2:	4640      	mov	r0, r8
  416df4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  416df6:	6831      	ldr	r1, [r6, #0]
  416df8:	3118      	adds	r1, #24
  416dfa:	4640      	mov	r0, r8
  416dfc:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
  416dfe:	2140      	movs	r1, #64	; 0x40
  416e00:	4620      	mov	r0, r4
  416e02:	47b8      	blx	r7
  416e04:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416e06:	6831      	ldr	r1, [r6, #0]
  416e08:	3104      	adds	r1, #4
  416e0a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
  416e0c:	6831      	ldr	r1, [r6, #0]
  416e0e:	3158      	adds	r1, #88	; 0x58
  416e10:	4640      	mov	r0, r8
  416e12:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  416e14:	2141      	movs	r1, #65	; 0x41
  416e16:	4620      	mov	r0, r4
  416e18:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  416e1a:	6831      	ldr	r1, [r6, #0]
  416e1c:	3184      	adds	r1, #132	; 0x84
  416e1e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  416e20:	2142      	movs	r1, #66	; 0x42
  416e22:	4620      	mov	r0, r4
  416e24:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
  416e26:	6831      	ldr	r1, [r6, #0]
  416e28:	315c      	adds	r1, #92	; 0x5c
  416e2a:	47a8      	blx	r5
            break;
  416e2c:	e632      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
  416e2e:	2100      	movs	r1, #0
  416e30:	4620      	mov	r0, r4
  416e32:	4f4d      	ldr	r7, [pc, #308]	; (416f68 <theme_apply+0x544>)
  416e34:	47b8      	blx	r7
  416e36:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416e38:	4e4c      	ldr	r6, [pc, #304]	; (416f6c <theme_apply+0x548>)
  416e3a:	6831      	ldr	r1, [r6, #0]
  416e3c:	3104      	adds	r1, #4
  416e3e:	4d4c      	ldr	r5, [pc, #304]	; (416f70 <theme_apply+0x54c>)
  416e40:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
  416e42:	6831      	ldr	r1, [r6, #0]
  416e44:	3144      	adds	r1, #68	; 0x44
  416e46:	4640      	mov	r0, r8
  416e48:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  416e4a:	6831      	ldr	r1, [r6, #0]
  416e4c:	3118      	adds	r1, #24
  416e4e:	4640      	mov	r0, r8
  416e50:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
  416e52:	2101      	movs	r1, #1
  416e54:	4620      	mov	r0, r4
  416e56:	47b8      	blx	r7
  416e58:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->pad_small);
  416e5a:	6831      	ldr	r1, [r6, #0]
  416e5c:	3118      	adds	r1, #24
  416e5e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  416e60:	6831      	ldr	r1, [r6, #0]
  416e62:	3148      	adds	r1, #72	; 0x48
  416e64:	4640      	mov	r0, r8
  416e66:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
  416e68:	2103      	movs	r1, #3
  416e6a:	4620      	mov	r0, r4
  416e6c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  416e6e:	6831      	ldr	r1, [r6, #0]
  416e70:	3148      	adds	r1, #72	; 0x48
  416e72:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
  416e74:	2102      	movs	r1, #2
  416e76:	4620      	mov	r0, r4
  416e78:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
  416e7a:	6831      	ldr	r1, [r6, #0]
  416e7c:	314c      	adds	r1, #76	; 0x4c
  416e7e:	47a8      	blx	r5
            break;
  416e80:	e608      	b.n	416a94 <theme_apply+0x70>
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
  416e82:	2100      	movs	r1, #0
  416e84:	4620      	mov	r0, r4
  416e86:	4b38      	ldr	r3, [pc, #224]	; (416f68 <theme_apply+0x544>)
  416e88:	4798      	blx	r3
                _lv_style_list_add_style(list, &styles->bg);
  416e8a:	4b38      	ldr	r3, [pc, #224]	; (416f6c <theme_apply+0x548>)
  416e8c:	6819      	ldr	r1, [r3, #0]
  416e8e:	3104      	adds	r1, #4
  416e90:	4b37      	ldr	r3, [pc, #220]	; (416f70 <theme_apply+0x54c>)
  416e92:	4798      	blx	r3
                int idx = 1; /* start value should be 1, not zero, since cell styles
  416e94:	2501      	movs	r5, #1
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  416e96:	e009      	b.n	416eac <theme_apply+0x488>
                    list = lv_obj_get_style_list(obj, idx);
  416e98:	b2e9      	uxtb	r1, r5
  416e9a:	4620      	mov	r0, r4
  416e9c:	4b32      	ldr	r3, [pc, #200]	; (416f68 <theme_apply+0x544>)
  416e9e:	4798      	blx	r3
                    _lv_style_list_add_style(list, &styles->table_cell);
  416ea0:	4b32      	ldr	r3, [pc, #200]	; (416f6c <theme_apply+0x548>)
  416ea2:	6819      	ldr	r1, [r3, #0]
  416ea4:	31a4      	adds	r1, #164	; 0xa4
  416ea6:	4b32      	ldr	r3, [pc, #200]	; (416f70 <theme_apply+0x54c>)
  416ea8:	4798      	blx	r3
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  416eaa:	3501      	adds	r5, #1
  416eac:	2d04      	cmp	r5, #4
  416eae:	ddf3      	ble.n	416e98 <theme_apply+0x474>
  416eb0:	e5f0      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
  416eb2:	2100      	movs	r1, #0
  416eb4:	4620      	mov	r0, r4
  416eb6:	4f2c      	ldr	r7, [pc, #176]	; (416f68 <theme_apply+0x544>)
  416eb8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  416eba:	4e2c      	ldr	r6, [pc, #176]	; (416f6c <theme_apply+0x548>)
  416ebc:	6831      	ldr	r1, [r6, #0]
  416ebe:	4d2c      	ldr	r5, [pc, #176]	; (416f70 <theme_apply+0x54c>)
  416ec0:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
  416ec2:	2142      	movs	r1, #66	; 0x42
  416ec4:	4620      	mov	r0, r4
  416ec6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  416ec8:	6831      	ldr	r1, [r6, #0]
  416eca:	3184      	adds	r1, #132	; 0x84
  416ecc:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  416ece:	2141      	movs	r1, #65	; 0x41
  416ed0:	4620      	mov	r0, r4
  416ed2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  416ed4:	6831      	ldr	r1, [r6, #0]
  416ed6:	31b4      	adds	r1, #180	; 0xb4
  416ed8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
  416eda:	2140      	movs	r1, #64	; 0x40
  416edc:	4620      	mov	r0, r4
  416ede:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  416ee0:	6831      	ldr	r1, [r6, #0]
  416ee2:	31ac      	adds	r1, #172	; 0xac
  416ee4:	47a8      	blx	r5
            break;
  416ee6:	e5d5      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  416ee8:	2100      	movs	r1, #0
  416eea:	4620      	mov	r0, r4
  416eec:	4b1e      	ldr	r3, [pc, #120]	; (416f68 <theme_apply+0x544>)
  416eee:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
  416ef0:	4b1e      	ldr	r3, [pc, #120]	; (416f6c <theme_apply+0x548>)
  416ef2:	6819      	ldr	r1, [r3, #0]
  416ef4:	31a8      	adds	r1, #168	; 0xa8
  416ef6:	4b1e      	ldr	r3, [pc, #120]	; (416f70 <theme_apply+0x54c>)
  416ef8:	4798      	blx	r3
            break;
  416efa:	e5cb      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
  416efc:	2100      	movs	r1, #0
  416efe:	4620      	mov	r0, r4
  416f00:	4f19      	ldr	r7, [pc, #100]	; (416f68 <theme_apply+0x544>)
  416f02:	47b8      	blx	r7
  416f04:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416f06:	4e19      	ldr	r6, [pc, #100]	; (416f6c <theme_apply+0x548>)
  416f08:	6831      	ldr	r1, [r6, #0]
  416f0a:	3104      	adds	r1, #4
  416f0c:	4d18      	ldr	r5, [pc, #96]	; (416f70 <theme_apply+0x54c>)
  416f0e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  416f10:	6831      	ldr	r1, [r6, #0]
  416f12:	3118      	adds	r1, #24
  416f14:	4640      	mov	r0, r8
  416f16:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  416f18:	2104      	movs	r1, #4
  416f1a:	4620      	mov	r0, r4
  416f1c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
  416f1e:	6831      	ldr	r1, [r6, #0]
  416f20:	31bc      	adds	r1, #188	; 0xbc
  416f22:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  416f24:	2103      	movs	r1, #3
  416f26:	4620      	mov	r0, r4
  416f28:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
  416f2a:	6831      	ldr	r1, [r6, #0]
  416f2c:	31b8      	adds	r1, #184	; 0xb8
  416f2e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  416f30:	2101      	movs	r1, #1
  416f32:	4620      	mov	r0, r4
  416f34:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  416f36:	6831      	ldr	r1, [r6, #0]
  416f38:	3184      	adds	r1, #132	; 0x84
  416f3a:	47a8      	blx	r5
            break;
  416f3c:	e5aa      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
  416f3e:	2100      	movs	r1, #0
  416f40:	4620      	mov	r0, r4
  416f42:	4f09      	ldr	r7, [pc, #36]	; (416f68 <theme_apply+0x544>)
  416f44:	47b8      	blx	r7
  416f46:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416f48:	4e08      	ldr	r6, [pc, #32]	; (416f6c <theme_apply+0x548>)
  416f4a:	6831      	ldr	r1, [r6, #0]
  416f4c:	3104      	adds	r1, #4
  416f4e:	4d08      	ldr	r5, [pc, #32]	; (416f70 <theme_apply+0x54c>)
  416f50:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  416f52:	6831      	ldr	r1, [r6, #0]
  416f54:	3118      	adds	r1, #24
  416f56:	4640      	mov	r0, r8
  416f58:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
  416f5a:	2103      	movs	r1, #3
  416f5c:	4620      	mov	r0, r4
  416f5e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
  416f60:	6831      	ldr	r1, [r6, #0]
  416f62:	319c      	adds	r1, #156	; 0x9c
  416f64:	47a8      	blx	r5
            break;
  416f66:	e595      	b.n	416a94 <theme_apply+0x70>
  416f68:	004054e1 	.word	0x004054e1
  416f6c:	20414798 	.word	0x20414798
  416f70:	004092bd 	.word	0x004092bd
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  416f74:	2100      	movs	r1, #0
  416f76:	4620      	mov	r0, r4
  416f78:	4b31      	ldr	r3, [pc, #196]	; (417040 <theme_apply+0x61c>)
  416f7a:	4798      	blx	r3
  416f7c:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  416f7e:	4e31      	ldr	r6, [pc, #196]	; (417044 <theme_apply+0x620>)
  416f80:	6831      	ldr	r1, [r6, #0]
  416f82:	3104      	adds	r1, #4
  416f84:	4d30      	ldr	r5, [pc, #192]	; (417048 <theme_apply+0x624>)
  416f86:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  416f88:	6831      	ldr	r1, [r6, #0]
  416f8a:	3108      	adds	r1, #8
  416f8c:	4638      	mov	r0, r7
  416f8e:	47a8      	blx	r5
            break;
  416f90:	e580      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
  416f92:	2100      	movs	r1, #0
  416f94:	4620      	mov	r0, r4
  416f96:	4f2a      	ldr	r7, [pc, #168]	; (417040 <theme_apply+0x61c>)
  416f98:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  416f9a:	4e2a      	ldr	r6, [pc, #168]	; (417044 <theme_apply+0x620>)
  416f9c:	6831      	ldr	r1, [r6, #0]
  416f9e:	3104      	adds	r1, #4
  416fa0:	4d29      	ldr	r5, [pc, #164]	; (417048 <theme_apply+0x624>)
  416fa2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
  416fa4:	2103      	movs	r1, #3
  416fa6:	4620      	mov	r0, r4
  416fa8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
  416faa:	6831      	ldr	r1, [r6, #0]
  416fac:	3130      	adds	r1, #48	; 0x30
  416fae:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
  416fb0:	2101      	movs	r1, #1
  416fb2:	4620      	mov	r0, r4
  416fb4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
  416fb6:	6831      	ldr	r1, [r6, #0]
  416fb8:	3134      	adds	r1, #52	; 0x34
  416fba:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  416fbc:	2102      	movs	r1, #2
  416fbe:	4620      	mov	r0, r4
  416fc0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
  416fc2:	6831      	ldr	r1, [r6, #0]
  416fc4:	3138      	adds	r1, #56	; 0x38
  416fc6:	47a8      	blx	r5
            break;
  416fc8:	e564      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
  416fca:	2100      	movs	r1, #0
  416fcc:	4620      	mov	r0, r4
  416fce:	4f1c      	ldr	r7, [pc, #112]	; (417040 <theme_apply+0x61c>)
  416fd0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
  416fd2:	4e1c      	ldr	r6, [pc, #112]	; (417044 <theme_apply+0x620>)
  416fd4:	6831      	ldr	r1, [r6, #0]
  416fd6:	313c      	adds	r1, #60	; 0x3c
  416fd8:	4d1b      	ldr	r5, [pc, #108]	; (417048 <theme_apply+0x624>)
  416fda:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
  416fdc:	2101      	movs	r1, #1
  416fde:	4620      	mov	r0, r4
  416fe0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
  416fe2:	6831      	ldr	r1, [r6, #0]
  416fe4:	3140      	adds	r1, #64	; 0x40
  416fe6:	47a8      	blx	r5
            break;
  416fe8:	e554      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
  416fea:	2100      	movs	r1, #0
  416fec:	4620      	mov	r0, r4
  416fee:	4b14      	ldr	r3, [pc, #80]	; (417040 <theme_apply+0x61c>)
  416ff0:	4798      	blx	r3
  416ff2:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  416ff4:	4e13      	ldr	r6, [pc, #76]	; (417044 <theme_apply+0x620>)
  416ff6:	6831      	ldr	r1, [r6, #0]
  416ff8:	3104      	adds	r1, #4
  416ffa:	4d13      	ldr	r5, [pc, #76]	; (417048 <theme_apply+0x624>)
  416ffc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
  416ffe:	6831      	ldr	r1, [r6, #0]
  417000:	3174      	adds	r1, #116	; 0x74
  417002:	4638      	mov	r0, r7
  417004:	47a8      	blx	r5
            break;
  417006:	e545      	b.n	416a94 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
  417008:	2100      	movs	r1, #0
  41700a:	4620      	mov	r0, r4
  41700c:	4f0c      	ldr	r7, [pc, #48]	; (417040 <theme_apply+0x61c>)
  41700e:	47b8      	blx	r7
  417010:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417012:	4e0c      	ldr	r6, [pc, #48]	; (417044 <theme_apply+0x620>)
  417014:	6831      	ldr	r1, [r6, #0]
  417016:	3104      	adds	r1, #4
  417018:	4d0b      	ldr	r5, [pc, #44]	; (417048 <theme_apply+0x624>)
  41701a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
  41701c:	6831      	ldr	r1, [r6, #0]
  41701e:	3160      	adds	r1, #96	; 0x60
  417020:	4640      	mov	r0, r8
  417022:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
  417024:	2101      	movs	r1, #1
  417026:	4620      	mov	r0, r4
  417028:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
  41702a:	6831      	ldr	r1, [r6, #0]
  41702c:	3164      	adds	r1, #100	; 0x64
  41702e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
  417030:	2102      	movs	r1, #2
  417032:	4620      	mov	r0, r4
  417034:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
  417036:	6831      	ldr	r1, [r6, #0]
  417038:	3168      	adds	r1, #104	; 0x68
  41703a:	47a8      	blx	r5
            break;
  41703c:	e52a      	b.n	416a94 <theme_apply+0x70>
  41703e:	bf00      	nop
  417040:	004054e1 	.word	0x004054e1
  417044:	20414798 	.word	0x20414798
  417048:	004092bd 	.word	0x004092bd

0041704c <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
  41704c:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
  41704e:	4b04      	ldr	r3, [pc, #16]	; (417060 <style_init_reset+0x14>)
  417050:	781b      	ldrb	r3, [r3, #0]
  417052:	b913      	cbnz	r3, 41705a <style_init_reset+0xe>
    else lv_style_init(style);
  417054:	4b03      	ldr	r3, [pc, #12]	; (417064 <style_init_reset+0x18>)
  417056:	4798      	blx	r3
  417058:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
  41705a:	4b03      	ldr	r3, [pc, #12]	; (417068 <style_init_reset+0x1c>)
  41705c:	4798      	blx	r3
  41705e:	bd08      	pop	{r3, pc}
  417060:	20414794 	.word	0x20414794
  417064:	004091d9 	.word	0x004091d9
  417068:	004093fd 	.word	0x004093fd

0041706c <bar_init>:
{
  41706c:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->bar_bg);
  41706e:	4c6f      	ldr	r4, [pc, #444]	; (41722c <bar_init+0x1c0>)
  417070:	6820      	ldr	r0, [r4, #0]
  417072:	3028      	adds	r0, #40	; 0x28
  417074:	4b6e      	ldr	r3, [pc, #440]	; (417230 <bar_init+0x1c4>)
  417076:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417078:	6820      	ldr	r0, [r4, #0]
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41707a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41707e:	2101      	movs	r1, #1
  417080:	3028      	adds	r0, #40	; 0x28
  417082:	4b6c      	ldr	r3, [pc, #432]	; (417234 <bar_init+0x1c8>)
  417084:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  417086:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417088:	22ff      	movs	r2, #255	; 0xff
  41708a:	212c      	movs	r1, #44	; 0x2c
  41708c:	3028      	adds	r0, #40	; 0x28
  41708e:	4b6a      	ldr	r3, [pc, #424]	; (417238 <bar_init+0x1cc>)
  417090:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  417092:	6820      	ldr	r0, [r4, #0]
  417094:	3028      	adds	r0, #40	; 0x28
  417096:	4b69      	ldr	r3, [pc, #420]	; (41723c <bar_init+0x1d0>)
  417098:	6a1b      	ldr	r3, [r3, #32]
  41709a:	f013 0f02 	tst.w	r3, #2
  41709e:	f000 808e 	beq.w	4171be <bar_init+0x152>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  4170a2:	f04f 0200 	mov.w	r2, #0
  4170a6:	2306      	movs	r3, #6
  4170a8:	f363 0202 	bfi	r2, r3, #0, #3
  4170ac:	231a      	movs	r3, #26
  4170ae:	f363 02c7 	bfi	r2, r3, #3, #5
  4170b2:	231b      	movs	r3, #27
  4170b4:	f363 220c 	bfi	r2, r3, #8, #5
  4170b8:	2305      	movs	r3, #5
  4170ba:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4170be:	2129      	movs	r1, #41	; 0x29
  4170c0:	4b5f      	ldr	r3, [pc, #380]	; (417240 <bar_init+0x1d4>)
  4170c2:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4170c4:	4b59      	ldr	r3, [pc, #356]	; (41722c <bar_init+0x1c0>)
  4170c6:	6818      	ldr	r0, [r3, #0]
  4170c8:	3028      	adds	r0, #40	; 0x28
  4170ca:	4b5c      	ldr	r3, [pc, #368]	; (41723c <bar_init+0x1d0>)
  4170cc:	6a1b      	ldr	r3, [r3, #32]
  4170ce:	f013 0f02 	tst.w	r3, #2
  4170d2:	f000 8082 	beq.w	4171da <bar_init+0x16e>
  4170d6:	f04f 0200 	mov.w	r2, #0
  4170da:	2302      	movs	r3, #2
  4170dc:	f363 0202 	bfi	r2, r3, #0, #3
  4170e0:	2306      	movs	r3, #6
  4170e2:	f363 02c7 	bfi	r2, r3, #3, #5
  4170e6:	2309      	movs	r3, #9
  4170e8:	f363 220c 	bfi	r2, r3, #8, #5
  4170ec:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4170f0:	2179      	movs	r1, #121	; 0x79
  4170f2:	4d53      	ldr	r5, [pc, #332]	; (417240 <bar_init+0x1d4>)
  4170f4:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
  4170f6:	4c4d      	ldr	r4, [pc, #308]	; (41722c <bar_init+0x1c0>)
  4170f8:	6820      	ldr	r0, [r4, #0]
  4170fa:	4e50      	ldr	r6, [pc, #320]	; (41723c <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  4170fc:	89b2      	ldrh	r2, [r6, #12]
  4170fe:	2149      	movs	r1, #73	; 0x49
  417100:	3028      	adds	r0, #40	; 0x28
  417102:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
  417104:	6820      	ldr	r0, [r4, #0]
  417106:	89f2      	ldrh	r2, [r6, #14]
  417108:	f240 4149 	movw	r1, #1097	; 0x449
  41710c:	3028      	adds	r0, #40	; 0x28
  41710e:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  417110:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  417112:	2200      	movs	r2, #0
  417114:	214c      	movs	r1, #76	; 0x4c
  417116:	3028      	adds	r0, #40	; 0x28
  417118:	4d47      	ldr	r5, [pc, #284]	; (417238 <bar_init+0x1cc>)
  41711a:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
  41711c:	6820      	ldr	r0, [r4, #0]
  41711e:	227f      	movs	r2, #127	; 0x7f
  417120:	f44f 7113 	mov.w	r1, #588	; 0x24c
  417124:	3028      	adds	r0, #40	; 0x28
  417126:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  417128:	6824      	ldr	r4, [r4, #0]
  41712a:	3428      	adds	r4, #40	; 0x28
  41712c:	6a33      	ldr	r3, [r6, #32]
  41712e:	f013 0f20 	tst.w	r3, #32
  417132:	d055      	beq.n	4171e0 <bar_init+0x174>
  417134:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  417136:	2140      	movs	r1, #64	; 0x40
  417138:	4620      	mov	r0, r4
  41713a:	4d3e      	ldr	r5, [pc, #248]	; (417234 <bar_init+0x1c8>)
  41713c:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41713e:	4c3b      	ldr	r4, [pc, #236]	; (41722c <bar_init+0x1c0>)
  417140:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  417142:	2200      	movs	r2, #0
  417144:	21b0      	movs	r1, #176	; 0xb0
  417146:	3028      	adds	r0, #40	; 0x28
  417148:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41714a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41714c:	224c      	movs	r2, #76	; 0x4c
  41714e:	21b7      	movs	r1, #183	; 0xb7
  417150:	3028      	adds	r0, #40	; 0x28
  417152:	47a8      	blx	r5
    style_init_reset(&styles->bar_indic);
  417154:	6820      	ldr	r0, [r4, #0]
  417156:	302c      	adds	r0, #44	; 0x2c
  417158:	4b35      	ldr	r3, [pc, #212]	; (417230 <bar_init+0x1c4>)
  41715a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41715c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41715e:	22ff      	movs	r2, #255	; 0xff
  417160:	212c      	movs	r1, #44	; 0x2c
  417162:	4408      	add	r0, r1
  417164:	4b34      	ldr	r3, [pc, #208]	; (417238 <bar_init+0x1cc>)
  417166:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417168:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41716a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41716e:	2101      	movs	r1, #1
  417170:	302c      	adds	r0, #44	; 0x2c
  417172:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
  417174:	6820      	ldr	r0, [r4, #0]
  417176:	4d31      	ldr	r5, [pc, #196]	; (41723c <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417178:	89aa      	ldrh	r2, [r5, #12]
  41717a:	2129      	movs	r1, #41	; 0x29
  41717c:	302c      	adds	r0, #44	; 0x2c
  41717e:	4e30      	ldr	r6, [pc, #192]	; (417240 <bar_init+0x1d4>)
  417180:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
  417182:	6820      	ldr	r0, [r4, #0]
  417184:	f04f 0200 	mov.w	r2, #0
  417188:	2304      	movs	r3, #4
  41718a:	f363 0202 	bfi	r2, r3, #0, #3
  41718e:	2311      	movs	r3, #17
  417190:	f363 02c7 	bfi	r2, r3, #3, #5
  417194:	f363 220c 	bfi	r2, r3, #8, #5
  417198:	2302      	movs	r3, #2
  41719a:	f363 324f 	bfi	r2, r3, #13, #3
  41719e:	f242 0129 	movw	r1, #8233	; 0x2029
  4171a2:	302c      	adds	r0, #44	; 0x2c
  4171a4:	47b0      	blx	r6
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
  4171a6:	6820      	ldr	r0, [r4, #0]
  4171a8:	302c      	adds	r0, #44	; 0x2c
  4171aa:	6a2b      	ldr	r3, [r5, #32]
  4171ac:	f013 0f02 	tst.w	r3, #2
  4171b0:	d12d      	bne.n	41720e <bar_init+0x1a2>
  4171b2:	4b24      	ldr	r3, [pc, #144]	; (417244 <bar_init+0x1d8>)
  4171b4:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4171b6:	2179      	movs	r1, #121	; 0x79
  4171b8:	4b21      	ldr	r3, [pc, #132]	; (417240 <bar_init+0x1d4>)
  4171ba:	4798      	blx	r3
  4171bc:	bd70      	pop	{r4, r5, r6, pc}
  4171be:	2302      	movs	r3, #2
  4171c0:	f04f 0200 	mov.w	r2, #0
  4171c4:	f363 0202 	bfi	r2, r3, #0, #3
  4171c8:	2108      	movs	r1, #8
  4171ca:	f361 02c7 	bfi	r2, r1, #3, #5
  4171ce:	2109      	movs	r1, #9
  4171d0:	f361 220c 	bfi	r2, r1, #8, #5
  4171d4:	f363 324f 	bfi	r2, r3, #13, #3
  4171d8:	e771      	b.n	4170be <bar_init+0x52>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4171da:	4b1a      	ldr	r3, [pc, #104]	; (417244 <bar_init+0x1d8>)
  4171dc:	881a      	ldrh	r2, [r3, #0]
  4171de:	e787      	b.n	4170f0 <bar_init+0x84>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  4171e0:	2000      	movs	r0, #0
  4171e2:	4b19      	ldr	r3, [pc, #100]	; (417248 <bar_init+0x1dc>)
  4171e4:	4798      	blx	r3
  4171e6:	3028      	adds	r0, #40	; 0x28
  4171e8:	0040      	lsls	r0, r0, #1
  4171ea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4171ee:	da01      	bge.n	4171f4 <bar_init+0x188>
  4171f0:	2201      	movs	r2, #1
  4171f2:	e7a0      	b.n	417136 <bar_init+0xca>
  4171f4:	2000      	movs	r0, #0
  4171f6:	4b14      	ldr	r3, [pc, #80]	; (417248 <bar_init+0x1dc>)
  4171f8:	4798      	blx	r3
  4171fa:	3028      	adds	r0, #40	; 0x28
  4171fc:	0040      	lsls	r0, r0, #1
  4171fe:	4b13      	ldr	r3, [pc, #76]	; (41724c <bar_init+0x1e0>)
  417200:	fb83 2300 	smull	r2, r3, r3, r0
  417204:	17c2      	asrs	r2, r0, #31
  417206:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41720a:	b212      	sxth	r2, r2
  41720c:	e793      	b.n	417136 <bar_init+0xca>
  41720e:	f04f 0200 	mov.w	r2, #0
  417212:	2302      	movs	r3, #2
  417214:	f363 0202 	bfi	r2, r3, #0, #3
  417218:	2308      	movs	r3, #8
  41721a:	f363 02c7 	bfi	r2, r3, #3, #5
  41721e:	2309      	movs	r3, #9
  417220:	f363 220c 	bfi	r2, r3, #8, #5
  417224:	f36f 324f 	bfc	r2, #13, #3
  417228:	e7c5      	b.n	4171b6 <bar_init+0x14a>
  41722a:	bf00      	nop
  41722c:	20414798 	.word	0x20414798
  417230:	0041704d 	.word	0x0041704d
  417234:	004095c1 	.word	0x004095c1
  417238:	004098e1 	.word	0x004098e1
  41723c:	2041479c 	.word	0x2041479c
  417240:	00409751 	.word	0x00409751
  417244:	0042497c 	.word	0x0042497c
  417248:	00413f95 	.word	0x00413f95
  41724c:	66666667 	.word	0x66666667

00417250 <slider_init>:
{
  417250:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
  417252:	4ca3      	ldr	r4, [pc, #652]	; (4174e0 <slider_init+0x290>)
  417254:	6820      	ldr	r0, [r4, #0]
  417256:	3094      	adds	r0, #148	; 0x94
  417258:	4ba2      	ldr	r3, [pc, #648]	; (4174e4 <slider_init+0x294>)
  41725a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  41725c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41725e:	22ff      	movs	r2, #255	; 0xff
  417260:	212c      	movs	r1, #44	; 0x2c
  417262:	3094      	adds	r0, #148	; 0x94
  417264:	4ba0      	ldr	r3, [pc, #640]	; (4174e8 <slider_init+0x298>)
  417266:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  417268:	6820      	ldr	r0, [r4, #0]
  41726a:	3094      	adds	r0, #148	; 0x94
  41726c:	4b9f      	ldr	r3, [pc, #636]	; (4174ec <slider_init+0x29c>)
  41726e:	6a1b      	ldr	r3, [r3, #32]
  417270:	f013 0f02 	tst.w	r3, #2
  417274:	f000 80ba 	beq.w	4173ec <slider_init+0x19c>
  417278:	4b9c      	ldr	r3, [pc, #624]	; (4174ec <slider_init+0x29c>)
  41727a:	899a      	ldrh	r2, [r3, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41727c:	2129      	movs	r1, #41	; 0x29
  41727e:	4b9c      	ldr	r3, [pc, #624]	; (4174f0 <slider_init+0x2a0>)
  417280:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  417282:	4b97      	ldr	r3, [pc, #604]	; (4174e0 <slider_init+0x290>)
  417284:	6818      	ldr	r0, [r3, #0]
  417286:	3094      	adds	r0, #148	; 0x94
  417288:	4b98      	ldr	r3, [pc, #608]	; (4174ec <slider_init+0x29c>)
  41728a:	6a1b      	ldr	r3, [r3, #32]
  41728c:	f013 0f02 	tst.w	r3, #2
  417290:	f000 80af 	beq.w	4173f2 <slider_init+0x1a2>
  417294:	f04f 0200 	mov.w	r2, #0
  417298:	2302      	movs	r3, #2
  41729a:	f363 0202 	bfi	r2, r3, #0, #3
  41729e:	2306      	movs	r3, #6
  4172a0:	f363 02c7 	bfi	r2, r3, #3, #5
  4172a4:	2309      	movs	r3, #9
  4172a6:	f363 220c 	bfi	r2, r3, #8, #5
  4172aa:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4172ae:	2179      	movs	r1, #121	; 0x79
  4172b0:	4b8f      	ldr	r3, [pc, #572]	; (4174f0 <slider_init+0x2a0>)
  4172b2:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4172b4:	4c8a      	ldr	r4, [pc, #552]	; (4174e0 <slider_init+0x290>)
  4172b6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4172b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4172bc:	2101      	movs	r1, #1
  4172be:	3094      	adds	r0, #148	; 0x94
  4172c0:	4b8c      	ldr	r3, [pc, #560]	; (4174f4 <slider_init+0x2a4>)
  4172c2:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4172c4:	6824      	ldr	r4, [r4, #0]
  4172c6:	3494      	adds	r4, #148	; 0x94
  4172c8:	2000      	movs	r0, #0
  4172ca:	4b8b      	ldr	r3, [pc, #556]	; (4174f8 <slider_init+0x2a8>)
  4172cc:	4798      	blx	r3
  4172ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4172d2:	3050      	adds	r0, #80	; 0x50
  4172d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4172d8:	f280 808e 	bge.w	4173f8 <slider_init+0x1a8>
  4172dc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4172de:	2112      	movs	r1, #18
  4172e0:	4620      	mov	r0, r4
  4172e2:	4b84      	ldr	r3, [pc, #528]	; (4174f4 <slider_init+0x2a4>)
  4172e4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4172e6:	4b7e      	ldr	r3, [pc, #504]	; (4174e0 <slider_init+0x290>)
  4172e8:	681c      	ldr	r4, [r3, #0]
  4172ea:	3494      	adds	r4, #148	; 0x94
  4172ec:	2000      	movs	r0, #0
  4172ee:	4b82      	ldr	r3, [pc, #520]	; (4174f8 <slider_init+0x2a8>)
  4172f0:	4798      	blx	r3
  4172f2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4172f6:	3050      	adds	r0, #80	; 0x50
  4172f8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4172fc:	f280 808a 	bge.w	417414 <slider_init+0x1c4>
  417300:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417302:	2113      	movs	r1, #19
  417304:	4620      	mov	r0, r4
  417306:	4b7b      	ldr	r3, [pc, #492]	; (4174f4 <slider_init+0x2a4>)
  417308:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  41730a:	4b75      	ldr	r3, [pc, #468]	; (4174e0 <slider_init+0x290>)
  41730c:	681c      	ldr	r4, [r3, #0]
  41730e:	3494      	adds	r4, #148	; 0x94
  417310:	2000      	movs	r0, #0
  417312:	4b79      	ldr	r3, [pc, #484]	; (4174f8 <slider_init+0x2a8>)
  417314:	4798      	blx	r3
  417316:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41731a:	3050      	adds	r0, #80	; 0x50
  41731c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417320:	f280 8086 	bge.w	417430 <slider_init+0x1e0>
  417324:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417326:	2110      	movs	r1, #16
  417328:	4620      	mov	r0, r4
  41732a:	4b72      	ldr	r3, [pc, #456]	; (4174f4 <slider_init+0x2a4>)
  41732c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  41732e:	4b6c      	ldr	r3, [pc, #432]	; (4174e0 <slider_init+0x290>)
  417330:	681c      	ldr	r4, [r3, #0]
  417332:	3494      	adds	r4, #148	; 0x94
  417334:	2000      	movs	r0, #0
  417336:	4b70      	ldr	r3, [pc, #448]	; (4174f8 <slider_init+0x2a8>)
  417338:	4798      	blx	r3
  41733a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41733e:	3050      	adds	r0, #80	; 0x50
  417340:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417344:	f280 8082 	bge.w	41744c <slider_init+0x1fc>
  417348:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41734a:	2111      	movs	r1, #17
  41734c:	4620      	mov	r0, r4
  41734e:	4b69      	ldr	r3, [pc, #420]	; (4174f4 <slider_init+0x2a4>)
  417350:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
  417352:	4c63      	ldr	r4, [pc, #396]	; (4174e0 <slider_init+0x290>)
  417354:	6820      	ldr	r0, [r4, #0]
  417356:	3098      	adds	r0, #152	; 0x98
  417358:	4b62      	ldr	r3, [pc, #392]	; (4174e4 <slider_init+0x294>)
  41735a:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41735c:	6824      	ldr	r4, [r4, #0]
  41735e:	3498      	adds	r4, #152	; 0x98
  417360:	2000      	movs	r0, #0
  417362:	4b65      	ldr	r3, [pc, #404]	; (4174f8 <slider_init+0x2a8>)
  417364:	4798      	blx	r3
  417366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41736a:	0040      	lsls	r0, r0, #1
  41736c:	3050      	adds	r0, #80	; 0x50
  41736e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417372:	da79      	bge.n	417468 <slider_init+0x218>
  417374:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  417376:	2117      	movs	r1, #23
  417378:	4620      	mov	r0, r4
  41737a:	4b5e      	ldr	r3, [pc, #376]	; (4174f4 <slider_init+0x2a4>)
  41737c:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41737e:	4b58      	ldr	r3, [pc, #352]	; (4174e0 <slider_init+0x290>)
  417380:	681c      	ldr	r4, [r3, #0]
  417382:	3498      	adds	r4, #152	; 0x98
  417384:	2000      	movs	r0, #0
  417386:	4b5c      	ldr	r3, [pc, #368]	; (4174f8 <slider_init+0x2a8>)
  417388:	4798      	blx	r3
  41738a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41738e:	0040      	lsls	r0, r0, #1
  417390:	3050      	adds	r0, #80	; 0x50
  417392:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417396:	da76      	bge.n	417486 <slider_init+0x236>
  417398:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41739a:	2118      	movs	r1, #24
  41739c:	4620      	mov	r0, r4
  41739e:	4b55      	ldr	r3, [pc, #340]	; (4174f4 <slider_init+0x2a4>)
  4173a0:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4173a2:	4b4f      	ldr	r3, [pc, #316]	; (4174e0 <slider_init+0x290>)
  4173a4:	681c      	ldr	r4, [r3, #0]
  4173a6:	3498      	adds	r4, #152	; 0x98
  4173a8:	2000      	movs	r0, #0
  4173aa:	4b53      	ldr	r3, [pc, #332]	; (4174f8 <slider_init+0x2a8>)
  4173ac:	4798      	blx	r3
  4173ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4173b2:	0040      	lsls	r0, r0, #1
  4173b4:	3050      	adds	r0, #80	; 0x50
  4173b6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4173ba:	da73      	bge.n	4174a4 <slider_init+0x254>
  4173bc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  4173be:	2115      	movs	r1, #21
  4173c0:	4620      	mov	r0, r4
  4173c2:	4b4c      	ldr	r3, [pc, #304]	; (4174f4 <slider_init+0x2a4>)
  4173c4:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4173c6:	4b46      	ldr	r3, [pc, #280]	; (4174e0 <slider_init+0x290>)
  4173c8:	681c      	ldr	r4, [r3, #0]
  4173ca:	3498      	adds	r4, #152	; 0x98
  4173cc:	2000      	movs	r0, #0
  4173ce:	4b4a      	ldr	r3, [pc, #296]	; (4174f8 <slider_init+0x2a8>)
  4173d0:	4798      	blx	r3
  4173d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4173d6:	0040      	lsls	r0, r0, #1
  4173d8:	3050      	adds	r0, #80	; 0x50
  4173da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4173de:	da70      	bge.n	4174c2 <slider_init+0x272>
  4173e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4173e2:	2116      	movs	r1, #22
  4173e4:	4620      	mov	r0, r4
  4173e6:	4b43      	ldr	r3, [pc, #268]	; (4174f4 <slider_init+0x2a4>)
  4173e8:	4798      	blx	r3
  4173ea:	bd10      	pop	{r4, pc}
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  4173ec:	4b43      	ldr	r3, [pc, #268]	; (4174fc <slider_init+0x2ac>)
  4173ee:	881a      	ldrh	r2, [r3, #0]
  4173f0:	e744      	b.n	41727c <slider_init+0x2c>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4173f2:	4b42      	ldr	r3, [pc, #264]	; (4174fc <slider_init+0x2ac>)
  4173f4:	881a      	ldrh	r2, [r3, #0]
  4173f6:	e75a      	b.n	4172ae <slider_init+0x5e>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4173f8:	2000      	movs	r0, #0
  4173fa:	4b3f      	ldr	r3, [pc, #252]	; (4174f8 <slider_init+0x2a8>)
  4173fc:	4798      	blx	r3
  4173fe:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417402:	3050      	adds	r0, #80	; 0x50
  417404:	4b3e      	ldr	r3, [pc, #248]	; (417500 <slider_init+0x2b0>)
  417406:	fb83 2300 	smull	r2, r3, r3, r0
  41740a:	17c2      	asrs	r2, r0, #31
  41740c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417410:	b212      	sxth	r2, r2
  417412:	e764      	b.n	4172de <slider_init+0x8e>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417414:	2000      	movs	r0, #0
  417416:	4b38      	ldr	r3, [pc, #224]	; (4174f8 <slider_init+0x2a8>)
  417418:	4798      	blx	r3
  41741a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41741e:	3050      	adds	r0, #80	; 0x50
  417420:	4b37      	ldr	r3, [pc, #220]	; (417500 <slider_init+0x2b0>)
  417422:	fb83 2300 	smull	r2, r3, r3, r0
  417426:	17c2      	asrs	r2, r0, #31
  417428:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41742c:	b212      	sxth	r2, r2
  41742e:	e768      	b.n	417302 <slider_init+0xb2>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417430:	2000      	movs	r0, #0
  417432:	4b31      	ldr	r3, [pc, #196]	; (4174f8 <slider_init+0x2a8>)
  417434:	4798      	blx	r3
  417436:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41743a:	3050      	adds	r0, #80	; 0x50
  41743c:	4b30      	ldr	r3, [pc, #192]	; (417500 <slider_init+0x2b0>)
  41743e:	fb83 2300 	smull	r2, r3, r3, r0
  417442:	17c2      	asrs	r2, r0, #31
  417444:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417448:	b212      	sxth	r2, r2
  41744a:	e76c      	b.n	417326 <slider_init+0xd6>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  41744c:	2000      	movs	r0, #0
  41744e:	4b2a      	ldr	r3, [pc, #168]	; (4174f8 <slider_init+0x2a8>)
  417450:	4798      	blx	r3
  417452:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417456:	3050      	adds	r0, #80	; 0x50
  417458:	4b29      	ldr	r3, [pc, #164]	; (417500 <slider_init+0x2b0>)
  41745a:	fb83 2300 	smull	r2, r3, r3, r0
  41745e:	17c2      	asrs	r2, r0, #31
  417460:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417464:	b212      	sxth	r2, r2
  417466:	e770      	b.n	41734a <slider_init+0xfa>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417468:	2000      	movs	r0, #0
  41746a:	4b23      	ldr	r3, [pc, #140]	; (4174f8 <slider_init+0x2a8>)
  41746c:	4798      	blx	r3
  41746e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417472:	0040      	lsls	r0, r0, #1
  417474:	3050      	adds	r0, #80	; 0x50
  417476:	4b22      	ldr	r3, [pc, #136]	; (417500 <slider_init+0x2b0>)
  417478:	fb83 2300 	smull	r2, r3, r3, r0
  41747c:	17c2      	asrs	r2, r0, #31
  41747e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417482:	b212      	sxth	r2, r2
  417484:	e777      	b.n	417376 <slider_init+0x126>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417486:	2000      	movs	r0, #0
  417488:	4b1b      	ldr	r3, [pc, #108]	; (4174f8 <slider_init+0x2a8>)
  41748a:	4798      	blx	r3
  41748c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417490:	0040      	lsls	r0, r0, #1
  417492:	3050      	adds	r0, #80	; 0x50
  417494:	4b1a      	ldr	r3, [pc, #104]	; (417500 <slider_init+0x2b0>)
  417496:	fb83 2300 	smull	r2, r3, r3, r0
  41749a:	17c2      	asrs	r2, r0, #31
  41749c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4174a0:	b212      	sxth	r2, r2
  4174a2:	e77a      	b.n	41739a <slider_init+0x14a>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4174a4:	2000      	movs	r0, #0
  4174a6:	4b14      	ldr	r3, [pc, #80]	; (4174f8 <slider_init+0x2a8>)
  4174a8:	4798      	blx	r3
  4174aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4174ae:	0040      	lsls	r0, r0, #1
  4174b0:	3050      	adds	r0, #80	; 0x50
  4174b2:	4b13      	ldr	r3, [pc, #76]	; (417500 <slider_init+0x2b0>)
  4174b4:	fb83 2300 	smull	r2, r3, r3, r0
  4174b8:	17c2      	asrs	r2, r0, #31
  4174ba:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4174be:	b212      	sxth	r2, r2
  4174c0:	e77d      	b.n	4173be <slider_init+0x16e>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4174c2:	2000      	movs	r0, #0
  4174c4:	4b0c      	ldr	r3, [pc, #48]	; (4174f8 <slider_init+0x2a8>)
  4174c6:	4798      	blx	r3
  4174c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4174cc:	0040      	lsls	r0, r0, #1
  4174ce:	3050      	adds	r0, #80	; 0x50
  4174d0:	4b0b      	ldr	r3, [pc, #44]	; (417500 <slider_init+0x2b0>)
  4174d2:	fb83 2300 	smull	r2, r3, r3, r0
  4174d6:	17c2      	asrs	r2, r0, #31
  4174d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4174dc:	b212      	sxth	r2, r2
  4174de:	e780      	b.n	4173e2 <slider_init+0x192>
  4174e0:	20414798 	.word	0x20414798
  4174e4:	0041704d 	.word	0x0041704d
  4174e8:	004098e1 	.word	0x004098e1
  4174ec:	2041479c 	.word	0x2041479c
  4174f0:	00409751 	.word	0x00409751
  4174f4:	004095c1 	.word	0x004095c1
  4174f8:	00413f95 	.word	0x00413f95
  4174fc:	0042497c 	.word	0x0042497c
  417500:	66666667 	.word	0x66666667

00417504 <switch_init>:
{
  417504:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
  417506:	4c48      	ldr	r4, [pc, #288]	; (417628 <switch_init+0x124>)
  417508:	6820      	ldr	r0, [r4, #0]
  41750a:	30a0      	adds	r0, #160	; 0xa0
  41750c:	4b47      	ldr	r3, [pc, #284]	; (41762c <switch_init+0x128>)
  41750e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  417510:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417512:	22ff      	movs	r2, #255	; 0xff
  417514:	212c      	movs	r1, #44	; 0x2c
  417516:	30a0      	adds	r0, #160	; 0xa0
  417518:	4b45      	ldr	r3, [pc, #276]	; (417630 <switch_init+0x12c>)
  41751a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41751c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41751e:	4b45      	ldr	r3, [pc, #276]	; (417634 <switch_init+0x130>)
  417520:	881a      	ldrh	r2, [r3, #0]
  417522:	2129      	movs	r1, #41	; 0x29
  417524:	30a0      	adds	r0, #160	; 0xa0
  417526:	4b44      	ldr	r3, [pc, #272]	; (417638 <switch_init+0x134>)
  417528:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41752a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41752c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417530:	2101      	movs	r1, #1
  417532:	30a0      	adds	r0, #160	; 0xa0
  417534:	4b41      	ldr	r3, [pc, #260]	; (41763c <switch_init+0x138>)
  417536:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  417538:	6824      	ldr	r4, [r4, #0]
  41753a:	34a0      	adds	r4, #160	; 0xa0
  41753c:	2000      	movs	r0, #0
  41753e:	4b40      	ldr	r3, [pc, #256]	; (417640 <switch_init+0x13c>)
  417540:	4798      	blx	r3
  417542:	3014      	adds	r0, #20
  417544:	0080      	lsls	r0, r0, #2
  417546:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41754a:	da39      	bge.n	4175c0 <switch_init+0xbc>
  41754c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417550:	2110      	movs	r1, #16
  417552:	4620      	mov	r0, r4
  417554:	4b39      	ldr	r3, [pc, #228]	; (41763c <switch_init+0x138>)
  417556:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  417558:	4b33      	ldr	r3, [pc, #204]	; (417628 <switch_init+0x124>)
  41755a:	681c      	ldr	r4, [r3, #0]
  41755c:	34a0      	adds	r4, #160	; 0xa0
  41755e:	2000      	movs	r0, #0
  417560:	4b37      	ldr	r3, [pc, #220]	; (417640 <switch_init+0x13c>)
  417562:	4798      	blx	r3
  417564:	3014      	adds	r0, #20
  417566:	0080      	lsls	r0, r0, #2
  417568:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41756c:	da35      	bge.n	4175da <switch_init+0xd6>
  41756e:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  417572:	2111      	movs	r1, #17
  417574:	4620      	mov	r0, r4
  417576:	4b31      	ldr	r3, [pc, #196]	; (41763c <switch_init+0x138>)
  417578:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  41757a:	4b2b      	ldr	r3, [pc, #172]	; (417628 <switch_init+0x124>)
  41757c:	681c      	ldr	r4, [r3, #0]
  41757e:	34a0      	adds	r4, #160	; 0xa0
  417580:	2000      	movs	r0, #0
  417582:	4b2f      	ldr	r3, [pc, #188]	; (417640 <switch_init+0x13c>)
  417584:	4798      	blx	r3
  417586:	3014      	adds	r0, #20
  417588:	0080      	lsls	r0, r0, #2
  41758a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41758e:	da31      	bge.n	4175f4 <switch_init+0xf0>
  417590:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417594:	2112      	movs	r1, #18
  417596:	4620      	mov	r0, r4
  417598:	4b28      	ldr	r3, [pc, #160]	; (41763c <switch_init+0x138>)
  41759a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  41759c:	4b22      	ldr	r3, [pc, #136]	; (417628 <switch_init+0x124>)
  41759e:	681c      	ldr	r4, [r3, #0]
  4175a0:	34a0      	adds	r4, #160	; 0xa0
  4175a2:	2000      	movs	r0, #0
  4175a4:	4b26      	ldr	r3, [pc, #152]	; (417640 <switch_init+0x13c>)
  4175a6:	4798      	blx	r3
  4175a8:	3014      	adds	r0, #20
  4175aa:	0080      	lsls	r0, r0, #2
  4175ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4175b0:	da2d      	bge.n	41760e <switch_init+0x10a>
  4175b2:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4175b6:	2113      	movs	r1, #19
  4175b8:	4620      	mov	r0, r4
  4175ba:	4b20      	ldr	r3, [pc, #128]	; (41763c <switch_init+0x138>)
  4175bc:	4798      	blx	r3
  4175be:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  4175c0:	2000      	movs	r0, #0
  4175c2:	4b1f      	ldr	r3, [pc, #124]	; (417640 <switch_init+0x13c>)
  4175c4:	4798      	blx	r3
  4175c6:	3014      	adds	r0, #20
  4175c8:	0080      	lsls	r0, r0, #2
  4175ca:	4b1e      	ldr	r3, [pc, #120]	; (417644 <switch_init+0x140>)
  4175cc:	fb83 2300 	smull	r2, r3, r3, r0
  4175d0:	17c2      	asrs	r2, r0, #31
  4175d2:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  4175d6:	b212      	sxth	r2, r2
  4175d8:	e7ba      	b.n	417550 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  4175da:	2000      	movs	r0, #0
  4175dc:	4b18      	ldr	r3, [pc, #96]	; (417640 <switch_init+0x13c>)
  4175de:	4798      	blx	r3
  4175e0:	3014      	adds	r0, #20
  4175e2:	0080      	lsls	r0, r0, #2
  4175e4:	4b17      	ldr	r3, [pc, #92]	; (417644 <switch_init+0x140>)
  4175e6:	fb83 2300 	smull	r2, r3, r3, r0
  4175ea:	17c2      	asrs	r2, r0, #31
  4175ec:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  4175f0:	b212      	sxth	r2, r2
  4175f2:	e7be      	b.n	417572 <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  4175f4:	2000      	movs	r0, #0
  4175f6:	4b12      	ldr	r3, [pc, #72]	; (417640 <switch_init+0x13c>)
  4175f8:	4798      	blx	r3
  4175fa:	3014      	adds	r0, #20
  4175fc:	0080      	lsls	r0, r0, #2
  4175fe:	4b11      	ldr	r3, [pc, #68]	; (417644 <switch_init+0x140>)
  417600:	fb83 2300 	smull	r2, r3, r3, r0
  417604:	17c2      	asrs	r2, r0, #31
  417606:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41760a:	b212      	sxth	r2, r2
  41760c:	e7c2      	b.n	417594 <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  41760e:	2000      	movs	r0, #0
  417610:	4b0b      	ldr	r3, [pc, #44]	; (417640 <switch_init+0x13c>)
  417612:	4798      	blx	r3
  417614:	3014      	adds	r0, #20
  417616:	0080      	lsls	r0, r0, #2
  417618:	4b0a      	ldr	r3, [pc, #40]	; (417644 <switch_init+0x140>)
  41761a:	fb83 2300 	smull	r2, r3, r3, r0
  41761e:	17c2      	asrs	r2, r0, #31
  417620:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  417624:	b212      	sxth	r2, r2
  417626:	e7c6      	b.n	4175b6 <switch_init+0xb2>
  417628:	20414798 	.word	0x20414798
  41762c:	0041704d 	.word	0x0041704d
  417630:	004098e1 	.word	0x004098e1
  417634:	0042497c 	.word	0x0042497c
  417638:	00409751 	.word	0x00409751
  41763c:	004095c1 	.word	0x004095c1
  417640:	00413f95 	.word	0x00413f95
  417644:	66666667 	.word	0x66666667

00417648 <linemeter_init>:
{
  417648:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->lmeter);
  41764a:	4c8a      	ldr	r4, [pc, #552]	; (417874 <linemeter_init+0x22c>)
  41764c:	6820      	ldr	r0, [r4, #0]
  41764e:	3074      	adds	r0, #116	; 0x74
  417650:	4b89      	ldr	r3, [pc, #548]	; (417878 <linemeter_init+0x230>)
  417652:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417654:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417656:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41765a:	2101      	movs	r1, #1
  41765c:	3074      	adds	r0, #116	; 0x74
  41765e:	4b87      	ldr	r3, [pc, #540]	; (41787c <linemeter_init+0x234>)
  417660:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417662:	6824      	ldr	r4, [r4, #0]
  417664:	3474      	adds	r4, #116	; 0x74
  417666:	2000      	movs	r0, #0
  417668:	4b85      	ldr	r3, [pc, #532]	; (417880 <linemeter_init+0x238>)
  41766a:	4798      	blx	r3
  41766c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417670:	0080      	lsls	r0, r0, #2
  417672:	3050      	adds	r0, #80	; 0x50
  417674:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417678:	f280 8093 	bge.w	4177a2 <linemeter_init+0x15a>
  41767c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41767e:	2112      	movs	r1, #18
  417680:	4620      	mov	r0, r4
  417682:	4b7e      	ldr	r3, [pc, #504]	; (41787c <linemeter_init+0x234>)
  417684:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417686:	4b7b      	ldr	r3, [pc, #492]	; (417874 <linemeter_init+0x22c>)
  417688:	681c      	ldr	r4, [r3, #0]
  41768a:	3474      	adds	r4, #116	; 0x74
  41768c:	2000      	movs	r0, #0
  41768e:	4b7c      	ldr	r3, [pc, #496]	; (417880 <linemeter_init+0x238>)
  417690:	4798      	blx	r3
  417692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417696:	0080      	lsls	r0, r0, #2
  417698:	3050      	adds	r0, #80	; 0x50
  41769a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41769e:	f280 808f 	bge.w	4177c0 <linemeter_init+0x178>
  4176a2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4176a4:	2113      	movs	r1, #19
  4176a6:	4620      	mov	r0, r4
  4176a8:	4b74      	ldr	r3, [pc, #464]	; (41787c <linemeter_init+0x234>)
  4176aa:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4176ac:	4b71      	ldr	r3, [pc, #452]	; (417874 <linemeter_init+0x22c>)
  4176ae:	681c      	ldr	r4, [r3, #0]
  4176b0:	3474      	adds	r4, #116	; 0x74
  4176b2:	2000      	movs	r0, #0
  4176b4:	4b72      	ldr	r3, [pc, #456]	; (417880 <linemeter_init+0x238>)
  4176b6:	4798      	blx	r3
  4176b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4176bc:	0080      	lsls	r0, r0, #2
  4176be:	3050      	adds	r0, #80	; 0x50
  4176c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4176c4:	f280 808b 	bge.w	4177de <linemeter_init+0x196>
  4176c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4176ca:	2110      	movs	r1, #16
  4176cc:	4620      	mov	r0, r4
  4176ce:	4b6b      	ldr	r3, [pc, #428]	; (41787c <linemeter_init+0x234>)
  4176d0:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  4176d2:	4b68      	ldr	r3, [pc, #416]	; (417874 <linemeter_init+0x22c>)
  4176d4:	681c      	ldr	r4, [r3, #0]
  4176d6:	3474      	adds	r4, #116	; 0x74
  4176d8:	2000      	movs	r0, #0
  4176da:	4b69      	ldr	r3, [pc, #420]	; (417880 <linemeter_init+0x238>)
  4176dc:	4798      	blx	r3
  4176de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4176e2:	0040      	lsls	r0, r0, #1
  4176e4:	3050      	adds	r0, #80	; 0x50
  4176e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4176ea:	f280 8087 	bge.w	4177fc <linemeter_init+0x1b4>
  4176ee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4176f0:	2114      	movs	r1, #20
  4176f2:	4620      	mov	r0, r4
  4176f4:	4b61      	ldr	r3, [pc, #388]	; (41787c <linemeter_init+0x234>)
  4176f6:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  4176f8:	4b5e      	ldr	r3, [pc, #376]	; (417874 <linemeter_init+0x22c>)
  4176fa:	681c      	ldr	r4, [r3, #0]
  4176fc:	3474      	adds	r4, #116	; 0x74
  4176fe:	2000      	movs	r0, #0
  417700:	4b5f      	ldr	r3, [pc, #380]	; (417880 <linemeter_init+0x238>)
  417702:	4798      	blx	r3
  417704:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417708:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41770c:	3050      	adds	r0, #80	; 0x50
  41770e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417712:	f280 8082 	bge.w	41781a <linemeter_init+0x1d2>
  417716:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  417718:	21c0      	movs	r1, #192	; 0xc0
  41771a:	4620      	mov	r0, r4
  41771c:	4b57      	ldr	r3, [pc, #348]	; (41787c <linemeter_init+0x234>)
  41771e:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  417720:	4c54      	ldr	r4, [pc, #336]	; (417874 <linemeter_init+0x22c>)
  417722:	6820      	ldr	r0, [r4, #0]
  417724:	4e57      	ldr	r6, [pc, #348]	; (417884 <linemeter_init+0x23c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417726:	89b2      	ldrh	r2, [r6, #12]
  417728:	2199      	movs	r1, #153	; 0x99
  41772a:	3074      	adds	r0, #116	; 0x74
  41772c:	4d56      	ldr	r5, [pc, #344]	; (417888 <linemeter_init+0x240>)
  41772e:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  417730:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  417732:	89b2      	ldrh	r2, [r6, #12]
  417734:	21c9      	movs	r1, #201	; 0xc9
  417736:	3074      	adds	r0, #116	; 0x74
  417738:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41773a:	6820      	ldr	r0, [r4, #0]
  41773c:	f04f 0200 	mov.w	r2, #0
  417740:	2304      	movs	r3, #4
  417742:	f363 0202 	bfi	r2, r3, #0, #3
  417746:	2311      	movs	r3, #17
  417748:	f363 02c7 	bfi	r2, r3, #3, #5
  41774c:	f363 220c 	bfi	r2, r3, #8, #5
  417750:	2302      	movs	r3, #2
  417752:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  417756:	21ca      	movs	r1, #202	; 0xca
  417758:	3074      	adds	r0, #116	; 0x74
  41775a:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  41775c:	6824      	ldr	r4, [r4, #0]
  41775e:	3474      	adds	r4, #116	; 0x74
  417760:	2000      	movs	r0, #0
  417762:	4b47      	ldr	r3, [pc, #284]	; (417880 <linemeter_init+0x238>)
  417764:	4798      	blx	r3
  417766:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41776a:	0040      	lsls	r0, r0, #1
  41776c:	3050      	adds	r0, #80	; 0x50
  41776e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417772:	da62      	bge.n	41783a <linemeter_init+0x1f2>
  417774:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417776:	2190      	movs	r1, #144	; 0x90
  417778:	4620      	mov	r0, r4
  41777a:	4b40      	ldr	r3, [pc, #256]	; (41787c <linemeter_init+0x234>)
  41777c:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  41777e:	4b3d      	ldr	r3, [pc, #244]	; (417874 <linemeter_init+0x22c>)
  417780:	681c      	ldr	r4, [r3, #0]
  417782:	3474      	adds	r4, #116	; 0x74
  417784:	2000      	movs	r0, #0
  417786:	4b3e      	ldr	r3, [pc, #248]	; (417880 <linemeter_init+0x238>)
  417788:	4798      	blx	r3
  41778a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41778e:	3050      	adds	r0, #80	; 0x50
  417790:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417794:	da60      	bge.n	417858 <linemeter_init+0x210>
  417796:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  417798:	21c3      	movs	r1, #195	; 0xc3
  41779a:	4620      	mov	r0, r4
  41779c:	4b37      	ldr	r3, [pc, #220]	; (41787c <linemeter_init+0x234>)
  41779e:	4798      	blx	r3
  4177a0:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4177a2:	2000      	movs	r0, #0
  4177a4:	4b36      	ldr	r3, [pc, #216]	; (417880 <linemeter_init+0x238>)
  4177a6:	4798      	blx	r3
  4177a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4177ac:	0080      	lsls	r0, r0, #2
  4177ae:	3050      	adds	r0, #80	; 0x50
  4177b0:	4b36      	ldr	r3, [pc, #216]	; (41788c <linemeter_init+0x244>)
  4177b2:	fb83 2300 	smull	r2, r3, r3, r0
  4177b6:	17c2      	asrs	r2, r0, #31
  4177b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4177bc:	b212      	sxth	r2, r2
  4177be:	e75e      	b.n	41767e <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4177c0:	2000      	movs	r0, #0
  4177c2:	4b2f      	ldr	r3, [pc, #188]	; (417880 <linemeter_init+0x238>)
  4177c4:	4798      	blx	r3
  4177c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4177ca:	0080      	lsls	r0, r0, #2
  4177cc:	3050      	adds	r0, #80	; 0x50
  4177ce:	4b2f      	ldr	r3, [pc, #188]	; (41788c <linemeter_init+0x244>)
  4177d0:	fb83 2300 	smull	r2, r3, r3, r0
  4177d4:	17c2      	asrs	r2, r0, #31
  4177d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4177da:	b212      	sxth	r2, r2
  4177dc:	e762      	b.n	4176a4 <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4177de:	2000      	movs	r0, #0
  4177e0:	4b27      	ldr	r3, [pc, #156]	; (417880 <linemeter_init+0x238>)
  4177e2:	4798      	blx	r3
  4177e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4177e8:	0080      	lsls	r0, r0, #2
  4177ea:	3050      	adds	r0, #80	; 0x50
  4177ec:	4b27      	ldr	r3, [pc, #156]	; (41788c <linemeter_init+0x244>)
  4177ee:	fb83 2300 	smull	r2, r3, r3, r0
  4177f2:	17c2      	asrs	r2, r0, #31
  4177f4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4177f8:	b212      	sxth	r2, r2
  4177fa:	e766      	b.n	4176ca <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  4177fc:	2000      	movs	r0, #0
  4177fe:	4b20      	ldr	r3, [pc, #128]	; (417880 <linemeter_init+0x238>)
  417800:	4798      	blx	r3
  417802:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  417806:	0040      	lsls	r0, r0, #1
  417808:	3050      	adds	r0, #80	; 0x50
  41780a:	4b20      	ldr	r3, [pc, #128]	; (41788c <linemeter_init+0x244>)
  41780c:	fb83 2300 	smull	r2, r3, r3, r0
  417810:	17c2      	asrs	r2, r0, #31
  417812:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417816:	b212      	sxth	r2, r2
  417818:	e76a      	b.n	4176f0 <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  41781a:	2000      	movs	r0, #0
  41781c:	4b18      	ldr	r3, [pc, #96]	; (417880 <linemeter_init+0x238>)
  41781e:	4798      	blx	r3
  417820:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417824:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417828:	3050      	adds	r0, #80	; 0x50
  41782a:	4b18      	ldr	r3, [pc, #96]	; (41788c <linemeter_init+0x244>)
  41782c:	fb83 2300 	smull	r2, r3, r3, r0
  417830:	17c2      	asrs	r2, r0, #31
  417832:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417836:	b212      	sxth	r2, r2
  417838:	e76e      	b.n	417718 <linemeter_init+0xd0>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  41783a:	2000      	movs	r0, #0
  41783c:	4b10      	ldr	r3, [pc, #64]	; (417880 <linemeter_init+0x238>)
  41783e:	4798      	blx	r3
  417840:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417844:	0040      	lsls	r0, r0, #1
  417846:	3050      	adds	r0, #80	; 0x50
  417848:	4b10      	ldr	r3, [pc, #64]	; (41788c <linemeter_init+0x244>)
  41784a:	fb83 2300 	smull	r2, r3, r3, r0
  41784e:	17c2      	asrs	r2, r0, #31
  417850:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417854:	b212      	sxth	r2, r2
  417856:	e78e      	b.n	417776 <linemeter_init+0x12e>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  417858:	2000      	movs	r0, #0
  41785a:	4b09      	ldr	r3, [pc, #36]	; (417880 <linemeter_init+0x238>)
  41785c:	4798      	blx	r3
  41785e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417862:	3050      	adds	r0, #80	; 0x50
  417864:	4b09      	ldr	r3, [pc, #36]	; (41788c <linemeter_init+0x244>)
  417866:	fb83 2300 	smull	r2, r3, r3, r0
  41786a:	17c2      	asrs	r2, r0, #31
  41786c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417870:	b212      	sxth	r2, r2
  417872:	e791      	b.n	417798 <linemeter_init+0x150>
  417874:	20414798 	.word	0x20414798
  417878:	0041704d 	.word	0x0041704d
  41787c:	004095c1 	.word	0x004095c1
  417880:	00413f95 	.word	0x00413f95
  417884:	2041479c 	.word	0x2041479c
  417888:	00409751 	.word	0x00409751
  41788c:	66666667 	.word	0x66666667

00417890 <gauge_init>:
{
  417890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->gauge_main);
  417894:	4cc0      	ldr	r4, [pc, #768]	; (417b98 <gauge_init+0x308>)
  417896:	6820      	ldr	r0, [r4, #0]
  417898:	3060      	adds	r0, #96	; 0x60
  41789a:	4bc0      	ldr	r3, [pc, #768]	; (417b9c <gauge_init+0x30c>)
  41789c:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41789e:	6820      	ldr	r0, [r4, #0]
  4178a0:	f04f 0804 	mov.w	r8, #4
  4178a4:	f04f 0200 	mov.w	r2, #0
  4178a8:	f368 0202 	bfi	r2, r8, #0, #3
  4178ac:	2511      	movs	r5, #17
  4178ae:	f365 02c7 	bfi	r2, r5, #3, #5
  4178b2:	f365 220c 	bfi	r2, r5, #8, #5
  4178b6:	2702      	movs	r7, #2
  4178b8:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4178bc:	2199      	movs	r1, #153	; 0x99
  4178be:	3060      	adds	r0, #96	; 0x60
  4178c0:	4eb7      	ldr	r6, [pc, #732]	; (417ba0 <gauge_init+0x310>)
  4178c2:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  4178c4:	6820      	ldr	r0, [r4, #0]
  4178c6:	f04f 0200 	mov.w	r2, #0
  4178ca:	f368 0202 	bfi	r2, r8, #0, #3
  4178ce:	f365 02c7 	bfi	r2, r5, #3, #5
  4178d2:	f365 220c 	bfi	r2, r5, #8, #5
  4178d6:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  4178da:	21c9      	movs	r1, #201	; 0xc9
  4178dc:	3060      	adds	r0, #96	; 0x60
  4178de:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
  4178e0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  4178e2:	4bb0      	ldr	r3, [pc, #704]	; (417ba4 <gauge_init+0x314>)
  4178e4:	899a      	ldrh	r2, [r3, #12]
  4178e6:	21ca      	movs	r1, #202	; 0xca
  4178e8:	3060      	adds	r0, #96	; 0x60
  4178ea:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  4178ec:	6824      	ldr	r4, [r4, #0]
  4178ee:	3460      	adds	r4, #96	; 0x60
  4178f0:	2000      	movs	r0, #0
  4178f2:	4bad      	ldr	r3, [pc, #692]	; (417ba8 <gauge_init+0x318>)
  4178f4:	4798      	blx	r3
  4178f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4178fa:	3050      	adds	r0, #80	; 0x50
  4178fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417900:	f280 8177 	bge.w	417bf2 <gauge_init+0x362>
  417904:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417906:	2190      	movs	r1, #144	; 0x90
  417908:	4620      	mov	r0, r4
  41790a:	4ba8      	ldr	r3, [pc, #672]	; (417bac <gauge_init+0x31c>)
  41790c:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  41790e:	4ba2      	ldr	r3, [pc, #648]	; (417b98 <gauge_init+0x308>)
  417910:	681c      	ldr	r4, [r3, #0]
  417912:	3460      	adds	r4, #96	; 0x60
  417914:	2000      	movs	r0, #0
  417916:	4ba4      	ldr	r3, [pc, #656]	; (417ba8 <gauge_init+0x318>)
  417918:	4798      	blx	r3
  41791a:	3014      	adds	r0, #20
  41791c:	0080      	lsls	r0, r0, #2
  41791e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417922:	f280 8174 	bge.w	417c0e <gauge_init+0x37e>
  417926:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  417928:	21c3      	movs	r1, #195	; 0xc3
  41792a:	4620      	mov	r0, r4
  41792c:	4b9f      	ldr	r3, [pc, #636]	; (417bac <gauge_init+0x31c>)
  41792e:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  417930:	4b99      	ldr	r3, [pc, #612]	; (417b98 <gauge_init+0x308>)
  417932:	681c      	ldr	r4, [r3, #0]
  417934:	3460      	adds	r4, #96	; 0x60
  417936:	2000      	movs	r0, #0
  417938:	4b9b      	ldr	r3, [pc, #620]	; (417ba8 <gauge_init+0x318>)
  41793a:	4798      	blx	r3
  41793c:	300a      	adds	r0, #10
  41793e:	00c0      	lsls	r0, r0, #3
  417940:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417944:	f280 8170 	bge.w	417c28 <gauge_init+0x398>
  417948:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  41794a:	21c2      	movs	r1, #194	; 0xc2
  41794c:	4620      	mov	r0, r4
  41794e:	4b97      	ldr	r3, [pc, #604]	; (417bac <gauge_init+0x31c>)
  417950:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417952:	4b91      	ldr	r3, [pc, #580]	; (417b98 <gauge_init+0x308>)
  417954:	681c      	ldr	r4, [r3, #0]
  417956:	3460      	adds	r4, #96	; 0x60
  417958:	2000      	movs	r0, #0
  41795a:	4b93      	ldr	r3, [pc, #588]	; (417ba8 <gauge_init+0x318>)
  41795c:	4798      	blx	r3
  41795e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417962:	0080      	lsls	r0, r0, #2
  417964:	3050      	adds	r0, #80	; 0x50
  417966:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41796a:	f280 816a 	bge.w	417c42 <gauge_init+0x3b2>
  41796e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417970:	2112      	movs	r1, #18
  417972:	4620      	mov	r0, r4
  417974:	4b8d      	ldr	r3, [pc, #564]	; (417bac <gauge_init+0x31c>)
  417976:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417978:	4b87      	ldr	r3, [pc, #540]	; (417b98 <gauge_init+0x308>)
  41797a:	681c      	ldr	r4, [r3, #0]
  41797c:	3460      	adds	r4, #96	; 0x60
  41797e:	2000      	movs	r0, #0
  417980:	4b89      	ldr	r3, [pc, #548]	; (417ba8 <gauge_init+0x318>)
  417982:	4798      	blx	r3
  417984:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417988:	0080      	lsls	r0, r0, #2
  41798a:	3050      	adds	r0, #80	; 0x50
  41798c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417990:	f280 8166 	bge.w	417c60 <gauge_init+0x3d0>
  417994:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417996:	2113      	movs	r1, #19
  417998:	4620      	mov	r0, r4
  41799a:	4b84      	ldr	r3, [pc, #528]	; (417bac <gauge_init+0x31c>)
  41799c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41799e:	4b7e      	ldr	r3, [pc, #504]	; (417b98 <gauge_init+0x308>)
  4179a0:	681c      	ldr	r4, [r3, #0]
  4179a2:	3460      	adds	r4, #96	; 0x60
  4179a4:	2000      	movs	r0, #0
  4179a6:	4b80      	ldr	r3, [pc, #512]	; (417ba8 <gauge_init+0x318>)
  4179a8:	4798      	blx	r3
  4179aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4179ae:	0080      	lsls	r0, r0, #2
  4179b0:	3050      	adds	r0, #80	; 0x50
  4179b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4179b6:	f280 8162 	bge.w	417c7e <gauge_init+0x3ee>
  4179ba:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4179bc:	2110      	movs	r1, #16
  4179be:	4620      	mov	r0, r4
  4179c0:	4b7a      	ldr	r3, [pc, #488]	; (417bac <gauge_init+0x31c>)
  4179c2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4179c4:	4b74      	ldr	r3, [pc, #464]	; (417b98 <gauge_init+0x308>)
  4179c6:	681c      	ldr	r4, [r3, #0]
  4179c8:	3460      	adds	r4, #96	; 0x60
  4179ca:	2000      	movs	r0, #0
  4179cc:	4b76      	ldr	r3, [pc, #472]	; (417ba8 <gauge_init+0x318>)
  4179ce:	4798      	blx	r3
  4179d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4179d4:	0080      	lsls	r0, r0, #2
  4179d6:	3050      	adds	r0, #80	; 0x50
  4179d8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4179dc:	f280 815e 	bge.w	417c9c <gauge_init+0x40c>
  4179e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4179e2:	2114      	movs	r1, #20
  4179e4:	4620      	mov	r0, r4
  4179e6:	4b71      	ldr	r3, [pc, #452]	; (417bac <gauge_init+0x31c>)
  4179e8:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  4179ea:	4b6b      	ldr	r3, [pc, #428]	; (417b98 <gauge_init+0x308>)
  4179ec:	681c      	ldr	r4, [r3, #0]
  4179ee:	3460      	adds	r4, #96	; 0x60
  4179f0:	2000      	movs	r0, #0
  4179f2:	4b6d      	ldr	r3, [pc, #436]	; (417ba8 <gauge_init+0x318>)
  4179f4:	4798      	blx	r3
  4179f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4179fa:	3050      	adds	r0, #80	; 0x50
  4179fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417a00:	f280 815b 	bge.w	417cba <gauge_init+0x42a>
  417a04:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  417a06:	21c0      	movs	r1, #192	; 0xc0
  417a08:	4620      	mov	r0, r4
  417a0a:	4d68      	ldr	r5, [pc, #416]	; (417bac <gauge_init+0x31c>)
  417a0c:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417a0e:	4c62      	ldr	r4, [pc, #392]	; (417b98 <gauge_init+0x308>)
  417a10:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417a12:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417a16:	2101      	movs	r1, #1
  417a18:	3060      	adds	r0, #96	; 0x60
  417a1a:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
  417a1c:	6820      	ldr	r0, [r4, #0]
  417a1e:	3064      	adds	r0, #100	; 0x64
  417a20:	4b5e      	ldr	r3, [pc, #376]	; (417b9c <gauge_init+0x30c>)
  417a22:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  417a24:	6820      	ldr	r0, [r4, #0]
  417a26:	f04f 0804 	mov.w	r8, #4
  417a2a:	f04f 0200 	mov.w	r2, #0
  417a2e:	f368 0202 	bfi	r2, r8, #0, #3
  417a32:	2511      	movs	r5, #17
  417a34:	f365 02c7 	bfi	r2, r5, #3, #5
  417a38:	f365 220c 	bfi	r2, r5, #8, #5
  417a3c:	2702      	movs	r7, #2
  417a3e:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417a42:	2199      	movs	r1, #153	; 0x99
  417a44:	3064      	adds	r0, #100	; 0x64
  417a46:	4e56      	ldr	r6, [pc, #344]	; (417ba0 <gauge_init+0x310>)
  417a48:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  417a4a:	6820      	ldr	r0, [r4, #0]
  417a4c:	f04f 0200 	mov.w	r2, #0
  417a50:	f368 0202 	bfi	r2, r8, #0, #3
  417a54:	f365 02c7 	bfi	r2, r5, #3, #5
  417a58:	f365 220c 	bfi	r2, r5, #8, #5
  417a5c:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  417a60:	21c9      	movs	r1, #201	; 0xc9
  417a62:	3064      	adds	r0, #100	; 0x64
  417a64:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
  417a66:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  417a68:	4b4e      	ldr	r3, [pc, #312]	; (417ba4 <gauge_init+0x314>)
  417a6a:	899a      	ldrh	r2, [r3, #12]
  417a6c:	21ca      	movs	r1, #202	; 0xca
  417a6e:	3064      	adds	r0, #100	; 0x64
  417a70:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  417a72:	6824      	ldr	r4, [r4, #0]
  417a74:	3464      	adds	r4, #100	; 0x64
  417a76:	2000      	movs	r0, #0
  417a78:	4b4b      	ldr	r3, [pc, #300]	; (417ba8 <gauge_init+0x318>)
  417a7a:	4798      	blx	r3
  417a7c:	300a      	adds	r0, #10
  417a7e:	00c0      	lsls	r0, r0, #3
  417a80:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417a84:	f280 8127 	bge.w	417cd6 <gauge_init+0x446>
  417a88:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417a8a:	2190      	movs	r1, #144	; 0x90
  417a8c:	4620      	mov	r0, r4
  417a8e:	4b47      	ldr	r3, [pc, #284]	; (417bac <gauge_init+0x31c>)
  417a90:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  417a92:	4b41      	ldr	r3, [pc, #260]	; (417b98 <gauge_init+0x308>)
  417a94:	681c      	ldr	r4, [r3, #0]
  417a96:	3464      	adds	r4, #100	; 0x64
  417a98:	2000      	movs	r0, #0
  417a9a:	4b43      	ldr	r3, [pc, #268]	; (417ba8 <gauge_init+0x318>)
  417a9c:	4798      	blx	r3
  417a9e:	300a      	adds	r0, #10
  417aa0:	00c0      	lsls	r0, r0, #3
  417aa2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417aa6:	f280 8123 	bge.w	417cf0 <gauge_init+0x460>
  417aaa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  417aac:	21c3      	movs	r1, #195	; 0xc3
  417aae:	4620      	mov	r0, r4
  417ab0:	4b3e      	ldr	r3, [pc, #248]	; (417bac <gauge_init+0x31c>)
  417ab2:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  417ab4:	4b38      	ldr	r3, [pc, #224]	; (417b98 <gauge_init+0x308>)
  417ab6:	681c      	ldr	r4, [r3, #0]
  417ab8:	3464      	adds	r4, #100	; 0x64
  417aba:	2000      	movs	r0, #0
  417abc:	4b3a      	ldr	r3, [pc, #232]	; (417ba8 <gauge_init+0x318>)
  417abe:	4798      	blx	r3
  417ac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ac4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ac8:	3050      	adds	r0, #80	; 0x50
  417aca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417ace:	f280 811c 	bge.w	417d0a <gauge_init+0x47a>
  417ad2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  417ad4:	21c0      	movs	r1, #192	; 0xc0
  417ad6:	4620      	mov	r0, r4
  417ad8:	4b34      	ldr	r3, [pc, #208]	; (417bac <gauge_init+0x31c>)
  417ada:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
  417adc:	4c2e      	ldr	r4, [pc, #184]	; (417b98 <gauge_init+0x308>)
  417ade:	6820      	ldr	r0, [r4, #0]
  417ae0:	3068      	adds	r0, #104	; 0x68
  417ae2:	4b2e      	ldr	r3, [pc, #184]	; (417b9c <gauge_init+0x30c>)
  417ae4:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  417ae6:	6820      	ldr	r0, [r4, #0]
  417ae8:	3068      	adds	r0, #104	; 0x68
  417aea:	4b2e      	ldr	r3, [pc, #184]	; (417ba4 <gauge_init+0x314>)
  417aec:	6a1b      	ldr	r3, [r3, #32]
  417aee:	f013 0f02 	tst.w	r3, #2
  417af2:	f000 811a 	beq.w	417d2a <gauge_init+0x49a>
  417af6:	2302      	movs	r3, #2
  417af8:	f04f 0200 	mov.w	r2, #0
  417afc:	f363 0202 	bfi	r2, r3, #0, #3
  417b00:	2108      	movs	r1, #8
  417b02:	f361 02c7 	bfi	r2, r1, #3, #5
  417b06:	210b      	movs	r1, #11
  417b08:	f361 220c 	bfi	r2, r1, #8, #5
  417b0c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417b10:	2199      	movs	r1, #153	; 0x99
  417b12:	4b23      	ldr	r3, [pc, #140]	; (417ba0 <gauge_init+0x310>)
  417b14:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  417b16:	4b20      	ldr	r3, [pc, #128]	; (417b98 <gauge_init+0x308>)
  417b18:	681c      	ldr	r4, [r3, #0]
  417b1a:	3468      	adds	r4, #104	; 0x68
  417b1c:	2000      	movs	r0, #0
  417b1e:	4b22      	ldr	r3, [pc, #136]	; (417ba8 <gauge_init+0x318>)
  417b20:	4798      	blx	r3
  417b22:	300a      	adds	r0, #10
  417b24:	00c0      	lsls	r0, r0, #3
  417b26:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417b2a:	f280 8101 	bge.w	417d30 <gauge_init+0x4a0>
  417b2e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417b30:	2190      	movs	r1, #144	; 0x90
  417b32:	4620      	mov	r0, r4
  417b34:	4b1d      	ldr	r3, [pc, #116]	; (417bac <gauge_init+0x31c>)
  417b36:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
  417b38:	4c17      	ldr	r4, [pc, #92]	; (417b98 <gauge_init+0x308>)
  417b3a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417b3c:	22ff      	movs	r2, #255	; 0xff
  417b3e:	212c      	movs	r1, #44	; 0x2c
  417b40:	3068      	adds	r0, #104	; 0x68
  417b42:	4b1b      	ldr	r3, [pc, #108]	; (417bb0 <gauge_init+0x320>)
  417b44:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  417b46:	6820      	ldr	r0, [r4, #0]
  417b48:	3068      	adds	r0, #104	; 0x68
  417b4a:	4b16      	ldr	r3, [pc, #88]	; (417ba4 <gauge_init+0x314>)
  417b4c:	6a1b      	ldr	r3, [r3, #32]
  417b4e:	f013 0f02 	tst.w	r3, #2
  417b52:	f000 80fa 	beq.w	417d4a <gauge_init+0x4ba>
  417b56:	2302      	movs	r3, #2
  417b58:	f04f 0200 	mov.w	r2, #0
  417b5c:	f363 0202 	bfi	r2, r3, #0, #3
  417b60:	2108      	movs	r1, #8
  417b62:	f361 02c7 	bfi	r2, r1, #3, #5
  417b66:	210b      	movs	r1, #11
  417b68:	f361 220c 	bfi	r2, r1, #8, #5
  417b6c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417b70:	2129      	movs	r1, #41	; 0x29
  417b72:	4b0b      	ldr	r3, [pc, #44]	; (417ba0 <gauge_init+0x310>)
  417b74:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417b76:	4c08      	ldr	r4, [pc, #32]	; (417b98 <gauge_init+0x308>)
  417b78:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417b7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417b7e:	2101      	movs	r1, #1
  417b80:	3068      	adds	r0, #104	; 0x68
  417b82:	4b0a      	ldr	r3, [pc, #40]	; (417bac <gauge_init+0x31c>)
  417b84:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  417b86:	6824      	ldr	r4, [r4, #0]
  417b88:	3468      	adds	r4, #104	; 0x68
  417b8a:	2000      	movs	r0, #0
  417b8c:	4b06      	ldr	r3, [pc, #24]	; (417ba8 <gauge_init+0x318>)
  417b8e:	4798      	blx	r3
  417b90:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  417b94:	0040      	lsls	r0, r0, #1
  417b96:	e00d      	b.n	417bb4 <gauge_init+0x324>
  417b98:	20414798 	.word	0x20414798
  417b9c:	0041704d 	.word	0x0041704d
  417ba0:	00409751 	.word	0x00409751
  417ba4:	2041479c 	.word	0x2041479c
  417ba8:	00413f95 	.word	0x00413f95
  417bac:	004095c1 	.word	0x004095c1
  417bb0:	004098e1 	.word	0x004098e1
  417bb4:	3050      	adds	r0, #80	; 0x50
  417bb6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417bba:	f280 80c9 	bge.w	417d50 <gauge_init+0x4c0>
  417bbe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  417bc0:	2103      	movs	r1, #3
  417bc2:	4620      	mov	r0, r4
  417bc4:	4b71      	ldr	r3, [pc, #452]	; (417d8c <gauge_init+0x4fc>)
  417bc6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  417bc8:	4b71      	ldr	r3, [pc, #452]	; (417d90 <gauge_init+0x500>)
  417bca:	681c      	ldr	r4, [r3, #0]
  417bcc:	3468      	adds	r4, #104	; 0x68
  417bce:	2000      	movs	r0, #0
  417bd0:	4b70      	ldr	r3, [pc, #448]	; (417d94 <gauge_init+0x504>)
  417bd2:	4798      	blx	r3
  417bd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417bd8:	0040      	lsls	r0, r0, #1
  417bda:	3050      	adds	r0, #80	; 0x50
  417bdc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417be0:	f280 80c5 	bge.w	417d6e <gauge_init+0x4de>
  417be4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  417be6:	2114      	movs	r1, #20
  417be8:	4620      	mov	r0, r4
  417bea:	4b68      	ldr	r3, [pc, #416]	; (417d8c <gauge_init+0x4fc>)
  417bec:	4798      	blx	r3
  417bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  417bf2:	2000      	movs	r0, #0
  417bf4:	4b67      	ldr	r3, [pc, #412]	; (417d94 <gauge_init+0x504>)
  417bf6:	4798      	blx	r3
  417bf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417bfc:	3050      	adds	r0, #80	; 0x50
  417bfe:	4b66      	ldr	r3, [pc, #408]	; (417d98 <gauge_init+0x508>)
  417c00:	fb83 2300 	smull	r2, r3, r3, r0
  417c04:	17c2      	asrs	r2, r0, #31
  417c06:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c0a:	b212      	sxth	r2, r2
  417c0c:	e67b      	b.n	417906 <gauge_init+0x76>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  417c0e:	2000      	movs	r0, #0
  417c10:	4b60      	ldr	r3, [pc, #384]	; (417d94 <gauge_init+0x504>)
  417c12:	4798      	blx	r3
  417c14:	3014      	adds	r0, #20
  417c16:	0080      	lsls	r0, r0, #2
  417c18:	4b5f      	ldr	r3, [pc, #380]	; (417d98 <gauge_init+0x508>)
  417c1a:	fb83 2300 	smull	r2, r3, r3, r0
  417c1e:	17c2      	asrs	r2, r0, #31
  417c20:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c24:	b212      	sxth	r2, r2
  417c26:	e67f      	b.n	417928 <gauge_init+0x98>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  417c28:	2000      	movs	r0, #0
  417c2a:	4b5a      	ldr	r3, [pc, #360]	; (417d94 <gauge_init+0x504>)
  417c2c:	4798      	blx	r3
  417c2e:	300a      	adds	r0, #10
  417c30:	00c0      	lsls	r0, r0, #3
  417c32:	4b59      	ldr	r3, [pc, #356]	; (417d98 <gauge_init+0x508>)
  417c34:	fb83 2300 	smull	r2, r3, r3, r0
  417c38:	17c2      	asrs	r2, r0, #31
  417c3a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c3e:	b212      	sxth	r2, r2
  417c40:	e683      	b.n	41794a <gauge_init+0xba>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417c42:	2000      	movs	r0, #0
  417c44:	4b53      	ldr	r3, [pc, #332]	; (417d94 <gauge_init+0x504>)
  417c46:	4798      	blx	r3
  417c48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417c4c:	0080      	lsls	r0, r0, #2
  417c4e:	3050      	adds	r0, #80	; 0x50
  417c50:	4b51      	ldr	r3, [pc, #324]	; (417d98 <gauge_init+0x508>)
  417c52:	fb83 2300 	smull	r2, r3, r3, r0
  417c56:	17c2      	asrs	r2, r0, #31
  417c58:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c5c:	b212      	sxth	r2, r2
  417c5e:	e687      	b.n	417970 <gauge_init+0xe0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417c60:	2000      	movs	r0, #0
  417c62:	4b4c      	ldr	r3, [pc, #304]	; (417d94 <gauge_init+0x504>)
  417c64:	4798      	blx	r3
  417c66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417c6a:	0080      	lsls	r0, r0, #2
  417c6c:	3050      	adds	r0, #80	; 0x50
  417c6e:	4b4a      	ldr	r3, [pc, #296]	; (417d98 <gauge_init+0x508>)
  417c70:	fb83 2300 	smull	r2, r3, r3, r0
  417c74:	17c2      	asrs	r2, r0, #31
  417c76:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c7a:	b212      	sxth	r2, r2
  417c7c:	e68b      	b.n	417996 <gauge_init+0x106>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417c7e:	2000      	movs	r0, #0
  417c80:	4b44      	ldr	r3, [pc, #272]	; (417d94 <gauge_init+0x504>)
  417c82:	4798      	blx	r3
  417c84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417c88:	0080      	lsls	r0, r0, #2
  417c8a:	3050      	adds	r0, #80	; 0x50
  417c8c:	4b42      	ldr	r3, [pc, #264]	; (417d98 <gauge_init+0x508>)
  417c8e:	fb83 2300 	smull	r2, r3, r3, r0
  417c92:	17c2      	asrs	r2, r0, #31
  417c94:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c98:	b212      	sxth	r2, r2
  417c9a:	e68f      	b.n	4179bc <gauge_init+0x12c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417c9c:	2000      	movs	r0, #0
  417c9e:	4b3d      	ldr	r3, [pc, #244]	; (417d94 <gauge_init+0x504>)
  417ca0:	4798      	blx	r3
  417ca2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ca6:	0080      	lsls	r0, r0, #2
  417ca8:	3050      	adds	r0, #80	; 0x50
  417caa:	4b3b      	ldr	r3, [pc, #236]	; (417d98 <gauge_init+0x508>)
  417cac:	fb83 2300 	smull	r2, r3, r3, r0
  417cb0:	17c2      	asrs	r2, r0, #31
  417cb2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417cb6:	b212      	sxth	r2, r2
  417cb8:	e693      	b.n	4179e2 <gauge_init+0x152>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  417cba:	2000      	movs	r0, #0
  417cbc:	4b35      	ldr	r3, [pc, #212]	; (417d94 <gauge_init+0x504>)
  417cbe:	4798      	blx	r3
  417cc0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  417cc4:	3050      	adds	r0, #80	; 0x50
  417cc6:	4b34      	ldr	r3, [pc, #208]	; (417d98 <gauge_init+0x508>)
  417cc8:	fb83 2300 	smull	r2, r3, r3, r0
  417ccc:	17c2      	asrs	r2, r0, #31
  417cce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417cd2:	b212      	sxth	r2, r2
  417cd4:	e697      	b.n	417a06 <gauge_init+0x176>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  417cd6:	2000      	movs	r0, #0
  417cd8:	4b2e      	ldr	r3, [pc, #184]	; (417d94 <gauge_init+0x504>)
  417cda:	4798      	blx	r3
  417cdc:	300a      	adds	r0, #10
  417cde:	00c0      	lsls	r0, r0, #3
  417ce0:	4b2d      	ldr	r3, [pc, #180]	; (417d98 <gauge_init+0x508>)
  417ce2:	fb83 2300 	smull	r2, r3, r3, r0
  417ce6:	17c2      	asrs	r2, r0, #31
  417ce8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417cec:	b212      	sxth	r2, r2
  417cee:	e6cc      	b.n	417a8a <gauge_init+0x1fa>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  417cf0:	2000      	movs	r0, #0
  417cf2:	4b28      	ldr	r3, [pc, #160]	; (417d94 <gauge_init+0x504>)
  417cf4:	4798      	blx	r3
  417cf6:	300a      	adds	r0, #10
  417cf8:	00c0      	lsls	r0, r0, #3
  417cfa:	4b27      	ldr	r3, [pc, #156]	; (417d98 <gauge_init+0x508>)
  417cfc:	fb83 2300 	smull	r2, r3, r3, r0
  417d00:	17c2      	asrs	r2, r0, #31
  417d02:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417d06:	b212      	sxth	r2, r2
  417d08:	e6d0      	b.n	417aac <gauge_init+0x21c>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  417d0a:	2000      	movs	r0, #0
  417d0c:	4b21      	ldr	r3, [pc, #132]	; (417d94 <gauge_init+0x504>)
  417d0e:	4798      	blx	r3
  417d10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417d14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417d18:	3050      	adds	r0, #80	; 0x50
  417d1a:	4b1f      	ldr	r3, [pc, #124]	; (417d98 <gauge_init+0x508>)
  417d1c:	fb83 2300 	smull	r2, r3, r3, r0
  417d20:	17c2      	asrs	r2, r0, #31
  417d22:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417d26:	b212      	sxth	r2, r2
  417d28:	e6d4      	b.n	417ad4 <gauge_init+0x244>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  417d2a:	4b1c      	ldr	r3, [pc, #112]	; (417d9c <gauge_init+0x50c>)
  417d2c:	881a      	ldrh	r2, [r3, #0]
  417d2e:	e6ef      	b.n	417b10 <gauge_init+0x280>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  417d30:	2000      	movs	r0, #0
  417d32:	4b18      	ldr	r3, [pc, #96]	; (417d94 <gauge_init+0x504>)
  417d34:	4798      	blx	r3
  417d36:	300a      	adds	r0, #10
  417d38:	00c0      	lsls	r0, r0, #3
  417d3a:	4b17      	ldr	r3, [pc, #92]	; (417d98 <gauge_init+0x508>)
  417d3c:	fb83 2300 	smull	r2, r3, r3, r0
  417d40:	17c2      	asrs	r2, r0, #31
  417d42:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417d46:	b212      	sxth	r2, r2
  417d48:	e6f2      	b.n	417b30 <gauge_init+0x2a0>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  417d4a:	4b14      	ldr	r3, [pc, #80]	; (417d9c <gauge_init+0x50c>)
  417d4c:	881a      	ldrh	r2, [r3, #0]
  417d4e:	e70f      	b.n	417b70 <gauge_init+0x2e0>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  417d50:	2000      	movs	r0, #0
  417d52:	4b10      	ldr	r3, [pc, #64]	; (417d94 <gauge_init+0x504>)
  417d54:	4798      	blx	r3
  417d56:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  417d5a:	0040      	lsls	r0, r0, #1
  417d5c:	3050      	adds	r0, #80	; 0x50
  417d5e:	4b0e      	ldr	r3, [pc, #56]	; (417d98 <gauge_init+0x508>)
  417d60:	fb83 2300 	smull	r2, r3, r3, r0
  417d64:	17c2      	asrs	r2, r0, #31
  417d66:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417d6a:	b212      	sxth	r2, r2
  417d6c:	e728      	b.n	417bc0 <gauge_init+0x330>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  417d6e:	2000      	movs	r0, #0
  417d70:	4b08      	ldr	r3, [pc, #32]	; (417d94 <gauge_init+0x504>)
  417d72:	4798      	blx	r3
  417d74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417d78:	0040      	lsls	r0, r0, #1
  417d7a:	3050      	adds	r0, #80	; 0x50
  417d7c:	4b06      	ldr	r3, [pc, #24]	; (417d98 <gauge_init+0x508>)
  417d7e:	fb83 2300 	smull	r2, r3, r3, r0
  417d82:	17c2      	asrs	r2, r0, #31
  417d84:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417d88:	b212      	sxth	r2, r2
  417d8a:	e72c      	b.n	417be6 <gauge_init+0x356>
  417d8c:	004095c1 	.word	0x004095c1
  417d90:	20414798 	.word	0x20414798
  417d94:	00413f95 	.word	0x00413f95
  417d98:	66666667 	.word	0x66666667
  417d9c:	0042497c 	.word	0x0042497c

00417da0 <arc_init>:
{
  417da0:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
  417da2:	4c53      	ldr	r4, [pc, #332]	; (417ef0 <arc_init+0x150>)
  417da4:	6820      	ldr	r0, [r4, #0]
  417da6:	301c      	adds	r0, #28
  417da8:	4b52      	ldr	r3, [pc, #328]	; (417ef4 <arc_init+0x154>)
  417daa:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
  417dac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417dae:	4b52      	ldr	r3, [pc, #328]	; (417ef8 <arc_init+0x158>)
  417db0:	899a      	ldrh	r2, [r3, #12]
  417db2:	2199      	movs	r1, #153	; 0x99
  417db4:	301c      	adds	r0, #28
  417db6:	4b51      	ldr	r3, [pc, #324]	; (417efc <arc_init+0x15c>)
  417db8:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  417dba:	6824      	ldr	r4, [r4, #0]
  417dbc:	341c      	adds	r4, #28
  417dbe:	2000      	movs	r0, #0
  417dc0:	4b4f      	ldr	r3, [pc, #316]	; (417f00 <arc_init+0x160>)
  417dc2:	4798      	blx	r3
  417dc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417dc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417dcc:	3050      	adds	r0, #80	; 0x50
  417dce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417dd2:	da5e      	bge.n	417e92 <arc_init+0xf2>
  417dd4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417dd6:	2190      	movs	r1, #144	; 0x90
  417dd8:	4620      	mov	r0, r4
  417dda:	4d4a      	ldr	r5, [pc, #296]	; (417f04 <arc_init+0x164>)
  417ddc:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
  417dde:	4c44      	ldr	r4, [pc, #272]	; (417ef0 <arc_init+0x150>)
  417de0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  417de2:	2201      	movs	r2, #1
  417de4:	2194      	movs	r1, #148	; 0x94
  417de6:	301c      	adds	r0, #28
  417de8:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
  417dea:	6820      	ldr	r0, [r4, #0]
  417dec:	3020      	adds	r0, #32
  417dee:	4b41      	ldr	r3, [pc, #260]	; (417ef4 <arc_init+0x154>)
  417df0:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  417df2:	6820      	ldr	r0, [r4, #0]
  417df4:	3020      	adds	r0, #32
  417df6:	4b40      	ldr	r3, [pc, #256]	; (417ef8 <arc_init+0x158>)
  417df8:	6a1b      	ldr	r3, [r3, #32]
  417dfa:	f013 0f02 	tst.w	r3, #2
  417dfe:	d058      	beq.n	417eb2 <arc_init+0x112>
  417e00:	f04f 0200 	mov.w	r2, #0
  417e04:	2306      	movs	r3, #6
  417e06:	f363 0202 	bfi	r2, r3, #0, #3
  417e0a:	231a      	movs	r3, #26
  417e0c:	f363 02c7 	bfi	r2, r3, #3, #5
  417e10:	231b      	movs	r3, #27
  417e12:	f363 220c 	bfi	r2, r3, #8, #5
  417e16:	2305      	movs	r3, #5
  417e18:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417e1c:	2199      	movs	r1, #153	; 0x99
  417e1e:	4b37      	ldr	r3, [pc, #220]	; (417efc <arc_init+0x15c>)
  417e20:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  417e22:	4b33      	ldr	r3, [pc, #204]	; (417ef0 <arc_init+0x150>)
  417e24:	681c      	ldr	r4, [r3, #0]
  417e26:	3420      	adds	r4, #32
  417e28:	2000      	movs	r0, #0
  417e2a:	4b35      	ldr	r3, [pc, #212]	; (417f00 <arc_init+0x160>)
  417e2c:	4798      	blx	r3
  417e2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417e32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417e36:	3050      	adds	r0, #80	; 0x50
  417e38:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417e3c:	da47      	bge.n	417ece <arc_init+0x12e>
  417e3e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417e40:	2190      	movs	r1, #144	; 0x90
  417e42:	4620      	mov	r0, r4
  417e44:	4c2f      	ldr	r4, [pc, #188]	; (417f04 <arc_init+0x164>)
  417e46:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
  417e48:	4d29      	ldr	r5, [pc, #164]	; (417ef0 <arc_init+0x150>)
  417e4a:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  417e4c:	2201      	movs	r2, #1
  417e4e:	2194      	movs	r1, #148	; 0x94
  417e50:	3020      	adds	r0, #32
  417e52:	47a0      	blx	r4
    style_init_reset(&styles->arc_knob);
  417e54:	6828      	ldr	r0, [r5, #0]
  417e56:	3024      	adds	r0, #36	; 0x24
  417e58:	4b26      	ldr	r3, [pc, #152]	; (417ef4 <arc_init+0x154>)
  417e5a:	4798      	blx	r3
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
  417e5c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417e5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417e62:	2101      	movs	r1, #1
  417e64:	3024      	adds	r0, #36	; 0x24
  417e66:	47a0      	blx	r4
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  417e68:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417e6a:	2200      	movs	r2, #0
  417e6c:	2110      	movs	r1, #16
  417e6e:	3024      	adds	r0, #36	; 0x24
  417e70:	47a0      	blx	r4
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  417e72:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  417e74:	2200      	movs	r2, #0
  417e76:	2111      	movs	r1, #17
  417e78:	3024      	adds	r0, #36	; 0x24
  417e7a:	47a0      	blx	r4
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
  417e7c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417e7e:	2200      	movs	r2, #0
  417e80:	2112      	movs	r1, #18
  417e82:	3024      	adds	r0, #36	; 0x24
  417e84:	47a0      	blx	r4
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
  417e86:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417e88:	2200      	movs	r2, #0
  417e8a:	2113      	movs	r1, #19
  417e8c:	3024      	adds	r0, #36	; 0x24
  417e8e:	47a0      	blx	r4
  417e90:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  417e92:	2000      	movs	r0, #0
  417e94:	4b1a      	ldr	r3, [pc, #104]	; (417f00 <arc_init+0x160>)
  417e96:	4798      	blx	r3
  417e98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417e9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ea0:	3050      	adds	r0, #80	; 0x50
  417ea2:	4b19      	ldr	r3, [pc, #100]	; (417f08 <arc_init+0x168>)
  417ea4:	fb83 2300 	smull	r2, r3, r3, r0
  417ea8:	17c2      	asrs	r2, r0, #31
  417eaa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417eae:	b212      	sxth	r2, r2
  417eb0:	e791      	b.n	417dd6 <arc_init+0x36>
  417eb2:	2302      	movs	r3, #2
  417eb4:	f04f 0200 	mov.w	r2, #0
  417eb8:	f363 0202 	bfi	r2, r3, #0, #3
  417ebc:	2108      	movs	r1, #8
  417ebe:	f361 02c7 	bfi	r2, r1, #3, #5
  417ec2:	2109      	movs	r1, #9
  417ec4:	f361 220c 	bfi	r2, r1, #8, #5
  417ec8:	f363 324f 	bfi	r2, r3, #13, #3
  417ecc:	e7a6      	b.n	417e1c <arc_init+0x7c>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  417ece:	2000      	movs	r0, #0
  417ed0:	4b0b      	ldr	r3, [pc, #44]	; (417f00 <arc_init+0x160>)
  417ed2:	4798      	blx	r3
  417ed4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ed8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417edc:	3050      	adds	r0, #80	; 0x50
  417ede:	4b0a      	ldr	r3, [pc, #40]	; (417f08 <arc_init+0x168>)
  417ee0:	fb83 2300 	smull	r2, r3, r3, r0
  417ee4:	17c2      	asrs	r2, r0, #31
  417ee6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417eea:	b212      	sxth	r2, r2
  417eec:	e7a8      	b.n	417e40 <arc_init+0xa0>
  417eee:	bf00      	nop
  417ef0:	20414798 	.word	0x20414798
  417ef4:	0041704d 	.word	0x0041704d
  417ef8:	2041479c 	.word	0x2041479c
  417efc:	00409751 	.word	0x00409751
  417f00:	00413f95 	.word	0x00413f95
  417f04:	004095c1 	.word	0x004095c1
  417f08:	66666667 	.word	0x66666667

00417f0c <chart_init>:
{
  417f0c:	b510      	push	{r4, lr}
    style_init_reset(&styles->chart_bg);
  417f0e:	4c9a      	ldr	r4, [pc, #616]	; (418178 <chart_init+0x26c>)
  417f10:	6820      	ldr	r0, [r4, #0]
  417f12:	3044      	adds	r0, #68	; 0x44
  417f14:	4b99      	ldr	r3, [pc, #612]	; (41817c <chart_init+0x270>)
  417f16:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  417f18:	6820      	ldr	r0, [r4, #0]
  417f1a:	3044      	adds	r0, #68	; 0x44
  417f1c:	4b98      	ldr	r3, [pc, #608]	; (418180 <chart_init+0x274>)
  417f1e:	6a1b      	ldr	r3, [r3, #32]
  417f20:	f013 0f02 	tst.w	r3, #2
  417f24:	f000 80ab 	beq.w	41807e <chart_init+0x172>
  417f28:	f04f 0200 	mov.w	r2, #0
  417f2c:	2305      	movs	r3, #5
  417f2e:	f363 0202 	bfi	r2, r3, #0, #3
  417f32:	2315      	movs	r3, #21
  417f34:	f363 02c7 	bfi	r2, r3, #3, #5
  417f38:	f363 220c 	bfi	r2, r3, #8, #5
  417f3c:	2302      	movs	r3, #2
  417f3e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  417f42:	f248 0189 	movw	r1, #32905	; 0x8089
  417f46:	4b8f      	ldr	r3, [pc, #572]	; (418184 <chart_init+0x278>)
  417f48:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
  417f4a:	4c8b      	ldr	r4, [pc, #556]	; (418178 <chart_init+0x26c>)
  417f4c:	6820      	ldr	r0, [r4, #0]
  417f4e:	3048      	adds	r0, #72	; 0x48
  417f50:	4b8a      	ldr	r3, [pc, #552]	; (41817c <chart_init+0x270>)
  417f52:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  417f54:	6824      	ldr	r4, [r4, #0]
  417f56:	3448      	adds	r4, #72	; 0x48
  417f58:	2000      	movs	r0, #0
  417f5a:	4b8b      	ldr	r3, [pc, #556]	; (418188 <chart_init+0x27c>)
  417f5c:	4798      	blx	r3
  417f5e:	3050      	adds	r0, #80	; 0x50
  417f60:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417f64:	f280 809a 	bge.w	41809c <chart_init+0x190>
  417f68:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417f6a:	2190      	movs	r1, #144	; 0x90
  417f6c:	4620      	mov	r0, r4
  417f6e:	4b87      	ldr	r3, [pc, #540]	; (41818c <chart_init+0x280>)
  417f70:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417f72:	4b81      	ldr	r3, [pc, #516]	; (418178 <chart_init+0x26c>)
  417f74:	681c      	ldr	r4, [r3, #0]
  417f76:	3448      	adds	r4, #72	; 0x48
  417f78:	2000      	movs	r0, #0
  417f7a:	4b83      	ldr	r3, [pc, #524]	; (418188 <chart_init+0x27c>)
  417f7c:	4798      	blx	r3
  417f7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417f82:	0040      	lsls	r0, r0, #1
  417f84:	3050      	adds	r0, #80	; 0x50
  417f86:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417f8a:	f280 8093 	bge.w	4180b4 <chart_init+0x1a8>
  417f8e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  417f90:	2192      	movs	r1, #146	; 0x92
  417f92:	4620      	mov	r0, r4
  417f94:	4b7d      	ldr	r3, [pc, #500]	; (41818c <chart_init+0x280>)
  417f96:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417f98:	4b77      	ldr	r3, [pc, #476]	; (418178 <chart_init+0x26c>)
  417f9a:	681c      	ldr	r4, [r3, #0]
  417f9c:	3448      	adds	r4, #72	; 0x48
  417f9e:	2000      	movs	r0, #0
  417fa0:	4b79      	ldr	r3, [pc, #484]	; (418188 <chart_init+0x27c>)
  417fa2:	4798      	blx	r3
  417fa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417fa8:	0040      	lsls	r0, r0, #1
  417faa:	3050      	adds	r0, #80	; 0x50
  417fac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417fb0:	f280 808f 	bge.w	4180d2 <chart_init+0x1c6>
  417fb4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  417fb6:	2193      	movs	r1, #147	; 0x93
  417fb8:	4620      	mov	r0, r4
  417fba:	4b74      	ldr	r3, [pc, #464]	; (41818c <chart_init+0x280>)
  417fbc:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  417fbe:	4b6e      	ldr	r3, [pc, #440]	; (418178 <chart_init+0x26c>)
  417fc0:	6818      	ldr	r0, [r3, #0]
  417fc2:	3048      	adds	r0, #72	; 0x48
  417fc4:	4b6e      	ldr	r3, [pc, #440]	; (418180 <chart_init+0x274>)
  417fc6:	6a1b      	ldr	r3, [r3, #32]
  417fc8:	f013 0f02 	tst.w	r3, #2
  417fcc:	f000 8090 	beq.w	4180f0 <chart_init+0x1e4>
  417fd0:	f04f 0200 	mov.w	r2, #0
  417fd4:	2306      	movs	r3, #6
  417fd6:	f363 0202 	bfi	r2, r3, #0, #3
  417fda:	231a      	movs	r3, #26
  417fdc:	f363 02c7 	bfi	r2, r3, #3, #5
  417fe0:	231c      	movs	r3, #28
  417fe2:	f363 220c 	bfi	r2, r3, #8, #5
  417fe6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  417fea:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417fee:	2199      	movs	r1, #153	; 0x99
  417ff0:	4b64      	ldr	r3, [pc, #400]	; (418184 <chart_init+0x278>)
  417ff2:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
  417ff4:	4c60      	ldr	r4, [pc, #384]	; (418178 <chart_init+0x26c>)
  417ff6:	6820      	ldr	r0, [r4, #0]
  417ff8:	304c      	adds	r0, #76	; 0x4c
  417ffa:	4b60      	ldr	r3, [pc, #384]	; (41817c <chart_init+0x270>)
  417ffc:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  417ffe:	6824      	ldr	r4, [r4, #0]
  418000:	344c      	adds	r4, #76	; 0x4c
  418002:	2000      	movs	r0, #0
  418004:	4b60      	ldr	r3, [pc, #384]	; (418188 <chart_init+0x27c>)
  418006:	4798      	blx	r3
  418008:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41800c:	3050      	adds	r0, #80	; 0x50
  41800e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418012:	da7c      	bge.n	41810e <chart_init+0x202>
  418014:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418016:	2190      	movs	r1, #144	; 0x90
  418018:	4620      	mov	r0, r4
  41801a:	4b5c      	ldr	r3, [pc, #368]	; (41818c <chart_init+0x280>)
  41801c:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  41801e:	4b56      	ldr	r3, [pc, #344]	; (418178 <chart_init+0x26c>)
  418020:	681c      	ldr	r4, [r3, #0]
  418022:	344c      	adds	r4, #76	; 0x4c
  418024:	2000      	movs	r0, #0
  418026:	4b58      	ldr	r3, [pc, #352]	; (418188 <chart_init+0x27c>)
  418028:	4798      	blx	r3
  41802a:	3014      	adds	r0, #20
  41802c:	0080      	lsls	r0, r0, #2
  41802e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418032:	da7a      	bge.n	41812a <chart_init+0x21e>
  418034:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  418036:	2103      	movs	r1, #3
  418038:	4620      	mov	r0, r4
  41803a:	4b54      	ldr	r3, [pc, #336]	; (41818c <chart_init+0x280>)
  41803c:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  41803e:	4b4e      	ldr	r3, [pc, #312]	; (418178 <chart_init+0x26c>)
  418040:	681c      	ldr	r4, [r3, #0]
  418042:	344c      	adds	r4, #76	; 0x4c
  418044:	2000      	movs	r0, #0
  418046:	4b50      	ldr	r3, [pc, #320]	; (418188 <chart_init+0x27c>)
  418048:	4798      	blx	r3
  41804a:	3028      	adds	r0, #40	; 0x28
  41804c:	0040      	lsls	r0, r0, #1
  41804e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418052:	da77      	bge.n	418144 <chart_init+0x238>
  418054:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  418056:	2114      	movs	r1, #20
  418058:	4620      	mov	r0, r4
  41805a:	4b4c      	ldr	r3, [pc, #304]	; (41818c <chart_init+0x280>)
  41805c:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  41805e:	4b46      	ldr	r3, [pc, #280]	; (418178 <chart_init+0x26c>)
  418060:	681c      	ldr	r4, [r3, #0]
  418062:	344c      	adds	r4, #76	; 0x4c
  418064:	2000      	movs	r0, #0
  418066:	4b48      	ldr	r3, [pc, #288]	; (418188 <chart_init+0x27c>)
  418068:	4798      	blx	r3
  41806a:	3050      	adds	r0, #80	; 0x50
  41806c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418070:	da75      	bge.n	41815e <chart_init+0x252>
  418072:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418074:	2101      	movs	r1, #1
  418076:	4620      	mov	r0, r4
  418078:	4b44      	ldr	r3, [pc, #272]	; (41818c <chart_init+0x280>)
  41807a:	4798      	blx	r3
  41807c:	bd10      	pop	{r4, pc}
  41807e:	f04f 0200 	mov.w	r2, #0
  418082:	2305      	movs	r3, #5
  418084:	f363 0202 	bfi	r2, r3, #0, #3
  418088:	2314      	movs	r3, #20
  41808a:	f363 02c7 	bfi	r2, r3, #3, #5
  41808e:	2317      	movs	r3, #23
  418090:	f363 220c 	bfi	r2, r3, #8, #5
  418094:	2303      	movs	r3, #3
  418096:	f363 324f 	bfi	r2, r3, #13, #3
  41809a:	e752      	b.n	417f42 <chart_init+0x36>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  41809c:	2000      	movs	r0, #0
  41809e:	4b3a      	ldr	r3, [pc, #232]	; (418188 <chart_init+0x27c>)
  4180a0:	4798      	blx	r3
  4180a2:	3050      	adds	r0, #80	; 0x50
  4180a4:	4b3a      	ldr	r3, [pc, #232]	; (418190 <chart_init+0x284>)
  4180a6:	fb83 2300 	smull	r2, r3, r3, r0
  4180aa:	17c2      	asrs	r2, r0, #31
  4180ac:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4180b0:	b212      	sxth	r2, r2
  4180b2:	e75a      	b.n	417f6a <chart_init+0x5e>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4180b4:	2000      	movs	r0, #0
  4180b6:	4b34      	ldr	r3, [pc, #208]	; (418188 <chart_init+0x27c>)
  4180b8:	4798      	blx	r3
  4180ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4180be:	0040      	lsls	r0, r0, #1
  4180c0:	3050      	adds	r0, #80	; 0x50
  4180c2:	4b33      	ldr	r3, [pc, #204]	; (418190 <chart_init+0x284>)
  4180c4:	fb83 2300 	smull	r2, r3, r3, r0
  4180c8:	17c2      	asrs	r2, r0, #31
  4180ca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4180ce:	b212      	sxth	r2, r2
  4180d0:	e75e      	b.n	417f90 <chart_init+0x84>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4180d2:	2000      	movs	r0, #0
  4180d4:	4b2c      	ldr	r3, [pc, #176]	; (418188 <chart_init+0x27c>)
  4180d6:	4798      	blx	r3
  4180d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4180dc:	0040      	lsls	r0, r0, #1
  4180de:	3050      	adds	r0, #80	; 0x50
  4180e0:	4b2b      	ldr	r3, [pc, #172]	; (418190 <chart_init+0x284>)
  4180e2:	fb83 2300 	smull	r2, r3, r3, r0
  4180e6:	17c2      	asrs	r2, r0, #31
  4180e8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4180ec:	b212      	sxth	r2, r2
  4180ee:	e762      	b.n	417fb6 <chart_init+0xaa>
  4180f0:	f04f 0200 	mov.w	r2, #0
  4180f4:	2304      	movs	r3, #4
  4180f6:	f363 0202 	bfi	r2, r3, #0, #3
  4180fa:	2310      	movs	r3, #16
  4180fc:	f363 02c7 	bfi	r2, r3, #3, #5
  418100:	2312      	movs	r3, #18
  418102:	f363 220c 	bfi	r2, r3, #8, #5
  418106:	2302      	movs	r3, #2
  418108:	f363 324f 	bfi	r2, r3, #13, #3
  41810c:	e76f      	b.n	417fee <chart_init+0xe2>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  41810e:	2000      	movs	r0, #0
  418110:	4b1d      	ldr	r3, [pc, #116]	; (418188 <chart_init+0x27c>)
  418112:	4798      	blx	r3
  418114:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418118:	3050      	adds	r0, #80	; 0x50
  41811a:	4b1d      	ldr	r3, [pc, #116]	; (418190 <chart_init+0x284>)
  41811c:	fb83 2300 	smull	r2, r3, r3, r0
  418120:	17c2      	asrs	r2, r0, #31
  418122:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418126:	b212      	sxth	r2, r2
  418128:	e775      	b.n	418016 <chart_init+0x10a>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  41812a:	2000      	movs	r0, #0
  41812c:	4b16      	ldr	r3, [pc, #88]	; (418188 <chart_init+0x27c>)
  41812e:	4798      	blx	r3
  418130:	3014      	adds	r0, #20
  418132:	0080      	lsls	r0, r0, #2
  418134:	4b16      	ldr	r3, [pc, #88]	; (418190 <chart_init+0x284>)
  418136:	fb83 2300 	smull	r2, r3, r3, r0
  41813a:	17c2      	asrs	r2, r0, #31
  41813c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418140:	b212      	sxth	r2, r2
  418142:	e778      	b.n	418036 <chart_init+0x12a>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  418144:	2000      	movs	r0, #0
  418146:	4b10      	ldr	r3, [pc, #64]	; (418188 <chart_init+0x27c>)
  418148:	4798      	blx	r3
  41814a:	3028      	adds	r0, #40	; 0x28
  41814c:	0040      	lsls	r0, r0, #1
  41814e:	4b10      	ldr	r3, [pc, #64]	; (418190 <chart_init+0x284>)
  418150:	fb83 2300 	smull	r2, r3, r3, r0
  418154:	17c2      	asrs	r2, r0, #31
  418156:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41815a:	b212      	sxth	r2, r2
  41815c:	e77b      	b.n	418056 <chart_init+0x14a>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  41815e:	2000      	movs	r0, #0
  418160:	4b09      	ldr	r3, [pc, #36]	; (418188 <chart_init+0x27c>)
  418162:	4798      	blx	r3
  418164:	3050      	adds	r0, #80	; 0x50
  418166:	4b0a      	ldr	r3, [pc, #40]	; (418190 <chart_init+0x284>)
  418168:	fb83 2300 	smull	r2, r3, r3, r0
  41816c:	17c2      	asrs	r2, r0, #31
  41816e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418172:	b212      	sxth	r2, r2
  418174:	e77e      	b.n	418074 <chart_init+0x168>
  418176:	bf00      	nop
  418178:	20414798 	.word	0x20414798
  41817c:	0041704d 	.word	0x0041704d
  418180:	2041479c 	.word	0x2041479c
  418184:	00409751 	.word	0x00409751
  418188:	00413f95 	.word	0x00413f95
  41818c:	004095c1 	.word	0x004095c1
  418190:	66666667 	.word	0x66666667

00418194 <calendar_init>:
{
  418194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->calendar_header);
  418196:	4cbd      	ldr	r4, [pc, #756]	; (41848c <calendar_init+0x2f8>)
  418198:	6820      	ldr	r0, [r4, #0]
  41819a:	3034      	adds	r0, #52	; 0x34
  41819c:	4bbc      	ldr	r3, [pc, #752]	; (418490 <calendar_init+0x2fc>)
  41819e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  4181a0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4181a2:	2200      	movs	r2, #0
  4181a4:	2110      	movs	r1, #16
  4181a6:	3034      	adds	r0, #52	; 0x34
  4181a8:	4bba      	ldr	r3, [pc, #744]	; (418494 <calendar_init+0x300>)
  4181aa:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  4181ac:	6824      	ldr	r4, [r4, #0]
  4181ae:	3434      	adds	r4, #52	; 0x34
  4181b0:	2000      	movs	r0, #0
  4181b2:	4bb9      	ldr	r3, [pc, #740]	; (418498 <calendar_init+0x304>)
  4181b4:	4798      	blx	r3
  4181b6:	2801      	cmp	r0, #1
  4181b8:	f240 81e5 	bls.w	418586 <calendar_init+0x3f2>
  4181bc:	2000      	movs	r0, #0
  4181be:	4bb7      	ldr	r3, [pc, #732]	; (41849c <calendar_init+0x308>)
  4181c0:	4798      	blx	r3
  4181c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4181c6:	0040      	lsls	r0, r0, #1
  4181c8:	3050      	adds	r0, #80	; 0x50
  4181ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4181ce:	f280 81f3 	bge.w	4185b8 <calendar_init+0x424>
  4181d2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4181d4:	2112      	movs	r1, #18
  4181d6:	4620      	mov	r0, r4
  4181d8:	4bae      	ldr	r3, [pc, #696]	; (418494 <calendar_init+0x300>)
  4181da:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  4181dc:	4bab      	ldr	r3, [pc, #684]	; (41848c <calendar_init+0x2f8>)
  4181de:	681c      	ldr	r4, [r3, #0]
  4181e0:	3434      	adds	r4, #52	; 0x34
  4181e2:	2000      	movs	r0, #0
  4181e4:	4bac      	ldr	r3, [pc, #688]	; (418498 <calendar_init+0x304>)
  4181e6:	4798      	blx	r3
  4181e8:	2801      	cmp	r0, #1
  4181ea:	f240 81f4 	bls.w	4185d6 <calendar_init+0x442>
  4181ee:	2000      	movs	r0, #0
  4181f0:	4baa      	ldr	r3, [pc, #680]	; (41849c <calendar_init+0x308>)
  4181f2:	4798      	blx	r3
  4181f4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4181f8:	0040      	lsls	r0, r0, #1
  4181fa:	3050      	adds	r0, #80	; 0x50
  4181fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418200:	f280 8202 	bge.w	418608 <calendar_init+0x474>
  418204:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418206:	2113      	movs	r1, #19
  418208:	4620      	mov	r0, r4
  41820a:	4da2      	ldr	r5, [pc, #648]	; (418494 <calendar_init+0x300>)
  41820c:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  41820e:	4c9f      	ldr	r4, [pc, #636]	; (41848c <calendar_init+0x2f8>)
  418210:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418212:	2200      	movs	r2, #0
  418214:	2111      	movs	r1, #17
  418216:	3034      	adds	r0, #52	; 0x34
  418218:	47a8      	blx	r5
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41821a:	6824      	ldr	r4, [r4, #0]
  41821c:	3434      	adds	r4, #52	; 0x34
  41821e:	2000      	movs	r0, #0
  418220:	4b9d      	ldr	r3, [pc, #628]	; (418498 <calendar_init+0x304>)
  418222:	4798      	blx	r3
  418224:	2801      	cmp	r0, #1
  418226:	f240 81fe 	bls.w	418626 <calendar_init+0x492>
  41822a:	2000      	movs	r0, #0
  41822c:	4b9b      	ldr	r3, [pc, #620]	; (41849c <calendar_init+0x308>)
  41822e:	4798      	blx	r3
  418230:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418234:	0040      	lsls	r0, r0, #1
  418236:	3050      	adds	r0, #80	; 0x50
  418238:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41823c:	f280 820c 	bge.w	418658 <calendar_init+0x4c4>
  418240:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  418242:	2115      	movs	r1, #21
  418244:	4620      	mov	r0, r4
  418246:	4b93      	ldr	r3, [pc, #588]	; (418494 <calendar_init+0x300>)
  418248:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41824a:	4b90      	ldr	r3, [pc, #576]	; (41848c <calendar_init+0x2f8>)
  41824c:	681c      	ldr	r4, [r3, #0]
  41824e:	3434      	adds	r4, #52	; 0x34
  418250:	2000      	movs	r0, #0
  418252:	4b91      	ldr	r3, [pc, #580]	; (418498 <calendar_init+0x304>)
  418254:	4798      	blx	r3
  418256:	2801      	cmp	r0, #1
  418258:	f240 820d 	bls.w	418676 <calendar_init+0x4e2>
  41825c:	2000      	movs	r0, #0
  41825e:	4b8f      	ldr	r3, [pc, #572]	; (41849c <calendar_init+0x308>)
  418260:	4798      	blx	r3
  418262:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418266:	0040      	lsls	r0, r0, #1
  418268:	3050      	adds	r0, #80	; 0x50
  41826a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41826e:	f280 821b 	bge.w	4186a8 <calendar_init+0x514>
  418272:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  418274:	2116      	movs	r1, #22
  418276:	4620      	mov	r0, r4
  418278:	4b86      	ldr	r3, [pc, #536]	; (418494 <calendar_init+0x300>)
  41827a:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  41827c:	4b83      	ldr	r3, [pc, #524]	; (41848c <calendar_init+0x2f8>)
  41827e:	6818      	ldr	r0, [r3, #0]
  418280:	3034      	adds	r0, #52	; 0x34
  418282:	4b87      	ldr	r3, [pc, #540]	; (4184a0 <calendar_init+0x30c>)
  418284:	6a1b      	ldr	r3, [r3, #32]
  418286:	f013 0f02 	tst.w	r3, #2
  41828a:	f000 821c 	beq.w	4186c6 <calendar_init+0x532>
  41828e:	f04f 0200 	mov.w	r2, #0
  418292:	2304      	movs	r3, #4
  418294:	f363 0202 	bfi	r2, r3, #0, #3
  418298:	2311      	movs	r3, #17
  41829a:	f363 02c7 	bfi	r2, r3, #3, #5
  41829e:	f363 220c 	bfi	r2, r3, #8, #5
  4182a2:	2302      	movs	r3, #2
  4182a4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4182a8:	f249 0189 	movw	r1, #37001	; 0x9089
  4182ac:	4b7d      	ldr	r3, [pc, #500]	; (4184a4 <calendar_init+0x310>)
  4182ae:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
  4182b0:	4c76      	ldr	r4, [pc, #472]	; (41848c <calendar_init+0x2f8>)
  4182b2:	6820      	ldr	r0, [r4, #0]
  4182b4:	3038      	adds	r0, #56	; 0x38
  4182b6:	4b76      	ldr	r3, [pc, #472]	; (418490 <calendar_init+0x2fc>)
  4182b8:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  4182ba:	6820      	ldr	r0, [r4, #0]
  4182bc:	3038      	adds	r0, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
  4182be:	4b78      	ldr	r3, [pc, #480]	; (4184a0 <calendar_init+0x30c>)
  4182c0:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  4182c2:	f013 0f02 	tst.w	r3, #2
  4182c6:	f000 8201 	beq.w	4186cc <calendar_init+0x538>
  4182ca:	f04f 0200 	mov.w	r2, #0
  4182ce:	2302      	movs	r3, #2
  4182d0:	f363 0202 	bfi	r2, r3, #0, #3
  4182d4:	2306      	movs	r3, #6
  4182d6:	f363 02c7 	bfi	r2, r3, #3, #5
  4182da:	2309      	movs	r3, #9
  4182dc:	f363 220c 	bfi	r2, r3, #8, #5
  4182e0:	f36f 324f 	bfc	r2, #13, #3
  4182e4:	f248 0189 	movw	r1, #32905	; 0x8089
  4182e8:	4b6e      	ldr	r3, [pc, #440]	; (4184a4 <calendar_init+0x310>)
  4182ea:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  4182ec:	4b67      	ldr	r3, [pc, #412]	; (41848c <calendar_init+0x2f8>)
  4182ee:	681c      	ldr	r4, [r3, #0]
  4182f0:	3438      	adds	r4, #56	; 0x38
  4182f2:	2000      	movs	r0, #0
  4182f4:	4b68      	ldr	r3, [pc, #416]	; (418498 <calendar_init+0x304>)
  4182f6:	4798      	blx	r3
  4182f8:	2801      	cmp	r0, #1
  4182fa:	f240 81f2 	bls.w	4186e2 <calendar_init+0x54e>
  4182fe:	2000      	movs	r0, #0
  418300:	4b66      	ldr	r3, [pc, #408]	; (41849c <calendar_init+0x308>)
  418302:	4798      	blx	r3
  418304:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418308:	0040      	lsls	r0, r0, #1
  41830a:	3050      	adds	r0, #80	; 0x50
  41830c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418310:	f280 8200 	bge.w	418714 <calendar_init+0x580>
  418314:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418316:	2112      	movs	r1, #18
  418318:	4620      	mov	r0, r4
  41831a:	4b5e      	ldr	r3, [pc, #376]	; (418494 <calendar_init+0x300>)
  41831c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41831e:	4b5b      	ldr	r3, [pc, #364]	; (41848c <calendar_init+0x2f8>)
  418320:	681c      	ldr	r4, [r3, #0]
  418322:	3438      	adds	r4, #56	; 0x38
  418324:	2000      	movs	r0, #0
  418326:	4b5c      	ldr	r3, [pc, #368]	; (418498 <calendar_init+0x304>)
  418328:	4798      	blx	r3
  41832a:	2801      	cmp	r0, #1
  41832c:	f240 8201 	bls.w	418732 <calendar_init+0x59e>
  418330:	2000      	movs	r0, #0
  418332:	4b5a      	ldr	r3, [pc, #360]	; (41849c <calendar_init+0x308>)
  418334:	4798      	blx	r3
  418336:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41833a:	0040      	lsls	r0, r0, #1
  41833c:	3050      	adds	r0, #80	; 0x50
  41833e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418342:	f280 820f 	bge.w	418764 <calendar_init+0x5d0>
  418346:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418348:	2113      	movs	r1, #19
  41834a:	4620      	mov	r0, r4
  41834c:	4b51      	ldr	r3, [pc, #324]	; (418494 <calendar_init+0x300>)
  41834e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418350:	4b4e      	ldr	r3, [pc, #312]	; (41848c <calendar_init+0x2f8>)
  418352:	681c      	ldr	r4, [r3, #0]
  418354:	3438      	adds	r4, #56	; 0x38
  418356:	2000      	movs	r0, #0
  418358:	4b4f      	ldr	r3, [pc, #316]	; (418498 <calendar_init+0x304>)
  41835a:	4798      	blx	r3
  41835c:	2801      	cmp	r0, #1
  41835e:	f240 8210 	bls.w	418782 <calendar_init+0x5ee>
  418362:	2000      	movs	r0, #0
  418364:	4b4d      	ldr	r3, [pc, #308]	; (41849c <calendar_init+0x308>)
  418366:	4798      	blx	r3
  418368:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41836c:	0040      	lsls	r0, r0, #1
  41836e:	3050      	adds	r0, #80	; 0x50
  418370:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418374:	f280 822a 	bge.w	4187cc <calendar_init+0x638>
  418378:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41837a:	2111      	movs	r1, #17
  41837c:	4620      	mov	r0, r4
  41837e:	4b45      	ldr	r3, [pc, #276]	; (418494 <calendar_init+0x300>)
  418380:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
  418382:	4c42      	ldr	r4, [pc, #264]	; (41848c <calendar_init+0x2f8>)
  418384:	6820      	ldr	r0, [r4, #0]
  418386:	3030      	adds	r0, #48	; 0x30
  418388:	4b41      	ldr	r3, [pc, #260]	; (418490 <calendar_init+0x2fc>)
  41838a:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  41838c:	6824      	ldr	r4, [r4, #0]
  41838e:	3430      	adds	r4, #48	; 0x30
  418390:	2000      	movs	r0, #0
  418392:	4b42      	ldr	r3, [pc, #264]	; (41849c <calendar_init+0x308>)
  418394:	4798      	blx	r3
  418396:	3014      	adds	r0, #20
  418398:	0080      	lsls	r0, r0, #2
  41839a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41839e:	f280 8224 	bge.w	4187ea <calendar_init+0x656>
  4183a2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4183a4:	2101      	movs	r1, #1
  4183a6:	4620      	mov	r0, r4
  4183a8:	4b3a      	ldr	r3, [pc, #232]	; (418494 <calendar_init+0x300>)
  4183aa:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  4183ac:	4b37      	ldr	r3, [pc, #220]	; (41848c <calendar_init+0x2f8>)
  4183ae:	6818      	ldr	r0, [r3, #0]
  4183b0:	3030      	adds	r0, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4183b2:	4b3b      	ldr	r3, [pc, #236]	; (4184a0 <calendar_init+0x30c>)
  4183b4:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  4183b6:	f013 0f02 	tst.w	r3, #2
  4183ba:	f000 8223 	beq.w	418804 <calendar_init+0x670>
  4183be:	f04f 0200 	mov.w	r2, #0
  4183c2:	2302      	movs	r3, #2
  4183c4:	f363 0202 	bfi	r2, r3, #0, #3
  4183c8:	2306      	movs	r3, #6
  4183ca:	f363 02c7 	bfi	r2, r3, #3, #5
  4183ce:	2309      	movs	r3, #9
  4183d0:	f363 220c 	bfi	r2, r3, #8, #5
  4183d4:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4183d8:	f248 1189 	movw	r1, #33161	; 0x8189
  4183dc:	4d31      	ldr	r5, [pc, #196]	; (4184a4 <calendar_init+0x310>)
  4183de:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
  4183e0:	4c2a      	ldr	r4, [pc, #168]	; (41848c <calendar_init+0x2f8>)
  4183e2:	6820      	ldr	r0, [r4, #0]
  4183e4:	4b30      	ldr	r3, [pc, #192]	; (4184a8 <calendar_init+0x314>)
  4183e6:	889a      	ldrh	r2, [r3, #4]
  4183e8:	f24a 0189 	movw	r1, #41097	; 0xa089
  4183ec:	3030      	adds	r0, #48	; 0x30
  4183ee:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  4183f0:	6820      	ldr	r0, [r4, #0]
  4183f2:	3030      	adds	r0, #48	; 0x30
  4183f4:	4b2a      	ldr	r3, [pc, #168]	; (4184a0 <calendar_init+0x30c>)
  4183f6:	6a1b      	ldr	r3, [r3, #32]
  4183f8:	f013 0f02 	tst.w	r3, #2
  4183fc:	f000 8205 	beq.w	41880a <calendar_init+0x676>
  418400:	2233      	movs	r2, #51	; 0x33
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418402:	f44f 7196 	mov.w	r1, #300	; 0x12c
  418406:	4d29      	ldr	r5, [pc, #164]	; (4184ac <calendar_init+0x318>)
  418408:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
  41840a:	4c20      	ldr	r4, [pc, #128]	; (41848c <calendar_init+0x2f8>)
  41840c:	6820      	ldr	r0, [r4, #0]
  41840e:	2233      	movs	r2, #51	; 0x33
  418410:	f241 012c 	movw	r1, #4140	; 0x102c
  418414:	3030      	adds	r0, #48	; 0x30
  418416:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
  418418:	6820      	ldr	r0, [r4, #0]
  41841a:	22ff      	movs	r2, #255	; 0xff
  41841c:	f44f 710b 	mov.w	r1, #556	; 0x22c
  418420:	3030      	adds	r0, #48	; 0x30
  418422:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
  418424:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  418426:	4b20      	ldr	r3, [pc, #128]	; (4184a8 <calendar_init+0x314>)
  418428:	881a      	ldrh	r2, [r3, #0]
  41842a:	f248 2189 	movw	r1, #33417	; 0x8289
  41842e:	3030      	adds	r0, #48	; 0x30
  418430:	4e1c      	ldr	r6, [pc, #112]	; (4184a4 <calendar_init+0x310>)
  418432:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
  418434:	6820      	ldr	r0, [r4, #0]
  418436:	4d1a      	ldr	r5, [pc, #104]	; (4184a0 <calendar_init+0x30c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418438:	89aa      	ldrh	r2, [r5, #12]
  41843a:	f240 2129 	movw	r1, #553	; 0x229
  41843e:	3030      	adds	r0, #48	; 0x30
  418440:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  418442:	6820      	ldr	r0, [r4, #0]
  418444:	3030      	adds	r0, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
  418446:	6a2b      	ldr	r3, [r5, #32]
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  418448:	f013 0f02 	tst.w	r3, #2
  41844c:	f000 81df 	beq.w	41880e <calendar_init+0x67a>
  418450:	f04f 0200 	mov.w	r2, #0
  418454:	2303      	movs	r3, #3
  418456:	f363 0202 	bfi	r2, r3, #0, #3
  41845a:	230c      	movs	r3, #12
  41845c:	f363 02c7 	bfi	r2, r3, #3, #5
  418460:	f363 220c 	bfi	r2, r3, #8, #5
  418464:	2301      	movs	r3, #1
  418466:	f363 324f 	bfi	r2, r3, #13, #3
  41846a:	2129      	movs	r1, #41	; 0x29
  41846c:	4d0d      	ldr	r5, [pc, #52]	; (4184a4 <calendar_init+0x310>)
  41846e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  418470:	4c06      	ldr	r4, [pc, #24]	; (41848c <calendar_init+0x2f8>)
  418472:	6820      	ldr	r0, [r4, #0]
  418474:	4e0a      	ldr	r6, [pc, #40]	; (4184a0 <calendar_init+0x30c>)
  418476:	89b2      	ldrh	r2, [r6, #12]
  418478:	f240 1129 	movw	r1, #297	; 0x129
  41847c:	3030      	adds	r0, #48	; 0x30
  41847e:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
  418480:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  418482:	2202      	movs	r2, #2
  418484:	f44f 7198 	mov.w	r1, #304	; 0x130
  418488:	3030      	adds	r0, #48	; 0x30
  41848a:	e011      	b.n	4184b0 <calendar_init+0x31c>
  41848c:	20414798 	.word	0x20414798
  418490:	0041704d 	.word	0x0041704d
  418494:	004095c1 	.word	0x004095c1
  418498:	00413fb5 	.word	0x00413fb5
  41849c:	00413f95 	.word	0x00413f95
  4184a0:	2041479c 	.word	0x2041479c
  4184a4:	00409751 	.word	0x00409751
  4184a8:	0042497c 	.word	0x0042497c
  4184ac:	004098e1 	.word	0x004098e1
  4184b0:	4fb9      	ldr	r7, [pc, #740]	; (418798 <calendar_init+0x604>)
  4184b2:	47b8      	blx	r7
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
  4184b4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  4184b6:	2204      	movs	r2, #4
  4184b8:	f240 1131 	movw	r1, #305	; 0x131
  4184bc:	3030      	adds	r0, #48	; 0x30
  4184be:	47b8      	blx	r7
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  4184c0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  4184c2:	89b2      	ldrh	r2, [r6, #12]
  4184c4:	f240 1139 	movw	r1, #313	; 0x139
  4184c8:	3030      	adds	r0, #48	; 0x30
  4184ca:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  4184cc:	6824      	ldr	r4, [r4, #0]
  4184ce:	3430      	adds	r4, #48	; 0x30
  4184d0:	2000      	movs	r0, #0
  4184d2:	4bb2      	ldr	r3, [pc, #712]	; (41879c <calendar_init+0x608>)
  4184d4:	4798      	blx	r3
  4184d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4184da:	3050      	adds	r0, #80	; 0x50
  4184dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4184e0:	f280 8198 	bge.w	418814 <calendar_init+0x680>
  4184e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4184e6:	2114      	movs	r1, #20
  4184e8:	4620      	mov	r0, r4
  4184ea:	4bab      	ldr	r3, [pc, #684]	; (418798 <calendar_init+0x604>)
  4184ec:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  4184ee:	4bac      	ldr	r3, [pc, #688]	; (4187a0 <calendar_init+0x60c>)
  4184f0:	681c      	ldr	r4, [r3, #0]
  4184f2:	3430      	adds	r4, #48	; 0x30
  4184f4:	2000      	movs	r0, #0
  4184f6:	4bab      	ldr	r3, [pc, #684]	; (4187a4 <calendar_init+0x610>)
  4184f8:	4798      	blx	r3
  4184fa:	2801      	cmp	r0, #1
  4184fc:	f240 8198 	bls.w	418830 <calendar_init+0x69c>
  418500:	2000      	movs	r0, #0
  418502:	4ba6      	ldr	r3, [pc, #664]	; (41879c <calendar_init+0x608>)
  418504:	4798      	blx	r3
  418506:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41850a:	0040      	lsls	r0, r0, #1
  41850c:	3050      	adds	r0, #80	; 0x50
  41850e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418512:	f280 81a6 	bge.w	418862 <calendar_init+0x6ce>
  418516:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418518:	2112      	movs	r1, #18
  41851a:	4620      	mov	r0, r4
  41851c:	4b9e      	ldr	r3, [pc, #632]	; (418798 <calendar_init+0x604>)
  41851e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418520:	4b9f      	ldr	r3, [pc, #636]	; (4187a0 <calendar_init+0x60c>)
  418522:	681c      	ldr	r4, [r3, #0]
  418524:	3430      	adds	r4, #48	; 0x30
  418526:	2000      	movs	r0, #0
  418528:	4b9e      	ldr	r3, [pc, #632]	; (4187a4 <calendar_init+0x610>)
  41852a:	4798      	blx	r3
  41852c:	2801      	cmp	r0, #1
  41852e:	f240 81a7 	bls.w	418880 <calendar_init+0x6ec>
  418532:	2000      	movs	r0, #0
  418534:	4b99      	ldr	r3, [pc, #612]	; (41879c <calendar_init+0x608>)
  418536:	4798      	blx	r3
  418538:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41853c:	0040      	lsls	r0, r0, #1
  41853e:	3050      	adds	r0, #80	; 0x50
  418540:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418544:	f280 81b5 	bge.w	4188b2 <calendar_init+0x71e>
  418548:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41854a:	2113      	movs	r1, #19
  41854c:	4620      	mov	r0, r4
  41854e:	4b92      	ldr	r3, [pc, #584]	; (418798 <calendar_init+0x604>)
  418550:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418552:	4b93      	ldr	r3, [pc, #588]	; (4187a0 <calendar_init+0x60c>)
  418554:	681c      	ldr	r4, [r3, #0]
  418556:	3430      	adds	r4, #48	; 0x30
  418558:	2000      	movs	r0, #0
  41855a:	4b92      	ldr	r3, [pc, #584]	; (4187a4 <calendar_init+0x610>)
  41855c:	4798      	blx	r3
  41855e:	2801      	cmp	r0, #1
  418560:	f240 81b6 	bls.w	4188d0 <calendar_init+0x73c>
  418564:	2000      	movs	r0, #0
  418566:	4b8d      	ldr	r3, [pc, #564]	; (41879c <calendar_init+0x608>)
  418568:	4798      	blx	r3
  41856a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41856e:	0040      	lsls	r0, r0, #1
  418570:	3050      	adds	r0, #80	; 0x50
  418572:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418576:	f280 81c4 	bge.w	418902 <calendar_init+0x76e>
  41857a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41857c:	2111      	movs	r1, #17
  41857e:	4620      	mov	r0, r4
  418580:	4b85      	ldr	r3, [pc, #532]	; (418798 <calendar_init+0x604>)
  418582:	4798      	blx	r3
  418584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418586:	2000      	movs	r0, #0
  418588:	4b84      	ldr	r3, [pc, #528]	; (41879c <calendar_init+0x608>)
  41858a:	4798      	blx	r3
  41858c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418590:	3050      	adds	r0, #80	; 0x50
  418592:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418596:	da01      	bge.n	41859c <calendar_init+0x408>
  418598:	2201      	movs	r2, #1
  41859a:	e61b      	b.n	4181d4 <calendar_init+0x40>
  41859c:	2000      	movs	r0, #0
  41859e:	4b7f      	ldr	r3, [pc, #508]	; (41879c <calendar_init+0x608>)
  4185a0:	4798      	blx	r3
  4185a2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4185a6:	3050      	adds	r0, #80	; 0x50
  4185a8:	4b7f      	ldr	r3, [pc, #508]	; (4187a8 <calendar_init+0x614>)
  4185aa:	fb83 2300 	smull	r2, r3, r3, r0
  4185ae:	17c2      	asrs	r2, r0, #31
  4185b0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4185b4:	b212      	sxth	r2, r2
  4185b6:	e60d      	b.n	4181d4 <calendar_init+0x40>
  4185b8:	2000      	movs	r0, #0
  4185ba:	4b78      	ldr	r3, [pc, #480]	; (41879c <calendar_init+0x608>)
  4185bc:	4798      	blx	r3
  4185be:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4185c2:	0040      	lsls	r0, r0, #1
  4185c4:	3050      	adds	r0, #80	; 0x50
  4185c6:	4b78      	ldr	r3, [pc, #480]	; (4187a8 <calendar_init+0x614>)
  4185c8:	fb83 2300 	smull	r2, r3, r3, r0
  4185cc:	17c2      	asrs	r2, r0, #31
  4185ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4185d2:	b212      	sxth	r2, r2
  4185d4:	e5fe      	b.n	4181d4 <calendar_init+0x40>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  4185d6:	2000      	movs	r0, #0
  4185d8:	4b70      	ldr	r3, [pc, #448]	; (41879c <calendar_init+0x608>)
  4185da:	4798      	blx	r3
  4185dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4185e0:	3050      	adds	r0, #80	; 0x50
  4185e2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4185e6:	da01      	bge.n	4185ec <calendar_init+0x458>
  4185e8:	2201      	movs	r2, #1
  4185ea:	e60c      	b.n	418206 <calendar_init+0x72>
  4185ec:	2000      	movs	r0, #0
  4185ee:	4b6b      	ldr	r3, [pc, #428]	; (41879c <calendar_init+0x608>)
  4185f0:	4798      	blx	r3
  4185f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4185f6:	3050      	adds	r0, #80	; 0x50
  4185f8:	4b6b      	ldr	r3, [pc, #428]	; (4187a8 <calendar_init+0x614>)
  4185fa:	fb83 2300 	smull	r2, r3, r3, r0
  4185fe:	17c2      	asrs	r2, r0, #31
  418600:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418604:	b212      	sxth	r2, r2
  418606:	e5fe      	b.n	418206 <calendar_init+0x72>
  418608:	2000      	movs	r0, #0
  41860a:	4b64      	ldr	r3, [pc, #400]	; (41879c <calendar_init+0x608>)
  41860c:	4798      	blx	r3
  41860e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418612:	0040      	lsls	r0, r0, #1
  418614:	3050      	adds	r0, #80	; 0x50
  418616:	4b64      	ldr	r3, [pc, #400]	; (4187a8 <calendar_init+0x614>)
  418618:	fb83 2300 	smull	r2, r3, r3, r0
  41861c:	17c2      	asrs	r2, r0, #31
  41861e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418622:	b212      	sxth	r2, r2
  418624:	e5ef      	b.n	418206 <calendar_init+0x72>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418626:	2000      	movs	r0, #0
  418628:	4b5c      	ldr	r3, [pc, #368]	; (41879c <calendar_init+0x608>)
  41862a:	4798      	blx	r3
  41862c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418630:	3050      	adds	r0, #80	; 0x50
  418632:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418636:	da01      	bge.n	41863c <calendar_init+0x4a8>
  418638:	2201      	movs	r2, #1
  41863a:	e602      	b.n	418242 <calendar_init+0xae>
  41863c:	2000      	movs	r0, #0
  41863e:	4b57      	ldr	r3, [pc, #348]	; (41879c <calendar_init+0x608>)
  418640:	4798      	blx	r3
  418642:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418646:	3050      	adds	r0, #80	; 0x50
  418648:	4b57      	ldr	r3, [pc, #348]	; (4187a8 <calendar_init+0x614>)
  41864a:	fb83 2300 	smull	r2, r3, r3, r0
  41864e:	17c2      	asrs	r2, r0, #31
  418650:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418654:	b212      	sxth	r2, r2
  418656:	e5f4      	b.n	418242 <calendar_init+0xae>
  418658:	2000      	movs	r0, #0
  41865a:	4b50      	ldr	r3, [pc, #320]	; (41879c <calendar_init+0x608>)
  41865c:	4798      	blx	r3
  41865e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418662:	0040      	lsls	r0, r0, #1
  418664:	3050      	adds	r0, #80	; 0x50
  418666:	4b50      	ldr	r3, [pc, #320]	; (4187a8 <calendar_init+0x614>)
  418668:	fb83 2300 	smull	r2, r3, r3, r0
  41866c:	17c2      	asrs	r2, r0, #31
  41866e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418672:	b212      	sxth	r2, r2
  418674:	e5e5      	b.n	418242 <calendar_init+0xae>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418676:	2000      	movs	r0, #0
  418678:	4b48      	ldr	r3, [pc, #288]	; (41879c <calendar_init+0x608>)
  41867a:	4798      	blx	r3
  41867c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418680:	3050      	adds	r0, #80	; 0x50
  418682:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418686:	da01      	bge.n	41868c <calendar_init+0x4f8>
  418688:	2201      	movs	r2, #1
  41868a:	e5f3      	b.n	418274 <calendar_init+0xe0>
  41868c:	2000      	movs	r0, #0
  41868e:	4b43      	ldr	r3, [pc, #268]	; (41879c <calendar_init+0x608>)
  418690:	4798      	blx	r3
  418692:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418696:	3050      	adds	r0, #80	; 0x50
  418698:	4b43      	ldr	r3, [pc, #268]	; (4187a8 <calendar_init+0x614>)
  41869a:	fb83 2300 	smull	r2, r3, r3, r0
  41869e:	17c2      	asrs	r2, r0, #31
  4186a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4186a4:	b212      	sxth	r2, r2
  4186a6:	e5e5      	b.n	418274 <calendar_init+0xe0>
  4186a8:	2000      	movs	r0, #0
  4186aa:	4b3c      	ldr	r3, [pc, #240]	; (41879c <calendar_init+0x608>)
  4186ac:	4798      	blx	r3
  4186ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4186b2:	0040      	lsls	r0, r0, #1
  4186b4:	3050      	adds	r0, #80	; 0x50
  4186b6:	4b3c      	ldr	r3, [pc, #240]	; (4187a8 <calendar_init+0x614>)
  4186b8:	fb83 2300 	smull	r2, r3, r3, r0
  4186bc:	17c2      	asrs	r2, r0, #31
  4186be:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4186c2:	b212      	sxth	r2, r2
  4186c4:	e5d6      	b.n	418274 <calendar_init+0xe0>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  4186c6:	4b39      	ldr	r3, [pc, #228]	; (4187ac <calendar_init+0x618>)
  4186c8:	881a      	ldrh	r2, [r3, #0]
  4186ca:	e5ed      	b.n	4182a8 <calendar_init+0x114>
  4186cc:	f04f 0207 	mov.w	r2, #7
  4186d0:	231d      	movs	r3, #29
  4186d2:	f363 02c7 	bfi	r2, r3, #3, #5
  4186d6:	f363 220c 	bfi	r2, r3, #8, #5
  4186da:	2303      	movs	r3, #3
  4186dc:	f363 324f 	bfi	r2, r3, #13, #3
  4186e0:	e600      	b.n	4182e4 <calendar_init+0x150>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  4186e2:	2000      	movs	r0, #0
  4186e4:	4b2d      	ldr	r3, [pc, #180]	; (41879c <calendar_init+0x608>)
  4186e6:	4798      	blx	r3
  4186e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4186ec:	3050      	adds	r0, #80	; 0x50
  4186ee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4186f2:	da01      	bge.n	4186f8 <calendar_init+0x564>
  4186f4:	2201      	movs	r2, #1
  4186f6:	e60e      	b.n	418316 <calendar_init+0x182>
  4186f8:	2000      	movs	r0, #0
  4186fa:	4b28      	ldr	r3, [pc, #160]	; (41879c <calendar_init+0x608>)
  4186fc:	4798      	blx	r3
  4186fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418702:	3050      	adds	r0, #80	; 0x50
  418704:	4b28      	ldr	r3, [pc, #160]	; (4187a8 <calendar_init+0x614>)
  418706:	fb83 2300 	smull	r2, r3, r3, r0
  41870a:	17c2      	asrs	r2, r0, #31
  41870c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418710:	b212      	sxth	r2, r2
  418712:	e600      	b.n	418316 <calendar_init+0x182>
  418714:	2000      	movs	r0, #0
  418716:	4b21      	ldr	r3, [pc, #132]	; (41879c <calendar_init+0x608>)
  418718:	4798      	blx	r3
  41871a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41871e:	0040      	lsls	r0, r0, #1
  418720:	3050      	adds	r0, #80	; 0x50
  418722:	4b21      	ldr	r3, [pc, #132]	; (4187a8 <calendar_init+0x614>)
  418724:	fb83 2300 	smull	r2, r3, r3, r0
  418728:	17c2      	asrs	r2, r0, #31
  41872a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41872e:	b212      	sxth	r2, r2
  418730:	e5f1      	b.n	418316 <calendar_init+0x182>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418732:	2000      	movs	r0, #0
  418734:	4b19      	ldr	r3, [pc, #100]	; (41879c <calendar_init+0x608>)
  418736:	4798      	blx	r3
  418738:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41873c:	3050      	adds	r0, #80	; 0x50
  41873e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418742:	da01      	bge.n	418748 <calendar_init+0x5b4>
  418744:	2201      	movs	r2, #1
  418746:	e5ff      	b.n	418348 <calendar_init+0x1b4>
  418748:	2000      	movs	r0, #0
  41874a:	4b14      	ldr	r3, [pc, #80]	; (41879c <calendar_init+0x608>)
  41874c:	4798      	blx	r3
  41874e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418752:	3050      	adds	r0, #80	; 0x50
  418754:	4b14      	ldr	r3, [pc, #80]	; (4187a8 <calendar_init+0x614>)
  418756:	fb83 2300 	smull	r2, r3, r3, r0
  41875a:	17c2      	asrs	r2, r0, #31
  41875c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418760:	b212      	sxth	r2, r2
  418762:	e5f1      	b.n	418348 <calendar_init+0x1b4>
  418764:	2000      	movs	r0, #0
  418766:	4b0d      	ldr	r3, [pc, #52]	; (41879c <calendar_init+0x608>)
  418768:	4798      	blx	r3
  41876a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41876e:	0040      	lsls	r0, r0, #1
  418770:	3050      	adds	r0, #80	; 0x50
  418772:	4b0d      	ldr	r3, [pc, #52]	; (4187a8 <calendar_init+0x614>)
  418774:	fb83 2300 	smull	r2, r3, r3, r0
  418778:	17c2      	asrs	r2, r0, #31
  41877a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41877e:	b212      	sxth	r2, r2
  418780:	e5e2      	b.n	418348 <calendar_init+0x1b4>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418782:	2000      	movs	r0, #0
  418784:	4b05      	ldr	r3, [pc, #20]	; (41879c <calendar_init+0x608>)
  418786:	4798      	blx	r3
  418788:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41878c:	3050      	adds	r0, #80	; 0x50
  41878e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418792:	da0d      	bge.n	4187b0 <calendar_init+0x61c>
  418794:	2201      	movs	r2, #1
  418796:	e5f0      	b.n	41837a <calendar_init+0x1e6>
  418798:	004095c1 	.word	0x004095c1
  41879c:	00413f95 	.word	0x00413f95
  4187a0:	20414798 	.word	0x20414798
  4187a4:	00413fb5 	.word	0x00413fb5
  4187a8:	66666667 	.word	0x66666667
  4187ac:	0042497c 	.word	0x0042497c
  4187b0:	2000      	movs	r0, #0
  4187b2:	4b5b      	ldr	r3, [pc, #364]	; (418920 <calendar_init+0x78c>)
  4187b4:	4798      	blx	r3
  4187b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4187ba:	3050      	adds	r0, #80	; 0x50
  4187bc:	4b59      	ldr	r3, [pc, #356]	; (418924 <calendar_init+0x790>)
  4187be:	fb83 2300 	smull	r2, r3, r3, r0
  4187c2:	17c2      	asrs	r2, r0, #31
  4187c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4187c8:	b212      	sxth	r2, r2
  4187ca:	e5d6      	b.n	41837a <calendar_init+0x1e6>
  4187cc:	2000      	movs	r0, #0
  4187ce:	4b54      	ldr	r3, [pc, #336]	; (418920 <calendar_init+0x78c>)
  4187d0:	4798      	blx	r3
  4187d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4187d6:	0040      	lsls	r0, r0, #1
  4187d8:	3050      	adds	r0, #80	; 0x50
  4187da:	4b52      	ldr	r3, [pc, #328]	; (418924 <calendar_init+0x790>)
  4187dc:	fb83 2300 	smull	r2, r3, r3, r0
  4187e0:	17c2      	asrs	r2, r0, #31
  4187e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4187e6:	b212      	sxth	r2, r2
  4187e8:	e5c7      	b.n	41837a <calendar_init+0x1e6>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  4187ea:	2000      	movs	r0, #0
  4187ec:	4b4c      	ldr	r3, [pc, #304]	; (418920 <calendar_init+0x78c>)
  4187ee:	4798      	blx	r3
  4187f0:	3014      	adds	r0, #20
  4187f2:	0080      	lsls	r0, r0, #2
  4187f4:	4b4b      	ldr	r3, [pc, #300]	; (418924 <calendar_init+0x790>)
  4187f6:	fb83 2300 	smull	r2, r3, r3, r0
  4187fa:	17c2      	asrs	r2, r0, #31
  4187fc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418800:	b212      	sxth	r2, r2
  418802:	e5cf      	b.n	4183a4 <calendar_init+0x210>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  418804:	4b48      	ldr	r3, [pc, #288]	; (418928 <calendar_init+0x794>)
  418806:	881a      	ldrh	r2, [r3, #0]
  418808:	e5e6      	b.n	4183d8 <calendar_init+0x244>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  41880a:	2266      	movs	r2, #102	; 0x66
  41880c:	e5f9      	b.n	418402 <calendar_init+0x26e>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41880e:	4b46      	ldr	r3, [pc, #280]	; (418928 <calendar_init+0x794>)
  418810:	881a      	ldrh	r2, [r3, #0]
  418812:	e62a      	b.n	41846a <calendar_init+0x2d6>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  418814:	2000      	movs	r0, #0
  418816:	4b42      	ldr	r3, [pc, #264]	; (418920 <calendar_init+0x78c>)
  418818:	4798      	blx	r3
  41881a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41881e:	3050      	adds	r0, #80	; 0x50
  418820:	4b40      	ldr	r3, [pc, #256]	; (418924 <calendar_init+0x790>)
  418822:	fb83 2300 	smull	r2, r3, r3, r0
  418826:	17c2      	asrs	r2, r0, #31
  418828:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41882c:	b212      	sxth	r2, r2
  41882e:	e65a      	b.n	4184e6 <calendar_init+0x352>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418830:	2000      	movs	r0, #0
  418832:	4b3b      	ldr	r3, [pc, #236]	; (418920 <calendar_init+0x78c>)
  418834:	4798      	blx	r3
  418836:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41883a:	3050      	adds	r0, #80	; 0x50
  41883c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418840:	da01      	bge.n	418846 <calendar_init+0x6b2>
  418842:	2201      	movs	r2, #1
  418844:	e668      	b.n	418518 <calendar_init+0x384>
  418846:	2000      	movs	r0, #0
  418848:	4b35      	ldr	r3, [pc, #212]	; (418920 <calendar_init+0x78c>)
  41884a:	4798      	blx	r3
  41884c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418850:	3050      	adds	r0, #80	; 0x50
  418852:	4b34      	ldr	r3, [pc, #208]	; (418924 <calendar_init+0x790>)
  418854:	fb83 2300 	smull	r2, r3, r3, r0
  418858:	17c2      	asrs	r2, r0, #31
  41885a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41885e:	b212      	sxth	r2, r2
  418860:	e65a      	b.n	418518 <calendar_init+0x384>
  418862:	2000      	movs	r0, #0
  418864:	4b2e      	ldr	r3, [pc, #184]	; (418920 <calendar_init+0x78c>)
  418866:	4798      	blx	r3
  418868:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41886c:	0040      	lsls	r0, r0, #1
  41886e:	3050      	adds	r0, #80	; 0x50
  418870:	4b2c      	ldr	r3, [pc, #176]	; (418924 <calendar_init+0x790>)
  418872:	fb83 2300 	smull	r2, r3, r3, r0
  418876:	17c2      	asrs	r2, r0, #31
  418878:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41887c:	b212      	sxth	r2, r2
  41887e:	e64b      	b.n	418518 <calendar_init+0x384>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418880:	2000      	movs	r0, #0
  418882:	4b27      	ldr	r3, [pc, #156]	; (418920 <calendar_init+0x78c>)
  418884:	4798      	blx	r3
  418886:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41888a:	3050      	adds	r0, #80	; 0x50
  41888c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418890:	da01      	bge.n	418896 <calendar_init+0x702>
  418892:	2201      	movs	r2, #1
  418894:	e659      	b.n	41854a <calendar_init+0x3b6>
  418896:	2000      	movs	r0, #0
  418898:	4b21      	ldr	r3, [pc, #132]	; (418920 <calendar_init+0x78c>)
  41889a:	4798      	blx	r3
  41889c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4188a0:	3050      	adds	r0, #80	; 0x50
  4188a2:	4b20      	ldr	r3, [pc, #128]	; (418924 <calendar_init+0x790>)
  4188a4:	fb83 2300 	smull	r2, r3, r3, r0
  4188a8:	17c2      	asrs	r2, r0, #31
  4188aa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4188ae:	b212      	sxth	r2, r2
  4188b0:	e64b      	b.n	41854a <calendar_init+0x3b6>
  4188b2:	2000      	movs	r0, #0
  4188b4:	4b1a      	ldr	r3, [pc, #104]	; (418920 <calendar_init+0x78c>)
  4188b6:	4798      	blx	r3
  4188b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4188bc:	0040      	lsls	r0, r0, #1
  4188be:	3050      	adds	r0, #80	; 0x50
  4188c0:	4b18      	ldr	r3, [pc, #96]	; (418924 <calendar_init+0x790>)
  4188c2:	fb83 2300 	smull	r2, r3, r3, r0
  4188c6:	17c2      	asrs	r2, r0, #31
  4188c8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4188cc:	b212      	sxth	r2, r2
  4188ce:	e63c      	b.n	41854a <calendar_init+0x3b6>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  4188d0:	2000      	movs	r0, #0
  4188d2:	4b13      	ldr	r3, [pc, #76]	; (418920 <calendar_init+0x78c>)
  4188d4:	4798      	blx	r3
  4188d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4188da:	3050      	adds	r0, #80	; 0x50
  4188dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4188e0:	da01      	bge.n	4188e6 <calendar_init+0x752>
  4188e2:	2201      	movs	r2, #1
  4188e4:	e64a      	b.n	41857c <calendar_init+0x3e8>
  4188e6:	2000      	movs	r0, #0
  4188e8:	4b0d      	ldr	r3, [pc, #52]	; (418920 <calendar_init+0x78c>)
  4188ea:	4798      	blx	r3
  4188ec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4188f0:	3050      	adds	r0, #80	; 0x50
  4188f2:	4b0c      	ldr	r3, [pc, #48]	; (418924 <calendar_init+0x790>)
  4188f4:	fb83 2300 	smull	r2, r3, r3, r0
  4188f8:	17c2      	asrs	r2, r0, #31
  4188fa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4188fe:	b212      	sxth	r2, r2
  418900:	e63c      	b.n	41857c <calendar_init+0x3e8>
  418902:	2000      	movs	r0, #0
  418904:	4b06      	ldr	r3, [pc, #24]	; (418920 <calendar_init+0x78c>)
  418906:	4798      	blx	r3
  418908:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41890c:	0040      	lsls	r0, r0, #1
  41890e:	3050      	adds	r0, #80	; 0x50
  418910:	4b04      	ldr	r3, [pc, #16]	; (418924 <calendar_init+0x790>)
  418912:	fb83 2300 	smull	r2, r3, r3, r0
  418916:	17c2      	asrs	r2, r0, #31
  418918:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41891c:	b212      	sxth	r2, r2
  41891e:	e62d      	b.n	41857c <calendar_init+0x3e8>
  418920:	00413f95 	.word	0x00413f95
  418924:	66666667 	.word	0x66666667
  418928:	0042497c 	.word	0x0042497c

0041892c <cpicker_init>:
{
  41892c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cpicker_bg);
  41892e:	4c9a      	ldr	r4, [pc, #616]	; (418b98 <cpicker_init+0x26c>)
  418930:	6820      	ldr	r0, [r4, #0]
  418932:	303c      	adds	r0, #60	; 0x3c
  418934:	4b99      	ldr	r3, [pc, #612]	; (418b9c <cpicker_init+0x270>)
  418936:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  418938:	6824      	ldr	r4, [r4, #0]
  41893a:	343c      	adds	r4, #60	; 0x3c
  41893c:	2000      	movs	r0, #0
  41893e:	4b98      	ldr	r3, [pc, #608]	; (418ba0 <cpicker_init+0x274>)
  418940:	4798      	blx	r3
  418942:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418946:	0040      	lsls	r0, r0, #1
  418948:	3050      	adds	r0, #80	; 0x50
  41894a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41894e:	f280 80b6 	bge.w	418abe <cpicker_init+0x192>
  418952:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  418954:	21c0      	movs	r1, #192	; 0xc0
  418956:	4620      	mov	r0, r4
  418958:	4b92      	ldr	r3, [pc, #584]	; (418ba4 <cpicker_init+0x278>)
  41895a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41895c:	4c8e      	ldr	r4, [pc, #568]	; (418b98 <cpicker_init+0x26c>)
  41895e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418960:	22ff      	movs	r2, #255	; 0xff
  418962:	212c      	movs	r1, #44	; 0x2c
  418964:	303c      	adds	r0, #60	; 0x3c
  418966:	4b90      	ldr	r3, [pc, #576]	; (418ba8 <cpicker_init+0x27c>)
  418968:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
  41896a:	6820      	ldr	r0, [r4, #0]
  41896c:	303c      	adds	r0, #60	; 0x3c
  41896e:	4b8f      	ldr	r3, [pc, #572]	; (418bac <cpicker_init+0x280>)
  418970:	6a1b      	ldr	r3, [r3, #32]
  418972:	f013 0f02 	tst.w	r3, #2
  418976:	f000 80b1 	beq.w	418adc <cpicker_init+0x1b0>
  41897a:	f04f 0207 	mov.w	r2, #7
  41897e:	231d      	movs	r3, #29
  418980:	f363 02c7 	bfi	r2, r3, #3, #5
  418984:	231e      	movs	r3, #30
  418986:	f363 220c 	bfi	r2, r3, #8, #5
  41898a:	2303      	movs	r3, #3
  41898c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418990:	2129      	movs	r1, #41	; 0x29
  418992:	4b87      	ldr	r3, [pc, #540]	; (418bb0 <cpicker_init+0x284>)
  418994:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  418996:	4b80      	ldr	r3, [pc, #512]	; (418b98 <cpicker_init+0x26c>)
  418998:	681c      	ldr	r4, [r3, #0]
  41899a:	343c      	adds	r4, #60	; 0x3c
  41899c:	2000      	movs	r0, #0
  41899e:	4b80      	ldr	r3, [pc, #512]	; (418ba0 <cpicker_init+0x274>)
  4189a0:	4798      	blx	r3
  4189a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4189a6:	0080      	lsls	r0, r0, #2
  4189a8:	3050      	adds	r0, #80	; 0x50
  4189aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4189ae:	f280 80a3 	bge.w	418af8 <cpicker_init+0x1cc>
  4189b2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4189b4:	2114      	movs	r1, #20
  4189b6:	4620      	mov	r0, r4
  4189b8:	4e7a      	ldr	r6, [pc, #488]	; (418ba4 <cpicker_init+0x278>)
  4189ba:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4189bc:	4c76      	ldr	r4, [pc, #472]	; (418b98 <cpicker_init+0x26c>)
  4189be:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4189c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4189c4:	2101      	movs	r1, #1
  4189c6:	303c      	adds	r0, #60	; 0x3c
  4189c8:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
  4189ca:	6820      	ldr	r0, [r4, #0]
  4189cc:	3040      	adds	r0, #64	; 0x40
  4189ce:	4b73      	ldr	r3, [pc, #460]	; (418b9c <cpicker_init+0x270>)
  4189d0:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4189d2:	6820      	ldr	r0, [r4, #0]
  4189d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4189d8:	2101      	movs	r1, #1
  4189da:	3040      	adds	r0, #64	; 0x40
  4189dc:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  4189de:	6820      	ldr	r0, [r4, #0]
  4189e0:	4f74      	ldr	r7, [pc, #464]	; (418bb4 <cpicker_init+0x288>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4189e2:	883a      	ldrh	r2, [r7, #0]
  4189e4:	2129      	movs	r1, #41	; 0x29
  4189e6:	3040      	adds	r0, #64	; 0x40
  4189e8:	4d71      	ldr	r5, [pc, #452]	; (418bb0 <cpicker_init+0x284>)
  4189ea:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  4189ec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4189ee:	22ff      	movs	r2, #255	; 0xff
  4189f0:	212c      	movs	r1, #44	; 0x2c
  4189f2:	3040      	adds	r0, #64	; 0x40
  4189f4:	4b6c      	ldr	r3, [pc, #432]	; (418ba8 <cpicker_init+0x27c>)
  4189f6:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
  4189f8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  4189fa:	2202      	movs	r2, #2
  4189fc:	2130      	movs	r1, #48	; 0x30
  4189fe:	3040      	adds	r0, #64	; 0x40
  418a00:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
  418a02:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  418a04:	88ba      	ldrh	r2, [r7, #4]
  418a06:	2139      	movs	r1, #57	; 0x39
  418a08:	3040      	adds	r0, #64	; 0x40
  418a0a:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
  418a0c:	6820      	ldr	r0, [r4, #0]
  418a0e:	4e67      	ldr	r6, [pc, #412]	; (418bac <cpicker_init+0x280>)
  418a10:	89b2      	ldrh	r2, [r6, #12]
  418a12:	f240 2139 	movw	r1, #569	; 0x239
  418a16:	3040      	adds	r0, #64	; 0x40
  418a18:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
  418a1a:	6820      	ldr	r0, [r4, #0]
  418a1c:	89f2      	ldrh	r2, [r6, #14]
  418a1e:	f240 4139 	movw	r1, #1081	; 0x439
  418a22:	3040      	adds	r0, #64	; 0x40
  418a24:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418a26:	6824      	ldr	r4, [r4, #0]
  418a28:	3440      	adds	r4, #64	; 0x40
  418a2a:	2000      	movs	r0, #0
  418a2c:	4b5c      	ldr	r3, [pc, #368]	; (418ba0 <cpicker_init+0x274>)
  418a2e:	4798      	blx	r3
  418a30:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  418a34:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  418a38:	3050      	adds	r0, #80	; 0x50
  418a3a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a3e:	da6a      	bge.n	418b16 <cpicker_init+0x1ea>
  418a40:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418a42:	2112      	movs	r1, #18
  418a44:	4620      	mov	r0, r4
  418a46:	4b57      	ldr	r3, [pc, #348]	; (418ba4 <cpicker_init+0x278>)
  418a48:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418a4a:	4b53      	ldr	r3, [pc, #332]	; (418b98 <cpicker_init+0x26c>)
  418a4c:	681c      	ldr	r4, [r3, #0]
  418a4e:	3440      	adds	r4, #64	; 0x40
  418a50:	2000      	movs	r0, #0
  418a52:	4b53      	ldr	r3, [pc, #332]	; (418ba0 <cpicker_init+0x274>)
  418a54:	4798      	blx	r3
  418a56:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  418a5a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  418a5e:	3050      	adds	r0, #80	; 0x50
  418a60:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a64:	da67      	bge.n	418b36 <cpicker_init+0x20a>
  418a66:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418a68:	2113      	movs	r1, #19
  418a6a:	4620      	mov	r0, r4
  418a6c:	4b4d      	ldr	r3, [pc, #308]	; (418ba4 <cpicker_init+0x278>)
  418a6e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418a70:	4b49      	ldr	r3, [pc, #292]	; (418b98 <cpicker_init+0x26c>)
  418a72:	681c      	ldr	r4, [r3, #0]
  418a74:	3440      	adds	r4, #64	; 0x40
  418a76:	2000      	movs	r0, #0
  418a78:	4b49      	ldr	r3, [pc, #292]	; (418ba0 <cpicker_init+0x274>)
  418a7a:	4798      	blx	r3
  418a7c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  418a80:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  418a84:	3050      	adds	r0, #80	; 0x50
  418a86:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a8a:	da64      	bge.n	418b56 <cpicker_init+0x22a>
  418a8c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418a8e:	2110      	movs	r1, #16
  418a90:	4620      	mov	r0, r4
  418a92:	4b44      	ldr	r3, [pc, #272]	; (418ba4 <cpicker_init+0x278>)
  418a94:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418a96:	4b40      	ldr	r3, [pc, #256]	; (418b98 <cpicker_init+0x26c>)
  418a98:	681c      	ldr	r4, [r3, #0]
  418a9a:	3440      	adds	r4, #64	; 0x40
  418a9c:	2000      	movs	r0, #0
  418a9e:	4b40      	ldr	r3, [pc, #256]	; (418ba0 <cpicker_init+0x274>)
  418aa0:	4798      	blx	r3
  418aa2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  418aa6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  418aaa:	3050      	adds	r0, #80	; 0x50
  418aac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418ab0:	da61      	bge.n	418b76 <cpicker_init+0x24a>
  418ab2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418ab4:	2111      	movs	r1, #17
  418ab6:	4620      	mov	r0, r4
  418ab8:	4b3a      	ldr	r3, [pc, #232]	; (418ba4 <cpicker_init+0x278>)
  418aba:	4798      	blx	r3
  418abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  418abe:	2000      	movs	r0, #0
  418ac0:	4b37      	ldr	r3, [pc, #220]	; (418ba0 <cpicker_init+0x274>)
  418ac2:	4798      	blx	r3
  418ac4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418ac8:	0040      	lsls	r0, r0, #1
  418aca:	3050      	adds	r0, #80	; 0x50
  418acc:	4b3a      	ldr	r3, [pc, #232]	; (418bb8 <cpicker_init+0x28c>)
  418ace:	fb83 2300 	smull	r2, r3, r3, r0
  418ad2:	17c2      	asrs	r2, r0, #31
  418ad4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418ad8:	b212      	sxth	r2, r2
  418ada:	e73b      	b.n	418954 <cpicker_init+0x28>
  418adc:	2302      	movs	r3, #2
  418ade:	f04f 0200 	mov.w	r2, #0
  418ae2:	f363 0202 	bfi	r2, r3, #0, #3
  418ae6:	2108      	movs	r1, #8
  418ae8:	f361 02c7 	bfi	r2, r1, #3, #5
  418aec:	210b      	movs	r1, #11
  418aee:	f361 220c 	bfi	r2, r1, #8, #5
  418af2:	f363 324f 	bfi	r2, r3, #13, #3
  418af6:	e74b      	b.n	418990 <cpicker_init+0x64>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  418af8:	2000      	movs	r0, #0
  418afa:	4b29      	ldr	r3, [pc, #164]	; (418ba0 <cpicker_init+0x274>)
  418afc:	4798      	blx	r3
  418afe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418b02:	0080      	lsls	r0, r0, #2
  418b04:	3050      	adds	r0, #80	; 0x50
  418b06:	4b2c      	ldr	r3, [pc, #176]	; (418bb8 <cpicker_init+0x28c>)
  418b08:	fb83 2300 	smull	r2, r3, r3, r0
  418b0c:	17c2      	asrs	r2, r0, #31
  418b0e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b12:	b212      	sxth	r2, r2
  418b14:	e74e      	b.n	4189b4 <cpicker_init+0x88>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418b16:	2000      	movs	r0, #0
  418b18:	4b21      	ldr	r3, [pc, #132]	; (418ba0 <cpicker_init+0x274>)
  418b1a:	4798      	blx	r3
  418b1c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  418b20:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  418b24:	3050      	adds	r0, #80	; 0x50
  418b26:	4b24      	ldr	r3, [pc, #144]	; (418bb8 <cpicker_init+0x28c>)
  418b28:	fb83 2300 	smull	r2, r3, r3, r0
  418b2c:	17c2      	asrs	r2, r0, #31
  418b2e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b32:	b212      	sxth	r2, r2
  418b34:	e785      	b.n	418a42 <cpicker_init+0x116>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418b36:	2000      	movs	r0, #0
  418b38:	4b19      	ldr	r3, [pc, #100]	; (418ba0 <cpicker_init+0x274>)
  418b3a:	4798      	blx	r3
  418b3c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  418b40:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  418b44:	3050      	adds	r0, #80	; 0x50
  418b46:	4b1c      	ldr	r3, [pc, #112]	; (418bb8 <cpicker_init+0x28c>)
  418b48:	fb83 2300 	smull	r2, r3, r3, r0
  418b4c:	17c2      	asrs	r2, r0, #31
  418b4e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b52:	b212      	sxth	r2, r2
  418b54:	e788      	b.n	418a68 <cpicker_init+0x13c>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418b56:	2000      	movs	r0, #0
  418b58:	4b11      	ldr	r3, [pc, #68]	; (418ba0 <cpicker_init+0x274>)
  418b5a:	4798      	blx	r3
  418b5c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  418b60:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  418b64:	3050      	adds	r0, #80	; 0x50
  418b66:	4b14      	ldr	r3, [pc, #80]	; (418bb8 <cpicker_init+0x28c>)
  418b68:	fb83 2300 	smull	r2, r3, r3, r0
  418b6c:	17c2      	asrs	r2, r0, #31
  418b6e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b72:	b212      	sxth	r2, r2
  418b74:	e78b      	b.n	418a8e <cpicker_init+0x162>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418b76:	2000      	movs	r0, #0
  418b78:	4b09      	ldr	r3, [pc, #36]	; (418ba0 <cpicker_init+0x274>)
  418b7a:	4798      	blx	r3
  418b7c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  418b80:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  418b84:	3050      	adds	r0, #80	; 0x50
  418b86:	4b0c      	ldr	r3, [pc, #48]	; (418bb8 <cpicker_init+0x28c>)
  418b88:	fb83 2300 	smull	r2, r3, r3, r0
  418b8c:	17c2      	asrs	r2, r0, #31
  418b8e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b92:	b212      	sxth	r2, r2
  418b94:	e78e      	b.n	418ab4 <cpicker_init+0x188>
  418b96:	bf00      	nop
  418b98:	20414798 	.word	0x20414798
  418b9c:	0041704d 	.word	0x0041704d
  418ba0:	00413f95 	.word	0x00413f95
  418ba4:	004095c1 	.word	0x004095c1
  418ba8:	004098e1 	.word	0x004098e1
  418bac:	2041479c 	.word	0x2041479c
  418bb0:	00409751 	.word	0x00409751
  418bb4:	0042497c 	.word	0x0042497c
  418bb8:	66666667 	.word	0x66666667

00418bbc <checkbox_init>:
{
  418bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cb_bg);
  418bbe:	4cb5      	ldr	r4, [pc, #724]	; (418e94 <checkbox_init+0x2d8>)
  418bc0:	6820      	ldr	r0, [r4, #0]
  418bc2:	3050      	adds	r0, #80	; 0x50
  418bc4:	4bb4      	ldr	r3, [pc, #720]	; (418e98 <checkbox_init+0x2dc>)
  418bc6:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  418bc8:	6824      	ldr	r4, [r4, #0]
  418bca:	3450      	adds	r4, #80	; 0x50
  418bcc:	2000      	movs	r0, #0
  418bce:	4bb3      	ldr	r3, [pc, #716]	; (418e9c <checkbox_init+0x2e0>)
  418bd0:	4798      	blx	r3
  418bd2:	3014      	adds	r0, #20
  418bd4:	0080      	lsls	r0, r0, #2
  418bd6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418bda:	f280 80e1 	bge.w	418da0 <checkbox_init+0x1e4>
  418bde:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418be0:	2101      	movs	r1, #1
  418be2:	4620      	mov	r0, r4
  418be4:	4bae      	ldr	r3, [pc, #696]	; (418ea0 <checkbox_init+0x2e4>)
  418be6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418be8:	4baa      	ldr	r3, [pc, #680]	; (418e94 <checkbox_init+0x2d8>)
  418bea:	681c      	ldr	r4, [r3, #0]
  418bec:	3450      	adds	r4, #80	; 0x50
  418bee:	2000      	movs	r0, #0
  418bf0:	4baa      	ldr	r3, [pc, #680]	; (418e9c <checkbox_init+0x2e0>)
  418bf2:	4798      	blx	r3
  418bf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418bf8:	0043      	lsls	r3, r0, #1
  418bfa:	3350      	adds	r3, #80	; 0x50
  418bfc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  418c00:	f280 80db 	bge.w	418dba <checkbox_init+0x1fe>
  418c04:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  418c06:	2114      	movs	r1, #20
  418c08:	4620      	mov	r0, r4
  418c0a:	4ba5      	ldr	r3, [pc, #660]	; (418ea0 <checkbox_init+0x2e4>)
  418c0c:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
  418c0e:	4ca1      	ldr	r4, [pc, #644]	; (418e94 <checkbox_init+0x2d8>)
  418c10:	6820      	ldr	r0, [r4, #0]
  418c12:	4ea4      	ldr	r6, [pc, #656]	; (418ea4 <checkbox_init+0x2e8>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  418c14:	89b2      	ldrh	r2, [r6, #12]
  418c16:	2149      	movs	r1, #73	; 0x49
  418c18:	3050      	adds	r0, #80	; 0x50
  418c1a:	4ba3      	ldr	r3, [pc, #652]	; (418ea8 <checkbox_init+0x2ec>)
  418c1c:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  418c1e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  418c20:	2200      	movs	r2, #0
  418c22:	214c      	movs	r1, #76	; 0x4c
  418c24:	3050      	adds	r0, #80	; 0x50
  418c26:	4da1      	ldr	r5, [pc, #644]	; (418eac <checkbox_init+0x2f0>)
  418c28:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
  418c2a:	6820      	ldr	r0, [r4, #0]
  418c2c:	227f      	movs	r2, #127	; 0x7f
  418c2e:	f44f 7113 	mov.w	r1, #588	; 0x24c
  418c32:	3050      	adds	r0, #80	; 0x50
  418c34:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  418c36:	6824      	ldr	r4, [r4, #0]
  418c38:	3450      	adds	r4, #80	; 0x50
  418c3a:	6a33      	ldr	r3, [r6, #32]
  418c3c:	f013 0f20 	tst.w	r3, #32
  418c40:	f000 80ca 	beq.w	418dd8 <checkbox_init+0x21c>
  418c44:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  418c46:	2140      	movs	r1, #64	; 0x40
  418c48:	4620      	mov	r0, r4
  418c4a:	4b95      	ldr	r3, [pc, #596]	; (418ea0 <checkbox_init+0x2e4>)
  418c4c:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418c4e:	4b91      	ldr	r3, [pc, #580]	; (418e94 <checkbox_init+0x2d8>)
  418c50:	681c      	ldr	r4, [r3, #0]
  418c52:	3450      	adds	r4, #80	; 0x50
  418c54:	2000      	movs	r0, #0
  418c56:	4b91      	ldr	r3, [pc, #580]	; (418e9c <checkbox_init+0x2e0>)
  418c58:	4798      	blx	r3
  418c5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418c5e:	0043      	lsls	r3, r0, #1
  418c60:	3350      	adds	r3, #80	; 0x50
  418c62:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  418c66:	f280 80ce 	bge.w	418e06 <checkbox_init+0x24a>
  418c6a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  418c6c:	2141      	movs	r1, #65	; 0x41
  418c6e:	4620      	mov	r0, r4
  418c70:	4d8b      	ldr	r5, [pc, #556]	; (418ea0 <checkbox_init+0x2e4>)
  418c72:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  418c74:	4c87      	ldr	r4, [pc, #540]	; (418e94 <checkbox_init+0x2d8>)
  418c76:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  418c78:	2200      	movs	r2, #0
  418c7a:	21b0      	movs	r1, #176	; 0xb0
  418c7c:	3050      	adds	r0, #80	; 0x50
  418c7e:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  418c80:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  418c82:	224c      	movs	r2, #76	; 0x4c
  418c84:	21b7      	movs	r1, #183	; 0xb7
  418c86:	3050      	adds	r0, #80	; 0x50
  418c88:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
  418c8a:	6820      	ldr	r0, [r4, #0]
  418c8c:	3054      	adds	r0, #84	; 0x54
  418c8e:	4b82      	ldr	r3, [pc, #520]	; (418e98 <checkbox_init+0x2dc>)
  418c90:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
  418c92:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  418c94:	2200      	movs	r2, #0
  418c96:	f44f 7113 	mov.w	r1, #588	; 0x24c
  418c9a:	3054      	adds	r0, #84	; 0x54
  418c9c:	4b83      	ldr	r3, [pc, #524]	; (418eac <checkbox_init+0x2f0>)
  418c9e:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  418ca0:	6824      	ldr	r4, [r4, #0]
  418ca2:	3454      	adds	r4, #84	; 0x54
  418ca4:	2000      	movs	r0, #0
  418ca6:	4b7d      	ldr	r3, [pc, #500]	; (418e9c <checkbox_init+0x2e0>)
  418ca8:	4798      	blx	r3
  418caa:	3014      	adds	r0, #20
  418cac:	0080      	lsls	r0, r0, #2
  418cae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418cb2:	f280 80b7 	bge.w	418e24 <checkbox_init+0x268>
  418cb6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418cb8:	2101      	movs	r1, #1
  418cba:	4620      	mov	r0, r4
  418cbc:	4e78      	ldr	r6, [pc, #480]	; (418ea0 <checkbox_init+0x2e4>)
  418cbe:	47b0      	blx	r6
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
  418cc0:	4c74      	ldr	r4, [pc, #464]	; (418e94 <checkbox_init+0x2d8>)
  418cc2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  418cc4:	4a7a      	ldr	r2, [pc, #488]	; (418eb0 <checkbox_init+0x2f4>)
  418cc6:	f44f 71b7 	mov.w	r1, #366	; 0x16e
  418cca:	3054      	adds	r0, #84	; 0x54
  418ccc:	4d79      	ldr	r5, [pc, #484]	; (418eb4 <checkbox_init+0x2f8>)
  418cce:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
  418cd0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  418cd2:	4b79      	ldr	r3, [pc, #484]	; (418eb8 <checkbox_init+0x2fc>)
  418cd4:	881a      	ldrh	r2, [r3, #0]
  418cd6:	f240 1169 	movw	r1, #361	; 0x169
  418cda:	3054      	adds	r0, #84	; 0x54
  418cdc:	4b72      	ldr	r3, [pc, #456]	; (418ea8 <checkbox_init+0x2ec>)
  418cde:	4798      	blx	r3
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  418ce0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  418ce2:	2200      	movs	r2, #0
  418ce4:	216c      	movs	r1, #108	; 0x6c
  418ce6:	3054      	adds	r0, #84	; 0x54
  418ce8:	4f70      	ldr	r7, [pc, #448]	; (418eac <checkbox_init+0x2f0>)
  418cea:	47b8      	blx	r7
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
  418cec:	6820      	ldr	r0, [r4, #0]
  418cee:	22ff      	movs	r2, #255	; 0xff
  418cf0:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  418cf4:	3054      	adds	r0, #84	; 0x54
  418cf6:	47b8      	blx	r7
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
  418cf8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  418cfa:	226c      	movs	r2, #108	; 0x6c
  418cfc:	21b4      	movs	r1, #180	; 0xb4
  418cfe:	3054      	adds	r0, #84	; 0x54
  418d00:	47b0      	blx	r6
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
  418d02:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  418d04:	4b67      	ldr	r3, [pc, #412]	; (418ea4 <checkbox_init+0x2e8>)
  418d06:	691a      	ldr	r2, [r3, #16]
  418d08:	f248 118e 	movw	r1, #33166	; 0x818e
  418d0c:	3054      	adds	r0, #84	; 0x54
  418d0e:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  418d10:	6824      	ldr	r4, [r4, #0]
  418d12:	3454      	adds	r4, #84	; 0x54
  418d14:	2000      	movs	r0, #0
  418d16:	4b61      	ldr	r3, [pc, #388]	; (418e9c <checkbox_init+0x2e0>)
  418d18:	4798      	blx	r3
  418d1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418d1e:	3050      	adds	r0, #80	; 0x50
  418d20:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d24:	f280 808b 	bge.w	418e3e <checkbox_init+0x282>
  418d28:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418d2a:	2112      	movs	r1, #18
  418d2c:	4620      	mov	r0, r4
  418d2e:	4b5c      	ldr	r3, [pc, #368]	; (418ea0 <checkbox_init+0x2e4>)
  418d30:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  418d32:	4b58      	ldr	r3, [pc, #352]	; (418e94 <checkbox_init+0x2d8>)
  418d34:	681c      	ldr	r4, [r3, #0]
  418d36:	3454      	adds	r4, #84	; 0x54
  418d38:	2000      	movs	r0, #0
  418d3a:	4b58      	ldr	r3, [pc, #352]	; (418e9c <checkbox_init+0x2e0>)
  418d3c:	4798      	blx	r3
  418d3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418d42:	3050      	adds	r0, #80	; 0x50
  418d44:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d48:	f280 8087 	bge.w	418e5a <checkbox_init+0x29e>
  418d4c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418d4e:	2113      	movs	r1, #19
  418d50:	4620      	mov	r0, r4
  418d52:	4b53      	ldr	r3, [pc, #332]	; (418ea0 <checkbox_init+0x2e4>)
  418d54:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  418d56:	4b4f      	ldr	r3, [pc, #316]	; (418e94 <checkbox_init+0x2d8>)
  418d58:	681c      	ldr	r4, [r3, #0]
  418d5a:	3454      	adds	r4, #84	; 0x54
  418d5c:	2000      	movs	r0, #0
  418d5e:	4b4f      	ldr	r3, [pc, #316]	; (418e9c <checkbox_init+0x2e0>)
  418d60:	4798      	blx	r3
  418d62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418d66:	3050      	adds	r0, #80	; 0x50
  418d68:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d6c:	f280 8083 	bge.w	418e76 <checkbox_init+0x2ba>
  418d70:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418d72:	2110      	movs	r1, #16
  418d74:	4620      	mov	r0, r4
  418d76:	4b4a      	ldr	r3, [pc, #296]	; (418ea0 <checkbox_init+0x2e4>)
  418d78:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  418d7a:	4b46      	ldr	r3, [pc, #280]	; (418e94 <checkbox_init+0x2d8>)
  418d7c:	681c      	ldr	r4, [r3, #0]
  418d7e:	3454      	adds	r4, #84	; 0x54
  418d80:	2000      	movs	r0, #0
  418d82:	4b46      	ldr	r3, [pc, #280]	; (418e9c <checkbox_init+0x2e0>)
  418d84:	4798      	blx	r3
  418d86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418d8a:	3050      	adds	r0, #80	; 0x50
  418d8c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d90:	f280 8096 	bge.w	418ec0 <checkbox_init+0x304>
  418d94:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418d96:	2111      	movs	r1, #17
  418d98:	4620      	mov	r0, r4
  418d9a:	4b41      	ldr	r3, [pc, #260]	; (418ea0 <checkbox_init+0x2e4>)
  418d9c:	4798      	blx	r3
  418d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  418da0:	2000      	movs	r0, #0
  418da2:	4b3e      	ldr	r3, [pc, #248]	; (418e9c <checkbox_init+0x2e0>)
  418da4:	4798      	blx	r3
  418da6:	3014      	adds	r0, #20
  418da8:	0080      	lsls	r0, r0, #2
  418daa:	4b44      	ldr	r3, [pc, #272]	; (418ebc <checkbox_init+0x300>)
  418dac:	fb83 2300 	smull	r2, r3, r3, r0
  418db0:	17c2      	asrs	r2, r0, #31
  418db2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418db6:	b212      	sxth	r2, r2
  418db8:	e712      	b.n	418be0 <checkbox_init+0x24>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418dba:	2000      	movs	r0, #0
  418dbc:	4b37      	ldr	r3, [pc, #220]	; (418e9c <checkbox_init+0x2e0>)
  418dbe:	4798      	blx	r3
  418dc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418dc4:	0043      	lsls	r3, r0, #1
  418dc6:	3350      	adds	r3, #80	; 0x50
  418dc8:	493c      	ldr	r1, [pc, #240]	; (418ebc <checkbox_init+0x300>)
  418dca:	fb81 2103 	smull	r2, r1, r1, r3
  418dce:	17da      	asrs	r2, r3, #31
  418dd0:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  418dd4:	b212      	sxth	r2, r2
  418dd6:	e716      	b.n	418c06 <checkbox_init+0x4a>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  418dd8:	2000      	movs	r0, #0
  418dda:	4b30      	ldr	r3, [pc, #192]	; (418e9c <checkbox_init+0x2e0>)
  418ddc:	4798      	blx	r3
  418dde:	3028      	adds	r0, #40	; 0x28
  418de0:	0040      	lsls	r0, r0, #1
  418de2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418de6:	da01      	bge.n	418dec <checkbox_init+0x230>
  418de8:	2201      	movs	r2, #1
  418dea:	e72c      	b.n	418c46 <checkbox_init+0x8a>
  418dec:	2000      	movs	r0, #0
  418dee:	4b2b      	ldr	r3, [pc, #172]	; (418e9c <checkbox_init+0x2e0>)
  418df0:	4798      	blx	r3
  418df2:	3028      	adds	r0, #40	; 0x28
  418df4:	0040      	lsls	r0, r0, #1
  418df6:	4b31      	ldr	r3, [pc, #196]	; (418ebc <checkbox_init+0x300>)
  418df8:	fb83 2300 	smull	r2, r3, r3, r0
  418dfc:	17c2      	asrs	r2, r0, #31
  418dfe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e02:	b212      	sxth	r2, r2
  418e04:	e71f      	b.n	418c46 <checkbox_init+0x8a>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418e06:	2000      	movs	r0, #0
  418e08:	4b24      	ldr	r3, [pc, #144]	; (418e9c <checkbox_init+0x2e0>)
  418e0a:	4798      	blx	r3
  418e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418e10:	0043      	lsls	r3, r0, #1
  418e12:	3350      	adds	r3, #80	; 0x50
  418e14:	4929      	ldr	r1, [pc, #164]	; (418ebc <checkbox_init+0x300>)
  418e16:	fb81 2103 	smull	r2, r1, r1, r3
  418e1a:	17da      	asrs	r2, r3, #31
  418e1c:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  418e20:	b212      	sxth	r2, r2
  418e22:	e723      	b.n	418c6c <checkbox_init+0xb0>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  418e24:	2000      	movs	r0, #0
  418e26:	4b1d      	ldr	r3, [pc, #116]	; (418e9c <checkbox_init+0x2e0>)
  418e28:	4798      	blx	r3
  418e2a:	3014      	adds	r0, #20
  418e2c:	0080      	lsls	r0, r0, #2
  418e2e:	4b23      	ldr	r3, [pc, #140]	; (418ebc <checkbox_init+0x300>)
  418e30:	fb83 2300 	smull	r2, r3, r3, r0
  418e34:	17c2      	asrs	r2, r0, #31
  418e36:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e3a:	b212      	sxth	r2, r2
  418e3c:	e73c      	b.n	418cb8 <checkbox_init+0xfc>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  418e3e:	2000      	movs	r0, #0
  418e40:	4b16      	ldr	r3, [pc, #88]	; (418e9c <checkbox_init+0x2e0>)
  418e42:	4798      	blx	r3
  418e44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418e48:	3050      	adds	r0, #80	; 0x50
  418e4a:	4b1c      	ldr	r3, [pc, #112]	; (418ebc <checkbox_init+0x300>)
  418e4c:	fb83 2300 	smull	r2, r3, r3, r0
  418e50:	17c2      	asrs	r2, r0, #31
  418e52:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e56:	b212      	sxth	r2, r2
  418e58:	e767      	b.n	418d2a <checkbox_init+0x16e>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  418e5a:	2000      	movs	r0, #0
  418e5c:	4b0f      	ldr	r3, [pc, #60]	; (418e9c <checkbox_init+0x2e0>)
  418e5e:	4798      	blx	r3
  418e60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418e64:	3050      	adds	r0, #80	; 0x50
  418e66:	4b15      	ldr	r3, [pc, #84]	; (418ebc <checkbox_init+0x300>)
  418e68:	fb83 2300 	smull	r2, r3, r3, r0
  418e6c:	17c2      	asrs	r2, r0, #31
  418e6e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e72:	b212      	sxth	r2, r2
  418e74:	e76b      	b.n	418d4e <checkbox_init+0x192>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  418e76:	2000      	movs	r0, #0
  418e78:	4b08      	ldr	r3, [pc, #32]	; (418e9c <checkbox_init+0x2e0>)
  418e7a:	4798      	blx	r3
  418e7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418e80:	3050      	adds	r0, #80	; 0x50
  418e82:	4b0e      	ldr	r3, [pc, #56]	; (418ebc <checkbox_init+0x300>)
  418e84:	fb83 2300 	smull	r2, r3, r3, r0
  418e88:	17c2      	asrs	r2, r0, #31
  418e8a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e8e:	b212      	sxth	r2, r2
  418e90:	e76f      	b.n	418d72 <checkbox_init+0x1b6>
  418e92:	bf00      	nop
  418e94:	20414798 	.word	0x20414798
  418e98:	0041704d 	.word	0x0041704d
  418e9c:	00413f95 	.word	0x00413f95
  418ea0:	004095c1 	.word	0x004095c1
  418ea4:	2041479c 	.word	0x2041479c
  418ea8:	00409751 	.word	0x00409751
  418eac:	004098e1 	.word	0x004098e1
  418eb0:	00424988 	.word	0x00424988
  418eb4:	00409a71 	.word	0x00409a71
  418eb8:	0042497c 	.word	0x0042497c
  418ebc:	66666667 	.word	0x66666667
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  418ec0:	2000      	movs	r0, #0
  418ec2:	4b06      	ldr	r3, [pc, #24]	; (418edc <checkbox_init+0x320>)
  418ec4:	4798      	blx	r3
  418ec6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418eca:	3050      	adds	r0, #80	; 0x50
  418ecc:	4b04      	ldr	r3, [pc, #16]	; (418ee0 <checkbox_init+0x324>)
  418ece:	fb83 2300 	smull	r2, r3, r3, r0
  418ed2:	17c2      	asrs	r2, r0, #31
  418ed4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418ed8:	b212      	sxth	r2, r2
  418eda:	e75c      	b.n	418d96 <checkbox_init+0x1da>
  418edc:	00413f95 	.word	0x00413f95
  418ee0:	66666667 	.word	0x66666667

00418ee4 <keyboard_init>:
{
  418ee4:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->kb_bg);
  418ee6:	4c76      	ldr	r4, [pc, #472]	; (4190c0 <keyboard_init+0x1dc>)
  418ee8:	6820      	ldr	r0, [r4, #0]
  418eea:	306c      	adds	r0, #108	; 0x6c
  418eec:	4b75      	ldr	r3, [pc, #468]	; (4190c4 <keyboard_init+0x1e0>)
  418eee:	4798      	blx	r3
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
  418ef0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418ef2:	2200      	movs	r2, #0
  418ef4:	2101      	movs	r1, #1
  418ef6:	306c      	adds	r0, #108	; 0x6c
  418ef8:	4b73      	ldr	r3, [pc, #460]	; (4190c8 <keyboard_init+0x1e4>)
  418efa:	4798      	blx	r3
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  418efc:	6824      	ldr	r4, [r4, #0]
  418efe:	346c      	adds	r4, #108	; 0x6c
  418f00:	2000      	movs	r0, #0
  418f02:	4b72      	ldr	r3, [pc, #456]	; (4190cc <keyboard_init+0x1e8>)
  418f04:	4798      	blx	r3
  418f06:	3014      	adds	r0, #20
  418f08:	0080      	lsls	r0, r0, #2
  418f0a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f0e:	f280 8081 	bge.w	419014 <keyboard_init+0x130>
  418f12:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  418f14:	2130      	movs	r1, #48	; 0x30
  418f16:	4620      	mov	r0, r4
  418f18:	4d6b      	ldr	r5, [pc, #428]	; (4190c8 <keyboard_init+0x1e4>)
  418f1a:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
  418f1c:	4c68      	ldr	r4, [pc, #416]	; (4190c0 <keyboard_init+0x1dc>)
  418f1e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  418f20:	2202      	movs	r2, #2
  418f22:	2131      	movs	r1, #49	; 0x31
  418f24:	306c      	adds	r0, #108	; 0x6c
  418f26:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  418f28:	6820      	ldr	r0, [r4, #0]
  418f2a:	306c      	adds	r0, #108	; 0x6c
  418f2c:	4b68      	ldr	r3, [pc, #416]	; (4190d0 <keyboard_init+0x1ec>)
  418f2e:	6a1b      	ldr	r3, [r3, #32]
  418f30:	f013 0f02 	tst.w	r3, #2
  418f34:	d07b      	beq.n	41902e <keyboard_init+0x14a>
  418f36:	f04f 0200 	mov.w	r2, #0
  418f3a:	2301      	movs	r3, #1
  418f3c:	f363 0202 	bfi	r2, r3, #0, #3
  418f40:	2307      	movs	r3, #7
  418f42:	f363 02c7 	bfi	r2, r3, #3, #5
  418f46:	2308      	movs	r3, #8
  418f48:	f363 220c 	bfi	r2, r3, #8, #5
  418f4c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  418f50:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  418f54:	2139      	movs	r1, #57	; 0x39
  418f56:	4d5f      	ldr	r5, [pc, #380]	; (4190d4 <keyboard_init+0x1f0>)
  418f58:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
  418f5a:	4c59      	ldr	r4, [pc, #356]	; (4190c0 <keyboard_init+0x1dc>)
  418f5c:	6820      	ldr	r0, [r4, #0]
  418f5e:	4b5c      	ldr	r3, [pc, #368]	; (4190d0 <keyboard_init+0x1ec>)
  418f60:	89da      	ldrh	r2, [r3, #14]
  418f62:	f240 4139 	movw	r1, #1081	; 0x439
  418f66:	306c      	adds	r0, #108	; 0x6c
  418f68:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  418f6a:	6824      	ldr	r4, [r4, #0]
  418f6c:	346c      	adds	r4, #108	; 0x6c
  418f6e:	2000      	movs	r0, #0
  418f70:	4b56      	ldr	r3, [pc, #344]	; (4190cc <keyboard_init+0x1e8>)
  418f72:	4798      	blx	r3
  418f74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418f78:	3050      	adds	r0, #80	; 0x50
  418f7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f7e:	da59      	bge.n	419034 <keyboard_init+0x150>
  418f80:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418f82:	2112      	movs	r1, #18
  418f84:	4620      	mov	r0, r4
  418f86:	4b50      	ldr	r3, [pc, #320]	; (4190c8 <keyboard_init+0x1e4>)
  418f88:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  418f8a:	4b4d      	ldr	r3, [pc, #308]	; (4190c0 <keyboard_init+0x1dc>)
  418f8c:	681c      	ldr	r4, [r3, #0]
  418f8e:	346c      	adds	r4, #108	; 0x6c
  418f90:	2000      	movs	r0, #0
  418f92:	4b4e      	ldr	r3, [pc, #312]	; (4190cc <keyboard_init+0x1e8>)
  418f94:	4798      	blx	r3
  418f96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418f9a:	3050      	adds	r0, #80	; 0x50
  418f9c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418fa0:	da56      	bge.n	419050 <keyboard_init+0x16c>
  418fa2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418fa4:	2113      	movs	r1, #19
  418fa6:	4620      	mov	r0, r4
  418fa8:	4b47      	ldr	r3, [pc, #284]	; (4190c8 <keyboard_init+0x1e4>)
  418faa:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  418fac:	4b44      	ldr	r3, [pc, #272]	; (4190c0 <keyboard_init+0x1dc>)
  418fae:	681c      	ldr	r4, [r3, #0]
  418fb0:	346c      	adds	r4, #108	; 0x6c
  418fb2:	2000      	movs	r0, #0
  418fb4:	4b45      	ldr	r3, [pc, #276]	; (4190cc <keyboard_init+0x1e8>)
  418fb6:	4798      	blx	r3
  418fb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418fbc:	3050      	adds	r0, #80	; 0x50
  418fbe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418fc2:	da53      	bge.n	41906c <keyboard_init+0x188>
  418fc4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418fc6:	2110      	movs	r1, #16
  418fc8:	4620      	mov	r0, r4
  418fca:	4b3f      	ldr	r3, [pc, #252]	; (4190c8 <keyboard_init+0x1e4>)
  418fcc:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  418fce:	4b3c      	ldr	r3, [pc, #240]	; (4190c0 <keyboard_init+0x1dc>)
  418fd0:	681c      	ldr	r4, [r3, #0]
  418fd2:	346c      	adds	r4, #108	; 0x6c
  418fd4:	2000      	movs	r0, #0
  418fd6:	4b3d      	ldr	r3, [pc, #244]	; (4190cc <keyboard_init+0x1e8>)
  418fd8:	4798      	blx	r3
  418fda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418fde:	3050      	adds	r0, #80	; 0x50
  418fe0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418fe4:	da50      	bge.n	419088 <keyboard_init+0x1a4>
  418fe6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418fe8:	2111      	movs	r1, #17
  418fea:	4620      	mov	r0, r4
  418fec:	4b36      	ldr	r3, [pc, #216]	; (4190c8 <keyboard_init+0x1e4>)
  418fee:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  418ff0:	4b33      	ldr	r3, [pc, #204]	; (4190c0 <keyboard_init+0x1dc>)
  418ff2:	681c      	ldr	r4, [r3, #0]
  418ff4:	346c      	adds	r4, #108	; 0x6c
  418ff6:	2000      	movs	r0, #0
  418ff8:	4b34      	ldr	r3, [pc, #208]	; (4190cc <keyboard_init+0x1e8>)
  418ffa:	4798      	blx	r3
  418ffc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419000:	3050      	adds	r0, #80	; 0x50
  419002:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419006:	da4d      	bge.n	4190a4 <keyboard_init+0x1c0>
  419008:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41900a:	2114      	movs	r1, #20
  41900c:	4620      	mov	r0, r4
  41900e:	4b2e      	ldr	r3, [pc, #184]	; (4190c8 <keyboard_init+0x1e4>)
  419010:	4798      	blx	r3
  419012:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  419014:	2000      	movs	r0, #0
  419016:	4b2d      	ldr	r3, [pc, #180]	; (4190cc <keyboard_init+0x1e8>)
  419018:	4798      	blx	r3
  41901a:	3014      	adds	r0, #20
  41901c:	0080      	lsls	r0, r0, #2
  41901e:	4b2e      	ldr	r3, [pc, #184]	; (4190d8 <keyboard_init+0x1f4>)
  419020:	fb83 2300 	smull	r2, r3, r3, r0
  419024:	17c2      	asrs	r2, r0, #31
  419026:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41902a:	b212      	sxth	r2, r2
  41902c:	e772      	b.n	418f14 <keyboard_init+0x30>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41902e:	f04f 0200 	mov.w	r2, #0
  419032:	e78f      	b.n	418f54 <keyboard_init+0x70>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  419034:	2000      	movs	r0, #0
  419036:	4b25      	ldr	r3, [pc, #148]	; (4190cc <keyboard_init+0x1e8>)
  419038:	4798      	blx	r3
  41903a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41903e:	3050      	adds	r0, #80	; 0x50
  419040:	4b25      	ldr	r3, [pc, #148]	; (4190d8 <keyboard_init+0x1f4>)
  419042:	fb83 2300 	smull	r2, r3, r3, r0
  419046:	17c2      	asrs	r2, r0, #31
  419048:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41904c:	b212      	sxth	r2, r2
  41904e:	e798      	b.n	418f82 <keyboard_init+0x9e>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  419050:	2000      	movs	r0, #0
  419052:	4b1e      	ldr	r3, [pc, #120]	; (4190cc <keyboard_init+0x1e8>)
  419054:	4798      	blx	r3
  419056:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41905a:	3050      	adds	r0, #80	; 0x50
  41905c:	4b1e      	ldr	r3, [pc, #120]	; (4190d8 <keyboard_init+0x1f4>)
  41905e:	fb83 2300 	smull	r2, r3, r3, r0
  419062:	17c2      	asrs	r2, r0, #31
  419064:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419068:	b212      	sxth	r2, r2
  41906a:	e79b      	b.n	418fa4 <keyboard_init+0xc0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41906c:	2000      	movs	r0, #0
  41906e:	4b17      	ldr	r3, [pc, #92]	; (4190cc <keyboard_init+0x1e8>)
  419070:	4798      	blx	r3
  419072:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419076:	3050      	adds	r0, #80	; 0x50
  419078:	4b17      	ldr	r3, [pc, #92]	; (4190d8 <keyboard_init+0x1f4>)
  41907a:	fb83 2300 	smull	r2, r3, r3, r0
  41907e:	17c2      	asrs	r2, r0, #31
  419080:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419084:	b212      	sxth	r2, r2
  419086:	e79e      	b.n	418fc6 <keyboard_init+0xe2>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  419088:	2000      	movs	r0, #0
  41908a:	4b10      	ldr	r3, [pc, #64]	; (4190cc <keyboard_init+0x1e8>)
  41908c:	4798      	blx	r3
  41908e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419092:	3050      	adds	r0, #80	; 0x50
  419094:	4b10      	ldr	r3, [pc, #64]	; (4190d8 <keyboard_init+0x1f4>)
  419096:	fb83 2300 	smull	r2, r3, r3, r0
  41909a:	17c2      	asrs	r2, r0, #31
  41909c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4190a0:	b212      	sxth	r2, r2
  4190a2:	e7a1      	b.n	418fe8 <keyboard_init+0x104>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  4190a4:	2000      	movs	r0, #0
  4190a6:	4b09      	ldr	r3, [pc, #36]	; (4190cc <keyboard_init+0x1e8>)
  4190a8:	4798      	blx	r3
  4190aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4190ae:	3050      	adds	r0, #80	; 0x50
  4190b0:	4b09      	ldr	r3, [pc, #36]	; (4190d8 <keyboard_init+0x1f4>)
  4190b2:	fb83 2300 	smull	r2, r3, r3, r0
  4190b6:	17c2      	asrs	r2, r0, #31
  4190b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4190bc:	b212      	sxth	r2, r2
  4190be:	e7a4      	b.n	41900a <keyboard_init+0x126>
  4190c0:	20414798 	.word	0x20414798
  4190c4:	0041704d 	.word	0x0041704d
  4190c8:	004095c1 	.word	0x004095c1
  4190cc:	00413f95 	.word	0x00413f95
  4190d0:	2041479c 	.word	0x2041479c
  4190d4:	00409751 	.word	0x00409751
  4190d8:	66666667 	.word	0x66666667

004190dc <msgbox_init>:
{
  4190dc:	b510      	push	{r4, lr}
    style_init_reset(&styles->mbox_bg);
  4190de:	4c20      	ldr	r4, [pc, #128]	; (419160 <msgbox_init+0x84>)
  4190e0:	6820      	ldr	r0, [r4, #0]
  4190e2:	3080      	adds	r0, #128	; 0x80
  4190e4:	4b1f      	ldr	r3, [pc, #124]	; (419164 <msgbox_init+0x88>)
  4190e6:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  4190e8:	6824      	ldr	r4, [r4, #0]
  4190ea:	3480      	adds	r4, #128	; 0x80
  4190ec:	2000      	movs	r0, #0
  4190ee:	4b1e      	ldr	r3, [pc, #120]	; (419168 <msgbox_init+0x8c>)
  4190f0:	4798      	blx	r3
  4190f2:	2332      	movs	r3, #50	; 0x32
  4190f4:	fb03 f000 	mul.w	r0, r3, r0
  4190f8:	3050      	adds	r0, #80	; 0x50
  4190fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4190fe:	da1d      	bge.n	41913c <msgbox_init+0x60>
  419100:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  419102:	2150      	movs	r1, #80	; 0x50
  419104:	4620      	mov	r0, r4
  419106:	4b19      	ldr	r3, [pc, #100]	; (41916c <msgbox_init+0x90>)
  419108:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41910a:	4b15      	ldr	r3, [pc, #84]	; (419160 <msgbox_init+0x84>)
  41910c:	6818      	ldr	r0, [r3, #0]
  41910e:	3080      	adds	r0, #128	; 0x80
  419110:	4b17      	ldr	r3, [pc, #92]	; (419170 <msgbox_init+0x94>)
  419112:	6a1b      	ldr	r3, [r3, #32]
  419114:	f013 0f02 	tst.w	r3, #2
  419118:	d11f      	bne.n	41915a <msgbox_init+0x7e>
  41911a:	f04f 0200 	mov.w	r2, #0
  41911e:	2304      	movs	r3, #4
  419120:	f363 0202 	bfi	r2, r3, #0, #3
  419124:	2313      	movs	r3, #19
  419126:	f363 02c7 	bfi	r2, r3, #3, #5
  41912a:	f363 220c 	bfi	r2, r3, #8, #5
  41912e:	2306      	movs	r3, #6
  419130:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  419134:	2159      	movs	r1, #89	; 0x59
  419136:	4b0f      	ldr	r3, [pc, #60]	; (419174 <msgbox_init+0x98>)
  419138:	4798      	blx	r3
  41913a:	bd10      	pop	{r4, pc}
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41913c:	2000      	movs	r0, #0
  41913e:	4b0a      	ldr	r3, [pc, #40]	; (419168 <msgbox_init+0x8c>)
  419140:	4798      	blx	r3
  419142:	2232      	movs	r2, #50	; 0x32
  419144:	fb02 f000 	mul.w	r0, r2, r0
  419148:	3050      	adds	r0, #80	; 0x50
  41914a:	4b0b      	ldr	r3, [pc, #44]	; (419178 <msgbox_init+0x9c>)
  41914c:	fb83 2300 	smull	r2, r3, r3, r0
  419150:	17c2      	asrs	r2, r0, #31
  419152:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419156:	b212      	sxth	r2, r2
  419158:	e7d3      	b.n	419102 <msgbox_init+0x26>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41915a:	4b08      	ldr	r3, [pc, #32]	; (41917c <msgbox_init+0xa0>)
  41915c:	891a      	ldrh	r2, [r3, #8]
  41915e:	e7e9      	b.n	419134 <msgbox_init+0x58>
  419160:	20414798 	.word	0x20414798
  419164:	0041704d 	.word	0x0041704d
  419168:	00413f95 	.word	0x00413f95
  41916c:	004095c1 	.word	0x004095c1
  419170:	2041479c 	.word	0x2041479c
  419174:	00409751 	.word	0x00409751
  419178:	66666667 	.word	0x66666667
  41917c:	0042497c 	.word	0x0042497c

00419180 <page_init>:
{
  419180:	b510      	push	{r4, lr}
    style_init_reset(&styles->sb);
  419182:	4c5a      	ldr	r4, [pc, #360]	; (4192ec <page_init+0x16c>)
  419184:	6820      	ldr	r0, [r4, #0]
  419186:	3084      	adds	r0, #132	; 0x84
  419188:	4b59      	ldr	r3, [pc, #356]	; (4192f0 <page_init+0x170>)
  41918a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
  41918c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41918e:	22ff      	movs	r2, #255	; 0xff
  419190:	212c      	movs	r1, #44	; 0x2c
  419192:	3084      	adds	r0, #132	; 0x84
  419194:	4b57      	ldr	r3, [pc, #348]	; (4192f4 <page_init+0x174>)
  419196:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
  419198:	6820      	ldr	r0, [r4, #0]
  41919a:	3084      	adds	r0, #132	; 0x84
  41919c:	4b56      	ldr	r3, [pc, #344]	; (4192f8 <page_init+0x178>)
  41919e:	6a1b      	ldr	r3, [r3, #32]
  4191a0:	f013 0f02 	tst.w	r3, #2
  4191a4:	d068      	beq.n	419278 <page_init+0xf8>
  4191a6:	f04f 0200 	mov.w	r2, #0
  4191aa:	2306      	movs	r3, #6
  4191ac:	f363 0202 	bfi	r2, r3, #0, #3
  4191b0:	2319      	movs	r3, #25
  4191b2:	f363 02c7 	bfi	r2, r3, #3, #5
  4191b6:	231a      	movs	r3, #26
  4191b8:	f363 220c 	bfi	r2, r3, #8, #5
  4191bc:	2303      	movs	r3, #3
  4191be:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4191c2:	2129      	movs	r1, #41	; 0x29
  4191c4:	4b4d      	ldr	r3, [pc, #308]	; (4192fc <page_init+0x17c>)
  4191c6:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4191c8:	4c48      	ldr	r4, [pc, #288]	; (4192ec <page_init+0x16c>)
  4191ca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4191cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4191d0:	2101      	movs	r1, #1
  4191d2:	3084      	adds	r0, #132	; 0x84
  4191d4:	4b4a      	ldr	r3, [pc, #296]	; (419300 <page_init+0x180>)
  4191d6:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  4191d8:	6824      	ldr	r4, [r4, #0]
  4191da:	3484      	adds	r4, #132	; 0x84
  4191dc:	2000      	movs	r0, #0
  4191de:	4b49      	ldr	r3, [pc, #292]	; (419304 <page_init+0x184>)
  4191e0:	4798      	blx	r3
  4191e2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4191e6:	3050      	adds	r0, #80	; 0x50
  4191e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4191ec:	da54      	bge.n	419298 <page_init+0x118>
  4191ee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  4191f0:	2103      	movs	r1, #3
  4191f2:	4620      	mov	r0, r4
  4191f4:	4b42      	ldr	r3, [pc, #264]	; (419300 <page_init+0x180>)
  4191f6:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  4191f8:	4b3c      	ldr	r3, [pc, #240]	; (4192ec <page_init+0x16c>)
  4191fa:	681c      	ldr	r4, [r3, #0]
  4191fc:	3484      	adds	r4, #132	; 0x84
  4191fe:	2000      	movs	r0, #0
  419200:	4b40      	ldr	r3, [pc, #256]	; (419304 <page_init+0x184>)
  419202:	4798      	blx	r3
  419204:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419208:	3050      	adds	r0, #80	; 0x50
  41920a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41920e:	da51      	bge.n	4192b4 <page_init+0x134>
  419210:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419212:	2113      	movs	r1, #19
  419214:	4620      	mov	r0, r4
  419216:	4b3a      	ldr	r3, [pc, #232]	; (419300 <page_init+0x180>)
  419218:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41921a:	4b34      	ldr	r3, [pc, #208]	; (4192ec <page_init+0x16c>)
  41921c:	681c      	ldr	r4, [r3, #0]
  41921e:	3484      	adds	r4, #132	; 0x84
  419220:	2000      	movs	r0, #0
  419222:	4b38      	ldr	r3, [pc, #224]	; (419304 <page_init+0x184>)
  419224:	4798      	blx	r3
  419226:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41922a:	3050      	adds	r0, #80	; 0x50
  41922c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419230:	da4e      	bge.n	4192d0 <page_init+0x150>
  419232:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419234:	2111      	movs	r1, #17
  419236:	4620      	mov	r0, r4
  419238:	4b31      	ldr	r3, [pc, #196]	; (419300 <page_init+0x180>)
  41923a:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
  41923c:	4c2b      	ldr	r4, [pc, #172]	; (4192ec <page_init+0x16c>)
  41923e:	6820      	ldr	r0, [r4, #0]
  419240:	3088      	adds	r0, #136	; 0x88
  419242:	4b2b      	ldr	r3, [pc, #172]	; (4192f0 <page_init+0x170>)
  419244:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
  419246:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419248:	22ff      	movs	r2, #255	; 0xff
  41924a:	212c      	movs	r1, #44	; 0x2c
  41924c:	3088      	adds	r0, #136	; 0x88
  41924e:	4b29      	ldr	r3, [pc, #164]	; (4192f4 <page_init+0x174>)
  419250:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
  419252:	6820      	ldr	r0, [r4, #0]
  419254:	f04f 0200 	mov.w	r2, #0
  419258:	2304      	movs	r3, #4
  41925a:	f363 0202 	bfi	r2, r3, #0, #3
  41925e:	2311      	movs	r3, #17
  419260:	f363 02c7 	bfi	r2, r3, #3, #5
  419264:	f363 220c 	bfi	r2, r3, #8, #5
  419268:	2302      	movs	r3, #2
  41926a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41926e:	2129      	movs	r1, #41	; 0x29
  419270:	3088      	adds	r0, #136	; 0x88
  419272:	4b22      	ldr	r3, [pc, #136]	; (4192fc <page_init+0x17c>)
  419274:	4798      	blx	r3
  419276:	bd10      	pop	{r4, pc}
  419278:	f04f 0200 	mov.w	r2, #0
  41927c:	2303      	movs	r3, #3
  41927e:	f363 0202 	bfi	r2, r3, #0, #3
  419282:	230e      	movs	r3, #14
  419284:	f363 02c7 	bfi	r2, r3, #3, #5
  419288:	2310      	movs	r3, #16
  41928a:	f363 220c 	bfi	r2, r3, #8, #5
  41928e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419292:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  419296:	e794      	b.n	4191c2 <page_init+0x42>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  419298:	2000      	movs	r0, #0
  41929a:	4b1a      	ldr	r3, [pc, #104]	; (419304 <page_init+0x184>)
  41929c:	4798      	blx	r3
  41929e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4192a2:	3050      	adds	r0, #80	; 0x50
  4192a4:	4b18      	ldr	r3, [pc, #96]	; (419308 <page_init+0x188>)
  4192a6:	fb83 2300 	smull	r2, r3, r3, r0
  4192aa:	17c2      	asrs	r2, r0, #31
  4192ac:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4192b0:	b212      	sxth	r2, r2
  4192b2:	e79d      	b.n	4191f0 <page_init+0x70>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  4192b4:	2000      	movs	r0, #0
  4192b6:	4b13      	ldr	r3, [pc, #76]	; (419304 <page_init+0x184>)
  4192b8:	4798      	blx	r3
  4192ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4192be:	3050      	adds	r0, #80	; 0x50
  4192c0:	4b11      	ldr	r3, [pc, #68]	; (419308 <page_init+0x188>)
  4192c2:	fb83 2300 	smull	r2, r3, r3, r0
  4192c6:	17c2      	asrs	r2, r0, #31
  4192c8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4192cc:	b212      	sxth	r2, r2
  4192ce:	e7a0      	b.n	419212 <page_init+0x92>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  4192d0:	2000      	movs	r0, #0
  4192d2:	4b0c      	ldr	r3, [pc, #48]	; (419304 <page_init+0x184>)
  4192d4:	4798      	blx	r3
  4192d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4192da:	3050      	adds	r0, #80	; 0x50
  4192dc:	4b0a      	ldr	r3, [pc, #40]	; (419308 <page_init+0x188>)
  4192de:	fb83 2300 	smull	r2, r3, r3, r0
  4192e2:	17c2      	asrs	r2, r0, #31
  4192e4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4192e8:	b212      	sxth	r2, r2
  4192ea:	e7a3      	b.n	419234 <page_init+0xb4>
  4192ec:	20414798 	.word	0x20414798
  4192f0:	0041704d 	.word	0x0041704d
  4192f4:	004098e1 	.word	0x004098e1
  4192f8:	2041479c 	.word	0x2041479c
  4192fc:	00409751 	.word	0x00409751
  419300:	004095c1 	.word	0x004095c1
  419304:	00413f95 	.word	0x00413f95
  419308:	66666667 	.word	0x66666667

0041930c <textarea_init>:
{
  41930c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ta_cursor);
  41930e:	4c4a      	ldr	r4, [pc, #296]	; (419438 <textarea_init+0x12c>)
  419310:	6820      	ldr	r0, [r4, #0]
  419312:	30b8      	adds	r0, #184	; 0xb8
  419314:	4b49      	ldr	r3, [pc, #292]	; (41943c <textarea_init+0x130>)
  419316:	4798      	blx	r3
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  419318:	6820      	ldr	r0, [r4, #0]
  41931a:	30b8      	adds	r0, #184	; 0xb8
  41931c:	4b48      	ldr	r3, [pc, #288]	; (419440 <textarea_init+0x134>)
  41931e:	6a1b      	ldr	r3, [r3, #32]
  419320:	f013 0f02 	tst.w	r3, #2
  419324:	d052      	beq.n	4193cc <textarea_init+0xc0>
  419326:	f04f 0200 	mov.w	r2, #0
  41932a:	2302      	movs	r3, #2
  41932c:	f363 0202 	bfi	r2, r3, #0, #3
  419330:	2306      	movs	r3, #6
  419332:	f363 02c7 	bfi	r2, r3, #3, #5
  419336:	2309      	movs	r3, #9
  419338:	f363 220c 	bfi	r2, r3, #8, #5
  41933c:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419340:	2139      	movs	r1, #57	; 0x39
  419342:	4b40      	ldr	r3, [pc, #256]	; (419444 <textarea_init+0x138>)
  419344:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  419346:	4b3c      	ldr	r3, [pc, #240]	; (419438 <textarea_init+0x12c>)
  419348:	681c      	ldr	r4, [r3, #0]
  41934a:	34b8      	adds	r4, #184	; 0xb8
  41934c:	2000      	movs	r0, #0
  41934e:	4b3e      	ldr	r3, [pc, #248]	; (419448 <textarea_init+0x13c>)
  419350:	4798      	blx	r3
  419352:	3028      	adds	r0, #40	; 0x28
  419354:	0040      	lsls	r0, r0, #1
  419356:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41935a:	da46      	bge.n	4193ea <textarea_init+0xde>
  41935c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41935e:	2130      	movs	r1, #48	; 0x30
  419360:	4620      	mov	r0, r4
  419362:	4b3a      	ldr	r3, [pc, #232]	; (41944c <textarea_init+0x140>)
  419364:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  419366:	4b34      	ldr	r3, [pc, #208]	; (419438 <textarea_init+0x12c>)
  419368:	681c      	ldr	r4, [r3, #0]
  41936a:	34b8      	adds	r4, #184	; 0xb8
  41936c:	2000      	movs	r0, #0
  41936e:	4b36      	ldr	r3, [pc, #216]	; (419448 <textarea_init+0x13c>)
  419370:	4798      	blx	r3
  419372:	3050      	adds	r0, #80	; 0x50
  419374:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419378:	da44      	bge.n	419404 <textarea_init+0xf8>
  41937a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41937c:	2112      	movs	r1, #18
  41937e:	4620      	mov	r0, r4
  419380:	4d32      	ldr	r5, [pc, #200]	; (41944c <textarea_init+0x140>)
  419382:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
  419384:	4c2c      	ldr	r4, [pc, #176]	; (419438 <textarea_init+0x12c>)
  419386:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419388:	2204      	movs	r2, #4
  41938a:	2131      	movs	r1, #49	; 0x31
  41938c:	30b8      	adds	r0, #184	; 0xb8
  41938e:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
  419390:	6820      	ldr	r0, [r4, #0]
  419392:	30bc      	adds	r0, #188	; 0xbc
  419394:	4b29      	ldr	r3, [pc, #164]	; (41943c <textarea_init+0x130>)
  419396:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  419398:	6820      	ldr	r0, [r4, #0]
  41939a:	30bc      	adds	r0, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  41939c:	4b28      	ldr	r3, [pc, #160]	; (419440 <textarea_init+0x134>)
  41939e:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  4193a0:	f013 0f02 	tst.w	r3, #2
  4193a4:	d13a      	bne.n	41941c <textarea_init+0x110>
  4193a6:	f04f 0200 	mov.w	r2, #0
  4193aa:	2305      	movs	r3, #5
  4193ac:	f363 0202 	bfi	r2, r3, #0, #3
  4193b0:	2314      	movs	r3, #20
  4193b2:	f363 02c7 	bfi	r2, r3, #3, #5
  4193b6:	2317      	movs	r3, #23
  4193b8:	f363 220c 	bfi	r2, r3, #8, #5
  4193bc:	2303      	movs	r3, #3
  4193be:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4193c2:	f248 0189 	movw	r1, #32905	; 0x8089
  4193c6:	4b1f      	ldr	r3, [pc, #124]	; (419444 <textarea_init+0x138>)
  4193c8:	4798      	blx	r3
  4193ca:	bd38      	pop	{r3, r4, r5, pc}
  4193cc:	f04f 0200 	mov.w	r2, #0
  4193d0:	2305      	movs	r3, #5
  4193d2:	f363 0202 	bfi	r2, r3, #0, #3
  4193d6:	2314      	movs	r3, #20
  4193d8:	f363 02c7 	bfi	r2, r3, #3, #5
  4193dc:	2315      	movs	r3, #21
  4193de:	f363 220c 	bfi	r2, r3, #8, #5
  4193e2:	2302      	movs	r3, #2
  4193e4:	f363 324f 	bfi	r2, r3, #13, #3
  4193e8:	e7aa      	b.n	419340 <textarea_init+0x34>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  4193ea:	2000      	movs	r0, #0
  4193ec:	4b16      	ldr	r3, [pc, #88]	; (419448 <textarea_init+0x13c>)
  4193ee:	4798      	blx	r3
  4193f0:	3028      	adds	r0, #40	; 0x28
  4193f2:	0040      	lsls	r0, r0, #1
  4193f4:	4b16      	ldr	r3, [pc, #88]	; (419450 <textarea_init+0x144>)
  4193f6:	fb83 2300 	smull	r2, r3, r3, r0
  4193fa:	17c2      	asrs	r2, r0, #31
  4193fc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419400:	b212      	sxth	r2, r2
  419402:	e7ac      	b.n	41935e <textarea_init+0x52>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  419404:	2000      	movs	r0, #0
  419406:	4b10      	ldr	r3, [pc, #64]	; (419448 <textarea_init+0x13c>)
  419408:	4798      	blx	r3
  41940a:	3050      	adds	r0, #80	; 0x50
  41940c:	4b10      	ldr	r3, [pc, #64]	; (419450 <textarea_init+0x144>)
  41940e:	fb83 2300 	smull	r2, r3, r3, r0
  419412:	17c2      	asrs	r2, r0, #31
  419414:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419418:	b212      	sxth	r2, r2
  41941a:	e7af      	b.n	41937c <textarea_init+0x70>
  41941c:	f04f 0200 	mov.w	r2, #0
  419420:	2305      	movs	r3, #5
  419422:	f363 0202 	bfi	r2, r3, #0, #3
  419426:	2315      	movs	r3, #21
  419428:	f363 02c7 	bfi	r2, r3, #3, #5
  41942c:	f363 220c 	bfi	r2, r3, #8, #5
  419430:	2302      	movs	r3, #2
  419432:	f363 324f 	bfi	r2, r3, #13, #3
  419436:	e7c4      	b.n	4193c2 <textarea_init+0xb6>
  419438:	20414798 	.word	0x20414798
  41943c:	0041704d 	.word	0x0041704d
  419440:	2041479c 	.word	0x2041479c
  419444:	00409751 	.word	0x00409751
  419448:	00413f95 	.word	0x00413f95
  41944c:	004095c1 	.word	0x004095c1
  419450:	66666667 	.word	0x66666667

00419454 <spinbox_init>:
{
  419454:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->spinbox_cursor);
  419456:	4c2d      	ldr	r4, [pc, #180]	; (41950c <spinbox_init+0xb8>)
  419458:	6820      	ldr	r0, [r4, #0]
  41945a:	309c      	adds	r0, #156	; 0x9c
  41945c:	4b2c      	ldr	r3, [pc, #176]	; (419510 <spinbox_init+0xbc>)
  41945e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
  419460:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419462:	22ff      	movs	r2, #255	; 0xff
  419464:	212c      	movs	r1, #44	; 0x2c
  419466:	309c      	adds	r0, #156	; 0x9c
  419468:	4b2a      	ldr	r3, [pc, #168]	; (419514 <spinbox_init+0xc0>)
  41946a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
  41946c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41946e:	4b2a      	ldr	r3, [pc, #168]	; (419518 <spinbox_init+0xc4>)
  419470:	899a      	ldrh	r2, [r3, #12]
  419472:	2129      	movs	r1, #41	; 0x29
  419474:	309c      	adds	r0, #156	; 0x9c
  419476:	4d29      	ldr	r5, [pc, #164]	; (41951c <spinbox_init+0xc8>)
  419478:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41947a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41947c:	4b28      	ldr	r3, [pc, #160]	; (419520 <spinbox_init+0xcc>)
  41947e:	881a      	ldrh	r2, [r3, #0]
  419480:	f248 0189 	movw	r1, #32905	; 0x8089
  419484:	309c      	adds	r0, #156	; 0x9c
  419486:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  419488:	6824      	ldr	r4, [r4, #0]
  41948a:	349c      	adds	r4, #156	; 0x9c
  41948c:	2000      	movs	r0, #0
  41948e:	4b25      	ldr	r3, [pc, #148]	; (419524 <spinbox_init+0xd0>)
  419490:	4798      	blx	r3
  419492:	2364      	movs	r3, #100	; 0x64
  419494:	fb03 f000 	mul.w	r0, r3, r0
  419498:	3050      	adds	r0, #80	; 0x50
  41949a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41949e:	da17      	bge.n	4194d0 <spinbox_init+0x7c>
  4194a0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4194a2:	2110      	movs	r1, #16
  4194a4:	4620      	mov	r0, r4
  4194a6:	4b20      	ldr	r3, [pc, #128]	; (419528 <spinbox_init+0xd4>)
  4194a8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  4194aa:	4b18      	ldr	r3, [pc, #96]	; (41950c <spinbox_init+0xb8>)
  4194ac:	681c      	ldr	r4, [r3, #0]
  4194ae:	349c      	adds	r4, #156	; 0x9c
  4194b0:	2000      	movs	r0, #0
  4194b2:	4b1c      	ldr	r3, [pc, #112]	; (419524 <spinbox_init+0xd0>)
  4194b4:	4798      	blx	r3
  4194b6:	2364      	movs	r3, #100	; 0x64
  4194b8:	fb03 f000 	mul.w	r0, r3, r0
  4194bc:	3050      	adds	r0, #80	; 0x50
  4194be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194c2:	da14      	bge.n	4194ee <spinbox_init+0x9a>
  4194c4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4194c6:	2111      	movs	r1, #17
  4194c8:	4620      	mov	r0, r4
  4194ca:	4b17      	ldr	r3, [pc, #92]	; (419528 <spinbox_init+0xd4>)
  4194cc:	4798      	blx	r3
  4194ce:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  4194d0:	2000      	movs	r0, #0
  4194d2:	4b14      	ldr	r3, [pc, #80]	; (419524 <spinbox_init+0xd0>)
  4194d4:	4798      	blx	r3
  4194d6:	2264      	movs	r2, #100	; 0x64
  4194d8:	fb02 f000 	mul.w	r0, r2, r0
  4194dc:	3050      	adds	r0, #80	; 0x50
  4194de:	4b13      	ldr	r3, [pc, #76]	; (41952c <spinbox_init+0xd8>)
  4194e0:	fb83 2300 	smull	r2, r3, r3, r0
  4194e4:	17c2      	asrs	r2, r0, #31
  4194e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4194ea:	b212      	sxth	r2, r2
  4194ec:	e7d9      	b.n	4194a2 <spinbox_init+0x4e>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  4194ee:	2000      	movs	r0, #0
  4194f0:	4b0c      	ldr	r3, [pc, #48]	; (419524 <spinbox_init+0xd0>)
  4194f2:	4798      	blx	r3
  4194f4:	2264      	movs	r2, #100	; 0x64
  4194f6:	fb02 f000 	mul.w	r0, r2, r0
  4194fa:	3050      	adds	r0, #80	; 0x50
  4194fc:	4b0b      	ldr	r3, [pc, #44]	; (41952c <spinbox_init+0xd8>)
  4194fe:	fb83 2300 	smull	r2, r3, r3, r0
  419502:	17c2      	asrs	r2, r0, #31
  419504:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419508:	b212      	sxth	r2, r2
  41950a:	e7dc      	b.n	4194c6 <spinbox_init+0x72>
  41950c:	20414798 	.word	0x20414798
  419510:	0041704d 	.word	0x0041704d
  419514:	004098e1 	.word	0x004098e1
  419518:	2041479c 	.word	0x2041479c
  41951c:	00409751 	.word	0x00409751
  419520:	0042497c 	.word	0x0042497c
  419524:	00413f95 	.word	0x00413f95
  419528:	004095c1 	.word	0x004095c1
  41952c:	66666667 	.word	0x66666667

00419530 <list_init>:
{
  419530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->list_bg);
  419532:	4cbf      	ldr	r4, [pc, #764]	; (419830 <list_init+0x300>)
  419534:	6820      	ldr	r0, [r4, #0]
  419536:	3078      	adds	r0, #120	; 0x78
  419538:	4ebe      	ldr	r6, [pc, #760]	; (419834 <list_init+0x304>)
  41953a:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
  41953c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41953e:	2201      	movs	r2, #1
  419540:	2102      	movs	r1, #2
  419542:	3078      	adds	r0, #120	; 0x78
  419544:	4dbc      	ldr	r5, [pc, #752]	; (419838 <list_init+0x308>)
  419546:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419548:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41954a:	2200      	movs	r2, #0
  41954c:	2112      	movs	r1, #18
  41954e:	3078      	adds	r0, #120	; 0x78
  419550:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419552:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419554:	2200      	movs	r2, #0
  419556:	2113      	movs	r1, #19
  419558:	3078      	adds	r0, #120	; 0x78
  41955a:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41955c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41955e:	2200      	movs	r2, #0
  419560:	2110      	movs	r1, #16
  419562:	3078      	adds	r0, #120	; 0x78
  419564:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419566:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419568:	2200      	movs	r2, #0
  41956a:	2111      	movs	r1, #17
  41956c:	3078      	adds	r0, #120	; 0x78
  41956e:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419570:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419572:	2200      	movs	r2, #0
  419574:	2114      	movs	r1, #20
  419576:	3078      	adds	r0, #120	; 0x78
  419578:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
  41957a:	6820      	ldr	r0, [r4, #0]
  41957c:	307c      	adds	r0, #124	; 0x7c
  41957e:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  419580:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419582:	22ff      	movs	r2, #255	; 0xff
  419584:	212c      	movs	r1, #44	; 0x2c
  419586:	307c      	adds	r0, #124	; 0x7c
  419588:	4bac      	ldr	r3, [pc, #688]	; (41983c <list_init+0x30c>)
  41958a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
  41958c:	6820      	ldr	r0, [r4, #0]
  41958e:	307c      	adds	r0, #124	; 0x7c
  419590:	4bab      	ldr	r3, [pc, #684]	; (419840 <list_init+0x310>)
  419592:	6a1b      	ldr	r3, [r3, #32]
  419594:	f013 0f02 	tst.w	r3, #2
  419598:	f000 8223 	beq.w	4199e2 <list_init+0x4b2>
  41959c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4195a0:	2129      	movs	r1, #41	; 0x29
  4195a2:	4ba8      	ldr	r3, [pc, #672]	; (419844 <list_init+0x314>)
  4195a4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
  4195a6:	4ba2      	ldr	r3, [pc, #648]	; (419830 <list_init+0x300>)
  4195a8:	6818      	ldr	r0, [r3, #0]
  4195aa:	307c      	adds	r0, #124	; 0x7c
  4195ac:	4ba4      	ldr	r3, [pc, #656]	; (419840 <list_init+0x310>)
  4195ae:	6a1b      	ldr	r3, [r3, #32]
  4195b0:	f013 0f02 	tst.w	r3, #2
  4195b4:	f000 8223 	beq.w	4199fe <list_init+0x4ce>
  4195b8:	f04f 0207 	mov.w	r2, #7
  4195bc:	231d      	movs	r3, #29
  4195be:	f363 02c7 	bfi	r2, r3, #3, #5
  4195c2:	f363 220c 	bfi	r2, r3, #8, #5
  4195c6:	2303      	movs	r3, #3
  4195c8:	f363 324f 	bfi	r2, r3, #13, #3
  4195cc:	f241 0129 	movw	r1, #4137	; 0x1029
  4195d0:	4b9c      	ldr	r3, [pc, #624]	; (419844 <list_init+0x314>)
  4195d2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
  4195d4:	4b96      	ldr	r3, [pc, #600]	; (419830 <list_init+0x300>)
  4195d6:	6818      	ldr	r0, [r3, #0]
  4195d8:	307c      	adds	r0, #124	; 0x7c
  4195da:	4b99      	ldr	r3, [pc, #612]	; (419840 <list_init+0x310>)
  4195dc:	6a1b      	ldr	r3, [r3, #32]
  4195de:	f013 0f02 	tst.w	r3, #2
  4195e2:	f000 821b 	beq.w	419a1c <list_init+0x4ec>
  4195e6:	f04f 32ff 	mov.w	r2, #4294967295
  4195ea:	f242 0129 	movw	r1, #8233	; 0x2029
  4195ee:	4d95      	ldr	r5, [pc, #596]	; (419844 <list_init+0x314>)
  4195f0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
  4195f2:	4c8f      	ldr	r4, [pc, #572]	; (419830 <list_init+0x300>)
  4195f4:	6820      	ldr	r0, [r4, #0]
  4195f6:	4f92      	ldr	r7, [pc, #584]	; (419840 <list_init+0x310>)
  4195f8:	89ba      	ldrh	r2, [r7, #12]
  4195fa:	f240 1129 	movw	r1, #297	; 0x129
  4195fe:	307c      	adds	r0, #124	; 0x7c
  419600:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
  419602:	6826      	ldr	r6, [r4, #0]
  419604:	367c      	adds	r6, #124	; 0x7c
  419606:	2133      	movs	r1, #51	; 0x33
  419608:	89b8      	ldrh	r0, [r7, #12]
  41960a:	4b8f      	ldr	r3, [pc, #572]	; (419848 <list_init+0x318>)
  41960c:	4798      	blx	r3
  41960e:	4602      	mov	r2, r0
  419610:	f241 1129 	movw	r1, #4393	; 0x1129
  419614:	4630      	mov	r0, r6
  419616:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  419618:	6820      	ldr	r0, [r4, #0]
  41961a:	307c      	adds	r0, #124	; 0x7c
  41961c:	6a3b      	ldr	r3, [r7, #32]
  41961e:	f013 0f02 	tst.w	r3, #2
  419622:	f000 8209 	beq.w	419a38 <list_init+0x508>
  419626:	f04f 0200 	mov.w	r2, #0
  41962a:	2301      	movs	r3, #1
  41962c:	f363 0202 	bfi	r2, r3, #0, #3
  419630:	2307      	movs	r3, #7
  419632:	f363 02c7 	bfi	r2, r3, #3, #5
  419636:	2308      	movs	r3, #8
  419638:	f363 220c 	bfi	r2, r3, #8, #5
  41963c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419640:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419644:	f248 0189 	movw	r1, #32905	; 0x8089
  419648:	4b7e      	ldr	r3, [pc, #504]	; (419844 <list_init+0x314>)
  41964a:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41964c:	4b78      	ldr	r3, [pc, #480]	; (419830 <list_init+0x300>)
  41964e:	6818      	ldr	r0, [r3, #0]
  419650:	307c      	adds	r0, #124	; 0x7c
  419652:	4b7b      	ldr	r3, [pc, #492]	; (419840 <list_init+0x310>)
  419654:	6a1b      	ldr	r3, [r3, #32]
  419656:	f013 0f02 	tst.w	r3, #2
  41965a:	f000 81f0 	beq.w	419a3e <list_init+0x50e>
  41965e:	f04f 32ff 	mov.w	r2, #4294967295
  419662:	f248 1189 	movw	r1, #33161	; 0x8189
  419666:	4b77      	ldr	r3, [pc, #476]	; (419844 <list_init+0x314>)
  419668:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41966a:	4b71      	ldr	r3, [pc, #452]	; (419830 <list_init+0x300>)
  41966c:	6818      	ldr	r0, [r3, #0]
  41966e:	307c      	adds	r0, #124	; 0x7c
  419670:	4b73      	ldr	r3, [pc, #460]	; (419840 <list_init+0x310>)
  419672:	6a1b      	ldr	r3, [r3, #32]
  419674:	f013 0f02 	tst.w	r3, #2
  419678:	f000 81e4 	beq.w	419a44 <list_init+0x514>
  41967c:	f04f 0200 	mov.w	r2, #0
  419680:	2305      	movs	r3, #5
  419682:	f363 0202 	bfi	r2, r3, #0, #3
  419686:	2315      	movs	r3, #21
  419688:	f363 02c7 	bfi	r2, r3, #3, #5
  41968c:	f363 220c 	bfi	r2, r3, #8, #5
  419690:	2302      	movs	r3, #2
  419692:	f363 324f 	bfi	r2, r3, #13, #3
  419696:	f24a 0189 	movw	r1, #41097	; 0xa089
  41969a:	4b6a      	ldr	r3, [pc, #424]	; (419844 <list_init+0x314>)
  41969c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41969e:	4b64      	ldr	r3, [pc, #400]	; (419830 <list_init+0x300>)
  4196a0:	6818      	ldr	r0, [r3, #0]
  4196a2:	307c      	adds	r0, #124	; 0x7c
  4196a4:	4b66      	ldr	r3, [pc, #408]	; (419840 <list_init+0x310>)
  4196a6:	6a1b      	ldr	r3, [r3, #32]
  4196a8:	f013 0f02 	tst.w	r3, #2
  4196ac:	f000 81d8 	beq.w	419a60 <list_init+0x530>
  4196b0:	f04f 0200 	mov.w	r2, #0
  4196b4:	2301      	movs	r3, #1
  4196b6:	f363 0202 	bfi	r2, r3, #0, #3
  4196ba:	2307      	movs	r3, #7
  4196bc:	f363 02c7 	bfi	r2, r3, #3, #5
  4196c0:	2308      	movs	r3, #8
  4196c2:	f363 220c 	bfi	r2, r3, #8, #5
  4196c6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  4196ca:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  4196ce:	f248 01a9 	movw	r1, #32937	; 0x80a9
  4196d2:	4b5c      	ldr	r3, [pc, #368]	; (419844 <list_init+0x314>)
  4196d4:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  4196d6:	4b56      	ldr	r3, [pc, #344]	; (419830 <list_init+0x300>)
  4196d8:	6818      	ldr	r0, [r3, #0]
  4196da:	307c      	adds	r0, #124	; 0x7c
  4196dc:	4b58      	ldr	r3, [pc, #352]	; (419840 <list_init+0x310>)
  4196de:	6a1b      	ldr	r3, [r3, #32]
  4196e0:	f013 0f02 	tst.w	r3, #2
  4196e4:	f000 81bf 	beq.w	419a66 <list_init+0x536>
  4196e8:	f04f 32ff 	mov.w	r2, #4294967295
  4196ec:	f248 11a9 	movw	r1, #33193	; 0x81a9
  4196f0:	4b54      	ldr	r3, [pc, #336]	; (419844 <list_init+0x314>)
  4196f2:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  4196f4:	4b4e      	ldr	r3, [pc, #312]	; (419830 <list_init+0x300>)
  4196f6:	6818      	ldr	r0, [r3, #0]
  4196f8:	307c      	adds	r0, #124	; 0x7c
  4196fa:	4b51      	ldr	r3, [pc, #324]	; (419840 <list_init+0x310>)
  4196fc:	6a1b      	ldr	r3, [r3, #32]
  4196fe:	f013 0f02 	tst.w	r3, #2
  419702:	f000 81b3 	beq.w	419a6c <list_init+0x53c>
  419706:	f04f 0200 	mov.w	r2, #0
  41970a:	2305      	movs	r3, #5
  41970c:	f363 0202 	bfi	r2, r3, #0, #3
  419710:	2315      	movs	r3, #21
  419712:	f363 02c7 	bfi	r2, r3, #3, #5
  419716:	f363 220c 	bfi	r2, r3, #8, #5
  41971a:	2302      	movs	r3, #2
  41971c:	f363 324f 	bfi	r2, r3, #13, #3
  419720:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  419724:	4b47      	ldr	r3, [pc, #284]	; (419844 <list_init+0x314>)
  419726:	4798      	blx	r3
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
  419728:	4c41      	ldr	r4, [pc, #260]	; (419830 <list_init+0x300>)
  41972a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41972c:	2201      	movs	r2, #1
  41972e:	2131      	movs	r1, #49	; 0x31
  419730:	307c      	adds	r0, #124	; 0x7c
  419732:	4b41      	ldr	r3, [pc, #260]	; (419838 <list_init+0x308>)
  419734:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  419736:	6820      	ldr	r0, [r4, #0]
  419738:	307c      	adds	r0, #124	; 0x7c
  41973a:	4b41      	ldr	r3, [pc, #260]	; (419840 <list_init+0x310>)
  41973c:	6a1b      	ldr	r3, [r3, #32]
  41973e:	f013 0f02 	tst.w	r3, #2
  419742:	f000 81a1 	beq.w	419a88 <list_init+0x558>
  419746:	f04f 0200 	mov.w	r2, #0
  41974a:	2306      	movs	r3, #6
  41974c:	f363 0202 	bfi	r2, r3, #0, #3
  419750:	231a      	movs	r3, #26
  419752:	f363 02c7 	bfi	r2, r3, #3, #5
  419756:	231c      	movs	r3, #28
  419758:	f363 220c 	bfi	r2, r3, #8, #5
  41975c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419760:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419764:	2139      	movs	r1, #57	; 0x39
  419766:	4d37      	ldr	r5, [pc, #220]	; (419844 <list_init+0x314>)
  419768:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
  41976a:	4c31      	ldr	r4, [pc, #196]	; (419830 <list_init+0x300>)
  41976c:	6820      	ldr	r0, [r4, #0]
  41976e:	4e34      	ldr	r6, [pc, #208]	; (419840 <list_init+0x310>)
  419770:	89b2      	ldrh	r2, [r6, #12]
  419772:	f240 2139 	movw	r1, #569	; 0x239
  419776:	307c      	adds	r0, #124	; 0x7c
  419778:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
  41977a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41977c:	2201      	movs	r2, #1
  41977e:	2130      	movs	r1, #48	; 0x30
  419780:	307c      	adds	r0, #124	; 0x7c
  419782:	4b2d      	ldr	r3, [pc, #180]	; (419838 <list_init+0x308>)
  419784:	4798      	blx	r3
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
  419786:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  419788:	89f2      	ldrh	r2, [r6, #14]
  41978a:	f240 2149 	movw	r1, #585	; 0x249
  41978e:	307c      	adds	r0, #124	; 0x7c
  419790:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  419792:	6824      	ldr	r4, [r4, #0]
  419794:	347c      	adds	r4, #124	; 0x7c
  419796:	6a33      	ldr	r3, [r6, #32]
  419798:	f013 0f20 	tst.w	r3, #32
  41979c:	f000 8183 	beq.w	419aa6 <list_init+0x576>
  4197a0:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  4197a2:	f44f 7110 	mov.w	r1, #576	; 0x240
  4197a6:	4620      	mov	r0, r4
  4197a8:	4b23      	ldr	r3, [pc, #140]	; (419838 <list_init+0x308>)
  4197aa:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  4197ac:	4b20      	ldr	r3, [pc, #128]	; (419830 <list_init+0x300>)
  4197ae:	681c      	ldr	r4, [r3, #0]
  4197b0:	347c      	adds	r4, #124	; 0x7c
  4197b2:	2000      	movs	r0, #0
  4197b4:	4b25      	ldr	r3, [pc, #148]	; (41984c <list_init+0x31c>)
  4197b6:	4798      	blx	r3
  4197b8:	3028      	adds	r0, #40	; 0x28
  4197ba:	0040      	lsls	r0, r0, #1
  4197bc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4197c0:	f280 8188 	bge.w	419ad4 <list_init+0x5a4>
  4197c4:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  4197c8:	f240 2141 	movw	r1, #577	; 0x241
  4197cc:	4620      	mov	r0, r4
  4197ce:	4b1a      	ldr	r3, [pc, #104]	; (419838 <list_init+0x308>)
  4197d0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  4197d2:	4b17      	ldr	r3, [pc, #92]	; (419830 <list_init+0x300>)
  4197d4:	681c      	ldr	r4, [r3, #0]
  4197d6:	347c      	adds	r4, #124	; 0x7c
  4197d8:	2000      	movs	r0, #0
  4197da:	4b1d      	ldr	r3, [pc, #116]	; (419850 <list_init+0x320>)
  4197dc:	4798      	blx	r3
  4197de:	2801      	cmp	r0, #1
  4197e0:	f240 8185 	bls.w	419aee <list_init+0x5be>
  4197e4:	2000      	movs	r0, #0
  4197e6:	4b19      	ldr	r3, [pc, #100]	; (41984c <list_init+0x31c>)
  4197e8:	4798      	blx	r3
  4197ea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4197ee:	0040      	lsls	r0, r0, #1
  4197f0:	3050      	adds	r0, #80	; 0x50
  4197f2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4197f6:	f280 8193 	bge.w	419b20 <list_init+0x5f0>
  4197fa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4197fc:	2112      	movs	r1, #18
  4197fe:	4620      	mov	r0, r4
  419800:	4b0d      	ldr	r3, [pc, #52]	; (419838 <list_init+0x308>)
  419802:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419804:	4b0a      	ldr	r3, [pc, #40]	; (419830 <list_init+0x300>)
  419806:	681c      	ldr	r4, [r3, #0]
  419808:	347c      	adds	r4, #124	; 0x7c
  41980a:	2000      	movs	r0, #0
  41980c:	4b10      	ldr	r3, [pc, #64]	; (419850 <list_init+0x320>)
  41980e:	4798      	blx	r3
  419810:	2801      	cmp	r0, #1
  419812:	f240 8194 	bls.w	419b3e <list_init+0x60e>
  419816:	2000      	movs	r0, #0
  419818:	4b0c      	ldr	r3, [pc, #48]	; (41984c <list_init+0x31c>)
  41981a:	4798      	blx	r3
  41981c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419820:	0040      	lsls	r0, r0, #1
  419822:	3050      	adds	r0, #80	; 0x50
  419824:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419828:	f280 81ac 	bge.w	419b84 <list_init+0x654>
  41982c:	e012      	b.n	419854 <list_init+0x324>
  41982e:	bf00      	nop
  419830:	20414798 	.word	0x20414798
  419834:	0041704d 	.word	0x0041704d
  419838:	004095c1 	.word	0x004095c1
  41983c:	004098e1 	.word	0x004098e1
  419840:	2041479c 	.word	0x2041479c
  419844:	00409751 	.word	0x00409751
  419848:	00414ff5 	.word	0x00414ff5
  41984c:	00413f95 	.word	0x00413f95
  419850:	00413fb5 	.word	0x00413fb5
  419854:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419856:	2113      	movs	r1, #19
  419858:	4620      	mov	r0, r4
  41985a:	4bc5      	ldr	r3, [pc, #788]	; (419b70 <list_init+0x640>)
  41985c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41985e:	4bc5      	ldr	r3, [pc, #788]	; (419b74 <list_init+0x644>)
  419860:	681c      	ldr	r4, [r3, #0]
  419862:	347c      	adds	r4, #124	; 0x7c
  419864:	2000      	movs	r0, #0
  419866:	4bc4      	ldr	r3, [pc, #784]	; (419b78 <list_init+0x648>)
  419868:	4798      	blx	r3
  41986a:	2801      	cmp	r0, #1
  41986c:	f240 8199 	bls.w	419ba2 <list_init+0x672>
  419870:	2000      	movs	r0, #0
  419872:	4bc2      	ldr	r3, [pc, #776]	; (419b7c <list_init+0x64c>)
  419874:	4798      	blx	r3
  419876:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41987a:	0040      	lsls	r0, r0, #1
  41987c:	3050      	adds	r0, #80	; 0x50
  41987e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419882:	f280 81a7 	bge.w	419bd4 <list_init+0x6a4>
  419886:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419888:	2110      	movs	r1, #16
  41988a:	4620      	mov	r0, r4
  41988c:	4bb8      	ldr	r3, [pc, #736]	; (419b70 <list_init+0x640>)
  41988e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419890:	4bb8      	ldr	r3, [pc, #736]	; (419b74 <list_init+0x644>)
  419892:	681c      	ldr	r4, [r3, #0]
  419894:	347c      	adds	r4, #124	; 0x7c
  419896:	2000      	movs	r0, #0
  419898:	4bb7      	ldr	r3, [pc, #732]	; (419b78 <list_init+0x648>)
  41989a:	4798      	blx	r3
  41989c:	2801      	cmp	r0, #1
  41989e:	f240 81a8 	bls.w	419bf2 <list_init+0x6c2>
  4198a2:	2000      	movs	r0, #0
  4198a4:	4bb5      	ldr	r3, [pc, #724]	; (419b7c <list_init+0x64c>)
  4198a6:	4798      	blx	r3
  4198a8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4198ac:	0040      	lsls	r0, r0, #1
  4198ae:	3050      	adds	r0, #80	; 0x50
  4198b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4198b4:	f280 81b6 	bge.w	419c24 <list_init+0x6f4>
  4198b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4198ba:	2111      	movs	r1, #17
  4198bc:	4620      	mov	r0, r4
  4198be:	4bac      	ldr	r3, [pc, #688]	; (419b70 <list_init+0x640>)
  4198c0:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  4198c2:	4bac      	ldr	r3, [pc, #688]	; (419b74 <list_init+0x644>)
  4198c4:	681c      	ldr	r4, [r3, #0]
  4198c6:	347c      	adds	r4, #124	; 0x7c
  4198c8:	2000      	movs	r0, #0
  4198ca:	4bab      	ldr	r3, [pc, #684]	; (419b78 <list_init+0x648>)
  4198cc:	4798      	blx	r3
  4198ce:	2801      	cmp	r0, #1
  4198d0:	f240 81b7 	bls.w	419c42 <list_init+0x712>
  4198d4:	2000      	movs	r0, #0
  4198d6:	4ba9      	ldr	r3, [pc, #676]	; (419b7c <list_init+0x64c>)
  4198d8:	4798      	blx	r3
  4198da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4198de:	0040      	lsls	r0, r0, #1
  4198e0:	3050      	adds	r0, #80	; 0x50
  4198e2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4198e6:	f280 81c5 	bge.w	419c74 <list_init+0x744>
  4198ea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4198ec:	2114      	movs	r1, #20
  4198ee:	4620      	mov	r0, r4
  4198f0:	4b9f      	ldr	r3, [pc, #636]	; (419b70 <list_init+0x640>)
  4198f2:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  4198f4:	4b9f      	ldr	r3, [pc, #636]	; (419b74 <list_init+0x644>)
  4198f6:	681c      	ldr	r4, [r3, #0]
  4198f8:	347c      	adds	r4, #124	; 0x7c
  4198fa:	2000      	movs	r0, #0
  4198fc:	4b9e      	ldr	r3, [pc, #632]	; (419b78 <list_init+0x648>)
  4198fe:	4798      	blx	r3
  419900:	2801      	cmp	r0, #1
  419902:	f240 81c6 	bls.w	419c92 <list_init+0x762>
  419906:	2000      	movs	r0, #0
  419908:	4b9c      	ldr	r3, [pc, #624]	; (419b7c <list_init+0x64c>)
  41990a:	4798      	blx	r3
  41990c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419910:	0040      	lsls	r0, r0, #1
  419912:	3050      	adds	r0, #80	; 0x50
  419914:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419918:	f280 81d5 	bge.w	419cc6 <list_init+0x796>
  41991c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  419920:	2104      	movs	r1, #4
  419922:	4620      	mov	r0, r4
  419924:	4b92      	ldr	r3, [pc, #584]	; (419b70 <list_init+0x640>)
  419926:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  419928:	4b92      	ldr	r3, [pc, #584]	; (419b74 <list_init+0x644>)
  41992a:	681c      	ldr	r4, [r3, #0]
  41992c:	347c      	adds	r4, #124	; 0x7c
  41992e:	2000      	movs	r0, #0
  419930:	4b92      	ldr	r3, [pc, #584]	; (419b7c <list_init+0x64c>)
  419932:	4798      	blx	r3
  419934:	3028      	adds	r0, #40	; 0x28
  419936:	0040      	lsls	r0, r0, #1
  419938:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41993c:	f280 81d2 	bge.w	419ce4 <list_init+0x7b4>
  419940:	f04f 32ff 	mov.w	r2, #4294967295
  419944:	f241 0104 	movw	r1, #4100	; 0x1004
  419948:	4620      	mov	r0, r4
  41994a:	4b89      	ldr	r3, [pc, #548]	; (419b70 <list_init+0x640>)
  41994c:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41994e:	4b89      	ldr	r3, [pc, #548]	; (419b74 <list_init+0x644>)
  419950:	681c      	ldr	r4, [r3, #0]
  419952:	347c      	adds	r4, #124	; 0x7c
  419954:	2000      	movs	r0, #0
  419956:	4b89      	ldr	r3, [pc, #548]	; (419b7c <list_init+0x64c>)
  419958:	4798      	blx	r3
  41995a:	3028      	adds	r0, #40	; 0x28
  41995c:	0040      	lsls	r0, r0, #1
  41995e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419962:	f280 81cc 	bge.w	419cfe <list_init+0x7ce>
  419966:	f04f 32ff 	mov.w	r2, #4294967295
  41996a:	f44f 7182 	mov.w	r1, #260	; 0x104
  41996e:	4620      	mov	r0, r4
  419970:	4b7f      	ldr	r3, [pc, #508]	; (419b70 <list_init+0x640>)
  419972:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  419974:	4b7f      	ldr	r3, [pc, #508]	; (419b74 <list_init+0x644>)
  419976:	681c      	ldr	r4, [r3, #0]
  419978:	347c      	adds	r4, #124	; 0x7c
  41997a:	2000      	movs	r0, #0
  41997c:	4b7f      	ldr	r3, [pc, #508]	; (419b7c <list_init+0x64c>)
  41997e:	4798      	blx	r3
  419980:	3028      	adds	r0, #40	; 0x28
  419982:	0040      	lsls	r0, r0, #1
  419984:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419988:	f280 81c6 	bge.w	419d18 <list_init+0x7e8>
  41998c:	f04f 32ff 	mov.w	r2, #4294967295
  419990:	f242 0104 	movw	r1, #8196	; 0x2004
  419994:	4620      	mov	r0, r4
  419996:	4b76      	ldr	r3, [pc, #472]	; (419b70 <list_init+0x640>)
  419998:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41999a:	4b76      	ldr	r3, [pc, #472]	; (419b74 <list_init+0x644>)
  41999c:	681c      	ldr	r4, [r3, #0]
  41999e:	347c      	adds	r4, #124	; 0x7c
  4199a0:	2000      	movs	r0, #0
  4199a2:	4b76      	ldr	r3, [pc, #472]	; (419b7c <list_init+0x64c>)
  4199a4:	4798      	blx	r3
  4199a6:	3028      	adds	r0, #40	; 0x28
  4199a8:	0040      	lsls	r0, r0, #1
  4199aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4199ae:	f280 81c0 	bge.w	419d32 <list_init+0x802>
  4199b2:	f04f 32ff 	mov.w	r2, #4294967295
  4199b6:	f44f 7101 	mov.w	r1, #516	; 0x204
  4199ba:	4620      	mov	r0, r4
  4199bc:	4c6c      	ldr	r4, [pc, #432]	; (419b70 <list_init+0x640>)
  4199be:	47a0      	blx	r4
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  4199c0:	4d6c      	ldr	r5, [pc, #432]	; (419b74 <list_init+0x644>)
  4199c2:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  4199c4:	2200      	movs	r2, #0
  4199c6:	21b0      	movs	r1, #176	; 0xb0
  4199c8:	307c      	adds	r0, #124	; 0x7c
  4199ca:	47a0      	blx	r4
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  4199cc:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  4199ce:	2229      	movs	r2, #41	; 0x29
  4199d0:	21b7      	movs	r1, #183	; 0xb7
  4199d2:	307c      	adds	r0, #124	; 0x7c
  4199d4:	47a0      	blx	r4
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
  4199d6:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  4199d8:	2204      	movs	r2, #4
  4199da:	21b6      	movs	r1, #182	; 0xb6
  4199dc:	307c      	adds	r0, #124	; 0x7c
  4199de:	47a0      	blx	r4
  4199e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4199e2:	f04f 0200 	mov.w	r2, #0
  4199e6:	2303      	movs	r3, #3
  4199e8:	f363 0202 	bfi	r2, r3, #0, #3
  4199ec:	230b      	movs	r3, #11
  4199ee:	f363 02c7 	bfi	r2, r3, #3, #5
  4199f2:	230e      	movs	r3, #14
  4199f4:	f363 220c 	bfi	r2, r3, #8, #5
  4199f8:	f36f 324f 	bfc	r2, #13, #3
  4199fc:	e5d0      	b.n	4195a0 <list_init+0x70>
  4199fe:	f04f 0200 	mov.w	r2, #0
  419a02:	2302      	movs	r3, #2
  419a04:	f363 0202 	bfi	r2, r3, #0, #3
  419a08:	2309      	movs	r3, #9
  419a0a:	f363 02c7 	bfi	r2, r3, #3, #5
  419a0e:	230a      	movs	r3, #10
  419a10:	f363 220c 	bfi	r2, r3, #8, #5
  419a14:	2303      	movs	r3, #3
  419a16:	f363 324f 	bfi	r2, r3, #13, #3
  419a1a:	e5d7      	b.n	4195cc <list_init+0x9c>
  419a1c:	f04f 0200 	mov.w	r2, #0
  419a20:	2303      	movs	r3, #3
  419a22:	f363 0202 	bfi	r2, r3, #0, #3
  419a26:	230b      	movs	r3, #11
  419a28:	f363 02c7 	bfi	r2, r3, #3, #5
  419a2c:	230e      	movs	r3, #14
  419a2e:	f363 220c 	bfi	r2, r3, #8, #5
  419a32:	f36f 324f 	bfc	r2, #13, #3
  419a36:	e5d8      	b.n	4195ea <list_init+0xba>
  419a38:	f04f 32ff 	mov.w	r2, #4294967295
  419a3c:	e602      	b.n	419644 <list_init+0x114>
  419a3e:	f04f 32ff 	mov.w	r2, #4294967295
  419a42:	e60e      	b.n	419662 <list_init+0x132>
  419a44:	f04f 0200 	mov.w	r2, #0
  419a48:	2304      	movs	r3, #4
  419a4a:	f363 0202 	bfi	r2, r3, #0, #3
  419a4e:	2313      	movs	r3, #19
  419a50:	f363 02c7 	bfi	r2, r3, #3, #5
  419a54:	f363 220c 	bfi	r2, r3, #8, #5
  419a58:	2306      	movs	r3, #6
  419a5a:	f363 324f 	bfi	r2, r3, #13, #3
  419a5e:	e61a      	b.n	419696 <list_init+0x166>
  419a60:	f04f 32ff 	mov.w	r2, #4294967295
  419a64:	e633      	b.n	4196ce <list_init+0x19e>
  419a66:	f04f 32ff 	mov.w	r2, #4294967295
  419a6a:	e63f      	b.n	4196ec <list_init+0x1bc>
  419a6c:	f04f 0200 	mov.w	r2, #0
  419a70:	2304      	movs	r3, #4
  419a72:	f363 0202 	bfi	r2, r3, #0, #3
  419a76:	2313      	movs	r3, #19
  419a78:	f363 02c7 	bfi	r2, r3, #3, #5
  419a7c:	f363 220c 	bfi	r2, r3, #8, #5
  419a80:	2306      	movs	r3, #6
  419a82:	f363 324f 	bfi	r2, r3, #13, #3
  419a86:	e64b      	b.n	419720 <list_init+0x1f0>
  419a88:	f04f 0200 	mov.w	r2, #0
  419a8c:	2304      	movs	r3, #4
  419a8e:	f363 0202 	bfi	r2, r3, #0, #3
  419a92:	2310      	movs	r3, #16
  419a94:	f363 02c7 	bfi	r2, r3, #3, #5
  419a98:	2312      	movs	r3, #18
  419a9a:	f363 220c 	bfi	r2, r3, #8, #5
  419a9e:	2302      	movs	r3, #2
  419aa0:	f363 324f 	bfi	r2, r3, #13, #3
  419aa4:	e65e      	b.n	419764 <list_init+0x234>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  419aa6:	2000      	movs	r0, #0
  419aa8:	4b34      	ldr	r3, [pc, #208]	; (419b7c <list_init+0x64c>)
  419aaa:	4798      	blx	r3
  419aac:	3028      	adds	r0, #40	; 0x28
  419aae:	0040      	lsls	r0, r0, #1
  419ab0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419ab4:	da01      	bge.n	419aba <list_init+0x58a>
  419ab6:	2201      	movs	r2, #1
  419ab8:	e673      	b.n	4197a2 <list_init+0x272>
  419aba:	2000      	movs	r0, #0
  419abc:	4b2f      	ldr	r3, [pc, #188]	; (419b7c <list_init+0x64c>)
  419abe:	4798      	blx	r3
  419ac0:	3028      	adds	r0, #40	; 0x28
  419ac2:	0040      	lsls	r0, r0, #1
  419ac4:	4b2e      	ldr	r3, [pc, #184]	; (419b80 <list_init+0x650>)
  419ac6:	fb83 2300 	smull	r2, r3, r3, r0
  419aca:	17c2      	asrs	r2, r0, #31
  419acc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419ad0:	b212      	sxth	r2, r2
  419ad2:	e666      	b.n	4197a2 <list_init+0x272>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  419ad4:	2000      	movs	r0, #0
  419ad6:	4b29      	ldr	r3, [pc, #164]	; (419b7c <list_init+0x64c>)
  419ad8:	4798      	blx	r3
  419ada:	3028      	adds	r0, #40	; 0x28
  419adc:	0040      	lsls	r0, r0, #1
  419ade:	4b28      	ldr	r3, [pc, #160]	; (419b80 <list_init+0x650>)
  419ae0:	fb83 2300 	smull	r2, r3, r3, r0
  419ae4:	17c2      	asrs	r2, r0, #31
  419ae6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419aea:	b212      	sxth	r2, r2
  419aec:	e66c      	b.n	4197c8 <list_init+0x298>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419aee:	2000      	movs	r0, #0
  419af0:	4b22      	ldr	r3, [pc, #136]	; (419b7c <list_init+0x64c>)
  419af2:	4798      	blx	r3
  419af4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419af8:	3050      	adds	r0, #80	; 0x50
  419afa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419afe:	da01      	bge.n	419b04 <list_init+0x5d4>
  419b00:	2201      	movs	r2, #1
  419b02:	e67b      	b.n	4197fc <list_init+0x2cc>
  419b04:	2000      	movs	r0, #0
  419b06:	4b1d      	ldr	r3, [pc, #116]	; (419b7c <list_init+0x64c>)
  419b08:	4798      	blx	r3
  419b0a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b0e:	3050      	adds	r0, #80	; 0x50
  419b10:	4b1b      	ldr	r3, [pc, #108]	; (419b80 <list_init+0x650>)
  419b12:	fb83 2300 	smull	r2, r3, r3, r0
  419b16:	17c2      	asrs	r2, r0, #31
  419b18:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b1c:	b212      	sxth	r2, r2
  419b1e:	e66d      	b.n	4197fc <list_init+0x2cc>
  419b20:	2000      	movs	r0, #0
  419b22:	4b16      	ldr	r3, [pc, #88]	; (419b7c <list_init+0x64c>)
  419b24:	4798      	blx	r3
  419b26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b2a:	0040      	lsls	r0, r0, #1
  419b2c:	3050      	adds	r0, #80	; 0x50
  419b2e:	4b14      	ldr	r3, [pc, #80]	; (419b80 <list_init+0x650>)
  419b30:	fb83 2300 	smull	r2, r3, r3, r0
  419b34:	17c2      	asrs	r2, r0, #31
  419b36:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b3a:	b212      	sxth	r2, r2
  419b3c:	e65e      	b.n	4197fc <list_init+0x2cc>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419b3e:	2000      	movs	r0, #0
  419b40:	4b0e      	ldr	r3, [pc, #56]	; (419b7c <list_init+0x64c>)
  419b42:	4798      	blx	r3
  419b44:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b48:	3050      	adds	r0, #80	; 0x50
  419b4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419b4e:	da01      	bge.n	419b54 <list_init+0x624>
  419b50:	2201      	movs	r2, #1
  419b52:	e680      	b.n	419856 <list_init+0x326>
  419b54:	2000      	movs	r0, #0
  419b56:	4b09      	ldr	r3, [pc, #36]	; (419b7c <list_init+0x64c>)
  419b58:	4798      	blx	r3
  419b5a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b5e:	3050      	adds	r0, #80	; 0x50
  419b60:	4b07      	ldr	r3, [pc, #28]	; (419b80 <list_init+0x650>)
  419b62:	fb83 2300 	smull	r2, r3, r3, r0
  419b66:	17c2      	asrs	r2, r0, #31
  419b68:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b6c:	b212      	sxth	r2, r2
  419b6e:	e672      	b.n	419856 <list_init+0x326>
  419b70:	004095c1 	.word	0x004095c1
  419b74:	20414798 	.word	0x20414798
  419b78:	00413fb5 	.word	0x00413fb5
  419b7c:	00413f95 	.word	0x00413f95
  419b80:	66666667 	.word	0x66666667
  419b84:	2000      	movs	r0, #0
  419b86:	4b71      	ldr	r3, [pc, #452]	; (419d4c <list_init+0x81c>)
  419b88:	4798      	blx	r3
  419b8a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b8e:	0040      	lsls	r0, r0, #1
  419b90:	3050      	adds	r0, #80	; 0x50
  419b92:	4b6f      	ldr	r3, [pc, #444]	; (419d50 <list_init+0x820>)
  419b94:	fb83 2300 	smull	r2, r3, r3, r0
  419b98:	17c2      	asrs	r2, r0, #31
  419b9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b9e:	b212      	sxth	r2, r2
  419ba0:	e659      	b.n	419856 <list_init+0x326>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419ba2:	2000      	movs	r0, #0
  419ba4:	4b69      	ldr	r3, [pc, #420]	; (419d4c <list_init+0x81c>)
  419ba6:	4798      	blx	r3
  419ba8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419bac:	3050      	adds	r0, #80	; 0x50
  419bae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419bb2:	da01      	bge.n	419bb8 <list_init+0x688>
  419bb4:	2201      	movs	r2, #1
  419bb6:	e667      	b.n	419888 <list_init+0x358>
  419bb8:	2000      	movs	r0, #0
  419bba:	4b64      	ldr	r3, [pc, #400]	; (419d4c <list_init+0x81c>)
  419bbc:	4798      	blx	r3
  419bbe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419bc2:	3050      	adds	r0, #80	; 0x50
  419bc4:	4b62      	ldr	r3, [pc, #392]	; (419d50 <list_init+0x820>)
  419bc6:	fb83 2300 	smull	r2, r3, r3, r0
  419bca:	17c2      	asrs	r2, r0, #31
  419bcc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419bd0:	b212      	sxth	r2, r2
  419bd2:	e659      	b.n	419888 <list_init+0x358>
  419bd4:	2000      	movs	r0, #0
  419bd6:	4b5d      	ldr	r3, [pc, #372]	; (419d4c <list_init+0x81c>)
  419bd8:	4798      	blx	r3
  419bda:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419bde:	0040      	lsls	r0, r0, #1
  419be0:	3050      	adds	r0, #80	; 0x50
  419be2:	4b5b      	ldr	r3, [pc, #364]	; (419d50 <list_init+0x820>)
  419be4:	fb83 2300 	smull	r2, r3, r3, r0
  419be8:	17c2      	asrs	r2, r0, #31
  419bea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419bee:	b212      	sxth	r2, r2
  419bf0:	e64a      	b.n	419888 <list_init+0x358>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419bf2:	2000      	movs	r0, #0
  419bf4:	4b55      	ldr	r3, [pc, #340]	; (419d4c <list_init+0x81c>)
  419bf6:	4798      	blx	r3
  419bf8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419bfc:	3050      	adds	r0, #80	; 0x50
  419bfe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c02:	da01      	bge.n	419c08 <list_init+0x6d8>
  419c04:	2201      	movs	r2, #1
  419c06:	e658      	b.n	4198ba <list_init+0x38a>
  419c08:	2000      	movs	r0, #0
  419c0a:	4b50      	ldr	r3, [pc, #320]	; (419d4c <list_init+0x81c>)
  419c0c:	4798      	blx	r3
  419c0e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c12:	3050      	adds	r0, #80	; 0x50
  419c14:	4b4e      	ldr	r3, [pc, #312]	; (419d50 <list_init+0x820>)
  419c16:	fb83 2300 	smull	r2, r3, r3, r0
  419c1a:	17c2      	asrs	r2, r0, #31
  419c1c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419c20:	b212      	sxth	r2, r2
  419c22:	e64a      	b.n	4198ba <list_init+0x38a>
  419c24:	2000      	movs	r0, #0
  419c26:	4b49      	ldr	r3, [pc, #292]	; (419d4c <list_init+0x81c>)
  419c28:	4798      	blx	r3
  419c2a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c2e:	0040      	lsls	r0, r0, #1
  419c30:	3050      	adds	r0, #80	; 0x50
  419c32:	4b47      	ldr	r3, [pc, #284]	; (419d50 <list_init+0x820>)
  419c34:	fb83 2300 	smull	r2, r3, r3, r0
  419c38:	17c2      	asrs	r2, r0, #31
  419c3a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419c3e:	b212      	sxth	r2, r2
  419c40:	e63b      	b.n	4198ba <list_init+0x38a>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419c42:	2000      	movs	r0, #0
  419c44:	4b41      	ldr	r3, [pc, #260]	; (419d4c <list_init+0x81c>)
  419c46:	4798      	blx	r3
  419c48:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c4c:	3050      	adds	r0, #80	; 0x50
  419c4e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c52:	da01      	bge.n	419c58 <list_init+0x728>
  419c54:	2201      	movs	r2, #1
  419c56:	e649      	b.n	4198ec <list_init+0x3bc>
  419c58:	2000      	movs	r0, #0
  419c5a:	4b3c      	ldr	r3, [pc, #240]	; (419d4c <list_init+0x81c>)
  419c5c:	4798      	blx	r3
  419c5e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c62:	3050      	adds	r0, #80	; 0x50
  419c64:	4b3a      	ldr	r3, [pc, #232]	; (419d50 <list_init+0x820>)
  419c66:	fb83 2300 	smull	r2, r3, r3, r0
  419c6a:	17c2      	asrs	r2, r0, #31
  419c6c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419c70:	b212      	sxth	r2, r2
  419c72:	e63b      	b.n	4198ec <list_init+0x3bc>
  419c74:	2000      	movs	r0, #0
  419c76:	4b35      	ldr	r3, [pc, #212]	; (419d4c <list_init+0x81c>)
  419c78:	4798      	blx	r3
  419c7a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c7e:	0040      	lsls	r0, r0, #1
  419c80:	3050      	adds	r0, #80	; 0x50
  419c82:	4b33      	ldr	r3, [pc, #204]	; (419d50 <list_init+0x820>)
  419c84:	fb83 2300 	smull	r2, r3, r3, r0
  419c88:	17c2      	asrs	r2, r0, #31
  419c8a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419c8e:	b212      	sxth	r2, r2
  419c90:	e62c      	b.n	4198ec <list_init+0x3bc>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  419c92:	2000      	movs	r0, #0
  419c94:	4b2d      	ldr	r3, [pc, #180]	; (419d4c <list_init+0x81c>)
  419c96:	4798      	blx	r3
  419c98:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c9c:	3050      	adds	r0, #80	; 0x50
  419c9e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419ca2:	da02      	bge.n	419caa <list_init+0x77a>
  419ca4:	f04f 32ff 	mov.w	r2, #4294967295
  419ca8:	e63a      	b.n	419920 <list_init+0x3f0>
  419caa:	2000      	movs	r0, #0
  419cac:	4b27      	ldr	r3, [pc, #156]	; (419d4c <list_init+0x81c>)
  419cae:	4798      	blx	r3
  419cb0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419cb4:	3050      	adds	r0, #80	; 0x50
  419cb6:	4b26      	ldr	r3, [pc, #152]	; (419d50 <list_init+0x820>)
  419cb8:	fb83 2300 	smull	r2, r3, r3, r0
  419cbc:	17c2      	asrs	r2, r0, #31
  419cbe:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419cc2:	b212      	sxth	r2, r2
  419cc4:	e62c      	b.n	419920 <list_init+0x3f0>
  419cc6:	2000      	movs	r0, #0
  419cc8:	4b20      	ldr	r3, [pc, #128]	; (419d4c <list_init+0x81c>)
  419cca:	4798      	blx	r3
  419ccc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419cd0:	0040      	lsls	r0, r0, #1
  419cd2:	3050      	adds	r0, #80	; 0x50
  419cd4:	4b1e      	ldr	r3, [pc, #120]	; (419d50 <list_init+0x820>)
  419cd6:	fb83 2300 	smull	r2, r3, r3, r0
  419cda:	17c2      	asrs	r2, r0, #31
  419cdc:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419ce0:	b212      	sxth	r2, r2
  419ce2:	e61d      	b.n	419920 <list_init+0x3f0>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  419ce4:	2000      	movs	r0, #0
  419ce6:	4b19      	ldr	r3, [pc, #100]	; (419d4c <list_init+0x81c>)
  419ce8:	4798      	blx	r3
  419cea:	3028      	adds	r0, #40	; 0x28
  419cec:	0040      	lsls	r0, r0, #1
  419cee:	4b18      	ldr	r3, [pc, #96]	; (419d50 <list_init+0x820>)
  419cf0:	fb83 2300 	smull	r2, r3, r3, r0
  419cf4:	17c2      	asrs	r2, r0, #31
  419cf6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419cfa:	b212      	sxth	r2, r2
  419cfc:	e622      	b.n	419944 <list_init+0x414>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  419cfe:	2000      	movs	r0, #0
  419d00:	4b12      	ldr	r3, [pc, #72]	; (419d4c <list_init+0x81c>)
  419d02:	4798      	blx	r3
  419d04:	3028      	adds	r0, #40	; 0x28
  419d06:	0040      	lsls	r0, r0, #1
  419d08:	4b11      	ldr	r3, [pc, #68]	; (419d50 <list_init+0x820>)
  419d0a:	fb83 2300 	smull	r2, r3, r3, r0
  419d0e:	17c2      	asrs	r2, r0, #31
  419d10:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419d14:	b212      	sxth	r2, r2
  419d16:	e628      	b.n	41996a <list_init+0x43a>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  419d18:	2000      	movs	r0, #0
  419d1a:	4b0c      	ldr	r3, [pc, #48]	; (419d4c <list_init+0x81c>)
  419d1c:	4798      	blx	r3
  419d1e:	3028      	adds	r0, #40	; 0x28
  419d20:	0040      	lsls	r0, r0, #1
  419d22:	4b0b      	ldr	r3, [pc, #44]	; (419d50 <list_init+0x820>)
  419d24:	fb83 2300 	smull	r2, r3, r3, r0
  419d28:	17c2      	asrs	r2, r0, #31
  419d2a:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419d2e:	b212      	sxth	r2, r2
  419d30:	e62e      	b.n	419990 <list_init+0x460>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  419d32:	2000      	movs	r0, #0
  419d34:	4b05      	ldr	r3, [pc, #20]	; (419d4c <list_init+0x81c>)
  419d36:	4798      	blx	r3
  419d38:	3028      	adds	r0, #40	; 0x28
  419d3a:	0040      	lsls	r0, r0, #1
  419d3c:	4b04      	ldr	r3, [pc, #16]	; (419d50 <list_init+0x820>)
  419d3e:	fb83 2300 	smull	r2, r3, r3, r0
  419d42:	17c2      	asrs	r2, r0, #31
  419d44:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419d48:	b212      	sxth	r2, r2
  419d4a:	e634      	b.n	4199b6 <list_init+0x486>
  419d4c:	00413f95 	.word	0x00413f95
  419d50:	66666667 	.word	0x66666667

00419d54 <ddlist_init>:
{
  419d54:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ddlist_page);
  419d56:	4c48      	ldr	r4, [pc, #288]	; (419e78 <ddlist_init+0x124>)
  419d58:	6820      	ldr	r0, [r4, #0]
  419d5a:	3058      	adds	r0, #88	; 0x58
  419d5c:	4b47      	ldr	r3, [pc, #284]	; (419e7c <ddlist_init+0x128>)
  419d5e:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  419d60:	6824      	ldr	r4, [r4, #0]
  419d62:	3458      	adds	r4, #88	; 0x58
  419d64:	2000      	movs	r0, #0
  419d66:	4b46      	ldr	r3, [pc, #280]	; (419e80 <ddlist_init+0x12c>)
  419d68:	4798      	blx	r3
  419d6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419d6e:	0080      	lsls	r0, r0, #2
  419d70:	3050      	adds	r0, #80	; 0x50
  419d72:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419d76:	da4d      	bge.n	419e14 <ddlist_init+0xc0>
  419d78:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  419d7a:	f248 0181 	movw	r1, #32897	; 0x8081
  419d7e:	4620      	mov	r0, r4
  419d80:	4d40      	ldr	r5, [pc, #256]	; (419e84 <ddlist_init+0x130>)
  419d82:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
  419d84:	4c3c      	ldr	r4, [pc, #240]	; (419e78 <ddlist_init+0x124>)
  419d86:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  419d88:	2201      	movs	r2, #1
  419d8a:	2102      	movs	r1, #2
  419d8c:	3058      	adds	r0, #88	; 0x58
  419d8e:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
  419d90:	6820      	ldr	r0, [r4, #0]
  419d92:	305c      	adds	r0, #92	; 0x5c
  419d94:	4b39      	ldr	r3, [pc, #228]	; (419e7c <ddlist_init+0x128>)
  419d96:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  419d98:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419d9a:	22ff      	movs	r2, #255	; 0xff
  419d9c:	212c      	movs	r1, #44	; 0x2c
  419d9e:	305c      	adds	r0, #92	; 0x5c
  419da0:	4b39      	ldr	r3, [pc, #228]	; (419e88 <ddlist_init+0x134>)
  419da2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
  419da4:	6820      	ldr	r0, [r4, #0]
  419da6:	4d39      	ldr	r5, [pc, #228]	; (419e8c <ddlist_init+0x138>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419da8:	89aa      	ldrh	r2, [r5, #12]
  419daa:	2129      	movs	r1, #41	; 0x29
  419dac:	305c      	adds	r0, #92	; 0x5c
  419dae:	4b38      	ldr	r3, [pc, #224]	; (419e90 <ddlist_init+0x13c>)
  419db0:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
  419db2:	6820      	ldr	r0, [r4, #0]
  419db4:	305c      	adds	r0, #92	; 0x5c
  419db6:	6a2b      	ldr	r3, [r5, #32]
  419db8:	f013 0f02 	tst.w	r3, #2
  419dbc:	d039      	beq.n	419e32 <ddlist_init+0xde>
  419dbe:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419dc2:	f248 0189 	movw	r1, #32905	; 0x8089
  419dc6:	4b32      	ldr	r3, [pc, #200]	; (419e90 <ddlist_init+0x13c>)
  419dc8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
  419dca:	4b2b      	ldr	r3, [pc, #172]	; (419e78 <ddlist_init+0x124>)
  419dcc:	6818      	ldr	r0, [r3, #0]
  419dce:	305c      	adds	r0, #92	; 0x5c
  419dd0:	4b2e      	ldr	r3, [pc, #184]	; (419e8c <ddlist_init+0x138>)
  419dd2:	6a1b      	ldr	r3, [r3, #32]
  419dd4:	f013 0f02 	tst.w	r3, #2
  419dd8:	d02e      	beq.n	419e38 <ddlist_init+0xe4>
  419dda:	f04f 0207 	mov.w	r2, #7
  419dde:	231d      	movs	r3, #29
  419de0:	f363 02c7 	bfi	r2, r3, #3, #5
  419de4:	f363 220c 	bfi	r2, r3, #8, #5
  419de8:	2303      	movs	r3, #3
  419dea:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419dee:	f241 0129 	movw	r1, #4137	; 0x1029
  419df2:	4b27      	ldr	r3, [pc, #156]	; (419e90 <ddlist_init+0x13c>)
  419df4:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  419df6:	4b20      	ldr	r3, [pc, #128]	; (419e78 <ddlist_init+0x124>)
  419df8:	6818      	ldr	r0, [r3, #0]
  419dfa:	305c      	adds	r0, #92	; 0x5c
  419dfc:	4b23      	ldr	r3, [pc, #140]	; (419e8c <ddlist_init+0x138>)
  419dfe:	6a1b      	ldr	r3, [r3, #32]
  419e00:	f013 0f02 	tst.w	r3, #2
  419e04:	d127      	bne.n	419e56 <ddlist_init+0x102>
  419e06:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419e0a:	f249 0189 	movw	r1, #37001	; 0x9089
  419e0e:	4b20      	ldr	r3, [pc, #128]	; (419e90 <ddlist_init+0x13c>)
  419e10:	4798      	blx	r3
  419e12:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  419e14:	2000      	movs	r0, #0
  419e16:	4b1a      	ldr	r3, [pc, #104]	; (419e80 <ddlist_init+0x12c>)
  419e18:	4798      	blx	r3
  419e1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419e1e:	0080      	lsls	r0, r0, #2
  419e20:	3050      	adds	r0, #80	; 0x50
  419e22:	4b1c      	ldr	r3, [pc, #112]	; (419e94 <ddlist_init+0x140>)
  419e24:	fb83 2300 	smull	r2, r3, r3, r0
  419e28:	17c2      	asrs	r2, r0, #31
  419e2a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419e2e:	b212      	sxth	r2, r2
  419e30:	e7a3      	b.n	419d7a <ddlist_init+0x26>
  419e32:	f04f 32ff 	mov.w	r2, #4294967295
  419e36:	e7c4      	b.n	419dc2 <ddlist_init+0x6e>
  419e38:	f04f 0200 	mov.w	r2, #0
  419e3c:	2302      	movs	r3, #2
  419e3e:	f363 0202 	bfi	r2, r3, #0, #3
  419e42:	2309      	movs	r3, #9
  419e44:	f363 02c7 	bfi	r2, r3, #3, #5
  419e48:	230a      	movs	r3, #10
  419e4a:	f363 220c 	bfi	r2, r3, #8, #5
  419e4e:	2303      	movs	r3, #3
  419e50:	f363 324f 	bfi	r2, r3, #13, #3
  419e54:	e7cb      	b.n	419dee <ddlist_init+0x9a>
  419e56:	f04f 0200 	mov.w	r2, #0
  419e5a:	2301      	movs	r3, #1
  419e5c:	f363 0202 	bfi	r2, r3, #0, #3
  419e60:	2307      	movs	r3, #7
  419e62:	f363 02c7 	bfi	r2, r3, #3, #5
  419e66:	2308      	movs	r3, #8
  419e68:	f363 220c 	bfi	r2, r3, #8, #5
  419e6c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419e70:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  419e74:	e7c9      	b.n	419e0a <ddlist_init+0xb6>
  419e76:	bf00      	nop
  419e78:	20414798 	.word	0x20414798
  419e7c:	0041704d 	.word	0x0041704d
  419e80:	00413f95 	.word	0x00413f95
  419e84:	004095c1 	.word	0x004095c1
  419e88:	004098e1 	.word	0x004098e1
  419e8c:	2041479c 	.word	0x2041479c
  419e90:	00409751 	.word	0x00409751
  419e94:	66666667 	.word	0x66666667

00419e98 <roller_init>:
{
  419e98:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->roller_bg);
  419e9a:	4c21      	ldr	r4, [pc, #132]	; (419f20 <roller_init+0x88>)
  419e9c:	6820      	ldr	r0, [r4, #0]
  419e9e:	308c      	adds	r0, #140	; 0x8c
  419ea0:	4b20      	ldr	r3, [pc, #128]	; (419f24 <roller_init+0x8c>)
  419ea2:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  419ea4:	6824      	ldr	r4, [r4, #0]
  419ea6:	348c      	adds	r4, #140	; 0x8c
  419ea8:	2000      	movs	r0, #0
  419eaa:	4b1f      	ldr	r3, [pc, #124]	; (419f28 <roller_init+0x90>)
  419eac:	4798      	blx	r3
  419eae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419eb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419eb6:	3050      	adds	r0, #80	; 0x50
  419eb8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419ebc:	da1f      	bge.n	419efe <roller_init+0x66>
  419ebe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  419ec0:	f248 0181 	movw	r1, #32897	; 0x8081
  419ec4:	4620      	mov	r0, r4
  419ec6:	4b19      	ldr	r3, [pc, #100]	; (419f2c <roller_init+0x94>)
  419ec8:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
  419eca:	4c15      	ldr	r4, [pc, #84]	; (419f20 <roller_init+0x88>)
  419ecc:	6820      	ldr	r0, [r4, #0]
  419ece:	3090      	adds	r0, #144	; 0x90
  419ed0:	4b14      	ldr	r3, [pc, #80]	; (419f24 <roller_init+0x8c>)
  419ed2:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  419ed4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419ed6:	22ff      	movs	r2, #255	; 0xff
  419ed8:	212c      	movs	r1, #44	; 0x2c
  419eda:	3090      	adds	r0, #144	; 0x90
  419edc:	4b14      	ldr	r3, [pc, #80]	; (419f30 <roller_init+0x98>)
  419ede:	4798      	blx	r3
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
  419ee0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419ee2:	4b14      	ldr	r3, [pc, #80]	; (419f34 <roller_init+0x9c>)
  419ee4:	899a      	ldrh	r2, [r3, #12]
  419ee6:	2129      	movs	r1, #41	; 0x29
  419ee8:	3090      	adds	r0, #144	; 0x90
  419eea:	4d13      	ldr	r5, [pc, #76]	; (419f38 <roller_init+0xa0>)
  419eec:	47a8      	blx	r5
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  419eee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419ef0:	4b12      	ldr	r3, [pc, #72]	; (419f3c <roller_init+0xa4>)
  419ef2:	881a      	ldrh	r2, [r3, #0]
  419ef4:	f248 0189 	movw	r1, #32905	; 0x8089
  419ef8:	3090      	adds	r0, #144	; 0x90
  419efa:	47a8      	blx	r5
  419efc:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  419efe:	2000      	movs	r0, #0
  419f00:	4b09      	ldr	r3, [pc, #36]	; (419f28 <roller_init+0x90>)
  419f02:	4798      	blx	r3
  419f04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419f08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419f0c:	3050      	adds	r0, #80	; 0x50
  419f0e:	4b0c      	ldr	r3, [pc, #48]	; (419f40 <roller_init+0xa8>)
  419f10:	fb83 2300 	smull	r2, r3, r3, r0
  419f14:	17c2      	asrs	r2, r0, #31
  419f16:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419f1a:	b212      	sxth	r2, r2
  419f1c:	e7d0      	b.n	419ec0 <roller_init+0x28>
  419f1e:	bf00      	nop
  419f20:	20414798 	.word	0x20414798
  419f24:	0041704d 	.word	0x0041704d
  419f28:	00413f95 	.word	0x00413f95
  419f2c:	004095c1 	.word	0x004095c1
  419f30:	004098e1 	.word	0x004098e1
  419f34:	2041479c 	.word	0x2041479c
  419f38:	00409751 	.word	0x00409751
  419f3c:	0042497c 	.word	0x0042497c
  419f40:	66666667 	.word	0x66666667

00419f44 <table_init>:
{
  419f44:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->table_cell);
  419f46:	4c9d      	ldr	r4, [pc, #628]	; (41a1bc <table_init+0x278>)
  419f48:	6820      	ldr	r0, [r4, #0]
  419f4a:	30a4      	adds	r0, #164	; 0xa4
  419f4c:	4b9c      	ldr	r3, [pc, #624]	; (41a1c0 <table_init+0x27c>)
  419f4e:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  419f50:	6820      	ldr	r0, [r4, #0]
  419f52:	30a4      	adds	r0, #164	; 0xa4
  419f54:	4b9b      	ldr	r3, [pc, #620]	; (41a1c4 <table_init+0x280>)
  419f56:	6a1b      	ldr	r3, [r3, #32]
  419f58:	f013 0f02 	tst.w	r3, #2
  419f5c:	d07e      	beq.n	41a05c <table_init+0x118>
  419f5e:	f04f 0200 	mov.w	r2, #0
  419f62:	2306      	movs	r3, #6
  419f64:	f363 0202 	bfi	r2, r3, #0, #3
  419f68:	231a      	movs	r3, #26
  419f6a:	f363 02c7 	bfi	r2, r3, #3, #5
  419f6e:	231c      	movs	r3, #28
  419f70:	f363 220c 	bfi	r2, r3, #8, #5
  419f74:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419f78:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419f7c:	2139      	movs	r1, #57	; 0x39
  419f7e:	4b92      	ldr	r3, [pc, #584]	; (41a1c8 <table_init+0x284>)
  419f80:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
  419f82:	4c8e      	ldr	r4, [pc, #568]	; (41a1bc <table_init+0x278>)
  419f84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419f86:	2201      	movs	r2, #1
  419f88:	2130      	movs	r1, #48	; 0x30
  419f8a:	30a4      	adds	r0, #164	; 0xa4
  419f8c:	4d8f      	ldr	r5, [pc, #572]	; (41a1cc <table_init+0x288>)
  419f8e:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
  419f90:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419f92:	2203      	movs	r2, #3
  419f94:	2131      	movs	r1, #49	; 0x31
  419f96:	30a4      	adds	r0, #164	; 0xa4
  419f98:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  419f9a:	6824      	ldr	r4, [r4, #0]
  419f9c:	34a4      	adds	r4, #164	; 0xa4
  419f9e:	2000      	movs	r0, #0
  419fa0:	4b8b      	ldr	r3, [pc, #556]	; (41a1d0 <table_init+0x28c>)
  419fa2:	4798      	blx	r3
  419fa4:	2801      	cmp	r0, #1
  419fa6:	d968      	bls.n	41a07a <table_init+0x136>
  419fa8:	2000      	movs	r0, #0
  419faa:	4b8a      	ldr	r3, [pc, #552]	; (41a1d4 <table_init+0x290>)
  419fac:	4798      	blx	r3
  419fae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fb2:	0040      	lsls	r0, r0, #1
  419fb4:	3050      	adds	r0, #80	; 0x50
  419fb6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419fba:	da77      	bge.n	41a0ac <table_init+0x168>
  419fbc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419fbe:	2112      	movs	r1, #18
  419fc0:	4620      	mov	r0, r4
  419fc2:	4b82      	ldr	r3, [pc, #520]	; (41a1cc <table_init+0x288>)
  419fc4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  419fc6:	4b7d      	ldr	r3, [pc, #500]	; (41a1bc <table_init+0x278>)
  419fc8:	681c      	ldr	r4, [r3, #0]
  419fca:	34a4      	adds	r4, #164	; 0xa4
  419fcc:	2000      	movs	r0, #0
  419fce:	4b80      	ldr	r3, [pc, #512]	; (41a1d0 <table_init+0x28c>)
  419fd0:	4798      	blx	r3
  419fd2:	2801      	cmp	r0, #1
  419fd4:	d979      	bls.n	41a0ca <table_init+0x186>
  419fd6:	2000      	movs	r0, #0
  419fd8:	4b7e      	ldr	r3, [pc, #504]	; (41a1d4 <table_init+0x290>)
  419fda:	4798      	blx	r3
  419fdc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fe0:	0040      	lsls	r0, r0, #1
  419fe2:	3050      	adds	r0, #80	; 0x50
  419fe4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419fe8:	f280 8088 	bge.w	41a0fc <table_init+0x1b8>
  419fec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419fee:	2113      	movs	r1, #19
  419ff0:	4620      	mov	r0, r4
  419ff2:	4b76      	ldr	r3, [pc, #472]	; (41a1cc <table_init+0x288>)
  419ff4:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  419ff6:	4b71      	ldr	r3, [pc, #452]	; (41a1bc <table_init+0x278>)
  419ff8:	681c      	ldr	r4, [r3, #0]
  419ffa:	34a4      	adds	r4, #164	; 0xa4
  419ffc:	2000      	movs	r0, #0
  419ffe:	4b74      	ldr	r3, [pc, #464]	; (41a1d0 <table_init+0x28c>)
  41a000:	4798      	blx	r3
  41a002:	2801      	cmp	r0, #1
  41a004:	f240 8089 	bls.w	41a11a <table_init+0x1d6>
  41a008:	2000      	movs	r0, #0
  41a00a:	4b72      	ldr	r3, [pc, #456]	; (41a1d4 <table_init+0x290>)
  41a00c:	4798      	blx	r3
  41a00e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a012:	0040      	lsls	r0, r0, #1
  41a014:	3050      	adds	r0, #80	; 0x50
  41a016:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a01a:	f280 8097 	bge.w	41a14c <table_init+0x208>
  41a01e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a020:	2110      	movs	r1, #16
  41a022:	4620      	mov	r0, r4
  41a024:	4b69      	ldr	r3, [pc, #420]	; (41a1cc <table_init+0x288>)
  41a026:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a028:	4b64      	ldr	r3, [pc, #400]	; (41a1bc <table_init+0x278>)
  41a02a:	681c      	ldr	r4, [r3, #0]
  41a02c:	34a4      	adds	r4, #164	; 0xa4
  41a02e:	2000      	movs	r0, #0
  41a030:	4b67      	ldr	r3, [pc, #412]	; (41a1d0 <table_init+0x28c>)
  41a032:	4798      	blx	r3
  41a034:	2801      	cmp	r0, #1
  41a036:	f240 8098 	bls.w	41a16a <table_init+0x226>
  41a03a:	2000      	movs	r0, #0
  41a03c:	4b65      	ldr	r3, [pc, #404]	; (41a1d4 <table_init+0x290>)
  41a03e:	4798      	blx	r3
  41a040:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a044:	0040      	lsls	r0, r0, #1
  41a046:	3050      	adds	r0, #80	; 0x50
  41a048:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a04c:	f280 80a6 	bge.w	41a19c <table_init+0x258>
  41a050:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a052:	2111      	movs	r1, #17
  41a054:	4620      	mov	r0, r4
  41a056:	4b5d      	ldr	r3, [pc, #372]	; (41a1cc <table_init+0x288>)
  41a058:	4798      	blx	r3
  41a05a:	bd38      	pop	{r3, r4, r5, pc}
  41a05c:	f04f 0200 	mov.w	r2, #0
  41a060:	2304      	movs	r3, #4
  41a062:	f363 0202 	bfi	r2, r3, #0, #3
  41a066:	2310      	movs	r3, #16
  41a068:	f363 02c7 	bfi	r2, r3, #3, #5
  41a06c:	2312      	movs	r3, #18
  41a06e:	f363 220c 	bfi	r2, r3, #8, #5
  41a072:	2302      	movs	r3, #2
  41a074:	f363 324f 	bfi	r2, r3, #13, #3
  41a078:	e780      	b.n	419f7c <table_init+0x38>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a07a:	2000      	movs	r0, #0
  41a07c:	4b55      	ldr	r3, [pc, #340]	; (41a1d4 <table_init+0x290>)
  41a07e:	4798      	blx	r3
  41a080:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a084:	3050      	adds	r0, #80	; 0x50
  41a086:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a08a:	da01      	bge.n	41a090 <table_init+0x14c>
  41a08c:	2201      	movs	r2, #1
  41a08e:	e796      	b.n	419fbe <table_init+0x7a>
  41a090:	2000      	movs	r0, #0
  41a092:	4b50      	ldr	r3, [pc, #320]	; (41a1d4 <table_init+0x290>)
  41a094:	4798      	blx	r3
  41a096:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a09a:	3050      	adds	r0, #80	; 0x50
  41a09c:	4b4e      	ldr	r3, [pc, #312]	; (41a1d8 <table_init+0x294>)
  41a09e:	fb83 2300 	smull	r2, r3, r3, r0
  41a0a2:	17c2      	asrs	r2, r0, #31
  41a0a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0a8:	b212      	sxth	r2, r2
  41a0aa:	e788      	b.n	419fbe <table_init+0x7a>
  41a0ac:	2000      	movs	r0, #0
  41a0ae:	4b49      	ldr	r3, [pc, #292]	; (41a1d4 <table_init+0x290>)
  41a0b0:	4798      	blx	r3
  41a0b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0b6:	0040      	lsls	r0, r0, #1
  41a0b8:	3050      	adds	r0, #80	; 0x50
  41a0ba:	4b47      	ldr	r3, [pc, #284]	; (41a1d8 <table_init+0x294>)
  41a0bc:	fb83 2300 	smull	r2, r3, r3, r0
  41a0c0:	17c2      	asrs	r2, r0, #31
  41a0c2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0c6:	b212      	sxth	r2, r2
  41a0c8:	e779      	b.n	419fbe <table_init+0x7a>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a0ca:	2000      	movs	r0, #0
  41a0cc:	4b41      	ldr	r3, [pc, #260]	; (41a1d4 <table_init+0x290>)
  41a0ce:	4798      	blx	r3
  41a0d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0d4:	3050      	adds	r0, #80	; 0x50
  41a0d6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a0da:	da01      	bge.n	41a0e0 <table_init+0x19c>
  41a0dc:	2201      	movs	r2, #1
  41a0de:	e786      	b.n	419fee <table_init+0xaa>
  41a0e0:	2000      	movs	r0, #0
  41a0e2:	4b3c      	ldr	r3, [pc, #240]	; (41a1d4 <table_init+0x290>)
  41a0e4:	4798      	blx	r3
  41a0e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0ea:	3050      	adds	r0, #80	; 0x50
  41a0ec:	4b3a      	ldr	r3, [pc, #232]	; (41a1d8 <table_init+0x294>)
  41a0ee:	fb83 2300 	smull	r2, r3, r3, r0
  41a0f2:	17c2      	asrs	r2, r0, #31
  41a0f4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0f8:	b212      	sxth	r2, r2
  41a0fa:	e778      	b.n	419fee <table_init+0xaa>
  41a0fc:	2000      	movs	r0, #0
  41a0fe:	4b35      	ldr	r3, [pc, #212]	; (41a1d4 <table_init+0x290>)
  41a100:	4798      	blx	r3
  41a102:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a106:	0040      	lsls	r0, r0, #1
  41a108:	3050      	adds	r0, #80	; 0x50
  41a10a:	4b33      	ldr	r3, [pc, #204]	; (41a1d8 <table_init+0x294>)
  41a10c:	fb83 2300 	smull	r2, r3, r3, r0
  41a110:	17c2      	asrs	r2, r0, #31
  41a112:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a116:	b212      	sxth	r2, r2
  41a118:	e769      	b.n	419fee <table_init+0xaa>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a11a:	2000      	movs	r0, #0
  41a11c:	4b2d      	ldr	r3, [pc, #180]	; (41a1d4 <table_init+0x290>)
  41a11e:	4798      	blx	r3
  41a120:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a124:	3050      	adds	r0, #80	; 0x50
  41a126:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a12a:	da01      	bge.n	41a130 <table_init+0x1ec>
  41a12c:	2201      	movs	r2, #1
  41a12e:	e777      	b.n	41a020 <table_init+0xdc>
  41a130:	2000      	movs	r0, #0
  41a132:	4b28      	ldr	r3, [pc, #160]	; (41a1d4 <table_init+0x290>)
  41a134:	4798      	blx	r3
  41a136:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a13a:	3050      	adds	r0, #80	; 0x50
  41a13c:	4b26      	ldr	r3, [pc, #152]	; (41a1d8 <table_init+0x294>)
  41a13e:	fb83 2300 	smull	r2, r3, r3, r0
  41a142:	17c2      	asrs	r2, r0, #31
  41a144:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a148:	b212      	sxth	r2, r2
  41a14a:	e769      	b.n	41a020 <table_init+0xdc>
  41a14c:	2000      	movs	r0, #0
  41a14e:	4b21      	ldr	r3, [pc, #132]	; (41a1d4 <table_init+0x290>)
  41a150:	4798      	blx	r3
  41a152:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a156:	0040      	lsls	r0, r0, #1
  41a158:	3050      	adds	r0, #80	; 0x50
  41a15a:	4b1f      	ldr	r3, [pc, #124]	; (41a1d8 <table_init+0x294>)
  41a15c:	fb83 2300 	smull	r2, r3, r3, r0
  41a160:	17c2      	asrs	r2, r0, #31
  41a162:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a166:	b212      	sxth	r2, r2
  41a168:	e75a      	b.n	41a020 <table_init+0xdc>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a16a:	2000      	movs	r0, #0
  41a16c:	4b19      	ldr	r3, [pc, #100]	; (41a1d4 <table_init+0x290>)
  41a16e:	4798      	blx	r3
  41a170:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a174:	3050      	adds	r0, #80	; 0x50
  41a176:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a17a:	da01      	bge.n	41a180 <table_init+0x23c>
  41a17c:	2201      	movs	r2, #1
  41a17e:	e768      	b.n	41a052 <table_init+0x10e>
  41a180:	2000      	movs	r0, #0
  41a182:	4b14      	ldr	r3, [pc, #80]	; (41a1d4 <table_init+0x290>)
  41a184:	4798      	blx	r3
  41a186:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a18a:	3050      	adds	r0, #80	; 0x50
  41a18c:	4b12      	ldr	r3, [pc, #72]	; (41a1d8 <table_init+0x294>)
  41a18e:	fb83 2300 	smull	r2, r3, r3, r0
  41a192:	17c2      	asrs	r2, r0, #31
  41a194:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a198:	b212      	sxth	r2, r2
  41a19a:	e75a      	b.n	41a052 <table_init+0x10e>
  41a19c:	2000      	movs	r0, #0
  41a19e:	4b0d      	ldr	r3, [pc, #52]	; (41a1d4 <table_init+0x290>)
  41a1a0:	4798      	blx	r3
  41a1a2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a1a6:	0040      	lsls	r0, r0, #1
  41a1a8:	3050      	adds	r0, #80	; 0x50
  41a1aa:	4b0b      	ldr	r3, [pc, #44]	; (41a1d8 <table_init+0x294>)
  41a1ac:	fb83 2300 	smull	r2, r3, r3, r0
  41a1b0:	17c2      	asrs	r2, r0, #31
  41a1b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a1b6:	b212      	sxth	r2, r2
  41a1b8:	e74b      	b.n	41a052 <table_init+0x10e>
  41a1ba:	bf00      	nop
  41a1bc:	20414798 	.word	0x20414798
  41a1c0:	0041704d 	.word	0x0041704d
  41a1c4:	2041479c 	.word	0x2041479c
  41a1c8:	00409751 	.word	0x00409751
  41a1cc:	004095c1 	.word	0x004095c1
  41a1d0:	00413fb5 	.word	0x00413fb5
  41a1d4:	00413f95 	.word	0x00413f95
  41a1d8:	66666667 	.word	0x66666667

0041a1dc <tabview_win_shared_init>:
{
  41a1dc:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->tabview_btns_bg);
  41a1de:	4cbe      	ldr	r4, [pc, #760]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a1e0:	6820      	ldr	r0, [r4, #0]
  41a1e2:	30ac      	adds	r0, #172	; 0xac
  41a1e4:	4bbd      	ldr	r3, [pc, #756]	; (41a4dc <tabview_win_shared_init+0x300>)
  41a1e6:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a1e8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a1ea:	22ff      	movs	r2, #255	; 0xff
  41a1ec:	212c      	movs	r1, #44	; 0x2c
  41a1ee:	30ac      	adds	r0, #172	; 0xac
  41a1f0:	4bbb      	ldr	r3, [pc, #748]	; (41a4e0 <tabview_win_shared_init+0x304>)
  41a1f2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
  41a1f4:	6820      	ldr	r0, [r4, #0]
  41a1f6:	30ac      	adds	r0, #172	; 0xac
  41a1f8:	4bba      	ldr	r3, [pc, #744]	; (41a4e4 <tabview_win_shared_init+0x308>)
  41a1fa:	6a1b      	ldr	r3, [r3, #32]
  41a1fc:	f013 0f02 	tst.w	r3, #2
  41a200:	f000 8198 	beq.w	41a534 <tabview_win_shared_init+0x358>
  41a204:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a208:	2129      	movs	r1, #41	; 0x29
  41a20a:	4bb7      	ldr	r3, [pc, #732]	; (41a4e8 <tabview_win_shared_init+0x30c>)
  41a20c:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41a20e:	4bb2      	ldr	r3, [pc, #712]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a210:	6818      	ldr	r0, [r3, #0]
  41a212:	30ac      	adds	r0, #172	; 0xac
  41a214:	4bb3      	ldr	r3, [pc, #716]	; (41a4e4 <tabview_win_shared_init+0x308>)
  41a216:	6a1b      	ldr	r3, [r3, #32]
  41a218:	f013 0f02 	tst.w	r3, #2
  41a21c:	f000 8198 	beq.w	41a550 <tabview_win_shared_init+0x374>
  41a220:	f04f 0200 	mov.w	r2, #0
  41a224:	2301      	movs	r3, #1
  41a226:	f363 0202 	bfi	r2, r3, #0, #3
  41a22a:	2307      	movs	r3, #7
  41a22c:	f363 02c7 	bfi	r2, r3, #3, #5
  41a230:	2308      	movs	r3, #8
  41a232:	f363 220c 	bfi	r2, r3, #8, #5
  41a236:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a23a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a23e:	f248 0189 	movw	r1, #32905	; 0x8089
  41a242:	4da9      	ldr	r5, [pc, #676]	; (41a4e8 <tabview_win_shared_init+0x30c>)
  41a244:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
  41a246:	4ca4      	ldr	r4, [pc, #656]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a248:	6820      	ldr	r0, [r4, #0]
  41a24a:	f04f 0200 	mov.w	r2, #0
  41a24e:	2304      	movs	r3, #4
  41a250:	f363 0202 	bfi	r2, r3, #0, #3
  41a254:	2312      	movs	r3, #18
  41a256:	f363 02c7 	bfi	r2, r3, #3, #5
  41a25a:	2313      	movs	r3, #19
  41a25c:	f363 220c 	bfi	r2, r3, #8, #5
  41a260:	2306      	movs	r3, #6
  41a262:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41a266:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41a26a:	30ac      	adds	r0, #172	; 0xac
  41a26c:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41a26e:	6824      	ldr	r4, [r4, #0]
  41a270:	34ac      	adds	r4, #172	; 0xac
  41a272:	2000      	movs	r0, #0
  41a274:	4b9d      	ldr	r3, [pc, #628]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a276:	4798      	blx	r3
  41a278:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a27c:	3050      	adds	r0, #80	; 0x50
  41a27e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a282:	f280 8171 	bge.w	41a568 <tabview_win_shared_init+0x38c>
  41a286:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a288:	2110      	movs	r1, #16
  41a28a:	4620      	mov	r0, r4
  41a28c:	4b98      	ldr	r3, [pc, #608]	; (41a4f0 <tabview_win_shared_init+0x314>)
  41a28e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41a290:	4b91      	ldr	r3, [pc, #580]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a292:	681c      	ldr	r4, [r3, #0]
  41a294:	34ac      	adds	r4, #172	; 0xac
  41a296:	2000      	movs	r0, #0
  41a298:	4b94      	ldr	r3, [pc, #592]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a29a:	4798      	blx	r3
  41a29c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a2a0:	3050      	adds	r0, #80	; 0x50
  41a2a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a2a6:	f280 816d 	bge.w	41a584 <tabview_win_shared_init+0x3a8>
  41a2aa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a2ac:	2112      	movs	r1, #18
  41a2ae:	4620      	mov	r0, r4
  41a2b0:	4b8f      	ldr	r3, [pc, #572]	; (41a4f0 <tabview_win_shared_init+0x314>)
  41a2b2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41a2b4:	4b88      	ldr	r3, [pc, #544]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a2b6:	681c      	ldr	r4, [r3, #0]
  41a2b8:	34ac      	adds	r4, #172	; 0xac
  41a2ba:	2000      	movs	r0, #0
  41a2bc:	4b8b      	ldr	r3, [pc, #556]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a2be:	4798      	blx	r3
  41a2c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a2c4:	3050      	adds	r0, #80	; 0x50
  41a2c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a2ca:	f280 8169 	bge.w	41a5a0 <tabview_win_shared_init+0x3c4>
  41a2ce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a2d0:	2113      	movs	r1, #19
  41a2d2:	4620      	mov	r0, r4
  41a2d4:	4b86      	ldr	r3, [pc, #536]	; (41a4f0 <tabview_win_shared_init+0x314>)
  41a2d6:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
  41a2d8:	4c7f      	ldr	r4, [pc, #508]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a2da:	6820      	ldr	r0, [r4, #0]
  41a2dc:	30a8      	adds	r0, #168	; 0xa8
  41a2de:	4b7f      	ldr	r3, [pc, #508]	; (41a4dc <tabview_win_shared_init+0x300>)
  41a2e0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
  41a2e2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a2e4:	227f      	movs	r2, #127	; 0x7f
  41a2e6:	f241 012c 	movw	r1, #4140	; 0x102c
  41a2ea:	30a8      	adds	r0, #168	; 0xa8
  41a2ec:	4b7c      	ldr	r3, [pc, #496]	; (41a4e0 <tabview_win_shared_init+0x304>)
  41a2ee:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
  41a2f0:	6820      	ldr	r0, [r4, #0]
  41a2f2:	f04f 0200 	mov.w	r2, #0
  41a2f6:	2304      	movs	r3, #4
  41a2f8:	f363 0202 	bfi	r2, r3, #0, #3
  41a2fc:	2311      	movs	r3, #17
  41a2fe:	f363 02c7 	bfi	r2, r3, #3, #5
  41a302:	f363 220c 	bfi	r2, r3, #8, #5
  41a306:	2302      	movs	r3, #2
  41a308:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a30c:	f241 0129 	movw	r1, #4137	; 0x1029
  41a310:	30a8      	adds	r0, #168	; 0xa8
  41a312:	4b75      	ldr	r3, [pc, #468]	; (41a4e8 <tabview_win_shared_init+0x30c>)
  41a314:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
  41a316:	6820      	ldr	r0, [r4, #0]
  41a318:	30a8      	adds	r0, #168	; 0xa8
  41a31a:	4b72      	ldr	r3, [pc, #456]	; (41a4e4 <tabview_win_shared_init+0x308>)
  41a31c:	6a1b      	ldr	r3, [r3, #32]
  41a31e:	f013 0f02 	tst.w	r3, #2
  41a322:	f000 814b 	beq.w	41a5bc <tabview_win_shared_init+0x3e0>
  41a326:	f04f 0200 	mov.w	r2, #0
  41a32a:	2301      	movs	r3, #1
  41a32c:	f363 0202 	bfi	r2, r3, #0, #3
  41a330:	2307      	movs	r3, #7
  41a332:	f363 02c7 	bfi	r2, r3, #3, #5
  41a336:	2308      	movs	r3, #8
  41a338:	f363 220c 	bfi	r2, r3, #8, #5
  41a33c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a340:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a344:	f248 1189 	movw	r1, #33161	; 0x8189
  41a348:	4b67      	ldr	r3, [pc, #412]	; (41a4e8 <tabview_win_shared_init+0x30c>)
  41a34a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41a34c:	4b62      	ldr	r3, [pc, #392]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a34e:	681c      	ldr	r4, [r3, #0]
  41a350:	34a8      	adds	r4, #168	; 0xa8
  41a352:	2000      	movs	r0, #0
  41a354:	4b65      	ldr	r3, [pc, #404]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a356:	4798      	blx	r3
  41a358:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a35c:	0080      	lsls	r0, r0, #2
  41a35e:	3050      	adds	r0, #80	; 0x50
  41a360:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a364:	f280 8136 	bge.w	41a5d4 <tabview_win_shared_init+0x3f8>
  41a368:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a36a:	2110      	movs	r1, #16
  41a36c:	4620      	mov	r0, r4
  41a36e:	4b60      	ldr	r3, [pc, #384]	; (41a4f0 <tabview_win_shared_init+0x314>)
  41a370:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41a372:	4b59      	ldr	r3, [pc, #356]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a374:	681c      	ldr	r4, [r3, #0]
  41a376:	34a8      	adds	r4, #168	; 0xa8
  41a378:	2000      	movs	r0, #0
  41a37a:	4b5c      	ldr	r3, [pc, #368]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a37c:	4798      	blx	r3
  41a37e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a382:	0080      	lsls	r0, r0, #2
  41a384:	3050      	adds	r0, #80	; 0x50
  41a386:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a38a:	f280 8132 	bge.w	41a5f2 <tabview_win_shared_init+0x416>
  41a38e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a390:	2111      	movs	r1, #17
  41a392:	4620      	mov	r0, r4
  41a394:	4b56      	ldr	r3, [pc, #344]	; (41a4f0 <tabview_win_shared_init+0x314>)
  41a396:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
  41a398:	4c4f      	ldr	r4, [pc, #316]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a39a:	6820      	ldr	r0, [r4, #0]
  41a39c:	4e51      	ldr	r6, [pc, #324]	; (41a4e4 <tabview_win_shared_init+0x308>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a39e:	89b2      	ldrh	r2, [r6, #12]
  41a3a0:	f248 2189 	movw	r1, #33417	; 0x8289
  41a3a4:	30a8      	adds	r0, #168	; 0xa8
  41a3a6:	4d50      	ldr	r5, [pc, #320]	; (41a4e8 <tabview_win_shared_init+0x30c>)
  41a3a8:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
  41a3aa:	6820      	ldr	r0, [r4, #0]
  41a3ac:	89f2      	ldrh	r2, [r6, #14]
  41a3ae:	f248 4189 	movw	r1, #33929	; 0x8489
  41a3b2:	30a8      	adds	r0, #168	; 0xa8
  41a3b4:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
  41a3b6:	6820      	ldr	r0, [r4, #0]
  41a3b8:	30b0      	adds	r0, #176	; 0xb0
  41a3ba:	4b48      	ldr	r3, [pc, #288]	; (41a4dc <tabview_win_shared_init+0x300>)
  41a3bc:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a3be:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a3c0:	22ff      	movs	r2, #255	; 0xff
  41a3c2:	212c      	movs	r1, #44	; 0x2c
  41a3c4:	30b0      	adds	r0, #176	; 0xb0
  41a3c6:	4b46      	ldr	r3, [pc, #280]	; (41a4e0 <tabview_win_shared_init+0x304>)
  41a3c8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
  41a3ca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a3cc:	89b2      	ldrh	r2, [r6, #12]
  41a3ce:	2129      	movs	r1, #41	; 0x29
  41a3d0:	30b0      	adds	r0, #176	; 0xb0
  41a3d2:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
  41a3d4:	6820      	ldr	r0, [r4, #0]
  41a3d6:	89f2      	ldrh	r2, [r6, #14]
  41a3d8:	f240 4129 	movw	r1, #1065	; 0x429
  41a3dc:	30b0      	adds	r0, #176	; 0xb0
  41a3de:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41a3e0:	6824      	ldr	r4, [r4, #0]
  41a3e2:	34b0      	adds	r4, #176	; 0xb0
  41a3e4:	2000      	movs	r0, #0
  41a3e6:	4b41      	ldr	r3, [pc, #260]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a3e8:	4798      	blx	r3
  41a3ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a3ee:	3050      	adds	r0, #80	; 0x50
  41a3f0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a3f4:	f280 810c 	bge.w	41a610 <tabview_win_shared_init+0x434>
  41a3f8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41a3fa:	2103      	movs	r1, #3
  41a3fc:	4620      	mov	r0, r4
  41a3fe:	4d3c      	ldr	r5, [pc, #240]	; (41a4f0 <tabview_win_shared_init+0x314>)
  41a400:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a402:	4c35      	ldr	r4, [pc, #212]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a404:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a406:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a40a:	2101      	movs	r1, #1
  41a40c:	30b0      	adds	r0, #176	; 0xb0
  41a40e:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
  41a410:	6820      	ldr	r0, [r4, #0]
  41a412:	30b4      	adds	r0, #180	; 0xb4
  41a414:	4b31      	ldr	r3, [pc, #196]	; (41a4dc <tabview_win_shared_init+0x300>)
  41a416:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a418:	6824      	ldr	r4, [r4, #0]
  41a41a:	34b4      	adds	r4, #180	; 0xb4
  41a41c:	2000      	movs	r0, #0
  41a41e:	4b35      	ldr	r3, [pc, #212]	; (41a4f4 <tabview_win_shared_init+0x318>)
  41a420:	4798      	blx	r3
  41a422:	2801      	cmp	r0, #1
  41a424:	f240 8102 	bls.w	41a62c <tabview_win_shared_init+0x450>
  41a428:	2000      	movs	r0, #0
  41a42a:	4b30      	ldr	r3, [pc, #192]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a42c:	4798      	blx	r3
  41a42e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a432:	0040      	lsls	r0, r0, #1
  41a434:	3050      	adds	r0, #80	; 0x50
  41a436:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a43a:	f280 8110 	bge.w	41a65e <tabview_win_shared_init+0x482>
  41a43e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a440:	2110      	movs	r1, #16
  41a442:	4620      	mov	r0, r4
  41a444:	4b2a      	ldr	r3, [pc, #168]	; (41a4f0 <tabview_win_shared_init+0x314>)
  41a446:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a448:	4b23      	ldr	r3, [pc, #140]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a44a:	681c      	ldr	r4, [r3, #0]
  41a44c:	34b4      	adds	r4, #180	; 0xb4
  41a44e:	2000      	movs	r0, #0
  41a450:	4b28      	ldr	r3, [pc, #160]	; (41a4f4 <tabview_win_shared_init+0x318>)
  41a452:	4798      	blx	r3
  41a454:	2801      	cmp	r0, #1
  41a456:	f240 8111 	bls.w	41a67c <tabview_win_shared_init+0x4a0>
  41a45a:	2000      	movs	r0, #0
  41a45c:	4b23      	ldr	r3, [pc, #140]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a45e:	4798      	blx	r3
  41a460:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a464:	0040      	lsls	r0, r0, #1
  41a466:	3050      	adds	r0, #80	; 0x50
  41a468:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a46c:	f280 811f 	bge.w	41a6ae <tabview_win_shared_init+0x4d2>
  41a470:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a472:	2111      	movs	r1, #17
  41a474:	4620      	mov	r0, r4
  41a476:	4b1e      	ldr	r3, [pc, #120]	; (41a4f0 <tabview_win_shared_init+0x314>)
  41a478:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a47a:	4b17      	ldr	r3, [pc, #92]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a47c:	681c      	ldr	r4, [r3, #0]
  41a47e:	34b4      	adds	r4, #180	; 0xb4
  41a480:	2000      	movs	r0, #0
  41a482:	4b1c      	ldr	r3, [pc, #112]	; (41a4f4 <tabview_win_shared_init+0x318>)
  41a484:	4798      	blx	r3
  41a486:	2801      	cmp	r0, #1
  41a488:	f240 8120 	bls.w	41a6cc <tabview_win_shared_init+0x4f0>
  41a48c:	2000      	movs	r0, #0
  41a48e:	4b17      	ldr	r3, [pc, #92]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a490:	4798      	blx	r3
  41a492:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a496:	0040      	lsls	r0, r0, #1
  41a498:	3050      	adds	r0, #80	; 0x50
  41a49a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a49e:	f280 812e 	bge.w	41a6fe <tabview_win_shared_init+0x522>
  41a4a2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a4a4:	2112      	movs	r1, #18
  41a4a6:	4620      	mov	r0, r4
  41a4a8:	4b11      	ldr	r3, [pc, #68]	; (41a4f0 <tabview_win_shared_init+0x314>)
  41a4aa:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a4ac:	4b0a      	ldr	r3, [pc, #40]	; (41a4d8 <tabview_win_shared_init+0x2fc>)
  41a4ae:	681c      	ldr	r4, [r3, #0]
  41a4b0:	34b4      	adds	r4, #180	; 0xb4
  41a4b2:	2000      	movs	r0, #0
  41a4b4:	4b0f      	ldr	r3, [pc, #60]	; (41a4f4 <tabview_win_shared_init+0x318>)
  41a4b6:	4798      	blx	r3
  41a4b8:	2801      	cmp	r0, #1
  41a4ba:	f240 812f 	bls.w	41a71c <tabview_win_shared_init+0x540>
  41a4be:	2000      	movs	r0, #0
  41a4c0:	4b0a      	ldr	r3, [pc, #40]	; (41a4ec <tabview_win_shared_init+0x310>)
  41a4c2:	4798      	blx	r3
  41a4c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a4c8:	0040      	lsls	r0, r0, #1
  41a4ca:	3050      	adds	r0, #80	; 0x50
  41a4cc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4d0:	f280 813d 	bge.w	41a74e <tabview_win_shared_init+0x572>
  41a4d4:	2201      	movs	r2, #1
  41a4d6:	e00f      	b.n	41a4f8 <tabview_win_shared_init+0x31c>
  41a4d8:	20414798 	.word	0x20414798
  41a4dc:	0041704d 	.word	0x0041704d
  41a4e0:	004098e1 	.word	0x004098e1
  41a4e4:	2041479c 	.word	0x2041479c
  41a4e8:	00409751 	.word	0x00409751
  41a4ec:	00413f95 	.word	0x00413f95
  41a4f0:	004095c1 	.word	0x004095c1
  41a4f4:	00413fb5 	.word	0x00413fb5
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a4f8:	2113      	movs	r1, #19
  41a4fa:	4620      	mov	r0, r4
  41a4fc:	4baf      	ldr	r3, [pc, #700]	; (41a7bc <tabview_win_shared_init+0x5e0>)
  41a4fe:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a500:	4baf      	ldr	r3, [pc, #700]	; (41a7c0 <tabview_win_shared_init+0x5e4>)
  41a502:	681c      	ldr	r4, [r3, #0]
  41a504:	34b4      	adds	r4, #180	; 0xb4
  41a506:	2000      	movs	r0, #0
  41a508:	4bae      	ldr	r3, [pc, #696]	; (41a7c4 <tabview_win_shared_init+0x5e8>)
  41a50a:	4798      	blx	r3
  41a50c:	2801      	cmp	r0, #1
  41a50e:	f240 812d 	bls.w	41a76c <tabview_win_shared_init+0x590>
  41a512:	2000      	movs	r0, #0
  41a514:	4bac      	ldr	r3, [pc, #688]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a516:	4798      	blx	r3
  41a518:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a51c:	0040      	lsls	r0, r0, #1
  41a51e:	3050      	adds	r0, #80	; 0x50
  41a520:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a524:	f280 813b 	bge.w	41a79e <tabview_win_shared_init+0x5c2>
  41a528:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a52a:	2114      	movs	r1, #20
  41a52c:	4620      	mov	r0, r4
  41a52e:	4ba3      	ldr	r3, [pc, #652]	; (41a7bc <tabview_win_shared_init+0x5e0>)
  41a530:	4798      	blx	r3
  41a532:	bd70      	pop	{r4, r5, r6, pc}
  41a534:	f04f 0200 	mov.w	r2, #0
  41a538:	2303      	movs	r3, #3
  41a53a:	f363 0202 	bfi	r2, r3, #0, #3
  41a53e:	230b      	movs	r3, #11
  41a540:	f363 02c7 	bfi	r2, r3, #3, #5
  41a544:	230e      	movs	r3, #14
  41a546:	f363 220c 	bfi	r2, r3, #8, #5
  41a54a:	f36f 324f 	bfc	r2, #13, #3
  41a54e:	e65b      	b.n	41a208 <tabview_win_shared_init+0x2c>
  41a550:	f04f 0207 	mov.w	r2, #7
  41a554:	231c      	movs	r3, #28
  41a556:	f363 02c7 	bfi	r2, r3, #3, #5
  41a55a:	231d      	movs	r3, #29
  41a55c:	f363 220c 	bfi	r2, r3, #8, #5
  41a560:	2302      	movs	r3, #2
  41a562:	f363 324f 	bfi	r2, r3, #13, #3
  41a566:	e66a      	b.n	41a23e <tabview_win_shared_init+0x62>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41a568:	2000      	movs	r0, #0
  41a56a:	4b97      	ldr	r3, [pc, #604]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a56c:	4798      	blx	r3
  41a56e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a572:	3050      	adds	r0, #80	; 0x50
  41a574:	4b95      	ldr	r3, [pc, #596]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a576:	fb83 2300 	smull	r2, r3, r3, r0
  41a57a:	17c2      	asrs	r2, r0, #31
  41a57c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a580:	b212      	sxth	r2, r2
  41a582:	e681      	b.n	41a288 <tabview_win_shared_init+0xac>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41a584:	2000      	movs	r0, #0
  41a586:	4b90      	ldr	r3, [pc, #576]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a588:	4798      	blx	r3
  41a58a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a58e:	3050      	adds	r0, #80	; 0x50
  41a590:	4b8e      	ldr	r3, [pc, #568]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a592:	fb83 2300 	smull	r2, r3, r3, r0
  41a596:	17c2      	asrs	r2, r0, #31
  41a598:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a59c:	b212      	sxth	r2, r2
  41a59e:	e685      	b.n	41a2ac <tabview_win_shared_init+0xd0>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41a5a0:	2000      	movs	r0, #0
  41a5a2:	4b89      	ldr	r3, [pc, #548]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a5a4:	4798      	blx	r3
  41a5a6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a5aa:	3050      	adds	r0, #80	; 0x50
  41a5ac:	4b87      	ldr	r3, [pc, #540]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a5ae:	fb83 2300 	smull	r2, r3, r3, r0
  41a5b2:	17c2      	asrs	r2, r0, #31
  41a5b4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a5b8:	b212      	sxth	r2, r2
  41a5ba:	e689      	b.n	41a2d0 <tabview_win_shared_init+0xf4>
  41a5bc:	f04f 0207 	mov.w	r2, #7
  41a5c0:	231c      	movs	r3, #28
  41a5c2:	f363 02c7 	bfi	r2, r3, #3, #5
  41a5c6:	231d      	movs	r3, #29
  41a5c8:	f363 220c 	bfi	r2, r3, #8, #5
  41a5cc:	2302      	movs	r3, #2
  41a5ce:	f363 324f 	bfi	r2, r3, #13, #3
  41a5d2:	e6b7      	b.n	41a344 <tabview_win_shared_init+0x168>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41a5d4:	2000      	movs	r0, #0
  41a5d6:	4b7c      	ldr	r3, [pc, #496]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a5d8:	4798      	blx	r3
  41a5da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a5de:	0080      	lsls	r0, r0, #2
  41a5e0:	3050      	adds	r0, #80	; 0x50
  41a5e2:	4b7a      	ldr	r3, [pc, #488]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a5e4:	fb83 2300 	smull	r2, r3, r3, r0
  41a5e8:	17c2      	asrs	r2, r0, #31
  41a5ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a5ee:	b212      	sxth	r2, r2
  41a5f0:	e6bb      	b.n	41a36a <tabview_win_shared_init+0x18e>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41a5f2:	2000      	movs	r0, #0
  41a5f4:	4b74      	ldr	r3, [pc, #464]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a5f6:	4798      	blx	r3
  41a5f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a5fc:	0080      	lsls	r0, r0, #2
  41a5fe:	3050      	adds	r0, #80	; 0x50
  41a600:	4b72      	ldr	r3, [pc, #456]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a602:	fb83 2300 	smull	r2, r3, r3, r0
  41a606:	17c2      	asrs	r2, r0, #31
  41a608:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a60c:	b212      	sxth	r2, r2
  41a60e:	e6bf      	b.n	41a390 <tabview_win_shared_init+0x1b4>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41a610:	2000      	movs	r0, #0
  41a612:	4b6d      	ldr	r3, [pc, #436]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a614:	4798      	blx	r3
  41a616:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a61a:	3050      	adds	r0, #80	; 0x50
  41a61c:	4b6b      	ldr	r3, [pc, #428]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a61e:	fb83 2300 	smull	r2, r3, r3, r0
  41a622:	17c2      	asrs	r2, r0, #31
  41a624:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a628:	b212      	sxth	r2, r2
  41a62a:	e6e6      	b.n	41a3fa <tabview_win_shared_init+0x21e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a62c:	2000      	movs	r0, #0
  41a62e:	4b66      	ldr	r3, [pc, #408]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a630:	4798      	blx	r3
  41a632:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a636:	3050      	adds	r0, #80	; 0x50
  41a638:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a63c:	da01      	bge.n	41a642 <tabview_win_shared_init+0x466>
  41a63e:	2201      	movs	r2, #1
  41a640:	e6fe      	b.n	41a440 <tabview_win_shared_init+0x264>
  41a642:	2000      	movs	r0, #0
  41a644:	4b60      	ldr	r3, [pc, #384]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a646:	4798      	blx	r3
  41a648:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a64c:	3050      	adds	r0, #80	; 0x50
  41a64e:	4b5f      	ldr	r3, [pc, #380]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a650:	fb83 2300 	smull	r2, r3, r3, r0
  41a654:	17c2      	asrs	r2, r0, #31
  41a656:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a65a:	b212      	sxth	r2, r2
  41a65c:	e6f0      	b.n	41a440 <tabview_win_shared_init+0x264>
  41a65e:	2000      	movs	r0, #0
  41a660:	4b59      	ldr	r3, [pc, #356]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a662:	4798      	blx	r3
  41a664:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a668:	0040      	lsls	r0, r0, #1
  41a66a:	3050      	adds	r0, #80	; 0x50
  41a66c:	4b57      	ldr	r3, [pc, #348]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a66e:	fb83 2300 	smull	r2, r3, r3, r0
  41a672:	17c2      	asrs	r2, r0, #31
  41a674:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a678:	b212      	sxth	r2, r2
  41a67a:	e6e1      	b.n	41a440 <tabview_win_shared_init+0x264>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a67c:	2000      	movs	r0, #0
  41a67e:	4b52      	ldr	r3, [pc, #328]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a680:	4798      	blx	r3
  41a682:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a686:	3050      	adds	r0, #80	; 0x50
  41a688:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a68c:	da01      	bge.n	41a692 <tabview_win_shared_init+0x4b6>
  41a68e:	2201      	movs	r2, #1
  41a690:	e6ef      	b.n	41a472 <tabview_win_shared_init+0x296>
  41a692:	2000      	movs	r0, #0
  41a694:	4b4c      	ldr	r3, [pc, #304]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a696:	4798      	blx	r3
  41a698:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a69c:	3050      	adds	r0, #80	; 0x50
  41a69e:	4b4b      	ldr	r3, [pc, #300]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a6a0:	fb83 2300 	smull	r2, r3, r3, r0
  41a6a4:	17c2      	asrs	r2, r0, #31
  41a6a6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a6aa:	b212      	sxth	r2, r2
  41a6ac:	e6e1      	b.n	41a472 <tabview_win_shared_init+0x296>
  41a6ae:	2000      	movs	r0, #0
  41a6b0:	4b45      	ldr	r3, [pc, #276]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a6b2:	4798      	blx	r3
  41a6b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a6b8:	0040      	lsls	r0, r0, #1
  41a6ba:	3050      	adds	r0, #80	; 0x50
  41a6bc:	4b43      	ldr	r3, [pc, #268]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a6be:	fb83 2300 	smull	r2, r3, r3, r0
  41a6c2:	17c2      	asrs	r2, r0, #31
  41a6c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a6c8:	b212      	sxth	r2, r2
  41a6ca:	e6d2      	b.n	41a472 <tabview_win_shared_init+0x296>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a6cc:	2000      	movs	r0, #0
  41a6ce:	4b3e      	ldr	r3, [pc, #248]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a6d0:	4798      	blx	r3
  41a6d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a6d6:	3050      	adds	r0, #80	; 0x50
  41a6d8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a6dc:	da01      	bge.n	41a6e2 <tabview_win_shared_init+0x506>
  41a6de:	2201      	movs	r2, #1
  41a6e0:	e6e0      	b.n	41a4a4 <tabview_win_shared_init+0x2c8>
  41a6e2:	2000      	movs	r0, #0
  41a6e4:	4b38      	ldr	r3, [pc, #224]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a6e6:	4798      	blx	r3
  41a6e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a6ec:	3050      	adds	r0, #80	; 0x50
  41a6ee:	4b37      	ldr	r3, [pc, #220]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a6f0:	fb83 2300 	smull	r2, r3, r3, r0
  41a6f4:	17c2      	asrs	r2, r0, #31
  41a6f6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a6fa:	b212      	sxth	r2, r2
  41a6fc:	e6d2      	b.n	41a4a4 <tabview_win_shared_init+0x2c8>
  41a6fe:	2000      	movs	r0, #0
  41a700:	4b31      	ldr	r3, [pc, #196]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a702:	4798      	blx	r3
  41a704:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a708:	0040      	lsls	r0, r0, #1
  41a70a:	3050      	adds	r0, #80	; 0x50
  41a70c:	4b2f      	ldr	r3, [pc, #188]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a70e:	fb83 2300 	smull	r2, r3, r3, r0
  41a712:	17c2      	asrs	r2, r0, #31
  41a714:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a718:	b212      	sxth	r2, r2
  41a71a:	e6c3      	b.n	41a4a4 <tabview_win_shared_init+0x2c8>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a71c:	2000      	movs	r0, #0
  41a71e:	4b2a      	ldr	r3, [pc, #168]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a720:	4798      	blx	r3
  41a722:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a726:	3050      	adds	r0, #80	; 0x50
  41a728:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a72c:	da01      	bge.n	41a732 <tabview_win_shared_init+0x556>
  41a72e:	2201      	movs	r2, #1
  41a730:	e6e2      	b.n	41a4f8 <tabview_win_shared_init+0x31c>
  41a732:	2000      	movs	r0, #0
  41a734:	4b24      	ldr	r3, [pc, #144]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a736:	4798      	blx	r3
  41a738:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a73c:	3050      	adds	r0, #80	; 0x50
  41a73e:	4b23      	ldr	r3, [pc, #140]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a740:	fb83 2300 	smull	r2, r3, r3, r0
  41a744:	17c2      	asrs	r2, r0, #31
  41a746:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a74a:	b212      	sxth	r2, r2
  41a74c:	e6d4      	b.n	41a4f8 <tabview_win_shared_init+0x31c>
  41a74e:	2000      	movs	r0, #0
  41a750:	4b1d      	ldr	r3, [pc, #116]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a752:	4798      	blx	r3
  41a754:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a758:	0040      	lsls	r0, r0, #1
  41a75a:	3050      	adds	r0, #80	; 0x50
  41a75c:	4b1b      	ldr	r3, [pc, #108]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a75e:	fb83 2300 	smull	r2, r3, r3, r0
  41a762:	17c2      	asrs	r2, r0, #31
  41a764:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a768:	b212      	sxth	r2, r2
  41a76a:	e6c5      	b.n	41a4f8 <tabview_win_shared_init+0x31c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a76c:	2000      	movs	r0, #0
  41a76e:	4b16      	ldr	r3, [pc, #88]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a770:	4798      	blx	r3
  41a772:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a776:	3050      	adds	r0, #80	; 0x50
  41a778:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a77c:	da01      	bge.n	41a782 <tabview_win_shared_init+0x5a6>
  41a77e:	2201      	movs	r2, #1
  41a780:	e6d3      	b.n	41a52a <tabview_win_shared_init+0x34e>
  41a782:	2000      	movs	r0, #0
  41a784:	4b10      	ldr	r3, [pc, #64]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a786:	4798      	blx	r3
  41a788:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a78c:	3050      	adds	r0, #80	; 0x50
  41a78e:	4b0f      	ldr	r3, [pc, #60]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a790:	fb83 2300 	smull	r2, r3, r3, r0
  41a794:	17c2      	asrs	r2, r0, #31
  41a796:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a79a:	b212      	sxth	r2, r2
  41a79c:	e6c5      	b.n	41a52a <tabview_win_shared_init+0x34e>
  41a79e:	2000      	movs	r0, #0
  41a7a0:	4b09      	ldr	r3, [pc, #36]	; (41a7c8 <tabview_win_shared_init+0x5ec>)
  41a7a2:	4798      	blx	r3
  41a7a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a7a8:	0040      	lsls	r0, r0, #1
  41a7aa:	3050      	adds	r0, #80	; 0x50
  41a7ac:	4b07      	ldr	r3, [pc, #28]	; (41a7cc <tabview_win_shared_init+0x5f0>)
  41a7ae:	fb83 2300 	smull	r2, r3, r3, r0
  41a7b2:	17c2      	asrs	r2, r0, #31
  41a7b4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a7b8:	b212      	sxth	r2, r2
  41a7ba:	e6b6      	b.n	41a52a <tabview_win_shared_init+0x34e>
  41a7bc:	004095c1 	.word	0x004095c1
  41a7c0:	20414798 	.word	0x20414798
  41a7c4:	00413fb5 	.word	0x00413fb5
  41a7c8:	00413f95 	.word	0x00413f95
  41a7cc:	66666667 	.word	0x66666667

0041a7d0 <led_init>:
{
  41a7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->led);
  41a7d4:	4c3a      	ldr	r4, [pc, #232]	; (41a8c0 <led_init+0xf0>)
  41a7d6:	6820      	ldr	r0, [r4, #0]
  41a7d8:	3070      	adds	r0, #112	; 0x70
  41a7da:	4b3a      	ldr	r3, [pc, #232]	; (41a8c4 <led_init+0xf4>)
  41a7dc:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a7de:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a7e0:	22ff      	movs	r2, #255	; 0xff
  41a7e2:	212c      	movs	r1, #44	; 0x2c
  41a7e4:	3070      	adds	r0, #112	; 0x70
  41a7e6:	4d38      	ldr	r5, [pc, #224]	; (41a8c8 <led_init+0xf8>)
  41a7e8:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41a7ea:	6820      	ldr	r0, [r4, #0]
  41a7ec:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 41a8dc <led_init+0x10c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a7f0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  41a7f4:	2129      	movs	r1, #41	; 0x29
  41a7f6:	3070      	adds	r0, #112	; 0x70
  41a7f8:	4f34      	ldr	r7, [pc, #208]	; (41a8cc <led_init+0xfc>)
  41a7fa:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
  41a7fc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a7fe:	2202      	movs	r2, #2
  41a800:	2130      	movs	r1, #48	; 0x30
  41a802:	3070      	adds	r0, #112	; 0x70
  41a804:	4e32      	ldr	r6, [pc, #200]	; (41a8d0 <led_init+0x100>)
  41a806:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
  41a808:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41a80a:	227f      	movs	r2, #127	; 0x7f
  41a80c:	213c      	movs	r1, #60	; 0x3c
  41a80e:	3070      	adds	r0, #112	; 0x70
  41a810:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
  41a812:	6825      	ldr	r5, [r4, #0]
  41a814:	3570      	adds	r5, #112	; 0x70
  41a816:	214c      	movs	r1, #76	; 0x4c
  41a818:	f8b8 000c 	ldrh.w	r0, [r8, #12]
  41a81c:	4b2d      	ldr	r3, [pc, #180]	; (41a8d4 <led_init+0x104>)
  41a81e:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a820:	4602      	mov	r2, r0
  41a822:	2139      	movs	r1, #57	; 0x39
  41a824:	4628      	mov	r0, r5
  41a826:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a828:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a82a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a82e:	2101      	movs	r1, #1
  41a830:	3070      	adds	r0, #112	; 0x70
  41a832:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41a834:	6824      	ldr	r4, [r4, #0]
  41a836:	3470      	adds	r4, #112	; 0x70
  41a838:	2000      	movs	r0, #0
  41a83a:	4b27      	ldr	r3, [pc, #156]	; (41a8d8 <led_init+0x108>)
  41a83c:	4798      	blx	r3
  41a83e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a842:	3050      	adds	r0, #80	; 0x50
  41a844:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a848:	da1e      	bge.n	41a888 <led_init+0xb8>
  41a84a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41a84c:	2150      	movs	r1, #80	; 0x50
  41a84e:	4620      	mov	r0, r4
  41a850:	4b1f      	ldr	r3, [pc, #124]	; (41a8d0 <led_init+0x100>)
  41a852:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41a854:	4c1a      	ldr	r4, [pc, #104]	; (41a8c0 <led_init+0xf0>)
  41a856:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41a858:	4b20      	ldr	r3, [pc, #128]	; (41a8dc <led_init+0x10c>)
  41a85a:	899a      	ldrh	r2, [r3, #12]
  41a85c:	2159      	movs	r1, #89	; 0x59
  41a85e:	3070      	adds	r0, #112	; 0x70
  41a860:	4b1a      	ldr	r3, [pc, #104]	; (41a8cc <led_init+0xfc>)
  41a862:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41a864:	6824      	ldr	r4, [r4, #0]
  41a866:	3470      	adds	r4, #112	; 0x70
  41a868:	2000      	movs	r0, #0
  41a86a:	4b1b      	ldr	r3, [pc, #108]	; (41a8d8 <led_init+0x108>)
  41a86c:	4798      	blx	r3
  41a86e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a872:	3050      	adds	r0, #80	; 0x50
  41a874:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a878:	da14      	bge.n	41a8a4 <led_init+0xd4>
  41a87a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  41a87c:	2153      	movs	r1, #83	; 0x53
  41a87e:	4620      	mov	r0, r4
  41a880:	4b13      	ldr	r3, [pc, #76]	; (41a8d0 <led_init+0x100>)
  41a882:	4798      	blx	r3
  41a884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41a888:	2000      	movs	r0, #0
  41a88a:	4b13      	ldr	r3, [pc, #76]	; (41a8d8 <led_init+0x108>)
  41a88c:	4798      	blx	r3
  41a88e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a892:	3050      	adds	r0, #80	; 0x50
  41a894:	4b12      	ldr	r3, [pc, #72]	; (41a8e0 <led_init+0x110>)
  41a896:	fb83 2300 	smull	r2, r3, r3, r0
  41a89a:	17c2      	asrs	r2, r0, #31
  41a89c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a8a0:	b212      	sxth	r2, r2
  41a8a2:	e7d3      	b.n	41a84c <led_init+0x7c>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41a8a4:	2000      	movs	r0, #0
  41a8a6:	4b0c      	ldr	r3, [pc, #48]	; (41a8d8 <led_init+0x108>)
  41a8a8:	4798      	blx	r3
  41a8aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a8ae:	3050      	adds	r0, #80	; 0x50
  41a8b0:	4b0b      	ldr	r3, [pc, #44]	; (41a8e0 <led_init+0x110>)
  41a8b2:	fb83 2300 	smull	r2, r3, r3, r0
  41a8b6:	17c2      	asrs	r2, r0, #31
  41a8b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a8bc:	b212      	sxth	r2, r2
  41a8be:	e7dd      	b.n	41a87c <led_init+0xac>
  41a8c0:	20414798 	.word	0x20414798
  41a8c4:	0041704d 	.word	0x0041704d
  41a8c8:	004098e1 	.word	0x004098e1
  41a8cc:	00409751 	.word	0x00409751
  41a8d0:	004095c1 	.word	0x004095c1
  41a8d4:	00414f5d 	.word	0x00414f5d
  41a8d8:	00413f95 	.word	0x00413f95
  41a8dc:	2041479c 	.word	0x2041479c
  41a8e0:	66666667 	.word	0x66666667

0041a8e4 <basic_init>:
{
  41a8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->scr);
  41a8e6:	4cc2      	ldr	r4, [pc, #776]	; (41abf0 <basic_init+0x30c>)
  41a8e8:	6820      	ldr	r0, [r4, #0]
  41a8ea:	4bc2      	ldr	r3, [pc, #776]	; (41abf4 <basic_init+0x310>)
  41a8ec:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a8ee:	22ff      	movs	r2, #255	; 0xff
  41a8f0:	212c      	movs	r1, #44	; 0x2c
  41a8f2:	6820      	ldr	r0, [r4, #0]
  41a8f4:	4bc0      	ldr	r3, [pc, #768]	; (41abf8 <basic_init+0x314>)
  41a8f6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
  41a8f8:	6820      	ldr	r0, [r4, #0]
  41a8fa:	4bc0      	ldr	r3, [pc, #768]	; (41abfc <basic_init+0x318>)
  41a8fc:	6a1b      	ldr	r3, [r3, #32]
  41a8fe:	f013 0f02 	tst.w	r3, #2
  41a902:	f000 8742 	beq.w	41b78a <basic_init+0xea6>
  41a906:	f04f 0207 	mov.w	r2, #7
  41a90a:	231d      	movs	r3, #29
  41a90c:	f363 02c7 	bfi	r2, r3, #3, #5
  41a910:	231e      	movs	r3, #30
  41a912:	f363 220c 	bfi	r2, r3, #8, #5
  41a916:	2303      	movs	r3, #3
  41a918:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a91c:	2129      	movs	r1, #41	; 0x29
  41a91e:	4bb8      	ldr	r3, [pc, #736]	; (41ac00 <basic_init+0x31c>)
  41a920:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41a922:	4bb3      	ldr	r3, [pc, #716]	; (41abf0 <basic_init+0x30c>)
  41a924:	6818      	ldr	r0, [r3, #0]
  41a926:	4bb5      	ldr	r3, [pc, #724]	; (41abfc <basic_init+0x318>)
  41a928:	6a1b      	ldr	r3, [r3, #32]
  41a92a:	f013 0f02 	tst.w	r3, #2
  41a92e:	f000 873b 	beq.w	41b7a8 <basic_init+0xec4>
  41a932:	f04f 0200 	mov.w	r2, #0
  41a936:	2301      	movs	r3, #1
  41a938:	f363 0202 	bfi	r2, r3, #0, #3
  41a93c:	2307      	movs	r3, #7
  41a93e:	f363 02c7 	bfi	r2, r3, #3, #5
  41a942:	2308      	movs	r3, #8
  41a944:	f363 220c 	bfi	r2, r3, #8, #5
  41a948:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a94c:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a950:	f248 0189 	movw	r1, #32905	; 0x8089
  41a954:	4baa      	ldr	r3, [pc, #680]	; (41ac00 <basic_init+0x31c>)
  41a956:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41a958:	4ba5      	ldr	r3, [pc, #660]	; (41abf0 <basic_init+0x30c>)
  41a95a:	6818      	ldr	r0, [r3, #0]
  41a95c:	4ba7      	ldr	r3, [pc, #668]	; (41abfc <basic_init+0x318>)
  41a95e:	6a1b      	ldr	r3, [r3, #32]
  41a960:	f013 0f02 	tst.w	r3, #2
  41a964:	f000 872d 	beq.w	41b7c2 <basic_init+0xede>
  41a968:	f04f 0200 	mov.w	r2, #0
  41a96c:	2301      	movs	r3, #1
  41a96e:	f363 0202 	bfi	r2, r3, #0, #3
  41a972:	2307      	movs	r3, #7
  41a974:	f363 02c7 	bfi	r2, r3, #3, #5
  41a978:	2308      	movs	r3, #8
  41a97a:	f363 220c 	bfi	r2, r3, #8, #5
  41a97e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a982:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41a986:	2179      	movs	r1, #121	; 0x79
  41a988:	4b9d      	ldr	r3, [pc, #628]	; (41ac00 <basic_init+0x31c>)
  41a98a:	4798      	blx	r3
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41a98c:	4b98      	ldr	r3, [pc, #608]	; (41abf0 <basic_init+0x30c>)
  41a98e:	6818      	ldr	r0, [r3, #0]
  41a990:	4b9a      	ldr	r3, [pc, #616]	; (41abfc <basic_init+0x318>)
  41a992:	6a1b      	ldr	r3, [r3, #32]
  41a994:	f013 0f02 	tst.w	r3, #2
  41a998:	f000 8720 	beq.w	41b7dc <basic_init+0xef8>
  41a99c:	f04f 0200 	mov.w	r2, #0
  41a9a0:	2301      	movs	r3, #1
  41a9a2:	f363 0202 	bfi	r2, r3, #0, #3
  41a9a6:	2307      	movs	r3, #7
  41a9a8:	f363 02c7 	bfi	r2, r3, #3, #5
  41a9ac:	2308      	movs	r3, #8
  41a9ae:	f363 220c 	bfi	r2, r3, #8, #5
  41a9b2:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a9b6:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  41a9ba:	f248 018a 	movw	r1, #32906	; 0x808a
  41a9be:	4e90      	ldr	r6, [pc, #576]	; (41ac00 <basic_init+0x31c>)
  41a9c0:	47b0      	blx	r6
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
  41a9c2:	4c8b      	ldr	r4, [pc, #556]	; (41abf0 <basic_init+0x30c>)
  41a9c4:	4d8d      	ldr	r5, [pc, #564]	; (41abfc <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  41a9c6:	89aa      	ldrh	r2, [r5, #12]
  41a9c8:	f248 018b 	movw	r1, #32907	; 0x808b
  41a9cc:	6820      	ldr	r0, [r4, #0]
  41a9ce:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41a9d0:	696a      	ldr	r2, [r5, #20]
  41a9d2:	217e      	movs	r1, #126	; 0x7e
  41a9d4:	6820      	ldr	r0, [r4, #0]
  41a9d6:	4b8b      	ldr	r3, [pc, #556]	; (41ac04 <basic_init+0x320>)
  41a9d8:	4798      	blx	r3
    style_init_reset(&styles->bg);
  41a9da:	6820      	ldr	r0, [r4, #0]
  41a9dc:	3004      	adds	r0, #4
  41a9de:	4b85      	ldr	r3, [pc, #532]	; (41abf4 <basic_init+0x310>)
  41a9e0:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41a9e2:	6824      	ldr	r4, [r4, #0]
  41a9e4:	3404      	adds	r4, #4
  41a9e6:	2000      	movs	r0, #0
  41a9e8:	4b87      	ldr	r3, [pc, #540]	; (41ac08 <basic_init+0x324>)
  41a9ea:	4798      	blx	r3
  41a9ec:	300a      	adds	r0, #10
  41a9ee:	00c0      	lsls	r0, r0, #3
  41a9f0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a9f4:	f280 86ff 	bge.w	41b7f6 <basic_init+0xf12>
  41a9f8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a9fa:	2101      	movs	r1, #1
  41a9fc:	4620      	mov	r0, r4
  41a9fe:	4b83      	ldr	r3, [pc, #524]	; (41ac0c <basic_init+0x328>)
  41aa00:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41aa02:	4c7b      	ldr	r4, [pc, #492]	; (41abf0 <basic_init+0x30c>)
  41aa04:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41aa06:	22ff      	movs	r2, #255	; 0xff
  41aa08:	212c      	movs	r1, #44	; 0x2c
  41aa0a:	3004      	adds	r0, #4
  41aa0c:	4b7a      	ldr	r3, [pc, #488]	; (41abf8 <basic_init+0x314>)
  41aa0e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
  41aa10:	6820      	ldr	r0, [r4, #0]
  41aa12:	3004      	adds	r0, #4
  41aa14:	4b79      	ldr	r3, [pc, #484]	; (41abfc <basic_init+0x318>)
  41aa16:	6a1b      	ldr	r3, [r3, #32]
  41aa18:	f013 0f02 	tst.w	r3, #2
  41aa1c:	f000 86f9 	beq.w	41b812 <basic_init+0xf2e>
  41aa20:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41aa24:	2129      	movs	r1, #41	; 0x29
  41aa26:	4b76      	ldr	r3, [pc, #472]	; (41ac00 <basic_init+0x31c>)
  41aa28:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41aa2a:	4b71      	ldr	r3, [pc, #452]	; (41abf0 <basic_init+0x30c>)
  41aa2c:	6818      	ldr	r0, [r3, #0]
  41aa2e:	3004      	adds	r0, #4
  41aa30:	4b72      	ldr	r3, [pc, #456]	; (41abfc <basic_init+0x318>)
  41aa32:	6a1b      	ldr	r3, [r3, #32]
  41aa34:	f013 0f02 	tst.w	r3, #2
  41aa38:	f000 86fa 	beq.w	41b830 <basic_init+0xf4c>
  41aa3c:	f04f 0200 	mov.w	r2, #0
  41aa40:	2306      	movs	r3, #6
  41aa42:	f363 0202 	bfi	r2, r3, #0, #3
  41aa46:	231a      	movs	r3, #26
  41aa48:	f363 02c7 	bfi	r2, r3, #3, #5
  41aa4c:	231c      	movs	r3, #28
  41aa4e:	f363 220c 	bfi	r2, r3, #8, #5
  41aa52:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41aa56:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41aa5a:	2139      	movs	r1, #57	; 0x39
  41aa5c:	4b68      	ldr	r3, [pc, #416]	; (41ac00 <basic_init+0x31c>)
  41aa5e:	4798      	blx	r3
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41aa60:	4b66      	ldr	r3, [pc, #408]	; (41abfc <basic_init+0x318>)
  41aa62:	6a1b      	ldr	r3, [r3, #32]
  41aa64:	f013 0f20 	tst.w	r3, #32
  41aa68:	f000 86f2 	beq.w	41b850 <basic_init+0xf6c>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
  41aa6c:	4c60      	ldr	r4, [pc, #384]	; (41abf0 <basic_init+0x30c>)
  41aa6e:	6820      	ldr	r0, [r4, #0]
  41aa70:	4b62      	ldr	r3, [pc, #392]	; (41abfc <basic_init+0x318>)
  41aa72:	89da      	ldrh	r2, [r3, #14]
  41aa74:	f240 4139 	movw	r1, #1081	; 0x439
  41aa78:	3004      	adds	r0, #4
  41aa7a:	4b61      	ldr	r3, [pc, #388]	; (41ac00 <basic_init+0x31c>)
  41aa7c:	4798      	blx	r3
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41aa7e:	6824      	ldr	r4, [r4, #0]
  41aa80:	3404      	adds	r4, #4
  41aa82:	2000      	movs	r0, #0
  41aa84:	4b60      	ldr	r3, [pc, #384]	; (41ac08 <basic_init+0x324>)
  41aa86:	4798      	blx	r3
  41aa88:	3028      	adds	r0, #40	; 0x28
  41aa8a:	0040      	lsls	r0, r0, #1
  41aa8c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aa90:	f280 86e9 	bge.w	41b866 <basic_init+0xf82>
  41aa94:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41aa96:	2130      	movs	r1, #48	; 0x30
  41aa98:	4620      	mov	r0, r4
  41aa9a:	4d5c      	ldr	r5, [pc, #368]	; (41ac0c <basic_init+0x328>)
  41aa9c:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
  41aa9e:	4c54      	ldr	r4, [pc, #336]	; (41abf0 <basic_init+0x30c>)
  41aaa0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41aaa2:	2201      	movs	r2, #1
  41aaa4:	2133      	movs	r1, #51	; 0x33
  41aaa6:	3004      	adds	r0, #4
  41aaa8:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41aaaa:	6820      	ldr	r0, [r4, #0]
  41aaac:	3004      	adds	r0, #4
  41aaae:	4b53      	ldr	r3, [pc, #332]	; (41abfc <basic_init+0x318>)
  41aab0:	6a1b      	ldr	r3, [r3, #32]
  41aab2:	f013 0f02 	tst.w	r3, #2
  41aab6:	f000 86e4 	beq.w	41b882 <basic_init+0xf9e>
  41aaba:	f04f 0200 	mov.w	r2, #0
  41aabe:	2301      	movs	r3, #1
  41aac0:	f363 0202 	bfi	r2, r3, #0, #3
  41aac4:	2307      	movs	r3, #7
  41aac6:	f363 02c7 	bfi	r2, r3, #3, #5
  41aaca:	2308      	movs	r3, #8
  41aacc:	f363 220c 	bfi	r2, r3, #8, #5
  41aad0:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41aad4:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41aad8:	f248 0189 	movw	r1, #32905	; 0x8089
  41aadc:	4b48      	ldr	r3, [pc, #288]	; (41ac00 <basic_init+0x31c>)
  41aade:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
  41aae0:	4d43      	ldr	r5, [pc, #268]	; (41abf0 <basic_init+0x30c>)
  41aae2:	6828      	ldr	r0, [r5, #0]
  41aae4:	4c45      	ldr	r4, [pc, #276]	; (41abfc <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41aae6:	6962      	ldr	r2, [r4, #20]
  41aae8:	217e      	movs	r1, #126	; 0x7e
  41aaea:	3004      	adds	r0, #4
  41aaec:	4b45      	ldr	r3, [pc, #276]	; (41ac04 <basic_init+0x320>)
  41aaee:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41aaf0:	6828      	ldr	r0, [r5, #0]
  41aaf2:	3004      	adds	r0, #4
  41aaf4:	6a23      	ldr	r3, [r4, #32]
  41aaf6:	f013 0f02 	tst.w	r3, #2
  41aafa:	f000 86c6 	beq.w	41b88a <basic_init+0xfa6>
  41aafe:	f04f 0200 	mov.w	r2, #0
  41ab02:	2301      	movs	r3, #1
  41ab04:	f363 0202 	bfi	r2, r3, #0, #3
  41ab08:	2307      	movs	r3, #7
  41ab0a:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab0e:	2308      	movs	r3, #8
  41ab10:	f363 220c 	bfi	r2, r3, #8, #5
  41ab14:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ab18:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41ab1c:	2179      	movs	r1, #121	; 0x79
  41ab1e:	4b38      	ldr	r3, [pc, #224]	; (41ac00 <basic_init+0x31c>)
  41ab20:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41ab22:	4b33      	ldr	r3, [pc, #204]	; (41abf0 <basic_init+0x30c>)
  41ab24:	6818      	ldr	r0, [r3, #0]
  41ab26:	3004      	adds	r0, #4
  41ab28:	4b34      	ldr	r3, [pc, #208]	; (41abfc <basic_init+0x318>)
  41ab2a:	6a1b      	ldr	r3, [r3, #32]
  41ab2c:	f013 0f02 	tst.w	r3, #2
  41ab30:	f000 86af 	beq.w	41b892 <basic_init+0xfae>
  41ab34:	f04f 0200 	mov.w	r2, #0
  41ab38:	2301      	movs	r3, #1
  41ab3a:	f363 0202 	bfi	r2, r3, #0, #3
  41ab3e:	2307      	movs	r3, #7
  41ab40:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab44:	2308      	movs	r3, #8
  41ab46:	f363 220c 	bfi	r2, r3, #8, #5
  41ab4a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ab4e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41ab52:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41ab56:	4b2a      	ldr	r3, [pc, #168]	; (41ac00 <basic_init+0x31c>)
  41ab58:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41ab5a:	4b25      	ldr	r3, [pc, #148]	; (41abf0 <basic_init+0x30c>)
  41ab5c:	6818      	ldr	r0, [r3, #0]
  41ab5e:	3004      	adds	r0, #4
  41ab60:	4b26      	ldr	r3, [pc, #152]	; (41abfc <basic_init+0x318>)
  41ab62:	6a1b      	ldr	r3, [r3, #32]
  41ab64:	f013 0f02 	tst.w	r3, #2
  41ab68:	f000 8697 	beq.w	41b89a <basic_init+0xfb6>
  41ab6c:	f04f 0200 	mov.w	r2, #0
  41ab70:	2301      	movs	r3, #1
  41ab72:	f363 0202 	bfi	r2, r3, #0, #3
  41ab76:	2307      	movs	r3, #7
  41ab78:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab7c:	2308      	movs	r3, #8
  41ab7e:	f363 220c 	bfi	r2, r3, #8, #5
  41ab82:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ab86:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41ab8a:	2199      	movs	r1, #153	; 0x99
  41ab8c:	4b1c      	ldr	r3, [pc, #112]	; (41ac00 <basic_init+0x31c>)
  41ab8e:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
  41ab90:	4c17      	ldr	r4, [pc, #92]	; (41abf0 <basic_init+0x30c>)
  41ab92:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41ab94:	2201      	movs	r2, #1
  41ab96:	2190      	movs	r1, #144	; 0x90
  41ab98:	3004      	adds	r0, #4
  41ab9a:	4b1c      	ldr	r3, [pc, #112]	; (41ac0c <basic_init+0x328>)
  41ab9c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41ab9e:	6825      	ldr	r5, [r4, #0]
  41aba0:	3504      	adds	r5, #4
  41aba2:	2000      	movs	r0, #0
  41aba4:	4b1a      	ldr	r3, [pc, #104]	; (41ac10 <basic_init+0x32c>)
  41aba6:	4798      	blx	r3
  41aba8:	2801      	cmp	r0, #1
  41abaa:	f240 867a 	bls.w	41b8a2 <basic_init+0xfbe>
  41abae:	2000      	movs	r0, #0
  41abb0:	4b15      	ldr	r3, [pc, #84]	; (41ac08 <basic_init+0x324>)
  41abb2:	4798      	blx	r3
  41abb4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41abb8:	0040      	lsls	r0, r0, #1
  41abba:	3050      	adds	r0, #80	; 0x50
  41abbc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41abc0:	f280 868a 	bge.w	41b8d8 <basic_init+0xff4>
  41abc4:	2401      	movs	r4, #1
  41abc6:	2000      	movs	r0, #0
  41abc8:	4b0f      	ldr	r3, [pc, #60]	; (41ac08 <basic_init+0x324>)
  41abca:	4798      	blx	r3
  41abcc:	3028      	adds	r0, #40	; 0x28
  41abce:	0040      	lsls	r0, r0, #1
  41abd0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41abd4:	f280 86a2 	bge.w	41b91c <basic_init+0x1038>
  41abd8:	2201      	movs	r2, #1
  41abda:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41abdc:	b212      	sxth	r2, r2
  41abde:	2112      	movs	r1, #18
  41abe0:	4628      	mov	r0, r5
  41abe2:	4b0a      	ldr	r3, [pc, #40]	; (41ac0c <basic_init+0x328>)
  41abe4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41abe6:	4b02      	ldr	r3, [pc, #8]	; (41abf0 <basic_init+0x30c>)
  41abe8:	681d      	ldr	r5, [r3, #0]
  41abea:	3504      	adds	r5, #4
  41abec:	e012      	b.n	41ac14 <basic_init+0x330>
  41abee:	bf00      	nop
  41abf0:	20414798 	.word	0x20414798
  41abf4:	0041704d 	.word	0x0041704d
  41abf8:	004098e1 	.word	0x004098e1
  41abfc:	2041479c 	.word	0x2041479c
  41ac00:	00409751 	.word	0x00409751
  41ac04:	00409a71 	.word	0x00409a71
  41ac08:	00413f95 	.word	0x00413f95
  41ac0c:	004095c1 	.word	0x004095c1
  41ac10:	00413fb5 	.word	0x00413fb5
  41ac14:	2000      	movs	r0, #0
  41ac16:	4bc2      	ldr	r3, [pc, #776]	; (41af20 <basic_init+0x63c>)
  41ac18:	4798      	blx	r3
  41ac1a:	2801      	cmp	r0, #1
  41ac1c:	f240 868c 	bls.w	41b938 <basic_init+0x1054>
  41ac20:	2000      	movs	r0, #0
  41ac22:	4bc0      	ldr	r3, [pc, #768]	; (41af24 <basic_init+0x640>)
  41ac24:	4798      	blx	r3
  41ac26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac2a:	0040      	lsls	r0, r0, #1
  41ac2c:	3050      	adds	r0, #80	; 0x50
  41ac2e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac32:	f280 869c 	bge.w	41b96e <basic_init+0x108a>
  41ac36:	2401      	movs	r4, #1
  41ac38:	2000      	movs	r0, #0
  41ac3a:	4bba      	ldr	r3, [pc, #744]	; (41af24 <basic_init+0x640>)
  41ac3c:	4798      	blx	r3
  41ac3e:	3028      	adds	r0, #40	; 0x28
  41ac40:	0040      	lsls	r0, r0, #1
  41ac42:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac46:	f280 86a2 	bge.w	41b98e <basic_init+0x10aa>
  41ac4a:	2201      	movs	r2, #1
  41ac4c:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ac4e:	b212      	sxth	r2, r2
  41ac50:	2113      	movs	r1, #19
  41ac52:	4628      	mov	r0, r5
  41ac54:	4bb4      	ldr	r3, [pc, #720]	; (41af28 <basic_init+0x644>)
  41ac56:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41ac58:	4bb4      	ldr	r3, [pc, #720]	; (41af2c <basic_init+0x648>)
  41ac5a:	681d      	ldr	r5, [r3, #0]
  41ac5c:	3504      	adds	r5, #4
  41ac5e:	2000      	movs	r0, #0
  41ac60:	4baf      	ldr	r3, [pc, #700]	; (41af20 <basic_init+0x63c>)
  41ac62:	4798      	blx	r3
  41ac64:	2801      	cmp	r0, #1
  41ac66:	f240 86a0 	bls.w	41b9aa <basic_init+0x10c6>
  41ac6a:	2000      	movs	r0, #0
  41ac6c:	4bad      	ldr	r3, [pc, #692]	; (41af24 <basic_init+0x640>)
  41ac6e:	4798      	blx	r3
  41ac70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac74:	0040      	lsls	r0, r0, #1
  41ac76:	3050      	adds	r0, #80	; 0x50
  41ac78:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac7c:	f280 86b0 	bge.w	41b9e0 <basic_init+0x10fc>
  41ac80:	2401      	movs	r4, #1
  41ac82:	2000      	movs	r0, #0
  41ac84:	4ba7      	ldr	r3, [pc, #668]	; (41af24 <basic_init+0x640>)
  41ac86:	4798      	blx	r3
  41ac88:	3028      	adds	r0, #40	; 0x28
  41ac8a:	0040      	lsls	r0, r0, #1
  41ac8c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac90:	f280 86b6 	bge.w	41ba00 <basic_init+0x111c>
  41ac94:	2201      	movs	r2, #1
  41ac96:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ac98:	b212      	sxth	r2, r2
  41ac9a:	2110      	movs	r1, #16
  41ac9c:	4628      	mov	r0, r5
  41ac9e:	4ba2      	ldr	r3, [pc, #648]	; (41af28 <basic_init+0x644>)
  41aca0:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41aca2:	4ba2      	ldr	r3, [pc, #648]	; (41af2c <basic_init+0x648>)
  41aca4:	681d      	ldr	r5, [r3, #0]
  41aca6:	3504      	adds	r5, #4
  41aca8:	2000      	movs	r0, #0
  41acaa:	4b9d      	ldr	r3, [pc, #628]	; (41af20 <basic_init+0x63c>)
  41acac:	4798      	blx	r3
  41acae:	2801      	cmp	r0, #1
  41acb0:	f240 86b4 	bls.w	41ba1c <basic_init+0x1138>
  41acb4:	2000      	movs	r0, #0
  41acb6:	4b9b      	ldr	r3, [pc, #620]	; (41af24 <basic_init+0x640>)
  41acb8:	4798      	blx	r3
  41acba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41acbe:	0040      	lsls	r0, r0, #1
  41acc0:	3050      	adds	r0, #80	; 0x50
  41acc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41acc6:	f280 86c4 	bge.w	41ba52 <basic_init+0x116e>
  41acca:	2401      	movs	r4, #1
  41accc:	2000      	movs	r0, #0
  41acce:	4b95      	ldr	r3, [pc, #596]	; (41af24 <basic_init+0x640>)
  41acd0:	4798      	blx	r3
  41acd2:	3028      	adds	r0, #40	; 0x28
  41acd4:	0040      	lsls	r0, r0, #1
  41acd6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41acda:	f280 86ca 	bge.w	41ba72 <basic_init+0x118e>
  41acde:	2201      	movs	r2, #1
  41ace0:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ace2:	b212      	sxth	r2, r2
  41ace4:	2111      	movs	r1, #17
  41ace6:	4628      	mov	r0, r5
  41ace8:	4b8f      	ldr	r3, [pc, #572]	; (41af28 <basic_init+0x644>)
  41acea:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41acec:	4b8f      	ldr	r3, [pc, #572]	; (41af2c <basic_init+0x648>)
  41acee:	681c      	ldr	r4, [r3, #0]
  41acf0:	3404      	adds	r4, #4
  41acf2:	2000      	movs	r0, #0
  41acf4:	4b8a      	ldr	r3, [pc, #552]	; (41af20 <basic_init+0x63c>)
  41acf6:	4798      	blx	r3
  41acf8:	2801      	cmp	r0, #1
  41acfa:	f240 86c8 	bls.w	41ba8e <basic_init+0x11aa>
  41acfe:	2000      	movs	r0, #0
  41ad00:	4b88      	ldr	r3, [pc, #544]	; (41af24 <basic_init+0x640>)
  41ad02:	4798      	blx	r3
  41ad04:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ad08:	0040      	lsls	r0, r0, #1
  41ad0a:	3050      	adds	r0, #80	; 0x50
  41ad0c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad10:	f280 86d8 	bge.w	41bac4 <basic_init+0x11e0>
  41ad14:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41ad16:	2114      	movs	r1, #20
  41ad18:	4620      	mov	r0, r4
  41ad1a:	4d83      	ldr	r5, [pc, #524]	; (41af28 <basic_init+0x644>)
  41ad1c:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41ad1e:	4c83      	ldr	r4, [pc, #524]	; (41af2c <basic_init+0x648>)
  41ad20:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41ad22:	2200      	movs	r2, #0
  41ad24:	21b0      	movs	r1, #176	; 0xb0
  41ad26:	3004      	adds	r0, #4
  41ad28:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
  41ad2a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41ad2c:	2239      	movs	r2, #57	; 0x39
  41ad2e:	21b7      	movs	r1, #183	; 0xb7
  41ad30:	3004      	adds	r0, #4
  41ad32:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
  41ad34:	6820      	ldr	r0, [r4, #0]
  41ad36:	300c      	adds	r0, #12
  41ad38:	4b7d      	ldr	r3, [pc, #500]	; (41af30 <basic_init+0x64c>)
  41ad3a:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
  41ad3c:	6820      	ldr	r0, [r4, #0]
  41ad3e:	1d01      	adds	r1, r0, #4
  41ad40:	300c      	adds	r0, #12
  41ad42:	4b7c      	ldr	r3, [pc, #496]	; (41af34 <basic_init+0x650>)
  41ad44:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41ad46:	6820      	ldr	r0, [r4, #0]
  41ad48:	300c      	adds	r0, #12
  41ad4a:	4b7b      	ldr	r3, [pc, #492]	; (41af38 <basic_init+0x654>)
  41ad4c:	6a1b      	ldr	r3, [r3, #32]
  41ad4e:	f013 0f02 	tst.w	r3, #2
  41ad52:	f000 86c7 	beq.w	41bae4 <basic_init+0x1200>
  41ad56:	f04f 0200 	mov.w	r2, #0
  41ad5a:	2306      	movs	r3, #6
  41ad5c:	f363 0202 	bfi	r2, r3, #0, #3
  41ad60:	231a      	movs	r3, #26
  41ad62:	f363 02c7 	bfi	r2, r3, #3, #5
  41ad66:	231b      	movs	r3, #27
  41ad68:	f363 220c 	bfi	r2, r3, #8, #5
  41ad6c:	2305      	movs	r3, #5
  41ad6e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ad72:	2129      	movs	r1, #41	; 0x29
  41ad74:	4b71      	ldr	r3, [pc, #452]	; (41af3c <basic_init+0x658>)
  41ad76:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
  41ad78:	4b6c      	ldr	r3, [pc, #432]	; (41af2c <basic_init+0x648>)
  41ad7a:	6818      	ldr	r0, [r3, #0]
  41ad7c:	300c      	adds	r0, #12
  41ad7e:	4b6e      	ldr	r3, [pc, #440]	; (41af38 <basic_init+0x654>)
  41ad80:	6a1b      	ldr	r3, [r3, #32]
  41ad82:	f013 0f02 	tst.w	r3, #2
  41ad86:	f000 86bc 	beq.w	41bb02 <basic_init+0x121e>
  41ad8a:	f04f 0207 	mov.w	r2, #7
  41ad8e:	231b      	movs	r3, #27
  41ad90:	f363 02c7 	bfi	r2, r3, #3, #5
  41ad94:	231d      	movs	r3, #29
  41ad96:	f363 220c 	bfi	r2, r3, #8, #5
  41ad9a:	2301      	movs	r3, #1
  41ad9c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41ada0:	2139      	movs	r1, #57	; 0x39
  41ada2:	4b66      	ldr	r3, [pc, #408]	; (41af3c <basic_init+0x658>)
  41ada4:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41ada6:	4b61      	ldr	r3, [pc, #388]	; (41af2c <basic_init+0x648>)
  41ada8:	6818      	ldr	r0, [r3, #0]
  41adaa:	300c      	adds	r0, #12
  41adac:	4b62      	ldr	r3, [pc, #392]	; (41af38 <basic_init+0x654>)
  41adae:	6a1b      	ldr	r3, [r3, #32]
  41adb0:	f013 0f02 	tst.w	r3, #2
  41adb4:	f000 86b3 	beq.w	41bb1e <basic_init+0x123a>
  41adb8:	f04f 0200 	mov.w	r2, #0
  41adbc:	2302      	movs	r3, #2
  41adbe:	f363 0202 	bfi	r2, r3, #0, #3
  41adc2:	2306      	movs	r3, #6
  41adc4:	f363 02c7 	bfi	r2, r3, #3, #5
  41adc8:	2309      	movs	r3, #9
  41adca:	f363 220c 	bfi	r2, r3, #8, #5
  41adce:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41add2:	f248 0189 	movw	r1, #32905	; 0x8089
  41add6:	4b59      	ldr	r3, [pc, #356]	; (41af3c <basic_init+0x658>)
  41add8:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41adda:	4b54      	ldr	r3, [pc, #336]	; (41af2c <basic_init+0x648>)
  41addc:	6818      	ldr	r0, [r3, #0]
  41adde:	300c      	adds	r0, #12
  41ade0:	4b55      	ldr	r3, [pc, #340]	; (41af38 <basic_init+0x654>)
  41ade2:	6a1b      	ldr	r3, [r3, #32]
  41ade4:	f013 0f02 	tst.w	r3, #2
  41ade8:	f000 86a9 	beq.w	41bb3e <basic_init+0x125a>
  41adec:	f04f 0200 	mov.w	r2, #0
  41adf0:	2302      	movs	r3, #2
  41adf2:	f363 0202 	bfi	r2, r3, #0, #3
  41adf6:	2306      	movs	r3, #6
  41adf8:	f363 02c7 	bfi	r2, r3, #3, #5
  41adfc:	2309      	movs	r3, #9
  41adfe:	f363 220c 	bfi	r2, r3, #8, #5
  41ae02:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41ae06:	2179      	movs	r1, #121	; 0x79
  41ae08:	4b4c      	ldr	r3, [pc, #304]	; (41af3c <basic_init+0x658>)
  41ae0a:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41ae0c:	4b47      	ldr	r3, [pc, #284]	; (41af2c <basic_init+0x648>)
  41ae0e:	6818      	ldr	r0, [r3, #0]
  41ae10:	300c      	adds	r0, #12
  41ae12:	4b49      	ldr	r3, [pc, #292]	; (41af38 <basic_init+0x654>)
  41ae14:	6a1b      	ldr	r3, [r3, #32]
  41ae16:	f013 0f02 	tst.w	r3, #2
  41ae1a:	f000 86a0 	beq.w	41bb5e <basic_init+0x127a>
  41ae1e:	f04f 0200 	mov.w	r2, #0
  41ae22:	2302      	movs	r3, #2
  41ae24:	f363 0202 	bfi	r2, r3, #0, #3
  41ae28:	2306      	movs	r3, #6
  41ae2a:	f363 02c7 	bfi	r2, r3, #3, #5
  41ae2e:	2309      	movs	r3, #9
  41ae30:	f363 220c 	bfi	r2, r3, #8, #5
  41ae34:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41ae38:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41ae3c:	4b3f      	ldr	r3, [pc, #252]	; (41af3c <basic_init+0x658>)
  41ae3e:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41ae40:	4b3a      	ldr	r3, [pc, #232]	; (41af2c <basic_init+0x648>)
  41ae42:	6818      	ldr	r0, [r3, #0]
  41ae44:	300c      	adds	r0, #12
  41ae46:	4b3c      	ldr	r3, [pc, #240]	; (41af38 <basic_init+0x654>)
  41ae48:	6a1b      	ldr	r3, [r3, #32]
  41ae4a:	f013 0f02 	tst.w	r3, #2
  41ae4e:	f000 8696 	beq.w	41bb7e <basic_init+0x129a>
  41ae52:	f04f 0200 	mov.w	r2, #0
  41ae56:	2302      	movs	r3, #2
  41ae58:	f363 0202 	bfi	r2, r3, #0, #3
  41ae5c:	2306      	movs	r3, #6
  41ae5e:	f363 02c7 	bfi	r2, r3, #3, #5
  41ae62:	2309      	movs	r3, #9
  41ae64:	f363 220c 	bfi	r2, r3, #8, #5
  41ae68:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41ae6c:	2199      	movs	r1, #153	; 0x99
  41ae6e:	4b33      	ldr	r3, [pc, #204]	; (41af3c <basic_init+0x658>)
  41ae70:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
  41ae72:	4c2e      	ldr	r4, [pc, #184]	; (41af2c <basic_init+0x648>)
  41ae74:	6820      	ldr	r0, [r4, #0]
  41ae76:	3008      	adds	r0, #8
  41ae78:	4b2d      	ldr	r3, [pc, #180]	; (41af30 <basic_init+0x64c>)
  41ae7a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
  41ae7c:	6820      	ldr	r0, [r4, #0]
  41ae7e:	3008      	adds	r0, #8
  41ae80:	4b2d      	ldr	r3, [pc, #180]	; (41af38 <basic_init+0x654>)
  41ae82:	6a1b      	ldr	r3, [r3, #32]
  41ae84:	f013 0f02 	tst.w	r3, #2
  41ae88:	f000 8689 	beq.w	41bb9e <basic_init+0x12ba>
  41ae8c:	f04f 0207 	mov.w	r2, #7
  41ae90:	231d      	movs	r3, #29
  41ae92:	f363 02c7 	bfi	r2, r3, #3, #5
  41ae96:	f363 220c 	bfi	r2, r3, #8, #5
  41ae9a:	2303      	movs	r3, #3
  41ae9c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41aea0:	f241 0129 	movw	r1, #4137	; 0x1029
  41aea4:	4d25      	ldr	r5, [pc, #148]	; (41af3c <basic_init+0x658>)
  41aea6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
  41aea8:	4c20      	ldr	r4, [pc, #128]	; (41af2c <basic_init+0x648>)
  41aeaa:	6820      	ldr	r0, [r4, #0]
  41aeac:	4f22      	ldr	r7, [pc, #136]	; (41af38 <basic_init+0x654>)
  41aeae:	89ba      	ldrh	r2, [r7, #12]
  41aeb0:	f240 1129 	movw	r1, #297	; 0x129
  41aeb4:	3008      	adds	r0, #8
  41aeb6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
  41aeb8:	6826      	ldr	r6, [r4, #0]
  41aeba:	3608      	adds	r6, #8
  41aebc:	2133      	movs	r1, #51	; 0x33
  41aebe:	89b8      	ldrh	r0, [r7, #12]
  41aec0:	4b1f      	ldr	r3, [pc, #124]	; (41af40 <basic_init+0x65c>)
  41aec2:	4798      	blx	r3
  41aec4:	4602      	mov	r2, r0
  41aec6:	f241 1129 	movw	r1, #4393	; 0x1129
  41aeca:	4630      	mov	r0, r6
  41aecc:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
  41aece:	6820      	ldr	r0, [r4, #0]
  41aed0:	3008      	adds	r0, #8
  41aed2:	6a3b      	ldr	r3, [r7, #32]
  41aed4:	f013 0f02 	tst.w	r3, #2
  41aed8:	f000 8671 	beq.w	41bbbe <basic_init+0x12da>
  41aedc:	f04f 32ff 	mov.w	r2, #4294967295
  41aee0:	f242 0129 	movw	r1, #8233	; 0x2029
  41aee4:	4f15      	ldr	r7, [pc, #84]	; (41af3c <basic_init+0x658>)
  41aee6:	47b8      	blx	r7
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
  41aee8:	4c10      	ldr	r4, [pc, #64]	; (41af2c <basic_init+0x648>)
  41aeea:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41aeec:	2200      	movs	r2, #0
  41aeee:	f44f 7198 	mov.w	r1, #304	; 0x130
  41aef2:	3008      	adds	r0, #8
  41aef4:	4b0c      	ldr	r3, [pc, #48]	; (41af28 <basic_init+0x644>)
  41aef6:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
  41aef8:	6825      	ldr	r5, [r4, #0]
  41aefa:	3508      	adds	r5, #8
  41aefc:	4e0e      	ldr	r6, [pc, #56]	; (41af38 <basic_init+0x654>)
  41aefe:	2133      	movs	r1, #51	; 0x33
  41af00:	89b0      	ldrh	r0, [r6, #12]
  41af02:	4b0f      	ldr	r3, [pc, #60]	; (41af40 <basic_init+0x65c>)
  41af04:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41af06:	4602      	mov	r2, r0
  41af08:	f241 2139 	movw	r1, #4665	; 0x1239
  41af0c:	4628      	mov	r0, r5
  41af0e:	47b8      	blx	r7
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
  41af10:	6820      	ldr	r0, [r4, #0]
  41af12:	3008      	adds	r0, #8
  41af14:	6a33      	ldr	r3, [r6, #32]
  41af16:	f013 0f02 	tst.w	r3, #2
  41af1a:	f000 865f 	beq.w	41bbdc <basic_init+0x12f8>
  41af1e:	e011      	b.n	41af44 <basic_init+0x660>
  41af20:	00413fb5 	.word	0x00413fb5
  41af24:	00413f95 	.word	0x00413f95
  41af28:	004095c1 	.word	0x004095c1
  41af2c:	20414798 	.word	0x20414798
  41af30:	0041704d 	.word	0x0041704d
  41af34:	0040945d 	.word	0x0040945d
  41af38:	2041479c 	.word	0x2041479c
  41af3c:	00409751 	.word	0x00409751
  41af40:	00414ff5 	.word	0x00414ff5
  41af44:	f04f 0200 	mov.w	r2, #0
  41af48:	2306      	movs	r3, #6
  41af4a:	f363 0202 	bfi	r2, r3, #0, #3
  41af4e:	2319      	movs	r3, #25
  41af50:	f363 02c7 	bfi	r2, r3, #3, #5
  41af54:	f363 220c 	bfi	r2, r3, #8, #5
  41af58:	2303      	movs	r3, #3
  41af5a:	f363 324f 	bfi	r2, r3, #13, #3
  41af5e:	f241 0139 	movw	r1, #4153	; 0x1039
  41af62:	4bc9      	ldr	r3, [pc, #804]	; (41b288 <basic_init+0x9a4>)
  41af64:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
  41af66:	4bc9      	ldr	r3, [pc, #804]	; (41b28c <basic_init+0x9a8>)
  41af68:	6818      	ldr	r0, [r3, #0]
  41af6a:	3008      	adds	r0, #8
  41af6c:	4bc8      	ldr	r3, [pc, #800]	; (41b290 <basic_init+0x9ac>)
  41af6e:	6a1b      	ldr	r3, [r3, #32]
  41af70:	f013 0f02 	tst.w	r3, #2
  41af74:	f000 8642 	beq.w	41bbfc <basic_init+0x1318>
  41af78:	f04f 0200 	mov.w	r2, #0
  41af7c:	2301      	movs	r3, #1
  41af7e:	f363 0202 	bfi	r2, r3, #0, #3
  41af82:	2307      	movs	r3, #7
  41af84:	f363 02c7 	bfi	r2, r3, #3, #5
  41af88:	2308      	movs	r3, #8
  41af8a:	f363 220c 	bfi	r2, r3, #8, #5
  41af8e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41af92:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41af96:	f240 1139 	movw	r1, #313	; 0x139
  41af9a:	4bbb      	ldr	r3, [pc, #748]	; (41b288 <basic_init+0x9a4>)
  41af9c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
  41af9e:	4bbb      	ldr	r3, [pc, #748]	; (41b28c <basic_init+0x9a8>)
  41afa0:	6818      	ldr	r0, [r3, #0]
  41afa2:	3008      	adds	r0, #8
  41afa4:	4bba      	ldr	r3, [pc, #744]	; (41b290 <basic_init+0x9ac>)
  41afa6:	6a1b      	ldr	r3, [r3, #32]
  41afa8:	f013 0f02 	tst.w	r3, #2
  41afac:	f000 8636 	beq.w	41bc1c <basic_init+0x1338>
  41afb0:	f04f 0200 	mov.w	r2, #0
  41afb4:	2301      	movs	r3, #1
  41afb6:	f363 0202 	bfi	r2, r3, #0, #3
  41afba:	2307      	movs	r3, #7
  41afbc:	f363 02c7 	bfi	r2, r3, #3, #5
  41afc0:	2308      	movs	r3, #8
  41afc2:	f363 220c 	bfi	r2, r3, #8, #5
  41afc6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41afca:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41afce:	f241 1139 	movw	r1, #4409	; 0x1139
  41afd2:	4bad      	ldr	r3, [pc, #692]	; (41b288 <basic_init+0x9a4>)
  41afd4:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
  41afd6:	4bad      	ldr	r3, [pc, #692]	; (41b28c <basic_init+0x9a8>)
  41afd8:	6818      	ldr	r0, [r3, #0]
  41afda:	3008      	adds	r0, #8
  41afdc:	4bac      	ldr	r3, [pc, #688]	; (41b290 <basic_init+0x9ac>)
  41afde:	6a1b      	ldr	r3, [r3, #32]
  41afe0:	f013 0f02 	tst.w	r3, #2
  41afe4:	f000 862a 	beq.w	41bc3c <basic_init+0x1358>
  41afe8:	f04f 0200 	mov.w	r2, #0
  41afec:	2306      	movs	r3, #6
  41afee:	f363 0202 	bfi	r2, r3, #0, #3
  41aff2:	231a      	movs	r3, #26
  41aff4:	f363 02c7 	bfi	r2, r3, #3, #5
  41aff8:	231c      	movs	r3, #28
  41affa:	f363 220c 	bfi	r2, r3, #8, #5
  41affe:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b002:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b006:	f242 0139 	movw	r1, #8249	; 0x2039
  41b00a:	4b9f      	ldr	r3, [pc, #636]	; (41b288 <basic_init+0x9a4>)
  41b00c:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b00e:	4b9f      	ldr	r3, [pc, #636]	; (41b28c <basic_init+0x9a8>)
  41b010:	6818      	ldr	r0, [r3, #0]
  41b012:	3008      	adds	r0, #8
  41b014:	4b9e      	ldr	r3, [pc, #632]	; (41b290 <basic_init+0x9ac>)
  41b016:	6a1b      	ldr	r3, [r3, #32]
  41b018:	f013 0f02 	tst.w	r3, #2
  41b01c:	f000 861e 	beq.w	41bc5c <basic_init+0x1378>
  41b020:	f04f 0200 	mov.w	r2, #0
  41b024:	2301      	movs	r3, #1
  41b026:	f363 0202 	bfi	r2, r3, #0, #3
  41b02a:	2307      	movs	r3, #7
  41b02c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b030:	2308      	movs	r3, #8
  41b032:	f363 220c 	bfi	r2, r3, #8, #5
  41b036:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b03a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b03e:	f249 0189 	movw	r1, #37001	; 0x9089
  41b042:	4b91      	ldr	r3, [pc, #580]	; (41b288 <basic_init+0x9a4>)
  41b044:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b046:	4b91      	ldr	r3, [pc, #580]	; (41b28c <basic_init+0x9a8>)
  41b048:	6818      	ldr	r0, [r3, #0]
  41b04a:	3008      	adds	r0, #8
  41b04c:	4b90      	ldr	r3, [pc, #576]	; (41b290 <basic_init+0x9ac>)
  41b04e:	6a1b      	ldr	r3, [r3, #32]
  41b050:	f013 0f02 	tst.w	r3, #2
  41b054:	f000 8606 	beq.w	41bc64 <basic_init+0x1380>
  41b058:	f04f 32ff 	mov.w	r2, #4294967295
  41b05c:	f248 1189 	movw	r1, #33161	; 0x8189
  41b060:	4b89      	ldr	r3, [pc, #548]	; (41b288 <basic_init+0x9a4>)
  41b062:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41b064:	4b89      	ldr	r3, [pc, #548]	; (41b28c <basic_init+0x9a8>)
  41b066:	6818      	ldr	r0, [r3, #0]
  41b068:	3008      	adds	r0, #8
  41b06a:	4b89      	ldr	r3, [pc, #548]	; (41b290 <basic_init+0x9ac>)
  41b06c:	6a1b      	ldr	r3, [r3, #32]
  41b06e:	f013 0f02 	tst.w	r3, #2
  41b072:	f000 85fb 	beq.w	41bc6c <basic_init+0x1388>
  41b076:	f04f 32ff 	mov.w	r2, #4294967295
  41b07a:	f249 1189 	movw	r1, #37257	; 0x9189
  41b07e:	4b82      	ldr	r3, [pc, #520]	; (41b288 <basic_init+0x9a4>)
  41b080:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b082:	4b82      	ldr	r3, [pc, #520]	; (41b28c <basic_init+0x9a8>)
  41b084:	6818      	ldr	r0, [r3, #0]
  41b086:	3008      	adds	r0, #8
  41b088:	4b81      	ldr	r3, [pc, #516]	; (41b290 <basic_init+0x9ac>)
  41b08a:	6a1b      	ldr	r3, [r3, #32]
  41b08c:	f013 0f02 	tst.w	r3, #2
  41b090:	f000 85f0 	beq.w	41bc74 <basic_init+0x1390>
  41b094:	f04f 0200 	mov.w	r2, #0
  41b098:	2305      	movs	r3, #5
  41b09a:	f363 0202 	bfi	r2, r3, #0, #3
  41b09e:	2315      	movs	r3, #21
  41b0a0:	f363 02c7 	bfi	r2, r3, #3, #5
  41b0a4:	f363 220c 	bfi	r2, r3, #8, #5
  41b0a8:	2302      	movs	r3, #2
  41b0aa:	f363 324f 	bfi	r2, r3, #13, #3
  41b0ae:	f24a 0189 	movw	r1, #41097	; 0xa089
  41b0b2:	4b75      	ldr	r3, [pc, #468]	; (41b288 <basic_init+0x9a4>)
  41b0b4:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b0b6:	4b75      	ldr	r3, [pc, #468]	; (41b28c <basic_init+0x9a8>)
  41b0b8:	6818      	ldr	r0, [r3, #0]
  41b0ba:	3008      	adds	r0, #8
  41b0bc:	4b74      	ldr	r3, [pc, #464]	; (41b290 <basic_init+0x9ac>)
  41b0be:	6a1b      	ldr	r3, [r3, #32]
  41b0c0:	f013 0f02 	tst.w	r3, #2
  41b0c4:	f000 85e5 	beq.w	41bc92 <basic_init+0x13ae>
  41b0c8:	f04f 0200 	mov.w	r2, #0
  41b0cc:	2301      	movs	r3, #1
  41b0ce:	f363 0202 	bfi	r2, r3, #0, #3
  41b0d2:	2307      	movs	r3, #7
  41b0d4:	f363 02c7 	bfi	r2, r3, #3, #5
  41b0d8:	2308      	movs	r3, #8
  41b0da:	f363 220c 	bfi	r2, r3, #8, #5
  41b0de:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b0e2:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b0e6:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41b0ea:	4b67      	ldr	r3, [pc, #412]	; (41b288 <basic_init+0x9a4>)
  41b0ec:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b0ee:	4b67      	ldr	r3, [pc, #412]	; (41b28c <basic_init+0x9a8>)
  41b0f0:	6818      	ldr	r0, [r3, #0]
  41b0f2:	3008      	adds	r0, #8
  41b0f4:	4b66      	ldr	r3, [pc, #408]	; (41b290 <basic_init+0x9ac>)
  41b0f6:	6a1b      	ldr	r3, [r3, #32]
  41b0f8:	f013 0f02 	tst.w	r3, #2
  41b0fc:	f000 85d2 	beq.w	41bca4 <basic_init+0x13c0>
  41b100:	f04f 32ff 	mov.w	r2, #4294967295
  41b104:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41b108:	4b5f      	ldr	r3, [pc, #380]	; (41b288 <basic_init+0x9a4>)
  41b10a:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41b10c:	4b5f      	ldr	r3, [pc, #380]	; (41b28c <basic_init+0x9a8>)
  41b10e:	6818      	ldr	r0, [r3, #0]
  41b110:	3008      	adds	r0, #8
  41b112:	4b5f      	ldr	r3, [pc, #380]	; (41b290 <basic_init+0x9ac>)
  41b114:	6a1b      	ldr	r3, [r3, #32]
  41b116:	f013 0f02 	tst.w	r3, #2
  41b11a:	f000 85c7 	beq.w	41bcac <basic_init+0x13c8>
  41b11e:	f04f 32ff 	mov.w	r2, #4294967295
  41b122:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41b126:	4b58      	ldr	r3, [pc, #352]	; (41b288 <basic_init+0x9a4>)
  41b128:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b12a:	4b58      	ldr	r3, [pc, #352]	; (41b28c <basic_init+0x9a8>)
  41b12c:	6818      	ldr	r0, [r3, #0]
  41b12e:	3008      	adds	r0, #8
  41b130:	4b57      	ldr	r3, [pc, #348]	; (41b290 <basic_init+0x9ac>)
  41b132:	6a1b      	ldr	r3, [r3, #32]
  41b134:	f013 0f02 	tst.w	r3, #2
  41b138:	f000 85bc 	beq.w	41bcb4 <basic_init+0x13d0>
  41b13c:	f04f 0200 	mov.w	r2, #0
  41b140:	2305      	movs	r3, #5
  41b142:	f363 0202 	bfi	r2, r3, #0, #3
  41b146:	2315      	movs	r3, #21
  41b148:	f363 02c7 	bfi	r2, r3, #3, #5
  41b14c:	f363 220c 	bfi	r2, r3, #8, #5
  41b150:	2302      	movs	r3, #2
  41b152:	f363 324f 	bfi	r2, r3, #13, #3
  41b156:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41b15a:	4b4b      	ldr	r3, [pc, #300]	; (41b288 <basic_init+0x9a4>)
  41b15c:	4798      	blx	r3
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41b15e:	4c4b      	ldr	r4, [pc, #300]	; (41b28c <basic_init+0x9a8>)
  41b160:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41b162:	2229      	movs	r2, #41	; 0x29
  41b164:	21b6      	movs	r1, #182	; 0xb6
  41b166:	3008      	adds	r0, #8
  41b168:	4d4a      	ldr	r5, [pc, #296]	; (41b294 <basic_init+0x9b0>)
  41b16a:	47a8      	blx	r5
    style_init_reset(&styles->btn);
  41b16c:	6820      	ldr	r0, [r4, #0]
  41b16e:	3010      	adds	r0, #16
  41b170:	4b49      	ldr	r3, [pc, #292]	; (41b298 <basic_init+0x9b4>)
  41b172:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41b174:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b176:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41b17a:	2101      	movs	r1, #1
  41b17c:	3010      	adds	r0, #16
  41b17e:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b180:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b182:	22ff      	movs	r2, #255	; 0xff
  41b184:	212c      	movs	r1, #44	; 0x2c
  41b186:	3010      	adds	r0, #16
  41b188:	4b44      	ldr	r3, [pc, #272]	; (41b29c <basic_init+0x9b8>)
  41b18a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
  41b18c:	6820      	ldr	r0, [r4, #0]
  41b18e:	3010      	adds	r0, #16
  41b190:	4b3f      	ldr	r3, [pc, #252]	; (41b290 <basic_init+0x9ac>)
  41b192:	6a1b      	ldr	r3, [r3, #32]
  41b194:	f013 0f02 	tst.w	r3, #2
  41b198:	f000 859b 	beq.w	41bcd2 <basic_init+0x13ee>
  41b19c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b1a0:	2129      	movs	r1, #41	; 0x29
  41b1a2:	4b39      	ldr	r3, [pc, #228]	; (41b288 <basic_init+0x9a4>)
  41b1a4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
  41b1a6:	4b39      	ldr	r3, [pc, #228]	; (41b28c <basic_init+0x9a8>)
  41b1a8:	6818      	ldr	r0, [r3, #0]
  41b1aa:	3010      	adds	r0, #16
  41b1ac:	4b38      	ldr	r3, [pc, #224]	; (41b290 <basic_init+0x9ac>)
  41b1ae:	6a1b      	ldr	r3, [r3, #32]
  41b1b0:	f013 0f02 	tst.w	r3, #2
  41b1b4:	f000 859c 	beq.w	41bcf0 <basic_init+0x140c>
  41b1b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41b1bc:	4a34      	ldr	r2, [pc, #208]	; (41b290 <basic_init+0x9ac>)
  41b1be:	8994      	ldrh	r4, [r2, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41b1c0:	f3c4 02c4 	ubfx	r2, r4, #3, #5
  41b1c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  41b1c8:	eb02 1102 	add.w	r1, r2, r2, lsl #4
  41b1cc:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41b1d0:	25cc      	movs	r5, #204	; 0xcc
  41b1d2:	fb05 1202 	mla	r2, r5, r2, r1
  41b1d6:	3280      	adds	r2, #128	; 0x80
  41b1d8:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41b1dc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41b1e0:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41b1e4:	f04f 0200 	mov.w	r2, #0
  41b1e8:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41b1ec:	f004 0607 	and.w	r6, r4, #7
  41b1f0:	f3c4 3142 	ubfx	r1, r4, #13, #3
  41b1f4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
  41b1f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  41b1fc:	eb01 1601 	add.w	r6, r1, r1, lsl #4
  41b200:	f003 0707 	and.w	r7, r3, #7
  41b204:	0b59      	lsrs	r1, r3, #13
  41b206:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41b20a:	fb05 6101 	mla	r1, r5, r1, r6
  41b20e:	3180      	adds	r1, #128	; 0x80
  41b210:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  41b214:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  41b218:	f3c1 6682 	ubfx	r6, r1, #26, #3
  41b21c:	f366 0202 	bfi	r2, r6, #0, #3
  41b220:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41b224:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41b228:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41b22c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  41b230:	eb04 1404 	add.w	r4, r4, r4, lsl #4
  41b234:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41b238:	fb05 4303 	mla	r3, r5, r3, r4
  41b23c:	3380      	adds	r3, #128	; 0x80
  41b23e:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41b242:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41b246:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41b24a:	f363 220c 	bfi	r2, r3, #8, #5
  41b24e:	f241 0129 	movw	r1, #4137	; 0x1029
  41b252:	4d0d      	ldr	r5, [pc, #52]	; (41b288 <basic_init+0x9a4>)
  41b254:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
  41b256:	4c0d      	ldr	r4, [pc, #52]	; (41b28c <basic_init+0x9a8>)
  41b258:	6820      	ldr	r0, [r4, #0]
  41b25a:	4f0d      	ldr	r7, [pc, #52]	; (41b290 <basic_init+0x9ac>)
  41b25c:	89ba      	ldrh	r2, [r7, #12]
  41b25e:	f240 1129 	movw	r1, #297	; 0x129
  41b262:	3010      	adds	r0, #16
  41b264:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
  41b266:	6826      	ldr	r6, [r4, #0]
  41b268:	3610      	adds	r6, #16
  41b26a:	214c      	movs	r1, #76	; 0x4c
  41b26c:	89b8      	ldrh	r0, [r7, #12]
  41b26e:	4b0c      	ldr	r3, [pc, #48]	; (41b2a0 <basic_init+0x9bc>)
  41b270:	4798      	blx	r3
  41b272:	4602      	mov	r2, r0
  41b274:	f241 1129 	movw	r1, #4393	; 0x1129
  41b278:	4630      	mov	r0, r6
  41b27a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
  41b27c:	6820      	ldr	r0, [r4, #0]
  41b27e:	3010      	adds	r0, #16
  41b280:	6a3b      	ldr	r3, [r7, #32]
  41b282:	f013 0f02 	tst.w	r3, #2
  41b286:	e00d      	b.n	41b2a4 <basic_init+0x9c0>
  41b288:	00409751 	.word	0x00409751
  41b28c:	20414798 	.word	0x20414798
  41b290:	2041479c 	.word	0x2041479c
  41b294:	004095c1 	.word	0x004095c1
  41b298:	0041704d 	.word	0x0041704d
  41b29c:	004098e1 	.word	0x004098e1
  41b2a0:	00414ff5 	.word	0x00414ff5
  41b2a4:	f000 8575 	beq.w	41bd92 <basic_init+0x14ae>
  41b2a8:	f04f 32ff 	mov.w	r2, #4294967295
  41b2ac:	f242 0129 	movw	r1, #8233	; 0x2029
  41b2b0:	4bc7      	ldr	r3, [pc, #796]	; (41b5d0 <basic_init+0xcec>)
  41b2b2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
  41b2b4:	4bc7      	ldr	r3, [pc, #796]	; (41b5d4 <basic_init+0xcf0>)
  41b2b6:	6818      	ldr	r0, [r3, #0]
  41b2b8:	3010      	adds	r0, #16
  41b2ba:	4bc7      	ldr	r3, [pc, #796]	; (41b5d8 <basic_init+0xcf4>)
  41b2bc:	6a1b      	ldr	r3, [r3, #32]
  41b2be:	f013 0f02 	tst.w	r3, #2
  41b2c2:	f000 8575 	beq.w	41bdb0 <basic_init+0x14cc>
    return LV_COLOR_MAKE(r, g, b);
  41b2c6:	f04f 0200 	mov.w	r2, #0
  41b2ca:	2306      	movs	r3, #6
  41b2cc:	f363 0202 	bfi	r2, r3, #0, #3
  41b2d0:	2319      	movs	r3, #25
  41b2d2:	f363 02c7 	bfi	r2, r3, #3, #5
  41b2d6:	f363 220c 	bfi	r2, r3, #8, #5
  41b2da:	2303      	movs	r3, #3
  41b2dc:	f363 324f 	bfi	r2, r3, #13, #3
  41b2e0:	f242 1129 	movw	r1, #8489	; 0x2129
  41b2e4:	4eba      	ldr	r6, [pc, #744]	; (41b5d0 <basic_init+0xcec>)
  41b2e6:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
  41b2e8:	4dba      	ldr	r5, [pc, #744]	; (41b5d4 <basic_init+0xcf0>)
  41b2ea:	6828      	ldr	r0, [r5, #0]
  41b2ec:	4cba      	ldr	r4, [pc, #744]	; (41b5d8 <basic_init+0xcf4>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b2ee:	89a2      	ldrh	r2, [r4, #12]
  41b2f0:	2139      	movs	r1, #57	; 0x39
  41b2f2:	3010      	adds	r0, #16
  41b2f4:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
  41b2f6:	6828      	ldr	r0, [r5, #0]
  41b2f8:	89a2      	ldrh	r2, [r4, #12]
  41b2fa:	f241 0139 	movw	r1, #4153	; 0x1039
  41b2fe:	3010      	adds	r0, #16
  41b300:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
  41b302:	6828      	ldr	r0, [r5, #0]
  41b304:	3010      	adds	r0, #16
  41b306:	6a23      	ldr	r3, [r4, #32]
  41b308:	f013 0f02 	tst.w	r3, #2
  41b30c:	f000 855f 	beq.w	41bdce <basic_init+0x14ea>
  41b310:	f04f 0200 	mov.w	r2, #0
  41b314:	2304      	movs	r3, #4
  41b316:	f363 0202 	bfi	r2, r3, #0, #3
  41b31a:	2311      	movs	r3, #17
  41b31c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b320:	f363 220c 	bfi	r2, r3, #8, #5
  41b324:	2302      	movs	r3, #2
  41b326:	f363 324f 	bfi	r2, r3, #13, #3
  41b32a:	f242 0139 	movw	r1, #8249	; 0x2039
  41b32e:	4ba8      	ldr	r3, [pc, #672]	; (41b5d0 <basic_init+0xcec>)
  41b330:	4798      	blx	r3
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41b332:	4ba8      	ldr	r3, [pc, #672]	; (41b5d4 <basic_init+0xcf0>)
  41b334:	681c      	ldr	r4, [r3, #0]
  41b336:	3410      	adds	r4, #16
  41b338:	2000      	movs	r0, #0
  41b33a:	4ba8      	ldr	r3, [pc, #672]	; (41b5dc <basic_init+0xcf8>)
  41b33c:	4798      	blx	r3
  41b33e:	3028      	adds	r0, #40	; 0x28
  41b340:	0040      	lsls	r0, r0, #1
  41b342:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b346:	f280 8550 	bge.w	41bdea <basic_init+0x1506>
  41b34a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b34c:	2130      	movs	r1, #48	; 0x30
  41b34e:	4620      	mov	r0, r4
  41b350:	4ba3      	ldr	r3, [pc, #652]	; (41b5e0 <basic_init+0xcfc>)
  41b352:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
  41b354:	4c9f      	ldr	r4, [pc, #636]	; (41b5d4 <basic_init+0xcf0>)
  41b356:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41b358:	2200      	movs	r2, #0
  41b35a:	f44f 719e 	mov.w	r1, #316	; 0x13c
  41b35e:	3010      	adds	r0, #16
  41b360:	4ba0      	ldr	r3, [pc, #640]	; (41b5e4 <basic_init+0xd00>)
  41b362:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b364:	6820      	ldr	r0, [r4, #0]
  41b366:	3010      	adds	r0, #16
  41b368:	4b9b      	ldr	r3, [pc, #620]	; (41b5d8 <basic_init+0xcf4>)
  41b36a:	6a1b      	ldr	r3, [r3, #32]
  41b36c:	f013 0f02 	tst.w	r3, #2
  41b370:	f000 8549 	beq.w	41be06 <basic_init+0x1522>
  41b374:	f04f 0200 	mov.w	r2, #0
  41b378:	2302      	movs	r3, #2
  41b37a:	f363 0202 	bfi	r2, r3, #0, #3
  41b37e:	2306      	movs	r3, #6
  41b380:	f363 02c7 	bfi	r2, r3, #3, #5
  41b384:	2309      	movs	r3, #9
  41b386:	f363 220c 	bfi	r2, r3, #8, #5
  41b38a:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b38e:	f248 0189 	movw	r1, #32905	; 0x8089
  41b392:	4b8f      	ldr	r3, [pc, #572]	; (41b5d0 <basic_init+0xcec>)
  41b394:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b396:	4b8f      	ldr	r3, [pc, #572]	; (41b5d4 <basic_init+0xcf0>)
  41b398:	6818      	ldr	r0, [r3, #0]
  41b39a:	3010      	adds	r0, #16
  41b39c:	4b8e      	ldr	r3, [pc, #568]	; (41b5d8 <basic_init+0xcf4>)
  41b39e:	6a1b      	ldr	r3, [r3, #32]
  41b3a0:	f013 0f02 	tst.w	r3, #2
  41b3a4:	f000 8533 	beq.w	41be0e <basic_init+0x152a>
  41b3a8:	f04f 0200 	mov.w	r2, #0
  41b3ac:	2302      	movs	r3, #2
  41b3ae:	f363 0202 	bfi	r2, r3, #0, #3
  41b3b2:	2306      	movs	r3, #6
  41b3b4:	f363 02c7 	bfi	r2, r3, #3, #5
  41b3b8:	2309      	movs	r3, #9
  41b3ba:	f363 220c 	bfi	r2, r3, #8, #5
  41b3be:	f36f 324f 	bfc	r2, #13, #3
  41b3c2:	f249 0189 	movw	r1, #37001	; 0x9089
  41b3c6:	4d82      	ldr	r5, [pc, #520]	; (41b5d0 <basic_init+0xcec>)
  41b3c8:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41b3ca:	4c82      	ldr	r4, [pc, #520]	; (41b5d4 <basic_init+0xcf0>)
  41b3cc:	6820      	ldr	r0, [r4, #0]
  41b3ce:	f04f 32ff 	mov.w	r2, #4294967295
  41b3d2:	f248 1189 	movw	r1, #33161	; 0x8189
  41b3d6:	3010      	adds	r0, #16
  41b3d8:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41b3da:	6820      	ldr	r0, [r4, #0]
  41b3dc:	f04f 32ff 	mov.w	r2, #4294967295
  41b3e0:	f249 1189 	movw	r1, #37257	; 0x9189
  41b3e4:	3010      	adds	r0, #16
  41b3e6:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41b3e8:	6820      	ldr	r0, [r4, #0]
  41b3ea:	3010      	adds	r0, #16
  41b3ec:	4b7a      	ldr	r3, [pc, #488]	; (41b5d8 <basic_init+0xcf4>)
  41b3ee:	6a1b      	ldr	r3, [r3, #32]
  41b3f0:	f013 0f02 	tst.w	r3, #2
  41b3f4:	f000 850f 	beq.w	41be16 <basic_init+0x1532>
  41b3f8:	f04f 0200 	mov.w	r2, #0
  41b3fc:	2304      	movs	r3, #4
  41b3fe:	f363 0202 	bfi	r2, r3, #0, #3
  41b402:	2311      	movs	r3, #17
  41b404:	f363 02c7 	bfi	r2, r3, #3, #5
  41b408:	f363 220c 	bfi	r2, r3, #8, #5
  41b40c:	2302      	movs	r3, #2
  41b40e:	f363 324f 	bfi	r2, r3, #13, #3
  41b412:	f24a 0189 	movw	r1, #41097	; 0xa089
  41b416:	4b6e      	ldr	r3, [pc, #440]	; (41b5d0 <basic_init+0xcec>)
  41b418:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b41a:	4b6e      	ldr	r3, [pc, #440]	; (41b5d4 <basic_init+0xcf0>)
  41b41c:	6818      	ldr	r0, [r3, #0]
  41b41e:	3010      	adds	r0, #16
  41b420:	4b6d      	ldr	r3, [pc, #436]	; (41b5d8 <basic_init+0xcf4>)
  41b422:	6a1b      	ldr	r3, [r3, #32]
  41b424:	f013 0f02 	tst.w	r3, #2
  41b428:	f000 8504 	beq.w	41be34 <basic_init+0x1550>
  41b42c:	f04f 0200 	mov.w	r2, #0
  41b430:	2302      	movs	r3, #2
  41b432:	f363 0202 	bfi	r2, r3, #0, #3
  41b436:	2306      	movs	r3, #6
  41b438:	f363 02c7 	bfi	r2, r3, #3, #5
  41b43c:	2309      	movs	r3, #9
  41b43e:	f363 220c 	bfi	r2, r3, #8, #5
  41b442:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b446:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b44a:	4b61      	ldr	r3, [pc, #388]	; (41b5d0 <basic_init+0xcec>)
  41b44c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b44e:	4b61      	ldr	r3, [pc, #388]	; (41b5d4 <basic_init+0xcf0>)
  41b450:	6818      	ldr	r0, [r3, #0]
  41b452:	3010      	adds	r0, #16
  41b454:	4b60      	ldr	r3, [pc, #384]	; (41b5d8 <basic_init+0xcf4>)
  41b456:	6a1b      	ldr	r3, [r3, #32]
  41b458:	f013 0f02 	tst.w	r3, #2
  41b45c:	f000 84ee 	beq.w	41be3c <basic_init+0x1558>
  41b460:	f04f 0200 	mov.w	r2, #0
  41b464:	2302      	movs	r3, #2
  41b466:	f363 0202 	bfi	r2, r3, #0, #3
  41b46a:	2306      	movs	r3, #6
  41b46c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b470:	2309      	movs	r3, #9
  41b472:	f363 220c 	bfi	r2, r3, #8, #5
  41b476:	f36f 324f 	bfc	r2, #13, #3
  41b47a:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41b47e:	4d54      	ldr	r5, [pc, #336]	; (41b5d0 <basic_init+0xcec>)
  41b480:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41b482:	4c54      	ldr	r4, [pc, #336]	; (41b5d4 <basic_init+0xcf0>)
  41b484:	6820      	ldr	r0, [r4, #0]
  41b486:	f04f 32ff 	mov.w	r2, #4294967295
  41b48a:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41b48e:	3010      	adds	r0, #16
  41b490:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41b492:	6820      	ldr	r0, [r4, #0]
  41b494:	f04f 32ff 	mov.w	r2, #4294967295
  41b498:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41b49c:	3010      	adds	r0, #16
  41b49e:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41b4a0:	6820      	ldr	r0, [r4, #0]
  41b4a2:	3010      	adds	r0, #16
  41b4a4:	4b4c      	ldr	r3, [pc, #304]	; (41b5d8 <basic_init+0xcf4>)
  41b4a6:	6a1b      	ldr	r3, [r3, #32]
  41b4a8:	f013 0f02 	tst.w	r3, #2
  41b4ac:	f000 84ca 	beq.w	41be44 <basic_init+0x1560>
  41b4b0:	f04f 0200 	mov.w	r2, #0
  41b4b4:	2304      	movs	r3, #4
  41b4b6:	f363 0202 	bfi	r2, r3, #0, #3
  41b4ba:	2311      	movs	r3, #17
  41b4bc:	f363 02c7 	bfi	r2, r3, #3, #5
  41b4c0:	f363 220c 	bfi	r2, r3, #8, #5
  41b4c4:	2302      	movs	r3, #2
  41b4c6:	f363 324f 	bfi	r2, r3, #13, #3
  41b4ca:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41b4ce:	4b40      	ldr	r3, [pc, #256]	; (41b5d0 <basic_init+0xcec>)
  41b4d0:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b4d2:	4b40      	ldr	r3, [pc, #256]	; (41b5d4 <basic_init+0xcf0>)
  41b4d4:	6818      	ldr	r0, [r3, #0]
  41b4d6:	3010      	adds	r0, #16
  41b4d8:	4b3f      	ldr	r3, [pc, #252]	; (41b5d8 <basic_init+0xcf4>)
  41b4da:	6a1b      	ldr	r3, [r3, #32]
  41b4dc:	f013 0f02 	tst.w	r3, #2
  41b4e0:	f000 84bf 	beq.w	41be62 <basic_init+0x157e>
  41b4e4:	f04f 0200 	mov.w	r2, #0
  41b4e8:	2302      	movs	r3, #2
  41b4ea:	f363 0202 	bfi	r2, r3, #0, #3
  41b4ee:	2306      	movs	r3, #6
  41b4f0:	f363 02c7 	bfi	r2, r3, #3, #5
  41b4f4:	2309      	movs	r3, #9
  41b4f6:	f363 220c 	bfi	r2, r3, #8, #5
  41b4fa:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41b4fe:	2179      	movs	r1, #121	; 0x79
  41b500:	4b33      	ldr	r3, [pc, #204]	; (41b5d0 <basic_init+0xcec>)
  41b502:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b504:	4b33      	ldr	r3, [pc, #204]	; (41b5d4 <basic_init+0xcf0>)
  41b506:	6818      	ldr	r0, [r3, #0]
  41b508:	3010      	adds	r0, #16
  41b50a:	4b33      	ldr	r3, [pc, #204]	; (41b5d8 <basic_init+0xcf4>)
  41b50c:	6a1b      	ldr	r3, [r3, #32]
  41b50e:	f013 0f02 	tst.w	r3, #2
  41b512:	f000 84aa 	beq.w	41be6a <basic_init+0x1586>
  41b516:	f04f 0200 	mov.w	r2, #0
  41b51a:	2302      	movs	r3, #2
  41b51c:	f363 0202 	bfi	r2, r3, #0, #3
  41b520:	2306      	movs	r3, #6
  41b522:	f363 02c7 	bfi	r2, r3, #3, #5
  41b526:	2309      	movs	r3, #9
  41b528:	f363 220c 	bfi	r2, r3, #8, #5
  41b52c:	f36f 324f 	bfc	r2, #13, #3
  41b530:	f241 0179 	movw	r1, #4217	; 0x1079
  41b534:	4d26      	ldr	r5, [pc, #152]	; (41b5d0 <basic_init+0xcec>)
  41b536:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41b538:	4c26      	ldr	r4, [pc, #152]	; (41b5d4 <basic_init+0xcf0>)
  41b53a:	6820      	ldr	r0, [r4, #0]
  41b53c:	f04f 32ff 	mov.w	r2, #4294967295
  41b540:	f240 1179 	movw	r1, #377	; 0x179
  41b544:	3010      	adds	r0, #16
  41b546:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41b548:	6820      	ldr	r0, [r4, #0]
  41b54a:	f04f 32ff 	mov.w	r2, #4294967295
  41b54e:	f241 1179 	movw	r1, #4473	; 0x1179
  41b552:	3010      	adds	r0, #16
  41b554:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41b556:	6820      	ldr	r0, [r4, #0]
  41b558:	3010      	adds	r0, #16
  41b55a:	4b1f      	ldr	r3, [pc, #124]	; (41b5d8 <basic_init+0xcf4>)
  41b55c:	6a1b      	ldr	r3, [r3, #32]
  41b55e:	f013 0f02 	tst.w	r3, #2
  41b562:	f000 8486 	beq.w	41be72 <basic_init+0x158e>
  41b566:	f04f 0200 	mov.w	r2, #0
  41b56a:	2304      	movs	r3, #4
  41b56c:	f363 0202 	bfi	r2, r3, #0, #3
  41b570:	2311      	movs	r3, #17
  41b572:	f363 02c7 	bfi	r2, r3, #3, #5
  41b576:	f363 220c 	bfi	r2, r3, #8, #5
  41b57a:	2302      	movs	r3, #2
  41b57c:	f363 324f 	bfi	r2, r3, #13, #3
  41b580:	f242 0179 	movw	r1, #8313	; 0x2079
  41b584:	4b12      	ldr	r3, [pc, #72]	; (41b5d0 <basic_init+0xcec>)
  41b586:	4798      	blx	r3
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41b588:	4b12      	ldr	r3, [pc, #72]	; (41b5d4 <basic_init+0xcf0>)
  41b58a:	681c      	ldr	r4, [r3, #0]
  41b58c:	3410      	adds	r4, #16
  41b58e:	2000      	movs	r0, #0
  41b590:	4b12      	ldr	r3, [pc, #72]	; (41b5dc <basic_init+0xcf8>)
  41b592:	4798      	blx	r3
  41b594:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b598:	00c0      	lsls	r0, r0, #3
  41b59a:	3050      	adds	r0, #80	; 0x50
  41b59c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b5a0:	f280 8476 	bge.w	41be90 <basic_init+0x15ac>
  41b5a4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b5a6:	2112      	movs	r1, #18
  41b5a8:	4620      	mov	r0, r4
  41b5aa:	4b0d      	ldr	r3, [pc, #52]	; (41b5e0 <basic_init+0xcfc>)
  41b5ac:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41b5ae:	4b09      	ldr	r3, [pc, #36]	; (41b5d4 <basic_init+0xcf0>)
  41b5b0:	681c      	ldr	r4, [r3, #0]
  41b5b2:	3410      	adds	r4, #16
  41b5b4:	2000      	movs	r0, #0
  41b5b6:	4b09      	ldr	r3, [pc, #36]	; (41b5dc <basic_init+0xcf8>)
  41b5b8:	4798      	blx	r3
  41b5ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b5be:	00c0      	lsls	r0, r0, #3
  41b5c0:	3050      	adds	r0, #80	; 0x50
  41b5c2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b5c6:	f280 8473 	bge.w	41beb0 <basic_init+0x15cc>
  41b5ca:	2201      	movs	r2, #1
  41b5cc:	e00c      	b.n	41b5e8 <basic_init+0xd04>
  41b5ce:	bf00      	nop
  41b5d0:	00409751 	.word	0x00409751
  41b5d4:	20414798 	.word	0x20414798
  41b5d8:	2041479c 	.word	0x2041479c
  41b5dc:	00413f95 	.word	0x00413f95
  41b5e0:	004095c1 	.word	0x004095c1
  41b5e4:	004098e1 	.word	0x004098e1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b5e8:	2113      	movs	r1, #19
  41b5ea:	4620      	mov	r0, r4
  41b5ec:	4bc2      	ldr	r3, [pc, #776]	; (41b8f8 <basic_init+0x1014>)
  41b5ee:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41b5f0:	4bc2      	ldr	r3, [pc, #776]	; (41b8fc <basic_init+0x1018>)
  41b5f2:	681c      	ldr	r4, [r3, #0]
  41b5f4:	3410      	adds	r4, #16
  41b5f6:	2000      	movs	r0, #0
  41b5f8:	4bc1      	ldr	r3, [pc, #772]	; (41b900 <basic_init+0x101c>)
  41b5fa:	4798      	blx	r3
  41b5fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b600:	3050      	adds	r0, #80	; 0x50
  41b602:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b606:	f280 8463 	bge.w	41bed0 <basic_init+0x15ec>
  41b60a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b60c:	2110      	movs	r1, #16
  41b60e:	4620      	mov	r0, r4
  41b610:	4bb9      	ldr	r3, [pc, #740]	; (41b8f8 <basic_init+0x1014>)
  41b612:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41b614:	4bb9      	ldr	r3, [pc, #740]	; (41b8fc <basic_init+0x1018>)
  41b616:	681c      	ldr	r4, [r3, #0]
  41b618:	3410      	adds	r4, #16
  41b61a:	2000      	movs	r0, #0
  41b61c:	4bb8      	ldr	r3, [pc, #736]	; (41b900 <basic_init+0x101c>)
  41b61e:	4798      	blx	r3
  41b620:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b624:	3050      	adds	r0, #80	; 0x50
  41b626:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b62a:	f280 8460 	bge.w	41beee <basic_init+0x160a>
  41b62e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b630:	2111      	movs	r1, #17
  41b632:	4620      	mov	r0, r4
  41b634:	4bb0      	ldr	r3, [pc, #704]	; (41b8f8 <basic_init+0x1014>)
  41b636:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41b638:	4bb0      	ldr	r3, [pc, #704]	; (41b8fc <basic_init+0x1018>)
  41b63a:	681c      	ldr	r4, [r3, #0]
  41b63c:	3410      	adds	r4, #16
  41b63e:	2000      	movs	r0, #0
  41b640:	4baf      	ldr	r3, [pc, #700]	; (41b900 <basic_init+0x101c>)
  41b642:	4798      	blx	r3
  41b644:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b648:	0080      	lsls	r0, r0, #2
  41b64a:	3050      	adds	r0, #80	; 0x50
  41b64c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b650:	f280 845c 	bge.w	41bf0c <basic_init+0x1628>
  41b654:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b656:	2114      	movs	r1, #20
  41b658:	4620      	mov	r0, r4
  41b65a:	4ba7      	ldr	r3, [pc, #668]	; (41b8f8 <basic_init+0x1014>)
  41b65c:	4798      	blx	r3
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41b65e:	4ba7      	ldr	r3, [pc, #668]	; (41b8fc <basic_init+0x1018>)
  41b660:	681c      	ldr	r4, [r3, #0]
  41b662:	3410      	adds	r4, #16
  41b664:	4ba7      	ldr	r3, [pc, #668]	; (41b904 <basic_init+0x1020>)
  41b666:	6a1b      	ldr	r3, [r3, #32]
  41b668:	f013 0f20 	tst.w	r3, #32
  41b66c:	f000 845e 	beq.w	41bf2c <basic_init+0x1648>
  41b670:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41b672:	2140      	movs	r1, #64	; 0x40
  41b674:	4620      	mov	r0, r4
  41b676:	4da0      	ldr	r5, [pc, #640]	; (41b8f8 <basic_init+0x1014>)
  41b678:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
  41b67a:	4ca0      	ldr	r4, [pc, #640]	; (41b8fc <basic_init+0x1018>)
  41b67c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41b67e:	2200      	movs	r2, #0
  41b680:	214c      	movs	r1, #76	; 0x4c
  41b682:	3010      	adds	r0, #16
  41b684:	4ea0      	ldr	r6, [pc, #640]	; (41b908 <basic_init+0x1024>)
  41b686:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
  41b688:	6820      	ldr	r0, [r4, #0]
  41b68a:	227f      	movs	r2, #127	; 0x7f
  41b68c:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41b690:	3010      	adds	r0, #16
  41b692:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
  41b694:	6820      	ldr	r0, [r4, #0]
  41b696:	4f9b      	ldr	r7, [pc, #620]	; (41b904 <basic_init+0x1020>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41b698:	89ba      	ldrh	r2, [r7, #12]
  41b69a:	2149      	movs	r1, #73	; 0x49
  41b69c:	3010      	adds	r0, #16
  41b69e:	4e9b      	ldr	r6, [pc, #620]	; (41b90c <basic_init+0x1028>)
  41b6a0:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
  41b6a2:	6820      	ldr	r0, [r4, #0]
  41b6a4:	89fa      	ldrh	r2, [r7, #14]
  41b6a6:	f240 4149 	movw	r1, #1097	; 0x449
  41b6aa:	3010      	adds	r0, #16
  41b6ac:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41b6ae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41b6b0:	2200      	movs	r2, #0
  41b6b2:	21b0      	movs	r1, #176	; 0xb0
  41b6b4:	3010      	adds	r0, #16
  41b6b6:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
  41b6b8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  41b6ba:	223c      	movs	r2, #60	; 0x3c
  41b6bc:	21b5      	movs	r1, #181	; 0xb5
  41b6be:	3010      	adds	r0, #16
  41b6c0:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41b6c2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41b6c4:	2229      	movs	r2, #41	; 0x29
  41b6c6:	21b6      	movs	r1, #182	; 0xb6
  41b6c8:	3010      	adds	r0, #16
  41b6ca:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41b6cc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41b6ce:	224c      	movs	r2, #76	; 0x4c
  41b6d0:	21b7      	movs	r1, #183	; 0xb7
  41b6d2:	3010      	adds	r0, #16
  41b6d4:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41b6d6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  41b6d8:	2200      	movs	r2, #0
  41b6da:	21b1      	movs	r1, #177	; 0xb1
  41b6dc:	3010      	adds	r0, #16
  41b6de:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
  41b6e0:	6820      	ldr	r0, [r4, #0]
  41b6e2:	2200      	movs	r2, #0
  41b6e4:	f241 01b1 	movw	r1, #4273	; 0x10b1
  41b6e8:	3010      	adds	r0, #16
  41b6ea:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
  41b6ec:	6820      	ldr	r0, [r4, #0]
  41b6ee:	3014      	adds	r0, #20
  41b6f0:	4b87      	ldr	r3, [pc, #540]	; (41b910 <basic_init+0x102c>)
  41b6f2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41b6f4:	6824      	ldr	r4, [r4, #0]
  41b6f6:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41b6f8:	2000      	movs	r0, #0
  41b6fa:	4b86      	ldr	r3, [pc, #536]	; (41b914 <basic_init+0x1030>)
  41b6fc:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41b6fe:	2801      	cmp	r0, #1
  41b700:	f240 842d 	bls.w	41bf5e <basic_init+0x167a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41b704:	2000      	movs	r0, #0
  41b706:	4b7e      	ldr	r3, [pc, #504]	; (41b900 <basic_init+0x101c>)
  41b708:	4798      	blx	r3
  41b70a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b70e:	00c0      	lsls	r0, r0, #3
  41b710:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41b712:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b716:	f280 843f 	bge.w	41bf98 <basic_init+0x16b4>
  41b71a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b71c:	2114      	movs	r1, #20
  41b71e:	4620      	mov	r0, r4
  41b720:	4b75      	ldr	r3, [pc, #468]	; (41b8f8 <basic_init+0x1014>)
  41b722:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
  41b724:	4b75      	ldr	r3, [pc, #468]	; (41b8fc <basic_init+0x1018>)
  41b726:	6818      	ldr	r0, [r3, #0]
  41b728:	3018      	adds	r0, #24
  41b72a:	4b79      	ldr	r3, [pc, #484]	; (41b910 <basic_init+0x102c>)
  41b72c:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41b72e:	2000      	movs	r0, #0
  41b730:	4b78      	ldr	r3, [pc, #480]	; (41b914 <basic_init+0x1030>)
  41b732:	4798      	blx	r3
  41b734:	2801      	cmp	r0, #1
  41b736:	f240 843f 	bls.w	41bfb8 <basic_init+0x16d4>
  41b73a:	2000      	movs	r0, #0
  41b73c:	4b70      	ldr	r3, [pc, #448]	; (41b900 <basic_init+0x101c>)
  41b73e:	4798      	blx	r3
  41b740:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b744:	0080      	lsls	r0, r0, #2
  41b746:	3050      	adds	r0, #80	; 0x50
  41b748:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b74c:	f280 8451 	bge.w	41bff2 <basic_init+0x170e>
  41b750:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41b752:	4e6a      	ldr	r6, [pc, #424]	; (41b8fc <basic_init+0x1018>)
  41b754:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b756:	4622      	mov	r2, r4
  41b758:	2112      	movs	r1, #18
  41b75a:	3018      	adds	r0, #24
  41b75c:	4d66      	ldr	r5, [pc, #408]	; (41b8f8 <basic_init+0x1014>)
  41b75e:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41b760:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b762:	4622      	mov	r2, r4
  41b764:	2113      	movs	r1, #19
  41b766:	3018      	adds	r0, #24
  41b768:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41b76a:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b76c:	4622      	mov	r2, r4
  41b76e:	2110      	movs	r1, #16
  41b770:	3018      	adds	r0, #24
  41b772:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41b774:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b776:	4622      	mov	r2, r4
  41b778:	2111      	movs	r1, #17
  41b77a:	3018      	adds	r0, #24
  41b77c:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41b77e:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b780:	4622      	mov	r2, r4
  41b782:	2114      	movs	r1, #20
  41b784:	3018      	adds	r0, #24
  41b786:	47a8      	blx	r5
  41b788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41b78a:	2302      	movs	r3, #2
  41b78c:	f04f 0200 	mov.w	r2, #0
  41b790:	f363 0202 	bfi	r2, r3, #0, #3
  41b794:	2108      	movs	r1, #8
  41b796:	f361 02c7 	bfi	r2, r1, #3, #5
  41b79a:	210b      	movs	r1, #11
  41b79c:	f361 220c 	bfi	r2, r1, #8, #5
  41b7a0:	f363 324f 	bfi	r2, r3, #13, #3
  41b7a4:	f7ff b8ba 	b.w	41a91c <basic_init+0x38>
  41b7a8:	f04f 0207 	mov.w	r2, #7
  41b7ac:	231c      	movs	r3, #28
  41b7ae:	f363 02c7 	bfi	r2, r3, #3, #5
  41b7b2:	231d      	movs	r3, #29
  41b7b4:	f363 220c 	bfi	r2, r3, #8, #5
  41b7b8:	2302      	movs	r3, #2
  41b7ba:	f363 324f 	bfi	r2, r3, #13, #3
  41b7be:	f7ff b8c7 	b.w	41a950 <basic_init+0x6c>
  41b7c2:	f04f 0207 	mov.w	r2, #7
  41b7c6:	231c      	movs	r3, #28
  41b7c8:	f363 02c7 	bfi	r2, r3, #3, #5
  41b7cc:	231d      	movs	r3, #29
  41b7ce:	f363 220c 	bfi	r2, r3, #8, #5
  41b7d2:	2302      	movs	r3, #2
  41b7d4:	f363 324f 	bfi	r2, r3, #13, #3
  41b7d8:	f7ff b8d5 	b.w	41a986 <basic_init+0xa2>
  41b7dc:	f04f 0207 	mov.w	r2, #7
  41b7e0:	231c      	movs	r3, #28
  41b7e2:	f363 02c7 	bfi	r2, r3, #3, #5
  41b7e6:	231d      	movs	r3, #29
  41b7e8:	f363 220c 	bfi	r2, r3, #8, #5
  41b7ec:	2302      	movs	r3, #2
  41b7ee:	f363 324f 	bfi	r2, r3, #13, #3
  41b7f2:	f7ff b8e2 	b.w	41a9ba <basic_init+0xd6>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41b7f6:	2000      	movs	r0, #0
  41b7f8:	4b41      	ldr	r3, [pc, #260]	; (41b900 <basic_init+0x101c>)
  41b7fa:	4798      	blx	r3
  41b7fc:	300a      	adds	r0, #10
  41b7fe:	00c0      	lsls	r0, r0, #3
  41b800:	4b45      	ldr	r3, [pc, #276]	; (41b918 <basic_init+0x1034>)
  41b802:	fb83 2300 	smull	r2, r3, r3, r0
  41b806:	17c2      	asrs	r2, r0, #31
  41b808:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b80c:	b212      	sxth	r2, r2
  41b80e:	f7ff b8f4 	b.w	41a9fa <basic_init+0x116>
  41b812:	f04f 0200 	mov.w	r2, #0
  41b816:	2303      	movs	r3, #3
  41b818:	f363 0202 	bfi	r2, r3, #0, #3
  41b81c:	230b      	movs	r3, #11
  41b81e:	f363 02c7 	bfi	r2, r3, #3, #5
  41b822:	230e      	movs	r3, #14
  41b824:	f363 220c 	bfi	r2, r3, #8, #5
  41b828:	f36f 324f 	bfc	r2, #13, #3
  41b82c:	f7ff b8fa 	b.w	41aa24 <basic_init+0x140>
  41b830:	f04f 0200 	mov.w	r2, #0
  41b834:	2304      	movs	r3, #4
  41b836:	f363 0202 	bfi	r2, r3, #0, #3
  41b83a:	2310      	movs	r3, #16
  41b83c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b840:	2312      	movs	r3, #18
  41b842:	f363 220c 	bfi	r2, r3, #8, #5
  41b846:	2302      	movs	r3, #2
  41b848:	f363 324f 	bfi	r2, r3, #13, #3
  41b84c:	f7ff b905 	b.w	41aa5a <basic_init+0x176>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41b850:	4b2a      	ldr	r3, [pc, #168]	; (41b8fc <basic_init+0x1018>)
  41b852:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b854:	4b2b      	ldr	r3, [pc, #172]	; (41b904 <basic_init+0x1020>)
  41b856:	899a      	ldrh	r2, [r3, #12]
  41b858:	f240 2139 	movw	r1, #569	; 0x239
  41b85c:	3004      	adds	r0, #4
  41b85e:	4b2b      	ldr	r3, [pc, #172]	; (41b90c <basic_init+0x1028>)
  41b860:	4798      	blx	r3
  41b862:	f7ff b903 	b.w	41aa6c <basic_init+0x188>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41b866:	2000      	movs	r0, #0
  41b868:	4b25      	ldr	r3, [pc, #148]	; (41b900 <basic_init+0x101c>)
  41b86a:	4798      	blx	r3
  41b86c:	3028      	adds	r0, #40	; 0x28
  41b86e:	0040      	lsls	r0, r0, #1
  41b870:	4b29      	ldr	r3, [pc, #164]	; (41b918 <basic_init+0x1034>)
  41b872:	fb83 2300 	smull	r2, r3, r3, r0
  41b876:	17c2      	asrs	r2, r0, #31
  41b878:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b87c:	b212      	sxth	r2, r2
  41b87e:	f7ff b90a 	b.w	41aa96 <basic_init+0x1b2>
  41b882:	f04f 32ff 	mov.w	r2, #4294967295
  41b886:	f7ff b927 	b.w	41aad8 <basic_init+0x1f4>
  41b88a:	f04f 32ff 	mov.w	r2, #4294967295
  41b88e:	f7ff b945 	b.w	41ab1c <basic_init+0x238>
  41b892:	f04f 32ff 	mov.w	r2, #4294967295
  41b896:	f7ff b95c 	b.w	41ab52 <basic_init+0x26e>
  41b89a:	f04f 32ff 	mov.w	r2, #4294967295
  41b89e:	f7ff b974 	b.w	41ab8a <basic_init+0x2a6>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b8a2:	2000      	movs	r0, #0
  41b8a4:	4b16      	ldr	r3, [pc, #88]	; (41b900 <basic_init+0x101c>)
  41b8a6:	4798      	blx	r3
  41b8a8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b8ac:	3050      	adds	r0, #80	; 0x50
  41b8ae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b8b2:	da02      	bge.n	41b8ba <basic_init+0xfd6>
  41b8b4:	2401      	movs	r4, #1
  41b8b6:	f7ff b986 	b.w	41abc6 <basic_init+0x2e2>
  41b8ba:	2000      	movs	r0, #0
  41b8bc:	4b10      	ldr	r3, [pc, #64]	; (41b900 <basic_init+0x101c>)
  41b8be:	4798      	blx	r3
  41b8c0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b8c4:	3050      	adds	r0, #80	; 0x50
  41b8c6:	4a14      	ldr	r2, [pc, #80]	; (41b918 <basic_init+0x1034>)
  41b8c8:	fb82 3200 	smull	r3, r2, r2, r0
  41b8cc:	17c4      	asrs	r4, r0, #31
  41b8ce:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41b8d2:	b2a4      	uxth	r4, r4
  41b8d4:	f7ff b977 	b.w	41abc6 <basic_init+0x2e2>
  41b8d8:	2000      	movs	r0, #0
  41b8da:	4b09      	ldr	r3, [pc, #36]	; (41b900 <basic_init+0x101c>)
  41b8dc:	4798      	blx	r3
  41b8de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b8e2:	0040      	lsls	r0, r0, #1
  41b8e4:	3050      	adds	r0, #80	; 0x50
  41b8e6:	4a0c      	ldr	r2, [pc, #48]	; (41b918 <basic_init+0x1034>)
  41b8e8:	fb82 3200 	smull	r3, r2, r2, r0
  41b8ec:	17c4      	asrs	r4, r0, #31
  41b8ee:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41b8f2:	b2a4      	uxth	r4, r4
  41b8f4:	f7ff b967 	b.w	41abc6 <basic_init+0x2e2>
  41b8f8:	004095c1 	.word	0x004095c1
  41b8fc:	20414798 	.word	0x20414798
  41b900:	00413f95 	.word	0x00413f95
  41b904:	2041479c 	.word	0x2041479c
  41b908:	004098e1 	.word	0x004098e1
  41b90c:	00409751 	.word	0x00409751
  41b910:	0041704d 	.word	0x0041704d
  41b914:	00413fb5 	.word	0x00413fb5
  41b918:	66666667 	.word	0x66666667
  41b91c:	2000      	movs	r0, #0
  41b91e:	4bdf      	ldr	r3, [pc, #892]	; (41bc9c <basic_init+0x13b8>)
  41b920:	4798      	blx	r3
  41b922:	3028      	adds	r0, #40	; 0x28
  41b924:	0040      	lsls	r0, r0, #1
  41b926:	4bde      	ldr	r3, [pc, #888]	; (41bca0 <basic_init+0x13bc>)
  41b928:	fb83 2300 	smull	r2, r3, r3, r0
  41b92c:	17c2      	asrs	r2, r0, #31
  41b92e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b932:	b292      	uxth	r2, r2
  41b934:	f7ff b951 	b.w	41abda <basic_init+0x2f6>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b938:	2000      	movs	r0, #0
  41b93a:	4bd8      	ldr	r3, [pc, #864]	; (41bc9c <basic_init+0x13b8>)
  41b93c:	4798      	blx	r3
  41b93e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b942:	3050      	adds	r0, #80	; 0x50
  41b944:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b948:	da02      	bge.n	41b950 <basic_init+0x106c>
  41b94a:	2401      	movs	r4, #1
  41b94c:	f7ff b974 	b.w	41ac38 <basic_init+0x354>
  41b950:	2000      	movs	r0, #0
  41b952:	4bd2      	ldr	r3, [pc, #840]	; (41bc9c <basic_init+0x13b8>)
  41b954:	4798      	blx	r3
  41b956:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b95a:	3050      	adds	r0, #80	; 0x50
  41b95c:	4ad0      	ldr	r2, [pc, #832]	; (41bca0 <basic_init+0x13bc>)
  41b95e:	fb82 3200 	smull	r3, r2, r2, r0
  41b962:	17c4      	asrs	r4, r0, #31
  41b964:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41b968:	b2a4      	uxth	r4, r4
  41b96a:	f7ff b965 	b.w	41ac38 <basic_init+0x354>
  41b96e:	2000      	movs	r0, #0
  41b970:	4bca      	ldr	r3, [pc, #808]	; (41bc9c <basic_init+0x13b8>)
  41b972:	4798      	blx	r3
  41b974:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b978:	0040      	lsls	r0, r0, #1
  41b97a:	3050      	adds	r0, #80	; 0x50
  41b97c:	4ac8      	ldr	r2, [pc, #800]	; (41bca0 <basic_init+0x13bc>)
  41b97e:	fb82 3200 	smull	r3, r2, r2, r0
  41b982:	17c4      	asrs	r4, r0, #31
  41b984:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41b988:	b2a4      	uxth	r4, r4
  41b98a:	f7ff b955 	b.w	41ac38 <basic_init+0x354>
  41b98e:	2000      	movs	r0, #0
  41b990:	4bc2      	ldr	r3, [pc, #776]	; (41bc9c <basic_init+0x13b8>)
  41b992:	4798      	blx	r3
  41b994:	3028      	adds	r0, #40	; 0x28
  41b996:	0040      	lsls	r0, r0, #1
  41b998:	4bc1      	ldr	r3, [pc, #772]	; (41bca0 <basic_init+0x13bc>)
  41b99a:	fb83 2300 	smull	r2, r3, r3, r0
  41b99e:	17c2      	asrs	r2, r0, #31
  41b9a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b9a4:	b292      	uxth	r2, r2
  41b9a6:	f7ff b951 	b.w	41ac4c <basic_init+0x368>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b9aa:	2000      	movs	r0, #0
  41b9ac:	4bbb      	ldr	r3, [pc, #748]	; (41bc9c <basic_init+0x13b8>)
  41b9ae:	4798      	blx	r3
  41b9b0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b9b4:	3050      	adds	r0, #80	; 0x50
  41b9b6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b9ba:	da02      	bge.n	41b9c2 <basic_init+0x10de>
  41b9bc:	2401      	movs	r4, #1
  41b9be:	f7ff b960 	b.w	41ac82 <basic_init+0x39e>
  41b9c2:	2000      	movs	r0, #0
  41b9c4:	4bb5      	ldr	r3, [pc, #724]	; (41bc9c <basic_init+0x13b8>)
  41b9c6:	4798      	blx	r3
  41b9c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b9cc:	3050      	adds	r0, #80	; 0x50
  41b9ce:	4ab4      	ldr	r2, [pc, #720]	; (41bca0 <basic_init+0x13bc>)
  41b9d0:	fb82 3200 	smull	r3, r2, r2, r0
  41b9d4:	17c4      	asrs	r4, r0, #31
  41b9d6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41b9da:	b2a4      	uxth	r4, r4
  41b9dc:	f7ff b951 	b.w	41ac82 <basic_init+0x39e>
  41b9e0:	2000      	movs	r0, #0
  41b9e2:	4bae      	ldr	r3, [pc, #696]	; (41bc9c <basic_init+0x13b8>)
  41b9e4:	4798      	blx	r3
  41b9e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b9ea:	0040      	lsls	r0, r0, #1
  41b9ec:	3050      	adds	r0, #80	; 0x50
  41b9ee:	4aac      	ldr	r2, [pc, #688]	; (41bca0 <basic_init+0x13bc>)
  41b9f0:	fb82 3200 	smull	r3, r2, r2, r0
  41b9f4:	17c4      	asrs	r4, r0, #31
  41b9f6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41b9fa:	b2a4      	uxth	r4, r4
  41b9fc:	f7ff b941 	b.w	41ac82 <basic_init+0x39e>
  41ba00:	2000      	movs	r0, #0
  41ba02:	4ba6      	ldr	r3, [pc, #664]	; (41bc9c <basic_init+0x13b8>)
  41ba04:	4798      	blx	r3
  41ba06:	3028      	adds	r0, #40	; 0x28
  41ba08:	0040      	lsls	r0, r0, #1
  41ba0a:	4ba5      	ldr	r3, [pc, #660]	; (41bca0 <basic_init+0x13bc>)
  41ba0c:	fb83 2300 	smull	r2, r3, r3, r0
  41ba10:	17c2      	asrs	r2, r0, #31
  41ba12:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba16:	b292      	uxth	r2, r2
  41ba18:	f7ff b93d 	b.w	41ac96 <basic_init+0x3b2>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41ba1c:	2000      	movs	r0, #0
  41ba1e:	4b9f      	ldr	r3, [pc, #636]	; (41bc9c <basic_init+0x13b8>)
  41ba20:	4798      	blx	r3
  41ba22:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba26:	3050      	adds	r0, #80	; 0x50
  41ba28:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba2c:	da02      	bge.n	41ba34 <basic_init+0x1150>
  41ba2e:	2401      	movs	r4, #1
  41ba30:	f7ff b94c 	b.w	41accc <basic_init+0x3e8>
  41ba34:	2000      	movs	r0, #0
  41ba36:	4b99      	ldr	r3, [pc, #612]	; (41bc9c <basic_init+0x13b8>)
  41ba38:	4798      	blx	r3
  41ba3a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba3e:	3050      	adds	r0, #80	; 0x50
  41ba40:	4a97      	ldr	r2, [pc, #604]	; (41bca0 <basic_init+0x13bc>)
  41ba42:	fb82 3200 	smull	r3, r2, r2, r0
  41ba46:	17c4      	asrs	r4, r0, #31
  41ba48:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41ba4c:	b2a4      	uxth	r4, r4
  41ba4e:	f7ff b93d 	b.w	41accc <basic_init+0x3e8>
  41ba52:	2000      	movs	r0, #0
  41ba54:	4b91      	ldr	r3, [pc, #580]	; (41bc9c <basic_init+0x13b8>)
  41ba56:	4798      	blx	r3
  41ba58:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba5c:	0040      	lsls	r0, r0, #1
  41ba5e:	3050      	adds	r0, #80	; 0x50
  41ba60:	4a8f      	ldr	r2, [pc, #572]	; (41bca0 <basic_init+0x13bc>)
  41ba62:	fb82 3200 	smull	r3, r2, r2, r0
  41ba66:	17c4      	asrs	r4, r0, #31
  41ba68:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41ba6c:	b2a4      	uxth	r4, r4
  41ba6e:	f7ff b92d 	b.w	41accc <basic_init+0x3e8>
  41ba72:	2000      	movs	r0, #0
  41ba74:	4b89      	ldr	r3, [pc, #548]	; (41bc9c <basic_init+0x13b8>)
  41ba76:	4798      	blx	r3
  41ba78:	3028      	adds	r0, #40	; 0x28
  41ba7a:	0040      	lsls	r0, r0, #1
  41ba7c:	4b88      	ldr	r3, [pc, #544]	; (41bca0 <basic_init+0x13bc>)
  41ba7e:	fb83 2300 	smull	r2, r3, r3, r0
  41ba82:	17c2      	asrs	r2, r0, #31
  41ba84:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba88:	b292      	uxth	r2, r2
  41ba8a:	f7ff b929 	b.w	41ace0 <basic_init+0x3fc>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41ba8e:	2000      	movs	r0, #0
  41ba90:	4b82      	ldr	r3, [pc, #520]	; (41bc9c <basic_init+0x13b8>)
  41ba92:	4798      	blx	r3
  41ba94:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba98:	3050      	adds	r0, #80	; 0x50
  41ba9a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba9e:	da02      	bge.n	41baa6 <basic_init+0x11c2>
  41baa0:	2201      	movs	r2, #1
  41baa2:	f7ff b938 	b.w	41ad16 <basic_init+0x432>
  41baa6:	2000      	movs	r0, #0
  41baa8:	4b7c      	ldr	r3, [pc, #496]	; (41bc9c <basic_init+0x13b8>)
  41baaa:	4798      	blx	r3
  41baac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bab0:	3050      	adds	r0, #80	; 0x50
  41bab2:	4b7b      	ldr	r3, [pc, #492]	; (41bca0 <basic_init+0x13bc>)
  41bab4:	fb83 2300 	smull	r2, r3, r3, r0
  41bab8:	17c2      	asrs	r2, r0, #31
  41baba:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41babe:	b212      	sxth	r2, r2
  41bac0:	f7ff b929 	b.w	41ad16 <basic_init+0x432>
  41bac4:	2000      	movs	r0, #0
  41bac6:	4b75      	ldr	r3, [pc, #468]	; (41bc9c <basic_init+0x13b8>)
  41bac8:	4798      	blx	r3
  41baca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bace:	0040      	lsls	r0, r0, #1
  41bad0:	3050      	adds	r0, #80	; 0x50
  41bad2:	4b73      	ldr	r3, [pc, #460]	; (41bca0 <basic_init+0x13bc>)
  41bad4:	fb83 2300 	smull	r2, r3, r3, r0
  41bad8:	17c2      	asrs	r2, r0, #31
  41bada:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bade:	b212      	sxth	r2, r2
  41bae0:	f7ff b919 	b.w	41ad16 <basic_init+0x432>
  41bae4:	2302      	movs	r3, #2
  41bae6:	f04f 0200 	mov.w	r2, #0
  41baea:	f363 0202 	bfi	r2, r3, #0, #3
  41baee:	2108      	movs	r1, #8
  41baf0:	f361 02c7 	bfi	r2, r1, #3, #5
  41baf4:	2109      	movs	r1, #9
  41baf6:	f361 220c 	bfi	r2, r1, #8, #5
  41bafa:	f363 324f 	bfi	r2, r3, #13, #3
  41bafe:	f7ff b938 	b.w	41ad72 <basic_init+0x48e>
  41bb02:	f04f 0200 	mov.w	r2, #0
  41bb06:	2302      	movs	r3, #2
  41bb08:	f363 0202 	bfi	r2, r3, #0, #3
  41bb0c:	2308      	movs	r3, #8
  41bb0e:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb12:	f363 220c 	bfi	r2, r3, #8, #5
  41bb16:	f36f 324f 	bfc	r2, #13, #3
  41bb1a:	f7ff b941 	b.w	41ada0 <basic_init+0x4bc>
  41bb1e:	f04f 0200 	mov.w	r2, #0
  41bb22:	2305      	movs	r3, #5
  41bb24:	f363 0202 	bfi	r2, r3, #0, #3
  41bb28:	2314      	movs	r3, #20
  41bb2a:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb2e:	2315      	movs	r3, #21
  41bb30:	f363 220c 	bfi	r2, r3, #8, #5
  41bb34:	2302      	movs	r3, #2
  41bb36:	f363 324f 	bfi	r2, r3, #13, #3
  41bb3a:	f7ff b94a 	b.w	41add2 <basic_init+0x4ee>
  41bb3e:	f04f 0200 	mov.w	r2, #0
  41bb42:	2305      	movs	r3, #5
  41bb44:	f363 0202 	bfi	r2, r3, #0, #3
  41bb48:	2314      	movs	r3, #20
  41bb4a:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb4e:	2315      	movs	r3, #21
  41bb50:	f363 220c 	bfi	r2, r3, #8, #5
  41bb54:	2302      	movs	r3, #2
  41bb56:	f363 324f 	bfi	r2, r3, #13, #3
  41bb5a:	f7ff b954 	b.w	41ae06 <basic_init+0x522>
  41bb5e:	f04f 0200 	mov.w	r2, #0
  41bb62:	2305      	movs	r3, #5
  41bb64:	f363 0202 	bfi	r2, r3, #0, #3
  41bb68:	2314      	movs	r3, #20
  41bb6a:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb6e:	2315      	movs	r3, #21
  41bb70:	f363 220c 	bfi	r2, r3, #8, #5
  41bb74:	2302      	movs	r3, #2
  41bb76:	f363 324f 	bfi	r2, r3, #13, #3
  41bb7a:	f7ff b95d 	b.w	41ae38 <basic_init+0x554>
  41bb7e:	f04f 0200 	mov.w	r2, #0
  41bb82:	2305      	movs	r3, #5
  41bb84:	f363 0202 	bfi	r2, r3, #0, #3
  41bb88:	2314      	movs	r3, #20
  41bb8a:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb8e:	2315      	movs	r3, #21
  41bb90:	f363 220c 	bfi	r2, r3, #8, #5
  41bb94:	2302      	movs	r3, #2
  41bb96:	f363 324f 	bfi	r2, r3, #13, #3
  41bb9a:	f7ff b967 	b.w	41ae6c <basic_init+0x588>
  41bb9e:	f04f 0200 	mov.w	r2, #0
  41bba2:	2302      	movs	r3, #2
  41bba4:	f363 0202 	bfi	r2, r3, #0, #3
  41bba8:	2309      	movs	r3, #9
  41bbaa:	f363 02c7 	bfi	r2, r3, #3, #5
  41bbae:	230a      	movs	r3, #10
  41bbb0:	f363 220c 	bfi	r2, r3, #8, #5
  41bbb4:	2303      	movs	r3, #3
  41bbb6:	f363 324f 	bfi	r2, r3, #13, #3
  41bbba:	f7ff b971 	b.w	41aea0 <basic_init+0x5bc>
  41bbbe:	f04f 0200 	mov.w	r2, #0
  41bbc2:	2303      	movs	r3, #3
  41bbc4:	f363 0202 	bfi	r2, r3, #0, #3
  41bbc8:	230b      	movs	r3, #11
  41bbca:	f363 02c7 	bfi	r2, r3, #3, #5
  41bbce:	230e      	movs	r3, #14
  41bbd0:	f363 220c 	bfi	r2, r3, #8, #5
  41bbd4:	f36f 324f 	bfc	r2, #13, #3
  41bbd8:	f7ff b982 	b.w	41aee0 <basic_init+0x5fc>
  41bbdc:	f04f 0200 	mov.w	r2, #0
  41bbe0:	2303      	movs	r3, #3
  41bbe2:	f363 0202 	bfi	r2, r3, #0, #3
  41bbe6:	230b      	movs	r3, #11
  41bbe8:	f363 02c7 	bfi	r2, r3, #3, #5
  41bbec:	230d      	movs	r3, #13
  41bbee:	f363 220c 	bfi	r2, r3, #8, #5
  41bbf2:	2301      	movs	r3, #1
  41bbf4:	f363 324f 	bfi	r2, r3, #13, #3
  41bbf8:	f7ff b9b1 	b.w	41af5e <basic_init+0x67a>
  41bbfc:	f04f 0200 	mov.w	r2, #0
  41bc00:	2303      	movs	r3, #3
  41bc02:	f363 0202 	bfi	r2, r3, #0, #3
  41bc06:	230b      	movs	r3, #11
  41bc08:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc0c:	230d      	movs	r3, #13
  41bc0e:	f363 220c 	bfi	r2, r3, #8, #5
  41bc12:	2301      	movs	r3, #1
  41bc14:	f363 324f 	bfi	r2, r3, #13, #3
  41bc18:	f7ff b9bd 	b.w	41af96 <basic_init+0x6b2>
  41bc1c:	f04f 0200 	mov.w	r2, #0
  41bc20:	2303      	movs	r3, #3
  41bc22:	f363 0202 	bfi	r2, r3, #0, #3
  41bc26:	230b      	movs	r3, #11
  41bc28:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc2c:	230d      	movs	r3, #13
  41bc2e:	f363 220c 	bfi	r2, r3, #8, #5
  41bc32:	2301      	movs	r3, #1
  41bc34:	f363 324f 	bfi	r2, r3, #13, #3
  41bc38:	f7ff b9c9 	b.w	41afce <basic_init+0x6ea>
  41bc3c:	f04f 0200 	mov.w	r2, #0
  41bc40:	2303      	movs	r3, #3
  41bc42:	f363 0202 	bfi	r2, r3, #0, #3
  41bc46:	230b      	movs	r3, #11
  41bc48:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc4c:	230d      	movs	r3, #13
  41bc4e:	f363 220c 	bfi	r2, r3, #8, #5
  41bc52:	2301      	movs	r3, #1
  41bc54:	f363 324f 	bfi	r2, r3, #13, #3
  41bc58:	f7ff b9d5 	b.w	41b006 <basic_init+0x722>
  41bc5c:	f04f 32ff 	mov.w	r2, #4294967295
  41bc60:	f7ff b9ed 	b.w	41b03e <basic_init+0x75a>
  41bc64:	f04f 32ff 	mov.w	r2, #4294967295
  41bc68:	f7ff b9f8 	b.w	41b05c <basic_init+0x778>
  41bc6c:	f04f 32ff 	mov.w	r2, #4294967295
  41bc70:	f7ff ba03 	b.w	41b07a <basic_init+0x796>
  41bc74:	f04f 0200 	mov.w	r2, #0
  41bc78:	2304      	movs	r3, #4
  41bc7a:	f363 0202 	bfi	r2, r3, #0, #3
  41bc7e:	2313      	movs	r3, #19
  41bc80:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc84:	f363 220c 	bfi	r2, r3, #8, #5
  41bc88:	2306      	movs	r3, #6
  41bc8a:	f363 324f 	bfi	r2, r3, #13, #3
  41bc8e:	f7ff ba0e 	b.w	41b0ae <basic_init+0x7ca>
  41bc92:	f04f 32ff 	mov.w	r2, #4294967295
  41bc96:	f7ff ba26 	b.w	41b0e6 <basic_init+0x802>
  41bc9a:	bf00      	nop
  41bc9c:	00413f95 	.word	0x00413f95
  41bca0:	66666667 	.word	0x66666667
  41bca4:	f04f 32ff 	mov.w	r2, #4294967295
  41bca8:	f7ff ba2c 	b.w	41b104 <basic_init+0x820>
  41bcac:	f04f 32ff 	mov.w	r2, #4294967295
  41bcb0:	f7ff ba37 	b.w	41b122 <basic_init+0x83e>
  41bcb4:	f04f 0200 	mov.w	r2, #0
  41bcb8:	2304      	movs	r3, #4
  41bcba:	f363 0202 	bfi	r2, r3, #0, #3
  41bcbe:	2313      	movs	r3, #19
  41bcc0:	f363 02c7 	bfi	r2, r3, #3, #5
  41bcc4:	f363 220c 	bfi	r2, r3, #8, #5
  41bcc8:	2306      	movs	r3, #6
  41bcca:	f363 324f 	bfi	r2, r3, #13, #3
  41bcce:	f7ff ba42 	b.w	41b156 <basic_init+0x872>
  41bcd2:	f04f 0200 	mov.w	r2, #0
  41bcd6:	2303      	movs	r3, #3
  41bcd8:	f363 0202 	bfi	r2, r3, #0, #3
  41bcdc:	230b      	movs	r3, #11
  41bcde:	f363 02c7 	bfi	r2, r3, #3, #5
  41bce2:	230e      	movs	r3, #14
  41bce4:	f363 220c 	bfi	r2, r3, #8, #5
  41bce8:	f36f 324f 	bfc	r2, #13, #3
  41bcec:	f7ff ba58 	b.w	41b1a0 <basic_init+0x8bc>
  41bcf0:	f04f 0400 	mov.w	r4, #0
  41bcf4:	2303      	movs	r3, #3
  41bcf6:	f363 0402 	bfi	r4, r3, #0, #3
  41bcfa:	230b      	movs	r3, #11
  41bcfc:	f363 04c7 	bfi	r4, r3, #3, #5
  41bd00:	230e      	movs	r3, #14
  41bd02:	f363 240c 	bfi	r4, r3, #8, #5
  41bd06:	f36f 344f 	bfc	r4, #13, #3
  41bd0a:	4bc2      	ldr	r3, [pc, #776]	; (41c014 <basic_init+0x1730>)
  41bd0c:	899b      	ldrh	r3, [r3, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41bd0e:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41bd12:	264c      	movs	r6, #76	; 0x4c
  41bd14:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  41bd18:	25b3      	movs	r5, #179	; 0xb3
  41bd1a:	fb05 f101 	mul.w	r1, r5, r1
  41bd1e:	fb06 1202 	mla	r2, r6, r2, r1
  41bd22:	3280      	adds	r2, #128	; 0x80
  41bd24:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41bd28:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41bd2c:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41bd30:	f04f 0200 	mov.w	r2, #0
  41bd34:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41bd38:	f003 0707 	and.w	r7, r3, #7
  41bd3c:	f3c3 3142 	ubfx	r1, r3, #13, #3
  41bd40:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41bd44:	f004 0707 	and.w	r7, r4, #7
  41bd48:	00ff      	lsls	r7, r7, #3
  41bd4a:	fb05 f707 	mul.w	r7, r5, r7
  41bd4e:	fb06 7101 	mla	r1, r6, r1, r7
  41bd52:	3180      	adds	r1, #128	; 0x80
  41bd54:	eb01 2701 	add.w	r7, r1, r1, lsl #8
  41bd58:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
  41bd5c:	f3c1 6782 	ubfx	r7, r1, #26, #3
  41bd60:	f367 0202 	bfi	r2, r7, #0, #3
  41bd64:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41bd68:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41bd6c:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41bd70:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41bd74:	fb05 f404 	mul.w	r4, r5, r4
  41bd78:	fb06 4303 	mla	r3, r6, r3, r4
  41bd7c:	3380      	adds	r3, #128	; 0x80
  41bd7e:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41bd82:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41bd86:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41bd8a:	f363 220c 	bfi	r2, r3, #8, #5
  41bd8e:	f7ff ba5e 	b.w	41b24e <basic_init+0x96a>
    return LV_COLOR_MAKE(r, g, b);
  41bd92:	f04f 0200 	mov.w	r2, #0
  41bd96:	2303      	movs	r3, #3
  41bd98:	f363 0202 	bfi	r2, r3, #0, #3
  41bd9c:	230b      	movs	r3, #11
  41bd9e:	f363 02c7 	bfi	r2, r3, #3, #5
  41bda2:	230e      	movs	r3, #14
  41bda4:	f363 220c 	bfi	r2, r3, #8, #5
  41bda8:	f36f 324f 	bfc	r2, #13, #3
  41bdac:	f7ff ba7e 	b.w	41b2ac <basic_init+0x9c8>
  41bdb0:	f04f 0200 	mov.w	r2, #0
  41bdb4:	2304      	movs	r3, #4
  41bdb6:	f363 0202 	bfi	r2, r3, #0, #3
  41bdba:	2311      	movs	r3, #17
  41bdbc:	f363 02c7 	bfi	r2, r3, #3, #5
  41bdc0:	f363 220c 	bfi	r2, r3, #8, #5
  41bdc4:	2302      	movs	r3, #2
  41bdc6:	f363 324f 	bfi	r2, r3, #13, #3
  41bdca:	f7ff ba89 	b.w	41b2e0 <basic_init+0x9fc>
  41bdce:	f04f 0200 	mov.w	r2, #0
  41bdd2:	2302      	movs	r3, #2
  41bdd4:	f363 0202 	bfi	r2, r3, #0, #3
  41bdd8:	2308      	movs	r3, #8
  41bdda:	f363 02c7 	bfi	r2, r3, #3, #5
  41bdde:	f363 220c 	bfi	r2, r3, #8, #5
  41bde2:	f36f 324f 	bfc	r2, #13, #3
  41bde6:	f7ff baa0 	b.w	41b32a <basic_init+0xa46>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41bdea:	2000      	movs	r0, #0
  41bdec:	4b8a      	ldr	r3, [pc, #552]	; (41c018 <basic_init+0x1734>)
  41bdee:	4798      	blx	r3
  41bdf0:	3028      	adds	r0, #40	; 0x28
  41bdf2:	0040      	lsls	r0, r0, #1
  41bdf4:	4b89      	ldr	r3, [pc, #548]	; (41c01c <basic_init+0x1738>)
  41bdf6:	fb83 2300 	smull	r2, r3, r3, r0
  41bdfa:	17c2      	asrs	r2, r0, #31
  41bdfc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41be00:	b212      	sxth	r2, r2
  41be02:	f7ff baa3 	b.w	41b34c <basic_init+0xa68>
  41be06:	f04f 32ff 	mov.w	r2, #4294967295
  41be0a:	f7ff bac0 	b.w	41b38e <basic_init+0xaaa>
  41be0e:	f04f 32ff 	mov.w	r2, #4294967295
  41be12:	f7ff bad6 	b.w	41b3c2 <basic_init+0xade>
  41be16:	f04f 0200 	mov.w	r2, #0
  41be1a:	2304      	movs	r3, #4
  41be1c:	f363 0202 	bfi	r2, r3, #0, #3
  41be20:	2311      	movs	r3, #17
  41be22:	f363 02c7 	bfi	r2, r3, #3, #5
  41be26:	f363 220c 	bfi	r2, r3, #8, #5
  41be2a:	2302      	movs	r3, #2
  41be2c:	f363 324f 	bfi	r2, r3, #13, #3
  41be30:	f7ff baef 	b.w	41b412 <basic_init+0xb2e>
  41be34:	f04f 32ff 	mov.w	r2, #4294967295
  41be38:	f7ff bb05 	b.w	41b446 <basic_init+0xb62>
  41be3c:	f04f 32ff 	mov.w	r2, #4294967295
  41be40:	f7ff bb1b 	b.w	41b47a <basic_init+0xb96>
  41be44:	f04f 0200 	mov.w	r2, #0
  41be48:	2304      	movs	r3, #4
  41be4a:	f363 0202 	bfi	r2, r3, #0, #3
  41be4e:	2311      	movs	r3, #17
  41be50:	f363 02c7 	bfi	r2, r3, #3, #5
  41be54:	f363 220c 	bfi	r2, r3, #8, #5
  41be58:	2302      	movs	r3, #2
  41be5a:	f363 324f 	bfi	r2, r3, #13, #3
  41be5e:	f7ff bb34 	b.w	41b4ca <basic_init+0xbe6>
  41be62:	f04f 32ff 	mov.w	r2, #4294967295
  41be66:	f7ff bb4a 	b.w	41b4fe <basic_init+0xc1a>
  41be6a:	f04f 32ff 	mov.w	r2, #4294967295
  41be6e:	f7ff bb5f 	b.w	41b530 <basic_init+0xc4c>
  41be72:	f04f 0200 	mov.w	r2, #0
  41be76:	2304      	movs	r3, #4
  41be78:	f363 0202 	bfi	r2, r3, #0, #3
  41be7c:	2311      	movs	r3, #17
  41be7e:	f363 02c7 	bfi	r2, r3, #3, #5
  41be82:	f363 220c 	bfi	r2, r3, #8, #5
  41be86:	2302      	movs	r3, #2
  41be88:	f363 324f 	bfi	r2, r3, #13, #3
  41be8c:	f7ff bb78 	b.w	41b580 <basic_init+0xc9c>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41be90:	2000      	movs	r0, #0
  41be92:	4b61      	ldr	r3, [pc, #388]	; (41c018 <basic_init+0x1734>)
  41be94:	4798      	blx	r3
  41be96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41be9a:	00c0      	lsls	r0, r0, #3
  41be9c:	3050      	adds	r0, #80	; 0x50
  41be9e:	4b5f      	ldr	r3, [pc, #380]	; (41c01c <basic_init+0x1738>)
  41bea0:	fb83 2300 	smull	r2, r3, r3, r0
  41bea4:	17c2      	asrs	r2, r0, #31
  41bea6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41beaa:	b212      	sxth	r2, r2
  41beac:	f7ff bb7b 	b.w	41b5a6 <basic_init+0xcc2>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41beb0:	2000      	movs	r0, #0
  41beb2:	4b59      	ldr	r3, [pc, #356]	; (41c018 <basic_init+0x1734>)
  41beb4:	4798      	blx	r3
  41beb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41beba:	00c0      	lsls	r0, r0, #3
  41bebc:	3050      	adds	r0, #80	; 0x50
  41bebe:	4b57      	ldr	r3, [pc, #348]	; (41c01c <basic_init+0x1738>)
  41bec0:	fb83 2300 	smull	r2, r3, r3, r0
  41bec4:	17c2      	asrs	r2, r0, #31
  41bec6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41beca:	b212      	sxth	r2, r2
  41becc:	f7ff bb8c 	b.w	41b5e8 <basic_init+0xd04>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41bed0:	2000      	movs	r0, #0
  41bed2:	4b51      	ldr	r3, [pc, #324]	; (41c018 <basic_init+0x1734>)
  41bed4:	4798      	blx	r3
  41bed6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41beda:	3050      	adds	r0, #80	; 0x50
  41bedc:	4b4f      	ldr	r3, [pc, #316]	; (41c01c <basic_init+0x1738>)
  41bede:	fb83 2300 	smull	r2, r3, r3, r0
  41bee2:	17c2      	asrs	r2, r0, #31
  41bee4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bee8:	b212      	sxth	r2, r2
  41beea:	f7ff bb8f 	b.w	41b60c <basic_init+0xd28>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41beee:	2000      	movs	r0, #0
  41bef0:	4b49      	ldr	r3, [pc, #292]	; (41c018 <basic_init+0x1734>)
  41bef2:	4798      	blx	r3
  41bef4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bef8:	3050      	adds	r0, #80	; 0x50
  41befa:	4b48      	ldr	r3, [pc, #288]	; (41c01c <basic_init+0x1738>)
  41befc:	fb83 2300 	smull	r2, r3, r3, r0
  41bf00:	17c2      	asrs	r2, r0, #31
  41bf02:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf06:	b212      	sxth	r2, r2
  41bf08:	f7ff bb92 	b.w	41b630 <basic_init+0xd4c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41bf0c:	2000      	movs	r0, #0
  41bf0e:	4b42      	ldr	r3, [pc, #264]	; (41c018 <basic_init+0x1734>)
  41bf10:	4798      	blx	r3
  41bf12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bf16:	0080      	lsls	r0, r0, #2
  41bf18:	3050      	adds	r0, #80	; 0x50
  41bf1a:	4b40      	ldr	r3, [pc, #256]	; (41c01c <basic_init+0x1738>)
  41bf1c:	fb83 2300 	smull	r2, r3, r3, r0
  41bf20:	17c2      	asrs	r2, r0, #31
  41bf22:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf26:	b212      	sxth	r2, r2
  41bf28:	f7ff bb95 	b.w	41b656 <basic_init+0xd72>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41bf2c:	2000      	movs	r0, #0
  41bf2e:	4b3a      	ldr	r3, [pc, #232]	; (41c018 <basic_init+0x1734>)
  41bf30:	4798      	blx	r3
  41bf32:	3028      	adds	r0, #40	; 0x28
  41bf34:	0040      	lsls	r0, r0, #1
  41bf36:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bf3a:	da02      	bge.n	41bf42 <basic_init+0x165e>
  41bf3c:	2201      	movs	r2, #1
  41bf3e:	f7ff bb98 	b.w	41b672 <basic_init+0xd8e>
  41bf42:	2000      	movs	r0, #0
  41bf44:	4b34      	ldr	r3, [pc, #208]	; (41c018 <basic_init+0x1734>)
  41bf46:	4798      	blx	r3
  41bf48:	3028      	adds	r0, #40	; 0x28
  41bf4a:	0040      	lsls	r0, r0, #1
  41bf4c:	4b33      	ldr	r3, [pc, #204]	; (41c01c <basic_init+0x1738>)
  41bf4e:	fb83 2300 	smull	r2, r3, r3, r0
  41bf52:	17c2      	asrs	r2, r0, #31
  41bf54:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf58:	b212      	sxth	r2, r2
  41bf5a:	f7ff bb8a 	b.w	41b672 <basic_init+0xd8e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41bf5e:	2000      	movs	r0, #0
  41bf60:	4b2d      	ldr	r3, [pc, #180]	; (41c018 <basic_init+0x1734>)
  41bf62:	4798      	blx	r3
  41bf64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bf68:	0080      	lsls	r0, r0, #2
  41bf6a:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41bf6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bf70:	da02      	bge.n	41bf78 <basic_init+0x1694>
  41bf72:	2201      	movs	r2, #1
  41bf74:	f7ff bbd2 	b.w	41b71c <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41bf78:	2000      	movs	r0, #0
  41bf7a:	4b27      	ldr	r3, [pc, #156]	; (41c018 <basic_init+0x1734>)
  41bf7c:	4798      	blx	r3
  41bf7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bf82:	0080      	lsls	r0, r0, #2
  41bf84:	3050      	adds	r0, #80	; 0x50
  41bf86:	4b25      	ldr	r3, [pc, #148]	; (41c01c <basic_init+0x1738>)
  41bf88:	fb83 2300 	smull	r2, r3, r3, r0
  41bf8c:	17c2      	asrs	r2, r0, #31
  41bf8e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41bf92:	b212      	sxth	r2, r2
  41bf94:	f7ff bbc2 	b.w	41b71c <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41bf98:	2000      	movs	r0, #0
  41bf9a:	4b1f      	ldr	r3, [pc, #124]	; (41c018 <basic_init+0x1734>)
  41bf9c:	4798      	blx	r3
  41bf9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bfa2:	00c0      	lsls	r0, r0, #3
  41bfa4:	3050      	adds	r0, #80	; 0x50
  41bfa6:	4b1d      	ldr	r3, [pc, #116]	; (41c01c <basic_init+0x1738>)
  41bfa8:	fb83 2300 	smull	r2, r3, r3, r0
  41bfac:	17c2      	asrs	r2, r0, #31
  41bfae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41bfb2:	b212      	sxth	r2, r2
  41bfb4:	f7ff bbb2 	b.w	41b71c <basic_init+0xe38>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41bfb8:	2000      	movs	r0, #0
  41bfba:	4b17      	ldr	r3, [pc, #92]	; (41c018 <basic_init+0x1734>)
  41bfbc:	4798      	blx	r3
  41bfbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bfc2:	0040      	lsls	r0, r0, #1
  41bfc4:	3050      	adds	r0, #80	; 0x50
  41bfc6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bfca:	da02      	bge.n	41bfd2 <basic_init+0x16ee>
  41bfcc:	2401      	movs	r4, #1
  41bfce:	f7ff bbc0 	b.w	41b752 <basic_init+0xe6e>
  41bfd2:	2000      	movs	r0, #0
  41bfd4:	4b10      	ldr	r3, [pc, #64]	; (41c018 <basic_init+0x1734>)
  41bfd6:	4798      	blx	r3
  41bfd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bfdc:	0040      	lsls	r0, r0, #1
  41bfde:	3050      	adds	r0, #80	; 0x50
  41bfe0:	4b0e      	ldr	r3, [pc, #56]	; (41c01c <basic_init+0x1738>)
  41bfe2:	fb83 2300 	smull	r2, r3, r3, r0
  41bfe6:	17c4      	asrs	r4, r0, #31
  41bfe8:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41bfec:	b224      	sxth	r4, r4
  41bfee:	f7ff bbb0 	b.w	41b752 <basic_init+0xe6e>
  41bff2:	2000      	movs	r0, #0
  41bff4:	4b08      	ldr	r3, [pc, #32]	; (41c018 <basic_init+0x1734>)
  41bff6:	4798      	blx	r3
  41bff8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bffc:	0080      	lsls	r0, r0, #2
  41bffe:	3050      	adds	r0, #80	; 0x50
  41c000:	4b06      	ldr	r3, [pc, #24]	; (41c01c <basic_init+0x1738>)
  41c002:	fb83 2300 	smull	r2, r3, r3, r0
  41c006:	17c4      	asrs	r4, r0, #31
  41c008:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41c00c:	b224      	sxth	r4, r4
  41c00e:	f7ff bba0 	b.w	41b752 <basic_init+0xe6e>
  41c012:	bf00      	nop
  41c014:	2041479c 	.word	0x2041479c
  41c018:	00413f95 	.word	0x00413f95
  41c01c:	66666667 	.word	0x66666667

0041c020 <lv_theme_material_init>:
{
  41c020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41c024:	4680      	mov	r8, r0
  41c026:	460f      	mov	r7, r1
  41c028:	4615      	mov	r5, r2
  41c02a:	461e      	mov	r6, r3
    if(!inited) {
  41c02c:	4b27      	ldr	r3, [pc, #156]	; (41c0cc <lv_theme_material_init+0xac>)
  41c02e:	781b      	ldrb	r3, [r3, #0]
  41c030:	2b00      	cmp	r3, #0
  41c032:	d043      	beq.n	41c0bc <lv_theme_material_init+0x9c>
    theme.color_primary = color_primary;
  41c034:	4c26      	ldr	r4, [pc, #152]	; (41c0d0 <lv_theme_material_init+0xb0>)
  41c036:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
  41c03a:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
  41c03c:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
  41c03e:	9b06      	ldr	r3, [sp, #24]
  41c040:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
  41c042:	9b07      	ldr	r3, [sp, #28]
  41c044:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
  41c046:	9b08      	ldr	r3, [sp, #32]
  41c048:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
  41c04a:	6225      	str	r5, [r4, #32]
    basic_init();
  41c04c:	4b21      	ldr	r3, [pc, #132]	; (41c0d4 <lv_theme_material_init+0xb4>)
  41c04e:	4798      	blx	r3
    bar_init();
  41c050:	4b21      	ldr	r3, [pc, #132]	; (41c0d8 <lv_theme_material_init+0xb8>)
  41c052:	4798      	blx	r3
    led_init();
  41c054:	4b21      	ldr	r3, [pc, #132]	; (41c0dc <lv_theme_material_init+0xbc>)
  41c056:	4798      	blx	r3
    slider_init();
  41c058:	4b21      	ldr	r3, [pc, #132]	; (41c0e0 <lv_theme_material_init+0xc0>)
  41c05a:	4798      	blx	r3
    switch_init();
  41c05c:	4b21      	ldr	r3, [pc, #132]	; (41c0e4 <lv_theme_material_init+0xc4>)
  41c05e:	4798      	blx	r3
    linemeter_init();
  41c060:	4b21      	ldr	r3, [pc, #132]	; (41c0e8 <lv_theme_material_init+0xc8>)
  41c062:	4798      	blx	r3
    gauge_init();
  41c064:	4b21      	ldr	r3, [pc, #132]	; (41c0ec <lv_theme_material_init+0xcc>)
  41c066:	4798      	blx	r3
    arc_init();
  41c068:	4b21      	ldr	r3, [pc, #132]	; (41c0f0 <lv_theme_material_init+0xd0>)
  41c06a:	4798      	blx	r3
    chart_init();
  41c06c:	4b21      	ldr	r3, [pc, #132]	; (41c0f4 <lv_theme_material_init+0xd4>)
  41c06e:	4798      	blx	r3
    calendar_init();
  41c070:	4b21      	ldr	r3, [pc, #132]	; (41c0f8 <lv_theme_material_init+0xd8>)
  41c072:	4798      	blx	r3
    cpicker_init();
  41c074:	4b21      	ldr	r3, [pc, #132]	; (41c0fc <lv_theme_material_init+0xdc>)
  41c076:	4798      	blx	r3
    checkbox_init();
  41c078:	4b21      	ldr	r3, [pc, #132]	; (41c100 <lv_theme_material_init+0xe0>)
  41c07a:	4798      	blx	r3
    keyboard_init();
  41c07c:	4b21      	ldr	r3, [pc, #132]	; (41c104 <lv_theme_material_init+0xe4>)
  41c07e:	4798      	blx	r3
    msgbox_init();
  41c080:	4b21      	ldr	r3, [pc, #132]	; (41c108 <lv_theme_material_init+0xe8>)
  41c082:	4798      	blx	r3
    page_init();
  41c084:	4b21      	ldr	r3, [pc, #132]	; (41c10c <lv_theme_material_init+0xec>)
  41c086:	4798      	blx	r3
    textarea_init();
  41c088:	4b21      	ldr	r3, [pc, #132]	; (41c110 <lv_theme_material_init+0xf0>)
  41c08a:	4798      	blx	r3
    spinbox_init();
  41c08c:	4b21      	ldr	r3, [pc, #132]	; (41c114 <lv_theme_material_init+0xf4>)
  41c08e:	4798      	blx	r3
    list_init();
  41c090:	4b21      	ldr	r3, [pc, #132]	; (41c118 <lv_theme_material_init+0xf8>)
  41c092:	4798      	blx	r3
    ddlist_init();
  41c094:	4b21      	ldr	r3, [pc, #132]	; (41c11c <lv_theme_material_init+0xfc>)
  41c096:	4798      	blx	r3
    roller_init();
  41c098:	4b21      	ldr	r3, [pc, #132]	; (41c120 <lv_theme_material_init+0x100>)
  41c09a:	4798      	blx	r3
    table_init();
  41c09c:	4b21      	ldr	r3, [pc, #132]	; (41c124 <lv_theme_material_init+0x104>)
  41c09e:	4798      	blx	r3
    tabview_win_shared_init();
  41c0a0:	4b21      	ldr	r3, [pc, #132]	; (41c128 <lv_theme_material_init+0x108>)
  41c0a2:	4798      	blx	r3
    theme.apply_xcb = NULL;
  41c0a4:	2000      	movs	r0, #0
  41c0a6:	6060      	str	r0, [r4, #4]
    theme.apply_cb = theme_apply;
  41c0a8:	4b20      	ldr	r3, [pc, #128]	; (41c12c <lv_theme_material_init+0x10c>)
  41c0aa:	6023      	str	r3, [r4, #0]
    inited = true;
  41c0ac:	2201      	movs	r2, #1
  41c0ae:	4b07      	ldr	r3, [pc, #28]	; (41c0cc <lv_theme_material_init+0xac>)
  41c0b0:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
  41c0b2:	4b1f      	ldr	r3, [pc, #124]	; (41c130 <lv_theme_material_init+0x110>)
  41c0b4:	4798      	blx	r3
}
  41c0b6:	4620      	mov	r0, r4
  41c0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
  41c0bc:	20c0      	movs	r0, #192	; 0xc0
  41c0be:	4b1d      	ldr	r3, [pc, #116]	; (41c134 <lv_theme_material_init+0x114>)
  41c0c0:	4798      	blx	r3
  41c0c2:	4b1d      	ldr	r3, [pc, #116]	; (41c138 <lv_theme_material_init+0x118>)
  41c0c4:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
  41c0c6:	4b1d      	ldr	r3, [pc, #116]	; (41c13c <lv_theme_material_init+0x11c>)
  41c0c8:	6018      	str	r0, [r3, #0]
  41c0ca:	e7b3      	b.n	41c034 <lv_theme_material_init+0x14>
  41c0cc:	20414794 	.word	0x20414794
  41c0d0:	2041479c 	.word	0x2041479c
  41c0d4:	0041a8e5 	.word	0x0041a8e5
  41c0d8:	0041706d 	.word	0x0041706d
  41c0dc:	0041a7d1 	.word	0x0041a7d1
  41c0e0:	00417251 	.word	0x00417251
  41c0e4:	00417505 	.word	0x00417505
  41c0e8:	00417649 	.word	0x00417649
  41c0ec:	00417891 	.word	0x00417891
  41c0f0:	00417da1 	.word	0x00417da1
  41c0f4:	00417f0d 	.word	0x00417f0d
  41c0f8:	00418195 	.word	0x00418195
  41c0fc:	0041892d 	.word	0x0041892d
  41c100:	00418bbd 	.word	0x00418bbd
  41c104:	00418ee5 	.word	0x00418ee5
  41c108:	004190dd 	.word	0x004190dd
  41c10c:	00419181 	.word	0x00419181
  41c110:	0041930d 	.word	0x0041930d
  41c114:	00419455 	.word	0x00419455
  41c118:	00419531 	.word	0x00419531
  41c11c:	00419d55 	.word	0x00419d55
  41c120:	00419e99 	.word	0x00419e99
  41c124:	00419f45 	.word	0x00419f45
  41c128:	0041a1dd 	.word	0x0041a1dd
  41c12c:	00416a25 	.word	0x00416a25
  41c130:	0040712d 	.word	0x0040712d
  41c134:	0041576d 	.word	0x0041576d
  41c138:	2043a234 	.word	0x2043a234
  41c13c:	20414798 	.word	0x20414798

0041c140 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  41c140:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  41c142:	4810      	ldr	r0, [pc, #64]	; (41c184 <sysclk_init+0x44>)
  41c144:	4b10      	ldr	r3, [pc, #64]	; (41c188 <sysclk_init+0x48>)
  41c146:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  41c148:	213e      	movs	r1, #62	; 0x3e
  41c14a:	2000      	movs	r0, #0
  41c14c:	4b0f      	ldr	r3, [pc, #60]	; (41c18c <sysclk_init+0x4c>)
  41c14e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  41c150:	4b0f      	ldr	r3, [pc, #60]	; (41c190 <sysclk_init+0x50>)
  41c152:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  41c154:	2800      	cmp	r0, #0
  41c156:	d0fb      	beq.n	41c150 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  41c158:	4b0e      	ldr	r3, [pc, #56]	; (41c194 <sysclk_init+0x54>)
  41c15a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  41c15c:	4a0e      	ldr	r2, [pc, #56]	; (41c198 <sysclk_init+0x58>)
  41c15e:	4b0f      	ldr	r3, [pc, #60]	; (41c19c <sysclk_init+0x5c>)
  41c160:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  41c162:	4b0f      	ldr	r3, [pc, #60]	; (41c1a0 <sysclk_init+0x60>)
  41c164:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  41c166:	2800      	cmp	r0, #0
  41c168:	d0fb      	beq.n	41c162 <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  41c16a:	2002      	movs	r0, #2
  41c16c:	4b0d      	ldr	r3, [pc, #52]	; (41c1a4 <sysclk_init+0x64>)
  41c16e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  41c170:	2000      	movs	r0, #0
  41c172:	4b0d      	ldr	r3, [pc, #52]	; (41c1a8 <sysclk_init+0x68>)
  41c174:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  41c176:	4b0d      	ldr	r3, [pc, #52]	; (41c1ac <sysclk_init+0x6c>)
  41c178:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  41c17a:	480d      	ldr	r0, [pc, #52]	; (41c1b0 <sysclk_init+0x70>)
  41c17c:	4b02      	ldr	r3, [pc, #8]	; (41c188 <sysclk_init+0x48>)
  41c17e:	4798      	blx	r3
  41c180:	bd08      	pop	{r3, pc}
  41c182:	bf00      	nop
  41c184:	07270e00 	.word	0x07270e00
  41c188:	0041cf79 	.word	0x0041cf79
  41c18c:	0041ca39 	.word	0x0041ca39
  41c190:	0041ca8d 	.word	0x0041ca8d
  41c194:	0041ca9d 	.word	0x0041ca9d
  41c198:	20183f01 	.word	0x20183f01
  41c19c:	400e0600 	.word	0x400e0600
  41c1a0:	0041caad 	.word	0x0041caad
  41c1a4:	0041c9a9 	.word	0x0041c9a9
  41c1a8:	0041c9e5 	.word	0x0041c9e5
  41c1ac:	0041ce69 	.word	0x0041ce69
  41c1b0:	11e1a300 	.word	0x11e1a300

0041c1b4 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  41c1b4:	b510      	push	{r4, lr}
  41c1b6:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  41c1b8:	4b10      	ldr	r3, [pc, #64]	; (41c1fc <spi_master_init+0x48>)
  41c1ba:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  41c1bc:	2380      	movs	r3, #128	; 0x80
  41c1be:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  41c1c0:	6863      	ldr	r3, [r4, #4]
  41c1c2:	f043 0301 	orr.w	r3, r3, #1
  41c1c6:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  41c1c8:	6863      	ldr	r3, [r4, #4]
  41c1ca:	f043 0310 	orr.w	r3, r3, #16
  41c1ce:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  41c1d0:	6863      	ldr	r3, [r4, #4]
  41c1d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  41c1d6:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  41c1d8:	2100      	movs	r1, #0
  41c1da:	4620      	mov	r0, r4
  41c1dc:	4b08      	ldr	r3, [pc, #32]	; (41c200 <spi_master_init+0x4c>)
  41c1de:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  41c1e0:	6863      	ldr	r3, [r4, #4]
  41c1e2:	f023 0302 	bic.w	r3, r3, #2
  41c1e6:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  41c1e8:	6863      	ldr	r3, [r4, #4]
  41c1ea:	f023 0304 	bic.w	r3, r3, #4
  41c1ee:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  41c1f0:	2100      	movs	r1, #0
  41c1f2:	4620      	mov	r0, r4
  41c1f4:	4b03      	ldr	r3, [pc, #12]	; (41c204 <spi_master_init+0x50>)
  41c1f6:	4798      	blx	r3
  41c1f8:	bd10      	pop	{r4, pc}
  41c1fa:	bf00      	nop
  41c1fc:	0041cadd 	.word	0x0041cadd
  41c200:	0041cb09 	.word	0x0041cb09
  41c204:	0041cb1f 	.word	0x0041cb1f

0041c208 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  41c208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41c20c:	4604      	mov	r4, r0
  41c20e:	460d      	mov	r5, r1
  41c210:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  41c212:	4915      	ldr	r1, [pc, #84]	; (41c268 <spi_master_setup_device+0x60>)
  41c214:	4618      	mov	r0, r3
  41c216:	4b15      	ldr	r3, [pc, #84]	; (41c26c <spi_master_setup_device+0x64>)
  41c218:	4798      	blx	r3
  41c21a:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  41c21c:	2300      	movs	r3, #0
  41c21e:	461a      	mov	r2, r3
  41c220:	6829      	ldr	r1, [r5, #0]
  41c222:	4620      	mov	r0, r4
  41c224:	f8df 805c 	ldr.w	r8, [pc, #92]	; 41c284 <spi_master_setup_device+0x7c>
  41c228:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  41c22a:	2208      	movs	r2, #8
  41c22c:	6829      	ldr	r1, [r5, #0]
  41c22e:	4620      	mov	r0, r4
  41c230:	4b0f      	ldr	r3, [pc, #60]	; (41c270 <spi_master_setup_device+0x68>)
  41c232:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  41c234:	b2fa      	uxtb	r2, r7
  41c236:	6829      	ldr	r1, [r5, #0]
  41c238:	4620      	mov	r0, r4
  41c23a:	4b0e      	ldr	r3, [pc, #56]	; (41c274 <spi_master_setup_device+0x6c>)
  41c23c:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  41c23e:	2208      	movs	r2, #8
  41c240:	6829      	ldr	r1, [r5, #0]
  41c242:	4620      	mov	r0, r4
  41c244:	4b0c      	ldr	r3, [pc, #48]	; (41c278 <spi_master_setup_device+0x70>)
  41c246:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  41c248:	0872      	lsrs	r2, r6, #1
  41c24a:	6829      	ldr	r1, [r5, #0]
  41c24c:	4620      	mov	r0, r4
  41c24e:	4b0b      	ldr	r3, [pc, #44]	; (41c27c <spi_master_setup_device+0x74>)
  41c250:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  41c252:	f086 0201 	eor.w	r2, r6, #1
  41c256:	f002 0201 	and.w	r2, r2, #1
  41c25a:	6829      	ldr	r1, [r5, #0]
  41c25c:	4620      	mov	r0, r4
  41c25e:	4b08      	ldr	r3, [pc, #32]	; (41c280 <spi_master_setup_device+0x78>)
  41c260:	4798      	blx	r3
  41c262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41c266:	bf00      	nop
  41c268:	08f0d180 	.word	0x08f0d180
  41c26c:	0041cbe3 	.word	0x0041cbe3
  41c270:	0041cbc9 	.word	0x0041cbc9
  41c274:	0041cbfb 	.word	0x0041cbfb
  41c278:	0041cb75 	.word	0x0041cb75
  41c27c:	0041cb31 	.word	0x0041cb31
  41c280:	0041cb53 	.word	0x0041cb53
  41c284:	0041cc29 	.word	0x0041cc29

0041c288 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  41c288:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  41c28a:	6843      	ldr	r3, [r0, #4]
  41c28c:	f013 0f04 	tst.w	r3, #4
  41c290:	d005      	beq.n	41c29e <spi_select_device+0x16>
		return 1;
  41c292:	2301      	movs	r3, #1
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  41c294:	b143      	cbz	r3, 41c2a8 <spi_select_device+0x20>
		if (device->id < MAX_NUM_WITH_DECODER) {
  41c296:	6809      	ldr	r1, [r1, #0]
  41c298:	290f      	cmp	r1, #15
  41c29a:	d902      	bls.n	41c2a2 <spi_select_device+0x1a>
  41c29c:	bd08      	pop	{r3, pc}
		return 0;
  41c29e:	2300      	movs	r3, #0
  41c2a0:	e7f8      	b.n	41c294 <spi_select_device+0xc>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  41c2a2:	4b06      	ldr	r3, [pc, #24]	; (41c2bc <spi_select_device+0x34>)
  41c2a4:	4798      	blx	r3
  41c2a6:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  41c2a8:	6809      	ldr	r1, [r1, #0]
  41c2aa:	2903      	cmp	r1, #3
  41c2ac:	d8f6      	bhi.n	41c29c <spi_select_device+0x14>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  41c2ae:	2301      	movs	r3, #1
  41c2b0:	fa03 f101 	lsl.w	r1, r3, r1
  41c2b4:	43c9      	mvns	r1, r1
  41c2b6:	4b01      	ldr	r3, [pc, #4]	; (41c2bc <spi_select_device+0x34>)
  41c2b8:	4798      	blx	r3
		}
	}
}
  41c2ba:	e7ef      	b.n	41c29c <spi_select_device+0x14>
  41c2bc:	0041cb09 	.word	0x0041cb09

0041c2c0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  41c2c0:	b570      	push	{r4, r5, r6, lr}
  41c2c2:	460d      	mov	r5, r1
  41c2c4:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
  41c2c6:	4606      	mov	r6, r0
  41c2c8:	b158      	cbz	r0, 41c2e2 <_read+0x22>
		return -1;
  41c2ca:	f04f 36ff 	mov.w	r6, #4294967295
  41c2ce:	e00a      	b.n	41c2e6 <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  41c2d0:	4b06      	ldr	r3, [pc, #24]	; (41c2ec <_read+0x2c>)
  41c2d2:	6818      	ldr	r0, [r3, #0]
  41c2d4:	4b06      	ldr	r3, [pc, #24]	; (41c2f0 <_read+0x30>)
  41c2d6:	681b      	ldr	r3, [r3, #0]
  41c2d8:	4629      	mov	r1, r5
  41c2da:	4798      	blx	r3
		ptr++;
  41c2dc:	3501      	adds	r5, #1
		nChars++;
  41c2de:	3601      	adds	r6, #1
	for (; len > 0; --len) {
  41c2e0:	3c01      	subs	r4, #1
  41c2e2:	2c00      	cmp	r4, #0
  41c2e4:	dcf4      	bgt.n	41c2d0 <_read+0x10>
	}
	return nChars;
}
  41c2e6:	4630      	mov	r0, r6
  41c2e8:	bd70      	pop	{r4, r5, r6, pc}
  41c2ea:	bf00      	nop
  41c2ec:	2043a2f8 	.word	0x2043a2f8
  41c2f0:	2043a2f0 	.word	0x2043a2f0

0041c2f4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  41c2f4:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  41c2f6:	3801      	subs	r0, #1
  41c2f8:	2802      	cmp	r0, #2
  41c2fa:	d80f      	bhi.n	41c31c <_write+0x28>
  41c2fc:	4614      	mov	r4, r2
  41c2fe:	2500      	movs	r5, #0
		return -1;
	}

	for (; len != 0; --len) {
  41c300:	b18c      	cbz	r4, 41c326 <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  41c302:	4b0a      	ldr	r3, [pc, #40]	; (41c32c <_write+0x38>)
  41c304:	6818      	ldr	r0, [r3, #0]
  41c306:	1c4e      	adds	r6, r1, #1
  41c308:	4b09      	ldr	r3, [pc, #36]	; (41c330 <_write+0x3c>)
  41c30a:	681b      	ldr	r3, [r3, #0]
  41c30c:	7809      	ldrb	r1, [r1, #0]
  41c30e:	4798      	blx	r3
  41c310:	2800      	cmp	r0, #0
  41c312:	db06      	blt.n	41c322 <_write+0x2e>
			return -1;
		}
		++nChars;
  41c314:	3501      	adds	r5, #1
	for (; len != 0; --len) {
  41c316:	3c01      	subs	r4, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  41c318:	4631      	mov	r1, r6
  41c31a:	e7f1      	b.n	41c300 <_write+0xc>
		return -1;
  41c31c:	f04f 35ff 	mov.w	r5, #4294967295
  41c320:	e001      	b.n	41c326 <_write+0x32>
			return -1;
  41c322:	f04f 35ff 	mov.w	r5, #4294967295
	}
	return nChars;
}
  41c326:	4628      	mov	r0, r5
  41c328:	bd70      	pop	{r4, r5, r6, pc}
  41c32a:	bf00      	nop
  41c32c:	2043a2f8 	.word	0x2043a2f8
  41c330:	2043a2f4 	.word	0x2043a2f4

0041c334 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  41c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  41c338:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  41c33c:	4b9a      	ldr	r3, [pc, #616]	; (41c5a8 <board_init+0x274>)
  41c33e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  41c340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41c344:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  41c348:	4b98      	ldr	r3, [pc, #608]	; (41c5ac <board_init+0x278>)
  41c34a:	2200      	movs	r2, #0
  41c34c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  41c350:	695a      	ldr	r2, [r3, #20]
  41c352:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  41c356:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  41c358:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41c35c:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  41c360:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  41c364:	f3c6 304e 	ubfx	r0, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  41c368:	f006 0507 	and.w	r5, r6, #7
  41c36c:	3504      	adds	r5, #4
    ways    = CCSIDR_WAYS(ccsidr);
  41c36e:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  41c372:	fab6 f486 	clz	r4, r6
    wshift  = __CLZ(ways) & 0x1f;
  41c376:	f004 041f 	and.w	r4, r4, #31
  __ASM volatile ("dsb");
  41c37a:	f3bf 8f4f 	dsb	sy
  41c37e:	e00e      	b.n	41c39e <board_init+0x6a>
    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
            } while(tmpways--);
  41c380:	4613      	mov	r3, r2
              sw = ((tmpways << wshift) | (sets << sshift));
  41c382:	fa03 f204 	lsl.w	r2, r3, r4
  41c386:	fa00 f105 	lsl.w	r1, r0, r5
  41c38a:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  41c38c:	4987      	ldr	r1, [pc, #540]	; (41c5ac <board_init+0x278>)
  41c38e:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
            } while(tmpways--);
  41c392:	1e5a      	subs	r2, r3, #1
  41c394:	2b00      	cmp	r3, #0
  41c396:	d1f3      	bne.n	41c380 <board_init+0x4c>
        } while(sets--);
  41c398:	1e43      	subs	r3, r0, #1
  41c39a:	b110      	cbz	r0, 41c3a2 <board_init+0x6e>
  41c39c:	4618      	mov	r0, r3
         int32_t tmpways = ways;
  41c39e:	4633      	mov	r3, r6
  41c3a0:	e7ef      	b.n	41c382 <board_init+0x4e>
  41c3a2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  41c3a6:	460b      	mov	r3, r1
  41c3a8:	694a      	ldr	r2, [r1, #20]
  41c3aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  41c3ae:	614a      	str	r2, [r1, #20]
  41c3b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41c3b4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  41c3b8:	4a7d      	ldr	r2, [pc, #500]	; (41c5b0 <board_init+0x27c>)
  41c3ba:	497e      	ldr	r1, [pc, #504]	; (41c5b4 <board_init+0x280>)
  41c3bc:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  41c3be:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  41c3c2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  41c3c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41c3c8:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  41c3cc:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  41c3d0:	f022 0201 	bic.w	r2, r2, #1
  41c3d4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  41c3d8:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  41c3dc:	f022 0201 	bic.w	r2, r2, #1
  41c3e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  41c3e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41c3e8:	f3bf 8f6f 	isb	sy
  41c3ec:	200a      	movs	r0, #10
  41c3ee:	4c72      	ldr	r4, [pc, #456]	; (41c5b8 <board_init+0x284>)
  41c3f0:	47a0      	blx	r4
  41c3f2:	200b      	movs	r0, #11
  41c3f4:	47a0      	blx	r4
  41c3f6:	200c      	movs	r0, #12
  41c3f8:	47a0      	blx	r4
  41c3fa:	2010      	movs	r0, #16
  41c3fc:	47a0      	blx	r4
  41c3fe:	2011      	movs	r0, #17
  41c400:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  41c402:	4e6e      	ldr	r6, [pc, #440]	; (41c5bc <board_init+0x288>)
  41c404:	f44f 7880 	mov.w	r8, #256	; 0x100
  41c408:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  41c40c:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  41c410:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  41c414:	4c6a      	ldr	r4, [pc, #424]	; (41c5c0 <board_init+0x28c>)
  41c416:	f44f 6500 	mov.w	r5, #2048	; 0x800
  41c41a:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  41c41c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  41c420:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  41c422:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  41c426:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  41c428:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  41c42a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  41c42e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  41c430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  41c434:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  41c436:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41c438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  41c43c:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  41c43e:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  41c442:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  41c446:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  41c44a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  41c44e:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  41c450:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  41c454:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  41c456:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  41c458:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  41c45c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41c45e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  41c462:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  41c464:	6f62      	ldr	r2, [r4, #116]	; 0x74
  41c466:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  41c46a:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  41c46c:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  41c46e:	4a55      	ldr	r2, [pc, #340]	; (41c5c4 <board_init+0x290>)
  41c470:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  41c474:	f043 0310 	orr.w	r3, r3, #16
  41c478:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  41c47c:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  41c480:	2310      	movs	r3, #16
  41c482:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  41c484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  41c488:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  41c48a:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  41c48c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  41c490:	6f11      	ldr	r1, [r2, #112]	; 0x70
  41c492:	4319      	orrs	r1, r3
  41c494:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  41c496:	6f51      	ldr	r1, [r2, #116]	; 0x74
  41c498:	4319      	orrs	r1, r3
  41c49a:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  41c49c:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  41c49e:	2208      	movs	r2, #8
  41c4a0:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  41c4a2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  41c4a6:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  41c4a8:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  41c4aa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  41c4ae:	6f21      	ldr	r1, [r4, #112]	; 0x70
  41c4b0:	f021 0108 	bic.w	r1, r1, #8
  41c4b4:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  41c4b6:	6f61      	ldr	r1, [r4, #116]	; 0x74
  41c4b8:	f021 0108 	bic.w	r1, r1, #8
  41c4bc:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  41c4be:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  41c4c0:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  41c4c2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  41c4c6:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  41c4c8:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  41c4ca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  41c4ce:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41c4d0:	f022 0210 	bic.w	r2, r2, #16
  41c4d4:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  41c4d6:	6f62      	ldr	r2, [r4, #116]	; 0x74
  41c4d8:	f022 0210 	bic.w	r2, r2, #16
  41c4dc:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  41c4de:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  41c4e0:	2300      	movs	r3, #0
  41c4e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  41c4e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41c4ea:	4630      	mov	r0, r6
  41c4ec:	4f36      	ldr	r7, [pc, #216]	; (41c5c8 <board_init+0x294>)
  41c4ee:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  41c4f0:	2300      	movs	r3, #0
  41c4f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  41c4f6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41c4fa:	4630      	mov	r0, r6
  41c4fc:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  41c4fe:	2301      	movs	r3, #1
  41c500:	22ff      	movs	r2, #255	; 0xff
  41c502:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41c506:	4630      	mov	r0, r6
  41c508:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  41c50a:	2301      	movs	r3, #1
  41c50c:	223f      	movs	r2, #63	; 0x3f
  41c50e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41c512:	482e      	ldr	r0, [pc, #184]	; (41c5cc <board_init+0x298>)
  41c514:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  41c516:	2301      	movs	r3, #1
  41c518:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  41c51c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41c520:	4620      	mov	r0, r4
  41c522:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  41c524:	2301      	movs	r3, #1
  41c526:	4642      	mov	r2, r8
  41c528:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41c52c:	4630      	mov	r0, r6
  41c52e:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  41c530:	2301      	movs	r3, #1
  41c532:	462a      	mov	r2, r5
  41c534:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41c538:	4630      	mov	r0, r6
  41c53a:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  41c53c:	2301      	movs	r3, #1
  41c53e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  41c542:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41c546:	4822      	ldr	r0, [pc, #136]	; (41c5d0 <board_init+0x29c>)
  41c548:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  41c54a:	2300      	movs	r3, #0
  41c54c:	f44f 7200 	mov.w	r2, #512	; 0x200
  41c550:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41c554:	4630      	mov	r0, r6
  41c556:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  41c558:	f44f 7100 	mov.w	r1, #512	; 0x200
  41c55c:	4630      	mov	r0, r6
  41c55e:	4b1d      	ldr	r3, [pc, #116]	; (41c5d4 <board_init+0x2a0>)
  41c560:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  41c562:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41c566:	2074      	movs	r0, #116	; 0x74
  41c568:	4c1b      	ldr	r4, [pc, #108]	; (41c5d8 <board_init+0x2a4>)
  41c56a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  41c56c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41c570:	2075      	movs	r0, #117	; 0x75
  41c572:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  41c574:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41c578:	2076      	movs	r0, #118	; 0x76
  41c57a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  41c57c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41c580:	207b      	movs	r0, #123	; 0x7b
  41c582:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  41c584:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41c588:	2018      	movs	r0, #24
  41c58a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  41c58c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41c590:	2006      	movs	r0, #6
  41c592:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  41c594:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41c598:	2053      	movs	r0, #83	; 0x53
  41c59a:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  41c59c:	2053      	movs	r0, #83	; 0x53
  41c59e:	4b0f      	ldr	r3, [pc, #60]	; (41c5dc <board_init+0x2a8>)
  41c5a0:	4798      	blx	r3
  41c5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41c5a6:	bf00      	nop
  41c5a8:	400e1850 	.word	0x400e1850
  41c5ac:	e000ed00 	.word	0xe000ed00
  41c5b0:	400e0c00 	.word	0x400e0c00
  41c5b4:	5a00080c 	.word	0x5a00080c
  41c5b8:	0041cabd 	.word	0x0041cabd
  41c5bc:	400e1200 	.word	0x400e1200
  41c5c0:	400e0e00 	.word	0x400e0e00
  41c5c4:	40088000 	.word	0x40088000
  41c5c8:	0041c705 	.word	0x0041c705
  41c5cc:	400e1600 	.word	0x400e1600
  41c5d0:	400e1400 	.word	0x400e1400
  41c5d4:	0041c5eb 	.word	0x0041c5eb
  41c5d8:	0041c7c5 	.word	0x0041c7c5
  41c5dc:	0041c7ad 	.word	0x0041c7ad

0041c5e0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  41c5e0:	b90a      	cbnz	r2, 41c5e6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  41c5e2:	6601      	str	r1, [r0, #96]	; 0x60
  41c5e4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  41c5e6:	6641      	str	r1, [r0, #100]	; 0x64
  41c5e8:	4770      	bx	lr

0041c5ea <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  41c5ea:	6301      	str	r1, [r0, #48]	; 0x30
  41c5ec:	4770      	bx	lr

0041c5ee <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  41c5ee:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  41c5f0:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  41c5f4:	d039      	beq.n	41c66a <pio_set_peripheral+0x7c>
  41c5f6:	d813      	bhi.n	41c620 <pio_set_peripheral+0x32>
  41c5f8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  41c5fc:	d025      	beq.n	41c64a <pio_set_peripheral+0x5c>
  41c5fe:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  41c602:	d10a      	bne.n	41c61a <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  41c604:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  41c606:	4313      	orrs	r3, r2
  41c608:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  41c60a:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  41c60c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  41c60e:	ea21 0102 	bic.w	r1, r1, r2
  41c612:	400b      	ands	r3, r1
  41c614:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  41c616:	6042      	str	r2, [r0, #4]
  41c618:	4770      	bx	lr
	switch (ul_type) {
  41c61a:	2900      	cmp	r1, #0
  41c61c:	d1fb      	bne.n	41c616 <pio_set_peripheral+0x28>
  41c61e:	4770      	bx	lr
  41c620:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  41c624:	d020      	beq.n	41c668 <pio_set_peripheral+0x7a>
  41c626:	d809      	bhi.n	41c63c <pio_set_peripheral+0x4e>
  41c628:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  41c62c:	d1f3      	bne.n	41c616 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  41c62e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  41c630:	4313      	orrs	r3, r2
  41c632:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  41c634:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  41c636:	4313      	orrs	r3, r2
  41c638:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  41c63a:	e7ec      	b.n	41c616 <pio_set_peripheral+0x28>
	switch (ul_type) {
  41c63c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  41c640:	d012      	beq.n	41c668 <pio_set_peripheral+0x7a>
  41c642:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  41c646:	d00f      	beq.n	41c668 <pio_set_peripheral+0x7a>
  41c648:	e7e5      	b.n	41c616 <pio_set_peripheral+0x28>
{
  41c64a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  41c64c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  41c64e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  41c650:	43d3      	mvns	r3, r2
  41c652:	401c      	ands	r4, r3
  41c654:	4021      	ands	r1, r4
  41c656:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  41c658:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  41c65a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  41c65c:	4023      	ands	r3, r4
  41c65e:	400b      	ands	r3, r1
  41c660:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  41c662:	6042      	str	r2, [r0, #4]
}
  41c664:	f85d 4b04 	ldr.w	r4, [sp], #4
  41c668:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  41c66a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  41c66c:	6f03      	ldr	r3, [r0, #112]	; 0x70
  41c66e:	ea21 0102 	bic.w	r1, r1, r2
  41c672:	400b      	ands	r3, r1
  41c674:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  41c676:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  41c678:	4313      	orrs	r3, r2
  41c67a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  41c67c:	e7cb      	b.n	41c616 <pio_set_peripheral+0x28>

0041c67e <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  41c67e:	6441      	str	r1, [r0, #68]	; 0x44
  41c680:	4770      	bx	lr
	...

0041c684 <pio_set_input>:
{
  41c684:	b570      	push	{r4, r5, r6, lr}
  41c686:	4604      	mov	r4, r0
  41c688:	460d      	mov	r5, r1
  41c68a:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  41c68c:	4b0d      	ldr	r3, [pc, #52]	; (41c6c4 <pio_set_input+0x40>)
  41c68e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  41c690:	f006 0201 	and.w	r2, r6, #1
  41c694:	4629      	mov	r1, r5
  41c696:	4620      	mov	r0, r4
  41c698:	4b0b      	ldr	r3, [pc, #44]	; (41c6c8 <pio_set_input+0x44>)
  41c69a:	4798      	blx	r3
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  41c69c:	f016 0f0a 	tst.w	r6, #10
  41c6a0:	d009      	beq.n	41c6b6 <pio_set_input+0x32>
		p_pio->PIO_IFER = ul_mask;
  41c6a2:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  41c6a4:	f016 0f02 	tst.w	r6, #2
  41c6a8:	d107      	bne.n	41c6ba <pio_set_input+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
  41c6aa:	f016 0f08 	tst.w	r6, #8
  41c6ae:	d006      	beq.n	41c6be <pio_set_input+0x3a>
			p_pio->PIO_IFSCER = ul_mask;
  41c6b0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  41c6b4:	e003      	b.n	41c6be <pio_set_input+0x3a>
		p_pio->PIO_IFDR = ul_mask;
  41c6b6:	6265      	str	r5, [r4, #36]	; 0x24
  41c6b8:	e7f4      	b.n	41c6a4 <pio_set_input+0x20>
		p_pio->PIO_IFSCDR = ul_mask;
  41c6ba:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  41c6be:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  41c6c0:	6025      	str	r5, [r4, #0]
  41c6c2:	bd70      	pop	{r4, r5, r6, pc}
  41c6c4:	0041c67f 	.word	0x0041c67f
  41c6c8:	0041c5e1 	.word	0x0041c5e1

0041c6cc <pio_set_output>:
{
  41c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41c6ce:	4604      	mov	r4, r0
  41c6d0:	460d      	mov	r5, r1
  41c6d2:	4616      	mov	r6, r2
  41c6d4:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
  41c6d6:	4b09      	ldr	r3, [pc, #36]	; (41c6fc <pio_set_output+0x30>)
  41c6d8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  41c6da:	9a06      	ldr	r2, [sp, #24]
  41c6dc:	4629      	mov	r1, r5
  41c6de:	4620      	mov	r0, r4
  41c6e0:	4b07      	ldr	r3, [pc, #28]	; (41c700 <pio_set_output+0x34>)
  41c6e2:	4798      	blx	r3
	if (ul_multidrive_enable) {
  41c6e4:	b12f      	cbz	r7, 41c6f2 <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
  41c6e6:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
  41c6e8:	b92e      	cbnz	r6, 41c6f6 <pio_set_output+0x2a>
		p_pio->PIO_CODR = ul_mask;
  41c6ea:	6365      	str	r5, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  41c6ec:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  41c6ee:	6025      	str	r5, [r4, #0]
  41c6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
  41c6f2:	6565      	str	r5, [r4, #84]	; 0x54
  41c6f4:	e7f8      	b.n	41c6e8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  41c6f6:	6325      	str	r5, [r4, #48]	; 0x30
  41c6f8:	e7f8      	b.n	41c6ec <pio_set_output+0x20>
  41c6fa:	bf00      	nop
  41c6fc:	0041c67f 	.word	0x0041c67f
  41c700:	0041c5e1 	.word	0x0041c5e1

0041c704 <pio_configure>:
{
  41c704:	b570      	push	{r4, r5, r6, lr}
  41c706:	b082      	sub	sp, #8
  41c708:	4604      	mov	r4, r0
  41c70a:	4615      	mov	r5, r2
  41c70c:	461e      	mov	r6, r3
	switch (ul_type) {
  41c70e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  41c712:	d014      	beq.n	41c73e <pio_configure+0x3a>
  41c714:	d90a      	bls.n	41c72c <pio_configure+0x28>
  41c716:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  41c71a:	d023      	beq.n	41c764 <pio_configure+0x60>
  41c71c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  41c720:	d020      	beq.n	41c764 <pio_configure+0x60>
  41c722:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  41c726:	d017      	beq.n	41c758 <pio_configure+0x54>
		return 0;
  41c728:	2000      	movs	r0, #0
  41c72a:	e013      	b.n	41c754 <pio_configure+0x50>
	switch (ul_type) {
  41c72c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  41c730:	d005      	beq.n	41c73e <pio_configure+0x3a>
  41c732:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  41c736:	d002      	beq.n	41c73e <pio_configure+0x3a>
  41c738:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  41c73c:	d1f4      	bne.n	41c728 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  41c73e:	462a      	mov	r2, r5
  41c740:	4620      	mov	r0, r4
  41c742:	4b10      	ldr	r3, [pc, #64]	; (41c784 <pio_configure+0x80>)
  41c744:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  41c746:	f006 0201 	and.w	r2, r6, #1
  41c74a:	4629      	mov	r1, r5
  41c74c:	4620      	mov	r0, r4
  41c74e:	4b0e      	ldr	r3, [pc, #56]	; (41c788 <pio_configure+0x84>)
  41c750:	4798      	blx	r3
	return 1;
  41c752:	2001      	movs	r0, #1
}
  41c754:	b002      	add	sp, #8
  41c756:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  41c758:	461a      	mov	r2, r3
  41c75a:	4629      	mov	r1, r5
  41c75c:	4b0b      	ldr	r3, [pc, #44]	; (41c78c <pio_configure+0x88>)
  41c75e:	4798      	blx	r3
	return 1;
  41c760:	2001      	movs	r0, #1
		break;
  41c762:	e7f7      	b.n	41c754 <pio_configure+0x50>
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  41c764:	f006 0301 	and.w	r3, r6, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  41c768:	9300      	str	r3, [sp, #0]
  41c76a:	f3c6 0380 	ubfx	r3, r6, #2, #1
  41c76e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  41c772:	bf14      	ite	ne
  41c774:	2200      	movne	r2, #0
  41c776:	2201      	moveq	r2, #1
  41c778:	4629      	mov	r1, r5
  41c77a:	4620      	mov	r0, r4
  41c77c:	4c04      	ldr	r4, [pc, #16]	; (41c790 <pio_configure+0x8c>)
  41c77e:	47a0      	blx	r4
	return 1;
  41c780:	2001      	movs	r0, #1
		break;
  41c782:	e7e7      	b.n	41c754 <pio_configure+0x50>
  41c784:	0041c5ef 	.word	0x0041c5ef
  41c788:	0041c5e1 	.word	0x0041c5e1
  41c78c:	0041c685 	.word	0x0041c685
  41c790:	0041c6cd 	.word	0x0041c6cd

0041c794 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  41c794:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  41c796:	4770      	bx	lr

0041c798 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  41c798:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  41c79a:	4770      	bx	lr

0041c79c <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  41c79c:	4b02      	ldr	r3, [pc, #8]	; (41c7a8 <pio_get_pin_group+0xc>)
  41c79e:	eb03 1050 	add.w	r0, r3, r0, lsr #5
#endif
	return p_pio;
}
  41c7a2:	0240      	lsls	r0, r0, #9
  41c7a4:	4770      	bx	lr
  41c7a6:	bf00      	nop
  41c7a8:	00200707 	.word	0x00200707

0041c7ac <pio_set_pin_high>:
{
  41c7ac:	b510      	push	{r4, lr}
  41c7ae:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
  41c7b0:	4b03      	ldr	r3, [pc, #12]	; (41c7c0 <pio_set_pin_high+0x14>)
  41c7b2:	4798      	blx	r3
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  41c7b4:	f004 041f 	and.w	r4, r4, #31
  41c7b8:	2301      	movs	r3, #1
  41c7ba:	40a3      	lsls	r3, r4
  41c7bc:	6303      	str	r3, [r0, #48]	; 0x30
  41c7be:	bd10      	pop	{r4, pc}
  41c7c0:	0041c79d 	.word	0x0041c79d

0041c7c4 <pio_configure_pin>:
{
  41c7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  41c7c6:	b083      	sub	sp, #12
  41c7c8:	4604      	mov	r4, r0
  41c7ca:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
  41c7cc:	4b42      	ldr	r3, [pc, #264]	; (41c8d8 <pio_configure_pin+0x114>)
  41c7ce:	4798      	blx	r3
  41c7d0:	4606      	mov	r6, r0
	switch (ul_flags & PIO_TYPE_Msk) {
  41c7d2:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
  41c7d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  41c7da:	d055      	beq.n	41c888 <pio_configure_pin+0xc4>
  41c7dc:	d80a      	bhi.n	41c7f4 <pio_configure_pin+0x30>
  41c7de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  41c7e2:	d02d      	beq.n	41c840 <pio_configure_pin+0x7c>
  41c7e4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  41c7e8:	d03c      	beq.n	41c864 <pio_configure_pin+0xa0>
  41c7ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  41c7ee:	d014      	beq.n	41c81a <pio_configure_pin+0x56>
		return 0;
  41c7f0:	2000      	movs	r0, #0
  41c7f2:	e023      	b.n	41c83c <pio_configure_pin+0x78>
	switch (ul_flags & PIO_TYPE_Msk) {
  41c7f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  41c7f8:	d058      	beq.n	41c8ac <pio_configure_pin+0xe8>
  41c7fa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  41c7fe:	d055      	beq.n	41c8ac <pio_configure_pin+0xe8>
  41c800:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  41c804:	d1f4      	bne.n	41c7f0 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  41c806:	f004 011f 	and.w	r1, r4, #31
  41c80a:	2401      	movs	r4, #1
  41c80c:	462a      	mov	r2, r5
  41c80e:	fa04 f101 	lsl.w	r1, r4, r1
  41c812:	4b32      	ldr	r3, [pc, #200]	; (41c8dc <pio_configure_pin+0x118>)
  41c814:	4798      	blx	r3
	return 1;
  41c816:	4620      	mov	r0, r4
		break;
  41c818:	e010      	b.n	41c83c <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  41c81a:	f004 041f 	and.w	r4, r4, #31
  41c81e:	2701      	movs	r7, #1
  41c820:	fa07 f404 	lsl.w	r4, r7, r4
  41c824:	4622      	mov	r2, r4
  41c826:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41c82a:	4b2d      	ldr	r3, [pc, #180]	; (41c8e0 <pio_configure_pin+0x11c>)
  41c82c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  41c82e:	ea05 0207 	and.w	r2, r5, r7
  41c832:	4621      	mov	r1, r4
  41c834:	4630      	mov	r0, r6
  41c836:	4b2b      	ldr	r3, [pc, #172]	; (41c8e4 <pio_configure_pin+0x120>)
  41c838:	4798      	blx	r3
	return 1;
  41c83a:	4638      	mov	r0, r7
}
  41c83c:	b003      	add	sp, #12
  41c83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  41c840:	f004 041f 	and.w	r4, r4, #31
  41c844:	2701      	movs	r7, #1
  41c846:	fa07 f404 	lsl.w	r4, r7, r4
  41c84a:	4622      	mov	r2, r4
  41c84c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41c850:	4b23      	ldr	r3, [pc, #140]	; (41c8e0 <pio_configure_pin+0x11c>)
  41c852:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  41c854:	ea05 0207 	and.w	r2, r5, r7
  41c858:	4621      	mov	r1, r4
  41c85a:	4630      	mov	r0, r6
  41c85c:	4b21      	ldr	r3, [pc, #132]	; (41c8e4 <pio_configure_pin+0x120>)
  41c85e:	4798      	blx	r3
	return 1;
  41c860:	4638      	mov	r0, r7
		break;
  41c862:	e7eb      	b.n	41c83c <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  41c864:	f004 041f 	and.w	r4, r4, #31
  41c868:	2701      	movs	r7, #1
  41c86a:	fa07 f404 	lsl.w	r4, r7, r4
  41c86e:	4622      	mov	r2, r4
  41c870:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  41c874:	4b1a      	ldr	r3, [pc, #104]	; (41c8e0 <pio_configure_pin+0x11c>)
  41c876:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  41c878:	ea05 0207 	and.w	r2, r5, r7
  41c87c:	4621      	mov	r1, r4
  41c87e:	4630      	mov	r0, r6
  41c880:	4b18      	ldr	r3, [pc, #96]	; (41c8e4 <pio_configure_pin+0x120>)
  41c882:	4798      	blx	r3
	return 1;
  41c884:	4638      	mov	r0, r7
		break;
  41c886:	e7d9      	b.n	41c83c <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  41c888:	f004 041f 	and.w	r4, r4, #31
  41c88c:	2701      	movs	r7, #1
  41c88e:	fa07 f404 	lsl.w	r4, r7, r4
  41c892:	4622      	mov	r2, r4
  41c894:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  41c898:	4b11      	ldr	r3, [pc, #68]	; (41c8e0 <pio_configure_pin+0x11c>)
  41c89a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  41c89c:	ea05 0207 	and.w	r2, r5, r7
  41c8a0:	4621      	mov	r1, r4
  41c8a2:	4630      	mov	r0, r6
  41c8a4:	4b0f      	ldr	r3, [pc, #60]	; (41c8e4 <pio_configure_pin+0x120>)
  41c8a6:	4798      	blx	r3
	return 1;
  41c8a8:	4638      	mov	r0, r7
		break;
  41c8aa:	e7c7      	b.n	41c83c <pio_configure_pin+0x78>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  41c8ac:	f004 011f 	and.w	r1, r4, #31
  41c8b0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  41c8b2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  41c8b6:	ea05 0304 	and.w	r3, r5, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  41c8ba:	9300      	str	r3, [sp, #0]
  41c8bc:	f3c5 0380 	ubfx	r3, r5, #2, #1
  41c8c0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  41c8c4:	bf14      	ite	ne
  41c8c6:	2200      	movne	r2, #0
  41c8c8:	2201      	moveq	r2, #1
  41c8ca:	fa04 f101 	lsl.w	r1, r4, r1
  41c8ce:	4630      	mov	r0, r6
  41c8d0:	4d05      	ldr	r5, [pc, #20]	; (41c8e8 <pio_configure_pin+0x124>)
  41c8d2:	47a8      	blx	r5
	return 1;
  41c8d4:	4620      	mov	r0, r4
		break;
  41c8d6:	e7b1      	b.n	41c83c <pio_configure_pin+0x78>
  41c8d8:	0041c79d 	.word	0x0041c79d
  41c8dc:	0041c685 	.word	0x0041c685
  41c8e0:	0041c5ef 	.word	0x0041c5ef
  41c8e4:	0041c5e1 	.word	0x0041c5e1
  41c8e8:	0041c6cd 	.word	0x0041c6cd

0041c8ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  41c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41c8ee:	4604      	mov	r4, r0
  41c8f0:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  41c8f2:	4b11      	ldr	r3, [pc, #68]	; (41c938 <pio_handler_process+0x4c>)
  41c8f4:	4798      	blx	r3
  41c8f6:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  41c8f8:	4620      	mov	r0, r4
  41c8fa:	4b10      	ldr	r3, [pc, #64]	; (41c93c <pio_handler_process+0x50>)
  41c8fc:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  41c8fe:	4005      	ands	r5, r0
  41c900:	d001      	beq.n	41c906 <pio_handler_process+0x1a>
  41c902:	2400      	movs	r4, #0
  41c904:	e003      	b.n	41c90e <pio_handler_process+0x22>
  41c906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  41c908:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
  41c90a:	2c06      	cmp	r4, #6
  41c90c:	d811      	bhi.n	41c932 <pio_handler_process+0x46>
		while (status != 0) {
  41c90e:	b18d      	cbz	r5, 41c934 <pio_handler_process+0x48>
			if (gs_interrupt_sources[i].id == ul_id) {
  41c910:	0123      	lsls	r3, r4, #4
  41c912:	4a0b      	ldr	r2, [pc, #44]	; (41c940 <pio_handler_process+0x54>)
  41c914:	58d0      	ldr	r0, [r2, r3]
  41c916:	42b0      	cmp	r0, r6
  41c918:	d1f6      	bne.n	41c908 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  41c91a:	eb02 1304 	add.w	r3, r2, r4, lsl #4
  41c91e:	6859      	ldr	r1, [r3, #4]
  41c920:	420d      	tst	r5, r1
  41c922:	d0f1      	beq.n	41c908 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  41c924:	461f      	mov	r7, r3
  41c926:	68db      	ldr	r3, [r3, #12]
  41c928:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  41c92a:	687b      	ldr	r3, [r7, #4]
  41c92c:	ea25 0503 	bic.w	r5, r5, r3
  41c930:	e7ea      	b.n	41c908 <pio_handler_process+0x1c>
  41c932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41c934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41c936:	bf00      	nop
  41c938:	0041c795 	.word	0x0041c795
  41c93c:	0041c799 	.word	0x0041c799
  41c940:	204147c4 	.word	0x204147c4

0041c944 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  41c944:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  41c946:	210a      	movs	r1, #10
  41c948:	4801      	ldr	r0, [pc, #4]	; (41c950 <PIOA_Handler+0xc>)
  41c94a:	4b02      	ldr	r3, [pc, #8]	; (41c954 <PIOA_Handler+0x10>)
  41c94c:	4798      	blx	r3
  41c94e:	bd08      	pop	{r3, pc}
  41c950:	400e0e00 	.word	0x400e0e00
  41c954:	0041c8ed 	.word	0x0041c8ed

0041c958 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  41c958:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  41c95a:	210b      	movs	r1, #11
  41c95c:	4801      	ldr	r0, [pc, #4]	; (41c964 <PIOB_Handler+0xc>)
  41c95e:	4b02      	ldr	r3, [pc, #8]	; (41c968 <PIOB_Handler+0x10>)
  41c960:	4798      	blx	r3
  41c962:	bd08      	pop	{r3, pc}
  41c964:	400e1000 	.word	0x400e1000
  41c968:	0041c8ed 	.word	0x0041c8ed

0041c96c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  41c96c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  41c96e:	210c      	movs	r1, #12
  41c970:	4801      	ldr	r0, [pc, #4]	; (41c978 <PIOC_Handler+0xc>)
  41c972:	4b02      	ldr	r3, [pc, #8]	; (41c97c <PIOC_Handler+0x10>)
  41c974:	4798      	blx	r3
  41c976:	bd08      	pop	{r3, pc}
  41c978:	400e1200 	.word	0x400e1200
  41c97c:	0041c8ed 	.word	0x0041c8ed

0041c980 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  41c980:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  41c982:	2110      	movs	r1, #16
  41c984:	4801      	ldr	r0, [pc, #4]	; (41c98c <PIOD_Handler+0xc>)
  41c986:	4b02      	ldr	r3, [pc, #8]	; (41c990 <PIOD_Handler+0x10>)
  41c988:	4798      	blx	r3
  41c98a:	bd08      	pop	{r3, pc}
  41c98c:	400e1400 	.word	0x400e1400
  41c990:	0041c8ed 	.word	0x0041c8ed

0041c994 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  41c994:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  41c996:	2111      	movs	r1, #17
  41c998:	4801      	ldr	r0, [pc, #4]	; (41c9a0 <PIOE_Handler+0xc>)
  41c99a:	4b02      	ldr	r3, [pc, #8]	; (41c9a4 <PIOE_Handler+0x10>)
  41c99c:	4798      	blx	r3
  41c99e:	bd08      	pop	{r3, pc}
  41c9a0:	400e1600 	.word	0x400e1600
  41c9a4:	0041c8ed 	.word	0x0041c8ed

0041c9a8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  41c9a8:	2803      	cmp	r0, #3
  41c9aa:	d010      	beq.n	41c9ce <pmc_mck_set_division+0x26>
  41c9ac:	2804      	cmp	r0, #4
  41c9ae:	d011      	beq.n	41c9d4 <pmc_mck_set_division+0x2c>
  41c9b0:	2802      	cmp	r0, #2
  41c9b2:	d012      	beq.n	41c9da <pmc_mck_set_division+0x32>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  41c9b4:	2300      	movs	r3, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  41c9b6:	490a      	ldr	r1, [pc, #40]	; (41c9e0 <pmc_mck_set_division+0x38>)
  41c9b8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  41c9ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  41c9be:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  41c9c0:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  41c9c2:	4b07      	ldr	r3, [pc, #28]	; (41c9e0 <pmc_mck_set_division+0x38>)
  41c9c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  41c9c6:	f013 0f08 	tst.w	r3, #8
  41c9ca:	d0fa      	beq.n	41c9c2 <pmc_mck_set_division+0x1a>
}
  41c9cc:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  41c9ce:	f44f 7340 	mov.w	r3, #768	; 0x300
			break;
  41c9d2:	e7f0      	b.n	41c9b6 <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  41c9d4:	f44f 7300 	mov.w	r3, #512	; 0x200
			break;
  41c9d8:	e7ed      	b.n	41c9b6 <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  41c9da:	f44f 7380 	mov.w	r3, #256	; 0x100
  41c9de:	e7ea      	b.n	41c9b6 <pmc_mck_set_division+0xe>
  41c9e0:	400e0600 	.word	0x400e0600

0041c9e4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  41c9e4:	4a13      	ldr	r2, [pc, #76]	; (41ca34 <pmc_switch_mck_to_pllack+0x50>)
  41c9e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41c9e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  41c9ec:	4318      	orrs	r0, r3
  41c9ee:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  41c9f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  41c9f4:	4a0f      	ldr	r2, [pc, #60]	; (41ca34 <pmc_switch_mck_to_pllack+0x50>)
  41c9f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
  41c9f8:	f012 0f08 	tst.w	r2, #8
  41c9fc:	d102      	bne.n	41ca04 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  41c9fe:	b1a3      	cbz	r3, 41ca2a <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
  41ca00:	3b01      	subs	r3, #1
  41ca02:	e7f7      	b.n	41c9f4 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  41ca04:	4a0b      	ldr	r2, [pc, #44]	; (41ca34 <pmc_switch_mck_to_pllack+0x50>)
  41ca06:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41ca08:	f023 0303 	bic.w	r3, r3, #3
  41ca0c:	f043 0302 	orr.w	r3, r3, #2
  41ca10:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  41ca12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  41ca16:	4a07      	ldr	r2, [pc, #28]	; (41ca34 <pmc_switch_mck_to_pllack+0x50>)
  41ca18:	6e92      	ldr	r2, [r2, #104]	; 0x68
  41ca1a:	f012 0f08 	tst.w	r2, #8
  41ca1e:	d102      	bne.n	41ca26 <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  41ca20:	b12b      	cbz	r3, 41ca2e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
  41ca22:	3b01      	subs	r3, #1
  41ca24:	e7f7      	b.n	41ca16 <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
  41ca26:	2000      	movs	r0, #0
  41ca28:	4770      	bx	lr
			return 1;
  41ca2a:	2001      	movs	r0, #1
  41ca2c:	4770      	bx	lr
			return 1;
  41ca2e:	2001      	movs	r0, #1
}
  41ca30:	4770      	bx	lr
  41ca32:	bf00      	nop
  41ca34:	400e0600 	.word	0x400e0600

0041ca38 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  41ca38:	b9a0      	cbnz	r0, 41ca64 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  41ca3a:	4a0e      	ldr	r2, [pc, #56]	; (41ca74 <pmc_switch_mainck_to_xtal+0x3c>)
  41ca3c:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  41ca3e:	4b0e      	ldr	r3, [pc, #56]	; (41ca78 <pmc_switch_mainck_to_xtal+0x40>)
  41ca40:	4003      	ands	r3, r0
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  41ca42:	0209      	lsls	r1, r1, #8
  41ca44:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  41ca46:	4319      	orrs	r1, r3
  41ca48:	4b0c      	ldr	r3, [pc, #48]	; (41ca7c <pmc_switch_mainck_to_xtal+0x44>)
  41ca4a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  41ca4c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  41ca4e:	4b09      	ldr	r3, [pc, #36]	; (41ca74 <pmc_switch_mainck_to_xtal+0x3c>)
  41ca50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  41ca52:	f013 0f01 	tst.w	r3, #1
  41ca56:	d0fa      	beq.n	41ca4e <pmc_switch_mainck_to_xtal+0x16>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  41ca58:	4a06      	ldr	r2, [pc, #24]	; (41ca74 <pmc_switch_mainck_to_xtal+0x3c>)
  41ca5a:	6a11      	ldr	r1, [r2, #32]
  41ca5c:	4b08      	ldr	r3, [pc, #32]	; (41ca80 <pmc_switch_mainck_to_xtal+0x48>)
  41ca5e:	430b      	orrs	r3, r1
  41ca60:	6213      	str	r3, [r2, #32]
  41ca62:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  41ca64:	4903      	ldr	r1, [pc, #12]	; (41ca74 <pmc_switch_mainck_to_xtal+0x3c>)
  41ca66:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  41ca68:	4a06      	ldr	r2, [pc, #24]	; (41ca84 <pmc_switch_mainck_to_xtal+0x4c>)
  41ca6a:	401a      	ands	r2, r3
  41ca6c:	4b06      	ldr	r3, [pc, #24]	; (41ca88 <pmc_switch_mainck_to_xtal+0x50>)
  41ca6e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  41ca70:	620b      	str	r3, [r1, #32]
  41ca72:	4770      	bx	lr
  41ca74:	400e0600 	.word	0x400e0600
  41ca78:	ffc8fffc 	.word	0xffc8fffc
  41ca7c:	00370001 	.word	0x00370001
  41ca80:	01370000 	.word	0x01370000
  41ca84:	fec8fffc 	.word	0xfec8fffc
  41ca88:	01370002 	.word	0x01370002

0041ca8c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  41ca8c:	4b02      	ldr	r3, [pc, #8]	; (41ca98 <pmc_osc_is_ready_mainck+0xc>)
  41ca8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  41ca90:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  41ca94:	4770      	bx	lr
  41ca96:	bf00      	nop
  41ca98:	400e0600 	.word	0x400e0600

0041ca9c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  41ca9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  41caa0:	4b01      	ldr	r3, [pc, #4]	; (41caa8 <pmc_disable_pllack+0xc>)
  41caa2:	629a      	str	r2, [r3, #40]	; 0x28
  41caa4:	4770      	bx	lr
  41caa6:	bf00      	nop
  41caa8:	400e0600 	.word	0x400e0600

0041caac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  41caac:	4b02      	ldr	r3, [pc, #8]	; (41cab8 <pmc_is_locked_pllack+0xc>)
  41caae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  41cab0:	f000 0002 	and.w	r0, r0, #2
  41cab4:	4770      	bx	lr
  41cab6:	bf00      	nop
  41cab8:	400e0600 	.word	0x400e0600

0041cabc <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  41cabc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  41cac0:	4b05      	ldr	r3, [pc, #20]	; (41cad8 <pmc_enable_periph_clk+0x1c>)
  41cac2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  41cac6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  41caca:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  41cace:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  41cad2:	2000      	movs	r0, #0
  41cad4:	4770      	bx	lr
  41cad6:	bf00      	nop
  41cad8:	400e0600 	.word	0x400e0600

0041cadc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  41cadc:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  41cade:	4b07      	ldr	r3, [pc, #28]	; (41cafc <spi_enable_clock+0x20>)
  41cae0:	4298      	cmp	r0, r3
  41cae2:	d003      	beq.n	41caec <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  41cae4:	4b06      	ldr	r3, [pc, #24]	; (41cb00 <spi_enable_clock+0x24>)
  41cae6:	4298      	cmp	r0, r3
  41cae8:	d004      	beq.n	41caf4 <spi_enable_clock+0x18>
  41caea:	bd08      	pop	{r3, pc}
  41caec:	2015      	movs	r0, #21
  41caee:	4b05      	ldr	r3, [pc, #20]	; (41cb04 <spi_enable_clock+0x28>)
  41caf0:	4798      	blx	r3
  41caf2:	bd08      	pop	{r3, pc}
  41caf4:	202a      	movs	r0, #42	; 0x2a
  41caf6:	4b03      	ldr	r3, [pc, #12]	; (41cb04 <spi_enable_clock+0x28>)
  41caf8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  41cafa:	e7f6      	b.n	41caea <spi_enable_clock+0xe>
  41cafc:	40008000 	.word	0x40008000
  41cb00:	40058000 	.word	0x40058000
  41cb04:	0041cabd 	.word	0x0041cabd

0041cb08 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  41cb08:	6843      	ldr	r3, [r0, #4]
  41cb0a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  41cb0e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  41cb10:	6843      	ldr	r3, [r0, #4]
  41cb12:	0409      	lsls	r1, r1, #16
  41cb14:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  41cb18:	430b      	orrs	r3, r1
  41cb1a:	6043      	str	r3, [r0, #4]
  41cb1c:	4770      	bx	lr

0041cb1e <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  41cb1e:	6843      	ldr	r3, [r0, #4]
  41cb20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  41cb24:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  41cb26:	6843      	ldr	r3, [r0, #4]
  41cb28:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  41cb2c:	6041      	str	r1, [r0, #4]
  41cb2e:	4770      	bx	lr

0041cb30 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  41cb30:	b93a      	cbnz	r2, 41cb42 <spi_set_clock_polarity+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  41cb32:	310c      	adds	r1, #12
  41cb34:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cb38:	f023 0301 	bic.w	r3, r3, #1
  41cb3c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41cb40:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  41cb42:	310c      	adds	r1, #12
  41cb44:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cb48:	f043 0301 	orr.w	r3, r3, #1
  41cb4c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41cb50:	4770      	bx	lr

0041cb52 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  41cb52:	b93a      	cbnz	r2, 41cb64 <spi_set_clock_phase+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  41cb54:	310c      	adds	r1, #12
  41cb56:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cb5a:	f023 0302 	bic.w	r3, r3, #2
  41cb5e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41cb62:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  41cb64:	310c      	adds	r1, #12
  41cb66:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cb6a:	f043 0302 	orr.w	r3, r3, #2
  41cb6e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41cb72:	4770      	bx	lr

0041cb74 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  41cb74:	2a04      	cmp	r2, #4
  41cb76:	d003      	beq.n	41cb80 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  41cb78:	b182      	cbz	r2, 41cb9c <spi_configure_cs_behavior+0x28>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  41cb7a:	2a08      	cmp	r2, #8
  41cb7c:	d01c      	beq.n	41cbb8 <spi_configure_cs_behavior+0x44>
  41cb7e:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  41cb80:	310c      	adds	r1, #12
  41cb82:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cb86:	f023 0308 	bic.w	r3, r3, #8
  41cb8a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  41cb8e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cb92:	f043 0304 	orr.w	r3, r3, #4
  41cb96:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41cb9a:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  41cb9c:	310c      	adds	r1, #12
  41cb9e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cba2:	f023 0308 	bic.w	r3, r3, #8
  41cba6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  41cbaa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cbae:	f023 0304 	bic.w	r3, r3, #4
  41cbb2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41cbb6:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  41cbb8:	310c      	adds	r1, #12
  41cbba:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cbbe:	f043 0308 	orr.w	r3, r3, #8
  41cbc2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
  41cbc6:	e7da      	b.n	41cb7e <spi_configure_cs_behavior+0xa>

0041cbc8 <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  41cbc8:	310c      	adds	r1, #12
  41cbca:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cbce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  41cbd2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  41cbd6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cbda:	431a      	orrs	r2, r3
  41cbdc:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  41cbe0:	4770      	bx	lr

0041cbe2 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  41cbe2:	4401      	add	r1, r0
  41cbe4:	3901      	subs	r1, #1
  41cbe6:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  41cbea:	1e43      	subs	r3, r0, #1
  41cbec:	2bfe      	cmp	r3, #254	; 0xfe
  41cbee:	d801      	bhi.n	41cbf4 <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
  41cbf0:	b200      	sxth	r0, r0
  41cbf2:	4770      	bx	lr
		return -1;
  41cbf4:	f04f 30ff 	mov.w	r0, #4294967295
}
  41cbf8:	4770      	bx	lr

0041cbfa <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  41cbfa:	b192      	cbz	r2, 41cc22 <spi_set_baudrate_div+0x28>
{
  41cbfc:	b410      	push	{r4}
  41cbfe:	4614      	mov	r4, r2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  41cc00:	310c      	adds	r1, #12
  41cc02:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41cc06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  41cc0a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  41cc0e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
  41cc12:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  41cc16:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    return 0;
  41cc1a:	2000      	movs	r0, #0
}
  41cc1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  41cc20:	4770      	bx	lr
        return -1;
  41cc22:	f04f 30ff 	mov.w	r0, #4294967295
  41cc26:	4770      	bx	lr

0041cc28 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  41cc28:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  41cc2a:	310c      	adds	r1, #12
  41cc2c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  41cc30:	b2a4      	uxth	r4, r4
  41cc32:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  41cc36:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
  41cc3a:	061b      	lsls	r3, r3, #24
  41cc3c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  41cc40:	4314      	orrs	r4, r2
  41cc42:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
  41cc46:	f85d 4b04 	ldr.w	r4, [sp], #4
  41cc4a:	4770      	bx	lr

0041cc4c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  41cc4c:	6943      	ldr	r3, [r0, #20]
  41cc4e:	f013 0f02 	tst.w	r3, #2
  41cc52:	d002      	beq.n	41cc5a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  41cc54:	61c1      	str	r1, [r0, #28]
	return 0;
  41cc56:	2000      	movs	r0, #0
  41cc58:	4770      	bx	lr
		return 1;
  41cc5a:	2001      	movs	r0, #1
}
  41cc5c:	4770      	bx	lr

0041cc5e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  41cc5e:	6943      	ldr	r3, [r0, #20]
  41cc60:	f013 0f01 	tst.w	r3, #1
  41cc64:	d003      	beq.n	41cc6e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  41cc66:	6983      	ldr	r3, [r0, #24]
  41cc68:	700b      	strb	r3, [r1, #0]
	return 0;
  41cc6a:	2000      	movs	r0, #0
  41cc6c:	4770      	bx	lr
		return 1;
  41cc6e:	2001      	movs	r0, #1
}
  41cc70:	4770      	bx	lr

0041cc72 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  41cc72:	b430      	push	{r4, r5}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  41cc74:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
  41cc78:	d317      	bcc.n	41ccaa <usart_set_async_baudrate+0x38>
		over = HIGH_FRQ_SAMPLE_DIV;
  41cc7a:	2410      	movs	r4, #16
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  41cc7c:	fb01 f104 	mul.w	r1, r1, r4
  41cc80:	084b      	lsrs	r3, r1, #1
  41cc82:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  41cc86:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  41cc8a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  41cc8c:	1e5d      	subs	r5, r3, #1
  41cc8e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  41cc92:	428d      	cmp	r5, r1
  41cc94:	d810      	bhi.n	41ccb8 <usart_set_async_baudrate+0x46>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  41cc96:	2c08      	cmp	r4, #8
  41cc98:	d009      	beq.n	41ccae <usart_set_async_baudrate+0x3c>
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  41cc9a:	0412      	lsls	r2, r2, #16
  41cc9c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  41cca0:	431a      	orrs	r2, r3
  41cca2:	6202      	str	r2, [r0, #32]

	return 0;
  41cca4:	2000      	movs	r0, #0
}
  41cca6:	bc30      	pop	{r4, r5}
  41cca8:	4770      	bx	lr
		over = LOW_FRQ_SAMPLE_DIV;
  41ccaa:	2408      	movs	r4, #8
  41ccac:	e7e6      	b.n	41cc7c <usart_set_async_baudrate+0xa>
		p_usart->US_MR |= US_MR_OVER;
  41ccae:	6841      	ldr	r1, [r0, #4]
  41ccb0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  41ccb4:	6041      	str	r1, [r0, #4]
  41ccb6:	e7f0      	b.n	41cc9a <usart_set_async_baudrate+0x28>
		return 1;
  41ccb8:	2001      	movs	r0, #1
  41ccba:	e7f4      	b.n	41cca6 <usart_set_async_baudrate+0x34>

0041ccbc <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  41ccbc:	2340      	movs	r3, #64	; 0x40
  41ccbe:	6003      	str	r3, [r0, #0]
  41ccc0:	4770      	bx	lr

0041ccc2 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  41ccc2:	2388      	movs	r3, #136	; 0x88
  41ccc4:	6003      	str	r3, [r0, #0]
  41ccc6:	4770      	bx	lr

0041ccc8 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  41ccc8:	2310      	movs	r3, #16
  41ccca:	6003      	str	r3, [r0, #0]
  41cccc:	4770      	bx	lr

0041ccce <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  41ccce:	2324      	movs	r3, #36	; 0x24
  41ccd0:	6003      	str	r3, [r0, #0]
  41ccd2:	4770      	bx	lr

0041ccd4 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  41ccd4:	f44f 7380 	mov.w	r3, #256	; 0x100
  41ccd8:	6003      	str	r3, [r0, #0]
  41ccda:	4770      	bx	lr

0041ccdc <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  41ccdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  41cce0:	6003      	str	r3, [r0, #0]
  41cce2:	4770      	bx	lr

0041cce4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  41cce4:	6943      	ldr	r3, [r0, #20]
  41cce6:	f013 0f02 	tst.w	r3, #2
  41ccea:	d004      	beq.n	41ccf6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  41ccec:	f3c1 0108 	ubfx	r1, r1, #0, #9
  41ccf0:	61c1      	str	r1, [r0, #28]
	return 0;
  41ccf2:	2000      	movs	r0, #0
  41ccf4:	4770      	bx	lr
		return 1;
  41ccf6:	2001      	movs	r0, #1
}
  41ccf8:	4770      	bx	lr

0041ccfa <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  41ccfa:	6943      	ldr	r3, [r0, #20]
  41ccfc:	f013 0f01 	tst.w	r3, #1
  41cd00:	d005      	beq.n	41cd0e <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  41cd02:	6983      	ldr	r3, [r0, #24]
  41cd04:	f3c3 0308 	ubfx	r3, r3, #0, #9
  41cd08:	600b      	str	r3, [r1, #0]

	return 0;
  41cd0a:	2000      	movs	r0, #0
  41cd0c:	4770      	bx	lr
		return 1;
  41cd0e:	2001      	movs	r0, #1
}
  41cd10:	4770      	bx	lr
	...

0041cd14 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  41cd14:	4b01      	ldr	r3, [pc, #4]	; (41cd1c <usart_disable_writeprotect+0x8>)
  41cd16:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  41cd1a:	4770      	bx	lr
  41cd1c:	55534100 	.word	0x55534100

0041cd20 <usart_reset>:
{
  41cd20:	b510      	push	{r4, lr}
  41cd22:	4604      	mov	r4, r0
	usart_disable_writeprotect(p_usart);
  41cd24:	4b09      	ldr	r3, [pc, #36]	; (41cd4c <usart_reset+0x2c>)
  41cd26:	4798      	blx	r3
	p_usart->US_MR = 0;
  41cd28:	2300      	movs	r3, #0
  41cd2a:	6063      	str	r3, [r4, #4]
	p_usart->US_RTOR = 0;
  41cd2c:	6263      	str	r3, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
  41cd2e:	62a3      	str	r3, [r4, #40]	; 0x28
	usart_reset_tx(p_usart);
  41cd30:	4620      	mov	r0, r4
  41cd32:	4b07      	ldr	r3, [pc, #28]	; (41cd50 <usart_reset+0x30>)
  41cd34:	4798      	blx	r3
	usart_reset_rx(p_usart);
  41cd36:	4620      	mov	r0, r4
  41cd38:	4b06      	ldr	r3, [pc, #24]	; (41cd54 <usart_reset+0x34>)
  41cd3a:	4798      	blx	r3
	usart_reset_status(p_usart);
  41cd3c:	4620      	mov	r0, r4
  41cd3e:	4b06      	ldr	r3, [pc, #24]	; (41cd58 <usart_reset+0x38>)
  41cd40:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
  41cd42:	4620      	mov	r0, r4
  41cd44:	4b05      	ldr	r3, [pc, #20]	; (41cd5c <usart_reset+0x3c>)
  41cd46:	4798      	blx	r3
  41cd48:	bd10      	pop	{r4, pc}
  41cd4a:	bf00      	nop
  41cd4c:	0041cd15 	.word	0x0041cd15
  41cd50:	0041ccc3 	.word	0x0041ccc3
  41cd54:	0041cccf 	.word	0x0041cccf
  41cd58:	0041ccd5 	.word	0x0041ccd5
  41cd5c:	0041ccdd 	.word	0x0041ccdd

0041cd60 <usart_init_rs232>:
{
  41cd60:	b570      	push	{r4, r5, r6, lr}
  41cd62:	4605      	mov	r5, r0
  41cd64:	460c      	mov	r4, r1
  41cd66:	4616      	mov	r6, r2
	usart_reset(p_usart);
  41cd68:	4b10      	ldr	r3, [pc, #64]	; (41cdac <usart_init_rs232+0x4c>)
  41cd6a:	4798      	blx	r3
	ul_reg_val = 0;
  41cd6c:	2200      	movs	r2, #0
  41cd6e:	4b10      	ldr	r3, [pc, #64]	; (41cdb0 <usart_init_rs232+0x50>)
  41cd70:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  41cd72:	b1b4      	cbz	r4, 41cda2 <usart_init_rs232+0x42>
  41cd74:	4632      	mov	r2, r6
  41cd76:	6821      	ldr	r1, [r4, #0]
  41cd78:	4628      	mov	r0, r5
  41cd7a:	4b0e      	ldr	r3, [pc, #56]	; (41cdb4 <usart_init_rs232+0x54>)
  41cd7c:	4798      	blx	r3
  41cd7e:	4602      	mov	r2, r0
  41cd80:	b988      	cbnz	r0, 41cda6 <usart_init_rs232+0x46>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  41cd82:	6863      	ldr	r3, [r4, #4]
  41cd84:	68a1      	ldr	r1, [r4, #8]
  41cd86:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  41cd88:	6921      	ldr	r1, [r4, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  41cd8a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  41cd8c:	68e1      	ldr	r1, [r4, #12]
  41cd8e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  41cd90:	4907      	ldr	r1, [pc, #28]	; (41cdb0 <usart_init_rs232+0x50>)
  41cd92:	6808      	ldr	r0, [r1, #0]
  41cd94:	4303      	orrs	r3, r0
  41cd96:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  41cd98:	6869      	ldr	r1, [r5, #4]
  41cd9a:	430b      	orrs	r3, r1
  41cd9c:	606b      	str	r3, [r5, #4]
}
  41cd9e:	4610      	mov	r0, r2
  41cda0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  41cda2:	2201      	movs	r2, #1
  41cda4:	e7fb      	b.n	41cd9e <usart_init_rs232+0x3e>
  41cda6:	2201      	movs	r2, #1
  41cda8:	e7f9      	b.n	41cd9e <usart_init_rs232+0x3e>
  41cdaa:	bf00      	nop
  41cdac:	0041cd21 	.word	0x0041cd21
  41cdb0:	20414834 	.word	0x20414834
  41cdb4:	0041cc73 	.word	0x0041cc73

0041cdb8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  41cdb8:	e7fe      	b.n	41cdb8 <Dummy_Handler>
	...

0041cdbc <Reset_Handler>:
{
  41cdbc:	b500      	push	{lr}
  41cdbe:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  41cdc0:	4b1e      	ldr	r3, [pc, #120]	; (41ce3c <Reset_Handler+0x80>)
  41cdc2:	4a1f      	ldr	r2, [pc, #124]	; (41ce40 <Reset_Handler+0x84>)
  41cdc4:	429a      	cmp	r2, r3
  41cdc6:	d009      	beq.n	41cddc <Reset_Handler+0x20>
  41cdc8:	4b1c      	ldr	r3, [pc, #112]	; (41ce3c <Reset_Handler+0x80>)
  41cdca:	4a1d      	ldr	r2, [pc, #116]	; (41ce40 <Reset_Handler+0x84>)
  41cdcc:	e003      	b.n	41cdd6 <Reset_Handler+0x1a>
                        *pDest++ = *pSrc++;
  41cdce:	6811      	ldr	r1, [r2, #0]
  41cdd0:	6019      	str	r1, [r3, #0]
  41cdd2:	3304      	adds	r3, #4
  41cdd4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  41cdd6:	491b      	ldr	r1, [pc, #108]	; (41ce44 <Reset_Handler+0x88>)
  41cdd8:	428b      	cmp	r3, r1
  41cdda:	d3f8      	bcc.n	41cdce <Reset_Handler+0x12>
                        *pDest++ = *pSrc++;
  41cddc:	4b1a      	ldr	r3, [pc, #104]	; (41ce48 <Reset_Handler+0x8c>)
  41cdde:	e002      	b.n	41cde6 <Reset_Handler+0x2a>
                *pDest++ = 0;
  41cde0:	2200      	movs	r2, #0
  41cde2:	601a      	str	r2, [r3, #0]
  41cde4:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  41cde6:	4a19      	ldr	r2, [pc, #100]	; (41ce4c <Reset_Handler+0x90>)
  41cde8:	4293      	cmp	r3, r2
  41cdea:	d3f9      	bcc.n	41cde0 <Reset_Handler+0x24>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  41cdec:	4a18      	ldr	r2, [pc, #96]	; (41ce50 <Reset_Handler+0x94>)
  41cdee:	4b19      	ldr	r3, [pc, #100]	; (41ce54 <Reset_Handler+0x98>)
  41cdf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  41cdf4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  41cdf6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  41cdfa:	fab3 f383 	clz	r3, r3
  41cdfe:	095b      	lsrs	r3, r3, #5
  41ce00:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  41ce02:	b672      	cpsid	i
  __ASM volatile ("dmb");
  41ce04:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  41ce08:	2200      	movs	r2, #0
  41ce0a:	4b13      	ldr	r3, [pc, #76]	; (41ce58 <Reset_Handler+0x9c>)
  41ce0c:	701a      	strb	r2, [r3, #0]
	return flags;
  41ce0e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  41ce10:	4a12      	ldr	r2, [pc, #72]	; (41ce5c <Reset_Handler+0xa0>)
  41ce12:	6813      	ldr	r3, [r2, #0]
  41ce14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  41ce18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  41ce1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41ce1e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  41ce22:	b129      	cbz	r1, 41ce30 <Reset_Handler+0x74>
		cpu_irq_enable();
  41ce24:	2201      	movs	r2, #1
  41ce26:	4b0c      	ldr	r3, [pc, #48]	; (41ce58 <Reset_Handler+0x9c>)
  41ce28:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  41ce2a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  41ce2e:	b662      	cpsie	i
        __libc_init_array();
  41ce30:	4b0b      	ldr	r3, [pc, #44]	; (41ce60 <Reset_Handler+0xa4>)
  41ce32:	4798      	blx	r3
        main();
  41ce34:	4b0b      	ldr	r3, [pc, #44]	; (41ce64 <Reset_Handler+0xa8>)
  41ce36:	4798      	blx	r3
  41ce38:	e7fe      	b.n	41ce38 <Reset_Handler+0x7c>
  41ce3a:	bf00      	nop
  41ce3c:	20400000 	.word	0x20400000
  41ce40:	004577d0 	.word	0x004577d0
  41ce44:	20400a10 	.word	0x20400a10
  41ce48:	20400a10 	.word	0x20400a10
  41ce4c:	2043a32c 	.word	0x2043a32c
  41ce50:	e000ed00 	.word	0xe000ed00
  41ce54:	00400000 	.word	0x00400000
  41ce58:	20400058 	.word	0x20400058
  41ce5c:	e000ed88 	.word	0xe000ed88
  41ce60:	0041e171 	.word	0x0041e171
  41ce64:	0041d3ed 	.word	0x0041d3ed

0041ce68 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  41ce68:	4b3c      	ldr	r3, [pc, #240]	; (41cf5c <SystemCoreClockUpdate+0xf4>)
  41ce6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  41ce6c:	f003 0303 	and.w	r3, r3, #3
  41ce70:	2b01      	cmp	r3, #1
  41ce72:	d020      	beq.n	41ceb6 <SystemCoreClockUpdate+0x4e>
  41ce74:	b183      	cbz	r3, 41ce98 <SystemCoreClockUpdate+0x30>
  41ce76:	2b02      	cmp	r3, #2
  41ce78:	d039      	beq.n	41ceee <SystemCoreClockUpdate+0x86>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  41ce7a:	4b38      	ldr	r3, [pc, #224]	; (41cf5c <SystemCoreClockUpdate+0xf4>)
  41ce7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  41ce7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  41ce82:	2b70      	cmp	r3, #112	; 0x70
  41ce84:	d062      	beq.n	41cf4c <SystemCoreClockUpdate+0xe4>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  41ce86:	4b35      	ldr	r3, [pc, #212]	; (41cf5c <SystemCoreClockUpdate+0xf4>)
  41ce88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  41ce8a:	f3c2 1202 	ubfx	r2, r2, #4, #3
  41ce8e:	4934      	ldr	r1, [pc, #208]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41ce90:	680b      	ldr	r3, [r1, #0]
  41ce92:	40d3      	lsrs	r3, r2
  41ce94:	600b      	str	r3, [r1, #0]
  41ce96:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  41ce98:	4b32      	ldr	r3, [pc, #200]	; (41cf64 <SystemCoreClockUpdate+0xfc>)
  41ce9a:	695b      	ldr	r3, [r3, #20]
  41ce9c:	f013 0f80 	tst.w	r3, #128	; 0x80
  41cea0:	d004      	beq.n	41ceac <SystemCoreClockUpdate+0x44>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  41cea2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  41cea6:	4b2e      	ldr	r3, [pc, #184]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cea8:	601a      	str	r2, [r3, #0]
  41ceaa:	e7e6      	b.n	41ce7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  41ceac:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  41ceb0:	4b2b      	ldr	r3, [pc, #172]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41ceb2:	601a      	str	r2, [r3, #0]
  41ceb4:	e7e1      	b.n	41ce7a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  41ceb6:	4b29      	ldr	r3, [pc, #164]	; (41cf5c <SystemCoreClockUpdate+0xf4>)
  41ceb8:	6a1b      	ldr	r3, [r3, #32]
  41ceba:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  41cebe:	d003      	beq.n	41cec8 <SystemCoreClockUpdate+0x60>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  41cec0:	4a29      	ldr	r2, [pc, #164]	; (41cf68 <SystemCoreClockUpdate+0x100>)
  41cec2:	4b27      	ldr	r3, [pc, #156]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cec4:	601a      	str	r2, [r3, #0]
  41cec6:	e7d8      	b.n	41ce7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  41cec8:	4a28      	ldr	r2, [pc, #160]	; (41cf6c <SystemCoreClockUpdate+0x104>)
  41ceca:	4b25      	ldr	r3, [pc, #148]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cecc:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  41cece:	4b23      	ldr	r3, [pc, #140]	; (41cf5c <SystemCoreClockUpdate+0xf4>)
  41ced0:	6a1b      	ldr	r3, [r3, #32]
  41ced2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  41ced6:	2b10      	cmp	r3, #16
  41ced8:	d005      	beq.n	41cee6 <SystemCoreClockUpdate+0x7e>
  41ceda:	2b20      	cmp	r3, #32
  41cedc:	d1cd      	bne.n	41ce7a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  41cede:	4a22      	ldr	r2, [pc, #136]	; (41cf68 <SystemCoreClockUpdate+0x100>)
  41cee0:	4b1f      	ldr	r3, [pc, #124]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cee2:	601a      	str	r2, [r3, #0]
          break;
  41cee4:	e7c9      	b.n	41ce7a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  41cee6:	4a22      	ldr	r2, [pc, #136]	; (41cf70 <SystemCoreClockUpdate+0x108>)
  41cee8:	4b1d      	ldr	r3, [pc, #116]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41ceea:	601a      	str	r2, [r3, #0]
          break;
  41ceec:	e7c5      	b.n	41ce7a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  41ceee:	4b1b      	ldr	r3, [pc, #108]	; (41cf5c <SystemCoreClockUpdate+0xf4>)
  41cef0:	6a1b      	ldr	r3, [r3, #32]
  41cef2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  41cef6:	d016      	beq.n	41cf26 <SystemCoreClockUpdate+0xbe>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  41cef8:	4a1b      	ldr	r2, [pc, #108]	; (41cf68 <SystemCoreClockUpdate+0x100>)
  41cefa:	4b19      	ldr	r3, [pc, #100]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cefc:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  41cefe:	4b17      	ldr	r3, [pc, #92]	; (41cf5c <SystemCoreClockUpdate+0xf4>)
  41cf00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  41cf02:	f003 0303 	and.w	r3, r3, #3
  41cf06:	2b02      	cmp	r3, #2
  41cf08:	d1b7      	bne.n	41ce7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  41cf0a:	4814      	ldr	r0, [pc, #80]	; (41cf5c <SystemCoreClockUpdate+0xf4>)
  41cf0c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  41cf0e:	f3c2 420a 	ubfx	r2, r2, #16, #11
  41cf12:	4913      	ldr	r1, [pc, #76]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cf14:	680b      	ldr	r3, [r1, #0]
  41cf16:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  41cf1a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  41cf1c:	b2d2      	uxtb	r2, r2
  41cf1e:	fbb3 f3f2 	udiv	r3, r3, r2
  41cf22:	600b      	str	r3, [r1, #0]
  41cf24:	e7a9      	b.n	41ce7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  41cf26:	4a11      	ldr	r2, [pc, #68]	; (41cf6c <SystemCoreClockUpdate+0x104>)
  41cf28:	4b0d      	ldr	r3, [pc, #52]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cf2a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  41cf2c:	4b0b      	ldr	r3, [pc, #44]	; (41cf5c <SystemCoreClockUpdate+0xf4>)
  41cf2e:	6a1b      	ldr	r3, [r3, #32]
  41cf30:	f003 0370 	and.w	r3, r3, #112	; 0x70
  41cf34:	2b10      	cmp	r3, #16
  41cf36:	d005      	beq.n	41cf44 <SystemCoreClockUpdate+0xdc>
  41cf38:	2b20      	cmp	r3, #32
  41cf3a:	d1e0      	bne.n	41cefe <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 3U;
  41cf3c:	4a0a      	ldr	r2, [pc, #40]	; (41cf68 <SystemCoreClockUpdate+0x100>)
  41cf3e:	4b08      	ldr	r3, [pc, #32]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cf40:	601a      	str	r2, [r3, #0]
          break;
  41cf42:	e7dc      	b.n	41cefe <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 2U;
  41cf44:	4a0a      	ldr	r2, [pc, #40]	; (41cf70 <SystemCoreClockUpdate+0x108>)
  41cf46:	4b06      	ldr	r3, [pc, #24]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cf48:	601a      	str	r2, [r3, #0]
          break;
  41cf4a:	e7d8      	b.n	41cefe <SystemCoreClockUpdate+0x96>
    SystemCoreClock /= 3U;
  41cf4c:	4a04      	ldr	r2, [pc, #16]	; (41cf60 <SystemCoreClockUpdate+0xf8>)
  41cf4e:	6813      	ldr	r3, [r2, #0]
  41cf50:	4908      	ldr	r1, [pc, #32]	; (41cf74 <SystemCoreClockUpdate+0x10c>)
  41cf52:	fba1 1303 	umull	r1, r3, r1, r3
  41cf56:	085b      	lsrs	r3, r3, #1
  41cf58:	6013      	str	r3, [r2, #0]
  41cf5a:	4770      	bx	lr
  41cf5c:	400e0600 	.word	0x400e0600
  41cf60:	2040005c 	.word	0x2040005c
  41cf64:	400e1810 	.word	0x400e1810
  41cf68:	00b71b00 	.word	0x00b71b00
  41cf6c:	003d0900 	.word	0x003d0900
  41cf70:	007a1200 	.word	0x007a1200
  41cf74:	aaaaaaab 	.word	0xaaaaaaab

0041cf78 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  41cf78:	4b17      	ldr	r3, [pc, #92]	; (41cfd8 <system_init_flash+0x60>)
  41cf7a:	4298      	cmp	r0, r3
  41cf7c:	d912      	bls.n	41cfa4 <system_init_flash+0x2c>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  41cf7e:	4b17      	ldr	r3, [pc, #92]	; (41cfdc <system_init_flash+0x64>)
  41cf80:	4298      	cmp	r0, r3
  41cf82:	d914      	bls.n	41cfae <system_init_flash+0x36>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  41cf84:	4b16      	ldr	r3, [pc, #88]	; (41cfe0 <system_init_flash+0x68>)
  41cf86:	4298      	cmp	r0, r3
  41cf88:	d915      	bls.n	41cfb6 <system_init_flash+0x3e>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  41cf8a:	4b16      	ldr	r3, [pc, #88]	; (41cfe4 <system_init_flash+0x6c>)
  41cf8c:	4298      	cmp	r0, r3
  41cf8e:	d916      	bls.n	41cfbe <system_init_flash+0x46>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  41cf90:	4b15      	ldr	r3, [pc, #84]	; (41cfe8 <system_init_flash+0x70>)
  41cf92:	4298      	cmp	r0, r3
  41cf94:	d917      	bls.n	41cfc6 <system_init_flash+0x4e>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  41cf96:	4b15      	ldr	r3, [pc, #84]	; (41cfec <system_init_flash+0x74>)
  41cf98:	4298      	cmp	r0, r3
  41cf9a:	d919      	bls.n	41cfd0 <system_init_flash+0x58>
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  41cf9c:	4a14      	ldr	r2, [pc, #80]	; (41cff0 <system_init_flash+0x78>)
  41cf9e:	4b15      	ldr	r3, [pc, #84]	; (41cff4 <system_init_flash+0x7c>)
  41cfa0:	601a      	str	r2, [r3, #0]
  41cfa2:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  41cfa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  41cfa8:	4b12      	ldr	r3, [pc, #72]	; (41cff4 <system_init_flash+0x7c>)
  41cfaa:	601a      	str	r2, [r3, #0]
  41cfac:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  41cfae:	4a12      	ldr	r2, [pc, #72]	; (41cff8 <system_init_flash+0x80>)
  41cfb0:	4b10      	ldr	r3, [pc, #64]	; (41cff4 <system_init_flash+0x7c>)
  41cfb2:	601a      	str	r2, [r3, #0]
  41cfb4:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  41cfb6:	4a11      	ldr	r2, [pc, #68]	; (41cffc <system_init_flash+0x84>)
  41cfb8:	4b0e      	ldr	r3, [pc, #56]	; (41cff4 <system_init_flash+0x7c>)
  41cfba:	601a      	str	r2, [r3, #0]
  41cfbc:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  41cfbe:	4a10      	ldr	r2, [pc, #64]	; (41d000 <system_init_flash+0x88>)
  41cfc0:	4b0c      	ldr	r3, [pc, #48]	; (41cff4 <system_init_flash+0x7c>)
  41cfc2:	601a      	str	r2, [r3, #0]
  41cfc4:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  41cfc6:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  41cfca:	4b0a      	ldr	r3, [pc, #40]	; (41cff4 <system_init_flash+0x7c>)
  41cfcc:	601a      	str	r2, [r3, #0]
  41cfce:	4770      	bx	lr
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  41cfd0:	4a0c      	ldr	r2, [pc, #48]	; (41d004 <system_init_flash+0x8c>)
  41cfd2:	4b08      	ldr	r3, [pc, #32]	; (41cff4 <system_init_flash+0x7c>)
  41cfd4:	601a      	str	r2, [r3, #0]
  41cfd6:	4770      	bx	lr
  41cfd8:	015ef3bf 	.word	0x015ef3bf
  41cfdc:	02bde77f 	.word	0x02bde77f
  41cfe0:	041cdb3f 	.word	0x041cdb3f
  41cfe4:	057bceff 	.word	0x057bceff
  41cfe8:	06dac2bf 	.word	0x06dac2bf
  41cfec:	0839b67f 	.word	0x0839b67f
  41cff0:	04000600 	.word	0x04000600
  41cff4:	400e0c00 	.word	0x400e0c00
  41cff8:	04000100 	.word	0x04000100
  41cffc:	04000200 	.word	0x04000200
  41d000:	04000300 	.word	0x04000300
  41d004:	04000500 	.word	0x04000500

0041d008 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  41d008:	4b0a      	ldr	r3, [pc, #40]	; (41d034 <_sbrk+0x2c>)
  41d00a:	681b      	ldr	r3, [r3, #0]
  41d00c:	b153      	cbz	r3, 41d024 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  41d00e:	4b09      	ldr	r3, [pc, #36]	; (41d034 <_sbrk+0x2c>)
  41d010:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  41d012:	181a      	adds	r2, r3, r0
  41d014:	4908      	ldr	r1, [pc, #32]	; (41d038 <_sbrk+0x30>)
  41d016:	4291      	cmp	r1, r2
  41d018:	db08      	blt.n	41d02c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  41d01a:	4610      	mov	r0, r2
  41d01c:	4a05      	ldr	r2, [pc, #20]	; (41d034 <_sbrk+0x2c>)
  41d01e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  41d020:	4618      	mov	r0, r3
  41d022:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  41d024:	4a05      	ldr	r2, [pc, #20]	; (41d03c <_sbrk+0x34>)
  41d026:	4b03      	ldr	r3, [pc, #12]	; (41d034 <_sbrk+0x2c>)
  41d028:	601a      	str	r2, [r3, #0]
  41d02a:	e7f0      	b.n	41d00e <_sbrk+0x6>
		return (caddr_t) -1;	
  41d02c:	f04f 30ff 	mov.w	r0, #4294967295
}
  41d030:	4770      	bx	lr
  41d032:	bf00      	nop
  41d034:	20414838 	.word	0x20414838
  41d038:	2045fffc 	.word	0x2045fffc
  41d03c:	2043c530 	.word	0x2043c530

0041d040 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  41d040:	f04f 30ff 	mov.w	r0, #4294967295
  41d044:	4770      	bx	lr

0041d046 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  41d046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  41d04a:	604b      	str	r3, [r1, #4]

	return 0;
}
  41d04c:	2000      	movs	r0, #0
  41d04e:	4770      	bx	lr

0041d050 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  41d050:	2001      	movs	r0, #1
  41d052:	4770      	bx	lr

0041d054 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  41d054:	2000      	movs	r0, #0
  41d056:	4770      	bx	lr

0041d058 <my_flush_cb>:

/************************************************************************/
/* port lvgl                                                            */
/************************************************************************/

void my_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p) {
  41d058:	b570      	push	{r4, r5, r6, lr}
  41d05a:	4605      	mov	r5, r0
  41d05c:	460c      	mov	r4, r1
  41d05e:	4616      	mov	r6, r2
  ili9341_set_top_left_limit(area->x1, area->y1);   ili9341_set_bottom_right_limit(area->x2, area->y2);
  41d060:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  41d064:	f9b4 0000 	ldrsh.w	r0, [r4]
  41d068:	4b0d      	ldr	r3, [pc, #52]	; (41d0a0 <my_flush_cb+0x48>)
  41d06a:	4798      	blx	r3
  41d06c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  41d070:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  41d074:	4b0b      	ldr	r3, [pc, #44]	; (41d0a4 <my_flush_cb+0x4c>)
  41d076:	4798      	blx	r3
  ili9341_copy_pixels_to_screen(color_p,  (area->x2 - area->x1) * (area->y2 - area->y1));
  41d078:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41d07c:	f9b4 1000 	ldrsh.w	r1, [r4]
  41d080:	1a5b      	subs	r3, r3, r1
  41d082:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  41d086:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  41d08a:	1a89      	subs	r1, r1, r2
  41d08c:	fb01 f103 	mul.w	r1, r1, r3
  41d090:	4630      	mov	r0, r6
  41d092:	4b05      	ldr	r3, [pc, #20]	; (41d0a8 <my_flush_cb+0x50>)
  41d094:	4798      	blx	r3
  
  /* IMPORTANT!!!
  * Inform the graphics library that you are ready with the flushing*/
  lv_disp_flush_ready(disp_drv);
  41d096:	4628      	mov	r0, r5
  41d098:	4b04      	ldr	r3, [pc, #16]	; (41d0ac <my_flush_cb+0x54>)
  41d09a:	4798      	blx	r3
  41d09c:	bd70      	pop	{r4, r5, r6, pc}
  41d09e:	bf00      	nop
  41d0a0:	00400c55 	.word	0x00400c55
  41d0a4:	00400c75 	.word	0x00400c75
  41d0a8:	00400cc5 	.word	0x00400cc5
  41d0ac:	0041400d 	.word	0x0041400d

0041d0b0 <my_input_read>:
}

bool my_input_read(lv_indev_drv_t * drv, lv_indev_data_t*data) {
  41d0b0:	b510      	push	{r4, lr}
  41d0b2:	b082      	sub	sp, #8
  41d0b4:	460c      	mov	r4, r1
  int px, py, pressed;
  
  if (readPoint(&px, &py)) {
  41d0b6:	4669      	mov	r1, sp
  41d0b8:	a801      	add	r0, sp, #4
  41d0ba:	4b07      	ldr	r3, [pc, #28]	; (41d0d8 <my_input_read+0x28>)
  41d0bc:	4798      	blx	r3
  41d0be:	b940      	cbnz	r0, 41d0d2 <my_input_read+0x22>
    data->state = LV_INDEV_STATE_PR;
  }
  else {
    data->state = LV_INDEV_STATE_REL;
  41d0c0:	2300      	movs	r3, #0
  41d0c2:	73a3      	strb	r3, [r4, #14]
  }
  
  data->point.x = px;
  41d0c4:	9b01      	ldr	r3, [sp, #4]
  41d0c6:	8023      	strh	r3, [r4, #0]
  data->point.y = py;
  41d0c8:	9b00      	ldr	r3, [sp, #0]
  41d0ca:	8063      	strh	r3, [r4, #2]
  return false; /*No buffering now so no more data read*/
}
  41d0cc:	2000      	movs	r0, #0
  41d0ce:	b002      	add	sp, #8
  41d0d0:	bd10      	pop	{r4, pc}
    data->state = LV_INDEV_STATE_PR;
  41d0d2:	2301      	movs	r3, #1
  41d0d4:	73a3      	strb	r3, [r4, #14]
  41d0d6:	e7f5      	b.n	41d0c4 <my_input_read+0x14>
  41d0d8:	004009b1 	.word	0x004009b1

0041d0dc <task_main>:
static void task_main(void *pvParameters) {
  41d0dc:	b500      	push	{lr}
  41d0de:	b083      	sub	sp, #12
  41d0e0:	e002      	b.n	41d0e8 <task_main+0xc>
    vTaskDelay(25);
  41d0e2:	2019      	movs	r0, #25
  41d0e4:	4b08      	ldr	r3, [pc, #32]	; (41d108 <task_main+0x2c>)
  41d0e6:	4798      	blx	r3
    if ( xQueueReceive( xQueueOx, &ox, 0 )) {
  41d0e8:	2300      	movs	r3, #0
  41d0ea:	461a      	mov	r2, r3
  41d0ec:	f10d 0107 	add.w	r1, sp, #7
  41d0f0:	4806      	ldr	r0, [pc, #24]	; (41d10c <task_main+0x30>)
  41d0f2:	6800      	ldr	r0, [r0, #0]
  41d0f4:	4c06      	ldr	r4, [pc, #24]	; (41d110 <task_main+0x34>)
  41d0f6:	47a0      	blx	r4
  41d0f8:	2800      	cmp	r0, #0
  41d0fa:	d0f2      	beq.n	41d0e2 <task_main+0x6>
      printf("ox: %d \n", ox);
  41d0fc:	f89d 1007 	ldrb.w	r1, [sp, #7]
  41d100:	4804      	ldr	r0, [pc, #16]	; (41d114 <task_main+0x38>)
  41d102:	4b05      	ldr	r3, [pc, #20]	; (41d118 <task_main+0x3c>)
  41d104:	4798      	blx	r3
  41d106:	e7ec      	b.n	41d0e2 <task_main+0x6>
  41d108:	004026b5 	.word	0x004026b5
  41d10c:	2043a300 	.word	0x2043a300
  41d110:	00401e6d 	.word	0x00401e6d
  41d114:	00456e14 	.word	0x00456e14
  41d118:	0041e1c1 	.word	0x0041e1c1

0041d11c <task_lcd>:
static void task_lcd(void *pvParameters) {
  41d11c:	b508      	push	{r3, lr}
    lv_tick_inc(50);
  41d11e:	2032      	movs	r0, #50	; 0x32
  41d120:	4b03      	ldr	r3, [pc, #12]	; (41d130 <task_lcd+0x14>)
  41d122:	4798      	blx	r3
    lv_task_handler();
  41d124:	4b03      	ldr	r3, [pc, #12]	; (41d134 <task_lcd+0x18>)
  41d126:	4798      	blx	r3
    vTaskDelay(50);
  41d128:	2032      	movs	r0, #50	; 0x32
  41d12a:	4b03      	ldr	r3, [pc, #12]	; (41d138 <task_lcd+0x1c>)
  41d12c:	4798      	blx	r3
  41d12e:	e7f6      	b.n	41d11e <task_lcd+0x2>
  41d130:	0041432d 	.word	0x0041432d
  41d134:	00415f09 	.word	0x00415f09
  41d138:	004026b5 	.word	0x004026b5

0041d13c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  41d13c:	b530      	push	{r4, r5, lr}
  41d13e:	b083      	sub	sp, #12
  41d140:	4604      	mov	r4, r0
  41d142:	460d      	mov	r5, r1
	uint32_t val = 0;
  41d144:	2300      	movs	r3, #0
  41d146:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  41d148:	4b28      	ldr	r3, [pc, #160]	; (41d1ec <usart_serial_getchar+0xb0>)
  41d14a:	4298      	cmp	r0, r3
  41d14c:	d013      	beq.n	41d176 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  41d14e:	4b28      	ldr	r3, [pc, #160]	; (41d1f0 <usart_serial_getchar+0xb4>)
  41d150:	429c      	cmp	r4, r3
  41d152:	d017      	beq.n	41d184 <usart_serial_getchar+0x48>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  41d154:	4b27      	ldr	r3, [pc, #156]	; (41d1f4 <usart_serial_getchar+0xb8>)
  41d156:	429c      	cmp	r4, r3
  41d158:	d01b      	beq.n	41d192 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  41d15a:	4b27      	ldr	r3, [pc, #156]	; (41d1f8 <usart_serial_getchar+0xbc>)
  41d15c:	429c      	cmp	r4, r3
  41d15e:	d01f      	beq.n	41d1a0 <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  41d160:	4b26      	ldr	r3, [pc, #152]	; (41d1fc <usart_serial_getchar+0xc0>)
  41d162:	429c      	cmp	r4, r3
  41d164:	d023      	beq.n	41d1ae <usart_serial_getchar+0x72>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  41d166:	4b26      	ldr	r3, [pc, #152]	; (41d200 <usart_serial_getchar+0xc4>)
  41d168:	429c      	cmp	r4, r3
  41d16a:	d02a      	beq.n	41d1c2 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  41d16c:	4b25      	ldr	r3, [pc, #148]	; (41d204 <usart_serial_getchar+0xc8>)
  41d16e:	429c      	cmp	r4, r3
  41d170:	d031      	beq.n	41d1d6 <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  41d172:	b003      	add	sp, #12
  41d174:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
  41d176:	4629      	mov	r1, r5
  41d178:	4620      	mov	r0, r4
  41d17a:	4b23      	ldr	r3, [pc, #140]	; (41d208 <usart_serial_getchar+0xcc>)
  41d17c:	4798      	blx	r3
  41d17e:	2800      	cmp	r0, #0
  41d180:	d1f9      	bne.n	41d176 <usart_serial_getchar+0x3a>
  41d182:	e7e4      	b.n	41d14e <usart_serial_getchar+0x12>
		while (uart_read((Uart*)p_usart, data));
  41d184:	4629      	mov	r1, r5
  41d186:	4620      	mov	r0, r4
  41d188:	4b1f      	ldr	r3, [pc, #124]	; (41d208 <usart_serial_getchar+0xcc>)
  41d18a:	4798      	blx	r3
  41d18c:	2800      	cmp	r0, #0
  41d18e:	d1f9      	bne.n	41d184 <usart_serial_getchar+0x48>
  41d190:	e7e0      	b.n	41d154 <usart_serial_getchar+0x18>
		while (uart_read((Uart*)p_usart, data));
  41d192:	4629      	mov	r1, r5
  41d194:	4620      	mov	r0, r4
  41d196:	4b1c      	ldr	r3, [pc, #112]	; (41d208 <usart_serial_getchar+0xcc>)
  41d198:	4798      	blx	r3
  41d19a:	2800      	cmp	r0, #0
  41d19c:	d1f9      	bne.n	41d192 <usart_serial_getchar+0x56>
  41d19e:	e7dc      	b.n	41d15a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  41d1a0:	4629      	mov	r1, r5
  41d1a2:	4620      	mov	r0, r4
  41d1a4:	4b18      	ldr	r3, [pc, #96]	; (41d208 <usart_serial_getchar+0xcc>)
  41d1a6:	4798      	blx	r3
  41d1a8:	2800      	cmp	r0, #0
  41d1aa:	d1f9      	bne.n	41d1a0 <usart_serial_getchar+0x64>
  41d1ac:	e7d8      	b.n	41d160 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  41d1ae:	a901      	add	r1, sp, #4
  41d1b0:	4620      	mov	r0, r4
  41d1b2:	4b16      	ldr	r3, [pc, #88]	; (41d20c <usart_serial_getchar+0xd0>)
  41d1b4:	4798      	blx	r3
  41d1b6:	2800      	cmp	r0, #0
  41d1b8:	d1f9      	bne.n	41d1ae <usart_serial_getchar+0x72>
		*data = (uint8_t)(val & 0xFF);
  41d1ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
  41d1be:	702b      	strb	r3, [r5, #0]
  41d1c0:	e7d1      	b.n	41d166 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  41d1c2:	a901      	add	r1, sp, #4
  41d1c4:	4620      	mov	r0, r4
  41d1c6:	4b11      	ldr	r3, [pc, #68]	; (41d20c <usart_serial_getchar+0xd0>)
  41d1c8:	4798      	blx	r3
  41d1ca:	2800      	cmp	r0, #0
  41d1cc:	d1f9      	bne.n	41d1c2 <usart_serial_getchar+0x86>
		*data = (uint8_t)(val & 0xFF);
  41d1ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
  41d1d2:	702b      	strb	r3, [r5, #0]
  41d1d4:	e7ca      	b.n	41d16c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  41d1d6:	a901      	add	r1, sp, #4
  41d1d8:	4620      	mov	r0, r4
  41d1da:	4b0c      	ldr	r3, [pc, #48]	; (41d20c <usart_serial_getchar+0xd0>)
  41d1dc:	4798      	blx	r3
  41d1de:	2800      	cmp	r0, #0
  41d1e0:	d1f9      	bne.n	41d1d6 <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
  41d1e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  41d1e6:	702b      	strb	r3, [r5, #0]
}
  41d1e8:	e7c3      	b.n	41d172 <usart_serial_getchar+0x36>
  41d1ea:	bf00      	nop
  41d1ec:	400e0800 	.word	0x400e0800
  41d1f0:	400e0a00 	.word	0x400e0a00
  41d1f4:	400e1a00 	.word	0x400e1a00
  41d1f8:	400e1c00 	.word	0x400e1c00
  41d1fc:	40024000 	.word	0x40024000
  41d200:	40028000 	.word	0x40028000
  41d204:	4002c000 	.word	0x4002c000
  41d208:	0041cc5f 	.word	0x0041cc5f
  41d20c:	0041ccfb 	.word	0x0041ccfb

0041d210 <usart_serial_putchar>:
{
  41d210:	b538      	push	{r3, r4, r5, lr}
  41d212:	4604      	mov	r4, r0
  41d214:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  41d216:	4b27      	ldr	r3, [pc, #156]	; (41d2b4 <usart_serial_putchar+0xa4>)
  41d218:	4298      	cmp	r0, r3
  41d21a:	d013      	beq.n	41d244 <usart_serial_putchar+0x34>
	if (UART1 == (Uart*)p_usart) {
  41d21c:	4b26      	ldr	r3, [pc, #152]	; (41d2b8 <usart_serial_putchar+0xa8>)
  41d21e:	4298      	cmp	r0, r3
  41d220:	d018      	beq.n	41d254 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  41d222:	4b26      	ldr	r3, [pc, #152]	; (41d2bc <usart_serial_putchar+0xac>)
  41d224:	4298      	cmp	r0, r3
  41d226:	d01d      	beq.n	41d264 <usart_serial_putchar+0x54>
	if (UART3 == (Uart*)p_usart) {
  41d228:	4b25      	ldr	r3, [pc, #148]	; (41d2c0 <usart_serial_putchar+0xb0>)
  41d22a:	4298      	cmp	r0, r3
  41d22c:	d022      	beq.n	41d274 <usart_serial_putchar+0x64>
	if (USART0 == p_usart) {
  41d22e:	4b25      	ldr	r3, [pc, #148]	; (41d2c4 <usart_serial_putchar+0xb4>)
  41d230:	4298      	cmp	r0, r3
  41d232:	d027      	beq.n	41d284 <usart_serial_putchar+0x74>
	if (USART1 == p_usart) {
  41d234:	4b24      	ldr	r3, [pc, #144]	; (41d2c8 <usart_serial_putchar+0xb8>)
  41d236:	4298      	cmp	r0, r3
  41d238:	d02c      	beq.n	41d294 <usart_serial_putchar+0x84>
	if (USART2 == p_usart) {
  41d23a:	4b24      	ldr	r3, [pc, #144]	; (41d2cc <usart_serial_putchar+0xbc>)
  41d23c:	4298      	cmp	r0, r3
  41d23e:	d031      	beq.n	41d2a4 <usart_serial_putchar+0x94>
	return 0;
  41d240:	2000      	movs	r0, #0
}
  41d242:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  41d244:	4629      	mov	r1, r5
  41d246:	4620      	mov	r0, r4
  41d248:	4b21      	ldr	r3, [pc, #132]	; (41d2d0 <usart_serial_putchar+0xc0>)
  41d24a:	4798      	blx	r3
  41d24c:	2800      	cmp	r0, #0
  41d24e:	d1f9      	bne.n	41d244 <usart_serial_putchar+0x34>
		return 1;
  41d250:	2001      	movs	r0, #1
  41d252:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  41d254:	4629      	mov	r1, r5
  41d256:	4620      	mov	r0, r4
  41d258:	4b1d      	ldr	r3, [pc, #116]	; (41d2d0 <usart_serial_putchar+0xc0>)
  41d25a:	4798      	blx	r3
  41d25c:	2800      	cmp	r0, #0
  41d25e:	d1f9      	bne.n	41d254 <usart_serial_putchar+0x44>
		return 1;
  41d260:	2001      	movs	r0, #1
  41d262:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  41d264:	4629      	mov	r1, r5
  41d266:	4620      	mov	r0, r4
  41d268:	4b19      	ldr	r3, [pc, #100]	; (41d2d0 <usart_serial_putchar+0xc0>)
  41d26a:	4798      	blx	r3
  41d26c:	2800      	cmp	r0, #0
  41d26e:	d1f9      	bne.n	41d264 <usart_serial_putchar+0x54>
		return 1;
  41d270:	2001      	movs	r0, #1
  41d272:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  41d274:	4629      	mov	r1, r5
  41d276:	4620      	mov	r0, r4
  41d278:	4b15      	ldr	r3, [pc, #84]	; (41d2d0 <usart_serial_putchar+0xc0>)
  41d27a:	4798      	blx	r3
  41d27c:	2800      	cmp	r0, #0
  41d27e:	d1f9      	bne.n	41d274 <usart_serial_putchar+0x64>
		return 1;
  41d280:	2001      	movs	r0, #1
  41d282:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  41d284:	4629      	mov	r1, r5
  41d286:	4620      	mov	r0, r4
  41d288:	4b12      	ldr	r3, [pc, #72]	; (41d2d4 <usart_serial_putchar+0xc4>)
  41d28a:	4798      	blx	r3
  41d28c:	2800      	cmp	r0, #0
  41d28e:	d1f9      	bne.n	41d284 <usart_serial_putchar+0x74>
		return 1;
  41d290:	2001      	movs	r0, #1
  41d292:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  41d294:	4629      	mov	r1, r5
  41d296:	4620      	mov	r0, r4
  41d298:	4b0e      	ldr	r3, [pc, #56]	; (41d2d4 <usart_serial_putchar+0xc4>)
  41d29a:	4798      	blx	r3
  41d29c:	2800      	cmp	r0, #0
  41d29e:	d1f9      	bne.n	41d294 <usart_serial_putchar+0x84>
		return 1;
  41d2a0:	2001      	movs	r0, #1
  41d2a2:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  41d2a4:	4629      	mov	r1, r5
  41d2a6:	4620      	mov	r0, r4
  41d2a8:	4b0a      	ldr	r3, [pc, #40]	; (41d2d4 <usart_serial_putchar+0xc4>)
  41d2aa:	4798      	blx	r3
  41d2ac:	2800      	cmp	r0, #0
  41d2ae:	d1f9      	bne.n	41d2a4 <usart_serial_putchar+0x94>
		return 1;
  41d2b0:	2001      	movs	r0, #1
  41d2b2:	bd38      	pop	{r3, r4, r5, pc}
  41d2b4:	400e0800 	.word	0x400e0800
  41d2b8:	400e0a00 	.word	0x400e0a00
  41d2bc:	400e1a00 	.word	0x400e1a00
  41d2c0:	400e1c00 	.word	0x400e1c00
  41d2c4:	40024000 	.word	0x40024000
  41d2c8:	40028000 	.word	0x40028000
  41d2cc:	4002c000 	.word	0x4002c000
  41d2d0:	0041cc4d 	.word	0x0041cc4d
  41d2d4:	0041cce5 	.word	0x0041cce5

0041d2d8 <configure_lcd>:
static void configure_lcd(void) {
  41d2d8:	b510      	push	{r4, lr}
  pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);  //
  41d2da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d2de:	2074      	movs	r0, #116	; 0x74
  41d2e0:	4c0b      	ldr	r4, [pc, #44]	; (41d310 <configure_lcd+0x38>)
  41d2e2:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  41d2e4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d2e8:	2075      	movs	r0, #117	; 0x75
  41d2ea:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  41d2ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d2f0:	2076      	movs	r0, #118	; 0x76
  41d2f2:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  41d2f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d2f8:	207b      	movs	r0, #123	; 0x7b
  41d2fa:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  41d2fc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41d300:	2018      	movs	r0, #24
  41d302:	47a0      	blx	r4
  pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  41d304:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41d308:	2006      	movs	r0, #6
  41d30a:	47a0      	blx	r4
  41d30c:	bd10      	pop	{r4, pc}
  41d30e:	bf00      	nop
  41d310:	0041c7c5 	.word	0x0041c7c5

0041d314 <configure_console>:
static void configure_console(void) {
  41d314:	b570      	push	{r4, r5, r6, lr}
  41d316:	b08a      	sub	sp, #40	; 0x28
  const usart_serial_options_t uart_serial_options = {
  41d318:	4b1a      	ldr	r3, [pc, #104]	; (41d384 <configure_console+0x70>)
  41d31a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  41d31c:	ac0a      	add	r4, sp, #40	; 0x28
  41d31e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  41d322:	4d19      	ldr	r5, [pc, #100]	; (41d388 <configure_console+0x74>)
  41d324:	4b19      	ldr	r3, [pc, #100]	; (41d38c <configure_console+0x78>)
  41d326:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  41d328:	4a19      	ldr	r2, [pc, #100]	; (41d390 <configure_console+0x7c>)
  41d32a:	4b1a      	ldr	r3, [pc, #104]	; (41d394 <configure_console+0x80>)
  41d32c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  41d32e:	4a1a      	ldr	r2, [pc, #104]	; (41d398 <configure_console+0x84>)
  41d330:	4b1a      	ldr	r3, [pc, #104]	; (41d39c <configure_console+0x88>)
  41d332:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  41d334:	9b06      	ldr	r3, [sp, #24]
  41d336:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  41d338:	9b07      	ldr	r3, [sp, #28]
  41d33a:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  41d33c:	9b08      	ldr	r3, [sp, #32]
  41d33e:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  41d340:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41d342:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  41d344:	2400      	movs	r4, #0
  41d346:	9404      	str	r4, [sp, #16]
  41d348:	200e      	movs	r0, #14
  41d34a:	4b15      	ldr	r3, [pc, #84]	; (41d3a0 <configure_console+0x8c>)
  41d34c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  41d34e:	4a15      	ldr	r2, [pc, #84]	; (41d3a4 <configure_console+0x90>)
  41d350:	4669      	mov	r1, sp
  41d352:	4628      	mov	r0, r5
  41d354:	4b14      	ldr	r3, [pc, #80]	; (41d3a8 <configure_console+0x94>)
  41d356:	4798      	blx	r3
		usart_enable_tx(p_usart);
  41d358:	4628      	mov	r0, r5
  41d35a:	4b14      	ldr	r3, [pc, #80]	; (41d3ac <configure_console+0x98>)
  41d35c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  41d35e:	4628      	mov	r0, r5
  41d360:	4b13      	ldr	r3, [pc, #76]	; (41d3b0 <configure_console+0x9c>)
  41d362:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  41d364:	4e13      	ldr	r6, [pc, #76]	; (41d3b4 <configure_console+0xa0>)
  41d366:	6833      	ldr	r3, [r6, #0]
  41d368:	4621      	mov	r1, r4
  41d36a:	6898      	ldr	r0, [r3, #8]
  41d36c:	4d12      	ldr	r5, [pc, #72]	; (41d3b8 <configure_console+0xa4>)
  41d36e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  41d370:	6833      	ldr	r3, [r6, #0]
  41d372:	4621      	mov	r1, r4
  41d374:	6858      	ldr	r0, [r3, #4]
  41d376:	47a8      	blx	r5
  setbuf(stdout, NULL);
  41d378:	6833      	ldr	r3, [r6, #0]
  41d37a:	4621      	mov	r1, r4
  41d37c:	6898      	ldr	r0, [r3, #8]
  41d37e:	47a8      	blx	r5
}
  41d380:	b00a      	add	sp, #40	; 0x28
  41d382:	bd70      	pop	{r4, r5, r6, pc}
  41d384:	0042498c 	.word	0x0042498c
  41d388:	40028000 	.word	0x40028000
  41d38c:	2043a2f8 	.word	0x2043a2f8
  41d390:	0041d211 	.word	0x0041d211
  41d394:	2043a2f4 	.word	0x2043a2f4
  41d398:	0041d13d 	.word	0x0041d13d
  41d39c:	2043a2f0 	.word	0x2043a2f0
  41d3a0:	0041cabd 	.word	0x0041cabd
  41d3a4:	08f0d180 	.word	0x08f0d180
  41d3a8:	0041cd61 	.word	0x0041cd61
  41d3ac:	0041ccbd 	.word	0x0041ccbd
  41d3b0:	0041ccc9 	.word	0x0041ccc9
  41d3b4:	20400060 	.word	0x20400060
  41d3b8:	0041ea05 	.word	0x0041ea05

0041d3bc <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  41d3bc:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  41d3be:	460a      	mov	r2, r1
  41d3c0:	4601      	mov	r1, r0
  41d3c2:	4802      	ldr	r0, [pc, #8]	; (41d3cc <vApplicationStackOverflowHook+0x10>)
  41d3c4:	4b02      	ldr	r3, [pc, #8]	; (41d3d0 <vApplicationStackOverflowHook+0x14>)
  41d3c6:	4798      	blx	r3
  41d3c8:	e7fe      	b.n	41d3c8 <vApplicationStackOverflowHook+0xc>
  41d3ca:	bf00      	nop
  41d3cc:	00456e20 	.word	0x00456e20
  41d3d0:	0041e1c1 	.word	0x0041e1c1

0041d3d4 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  41d3d4:	4770      	bx	lr

0041d3d6 <vApplicationMallocFailedHook>:
  41d3d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  41d3da:	b672      	cpsid	i
  41d3dc:	f383 8811 	msr	BASEPRI, r3
  41d3e0:	f3bf 8f6f 	isb	sy
  41d3e4:	f3bf 8f4f 	dsb	sy
  41d3e8:	b662      	cpsie	i
  41d3ea:	e7fe      	b.n	41d3ea <vApplicationMallocFailedHook+0x14>

0041d3ec <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  41d3ec:	b530      	push	{r4, r5, lr}
  41d3ee:	b099      	sub	sp, #100	; 0x64
  /* board and sys init */
  board_init();
  41d3f0:	4b3b      	ldr	r3, [pc, #236]	; (41d4e0 <main+0xf4>)
  41d3f2:	4798      	blx	r3
  sysclk_init();
  41d3f4:	4b3b      	ldr	r3, [pc, #236]	; (41d4e4 <main+0xf8>)
  41d3f6:	4798      	blx	r3
  configure_console();
  41d3f8:	4b3b      	ldr	r3, [pc, #236]	; (41d4e8 <main+0xfc>)
  41d3fa:	4798      	blx	r3

  /* LCd int */
  configure_lcd();
  41d3fc:	4b3b      	ldr	r3, [pc, #236]	; (41d4ec <main+0x100>)
  41d3fe:	4798      	blx	r3
  ili9341_init();
  41d400:	4b3b      	ldr	r3, [pc, #236]	; (41d4f0 <main+0x104>)
  41d402:	4798      	blx	r3
  configure_touch();
  41d404:	4b3b      	ldr	r3, [pc, #236]	; (41d4f4 <main+0x108>)
  41d406:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  41d408:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  41d40c:	4b3a      	ldr	r3, [pc, #232]	; (41d4f8 <main+0x10c>)
  41d40e:	631a      	str	r2, [r3, #48]	; 0x30
  ili9341_backlight_on();
  
  /*LittlevGL init*/
  lv_init();
  41d410:	4b3a      	ldr	r3, [pc, #232]	; (41d4fc <main+0x110>)
  41d412:	4798      	blx	r3
  lv_disp_drv_t disp_drv;                 /*A variable to hold the drivers. Can be local variable*/
  lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
  41d414:	a80b      	add	r0, sp, #44	; 0x2c
  41d416:	4b3a      	ldr	r3, [pc, #232]	; (41d500 <main+0x114>)
  41d418:	4798      	blx	r3
  lv_disp_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);  /*Initialize `disp_buf` with the buffer(s) */
  41d41a:	4c3a      	ldr	r4, [pc, #232]	; (41d504 <main+0x118>)
  41d41c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  41d420:	2200      	movs	r2, #0
  41d422:	4939      	ldr	r1, [pc, #228]	; (41d508 <main+0x11c>)
  41d424:	4620      	mov	r0, r4
  41d426:	4d39      	ldr	r5, [pc, #228]	; (41d50c <main+0x120>)
  41d428:	47a8      	blx	r5
  disp_drv.buffer = &disp_buf;            /*Set an initialized buffer*/
  41d42a:	940c      	str	r4, [sp, #48]	; 0x30
  disp_drv.flush_cb = my_flush_cb;        /*Set a flush callback to draw to the display*/
  41d42c:	4b38      	ldr	r3, [pc, #224]	; (41d510 <main+0x124>)
  41d42e:	930e      	str	r3, [sp, #56]	; 0x38
  lv_disp_t * disp;
  disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
  41d430:	a80b      	add	r0, sp, #44	; 0x2c
  41d432:	4b38      	ldr	r3, [pc, #224]	; (41d514 <main+0x128>)
  41d434:	4798      	blx	r3
  
  /* Init input on LVGL */
  lv_indev_drv_t indev_drv;
  lv_indev_drv_init(&indev_drv);      /*Basic initialization*/
  41d436:	a804      	add	r0, sp, #16
  41d438:	4b37      	ldr	r3, [pc, #220]	; (41d518 <main+0x12c>)
  41d43a:	4798      	blx	r3
  indev_drv.type = LV_INDEV_TYPE_POINTER;
  41d43c:	2401      	movs	r4, #1
  41d43e:	f88d 4010 	strb.w	r4, [sp, #16]
  indev_drv.read_cb = my_input_read;
  41d442:	4b36      	ldr	r3, [pc, #216]	; (41d51c <main+0x130>)
  41d444:	9305      	str	r3, [sp, #20]
  /*Register the driver in LVGL and save the created input device object*/
  lv_indev_t * my_indev = lv_indev_drv_register(&indev_drv);
  41d446:	a804      	add	r0, sp, #16
  41d448:	4b35      	ldr	r3, [pc, #212]	; (41d520 <main+0x134>)
  41d44a:	4798      	blx	r3
  
  xQueueOx = xQueueCreate(32, sizeof(char));
  41d44c:	2200      	movs	r2, #0
  41d44e:	4621      	mov	r1, r4
  41d450:	2020      	movs	r0, #32
  41d452:	4b34      	ldr	r3, [pc, #208]	; (41d524 <main+0x138>)
  41d454:	4798      	blx	r3
  41d456:	4b34      	ldr	r3, [pc, #208]	; (41d528 <main+0x13c>)
  41d458:	6018      	str	r0, [r3, #0]

  if (xTaskCreate(task_lcd, "LCD", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  41d45a:	2300      	movs	r3, #0
  41d45c:	9303      	str	r3, [sp, #12]
  41d45e:	9302      	str	r3, [sp, #8]
  41d460:	9301      	str	r3, [sp, #4]
  41d462:	9300      	str	r3, [sp, #0]
  41d464:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  41d468:	4930      	ldr	r1, [pc, #192]	; (41d52c <main+0x140>)
  41d46a:	4831      	ldr	r0, [pc, #196]	; (41d530 <main+0x144>)
  41d46c:	4c31      	ldr	r4, [pc, #196]	; (41d534 <main+0x148>)
  41d46e:	47a0      	blx	r4
  41d470:	2801      	cmp	r0, #1
  41d472:	d002      	beq.n	41d47a <main+0x8e>
    printf("Failed to create lcd task\r\n");
  41d474:	4830      	ldr	r0, [pc, #192]	; (41d538 <main+0x14c>)
  41d476:	4b31      	ldr	r3, [pc, #196]	; (41d53c <main+0x150>)
  41d478:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_aps2, "APS2", TASK_APS2_STACK_SIZE, NULL, TASK_APS2_PRIORITY, NULL) != pdPASS) {
  41d47a:	2300      	movs	r3, #0
  41d47c:	9303      	str	r3, [sp, #12]
  41d47e:	9302      	str	r3, [sp, #8]
  41d480:	9301      	str	r3, [sp, #4]
  41d482:	9300      	str	r3, [sp, #0]
  41d484:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  41d488:	492d      	ldr	r1, [pc, #180]	; (41d540 <main+0x154>)
  41d48a:	482e      	ldr	r0, [pc, #184]	; (41d544 <main+0x158>)
  41d48c:	4c29      	ldr	r4, [pc, #164]	; (41d534 <main+0x148>)
  41d48e:	47a0      	blx	r4
  41d490:	2801      	cmp	r0, #1
  41d492:	d002      	beq.n	41d49a <main+0xae>
    printf("Failed to create APS task\r\n");
  41d494:	482c      	ldr	r0, [pc, #176]	; (41d548 <main+0x15c>)
  41d496:	4b29      	ldr	r3, [pc, #164]	; (41d53c <main+0x150>)
  41d498:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_main, "main", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  41d49a:	2300      	movs	r3, #0
  41d49c:	9303      	str	r3, [sp, #12]
  41d49e:	9302      	str	r3, [sp, #8]
  41d4a0:	9301      	str	r3, [sp, #4]
  41d4a2:	9300      	str	r3, [sp, #0]
  41d4a4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  41d4a8:	4928      	ldr	r1, [pc, #160]	; (41d54c <main+0x160>)
  41d4aa:	4829      	ldr	r0, [pc, #164]	; (41d550 <main+0x164>)
  41d4ac:	4c21      	ldr	r4, [pc, #132]	; (41d534 <main+0x148>)
  41d4ae:	47a0      	blx	r4
  41d4b0:	2801      	cmp	r0, #1
  41d4b2:	d002      	beq.n	41d4ba <main+0xce>
    printf("Failed to create Main task\r\n");
  41d4b4:	4827      	ldr	r0, [pc, #156]	; (41d554 <main+0x168>)
  41d4b6:	4b21      	ldr	r3, [pc, #132]	; (41d53c <main+0x150>)
  41d4b8:	4798      	blx	r3
  }
  
  /* Start the scheduler. */
  vTaskStartScheduler();
  41d4ba:	4b27      	ldr	r3, [pc, #156]	; (41d558 <main+0x16c>)
  41d4bc:	4798      	blx	r3

	ili9341_init();
  41d4be:	4b0c      	ldr	r3, [pc, #48]	; (41d4f0 <main+0x104>)
  41d4c0:	4798      	blx	r3

	/* set x,y pointer on screen */
	/* set update range  */
	ili9341_set_top_left_limit(0, 0);
  41d4c2:	2100      	movs	r1, #0
  41d4c4:	4608      	mov	r0, r1
  41d4c6:	4b25      	ldr	r3, [pc, #148]	; (41d55c <main+0x170>)
  41d4c8:	4798      	blx	r3
	ili9341_set_bottom_right_limit(Image.width, Image.height);
  41d4ca:	21f0      	movs	r1, #240	; 0xf0
  41d4cc:	f44f 70a0 	mov.w	r0, #320	; 0x140
  41d4d0:	4b23      	ldr	r3, [pc, #140]	; (41d560 <main+0x174>)
  41d4d2:	4798      	blx	r3

	/* send pxs to screen */
	ili9341_copy_pixels_to_screen(Image.data, ILI9341_DEFAULT_WIDTH*ILI9341_DEFAULT_HEIGHT);
  41d4d4:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
  41d4d8:	4822      	ldr	r0, [pc, #136]	; (41d564 <main+0x178>)
  41d4da:	4b23      	ldr	r3, [pc, #140]	; (41d568 <main+0x17c>)
  41d4dc:	4798      	blx	r3
  41d4de:	e7fe      	b.n	41d4de <main+0xf2>
  41d4e0:	0041c335 	.word	0x0041c335
  41d4e4:	0041c141 	.word	0x0041c141
  41d4e8:	0041d315 	.word	0x0041d315
  41d4ec:	0041d2d9 	.word	0x0041d2d9
  41d4f0:	00401179 	.word	0x00401179
  41d4f4:	00400665 	.word	0x00400665
  41d4f8:	400e1200 	.word	0x400e1200
  41d4fc:	00405065 	.word	0x00405065
  41d500:	00413eb5 	.word	0x00413eb5
  41d504:	2043a03c 	.word	0x2043a03c
  41d508:	2041483c 	.word	0x2041483c
  41d50c:	00413f0d 	.word	0x00413f0d
  41d510:	0041d059 	.word	0x0041d059
  41d514:	004140bd 	.word	0x004140bd
  41d518:	004141f5 	.word	0x004141f5
  41d51c:	0041d0b1 	.word	0x0041d0b1
  41d520:	00414221 	.word	0x00414221
  41d524:	00401af9 	.word	0x00401af9
  41d528:	2043a300 	.word	0x2043a300
  41d52c:	00456da8 	.word	0x00456da8
  41d530:	0041d11d 	.word	0x0041d11d
  41d534:	0040225d 	.word	0x0040225d
  41d538:	00456dac 	.word	0x00456dac
  41d53c:	0041e1c1 	.word	0x0041e1c1
  41d540:	00456dc8 	.word	0x00456dc8
  41d544:	00400389 	.word	0x00400389
  41d548:	00456dd0 	.word	0x00456dd0
  41d54c:	00456dec 	.word	0x00456dec
  41d550:	0041d0dd 	.word	0x0041d0dd
  41d554:	00456df4 	.word	0x00456df4
  41d558:	004023b5 	.word	0x004023b5
  41d55c:	00400c55 	.word	0x00400c55
  41d560:	00400c75 	.word	0x00400c75
  41d564:	00426068 	.word	0x00426068
  41d568:	00400cc5 	.word	0x00400cc5

0041d56c <arm_sin_f32>:
  41d56c:	ee06 0a90 	vmov	s13, r0
  41d570:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 41d5e0 <arm_sin_f32+0x74>
  41d574:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  41d578:	ee26 7a87 	vmul.f32	s14, s13, s14
  41d57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41d580:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  41d584:	d504      	bpl.n	41d590 <arm_sin_f32+0x24>
  41d586:	ee17 3a90 	vmov	r3, s15
  41d58a:	3b01      	subs	r3, #1
  41d58c:	ee07 3a90 	vmov	s15, r3
  41d590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  41d594:	eddf 6a13 	vldr	s13, [pc, #76]	; 41d5e4 <arm_sin_f32+0x78>
  41d598:	ee77 7a67 	vsub.f32	s15, s14, s15
  41d59c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  41d5a0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
  41d5a4:	ee17 3a10 	vmov	r3, s14
  41d5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  41d5ac:	ee07 3a10 	vmov	s14, r3
  41d5b0:	eef8 6a47 	vcvt.f32.u32	s13, s14
  41d5b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  41d5b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
  41d5bc:	4a0a      	ldr	r2, [pc, #40]	; (41d5e8 <arm_sin_f32+0x7c>)
  41d5be:	ee37 7a67 	vsub.f32	s14, s14, s15
  41d5c2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  41d5c6:	ed91 6a00 	vldr	s12, [r1]
  41d5ca:	edd1 6a01 	vldr	s13, [r1, #4]
  41d5ce:	ee27 7a06 	vmul.f32	s14, s14, s12
  41d5d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
  41d5d6:	ee77 7a27 	vadd.f32	s15, s14, s15
  41d5da:	ee17 0a90 	vmov	r0, s15
  41d5de:	4770      	bx	lr
  41d5e0:	3e22f983 	.word	0x3e22f983
  41d5e4:	44000000 	.word	0x44000000
  41d5e8:	00456e38 	.word	0x00456e38

0041d5ec <__aeabi_drsub>:
  41d5ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  41d5f0:	e002      	b.n	41d5f8 <__adddf3>
  41d5f2:	bf00      	nop

0041d5f4 <__aeabi_dsub>:
  41d5f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0041d5f8 <__adddf3>:
  41d5f8:	b530      	push	{r4, r5, lr}
  41d5fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
  41d5fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
  41d602:	ea94 0f05 	teq	r4, r5
  41d606:	bf08      	it	eq
  41d608:	ea90 0f02 	teqeq	r0, r2
  41d60c:	bf1f      	itttt	ne
  41d60e:	ea54 0c00 	orrsne.w	ip, r4, r0
  41d612:	ea55 0c02 	orrsne.w	ip, r5, r2
  41d616:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  41d61a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  41d61e:	f000 80e2 	beq.w	41d7e6 <__adddf3+0x1ee>
  41d622:	ea4f 5454 	mov.w	r4, r4, lsr #21
  41d626:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  41d62a:	bfb8      	it	lt
  41d62c:	426d      	neglt	r5, r5
  41d62e:	dd0c      	ble.n	41d64a <__adddf3+0x52>
  41d630:	442c      	add	r4, r5
  41d632:	ea80 0202 	eor.w	r2, r0, r2
  41d636:	ea81 0303 	eor.w	r3, r1, r3
  41d63a:	ea82 0000 	eor.w	r0, r2, r0
  41d63e:	ea83 0101 	eor.w	r1, r3, r1
  41d642:	ea80 0202 	eor.w	r2, r0, r2
  41d646:	ea81 0303 	eor.w	r3, r1, r3
  41d64a:	2d36      	cmp	r5, #54	; 0x36
  41d64c:	bf88      	it	hi
  41d64e:	bd30      	pophi	{r4, r5, pc}
  41d650:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  41d654:	ea4f 3101 	mov.w	r1, r1, lsl #12
  41d658:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  41d65c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  41d660:	d002      	beq.n	41d668 <__adddf3+0x70>
  41d662:	4240      	negs	r0, r0
  41d664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41d668:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  41d66c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  41d670:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  41d674:	d002      	beq.n	41d67c <__adddf3+0x84>
  41d676:	4252      	negs	r2, r2
  41d678:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  41d67c:	ea94 0f05 	teq	r4, r5
  41d680:	f000 80a7 	beq.w	41d7d2 <__adddf3+0x1da>
  41d684:	f1a4 0401 	sub.w	r4, r4, #1
  41d688:	f1d5 0e20 	rsbs	lr, r5, #32
  41d68c:	db0d      	blt.n	41d6aa <__adddf3+0xb2>
  41d68e:	fa02 fc0e 	lsl.w	ip, r2, lr
  41d692:	fa22 f205 	lsr.w	r2, r2, r5
  41d696:	1880      	adds	r0, r0, r2
  41d698:	f141 0100 	adc.w	r1, r1, #0
  41d69c:	fa03 f20e 	lsl.w	r2, r3, lr
  41d6a0:	1880      	adds	r0, r0, r2
  41d6a2:	fa43 f305 	asr.w	r3, r3, r5
  41d6a6:	4159      	adcs	r1, r3
  41d6a8:	e00e      	b.n	41d6c8 <__adddf3+0xd0>
  41d6aa:	f1a5 0520 	sub.w	r5, r5, #32
  41d6ae:	f10e 0e20 	add.w	lr, lr, #32
  41d6b2:	2a01      	cmp	r2, #1
  41d6b4:	fa03 fc0e 	lsl.w	ip, r3, lr
  41d6b8:	bf28      	it	cs
  41d6ba:	f04c 0c02 	orrcs.w	ip, ip, #2
  41d6be:	fa43 f305 	asr.w	r3, r3, r5
  41d6c2:	18c0      	adds	r0, r0, r3
  41d6c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  41d6c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41d6cc:	d507      	bpl.n	41d6de <__adddf3+0xe6>
  41d6ce:	f04f 0e00 	mov.w	lr, #0
  41d6d2:	f1dc 0c00 	rsbs	ip, ip, #0
  41d6d6:	eb7e 0000 	sbcs.w	r0, lr, r0
  41d6da:	eb6e 0101 	sbc.w	r1, lr, r1
  41d6de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  41d6e2:	d31b      	bcc.n	41d71c <__adddf3+0x124>
  41d6e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  41d6e8:	d30c      	bcc.n	41d704 <__adddf3+0x10c>
  41d6ea:	0849      	lsrs	r1, r1, #1
  41d6ec:	ea5f 0030 	movs.w	r0, r0, rrx
  41d6f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  41d6f4:	f104 0401 	add.w	r4, r4, #1
  41d6f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  41d6fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  41d700:	f080 809a 	bcs.w	41d838 <__adddf3+0x240>
  41d704:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  41d708:	bf08      	it	eq
  41d70a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  41d70e:	f150 0000 	adcs.w	r0, r0, #0
  41d712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41d716:	ea41 0105 	orr.w	r1, r1, r5
  41d71a:	bd30      	pop	{r4, r5, pc}
  41d71c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  41d720:	4140      	adcs	r0, r0
  41d722:	eb41 0101 	adc.w	r1, r1, r1
  41d726:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41d72a:	f1a4 0401 	sub.w	r4, r4, #1
  41d72e:	d1e9      	bne.n	41d704 <__adddf3+0x10c>
  41d730:	f091 0f00 	teq	r1, #0
  41d734:	bf04      	itt	eq
  41d736:	4601      	moveq	r1, r0
  41d738:	2000      	moveq	r0, #0
  41d73a:	fab1 f381 	clz	r3, r1
  41d73e:	bf08      	it	eq
  41d740:	3320      	addeq	r3, #32
  41d742:	f1a3 030b 	sub.w	r3, r3, #11
  41d746:	f1b3 0220 	subs.w	r2, r3, #32
  41d74a:	da0c      	bge.n	41d766 <__adddf3+0x16e>
  41d74c:	320c      	adds	r2, #12
  41d74e:	dd08      	ble.n	41d762 <__adddf3+0x16a>
  41d750:	f102 0c14 	add.w	ip, r2, #20
  41d754:	f1c2 020c 	rsb	r2, r2, #12
  41d758:	fa01 f00c 	lsl.w	r0, r1, ip
  41d75c:	fa21 f102 	lsr.w	r1, r1, r2
  41d760:	e00c      	b.n	41d77c <__adddf3+0x184>
  41d762:	f102 0214 	add.w	r2, r2, #20
  41d766:	bfd8      	it	le
  41d768:	f1c2 0c20 	rsble	ip, r2, #32
  41d76c:	fa01 f102 	lsl.w	r1, r1, r2
  41d770:	fa20 fc0c 	lsr.w	ip, r0, ip
  41d774:	bfdc      	itt	le
  41d776:	ea41 010c 	orrle.w	r1, r1, ip
  41d77a:	4090      	lslle	r0, r2
  41d77c:	1ae4      	subs	r4, r4, r3
  41d77e:	bfa2      	ittt	ge
  41d780:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  41d784:	4329      	orrge	r1, r5
  41d786:	bd30      	popge	{r4, r5, pc}
  41d788:	ea6f 0404 	mvn.w	r4, r4
  41d78c:	3c1f      	subs	r4, #31
  41d78e:	da1c      	bge.n	41d7ca <__adddf3+0x1d2>
  41d790:	340c      	adds	r4, #12
  41d792:	dc0e      	bgt.n	41d7b2 <__adddf3+0x1ba>
  41d794:	f104 0414 	add.w	r4, r4, #20
  41d798:	f1c4 0220 	rsb	r2, r4, #32
  41d79c:	fa20 f004 	lsr.w	r0, r0, r4
  41d7a0:	fa01 f302 	lsl.w	r3, r1, r2
  41d7a4:	ea40 0003 	orr.w	r0, r0, r3
  41d7a8:	fa21 f304 	lsr.w	r3, r1, r4
  41d7ac:	ea45 0103 	orr.w	r1, r5, r3
  41d7b0:	bd30      	pop	{r4, r5, pc}
  41d7b2:	f1c4 040c 	rsb	r4, r4, #12
  41d7b6:	f1c4 0220 	rsb	r2, r4, #32
  41d7ba:	fa20 f002 	lsr.w	r0, r0, r2
  41d7be:	fa01 f304 	lsl.w	r3, r1, r4
  41d7c2:	ea40 0003 	orr.w	r0, r0, r3
  41d7c6:	4629      	mov	r1, r5
  41d7c8:	bd30      	pop	{r4, r5, pc}
  41d7ca:	fa21 f004 	lsr.w	r0, r1, r4
  41d7ce:	4629      	mov	r1, r5
  41d7d0:	bd30      	pop	{r4, r5, pc}
  41d7d2:	f094 0f00 	teq	r4, #0
  41d7d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  41d7da:	bf06      	itte	eq
  41d7dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  41d7e0:	3401      	addeq	r4, #1
  41d7e2:	3d01      	subne	r5, #1
  41d7e4:	e74e      	b.n	41d684 <__adddf3+0x8c>
  41d7e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41d7ea:	bf18      	it	ne
  41d7ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  41d7f0:	d029      	beq.n	41d846 <__adddf3+0x24e>
  41d7f2:	ea94 0f05 	teq	r4, r5
  41d7f6:	bf08      	it	eq
  41d7f8:	ea90 0f02 	teqeq	r0, r2
  41d7fc:	d005      	beq.n	41d80a <__adddf3+0x212>
  41d7fe:	ea54 0c00 	orrs.w	ip, r4, r0
  41d802:	bf04      	itt	eq
  41d804:	4619      	moveq	r1, r3
  41d806:	4610      	moveq	r0, r2
  41d808:	bd30      	pop	{r4, r5, pc}
  41d80a:	ea91 0f03 	teq	r1, r3
  41d80e:	bf1e      	ittt	ne
  41d810:	2100      	movne	r1, #0
  41d812:	2000      	movne	r0, #0
  41d814:	bd30      	popne	{r4, r5, pc}
  41d816:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  41d81a:	d105      	bne.n	41d828 <__adddf3+0x230>
  41d81c:	0040      	lsls	r0, r0, #1
  41d81e:	4149      	adcs	r1, r1
  41d820:	bf28      	it	cs
  41d822:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  41d826:	bd30      	pop	{r4, r5, pc}
  41d828:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  41d82c:	bf3c      	itt	cc
  41d82e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  41d832:	bd30      	popcc	{r4, r5, pc}
  41d834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41d838:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  41d83c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  41d840:	f04f 0000 	mov.w	r0, #0
  41d844:	bd30      	pop	{r4, r5, pc}
  41d846:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41d84a:	bf1a      	itte	ne
  41d84c:	4619      	movne	r1, r3
  41d84e:	4610      	movne	r0, r2
  41d850:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  41d854:	bf1c      	itt	ne
  41d856:	460b      	movne	r3, r1
  41d858:	4602      	movne	r2, r0
  41d85a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41d85e:	bf06      	itte	eq
  41d860:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  41d864:	ea91 0f03 	teqeq	r1, r3
  41d868:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  41d86c:	bd30      	pop	{r4, r5, pc}
  41d86e:	bf00      	nop

0041d870 <__aeabi_ui2d>:
  41d870:	f090 0f00 	teq	r0, #0
  41d874:	bf04      	itt	eq
  41d876:	2100      	moveq	r1, #0
  41d878:	4770      	bxeq	lr
  41d87a:	b530      	push	{r4, r5, lr}
  41d87c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41d880:	f104 0432 	add.w	r4, r4, #50	; 0x32
  41d884:	f04f 0500 	mov.w	r5, #0
  41d888:	f04f 0100 	mov.w	r1, #0
  41d88c:	e750      	b.n	41d730 <__adddf3+0x138>
  41d88e:	bf00      	nop

0041d890 <__aeabi_i2d>:
  41d890:	f090 0f00 	teq	r0, #0
  41d894:	bf04      	itt	eq
  41d896:	2100      	moveq	r1, #0
  41d898:	4770      	bxeq	lr
  41d89a:	b530      	push	{r4, r5, lr}
  41d89c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41d8a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  41d8a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  41d8a8:	bf48      	it	mi
  41d8aa:	4240      	negmi	r0, r0
  41d8ac:	f04f 0100 	mov.w	r1, #0
  41d8b0:	e73e      	b.n	41d730 <__adddf3+0x138>
  41d8b2:	bf00      	nop

0041d8b4 <__aeabi_f2d>:
  41d8b4:	0042      	lsls	r2, r0, #1
  41d8b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  41d8ba:	ea4f 0131 	mov.w	r1, r1, rrx
  41d8be:	ea4f 7002 	mov.w	r0, r2, lsl #28
  41d8c2:	bf1f      	itttt	ne
  41d8c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  41d8c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  41d8cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  41d8d0:	4770      	bxne	lr
  41d8d2:	f092 0f00 	teq	r2, #0
  41d8d6:	bf14      	ite	ne
  41d8d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  41d8dc:	4770      	bxeq	lr
  41d8de:	b530      	push	{r4, r5, lr}
  41d8e0:	f44f 7460 	mov.w	r4, #896	; 0x380
  41d8e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41d8e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  41d8ec:	e720      	b.n	41d730 <__adddf3+0x138>
  41d8ee:	bf00      	nop

0041d8f0 <__aeabi_ul2d>:
  41d8f0:	ea50 0201 	orrs.w	r2, r0, r1
  41d8f4:	bf08      	it	eq
  41d8f6:	4770      	bxeq	lr
  41d8f8:	b530      	push	{r4, r5, lr}
  41d8fa:	f04f 0500 	mov.w	r5, #0
  41d8fe:	e00a      	b.n	41d916 <__aeabi_l2d+0x16>

0041d900 <__aeabi_l2d>:
  41d900:	ea50 0201 	orrs.w	r2, r0, r1
  41d904:	bf08      	it	eq
  41d906:	4770      	bxeq	lr
  41d908:	b530      	push	{r4, r5, lr}
  41d90a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  41d90e:	d502      	bpl.n	41d916 <__aeabi_l2d+0x16>
  41d910:	4240      	negs	r0, r0
  41d912:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41d916:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41d91a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  41d91e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  41d922:	f43f aedc 	beq.w	41d6de <__adddf3+0xe6>
  41d926:	f04f 0203 	mov.w	r2, #3
  41d92a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  41d92e:	bf18      	it	ne
  41d930:	3203      	addne	r2, #3
  41d932:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  41d936:	bf18      	it	ne
  41d938:	3203      	addne	r2, #3
  41d93a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  41d93e:	f1c2 0320 	rsb	r3, r2, #32
  41d942:	fa00 fc03 	lsl.w	ip, r0, r3
  41d946:	fa20 f002 	lsr.w	r0, r0, r2
  41d94a:	fa01 fe03 	lsl.w	lr, r1, r3
  41d94e:	ea40 000e 	orr.w	r0, r0, lr
  41d952:	fa21 f102 	lsr.w	r1, r1, r2
  41d956:	4414      	add	r4, r2
  41d958:	e6c1      	b.n	41d6de <__adddf3+0xe6>
  41d95a:	bf00      	nop

0041d95c <__aeabi_dmul>:
  41d95c:	b570      	push	{r4, r5, r6, lr}
  41d95e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  41d962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  41d966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41d96a:	bf1d      	ittte	ne
  41d96c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  41d970:	ea94 0f0c 	teqne	r4, ip
  41d974:	ea95 0f0c 	teqne	r5, ip
  41d978:	f000 f8de 	bleq	41db38 <__aeabi_dmul+0x1dc>
  41d97c:	442c      	add	r4, r5
  41d97e:	ea81 0603 	eor.w	r6, r1, r3
  41d982:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  41d986:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  41d98a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  41d98e:	bf18      	it	ne
  41d990:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  41d994:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41d998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  41d99c:	d038      	beq.n	41da10 <__aeabi_dmul+0xb4>
  41d99e:	fba0 ce02 	umull	ip, lr, r0, r2
  41d9a2:	f04f 0500 	mov.w	r5, #0
  41d9a6:	fbe1 e502 	umlal	lr, r5, r1, r2
  41d9aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  41d9ae:	fbe0 e503 	umlal	lr, r5, r0, r3
  41d9b2:	f04f 0600 	mov.w	r6, #0
  41d9b6:	fbe1 5603 	umlal	r5, r6, r1, r3
  41d9ba:	f09c 0f00 	teq	ip, #0
  41d9be:	bf18      	it	ne
  41d9c0:	f04e 0e01 	orrne.w	lr, lr, #1
  41d9c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  41d9c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  41d9cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  41d9d0:	d204      	bcs.n	41d9dc <__aeabi_dmul+0x80>
  41d9d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  41d9d6:	416d      	adcs	r5, r5
  41d9d8:	eb46 0606 	adc.w	r6, r6, r6
  41d9dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  41d9e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  41d9e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  41d9e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  41d9ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  41d9f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  41d9f4:	bf88      	it	hi
  41d9f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  41d9fa:	d81e      	bhi.n	41da3a <__aeabi_dmul+0xde>
  41d9fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  41da00:	bf08      	it	eq
  41da02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  41da06:	f150 0000 	adcs.w	r0, r0, #0
  41da0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41da0e:	bd70      	pop	{r4, r5, r6, pc}
  41da10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  41da14:	ea46 0101 	orr.w	r1, r6, r1
  41da18:	ea40 0002 	orr.w	r0, r0, r2
  41da1c:	ea81 0103 	eor.w	r1, r1, r3
  41da20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  41da24:	bfc2      	ittt	gt
  41da26:	ebd4 050c 	rsbsgt	r5, r4, ip
  41da2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  41da2e:	bd70      	popgt	{r4, r5, r6, pc}
  41da30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41da34:	f04f 0e00 	mov.w	lr, #0
  41da38:	3c01      	subs	r4, #1
  41da3a:	f300 80ab 	bgt.w	41db94 <__aeabi_dmul+0x238>
  41da3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  41da42:	bfde      	ittt	le
  41da44:	2000      	movle	r0, #0
  41da46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  41da4a:	bd70      	pople	{r4, r5, r6, pc}
  41da4c:	f1c4 0400 	rsb	r4, r4, #0
  41da50:	3c20      	subs	r4, #32
  41da52:	da35      	bge.n	41dac0 <__aeabi_dmul+0x164>
  41da54:	340c      	adds	r4, #12
  41da56:	dc1b      	bgt.n	41da90 <__aeabi_dmul+0x134>
  41da58:	f104 0414 	add.w	r4, r4, #20
  41da5c:	f1c4 0520 	rsb	r5, r4, #32
  41da60:	fa00 f305 	lsl.w	r3, r0, r5
  41da64:	fa20 f004 	lsr.w	r0, r0, r4
  41da68:	fa01 f205 	lsl.w	r2, r1, r5
  41da6c:	ea40 0002 	orr.w	r0, r0, r2
  41da70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  41da74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  41da78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41da7c:	fa21 f604 	lsr.w	r6, r1, r4
  41da80:	eb42 0106 	adc.w	r1, r2, r6
  41da84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41da88:	bf08      	it	eq
  41da8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41da8e:	bd70      	pop	{r4, r5, r6, pc}
  41da90:	f1c4 040c 	rsb	r4, r4, #12
  41da94:	f1c4 0520 	rsb	r5, r4, #32
  41da98:	fa00 f304 	lsl.w	r3, r0, r4
  41da9c:	fa20 f005 	lsr.w	r0, r0, r5
  41daa0:	fa01 f204 	lsl.w	r2, r1, r4
  41daa4:	ea40 0002 	orr.w	r0, r0, r2
  41daa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41daac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41dab0:	f141 0100 	adc.w	r1, r1, #0
  41dab4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41dab8:	bf08      	it	eq
  41daba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41dabe:	bd70      	pop	{r4, r5, r6, pc}
  41dac0:	f1c4 0520 	rsb	r5, r4, #32
  41dac4:	fa00 f205 	lsl.w	r2, r0, r5
  41dac8:	ea4e 0e02 	orr.w	lr, lr, r2
  41dacc:	fa20 f304 	lsr.w	r3, r0, r4
  41dad0:	fa01 f205 	lsl.w	r2, r1, r5
  41dad4:	ea43 0302 	orr.w	r3, r3, r2
  41dad8:	fa21 f004 	lsr.w	r0, r1, r4
  41dadc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41dae0:	fa21 f204 	lsr.w	r2, r1, r4
  41dae4:	ea20 0002 	bic.w	r0, r0, r2
  41dae8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  41daec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41daf0:	bf08      	it	eq
  41daf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41daf6:	bd70      	pop	{r4, r5, r6, pc}
  41daf8:	f094 0f00 	teq	r4, #0
  41dafc:	d10f      	bne.n	41db1e <__aeabi_dmul+0x1c2>
  41dafe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  41db02:	0040      	lsls	r0, r0, #1
  41db04:	eb41 0101 	adc.w	r1, r1, r1
  41db08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41db0c:	bf08      	it	eq
  41db0e:	3c01      	subeq	r4, #1
  41db10:	d0f7      	beq.n	41db02 <__aeabi_dmul+0x1a6>
  41db12:	ea41 0106 	orr.w	r1, r1, r6
  41db16:	f095 0f00 	teq	r5, #0
  41db1a:	bf18      	it	ne
  41db1c:	4770      	bxne	lr
  41db1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  41db22:	0052      	lsls	r2, r2, #1
  41db24:	eb43 0303 	adc.w	r3, r3, r3
  41db28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  41db2c:	bf08      	it	eq
  41db2e:	3d01      	subeq	r5, #1
  41db30:	d0f7      	beq.n	41db22 <__aeabi_dmul+0x1c6>
  41db32:	ea43 0306 	orr.w	r3, r3, r6
  41db36:	4770      	bx	lr
  41db38:	ea94 0f0c 	teq	r4, ip
  41db3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  41db40:	bf18      	it	ne
  41db42:	ea95 0f0c 	teqne	r5, ip
  41db46:	d00c      	beq.n	41db62 <__aeabi_dmul+0x206>
  41db48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41db4c:	bf18      	it	ne
  41db4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41db52:	d1d1      	bne.n	41daf8 <__aeabi_dmul+0x19c>
  41db54:	ea81 0103 	eor.w	r1, r1, r3
  41db58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41db5c:	f04f 0000 	mov.w	r0, #0
  41db60:	bd70      	pop	{r4, r5, r6, pc}
  41db62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41db66:	bf06      	itte	eq
  41db68:	4610      	moveq	r0, r2
  41db6a:	4619      	moveq	r1, r3
  41db6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41db70:	d019      	beq.n	41dba6 <__aeabi_dmul+0x24a>
  41db72:	ea94 0f0c 	teq	r4, ip
  41db76:	d102      	bne.n	41db7e <__aeabi_dmul+0x222>
  41db78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  41db7c:	d113      	bne.n	41dba6 <__aeabi_dmul+0x24a>
  41db7e:	ea95 0f0c 	teq	r5, ip
  41db82:	d105      	bne.n	41db90 <__aeabi_dmul+0x234>
  41db84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  41db88:	bf1c      	itt	ne
  41db8a:	4610      	movne	r0, r2
  41db8c:	4619      	movne	r1, r3
  41db8e:	d10a      	bne.n	41dba6 <__aeabi_dmul+0x24a>
  41db90:	ea81 0103 	eor.w	r1, r1, r3
  41db94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41db98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  41db9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  41dba0:	f04f 0000 	mov.w	r0, #0
  41dba4:	bd70      	pop	{r4, r5, r6, pc}
  41dba6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  41dbaa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  41dbae:	bd70      	pop	{r4, r5, r6, pc}

0041dbb0 <__aeabi_ddiv>:
  41dbb0:	b570      	push	{r4, r5, r6, lr}
  41dbb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  41dbb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  41dbba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41dbbe:	bf1d      	ittte	ne
  41dbc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  41dbc4:	ea94 0f0c 	teqne	r4, ip
  41dbc8:	ea95 0f0c 	teqne	r5, ip
  41dbcc:	f000 f8a7 	bleq	41dd1e <__aeabi_ddiv+0x16e>
  41dbd0:	eba4 0405 	sub.w	r4, r4, r5
  41dbd4:	ea81 0e03 	eor.w	lr, r1, r3
  41dbd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  41dbdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  41dbe0:	f000 8088 	beq.w	41dcf4 <__aeabi_ddiv+0x144>
  41dbe4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  41dbe8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  41dbec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  41dbf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  41dbf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  41dbf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  41dbfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  41dc00:	ea4f 2600 	mov.w	r6, r0, lsl #8
  41dc04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  41dc08:	429d      	cmp	r5, r3
  41dc0a:	bf08      	it	eq
  41dc0c:	4296      	cmpeq	r6, r2
  41dc0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  41dc12:	f504 7440 	add.w	r4, r4, #768	; 0x300
  41dc16:	d202      	bcs.n	41dc1e <__aeabi_ddiv+0x6e>
  41dc18:	085b      	lsrs	r3, r3, #1
  41dc1a:	ea4f 0232 	mov.w	r2, r2, rrx
  41dc1e:	1ab6      	subs	r6, r6, r2
  41dc20:	eb65 0503 	sbc.w	r5, r5, r3
  41dc24:	085b      	lsrs	r3, r3, #1
  41dc26:	ea4f 0232 	mov.w	r2, r2, rrx
  41dc2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  41dc2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  41dc32:	ebb6 0e02 	subs.w	lr, r6, r2
  41dc36:	eb75 0e03 	sbcs.w	lr, r5, r3
  41dc3a:	bf22      	ittt	cs
  41dc3c:	1ab6      	subcs	r6, r6, r2
  41dc3e:	4675      	movcs	r5, lr
  41dc40:	ea40 000c 	orrcs.w	r0, r0, ip
  41dc44:	085b      	lsrs	r3, r3, #1
  41dc46:	ea4f 0232 	mov.w	r2, r2, rrx
  41dc4a:	ebb6 0e02 	subs.w	lr, r6, r2
  41dc4e:	eb75 0e03 	sbcs.w	lr, r5, r3
  41dc52:	bf22      	ittt	cs
  41dc54:	1ab6      	subcs	r6, r6, r2
  41dc56:	4675      	movcs	r5, lr
  41dc58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  41dc5c:	085b      	lsrs	r3, r3, #1
  41dc5e:	ea4f 0232 	mov.w	r2, r2, rrx
  41dc62:	ebb6 0e02 	subs.w	lr, r6, r2
  41dc66:	eb75 0e03 	sbcs.w	lr, r5, r3
  41dc6a:	bf22      	ittt	cs
  41dc6c:	1ab6      	subcs	r6, r6, r2
  41dc6e:	4675      	movcs	r5, lr
  41dc70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  41dc74:	085b      	lsrs	r3, r3, #1
  41dc76:	ea4f 0232 	mov.w	r2, r2, rrx
  41dc7a:	ebb6 0e02 	subs.w	lr, r6, r2
  41dc7e:	eb75 0e03 	sbcs.w	lr, r5, r3
  41dc82:	bf22      	ittt	cs
  41dc84:	1ab6      	subcs	r6, r6, r2
  41dc86:	4675      	movcs	r5, lr
  41dc88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  41dc8c:	ea55 0e06 	orrs.w	lr, r5, r6
  41dc90:	d018      	beq.n	41dcc4 <__aeabi_ddiv+0x114>
  41dc92:	ea4f 1505 	mov.w	r5, r5, lsl #4
  41dc96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  41dc9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  41dc9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  41dca2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  41dca6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  41dcaa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  41dcae:	d1c0      	bne.n	41dc32 <__aeabi_ddiv+0x82>
  41dcb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41dcb4:	d10b      	bne.n	41dcce <__aeabi_ddiv+0x11e>
  41dcb6:	ea41 0100 	orr.w	r1, r1, r0
  41dcba:	f04f 0000 	mov.w	r0, #0
  41dcbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  41dcc2:	e7b6      	b.n	41dc32 <__aeabi_ddiv+0x82>
  41dcc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41dcc8:	bf04      	itt	eq
  41dcca:	4301      	orreq	r1, r0
  41dccc:	2000      	moveq	r0, #0
  41dcce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  41dcd2:	bf88      	it	hi
  41dcd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  41dcd8:	f63f aeaf 	bhi.w	41da3a <__aeabi_dmul+0xde>
  41dcdc:	ebb5 0c03 	subs.w	ip, r5, r3
  41dce0:	bf04      	itt	eq
  41dce2:	ebb6 0c02 	subseq.w	ip, r6, r2
  41dce6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  41dcea:	f150 0000 	adcs.w	r0, r0, #0
  41dcee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41dcf2:	bd70      	pop	{r4, r5, r6, pc}
  41dcf4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  41dcf8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  41dcfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  41dd00:	bfc2      	ittt	gt
  41dd02:	ebd4 050c 	rsbsgt	r5, r4, ip
  41dd06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  41dd0a:	bd70      	popgt	{r4, r5, r6, pc}
  41dd0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41dd10:	f04f 0e00 	mov.w	lr, #0
  41dd14:	3c01      	subs	r4, #1
  41dd16:	e690      	b.n	41da3a <__aeabi_dmul+0xde>
  41dd18:	ea45 0e06 	orr.w	lr, r5, r6
  41dd1c:	e68d      	b.n	41da3a <__aeabi_dmul+0xde>
  41dd1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  41dd22:	ea94 0f0c 	teq	r4, ip
  41dd26:	bf08      	it	eq
  41dd28:	ea95 0f0c 	teqeq	r5, ip
  41dd2c:	f43f af3b 	beq.w	41dba6 <__aeabi_dmul+0x24a>
  41dd30:	ea94 0f0c 	teq	r4, ip
  41dd34:	d10a      	bne.n	41dd4c <__aeabi_ddiv+0x19c>
  41dd36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41dd3a:	f47f af34 	bne.w	41dba6 <__aeabi_dmul+0x24a>
  41dd3e:	ea95 0f0c 	teq	r5, ip
  41dd42:	f47f af25 	bne.w	41db90 <__aeabi_dmul+0x234>
  41dd46:	4610      	mov	r0, r2
  41dd48:	4619      	mov	r1, r3
  41dd4a:	e72c      	b.n	41dba6 <__aeabi_dmul+0x24a>
  41dd4c:	ea95 0f0c 	teq	r5, ip
  41dd50:	d106      	bne.n	41dd60 <__aeabi_ddiv+0x1b0>
  41dd52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  41dd56:	f43f aefd 	beq.w	41db54 <__aeabi_dmul+0x1f8>
  41dd5a:	4610      	mov	r0, r2
  41dd5c:	4619      	mov	r1, r3
  41dd5e:	e722      	b.n	41dba6 <__aeabi_dmul+0x24a>
  41dd60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41dd64:	bf18      	it	ne
  41dd66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41dd6a:	f47f aec5 	bne.w	41daf8 <__aeabi_dmul+0x19c>
  41dd6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  41dd72:	f47f af0d 	bne.w	41db90 <__aeabi_dmul+0x234>
  41dd76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  41dd7a:	f47f aeeb 	bne.w	41db54 <__aeabi_dmul+0x1f8>
  41dd7e:	e712      	b.n	41dba6 <__aeabi_dmul+0x24a>

0041dd80 <__aeabi_d2uiz>:
  41dd80:	004a      	lsls	r2, r1, #1
  41dd82:	d211      	bcs.n	41dda8 <__aeabi_d2uiz+0x28>
  41dd84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  41dd88:	d211      	bcs.n	41ddae <__aeabi_d2uiz+0x2e>
  41dd8a:	d50d      	bpl.n	41dda8 <__aeabi_d2uiz+0x28>
  41dd8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  41dd90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  41dd94:	d40e      	bmi.n	41ddb4 <__aeabi_d2uiz+0x34>
  41dd96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41dd9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  41dd9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  41dda2:	fa23 f002 	lsr.w	r0, r3, r2
  41dda6:	4770      	bx	lr
  41dda8:	f04f 0000 	mov.w	r0, #0
  41ddac:	4770      	bx	lr
  41ddae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  41ddb2:	d102      	bne.n	41ddba <__aeabi_d2uiz+0x3a>
  41ddb4:	f04f 30ff 	mov.w	r0, #4294967295
  41ddb8:	4770      	bx	lr
  41ddba:	f04f 0000 	mov.w	r0, #0
  41ddbe:	4770      	bx	lr

0041ddc0 <__aeabi_d2f>:
  41ddc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  41ddc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  41ddc8:	bf24      	itt	cs
  41ddca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  41ddce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  41ddd2:	d90d      	bls.n	41ddf0 <__aeabi_d2f+0x30>
  41ddd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  41ddd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  41dddc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  41dde0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  41dde4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  41dde8:	bf08      	it	eq
  41ddea:	f020 0001 	biceq.w	r0, r0, #1
  41ddee:	4770      	bx	lr
  41ddf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  41ddf4:	d121      	bne.n	41de3a <__aeabi_d2f+0x7a>
  41ddf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  41ddfa:	bfbc      	itt	lt
  41ddfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  41de00:	4770      	bxlt	lr
  41de02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41de06:	ea4f 5252 	mov.w	r2, r2, lsr #21
  41de0a:	f1c2 0218 	rsb	r2, r2, #24
  41de0e:	f1c2 0c20 	rsb	ip, r2, #32
  41de12:	fa10 f30c 	lsls.w	r3, r0, ip
  41de16:	fa20 f002 	lsr.w	r0, r0, r2
  41de1a:	bf18      	it	ne
  41de1c:	f040 0001 	orrne.w	r0, r0, #1
  41de20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41de24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  41de28:	fa03 fc0c 	lsl.w	ip, r3, ip
  41de2c:	ea40 000c 	orr.w	r0, r0, ip
  41de30:	fa23 f302 	lsr.w	r3, r3, r2
  41de34:	ea4f 0343 	mov.w	r3, r3, lsl #1
  41de38:	e7cc      	b.n	41ddd4 <__aeabi_d2f+0x14>
  41de3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  41de3e:	d107      	bne.n	41de50 <__aeabi_d2f+0x90>
  41de40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  41de44:	bf1e      	ittt	ne
  41de46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  41de4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  41de4e:	4770      	bxne	lr
  41de50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  41de54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  41de58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  41de5c:	4770      	bx	lr
  41de5e:	bf00      	nop

0041de60 <__aeabi_uldivmod>:
  41de60:	b953      	cbnz	r3, 41de78 <__aeabi_uldivmod+0x18>
  41de62:	b94a      	cbnz	r2, 41de78 <__aeabi_uldivmod+0x18>
  41de64:	2900      	cmp	r1, #0
  41de66:	bf08      	it	eq
  41de68:	2800      	cmpeq	r0, #0
  41de6a:	bf1c      	itt	ne
  41de6c:	f04f 31ff 	movne.w	r1, #4294967295
  41de70:	f04f 30ff 	movne.w	r0, #4294967295
  41de74:	f000 b97a 	b.w	41e16c <__aeabi_idiv0>
  41de78:	f1ad 0c08 	sub.w	ip, sp, #8
  41de7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  41de80:	f000 f806 	bl	41de90 <__udivmoddi4>
  41de84:	f8dd e004 	ldr.w	lr, [sp, #4]
  41de88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  41de8c:	b004      	add	sp, #16
  41de8e:	4770      	bx	lr

0041de90 <__udivmoddi4>:
  41de90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41de94:	468c      	mov	ip, r1
  41de96:	460d      	mov	r5, r1
  41de98:	4604      	mov	r4, r0
  41de9a:	9e08      	ldr	r6, [sp, #32]
  41de9c:	2b00      	cmp	r3, #0
  41de9e:	d151      	bne.n	41df44 <__udivmoddi4+0xb4>
  41dea0:	428a      	cmp	r2, r1
  41dea2:	4617      	mov	r7, r2
  41dea4:	d96d      	bls.n	41df82 <__udivmoddi4+0xf2>
  41dea6:	fab2 fe82 	clz	lr, r2
  41deaa:	f1be 0f00 	cmp.w	lr, #0
  41deae:	d00b      	beq.n	41dec8 <__udivmoddi4+0x38>
  41deb0:	f1ce 0c20 	rsb	ip, lr, #32
  41deb4:	fa01 f50e 	lsl.w	r5, r1, lr
  41deb8:	fa20 fc0c 	lsr.w	ip, r0, ip
  41debc:	fa02 f70e 	lsl.w	r7, r2, lr
  41dec0:	ea4c 0c05 	orr.w	ip, ip, r5
  41dec4:	fa00 f40e 	lsl.w	r4, r0, lr
  41dec8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  41decc:	0c25      	lsrs	r5, r4, #16
  41dece:	fbbc f8fa 	udiv	r8, ip, sl
  41ded2:	fa1f f987 	uxth.w	r9, r7
  41ded6:	fb0a cc18 	mls	ip, sl, r8, ip
  41deda:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  41dede:	fb08 f309 	mul.w	r3, r8, r9
  41dee2:	42ab      	cmp	r3, r5
  41dee4:	d90a      	bls.n	41defc <__udivmoddi4+0x6c>
  41dee6:	19ed      	adds	r5, r5, r7
  41dee8:	f108 32ff 	add.w	r2, r8, #4294967295
  41deec:	f080 8123 	bcs.w	41e136 <__udivmoddi4+0x2a6>
  41def0:	42ab      	cmp	r3, r5
  41def2:	f240 8120 	bls.w	41e136 <__udivmoddi4+0x2a6>
  41def6:	f1a8 0802 	sub.w	r8, r8, #2
  41defa:	443d      	add	r5, r7
  41defc:	1aed      	subs	r5, r5, r3
  41defe:	b2a4      	uxth	r4, r4
  41df00:	fbb5 f0fa 	udiv	r0, r5, sl
  41df04:	fb0a 5510 	mls	r5, sl, r0, r5
  41df08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  41df0c:	fb00 f909 	mul.w	r9, r0, r9
  41df10:	45a1      	cmp	r9, r4
  41df12:	d909      	bls.n	41df28 <__udivmoddi4+0x98>
  41df14:	19e4      	adds	r4, r4, r7
  41df16:	f100 33ff 	add.w	r3, r0, #4294967295
  41df1a:	f080 810a 	bcs.w	41e132 <__udivmoddi4+0x2a2>
  41df1e:	45a1      	cmp	r9, r4
  41df20:	f240 8107 	bls.w	41e132 <__udivmoddi4+0x2a2>
  41df24:	3802      	subs	r0, #2
  41df26:	443c      	add	r4, r7
  41df28:	eba4 0409 	sub.w	r4, r4, r9
  41df2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  41df30:	2100      	movs	r1, #0
  41df32:	2e00      	cmp	r6, #0
  41df34:	d061      	beq.n	41dffa <__udivmoddi4+0x16a>
  41df36:	fa24 f40e 	lsr.w	r4, r4, lr
  41df3a:	2300      	movs	r3, #0
  41df3c:	6034      	str	r4, [r6, #0]
  41df3e:	6073      	str	r3, [r6, #4]
  41df40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41df44:	428b      	cmp	r3, r1
  41df46:	d907      	bls.n	41df58 <__udivmoddi4+0xc8>
  41df48:	2e00      	cmp	r6, #0
  41df4a:	d054      	beq.n	41dff6 <__udivmoddi4+0x166>
  41df4c:	2100      	movs	r1, #0
  41df4e:	e886 0021 	stmia.w	r6, {r0, r5}
  41df52:	4608      	mov	r0, r1
  41df54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41df58:	fab3 f183 	clz	r1, r3
  41df5c:	2900      	cmp	r1, #0
  41df5e:	f040 808e 	bne.w	41e07e <__udivmoddi4+0x1ee>
  41df62:	42ab      	cmp	r3, r5
  41df64:	d302      	bcc.n	41df6c <__udivmoddi4+0xdc>
  41df66:	4282      	cmp	r2, r0
  41df68:	f200 80fa 	bhi.w	41e160 <__udivmoddi4+0x2d0>
  41df6c:	1a84      	subs	r4, r0, r2
  41df6e:	eb65 0503 	sbc.w	r5, r5, r3
  41df72:	2001      	movs	r0, #1
  41df74:	46ac      	mov	ip, r5
  41df76:	2e00      	cmp	r6, #0
  41df78:	d03f      	beq.n	41dffa <__udivmoddi4+0x16a>
  41df7a:	e886 1010 	stmia.w	r6, {r4, ip}
  41df7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41df82:	b912      	cbnz	r2, 41df8a <__udivmoddi4+0xfa>
  41df84:	2701      	movs	r7, #1
  41df86:	fbb7 f7f2 	udiv	r7, r7, r2
  41df8a:	fab7 fe87 	clz	lr, r7
  41df8e:	f1be 0f00 	cmp.w	lr, #0
  41df92:	d134      	bne.n	41dffe <__udivmoddi4+0x16e>
  41df94:	1beb      	subs	r3, r5, r7
  41df96:	0c3a      	lsrs	r2, r7, #16
  41df98:	fa1f fc87 	uxth.w	ip, r7
  41df9c:	2101      	movs	r1, #1
  41df9e:	fbb3 f8f2 	udiv	r8, r3, r2
  41dfa2:	0c25      	lsrs	r5, r4, #16
  41dfa4:	fb02 3318 	mls	r3, r2, r8, r3
  41dfa8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  41dfac:	fb0c f308 	mul.w	r3, ip, r8
  41dfb0:	42ab      	cmp	r3, r5
  41dfb2:	d907      	bls.n	41dfc4 <__udivmoddi4+0x134>
  41dfb4:	19ed      	adds	r5, r5, r7
  41dfb6:	f108 30ff 	add.w	r0, r8, #4294967295
  41dfba:	d202      	bcs.n	41dfc2 <__udivmoddi4+0x132>
  41dfbc:	42ab      	cmp	r3, r5
  41dfbe:	f200 80d1 	bhi.w	41e164 <__udivmoddi4+0x2d4>
  41dfc2:	4680      	mov	r8, r0
  41dfc4:	1aed      	subs	r5, r5, r3
  41dfc6:	b2a3      	uxth	r3, r4
  41dfc8:	fbb5 f0f2 	udiv	r0, r5, r2
  41dfcc:	fb02 5510 	mls	r5, r2, r0, r5
  41dfd0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  41dfd4:	fb0c fc00 	mul.w	ip, ip, r0
  41dfd8:	45a4      	cmp	ip, r4
  41dfda:	d907      	bls.n	41dfec <__udivmoddi4+0x15c>
  41dfdc:	19e4      	adds	r4, r4, r7
  41dfde:	f100 33ff 	add.w	r3, r0, #4294967295
  41dfe2:	d202      	bcs.n	41dfea <__udivmoddi4+0x15a>
  41dfe4:	45a4      	cmp	ip, r4
  41dfe6:	f200 80b8 	bhi.w	41e15a <__udivmoddi4+0x2ca>
  41dfea:	4618      	mov	r0, r3
  41dfec:	eba4 040c 	sub.w	r4, r4, ip
  41dff0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  41dff4:	e79d      	b.n	41df32 <__udivmoddi4+0xa2>
  41dff6:	4631      	mov	r1, r6
  41dff8:	4630      	mov	r0, r6
  41dffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41dffe:	f1ce 0420 	rsb	r4, lr, #32
  41e002:	fa05 f30e 	lsl.w	r3, r5, lr
  41e006:	fa07 f70e 	lsl.w	r7, r7, lr
  41e00a:	fa20 f804 	lsr.w	r8, r0, r4
  41e00e:	0c3a      	lsrs	r2, r7, #16
  41e010:	fa25 f404 	lsr.w	r4, r5, r4
  41e014:	ea48 0803 	orr.w	r8, r8, r3
  41e018:	fbb4 f1f2 	udiv	r1, r4, r2
  41e01c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  41e020:	fb02 4411 	mls	r4, r2, r1, r4
  41e024:	fa1f fc87 	uxth.w	ip, r7
  41e028:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  41e02c:	fb01 f30c 	mul.w	r3, r1, ip
  41e030:	42ab      	cmp	r3, r5
  41e032:	fa00 f40e 	lsl.w	r4, r0, lr
  41e036:	d909      	bls.n	41e04c <__udivmoddi4+0x1bc>
  41e038:	19ed      	adds	r5, r5, r7
  41e03a:	f101 30ff 	add.w	r0, r1, #4294967295
  41e03e:	f080 808a 	bcs.w	41e156 <__udivmoddi4+0x2c6>
  41e042:	42ab      	cmp	r3, r5
  41e044:	f240 8087 	bls.w	41e156 <__udivmoddi4+0x2c6>
  41e048:	3902      	subs	r1, #2
  41e04a:	443d      	add	r5, r7
  41e04c:	1aeb      	subs	r3, r5, r3
  41e04e:	fa1f f588 	uxth.w	r5, r8
  41e052:	fbb3 f0f2 	udiv	r0, r3, r2
  41e056:	fb02 3310 	mls	r3, r2, r0, r3
  41e05a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  41e05e:	fb00 f30c 	mul.w	r3, r0, ip
  41e062:	42ab      	cmp	r3, r5
  41e064:	d907      	bls.n	41e076 <__udivmoddi4+0x1e6>
  41e066:	19ed      	adds	r5, r5, r7
  41e068:	f100 38ff 	add.w	r8, r0, #4294967295
  41e06c:	d26f      	bcs.n	41e14e <__udivmoddi4+0x2be>
  41e06e:	42ab      	cmp	r3, r5
  41e070:	d96d      	bls.n	41e14e <__udivmoddi4+0x2be>
  41e072:	3802      	subs	r0, #2
  41e074:	443d      	add	r5, r7
  41e076:	1aeb      	subs	r3, r5, r3
  41e078:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  41e07c:	e78f      	b.n	41df9e <__udivmoddi4+0x10e>
  41e07e:	f1c1 0720 	rsb	r7, r1, #32
  41e082:	fa22 f807 	lsr.w	r8, r2, r7
  41e086:	408b      	lsls	r3, r1
  41e088:	fa05 f401 	lsl.w	r4, r5, r1
  41e08c:	ea48 0303 	orr.w	r3, r8, r3
  41e090:	fa20 fe07 	lsr.w	lr, r0, r7
  41e094:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  41e098:	40fd      	lsrs	r5, r7
  41e09a:	ea4e 0e04 	orr.w	lr, lr, r4
  41e09e:	fbb5 f9fc 	udiv	r9, r5, ip
  41e0a2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  41e0a6:	fb0c 5519 	mls	r5, ip, r9, r5
  41e0aa:	fa1f f883 	uxth.w	r8, r3
  41e0ae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  41e0b2:	fb09 f408 	mul.w	r4, r9, r8
  41e0b6:	42ac      	cmp	r4, r5
  41e0b8:	fa02 f201 	lsl.w	r2, r2, r1
  41e0bc:	fa00 fa01 	lsl.w	sl, r0, r1
  41e0c0:	d908      	bls.n	41e0d4 <__udivmoddi4+0x244>
  41e0c2:	18ed      	adds	r5, r5, r3
  41e0c4:	f109 30ff 	add.w	r0, r9, #4294967295
  41e0c8:	d243      	bcs.n	41e152 <__udivmoddi4+0x2c2>
  41e0ca:	42ac      	cmp	r4, r5
  41e0cc:	d941      	bls.n	41e152 <__udivmoddi4+0x2c2>
  41e0ce:	f1a9 0902 	sub.w	r9, r9, #2
  41e0d2:	441d      	add	r5, r3
  41e0d4:	1b2d      	subs	r5, r5, r4
  41e0d6:	fa1f fe8e 	uxth.w	lr, lr
  41e0da:	fbb5 f0fc 	udiv	r0, r5, ip
  41e0de:	fb0c 5510 	mls	r5, ip, r0, r5
  41e0e2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  41e0e6:	fb00 f808 	mul.w	r8, r0, r8
  41e0ea:	45a0      	cmp	r8, r4
  41e0ec:	d907      	bls.n	41e0fe <__udivmoddi4+0x26e>
  41e0ee:	18e4      	adds	r4, r4, r3
  41e0f0:	f100 35ff 	add.w	r5, r0, #4294967295
  41e0f4:	d229      	bcs.n	41e14a <__udivmoddi4+0x2ba>
  41e0f6:	45a0      	cmp	r8, r4
  41e0f8:	d927      	bls.n	41e14a <__udivmoddi4+0x2ba>
  41e0fa:	3802      	subs	r0, #2
  41e0fc:	441c      	add	r4, r3
  41e0fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  41e102:	eba4 0408 	sub.w	r4, r4, r8
  41e106:	fba0 8902 	umull	r8, r9, r0, r2
  41e10a:	454c      	cmp	r4, r9
  41e10c:	46c6      	mov	lr, r8
  41e10e:	464d      	mov	r5, r9
  41e110:	d315      	bcc.n	41e13e <__udivmoddi4+0x2ae>
  41e112:	d012      	beq.n	41e13a <__udivmoddi4+0x2aa>
  41e114:	b156      	cbz	r6, 41e12c <__udivmoddi4+0x29c>
  41e116:	ebba 030e 	subs.w	r3, sl, lr
  41e11a:	eb64 0405 	sbc.w	r4, r4, r5
  41e11e:	fa04 f707 	lsl.w	r7, r4, r7
  41e122:	40cb      	lsrs	r3, r1
  41e124:	431f      	orrs	r7, r3
  41e126:	40cc      	lsrs	r4, r1
  41e128:	6037      	str	r7, [r6, #0]
  41e12a:	6074      	str	r4, [r6, #4]
  41e12c:	2100      	movs	r1, #0
  41e12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41e132:	4618      	mov	r0, r3
  41e134:	e6f8      	b.n	41df28 <__udivmoddi4+0x98>
  41e136:	4690      	mov	r8, r2
  41e138:	e6e0      	b.n	41defc <__udivmoddi4+0x6c>
  41e13a:	45c2      	cmp	sl, r8
  41e13c:	d2ea      	bcs.n	41e114 <__udivmoddi4+0x284>
  41e13e:	ebb8 0e02 	subs.w	lr, r8, r2
  41e142:	eb69 0503 	sbc.w	r5, r9, r3
  41e146:	3801      	subs	r0, #1
  41e148:	e7e4      	b.n	41e114 <__udivmoddi4+0x284>
  41e14a:	4628      	mov	r0, r5
  41e14c:	e7d7      	b.n	41e0fe <__udivmoddi4+0x26e>
  41e14e:	4640      	mov	r0, r8
  41e150:	e791      	b.n	41e076 <__udivmoddi4+0x1e6>
  41e152:	4681      	mov	r9, r0
  41e154:	e7be      	b.n	41e0d4 <__udivmoddi4+0x244>
  41e156:	4601      	mov	r1, r0
  41e158:	e778      	b.n	41e04c <__udivmoddi4+0x1bc>
  41e15a:	3802      	subs	r0, #2
  41e15c:	443c      	add	r4, r7
  41e15e:	e745      	b.n	41dfec <__udivmoddi4+0x15c>
  41e160:	4608      	mov	r0, r1
  41e162:	e708      	b.n	41df76 <__udivmoddi4+0xe6>
  41e164:	f1a8 0802 	sub.w	r8, r8, #2
  41e168:	443d      	add	r5, r7
  41e16a:	e72b      	b.n	41dfc4 <__udivmoddi4+0x134>

0041e16c <__aeabi_idiv0>:
  41e16c:	4770      	bx	lr
  41e16e:	bf00      	nop

0041e170 <__libc_init_array>:
  41e170:	b570      	push	{r4, r5, r6, lr}
  41e172:	4e0f      	ldr	r6, [pc, #60]	; (41e1b0 <__libc_init_array+0x40>)
  41e174:	4d0f      	ldr	r5, [pc, #60]	; (41e1b4 <__libc_init_array+0x44>)
  41e176:	1b76      	subs	r6, r6, r5
  41e178:	10b6      	asrs	r6, r6, #2
  41e17a:	bf18      	it	ne
  41e17c:	2400      	movne	r4, #0
  41e17e:	d005      	beq.n	41e18c <__libc_init_array+0x1c>
  41e180:	3401      	adds	r4, #1
  41e182:	f855 3b04 	ldr.w	r3, [r5], #4
  41e186:	4798      	blx	r3
  41e188:	42a6      	cmp	r6, r4
  41e18a:	d1f9      	bne.n	41e180 <__libc_init_array+0x10>
  41e18c:	4e0a      	ldr	r6, [pc, #40]	; (41e1b8 <__libc_init_array+0x48>)
  41e18e:	4d0b      	ldr	r5, [pc, #44]	; (41e1bc <__libc_init_array+0x4c>)
  41e190:	1b76      	subs	r6, r6, r5
  41e192:	f039 fb07 	bl	4577a4 <_init>
  41e196:	10b6      	asrs	r6, r6, #2
  41e198:	bf18      	it	ne
  41e19a:	2400      	movne	r4, #0
  41e19c:	d006      	beq.n	41e1ac <__libc_init_array+0x3c>
  41e19e:	3401      	adds	r4, #1
  41e1a0:	f855 3b04 	ldr.w	r3, [r5], #4
  41e1a4:	4798      	blx	r3
  41e1a6:	42a6      	cmp	r6, r4
  41e1a8:	d1f9      	bne.n	41e19e <__libc_init_array+0x2e>
  41e1aa:	bd70      	pop	{r4, r5, r6, pc}
  41e1ac:	bd70      	pop	{r4, r5, r6, pc}
  41e1ae:	bf00      	nop
  41e1b0:	004577b0 	.word	0x004577b0
  41e1b4:	004577b0 	.word	0x004577b0
  41e1b8:	004577b8 	.word	0x004577b8
  41e1bc:	004577b0 	.word	0x004577b0

0041e1c0 <iprintf>:
  41e1c0:	b40f      	push	{r0, r1, r2, r3}
  41e1c2:	b500      	push	{lr}
  41e1c4:	4907      	ldr	r1, [pc, #28]	; (41e1e4 <iprintf+0x24>)
  41e1c6:	b083      	sub	sp, #12
  41e1c8:	ab04      	add	r3, sp, #16
  41e1ca:	6808      	ldr	r0, [r1, #0]
  41e1cc:	f853 2b04 	ldr.w	r2, [r3], #4
  41e1d0:	6881      	ldr	r1, [r0, #8]
  41e1d2:	9301      	str	r3, [sp, #4]
  41e1d4:	f000 ff82 	bl	41f0dc <_vfiprintf_r>
  41e1d8:	b003      	add	sp, #12
  41e1da:	f85d eb04 	ldr.w	lr, [sp], #4
  41e1de:	b004      	add	sp, #16
  41e1e0:	4770      	bx	lr
  41e1e2:	bf00      	nop
  41e1e4:	20400060 	.word	0x20400060

0041e1e8 <malloc>:
  41e1e8:	4b02      	ldr	r3, [pc, #8]	; (41e1f4 <malloc+0xc>)
  41e1ea:	4601      	mov	r1, r0
  41e1ec:	6818      	ldr	r0, [r3, #0]
  41e1ee:	f000 b803 	b.w	41e1f8 <_malloc_r>
  41e1f2:	bf00      	nop
  41e1f4:	20400060 	.word	0x20400060

0041e1f8 <_malloc_r>:
  41e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e1fc:	f101 060b 	add.w	r6, r1, #11
  41e200:	2e16      	cmp	r6, #22
  41e202:	b083      	sub	sp, #12
  41e204:	4605      	mov	r5, r0
  41e206:	f240 809e 	bls.w	41e346 <_malloc_r+0x14e>
  41e20a:	f036 0607 	bics.w	r6, r6, #7
  41e20e:	f100 80bd 	bmi.w	41e38c <_malloc_r+0x194>
  41e212:	42b1      	cmp	r1, r6
  41e214:	f200 80ba 	bhi.w	41e38c <_malloc_r+0x194>
  41e218:	f000 fbb6 	bl	41e988 <__malloc_lock>
  41e21c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  41e220:	f0c0 8293 	bcc.w	41e74a <_malloc_r+0x552>
  41e224:	0a73      	lsrs	r3, r6, #9
  41e226:	f000 80b8 	beq.w	41e39a <_malloc_r+0x1a2>
  41e22a:	2b04      	cmp	r3, #4
  41e22c:	f200 8179 	bhi.w	41e522 <_malloc_r+0x32a>
  41e230:	09b3      	lsrs	r3, r6, #6
  41e232:	f103 0039 	add.w	r0, r3, #57	; 0x39
  41e236:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  41e23a:	00c3      	lsls	r3, r0, #3
  41e23c:	4fbf      	ldr	r7, [pc, #764]	; (41e53c <_malloc_r+0x344>)
  41e23e:	443b      	add	r3, r7
  41e240:	f1a3 0108 	sub.w	r1, r3, #8
  41e244:	685c      	ldr	r4, [r3, #4]
  41e246:	42a1      	cmp	r1, r4
  41e248:	d106      	bne.n	41e258 <_malloc_r+0x60>
  41e24a:	e00c      	b.n	41e266 <_malloc_r+0x6e>
  41e24c:	2a00      	cmp	r2, #0
  41e24e:	f280 80aa 	bge.w	41e3a6 <_malloc_r+0x1ae>
  41e252:	68e4      	ldr	r4, [r4, #12]
  41e254:	42a1      	cmp	r1, r4
  41e256:	d006      	beq.n	41e266 <_malloc_r+0x6e>
  41e258:	6863      	ldr	r3, [r4, #4]
  41e25a:	f023 0303 	bic.w	r3, r3, #3
  41e25e:	1b9a      	subs	r2, r3, r6
  41e260:	2a0f      	cmp	r2, #15
  41e262:	ddf3      	ble.n	41e24c <_malloc_r+0x54>
  41e264:	4670      	mov	r0, lr
  41e266:	693c      	ldr	r4, [r7, #16]
  41e268:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 41e550 <_malloc_r+0x358>
  41e26c:	4574      	cmp	r4, lr
  41e26e:	f000 81ab 	beq.w	41e5c8 <_malloc_r+0x3d0>
  41e272:	6863      	ldr	r3, [r4, #4]
  41e274:	f023 0303 	bic.w	r3, r3, #3
  41e278:	1b9a      	subs	r2, r3, r6
  41e27a:	2a0f      	cmp	r2, #15
  41e27c:	f300 8190 	bgt.w	41e5a0 <_malloc_r+0x3a8>
  41e280:	2a00      	cmp	r2, #0
  41e282:	f8c7 e014 	str.w	lr, [r7, #20]
  41e286:	f8c7 e010 	str.w	lr, [r7, #16]
  41e28a:	f280 809d 	bge.w	41e3c8 <_malloc_r+0x1d0>
  41e28e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  41e292:	f080 8161 	bcs.w	41e558 <_malloc_r+0x360>
  41e296:	08db      	lsrs	r3, r3, #3
  41e298:	f103 0c01 	add.w	ip, r3, #1
  41e29c:	1099      	asrs	r1, r3, #2
  41e29e:	687a      	ldr	r2, [r7, #4]
  41e2a0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  41e2a4:	f8c4 8008 	str.w	r8, [r4, #8]
  41e2a8:	2301      	movs	r3, #1
  41e2aa:	408b      	lsls	r3, r1
  41e2ac:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  41e2b0:	4313      	orrs	r3, r2
  41e2b2:	3908      	subs	r1, #8
  41e2b4:	60e1      	str	r1, [r4, #12]
  41e2b6:	607b      	str	r3, [r7, #4]
  41e2b8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  41e2bc:	f8c8 400c 	str.w	r4, [r8, #12]
  41e2c0:	1082      	asrs	r2, r0, #2
  41e2c2:	2401      	movs	r4, #1
  41e2c4:	4094      	lsls	r4, r2
  41e2c6:	429c      	cmp	r4, r3
  41e2c8:	f200 808b 	bhi.w	41e3e2 <_malloc_r+0x1ea>
  41e2cc:	421c      	tst	r4, r3
  41e2ce:	d106      	bne.n	41e2de <_malloc_r+0xe6>
  41e2d0:	f020 0003 	bic.w	r0, r0, #3
  41e2d4:	0064      	lsls	r4, r4, #1
  41e2d6:	421c      	tst	r4, r3
  41e2d8:	f100 0004 	add.w	r0, r0, #4
  41e2dc:	d0fa      	beq.n	41e2d4 <_malloc_r+0xdc>
  41e2de:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  41e2e2:	46cc      	mov	ip, r9
  41e2e4:	4680      	mov	r8, r0
  41e2e6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  41e2ea:	459c      	cmp	ip, r3
  41e2ec:	d107      	bne.n	41e2fe <_malloc_r+0x106>
  41e2ee:	e16d      	b.n	41e5cc <_malloc_r+0x3d4>
  41e2f0:	2a00      	cmp	r2, #0
  41e2f2:	f280 817b 	bge.w	41e5ec <_malloc_r+0x3f4>
  41e2f6:	68db      	ldr	r3, [r3, #12]
  41e2f8:	459c      	cmp	ip, r3
  41e2fa:	f000 8167 	beq.w	41e5cc <_malloc_r+0x3d4>
  41e2fe:	6859      	ldr	r1, [r3, #4]
  41e300:	f021 0103 	bic.w	r1, r1, #3
  41e304:	1b8a      	subs	r2, r1, r6
  41e306:	2a0f      	cmp	r2, #15
  41e308:	ddf2      	ble.n	41e2f0 <_malloc_r+0xf8>
  41e30a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  41e30e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  41e312:	9300      	str	r3, [sp, #0]
  41e314:	199c      	adds	r4, r3, r6
  41e316:	4628      	mov	r0, r5
  41e318:	f046 0601 	orr.w	r6, r6, #1
  41e31c:	f042 0501 	orr.w	r5, r2, #1
  41e320:	605e      	str	r6, [r3, #4]
  41e322:	f8c8 c00c 	str.w	ip, [r8, #12]
  41e326:	f8cc 8008 	str.w	r8, [ip, #8]
  41e32a:	617c      	str	r4, [r7, #20]
  41e32c:	613c      	str	r4, [r7, #16]
  41e32e:	f8c4 e00c 	str.w	lr, [r4, #12]
  41e332:	f8c4 e008 	str.w	lr, [r4, #8]
  41e336:	6065      	str	r5, [r4, #4]
  41e338:	505a      	str	r2, [r3, r1]
  41e33a:	f000 fb2b 	bl	41e994 <__malloc_unlock>
  41e33e:	9b00      	ldr	r3, [sp, #0]
  41e340:	f103 0408 	add.w	r4, r3, #8
  41e344:	e01e      	b.n	41e384 <_malloc_r+0x18c>
  41e346:	2910      	cmp	r1, #16
  41e348:	d820      	bhi.n	41e38c <_malloc_r+0x194>
  41e34a:	f000 fb1d 	bl	41e988 <__malloc_lock>
  41e34e:	2610      	movs	r6, #16
  41e350:	2318      	movs	r3, #24
  41e352:	2002      	movs	r0, #2
  41e354:	4f79      	ldr	r7, [pc, #484]	; (41e53c <_malloc_r+0x344>)
  41e356:	443b      	add	r3, r7
  41e358:	f1a3 0208 	sub.w	r2, r3, #8
  41e35c:	685c      	ldr	r4, [r3, #4]
  41e35e:	4294      	cmp	r4, r2
  41e360:	f000 813d 	beq.w	41e5de <_malloc_r+0x3e6>
  41e364:	6863      	ldr	r3, [r4, #4]
  41e366:	68e1      	ldr	r1, [r4, #12]
  41e368:	68a6      	ldr	r6, [r4, #8]
  41e36a:	f023 0303 	bic.w	r3, r3, #3
  41e36e:	4423      	add	r3, r4
  41e370:	4628      	mov	r0, r5
  41e372:	685a      	ldr	r2, [r3, #4]
  41e374:	60f1      	str	r1, [r6, #12]
  41e376:	f042 0201 	orr.w	r2, r2, #1
  41e37a:	608e      	str	r6, [r1, #8]
  41e37c:	605a      	str	r2, [r3, #4]
  41e37e:	f000 fb09 	bl	41e994 <__malloc_unlock>
  41e382:	3408      	adds	r4, #8
  41e384:	4620      	mov	r0, r4
  41e386:	b003      	add	sp, #12
  41e388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e38c:	2400      	movs	r4, #0
  41e38e:	230c      	movs	r3, #12
  41e390:	4620      	mov	r0, r4
  41e392:	602b      	str	r3, [r5, #0]
  41e394:	b003      	add	sp, #12
  41e396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e39a:	2040      	movs	r0, #64	; 0x40
  41e39c:	f44f 7300 	mov.w	r3, #512	; 0x200
  41e3a0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  41e3a4:	e74a      	b.n	41e23c <_malloc_r+0x44>
  41e3a6:	4423      	add	r3, r4
  41e3a8:	68e1      	ldr	r1, [r4, #12]
  41e3aa:	685a      	ldr	r2, [r3, #4]
  41e3ac:	68a6      	ldr	r6, [r4, #8]
  41e3ae:	f042 0201 	orr.w	r2, r2, #1
  41e3b2:	60f1      	str	r1, [r6, #12]
  41e3b4:	4628      	mov	r0, r5
  41e3b6:	608e      	str	r6, [r1, #8]
  41e3b8:	605a      	str	r2, [r3, #4]
  41e3ba:	f000 faeb 	bl	41e994 <__malloc_unlock>
  41e3be:	3408      	adds	r4, #8
  41e3c0:	4620      	mov	r0, r4
  41e3c2:	b003      	add	sp, #12
  41e3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e3c8:	4423      	add	r3, r4
  41e3ca:	4628      	mov	r0, r5
  41e3cc:	685a      	ldr	r2, [r3, #4]
  41e3ce:	f042 0201 	orr.w	r2, r2, #1
  41e3d2:	605a      	str	r2, [r3, #4]
  41e3d4:	f000 fade 	bl	41e994 <__malloc_unlock>
  41e3d8:	3408      	adds	r4, #8
  41e3da:	4620      	mov	r0, r4
  41e3dc:	b003      	add	sp, #12
  41e3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e3e2:	68bc      	ldr	r4, [r7, #8]
  41e3e4:	6863      	ldr	r3, [r4, #4]
  41e3e6:	f023 0803 	bic.w	r8, r3, #3
  41e3ea:	45b0      	cmp	r8, r6
  41e3ec:	d304      	bcc.n	41e3f8 <_malloc_r+0x200>
  41e3ee:	eba8 0306 	sub.w	r3, r8, r6
  41e3f2:	2b0f      	cmp	r3, #15
  41e3f4:	f300 8085 	bgt.w	41e502 <_malloc_r+0x30a>
  41e3f8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 41e554 <_malloc_r+0x35c>
  41e3fc:	4b50      	ldr	r3, [pc, #320]	; (41e540 <_malloc_r+0x348>)
  41e3fe:	f8d9 2000 	ldr.w	r2, [r9]
  41e402:	681b      	ldr	r3, [r3, #0]
  41e404:	3201      	adds	r2, #1
  41e406:	4433      	add	r3, r6
  41e408:	eb04 0a08 	add.w	sl, r4, r8
  41e40c:	f000 8155 	beq.w	41e6ba <_malloc_r+0x4c2>
  41e410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  41e414:	330f      	adds	r3, #15
  41e416:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  41e41a:	f02b 0b0f 	bic.w	fp, fp, #15
  41e41e:	4659      	mov	r1, fp
  41e420:	4628      	mov	r0, r5
  41e422:	f000 fadd 	bl	41e9e0 <_sbrk_r>
  41e426:	1c41      	adds	r1, r0, #1
  41e428:	4602      	mov	r2, r0
  41e42a:	f000 80fc 	beq.w	41e626 <_malloc_r+0x42e>
  41e42e:	4582      	cmp	sl, r0
  41e430:	f200 80f7 	bhi.w	41e622 <_malloc_r+0x42a>
  41e434:	4b43      	ldr	r3, [pc, #268]	; (41e544 <_malloc_r+0x34c>)
  41e436:	6819      	ldr	r1, [r3, #0]
  41e438:	4459      	add	r1, fp
  41e43a:	6019      	str	r1, [r3, #0]
  41e43c:	f000 814d 	beq.w	41e6da <_malloc_r+0x4e2>
  41e440:	f8d9 0000 	ldr.w	r0, [r9]
  41e444:	3001      	adds	r0, #1
  41e446:	bf1b      	ittet	ne
  41e448:	eba2 0a0a 	subne.w	sl, r2, sl
  41e44c:	4451      	addne	r1, sl
  41e44e:	f8c9 2000 	streq.w	r2, [r9]
  41e452:	6019      	strne	r1, [r3, #0]
  41e454:	f012 0107 	ands.w	r1, r2, #7
  41e458:	f000 8115 	beq.w	41e686 <_malloc_r+0x48e>
  41e45c:	f1c1 0008 	rsb	r0, r1, #8
  41e460:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  41e464:	4402      	add	r2, r0
  41e466:	3108      	adds	r1, #8
  41e468:	eb02 090b 	add.w	r9, r2, fp
  41e46c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  41e470:	eba1 0909 	sub.w	r9, r1, r9
  41e474:	4649      	mov	r1, r9
  41e476:	4628      	mov	r0, r5
  41e478:	9301      	str	r3, [sp, #4]
  41e47a:	9200      	str	r2, [sp, #0]
  41e47c:	f000 fab0 	bl	41e9e0 <_sbrk_r>
  41e480:	1c43      	adds	r3, r0, #1
  41e482:	e89d 000c 	ldmia.w	sp, {r2, r3}
  41e486:	f000 8143 	beq.w	41e710 <_malloc_r+0x518>
  41e48a:	1a80      	subs	r0, r0, r2
  41e48c:	4448      	add	r0, r9
  41e48e:	f040 0001 	orr.w	r0, r0, #1
  41e492:	6819      	ldr	r1, [r3, #0]
  41e494:	60ba      	str	r2, [r7, #8]
  41e496:	4449      	add	r1, r9
  41e498:	42bc      	cmp	r4, r7
  41e49a:	6050      	str	r0, [r2, #4]
  41e49c:	6019      	str	r1, [r3, #0]
  41e49e:	d017      	beq.n	41e4d0 <_malloc_r+0x2d8>
  41e4a0:	f1b8 0f0f 	cmp.w	r8, #15
  41e4a4:	f240 80fb 	bls.w	41e69e <_malloc_r+0x4a6>
  41e4a8:	6860      	ldr	r0, [r4, #4]
  41e4aa:	f1a8 020c 	sub.w	r2, r8, #12
  41e4ae:	f022 0207 	bic.w	r2, r2, #7
  41e4b2:	eb04 0e02 	add.w	lr, r4, r2
  41e4b6:	f000 0001 	and.w	r0, r0, #1
  41e4ba:	f04f 0c05 	mov.w	ip, #5
  41e4be:	4310      	orrs	r0, r2
  41e4c0:	2a0f      	cmp	r2, #15
  41e4c2:	6060      	str	r0, [r4, #4]
  41e4c4:	f8ce c004 	str.w	ip, [lr, #4]
  41e4c8:	f8ce c008 	str.w	ip, [lr, #8]
  41e4cc:	f200 8117 	bhi.w	41e6fe <_malloc_r+0x506>
  41e4d0:	4b1d      	ldr	r3, [pc, #116]	; (41e548 <_malloc_r+0x350>)
  41e4d2:	68bc      	ldr	r4, [r7, #8]
  41e4d4:	681a      	ldr	r2, [r3, #0]
  41e4d6:	4291      	cmp	r1, r2
  41e4d8:	bf88      	it	hi
  41e4da:	6019      	strhi	r1, [r3, #0]
  41e4dc:	4b1b      	ldr	r3, [pc, #108]	; (41e54c <_malloc_r+0x354>)
  41e4de:	681a      	ldr	r2, [r3, #0]
  41e4e0:	4291      	cmp	r1, r2
  41e4e2:	6862      	ldr	r2, [r4, #4]
  41e4e4:	bf88      	it	hi
  41e4e6:	6019      	strhi	r1, [r3, #0]
  41e4e8:	f022 0203 	bic.w	r2, r2, #3
  41e4ec:	4296      	cmp	r6, r2
  41e4ee:	eba2 0306 	sub.w	r3, r2, r6
  41e4f2:	d801      	bhi.n	41e4f8 <_malloc_r+0x300>
  41e4f4:	2b0f      	cmp	r3, #15
  41e4f6:	dc04      	bgt.n	41e502 <_malloc_r+0x30a>
  41e4f8:	4628      	mov	r0, r5
  41e4fa:	f000 fa4b 	bl	41e994 <__malloc_unlock>
  41e4fe:	2400      	movs	r4, #0
  41e500:	e740      	b.n	41e384 <_malloc_r+0x18c>
  41e502:	19a2      	adds	r2, r4, r6
  41e504:	f043 0301 	orr.w	r3, r3, #1
  41e508:	f046 0601 	orr.w	r6, r6, #1
  41e50c:	6066      	str	r6, [r4, #4]
  41e50e:	4628      	mov	r0, r5
  41e510:	60ba      	str	r2, [r7, #8]
  41e512:	6053      	str	r3, [r2, #4]
  41e514:	f000 fa3e 	bl	41e994 <__malloc_unlock>
  41e518:	3408      	adds	r4, #8
  41e51a:	4620      	mov	r0, r4
  41e51c:	b003      	add	sp, #12
  41e51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e522:	2b14      	cmp	r3, #20
  41e524:	d971      	bls.n	41e60a <_malloc_r+0x412>
  41e526:	2b54      	cmp	r3, #84	; 0x54
  41e528:	f200 80a3 	bhi.w	41e672 <_malloc_r+0x47a>
  41e52c:	0b33      	lsrs	r3, r6, #12
  41e52e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  41e532:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  41e536:	00c3      	lsls	r3, r0, #3
  41e538:	e680      	b.n	41e23c <_malloc_r+0x44>
  41e53a:	bf00      	nop
  41e53c:	20400490 	.word	0x20400490
  41e540:	2043a09c 	.word	0x2043a09c
  41e544:	2043a06c 	.word	0x2043a06c
  41e548:	2043a094 	.word	0x2043a094
  41e54c:	2043a098 	.word	0x2043a098
  41e550:	20400498 	.word	0x20400498
  41e554:	20400898 	.word	0x20400898
  41e558:	0a5a      	lsrs	r2, r3, #9
  41e55a:	2a04      	cmp	r2, #4
  41e55c:	d95b      	bls.n	41e616 <_malloc_r+0x41e>
  41e55e:	2a14      	cmp	r2, #20
  41e560:	f200 80ae 	bhi.w	41e6c0 <_malloc_r+0x4c8>
  41e564:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  41e568:	00c9      	lsls	r1, r1, #3
  41e56a:	325b      	adds	r2, #91	; 0x5b
  41e56c:	eb07 0c01 	add.w	ip, r7, r1
  41e570:	5879      	ldr	r1, [r7, r1]
  41e572:	f1ac 0c08 	sub.w	ip, ip, #8
  41e576:	458c      	cmp	ip, r1
  41e578:	f000 8088 	beq.w	41e68c <_malloc_r+0x494>
  41e57c:	684a      	ldr	r2, [r1, #4]
  41e57e:	f022 0203 	bic.w	r2, r2, #3
  41e582:	4293      	cmp	r3, r2
  41e584:	d273      	bcs.n	41e66e <_malloc_r+0x476>
  41e586:	6889      	ldr	r1, [r1, #8]
  41e588:	458c      	cmp	ip, r1
  41e58a:	d1f7      	bne.n	41e57c <_malloc_r+0x384>
  41e58c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  41e590:	687b      	ldr	r3, [r7, #4]
  41e592:	60e2      	str	r2, [r4, #12]
  41e594:	f8c4 c008 	str.w	ip, [r4, #8]
  41e598:	6094      	str	r4, [r2, #8]
  41e59a:	f8cc 400c 	str.w	r4, [ip, #12]
  41e59e:	e68f      	b.n	41e2c0 <_malloc_r+0xc8>
  41e5a0:	19a1      	adds	r1, r4, r6
  41e5a2:	f046 0c01 	orr.w	ip, r6, #1
  41e5a6:	f042 0601 	orr.w	r6, r2, #1
  41e5aa:	f8c4 c004 	str.w	ip, [r4, #4]
  41e5ae:	4628      	mov	r0, r5
  41e5b0:	6179      	str	r1, [r7, #20]
  41e5b2:	6139      	str	r1, [r7, #16]
  41e5b4:	f8c1 e00c 	str.w	lr, [r1, #12]
  41e5b8:	f8c1 e008 	str.w	lr, [r1, #8]
  41e5bc:	604e      	str	r6, [r1, #4]
  41e5be:	50e2      	str	r2, [r4, r3]
  41e5c0:	f000 f9e8 	bl	41e994 <__malloc_unlock>
  41e5c4:	3408      	adds	r4, #8
  41e5c6:	e6dd      	b.n	41e384 <_malloc_r+0x18c>
  41e5c8:	687b      	ldr	r3, [r7, #4]
  41e5ca:	e679      	b.n	41e2c0 <_malloc_r+0xc8>
  41e5cc:	f108 0801 	add.w	r8, r8, #1
  41e5d0:	f018 0f03 	tst.w	r8, #3
  41e5d4:	f10c 0c08 	add.w	ip, ip, #8
  41e5d8:	f47f ae85 	bne.w	41e2e6 <_malloc_r+0xee>
  41e5dc:	e02d      	b.n	41e63a <_malloc_r+0x442>
  41e5de:	68dc      	ldr	r4, [r3, #12]
  41e5e0:	42a3      	cmp	r3, r4
  41e5e2:	bf08      	it	eq
  41e5e4:	3002      	addeq	r0, #2
  41e5e6:	f43f ae3e 	beq.w	41e266 <_malloc_r+0x6e>
  41e5ea:	e6bb      	b.n	41e364 <_malloc_r+0x16c>
  41e5ec:	4419      	add	r1, r3
  41e5ee:	461c      	mov	r4, r3
  41e5f0:	684a      	ldr	r2, [r1, #4]
  41e5f2:	68db      	ldr	r3, [r3, #12]
  41e5f4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  41e5f8:	f042 0201 	orr.w	r2, r2, #1
  41e5fc:	604a      	str	r2, [r1, #4]
  41e5fe:	4628      	mov	r0, r5
  41e600:	60f3      	str	r3, [r6, #12]
  41e602:	609e      	str	r6, [r3, #8]
  41e604:	f000 f9c6 	bl	41e994 <__malloc_unlock>
  41e608:	e6bc      	b.n	41e384 <_malloc_r+0x18c>
  41e60a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  41e60e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  41e612:	00c3      	lsls	r3, r0, #3
  41e614:	e612      	b.n	41e23c <_malloc_r+0x44>
  41e616:	099a      	lsrs	r2, r3, #6
  41e618:	f102 0139 	add.w	r1, r2, #57	; 0x39
  41e61c:	00c9      	lsls	r1, r1, #3
  41e61e:	3238      	adds	r2, #56	; 0x38
  41e620:	e7a4      	b.n	41e56c <_malloc_r+0x374>
  41e622:	42bc      	cmp	r4, r7
  41e624:	d054      	beq.n	41e6d0 <_malloc_r+0x4d8>
  41e626:	68bc      	ldr	r4, [r7, #8]
  41e628:	6862      	ldr	r2, [r4, #4]
  41e62a:	f022 0203 	bic.w	r2, r2, #3
  41e62e:	e75d      	b.n	41e4ec <_malloc_r+0x2f4>
  41e630:	f859 3908 	ldr.w	r3, [r9], #-8
  41e634:	4599      	cmp	r9, r3
  41e636:	f040 8086 	bne.w	41e746 <_malloc_r+0x54e>
  41e63a:	f010 0f03 	tst.w	r0, #3
  41e63e:	f100 30ff 	add.w	r0, r0, #4294967295
  41e642:	d1f5      	bne.n	41e630 <_malloc_r+0x438>
  41e644:	687b      	ldr	r3, [r7, #4]
  41e646:	ea23 0304 	bic.w	r3, r3, r4
  41e64a:	607b      	str	r3, [r7, #4]
  41e64c:	0064      	lsls	r4, r4, #1
  41e64e:	429c      	cmp	r4, r3
  41e650:	f63f aec7 	bhi.w	41e3e2 <_malloc_r+0x1ea>
  41e654:	2c00      	cmp	r4, #0
  41e656:	f43f aec4 	beq.w	41e3e2 <_malloc_r+0x1ea>
  41e65a:	421c      	tst	r4, r3
  41e65c:	4640      	mov	r0, r8
  41e65e:	f47f ae3e 	bne.w	41e2de <_malloc_r+0xe6>
  41e662:	0064      	lsls	r4, r4, #1
  41e664:	421c      	tst	r4, r3
  41e666:	f100 0004 	add.w	r0, r0, #4
  41e66a:	d0fa      	beq.n	41e662 <_malloc_r+0x46a>
  41e66c:	e637      	b.n	41e2de <_malloc_r+0xe6>
  41e66e:	468c      	mov	ip, r1
  41e670:	e78c      	b.n	41e58c <_malloc_r+0x394>
  41e672:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  41e676:	d815      	bhi.n	41e6a4 <_malloc_r+0x4ac>
  41e678:	0bf3      	lsrs	r3, r6, #15
  41e67a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  41e67e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  41e682:	00c3      	lsls	r3, r0, #3
  41e684:	e5da      	b.n	41e23c <_malloc_r+0x44>
  41e686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  41e68a:	e6ed      	b.n	41e468 <_malloc_r+0x270>
  41e68c:	687b      	ldr	r3, [r7, #4]
  41e68e:	1092      	asrs	r2, r2, #2
  41e690:	2101      	movs	r1, #1
  41e692:	fa01 f202 	lsl.w	r2, r1, r2
  41e696:	4313      	orrs	r3, r2
  41e698:	607b      	str	r3, [r7, #4]
  41e69a:	4662      	mov	r2, ip
  41e69c:	e779      	b.n	41e592 <_malloc_r+0x39a>
  41e69e:	2301      	movs	r3, #1
  41e6a0:	6053      	str	r3, [r2, #4]
  41e6a2:	e729      	b.n	41e4f8 <_malloc_r+0x300>
  41e6a4:	f240 5254 	movw	r2, #1364	; 0x554
  41e6a8:	4293      	cmp	r3, r2
  41e6aa:	d822      	bhi.n	41e6f2 <_malloc_r+0x4fa>
  41e6ac:	0cb3      	lsrs	r3, r6, #18
  41e6ae:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  41e6b2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  41e6b6:	00c3      	lsls	r3, r0, #3
  41e6b8:	e5c0      	b.n	41e23c <_malloc_r+0x44>
  41e6ba:	f103 0b10 	add.w	fp, r3, #16
  41e6be:	e6ae      	b.n	41e41e <_malloc_r+0x226>
  41e6c0:	2a54      	cmp	r2, #84	; 0x54
  41e6c2:	d829      	bhi.n	41e718 <_malloc_r+0x520>
  41e6c4:	0b1a      	lsrs	r2, r3, #12
  41e6c6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  41e6ca:	00c9      	lsls	r1, r1, #3
  41e6cc:	326e      	adds	r2, #110	; 0x6e
  41e6ce:	e74d      	b.n	41e56c <_malloc_r+0x374>
  41e6d0:	4b20      	ldr	r3, [pc, #128]	; (41e754 <_malloc_r+0x55c>)
  41e6d2:	6819      	ldr	r1, [r3, #0]
  41e6d4:	4459      	add	r1, fp
  41e6d6:	6019      	str	r1, [r3, #0]
  41e6d8:	e6b2      	b.n	41e440 <_malloc_r+0x248>
  41e6da:	f3ca 000b 	ubfx	r0, sl, #0, #12
  41e6de:	2800      	cmp	r0, #0
  41e6e0:	f47f aeae 	bne.w	41e440 <_malloc_r+0x248>
  41e6e4:	eb08 030b 	add.w	r3, r8, fp
  41e6e8:	68ba      	ldr	r2, [r7, #8]
  41e6ea:	f043 0301 	orr.w	r3, r3, #1
  41e6ee:	6053      	str	r3, [r2, #4]
  41e6f0:	e6ee      	b.n	41e4d0 <_malloc_r+0x2d8>
  41e6f2:	207f      	movs	r0, #127	; 0x7f
  41e6f4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  41e6f8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  41e6fc:	e59e      	b.n	41e23c <_malloc_r+0x44>
  41e6fe:	f104 0108 	add.w	r1, r4, #8
  41e702:	4628      	mov	r0, r5
  41e704:	9300      	str	r3, [sp, #0]
  41e706:	f001 fe05 	bl	420314 <_free_r>
  41e70a:	9b00      	ldr	r3, [sp, #0]
  41e70c:	6819      	ldr	r1, [r3, #0]
  41e70e:	e6df      	b.n	41e4d0 <_malloc_r+0x2d8>
  41e710:	2001      	movs	r0, #1
  41e712:	f04f 0900 	mov.w	r9, #0
  41e716:	e6bc      	b.n	41e492 <_malloc_r+0x29a>
  41e718:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  41e71c:	d805      	bhi.n	41e72a <_malloc_r+0x532>
  41e71e:	0bda      	lsrs	r2, r3, #15
  41e720:	f102 0178 	add.w	r1, r2, #120	; 0x78
  41e724:	00c9      	lsls	r1, r1, #3
  41e726:	3277      	adds	r2, #119	; 0x77
  41e728:	e720      	b.n	41e56c <_malloc_r+0x374>
  41e72a:	f240 5154 	movw	r1, #1364	; 0x554
  41e72e:	428a      	cmp	r2, r1
  41e730:	d805      	bhi.n	41e73e <_malloc_r+0x546>
  41e732:	0c9a      	lsrs	r2, r3, #18
  41e734:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  41e738:	00c9      	lsls	r1, r1, #3
  41e73a:	327c      	adds	r2, #124	; 0x7c
  41e73c:	e716      	b.n	41e56c <_malloc_r+0x374>
  41e73e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  41e742:	227e      	movs	r2, #126	; 0x7e
  41e744:	e712      	b.n	41e56c <_malloc_r+0x374>
  41e746:	687b      	ldr	r3, [r7, #4]
  41e748:	e780      	b.n	41e64c <_malloc_r+0x454>
  41e74a:	08f0      	lsrs	r0, r6, #3
  41e74c:	f106 0308 	add.w	r3, r6, #8
  41e750:	e600      	b.n	41e354 <_malloc_r+0x15c>
  41e752:	bf00      	nop
  41e754:	2043a06c 	.word	0x2043a06c

0041e758 <memcmp>:
  41e758:	2a03      	cmp	r2, #3
  41e75a:	b470      	push	{r4, r5, r6}
  41e75c:	d922      	bls.n	41e7a4 <memcmp+0x4c>
  41e75e:	ea40 0301 	orr.w	r3, r0, r1
  41e762:	079b      	lsls	r3, r3, #30
  41e764:	d011      	beq.n	41e78a <memcmp+0x32>
  41e766:	7803      	ldrb	r3, [r0, #0]
  41e768:	780c      	ldrb	r4, [r1, #0]
  41e76a:	42a3      	cmp	r3, r4
  41e76c:	d11d      	bne.n	41e7aa <memcmp+0x52>
  41e76e:	440a      	add	r2, r1
  41e770:	3101      	adds	r1, #1
  41e772:	e005      	b.n	41e780 <memcmp+0x28>
  41e774:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  41e778:	f811 4b01 	ldrb.w	r4, [r1], #1
  41e77c:	42a3      	cmp	r3, r4
  41e77e:	d114      	bne.n	41e7aa <memcmp+0x52>
  41e780:	4291      	cmp	r1, r2
  41e782:	d1f7      	bne.n	41e774 <memcmp+0x1c>
  41e784:	2000      	movs	r0, #0
  41e786:	bc70      	pop	{r4, r5, r6}
  41e788:	4770      	bx	lr
  41e78a:	680d      	ldr	r5, [r1, #0]
  41e78c:	6806      	ldr	r6, [r0, #0]
  41e78e:	42ae      	cmp	r6, r5
  41e790:	460c      	mov	r4, r1
  41e792:	4603      	mov	r3, r0
  41e794:	f101 0104 	add.w	r1, r1, #4
  41e798:	f100 0004 	add.w	r0, r0, #4
  41e79c:	d108      	bne.n	41e7b0 <memcmp+0x58>
  41e79e:	3a04      	subs	r2, #4
  41e7a0:	2a03      	cmp	r2, #3
  41e7a2:	d8f2      	bhi.n	41e78a <memcmp+0x32>
  41e7a4:	2a00      	cmp	r2, #0
  41e7a6:	d1de      	bne.n	41e766 <memcmp+0xe>
  41e7a8:	e7ec      	b.n	41e784 <memcmp+0x2c>
  41e7aa:	1b18      	subs	r0, r3, r4
  41e7ac:	bc70      	pop	{r4, r5, r6}
  41e7ae:	4770      	bx	lr
  41e7b0:	4621      	mov	r1, r4
  41e7b2:	4618      	mov	r0, r3
  41e7b4:	e7d7      	b.n	41e766 <memcmp+0xe>
  41e7b6:	bf00      	nop

0041e7b8 <memcpy>:
  41e7b8:	4684      	mov	ip, r0
  41e7ba:	ea41 0300 	orr.w	r3, r1, r0
  41e7be:	f013 0303 	ands.w	r3, r3, #3
  41e7c2:	d16d      	bne.n	41e8a0 <memcpy+0xe8>
  41e7c4:	3a40      	subs	r2, #64	; 0x40
  41e7c6:	d341      	bcc.n	41e84c <memcpy+0x94>
  41e7c8:	f851 3b04 	ldr.w	r3, [r1], #4
  41e7cc:	f840 3b04 	str.w	r3, [r0], #4
  41e7d0:	f851 3b04 	ldr.w	r3, [r1], #4
  41e7d4:	f840 3b04 	str.w	r3, [r0], #4
  41e7d8:	f851 3b04 	ldr.w	r3, [r1], #4
  41e7dc:	f840 3b04 	str.w	r3, [r0], #4
  41e7e0:	f851 3b04 	ldr.w	r3, [r1], #4
  41e7e4:	f840 3b04 	str.w	r3, [r0], #4
  41e7e8:	f851 3b04 	ldr.w	r3, [r1], #4
  41e7ec:	f840 3b04 	str.w	r3, [r0], #4
  41e7f0:	f851 3b04 	ldr.w	r3, [r1], #4
  41e7f4:	f840 3b04 	str.w	r3, [r0], #4
  41e7f8:	f851 3b04 	ldr.w	r3, [r1], #4
  41e7fc:	f840 3b04 	str.w	r3, [r0], #4
  41e800:	f851 3b04 	ldr.w	r3, [r1], #4
  41e804:	f840 3b04 	str.w	r3, [r0], #4
  41e808:	f851 3b04 	ldr.w	r3, [r1], #4
  41e80c:	f840 3b04 	str.w	r3, [r0], #4
  41e810:	f851 3b04 	ldr.w	r3, [r1], #4
  41e814:	f840 3b04 	str.w	r3, [r0], #4
  41e818:	f851 3b04 	ldr.w	r3, [r1], #4
  41e81c:	f840 3b04 	str.w	r3, [r0], #4
  41e820:	f851 3b04 	ldr.w	r3, [r1], #4
  41e824:	f840 3b04 	str.w	r3, [r0], #4
  41e828:	f851 3b04 	ldr.w	r3, [r1], #4
  41e82c:	f840 3b04 	str.w	r3, [r0], #4
  41e830:	f851 3b04 	ldr.w	r3, [r1], #4
  41e834:	f840 3b04 	str.w	r3, [r0], #4
  41e838:	f851 3b04 	ldr.w	r3, [r1], #4
  41e83c:	f840 3b04 	str.w	r3, [r0], #4
  41e840:	f851 3b04 	ldr.w	r3, [r1], #4
  41e844:	f840 3b04 	str.w	r3, [r0], #4
  41e848:	3a40      	subs	r2, #64	; 0x40
  41e84a:	d2bd      	bcs.n	41e7c8 <memcpy+0x10>
  41e84c:	3230      	adds	r2, #48	; 0x30
  41e84e:	d311      	bcc.n	41e874 <memcpy+0xbc>
  41e850:	f851 3b04 	ldr.w	r3, [r1], #4
  41e854:	f840 3b04 	str.w	r3, [r0], #4
  41e858:	f851 3b04 	ldr.w	r3, [r1], #4
  41e85c:	f840 3b04 	str.w	r3, [r0], #4
  41e860:	f851 3b04 	ldr.w	r3, [r1], #4
  41e864:	f840 3b04 	str.w	r3, [r0], #4
  41e868:	f851 3b04 	ldr.w	r3, [r1], #4
  41e86c:	f840 3b04 	str.w	r3, [r0], #4
  41e870:	3a10      	subs	r2, #16
  41e872:	d2ed      	bcs.n	41e850 <memcpy+0x98>
  41e874:	320c      	adds	r2, #12
  41e876:	d305      	bcc.n	41e884 <memcpy+0xcc>
  41e878:	f851 3b04 	ldr.w	r3, [r1], #4
  41e87c:	f840 3b04 	str.w	r3, [r0], #4
  41e880:	3a04      	subs	r2, #4
  41e882:	d2f9      	bcs.n	41e878 <memcpy+0xc0>
  41e884:	3204      	adds	r2, #4
  41e886:	d008      	beq.n	41e89a <memcpy+0xe2>
  41e888:	07d2      	lsls	r2, r2, #31
  41e88a:	bf1c      	itt	ne
  41e88c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  41e890:	f800 3b01 	strbne.w	r3, [r0], #1
  41e894:	d301      	bcc.n	41e89a <memcpy+0xe2>
  41e896:	880b      	ldrh	r3, [r1, #0]
  41e898:	8003      	strh	r3, [r0, #0]
  41e89a:	4660      	mov	r0, ip
  41e89c:	4770      	bx	lr
  41e89e:	bf00      	nop
  41e8a0:	2a08      	cmp	r2, #8
  41e8a2:	d313      	bcc.n	41e8cc <memcpy+0x114>
  41e8a4:	078b      	lsls	r3, r1, #30
  41e8a6:	d08d      	beq.n	41e7c4 <memcpy+0xc>
  41e8a8:	f010 0303 	ands.w	r3, r0, #3
  41e8ac:	d08a      	beq.n	41e7c4 <memcpy+0xc>
  41e8ae:	f1c3 0304 	rsb	r3, r3, #4
  41e8b2:	1ad2      	subs	r2, r2, r3
  41e8b4:	07db      	lsls	r3, r3, #31
  41e8b6:	bf1c      	itt	ne
  41e8b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  41e8bc:	f800 3b01 	strbne.w	r3, [r0], #1
  41e8c0:	d380      	bcc.n	41e7c4 <memcpy+0xc>
  41e8c2:	f831 3b02 	ldrh.w	r3, [r1], #2
  41e8c6:	f820 3b02 	strh.w	r3, [r0], #2
  41e8ca:	e77b      	b.n	41e7c4 <memcpy+0xc>
  41e8cc:	3a04      	subs	r2, #4
  41e8ce:	d3d9      	bcc.n	41e884 <memcpy+0xcc>
  41e8d0:	3a01      	subs	r2, #1
  41e8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
  41e8d6:	f800 3b01 	strb.w	r3, [r0], #1
  41e8da:	d2f9      	bcs.n	41e8d0 <memcpy+0x118>
  41e8dc:	780b      	ldrb	r3, [r1, #0]
  41e8de:	7003      	strb	r3, [r0, #0]
  41e8e0:	784b      	ldrb	r3, [r1, #1]
  41e8e2:	7043      	strb	r3, [r0, #1]
  41e8e4:	788b      	ldrb	r3, [r1, #2]
  41e8e6:	7083      	strb	r3, [r0, #2]
  41e8e8:	4660      	mov	r0, ip
  41e8ea:	4770      	bx	lr

0041e8ec <memset>:
  41e8ec:	b470      	push	{r4, r5, r6}
  41e8ee:	0786      	lsls	r6, r0, #30
  41e8f0:	d046      	beq.n	41e980 <memset+0x94>
  41e8f2:	1e54      	subs	r4, r2, #1
  41e8f4:	2a00      	cmp	r2, #0
  41e8f6:	d041      	beq.n	41e97c <memset+0x90>
  41e8f8:	b2ca      	uxtb	r2, r1
  41e8fa:	4603      	mov	r3, r0
  41e8fc:	e002      	b.n	41e904 <memset+0x18>
  41e8fe:	f114 34ff 	adds.w	r4, r4, #4294967295
  41e902:	d33b      	bcc.n	41e97c <memset+0x90>
  41e904:	f803 2b01 	strb.w	r2, [r3], #1
  41e908:	079d      	lsls	r5, r3, #30
  41e90a:	d1f8      	bne.n	41e8fe <memset+0x12>
  41e90c:	2c03      	cmp	r4, #3
  41e90e:	d92e      	bls.n	41e96e <memset+0x82>
  41e910:	b2cd      	uxtb	r5, r1
  41e912:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  41e916:	2c0f      	cmp	r4, #15
  41e918:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  41e91c:	d919      	bls.n	41e952 <memset+0x66>
  41e91e:	f103 0210 	add.w	r2, r3, #16
  41e922:	4626      	mov	r6, r4
  41e924:	3e10      	subs	r6, #16
  41e926:	2e0f      	cmp	r6, #15
  41e928:	f842 5c10 	str.w	r5, [r2, #-16]
  41e92c:	f842 5c0c 	str.w	r5, [r2, #-12]
  41e930:	f842 5c08 	str.w	r5, [r2, #-8]
  41e934:	f842 5c04 	str.w	r5, [r2, #-4]
  41e938:	f102 0210 	add.w	r2, r2, #16
  41e93c:	d8f2      	bhi.n	41e924 <memset+0x38>
  41e93e:	f1a4 0210 	sub.w	r2, r4, #16
  41e942:	f022 020f 	bic.w	r2, r2, #15
  41e946:	f004 040f 	and.w	r4, r4, #15
  41e94a:	3210      	adds	r2, #16
  41e94c:	2c03      	cmp	r4, #3
  41e94e:	4413      	add	r3, r2
  41e950:	d90d      	bls.n	41e96e <memset+0x82>
  41e952:	461e      	mov	r6, r3
  41e954:	4622      	mov	r2, r4
  41e956:	3a04      	subs	r2, #4
  41e958:	2a03      	cmp	r2, #3
  41e95a:	f846 5b04 	str.w	r5, [r6], #4
  41e95e:	d8fa      	bhi.n	41e956 <memset+0x6a>
  41e960:	1f22      	subs	r2, r4, #4
  41e962:	f022 0203 	bic.w	r2, r2, #3
  41e966:	3204      	adds	r2, #4
  41e968:	4413      	add	r3, r2
  41e96a:	f004 0403 	and.w	r4, r4, #3
  41e96e:	b12c      	cbz	r4, 41e97c <memset+0x90>
  41e970:	b2c9      	uxtb	r1, r1
  41e972:	441c      	add	r4, r3
  41e974:	f803 1b01 	strb.w	r1, [r3], #1
  41e978:	429c      	cmp	r4, r3
  41e97a:	d1fb      	bne.n	41e974 <memset+0x88>
  41e97c:	bc70      	pop	{r4, r5, r6}
  41e97e:	4770      	bx	lr
  41e980:	4614      	mov	r4, r2
  41e982:	4603      	mov	r3, r0
  41e984:	e7c2      	b.n	41e90c <memset+0x20>
  41e986:	bf00      	nop

0041e988 <__malloc_lock>:
  41e988:	4801      	ldr	r0, [pc, #4]	; (41e990 <__malloc_lock+0x8>)
  41e98a:	f001 bf5d 	b.w	420848 <__retarget_lock_acquire_recursive>
  41e98e:	bf00      	nop
  41e990:	2043a314 	.word	0x2043a314

0041e994 <__malloc_unlock>:
  41e994:	4801      	ldr	r0, [pc, #4]	; (41e99c <__malloc_unlock+0x8>)
  41e996:	f001 bf59 	b.w	42084c <__retarget_lock_release_recursive>
  41e99a:	bf00      	nop
  41e99c:	2043a314 	.word	0x2043a314

0041e9a0 <rand>:
  41e9a0:	b410      	push	{r4}
  41e9a2:	4b0c      	ldr	r3, [pc, #48]	; (41e9d4 <rand+0x34>)
  41e9a4:	480c      	ldr	r0, [pc, #48]	; (41e9d8 <rand+0x38>)
  41e9a6:	6819      	ldr	r1, [r3, #0]
  41e9a8:	4c0c      	ldr	r4, [pc, #48]	; (41e9dc <rand+0x3c>)
  41e9aa:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  41e9ae:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  41e9b2:	fb00 f002 	mul.w	r0, r0, r2
  41e9b6:	fb04 0003 	mla	r0, r4, r3, r0
  41e9ba:	fba2 2304 	umull	r2, r3, r2, r4
  41e9be:	4403      	add	r3, r0
  41e9c0:	3201      	adds	r2, #1
  41e9c2:	f143 0300 	adc.w	r3, r3, #0
  41e9c6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  41e9ca:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  41e9ce:	bc10      	pop	{r4}
  41e9d0:	4770      	bx	lr
  41e9d2:	bf00      	nop
  41e9d4:	20400060 	.word	0x20400060
  41e9d8:	5851f42d 	.word	0x5851f42d
  41e9dc:	4c957f2d 	.word	0x4c957f2d

0041e9e0 <_sbrk_r>:
  41e9e0:	b538      	push	{r3, r4, r5, lr}
  41e9e2:	4c07      	ldr	r4, [pc, #28]	; (41ea00 <_sbrk_r+0x20>)
  41e9e4:	2300      	movs	r3, #0
  41e9e6:	4605      	mov	r5, r0
  41e9e8:	4608      	mov	r0, r1
  41e9ea:	6023      	str	r3, [r4, #0]
  41e9ec:	f7fe fb0c 	bl	41d008 <_sbrk>
  41e9f0:	1c43      	adds	r3, r0, #1
  41e9f2:	d000      	beq.n	41e9f6 <_sbrk_r+0x16>
  41e9f4:	bd38      	pop	{r3, r4, r5, pc}
  41e9f6:	6823      	ldr	r3, [r4, #0]
  41e9f8:	2b00      	cmp	r3, #0
  41e9fa:	d0fb      	beq.n	41e9f4 <_sbrk_r+0x14>
  41e9fc:	602b      	str	r3, [r5, #0]
  41e9fe:	bd38      	pop	{r3, r4, r5, pc}
  41ea00:	2043a328 	.word	0x2043a328

0041ea04 <setbuf>:
  41ea04:	2900      	cmp	r1, #0
  41ea06:	bf0c      	ite	eq
  41ea08:	2202      	moveq	r2, #2
  41ea0a:	2200      	movne	r2, #0
  41ea0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  41ea10:	f000 b800 	b.w	41ea14 <setvbuf>

0041ea14 <setvbuf>:
  41ea14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41ea18:	4c61      	ldr	r4, [pc, #388]	; (41eba0 <setvbuf+0x18c>)
  41ea1a:	6825      	ldr	r5, [r4, #0]
  41ea1c:	b083      	sub	sp, #12
  41ea1e:	4604      	mov	r4, r0
  41ea20:	460f      	mov	r7, r1
  41ea22:	4690      	mov	r8, r2
  41ea24:	461e      	mov	r6, r3
  41ea26:	b115      	cbz	r5, 41ea2e <setvbuf+0x1a>
  41ea28:	6bab      	ldr	r3, [r5, #56]	; 0x38
  41ea2a:	2b00      	cmp	r3, #0
  41ea2c:	d064      	beq.n	41eaf8 <setvbuf+0xe4>
  41ea2e:	f1b8 0f02 	cmp.w	r8, #2
  41ea32:	d006      	beq.n	41ea42 <setvbuf+0x2e>
  41ea34:	f1b8 0f01 	cmp.w	r8, #1
  41ea38:	f200 809f 	bhi.w	41eb7a <setvbuf+0x166>
  41ea3c:	2e00      	cmp	r6, #0
  41ea3e:	f2c0 809c 	blt.w	41eb7a <setvbuf+0x166>
  41ea42:	6e63      	ldr	r3, [r4, #100]	; 0x64
  41ea44:	07d8      	lsls	r0, r3, #31
  41ea46:	d534      	bpl.n	41eab2 <setvbuf+0x9e>
  41ea48:	4621      	mov	r1, r4
  41ea4a:	4628      	mov	r0, r5
  41ea4c:	f001 fae4 	bl	420018 <_fflush_r>
  41ea50:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41ea52:	b141      	cbz	r1, 41ea66 <setvbuf+0x52>
  41ea54:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41ea58:	4299      	cmp	r1, r3
  41ea5a:	d002      	beq.n	41ea62 <setvbuf+0x4e>
  41ea5c:	4628      	mov	r0, r5
  41ea5e:	f001 fc59 	bl	420314 <_free_r>
  41ea62:	2300      	movs	r3, #0
  41ea64:	6323      	str	r3, [r4, #48]	; 0x30
  41ea66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41ea6a:	2200      	movs	r2, #0
  41ea6c:	61a2      	str	r2, [r4, #24]
  41ea6e:	6062      	str	r2, [r4, #4]
  41ea70:	061a      	lsls	r2, r3, #24
  41ea72:	d43a      	bmi.n	41eaea <setvbuf+0xd6>
  41ea74:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  41ea78:	f023 0303 	bic.w	r3, r3, #3
  41ea7c:	f1b8 0f02 	cmp.w	r8, #2
  41ea80:	81a3      	strh	r3, [r4, #12]
  41ea82:	d01d      	beq.n	41eac0 <setvbuf+0xac>
  41ea84:	ab01      	add	r3, sp, #4
  41ea86:	466a      	mov	r2, sp
  41ea88:	4621      	mov	r1, r4
  41ea8a:	4628      	mov	r0, r5
  41ea8c:	f001 fee0 	bl	420850 <__swhatbuf_r>
  41ea90:	89a3      	ldrh	r3, [r4, #12]
  41ea92:	4318      	orrs	r0, r3
  41ea94:	81a0      	strh	r0, [r4, #12]
  41ea96:	2e00      	cmp	r6, #0
  41ea98:	d132      	bne.n	41eb00 <setvbuf+0xec>
  41ea9a:	9e00      	ldr	r6, [sp, #0]
  41ea9c:	4630      	mov	r0, r6
  41ea9e:	f7ff fba3 	bl	41e1e8 <malloc>
  41eaa2:	4607      	mov	r7, r0
  41eaa4:	2800      	cmp	r0, #0
  41eaa6:	d06b      	beq.n	41eb80 <setvbuf+0x16c>
  41eaa8:	89a3      	ldrh	r3, [r4, #12]
  41eaaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41eaae:	81a3      	strh	r3, [r4, #12]
  41eab0:	e028      	b.n	41eb04 <setvbuf+0xf0>
  41eab2:	89a3      	ldrh	r3, [r4, #12]
  41eab4:	0599      	lsls	r1, r3, #22
  41eab6:	d4c7      	bmi.n	41ea48 <setvbuf+0x34>
  41eab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41eaba:	f001 fec5 	bl	420848 <__retarget_lock_acquire_recursive>
  41eabe:	e7c3      	b.n	41ea48 <setvbuf+0x34>
  41eac0:	2500      	movs	r5, #0
  41eac2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  41eac4:	2600      	movs	r6, #0
  41eac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  41eaca:	f043 0302 	orr.w	r3, r3, #2
  41eace:	2001      	movs	r0, #1
  41ead0:	60a6      	str	r6, [r4, #8]
  41ead2:	07ce      	lsls	r6, r1, #31
  41ead4:	81a3      	strh	r3, [r4, #12]
  41ead6:	6022      	str	r2, [r4, #0]
  41ead8:	6122      	str	r2, [r4, #16]
  41eada:	6160      	str	r0, [r4, #20]
  41eadc:	d401      	bmi.n	41eae2 <setvbuf+0xce>
  41eade:	0598      	lsls	r0, r3, #22
  41eae0:	d53e      	bpl.n	41eb60 <setvbuf+0x14c>
  41eae2:	4628      	mov	r0, r5
  41eae4:	b003      	add	sp, #12
  41eae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41eaea:	6921      	ldr	r1, [r4, #16]
  41eaec:	4628      	mov	r0, r5
  41eaee:	f001 fc11 	bl	420314 <_free_r>
  41eaf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41eaf6:	e7bd      	b.n	41ea74 <setvbuf+0x60>
  41eaf8:	4628      	mov	r0, r5
  41eafa:	f001 fae5 	bl	4200c8 <__sinit>
  41eafe:	e796      	b.n	41ea2e <setvbuf+0x1a>
  41eb00:	2f00      	cmp	r7, #0
  41eb02:	d0cb      	beq.n	41ea9c <setvbuf+0x88>
  41eb04:	6bab      	ldr	r3, [r5, #56]	; 0x38
  41eb06:	2b00      	cmp	r3, #0
  41eb08:	d033      	beq.n	41eb72 <setvbuf+0x15e>
  41eb0a:	9b00      	ldr	r3, [sp, #0]
  41eb0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  41eb10:	6027      	str	r7, [r4, #0]
  41eb12:	429e      	cmp	r6, r3
  41eb14:	bf1c      	itt	ne
  41eb16:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  41eb1a:	81a2      	strhne	r2, [r4, #12]
  41eb1c:	f1b8 0f01 	cmp.w	r8, #1
  41eb20:	bf04      	itt	eq
  41eb22:	f042 0201 	orreq.w	r2, r2, #1
  41eb26:	81a2      	strheq	r2, [r4, #12]
  41eb28:	b292      	uxth	r2, r2
  41eb2a:	f012 0308 	ands.w	r3, r2, #8
  41eb2e:	6127      	str	r7, [r4, #16]
  41eb30:	6166      	str	r6, [r4, #20]
  41eb32:	d00e      	beq.n	41eb52 <setvbuf+0x13e>
  41eb34:	07d1      	lsls	r1, r2, #31
  41eb36:	d51a      	bpl.n	41eb6e <setvbuf+0x15a>
  41eb38:	6e65      	ldr	r5, [r4, #100]	; 0x64
  41eb3a:	4276      	negs	r6, r6
  41eb3c:	2300      	movs	r3, #0
  41eb3e:	f015 0501 	ands.w	r5, r5, #1
  41eb42:	61a6      	str	r6, [r4, #24]
  41eb44:	60a3      	str	r3, [r4, #8]
  41eb46:	d009      	beq.n	41eb5c <setvbuf+0x148>
  41eb48:	2500      	movs	r5, #0
  41eb4a:	4628      	mov	r0, r5
  41eb4c:	b003      	add	sp, #12
  41eb4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41eb52:	60a3      	str	r3, [r4, #8]
  41eb54:	6e65      	ldr	r5, [r4, #100]	; 0x64
  41eb56:	f015 0501 	ands.w	r5, r5, #1
  41eb5a:	d1f5      	bne.n	41eb48 <setvbuf+0x134>
  41eb5c:	0593      	lsls	r3, r2, #22
  41eb5e:	d4c0      	bmi.n	41eae2 <setvbuf+0xce>
  41eb60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41eb62:	f001 fe73 	bl	42084c <__retarget_lock_release_recursive>
  41eb66:	4628      	mov	r0, r5
  41eb68:	b003      	add	sp, #12
  41eb6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41eb6e:	60a6      	str	r6, [r4, #8]
  41eb70:	e7f0      	b.n	41eb54 <setvbuf+0x140>
  41eb72:	4628      	mov	r0, r5
  41eb74:	f001 faa8 	bl	4200c8 <__sinit>
  41eb78:	e7c7      	b.n	41eb0a <setvbuf+0xf6>
  41eb7a:	f04f 35ff 	mov.w	r5, #4294967295
  41eb7e:	e7b0      	b.n	41eae2 <setvbuf+0xce>
  41eb80:	f8dd 9000 	ldr.w	r9, [sp]
  41eb84:	45b1      	cmp	r9, r6
  41eb86:	d004      	beq.n	41eb92 <setvbuf+0x17e>
  41eb88:	4648      	mov	r0, r9
  41eb8a:	f7ff fb2d 	bl	41e1e8 <malloc>
  41eb8e:	4607      	mov	r7, r0
  41eb90:	b920      	cbnz	r0, 41eb9c <setvbuf+0x188>
  41eb92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41eb96:	f04f 35ff 	mov.w	r5, #4294967295
  41eb9a:	e792      	b.n	41eac2 <setvbuf+0xae>
  41eb9c:	464e      	mov	r6, r9
  41eb9e:	e783      	b.n	41eaa8 <setvbuf+0x94>
  41eba0:	20400060 	.word	0x20400060
	...
  41ebc0:	eba2 0003 	sub.w	r0, r2, r3
  41ebc4:	4770      	bx	lr
  41ebc6:	bf00      	nop

0041ebc8 <strcmp>:
  41ebc8:	7802      	ldrb	r2, [r0, #0]
  41ebca:	780b      	ldrb	r3, [r1, #0]
  41ebcc:	2a01      	cmp	r2, #1
  41ebce:	bf28      	it	cs
  41ebd0:	429a      	cmpcs	r2, r3
  41ebd2:	d1f5      	bne.n	41ebc0 <setvbuf+0x1ac>
  41ebd4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  41ebd8:	ea40 0401 	orr.w	r4, r0, r1
  41ebdc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  41ebe0:	f06f 0c00 	mvn.w	ip, #0
  41ebe4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  41ebe8:	b312      	cbz	r2, 41ec30 <strcmp+0x68>
  41ebea:	ea80 0401 	eor.w	r4, r0, r1
  41ebee:	f014 0f07 	tst.w	r4, #7
  41ebf2:	d16a      	bne.n	41ecca <strcmp+0x102>
  41ebf4:	f000 0407 	and.w	r4, r0, #7
  41ebf8:	f020 0007 	bic.w	r0, r0, #7
  41ebfc:	f004 0503 	and.w	r5, r4, #3
  41ec00:	f021 0107 	bic.w	r1, r1, #7
  41ec04:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  41ec08:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  41ec0c:	f014 0f04 	tst.w	r4, #4
  41ec10:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  41ec14:	fa0c f405 	lsl.w	r4, ip, r5
  41ec18:	ea62 0204 	orn	r2, r2, r4
  41ec1c:	ea66 0604 	orn	r6, r6, r4
  41ec20:	d00a      	beq.n	41ec38 <strcmp+0x70>
  41ec22:	ea63 0304 	orn	r3, r3, r4
  41ec26:	4662      	mov	r2, ip
  41ec28:	ea67 0704 	orn	r7, r7, r4
  41ec2c:	4666      	mov	r6, ip
  41ec2e:	e003      	b.n	41ec38 <strcmp+0x70>
  41ec30:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  41ec34:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  41ec38:	fa82 f54c 	uadd8	r5, r2, ip
  41ec3c:	ea82 0406 	eor.w	r4, r2, r6
  41ec40:	faa4 f48c 	sel	r4, r4, ip
  41ec44:	bb6c      	cbnz	r4, 41eca2 <strcmp+0xda>
  41ec46:	fa83 f54c 	uadd8	r5, r3, ip
  41ec4a:	ea83 0507 	eor.w	r5, r3, r7
  41ec4e:	faa5 f58c 	sel	r5, r5, ip
  41ec52:	b995      	cbnz	r5, 41ec7a <strcmp+0xb2>
  41ec54:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  41ec58:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  41ec5c:	fa82 f54c 	uadd8	r5, r2, ip
  41ec60:	ea82 0406 	eor.w	r4, r2, r6
  41ec64:	faa4 f48c 	sel	r4, r4, ip
  41ec68:	fa83 f54c 	uadd8	r5, r3, ip
  41ec6c:	ea83 0507 	eor.w	r5, r3, r7
  41ec70:	faa5 f58c 	sel	r5, r5, ip
  41ec74:	4325      	orrs	r5, r4
  41ec76:	d0db      	beq.n	41ec30 <strcmp+0x68>
  41ec78:	b99c      	cbnz	r4, 41eca2 <strcmp+0xda>
  41ec7a:	ba2d      	rev	r5, r5
  41ec7c:	fab5 f485 	clz	r4, r5
  41ec80:	f024 0407 	bic.w	r4, r4, #7
  41ec84:	fa27 f104 	lsr.w	r1, r7, r4
  41ec88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  41ec8c:	fa23 f304 	lsr.w	r3, r3, r4
  41ec90:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  41ec94:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41ec98:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41ec9c:	eba0 0001 	sub.w	r0, r0, r1
  41eca0:	4770      	bx	lr
  41eca2:	ba24      	rev	r4, r4
  41eca4:	fab4 f484 	clz	r4, r4
  41eca8:	f024 0407 	bic.w	r4, r4, #7
  41ecac:	fa26 f104 	lsr.w	r1, r6, r4
  41ecb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  41ecb4:	fa22 f204 	lsr.w	r2, r2, r4
  41ecb8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  41ecbc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41ecc0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41ecc4:	eba0 0001 	sub.w	r0, r0, r1
  41ecc8:	4770      	bx	lr
  41ecca:	f014 0f03 	tst.w	r4, #3
  41ecce:	d13c      	bne.n	41ed4a <strcmp+0x182>
  41ecd0:	f010 0403 	ands.w	r4, r0, #3
  41ecd4:	d128      	bne.n	41ed28 <strcmp+0x160>
  41ecd6:	f850 2b08 	ldr.w	r2, [r0], #8
  41ecda:	f851 3b08 	ldr.w	r3, [r1], #8
  41ecde:	fa82 f54c 	uadd8	r5, r2, ip
  41ece2:	ea82 0503 	eor.w	r5, r2, r3
  41ece6:	faa5 f58c 	sel	r5, r5, ip
  41ecea:	b95d      	cbnz	r5, 41ed04 <strcmp+0x13c>
  41ecec:	f850 2c04 	ldr.w	r2, [r0, #-4]
  41ecf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  41ecf4:	fa82 f54c 	uadd8	r5, r2, ip
  41ecf8:	ea82 0503 	eor.w	r5, r2, r3
  41ecfc:	faa5 f58c 	sel	r5, r5, ip
  41ed00:	2d00      	cmp	r5, #0
  41ed02:	d0e8      	beq.n	41ecd6 <strcmp+0x10e>
  41ed04:	ba2d      	rev	r5, r5
  41ed06:	fab5 f485 	clz	r4, r5
  41ed0a:	f024 0407 	bic.w	r4, r4, #7
  41ed0e:	fa23 f104 	lsr.w	r1, r3, r4
  41ed12:	fa22 f204 	lsr.w	r2, r2, r4
  41ed16:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  41ed1a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41ed1e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41ed22:	eba0 0001 	sub.w	r0, r0, r1
  41ed26:	4770      	bx	lr
  41ed28:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  41ed2c:	f020 0003 	bic.w	r0, r0, #3
  41ed30:	f850 2b08 	ldr.w	r2, [r0], #8
  41ed34:	f021 0103 	bic.w	r1, r1, #3
  41ed38:	f851 3b08 	ldr.w	r3, [r1], #8
  41ed3c:	fa0c f404 	lsl.w	r4, ip, r4
  41ed40:	ea62 0204 	orn	r2, r2, r4
  41ed44:	ea63 0304 	orn	r3, r3, r4
  41ed48:	e7c9      	b.n	41ecde <strcmp+0x116>
  41ed4a:	f010 0403 	ands.w	r4, r0, #3
  41ed4e:	d01a      	beq.n	41ed86 <strcmp+0x1be>
  41ed50:	eba1 0104 	sub.w	r1, r1, r4
  41ed54:	f020 0003 	bic.w	r0, r0, #3
  41ed58:	07e4      	lsls	r4, r4, #31
  41ed5a:	f850 2b04 	ldr.w	r2, [r0], #4
  41ed5e:	d006      	beq.n	41ed6e <strcmp+0x1a6>
  41ed60:	d20f      	bcs.n	41ed82 <strcmp+0x1ba>
  41ed62:	788b      	ldrb	r3, [r1, #2]
  41ed64:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  41ed68:	1ae4      	subs	r4, r4, r3
  41ed6a:	d106      	bne.n	41ed7a <strcmp+0x1b2>
  41ed6c:	b12b      	cbz	r3, 41ed7a <strcmp+0x1b2>
  41ed6e:	78cb      	ldrb	r3, [r1, #3]
  41ed70:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  41ed74:	1ae4      	subs	r4, r4, r3
  41ed76:	d100      	bne.n	41ed7a <strcmp+0x1b2>
  41ed78:	b91b      	cbnz	r3, 41ed82 <strcmp+0x1ba>
  41ed7a:	4620      	mov	r0, r4
  41ed7c:	f85d 4b10 	ldr.w	r4, [sp], #16
  41ed80:	4770      	bx	lr
  41ed82:	f101 0104 	add.w	r1, r1, #4
  41ed86:	f850 2b04 	ldr.w	r2, [r0], #4
  41ed8a:	07cc      	lsls	r4, r1, #31
  41ed8c:	f021 0103 	bic.w	r1, r1, #3
  41ed90:	f851 3b04 	ldr.w	r3, [r1], #4
  41ed94:	d848      	bhi.n	41ee28 <strcmp+0x260>
  41ed96:	d224      	bcs.n	41ede2 <strcmp+0x21a>
  41ed98:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  41ed9c:	fa82 f54c 	uadd8	r5, r2, ip
  41eda0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  41eda4:	faa5 f58c 	sel	r5, r5, ip
  41eda8:	d10a      	bne.n	41edc0 <strcmp+0x1f8>
  41edaa:	b965      	cbnz	r5, 41edc6 <strcmp+0x1fe>
  41edac:	f851 3b04 	ldr.w	r3, [r1], #4
  41edb0:	ea84 0402 	eor.w	r4, r4, r2
  41edb4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  41edb8:	d10e      	bne.n	41edd8 <strcmp+0x210>
  41edba:	f850 2b04 	ldr.w	r2, [r0], #4
  41edbe:	e7eb      	b.n	41ed98 <strcmp+0x1d0>
  41edc0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  41edc4:	e055      	b.n	41ee72 <strcmp+0x2aa>
  41edc6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  41edca:	d14d      	bne.n	41ee68 <strcmp+0x2a0>
  41edcc:	7808      	ldrb	r0, [r1, #0]
  41edce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41edd2:	f1c0 0000 	rsb	r0, r0, #0
  41edd6:	4770      	bx	lr
  41edd8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  41eddc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  41ede0:	e047      	b.n	41ee72 <strcmp+0x2aa>
  41ede2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  41ede6:	fa82 f54c 	uadd8	r5, r2, ip
  41edea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  41edee:	faa5 f58c 	sel	r5, r5, ip
  41edf2:	d10a      	bne.n	41ee0a <strcmp+0x242>
  41edf4:	b965      	cbnz	r5, 41ee10 <strcmp+0x248>
  41edf6:	f851 3b04 	ldr.w	r3, [r1], #4
  41edfa:	ea84 0402 	eor.w	r4, r4, r2
  41edfe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  41ee02:	d10c      	bne.n	41ee1e <strcmp+0x256>
  41ee04:	f850 2b04 	ldr.w	r2, [r0], #4
  41ee08:	e7eb      	b.n	41ede2 <strcmp+0x21a>
  41ee0a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  41ee0e:	e030      	b.n	41ee72 <strcmp+0x2aa>
  41ee10:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  41ee14:	d128      	bne.n	41ee68 <strcmp+0x2a0>
  41ee16:	880b      	ldrh	r3, [r1, #0]
  41ee18:	ea4f 4212 	mov.w	r2, r2, lsr #16
  41ee1c:	e029      	b.n	41ee72 <strcmp+0x2aa>
  41ee1e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  41ee22:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  41ee26:	e024      	b.n	41ee72 <strcmp+0x2aa>
  41ee28:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  41ee2c:	fa82 f54c 	uadd8	r5, r2, ip
  41ee30:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  41ee34:	faa5 f58c 	sel	r5, r5, ip
  41ee38:	d10a      	bne.n	41ee50 <strcmp+0x288>
  41ee3a:	b965      	cbnz	r5, 41ee56 <strcmp+0x28e>
  41ee3c:	f851 3b04 	ldr.w	r3, [r1], #4
  41ee40:	ea84 0402 	eor.w	r4, r4, r2
  41ee44:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  41ee48:	d109      	bne.n	41ee5e <strcmp+0x296>
  41ee4a:	f850 2b04 	ldr.w	r2, [r0], #4
  41ee4e:	e7eb      	b.n	41ee28 <strcmp+0x260>
  41ee50:	ea4f 6313 	mov.w	r3, r3, lsr #24
  41ee54:	e00d      	b.n	41ee72 <strcmp+0x2aa>
  41ee56:	f015 0fff 	tst.w	r5, #255	; 0xff
  41ee5a:	d105      	bne.n	41ee68 <strcmp+0x2a0>
  41ee5c:	680b      	ldr	r3, [r1, #0]
  41ee5e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  41ee62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  41ee66:	e004      	b.n	41ee72 <strcmp+0x2aa>
  41ee68:	f04f 0000 	mov.w	r0, #0
  41ee6c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41ee70:	4770      	bx	lr
  41ee72:	ba12      	rev	r2, r2
  41ee74:	ba1b      	rev	r3, r3
  41ee76:	fa82 f44c 	uadd8	r4, r2, ip
  41ee7a:	ea82 0403 	eor.w	r4, r2, r3
  41ee7e:	faa4 f58c 	sel	r5, r4, ip
  41ee82:	fab5 f485 	clz	r4, r5
  41ee86:	fa02 f204 	lsl.w	r2, r2, r4
  41ee8a:	fa03 f304 	lsl.w	r3, r3, r4
  41ee8e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  41ee92:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41ee96:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  41ee9a:	4770      	bx	lr

0041ee9c <strcpy>:
  41ee9c:	ea80 0201 	eor.w	r2, r0, r1
  41eea0:	4684      	mov	ip, r0
  41eea2:	f012 0f03 	tst.w	r2, #3
  41eea6:	d14f      	bne.n	41ef48 <strcpy+0xac>
  41eea8:	f011 0f03 	tst.w	r1, #3
  41eeac:	d132      	bne.n	41ef14 <strcpy+0x78>
  41eeae:	f84d 4d04 	str.w	r4, [sp, #-4]!
  41eeb2:	f011 0f04 	tst.w	r1, #4
  41eeb6:	f851 3b04 	ldr.w	r3, [r1], #4
  41eeba:	d00b      	beq.n	41eed4 <strcpy+0x38>
  41eebc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  41eec0:	439a      	bics	r2, r3
  41eec2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  41eec6:	bf04      	itt	eq
  41eec8:	f84c 3b04 	streq.w	r3, [ip], #4
  41eecc:	f851 3b04 	ldreq.w	r3, [r1], #4
  41eed0:	d116      	bne.n	41ef00 <strcpy+0x64>
  41eed2:	bf00      	nop
  41eed4:	f851 4b04 	ldr.w	r4, [r1], #4
  41eed8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  41eedc:	439a      	bics	r2, r3
  41eede:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  41eee2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  41eee6:	d10b      	bne.n	41ef00 <strcpy+0x64>
  41eee8:	f84c 3b04 	str.w	r3, [ip], #4
  41eeec:	43a2      	bics	r2, r4
  41eeee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  41eef2:	bf04      	itt	eq
  41eef4:	f851 3b04 	ldreq.w	r3, [r1], #4
  41eef8:	f84c 4b04 	streq.w	r4, [ip], #4
  41eefc:	d0ea      	beq.n	41eed4 <strcpy+0x38>
  41eefe:	4623      	mov	r3, r4
  41ef00:	f80c 3b01 	strb.w	r3, [ip], #1
  41ef04:	f013 0fff 	tst.w	r3, #255	; 0xff
  41ef08:	ea4f 2333 	mov.w	r3, r3, ror #8
  41ef0c:	d1f8      	bne.n	41ef00 <strcpy+0x64>
  41ef0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  41ef12:	4770      	bx	lr
  41ef14:	f011 0f01 	tst.w	r1, #1
  41ef18:	d006      	beq.n	41ef28 <strcpy+0x8c>
  41ef1a:	f811 2b01 	ldrb.w	r2, [r1], #1
  41ef1e:	f80c 2b01 	strb.w	r2, [ip], #1
  41ef22:	2a00      	cmp	r2, #0
  41ef24:	bf08      	it	eq
  41ef26:	4770      	bxeq	lr
  41ef28:	f011 0f02 	tst.w	r1, #2
  41ef2c:	d0bf      	beq.n	41eeae <strcpy+0x12>
  41ef2e:	f831 2b02 	ldrh.w	r2, [r1], #2
  41ef32:	f012 0fff 	tst.w	r2, #255	; 0xff
  41ef36:	bf16      	itet	ne
  41ef38:	f82c 2b02 	strhne.w	r2, [ip], #2
  41ef3c:	f88c 2000 	strbeq.w	r2, [ip]
  41ef40:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  41ef44:	d1b3      	bne.n	41eeae <strcpy+0x12>
  41ef46:	4770      	bx	lr
  41ef48:	f811 2b01 	ldrb.w	r2, [r1], #1
  41ef4c:	f80c 2b01 	strb.w	r2, [ip], #1
  41ef50:	2a00      	cmp	r2, #0
  41ef52:	d1f9      	bne.n	41ef48 <strcpy+0xac>
  41ef54:	4770      	bx	lr
  41ef56:	bf00      	nop
	...

0041ef80 <strlen>:
  41ef80:	f890 f000 	pld	[r0]
  41ef84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  41ef88:	f020 0107 	bic.w	r1, r0, #7
  41ef8c:	f06f 0c00 	mvn.w	ip, #0
  41ef90:	f010 0407 	ands.w	r4, r0, #7
  41ef94:	f891 f020 	pld	[r1, #32]
  41ef98:	f040 8049 	bne.w	41f02e <strlen+0xae>
  41ef9c:	f04f 0400 	mov.w	r4, #0
  41efa0:	f06f 0007 	mvn.w	r0, #7
  41efa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  41efa8:	f891 f040 	pld	[r1, #64]	; 0x40
  41efac:	f100 0008 	add.w	r0, r0, #8
  41efb0:	fa82 f24c 	uadd8	r2, r2, ip
  41efb4:	faa4 f28c 	sel	r2, r4, ip
  41efb8:	fa83 f34c 	uadd8	r3, r3, ip
  41efbc:	faa2 f38c 	sel	r3, r2, ip
  41efc0:	bb4b      	cbnz	r3, 41f016 <strlen+0x96>
  41efc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  41efc6:	fa82 f24c 	uadd8	r2, r2, ip
  41efca:	f100 0008 	add.w	r0, r0, #8
  41efce:	faa4 f28c 	sel	r2, r4, ip
  41efd2:	fa83 f34c 	uadd8	r3, r3, ip
  41efd6:	faa2 f38c 	sel	r3, r2, ip
  41efda:	b9e3      	cbnz	r3, 41f016 <strlen+0x96>
  41efdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  41efe0:	fa82 f24c 	uadd8	r2, r2, ip
  41efe4:	f100 0008 	add.w	r0, r0, #8
  41efe8:	faa4 f28c 	sel	r2, r4, ip
  41efec:	fa83 f34c 	uadd8	r3, r3, ip
  41eff0:	faa2 f38c 	sel	r3, r2, ip
  41eff4:	b97b      	cbnz	r3, 41f016 <strlen+0x96>
  41eff6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  41effa:	f101 0120 	add.w	r1, r1, #32
  41effe:	fa82 f24c 	uadd8	r2, r2, ip
  41f002:	f100 0008 	add.w	r0, r0, #8
  41f006:	faa4 f28c 	sel	r2, r4, ip
  41f00a:	fa83 f34c 	uadd8	r3, r3, ip
  41f00e:	faa2 f38c 	sel	r3, r2, ip
  41f012:	2b00      	cmp	r3, #0
  41f014:	d0c6      	beq.n	41efa4 <strlen+0x24>
  41f016:	2a00      	cmp	r2, #0
  41f018:	bf04      	itt	eq
  41f01a:	3004      	addeq	r0, #4
  41f01c:	461a      	moveq	r2, r3
  41f01e:	ba12      	rev	r2, r2
  41f020:	fab2 f282 	clz	r2, r2
  41f024:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  41f028:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  41f02c:	4770      	bx	lr
  41f02e:	e9d1 2300 	ldrd	r2, r3, [r1]
  41f032:	f004 0503 	and.w	r5, r4, #3
  41f036:	f1c4 0000 	rsb	r0, r4, #0
  41f03a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  41f03e:	f014 0f04 	tst.w	r4, #4
  41f042:	f891 f040 	pld	[r1, #64]	; 0x40
  41f046:	fa0c f505 	lsl.w	r5, ip, r5
  41f04a:	ea62 0205 	orn	r2, r2, r5
  41f04e:	bf1c      	itt	ne
  41f050:	ea63 0305 	ornne	r3, r3, r5
  41f054:	4662      	movne	r2, ip
  41f056:	f04f 0400 	mov.w	r4, #0
  41f05a:	e7a9      	b.n	41efb0 <strlen+0x30>

0041f05c <__sprint_r.part.0>:
  41f05c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f060:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  41f062:	049c      	lsls	r4, r3, #18
  41f064:	4693      	mov	fp, r2
  41f066:	d52f      	bpl.n	41f0c8 <__sprint_r.part.0+0x6c>
  41f068:	6893      	ldr	r3, [r2, #8]
  41f06a:	6812      	ldr	r2, [r2, #0]
  41f06c:	b353      	cbz	r3, 41f0c4 <__sprint_r.part.0+0x68>
  41f06e:	460e      	mov	r6, r1
  41f070:	4607      	mov	r7, r0
  41f072:	f102 0908 	add.w	r9, r2, #8
  41f076:	e919 0420 	ldmdb	r9, {r5, sl}
  41f07a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  41f07e:	d017      	beq.n	41f0b0 <__sprint_r.part.0+0x54>
  41f080:	3d04      	subs	r5, #4
  41f082:	2400      	movs	r4, #0
  41f084:	e001      	b.n	41f08a <__sprint_r.part.0+0x2e>
  41f086:	45a0      	cmp	r8, r4
  41f088:	d010      	beq.n	41f0ac <__sprint_r.part.0+0x50>
  41f08a:	4632      	mov	r2, r6
  41f08c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  41f090:	4638      	mov	r0, r7
  41f092:	f001 f8bb 	bl	42020c <_fputwc_r>
  41f096:	1c43      	adds	r3, r0, #1
  41f098:	f104 0401 	add.w	r4, r4, #1
  41f09c:	d1f3      	bne.n	41f086 <__sprint_r.part.0+0x2a>
  41f09e:	2300      	movs	r3, #0
  41f0a0:	f8cb 3008 	str.w	r3, [fp, #8]
  41f0a4:	f8cb 3004 	str.w	r3, [fp, #4]
  41f0a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f0ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  41f0b0:	f02a 0a03 	bic.w	sl, sl, #3
  41f0b4:	eba3 030a 	sub.w	r3, r3, sl
  41f0b8:	f8cb 3008 	str.w	r3, [fp, #8]
  41f0bc:	f109 0908 	add.w	r9, r9, #8
  41f0c0:	2b00      	cmp	r3, #0
  41f0c2:	d1d8      	bne.n	41f076 <__sprint_r.part.0+0x1a>
  41f0c4:	2000      	movs	r0, #0
  41f0c6:	e7ea      	b.n	41f09e <__sprint_r.part.0+0x42>
  41f0c8:	f001 fa0a 	bl	4204e0 <__sfvwrite_r>
  41f0cc:	2300      	movs	r3, #0
  41f0ce:	f8cb 3008 	str.w	r3, [fp, #8]
  41f0d2:	f8cb 3004 	str.w	r3, [fp, #4]
  41f0d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f0da:	bf00      	nop

0041f0dc <_vfiprintf_r>:
  41f0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f0e0:	b0ad      	sub	sp, #180	; 0xb4
  41f0e2:	461d      	mov	r5, r3
  41f0e4:	468b      	mov	fp, r1
  41f0e6:	4690      	mov	r8, r2
  41f0e8:	9307      	str	r3, [sp, #28]
  41f0ea:	9006      	str	r0, [sp, #24]
  41f0ec:	b118      	cbz	r0, 41f0f6 <_vfiprintf_r+0x1a>
  41f0ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41f0f0:	2b00      	cmp	r3, #0
  41f0f2:	f000 80f3 	beq.w	41f2dc <_vfiprintf_r+0x200>
  41f0f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  41f0fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  41f0fe:	07df      	lsls	r7, r3, #31
  41f100:	b281      	uxth	r1, r0
  41f102:	d402      	bmi.n	41f10a <_vfiprintf_r+0x2e>
  41f104:	058e      	lsls	r6, r1, #22
  41f106:	f140 80fc 	bpl.w	41f302 <_vfiprintf_r+0x226>
  41f10a:	048c      	lsls	r4, r1, #18
  41f10c:	d40a      	bmi.n	41f124 <_vfiprintf_r+0x48>
  41f10e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  41f112:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  41f116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  41f11a:	f8ab 100c 	strh.w	r1, [fp, #12]
  41f11e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  41f122:	b289      	uxth	r1, r1
  41f124:	0708      	lsls	r0, r1, #28
  41f126:	f140 80b3 	bpl.w	41f290 <_vfiprintf_r+0x1b4>
  41f12a:	f8db 3010 	ldr.w	r3, [fp, #16]
  41f12e:	2b00      	cmp	r3, #0
  41f130:	f000 80ae 	beq.w	41f290 <_vfiprintf_r+0x1b4>
  41f134:	f001 031a 	and.w	r3, r1, #26
  41f138:	2b0a      	cmp	r3, #10
  41f13a:	f000 80b5 	beq.w	41f2a8 <_vfiprintf_r+0x1cc>
  41f13e:	2300      	movs	r3, #0
  41f140:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  41f144:	930b      	str	r3, [sp, #44]	; 0x2c
  41f146:	9311      	str	r3, [sp, #68]	; 0x44
  41f148:	9310      	str	r3, [sp, #64]	; 0x40
  41f14a:	9303      	str	r3, [sp, #12]
  41f14c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  41f150:	46ca      	mov	sl, r9
  41f152:	f8cd b010 	str.w	fp, [sp, #16]
  41f156:	f898 3000 	ldrb.w	r3, [r8]
  41f15a:	4644      	mov	r4, r8
  41f15c:	b1fb      	cbz	r3, 41f19e <_vfiprintf_r+0xc2>
  41f15e:	2b25      	cmp	r3, #37	; 0x25
  41f160:	d102      	bne.n	41f168 <_vfiprintf_r+0x8c>
  41f162:	e01c      	b.n	41f19e <_vfiprintf_r+0xc2>
  41f164:	2b25      	cmp	r3, #37	; 0x25
  41f166:	d003      	beq.n	41f170 <_vfiprintf_r+0x94>
  41f168:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  41f16c:	2b00      	cmp	r3, #0
  41f16e:	d1f9      	bne.n	41f164 <_vfiprintf_r+0x88>
  41f170:	eba4 0508 	sub.w	r5, r4, r8
  41f174:	b19d      	cbz	r5, 41f19e <_vfiprintf_r+0xc2>
  41f176:	9b10      	ldr	r3, [sp, #64]	; 0x40
  41f178:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41f17a:	f8ca 8000 	str.w	r8, [sl]
  41f17e:	3301      	adds	r3, #1
  41f180:	442a      	add	r2, r5
  41f182:	2b07      	cmp	r3, #7
  41f184:	f8ca 5004 	str.w	r5, [sl, #4]
  41f188:	9211      	str	r2, [sp, #68]	; 0x44
  41f18a:	9310      	str	r3, [sp, #64]	; 0x40
  41f18c:	dd7a      	ble.n	41f284 <_vfiprintf_r+0x1a8>
  41f18e:	2a00      	cmp	r2, #0
  41f190:	f040 84b0 	bne.w	41faf4 <_vfiprintf_r+0xa18>
  41f194:	9b03      	ldr	r3, [sp, #12]
  41f196:	9210      	str	r2, [sp, #64]	; 0x40
  41f198:	442b      	add	r3, r5
  41f19a:	46ca      	mov	sl, r9
  41f19c:	9303      	str	r3, [sp, #12]
  41f19e:	7823      	ldrb	r3, [r4, #0]
  41f1a0:	2b00      	cmp	r3, #0
  41f1a2:	f000 83e0 	beq.w	41f966 <_vfiprintf_r+0x88a>
  41f1a6:	2000      	movs	r0, #0
  41f1a8:	f04f 0300 	mov.w	r3, #0
  41f1ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  41f1b0:	f104 0801 	add.w	r8, r4, #1
  41f1b4:	7862      	ldrb	r2, [r4, #1]
  41f1b6:	4605      	mov	r5, r0
  41f1b8:	4606      	mov	r6, r0
  41f1ba:	4603      	mov	r3, r0
  41f1bc:	f04f 34ff 	mov.w	r4, #4294967295
  41f1c0:	f108 0801 	add.w	r8, r8, #1
  41f1c4:	f1a2 0120 	sub.w	r1, r2, #32
  41f1c8:	2958      	cmp	r1, #88	; 0x58
  41f1ca:	f200 82de 	bhi.w	41f78a <_vfiprintf_r+0x6ae>
  41f1ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  41f1d2:	0221      	.short	0x0221
  41f1d4:	02dc02dc 	.word	0x02dc02dc
  41f1d8:	02dc0229 	.word	0x02dc0229
  41f1dc:	02dc02dc 	.word	0x02dc02dc
  41f1e0:	02dc02dc 	.word	0x02dc02dc
  41f1e4:	028902dc 	.word	0x028902dc
  41f1e8:	02dc0295 	.word	0x02dc0295
  41f1ec:	02bd00a2 	.word	0x02bd00a2
  41f1f0:	019f02dc 	.word	0x019f02dc
  41f1f4:	01a401a4 	.word	0x01a401a4
  41f1f8:	01a401a4 	.word	0x01a401a4
  41f1fc:	01a401a4 	.word	0x01a401a4
  41f200:	01a401a4 	.word	0x01a401a4
  41f204:	02dc01a4 	.word	0x02dc01a4
  41f208:	02dc02dc 	.word	0x02dc02dc
  41f20c:	02dc02dc 	.word	0x02dc02dc
  41f210:	02dc02dc 	.word	0x02dc02dc
  41f214:	02dc02dc 	.word	0x02dc02dc
  41f218:	01b202dc 	.word	0x01b202dc
  41f21c:	02dc02dc 	.word	0x02dc02dc
  41f220:	02dc02dc 	.word	0x02dc02dc
  41f224:	02dc02dc 	.word	0x02dc02dc
  41f228:	02dc02dc 	.word	0x02dc02dc
  41f22c:	02dc02dc 	.word	0x02dc02dc
  41f230:	02dc0197 	.word	0x02dc0197
  41f234:	02dc02dc 	.word	0x02dc02dc
  41f238:	02dc02dc 	.word	0x02dc02dc
  41f23c:	02dc019b 	.word	0x02dc019b
  41f240:	025302dc 	.word	0x025302dc
  41f244:	02dc02dc 	.word	0x02dc02dc
  41f248:	02dc02dc 	.word	0x02dc02dc
  41f24c:	02dc02dc 	.word	0x02dc02dc
  41f250:	02dc02dc 	.word	0x02dc02dc
  41f254:	02dc02dc 	.word	0x02dc02dc
  41f258:	021b025a 	.word	0x021b025a
  41f25c:	02dc02dc 	.word	0x02dc02dc
  41f260:	026e02dc 	.word	0x026e02dc
  41f264:	02dc021b 	.word	0x02dc021b
  41f268:	027302dc 	.word	0x027302dc
  41f26c:	01f502dc 	.word	0x01f502dc
  41f270:	02090182 	.word	0x02090182
  41f274:	02dc02d7 	.word	0x02dc02d7
  41f278:	02dc029a 	.word	0x02dc029a
  41f27c:	02dc00a7 	.word	0x02dc00a7
  41f280:	022e02dc 	.word	0x022e02dc
  41f284:	f10a 0a08 	add.w	sl, sl, #8
  41f288:	9b03      	ldr	r3, [sp, #12]
  41f28a:	442b      	add	r3, r5
  41f28c:	9303      	str	r3, [sp, #12]
  41f28e:	e786      	b.n	41f19e <_vfiprintf_r+0xc2>
  41f290:	4659      	mov	r1, fp
  41f292:	9806      	ldr	r0, [sp, #24]
  41f294:	f000 fdac 	bl	41fdf0 <__swsetup_r>
  41f298:	bb18      	cbnz	r0, 41f2e2 <_vfiprintf_r+0x206>
  41f29a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  41f29e:	f001 031a 	and.w	r3, r1, #26
  41f2a2:	2b0a      	cmp	r3, #10
  41f2a4:	f47f af4b 	bne.w	41f13e <_vfiprintf_r+0x62>
  41f2a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  41f2ac:	2b00      	cmp	r3, #0
  41f2ae:	f6ff af46 	blt.w	41f13e <_vfiprintf_r+0x62>
  41f2b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  41f2b6:	07db      	lsls	r3, r3, #31
  41f2b8:	d405      	bmi.n	41f2c6 <_vfiprintf_r+0x1ea>
  41f2ba:	058f      	lsls	r7, r1, #22
  41f2bc:	d403      	bmi.n	41f2c6 <_vfiprintf_r+0x1ea>
  41f2be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  41f2c2:	f001 fac3 	bl	42084c <__retarget_lock_release_recursive>
  41f2c6:	462b      	mov	r3, r5
  41f2c8:	4642      	mov	r2, r8
  41f2ca:	4659      	mov	r1, fp
  41f2cc:	9806      	ldr	r0, [sp, #24]
  41f2ce:	f000 fd4d 	bl	41fd6c <__sbprintf>
  41f2d2:	9003      	str	r0, [sp, #12]
  41f2d4:	9803      	ldr	r0, [sp, #12]
  41f2d6:	b02d      	add	sp, #180	; 0xb4
  41f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f2dc:	f000 fef4 	bl	4200c8 <__sinit>
  41f2e0:	e709      	b.n	41f0f6 <_vfiprintf_r+0x1a>
  41f2e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  41f2e6:	07d9      	lsls	r1, r3, #31
  41f2e8:	d404      	bmi.n	41f2f4 <_vfiprintf_r+0x218>
  41f2ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  41f2ee:	059a      	lsls	r2, r3, #22
  41f2f0:	f140 84aa 	bpl.w	41fc48 <_vfiprintf_r+0xb6c>
  41f2f4:	f04f 33ff 	mov.w	r3, #4294967295
  41f2f8:	9303      	str	r3, [sp, #12]
  41f2fa:	9803      	ldr	r0, [sp, #12]
  41f2fc:	b02d      	add	sp, #180	; 0xb4
  41f2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f302:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  41f306:	f001 fa9f 	bl	420848 <__retarget_lock_acquire_recursive>
  41f30a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  41f30e:	b281      	uxth	r1, r0
  41f310:	e6fb      	b.n	41f10a <_vfiprintf_r+0x2e>
  41f312:	4276      	negs	r6, r6
  41f314:	9207      	str	r2, [sp, #28]
  41f316:	f043 0304 	orr.w	r3, r3, #4
  41f31a:	f898 2000 	ldrb.w	r2, [r8]
  41f31e:	e74f      	b.n	41f1c0 <_vfiprintf_r+0xe4>
  41f320:	9608      	str	r6, [sp, #32]
  41f322:	069e      	lsls	r6, r3, #26
  41f324:	f100 8450 	bmi.w	41fbc8 <_vfiprintf_r+0xaec>
  41f328:	9907      	ldr	r1, [sp, #28]
  41f32a:	06dd      	lsls	r5, r3, #27
  41f32c:	460a      	mov	r2, r1
  41f32e:	f100 83ef 	bmi.w	41fb10 <_vfiprintf_r+0xa34>
  41f332:	0658      	lsls	r0, r3, #25
  41f334:	f140 83ec 	bpl.w	41fb10 <_vfiprintf_r+0xa34>
  41f338:	880e      	ldrh	r6, [r1, #0]
  41f33a:	3104      	adds	r1, #4
  41f33c:	2700      	movs	r7, #0
  41f33e:	2201      	movs	r2, #1
  41f340:	9107      	str	r1, [sp, #28]
  41f342:	f04f 0100 	mov.w	r1, #0
  41f346:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  41f34a:	2500      	movs	r5, #0
  41f34c:	1c61      	adds	r1, r4, #1
  41f34e:	f000 8116 	beq.w	41f57e <_vfiprintf_r+0x4a2>
  41f352:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  41f356:	9102      	str	r1, [sp, #8]
  41f358:	ea56 0107 	orrs.w	r1, r6, r7
  41f35c:	f040 8114 	bne.w	41f588 <_vfiprintf_r+0x4ac>
  41f360:	2c00      	cmp	r4, #0
  41f362:	f040 835c 	bne.w	41fa1e <_vfiprintf_r+0x942>
  41f366:	2a00      	cmp	r2, #0
  41f368:	f040 83b7 	bne.w	41fada <_vfiprintf_r+0x9fe>
  41f36c:	f013 0301 	ands.w	r3, r3, #1
  41f370:	9305      	str	r3, [sp, #20]
  41f372:	f000 8457 	beq.w	41fc24 <_vfiprintf_r+0xb48>
  41f376:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  41f37a:	2330      	movs	r3, #48	; 0x30
  41f37c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  41f380:	9b05      	ldr	r3, [sp, #20]
  41f382:	42a3      	cmp	r3, r4
  41f384:	bfb8      	it	lt
  41f386:	4623      	movlt	r3, r4
  41f388:	9301      	str	r3, [sp, #4]
  41f38a:	b10d      	cbz	r5, 41f390 <_vfiprintf_r+0x2b4>
  41f38c:	3301      	adds	r3, #1
  41f38e:	9301      	str	r3, [sp, #4]
  41f390:	9b02      	ldr	r3, [sp, #8]
  41f392:	f013 0302 	ands.w	r3, r3, #2
  41f396:	9309      	str	r3, [sp, #36]	; 0x24
  41f398:	d002      	beq.n	41f3a0 <_vfiprintf_r+0x2c4>
  41f39a:	9b01      	ldr	r3, [sp, #4]
  41f39c:	3302      	adds	r3, #2
  41f39e:	9301      	str	r3, [sp, #4]
  41f3a0:	9b02      	ldr	r3, [sp, #8]
  41f3a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  41f3a6:	930a      	str	r3, [sp, #40]	; 0x28
  41f3a8:	f040 8217 	bne.w	41f7da <_vfiprintf_r+0x6fe>
  41f3ac:	9b08      	ldr	r3, [sp, #32]
  41f3ae:	9a01      	ldr	r2, [sp, #4]
  41f3b0:	1a9d      	subs	r5, r3, r2
  41f3b2:	2d00      	cmp	r5, #0
  41f3b4:	f340 8211 	ble.w	41f7da <_vfiprintf_r+0x6fe>
  41f3b8:	2d10      	cmp	r5, #16
  41f3ba:	f340 8490 	ble.w	41fcde <_vfiprintf_r+0xc02>
  41f3be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  41f3c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41f3c2:	4ec4      	ldr	r6, [pc, #784]	; (41f6d4 <_vfiprintf_r+0x5f8>)
  41f3c4:	46d6      	mov	lr, sl
  41f3c6:	2710      	movs	r7, #16
  41f3c8:	46a2      	mov	sl, r4
  41f3ca:	4619      	mov	r1, r3
  41f3cc:	9c06      	ldr	r4, [sp, #24]
  41f3ce:	e007      	b.n	41f3e0 <_vfiprintf_r+0x304>
  41f3d0:	f101 0c02 	add.w	ip, r1, #2
  41f3d4:	f10e 0e08 	add.w	lr, lr, #8
  41f3d8:	4601      	mov	r1, r0
  41f3da:	3d10      	subs	r5, #16
  41f3dc:	2d10      	cmp	r5, #16
  41f3de:	dd11      	ble.n	41f404 <_vfiprintf_r+0x328>
  41f3e0:	1c48      	adds	r0, r1, #1
  41f3e2:	3210      	adds	r2, #16
  41f3e4:	2807      	cmp	r0, #7
  41f3e6:	9211      	str	r2, [sp, #68]	; 0x44
  41f3e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  41f3ec:	9010      	str	r0, [sp, #64]	; 0x40
  41f3ee:	ddef      	ble.n	41f3d0 <_vfiprintf_r+0x2f4>
  41f3f0:	2a00      	cmp	r2, #0
  41f3f2:	f040 81e4 	bne.w	41f7be <_vfiprintf_r+0x6e2>
  41f3f6:	3d10      	subs	r5, #16
  41f3f8:	2d10      	cmp	r5, #16
  41f3fa:	4611      	mov	r1, r2
  41f3fc:	f04f 0c01 	mov.w	ip, #1
  41f400:	46ce      	mov	lr, r9
  41f402:	dced      	bgt.n	41f3e0 <_vfiprintf_r+0x304>
  41f404:	4654      	mov	r4, sl
  41f406:	4661      	mov	r1, ip
  41f408:	46f2      	mov	sl, lr
  41f40a:	442a      	add	r2, r5
  41f40c:	2907      	cmp	r1, #7
  41f40e:	9211      	str	r2, [sp, #68]	; 0x44
  41f410:	f8ca 6000 	str.w	r6, [sl]
  41f414:	f8ca 5004 	str.w	r5, [sl, #4]
  41f418:	9110      	str	r1, [sp, #64]	; 0x40
  41f41a:	f300 82ec 	bgt.w	41f9f6 <_vfiprintf_r+0x91a>
  41f41e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41f422:	f10a 0a08 	add.w	sl, sl, #8
  41f426:	1c48      	adds	r0, r1, #1
  41f428:	2d00      	cmp	r5, #0
  41f42a:	f040 81de 	bne.w	41f7ea <_vfiprintf_r+0x70e>
  41f42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41f430:	2b00      	cmp	r3, #0
  41f432:	f000 81f8 	beq.w	41f826 <_vfiprintf_r+0x74a>
  41f436:	3202      	adds	r2, #2
  41f438:	a90e      	add	r1, sp, #56	; 0x38
  41f43a:	2302      	movs	r3, #2
  41f43c:	2807      	cmp	r0, #7
  41f43e:	9211      	str	r2, [sp, #68]	; 0x44
  41f440:	9010      	str	r0, [sp, #64]	; 0x40
  41f442:	e88a 000a 	stmia.w	sl, {r1, r3}
  41f446:	f340 81ea 	ble.w	41f81e <_vfiprintf_r+0x742>
  41f44a:	2a00      	cmp	r2, #0
  41f44c:	f040 838c 	bne.w	41fb68 <_vfiprintf_r+0xa8c>
  41f450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41f452:	2b80      	cmp	r3, #128	; 0x80
  41f454:	f04f 0001 	mov.w	r0, #1
  41f458:	4611      	mov	r1, r2
  41f45a:	46ca      	mov	sl, r9
  41f45c:	f040 81e7 	bne.w	41f82e <_vfiprintf_r+0x752>
  41f460:	9b08      	ldr	r3, [sp, #32]
  41f462:	9d01      	ldr	r5, [sp, #4]
  41f464:	1b5e      	subs	r6, r3, r5
  41f466:	2e00      	cmp	r6, #0
  41f468:	f340 81e1 	ble.w	41f82e <_vfiprintf_r+0x752>
  41f46c:	2e10      	cmp	r6, #16
  41f46e:	4d9a      	ldr	r5, [pc, #616]	; (41f6d8 <_vfiprintf_r+0x5fc>)
  41f470:	f340 8450 	ble.w	41fd14 <_vfiprintf_r+0xc38>
  41f474:	46d4      	mov	ip, sl
  41f476:	2710      	movs	r7, #16
  41f478:	46a2      	mov	sl, r4
  41f47a:	9c06      	ldr	r4, [sp, #24]
  41f47c:	e007      	b.n	41f48e <_vfiprintf_r+0x3b2>
  41f47e:	f101 0e02 	add.w	lr, r1, #2
  41f482:	f10c 0c08 	add.w	ip, ip, #8
  41f486:	4601      	mov	r1, r0
  41f488:	3e10      	subs	r6, #16
  41f48a:	2e10      	cmp	r6, #16
  41f48c:	dd11      	ble.n	41f4b2 <_vfiprintf_r+0x3d6>
  41f48e:	1c48      	adds	r0, r1, #1
  41f490:	3210      	adds	r2, #16
  41f492:	2807      	cmp	r0, #7
  41f494:	9211      	str	r2, [sp, #68]	; 0x44
  41f496:	e88c 00a0 	stmia.w	ip, {r5, r7}
  41f49a:	9010      	str	r0, [sp, #64]	; 0x40
  41f49c:	ddef      	ble.n	41f47e <_vfiprintf_r+0x3a2>
  41f49e:	2a00      	cmp	r2, #0
  41f4a0:	f040 829d 	bne.w	41f9de <_vfiprintf_r+0x902>
  41f4a4:	3e10      	subs	r6, #16
  41f4a6:	2e10      	cmp	r6, #16
  41f4a8:	f04f 0e01 	mov.w	lr, #1
  41f4ac:	4611      	mov	r1, r2
  41f4ae:	46cc      	mov	ip, r9
  41f4b0:	dced      	bgt.n	41f48e <_vfiprintf_r+0x3b2>
  41f4b2:	4654      	mov	r4, sl
  41f4b4:	46e2      	mov	sl, ip
  41f4b6:	4432      	add	r2, r6
  41f4b8:	f1be 0f07 	cmp.w	lr, #7
  41f4bc:	9211      	str	r2, [sp, #68]	; 0x44
  41f4be:	e88a 0060 	stmia.w	sl, {r5, r6}
  41f4c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  41f4c6:	f300 8369 	bgt.w	41fb9c <_vfiprintf_r+0xac0>
  41f4ca:	f10a 0a08 	add.w	sl, sl, #8
  41f4ce:	f10e 0001 	add.w	r0, lr, #1
  41f4d2:	4671      	mov	r1, lr
  41f4d4:	e1ab      	b.n	41f82e <_vfiprintf_r+0x752>
  41f4d6:	9608      	str	r6, [sp, #32]
  41f4d8:	f013 0220 	ands.w	r2, r3, #32
  41f4dc:	f040 838c 	bne.w	41fbf8 <_vfiprintf_r+0xb1c>
  41f4e0:	f013 0110 	ands.w	r1, r3, #16
  41f4e4:	f040 831a 	bne.w	41fb1c <_vfiprintf_r+0xa40>
  41f4e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  41f4ec:	f000 8316 	beq.w	41fb1c <_vfiprintf_r+0xa40>
  41f4f0:	9807      	ldr	r0, [sp, #28]
  41f4f2:	460a      	mov	r2, r1
  41f4f4:	4601      	mov	r1, r0
  41f4f6:	3104      	adds	r1, #4
  41f4f8:	8806      	ldrh	r6, [r0, #0]
  41f4fa:	9107      	str	r1, [sp, #28]
  41f4fc:	2700      	movs	r7, #0
  41f4fe:	e720      	b.n	41f342 <_vfiprintf_r+0x266>
  41f500:	9608      	str	r6, [sp, #32]
  41f502:	f043 0310 	orr.w	r3, r3, #16
  41f506:	e7e7      	b.n	41f4d8 <_vfiprintf_r+0x3fc>
  41f508:	9608      	str	r6, [sp, #32]
  41f50a:	f043 0310 	orr.w	r3, r3, #16
  41f50e:	e708      	b.n	41f322 <_vfiprintf_r+0x246>
  41f510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41f514:	f898 2000 	ldrb.w	r2, [r8]
  41f518:	e652      	b.n	41f1c0 <_vfiprintf_r+0xe4>
  41f51a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  41f51e:	2600      	movs	r6, #0
  41f520:	f818 2b01 	ldrb.w	r2, [r8], #1
  41f524:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  41f528:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  41f52c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  41f530:	2909      	cmp	r1, #9
  41f532:	d9f5      	bls.n	41f520 <_vfiprintf_r+0x444>
  41f534:	e646      	b.n	41f1c4 <_vfiprintf_r+0xe8>
  41f536:	9608      	str	r6, [sp, #32]
  41f538:	2800      	cmp	r0, #0
  41f53a:	f040 8408 	bne.w	41fd4e <_vfiprintf_r+0xc72>
  41f53e:	f043 0310 	orr.w	r3, r3, #16
  41f542:	069e      	lsls	r6, r3, #26
  41f544:	f100 834c 	bmi.w	41fbe0 <_vfiprintf_r+0xb04>
  41f548:	06dd      	lsls	r5, r3, #27
  41f54a:	f100 82f3 	bmi.w	41fb34 <_vfiprintf_r+0xa58>
  41f54e:	0658      	lsls	r0, r3, #25
  41f550:	f140 82f0 	bpl.w	41fb34 <_vfiprintf_r+0xa58>
  41f554:	9d07      	ldr	r5, [sp, #28]
  41f556:	f9b5 6000 	ldrsh.w	r6, [r5]
  41f55a:	462a      	mov	r2, r5
  41f55c:	17f7      	asrs	r7, r6, #31
  41f55e:	3204      	adds	r2, #4
  41f560:	4630      	mov	r0, r6
  41f562:	4639      	mov	r1, r7
  41f564:	9207      	str	r2, [sp, #28]
  41f566:	2800      	cmp	r0, #0
  41f568:	f171 0200 	sbcs.w	r2, r1, #0
  41f56c:	f2c0 835d 	blt.w	41fc2a <_vfiprintf_r+0xb4e>
  41f570:	1c61      	adds	r1, r4, #1
  41f572:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41f576:	f04f 0201 	mov.w	r2, #1
  41f57a:	f47f aeea 	bne.w	41f352 <_vfiprintf_r+0x276>
  41f57e:	ea56 0107 	orrs.w	r1, r6, r7
  41f582:	f000 824d 	beq.w	41fa20 <_vfiprintf_r+0x944>
  41f586:	9302      	str	r3, [sp, #8]
  41f588:	2a01      	cmp	r2, #1
  41f58a:	f000 828c 	beq.w	41faa6 <_vfiprintf_r+0x9ca>
  41f58e:	2a02      	cmp	r2, #2
  41f590:	f040 825c 	bne.w	41fa4c <_vfiprintf_r+0x970>
  41f594:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41f596:	46cb      	mov	fp, r9
  41f598:	0933      	lsrs	r3, r6, #4
  41f59a:	f006 010f 	and.w	r1, r6, #15
  41f59e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  41f5a2:	093a      	lsrs	r2, r7, #4
  41f5a4:	461e      	mov	r6, r3
  41f5a6:	4617      	mov	r7, r2
  41f5a8:	5c43      	ldrb	r3, [r0, r1]
  41f5aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  41f5ae:	ea56 0307 	orrs.w	r3, r6, r7
  41f5b2:	d1f1      	bne.n	41f598 <_vfiprintf_r+0x4bc>
  41f5b4:	eba9 030b 	sub.w	r3, r9, fp
  41f5b8:	9305      	str	r3, [sp, #20]
  41f5ba:	e6e1      	b.n	41f380 <_vfiprintf_r+0x2a4>
  41f5bc:	2800      	cmp	r0, #0
  41f5be:	f040 83c0 	bne.w	41fd42 <_vfiprintf_r+0xc66>
  41f5c2:	0699      	lsls	r1, r3, #26
  41f5c4:	f100 8367 	bmi.w	41fc96 <_vfiprintf_r+0xbba>
  41f5c8:	06da      	lsls	r2, r3, #27
  41f5ca:	f100 80f1 	bmi.w	41f7b0 <_vfiprintf_r+0x6d4>
  41f5ce:	065b      	lsls	r3, r3, #25
  41f5d0:	f140 80ee 	bpl.w	41f7b0 <_vfiprintf_r+0x6d4>
  41f5d4:	9a07      	ldr	r2, [sp, #28]
  41f5d6:	6813      	ldr	r3, [r2, #0]
  41f5d8:	3204      	adds	r2, #4
  41f5da:	9207      	str	r2, [sp, #28]
  41f5dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  41f5e0:	801a      	strh	r2, [r3, #0]
  41f5e2:	e5b8      	b.n	41f156 <_vfiprintf_r+0x7a>
  41f5e4:	9807      	ldr	r0, [sp, #28]
  41f5e6:	4a3d      	ldr	r2, [pc, #244]	; (41f6dc <_vfiprintf_r+0x600>)
  41f5e8:	9608      	str	r6, [sp, #32]
  41f5ea:	920b      	str	r2, [sp, #44]	; 0x2c
  41f5ec:	6806      	ldr	r6, [r0, #0]
  41f5ee:	2278      	movs	r2, #120	; 0x78
  41f5f0:	2130      	movs	r1, #48	; 0x30
  41f5f2:	3004      	adds	r0, #4
  41f5f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  41f5f8:	f043 0302 	orr.w	r3, r3, #2
  41f5fc:	9007      	str	r0, [sp, #28]
  41f5fe:	2700      	movs	r7, #0
  41f600:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  41f604:	2202      	movs	r2, #2
  41f606:	e69c      	b.n	41f342 <_vfiprintf_r+0x266>
  41f608:	9608      	str	r6, [sp, #32]
  41f60a:	2800      	cmp	r0, #0
  41f60c:	d099      	beq.n	41f542 <_vfiprintf_r+0x466>
  41f60e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41f612:	e796      	b.n	41f542 <_vfiprintf_r+0x466>
  41f614:	f898 2000 	ldrb.w	r2, [r8]
  41f618:	2d00      	cmp	r5, #0
  41f61a:	f47f add1 	bne.w	41f1c0 <_vfiprintf_r+0xe4>
  41f61e:	2001      	movs	r0, #1
  41f620:	2520      	movs	r5, #32
  41f622:	e5cd      	b.n	41f1c0 <_vfiprintf_r+0xe4>
  41f624:	f043 0301 	orr.w	r3, r3, #1
  41f628:	f898 2000 	ldrb.w	r2, [r8]
  41f62c:	e5c8      	b.n	41f1c0 <_vfiprintf_r+0xe4>
  41f62e:	9608      	str	r6, [sp, #32]
  41f630:	2800      	cmp	r0, #0
  41f632:	f040 8393 	bne.w	41fd5c <_vfiprintf_r+0xc80>
  41f636:	4929      	ldr	r1, [pc, #164]	; (41f6dc <_vfiprintf_r+0x600>)
  41f638:	910b      	str	r1, [sp, #44]	; 0x2c
  41f63a:	069f      	lsls	r7, r3, #26
  41f63c:	f100 82e8 	bmi.w	41fc10 <_vfiprintf_r+0xb34>
  41f640:	9807      	ldr	r0, [sp, #28]
  41f642:	06de      	lsls	r6, r3, #27
  41f644:	4601      	mov	r1, r0
  41f646:	f100 8270 	bmi.w	41fb2a <_vfiprintf_r+0xa4e>
  41f64a:	065d      	lsls	r5, r3, #25
  41f64c:	f140 826d 	bpl.w	41fb2a <_vfiprintf_r+0xa4e>
  41f650:	3104      	adds	r1, #4
  41f652:	8806      	ldrh	r6, [r0, #0]
  41f654:	9107      	str	r1, [sp, #28]
  41f656:	2700      	movs	r7, #0
  41f658:	07d8      	lsls	r0, r3, #31
  41f65a:	f140 8222 	bpl.w	41faa2 <_vfiprintf_r+0x9c6>
  41f65e:	ea56 0107 	orrs.w	r1, r6, r7
  41f662:	f000 821e 	beq.w	41faa2 <_vfiprintf_r+0x9c6>
  41f666:	2130      	movs	r1, #48	; 0x30
  41f668:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  41f66c:	f043 0302 	orr.w	r3, r3, #2
  41f670:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  41f674:	2202      	movs	r2, #2
  41f676:	e664      	b.n	41f342 <_vfiprintf_r+0x266>
  41f678:	9608      	str	r6, [sp, #32]
  41f67a:	2800      	cmp	r0, #0
  41f67c:	f040 836b 	bne.w	41fd56 <_vfiprintf_r+0xc7a>
  41f680:	4917      	ldr	r1, [pc, #92]	; (41f6e0 <_vfiprintf_r+0x604>)
  41f682:	910b      	str	r1, [sp, #44]	; 0x2c
  41f684:	e7d9      	b.n	41f63a <_vfiprintf_r+0x55e>
  41f686:	9907      	ldr	r1, [sp, #28]
  41f688:	9608      	str	r6, [sp, #32]
  41f68a:	680a      	ldr	r2, [r1, #0]
  41f68c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  41f690:	f04f 0000 	mov.w	r0, #0
  41f694:	460a      	mov	r2, r1
  41f696:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  41f69a:	3204      	adds	r2, #4
  41f69c:	2001      	movs	r0, #1
  41f69e:	9001      	str	r0, [sp, #4]
  41f6a0:	9207      	str	r2, [sp, #28]
  41f6a2:	9005      	str	r0, [sp, #20]
  41f6a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  41f6a8:	9302      	str	r3, [sp, #8]
  41f6aa:	2400      	movs	r4, #0
  41f6ac:	e670      	b.n	41f390 <_vfiprintf_r+0x2b4>
  41f6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41f6b2:	f898 2000 	ldrb.w	r2, [r8]
  41f6b6:	e583      	b.n	41f1c0 <_vfiprintf_r+0xe4>
  41f6b8:	f898 2000 	ldrb.w	r2, [r8]
  41f6bc:	2a6c      	cmp	r2, #108	; 0x6c
  41f6be:	bf03      	ittte	eq
  41f6c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  41f6c4:	f043 0320 	orreq.w	r3, r3, #32
  41f6c8:	f108 0801 	addeq.w	r8, r8, #1
  41f6cc:	f043 0310 	orrne.w	r3, r3, #16
  41f6d0:	e576      	b.n	41f1c0 <_vfiprintf_r+0xe4>
  41f6d2:	bf00      	nop
  41f6d4:	00457670 	.word	0x00457670
  41f6d8:	00457680 	.word	0x00457680
  41f6dc:	00457654 	.word	0x00457654
  41f6e0:	00457640 	.word	0x00457640
  41f6e4:	9907      	ldr	r1, [sp, #28]
  41f6e6:	680e      	ldr	r6, [r1, #0]
  41f6e8:	460a      	mov	r2, r1
  41f6ea:	2e00      	cmp	r6, #0
  41f6ec:	f102 0204 	add.w	r2, r2, #4
  41f6f0:	f6ff ae0f 	blt.w	41f312 <_vfiprintf_r+0x236>
  41f6f4:	9207      	str	r2, [sp, #28]
  41f6f6:	f898 2000 	ldrb.w	r2, [r8]
  41f6fa:	e561      	b.n	41f1c0 <_vfiprintf_r+0xe4>
  41f6fc:	f898 2000 	ldrb.w	r2, [r8]
  41f700:	2001      	movs	r0, #1
  41f702:	252b      	movs	r5, #43	; 0x2b
  41f704:	e55c      	b.n	41f1c0 <_vfiprintf_r+0xe4>
  41f706:	9907      	ldr	r1, [sp, #28]
  41f708:	9608      	str	r6, [sp, #32]
  41f70a:	f8d1 b000 	ldr.w	fp, [r1]
  41f70e:	f04f 0200 	mov.w	r2, #0
  41f712:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  41f716:	1d0e      	adds	r6, r1, #4
  41f718:	f1bb 0f00 	cmp.w	fp, #0
  41f71c:	f000 82e5 	beq.w	41fcea <_vfiprintf_r+0xc0e>
  41f720:	1c67      	adds	r7, r4, #1
  41f722:	f000 82c4 	beq.w	41fcae <_vfiprintf_r+0xbd2>
  41f726:	4622      	mov	r2, r4
  41f728:	2100      	movs	r1, #0
  41f72a:	4658      	mov	r0, fp
  41f72c:	9301      	str	r3, [sp, #4]
  41f72e:	f001 f91f 	bl	420970 <memchr>
  41f732:	9b01      	ldr	r3, [sp, #4]
  41f734:	2800      	cmp	r0, #0
  41f736:	f000 82e5 	beq.w	41fd04 <_vfiprintf_r+0xc28>
  41f73a:	eba0 020b 	sub.w	r2, r0, fp
  41f73e:	9205      	str	r2, [sp, #20]
  41f740:	9607      	str	r6, [sp, #28]
  41f742:	9302      	str	r3, [sp, #8]
  41f744:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41f748:	2400      	movs	r4, #0
  41f74a:	e619      	b.n	41f380 <_vfiprintf_r+0x2a4>
  41f74c:	f898 2000 	ldrb.w	r2, [r8]
  41f750:	2a2a      	cmp	r2, #42	; 0x2a
  41f752:	f108 0701 	add.w	r7, r8, #1
  41f756:	f000 82e9 	beq.w	41fd2c <_vfiprintf_r+0xc50>
  41f75a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  41f75e:	2909      	cmp	r1, #9
  41f760:	46b8      	mov	r8, r7
  41f762:	f04f 0400 	mov.w	r4, #0
  41f766:	f63f ad2d 	bhi.w	41f1c4 <_vfiprintf_r+0xe8>
  41f76a:	f818 2b01 	ldrb.w	r2, [r8], #1
  41f76e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  41f772:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  41f776:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  41f77a:	2909      	cmp	r1, #9
  41f77c:	d9f5      	bls.n	41f76a <_vfiprintf_r+0x68e>
  41f77e:	e521      	b.n	41f1c4 <_vfiprintf_r+0xe8>
  41f780:	f043 0320 	orr.w	r3, r3, #32
  41f784:	f898 2000 	ldrb.w	r2, [r8]
  41f788:	e51a      	b.n	41f1c0 <_vfiprintf_r+0xe4>
  41f78a:	9608      	str	r6, [sp, #32]
  41f78c:	2800      	cmp	r0, #0
  41f78e:	f040 82db 	bne.w	41fd48 <_vfiprintf_r+0xc6c>
  41f792:	2a00      	cmp	r2, #0
  41f794:	f000 80e7 	beq.w	41f966 <_vfiprintf_r+0x88a>
  41f798:	2101      	movs	r1, #1
  41f79a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  41f79e:	f04f 0200 	mov.w	r2, #0
  41f7a2:	9101      	str	r1, [sp, #4]
  41f7a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  41f7a8:	9105      	str	r1, [sp, #20]
  41f7aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  41f7ae:	e77b      	b.n	41f6a8 <_vfiprintf_r+0x5cc>
  41f7b0:	9a07      	ldr	r2, [sp, #28]
  41f7b2:	6813      	ldr	r3, [r2, #0]
  41f7b4:	3204      	adds	r2, #4
  41f7b6:	9207      	str	r2, [sp, #28]
  41f7b8:	9a03      	ldr	r2, [sp, #12]
  41f7ba:	601a      	str	r2, [r3, #0]
  41f7bc:	e4cb      	b.n	41f156 <_vfiprintf_r+0x7a>
  41f7be:	aa0f      	add	r2, sp, #60	; 0x3c
  41f7c0:	9904      	ldr	r1, [sp, #16]
  41f7c2:	4620      	mov	r0, r4
  41f7c4:	f7ff fc4a 	bl	41f05c <__sprint_r.part.0>
  41f7c8:	2800      	cmp	r0, #0
  41f7ca:	f040 8139 	bne.w	41fa40 <_vfiprintf_r+0x964>
  41f7ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  41f7d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41f7d2:	f101 0c01 	add.w	ip, r1, #1
  41f7d6:	46ce      	mov	lr, r9
  41f7d8:	e5ff      	b.n	41f3da <_vfiprintf_r+0x2fe>
  41f7da:	9910      	ldr	r1, [sp, #64]	; 0x40
  41f7dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41f7de:	1c48      	adds	r0, r1, #1
  41f7e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41f7e4:	2d00      	cmp	r5, #0
  41f7e6:	f43f ae22 	beq.w	41f42e <_vfiprintf_r+0x352>
  41f7ea:	3201      	adds	r2, #1
  41f7ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  41f7f0:	2101      	movs	r1, #1
  41f7f2:	2807      	cmp	r0, #7
  41f7f4:	9211      	str	r2, [sp, #68]	; 0x44
  41f7f6:	9010      	str	r0, [sp, #64]	; 0x40
  41f7f8:	f8ca 5000 	str.w	r5, [sl]
  41f7fc:	f8ca 1004 	str.w	r1, [sl, #4]
  41f800:	f340 8108 	ble.w	41fa14 <_vfiprintf_r+0x938>
  41f804:	2a00      	cmp	r2, #0
  41f806:	f040 81bc 	bne.w	41fb82 <_vfiprintf_r+0xaa6>
  41f80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41f80c:	2b00      	cmp	r3, #0
  41f80e:	f43f ae1f 	beq.w	41f450 <_vfiprintf_r+0x374>
  41f812:	ab0e      	add	r3, sp, #56	; 0x38
  41f814:	2202      	movs	r2, #2
  41f816:	4608      	mov	r0, r1
  41f818:	931c      	str	r3, [sp, #112]	; 0x70
  41f81a:	921d      	str	r2, [sp, #116]	; 0x74
  41f81c:	46ca      	mov	sl, r9
  41f81e:	4601      	mov	r1, r0
  41f820:	f10a 0a08 	add.w	sl, sl, #8
  41f824:	3001      	adds	r0, #1
  41f826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41f828:	2b80      	cmp	r3, #128	; 0x80
  41f82a:	f43f ae19 	beq.w	41f460 <_vfiprintf_r+0x384>
  41f82e:	9b05      	ldr	r3, [sp, #20]
  41f830:	1ae4      	subs	r4, r4, r3
  41f832:	2c00      	cmp	r4, #0
  41f834:	dd2e      	ble.n	41f894 <_vfiprintf_r+0x7b8>
  41f836:	2c10      	cmp	r4, #16
  41f838:	4db3      	ldr	r5, [pc, #716]	; (41fb08 <_vfiprintf_r+0xa2c>)
  41f83a:	dd1e      	ble.n	41f87a <_vfiprintf_r+0x79e>
  41f83c:	46d6      	mov	lr, sl
  41f83e:	2610      	movs	r6, #16
  41f840:	9f06      	ldr	r7, [sp, #24]
  41f842:	f8dd a010 	ldr.w	sl, [sp, #16]
  41f846:	e006      	b.n	41f856 <_vfiprintf_r+0x77a>
  41f848:	1c88      	adds	r0, r1, #2
  41f84a:	f10e 0e08 	add.w	lr, lr, #8
  41f84e:	4619      	mov	r1, r3
  41f850:	3c10      	subs	r4, #16
  41f852:	2c10      	cmp	r4, #16
  41f854:	dd10      	ble.n	41f878 <_vfiprintf_r+0x79c>
  41f856:	1c4b      	adds	r3, r1, #1
  41f858:	3210      	adds	r2, #16
  41f85a:	2b07      	cmp	r3, #7
  41f85c:	9211      	str	r2, [sp, #68]	; 0x44
  41f85e:	e88e 0060 	stmia.w	lr, {r5, r6}
  41f862:	9310      	str	r3, [sp, #64]	; 0x40
  41f864:	ddf0      	ble.n	41f848 <_vfiprintf_r+0x76c>
  41f866:	2a00      	cmp	r2, #0
  41f868:	d165      	bne.n	41f936 <_vfiprintf_r+0x85a>
  41f86a:	3c10      	subs	r4, #16
  41f86c:	2c10      	cmp	r4, #16
  41f86e:	f04f 0001 	mov.w	r0, #1
  41f872:	4611      	mov	r1, r2
  41f874:	46ce      	mov	lr, r9
  41f876:	dcee      	bgt.n	41f856 <_vfiprintf_r+0x77a>
  41f878:	46f2      	mov	sl, lr
  41f87a:	4422      	add	r2, r4
  41f87c:	2807      	cmp	r0, #7
  41f87e:	9211      	str	r2, [sp, #68]	; 0x44
  41f880:	f8ca 5000 	str.w	r5, [sl]
  41f884:	f8ca 4004 	str.w	r4, [sl, #4]
  41f888:	9010      	str	r0, [sp, #64]	; 0x40
  41f88a:	f300 8085 	bgt.w	41f998 <_vfiprintf_r+0x8bc>
  41f88e:	f10a 0a08 	add.w	sl, sl, #8
  41f892:	3001      	adds	r0, #1
  41f894:	9905      	ldr	r1, [sp, #20]
  41f896:	f8ca b000 	str.w	fp, [sl]
  41f89a:	440a      	add	r2, r1
  41f89c:	2807      	cmp	r0, #7
  41f89e:	9211      	str	r2, [sp, #68]	; 0x44
  41f8a0:	f8ca 1004 	str.w	r1, [sl, #4]
  41f8a4:	9010      	str	r0, [sp, #64]	; 0x40
  41f8a6:	f340 8082 	ble.w	41f9ae <_vfiprintf_r+0x8d2>
  41f8aa:	2a00      	cmp	r2, #0
  41f8ac:	f040 8118 	bne.w	41fae0 <_vfiprintf_r+0xa04>
  41f8b0:	9b02      	ldr	r3, [sp, #8]
  41f8b2:	9210      	str	r2, [sp, #64]	; 0x40
  41f8b4:	0758      	lsls	r0, r3, #29
  41f8b6:	d535      	bpl.n	41f924 <_vfiprintf_r+0x848>
  41f8b8:	9b08      	ldr	r3, [sp, #32]
  41f8ba:	9901      	ldr	r1, [sp, #4]
  41f8bc:	1a5c      	subs	r4, r3, r1
  41f8be:	2c00      	cmp	r4, #0
  41f8c0:	f340 80e7 	ble.w	41fa92 <_vfiprintf_r+0x9b6>
  41f8c4:	46ca      	mov	sl, r9
  41f8c6:	2c10      	cmp	r4, #16
  41f8c8:	f340 8218 	ble.w	41fcfc <_vfiprintf_r+0xc20>
  41f8cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  41f8ce:	4e8f      	ldr	r6, [pc, #572]	; (41fb0c <_vfiprintf_r+0xa30>)
  41f8d0:	9f06      	ldr	r7, [sp, #24]
  41f8d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  41f8d6:	2510      	movs	r5, #16
  41f8d8:	e006      	b.n	41f8e8 <_vfiprintf_r+0x80c>
  41f8da:	1c88      	adds	r0, r1, #2
  41f8dc:	f10a 0a08 	add.w	sl, sl, #8
  41f8e0:	4619      	mov	r1, r3
  41f8e2:	3c10      	subs	r4, #16
  41f8e4:	2c10      	cmp	r4, #16
  41f8e6:	dd11      	ble.n	41f90c <_vfiprintf_r+0x830>
  41f8e8:	1c4b      	adds	r3, r1, #1
  41f8ea:	3210      	adds	r2, #16
  41f8ec:	2b07      	cmp	r3, #7
  41f8ee:	9211      	str	r2, [sp, #68]	; 0x44
  41f8f0:	f8ca 6000 	str.w	r6, [sl]
  41f8f4:	f8ca 5004 	str.w	r5, [sl, #4]
  41f8f8:	9310      	str	r3, [sp, #64]	; 0x40
  41f8fa:	ddee      	ble.n	41f8da <_vfiprintf_r+0x7fe>
  41f8fc:	bb42      	cbnz	r2, 41f950 <_vfiprintf_r+0x874>
  41f8fe:	3c10      	subs	r4, #16
  41f900:	2c10      	cmp	r4, #16
  41f902:	f04f 0001 	mov.w	r0, #1
  41f906:	4611      	mov	r1, r2
  41f908:	46ca      	mov	sl, r9
  41f90a:	dced      	bgt.n	41f8e8 <_vfiprintf_r+0x80c>
  41f90c:	4422      	add	r2, r4
  41f90e:	2807      	cmp	r0, #7
  41f910:	9211      	str	r2, [sp, #68]	; 0x44
  41f912:	f8ca 6000 	str.w	r6, [sl]
  41f916:	f8ca 4004 	str.w	r4, [sl, #4]
  41f91a:	9010      	str	r0, [sp, #64]	; 0x40
  41f91c:	dd51      	ble.n	41f9c2 <_vfiprintf_r+0x8e6>
  41f91e:	2a00      	cmp	r2, #0
  41f920:	f040 819b 	bne.w	41fc5a <_vfiprintf_r+0xb7e>
  41f924:	9b03      	ldr	r3, [sp, #12]
  41f926:	9a08      	ldr	r2, [sp, #32]
  41f928:	9901      	ldr	r1, [sp, #4]
  41f92a:	428a      	cmp	r2, r1
  41f92c:	bfac      	ite	ge
  41f92e:	189b      	addge	r3, r3, r2
  41f930:	185b      	addlt	r3, r3, r1
  41f932:	9303      	str	r3, [sp, #12]
  41f934:	e04e      	b.n	41f9d4 <_vfiprintf_r+0x8f8>
  41f936:	aa0f      	add	r2, sp, #60	; 0x3c
  41f938:	4651      	mov	r1, sl
  41f93a:	4638      	mov	r0, r7
  41f93c:	f7ff fb8e 	bl	41f05c <__sprint_r.part.0>
  41f940:	2800      	cmp	r0, #0
  41f942:	f040 813f 	bne.w	41fbc4 <_vfiprintf_r+0xae8>
  41f946:	9910      	ldr	r1, [sp, #64]	; 0x40
  41f948:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41f94a:	1c48      	adds	r0, r1, #1
  41f94c:	46ce      	mov	lr, r9
  41f94e:	e77f      	b.n	41f850 <_vfiprintf_r+0x774>
  41f950:	aa0f      	add	r2, sp, #60	; 0x3c
  41f952:	4659      	mov	r1, fp
  41f954:	4638      	mov	r0, r7
  41f956:	f7ff fb81 	bl	41f05c <__sprint_r.part.0>
  41f95a:	b960      	cbnz	r0, 41f976 <_vfiprintf_r+0x89a>
  41f95c:	9910      	ldr	r1, [sp, #64]	; 0x40
  41f95e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41f960:	1c48      	adds	r0, r1, #1
  41f962:	46ca      	mov	sl, r9
  41f964:	e7bd      	b.n	41f8e2 <_vfiprintf_r+0x806>
  41f966:	9b11      	ldr	r3, [sp, #68]	; 0x44
  41f968:	f8dd b010 	ldr.w	fp, [sp, #16]
  41f96c:	2b00      	cmp	r3, #0
  41f96e:	f040 81d4 	bne.w	41fd1a <_vfiprintf_r+0xc3e>
  41f972:	2300      	movs	r3, #0
  41f974:	9310      	str	r3, [sp, #64]	; 0x40
  41f976:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  41f97a:	f013 0f01 	tst.w	r3, #1
  41f97e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  41f982:	d102      	bne.n	41f98a <_vfiprintf_r+0x8ae>
  41f984:	059a      	lsls	r2, r3, #22
  41f986:	f140 80de 	bpl.w	41fb46 <_vfiprintf_r+0xa6a>
  41f98a:	065b      	lsls	r3, r3, #25
  41f98c:	f53f acb2 	bmi.w	41f2f4 <_vfiprintf_r+0x218>
  41f990:	9803      	ldr	r0, [sp, #12]
  41f992:	b02d      	add	sp, #180	; 0xb4
  41f994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f998:	2a00      	cmp	r2, #0
  41f99a:	f040 8106 	bne.w	41fbaa <_vfiprintf_r+0xace>
  41f99e:	9a05      	ldr	r2, [sp, #20]
  41f9a0:	921d      	str	r2, [sp, #116]	; 0x74
  41f9a2:	2301      	movs	r3, #1
  41f9a4:	9211      	str	r2, [sp, #68]	; 0x44
  41f9a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  41f9aa:	9310      	str	r3, [sp, #64]	; 0x40
  41f9ac:	46ca      	mov	sl, r9
  41f9ae:	f10a 0a08 	add.w	sl, sl, #8
  41f9b2:	9b02      	ldr	r3, [sp, #8]
  41f9b4:	0759      	lsls	r1, r3, #29
  41f9b6:	d504      	bpl.n	41f9c2 <_vfiprintf_r+0x8e6>
  41f9b8:	9b08      	ldr	r3, [sp, #32]
  41f9ba:	9901      	ldr	r1, [sp, #4]
  41f9bc:	1a5c      	subs	r4, r3, r1
  41f9be:	2c00      	cmp	r4, #0
  41f9c0:	dc81      	bgt.n	41f8c6 <_vfiprintf_r+0x7ea>
  41f9c2:	9b03      	ldr	r3, [sp, #12]
  41f9c4:	9908      	ldr	r1, [sp, #32]
  41f9c6:	9801      	ldr	r0, [sp, #4]
  41f9c8:	4281      	cmp	r1, r0
  41f9ca:	bfac      	ite	ge
  41f9cc:	185b      	addge	r3, r3, r1
  41f9ce:	181b      	addlt	r3, r3, r0
  41f9d0:	9303      	str	r3, [sp, #12]
  41f9d2:	bb72      	cbnz	r2, 41fa32 <_vfiprintf_r+0x956>
  41f9d4:	2300      	movs	r3, #0
  41f9d6:	9310      	str	r3, [sp, #64]	; 0x40
  41f9d8:	46ca      	mov	sl, r9
  41f9da:	f7ff bbbc 	b.w	41f156 <_vfiprintf_r+0x7a>
  41f9de:	aa0f      	add	r2, sp, #60	; 0x3c
  41f9e0:	9904      	ldr	r1, [sp, #16]
  41f9e2:	4620      	mov	r0, r4
  41f9e4:	f7ff fb3a 	bl	41f05c <__sprint_r.part.0>
  41f9e8:	bb50      	cbnz	r0, 41fa40 <_vfiprintf_r+0x964>
  41f9ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  41f9ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41f9ee:	f101 0e01 	add.w	lr, r1, #1
  41f9f2:	46cc      	mov	ip, r9
  41f9f4:	e548      	b.n	41f488 <_vfiprintf_r+0x3ac>
  41f9f6:	2a00      	cmp	r2, #0
  41f9f8:	f040 8140 	bne.w	41fc7c <_vfiprintf_r+0xba0>
  41f9fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  41fa00:	2900      	cmp	r1, #0
  41fa02:	f000 811b 	beq.w	41fc3c <_vfiprintf_r+0xb60>
  41fa06:	2201      	movs	r2, #1
  41fa08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  41fa0c:	4610      	mov	r0, r2
  41fa0e:	921d      	str	r2, [sp, #116]	; 0x74
  41fa10:	911c      	str	r1, [sp, #112]	; 0x70
  41fa12:	46ca      	mov	sl, r9
  41fa14:	4601      	mov	r1, r0
  41fa16:	f10a 0a08 	add.w	sl, sl, #8
  41fa1a:	3001      	adds	r0, #1
  41fa1c:	e507      	b.n	41f42e <_vfiprintf_r+0x352>
  41fa1e:	9b02      	ldr	r3, [sp, #8]
  41fa20:	2a01      	cmp	r2, #1
  41fa22:	f000 8098 	beq.w	41fb56 <_vfiprintf_r+0xa7a>
  41fa26:	2a02      	cmp	r2, #2
  41fa28:	d10d      	bne.n	41fa46 <_vfiprintf_r+0x96a>
  41fa2a:	9302      	str	r3, [sp, #8]
  41fa2c:	2600      	movs	r6, #0
  41fa2e:	2700      	movs	r7, #0
  41fa30:	e5b0      	b.n	41f594 <_vfiprintf_r+0x4b8>
  41fa32:	aa0f      	add	r2, sp, #60	; 0x3c
  41fa34:	9904      	ldr	r1, [sp, #16]
  41fa36:	9806      	ldr	r0, [sp, #24]
  41fa38:	f7ff fb10 	bl	41f05c <__sprint_r.part.0>
  41fa3c:	2800      	cmp	r0, #0
  41fa3e:	d0c9      	beq.n	41f9d4 <_vfiprintf_r+0x8f8>
  41fa40:	f8dd b010 	ldr.w	fp, [sp, #16]
  41fa44:	e797      	b.n	41f976 <_vfiprintf_r+0x89a>
  41fa46:	9302      	str	r3, [sp, #8]
  41fa48:	2600      	movs	r6, #0
  41fa4a:	2700      	movs	r7, #0
  41fa4c:	4649      	mov	r1, r9
  41fa4e:	e000      	b.n	41fa52 <_vfiprintf_r+0x976>
  41fa50:	4659      	mov	r1, fp
  41fa52:	08f2      	lsrs	r2, r6, #3
  41fa54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  41fa58:	08f8      	lsrs	r0, r7, #3
  41fa5a:	f006 0307 	and.w	r3, r6, #7
  41fa5e:	4607      	mov	r7, r0
  41fa60:	4616      	mov	r6, r2
  41fa62:	3330      	adds	r3, #48	; 0x30
  41fa64:	ea56 0207 	orrs.w	r2, r6, r7
  41fa68:	f801 3c01 	strb.w	r3, [r1, #-1]
  41fa6c:	f101 3bff 	add.w	fp, r1, #4294967295
  41fa70:	d1ee      	bne.n	41fa50 <_vfiprintf_r+0x974>
  41fa72:	9a02      	ldr	r2, [sp, #8]
  41fa74:	07d6      	lsls	r6, r2, #31
  41fa76:	f57f ad9d 	bpl.w	41f5b4 <_vfiprintf_r+0x4d8>
  41fa7a:	2b30      	cmp	r3, #48	; 0x30
  41fa7c:	f43f ad9a 	beq.w	41f5b4 <_vfiprintf_r+0x4d8>
  41fa80:	3902      	subs	r1, #2
  41fa82:	2330      	movs	r3, #48	; 0x30
  41fa84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  41fa88:	eba9 0301 	sub.w	r3, r9, r1
  41fa8c:	9305      	str	r3, [sp, #20]
  41fa8e:	468b      	mov	fp, r1
  41fa90:	e476      	b.n	41f380 <_vfiprintf_r+0x2a4>
  41fa92:	9b03      	ldr	r3, [sp, #12]
  41fa94:	9a08      	ldr	r2, [sp, #32]
  41fa96:	428a      	cmp	r2, r1
  41fa98:	bfac      	ite	ge
  41fa9a:	189b      	addge	r3, r3, r2
  41fa9c:	185b      	addlt	r3, r3, r1
  41fa9e:	9303      	str	r3, [sp, #12]
  41faa0:	e798      	b.n	41f9d4 <_vfiprintf_r+0x8f8>
  41faa2:	2202      	movs	r2, #2
  41faa4:	e44d      	b.n	41f342 <_vfiprintf_r+0x266>
  41faa6:	2f00      	cmp	r7, #0
  41faa8:	bf08      	it	eq
  41faaa:	2e0a      	cmpeq	r6, #10
  41faac:	d352      	bcc.n	41fb54 <_vfiprintf_r+0xa78>
  41faae:	46cb      	mov	fp, r9
  41fab0:	4630      	mov	r0, r6
  41fab2:	4639      	mov	r1, r7
  41fab4:	220a      	movs	r2, #10
  41fab6:	2300      	movs	r3, #0
  41fab8:	f7fe f9d2 	bl	41de60 <__aeabi_uldivmod>
  41fabc:	3230      	adds	r2, #48	; 0x30
  41fabe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  41fac2:	4630      	mov	r0, r6
  41fac4:	4639      	mov	r1, r7
  41fac6:	2300      	movs	r3, #0
  41fac8:	220a      	movs	r2, #10
  41faca:	f7fe f9c9 	bl	41de60 <__aeabi_uldivmod>
  41face:	4606      	mov	r6, r0
  41fad0:	460f      	mov	r7, r1
  41fad2:	ea56 0307 	orrs.w	r3, r6, r7
  41fad6:	d1eb      	bne.n	41fab0 <_vfiprintf_r+0x9d4>
  41fad8:	e56c      	b.n	41f5b4 <_vfiprintf_r+0x4d8>
  41fada:	9405      	str	r4, [sp, #20]
  41fadc:	46cb      	mov	fp, r9
  41fade:	e44f      	b.n	41f380 <_vfiprintf_r+0x2a4>
  41fae0:	aa0f      	add	r2, sp, #60	; 0x3c
  41fae2:	9904      	ldr	r1, [sp, #16]
  41fae4:	9806      	ldr	r0, [sp, #24]
  41fae6:	f7ff fab9 	bl	41f05c <__sprint_r.part.0>
  41faea:	2800      	cmp	r0, #0
  41faec:	d1a8      	bne.n	41fa40 <_vfiprintf_r+0x964>
  41faee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41faf0:	46ca      	mov	sl, r9
  41faf2:	e75e      	b.n	41f9b2 <_vfiprintf_r+0x8d6>
  41faf4:	aa0f      	add	r2, sp, #60	; 0x3c
  41faf6:	9904      	ldr	r1, [sp, #16]
  41faf8:	9806      	ldr	r0, [sp, #24]
  41fafa:	f7ff faaf 	bl	41f05c <__sprint_r.part.0>
  41fafe:	2800      	cmp	r0, #0
  41fb00:	d19e      	bne.n	41fa40 <_vfiprintf_r+0x964>
  41fb02:	46ca      	mov	sl, r9
  41fb04:	f7ff bbc0 	b.w	41f288 <_vfiprintf_r+0x1ac>
  41fb08:	00457680 	.word	0x00457680
  41fb0c:	00457670 	.word	0x00457670
  41fb10:	3104      	adds	r1, #4
  41fb12:	6816      	ldr	r6, [r2, #0]
  41fb14:	9107      	str	r1, [sp, #28]
  41fb16:	2201      	movs	r2, #1
  41fb18:	2700      	movs	r7, #0
  41fb1a:	e412      	b.n	41f342 <_vfiprintf_r+0x266>
  41fb1c:	9807      	ldr	r0, [sp, #28]
  41fb1e:	4601      	mov	r1, r0
  41fb20:	3104      	adds	r1, #4
  41fb22:	6806      	ldr	r6, [r0, #0]
  41fb24:	9107      	str	r1, [sp, #28]
  41fb26:	2700      	movs	r7, #0
  41fb28:	e40b      	b.n	41f342 <_vfiprintf_r+0x266>
  41fb2a:	680e      	ldr	r6, [r1, #0]
  41fb2c:	3104      	adds	r1, #4
  41fb2e:	9107      	str	r1, [sp, #28]
  41fb30:	2700      	movs	r7, #0
  41fb32:	e591      	b.n	41f658 <_vfiprintf_r+0x57c>
  41fb34:	9907      	ldr	r1, [sp, #28]
  41fb36:	680e      	ldr	r6, [r1, #0]
  41fb38:	460a      	mov	r2, r1
  41fb3a:	17f7      	asrs	r7, r6, #31
  41fb3c:	3204      	adds	r2, #4
  41fb3e:	9207      	str	r2, [sp, #28]
  41fb40:	4630      	mov	r0, r6
  41fb42:	4639      	mov	r1, r7
  41fb44:	e50f      	b.n	41f566 <_vfiprintf_r+0x48a>
  41fb46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  41fb4a:	f000 fe7f 	bl	42084c <__retarget_lock_release_recursive>
  41fb4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  41fb52:	e71a      	b.n	41f98a <_vfiprintf_r+0x8ae>
  41fb54:	9b02      	ldr	r3, [sp, #8]
  41fb56:	9302      	str	r3, [sp, #8]
  41fb58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  41fb5c:	3630      	adds	r6, #48	; 0x30
  41fb5e:	2301      	movs	r3, #1
  41fb60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  41fb64:	9305      	str	r3, [sp, #20]
  41fb66:	e40b      	b.n	41f380 <_vfiprintf_r+0x2a4>
  41fb68:	aa0f      	add	r2, sp, #60	; 0x3c
  41fb6a:	9904      	ldr	r1, [sp, #16]
  41fb6c:	9806      	ldr	r0, [sp, #24]
  41fb6e:	f7ff fa75 	bl	41f05c <__sprint_r.part.0>
  41fb72:	2800      	cmp	r0, #0
  41fb74:	f47f af64 	bne.w	41fa40 <_vfiprintf_r+0x964>
  41fb78:	9910      	ldr	r1, [sp, #64]	; 0x40
  41fb7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41fb7c:	1c48      	adds	r0, r1, #1
  41fb7e:	46ca      	mov	sl, r9
  41fb80:	e651      	b.n	41f826 <_vfiprintf_r+0x74a>
  41fb82:	aa0f      	add	r2, sp, #60	; 0x3c
  41fb84:	9904      	ldr	r1, [sp, #16]
  41fb86:	9806      	ldr	r0, [sp, #24]
  41fb88:	f7ff fa68 	bl	41f05c <__sprint_r.part.0>
  41fb8c:	2800      	cmp	r0, #0
  41fb8e:	f47f af57 	bne.w	41fa40 <_vfiprintf_r+0x964>
  41fb92:	9910      	ldr	r1, [sp, #64]	; 0x40
  41fb94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41fb96:	1c48      	adds	r0, r1, #1
  41fb98:	46ca      	mov	sl, r9
  41fb9a:	e448      	b.n	41f42e <_vfiprintf_r+0x352>
  41fb9c:	2a00      	cmp	r2, #0
  41fb9e:	f040 8091 	bne.w	41fcc4 <_vfiprintf_r+0xbe8>
  41fba2:	2001      	movs	r0, #1
  41fba4:	4611      	mov	r1, r2
  41fba6:	46ca      	mov	sl, r9
  41fba8:	e641      	b.n	41f82e <_vfiprintf_r+0x752>
  41fbaa:	aa0f      	add	r2, sp, #60	; 0x3c
  41fbac:	9904      	ldr	r1, [sp, #16]
  41fbae:	9806      	ldr	r0, [sp, #24]
  41fbb0:	f7ff fa54 	bl	41f05c <__sprint_r.part.0>
  41fbb4:	2800      	cmp	r0, #0
  41fbb6:	f47f af43 	bne.w	41fa40 <_vfiprintf_r+0x964>
  41fbba:	9810      	ldr	r0, [sp, #64]	; 0x40
  41fbbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41fbbe:	3001      	adds	r0, #1
  41fbc0:	46ca      	mov	sl, r9
  41fbc2:	e667      	b.n	41f894 <_vfiprintf_r+0x7b8>
  41fbc4:	46d3      	mov	fp, sl
  41fbc6:	e6d6      	b.n	41f976 <_vfiprintf_r+0x89a>
  41fbc8:	9e07      	ldr	r6, [sp, #28]
  41fbca:	3607      	adds	r6, #7
  41fbcc:	f026 0207 	bic.w	r2, r6, #7
  41fbd0:	f102 0108 	add.w	r1, r2, #8
  41fbd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  41fbd8:	9107      	str	r1, [sp, #28]
  41fbda:	2201      	movs	r2, #1
  41fbdc:	f7ff bbb1 	b.w	41f342 <_vfiprintf_r+0x266>
  41fbe0:	9e07      	ldr	r6, [sp, #28]
  41fbe2:	3607      	adds	r6, #7
  41fbe4:	f026 0607 	bic.w	r6, r6, #7
  41fbe8:	e9d6 0100 	ldrd	r0, r1, [r6]
  41fbec:	f106 0208 	add.w	r2, r6, #8
  41fbf0:	9207      	str	r2, [sp, #28]
  41fbf2:	4606      	mov	r6, r0
  41fbf4:	460f      	mov	r7, r1
  41fbf6:	e4b6      	b.n	41f566 <_vfiprintf_r+0x48a>
  41fbf8:	9e07      	ldr	r6, [sp, #28]
  41fbfa:	3607      	adds	r6, #7
  41fbfc:	f026 0207 	bic.w	r2, r6, #7
  41fc00:	f102 0108 	add.w	r1, r2, #8
  41fc04:	e9d2 6700 	ldrd	r6, r7, [r2]
  41fc08:	9107      	str	r1, [sp, #28]
  41fc0a:	2200      	movs	r2, #0
  41fc0c:	f7ff bb99 	b.w	41f342 <_vfiprintf_r+0x266>
  41fc10:	9e07      	ldr	r6, [sp, #28]
  41fc12:	3607      	adds	r6, #7
  41fc14:	f026 0107 	bic.w	r1, r6, #7
  41fc18:	f101 0008 	add.w	r0, r1, #8
  41fc1c:	9007      	str	r0, [sp, #28]
  41fc1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  41fc22:	e519      	b.n	41f658 <_vfiprintf_r+0x57c>
  41fc24:	46cb      	mov	fp, r9
  41fc26:	f7ff bbab 	b.w	41f380 <_vfiprintf_r+0x2a4>
  41fc2a:	252d      	movs	r5, #45	; 0x2d
  41fc2c:	4276      	negs	r6, r6
  41fc2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  41fc32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41fc36:	2201      	movs	r2, #1
  41fc38:	f7ff bb88 	b.w	41f34c <_vfiprintf_r+0x270>
  41fc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41fc3e:	b9b3      	cbnz	r3, 41fc6e <_vfiprintf_r+0xb92>
  41fc40:	4611      	mov	r1, r2
  41fc42:	2001      	movs	r0, #1
  41fc44:	46ca      	mov	sl, r9
  41fc46:	e5f2      	b.n	41f82e <_vfiprintf_r+0x752>
  41fc48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  41fc4c:	f000 fdfe 	bl	42084c <__retarget_lock_release_recursive>
  41fc50:	f04f 33ff 	mov.w	r3, #4294967295
  41fc54:	9303      	str	r3, [sp, #12]
  41fc56:	f7ff bb50 	b.w	41f2fa <_vfiprintf_r+0x21e>
  41fc5a:	aa0f      	add	r2, sp, #60	; 0x3c
  41fc5c:	9904      	ldr	r1, [sp, #16]
  41fc5e:	9806      	ldr	r0, [sp, #24]
  41fc60:	f7ff f9fc 	bl	41f05c <__sprint_r.part.0>
  41fc64:	2800      	cmp	r0, #0
  41fc66:	f47f aeeb 	bne.w	41fa40 <_vfiprintf_r+0x964>
  41fc6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41fc6c:	e6a9      	b.n	41f9c2 <_vfiprintf_r+0x8e6>
  41fc6e:	ab0e      	add	r3, sp, #56	; 0x38
  41fc70:	2202      	movs	r2, #2
  41fc72:	931c      	str	r3, [sp, #112]	; 0x70
  41fc74:	921d      	str	r2, [sp, #116]	; 0x74
  41fc76:	2001      	movs	r0, #1
  41fc78:	46ca      	mov	sl, r9
  41fc7a:	e5d0      	b.n	41f81e <_vfiprintf_r+0x742>
  41fc7c:	aa0f      	add	r2, sp, #60	; 0x3c
  41fc7e:	9904      	ldr	r1, [sp, #16]
  41fc80:	9806      	ldr	r0, [sp, #24]
  41fc82:	f7ff f9eb 	bl	41f05c <__sprint_r.part.0>
  41fc86:	2800      	cmp	r0, #0
  41fc88:	f47f aeda 	bne.w	41fa40 <_vfiprintf_r+0x964>
  41fc8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  41fc8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41fc90:	1c48      	adds	r0, r1, #1
  41fc92:	46ca      	mov	sl, r9
  41fc94:	e5a4      	b.n	41f7e0 <_vfiprintf_r+0x704>
  41fc96:	9a07      	ldr	r2, [sp, #28]
  41fc98:	9903      	ldr	r1, [sp, #12]
  41fc9a:	6813      	ldr	r3, [r2, #0]
  41fc9c:	17cd      	asrs	r5, r1, #31
  41fc9e:	4608      	mov	r0, r1
  41fca0:	3204      	adds	r2, #4
  41fca2:	4629      	mov	r1, r5
  41fca4:	9207      	str	r2, [sp, #28]
  41fca6:	e9c3 0100 	strd	r0, r1, [r3]
  41fcaa:	f7ff ba54 	b.w	41f156 <_vfiprintf_r+0x7a>
  41fcae:	4658      	mov	r0, fp
  41fcb0:	9607      	str	r6, [sp, #28]
  41fcb2:	9302      	str	r3, [sp, #8]
  41fcb4:	f7ff f964 	bl	41ef80 <strlen>
  41fcb8:	2400      	movs	r4, #0
  41fcba:	9005      	str	r0, [sp, #20]
  41fcbc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41fcc0:	f7ff bb5e 	b.w	41f380 <_vfiprintf_r+0x2a4>
  41fcc4:	aa0f      	add	r2, sp, #60	; 0x3c
  41fcc6:	9904      	ldr	r1, [sp, #16]
  41fcc8:	9806      	ldr	r0, [sp, #24]
  41fcca:	f7ff f9c7 	bl	41f05c <__sprint_r.part.0>
  41fcce:	2800      	cmp	r0, #0
  41fcd0:	f47f aeb6 	bne.w	41fa40 <_vfiprintf_r+0x964>
  41fcd4:	9910      	ldr	r1, [sp, #64]	; 0x40
  41fcd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41fcd8:	1c48      	adds	r0, r1, #1
  41fcda:	46ca      	mov	sl, r9
  41fcdc:	e5a7      	b.n	41f82e <_vfiprintf_r+0x752>
  41fcde:	9910      	ldr	r1, [sp, #64]	; 0x40
  41fce0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41fce2:	4e20      	ldr	r6, [pc, #128]	; (41fd64 <_vfiprintf_r+0xc88>)
  41fce4:	3101      	adds	r1, #1
  41fce6:	f7ff bb90 	b.w	41f40a <_vfiprintf_r+0x32e>
  41fcea:	2c06      	cmp	r4, #6
  41fcec:	bf28      	it	cs
  41fcee:	2406      	movcs	r4, #6
  41fcf0:	9405      	str	r4, [sp, #20]
  41fcf2:	9607      	str	r6, [sp, #28]
  41fcf4:	9401      	str	r4, [sp, #4]
  41fcf6:	f8df b070 	ldr.w	fp, [pc, #112]	; 41fd68 <_vfiprintf_r+0xc8c>
  41fcfa:	e4d5      	b.n	41f6a8 <_vfiprintf_r+0x5cc>
  41fcfc:	9810      	ldr	r0, [sp, #64]	; 0x40
  41fcfe:	4e19      	ldr	r6, [pc, #100]	; (41fd64 <_vfiprintf_r+0xc88>)
  41fd00:	3001      	adds	r0, #1
  41fd02:	e603      	b.n	41f90c <_vfiprintf_r+0x830>
  41fd04:	9405      	str	r4, [sp, #20]
  41fd06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41fd0a:	9607      	str	r6, [sp, #28]
  41fd0c:	9302      	str	r3, [sp, #8]
  41fd0e:	4604      	mov	r4, r0
  41fd10:	f7ff bb36 	b.w	41f380 <_vfiprintf_r+0x2a4>
  41fd14:	4686      	mov	lr, r0
  41fd16:	f7ff bbce 	b.w	41f4b6 <_vfiprintf_r+0x3da>
  41fd1a:	9806      	ldr	r0, [sp, #24]
  41fd1c:	aa0f      	add	r2, sp, #60	; 0x3c
  41fd1e:	4659      	mov	r1, fp
  41fd20:	f7ff f99c 	bl	41f05c <__sprint_r.part.0>
  41fd24:	2800      	cmp	r0, #0
  41fd26:	f43f ae24 	beq.w	41f972 <_vfiprintf_r+0x896>
  41fd2a:	e624      	b.n	41f976 <_vfiprintf_r+0x89a>
  41fd2c:	9907      	ldr	r1, [sp, #28]
  41fd2e:	f898 2001 	ldrb.w	r2, [r8, #1]
  41fd32:	680c      	ldr	r4, [r1, #0]
  41fd34:	3104      	adds	r1, #4
  41fd36:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  41fd3a:	46b8      	mov	r8, r7
  41fd3c:	9107      	str	r1, [sp, #28]
  41fd3e:	f7ff ba3f 	b.w	41f1c0 <_vfiprintf_r+0xe4>
  41fd42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41fd46:	e43c      	b.n	41f5c2 <_vfiprintf_r+0x4e6>
  41fd48:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41fd4c:	e521      	b.n	41f792 <_vfiprintf_r+0x6b6>
  41fd4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41fd52:	f7ff bbf4 	b.w	41f53e <_vfiprintf_r+0x462>
  41fd56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41fd5a:	e491      	b.n	41f680 <_vfiprintf_r+0x5a4>
  41fd5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41fd60:	e469      	b.n	41f636 <_vfiprintf_r+0x55a>
  41fd62:	bf00      	nop
  41fd64:	00457670 	.word	0x00457670
  41fd68:	00457668 	.word	0x00457668

0041fd6c <__sbprintf>:
  41fd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41fd70:	460c      	mov	r4, r1
  41fd72:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  41fd76:	8989      	ldrh	r1, [r1, #12]
  41fd78:	6e66      	ldr	r6, [r4, #100]	; 0x64
  41fd7a:	89e5      	ldrh	r5, [r4, #14]
  41fd7c:	9619      	str	r6, [sp, #100]	; 0x64
  41fd7e:	f021 0102 	bic.w	r1, r1, #2
  41fd82:	4606      	mov	r6, r0
  41fd84:	69e0      	ldr	r0, [r4, #28]
  41fd86:	f8ad 100c 	strh.w	r1, [sp, #12]
  41fd8a:	4617      	mov	r7, r2
  41fd8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  41fd90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  41fd92:	f8ad 500e 	strh.w	r5, [sp, #14]
  41fd96:	4698      	mov	r8, r3
  41fd98:	ad1a      	add	r5, sp, #104	; 0x68
  41fd9a:	2300      	movs	r3, #0
  41fd9c:	9007      	str	r0, [sp, #28]
  41fd9e:	a816      	add	r0, sp, #88	; 0x58
  41fda0:	9209      	str	r2, [sp, #36]	; 0x24
  41fda2:	9306      	str	r3, [sp, #24]
  41fda4:	9500      	str	r5, [sp, #0]
  41fda6:	9504      	str	r5, [sp, #16]
  41fda8:	9102      	str	r1, [sp, #8]
  41fdaa:	9105      	str	r1, [sp, #20]
  41fdac:	f000 fd48 	bl	420840 <__retarget_lock_init_recursive>
  41fdb0:	4643      	mov	r3, r8
  41fdb2:	463a      	mov	r2, r7
  41fdb4:	4669      	mov	r1, sp
  41fdb6:	4630      	mov	r0, r6
  41fdb8:	f7ff f990 	bl	41f0dc <_vfiprintf_r>
  41fdbc:	1e05      	subs	r5, r0, #0
  41fdbe:	db07      	blt.n	41fdd0 <__sbprintf+0x64>
  41fdc0:	4630      	mov	r0, r6
  41fdc2:	4669      	mov	r1, sp
  41fdc4:	f000 f928 	bl	420018 <_fflush_r>
  41fdc8:	2800      	cmp	r0, #0
  41fdca:	bf18      	it	ne
  41fdcc:	f04f 35ff 	movne.w	r5, #4294967295
  41fdd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  41fdd4:	065b      	lsls	r3, r3, #25
  41fdd6:	d503      	bpl.n	41fde0 <__sbprintf+0x74>
  41fdd8:	89a3      	ldrh	r3, [r4, #12]
  41fdda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41fdde:	81a3      	strh	r3, [r4, #12]
  41fde0:	9816      	ldr	r0, [sp, #88]	; 0x58
  41fde2:	f000 fd2f 	bl	420844 <__retarget_lock_close_recursive>
  41fde6:	4628      	mov	r0, r5
  41fde8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  41fdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041fdf0 <__swsetup_r>:
  41fdf0:	b538      	push	{r3, r4, r5, lr}
  41fdf2:	4b30      	ldr	r3, [pc, #192]	; (41feb4 <__swsetup_r+0xc4>)
  41fdf4:	681b      	ldr	r3, [r3, #0]
  41fdf6:	4605      	mov	r5, r0
  41fdf8:	460c      	mov	r4, r1
  41fdfa:	b113      	cbz	r3, 41fe02 <__swsetup_r+0x12>
  41fdfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  41fdfe:	2a00      	cmp	r2, #0
  41fe00:	d038      	beq.n	41fe74 <__swsetup_r+0x84>
  41fe02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  41fe06:	b293      	uxth	r3, r2
  41fe08:	0718      	lsls	r0, r3, #28
  41fe0a:	d50c      	bpl.n	41fe26 <__swsetup_r+0x36>
  41fe0c:	6920      	ldr	r0, [r4, #16]
  41fe0e:	b1a8      	cbz	r0, 41fe3c <__swsetup_r+0x4c>
  41fe10:	f013 0201 	ands.w	r2, r3, #1
  41fe14:	d01e      	beq.n	41fe54 <__swsetup_r+0x64>
  41fe16:	6963      	ldr	r3, [r4, #20]
  41fe18:	2200      	movs	r2, #0
  41fe1a:	425b      	negs	r3, r3
  41fe1c:	61a3      	str	r3, [r4, #24]
  41fe1e:	60a2      	str	r2, [r4, #8]
  41fe20:	b1f0      	cbz	r0, 41fe60 <__swsetup_r+0x70>
  41fe22:	2000      	movs	r0, #0
  41fe24:	bd38      	pop	{r3, r4, r5, pc}
  41fe26:	06d9      	lsls	r1, r3, #27
  41fe28:	d53c      	bpl.n	41fea4 <__swsetup_r+0xb4>
  41fe2a:	0758      	lsls	r0, r3, #29
  41fe2c:	d426      	bmi.n	41fe7c <__swsetup_r+0x8c>
  41fe2e:	6920      	ldr	r0, [r4, #16]
  41fe30:	f042 0308 	orr.w	r3, r2, #8
  41fe34:	81a3      	strh	r3, [r4, #12]
  41fe36:	b29b      	uxth	r3, r3
  41fe38:	2800      	cmp	r0, #0
  41fe3a:	d1e9      	bne.n	41fe10 <__swsetup_r+0x20>
  41fe3c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  41fe40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  41fe44:	d0e4      	beq.n	41fe10 <__swsetup_r+0x20>
  41fe46:	4628      	mov	r0, r5
  41fe48:	4621      	mov	r1, r4
  41fe4a:	f000 fd2f 	bl	4208ac <__smakebuf_r>
  41fe4e:	89a3      	ldrh	r3, [r4, #12]
  41fe50:	6920      	ldr	r0, [r4, #16]
  41fe52:	e7dd      	b.n	41fe10 <__swsetup_r+0x20>
  41fe54:	0799      	lsls	r1, r3, #30
  41fe56:	bf58      	it	pl
  41fe58:	6962      	ldrpl	r2, [r4, #20]
  41fe5a:	60a2      	str	r2, [r4, #8]
  41fe5c:	2800      	cmp	r0, #0
  41fe5e:	d1e0      	bne.n	41fe22 <__swsetup_r+0x32>
  41fe60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41fe64:	061a      	lsls	r2, r3, #24
  41fe66:	d5dd      	bpl.n	41fe24 <__swsetup_r+0x34>
  41fe68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41fe6c:	81a3      	strh	r3, [r4, #12]
  41fe6e:	f04f 30ff 	mov.w	r0, #4294967295
  41fe72:	bd38      	pop	{r3, r4, r5, pc}
  41fe74:	4618      	mov	r0, r3
  41fe76:	f000 f927 	bl	4200c8 <__sinit>
  41fe7a:	e7c2      	b.n	41fe02 <__swsetup_r+0x12>
  41fe7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41fe7e:	b151      	cbz	r1, 41fe96 <__swsetup_r+0xa6>
  41fe80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41fe84:	4299      	cmp	r1, r3
  41fe86:	d004      	beq.n	41fe92 <__swsetup_r+0xa2>
  41fe88:	4628      	mov	r0, r5
  41fe8a:	f000 fa43 	bl	420314 <_free_r>
  41fe8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  41fe92:	2300      	movs	r3, #0
  41fe94:	6323      	str	r3, [r4, #48]	; 0x30
  41fe96:	2300      	movs	r3, #0
  41fe98:	6920      	ldr	r0, [r4, #16]
  41fe9a:	6063      	str	r3, [r4, #4]
  41fe9c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  41fea0:	6020      	str	r0, [r4, #0]
  41fea2:	e7c5      	b.n	41fe30 <__swsetup_r+0x40>
  41fea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  41fea8:	2309      	movs	r3, #9
  41feaa:	602b      	str	r3, [r5, #0]
  41feac:	f04f 30ff 	mov.w	r0, #4294967295
  41feb0:	81a2      	strh	r2, [r4, #12]
  41feb2:	bd38      	pop	{r3, r4, r5, pc}
  41feb4:	20400060 	.word	0x20400060

0041feb8 <register_fini>:
  41feb8:	4b02      	ldr	r3, [pc, #8]	; (41fec4 <register_fini+0xc>)
  41feba:	b113      	cbz	r3, 41fec2 <register_fini+0xa>
  41febc:	4802      	ldr	r0, [pc, #8]	; (41fec8 <register_fini+0x10>)
  41febe:	f000 b805 	b.w	41fecc <atexit>
  41fec2:	4770      	bx	lr
  41fec4:	00000000 	.word	0x00000000
  41fec8:	00420139 	.word	0x00420139

0041fecc <atexit>:
  41fecc:	2300      	movs	r3, #0
  41fece:	4601      	mov	r1, r0
  41fed0:	461a      	mov	r2, r3
  41fed2:	4618      	mov	r0, r3
  41fed4:	f001 b890 	b.w	420ff8 <__register_exitproc>

0041fed8 <__sflush_r>:
  41fed8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  41fedc:	b29a      	uxth	r2, r3
  41fede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41fee2:	460d      	mov	r5, r1
  41fee4:	0711      	lsls	r1, r2, #28
  41fee6:	4680      	mov	r8, r0
  41fee8:	d43a      	bmi.n	41ff60 <__sflush_r+0x88>
  41feea:	686a      	ldr	r2, [r5, #4]
  41feec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  41fef0:	2a00      	cmp	r2, #0
  41fef2:	81ab      	strh	r3, [r5, #12]
  41fef4:	dd6f      	ble.n	41ffd6 <__sflush_r+0xfe>
  41fef6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  41fef8:	2c00      	cmp	r4, #0
  41fefa:	d049      	beq.n	41ff90 <__sflush_r+0xb8>
  41fefc:	2200      	movs	r2, #0
  41fefe:	b29b      	uxth	r3, r3
  41ff00:	f8d8 6000 	ldr.w	r6, [r8]
  41ff04:	f8c8 2000 	str.w	r2, [r8]
  41ff08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  41ff0c:	d067      	beq.n	41ffde <__sflush_r+0x106>
  41ff0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  41ff10:	075f      	lsls	r7, r3, #29
  41ff12:	d505      	bpl.n	41ff20 <__sflush_r+0x48>
  41ff14:	6869      	ldr	r1, [r5, #4]
  41ff16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  41ff18:	1a52      	subs	r2, r2, r1
  41ff1a:	b10b      	cbz	r3, 41ff20 <__sflush_r+0x48>
  41ff1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  41ff1e:	1ad2      	subs	r2, r2, r3
  41ff20:	2300      	movs	r3, #0
  41ff22:	69e9      	ldr	r1, [r5, #28]
  41ff24:	4640      	mov	r0, r8
  41ff26:	47a0      	blx	r4
  41ff28:	1c44      	adds	r4, r0, #1
  41ff2a:	d03c      	beq.n	41ffa6 <__sflush_r+0xce>
  41ff2c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  41ff30:	692a      	ldr	r2, [r5, #16]
  41ff32:	602a      	str	r2, [r5, #0]
  41ff34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  41ff38:	2200      	movs	r2, #0
  41ff3a:	81ab      	strh	r3, [r5, #12]
  41ff3c:	04db      	lsls	r3, r3, #19
  41ff3e:	606a      	str	r2, [r5, #4]
  41ff40:	d447      	bmi.n	41ffd2 <__sflush_r+0xfa>
  41ff42:	6b29      	ldr	r1, [r5, #48]	; 0x30
  41ff44:	f8c8 6000 	str.w	r6, [r8]
  41ff48:	b311      	cbz	r1, 41ff90 <__sflush_r+0xb8>
  41ff4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  41ff4e:	4299      	cmp	r1, r3
  41ff50:	d002      	beq.n	41ff58 <__sflush_r+0x80>
  41ff52:	4640      	mov	r0, r8
  41ff54:	f000 f9de 	bl	420314 <_free_r>
  41ff58:	2000      	movs	r0, #0
  41ff5a:	6328      	str	r0, [r5, #48]	; 0x30
  41ff5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ff60:	692e      	ldr	r6, [r5, #16]
  41ff62:	b1ae      	cbz	r6, 41ff90 <__sflush_r+0xb8>
  41ff64:	682c      	ldr	r4, [r5, #0]
  41ff66:	602e      	str	r6, [r5, #0]
  41ff68:	0791      	lsls	r1, r2, #30
  41ff6a:	bf0c      	ite	eq
  41ff6c:	696b      	ldreq	r3, [r5, #20]
  41ff6e:	2300      	movne	r3, #0
  41ff70:	1ba4      	subs	r4, r4, r6
  41ff72:	60ab      	str	r3, [r5, #8]
  41ff74:	e00a      	b.n	41ff8c <__sflush_r+0xb4>
  41ff76:	4623      	mov	r3, r4
  41ff78:	4632      	mov	r2, r6
  41ff7a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  41ff7c:	69e9      	ldr	r1, [r5, #28]
  41ff7e:	4640      	mov	r0, r8
  41ff80:	47b8      	blx	r7
  41ff82:	2800      	cmp	r0, #0
  41ff84:	eba4 0400 	sub.w	r4, r4, r0
  41ff88:	4406      	add	r6, r0
  41ff8a:	dd04      	ble.n	41ff96 <__sflush_r+0xbe>
  41ff8c:	2c00      	cmp	r4, #0
  41ff8e:	dcf2      	bgt.n	41ff76 <__sflush_r+0x9e>
  41ff90:	2000      	movs	r0, #0
  41ff92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ff96:	89ab      	ldrh	r3, [r5, #12]
  41ff98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41ff9c:	81ab      	strh	r3, [r5, #12]
  41ff9e:	f04f 30ff 	mov.w	r0, #4294967295
  41ffa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ffa6:	f8d8 4000 	ldr.w	r4, [r8]
  41ffaa:	2c1d      	cmp	r4, #29
  41ffac:	d8f3      	bhi.n	41ff96 <__sflush_r+0xbe>
  41ffae:	4b19      	ldr	r3, [pc, #100]	; (420014 <__sflush_r+0x13c>)
  41ffb0:	40e3      	lsrs	r3, r4
  41ffb2:	43db      	mvns	r3, r3
  41ffb4:	f013 0301 	ands.w	r3, r3, #1
  41ffb8:	d1ed      	bne.n	41ff96 <__sflush_r+0xbe>
  41ffba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  41ffbe:	606b      	str	r3, [r5, #4]
  41ffc0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  41ffc4:	6929      	ldr	r1, [r5, #16]
  41ffc6:	81ab      	strh	r3, [r5, #12]
  41ffc8:	04da      	lsls	r2, r3, #19
  41ffca:	6029      	str	r1, [r5, #0]
  41ffcc:	d5b9      	bpl.n	41ff42 <__sflush_r+0x6a>
  41ffce:	2c00      	cmp	r4, #0
  41ffd0:	d1b7      	bne.n	41ff42 <__sflush_r+0x6a>
  41ffd2:	6528      	str	r0, [r5, #80]	; 0x50
  41ffd4:	e7b5      	b.n	41ff42 <__sflush_r+0x6a>
  41ffd6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  41ffd8:	2a00      	cmp	r2, #0
  41ffda:	dc8c      	bgt.n	41fef6 <__sflush_r+0x1e>
  41ffdc:	e7d8      	b.n	41ff90 <__sflush_r+0xb8>
  41ffde:	2301      	movs	r3, #1
  41ffe0:	69e9      	ldr	r1, [r5, #28]
  41ffe2:	4640      	mov	r0, r8
  41ffe4:	47a0      	blx	r4
  41ffe6:	1c43      	adds	r3, r0, #1
  41ffe8:	4602      	mov	r2, r0
  41ffea:	d002      	beq.n	41fff2 <__sflush_r+0x11a>
  41ffec:	89ab      	ldrh	r3, [r5, #12]
  41ffee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  41fff0:	e78e      	b.n	41ff10 <__sflush_r+0x38>
  41fff2:	f8d8 3000 	ldr.w	r3, [r8]
  41fff6:	2b00      	cmp	r3, #0
  41fff8:	d0f8      	beq.n	41ffec <__sflush_r+0x114>
  41fffa:	2b1d      	cmp	r3, #29
  41fffc:	d001      	beq.n	420002 <__sflush_r+0x12a>
  41fffe:	2b16      	cmp	r3, #22
  420000:	d102      	bne.n	420008 <__sflush_r+0x130>
  420002:	f8c8 6000 	str.w	r6, [r8]
  420006:	e7c3      	b.n	41ff90 <__sflush_r+0xb8>
  420008:	89ab      	ldrh	r3, [r5, #12]
  42000a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42000e:	81ab      	strh	r3, [r5, #12]
  420010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  420014:	20400001 	.word	0x20400001

00420018 <_fflush_r>:
  420018:	b538      	push	{r3, r4, r5, lr}
  42001a:	460d      	mov	r5, r1
  42001c:	4604      	mov	r4, r0
  42001e:	b108      	cbz	r0, 420024 <_fflush_r+0xc>
  420020:	6b83      	ldr	r3, [r0, #56]	; 0x38
  420022:	b1bb      	cbz	r3, 420054 <_fflush_r+0x3c>
  420024:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  420028:	b188      	cbz	r0, 42004e <_fflush_r+0x36>
  42002a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  42002c:	07db      	lsls	r3, r3, #31
  42002e:	d401      	bmi.n	420034 <_fflush_r+0x1c>
  420030:	0581      	lsls	r1, r0, #22
  420032:	d517      	bpl.n	420064 <_fflush_r+0x4c>
  420034:	4620      	mov	r0, r4
  420036:	4629      	mov	r1, r5
  420038:	f7ff ff4e 	bl	41fed8 <__sflush_r>
  42003c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  42003e:	07da      	lsls	r2, r3, #31
  420040:	4604      	mov	r4, r0
  420042:	d402      	bmi.n	42004a <_fflush_r+0x32>
  420044:	89ab      	ldrh	r3, [r5, #12]
  420046:	059b      	lsls	r3, r3, #22
  420048:	d507      	bpl.n	42005a <_fflush_r+0x42>
  42004a:	4620      	mov	r0, r4
  42004c:	bd38      	pop	{r3, r4, r5, pc}
  42004e:	4604      	mov	r4, r0
  420050:	4620      	mov	r0, r4
  420052:	bd38      	pop	{r3, r4, r5, pc}
  420054:	f000 f838 	bl	4200c8 <__sinit>
  420058:	e7e4      	b.n	420024 <_fflush_r+0xc>
  42005a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  42005c:	f000 fbf6 	bl	42084c <__retarget_lock_release_recursive>
  420060:	4620      	mov	r0, r4
  420062:	bd38      	pop	{r3, r4, r5, pc}
  420064:	6da8      	ldr	r0, [r5, #88]	; 0x58
  420066:	f000 fbef 	bl	420848 <__retarget_lock_acquire_recursive>
  42006a:	e7e3      	b.n	420034 <_fflush_r+0x1c>

0042006c <_cleanup_r>:
  42006c:	4901      	ldr	r1, [pc, #4]	; (420074 <_cleanup_r+0x8>)
  42006e:	f000 bbaf 	b.w	4207d0 <_fwalk_reent>
  420072:	bf00      	nop
  420074:	004210e1 	.word	0x004210e1

00420078 <std.isra.0>:
  420078:	b510      	push	{r4, lr}
  42007a:	2300      	movs	r3, #0
  42007c:	4604      	mov	r4, r0
  42007e:	8181      	strh	r1, [r0, #12]
  420080:	81c2      	strh	r2, [r0, #14]
  420082:	6003      	str	r3, [r0, #0]
  420084:	6043      	str	r3, [r0, #4]
  420086:	6083      	str	r3, [r0, #8]
  420088:	6643      	str	r3, [r0, #100]	; 0x64
  42008a:	6103      	str	r3, [r0, #16]
  42008c:	6143      	str	r3, [r0, #20]
  42008e:	6183      	str	r3, [r0, #24]
  420090:	4619      	mov	r1, r3
  420092:	2208      	movs	r2, #8
  420094:	305c      	adds	r0, #92	; 0x5c
  420096:	f7fe fc29 	bl	41e8ec <memset>
  42009a:	4807      	ldr	r0, [pc, #28]	; (4200b8 <std.isra.0+0x40>)
  42009c:	4907      	ldr	r1, [pc, #28]	; (4200bc <std.isra.0+0x44>)
  42009e:	4a08      	ldr	r2, [pc, #32]	; (4200c0 <std.isra.0+0x48>)
  4200a0:	4b08      	ldr	r3, [pc, #32]	; (4200c4 <std.isra.0+0x4c>)
  4200a2:	6220      	str	r0, [r4, #32]
  4200a4:	61e4      	str	r4, [r4, #28]
  4200a6:	6261      	str	r1, [r4, #36]	; 0x24
  4200a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4200aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4200ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4200b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4200b4:	f000 bbc4 	b.w	420840 <__retarget_lock_init_recursive>
  4200b8:	00420e25 	.word	0x00420e25
  4200bc:	00420e49 	.word	0x00420e49
  4200c0:	00420e85 	.word	0x00420e85
  4200c4:	00420ea5 	.word	0x00420ea5

004200c8 <__sinit>:
  4200c8:	b510      	push	{r4, lr}
  4200ca:	4604      	mov	r4, r0
  4200cc:	4812      	ldr	r0, [pc, #72]	; (420118 <__sinit+0x50>)
  4200ce:	f000 fbbb 	bl	420848 <__retarget_lock_acquire_recursive>
  4200d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4200d4:	b9d2      	cbnz	r2, 42010c <__sinit+0x44>
  4200d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4200da:	4810      	ldr	r0, [pc, #64]	; (42011c <__sinit+0x54>)
  4200dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4200e0:	2103      	movs	r1, #3
  4200e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4200e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4200e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4200ec:	6860      	ldr	r0, [r4, #4]
  4200ee:	2104      	movs	r1, #4
  4200f0:	f7ff ffc2 	bl	420078 <std.isra.0>
  4200f4:	2201      	movs	r2, #1
  4200f6:	2109      	movs	r1, #9
  4200f8:	68a0      	ldr	r0, [r4, #8]
  4200fa:	f7ff ffbd 	bl	420078 <std.isra.0>
  4200fe:	2202      	movs	r2, #2
  420100:	2112      	movs	r1, #18
  420102:	68e0      	ldr	r0, [r4, #12]
  420104:	f7ff ffb8 	bl	420078 <std.isra.0>
  420108:	2301      	movs	r3, #1
  42010a:	63a3      	str	r3, [r4, #56]	; 0x38
  42010c:	4802      	ldr	r0, [pc, #8]	; (420118 <__sinit+0x50>)
  42010e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  420112:	f000 bb9b 	b.w	42084c <__retarget_lock_release_recursive>
  420116:	bf00      	nop
  420118:	2043a310 	.word	0x2043a310
  42011c:	0042006d 	.word	0x0042006d

00420120 <__sfp_lock_acquire>:
  420120:	4801      	ldr	r0, [pc, #4]	; (420128 <__sfp_lock_acquire+0x8>)
  420122:	f000 bb91 	b.w	420848 <__retarget_lock_acquire_recursive>
  420126:	bf00      	nop
  420128:	2043a324 	.word	0x2043a324

0042012c <__sfp_lock_release>:
  42012c:	4801      	ldr	r0, [pc, #4]	; (420134 <__sfp_lock_release+0x8>)
  42012e:	f000 bb8d 	b.w	42084c <__retarget_lock_release_recursive>
  420132:	bf00      	nop
  420134:	2043a324 	.word	0x2043a324

00420138 <__libc_fini_array>:
  420138:	b538      	push	{r3, r4, r5, lr}
  42013a:	4c0a      	ldr	r4, [pc, #40]	; (420164 <__libc_fini_array+0x2c>)
  42013c:	4d0a      	ldr	r5, [pc, #40]	; (420168 <__libc_fini_array+0x30>)
  42013e:	1b64      	subs	r4, r4, r5
  420140:	10a4      	asrs	r4, r4, #2
  420142:	d00a      	beq.n	42015a <__libc_fini_array+0x22>
  420144:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  420148:	3b01      	subs	r3, #1
  42014a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  42014e:	3c01      	subs	r4, #1
  420150:	f855 3904 	ldr.w	r3, [r5], #-4
  420154:	4798      	blx	r3
  420156:	2c00      	cmp	r4, #0
  420158:	d1f9      	bne.n	42014e <__libc_fini_array+0x16>
  42015a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  42015e:	f037 bb2b 	b.w	4577b8 <_fini>
  420162:	bf00      	nop
  420164:	004577c8 	.word	0x004577c8
  420168:	004577c4 	.word	0x004577c4

0042016c <__fputwc>:
  42016c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  420170:	b082      	sub	sp, #8
  420172:	4680      	mov	r8, r0
  420174:	4689      	mov	r9, r1
  420176:	4614      	mov	r4, r2
  420178:	f000 fb54 	bl	420824 <__locale_mb_cur_max>
  42017c:	2801      	cmp	r0, #1
  42017e:	d036      	beq.n	4201ee <__fputwc+0x82>
  420180:	464a      	mov	r2, r9
  420182:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  420186:	a901      	add	r1, sp, #4
  420188:	4640      	mov	r0, r8
  42018a:	f000 fee7 	bl	420f5c <_wcrtomb_r>
  42018e:	1c42      	adds	r2, r0, #1
  420190:	4606      	mov	r6, r0
  420192:	d025      	beq.n	4201e0 <__fputwc+0x74>
  420194:	b3a8      	cbz	r0, 420202 <__fputwc+0x96>
  420196:	f89d e004 	ldrb.w	lr, [sp, #4]
  42019a:	2500      	movs	r5, #0
  42019c:	f10d 0a04 	add.w	sl, sp, #4
  4201a0:	e009      	b.n	4201b6 <__fputwc+0x4a>
  4201a2:	6823      	ldr	r3, [r4, #0]
  4201a4:	1c5a      	adds	r2, r3, #1
  4201a6:	6022      	str	r2, [r4, #0]
  4201a8:	f883 e000 	strb.w	lr, [r3]
  4201ac:	3501      	adds	r5, #1
  4201ae:	42b5      	cmp	r5, r6
  4201b0:	d227      	bcs.n	420202 <__fputwc+0x96>
  4201b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4201b6:	68a3      	ldr	r3, [r4, #8]
  4201b8:	3b01      	subs	r3, #1
  4201ba:	2b00      	cmp	r3, #0
  4201bc:	60a3      	str	r3, [r4, #8]
  4201be:	daf0      	bge.n	4201a2 <__fputwc+0x36>
  4201c0:	69a7      	ldr	r7, [r4, #24]
  4201c2:	42bb      	cmp	r3, r7
  4201c4:	4671      	mov	r1, lr
  4201c6:	4622      	mov	r2, r4
  4201c8:	4640      	mov	r0, r8
  4201ca:	db02      	blt.n	4201d2 <__fputwc+0x66>
  4201cc:	f1be 0f0a 	cmp.w	lr, #10
  4201d0:	d1e7      	bne.n	4201a2 <__fputwc+0x36>
  4201d2:	f000 fe6b 	bl	420eac <__swbuf_r>
  4201d6:	1c43      	adds	r3, r0, #1
  4201d8:	d1e8      	bne.n	4201ac <__fputwc+0x40>
  4201da:	b002      	add	sp, #8
  4201dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4201e0:	89a3      	ldrh	r3, [r4, #12]
  4201e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4201e6:	81a3      	strh	r3, [r4, #12]
  4201e8:	b002      	add	sp, #8
  4201ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4201ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4201f2:	2bfe      	cmp	r3, #254	; 0xfe
  4201f4:	d8c4      	bhi.n	420180 <__fputwc+0x14>
  4201f6:	fa5f fe89 	uxtb.w	lr, r9
  4201fa:	4606      	mov	r6, r0
  4201fc:	f88d e004 	strb.w	lr, [sp, #4]
  420200:	e7cb      	b.n	42019a <__fputwc+0x2e>
  420202:	4648      	mov	r0, r9
  420204:	b002      	add	sp, #8
  420206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42020a:	bf00      	nop

0042020c <_fputwc_r>:
  42020c:	b530      	push	{r4, r5, lr}
  42020e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  420210:	f013 0f01 	tst.w	r3, #1
  420214:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  420218:	4614      	mov	r4, r2
  42021a:	b083      	sub	sp, #12
  42021c:	4605      	mov	r5, r0
  42021e:	b29a      	uxth	r2, r3
  420220:	d101      	bne.n	420226 <_fputwc_r+0x1a>
  420222:	0590      	lsls	r0, r2, #22
  420224:	d51c      	bpl.n	420260 <_fputwc_r+0x54>
  420226:	0490      	lsls	r0, r2, #18
  420228:	d406      	bmi.n	420238 <_fputwc_r+0x2c>
  42022a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  42022c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  420230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  420234:	81a3      	strh	r3, [r4, #12]
  420236:	6662      	str	r2, [r4, #100]	; 0x64
  420238:	4628      	mov	r0, r5
  42023a:	4622      	mov	r2, r4
  42023c:	f7ff ff96 	bl	42016c <__fputwc>
  420240:	6e63      	ldr	r3, [r4, #100]	; 0x64
  420242:	07da      	lsls	r2, r3, #31
  420244:	4605      	mov	r5, r0
  420246:	d402      	bmi.n	42024e <_fputwc_r+0x42>
  420248:	89a3      	ldrh	r3, [r4, #12]
  42024a:	059b      	lsls	r3, r3, #22
  42024c:	d502      	bpl.n	420254 <_fputwc_r+0x48>
  42024e:	4628      	mov	r0, r5
  420250:	b003      	add	sp, #12
  420252:	bd30      	pop	{r4, r5, pc}
  420254:	6da0      	ldr	r0, [r4, #88]	; 0x58
  420256:	f000 faf9 	bl	42084c <__retarget_lock_release_recursive>
  42025a:	4628      	mov	r0, r5
  42025c:	b003      	add	sp, #12
  42025e:	bd30      	pop	{r4, r5, pc}
  420260:	6da0      	ldr	r0, [r4, #88]	; 0x58
  420262:	9101      	str	r1, [sp, #4]
  420264:	f000 faf0 	bl	420848 <__retarget_lock_acquire_recursive>
  420268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42026c:	9901      	ldr	r1, [sp, #4]
  42026e:	b29a      	uxth	r2, r3
  420270:	e7d9      	b.n	420226 <_fputwc_r+0x1a>
  420272:	bf00      	nop

00420274 <_malloc_trim_r>:
  420274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420276:	4f24      	ldr	r7, [pc, #144]	; (420308 <_malloc_trim_r+0x94>)
  420278:	460c      	mov	r4, r1
  42027a:	4606      	mov	r6, r0
  42027c:	f7fe fb84 	bl	41e988 <__malloc_lock>
  420280:	68bb      	ldr	r3, [r7, #8]
  420282:	685d      	ldr	r5, [r3, #4]
  420284:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  420288:	310f      	adds	r1, #15
  42028a:	f025 0503 	bic.w	r5, r5, #3
  42028e:	4429      	add	r1, r5
  420290:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  420294:	f021 010f 	bic.w	r1, r1, #15
  420298:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  42029c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4202a0:	db07      	blt.n	4202b2 <_malloc_trim_r+0x3e>
  4202a2:	2100      	movs	r1, #0
  4202a4:	4630      	mov	r0, r6
  4202a6:	f7fe fb9b 	bl	41e9e0 <_sbrk_r>
  4202aa:	68bb      	ldr	r3, [r7, #8]
  4202ac:	442b      	add	r3, r5
  4202ae:	4298      	cmp	r0, r3
  4202b0:	d004      	beq.n	4202bc <_malloc_trim_r+0x48>
  4202b2:	4630      	mov	r0, r6
  4202b4:	f7fe fb6e 	bl	41e994 <__malloc_unlock>
  4202b8:	2000      	movs	r0, #0
  4202ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4202bc:	4261      	negs	r1, r4
  4202be:	4630      	mov	r0, r6
  4202c0:	f7fe fb8e 	bl	41e9e0 <_sbrk_r>
  4202c4:	3001      	adds	r0, #1
  4202c6:	d00d      	beq.n	4202e4 <_malloc_trim_r+0x70>
  4202c8:	4b10      	ldr	r3, [pc, #64]	; (42030c <_malloc_trim_r+0x98>)
  4202ca:	68ba      	ldr	r2, [r7, #8]
  4202cc:	6819      	ldr	r1, [r3, #0]
  4202ce:	1b2d      	subs	r5, r5, r4
  4202d0:	f045 0501 	orr.w	r5, r5, #1
  4202d4:	4630      	mov	r0, r6
  4202d6:	1b09      	subs	r1, r1, r4
  4202d8:	6055      	str	r5, [r2, #4]
  4202da:	6019      	str	r1, [r3, #0]
  4202dc:	f7fe fb5a 	bl	41e994 <__malloc_unlock>
  4202e0:	2001      	movs	r0, #1
  4202e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4202e4:	2100      	movs	r1, #0
  4202e6:	4630      	mov	r0, r6
  4202e8:	f7fe fb7a 	bl	41e9e0 <_sbrk_r>
  4202ec:	68ba      	ldr	r2, [r7, #8]
  4202ee:	1a83      	subs	r3, r0, r2
  4202f0:	2b0f      	cmp	r3, #15
  4202f2:	ddde      	ble.n	4202b2 <_malloc_trim_r+0x3e>
  4202f4:	4c06      	ldr	r4, [pc, #24]	; (420310 <_malloc_trim_r+0x9c>)
  4202f6:	4905      	ldr	r1, [pc, #20]	; (42030c <_malloc_trim_r+0x98>)
  4202f8:	6824      	ldr	r4, [r4, #0]
  4202fa:	f043 0301 	orr.w	r3, r3, #1
  4202fe:	1b00      	subs	r0, r0, r4
  420300:	6053      	str	r3, [r2, #4]
  420302:	6008      	str	r0, [r1, #0]
  420304:	e7d5      	b.n	4202b2 <_malloc_trim_r+0x3e>
  420306:	bf00      	nop
  420308:	20400490 	.word	0x20400490
  42030c:	2043a06c 	.word	0x2043a06c
  420310:	20400898 	.word	0x20400898

00420314 <_free_r>:
  420314:	2900      	cmp	r1, #0
  420316:	d044      	beq.n	4203a2 <_free_r+0x8e>
  420318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42031c:	460d      	mov	r5, r1
  42031e:	4680      	mov	r8, r0
  420320:	f7fe fb32 	bl	41e988 <__malloc_lock>
  420324:	f855 7c04 	ldr.w	r7, [r5, #-4]
  420328:	4969      	ldr	r1, [pc, #420]	; (4204d0 <_free_r+0x1bc>)
  42032a:	f027 0301 	bic.w	r3, r7, #1
  42032e:	f1a5 0408 	sub.w	r4, r5, #8
  420332:	18e2      	adds	r2, r4, r3
  420334:	688e      	ldr	r6, [r1, #8]
  420336:	6850      	ldr	r0, [r2, #4]
  420338:	42b2      	cmp	r2, r6
  42033a:	f020 0003 	bic.w	r0, r0, #3
  42033e:	d05e      	beq.n	4203fe <_free_r+0xea>
  420340:	07fe      	lsls	r6, r7, #31
  420342:	6050      	str	r0, [r2, #4]
  420344:	d40b      	bmi.n	42035e <_free_r+0x4a>
  420346:	f855 7c08 	ldr.w	r7, [r5, #-8]
  42034a:	1be4      	subs	r4, r4, r7
  42034c:	f101 0e08 	add.w	lr, r1, #8
  420350:	68a5      	ldr	r5, [r4, #8]
  420352:	4575      	cmp	r5, lr
  420354:	443b      	add	r3, r7
  420356:	d06d      	beq.n	420434 <_free_r+0x120>
  420358:	68e7      	ldr	r7, [r4, #12]
  42035a:	60ef      	str	r7, [r5, #12]
  42035c:	60bd      	str	r5, [r7, #8]
  42035e:	1815      	adds	r5, r2, r0
  420360:	686d      	ldr	r5, [r5, #4]
  420362:	07ed      	lsls	r5, r5, #31
  420364:	d53e      	bpl.n	4203e4 <_free_r+0xd0>
  420366:	f043 0201 	orr.w	r2, r3, #1
  42036a:	6062      	str	r2, [r4, #4]
  42036c:	50e3      	str	r3, [r4, r3]
  42036e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  420372:	d217      	bcs.n	4203a4 <_free_r+0x90>
  420374:	08db      	lsrs	r3, r3, #3
  420376:	1c58      	adds	r0, r3, #1
  420378:	109a      	asrs	r2, r3, #2
  42037a:	684d      	ldr	r5, [r1, #4]
  42037c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  420380:	60a7      	str	r7, [r4, #8]
  420382:	2301      	movs	r3, #1
  420384:	4093      	lsls	r3, r2
  420386:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  42038a:	432b      	orrs	r3, r5
  42038c:	3a08      	subs	r2, #8
  42038e:	60e2      	str	r2, [r4, #12]
  420390:	604b      	str	r3, [r1, #4]
  420392:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  420396:	60fc      	str	r4, [r7, #12]
  420398:	4640      	mov	r0, r8
  42039a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42039e:	f7fe baf9 	b.w	41e994 <__malloc_unlock>
  4203a2:	4770      	bx	lr
  4203a4:	0a5a      	lsrs	r2, r3, #9
  4203a6:	2a04      	cmp	r2, #4
  4203a8:	d852      	bhi.n	420450 <_free_r+0x13c>
  4203aa:	099a      	lsrs	r2, r3, #6
  4203ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4203b0:	00ff      	lsls	r7, r7, #3
  4203b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4203b6:	19c8      	adds	r0, r1, r7
  4203b8:	59ca      	ldr	r2, [r1, r7]
  4203ba:	3808      	subs	r0, #8
  4203bc:	4290      	cmp	r0, r2
  4203be:	d04f      	beq.n	420460 <_free_r+0x14c>
  4203c0:	6851      	ldr	r1, [r2, #4]
  4203c2:	f021 0103 	bic.w	r1, r1, #3
  4203c6:	428b      	cmp	r3, r1
  4203c8:	d232      	bcs.n	420430 <_free_r+0x11c>
  4203ca:	6892      	ldr	r2, [r2, #8]
  4203cc:	4290      	cmp	r0, r2
  4203ce:	d1f7      	bne.n	4203c0 <_free_r+0xac>
  4203d0:	68c3      	ldr	r3, [r0, #12]
  4203d2:	60a0      	str	r0, [r4, #8]
  4203d4:	60e3      	str	r3, [r4, #12]
  4203d6:	609c      	str	r4, [r3, #8]
  4203d8:	60c4      	str	r4, [r0, #12]
  4203da:	4640      	mov	r0, r8
  4203dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4203e0:	f7fe bad8 	b.w	41e994 <__malloc_unlock>
  4203e4:	6895      	ldr	r5, [r2, #8]
  4203e6:	4f3b      	ldr	r7, [pc, #236]	; (4204d4 <_free_r+0x1c0>)
  4203e8:	42bd      	cmp	r5, r7
  4203ea:	4403      	add	r3, r0
  4203ec:	d040      	beq.n	420470 <_free_r+0x15c>
  4203ee:	68d0      	ldr	r0, [r2, #12]
  4203f0:	60e8      	str	r0, [r5, #12]
  4203f2:	f043 0201 	orr.w	r2, r3, #1
  4203f6:	6085      	str	r5, [r0, #8]
  4203f8:	6062      	str	r2, [r4, #4]
  4203fa:	50e3      	str	r3, [r4, r3]
  4203fc:	e7b7      	b.n	42036e <_free_r+0x5a>
  4203fe:	07ff      	lsls	r7, r7, #31
  420400:	4403      	add	r3, r0
  420402:	d407      	bmi.n	420414 <_free_r+0x100>
  420404:	f855 2c08 	ldr.w	r2, [r5, #-8]
  420408:	1aa4      	subs	r4, r4, r2
  42040a:	4413      	add	r3, r2
  42040c:	68a0      	ldr	r0, [r4, #8]
  42040e:	68e2      	ldr	r2, [r4, #12]
  420410:	60c2      	str	r2, [r0, #12]
  420412:	6090      	str	r0, [r2, #8]
  420414:	4a30      	ldr	r2, [pc, #192]	; (4204d8 <_free_r+0x1c4>)
  420416:	6812      	ldr	r2, [r2, #0]
  420418:	f043 0001 	orr.w	r0, r3, #1
  42041c:	4293      	cmp	r3, r2
  42041e:	6060      	str	r0, [r4, #4]
  420420:	608c      	str	r4, [r1, #8]
  420422:	d3b9      	bcc.n	420398 <_free_r+0x84>
  420424:	4b2d      	ldr	r3, [pc, #180]	; (4204dc <_free_r+0x1c8>)
  420426:	4640      	mov	r0, r8
  420428:	6819      	ldr	r1, [r3, #0]
  42042a:	f7ff ff23 	bl	420274 <_malloc_trim_r>
  42042e:	e7b3      	b.n	420398 <_free_r+0x84>
  420430:	4610      	mov	r0, r2
  420432:	e7cd      	b.n	4203d0 <_free_r+0xbc>
  420434:	1811      	adds	r1, r2, r0
  420436:	6849      	ldr	r1, [r1, #4]
  420438:	07c9      	lsls	r1, r1, #31
  42043a:	d444      	bmi.n	4204c6 <_free_r+0x1b2>
  42043c:	6891      	ldr	r1, [r2, #8]
  42043e:	68d2      	ldr	r2, [r2, #12]
  420440:	60ca      	str	r2, [r1, #12]
  420442:	4403      	add	r3, r0
  420444:	f043 0001 	orr.w	r0, r3, #1
  420448:	6091      	str	r1, [r2, #8]
  42044a:	6060      	str	r0, [r4, #4]
  42044c:	50e3      	str	r3, [r4, r3]
  42044e:	e7a3      	b.n	420398 <_free_r+0x84>
  420450:	2a14      	cmp	r2, #20
  420452:	d816      	bhi.n	420482 <_free_r+0x16e>
  420454:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  420458:	00ff      	lsls	r7, r7, #3
  42045a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  42045e:	e7aa      	b.n	4203b6 <_free_r+0xa2>
  420460:	10aa      	asrs	r2, r5, #2
  420462:	2301      	movs	r3, #1
  420464:	684d      	ldr	r5, [r1, #4]
  420466:	4093      	lsls	r3, r2
  420468:	432b      	orrs	r3, r5
  42046a:	604b      	str	r3, [r1, #4]
  42046c:	4603      	mov	r3, r0
  42046e:	e7b0      	b.n	4203d2 <_free_r+0xbe>
  420470:	f043 0201 	orr.w	r2, r3, #1
  420474:	614c      	str	r4, [r1, #20]
  420476:	610c      	str	r4, [r1, #16]
  420478:	60e5      	str	r5, [r4, #12]
  42047a:	60a5      	str	r5, [r4, #8]
  42047c:	6062      	str	r2, [r4, #4]
  42047e:	50e3      	str	r3, [r4, r3]
  420480:	e78a      	b.n	420398 <_free_r+0x84>
  420482:	2a54      	cmp	r2, #84	; 0x54
  420484:	d806      	bhi.n	420494 <_free_r+0x180>
  420486:	0b1a      	lsrs	r2, r3, #12
  420488:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  42048c:	00ff      	lsls	r7, r7, #3
  42048e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  420492:	e790      	b.n	4203b6 <_free_r+0xa2>
  420494:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  420498:	d806      	bhi.n	4204a8 <_free_r+0x194>
  42049a:	0bda      	lsrs	r2, r3, #15
  42049c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4204a0:	00ff      	lsls	r7, r7, #3
  4204a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4204a6:	e786      	b.n	4203b6 <_free_r+0xa2>
  4204a8:	f240 5054 	movw	r0, #1364	; 0x554
  4204ac:	4282      	cmp	r2, r0
  4204ae:	d806      	bhi.n	4204be <_free_r+0x1aa>
  4204b0:	0c9a      	lsrs	r2, r3, #18
  4204b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4204b6:	00ff      	lsls	r7, r7, #3
  4204b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4204bc:	e77b      	b.n	4203b6 <_free_r+0xa2>
  4204be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4204c2:	257e      	movs	r5, #126	; 0x7e
  4204c4:	e777      	b.n	4203b6 <_free_r+0xa2>
  4204c6:	f043 0101 	orr.w	r1, r3, #1
  4204ca:	6061      	str	r1, [r4, #4]
  4204cc:	6013      	str	r3, [r2, #0]
  4204ce:	e763      	b.n	420398 <_free_r+0x84>
  4204d0:	20400490 	.word	0x20400490
  4204d4:	20400498 	.word	0x20400498
  4204d8:	2040089c 	.word	0x2040089c
  4204dc:	2043a09c 	.word	0x2043a09c

004204e0 <__sfvwrite_r>:
  4204e0:	6893      	ldr	r3, [r2, #8]
  4204e2:	2b00      	cmp	r3, #0
  4204e4:	d073      	beq.n	4205ce <__sfvwrite_r+0xee>
  4204e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4204ea:	898b      	ldrh	r3, [r1, #12]
  4204ec:	b083      	sub	sp, #12
  4204ee:	460c      	mov	r4, r1
  4204f0:	0719      	lsls	r1, r3, #28
  4204f2:	9000      	str	r0, [sp, #0]
  4204f4:	4616      	mov	r6, r2
  4204f6:	d526      	bpl.n	420546 <__sfvwrite_r+0x66>
  4204f8:	6922      	ldr	r2, [r4, #16]
  4204fa:	b322      	cbz	r2, 420546 <__sfvwrite_r+0x66>
  4204fc:	f013 0002 	ands.w	r0, r3, #2
  420500:	6835      	ldr	r5, [r6, #0]
  420502:	d02c      	beq.n	42055e <__sfvwrite_r+0x7e>
  420504:	f04f 0900 	mov.w	r9, #0
  420508:	4fb0      	ldr	r7, [pc, #704]	; (4207cc <__sfvwrite_r+0x2ec>)
  42050a:	46c8      	mov	r8, r9
  42050c:	46b2      	mov	sl, r6
  42050e:	45b8      	cmp	r8, r7
  420510:	4643      	mov	r3, r8
  420512:	464a      	mov	r2, r9
  420514:	bf28      	it	cs
  420516:	463b      	movcs	r3, r7
  420518:	9800      	ldr	r0, [sp, #0]
  42051a:	f1b8 0f00 	cmp.w	r8, #0
  42051e:	d050      	beq.n	4205c2 <__sfvwrite_r+0xe2>
  420520:	69e1      	ldr	r1, [r4, #28]
  420522:	6a66      	ldr	r6, [r4, #36]	; 0x24
  420524:	47b0      	blx	r6
  420526:	2800      	cmp	r0, #0
  420528:	dd58      	ble.n	4205dc <__sfvwrite_r+0xfc>
  42052a:	f8da 3008 	ldr.w	r3, [sl, #8]
  42052e:	1a1b      	subs	r3, r3, r0
  420530:	4481      	add	r9, r0
  420532:	eba8 0800 	sub.w	r8, r8, r0
  420536:	f8ca 3008 	str.w	r3, [sl, #8]
  42053a:	2b00      	cmp	r3, #0
  42053c:	d1e7      	bne.n	42050e <__sfvwrite_r+0x2e>
  42053e:	2000      	movs	r0, #0
  420540:	b003      	add	sp, #12
  420542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420546:	4621      	mov	r1, r4
  420548:	9800      	ldr	r0, [sp, #0]
  42054a:	f7ff fc51 	bl	41fdf0 <__swsetup_r>
  42054e:	2800      	cmp	r0, #0
  420550:	f040 8133 	bne.w	4207ba <__sfvwrite_r+0x2da>
  420554:	89a3      	ldrh	r3, [r4, #12]
  420556:	6835      	ldr	r5, [r6, #0]
  420558:	f013 0002 	ands.w	r0, r3, #2
  42055c:	d1d2      	bne.n	420504 <__sfvwrite_r+0x24>
  42055e:	f013 0901 	ands.w	r9, r3, #1
  420562:	d145      	bne.n	4205f0 <__sfvwrite_r+0x110>
  420564:	464f      	mov	r7, r9
  420566:	9601      	str	r6, [sp, #4]
  420568:	b337      	cbz	r7, 4205b8 <__sfvwrite_r+0xd8>
  42056a:	059a      	lsls	r2, r3, #22
  42056c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  420570:	f140 8083 	bpl.w	42067a <__sfvwrite_r+0x19a>
  420574:	4547      	cmp	r7, r8
  420576:	46c3      	mov	fp, r8
  420578:	f0c0 80ab 	bcc.w	4206d2 <__sfvwrite_r+0x1f2>
  42057c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  420580:	f040 80ac 	bne.w	4206dc <__sfvwrite_r+0x1fc>
  420584:	6820      	ldr	r0, [r4, #0]
  420586:	46ba      	mov	sl, r7
  420588:	465a      	mov	r2, fp
  42058a:	4649      	mov	r1, r9
  42058c:	f000 fa40 	bl	420a10 <memmove>
  420590:	68a2      	ldr	r2, [r4, #8]
  420592:	6823      	ldr	r3, [r4, #0]
  420594:	eba2 0208 	sub.w	r2, r2, r8
  420598:	445b      	add	r3, fp
  42059a:	60a2      	str	r2, [r4, #8]
  42059c:	6023      	str	r3, [r4, #0]
  42059e:	9a01      	ldr	r2, [sp, #4]
  4205a0:	6893      	ldr	r3, [r2, #8]
  4205a2:	eba3 030a 	sub.w	r3, r3, sl
  4205a6:	44d1      	add	r9, sl
  4205a8:	eba7 070a 	sub.w	r7, r7, sl
  4205ac:	6093      	str	r3, [r2, #8]
  4205ae:	2b00      	cmp	r3, #0
  4205b0:	d0c5      	beq.n	42053e <__sfvwrite_r+0x5e>
  4205b2:	89a3      	ldrh	r3, [r4, #12]
  4205b4:	2f00      	cmp	r7, #0
  4205b6:	d1d8      	bne.n	42056a <__sfvwrite_r+0x8a>
  4205b8:	f8d5 9000 	ldr.w	r9, [r5]
  4205bc:	686f      	ldr	r7, [r5, #4]
  4205be:	3508      	adds	r5, #8
  4205c0:	e7d2      	b.n	420568 <__sfvwrite_r+0x88>
  4205c2:	f8d5 9000 	ldr.w	r9, [r5]
  4205c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4205ca:	3508      	adds	r5, #8
  4205cc:	e79f      	b.n	42050e <__sfvwrite_r+0x2e>
  4205ce:	2000      	movs	r0, #0
  4205d0:	4770      	bx	lr
  4205d2:	4621      	mov	r1, r4
  4205d4:	9800      	ldr	r0, [sp, #0]
  4205d6:	f7ff fd1f 	bl	420018 <_fflush_r>
  4205da:	b370      	cbz	r0, 42063a <__sfvwrite_r+0x15a>
  4205dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4205e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4205e4:	f04f 30ff 	mov.w	r0, #4294967295
  4205e8:	81a3      	strh	r3, [r4, #12]
  4205ea:	b003      	add	sp, #12
  4205ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4205f0:	4681      	mov	r9, r0
  4205f2:	4633      	mov	r3, r6
  4205f4:	464e      	mov	r6, r9
  4205f6:	46a8      	mov	r8, r5
  4205f8:	469a      	mov	sl, r3
  4205fa:	464d      	mov	r5, r9
  4205fc:	b34e      	cbz	r6, 420652 <__sfvwrite_r+0x172>
  4205fe:	b380      	cbz	r0, 420662 <__sfvwrite_r+0x182>
  420600:	6820      	ldr	r0, [r4, #0]
  420602:	6923      	ldr	r3, [r4, #16]
  420604:	6962      	ldr	r2, [r4, #20]
  420606:	45b1      	cmp	r9, r6
  420608:	46cb      	mov	fp, r9
  42060a:	bf28      	it	cs
  42060c:	46b3      	movcs	fp, r6
  42060e:	4298      	cmp	r0, r3
  420610:	465f      	mov	r7, fp
  420612:	d904      	bls.n	42061e <__sfvwrite_r+0x13e>
  420614:	68a3      	ldr	r3, [r4, #8]
  420616:	4413      	add	r3, r2
  420618:	459b      	cmp	fp, r3
  42061a:	f300 80a6 	bgt.w	42076a <__sfvwrite_r+0x28a>
  42061e:	4593      	cmp	fp, r2
  420620:	db4b      	blt.n	4206ba <__sfvwrite_r+0x1da>
  420622:	4613      	mov	r3, r2
  420624:	6a67      	ldr	r7, [r4, #36]	; 0x24
  420626:	69e1      	ldr	r1, [r4, #28]
  420628:	9800      	ldr	r0, [sp, #0]
  42062a:	462a      	mov	r2, r5
  42062c:	47b8      	blx	r7
  42062e:	1e07      	subs	r7, r0, #0
  420630:	ddd4      	ble.n	4205dc <__sfvwrite_r+0xfc>
  420632:	ebb9 0907 	subs.w	r9, r9, r7
  420636:	d0cc      	beq.n	4205d2 <__sfvwrite_r+0xf2>
  420638:	2001      	movs	r0, #1
  42063a:	f8da 3008 	ldr.w	r3, [sl, #8]
  42063e:	1bdb      	subs	r3, r3, r7
  420640:	443d      	add	r5, r7
  420642:	1bf6      	subs	r6, r6, r7
  420644:	f8ca 3008 	str.w	r3, [sl, #8]
  420648:	2b00      	cmp	r3, #0
  42064a:	f43f af78 	beq.w	42053e <__sfvwrite_r+0x5e>
  42064e:	2e00      	cmp	r6, #0
  420650:	d1d5      	bne.n	4205fe <__sfvwrite_r+0x11e>
  420652:	f108 0308 	add.w	r3, r8, #8
  420656:	e913 0060 	ldmdb	r3, {r5, r6}
  42065a:	4698      	mov	r8, r3
  42065c:	3308      	adds	r3, #8
  42065e:	2e00      	cmp	r6, #0
  420660:	d0f9      	beq.n	420656 <__sfvwrite_r+0x176>
  420662:	4632      	mov	r2, r6
  420664:	210a      	movs	r1, #10
  420666:	4628      	mov	r0, r5
  420668:	f000 f982 	bl	420970 <memchr>
  42066c:	2800      	cmp	r0, #0
  42066e:	f000 80a1 	beq.w	4207b4 <__sfvwrite_r+0x2d4>
  420672:	3001      	adds	r0, #1
  420674:	eba0 0905 	sub.w	r9, r0, r5
  420678:	e7c2      	b.n	420600 <__sfvwrite_r+0x120>
  42067a:	6820      	ldr	r0, [r4, #0]
  42067c:	6923      	ldr	r3, [r4, #16]
  42067e:	4298      	cmp	r0, r3
  420680:	d802      	bhi.n	420688 <__sfvwrite_r+0x1a8>
  420682:	6963      	ldr	r3, [r4, #20]
  420684:	429f      	cmp	r7, r3
  420686:	d25d      	bcs.n	420744 <__sfvwrite_r+0x264>
  420688:	45b8      	cmp	r8, r7
  42068a:	bf28      	it	cs
  42068c:	46b8      	movcs	r8, r7
  42068e:	4642      	mov	r2, r8
  420690:	4649      	mov	r1, r9
  420692:	f000 f9bd 	bl	420a10 <memmove>
  420696:	68a3      	ldr	r3, [r4, #8]
  420698:	6822      	ldr	r2, [r4, #0]
  42069a:	eba3 0308 	sub.w	r3, r3, r8
  42069e:	4442      	add	r2, r8
  4206a0:	60a3      	str	r3, [r4, #8]
  4206a2:	6022      	str	r2, [r4, #0]
  4206a4:	b10b      	cbz	r3, 4206aa <__sfvwrite_r+0x1ca>
  4206a6:	46c2      	mov	sl, r8
  4206a8:	e779      	b.n	42059e <__sfvwrite_r+0xbe>
  4206aa:	4621      	mov	r1, r4
  4206ac:	9800      	ldr	r0, [sp, #0]
  4206ae:	f7ff fcb3 	bl	420018 <_fflush_r>
  4206b2:	2800      	cmp	r0, #0
  4206b4:	d192      	bne.n	4205dc <__sfvwrite_r+0xfc>
  4206b6:	46c2      	mov	sl, r8
  4206b8:	e771      	b.n	42059e <__sfvwrite_r+0xbe>
  4206ba:	465a      	mov	r2, fp
  4206bc:	4629      	mov	r1, r5
  4206be:	f000 f9a7 	bl	420a10 <memmove>
  4206c2:	68a2      	ldr	r2, [r4, #8]
  4206c4:	6823      	ldr	r3, [r4, #0]
  4206c6:	eba2 020b 	sub.w	r2, r2, fp
  4206ca:	445b      	add	r3, fp
  4206cc:	60a2      	str	r2, [r4, #8]
  4206ce:	6023      	str	r3, [r4, #0]
  4206d0:	e7af      	b.n	420632 <__sfvwrite_r+0x152>
  4206d2:	6820      	ldr	r0, [r4, #0]
  4206d4:	46b8      	mov	r8, r7
  4206d6:	46ba      	mov	sl, r7
  4206d8:	46bb      	mov	fp, r7
  4206da:	e755      	b.n	420588 <__sfvwrite_r+0xa8>
  4206dc:	6962      	ldr	r2, [r4, #20]
  4206de:	6820      	ldr	r0, [r4, #0]
  4206e0:	6921      	ldr	r1, [r4, #16]
  4206e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4206e6:	eba0 0a01 	sub.w	sl, r0, r1
  4206ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4206ee:	f10a 0001 	add.w	r0, sl, #1
  4206f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4206f6:	4438      	add	r0, r7
  4206f8:	4540      	cmp	r0, r8
  4206fa:	4642      	mov	r2, r8
  4206fc:	bf84      	itt	hi
  4206fe:	4680      	movhi	r8, r0
  420700:	4642      	movhi	r2, r8
  420702:	055b      	lsls	r3, r3, #21
  420704:	d544      	bpl.n	420790 <__sfvwrite_r+0x2b0>
  420706:	4611      	mov	r1, r2
  420708:	9800      	ldr	r0, [sp, #0]
  42070a:	f7fd fd75 	bl	41e1f8 <_malloc_r>
  42070e:	4683      	mov	fp, r0
  420710:	2800      	cmp	r0, #0
  420712:	d055      	beq.n	4207c0 <__sfvwrite_r+0x2e0>
  420714:	4652      	mov	r2, sl
  420716:	6921      	ldr	r1, [r4, #16]
  420718:	f7fe f84e 	bl	41e7b8 <memcpy>
  42071c:	89a3      	ldrh	r3, [r4, #12]
  42071e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  420722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  420726:	81a3      	strh	r3, [r4, #12]
  420728:	eb0b 000a 	add.w	r0, fp, sl
  42072c:	eba8 030a 	sub.w	r3, r8, sl
  420730:	f8c4 b010 	str.w	fp, [r4, #16]
  420734:	f8c4 8014 	str.w	r8, [r4, #20]
  420738:	6020      	str	r0, [r4, #0]
  42073a:	60a3      	str	r3, [r4, #8]
  42073c:	46b8      	mov	r8, r7
  42073e:	46ba      	mov	sl, r7
  420740:	46bb      	mov	fp, r7
  420742:	e721      	b.n	420588 <__sfvwrite_r+0xa8>
  420744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  420748:	42b9      	cmp	r1, r7
  42074a:	bf28      	it	cs
  42074c:	4639      	movcs	r1, r7
  42074e:	464a      	mov	r2, r9
  420750:	fb91 f1f3 	sdiv	r1, r1, r3
  420754:	9800      	ldr	r0, [sp, #0]
  420756:	6a66      	ldr	r6, [r4, #36]	; 0x24
  420758:	fb03 f301 	mul.w	r3, r3, r1
  42075c:	69e1      	ldr	r1, [r4, #28]
  42075e:	47b0      	blx	r6
  420760:	f1b0 0a00 	subs.w	sl, r0, #0
  420764:	f73f af1b 	bgt.w	42059e <__sfvwrite_r+0xbe>
  420768:	e738      	b.n	4205dc <__sfvwrite_r+0xfc>
  42076a:	461a      	mov	r2, r3
  42076c:	4629      	mov	r1, r5
  42076e:	9301      	str	r3, [sp, #4]
  420770:	f000 f94e 	bl	420a10 <memmove>
  420774:	6822      	ldr	r2, [r4, #0]
  420776:	9b01      	ldr	r3, [sp, #4]
  420778:	9800      	ldr	r0, [sp, #0]
  42077a:	441a      	add	r2, r3
  42077c:	6022      	str	r2, [r4, #0]
  42077e:	4621      	mov	r1, r4
  420780:	f7ff fc4a 	bl	420018 <_fflush_r>
  420784:	9b01      	ldr	r3, [sp, #4]
  420786:	2800      	cmp	r0, #0
  420788:	f47f af28 	bne.w	4205dc <__sfvwrite_r+0xfc>
  42078c:	461f      	mov	r7, r3
  42078e:	e750      	b.n	420632 <__sfvwrite_r+0x152>
  420790:	9800      	ldr	r0, [sp, #0]
  420792:	f000 f9a1 	bl	420ad8 <_realloc_r>
  420796:	4683      	mov	fp, r0
  420798:	2800      	cmp	r0, #0
  42079a:	d1c5      	bne.n	420728 <__sfvwrite_r+0x248>
  42079c:	9d00      	ldr	r5, [sp, #0]
  42079e:	6921      	ldr	r1, [r4, #16]
  4207a0:	4628      	mov	r0, r5
  4207a2:	f7ff fdb7 	bl	420314 <_free_r>
  4207a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4207aa:	220c      	movs	r2, #12
  4207ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4207b0:	602a      	str	r2, [r5, #0]
  4207b2:	e715      	b.n	4205e0 <__sfvwrite_r+0x100>
  4207b4:	f106 0901 	add.w	r9, r6, #1
  4207b8:	e722      	b.n	420600 <__sfvwrite_r+0x120>
  4207ba:	f04f 30ff 	mov.w	r0, #4294967295
  4207be:	e6bf      	b.n	420540 <__sfvwrite_r+0x60>
  4207c0:	9a00      	ldr	r2, [sp, #0]
  4207c2:	230c      	movs	r3, #12
  4207c4:	6013      	str	r3, [r2, #0]
  4207c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4207ca:	e709      	b.n	4205e0 <__sfvwrite_r+0x100>
  4207cc:	7ffffc00 	.word	0x7ffffc00

004207d0 <_fwalk_reent>:
  4207d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4207d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4207d8:	d01f      	beq.n	42081a <_fwalk_reent+0x4a>
  4207da:	4688      	mov	r8, r1
  4207dc:	4606      	mov	r6, r0
  4207de:	f04f 0900 	mov.w	r9, #0
  4207e2:	687d      	ldr	r5, [r7, #4]
  4207e4:	68bc      	ldr	r4, [r7, #8]
  4207e6:	3d01      	subs	r5, #1
  4207e8:	d411      	bmi.n	42080e <_fwalk_reent+0x3e>
  4207ea:	89a3      	ldrh	r3, [r4, #12]
  4207ec:	2b01      	cmp	r3, #1
  4207ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4207f2:	d908      	bls.n	420806 <_fwalk_reent+0x36>
  4207f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4207f8:	3301      	adds	r3, #1
  4207fa:	4621      	mov	r1, r4
  4207fc:	4630      	mov	r0, r6
  4207fe:	d002      	beq.n	420806 <_fwalk_reent+0x36>
  420800:	47c0      	blx	r8
  420802:	ea49 0900 	orr.w	r9, r9, r0
  420806:	1c6b      	adds	r3, r5, #1
  420808:	f104 0468 	add.w	r4, r4, #104	; 0x68
  42080c:	d1ed      	bne.n	4207ea <_fwalk_reent+0x1a>
  42080e:	683f      	ldr	r7, [r7, #0]
  420810:	2f00      	cmp	r7, #0
  420812:	d1e6      	bne.n	4207e2 <_fwalk_reent+0x12>
  420814:	4648      	mov	r0, r9
  420816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42081a:	46b9      	mov	r9, r7
  42081c:	4648      	mov	r0, r9
  42081e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  420822:	bf00      	nop

00420824 <__locale_mb_cur_max>:
  420824:	4b04      	ldr	r3, [pc, #16]	; (420838 <__locale_mb_cur_max+0x14>)
  420826:	4a05      	ldr	r2, [pc, #20]	; (42083c <__locale_mb_cur_max+0x18>)
  420828:	681b      	ldr	r3, [r3, #0]
  42082a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  42082c:	2b00      	cmp	r3, #0
  42082e:	bf08      	it	eq
  420830:	4613      	moveq	r3, r2
  420832:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  420836:	4770      	bx	lr
  420838:	20400060 	.word	0x20400060
  42083c:	204008a4 	.word	0x204008a4

00420840 <__retarget_lock_init_recursive>:
  420840:	4770      	bx	lr
  420842:	bf00      	nop

00420844 <__retarget_lock_close_recursive>:
  420844:	4770      	bx	lr
  420846:	bf00      	nop

00420848 <__retarget_lock_acquire_recursive>:
  420848:	4770      	bx	lr
  42084a:	bf00      	nop

0042084c <__retarget_lock_release_recursive>:
  42084c:	4770      	bx	lr
  42084e:	bf00      	nop

00420850 <__swhatbuf_r>:
  420850:	b570      	push	{r4, r5, r6, lr}
  420852:	460c      	mov	r4, r1
  420854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  420858:	2900      	cmp	r1, #0
  42085a:	b090      	sub	sp, #64	; 0x40
  42085c:	4615      	mov	r5, r2
  42085e:	461e      	mov	r6, r3
  420860:	db14      	blt.n	42088c <__swhatbuf_r+0x3c>
  420862:	aa01      	add	r2, sp, #4
  420864:	f000 fc9e 	bl	4211a4 <_fstat_r>
  420868:	2800      	cmp	r0, #0
  42086a:	db0f      	blt.n	42088c <__swhatbuf_r+0x3c>
  42086c:	9a02      	ldr	r2, [sp, #8]
  42086e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  420872:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  420876:	fab2 f282 	clz	r2, r2
  42087a:	0952      	lsrs	r2, r2, #5
  42087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  420880:	f44f 6000 	mov.w	r0, #2048	; 0x800
  420884:	6032      	str	r2, [r6, #0]
  420886:	602b      	str	r3, [r5, #0]
  420888:	b010      	add	sp, #64	; 0x40
  42088a:	bd70      	pop	{r4, r5, r6, pc}
  42088c:	89a2      	ldrh	r2, [r4, #12]
  42088e:	2300      	movs	r3, #0
  420890:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  420894:	6033      	str	r3, [r6, #0]
  420896:	d004      	beq.n	4208a2 <__swhatbuf_r+0x52>
  420898:	2240      	movs	r2, #64	; 0x40
  42089a:	4618      	mov	r0, r3
  42089c:	602a      	str	r2, [r5, #0]
  42089e:	b010      	add	sp, #64	; 0x40
  4208a0:	bd70      	pop	{r4, r5, r6, pc}
  4208a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4208a6:	602b      	str	r3, [r5, #0]
  4208a8:	b010      	add	sp, #64	; 0x40
  4208aa:	bd70      	pop	{r4, r5, r6, pc}

004208ac <__smakebuf_r>:
  4208ac:	898a      	ldrh	r2, [r1, #12]
  4208ae:	0792      	lsls	r2, r2, #30
  4208b0:	460b      	mov	r3, r1
  4208b2:	d506      	bpl.n	4208c2 <__smakebuf_r+0x16>
  4208b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4208b8:	2101      	movs	r1, #1
  4208ba:	601a      	str	r2, [r3, #0]
  4208bc:	611a      	str	r2, [r3, #16]
  4208be:	6159      	str	r1, [r3, #20]
  4208c0:	4770      	bx	lr
  4208c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4208c4:	b083      	sub	sp, #12
  4208c6:	ab01      	add	r3, sp, #4
  4208c8:	466a      	mov	r2, sp
  4208ca:	460c      	mov	r4, r1
  4208cc:	4606      	mov	r6, r0
  4208ce:	f7ff ffbf 	bl	420850 <__swhatbuf_r>
  4208d2:	9900      	ldr	r1, [sp, #0]
  4208d4:	4605      	mov	r5, r0
  4208d6:	4630      	mov	r0, r6
  4208d8:	f7fd fc8e 	bl	41e1f8 <_malloc_r>
  4208dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4208e0:	b1d8      	cbz	r0, 42091a <__smakebuf_r+0x6e>
  4208e2:	9a01      	ldr	r2, [sp, #4]
  4208e4:	4f15      	ldr	r7, [pc, #84]	; (42093c <__smakebuf_r+0x90>)
  4208e6:	9900      	ldr	r1, [sp, #0]
  4208e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4208ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4208ee:	81a3      	strh	r3, [r4, #12]
  4208f0:	6020      	str	r0, [r4, #0]
  4208f2:	6120      	str	r0, [r4, #16]
  4208f4:	6161      	str	r1, [r4, #20]
  4208f6:	b91a      	cbnz	r2, 420900 <__smakebuf_r+0x54>
  4208f8:	432b      	orrs	r3, r5
  4208fa:	81a3      	strh	r3, [r4, #12]
  4208fc:	b003      	add	sp, #12
  4208fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  420900:	4630      	mov	r0, r6
  420902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  420906:	f000 fc61 	bl	4211cc <_isatty_r>
  42090a:	b1a0      	cbz	r0, 420936 <__smakebuf_r+0x8a>
  42090c:	89a3      	ldrh	r3, [r4, #12]
  42090e:	f023 0303 	bic.w	r3, r3, #3
  420912:	f043 0301 	orr.w	r3, r3, #1
  420916:	b21b      	sxth	r3, r3
  420918:	e7ee      	b.n	4208f8 <__smakebuf_r+0x4c>
  42091a:	059a      	lsls	r2, r3, #22
  42091c:	d4ee      	bmi.n	4208fc <__smakebuf_r+0x50>
  42091e:	f023 0303 	bic.w	r3, r3, #3
  420922:	f104 0243 	add.w	r2, r4, #67	; 0x43
  420926:	f043 0302 	orr.w	r3, r3, #2
  42092a:	2101      	movs	r1, #1
  42092c:	81a3      	strh	r3, [r4, #12]
  42092e:	6022      	str	r2, [r4, #0]
  420930:	6122      	str	r2, [r4, #16]
  420932:	6161      	str	r1, [r4, #20]
  420934:	e7e2      	b.n	4208fc <__smakebuf_r+0x50>
  420936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42093a:	e7dd      	b.n	4208f8 <__smakebuf_r+0x4c>
  42093c:	0042006d 	.word	0x0042006d

00420940 <__ascii_mbtowc>:
  420940:	b082      	sub	sp, #8
  420942:	b149      	cbz	r1, 420958 <__ascii_mbtowc+0x18>
  420944:	b15a      	cbz	r2, 42095e <__ascii_mbtowc+0x1e>
  420946:	b16b      	cbz	r3, 420964 <__ascii_mbtowc+0x24>
  420948:	7813      	ldrb	r3, [r2, #0]
  42094a:	600b      	str	r3, [r1, #0]
  42094c:	7812      	ldrb	r2, [r2, #0]
  42094e:	1c10      	adds	r0, r2, #0
  420950:	bf18      	it	ne
  420952:	2001      	movne	r0, #1
  420954:	b002      	add	sp, #8
  420956:	4770      	bx	lr
  420958:	a901      	add	r1, sp, #4
  42095a:	2a00      	cmp	r2, #0
  42095c:	d1f3      	bne.n	420946 <__ascii_mbtowc+0x6>
  42095e:	4610      	mov	r0, r2
  420960:	b002      	add	sp, #8
  420962:	4770      	bx	lr
  420964:	f06f 0001 	mvn.w	r0, #1
  420968:	e7f4      	b.n	420954 <__ascii_mbtowc+0x14>
  42096a:	bf00      	nop
  42096c:	0000      	movs	r0, r0
	...

00420970 <memchr>:
  420970:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  420974:	2a10      	cmp	r2, #16
  420976:	db2b      	blt.n	4209d0 <memchr+0x60>
  420978:	f010 0f07 	tst.w	r0, #7
  42097c:	d008      	beq.n	420990 <memchr+0x20>
  42097e:	f810 3b01 	ldrb.w	r3, [r0], #1
  420982:	3a01      	subs	r2, #1
  420984:	428b      	cmp	r3, r1
  420986:	d02d      	beq.n	4209e4 <memchr+0x74>
  420988:	f010 0f07 	tst.w	r0, #7
  42098c:	b342      	cbz	r2, 4209e0 <memchr+0x70>
  42098e:	d1f6      	bne.n	42097e <memchr+0xe>
  420990:	b4f0      	push	{r4, r5, r6, r7}
  420992:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  420996:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  42099a:	f022 0407 	bic.w	r4, r2, #7
  42099e:	f07f 0700 	mvns.w	r7, #0
  4209a2:	2300      	movs	r3, #0
  4209a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4209a8:	3c08      	subs	r4, #8
  4209aa:	ea85 0501 	eor.w	r5, r5, r1
  4209ae:	ea86 0601 	eor.w	r6, r6, r1
  4209b2:	fa85 f547 	uadd8	r5, r5, r7
  4209b6:	faa3 f587 	sel	r5, r3, r7
  4209ba:	fa86 f647 	uadd8	r6, r6, r7
  4209be:	faa5 f687 	sel	r6, r5, r7
  4209c2:	b98e      	cbnz	r6, 4209e8 <memchr+0x78>
  4209c4:	d1ee      	bne.n	4209a4 <memchr+0x34>
  4209c6:	bcf0      	pop	{r4, r5, r6, r7}
  4209c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4209cc:	f002 0207 	and.w	r2, r2, #7
  4209d0:	b132      	cbz	r2, 4209e0 <memchr+0x70>
  4209d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4209d6:	3a01      	subs	r2, #1
  4209d8:	ea83 0301 	eor.w	r3, r3, r1
  4209dc:	b113      	cbz	r3, 4209e4 <memchr+0x74>
  4209de:	d1f8      	bne.n	4209d2 <memchr+0x62>
  4209e0:	2000      	movs	r0, #0
  4209e2:	4770      	bx	lr
  4209e4:	3801      	subs	r0, #1
  4209e6:	4770      	bx	lr
  4209e8:	2d00      	cmp	r5, #0
  4209ea:	bf06      	itte	eq
  4209ec:	4635      	moveq	r5, r6
  4209ee:	3803      	subeq	r0, #3
  4209f0:	3807      	subne	r0, #7
  4209f2:	f015 0f01 	tst.w	r5, #1
  4209f6:	d107      	bne.n	420a08 <memchr+0x98>
  4209f8:	3001      	adds	r0, #1
  4209fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4209fe:	bf02      	ittt	eq
  420a00:	3001      	addeq	r0, #1
  420a02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  420a06:	3001      	addeq	r0, #1
  420a08:	bcf0      	pop	{r4, r5, r6, r7}
  420a0a:	3801      	subs	r0, #1
  420a0c:	4770      	bx	lr
  420a0e:	bf00      	nop

00420a10 <memmove>:
  420a10:	4288      	cmp	r0, r1
  420a12:	b5f0      	push	{r4, r5, r6, r7, lr}
  420a14:	d90d      	bls.n	420a32 <memmove+0x22>
  420a16:	188b      	adds	r3, r1, r2
  420a18:	4298      	cmp	r0, r3
  420a1a:	d20a      	bcs.n	420a32 <memmove+0x22>
  420a1c:	1884      	adds	r4, r0, r2
  420a1e:	2a00      	cmp	r2, #0
  420a20:	d051      	beq.n	420ac6 <memmove+0xb6>
  420a22:	4622      	mov	r2, r4
  420a24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  420a28:	f802 4d01 	strb.w	r4, [r2, #-1]!
  420a2c:	4299      	cmp	r1, r3
  420a2e:	d1f9      	bne.n	420a24 <memmove+0x14>
  420a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  420a32:	2a0f      	cmp	r2, #15
  420a34:	d948      	bls.n	420ac8 <memmove+0xb8>
  420a36:	ea41 0300 	orr.w	r3, r1, r0
  420a3a:	079b      	lsls	r3, r3, #30
  420a3c:	d146      	bne.n	420acc <memmove+0xbc>
  420a3e:	f100 0410 	add.w	r4, r0, #16
  420a42:	f101 0310 	add.w	r3, r1, #16
  420a46:	4615      	mov	r5, r2
  420a48:	f853 6c10 	ldr.w	r6, [r3, #-16]
  420a4c:	f844 6c10 	str.w	r6, [r4, #-16]
  420a50:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  420a54:	f844 6c0c 	str.w	r6, [r4, #-12]
  420a58:	f853 6c08 	ldr.w	r6, [r3, #-8]
  420a5c:	f844 6c08 	str.w	r6, [r4, #-8]
  420a60:	3d10      	subs	r5, #16
  420a62:	f853 6c04 	ldr.w	r6, [r3, #-4]
  420a66:	f844 6c04 	str.w	r6, [r4, #-4]
  420a6a:	2d0f      	cmp	r5, #15
  420a6c:	f103 0310 	add.w	r3, r3, #16
  420a70:	f104 0410 	add.w	r4, r4, #16
  420a74:	d8e8      	bhi.n	420a48 <memmove+0x38>
  420a76:	f1a2 0310 	sub.w	r3, r2, #16
  420a7a:	f023 030f 	bic.w	r3, r3, #15
  420a7e:	f002 0e0f 	and.w	lr, r2, #15
  420a82:	3310      	adds	r3, #16
  420a84:	f1be 0f03 	cmp.w	lr, #3
  420a88:	4419      	add	r1, r3
  420a8a:	4403      	add	r3, r0
  420a8c:	d921      	bls.n	420ad2 <memmove+0xc2>
  420a8e:	1f1e      	subs	r6, r3, #4
  420a90:	460d      	mov	r5, r1
  420a92:	4674      	mov	r4, lr
  420a94:	3c04      	subs	r4, #4
  420a96:	f855 7b04 	ldr.w	r7, [r5], #4
  420a9a:	f846 7f04 	str.w	r7, [r6, #4]!
  420a9e:	2c03      	cmp	r4, #3
  420aa0:	d8f8      	bhi.n	420a94 <memmove+0x84>
  420aa2:	f1ae 0404 	sub.w	r4, lr, #4
  420aa6:	f024 0403 	bic.w	r4, r4, #3
  420aaa:	3404      	adds	r4, #4
  420aac:	4421      	add	r1, r4
  420aae:	4423      	add	r3, r4
  420ab0:	f002 0203 	and.w	r2, r2, #3
  420ab4:	b162      	cbz	r2, 420ad0 <memmove+0xc0>
  420ab6:	3b01      	subs	r3, #1
  420ab8:	440a      	add	r2, r1
  420aba:	f811 4b01 	ldrb.w	r4, [r1], #1
  420abe:	f803 4f01 	strb.w	r4, [r3, #1]!
  420ac2:	428a      	cmp	r2, r1
  420ac4:	d1f9      	bne.n	420aba <memmove+0xaa>
  420ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  420ac8:	4603      	mov	r3, r0
  420aca:	e7f3      	b.n	420ab4 <memmove+0xa4>
  420acc:	4603      	mov	r3, r0
  420ace:	e7f2      	b.n	420ab6 <memmove+0xa6>
  420ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  420ad2:	4672      	mov	r2, lr
  420ad4:	e7ee      	b.n	420ab4 <memmove+0xa4>
  420ad6:	bf00      	nop

00420ad8 <_realloc_r>:
  420ad8:	2900      	cmp	r1, #0
  420ada:	f000 8095 	beq.w	420c08 <_realloc_r+0x130>
  420ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  420ae2:	460d      	mov	r5, r1
  420ae4:	4616      	mov	r6, r2
  420ae6:	b083      	sub	sp, #12
  420ae8:	4680      	mov	r8, r0
  420aea:	f106 070b 	add.w	r7, r6, #11
  420aee:	f7fd ff4b 	bl	41e988 <__malloc_lock>
  420af2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  420af6:	2f16      	cmp	r7, #22
  420af8:	f02e 0403 	bic.w	r4, lr, #3
  420afc:	f1a5 0908 	sub.w	r9, r5, #8
  420b00:	d83c      	bhi.n	420b7c <_realloc_r+0xa4>
  420b02:	2210      	movs	r2, #16
  420b04:	4617      	mov	r7, r2
  420b06:	42be      	cmp	r6, r7
  420b08:	d83d      	bhi.n	420b86 <_realloc_r+0xae>
  420b0a:	4294      	cmp	r4, r2
  420b0c:	da43      	bge.n	420b96 <_realloc_r+0xbe>
  420b0e:	4bc4      	ldr	r3, [pc, #784]	; (420e20 <_realloc_r+0x348>)
  420b10:	6899      	ldr	r1, [r3, #8]
  420b12:	eb09 0004 	add.w	r0, r9, r4
  420b16:	4288      	cmp	r0, r1
  420b18:	f000 80b4 	beq.w	420c84 <_realloc_r+0x1ac>
  420b1c:	6843      	ldr	r3, [r0, #4]
  420b1e:	f023 0101 	bic.w	r1, r3, #1
  420b22:	4401      	add	r1, r0
  420b24:	6849      	ldr	r1, [r1, #4]
  420b26:	07c9      	lsls	r1, r1, #31
  420b28:	d54c      	bpl.n	420bc4 <_realloc_r+0xec>
  420b2a:	f01e 0f01 	tst.w	lr, #1
  420b2e:	f000 809b 	beq.w	420c68 <_realloc_r+0x190>
  420b32:	4631      	mov	r1, r6
  420b34:	4640      	mov	r0, r8
  420b36:	f7fd fb5f 	bl	41e1f8 <_malloc_r>
  420b3a:	4606      	mov	r6, r0
  420b3c:	2800      	cmp	r0, #0
  420b3e:	d03a      	beq.n	420bb6 <_realloc_r+0xde>
  420b40:	f855 3c04 	ldr.w	r3, [r5, #-4]
  420b44:	f023 0301 	bic.w	r3, r3, #1
  420b48:	444b      	add	r3, r9
  420b4a:	f1a0 0208 	sub.w	r2, r0, #8
  420b4e:	429a      	cmp	r2, r3
  420b50:	f000 8121 	beq.w	420d96 <_realloc_r+0x2be>
  420b54:	1f22      	subs	r2, r4, #4
  420b56:	2a24      	cmp	r2, #36	; 0x24
  420b58:	f200 8107 	bhi.w	420d6a <_realloc_r+0x292>
  420b5c:	2a13      	cmp	r2, #19
  420b5e:	f200 80db 	bhi.w	420d18 <_realloc_r+0x240>
  420b62:	4603      	mov	r3, r0
  420b64:	462a      	mov	r2, r5
  420b66:	6811      	ldr	r1, [r2, #0]
  420b68:	6019      	str	r1, [r3, #0]
  420b6a:	6851      	ldr	r1, [r2, #4]
  420b6c:	6059      	str	r1, [r3, #4]
  420b6e:	6892      	ldr	r2, [r2, #8]
  420b70:	609a      	str	r2, [r3, #8]
  420b72:	4629      	mov	r1, r5
  420b74:	4640      	mov	r0, r8
  420b76:	f7ff fbcd 	bl	420314 <_free_r>
  420b7a:	e01c      	b.n	420bb6 <_realloc_r+0xde>
  420b7c:	f027 0707 	bic.w	r7, r7, #7
  420b80:	2f00      	cmp	r7, #0
  420b82:	463a      	mov	r2, r7
  420b84:	dabf      	bge.n	420b06 <_realloc_r+0x2e>
  420b86:	2600      	movs	r6, #0
  420b88:	230c      	movs	r3, #12
  420b8a:	4630      	mov	r0, r6
  420b8c:	f8c8 3000 	str.w	r3, [r8]
  420b90:	b003      	add	sp, #12
  420b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420b96:	462e      	mov	r6, r5
  420b98:	1be3      	subs	r3, r4, r7
  420b9a:	2b0f      	cmp	r3, #15
  420b9c:	d81e      	bhi.n	420bdc <_realloc_r+0x104>
  420b9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  420ba2:	f003 0301 	and.w	r3, r3, #1
  420ba6:	4323      	orrs	r3, r4
  420ba8:	444c      	add	r4, r9
  420baa:	f8c9 3004 	str.w	r3, [r9, #4]
  420bae:	6863      	ldr	r3, [r4, #4]
  420bb0:	f043 0301 	orr.w	r3, r3, #1
  420bb4:	6063      	str	r3, [r4, #4]
  420bb6:	4640      	mov	r0, r8
  420bb8:	f7fd feec 	bl	41e994 <__malloc_unlock>
  420bbc:	4630      	mov	r0, r6
  420bbe:	b003      	add	sp, #12
  420bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420bc4:	f023 0303 	bic.w	r3, r3, #3
  420bc8:	18e1      	adds	r1, r4, r3
  420bca:	4291      	cmp	r1, r2
  420bcc:	db1f      	blt.n	420c0e <_realloc_r+0x136>
  420bce:	68c3      	ldr	r3, [r0, #12]
  420bd0:	6882      	ldr	r2, [r0, #8]
  420bd2:	462e      	mov	r6, r5
  420bd4:	60d3      	str	r3, [r2, #12]
  420bd6:	460c      	mov	r4, r1
  420bd8:	609a      	str	r2, [r3, #8]
  420bda:	e7dd      	b.n	420b98 <_realloc_r+0xc0>
  420bdc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  420be0:	eb09 0107 	add.w	r1, r9, r7
  420be4:	f002 0201 	and.w	r2, r2, #1
  420be8:	444c      	add	r4, r9
  420bea:	f043 0301 	orr.w	r3, r3, #1
  420bee:	4317      	orrs	r7, r2
  420bf0:	f8c9 7004 	str.w	r7, [r9, #4]
  420bf4:	604b      	str	r3, [r1, #4]
  420bf6:	6863      	ldr	r3, [r4, #4]
  420bf8:	f043 0301 	orr.w	r3, r3, #1
  420bfc:	3108      	adds	r1, #8
  420bfe:	6063      	str	r3, [r4, #4]
  420c00:	4640      	mov	r0, r8
  420c02:	f7ff fb87 	bl	420314 <_free_r>
  420c06:	e7d6      	b.n	420bb6 <_realloc_r+0xde>
  420c08:	4611      	mov	r1, r2
  420c0a:	f7fd baf5 	b.w	41e1f8 <_malloc_r>
  420c0e:	f01e 0f01 	tst.w	lr, #1
  420c12:	d18e      	bne.n	420b32 <_realloc_r+0x5a>
  420c14:	f855 1c08 	ldr.w	r1, [r5, #-8]
  420c18:	eba9 0a01 	sub.w	sl, r9, r1
  420c1c:	f8da 1004 	ldr.w	r1, [sl, #4]
  420c20:	f021 0103 	bic.w	r1, r1, #3
  420c24:	440b      	add	r3, r1
  420c26:	4423      	add	r3, r4
  420c28:	4293      	cmp	r3, r2
  420c2a:	db25      	blt.n	420c78 <_realloc_r+0x1a0>
  420c2c:	68c2      	ldr	r2, [r0, #12]
  420c2e:	6881      	ldr	r1, [r0, #8]
  420c30:	4656      	mov	r6, sl
  420c32:	60ca      	str	r2, [r1, #12]
  420c34:	6091      	str	r1, [r2, #8]
  420c36:	f8da 100c 	ldr.w	r1, [sl, #12]
  420c3a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  420c3e:	1f22      	subs	r2, r4, #4
  420c40:	2a24      	cmp	r2, #36	; 0x24
  420c42:	60c1      	str	r1, [r0, #12]
  420c44:	6088      	str	r0, [r1, #8]
  420c46:	f200 8094 	bhi.w	420d72 <_realloc_r+0x29a>
  420c4a:	2a13      	cmp	r2, #19
  420c4c:	d96f      	bls.n	420d2e <_realloc_r+0x256>
  420c4e:	6829      	ldr	r1, [r5, #0]
  420c50:	f8ca 1008 	str.w	r1, [sl, #8]
  420c54:	6869      	ldr	r1, [r5, #4]
  420c56:	f8ca 100c 	str.w	r1, [sl, #12]
  420c5a:	2a1b      	cmp	r2, #27
  420c5c:	f200 80a2 	bhi.w	420da4 <_realloc_r+0x2cc>
  420c60:	3508      	adds	r5, #8
  420c62:	f10a 0210 	add.w	r2, sl, #16
  420c66:	e063      	b.n	420d30 <_realloc_r+0x258>
  420c68:	f855 3c08 	ldr.w	r3, [r5, #-8]
  420c6c:	eba9 0a03 	sub.w	sl, r9, r3
  420c70:	f8da 1004 	ldr.w	r1, [sl, #4]
  420c74:	f021 0103 	bic.w	r1, r1, #3
  420c78:	1863      	adds	r3, r4, r1
  420c7a:	4293      	cmp	r3, r2
  420c7c:	f6ff af59 	blt.w	420b32 <_realloc_r+0x5a>
  420c80:	4656      	mov	r6, sl
  420c82:	e7d8      	b.n	420c36 <_realloc_r+0x15e>
  420c84:	6841      	ldr	r1, [r0, #4]
  420c86:	f021 0b03 	bic.w	fp, r1, #3
  420c8a:	44a3      	add	fp, r4
  420c8c:	f107 0010 	add.w	r0, r7, #16
  420c90:	4583      	cmp	fp, r0
  420c92:	da56      	bge.n	420d42 <_realloc_r+0x26a>
  420c94:	f01e 0f01 	tst.w	lr, #1
  420c98:	f47f af4b 	bne.w	420b32 <_realloc_r+0x5a>
  420c9c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  420ca0:	eba9 0a01 	sub.w	sl, r9, r1
  420ca4:	f8da 1004 	ldr.w	r1, [sl, #4]
  420ca8:	f021 0103 	bic.w	r1, r1, #3
  420cac:	448b      	add	fp, r1
  420cae:	4558      	cmp	r0, fp
  420cb0:	dce2      	bgt.n	420c78 <_realloc_r+0x1a0>
  420cb2:	4656      	mov	r6, sl
  420cb4:	f8da 100c 	ldr.w	r1, [sl, #12]
  420cb8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  420cbc:	1f22      	subs	r2, r4, #4
  420cbe:	2a24      	cmp	r2, #36	; 0x24
  420cc0:	60c1      	str	r1, [r0, #12]
  420cc2:	6088      	str	r0, [r1, #8]
  420cc4:	f200 808f 	bhi.w	420de6 <_realloc_r+0x30e>
  420cc8:	2a13      	cmp	r2, #19
  420cca:	f240 808a 	bls.w	420de2 <_realloc_r+0x30a>
  420cce:	6829      	ldr	r1, [r5, #0]
  420cd0:	f8ca 1008 	str.w	r1, [sl, #8]
  420cd4:	6869      	ldr	r1, [r5, #4]
  420cd6:	f8ca 100c 	str.w	r1, [sl, #12]
  420cda:	2a1b      	cmp	r2, #27
  420cdc:	f200 808a 	bhi.w	420df4 <_realloc_r+0x31c>
  420ce0:	3508      	adds	r5, #8
  420ce2:	f10a 0210 	add.w	r2, sl, #16
  420ce6:	6829      	ldr	r1, [r5, #0]
  420ce8:	6011      	str	r1, [r2, #0]
  420cea:	6869      	ldr	r1, [r5, #4]
  420cec:	6051      	str	r1, [r2, #4]
  420cee:	68a9      	ldr	r1, [r5, #8]
  420cf0:	6091      	str	r1, [r2, #8]
  420cf2:	eb0a 0107 	add.w	r1, sl, r7
  420cf6:	ebab 0207 	sub.w	r2, fp, r7
  420cfa:	f042 0201 	orr.w	r2, r2, #1
  420cfe:	6099      	str	r1, [r3, #8]
  420d00:	604a      	str	r2, [r1, #4]
  420d02:	f8da 3004 	ldr.w	r3, [sl, #4]
  420d06:	f003 0301 	and.w	r3, r3, #1
  420d0a:	431f      	orrs	r7, r3
  420d0c:	4640      	mov	r0, r8
  420d0e:	f8ca 7004 	str.w	r7, [sl, #4]
  420d12:	f7fd fe3f 	bl	41e994 <__malloc_unlock>
  420d16:	e751      	b.n	420bbc <_realloc_r+0xe4>
  420d18:	682b      	ldr	r3, [r5, #0]
  420d1a:	6003      	str	r3, [r0, #0]
  420d1c:	686b      	ldr	r3, [r5, #4]
  420d1e:	6043      	str	r3, [r0, #4]
  420d20:	2a1b      	cmp	r2, #27
  420d22:	d82d      	bhi.n	420d80 <_realloc_r+0x2a8>
  420d24:	f100 0308 	add.w	r3, r0, #8
  420d28:	f105 0208 	add.w	r2, r5, #8
  420d2c:	e71b      	b.n	420b66 <_realloc_r+0x8e>
  420d2e:	4632      	mov	r2, r6
  420d30:	6829      	ldr	r1, [r5, #0]
  420d32:	6011      	str	r1, [r2, #0]
  420d34:	6869      	ldr	r1, [r5, #4]
  420d36:	6051      	str	r1, [r2, #4]
  420d38:	68a9      	ldr	r1, [r5, #8]
  420d3a:	6091      	str	r1, [r2, #8]
  420d3c:	461c      	mov	r4, r3
  420d3e:	46d1      	mov	r9, sl
  420d40:	e72a      	b.n	420b98 <_realloc_r+0xc0>
  420d42:	eb09 0107 	add.w	r1, r9, r7
  420d46:	ebab 0b07 	sub.w	fp, fp, r7
  420d4a:	f04b 0201 	orr.w	r2, fp, #1
  420d4e:	6099      	str	r1, [r3, #8]
  420d50:	604a      	str	r2, [r1, #4]
  420d52:	f855 3c04 	ldr.w	r3, [r5, #-4]
  420d56:	f003 0301 	and.w	r3, r3, #1
  420d5a:	431f      	orrs	r7, r3
  420d5c:	4640      	mov	r0, r8
  420d5e:	f845 7c04 	str.w	r7, [r5, #-4]
  420d62:	f7fd fe17 	bl	41e994 <__malloc_unlock>
  420d66:	462e      	mov	r6, r5
  420d68:	e728      	b.n	420bbc <_realloc_r+0xe4>
  420d6a:	4629      	mov	r1, r5
  420d6c:	f7ff fe50 	bl	420a10 <memmove>
  420d70:	e6ff      	b.n	420b72 <_realloc_r+0x9a>
  420d72:	4629      	mov	r1, r5
  420d74:	4630      	mov	r0, r6
  420d76:	461c      	mov	r4, r3
  420d78:	46d1      	mov	r9, sl
  420d7a:	f7ff fe49 	bl	420a10 <memmove>
  420d7e:	e70b      	b.n	420b98 <_realloc_r+0xc0>
  420d80:	68ab      	ldr	r3, [r5, #8]
  420d82:	6083      	str	r3, [r0, #8]
  420d84:	68eb      	ldr	r3, [r5, #12]
  420d86:	60c3      	str	r3, [r0, #12]
  420d88:	2a24      	cmp	r2, #36	; 0x24
  420d8a:	d017      	beq.n	420dbc <_realloc_r+0x2e4>
  420d8c:	f100 0310 	add.w	r3, r0, #16
  420d90:	f105 0210 	add.w	r2, r5, #16
  420d94:	e6e7      	b.n	420b66 <_realloc_r+0x8e>
  420d96:	f850 3c04 	ldr.w	r3, [r0, #-4]
  420d9a:	f023 0303 	bic.w	r3, r3, #3
  420d9e:	441c      	add	r4, r3
  420da0:	462e      	mov	r6, r5
  420da2:	e6f9      	b.n	420b98 <_realloc_r+0xc0>
  420da4:	68a9      	ldr	r1, [r5, #8]
  420da6:	f8ca 1010 	str.w	r1, [sl, #16]
  420daa:	68e9      	ldr	r1, [r5, #12]
  420dac:	f8ca 1014 	str.w	r1, [sl, #20]
  420db0:	2a24      	cmp	r2, #36	; 0x24
  420db2:	d00c      	beq.n	420dce <_realloc_r+0x2f6>
  420db4:	3510      	adds	r5, #16
  420db6:	f10a 0218 	add.w	r2, sl, #24
  420dba:	e7b9      	b.n	420d30 <_realloc_r+0x258>
  420dbc:	692b      	ldr	r3, [r5, #16]
  420dbe:	6103      	str	r3, [r0, #16]
  420dc0:	696b      	ldr	r3, [r5, #20]
  420dc2:	6143      	str	r3, [r0, #20]
  420dc4:	f105 0218 	add.w	r2, r5, #24
  420dc8:	f100 0318 	add.w	r3, r0, #24
  420dcc:	e6cb      	b.n	420b66 <_realloc_r+0x8e>
  420dce:	692a      	ldr	r2, [r5, #16]
  420dd0:	f8ca 2018 	str.w	r2, [sl, #24]
  420dd4:	696a      	ldr	r2, [r5, #20]
  420dd6:	f8ca 201c 	str.w	r2, [sl, #28]
  420dda:	3518      	adds	r5, #24
  420ddc:	f10a 0220 	add.w	r2, sl, #32
  420de0:	e7a6      	b.n	420d30 <_realloc_r+0x258>
  420de2:	4632      	mov	r2, r6
  420de4:	e77f      	b.n	420ce6 <_realloc_r+0x20e>
  420de6:	4629      	mov	r1, r5
  420de8:	4630      	mov	r0, r6
  420dea:	9301      	str	r3, [sp, #4]
  420dec:	f7ff fe10 	bl	420a10 <memmove>
  420df0:	9b01      	ldr	r3, [sp, #4]
  420df2:	e77e      	b.n	420cf2 <_realloc_r+0x21a>
  420df4:	68a9      	ldr	r1, [r5, #8]
  420df6:	f8ca 1010 	str.w	r1, [sl, #16]
  420dfa:	68e9      	ldr	r1, [r5, #12]
  420dfc:	f8ca 1014 	str.w	r1, [sl, #20]
  420e00:	2a24      	cmp	r2, #36	; 0x24
  420e02:	d003      	beq.n	420e0c <_realloc_r+0x334>
  420e04:	3510      	adds	r5, #16
  420e06:	f10a 0218 	add.w	r2, sl, #24
  420e0a:	e76c      	b.n	420ce6 <_realloc_r+0x20e>
  420e0c:	692a      	ldr	r2, [r5, #16]
  420e0e:	f8ca 2018 	str.w	r2, [sl, #24]
  420e12:	696a      	ldr	r2, [r5, #20]
  420e14:	f8ca 201c 	str.w	r2, [sl, #28]
  420e18:	3518      	adds	r5, #24
  420e1a:	f10a 0220 	add.w	r2, sl, #32
  420e1e:	e762      	b.n	420ce6 <_realloc_r+0x20e>
  420e20:	20400490 	.word	0x20400490

00420e24 <__sread>:
  420e24:	b510      	push	{r4, lr}
  420e26:	460c      	mov	r4, r1
  420e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  420e2c:	f000 f9f6 	bl	42121c <_read_r>
  420e30:	2800      	cmp	r0, #0
  420e32:	db03      	blt.n	420e3c <__sread+0x18>
  420e34:	6d23      	ldr	r3, [r4, #80]	; 0x50
  420e36:	4403      	add	r3, r0
  420e38:	6523      	str	r3, [r4, #80]	; 0x50
  420e3a:	bd10      	pop	{r4, pc}
  420e3c:	89a3      	ldrh	r3, [r4, #12]
  420e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  420e42:	81a3      	strh	r3, [r4, #12]
  420e44:	bd10      	pop	{r4, pc}
  420e46:	bf00      	nop

00420e48 <__swrite>:
  420e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  420e4c:	4616      	mov	r6, r2
  420e4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  420e52:	461f      	mov	r7, r3
  420e54:	05d3      	lsls	r3, r2, #23
  420e56:	460c      	mov	r4, r1
  420e58:	4605      	mov	r5, r0
  420e5a:	d507      	bpl.n	420e6c <__swrite+0x24>
  420e5c:	2200      	movs	r2, #0
  420e5e:	2302      	movs	r3, #2
  420e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  420e64:	f000 f9c4 	bl	4211f0 <_lseek_r>
  420e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  420e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  420e70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  420e74:	81a2      	strh	r2, [r4, #12]
  420e76:	463b      	mov	r3, r7
  420e78:	4632      	mov	r2, r6
  420e7a:	4628      	mov	r0, r5
  420e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  420e80:	f000 b8a4 	b.w	420fcc <_write_r>

00420e84 <__sseek>:
  420e84:	b510      	push	{r4, lr}
  420e86:	460c      	mov	r4, r1
  420e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  420e8c:	f000 f9b0 	bl	4211f0 <_lseek_r>
  420e90:	89a3      	ldrh	r3, [r4, #12]
  420e92:	1c42      	adds	r2, r0, #1
  420e94:	bf0e      	itee	eq
  420e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  420e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  420e9e:	6520      	strne	r0, [r4, #80]	; 0x50
  420ea0:	81a3      	strh	r3, [r4, #12]
  420ea2:	bd10      	pop	{r4, pc}

00420ea4 <__sclose>:
  420ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  420ea8:	f000 b908 	b.w	4210bc <_close_r>

00420eac <__swbuf_r>:
  420eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420eae:	460d      	mov	r5, r1
  420eb0:	4614      	mov	r4, r2
  420eb2:	4606      	mov	r6, r0
  420eb4:	b110      	cbz	r0, 420ebc <__swbuf_r+0x10>
  420eb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  420eb8:	2b00      	cmp	r3, #0
  420eba:	d04b      	beq.n	420f54 <__swbuf_r+0xa8>
  420ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  420ec0:	69a3      	ldr	r3, [r4, #24]
  420ec2:	60a3      	str	r3, [r4, #8]
  420ec4:	b291      	uxth	r1, r2
  420ec6:	0708      	lsls	r0, r1, #28
  420ec8:	d539      	bpl.n	420f3e <__swbuf_r+0x92>
  420eca:	6923      	ldr	r3, [r4, #16]
  420ecc:	2b00      	cmp	r3, #0
  420ece:	d036      	beq.n	420f3e <__swbuf_r+0x92>
  420ed0:	b2ed      	uxtb	r5, r5
  420ed2:	0489      	lsls	r1, r1, #18
  420ed4:	462f      	mov	r7, r5
  420ed6:	d515      	bpl.n	420f04 <__swbuf_r+0x58>
  420ed8:	6822      	ldr	r2, [r4, #0]
  420eda:	6961      	ldr	r1, [r4, #20]
  420edc:	1ad3      	subs	r3, r2, r3
  420ede:	428b      	cmp	r3, r1
  420ee0:	da1c      	bge.n	420f1c <__swbuf_r+0x70>
  420ee2:	3301      	adds	r3, #1
  420ee4:	68a1      	ldr	r1, [r4, #8]
  420ee6:	1c50      	adds	r0, r2, #1
  420ee8:	3901      	subs	r1, #1
  420eea:	60a1      	str	r1, [r4, #8]
  420eec:	6020      	str	r0, [r4, #0]
  420eee:	7015      	strb	r5, [r2, #0]
  420ef0:	6962      	ldr	r2, [r4, #20]
  420ef2:	429a      	cmp	r2, r3
  420ef4:	d01a      	beq.n	420f2c <__swbuf_r+0x80>
  420ef6:	89a3      	ldrh	r3, [r4, #12]
  420ef8:	07db      	lsls	r3, r3, #31
  420efa:	d501      	bpl.n	420f00 <__swbuf_r+0x54>
  420efc:	2d0a      	cmp	r5, #10
  420efe:	d015      	beq.n	420f2c <__swbuf_r+0x80>
  420f00:	4638      	mov	r0, r7
  420f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  420f04:	6e61      	ldr	r1, [r4, #100]	; 0x64
  420f06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  420f0a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  420f0e:	81a2      	strh	r2, [r4, #12]
  420f10:	6822      	ldr	r2, [r4, #0]
  420f12:	6661      	str	r1, [r4, #100]	; 0x64
  420f14:	6961      	ldr	r1, [r4, #20]
  420f16:	1ad3      	subs	r3, r2, r3
  420f18:	428b      	cmp	r3, r1
  420f1a:	dbe2      	blt.n	420ee2 <__swbuf_r+0x36>
  420f1c:	4621      	mov	r1, r4
  420f1e:	4630      	mov	r0, r6
  420f20:	f7ff f87a 	bl	420018 <_fflush_r>
  420f24:	b940      	cbnz	r0, 420f38 <__swbuf_r+0x8c>
  420f26:	6822      	ldr	r2, [r4, #0]
  420f28:	2301      	movs	r3, #1
  420f2a:	e7db      	b.n	420ee4 <__swbuf_r+0x38>
  420f2c:	4621      	mov	r1, r4
  420f2e:	4630      	mov	r0, r6
  420f30:	f7ff f872 	bl	420018 <_fflush_r>
  420f34:	2800      	cmp	r0, #0
  420f36:	d0e3      	beq.n	420f00 <__swbuf_r+0x54>
  420f38:	f04f 37ff 	mov.w	r7, #4294967295
  420f3c:	e7e0      	b.n	420f00 <__swbuf_r+0x54>
  420f3e:	4621      	mov	r1, r4
  420f40:	4630      	mov	r0, r6
  420f42:	f7fe ff55 	bl	41fdf0 <__swsetup_r>
  420f46:	2800      	cmp	r0, #0
  420f48:	d1f6      	bne.n	420f38 <__swbuf_r+0x8c>
  420f4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  420f4e:	6923      	ldr	r3, [r4, #16]
  420f50:	b291      	uxth	r1, r2
  420f52:	e7bd      	b.n	420ed0 <__swbuf_r+0x24>
  420f54:	f7ff f8b8 	bl	4200c8 <__sinit>
  420f58:	e7b0      	b.n	420ebc <__swbuf_r+0x10>
  420f5a:	bf00      	nop

00420f5c <_wcrtomb_r>:
  420f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  420f5e:	4606      	mov	r6, r0
  420f60:	b085      	sub	sp, #20
  420f62:	461f      	mov	r7, r3
  420f64:	b189      	cbz	r1, 420f8a <_wcrtomb_r+0x2e>
  420f66:	4c10      	ldr	r4, [pc, #64]	; (420fa8 <_wcrtomb_r+0x4c>)
  420f68:	4d10      	ldr	r5, [pc, #64]	; (420fac <_wcrtomb_r+0x50>)
  420f6a:	6824      	ldr	r4, [r4, #0]
  420f6c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  420f6e:	2c00      	cmp	r4, #0
  420f70:	bf08      	it	eq
  420f72:	462c      	moveq	r4, r5
  420f74:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  420f78:	47a0      	blx	r4
  420f7a:	1c43      	adds	r3, r0, #1
  420f7c:	d103      	bne.n	420f86 <_wcrtomb_r+0x2a>
  420f7e:	2200      	movs	r2, #0
  420f80:	238a      	movs	r3, #138	; 0x8a
  420f82:	603a      	str	r2, [r7, #0]
  420f84:	6033      	str	r3, [r6, #0]
  420f86:	b005      	add	sp, #20
  420f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  420f8a:	460c      	mov	r4, r1
  420f8c:	4906      	ldr	r1, [pc, #24]	; (420fa8 <_wcrtomb_r+0x4c>)
  420f8e:	4a07      	ldr	r2, [pc, #28]	; (420fac <_wcrtomb_r+0x50>)
  420f90:	6809      	ldr	r1, [r1, #0]
  420f92:	6b49      	ldr	r1, [r1, #52]	; 0x34
  420f94:	2900      	cmp	r1, #0
  420f96:	bf08      	it	eq
  420f98:	4611      	moveq	r1, r2
  420f9a:	4622      	mov	r2, r4
  420f9c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  420fa0:	a901      	add	r1, sp, #4
  420fa2:	47a0      	blx	r4
  420fa4:	e7e9      	b.n	420f7a <_wcrtomb_r+0x1e>
  420fa6:	bf00      	nop
  420fa8:	20400060 	.word	0x20400060
  420fac:	204008a4 	.word	0x204008a4

00420fb0 <__ascii_wctomb>:
  420fb0:	b121      	cbz	r1, 420fbc <__ascii_wctomb+0xc>
  420fb2:	2aff      	cmp	r2, #255	; 0xff
  420fb4:	d804      	bhi.n	420fc0 <__ascii_wctomb+0x10>
  420fb6:	700a      	strb	r2, [r1, #0]
  420fb8:	2001      	movs	r0, #1
  420fba:	4770      	bx	lr
  420fbc:	4608      	mov	r0, r1
  420fbe:	4770      	bx	lr
  420fc0:	238a      	movs	r3, #138	; 0x8a
  420fc2:	6003      	str	r3, [r0, #0]
  420fc4:	f04f 30ff 	mov.w	r0, #4294967295
  420fc8:	4770      	bx	lr
  420fca:	bf00      	nop

00420fcc <_write_r>:
  420fcc:	b570      	push	{r4, r5, r6, lr}
  420fce:	460d      	mov	r5, r1
  420fd0:	4c08      	ldr	r4, [pc, #32]	; (420ff4 <_write_r+0x28>)
  420fd2:	4611      	mov	r1, r2
  420fd4:	4606      	mov	r6, r0
  420fd6:	461a      	mov	r2, r3
  420fd8:	4628      	mov	r0, r5
  420fda:	2300      	movs	r3, #0
  420fdc:	6023      	str	r3, [r4, #0]
  420fde:	f7fb f989 	bl	41c2f4 <_write>
  420fe2:	1c43      	adds	r3, r0, #1
  420fe4:	d000      	beq.n	420fe8 <_write_r+0x1c>
  420fe6:	bd70      	pop	{r4, r5, r6, pc}
  420fe8:	6823      	ldr	r3, [r4, #0]
  420fea:	2b00      	cmp	r3, #0
  420fec:	d0fb      	beq.n	420fe6 <_write_r+0x1a>
  420fee:	6033      	str	r3, [r6, #0]
  420ff0:	bd70      	pop	{r4, r5, r6, pc}
  420ff2:	bf00      	nop
  420ff4:	2043a328 	.word	0x2043a328

00420ff8 <__register_exitproc>:
  420ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  420ffc:	4d2c      	ldr	r5, [pc, #176]	; (4210b0 <__register_exitproc+0xb8>)
  420ffe:	4606      	mov	r6, r0
  421000:	6828      	ldr	r0, [r5, #0]
  421002:	4698      	mov	r8, r3
  421004:	460f      	mov	r7, r1
  421006:	4691      	mov	r9, r2
  421008:	f7ff fc1e 	bl	420848 <__retarget_lock_acquire_recursive>
  42100c:	4b29      	ldr	r3, [pc, #164]	; (4210b4 <__register_exitproc+0xbc>)
  42100e:	681c      	ldr	r4, [r3, #0]
  421010:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  421014:	2b00      	cmp	r3, #0
  421016:	d03e      	beq.n	421096 <__register_exitproc+0x9e>
  421018:	685a      	ldr	r2, [r3, #4]
  42101a:	2a1f      	cmp	r2, #31
  42101c:	dc1c      	bgt.n	421058 <__register_exitproc+0x60>
  42101e:	f102 0e01 	add.w	lr, r2, #1
  421022:	b176      	cbz	r6, 421042 <__register_exitproc+0x4a>
  421024:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  421028:	2401      	movs	r4, #1
  42102a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  42102e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  421032:	4094      	lsls	r4, r2
  421034:	4320      	orrs	r0, r4
  421036:	2e02      	cmp	r6, #2
  421038:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  42103c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  421040:	d023      	beq.n	42108a <__register_exitproc+0x92>
  421042:	3202      	adds	r2, #2
  421044:	f8c3 e004 	str.w	lr, [r3, #4]
  421048:	6828      	ldr	r0, [r5, #0]
  42104a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  42104e:	f7ff fbfd 	bl	42084c <__retarget_lock_release_recursive>
  421052:	2000      	movs	r0, #0
  421054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  421058:	4b17      	ldr	r3, [pc, #92]	; (4210b8 <__register_exitproc+0xc0>)
  42105a:	b30b      	cbz	r3, 4210a0 <__register_exitproc+0xa8>
  42105c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  421060:	f7fd f8c2 	bl	41e1e8 <malloc>
  421064:	4603      	mov	r3, r0
  421066:	b1d8      	cbz	r0, 4210a0 <__register_exitproc+0xa8>
  421068:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  42106c:	6002      	str	r2, [r0, #0]
  42106e:	2100      	movs	r1, #0
  421070:	6041      	str	r1, [r0, #4]
  421072:	460a      	mov	r2, r1
  421074:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  421078:	f04f 0e01 	mov.w	lr, #1
  42107c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  421080:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  421084:	2e00      	cmp	r6, #0
  421086:	d0dc      	beq.n	421042 <__register_exitproc+0x4a>
  421088:	e7cc      	b.n	421024 <__register_exitproc+0x2c>
  42108a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  42108e:	430c      	orrs	r4, r1
  421090:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  421094:	e7d5      	b.n	421042 <__register_exitproc+0x4a>
  421096:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  42109a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  42109e:	e7bb      	b.n	421018 <__register_exitproc+0x20>
  4210a0:	6828      	ldr	r0, [r5, #0]
  4210a2:	f7ff fbd3 	bl	42084c <__retarget_lock_release_recursive>
  4210a6:	f04f 30ff 	mov.w	r0, #4294967295
  4210aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4210ae:	bf00      	nop
  4210b0:	204008a0 	.word	0x204008a0
  4210b4:	0045763c 	.word	0x0045763c
  4210b8:	0041e1e9 	.word	0x0041e1e9

004210bc <_close_r>:
  4210bc:	b538      	push	{r3, r4, r5, lr}
  4210be:	4c07      	ldr	r4, [pc, #28]	; (4210dc <_close_r+0x20>)
  4210c0:	2300      	movs	r3, #0
  4210c2:	4605      	mov	r5, r0
  4210c4:	4608      	mov	r0, r1
  4210c6:	6023      	str	r3, [r4, #0]
  4210c8:	f7fb ffba 	bl	41d040 <_close>
  4210cc:	1c43      	adds	r3, r0, #1
  4210ce:	d000      	beq.n	4210d2 <_close_r+0x16>
  4210d0:	bd38      	pop	{r3, r4, r5, pc}
  4210d2:	6823      	ldr	r3, [r4, #0]
  4210d4:	2b00      	cmp	r3, #0
  4210d6:	d0fb      	beq.n	4210d0 <_close_r+0x14>
  4210d8:	602b      	str	r3, [r5, #0]
  4210da:	bd38      	pop	{r3, r4, r5, pc}
  4210dc:	2043a328 	.word	0x2043a328

004210e0 <_fclose_r>:
  4210e0:	b570      	push	{r4, r5, r6, lr}
  4210e2:	b159      	cbz	r1, 4210fc <_fclose_r+0x1c>
  4210e4:	4605      	mov	r5, r0
  4210e6:	460c      	mov	r4, r1
  4210e8:	b110      	cbz	r0, 4210f0 <_fclose_r+0x10>
  4210ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4210ec:	2b00      	cmp	r3, #0
  4210ee:	d03c      	beq.n	42116a <_fclose_r+0x8a>
  4210f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4210f2:	07d8      	lsls	r0, r3, #31
  4210f4:	d505      	bpl.n	421102 <_fclose_r+0x22>
  4210f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4210fa:	b92b      	cbnz	r3, 421108 <_fclose_r+0x28>
  4210fc:	2600      	movs	r6, #0
  4210fe:	4630      	mov	r0, r6
  421100:	bd70      	pop	{r4, r5, r6, pc}
  421102:	89a3      	ldrh	r3, [r4, #12]
  421104:	0599      	lsls	r1, r3, #22
  421106:	d53c      	bpl.n	421182 <_fclose_r+0xa2>
  421108:	4621      	mov	r1, r4
  42110a:	4628      	mov	r0, r5
  42110c:	f7fe fee4 	bl	41fed8 <__sflush_r>
  421110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  421112:	4606      	mov	r6, r0
  421114:	b133      	cbz	r3, 421124 <_fclose_r+0x44>
  421116:	69e1      	ldr	r1, [r4, #28]
  421118:	4628      	mov	r0, r5
  42111a:	4798      	blx	r3
  42111c:	2800      	cmp	r0, #0
  42111e:	bfb8      	it	lt
  421120:	f04f 36ff 	movlt.w	r6, #4294967295
  421124:	89a3      	ldrh	r3, [r4, #12]
  421126:	061a      	lsls	r2, r3, #24
  421128:	d422      	bmi.n	421170 <_fclose_r+0x90>
  42112a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  42112c:	b141      	cbz	r1, 421140 <_fclose_r+0x60>
  42112e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  421132:	4299      	cmp	r1, r3
  421134:	d002      	beq.n	42113c <_fclose_r+0x5c>
  421136:	4628      	mov	r0, r5
  421138:	f7ff f8ec 	bl	420314 <_free_r>
  42113c:	2300      	movs	r3, #0
  42113e:	6323      	str	r3, [r4, #48]	; 0x30
  421140:	6c61      	ldr	r1, [r4, #68]	; 0x44
  421142:	b121      	cbz	r1, 42114e <_fclose_r+0x6e>
  421144:	4628      	mov	r0, r5
  421146:	f7ff f8e5 	bl	420314 <_free_r>
  42114a:	2300      	movs	r3, #0
  42114c:	6463      	str	r3, [r4, #68]	; 0x44
  42114e:	f7fe ffe7 	bl	420120 <__sfp_lock_acquire>
  421152:	6e63      	ldr	r3, [r4, #100]	; 0x64
  421154:	2200      	movs	r2, #0
  421156:	07db      	lsls	r3, r3, #31
  421158:	81a2      	strh	r2, [r4, #12]
  42115a:	d50e      	bpl.n	42117a <_fclose_r+0x9a>
  42115c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42115e:	f7ff fb71 	bl	420844 <__retarget_lock_close_recursive>
  421162:	f7fe ffe3 	bl	42012c <__sfp_lock_release>
  421166:	4630      	mov	r0, r6
  421168:	bd70      	pop	{r4, r5, r6, pc}
  42116a:	f7fe ffad 	bl	4200c8 <__sinit>
  42116e:	e7bf      	b.n	4210f0 <_fclose_r+0x10>
  421170:	6921      	ldr	r1, [r4, #16]
  421172:	4628      	mov	r0, r5
  421174:	f7ff f8ce 	bl	420314 <_free_r>
  421178:	e7d7      	b.n	42112a <_fclose_r+0x4a>
  42117a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42117c:	f7ff fb66 	bl	42084c <__retarget_lock_release_recursive>
  421180:	e7ec      	b.n	42115c <_fclose_r+0x7c>
  421182:	6da0      	ldr	r0, [r4, #88]	; 0x58
  421184:	f7ff fb60 	bl	420848 <__retarget_lock_acquire_recursive>
  421188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42118c:	2b00      	cmp	r3, #0
  42118e:	d1bb      	bne.n	421108 <_fclose_r+0x28>
  421190:	6e66      	ldr	r6, [r4, #100]	; 0x64
  421192:	f016 0601 	ands.w	r6, r6, #1
  421196:	d1b1      	bne.n	4210fc <_fclose_r+0x1c>
  421198:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42119a:	f7ff fb57 	bl	42084c <__retarget_lock_release_recursive>
  42119e:	4630      	mov	r0, r6
  4211a0:	bd70      	pop	{r4, r5, r6, pc}
  4211a2:	bf00      	nop

004211a4 <_fstat_r>:
  4211a4:	b538      	push	{r3, r4, r5, lr}
  4211a6:	460b      	mov	r3, r1
  4211a8:	4c07      	ldr	r4, [pc, #28]	; (4211c8 <_fstat_r+0x24>)
  4211aa:	4605      	mov	r5, r0
  4211ac:	4611      	mov	r1, r2
  4211ae:	4618      	mov	r0, r3
  4211b0:	2300      	movs	r3, #0
  4211b2:	6023      	str	r3, [r4, #0]
  4211b4:	f7fb ff47 	bl	41d046 <_fstat>
  4211b8:	1c43      	adds	r3, r0, #1
  4211ba:	d000      	beq.n	4211be <_fstat_r+0x1a>
  4211bc:	bd38      	pop	{r3, r4, r5, pc}
  4211be:	6823      	ldr	r3, [r4, #0]
  4211c0:	2b00      	cmp	r3, #0
  4211c2:	d0fb      	beq.n	4211bc <_fstat_r+0x18>
  4211c4:	602b      	str	r3, [r5, #0]
  4211c6:	bd38      	pop	{r3, r4, r5, pc}
  4211c8:	2043a328 	.word	0x2043a328

004211cc <_isatty_r>:
  4211cc:	b538      	push	{r3, r4, r5, lr}
  4211ce:	4c07      	ldr	r4, [pc, #28]	; (4211ec <_isatty_r+0x20>)
  4211d0:	2300      	movs	r3, #0
  4211d2:	4605      	mov	r5, r0
  4211d4:	4608      	mov	r0, r1
  4211d6:	6023      	str	r3, [r4, #0]
  4211d8:	f7fb ff3a 	bl	41d050 <_isatty>
  4211dc:	1c43      	adds	r3, r0, #1
  4211de:	d000      	beq.n	4211e2 <_isatty_r+0x16>
  4211e0:	bd38      	pop	{r3, r4, r5, pc}
  4211e2:	6823      	ldr	r3, [r4, #0]
  4211e4:	2b00      	cmp	r3, #0
  4211e6:	d0fb      	beq.n	4211e0 <_isatty_r+0x14>
  4211e8:	602b      	str	r3, [r5, #0]
  4211ea:	bd38      	pop	{r3, r4, r5, pc}
  4211ec:	2043a328 	.word	0x2043a328

004211f0 <_lseek_r>:
  4211f0:	b570      	push	{r4, r5, r6, lr}
  4211f2:	460d      	mov	r5, r1
  4211f4:	4c08      	ldr	r4, [pc, #32]	; (421218 <_lseek_r+0x28>)
  4211f6:	4611      	mov	r1, r2
  4211f8:	4606      	mov	r6, r0
  4211fa:	461a      	mov	r2, r3
  4211fc:	4628      	mov	r0, r5
  4211fe:	2300      	movs	r3, #0
  421200:	6023      	str	r3, [r4, #0]
  421202:	f7fb ff27 	bl	41d054 <_lseek>
  421206:	1c43      	adds	r3, r0, #1
  421208:	d000      	beq.n	42120c <_lseek_r+0x1c>
  42120a:	bd70      	pop	{r4, r5, r6, pc}
  42120c:	6823      	ldr	r3, [r4, #0]
  42120e:	2b00      	cmp	r3, #0
  421210:	d0fb      	beq.n	42120a <_lseek_r+0x1a>
  421212:	6033      	str	r3, [r6, #0]
  421214:	bd70      	pop	{r4, r5, r6, pc}
  421216:	bf00      	nop
  421218:	2043a328 	.word	0x2043a328

0042121c <_read_r>:
  42121c:	b570      	push	{r4, r5, r6, lr}
  42121e:	460d      	mov	r5, r1
  421220:	4c08      	ldr	r4, [pc, #32]	; (421244 <_read_r+0x28>)
  421222:	4611      	mov	r1, r2
  421224:	4606      	mov	r6, r0
  421226:	461a      	mov	r2, r3
  421228:	4628      	mov	r0, r5
  42122a:	2300      	movs	r3, #0
  42122c:	6023      	str	r3, [r4, #0]
  42122e:	f7fb f847 	bl	41c2c0 <_read>
  421232:	1c43      	adds	r3, r0, #1
  421234:	d000      	beq.n	421238 <_read_r+0x1c>
  421236:	bd70      	pop	{r4, r5, r6, pc}
  421238:	6823      	ldr	r3, [r4, #0]
  42123a:	2b00      	cmp	r3, #0
  42123c:	d0fb      	beq.n	421236 <_read_r+0x1a>
  42123e:	6033      	str	r3, [r6, #0]
  421240:	bd70      	pop	{r4, r5, r6, pc}
  421242:	bf00      	nop
  421244:	2043a328 	.word	0x2043a328
  421248:	00474345 	.word	0x00474345
  42124c:	454c4449 	.word	0x454c4449
  421250:	00000000 	.word	0x00000000
  421254:	51726d54 	.word	0x51726d54
  421258:	00000000 	.word	0x00000000
  42125c:	20726d54 	.word	0x20726d54
  421260:	00637653 	.word	0x00637653
  421264:	2074754f 	.word	0x2074754f
  421268:	6d20666f 	.word	0x6d20666f
  42126c:	726f6d65 	.word	0x726f6d65
  421270:	00000079 	.word	0x00000079
  421274:	0000ffff 	.word	0x0000ffff
  421278:	4c4c554e 	.word	0x4c4c554e
  42127c:	696f7020 	.word	0x696f7020
  421280:	7265746e 	.word	0x7265746e
  421284:	00000000 	.word	0x00000000
  421288:	6f5f766c 	.word	0x6f5f766c
  42128c:	00006a62 	.word	0x00006a62
  421290:	0000ffff 	.word	0x0000ffff
  421294:	640a6f4e 	.word	0x640a6f4e
  421298:	00617461 	.word	0x00617461

0042129c <_lv_bpp1_opa_table>:
  42129c:	0000ff00                                ....

004212a0 <_lv_bpp2_opa_table>:
  4212a0:	ffaa5500                                .U..

004212a4 <_lv_bpp4_opa_table>:
  4212a4:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

004212b4 <_lv_bpp8_opa_table>:
  4212b4:	03020100 07060504 0b0a0908 0f0e0d0c     ................
  4212c4:	13121110 17161514 1b1a1918 1f1e1d1c     ................
  4212d4:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
  4212e4:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
  4212f4:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
  421304:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
  421314:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
  421324:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
  421334:	83828180 87868584 8b8a8988 8f8e8d8c     ................
  421344:	93929190 97969594 9b9a9998 9f9e9d9c     ................
  421354:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
  421364:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  421374:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  421384:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  421394:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  4213a4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

004213b4 <wcorr.10557>:
  4213b4:	81808080 83828281 87868584 8d8c8a89     ................
  4213c4:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
  4213d4:	000000b5 0000ffff ffaa5500 33221100     .........U...."3
  4213e4:	77665544 bbaa9988 ffeeddcc ffaa5500     DUfw.........U..
  4213f4:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........
  421404:	006e6962                                bin.

00421408 <cmaps>:
  421408:	00000020 0001005f 00000000 00000000      ..._...........
  421418:	00020000 000000b0 0060f7f3 0042479c     ..........`..GB.
  421428:	00000000 0003003b                       ....;...

00421430 <glyph_dsc>:
	...
  421438:	03c00000 00000000 03c00000 00000a03     ................
  421448:	0580000f 05000505 09d0001c 00000a0a     ................
  421458:	08b0004e fe000f09 0bd00092 00000a0c     N...............
  421468:	09a000ce ff000b0a 02f00105 05000503     ................
  421478:	04b0010d fd010e04 04c00129 fd000e04     ........).......
  421488:	05a00145 05000606 08200157 02000708     E.......W. .....
  421498:	03300173 fe000503 0560017b 03000305     s.0.....{.`.....
  4214a8:	03300183 00000303 04f00188 ffff0e07     ..0.............
  4214b8:	095001b9 00000a09 053001e6 00000a04     ..P.......0.....
  4214c8:	081001fa 00000a08 08000222 00000a08     ........".......
  4214d8:	0960024a 00000a0a 0810027c 00000a08     J.`.....|.......
  4214e8:	08a002a4 00000a09 086002d1 00000a08     ..........`.....
  4214f8:	090002f9 00000a09 08a00326 00000a08     ........&.......
  421508:	0330034e 00000803 0330035a fd000b03     N.0.....Z.0.....
  421518:	0820036b 01000808 0820038b 02000608     k. ....... .....
  421528:	082003a3 01000808 080003c3 00000a08     .. .............
  421538:	0e8003eb fd000d0e 0a400446 00ff0a0c     ........F.@.....
  421548:	0aa00482 00010a09 0a2004af 00000a0a     .......... .....
  421558:	0b9004e1 00010a0a 09600513 00010a08     ..........`.....
  421568:	08e0053b 00010a08 0ad00563 00000a0a     ;.......c.......
  421578:	0b600595 00010a09 045005c2 00010a02     ..`.......P.....
  421588:	073005cc 00ff0a07 0a1005ef 00010a0a     ..0.............
  421598:	08500621 00010a08 0d600649 00010a0b     !.P.....I.`.....
  4215a8:	0b600680 00010a09 0bc006ad 00000a0c     ..`.............
  4215b8:	0a2006e9 00010a09 0bc00716 fd000d0c     .. .............
  4215c8:	0a300764 00010a09 08b00791 00000a09     d.0.............
  4215d8:	083007be 00000a09 0b1007eb 00010a09     ..0.............
  4215e8:	09f00818 00ff0a0b 0fc0084f 00000a10     ........O.......
  4215f8:	0970089f 00000a0a 091008d1 00ff0a0b     ..p.............
  421608:	09300908 00000a09 04b00935 fd010e04     ..0.....5.......
  421618:	04f00951 ffff0e07 04b00982 fd000e04     Q...............
  421628:	0830099e 02010607 070009b3 ff000107     ..0.............
  421638:	086009b7 09010205 086009bc 00000808     ..`.......`.....
  421648:	099009dc 00010b08 08000a08 00000808     ................
  421658:	09900a28 00000b09 08900a5a 00000808     (.......Z.......
  421668:	04f00a7a 00000b06 09b00a9b fd000b09     z...............
  421678:	09900acd 00010b08 03e00af9 00010b02     ................
  421688:	04000b04 fdfe0e05 08a00b27 00010b08     ........'.......
  421698:	03e00b53 00010b02 0ed00b5e 0001080d     S.......^.......
  4216a8:	09900b92 00010808 08e00bb2 00000809     ................
  4216b8:	09900bd6 fd010b08 09900c02 fd000b09     ................
  4216c8:	05c00c34 00010805 07000c48 00000807     4.......H.......
  4216d8:	05d00c64 00000a06 09800c82 00010808     d...............
  4216e8:	07d00ca2 00ff0809 0c900cc6 0000080d     ................
  4216f8:	07c00cfa 00000808 07d00d1a fdff0b09     ................
  421708:	07500d4c 00000807 04f00d68 fd000e05     L.P.....h.......
  421718:	04300d8b fd010e02 04f00d99 fd000e05     ..0.............
  421728:	08200dbc 03000308 05e00dc8 06000506     .. .............
  421738:	04600dd7 03000304 0e000ddd feff0f0f     ..`.............
  421748:	0e000e4e 00000b0e 0e000e9b ff000d0e     N...............
  421758:	0e000ef6 00000b0e 09a00f43 00000b0a     ........C.......
  421768:	0e000f7a fe000f0e 0e000fe3 fe000f0e     z...............
  421778:	0fc0104c ff000d10 0e0010b4 fe000f0e     L...............
  421788:	0fc0111d 00000b10 0e001175 fe000f0e     ........u.......
  421798:	070011de ff000c07 0a801208 ff000c0b     ................
  4217a8:	0fc0124a fe000e10 0e0012ba 00000b0e     J...............
  4217b8:	0c401307 fe010e0a 0c40134d fe000f0d     ..@.....M.@.....
  4217c8:	0c4013af ff000d0d 0c401404 ff000d0d     ..@.......@.....
  4217d8:	0c401459 fe010e0a 0c40149f ffff0d0e     Y.@.......@.....
  4217e8:	08c014fa ff000d09 08c01535 ff000d09     ........5.......
  4217f8:	0c401570 ff000d0d 0c4015c5 0300040d     p.@.......@.....
  421808:	0fc015df 00000b10 11801637 fe000f12     ........7.......
  421818:	0fc016be feff0f11 0e00173e ff000d0e     ........>.......
  421828:	0c401799 0100080d 0c4017cd 0100080d     ..@.......@.....
  421838:	11801801 00000b12 0e001864 00000b0e     ........d.......
  421848:	0e0018b1 fe000f0e 0e00191a feff0f0f     ................
  421858:	0c40198b ff000d0d 0c4019e0 fe000f0d     ..@.......@.....
  421868:	0c401a42 ff000d0d 08c01a97 feff0f0a     B.@.............
  421878:	0c401ae2 fe000f0d 0c401b44 fe000f0d     ..@.....D.@.....
  421888:	0fc01ba6 00000b10 0e001bfe feff0f10     ................
  421898:	0a801c76 fe000f0b 11801cc9 ff000d12     v...............
  4218a8:	11801d3e 00000a12 11801d98 00000a12     >...............
  4218b8:	11801df2 00000a12 11801e4c 00000a12     ........L.......
  4218c8:	11801ea6 00000a12 11801f00 ff000c12     ................
  4218d8:	0c401f6c fe000f0c 0c401fc6 fe000f0d     l.@.......@.....
  4218e8:	0e002028 feff0f0f 11802099 00000b12     ( ....... ......
  4218f8:	0a8020fc fe000f0b 0e10214f 00000a0f     . ......O!......

00421908 <gylph_bitmap>:
  421908:	0dd9a00e 800cc890 11600ab7 1fd9800b     ..........`.....
  421918:	88f09109 f080081f 00000088 3c200d00     .............. <
  421928:	000f0000 ff2f0069 01f7ffff 10a6115c     ....i./.....\...
  421938:	c3006900 00880000 ff9f00d2 12f0ffff     .i..............
  421948:	20e223c5 c003d200 04f00000 000000b0     .#. ............
  421958:	00000070 0000000e 0000e000 30eaef19     p..............0
  421968:	a7e6d60c 000ef402 e0801f00 ef6f0000     ..............o.
  421978:	16000050 0000e5ff 01f00a0e 135fe000     P............._.
  421988:	b06e5ef8 91fecf05 000e0000 70000000     .^n............p
  421998:	dd080000 00a70030 04d0024b 007700c0     ....0...K.....w.
  4219a8:	00201dd0 a7d0034b dc070000 30ccc434     .. .K.......4..0
  4219b8:	2d1d0000 0000d022 b3003ba6 3ac00500     ...-"....;.....:
  4219c8:	1d00a300 d0000d20 0400a600 4d0040cc     .... ........@.M
  4219d8:	000030fc 00c018f7 d005f201 6ebb0000     .0.............n
  4219e8:	5f000040 070000f3 8003dbe6 ba1d302f     @.._......../0..
  4219f8:	01005fa0 b41f40df 03c0fe48 b240fcbf     ._...@..H.....@.
  421a08:	00000000 f0011f00 00f0001f 0bf10300     ................
  421a18:	4f400f90 9b007d00 aa00aa00 7d009b00     ..@O.}.........}
  421a28:	0f004f00 03900b40 0e005ef1 04c00860     .O..@....^..`...
  421a38:	00f301f0 00e600f5 01f500e6 08f004f3     ................
  421a48:	5e600ec0 00930000 09c2a688 dd4d40fe     ..`^.........@M.
  421a58:	509342b1 00005200 00005004 0000a008     .B.P.R...P......
  421a68:	1f00a008 03f3ffff 0030b339 0000a008     ........9.0.....
  421a78:	0100a008 601ef603 00002ce1 f9ff0300     .......`.,......
  421a88:	00103303 402ef503 400e0000 00e00400     .3.....@...@....
  421a98:	00009a00 0400400e 9a0000f0 400e0000     .....@.........@
  421aa8:	00f00300 00009a00 0300500e 9a0000f0     .........P......
  421ab8:	500e0000 00f00300 fe4c0000 b64f0070     ...P......L.p.O.
  421ac8:	b00d908f f4325f00 4fe70000 a40c0020     ....._2....O ...
  421ad8:	ca0000f2 0e00402f 0500db70 68fb04f2     ..../@..p......h
  421ae8:	cf0400f9 fbef00e7 ab00cb44 ab00ab00     ........D.......
  421af8:	ab00ab00 ab00ab00 df07ab00 858e10ea     ................
  421b08:	0001c07e 0000f106 0000f006 0000900d     ~...............
  421b18:	1c0000cc db0100c0 e51d0000 ff7f4244     ............DB..
  421b28:	ff7ff9ff 4424f0ff 0000905f 090000bc     ......$D_.......
  421b38:	3f0000e1 040010d8 0000d06d 0010f402     ...?....m.......
  421b48:	75bdf402 df19d07d 000010ea 0000a00d     ...u}...........
  421b58:	0000ac00 00e10700 404f0000 f6020010     ..........O@....
  421b68:	1d00f500 00f500a0 ffffff7f 333313f3     ..............33
  421b78:	000030f7 0000f500 00f50000 f0ffff09     .0..............
  421b88:	4044b40a 0000800c 0000700e 40fcff0f     ..D@.....p.....@
  421b98:	f25c3403 f7000000 f7000010 f16c858e     .4\...........l.
  421ba8:	30fbdf08 d5ef2a00 57d63f00 00c00c40     ...0.*...?.W@...
  421bb8:	00f40200 5b4f0000 fe04a1ff 3fd05d84     ......O[.....].?
  421bc8:	303f0080 f20300e8 dc45f806 e9df0500     ..?0......E.....
  421bd8:	ffff9f10 44449dfd 04009ce9 0b0000f2     ......DD........
  421be8:	2f0000b0 ad000040 f6010000 e0080000     .../@...........
  421bf8:	800e0000 106f0000 fe9e0100 63be0091     ......o........c
  421c08:	600fc06e cc006f00 02c02b20 00e2ffef     n..`.o.. +......
  421c18:	d04c42dc 1f00205f 0200f255 35d50ef5     .BL._ ..U......5
  421c28:	ef1a00de bf0310ea a42f20ea 008ee14b     ......... /.K...
  421c38:	009de900 714fdd00 ff07ff29 02009efc     ......Oq).......
  421c48:	0000ac10 6507f602 ef0ab08f 532e00d7     .......e.......S
  421c58:	000000f5 3f000000 532ee452 000000f5     .......?R..S....
  421c68:	2e000000 210df652 000001d0 00310000     ....R..!......1.
  421c78:	01f26c00 0f00d68e 0a0000c3 000040fb     .l...........@..
  421c88:	0070ee17 00c30500 1f000000 03f3ffff     ..p.............
  421c98:	00303333 00000000 1f000000 03f3ffff     330.............
  421ca8:	04303333 0e000000 000010d7 0020f95c     330.........\. .
  421cb8:	00f22a00 06b1af03 1c0082de 00000060     .*..........`...
  421cc8:	07000000 9e10eadf 01c06e74 00f00600     ........tn......
  421cd8:	00c00900 00208e00 0000f206 00007008     ...... ......p..
  421ce8:	00000000 0000800b 0000900c daef6c00     .............l..
  421cf8:	3d000040 d91610a4 09e50100 90ca98ee     @..=............
  421d08:	43bd800a 0fd3c0af 0c00f213 063c69c0     ...C.........i<.
  421d18:	c00700d0 d0064b3b 2cc00700 00f2033c     ....;K.....,<...
  421d28:	0f4ac00c 9e43bd10 800ac5e3 cf91ee09     ..J...C.........
  421d38:	00e50190 00000000 10a43d00 00000028     .........=..(...
  421d48:	d9ef7c00 00000010 0000f10c d73f0000     .|............?.
  421d58:	00000000 00006eb9 0ef20200 09000050     .....n......P...
  421d68:	00d007a0 00301f00 7f0000f4 00fbffff     ......0.........
  421d78:	3333e700 f005204f 900c0000 0000900c     ..33O ..........
  421d88:	ff8ff106 e308c4fe 8ef24b33 581f0000     ........3K.....X
  421d98:	f11800e0 f8ffff8f 3733e308 00008ef6     ..........37....
  421da8:	00e0c809 338e9d00 ff787f34 0070fdff     .......34.x...p.
  421db8:	40fbcf07 6a96cf00 00e20af5 601f3000     ...@...j.....0.`
  421dc8:	4f000000 00000020 0000204f 00601f00     ...O ...O ....`.
  421dd8:	e20a0000 01300000 f56a96cf fbdf0700     ......0...j.....
  421de8:	feff8f40 448e00a4 8e70cf46 f3070000     @......DF.p.....
  421df8:	0000008e 00008eda 008e9d00 8e9d0000     ................
  421e08:	da000000 0700008e 46448ef3 ff8f70bf     ..........DF.p..
  421e18:	8f00a4fe 8ef6ffff 8e414444 8e000000     ........DDA.....
  421e28:	8f000000 8ec0ffff 8e203333 8e000000     ........33 .....
  421e38:	8e000000 8f424444 8ff9ffff 8ef6ffff     ....DDB.........
  421e48:	8e414444 8e000000 8e000000 8f000000     DDA.............
  421e58:	8ec0ffff 8e203333 8e000000 8e000000     ....33 .........
  421e68:	00000000 50fccf07 6a96cf00 00e20af6     .......P...j....
  421e78:	601f2000 4f000000 00000020 0000204f     . .`...O ...O ..
  421e88:	00601fb9 e30ab900 00b90000 f86a96cf     ..`...........j.
  421e98:	fcdf0700 00008e60 00e0e808 008e8e00     ....`...........
  421ea8:	e0e80800 8f8e0000 e8ffffff 9e3333e3     .............33.
  421eb8:	0800008e 0000e0e8 00008e8e 00e0e808     ................
  421ec8:	8e8e8e00 8e8e8e8e 8e8e8e8e c0ffff02     ................
  421ed8:	00bc4404 00c00900 00009c00 0000c009     .D..............
  421ee8:	0900009c ba0020c0 608fb50e 8e80fe3c     ..... .....`<...
  421ef8:	504f0000 f604008e 3f008e00 038e0070     ..OP.......?p...
  421f08:	8e0000f8 0000c02e 00f6ec8e 7fb08f00     ................
  421f18:	008e0030 8e00e10a 00cc0000 1e00008e     0...............
  421f28:	00008ea0 00008e00 00008e00 00008e00     ................
  421f38:	00008e00 00008e00 00008e00 00008e00     ................
  421f48:	44448e00 ffff8f40 00008ef2 f7e80800     ..DD@...........
  421f58:	fe020000 0000f18f a0dce8bf 8d9e4f00     .............O..
  421f68:	870d302f 069cd0e8 018d7ee0 e807e5e7     /0.......~......
  421f78:	00fc06d0 0a008d7e d0e80720 7e000000     ....~... ......~
  421f88:	0800108e 0000fce8 00f98f8e f6e6e808     ................
  421f98:	098e8e00 e0e808f3 8e8ee10c e8b81e00     ................
  421fa8:	ee3f00e0 6f00008e 0000e0e8 cf0700ae     ..?....o........
  421fb8:	000050eb f96b96cf 00e20a00 1f605f00     .P....k......_`.
  421fc8:	0a000060 00204fd0 4ff00600 06000020     `....O ....O ...
  421fd8:	00601ff0 0ad00a00 5f0000e2 96cf0060     ..`........_`...
  421fe8:	0000fa6b 50ebdf07 fdff8f00 45e40870     k......P....p..E
  421ff8:	008eb08f e0385f00 8ef50100 483f0000     ....._8.......?H
  422008:	d04d01e0 b2ffff8f 1033e308 00008e00     ..M.......3.....
  422018:	00e00800 07000000 0050ebcf 6b96cf00     ..........P....k
  422028:	e20a00f9 605f0000 0000601f 204fd00a     ......_`.`....O 
  422038:	f0060000 0000204f 601ff005 d00a0000     ....O .....`....
  422048:	0000e20a df01605f 00fa5a85 fcdf0800     ...._`...Z......
  422058:	00000050 9421ec01 1b000000 0000c1ff     P.....!.........
  422068:	00120000 70fdff8f 8f45e408 00008eb0     .......p..E.....
  422078:	00e0385f 008ef501 e0383f00 8fd04d01     _8.......?8..M..
  422088:	08c2ffff 00da33e3 f602008e 0500e008     .....3..........
  422098:	fd9e01f3 64ce00a2 402f706b f8010000     .......dkp/@....
  4220a8:	06000000 000095fd 50ee6a01 9f000000     .........j.P....
  4220b8:	05002000 47a53ff1 ef4b00eb ffff10e9     . ...?.G..K.....
  4220c8:	4424ffff 004044bd 0000c009 00009c00     ..$D.D@.........
  4220d8:	00c00900 009c0000 c0090000 9c000000     ................
  4220e8:	09000000 000000c0 9c00009c a90b0000     ................
  4220f8:	ba0000c0 0b00009c 0000c0a9 00009cba     ................
  422108:	00c0a90b 008eba00 f4940d00 0cf50300     ................
  422118:	00fd68f8 10e9ef09 0000b00c 205fc00a     .h............_ 
  422128:	00f50100 8e0000e9 00f00800 1f00700e     .............p..
  422138:	00f10560 c900ad00 f4030000 0000303f     `...........?0..
  422148:	00c0ba0c f55f0000 00000000 6f0000ee     ......_........o
  422158:	b00d0010 1ff20200 f13f0060 0bd00800     ........`.?.....
  422168:	e68b00b0 06700d00 9be600f0 01202f00     ......p....../ .
  422178:	4ff103f5 00008d10 0eb009ca 0000d860     ...O........`...
  422188:	09600e6f 0000f3b2 04109f1f 0000d0f9     o.`.............
  422198:	0000fb0c 000080ef 0000f607 3f00309f     .............0.?
  4221a8:	a00d0050 9d00f208 04cc0000 2f0000f3     P............../
  4221b8:	0000709e 0000fc06 10fe0900 4d4f0000     .p............OM
  4221c8:	e80100b0 0b00f702 207f00d0 0b00207f     ........... . ..
  4221d8:	00b00cd0 2f009c00 302f0050 0c009e00     ......./P./0....
  4221e8:	e8000090 0000f105 00e6f305 fd0c0000     ................
  4221f8:	00000000 0000403f 00f30200 2f000000     ....?@........./
  422208:	00000030 0000f302 ffffff4f 4a444491     0.......O....DDJ
  422218:	030000f3 010000f6 000000ea 000000cc     ................
  422228:	0000109e 0000406f 0000703f 4444d41e     ....o@..?p....DD
  422238:	ffffff36 8df68ffc 8d008d31 8d008d00     6.......1.......
  422248:	8d008d00 8d008d00 8d008d00 8f318d00     ..............1.
  422258:	00005df6 0000f200 0000800b 0100006d     .]..........m...
  422268:	0b0000f2 6d000080 f2010000 700b0000     .......m.......p
  422278:	006d0000 00f20100 00700b00 00006d00     ..m.......p..m..
  422288:	f3bff201 f302f325 f302f302 f302f302     ....%...........
  422298:	f302f302 f302f302 f325f302 ad00f3bf     ..........%.....
  4222a8:	c41e0000 a0850800 100ee200 0b97005b     ............[...
  4222b8:	eee00250 0be0eeee b00900c0 10eacf04     P...............
  4222c8:	b05d740b f0040000 f2eece04 f214821f     .t].............
  4222d8:	f204104f f23d701f f2d7df04 000000ba     O....p=.........
  4222e8:	000000ba 000000ba 30fc8eba f34bd5bf     ...........0..K.
  4222f8:	ca0010be 7e0000ba 7e0000ba ca0010be     .......~...~....
  422308:	f35bd5bf 30fc8eb9 60fd7d00 f448f709     ..[....0.}.`..H.
  422318:	2000502f 0000005f 0000005f 2000502f     /P. _..._.../P. 
  422328:	f448f709 60fd7d00 1f000000 01000040     ..H..}.`....@...
  422338:	000000f4 ef08401f f70af4c4 f542ff48     .....@......H.B.
  422348:	5ff40700 452f0000 f40100f0 6f00502f     ..._../E..../P.o
  422358:	7e63ae40 fc8e00f4 8e00404f d50a40fc     @.c~....O@...@..
  422368:	202ff438 ee5f8c00 215fffee 702f1111     8./ .._..._!../p
  422378:	f8091000 7d00e446 9e0080fe 41f405e3     ....F..}.......A
  422388:	cf00c008 d329f0ff 00d00820 0800d008     ......). .......
  422398:	d00800d0 00d00800 0000d008 604efc7e     ............~.N`
  4223a8:	f67f74af 5f00502f 0000f065 00005ff6     .t../P._e...._..
  4223b8:	00f6620f f709f606 0750ff47 00f5c4ef     .b......G.P.....
  4223c8:	203f0000 b06e64cb 80fdae03 0000ba00     ..? .dn.........
  4223d8:	0000ba00 0000ba00 fb8eba00 6dc5bf20     ............ ..m
  4223e8:	0300bed0 0000baf2 0000baf4 0000baf5     ................
  4223f8:	0000baf5 0000baf5 00a8baf5 babababa     ................
  422408:	babababa 00b00a00 00000099 0a00ab00     ................
  422418:	00ab00b0 ab00b00a 00b00a00 b00a00ab     ................
  422428:	4e06aa00 baa0df71 ba000000 ba000000     ...Nq...........
  422438:	ba000000 bac01c00 ba00cc01 bb00d11c     ................
  422448:	bf0060cf bd00e1db ba00dc11 ba703f00     .`...........?p.
  422458:	baf30700 babababa babababa 9eb9baba     ................
  422468:	d4df15fa ed45fb0b bef24ae6 00f60600     ......E..J......
  422478:	00a07b0e c900204f f10300ba a09b0c00     .{..O ..........
  422488:	00103f00 0300bac9 9b0c00f1 103f00a0     .?............?.
  422498:	9eb9c900 b4bf20fb 00bed05d 00baf203     ..... ..].......
  4224a8:	00baf400 00baf500 00baf500 00baf500     ................
  4224b8:	7d00f500 9f0060fd 2f708f74 057f0050     ...}.`..t.p/P...
  4224c8:	f30100f0 2f00005f 0700f532 48f709f0     ...._../2......H
  4224d8:	df0700f7 8eb900d6 c4bf30fc 10bef33a     .........0..:...
  4224e8:	00baca00 00ba7e00 10be7e00 d5bfca00     .....~...~......
  4224f8:	7ebaf35b 00ba30fc 00ba0000 00ba0000     [..~.0..........
  422508:	8e000000 af403ffc 2ff48e74 457f0050     .....?@.t../P..E
  422518:	f40100f0 2f00005f 0700f542 48f70af4     ...._../B......H
  422528:	ef0840ff 0000f4c4 00401f00 00f40100     .@........@.....
  422538:	401f0000 fd4b8eb9 0b10be71 00ba00b0     ...@..K.q.......
  422548:	ba00a00b 00a00b00 13eadf05 6fa035f7     .............5.o
  422558:	ee010000 6a011096 000030ef 6f646cd9     .......j.0...ldo
  422568:	70fdae62 0800d008 ffcf00d0 20d329f0     b..p.........). 
  422578:	0800d008 d00800d0 00d00800 0051f505     ..............Q.
  422588:	00c8e39f 00c8f302 00c8f302 00c8f302     ................
  422598:	00c9f302 00abf303 835ff307 df06f37e     .........._.~...
  4225a8:	900df3c5 6ea00a00 00f30100 007d00f5     .......n......}.
  4225b8:	600ec009 f0243f00 b9c80000 ff060000     ...`.?$.........
  4225c8:	0f000030 00c800c0 0d00f106 cf00d056     0...........V...
  4225d8:	1ff00360 009c2f30 07b8009a 400ef1b2     `...0/.........@
  4225e8:	0cd6e005 0f00e074 997c006f a0af0000     ....t...o.|.....
  4225f8:	0040ff01 0b00f405 304f00e0 d009e107     ..@.......O0....
  422608:	d900402f 3f0000d9 4f0000d0 e70100e1     /@.....?...O....
  422618:	b00b00bb 107e701e 900df305 6fa00a00     .....p~........o
  422628:	00f30100 007d00f6 600dc009 f0342f00     ......}....`./4.
  422638:	a9c90000 ff050000 0e000020 000000c0     ........ .......
  422648:	940000e5 1b0000ad 000020fc a1ffff5f     ......... .._...
  422658:	00f43733 0000e701 8e0000cb 404f0010     37............O@
  422668:	33a31e00 fcffff26 0fa06e00 00f40192     ...3&....n......
  422678:	f401401f 3f303f00 306f00c0 1f00f401     .@...?0?..o0....
  422688:	00f40140 fa00401f 8bea0520 8b8b8b8b     @....@.. .......
  422698:	8b8b8b8b 8b8b8b8b 0250be8b f00500ae     ..........P.....
  4226a8:	05005f00 104f00f0 4f10df00 00f00550     ._....O....OP...
  4226b8:	f005005f 2a005f00 00e40be0 b440ec07     _...._.*......@.
  4226c8:	c0df251e 00000001 2b30cc04 0057c001     .%........0+..W.
  4226d8:	c0012b93 0630cc05 0bf60fa1 000000e2     .+....0.........
	...
  4226f0:	fb7b0200 04000000 d0ffff9d ffaf0300     ..{.............
  422700:	00fdffff ffffaf00 00d0dfff b6ffff0a     ................
  422710:	0000ed10 000094af 0a00d00e 000000f1     ................
  422720:	af0000ed 0e000010 f10a00d0 fd450000     ..............E.
  422730:	10af0000 d0ffef01 00f19d17 0efcff5f     ............_...
  422740:	0010ffff ff31fdaf 0000e0ff bd030001     ......1.........
  422750:	000000a3 18500000 84888888 ddbffa05     ......P.........
  422760:	affddddd 00107fe4 e04eca00 0000104f     ..........N.O...
  422770:	effe0ec8 cf000010 ee3fe0ef 0ef8eeee     ..........?.....
  422780:	66768ff6 f86feb66 000010af 3fe08fcc     ..vff.o........?
  422790:	c8000010 65dffc0e cfee5555 ffff5fc2     .......eUU..._..
  4227a0:	572cf9ff 77770575 ffff7577 ffffff1f     ..,Wu.wwwu......
  4227b0:	2fffffff ffffffff ff0effef 01feffff     .../............
  4227c0:	11110010 feef1011 ffffff0e 2ffffffe     .............../
  4227d0:	ffffffff ff1fffff 68ffffff 88880787     ...........h....
  4227e0:	87688688 88888807 1fffff86 ffffffff     ..h.............
  4227f0:	ff2fffff dfffffff ffff0dfd 0000fdff     ../.............
  422800:	01000000 00000050 f81d0000 00000000     ....P...........
  422810:	00fddf01 1d000000 602de2ff fedf0100     ..........-`....
  422820:	00f7df20 00e2ff1d df71ff8f 080020fe      .........q.. ..
  422830:	e2fffeff 8f000000 0020feff ff080000     .......... .....
  422840:	000000e2 207d0000 00000000 00000000     ......} ........
  422850:	0b00607f 00f6efe2 ff4ff8bf 04d1ff6b     .`........O.k...
  422860:	10fdffff e1ff5f00 ffbf0000 ff0b00f6     ....._..........
  422870:	bf60ffdf f5ff14fd 4f00d1cf 001017f6     ..`........O....
  422880:	00006003 00001100 00000000 000000ff     .`..............
  422890:	ff216f00 0600f712 16ff61ff f91f60ff     .o!......a...`..
  4228a0:	9f10ff01 01e06ff1 f60e10ff ff0180af     .....o..........
  4228b0:	cffa0810 10ff0160 80affc06 0800aa00     ....`...........
  4228c0:	00d07ffb f70d0000 0000f81f 07f18f00     ................
  4228d0:	2a0091ff 9f0070ff f9ffeeff cf050000     ...*.p..........
  4228e0:	0050fdff 44020000 00000020 00000000     ..P....D .......
  4228f0:	00000000 00a0ff0a 0c000000 0000c0ff     ................
  422900:	ffdfd603 0e306dfd ffffffff ff5fe0ff     .....m0......._.
  422910:	ffffaaff f4ff1af5 a1ff4f00 00d0ff03     .........O......
  422920:	0430ff0d 0f00f0ff ff4f40ff ffbf22fb     ..0......@O.."..
  422930:	ffff2ff4 f2ffffff fffffe09 0090efff     ./..............
  422940:	e5ff5e50 00000005 00c0ff0c 04000000     P^..............
  422950:	00004077 03000000 00410310 9f000000     w@........A.....
  422960:	00f50df5 fd1b0000 00f58dff b1df0200     ................
  422970:	00f5ff2d 3ef84f00 00f5bfc2 ff55ff07     -....O.>......U.
  422980:	40fe39fe ff8fe39f f66ff5ff ffff2aac     .9.@......o..*..
  422990:	e673ffff ffff5f00 00f1ffff d7ff6f00     ..s.._.......o..
  4229a0:	00f2ff7f 90ff6f00 00f2ff0d 90ff6f00     .....o.......o..
  4229b0:	00f2ff0d 70ff4f00 00e1ff0b 33000000     .....O.p.......3
  4229c0:	00000000 b0ff0b00 00000000 00c0ff0c     ................
  4229d0:	0c000000 0000c0ff ff0c0000 000000c0     ................
  4229e0:	c0ff0c00 8f000000 f8ffffff ff2e0000     ................
  4229f0:	00e2ffff ffef0200 000020fe e2ff2d00     ......... ...-..
  422a00:	99790000 9928de82 fbffff97 ffffbf22     ..y...(....."...
  422a10:	ffffffff ffffffff faffffff ccaccfb3     ................
  422a20:	cccccccc bb0600ca 30babbbb ff4f0000     ...........0..O.
  422a30:	e1ffffff 30ef0000 fb060000 00f80900     .......0........
  422a40:	cf000000 00d04f50 2f000000 4284dfe1     ....PO...../...B
  422a50:	4b340000 fdfffff9 ffff0100 fffffffb     ..4K............
  422a60:	ffff8b98 fffffffc ffffffff fffffffc     ................
  422a70:	ffffffff ffff9ffb ffffffff 000000f6     ................
  422a80:	33000000 ff8d0100 00ef00c6 ffffff4e     ...3........N...
  422a90:	ff04dfe4 ff4c00b3 00f90eff ff8f0000     ......L.........
  422aa0:	0100c06f 8effffff de010050 0000edee     o.......P.......
  422ab0:	00000000 22222200 21000000 10ffffff     ....."""...!....
  422ac0:	fff80800 0010bcfb fcfff41e df010010     ................
  422ad0:	e8effec0 10fe8e44 ffff1afe fd00c1ff     ....D...........
  422ae0:	94bb2800 00000000 02007002 ef0200ef     .(.......p......
  422af0:	fffffffd ffffffff ffffffff ffffffff     ................
  422b00:	4734ffff 0500f0ff 050000ff 000000c0     ..4G............
  422b10:	70020000 02000000 000000ef 00f0ef02     ...p............
  422b20:	ffffff0d ffff2002 1f8ef0ff 00ffffff     ..... ..........
  422b30:	ffffffe7 ff5f3ff0 9008ffff f0ff4734     .....?_.....4G..
  422b40:	05000000 000000ff 00c00500 00000000     ................
  422b50:	00000000 07000000 00000070 05007002     ........p....p..
  422b60:	000000fa 8100f02e 0200604f dd01f0ef     ........O`......
  422b70:	ffdff007 1e32f0ff fffff680 278ef0ff     ......2........'
  422b80:	ffffb9e0 730ef0ff ffff9bf1 543ff0ff     .......s......?T
  422b90:	ffff9af0 0a89f0ff 4734d8c0 7f00f0ff     ..........4G....
  422ba0:	0000f343 f602f05f 0000b00c 0000c005     C..._...........
  422bb0:	000010bf 09000000 000000e3 02000000     ................
  422bc0:	88370010 88888888 ffffef73 feffffff     ..7.....s.......
  422bd0:	ffdf32fe f9ffffff fdff7f00 10fdffff     .2..............
  422be0:	7fa0ffcf ffffffff ff0700fa a05ff3ff     .............._.
  422bf0:	ffcf0000 00000330 00fccf00 00000000     ....0...........
  422c00:	ccccffcf ffcccccc ffffffaf 04f9ffff     ................
  422c10:	31000030 0600e01f 00e01ff9 e01ffa7f     0..1............
  422c20:	1ffaff09 faffafe0 ffffeb1f ffff1ffa     ................
  422c30:	ff1ffaff 1ffaffff faffffe6 ff5fe01f     .............._.
  422c40:	04e01ffa e01ffaff 0ffa3e00 d70200d0     .........>......
  422c50:	00000000 00000200 0c000000 000020fb     ............. ..
  422c60:	ffff0000 00000090 e6ffff0f ff000000     ................
  422c70:	30fcffff ffff0f00 0091ffff ffffffff     ...0............
  422c80:	ff0fe6ff ffffffff fffffff2 0ffdffff     ................
  422c90:	ffffffff ffff00f8 00b2ffff fdffff0f     ................
  422ca0:	ff000040 0000f7ff a1ff0f00 00000000     @...............
  422cb0:	0000406a 14000000 44012044 ffff0d42     j@......D .DB...
  422cc0:	f1ffdf10 0ff3ffff ff3fffff ffff40ff     ..........?..@..
  422cd0:	f4fffff4 4fffff0f ff40ffff fffff4ff     .......O..@.....
  422ce0:	ffff0ff4 40ffff4f fff4ffff ff0ff4ff     ....O..@........
  422cf0:	ffff4fff f4ffff40 0ff4ffff ff4fffff     .O..@.........O.
  422d00:	ffff30ff c0ff9ff3 00fcff09 44444414     .0...........DDD
  422d10:	ff0d4244 ffffffff fffffff1 3fffffff     DB.............?
  422d20:	ffffffff fffff4ff ffffffff ffffff4f     ............O...
  422d30:	fff4ffff ffffffff ffff4fff f4ffffff     .........O......
  422d40:	ffffffff ff4fffff ffffffff fffffff4     ......O.........
  422d50:	4fffffff ffffffff ff9ff3ff fcffffff     ...O............
  422d60:	00100200 e20f4200 0ffb0300 fb0430fe     .....B.......0..
  422d70:	04f4ff0f ffff0ffb ff0ffb54 0ffbfaff     ........T.......
  422d80:	fbffffff ffffff0f ffff0ffb ff0ffbd6     ................
  422d90:	0ffb14fd fb04c1ff 0400fb0f 00a00cfb     ................
  422da0:	0000fa03 00000000 00120000 00000000     ................
  422db0:	0060ff03 2e000000 0000f5ff ffef0100     ..`.............
  422dc0:	000040ff ffffff1d cf0000f3 feffffff     .@..............
  422dd0:	ffff0a20 e0ffffff ffffff0e 03f2ffff      ...............
  422de0:	99999999 88055099 88888888 ffff0f70     .....P......p...
  422df0:	f3ffffff ffffff0f 0bf4ffff ffffffff     ................
  422e00:	0000d1ff 00000000 00903f00 00fc3f00     .........?...?..
  422e10:	10fd3f00 10fd3f00 10fd3f00 10fd1f00     .?...?...?......
  422e20:	f4cf0000 cf000000 000000f4 0000f4cf     ................
  422e30:	00f4cf00 e0cf0000 a4000000 00000000     ................
  422e40:	10cd0000 fd1f0000 3f000010 000010fd     ...........?....
  422e50:	0010fd3f 10fd3f00 fd3f0000 ff080000     ?....?....?.....
  422e60:	ff080090 ff080090 ff080090 ff020090     ................
  422e70:	07000090 00000080 50040000 00000000     ...........P....
  422e80:	0060ff02 3f000000 000000f7 70ff0300     ..`....?.......p
  422e90:	00000000 0000f73f ff9a9906 ff8099c9     ....?...........
  422ea0:	ffffffff ffff3dff f2ffffff f73f1101     .....=........?.
  422eb0:	00001011 0070ff03 3f000000 000000f7     ......p....?....
  422ec0:	70ff0300 00000000 0000d30c 99996900     ...p.........i..
  422ed0:	0f989999 ffffffff ffdff3ff ffffffff     ................
  422ee0:	00000020 00000000 64560100 00000000      .........Vd....
  422ef0:	effebf03 000010f9 0310fa7f 0800e4df     ................
  422f00:	b409a0ff 4f50ff1e ff0b20ff efe1ff26     ......PO. ..&...
  422f10:	ffcf09ff bffaff63 ffff09ff 1ef6ff54     ....c.......T...
  422f20:	fbdf51ff 03b0ff09 3004e2ef 0010fc5f     .Q.........0_...
  422f30:	6a95ff2c 000090ff fddf4900 00000092     ,..j.....I......
	...
  422f48:	000020cd 00000000 00f58f00 00406614     . ...........f@.
  422f58:	ef040000 ffefffac 00000091 00a1ff1c     ................
  422f68:	0030fe4d f59f0000 f4ef31ab 05b10700     M.0......1......
  422f78:	7fe1ffff fe0f10fe f5ff2d30 0c90ff4f     ........0-..O...
  422f88:	af00e0ff 60ff5ff6 00f4ff02 fbefff06     ....._.`........
  422f98:	fd4f0000 ff3e0010 020000c0 0154e8df     ..O...>.......T.
  422fa8:	0000e3bf ffae0500 60ff0760 00000000     ........`..`....
  422fb8:	4e000000 000000f6 00000000 0000a101     ...N............
	...
  422fd0:	d03e0000 00000000 ff0c0000 00000080     ..>.............
  422fe0:	ff060000 000020ff ef000000 0000fbff     ..... ..........
  422ff0:	8f000000 00f4cffc 2f000000 d0ff00fb     .........../....
  423000:	0b000000 ff0fc0ff 04000070 ff01fdff     ........p.......
  423010:	000010ff 2fe0ffdf 0000faff 9bffff7f     ......./........
  423020:	00f3ffff b0ffff1f c0ffff0e feffff0a     ................
  423030:	ffffff24 ffffff60 ffffffff cccc06fa     $...`...........
  423040:	cccccccc 000030cb 36000000 00000000     .....0.....6....
  423050:	807f0000 0000dbdd fff8ef8d ff07b0ff     ................
  423060:	6f55fdff aff86ff4 740500e2 207e90ff     ..Uo.o.....t..~ 
  423070:	fa3f0000 00000000 50b2ef02 2e01004a     ..?........PJ...
  423080:	8ff41dfd d1ffffb0 fbffff0b 0020feff     .............. .
  423090:	12fbffcf 02000021 0000c09f 5b000000     ....!..........[
  4230a0:	07000000 000000a0 b0ff0800 08000000     ................
  4230b0:	00b0ffff 95ff0800 0800b0ff ff0590ff     ................
  4230c0:	90ff07b0 b0ff0500 0000909f 4000fd05     ...............@
  4230d0:	03000000 00204c10 0bb60000 000020fe     .....L ...... ..
  4230e0:	fe2ef0cf f4cf0020 20fe2e00 0000f4cf     .... ...... ....
  4230f0:	f4cffe2e 2e000000 0000f4ff f42e0000     ................
  423100:	00000000 00001300 30080000 00000000     ...........0....
  423110:	bf000000 bbbb08f3 0b0090bb ff39ffff     ..............9.
  423120:	00f1ffff f0cfcf8f f10a0000 942f3800     .............8/.
  423130:	0a000080 2f0000f1 00000090 0000f10a     ......./........
  423140:	0000902f 30f10a03 00902f00 f8cb1f00     /......0./......
  423150:	eb2f00f8 ff39bbbb 1f00e2ff b0ffffff     ../...9.........
  423160:	0020fd9f 00000000 00d10800 00878837     .. .........7...
  423170:	ef000000 00a0ffff ffff0000 ccccfdff     ................
  423180:	ffffffb6 ffffffff ffffffff ffffffff     ................
  423190:	ffffffff ffffffff ffffffff ffffffff     ................
  4231a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4231b0:	ffafffff ffffffff 000000f9 00000000     ................
  4231c0:	dd010000 00000010 d1ff1d00 01000000     ................
  4231d0:	10fdffdf ff1d0000 00d1ffff ffff9f00     ................
  4231e0:	0000f9ff c1ff1c01 00000010 00c0ff0c     ................
  4231f0:	0c000000 0000c0ff ff0c0000 790000c0     ...............y
  423200:	b3ff3b99 ffff9799 ff2b44b2 feffffff     .;.......D+.....
  423210:	ffffefdd ffffffff accfb3fa cccccccc     ................
  423220:	0000cacc 02000000 00000000 ff040000     ................
  423230:	000000c7 ffaf0000 000000f0 fdff1f00     ................
  423240:	00000000 c0ffff06 00000000 00f7ff08     ................
  423250:	00000000 0030ff0c 04000000 0000c0ff     ......0.........
  423260:	ef010000 4a0000f3 f8df0230 fedf0500     .......J0.......
  423270:	00fbef15 ffffef00 0000faff ffffff0b     ................
  423280:	000000f7 a2ffff7f 02000000 000085ba     ................
  423290:	04000000 00000086 faff0610 d1df0200     ................
  4232a0:	01f13cef e00efadf fadf21af f6ef9f00     .<.......!......
  4232b0:	0000fadf fbffff8d 06000000 0000fdff     ................
  4232c0:	ffef4800 6f0000f6 f6fffbff cff30e00     .H.....o........
  4232d0:	00f6ff23 04f20aee fe09f6ff ff0400fc     #...............
  4232e0:	10da08f1 00620200 00000000 00000000     ......b.........
  4232f0:	87f9ff6f ff080000 08f798ff f9ff8fa6     o...............
  423300:	a8ff9059 ccfcffff ff8ffa0f fff1ffff     Y...............
  423310:	ffffffa8 8ffa1fff f1ffffff ffffa8ff     ................
  423320:	fa1fffff ffffff8f ffa8fff1 1fffffff     ................
  423330:	ffff7ffa e3fff0ff 21222212 ffffff0f     .........""!....
  423340:	ac0000f9 50cbcccc 99490000 00959999     .......P..I.....
  423350:	ffffff0e fd00f6ff 4f222222 00c00ff6     ........"""O....
  423360:	f3ff0100 000000fc c06fff1f ff020000     ..........o.....
  423370:	fffffff6 6fffffff ffdcffff fffff6ff     .......o........
  423380:	ffff05b0 00f6ff6f fff6ff0f ff06c0ff     ....o...........
  423390:	ffff6fff f6ffffed ffffff9f 0010fdff     .o..............
  4233a0:	00000000 f0ffff01 ffff0400 ff0600d0     ................
  4233b0:	080080ff 0030ffff aaffff0a ffff0ca6     ......0.........
  4233c0:	ff0ef8ff 0be1ffff 60ffdfdd fd4f0000     ...........`..O.
  4233d0:	7f000000 000000f3 0000a0bf 0010ff00     ................
  4233e0:	00f80300 c0030000 00000000 00000020     ............ ...
  4233f0:	b5ef5504 ff000052 b0ff1ffd ffff0f00     .U..R...........
  423400:	0000fcff 3353ffff ff0f0020 57fbff97     ......S3 ......W
  423410:	aff8ff00 0ff8c6ff fcff8aff f8ffa14a     ............J...
  423420:	22e3ffaf ff8aff0f fff4ffff ffffaff8     ..."............
  423430:	8aff4fff f4ffffff ffaf5235 0040ffff     .O......5R....@.
  423440:	ffffff0a 7f0000f4 20feffff 10010000     ........... ....
  423450:	00000000 0000af00 8f010000 000030fa     .............0..
  423460:	ffffef02 bf000050 10ffffff ffff1f00     ....P...........
  423470:	0300f5ff ffffffff ff5f0070 00f9ffff     ........p._.....
  423480:	ffffff08 df00c0ff ffffffff ffff9f20     ............ ...
  423490:	0efdffff ffffffff 2202f2ff 21222222     ...........""""!
  4234a0:	ff080000 000000c0 00a20900 bb5b0000     ..............[.
  4234b0:	bbbbbbbb ffffa3bb ffffffff 0cfcfbff     ................
  4234c0:	0d1de130 0bfcfc11 0d1de030 fefffc10     0.......0.......
  4234d0:	fefeefff f1fffcef a070085a f3fffc5f     ........Z.p._...
  4234e0:	c292297b bffffc7f bfbbbbcb 0bfcfccb     {)..............
  4234f0:	0d000020 cffffc00 cfcccccc ff9ffbcc      ...............
  423500:	ffffffff 0000f6ff 00000000 00000002     ................
  423510:	05000000 0000b0df ef070000 0000d0ff     ................
  423520:	ffff1800 000070ff ffffff29 3b0000ff     .....p..)......;
  423530:	ffffffff ff0a00f8 ffffffff ff0f00f1     ................
  423540:	ffffffff 9a0400a0 ffffafaa 00000020     ............ ...
  423550:	fbff0e00 00000000 f4ff0e00 00000000     ................
  423560:	c0ff0e00 00000000 50ff0e00 00000000     ...........P....
  423570:	00fd0d00 00000000 00b30400 55350000     ..............5U
  423580:	0f000255 f4f2ffff ffffff00 ff0ff42f     U.........../...
  423590:	f3fff2ff 32ffffff ffff1f22 fff7ffff     .......2".......
  4235a0:	ffffffff ffffff8f fffff8ff 8fffffff     ................
  4235b0:	ffffffff fffffff8 ff8fffff f8ffffff     ................
  4235c0:	ffffffff ffff8fff 8af8ffff aaaaaaaa     ................
  4235d0:	00000030 00315524 03000000 ffffffaf     0...$U1.........
  4235e0:	020000c7 defeffbf 00f6ffff 10b5ff5f     ............_...
  4235f0:	ff8e0300 00d3dfb0 00000000 0018f58f     ................
  423600:	c8feae05 00600410 ffffdf02 0000f8ff     ......`.........
  423610:	95ff0c00 40ff7d34 a2020000 77000000     ....4}.@.......w
  423620:	00000000 00960200 00000000 ff0d0000     ................
  423630:	00000050 0e000000 000060ff 00000000     P........`......
  423640:	0000da05 bb5b0000 bbbbbbbb ff20babb     ......[....... .
  423650:	ffffffff 90ffffff 222212fc 0f222222     ..........""""".
  423660:	ff5ffcf7 ffffffff 5ffcfa2c ffffffff     .._.....,.._....
  423670:	fcfa21ff ffffff5f fa27ffff 666626fc     .!.._.....'..&ff
  423680:	1f666666 bbbbfefa bbbbbbbb ffafb1bf     fff.............
  423690:	ffffffff 0050ffff 00000000 00000000     ......P.........
  4236a0:	bbbbbb5b babbbbbb ffffff20 ffffffff     [....... .......
  4236b0:	12fc90ff 21222222 fcf70f00 ffffff5f     ...."""!...._...
  4236c0:	fa0c00f8 ffff5ffc 0100f8ff ff5ffcfa     ....._........_.
  4236d0:	00f8ffff 26fcfa07 63666666 fefa0f00     .......&fffc....
  4236e0:	bbbbbbbb b1bfbbbb ffffffaf ffffffff     ................
  4236f0:	00000050 00000000 bb5b0000 bbbbbbbb     P.........[.....
  423700:	ff20babb ffffffff 90ffffff 222212fc     .. ...........""
  423710:	0f000010 ff5ffcf7 0000d0ff 5ffcfa0c     ......_........_
  423720:	00d0ffff fcfa0100 d0ffff5f fa070000     ........_.......
  423730:	666626fc 0f000050 bbbbfefa bbbbbbbb     .&ffP...........
  423740:	ffafb1bf ffffffff 0050ffff 00000000     ..........P.....
  423750:	00000000 bbbbbb5b babbbbbb ffffff20     ....[....... ...
  423760:	ffffffff 12fc90ff 00000022 fcf70f00     ........".......
  423770:	0030ff5f fa0c0000 30ff5ffc 01000000     _.0......_.0....
  423780:	ff5ffcfa 00000030 26fcfa07 00001066     .._.0......&f...
  423790:	fefa0f00 bbbbbbbb b1bfbbbb ffffffaf     ................
  4237a0:	ffffffff 00000050 00000000 bb5b0000     ....P.........[.
  4237b0:	bbbbbbbb ff20babb ffffffff 90ffffff     ...... .........
  4237c0:	000000fc 0f000000 0000fcf7 00000000     ................
  4237d0:	00fcfa0c 00000000 fcfa0100 00000000     ................
  4237e0:	fa070000 000000fc 0f000000 bbbbfefa     ................
  4237f0:	bbbbbbbb ffafb1bf ffffffff 0050ffff     ..............P.
	...
  42380c:	0000b207 00000000 00fadf0a 00000000     ................
  42381c:	f53da900 04000000 00e00240 00000010     ..=.....@.......
  42382c:	600bf8af 6c000000 ffffff30 ffffffff     ...`...l0.......
  42383c:	f9aff4ff 00500c00 05406d00 c0040050     ......P..m@.P...
  42384c:	00100000 00000000 00e83ec4 00000000     .........>......
  42385c:	faef2e00 00000000 4f000000 000000fa     ...........O....
	...
  423874:	10010000 07000000 00b3ffef 8ffdaf00     ................
  423884:	ff0420ff b0ff09fd 12fdfe0a f50ef0af     . ..............
  423894:	f30e2c5d 1233ff0f ff0ff59f f6ff07f3     ],....3.........
  4238a4:	06e2ff0f fe0ff6ff f57f1324 2c7df50d     ........$.....},
  4238b4:	ff0af30d f0bf11fd 0bfeff03 7f00a0ff     ................
  4238c4:	10febffe dcac0300 00000081 00004334     ............4C..
  4238d4:	ff7f6605 ff5066f9 ffffffff 666635ff     .f...fP......5ff
  4238e4:	50666666 cccccc1c ff02c4cc ffffffff     fffP............
  4238f4:	fbf32f60 02f66d7f f5b72fff f22f60df     `/...m.../...`/.
  423904:	f65d7ffb b72fff02 2f60dff5 5d7ffbf2     ..].../...`/...]
  423914:	2fff02f6 60dff5b7 7ffbf32f ff01f66d     .../...`/...m...
  423924:	ffffffff ccbc0750 0090cccc 00000000     ....P...........
  423934:	00200100 00000000 0050ff04 02000000     .. .......P.....
  423944:	0050ffff 39040000 0000feff 39ff0400     ..P....9.......9
  423954:	0000a0ff 39ffff04 040000b0 20ffffff     .......9....... 
  423964:	ff040000 00b0ffff ffff0400 0000b0ff     ................
  423974:	ffffff04 040000b0 b0ffffff bf000000     ................
  423984:	00b0ffff ff0d0000 0000b0ff ffff0000     ................
  423994:	000000b0 60a80900 00000000 17000000     .......`........
  4239a4:	88888888 02004087 ffffffef 00f4ffff     .....@..........
  4239b4:	cfffff3e f7ffcfff f9ffef03 ff09f808     >...............
  4239c4:	ffff3ef8 2e4020fe ffdff8ff 01e1ffff     .>... @.........
  4239d4:	9ff8ffef 80ffffff f8ff8f00 f9ffff09     ................
  4239e4:	ff09c202 ff9f00f8 4efe4efe 0900f8ff     .........N.N....
  4239f4:	ffffffff 00f7ffff ffff8f00 c1ffffff     ................
  423a04:	00000000 ef030000 03e2ffff bfcefbfb     ................
  423a14:	031dffa4 f1fffaa1 af1f3ad0 ffffffff     .........:......
  423a24:	fffffffa ffafffff faffffff ffffffff     ................
  423a34:	ffffafff fffaffff ffffffff ffffffaf     ................
  423a44:	fffffaff adffffff ffffffff aaaa29f8     .............)..
  423a54:	0000a8aa 00000000 00000300 00000000     ................
  423a64:	0800f104 01000020 f70b10ff 2f000000     .... ........../
  423a74:	94ff0cf1 ff454444 ffffff1b f1ffffff     ....DDE.........
  423a84:	ffffff8f 00fdffff 0000f77f 00000000     ................
  423a94:	0000606f 00000000 00000030 00000000     o`......0.......

00423aa4 <kern_class_values>:
  423aa4:	00000100 00000000 00000100 00000002     ................
  423ab4:	00000200 00000000 00000000 00000000     ................
  423ac4:	00010000 00000000 00000000 00000000     ................
  423ad4:	000a0100 0000fb06 f3f40000 04050b02     ................
  423ae4:	010b02f7 00070209 00000000 00000000     ................
  423af4:	020d0000 000000fe 00000000 00000000     ................
  423b04:	f9000400 00000000 0404fc00 00fe0000     ................
  423b14:	fe0002fe fcfffe00 00000000 fd0000fe     ................
  423b24:	fe0000fd 0000fc00 00000000 fe000000     ................
  423b34:	00fd00fe 00e500fa 0400fc00 fc000007     ................
  423b44:	04070202 000004fc 000000f3 00000000     ................
  423b54:	00000000 000000f8 00000000 00000000     ................
  423b64:	fa000000 f700f5fd 000000fe 00090000     ................
  423b74:	01fffef9 0000fc00 0000effe 00000000     ................
  423b84:	00000000 09feee00 00000000 00000000     ................
  423b94:	00000000 000000f7 00000000 07000000     ................
  423ba4:	00000200 000000fc 00000000 00000000     ................
  423bb4:	00000000 02090000 00000001 00000000     ................
	...
  423be4:	000000f8 00000000 00000000 00000000     ................
  423bf4:	00000000 02000000 fe070204 fe040000     ................
  423c04:	0602e1f9 00fd0004 00070008 00eb0007     ................
  423c14:	070007fd 000204fe 00fe0100 0012fc00     ................
  423c24:	00070012 07040309 f8000000 00000000     ................
  423c34:	0200fe01 02fcfdfc 0000fe00 0000f700     ................
	...
  423c4c:	0000f100 00000000 00000000 00000000     ................
  423c5c:	00f40100 000000f2 1600fe00 0202fdfd     ................
  423c6c:	02fd00fe 00f40000 00000000 00000000     ................
  423c7c:	00ea0000 00000002 00000000 00000000     ................
  423c8c:	0d00f200 00f80000 eaf10007 0007fcf1     ................
  423c9c:	0300f100 00fd00fb 00000000 00000000     ................
  423cac:	06000000 0000e507 00000000 00000000     ................
  423cbc:	000b0000 00000002 02020000 ff00fcfd     ................
  423ccc:	0000feff 000000fe 00fe00fc fa00fcfb     ................
  423cdc:	00fcf9f9 00fc00fc fe000000 00020000     ................
  423cec:	0100fe02 02000000 000000fe ff0202fe     ................
  423cfc:	fc000000 0000ff00 01000000 00fe0300     ................
  423d0c:	00fc00fd 0700fe00 00fe0000 00000000     ................
  423d1c:	fefe01ff 00fe0000 000000fe 00000000     ................
  423d2c:	ffff0000 00fdfe00 00000000 fe000001     ................
  423d3c:	fefefe00 00000000 00000000 0000ff00     ................
  423d4c:	fdfe0000 f900fd00 0004f9fe 0402fc00     ................
  423d5c:	fffa0006 f5ff00fd f402fe02 01000002     ................
  423d6c:	fef400f4 f500feed 00060400 00000003     ................
  423d7c:	fc000000 00f900fd 00fe0000 00fe0000     ................
  423d8c:	00000000 ff00ffff 000000fd 00000000     ................
  423d9c:	fe00fefe 0000fefd 000000fe 00000000     ................
  423dac:	00000000 fd00fefe fc00fe00 fd000002     ................
  423dbc:	00020201 00000000 0000fe00 02000000     ................
  423dcc:	00fe0000 00fdfefe 00000000 00020000     ................
  423ddc:	000000fe 00fdfe00 fe0700fc 0000f901     ................
  423dec:	f7f4f506 fe0002fc fc00fcf1 fc03fc00     ................
  423dfc:	00fa00f2 02ff0100 000200fe f500f7f9     ................
  423e0c:	f9fbfbfb fc00fafd 010001fa 0000fe00     ................
  423e1c:	02000200 00000000 00000000 fe000000     ................
  423e2c:	ff00ff00 fbfc00fe f900fffb 00000000     ................
  423e3c:	00fe0000 01000000 000000ff 00000002     ................
  423e4c:	00000000 00000b00 00000000 00000002     ................
  423e5c:	000000fe 00000000 00000000 000200fc     ................
	...
  423e78:	000000fe 000000fc 00f9f500 f5fd0000     ................
  423e88:	02fe0000 0000fa00 00000000 00000000     ................
  423e98:	fc0000fc 00000000 00000000 00000000     ................
  423ea8:	00fc0002 03000000 fcfc0200 fdfefe00     ................
  423eb8:	00000000 00f90000 fefd00fe f9fafb00     ................
  423ec8:	00fc00fe 000000f9 00001200 fd000001     ................
  423ed8:	f6000200 00000000 07fceb00 00f7fe07     ................
  423ee8:	f500fd02 f002fdff 030003fe f9f8fdf8     ................
  423ef8:	f30000f7 00000d00 000000ff fafeffff     ................
  423f08:	00eb00f9 00000000 00000000 00000001     ................
	...
  423f24:	ff00fe00 0000fdfe 00fe00fc 00000000     ................
	...
  423f3c:	00ff0000 040000fc fb0003ff fafffe02     ................
  423f4c:	fefd00fe fcfd00fe fffe0000 00fdfcfe     ................
  423f5c:	0200fe00 00fb00fe 00fc0000 fcfc00fc     ................
  423f6c:	00000002 00000000 0002fc00 fdfe00fd     ................
  423f7c:	fefefef9 fffdfeff 00000000 fefefe00     ................
  423f8c:	00000000 fe00fe03 fe000000 fdfefefd     ................
  423f9c:	090200fe 00fa00ff fe0004fe 0003fdf7     ................
  423fac:	02fcf500 fe0002fc fd00f9fe fc000001     ................
  423fbc:	02000000 00fcfc02 fefdfefc 01fc00fe     ................
  423fcc:	0007fcfc 00000000 00000000 00000002     ................
	...
  423ff0:	000000fc 00000000 00000000 00000000     ................
	...
  42401c:	000000fe 00000000 00000000 00000000     ................
	...
  424038:	fefe0000 00000000 00000000 00000000     ................
  424048:	fd0000fd fefe0000 00000000 000000fe     ................
  424058:	0000ff00 fe000000 00000000 00fc00fd     ................
  424068:	00f90000 0004fb02 0000f5fe f700fefb     ................
  424078:	0000fafa f7f7fef6 00fa00f5 00fd0f02     ................
  424088:	fefffefb f8fcfafc 00fefbf7 0100fe00     ................
  424098:	fef00000 f8fb0507 00f90100 04fefef5     ................
  4240a8:	0001fdeb f4fdf100 0000f0fe 010d00f0     ................
  4240b8:	0000fe00 feff0000 f100fef7 00000000     ................
  4240c8:	00fe00f9 00f5faff f9fdff00 00fe00fe     ................
  4240d8:	f6000000 fef9f9fe fcfefafc f9fefc00     ................
  4240e8:	fcfd00fd 0100fcfe 00f9fe00 00fc0004     ................
  4240f8:	03000000 09fc0200 fdfefe00 00000000     ................
  424108:	00f90000 fefd00fe f9fafb00 02fc00fe     ................
  424118:	00000009 00001200 fd000001 00000200     ................
	...
  424134:	0000fcfe ff000000 fe000000 fc0000fe     ................
  424144:	fc0000fe 00ff0400 00000000 00000100     ................
  424154:	04030000 f900fe02 f90700fc 09fcfcf9     ................
  424164:	feed0204 fe00fe04 00f8fe02 fefd02fe     ................
  424174:	0000fef9 fa000407 06fdf400 fd01f7fd     ................
  424184:	09fef9f9 00fd0002 070200fa faf7f8fb     ................
  424194:	f0010007 fefc02fe f8fb00fb 00fefdfd     ................
  4241a4:	fefbfb00 fe050700 fdf400f4 fff3f800     ................
  4241b4:	faf9fcf9 fd000006 00fefc00 0400fcfe     ................
  4241c4:	000002f9 fbfe00f4 faf9fefc f900fbf9     ................
  4241d4:	f9fcfbfe 010000fe f900fc0b fcfe00fe     ................
  4241e4:	f7fafafb 0004fcfd fdf500fd f8f90401     ................
  4241f4:	fe07f9fc 04fceb01 00f8fcfb fefdf7f9     ................
  424204:	f9fbfefe 070000ff 00f1fe06 f705fbf3     ................
  424214:	f7f8fcf1 0004f9f5 fd000000 fd020000     ................
  424224:	04fc0204 fff90000 0100ff00 0000fe01     ................
  424234:	00000000 000000fe 00070200 0000fd00     ................
  424244:	fefe0000 000000fd 00000201 00020000     ................
  424254:	000900fe fd010104 00000400 00000200     ................
	...
  42426c:	06000700 00000000 00000000 00000000     ................
  42427c:	00f30000 070004fe 03160000 0202fcfc     ................
  42428c:	00f501fe 00f30b00 00000000 00000000     ................
  42429c:	09f10000 0000001f 00000000 00000000     ................
  4242ac:	0000f300 00000000 00000000 00000000     ................
	...
  4242c8:	fc0000fc 000000fe 00000000 00000000     ................
	...
  4242e0:	00fa00fe 00000100 fefc1d02 02fa0607     ................
  4242f0:	02020000 000000fd 00000000 00000000     ................
  424300:	000006e3 00000000 00000000 00000000     ................
  424310:	fa000000 fa000000 00000000 0000fffb     ................
  424320:	fd00fb00 0000f500 00000000 00000000     ................
  424330:	0000f100 00010000 00000000 0000fe00     ................
  424340:	00fd00fc 000000fa 00fd02fc fbfefa00     ................
  424350:	00fa0000 00f500fe ee0000fe f8fef7fc     ................
  424360:	00f10000 0000fffa 00000000 fcfd0000     ................
  424370:	0000fcfe 00fb0000 04fe03fb fefbfe00     ................
  424380:	fd00fcfc fa02feff 000000ff 00fdfeec     ................
  424390:	f5fe00fb fe0000fe 000000fe fe000200     ................
  4243a0:	0004fefc 00000000 00000000 00000000     ................
	...
  4243cc:	00030000 00000000 fe00fb00 fc000000     ................
  4243dc:	00000002 00fcfefa fe00fa00 0000f500     ................
  4243ec:	00ea0000 00f5f8fc fe00f100 000000fd     ................
  4243fc:	00000000 fffdfe00 000001fd 0700fd04     ................
  42440c:	f9fefe0b 05040b03 030903fa 00060506     ................
	...
  424424:	0b0e0000 fe00fefc 00120a12 00020000     ................
  424434:	00000800 000000fc 00000000 00fe0000     ................
  424444:	00000000 03000000 00000000 f7fefded     ................
  424454:	f10000f5 00000000 00000000 00000000     ................
  424464:	00000000 0000fc00 00000000 fe000000     ................
	...
  42447c:	00000003 fefded00 0000f5f7 000000f7     ................
	...
  42449c:	000000fe fe0002fb f9020402 02fe0000     ................
  4244ac:	00000200 00fa0000 00fcfefe 0e00f7fe     ................
  4244bc:	fefb00fe 00fcfe00 fdfcfafe fc000000     ................
	...
  4244d4:	0000fe00 00000000 00030000 ed000000     ................
  4244e4:	f5f7fefd 00f10000 00000000 00000b00     ................
	...
  4244fc:	fdf900fc fefe07fe 01ff01f7 0500fafe     ................
  42450c:	02010200 00fdf7fb f7fafcf7 fcfc00f7     ................
  42451c:	fefefdfd fe00fefd 030003ff 000700fe     ................
	...
  424534:	fe000000 0000fefe 00ff00fa 000000fc     ................
	...
  42454c:	000000f3 00000000 00000000 fd00fefe     ................
  42455c:	00000000 fc0000fe fc0002fe fa00fefc     ................
  42456c:	fdfefbfe 0000fc00 00000000 00000000     ................
  42457c:	0700f100 00fc0000 fd000000 0000fe00     ................
  42458c:	fe0000ff 0000fb00 f9f9fd09 00020202     ................
  42459c:	020302fa fe070207 f70000fa faf90000     ................
  4245ac:	00fc0000 fd00fcfd fe00fd00 f9fe0003     ................
  4245bc:	000008fe 00fc00fe 00fb0300 0002fe02     ................
  4245cc:	fe00f900 02fe00ff 000000fe 00fbfdf7     ................
  4245dc:	f50000f9 00fe0800 000100fc f9fe00fe     ................
  4245ec:	0002fe00 fe000000 fd020000 fd000001     ................
  4245fc:	00fd00fe 00000000 00000000 00000000     ................
  42460c:	00000000 000500f2 0000fe00 00000000     ................
  42461c:	0000fefe 05000400 00000000 01f3f200     ................
  42462c:	f704070a 08000902 00000400 00000000     ................
  42463c:	00000000 00000c00 00000000 00000000     ................
	...

00424654 <kern_classes>:
  424654:	00423aa4 00424664 00424700 0000313d     .:B.dFB..GB.=1..

00424664 <kern_left_class_mapping>:
  424664:	02010000 05040300 08070602 0a090a09     ................
  424674:	0d000c0b 11100f0e 140c1312 00000014     ................
  424684:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  424694:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  4246a4:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  4246b4:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  4246c4:	0000093d 00000000 00000000 00000000     =...............
	...

00424700 <kern_right_class_mapping>:
  424700:	02010000 05040300 08070602 0a090a09     ................
  424710:	0e0d0c0b 0c11100f 15141312 00000015     ................
  424720:	19181716 19191917 1a191917 19191919     ................
  424730:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  424740:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  424750:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  424760:	00000931 00000000 00000000 00000000     1...............
	...

0042479c <unicode_list_1>:
  42479c:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  4247ac:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  4247bc:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
  4247cc:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
  4247dc:	efc9efc8 efe3efcb f014efe5 f017f015     ................
  4247ec:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
  4247fc:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
  42480c:	f712f4aa 0000f7f2 0000ffff              ............

00424818 <lv_anim_path_def>:
  424818:	00414379 00000000 0000ffff              yCA.........

00424824 <hex.5775>:
  424824:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  424834:	00000000                                ....

00424838 <sin0_90_table>:
  424838:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
  424848:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
  424858:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
  424868:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
  424878:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
  424888:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
  424898:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
  4248a8:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
  4248b8:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
  4248c8:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
  4248d8:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
  4248e8:	7ffa7feb 00007fff 2074754f 6d20666f     ........Out of m
  4248f8:	726f6d65 63202c79 74276e61 6c6c6120     emory, can't all
  424908:	7461636f 20612065 2077656e 66667562     ocate a new buff
  424918:	28207265 72636e69 65736165 756f7920     er (increase you
  424928:	564c2072 4d454d5f 5a49535f 65682f45     r LV_MEM_SIZE/he
  424938:	73207061 29657a69 00000000 66206f4e     ap size)....No f
  424948:	20656572 66667562 202e7265 72636e49     ree buffer. Incr
  424958:	65736165 5f564c20 5f4d454d 5f465542     ease LV_MEM_BUF_
  424968:	5f58414d 2e4d554e 00000000 3b2e2c20     MAX_NUM..... ,.;
  424978:	005f2d3a 0000ffff 00001084 000018c6     :-_.............
  424988:	008c80ef 0001c200 000000c0 00000800     ................
  424998:	00000000                                ....

0042499c <ecg>:
  42499c:	0000050a 00000508 00000506 00000505     ................
  4249ac:	00000503 00000501 00000500 000004fe     ................
  4249bc:	000004fc 000004fb 000004f9 000004f8     ................
  4249cc:	000004f6 000004f5 000004f3 000004f2     ................
  4249dc:	000004f1 000004ef 000004ee 000004ed     ................
  4249ec:	000004eb 000004ea 000004e9 000004e7     ................
  4249fc:	000004e6 000004e5 000004e3 000004e2     ................
  424a0c:	000004e1 000004e0 000004df 000004de     ................
  424a1c:	000004dd 000004dc 000004db 000004da     ................
  424a2c:	000004d9 000004d8 000004d8 000004d7     ................
  424a3c:	000004d7 000004d6 000004d6 000004d5     ................
  424a4c:	000004d5 000004d5 000004d4 000004d4     ................
  424a5c:	000004d4 000004d4 000004d3 000004d3     ................
  424a6c:	000004d3 000004d3 000004d2 000004d2     ................
  424a7c:	000004d1 000004d1 000004d0 000004d0     ................
  424a8c:	000004cf 000004ce 000004cd 000004cc     ................
  424a9c:	000004cb 000004ca 000004c8 000004c7     ................
  424aac:	000004c6 000004c4 000004c3 000004c2     ................
  424abc:	000004c1 000004bf 000004be 000004bd     ................
  424acc:	000004bc 000004bb 000004ba 000004b9     ................
  424adc:	000004b8 000004b8 000004b7 000004b7     ................
  424aec:	000004b6 000004b6 000004b6 000004b6     ................
  424afc:	000004b6 000004b6 000004b6 000004b6     ................
  424b0c:	000004b6 000004b6 000004b6 000004b6     ................
  424b1c:	000004b6 000004b5 000004b5 000004b5     ................
  424b2c:	000004b5 000004b5 000004b4 000004b4     ................
  424b3c:	000004b3 000004b2 000004b2 000004b1     ................
  424b4c:	000004b0 000004af 000004ae 000004ad     ................
  424b5c:	000004ad 000004ab 000004aa 000004a9     ................
  424b6c:	000004a8 000004a7 000004a6 000004a5     ................
  424b7c:	000004a3 000004a2 000004a1 000004a0     ................
  424b8c:	0000049f 0000049d 0000049c 0000049b     ................
  424b9c:	0000049a 00000498 00000497 00000496     ................
  424bac:	00000495 00000493 00000492 00000491     ................
  424bbc:	00000490 0000048e 0000048d 0000048c     ................
  424bcc:	0000048b 0000048a 00000489 00000487     ................
  424bdc:	00000486 00000485 00000484 00000483     ................
  424bec:	00000482 00000480 0000047f 0000047e     ............~...
  424bfc:	0000047c 0000047b 00000479 00000478     |...{...y...x...
  424c0c:	00000476 00000474 00000472 00000470     v...t...r...p...
  424c1c:	0000046e 0000046c 00000469 00000467     n...l...i...g...
  424c2c:	00000464 00000462 0000045f 0000045c     d...b..._...\...
  424c3c:	00000459 00000456 00000453 00000450     Y...V...S...P...
  424c4c:	0000044d 00000449 00000446 00000443     M...I...F...C...
  424c5c:	0000043f 0000043c 00000438 00000435     ?...<...8...5...
  424c6c:	00000431 0000042e 0000042a 00000427     1.......*...'...
  424c7c:	00000423 00000420 0000041c 00000418     #... ...........
  424c8c:	00000415 00000411 0000040d 00000409     ................
  424c9c:	00000405 00000401 000003fd 000003f9     ................
  424cac:	000003f5 000003f1 000003ec 000003e8     ................
  424cbc:	000003e4 000003df 000003da 000003d6     ................
  424ccc:	000003d1 000003cc 000003c7 000003c2     ................
  424cdc:	000003bd 000003b8 000003b3 000003ad     ................
  424cec:	000003a8 000003a2 0000039d 00000397     ................
  424cfc:	00000391 0000038b 00000385 0000037f     ................
  424d0c:	00000379 00000373 0000036d 00000366     y...s...m...f...
  424d1c:	00000360 00000359 00000353 0000034c     `...Y...S...L...
  424d2c:	00000346 0000033f 00000339 00000332     F...?...9...2...
  424d3c:	0000032b 00000325 0000031e 00000318     +...%...........
  424d4c:	00000311 0000030b 00000305 000002fe     ................
  424d5c:	000002f8 000002f2 000002ec 000002e6     ................
  424d6c:	000002e1 000002db 000002d5 000002d0     ................
  424d7c:	000002ca 000002c5 000002bf 000002ba     ................
  424d8c:	000002b5 000002af 000002aa 000002a5     ................
  424d9c:	000002a0 0000029a 00000295 00000290     ................
  424dac:	0000028a 00000285 00000280 0000027a     ............z...
  424dbc:	00000275 00000270 0000026a 00000265     u...p...j...e...
  424dcc:	0000025f 0000025a 00000254 0000024e     _...Z...T...N...
  424ddc:	00000249 00000243 0000023d 00000237     I...C...=...7...
  424dec:	00000232 0000022c 00000226 00000220     2...,...&... ...
  424dfc:	0000021a 00000214 0000020e 00000208     ................
  424e0c:	00000202 000001fc 000001f6 000001ef     ................
  424e1c:	000001e9 000001e3 000001dd 000001d7     ................
  424e2c:	000001d0 000001ca 000001c4 000001be     ................
  424e3c:	000001b8 000001b2 000001ab 000001a5     ................
  424e4c:	0000019f 00000199 00000193 0000018d     ................
  424e5c:	00000187 00000182 0000017c 00000176     ........|...v...
  424e6c:	00000170 0000016b 00000165 00000160     p...k...e...`...
  424e7c:	0000015b 00000155 00000150 0000014b     [...U...P...K...
  424e8c:	00000146 00000142 0000013d 00000138     F...B...=...8...
  424e9c:	00000134 00000130 0000012c 00000128     4...0...,...(...
  424eac:	00000124 00000120 0000011c 00000119     $... ...........
  424ebc:	00000115 00000112 0000010e 0000010a     ................
  424ecc:	00000107 00000103 00000100 000000fc     ................
  424edc:	000000f8 000000f4 000000f0 000000ec     ................
  424eec:	000000e8 000000e3 000000df 000000da     ................
  424efc:	000000d5 000000d0 000000cb 000000c6     ................
  424f0c:	000000c0 000000bb 000000b6 000000b0     ................
  424f1c:	000000ab 000000a6 000000a1 0000009c     ................
  424f2c:	00000097 00000093 0000008e 0000008a     ................
  424f3c:	00000086 00000082 0000007e 0000007b     ........~...{...
  424f4c:	00000078 00000075 00000073 00000070     x...u...s...p...
  424f5c:	0000006e 0000006c 0000006a 00000068     n...l...j...h...
  424f6c:	00000066 00000064 00000062 00000060     f...d...b...`...
  424f7c:	0000005e 0000005d 0000005b 00000059     ^...]...[...Y...
  424f8c:	00000057 00000055 00000052 00000050     W...U...R...P...
  424f9c:	0000004e 0000004b 00000048 00000046     N...K...H...F...
  424fac:	00000043 00000040 0000003d 0000003b     C...@...=...;...
  424fbc:	00000038 00000035 00000032 00000030     8...5...2...0...
  424fcc:	0000002d 0000002b 00000029 00000026     -...+...)...&...
  424fdc:	00000024 00000023 00000021 0000001f     $...#...!.......
  424fec:	0000001e 0000001d 0000001c 0000001b     ................
  424ffc:	0000001a 00000019 00000019 00000018     ................
  42500c:	00000017 00000017 00000016 00000016     ................
  42501c:	00000015 00000015 00000014 00000013     ................
  42502c:	00000012 00000012 00000011 0000000f     ................
  42503c:	0000000e 0000000d 0000000c 0000000a     ................
  42504c:	00000009 00000007 00000006 00000005     ................
  42505c:	00000004 00000003 00000002 00000001     ................
	...
  425084:	00000001 00000002 00000004 00000005     ................
  425094:	00000007 00000009 0000000b 0000000e     ................
  4250a4:	00000010 00000013 00000016 00000019     ................
  4250b4:	0000001b 0000001e 00000021 00000024     ........!...$...
  4250c4:	00000027 0000002a 0000002c 0000002f     '...*...,.../...
  4250d4:	00000031 00000033 00000036 00000038     1...3...6...8...
  4250e4:	00000039 0000003b 0000003d 0000003f     9...;...=...?...
  4250f4:	00000040 00000042 00000043 00000045     @...B...C...E...
  425104:	00000046 00000048 0000004a 0000004b     F...H...J...K...
  425114:	0000004d 0000004f 00000051 00000053     M...O...Q...S...
  425124:	00000056 00000058 0000005b 0000005d     V...X...[...]...
  425134:	00000060 00000063 00000066 00000069     `...c...f...i...
  425144:	0000006c 00000070 00000073 00000076     l...p...s...v...
  425154:	00000079 0000007c 00000080 00000083     y...|...........
  425164:	00000086 00000089 0000008c 0000008f     ................
  425174:	00000091 00000094 00000097 00000099     ................
  425184:	0000009b 0000009e 000000a0 000000a2     ................
  425194:	000000a4 000000a6 000000a8 000000aa     ................
  4251a4:	000000ac 000000ae 000000b0 000000b3     ................
  4251b4:	000000b5 000000b7 000000ba 000000bc     ................
  4251c4:	000000bf 000000c1 000000c4 000000c7     ................
  4251d4:	000000ca 000000cd 000000d0 000000d3     ................
  4251e4:	000000d7 000000da 000000dd 000000e1     ................
  4251f4:	000000e4 000000e8 000000eb 000000ef     ................
  425204:	000000f2 000000f6 000000f9 000000fc     ................
  425214:	00000100 00000103 00000106 00000109     ................
  425224:	0000010d 00000110 00000113 00000116     ................
  425234:	00000119 0000011c 00000120 00000123     ........ ...#...
  425244:	00000126 0000012a 0000012d 00000130     &...*...-...0...
  425254:	00000134 00000138 0000013b 0000013f     4...8...;...?...
  425264:	00000143 00000147 0000014b 0000014f     C...G...K...O...
  425274:	00000154 00000158 0000015d 00000161     T...X...]...a...
  425284:	00000166 0000016b 0000016f 00000174     f...k...o...t...
  425294:	00000179 0000017d 00000182 00000187     y...}...........
  4252a4:	0000018b 00000190 00000195 00000199     ................
  4252b4:	0000019e 000001a2 000001a6 000001aa     ................
  4252c4:	000001ae 000001b3 000001b7 000001bb     ................
  4252d4:	000001bf 000001c3 000001c7 000001cb     ................
  4252e4:	000001cf 000001d3 000001d7 000001db     ................
  4252f4:	000001df 000001e3 000001e8 000001ec     ................
  425304:	000001f0 000001f5 000001fa 000001ff     ................
  425314:	00000203 00000208 0000020d 00000212     ................
  425324:	00000217 0000021d 00000222 00000227     ........"...'...
  425334:	0000022c 00000231 00000236 0000023c     ,...1...6...<...
  425344:	00000241 00000246 0000024b 00000250     A...F...K...P...
  425354:	00000254 00000259 0000025e 00000262     T...Y...^...b...
  425364:	00000267 0000026b 00000270 00000274     g...k...p...t...
  425374:	00000278 0000027d 00000281 00000285     x...}...........
  425384:	00000289 0000028e 00000292 00000296     ................
  425394:	0000029a 0000029f 000002a3 000002a7     ................
  4253a4:	000002ac 000002b0 000002b5 000002b9     ................
  4253b4:	000002be 000002c3 000002c7 000002cc     ................
  4253c4:	000002d1 000002d6 000002db 000002e0     ................
  4253d4:	000002e5 000002ea 000002ef 000002f4     ................
  4253e4:	000002f9 000002fe 00000303 00000309     ................
  4253f4:	0000030e 00000313 00000318 0000031d     ................
  425404:	00000323 00000328 0000032d 00000333     #...(...-...3...
  425414:	00000338 0000033d 00000343 00000348     8...=...C...H...
  425424:	0000034d 00000353 00000358 0000035d     M...S...X...]...
  425434:	00000363 00000368 0000036e 00000373     c...h...n...s...
  425444:	00000379 0000037e 00000384 00000389     y...~...........
  425454:	0000038f 00000394 0000039a 0000039f     ................
  425464:	000003a5 000003aa 000003b0 000003b5     ................
  425474:	000003bb 000003c0 000003c6 000003cb     ................
  425484:	000003d1 000003d6 000003dc 000003e1     ................
  425494:	000003e6 000003ec 000003f1 000003f7     ................
  4254a4:	000003fc 00000401 00000407 0000040c     ................
  4254b4:	00000411 00000416 0000041c 00000421     ............!...
  4254c4:	00000426 0000042c 00000431 00000436     &...,...1...6...
  4254d4:	0000043c 00000441 00000446 0000044c     <...A...F...L...
  4254e4:	00000451 00000457 0000045c 00000462     Q...W...\...b...
  4254f4:	00000467 0000046d 00000472 00000478     g...m...r...x...
  425504:	0000047e 00000483 00000489 0000048f     ~...............
  425514:	00000494 0000049a 000004a0 000004a6     ................
  425524:	000004ab 000004b1 000004b7 000004bd     ................
  425534:	000004c3 000004c8 000004ce 000004d4     ................
  425544:	000004da 000004df 000004e5 000004eb     ................
  425554:	000004f1 000004f7 000004fc 00000502     ................
  425564:	00000508 0000050e 00000514 0000051a     ................
  425574:	00000520 00000526 0000052c 00000532      ...&...,...2...
  425584:	00000538 0000053e 00000544 0000054b     8...>...D...K...
  425594:	00000551 00000557 0000055d 00000564     Q...W...]...d...
  4255a4:	0000056a 00000571 00000577 0000057e     j...q...w...~...
  4255b4:	00000584 0000058b 00000592 00000598     ................
  4255c4:	0000059f 000005a6 000005ac 000005b3     ................
  4255d4:	000005ba 000005c1 000005c8 000005cf     ................
  4255e4:	000005d6 000005dd 000005e4 000005ec     ................
  4255f4:	000005f3 000005fa 00000601 00000609     ................
  425604:	00000610 00000617 0000061f 00000626     ............&...
  425614:	0000062e 00000635 0000063d 00000644     ....5...=...D...
  425624:	0000064c 00000653 0000065b 00000663     L...S...[...c...
  425634:	0000066a 00000672 0000067a 00000681     j...r...z.......
  425644:	00000689 00000691 00000699 000006a1     ................
  425654:	000006a9 000006b1 000006b9 000006c1     ................
  425664:	000006c9 000006d1 000006d9 000006e1     ................
  425674:	000006ea 000006f2 000006fb 00000703     ................
  425684:	0000070c 00000715 0000071d 00000726     ............&...
  425694:	0000072f 00000738 00000740 00000749     /...8...@...I...
  4256a4:	00000752 0000075b 00000764 0000076d     R...[...d...m...
  4256b4:	00000775 0000077e 00000787 00000790     u...~...........
  4256c4:	00000798 000007a1 000007aa 000007b2     ................
  4256d4:	000007bb 000007c3 000007cc 000007d4     ................
  4256e4:	000007dc 000007e5 000007ed 000007f6     ................
  4256f4:	000007fe 00000806 0000080f 00000817     ................
  425704:	00000820 00000829 00000831 0000083a      ...)...1...:...
  425714:	00000843 0000084c 00000855 0000085e     C...L...U...^...
  425724:	00000867 00000870 00000879 00000883     g...p...y.......
  425734:	0000088c 00000895 0000089e 000008a7     ................
  425744:	000008b0 000008b9 000008c2 000008cb     ................
  425754:	000008d3 000008dc 000008e4 000008ec     ................
  425764:	000008f4 000008fc 00000903 0000090a     ................
  425774:	00000911 00000918 0000091f 00000925     ............%...
  425784:	0000092b 00000931 00000937 0000093d     +...1...7...=...
  425794:	00000943 00000949 0000094e 00000954     C...I...N...T...
  4257a4:	00000959 0000095f 00000964 0000096a     Y..._...d...j...
  4257b4:	0000096f 00000974 0000097a 0000097f     o...t...z.......
  4257c4:	00000985 0000098b 00000990 00000996     ................
  4257d4:	0000099b 000009a1 000009a6 000009ac     ................
  4257e4:	000009b1 000009b7 000009bc 000009c1     ................
  4257f4:	000009c6 000009cb 000009cf 000009d4     ................
  425804:	000009d8 000009dc 000009e0 000009e4     ................
  425814:	000009e8 000009eb 000009ee 000009f1     ................
  425824:	000009f4 000009f7 000009f9 000009fb     ................
  425834:	000009fe 00000a00 00000a02 00000a03     ................
  425844:	00000a05 00000a07 00000a08 00000a0a     ................
  425854:	00000a0b 00000a0c 00000a0d 00000a0e     ................
  425864:	00000a0f 00000a10 00000a11 00000a12     ................
  425874:	00000a13 00000a14 00000a14 00000a15     ................
  425884:	00000a16 00000a16 00000a16 00000a17     ................
  425894:	00000a17 00000a17 00000a17 00000a17     ................
  4258a4:	00000a16 00000a16 00000a16 00000a15     ................
  4258b4:	00000a15 00000a14 00000a13 00000a12     ................
  4258c4:	00000a11 00000a10 00000a0f 00000a0e     ................
  4258d4:	00000a0c 00000a0b 00000a09 00000a08     ................
  4258e4:	00000a06 00000a04 00000a02 00000a01     ................
  4258f4:	000009ff 000009fc 000009fa 000009f8     ................
  425904:	000009f6 000009f4 000009f1 000009ef     ................
  425914:	000009ec 000009ea 000009e7 000009e5     ................
  425924:	000009e2 000009e0 000009dd 000009db     ................
  425934:	000009d8 000009d6 000009d3 000009d1     ................
  425944:	000009ce 000009cc 000009c9 000009c7     ................
  425954:	000009c4 000009c2 000009c0 000009be     ................
  425964:	000009bc 000009b9 000009b7 000009b5     ................
  425974:	000009b3 000009b1 000009af 000009ad     ................
  425984:	000009ab 000009a9 000009a7 000009a5     ................
  425994:	000009a3 000009a1 0000099f 0000099d     ................
  4259a4:	0000099b 00000999 00000997 00000995     ................
  4259b4:	00000993 00000991 0000098f 0000098d     ................
  4259c4:	0000098b 00000989 00000987 00000985     ................
  4259d4:	00000983 00000981 0000097f 0000097d     ............}...
  4259e4:	0000097b 00000979 00000977 00000975     {...y...w...u...
  4259f4:	00000973 00000971 0000096f 0000096d     s...q...o...m...
  425a04:	0000096b 00000969 00000967 00000965     k...i...g...e...
  425a14:	00000963 00000961 0000095f 0000095d     c...a..._...]...
  425a24:	0000095c 0000095a 00000958 00000956     \...Z...X...V...
  425a34:	00000955 00000953 00000952 00000950     U...S...R...P...
  425a44:	0000094f 0000094d 0000094c 0000094a     O...M...L...J...
  425a54:	00000949 00000948 00000947 00000946     I...H...G...F...
  425a64:	00000945 00000943 00000942 00000941     E...C...B...A...
  425a74:	00000941 00000940 0000093f 0000093e     A...@...?...>...
  425a84:	0000093e 0000093d 0000093d 0000093c     >...=...=...<...
  425a94:	0000093c 0000093b 0000093b 0000093a     <...;...;...:...
  425aa4:	00000939 00000938 00000937 00000936     9...8...7...6...
  425ab4:	00000935 00000934 00000932 00000930     5...4...2...0...
  425ac4:	0000092e 0000092c 00000929 00000927     ....,...)...'...
  425ad4:	00000924 00000920 0000091d 00000919     $... ...........
  425ae4:	00000915 00000910 0000090b 00000906     ................
  425af4:	00000901 000008fc 000008f6 000008f0     ................
  425b04:	000008ea 000008e4 000008de 000008d8     ................
  425b14:	000008d1 000008cb 000008c5 000008be     ................
  425b24:	000008b8 000008b2 000008ac 000008a6     ................
  425b34:	000008a0 0000089a 00000894 0000088f     ................
  425b44:	00000889 00000884 0000087e 00000879     ........~...y...
  425b54:	00000873 0000086d 00000868 00000862     s...m...h...b...
  425b64:	0000085c 00000856 00000850 0000084a     \...V...P...J...
  425b74:	00000844 0000083d 00000837 00000830     D...=...7...0...
  425b84:	00000829 00000821 0000081a 00000812     )...!...........
  425b94:	0000080a 00000802 000007fa 000007f2     ................
  425ba4:	000007eb 000007e4 000007dd 000007d7     ................
  425bb4:	000007d2 000007cd 000007c9 000007c6     ................
  425bc4:	000007c3 000007c2 000007c2 000007c3     ................
  425bd4:	000007c5 000007c8 000007cd 000007d3     ................
  425be4:	000007da 000007e2 000007eb 000007f6     ................
  425bf4:	00000802 0000080f 0000081e 0000082e     ................
  425c04:	0000083f 00000851 00000865 0000087a     ?...Q...e...z...
  425c14:	00000890 000008a7 000008c0 000008da     ................
  425c24:	000008f4 00000910 0000092d 0000094c     ........-...L...
  425c34:	0000096b 0000098b 000009ad 000009cf     k...............
  425c44:	000009f3 00000a17 00000a3c 00000a63     ........<...c...
  425c54:	00000a8a 00000ab2 00000adb 00000b05     ................
  425c64:	00000b2f 00000b5b 00000b86 00000bb3     /...[...........
  425c74:	00000be0 00000c0d 00000c3b 00000c69     ........;...i...
  425c84:	00000c97 00000cc6 00000cf5 00000d23     ............#...
  425c94:	00000d51 00000d80 00000dad 00000ddb     Q...............
  425ca4:	00000e07 00000e33 00000e5e 00000e87     ....3...^.......
  425cb4:	00000eaf 00000ed5 00000ef9 00000f1c     ................
  425cc4:	00000f3c 00000f5a 00000f76 00000f8f     <...Z...v.......
  425cd4:	00000fa6 00000fbb 00000fcd 00000fdc     ................
  425ce4:	00000fe8 00000ff2 00000ff9 00000ffd     ................
  425cf4:	00000fff 00000ffd 00000ff9 00000ff1     ................
  425d04:	00000fe8 00000fdb 00000fcb 00000fb9     ................
  425d14:	00000fa4 00000f8d 00000f73 00000f57     ........s...W...
  425d24:	00000f38 00000f17 00000ef3 00000ecd     8...............
  425d34:	00000ea6 00000e7c 00000e50 00000e23     ....|...P...#...
  425d44:	00000df3 00000dc3 00000d91 00000d5d     ............]...
  425d54:	00000d29 00000cf4 00000cbd 00000c86     )...............
  425d64:	00000c4e 00000c16 00000bdd 00000ba4     N...............
  425d74:	00000b6b 00000b31 00000af8 00000ac0     k...1...........
  425d84:	00000a87 00000a4f 00000a18 000009e1     ....O...........
  425d94:	000009ab 00000976 00000942 0000090e     ....v...B.......
  425da4:	000008dc 000008ac 0000087c 0000084e     ........|...N...
  425db4:	00000821 000007f6 000007cc 000007a4     !...............
  425dc4:	0000077d 00000758 00000734 00000712     }...X...4.......
  425dd4:	000006f1 000006d2 000006b4 00000698     ................
  425de4:	0000067e 00000664 0000064d 00000636     ~...d...M...6...
  425df4:	00000621 0000060e 000005fb 000005ea     !...............
  425e04:	000005da 000005cc 000005be 000005b2     ................
  425e14:	000005a7 0000059e 00000595 0000058e     ................
  425e24:	00000588 00000583 0000057e 0000057b     ........~...{...
  425e34:	00000579 00000577 00000576 00000576     y...w...v...v...
  425e44:	00000576 00000577 00000579 0000057b     v...w...y...{...
  425e54:	0000057e 00000582 00000585 0000058a     ~...............
  425e64:	0000058e 00000593 00000598 0000059e     ................
  425e74:	000005a3 000005a9 000005af 000005b5     ................
  425e84:	000005bb 000005c1 000005c7 000005cd     ................
  425e94:	000005d3 000005d9 000005df 000005e5     ................
  425ea4:	000005eb 000005f0 000005f6 000005fb     ................
  425eb4:	00000600 00000604 00000609 0000060d     ................
  425ec4:	00000611 00000615 00000618 0000061c     ................
  425ed4:	0000061f 00000621 00000624 00000626     ....!...$...&...
  425ee4:	00000628 00000629 0000062b 0000062c     (...)...+...,...
  425ef4:	0000062d 0000062d 0000062e 0000062e     -...-...........
  425f04:	0000062e 0000062e 0000062d 0000062c     ........-...,...
  425f14:	0000062c 0000062b 0000062a 00000628     ,...+...*...(...
  425f24:	00000627 00000625 00000623 00000621     '...%...#...!...
  425f34:	0000061f 0000061d 0000061b 00000618     ................
  425f44:	00000616 00000613 00000610 0000060d     ................
  425f54:	0000060a 00000606 00000603 000005ff     ................
  425f64:	000005fc 000005f8 000005f4 000005f1     ................
  425f74:	000005ed 000005e9 000005e5 000005e0     ................
  425f84:	000005dc 000005d8 000005d4 000005d0     ................
  425f94:	000005cb 000005c7 000005c3 000005be     ................
  425fa4:	000005ba 000005b5 000005b1 000005ad     ................
  425fb4:	000005a8 000005a4 0000059f 0000059b     ................
  425fc4:	00000597 00000592 0000058e 0000058a     ................
  425fd4:	00000586 00000582 0000057e 0000057a     ........~...z...
  425fe4:	00000576 00000572 0000056e 0000056a     v...r...n...j...
  425ff4:	00000567 00000563 0000055f 0000055c     g...c..._...\...
  426004:	00000558 00000555 00000551 0000054e     X...U...Q...N...
  426014:	0000054a 00000547 00000544 00000540     J...G...D...@...
  426024:	0000053d 0000053a 00000536 00000533     =...:...6...3...
  426034:	0000052f 0000052c 00000529 00000525     /...,...)...%...
  426044:	00000522 0000051e 0000051b 00000517     "...............
  426054:	00000514 00000510 0000050d 00000509     ................

00426064 <g_ecgSize>:
  426064:	000005b2                                ....

00426068 <image_data_Image>:
  426068:	00500089 0047004e 000a000d 000a001a     ..P.N.G.........
  426078:	00000000 000d0000 00480049 00520044     ........I.H.D.R.
  426088:	00000000 00270001 00000000 00a40000     ......'.........
  426098:	00060008 00000000 00d50000 00e80009     ................
  4260a8:	00000083 00200000 00490000 00410044     ...... ...I.D.A.
  4260b8:	00780054 00ed009c 007700dd 00550054     T.x.......w.T.U.
  4260c8:	00be0067 007100f0 00d3004d 0026004c     g.....q.M...L.&.
  4260d8:	004c0099 00c90026 00ca0064 007700bd     ..L.&...d.....w.
  4260e8:	009a00ee 004e00fb 003300b9 001800d1     ......N...3.....
  4260f8:	00b6003b 00950018 00140004 00b10030     ;...........0...
  426108:	006c006b 004400b1 00c900a3 001a0024     k.l...D.....$...
  426118:	00630013 0089009a 00200023 008a008a     ..c.....#. .....
  426128:	0093004a 008000a2 0041005d 00510004     J.......].A...Q.
  426138:	00b00051 00050060 00d2001b 00900041     Q...`.......A...
  426148:	00bd0026 00e0001f 00ea0070 00be00fe     &.......p.......
  426158:	001c007f 0091003d 008a0008 00b90099     ....=...........
  426168:	008900ba 00cf00bf 007b005a 004400ad     ........Z.{...D.
  426178:	009c003d 0058007d 00af009e 007900cf     =...}.X.......y.
  426188:	00f300f6 003a006c 00840020 002a0010     ....l.:. .....*.
  426198:	00e100d4 009f0041 00100080 00b40042     ....A.......B...
  4261a8:	00e20044 00840024 00250050 00930089     D...$...P.%.....
  4261b8:	00420010 00240095 0042004e 00550008     ..B...$.N.B...U.
  4261c8:	00380092 00210009 00490054 002400e2     ..8...!.T.I...$.
  4261d8:	00500084 00890025 00100093 00950042     ..P.%.......B...
  4261e8:	004e0024 00080042 00920055 00090038     $.N.B...U...8...
  4261f8:	00540021 00e20049 00840024 00250050     !.T.I...$...P.%.
  426208:	00930089 00420010 00240095 0042004e     ......B...$.N.B.
  426218:	00550008 00380092 00210009 00490054     ..U...8...!.T.I.
  426228:	002400e2 00500084 00890025 00100093     ..$...P.%.......
  426238:	00950042 004e0024 00080042 00920055     B...$.N.B...U...
  426248:	00090038 00540021 00e20049 00840024     8...!.T.I...$...
  426258:	00250050 00930089 00420010 00240095     P.%.......B...$.
  426268:	0042004e 00550008 00380092 00210009     N.B...U...8...!.
  426278:	00490054 002400e2 00500084 00890025     T.I...$...P.%...
  426288:	00100093 00950042 004e0024 00080042     ....B...$.N.B...
  426298:	00920055 00090038 00540021 00e20049     U...8...!.T.I...
  4262a8:	00840024 00250050 00930089 00420010     $...P.%.......B.
  4262b8:	00240095 0042004e 00550008 00380092     ..$.N.B...U...8.
  4262c8:	00210009 00490054 002400e2 00500084     ..!.T.I...$...P.
  4262d8:	00890025 00100093 00950042 004e0024     %.......B...$.N.
  4262e8:	00080042 00920055 00090038 00540021     B...U...8...!.T.
  4262f8:	00e20049 00840024 00250050 00930089     I...$...P.%.....
  426308:	00420010 00240095 0042004e 00550008     ..B...$.N.B...U.
  426318:	00380092 00210009 00490054 002400e2     ..8...!.T.I...$.
  426328:	00500084 00890025 00100093 00950042     ..P.%.......B...
  426338:	004e0024 00080042 00920055 00090038     $.N.B...U...8...
  426348:	00540021 00e20049 00840024 00250050     !.T.I...$...P.%.
  426358:	00930089 00420010 00240095 0042004e     ......B...$.N.B.
  426368:	00550008 00380092 00210009 00490054     ..U...8...!.T.I.
  426378:	002400e2 00500084 00890025 00100093     ..$...P.%.......
  426388:	00950042 004e0024 00080042 00920055     B...$.N.B...U...
  426398:	00090038 00540021 00e20049 00840024     8...!.T.I...$...
  4263a8:	00250050 00930089 00420010 00240095     P.%.......B...$.
  4263b8:	0042004e 00550008 00380092 00210009     N.B...U...8...!.
  4263c8:	00490054 002400e2 00500084 00890025     T.I...$...P.%...
  4263d8:	00100093 00950042 004e0024 00080042     ....B...$.N.B...
  4263e8:	00920055 00090038 00540021 00a100e9     U...8...!.T.....
  4263f8:	0093008c 00a400de 00b30027 009d0022     ........'..."...
  426408:	005d005a 000a002d 008300ca 001d003e     Z.].-.......>...
  426418:	00440021 001e000b 003800ca 005c0025     !.D.......8.%.\.
  426428:	00c7003f 008800bc 00f800d9 00f7009f     ?...............
  426438:	007a00e1 00a1005d 004a0004 00150008     ..z.].....J.....
  426448:	00e8007a 00d400e2 006f00a8 00e10060     z.........o.`...
  426458:	000f0081 00ed00e9 008d00d5 00fd00d7     ................
  426468:	00f300fb 00cc004d 00940017 00940035     ....M.......5...
  426478:	00e8003e 001200d3 00fc0042 004300c0     >.......B.....C.
  426488:	00a70017 00c500cb 00180097 0030001a     ..............0.
  426498:	00de0090 00af005e 00cb00d0 002b00ab     ....^.........+.
  4264a8:	007c00fd 00e0007a 006e007d 008c00bd     ..|.z...}.n.....
  4264b8:	0084009e 00990050 002e0087 00bb004e     ....P.......N...
  4264c8:	00b60092 00df00d3 002700a7 00bd00bd     ..........'.....
  4264d8:	00b1005e 00ca0004 002b00b3 009b0076     ^.........+.v...
  4264e8:	00700086 00e000ae 006d00cc 0056007f     ..p.......m...V.
  4264f8:	00cc0051 00150098 000300f3 004b0038     Q...........8.K.
  426508:	00c40021 00170043 009f0027 004f0078     !...C...'...x.O.
  426518:	007800fa 00b30075 00a900c6 00d700b7     ..x.u...........
  426528:	00f4002b 00ec00f4 00fb0082 001500a9     +...............
  426538:	00cc0018 00140006 00a10045 005f005e     ........E...^._.
  426548:	006a004f 000a0059 00ae0027 0025001d     O.j.Y...'.....%.
  426558:	00fb0036 00e70008 00ce000a 00580050     6...........P.X.
  426568:	00200057 002b00a3 00ee0021 008700a3     W. ...+.!.......
  426578:	004e002e 00970021 00630037 00dd00e3     ..N.!...7.c.....
  426588:	005900a3 007a009c 00be0078 00a200cc     ..Y...z.x.......
  426598:	001f0083 00d100a1 00280069 00cd00a8     ........i.(.....
  4265a8:	003700c7 009300de 00a10019 00700053     ..7.........S.p.
  4265b8:	00b1000a 00440063 002d0090 00b60063     ....c.D...-.c...
  4265c8:	00110039 00c10078 00e2004f 00c40024     9...x...O...$...
  4265d8:	00f4007d 00c500d0 006200e9 007900d1     }.........b...y.
  4265e8:	00060086 00a4000c 00570097 006600d7     ..........W...f.
  4265f8:	00a70023 000e004f 0048007c 0075004e     #...O...|.H.N.u.
  426608:	00ce0036 00be00c7 00b00065 003f005f     6.......e..._.?.
  426618:	007800fa 00a30077 00670097 007a0057     ..x.w.....g.W.z.
  426628:	0076007a 003500e1 001b003f 00250076     z.v...5.?...v.%.
  426638:	007f006f 00a700d0 00c4002e 00e50043     o...........C...
  426648:	001300a7 00450027 00310041 00310099     ....'.E.A.1...1.
  426658:	000c00e9 006a00e8 00d0001b 00560014     ......j.......V.
  426668:	00970050 008e005f 00d3005e 00b10084     P..._...^.......
  426678:	008000c9 00b20062 001d00cc 008d0069     ....b.......i...
  426688:	00be005a 00f2003e 007d0039 005f00bd     Z...>...9.}..._.
  426698:	009700a5 00570067 0079007a 00a50075     ....g.W.z.y.u...
  4266a8:	008600c7 00590097 00720075 00e10005     ......Y.u.r.....
  4266b8:	00a10069 000600d8 00a2000e 00670097     i.............g.
  4266c8:	00eb0057 0054007c 00af006f 00980057     W...|.T.o...W...
  4266d8:	007b00b2 00690002 00a900e5 00f8000f     ..{...i.........
  4266e8:	000a0005 007000f1 004900f9 00c900c4     ......p...I.....
  4266f8:	00a400d8 002200a7 009f0025 00de004b     ......".%...K...
  426708:	00d80007 00d5003f 00e0009d 000b00be     ....?...........
  426718:	00ef00f0 00170032 009700ff 001200e7     ....2...........
  426728:	00f30062 00070009 00ad0067 00390023     b.......g...#.9.
  426738:	00960038 00ec009a 00cc0012 00330026     8...........&.3.
  426748:	00350079 007c00b9 00390018 00010087     y.5...|...9.....
  426758:	00bd00be 00e500e9 001500d9 00a000fb     ................
  426768:	00c400a1 001d00e5 00ab00e7 008b0023     ............#...
  426778:	00e300e9 00190065 00dd0031 0093000c     ....e...1.......
  426788:	00f00043 00ec001b 00da004a 00d60086     C.......J.......
  426798:	00f800d0 005f00a0 001000a6 0095000f     ......_.........
  4267a8:	001d00f6 00050027 009500b4 0092001a     ....'...........
  4267b8:	00c70036 00f300b0 00af00cd 00fd0058     6...........X...
  4267c8:	0031008b 003e00b8 008000e6 00070073     ..1...>.....s...
  4267d8:	009c003b 00bc003b 00e30079 00c300b0     ;...;...y.......
  4267e8:	007100ed 003c0047 009c005e 00be00c8     ..q.G.<.^.......
  4267f8:	002b00f1 00380028 00020099 0042008a     ..+.(.8.......B.
  426808:	00690072 00cb0012 007e008e 0053008d     r.i.......~...S.
  426818:	001d0088 0071006e 005400ce 00560036     ....n.q...T.6.V.
  426828:	003f0030 003d00e2 00fb0006 003000d9     0.?...=.......0.
  426838:	00630070 0006006f 00d900fb 007e0030     p.c.o.......0.~.
  426848:	00db00c7 005f0004 00a4000a 00a100bc     ......_.........
  426858:	004100fc 005200bf 001e0021 00ed003a     ..A...R.!...:...
  426868:	004e003a 00a5000d 001c0035 00b2005f     :.N.....5..._...
  426878:	00af0019 004c003f 00f500c3 001100d1     ....?.L.........
  426888:	007400b8 00c300b0 008300a5 00ab007d     ..t.........}...
  426898:	008a00c7 008e004e 0019006c 008800b0     ....N...l.......
  4268a8:	00d800bc 008c0044 00030006 00f500c5     ....D...........
  4268b8:	001c00c5 003d00cf 007e004a 001e004d     ......=.J.~.M...
  4268c8:	00c50066 008500c4 000400a2 00a400f6     f...............
  4268d8:	00c400ec 00bc00ff 00a1002f 00bb0029     ......../...)...
  4268e8:	005c00b8 0091007c 00bd007a 00260046     ..\.|...z...F.&.
  4268f8:	00b100c2 00f9006c 00ac0029 0020002b     ....l...)...+. .
  426908:	003c00ad 008a008d 008a00c6 007d0007     ..<...........}.
  426918:	00e2003a 00d00021 00e3006e 00970054     :...!...n...T...
  426928:	004e005f 00a800d8 00ac00e5 00d900fa     _.N.............
  426938:	005c0048 00d8003a 007c00e1 00300097     H.\.:.....|...0.
  426948:	007400b9 00b700b0 00a8008c 00da003a     ..t.........:...
  426958:	00f900e3 0053009f 00bf0039 0082002e     ......S.9.......
  426968:	008200ba 008c0072 007a004d 000600cc     ....r...M.z.....
  426978:	00660013 00090093 00050005 00620093     ..f...........b.
  426988:	006800c2 00620036 004c0056 00fa000f     ..h.6.b.V.L.....
  426998:	00de0025 00b50077 0035004d 00cf00ec     %...w...M.5.....
  4269a8:	00200088 00650034 00a10017 00bb00a9     .. .4.e.........
  4269b8:	002d0049 00c6004b 009800ac 009a0031     I.-.K.......1...
  4269c8:	0044008d 001d0067 00fa0060 0077009e     ..D.g...`.....w.
  4269d8:	000c0070 0093007e 00f700f7 005400cd     p...~.........T.
  4269e8:	001c00c5 00d6009c 00e500a0 00ee0078     ............x...
  4269f8:	00420051 00770053 009a0013 009b00ba     Q.B.S.w.........
  426a08:	00f900d3 009b0027 004b00ad 004c00ab     ....'.....K...L.
  426a18:	00e4002b 00770092 00990014 00670061     +.....w.....a.g.
  426a28:	00aa0068 007f00ae 00670080 007e002a     h.........g.*.~.
  426a38:	00f6008c 00270017 00410045 00540053     ......'.E.A.S.T.
  426a48:	00fe00c5 00ab0069 003400db 006a005a     ....i.....4.Z.j.
  426a58:	0052002d 009f002b 000b007c 009700ff     -.R.+...|.......
  426a68:	001100e7 00de003e 00fd0095 00d700d3     ....>...........
  426a78:	00600070 005a00c6 002f008e 00e20009     p.`...Z.../.....
  426a88:	00ba00c2 008a0008 006600ce 00af00a0     ..........f.....
  426a98:	007a006f 00af00d0 00be00f4 00ac00cb     o.z.............
  426aa8:	00c70048 00e80031 00fa000d 00f400fb     H...1...........
  426ab8:	00800064 002f006f 0013007c 003000bc     d...o./.|.....0.
  426ac8:	00260029 007400ea 002c0075 00fa0088     ).&...t.u.,.....
  426ad8:	009e0080 005d009e 001700ac 00dc0011     ......].........
  426ae8:	009600e2 002800a3 0076000f 00590044     ......(...v.D.Y.
  426af8:	005000d6 007b00ca 00ef00e1 00c00032     ..P...{.....2...
  426b08:	001700b7 007c0003 00f1007b 008100c9     ......|.{.......
  426b18:	00a0007f 00e90033 00bf00ac 00e8009f     ....3...........
  426b28:	00080077 00ce00b7 006c004e 00f40019     w.......N.l.....
  426b38:	00e50029 007900c9 00f0000f 00c5004c     ).....y.....L...
  426b48:	00d1008f 00e200ee 00ad00a4 002300ac     ..............#.
  426b58:	00eb00ee 00560010 007200ff 00eb006c     ......V...r.l...
  426b68:	00a300a3 008d0036 00ec00a4 0030007e     ....6.......~.0.
  426b78:	00f50037 002e0026 00ec001d 00eb0070     7...&.......p...
  426b88:	008400ec 001f00f7 00e500df 006700d8     ..............g.
  426b98:	00d40081 007b005e 00f600b8 00a500dc     ....^.{.........
  426ba8:	00a40057 00e600f3 00d700a6 001700ad     W...............
  426bb8:	00bc0003 00ad00ce 006400c7 00a20036     ..........d.6...
  426bc8:	006b00d1 00f200f8 006700c8 00f500f4     ..k.......g.....
  426bd8:	0095007e 005e00de 00d000af 00a700cf     ~.....^.........
  426be8:	005e0007 00d600e7 00f0003d 00950038     ..^.....=...8...
  426bf8:	009700d6 00330030 008a006c 00490075     ....0.3.l...u.I.
  426c08:	00c200c8 007f00a8 003300a0 001200de     ..........3.....
  426c18:	008d00a7 00710007 006000e9 0070004f     ......q...`.O.p.
  426c28:	000500df 00a70012 00a80076 00c5005d     ........v...]...
  426c38:	006c00c9 00910034 00e700b1 001b0014     ..l.4...........
  426c48:	003200ff 0097001b 00ad008e 00e70044     ..2.........D...
  426c58:	00e10091 007e00ac 000c0076 009d006e     ......~.v...n...
  426c68:	00ef001c 00440079 006b0075 005600dc     ....y.D.u.k...V.
  426c78:	00f5003e 00070016 00ad0067 002e00a3     >.......g.......
  426c88:	00e100ff 000c0099 002d006f 0046004e     ........o.-.N.F.
  426c98:	009100b3 00dc00b8 007c00e3 00fd001e     ..........|.....
  426ca8:	00330009 00a600c2 00fc00b0 00b700d8     ..3.............
  426cb8:	00560064 003f00a6 00d300e8 005b006d     d.V...?.....m.[.
  426cc8:	003a009c 001300da 0023006c 006a0071     ..:.....l.#.q.j.
  426cd8:	00da008f 009c0055 004a001a 000900ab     ....U.....J.....
  426ce8:	00e7001f 008a00ca 001d00c7 001d005b     ............[...
  426cf8:	00ad0019 0069007b 00a70012 00dd00be     ....{.i.........
  426d08:	00b0004a 004200cd 003a005c 00ff000e     J.....B.\.:.....
  426d18:	00810051 001900ba 00f70029 008e005f     Q.......)..._...
  426d28:	00bc00e6 003e00c7 004d008c 000700fa     ......>...M.....
  426d38:	00d200fd 008b00ef 00e200d6 00960004     ................
  426d48:	00f10009 008600d2 00f20052 0072006a     ........R...j.r.
  426d58:	00d200a9 00a90056 00cf0062 00c400a1     ....V...b.......
  426d68:	00a700e9 005d00ad 002900c5 00c000e7     ......]...).....
  426d78:	00d60079 003f003e 00d500be 00390030     y...>.?.....0.9.
  426d88:	00780077 00dd0093 00960023 00990052     w.x.....#...R...
  426d98:	00c8005e 00990081 00b8001e 00ee003e     ^...........>...
  426da8:	00a600d0 00f20089 008f0056 0076008e     ........V.....v.
  426db8:	0019006c 002900f4 00c90015 00d600b9     l.....).........
  426dc8:	00300073 0066002b 00260074 004d001d     s.0.+.f.t.&...M.
  426dd8:	002600c6 0066000c 00f50083 002a00d7     ..&...f.......*.
  426de8:	009500b5 009500a4 001200a7 007d009b     ..............}.
  426df8:	00b30098 00a70005 005a00b9 00950079     ..........Z.y...
  426e08:	001f00c6 008d00ac 00140052 00ba0085     ........R.......
  426e18:	003a00a6 002a00b2 00880032 003c002f     ..:...*.2.../.<.
  426e28:	00d100cb 0018009c 004a0092 00290012     ..........J...).
  426e38:	0028006f 00f3006b 00bd009b 0057004e     o.(.k.......N.W.
  426e48:	00660047 003a0045 00f30027 0013008e     G.f.E.:.'.......
  426e58:	0075009d 00f30090 00e300d7 005a00b9     ..u...........Z.
  426e68:	00450099 00fe00bd 001300ee 002600be     ..E...........&.
  426e78:	008900b3 004d0012 00570011 002e004a     ......M...W.J...
  426e88:	00930013 004d001d 00f6006c 00d20061     ......M.l...a...
  426e98:	005300cb 00d600a9 00630056 00cc0056     ..S.....V.c.V...
  426ea8:	009700a4 00b500a7 0027001a 00d900a3     ..........'.....
  426eb8:	00930048 008900b1 00630026 003a0013     H.......&.c...:.
  426ec8:	00d30063 003f001d 00e900d2 003a008c     c.....?.......:.
  426ed8:	00d700ae 00720015 00f800b9 00870022     ......r....."...
  426ee8:	001e00af 00c400e4 00a300b5 009700a4     ................
  426ef8:	005200a7 00870079 007c00ab 00c50066     ..R.y.....|.f...
  426f08:	0065004c 00050063 001500e9 00c40069     L.e.c.......i...
  426f18:	009e0017 00c800e5 004300d5 00bf009c     ..........C.....
  426f28:	004f001e 00650056 00550026 0095008d     ..O.V.e.&.U.....
  426f38:	003e002d 00c700e6 00c900c6 0030006c     -.>.........l.0.
  426f48:	00570051 00410050 006a0045 0015003e     Q.W.P.A.E.j.>...
  426f58:	00f900a9 000a0068 0050002b 00f7008c     ....h...+.P.....
  426f68:	00010076 00310044 00690099 00ae0028     v...D.1...i.(...
  426f78:	002200a6 00f200cd 00aa0035 008b00b3     ..".....5.......
  426f88:	00d500d1 00dc0034 00d700d3 00770010     ....4.........w.
  426f98:	006e00d6 00a400e2 00cc0098 009a001c     ..n.............
  426fa8:	000100b3 00c700d7 00b40046 00d2003a     ........F...:...
  426fb8:	007d0071 0004007c 00d700e7 00a30086     q.}.|...........
  426fc8:	00a800ad 00760023 001f0081 003a002b     ....#.v.....+.:.
  426fd8:	003e00b5 006a00c2 00e800eb 00e300c9     ..>...j.........
  426fe8:	001300d7 000a0049 0082003c 006f0049     ....I...<...I.o.
  426ff8:	00930079 005600e6 00b200e7 00f60034     y.....V.....4...
  427008:	003e004b 009a008e 00eb008f 00650089     K.>...........e.
  427018:	00d600e4 0023005c 005200e8 00330020     ....\.#...R. .3.
  427028:	00a600c2 00240030 003f00a0 007c00fd     ....0.$...?...|.
  427038:	0060007a 00dd00e3 00bb001d 004300cd     z.`...........C.
  427048:	003c00f8 001300fa 000b00e2 00d200cf     ..<.............
  427058:	00d40064 00a20052 00660029 00f20077     d...R...).f.w...
  427068:	00e6000e 00cc0047 003600c1 003500f0     ....G.....6...5.
  427078:	007800fa 00c30075 00bb00c6 00af003b     ..x.u.......;...
  427088:	00f500f9 009d00e5 0063005d 009800d9     ........].c.....
  427098:	004500e0 00a60089 00c500a8 00bd0037     ..E.........7...
  4270a8:	006c00d1 00a000a4 008000b6 008900ad     ..l.............
  4270b8:	00cc00c1 009f0009 006d008e 002000e0     ..........m... .
  4270c8:	00bc006c 006300bb 00dd00e3 001b0003     l.....c.........
  4270d8:	001e009f 00b900bc 007500e9 00da003e     ..........u.>...
  4270e8:	008f003f 009400b0 009400dd 009700d6     ?...............
  4270f8:	000b0034 00a2009d 00680028 005a008d     4.......(.h...Z.
  427108:	00cb0092 00580092 00d20075 00710095     ......X.u.....q.
  427118:	00df00db 00e00062 003e00c6 00c700d6     ....b.....>.....
  427128:	0009000f 00cf00e8 007b007b 00b300a7     ........{.{.....
  427138:	0079002b 0071003b 00270079 00230078     +.y.;.q.y.'.x.#.
  427148:	00700070 001f008b 006200eb 008f00b3     p.p.......b.....
  427158:	00f800b0 004200d0 008e003e 00c7009a     ......B.>.......
  427168:	000700a7 0026003f 003200b3 00b600e3     ....?.&...2.....
  427178:	00d400f3 00ea00e8 00990038 00820077     ........8...w...
  427188:	00b100a5 0032005f 00ab006a 00fd0003     ...._.2.j.......
  427198:	007a007d 007800de 00ee009e 000d000c     }.z...x.........
  4271a8:	00c00018 00dd00b4 00f10013 00ef003f     ............?...
  4271b8:	00d500c3 002c00aa 002600f4 008a003d     ......,...&.=...
  4271c8:	006000a2 009b0032 00a800c8 00c70048     ..`.2.......H...
  4271d8:	007e003b 00d30003 004c00f7 00680062     ;.~.......L.b.h.
  4271e8:	000000c0 006300eb 007c006c 003300ba     ......c.l.|...3.
  4271f8:	0060002c 00d30010 004f0076 00e300c4     ,.`.....v.O.....
  427208:	006a00cc 00ca0052 00680092 006a0032     ..j.R.....h.2.j.
  427218:	00cf00ad 002f0077 004e0073 00890065     ....w./.s.N.e...
  427228:	00a800d7 00aa002f 006d0022 007100eb     ..../...".m...q.
  427238:	008e00f6 00260071 00cb00a0 0036003c     ....q.&.....<.6.
  427248:	007e00fc 009e0032 009f00bf 00e00042     ..~.2.......B...
  427258:	00f3002b 003f00d9 0035006d 003b00e9     +.....?.m.5...;.
  427268:	0050004e 0054005f 00620085 00f9006e     N.P._.T...b.n...
  427278:	000a001f 00ac00c5 005000d0 0043005a     ..........P.Z.C.
  427288:	00f80056 000e0059 005e00ce 00a600c7     V...Y.....^.....
  427298:	00ff009e 00f300c0 00a6003f 00e100b0     ........?.......
  4272a8:	00930077 00fd00f1 004c00d3 000f00b6     w.........L.....
  4272b8:	00cc0059 002f0089 00280082 00cf008e     Y...../...(.....
  4272c8:	00a800c0 00fe00fd 002a003c 00f30052     ........<.*.R...
  4272d8:	00fc0039 00370081 00d60017 00d00045     9.....7.....E...
  4272e8:	00550054 00b6008f 008e00a2 00d1006b     T.U.........k...
  4272f8:	00390017 007c00b3 00070007 00af0067     ..9...|.....g...
  427308:	00720023 006a00da 003f0062 00400009     #.r...j.b.?...@.
  427318:	0051005b 006d0047 0029006e 00970027     [.Q.G.m.n.).'...
  427328:	00e5006e 004200e8 001a007f 00eb00cb     n.....B.........
  427338:	00d500d0 00500036 003e0072 000b008b     ....6.P.r.>.....
  427348:	00fb001e 00f40038 000600de 004f00f6     ....8.........O.
  427358:	00cd005b 004f00b1 00280003 00ca004f     [.....O...(.O...
  427368:	002f0025 00910026 00d300fd 00730057     %./.&.......W.s.
  427378:	000300e4 008a006f 003300e3 000e00e1     ....o.....3.....
  427388:	006000ff 008a0028 005d0042 0019007e     ..`.(...B.].~...
  427398:	009700a7 0027006d 00fa006a 00d2001a     ....m.'.j.......
  4273a8:	009c0076 00310040 007b00ab 004c0089     v...@.1...{...L.
  4273b8:	008900bb 005d0053 0039007e 005d0001     ....S.].~.9...].
  4273c8:	00dd00e7 00b80098 0039006e 005e0024     ........n.9.$.^.
  4273d8:	0098007f 00e9004e 006c00a5 008b00ea     ....N.....l.....
  4273e8:	003800aa 007400b9 002b002b 0074009f     ..8...t.+.+...t.
  4273f8:	00d700fa 004e0046 00ec001d 007b0070     ....F.N.....p.{.
  427408:	009100c2 00730043 00a00037 00a800ad     ....C.s.7.......
  427418:	00200003 00f400b9 00f6000a 0087009b     .. .............
  427428:	006300d2 00cb00c3 00e600bc 00c30067     ..c.........g...
  427438:	00d0008c 000c00c9 00d800da 009e0087     ................
  427448:	005d009e 00ed00e8 00f500d9 001500b6     ..].............
  427458:	006300e6 003900b6 007f00e1 009700c1     ..c...9.........
  427468:	000f004f 00cc007e 00fe00eb 00ac00fd     O...~...........
  427478:	00f500fb 00df007a 003300b8 00cd00c2     ....z.....3.....
  427488:	001f00ff 00d300e0 004f008b 007e000f     ..........O...~.
  427498:	006e004c 00b500f5 00af0066 006000db     L.n.....f.....`.
  4274a8:	00700036 002f002a 008f008e 00e600a3     6.p.*./.........
  4274b8:	00d80031 001f00bf 003d003d 00d000bb     1.......=.=.....
  4274c8:	00b300d3 007d000b 00ba00bc 00d700d1     ......}.........
  4274d8:	005500fb 007800fa 00b30075 0045005e     ..U...x.u...^.E.
  4274e8:	0016001b 00900030 008f00af 0021002c     ....0.......,.!.
  4274f8:	002a00a7 00fb00fb 005b00ef 002d0053     ..*.......[.S.-.
  427508:	001200db 00180043 00d500bd 001b0009     ....C...........
  427518:	00ee00ef 00c700d6 00f600f7 00a5007a     ............z...
  427528:	00b900d9 00ee00be 008f00d7 00bb00a9     ................
  427538:	00320027 00b700d0 007500b7 00e100df     '.2.......u.....
  427548:	003800cd 004d00e9 0082007a 0005002e     ..8...M.z.......
  427558:	00680032 005f0063 006c007a 00990078     2.h.c._.z.l.x...
  427568:	003e00fe 0089003d 0038002f 00ec00db     ..>.=.../.8.....
  427578:	004b003c 00450034 009e0078 00c000f3     <.K.4.E.x.......
  427588:	00c40029 00be008e 00af005e 005f005a     ).......^...Z._.
  427598:	00cd00d7 0040003b 007c00dc 008100de     ....;.@...|.....
  4275a8:	007d007e 00bb0098 0026006f 00af00e7     ~.}.....o.&.....
  4275b8:	006300c7 001b0030 00990038 00820077     ..c.0...8...w...
  4275c8:	007b0069 00d10026 00a700df 00f500a7     i.{.&...........
  4275d8:	00dc0075 00b7000c 00fc00e5 008f002c     u...........,...
  4275e8:	00e700eb 008300d3 00bb00c9 00b100c6     ................
  4275f8:	002d002f 0046008c 00650083 00d20084     /.-...F...e.....
  427608:	003800d6 00760005 00cf009b 00f50085     ..8...v.........
  427618:	00ec0091 00e5001d 00da00cc 008d005f     ............_...
  427628:	00d50063 006f00d3 00f300e3 009900e7     c.....o.........
  427638:	00740004 0087009b 00cb00df 00590073     ..t.........s.Y.
  427648:	00e200fb 00560038 00e1003c 00c70080     ....8.V.<.......
  427658:	002700af 006f00b0 001b00a2 001700a5     ..'...o.........
  427668:	006f00b3 00a3007f 0050002b 00390076     ..o.....+.P.v.9.
  427678:	00a80087 00d70077 00fe00b0 00ef0077     ....w.......w...
  427688:	00a200b0 002300b3 007f009e 004a0098     ......#.......J.
  427698:	009f0050 00d9008f 00700032 00010011     P.......2.p.....
  4276a8:	00e600dd 00f100e1 007800e2 003e0056     ..........x.V.>.
  4276b8:	00120039 009700ff 007200e7 00e700d9     9.........r.....
  4276c8:	00ba0000 00cb001a 00f60068 00e100da     ........h.......
  4276d8:	00ac004b 007e007d 00db003c 007c0086     K...}.~.<.....|.
  4276e8:	004a004e 002c0048 00930011 00b20056     N.J.H.,.....V...
  4276f8:	003700ee 00590013 00d400f5 00b800db     ..7...Y.........
  427708:	00720075 00f500c2 00070071 00fe007c     u.r.....q...|...
  427718:	008b0034 006b009a 00140025 00640027     4.....k.%...'.d.
  427728:	00f80012 000700ea 003f00b8 009a0033     ..........?.3...
  427738:	0087006b 0072002e 00510074 001b0000     k.....r.t.Q.....
  427748:	00fa00ff 00ee001e 008c00cf 00ad00c6     ................
  427758:	00130093 004f006e 00e20038 00e700fb     ....n.O.8.......
  427768:	00e40059 00ba001c 00d10040 00740099     Y.......@.....t.
  427778:	00fd00d6 001d00f6 003a00dc 0012003b     ..........:.;...
  427788:	00d000bb 00a6009f 00d600aa 00cf0047     ............G...
  427798:	00bd0026 00a40091 0047004d 00fb0058     &.......M.G.X...
  4277a8:	007800c2 00bd00d6 00890034 00c800ec     ..x.....4.......
  4277b8:	007b0084 0013007f 006700de 002600ed     ..{.......g...&.
  4277c8:	0039004e 002f0007 00ea00b0 00b700a9     N.9.../.........
  4277d8:	008f005b 0047004d 0042007b 00fa00df     [...M.G.{.B.....
  4277e8:	00d50027 00450059 001c00e4 004000ba     '...Y.E.......@.
  4277f8:	007b0082 00ab0018 007a009e 009b008b     ..{.......z.....
  427808:	000d004b 003c0056 00e20036 002400c6     K...V.<.6.....$.
  427818:	003d00fa 00aa00c6 003d00a3 0006005b     ..=.......=.[...
  427828:	00a2002e 00e3002a 0000003a 00a500c9     ....*...:.......
  427838:	008c0049 00b20008 007e00fd 00b000e3     I.........~.....
  427848:	00e500a7 0061008d 0038001b 00290088     ......a...8...).
  427858:	00c600bb 00270033 0006007c 0021008e     ....3.'.|.....!.
  427868:	005a006f 00ee00f6 00f800dd 00830033     o.Z.........3...
  427878:	006c00fd 00f100b0 004e00ee 00cf002f     ..l.......N./...
  427888:	00f400ae 00ee00f3 00c800c1 00f6002d     ............-...
  427898:	000900cc 00c1009f 00dd0094 00180013     ................
  4278a8:	00df00e2 001a00df 00fe00a9 00bd00be     ................
  4278b8:	004d00f0 006c00f0 001100f6 00b1002d     ..M...l.....-...
  4278c8:	003200e4 00420033 00630027 00d300e3     ..2.3.B.'.c.....
  4278d8:	00fa00dd 004600f5 00d90004 003f0032     ......F.....2.?.
  4278e8:	003d00e2 003800be 002900fc 00f600f3     ..=...8...).....
  4278f8:	006200cd 00d00044 006b0030 00060068     ..b.D...0.k.h...
  427908:	00ec006e 00fb008d 001500c9 004d00e8     n.............M.
  427918:	00b4003a 002d0006 00d200fb 001800c2     :.....-.........
  427928:	00620019 006f0047 00cb004f 00f40073     ..b.G.o.O...s...
  427938:	007e00f5 00370095 00bd0037 00b400ce     ..~...7.7.......
  427948:	0093003d 007f0078 002c00df 006c00c6     =...x.....,...l.
  427958:	00620073 00c600d0 00d6003e 00de0098     s.b.....>.......
  427968:	00dc007a 00a7001a 00cb00e0 0018009b     z...............
  427978:	006700ec 007d0063 005b008e 005400e3     ..g.c.}...[...T.
  427988:	005400db 008a00cb 00cb0013 00e20019     ..T.............
  427998:	00df00df 00bb001a 00be0001 001800bd     ................
  4279a8:	00d500bd 00390091 00ef00e1 00230032     ......9.....2.#.
  4279b8:	00320074 00430023 00b000ec 00ee00f1     t.2.#.C.........
  4279c8:	005f004e 005700ef 002000f9 000e0072     N._...W... .r...
  4279d8:	00a500c9 005c0049 00ce00ab 00fa0061     ....I.\.....a...
  4279e8:	0049009e 00d700d6 00d700df 005500fb     ..I...........U.
  4279f8:	0042009c 00f800ec 00ff0068 002c00fb     ..B.....h.....,.
  427a08:	00f9008d 00050082 001f0051 006a0030     ........Q...0.j.
  427a18:	000300ab 006f007d 00c2006c 00ec00b6     ....}.o.l.......
  427a28:	001c0073 0062004f 006500c9 00ed00a0     s...O.b...e.....
  427a38:	005a0071 00dc00f3 007c0058 003400fe     q.Z.....X.|...4.
  427a48:	00f70013 00df00a7 00b80026 002700ff     ........&.....'.
  427a58:	00b80024 00910087 007d001b 00a20089     $.........}.....
  427a68:	00e900b3 00c40014 009000a5 001c0012     ................
  427a78:	00c4004b 00370024 005e003c 00800098     K...$.7.<.^.....
  427a88:	0027005b 00760047 002c003b 00e200a5     [.'.G.v.;.,.....
  427a98:	00730007 00550054 008500e9 007100ec     ..s.T.U.......q.
  427aa8:	008e00fc 004f0095 00c4008d 003f00f3     ......O.......?.
  427ab8:	007000a7 00ce0068 00ae0006 003b00ee     ..p.h.........;.
  427ac8:	00e90047 001c00a5 0052002a 00b900f2     G.......*.R.....
  427ad8:	003a007e 00a4008d 002300c0 00b200ec     ~.:.......#.....
  427ae8:	001a00ff 002700b7 00f0009d 00fb00ff     ......'.........
  427af8:	00b2005c 002700f7 00360060 00c8009a     \.....'.`.6.....
  427b08:	0049008b 00ed0064 0013000b 007800f0     ..I.d.........x.
  427b18:	00220069 007f00be 0085009e 001300db     i.".............
  427b28:	00f8008e 006900fc 00910026 00dc0053     ......i.&...S...
  427b38:	00b30039 0027007c 00ab00f1 00b90042     9...|.'.....B...
  427b48:	001f00e2 00ae008d 009100b6 00f30092     ................
  427b58:	006c0059 00fe00ea 002b0021 0073001e     Y.l.....!.+...s.
  427b68:	00c70060 002f00b0 00f30058 001800ec     `...../.X.......
  427b78:	00ff00d6 0032006e 0046007b 00e3002e     ....n.2.{.F.....
  427b88:	00b200f4 002400ed 00ef00b8 008a00e5     ......$.........
  427b98:	0034007f 00790075 00180065 009a001a     ..4.u.y.e.......
  427ba8:	009a0088 001a00b6 00c700d7 00130086     ................
  427bb8:	00e700d4 008a0063 00a600ce 003a00b7     ....c.........:.
  427bc8:	00d2007a 00d70096 003e0012 008500ce     z.........>.....
  427bd8:	004f0015 00100038 006a003a 004d0039     ..O.8...:.j.9.M.
  427be8:	009a0055 00db007f 00f3007b 004a00ff     U.......{.....J.
  427bf8:	008800fb 00a20093 00760070 00ee00c5     ........p.v.....
  427c08:	00ae00db 00ad00d0 00e500f9 00dc0058     ............X...
  427c18:	00b0009e 0095005c 007b0073 008900c2     ....\...s.{.....
  427c28:	00df0044 00a40083 0039006c 005900ca     D.......l.9...Y.
  427c38:	005d0097 00fa0024 0062001d 008d00cd     ..].$.....b.....
  427c48:	000600e5 007f00eb 000e00fb 00660007     ..............f.
  427c58:	00c500ac 00e500ff 00ef00f7 00920079     ............y...
  427c68:	00b900dc 001d0083 007f00be 00c50099     ................
  427c78:	003300f5 00400069 0071000b 007a00f2     ..3.i.@...q...z.
  427c88:	00890085 0047003b 002f00b3 008c002d     ....;.G.../.-...
  427c98:	009a00bc 004a005c 004b00eb 002f0088     ....\.J...K.../.
  427ca8:	00cb003c 00f6003f 006f00bf 00f400bd     <...?.....o.....
  427cb8:	00f3007e 003b000d 00a30078 00df000d     ~.....;.x.......
  427cc8:	007c00c4 008500c1 000900eb 00d60094     ..|.............
  427cd8:	00900097 007d005b 004d008d 00fd0017     ....[.}...M.....
  427ce8:	00110019 006b006c 00c9001d 00df004c     ....l.k.....L...
  427cf8:	000e00f3 00e50069 002800a9 00680028     ....i.....(.(.h.
  427d08:	00750074 008e002c 008400fe 003700be     t.u.,.........7.
  427d18:	006600c2 00d300e3 0005009d 003e0007     ..f...........>.
  427d28:	005400e4 001c005e 00f500a5 00540025     ..T.^.......%.T.
  427d38:	00ab0069 006b0028 00e50028 00fe0074     i...(.k.(...t...
  427d48:	00660049 004e0084 008e00b1 00460050     I.f...N.....P.F.
  427d58:	0075006d 00a70020 009b002a 00b200b4     m.u. ...*.......
  427d68:	00660054 004d0086 008600b5 009f00ab     T.f...M.........
  427d78:	004f006f 00da003e 009f003f 00ec0098     o.O.>...?.......
  427d88:	001400c3 001500d6 00560050 004a005f     ........P.V._.J.
  427d98:	0059005a 0001000a 007c0017 00bd0019     Z.Y.......|.....
  427da8:	00f100d5 00c50047 00ac00c9 00090098     ....G...........
  427db8:	00d9004b 001d006d 00f60015 007a00f6     K...m.........z.
  427dc8:	00110085 00b600c1 00c600f8 0091007b     ............{...
  427dd8:	009e005e 0069004a 0009007d 00750045     ^...J.i.}...E.u.
  427de8:	00b900d7 00740058 00b7001e 00670038     ....X.t.....8.g.
  427df8:	004500e6 00e600cc 00f500c2 00f40004     ..E.............
  427e08:	003d0026 009200bb 00d300b7 00ab00c7     &.=.............
  427e18:	003d001b 00bc0036 006f004c 005700af     ..=.6...L.o...W.
  427e28:	00170098 009b0031 00050033 002900a7     ....1...3.....).
  427e38:	0028006f 005a00a3 004d005b 00430079     o.(...Z.[.M.y.C.
  427e48:	00970019 002f008a 005100f0 003c00d4     ....../...Q...<.
  427e58:	00f700eb 00e00071 00de00c6 005e0004     ....q.........^.
  427e68:	000300f0 001e00da 00970027 00f6008e     ........'.......
  427e78:	007500b8 00220076 00920062 00e5001b     ..u.v.".b.......
  427e88:	007900c9 00b40018 0014003a 00190093     ..y.....:.......
  427e98:	00510045 00cc0050 0066000a 000900a3     E.Q.P.....f.....
  427ea8:	0041004d 00a70005 006d0097 00e300c7     M.A.......m.....
  427eb8:	001300d7 007d0071 008100dc 005300fd     ....q.}.......S.
  427ec8:	00a30057 00b500ab 00d0008c 00b50074     W...........t...
  427ed8:	0044000d 005f004d 008a00c3 001c0027     ..D.M._.....'...
  427ee8:	00fa00f0 003400c3 006e002e 00a40088     ......4...n.....
  427ef8:	00b400a1 00f30006 00f3002d 008a0054     ........-...T...
  427f08:	006000a2 001b00d2 004c00a9 0064002f     ..`.......L./.d.
  427f18:	00b000c7 00b80025 00720075 00c800e4     ....%...u.r.....
  427f28:	003e0087 003500e8 006b005a 009c009c     ..>...5.Z.k.....
  427f38:	00da003b 00f200e1 007000c8 006c0042     ;.........p.B.l.
  427f48:	00920016 00f4007f 00da000a 003a008a     ..............:.
  427f58:	005a008c 0026003d 0001009d 00ce0093     ..Z.=.&.........
  427f68:	000a0000 003800d6 007400b9 00c700b0     ......8...t.....
  427f78:	00f100f5 00f80011 00790077 00a4009f     ........w.y.....
  427f88:	0047004d 000b002c 001b0086 00180075     M.G.,.......u...
  427f98:	00060075 007a004c 00350083 00050042     u...L.z...5.B...
  427fa8:	009300c7 00fb0058 007100ab 00ff00b8     ....X.....q.....
  427fb8:	00340062 00ee0009 00180061 00bf001a     b.4.....a.......
  427fc8:	00fd007f 00ca00b7 0049008b 00c30064     ..........I.d...
  427fd8:	002700ef 00fa00b3 003100d9 006d0024     ..'.......1.$.m.
  427fe8:	0069008a 00ee0076 00d5006a 00e2002e     ..i.v...j.......
  427ff8:	00360064 0088009a 00df007e 00fa00d3     d.6.....~.......
  428008:	00cb0051 008300b9 007e001d 009b007f     Q.........~.....
  428018:	00d1004b 003400e9 004600c2 00c7002d     K.....4...F.-...
  428028:	001100e5 00fc007b 003a00fe 00e2009b     ....{.....:.....
  428038:	002c0084 00a70022 007300b8 00be0064     ..,.".....s.d...
  428048:	00290037 00470021 00ff0059 002400d2     7.).!.G.Y.....$.
  428058:	003a005c 00b300d8 00e900c7 001a003b     \.:.........;...
  428068:	00aa004a 00580049 001700bd 006700f7     J...I.X.......g.
  428078:	00dd0046 004700d3 00e7003d 0076000e     F.....G.=.....v.
  428088:	00fb00ac 002400ed 00430032 0003004f     ......$.2.C.O...
  428098:	00e300cd 00f30074 00d400a3 006b00b1     ....t.........k.
  4280a8:	00cd00b1 00b800b6 00280028 002b009c     ........(.(...+.
  4280b8:	00cb003c 00ad00e8 00d6008e 006c0037     <...........7.l.
  4280c8:	009f003f 007c001e 00f80071 004a0053     ?.....|.q...S.J.
  4280d8:	008b00ea 00bd009b 003a00b6 002d005d     ..........:.].-.
  4280e8:	00e2002b 005b0096 00560047 009b0076     +.....[.G.V.v...
  4280f8:	00100086 00b10099 00b200cf 00fb002a     ............*...
  428108:	004100ea 00a800eb 00c600c6 003b00bb     ..A...........;.
  428118:	001d009f 0048005a 00fe0083 004900f6     ....Z.H.......I.
  428128:	00b30057 00e60062 00d60040 005e007e     W...b...@...~.^.
  428138:	00eb00f7 007d006f 00a300be 00310039     ....o.}.....9.1.
  428148:	00ba006c 006700e8 009800f9 00630076     l.....g.....v.c.
  428158:	00e400e1 00d100e7 0028008b 001400d6     ..........(.....
  428168:	00f600dd 00930078 00c800d9 00bc00c9     ....x...........
  428178:	00380013 00bd0004 002c00d1 006d00ba     ..8.......,...m.
  428188:	00530089 006d0041 00b3003e 004e00f7     ..S.A.m.>.....N.
  428198:	003e00b3 006300af 001b00f0 00c8001c     ..>...c.........
  4281a8:	00c40088 00e30078 00410062 00e700b3     ....x...b.A.....
  4281b8:	004c0051 00690054 005000ab 00300050     Q.L.T.i...P.P.0.
  4281c8:	0066002b 00a400f6 00e200ec 00a800e3     +.f.............
  4281d8:	00fc00f9 00ff0063 00be003c 00bc003c     ....c...<...<...
  4281e8:	00f30098 001300d7 00bc005a 00900030     ........Z...0...
  4281f8:	00960052 008800cc 005b0020 007a007a     R....... .[.z.z.
  428208:	00a10076 00f700af 002c00ab 00f9008d     v.........,.....
  428218:	00680002 009c005b 003b009c 00e100d8     ..h.[.....;.....
  428228:	00e800fa 00b60008 00be00bd 00aa0098     ................
  428238:	00c200f4 00fe003b 00d3003d 00690056     ....;...=...V.i.
  428248:	00b60038 00130078 004f006e 00b1003a     8...x...n.O.:...
  428258:	00b900fa 006400b1 003b00ed 000a000b     ......d...;.....
  428268:	008d005c 00c70038 006700ea 00b000c7     \...8.....g.....
  428278:	006700f2 009c004e 00e700f9 000c000e     ..g.N...........
  428288:	00ad000d 00d0002f 001b0035 00c4004d     ..../...5...M...
  428298:	000c00af 00d50065 006f0053 007d00b3     ....e...S.o...}.
  4282a8:	00e700c8 002b0068 009a00eb 006900c5     ....h.+.......i.
  4282b8:	00f70053 0029000f 00ca004b 00f5006d     S.....).K...m...
  4282c8:	003700f1 00e400e3 00c100dc 00d5008e     ..7.............
  4282d8:	008e00cf 00250021 002800e4 00b1008a     ....!.%...(.....
  4282e8:	008b00f5 00a60025 00030026 0047007b     ....%...&...{.G.
  4282f8:	00c7002f 00a300a5 00db003d 007d0087     /.......=.....}.
  428308:	005d0041 0059007e 00e7008b 00600074     A.].~.Y.....t.`.
  428318:	00070086 001d002e 00b30087 00e00065     ............e...
  428328:	00d40067 002d005c 00e300be 009400fc     g...\.-.........
  428338:	00b4005a 0038008b 00f40099 00c20006     Z.....8.........
  428348:	00ba00c7 00e30058 00e600b4 00b100b9     ....X...........
  428358:	00ac0024 008b00de 00d3005e 00f900c8     $.......^.......
  428368:	00fb0075 007f0070 0014007a 00530091     u...p...z.....S.
  428378:	00510056 00f10072 001b002a 00f200ff     V.Q.r...*.......
  428388:	00fb001e 005900a7 00fc0026 00fe00bc     ......Y.&.......
  428398:	003a006b 008f002e 0027000c 0065007e     k.:.......'.~.e.
  4283a8:	00d50028 00d70099 003c0029 00ca0099     (.......).<.....
  4283b8:	00c100d6 0059009f 000500fe 009700bb     ......Y.........
  4283c8:	00bd0038 00910034 00dd008c 008000a7     8...4...........
  4283d8:	007100e6 00e900ea 008500d9 0023000f     ..q...........#.
  4283e8:	005200e7 005400d3 00db007d 00170039     ..R...T.}...9...
  4283f8:	001600d6 002000b0 004300ea 00dc00fa     ...... ...C.....
  428408:	007800f8 001b0067 00880038 00e9007d     ..x.g...8...}...
  428418:	00980061 00b0007e 00c6002d 009800ac     a...~...-.......
  428428:	00ca0089 00e00088 008d00b5 00e9007d     ............}...
  428438:	00d500ed 00d70095 00f60036 00d30061     ........6...a...
  428448:	003f0005 00f500ea 002c00f5 005e008e     ..?.......,...^.
  428458:	001d0068 008c0031 00b1000c 00360027     h...1.......'.6.
  428468:	000800e7 00da00d5 001f00ea 0055001c     ..............U.
  428478:	00d40014 00e300e6 00da0071 00fe009d     ........q.......
  428488:	00bd00be 001f00ac 000e00a9 00ee0066     ............f...
  428498:	00d10067 008f0081 007300ac 0076003f     g.........s.?.v.
  4284a8:	0086009b 005c0090 00d4009a 00f700ea     ......\.........
  4284b8:	006f0058 00e300d2 00d60079 00d900a3     X.o.....y.......
  4284c8:	0042005d 001400ef 008400a7 007300c2     ].B...........s.
  4284d8:	008a0028 004c0042 00340076 008300c3     (...B.L.v.4.....
  4284e8:	00d10086 00eb00db 00fa0015 00f400fb     ................
  4284f8:	00e500c4 00b200f8 005e003b 00bb0095     ........;.^.....
  428508:	00ce0095 004300a8 00d300a3 00af0050     ......C.....P...
  428518:	00a000d7 00d500d1 00af0051 004700af     ........Q.....G.
  428528:	00ab00a3 00ed00bb 005e0035 00cc00ad     ........5.^.....
  428538:	00d40062 00470056 001c00cb 00770096     b...V.G.......w.
  428548:	00160037 00f8001d 00680008 009c007b     7.........h.{...
  428558:	00fc00d6 001c006a 006b0009 002d00c3     ....j.....k...-.
  428568:	009300a3 002800bb 00c8004e 00e700c4     ......(.N.......
  428578:	0033008f 007d0070 0038007c 001700c7     ..3.p.}.|.8.....
  428588:	00a2006f 004a00a9 00ec0043 00fe0027     o.....J.C...'...
  428598:	007800ac 0004007c 00dd0081 00a0003e     ..x.|.......>...
  4285a8:	00250022 00d500bf 002a00c7 00850066     ".%.......*.f...
  4285b8:	00920086 000e006a 005e00cd 005b008f     ....j.....^...[.
  4285c8:	00270027 004600c2 00a7002d 00ba00a9     '.'...F.-.......
  4285d8:	001a00de 00b70027 004e00ce 0075009c     ....'.....N...u.
  4285e8:	008500d9 006000d9 00f5006c 00dc006b     ......`.l...k...
  4285f8:	00a7001a 004300ed 00a00097 00bc00ad     ......C.........
  428608:	00c700fb 00d400af 00c7006d 007800f1     ........m.....x.
  428618:	003c0061 002f001e 0020004e 00db006d     a.<.../.N. .m...
  428628:	00db0089 00bf007e 00250022 00af001f     ....~...".%.....
  428638:	009a00ff 00fb0086 00a30033 00fb0088     ........3.......
  428648:	00180032 003b0043 00fd00d9 002e00d0     2...C.;.........
  428658:	006400e2 001b00d6 007a0089 002d0077     ..d.......z.w.-.
  428668:	00ff005e 000d0035 003f00ef 00cb00be     ^...5.....?.....
  428678:	00990081 0014001e 002500c6 00250073     ..........%.s.%.
  428688:	003000f0 00070039 001300ce 00ed00d8     ..0.9...........
  428698:	00120003 001e0037 004a00e4 006100c0     ....7.....J...a.
  4286a8:	00760056 00620076 006800ef 00320067     V.v.v.b...h.g.2.
  4286b8:	009f0076 00f700c2 00b3004f 00f000d8     v.......O.......
  4286c8:	002900fb 00c500e4 00720026 00cb00e2     ..).....&.r.....
  4286d8:	00e20060 00c300dd 00dd0048 008c007a     `.......H...z...
  4286e8:	0076001d 00b1005f 00e8007d 00360092     ..v._...}.....6.
  4286f8:	00db001d 007e0086 00de00ce 00ce00b1     ......~.........
  428708:	009c0014 00060048 001f006e 00790039     ....H...n...9.y.
  428718:	00f5009e 00f10068 00fb005f 006d002a     ....h..._...*.m.
  428728:	00ce0015 00be00c7 008e00b3 00c60088     ................
  428738:	001b006d 00a500c9 000b00a2 00be002d     m...........-...
  428748:	00b300be 00a700f9 00df00b0 00c4003c     ............<...
  428758:	000300fa 00bc0017 00ad00ce 004400a3     ..............D.
  428768:	00cc0053 009d00c4 00ad00a3 00920023     S...........#...
  428778:	00360037 00e6000d 00fd00a3 005800f3     7.6...........X.
  428788:	00bd0012 00d900a8 00f800b1 004200d0     ..............B.
  428798:	008400e6 00cb00bf 003f0060 00eb001b     ........`.?.....
  4287a8:	00ba00c7 003b0049 007000c7 00ff0026     ....I.;...p.&...
  4287b8:	00e30014 00bf00b7 00f9006d 000d00b5     ........m.......
  4287c8:	0058005d 00a00074 001b00f9 002500b7     ].X.t.........%.
  4287d8:	008b0097 0032002f 0060002c 006d00e0     ..../.2.,.`...m.
  4287e8:	00eb0057 001c005a 00150039 0043009e     W...Z...9.....C.
  4287f8:	00d40067 00740011 00900029 00fc00d7     g.....t.).......
  428808:	005a00fa 001c0003 00110095 00d10081     ..Z.............
  428818:	00fa00dc 00ef009b 008c0087 00230066     ............f.#.
  428828:	00950059 001c0099 008c00c8 003700c4     Y.............7.
  428838:	000b00c1 00e30097 005800cb 00f80072     ..........X.r...
  428848:	006600d3 007100af 008100c1 0018000f     ..f...q.........
  428858:	006700ec 00d800f9 00af0078 00720071     ..g.....x...q.r.
  428868:	006000e9 007f008f 00f70097 00880029     ..`.........)...
  428878:	0069004b 00f900d3 006a00e8 00d8001b     K.i.......j.....
  428888:	00f000e3 002e002d 00ed001d 00ed00d9     ....-...........
  428898:	002d00f8 009700a5 00080073 00ed001b     ..-.....s.......
  4288a8:	00cb008c 00f60023 00f70004 0048005d     ....#.......].H.
  4288b8:	00b600da 006400e3 003e00ec 00e200d5     ......d...>.....
  4288c8:	00120091 00cb001c 00d900c1 005800eb     ..............X.
  4288d8:	00dc00fb 00560038 003b003f 00f80086     ....8.V.?.;.....
  4288e8:	00a10055 009b0018 00d600f4 00ad0038     U...........8...
  4288f8:	00cd00ff 00ae0024 005f0045 00e300bc     ....$...E._.....
  428908:	008c0032 0071009b 007d0072 00040074     2.....q.r.}.t...
  428918:	00960027 00b50004 009c00e9 00f200eb     '...............
  428928:	00d800ca 00ec003e 005c000b 001b001f     ....>.....\.....
  428938:	00e80041 00cb005b 006b00d0 00bf00be     A...[.....k.....
  428948:	006900a2 001900d2 00fb0088 0084002a     ..i.........*...
  428958:	009d0015 0008001c 003600e8 0082008f     ..........6.....
  428968:	00c900e3 009700b4 00ec007d 002200ed     ........}.....".
  428978:	008a004e 005000a2 003e0072 00f4008b     N.....P.r.>.....
  428988:	0027005d 00d800c9 008a0073 00a700eb     ].'.....s.......
  428998:	00390053 00ed00fd 00360036 00fa00f7     S.9.....6.6.....
  4289a8:	00fc0088 00570063 005d0088 004700e8     ....c.W...]...G.
  4289b8:	006c005e 00910022 00ac00ef 00e500c4     ^.l."...........
  4289c8:	007b0051 00d80076 00c9007e 008800d5     Q.{.v...~.......
  4289d8:	00f80073 00990077 009e00c7 004b0011     s...w.........K.
  4289e8:	00b90029 00950070 00bd00cd 0062003f     )...p.......?.b.
  4289f8:	00cf0073 00c9000f 003d000c 006e004d     s.........=.M.n.
  428a08:	006500cc 004500ae 0022005f 008d00b7     ..e...E._.".....
  428a18:	00c10047 00640089 009500b4 00af0037     G.....d.....7...
  428a28:	003500d6 0073009f 00b8000a 00b100b0     ..5...s.........
  428a38:	007300c5 00e800d6 005800ea 006a0073     ..s.......X.s.j.
  428a48:	00fd0015 007b00bc 00cb00d0 002b00b3     ......{.......+.
  428a58:	00760093 0021008e 00bc00b5 003700e5     ..v...!.......7.
  428a68:	00c500c8 00f300a2 00850038 00d900bc     ........8.......
  428a78:	004e002c 00550039 00190057 00c500b5     ,.N.9.U.W.......
  428a88:	00c500a1 00ea0089 001e001f 00430037     ............7.C.
  428a98:	00f90069 00390098 002d0088 00830097     i.....9...-.....
  428aa8:	002f0048 00e5004f 00c0008d 00d600c1     H./.O...........
  428ab8:	00d70091 006300f2 00de00df 00fb00f5     ......c.........
  428ac8:	0050005c 00cf009b 006d00d8 00ad0023     \.P.......m.#...
  428ad8:	00f30057 001600ee 004600a7 00030043     W.........F.C...
  428ae8:	00e7005e 003100d6 00a30070 000a00e5     ^.....1.p.......
  428af8:	008800df 005b0020 00e400ce 006e009f     .... .[.......n.
  428b08:	00b600f3 00460096 00030043 0052007b     ......F.C...{.R.
  428b18:	00310076 006c002b 00f6001a 0087009b     v.1.+.l.........
  428b28:	00680032 001f0063 007a00fa 00a70077     2.h.c.....z.w...
  428b38:	005700b7 00db00d7 00df005e 00ff00cd     ..W.....^.......
  428b48:	003100fe 000a0071 00bb00ee 00f20080     ..1.q...........
  428b58:	007c003b 00ba0094 00a90095 00cf0049     ;.|.........I...
  428b68:	00b900a1 0070001b 006800ee 00b600c7     ......p...h.....
  428b78:	009f0021 00fd0073 001a004c 001c007b     !...s...L...{...
  428b88:	00c300bf 00a300b9 002b003d 00f6007f     ........=.+.....
  428b98:	001b0016 003f007e 00f50085 009b00bf     ....~.?.........
  428ba8:	00e200dc 00ee00b1 004900a5 007500b8     ..........I...u.
  428bb8:	00c20076 00e700fd 008800a3 00be009a     v...............
  428bc8:	00aa0086 0042008c 00140050 009c006b     ......B.P...k...
  428bd8:	00ff007c 008b003c 00f800e2 003600cc     |...<.........6.
  428be8:	00c900c5 000900ed 00ae0047 004700f8     ........G.....G.
  428bf8:	00e900b7 000d009c 001d005a 00960067     ........Z...g...
  428c08:	006400ef 002f00f5 00e30046 00c200f1     ..d.../.F.......
  428c18:	00f20004 007d008f 0042003f 004c00ae     ......}.?.B...L.
  428c28:	00b700cd 00b0004c 00e1003f 00a100c0     ....L...?.......
  428c38:	001b0039 00d500da 00e80006 00110076     9...........v...
  428c48:	00800027 001100ab 008400f1 00f500be     '...............
  428c58:	0042004f 00fa00df 00bb0027 00bf00ec     O.B.....'.......
  428c68:	00c30066 0027006f 00fe00e3 002800f4     f...o.'.......(.
  428c78:	007600d2 005100c6 003e007c 00fc008b     ..v...Q.|.>.....
  428c88:	00490063 007700f8 001f0079 008e00e7     c.I...w.y.......
  428c98:	00040076 002c00db 006a00e4 003c0064     v.....,...j.d.<.
  428ca8:	00030021 00910016 006600b0 00e9002f     !.........f./...
  428cb8:	00e3003b 00f30058 005800dc 001f005c     ;...X.....X.\...
  428cc8:	0081001b 009f00ef 00b10066 00e00065     ........f...e...
  428cd8:	006c00a7 00d00019 002300b6 00c00064     ..l.......#.d...
  428ce8:	00f60022 0072004d 00ce00b3 00dc0013     "...M.r.........
  428cf8:	0027001e 001600df 005700cf 00d300a3     ..'.......W.....
  428d08:	007100e0 009d00da 003e007e 008f0077     ..q.....~.>.w...
  428d18:	008500d3 000400a2 0083001c 00c7009b     ................
  428d28:	00b70029 001a00e6 00b600a3 0034003a     )...........:.4.
  428d38:	0063007b 00f300f6 00c100e9 00df0000     {.c.............
  428d48:	00b700de 00bd001c 00e80018 009b00db     ................
  428d58:	00fe0021 00b100fd 007c000d 0069008d     !.........|...i.
  428d68:	0026007b 00fd00b1 001600ca 009b006a     {.&.........j...
  428d78:	00c9006a 00ca00a9 002900c1 00ce00d8     j.........).....
  428d88:	0072003a 002e00fa 00eb00f6 00de00bb     :.r.............
  428d98:	002500fa 003a00a7 007200db 006d001e     ..%...:...r...m.
  428da8:	0039001c 008d0069 007c005a 003c0013     ..9.i...Z.|...<.
  428db8:	007100ad 00db00b2 0084003c 00d70063     ..q.....<...c...
  428dc8:	00db0062 00a000b4 00ac00d4 00890098     b...............
  428dd8:	000f0048 003600c7 00500070 00ab00b3     H.....6.p.P.....
  428de8:	00b60075 00830001 00080070 006500b2     u.......p.....e.
  428df8:	008e00c2 00cc0051 009b000a 008400ca     ....Q...........
  428e08:	006f001d 00bf0063 00080079 00de0036     ..o.c...y...6...
  428e18:	007f00dd 009c0074 00fa0082 00a0002c     ....t.......,...
  428e28:	004a00fc 005d00ee 000900cf 00a800c0     ..J...].........
  428e38:	007300d5 00e60070 009c003a 00da003b     ..s.p...:...;...
  428e48:	007d00b1 009200c8 00e2005b 00c70064     ..}.....[...d...
  428e58:	001700ba 00100027 007f00d2 00210011     ....'.........!.
  428e68:	003e00fd 00f10069 00ee0008 000900f7     ..>.i...........
  428e78:	00c7007b 00730038 007300d1 0075003f     {...8.s...s.?.u.
  428e88:	00650079 00f500d6 00370052 00b400e3     y.e.....R.7.....
  428e98:	007f00f1 00a300df 007c00e4 00db0056     ..........|.V...
  428ea8:	00d400e2 008900c9 00b000cc 006d00d3     ..............m.
  428eb8:	0067003a 00510045 00880028 0021004b     :.g.E.Q.(...K.!.
  428ec8:	00d500f0 00b800f9 0062003c 00a100cf     ........<.b.....
  428ed8:	00eb00d9 00e90031 0077002c 00bd007f     ....1...,.w.....
  428ee8:	002100b8 001200d2 005f00ad 00bc004f     ..!......._.O...
  428ef8:	00870031 004e00d6 004d0086 00a300b4     1.....N...M.....
  428f08:	00650038 003900ec 00eb008d 002300a3     8.e...9.......#.
  428f18:	00de0058 000d00e1 00770096 00c30078     X.........w.x...
  428f28:	00130072 002700b9 0038009c 006900f6     r.....'...8...i.
  428f38:	00460020 009e00ad 00de004b 00b80051      .F.....K...Q...
  428f48:	00c200ff 00d400b2 00ff00c0 007300ef     ..............s.
  428f58:	000a00c9 00cb003f 003900a1 0028001b     ....?.....9...(.
  428f68:	007200bf 00a8008d 00d70077 00f200e0     ..r.....w.......
  428f78:	007000e8 001c00eb 00ad00d2 007d009b     ..p...........}.
  428f88:	007200db 00ee006c 001100fd 00690095     ..r.l.........i.
  428f98:	00c00005 008b00fd 00b50053 009a00b6     ........S.......
  428fa8:	00610019 00ac0053 00a200a3 00410011     ..a.S.........A.
  428fb8:	00f000c3 00b7003e 00b0009e 00dd00d4     ....>...........
  428fc8:	008e00cd 00f40088 009c00bd 003b00cc     ..............;.
  428fd8:	00620041 006500f1 00b4006a 00d60035     A.b...e.j...5...
  428fe8:	00140030 008a006b 00110098 00fd00f6     0...k...........
  428ff8:	00bc0015 003b00c9 005300c7 005f0052     ......;...S.R._.
  429008:	00ea00d2 005700f7 00210041 0033002a     ......W.A.!.*.3.
  429018:	001a00d2 00b60081 00c900c4 009800ac     ................
  429028:	004b0009 00c300dd 00800090 00f40001     ..K.............
  429038:	00ea00f2 002000ca 00be00bf 00ba006c     ...... .....l...
  429048:	008700e8 009600f6 00920085 00a900ad     ................
  429058:	00aa006d 00a300e5 00f300fd 006b00ac     m.............k.
  429068:	005e009b 00ef00f7 00b200cf 00df00a3     ..^.............
  429078:	00b90070 002200f8 00da0035 00b4001a     p.....".5.......
  429088:	002d0006 00a3003a 00390065 00760044     ..-.:...e.9.D.v.
  429098:	006500a5 00790014 003900b7 000500a7     ..e...y...9.....
  4290a8:	003f00fb 00310068 00de004e 009c007f     ..?.h.1.N.......
  4290b8:	00d500c1 00f80088 00bd0036 001b0031     ........6...1...
  4290c8:	00aa004a 003a00d9 005300f0 001e005c     J.....:...S.\...
  4290d8:	002700b1 00a20062 0055001b 00850019     ..'.b.....U.....
  4290e8:	009f00ec 008e00e2 00a300cb 00ec0076     ............v...
  4290f8:	00ff00b2 0086009a 006a00d2 005a000c     ..........j...Z.
  429108:	00ab005d 00cd00c7 00ba00c5 006a00b7     ].............j.
  429118:	00a70016 006d000b 0053008f 00f80056     ......m...S.V...
  429128:	003f00ed 00ac00ae 00ba0035 0006009a     ..?.....5.......
  429138:	003e0062 008800da 009300db 0078008e     b.>...........x.
  429148:	00f700ff 000a0074 00a6004f 009b0052     ....t...O...R...
  429158:	00ca005b 00c7001e 007000ef 00cc007d     [.........p.}...
  429168:	003200de 00d500ff 00f90086 0035002b     ..2.........+.5.
  429178:	00370069 00aa0071 00b800ca 00f7008e     i.7.q...........
  429188:	00cc00ff 007e0068 00ed00a5 00e10091     ....h.~.........
  429198:	001e00ec 009400be 00c400b2 0044006b     ............k.D.
  4291a8:	005e004c 008a00c5 00db001b 00bc0055     L.^.........U...
  4291b8:	00e700ff 0052005d 001c00b6 00330025     ....].R.....%.3.
  4291c8:	000c00ec 00570065 00b100ae 00af00f1     ....e.W.........
  4291d8:	00b100ef 009500bc 009b00c5 003b0077     ............w.;.
  4291e8:	003c0056 00c000ee 00a900fe 003400ee     V.<...........4.
  4291f8:	00580094 00bd0026 004700ef 003c009c     ..X.&.....G...<.
  429208:	007900cf 006800d0 00c40068 00bc00ff     ..y...h.h.......
  429218:	00f500af 00e7005e 00030043 00b00006     ....^...C.......
  429228:	00310035 00d500a8 00230079 004900bd     5.1.....y.#...I.
  429238:	00bd004f 00de00be 00a7001a 00430046     O...........F.C.
  429248:	006e0003 00ce0071 00c700d6 00f300f7     ..n.q...........
  429258:	00c100ee 00c400d6 00db00e0 00d400b6     ................
  429268:	00650080 00930014 00930057 00bc00cb     ..e.....W.......
  429278:	00b3007d 00bc00db 00200094 00f000a1     }......... .....
  429288:	0000001c 00a50049 00980057 007300b4     ....I...W.....s.
  429298:	00bd000c 002c00bc 0027008b 00ec00e7     ......,...'.....
  4292a8:	0097007d 00c500cb 005a0097 003d001c     }.........Z...=.
  4292b8:	008a0029 00930042 008b0051 002800a2     )...B...Q.....(.
  4292c8:	00af005c 0064002b 00d80066 00eb0054     \...+.d.f...T...
  4292d8:	00cb00a2 00a10019 00480053 00bb002b     ........S.H.+...
  4292e8:	00fb00fd 002800a3 00a9000a 002900e5     ......(.......).
  4292f8:	00060038 00b500db 00a7001c 005300bd     8.............S.
  429308:	001f00ad 006600fd 004e0084 002e00b1     ......f...N.....
  429318:	008400d0 002700ef 005700c4 00fc00fd     ......'...W.....
  429328:	008e006d 000a002d 00eb00b8 001a0047     m...-.......G...
  429338:	00c100b3 00660044 001900d8 00ff00d6     ....D.f.........
  429348:	00120066 004f006e 0092003a 00be00e0     f...n.O.:.......
  429358:	00630017 008e00a3 00f70004 00dc0030     ..c.........0...
  429368:	0039003a 00f500e1 00d300df 003d00c9     :.9...........=.
  429378:	00190072 00e900b3 00f600de 00de0015     r...............
  429388:	0038008f 005c0001 008c008d 00eb00c7     ..8...\.........
  429398:	00d3000f 00eb0071 00c000e4 00c500f1     ....q...........
  4293a8:	0049009b 007400da 00cf0004 004c003f     ..I...t.....?.L.
  4293b8:	00d50065 00a300d3 00db0048 00770011     e.......H.....w.
  4293c8:	005f004f 000d004b 004d00da 008c009c     O._.K.....M.....
  4293d8:	007a004d 00c700c2 005a00bb 00400047     M.z.......Z.G.@.
  4293e8:	00470037 009e0041 003100ff 00a80095     7.G.A.....1.....
  4293f8:	006b00e9 00f900f0 000c00e3 00af00eb     ..k.............
  429408:	00ff00ad 00c9008f 008400a4 00a5001c     ................
  429418:	004a00a9 00fa0043 003800ce 003a00dc     ..J.C.....8...:.
  429428:	00b800fd 00e20095 001d00ce 005800ec     ..............X.
  429438:	00cb00f3 005c00b1 008800f0 006e00b0     ......\.......n.
  429448:	00bd00fe 0071005f 0032006a 00910036     ...._.q.j.2.6...
  429458:	00990055 00f800c9 006f001d 003f005b     U.........o.[.?.
  429468:	008d0066 00ea00da 00680040 002e00ca     f.......@.h.....
  429478:	0034008a 00e80045 003a008d 0066004c     ..4.E.....:.L.f.
  429488:	003a0013 008e00a3 008600f2 00a20072     ..:.........r...
  429498:	00220032 00ba0009 00400014 009d0051     2.".......@.Q...
  4294a8:	00b10065 00c900a8 00e4006c 00ce0068     e.......l...h...
  4294b8:	00460011 00d80086 003f005b 008d0036     ..F.....[.?.6...
  4294c8:	00ea00de 00ae00c8 00ed00a4 00af005c     ............\...
  4294d8:	00b4002b 000d00ec 00190034 00e800d0     +.......4.......
  4294e8:	004800ea 00bd002e 00f200c2 004b0063     ..H.........c.K.
  4294f8:	00b40019 00cf00b1 00af003d 006a0073     ........=...s.j.
  429508:	00d700d0 007e00e3 00050072 006f00bd     ......~.r.....o.
  429518:	00a500ac 00e0001a 008b00db 00070045     ............E...
  429528:	0022003f 00f000a1 0075001c 00da00ba     ?.".......u.....
  429538:	00fb001b 00b400f1 003400d4 007000d5     ..........4...p.
  429548:	00ff0026 00db0014 006c00af 004800a1     &.........l...H.
  429558:	009d0073 008600f2 00e60032 009b00ed     s.......2.......
  429568:	007d006d 0013006d 008c0076 002e0022     m.}.m...v..."...
  429578:	003800f7 00d30006 00fb00f7 001b0015     ..8.............
  429588:	00f500f4 009400a4 00f30025 00cc0075     ........%...u...
  429598:	00fa0012 00f400fb 006d00bc 00bc0042     ..........m.B...
  4295a8:	00a100a2 000f009c 00e70023 00d6005a     ........#...Z...
  4295b8:	00790071 00c50075 00f80031 004e004d     q.y.u...1...M.N.
  4295c8:	009f00e7 007a00e4 0021005d 0093003a     ......z.].!.:...
  4295d8:	0044008e 004300bf 00450096 001d00b7     ..D...C...E.....
  4295e8:	00f100ed 00cb00fd 0032006c 009f0076     ........l.2.v...
  4295f8:	0071006c 00030064 00cb0096 00c500ed     l.q.d...........
  429608:	00b300e7 00e300d8 001d00f4 008f00ae     ................
  429618:	00c7000d 006f00ef 00290073 006400bd     ......o.s.)...d.
  429628:	00690059 007a005f 001b0029 00ff00bf     Y.i._.z.).......
  429638:	0083009d 001300eb 0044000e 0071004e     ..........D.N.q.
  429648:	003200a7 00d000bd 000300fa 007e0033     ..2.........3.~.
  429658:	00a400c8 00520037 0029007a 00fa0087     ....7.R.z.).....
  429668:	002a00a2 004800eb 007e00ed 00a900c5     ..*...H...~.....
  429678:	00b400b1 00bd0086 005c0063 004b002c     ........c.\.,.K.
  429688:	00fe006b 000e0077 005e00db 001c00ff     k...w.....^.....
  429698:	004e00b7 006c008e 00bf00e9 00c60088     ..N...l.........
  4296a8:	00da00f2 00fa007b 006a005a 006e00d0     ....{...Z.j...n.
  4296b8:	000400e2 00be0090 008e0023 00cf00b5     ........#.......
  4296c8:	006f008f 00ca00be 00a300bb 002b003d     ..o.........=.+.
  4296d8:	0039003a 00f200e0 00f700c8 00db001f     :.9.............
  4296e8:	005e003c 00c00098 009f0065 00180003     <.^.....e.......
  4296f8:	007a00b5 00a600a2 00f900af 00b60097     ..z.............
  429708:	000400af 00fe00f5 00a20098 00190073     ............s...
  429718:	00bf00d6 00f70050 004e0027 006800eb     ....P...'.N...h.
  429728:	00340032 00520061 00ec004c 00dd004d     2.4.a.R.L...M...
  429738:	006d0083 006b00e0 00e700d6 0016001b     ..m...k.........
  429748:	00880030 00fb0079 00b30066 00ac00e1     0...y...f.......
  429758:	005b0007 00830013 008a00f1 00c7005f     ..[........._...
  429768:	00910087 00b10073 003c00df 00a10094     ....s.....<.....
  429778:	00030001 00750058 00d500d2 005100ba     ....X.u.......Q.
  429788:	004a00b6 00c9005b 00d3009a 00ad002b     ..J.[.......+...
  429798:	00420073 00bc007d 00f100ba 00e00046     s.B.}.......F...
  4297a8:	00e60060 00cf0084 00fd00c0 000a00d4     `...............
  4297b8:	00ce00fc 00b000fb 00f60034 00de004b     ........4...K...
  4297c8:	003900d9 00410096 00ae0037 00dd00b8     ..9...A.7.......
  4297d8:	003a00eb 00b00027 005500cc 00dd004d     ..:.'.....U.M...
  4297e8:	00d1003d 001100fa 009f00b4 000f004f     =...........O...
  4297f8:	006c00c6 00620073 00f40071 00ac0027     ..l.s.b.q...'...
  429808:	00e3003d 00ea00ce 006e0053 0072007c     =.......S.n.|.r.
  429818:	001f00e0 00b500bc 009e00c5 00010061     ............a...
  429828:	00700083 00be0039 006b008c 003900d5     ..p.9.....k...9.
  429838:	001c00b8 0066005f 0083005d 00df00d5     ...._.f.].......
  429848:	001700b7 00420033 00b30027 00a200e9     ....3.B.'.......
  429858:	0007003f 00a200b3 009500d8 001d00b4     ?...............
  429868:	00e300e7 00f100df 00ce00ce 00d600b1     ................
  429878:	00e100ef 00e7000f 00ea009c 006a009a     ..............j.
  429888:	00ee00f9 00d700e8 00f800d8 00a000f4     ................
  429898:	00570097 006c0057 007a007c 00f600f0     ..W.W.l.|.z.....
  4298a8:	00110096 003e002c 009000b4 00aa00cc     ....,.>.........
  4298b8:	002e004c 001c0007 00b100bc 00c0003b     L...........;...
  4298c8:	00b70001 004e00ce 00fd00f8 000e006d     ......N.....m...
  4298d8:	00d60017 00500045 005c005f 00ec00d5     ....E.P._.\.....
  4298e8:	009e0023 00ab0051 00330027 000c00fc     #...Q...'.3.....
  4298f8:	00de003b 008a00f8 003f0095 0089001b     ;.........?.....
  429908:	003300fb 00b800a3 001d00e4 000d0065     ..3.........e...
  429918:	00d90099 00e40060 00ef00b2 00d60041     ....`.......A...
  429928:	0037003c 00f70016 00460067 003e0011     <.7.....g.F...>.
  429938:	008500d6 00e300fc 00980049 00b7000c     ........I.......
  429948:	000b002c 00a00051 00ac00b1 008b0086     ,...Q...........
  429958:	002300eb 00b60009 00c00059 004500d1     ..#.....Y.....E.
  429968:	00370001 00750002 00e200ff 009800a4     ..7...u.........
  429978:	00520015 001f00b7 00fd00c7 00b700e9     ..R.............
  429988:	007d0071 00380074 009e002b 00c00070     q.}.t.8.+...p...
  429998:	009900fd 005c0051 008c00f4 0075006c     ....Q.\.....l.u.
  4299a8:	00a000bf 00b5009a 003800ab 000a0069     ..........8.i...
  4299b8:	00d8002b 00fb0061 00b30065 00e20095     +...a...e.......
  4299c8:	00bc003f 009c00b9 00070073 00dc003b     ?.......s...;...
  4299d8:	0019009f 003900cd 00dd00d7 00a40054     ......9.....T...
  4299e8:	00e300e6 00b700f7 003f00b9 007f007a     ..........?.z...
  4299f8:	008a00dd 008e00ce 00fb001c 0010002c     ............,...
  429a08:	00dd005d 001f00f7 00ee0085 009c0067     ]...........g...
  429a18:	001a0000 008d000d 00c400f8 0068006f     ............o.h.
  429a28:	00890076 008f00bf 006500b7 005d005f     v.........e._.].
  429a38:	009f005f 002d0057 00eb00fb 006c006e     _...W.-.....n.l.
  429a48:	00e800ef 00d500e3 0099008d 00530061     ............a.S.
  429a58:	005600b9 0003009d 003e0058 005d0012     ..V.....X.>...].
  429a68:	00ce00ab 00610061 008700d4 005500d6     ....a.a.......U.
  429a78:	00cd00e2 00ef001e 009d00dd 00de003e     ............>...
  429a88:	00ac00dd 001f008f 0030001a 00a10080     ..........0.....
  429a98:	00e60037 00ee008f 004e0025 00a2008a     7.......%.N.....
  429aa8:	00580090 00990072 00bb00a9 00b40027     ..X.r.......'...
  429ab8:	003c00f8 009f0037 00e600e3 00d800f3     ..<.7...........
  429ac8:	007e006d 00b0009d 00dd00d4 002d009c     m.~...........-.
  429ad8:	00cd0038 009b009b 00370006 00f300ff     8.........7.....
  429ae8:	00af003e 00600032 002f0063 00f900fa     >...2.`.c./.....
  429af8:	00b000f4 00b000ae 00b8001f 003700b1     ..............7.
  429b08:	003700c3 00bd000f 004e002d 00930006     ..7.....-.N.....
  429b18:	009d0081 00db0049 00e7002c 00cb007c     ....I...,...|...
  429b28:	00f3008f 00b3001a 0024006d 00650089     ........m.$...e.
  429b38:	00b90097 0070001c 00d70010 00c3008e     ......p.........
  429b48:	00ff00f1 005c00fb 00c700c2 00b000b9     ......\.........
  429b58:	00e700ea 00b3006f 00a900ea 000800b7     ....o...........
  429b68:	00b700e9 00a30090 00f8009f 00bf0013     ................
  429b78:	008c002a 00cb00d3 00b300b6 00c4007b     *...........{...
  429b88:	00d60052 006600ff 002e0012 000e008f     R.....f.........
  429b98:	00f50067 00c7002f 00ea0070 00ed00bb     g.../...p.......
  429ba8:	007f0018 00d200b0 007800da 008a00f3     ..........x.....
  429bb8:	007300d8 00710063 0074007d 00de0038     ..s.c.q.}.t.8...
  429bc8:	007c007f 00c80097 00ee0029 00f0005c     ..|.....)...\...
  429bd8:	004700d8 00c600e2 001c0043 00b2005f     ..G.....C..._...
  429be8:	00ad0099 00170083 00ea00b3 00a300e7     ................
  429bf8:	00fb0070 00230099 00670007 00500079     p.....#...g.y.P.
  429c08:	0068005f 00ef0059 00bf0075 000400e2     _.h.Y...u.......
  429c18:	009b0096 00060031 002c00db 00be00b4     ....1.....,.....
  429c28:	00820027 002c00fa 002600a0 00f800bb     '.....,...&.....
  429c38:	000f00ee 00a10054 00150076 00930027     ....T...v...'...
  429c48:	004000de 005f00a2 00eb0034 003f007f     ..@..._.4.....?.
  429c58:	00f500b9 00cd009b 00b00075 00ed00c7     ........u.......
  429c68:	00470009 00cc000e 00e000f4 00f200cc     ..G.............
  429c78:	00ac001d 007a007a 008f00d4 0035001e     ....z.z.......5.
  429c88:	007700f9 00670099 000400d9 008b007a     ..w...g.....z...
  429c98:	00b200b4 00260014 001c00ec 006d008d     ......&.......m.
  429ca8:	006b00e0 000600d8 004600be 00e500c8     ..k.......F.....
  429cb8:	002d004d 006b009e 005e00bd 006f0083     M.-...k...^...o.
  429cc8:	002700bc 003700c3 00c5000f 00700036     ..'...7.....6.p.
  429cd8:	00ef0010 007d00ed 00f40097 00b400f2     ......}.........
  429ce8:	00ff0016 0062006c 006500c9 00d900de     ....l.b...e.....
  429cf8:	00160039 00c000db 00d80041 001e006f     9.......A...o...
  429d08:	00ff0082 00df0079 00730066 001a004b     ....y...f.s.K...
  429d18:	001d005d 006900e1 00cc0061 003b00de     ].....i.a.....;.
  429d28:	0061009d 00030081 007700e9 00b70063     ..a.......w.c...
  429d38:	00df007f 00bb001b 000700f7 00f600fa     ................
  429d48:	00640061 003d0088 008e00cb 0043007e     a.d...=.....~.C.
  429d58:	0059006a 006d00f2 003d000b 0035008b     j.Y...m...=...5.
  429d68:	005900d7 00660077 00a3000d 003900b7     ..Y.w.f.......9.
  429d78:	00ba00f1 00bf007f 006f001b 00cb007c     ..........o.|...
  429d88:	00fb00e3 00f600fb 008d00e4 00af004d     ............M...
  429d98:	00770031 004c00df 005c008e 00c4003d     1.w...L...\.=...
  429da8:	00310037 0030005f 0060002c 00b60010     7.1._.0.,.`.....
  429db8:	00af0081 00780011 000f00d1 00d90093     ......x.........
  429dc8:	008d0064 00c800c0 007b0010 0003006c     d.........{.l...
  429dd8:	00e10007 006c0010 008500cb 00e700eb     ......l.........
  429de8:	003d009b 00820087 00760042 00160055     ..=.....B.v.U...
  429df8:	00c7002e 00310097 00ab006a 00830003     ......1.j.......
  429e08:	00fa00fc 00cf005a 00af00b1 00770077     ....Z.......w.w.
  429e18:	00f900fa 006000f4 00c00048 00260000     ......`.H.....&.
  429e28:	001a00ed 00e600c3 0001008b 00370094     ..............7.
  429e38:	00610094 004c0052 00e600c4 003000c4     ..a.R.L.......0.
  429e48:	00d70065 006600f8 00740077 00ef00e8     e.....f.w.t.....
  429e58:	009300db 001b0041 003000fb 00c80022     ....A.....0."...
  429e68:	000f0096 00e70022 00280070 008a002b     ...."...p.(.+...
  429e78:	00c9009d 00b100db 00f400db 006f003a     ............:.o.
  429e88:	001a006e 00d700cc 004b0031 00cf00ac     n.......1.K.....
  429e98:	0052005b 00cc005f 00b30086 0099006b     [.R._.......k...
  429ea8:	006300b0 00c30014 00860083 001b0061     ..c.........a...
  429eb8:	00880038 00430077 002100df 003c00b9     8...w.C...!...<.
  429ec8:	00a40089 00180090 005e003c 004f001c     ........<.^...O.
  429ed8:	003b00c4 0054006e 00e600a4 006e0073     ..;.n.T.....s.n.
  429ee8:	001e00e5 00ba0002 006700ce 00b300cd     ..........g.....
  429ef8:	00580063 00d900d9 00b70009 002300ce     c.X...........#.
  429f08:	00eb0071 0012003c 004e00d7 00f00023     q...<.....N.#...
  429f18:	007e0078 005b0002 002c0006 00d10022     x.~...[...,."...
  429f28:	001000ef 006d0006 00f700cb 003200ef     ......m.......2.
  429f38:	00f5006a 0009005c 00660088 008000cb     j...\.....f.....
  429f48:	00ac0045 007e007d 006e001c 003a004f     E...}.~...n.O.:.
  429f58:	00b200b2 004800f3 003e0056 001600f9     ......H.V.>.....
  429f68:	009f002b 00c9001c 005f00ea 0066008c     +........._...f.
  429f78:	005f00e3 002300de 00eb00ee 00340010     .._...#.......4.
  429f88:	00150085 00f500d6 00050044 009300c7     ........D.......
  429f98:	00f900f1 0033007f 00ea0009 008000bb     ......3.........
  429fa8:	00cb00b2 002d0039 00ed007e 004a009b     ....9.-.~.....J.
  429fb8:	0065002f 00ed00b3 00cf00f5 00ff0059     /.e.........Y...
  429fc8:	00c900bb 00470064 00bf009d 009f00e3     ....d.G.........
  429fd8:	004d006d 009a00c2 00ac00bd 00cc0078     m.M.........x...
  429fe8:	00550081 00bd004f 00e900c5 006e007f     ..U.O.........n.
  429ff8:	00d800c7 00eb00ca 00bb0051 00150076     ........Q...v...
  42a008:	00140027 00fa0085 009500eb 009a001c     '...............
  42a018:	000100bb 00a700f7 00e600de 009b004e     ............N...
  42a028:	00d70078 006a00fc 00eb001c 009a005e     x.....j.....^...
  42a038:	00f30084 0022001d 00a70076 002600b9     ......".v.....&.
  42a048:	0017008f 007300c6 002b00c9 00b200ca     ......s...+.....
  42a058:	00e9008f 00d50016 002a00da 00af00a2     ..........*.....
  42a068:	0020001e 002d003c 00f00094 005000b4     .. .<.-.......P.
  42a078:	002a0032 00be005a 00a40023 006c00c1     2.*.Z...#.....l.
  42a088:	00a50020 0089002c 00f40088 008400bd      ...,...........
  42a098:	008500a7 00340072 00860027 00ed006a     ....r.4.'...j...
  42a0a8:	002b00ed 00c100c9 00770032 009d0012     ..+.....2.w.....
  42a0b8:	00040075 00cb0064 000000b9 00050000     u...d...........
  42a0c8:	004900d5 00410044 00900054 00b400f0     ..I.D.A.T.......
  42a0d8:	00f60050 008500a5 005a0091 00720096     P.........Z...r.
  42a0e8:	0060005b 0066008c 00b90023 00d70035     [.`...f.#...5...
  42a0f8:	004d0008 00c900d9 009300aa 002c00ae     ..M...........,.
  42a108:	00fd008d 006f0092 00960062 00ec00b0     ......o.b.......
  42a118:	003700e8 00c400f8 00e0006f 005e0054     ..7.....o...T.^.
  42a128:	0035001c 00d5004d 002e00ad 00680017     ..5.M.........h.
  42a138:	00360032 00b10071 000200e8 00970041     2.6.q.......A...
  42a148:	00700002 00be0039 006f008c 00be0062     ..p.9.....o.b...
  42a158:	009b00e0 00250098 008c00ac 00210073     ......%.....s.!.
  42a168:	002d003c 00bc0094 005c009a 008a00cc     <.-.......\.....
  42a178:	000b0099 001300d7 00af00ac 00b5002d     ............-...
  42a188:	0005002c 006200b3 00ac00c6 00c90098     ,.....b.........
  42a198:	00cc00aa 007f0064 00040046 006900e1     ....d...F.....i.
  42a1a8:	004400a1 008700a6 00de0053 00fb0070     ..D.....S...p...
  42a1b8:	00090036 00850005 005d003a 0009001d     6.......:.].....
  42a1c8:	00e70085 003b00f0 00c300ef 006300f2     ......;.......c.
  42a1d8:	00f9004b 00660026 004b0009 00be0063     K...&.f...K.c...
  42a1e8:	00ed00c0 007200c4 005f00b6 004200d9     ......r..._...B.
  42a1f8:	0059004a 003a0032 00f700e3 0094002b     J.Y.2.:.....+...
  42a208:	008a00cd 00d40099 006400b2 005f00b6     ..........d..._.
  42a218:	00610009 00a900cd 007c0095 00fb0017     ..a.......|.....
  42a228:	002b0035 005c00e3 00bf00f0 00cb00e0     5.+...\.........
  42a238:	009c00b1 008a0018 00450035 00280028     ........5.E.(.(.
  42a248:	006b0014 00d8008a 00160097 00be00c6     ..k.............
  42a258:	003000b4 000b00e2 00df009b 00a10011     ..0.............
  42a268:	00df0041 00460040 001a0045 003900b1     A...@.F.E.....9.
  42a278:	00090087 000b004f 00260025 009a003b     ....O...%.&.;...
  42a288:	006d002a 00550025 00850019 00fa0024     *.m.%.U.....$...
  42a298:	0022001d 00e800ff 00eb0015 00b500fe     ..".............
  42a2a8:	00c400b2 005c006b 001f005c 00e100c9     ....k.\.\.......
  42a2b8:	005e00f9 00bc0044 009200b3 002900c8     ..^.D.........).
  42a2c8:	001c00ee 00ef009e 009500cd 00c30080     ................
  42a2d8:	00a60054 00df00e6 00f50071 00580036     T.......q...6.X.
  42a2e8:	00350016 00a40056 00700015 00200025     ..5.V.....p.%. .
  42a2f8:	00d8009a 00fe0085 004e0044 0049005e     ........D.N.^.I.
  42a308:	00e400e4 00440055 00ef00bf 00c20049     ....U.D.....I...
  42a318:	003000ea 00ce008a 006300a6 00680068     ..0.......c.h.h.
  42a328:	00ea003e 002f00aa 002400aa 00280039     >...../...$.9.(.
  42a338:	00f40086 0027005d 007700ad 006800b7     ....].'...w...h.
  42a348:	0063004d 002d0079 00610099 00b80067     M.c.y.-...a.g...
  42a358:	00100012 006d004d 00ed00ee 00e300df     ....M.m.........
  42a368:	003100bb 004d001b 0058009c 00840012     ..1...M...X.....
  42a378:	006300eb 00080023 003600e8 0082009f     ..c.#.....6.....
  42a388:	00e400b8 00f90076 000e0091 005b00da     ....v.........[.
  42a398:	0000009c 00850014 004b00d2 00ec00d9     ..........K.....
  42a3a8:	00f80071 00d70016 00ee0047 0098001c     q.......G.......
  42a3b8:	00dd00b6 00fc004b 00c700f6 007e00ad     ....K.........~.
  42a3c8:	00340076 005f0071 00a00085 005500ab     v.4.q._.......U.
  42a3d8:	000f00df 005400d2 00a80050 00d700d7     ......T.P.......
  42a3e8:	00d10053 004e0058 00430079 00550019     S...X.N.y.C...U.
  42a3f8:	0055008d 009b00d6 00b500de 00d10085     ..U.............
  42a408:	00a4006c 00a900a6 00f20086 00320086     l.............2.
  42a418:	001b00ca 00a800ca 00d500d3 009f00fd     ................
  42a428:	00d500dc 006000d2 00500036 00ad00ad     ......`.6.P.....
  42a438:	00bc00a2 008c00a1 0086008a 00340072     ............r.4.
  42a448:	00ba00ba 00ae003b 003200b3 004d0099     ....;.....2...M.
  42a458:	00180034 00a8001a 00ac006c 00a30044     4.......l...D...
  42a468:	00b300ab 008c004e 00e400b7 007e009e     ....N.........~.
  42a478:	00970054 006d00c2 0008004b 00930014     T.....m.K.......
  42a488:	00a60099 007a00ea 008b00ea 00a9002a     ......z.....*...
  42a498:	00ae002f 006c00b2 00bd00f0 00f500c7     /.....l.........
  42a4a8:	008a003f 00410059 00df005f 00f90064     ?...Y.A._...d...
  42a4b8:	0045001a 00340055 00d70055 00fb00ff     ..E.U.4.U.......
  42a4c8:	00d30036 00fc002a 005500e8 005500dc     6...*.....U...U.
  42a4d8:	00d70019 007f00f1 002e0079 004f006e     ........y...n.O.
  42a4e8:	0072003a 000300e4 001a001f 006a00cb     :.r...........j.
  42a4f8:	003d00fe 00f400e7 00b40000 003800bf     ..=...........8.
  42a508:	00f90061 005500cb 009a0091 000e00cf     a.....U.........
  42a518:	002f00db 00ed0070 00fc0038 00bc005f     ../.p...8..._...
  42a528:	00d30067 006100ed 00ec00b2 006a00a9     g.....a.......j.
  42a538:	002b003f 00c50069 004b00c3 009a0031     ?.+.i.....K.1...
  42a548:	001b0030 0098008c 004600f5 000b00ea     0.........F.....
  42a558:	0089002b 00bb009e 00d70001 008600c7     +...............
  42a568:	00f500e3 00d300df 003900c9 00b10074     ..........9.t...
  42a578:	008e00dd 00a0009a 00c6009d 00a600e9     ................
  42a588:	009c009a 00c20012 002d0046 00ad00c7     ........F.-.....
  42a598:	00bf00f3 00c70076 009b00cb 004c0073     ....v.......s.L.
  42a5a8:	002f001e 00e0004e 00d200e4 00d6002d     ../.N.......-...
  42a5b8:	002a00ad 00a80042 005e0099 00e500a3     ..*.B.....^.....
  42a5c8:	00a200e8 00760000 007d00d9 004e00c5     ......v...}...N.
  42a5d8:	00af00bb 00e80008 000f003a 004e00b7     ........:.....N.
  42a5e8:	00ac004e 00dc0078 00230081 00bd00f3     N...x.....#.....
  42a5f8:	006b00d1 003700d4 00bf00f2 00ed0017     ..k...7.........
  42a608:	004e003a 00960028 0078002b 00bf0027     :.N.(...+.x.'...
  42a618:	008200d9 00cb00ff 00590073 00d400f5     ........s.Y.....
  42a628:	007b00c8 001d00be 00cb008a 00f60023     ..{.........#...
  42a638:	007e00ac 00340076 005e00db 008c00fb     ..~.v.4...^.....
  42a648:	001d00b4 009a0027 0099005d 00420013     ....'...].....B.
  42a658:	00b400cd 001a00d5 00d90076 00c3007f     ........v.......
  42a668:	00e7009a 00b100c7 00f900f6 007800f1     ..............x.
  42a678:	006800bc 009900b9 009100dd 007d000f     ..h...........}.
  42a688:	0013002c 00ed00f2 00fb005c 00d3008e     ,.......\.......
  42a698:	00ba000d 004600ba 006200f2 00890013     ......F...b.....
  42a6a8:	00e00059 00600047 000f00b7 00f30058     Y...G.`.....X...
  42a6b8:	007100cb 007800ac 001100dc 008e0097     ..q...x.........
  42a6c8:	002d00f6 0047006c 00c300b1 009100f5     ..-.l.G.........
  42a6d8:	00ac0011 003c00ec 00f50092 007d00bf     ......<.......}.
  42a6e8:	00ed0087 00970043 00d60070 00170065     ....C...p...e...
  42a6f8:	00c900e5 00ad00b9 00ac002e 00420013     ..............B.
  42a708:	004c008d 0003003a 00230057 004900e3     ..L.:...W.#...I.
  42a718:	003f00f4 00a20044 0034007f 009b0049     ..?.D.....4.I...
  42a728:	00c80063 00b9008d 00d3004c 00e4004f     c.......L...O...
  42a738:	002d0007 002400fc 000400e2 00b60037     ..-...$.....7...
  42a748:	00540046 00280069 009b003a 002500ce     F.T.i.(.:.....%.
  42a758:	002800ef 00e700a2 00b2007a 00f0006d     ..(.....z...m...
  42a768:	00fc0062 003e00fe 00df0007 00ce00bf     b.....>.........
  42a778:	007100ba 002600cc 00d500f0 00d8000f     ..q...&.........
  42a788:	00f800e3 00c7002d 00df003f 00da004c     ....-...?...L...
  42a798:	00e300b6 003b0096 00b60023 00f70072     ......;.#...r...
  42a7a8:	00210040 008300c4 009300f3 00d30089     @.!.............
  42a7b8:	00cc00ad 00130046 007a00fa 00da002d     ....F.....z.-...
  42a7c8:	003a008a 0072006a 00a8004a 002b004c     ..:.j.r.J...L.+.
  42a7d8:	003200a0 008000ad 00f400aa 00ea0042     ..2.........B...
  42a7e8:	005700af 005400d2 008f005d 00ab0051     ..W...T.]...Q...
  42a7f8:	00ec00b3 006a0091 00bb0047 008500b4     ......j.G.......
  42a808:	00980078 00a400fc 007400e2 00e50073     x.........t.s...
  42a818:	00a200ad 00ad0028 0042001e 00f60088     ....(.....B.....
  42a828:	00dd00a1 00c900c6 00320064 00d300a1     ........d.2.....
  42a838:	006800e9 006c006c 00a30044 005000d1     ..h.l.l.D.....P.
  42a848:	005d005d 0045004d 00050045 00650065     ].].M.E.E...e.e.
  42a858:	00140065 00170017 007800b7 00940094     e.........x.....
  42a868:	00500094 00560056 00450046 00050045     ..P.V.V.F.E.E...
  42a878:	00350035 00680035 001a0034 001b001a     5.5.5.h.4.......
  42a888:	00d1001b 00f500eb 004c0098 00bf00ea     ..........L.....
  42a898:	00bb00e1 000f0010 00760093 00a70019     ..........v.....
  42a8a8:	00a600a6 004a0026 004b004b 00cd00c9     ....&.J.K.K.....
  42a8b8:	00e500cd 00d500ea 00a400ab 00a700a7     ................
  42a8c8:	009a0093 004a009a 005a005a 00a9001a     ......J.Z.Z.....
  42a8d8:	00a900a9 003a006d 00d200d2 00c800d2     ....m.:.........
  42a8e8:	00c800c8 003b0020 009b003b 00bc00bc     .... .;.;.......
  42a8f8:	00ca003c 00ca00ca 00eb00d0 00e700db     <...............
  42a908:	007f0032 007e0021 00da008a 009c0065     2...!.~.....e...
  42a918:	001a0034 00d7000d 005d00ae 00250023     4.........].#.%.
  42a928:	00e50025 007200df 00a600a4 009200a6     %.....r.........
  42a938:	009b009b 0056008b 00f7007b 00a4009b     ......V.{.......
  42a948:	00210009 008f00ee 00190076 00450027     ..!.....v...'.E.
  42a958:	00d00051 007400e9 00d600d4 005200d6     Q.....t.......R.
  42a968:	00560056 00410046 00010041 00d900d9     V.V.F.A.A.......
  42a978:	006400d9 00660066 008f005a 008c008c     ..d.f.f.Z.......
  42a988:	00d2000c 00d300d3 004700ad 00460046     ..........G.F.F.
  42a998:	00f50086 00b200f7 00b200b2 00c900c8     ................
  42a9a8:	00a100c9 00b000b0 00f20090 007200f2     ..............r.
  42a9b8:	00eb00ea 00d100eb 00f500eb 00270032     ............2.'.
  42a9c8:	00840025 00b4008a 003800cb 00c600b5     %.........8.....
  42a9d8:	00340068 00d700a2 00ad00eb 00510073     h.4.........s.Q.
  42a9e8:	003c003f 003a0074 0075009d 0049007e     ?.<.t.:...u.~.I.
  42a9f8:	00240042 00ba0084 00a400fd 002400e2     B.$...........$.
  42aa08:	00f80084 009000e9 00090038 00540021     ........8...!.T.
  42aa18:	00e20049 00840024 00250050 00930089     I...$...P.%.....
  42aa28:	00420010 00240095 0042004e 00550008     ..B...$.N.B...U.
  42aa38:	00380092 00210009 00490054 002400e2     ..8...!.T.I...$.
  42aa48:	00500084 00890025 00100093 00950042     ..P.%.......B...
  42aa58:	004e0024 00080042 00920055 00090038     $.N.B...U...8...
  42aa68:	00540021 00e20049 00840024 00250050     !.T.I...$...P.%.
  42aa78:	00930089 00420010 00240095 0042004e     ......B...$.N.B.
  42aa88:	00550008 00380092 00210009 00490054     ..U...8...!.T.I.
  42aa98:	002400e2 00500084 00890025 00100093     ..$...P.%.......
  42aaa8:	00950042 004e0024 00080042 00920055     B...$.N.B...U...
  42aab8:	00090038 00540021 00e20049 00840024     8...!.T.I...$...
  42aac8:	00250050 00930089 00420010 00240095     P.%.......B...$.
  42aad8:	0042004e 00550008 00380092 00210009     N.B...U...8...!.
  42aae8:	00490054 002400e2 00500084 00890025     T.I...$...P.%...
  42aaf8:	00100093 00950042 004e0024 00080042     ....B...$.N.B...
  42ab08:	00920055 00090038 00540021 00e20049     U...8...!.T.I...
  42ab18:	00840024 00250050 00930089 00420010     $...P.%.......B.
  42ab28:	00240095 0042004e 00550008 00380092     ..$.N.B...U...8.
  42ab38:	00210009 00490054 002400e2 00500084     ..!.T.I...$...P.
  42ab48:	00890025 00100093 00950042 004e0024     %.......B...$.N.
  42ab58:	00080042 00920055 00090038 00540021     B...U...8...!.T.
  42ab68:	00e20049 00840024 00250050 00930089     I...$...P.%.....
  42ab78:	00420010 00240095 0042004e 00550008     ..B...$.N.B...U.
  42ab88:	00380092 00210009 00490054 002400e2     ..8...!.T.I...$.
  42ab98:	00500084 00890025 00100093 00950042     ..P.%.......B...
  42aba8:	004e0024 00080042 00920055 00090038     $.N.B...U...8...
  42abb8:	00540021 00e20049 00840024 00250050     !.T.I...$...P.%.
  42abc8:	00930089 00420010 00240095 0042004e     ......B...$.N.B.
  42abd8:	00550008 00380092 00210009 00490054     ..U...8...!.T.I.
  42abe8:	002400e2 00500084 00890025 00100093     ..$...P.%.......
  42abf8:	00950042 004e0024 00080042 00920055     B...$.N.B...U...
  42ac08:	00090038 00540021 00e20049 00840024     8...!.T.I...$...
  42ac18:	00250050 00930089 00420010 00240095     P.%.......B...$.
  42ac28:	0042004e 00550008 00380092 00210009     N.B...U...8...!.
  42ac38:	00490054 002400e2 00500084 00890025     T.I...$...P.%...
  42ac48:	00100093 00950042 004e0024 00080042     ....B...$.N.B...
  42ac58:	00920055 00090038 00540021 00e20049     U...8...!.T.I...
  42ac68:	00840024 00a50050 000f00ff 005c0019     $...P.........\.
  42ac78:	00e700a8 00cf009f 009900cc 00000000     ................
  42ac88:	00000000 00450049 0044004e 004200ae     ....I.E.N.D...B.
  42ac98:	00820060 00000000 00000000 00000000     `...............
	...
  456da8:	0044434c 6c696146 74206465 7263206f     LCD.Failed to cr
  456db8:	65746165 64636c20 73617420 000a0d6b     eate lcd task...
  456dc8:	32535041 00000000 6c696146 74206465     APS2....Failed t
  456dd8:	7263206f 65746165 53504120 73617420     o create APS tas
  456de8:	000a0d6b 6e69616d 00000000 6c696146     k...main....Fail
  456df8:	74206465 7263206f 65746165 69614d20     ed to create Mai
  456e08:	6174206e 0a0d6b73 00000000 203a786f     n task......ox: 
  456e18:	0a206425 00000000 63617473 766f206b     %d .....stack ov
  456e28:	6c667265 2520776f 73252078 00000a0d     erflow %x %s....

00456e38 <sinTable_f32>:
  456e38:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  456e48:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  456e58:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  456e68:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  456e78:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  456e88:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  456e98:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  456ea8:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  456eb8:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  456ec8:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  456ed8:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  456ee8:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  456ef8:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  456f08:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  456f18:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  456f28:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  456f38:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  456f48:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  456f58:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  456f68:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  456f78:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  456f88:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  456f98:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  456fa8:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  456fb8:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  456fc8:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  456fd8:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  456fe8:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  456ff8:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  457008:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  457018:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  457028:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  457038:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  457048:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  457058:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  457068:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  457078:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  457088:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  457098:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  4570a8:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  4570b8:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  4570c8:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  4570d8:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  4570e8:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  4570f8:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  457108:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  457118:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  457128:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  457138:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  457148:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  457158:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  457168:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  457178:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  457188:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  457198:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  4571a8:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  4571b8:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  4571c8:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  4571d8:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  4571e8:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  4571f8:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  457208:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  457218:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  457228:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  457238:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  457248:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  457258:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  457268:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  457278:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  457288:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  457298:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  4572a8:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  4572b8:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  4572c8:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  4572d8:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  4572e8:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  4572f8:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  457308:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  457318:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  457328:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  457338:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  457348:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  457358:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  457368:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  457378:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  457388:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  457398:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  4573a8:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  4573b8:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  4573c8:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  4573d8:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  4573e8:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  4573f8:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  457408:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  457418:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  457428:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  457438:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  457448:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  457458:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  457468:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  457478:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  457488:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  457498:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  4574a8:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  4574b8:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  4574c8:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  4574d8:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  4574e8:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  4574f8:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  457508:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  457518:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  457528:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  457538:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  457548:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  457558:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  457568:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  457578:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  457588:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  457598:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  4575a8:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  4575b8:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  4575c8:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  4575d8:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  4575e8:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  4575f8:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  457608:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  457618:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  457628:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  457638:	80000000                                ....

0045763c <_global_impure_ptr>:
  45763c:	20400068 33323130 37363534 42413938     h.@ 0123456789AB
  45764c:	46454443 00000000 33323130 37363534     CDEF....01234567
  45765c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  45766c:	0000296c                                l)..

00457670 <blanks.7217>:
  457670:	20202020 20202020 20202020 20202020                     

00457680 <zeroes.7218>:
  457680:	30303030 30303030 30303030 30303030     0000000000000000
  457690:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004576a0 <_ctype_>:
  4576a0:	20202000 20202020 28282020 20282828     .         ((((( 
  4576b0:	20202020 20202020 20202020 20202020                     
  4576c0:	10108820 10101010 10101010 10101010      ...............
  4576d0:	04040410 04040404 10040404 10101010     ................
  4576e0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4576f0:	01010101 01010101 01010101 10101010     ................
  457700:	42421010 42424242 02020202 02020202     ..BBBBBB........
  457710:	02020202 02020202 02020202 10101010     ................
  457720:	00000020 00000000 00000000 00000000      ...............
	...

004577a4 <_init>:
  4577a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4577a6:	bf00      	nop
  4577a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4577aa:	bc08      	pop	{r3}
  4577ac:	469e      	mov	lr, r3
  4577ae:	4770      	bx	lr

004577b0 <__init_array_start>:
  4577b0:	0041feb9 	.word	0x0041feb9

004577b4 <__frame_dummy_init_array_entry>:
  4577b4:	0040018d                                ..@.

004577b8 <_fini>:
  4577b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4577ba:	bf00      	nop
  4577bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4577be:	bc08      	pop	{r3}
  4577c0:	469e      	mov	lr, r3
  4577c2:	4770      	bx	lr

004577c4 <__fini_array_start>:
  4577c4:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <font_dsc>:
20400010:	1908 0042 1430 0042 1408 0042 4654 0042     ..B.0.B...B.TFB.
20400020:	0010 2802 0000 0000 0000 0000               ...(........

2040002c <lv_font_montserrat_14>:
2040002c:	3df9 0041 3ced 0041 0010 0003 ff00 0001     .=A..<A.........
2040003c:	0010 2040                                   ..@ 

20400040 <mem_buf_small>:
20400040:	c750 2040 0010 0000 c760 2040 0010 0000     P.@ ....`.@ ....

20400050 <_lv_txt_encoded_get_char_id>:
20400050:	627d 0041                                   }bA.

20400054 <_lv_txt_encoded_next>:
20400054:	617d 0041                                   }aA.

20400058 <g_interrupt_enabled>:
20400058:	0001 0000                                   ....

2040005c <SystemCoreClock>:
2040005c:	0900 003d                                   ..=.

20400060 <_impure_ptr>:
20400060:	0068 2040 0000 0000                         h.@ ....

20400068 <impure_data>:
20400068:	0000 0000 0354 2040 03bc 2040 0424 2040     ....T.@ ..@ $.@ 
	...
20400110:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400120:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400490 <__malloc_av_>:
	...
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 

20400898 <__malloc_sbrk_base>:
20400898:	ffff ffff                                   ....

2040089c <__malloc_trim_threshold>:
2040089c:	0000 0002                                   ....

204008a0 <__atexit_recursive_mutex>:
204008a0:	a304 2043                                   ..C 

204008a4 <__global_locale>:
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400964:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400984:	0fb1 0042 0941 0042 0000 0000 76a0 0045     ..B.A.B......vE.
20400994:	769c 0045 6e10 0045 6e10 0045 6e10 0045     .vE..nE..nE..nE.
204009a4:	6e10 0045 6e10 0045 6e10 0045 6e10 0045     .nE..nE..nE..nE.
204009b4:	6e10 0045 6e10 0045 ffff ffff ffff ffff     .nE..nE.........
204009c4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ec:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
