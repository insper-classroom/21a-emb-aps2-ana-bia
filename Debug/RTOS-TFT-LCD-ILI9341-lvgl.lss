
RTOS-TFT-LCD-ILI9341-lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00031b84  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00431b84  00431b84  00041b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a98  20400000  00431b8c  00050000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00039d7c  20400a98  00432624  00050a98  2**2
                  ALLOC
  4 .stack        00002004  2043a814  0046c3a0  00050a98  2**0
                  ALLOC
  5 .heap         00000200  2043c818  0046e3a4  00050a98  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00050a98  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00050ac4  2**0
                  CONTENTS, READONLY
  8 .debug_info   000c26d2  00000000  00000000  00050b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001063a  00000000  00000000  0011324a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0005438e  00000000  00000000  00123884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003258  00000000  00000000  00177c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000060a8  00000000  00000000  0017ae6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034191  00000000  00000000  00180f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004aca2  00000000  00000000  001b50a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1653  00000000  00000000  001ffd45  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a290  00000000  00000000  002b1398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 c8 43 20 8d 52 42 00 89 52 42 00 89 52 42 00     ..C .RB..RB..RB.
  400010:	89 52 42 00 89 52 42 00 89 52 42 00 00 00 00 00     .RB..RB..RB.....
	...
  40002c:	b5 18 40 00 89 52 42 00 00 00 00 00 55 19 40 00     ..@..RB.....U.@.
  40003c:	bd 19 40 00 89 52 42 00 89 52 42 00 e1 5b 42 00     ..@..RB..RB..[B.
  40004c:	bd 5b 42 00 89 52 42 00 89 52 42 00 89 52 42 00     .[B..RB..RB..RB.
  40005c:	89 52 42 00 89 52 42 00 00 00 00 00 15 4e 42 00     .RB..RB......NB.
  40006c:	29 4e 42 00 3d 4e 42 00 89 52 42 00 89 52 42 00     )NB.=NB..RB..RB.
  40007c:	89 52 42 00 51 4e 42 00 65 4e 42 00 89 52 42 00     .RB.QNB.eNB..RB.
  40008c:	89 52 42 00 89 52 42 00 89 52 42 00 89 52 42 00     .RB..RB..RB..RB.
  40009c:	55 02 40 00 89 52 42 00 89 52 42 00 f9 59 42 00     U.@..RB..RB..YB.
  4000ac:	89 52 42 00 89 52 42 00 09 17 40 00 89 52 42 00     .RB..RB...@..RB.
  4000bc:	89 52 42 00 89 52 42 00 89 52 42 00 89 52 42 00     .RB..RB..RB..RB.
  4000cc:	89 52 42 00 89 52 42 00 89 52 42 00 89 52 42 00     .RB..RB..RB..RB.
  4000dc:	89 52 42 00 1d 17 40 00 89 52 42 00 89 52 42 00     .RB...@..RB..RB.
  4000ec:	89 52 42 00 89 52 42 00 89 52 42 00 89 52 42 00     .RB..RB..RB..RB.
  4000fc:	89 52 42 00 89 52 42 00 89 52 42 00 89 52 42 00     .RB..RB..RB..RB.
  40010c:	89 52 42 00 89 52 42 00 00 00 00 00 00 00 00 00     .RB..RB.........
  40011c:	00 00 00 00 89 52 42 00 89 52 42 00 89 52 42 00     .....RB..RB..RB.
  40012c:	89 52 42 00 89 52 42 00 89 52 42 00 89 52 42 00     .RB..RB..RB..RB.
  40013c:	89 52 42 00 89 52 42 00 89 52 42 00 89 52 42 00     .RB..RB..RB..RB.
  40014c:	89 52 42 00 89 52 42 00 89 52 42 00 89 52 42 00     .RB..RB..RB..RB.
  40015c:	89 52 42 00 89 52 42 00 89 52 42 00                 .RB..RB..RB.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a98 	.word	0x20400a98
  400184:	00000000 	.word	0x00000000
  400188:	00431b8c 	.word	0x00431b8c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00431b8c 	.word	0x00431b8c
  4001c8:	20400a9c 	.word	0x20400a9c
  4001cc:	00431b8c 	.word	0x00431b8c
  4001d0:	00000000 	.word	0x00000000

004001d4 <vTimerEcgCallback>:
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);

  tc_start(TC, TC_CHANNEL);
}

void vTimerEcgCallback( TimerHandle_t xTimer ) {
  4001d4:	b508      	push	{r3, lr}
  // delay entre ECGs de [200, 500]
  g_ecgDelayValue = rand() % (500 + 1 - 200) + 200;
  4001d6:	4b08      	ldr	r3, [pc, #32]	; (4001f8 <vTimerEcgCallback+0x24>)
  4001d8:	4798      	blx	r3
  4001da:	4a08      	ldr	r2, [pc, #32]	; (4001fc <vTimerEcgCallback+0x28>)
  4001dc:	fb82 3200 	smull	r3, r2, r2, r0
  4001e0:	17c3      	asrs	r3, r0, #31
  4001e2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  4001e6:	f240 122d 	movw	r2, #301	; 0x12d
  4001ea:	fb02 0313 	mls	r3, r2, r3, r0
  4001ee:	33c8      	adds	r3, #200	; 0xc8
  4001f0:	4a03      	ldr	r2, [pc, #12]	; (400200 <vTimerEcgCallback+0x2c>)
  4001f2:	6013      	str	r3, [r2, #0]
  4001f4:	bd08      	pop	{r3, pc}
  4001f6:	bf00      	nop
  4001f8:	00427a31 	.word	0x00427a31
  4001fc:	1b37484b 	.word	0x1b37484b
  400200:	2043a130 	.word	0x2043a130

00400204 <config_DAC>:
static void config_DAC(void) {
  400204:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400206:	201e      	movs	r0, #30
  400208:	4b0b      	ldr	r3, [pc, #44]	; (400238 <config_DAC+0x34>)
  40020a:	4798      	blx	r3
  dacc_reset(DACC_BASE);
  40020c:	4c0b      	ldr	r4, [pc, #44]	; (40023c <config_DAC+0x38>)
  40020e:	4620      	mov	r0, r4
  400210:	4b0b      	ldr	r3, [pc, #44]	; (400240 <config_DAC+0x3c>)
  400212:	4798      	blx	r3
  dacc_set_transfer_mode(DACC_BASE, 0);
  400214:	2100      	movs	r1, #0
  400216:	4620      	mov	r0, r4
  400218:	4b0a      	ldr	r3, [pc, #40]	; (400244 <config_DAC+0x40>)
  40021a:	4798      	blx	r3
  dacc_set_osr(DACC_BASE, DACC_CHANNEL, 5 );
  40021c:	2205      	movs	r2, #5
  40021e:	2100      	movs	r1, #0
  400220:	4620      	mov	r0, r4
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <config_DAC+0x44>)
  400224:	4798      	blx	r3
  dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  400226:	2100      	movs	r1, #0
  400228:	4620      	mov	r0, r4
  40022a:	4b08      	ldr	r3, [pc, #32]	; (40024c <config_DAC+0x48>)
  40022c:	4798      	blx	r3
  dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  40022e:	210a      	movs	r1, #10
  400230:	4620      	mov	r0, r4
  400232:	4b07      	ldr	r3, [pc, #28]	; (400250 <config_DAC+0x4c>)
  400234:	4798      	blx	r3
  400236:	bd10      	pop	{r4, pc}
  400238:	00424f8d 	.word	0x00424f8d
  40023c:	40040000 	.word	0x40040000
  400240:	004004bd 	.word	0x004004bd
  400244:	004004c3 	.word	0x004004c3
  400248:	004004d9 	.word	0x004004d9
  40024c:	0040050d 	.word	0x0040050d
  400250:	00400521 	.word	0x00400521

00400254 <TC0_Handler>:
void TC0_Handler(void) {
  400254:	b500      	push	{lr}
  400256:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC0, 0);
  400258:	2100      	movs	r1, #0
  40025a:	4815      	ldr	r0, [pc, #84]	; (4002b0 <TC0_Handler+0x5c>)
  40025c:	4b15      	ldr	r3, [pc, #84]	; (4002b4 <TC0_Handler+0x60>)
  40025e:	4798      	blx	r3
  400260:	9001      	str	r0, [sp, #4]
  if (g_ecgCnt >= g_ecgSize) {
  400262:	4b15      	ldr	r3, [pc, #84]	; (4002b8 <TC0_Handler+0x64>)
  400264:	681a      	ldr	r2, [r3, #0]
  400266:	4b15      	ldr	r3, [pc, #84]	; (4002bc <TC0_Handler+0x68>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	429a      	cmp	r2, r3
  40026c:	db06      	blt.n	40027c <TC0_Handler+0x28>
    g_ecgCnt = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b11      	ldr	r3, [pc, #68]	; (4002b8 <TC0_Handler+0x64>)
  400272:	601a      	str	r2, [r3, #0]
    g_ecgDelayCnt = g_ecgDelayValue;
  400274:	4b12      	ldr	r3, [pc, #72]	; (4002c0 <TC0_Handler+0x6c>)
  400276:	681a      	ldr	r2, [r3, #0]
  400278:	4b12      	ldr	r3, [pc, #72]	; (4002c4 <TC0_Handler+0x70>)
  40027a:	601a      	str	r2, [r3, #0]
  if (g_ecgDelayCnt > 0) {
  40027c:	4b11      	ldr	r3, [pc, #68]	; (4002c4 <TC0_Handler+0x70>)
  40027e:	681b      	ldr	r3, [r3, #0]
  400280:	2b00      	cmp	r3, #0
  400282:	dd0f      	ble.n	4002a4 <TC0_Handler+0x50>
    g_ecgDelayCnt--;
  400284:	4a0f      	ldr	r2, [pc, #60]	; (4002c4 <TC0_Handler+0x70>)
  400286:	6813      	ldr	r3, [r2, #0]
  400288:	3b01      	subs	r3, #1
  40028a:	6013      	str	r3, [r2, #0]
  dacc_write_conversion_data(DACC_BASE, ecg[g_ecgCnt], DACC_CHANNEL);
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TC0_Handler+0x64>)
  40028e:	6819      	ldr	r1, [r3, #0]
  400290:	2200      	movs	r2, #0
  400292:	4b0d      	ldr	r3, [pc, #52]	; (4002c8 <TC0_Handler+0x74>)
  400294:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400298:	480c      	ldr	r0, [pc, #48]	; (4002cc <TC0_Handler+0x78>)
  40029a:	4b0d      	ldr	r3, [pc, #52]	; (4002d0 <TC0_Handler+0x7c>)
  40029c:	4798      	blx	r3
}
  40029e:	b003      	add	sp, #12
  4002a0:	f85d fb04 	ldr.w	pc, [sp], #4
    g_ecgCnt++;
  4002a4:	4a04      	ldr	r2, [pc, #16]	; (4002b8 <TC0_Handler+0x64>)
  4002a6:	6813      	ldr	r3, [r2, #0]
  4002a8:	3301      	adds	r3, #1
  4002aa:	6013      	str	r3, [r2, #0]
  4002ac:	e7ee      	b.n	40028c <TC0_Handler+0x38>
  4002ae:	bf00      	nop
  4002b0:	4000c000 	.word	0x4000c000
  4002b4:	004007ef 	.word	0x004007ef
  4002b8:	2043a128 	.word	0x2043a128
  4002bc:	00431014 	.word	0x00431014
  4002c0:	2043a130 	.word	0x2043a130
  4002c4:	2043a12c 	.word	0x2043a12c
  4002c8:	0042f934 	.word	0x0042f934
  4002cc:	40040000 	.word	0x40040000
  4002d0:	004004cf 	.word	0x004004cf

004002d4 <TC_init_modificado>:
void TC_init_modificado(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4002d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002d8:	b084      	sub	sp, #16
  4002da:	4605      	mov	r5, r0
  4002dc:	460c      	mov	r4, r1
  4002de:	4616      	mov	r6, r2
  4002e0:	461f      	mov	r7, r3
  pmc_enable_periph_clk(ID_TC);
  4002e2:	4608      	mov	r0, r1
  4002e4:	4b1c      	ldr	r3, [pc, #112]	; (400358 <TC_init_modificado+0x84>)
  4002e6:	4798      	blx	r3
  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4002e8:	491c      	ldr	r1, [pc, #112]	; (40035c <TC_init_modificado+0x88>)
  4002ea:	9100      	str	r1, [sp, #0]
  4002ec:	ab02      	add	r3, sp, #8
  4002ee:	aa03      	add	r2, sp, #12
  4002f0:	4638      	mov	r0, r7
  4002f2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400380 <TC_init_modificado+0xac>
  4002f6:	47c0      	blx	r8
  tc_init(TC, TC_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG);
  4002f8:	f244 0201 	movw	r2, #16385	; 0x4001
  4002fc:	4631      	mov	r1, r6
  4002fe:	4628      	mov	r0, r5
  400300:	4b17      	ldr	r3, [pc, #92]	; (400360 <TC_init_modificado+0x8c>)
  400302:	4798      	blx	r3
  tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / 16) / freq);
  400304:	4a17      	ldr	r2, [pc, #92]	; (400364 <TC_init_modificado+0x90>)
  400306:	fbb2 f2f7 	udiv	r2, r2, r7
  40030a:	4631      	mov	r1, r6
  40030c:	4628      	mov	r0, r5
  40030e:	4b16      	ldr	r3, [pc, #88]	; (400368 <TC_init_modificado+0x94>)
  400310:	4798      	blx	r3
  NVIC_SetPriority(ID_TC, 4);
  400312:	b263      	sxtb	r3, r4
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400314:	2b00      	cmp	r3, #0
  400316:	db17      	blt.n	400348 <TC_init_modificado+0x74>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400318:	4a14      	ldr	r2, [pc, #80]	; (40036c <TC_init_modificado+0x98>)
  40031a:	2180      	movs	r1, #128	; 0x80
  40031c:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40031e:	095b      	lsrs	r3, r3, #5
  400320:	f004 041f 	and.w	r4, r4, #31
  400324:	2201      	movs	r2, #1
  400326:	fa02 f404 	lsl.w	r4, r2, r4
  40032a:	4a11      	ldr	r2, [pc, #68]	; (400370 <TC_init_modificado+0x9c>)
  40032c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  400330:	2210      	movs	r2, #16
  400332:	4631      	mov	r1, r6
  400334:	4628      	mov	r0, r5
  400336:	4b0f      	ldr	r3, [pc, #60]	; (400374 <TC_init_modificado+0xa0>)
  400338:	4798      	blx	r3
  tc_start(TC, TC_CHANNEL);
  40033a:	4631      	mov	r1, r6
  40033c:	4628      	mov	r0, r5
  40033e:	4b0e      	ldr	r3, [pc, #56]	; (400378 <TC_init_modificado+0xa4>)
  400340:	4798      	blx	r3
}
  400342:	b004      	add	sp, #16
  400344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400348:	f004 010f 	and.w	r1, r4, #15
  40034c:	4a0b      	ldr	r2, [pc, #44]	; (40037c <TC_init_modificado+0xa8>)
  40034e:	440a      	add	r2, r1
  400350:	2180      	movs	r1, #128	; 0x80
  400352:	7611      	strb	r1, [r2, #24]
  400354:	e7e3      	b.n	40031e <TC_init_modificado+0x4a>
  400356:	bf00      	nop
  400358:	00424f8d 	.word	0x00424f8d
  40035c:	11e1a300 	.word	0x11e1a300
  400360:	004007bd 	.word	0x004007bd
  400364:	011e1a30 	.word	0x011e1a30
  400368:	004007df 	.word	0x004007df
  40036c:	e000e400 	.word	0xe000e400
  400370:	e000e100 	.word	0xe000e100
  400374:	004007e7 	.word	0x004007e7
  400378:	004007d7 	.word	0x004007d7
  40037c:	e000ecfc 	.word	0xe000ecfc
  400380:	004007f7 	.word	0x004007f7
  400384:	00000000 	.word	0x00000000

00400388 <task_aps2>:
 // printf("%d \n", g_ecgDelayValue);
}

void task_aps2(void *pvParameters) {
  400388:	b570      	push	{r4, r5, r6, lr}
  40038a:	ed2d 8b02 	vpush	{d8}
  40038e:	b084      	sub	sp, #16
  
  g_ecgDelayValue = 200;
  400390:	22c8      	movs	r2, #200	; 0xc8
  400392:	4b31      	ldr	r3, [pc, #196]	; (400458 <task_aps2+0xd0>)
  400394:	601a      	str	r2, [r3, #0]
  config_DAC();
  400396:	4b31      	ldr	r3, [pc, #196]	; (40045c <task_aps2+0xd4>)
  400398:	4798      	blx	r3
  TC_init_modificado(TC0, ID_TC0, 0, DAC_FS);
  40039a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40039e:	2200      	movs	r2, #0
  4003a0:	2117      	movs	r1, #23
  4003a2:	482f      	ldr	r0, [pc, #188]	; (400460 <task_aps2+0xd8>)
  4003a4:	4c2f      	ldr	r4, [pc, #188]	; (400464 <task_aps2+0xdc>)
  4003a6:	47a0      	blx	r4
  xTimer = xTimerCreate("ECG", pdMS_TO_TICKS(ECG_CHANGE_TIME), pdTRUE, (void *) 0, vTimerEcgCallback);
  4003a8:	4b2f      	ldr	r3, [pc, #188]	; (400468 <task_aps2+0xe0>)
  4003aa:	9300      	str	r3, [sp, #0]
  4003ac:	2300      	movs	r3, #0
  4003ae:	2201      	movs	r2, #1
  4003b0:	f242 7110 	movw	r1, #10000	; 0x2710
  4003b4:	482d      	ldr	r0, [pc, #180]	; (40046c <task_aps2+0xe4>)
  4003b6:	4c2e      	ldr	r4, [pc, #184]	; (400470 <task_aps2+0xe8>)
  4003b8:	47a0      	blx	r4
  4003ba:	4604      	mov	r4, r0
  4003bc:	4b2d      	ldr	r3, [pc, #180]	; (400474 <task_aps2+0xec>)
  4003be:	6018      	str	r0, [r3, #0]
  xTimerStart( xTimer, 0 );
  4003c0:	4b2d      	ldr	r3, [pc, #180]	; (400478 <task_aps2+0xf0>)
  4003c2:	4798      	blx	r3
  4003c4:	2300      	movs	r3, #0
  4003c6:	9300      	str	r3, [sp, #0]
  4003c8:	4602      	mov	r2, r0
  4003ca:	2101      	movs	r1, #1
  4003cc:	4620      	mov	r0, r4
  4003ce:	4c2b      	ldr	r4, [pc, #172]	; (40047c <task_aps2+0xf4>)
  4003d0:	47a0      	blx	r4
  
  // oxiometria
  char ox;
  float theta = 0;
  4003d2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 400480 <task_aps2+0xf8>
  4003d6:	e02e      	b.n	400436 <task_aps2+0xae>
    
    // Oxiometria: sin entre 88 e 100
    if (theta > 2*PI) {
      theta = 0;
    }
    ox = (char) ((arm_sin_f32(theta) + 1.0)*12.0/2.0 + 88.0);
  4003d8:	ee18 0a10 	vmov	r0, s16
  4003dc:	4b29      	ldr	r3, [pc, #164]	; (400484 <task_aps2+0xfc>)
  4003de:	4798      	blx	r3
  4003e0:	4e29      	ldr	r6, [pc, #164]	; (400488 <task_aps2+0x100>)
  4003e2:	47b0      	blx	r6
  4003e4:	4d29      	ldr	r5, [pc, #164]	; (40048c <task_aps2+0x104>)
  4003e6:	2200      	movs	r2, #0
  4003e8:	4b29      	ldr	r3, [pc, #164]	; (400490 <task_aps2+0x108>)
  4003ea:	47a8      	blx	r5
  4003ec:	4c29      	ldr	r4, [pc, #164]	; (400494 <task_aps2+0x10c>)
  4003ee:	2200      	movs	r2, #0
  4003f0:	4b29      	ldr	r3, [pc, #164]	; (400498 <task_aps2+0x110>)
  4003f2:	47a0      	blx	r4
  4003f4:	2200      	movs	r2, #0
  4003f6:	4b29      	ldr	r3, [pc, #164]	; (40049c <task_aps2+0x114>)
  4003f8:	47a0      	blx	r4
  4003fa:	2200      	movs	r2, #0
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <task_aps2+0x118>)
  4003fe:	47a8      	blx	r5
  400400:	4b28      	ldr	r3, [pc, #160]	; (4004a4 <task_aps2+0x11c>)
  400402:	4798      	blx	r3
  400404:	ac04      	add	r4, sp, #16
  400406:	f804 0d01 	strb.w	r0, [r4, #-1]!
    theta = theta + 0.3;
  40040a:	ee18 0a10 	vmov	r0, s16
  40040e:	47b0      	blx	r6
  400410:	a30f      	add	r3, pc, #60	; (adr r3, 400450 <task_aps2+0xc8>)
  400412:	e9d3 2300 	ldrd	r2, r3, [r3]
  400416:	47a8      	blx	r5
  400418:	4b23      	ldr	r3, [pc, #140]	; (4004a8 <task_aps2+0x120>)
  40041a:	4798      	blx	r3
  40041c:	ee08 0a10 	vmov	s16, r0
    xQueueSend(xQueueOx, &ox, 100);
  400420:	2300      	movs	r3, #0
  400422:	2264      	movs	r2, #100	; 0x64
  400424:	4621      	mov	r1, r4
  400426:	4821      	ldr	r0, [pc, #132]	; (4004ac <task_aps2+0x124>)
  400428:	6800      	ldr	r0, [r0, #0]
  40042a:	4c21      	ldr	r4, [pc, #132]	; (4004b0 <task_aps2+0x128>)
  40042c:	47a0      	blx	r4

    vTaskDelay(2000);
  40042e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400432:	4b20      	ldr	r3, [pc, #128]	; (4004b4 <task_aps2+0x12c>)
  400434:	4798      	blx	r3
    if (theta > 2*PI) {
  400436:	eddf 7a20 	vldr	s15, [pc, #128]	; 4004b8 <task_aps2+0x130>
  40043a:	eeb4 8ae7 	vcmpe.f32	s16, s15
  40043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400442:	ddc9      	ble.n	4003d8 <task_aps2+0x50>
      theta = 0;
  400444:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 400480 <task_aps2+0xf8>
  400448:	e7c6      	b.n	4003d8 <task_aps2+0x50>
  40044a:	bf00      	nop
  40044c:	f3af 8000 	nop.w
  400450:	33333333 	.word	0x33333333
  400454:	3fd33333 	.word	0x3fd33333
  400458:	2043a130 	.word	0x2043a130
  40045c:	00400205 	.word	0x00400205
  400460:	4000c000 	.word	0x4000c000
  400464:	004002d5 	.word	0x004002d5
  400468:	004001d5 	.word	0x004001d5
  40046c:	0042a328 	.word	0x0042a328
  400470:	0040328d 	.word	0x0040328d
  400474:	2043a3f4 	.word	0x2043a3f4
  400478:	004028b5 	.word	0x004028b5
  40047c:	004032ed 	.word	0x004032ed
  400480:	00000000 	.word	0x00000000
  400484:	004265fd 	.word	0x004265fd
  400488:	00426945 	.word	0x00426945
  40048c:	00426689 	.word	0x00426689
  400490:	3ff00000 	.word	0x3ff00000
  400494:	004269ed 	.word	0x004269ed
  400498:	40280000 	.word	0x40280000
  40049c:	3fe00000 	.word	0x3fe00000
  4004a0:	40560000 	.word	0x40560000
  4004a4:	00426e11 	.word	0x00426e11
  4004a8:	00426e51 	.word	0x00426e51
  4004ac:	2043a3f8 	.word	0x2043a3f8
  4004b0:	00401ee5 	.word	0x00401ee5
  4004b4:	00402b15 	.word	0x00402b15
  4004b8:	40c90fdb 	.word	0x40c90fdb

004004bc <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4004bc:	2301      	movs	r3, #1
  4004be:	6003      	str	r3, [r0, #0]
  4004c0:	4770      	bx	lr

004004c2 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  4004c2:	b911      	cbnz	r1, 4004ca <dacc_set_transfer_mode+0x8>
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
  4004c4:	6041      	str	r1, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4004c6:	2000      	movs	r0, #0
  4004c8:	4770      	bx	lr
		p_dacc->DACC_MR = ul_mode;
  4004ca:	6041      	str	r1, [r0, #4]
  4004cc:	e7fb      	b.n	4004c6 <dacc_set_transfer_mode+0x4>

004004ce <dacc_write_conversion_data>:
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
	p_dacc->DACC_CDR[channel] = ul_data;
  4004ce:	3206      	adds	r2, #6
  4004d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4004d4:	6051      	str	r1, [r2, #4]
  4004d6:	4770      	bx	lr

004004d8 <dacc_set_osr>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_osr(Dacc *p_dacc, uint32_t channel, uint32_t ul_osr)
{
	uint32_t mr = p_dacc->DACC_TRIGR;
  4004d8:	6883      	ldr	r3, [r0, #8]
	if(channel == 0) {
  4004da:	b139      	cbz	r1, 4004ec <dacc_set_osr+0x14>
{
  4004dc:	b410      	push	{r4}
		mr &= (~DACC_TRIGR_OSR0_Msk);
		mr |=  DACC_TRIGR_OSR0(ul_osr);
	}else if(channel == 1) {
  4004de:	2901      	cmp	r1, #1
  4004e0:	d00d      	beq.n	4004fe <dacc_set_osr+0x26>
		mr &= (~DACC_TRIGR_OSR1_Msk);
		mr |=  DACC_TRIGR_OSR1(ul_osr);
	}
	p_dacc->DACC_TRIGR = mr;
  4004e2:	6083      	str	r3, [r0, #8]
	return DACC_RC_OK;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ea:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR0_Msk);
  4004ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
		mr |=  DACC_TRIGR_OSR0(ul_osr);
  4004f0:	0412      	lsls	r2, r2, #16
  4004f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4004f6:	4313      	orrs	r3, r2
	p_dacc->DACC_TRIGR = mr;
  4004f8:	6083      	str	r3, [r0, #8]
}
  4004fa:	2000      	movs	r0, #0
  4004fc:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR1_Msk);
  4004fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
		mr |=  DACC_TRIGR_OSR1(ul_osr);
  400502:	0512      	lsls	r2, r2, #20
  400504:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
  400508:	4313      	orrs	r3, r2
  40050a:	e7ea      	b.n	4004e2 <dacc_set_osr+0xa>

0040050c <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  40050c:	2901      	cmp	r1, #1
  40050e:	d901      	bls.n	400514 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  400510:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  400512:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400514:	2301      	movs	r3, #1
  400516:	fa03 f101 	lsl.w	r1, r3, r1
  40051a:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  40051c:	2000      	movs	r0, #0
  40051e:	4770      	bx	lr

00400520 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400520:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400524:	2000      	movs	r0, #0
  400526:	4770      	bx	lr

00400528 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  400528:	b921      	cbnz	r1, 400534 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40052a:	6843      	ldr	r3, [r0, #4]
  40052c:	f023 0301 	bic.w	r3, r3, #1
  400530:	6043      	str	r3, [r0, #4]
  400532:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400534:	6843      	ldr	r3, [r0, #4]
  400536:	f043 0301 	orr.w	r3, r3, #1
  40053a:	6043      	str	r3, [r0, #4]
  40053c:	4770      	bx	lr

0040053e <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  40053e:	6201      	str	r1, [r0, #32]
  400540:	4770      	bx	lr

00400542 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400542:	b470      	push	{r4, r5, r6}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400544:	6884      	ldr	r4, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400546:	e000      	b.n	40054a <rtc_get_time+0x8>
		ul_time = p_rtc->RTC_TIMR;
  400548:	6884      	ldr	r4, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40054a:	6885      	ldr	r5, [r0, #8]
  40054c:	42ac      	cmp	r4, r5
  40054e:	d1fb      	bne.n	400548 <rtc_get_time+0x6>
	}

	/* Hour */
	if (pul_hour) {
  400550:	b171      	cbz	r1, 400570 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  400552:	0c26      	lsrs	r6, r4, #16
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400554:	f3c6 1501 	ubfx	r5, r6, #4, #2
  400558:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40055c:	0068      	lsls	r0, r5, #1
  40055e:	f006 060f 	and.w	r6, r6, #15
  400562:	4430      	add	r0, r6
  400564:	6008      	str	r0, [r1, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400566:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
  40056a:	d001      	beq.n	400570 <rtc_get_time+0x2e>
			*pul_hour += 12;
  40056c:	300c      	adds	r0, #12
  40056e:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400570:	b14a      	cbz	r2, 400586 <rtc_get_time+0x44>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  400572:	0a25      	lsrs	r5, r4, #8
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400574:	f3c5 1102 	ubfx	r1, r5, #4, #3
  400578:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40057c:	0048      	lsls	r0, r1, #1
  40057e:	f005 050f 	and.w	r5, r5, #15
  400582:	4428      	add	r0, r5
  400584:	6010      	str	r0, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400586:	b143      	cbz	r3, 40059a <rtc_get_time+0x58>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400588:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40058c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400590:	0051      	lsls	r1, r2, #1
  400592:	f004 040f 	and.w	r4, r4, #15
  400596:	440c      	add	r4, r1
  400598:	601c      	str	r4, [r3, #0]
	}
}
  40059a:	bc70      	pop	{r4, r5, r6}
  40059c:	4770      	bx	lr
	...

004005a0 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4005a2:	6844      	ldr	r4, [r0, #4]
  4005a4:	f014 0f01 	tst.w	r4, #1
  4005a8:	d005      	beq.n	4005b6 <rtc_set_time+0x16>
		if (ul_hour > 12) {
  4005aa:	290c      	cmp	r1, #12
  4005ac:	d93e      	bls.n	40062c <rtc_set_time+0x8c>
			ul_hour -= 12;
  4005ae:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4005b0:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4005b4:	e000      	b.n	4005b8 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4005b6:	2600      	movs	r6, #0
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4005b8:	4c1d      	ldr	r4, [pc, #116]	; (400630 <rtc_set_time+0x90>)
  4005ba:	fba4 7501 	umull	r7, r5, r4, r1
  4005be:	08ef      	lsrs	r7, r5, #3
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4005c0:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
  4005c4:	ea4f 054e 	mov.w	r5, lr, lsl #1
  4005c8:	46ae      	mov	lr, r5
  4005ca:	1b4d      	subs	r5, r1, r5
  4005cc:	042d      	lsls	r5, r5, #16
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4005ce:	ea45 5507 	orr.w	r5, r5, r7, lsl #20
  4005d2:	4335      	orrs	r5, r6

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4005d4:	fba4 6102 	umull	r6, r1, r4, r2
  4005d8:	08ce      	lsrs	r6, r1, #3
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4005da:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4005de:	0079      	lsls	r1, r7, #1
  4005e0:	1a51      	subs	r1, r2, r1
  4005e2:	0209      	lsls	r1, r1, #8
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4005e4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  4005e8:	4329      	orrs	r1, r5

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4005ea:	fba4 4203 	umull	r4, r2, r4, r3
  4005ee:	08d2      	lsrs	r2, r2, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4005f0:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4005f4:	006c      	lsls	r4, r5, #1
  4005f6:	1b1c      	subs	r4, r3, r4
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4005f8:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  4005fc:	430a      	orrs	r2, r1

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4005fe:	6983      	ldr	r3, [r0, #24]
  400600:	f013 0f04 	tst.w	r3, #4
  400604:	d0fb      	beq.n	4005fe <rtc_set_time+0x5e>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400606:	6803      	ldr	r3, [r0, #0]
  400608:	f043 0301 	orr.w	r3, r3, #1
  40060c:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40060e:	6983      	ldr	r3, [r0, #24]
  400610:	f013 0f01 	tst.w	r3, #1
  400614:	d0fb      	beq.n	40060e <rtc_set_time+0x6e>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400616:	2301      	movs	r3, #1
  400618:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  40061a:	6082      	str	r2, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  40061c:	6803      	ldr	r3, [r0, #0]
  40061e:	f023 0301 	bic.w	r3, r3, #1
  400622:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400624:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400626:	f000 0001 	and.w	r0, r0, #1
  40062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t ul_time = 0;
  40062c:	2600      	movs	r6, #0
  40062e:	e7c3      	b.n	4005b8 <rtc_set_time+0x18>
  400630:	cccccccd 	.word	0xcccccccd

00400634 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400634:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400636:	4d2c      	ldr	r5, [pc, #176]	; (4006e8 <rtc_set_date+0xb4>)
  400638:	fba5 4501 	umull	r4, r5, r5, r1
  40063c:	09af      	lsrs	r7, r5, #6
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40063e:	4c2b      	ldr	r4, [pc, #172]	; (4006ec <rtc_set_date+0xb8>)
  400640:	fba4 5401 	umull	r5, r4, r4, r1
  400644:	0964      	lsrs	r4, r4, #5
  400646:	4e2a      	ldr	r6, [pc, #168]	; (4006f0 <rtc_set_date+0xbc>)
  400648:	fba6 e504 	umull	lr, r5, r6, r4
  40064c:	08ed      	lsrs	r5, r5, #3
  40064e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400652:	ea4f 0e45 	mov.w	lr, r5, lsl #1
  400656:	eba4 050e 	sub.w	r5, r4, lr
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  40065a:	ea45 1507 	orr.w	r5, r5, r7, lsl #4

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40065e:	fba6 7401 	umull	r7, r4, r6, r1
  400662:	08e4      	lsrs	r4, r4, #3
  400664:	fba6 7e04 	umull	r7, lr, r6, r4
  400668:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  40066c:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  400670:	ea4f 074e 	mov.w	r7, lr, lsl #1
  400674:	eba4 0e07 	sub.w	lr, r4, r7
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400678:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40067c:	0067      	lsls	r7, r4, #1
  40067e:	1bcf      	subs	r7, r1, r7
  400680:	0239      	lsls	r1, r7, #8
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  400682:	ea41 310e 	orr.w	r1, r1, lr, lsl #12
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400686:	4329      	orrs	r1, r5

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400688:	fba6 4502 	umull	r4, r5, r6, r2
  40068c:	08ed      	lsrs	r5, r5, #3
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40068e:	eb05 0785 	add.w	r7, r5, r5, lsl #2
  400692:	007c      	lsls	r4, r7, #1
  400694:	1b14      	subs	r4, r2, r4
  400696:	0424      	lsls	r4, r4, #16
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400698:	ea44 5205 	orr.w	r2, r4, r5, lsl #20
  40069c:	4311      	orrs	r1, r2

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40069e:	9a05      	ldr	r2, [sp, #20]
  4006a0:	ea41 5142 	orr.w	r1, r1, r2, lsl #21

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006a4:	fba6 4203 	umull	r4, r2, r6, r3
  4006a8:	08d2      	lsrs	r2, r2, #3
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4006aa:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4006ae:	006c      	lsls	r4, r5, #1
  4006b0:	1b1c      	subs	r4, r3, r4
  4006b2:	0624      	lsls	r4, r4, #24
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006b4:	ea44 7202 	orr.w	r2, r4, r2, lsl #28
  4006b8:	430a      	orrs	r2, r1

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4006ba:	6983      	ldr	r3, [r0, #24]
  4006bc:	f013 0f04 	tst.w	r3, #4
  4006c0:	d0fb      	beq.n	4006ba <rtc_set_date+0x86>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4006c2:	6803      	ldr	r3, [r0, #0]
  4006c4:	f043 0302 	orr.w	r3, r3, #2
  4006c8:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4006ca:	6983      	ldr	r3, [r0, #24]
  4006cc:	f013 0f01 	tst.w	r3, #1
  4006d0:	d0fb      	beq.n	4006ca <rtc_set_date+0x96>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4006d2:	2301      	movs	r3, #1
  4006d4:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4006d6:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4006d8:	6803      	ldr	r3, [r0, #0]
  4006da:	f023 0302 	bic.w	r3, r3, #2
  4006de:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4006e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4006e2:	f000 0002 	and.w	r0, r0, #2
  4006e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4006e8:	10624dd3 	.word	0x10624dd3
  4006ec:	51eb851f 	.word	0x51eb851f
  4006f0:	cccccccd 	.word	0xcccccccd

004006f4 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4006f4:	6980      	ldr	r0, [r0, #24]
}
  4006f6:	4770      	bx	lr

004006f8 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4006f8:	61c1      	str	r1, [r0, #28]
  4006fa:	4770      	bx	lr

004006fc <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4006fc:	4b03      	ldr	r3, [pc, #12]	; (40070c <rtt_init+0x10>)
  4006fe:	681b      	ldr	r3, [r3, #0]
  400700:	4319      	orrs	r1, r3
  400702:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400706:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400708:	2000      	movs	r0, #0
  40070a:	4770      	bx	lr
  40070c:	20400ab4 	.word	0x20400ab4

00400710 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  400710:	b941      	cbnz	r1, 400724 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400712:	4a09      	ldr	r2, [pc, #36]	; (400738 <rtt_sel_source+0x28>)
  400714:	6813      	ldr	r3, [r2, #0]
  400716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40071a:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40071c:	6802      	ldr	r2, [r0, #0]
  40071e:	4313      	orrs	r3, r2
  400720:	6003      	str	r3, [r0, #0]
  400722:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400724:	4a04      	ldr	r2, [pc, #16]	; (400738 <rtt_sel_source+0x28>)
  400726:	6813      	ldr	r3, [r2, #0]
  400728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  40072c:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40072e:	6802      	ldr	r2, [r0, #0]
  400730:	4313      	orrs	r3, r2
  400732:	6003      	str	r3, [r0, #0]
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	20400ab4 	.word	0x20400ab4

0040073c <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40073c:	6803      	ldr	r3, [r0, #0]
	temp |= ul_sources;
  40073e:	4319      	orrs	r1, r3
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400740:	4b02      	ldr	r3, [pc, #8]	; (40074c <rtt_enable_interrupt+0x10>)
  400742:	681b      	ldr	r3, [r3, #0]
  400744:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400746:	6001      	str	r1, [r0, #0]
  400748:	4770      	bx	lr
  40074a:	bf00      	nop
  40074c:	20400ab4 	.word	0x20400ab4

00400750 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400750:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400752:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400756:	4b02      	ldr	r3, [pc, #8]	; (400760 <rtt_disable_interrupt+0x10>)
  400758:	681b      	ldr	r3, [r3, #0]
  40075a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40075c:	6001      	str	r1, [r0, #0]
  40075e:	4770      	bx	lr
  400760:	20400ab4 	.word	0x20400ab4

00400764 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400764:	6883      	ldr	r3, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400766:	e000      	b.n	40076a <rtt_read_timer_value+0x6>
		rtt_val = p_rtt->RTT_VR;
  400768:	6883      	ldr	r3, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40076a:	6882      	ldr	r2, [r0, #8]
  40076c:	4293      	cmp	r3, r2
  40076e:	d1fb      	bne.n	400768 <rtt_read_timer_value+0x4>
	}

	return rtt_val;
}
  400770:	4618      	mov	r0, r3
  400772:	4770      	bx	lr

00400774 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400774:	68c0      	ldr	r0, [r0, #12]
}
  400776:	4770      	bx	lr

00400778 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400778:	b570      	push	{r4, r5, r6, lr}
  40077a:	4606      	mov	r6, r0
  40077c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40077e:	6804      	ldr	r4, [r0, #0]
  400780:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400784:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400788:	4809      	ldr	r0, [pc, #36]	; (4007b0 <rtt_write_alarm_time+0x38>)
  40078a:	4b0a      	ldr	r3, [pc, #40]	; (4007b4 <rtt_write_alarm_time+0x3c>)
  40078c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40078e:	b92d      	cbnz	r5, 40079c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400790:	f04f 33ff 	mov.w	r3, #4294967295
  400794:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400796:	b924      	cbnz	r4, 4007a2 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400798:	2000      	movs	r0, #0
  40079a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40079c:	3d01      	subs	r5, #1
  40079e:	6075      	str	r5, [r6, #4]
  4007a0:	e7f9      	b.n	400796 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  4007a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4007a6:	4802      	ldr	r0, [pc, #8]	; (4007b0 <rtt_write_alarm_time+0x38>)
  4007a8:	4b03      	ldr	r3, [pc, #12]	; (4007b8 <rtt_write_alarm_time+0x40>)
  4007aa:	4798      	blx	r3
  4007ac:	e7f4      	b.n	400798 <rtt_write_alarm_time+0x20>
  4007ae:	bf00      	nop
  4007b0:	400e1830 	.word	0x400e1830
  4007b4:	00400751 	.word	0x00400751
  4007b8:	0040073d 	.word	0x0040073d

004007bc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4007bc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007be:	0189      	lsls	r1, r1, #6
  4007c0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4007c2:	2402      	movs	r4, #2
  4007c4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4007c6:	f04f 31ff 	mov.w	r1, #4294967295
  4007ca:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4007cc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4007ce:	605a      	str	r2, [r3, #4]
}
  4007d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007d4:	4770      	bx	lr

004007d6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4007d6:	0189      	lsls	r1, r1, #6
  4007d8:	2305      	movs	r3, #5
  4007da:	5043      	str	r3, [r0, r1]
  4007dc:	4770      	bx	lr

004007de <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4007de:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4007e2:	61ca      	str	r2, [r1, #28]
  4007e4:	4770      	bx	lr

004007e6 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007e6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4007ea:	624a      	str	r2, [r1, #36]	; 0x24
  4007ec:	4770      	bx	lr

004007ee <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007ee:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4007f2:	6a08      	ldr	r0, [r1, #32]
}
  4007f4:	4770      	bx	lr

004007f6 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4007f6:	b470      	push	{r4, r5, r6}
  4007f8:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4007fa:	2402      	movs	r4, #2
  4007fc:	9401      	str	r4, [sp, #4]
  4007fe:	2408      	movs	r4, #8
  400800:	9402      	str	r4, [sp, #8]
  400802:	2420      	movs	r4, #32
  400804:	9403      	str	r4, [sp, #12]
  400806:	2480      	movs	r4, #128	; 0x80
  400808:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40080a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40080c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40080e:	9405      	str	r4, [sp, #20]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400810:	2500      	movs	r5, #0
  400812:	2d04      	cmp	r5, #4
  400814:	d80d      	bhi.n	400832 <tc_find_mck_divisor+0x3c>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400816:	ac06      	add	r4, sp, #24
  400818:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  40081c:	f854 4c14 	ldr.w	r4, [r4, #-20]
  400820:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400824:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400826:	4284      	cmp	r4, r0
  400828:	d312      	bcc.n	400850 <tc_find_mck_divisor+0x5a>
			return 0;
		} else if (ul_freq >= ul_low) {
  40082a:	4286      	cmp	r6, r0
  40082c:	d901      	bls.n	400832 <tc_find_mck_divisor+0x3c>
			ul_index++) {
  40082e:	3501      	adds	r5, #1
  400830:	e7ef      	b.n	400812 <tc_find_mck_divisor+0x1c>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400832:	2d04      	cmp	r5, #4
  400834:	d80e      	bhi.n	400854 <tc_find_mck_divisor+0x5e>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  400836:	b12a      	cbz	r2, 400844 <tc_find_mck_divisor+0x4e>
		*p_uldiv = divisors[ul_index];
  400838:	a906      	add	r1, sp, #24
  40083a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40083e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400842:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  400844:	b143      	cbz	r3, 400858 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  400846:	601d      	str	r5, [r3, #0]
	}

	return 1;
  400848:	2001      	movs	r0, #1
}
  40084a:	b007      	add	sp, #28
  40084c:	bc70      	pop	{r4, r5, r6}
  40084e:	4770      	bx	lr
			return 0;
  400850:	2000      	movs	r0, #0
  400852:	e7fa      	b.n	40084a <tc_find_mck_divisor+0x54>
		return 0;
  400854:	2000      	movs	r0, #0
  400856:	e7f8      	b.n	40084a <tc_find_mck_divisor+0x54>
	return 1;
  400858:	2001      	movs	r0, #1
  40085a:	e7f6      	b.n	40084a <tc_find_mck_divisor+0x54>

0040085c <insert_sort>:

int readTouchY(void) {
  return (readXm());
}

static void insert_sort(int array[], uint8_t size) {
  40085c:	b430      	push	{r4, r5}
  uint8_t j;
  int save;

  for (int i = 1; i < size; i++) {
  40085e:	2501      	movs	r5, #1
  400860:	e00e      	b.n	400880 <insert_sort+0x24>
    save = array[i];
    for (j = i; j >= 1 && save < array[j - 1]; j--)
    array[j] = array[j - 1];
  400862:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  400866:	3b01      	subs	r3, #1
  400868:	b2db      	uxtb	r3, r3
  40086a:	b133      	cbz	r3, 40087a <insert_sort+0x1e>
  40086c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  400870:	441a      	add	r2, r3
  400872:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  400876:	4294      	cmp	r4, r2
  400878:	dbf3      	blt.n	400862 <insert_sort+0x6>
    array[j] = save;
  40087a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for (int i = 1; i < size; i++) {
  40087e:	3501      	adds	r5, #1
  400880:	428d      	cmp	r5, r1
  400882:	da03      	bge.n	40088c <insert_sort+0x30>
    save = array[i];
  400884:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  400888:	b2eb      	uxtb	r3, r5
  40088a:	e7ee      	b.n	40086a <insert_sort+0xe>
  }
}
  40088c:	bc30      	pop	{r4, r5}
  40088e:	4770      	bx	lr

00400890 <config_AFEC_touch>:
static void config_AFEC_touch(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback) {
  400890:	b530      	push	{r4, r5, lr}
  400892:	b089      	sub	sp, #36	; 0x24
  400894:	4604      	mov	r4, r0
  400896:	4615      	mov	r5, r2
  afec_get_config_defaults(&afec_cfg);
  400898:	a802      	add	r0, sp, #8
  40089a:	4b13      	ldr	r3, [pc, #76]	; (4008e8 <config_AFEC_touch+0x58>)
  40089c:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  40089e:	a902      	add	r1, sp, #8
  4008a0:	4620      	mov	r0, r4
  4008a2:	4b12      	ldr	r3, [pc, #72]	; (4008ec <config_AFEC_touch+0x5c>)
  4008a4:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  4008a6:	6863      	ldr	r3, [r4, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
  4008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  4008ac:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  4008ae:	a801      	add	r0, sp, #4
  4008b0:	4b0f      	ldr	r3, [pc, #60]	; (4008f0 <config_AFEC_touch+0x60>)
  4008b2:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4008b4:	2300      	movs	r3, #0
  4008b6:	f88d 3005 	strb.w	r3, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  4008ba:	b2ad      	uxth	r5, r5
  4008bc:	aa01      	add	r2, sp, #4
  4008be:	4629      	mov	r1, r5
  4008c0:	4620      	mov	r0, r4
  4008c2:	4b0c      	ldr	r3, [pc, #48]	; (4008f4 <config_AFEC_touch+0x64>)
  4008c4:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4008c6:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4008c8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4008cc:	66e3      	str	r3, [r4, #108]	; 0x6c
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4008ce:	f640 73ff 	movw	r3, #4095	; 0xfff
  4008d2:	429d      	cmp	r5, r3
  4008d4:	d005      	beq.n	4008e2 <config_AFEC_touch+0x52>
  4008d6:	2301      	movs	r3, #1
  4008d8:	fa03 f505 	lsl.w	r5, r3, r5
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4008dc:	6165      	str	r5, [r4, #20]
}
  4008de:	b009      	add	sp, #36	; 0x24
  4008e0:	bd30      	pop	{r4, r5, pc}
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4008e2:	f640 75ff 	movw	r5, #4095	; 0xfff
  4008e6:	e7f9      	b.n	4008dc <config_AFEC_touch+0x4c>
  4008e8:	004015a9 	.word	0x004015a9
  4008ec:	004015f9 	.word	0x004015f9
  4008f0:	004015d9 	.word	0x004015d9
  4008f4:	00401559 	.word	0x00401559

004008f8 <configure_touch>:
void configure_touch(void) {
  4008f8:	b570      	push	{r4, r5, r6, lr}
  pmc_enable_periph_clk(XM_PIO_ID);
  4008fa:	200c      	movs	r0, #12
  4008fc:	4c0d      	ldr	r4, [pc, #52]	; (400934 <configure_touch+0x3c>)
  4008fe:	47a0      	blx	r4
  pmc_enable_periph_clk(YP_PIO_ID);
  400900:	2010      	movs	r0, #16
  400902:	47a0      	blx	r4
  pmc_enable_periph_clk(XP_PIO_ID);
  400904:	200c      	movs	r0, #12
  400906:	47a0      	blx	r4
  pmc_enable_periph_clk(YM_PIO_ID);
  400908:	2010      	movs	r0, #16
  40090a:	47a0      	blx	r4
  afec_enable(XM_AFEC);
  40090c:	4d0a      	ldr	r5, [pc, #40]	; (400938 <configure_touch+0x40>)
  40090e:	4628      	mov	r0, r5
  400910:	4e0a      	ldr	r6, [pc, #40]	; (40093c <configure_touch+0x44>)
  400912:	47b0      	blx	r6
  afec_enable(YP_AFEC);
  400914:	4c0a      	ldr	r4, [pc, #40]	; (400940 <configure_touch+0x48>)
  400916:	4620      	mov	r0, r4
  400918:	47b0      	blx	r6
  config_AFEC_touch(YP_AFEC, YP_AFEC_ID, YP_CHANNEL, NULL);
  40091a:	2300      	movs	r3, #0
  40091c:	461a      	mov	r2, r3
  40091e:	211d      	movs	r1, #29
  400920:	4620      	mov	r0, r4
  400922:	4c08      	ldr	r4, [pc, #32]	; (400944 <configure_touch+0x4c>)
  400924:	47a0      	blx	r4
  config_AFEC_touch(XM_AFEC, XM_AFEC_ID, XM_CHANNEL, NULL);
  400926:	2300      	movs	r3, #0
  400928:	2201      	movs	r2, #1
  40092a:	2128      	movs	r1, #40	; 0x28
  40092c:	4628      	mov	r0, r5
  40092e:	47a0      	blx	r4
  400930:	bd70      	pop	{r4, r5, r6, pc}
  400932:	bf00      	nop
  400934:	00424f8d 	.word	0x00424f8d
  400938:	40064000 	.word	0x40064000
  40093c:	00401731 	.word	0x00401731
  400940:	4003c000 	.word	0x4003c000
  400944:	00400891 	.word	0x00400891

00400948 <readYp>:
	afec->AFEC_CSELR = afec_ch;
  400948:	4b02      	ldr	r3, [pc, #8]	; (400954 <readYp+0xc>)
  40094a:	2200      	movs	r2, #0
  40094c:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40094e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400950:	4770      	bx	lr
  400952:	bf00      	nop
  400954:	4003c000 	.word	0x4003c000

00400958 <readXm>:
	afec->AFEC_CSELR = afec_ch;
  400958:	4b02      	ldr	r3, [pc, #8]	; (400964 <readXm+0xc>)
  40095a:	2201      	movs	r2, #1
  40095c:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40095e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400960:	4770      	bx	lr
  400962:	bf00      	nop
  400964:	40064000 	.word	0x40064000

00400968 <configReadTouchX>:
void configReadTouchX(void){
  400968:	b538      	push	{r3, r4, r5, lr}
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40096a:	2201      	movs	r2, #1
  40096c:	4b14      	ldr	r3, [pc, #80]	; (4009c0 <configReadTouchX+0x58>)
  40096e:	615a      	str	r2, [r3, #20]
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  400970:	2202      	movs	r2, #2
  400972:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400976:	619a      	str	r2, [r3, #24]
  pio_configure(XP_PIO, PIO_OUTPUT_1, XP_MASK, PIO_DEFAULT);
  400978:	4d12      	ldr	r5, [pc, #72]	; (4009c4 <configReadTouchX+0x5c>)
  40097a:	2300      	movs	r3, #0
  40097c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400980:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400984:	4628      	mov	r0, r5
  400986:	4c10      	ldr	r4, [pc, #64]	; (4009c8 <configReadTouchX+0x60>)
  400988:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_OUTPUT_0, XM_MASK, PIO_DEFAULT);
  40098a:	2300      	movs	r3, #0
  40098c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400990:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400994:	4628      	mov	r0, r5
  400996:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_INPUT, YM_MASK, PIO_DEFAULT);
  400998:	f505 7500 	add.w	r5, r5, #512	; 0x200
  40099c:	2300      	movs	r3, #0
  40099e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4009a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4009a6:	4628      	mov	r0, r5
  4009a8:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  4009aa:	2300      	movs	r3, #0
  4009ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4009b4:	4628      	mov	r0, r5
  4009b6:	47a0      	blx	r4
  delay_ms(5);
  4009b8:	4804      	ldr	r0, [pc, #16]	; (4009cc <configReadTouchX+0x64>)
  4009ba:	4b05      	ldr	r3, [pc, #20]	; (4009d0 <configReadTouchX+0x68>)
  4009bc:	4798      	blx	r3
  4009be:	bd38      	pop	{r3, r4, r5, pc}
  4009c0:	4003c000 	.word	0x4003c000
  4009c4:	400e1200 	.word	0x400e1200
  4009c8:	00424bd5 	.word	0x00424bd5
  4009cc:	0003dbc2 	.word	0x0003dbc2
  4009d0:	20400001 	.word	0x20400001

004009d4 <configReadTouchY>:
void configReadTouchY(void) {
  4009d4:	b538      	push	{r3, r4, r5, lr}
  4009d6:	2201      	movs	r2, #1
  4009d8:	4b14      	ldr	r3, [pc, #80]	; (400a2c <configReadTouchY+0x58>)
  4009da:	619a      	str	r2, [r3, #24]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4009dc:	2202      	movs	r2, #2
  4009de:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4009e2:	615a      	str	r2, [r3, #20]
  pio_configure(YP_PIO, PIO_OUTPUT_1, YP_MASK, PIO_DEFAULT);
  4009e4:	4d12      	ldr	r5, [pc, #72]	; (400a30 <configReadTouchY+0x5c>)
  4009e6:	2300      	movs	r3, #0
  4009e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4009f0:	4628      	mov	r0, r5
  4009f2:	4c10      	ldr	r4, [pc, #64]	; (400a34 <configReadTouchY+0x60>)
  4009f4:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_0, YM_MASK, PIO_DEFAULT);
  4009f6:	2300      	movs	r3, #0
  4009f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4009fc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400a00:	4628      	mov	r0, r5
  400a02:	47a0      	blx	r4
  pio_configure(XP_PIO, PIO_INPUT, XP_MASK, PIO_DEFAULT);
  400a04:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
  400a08:	2300      	movs	r3, #0
  400a0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400a0e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a12:	4628      	mov	r0, r5
  400a14:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  400a16:	2300      	movs	r3, #0
  400a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a1c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a20:	4628      	mov	r0, r5
  400a22:	47a0      	blx	r4
  delay_ms(5);
  400a24:	4804      	ldr	r0, [pc, #16]	; (400a38 <configReadTouchY+0x64>)
  400a26:	4b05      	ldr	r3, [pc, #20]	; (400a3c <configReadTouchY+0x68>)
  400a28:	4798      	blx	r3
  400a2a:	bd38      	pop	{r3, r4, r5, pc}
  400a2c:	4003c000 	.word	0x4003c000
  400a30:	400e1400 	.word	0x400e1400
  400a34:	00424bd5 	.word	0x00424bd5
  400a38:	0003dbc2 	.word	0x0003dbc2
  400a3c:	20400001 	.word	0x20400001

00400a40 <readTouchZ>:
int readTouchZ(int rxplate) {
  400a40:	b570      	push	{r4, r5, r6, lr}
  400a42:	ed2d 8b04 	vpush	{d8-d9}
  400a46:	ee08 0a10 	vmov	s16, r0
  pio_configure(XP_PIO, PIO_OUTPUT_0, XP_MASK, PIO_DEFAULT);
  400a4a:	4d2e      	ldr	r5, [pc, #184]	; (400b04 <readTouchZ+0xc4>)
  400a4c:	2300      	movs	r3, #0
  400a4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400a52:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400a56:	4628      	mov	r0, r5
  400a58:	4c2b      	ldr	r4, [pc, #172]	; (400b08 <readTouchZ+0xc8>)
  400a5a:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_1, YM_MASK, PIO_DEFAULT);
  400a5c:	4e2b      	ldr	r6, [pc, #172]	; (400b0c <readTouchZ+0xcc>)
  400a5e:	2300      	movs	r3, #0
  400a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400a64:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400a68:	4630      	mov	r0, r6
  400a6a:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  400a6c:	2300      	movs	r3, #0
  400a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400a72:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a76:	4630      	mov	r0, r6
  400a78:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  400a7a:	2300      	movs	r3, #0
  400a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a80:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a84:	4628      	mov	r0, r5
  400a86:	47a0      	blx	r4
  400a88:	2201      	movs	r2, #1
  400a8a:	4b21      	ldr	r3, [pc, #132]	; (400b10 <readTouchZ+0xd0>)
  400a8c:	615a      	str	r2, [r3, #20]
  400a8e:	2202      	movs	r2, #2
  400a90:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400a94:	615a      	str	r2, [r3, #20]
  delay_ms(5);
  400a96:	481f      	ldr	r0, [pc, #124]	; (400b14 <readTouchZ+0xd4>)
  400a98:	4b1f      	ldr	r3, [pc, #124]	; (400b18 <readTouchZ+0xd8>)
  400a9a:	4798      	blx	r3
  int z1 = readXm();
  400a9c:	4c1f      	ldr	r4, [pc, #124]	; (400b1c <readTouchZ+0xdc>)
  400a9e:	47a0      	blx	r4
  400aa0:	ee08 0a90 	vmov	s17, r0
  int z2 = readYp();
  400aa4:	4b1e      	ldr	r3, [pc, #120]	; (400b20 <readTouchZ+0xe0>)
  400aa6:	4798      	blx	r3
  400aa8:	ee09 0a10 	vmov	s18, r0
  configReadTouchX();
  400aac:	4b1d      	ldr	r3, [pc, #116]	; (400b24 <readTouchZ+0xe4>)
  400aae:	4798      	blx	r3
  int x  = readXm();
  400ab0:	47a0      	blx	r4
  rtouch = z2;
  400ab2:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  rtouch /= z1;
  400ab6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  400aba:	ee89 7a28 	vdiv.f32	s14, s18, s17
  rtouch -= 1;
  400abe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
  rtouch *= x;
  400ac6:	ee07 0a90 	vmov	s15, r0
  400aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400ace:	ee27 7a87 	vmul.f32	s14, s15, s14
  rtouch *= rxplate;
  400ad2:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  400ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
  rtouch /= 1024;
  400ada:	ed9f 7a13 	vldr	s14, [pc, #76]	; 400b28 <readTouchZ+0xe8>
  400ade:	ee67 7a87 	vmul.f32	s15, s15, s14
  if(rtouch < 100.0)
  400ae2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 400b2c <readTouchZ+0xec>
  400ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
  400aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400aee:	d501      	bpl.n	400af4 <readTouchZ+0xb4>
  rtouch = 1024.0;
  400af0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 400b30 <readTouchZ+0xf0>
}
  400af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400af8:	ee17 0a90 	vmov	r0, s15
  400afc:	ecbd 8b04 	vpop	{d8-d9}
  400b00:	bd70      	pop	{r4, r5, r6, pc}
  400b02:	bf00      	nop
  400b04:	400e1200 	.word	0x400e1200
  400b08:	00424bd5 	.word	0x00424bd5
  400b0c:	400e1400 	.word	0x400e1400
  400b10:	4003c000 	.word	0x4003c000
  400b14:	0003dbc2 	.word	0x0003dbc2
  400b18:	20400001 	.word	0x20400001
  400b1c:	00400959 	.word	0x00400959
  400b20:	00400949 	.word	0x00400949
  400b24:	00400969 	.word	0x00400969
  400b28:	3a800000 	.word	0x3a800000
  400b2c:	42c80000 	.word	0x42c80000
  400b30:	44800000 	.word	0x44800000

00400b34 <readTouchX>:
int readTouchX(void) {
  400b34:	b508      	push	{r3, lr}
  return(readYp());
  400b36:	4b01      	ldr	r3, [pc, #4]	; (400b3c <readTouchX+0x8>)
  400b38:	4798      	blx	r3
}
  400b3a:	bd08      	pop	{r3, pc}
  400b3c:	00400949 	.word	0x00400949

00400b40 <readTouchY>:
int readTouchY(void) {
  400b40:	b508      	push	{r3, lr}
  return (readXm());
  400b42:	4b01      	ldr	r3, [pc, #4]	; (400b48 <readTouchY+0x8>)
  400b44:	4798      	blx	r3
}
  400b46:	bd08      	pop	{r3, pc}
  400b48:	00400959 	.word	0x00400959

00400b4c <readRawPoint>:

void readRawPoint(int *x, int *y, int *z) {
  400b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b4e:	b0c1      	sub	sp, #260	; 0x104
  400b50:	4607      	mov	r7, r0
  400b52:	460e      	mov	r6, r1
  400b54:	4615      	mov	r5, r2
  int samples[TOUCH_NUMSAMPLES];
  char valid = 0 ;
  
  configReadTouchX();
  400b56:	4b16      	ldr	r3, [pc, #88]	; (400bb0 <readRawPoint+0x64>)
  400b58:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400b5a:	2400      	movs	r4, #0
  400b5c:	e007      	b.n	400b6e <readRawPoint+0x22>
    delay_us(1);
  400b5e:	2033      	movs	r0, #51	; 0x33
  400b60:	4b14      	ldr	r3, [pc, #80]	; (400bb4 <readRawPoint+0x68>)
  400b62:	4798      	blx	r3
    samples[i] = readTouchX();
  400b64:	4b14      	ldr	r3, [pc, #80]	; (400bb8 <readRawPoint+0x6c>)
  400b66:	4798      	blx	r3
  400b68:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400b6c:	3401      	adds	r4, #1
  400b6e:	2c3f      	cmp	r4, #63	; 0x3f
  400b70:	ddf5      	ble.n	400b5e <readRawPoint+0x12>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  400b72:	2140      	movs	r1, #64	; 0x40
  400b74:	4668      	mov	r0, sp
  400b76:	4b11      	ldr	r3, [pc, #68]	; (400bbc <readRawPoint+0x70>)
  400b78:	4798      	blx	r3
  *x = (samples[TOUCH_NUMSAMPLES / 2]);
  400b7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  400b7c:	603b      	str	r3, [r7, #0]
  
  configReadTouchY();
  400b7e:	4b10      	ldr	r3, [pc, #64]	; (400bc0 <readRawPoint+0x74>)
  400b80:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400b82:	2400      	movs	r4, #0
  400b84:	e004      	b.n	400b90 <readRawPoint+0x44>
    samples[i] = readTouchY();
  400b86:	4b0f      	ldr	r3, [pc, #60]	; (400bc4 <readRawPoint+0x78>)
  400b88:	4798      	blx	r3
  400b8a:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400b8e:	3401      	adds	r4, #1
  400b90:	2c3f      	cmp	r4, #63	; 0x3f
  400b92:	ddf8      	ble.n	400b86 <readRawPoint+0x3a>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  400b94:	2140      	movs	r1, #64	; 0x40
  400b96:	4668      	mov	r0, sp
  400b98:	4b08      	ldr	r3, [pc, #32]	; (400bbc <readRawPoint+0x70>)
  400b9a:	4798      	blx	r3
  *y = (samples[TOUCH_NUMSAMPLES / 2]);
  400b9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  400b9e:	6033      	str	r3, [r6, #0]
  
  *z = readTouchZ(300);
  400ba0:	f44f 7096 	mov.w	r0, #300	; 0x12c
  400ba4:	4b08      	ldr	r3, [pc, #32]	; (400bc8 <readRawPoint+0x7c>)
  400ba6:	4798      	blx	r3
  400ba8:	6028      	str	r0, [r5, #0]
}
  400baa:	b041      	add	sp, #260	; 0x104
  400bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400bae:	bf00      	nop
  400bb0:	00400969 	.word	0x00400969
  400bb4:	20400001 	.word	0x20400001
  400bb8:	00400b35 	.word	0x00400b35
  400bbc:	0040085d 	.word	0x0040085d
  400bc0:	004009d5 	.word	0x004009d5
  400bc4:	00400b41 	.word	0x00400b41
  400bc8:	00400a41 	.word	0x00400a41

00400bcc <pointToCoordinate>:

// returns if valid touch
// checks Z pressure!
int pointToCoordinate(int x, int y, int z, int *px, int *py) {
  400bcc:	b510      	push	{r4, lr}
  int xtemp, ytemp;
  
  xtemp = TOUCH_LCD_WIDTH*(x-TOUCH_X_240)/(TOUCH_X_0-TOUCH_X_240);
  400bce:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
  400bd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  400bd6:	0104      	lsls	r4, r0, #4
  400bd8:	4818      	ldr	r0, [pc, #96]	; (400c3c <pointToCoordinate+0x70>)
  400bda:	fb80 e004 	smull	lr, r0, r0, r4
  400bde:	4420      	add	r0, r4
  400be0:	17e4      	asrs	r4, r4, #31
  400be2:	ebc4 24e0 	rsb	r4, r4, r0, asr #11
  if(xtemp > TOUCH_LCD_WIDTH) xtemp=TOUCH_LCD_WIDTH;
  400be6:	2cf0      	cmp	r4, #240	; 0xf0
  400be8:	dd00      	ble.n	400bec <pointToCoordinate+0x20>
  400bea:	24f0      	movs	r4, #240	; 0xf0
  if(xtemp < 0) xtemp=0;
  400bec:	2c00      	cmp	r4, #0
  400bee:	db1e      	blt.n	400c2e <pointToCoordinate+0x62>
  *py = xtemp;
  400bf0:	9802      	ldr	r0, [sp, #8]
  400bf2:	6004      	str	r4, [r0, #0]
    
  ytemp = TOUCH_LCD_HEIGHT - TOUCH_LCD_HEIGHT*(y-TOUCH_Y_0)/(TOUCH_Y_320-TOUCH_Y_0);
  400bf4:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
  400bf8:	ebc1 6001 	rsb	r0, r1, r1, lsl #24
  400bfc:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
  400c00:	0188      	lsls	r0, r1, #6
  400c02:	490f      	ldr	r1, [pc, #60]	; (400c40 <pointToCoordinate+0x74>)
  400c04:	fb81 4100 	smull	r4, r1, r1, r0
  400c08:	4401      	add	r1, r0
  400c0a:	17c0      	asrs	r0, r0, #31
  400c0c:	ebc0 20e1 	rsb	r0, r0, r1, asr #11
  400c10:	f500 70a0 	add.w	r0, r0, #320	; 0x140
  if(ytemp > TOUCH_LCD_HEIGHT) ytemp=TOUCH_LCD_HEIGHT;
  400c14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  400c18:	dd01      	ble.n	400c1e <pointToCoordinate+0x52>
  400c1a:	f44f 70a0 	mov.w	r0, #320	; 0x140
  if(ytemp < 0) ytemp=0;
  400c1e:	2800      	cmp	r0, #0
  400c20:	db07      	blt.n	400c32 <pointToCoordinate+0x66>
  *px = ytemp;
  400c22:	6018      	str	r0, [r3, #0]

  if(z < TOUCH_PRESSURE_DETECT) {
  400c24:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  400c28:	db05      	blt.n	400c36 <pointToCoordinate+0x6a>
    return 1;
  }  
  return 0;
  400c2a:	2000      	movs	r0, #0
}
  400c2c:	bd10      	pop	{r4, pc}
  if(xtemp < 0) xtemp=0;
  400c2e:	2400      	movs	r4, #0
  400c30:	e7de      	b.n	400bf0 <pointToCoordinate+0x24>
  if(ytemp < 0) ytemp=0;
  400c32:	2000      	movs	r0, #0
  400c34:	e7f5      	b.n	400c22 <pointToCoordinate+0x56>
    return 1;
  400c36:	2001      	movs	r0, #1
  400c38:	bd10      	pop	{r4, pc}
  400c3a:	bf00      	nop
  400c3c:	cd9a6735 	.word	0xcd9a6735
  400c40:	bc97c21f 	.word	0xbc97c21f

00400c44 <readPoint>:

int readPoint(int *px, int *py){
  400c44:	b530      	push	{r4, r5, lr}
  400c46:	b087      	sub	sp, #28
  400c48:	4604      	mov	r4, r0
  400c4a:	460d      	mov	r5, r1
  int x, y, z;
  readRawPoint(&x, &y, &z);
  400c4c:	aa03      	add	r2, sp, #12
  400c4e:	a904      	add	r1, sp, #16
  400c50:	a805      	add	r0, sp, #20
  400c52:	4b05      	ldr	r3, [pc, #20]	; (400c68 <readPoint+0x24>)
  400c54:	4798      	blx	r3
  return(pointToCoordinate(x,y,z, px, py));
  400c56:	9500      	str	r5, [sp, #0]
  400c58:	4623      	mov	r3, r4
  400c5a:	9a03      	ldr	r2, [sp, #12]
  400c5c:	9904      	ldr	r1, [sp, #16]
  400c5e:	9805      	ldr	r0, [sp, #20]
  400c60:	4c02      	ldr	r4, [pc, #8]	; (400c6c <readPoint+0x28>)
  400c62:	47a0      	blx	r4
}
  400c64:	b007      	add	sp, #28
  400c66:	bd30      	pop	{r4, r5, pc}
  400c68:	00400b4d 	.word	0x00400b4d
  400c6c:	00400bcd 	.word	0x00400bcd

00400c70 <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c70:	2240      	movs	r2, #64	; 0x40
  400c72:	4b10      	ldr	r3, [pc, #64]	; (400cb4 <ili9341_send_command+0x44>)
  400c74:	635a      	str	r2, [r3, #52]	; 0x34
  400c76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400c7a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400c7e:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c80:	4b0d      	ldr	r3, [pc, #52]	; (400cb8 <ili9341_send_command+0x48>)
  400c82:	691b      	ldr	r3, [r3, #16]
  400c84:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c88:	d110      	bne.n	400cac <ili9341_send_command+0x3c>
		return 1;
	} else {
		return 0;
  400c8a:	2300      	movs	r3, #0
 * \brief Helper function to wait for the last send operation to complete
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400c8c:	2b00      	cmp	r3, #0
  400c8e:	d0f7      	beq.n	400c80 <ili9341_send_command+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c90:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <ili9341_send_command+0x48>)
  400c92:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c94:	4b08      	ldr	r3, [pc, #32]	; (400cb8 <ili9341_send_command+0x48>)
  400c96:	691b      	ldr	r3, [r3, #16]
  400c98:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c9c:	d108      	bne.n	400cb0 <ili9341_send_command+0x40>
		return 0;
  400c9e:	2300      	movs	r3, #0
  400ca0:	2b00      	cmp	r3, #0
  400ca2:	d0f7      	beq.n	400c94 <ili9341_send_command+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ca4:	2240      	movs	r2, #64	; 0x40
  400ca6:	4b03      	ldr	r3, [pc, #12]	; (400cb4 <ili9341_send_command+0x44>)
  400ca8:	631a      	str	r2, [r3, #48]	; 0x30
  400caa:	4770      	bx	lr
		return 1;
  400cac:	2301      	movs	r3, #1
  400cae:	e7ed      	b.n	400c8c <ili9341_send_command+0x1c>
  400cb0:	2301      	movs	r3, #1
  400cb2:	e7f5      	b.n	400ca0 <ili9341_send_command+0x30>
  400cb4:	400e0e00 	.word	0x400e0e00
  400cb8:	40008000 	.word	0x40008000

00400cbc <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
  400cbc:	b510      	push	{r4, lr}
  400cbe:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
  400cc0:	202a      	movs	r0, #42	; 0x2a
  400cc2:	4b4e      	ldr	r3, [pc, #312]	; (400dfc <ili9341_send_draw_limits+0x140>)
  400cc4:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
  400cc6:	4b4e      	ldr	r3, [pc, #312]	; (400e00 <ili9341_send_draw_limits+0x144>)
  400cc8:	f9b3 2000 	ldrsh.w	r2, [r3]
  400ccc:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400cd0:	4b4c      	ldr	r3, [pc, #304]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400cd2:	691b      	ldr	r3, [r3, #16]
  400cd4:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cd8:	d17b      	bne.n	400dd2 <ili9341_send_draw_limits+0x116>
		return 0;
  400cda:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400cdc:	2b00      	cmp	r3, #0
  400cde:	d0f7      	beq.n	400cd0 <ili9341_send_draw_limits+0x14>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ce0:	4b48      	ldr	r3, [pc, #288]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400ce2:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
  400ce4:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ce6:	4b47      	ldr	r3, [pc, #284]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400ce8:	691b      	ldr	r3, [r3, #16]
  400cea:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cee:	d172      	bne.n	400dd6 <ili9341_send_draw_limits+0x11a>
		return 0;
  400cf0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400cf2:	2b00      	cmp	r3, #0
  400cf4:	d0f7      	beq.n	400ce6 <ili9341_send_draw_limits+0x2a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400cf6:	4b43      	ldr	r3, [pc, #268]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400cf8:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400cfa:	b1cc      	cbz	r4, 400d30 <ili9341_send_draw_limits+0x74>
		ili9341_send_byte(limit_end_x >> 8);
  400cfc:	4b42      	ldr	r3, [pc, #264]	; (400e08 <ili9341_send_draw_limits+0x14c>)
  400cfe:	f9b3 2000 	ldrsh.w	r2, [r3]
  400d02:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d06:	4b3f      	ldr	r3, [pc, #252]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d08:	691b      	ldr	r3, [r3, #16]
  400d0a:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d0e:	d164      	bne.n	400dda <ili9341_send_draw_limits+0x11e>
		return 0;
  400d10:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d12:	2b00      	cmp	r3, #0
  400d14:	d0f7      	beq.n	400d06 <ili9341_send_draw_limits+0x4a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d16:	4b3b      	ldr	r3, [pc, #236]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d18:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
  400d1a:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d1c:	4b39      	ldr	r3, [pc, #228]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d1e:	691b      	ldr	r3, [r3, #16]
  400d20:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d24:	d15b      	bne.n	400dde <ili9341_send_draw_limits+0x122>
		return 0;
  400d26:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d28:	2b00      	cmp	r3, #0
  400d2a:	d0f7      	beq.n	400d1c <ili9341_send_draw_limits+0x60>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d2c:	4b35      	ldr	r3, [pc, #212]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d2e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d30:	4b34      	ldr	r3, [pc, #208]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d32:	691b      	ldr	r3, [r3, #16]
  400d34:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d38:	d153      	bne.n	400de2 <ili9341_send_draw_limits+0x126>
		return 0;
  400d3a:	2300      	movs	r3, #0
  400d3c:	2b00      	cmp	r3, #0
  400d3e:	d0f7      	beq.n	400d30 <ili9341_send_draw_limits+0x74>
  400d40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d44:	4b31      	ldr	r3, [pc, #196]	; (400e0c <ili9341_send_draw_limits+0x150>)
  400d46:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
  400d48:	202b      	movs	r0, #43	; 0x2b
  400d4a:	4b2c      	ldr	r3, [pc, #176]	; (400dfc <ili9341_send_draw_limits+0x140>)
  400d4c:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
  400d4e:	4b30      	ldr	r3, [pc, #192]	; (400e10 <ili9341_send_draw_limits+0x154>)
  400d50:	f9b3 2000 	ldrsh.w	r2, [r3]
  400d54:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d58:	4b2a      	ldr	r3, [pc, #168]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d5a:	691b      	ldr	r3, [r3, #16]
  400d5c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d60:	d141      	bne.n	400de6 <ili9341_send_draw_limits+0x12a>
		return 0;
  400d62:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d64:	2b00      	cmp	r3, #0
  400d66:	d0f7      	beq.n	400d58 <ili9341_send_draw_limits+0x9c>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d68:	4b26      	ldr	r3, [pc, #152]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d6a:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
  400d6c:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d6e:	4b25      	ldr	r3, [pc, #148]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d70:	691b      	ldr	r3, [r3, #16]
  400d72:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d76:	d138      	bne.n	400dea <ili9341_send_draw_limits+0x12e>
		return 0;
  400d78:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	d0f7      	beq.n	400d6e <ili9341_send_draw_limits+0xb2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d7e:	4b21      	ldr	r3, [pc, #132]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d80:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400d82:	b1cc      	cbz	r4, 400db8 <ili9341_send_draw_limits+0xfc>
		ili9341_send_byte(limit_end_y >> 8);
  400d84:	4b23      	ldr	r3, [pc, #140]	; (400e14 <ili9341_send_draw_limits+0x158>)
  400d86:	f9b3 2000 	ldrsh.w	r2, [r3]
  400d8a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d8e:	4b1d      	ldr	r3, [pc, #116]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d90:	691b      	ldr	r3, [r3, #16]
  400d92:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d96:	d12a      	bne.n	400dee <ili9341_send_draw_limits+0x132>
		return 0;
  400d98:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d9a:	2b00      	cmp	r3, #0
  400d9c:	d0f7      	beq.n	400d8e <ili9341_send_draw_limits+0xd2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d9e:	4b19      	ldr	r3, [pc, #100]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400da0:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
  400da2:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400da4:	4b17      	ldr	r3, [pc, #92]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400da6:	691b      	ldr	r3, [r3, #16]
  400da8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dac:	d121      	bne.n	400df2 <ili9341_send_draw_limits+0x136>
		return 0;
  400dae:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400db0:	2b00      	cmp	r3, #0
  400db2:	d0f7      	beq.n	400da4 <ili9341_send_draw_limits+0xe8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400db4:	4b13      	ldr	r3, [pc, #76]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400db6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400db8:	4b12      	ldr	r3, [pc, #72]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400dba:	691b      	ldr	r3, [r3, #16]
  400dbc:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dc0:	d119      	bne.n	400df6 <ili9341_send_draw_limits+0x13a>
		return 0;
  400dc2:	2300      	movs	r3, #0
  400dc4:	2b00      	cmp	r3, #0
  400dc6:	d0f7      	beq.n	400db8 <ili9341_send_draw_limits+0xfc>
  400dc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400dcc:	4b0f      	ldr	r3, [pc, #60]	; (400e0c <ili9341_send_draw_limits+0x150>)
  400dce:	631a      	str	r2, [r3, #48]	; 0x30
  400dd0:	bd10      	pop	{r4, pc}
		return 1;
  400dd2:	2301      	movs	r3, #1
  400dd4:	e782      	b.n	400cdc <ili9341_send_draw_limits+0x20>
  400dd6:	2301      	movs	r3, #1
  400dd8:	e78b      	b.n	400cf2 <ili9341_send_draw_limits+0x36>
  400dda:	2301      	movs	r3, #1
  400ddc:	e799      	b.n	400d12 <ili9341_send_draw_limits+0x56>
  400dde:	2301      	movs	r3, #1
  400de0:	e7a2      	b.n	400d28 <ili9341_send_draw_limits+0x6c>
  400de2:	2301      	movs	r3, #1
  400de4:	e7aa      	b.n	400d3c <ili9341_send_draw_limits+0x80>
  400de6:	2301      	movs	r3, #1
  400de8:	e7bc      	b.n	400d64 <ili9341_send_draw_limits+0xa8>
  400dea:	2301      	movs	r3, #1
  400dec:	e7c5      	b.n	400d7a <ili9341_send_draw_limits+0xbe>
  400dee:	2301      	movs	r3, #1
  400df0:	e7d3      	b.n	400d9a <ili9341_send_draw_limits+0xde>
  400df2:	2301      	movs	r3, #1
  400df4:	e7dc      	b.n	400db0 <ili9341_send_draw_limits+0xf4>
  400df6:	2301      	movs	r3, #1
  400df8:	e7e4      	b.n	400dc4 <ili9341_send_draw_limits+0x108>
  400dfa:	bf00      	nop
  400dfc:	00400c71 	.word	0x00400c71
  400e00:	20400abc 	.word	0x20400abc
  400e04:	40008000 	.word	0x40008000
  400e08:	20400ab8 	.word	0x20400ab8
  400e0c:	400e1400 	.word	0x400e1400
  400e10:	20400abe 	.word	0x20400abe
  400e14:	20400aba 	.word	0x20400aba

00400e18 <ili9341_interface_init>:
 * interface through either the SPI module in master mode or the USART in
 * Master SPI mode.  Configuration must be done in the associated
 * conf_ili9341.h file.
 */
static void ili9341_interface_init(void)
{
  400e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e1c:	b084      	sub	sp, #16
	#error Interface for ILI9341 has not been selected or interface not\
	supported, please configure component driver using the conf_ili9341.h\
	file!
#endif

	struct spi_device device = { .id = BOARD_ILI9488_SPI_NPCS, };     	// Board specific chip select configuration
  400e1e:	2703      	movs	r7, #3
  400e20:	ad04      	add	r5, sp, #16
  400e22:	f845 7d04 	str.w	r7, [r5, #-4]!

	spi_master_init(CONF_ILI9341_SPI);
  400e26:	4c10      	ldr	r4, [pc, #64]	; (400e68 <ili9341_interface_init+0x50>)
  400e28:	4620      	mov	r0, r4
  400e2a:	4b10      	ldr	r3, [pc, #64]	; (400e6c <ili9341_interface_init+0x54>)
  400e2c:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags, CONF_ILI9341_CLOCK_SPEED, spi_select_id);
  400e2e:	2600      	movs	r6, #0
  400e30:	9600      	str	r6, [sp, #0]
  400e32:	4b0f      	ldr	r3, [pc, #60]	; (400e70 <ili9341_interface_init+0x58>)
  400e34:	4632      	mov	r2, r6
  400e36:	4629      	mov	r1, r5
  400e38:	4620      	mov	r0, r4
  400e3a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400e84 <ili9341_interface_init+0x6c>
  400e3e:	47c0      	blx	r8
 	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400e40:	4632      	mov	r2, r6
  400e42:	4639      	mov	r1, r7
  400e44:	4620      	mov	r0, r4
  400e46:	4b0b      	ldr	r3, [pc, #44]	; (400e74 <ili9341_interface_init+0x5c>)
  400e48:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e4a:	2601      	movs	r6, #1
  400e4c:	6026      	str	r6, [r4, #0]
	spi_enable(CONF_ILI9341_SPI);
  spi_select_device(CONF_ILI9341_SPI, &device);
  400e4e:	4629      	mov	r1, r5
  400e50:	4620      	mov	r0, r4
  400e52:	4b09      	ldr	r3, [pc, #36]	; (400e78 <ili9341_interface_init+0x60>)
  400e54:	4798      	blx	r3
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e56:	23f0      	movs	r3, #240	; 0xf0
  400e58:	60e3      	str	r3, [r4, #12]
  400e5a:	60e6      	str	r6, [r4, #12]
	/* Send one dummy byte for the spi_is_tx_ok() to work as expected */
	spi_write_single(CONF_ILI9341_SPI, 0xF0);
  
  // from adafruit lib: https://github.com/adafruit/Adafruit_ILI9341/blob/1e4305308aae231bb5c475de9afc671e78caa722/Adafruit_ILI9341.cpp#L194
  spi_write_single(CONF_ILI9341_SPI, ILI9341_CMD_SOFTWARE_RESET); // Engage software reset
  delay_ms(150);
  400e5c:	4807      	ldr	r0, [pc, #28]	; (400e7c <ili9341_interface_init+0x64>)
  400e5e:	4b08      	ldr	r3, [pc, #32]	; (400e80 <ili9341_interface_init+0x68>)
  400e60:	4798      	blx	r3
}
  400e62:	b004      	add	sp, #16
  400e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e68:	40008000 	.word	0x40008000
  400e6c:	00424685 	.word	0x00424685
  400e70:	02625a00 	.word	0x02625a00
  400e74:	00425045 	.word	0x00425045
  400e78:	00424759 	.word	0x00424759
  400e7c:	0073c0b7 	.word	0x0073c0b7
  400e80:	20400001 	.word	0x20400001
  400e84:	004246d9 	.word	0x004246d9

00400e88 <ili9341_reset_display>:
 * \brief Reset the display using the digital control interface
 *
 * Controls the reset pin of the display controller to reset the display.
 */
static void ili9341_reset_display(void)
{
  400e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e8a:	4d07      	ldr	r5, [pc, #28]	; (400ea8 <ili9341_reset_display+0x20>)
  400e8c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
  400e90:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(10);
  400e92:	4f06      	ldr	r7, [pc, #24]	; (400eac <ili9341_reset_display+0x24>)
  400e94:	4638      	mov	r0, r7
  400e96:	4c06      	ldr	r4, [pc, #24]	; (400eb0 <ili9341_reset_display+0x28>)
  400e98:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400e9a:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(LCD_SPI_RESET_PIO, false);
	delay_ms(10);
  400e9c:	4638      	mov	r0, r7
  400e9e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ea0:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(150);
  400ea2:	4804      	ldr	r0, [pc, #16]	; (400eb4 <ili9341_reset_display+0x2c>)
  400ea4:	47a0      	blx	r4
  400ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ea8:	400e0e00 	.word	0x400e0e00
  400eac:	0007b784 	.word	0x0007b784
  400eb0:	20400001 	.word	0x20400001
  400eb4:	0073c0b7 	.word	0x0073c0b7

00400eb8 <ili9341_exit_standby>:
{
  400eb8:	b570      	push	{r4, r5, r6, lr}
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
  400eba:	2011      	movs	r0, #17
  400ebc:	4e06      	ldr	r6, [pc, #24]	; (400ed8 <ili9341_exit_standby+0x20>)
  400ebe:	47b0      	blx	r6
  400ec0:	4c06      	ldr	r4, [pc, #24]	; (400edc <ili9341_exit_standby+0x24>)
  400ec2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  400ec6:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(150);
  400ec8:	4805      	ldr	r0, [pc, #20]	; (400ee0 <ili9341_exit_standby+0x28>)
  400eca:	4b06      	ldr	r3, [pc, #24]	; (400ee4 <ili9341_exit_standby+0x2c>)
  400ecc:	4798      	blx	r3
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
  400ece:	2029      	movs	r0, #41	; 0x29
  400ed0:	47b0      	blx	r6
  400ed2:	6325      	str	r5, [r4, #48]	; 0x30
  400ed4:	bd70      	pop	{r4, r5, r6, pc}
  400ed6:	bf00      	nop
  400ed8:	00400c71 	.word	0x00400c71
  400edc:	400e1400 	.word	0x400e1400
  400ee0:	0073c0b7 	.word	0x0073c0b7
  400ee4:	20400001 	.word	0x20400001

00400ee8 <ili9341_set_top_left_limit>:
{
  400ee8:	b508      	push	{r3, lr}
	limit_start_x = x;
  400eea:	4b04      	ldr	r3, [pc, #16]	; (400efc <ili9341_set_top_left_limit+0x14>)
  400eec:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
  400eee:	4b04      	ldr	r3, [pc, #16]	; (400f00 <ili9341_set_top_left_limit+0x18>)
  400ef0:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(false);
  400ef2:	2000      	movs	r0, #0
  400ef4:	4b03      	ldr	r3, [pc, #12]	; (400f04 <ili9341_set_top_left_limit+0x1c>)
  400ef6:	4798      	blx	r3
  400ef8:	bd08      	pop	{r3, pc}
  400efa:	bf00      	nop
  400efc:	20400abc 	.word	0x20400abc
  400f00:	20400abe 	.word	0x20400abe
  400f04:	00400cbd 	.word	0x00400cbd

00400f08 <ili9341_set_bottom_right_limit>:
{
  400f08:	b508      	push	{r3, lr}
	limit_end_x = x;
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <ili9341_set_bottom_right_limit+0x14>)
  400f0c:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
  400f0e:	4b04      	ldr	r3, [pc, #16]	; (400f20 <ili9341_set_bottom_right_limit+0x18>)
  400f10:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(true);
  400f12:	2001      	movs	r0, #1
  400f14:	4b03      	ldr	r3, [pc, #12]	; (400f24 <ili9341_set_bottom_right_limit+0x1c>)
  400f16:	4798      	blx	r3
  400f18:	bd08      	pop	{r3, pc}
  400f1a:	bf00      	nop
  400f1c:	20400ab8 	.word	0x20400ab8
  400f20:	20400aba 	.word	0x20400aba
  400f24:	00400cbd 	.word	0x00400cbd

00400f28 <ili9341_set_limits>:
{
  400f28:	b510      	push	{r4, lr}
	limit_start_x = start_x;
  400f2a:	4c06      	ldr	r4, [pc, #24]	; (400f44 <ili9341_set_limits+0x1c>)
  400f2c:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  400f2e:	4806      	ldr	r0, [pc, #24]	; (400f48 <ili9341_set_limits+0x20>)
  400f30:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  400f32:	4906      	ldr	r1, [pc, #24]	; (400f4c <ili9341_set_limits+0x24>)
  400f34:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  400f36:	4a06      	ldr	r2, [pc, #24]	; (400f50 <ili9341_set_limits+0x28>)
  400f38:	8013      	strh	r3, [r2, #0]
	ili9341_send_draw_limits(true);
  400f3a:	2001      	movs	r0, #1
  400f3c:	4b05      	ldr	r3, [pc, #20]	; (400f54 <ili9341_set_limits+0x2c>)
  400f3e:	4798      	blx	r3
  400f40:	bd10      	pop	{r4, pc}
  400f42:	bf00      	nop
  400f44:	20400abc 	.word	0x20400abc
  400f48:	20400abe 	.word	0x20400abe
  400f4c:	20400ab8 	.word	0x20400ab8
  400f50:	20400aba 	.word	0x20400aba
  400f54:	00400cbd 	.word	0x00400cbd

00400f58 <ili9341_copy_pixels_to_screen>:
{
  400f58:	b538      	push	{r3, r4, r5, lr}
  400f5a:	4605      	mov	r5, r0
  400f5c:	460c      	mov	r4, r1
	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
  400f5e:	202c      	movs	r0, #44	; 0x2c
  400f60:	4b18      	ldr	r3, [pc, #96]	; (400fc4 <ili9341_copy_pixels_to_screen+0x6c>)
  400f62:	4798      	blx	r3
	while (count--) {
  400f64:	e018      	b.n	400f98 <ili9341_copy_pixels_to_screen+0x40>
		ili9341_send_byte(*pixel);
  400f66:	782a      	ldrb	r2, [r5, #0]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f68:	4b17      	ldr	r3, [pc, #92]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f6a:	691b      	ldr	r3, [r3, #16]
  400f6c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f70:	d122      	bne.n	400fb8 <ili9341_copy_pixels_to_screen+0x60>
		return 0;
  400f72:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f74:	2b00      	cmp	r3, #0
  400f76:	d0f7      	beq.n	400f68 <ili9341_copy_pixels_to_screen+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f78:	4b13      	ldr	r3, [pc, #76]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f7a:	60da      	str	r2, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
  400f7c:	882a      	ldrh	r2, [r5, #0]
  400f7e:	0a12      	lsrs	r2, r2, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f80:	4b11      	ldr	r3, [pc, #68]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f82:	691b      	ldr	r3, [r3, #16]
  400f84:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f88:	d118      	bne.n	400fbc <ili9341_copy_pixels_to_screen+0x64>
		return 0;
  400f8a:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f8c:	2b00      	cmp	r3, #0
  400f8e:	d0f7      	beq.n	400f80 <ili9341_copy_pixels_to_screen+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f90:	4b0d      	ldr	r3, [pc, #52]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f92:	60da      	str	r2, [r3, #12]
		pixel++;
  400f94:	3502      	adds	r5, #2
	while (count--) {
  400f96:	460c      	mov	r4, r1
  400f98:	1e61      	subs	r1, r4, #1
  400f9a:	2c00      	cmp	r4, #0
  400f9c:	d1e3      	bne.n	400f66 <ili9341_copy_pixels_to_screen+0xe>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f9e:	4b0a      	ldr	r3, [pc, #40]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400fa0:	691b      	ldr	r3, [r3, #16]
  400fa2:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fa6:	d10b      	bne.n	400fc0 <ili9341_copy_pixels_to_screen+0x68>
		return 0;
  400fa8:	4623      	mov	r3, r4
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400faa:	2b00      	cmp	r3, #0
  400fac:	d0f7      	beq.n	400f9e <ili9341_copy_pixels_to_screen+0x46>
  400fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fb2:	4b06      	ldr	r3, [pc, #24]	; (400fcc <ili9341_copy_pixels_to_screen+0x74>)
  400fb4:	631a      	str	r2, [r3, #48]	; 0x30
  400fb6:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
  400fb8:	2301      	movs	r3, #1
  400fba:	e7db      	b.n	400f74 <ili9341_copy_pixels_to_screen+0x1c>
  400fbc:	2301      	movs	r3, #1
  400fbe:	e7e5      	b.n	400f8c <ili9341_copy_pixels_to_screen+0x34>
  400fc0:	2301      	movs	r3, #1
  400fc2:	e7f2      	b.n	400faa <ili9341_copy_pixels_to_screen+0x52>
  400fc4:	00400c71 	.word	0x00400c71
  400fc8:	40008000 	.word	0x40008000
  400fcc:	400e1400 	.word	0x400e1400

00400fd0 <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
  400fd0:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
  400fd2:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
  400fd6:	f010 0f01 	tst.w	r0, #1
  400fda:	d124      	bne.n	401026 <ili9341_set_orientation+0x56>
	uint8_t madctl = 0x48;
  400fdc:	2448      	movs	r4, #72	; 0x48
		madctl &= ~(1 << 6);
	}

	if (flags & ILI9341_FLIP_Y) {
  400fde:	f010 0f02 	tst.w	r0, #2
  400fe2:	d001      	beq.n	400fe8 <ili9341_set_orientation+0x18>
		madctl |= 1 << 7;
  400fe4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
  400fe8:	f010 0f04 	tst.w	r0, #4
  400fec:	d001      	beq.n	400ff2 <ili9341_set_orientation+0x22>
		madctl |= 1 << 5;
  400fee:	f044 0420 	orr.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
  400ff2:	2036      	movs	r0, #54	; 0x36
  400ff4:	4b0f      	ldr	r3, [pc, #60]	; (401034 <ili9341_set_orientation+0x64>)
  400ff6:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ff8:	4b0f      	ldr	r3, [pc, #60]	; (401038 <ili9341_set_orientation+0x68>)
  400ffa:	691b      	ldr	r3, [r3, #16]
  400ffc:	f413 7f00 	tst.w	r3, #512	; 0x200
  401000:	d113      	bne.n	40102a <ili9341_set_orientation+0x5a>
		return 0;
  401002:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401004:	2b00      	cmp	r3, #0
  401006:	d0f7      	beq.n	400ff8 <ili9341_set_orientation+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401008:	4b0b      	ldr	r3, [pc, #44]	; (401038 <ili9341_set_orientation+0x68>)
  40100a:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40100c:	4b0a      	ldr	r3, [pc, #40]	; (401038 <ili9341_set_orientation+0x68>)
  40100e:	691b      	ldr	r3, [r3, #16]
  401010:	f413 7f00 	tst.w	r3, #512	; 0x200
  401014:	d10b      	bne.n	40102e <ili9341_set_orientation+0x5e>
		return 0;
  401016:	2300      	movs	r3, #0
  401018:	2b00      	cmp	r3, #0
  40101a:	d0f7      	beq.n	40100c <ili9341_set_orientation+0x3c>
  40101c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401020:	4b06      	ldr	r3, [pc, #24]	; (40103c <ili9341_set_orientation+0x6c>)
  401022:	631a      	str	r2, [r3, #48]	; 0x30
  401024:	bd10      	pop	{r4, pc}
		madctl &= ~(1 << 6);
  401026:	2408      	movs	r4, #8
  401028:	e7d9      	b.n	400fde <ili9341_set_orientation+0xe>
		return 1;
  40102a:	2301      	movs	r3, #1
  40102c:	e7ea      	b.n	401004 <ili9341_set_orientation+0x34>
  40102e:	2301      	movs	r3, #1
  401030:	e7f2      	b.n	401018 <ili9341_set_orientation+0x48>
  401032:	bf00      	nop
  401034:	00400c71 	.word	0x00400c71
  401038:	40008000 	.word	0x40008000
  40103c:	400e1400 	.word	0x400e1400

00401040 <ili9341_controller_init_registers>:
{
  401040:	b510      	push	{r4, lr}
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
  401042:	20cd      	movs	r0, #205	; 0xcd
  401044:	4ba9      	ldr	r3, [pc, #676]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  401046:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401048:	4ba9      	ldr	r3, [pc, #676]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40104a:	691b      	ldr	r3, [r3, #16]
  40104c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401050:	f040 8195 	bne.w	40137e <ili9341_controller_init_registers+0x33e>
		return 0;
  401054:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401056:	2b00      	cmp	r3, #0
  401058:	d0f6      	beq.n	401048 <ili9341_controller_init_registers+0x8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40105a:	2239      	movs	r2, #57	; 0x39
  40105c:	4ba4      	ldr	r3, [pc, #656]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40105e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401060:	4ba3      	ldr	r3, [pc, #652]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401062:	691b      	ldr	r3, [r3, #16]
  401064:	f413 7f00 	tst.w	r3, #512	; 0x200
  401068:	f040 818b 	bne.w	401382 <ili9341_controller_init_registers+0x342>
		return 0;
  40106c:	2300      	movs	r3, #0
  40106e:	2b00      	cmp	r3, #0
  401070:	d0f6      	beq.n	401060 <ili9341_controller_init_registers+0x20>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401072:	222c      	movs	r2, #44	; 0x2c
  401074:	4b9e      	ldr	r3, [pc, #632]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401076:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401078:	4b9d      	ldr	r3, [pc, #628]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40107a:	691b      	ldr	r3, [r3, #16]
  40107c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401080:	f040 8181 	bne.w	401386 <ili9341_controller_init_registers+0x346>
		return 0;
  401084:	2300      	movs	r3, #0
  401086:	2b00      	cmp	r3, #0
  401088:	d0f6      	beq.n	401078 <ili9341_controller_init_registers+0x38>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40108a:	2200      	movs	r2, #0
  40108c:	4b98      	ldr	r3, [pc, #608]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40108e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401090:	4b97      	ldr	r3, [pc, #604]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401092:	691b      	ldr	r3, [r3, #16]
  401094:	f413 7f00 	tst.w	r3, #512	; 0x200
  401098:	f040 8177 	bne.w	40138a <ili9341_controller_init_registers+0x34a>
		return 0;
  40109c:	2300      	movs	r3, #0
  40109e:	2b00      	cmp	r3, #0
  4010a0:	d0f6      	beq.n	401090 <ili9341_controller_init_registers+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010a2:	2234      	movs	r2, #52	; 0x34
  4010a4:	4b92      	ldr	r3, [pc, #584]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010a6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010a8:	4b91      	ldr	r3, [pc, #580]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010aa:	691b      	ldr	r3, [r3, #16]
  4010ac:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010b0:	f040 816d 	bne.w	40138e <ili9341_controller_init_registers+0x34e>
		return 0;
  4010b4:	2300      	movs	r3, #0
  4010b6:	2b00      	cmp	r3, #0
  4010b8:	d0f6      	beq.n	4010a8 <ili9341_controller_init_registers+0x68>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010ba:	2202      	movs	r2, #2
  4010bc:	4b8c      	ldr	r3, [pc, #560]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010be:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010c0:	4b8b      	ldr	r3, [pc, #556]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010c2:	691b      	ldr	r3, [r3, #16]
  4010c4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010c8:	f040 8163 	bne.w	401392 <ili9341_controller_init_registers+0x352>
		return 0;
  4010cc:	2300      	movs	r3, #0
  4010ce:	2b00      	cmp	r3, #0
  4010d0:	d0f6      	beq.n	4010c0 <ili9341_controller_init_registers+0x80>
  4010d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010d6:	4b87      	ldr	r3, [pc, #540]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4010d8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
  4010da:	20cf      	movs	r0, #207	; 0xcf
  4010dc:	4b83      	ldr	r3, [pc, #524]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4010de:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010e0:	4b83      	ldr	r3, [pc, #524]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010e2:	691b      	ldr	r3, [r3, #16]
  4010e4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010e8:	f040 8155 	bne.w	401396 <ili9341_controller_init_registers+0x356>
		return 0;
  4010ec:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4010ee:	2b00      	cmp	r3, #0
  4010f0:	d0f6      	beq.n	4010e0 <ili9341_controller_init_registers+0xa0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010f2:	2200      	movs	r2, #0
  4010f4:	4b7e      	ldr	r3, [pc, #504]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010f6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010f8:	4b7d      	ldr	r3, [pc, #500]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010fa:	691b      	ldr	r3, [r3, #16]
  4010fc:	f413 7f00 	tst.w	r3, #512	; 0x200
  401100:	f040 814b 	bne.w	40139a <ili9341_controller_init_registers+0x35a>
		return 0;
  401104:	2300      	movs	r3, #0
  401106:	2b00      	cmp	r3, #0
  401108:	d0f6      	beq.n	4010f8 <ili9341_controller_init_registers+0xb8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40110a:	22aa      	movs	r2, #170	; 0xaa
  40110c:	4b78      	ldr	r3, [pc, #480]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40110e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401110:	4b77      	ldr	r3, [pc, #476]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401112:	691b      	ldr	r3, [r3, #16]
  401114:	f413 7f00 	tst.w	r3, #512	; 0x200
  401118:	f040 8141 	bne.w	40139e <ili9341_controller_init_registers+0x35e>
		return 0;
  40111c:	2300      	movs	r3, #0
  40111e:	2b00      	cmp	r3, #0
  401120:	d0f6      	beq.n	401110 <ili9341_controller_init_registers+0xd0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401122:	22b0      	movs	r2, #176	; 0xb0
  401124:	4b72      	ldr	r3, [pc, #456]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401126:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401128:	4b71      	ldr	r3, [pc, #452]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40112a:	691b      	ldr	r3, [r3, #16]
  40112c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401130:	f040 8137 	bne.w	4013a2 <ili9341_controller_init_registers+0x362>
		return 0;
  401134:	2300      	movs	r3, #0
  401136:	2b00      	cmp	r3, #0
  401138:	d0f6      	beq.n	401128 <ili9341_controller_init_registers+0xe8>
  40113a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40113e:	4b6d      	ldr	r3, [pc, #436]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401140:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
  401142:	20f7      	movs	r0, #247	; 0xf7
  401144:	4b69      	ldr	r3, [pc, #420]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  401146:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401148:	4b69      	ldr	r3, [pc, #420]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40114a:	691b      	ldr	r3, [r3, #16]
  40114c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401150:	f040 8129 	bne.w	4013a6 <ili9341_controller_init_registers+0x366>
		return 0;
  401154:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401156:	2b00      	cmp	r3, #0
  401158:	d0f6      	beq.n	401148 <ili9341_controller_init_registers+0x108>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40115a:	2230      	movs	r2, #48	; 0x30
  40115c:	4b64      	ldr	r3, [pc, #400]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40115e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401160:	4b63      	ldr	r3, [pc, #396]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401162:	691b      	ldr	r3, [r3, #16]
  401164:	f413 7f00 	tst.w	r3, #512	; 0x200
  401168:	f040 811f 	bne.w	4013aa <ili9341_controller_init_registers+0x36a>
		return 0;
  40116c:	2300      	movs	r3, #0
  40116e:	2b00      	cmp	r3, #0
  401170:	d0f6      	beq.n	401160 <ili9341_controller_init_registers+0x120>
  401172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401176:	4b5f      	ldr	r3, [pc, #380]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401178:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
  40117a:	20c0      	movs	r0, #192	; 0xc0
  40117c:	4b5b      	ldr	r3, [pc, #364]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  40117e:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401180:	4b5b      	ldr	r3, [pc, #364]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401182:	691b      	ldr	r3, [r3, #16]
  401184:	f413 7f00 	tst.w	r3, #512	; 0x200
  401188:	f040 8111 	bne.w	4013ae <ili9341_controller_init_registers+0x36e>
		return 0;
  40118c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40118e:	2b00      	cmp	r3, #0
  401190:	d0f6      	beq.n	401180 <ili9341_controller_init_registers+0x140>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401192:	2225      	movs	r2, #37	; 0x25
  401194:	4b56      	ldr	r3, [pc, #344]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401196:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401198:	4b55      	ldr	r3, [pc, #340]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40119a:	691b      	ldr	r3, [r3, #16]
  40119c:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011a0:	f040 8107 	bne.w	4013b2 <ili9341_controller_init_registers+0x372>
		return 0;
  4011a4:	2300      	movs	r3, #0
  4011a6:	2b00      	cmp	r3, #0
  4011a8:	d0f6      	beq.n	401198 <ili9341_controller_init_registers+0x158>
  4011aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4011ae:	4b51      	ldr	r3, [pc, #324]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4011b0:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
  4011b2:	20c1      	movs	r0, #193	; 0xc1
  4011b4:	4b4d      	ldr	r3, [pc, #308]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4011b6:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4011b8:	4b4d      	ldr	r3, [pc, #308]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011ba:	691b      	ldr	r3, [r3, #16]
  4011bc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011c0:	f040 80f9 	bne.w	4013b6 <ili9341_controller_init_registers+0x376>
		return 0;
  4011c4:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d0f6      	beq.n	4011b8 <ili9341_controller_init_registers+0x178>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4011ca:	2211      	movs	r2, #17
  4011cc:	4b48      	ldr	r3, [pc, #288]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011ce:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4011d0:	4b47      	ldr	r3, [pc, #284]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011d2:	691b      	ldr	r3, [r3, #16]
  4011d4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011d8:	f040 80ef 	bne.w	4013ba <ili9341_controller_init_registers+0x37a>
		return 0;
  4011dc:	2300      	movs	r3, #0
  4011de:	2b00      	cmp	r3, #0
  4011e0:	d0f6      	beq.n	4011d0 <ili9341_controller_init_registers+0x190>
  4011e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4011e6:	4b43      	ldr	r3, [pc, #268]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4011e8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
  4011ea:	20c5      	movs	r0, #197	; 0xc5
  4011ec:	4b3f      	ldr	r3, [pc, #252]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4011ee:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4011f0:	4b3f      	ldr	r3, [pc, #252]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011f2:	691b      	ldr	r3, [r3, #16]
  4011f4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011f8:	f040 80e1 	bne.w	4013be <ili9341_controller_init_registers+0x37e>
		return 0;
  4011fc:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4011fe:	2b00      	cmp	r3, #0
  401200:	d0f6      	beq.n	4011f0 <ili9341_controller_init_registers+0x1b0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401202:	225c      	movs	r2, #92	; 0x5c
  401204:	4b3a      	ldr	r3, [pc, #232]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401206:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401208:	4b39      	ldr	r3, [pc, #228]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40120a:	691b      	ldr	r3, [r3, #16]
  40120c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401210:	f040 80d7 	bne.w	4013c2 <ili9341_controller_init_registers+0x382>
		return 0;
  401214:	2300      	movs	r3, #0
  401216:	2b00      	cmp	r3, #0
  401218:	d0f6      	beq.n	401208 <ili9341_controller_init_registers+0x1c8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40121a:	224c      	movs	r2, #76	; 0x4c
  40121c:	4b34      	ldr	r3, [pc, #208]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40121e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401220:	4b33      	ldr	r3, [pc, #204]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401222:	691b      	ldr	r3, [r3, #16]
  401224:	f413 7f00 	tst.w	r3, #512	; 0x200
  401228:	f040 80cd 	bne.w	4013c6 <ili9341_controller_init_registers+0x386>
		return 0;
  40122c:	2300      	movs	r3, #0
  40122e:	2b00      	cmp	r3, #0
  401230:	d0f6      	beq.n	401220 <ili9341_controller_init_registers+0x1e0>
  401232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401236:	4b2f      	ldr	r3, [pc, #188]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401238:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
  40123a:	20c7      	movs	r0, #199	; 0xc7
  40123c:	4b2b      	ldr	r3, [pc, #172]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  40123e:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401240:	4b2b      	ldr	r3, [pc, #172]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401242:	691b      	ldr	r3, [r3, #16]
  401244:	f413 7f00 	tst.w	r3, #512	; 0x200
  401248:	f040 80bf 	bne.w	4013ca <ili9341_controller_init_registers+0x38a>
		return 0;
  40124c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40124e:	2b00      	cmp	r3, #0
  401250:	d0f6      	beq.n	401240 <ili9341_controller_init_registers+0x200>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401252:	2294      	movs	r2, #148	; 0x94
  401254:	4b26      	ldr	r3, [pc, #152]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401256:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401258:	4b25      	ldr	r3, [pc, #148]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40125a:	691b      	ldr	r3, [r3, #16]
  40125c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401260:	f040 80b5 	bne.w	4013ce <ili9341_controller_init_registers+0x38e>
		return 0;
  401264:	2300      	movs	r3, #0
  401266:	2b00      	cmp	r3, #0
  401268:	d0f6      	beq.n	401258 <ili9341_controller_init_registers+0x218>
  40126a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40126e:	4b21      	ldr	r3, [pc, #132]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401270:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
  401272:	20e8      	movs	r0, #232	; 0xe8
  401274:	4b1d      	ldr	r3, [pc, #116]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  401276:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401278:	4b1d      	ldr	r3, [pc, #116]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40127a:	691b      	ldr	r3, [r3, #16]
  40127c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401280:	f040 80a7 	bne.w	4013d2 <ili9341_controller_init_registers+0x392>
		return 0;
  401284:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401286:	2b00      	cmp	r3, #0
  401288:	d0f6      	beq.n	401278 <ili9341_controller_init_registers+0x238>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40128a:	2285      	movs	r2, #133	; 0x85
  40128c:	4b18      	ldr	r3, [pc, #96]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40128e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401290:	4b17      	ldr	r3, [pc, #92]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401292:	691b      	ldr	r3, [r3, #16]
  401294:	f413 7f00 	tst.w	r3, #512	; 0x200
  401298:	f040 809d 	bne.w	4013d6 <ili9341_controller_init_registers+0x396>
		return 0;
  40129c:	2300      	movs	r3, #0
  40129e:	2b00      	cmp	r3, #0
  4012a0:	d0f6      	beq.n	401290 <ili9341_controller_init_registers+0x250>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4012a2:	2201      	movs	r2, #1
  4012a4:	4b12      	ldr	r3, [pc, #72]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012a6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4012a8:	4b11      	ldr	r3, [pc, #68]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012aa:	691b      	ldr	r3, [r3, #16]
  4012ac:	f413 7f00 	tst.w	r3, #512	; 0x200
  4012b0:	f040 8093 	bne.w	4013da <ili9341_controller_init_registers+0x39a>
		return 0;
  4012b4:	2300      	movs	r3, #0
  4012b6:	2b00      	cmp	r3, #0
  4012b8:	d0f6      	beq.n	4012a8 <ili9341_controller_init_registers+0x268>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4012ba:	2278      	movs	r2, #120	; 0x78
  4012bc:	4b0c      	ldr	r3, [pc, #48]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012be:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4012c0:	4b0b      	ldr	r3, [pc, #44]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012c2:	691b      	ldr	r3, [r3, #16]
  4012c4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4012c8:	f040 8089 	bne.w	4013de <ili9341_controller_init_registers+0x39e>
		return 0;
  4012cc:	2300      	movs	r3, #0
  4012ce:	2b00      	cmp	r3, #0
  4012d0:	d0f6      	beq.n	4012c0 <ili9341_controller_init_registers+0x280>
  4012d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4012d6:	4b07      	ldr	r3, [pc, #28]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4012d8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
  4012da:	20ea      	movs	r0, #234	; 0xea
  4012dc:	4b03      	ldr	r3, [pc, #12]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4012de:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4012e0:	4b03      	ldr	r3, [pc, #12]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012e2:	691b      	ldr	r3, [r3, #16]
  4012e4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4012e8:	e006      	b.n	4012f8 <ili9341_controller_init_registers+0x2b8>
  4012ea:	bf00      	nop
  4012ec:	00400c71 	.word	0x00400c71
  4012f0:	40008000 	.word	0x40008000
  4012f4:	400e1400 	.word	0x400e1400
  4012f8:	d173      	bne.n	4013e2 <ili9341_controller_init_registers+0x3a2>
		return 0;
  4012fa:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4012fc:	2b00      	cmp	r3, #0
  4012fe:	d0ef      	beq.n	4012e0 <ili9341_controller_init_registers+0x2a0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401300:	2200      	movs	r2, #0
  401302:	4b3d      	ldr	r3, [pc, #244]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  401304:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401306:	4b3c      	ldr	r3, [pc, #240]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  401308:	691b      	ldr	r3, [r3, #16]
  40130a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40130e:	d16a      	bne.n	4013e6 <ili9341_controller_init_registers+0x3a6>
		return 0;
  401310:	2300      	movs	r3, #0
  401312:	2b00      	cmp	r3, #0
  401314:	d0f7      	beq.n	401306 <ili9341_controller_init_registers+0x2c6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401316:	2200      	movs	r2, #0
  401318:	4b37      	ldr	r3, [pc, #220]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40131a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40131c:	4b36      	ldr	r3, [pc, #216]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40131e:	691b      	ldr	r3, [r3, #16]
  401320:	f413 7f00 	tst.w	r3, #512	; 0x200
  401324:	d161      	bne.n	4013ea <ili9341_controller_init_registers+0x3aa>
		return 0;
  401326:	2300      	movs	r3, #0
  401328:	2b00      	cmp	r3, #0
  40132a:	d0f7      	beq.n	40131c <ili9341_controller_init_registers+0x2dc>
  40132c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401330:	4b32      	ldr	r3, [pc, #200]	; (4013fc <ili9341_controller_init_registers+0x3bc>)
  401332:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
  401334:	203a      	movs	r0, #58	; 0x3a
  401336:	4b32      	ldr	r3, [pc, #200]	; (401400 <ili9341_controller_init_registers+0x3c0>)
  401338:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40133a:	4b2f      	ldr	r3, [pc, #188]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40133c:	691b      	ldr	r3, [r3, #16]
  40133e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401342:	d154      	bne.n	4013ee <ili9341_controller_init_registers+0x3ae>
		return 0;
  401344:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401346:	2b00      	cmp	r3, #0
  401348:	d0f7      	beq.n	40133a <ili9341_controller_init_registers+0x2fa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40134a:	2255      	movs	r2, #85	; 0x55
  40134c:	4b2a      	ldr	r3, [pc, #168]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40134e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401350:	4b29      	ldr	r3, [pc, #164]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  401352:	691b      	ldr	r3, [r3, #16]
  401354:	f413 7f00 	tst.w	r3, #512	; 0x200
  401358:	d14b      	bne.n	4013f2 <ili9341_controller_init_registers+0x3b2>
		return 0;
  40135a:	2300      	movs	r3, #0
  40135c:	2b00      	cmp	r3, #0
  40135e:	d0f7      	beq.n	401350 <ili9341_controller_init_registers+0x310>
  401360:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401364:	4b25      	ldr	r3, [pc, #148]	; (4013fc <ili9341_controller_init_registers+0x3bc>)
  401366:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
  401368:	2000      	movs	r0, #0
  40136a:	4b26      	ldr	r3, [pc, #152]	; (401404 <ili9341_controller_init_registers+0x3c4>)
  40136c:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
  40136e:	23f0      	movs	r3, #240	; 0xf0
  401370:	f44f 72a0 	mov.w	r2, #320	; 0x140
  401374:	2100      	movs	r1, #0
  401376:	4608      	mov	r0, r1
  401378:	4c23      	ldr	r4, [pc, #140]	; (401408 <ili9341_controller_init_registers+0x3c8>)
  40137a:	47a0      	blx	r4
  40137c:	bd10      	pop	{r4, pc}
		return 1;
  40137e:	2301      	movs	r3, #1
  401380:	e669      	b.n	401056 <ili9341_controller_init_registers+0x16>
  401382:	2301      	movs	r3, #1
  401384:	e673      	b.n	40106e <ili9341_controller_init_registers+0x2e>
  401386:	2301      	movs	r3, #1
  401388:	e67d      	b.n	401086 <ili9341_controller_init_registers+0x46>
  40138a:	2301      	movs	r3, #1
  40138c:	e687      	b.n	40109e <ili9341_controller_init_registers+0x5e>
  40138e:	2301      	movs	r3, #1
  401390:	e691      	b.n	4010b6 <ili9341_controller_init_registers+0x76>
  401392:	2301      	movs	r3, #1
  401394:	e69b      	b.n	4010ce <ili9341_controller_init_registers+0x8e>
  401396:	2301      	movs	r3, #1
  401398:	e6a9      	b.n	4010ee <ili9341_controller_init_registers+0xae>
  40139a:	2301      	movs	r3, #1
  40139c:	e6b3      	b.n	401106 <ili9341_controller_init_registers+0xc6>
  40139e:	2301      	movs	r3, #1
  4013a0:	e6bd      	b.n	40111e <ili9341_controller_init_registers+0xde>
  4013a2:	2301      	movs	r3, #1
  4013a4:	e6c7      	b.n	401136 <ili9341_controller_init_registers+0xf6>
  4013a6:	2301      	movs	r3, #1
  4013a8:	e6d5      	b.n	401156 <ili9341_controller_init_registers+0x116>
  4013aa:	2301      	movs	r3, #1
  4013ac:	e6df      	b.n	40116e <ili9341_controller_init_registers+0x12e>
  4013ae:	2301      	movs	r3, #1
  4013b0:	e6ed      	b.n	40118e <ili9341_controller_init_registers+0x14e>
  4013b2:	2301      	movs	r3, #1
  4013b4:	e6f7      	b.n	4011a6 <ili9341_controller_init_registers+0x166>
  4013b6:	2301      	movs	r3, #1
  4013b8:	e705      	b.n	4011c6 <ili9341_controller_init_registers+0x186>
  4013ba:	2301      	movs	r3, #1
  4013bc:	e70f      	b.n	4011de <ili9341_controller_init_registers+0x19e>
  4013be:	2301      	movs	r3, #1
  4013c0:	e71d      	b.n	4011fe <ili9341_controller_init_registers+0x1be>
  4013c2:	2301      	movs	r3, #1
  4013c4:	e727      	b.n	401216 <ili9341_controller_init_registers+0x1d6>
  4013c6:	2301      	movs	r3, #1
  4013c8:	e731      	b.n	40122e <ili9341_controller_init_registers+0x1ee>
  4013ca:	2301      	movs	r3, #1
  4013cc:	e73f      	b.n	40124e <ili9341_controller_init_registers+0x20e>
  4013ce:	2301      	movs	r3, #1
  4013d0:	e749      	b.n	401266 <ili9341_controller_init_registers+0x226>
  4013d2:	2301      	movs	r3, #1
  4013d4:	e757      	b.n	401286 <ili9341_controller_init_registers+0x246>
  4013d6:	2301      	movs	r3, #1
  4013d8:	e761      	b.n	40129e <ili9341_controller_init_registers+0x25e>
  4013da:	2301      	movs	r3, #1
  4013dc:	e76b      	b.n	4012b6 <ili9341_controller_init_registers+0x276>
  4013de:	2301      	movs	r3, #1
  4013e0:	e775      	b.n	4012ce <ili9341_controller_init_registers+0x28e>
  4013e2:	2301      	movs	r3, #1
  4013e4:	e78a      	b.n	4012fc <ili9341_controller_init_registers+0x2bc>
  4013e6:	2301      	movs	r3, #1
  4013e8:	e793      	b.n	401312 <ili9341_controller_init_registers+0x2d2>
  4013ea:	2301      	movs	r3, #1
  4013ec:	e79c      	b.n	401328 <ili9341_controller_init_registers+0x2e8>
  4013ee:	2301      	movs	r3, #1
  4013f0:	e7a9      	b.n	401346 <ili9341_controller_init_registers+0x306>
  4013f2:	2301      	movs	r3, #1
  4013f4:	e7b2      	b.n	40135c <ili9341_controller_init_registers+0x31c>
  4013f6:	bf00      	nop
  4013f8:	40008000 	.word	0x40008000
  4013fc:	400e1400 	.word	0x400e1400
  401400:	00400c71 	.word	0x00400c71
  401404:	00400fd1 	.word	0x00400fd1
  401408:	00400f29 	.word	0x00400f29

0040140c <ili9341_init>:
{
  40140c:	b508      	push	{r3, lr}
	ili9341_interface_init();
  40140e:	4b04      	ldr	r3, [pc, #16]	; (401420 <ili9341_init+0x14>)
  401410:	4798      	blx	r3
	ili9341_reset_display();
  401412:	4b04      	ldr	r3, [pc, #16]	; (401424 <ili9341_init+0x18>)
  401414:	4798      	blx	r3
	ili9341_exit_standby();
  401416:	4b04      	ldr	r3, [pc, #16]	; (401428 <ili9341_init+0x1c>)
  401418:	4798      	blx	r3
	ili9341_controller_init_registers();
  40141a:	4b04      	ldr	r3, [pc, #16]	; (40142c <ili9341_init+0x20>)
  40141c:	4798      	blx	r3
  40141e:	bd08      	pop	{r3, pc}
  401420:	00400e19 	.word	0x00400e19
  401424:	00400e89 	.word	0x00400e89
  401428:	00400eb9 	.word	0x00400eb9
  40142c:	00401041 	.word	0x00401041

00401430 <afec_find_inst_num>:
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
#if defined(AFEC1)
	if (afec == AFEC1) {
  401430:	4b03      	ldr	r3, [pc, #12]	; (401440 <afec_find_inst_num+0x10>)
  401432:	4298      	cmp	r0, r3
  401434:	d001      	beq.n	40143a <afec_find_inst_num+0xa>
		return 1;
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
		return 0;
  401436:	2000      	movs	r0, #0
	}
#endif
	return 0;
}
  401438:	4770      	bx	lr
		return 1;
  40143a:	2001      	movs	r0, #1
  40143c:	4770      	bx	lr
  40143e:	bf00      	nop
  401440:	40064000 	.word	0x40064000

00401444 <afec_find_pid>:
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  401444:	4b03      	ldr	r3, [pc, #12]	; (401454 <afec_find_pid+0x10>)
  401446:	4298      	cmp	r0, r3
  401448:	d001      	beq.n	40144e <afec_find_pid+0xa>
		return ID_AFEC1;
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
		return ID_AFEC0;
  40144a:	201d      	movs	r0, #29
	}
#endif
	return ID_AFEC0;
}
  40144c:	4770      	bx	lr
		return ID_AFEC1;
  40144e:	2028      	movs	r0, #40	; 0x28
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	40064000 	.word	0x40064000

00401458 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  401458:	b410      	push	{r4}
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40145a:	7ccb      	ldrb	r3, [r1, #19]
  40145c:	b373      	cbz	r3, 4014bc <afec_set_config+0x64>
  40145e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  401462:	684a      	ldr	r2, [r1, #4]
  401464:	688c      	ldr	r4, [r1, #8]
  401466:	fbb2 f2f4 	udiv	r2, r2, r4
  40146a:	3a01      	subs	r2, #1
  40146c:	0212      	lsls	r2, r2, #8
  40146e:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  401470:	4313      	orrs	r3, r2
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  401472:	7c0a      	ldrb	r2, [r1, #16]
  401474:	0612      	lsls	r2, r2, #24
  401476:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
			AFEC_MR_ONE |
  40147a:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  40147c:	7c4a      	ldrb	r2, [r1, #17]
  40147e:	0712      	lsls	r2, r2, #28
  401480:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
			AFEC_MR_TRACKTIM(config->tracktim) |
  401484:	4313      	orrs	r3, r2
			(config->startup_time);
  401486:	68ca      	ldr	r2, [r1, #12]
			AFEC_MR_TRANSFER(config->transfer) |
  401488:	4313      	orrs	r3, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40148a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000

	afec->AFEC_MR = reg;
  40148e:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401490:	7d0b      	ldrb	r3, [r1, #20]
  401492:	b1ab      	cbz	r3, 4014c0 <afec_set_config+0x68>
  401494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
			(config->resolution) |
  401498:	680a      	ldr	r2, [r1, #0]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40149a:	431a      	orrs	r2, r3
			(config->stm ? AFEC_EMR_STM : 0);
  40149c:	7d4b      	ldrb	r3, [r1, #21]
  40149e:	b98b      	cbnz	r3, 4014c4 <afec_set_config+0x6c>
  4014a0:	2300      	movs	r3, #0
			(config->resolution) |
  4014a2:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4014a4:	6083      	str	r3, [r0, #8]
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4014a6:	7d8b      	ldrb	r3, [r1, #22]
  4014a8:	021b      	lsls	r3, r3, #8
  4014aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4014ae:	f043 030c 	orr.w	r3, r3, #12
  4014b2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  4014b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014ba:	4770      	bx	lr
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4014bc:	2300      	movs	r3, #0
  4014be:	e7d0      	b.n	401462 <afec_set_config+0xa>
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4014c0:	2300      	movs	r3, #0
  4014c2:	e7e9      	b.n	401498 <afec_set_config+0x40>
			(config->stm ? AFEC_EMR_STM : 0);
  4014c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  4014c8:	e7eb      	b.n	4014a2 <afec_set_config+0x4a>
	...

004014cc <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  4014cc:	b508      	push	{r3, lr}
	if (afec_callback_pointer[inst_num][source]) {
  4014ce:	eb01 1100 	add.w	r1, r1, r0, lsl #4
  4014d2:	4b03      	ldr	r3, [pc, #12]	; (4014e0 <afec_interrupt+0x14>)
  4014d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  4014d8:	b103      	cbz	r3, 4014dc <afec_interrupt+0x10>
		afec_callback_pointer[inst_num][source]();
  4014da:	4798      	blx	r3
  4014dc:	bd08      	pop	{r3, pc}
  4014de:	bf00      	nop
  4014e0:	2043a190 	.word	0x2043a190

004014e4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4014e4:	b530      	push	{r4, r5, lr}
  4014e6:	b083      	sub	sp, #12
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4014e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4014ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4014ec:	400b      	ands	r3, r1
  4014ee:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);
  4014f0:	4b17      	ldr	r3, [pc, #92]	; (401550 <afec_process_callback+0x6c>)
  4014f2:	4798      	blx	r3
  4014f4:	4605      	mov	r5, r0

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4014f6:	2400      	movs	r4, #0
  4014f8:	e009      	b.n	40150e <afec_process_callback+0x2a>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4014fa:	2c0e      	cmp	r4, #14
  4014fc:	d81a      	bhi.n	401534 <afec_process_callback+0x50>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4014fe:	f104 020c 	add.w	r2, r4, #12
  401502:	2301      	movs	r3, #1
  401504:	4093      	lsls	r3, r2
  401506:	9a01      	ldr	r2, [sp, #4]
  401508:	4213      	tst	r3, r2
  40150a:	d10e      	bne.n	40152a <afec_process_callback+0x46>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40150c:	3401      	adds	r4, #1
  40150e:	2c0f      	cmp	r4, #15
  401510:	d81c      	bhi.n	40154c <afec_process_callback+0x68>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  401512:	2c0b      	cmp	r4, #11
  401514:	d8f1      	bhi.n	4014fa <afec_process_callback+0x16>
			if (status & (1 << cnt)) {
  401516:	2301      	movs	r3, #1
  401518:	40a3      	lsls	r3, r4
  40151a:	9a01      	ldr	r2, [sp, #4]
  40151c:	4213      	tst	r3, r2
  40151e:	d0f5      	beq.n	40150c <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  401520:	4621      	mov	r1, r4
  401522:	b2e8      	uxtb	r0, r5
  401524:	4b0b      	ldr	r3, [pc, #44]	; (401554 <afec_process_callback+0x70>)
  401526:	4798      	blx	r3
  401528:	e7f0      	b.n	40150c <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40152a:	4621      	mov	r1, r4
  40152c:	b2e8      	uxtb	r0, r5
  40152e:	4b09      	ldr	r3, [pc, #36]	; (401554 <afec_process_callback+0x70>)
  401530:	4798      	blx	r3
  401532:	e7eb      	b.n	40150c <afec_process_callback+0x28>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  401534:	f104 020f 	add.w	r2, r4, #15
  401538:	2301      	movs	r3, #1
  40153a:	4093      	lsls	r3, r2
  40153c:	9a01      	ldr	r2, [sp, #4]
  40153e:	4213      	tst	r3, r2
  401540:	d0e4      	beq.n	40150c <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  401542:	4621      	mov	r1, r4
  401544:	b2e8      	uxtb	r0, r5
  401546:	4b03      	ldr	r3, [pc, #12]	; (401554 <afec_process_callback+0x70>)
  401548:	4798      	blx	r3
  40154a:	e7df      	b.n	40150c <afec_process_callback+0x28>
			}
		}
	}
}
  40154c:	b003      	add	sp, #12
  40154e:	bd30      	pop	{r4, r5, pc}
  401550:	00401431 	.word	0x00401431
  401554:	004014cd 	.word	0x004014cd

00401558 <afec_ch_set_config>:
{
  401558:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40155a:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  40155c:	2301      	movs	r3, #1
  40155e:	408b      	lsls	r3, r1
  401560:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  401564:	7815      	ldrb	r5, [r2, #0]
  401566:	b175      	cbz	r5, 401586 <afec_ch_set_config+0x2e>
  401568:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40156a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40156c:	6d43      	ldr	r3, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40156e:	004c      	lsls	r4, r1, #1
  401570:	2103      	movs	r1, #3
  401572:	40a1      	lsls	r1, r4
  401574:	ea23 0101 	bic.w	r1, r3, r1
	reg |= (config->gain) << (2 * channel);
  401578:	7853      	ldrb	r3, [r2, #1]
  40157a:	fa03 f404 	lsl.w	r4, r3, r4
  40157e:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  401580:	6541      	str	r1, [r0, #84]	; 0x54
}
  401582:	bc30      	pop	{r4, r5}
  401584:	4770      	bx	lr
	reg |= (config->diff) ? (0x1u << channel) : 0;
  401586:	2300      	movs	r3, #0
  401588:	e7ee      	b.n	401568 <afec_ch_set_config+0x10>

0040158a <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  40158a:	780b      	ldrb	r3, [r1, #0]
  40158c:	b94b      	cbnz	r3, 4015a2 <afec_temp_sensor_set_config+0x18>
  40158e:	2300      	movs	r3, #0
  401590:	784a      	ldrb	r2, [r1, #1]
  401592:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  401594:	6703      	str	r3, [r0, #112]	; 0x70
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  401596:	884b      	ldrh	r3, [r1, #2]
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  401598:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40159a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40159e:	6743      	str	r3, [r0, #116]	; 0x74
  4015a0:	4770      	bx	lr
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4015a2:	2301      	movs	r3, #1
  4015a4:	e7f4      	b.n	401590 <afec_temp_sensor_set_config+0x6>
	...

004015a8 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4015a8:	2200      	movs	r2, #0
  4015aa:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4015ac:	4b08      	ldr	r3, [pc, #32]	; (4015d0 <afec_get_config_defaults+0x28>)
  4015ae:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4015b0:	4b08      	ldr	r3, [pc, #32]	; (4015d4 <afec_get_config_defaults+0x2c>)
  4015b2:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4015b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4015b8:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4015ba:	2302      	movs	r3, #2
  4015bc:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4015be:	2301      	movs	r3, #1
  4015c0:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4015c2:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4015c4:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4015c6:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  4015c8:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  4015ca:	7583      	strb	r3, [r0, #22]
  4015cc:	4770      	bx	lr
  4015ce:	bf00      	nop
  4015d0:	11e1a300 	.word	0x11e1a300
  4015d4:	005b8d80 	.word	0x005b8d80

004015d8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4015d8:	2300      	movs	r3, #0
  4015da:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4015dc:	2301      	movs	r3, #1
  4015de:	7043      	strb	r3, [r0, #1]
  4015e0:	4770      	bx	lr

004015e2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4015e2:	2300      	movs	r3, #0
  4015e4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4015e6:	2320      	movs	r3, #32
  4015e8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4015ea:	23ff      	movs	r3, #255	; 0xff
  4015ec:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4015ee:	f640 73ff 	movw	r3, #4095	; 0xfff
  4015f2:	8083      	strh	r3, [r0, #4]
  4015f4:	4770      	bx	lr
	...

004015f8 <afec_init>:
	return afec->AFEC_ISR;
  4015f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4015fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015fe:	d001      	beq.n	401604 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  401600:	2019      	movs	r0, #25
  401602:	4770      	bx	lr
{
  401604:	b510      	push	{r4, lr}
  401606:	4604      	mov	r4, r0
	afec->AFEC_CR = AFEC_CR_SWRST;
  401608:	2301      	movs	r3, #1
  40160a:	6003      	str	r3, [r0, #0]
	afec_set_config(afec, config);
  40160c:	4b10      	ldr	r3, [pc, #64]	; (401650 <afec_init+0x58>)
  40160e:	4798      	blx	r3
	if(afec == AFEC0) {
  401610:	4b10      	ldr	r3, [pc, #64]	; (401654 <afec_init+0x5c>)
  401612:	429c      	cmp	r4, r3
  401614:	d00c      	beq.n	401630 <afec_init+0x38>
	if(afec == AFEC1) {
  401616:	4b10      	ldr	r3, [pc, #64]	; (401658 <afec_init+0x60>)
  401618:	429c      	cmp	r4, r3
  40161a:	d00b      	beq.n	401634 <afec_init+0x3c>
	return STATUS_OK;
  40161c:	2000      	movs	r0, #0
  40161e:	bd10      	pop	{r4, pc}
			afec_callback_pointer[0][i] = 0;
  401620:	2100      	movs	r1, #0
  401622:	4a0e      	ldr	r2, [pc, #56]	; (40165c <afec_init+0x64>)
  401624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401628:	3301      	adds	r3, #1
  40162a:	2b0f      	cmp	r3, #15
  40162c:	d9f8      	bls.n	401620 <afec_init+0x28>
  40162e:	e7f2      	b.n	401616 <afec_init+0x1e>
  401630:	2300      	movs	r3, #0
  401632:	e7fa      	b.n	40162a <afec_init+0x32>
  401634:	2300      	movs	r3, #0
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401636:	2b0f      	cmp	r3, #15
  401638:	d807      	bhi.n	40164a <afec_init+0x52>
			afec_callback_pointer[1][i] = 0;
  40163a:	f103 0110 	add.w	r1, r3, #16
  40163e:	2000      	movs	r0, #0
  401640:	4a06      	ldr	r2, [pc, #24]	; (40165c <afec_init+0x64>)
  401642:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401646:	3301      	adds	r3, #1
  401648:	e7f5      	b.n	401636 <afec_init+0x3e>
	return STATUS_OK;
  40164a:	2000      	movs	r0, #0
  40164c:	bd10      	pop	{r4, pc}
  40164e:	bf00      	nop
  401650:	00401459 	.word	0x00401459
  401654:	4003c000 	.word	0x4003c000
  401658:	40064000 	.word	0x40064000
  40165c:	2043a190 	.word	0x2043a190

00401660 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  401660:	4b0f      	ldr	r3, [pc, #60]	; (4016a0 <afec_enable_interrupt+0x40>)
  401662:	4299      	cmp	r1, r3
  401664:	d007      	beq.n	401676 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  401666:	290b      	cmp	r1, #11
  401668:	d80b      	bhi.n	401682 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40166a:	d006      	beq.n	40167a <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40166c:	2301      	movs	r3, #1
  40166e:	fa03 f101 	lsl.w	r1, r3, r1
  401672:	6241      	str	r1, [r0, #36]	; 0x24
  401674:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  401676:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  401678:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  40167a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40167e:	6243      	str	r3, [r0, #36]	; 0x24
  401680:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  401682:	290e      	cmp	r1, #14
  401684:	d905      	bls.n	401692 <afec_enable_interrupt+0x32>
				+ AFEC_INTERRUPT_GAP2);
  401686:	310f      	adds	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401688:	2301      	movs	r3, #1
  40168a:	fa03 f101 	lsl.w	r1, r3, r1
  40168e:	6241      	str	r1, [r0, #36]	; 0x24
  401690:	4770      	bx	lr
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  401692:	310c      	adds	r1, #12
  401694:	2301      	movs	r3, #1
  401696:	fa03 f101 	lsl.w	r1, r3, r1
  40169a:	6241      	str	r1, [r0, #36]	; 0x24
  40169c:	4770      	bx	lr
  40169e:	bf00      	nop
  4016a0:	47000fff 	.word	0x47000fff

004016a4 <afec_set_callback>:
{
  4016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016a6:	4606      	mov	r6, r0
  4016a8:	460d      	mov	r5, r1
  4016aa:	4617      	mov	r7, r2
  4016ac:	461c      	mov	r4, r3
	uint32_t i = afec_find_inst_num(afec);
  4016ae:	4b12      	ldr	r3, [pc, #72]	; (4016f8 <afec_set_callback+0x54>)
  4016b0:	4798      	blx	r3
	afec_callback_pointer[i][source] = callback;
  4016b2:	eb05 1200 	add.w	r2, r5, r0, lsl #4
  4016b6:	4b11      	ldr	r3, [pc, #68]	; (4016fc <afec_set_callback+0x58>)
  4016b8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	if (!i) {
  4016bc:	b160      	cbz	r0, 4016d8 <afec_set_callback+0x34>
	} else if (i == 1) {
  4016be:	2801      	cmp	r0, #1
  4016c0:	d114      	bne.n	4016ec <afec_set_callback+0x48>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4016c2:	4b0f      	ldr	r3, [pc, #60]	; (401700 <afec_set_callback+0x5c>)
  4016c4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4016c8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4016cc:	0164      	lsls	r4, r4, #5
  4016ce:	b2e4      	uxtb	r4, r4
  4016d0:	f883 4328 	strb.w	r4, [r3, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4016d4:	605a      	str	r2, [r3, #4]
  4016d6:	e009      	b.n	4016ec <afec_set_callback+0x48>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4016d8:	4b09      	ldr	r3, [pc, #36]	; (401700 <afec_set_callback+0x5c>)
  4016da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4016de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4016e2:	0164      	lsls	r4, r4, #5
  4016e4:	b2e4      	uxtb	r4, r4
  4016e6:	f883 431d 	strb.w	r4, [r3, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4016ea:	601a      	str	r2, [r3, #0]
	afec_enable_interrupt(afec, source);
  4016ec:	4629      	mov	r1, r5
  4016ee:	4630      	mov	r0, r6
  4016f0:	4b04      	ldr	r3, [pc, #16]	; (401704 <afec_set_callback+0x60>)
  4016f2:	4798      	blx	r3
  4016f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016f6:	bf00      	nop
  4016f8:	00401431 	.word	0x00401431
  4016fc:	2043a190 	.word	0x2043a190
  401700:	e000e100 	.word	0xe000e100
  401704:	00401661 	.word	0x00401661

00401708 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401708:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40170a:	4802      	ldr	r0, [pc, #8]	; (401714 <AFEC0_Handler+0xc>)
  40170c:	4b02      	ldr	r3, [pc, #8]	; (401718 <AFEC0_Handler+0x10>)
  40170e:	4798      	blx	r3
  401710:	bd08      	pop	{r3, pc}
  401712:	bf00      	nop
  401714:	4003c000 	.word	0x4003c000
  401718:	004014e5 	.word	0x004014e5

0040171c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40171c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40171e:	4802      	ldr	r0, [pc, #8]	; (401728 <AFEC1_Handler+0xc>)
  401720:	4b02      	ldr	r3, [pc, #8]	; (40172c <AFEC1_Handler+0x10>)
  401722:	4798      	blx	r3
  401724:	bd08      	pop	{r3, pc}
  401726:	bf00      	nop
  401728:	40064000 	.word	0x40064000
  40172c:	004014e5 	.word	0x004014e5

00401730 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401730:	b500      	push	{lr}
  401732:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  401734:	4b11      	ldr	r3, [pc, #68]	; (40177c <afec_enable+0x4c>)
  401736:	4798      	blx	r3
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  401738:	4b11      	ldr	r3, [pc, #68]	; (401780 <afec_enable+0x50>)
  40173a:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40173c:	4b11      	ldr	r3, [pc, #68]	; (401784 <afec_enable+0x54>)
  40173e:	789b      	ldrb	r3, [r3, #2]
  401740:	2bff      	cmp	r3, #255	; 0xff
  401742:	d01a      	beq.n	40177a <afec_enable+0x4a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401744:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401748:	fab3 f383 	clz	r3, r3
  40174c:	095b      	lsrs	r3, r3, #5
  40174e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401750:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401752:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401756:	2200      	movs	r2, #0
  401758:	4b0b      	ldr	r3, [pc, #44]	; (401788 <afec_enable+0x58>)
  40175a:	701a      	strb	r2, [r3, #0]
	return flags;
  40175c:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40175e:	4a09      	ldr	r2, [pc, #36]	; (401784 <afec_enable+0x54>)
  401760:	7893      	ldrb	r3, [r2, #2]
  401762:	3301      	adds	r3, #1
  401764:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401766:	b129      	cbz	r1, 401774 <afec_enable+0x44>
		cpu_irq_enable();
  401768:	2201      	movs	r2, #1
  40176a:	4b07      	ldr	r3, [pc, #28]	; (401788 <afec_enable+0x58>)
  40176c:	701a      	strb	r2, [r3, #0]
  40176e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401772:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  401774:	b003      	add	sp, #12
  401776:	f85d fb04 	ldr.w	pc, [sp], #4
  40177a:	e7fe      	b.n	40177a <afec_enable+0x4a>
  40177c:	00401445 	.word	0x00401445
  401780:	00424f8d 	.word	0x00424f8d
  401784:	2043a188 	.word	0x2043a188
  401788:	204000e4 	.word	0x204000e4

0040178c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40178c:	f100 0308 	add.w	r3, r0, #8
  401790:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401792:	f04f 32ff 	mov.w	r2, #4294967295
  401796:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401798:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40179a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  40179c:	2300      	movs	r3, #0
  40179e:	6003      	str	r3, [r0, #0]
  4017a0:	4770      	bx	lr

004017a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4017a2:	2300      	movs	r3, #0
  4017a4:	6103      	str	r3, [r0, #16]
  4017a6:	4770      	bx	lr

004017a8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4017a8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4017aa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4017ac:	689a      	ldr	r2, [r3, #8]
  4017ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4017b0:	689a      	ldr	r2, [r3, #8]
  4017b2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4017b4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4017b6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4017b8:	6803      	ldr	r3, [r0, #0]
  4017ba:	3301      	adds	r3, #1
  4017bc:	6003      	str	r3, [r0, #0]
  4017be:	4770      	bx	lr

004017c0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4017c0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4017c2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4017c4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4017c8:	d002      	beq.n	4017d0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4017ca:	f100 0208 	add.w	r2, r0, #8
  4017ce:	e002      	b.n	4017d6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4017d0:	6902      	ldr	r2, [r0, #16]
  4017d2:	e004      	b.n	4017de <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4017d4:	461a      	mov	r2, r3
  4017d6:	6853      	ldr	r3, [r2, #4]
  4017d8:	681c      	ldr	r4, [r3, #0]
  4017da:	42a5      	cmp	r5, r4
  4017dc:	d2fa      	bcs.n	4017d4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4017de:	6853      	ldr	r3, [r2, #4]
  4017e0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4017e2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4017e4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4017e6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4017e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4017ea:	6803      	ldr	r3, [r0, #0]
  4017ec:	3301      	adds	r3, #1
  4017ee:	6003      	str	r3, [r0, #0]
}
  4017f0:	bc30      	pop	{r4, r5}
  4017f2:	4770      	bx	lr

004017f4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4017f4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4017f6:	6842      	ldr	r2, [r0, #4]
  4017f8:	6881      	ldr	r1, [r0, #8]
  4017fa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4017fc:	6882      	ldr	r2, [r0, #8]
  4017fe:	6841      	ldr	r1, [r0, #4]
  401800:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401802:	685a      	ldr	r2, [r3, #4]
  401804:	4290      	cmp	r0, r2
  401806:	d005      	beq.n	401814 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401808:	2200      	movs	r2, #0
  40180a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40180c:	6818      	ldr	r0, [r3, #0]
  40180e:	3801      	subs	r0, #1
  401810:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401812:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401814:	6882      	ldr	r2, [r0, #8]
  401816:	605a      	str	r2, [r3, #4]
  401818:	e7f6      	b.n	401808 <uxListRemove+0x14>
	...

0040181c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40181c:	4b0d      	ldr	r3, [pc, #52]	; (401854 <prvTaskExitError+0x38>)
  40181e:	681b      	ldr	r3, [r3, #0]
  401820:	f1b3 3fff 	cmp.w	r3, #4294967295
  401824:	d00a      	beq.n	40183c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401826:	f04f 0380 	mov.w	r3, #128	; 0x80
  40182a:	b672      	cpsid	i
  40182c:	f383 8811 	msr	BASEPRI, r3
  401830:	f3bf 8f6f 	isb	sy
  401834:	f3bf 8f4f 	dsb	sy
  401838:	b662      	cpsie	i
  40183a:	e7fe      	b.n	40183a <prvTaskExitError+0x1e>
  40183c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401840:	b672      	cpsid	i
  401842:	f383 8811 	msr	BASEPRI, r3
  401846:	f3bf 8f6f 	isb	sy
  40184a:	f3bf 8f4f 	dsb	sy
  40184e:	b662      	cpsie	i
  401850:	e7fe      	b.n	401850 <prvTaskExitError+0x34>
  401852:	bf00      	nop
  401854:	2040006c 	.word	0x2040006c

00401858 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401858:	4806      	ldr	r0, [pc, #24]	; (401874 <prvPortStartFirstTask+0x1c>)
  40185a:	6800      	ldr	r0, [r0, #0]
  40185c:	6800      	ldr	r0, [r0, #0]
  40185e:	f380 8808 	msr	MSP, r0
  401862:	b662      	cpsie	i
  401864:	b661      	cpsie	f
  401866:	f3bf 8f4f 	dsb	sy
  40186a:	f3bf 8f6f 	isb	sy
  40186e:	df00      	svc	0
  401870:	bf00      	nop
  401872:	0000      	.short	0x0000
  401874:	e000ed08 	.word	0xe000ed08

00401878 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401878:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401888 <vPortEnableVFP+0x10>
  40187c:	6801      	ldr	r1, [r0, #0]
  40187e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401882:	6001      	str	r1, [r0, #0]
  401884:	4770      	bx	lr
  401886:	0000      	.short	0x0000
  401888:	e000ed88 	.word	0xe000ed88

0040188c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40188c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401890:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401894:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401898:	4b05      	ldr	r3, [pc, #20]	; (4018b0 <pxPortInitialiseStack+0x24>)
  40189a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40189e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4018a2:	f06f 0302 	mvn.w	r3, #2
  4018a6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4018aa:	3844      	subs	r0, #68	; 0x44
  4018ac:	4770      	bx	lr
  4018ae:	bf00      	nop
  4018b0:	0040181d 	.word	0x0040181d

004018b4 <SVC_Handler>:
	__asm volatile (
  4018b4:	4b06      	ldr	r3, [pc, #24]	; (4018d0 <pxCurrentTCBConst2>)
  4018b6:	6819      	ldr	r1, [r3, #0]
  4018b8:	6808      	ldr	r0, [r1, #0]
  4018ba:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018be:	f380 8809 	msr	PSP, r0
  4018c2:	f3bf 8f6f 	isb	sy
  4018c6:	f04f 0000 	mov.w	r0, #0
  4018ca:	f380 8811 	msr	BASEPRI, r0
  4018ce:	4770      	bx	lr

004018d0 <pxCurrentTCBConst2>:
  4018d0:	2040c2d0 	.word	0x2040c2d0
  4018d4:	4770      	bx	lr
  4018d6:	bf00      	nop

004018d8 <vPortEnterCritical>:
  4018d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018dc:	b672      	cpsid	i
  4018de:	f383 8811 	msr	BASEPRI, r3
  4018e2:	f3bf 8f6f 	isb	sy
  4018e6:	f3bf 8f4f 	dsb	sy
  4018ea:	b662      	cpsie	i
	uxCriticalNesting++;
  4018ec:	4a0b      	ldr	r2, [pc, #44]	; (40191c <vPortEnterCritical+0x44>)
  4018ee:	6813      	ldr	r3, [r2, #0]
  4018f0:	3301      	adds	r3, #1
  4018f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4018f4:	2b01      	cmp	r3, #1
  4018f6:	d10f      	bne.n	401918 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4018f8:	4b09      	ldr	r3, [pc, #36]	; (401920 <vPortEnterCritical+0x48>)
  4018fa:	681b      	ldr	r3, [r3, #0]
  4018fc:	f013 0fff 	tst.w	r3, #255	; 0xff
  401900:	d00a      	beq.n	401918 <vPortEnterCritical+0x40>
  401902:	f04f 0380 	mov.w	r3, #128	; 0x80
  401906:	b672      	cpsid	i
  401908:	f383 8811 	msr	BASEPRI, r3
  40190c:	f3bf 8f6f 	isb	sy
  401910:	f3bf 8f4f 	dsb	sy
  401914:	b662      	cpsie	i
  401916:	e7fe      	b.n	401916 <vPortEnterCritical+0x3e>
  401918:	4770      	bx	lr
  40191a:	bf00      	nop
  40191c:	2040006c 	.word	0x2040006c
  401920:	e000ed04 	.word	0xe000ed04

00401924 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401924:	4b0a      	ldr	r3, [pc, #40]	; (401950 <vPortExitCritical+0x2c>)
  401926:	681b      	ldr	r3, [r3, #0]
  401928:	b953      	cbnz	r3, 401940 <vPortExitCritical+0x1c>
  40192a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40192e:	b672      	cpsid	i
  401930:	f383 8811 	msr	BASEPRI, r3
  401934:	f3bf 8f6f 	isb	sy
  401938:	f3bf 8f4f 	dsb	sy
  40193c:	b662      	cpsie	i
  40193e:	e7fe      	b.n	40193e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401940:	3b01      	subs	r3, #1
  401942:	4a03      	ldr	r2, [pc, #12]	; (401950 <vPortExitCritical+0x2c>)
  401944:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401946:	b90b      	cbnz	r3, 40194c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401948:	f383 8811 	msr	BASEPRI, r3
  40194c:	4770      	bx	lr
  40194e:	bf00      	nop
  401950:	2040006c 	.word	0x2040006c

00401954 <PendSV_Handler>:
	__asm volatile
  401954:	f3ef 8009 	mrs	r0, PSP
  401958:	f3bf 8f6f 	isb	sy
  40195c:	4b15      	ldr	r3, [pc, #84]	; (4019b4 <pxCurrentTCBConst>)
  40195e:	681a      	ldr	r2, [r3, #0]
  401960:	f01e 0f10 	tst.w	lr, #16
  401964:	bf08      	it	eq
  401966:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40196a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40196e:	6010      	str	r0, [r2, #0]
  401970:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401974:	f04f 0080 	mov.w	r0, #128	; 0x80
  401978:	b672      	cpsid	i
  40197a:	f380 8811 	msr	BASEPRI, r0
  40197e:	f3bf 8f4f 	dsb	sy
  401982:	f3bf 8f6f 	isb	sy
  401986:	b662      	cpsie	i
  401988:	f001 f960 	bl	402c4c <vTaskSwitchContext>
  40198c:	f04f 0000 	mov.w	r0, #0
  401990:	f380 8811 	msr	BASEPRI, r0
  401994:	bc08      	pop	{r3}
  401996:	6819      	ldr	r1, [r3, #0]
  401998:	6808      	ldr	r0, [r1, #0]
  40199a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40199e:	f01e 0f10 	tst.w	lr, #16
  4019a2:	bf08      	it	eq
  4019a4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4019a8:	f380 8809 	msr	PSP, r0
  4019ac:	f3bf 8f6f 	isb	sy
  4019b0:	4770      	bx	lr
  4019b2:	bf00      	nop

004019b4 <pxCurrentTCBConst>:
  4019b4:	2040c2d0 	.word	0x2040c2d0
  4019b8:	4770      	bx	lr
  4019ba:	bf00      	nop

004019bc <SysTick_Handler>:
{
  4019bc:	b508      	push	{r3, lr}
	__asm volatile
  4019be:	f3ef 8311 	mrs	r3, BASEPRI
  4019c2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4019c6:	b672      	cpsid	i
  4019c8:	f382 8811 	msr	BASEPRI, r2
  4019cc:	f3bf 8f6f 	isb	sy
  4019d0:	f3bf 8f4f 	dsb	sy
  4019d4:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4019d6:	4b05      	ldr	r3, [pc, #20]	; (4019ec <SysTick_Handler+0x30>)
  4019d8:	4798      	blx	r3
  4019da:	b118      	cbz	r0, 4019e4 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4019dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019e0:	4b03      	ldr	r3, [pc, #12]	; (4019f0 <SysTick_Handler+0x34>)
  4019e2:	601a      	str	r2, [r3, #0]
	__asm volatile
  4019e4:	2300      	movs	r3, #0
  4019e6:	f383 8811 	msr	BASEPRI, r3
  4019ea:	bd08      	pop	{r3, pc}
  4019ec:	004028c1 	.word	0x004028c1
  4019f0:	e000ed04 	.word	0xe000ed04

004019f4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4019f4:	4a03      	ldr	r2, [pc, #12]	; (401a04 <vPortSetupTimerInterrupt+0x10>)
  4019f6:	4b04      	ldr	r3, [pc, #16]	; (401a08 <vPortSetupTimerInterrupt+0x14>)
  4019f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4019fa:	2207      	movs	r2, #7
  4019fc:	3b04      	subs	r3, #4
  4019fe:	601a      	str	r2, [r3, #0]
  401a00:	4770      	bx	lr
  401a02:	bf00      	nop
  401a04:	0003a97f 	.word	0x0003a97f
  401a08:	e000e014 	.word	0xe000e014

00401a0c <xPortStartScheduler>:
{
  401a0c:	b500      	push	{lr}
  401a0e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401a10:	4b22      	ldr	r3, [pc, #136]	; (401a9c <xPortStartScheduler+0x90>)
  401a12:	781a      	ldrb	r2, [r3, #0]
  401a14:	b2d2      	uxtb	r2, r2
  401a16:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401a18:	22ff      	movs	r2, #255	; 0xff
  401a1a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401a1c:	781b      	ldrb	r3, [r3, #0]
  401a1e:	b2db      	uxtb	r3, r3
  401a20:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401a24:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a2c:	4a1c      	ldr	r2, [pc, #112]	; (401aa0 <xPortStartScheduler+0x94>)
  401a2e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401a30:	2207      	movs	r2, #7
  401a32:	4b1c      	ldr	r3, [pc, #112]	; (401aa4 <xPortStartScheduler+0x98>)
  401a34:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401a36:	e009      	b.n	401a4c <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
  401a38:	4a1a      	ldr	r2, [pc, #104]	; (401aa4 <xPortStartScheduler+0x98>)
  401a3a:	6813      	ldr	r3, [r2, #0]
  401a3c:	3b01      	subs	r3, #1
  401a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401a40:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a44:	005b      	lsls	r3, r3, #1
  401a46:	b2db      	uxtb	r3, r3
  401a48:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401a4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a50:	f013 0f80 	tst.w	r3, #128	; 0x80
  401a54:	d1f0      	bne.n	401a38 <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401a56:	4a13      	ldr	r2, [pc, #76]	; (401aa4 <xPortStartScheduler+0x98>)
  401a58:	6813      	ldr	r3, [r2, #0]
  401a5a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401a60:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401a62:	9b01      	ldr	r3, [sp, #4]
  401a64:	b2db      	uxtb	r3, r3
  401a66:	4a0d      	ldr	r2, [pc, #52]	; (401a9c <xPortStartScheduler+0x90>)
  401a68:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401a6a:	4b0f      	ldr	r3, [pc, #60]	; (401aa8 <xPortStartScheduler+0x9c>)
  401a6c:	681a      	ldr	r2, [r3, #0]
  401a6e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401a72:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401a74:	681a      	ldr	r2, [r3, #0]
  401a76:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401a7a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401a7c:	4b0b      	ldr	r3, [pc, #44]	; (401aac <xPortStartScheduler+0xa0>)
  401a7e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401a80:	2200      	movs	r2, #0
  401a82:	4b0b      	ldr	r3, [pc, #44]	; (401ab0 <xPortStartScheduler+0xa4>)
  401a84:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401a86:	4b0b      	ldr	r3, [pc, #44]	; (401ab4 <xPortStartScheduler+0xa8>)
  401a88:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401a8a:	4a0b      	ldr	r2, [pc, #44]	; (401ab8 <xPortStartScheduler+0xac>)
  401a8c:	6813      	ldr	r3, [r2, #0]
  401a8e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401a92:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401a94:	4b09      	ldr	r3, [pc, #36]	; (401abc <xPortStartScheduler+0xb0>)
  401a96:	4798      	blx	r3
	prvTaskExitError();
  401a98:	4b09      	ldr	r3, [pc, #36]	; (401ac0 <xPortStartScheduler+0xb4>)
  401a9a:	4798      	blx	r3
  401a9c:	e000e400 	.word	0xe000e400
  401aa0:	20400ac0 	.word	0x20400ac0
  401aa4:	20400ac4 	.word	0x20400ac4
  401aa8:	e000ed20 	.word	0xe000ed20
  401aac:	004019f5 	.word	0x004019f5
  401ab0:	2040006c 	.word	0x2040006c
  401ab4:	00401879 	.word	0x00401879
  401ab8:	e000ef34 	.word	0xe000ef34
  401abc:	00401859 	.word	0x00401859
  401ac0:	0040181d 	.word	0x0040181d

00401ac4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401ac4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401ac8:	2b0f      	cmp	r3, #15
  401aca:	d911      	bls.n	401af0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401acc:	4a12      	ldr	r2, [pc, #72]	; (401b18 <vPortValidateInterruptPriority+0x54>)
  401ace:	5c9b      	ldrb	r3, [r3, r2]
  401ad0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401ad2:	4a12      	ldr	r2, [pc, #72]	; (401b1c <vPortValidateInterruptPriority+0x58>)
  401ad4:	7812      	ldrb	r2, [r2, #0]
  401ad6:	4293      	cmp	r3, r2
  401ad8:	d20a      	bcs.n	401af0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401ada:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ade:	b672      	cpsid	i
  401ae0:	f383 8811 	msr	BASEPRI, r3
  401ae4:	f3bf 8f6f 	isb	sy
  401ae8:	f3bf 8f4f 	dsb	sy
  401aec:	b662      	cpsie	i
  401aee:	e7fe      	b.n	401aee <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401af0:	4b0b      	ldr	r3, [pc, #44]	; (401b20 <vPortValidateInterruptPriority+0x5c>)
  401af2:	681b      	ldr	r3, [r3, #0]
  401af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401af8:	4a0a      	ldr	r2, [pc, #40]	; (401b24 <vPortValidateInterruptPriority+0x60>)
  401afa:	6812      	ldr	r2, [r2, #0]
  401afc:	4293      	cmp	r3, r2
  401afe:	d90a      	bls.n	401b16 <vPortValidateInterruptPriority+0x52>
  401b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b04:	b672      	cpsid	i
  401b06:	f383 8811 	msr	BASEPRI, r3
  401b0a:	f3bf 8f6f 	isb	sy
  401b0e:	f3bf 8f4f 	dsb	sy
  401b12:	b662      	cpsie	i
  401b14:	e7fe      	b.n	401b14 <vPortValidateInterruptPriority+0x50>
  401b16:	4770      	bx	lr
  401b18:	e000e3f0 	.word	0xe000e3f0
  401b1c:	20400ac0 	.word	0x20400ac0
  401b20:	e000ed0c 	.word	0xe000ed0c
  401b24:	20400ac4 	.word	0x20400ac4

00401b28 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401b28:	b538      	push	{r3, r4, r5, lr}
  401b2a:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  401b2c:	f010 0f07 	tst.w	r0, #7
  401b30:	d002      	beq.n	401b38 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  401b32:	f020 0407 	bic.w	r4, r0, #7
  401b36:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  401b38:	4b12      	ldr	r3, [pc, #72]	; (401b84 <pvPortMalloc+0x5c>)
  401b3a:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  401b3c:	4b12      	ldr	r3, [pc, #72]	; (401b88 <pvPortMalloc+0x60>)
  401b3e:	681b      	ldr	r3, [r3, #0]
  401b40:	b193      	cbz	r3, 401b68 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  401b42:	4b12      	ldr	r3, [pc, #72]	; (401b8c <pvPortMalloc+0x64>)
  401b44:	681b      	ldr	r3, [r3, #0]
  401b46:	441c      	add	r4, r3
  401b48:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  401b4c:	4294      	cmp	r4, r2
  401b4e:	d811      	bhi.n	401b74 <pvPortMalloc+0x4c>
  401b50:	42a3      	cmp	r3, r4
  401b52:	d211      	bcs.n	401b78 <pvPortMalloc+0x50>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  401b54:	4a0c      	ldr	r2, [pc, #48]	; (401b88 <pvPortMalloc+0x60>)
  401b56:	6815      	ldr	r5, [r2, #0]
  401b58:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  401b5a:	4b0c      	ldr	r3, [pc, #48]	; (401b8c <pvPortMalloc+0x64>)
  401b5c:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401b5e:	4b0c      	ldr	r3, [pc, #48]	; (401b90 <pvPortMalloc+0x68>)
  401b60:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401b62:	b15d      	cbz	r5, 401b7c <pvPortMalloc+0x54>
		}
	}
	#endif

	return pvReturn;
}
  401b64:	4628      	mov	r0, r5
  401b66:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  401b68:	4b0a      	ldr	r3, [pc, #40]	; (401b94 <pvPortMalloc+0x6c>)
  401b6a:	f023 0307 	bic.w	r3, r3, #7
  401b6e:	4a06      	ldr	r2, [pc, #24]	; (401b88 <pvPortMalloc+0x60>)
  401b70:	6013      	str	r3, [r2, #0]
  401b72:	e7e6      	b.n	401b42 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
  401b74:	2500      	movs	r5, #0
  401b76:	e7f2      	b.n	401b5e <pvPortMalloc+0x36>
  401b78:	2500      	movs	r5, #0
  401b7a:	e7f0      	b.n	401b5e <pvPortMalloc+0x36>
			vApplicationMallocFailedHook();
  401b7c:	4b06      	ldr	r3, [pc, #24]	; (401b98 <pvPortMalloc+0x70>)
  401b7e:	4798      	blx	r3
	return pvReturn;
  401b80:	e7f0      	b.n	401b64 <pvPortMalloc+0x3c>
  401b82:	bf00      	nop
  401b84:	004028a5 	.word	0x004028a5
  401b88:	20400ac8 	.word	0x20400ac8
  401b8c:	2040c2cc 	.word	0x2040c2cc
  401b90:	00402a05 	.word	0x00402a05
  401b94:	20400ad4 	.word	0x20400ad4
  401b98:	004259e3 	.word	0x004259e3

00401b9c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  401b9c:	b150      	cbz	r0, 401bb4 <vPortFree+0x18>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <vPortFree+0x16>
  401bb4:	4770      	bx	lr
	...

00401bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  401bb8:	b510      	push	{r4, lr}
  401bba:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401bbc:	4b06      	ldr	r3, [pc, #24]	; (401bd8 <prvIsQueueFull+0x20>)
  401bbe:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401bc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401bc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401bc4:	429a      	cmp	r2, r3
  401bc6:	d004      	beq.n	401bd2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
  401bc8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
  401bca:	4b04      	ldr	r3, [pc, #16]	; (401bdc <prvIsQueueFull+0x24>)
  401bcc:	4798      	blx	r3

	return xReturn;
}
  401bce:	4620      	mov	r0, r4
  401bd0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  401bd2:	2401      	movs	r4, #1
  401bd4:	e7f9      	b.n	401bca <prvIsQueueFull+0x12>
  401bd6:	bf00      	nop
  401bd8:	004018d9 	.word	0x004018d9
  401bdc:	00401925 	.word	0x00401925

00401be0 <prvIsQueueEmpty>:
{
  401be0:	b510      	push	{r4, lr}
  401be2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401be4:	4b05      	ldr	r3, [pc, #20]	; (401bfc <prvIsQueueEmpty+0x1c>)
  401be6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401be8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401bea:	b123      	cbz	r3, 401bf6 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
  401bec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401bee:	4b04      	ldr	r3, [pc, #16]	; (401c00 <prvIsQueueEmpty+0x20>)
  401bf0:	4798      	blx	r3
}
  401bf2:	4620      	mov	r0, r4
  401bf4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  401bf6:	2401      	movs	r4, #1
  401bf8:	e7f9      	b.n	401bee <prvIsQueueEmpty+0xe>
  401bfa:	bf00      	nop
  401bfc:	004018d9 	.word	0x004018d9
  401c00:	00401925 	.word	0x00401925

00401c04 <prvCopyDataToQueue>:
{
  401c04:	b538      	push	{r3, r4, r5, lr}
  401c06:	4604      	mov	r4, r0
  401c08:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401c0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401c0c:	b95a      	cbnz	r2, 401c26 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c0e:	6803      	ldr	r3, [r0, #0]
  401c10:	2b00      	cmp	r3, #0
  401c12:	d12e      	bne.n	401c72 <prvCopyDataToQueue+0x6e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401c14:	6840      	ldr	r0, [r0, #4]
  401c16:	4b1b      	ldr	r3, [pc, #108]	; (401c84 <prvCopyDataToQueue+0x80>)
  401c18:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401c1a:	2300      	movs	r3, #0
  401c1c:	6063      	str	r3, [r4, #4]
	++( pxQueue->uxMessagesWaiting );
  401c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c20:	3301      	adds	r3, #1
  401c22:	63a3      	str	r3, [r4, #56]	; 0x38
}
  401c24:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401c26:	b96d      	cbnz	r5, 401c44 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401c28:	6880      	ldr	r0, [r0, #8]
  401c2a:	4b17      	ldr	r3, [pc, #92]	; (401c88 <prvCopyDataToQueue+0x84>)
  401c2c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401c2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401c30:	68a3      	ldr	r3, [r4, #8]
  401c32:	4413      	add	r3, r2
  401c34:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401c36:	6862      	ldr	r2, [r4, #4]
  401c38:	4293      	cmp	r3, r2
  401c3a:	d31c      	bcc.n	401c76 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401c3c:	6823      	ldr	r3, [r4, #0]
  401c3e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401c40:	2000      	movs	r0, #0
  401c42:	e7ec      	b.n	401c1e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c44:	68c0      	ldr	r0, [r0, #12]
  401c46:	4b10      	ldr	r3, [pc, #64]	; (401c88 <prvCopyDataToQueue+0x84>)
  401c48:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401c4c:	425b      	negs	r3, r3
  401c4e:	68e2      	ldr	r2, [r4, #12]
  401c50:	441a      	add	r2, r3
  401c52:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401c54:	6821      	ldr	r1, [r4, #0]
  401c56:	428a      	cmp	r2, r1
  401c58:	d202      	bcs.n	401c60 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401c5a:	6862      	ldr	r2, [r4, #4]
  401c5c:	4413      	add	r3, r2
  401c5e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401c60:	2d02      	cmp	r5, #2
  401c62:	d10a      	bne.n	401c7a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401c64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c66:	b153      	cbz	r3, 401c7e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c6a:	3b01      	subs	r3, #1
  401c6c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401c6e:	2000      	movs	r0, #0
  401c70:	e7d5      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c72:	2000      	movs	r0, #0
  401c74:	e7d3      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c76:	2000      	movs	r0, #0
  401c78:	e7d1      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c7a:	2000      	movs	r0, #0
  401c7c:	e7cf      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c7e:	2000      	movs	r0, #0
  401c80:	e7cd      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c82:	bf00      	nop
  401c84:	00403059 	.word	0x00403059
  401c88:	00427849 	.word	0x00427849

00401c8c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401c8c:	b530      	push	{r4, r5, lr}
  401c8e:	b083      	sub	sp, #12
  401c90:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401c92:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401c94:	b174      	cbz	r4, 401cb4 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401c96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c9a:	429a      	cmp	r2, r3
  401c9c:	d315      	bcc.n	401cca <prvNotifyQueueSetContainer+0x3e>
  401c9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ca2:	b672      	cpsid	i
  401ca4:	f383 8811 	msr	BASEPRI, r3
  401ca8:	f3bf 8f6f 	isb	sy
  401cac:	f3bf 8f4f 	dsb	sy
  401cb0:	b662      	cpsie	i
  401cb2:	e7fe      	b.n	401cb2 <prvNotifyQueueSetContainer+0x26>
  401cb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cb8:	b672      	cpsid	i
  401cba:	f383 8811 	msr	BASEPRI, r3
  401cbe:	f3bf 8f6f 	isb	sy
  401cc2:	f3bf 8f4f 	dsb	sy
  401cc6:	b662      	cpsie	i
  401cc8:	e7fe      	b.n	401cc8 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401cca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ccc:	4293      	cmp	r3, r2
  401cce:	d803      	bhi.n	401cd8 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401cd0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401cd2:	4628      	mov	r0, r5
  401cd4:	b003      	add	sp, #12
  401cd6:	bd30      	pop	{r4, r5, pc}
  401cd8:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401cda:	a901      	add	r1, sp, #4
  401cdc:	4620      	mov	r0, r4
  401cde:	4b0b      	ldr	r3, [pc, #44]	; (401d0c <prvNotifyQueueSetContainer+0x80>)
  401ce0:	4798      	blx	r3
  401ce2:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401ce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cea:	d10a      	bne.n	401d02 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401cee:	2b00      	cmp	r3, #0
  401cf0:	d0ef      	beq.n	401cd2 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401cf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cf6:	4b06      	ldr	r3, [pc, #24]	; (401d10 <prvNotifyQueueSetContainer+0x84>)
  401cf8:	4798      	blx	r3
  401cfa:	2800      	cmp	r0, #0
  401cfc:	d0e9      	beq.n	401cd2 <prvNotifyQueueSetContainer+0x46>
						xReturn = pdTRUE;
  401cfe:	2501      	movs	r5, #1
		return xReturn;
  401d00:	e7e7      	b.n	401cd2 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401d02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d04:	3301      	adds	r3, #1
  401d06:	64a3      	str	r3, [r4, #72]	; 0x48
  401d08:	e7e3      	b.n	401cd2 <prvNotifyQueueSetContainer+0x46>
  401d0a:	bf00      	nop
  401d0c:	00401c05 	.word	0x00401c05
  401d10:	00402e25 	.word	0x00402e25

00401d14 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401d14:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401d16:	b172      	cbz	r2, 401d36 <prvCopyDataFromQueue+0x22>
{
  401d18:	b510      	push	{r4, lr}
  401d1a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401d1c:	68c4      	ldr	r4, [r0, #12]
  401d1e:	4414      	add	r4, r2
  401d20:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401d22:	6840      	ldr	r0, [r0, #4]
  401d24:	4284      	cmp	r4, r0
  401d26:	d301      	bcc.n	401d2c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401d28:	6818      	ldr	r0, [r3, #0]
  401d2a:	60d8      	str	r0, [r3, #12]
  401d2c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401d2e:	68d9      	ldr	r1, [r3, #12]
  401d30:	4b01      	ldr	r3, [pc, #4]	; (401d38 <prvCopyDataFromQueue+0x24>)
  401d32:	4798      	blx	r3
  401d34:	bd10      	pop	{r4, pc}
  401d36:	4770      	bx	lr
  401d38:	00427849 	.word	0x00427849

00401d3c <prvUnlockQueue>:
{
  401d3c:	b510      	push	{r4, lr}
  401d3e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401d40:	4b1e      	ldr	r3, [pc, #120]	; (401dbc <prvUnlockQueue+0x80>)
  401d42:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401d44:	e009      	b.n	401d5a <prvUnlockQueue+0x1e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d48:	b1cb      	cbz	r3, 401d7e <prvUnlockQueue+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401d4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d4e:	4b1c      	ldr	r3, [pc, #112]	; (401dc0 <prvUnlockQueue+0x84>)
  401d50:	4798      	blx	r3
  401d52:	b988      	cbnz	r0, 401d78 <prvUnlockQueue+0x3c>
			--( pxQueue->xTxLock );
  401d54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d56:	3b01      	subs	r3, #1
  401d58:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401d5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d5c:	2b00      	cmp	r3, #0
  401d5e:	dd0e      	ble.n	401d7e <prvUnlockQueue+0x42>
				if( pxQueue->pxQueueSetContainer != NULL )
  401d60:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401d62:	2b00      	cmp	r3, #0
  401d64:	d0ef      	beq.n	401d46 <prvUnlockQueue+0xa>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401d66:	2100      	movs	r1, #0
  401d68:	4620      	mov	r0, r4
  401d6a:	4b16      	ldr	r3, [pc, #88]	; (401dc4 <prvUnlockQueue+0x88>)
  401d6c:	4798      	blx	r3
  401d6e:	2801      	cmp	r0, #1
  401d70:	d1f0      	bne.n	401d54 <prvUnlockQueue+0x18>
						vTaskMissedYield();
  401d72:	4b15      	ldr	r3, [pc, #84]	; (401dc8 <prvUnlockQueue+0x8c>)
  401d74:	4798      	blx	r3
  401d76:	e7ed      	b.n	401d54 <prvUnlockQueue+0x18>
							vTaskMissedYield();
  401d78:	4b13      	ldr	r3, [pc, #76]	; (401dc8 <prvUnlockQueue+0x8c>)
  401d7a:	4798      	blx	r3
  401d7c:	e7ea      	b.n	401d54 <prvUnlockQueue+0x18>
		pxQueue->xTxLock = queueUNLOCKED;
  401d7e:	f04f 33ff 	mov.w	r3, #4294967295
  401d82:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401d84:	4b11      	ldr	r3, [pc, #68]	; (401dcc <prvUnlockQueue+0x90>)
  401d86:	4798      	blx	r3
	taskENTER_CRITICAL();
  401d88:	4b0c      	ldr	r3, [pc, #48]	; (401dbc <prvUnlockQueue+0x80>)
  401d8a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401d8c:	e002      	b.n	401d94 <prvUnlockQueue+0x58>
				--( pxQueue->xRxLock );
  401d8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d90:	3b01      	subs	r3, #1
  401d92:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401d94:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d96:	2b00      	cmp	r3, #0
  401d98:	dd0a      	ble.n	401db0 <prvUnlockQueue+0x74>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401d9a:	6923      	ldr	r3, [r4, #16]
  401d9c:	b143      	cbz	r3, 401db0 <prvUnlockQueue+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401d9e:	f104 0010 	add.w	r0, r4, #16
  401da2:	4b07      	ldr	r3, [pc, #28]	; (401dc0 <prvUnlockQueue+0x84>)
  401da4:	4798      	blx	r3
  401da6:	2800      	cmp	r0, #0
  401da8:	d0f1      	beq.n	401d8e <prvUnlockQueue+0x52>
					vTaskMissedYield();
  401daa:	4b07      	ldr	r3, [pc, #28]	; (401dc8 <prvUnlockQueue+0x8c>)
  401dac:	4798      	blx	r3
  401dae:	e7ee      	b.n	401d8e <prvUnlockQueue+0x52>
		pxQueue->xRxLock = queueUNLOCKED;
  401db0:	f04f 33ff 	mov.w	r3, #4294967295
  401db4:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401db6:	4b05      	ldr	r3, [pc, #20]	; (401dcc <prvUnlockQueue+0x90>)
  401db8:	4798      	blx	r3
  401dba:	bd10      	pop	{r4, pc}
  401dbc:	004018d9 	.word	0x004018d9
  401dc0:	00402e25 	.word	0x00402e25
  401dc4:	00401c8d 	.word	0x00401c8d
  401dc8:	00402f81 	.word	0x00402f81
  401dcc:	00401925 	.word	0x00401925

00401dd0 <xQueueGenericReset>:
{
  401dd0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401dd2:	b308      	cbz	r0, 401e18 <xQueueGenericReset+0x48>
  401dd4:	4604      	mov	r4, r0
  401dd6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401dd8:	4b1d      	ldr	r3, [pc, #116]	; (401e50 <xQueueGenericReset+0x80>)
  401dda:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401ddc:	6821      	ldr	r1, [r4, #0]
  401dde:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401de2:	fb03 1002 	mla	r0, r3, r2, r1
  401de6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401de8:	2000      	movs	r0, #0
  401dea:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401dec:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401dee:	3a01      	subs	r2, #1
  401df0:	fb02 1303 	mla	r3, r2, r3, r1
  401df4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401df6:	f04f 33ff 	mov.w	r3, #4294967295
  401dfa:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401dfc:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401dfe:	b9fd      	cbnz	r5, 401e40 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401e00:	6923      	ldr	r3, [r4, #16]
  401e02:	b12b      	cbz	r3, 401e10 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401e04:	f104 0010 	add.w	r0, r4, #16
  401e08:	4b12      	ldr	r3, [pc, #72]	; (401e54 <xQueueGenericReset+0x84>)
  401e0a:	4798      	blx	r3
  401e0c:	2801      	cmp	r0, #1
  401e0e:	d00e      	beq.n	401e2e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401e10:	4b11      	ldr	r3, [pc, #68]	; (401e58 <xQueueGenericReset+0x88>)
  401e12:	4798      	blx	r3
}
  401e14:	2001      	movs	r0, #1
  401e16:	bd38      	pop	{r3, r4, r5, pc}
  401e18:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e1c:	b672      	cpsid	i
  401e1e:	f383 8811 	msr	BASEPRI, r3
  401e22:	f3bf 8f6f 	isb	sy
  401e26:	f3bf 8f4f 	dsb	sy
  401e2a:	b662      	cpsie	i
  401e2c:	e7fe      	b.n	401e2c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e32:	4b0a      	ldr	r3, [pc, #40]	; (401e5c <xQueueGenericReset+0x8c>)
  401e34:	601a      	str	r2, [r3, #0]
  401e36:	f3bf 8f4f 	dsb	sy
  401e3a:	f3bf 8f6f 	isb	sy
  401e3e:	e7e7      	b.n	401e10 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401e40:	f104 0010 	add.w	r0, r4, #16
  401e44:	4d06      	ldr	r5, [pc, #24]	; (401e60 <xQueueGenericReset+0x90>)
  401e46:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401e48:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e4c:	47a8      	blx	r5
  401e4e:	e7df      	b.n	401e10 <xQueueGenericReset+0x40>
  401e50:	004018d9 	.word	0x004018d9
  401e54:	00402e25 	.word	0x00402e25
  401e58:	00401925 	.word	0x00401925
  401e5c:	e000ed04 	.word	0xe000ed04
  401e60:	0040178d 	.word	0x0040178d

00401e64 <xQueueGenericCreate>:
{
  401e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401e66:	b950      	cbnz	r0, 401e7e <xQueueGenericCreate+0x1a>
  401e68:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e6c:	b672      	cpsid	i
  401e6e:	f383 8811 	msr	BASEPRI, r3
  401e72:	f3bf 8f6f 	isb	sy
  401e76:	f3bf 8f4f 	dsb	sy
  401e7a:	b662      	cpsie	i
  401e7c:	e7fe      	b.n	401e7c <xQueueGenericCreate+0x18>
  401e7e:	4606      	mov	r6, r0
	if( uxItemSize == ( UBaseType_t ) 0 )
  401e80:	b119      	cbz	r1, 401e8a <xQueueGenericCreate+0x26>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e82:	fb01 f000 	mul.w	r0, r1, r0
  401e86:	3001      	adds	r0, #1
  401e88:	e000      	b.n	401e8c <xQueueGenericCreate+0x28>
		xQueueSizeInBytes = ( size_t ) 0;
  401e8a:	2000      	movs	r0, #0
  401e8c:	4617      	mov	r7, r2
  401e8e:	460d      	mov	r5, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401e90:	3058      	adds	r0, #88	; 0x58
  401e92:	4b12      	ldr	r3, [pc, #72]	; (401edc <xQueueGenericCreate+0x78>)
  401e94:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401e96:	4604      	mov	r4, r0
  401e98:	b190      	cbz	r0, 401ec0 <xQueueGenericCreate+0x5c>
		if( uxItemSize == ( UBaseType_t ) 0 )
  401e9a:	b96d      	cbnz	r5, 401eb8 <xQueueGenericCreate+0x54>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401e9c:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401e9e:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401ea0:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401ea2:	2101      	movs	r1, #1
  401ea4:	4620      	mov	r0, r4
  401ea6:	4b0e      	ldr	r3, [pc, #56]	; (401ee0 <xQueueGenericCreate+0x7c>)
  401ea8:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401eaa:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401eae:	2300      	movs	r3, #0
  401eb0:	6563      	str	r3, [r4, #84]	; 0x54
		xReturn = pxNewQueue;
  401eb2:	4620      	mov	r0, r4
	configASSERT( xReturn );
  401eb4:	b130      	cbz	r0, 401ec4 <xQueueGenericCreate+0x60>
}
  401eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401eb8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401ebc:	6003      	str	r3, [r0, #0]
  401ebe:	e7ee      	b.n	401e9e <xQueueGenericCreate+0x3a>
QueueHandle_t xReturn = NULL;
  401ec0:	2000      	movs	r0, #0
  401ec2:	e7f7      	b.n	401eb4 <xQueueGenericCreate+0x50>
  401ec4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ec8:	b672      	cpsid	i
  401eca:	f383 8811 	msr	BASEPRI, r3
  401ece:	f3bf 8f6f 	isb	sy
  401ed2:	f3bf 8f4f 	dsb	sy
  401ed6:	b662      	cpsie	i
  401ed8:	e7fe      	b.n	401ed8 <xQueueGenericCreate+0x74>
  401eda:	bf00      	nop
  401edc:	00401b29 	.word	0x00401b29
  401ee0:	00401dd1 	.word	0x00401dd1

00401ee4 <xQueueGenericSend>:
{
  401ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  401ee6:	b085      	sub	sp, #20
  401ee8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401eea:	b170      	cbz	r0, 401f0a <xQueueGenericSend+0x26>
  401eec:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401eee:	b1b9      	cbz	r1, 401f20 <xQueueGenericSend+0x3c>
  401ef0:	2501      	movs	r5, #1
  401ef2:	b9dd      	cbnz	r5, 401f2c <xQueueGenericSend+0x48>
  401ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ef8:	b672      	cpsid	i
  401efa:	f383 8811 	msr	BASEPRI, r3
  401efe:	f3bf 8f6f 	isb	sy
  401f02:	f3bf 8f4f 	dsb	sy
  401f06:	b662      	cpsie	i
  401f08:	e7fe      	b.n	401f08 <xQueueGenericSend+0x24>
  401f0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f0e:	b672      	cpsid	i
  401f10:	f383 8811 	msr	BASEPRI, r3
  401f14:	f3bf 8f6f 	isb	sy
  401f18:	f3bf 8f4f 	dsb	sy
  401f1c:	b662      	cpsie	i
  401f1e:	e7fe      	b.n	401f1e <xQueueGenericSend+0x3a>
  401f20:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401f22:	b90a      	cbnz	r2, 401f28 <xQueueGenericSend+0x44>
  401f24:	2501      	movs	r5, #1
  401f26:	e7e4      	b.n	401ef2 <xQueueGenericSend+0xe>
  401f28:	2500      	movs	r5, #0
  401f2a:	e7e2      	b.n	401ef2 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401f2c:	2b02      	cmp	r3, #2
  401f2e:	d00b      	beq.n	401f48 <xQueueGenericSend+0x64>
  401f30:	b97d      	cbnz	r5, 401f52 <xQueueGenericSend+0x6e>
  401f32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f36:	b672      	cpsid	i
  401f38:	f383 8811 	msr	BASEPRI, r3
  401f3c:	f3bf 8f6f 	isb	sy
  401f40:	f3bf 8f4f 	dsb	sy
  401f44:	b662      	cpsie	i
  401f46:	e7fe      	b.n	401f46 <xQueueGenericSend+0x62>
  401f48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401f4a:	2a01      	cmp	r2, #1
  401f4c:	d0f0      	beq.n	401f30 <xQueueGenericSend+0x4c>
  401f4e:	2500      	movs	r5, #0
  401f50:	e7ee      	b.n	401f30 <xQueueGenericSend+0x4c>
  401f52:	461e      	mov	r6, r3
  401f54:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401f56:	4b4e      	ldr	r3, [pc, #312]	; (402090 <xQueueGenericSend+0x1ac>)
  401f58:	4798      	blx	r3
  401f5a:	b910      	cbnz	r0, 401f62 <xQueueGenericSend+0x7e>
  401f5c:	9b01      	ldr	r3, [sp, #4]
  401f5e:	b103      	cbz	r3, 401f62 <xQueueGenericSend+0x7e>
  401f60:	2500      	movs	r5, #0
  401f62:	b955      	cbnz	r5, 401f7a <xQueueGenericSend+0x96>
  401f64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f68:	b672      	cpsid	i
  401f6a:	f383 8811 	msr	BASEPRI, r3
  401f6e:	f3bf 8f6f 	isb	sy
  401f72:	f3bf 8f4f 	dsb	sy
  401f76:	b662      	cpsie	i
  401f78:	e7fe      	b.n	401f78 <xQueueGenericSend+0x94>
  401f7a:	2500      	movs	r5, #0
  401f7c:	e03e      	b.n	401ffc <xQueueGenericSend+0x118>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401f7e:	4632      	mov	r2, r6
  401f80:	4639      	mov	r1, r7
  401f82:	4620      	mov	r0, r4
  401f84:	4b43      	ldr	r3, [pc, #268]	; (402094 <xQueueGenericSend+0x1b0>)
  401f86:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401f88:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401f8a:	b193      	cbz	r3, 401fb2 <xQueueGenericSend+0xce>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401f8c:	4631      	mov	r1, r6
  401f8e:	4620      	mov	r0, r4
  401f90:	4b41      	ldr	r3, [pc, #260]	; (402098 <xQueueGenericSend+0x1b4>)
  401f92:	4798      	blx	r3
  401f94:	2801      	cmp	r0, #1
  401f96:	d107      	bne.n	401fa8 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f9c:	4b3f      	ldr	r3, [pc, #252]	; (40209c <xQueueGenericSend+0x1b8>)
  401f9e:	601a      	str	r2, [r3, #0]
  401fa0:	f3bf 8f4f 	dsb	sy
  401fa4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401fa8:	4b3d      	ldr	r3, [pc, #244]	; (4020a0 <xQueueGenericSend+0x1bc>)
  401faa:	4798      	blx	r3
				return pdPASS;
  401fac:	2001      	movs	r0, #1
}
  401fae:	b005      	add	sp, #20
  401fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fb4:	b173      	cbz	r3, 401fd4 <xQueueGenericSend+0xf0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401fb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fba:	4b3a      	ldr	r3, [pc, #232]	; (4020a4 <xQueueGenericSend+0x1c0>)
  401fbc:	4798      	blx	r3
  401fbe:	2801      	cmp	r0, #1
  401fc0:	d1f2      	bne.n	401fa8 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fc6:	4b35      	ldr	r3, [pc, #212]	; (40209c <xQueueGenericSend+0x1b8>)
  401fc8:	601a      	str	r2, [r3, #0]
  401fca:	f3bf 8f4f 	dsb	sy
  401fce:	f3bf 8f6f 	isb	sy
  401fd2:	e7e9      	b.n	401fa8 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401fd4:	2800      	cmp	r0, #0
  401fd6:	d0e7      	beq.n	401fa8 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fdc:	4b2f      	ldr	r3, [pc, #188]	; (40209c <xQueueGenericSend+0x1b8>)
  401fde:	601a      	str	r2, [r3, #0]
  401fe0:	f3bf 8f4f 	dsb	sy
  401fe4:	f3bf 8f6f 	isb	sy
  401fe8:	e7de      	b.n	401fa8 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401fea:	4b2d      	ldr	r3, [pc, #180]	; (4020a0 <xQueueGenericSend+0x1bc>)
  401fec:	4798      	blx	r3
					return errQUEUE_FULL;
  401fee:	2000      	movs	r0, #0
  401ff0:	e7dd      	b.n	401fae <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401ff2:	4620      	mov	r0, r4
  401ff4:	4b2c      	ldr	r3, [pc, #176]	; (4020a8 <xQueueGenericSend+0x1c4>)
  401ff6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401ff8:	4b2c      	ldr	r3, [pc, #176]	; (4020ac <xQueueGenericSend+0x1c8>)
  401ffa:	4798      	blx	r3
		taskENTER_CRITICAL();
  401ffc:	4b2c      	ldr	r3, [pc, #176]	; (4020b0 <xQueueGenericSend+0x1cc>)
  401ffe:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402000:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402002:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402004:	429a      	cmp	r2, r3
  402006:	d3ba      	bcc.n	401f7e <xQueueGenericSend+0x9a>
  402008:	2e02      	cmp	r6, #2
  40200a:	d0b8      	beq.n	401f7e <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  40200c:	9b01      	ldr	r3, [sp, #4]
  40200e:	2b00      	cmp	r3, #0
  402010:	d0eb      	beq.n	401fea <xQueueGenericSend+0x106>
				else if( xEntryTimeSet == pdFALSE )
  402012:	b91d      	cbnz	r5, 40201c <xQueueGenericSend+0x138>
					vTaskSetTimeOutState( &xTimeOut );
  402014:	a802      	add	r0, sp, #8
  402016:	4b27      	ldr	r3, [pc, #156]	; (4020b4 <xQueueGenericSend+0x1d0>)
  402018:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  40201a:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  40201c:	4b20      	ldr	r3, [pc, #128]	; (4020a0 <xQueueGenericSend+0x1bc>)
  40201e:	4798      	blx	r3
		vTaskSuspendAll();
  402020:	4b25      	ldr	r3, [pc, #148]	; (4020b8 <xQueueGenericSend+0x1d4>)
  402022:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402024:	4b22      	ldr	r3, [pc, #136]	; (4020b0 <xQueueGenericSend+0x1cc>)
  402026:	4798      	blx	r3
  402028:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40202a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40202e:	d101      	bne.n	402034 <xQueueGenericSend+0x150>
  402030:	2300      	movs	r3, #0
  402032:	6463      	str	r3, [r4, #68]	; 0x44
  402034:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402036:	f1b3 3fff 	cmp.w	r3, #4294967295
  40203a:	d101      	bne.n	402040 <xQueueGenericSend+0x15c>
  40203c:	2300      	movs	r3, #0
  40203e:	64a3      	str	r3, [r4, #72]	; 0x48
  402040:	4b17      	ldr	r3, [pc, #92]	; (4020a0 <xQueueGenericSend+0x1bc>)
  402042:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402044:	a901      	add	r1, sp, #4
  402046:	a802      	add	r0, sp, #8
  402048:	4b1c      	ldr	r3, [pc, #112]	; (4020bc <xQueueGenericSend+0x1d8>)
  40204a:	4798      	blx	r3
  40204c:	b9c8      	cbnz	r0, 402082 <xQueueGenericSend+0x19e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40204e:	4620      	mov	r0, r4
  402050:	4b1b      	ldr	r3, [pc, #108]	; (4020c0 <xQueueGenericSend+0x1dc>)
  402052:	4798      	blx	r3
  402054:	2800      	cmp	r0, #0
  402056:	d0cc      	beq.n	401ff2 <xQueueGenericSend+0x10e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  402058:	9901      	ldr	r1, [sp, #4]
  40205a:	f104 0010 	add.w	r0, r4, #16
  40205e:	4b19      	ldr	r3, [pc, #100]	; (4020c4 <xQueueGenericSend+0x1e0>)
  402060:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402062:	4620      	mov	r0, r4
  402064:	4b10      	ldr	r3, [pc, #64]	; (4020a8 <xQueueGenericSend+0x1c4>)
  402066:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402068:	4b10      	ldr	r3, [pc, #64]	; (4020ac <xQueueGenericSend+0x1c8>)
  40206a:	4798      	blx	r3
  40206c:	2800      	cmp	r0, #0
  40206e:	d1c5      	bne.n	401ffc <xQueueGenericSend+0x118>
					portYIELD_WITHIN_API();
  402070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402074:	4b09      	ldr	r3, [pc, #36]	; (40209c <xQueueGenericSend+0x1b8>)
  402076:	601a      	str	r2, [r3, #0]
  402078:	f3bf 8f4f 	dsb	sy
  40207c:	f3bf 8f6f 	isb	sy
  402080:	e7bc      	b.n	401ffc <xQueueGenericSend+0x118>
			prvUnlockQueue( pxQueue );
  402082:	4620      	mov	r0, r4
  402084:	4b08      	ldr	r3, [pc, #32]	; (4020a8 <xQueueGenericSend+0x1c4>)
  402086:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402088:	4b08      	ldr	r3, [pc, #32]	; (4020ac <xQueueGenericSend+0x1c8>)
  40208a:	4798      	blx	r3
			return errQUEUE_FULL;
  40208c:	2000      	movs	r0, #0
  40208e:	e78e      	b.n	401fae <xQueueGenericSend+0xca>
  402090:	00402f8d 	.word	0x00402f8d
  402094:	00401c05 	.word	0x00401c05
  402098:	00401c8d 	.word	0x00401c8d
  40209c:	e000ed04 	.word	0xe000ed04
  4020a0:	00401925 	.word	0x00401925
  4020a4:	00402e25 	.word	0x00402e25
  4020a8:	00401d3d 	.word	0x00401d3d
  4020ac:	00402a05 	.word	0x00402a05
  4020b0:	004018d9 	.word	0x004018d9
  4020b4:	00402ebd 	.word	0x00402ebd
  4020b8:	004028a5 	.word	0x004028a5
  4020bc:	00402eed 	.word	0x00402eed
  4020c0:	00401bb9 	.word	0x00401bb9
  4020c4:	00402d21 	.word	0x00402d21

004020c8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4020c8:	b180      	cbz	r0, 4020ec <xQueueGenericSendFromISR+0x24>
{
  4020ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020ce:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4020d0:	b1b9      	cbz	r1, 402102 <xQueueGenericSendFromISR+0x3a>
  4020d2:	2001      	movs	r0, #1
  4020d4:	b9d8      	cbnz	r0, 40210e <xQueueGenericSendFromISR+0x46>
  4020d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020da:	b672      	cpsid	i
  4020dc:	f383 8811 	msr	BASEPRI, r3
  4020e0:	f3bf 8f6f 	isb	sy
  4020e4:	f3bf 8f4f 	dsb	sy
  4020e8:	b662      	cpsie	i
  4020ea:	e7fe      	b.n	4020ea <xQueueGenericSendFromISR+0x22>
  4020ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020f0:	b672      	cpsid	i
  4020f2:	f383 8811 	msr	BASEPRI, r3
  4020f6:	f3bf 8f6f 	isb	sy
  4020fa:	f3bf 8f4f 	dsb	sy
  4020fe:	b662      	cpsie	i
  402100:	e7fe      	b.n	402100 <xQueueGenericSendFromISR+0x38>
  402102:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402104:	b908      	cbnz	r0, 40210a <xQueueGenericSendFromISR+0x42>
  402106:	2001      	movs	r0, #1
  402108:	e7e4      	b.n	4020d4 <xQueueGenericSendFromISR+0xc>
  40210a:	2000      	movs	r0, #0
  40210c:	e7e2      	b.n	4020d4 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40210e:	2b02      	cmp	r3, #2
  402110:	d00b      	beq.n	40212a <xQueueGenericSendFromISR+0x62>
  402112:	b978      	cbnz	r0, 402134 <xQueueGenericSendFromISR+0x6c>
  402114:	f04f 0380 	mov.w	r3, #128	; 0x80
  402118:	b672      	cpsid	i
  40211a:	f383 8811 	msr	BASEPRI, r3
  40211e:	f3bf 8f6f 	isb	sy
  402122:	f3bf 8f4f 	dsb	sy
  402126:	b662      	cpsie	i
  402128:	e7fe      	b.n	402128 <xQueueGenericSendFromISR+0x60>
  40212a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  40212c:	2d01      	cmp	r5, #1
  40212e:	d0f0      	beq.n	402112 <xQueueGenericSendFromISR+0x4a>
  402130:	2000      	movs	r0, #0
  402132:	e7ee      	b.n	402112 <xQueueGenericSendFromISR+0x4a>
  402134:	461e      	mov	r6, r3
  402136:	4615      	mov	r5, r2
  402138:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40213a:	4b23      	ldr	r3, [pc, #140]	; (4021c8 <xQueueGenericSendFromISR+0x100>)
  40213c:	4798      	blx	r3
	__asm volatile
  40213e:	f3ef 8711 	mrs	r7, BASEPRI
  402142:	f04f 0380 	mov.w	r3, #128	; 0x80
  402146:	b672      	cpsid	i
  402148:	f383 8811 	msr	BASEPRI, r3
  40214c:	f3bf 8f6f 	isb	sy
  402150:	f3bf 8f4f 	dsb	sy
  402154:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402156:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40215a:	429a      	cmp	r2, r3
  40215c:	d301      	bcc.n	402162 <xQueueGenericSendFromISR+0x9a>
  40215e:	2e02      	cmp	r6, #2
  402160:	d126      	bne.n	4021b0 <xQueueGenericSendFromISR+0xe8>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402162:	4632      	mov	r2, r6
  402164:	4641      	mov	r1, r8
  402166:	4620      	mov	r0, r4
  402168:	4b18      	ldr	r3, [pc, #96]	; (4021cc <xQueueGenericSendFromISR+0x104>)
  40216a:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40216c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40216e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402172:	d118      	bne.n	4021a6 <xQueueGenericSendFromISR+0xde>
					if( pxQueue->pxQueueSetContainer != NULL )
  402174:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402176:	b15b      	cbz	r3, 402190 <xQueueGenericSendFromISR+0xc8>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402178:	4631      	mov	r1, r6
  40217a:	4620      	mov	r0, r4
  40217c:	4b14      	ldr	r3, [pc, #80]	; (4021d0 <xQueueGenericSendFromISR+0x108>)
  40217e:	4798      	blx	r3
  402180:	2801      	cmp	r0, #1
  402182:	d117      	bne.n	4021b4 <xQueueGenericSendFromISR+0xec>
							if( pxHigherPriorityTaskWoken != NULL )
  402184:	b1c5      	cbz	r5, 4021b8 <xQueueGenericSendFromISR+0xf0>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402186:	6028      	str	r0, [r5, #0]
	__asm volatile
  402188:	f387 8811 	msr	BASEPRI, r7
}
  40218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402190:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402192:	b19b      	cbz	r3, 4021bc <xQueueGenericSendFromISR+0xf4>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402194:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402198:	4b0e      	ldr	r3, [pc, #56]	; (4021d4 <xQueueGenericSendFromISR+0x10c>)
  40219a:	4798      	blx	r3
  40219c:	b180      	cbz	r0, 4021c0 <xQueueGenericSendFromISR+0xf8>
								if( pxHigherPriorityTaskWoken != NULL )
  40219e:	b18d      	cbz	r5, 4021c4 <xQueueGenericSendFromISR+0xfc>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4021a0:	2001      	movs	r0, #1
  4021a2:	6028      	str	r0, [r5, #0]
  4021a4:	e7f0      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
				++( pxQueue->xTxLock );
  4021a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4021a8:	3301      	adds	r3, #1
  4021aa:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4021ac:	2001      	movs	r0, #1
  4021ae:	e7eb      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
			xReturn = errQUEUE_FULL;
  4021b0:	2000      	movs	r0, #0
  4021b2:	e7e9      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
			xReturn = pdPASS;
  4021b4:	2001      	movs	r0, #1
  4021b6:	e7e7      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021b8:	2001      	movs	r0, #1
  4021ba:	e7e5      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021bc:	2001      	movs	r0, #1
  4021be:	e7e3      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021c0:	2001      	movs	r0, #1
  4021c2:	e7e1      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021c4:	2001      	movs	r0, #1
  4021c6:	e7df      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021c8:	00401ac5 	.word	0x00401ac5
  4021cc:	00401c05 	.word	0x00401c05
  4021d0:	00401c8d 	.word	0x00401c8d
  4021d4:	00402e25 	.word	0x00402e25

004021d8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  4021d8:	b170      	cbz	r0, 4021f8 <xQueueGiveFromISR+0x20>
{
  4021da:	b570      	push	{r4, r5, r6, lr}
  4021dc:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  4021de:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4021e0:	b1ab      	cbz	r3, 40220e <xQueueGiveFromISR+0x36>
	__asm volatile
  4021e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021e6:	b672      	cpsid	i
  4021e8:	f383 8811 	msr	BASEPRI, r3
  4021ec:	f3bf 8f6f 	isb	sy
  4021f0:	f3bf 8f4f 	dsb	sy
  4021f4:	b662      	cpsie	i
  4021f6:	e7fe      	b.n	4021f6 <xQueueGiveFromISR+0x1e>
  4021f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021fc:	b672      	cpsid	i
  4021fe:	f383 8811 	msr	BASEPRI, r3
  402202:	f3bf 8f6f 	isb	sy
  402206:	f3bf 8f4f 	dsb	sy
  40220a:	b662      	cpsie	i
  40220c:	e7fe      	b.n	40220c <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  40220e:	6803      	ldr	r3, [r0, #0]
  402210:	b163      	cbz	r3, 40222c <xQueueGiveFromISR+0x54>
  402212:	2301      	movs	r3, #1
  402214:	b983      	cbnz	r3, 402238 <xQueueGiveFromISR+0x60>
  402216:	f04f 0380 	mov.w	r3, #128	; 0x80
  40221a:	b672      	cpsid	i
  40221c:	f383 8811 	msr	BASEPRI, r3
  402220:	f3bf 8f6f 	isb	sy
  402224:	f3bf 8f4f 	dsb	sy
  402228:	b662      	cpsie	i
  40222a:	e7fe      	b.n	40222a <xQueueGiveFromISR+0x52>
  40222c:	6843      	ldr	r3, [r0, #4]
  40222e:	b90b      	cbnz	r3, 402234 <xQueueGiveFromISR+0x5c>
  402230:	2301      	movs	r3, #1
  402232:	e7ef      	b.n	402214 <xQueueGiveFromISR+0x3c>
  402234:	2300      	movs	r3, #0
  402236:	e7ed      	b.n	402214 <xQueueGiveFromISR+0x3c>
  402238:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40223a:	4b21      	ldr	r3, [pc, #132]	; (4022c0 <xQueueGiveFromISR+0xe8>)
  40223c:	4798      	blx	r3
	__asm volatile
  40223e:	f3ef 8611 	mrs	r6, BASEPRI
  402242:	f04f 0380 	mov.w	r3, #128	; 0x80
  402246:	b672      	cpsid	i
  402248:	f383 8811 	msr	BASEPRI, r3
  40224c:	f3bf 8f6f 	isb	sy
  402250:	f3bf 8f4f 	dsb	sy
  402254:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  402256:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40225a:	429a      	cmp	r2, r3
  40225c:	d223      	bcs.n	4022a6 <xQueueGiveFromISR+0xce>
			++( pxQueue->uxMessagesWaiting );
  40225e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402260:	3301      	adds	r3, #1
  402262:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  402264:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402266:	f1b3 3fff 	cmp.w	r3, #4294967295
  40226a:	d117      	bne.n	40229c <xQueueGiveFromISR+0xc4>
					if( pxQueue->pxQueueSetContainer != NULL )
  40226c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40226e:	b153      	cbz	r3, 402286 <xQueueGiveFromISR+0xae>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402270:	2100      	movs	r1, #0
  402272:	4620      	mov	r0, r4
  402274:	4b13      	ldr	r3, [pc, #76]	; (4022c4 <xQueueGiveFromISR+0xec>)
  402276:	4798      	blx	r3
  402278:	2801      	cmp	r0, #1
  40227a:	d116      	bne.n	4022aa <xQueueGiveFromISR+0xd2>
							if( pxHigherPriorityTaskWoken != NULL )
  40227c:	b1bd      	cbz	r5, 4022ae <xQueueGiveFromISR+0xd6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40227e:	6028      	str	r0, [r5, #0]
	__asm volatile
  402280:	f386 8811 	msr	BASEPRI, r6
}
  402284:	bd70      	pop	{r4, r5, r6, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402286:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402288:	b19b      	cbz	r3, 4022b2 <xQueueGiveFromISR+0xda>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40228a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40228e:	4b0e      	ldr	r3, [pc, #56]	; (4022c8 <xQueueGiveFromISR+0xf0>)
  402290:	4798      	blx	r3
  402292:	b180      	cbz	r0, 4022b6 <xQueueGiveFromISR+0xde>
								if( pxHigherPriorityTaskWoken != NULL )
  402294:	b18d      	cbz	r5, 4022ba <xQueueGiveFromISR+0xe2>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402296:	2001      	movs	r0, #1
  402298:	6028      	str	r0, [r5, #0]
  40229a:	e7f1      	b.n	402280 <xQueueGiveFromISR+0xa8>
				++( pxQueue->xTxLock );
  40229c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40229e:	3301      	adds	r3, #1
  4022a0:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4022a2:	2001      	movs	r0, #1
  4022a4:	e7ec      	b.n	402280 <xQueueGiveFromISR+0xa8>
			xReturn = errQUEUE_FULL;
  4022a6:	2000      	movs	r0, #0
  4022a8:	e7ea      	b.n	402280 <xQueueGiveFromISR+0xa8>
			xReturn = pdPASS;
  4022aa:	2001      	movs	r0, #1
  4022ac:	e7e8      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022ae:	2001      	movs	r0, #1
  4022b0:	e7e6      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022b2:	2001      	movs	r0, #1
  4022b4:	e7e4      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022b6:	2001      	movs	r0, #1
  4022b8:	e7e2      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022ba:	2001      	movs	r0, #1
  4022bc:	e7e0      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022be:	bf00      	nop
  4022c0:	00401ac5 	.word	0x00401ac5
  4022c4:	00401c8d 	.word	0x00401c8d
  4022c8:	00402e25 	.word	0x00402e25

004022cc <xQueueGenericReceive>:
{
  4022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4022ce:	b085      	sub	sp, #20
  4022d0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4022d2:	b170      	cbz	r0, 4022f2 <xQueueGenericReceive+0x26>
  4022d4:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4022d6:	b1b9      	cbz	r1, 402308 <xQueueGenericReceive+0x3c>
  4022d8:	2501      	movs	r5, #1
  4022da:	b9dd      	cbnz	r5, 402314 <xQueueGenericReceive+0x48>
	__asm volatile
  4022dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022e0:	b672      	cpsid	i
  4022e2:	f383 8811 	msr	BASEPRI, r3
  4022e6:	f3bf 8f6f 	isb	sy
  4022ea:	f3bf 8f4f 	dsb	sy
  4022ee:	b662      	cpsie	i
  4022f0:	e7fe      	b.n	4022f0 <xQueueGenericReceive+0x24>
  4022f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022f6:	b672      	cpsid	i
  4022f8:	f383 8811 	msr	BASEPRI, r3
  4022fc:	f3bf 8f6f 	isb	sy
  402300:	f3bf 8f4f 	dsb	sy
  402304:	b662      	cpsie	i
  402306:	e7fe      	b.n	402306 <xQueueGenericReceive+0x3a>
  402308:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40230a:	b90a      	cbnz	r2, 402310 <xQueueGenericReceive+0x44>
  40230c:	2501      	movs	r5, #1
  40230e:	e7e4      	b.n	4022da <xQueueGenericReceive+0xe>
  402310:	2500      	movs	r5, #0
  402312:	e7e2      	b.n	4022da <xQueueGenericReceive+0xe>
  402314:	461f      	mov	r7, r3
  402316:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402318:	4b52      	ldr	r3, [pc, #328]	; (402464 <xQueueGenericReceive+0x198>)
  40231a:	4798      	blx	r3
  40231c:	b910      	cbnz	r0, 402324 <xQueueGenericReceive+0x58>
  40231e:	9b01      	ldr	r3, [sp, #4]
  402320:	b103      	cbz	r3, 402324 <xQueueGenericReceive+0x58>
  402322:	2500      	movs	r5, #0
  402324:	b955      	cbnz	r5, 40233c <xQueueGenericReceive+0x70>
  402326:	f04f 0380 	mov.w	r3, #128	; 0x80
  40232a:	b672      	cpsid	i
  40232c:	f383 8811 	msr	BASEPRI, r3
  402330:	f3bf 8f6f 	isb	sy
  402334:	f3bf 8f4f 	dsb	sy
  402338:	b662      	cpsie	i
  40233a:	e7fe      	b.n	40233a <xQueueGenericReceive+0x6e>
  40233c:	2500      	movs	r5, #0
  40233e:	e046      	b.n	4023ce <xQueueGenericReceive+0x102>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402340:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402342:	4631      	mov	r1, r6
  402344:	4620      	mov	r0, r4
  402346:	4b48      	ldr	r3, [pc, #288]	; (402468 <xQueueGenericReceive+0x19c>)
  402348:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40234a:	b9e7      	cbnz	r7, 402386 <xQueueGenericReceive+0xba>
					--( pxQueue->uxMessagesWaiting );
  40234c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40234e:	3b01      	subs	r3, #1
  402350:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402352:	6823      	ldr	r3, [r4, #0]
  402354:	b913      	cbnz	r3, 40235c <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402356:	4b45      	ldr	r3, [pc, #276]	; (40246c <xQueueGenericReceive+0x1a0>)
  402358:	4798      	blx	r3
  40235a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40235c:	6923      	ldr	r3, [r4, #16]
  40235e:	b16b      	cbz	r3, 40237c <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402360:	f104 0010 	add.w	r0, r4, #16
  402364:	4b42      	ldr	r3, [pc, #264]	; (402470 <xQueueGenericReceive+0x1a4>)
  402366:	4798      	blx	r3
  402368:	2801      	cmp	r0, #1
  40236a:	d107      	bne.n	40237c <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  40236c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402370:	4b40      	ldr	r3, [pc, #256]	; (402474 <xQueueGenericReceive+0x1a8>)
  402372:	601a      	str	r2, [r3, #0]
  402374:	f3bf 8f4f 	dsb	sy
  402378:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40237c:	4b3e      	ldr	r3, [pc, #248]	; (402478 <xQueueGenericReceive+0x1ac>)
  40237e:	4798      	blx	r3
				return pdPASS;
  402380:	2001      	movs	r0, #1
}
  402382:	b005      	add	sp, #20
  402384:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402386:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402388:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40238a:	2b00      	cmp	r3, #0
  40238c:	d0f6      	beq.n	40237c <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40238e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402392:	4b37      	ldr	r3, [pc, #220]	; (402470 <xQueueGenericReceive+0x1a4>)
  402394:	4798      	blx	r3
  402396:	2800      	cmp	r0, #0
  402398:	d0f0      	beq.n	40237c <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  40239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40239e:	4b35      	ldr	r3, [pc, #212]	; (402474 <xQueueGenericReceive+0x1a8>)
  4023a0:	601a      	str	r2, [r3, #0]
  4023a2:	f3bf 8f4f 	dsb	sy
  4023a6:	f3bf 8f6f 	isb	sy
  4023aa:	e7e7      	b.n	40237c <xQueueGenericReceive+0xb0>
					taskEXIT_CRITICAL();
  4023ac:	4b32      	ldr	r3, [pc, #200]	; (402478 <xQueueGenericReceive+0x1ac>)
  4023ae:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4023b0:	2000      	movs	r0, #0
  4023b2:	e7e6      	b.n	402382 <xQueueGenericReceive+0xb6>
						taskENTER_CRITICAL();
  4023b4:	4b31      	ldr	r3, [pc, #196]	; (40247c <xQueueGenericReceive+0x1b0>)
  4023b6:	4798      	blx	r3
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4023b8:	6860      	ldr	r0, [r4, #4]
  4023ba:	4b31      	ldr	r3, [pc, #196]	; (402480 <xQueueGenericReceive+0x1b4>)
  4023bc:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4023be:	4b2e      	ldr	r3, [pc, #184]	; (402478 <xQueueGenericReceive+0x1ac>)
  4023c0:	4798      	blx	r3
  4023c2:	e032      	b.n	40242a <xQueueGenericReceive+0x15e>
				prvUnlockQueue( pxQueue );
  4023c4:	4620      	mov	r0, r4
  4023c6:	4b2f      	ldr	r3, [pc, #188]	; (402484 <xQueueGenericReceive+0x1b8>)
  4023c8:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4023ca:	4b2f      	ldr	r3, [pc, #188]	; (402488 <xQueueGenericReceive+0x1bc>)
  4023cc:	4798      	blx	r3
		taskENTER_CRITICAL();
  4023ce:	4b2b      	ldr	r3, [pc, #172]	; (40247c <xQueueGenericReceive+0x1b0>)
  4023d0:	4798      	blx	r3
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4023d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4023d4:	2b00      	cmp	r3, #0
  4023d6:	d1b3      	bne.n	402340 <xQueueGenericReceive+0x74>
				if( xTicksToWait == ( TickType_t ) 0 )
  4023d8:	9b01      	ldr	r3, [sp, #4]
  4023da:	2b00      	cmp	r3, #0
  4023dc:	d0e6      	beq.n	4023ac <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
  4023de:	b91d      	cbnz	r5, 4023e8 <xQueueGenericReceive+0x11c>
					vTaskSetTimeOutState( &xTimeOut );
  4023e0:	a802      	add	r0, sp, #8
  4023e2:	4b2a      	ldr	r3, [pc, #168]	; (40248c <xQueueGenericReceive+0x1c0>)
  4023e4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  4023e6:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  4023e8:	4b23      	ldr	r3, [pc, #140]	; (402478 <xQueueGenericReceive+0x1ac>)
  4023ea:	4798      	blx	r3
		vTaskSuspendAll();
  4023ec:	4b28      	ldr	r3, [pc, #160]	; (402490 <xQueueGenericReceive+0x1c4>)
  4023ee:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4023f0:	4b22      	ldr	r3, [pc, #136]	; (40247c <xQueueGenericReceive+0x1b0>)
  4023f2:	4798      	blx	r3
  4023f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023fa:	d101      	bne.n	402400 <xQueueGenericReceive+0x134>
  4023fc:	2300      	movs	r3, #0
  4023fe:	6463      	str	r3, [r4, #68]	; 0x44
  402400:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402402:	f1b3 3fff 	cmp.w	r3, #4294967295
  402406:	d101      	bne.n	40240c <xQueueGenericReceive+0x140>
  402408:	2300      	movs	r3, #0
  40240a:	64a3      	str	r3, [r4, #72]	; 0x48
  40240c:	4b1a      	ldr	r3, [pc, #104]	; (402478 <xQueueGenericReceive+0x1ac>)
  40240e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402410:	a901      	add	r1, sp, #4
  402412:	a802      	add	r0, sp, #8
  402414:	4b1f      	ldr	r3, [pc, #124]	; (402494 <xQueueGenericReceive+0x1c8>)
  402416:	4798      	blx	r3
  402418:	b9e0      	cbnz	r0, 402454 <xQueueGenericReceive+0x188>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40241a:	4620      	mov	r0, r4
  40241c:	4b1e      	ldr	r3, [pc, #120]	; (402498 <xQueueGenericReceive+0x1cc>)
  40241e:	4798      	blx	r3
  402420:	2800      	cmp	r0, #0
  402422:	d0cf      	beq.n	4023c4 <xQueueGenericReceive+0xf8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402424:	6823      	ldr	r3, [r4, #0]
  402426:	2b00      	cmp	r3, #0
  402428:	d0c4      	beq.n	4023b4 <xQueueGenericReceive+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40242a:	9901      	ldr	r1, [sp, #4]
  40242c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402430:	4b1a      	ldr	r3, [pc, #104]	; (40249c <xQueueGenericReceive+0x1d0>)
  402432:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402434:	4620      	mov	r0, r4
  402436:	4b13      	ldr	r3, [pc, #76]	; (402484 <xQueueGenericReceive+0x1b8>)
  402438:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40243a:	4b13      	ldr	r3, [pc, #76]	; (402488 <xQueueGenericReceive+0x1bc>)
  40243c:	4798      	blx	r3
  40243e:	2800      	cmp	r0, #0
  402440:	d1c5      	bne.n	4023ce <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
  402442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402446:	4b0b      	ldr	r3, [pc, #44]	; (402474 <xQueueGenericReceive+0x1a8>)
  402448:	601a      	str	r2, [r3, #0]
  40244a:	f3bf 8f4f 	dsb	sy
  40244e:	f3bf 8f6f 	isb	sy
  402452:	e7bc      	b.n	4023ce <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
  402454:	4620      	mov	r0, r4
  402456:	4b0b      	ldr	r3, [pc, #44]	; (402484 <xQueueGenericReceive+0x1b8>)
  402458:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40245a:	4b0b      	ldr	r3, [pc, #44]	; (402488 <xQueueGenericReceive+0x1bc>)
  40245c:	4798      	blx	r3
			return errQUEUE_EMPTY;
  40245e:	2000      	movs	r0, #0
  402460:	e78f      	b.n	402382 <xQueueGenericReceive+0xb6>
  402462:	bf00      	nop
  402464:	00402f8d 	.word	0x00402f8d
  402468:	00401d15 	.word	0x00401d15
  40246c:	0040311d 	.word	0x0040311d
  402470:	00402e25 	.word	0x00402e25
  402474:	e000ed04 	.word	0xe000ed04
  402478:	00401925 	.word	0x00401925
  40247c:	004018d9 	.word	0x004018d9
  402480:	00402fad 	.word	0x00402fad
  402484:	00401d3d 	.word	0x00401d3d
  402488:	00402a05 	.word	0x00402a05
  40248c:	00402ebd 	.word	0x00402ebd
  402490:	004028a5 	.word	0x004028a5
  402494:	00402eed 	.word	0x00402eed
  402498:	00401be1 	.word	0x00401be1
  40249c:	00402d21 	.word	0x00402d21

004024a0 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4024a0:	2300      	movs	r3, #0
  4024a2:	2b07      	cmp	r3, #7
  4024a4:	d80c      	bhi.n	4024c0 <vQueueAddToRegistry+0x20>
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4024a6:	4a07      	ldr	r2, [pc, #28]	; (4024c4 <vQueueAddToRegistry+0x24>)
  4024a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4024ac:	b10a      	cbz	r2, 4024b2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4024ae:	3301      	adds	r3, #1
  4024b0:	e7f7      	b.n	4024a2 <vQueueAddToRegistry+0x2>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4024b2:	4a04      	ldr	r2, [pc, #16]	; (4024c4 <vQueueAddToRegistry+0x24>)
  4024b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4024b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4024bc:	6058      	str	r0, [r3, #4]
				break;
  4024be:	4770      	bx	lr
  4024c0:	4770      	bx	lr
  4024c2:	bf00      	nop
  4024c4:	2043a210 	.word	0x2043a210

004024c8 <vQueueWaitForMessageRestricted>:
	{
  4024c8:	b570      	push	{r4, r5, r6, lr}
  4024ca:	4604      	mov	r4, r0
  4024cc:	460d      	mov	r5, r1
  4024ce:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4024d0:	4b0f      	ldr	r3, [pc, #60]	; (402510 <vQueueWaitForMessageRestricted+0x48>)
  4024d2:	4798      	blx	r3
  4024d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4024d6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4024da:	d00b      	beq.n	4024f4 <vQueueWaitForMessageRestricted+0x2c>
  4024dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4024de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4024e2:	d00a      	beq.n	4024fa <vQueueWaitForMessageRestricted+0x32>
  4024e4:	4b0b      	ldr	r3, [pc, #44]	; (402514 <vQueueWaitForMessageRestricted+0x4c>)
  4024e6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4024e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4024ea:	b14b      	cbz	r3, 402500 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4024ec:	4620      	mov	r0, r4
  4024ee:	4b0a      	ldr	r3, [pc, #40]	; (402518 <vQueueWaitForMessageRestricted+0x50>)
  4024f0:	4798      	blx	r3
  4024f2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4024f4:	2300      	movs	r3, #0
  4024f6:	6463      	str	r3, [r4, #68]	; 0x44
  4024f8:	e7f0      	b.n	4024dc <vQueueWaitForMessageRestricted+0x14>
  4024fa:	2300      	movs	r3, #0
  4024fc:	64a3      	str	r3, [r4, #72]	; 0x48
  4024fe:	e7f1      	b.n	4024e4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402500:	4632      	mov	r2, r6
  402502:	4629      	mov	r1, r5
  402504:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402508:	4b04      	ldr	r3, [pc, #16]	; (40251c <vQueueWaitForMessageRestricted+0x54>)
  40250a:	4798      	blx	r3
  40250c:	e7ee      	b.n	4024ec <vQueueWaitForMessageRestricted+0x24>
  40250e:	bf00      	nop
  402510:	004018d9 	.word	0x004018d9
  402514:	00401925 	.word	0x00401925
  402518:	00401d3d 	.word	0x00401d3d
  40251c:	00402da5 	.word	0x00402da5

00402520 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402520:	4b0a      	ldr	r3, [pc, #40]	; (40254c <prvResetNextTaskUnblockTime+0x2c>)
  402522:	681b      	ldr	r3, [r3, #0]
  402524:	681b      	ldr	r3, [r3, #0]
  402526:	b94b      	cbnz	r3, 40253c <prvResetNextTaskUnblockTime+0x1c>
  402528:	2301      	movs	r3, #1
  40252a:	b94b      	cbnz	r3, 402540 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40252c:	4b07      	ldr	r3, [pc, #28]	; (40254c <prvResetNextTaskUnblockTime+0x2c>)
  40252e:	681b      	ldr	r3, [r3, #0]
  402530:	68db      	ldr	r3, [r3, #12]
  402532:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402534:	685a      	ldr	r2, [r3, #4]
  402536:	4b06      	ldr	r3, [pc, #24]	; (402550 <prvResetNextTaskUnblockTime+0x30>)
  402538:	601a      	str	r2, [r3, #0]
  40253a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40253c:	2300      	movs	r3, #0
  40253e:	e7f4      	b.n	40252a <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
  402540:	f04f 32ff 	mov.w	r2, #4294967295
  402544:	4b02      	ldr	r3, [pc, #8]	; (402550 <prvResetNextTaskUnblockTime+0x30>)
  402546:	601a      	str	r2, [r3, #0]
  402548:	4770      	bx	lr
  40254a:	bf00      	nop
  40254c:	2040c2d4 	.word	0x2040c2d4
  402550:	2040c380 	.word	0x2040c380

00402554 <prvDeleteTCB>:
	{
  402554:	b538      	push	{r3, r4, r5, lr}
  402556:	4605      	mov	r5, r0
			vPortFreeAligned( pxTCB->pxStack );
  402558:	6b00      	ldr	r0, [r0, #48]	; 0x30
  40255a:	4c02      	ldr	r4, [pc, #8]	; (402564 <prvDeleteTCB+0x10>)
  40255c:	47a0      	blx	r4
		vPortFree( pxTCB );
  40255e:	4628      	mov	r0, r5
  402560:	47a0      	blx	r4
  402562:	bd38      	pop	{r3, r4, r5, pc}
  402564:	00401b9d 	.word	0x00401b9d

00402568 <prvAllocateTCBAndStack>:
{
  402568:	b570      	push	{r4, r5, r6, lr}
  40256a:	4606      	mov	r6, r0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40256c:	460c      	mov	r4, r1
  40256e:	b919      	cbnz	r1, 402578 <prvAllocateTCBAndStack+0x10>
  402570:	0080      	lsls	r0, r0, #2
  402572:	4b0c      	ldr	r3, [pc, #48]	; (4025a4 <prvAllocateTCBAndStack+0x3c>)
  402574:	4798      	blx	r3
  402576:	4604      	mov	r4, r0
		if( pxStack != NULL )
  402578:	b18c      	cbz	r4, 40259e <prvAllocateTCBAndStack+0x36>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40257a:	2058      	movs	r0, #88	; 0x58
  40257c:	4b09      	ldr	r3, [pc, #36]	; (4025a4 <prvAllocateTCBAndStack+0x3c>)
  40257e:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402580:	4605      	mov	r5, r0
  402582:	b140      	cbz	r0, 402596 <prvAllocateTCBAndStack+0x2e>
				pxNewTCB->pxStack = pxStack;
  402584:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
  402586:	b125      	cbz	r5, 402592 <prvAllocateTCBAndStack+0x2a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402588:	00b2      	lsls	r2, r6, #2
  40258a:	21a5      	movs	r1, #165	; 0xa5
  40258c:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40258e:	4b06      	ldr	r3, [pc, #24]	; (4025a8 <prvAllocateTCBAndStack+0x40>)
  402590:	4798      	blx	r3
}
  402592:	4628      	mov	r0, r5
  402594:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
  402596:	4620      	mov	r0, r4
  402598:	4b04      	ldr	r3, [pc, #16]	; (4025ac <prvAllocateTCBAndStack+0x44>)
  40259a:	4798      	blx	r3
  40259c:	e7f3      	b.n	402586 <prvAllocateTCBAndStack+0x1e>
			pxNewTCB = NULL;
  40259e:	2500      	movs	r5, #0
  4025a0:	e7f1      	b.n	402586 <prvAllocateTCBAndStack+0x1e>
  4025a2:	bf00      	nop
  4025a4:	00401b29 	.word	0x00401b29
  4025a8:	0042797d 	.word	0x0042797d
  4025ac:	00401b9d 	.word	0x00401b9d

004025b0 <prvInitialiseTCBVariables>:
{
  4025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4025b2:	4604      	mov	r4, r0
  4025b4:	4615      	mov	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4025b6:	2300      	movs	r3, #0
  4025b8:	2b09      	cmp	r3, #9
  4025ba:	d918      	bls.n	4025ee <prvInitialiseTCBVariables+0x3e>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4025bc:	2300      	movs	r3, #0
  4025be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  4025c2:	2d04      	cmp	r5, #4
  4025c4:	d900      	bls.n	4025c8 <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  4025c6:	2504      	movs	r5, #4
	pxTCB->uxPriority = uxPriority;
  4025c8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4025ca:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4025cc:	2600      	movs	r6, #0
  4025ce:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4025d0:	1d20      	adds	r0, r4, #4
  4025d2:	4f0b      	ldr	r7, [pc, #44]	; (402600 <prvInitialiseTCBVariables+0x50>)
  4025d4:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4025d6:	f104 0018 	add.w	r0, r4, #24
  4025da:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4025dc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4025de:	f1c5 0505 	rsb	r5, r5, #5
  4025e2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4025e4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4025e6:	6526      	str	r6, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4025e8:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
  4025ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4025ee:	5cc8      	ldrb	r0, [r1, r3]
  4025f0:	18e2      	adds	r2, r4, r3
  4025f2:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4025f6:	5cca      	ldrb	r2, [r1, r3]
  4025f8:	2a00      	cmp	r2, #0
  4025fa:	d0df      	beq.n	4025bc <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4025fc:	3301      	adds	r3, #1
  4025fe:	e7db      	b.n	4025b8 <prvInitialiseTCBVariables+0x8>
  402600:	004017a3 	.word	0x004017a3

00402604 <prvInitialiseTaskLists>:
{
  402604:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  402606:	2400      	movs	r4, #0
  402608:	2c04      	cmp	r4, #4
  40260a:	d911      	bls.n	402630 <prvInitialiseTaskLists+0x2c>
	vListInitialise( &xDelayedTaskList1 );
  40260c:	4e0c      	ldr	r6, [pc, #48]	; (402640 <prvInitialiseTaskLists+0x3c>)
  40260e:	4630      	mov	r0, r6
  402610:	4c0c      	ldr	r4, [pc, #48]	; (402644 <prvInitialiseTaskLists+0x40>)
  402612:	47a0      	blx	r4
	vListInitialise( &xDelayedTaskList2 );
  402614:	4d0c      	ldr	r5, [pc, #48]	; (402648 <prvInitialiseTaskLists+0x44>)
  402616:	4628      	mov	r0, r5
  402618:	47a0      	blx	r4
	vListInitialise( &xPendingReadyList );
  40261a:	480c      	ldr	r0, [pc, #48]	; (40264c <prvInitialiseTaskLists+0x48>)
  40261c:	47a0      	blx	r4
		vListInitialise( &xTasksWaitingTermination );
  40261e:	480c      	ldr	r0, [pc, #48]	; (402650 <prvInitialiseTaskLists+0x4c>)
  402620:	47a0      	blx	r4
		vListInitialise( &xSuspendedTaskList );
  402622:	480c      	ldr	r0, [pc, #48]	; (402654 <prvInitialiseTaskLists+0x50>)
  402624:	47a0      	blx	r4
	pxDelayedTaskList = &xDelayedTaskList1;
  402626:	4b0c      	ldr	r3, [pc, #48]	; (402658 <prvInitialiseTaskLists+0x54>)
  402628:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40262a:	4b0c      	ldr	r3, [pc, #48]	; (40265c <prvInitialiseTaskLists+0x58>)
  40262c:	601d      	str	r5, [r3, #0]
  40262e:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402630:	2014      	movs	r0, #20
  402632:	4b0b      	ldr	r3, [pc, #44]	; (402660 <prvInitialiseTaskLists+0x5c>)
  402634:	fb00 3004 	mla	r0, r0, r4, r3
  402638:	4b02      	ldr	r3, [pc, #8]	; (402644 <prvInitialiseTaskLists+0x40>)
  40263a:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  40263c:	3401      	adds	r4, #1
  40263e:	e7e3      	b.n	402608 <prvInitialiseTaskLists+0x4>
  402640:	2040c358 	.word	0x2040c358
  402644:	0040178d 	.word	0x0040178d
  402648:	2040c36c 	.word	0x2040c36c
  40264c:	2040c388 	.word	0x2040c388
  402650:	2040c3b4 	.word	0x2040c3b4
  402654:	2040c3a0 	.word	0x2040c3a0
  402658:	2040c2d4 	.word	0x2040c2d4
  40265c:	2040c2d8 	.word	0x2040c2d8
  402660:	2040c2dc 	.word	0x2040c2dc

00402664 <prvAddCurrentTaskToDelayedList>:
{
  402664:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402666:	4b0f      	ldr	r3, [pc, #60]	; (4026a4 <prvAddCurrentTaskToDelayedList+0x40>)
  402668:	681b      	ldr	r3, [r3, #0]
  40266a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  40266c:	4b0e      	ldr	r3, [pc, #56]	; (4026a8 <prvAddCurrentTaskToDelayedList+0x44>)
  40266e:	681b      	ldr	r3, [r3, #0]
  402670:	4298      	cmp	r0, r3
  402672:	d30e      	bcc.n	402692 <prvAddCurrentTaskToDelayedList+0x2e>
  402674:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402676:	4b0d      	ldr	r3, [pc, #52]	; (4026ac <prvAddCurrentTaskToDelayedList+0x48>)
  402678:	6818      	ldr	r0, [r3, #0]
  40267a:	4b0a      	ldr	r3, [pc, #40]	; (4026a4 <prvAddCurrentTaskToDelayedList+0x40>)
  40267c:	6819      	ldr	r1, [r3, #0]
  40267e:	3104      	adds	r1, #4
  402680:	4b0b      	ldr	r3, [pc, #44]	; (4026b0 <prvAddCurrentTaskToDelayedList+0x4c>)
  402682:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402684:	4b0b      	ldr	r3, [pc, #44]	; (4026b4 <prvAddCurrentTaskToDelayedList+0x50>)
  402686:	681b      	ldr	r3, [r3, #0]
  402688:	429c      	cmp	r4, r3
  40268a:	d201      	bcs.n	402690 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40268c:	4b09      	ldr	r3, [pc, #36]	; (4026b4 <prvAddCurrentTaskToDelayedList+0x50>)
  40268e:	601c      	str	r4, [r3, #0]
  402690:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402692:	4b09      	ldr	r3, [pc, #36]	; (4026b8 <prvAddCurrentTaskToDelayedList+0x54>)
  402694:	6818      	ldr	r0, [r3, #0]
  402696:	4b03      	ldr	r3, [pc, #12]	; (4026a4 <prvAddCurrentTaskToDelayedList+0x40>)
  402698:	6819      	ldr	r1, [r3, #0]
  40269a:	3104      	adds	r1, #4
  40269c:	4b04      	ldr	r3, [pc, #16]	; (4026b0 <prvAddCurrentTaskToDelayedList+0x4c>)
  40269e:	4798      	blx	r3
  4026a0:	bd10      	pop	{r4, pc}
  4026a2:	bf00      	nop
  4026a4:	2040c2d0 	.word	0x2040c2d0
  4026a8:	2040c3c8 	.word	0x2040c3c8
  4026ac:	2040c2d4 	.word	0x2040c2d4
  4026b0:	004017c1 	.word	0x004017c1
  4026b4:	2040c380 	.word	0x2040c380
  4026b8:	2040c2d8 	.word	0x2040c2d8

004026bc <xTaskGenericCreate>:
{
  4026bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026c0:	b083      	sub	sp, #12
  4026c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4026c4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	configASSERT( pxTaskCode );
  4026c8:	b168      	cbz	r0, 4026e6 <xTaskGenericCreate+0x2a>
  4026ca:	4680      	mov	r8, r0
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4026cc:	2f04      	cmp	r7, #4
  4026ce:	d915      	bls.n	4026fc <xTaskGenericCreate+0x40>
  4026d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d4:	b672      	cpsid	i
  4026d6:	f383 8811 	msr	BASEPRI, r3
  4026da:	f3bf 8f6f 	isb	sy
  4026de:	f3bf 8f4f 	dsb	sy
  4026e2:	b662      	cpsie	i
  4026e4:	e7fe      	b.n	4026e4 <xTaskGenericCreate+0x28>
  4026e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026ea:	b672      	cpsid	i
  4026ec:	f383 8811 	msr	BASEPRI, r3
  4026f0:	f3bf 8f6f 	isb	sy
  4026f4:	f3bf 8f4f 	dsb	sy
  4026f8:	b662      	cpsie	i
  4026fa:	e7fe      	b.n	4026fa <xTaskGenericCreate+0x3e>
  4026fc:	4699      	mov	r9, r3
  4026fe:	4616      	mov	r6, r2
  402700:	468a      	mov	sl, r1
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  402702:	990e      	ldr	r1, [sp, #56]	; 0x38
  402704:	4610      	mov	r0, r2
  402706:	4b35      	ldr	r3, [pc, #212]	; (4027dc <xTaskGenericCreate+0x120>)
  402708:	4798      	blx	r3
	if( pxNewTCB != NULL )
  40270a:	4604      	mov	r4, r0
  40270c:	2800      	cmp	r0, #0
  40270e:	d062      	beq.n	4027d6 <xTaskGenericCreate+0x11a>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402710:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402712:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  402716:	4435      	add	r5, r6
  402718:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40271c:	f023 0507 	bic.w	r5, r3, #7
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  402720:	9600      	str	r6, [sp, #0]
  402722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402724:	463a      	mov	r2, r7
  402726:	4651      	mov	r1, sl
  402728:	4e2d      	ldr	r6, [pc, #180]	; (4027e0 <xTaskGenericCreate+0x124>)
  40272a:	47b0      	blx	r6
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40272c:	464a      	mov	r2, r9
  40272e:	4641      	mov	r1, r8
  402730:	4628      	mov	r0, r5
  402732:	4b2c      	ldr	r3, [pc, #176]	; (4027e4 <xTaskGenericCreate+0x128>)
  402734:	4798      	blx	r3
  402736:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402738:	f1bb 0f00 	cmp.w	fp, #0
  40273c:	d001      	beq.n	402742 <xTaskGenericCreate+0x86>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40273e:	f8cb 4000 	str.w	r4, [fp]
		taskENTER_CRITICAL();
  402742:	4b29      	ldr	r3, [pc, #164]	; (4027e8 <xTaskGenericCreate+0x12c>)
  402744:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402746:	4a29      	ldr	r2, [pc, #164]	; (4027ec <xTaskGenericCreate+0x130>)
  402748:	6813      	ldr	r3, [r2, #0]
  40274a:	3301      	adds	r3, #1
  40274c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40274e:	4b28      	ldr	r3, [pc, #160]	; (4027f0 <xTaskGenericCreate+0x134>)
  402750:	681b      	ldr	r3, [r3, #0]
  402752:	2b00      	cmp	r3, #0
  402754:	d133      	bne.n	4027be <xTaskGenericCreate+0x102>
				pxCurrentTCB =  pxNewTCB;
  402756:	4b26      	ldr	r3, [pc, #152]	; (4027f0 <xTaskGenericCreate+0x134>)
  402758:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40275a:	6813      	ldr	r3, [r2, #0]
  40275c:	2b01      	cmp	r3, #1
  40275e:	d101      	bne.n	402764 <xTaskGenericCreate+0xa8>
					prvInitialiseTaskLists();
  402760:	4b24      	ldr	r3, [pc, #144]	; (4027f4 <xTaskGenericCreate+0x138>)
  402762:	4798      	blx	r3
			uxTaskNumber++;
  402764:	4a24      	ldr	r2, [pc, #144]	; (4027f8 <xTaskGenericCreate+0x13c>)
  402766:	6813      	ldr	r3, [r2, #0]
  402768:	3301      	adds	r3, #1
  40276a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40276c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40276e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402770:	2501      	movs	r5, #1
  402772:	fa05 f203 	lsl.w	r2, r5, r3
  402776:	4921      	ldr	r1, [pc, #132]	; (4027fc <xTaskGenericCreate+0x140>)
  402778:	6808      	ldr	r0, [r1, #0]
  40277a:	4302      	orrs	r2, r0
  40277c:	600a      	str	r2, [r1, #0]
  40277e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402782:	009a      	lsls	r2, r3, #2
  402784:	1d21      	adds	r1, r4, #4
  402786:	481e      	ldr	r0, [pc, #120]	; (402800 <xTaskGenericCreate+0x144>)
  402788:	4410      	add	r0, r2
  40278a:	4b1e      	ldr	r3, [pc, #120]	; (402804 <xTaskGenericCreate+0x148>)
  40278c:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40278e:	4b1e      	ldr	r3, [pc, #120]	; (402808 <xTaskGenericCreate+0x14c>)
  402790:	4798      	blx	r3
			xReturn = pdPASS;
  402792:	4628      	mov	r0, r5
	if( xReturn == pdPASS )
  402794:	2801      	cmp	r0, #1
  402796:	d10f      	bne.n	4027b8 <xTaskGenericCreate+0xfc>
		if( xSchedulerRunning != pdFALSE )
  402798:	4b1c      	ldr	r3, [pc, #112]	; (40280c <xTaskGenericCreate+0x150>)
  40279a:	681b      	ldr	r3, [r3, #0]
  40279c:	b163      	cbz	r3, 4027b8 <xTaskGenericCreate+0xfc>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40279e:	4b14      	ldr	r3, [pc, #80]	; (4027f0 <xTaskGenericCreate+0x134>)
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4027a4:	429f      	cmp	r7, r3
  4027a6:	d907      	bls.n	4027b8 <xTaskGenericCreate+0xfc>
				taskYIELD_IF_USING_PREEMPTION();
  4027a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027ac:	4b18      	ldr	r3, [pc, #96]	; (402810 <xTaskGenericCreate+0x154>)
  4027ae:	601a      	str	r2, [r3, #0]
  4027b0:	f3bf 8f4f 	dsb	sy
  4027b4:	f3bf 8f6f 	isb	sy
}
  4027b8:	b003      	add	sp, #12
  4027ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( xSchedulerRunning == pdFALSE )
  4027be:	4b13      	ldr	r3, [pc, #76]	; (40280c <xTaskGenericCreate+0x150>)
  4027c0:	681b      	ldr	r3, [r3, #0]
  4027c2:	2b00      	cmp	r3, #0
  4027c4:	d1ce      	bne.n	402764 <xTaskGenericCreate+0xa8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4027c6:	4b0a      	ldr	r3, [pc, #40]	; (4027f0 <xTaskGenericCreate+0x134>)
  4027c8:	681b      	ldr	r3, [r3, #0]
  4027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4027cc:	429f      	cmp	r7, r3
  4027ce:	d3c9      	bcc.n	402764 <xTaskGenericCreate+0xa8>
						pxCurrentTCB = pxNewTCB;
  4027d0:	4b07      	ldr	r3, [pc, #28]	; (4027f0 <xTaskGenericCreate+0x134>)
  4027d2:	601c      	str	r4, [r3, #0]
  4027d4:	e7c6      	b.n	402764 <xTaskGenericCreate+0xa8>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4027d6:	f04f 30ff 	mov.w	r0, #4294967295
  4027da:	e7db      	b.n	402794 <xTaskGenericCreate+0xd8>
  4027dc:	00402569 	.word	0x00402569
  4027e0:	004025b1 	.word	0x004025b1
  4027e4:	0040188d 	.word	0x0040188d
  4027e8:	004018d9 	.word	0x004018d9
  4027ec:	2040c340 	.word	0x2040c340
  4027f0:	2040c2d0 	.word	0x2040c2d0
  4027f4:	00402605 	.word	0x00402605
  4027f8:	2040c34c 	.word	0x2040c34c
  4027fc:	2040c354 	.word	0x2040c354
  402800:	2040c2dc 	.word	0x2040c2dc
  402804:	004017a9 	.word	0x004017a9
  402808:	00401925 	.word	0x00401925
  40280c:	2040c39c 	.word	0x2040c39c
  402810:	e000ed04 	.word	0xe000ed04

00402814 <vTaskStartScheduler>:
{
  402814:	b510      	push	{r4, lr}
  402816:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402818:	2300      	movs	r3, #0
  40281a:	9303      	str	r3, [sp, #12]
  40281c:	9302      	str	r3, [sp, #8]
  40281e:	9301      	str	r3, [sp, #4]
  402820:	9300      	str	r3, [sp, #0]
  402822:	2282      	movs	r2, #130	; 0x82
  402824:	4917      	ldr	r1, [pc, #92]	; (402884 <vTaskStartScheduler+0x70>)
  402826:	4818      	ldr	r0, [pc, #96]	; (402888 <vTaskStartScheduler+0x74>)
  402828:	4c18      	ldr	r4, [pc, #96]	; (40288c <vTaskStartScheduler+0x78>)
  40282a:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40282c:	2801      	cmp	r0, #1
  40282e:	d00d      	beq.n	40284c <vTaskStartScheduler+0x38>
	if( xReturn == pdPASS )
  402830:	2801      	cmp	r0, #1
  402832:	d00e      	beq.n	402852 <vTaskStartScheduler+0x3e>
		configASSERT( xReturn );
  402834:	bb18      	cbnz	r0, 40287e <vTaskStartScheduler+0x6a>
  402836:	f04f 0380 	mov.w	r3, #128	; 0x80
  40283a:	b672      	cpsid	i
  40283c:	f383 8811 	msr	BASEPRI, r3
  402840:	f3bf 8f6f 	isb	sy
  402844:	f3bf 8f4f 	dsb	sy
  402848:	b662      	cpsie	i
  40284a:	e7fe      	b.n	40284a <vTaskStartScheduler+0x36>
			xReturn = xTimerCreateTimerTask();
  40284c:	4b10      	ldr	r3, [pc, #64]	; (402890 <vTaskStartScheduler+0x7c>)
  40284e:	4798      	blx	r3
  402850:	e7ee      	b.n	402830 <vTaskStartScheduler+0x1c>
  402852:	f04f 0380 	mov.w	r3, #128	; 0x80
  402856:	b672      	cpsid	i
  402858:	f383 8811 	msr	BASEPRI, r3
  40285c:	f3bf 8f6f 	isb	sy
  402860:	f3bf 8f4f 	dsb	sy
  402864:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402866:	f04f 32ff 	mov.w	r2, #4294967295
  40286a:	4b0a      	ldr	r3, [pc, #40]	; (402894 <vTaskStartScheduler+0x80>)
  40286c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40286e:	2201      	movs	r2, #1
  402870:	4b09      	ldr	r3, [pc, #36]	; (402898 <vTaskStartScheduler+0x84>)
  402872:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402874:	2200      	movs	r2, #0
  402876:	4b09      	ldr	r3, [pc, #36]	; (40289c <vTaskStartScheduler+0x88>)
  402878:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40287a:	4b09      	ldr	r3, [pc, #36]	; (4028a0 <vTaskStartScheduler+0x8c>)
  40287c:	4798      	blx	r3
}
  40287e:	b004      	add	sp, #16
  402880:	bd10      	pop	{r4, pc}
  402882:	bf00      	nop
  402884:	0042c13c 	.word	0x0042c13c
  402888:	00402c21 	.word	0x00402c21
  40288c:	004026bd 	.word	0x004026bd
  402890:	00403231 	.word	0x00403231
  402894:	2040c380 	.word	0x2040c380
  402898:	2040c39c 	.word	0x2040c39c
  40289c:	2040c3c8 	.word	0x2040c3c8
  4028a0:	00401a0d 	.word	0x00401a0d

004028a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4028a4:	4a02      	ldr	r2, [pc, #8]	; (4028b0 <vTaskSuspendAll+0xc>)
  4028a6:	6813      	ldr	r3, [r2, #0]
  4028a8:	3301      	adds	r3, #1
  4028aa:	6013      	str	r3, [r2, #0]
  4028ac:	4770      	bx	lr
  4028ae:	bf00      	nop
  4028b0:	2040c348 	.word	0x2040c348

004028b4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4028b4:	4b01      	ldr	r3, [pc, #4]	; (4028bc <xTaskGetTickCount+0x8>)
  4028b6:	6818      	ldr	r0, [r3, #0]
}
  4028b8:	4770      	bx	lr
  4028ba:	bf00      	nop
  4028bc:	2040c3c8 	.word	0x2040c3c8

004028c0 <xTaskIncrementTick>:
{
  4028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4028c2:	4b41      	ldr	r3, [pc, #260]	; (4029c8 <xTaskIncrementTick+0x108>)
  4028c4:	681b      	ldr	r3, [r3, #0]
  4028c6:	2b00      	cmp	r3, #0
  4028c8:	d175      	bne.n	4029b6 <xTaskIncrementTick+0xf6>
		++xTickCount;
  4028ca:	4b40      	ldr	r3, [pc, #256]	; (4029cc <xTaskIncrementTick+0x10c>)
  4028cc:	681a      	ldr	r2, [r3, #0]
  4028ce:	3201      	adds	r2, #1
  4028d0:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4028d2:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4028d4:	b9d6      	cbnz	r6, 40290c <xTaskIncrementTick+0x4c>
				taskSWITCH_DELAYED_LISTS();
  4028d6:	4b3e      	ldr	r3, [pc, #248]	; (4029d0 <xTaskIncrementTick+0x110>)
  4028d8:	681b      	ldr	r3, [r3, #0]
  4028da:	681b      	ldr	r3, [r3, #0]
  4028dc:	b153      	cbz	r3, 4028f4 <xTaskIncrementTick+0x34>
  4028de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028e2:	b672      	cpsid	i
  4028e4:	f383 8811 	msr	BASEPRI, r3
  4028e8:	f3bf 8f6f 	isb	sy
  4028ec:	f3bf 8f4f 	dsb	sy
  4028f0:	b662      	cpsie	i
  4028f2:	e7fe      	b.n	4028f2 <xTaskIncrementTick+0x32>
  4028f4:	4a36      	ldr	r2, [pc, #216]	; (4029d0 <xTaskIncrementTick+0x110>)
  4028f6:	6811      	ldr	r1, [r2, #0]
  4028f8:	4b36      	ldr	r3, [pc, #216]	; (4029d4 <xTaskIncrementTick+0x114>)
  4028fa:	6818      	ldr	r0, [r3, #0]
  4028fc:	6010      	str	r0, [r2, #0]
  4028fe:	6019      	str	r1, [r3, #0]
  402900:	4a35      	ldr	r2, [pc, #212]	; (4029d8 <xTaskIncrementTick+0x118>)
  402902:	6813      	ldr	r3, [r2, #0]
  402904:	3301      	adds	r3, #1
  402906:	6013      	str	r3, [r2, #0]
  402908:	4b34      	ldr	r3, [pc, #208]	; (4029dc <xTaskIncrementTick+0x11c>)
  40290a:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40290c:	4b34      	ldr	r3, [pc, #208]	; (4029e0 <xTaskIncrementTick+0x120>)
  40290e:	681b      	ldr	r3, [r3, #0]
  402910:	429e      	cmp	r6, r3
  402912:	d244      	bcs.n	40299e <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
  402914:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402916:	4b33      	ldr	r3, [pc, #204]	; (4029e4 <xTaskIncrementTick+0x124>)
  402918:	681b      	ldr	r3, [r3, #0]
  40291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40291c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402920:	009a      	lsls	r2, r3, #2
  402922:	4b31      	ldr	r3, [pc, #196]	; (4029e8 <xTaskIncrementTick+0x128>)
  402924:	589b      	ldr	r3, [r3, r2]
  402926:	2b01      	cmp	r3, #1
  402928:	d900      	bls.n	40292c <xTaskIncrementTick+0x6c>
				xSwitchRequired = pdTRUE;
  40292a:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40292c:	4b2f      	ldr	r3, [pc, #188]	; (4029ec <xTaskIncrementTick+0x12c>)
  40292e:	681b      	ldr	r3, [r3, #0]
  402930:	b90b      	cbnz	r3, 402936 <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  402932:	4b2f      	ldr	r3, [pc, #188]	; (4029f0 <xTaskIncrementTick+0x130>)
  402934:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402936:	4b2f      	ldr	r3, [pc, #188]	; (4029f4 <xTaskIncrementTick+0x134>)
  402938:	681b      	ldr	r3, [r3, #0]
  40293a:	b103      	cbz	r3, 40293e <xTaskIncrementTick+0x7e>
			xSwitchRequired = pdTRUE;
  40293c:	2401      	movs	r4, #1
}
  40293e:	4620      	mov	r0, r4
  402940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
								xSwitchRequired = pdTRUE;
  402942:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402944:	4b22      	ldr	r3, [pc, #136]	; (4029d0 <xTaskIncrementTick+0x110>)
  402946:	681b      	ldr	r3, [r3, #0]
  402948:	681b      	ldr	r3, [r3, #0]
  40294a:	b353      	cbz	r3, 4029a2 <xTaskIncrementTick+0xe2>
  40294c:	2300      	movs	r3, #0
  40294e:	bb53      	cbnz	r3, 4029a6 <xTaskIncrementTick+0xe6>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402950:	4b1f      	ldr	r3, [pc, #124]	; (4029d0 <xTaskIncrementTick+0x110>)
  402952:	681b      	ldr	r3, [r3, #0]
  402954:	68db      	ldr	r3, [r3, #12]
  402956:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402958:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40295a:	429e      	cmp	r6, r3
  40295c:	d328      	bcc.n	4029b0 <xTaskIncrementTick+0xf0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40295e:	1d2f      	adds	r7, r5, #4
  402960:	4638      	mov	r0, r7
  402962:	4b25      	ldr	r3, [pc, #148]	; (4029f8 <xTaskIncrementTick+0x138>)
  402964:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402966:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402968:	b11b      	cbz	r3, 402972 <xTaskIncrementTick+0xb2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40296a:	f105 0018 	add.w	r0, r5, #24
  40296e:	4b22      	ldr	r3, [pc, #136]	; (4029f8 <xTaskIncrementTick+0x138>)
  402970:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  402972:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  402974:	2201      	movs	r2, #1
  402976:	409a      	lsls	r2, r3
  402978:	4920      	ldr	r1, [pc, #128]	; (4029fc <xTaskIncrementTick+0x13c>)
  40297a:	6808      	ldr	r0, [r1, #0]
  40297c:	4302      	orrs	r2, r0
  40297e:	600a      	str	r2, [r1, #0]
  402980:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402984:	009a      	lsls	r2, r3, #2
  402986:	4639      	mov	r1, r7
  402988:	4817      	ldr	r0, [pc, #92]	; (4029e8 <xTaskIncrementTick+0x128>)
  40298a:	4410      	add	r0, r2
  40298c:	4b1c      	ldr	r3, [pc, #112]	; (402a00 <xTaskIncrementTick+0x140>)
  40298e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402990:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402992:	4b14      	ldr	r3, [pc, #80]	; (4029e4 <xTaskIncrementTick+0x124>)
  402994:	681b      	ldr	r3, [r3, #0]
  402996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402998:	429a      	cmp	r2, r3
  40299a:	d2d2      	bcs.n	402942 <xTaskIncrementTick+0x82>
  40299c:	e7d2      	b.n	402944 <xTaskIncrementTick+0x84>
  40299e:	2400      	movs	r4, #0
  4029a0:	e7d0      	b.n	402944 <xTaskIncrementTick+0x84>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4029a2:	2301      	movs	r3, #1
  4029a4:	e7d3      	b.n	40294e <xTaskIncrementTick+0x8e>
						xNextTaskUnblockTime = portMAX_DELAY;
  4029a6:	f04f 32ff 	mov.w	r2, #4294967295
  4029aa:	4b0d      	ldr	r3, [pc, #52]	; (4029e0 <xTaskIncrementTick+0x120>)
  4029ac:	601a      	str	r2, [r3, #0]
						break;
  4029ae:	e7b2      	b.n	402916 <xTaskIncrementTick+0x56>
							xNextTaskUnblockTime = xItemValue;
  4029b0:	4a0b      	ldr	r2, [pc, #44]	; (4029e0 <xTaskIncrementTick+0x120>)
  4029b2:	6013      	str	r3, [r2, #0]
							break;
  4029b4:	e7af      	b.n	402916 <xTaskIncrementTick+0x56>
		++uxPendedTicks;
  4029b6:	4a0d      	ldr	r2, [pc, #52]	; (4029ec <xTaskIncrementTick+0x12c>)
  4029b8:	6813      	ldr	r3, [r2, #0]
  4029ba:	3301      	adds	r3, #1
  4029bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4029be:	4b0c      	ldr	r3, [pc, #48]	; (4029f0 <xTaskIncrementTick+0x130>)
  4029c0:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4029c2:	2400      	movs	r4, #0
  4029c4:	e7b7      	b.n	402936 <xTaskIncrementTick+0x76>
  4029c6:	bf00      	nop
  4029c8:	2040c348 	.word	0x2040c348
  4029cc:	2040c3c8 	.word	0x2040c3c8
  4029d0:	2040c2d4 	.word	0x2040c2d4
  4029d4:	2040c2d8 	.word	0x2040c2d8
  4029d8:	2040c384 	.word	0x2040c384
  4029dc:	00402521 	.word	0x00402521
  4029e0:	2040c380 	.word	0x2040c380
  4029e4:	2040c2d0 	.word	0x2040c2d0
  4029e8:	2040c2dc 	.word	0x2040c2dc
  4029ec:	2040c344 	.word	0x2040c344
  4029f0:	004259e1 	.word	0x004259e1
  4029f4:	2040c3cc 	.word	0x2040c3cc
  4029f8:	004017f5 	.word	0x004017f5
  4029fc:	2040c354 	.word	0x2040c354
  402a00:	004017a9 	.word	0x004017a9

00402a04 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  402a04:	4b35      	ldr	r3, [pc, #212]	; (402adc <xTaskResumeAll+0xd8>)
  402a06:	681b      	ldr	r3, [r3, #0]
  402a08:	b953      	cbnz	r3, 402a20 <xTaskResumeAll+0x1c>
  402a0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a0e:	b672      	cpsid	i
  402a10:	f383 8811 	msr	BASEPRI, r3
  402a14:	f3bf 8f6f 	isb	sy
  402a18:	f3bf 8f4f 	dsb	sy
  402a1c:	b662      	cpsie	i
  402a1e:	e7fe      	b.n	402a1e <xTaskResumeAll+0x1a>
{
  402a20:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
  402a22:	4b2f      	ldr	r3, [pc, #188]	; (402ae0 <xTaskResumeAll+0xdc>)
  402a24:	4798      	blx	r3
		--uxSchedulerSuspended;
  402a26:	4b2d      	ldr	r3, [pc, #180]	; (402adc <xTaskResumeAll+0xd8>)
  402a28:	681a      	ldr	r2, [r3, #0]
  402a2a:	3a01      	subs	r2, #1
  402a2c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a2e:	681b      	ldr	r3, [r3, #0]
  402a30:	2b00      	cmp	r3, #0
  402a32:	d14f      	bne.n	402ad4 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402a34:	4b2b      	ldr	r3, [pc, #172]	; (402ae4 <xTaskResumeAll+0xe0>)
  402a36:	681b      	ldr	r3, [r3, #0]
  402a38:	bb1b      	cbnz	r3, 402a82 <xTaskResumeAll+0x7e>
BaseType_t xAlreadyYielded = pdFALSE;
  402a3a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402a3c:	4b2a      	ldr	r3, [pc, #168]	; (402ae8 <xTaskResumeAll+0xe4>)
  402a3e:	4798      	blx	r3
}
  402a40:	4620      	mov	r0, r4
  402a42:	bd70      	pop	{r4, r5, r6, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402a44:	4b29      	ldr	r3, [pc, #164]	; (402aec <xTaskResumeAll+0xe8>)
  402a46:	68db      	ldr	r3, [r3, #12]
  402a48:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402a4a:	f104 0018 	add.w	r0, r4, #24
  402a4e:	4e28      	ldr	r6, [pc, #160]	; (402af0 <xTaskResumeAll+0xec>)
  402a50:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402a52:	1d25      	adds	r5, r4, #4
  402a54:	4628      	mov	r0, r5
  402a56:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402a58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402a5a:	2201      	movs	r2, #1
  402a5c:	409a      	lsls	r2, r3
  402a5e:	4925      	ldr	r1, [pc, #148]	; (402af4 <xTaskResumeAll+0xf0>)
  402a60:	6808      	ldr	r0, [r1, #0]
  402a62:	4302      	orrs	r2, r0
  402a64:	600a      	str	r2, [r1, #0]
  402a66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402a6a:	009a      	lsls	r2, r3, #2
  402a6c:	4629      	mov	r1, r5
  402a6e:	4822      	ldr	r0, [pc, #136]	; (402af8 <xTaskResumeAll+0xf4>)
  402a70:	4410      	add	r0, r2
  402a72:	4b22      	ldr	r3, [pc, #136]	; (402afc <xTaskResumeAll+0xf8>)
  402a74:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402a76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a78:	4b21      	ldr	r3, [pc, #132]	; (402b00 <xTaskResumeAll+0xfc>)
  402a7a:	681b      	ldr	r3, [r3, #0]
  402a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a7e:	429a      	cmp	r2, r3
  402a80:	d214      	bcs.n	402aac <xTaskResumeAll+0xa8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402a82:	4b1a      	ldr	r3, [pc, #104]	; (402aec <xTaskResumeAll+0xe8>)
  402a84:	681b      	ldr	r3, [r3, #0]
  402a86:	2b00      	cmp	r3, #0
  402a88:	d1dc      	bne.n	402a44 <xTaskResumeAll+0x40>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402a8a:	4b1e      	ldr	r3, [pc, #120]	; (402b04 <xTaskResumeAll+0x100>)
  402a8c:	681b      	ldr	r3, [r3, #0]
  402a8e:	b9ab      	cbnz	r3, 402abc <xTaskResumeAll+0xb8>
				if( xYieldPending == pdTRUE )
  402a90:	4b1d      	ldr	r3, [pc, #116]	; (402b08 <xTaskResumeAll+0x104>)
  402a92:	681b      	ldr	r3, [r3, #0]
  402a94:	2b01      	cmp	r3, #1
  402a96:	d11f      	bne.n	402ad8 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
  402a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a9c:	4b1b      	ldr	r3, [pc, #108]	; (402b0c <xTaskResumeAll+0x108>)
  402a9e:	601a      	str	r2, [r3, #0]
  402aa0:	f3bf 8f4f 	dsb	sy
  402aa4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402aa8:	2401      	movs	r4, #1
  402aaa:	e7c7      	b.n	402a3c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
  402aac:	2201      	movs	r2, #1
  402aae:	4b16      	ldr	r3, [pc, #88]	; (402b08 <xTaskResumeAll+0x104>)
  402ab0:	601a      	str	r2, [r3, #0]
  402ab2:	e7e6      	b.n	402a82 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402ab4:	4a13      	ldr	r2, [pc, #76]	; (402b04 <xTaskResumeAll+0x100>)
  402ab6:	6813      	ldr	r3, [r2, #0]
  402ab8:	3b01      	subs	r3, #1
  402aba:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402abc:	4b11      	ldr	r3, [pc, #68]	; (402b04 <xTaskResumeAll+0x100>)
  402abe:	681b      	ldr	r3, [r3, #0]
  402ac0:	2b00      	cmp	r3, #0
  402ac2:	d0e5      	beq.n	402a90 <xTaskResumeAll+0x8c>
						if( xTaskIncrementTick() != pdFALSE )
  402ac4:	4b12      	ldr	r3, [pc, #72]	; (402b10 <xTaskResumeAll+0x10c>)
  402ac6:	4798      	blx	r3
  402ac8:	2800      	cmp	r0, #0
  402aca:	d0f3      	beq.n	402ab4 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
  402acc:	2201      	movs	r2, #1
  402ace:	4b0e      	ldr	r3, [pc, #56]	; (402b08 <xTaskResumeAll+0x104>)
  402ad0:	601a      	str	r2, [r3, #0]
  402ad2:	e7ef      	b.n	402ab4 <xTaskResumeAll+0xb0>
BaseType_t xAlreadyYielded = pdFALSE;
  402ad4:	2400      	movs	r4, #0
  402ad6:	e7b1      	b.n	402a3c <xTaskResumeAll+0x38>
  402ad8:	2400      	movs	r4, #0
  402ada:	e7af      	b.n	402a3c <xTaskResumeAll+0x38>
  402adc:	2040c348 	.word	0x2040c348
  402ae0:	004018d9 	.word	0x004018d9
  402ae4:	2040c340 	.word	0x2040c340
  402ae8:	00401925 	.word	0x00401925
  402aec:	2040c388 	.word	0x2040c388
  402af0:	004017f5 	.word	0x004017f5
  402af4:	2040c354 	.word	0x2040c354
  402af8:	2040c2dc 	.word	0x2040c2dc
  402afc:	004017a9 	.word	0x004017a9
  402b00:	2040c2d0 	.word	0x2040c2d0
  402b04:	2040c344 	.word	0x2040c344
  402b08:	2040c3cc 	.word	0x2040c3cc
  402b0c:	e000ed04 	.word	0xe000ed04
  402b10:	004028c1 	.word	0x004028c1

00402b14 <vTaskDelay>:
	{
  402b14:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402b16:	2800      	cmp	r0, #0
  402b18:	d02a      	beq.n	402b70 <vTaskDelay+0x5c>
  402b1a:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402b1c:	4b1a      	ldr	r3, [pc, #104]	; (402b88 <vTaskDelay+0x74>)
  402b1e:	681b      	ldr	r3, [r3, #0]
  402b20:	b153      	cbz	r3, 402b38 <vTaskDelay+0x24>
  402b22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b26:	b672      	cpsid	i
  402b28:	f383 8811 	msr	BASEPRI, r3
  402b2c:	f3bf 8f6f 	isb	sy
  402b30:	f3bf 8f4f 	dsb	sy
  402b34:	b662      	cpsie	i
  402b36:	e7fe      	b.n	402b36 <vTaskDelay+0x22>
			vTaskSuspendAll();
  402b38:	4b14      	ldr	r3, [pc, #80]	; (402b8c <vTaskDelay+0x78>)
  402b3a:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402b3c:	4b14      	ldr	r3, [pc, #80]	; (402b90 <vTaskDelay+0x7c>)
  402b3e:	681b      	ldr	r3, [r3, #0]
  402b40:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b42:	4b14      	ldr	r3, [pc, #80]	; (402b94 <vTaskDelay+0x80>)
  402b44:	6818      	ldr	r0, [r3, #0]
  402b46:	3004      	adds	r0, #4
  402b48:	4b13      	ldr	r3, [pc, #76]	; (402b98 <vTaskDelay+0x84>)
  402b4a:	4798      	blx	r3
  402b4c:	b950      	cbnz	r0, 402b64 <vTaskDelay+0x50>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402b4e:	4b11      	ldr	r3, [pc, #68]	; (402b94 <vTaskDelay+0x80>)
  402b50:	681b      	ldr	r3, [r3, #0]
  402b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402b54:	2301      	movs	r3, #1
  402b56:	fa03 f202 	lsl.w	r2, r3, r2
  402b5a:	4910      	ldr	r1, [pc, #64]	; (402b9c <vTaskDelay+0x88>)
  402b5c:	680b      	ldr	r3, [r1, #0]
  402b5e:	ea23 0302 	bic.w	r3, r3, r2
  402b62:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402b64:	4620      	mov	r0, r4
  402b66:	4b0e      	ldr	r3, [pc, #56]	; (402ba0 <vTaskDelay+0x8c>)
  402b68:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402b6a:	4b0e      	ldr	r3, [pc, #56]	; (402ba4 <vTaskDelay+0x90>)
  402b6c:	4798      	blx	r3
  402b6e:	e000      	b.n	402b72 <vTaskDelay+0x5e>
	BaseType_t xAlreadyYielded = pdFALSE;
  402b70:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
  402b72:	b938      	cbnz	r0, 402b84 <vTaskDelay+0x70>
			portYIELD_WITHIN_API();
  402b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402b78:	4b0b      	ldr	r3, [pc, #44]	; (402ba8 <vTaskDelay+0x94>)
  402b7a:	601a      	str	r2, [r3, #0]
  402b7c:	f3bf 8f4f 	dsb	sy
  402b80:	f3bf 8f6f 	isb	sy
  402b84:	bd10      	pop	{r4, pc}
  402b86:	bf00      	nop
  402b88:	2040c348 	.word	0x2040c348
  402b8c:	004028a5 	.word	0x004028a5
  402b90:	2040c3c8 	.word	0x2040c3c8
  402b94:	2040c2d0 	.word	0x2040c2d0
  402b98:	004017f5 	.word	0x004017f5
  402b9c:	2040c354 	.word	0x2040c354
  402ba0:	00402665 	.word	0x00402665
  402ba4:	00402a05 	.word	0x00402a05
  402ba8:	e000ed04 	.word	0xe000ed04

00402bac <prvCheckTasksWaitingTermination>:
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402bac:	4b13      	ldr	r3, [pc, #76]	; (402bfc <prvCheckTasksWaitingTermination+0x50>)
  402bae:	681b      	ldr	r3, [r3, #0]
  402bb0:	b313      	cbz	r3, 402bf8 <prvCheckTasksWaitingTermination+0x4c>
{
  402bb2:	b510      	push	{r4, lr}
			vTaskSuspendAll();
  402bb4:	4b12      	ldr	r3, [pc, #72]	; (402c00 <prvCheckTasksWaitingTermination+0x54>)
  402bb6:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402bb8:	4b12      	ldr	r3, [pc, #72]	; (402c04 <prvCheckTasksWaitingTermination+0x58>)
  402bba:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
  402bbc:	4b12      	ldr	r3, [pc, #72]	; (402c08 <prvCheckTasksWaitingTermination+0x5c>)
  402bbe:	4798      	blx	r3
			if( xListIsEmpty == pdFALSE )
  402bc0:	b924      	cbnz	r4, 402bcc <prvCheckTasksWaitingTermination+0x20>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402bc2:	4b0e      	ldr	r3, [pc, #56]	; (402bfc <prvCheckTasksWaitingTermination+0x50>)
  402bc4:	681b      	ldr	r3, [r3, #0]
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	d1f4      	bne.n	402bb4 <prvCheckTasksWaitingTermination+0x8>
}
  402bca:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
  402bcc:	4b0f      	ldr	r3, [pc, #60]	; (402c0c <prvCheckTasksWaitingTermination+0x60>)
  402bce:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402bd0:	4b0c      	ldr	r3, [pc, #48]	; (402c04 <prvCheckTasksWaitingTermination+0x58>)
  402bd2:	68db      	ldr	r3, [r3, #12]
  402bd4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402bd6:	1d20      	adds	r0, r4, #4
  402bd8:	4b0d      	ldr	r3, [pc, #52]	; (402c10 <prvCheckTasksWaitingTermination+0x64>)
  402bda:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402bdc:	4a0d      	ldr	r2, [pc, #52]	; (402c14 <prvCheckTasksWaitingTermination+0x68>)
  402bde:	6813      	ldr	r3, [r2, #0]
  402be0:	3b01      	subs	r3, #1
  402be2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402be4:	4a05      	ldr	r2, [pc, #20]	; (402bfc <prvCheckTasksWaitingTermination+0x50>)
  402be6:	6813      	ldr	r3, [r2, #0]
  402be8:	3b01      	subs	r3, #1
  402bea:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
  402bec:	4b0a      	ldr	r3, [pc, #40]	; (402c18 <prvCheckTasksWaitingTermination+0x6c>)
  402bee:	4798      	blx	r3
				prvDeleteTCB( pxTCB );
  402bf0:	4620      	mov	r0, r4
  402bf2:	4b0a      	ldr	r3, [pc, #40]	; (402c1c <prvCheckTasksWaitingTermination+0x70>)
  402bf4:	4798      	blx	r3
  402bf6:	e7e4      	b.n	402bc2 <prvCheckTasksWaitingTermination+0x16>
  402bf8:	4770      	bx	lr
  402bfa:	bf00      	nop
  402bfc:	2040c350 	.word	0x2040c350
  402c00:	004028a5 	.word	0x004028a5
  402c04:	2040c3b4 	.word	0x2040c3b4
  402c08:	00402a05 	.word	0x00402a05
  402c0c:	004018d9 	.word	0x004018d9
  402c10:	004017f5 	.word	0x004017f5
  402c14:	2040c340 	.word	0x2040c340
  402c18:	00401925 	.word	0x00401925
  402c1c:	00402555 	.word	0x00402555

00402c20 <prvIdleTask>:
{
  402c20:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
  402c22:	4b07      	ldr	r3, [pc, #28]	; (402c40 <prvIdleTask+0x20>)
  402c24:	4798      	blx	r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402c26:	4b07      	ldr	r3, [pc, #28]	; (402c44 <prvIdleTask+0x24>)
  402c28:	681b      	ldr	r3, [r3, #0]
  402c2a:	2b01      	cmp	r3, #1
  402c2c:	d9f9      	bls.n	402c22 <prvIdleTask+0x2>
				taskYIELD();
  402c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c32:	4b05      	ldr	r3, [pc, #20]	; (402c48 <prvIdleTask+0x28>)
  402c34:	601a      	str	r2, [r3, #0]
  402c36:	f3bf 8f4f 	dsb	sy
  402c3a:	f3bf 8f6f 	isb	sy
  402c3e:	e7f0      	b.n	402c22 <prvIdleTask+0x2>
  402c40:	00402bad 	.word	0x00402bad
  402c44:	2040c2dc 	.word	0x2040c2dc
  402c48:	e000ed04 	.word	0xe000ed04

00402c4c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402c4c:	4b2e      	ldr	r3, [pc, #184]	; (402d08 <vTaskSwitchContext+0xbc>)
  402c4e:	681b      	ldr	r3, [r3, #0]
  402c50:	2b00      	cmp	r3, #0
  402c52:	d12c      	bne.n	402cae <vTaskSwitchContext+0x62>
{
  402c54:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402c56:	2200      	movs	r2, #0
  402c58:	4b2c      	ldr	r3, [pc, #176]	; (402d0c <vTaskSwitchContext+0xc0>)
  402c5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402c5c:	4b2c      	ldr	r3, [pc, #176]	; (402d10 <vTaskSwitchContext+0xc4>)
  402c5e:	681b      	ldr	r3, [r3, #0]
  402c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c62:	681a      	ldr	r2, [r3, #0]
  402c64:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402c68:	d103      	bne.n	402c72 <vTaskSwitchContext+0x26>
  402c6a:	685a      	ldr	r2, [r3, #4]
  402c6c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402c70:	d021      	beq.n	402cb6 <vTaskSwitchContext+0x6a>
  402c72:	4b27      	ldr	r3, [pc, #156]	; (402d10 <vTaskSwitchContext+0xc4>)
  402c74:	6818      	ldr	r0, [r3, #0]
  402c76:	6819      	ldr	r1, [r3, #0]
  402c78:	3134      	adds	r1, #52	; 0x34
  402c7a:	4b26      	ldr	r3, [pc, #152]	; (402d14 <vTaskSwitchContext+0xc8>)
  402c7c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402c7e:	4b26      	ldr	r3, [pc, #152]	; (402d18 <vTaskSwitchContext+0xcc>)
  402c80:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402c82:	fab3 f383 	clz	r3, r3
  402c86:	b2db      	uxtb	r3, r3
  402c88:	f1c3 031f 	rsb	r3, r3, #31
  402c8c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402c90:	008a      	lsls	r2, r1, #2
  402c92:	4922      	ldr	r1, [pc, #136]	; (402d1c <vTaskSwitchContext+0xd0>)
  402c94:	588a      	ldr	r2, [r1, r2]
  402c96:	b9ba      	cbnz	r2, 402cc8 <vTaskSwitchContext+0x7c>
	__asm volatile
  402c98:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c9c:	b672      	cpsid	i
  402c9e:	f383 8811 	msr	BASEPRI, r3
  402ca2:	f3bf 8f6f 	isb	sy
  402ca6:	f3bf 8f4f 	dsb	sy
  402caa:	b662      	cpsie	i
  402cac:	e7fe      	b.n	402cac <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402cae:	2201      	movs	r2, #1
  402cb0:	4b16      	ldr	r3, [pc, #88]	; (402d0c <vTaskSwitchContext+0xc0>)
  402cb2:	601a      	str	r2, [r3, #0]
  402cb4:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402cb6:	689a      	ldr	r2, [r3, #8]
  402cb8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402cbc:	d1d9      	bne.n	402c72 <vTaskSwitchContext+0x26>
  402cbe:	68db      	ldr	r3, [r3, #12]
  402cc0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402cc4:	d1d5      	bne.n	402c72 <vTaskSwitchContext+0x26>
  402cc6:	e7da      	b.n	402c7e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402cc8:	4814      	ldr	r0, [pc, #80]	; (402d1c <vTaskSwitchContext+0xd0>)
  402cca:	009a      	lsls	r2, r3, #2
  402ccc:	18d4      	adds	r4, r2, r3
  402cce:	00a1      	lsls	r1, r4, #2
  402cd0:	4401      	add	r1, r0
  402cd2:	684c      	ldr	r4, [r1, #4]
  402cd4:	6864      	ldr	r4, [r4, #4]
  402cd6:	604c      	str	r4, [r1, #4]
  402cd8:	441a      	add	r2, r3
  402cda:	0091      	lsls	r1, r2, #2
  402cdc:	3108      	adds	r1, #8
  402cde:	4408      	add	r0, r1
  402ce0:	4284      	cmp	r4, r0
  402ce2:	d009      	beq.n	402cf8 <vTaskSwitchContext+0xac>
  402ce4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402ce8:	009a      	lsls	r2, r3, #2
  402cea:	4b0c      	ldr	r3, [pc, #48]	; (402d1c <vTaskSwitchContext+0xd0>)
  402cec:	4413      	add	r3, r2
  402cee:	685b      	ldr	r3, [r3, #4]
  402cf0:	68da      	ldr	r2, [r3, #12]
  402cf2:	4b07      	ldr	r3, [pc, #28]	; (402d10 <vTaskSwitchContext+0xc4>)
  402cf4:	601a      	str	r2, [r3, #0]
  402cf6:	bd10      	pop	{r4, pc}
  402cf8:	6860      	ldr	r0, [r4, #4]
  402cfa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402cfe:	0091      	lsls	r1, r2, #2
  402d00:	4a06      	ldr	r2, [pc, #24]	; (402d1c <vTaskSwitchContext+0xd0>)
  402d02:	440a      	add	r2, r1
  402d04:	6050      	str	r0, [r2, #4]
  402d06:	e7ed      	b.n	402ce4 <vTaskSwitchContext+0x98>
  402d08:	2040c348 	.word	0x2040c348
  402d0c:	2040c3cc 	.word	0x2040c3cc
  402d10:	2040c2d0 	.word	0x2040c2d0
  402d14:	004259c9 	.word	0x004259c9
  402d18:	2040c354 	.word	0x2040c354
  402d1c:	2040c2dc 	.word	0x2040c2dc

00402d20 <vTaskPlaceOnEventList>:
{
  402d20:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402d22:	b1e8      	cbz	r0, 402d60 <vTaskPlaceOnEventList+0x40>
  402d24:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402d26:	4d17      	ldr	r5, [pc, #92]	; (402d84 <vTaskPlaceOnEventList+0x64>)
  402d28:	6829      	ldr	r1, [r5, #0]
  402d2a:	3118      	adds	r1, #24
  402d2c:	4b16      	ldr	r3, [pc, #88]	; (402d88 <vTaskPlaceOnEventList+0x68>)
  402d2e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402d30:	6828      	ldr	r0, [r5, #0]
  402d32:	3004      	adds	r0, #4
  402d34:	4b15      	ldr	r3, [pc, #84]	; (402d8c <vTaskPlaceOnEventList+0x6c>)
  402d36:	4798      	blx	r3
  402d38:	b948      	cbnz	r0, 402d4e <vTaskPlaceOnEventList+0x2e>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402d3a:	682b      	ldr	r3, [r5, #0]
  402d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402d3e:	2301      	movs	r3, #1
  402d40:	fa03 f202 	lsl.w	r2, r3, r2
  402d44:	4912      	ldr	r1, [pc, #72]	; (402d90 <vTaskPlaceOnEventList+0x70>)
  402d46:	680b      	ldr	r3, [r1, #0]
  402d48:	ea23 0302 	bic.w	r3, r3, r2
  402d4c:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402d4e:	f1b4 3fff 	cmp.w	r4, #4294967295
  402d52:	d010      	beq.n	402d76 <vTaskPlaceOnEventList+0x56>
			xTimeToWake = xTickCount + xTicksToWait;
  402d54:	4b0f      	ldr	r3, [pc, #60]	; (402d94 <vTaskPlaceOnEventList+0x74>)
  402d56:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402d58:	4420      	add	r0, r4
  402d5a:	4b0f      	ldr	r3, [pc, #60]	; (402d98 <vTaskPlaceOnEventList+0x78>)
  402d5c:	4798      	blx	r3
  402d5e:	bd38      	pop	{r3, r4, r5, pc}
  402d60:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d64:	b672      	cpsid	i
  402d66:	f383 8811 	msr	BASEPRI, r3
  402d6a:	f3bf 8f6f 	isb	sy
  402d6e:	f3bf 8f4f 	dsb	sy
  402d72:	b662      	cpsie	i
  402d74:	e7fe      	b.n	402d74 <vTaskPlaceOnEventList+0x54>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402d76:	4b03      	ldr	r3, [pc, #12]	; (402d84 <vTaskPlaceOnEventList+0x64>)
  402d78:	6819      	ldr	r1, [r3, #0]
  402d7a:	3104      	adds	r1, #4
  402d7c:	4807      	ldr	r0, [pc, #28]	; (402d9c <vTaskPlaceOnEventList+0x7c>)
  402d7e:	4b08      	ldr	r3, [pc, #32]	; (402da0 <vTaskPlaceOnEventList+0x80>)
  402d80:	4798      	blx	r3
  402d82:	bd38      	pop	{r3, r4, r5, pc}
  402d84:	2040c2d0 	.word	0x2040c2d0
  402d88:	004017c1 	.word	0x004017c1
  402d8c:	004017f5 	.word	0x004017f5
  402d90:	2040c354 	.word	0x2040c354
  402d94:	2040c3c8 	.word	0x2040c3c8
  402d98:	00402665 	.word	0x00402665
  402d9c:	2040c3a0 	.word	0x2040c3a0
  402da0:	004017a9 	.word	0x004017a9

00402da4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402da4:	b1f0      	cbz	r0, 402de4 <vTaskPlaceOnEventListRestricted+0x40>
	{
  402da6:	b570      	push	{r4, r5, r6, lr}
  402da8:	4615      	mov	r5, r2
  402daa:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402dac:	4e16      	ldr	r6, [pc, #88]	; (402e08 <vTaskPlaceOnEventListRestricted+0x64>)
  402dae:	6831      	ldr	r1, [r6, #0]
  402db0:	3118      	adds	r1, #24
  402db2:	4b16      	ldr	r3, [pc, #88]	; (402e0c <vTaskPlaceOnEventListRestricted+0x68>)
  402db4:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402db6:	6830      	ldr	r0, [r6, #0]
  402db8:	3004      	adds	r0, #4
  402dba:	4b15      	ldr	r3, [pc, #84]	; (402e10 <vTaskPlaceOnEventListRestricted+0x6c>)
  402dbc:	4798      	blx	r3
  402dbe:	b948      	cbnz	r0, 402dd4 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402dc0:	6833      	ldr	r3, [r6, #0]
  402dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402dc4:	2301      	movs	r3, #1
  402dc6:	fa03 f202 	lsl.w	r2, r3, r2
  402dca:	4912      	ldr	r1, [pc, #72]	; (402e14 <vTaskPlaceOnEventListRestricted+0x70>)
  402dcc:	680b      	ldr	r3, [r1, #0]
  402dce:	ea23 0302 	bic.w	r3, r3, r2
  402dd2:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402dd4:	2d01      	cmp	r5, #1
  402dd6:	d010      	beq.n	402dfa <vTaskPlaceOnEventListRestricted+0x56>
				xTimeToWake = xTickCount + xTicksToWait;
  402dd8:	4b0f      	ldr	r3, [pc, #60]	; (402e18 <vTaskPlaceOnEventListRestricted+0x74>)
  402dda:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402ddc:	4420      	add	r0, r4
  402dde:	4b0f      	ldr	r3, [pc, #60]	; (402e1c <vTaskPlaceOnEventListRestricted+0x78>)
  402de0:	4798      	blx	r3
  402de2:	bd70      	pop	{r4, r5, r6, pc}
  402de4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402de8:	b672      	cpsid	i
  402dea:	f383 8811 	msr	BASEPRI, r3
  402dee:	f3bf 8f6f 	isb	sy
  402df2:	f3bf 8f4f 	dsb	sy
  402df6:	b662      	cpsie	i
  402df8:	e7fe      	b.n	402df8 <vTaskPlaceOnEventListRestricted+0x54>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402dfa:	4b03      	ldr	r3, [pc, #12]	; (402e08 <vTaskPlaceOnEventListRestricted+0x64>)
  402dfc:	6819      	ldr	r1, [r3, #0]
  402dfe:	3104      	adds	r1, #4
  402e00:	4807      	ldr	r0, [pc, #28]	; (402e20 <vTaskPlaceOnEventListRestricted+0x7c>)
  402e02:	4b02      	ldr	r3, [pc, #8]	; (402e0c <vTaskPlaceOnEventListRestricted+0x68>)
  402e04:	4798      	blx	r3
  402e06:	bd70      	pop	{r4, r5, r6, pc}
  402e08:	2040c2d0 	.word	0x2040c2d0
  402e0c:	004017a9 	.word	0x004017a9
  402e10:	004017f5 	.word	0x004017f5
  402e14:	2040c354 	.word	0x2040c354
  402e18:	2040c3c8 	.word	0x2040c3c8
  402e1c:	00402665 	.word	0x00402665
  402e20:	2040c3a0 	.word	0x2040c3a0

00402e24 <xTaskRemoveFromEventList>:
{
  402e24:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402e26:	68c3      	ldr	r3, [r0, #12]
  402e28:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402e2a:	b324      	cbz	r4, 402e76 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402e2c:	f104 0518 	add.w	r5, r4, #24
  402e30:	4628      	mov	r0, r5
  402e32:	4b1a      	ldr	r3, [pc, #104]	; (402e9c <xTaskRemoveFromEventList+0x78>)
  402e34:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402e36:	4b1a      	ldr	r3, [pc, #104]	; (402ea0 <xTaskRemoveFromEventList+0x7c>)
  402e38:	681b      	ldr	r3, [r3, #0]
  402e3a:	bb3b      	cbnz	r3, 402e8c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402e3c:	1d25      	adds	r5, r4, #4
  402e3e:	4628      	mov	r0, r5
  402e40:	4b16      	ldr	r3, [pc, #88]	; (402e9c <xTaskRemoveFromEventList+0x78>)
  402e42:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402e44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402e46:	2201      	movs	r2, #1
  402e48:	409a      	lsls	r2, r3
  402e4a:	4916      	ldr	r1, [pc, #88]	; (402ea4 <xTaskRemoveFromEventList+0x80>)
  402e4c:	6808      	ldr	r0, [r1, #0]
  402e4e:	4302      	orrs	r2, r0
  402e50:	600a      	str	r2, [r1, #0]
  402e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e56:	009a      	lsls	r2, r3, #2
  402e58:	4629      	mov	r1, r5
  402e5a:	4813      	ldr	r0, [pc, #76]	; (402ea8 <xTaskRemoveFromEventList+0x84>)
  402e5c:	4410      	add	r0, r2
  402e5e:	4b13      	ldr	r3, [pc, #76]	; (402eac <xTaskRemoveFromEventList+0x88>)
  402e60:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402e62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402e64:	4b12      	ldr	r3, [pc, #72]	; (402eb0 <xTaskRemoveFromEventList+0x8c>)
  402e66:	681b      	ldr	r3, [r3, #0]
  402e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402e6a:	429a      	cmp	r2, r3
  402e6c:	d913      	bls.n	402e96 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402e6e:	2001      	movs	r0, #1
  402e70:	4b10      	ldr	r3, [pc, #64]	; (402eb4 <xTaskRemoveFromEventList+0x90>)
  402e72:	6018      	str	r0, [r3, #0]
  402e74:	bd38      	pop	{r3, r4, r5, pc}
  402e76:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e7a:	b672      	cpsid	i
  402e7c:	f383 8811 	msr	BASEPRI, r3
  402e80:	f3bf 8f6f 	isb	sy
  402e84:	f3bf 8f4f 	dsb	sy
  402e88:	b662      	cpsie	i
  402e8a:	e7fe      	b.n	402e8a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402e8c:	4629      	mov	r1, r5
  402e8e:	480a      	ldr	r0, [pc, #40]	; (402eb8 <xTaskRemoveFromEventList+0x94>)
  402e90:	4b06      	ldr	r3, [pc, #24]	; (402eac <xTaskRemoveFromEventList+0x88>)
  402e92:	4798      	blx	r3
  402e94:	e7e5      	b.n	402e62 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402e96:	2000      	movs	r0, #0
}
  402e98:	bd38      	pop	{r3, r4, r5, pc}
  402e9a:	bf00      	nop
  402e9c:	004017f5 	.word	0x004017f5
  402ea0:	2040c348 	.word	0x2040c348
  402ea4:	2040c354 	.word	0x2040c354
  402ea8:	2040c2dc 	.word	0x2040c2dc
  402eac:	004017a9 	.word	0x004017a9
  402eb0:	2040c2d0 	.word	0x2040c2d0
  402eb4:	2040c3cc 	.word	0x2040c3cc
  402eb8:	2040c388 	.word	0x2040c388

00402ebc <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402ebc:	b130      	cbz	r0, 402ecc <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402ebe:	4a09      	ldr	r2, [pc, #36]	; (402ee4 <vTaskSetTimeOutState+0x28>)
  402ec0:	6812      	ldr	r2, [r2, #0]
  402ec2:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402ec4:	4a08      	ldr	r2, [pc, #32]	; (402ee8 <vTaskSetTimeOutState+0x2c>)
  402ec6:	6812      	ldr	r2, [r2, #0]
  402ec8:	6042      	str	r2, [r0, #4]
  402eca:	4770      	bx	lr
  402ecc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ed0:	b672      	cpsid	i
  402ed2:	f383 8811 	msr	BASEPRI, r3
  402ed6:	f3bf 8f6f 	isb	sy
  402eda:	f3bf 8f4f 	dsb	sy
  402ede:	b662      	cpsie	i
  402ee0:	e7fe      	b.n	402ee0 <vTaskSetTimeOutState+0x24>
  402ee2:	bf00      	nop
  402ee4:	2040c384 	.word	0x2040c384
  402ee8:	2040c3c8 	.word	0x2040c3c8

00402eec <xTaskCheckForTimeOut>:
{
  402eec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402eee:	b1c0      	cbz	r0, 402f22 <xTaskCheckForTimeOut+0x36>
  402ef0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402ef2:	b309      	cbz	r1, 402f38 <xTaskCheckForTimeOut+0x4c>
  402ef4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402ef6:	4b1d      	ldr	r3, [pc, #116]	; (402f6c <xTaskCheckForTimeOut+0x80>)
  402ef8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402efa:	4b1d      	ldr	r3, [pc, #116]	; (402f70 <xTaskCheckForTimeOut+0x84>)
  402efc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402efe:	682b      	ldr	r3, [r5, #0]
  402f00:	f1b3 3fff 	cmp.w	r3, #4294967295
  402f04:	d02e      	beq.n	402f64 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402f06:	6820      	ldr	r0, [r4, #0]
  402f08:	4a1a      	ldr	r2, [pc, #104]	; (402f74 <xTaskCheckForTimeOut+0x88>)
  402f0a:	6812      	ldr	r2, [r2, #0]
  402f0c:	4290      	cmp	r0, r2
  402f0e:	d002      	beq.n	402f16 <xTaskCheckForTimeOut+0x2a>
  402f10:	6862      	ldr	r2, [r4, #4]
  402f12:	4291      	cmp	r1, r2
  402f14:	d228      	bcs.n	402f68 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402f16:	6862      	ldr	r2, [r4, #4]
  402f18:	1a88      	subs	r0, r1, r2
  402f1a:	4283      	cmp	r3, r0
  402f1c:	d817      	bhi.n	402f4e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402f1e:	2401      	movs	r4, #1
  402f20:	e01c      	b.n	402f5c <xTaskCheckForTimeOut+0x70>
  402f22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f26:	b672      	cpsid	i
  402f28:	f383 8811 	msr	BASEPRI, r3
  402f2c:	f3bf 8f6f 	isb	sy
  402f30:	f3bf 8f4f 	dsb	sy
  402f34:	b662      	cpsie	i
  402f36:	e7fe      	b.n	402f36 <xTaskCheckForTimeOut+0x4a>
  402f38:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f3c:	b672      	cpsid	i
  402f3e:	f383 8811 	msr	BASEPRI, r3
  402f42:	f3bf 8f6f 	isb	sy
  402f46:	f3bf 8f4f 	dsb	sy
  402f4a:	b662      	cpsie	i
  402f4c:	e7fe      	b.n	402f4c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402f4e:	1a52      	subs	r2, r2, r1
  402f50:	4413      	add	r3, r2
  402f52:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402f54:	4620      	mov	r0, r4
  402f56:	4b08      	ldr	r3, [pc, #32]	; (402f78 <xTaskCheckForTimeOut+0x8c>)
  402f58:	4798      	blx	r3
			xReturn = pdFALSE;
  402f5a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402f5c:	4b07      	ldr	r3, [pc, #28]	; (402f7c <xTaskCheckForTimeOut+0x90>)
  402f5e:	4798      	blx	r3
}
  402f60:	4620      	mov	r0, r4
  402f62:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402f64:	2400      	movs	r4, #0
  402f66:	e7f9      	b.n	402f5c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402f68:	2401      	movs	r4, #1
  402f6a:	e7f7      	b.n	402f5c <xTaskCheckForTimeOut+0x70>
  402f6c:	004018d9 	.word	0x004018d9
  402f70:	2040c3c8 	.word	0x2040c3c8
  402f74:	2040c384 	.word	0x2040c384
  402f78:	00402ebd 	.word	0x00402ebd
  402f7c:	00401925 	.word	0x00401925

00402f80 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402f80:	2201      	movs	r2, #1
  402f82:	4b01      	ldr	r3, [pc, #4]	; (402f88 <vTaskMissedYield+0x8>)
  402f84:	601a      	str	r2, [r3, #0]
  402f86:	4770      	bx	lr
  402f88:	2040c3cc 	.word	0x2040c3cc

00402f8c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402f8c:	4b05      	ldr	r3, [pc, #20]	; (402fa4 <xTaskGetSchedulerState+0x18>)
  402f8e:	681b      	ldr	r3, [r3, #0]
  402f90:	b123      	cbz	r3, 402f9c <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402f92:	4b05      	ldr	r3, [pc, #20]	; (402fa8 <xTaskGetSchedulerState+0x1c>)
  402f94:	681b      	ldr	r3, [r3, #0]
  402f96:	b91b      	cbnz	r3, 402fa0 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
  402f98:	2002      	movs	r0, #2
  402f9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402f9c:	2001      	movs	r0, #1
  402f9e:	4770      	bx	lr
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402fa0:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
  402fa2:	4770      	bx	lr
  402fa4:	2040c39c 	.word	0x2040c39c
  402fa8:	2040c348 	.word	0x2040c348

00402fac <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402fac:	2800      	cmp	r0, #0
  402fae:	d047      	beq.n	403040 <vTaskPriorityInherit+0x94>
	{
  402fb0:	b538      	push	{r3, r4, r5, lr}
  402fb2:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402fb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402fb6:	4923      	ldr	r1, [pc, #140]	; (403044 <vTaskPriorityInherit+0x98>)
  402fb8:	6809      	ldr	r1, [r1, #0]
  402fba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402fbc:	428b      	cmp	r3, r1
  402fbe:	d216      	bcs.n	402fee <vTaskPriorityInherit+0x42>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402fc0:	6981      	ldr	r1, [r0, #24]
  402fc2:	2900      	cmp	r1, #0
  402fc4:	db05      	blt.n	402fd2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402fc6:	491f      	ldr	r1, [pc, #124]	; (403044 <vTaskPriorityInherit+0x98>)
  402fc8:	6809      	ldr	r1, [r1, #0]
  402fca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402fcc:	f1c1 0105 	rsb	r1, r1, #5
  402fd0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402fd2:	6960      	ldr	r0, [r4, #20]
  402fd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402fd8:	0099      	lsls	r1, r3, #2
  402fda:	4b1b      	ldr	r3, [pc, #108]	; (403048 <vTaskPriorityInherit+0x9c>)
  402fdc:	440b      	add	r3, r1
  402fde:	4298      	cmp	r0, r3
  402fe0:	d006      	beq.n	402ff0 <vTaskPriorityInherit+0x44>
  402fe2:	2300      	movs	r3, #0
  402fe4:	b933      	cbnz	r3, 402ff4 <vTaskPriorityInherit+0x48>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402fe6:	4b17      	ldr	r3, [pc, #92]	; (403044 <vTaskPriorityInherit+0x98>)
  402fe8:	681b      	ldr	r3, [r3, #0]
  402fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fec:	62e3      	str	r3, [r4, #44]	; 0x2c
  402fee:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402ff0:	2301      	movs	r3, #1
  402ff2:	e7f7      	b.n	402fe4 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402ff4:	1d25      	adds	r5, r4, #4
  402ff6:	4628      	mov	r0, r5
  402ff8:	4b14      	ldr	r3, [pc, #80]	; (40304c <vTaskPriorityInherit+0xa0>)
  402ffa:	4798      	blx	r3
  402ffc:	b968      	cbnz	r0, 40301a <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402ffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403000:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403004:	008a      	lsls	r2, r1, #2
  403006:	4910      	ldr	r1, [pc, #64]	; (403048 <vTaskPriorityInherit+0x9c>)
  403008:	588a      	ldr	r2, [r1, r2]
  40300a:	b932      	cbnz	r2, 40301a <vTaskPriorityInherit+0x6e>
  40300c:	2201      	movs	r2, #1
  40300e:	409a      	lsls	r2, r3
  403010:	490f      	ldr	r1, [pc, #60]	; (403050 <vTaskPriorityInherit+0xa4>)
  403012:	680b      	ldr	r3, [r1, #0]
  403014:	ea23 0302 	bic.w	r3, r3, r2
  403018:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40301a:	4b0a      	ldr	r3, [pc, #40]	; (403044 <vTaskPriorityInherit+0x98>)
  40301c:	681b      	ldr	r3, [r3, #0]
  40301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403020:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403022:	2201      	movs	r2, #1
  403024:	409a      	lsls	r2, r3
  403026:	490a      	ldr	r1, [pc, #40]	; (403050 <vTaskPriorityInherit+0xa4>)
  403028:	6808      	ldr	r0, [r1, #0]
  40302a:	4302      	orrs	r2, r0
  40302c:	600a      	str	r2, [r1, #0]
  40302e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403032:	009a      	lsls	r2, r3, #2
  403034:	4629      	mov	r1, r5
  403036:	4804      	ldr	r0, [pc, #16]	; (403048 <vTaskPriorityInherit+0x9c>)
  403038:	4410      	add	r0, r2
  40303a:	4b06      	ldr	r3, [pc, #24]	; (403054 <vTaskPriorityInherit+0xa8>)
  40303c:	4798      	blx	r3
  40303e:	bd38      	pop	{r3, r4, r5, pc}
  403040:	4770      	bx	lr
  403042:	bf00      	nop
  403044:	2040c2d0 	.word	0x2040c2d0
  403048:	2040c2dc 	.word	0x2040c2dc
  40304c:	004017f5 	.word	0x004017f5
  403050:	2040c354 	.word	0x2040c354
  403054:	004017a9 	.word	0x004017a9

00403058 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403058:	2800      	cmp	r0, #0
  40305a:	d04f      	beq.n	4030fc <xTaskPriorityDisinherit+0xa4>
	{
  40305c:	b538      	push	{r3, r4, r5, lr}
  40305e:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  403060:	4a29      	ldr	r2, [pc, #164]	; (403108 <xTaskPriorityDisinherit+0xb0>)
  403062:	6812      	ldr	r2, [r2, #0]
  403064:	4290      	cmp	r0, r2
  403066:	d00a      	beq.n	40307e <xTaskPriorityDisinherit+0x26>
  403068:	f04f 0380 	mov.w	r3, #128	; 0x80
  40306c:	b672      	cpsid	i
  40306e:	f383 8811 	msr	BASEPRI, r3
  403072:	f3bf 8f6f 	isb	sy
  403076:	f3bf 8f4f 	dsb	sy
  40307a:	b662      	cpsie	i
  40307c:	e7fe      	b.n	40307c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40307e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403080:	b952      	cbnz	r2, 403098 <xTaskPriorityDisinherit+0x40>
  403082:	f04f 0380 	mov.w	r3, #128	; 0x80
  403086:	b672      	cpsid	i
  403088:	f383 8811 	msr	BASEPRI, r3
  40308c:	f3bf 8f6f 	isb	sy
  403090:	f3bf 8f4f 	dsb	sy
  403094:	b662      	cpsie	i
  403096:	e7fe      	b.n	403096 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  403098:	3a01      	subs	r2, #1
  40309a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40309c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40309e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  4030a0:	4288      	cmp	r0, r1
  4030a2:	d02d      	beq.n	403100 <xTaskPriorityDisinherit+0xa8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4030a4:	2a00      	cmp	r2, #0
  4030a6:	d12d      	bne.n	403104 <xTaskPriorityDisinherit+0xac>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4030a8:	1d25      	adds	r5, r4, #4
  4030aa:	4628      	mov	r0, r5
  4030ac:	4b17      	ldr	r3, [pc, #92]	; (40310c <xTaskPriorityDisinherit+0xb4>)
  4030ae:	4798      	blx	r3
  4030b0:	b970      	cbnz	r0, 4030d0 <xTaskPriorityDisinherit+0x78>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4030b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4030b4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4030b8:	008b      	lsls	r3, r1, #2
  4030ba:	4915      	ldr	r1, [pc, #84]	; (403110 <xTaskPriorityDisinherit+0xb8>)
  4030bc:	58cb      	ldr	r3, [r1, r3]
  4030be:	b93b      	cbnz	r3, 4030d0 <xTaskPriorityDisinherit+0x78>
  4030c0:	2301      	movs	r3, #1
  4030c2:	fa03 f202 	lsl.w	r2, r3, r2
  4030c6:	4913      	ldr	r1, [pc, #76]	; (403114 <xTaskPriorityDisinherit+0xbc>)
  4030c8:	680b      	ldr	r3, [r1, #0]
  4030ca:	ea23 0302 	bic.w	r3, r3, r2
  4030ce:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4030d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4030d2:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4030d4:	f1c3 0205 	rsb	r2, r3, #5
  4030d8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4030da:	2401      	movs	r4, #1
  4030dc:	fa04 f203 	lsl.w	r2, r4, r3
  4030e0:	490c      	ldr	r1, [pc, #48]	; (403114 <xTaskPriorityDisinherit+0xbc>)
  4030e2:	6808      	ldr	r0, [r1, #0]
  4030e4:	4302      	orrs	r2, r0
  4030e6:	600a      	str	r2, [r1, #0]
  4030e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4030ec:	009a      	lsls	r2, r3, #2
  4030ee:	4629      	mov	r1, r5
  4030f0:	4807      	ldr	r0, [pc, #28]	; (403110 <xTaskPriorityDisinherit+0xb8>)
  4030f2:	4410      	add	r0, r2
  4030f4:	4b08      	ldr	r3, [pc, #32]	; (403118 <xTaskPriorityDisinherit+0xc0>)
  4030f6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4030f8:	4620      	mov	r0, r4
  4030fa:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4030fc:	2000      	movs	r0, #0
  4030fe:	4770      	bx	lr
  403100:	2000      	movs	r0, #0
  403102:	bd38      	pop	{r3, r4, r5, pc}
  403104:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  403106:	bd38      	pop	{r3, r4, r5, pc}
  403108:	2040c2d0 	.word	0x2040c2d0
  40310c:	004017f5 	.word	0x004017f5
  403110:	2040c2dc 	.word	0x2040c2dc
  403114:	2040c354 	.word	0x2040c354
  403118:	004017a9 	.word	0x004017a9

0040311c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  40311c:	4b05      	ldr	r3, [pc, #20]	; (403134 <pvTaskIncrementMutexHeldCount+0x18>)
  40311e:	681b      	ldr	r3, [r3, #0]
  403120:	b123      	cbz	r3, 40312c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403122:	4b04      	ldr	r3, [pc, #16]	; (403134 <pvTaskIncrementMutexHeldCount+0x18>)
  403124:	681a      	ldr	r2, [r3, #0]
  403126:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403128:	3301      	adds	r3, #1
  40312a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  40312c:	4b01      	ldr	r3, [pc, #4]	; (403134 <pvTaskIncrementMutexHeldCount+0x18>)
  40312e:	6818      	ldr	r0, [r3, #0]
	}
  403130:	4770      	bx	lr
  403132:	bf00      	nop
  403134:	2040c2d0 	.word	0x2040c2d0

00403138 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403138:	4b06      	ldr	r3, [pc, #24]	; (403154 <prvGetNextExpireTime+0x1c>)
  40313a:	681a      	ldr	r2, [r3, #0]
  40313c:	6813      	ldr	r3, [r2, #0]
  40313e:	fab3 f383 	clz	r3, r3
  403142:	095b      	lsrs	r3, r3, #5
  403144:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
  403146:	b913      	cbnz	r3, 40314e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403148:	68d3      	ldr	r3, [r2, #12]
  40314a:	6818      	ldr	r0, [r3, #0]
  40314c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  40314e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
  403150:	4770      	bx	lr
  403152:	bf00      	nop
  403154:	2040c3d0 	.word	0x2040c3d0

00403158 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403158:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40315a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40315c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40315e:	4291      	cmp	r1, r2
  403160:	d80c      	bhi.n	40317c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403162:	1ad2      	subs	r2, r2, r3
  403164:	6983      	ldr	r3, [r0, #24]
  403166:	429a      	cmp	r2, r3
  403168:	d301      	bcc.n	40316e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40316a:	2001      	movs	r0, #1
  40316c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40316e:	1d01      	adds	r1, r0, #4
  403170:	4b0b      	ldr	r3, [pc, #44]	; (4031a0 <prvInsertTimerInActiveList+0x48>)
  403172:	6818      	ldr	r0, [r3, #0]
  403174:	4b0b      	ldr	r3, [pc, #44]	; (4031a4 <prvInsertTimerInActiveList+0x4c>)
  403176:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403178:	2000      	movs	r0, #0
  40317a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40317c:	429a      	cmp	r2, r3
  40317e:	bf2c      	ite	cs
  403180:	2200      	movcs	r2, #0
  403182:	2201      	movcc	r2, #1
  403184:	4299      	cmp	r1, r3
  403186:	bf38      	it	cc
  403188:	2200      	movcc	r2, #0
  40318a:	b10a      	cbz	r2, 403190 <prvInsertTimerInActiveList+0x38>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40318c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40318e:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403190:	1d01      	adds	r1, r0, #4
  403192:	4b05      	ldr	r3, [pc, #20]	; (4031a8 <prvInsertTimerInActiveList+0x50>)
  403194:	6818      	ldr	r0, [r3, #0]
  403196:	4b03      	ldr	r3, [pc, #12]	; (4031a4 <prvInsertTimerInActiveList+0x4c>)
  403198:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40319a:	2000      	movs	r0, #0
  40319c:	bd08      	pop	{r3, pc}
  40319e:	bf00      	nop
  4031a0:	2040c3d4 	.word	0x2040c3d4
  4031a4:	004017c1 	.word	0x004017c1
  4031a8:	2040c3d0 	.word	0x2040c3d0

004031ac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4031ac:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4031ae:	4b15      	ldr	r3, [pc, #84]	; (403204 <prvCheckForValidListAndQueue+0x58>)
  4031b0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4031b2:	4b15      	ldr	r3, [pc, #84]	; (403208 <prvCheckForValidListAndQueue+0x5c>)
  4031b4:	681b      	ldr	r3, [r3, #0]
  4031b6:	b113      	cbz	r3, 4031be <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4031b8:	4b14      	ldr	r3, [pc, #80]	; (40320c <prvCheckForValidListAndQueue+0x60>)
  4031ba:	4798      	blx	r3
  4031bc:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4031be:	4d14      	ldr	r5, [pc, #80]	; (403210 <prvCheckForValidListAndQueue+0x64>)
  4031c0:	4628      	mov	r0, r5
  4031c2:	4e14      	ldr	r6, [pc, #80]	; (403214 <prvCheckForValidListAndQueue+0x68>)
  4031c4:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4031c6:	4c14      	ldr	r4, [pc, #80]	; (403218 <prvCheckForValidListAndQueue+0x6c>)
  4031c8:	4620      	mov	r0, r4
  4031ca:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4031cc:	4b13      	ldr	r3, [pc, #76]	; (40321c <prvCheckForValidListAndQueue+0x70>)
  4031ce:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4031d0:	4b13      	ldr	r3, [pc, #76]	; (403220 <prvCheckForValidListAndQueue+0x74>)
  4031d2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4031d4:	2200      	movs	r2, #0
  4031d6:	2110      	movs	r1, #16
  4031d8:	2005      	movs	r0, #5
  4031da:	4b12      	ldr	r3, [pc, #72]	; (403224 <prvCheckForValidListAndQueue+0x78>)
  4031dc:	4798      	blx	r3
  4031de:	4b0a      	ldr	r3, [pc, #40]	; (403208 <prvCheckForValidListAndQueue+0x5c>)
  4031e0:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4031e2:	b118      	cbz	r0, 4031ec <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4031e4:	4910      	ldr	r1, [pc, #64]	; (403228 <prvCheckForValidListAndQueue+0x7c>)
  4031e6:	4b11      	ldr	r3, [pc, #68]	; (40322c <prvCheckForValidListAndQueue+0x80>)
  4031e8:	4798      	blx	r3
  4031ea:	e7e5      	b.n	4031b8 <prvCheckForValidListAndQueue+0xc>
  4031ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031f0:	b672      	cpsid	i
  4031f2:	f383 8811 	msr	BASEPRI, r3
  4031f6:	f3bf 8f6f 	isb	sy
  4031fa:	f3bf 8f4f 	dsb	sy
  4031fe:	b662      	cpsie	i
  403200:	e7fe      	b.n	403200 <prvCheckForValidListAndQueue+0x54>
  403202:	bf00      	nop
  403204:	004018d9 	.word	0x004018d9
  403208:	2040c404 	.word	0x2040c404
  40320c:	00401925 	.word	0x00401925
  403210:	2040c3d8 	.word	0x2040c3d8
  403214:	0040178d 	.word	0x0040178d
  403218:	2040c3ec 	.word	0x2040c3ec
  40321c:	2040c3d0 	.word	0x2040c3d0
  403220:	2040c3d4 	.word	0x2040c3d4
  403224:	00401e65 	.word	0x00401e65
  403228:	0042c144 	.word	0x0042c144
  40322c:	004024a1 	.word	0x004024a1

00403230 <xTimerCreateTimerTask>:
{
  403230:	b510      	push	{r4, lr}
  403232:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403234:	4b10      	ldr	r3, [pc, #64]	; (403278 <xTimerCreateTimerTask+0x48>)
  403236:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403238:	4b10      	ldr	r3, [pc, #64]	; (40327c <xTimerCreateTimerTask+0x4c>)
  40323a:	681b      	ldr	r3, [r3, #0]
  40323c:	b1bb      	cbz	r3, 40326e <xTimerCreateTimerTask+0x3e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40323e:	2300      	movs	r3, #0
  403240:	9303      	str	r3, [sp, #12]
  403242:	9302      	str	r3, [sp, #8]
  403244:	9301      	str	r3, [sp, #4]
  403246:	2204      	movs	r2, #4
  403248:	9200      	str	r2, [sp, #0]
  40324a:	f44f 7282 	mov.w	r2, #260	; 0x104
  40324e:	490c      	ldr	r1, [pc, #48]	; (403280 <xTimerCreateTimerTask+0x50>)
  403250:	480c      	ldr	r0, [pc, #48]	; (403284 <xTimerCreateTimerTask+0x54>)
  403252:	4c0d      	ldr	r4, [pc, #52]	; (403288 <xTimerCreateTimerTask+0x58>)
  403254:	47a0      	blx	r4
	configASSERT( xReturn );
  403256:	b960      	cbnz	r0, 403272 <xTimerCreateTimerTask+0x42>
  403258:	f04f 0380 	mov.w	r3, #128	; 0x80
  40325c:	b672      	cpsid	i
  40325e:	f383 8811 	msr	BASEPRI, r3
  403262:	f3bf 8f6f 	isb	sy
  403266:	f3bf 8f4f 	dsb	sy
  40326a:	b662      	cpsie	i
  40326c:	e7fe      	b.n	40326c <xTimerCreateTimerTask+0x3c>
BaseType_t xReturn = pdFAIL;
  40326e:	2000      	movs	r0, #0
  403270:	e7f1      	b.n	403256 <xTimerCreateTimerTask+0x26>
}
  403272:	b004      	add	sp, #16
  403274:	bd10      	pop	{r4, pc}
  403276:	bf00      	nop
  403278:	004031ad 	.word	0x004031ad
  40327c:	2040c404 	.word	0x2040c404
  403280:	0042c14c 	.word	0x0042c14c
  403284:	00403635 	.word	0x00403635
  403288:	004026bd 	.word	0x004026bd

0040328c <xTimerCreate>:
{
  40328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
  403290:	460d      	mov	r5, r1
  403292:	b1f9      	cbz	r1, 4032d4 <xTimerCreate+0x48>
  403294:	4680      	mov	r8, r0
  403296:	4617      	mov	r7, r2
  403298:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
  40329a:	202c      	movs	r0, #44	; 0x2c
  40329c:	4b10      	ldr	r3, [pc, #64]	; (4032e0 <xTimerCreate+0x54>)
  40329e:	4798      	blx	r3
		if( pxNewTimer != NULL )
  4032a0:	4604      	mov	r4, r0
  4032a2:	b158      	cbz	r0, 4032bc <xTimerCreate+0x30>
			prvCheckForValidListAndQueue();
  4032a4:	4b0f      	ldr	r3, [pc, #60]	; (4032e4 <xTimerCreate+0x58>)
  4032a6:	4798      	blx	r3
			pxNewTimer->pcTimerName = pcTimerName;
  4032a8:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  4032ac:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  4032ae:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  4032b0:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  4032b2:	9b06      	ldr	r3, [sp, #24]
  4032b4:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  4032b6:	1d20      	adds	r0, r4, #4
  4032b8:	4b0b      	ldr	r3, [pc, #44]	; (4032e8 <xTimerCreate+0x5c>)
  4032ba:	4798      	blx	r3
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
  4032bc:	b965      	cbnz	r5, 4032d8 <xTimerCreate+0x4c>
  4032be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032c2:	b672      	cpsid	i
  4032c4:	f383 8811 	msr	BASEPRI, r3
  4032c8:	f3bf 8f6f 	isb	sy
  4032cc:	f3bf 8f4f 	dsb	sy
  4032d0:	b662      	cpsie	i
  4032d2:	e7fe      	b.n	4032d2 <xTimerCreate+0x46>
		pxNewTimer = NULL;
  4032d4:	2400      	movs	r4, #0
  4032d6:	e7f1      	b.n	4032bc <xTimerCreate+0x30>
}
  4032d8:	4620      	mov	r0, r4
  4032da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4032de:	bf00      	nop
  4032e0:	00401b29 	.word	0x00401b29
  4032e4:	004031ad 	.word	0x004031ad
  4032e8:	004017a3 	.word	0x004017a3

004032ec <xTimerGenericCommand>:
	configASSERT( xTimer );
  4032ec:	b1c8      	cbz	r0, 403322 <xTimerGenericCommand+0x36>
{
  4032ee:	b530      	push	{r4, r5, lr}
  4032f0:	b085      	sub	sp, #20
  4032f2:	4615      	mov	r5, r2
  4032f4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4032f6:	4a18      	ldr	r2, [pc, #96]	; (403358 <xTimerGenericCommand+0x6c>)
  4032f8:	6810      	ldr	r0, [r2, #0]
  4032fa:	2800      	cmp	r0, #0
  4032fc:	d02a      	beq.n	403354 <xTimerGenericCommand+0x68>
  4032fe:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403300:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403302:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403304:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403306:	2905      	cmp	r1, #5
  403308:	dc1e      	bgt.n	403348 <xTimerGenericCommand+0x5c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40330a:	4b14      	ldr	r3, [pc, #80]	; (40335c <xTimerGenericCommand+0x70>)
  40330c:	4798      	blx	r3
  40330e:	2802      	cmp	r0, #2
  403310:	d012      	beq.n	403338 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403312:	2300      	movs	r3, #0
  403314:	461a      	mov	r2, r3
  403316:	4669      	mov	r1, sp
  403318:	480f      	ldr	r0, [pc, #60]	; (403358 <xTimerGenericCommand+0x6c>)
  40331a:	6800      	ldr	r0, [r0, #0]
  40331c:	4c10      	ldr	r4, [pc, #64]	; (403360 <xTimerGenericCommand+0x74>)
  40331e:	47a0      	blx	r4
  403320:	e016      	b.n	403350 <xTimerGenericCommand+0x64>
  403322:	f04f 0380 	mov.w	r3, #128	; 0x80
  403326:	b672      	cpsid	i
  403328:	f383 8811 	msr	BASEPRI, r3
  40332c:	f3bf 8f6f 	isb	sy
  403330:	f3bf 8f4f 	dsb	sy
  403334:	b662      	cpsie	i
  403336:	e7fe      	b.n	403336 <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403338:	2300      	movs	r3, #0
  40333a:	9a08      	ldr	r2, [sp, #32]
  40333c:	4669      	mov	r1, sp
  40333e:	4806      	ldr	r0, [pc, #24]	; (403358 <xTimerGenericCommand+0x6c>)
  403340:	6800      	ldr	r0, [r0, #0]
  403342:	4c07      	ldr	r4, [pc, #28]	; (403360 <xTimerGenericCommand+0x74>)
  403344:	47a0      	blx	r4
  403346:	e003      	b.n	403350 <xTimerGenericCommand+0x64>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403348:	2300      	movs	r3, #0
  40334a:	4669      	mov	r1, sp
  40334c:	4c05      	ldr	r4, [pc, #20]	; (403364 <xTimerGenericCommand+0x78>)
  40334e:	47a0      	blx	r4
}
  403350:	b005      	add	sp, #20
  403352:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
  403354:	2000      	movs	r0, #0
	return xReturn;
  403356:	e7fb      	b.n	403350 <xTimerGenericCommand+0x64>
  403358:	2040c404 	.word	0x2040c404
  40335c:	00402f8d 	.word	0x00402f8d
  403360:	00401ee5 	.word	0x00401ee5
  403364:	004020c9 	.word	0x004020c9

00403368 <prvSwitchTimerLists>:
{
  403368:	b570      	push	{r4, r5, r6, lr}
  40336a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40336c:	4b1c      	ldr	r3, [pc, #112]	; (4033e0 <prvSwitchTimerLists+0x78>)
  40336e:	681b      	ldr	r3, [r3, #0]
  403370:	681a      	ldr	r2, [r3, #0]
  403372:	2a00      	cmp	r2, #0
  403374:	d02c      	beq.n	4033d0 <prvSwitchTimerLists+0x68>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403376:	68db      	ldr	r3, [r3, #12]
  403378:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40337a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40337c:	1d25      	adds	r5, r4, #4
  40337e:	4628      	mov	r0, r5
  403380:	4b18      	ldr	r3, [pc, #96]	; (4033e4 <prvSwitchTimerLists+0x7c>)
  403382:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403384:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403386:	4620      	mov	r0, r4
  403388:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40338a:	69e3      	ldr	r3, [r4, #28]
  40338c:	2b01      	cmp	r3, #1
  40338e:	d1ed      	bne.n	40336c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403390:	69a3      	ldr	r3, [r4, #24]
  403392:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
  403394:	429e      	cmp	r6, r3
  403396:	d207      	bcs.n	4033a8 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403398:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40339a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40339c:	4629      	mov	r1, r5
  40339e:	4b10      	ldr	r3, [pc, #64]	; (4033e0 <prvSwitchTimerLists+0x78>)
  4033a0:	6818      	ldr	r0, [r3, #0]
  4033a2:	4b11      	ldr	r3, [pc, #68]	; (4033e8 <prvSwitchTimerLists+0x80>)
  4033a4:	4798      	blx	r3
  4033a6:	e7e1      	b.n	40336c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4033a8:	2100      	movs	r1, #0
  4033aa:	9100      	str	r1, [sp, #0]
  4033ac:	460b      	mov	r3, r1
  4033ae:	4632      	mov	r2, r6
  4033b0:	4620      	mov	r0, r4
  4033b2:	4c0e      	ldr	r4, [pc, #56]	; (4033ec <prvSwitchTimerLists+0x84>)
  4033b4:	47a0      	blx	r4
				configASSERT( xResult );
  4033b6:	2800      	cmp	r0, #0
  4033b8:	d1d8      	bne.n	40336c <prvSwitchTimerLists+0x4>
  4033ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033be:	b672      	cpsid	i
  4033c0:	f383 8811 	msr	BASEPRI, r3
  4033c4:	f3bf 8f6f 	isb	sy
  4033c8:	f3bf 8f4f 	dsb	sy
  4033cc:	b662      	cpsie	i
  4033ce:	e7fe      	b.n	4033ce <prvSwitchTimerLists+0x66>
	pxCurrentTimerList = pxOverflowTimerList;
  4033d0:	4a07      	ldr	r2, [pc, #28]	; (4033f0 <prvSwitchTimerLists+0x88>)
  4033d2:	6810      	ldr	r0, [r2, #0]
  4033d4:	4902      	ldr	r1, [pc, #8]	; (4033e0 <prvSwitchTimerLists+0x78>)
  4033d6:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4033d8:	6013      	str	r3, [r2, #0]
}
  4033da:	b002      	add	sp, #8
  4033dc:	bd70      	pop	{r4, r5, r6, pc}
  4033de:	bf00      	nop
  4033e0:	2040c3d0 	.word	0x2040c3d0
  4033e4:	004017f5 	.word	0x004017f5
  4033e8:	004017c1 	.word	0x004017c1
  4033ec:	004032ed 	.word	0x004032ed
  4033f0:	2040c3d4 	.word	0x2040c3d4

004033f4 <prvSampleTimeNow>:
{
  4033f4:	b538      	push	{r3, r4, r5, lr}
  4033f6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
  4033f8:	4b08      	ldr	r3, [pc, #32]	; (40341c <prvSampleTimeNow+0x28>)
  4033fa:	4798      	blx	r3
  4033fc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
  4033fe:	4b08      	ldr	r3, [pc, #32]	; (403420 <prvSampleTimeNow+0x2c>)
  403400:	681b      	ldr	r3, [r3, #0]
  403402:	4298      	cmp	r0, r3
  403404:	d305      	bcc.n	403412 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
  403406:	2300      	movs	r3, #0
  403408:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
  40340a:	4b05      	ldr	r3, [pc, #20]	; (403420 <prvSampleTimeNow+0x2c>)
  40340c:	601c      	str	r4, [r3, #0]
}
  40340e:	4620      	mov	r0, r4
  403410:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
  403412:	4b04      	ldr	r3, [pc, #16]	; (403424 <prvSampleTimeNow+0x30>)
  403414:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  403416:	2301      	movs	r3, #1
  403418:	602b      	str	r3, [r5, #0]
  40341a:	e7f6      	b.n	40340a <prvSampleTimeNow+0x16>
  40341c:	004028b5 	.word	0x004028b5
  403420:	2040c400 	.word	0x2040c400
  403424:	00403369 	.word	0x00403369

00403428 <prvProcessExpiredTimer>:
{
  403428:	b570      	push	{r4, r5, r6, lr}
  40342a:	b082      	sub	sp, #8
  40342c:	4605      	mov	r5, r0
  40342e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403430:	4b15      	ldr	r3, [pc, #84]	; (403488 <prvProcessExpiredTimer+0x60>)
  403432:	681b      	ldr	r3, [r3, #0]
  403434:	68db      	ldr	r3, [r3, #12]
  403436:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403438:	1d20      	adds	r0, r4, #4
  40343a:	4b14      	ldr	r3, [pc, #80]	; (40348c <prvProcessExpiredTimer+0x64>)
  40343c:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40343e:	69e3      	ldr	r3, [r4, #28]
  403440:	2b01      	cmp	r3, #1
  403442:	d004      	beq.n	40344e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403444:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403446:	4620      	mov	r0, r4
  403448:	4798      	blx	r3
}
  40344a:	b002      	add	sp, #8
  40344c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40344e:	69a1      	ldr	r1, [r4, #24]
  403450:	462b      	mov	r3, r5
  403452:	4632      	mov	r2, r6
  403454:	4429      	add	r1, r5
  403456:	4620      	mov	r0, r4
  403458:	4e0d      	ldr	r6, [pc, #52]	; (403490 <prvProcessExpiredTimer+0x68>)
  40345a:	47b0      	blx	r6
  40345c:	2801      	cmp	r0, #1
  40345e:	d1f1      	bne.n	403444 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403460:	2100      	movs	r1, #0
  403462:	9100      	str	r1, [sp, #0]
  403464:	460b      	mov	r3, r1
  403466:	462a      	mov	r2, r5
  403468:	4620      	mov	r0, r4
  40346a:	4d0a      	ldr	r5, [pc, #40]	; (403494 <prvProcessExpiredTimer+0x6c>)
  40346c:	47a8      	blx	r5
			configASSERT( xResult );
  40346e:	2800      	cmp	r0, #0
  403470:	d1e8      	bne.n	403444 <prvProcessExpiredTimer+0x1c>
  403472:	f04f 0380 	mov.w	r3, #128	; 0x80
  403476:	b672      	cpsid	i
  403478:	f383 8811 	msr	BASEPRI, r3
  40347c:	f3bf 8f6f 	isb	sy
  403480:	f3bf 8f4f 	dsb	sy
  403484:	b662      	cpsie	i
  403486:	e7fe      	b.n	403486 <prvProcessExpiredTimer+0x5e>
  403488:	2040c3d0 	.word	0x2040c3d0
  40348c:	004017f5 	.word	0x004017f5
  403490:	00403159 	.word	0x00403159
  403494:	004032ed 	.word	0x004032ed

00403498 <prvProcessTimerOrBlockTask>:
{
  403498:	b570      	push	{r4, r5, r6, lr}
  40349a:	b082      	sub	sp, #8
  40349c:	4606      	mov	r6, r0
  40349e:	460c      	mov	r4, r1
	vTaskSuspendAll();
  4034a0:	4b17      	ldr	r3, [pc, #92]	; (403500 <prvProcessTimerOrBlockTask+0x68>)
  4034a2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4034a4:	a801      	add	r0, sp, #4
  4034a6:	4b17      	ldr	r3, [pc, #92]	; (403504 <prvProcessTimerOrBlockTask+0x6c>)
  4034a8:	4798      	blx	r3
		if( xTimerListsWereSwitched == pdFALSE )
  4034aa:	9b01      	ldr	r3, [sp, #4]
  4034ac:	bb23      	cbnz	r3, 4034f8 <prvProcessTimerOrBlockTask+0x60>
  4034ae:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4034b0:	42b0      	cmp	r0, r6
  4034b2:	bf28      	it	cs
  4034b4:	2c00      	cmpcs	r4, #0
  4034b6:	d018      	beq.n	4034ea <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
  4034b8:	b12c      	cbz	r4, 4034c6 <prvProcessTimerOrBlockTask+0x2e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4034ba:	4b13      	ldr	r3, [pc, #76]	; (403508 <prvProcessTimerOrBlockTask+0x70>)
  4034bc:	681b      	ldr	r3, [r3, #0]
  4034be:	681c      	ldr	r4, [r3, #0]
  4034c0:	fab4 f484 	clz	r4, r4
  4034c4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4034c6:	4622      	mov	r2, r4
  4034c8:	1b71      	subs	r1, r6, r5
  4034ca:	4b10      	ldr	r3, [pc, #64]	; (40350c <prvProcessTimerOrBlockTask+0x74>)
  4034cc:	6818      	ldr	r0, [r3, #0]
  4034ce:	4b10      	ldr	r3, [pc, #64]	; (403510 <prvProcessTimerOrBlockTask+0x78>)
  4034d0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4034d2:	4b10      	ldr	r3, [pc, #64]	; (403514 <prvProcessTimerOrBlockTask+0x7c>)
  4034d4:	4798      	blx	r3
  4034d6:	b988      	cbnz	r0, 4034fc <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
  4034d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4034dc:	4b0e      	ldr	r3, [pc, #56]	; (403518 <prvProcessTimerOrBlockTask+0x80>)
  4034de:	601a      	str	r2, [r3, #0]
  4034e0:	f3bf 8f4f 	dsb	sy
  4034e4:	f3bf 8f6f 	isb	sy
  4034e8:	e008      	b.n	4034fc <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
  4034ea:	4b0a      	ldr	r3, [pc, #40]	; (403514 <prvProcessTimerOrBlockTask+0x7c>)
  4034ec:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  4034ee:	4629      	mov	r1, r5
  4034f0:	4630      	mov	r0, r6
  4034f2:	4b0a      	ldr	r3, [pc, #40]	; (40351c <prvProcessTimerOrBlockTask+0x84>)
  4034f4:	4798      	blx	r3
  4034f6:	e001      	b.n	4034fc <prvProcessTimerOrBlockTask+0x64>
			( void ) xTaskResumeAll();
  4034f8:	4b06      	ldr	r3, [pc, #24]	; (403514 <prvProcessTimerOrBlockTask+0x7c>)
  4034fa:	4798      	blx	r3
}
  4034fc:	b002      	add	sp, #8
  4034fe:	bd70      	pop	{r4, r5, r6, pc}
  403500:	004028a5 	.word	0x004028a5
  403504:	004033f5 	.word	0x004033f5
  403508:	2040c3d4 	.word	0x2040c3d4
  40350c:	2040c404 	.word	0x2040c404
  403510:	004024c9 	.word	0x004024c9
  403514:	00402a05 	.word	0x00402a05
  403518:	e000ed04 	.word	0xe000ed04
  40351c:	00403429 	.word	0x00403429

00403520 <prvProcessReceivedCommands>:
{
  403520:	b530      	push	{r4, r5, lr}
  403522:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403524:	e002      	b.n	40352c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403526:	9b04      	ldr	r3, [sp, #16]
  403528:	2b00      	cmp	r3, #0
  40352a:	da10      	bge.n	40354e <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40352c:	2300      	movs	r3, #0
  40352e:	461a      	mov	r2, r3
  403530:	a904      	add	r1, sp, #16
  403532:	4839      	ldr	r0, [pc, #228]	; (403618 <prvProcessReceivedCommands+0xf8>)
  403534:	6800      	ldr	r0, [r0, #0]
  403536:	4c39      	ldr	r4, [pc, #228]	; (40361c <prvProcessReceivedCommands+0xfc>)
  403538:	47a0      	blx	r4
  40353a:	2800      	cmp	r0, #0
  40353c:	d069      	beq.n	403612 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40353e:	9b04      	ldr	r3, [sp, #16]
  403540:	2b00      	cmp	r3, #0
  403542:	daf0      	bge.n	403526 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403544:	9907      	ldr	r1, [sp, #28]
  403546:	9806      	ldr	r0, [sp, #24]
  403548:	9b05      	ldr	r3, [sp, #20]
  40354a:	4798      	blx	r3
  40354c:	e7eb      	b.n	403526 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40354e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403550:	6963      	ldr	r3, [r4, #20]
  403552:	b113      	cbz	r3, 40355a <prvProcessReceivedCommands+0x3a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403554:	1d20      	adds	r0, r4, #4
  403556:	4b32      	ldr	r3, [pc, #200]	; (403620 <prvProcessReceivedCommands+0x100>)
  403558:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40355a:	a803      	add	r0, sp, #12
  40355c:	4b31      	ldr	r3, [pc, #196]	; (403624 <prvProcessReceivedCommands+0x104>)
  40355e:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403560:	9b04      	ldr	r3, [sp, #16]
  403562:	2b09      	cmp	r3, #9
  403564:	d8e2      	bhi.n	40352c <prvProcessReceivedCommands+0xc>
  403566:	a201      	add	r2, pc, #4	; (adr r2, 40356c <prvProcessReceivedCommands+0x4c>)
  403568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40356c:	00403595 	.word	0x00403595
  403570:	00403595 	.word	0x00403595
  403574:	00403595 	.word	0x00403595
  403578:	0040352d 	.word	0x0040352d
  40357c:	004035e1 	.word	0x004035e1
  403580:	0040360b 	.word	0x0040360b
  403584:	00403595 	.word	0x00403595
  403588:	00403595 	.word	0x00403595
  40358c:	0040352d 	.word	0x0040352d
  403590:	004035e1 	.word	0x004035e1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403594:	9905      	ldr	r1, [sp, #20]
  403596:	69a5      	ldr	r5, [r4, #24]
  403598:	460b      	mov	r3, r1
  40359a:	4602      	mov	r2, r0
  40359c:	4429      	add	r1, r5
  40359e:	4620      	mov	r0, r4
  4035a0:	4d21      	ldr	r5, [pc, #132]	; (403628 <prvProcessReceivedCommands+0x108>)
  4035a2:	47a8      	blx	r5
  4035a4:	2801      	cmp	r0, #1
  4035a6:	d1c1      	bne.n	40352c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4035a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4035aa:	4620      	mov	r0, r4
  4035ac:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4035ae:	69e3      	ldr	r3, [r4, #28]
  4035b0:	2b01      	cmp	r3, #1
  4035b2:	d1bb      	bne.n	40352c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4035b4:	69a2      	ldr	r2, [r4, #24]
  4035b6:	2100      	movs	r1, #0
  4035b8:	9100      	str	r1, [sp, #0]
  4035ba:	460b      	mov	r3, r1
  4035bc:	9805      	ldr	r0, [sp, #20]
  4035be:	4402      	add	r2, r0
  4035c0:	4620      	mov	r0, r4
  4035c2:	4c1a      	ldr	r4, [pc, #104]	; (40362c <prvProcessReceivedCommands+0x10c>)
  4035c4:	47a0      	blx	r4
							configASSERT( xResult );
  4035c6:	2800      	cmp	r0, #0
  4035c8:	d1b0      	bne.n	40352c <prvProcessReceivedCommands+0xc>
  4035ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035ce:	b672      	cpsid	i
  4035d0:	f383 8811 	msr	BASEPRI, r3
  4035d4:	f3bf 8f6f 	isb	sy
  4035d8:	f3bf 8f4f 	dsb	sy
  4035dc:	b662      	cpsie	i
  4035de:	e7fe      	b.n	4035de <prvProcessReceivedCommands+0xbe>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4035e0:	9905      	ldr	r1, [sp, #20]
  4035e2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4035e4:	b131      	cbz	r1, 4035f4 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4035e6:	4603      	mov	r3, r0
  4035e8:	4602      	mov	r2, r0
  4035ea:	4401      	add	r1, r0
  4035ec:	4620      	mov	r0, r4
  4035ee:	4c0e      	ldr	r4, [pc, #56]	; (403628 <prvProcessReceivedCommands+0x108>)
  4035f0:	47a0      	blx	r4
					break;
  4035f2:	e79b      	b.n	40352c <prvProcessReceivedCommands+0xc>
  4035f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035f8:	b672      	cpsid	i
  4035fa:	f383 8811 	msr	BASEPRI, r3
  4035fe:	f3bf 8f6f 	isb	sy
  403602:	f3bf 8f4f 	dsb	sy
  403606:	b662      	cpsie	i
  403608:	e7fe      	b.n	403608 <prvProcessReceivedCommands+0xe8>
					vPortFree( pxTimer );
  40360a:	4620      	mov	r0, r4
  40360c:	4b08      	ldr	r3, [pc, #32]	; (403630 <prvProcessReceivedCommands+0x110>)
  40360e:	4798      	blx	r3
					break;
  403610:	e78c      	b.n	40352c <prvProcessReceivedCommands+0xc>
}
  403612:	b009      	add	sp, #36	; 0x24
  403614:	bd30      	pop	{r4, r5, pc}
  403616:	bf00      	nop
  403618:	2040c404 	.word	0x2040c404
  40361c:	004022cd 	.word	0x004022cd
  403620:	004017f5 	.word	0x004017f5
  403624:	004033f5 	.word	0x004033f5
  403628:	00403159 	.word	0x00403159
  40362c:	004032ed 	.word	0x004032ed
  403630:	00401b9d 	.word	0x00401b9d

00403634 <prvTimerTask>:
{
  403634:	b500      	push	{lr}
  403636:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  403638:	a801      	add	r0, sp, #4
  40363a:	4b04      	ldr	r3, [pc, #16]	; (40364c <prvTimerTask+0x18>)
  40363c:	4798      	blx	r3
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  40363e:	9901      	ldr	r1, [sp, #4]
  403640:	4b03      	ldr	r3, [pc, #12]	; (403650 <prvTimerTask+0x1c>)
  403642:	4798      	blx	r3
		prvProcessReceivedCommands();
  403644:	4b03      	ldr	r3, [pc, #12]	; (403654 <prvTimerTask+0x20>)
  403646:	4798      	blx	r3
  403648:	e7f6      	b.n	403638 <prvTimerTask+0x4>
  40364a:	bf00      	nop
  40364c:	00403139 	.word	0x00403139
  403650:	00403499 	.word	0x00403499
  403654:	00403521 	.word	0x00403521

00403658 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
  403658:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  40365a:	4603      	mov	r3, r0
  40365c:	b110      	cbz	r0, 403664 <lv_disp_get_scr_act+0xc>
    if(!disp) {
  40365e:	b12b      	cbz	r3, 40366c <lv_disp_get_scr_act+0x14>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
  403660:	6c58      	ldr	r0, [r3, #68]	; 0x44
  403662:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403664:	4b02      	ldr	r3, [pc, #8]	; (403670 <lv_disp_get_scr_act+0x18>)
  403666:	4798      	blx	r3
  403668:	4603      	mov	r3, r0
  40366a:	e7f8      	b.n	40365e <lv_disp_get_scr_act+0x6>
        return NULL;
  40366c:	2000      	movs	r0, #0
}
  40366e:	bd08      	pop	{r3, pc}
  403670:	00414ce5 	.word	0x00414ce5

00403674 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
  403674:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403676:	4603      	mov	r3, r0
  403678:	b110      	cbz	r0, 403680 <lv_disp_get_scr_prev+0xc>
    if(!disp) {
  40367a:	b12b      	cbz	r3, 403688 <lv_disp_get_scr_prev+0x14>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
  40367c:	6c98      	ldr	r0, [r3, #72]	; 0x48
  40367e:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403680:	4b02      	ldr	r3, [pc, #8]	; (40368c <lv_disp_get_scr_prev+0x18>)
  403682:	4798      	blx	r3
  403684:	4603      	mov	r3, r0
  403686:	e7f8      	b.n	40367a <lv_disp_get_scr_prev+0x6>
        return NULL;
  403688:	2000      	movs	r0, #0
}
  40368a:	bd08      	pop	{r3, pc}
  40368c:	00414ce5 	.word	0x00414ce5

00403690 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
  403690:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403692:	4603      	mov	r3, r0
  403694:	b110      	cbz	r0, 40369c <lv_disp_get_layer_top+0xc>
    if(!disp) {
  403696:	b12b      	cbz	r3, 4036a4 <lv_disp_get_layer_top+0x14>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
  403698:	6d18      	ldr	r0, [r3, #80]	; 0x50
  40369a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  40369c:	4b02      	ldr	r3, [pc, #8]	; (4036a8 <lv_disp_get_layer_top+0x18>)
  40369e:	4798      	blx	r3
  4036a0:	4603      	mov	r3, r0
  4036a2:	e7f8      	b.n	403696 <lv_disp_get_layer_top+0x6>
        return NULL;
  4036a4:	2000      	movs	r0, #0
}
  4036a6:	bd08      	pop	{r3, pc}
  4036a8:	00414ce5 	.word	0x00414ce5

004036ac <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
  4036ac:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  4036ae:	4603      	mov	r3, r0
  4036b0:	b110      	cbz	r0, 4036b8 <lv_disp_get_layer_sys+0xc>
    if(!disp) {
  4036b2:	b12b      	cbz	r3, 4036c0 <lv_disp_get_layer_sys+0x14>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
  4036b4:	6d58      	ldr	r0, [r3, #84]	; 0x54
  4036b6:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  4036b8:	4b02      	ldr	r3, [pc, #8]	; (4036c4 <lv_disp_get_layer_sys+0x18>)
  4036ba:	4798      	blx	r3
  4036bc:	4603      	mov	r3, r0
  4036be:	e7f8      	b.n	4036b2 <lv_disp_get_layer_sys+0x6>
        return NULL;
  4036c0:	2000      	movs	r0, #0
}
  4036c2:	bd08      	pop	{r3, pc}
  4036c4:	00414ce5 	.word	0x00414ce5

004036c8 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
  4036c8:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
  4036ca:	2400      	movs	r4, #0
    while(i != NULL) {
  4036cc:	e001      	b.n	4036d2 <obj_to_foreground+0xa>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
  4036ce:	4b07      	ldr	r3, [pc, #28]	; (4036ec <obj_to_foreground+0x24>)
  4036d0:	4798      	blx	r3
    while(i != NULL) {
  4036d2:	b130      	cbz	r0, 4036e2 <obj_to_foreground+0x1a>
        if(i->top != 0) last_top = i;
  4036d4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  4036d8:	f013 0f20 	tst.w	r3, #32
  4036dc:	d0f7      	beq.n	4036ce <obj_to_foreground+0x6>
  4036de:	4604      	mov	r4, r0
  4036e0:	e7f5      	b.n	4036ce <obj_to_foreground+0x6>
    }

    if(last_top != NULL) {
  4036e2:	b114      	cbz	r4, 4036ea <obj_to_foreground+0x22>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
  4036e4:	4620      	mov	r0, r4
  4036e6:	4b02      	ldr	r3, [pc, #8]	; (4036f0 <obj_to_foreground+0x28>)
  4036e8:	4798      	blx	r3
  4036ea:	bd10      	pop	{r4, pc}
  4036ec:	004059ad 	.word	0x004059ad
  4036f0:	00405fd5 	.word	0x00405fd5

004036f4 <focus_next_core>:
{
  4036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(group->frozen) return;
  4036f8:	7d03      	ldrb	r3, [r0, #20]
  4036fa:	f013 0f01 	tst.w	r3, #1
  4036fe:	d15f      	bne.n	4037c0 <focus_next_core+0xcc>
  403700:	4690      	mov	r8, r2
  403702:	4689      	mov	r9, r1
  403704:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
  403706:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
  403708:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
  40370a:	2500      	movs	r5, #0
        if(obj_next == NULL) {
  40370c:	2c00      	cmp	r4, #0
  40370e:	d042      	beq.n	403796 <focus_next_core+0xa2>
  403710:	2301      	movs	r3, #1
        if(obj_sentinel == NULL) {
  403712:	2d00      	cmp	r5, #0
  403714:	d04b      	beq.n	4037ae <focus_next_core+0xba>
        if(can_move) {
  403716:	2b00      	cmp	r3, #0
  403718:	d14c      	bne.n	4037b4 <focus_next_core+0xc0>
        if(obj_next == NULL) continue;
  40371a:	2c00      	cmp	r4, #0
  40371c:	d0f6      	beq.n	40370c <focus_next_core+0x18>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
  40371e:	2100      	movs	r1, #0
  403720:	6820      	ldr	r0, [r4, #0]
  403722:	4b28      	ldr	r3, [pc, #160]	; (4037c4 <focus_next_core+0xd0>)
  403724:	4798      	blx	r3
  403726:	f010 0f20 	tst.w	r0, #32
  40372a:	d1ef      	bne.n	40370c <focus_next_core+0x18>
        if(!lv_obj_get_hidden(*obj_next)) break;
  40372c:	6820      	ldr	r0, [r4, #0]
  40372e:	4b26      	ldr	r3, [pc, #152]	; (4037c8 <focus_next_core+0xd4>)
  403730:	4798      	blx	r3
  403732:	2800      	cmp	r0, #0
  403734:	d1ea      	bne.n	40370c <focus_next_core+0x18>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
  403736:	68f3      	ldr	r3, [r6, #12]
  403738:	429c      	cmp	r4, r3
  40373a:	d041      	beq.n	4037c0 <focus_next_core+0xcc>
    if(group->obj_focus) {
  40373c:	b183      	cbz	r3, 403760 <focus_next_core+0x6c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  40373e:	6818      	ldr	r0, [r3, #0]
  403740:	69c3      	ldr	r3, [r0, #28]
  403742:	2200      	movs	r2, #0
  403744:	2117      	movs	r1, #23
  403746:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  403748:	68f3      	ldr	r3, [r6, #12]
  40374a:	2200      	movs	r2, #0
  40374c:	210e      	movs	r1, #14
  40374e:	6818      	ldr	r0, [r3, #0]
  403750:	4b1e      	ldr	r3, [pc, #120]	; (4037cc <focus_next_core+0xd8>)
  403752:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  403754:	2801      	cmp	r0, #1
  403756:	d133      	bne.n	4037c0 <focus_next_core+0xcc>
        lv_obj_invalidate(*group->obj_focus);
  403758:	68f3      	ldr	r3, [r6, #12]
  40375a:	6818      	ldr	r0, [r3, #0]
  40375c:	4b1c      	ldr	r3, [pc, #112]	; (4037d0 <focus_next_core+0xdc>)
  40375e:	4798      	blx	r3
    group->obj_focus = obj_next;
  403760:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403762:	6820      	ldr	r0, [r4, #0]
  403764:	69c3      	ldr	r3, [r0, #28]
  403766:	2200      	movs	r2, #0
  403768:	2116      	movs	r1, #22
  40376a:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  40376c:	68f3      	ldr	r3, [r6, #12]
  40376e:	2200      	movs	r2, #0
  403770:	210d      	movs	r1, #13
  403772:	6818      	ldr	r0, [r3, #0]
  403774:	4b15      	ldr	r3, [pc, #84]	; (4037cc <focus_next_core+0xd8>)
  403776:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  403778:	2801      	cmp	r0, #1
  40377a:	d121      	bne.n	4037c0 <focus_next_core+0xcc>
    obj_to_foreground(*group->obj_focus);
  40377c:	68f3      	ldr	r3, [r6, #12]
  40377e:	6818      	ldr	r0, [r3, #0]
  403780:	4b14      	ldr	r3, [pc, #80]	; (4037d4 <focus_next_core+0xe0>)
  403782:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
  403784:	68f3      	ldr	r3, [r6, #12]
  403786:	6818      	ldr	r0, [r3, #0]
  403788:	4b11      	ldr	r3, [pc, #68]	; (4037d0 <focus_next_core+0xdc>)
  40378a:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
  40378c:	6933      	ldr	r3, [r6, #16]
  40378e:	b1bb      	cbz	r3, 4037c0 <focus_next_core+0xcc>
  403790:	4630      	mov	r0, r6
  403792:	4798      	blx	r3
  403794:	e014      	b.n	4037c0 <focus_next_core+0xcc>
            if(group->wrap || obj_sentinel == NULL) {
  403796:	7d33      	ldrb	r3, [r6, #20]
  403798:	f013 0f10 	tst.w	r3, #16
  40379c:	d100      	bne.n	4037a0 <focus_next_core+0xac>
  40379e:	b97d      	cbnz	r5, 4037c0 <focus_next_core+0xcc>
                if(!can_begin) return;
  4037a0:	b177      	cbz	r7, 4037c0 <focus_next_core+0xcc>
                obj_next  = begin(&group->obj_ll);
  4037a2:	4630      	mov	r0, r6
  4037a4:	47c8      	blx	r9
  4037a6:	4604      	mov	r4, r0
                can_begin = false;
  4037a8:	2700      	movs	r7, #0
                can_move  = false;
  4037aa:	463b      	mov	r3, r7
                can_begin = false;
  4037ac:	e7b1      	b.n	403712 <focus_next_core+0x1e>
            if(obj_sentinel == NULL) return; /*Group is empty*/
  4037ae:	b13c      	cbz	r4, 4037c0 <focus_next_core+0xcc>
            obj_sentinel = obj_next;
  4037b0:	4625      	mov	r5, r4
  4037b2:	e7b0      	b.n	403716 <focus_next_core+0x22>
            obj_next = move(&group->obj_ll, obj_next);
  4037b4:	4621      	mov	r1, r4
  4037b6:	4630      	mov	r0, r6
  4037b8:	47c0      	blx	r8
  4037ba:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
  4037bc:	4285      	cmp	r5, r0
  4037be:	d1ac      	bne.n	40371a <focus_next_core+0x26>
  4037c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4037c4:	00406de1 	.word	0x00406de1
  4037c8:	00405dc9 	.word	0x00405dc9
  4037cc:	0040589d 	.word	0x0040589d
  4037d0:	00405f59 	.word	0x00405f59
  4037d4:	004036c9 	.word	0x004036c9

004037d8 <_lv_group_init>:
{
  4037d8:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
  4037da:	2118      	movs	r1, #24
  4037dc:	4801      	ldr	r0, [pc, #4]	; (4037e4 <_lv_group_init+0xc>)
  4037de:	4b02      	ldr	r3, [pc, #8]	; (4037e8 <_lv_group_init+0x10>)
  4037e0:	4798      	blx	r3
  4037e2:	bd08      	pop	{r3, pc}
  4037e4:	2043a3c0 	.word	0x2043a3c0
  4037e8:	004160df 	.word	0x004160df

004037ec <lv_group_focus_next>:
{
  4037ec:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
  4037ee:	4a02      	ldr	r2, [pc, #8]	; (4037f8 <lv_group_focus_next+0xc>)
  4037f0:	4902      	ldr	r1, [pc, #8]	; (4037fc <lv_group_focus_next+0x10>)
  4037f2:	4b03      	ldr	r3, [pc, #12]	; (403800 <lv_group_focus_next+0x14>)
  4037f4:	4798      	blx	r3
  4037f6:	bd08      	pop	{r3, pc}
  4037f8:	0041619d 	.word	0x0041619d
  4037fc:	00416189 	.word	0x00416189
  403800:	004036f5 	.word	0x004036f5

00403804 <lv_group_focus_prev>:
{
  403804:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
  403806:	4a02      	ldr	r2, [pc, #8]	; (403810 <lv_group_focus_prev+0xc>)
  403808:	4902      	ldr	r1, [pc, #8]	; (403814 <lv_group_focus_prev+0x10>)
  40380a:	4b03      	ldr	r3, [pc, #12]	; (403818 <lv_group_focus_prev+0x14>)
  40380c:	4798      	blx	r3
  40380e:	bd08      	pop	{r3, pc}
  403810:	004161ab 	.word	0x004161ab
  403814:	00416193 	.word	0x00416193
  403818:	004036f5 	.word	0x004036f5

0040381c <lv_group_refocus>:
{
  40381c:	b538      	push	{r3, r4, r5, lr}
  40381e:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
  403820:	7d03      	ldrb	r3, [r0, #20]
  403822:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
  403826:	f043 0310 	orr.w	r3, r3, #16
  40382a:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
  40382c:	f013 0f08 	tst.w	r3, #8
  403830:	d006      	beq.n	403840 <lv_group_refocus+0x24>
        lv_group_focus_prev(g);
  403832:	4b05      	ldr	r3, [pc, #20]	; (403848 <lv_group_refocus+0x2c>)
  403834:	4798      	blx	r3
    g->wrap = temp_wrap;
  403836:	7d23      	ldrb	r3, [r4, #20]
  403838:	f365 1304 	bfi	r3, r5, #4, #1
  40383c:	7523      	strb	r3, [r4, #20]
  40383e:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_next(g);
  403840:	4b02      	ldr	r3, [pc, #8]	; (40384c <lv_group_refocus+0x30>)
  403842:	4798      	blx	r3
  403844:	e7f7      	b.n	403836 <lv_group_refocus+0x1a>
  403846:	bf00      	nop
  403848:	00403805 	.word	0x00403805
  40384c:	004037ed 	.word	0x004037ed

00403850 <lv_group_add_obj>:
    if(group == NULL) return;
  403850:	2800      	cmp	r0, #0
  403852:	d031      	beq.n	4038b8 <lv_group_add_obj+0x68>
{
  403854:	b570      	push	{r4, r5, r6, lr}
  403856:	4605      	mov	r5, r0
  403858:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
  40385a:	4606      	mov	r6, r0
  40385c:	4b17      	ldr	r3, [pc, #92]	; (4038bc <lv_group_add_obj+0x6c>)
  40385e:	4798      	blx	r3
  403860:	b138      	cbz	r0, 403872 <lv_group_add_obj+0x22>
        if((*obj_i) == obj) {
  403862:	6803      	ldr	r3, [r0, #0]
  403864:	42a3      	cmp	r3, r4
  403866:	d01c      	beq.n	4038a2 <lv_group_add_obj+0x52>
    _LV_LL_READ(group->obj_ll, obj_i) {
  403868:	4601      	mov	r1, r0
  40386a:	4630      	mov	r0, r6
  40386c:	4b14      	ldr	r3, [pc, #80]	; (4038c0 <lv_group_add_obj+0x70>)
  40386e:	4798      	blx	r3
  403870:	e7f6      	b.n	403860 <lv_group_add_obj+0x10>
    if(obj->group_p) {
  403872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403874:	b133      	cbz	r3, 403884 <lv_group_add_obj+0x34>
        if(lv_obj_is_focused(obj)) {
  403876:	4620      	mov	r0, r4
  403878:	4b12      	ldr	r3, [pc, #72]	; (4038c4 <lv_group_add_obj+0x74>)
  40387a:	4798      	blx	r3
  40387c:	b110      	cbz	r0, 403884 <lv_group_add_obj+0x34>
            lv_group_refocus(obj->group_p);
  40387e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  403880:	4b11      	ldr	r3, [pc, #68]	; (4038c8 <lv_group_add_obj+0x78>)
  403882:	4798      	blx	r3
    obj->group_p     = group;
  403884:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
  403886:	4628      	mov	r0, r5
  403888:	4b10      	ldr	r3, [pc, #64]	; (4038cc <lv_group_add_obj+0x7c>)
  40388a:	4798      	blx	r3
  40388c:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
  40388e:	4b10      	ldr	r3, [pc, #64]	; (4038d0 <lv_group_add_obj+0x80>)
  403890:	4798      	blx	r3
  403892:	b138      	cbz	r0, 4038a4 <lv_group_add_obj+0x54>
    if(next == NULL) return;
  403894:	b12e      	cbz	r6, 4038a2 <lv_group_add_obj+0x52>
    *next = obj;
  403896:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
  403898:	4628      	mov	r0, r5
  40389a:	4b08      	ldr	r3, [pc, #32]	; (4038bc <lv_group_add_obj+0x6c>)
  40389c:	4798      	blx	r3
  40389e:	4286      	cmp	r6, r0
  4038a0:	d006      	beq.n	4038b0 <lv_group_add_obj+0x60>
  4038a2:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(next);
  4038a4:	4632      	mov	r2, r6
  4038a6:	2300      	movs	r3, #0
  4038a8:	480a      	ldr	r0, [pc, #40]	; (4038d4 <lv_group_add_obj+0x84>)
  4038aa:	490b      	ldr	r1, [pc, #44]	; (4038d8 <lv_group_add_obj+0x88>)
  4038ac:	4788      	blx	r1
  4038ae:	e7fe      	b.n	4038ae <lv_group_add_obj+0x5e>
        lv_group_refocus(group);
  4038b0:	4628      	mov	r0, r5
  4038b2:	4b05      	ldr	r3, [pc, #20]	; (4038c8 <lv_group_add_obj+0x78>)
  4038b4:	4798      	blx	r3
  4038b6:	e7f4      	b.n	4038a2 <lv_group_add_obj+0x52>
  4038b8:	4770      	bx	lr
  4038ba:	bf00      	nop
  4038bc:	00416189 	.word	0x00416189
  4038c0:	0041619d 	.word	0x0041619d
  4038c4:	00408271 	.word	0x00408271
  4038c8:	0040381d 	.word	0x0040381d
  4038cc:	0041613d 	.word	0x0041613d
  4038d0:	00415e79 	.word	0x00415e79
  4038d4:	0042c154 	.word	0x0042c154
  4038d8:	00415e85 	.word	0x00415e85

004038dc <lv_group_remove_obj>:
{
  4038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_group_t * g = obj->group_p;
  4038de:	6b87      	ldr	r7, [r0, #56]	; 0x38
    if(g == NULL) return;
  4038e0:	2f00      	cmp	r7, #0
  4038e2:	d043      	beq.n	40396c <lv_group_remove_obj+0x90>
  4038e4:	4605      	mov	r5, r0
    if(*g->obj_focus == obj) {
  4038e6:	68fb      	ldr	r3, [r7, #12]
  4038e8:	681b      	ldr	r3, [r3, #0]
  4038ea:	4298      	cmp	r0, r3
  4038ec:	d013      	beq.n	403916 <lv_group_remove_obj+0x3a>
    if(*g->obj_focus == obj) {
  4038ee:	68fb      	ldr	r3, [r7, #12]
  4038f0:	681b      	ldr	r3, [r3, #0]
  4038f2:	429d      	cmp	r5, r3
  4038f4:	d02d      	beq.n	403952 <lv_group_remove_obj+0x76>
    _LV_LL_READ(g->obj_ll, i) {
  4038f6:	463e      	mov	r6, r7
  4038f8:	4638      	mov	r0, r7
  4038fa:	4b1d      	ldr	r3, [pc, #116]	; (403970 <lv_group_remove_obj+0x94>)
  4038fc:	4798      	blx	r3
  4038fe:	4604      	mov	r4, r0
  403900:	2c00      	cmp	r4, #0
  403902:	d033      	beq.n	40396c <lv_group_remove_obj+0x90>
        if(*i == obj) {
  403904:	6823      	ldr	r3, [r4, #0]
  403906:	429d      	cmp	r5, r3
  403908:	d026      	beq.n	403958 <lv_group_remove_obj+0x7c>
    _LV_LL_READ(g->obj_ll, i) {
  40390a:	4621      	mov	r1, r4
  40390c:	4630      	mov	r0, r6
  40390e:	4b19      	ldr	r3, [pc, #100]	; (403974 <lv_group_remove_obj+0x98>)
  403910:	4798      	blx	r3
  403912:	4604      	mov	r4, r0
  403914:	e7f4      	b.n	403900 <lv_group_remove_obj+0x24>
        if(g->frozen) g->frozen = 0;
  403916:	7d3b      	ldrb	r3, [r7, #20]
  403918:	f013 0f01 	tst.w	r3, #1
  40391c:	d003      	beq.n	403926 <lv_group_remove_obj+0x4a>
  40391e:	7d3b      	ldrb	r3, [r7, #20]
  403920:	f36f 0300 	bfc	r3, #0, #1
  403924:	753b      	strb	r3, [r7, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  403926:	4638      	mov	r0, r7
  403928:	4b11      	ldr	r3, [pc, #68]	; (403970 <lv_group_remove_obj+0x94>)
  40392a:	4798      	blx	r3
  40392c:	68fb      	ldr	r3, [r7, #12]
  40392e:	4283      	cmp	r3, r0
  403930:	d003      	beq.n	40393a <lv_group_remove_obj+0x5e>
            lv_group_refocus(g);
  403932:	4638      	mov	r0, r7
  403934:	4b10      	ldr	r3, [pc, #64]	; (403978 <lv_group_remove_obj+0x9c>)
  403936:	4798      	blx	r3
  403938:	e7d9      	b.n	4038ee <lv_group_remove_obj+0x12>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  40393a:	4638      	mov	r0, r7
  40393c:	4b0f      	ldr	r3, [pc, #60]	; (40397c <lv_group_remove_obj+0xa0>)
  40393e:	4798      	blx	r3
  403940:	68fb      	ldr	r3, [r7, #12]
  403942:	4283      	cmp	r3, r0
  403944:	d1f5      	bne.n	403932 <lv_group_remove_obj+0x56>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  403946:	6818      	ldr	r0, [r3, #0]
  403948:	69c3      	ldr	r3, [r0, #28]
  40394a:	2200      	movs	r2, #0
  40394c:	2117      	movs	r1, #23
  40394e:	4798      	blx	r3
  403950:	e7cd      	b.n	4038ee <lv_group_remove_obj+0x12>
        g->obj_focus = NULL;
  403952:	2300      	movs	r3, #0
  403954:	60fb      	str	r3, [r7, #12]
  403956:	e7ce      	b.n	4038f6 <lv_group_remove_obj+0x1a>
            _lv_ll_remove(&g->obj_ll, i);
  403958:	4621      	mov	r1, r4
  40395a:	4638      	mov	r0, r7
  40395c:	4b08      	ldr	r3, [pc, #32]	; (403980 <lv_group_remove_obj+0xa4>)
  40395e:	4798      	blx	r3
            lv_mem_free(i);
  403960:	4620      	mov	r0, r4
  403962:	4b08      	ldr	r3, [pc, #32]	; (403984 <lv_group_remove_obj+0xa8>)
  403964:	4798      	blx	r3
            obj->group_p = NULL;
  403966:	2300      	movs	r3, #0
  403968:	63ab      	str	r3, [r5, #56]	; 0x38
            break;
  40396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40396e:	bf00      	nop
  403970:	00416189 	.word	0x00416189
  403974:	0041619d 	.word	0x0041619d
  403978:	0040381d 	.word	0x0040381d
  40397c:	00416193 	.word	0x00416193
  403980:	00416245 	.word	0x00416245
  403984:	00416681 	.word	0x00416681

00403988 <lv_group_get_focused>:
    if(!group) return NULL;
  403988:	b118      	cbz	r0, 403992 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
  40398a:	68c3      	ldr	r3, [r0, #12]
  40398c:	b11b      	cbz	r3, 403996 <lv_group_get_focused+0xe>
    return *group->obj_focus;
  40398e:	6818      	ldr	r0, [r3, #0]
  403990:	4770      	bx	lr
    if(!group) return NULL;
  403992:	2000      	movs	r0, #0
  403994:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
  403996:	2000      	movs	r0, #0
}
  403998:	4770      	bx	lr
	...

0040399c <lv_group_send_data>:
{
  40399c:	b510      	push	{r4, lr}
  40399e:	b082      	sub	sp, #8
  4039a0:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
  4039a2:	4b0a      	ldr	r3, [pc, #40]	; (4039cc <lv_group_send_data+0x30>)
  4039a4:	4798      	blx	r3
    if(act == NULL) return LV_RES_OK;
  4039a6:	b170      	cbz	r0, 4039c6 <lv_group_send_data+0x2a>
  4039a8:	4604      	mov	r4, r0
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
  4039aa:	69c3      	ldr	r3, [r0, #28]
  4039ac:	aa01      	add	r2, sp, #4
  4039ae:	2118      	movs	r1, #24
  4039b0:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  4039b2:	2801      	cmp	r0, #1
  4039b4:	d001      	beq.n	4039ba <lv_group_send_data+0x1e>
}
  4039b6:	b002      	add	sp, #8
  4039b8:	bd10      	pop	{r4, pc}
    res = lv_event_send(act, LV_EVENT_KEY, &c);
  4039ba:	aa01      	add	r2, sp, #4
  4039bc:	210c      	movs	r1, #12
  4039be:	4620      	mov	r0, r4
  4039c0:	4b03      	ldr	r3, [pc, #12]	; (4039d0 <lv_group_send_data+0x34>)
  4039c2:	4798      	blx	r3
  4039c4:	e7f7      	b.n	4039b6 <lv_group_send_data+0x1a>
    if(act == NULL) return LV_RES_OK;
  4039c6:	2001      	movs	r0, #1
  4039c8:	e7f5      	b.n	4039b6 <lv_group_send_data+0x1a>
  4039ca:	bf00      	nop
  4039cc:	00403989 	.word	0x00403989
  4039d0:	0040589d 	.word	0x0040589d

004039d4 <lv_group_set_editing>:
    if(group == NULL) return;
  4039d4:	b1f8      	cbz	r0, 403a16 <lv_group_set_editing+0x42>
{
  4039d6:	b538      	push	{r3, r4, r5, lr}
  4039d8:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
  4039da:	7d03      	ldrb	r3, [r0, #20]
  4039dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
  4039e0:	4299      	cmp	r1, r3
  4039e2:	d013      	beq.n	403a0c <lv_group_set_editing+0x38>
    group->editing     = en_val;
  4039e4:	7d03      	ldrb	r3, [r0, #20]
  4039e6:	f361 0341 	bfi	r3, r1, #1, #1
  4039ea:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
  4039ec:	4b0a      	ldr	r3, [pc, #40]	; (403a18 <lv_group_set_editing+0x44>)
  4039ee:	4798      	blx	r3
    if(focused) {
  4039f0:	4605      	mov	r5, r0
  4039f2:	b158      	cbz	r0, 403a0c <lv_group_set_editing+0x38>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
  4039f4:	69c3      	ldr	r3, [r0, #28]
  4039f6:	2200      	movs	r2, #0
  4039f8:	2116      	movs	r1, #22
  4039fa:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  4039fc:	68e3      	ldr	r3, [r4, #12]
  4039fe:	2200      	movs	r2, #0
  403a00:	210d      	movs	r1, #13
  403a02:	6818      	ldr	r0, [r3, #0]
  403a04:	4b05      	ldr	r3, [pc, #20]	; (403a1c <lv_group_set_editing+0x48>)
  403a06:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  403a08:	2801      	cmp	r0, #1
  403a0a:	d000      	beq.n	403a0e <lv_group_set_editing+0x3a>
  403a0c:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(focused);
  403a0e:	4628      	mov	r0, r5
  403a10:	4b03      	ldr	r3, [pc, #12]	; (403a20 <lv_group_set_editing+0x4c>)
  403a12:	4798      	blx	r3
  403a14:	e7fa      	b.n	403a0c <lv_group_set_editing+0x38>
  403a16:	4770      	bx	lr
  403a18:	00403989 	.word	0x00403989
  403a1c:	0040589d 	.word	0x0040589d
  403a20:	00405f59 	.word	0x00405f59

00403a24 <lv_group_focus_obj>:
    if(obj == NULL) return;
  403a24:	2800      	cmp	r0, #0
  403a26:	d04e      	beq.n	403ac6 <lv_group_focus_obj+0xa2>
{
  403a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a2a:	4605      	mov	r5, r0
    lv_group_t * g = obj->group_p;
  403a2c:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if(g == NULL) return;
  403a2e:	b356      	cbz	r6, 403a86 <lv_group_focus_obj+0x62>
    if(g->frozen != 0) return;
  403a30:	7d33      	ldrb	r3, [r6, #20]
  403a32:	f013 0f01 	tst.w	r3, #1
  403a36:	d126      	bne.n	403a86 <lv_group_focus_obj+0x62>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
  403a38:	68f3      	ldr	r3, [r6, #12]
  403a3a:	b113      	cbz	r3, 403a42 <lv_group_focus_obj+0x1e>
  403a3c:	681b      	ldr	r3, [r3, #0]
  403a3e:	4298      	cmp	r0, r3
  403a40:	d021      	beq.n	403a86 <lv_group_focus_obj+0x62>
    lv_group_set_editing(g, false);
  403a42:	2100      	movs	r1, #0
  403a44:	4630      	mov	r0, r6
  403a46:	4b20      	ldr	r3, [pc, #128]	; (403ac8 <lv_group_focus_obj+0xa4>)
  403a48:	4798      	blx	r3
    _LV_LL_READ(g->obj_ll, i) {
  403a4a:	4637      	mov	r7, r6
  403a4c:	4630      	mov	r0, r6
  403a4e:	4b1f      	ldr	r3, [pc, #124]	; (403acc <lv_group_focus_obj+0xa8>)
  403a50:	4798      	blx	r3
  403a52:	4604      	mov	r4, r0
  403a54:	b1bc      	cbz	r4, 403a86 <lv_group_focus_obj+0x62>
        if(*i == obj) {
  403a56:	6823      	ldr	r3, [r4, #0]
  403a58:	429d      	cmp	r5, r3
  403a5a:	d005      	beq.n	403a68 <lv_group_focus_obj+0x44>
    _LV_LL_READ(g->obj_ll, i) {
  403a5c:	4621      	mov	r1, r4
  403a5e:	4638      	mov	r0, r7
  403a60:	4b1b      	ldr	r3, [pc, #108]	; (403ad0 <lv_group_focus_obj+0xac>)
  403a62:	4798      	blx	r3
  403a64:	4604      	mov	r4, r0
  403a66:	e7f5      	b.n	403a54 <lv_group_focus_obj+0x30>
            if(g->obj_focus != NULL) {
  403a68:	68f3      	ldr	r3, [r6, #12]
  403a6a:	b18b      	cbz	r3, 403a90 <lv_group_focus_obj+0x6c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  403a6c:	6818      	ldr	r0, [r3, #0]
  403a6e:	69c3      	ldr	r3, [r0, #28]
  403a70:	2200      	movs	r2, #0
  403a72:	2117      	movs	r1, #23
  403a74:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  403a76:	68f3      	ldr	r3, [r6, #12]
  403a78:	2200      	movs	r2, #0
  403a7a:	210e      	movs	r1, #14
  403a7c:	6818      	ldr	r0, [r3, #0]
  403a7e:	4b15      	ldr	r3, [pc, #84]	; (403ad4 <lv_group_focus_obj+0xb0>)
  403a80:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403a82:	2801      	cmp	r0, #1
  403a84:	d000      	beq.n	403a88 <lv_group_focus_obj+0x64>
  403a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_obj_invalidate(*g->obj_focus);
  403a88:	68f3      	ldr	r3, [r6, #12]
  403a8a:	6818      	ldr	r0, [r3, #0]
  403a8c:	4b12      	ldr	r3, [pc, #72]	; (403ad8 <lv_group_focus_obj+0xb4>)
  403a8e:	4798      	blx	r3
            g->obj_focus = i;
  403a90:	60f4      	str	r4, [r6, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403a92:	6820      	ldr	r0, [r4, #0]
  403a94:	69c3      	ldr	r3, [r0, #28]
  403a96:	2200      	movs	r2, #0
  403a98:	2116      	movs	r1, #22
  403a9a:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
  403a9c:	6933      	ldr	r3, [r6, #16]
  403a9e:	b10b      	cbz	r3, 403aa4 <lv_group_focus_obj+0x80>
  403aa0:	4630      	mov	r0, r6
  403aa2:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
  403aa4:	68f3      	ldr	r3, [r6, #12]
  403aa6:	2200      	movs	r2, #0
  403aa8:	210d      	movs	r1, #13
  403aaa:	6818      	ldr	r0, [r3, #0]
  403aac:	4b09      	ldr	r3, [pc, #36]	; (403ad4 <lv_group_focus_obj+0xb0>)
  403aae:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403ab0:	2801      	cmp	r0, #1
  403ab2:	d1e8      	bne.n	403a86 <lv_group_focus_obj+0x62>
                lv_obj_invalidate(*g->obj_focus);
  403ab4:	68f3      	ldr	r3, [r6, #12]
  403ab6:	6818      	ldr	r0, [r3, #0]
  403ab8:	4b07      	ldr	r3, [pc, #28]	; (403ad8 <lv_group_focus_obj+0xb4>)
  403aba:	4798      	blx	r3
                obj_to_foreground(*g->obj_focus);
  403abc:	68f3      	ldr	r3, [r6, #12]
  403abe:	6818      	ldr	r0, [r3, #0]
  403ac0:	4b06      	ldr	r3, [pc, #24]	; (403adc <lv_group_focus_obj+0xb8>)
  403ac2:	4798      	blx	r3
  403ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ac6:	4770      	bx	lr
  403ac8:	004039d5 	.word	0x004039d5
  403acc:	00416189 	.word	0x00416189
  403ad0:	0041619d 	.word	0x0041619d
  403ad4:	0040589d 	.word	0x0040589d
  403ad8:	00405f59 	.word	0x00405f59
  403adc:	004036c9 	.word	0x004036c9

00403ae0 <lv_group_get_editing>:
    if(!group) return false;
  403ae0:	b118      	cbz	r0, 403aea <lv_group_get_editing+0xa>
    return group->editing ? true : false;
  403ae2:	7d00      	ldrb	r0, [r0, #20]
  403ae4:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403ae8:	4770      	bx	lr
    if(!group) return false;
  403aea:	2000      	movs	r0, #0
}
  403aec:	4770      	bx	lr
	...

00403af0 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
  403af0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  403af4:	f013 0f02 	tst.w	r3, #2
  403af8:	d022      	beq.n	403b40 <indev_proc_reset_query_handler+0x50>
{
  403afa:	b410      	push	{r4}
        indev->proc.types.pointer.act_obj           = NULL;
  403afc:	2300      	movs	r3, #0
  403afe:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
  403b00:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
  403b02:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
        indev->proc.long_pr_sent                    = 0;
  403b06:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
  403b0a:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
  403b0c:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
  403b0e:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
  403b10:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  403b12:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  403b16:	2403      	movs	r4, #3
  403b18:	f364 0184 	bfi	r1, r4, #2, #3
  403b1c:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
  403b20:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
  403b22:	8643      	strh	r3, [r0, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
  403b24:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
  403b28:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.reset_query                     = 0;
  403b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  403b30:	f363 0241 	bfi	r2, r3, #1, #1
  403b34:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev_obj_act                               = NULL;
  403b38:	4a02      	ldr	r2, [pc, #8]	; (403b44 <indev_proc_reset_query_handler+0x54>)
  403b3a:	6013      	str	r3, [r2, #0]
    }
}
  403b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  403b40:	4770      	bx	lr
  403b42:	bf00      	nop
  403b44:	2040c40c 	.word	0x2040c40c

00403b48 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
  403b48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  403b4c:	f010 0002 	ands.w	r0, r0, #2
  403b50:	d002      	beq.n	403b58 <indev_reset_check+0x10>
        indev_obj_act = NULL;
  403b52:	2200      	movs	r2, #0
  403b54:	4b02      	ldr	r3, [pc, #8]	; (403b60 <indev_reset_check+0x18>)
  403b56:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
  403b58:	3000      	adds	r0, #0
  403b5a:	bf18      	it	ne
  403b5c:	2001      	movne	r0, #1
  403b5e:	4770      	bx	lr
  403b60:	2040c40c 	.word	0x2040c40c

00403b64 <get_dragged_obj>:
{
  403b64:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  403b66:	4604      	mov	r4, r0
  403b68:	b920      	cbnz	r0, 403b74 <get_dragged_obj+0x10>
  403b6a:	e009      	b.n	403b80 <get_dragged_obj+0x1c>
        drag_obj = lv_obj_get_parent(drag_obj);
  403b6c:	4620      	mov	r0, r4
  403b6e:	4b05      	ldr	r3, [pc, #20]	; (403b84 <get_dragged_obj+0x20>)
  403b70:	4798      	blx	r3
  403b72:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
  403b74:	4620      	mov	r0, r4
  403b76:	4b04      	ldr	r3, [pc, #16]	; (403b88 <get_dragged_obj+0x24>)
  403b78:	4798      	blx	r3
  403b7a:	b108      	cbz	r0, 403b80 <get_dragged_obj+0x1c>
  403b7c:	2c00      	cmp	r4, #0
  403b7e:	d1f5      	bne.n	403b6c <get_dragged_obj+0x8>
}
  403b80:	4620      	mov	r0, r4
  403b82:	bd10      	pop	{r4, pc}
  403b84:	004059ad 	.word	0x004059ad
  403b88:	004067cd 	.word	0x004067cd

00403b8c <indev_drag_throw>:
    if(proc->types.pointer.drag_in_prog == 0) return;
  403b8c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403b90:	f013 0f02 	tst.w	r3, #2
  403b94:	d100      	bne.n	403b98 <indev_drag_throw+0xc>
  403b96:	4770      	bx	lr
{
  403b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b9a:	b085      	sub	sp, #20
  403b9c:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
  403b9e:	69c0      	ldr	r0, [r0, #28]
  403ba0:	4b64      	ldr	r3, [pc, #400]	; (403d34 <indev_drag_throw+0x1a8>)
  403ba2:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403ba4:	4605      	mov	r5, r0
  403ba6:	b190      	cbz	r0, 403bce <indev_drag_throw+0x42>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
  403ba8:	4b63      	ldr	r3, [pc, #396]	; (403d38 <indev_drag_throw+0x1ac>)
  403baa:	4798      	blx	r3
  403bac:	b9b8      	cbnz	r0, 403bde <indev_drag_throw+0x52>
        proc->types.pointer.drag_in_prog = 0;
  403bae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403bb2:	f36f 0341 	bfc	r3, #1, #1
  403bb6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403bba:	69eb      	ldr	r3, [r5, #28]
  403bbc:	4a5f      	ldr	r2, [pc, #380]	; (403d3c <indev_drag_throw+0x1b0>)
  403bbe:	6812      	ldr	r2, [r2, #0]
  403bc0:	2113      	movs	r1, #19
  403bc2:	4628      	mov	r0, r5
  403bc4:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403bc6:	4620      	mov	r0, r4
  403bc8:	4b5d      	ldr	r3, [pc, #372]	; (403d40 <indev_drag_throw+0x1b4>)
  403bca:	4798      	blx	r3
  403bcc:	b108      	cbz	r0, 403bd2 <indev_drag_throw+0x46>
}
  403bce:	b005      	add	sp, #20
  403bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403bd2:	2200      	movs	r2, #0
  403bd4:	2109      	movs	r1, #9
  403bd6:	4628      	mov	r0, r5
  403bd8:	4b5a      	ldr	r3, [pc, #360]	; (403d44 <indev_drag_throw+0x1b8>)
  403bda:	4798      	blx	r3
        return;
  403bdc:	e7f7      	b.n	403bce <indev_drag_throw+0x42>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  403bde:	4628      	mov	r0, r5
  403be0:	4b59      	ldr	r3, [pc, #356]	; (403d48 <indev_drag_throw+0x1bc>)
  403be2:	4798      	blx	r3
  403be4:	4606      	mov	r6, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
  403be6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403bea:	4a54      	ldr	r2, [pc, #336]	; (403d3c <indev_drag_throw+0x1b0>)
  403bec:	6812      	ldr	r2, [r2, #0]
  403bee:	7d51      	ldrb	r1, [r2, #21]
  403bf0:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
  403bf4:	fb01 f103 	mul.w	r1, r1, r3
  403bf8:	4854      	ldr	r0, [pc, #336]	; (403d4c <indev_drag_throw+0x1c0>)
  403bfa:	fb80 7301 	smull	r7, r3, r0, r1
  403bfe:	17c9      	asrs	r1, r1, #31
  403c00:	ebc1 1163 	rsb	r1, r1, r3, asr #5
    proc->types.pointer.drag_throw_vect.x =
  403c04:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
  403c06:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
  403c0a:	7d53      	ldrb	r3, [r2, #21]
  403c0c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  403c10:	fb03 f301 	mul.w	r3, r3, r1
  403c14:	fb80 1003 	smull	r1, r0, r0, r3
  403c18:	17db      	asrs	r3, r3, #31
  403c1a:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    proc->types.pointer.drag_throw_vect.y =
  403c1e:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
  403c20:	6963      	ldr	r3, [r4, #20]
  403c22:	2b00      	cmp	r3, #0
  403c24:	d06c      	beq.n	403d00 <indev_drag_throw+0x174>
        lv_obj_get_coords(drag_obj, &coords_ori);
  403c26:	4669      	mov	r1, sp
  403c28:	4628      	mov	r0, r5
  403c2a:	4b49      	ldr	r3, [pc, #292]	; (403d50 <indev_drag_throw+0x1c4>)
  403c2c:	4798      	blx	r3
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
  403c2e:	4628      	mov	r0, r5
  403c30:	4b48      	ldr	r3, [pc, #288]	; (403d54 <indev_drag_throw+0x1c8>)
  403c32:	4798      	blx	r3
  403c34:	8aa3      	ldrh	r3, [r4, #20]
  403c36:	fa13 f080 	uxtah	r0, r3, r0
  403c3a:	b207      	sxth	r7, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
  403c3c:	4628      	mov	r0, r5
  403c3e:	4b46      	ldr	r3, [pc, #280]	; (403d58 <indev_drag_throw+0x1cc>)
  403c40:	4798      	blx	r3
  403c42:	8ae2      	ldrh	r2, [r4, #22]
  403c44:	fa12 f280 	uxtah	r2, r2, r0
  403c48:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403c4a:	2e03      	cmp	r6, #3
  403c4c:	d03c      	beq.n	403cc8 <indev_drag_throw+0x13c>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403c4e:	2e01      	cmp	r6, #1
  403c50:	d03f      	beq.n	403cd2 <indev_drag_throw+0x146>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403c52:	2e02      	cmp	r6, #2
  403c54:	d042      	beq.n	403cdc <indev_drag_throw+0x150>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403c56:	2e04      	cmp	r6, #4
  403c58:	d045      	beq.n	403ce6 <indev_drag_throw+0x15a>
        lv_obj_get_coords(drag_obj, &coord_new);
  403c5a:	a902      	add	r1, sp, #8
  403c5c:	4628      	mov	r0, r5
  403c5e:	4b3c      	ldr	r3, [pc, #240]	; (403d50 <indev_drag_throw+0x1c4>)
  403c60:	4798      	blx	r3
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403c62:	f9bd 2000 	ldrsh.w	r2, [sp]
  403c66:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  403c6a:	429a      	cmp	r2, r3
  403c6c:	d003      	beq.n	403c76 <indev_drag_throw+0xea>
  403c6e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403c72:	2b00      	cmp	r3, #0
  403c74:	d1ab      	bne.n	403bce <indev_drag_throw+0x42>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403c76:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  403c7a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403c7e:	429a      	cmp	r2, r3
  403c80:	d003      	beq.n	403c8a <indev_drag_throw+0xfe>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403c82:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  403c86:	2b00      	cmp	r3, #0
  403c88:	d1a1      	bne.n	403bce <indev_drag_throw+0x42>
            proc->types.pointer.drag_in_prog      = 0;
  403c8a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403c8e:	f36f 0341 	bfc	r3, #1, #1
  403c92:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
  403c96:	2300      	movs	r3, #0
  403c98:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
  403c9a:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
  403c9c:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
  403c9e:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403ca0:	69eb      	ldr	r3, [r5, #28]
  403ca2:	4a26      	ldr	r2, [pc, #152]	; (403d3c <indev_drag_throw+0x1b0>)
  403ca4:	6812      	ldr	r2, [r2, #0]
  403ca6:	2113      	movs	r1, #19
  403ca8:	4628      	mov	r0, r5
  403caa:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403cac:	4620      	mov	r0, r4
  403cae:	4b24      	ldr	r3, [pc, #144]	; (403d40 <indev_drag_throw+0x1b4>)
  403cb0:	4798      	blx	r3
  403cb2:	2800      	cmp	r0, #0
  403cb4:	d18b      	bne.n	403bce <indev_drag_throw+0x42>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403cb6:	2200      	movs	r2, #0
  403cb8:	2109      	movs	r1, #9
  403cba:	4628      	mov	r0, r5
  403cbc:	4b21      	ldr	r3, [pc, #132]	; (403d44 <indev_drag_throw+0x1b8>)
  403cbe:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403cc0:	4620      	mov	r0, r4
  403cc2:	4b1f      	ldr	r3, [pc, #124]	; (403d40 <indev_drag_throw+0x1b4>)
  403cc4:	4798      	blx	r3
  403cc6:	e782      	b.n	403bce <indev_drag_throw+0x42>
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403cc8:	4639      	mov	r1, r7
  403cca:	4628      	mov	r0, r5
  403ccc:	4b23      	ldr	r3, [pc, #140]	; (403d5c <indev_drag_throw+0x1d0>)
  403cce:	4798      	blx	r3
  403cd0:	e7c3      	b.n	403c5a <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403cd2:	4639      	mov	r1, r7
  403cd4:	4628      	mov	r0, r5
  403cd6:	4b22      	ldr	r3, [pc, #136]	; (403d60 <indev_drag_throw+0x1d4>)
  403cd8:	4798      	blx	r3
  403cda:	e7be      	b.n	403c5a <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403cdc:	4611      	mov	r1, r2
  403cde:	4628      	mov	r0, r5
  403ce0:	4b20      	ldr	r3, [pc, #128]	; (403d64 <indev_drag_throw+0x1d8>)
  403ce2:	4798      	blx	r3
  403ce4:	e7b9      	b.n	403c5a <indev_drag_throw+0xce>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
  403ce6:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  403cea:	b123      	cbz	r3, 403cf6 <indev_drag_throw+0x16a>
  403cec:	4639      	mov	r1, r7
  403cee:	4628      	mov	r0, r5
  403cf0:	4b1b      	ldr	r3, [pc, #108]	; (403d60 <indev_drag_throw+0x1d4>)
  403cf2:	4798      	blx	r3
  403cf4:	e7b1      	b.n	403c5a <indev_drag_throw+0xce>
            else lv_obj_set_y(drag_obj, act_y);
  403cf6:	4611      	mov	r1, r2
  403cf8:	4628      	mov	r0, r5
  403cfa:	4b1a      	ldr	r3, [pc, #104]	; (403d64 <indev_drag_throw+0x1d8>)
  403cfc:	4798      	blx	r3
  403cfe:	e7ac      	b.n	403c5a <indev_drag_throw+0xce>
        proc->types.pointer.drag_in_prog = 0;
  403d00:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403d04:	f36f 0341 	bfc	r3, #1, #1
  403d08:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403d0c:	69eb      	ldr	r3, [r5, #28]
  403d0e:	2113      	movs	r1, #19
  403d10:	4628      	mov	r0, r5
  403d12:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403d14:	4620      	mov	r0, r4
  403d16:	4b0a      	ldr	r3, [pc, #40]	; (403d40 <indev_drag_throw+0x1b4>)
  403d18:	4798      	blx	r3
  403d1a:	2800      	cmp	r0, #0
  403d1c:	f47f af57 	bne.w	403bce <indev_drag_throw+0x42>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403d20:	2200      	movs	r2, #0
  403d22:	2109      	movs	r1, #9
  403d24:	4628      	mov	r0, r5
  403d26:	4b07      	ldr	r3, [pc, #28]	; (403d44 <indev_drag_throw+0x1b8>)
  403d28:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403d2a:	4620      	mov	r0, r4
  403d2c:	4b04      	ldr	r3, [pc, #16]	; (403d40 <indev_drag_throw+0x1b4>)
  403d2e:	4798      	blx	r3
  403d30:	e74d      	b.n	403bce <indev_drag_throw+0x42>
  403d32:	bf00      	nop
  403d34:	00403b65 	.word	0x00403b65
  403d38:	004067a1 	.word	0x004067a1
  403d3c:	2040c408 	.word	0x2040c408
  403d40:	00403b49 	.word	0x00403b49
  403d44:	0040589d 	.word	0x0040589d
  403d48:	00406775 	.word	0x00406775
  403d4c:	51eb851f 	.word	0x51eb851f
  403d50:	00405ac1 	.word	0x00405ac1
  403d54:	00405b01 	.word	0x00405b01
  403d58:	00405b41 	.word	0x00405b41
  403d5c:	0040603d 	.word	0x0040603d
  403d60:	004060f5 	.word	0x004060f5
  403d64:	00406135 	.word	0x00406135

00403d68 <indev_proc_release>:
{
  403d68:	b538      	push	{r3, r4, r5, lr}
  403d6a:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
  403d6c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403d70:	f013 0f08 	tst.w	r3, #8
  403d74:	d00a      	beq.n	403d8c <indev_proc_release+0x24>
        proc->types.pointer.act_obj  = NULL;
  403d76:	2300      	movs	r3, #0
  403d78:	6183      	str	r3, [r0, #24]
        proc->types.pointer.last_obj = NULL;
  403d7a:	61c3      	str	r3, [r0, #28]
        proc->pr_timestamp           = 0;
  403d7c:	62c3      	str	r3, [r0, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
  403d7e:	6303      	str	r3, [r0, #48]	; 0x30
        proc->wait_until_release     = 0;
  403d80:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  403d84:	f363 02c3 	bfi	r2, r3, #3, #1
  403d88:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
  403d8c:	69a0      	ldr	r0, [r4, #24]
  403d8e:	4b59      	ldr	r3, [pc, #356]	; (403ef4 <indev_proc_release+0x18c>)
  403d90:	6018      	str	r0, [r3, #0]
    if(indev_obj_act) {
  403d92:	2800      	cmp	r0, #0
  403d94:	f000 8093 	beq.w	403ebe <indev_proc_release+0x156>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
  403d98:	2110      	movs	r1, #16
  403d9a:	4b57      	ldr	r3, [pc, #348]	; (403ef8 <indev_proc_release+0x190>)
  403d9c:	4798      	blx	r3
  403d9e:	2800      	cmp	r0, #0
  403da0:	d038      	beq.n	403e14 <indev_proc_release+0xac>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403da2:	4b54      	ldr	r3, [pc, #336]	; (403ef4 <indev_proc_release+0x18c>)
  403da4:	6818      	ldr	r0, [r3, #0]
  403da6:	69c3      	ldr	r3, [r0, #28]
  403da8:	4a54      	ldr	r2, [pc, #336]	; (403efc <indev_proc_release+0x194>)
  403daa:	6812      	ldr	r2, [r2, #0]
  403dac:	210e      	movs	r1, #14
  403dae:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403db0:	4620      	mov	r0, r4
  403db2:	4b53      	ldr	r3, [pc, #332]	; (403f00 <indev_proc_release+0x198>)
  403db4:	4798      	blx	r3
  403db6:	2800      	cmp	r0, #0
  403db8:	f040 8088 	bne.w	403ecc <indev_proc_release+0x164>
            if(proc->types.pointer.drag_in_prog == 0) {
  403dbc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403dc0:	f013 0f02 	tst.w	r3, #2
  403dc4:	d11a      	bne.n	403dfc <indev_proc_release+0x94>
                if(proc->long_pr_sent == 0) {
  403dc6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403dca:	f013 0f01 	tst.w	r3, #1
  403dce:	d10a      	bne.n	403de6 <indev_proc_release+0x7e>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403dd0:	2200      	movs	r2, #0
  403dd2:	2103      	movs	r1, #3
  403dd4:	4b47      	ldr	r3, [pc, #284]	; (403ef4 <indev_proc_release+0x18c>)
  403dd6:	6818      	ldr	r0, [r3, #0]
  403dd8:	4b4a      	ldr	r3, [pc, #296]	; (403f04 <indev_proc_release+0x19c>)
  403dda:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403ddc:	4620      	mov	r0, r4
  403dde:	4b48      	ldr	r3, [pc, #288]	; (403f00 <indev_proc_release+0x198>)
  403de0:	4798      	blx	r3
  403de2:	2800      	cmp	r0, #0
  403de4:	d172      	bne.n	403ecc <indev_proc_release+0x164>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403de6:	2200      	movs	r2, #0
  403de8:	2106      	movs	r1, #6
  403dea:	4b42      	ldr	r3, [pc, #264]	; (403ef4 <indev_proc_release+0x18c>)
  403dec:	6818      	ldr	r0, [r3, #0]
  403dee:	4b45      	ldr	r3, [pc, #276]	; (403f04 <indev_proc_release+0x19c>)
  403df0:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403df2:	4620      	mov	r0, r4
  403df4:	4b42      	ldr	r3, [pc, #264]	; (403f00 <indev_proc_release+0x198>)
  403df6:	4798      	blx	r3
  403df8:	2800      	cmp	r0, #0
  403dfa:	d167      	bne.n	403ecc <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403dfc:	2200      	movs	r2, #0
  403dfe:	2107      	movs	r1, #7
  403e00:	4b3c      	ldr	r3, [pc, #240]	; (403ef4 <indev_proc_release+0x18c>)
  403e02:	6818      	ldr	r0, [r3, #0]
  403e04:	4b3f      	ldr	r3, [pc, #252]	; (403f04 <indev_proc_release+0x19c>)
  403e06:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403e08:	4620      	mov	r0, r4
  403e0a:	4b3d      	ldr	r3, [pc, #244]	; (403f00 <indev_proc_release+0x198>)
  403e0c:	4798      	blx	r3
  403e0e:	2800      	cmp	r0, #0
  403e10:	d030      	beq.n	403e74 <indev_proc_release+0x10c>
  403e12:	bd38      	pop	{r3, r4, r5, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403e14:	4b37      	ldr	r3, [pc, #220]	; (403ef4 <indev_proc_release+0x18c>)
  403e16:	6818      	ldr	r0, [r3, #0]
  403e18:	69c3      	ldr	r3, [r0, #28]
  403e1a:	4a38      	ldr	r2, [pc, #224]	; (403efc <indev_proc_release+0x194>)
  403e1c:	6812      	ldr	r2, [r2, #0]
  403e1e:	210e      	movs	r1, #14
  403e20:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403e22:	4620      	mov	r0, r4
  403e24:	4b36      	ldr	r3, [pc, #216]	; (403f00 <indev_proc_release+0x198>)
  403e26:	4798      	blx	r3
  403e28:	2800      	cmp	r0, #0
  403e2a:	d14f      	bne.n	403ecc <indev_proc_release+0x164>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
  403e2c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403e30:	f013 0f01 	tst.w	r3, #1
  403e34:	d104      	bne.n	403e40 <indev_proc_release+0xd8>
  403e36:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e3a:	f013 0f02 	tst.w	r3, #2
  403e3e:	d046      	beq.n	403ece <indev_proc_release+0x166>
            if(proc->types.pointer.drag_in_prog == 0) {
  403e40:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e44:	f013 0f02 	tst.w	r3, #2
  403e48:	d10a      	bne.n	403e60 <indev_proc_release+0xf8>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403e4a:	2200      	movs	r2, #0
  403e4c:	2106      	movs	r1, #6
  403e4e:	4b29      	ldr	r3, [pc, #164]	; (403ef4 <indev_proc_release+0x18c>)
  403e50:	6818      	ldr	r0, [r3, #0]
  403e52:	4b2c      	ldr	r3, [pc, #176]	; (403f04 <indev_proc_release+0x19c>)
  403e54:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e56:	4620      	mov	r0, r4
  403e58:	4b29      	ldr	r3, [pc, #164]	; (403f00 <indev_proc_release+0x198>)
  403e5a:	4798      	blx	r3
  403e5c:	2800      	cmp	r0, #0
  403e5e:	d135      	bne.n	403ecc <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403e60:	2200      	movs	r2, #0
  403e62:	2107      	movs	r1, #7
  403e64:	4b23      	ldr	r3, [pc, #140]	; (403ef4 <indev_proc_release+0x18c>)
  403e66:	6818      	ldr	r0, [r3, #0]
  403e68:	4b26      	ldr	r3, [pc, #152]	; (403f04 <indev_proc_release+0x19c>)
  403e6a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403e6c:	4620      	mov	r0, r4
  403e6e:	4b24      	ldr	r3, [pc, #144]	; (403f00 <indev_proc_release+0x198>)
  403e70:	4798      	blx	r3
  403e72:	bb58      	cbnz	r0, 403ecc <indev_proc_release+0x164>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
  403e74:	4b1f      	ldr	r3, [pc, #124]	; (403ef4 <indev_proc_release+0x18c>)
  403e76:	6818      	ldr	r0, [r3, #0]
  403e78:	4b23      	ldr	r3, [pc, #140]	; (403f08 <indev_proc_release+0x1a0>)
  403e7a:	4798      	blx	r3
        if(drag_obj) {
  403e7c:	4605      	mov	r5, r0
  403e7e:	b1d0      	cbz	r0, 403eb6 <indev_proc_release+0x14e>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
  403e80:	4b22      	ldr	r3, [pc, #136]	; (403f0c <indev_proc_release+0x1a4>)
  403e82:	4798      	blx	r3
  403e84:	b1b8      	cbz	r0, 403eb6 <indev_proc_release+0x14e>
  403e86:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e8a:	f013 0f02 	tst.w	r3, #2
  403e8e:	d012      	beq.n	403eb6 <indev_proc_release+0x14e>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
  403e90:	69eb      	ldr	r3, [r5, #28]
  403e92:	b11b      	cbz	r3, 403e9c <indev_proc_release+0x134>
  403e94:	2200      	movs	r2, #0
  403e96:	2112      	movs	r1, #18
  403e98:	4628      	mov	r0, r5
  403e9a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e9c:	4620      	mov	r0, r4
  403e9e:	4b18      	ldr	r3, [pc, #96]	; (403f00 <indev_proc_release+0x198>)
  403ea0:	4798      	blx	r3
  403ea2:	b998      	cbnz	r0, 403ecc <indev_proc_release+0x164>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
  403ea4:	2200      	movs	r2, #0
  403ea6:	210a      	movs	r1, #10
  403ea8:	4628      	mov	r0, r5
  403eaa:	4b16      	ldr	r3, [pc, #88]	; (403f04 <indev_proc_release+0x19c>)
  403eac:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403eae:	4620      	mov	r0, r4
  403eb0:	4b13      	ldr	r3, [pc, #76]	; (403f00 <indev_proc_release+0x198>)
  403eb2:	4798      	blx	r3
  403eb4:	b950      	cbnz	r0, 403ecc <indev_proc_release+0x164>
        proc->types.pointer.act_obj = NULL;
  403eb6:	2300      	movs	r3, #0
  403eb8:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
  403eba:	62e3      	str	r3, [r4, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
  403ebc:	6323      	str	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
  403ebe:	69e3      	ldr	r3, [r4, #28]
  403ec0:	b123      	cbz	r3, 403ecc <indev_proc_release+0x164>
  403ec2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403ec6:	f013 0f02 	tst.w	r3, #2
  403eca:	d00c      	beq.n	403ee6 <indev_proc_release+0x17e>
  403ecc:	bd38      	pop	{r3, r4, r5, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403ece:	2200      	movs	r2, #0
  403ed0:	2103      	movs	r1, #3
  403ed2:	4b08      	ldr	r3, [pc, #32]	; (403ef4 <indev_proc_release+0x18c>)
  403ed4:	6818      	ldr	r0, [r3, #0]
  403ed6:	4b0b      	ldr	r3, [pc, #44]	; (403f04 <indev_proc_release+0x19c>)
  403ed8:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403eda:	4620      	mov	r0, r4
  403edc:	4b08      	ldr	r3, [pc, #32]	; (403f00 <indev_proc_release+0x198>)
  403ede:	4798      	blx	r3
  403ee0:	2800      	cmp	r0, #0
  403ee2:	d0ad      	beq.n	403e40 <indev_proc_release+0xd8>
  403ee4:	e7f2      	b.n	403ecc <indev_proc_release+0x164>
        indev_drag_throw(proc);
  403ee6:	4620      	mov	r0, r4
  403ee8:	4b09      	ldr	r3, [pc, #36]	; (403f10 <indev_proc_release+0x1a8>)
  403eea:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403eec:	4620      	mov	r0, r4
  403eee:	4b04      	ldr	r3, [pc, #16]	; (403f00 <indev_proc_release+0x198>)
  403ef0:	4798      	blx	r3
  403ef2:	e7eb      	b.n	403ecc <indev_proc_release+0x164>
  403ef4:	2040c40c 	.word	0x2040c40c
  403ef8:	00406dad 	.word	0x00406dad
  403efc:	2040c408 	.word	0x2040c408
  403f00:	00403b49 	.word	0x00403b49
  403f04:	0040589d 	.word	0x0040589d
  403f08:	00403b65 	.word	0x00403b65
  403f0c:	004067a1 	.word	0x004067a1
  403f10:	00403b8d 	.word	0x00403b8d

00403f14 <indev_click_focus>:
{
  403f14:	b570      	push	{r4, r5, r6, lr}
  403f16:	4604      	mov	r4, r0
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
  403f18:	4d58      	ldr	r5, [pc, #352]	; (40407c <indev_click_focus+0x168>)
  403f1a:	6828      	ldr	r0, [r5, #0]
  403f1c:	4b58      	ldr	r3, [pc, #352]	; (404080 <indev_click_focus+0x16c>)
  403f1e:	4798      	blx	r3
  403f20:	4606      	mov	r6, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403f22:	2120      	movs	r1, #32
  403f24:	6828      	ldr	r0, [r5, #0]
  403f26:	4b57      	ldr	r3, [pc, #348]	; (404084 <indev_click_focus+0x170>)
  403f28:	4798      	blx	r3
  403f2a:	b9e8      	cbnz	r0, 403f68 <indev_click_focus+0x54>
       proc->types.pointer.last_pressed != obj_to_focus) {
  403f2c:	6a23      	ldr	r3, [r4, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403f2e:	429e      	cmp	r6, r3
  403f30:	d01a      	beq.n	403f68 <indev_click_focus+0x54>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
  403f32:	4630      	mov	r0, r6
  403f34:	4b54      	ldr	r3, [pc, #336]	; (404088 <indev_click_focus+0x174>)
  403f36:	4798      	blx	r3
  403f38:	4605      	mov	r5, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403f3a:	6a20      	ldr	r0, [r4, #32]
  403f3c:	b1a8      	cbz	r0, 403f6a <indev_click_focus+0x56>
  403f3e:	4b52      	ldr	r3, [pc, #328]	; (404088 <indev_click_focus+0x174>)
  403f40:	4798      	blx	r3
  403f42:	4603      	mov	r3, r0
        if(g_act == g_prev) {
  403f44:	42ab      	cmp	r3, r5
  403f46:	d012      	beq.n	403f6e <indev_click_focus+0x5a>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403f48:	2b00      	cmp	r3, #0
  403f4a:	d044      	beq.n	403fd6 <indev_click_focus+0xc2>
                if(proc->types.pointer.last_pressed) {
  403f4c:	6a20      	ldr	r0, [r4, #32]
  403f4e:	2800      	cmp	r0, #0
  403f50:	d074      	beq.n	40403c <indev_click_focus+0x128>
                    if(g_prev == NULL) {
  403f52:	2b00      	cmp	r3, #0
  403f54:	d055      	beq.n	404002 <indev_click_focus+0xee>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
  403f56:	2200      	movs	r2, #0
  403f58:	2115      	movs	r1, #21
  403f5a:	4b4c      	ldr	r3, [pc, #304]	; (40408c <indev_click_focus+0x178>)
  403f5c:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403f5e:	4620      	mov	r0, r4
  403f60:	4b4b      	ldr	r3, [pc, #300]	; (404090 <indev_click_focus+0x17c>)
  403f62:	4798      	blx	r3
  403f64:	2800      	cmp	r0, #0
  403f66:	d05f      	beq.n	404028 <indev_click_focus+0x114>
  403f68:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403f6a:	2300      	movs	r3, #0
  403f6c:	e7ea      	b.n	403f44 <indev_click_focus+0x30>
            if(g_act) {
  403f6e:	b145      	cbz	r5, 403f82 <indev_click_focus+0x6e>
                lv_group_focus_obj(obj_to_focus);
  403f70:	4630      	mov	r0, r6
  403f72:	4b48      	ldr	r3, [pc, #288]	; (404094 <indev_click_focus+0x180>)
  403f74:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403f76:	4620      	mov	r0, r4
  403f78:	4b45      	ldr	r3, [pc, #276]	; (404090 <indev_click_focus+0x17c>)
  403f7a:	4798      	blx	r3
  403f7c:	2800      	cmp	r0, #0
  403f7e:	d065      	beq.n	40404c <indev_click_focus+0x138>
  403f80:	bd70      	pop	{r4, r5, r6, pc}
                if(proc->types.pointer.last_pressed) {
  403f82:	6a20      	ldr	r0, [r4, #32]
  403f84:	b190      	cbz	r0, 403fac <indev_click_focus+0x98>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403f86:	2200      	movs	r2, #0
  403f88:	2117      	movs	r1, #23
  403f8a:	4b40      	ldr	r3, [pc, #256]	; (40408c <indev_click_focus+0x178>)
  403f8c:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403f8e:	4620      	mov	r0, r4
  403f90:	4b3f      	ldr	r3, [pc, #252]	; (404090 <indev_click_focus+0x17c>)
  403f92:	4798      	blx	r3
  403f94:	2800      	cmp	r0, #0
  403f96:	d1e7      	bne.n	403f68 <indev_click_focus+0x54>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403f98:	2200      	movs	r2, #0
  403f9a:	210e      	movs	r1, #14
  403f9c:	6a20      	ldr	r0, [r4, #32]
  403f9e:	4b3e      	ldr	r3, [pc, #248]	; (404098 <indev_click_focus+0x184>)
  403fa0:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403fa2:	4620      	mov	r0, r4
  403fa4:	4b3a      	ldr	r3, [pc, #232]	; (404090 <indev_click_focus+0x17c>)
  403fa6:	4798      	blx	r3
  403fa8:	2800      	cmp	r0, #0
  403faa:	d1dd      	bne.n	403f68 <indev_click_focus+0x54>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403fac:	2200      	movs	r2, #0
  403fae:	2116      	movs	r1, #22
  403fb0:	4630      	mov	r0, r6
  403fb2:	4b36      	ldr	r3, [pc, #216]	; (40408c <indev_click_focus+0x178>)
  403fb4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403fb6:	4620      	mov	r0, r4
  403fb8:	4b35      	ldr	r3, [pc, #212]	; (404090 <indev_click_focus+0x17c>)
  403fba:	4798      	blx	r3
  403fbc:	2800      	cmp	r0, #0
  403fbe:	d1d3      	bne.n	403f68 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403fc0:	2200      	movs	r2, #0
  403fc2:	210d      	movs	r1, #13
  403fc4:	4630      	mov	r0, r6
  403fc6:	4b34      	ldr	r3, [pc, #208]	; (404098 <indev_click_focus+0x184>)
  403fc8:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403fca:	4620      	mov	r0, r4
  403fcc:	4b30      	ldr	r3, [pc, #192]	; (404090 <indev_click_focus+0x17c>)
  403fce:	4798      	blx	r3
  403fd0:	2800      	cmp	r0, #0
  403fd2:	d03b      	beq.n	40404c <indev_click_focus+0x138>
  403fd4:	bd70      	pop	{r4, r5, r6, pc}
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403fd6:	6a20      	ldr	r0, [r4, #32]
  403fd8:	2800      	cmp	r0, #0
  403fda:	d0b7      	beq.n	403f4c <indev_click_focus+0x38>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403fdc:	2200      	movs	r2, #0
  403fde:	2117      	movs	r1, #23
  403fe0:	4b2a      	ldr	r3, [pc, #168]	; (40408c <indev_click_focus+0x178>)
  403fe2:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403fe4:	4620      	mov	r0, r4
  403fe6:	4b2a      	ldr	r3, [pc, #168]	; (404090 <indev_click_focus+0x17c>)
  403fe8:	4798      	blx	r3
  403fea:	2800      	cmp	r0, #0
  403fec:	d1bc      	bne.n	403f68 <indev_click_focus+0x54>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403fee:	2200      	movs	r2, #0
  403ff0:	210e      	movs	r1, #14
  403ff2:	6a20      	ldr	r0, [r4, #32]
  403ff4:	4b28      	ldr	r3, [pc, #160]	; (404098 <indev_click_focus+0x184>)
  403ff6:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403ff8:	4620      	mov	r0, r4
  403ffa:	4b25      	ldr	r3, [pc, #148]	; (404090 <indev_click_focus+0x17c>)
  403ffc:	4798      	blx	r3
  403ffe:	b1e8      	cbz	r0, 40403c <indev_click_focus+0x128>
  404000:	bd70      	pop	{r4, r5, r6, pc}
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  404002:	2200      	movs	r2, #0
  404004:	2117      	movs	r1, #23
  404006:	4b21      	ldr	r3, [pc, #132]	; (40408c <indev_click_focus+0x178>)
  404008:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  40400a:	4620      	mov	r0, r4
  40400c:	4b20      	ldr	r3, [pc, #128]	; (404090 <indev_click_focus+0x17c>)
  40400e:	4798      	blx	r3
  404010:	2800      	cmp	r0, #0
  404012:	d1a9      	bne.n	403f68 <indev_click_focus+0x54>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  404014:	2200      	movs	r2, #0
  404016:	210e      	movs	r1, #14
  404018:	6a20      	ldr	r0, [r4, #32]
  40401a:	4b1f      	ldr	r3, [pc, #124]	; (404098 <indev_click_focus+0x184>)
  40401c:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  40401e:	4620      	mov	r0, r4
  404020:	4b1b      	ldr	r3, [pc, #108]	; (404090 <indev_click_focus+0x17c>)
  404022:	4798      	blx	r3
  404024:	b150      	cbz	r0, 40403c <indev_click_focus+0x128>
  404026:	bd70      	pop	{r4, r5, r6, pc}
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
  404028:	2200      	movs	r2, #0
  40402a:	210f      	movs	r1, #15
  40402c:	6a20      	ldr	r0, [r4, #32]
  40402e:	4b1a      	ldr	r3, [pc, #104]	; (404098 <indev_click_focus+0x184>)
  404030:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  404032:	4620      	mov	r0, r4
  404034:	4b16      	ldr	r3, [pc, #88]	; (404090 <indev_click_focus+0x17c>)
  404036:	4798      	blx	r3
  404038:	2800      	cmp	r0, #0
  40403a:	d195      	bne.n	403f68 <indev_click_focus+0x54>
            if(g_act) {
  40403c:	b14d      	cbz	r5, 404052 <indev_click_focus+0x13e>
                lv_group_focus_obj(obj_to_focus);
  40403e:	4630      	mov	r0, r6
  404040:	4b14      	ldr	r3, [pc, #80]	; (404094 <indev_click_focus+0x180>)
  404042:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404044:	4620      	mov	r0, r4
  404046:	4b12      	ldr	r3, [pc, #72]	; (404090 <indev_click_focus+0x17c>)
  404048:	4798      	blx	r3
  40404a:	b908      	cbnz	r0, 404050 <indev_click_focus+0x13c>
        proc->types.pointer.last_pressed = obj_to_focus;
  40404c:	6226      	str	r6, [r4, #32]
  40404e:	e78b      	b.n	403f68 <indev_click_focus+0x54>
  404050:	bd70      	pop	{r4, r5, r6, pc}
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  404052:	2200      	movs	r2, #0
  404054:	2116      	movs	r1, #22
  404056:	4630      	mov	r0, r6
  404058:	4b0c      	ldr	r3, [pc, #48]	; (40408c <indev_click_focus+0x178>)
  40405a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40405c:	4620      	mov	r0, r4
  40405e:	4b0c      	ldr	r3, [pc, #48]	; (404090 <indev_click_focus+0x17c>)
  404060:	4798      	blx	r3
  404062:	2800      	cmp	r0, #0
  404064:	d180      	bne.n	403f68 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  404066:	2200      	movs	r2, #0
  404068:	210d      	movs	r1, #13
  40406a:	4630      	mov	r0, r6
  40406c:	4b0a      	ldr	r3, [pc, #40]	; (404098 <indev_click_focus+0x184>)
  40406e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404070:	4620      	mov	r0, r4
  404072:	4b07      	ldr	r3, [pc, #28]	; (404090 <indev_click_focus+0x17c>)
  404074:	4798      	blx	r3
  404076:	2800      	cmp	r0, #0
  404078:	d0e8      	beq.n	40404c <indev_click_focus+0x138>
  40407a:	e775      	b.n	403f68 <indev_click_focus+0x54>
  40407c:	2040c40c 	.word	0x2040c40c
  404080:	00409231 	.word	0x00409231
  404084:	00406dad 	.word	0x00406dad
  404088:	004080bd 	.word	0x004080bd
  40408c:	00405905 	.word	0x00405905
  404090:	00403b49 	.word	0x00403b49
  404094:	00403a25 	.word	0x00403a25
  404098:	0040589d 	.word	0x0040589d

0040409c <indev_drag>:
{
  40409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4040a0:	b083      	sub	sp, #12
  4040a2:	4604      	mov	r4, r0
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
  4040a4:	6980      	ldr	r0, [r0, #24]
  4040a6:	4bb3      	ldr	r3, [pc, #716]	; (404374 <indev_drag+0x2d8>)
  4040a8:	4798      	blx	r3
    if(drag_obj == NULL) return;
  4040aa:	b120      	cbz	r0, 4040b6 <indev_drag+0x1a>
  4040ac:	4605      	mov	r5, r0
    if(lv_obj_get_drag(drag_obj) == false) return;
  4040ae:	4bb2      	ldr	r3, [pc, #712]	; (404378 <indev_drag+0x2dc>)
  4040b0:	4798      	blx	r3
  4040b2:	4680      	mov	r8, r0
  4040b4:	b910      	cbnz	r0, 4040bc <indev_drag+0x20>
}
  4040b6:	b003      	add	sp, #12
  4040b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  4040bc:	4628      	mov	r0, r5
  4040be:	4baf      	ldr	r3, [pc, #700]	; (40437c <indev_drag+0x2e0>)
  4040c0:	4798      	blx	r3
  4040c2:	4606      	mov	r6, r0
    if(proc->types.pointer.drag_limit_out == 0) {
  4040c4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4040c8:	f013 0f01 	tst.w	r3, #1
  4040cc:	d142      	bne.n	404154 <indev_drag+0xb8>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
  4040ce:	89a3      	ldrh	r3, [r4, #12]
  4040d0:	8a22      	ldrh	r2, [r4, #16]
  4040d2:	4413      	add	r3, r2
  4040d4:	b21b      	sxth	r3, r3
  4040d6:	8223      	strh	r3, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
  4040d8:	89e2      	ldrh	r2, [r4, #14]
  4040da:	8a61      	ldrh	r1, [r4, #18]
  4040dc:	440a      	add	r2, r1
  4040de:	b211      	sxth	r1, r2
  4040e0:	8261      	strh	r1, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
  4040e2:	2803      	cmp	r0, #3
  4040e4:	bf18      	it	ne
  4040e6:	2801      	cmpne	r0, #1
  4040e8:	bf0c      	ite	eq
  4040ea:	2001      	moveq	r0, #1
  4040ec:	2000      	movne	r0, #0
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
  4040ee:	1eb2      	subs	r2, r6, #2
  4040f0:	b2d2      	uxtb	r2, r2
  4040f2:	2a01      	cmp	r2, #1
  4040f4:	d91e      	bls.n	404134 <indev_drag+0x98>
        bool ver_en = false;
  4040f6:	2700      	movs	r7, #0
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
  4040f8:	2e04      	cmp	r6, #4
  4040fa:	d01d      	beq.n	404138 <indev_drag+0x9c>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
  4040fc:	b138      	cbz	r0, 40410e <indev_drag+0x72>
  4040fe:	2b00      	cmp	r3, #0
  404100:	bfb8      	it	lt
  404102:	425b      	neglt	r3, r3
  404104:	4a9e      	ldr	r2, [pc, #632]	; (404380 <indev_drag+0x2e4>)
  404106:	6812      	ldr	r2, [r2, #0]
  404108:	7d12      	ldrb	r2, [r2, #20]
  40410a:	4293      	cmp	r3, r2
  40410c:	da0a      	bge.n	404124 <indev_drag+0x88>
  40410e:	b317      	cbz	r7, 404156 <indev_drag+0xba>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
  404110:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  404114:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  404118:	4b99      	ldr	r3, [pc, #612]	; (404380 <indev_drag+0x2e4>)
  40411a:	681b      	ldr	r3, [r3, #0]
  40411c:	7d1b      	ldrb	r3, [r3, #20]
  40411e:	429a      	cmp	r2, r3
  404120:	f2c0 808d 	blt.w	40423e <indev_drag+0x1a2>
            proc->types.pointer.drag_limit_out = 1;
  404124:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404128:	f043 0301 	orr.w	r3, r3, #1
  40412c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            drag_just_started                   = true;
  404130:	4647      	mov	r7, r8
  404132:	e010      	b.n	404156 <indev_drag+0xba>
            ver_en = true;
  404134:	4647      	mov	r7, r8
  404136:	e7df      	b.n	4040f8 <indev_drag+0x5c>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  404138:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
  40413c:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
  404140:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  404144:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  404148:	4596      	cmp	lr, r2
  40414a:	dd01      	ble.n	404150 <indev_drag+0xb4>
                hor_en = true;
  40414c:	4640      	mov	r0, r8
  40414e:	e7d5      	b.n	4040fc <indev_drag+0x60>
                ver_en = true;
  404150:	4647      	mov	r7, r8
  404152:	e7d3      	b.n	4040fc <indev_drag+0x60>
    bool drag_just_started = false;
  404154:	2700      	movs	r7, #0
    if(proc->types.pointer.drag_limit_out != 0) {
  404156:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40415a:	f013 0f01 	tst.w	r3, #1
  40415e:	d0aa      	beq.n	4040b6 <indev_drag+0x1a>
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
  404160:	68e3      	ldr	r3, [r4, #12]
  404162:	2b00      	cmp	r3, #0
  404164:	d0a7      	beq.n	4040b6 <indev_drag+0x1a>
            lv_coord_t prev_x     = drag_obj->coords.x1;
  404166:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
            lv_coord_t prev_y     = drag_obj->coords.y1;
  40416a:	f9b5 b012 	ldrsh.w	fp, [r5, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  40416e:	4628      	mov	r0, r5
  404170:	f8df 8234 	ldr.w	r8, [pc, #564]	; 4043a8 <indev_drag+0x30c>
  404174:	47c0      	blx	r8
  404176:	4b83      	ldr	r3, [pc, #524]	; (404384 <indev_drag+0x2e8>)
  404178:	4798      	blx	r3
  40417a:	9000      	str	r0, [sp, #0]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  40417c:	4628      	mov	r0, r5
  40417e:	47c0      	blx	r8
  404180:	4b81      	ldr	r3, [pc, #516]	; (404388 <indev_drag+0x2ec>)
  404182:	4798      	blx	r3
  404184:	9001      	str	r0, [sp, #4]
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
  404186:	4628      	mov	r0, r5
  404188:	4b80      	ldr	r3, [pc, #512]	; (40438c <indev_drag+0x2f0>)
  40418a:	4798      	blx	r3
  40418c:	4680      	mov	r8, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
  40418e:	4628      	mov	r0, r5
  404190:	4b7f      	ldr	r3, [pc, #508]	; (404390 <indev_drag+0x2f4>)
  404192:	4798      	blx	r3
  404194:	4681      	mov	r9, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
  404196:	2e03      	cmp	r6, #3
  404198:	d053      	beq.n	404242 <indev_drag+0x1a6>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
  40419a:	2e01      	cmp	r6, #1
  40419c:	d063      	beq.n	404266 <indev_drag+0x1ca>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
  40419e:	2e02      	cmp	r6, #2
  4041a0:	d071      	beq.n	404286 <indev_drag+0x1ea>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  4041a2:	2e04      	cmp	r6, #4
  4041a4:	d07f      	beq.n	4042a6 <indev_drag+0x20a>
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
  4041a6:	2e03      	cmp	r6, #3
  4041a8:	bf18      	it	ne
  4041aa:	2e01      	cmpne	r6, #1
  4041ac:	d00d      	beq.n	4041ca <indev_drag+0x12e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  4041ae:	2e04      	cmp	r6, #4
  4041b0:	d10f      	bne.n	4041d2 <indev_drag+0x136>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  4041b2:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  4041b6:	2a00      	cmp	r2, #0
  4041b8:	bfb8      	it	lt
  4041ba:	4252      	neglt	r2, r2
  4041bc:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  4041c0:	2b00      	cmp	r3, #0
  4041c2:	bfb8      	it	lt
  4041c4:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  4041c6:	429a      	cmp	r2, r3
  4041c8:	dd03      	ble.n	4041d2 <indev_drag+0x136>
                act_x += proc->types.pointer.vect.x;
  4041ca:	89a3      	ldrh	r3, [r4, #12]
  4041cc:	4498      	add	r8, r3
  4041ce:	fa0f f888 	sxth.w	r8, r8
            if(allowed_dirs == LV_DRAG_DIR_VER ||
  4041d2:	1eb3      	subs	r3, r6, #2
  4041d4:	b2db      	uxtb	r3, r3
  4041d6:	2b01      	cmp	r3, #1
  4041d8:	f240 809f 	bls.w	40431a <indev_drag+0x27e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  4041dc:	2e04      	cmp	r6, #4
  4041de:	f000 808f 	beq.w	404300 <indev_drag+0x264>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
  4041e2:	4b67      	ldr	r3, [pc, #412]	; (404380 <indev_drag+0x2e4>)
  4041e4:	681b      	ldr	r3, [r3, #0]
            uint16_t inv_buf_size =
  4041e6:	68d8      	ldr	r0, [r3, #12]
  4041e8:	4b6a      	ldr	r3, [pc, #424]	; (404394 <indev_drag+0x2f8>)
  4041ea:	4798      	blx	r3
  4041ec:	4606      	mov	r6, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
  4041ee:	464a      	mov	r2, r9
  4041f0:	4641      	mov	r1, r8
  4041f2:	4628      	mov	r0, r5
  4041f4:	4b68      	ldr	r3, [pc, #416]	; (404398 <indev_drag+0x2fc>)
  4041f6:	4798      	blx	r3
            proc->types.pointer.drag_in_prog = 1;
  4041f8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4041fc:	f043 0302 	orr.w	r3, r3, #2
  404200:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  404204:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  404208:	459a      	cmp	sl, r3
  40420a:	f000 808b 	beq.w	404324 <indev_drag+0x288>
            if(drag_just_started) {
  40420e:	2f00      	cmp	r7, #0
  404210:	f43f af51 	beq.w	4040b6 <indev_drag+0x1a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
  404214:	69eb      	ldr	r3, [r5, #28]
  404216:	4a5a      	ldr	r2, [pc, #360]	; (404380 <indev_drag+0x2e4>)
  404218:	6812      	ldr	r2, [r2, #0]
  40421a:	2111      	movs	r1, #17
  40421c:	4628      	mov	r0, r5
  40421e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404220:	4620      	mov	r0, r4
  404222:	4b5e      	ldr	r3, [pc, #376]	; (40439c <indev_drag+0x300>)
  404224:	4798      	blx	r3
  404226:	2800      	cmp	r0, #0
  404228:	f47f af45 	bne.w	4040b6 <indev_drag+0x1a>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
  40422c:	2200      	movs	r2, #0
  40422e:	2108      	movs	r1, #8
  404230:	4628      	mov	r0, r5
  404232:	4b5b      	ldr	r3, [pc, #364]	; (4043a0 <indev_drag+0x304>)
  404234:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404236:	4620      	mov	r0, r4
  404238:	4b58      	ldr	r3, [pc, #352]	; (40439c <indev_drag+0x300>)
  40423a:	4798      	blx	r3
  40423c:	e73b      	b.n	4040b6 <indev_drag+0x1a>
    bool drag_just_started = false;
  40423e:	2700      	movs	r7, #0
  404240:	e789      	b.n	404156 <indev_drag+0xba>
                if(drag_just_started) {
  404242:	2f00      	cmp	r7, #0
  404244:	d0af      	beq.n	4041a6 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  404246:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40424a:	2203      	movs	r2, #3
  40424c:	f362 0384 	bfi	r3, r2, #2, #3
  404250:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
  404254:	8a23      	ldrh	r3, [r4, #16]
  404256:	4498      	add	r8, r3
  404258:	fa0f f888 	sxth.w	r8, r8
                    act_y += proc->types.pointer.drag_sum.y;
  40425c:	8a63      	ldrh	r3, [r4, #18]
  40425e:	4499      	add	r9, r3
  404260:	fa0f f989 	sxth.w	r9, r9
  404264:	e79f      	b.n	4041a6 <indev_drag+0x10a>
                if(drag_just_started) {
  404266:	2f00      	cmp	r7, #0
  404268:	d09d      	beq.n	4041a6 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  40426a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40426e:	2201      	movs	r2, #1
  404270:	f362 0384 	bfi	r3, r2, #2, #3
  404274:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
  404278:	2300      	movs	r3, #0
  40427a:	8263      	strh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
  40427c:	8a23      	ldrh	r3, [r4, #16]
  40427e:	4498      	add	r8, r3
  404280:	fa0f f888 	sxth.w	r8, r8
  404284:	e78f      	b.n	4041a6 <indev_drag+0x10a>
                if(drag_just_started) {
  404286:	2f00      	cmp	r7, #0
  404288:	d08d      	beq.n	4041a6 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  40428a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40428e:	2202      	movs	r2, #2
  404290:	f362 0384 	bfi	r3, r2, #2, #3
  404294:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
  404298:	2300      	movs	r3, #0
  40429a:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
  40429c:	8a63      	ldrh	r3, [r4, #18]
  40429e:	4499      	add	r9, r3
  4042a0:	fa0f f989 	sxth.w	r9, r9
  4042a4:	e77f      	b.n	4041a6 <indev_drag+0x10a>
                if(drag_just_started) {
  4042a6:	2f00      	cmp	r7, #0
  4042a8:	f43f af7d 	beq.w	4041a6 <indev_drag+0x10a>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  4042ac:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  4042b0:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  4042b4:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  4042b8:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  4042bc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  4042c0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  4042c4:	4288      	cmp	r0, r1
  4042c6:	dd0d      	ble.n	4042e4 <indev_drag+0x248>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  4042c8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4042cc:	2101      	movs	r1, #1
  4042ce:	f361 0384 	bfi	r3, r1, #2, #3
  4042d2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
  4042d6:	2300      	movs	r3, #0
  4042d8:	8263      	strh	r3, [r4, #18]
                        act_x += proc->types.pointer.drag_sum.x;
  4042da:	fa18 f882 	uxtah	r8, r8, r2
  4042de:	fa0f f888 	sxth.w	r8, r8
  4042e2:	e760      	b.n	4041a6 <indev_drag+0x10a>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  4042e4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  4042e8:	2102      	movs	r1, #2
  4042ea:	f361 0284 	bfi	r2, r1, #2, #3
  4042ee:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
  4042f2:	2200      	movs	r2, #0
  4042f4:	8222      	strh	r2, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
  4042f6:	fa19 f983 	uxtah	r9, r9, r3
  4042fa:	fa0f f989 	sxth.w	r9, r9
  4042fe:	e752      	b.n	4041a6 <indev_drag+0x10a>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  404300:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  404304:	2a00      	cmp	r2, #0
  404306:	bfb8      	it	lt
  404308:	4252      	neglt	r2, r2
  40430a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  40430e:	2b00      	cmp	r3, #0
  404310:	bfb8      	it	lt
  404312:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  404314:	429a      	cmp	r2, r3
  404316:	f6bf af64 	bge.w	4041e2 <indev_drag+0x146>
                act_y += proc->types.pointer.vect.y;
  40431a:	89e3      	ldrh	r3, [r4, #14]
  40431c:	4499      	add	r9, r3
  40431e:	fa0f f989 	sxth.w	r9, r9
  404322:	e75e      	b.n	4041e2 <indev_drag+0x146>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  404324:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
  404328:	459b      	cmp	fp, r3
  40432a:	f47f af70 	bne.w	40420e <indev_drag+0x172>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  40432e:	4628      	mov	r0, r5
  404330:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4043a8 <indev_drag+0x30c>
  404334:	47c0      	blx	r8
  404336:	4b13      	ldr	r3, [pc, #76]	; (404384 <indev_drag+0x2e8>)
  404338:	4798      	blx	r3
  40433a:	4681      	mov	r9, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  40433c:	4628      	mov	r0, r5
  40433e:	47c0      	blx	r8
  404340:	4b11      	ldr	r3, [pc, #68]	; (404388 <indev_drag+0x2ec>)
  404342:	4798      	blx	r3
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
  404344:	9b00      	ldr	r3, [sp, #0]
  404346:	461a      	mov	r2, r3
  404348:	9b01      	ldr	r3, [sp, #4]
  40434a:	454a      	cmp	r2, r9
  40434c:	bf08      	it	eq
  40434e:	4283      	cmpeq	r3, r0
  404350:	f47f af5d 	bne.w	40420e <indev_drag+0x172>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
  404354:	f8df 8028 	ldr.w	r8, [pc, #40]	; 404380 <indev_drag+0x2e4>
  404358:	f8d8 3000 	ldr.w	r3, [r8]
  40435c:	68d8      	ldr	r0, [r3, #12]
  40435e:	4b0d      	ldr	r3, [pc, #52]	; (404394 <indev_drag+0x2f8>)
  404360:	4798      	blx	r3
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
  404362:	f8d8 3000 	ldr.w	r3, [r8]
  404366:	1b81      	subs	r1, r0, r6
  404368:	b289      	uxth	r1, r1
  40436a:	68d8      	ldr	r0, [r3, #12]
  40436c:	4b0d      	ldr	r3, [pc, #52]	; (4043a4 <indev_drag+0x308>)
  40436e:	4798      	blx	r3
  404370:	e74d      	b.n	40420e <indev_drag+0x172>
  404372:	bf00      	nop
  404374:	00403b65 	.word	0x00403b65
  404378:	00406749 	.word	0x00406749
  40437c:	00406775 	.word	0x00406775
  404380:	2040c408 	.word	0x2040c408
  404384:	00405b81 	.word	0x00405b81
  404388:	00405bb1 	.word	0x00405bb1
  40438c:	00405b01 	.word	0x00405b01
  404390:	00405b41 	.word	0x00405b41
  404394:	00414df9 	.word	0x00414df9
  404398:	0040603d 	.word	0x0040603d
  40439c:	00403b49 	.word	0x00403b49
  4043a0:	0040589d 	.word	0x0040589d
  4043a4:	00414e03 	.word	0x00414e03
  4043a8:	004059ad 	.word	0x004059ad

004043ac <indev_gesture>:
{
  4043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->types.pointer.gesture_sent) return;
  4043ae:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  4043b2:	f013 0f20 	tst.w	r3, #32
  4043b6:	d153      	bne.n	404460 <indev_gesture+0xb4>
  4043b8:	4605      	mov	r5, r0
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
  4043ba:	6984      	ldr	r4, [r0, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  4043bc:	e003      	b.n	4043c6 <indev_gesture+0x1a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
  4043be:	4620      	mov	r0, r4
  4043c0:	4b33      	ldr	r3, [pc, #204]	; (404490 <indev_gesture+0xe4>)
  4043c2:	4798      	blx	r3
  4043c4:	4604      	mov	r4, r0
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  4043c6:	b124      	cbz	r4, 4043d2 <indev_gesture+0x26>
  4043c8:	4620      	mov	r0, r4
  4043ca:	4b32      	ldr	r3, [pc, #200]	; (404494 <indev_gesture+0xe8>)
  4043cc:	4798      	blx	r3
  4043ce:	2800      	cmp	r0, #0
  4043d0:	d1f5      	bne.n	4043be <indev_gesture+0x12>
    if(gesture_obj == NULL) return;
  4043d2:	2c00      	cmp	r4, #0
  4043d4:	d044      	beq.n	404460 <indev_gesture+0xb4>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  4043d6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4043da:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  4043de:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  4043e2:	4a2d      	ldr	r2, [pc, #180]	; (404498 <indev_gesture+0xec>)
  4043e4:	6812      	ldr	r2, [r2, #0]
  4043e6:	7d91      	ldrb	r1, [r2, #22]
  4043e8:	4288      	cmp	r0, r1
  4043ea:	da09      	bge.n	404400 <indev_gesture+0x54>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
  4043ec:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  4043f0:	2800      	cmp	r0, #0
  4043f2:	bfb8      	it	lt
  4043f4:	4240      	neglt	r0, r0
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  4043f6:	4281      	cmp	r1, r0
  4043f8:	dd02      	ble.n	404400 <indev_gesture+0x54>
        proc->types.pointer.gesture_sum.x = 0;
  4043fa:	2100      	movs	r1, #0
  4043fc:	84e9      	strh	r1, [r5, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
  4043fe:	8529      	strh	r1, [r5, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
  404400:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
  404402:	fa11 f383 	uxtah	r3, r1, r3
  404406:	b21b      	sxth	r3, r3
  404408:	84eb      	strh	r3, [r5, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
  40440a:	89e9      	ldrh	r1, [r5, #14]
  40440c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
  40440e:	4401      	add	r1, r0
  404410:	b209      	sxth	r1, r1
  404412:	8529      	strh	r1, [r5, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  404414:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  404418:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  40441c:	7dd0      	ldrb	r0, [r2, #23]
  40441e:	4286      	cmp	r6, r0
  404420:	dc05      	bgt.n	40442e <indev_gesture+0x82>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
  404422:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
  404426:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  40442a:	42b8      	cmp	r0, r7
  40442c:	da18      	bge.n	404460 <indev_gesture+0xb4>
        proc->types.pointer.gesture_sent = 1;
  40442e:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
  404432:	f040 0020 	orr.w	r0, r0, #32
  404436:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
  40443a:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
  40443e:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
  404442:	4286      	cmp	r6, r0
  404444:	dd11      	ble.n	40446a <indev_gesture+0xbe>
            if(proc->types.pointer.gesture_sum.x > 0)
  404446:	2b00      	cmp	r3, #0
  404448:	dd0b      	ble.n	404462 <indev_gesture+0xb6>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
  40444a:	2303      	movs	r3, #3
  40444c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
  404450:	69e3      	ldr	r3, [r4, #28]
  404452:	2114      	movs	r1, #20
  404454:	4620      	mov	r0, r4
  404456:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404458:	4628      	mov	r0, r5
  40445a:	4b10      	ldr	r3, [pc, #64]	; (40449c <indev_gesture+0xf0>)
  40445c:	4798      	blx	r3
  40445e:	b170      	cbz	r0, 40447e <indev_gesture+0xd2>
  404460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
  404462:	2302      	movs	r3, #2
  404464:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404468:	e7f2      	b.n	404450 <indev_gesture+0xa4>
            if(proc->types.pointer.gesture_sum.y > 0)
  40446a:	2900      	cmp	r1, #0
  40446c:	dd03      	ble.n	404476 <indev_gesture+0xca>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
  40446e:	2301      	movs	r3, #1
  404470:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404474:	e7ec      	b.n	404450 <indev_gesture+0xa4>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
  404476:	2300      	movs	r3, #0
  404478:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  40447c:	e7e8      	b.n	404450 <indev_gesture+0xa4>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
  40447e:	2200      	movs	r2, #0
  404480:	210b      	movs	r1, #11
  404482:	4620      	mov	r0, r4
  404484:	4b06      	ldr	r3, [pc, #24]	; (4044a0 <indev_gesture+0xf4>)
  404486:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404488:	4628      	mov	r0, r5
  40448a:	4b04      	ldr	r3, [pc, #16]	; (40449c <indev_gesture+0xf0>)
  40448c:	4798      	blx	r3
  40448e:	e7e7      	b.n	404460 <indev_gesture+0xb4>
  404490:	004059ad 	.word	0x004059ad
  404494:	004067d7 	.word	0x004067d7
  404498:	2040c408 	.word	0x2040c408
  40449c:	00403b49 	.word	0x00403b49
  4044a0:	0040589d 	.word	0x0040589d

004044a4 <indev_keypad_proc>:
{
  4044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4044a6:	7b8b      	ldrb	r3, [r1, #14]
  4044a8:	2b01      	cmp	r3, #1
  4044aa:	d02f      	beq.n	40450c <indev_keypad_proc+0x68>
    if(i->proc.wait_until_release) {
  4044ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4044b0:	f013 0f08 	tst.w	r3, #8
  4044b4:	d00b      	beq.n	4044ce <indev_keypad_proc+0x2a>
        i->proc.wait_until_release      = 0;
  4044b6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  4044ba:	2200      	movs	r2, #0
  4044bc:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  4044be:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4044c2:	f362 0300 	bfi	r3, r2, #0, #1
  4044c6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  4044ca:	f880 2020 	strb.w	r2, [r0, #32]
    lv_group_t * g = i->group;
  4044ce:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  4044d0:	b1de      	cbz	r6, 40450a <indev_keypad_proc+0x66>
  4044d2:	460d      	mov	r5, r1
  4044d4:	4604      	mov	r4, r0
    indev_obj_act = lv_group_get_focused(g);
  4044d6:	4630      	mov	r0, r6
  4044d8:	4b95      	ldr	r3, [pc, #596]	; (404730 <indev_keypad_proc+0x28c>)
  4044da:	4798      	blx	r3
  4044dc:	4b95      	ldr	r3, [pc, #596]	; (404734 <indev_keypad_proc+0x290>)
  4044de:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  4044e0:	b198      	cbz	r0, 40450a <indev_keypad_proc+0x66>
    uint32_t prev_key = i->proc.types.keypad.last_key;
  4044e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
  4044e4:	686b      	ldr	r3, [r5, #4]
  4044e6:	6263      	str	r3, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
  4044e8:	f894 2020 	ldrb.w	r2, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
  4044ec:	7bab      	ldrb	r3, [r5, #14]
  4044ee:	f884 3020 	strb.w	r3, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  4044f2:	7bab      	ldrb	r3, [r5, #14]
  4044f4:	2b01      	cmp	r3, #1
  4044f6:	d00f      	beq.n	404518 <indev_keypad_proc+0x74>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  4044f8:	2b01      	cmp	r3, #1
  4044fa:	d066      	beq.n	4045ca <indev_keypad_proc+0x126>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
  4044fc:	b913      	cbnz	r3, 404504 <indev_keypad_proc+0x60>
  4044fe:	2a01      	cmp	r2, #1
  404500:	f000 810a 	beq.w	404718 <indev_keypad_proc+0x274>
    indev_obj_act = NULL;
  404504:	2200      	movs	r2, #0
  404506:	4b8b      	ldr	r3, [pc, #556]	; (404734 <indev_keypad_proc+0x290>)
  404508:	601a      	str	r2, [r3, #0]
  40450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  40450c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404510:	f013 0f08 	tst.w	r3, #8
  404514:	d0ca      	beq.n	4044ac <indev_keypad_proc+0x8>
  404516:	e7f8      	b.n	40450a <indev_keypad_proc+0x66>
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  404518:	2a00      	cmp	r2, #0
  40451a:	d1ed      	bne.n	4044f8 <indev_keypad_proc+0x54>
        i->proc.pr_timestamp = lv_tick_get();
  40451c:	4b86      	ldr	r3, [pc, #536]	; (404738 <indev_keypad_proc+0x294>)
  40451e:	4798      	blx	r3
  404520:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  404522:	6869      	ldr	r1, [r5, #4]
  404524:	290a      	cmp	r1, #10
  404526:	d009      	beq.n	40453c <indev_keypad_proc+0x98>
        else if(data->key == LV_KEY_ESC) {
  404528:	291b      	cmp	r1, #27
  40452a:	d022      	beq.n	404572 <indev_keypad_proc+0xce>
        else if(data->key == LV_KEY_NEXT) {
  40452c:	2909      	cmp	r1, #9
  40452e:	d030      	beq.n	404592 <indev_keypad_proc+0xee>
        else if(data->key == LV_KEY_PREV) {
  404530:	290b      	cmp	r1, #11
  404532:	d03c      	beq.n	4045ae <indev_keypad_proc+0x10a>
            lv_group_send_data(g, data->key);
  404534:	4630      	mov	r0, r6
  404536:	4b81      	ldr	r3, [pc, #516]	; (40473c <indev_keypad_proc+0x298>)
  404538:	4798      	blx	r3
  40453a:	e7e3      	b.n	404504 <indev_keypad_proc+0x60>
            lv_group_send_data(g, LV_KEY_ENTER);
  40453c:	4630      	mov	r0, r6
  40453e:	4b7f      	ldr	r3, [pc, #508]	; (40473c <indev_keypad_proc+0x298>)
  404540:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  404542:	4b7c      	ldr	r3, [pc, #496]	; (404734 <indev_keypad_proc+0x290>)
  404544:	6818      	ldr	r0, [r3, #0]
  404546:	69c3      	ldr	r3, [r0, #28]
  404548:	2200      	movs	r2, #0
  40454a:	210b      	movs	r1, #11
  40454c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40454e:	341c      	adds	r4, #28
  404550:	4620      	mov	r0, r4
  404552:	4b7b      	ldr	r3, [pc, #492]	; (404740 <indev_keypad_proc+0x29c>)
  404554:	4798      	blx	r3
  404556:	2800      	cmp	r0, #0
  404558:	d1d7      	bne.n	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  40455a:	2200      	movs	r2, #0
  40455c:	4611      	mov	r1, r2
  40455e:	4b75      	ldr	r3, [pc, #468]	; (404734 <indev_keypad_proc+0x290>)
  404560:	6818      	ldr	r0, [r3, #0]
  404562:	4b78      	ldr	r3, [pc, #480]	; (404744 <indev_keypad_proc+0x2a0>)
  404564:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404566:	4620      	mov	r0, r4
  404568:	4b75      	ldr	r3, [pc, #468]	; (404740 <indev_keypad_proc+0x29c>)
  40456a:	4798      	blx	r3
  40456c:	2800      	cmp	r0, #0
  40456e:	d0c9      	beq.n	404504 <indev_keypad_proc+0x60>
  404570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_send_data(g, LV_KEY_ESC);
  404572:	4630      	mov	r0, r6
  404574:	4b71      	ldr	r3, [pc, #452]	; (40473c <indev_keypad_proc+0x298>)
  404576:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  404578:	2200      	movs	r2, #0
  40457a:	2114      	movs	r1, #20
  40457c:	4b6d      	ldr	r3, [pc, #436]	; (404734 <indev_keypad_proc+0x290>)
  40457e:	6818      	ldr	r0, [r3, #0]
  404580:	4b70      	ldr	r3, [pc, #448]	; (404744 <indev_keypad_proc+0x2a0>)
  404582:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404584:	f104 001c 	add.w	r0, r4, #28
  404588:	4b6d      	ldr	r3, [pc, #436]	; (404740 <indev_keypad_proc+0x29c>)
  40458a:	4798      	blx	r3
  40458c:	2800      	cmp	r0, #0
  40458e:	d0b9      	beq.n	404504 <indev_keypad_proc+0x60>
  404590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404592:	2100      	movs	r1, #0
  404594:	4630      	mov	r0, r6
  404596:	4b6c      	ldr	r3, [pc, #432]	; (404748 <indev_keypad_proc+0x2a4>)
  404598:	4798      	blx	r3
            lv_group_focus_next(g);
  40459a:	4630      	mov	r0, r6
  40459c:	4b6b      	ldr	r3, [pc, #428]	; (40474c <indev_keypad_proc+0x2a8>)
  40459e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4045a0:	f104 001c 	add.w	r0, r4, #28
  4045a4:	4b66      	ldr	r3, [pc, #408]	; (404740 <indev_keypad_proc+0x29c>)
  4045a6:	4798      	blx	r3
  4045a8:	2800      	cmp	r0, #0
  4045aa:	d0ab      	beq.n	404504 <indev_keypad_proc+0x60>
  4045ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4045ae:	2100      	movs	r1, #0
  4045b0:	4630      	mov	r0, r6
  4045b2:	4b65      	ldr	r3, [pc, #404]	; (404748 <indev_keypad_proc+0x2a4>)
  4045b4:	4798      	blx	r3
            lv_group_focus_prev(g);
  4045b6:	4630      	mov	r0, r6
  4045b8:	4b65      	ldr	r3, [pc, #404]	; (404750 <indev_keypad_proc+0x2ac>)
  4045ba:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4045bc:	f104 001c 	add.w	r0, r4, #28
  4045c0:	4b5f      	ldr	r3, [pc, #380]	; (404740 <indev_keypad_proc+0x29c>)
  4045c2:	4798      	blx	r3
  4045c4:	2800      	cmp	r0, #0
  4045c6:	d09d      	beq.n	404504 <indev_keypad_proc+0x60>
  4045c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  4045ca:	2a01      	cmp	r2, #1
  4045cc:	d196      	bne.n	4044fc <indev_keypad_proc+0x58>
        if(data->key == LV_KEY_ENTER) {
  4045ce:	686b      	ldr	r3, [r5, #4]
  4045d0:	2b0a      	cmp	r3, #10
  4045d2:	d024      	beq.n	40461e <indev_keypad_proc+0x17a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4045d4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4045d8:	f013 0f01 	tst.w	r3, #1
  4045dc:	d037      	beq.n	40464e <indev_keypad_proc+0x1aa>
        else if(i->proc.long_pr_sent != 0 &&
  4045de:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4045e2:	f013 0f01 	tst.w	r3, #1
  4045e6:	d08d      	beq.n	404504 <indev_keypad_proc+0x60>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  4045e8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  4045ea:	4b5a      	ldr	r3, [pc, #360]	; (404754 <indev_keypad_proc+0x2b0>)
  4045ec:	4798      	blx	r3
  4045ee:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
  4045f0:	4298      	cmp	r0, r3
  4045f2:	d987      	bls.n	404504 <indev_keypad_proc+0x60>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  4045f4:	4b50      	ldr	r3, [pc, #320]	; (404738 <indev_keypad_proc+0x294>)
  4045f6:	4798      	blx	r3
  4045f8:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  4045fa:	6869      	ldr	r1, [r5, #4]
  4045fc:	290a      	cmp	r1, #10
  4045fe:	d053      	beq.n	4046a8 <indev_keypad_proc+0x204>
            else if(data->key == LV_KEY_NEXT) {
  404600:	2909      	cmp	r1, #9
  404602:	d06b      	beq.n	4046dc <indev_keypad_proc+0x238>
            else if(data->key == LV_KEY_PREV) {
  404604:	290b      	cmp	r1, #11
  404606:	d078      	beq.n	4046fa <indev_keypad_proc+0x256>
                lv_group_send_data(g, data->key);
  404608:	4630      	mov	r0, r6
  40460a:	4b4c      	ldr	r3, [pc, #304]	; (40473c <indev_keypad_proc+0x298>)
  40460c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40460e:	f104 001c 	add.w	r0, r4, #28
  404612:	4b4b      	ldr	r3, [pc, #300]	; (404740 <indev_keypad_proc+0x29c>)
  404614:	4798      	blx	r3
  404616:	2800      	cmp	r0, #0
  404618:	f43f af74 	beq.w	404504 <indev_keypad_proc+0x60>
  40461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
  40461e:	69c3      	ldr	r3, [r0, #28]
  404620:	2200      	movs	r2, #0
  404622:	210c      	movs	r1, #12
  404624:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404626:	f104 071c 	add.w	r7, r4, #28
  40462a:	4638      	mov	r0, r7
  40462c:	4b44      	ldr	r3, [pc, #272]	; (404740 <indev_keypad_proc+0x29c>)
  40462e:	4798      	blx	r3
  404630:	2800      	cmp	r0, #0
  404632:	f47f af6a 	bne.w	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  404636:	2200      	movs	r2, #0
  404638:	2101      	movs	r1, #1
  40463a:	4b3e      	ldr	r3, [pc, #248]	; (404734 <indev_keypad_proc+0x290>)
  40463c:	6818      	ldr	r0, [r3, #0]
  40463e:	4b41      	ldr	r3, [pc, #260]	; (404744 <indev_keypad_proc+0x2a0>)
  404640:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404642:	4638      	mov	r0, r7
  404644:	4b3e      	ldr	r3, [pc, #248]	; (404740 <indev_keypad_proc+0x29c>)
  404646:	4798      	blx	r3
  404648:	2800      	cmp	r0, #0
  40464a:	d0c3      	beq.n	4045d4 <indev_keypad_proc+0x130>
  40464c:	e75d      	b.n	40450a <indev_keypad_proc+0x66>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40464e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  404650:	4b40      	ldr	r3, [pc, #256]	; (404754 <indev_keypad_proc+0x2b0>)
  404652:	4798      	blx	r3
  404654:	8b23      	ldrh	r3, [r4, #24]
  404656:	4298      	cmp	r0, r3
  404658:	d9c1      	bls.n	4045de <indev_keypad_proc+0x13a>
            i->proc.long_pr_sent = 1;
  40465a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40465e:	f043 0301 	orr.w	r3, r3, #1
  404662:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
  404666:	686b      	ldr	r3, [r5, #4]
  404668:	2b0a      	cmp	r3, #10
  40466a:	f47f af4b 	bne.w	404504 <indev_keypad_proc+0x60>
                i->proc.longpr_rep_timestamp = lv_tick_get();
  40466e:	4b32      	ldr	r3, [pc, #200]	; (404738 <indev_keypad_proc+0x294>)
  404670:	4798      	blx	r3
  404672:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  404674:	4b2f      	ldr	r3, [pc, #188]	; (404734 <indev_keypad_proc+0x290>)
  404676:	6818      	ldr	r0, [r3, #0]
  404678:	69c3      	ldr	r3, [r0, #28]
  40467a:	2200      	movs	r2, #0
  40467c:	210f      	movs	r1, #15
  40467e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404680:	341c      	adds	r4, #28
  404682:	4620      	mov	r0, r4
  404684:	4b2e      	ldr	r3, [pc, #184]	; (404740 <indev_keypad_proc+0x29c>)
  404686:	4798      	blx	r3
  404688:	2800      	cmp	r0, #0
  40468a:	f47f af3e 	bne.w	40450a <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  40468e:	2200      	movs	r2, #0
  404690:	2104      	movs	r1, #4
  404692:	4b28      	ldr	r3, [pc, #160]	; (404734 <indev_keypad_proc+0x290>)
  404694:	6818      	ldr	r0, [r3, #0]
  404696:	4b2b      	ldr	r3, [pc, #172]	; (404744 <indev_keypad_proc+0x2a0>)
  404698:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40469a:	4620      	mov	r0, r4
  40469c:	4b28      	ldr	r3, [pc, #160]	; (404740 <indev_keypad_proc+0x29c>)
  40469e:	4798      	blx	r3
  4046a0:	2800      	cmp	r0, #0
  4046a2:	f43f af2f 	beq.w	404504 <indev_keypad_proc+0x60>
  4046a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  4046a8:	4b22      	ldr	r3, [pc, #136]	; (404734 <indev_keypad_proc+0x290>)
  4046aa:	6818      	ldr	r0, [r3, #0]
  4046ac:	69c3      	ldr	r3, [r0, #28]
  4046ae:	2200      	movs	r2, #0
  4046b0:	2110      	movs	r1, #16
  4046b2:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046b4:	341c      	adds	r4, #28
  4046b6:	4620      	mov	r0, r4
  4046b8:	4b21      	ldr	r3, [pc, #132]	; (404740 <indev_keypad_proc+0x29c>)
  4046ba:	4798      	blx	r3
  4046bc:	2800      	cmp	r0, #0
  4046be:	f47f af24 	bne.w	40450a <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  4046c2:	2200      	movs	r2, #0
  4046c4:	2105      	movs	r1, #5
  4046c6:	4b1b      	ldr	r3, [pc, #108]	; (404734 <indev_keypad_proc+0x290>)
  4046c8:	6818      	ldr	r0, [r3, #0]
  4046ca:	4b1e      	ldr	r3, [pc, #120]	; (404744 <indev_keypad_proc+0x2a0>)
  4046cc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046ce:	4620      	mov	r0, r4
  4046d0:	4b1b      	ldr	r3, [pc, #108]	; (404740 <indev_keypad_proc+0x29c>)
  4046d2:	4798      	blx	r3
  4046d4:	2800      	cmp	r0, #0
  4046d6:	f43f af15 	beq.w	404504 <indev_keypad_proc+0x60>
  4046da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4046dc:	2100      	movs	r1, #0
  4046de:	4630      	mov	r0, r6
  4046e0:	4b19      	ldr	r3, [pc, #100]	; (404748 <indev_keypad_proc+0x2a4>)
  4046e2:	4798      	blx	r3
                lv_group_focus_next(g);
  4046e4:	4630      	mov	r0, r6
  4046e6:	4b19      	ldr	r3, [pc, #100]	; (40474c <indev_keypad_proc+0x2a8>)
  4046e8:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046ea:	f104 001c 	add.w	r0, r4, #28
  4046ee:	4b14      	ldr	r3, [pc, #80]	; (404740 <indev_keypad_proc+0x29c>)
  4046f0:	4798      	blx	r3
  4046f2:	2800      	cmp	r0, #0
  4046f4:	f43f af06 	beq.w	404504 <indev_keypad_proc+0x60>
  4046f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4046fa:	2100      	movs	r1, #0
  4046fc:	4630      	mov	r0, r6
  4046fe:	4b12      	ldr	r3, [pc, #72]	; (404748 <indev_keypad_proc+0x2a4>)
  404700:	4798      	blx	r3
                lv_group_focus_prev(g);
  404702:	4630      	mov	r0, r6
  404704:	4b12      	ldr	r3, [pc, #72]	; (404750 <indev_keypad_proc+0x2ac>)
  404706:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404708:	f104 001c 	add.w	r0, r4, #28
  40470c:	4b0c      	ldr	r3, [pc, #48]	; (404740 <indev_keypad_proc+0x29c>)
  40470e:	4798      	blx	r3
  404710:	2800      	cmp	r0, #0
  404712:	f43f aef7 	beq.w	404504 <indev_keypad_proc+0x60>
  404716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data->key = prev_key;
  404718:	6069      	str	r1, [r5, #4]
        if(data->key == LV_KEY_ENTER) {
  40471a:	290a      	cmp	r1, #10
  40471c:	d01c      	beq.n	404758 <indev_keypad_proc+0x2b4>
        i->proc.pr_timestamp = 0;
  40471e:	2200      	movs	r2, #0
  404720:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  404722:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404726:	f362 0300 	bfi	r3, r2, #0, #1
  40472a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  40472e:	e6e9      	b.n	404504 <indev_keypad_proc+0x60>
  404730:	00403989 	.word	0x00403989
  404734:	2040c40c 	.word	0x2040c40c
  404738:	004150fd 	.word	0x004150fd
  40473c:	0040399d 	.word	0x0040399d
  404740:	00403b49 	.word	0x00403b49
  404744:	0040589d 	.word	0x0040589d
  404748:	004039d5 	.word	0x004039d5
  40474c:	004037ed 	.word	0x004037ed
  404750:	00403805 	.word	0x00403805
  404754:	00415119 	.word	0x00415119
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404758:	69c3      	ldr	r3, [r0, #28]
  40475a:	2200      	movs	r2, #0
  40475c:	210e      	movs	r1, #14
  40475e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404760:	f104 051c 	add.w	r5, r4, #28
  404764:	4628      	mov	r0, r5
  404766:	4b17      	ldr	r3, [pc, #92]	; (4047c4 <indev_keypad_proc+0x320>)
  404768:	4798      	blx	r3
  40476a:	2800      	cmp	r0, #0
  40476c:	f47f aecd 	bne.w	40450a <indev_keypad_proc+0x66>
            if(i->proc.long_pr_sent == 0) {
  404770:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404774:	f013 0f01 	tst.w	r3, #1
  404778:	d10b      	bne.n	404792 <indev_keypad_proc+0x2ee>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  40477a:	2200      	movs	r2, #0
  40477c:	2103      	movs	r1, #3
  40477e:	4b12      	ldr	r3, [pc, #72]	; (4047c8 <indev_keypad_proc+0x324>)
  404780:	6818      	ldr	r0, [r3, #0]
  404782:	4b12      	ldr	r3, [pc, #72]	; (4047cc <indev_keypad_proc+0x328>)
  404784:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404786:	4628      	mov	r0, r5
  404788:	4b0e      	ldr	r3, [pc, #56]	; (4047c4 <indev_keypad_proc+0x320>)
  40478a:	4798      	blx	r3
  40478c:	2800      	cmp	r0, #0
  40478e:	f47f aebc 	bne.w	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404792:	2200      	movs	r2, #0
  404794:	2106      	movs	r1, #6
  404796:	4b0c      	ldr	r3, [pc, #48]	; (4047c8 <indev_keypad_proc+0x324>)
  404798:	6818      	ldr	r0, [r3, #0]
  40479a:	4b0c      	ldr	r3, [pc, #48]	; (4047cc <indev_keypad_proc+0x328>)
  40479c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40479e:	4628      	mov	r0, r5
  4047a0:	4b08      	ldr	r3, [pc, #32]	; (4047c4 <indev_keypad_proc+0x320>)
  4047a2:	4798      	blx	r3
  4047a4:	2800      	cmp	r0, #0
  4047a6:	f47f aeb0 	bne.w	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  4047aa:	2200      	movs	r2, #0
  4047ac:	2107      	movs	r1, #7
  4047ae:	4b06      	ldr	r3, [pc, #24]	; (4047c8 <indev_keypad_proc+0x324>)
  4047b0:	6818      	ldr	r0, [r3, #0]
  4047b2:	4b06      	ldr	r3, [pc, #24]	; (4047cc <indev_keypad_proc+0x328>)
  4047b4:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4047b6:	4628      	mov	r0, r5
  4047b8:	4b02      	ldr	r3, [pc, #8]	; (4047c4 <indev_keypad_proc+0x320>)
  4047ba:	4798      	blx	r3
  4047bc:	2800      	cmp	r0, #0
  4047be:	d0ae      	beq.n	40471e <indev_keypad_proc+0x27a>
  4047c0:	e6a3      	b.n	40450a <indev_keypad_proc+0x66>
  4047c2:	bf00      	nop
  4047c4:	00403b49 	.word	0x00403b49
  4047c8:	2040c40c 	.word	0x2040c40c
  4047cc:	0040589d 	.word	0x0040589d

004047d0 <indev_encoder_proc>:
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4047d0:	7b8b      	ldrb	r3, [r1, #14]
  4047d2:	2b01      	cmp	r3, #1
  4047d4:	d040      	beq.n	404858 <indev_encoder_proc+0x88>
{
  4047d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4047d8:	b083      	sub	sp, #12
    if(i->proc.wait_until_release) {
  4047da:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4047de:	f013 0f08 	tst.w	r3, #8
  4047e2:	d00b      	beq.n	4047fc <indev_encoder_proc+0x2c>
        i->proc.wait_until_release      = 0;
  4047e4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  4047e8:	2200      	movs	r2, #0
  4047ea:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  4047ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4047f0:	f362 0300 	bfi	r3, r2, #0, #1
  4047f4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  4047f8:	f880 2020 	strb.w	r2, [r0, #32]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
  4047fc:	f890 7020 	ldrb.w	r7, [r0, #32]
    i->proc.types.keypad.last_state = data->state;
  404800:	7b8b      	ldrb	r3, [r1, #14]
  404802:	f880 3020 	strb.w	r3, [r0, #32]
    i->proc.types.keypad.last_key   = data->key;
  404806:	684b      	ldr	r3, [r1, #4]
  404808:	6243      	str	r3, [r0, #36]	; 0x24
    lv_group_t * g = i->group;
  40480a:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  40480c:	b316      	cbz	r6, 404854 <indev_encoder_proc+0x84>
  40480e:	460c      	mov	r4, r1
  404810:	4605      	mov	r5, r0
    indev_obj_act = lv_group_get_focused(g);
  404812:	4630      	mov	r0, r6
  404814:	4b90      	ldr	r3, [pc, #576]	; (404a58 <indev_encoder_proc+0x288>)
  404816:	4798      	blx	r3
  404818:	4b90      	ldr	r3, [pc, #576]	; (404a5c <indev_encoder_proc+0x28c>)
  40481a:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  40481c:	b1d0      	cbz	r0, 404854 <indev_encoder_proc+0x84>
    if(data->state != LV_INDEV_STATE_REL) {
  40481e:	7ba3      	ldrb	r3, [r4, #14]
  404820:	b10b      	cbz	r3, 404826 <indev_encoder_proc+0x56>
        data->enc_diff = 0;
  404822:	2300      	movs	r3, #0
  404824:	81a3      	strh	r3, [r4, #12]
    indev_obj_act = lv_group_get_focused(g);
  404826:	4630      	mov	r0, r6
  404828:	4b8b      	ldr	r3, [pc, #556]	; (404a58 <indev_encoder_proc+0x288>)
  40482a:	4798      	blx	r3
  40482c:	4b8b      	ldr	r3, [pc, #556]	; (404a5c <indev_encoder_proc+0x28c>)
  40482e:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404830:	b180      	cbz	r0, 404854 <indev_encoder_proc+0x84>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404832:	7ba3      	ldrb	r3, [r4, #14]
  404834:	2b01      	cmp	r3, #1
  404836:	d015      	beq.n	404864 <indev_encoder_proc+0x94>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  404838:	2b01      	cmp	r3, #1
  40483a:	d068      	beq.n	40490e <indev_encoder_proc+0x13e>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
  40483c:	b913      	cbnz	r3, 404844 <indev_encoder_proc+0x74>
  40483e:	2f01      	cmp	r7, #1
  404840:	f000 80fe 	beq.w	404a40 <indev_encoder_proc+0x270>
    indev_obj_act = NULL;
  404844:	2200      	movs	r2, #0
  404846:	4b85      	ldr	r3, [pc, #532]	; (404a5c <indev_encoder_proc+0x28c>)
  404848:	601a      	str	r2, [r3, #0]
    if(data->enc_diff != 0) {
  40484a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40484e:	2b00      	cmp	r3, #0
  404850:	f040 81aa 	bne.w	404ba8 <indev_encoder_proc+0x3d8>
}
  404854:	b003      	add	sp, #12
  404856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404858:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  40485c:	f013 0f08 	tst.w	r3, #8
  404860:	d0b9      	beq.n	4047d6 <indev_encoder_proc+0x6>
  404862:	4770      	bx	lr
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404864:	2f00      	cmp	r7, #0
  404866:	d1e7      	bne.n	404838 <indev_encoder_proc+0x68>
        i->proc.pr_timestamp = lv_tick_get();
  404868:	4b7d      	ldr	r3, [pc, #500]	; (404a60 <indev_encoder_proc+0x290>)
  40486a:	4798      	blx	r3
  40486c:	64a8      	str	r0, [r5, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  40486e:	6861      	ldr	r1, [r4, #4]
  404870:	290a      	cmp	r1, #10
  404872:	d009      	beq.n	404888 <indev_encoder_proc+0xb8>
        else if(data->key == LV_KEY_LEFT) {
  404874:	2914      	cmp	r1, #20
  404876:	d030      	beq.n	4048da <indev_encoder_proc+0x10a>
        else if(data->key == LV_KEY_RIGHT) {
  404878:	2913      	cmp	r1, #19
  40487a:	d033      	beq.n	4048e4 <indev_encoder_proc+0x114>
        else if(data->key == LV_KEY_ESC) {
  40487c:	291b      	cmp	r1, #27
  40487e:	d036      	beq.n	4048ee <indev_encoder_proc+0x11e>
            lv_group_send_data(g, data->key);
  404880:	4630      	mov	r0, r6
  404882:	4b78      	ldr	r3, [pc, #480]	; (404a64 <indev_encoder_proc+0x294>)
  404884:	4798      	blx	r3
  404886:	e7dd      	b.n	404844 <indev_encoder_proc+0x74>
            bool editable = false;
  404888:	aa02      	add	r2, sp, #8
  40488a:	2300      	movs	r3, #0
  40488c:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404890:	4b72      	ldr	r3, [pc, #456]	; (404a5c <indev_encoder_proc+0x28c>)
  404892:	6818      	ldr	r0, [r3, #0]
  404894:	69c3      	ldr	r3, [r0, #28]
  404896:	2119      	movs	r1, #25
  404898:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
  40489a:	4630      	mov	r0, r6
  40489c:	4b72      	ldr	r3, [pc, #456]	; (404a68 <indev_encoder_proc+0x298>)
  40489e:	4798      	blx	r3
  4048a0:	b918      	cbnz	r0, 4048aa <indev_encoder_proc+0xda>
  4048a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4048a6:	2b00      	cmp	r3, #0
  4048a8:	d1cc      	bne.n	404844 <indev_encoder_proc+0x74>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  4048aa:	4b6c      	ldr	r3, [pc, #432]	; (404a5c <indev_encoder_proc+0x28c>)
  4048ac:	6818      	ldr	r0, [r3, #0]
  4048ae:	69c3      	ldr	r3, [r0, #28]
  4048b0:	2200      	movs	r2, #0
  4048b2:	210b      	movs	r1, #11
  4048b4:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4048b6:	351c      	adds	r5, #28
  4048b8:	4628      	mov	r0, r5
  4048ba:	4b6c      	ldr	r3, [pc, #432]	; (404a6c <indev_encoder_proc+0x29c>)
  4048bc:	4798      	blx	r3
  4048be:	2800      	cmp	r0, #0
  4048c0:	d1c8      	bne.n	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  4048c2:	2200      	movs	r2, #0
  4048c4:	4611      	mov	r1, r2
  4048c6:	4b65      	ldr	r3, [pc, #404]	; (404a5c <indev_encoder_proc+0x28c>)
  4048c8:	6818      	ldr	r0, [r3, #0]
  4048ca:	4b69      	ldr	r3, [pc, #420]	; (404a70 <indev_encoder_proc+0x2a0>)
  4048cc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4048ce:	4628      	mov	r0, r5
  4048d0:	4b66      	ldr	r3, [pc, #408]	; (404a6c <indev_encoder_proc+0x29c>)
  4048d2:	4798      	blx	r3
  4048d4:	2800      	cmp	r0, #0
  4048d6:	d0b5      	beq.n	404844 <indev_encoder_proc+0x74>
  4048d8:	e7bc      	b.n	404854 <indev_encoder_proc+0x84>
            data->enc_diff--;
  4048da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048de:	3b01      	subs	r3, #1
  4048e0:	81a3      	strh	r3, [r4, #12]
  4048e2:	e7af      	b.n	404844 <indev_encoder_proc+0x74>
            data->enc_diff++;
  4048e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048e8:	3301      	adds	r3, #1
  4048ea:	81a3      	strh	r3, [r4, #12]
  4048ec:	e7aa      	b.n	404844 <indev_encoder_proc+0x74>
            lv_group_send_data(g, LV_KEY_ESC);
  4048ee:	4630      	mov	r0, r6
  4048f0:	4b5c      	ldr	r3, [pc, #368]	; (404a64 <indev_encoder_proc+0x294>)
  4048f2:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  4048f4:	2200      	movs	r2, #0
  4048f6:	2114      	movs	r1, #20
  4048f8:	4b58      	ldr	r3, [pc, #352]	; (404a5c <indev_encoder_proc+0x28c>)
  4048fa:	6818      	ldr	r0, [r3, #0]
  4048fc:	4b5c      	ldr	r3, [pc, #368]	; (404a70 <indev_encoder_proc+0x2a0>)
  4048fe:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404900:	f105 001c 	add.w	r0, r5, #28
  404904:	4b59      	ldr	r3, [pc, #356]	; (404a6c <indev_encoder_proc+0x29c>)
  404906:	4798      	blx	r3
  404908:	2800      	cmp	r0, #0
  40490a:	d09b      	beq.n	404844 <indev_encoder_proc+0x74>
  40490c:	e7a2      	b.n	404854 <indev_encoder_proc+0x84>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  40490e:	2f01      	cmp	r7, #1
  404910:	d194      	bne.n	40483c <indev_encoder_proc+0x6c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  404912:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404916:	f013 0f01 	tst.w	r3, #1
  40491a:	d01f      	beq.n	40495c <indev_encoder_proc+0x18c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  40491c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404920:	f013 0f01 	tst.w	r3, #1
  404924:	d08e      	beq.n	404844 <indev_encoder_proc+0x74>
  404926:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
  404928:	4b52      	ldr	r3, [pc, #328]	; (404a74 <indev_encoder_proc+0x2a4>)
  40492a:	4798      	blx	r3
  40492c:	8b6b      	ldrh	r3, [r5, #26]
  40492e:	4298      	cmp	r0, r3
  404930:	d988      	bls.n	404844 <indev_encoder_proc+0x74>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404932:	4b4b      	ldr	r3, [pc, #300]	; (404a60 <indev_encoder_proc+0x290>)
  404934:	4798      	blx	r3
  404936:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  404938:	6861      	ldr	r1, [r4, #4]
  40493a:	290a      	cmp	r1, #10
  40493c:	d05c      	beq.n	4049f8 <indev_encoder_proc+0x228>
            else if(data->key == LV_KEY_LEFT) {
  40493e:	2914      	cmp	r1, #20
  404940:	d074      	beq.n	404a2c <indev_encoder_proc+0x25c>
            else if(data->key == LV_KEY_RIGHT) {
  404942:	2913      	cmp	r1, #19
  404944:	d077      	beq.n	404a36 <indev_encoder_proc+0x266>
                lv_group_send_data(g, data->key);
  404946:	4630      	mov	r0, r6
  404948:	4b46      	ldr	r3, [pc, #280]	; (404a64 <indev_encoder_proc+0x294>)
  40494a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40494c:	f105 001c 	add.w	r0, r5, #28
  404950:	4b46      	ldr	r3, [pc, #280]	; (404a6c <indev_encoder_proc+0x29c>)
  404952:	4798      	blx	r3
  404954:	2800      	cmp	r0, #0
  404956:	f43f af75 	beq.w	404844 <indev_encoder_proc+0x74>
  40495a:	e77b      	b.n	404854 <indev_encoder_proc+0x84>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40495c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  40495e:	4b45      	ldr	r3, [pc, #276]	; (404a74 <indev_encoder_proc+0x2a4>)
  404960:	4798      	blx	r3
  404962:	8b2b      	ldrh	r3, [r5, #24]
  404964:	4298      	cmp	r0, r3
  404966:	d9d9      	bls.n	40491c <indev_encoder_proc+0x14c>
            i->proc.long_pr_sent = 1;
  404968:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40496c:	f043 0301 	orr.w	r3, r3, #1
  404970:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404974:	4b3a      	ldr	r3, [pc, #232]	; (404a60 <indev_encoder_proc+0x290>)
  404976:	4798      	blx	r3
  404978:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40497a:	6863      	ldr	r3, [r4, #4]
  40497c:	2b0a      	cmp	r3, #10
  40497e:	d006      	beq.n	40498e <indev_encoder_proc+0x1be>
            i->proc.long_pr_sent = 1;
  404980:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404984:	f043 0301 	orr.w	r3, r3, #1
  404988:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  40498c:	e75a      	b.n	404844 <indev_encoder_proc+0x74>
                bool editable = false;
  40498e:	aa02      	add	r2, sp, #8
  404990:	2300      	movs	r3, #0
  404992:	f802 3d01 	strb.w	r3, [r2, #-1]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404996:	4b31      	ldr	r3, [pc, #196]	; (404a5c <indev_encoder_proc+0x28c>)
  404998:	6818      	ldr	r0, [r3, #0]
  40499a:	69c3      	ldr	r3, [r0, #28]
  40499c:	2119      	movs	r1, #25
  40499e:	4798      	blx	r3
                if(editable) {
  4049a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4049a4:	b173      	cbz	r3, 4049c4 <indev_encoder_proc+0x1f4>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
  4049a6:	4630      	mov	r0, r6
  4049a8:	4b33      	ldr	r3, [pc, #204]	; (404a78 <indev_encoder_proc+0x2a8>)
  4049aa:	4798      	blx	r3
  4049ac:	2801      	cmp	r0, #1
  4049ae:	d9e7      	bls.n	404980 <indev_encoder_proc+0x1b0>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
  4049b0:	4630      	mov	r0, r6
  4049b2:	4b2d      	ldr	r3, [pc, #180]	; (404a68 <indev_encoder_proc+0x298>)
  4049b4:	4798      	blx	r3
  4049b6:	f080 0101 	eor.w	r1, r0, #1
  4049ba:	b2c9      	uxtb	r1, r1
  4049bc:	4630      	mov	r0, r6
  4049be:	4b2f      	ldr	r3, [pc, #188]	; (404a7c <indev_encoder_proc+0x2ac>)
  4049c0:	4798      	blx	r3
  4049c2:	e7dd      	b.n	404980 <indev_encoder_proc+0x1b0>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  4049c4:	4b25      	ldr	r3, [pc, #148]	; (404a5c <indev_encoder_proc+0x28c>)
  4049c6:	6818      	ldr	r0, [r3, #0]
  4049c8:	69c3      	ldr	r3, [r0, #28]
  4049ca:	2200      	movs	r2, #0
  4049cc:	210f      	movs	r1, #15
  4049ce:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4049d0:	f105 071c 	add.w	r7, r5, #28
  4049d4:	4638      	mov	r0, r7
  4049d6:	4b25      	ldr	r3, [pc, #148]	; (404a6c <indev_encoder_proc+0x29c>)
  4049d8:	4798      	blx	r3
  4049da:	2800      	cmp	r0, #0
  4049dc:	f47f af3a 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  4049e0:	2200      	movs	r2, #0
  4049e2:	2104      	movs	r1, #4
  4049e4:	4b1d      	ldr	r3, [pc, #116]	; (404a5c <indev_encoder_proc+0x28c>)
  4049e6:	6818      	ldr	r0, [r3, #0]
  4049e8:	4b21      	ldr	r3, [pc, #132]	; (404a70 <indev_encoder_proc+0x2a0>)
  4049ea:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4049ec:	4638      	mov	r0, r7
  4049ee:	4b1f      	ldr	r3, [pc, #124]	; (404a6c <indev_encoder_proc+0x29c>)
  4049f0:	4798      	blx	r3
  4049f2:	2800      	cmp	r0, #0
  4049f4:	d0c4      	beq.n	404980 <indev_encoder_proc+0x1b0>
  4049f6:	e72d      	b.n	404854 <indev_encoder_proc+0x84>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  4049f8:	4b18      	ldr	r3, [pc, #96]	; (404a5c <indev_encoder_proc+0x28c>)
  4049fa:	6818      	ldr	r0, [r3, #0]
  4049fc:	69c3      	ldr	r3, [r0, #28]
  4049fe:	2200      	movs	r2, #0
  404a00:	2110      	movs	r1, #16
  404a02:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a04:	351c      	adds	r5, #28
  404a06:	4628      	mov	r0, r5
  404a08:	4b18      	ldr	r3, [pc, #96]	; (404a6c <indev_encoder_proc+0x29c>)
  404a0a:	4798      	blx	r3
  404a0c:	2800      	cmp	r0, #0
  404a0e:	f47f af21 	bne.w	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404a12:	2200      	movs	r2, #0
  404a14:	2105      	movs	r1, #5
  404a16:	4b11      	ldr	r3, [pc, #68]	; (404a5c <indev_encoder_proc+0x28c>)
  404a18:	6818      	ldr	r0, [r3, #0]
  404a1a:	4b15      	ldr	r3, [pc, #84]	; (404a70 <indev_encoder_proc+0x2a0>)
  404a1c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a1e:	4628      	mov	r0, r5
  404a20:	4b12      	ldr	r3, [pc, #72]	; (404a6c <indev_encoder_proc+0x29c>)
  404a22:	4798      	blx	r3
  404a24:	2800      	cmp	r0, #0
  404a26:	f43f af0d 	beq.w	404844 <indev_encoder_proc+0x74>
  404a2a:	e713      	b.n	404854 <indev_encoder_proc+0x84>
                data->enc_diff--;
  404a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a30:	3b01      	subs	r3, #1
  404a32:	81a3      	strh	r3, [r4, #12]
  404a34:	e706      	b.n	404844 <indev_encoder_proc+0x74>
                data->enc_diff++;
  404a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a3a:	3301      	adds	r3, #1
  404a3c:	81a3      	strh	r3, [r4, #12]
  404a3e:	e701      	b.n	404844 <indev_encoder_proc+0x74>
        if(data->key == LV_KEY_ENTER) {
  404a40:	6863      	ldr	r3, [r4, #4]
  404a42:	2b0a      	cmp	r3, #10
  404a44:	d01c      	beq.n	404a80 <indev_encoder_proc+0x2b0>
        i->proc.pr_timestamp = 0;
  404a46:	2200      	movs	r2, #0
  404a48:	64aa      	str	r2, [r5, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  404a4a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404a4e:	f362 0300 	bfi	r3, r2, #0, #1
  404a52:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  404a56:	e6f5      	b.n	404844 <indev_encoder_proc+0x74>
  404a58:	00403989 	.word	0x00403989
  404a5c:	2040c40c 	.word	0x2040c40c
  404a60:	004150fd 	.word	0x004150fd
  404a64:	0040399d 	.word	0x0040399d
  404a68:	00403ae1 	.word	0x00403ae1
  404a6c:	00403b49 	.word	0x00403b49
  404a70:	0040589d 	.word	0x0040589d
  404a74:	00415119 	.word	0x00415119
  404a78:	0041638d 	.word	0x0041638d
  404a7c:	004039d5 	.word	0x004039d5
            bool editable = false;
  404a80:	aa02      	add	r2, sp, #8
  404a82:	2300      	movs	r3, #0
  404a84:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404a88:	69c3      	ldr	r3, [r0, #28]
  404a8a:	2119      	movs	r1, #25
  404a8c:	4798      	blx	r3
            if(editable == false) {
  404a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404a92:	2b00      	cmp	r3, #0
  404a94:	d044      	beq.n	404b20 <indev_encoder_proc+0x350>
            else if(g->editing) {
  404a96:	7d33      	ldrb	r3, [r6, #20]
  404a98:	f013 0f02 	tst.w	r3, #2
  404a9c:	d079      	beq.n	404b92 <indev_encoder_proc+0x3c2>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
  404a9e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404aa2:	f013 0f01 	tst.w	r3, #1
  404aa6:	d004      	beq.n	404ab2 <indev_encoder_proc+0x2e2>
  404aa8:	4630      	mov	r0, r6
  404aaa:	4b60      	ldr	r3, [pc, #384]	; (404c2c <indev_encoder_proc+0x45c>)
  404aac:	4798      	blx	r3
  404aae:	2801      	cmp	r0, #1
  404ab0:	d8c9      	bhi.n	404a46 <indev_encoder_proc+0x276>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404ab2:	4b5f      	ldr	r3, [pc, #380]	; (404c30 <indev_encoder_proc+0x460>)
  404ab4:	6818      	ldr	r0, [r3, #0]
  404ab6:	69c3      	ldr	r3, [r0, #28]
  404ab8:	2200      	movs	r2, #0
  404aba:	210e      	movs	r1, #14
  404abc:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404abe:	f105 071c 	add.w	r7, r5, #28
  404ac2:	4638      	mov	r0, r7
  404ac4:	4b5b      	ldr	r3, [pc, #364]	; (404c34 <indev_encoder_proc+0x464>)
  404ac6:	4798      	blx	r3
  404ac8:	2800      	cmp	r0, #0
  404aca:	f47f aec3 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404ace:	2200      	movs	r2, #0
  404ad0:	2103      	movs	r1, #3
  404ad2:	4b57      	ldr	r3, [pc, #348]	; (404c30 <indev_encoder_proc+0x460>)
  404ad4:	6818      	ldr	r0, [r3, #0]
  404ad6:	4b58      	ldr	r3, [pc, #352]	; (404c38 <indev_encoder_proc+0x468>)
  404ad8:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404ada:	4638      	mov	r0, r7
  404adc:	4b55      	ldr	r3, [pc, #340]	; (404c34 <indev_encoder_proc+0x464>)
  404ade:	4798      	blx	r3
  404ae0:	2800      	cmp	r0, #0
  404ae2:	f47f aeb7 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404ae6:	2200      	movs	r2, #0
  404ae8:	2106      	movs	r1, #6
  404aea:	4b51      	ldr	r3, [pc, #324]	; (404c30 <indev_encoder_proc+0x460>)
  404aec:	6818      	ldr	r0, [r3, #0]
  404aee:	4b52      	ldr	r3, [pc, #328]	; (404c38 <indev_encoder_proc+0x468>)
  404af0:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404af2:	4638      	mov	r0, r7
  404af4:	4b4f      	ldr	r3, [pc, #316]	; (404c34 <indev_encoder_proc+0x464>)
  404af6:	4798      	blx	r3
  404af8:	2800      	cmp	r0, #0
  404afa:	f47f aeab 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  404afe:	2200      	movs	r2, #0
  404b00:	2107      	movs	r1, #7
  404b02:	4b4b      	ldr	r3, [pc, #300]	; (404c30 <indev_encoder_proc+0x460>)
  404b04:	6818      	ldr	r0, [r3, #0]
  404b06:	4b4c      	ldr	r3, [pc, #304]	; (404c38 <indev_encoder_proc+0x468>)
  404b08:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404b0a:	4638      	mov	r0, r7
  404b0c:	4b49      	ldr	r3, [pc, #292]	; (404c34 <indev_encoder_proc+0x464>)
  404b0e:	4798      	blx	r3
  404b10:	2800      	cmp	r0, #0
  404b12:	f47f ae9f 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_group_send_data(g, LV_KEY_ENTER);
  404b16:	210a      	movs	r1, #10
  404b18:	4630      	mov	r0, r6
  404b1a:	4b48      	ldr	r3, [pc, #288]	; (404c3c <indev_encoder_proc+0x46c>)
  404b1c:	4798      	blx	r3
  404b1e:	e792      	b.n	404a46 <indev_encoder_proc+0x276>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404b20:	4b43      	ldr	r3, [pc, #268]	; (404c30 <indev_encoder_proc+0x460>)
  404b22:	6818      	ldr	r0, [r3, #0]
  404b24:	69c3      	ldr	r3, [r0, #28]
  404b26:	2200      	movs	r2, #0
  404b28:	210e      	movs	r1, #14
  404b2a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404b2c:	f105 071c 	add.w	r7, r5, #28
  404b30:	4638      	mov	r0, r7
  404b32:	4b40      	ldr	r3, [pc, #256]	; (404c34 <indev_encoder_proc+0x464>)
  404b34:	4798      	blx	r3
  404b36:	2800      	cmp	r0, #0
  404b38:	f47f ae8c 	bne.w	404854 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404b3c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404b40:	f013 0f01 	tst.w	r3, #1
  404b44:	d01e      	beq.n	404b84 <indev_encoder_proc+0x3b4>
                if(indev_reset_check(&i->proc)) return;
  404b46:	4638      	mov	r0, r7
  404b48:	4b3a      	ldr	r3, [pc, #232]	; (404c34 <indev_encoder_proc+0x464>)
  404b4a:	4798      	blx	r3
  404b4c:	2800      	cmp	r0, #0
  404b4e:	f47f ae81 	bne.w	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404b52:	2200      	movs	r2, #0
  404b54:	2106      	movs	r1, #6
  404b56:	4b36      	ldr	r3, [pc, #216]	; (404c30 <indev_encoder_proc+0x460>)
  404b58:	6818      	ldr	r0, [r3, #0]
  404b5a:	4b37      	ldr	r3, [pc, #220]	; (404c38 <indev_encoder_proc+0x468>)
  404b5c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404b5e:	4638      	mov	r0, r7
  404b60:	4b34      	ldr	r3, [pc, #208]	; (404c34 <indev_encoder_proc+0x464>)
  404b62:	4798      	blx	r3
  404b64:	2800      	cmp	r0, #0
  404b66:	f47f ae75 	bne.w	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  404b6a:	2200      	movs	r2, #0
  404b6c:	2107      	movs	r1, #7
  404b6e:	4b30      	ldr	r3, [pc, #192]	; (404c30 <indev_encoder_proc+0x460>)
  404b70:	6818      	ldr	r0, [r3, #0]
  404b72:	4b31      	ldr	r3, [pc, #196]	; (404c38 <indev_encoder_proc+0x468>)
  404b74:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404b76:	4638      	mov	r0, r7
  404b78:	4b2e      	ldr	r3, [pc, #184]	; (404c34 <indev_encoder_proc+0x464>)
  404b7a:	4798      	blx	r3
  404b7c:	2800      	cmp	r0, #0
  404b7e:	f43f af62 	beq.w	404a46 <indev_encoder_proc+0x276>
  404b82:	e667      	b.n	404854 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404b84:	2200      	movs	r2, #0
  404b86:	2103      	movs	r1, #3
  404b88:	4b29      	ldr	r3, [pc, #164]	; (404c30 <indev_encoder_proc+0x460>)
  404b8a:	6818      	ldr	r0, [r3, #0]
  404b8c:	4b2a      	ldr	r3, [pc, #168]	; (404c38 <indev_encoder_proc+0x468>)
  404b8e:	4798      	blx	r3
  404b90:	e7d9      	b.n	404b46 <indev_encoder_proc+0x376>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
  404b92:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404b96:	f013 0f01 	tst.w	r3, #1
  404b9a:	f47f af54 	bne.w	404a46 <indev_encoder_proc+0x276>
                lv_group_set_editing(g, true); /*Set edit mode*/
  404b9e:	2101      	movs	r1, #1
  404ba0:	4630      	mov	r0, r6
  404ba2:	4b27      	ldr	r3, [pc, #156]	; (404c40 <indev_encoder_proc+0x470>)
  404ba4:	4798      	blx	r3
  404ba6:	e74e      	b.n	404a46 <indev_encoder_proc+0x276>
        if(lv_group_get_editing(g)) {
  404ba8:	4630      	mov	r0, r6
  404baa:	4b26      	ldr	r3, [pc, #152]	; (404c44 <indev_encoder_proc+0x474>)
  404bac:	4798      	blx	r3
  404bae:	b1f8      	cbz	r0, 404bf0 <indev_encoder_proc+0x420>
            if(data->enc_diff < 0) {
  404bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bb4:	2b00      	cmp	r3, #0
  404bb6:	db0f      	blt.n	404bd8 <indev_encoder_proc+0x408>
            else if(data->enc_diff > 0) {
  404bb8:	2b00      	cmp	r3, #0
  404bba:	f77f ae4b 	ble.w	404854 <indev_encoder_proc+0x84>
  404bbe:	2500      	movs	r5, #0
  404bc0:	e011      	b.n	404be6 <indev_encoder_proc+0x416>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
  404bc2:	2114      	movs	r1, #20
  404bc4:	4630      	mov	r0, r6
  404bc6:	4b1d      	ldr	r3, [pc, #116]	; (404c3c <indev_encoder_proc+0x46c>)
  404bc8:	4798      	blx	r3
  404bca:	3501      	adds	r5, #1
  404bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bd0:	425b      	negs	r3, r3
  404bd2:	429d      	cmp	r5, r3
  404bd4:	dbf5      	blt.n	404bc2 <indev_encoder_proc+0x3f2>
  404bd6:	e63d      	b.n	404854 <indev_encoder_proc+0x84>
  404bd8:	2500      	movs	r5, #0
  404bda:	e7f7      	b.n	404bcc <indev_encoder_proc+0x3fc>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
  404bdc:	2113      	movs	r1, #19
  404bde:	4630      	mov	r0, r6
  404be0:	4b16      	ldr	r3, [pc, #88]	; (404c3c <indev_encoder_proc+0x46c>)
  404be2:	4798      	blx	r3
  404be4:	3501      	adds	r5, #1
  404be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bea:	429d      	cmp	r5, r3
  404bec:	dbf6      	blt.n	404bdc <indev_encoder_proc+0x40c>
  404bee:	e631      	b.n	404854 <indev_encoder_proc+0x84>
            if(data->enc_diff < 0) {
  404bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bf4:	2b00      	cmp	r3, #0
  404bf6:	db0e      	blt.n	404c16 <indev_encoder_proc+0x446>
            else if(data->enc_diff > 0) {
  404bf8:	2b00      	cmp	r3, #0
  404bfa:	f77f ae2b 	ble.w	404854 <indev_encoder_proc+0x84>
  404bfe:	2500      	movs	r5, #0
  404c00:	e00f      	b.n	404c22 <indev_encoder_proc+0x452>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
  404c02:	4630      	mov	r0, r6
  404c04:	4b10      	ldr	r3, [pc, #64]	; (404c48 <indev_encoder_proc+0x478>)
  404c06:	4798      	blx	r3
  404c08:	3501      	adds	r5, #1
  404c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c0e:	425b      	negs	r3, r3
  404c10:	429d      	cmp	r5, r3
  404c12:	dbf6      	blt.n	404c02 <indev_encoder_proc+0x432>
  404c14:	e61e      	b.n	404854 <indev_encoder_proc+0x84>
  404c16:	2500      	movs	r5, #0
  404c18:	e7f7      	b.n	404c0a <indev_encoder_proc+0x43a>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
  404c1a:	4630      	mov	r0, r6
  404c1c:	4b0b      	ldr	r3, [pc, #44]	; (404c4c <indev_encoder_proc+0x47c>)
  404c1e:	4798      	blx	r3
  404c20:	3501      	adds	r5, #1
  404c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c26:	429d      	cmp	r5, r3
  404c28:	dbf7      	blt.n	404c1a <indev_encoder_proc+0x44a>
  404c2a:	e613      	b.n	404854 <indev_encoder_proc+0x84>
  404c2c:	0041638d 	.word	0x0041638d
  404c30:	2040c40c 	.word	0x2040c40c
  404c34:	00403b49 	.word	0x00403b49
  404c38:	0040589d 	.word	0x0040589d
  404c3c:	0040399d 	.word	0x0040399d
  404c40:	004039d5 	.word	0x004039d5
  404c44:	00403ae1 	.word	0x00403ae1
  404c48:	00403805 	.word	0x00403805
  404c4c:	004037ed 	.word	0x004037ed

00404c50 <lv_indev_get_act>:
}
  404c50:	4b01      	ldr	r3, [pc, #4]	; (404c58 <lv_indev_get_act+0x8>)
  404c52:	6818      	ldr	r0, [r3, #0]
  404c54:	4770      	bx	lr
  404c56:	bf00      	nop
  404c58:	2040c408 	.word	0x2040c408

00404c5c <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
  404c5c:	b108      	cbz	r0, 404c62 <lv_indev_get_type+0x6>
    return indev->driver.type;
  404c5e:	7800      	ldrb	r0, [r0, #0]
  404c60:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
  404c62:	2000      	movs	r0, #0
}
  404c64:	4770      	bx	lr
	...

00404c68 <lv_indev_reset>:
    if(indev) {
  404c68:	b1b0      	cbz	r0, 404c98 <lv_indev_reset+0x30>
  404c6a:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
  404c6c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  404c70:	f042 0202 	orr.w	r2, r2, #2
  404c74:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
  404c78:	4a17      	ldr	r2, [pc, #92]	; (404cd8 <lv_indev_reset+0x70>)
  404c7a:	6812      	ldr	r2, [r2, #0]
  404c7c:	4290      	cmp	r0, r2
  404c7e:	d004      	beq.n	404c8a <lv_indev_reset+0x22>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
  404c80:	b139      	cbz	r1, 404c92 <lv_indev_reset+0x2a>
  404c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404c84:	4291      	cmp	r1, r2
  404c86:	d004      	beq.n	404c92 <lv_indev_reset+0x2a>
  404c88:	4770      	bx	lr
        if(indev_act == indev) indev_obj_act = NULL;
  404c8a:	2000      	movs	r0, #0
  404c8c:	4a13      	ldr	r2, [pc, #76]	; (404cdc <lv_indev_reset+0x74>)
  404c8e:	6010      	str	r0, [r2, #0]
  404c90:	e7f6      	b.n	404c80 <lv_indev_reset+0x18>
            indev->proc.types.pointer.last_pressed = NULL;
  404c92:	2200      	movs	r2, #0
  404c94:	63da      	str	r2, [r3, #60]	; 0x3c
  404c96:	4770      	bx	lr
{
  404c98:	b510      	push	{r4, lr}
  404c9a:	460c      	mov	r4, r1
        lv_indev_t * i = lv_indev_get_next(NULL);
  404c9c:	2000      	movs	r0, #0
  404c9e:	4b10      	ldr	r3, [pc, #64]	; (404ce0 <lv_indev_reset+0x78>)
  404ca0:	4798      	blx	r3
        while(i) {
  404ca2:	e007      	b.n	404cb4 <lv_indev_reset+0x4c>
            if(indev_act == i) indev_obj_act = NULL;
  404ca4:	2200      	movs	r2, #0
  404ca6:	4b0d      	ldr	r3, [pc, #52]	; (404cdc <lv_indev_reset+0x74>)
  404ca8:	601a      	str	r2, [r3, #0]
  404caa:	e00e      	b.n	404cca <lv_indev_reset+0x62>
                i->proc.types.pointer.last_pressed = NULL;
  404cac:	2300      	movs	r3, #0
  404cae:	63c3      	str	r3, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
  404cb0:	4b0b      	ldr	r3, [pc, #44]	; (404ce0 <lv_indev_reset+0x78>)
  404cb2:	4798      	blx	r3
        while(i) {
  404cb4:	b178      	cbz	r0, 404cd6 <lv_indev_reset+0x6e>
            i->proc.reset_query = 1;
  404cb6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404cba:	f043 0302 	orr.w	r3, r3, #2
  404cbe:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
  404cc2:	4b05      	ldr	r3, [pc, #20]	; (404cd8 <lv_indev_reset+0x70>)
  404cc4:	681b      	ldr	r3, [r3, #0]
  404cc6:	4298      	cmp	r0, r3
  404cc8:	d0ec      	beq.n	404ca4 <lv_indev_reset+0x3c>
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
  404cca:	2c00      	cmp	r4, #0
  404ccc:	d0ee      	beq.n	404cac <lv_indev_reset+0x44>
  404cce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  404cd0:	429c      	cmp	r4, r3
  404cd2:	d1ed      	bne.n	404cb0 <lv_indev_reset+0x48>
  404cd4:	e7ea      	b.n	404cac <lv_indev_reset+0x44>
  404cd6:	bd10      	pop	{r4, pc}
  404cd8:	2040c408 	.word	0x2040c408
  404cdc:	2040c40c 	.word	0x2040c40c
  404ce0:	00415071 	.word	0x00415071

00404ce4 <_lv_indev_init>:
{
  404ce4:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
  404ce6:	2100      	movs	r1, #0
  404ce8:	4608      	mov	r0, r1
  404cea:	4b01      	ldr	r3, [pc, #4]	; (404cf0 <_lv_indev_init+0xc>)
  404cec:	4798      	blx	r3
  404cee:	bd08      	pop	{r3, pc}
  404cf0:	00404c69 	.word	0x00404c69

00404cf4 <lv_indev_reset_long_press>:
{
  404cf4:	b538      	push	{r3, r4, r5, lr}
  404cf6:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
  404cf8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404cfc:	f36f 0300 	bfc	r3, #0, #1
  404d00:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
  404d04:	4d02      	ldr	r5, [pc, #8]	; (404d10 <lv_indev_reset_long_press+0x1c>)
  404d06:	47a8      	blx	r5
  404d08:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
  404d0a:	47a8      	blx	r5
  404d0c:	64a0      	str	r0, [r4, #72]	; 0x48
  404d0e:	bd38      	pop	{r3, r4, r5, pc}
  404d10:	004150fd 	.word	0x004150fd

00404d14 <lv_indev_get_point>:
    if(indev == NULL) {
  404d14:	b158      	cbz	r0, 404d2e <lv_indev_get_point+0x1a>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
  404d16:	7802      	ldrb	r2, [r0, #0]
  404d18:	2a01      	cmp	r2, #1
  404d1a:	bf18      	it	ne
  404d1c:	2a03      	cmpne	r2, #3
  404d1e:	d10a      	bne.n	404d36 <lv_indev_get_point+0x22>
        point->x = indev->proc.types.pointer.act_point.x;
  404d20:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
  404d24:	800a      	strh	r2, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
  404d26:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  404d2a:	804b      	strh	r3, [r1, #2]
  404d2c:	4770      	bx	lr
        point->x = 0;
  404d2e:	2300      	movs	r3, #0
  404d30:	800b      	strh	r3, [r1, #0]
        point->y = 0;
  404d32:	804b      	strh	r3, [r1, #2]
        return;
  404d34:	4770      	bx	lr
        point->x = -1;
  404d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404d3a:	800b      	strh	r3, [r1, #0]
        point->y = -1;
  404d3c:	804b      	strh	r3, [r1, #2]
  404d3e:	4770      	bx	lr

00404d40 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
  404d40:	b148      	cbz	r0, 404d56 <lv_indev_is_dragging+0x16>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  404d42:	7803      	ldrb	r3, [r0, #0]
  404d44:	2b01      	cmp	r3, #1
  404d46:	bf18      	it	ne
  404d48:	2b03      	cmpne	r3, #3
  404d4a:	d106      	bne.n	404d5a <lv_indev_is_dragging+0x1a>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
  404d4c:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
  404d50:	f3c0 0040 	ubfx	r0, r0, #1, #1
  404d54:	4770      	bx	lr
    if(indev == NULL) return false;
  404d56:	2000      	movs	r0, #0
  404d58:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  404d5a:	2000      	movs	r0, #0
}
  404d5c:	4770      	bx	lr
	...

00404d60 <lv_indev_get_obj_act>:
}
  404d60:	4b01      	ldr	r3, [pc, #4]	; (404d68 <lv_indev_get_obj_act+0x8>)
  404d62:	6818      	ldr	r0, [r3, #0]
  404d64:	4770      	bx	lr
  404d66:	bf00      	nop
  404d68:	2040c40c 	.word	0x2040c40c

00404d6c <lv_indev_search_obj>:
{
  404d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d70:	4680      	mov	r8, r0
  404d72:	460f      	mov	r7, r1
    if(lv_obj_hittest(obj, point)) {
  404d74:	4b21      	ldr	r3, [pc, #132]	; (404dfc <lv_indev_search_obj+0x90>)
  404d76:	4798      	blx	r3
  404d78:	2800      	cmp	r0, #0
  404d7a:	d03c      	beq.n	404df6 <lv_indev_search_obj+0x8a>
        _LV_LL_READ(obj->child_ll, i) {
  404d7c:	f108 0604 	add.w	r6, r8, #4
  404d80:	4630      	mov	r0, r6
  404d82:	4b1f      	ldr	r3, [pc, #124]	; (404e00 <lv_indev_search_obj+0x94>)
  404d84:	4798      	blx	r3
  404d86:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  404d88:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  404d8a:	b15c      	cbz	r4, 404da4 <lv_indev_search_obj+0x38>
            found_p = lv_indev_search_obj(i, point);
  404d8c:	4639      	mov	r1, r7
  404d8e:	4620      	mov	r0, r4
  404d90:	f7ff ffec 	bl	404d6c <lv_indev_search_obj>
            if(found_p != NULL) {
  404d94:	4605      	mov	r5, r0
  404d96:	b928      	cbnz	r0, 404da4 <lv_indev_search_obj+0x38>
        _LV_LL_READ(obj->child_ll, i) {
  404d98:	4621      	mov	r1, r4
  404d9a:	4630      	mov	r0, r6
  404d9c:	4b19      	ldr	r3, [pc, #100]	; (404e04 <lv_indev_search_obj+0x98>)
  404d9e:	4798      	blx	r3
  404da0:	4604      	mov	r4, r0
  404da2:	e7f2      	b.n	404d8a <lv_indev_search_obj+0x1e>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  404da4:	b115      	cbz	r5, 404dac <lv_indev_search_obj+0x40>
}
  404da6:	4628      	mov	r0, r5
  404da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  404dac:	4640      	mov	r0, r8
  404dae:	4b16      	ldr	r3, [pc, #88]	; (404e08 <lv_indev_search_obj+0x9c>)
  404db0:	4798      	blx	r3
  404db2:	2800      	cmp	r0, #0
  404db4:	d0f7      	beq.n	404da6 <lv_indev_search_obj+0x3a>
  404db6:	4644      	mov	r4, r8
  404db8:	e003      	b.n	404dc2 <lv_indev_search_obj+0x56>
                hidden_i = lv_obj_get_parent(hidden_i);
  404dba:	4620      	mov	r0, r4
  404dbc:	4b13      	ldr	r3, [pc, #76]	; (404e0c <lv_indev_search_obj+0xa0>)
  404dbe:	4798      	blx	r3
  404dc0:	4604      	mov	r4, r0
            while(hidden_i != NULL) {
  404dc2:	b124      	cbz	r4, 404dce <lv_indev_search_obj+0x62>
                if(lv_obj_get_hidden(hidden_i) == true) break;
  404dc4:	4620      	mov	r0, r4
  404dc6:	4b12      	ldr	r3, [pc, #72]	; (404e10 <lv_indev_search_obj+0xa4>)
  404dc8:	4798      	blx	r3
  404dca:	2800      	cmp	r0, #0
  404dcc:	d0f5      	beq.n	404dba <lv_indev_search_obj+0x4e>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
  404dce:	2140      	movs	r1, #64	; 0x40
  404dd0:	4640      	mov	r0, r8
  404dd2:	4b10      	ldr	r3, [pc, #64]	; (404e14 <lv_indev_search_obj+0xa8>)
  404dd4:	4798      	blx	r3
  404dd6:	b950      	cbnz	r0, 404dee <lv_indev_search_obj+0x82>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
  404dd8:	2c00      	cmp	r4, #0
  404dda:	d1e4      	bne.n	404da6 <lv_indev_search_obj+0x3a>
  404ddc:	2100      	movs	r1, #0
  404dde:	4640      	mov	r0, r8
  404de0:	4b0d      	ldr	r3, [pc, #52]	; (404e18 <lv_indev_search_obj+0xac>)
  404de2:	4798      	blx	r3
  404de4:	f010 0f20 	tst.w	r0, #32
  404de8:	d1dd      	bne.n	404da6 <lv_indev_search_obj+0x3a>
  404dea:	4645      	mov	r5, r8
  404dec:	e7db      	b.n	404da6 <lv_indev_search_obj+0x3a>
                if(hidden_i == NULL) found_p = obj;
  404dee:	2c00      	cmp	r4, #0
  404df0:	d1d9      	bne.n	404da6 <lv_indev_search_obj+0x3a>
  404df2:	4645      	mov	r5, r8
    return found_p;
  404df4:	e7d7      	b.n	404da6 <lv_indev_search_obj+0x3a>
    lv_obj_t * found_p = NULL;
  404df6:	2500      	movs	r5, #0
  404df8:	e7d5      	b.n	404da6 <lv_indev_search_obj+0x3a>
  404dfa:	bf00      	nop
  404dfc:	004082f1 	.word	0x004082f1
  404e00:	00416189 	.word	0x00416189
  404e04:	0041619d 	.word	0x0041619d
  404e08:	0040671d 	.word	0x0040671d
  404e0c:	004059ad 	.word	0x004059ad
  404e10:	00405dc9 	.word	0x00405dc9
  404e14:	00406dad 	.word	0x00406dad
  404e18:	00406de1 	.word	0x00406de1

00404e1c <indev_proc_press>:
    indev_obj_act = proc->types.pointer.act_obj;
  404e1c:	6983      	ldr	r3, [r0, #24]
  404e1e:	4a5d      	ldr	r2, [pc, #372]	; (404f94 <indev_proc_press+0x178>)
  404e20:	6013      	str	r3, [r2, #0]
    if(proc->wait_until_release != 0) return;
  404e22:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  404e26:	f012 0f08 	tst.w	r2, #8
  404e2a:	f040 81bc 	bne.w	4051a6 <indev_proc_press+0x38a>
{
  404e2e:	b570      	push	{r4, r5, r6, lr}
  404e30:	4604      	mov	r4, r0
    lv_disp_t * disp = indev_act->driver.disp;
  404e32:	4a59      	ldr	r2, [pc, #356]	; (404f98 <indev_proc_press+0x17c>)
  404e34:	6812      	ldr	r2, [r2, #0]
  404e36:	68d5      	ldr	r5, [r2, #12]
    if(indev_obj_act == NULL) {
  404e38:	b343      	cbz	r3, 404e8c <indev_proc_press+0x70>
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404e3a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
  404e3e:	f012 0f02 	tst.w	r2, #2
  404e42:	d045      	beq.n	404ed0 <indev_proc_press+0xb4>
    bool new_obj_searched = false;
  404e44:	2300      	movs	r3, #0
    if(new_obj_searched && proc->types.pointer.last_obj) {
  404e46:	b13b      	cbz	r3, 404e58 <indev_proc_press+0x3c>
  404e48:	69e3      	ldr	r3, [r4, #28]
  404e4a:	b12b      	cbz	r3, 404e58 <indev_proc_press+0x3c>
        proc->types.pointer.drag_throw_vect.x = 0;
  404e4c:	2300      	movs	r3, #0
  404e4e:	82a3      	strh	r3, [r4, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
  404e50:	82e3      	strh	r3, [r4, #22]
        indev_drag_throw(proc);
  404e52:	4620      	mov	r0, r4
  404e54:	4b51      	ldr	r3, [pc, #324]	; (404f9c <indev_proc_press+0x180>)
  404e56:	4798      	blx	r3
    if(indev_obj_act != proc->types.pointer.act_obj) {
  404e58:	69a5      	ldr	r5, [r4, #24]
  404e5a:	4b4e      	ldr	r3, [pc, #312]	; (404f94 <indev_proc_press+0x178>)
  404e5c:	681b      	ldr	r3, [r3, #0]
  404e5e:	429d      	cmp	r5, r3
  404e60:	f000 80de 	beq.w	405020 <indev_proc_press+0x204>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
  404e64:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  404e68:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
  404e6a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  404e6e:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
  404e70:	2d00      	cmp	r5, #0
  404e72:	d060      	beq.n	404f36 <indev_proc_press+0x11a>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
  404e74:	69eb      	ldr	r3, [r5, #28]
  404e76:	4a48      	ldr	r2, [pc, #288]	; (404f98 <indev_proc_press+0x17c>)
  404e78:	6812      	ldr	r2, [r2, #0]
  404e7a:	210d      	movs	r1, #13
  404e7c:	4628      	mov	r0, r5
  404e7e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404e80:	4620      	mov	r0, r4
  404e82:	4b47      	ldr	r3, [pc, #284]	; (404fa0 <indev_proc_press+0x184>)
  404e84:	4798      	blx	r3
  404e86:	2800      	cmp	r0, #0
  404e88:	d04b      	beq.n	404f22 <indev_proc_press+0x106>
  404e8a:	bd70      	pop	{r4, r5, r6, pc}
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404e8c:	4628      	mov	r0, r5
  404e8e:	4b45      	ldr	r3, [pc, #276]	; (404fa4 <indev_proc_press+0x188>)
  404e90:	4798      	blx	r3
  404e92:	1d26      	adds	r6, r4, #4
  404e94:	4631      	mov	r1, r6
  404e96:	4b44      	ldr	r3, [pc, #272]	; (404fa8 <indev_proc_press+0x18c>)
  404e98:	4798      	blx	r3
  404e9a:	4b3e      	ldr	r3, [pc, #248]	; (404f94 <indev_proc_press+0x178>)
  404e9c:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404e9e:	b120      	cbz	r0, 404eaa <indev_proc_press+0x8e>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404ea0:	4b3c      	ldr	r3, [pc, #240]	; (404f94 <indev_proc_press+0x178>)
  404ea2:	681b      	ldr	r3, [r3, #0]
  404ea4:	b153      	cbz	r3, 404ebc <indev_proc_press+0xa0>
        new_obj_searched = true;
  404ea6:	2301      	movs	r3, #1
  404ea8:	e7cd      	b.n	404e46 <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404eaa:	4628      	mov	r0, r5
  404eac:	4b3f      	ldr	r3, [pc, #252]	; (404fac <indev_proc_press+0x190>)
  404eae:	4798      	blx	r3
  404eb0:	4631      	mov	r1, r6
  404eb2:	4b3d      	ldr	r3, [pc, #244]	; (404fa8 <indev_proc_press+0x18c>)
  404eb4:	4798      	blx	r3
  404eb6:	4b37      	ldr	r3, [pc, #220]	; (404f94 <indev_proc_press+0x178>)
  404eb8:	6018      	str	r0, [r3, #0]
  404eba:	e7f1      	b.n	404ea0 <indev_proc_press+0x84>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404ebc:	4628      	mov	r0, r5
  404ebe:	4b3c      	ldr	r3, [pc, #240]	; (404fb0 <indev_proc_press+0x194>)
  404ec0:	4798      	blx	r3
  404ec2:	4631      	mov	r1, r6
  404ec4:	4b38      	ldr	r3, [pc, #224]	; (404fa8 <indev_proc_press+0x18c>)
  404ec6:	4798      	blx	r3
  404ec8:	4b32      	ldr	r3, [pc, #200]	; (404f94 <indev_proc_press+0x178>)
  404eca:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404ecc:	2301      	movs	r3, #1
  404ece:	e7ba      	b.n	404e46 <indev_proc_press+0x2a>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
  404ed0:	2110      	movs	r1, #16
  404ed2:	4618      	mov	r0, r3
  404ed4:	4b37      	ldr	r3, [pc, #220]	; (404fb4 <indev_proc_press+0x198>)
  404ed6:	4798      	blx	r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404ed8:	b108      	cbz	r0, 404ede <indev_proc_press+0xc2>
    bool new_obj_searched = false;
  404eda:	2300      	movs	r3, #0
  404edc:	e7b3      	b.n	404e46 <indev_proc_press+0x2a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404ede:	4628      	mov	r0, r5
  404ee0:	4b30      	ldr	r3, [pc, #192]	; (404fa4 <indev_proc_press+0x188>)
  404ee2:	4798      	blx	r3
  404ee4:	1d26      	adds	r6, r4, #4
  404ee6:	4631      	mov	r1, r6
  404ee8:	4b2f      	ldr	r3, [pc, #188]	; (404fa8 <indev_proc_press+0x18c>)
  404eea:	4798      	blx	r3
  404eec:	4b29      	ldr	r3, [pc, #164]	; (404f94 <indev_proc_press+0x178>)
  404eee:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404ef0:	b120      	cbz	r0, 404efc <indev_proc_press+0xe0>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404ef2:	4b28      	ldr	r3, [pc, #160]	; (404f94 <indev_proc_press+0x178>)
  404ef4:	681b      	ldr	r3, [r3, #0]
  404ef6:	b153      	cbz	r3, 404f0e <indev_proc_press+0xf2>
        new_obj_searched = true;
  404ef8:	2301      	movs	r3, #1
  404efa:	e7a4      	b.n	404e46 <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404efc:	4628      	mov	r0, r5
  404efe:	4b2b      	ldr	r3, [pc, #172]	; (404fac <indev_proc_press+0x190>)
  404f00:	4798      	blx	r3
  404f02:	4631      	mov	r1, r6
  404f04:	4b28      	ldr	r3, [pc, #160]	; (404fa8 <indev_proc_press+0x18c>)
  404f06:	4798      	blx	r3
  404f08:	4b22      	ldr	r3, [pc, #136]	; (404f94 <indev_proc_press+0x178>)
  404f0a:	6018      	str	r0, [r3, #0]
  404f0c:	e7f1      	b.n	404ef2 <indev_proc_press+0xd6>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404f0e:	4628      	mov	r0, r5
  404f10:	4b27      	ldr	r3, [pc, #156]	; (404fb0 <indev_proc_press+0x194>)
  404f12:	4798      	blx	r3
  404f14:	4631      	mov	r1, r6
  404f16:	4b24      	ldr	r3, [pc, #144]	; (404fa8 <indev_proc_press+0x18c>)
  404f18:	4798      	blx	r3
  404f1a:	4b1e      	ldr	r3, [pc, #120]	; (404f94 <indev_proc_press+0x178>)
  404f1c:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404f1e:	2301      	movs	r3, #1
  404f20:	e791      	b.n	404e46 <indev_proc_press+0x2a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
  404f22:	2200      	movs	r2, #0
  404f24:	2102      	movs	r1, #2
  404f26:	4628      	mov	r0, r5
  404f28:	4b23      	ldr	r3, [pc, #140]	; (404fb8 <indev_proc_press+0x19c>)
  404f2a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404f2c:	4620      	mov	r0, r4
  404f2e:	4b1c      	ldr	r3, [pc, #112]	; (404fa0 <indev_proc_press+0x184>)
  404f30:	4798      	blx	r3
  404f32:	2800      	cmp	r0, #0
  404f34:	d1a9      	bne.n	404e8a <indev_proc_press+0x6e>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
  404f36:	4b17      	ldr	r3, [pc, #92]	; (404f94 <indev_proc_press+0x178>)
  404f38:	681b      	ldr	r3, [r3, #0]
  404f3a:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
  404f3c:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
  404f3e:	2b00      	cmp	r3, #0
  404f40:	d06e      	beq.n	405020 <indev_proc_press+0x204>
            proc->pr_timestamp                 = lv_tick_get();
  404f42:	4b1e      	ldr	r3, [pc, #120]	; (404fbc <indev_proc_press+0x1a0>)
  404f44:	4798      	blx	r3
  404f46:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
  404f48:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404f4c:	f36f 0300 	bfc	r3, #0, #1
  404f50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
  404f54:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
  404f58:	2300      	movs	r3, #0
  404f5a:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
  404f5c:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  404f5e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  404f62:	2103      	movs	r1, #3
  404f64:	f361 0284 	bfi	r2, r1, #2, #3
            proc->types.pointer.gesture_sent   = 0;
  404f68:	f363 1245 	bfi	r2, r3, #5, #1
  404f6c:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
  404f70:	84e3      	strh	r3, [r4, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
  404f72:	8523      	strh	r3, [r4, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
  404f74:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
  404f76:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * i        = indev_obj_act;
  404f78:	4a06      	ldr	r2, [pc, #24]	; (404f94 <indev_proc_press+0x178>)
  404f7a:	6810      	ldr	r0, [r2, #0]
            lv_obj_t * last_top = NULL;
  404f7c:	461d      	mov	r5, r3
            while(i != NULL) {
  404f7e:	e001      	b.n	404f84 <indev_proc_press+0x168>
                i = lv_obj_get_parent(i);
  404f80:	4b0f      	ldr	r3, [pc, #60]	; (404fc0 <indev_proc_press+0x1a4>)
  404f82:	4798      	blx	r3
            while(i != NULL) {
  404f84:	b1f0      	cbz	r0, 404fc4 <indev_proc_press+0x1a8>
                if(i->top) last_top = i;
  404f86:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  404f8a:	f013 0f20 	tst.w	r3, #32
  404f8e:	d0f7      	beq.n	404f80 <indev_proc_press+0x164>
  404f90:	4605      	mov	r5, r0
  404f92:	e7f5      	b.n	404f80 <indev_proc_press+0x164>
  404f94:	2040c40c 	.word	0x2040c40c
  404f98:	2040c408 	.word	0x2040c408
  404f9c:	00403b8d 	.word	0x00403b8d
  404fa0:	00403b49 	.word	0x00403b49
  404fa4:	004036ad 	.word	0x004036ad
  404fa8:	00404d6d 	.word	0x00404d6d
  404fac:	00403691 	.word	0x00403691
  404fb0:	00403659 	.word	0x00403659
  404fb4:	00406dad 	.word	0x00406dad
  404fb8:	0040589d 	.word	0x0040589d
  404fbc:	004150fd 	.word	0x004150fd
  404fc0:	004059ad 	.word	0x004059ad
            if(last_top != NULL) {
  404fc4:	b115      	cbz	r5, 404fcc <indev_proc_press+0x1b0>
                lv_obj_move_foreground(last_top);
  404fc6:	4628      	mov	r0, r5
  404fc8:	4b77      	ldr	r3, [pc, #476]	; (4051a8 <indev_proc_press+0x38c>)
  404fca:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
  404fcc:	4b77      	ldr	r3, [pc, #476]	; (4051ac <indev_proc_press+0x390>)
  404fce:	6818      	ldr	r0, [r3, #0]
  404fd0:	69c3      	ldr	r3, [r0, #28]
  404fd2:	4a77      	ldr	r2, [pc, #476]	; (4051b0 <indev_proc_press+0x394>)
  404fd4:	6812      	ldr	r2, [r2, #0]
  404fd6:	210b      	movs	r1, #11
  404fd8:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404fda:	4620      	mov	r0, r4
  404fdc:	4b75      	ldr	r3, [pc, #468]	; (4051b4 <indev_proc_press+0x398>)
  404fde:	4798      	blx	r3
  404fe0:	2800      	cmp	r0, #0
  404fe2:	f47f af52 	bne.w	404e8a <indev_proc_press+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404fe6:	2200      	movs	r2, #0
  404fe8:	4611      	mov	r1, r2
  404fea:	4b70      	ldr	r3, [pc, #448]	; (4051ac <indev_proc_press+0x390>)
  404fec:	6818      	ldr	r0, [r3, #0]
  404fee:	4b72      	ldr	r3, [pc, #456]	; (4051b8 <indev_proc_press+0x39c>)
  404ff0:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404ff2:	4620      	mov	r0, r4
  404ff4:	4b6f      	ldr	r3, [pc, #444]	; (4051b4 <indev_proc_press+0x398>)
  404ff6:	4798      	blx	r3
  404ff8:	2800      	cmp	r0, #0
  404ffa:	f47f af46 	bne.w	404e8a <indev_proc_press+0x6e>
            if(indev_act->proc.wait_until_release) return;
  404ffe:	4b6c      	ldr	r3, [pc, #432]	; (4051b0 <indev_proc_press+0x394>)
  405000:	6818      	ldr	r0, [r3, #0]
  405002:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  405006:	f013 0f08 	tst.w	r3, #8
  40500a:	f47f af3e 	bne.w	404e8a <indev_proc_press+0x6e>
            indev_click_focus(&indev_act->proc);
  40500e:	301c      	adds	r0, #28
  405010:	4b6a      	ldr	r3, [pc, #424]	; (4051bc <indev_proc_press+0x3a0>)
  405012:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  405014:	4620      	mov	r0, r4
  405016:	4b67      	ldr	r3, [pc, #412]	; (4051b4 <indev_proc_press+0x398>)
  405018:	4798      	blx	r3
  40501a:	2800      	cmp	r0, #0
  40501c:	f47f af35 	bne.w	404e8a <indev_proc_press+0x6e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
  405020:	88a0      	ldrh	r0, [r4, #4]
  405022:	8923      	ldrh	r3, [r4, #8]
  405024:	1ac0      	subs	r0, r0, r3
  405026:	b200      	sxth	r0, r0
  405028:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
  40502a:	88e1      	ldrh	r1, [r4, #6]
  40502c:	8963      	ldrh	r3, [r4, #10]
  40502e:	1ac9      	subs	r1, r1, r3
  405030:	b209      	sxth	r1, r1
  405032:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
  405034:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  405038:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40503c:	10d2      	asrs	r2, r2, #3
  40503e:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
  405040:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  405044:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  405048:	10db      	asrs	r3, r3, #3
  40504a:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
  40504c:	2a00      	cmp	r2, #0
  40504e:	db7b      	blt.n	405148 <indev_proc_press+0x32c>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
  405050:	2a00      	cmp	r2, #0
  405052:	dd01      	ble.n	405058 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.x--;
  405054:	3a01      	subs	r2, #1
  405056:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
  405058:	2b00      	cmp	r3, #0
  40505a:	db78      	blt.n	40514e <indev_proc_press+0x332>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
  40505c:	2b00      	cmp	r3, #0
  40505e:	dd01      	ble.n	405064 <indev_proc_press+0x248>
        proc->types.pointer.drag_throw_vect.y--;
  405060:	3b01      	subs	r3, #1
  405062:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
  405064:	8aa3      	ldrh	r3, [r4, #20]
  405066:	eb03 0060 	add.w	r0, r3, r0, asr #1
  40506a:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
  40506c:	8ae3      	ldrh	r3, [r4, #22]
  40506e:	eb03 0161 	add.w	r1, r3, r1, asr #1
  405072:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
  405074:	4b4d      	ldr	r3, [pc, #308]	; (4051ac <indev_proc_press+0x390>)
  405076:	6818      	ldr	r0, [r3, #0]
  405078:	2800      	cmp	r0, #0
  40507a:	f43f af06 	beq.w	404e8a <indev_proc_press+0x6e>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
  40507e:	69c3      	ldr	r3, [r0, #28]
  405080:	4a4b      	ldr	r2, [pc, #300]	; (4051b0 <indev_proc_press+0x394>)
  405082:	6812      	ldr	r2, [r2, #0]
  405084:	210c      	movs	r1, #12
  405086:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  405088:	4620      	mov	r0, r4
  40508a:	4b4a      	ldr	r3, [pc, #296]	; (4051b4 <indev_proc_press+0x398>)
  40508c:	4798      	blx	r3
  40508e:	2800      	cmp	r0, #0
  405090:	f47f aefb 	bne.w	404e8a <indev_proc_press+0x6e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  405094:	2200      	movs	r2, #0
  405096:	2101      	movs	r1, #1
  405098:	4b44      	ldr	r3, [pc, #272]	; (4051ac <indev_proc_press+0x390>)
  40509a:	6818      	ldr	r0, [r3, #0]
  40509c:	4b46      	ldr	r3, [pc, #280]	; (4051b8 <indev_proc_press+0x39c>)
  40509e:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4050a0:	4620      	mov	r0, r4
  4050a2:	4b44      	ldr	r3, [pc, #272]	; (4051b4 <indev_proc_press+0x398>)
  4050a4:	4798      	blx	r3
  4050a6:	2800      	cmp	r0, #0
  4050a8:	f47f aeef 	bne.w	404e8a <indev_proc_press+0x6e>
        if(indev_act->proc.wait_until_release) return;
  4050ac:	4b40      	ldr	r3, [pc, #256]	; (4051b0 <indev_proc_press+0x394>)
  4050ae:	681b      	ldr	r3, [r3, #0]
  4050b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  4050b4:	f013 0f08 	tst.w	r3, #8
  4050b8:	f47f aee7 	bne.w	404e8a <indev_proc_press+0x6e>
        indev_drag(proc);
  4050bc:	4620      	mov	r0, r4
  4050be:	4b40      	ldr	r3, [pc, #256]	; (4051c0 <indev_proc_press+0x3a4>)
  4050c0:	4798      	blx	r3
        indev_gesture(proc);
  4050c2:	4620      	mov	r0, r4
  4050c4:	4b3f      	ldr	r3, [pc, #252]	; (4051c4 <indev_proc_press+0x3a8>)
  4050c6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4050c8:	4620      	mov	r0, r4
  4050ca:	4b3a      	ldr	r3, [pc, #232]	; (4051b4 <indev_proc_press+0x398>)
  4050cc:	4798      	blx	r3
  4050ce:	2800      	cmp	r0, #0
  4050d0:	f47f aedb 	bne.w	404e8a <indev_proc_press+0x6e>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
  4050d4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4050d8:	f013 0f02 	tst.w	r3, #2
  4050dc:	d104      	bne.n	4050e8 <indev_proc_press+0x2cc>
  4050de:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4050e2:	f013 0f01 	tst.w	r3, #1
  4050e6:	d035      	beq.n	405154 <indev_proc_press+0x338>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
  4050e8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4050ec:	f013 0f02 	tst.w	r3, #2
  4050f0:	f47f aecb 	bne.w	404e8a <indev_proc_press+0x6e>
  4050f4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4050f8:	f013 0f01 	tst.w	r3, #1
  4050fc:	f43f aec5 	beq.w	404e8a <indev_proc_press+0x6e>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
  405100:	6b20      	ldr	r0, [r4, #48]	; 0x30
  405102:	4b31      	ldr	r3, [pc, #196]	; (4051c8 <indev_proc_press+0x3ac>)
  405104:	4798      	blx	r3
  405106:	4b2a      	ldr	r3, [pc, #168]	; (4051b0 <indev_proc_press+0x394>)
  405108:	681a      	ldr	r2, [r3, #0]
  40510a:	8b53      	ldrh	r3, [r2, #26]
  40510c:	4298      	cmp	r0, r3
  40510e:	f67f aebc 	bls.w	404e8a <indev_proc_press+0x6e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
  405112:	4b26      	ldr	r3, [pc, #152]	; (4051ac <indev_proc_press+0x390>)
  405114:	6818      	ldr	r0, [r3, #0]
  405116:	69c3      	ldr	r3, [r0, #28]
  405118:	2110      	movs	r1, #16
  40511a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40511c:	4620      	mov	r0, r4
  40511e:	4b25      	ldr	r3, [pc, #148]	; (4051b4 <indev_proc_press+0x398>)
  405120:	4798      	blx	r3
  405122:	2800      	cmp	r0, #0
  405124:	f47f aeb1 	bne.w	404e8a <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  405128:	2200      	movs	r2, #0
  40512a:	2105      	movs	r1, #5
  40512c:	4b1f      	ldr	r3, [pc, #124]	; (4051ac <indev_proc_press+0x390>)
  40512e:	6818      	ldr	r0, [r3, #0]
  405130:	4b21      	ldr	r3, [pc, #132]	; (4051b8 <indev_proc_press+0x39c>)
  405132:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  405134:	4620      	mov	r0, r4
  405136:	4b1f      	ldr	r3, [pc, #124]	; (4051b4 <indev_proc_press+0x398>)
  405138:	4798      	blx	r3
  40513a:	2800      	cmp	r0, #0
  40513c:	f47f aea5 	bne.w	404e8a <indev_proc_press+0x6e>
                proc->longpr_rep_timestamp = lv_tick_get();
  405140:	4b22      	ldr	r3, [pc, #136]	; (4051cc <indev_proc_press+0x3b0>)
  405142:	4798      	blx	r3
  405144:	6320      	str	r0, [r4, #48]	; 0x30
  405146:	e6a0      	b.n	404e8a <indev_proc_press+0x6e>
        proc->types.pointer.drag_throw_vect.x++;
  405148:	3201      	adds	r2, #1
  40514a:	82a2      	strh	r2, [r4, #20]
  40514c:	e784      	b.n	405058 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.y++;
  40514e:	3301      	adds	r3, #1
  405150:	82e3      	strh	r3, [r4, #22]
  405152:	e787      	b.n	405064 <indev_proc_press+0x248>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
  405154:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  405156:	4b1c      	ldr	r3, [pc, #112]	; (4051c8 <indev_proc_press+0x3ac>)
  405158:	4798      	blx	r3
  40515a:	4b15      	ldr	r3, [pc, #84]	; (4051b0 <indev_proc_press+0x394>)
  40515c:	681a      	ldr	r2, [r3, #0]
  40515e:	8b13      	ldrh	r3, [r2, #24]
  405160:	4298      	cmp	r0, r3
  405162:	d9c1      	bls.n	4050e8 <indev_proc_press+0x2cc>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
  405164:	4b11      	ldr	r3, [pc, #68]	; (4051ac <indev_proc_press+0x390>)
  405166:	6818      	ldr	r0, [r3, #0]
  405168:	69c3      	ldr	r3, [r0, #28]
  40516a:	210f      	movs	r1, #15
  40516c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40516e:	4620      	mov	r0, r4
  405170:	4b10      	ldr	r3, [pc, #64]	; (4051b4 <indev_proc_press+0x398>)
  405172:	4798      	blx	r3
  405174:	2800      	cmp	r0, #0
  405176:	f47f ae88 	bne.w	404e8a <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  40517a:	2200      	movs	r2, #0
  40517c:	2104      	movs	r1, #4
  40517e:	4b0b      	ldr	r3, [pc, #44]	; (4051ac <indev_proc_press+0x390>)
  405180:	6818      	ldr	r0, [r3, #0]
  405182:	4b0d      	ldr	r3, [pc, #52]	; (4051b8 <indev_proc_press+0x39c>)
  405184:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  405186:	4620      	mov	r0, r4
  405188:	4b0a      	ldr	r3, [pc, #40]	; (4051b4 <indev_proc_press+0x398>)
  40518a:	4798      	blx	r3
  40518c:	2800      	cmp	r0, #0
  40518e:	f47f ae7c 	bne.w	404e8a <indev_proc_press+0x6e>
                proc->long_pr_sent = 1;
  405192:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405196:	f043 0301 	orr.w	r3, r3, #1
  40519a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
  40519e:	4b0b      	ldr	r3, [pc, #44]	; (4051cc <indev_proc_press+0x3b0>)
  4051a0:	4798      	blx	r3
  4051a2:	6320      	str	r0, [r4, #48]	; 0x30
  4051a4:	e7a0      	b.n	4050e8 <indev_proc_press+0x2cc>
  4051a6:	4770      	bx	lr
  4051a8:	00405fd5 	.word	0x00405fd5
  4051ac:	2040c40c 	.word	0x2040c40c
  4051b0:	2040c408 	.word	0x2040c408
  4051b4:	00403b49 	.word	0x00403b49
  4051b8:	0040589d 	.word	0x0040589d
  4051bc:	00403f15 	.word	0x00403f15
  4051c0:	0040409d 	.word	0x0040409d
  4051c4:	004043ad 	.word	0x004043ad
  4051c8:	00415119 	.word	0x00415119
  4051cc:	004150fd 	.word	0x004150fd

004051d0 <indev_pointer_proc>:
{
  4051d0:	b538      	push	{r3, r4, r5, lr}
  4051d2:	4604      	mov	r4, r0
  4051d4:	460d      	mov	r5, r1
    if(i->cursor != NULL &&
  4051d6:	6d40      	ldr	r0, [r0, #84]	; 0x54
  4051d8:	b148      	cbz	r0, 4051ee <indev_pointer_proc+0x1e>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
  4051da:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4051dc:	680b      	ldr	r3, [r1, #0]
    if(i->cursor != NULL &&
  4051de:	429a      	cmp	r2, r3
  4051e0:	d005      	beq.n	4051ee <indev_pointer_proc+0x1e>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
  4051e2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  4051e6:	f9b1 1000 	ldrsh.w	r1, [r1]
  4051ea:	4b0d      	ldr	r3, [pc, #52]	; (405220 <indev_pointer_proc+0x50>)
  4051ec:	4798      	blx	r3
    i->proc.types.pointer.act_point.x = data->point.x;
  4051ee:	f9b5 3000 	ldrsh.w	r3, [r5]
  4051f2:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
  4051f4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  4051f8:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
  4051fa:	7f23      	ldrb	r3, [r4, #28]
  4051fc:	2b01      	cmp	r3, #1
  4051fe:	d00a      	beq.n	405216 <indev_pointer_proc+0x46>
        indev_proc_release(&i->proc);
  405200:	f104 001c 	add.w	r0, r4, #28
  405204:	4b07      	ldr	r3, [pc, #28]	; (405224 <indev_pointer_proc+0x54>)
  405206:	4798      	blx	r3
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  405208:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  40520c:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  40520e:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  405212:	84e3      	strh	r3, [r4, #38]	; 0x26
  405214:	bd38      	pop	{r3, r4, r5, pc}
        indev_proc_press(&i->proc);
  405216:	f104 001c 	add.w	r0, r4, #28
  40521a:	4b03      	ldr	r3, [pc, #12]	; (405228 <indev_pointer_proc+0x58>)
  40521c:	4798      	blx	r3
  40521e:	e7f3      	b.n	405208 <indev_pointer_proc+0x38>
  405220:	0040603d 	.word	0x0040603d
  405224:	00403d69 	.word	0x00403d69
  405228:	00404e1d 	.word	0x00404e1d

0040522c <indev_button_proc>:
    if(i->btn_points == NULL) {
  40522c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  40522e:	2b00      	cmp	r3, #0
  405230:	d03a      	beq.n	4052a8 <indev_button_proc+0x7c>
{
  405232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405236:	460d      	mov	r5, r1
  405238:	4604      	mov	r4, r0
    lv_coord_t x = i->btn_points[data->btn_id].x;
  40523a:	688a      	ldr	r2, [r1, #8]
  40523c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405240:	f933 7022 	ldrsh.w	r7, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
  405244:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
  405248:	7bab      	ldrb	r3, [r5, #14]
  40524a:	2b01      	cmp	r3, #1
  40524c:	d01a      	beq.n	405284 <indev_button_proc+0x58>
    if(indev_reset_check(&i->proc)) return;
  40524e:	f104 061c 	add.w	r6, r4, #28
  405252:	4630      	mov	r0, r6
  405254:	4b15      	ldr	r3, [pc, #84]	; (4052ac <indev_button_proc+0x80>)
  405256:	4798      	blx	r3
  405258:	b990      	cbnz	r0, 405280 <indev_button_proc+0x54>
    i->proc.types.pointer.act_point.x = x;
  40525a:	8427      	strh	r7, [r4, #32]
    i->proc.types.pointer.act_point.y = y;
  40525c:	f8a4 8022 	strh.w	r8, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  405260:	7bab      	ldrb	r3, [r5, #14]
  405262:	2b01      	cmp	r3, #1
  405264:	d01c      	beq.n	4052a0 <indev_button_proc+0x74>
    else indev_proc_release(&i->proc);
  405266:	4630      	mov	r0, r6
  405268:	4b11      	ldr	r3, [pc, #68]	; (4052b0 <indev_button_proc+0x84>)
  40526a:	4798      	blx	r3
    if(indev_reset_check(&i->proc)) return;
  40526c:	4630      	mov	r0, r6
  40526e:	4b0f      	ldr	r3, [pc, #60]	; (4052ac <indev_button_proc+0x80>)
  405270:	4798      	blx	r3
  405272:	b928      	cbnz	r0, 405280 <indev_button_proc+0x54>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  405274:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  405278:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  40527a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  40527e:	84e3      	strh	r3, [r4, #38]	; 0x26
  405280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(i->proc.types.pointer.last_point.x != x ||
  405284:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  405288:	429f      	cmp	r7, r3
  40528a:	d004      	beq.n	405296 <indev_button_proc+0x6a>
            indev_proc_release(&i->proc);
  40528c:	f104 001c 	add.w	r0, r4, #28
  405290:	4b07      	ldr	r3, [pc, #28]	; (4052b0 <indev_button_proc+0x84>)
  405292:	4798      	blx	r3
  405294:	e7db      	b.n	40524e <indev_button_proc+0x22>
           i->proc.types.pointer.last_point.y != y) {
  405296:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
  40529a:	4598      	cmp	r8, r3
  40529c:	d1f6      	bne.n	40528c <indev_button_proc+0x60>
  40529e:	e7d6      	b.n	40524e <indev_button_proc+0x22>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  4052a0:	4630      	mov	r0, r6
  4052a2:	4b04      	ldr	r3, [pc, #16]	; (4052b4 <indev_button_proc+0x88>)
  4052a4:	4798      	blx	r3
  4052a6:	e7e1      	b.n	40526c <indev_button_proc+0x40>
  4052a8:	4770      	bx	lr
  4052aa:	bf00      	nop
  4052ac:	00403b49 	.word	0x00403b49
  4052b0:	00403d69 	.word	0x00403d69
  4052b4:	00404e1d 	.word	0x00404e1d

004052b8 <_lv_indev_read_task>:
    indev_act = task->user_data;
  4052b8:	68c0      	ldr	r0, [r0, #12]
  4052ba:	4b2e      	ldr	r3, [pc, #184]	; (405374 <_lv_indev_read_task+0xbc>)
  4052bc:	6018      	str	r0, [r3, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
  4052be:	68c3      	ldr	r3, [r0, #12]
  4052c0:	2b00      	cmp	r3, #0
  4052c2:	d055      	beq.n	405370 <_lv_indev_read_task+0xb8>
{
  4052c4:	b530      	push	{r4, r5, lr}
  4052c6:	b085      	sub	sp, #20
    indev_proc_reset_query_handler(indev_act);
  4052c8:	4b2b      	ldr	r3, [pc, #172]	; (405378 <_lv_indev_read_task+0xc0>)
  4052ca:	4798      	blx	r3
    if(indev_act->proc.disabled) return;
  4052cc:	4b29      	ldr	r3, [pc, #164]	; (405374 <_lv_indev_read_task+0xbc>)
  4052ce:	681b      	ldr	r3, [r3, #0]
  4052d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  4052d4:	f013 0f04 	tst.w	r3, #4
  4052d8:	d018      	beq.n	40530c <_lv_indev_read_task+0x54>
}
  4052da:	b005      	add	sp, #20
  4052dc:	bd30      	pop	{r4, r5, pc}
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  4052de:	68dc      	ldr	r4, [r3, #12]
  4052e0:	4b26      	ldr	r3, [pc, #152]	; (40537c <_lv_indev_read_task+0xc4>)
  4052e2:	4798      	blx	r3
  4052e4:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  4052e8:	e025      	b.n	405336 <_lv_indev_read_task+0x7e>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  4052ea:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  4052ee:	b312      	cbz	r2, 405336 <_lv_indev_read_task+0x7e>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  4052f0:	68dc      	ldr	r4, [r3, #12]
  4052f2:	4b22      	ldr	r3, [pc, #136]	; (40537c <_lv_indev_read_task+0xc4>)
  4052f4:	4798      	blx	r3
  4052f6:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  4052fa:	e01c      	b.n	405336 <_lv_indev_read_task+0x7e>
            indev_pointer_proc(indev_act, &data);
  4052fc:	4669      	mov	r1, sp
  4052fe:	4b20      	ldr	r3, [pc, #128]	; (405380 <_lv_indev_read_task+0xc8>)
  405300:	4798      	blx	r3
        indev_proc_reset_query_handler(indev_act);
  405302:	4b1c      	ldr	r3, [pc, #112]	; (405374 <_lv_indev_read_task+0xbc>)
  405304:	6818      	ldr	r0, [r3, #0]
  405306:	4b1c      	ldr	r3, [pc, #112]	; (405378 <_lv_indev_read_task+0xc0>)
  405308:	4798      	blx	r3
    } while(more_to_read);
  40530a:	b35d      	cbz	r5, 405364 <_lv_indev_read_task+0xac>
        more_to_read = _lv_indev_read(indev_act, &data);
  40530c:	4c19      	ldr	r4, [pc, #100]	; (405374 <_lv_indev_read_task+0xbc>)
  40530e:	4669      	mov	r1, sp
  405310:	6820      	ldr	r0, [r4, #0]
  405312:	4b1c      	ldr	r3, [pc, #112]	; (405384 <_lv_indev_read_task+0xcc>)
  405314:	4798      	blx	r3
  405316:	4605      	mov	r5, r0
        indev_proc_reset_query_handler(indev_act);
  405318:	6820      	ldr	r0, [r4, #0]
  40531a:	4b17      	ldr	r3, [pc, #92]	; (405378 <_lv_indev_read_task+0xc0>)
  40531c:	4798      	blx	r3
        indev_obj_act = NULL;
  40531e:	2200      	movs	r2, #0
  405320:	4b19      	ldr	r3, [pc, #100]	; (405388 <_lv_indev_read_task+0xd0>)
  405322:	601a      	str	r2, [r3, #0]
        indev_act->proc.state = data.state;
  405324:	6823      	ldr	r3, [r4, #0]
  405326:	f89d 200e 	ldrb.w	r2, [sp, #14]
  40532a:	771a      	strb	r2, [r3, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
  40532c:	2a01      	cmp	r2, #1
  40532e:	d0d6      	beq.n	4052de <_lv_indev_read_task+0x26>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  405330:	781a      	ldrb	r2, [r3, #0]
  405332:	2a04      	cmp	r2, #4
  405334:	d0d9      	beq.n	4052ea <_lv_indev_read_task+0x32>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
  405336:	4b0f      	ldr	r3, [pc, #60]	; (405374 <_lv_indev_read_task+0xbc>)
  405338:	6818      	ldr	r0, [r3, #0]
  40533a:	7803      	ldrb	r3, [r0, #0]
  40533c:	2b01      	cmp	r3, #1
  40533e:	d0dd      	beq.n	4052fc <_lv_indev_read_task+0x44>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
  405340:	2b02      	cmp	r3, #2
  405342:	d007      	beq.n	405354 <_lv_indev_read_task+0x9c>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
  405344:	2b04      	cmp	r3, #4
  405346:	d009      	beq.n	40535c <_lv_indev_read_task+0xa4>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
  405348:	2b03      	cmp	r3, #3
  40534a:	d1da      	bne.n	405302 <_lv_indev_read_task+0x4a>
            indev_button_proc(indev_act, &data);
  40534c:	4669      	mov	r1, sp
  40534e:	4b0f      	ldr	r3, [pc, #60]	; (40538c <_lv_indev_read_task+0xd4>)
  405350:	4798      	blx	r3
  405352:	e7d6      	b.n	405302 <_lv_indev_read_task+0x4a>
            indev_keypad_proc(indev_act, &data);
  405354:	4669      	mov	r1, sp
  405356:	4b0e      	ldr	r3, [pc, #56]	; (405390 <_lv_indev_read_task+0xd8>)
  405358:	4798      	blx	r3
  40535a:	e7d2      	b.n	405302 <_lv_indev_read_task+0x4a>
            indev_encoder_proc(indev_act, &data);
  40535c:	4669      	mov	r1, sp
  40535e:	4b0d      	ldr	r3, [pc, #52]	; (405394 <_lv_indev_read_task+0xdc>)
  405360:	4798      	blx	r3
  405362:	e7ce      	b.n	405302 <_lv_indev_read_task+0x4a>
    indev_act     = NULL;
  405364:	2300      	movs	r3, #0
  405366:	4a03      	ldr	r2, [pc, #12]	; (405374 <_lv_indev_read_task+0xbc>)
  405368:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
  40536a:	4a07      	ldr	r2, [pc, #28]	; (405388 <_lv_indev_read_task+0xd0>)
  40536c:	6013      	str	r3, [r2, #0]
  40536e:	e7b4      	b.n	4052da <_lv_indev_read_task+0x22>
  405370:	4770      	bx	lr
  405372:	bf00      	nop
  405374:	2040c408 	.word	0x2040c408
  405378:	00403af1 	.word	0x00403af1
  40537c:	004150fd 	.word	0x004150fd
  405380:	004051d1 	.word	0x004051d1
  405384:	00415095 	.word	0x00415095
  405388:	2040c40c 	.word	0x2040c40c
  40538c:	0040522d 	.word	0x0040522d
  405390:	004044a5 	.word	0x004044a5
  405394:	004047d1 	.word	0x004047d1

00405398 <lv_event_mark_deleted>:

#endif

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
  405398:	4b05      	ldr	r3, [pc, #20]	; (4053b0 <lv_event_mark_deleted+0x18>)
  40539a:	681b      	ldr	r3, [r3, #0]

    while(t) {
  40539c:	e000      	b.n	4053a0 <lv_event_mark_deleted+0x8>
        if(t->obj == obj) t->deleted = true;
        t = t->prev;
  40539e:	689b      	ldr	r3, [r3, #8]
    while(t) {
  4053a0:	b12b      	cbz	r3, 4053ae <lv_event_mark_deleted+0x16>
        if(t->obj == obj) t->deleted = true;
  4053a2:	681a      	ldr	r2, [r3, #0]
  4053a4:	4282      	cmp	r2, r0
  4053a6:	d1fa      	bne.n	40539e <lv_event_mark_deleted+0x6>
  4053a8:	2201      	movs	r2, #1
  4053aa:	711a      	strb	r2, [r3, #4]
  4053ac:	e7f7      	b.n	40539e <lv_event_mark_deleted+0x6>
    }
}
  4053ae:	4770      	bx	lr
  4053b0:	2040c414 	.word	0x2040c414

004053b4 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
  4053b4:	2850      	cmp	r0, #80	; 0x50
  4053b6:	d017      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053b8:	d90c      	bls.n	4053d4 <style_prop_is_cacheble+0x20>
  4053ba:	28ff      	cmp	r0, #255	; 0xff
  4053bc:	d014      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053be:	d82e      	bhi.n	40541e <style_prop_is_cacheble+0x6a>
  4053c0:	286e      	cmp	r0, #110	; 0x6e
  4053c2:	d011      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053c4:	d926      	bls.n	405414 <style_prop_is_cacheble+0x60>
  4053c6:	287f      	cmp	r0, #127	; 0x7f
  4053c8:	d00e      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053ca:	2891      	cmp	r0, #145	; 0x91
  4053cc:	d00c      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053ce:	2872      	cmp	r0, #114	; 0x72
  4053d0:	d115      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
  4053d2:	e009      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  4053d4:	2818      	cmp	r0, #24
  4053d6:	d909      	bls.n	4053ec <style_prop_is_cacheble+0x38>
  4053d8:	2833      	cmp	r0, #51	; 0x33
  4053da:	d816      	bhi.n	40540a <style_prop_is_cacheble+0x56>
  4053dc:	2830      	cmp	r0, #48	; 0x30
  4053de:	d203      	bcs.n	4053e8 <style_prop_is_cacheble+0x34>
  4053e0:	2820      	cmp	r0, #32
  4053e2:	d001      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053e4:	282c      	cmp	r0, #44	; 0x2c
  4053e6:	d10a      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
  4053e8:	2001      	movs	r0, #1
  4053ea:	4770      	bx	lr
    switch(prop) {
  4053ec:	2815      	cmp	r0, #21
  4053ee:	d2fb      	bcs.n	4053e8 <style_prop_is_cacheble+0x34>
  4053f0:	2807      	cmp	r0, #7
  4053f2:	d806      	bhi.n	405402 <style_prop_is_cacheble+0x4e>
  4053f4:	2804      	cmp	r0, #4
  4053f6:	d2f7      	bcs.n	4053e8 <style_prop_is_cacheble+0x34>
  4053f8:	3801      	subs	r0, #1
  4053fa:	2801      	cmp	r0, #1
  4053fc:	d9f4      	bls.n	4053e8 <style_prop_is_cacheble+0x34>
            break;
        default:
            return false;
  4053fe:	2000      	movs	r0, #0
    }
}
  405400:	4770      	bx	lr
    switch(prop) {
  405402:	3810      	subs	r0, #16
  405404:	2803      	cmp	r0, #3
  405406:	d8fa      	bhi.n	4053fe <style_prop_is_cacheble+0x4a>
  405408:	e7ee      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  40540a:	2840      	cmp	r0, #64	; 0x40
  40540c:	d0ec      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  40540e:	2842      	cmp	r0, #66	; 0x42
  405410:	d1f5      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
  405412:	e7e9      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  405414:	2854      	cmp	r0, #84	; 0x54
  405416:	d0e7      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  405418:	2860      	cmp	r0, #96	; 0x60
  40541a:	d1f0      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
  40541c:	e7e4      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  40541e:	f248 0383 	movw	r3, #32899	; 0x8083
  405422:	4298      	cmp	r0, r3
  405424:	d0e0      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  405426:	d90c      	bls.n	405442 <style_prop_is_cacheble+0x8e>
  405428:	f248 03a0 	movw	r3, #32928	; 0x80a0
  40542c:	4298      	cmp	r0, r3
  40542e:	d0db      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  405430:	f248 03ad 	movw	r3, #32941	; 0x80ad
  405434:	4298      	cmp	r0, r3
  405436:	d0d7      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  405438:	f248 038e 	movw	r3, #32910	; 0x808e
  40543c:	4298      	cmp	r0, r3
  40543e:	d1de      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
  405440:	e7d2      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  405442:	f248 030c 	movw	r3, #32780	; 0x800c
  405446:	4298      	cmp	r0, r3
  405448:	d0ce      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  40544a:	d3d8      	bcc.n	4053fe <style_prop_is_cacheble+0x4a>
  40544c:	4b02      	ldr	r3, [pc, #8]	; (405458 <style_prop_is_cacheble+0xa4>)
  40544e:	4403      	add	r3, r0
  405450:	2b01      	cmp	r3, #1
  405452:	d8d4      	bhi.n	4053fe <style_prop_is_cacheble+0x4a>
  405454:	e7c8      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  405456:	bf00      	nop
  405458:	ffff7f80 	.word	0xffff7f80

0040545c <refresh_children_position>:
{
  40545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40545e:	460e      	mov	r6, r1
  405460:	4615      	mov	r5, r2
    _LV_LL_READ(obj->child_ll, i) {
  405462:	1d07      	adds	r7, r0, #4
  405464:	4638      	mov	r0, r7
  405466:	4b0f      	ldr	r3, [pc, #60]	; (4054a4 <refresh_children_position+0x48>)
  405468:	4798      	blx	r3
  40546a:	4604      	mov	r4, r0
  40546c:	e017      	b.n	40549e <refresh_children_position+0x42>
        i->coords.x1 += x_diff;
  40546e:	b2b2      	uxth	r2, r6
  405470:	8a23      	ldrh	r3, [r4, #16]
  405472:	4413      	add	r3, r2
  405474:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
  405476:	b2ab      	uxth	r3, r5
  405478:	8a61      	ldrh	r1, [r4, #18]
  40547a:	4419      	add	r1, r3
  40547c:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
  40547e:	8aa1      	ldrh	r1, [r4, #20]
  405480:	440a      	add	r2, r1
  405482:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
  405484:	8ae2      	ldrh	r2, [r4, #22]
  405486:	4413      	add	r3, r2
  405488:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
  40548a:	462a      	mov	r2, r5
  40548c:	4631      	mov	r1, r6
  40548e:	4620      	mov	r0, r4
  405490:	f7ff ffe4 	bl	40545c <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
  405494:	4621      	mov	r1, r4
  405496:	4638      	mov	r0, r7
  405498:	4b03      	ldr	r3, [pc, #12]	; (4054a8 <refresh_children_position+0x4c>)
  40549a:	4798      	blx	r3
  40549c:	4604      	mov	r4, r0
  40549e:	2c00      	cmp	r4, #0
  4054a0:	d1e5      	bne.n	40546e <refresh_children_position+0x12>
}
  4054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054a4:	00416189 	.word	0x00416189
  4054a8:	0041619d 	.word	0x0041619d

004054ac <style_snapshot_compare>:
    _lv_obj_disable_style_caching(obj, false);
    list->skip_trans = trans_ori;
}

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
  4054ac:	b538      	push	{r3, r4, r5, lr}
  4054ae:	4604      	mov	r4, r0
  4054b0:	460d      	mov	r5, r1
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  4054b2:	22bc      	movs	r2, #188	; 0xbc
  4054b4:	4b55      	ldr	r3, [pc, #340]	; (40560c <style_snapshot_compare+0x160>)
  4054b6:	4798      	blx	r3
  4054b8:	2800      	cmp	r0, #0
  4054ba:	f000 8086 	beq.w	4055ca <style_snapshot_compare+0x11e>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
  4054be:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
  4054c2:	f9b5 3092 	ldrsh.w	r3, [r5, #146]	; 0x92
  4054c6:	429a      	cmp	r2, r3
  4054c8:	d001      	beq.n	4054ce <style_snapshot_compare+0x22>
  4054ca:	2002      	movs	r0, #2
  4054cc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
  4054ce:	f9b4 2094 	ldrsh.w	r2, [r4, #148]	; 0x94
  4054d2:	f9b5 3094 	ldrsh.w	r3, [r5, #148]	; 0x94
  4054d6:	429a      	cmp	r2, r3
  4054d8:	d001      	beq.n	4054de <style_snapshot_compare+0x32>
  4054da:	2002      	movs	r0, #2
  4054dc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
  4054de:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
  4054e2:	f9b5 3096 	ldrsh.w	r3, [r5, #150]	; 0x96
  4054e6:	429a      	cmp	r2, r3
  4054e8:	d001      	beq.n	4054ee <style_snapshot_compare+0x42>
  4054ea:	2002      	movs	r0, #2
  4054ec:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
  4054ee:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
  4054f2:	4293      	cmp	r3, r2
  4054f4:	d001      	beq.n	4054fa <style_snapshot_compare+0x4e>
  4054f6:	2002      	movs	r0, #2
  4054f8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
  4054fa:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
  4054fe:	f9b5 309a 	ldrsh.w	r3, [r5, #154]	; 0x9a
  405502:	429a      	cmp	r2, r3
  405504:	d001      	beq.n	40550a <style_snapshot_compare+0x5e>
  405506:	2002      	movs	r0, #2
  405508:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
  40550a:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
  40550e:	f9b5 309c 	ldrsh.w	r3, [r5, #156]	; 0x9c
  405512:	429a      	cmp	r2, r3
  405514:	d001      	beq.n	40551a <style_snapshot_compare+0x6e>
  405516:	2002      	movs	r0, #2
  405518:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  40551a:	f9b4 209e 	ldrsh.w	r2, [r4, #158]	; 0x9e
  40551e:	f9b5 309e 	ldrsh.w	r3, [r5, #158]	; 0x9e
  405522:	429a      	cmp	r2, r3
  405524:	d153      	bne.n	4055ce <style_snapshot_compare+0x122>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  405526:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
  40552a:	f9b5 30a2 	ldrsh.w	r3, [r5, #162]	; 0xa2
  40552e:	429a      	cmp	r2, r3
  405530:	d14f      	bne.n	4055d2 <style_snapshot_compare+0x126>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  405532:	f9b4 20a2 	ldrsh.w	r2, [r4, #162]	; 0xa2
  405536:	4293      	cmp	r3, r2
  405538:	d14d      	bne.n	4055d6 <style_snapshot_compare+0x12a>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  40553a:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
  40553e:	f9b5 30a6 	ldrsh.w	r3, [r5, #166]	; 0xa6
  405542:	429a      	cmp	r2, r3
  405544:	d149      	bne.n	4055da <style_snapshot_compare+0x12e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  405546:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
  40554a:	f9b5 30a8 	ldrsh.w	r3, [r5, #168]	; 0xa8
  40554e:	429a      	cmp	r2, r3
  405550:	d145      	bne.n	4055de <style_snapshot_compare+0x132>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  405552:	f9b4 20aa 	ldrsh.w	r2, [r4, #170]	; 0xaa
  405556:	f9b5 30aa 	ldrsh.w	r3, [r5, #170]	; 0xaa
  40555a:	429a      	cmp	r2, r3
  40555c:	d141      	bne.n	4055e2 <style_snapshot_compare+0x136>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  40555e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
  405562:	f9b5 30ac 	ldrsh.w	r3, [r5, #172]	; 0xac
  405566:	429a      	cmp	r2, r3
  405568:	d13d      	bne.n	4055e6 <style_snapshot_compare+0x13a>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  40556a:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
  40556e:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
  405572:	429a      	cmp	r2, r3
  405574:	d139      	bne.n	4055ea <style_snapshot_compare+0x13e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  405576:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
  40557a:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
  40557e:	429a      	cmp	r2, r3
  405580:	d135      	bne.n	4055ee <style_snapshot_compare+0x142>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  405582:	6c22      	ldr	r2, [r4, #64]	; 0x40
  405584:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  405586:	429a      	cmp	r2, r3
  405588:	d133      	bne.n	4055f2 <style_snapshot_compare+0x146>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  40558a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  40558e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  405592:	429a      	cmp	r2, r3
  405594:	d12f      	bne.n	4055f6 <style_snapshot_compare+0x14a>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  405596:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
  40559a:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  40559e:	429a      	cmp	r2, r3
  4055a0:	d12b      	bne.n	4055fa <style_snapshot_compare+0x14e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  4055a2:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
  4055a6:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  4055aa:	429a      	cmp	r2, r3
  4055ac:	d127      	bne.n	4055fe <style_snapshot_compare+0x152>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  4055ae:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
  4055b2:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
  4055b6:	429a      	cmp	r2, r3
  4055b8:	d123      	bne.n	405602 <style_snapshot_compare+0x156>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
  4055ba:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
  4055be:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
  4055c2:	429a      	cmp	r2, r3
  4055c4:	d01f      	beq.n	405606 <style_snapshot_compare+0x15a>
  4055c6:	2002      	movs	r0, #2
  4055c8:	bd38      	pop	{r3, r4, r5, pc}
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  4055ca:	2000      	movs	r0, #0
  4055cc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  4055ce:	2002      	movs	r0, #2
  4055d0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4055d2:	2002      	movs	r0, #2
  4055d4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4055d6:	2002      	movs	r0, #2
  4055d8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  4055da:	2002      	movs	r0, #2
  4055dc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  4055de:	2002      	movs	r0, #2
  4055e0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  4055e2:	2002      	movs	r0, #2
  4055e4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  4055e6:	2002      	movs	r0, #2
  4055e8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  4055ea:	2002      	movs	r0, #2
  4055ec:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  4055ee:	2002      	movs	r0, #2
  4055f0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  4055f2:	2002      	movs	r0, #2
  4055f4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  4055f6:	2002      	movs	r0, #2
  4055f8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  4055fa:	2002      	movs	r0, #2
  4055fc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  4055fe:	2002      	movs	r0, #2
  405600:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  405602:	2002      	movs	r0, #2
  405604:	bd38      	pop	{r3, r4, r5, pc}

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
  405606:	2001      	movs	r0, #1
}
  405608:	bd38      	pop	{r3, r4, r5, pc}
  40560a:	bf00      	nop
  40560c:	004277e9 	.word	0x004277e9

00405610 <lv_init>:
    if(lv_initialized) {
  405610:	4b22      	ldr	r3, [pc, #136]	; (40569c <lv_init+0x8c>)
  405612:	781b      	ldrb	r3, [r3, #0]
  405614:	b103      	cbz	r3, 405618 <lv_init+0x8>
  405616:	4770      	bx	lr
{
  405618:	b510      	push	{r4, lr}
  40561a:	b084      	sub	sp, #16
    _lv_mem_init();
  40561c:	4b20      	ldr	r3, [pc, #128]	; (4056a0 <lv_init+0x90>)
  40561e:	4798      	blx	r3
    _lv_task_core_init();
  405620:	4b20      	ldr	r3, [pc, #128]	; (4056a4 <lv_init+0x94>)
  405622:	4798      	blx	r3
    _lv_fs_init();
  405624:	4b20      	ldr	r3, [pc, #128]	; (4056a8 <lv_init+0x98>)
  405626:	4798      	blx	r3
    _lv_anim_core_init();
  405628:	4b20      	ldr	r3, [pc, #128]	; (4056ac <lv_init+0x9c>)
  40562a:	4798      	blx	r3
    _lv_group_init();
  40562c:	4b20      	ldr	r3, [pc, #128]	; (4056b0 <lv_init+0xa0>)
  40562e:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
  405630:	2110      	movs	r1, #16
  405632:	4820      	ldr	r0, [pc, #128]	; (4056b4 <lv_init+0xa4>)
  405634:	4c20      	ldr	r4, [pc, #128]	; (4056b8 <lv_init+0xa8>)
  405636:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
  405638:	f44f 71c4 	mov.w	r1, #392	; 0x188
  40563c:	481f      	ldr	r0, [pc, #124]	; (4056bc <lv_init+0xac>)
  40563e:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
  405640:	2160      	movs	r1, #96	; 0x60
  405642:	481f      	ldr	r0, [pc, #124]	; (4056c0 <lv_init+0xb0>)
  405644:	47a0      	blx	r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  405646:	f04f 0000 	mov.w	r0, #0
  40564a:	2316      	movs	r3, #22
  40564c:	f363 00c7 	bfi	r0, r3, #3, #5
  405650:	2214      	movs	r2, #20
  405652:	f362 200c 	bfi	r0, r2, #8, #5
  405656:	f36f 304f 	bfc	r0, #13, #3
  40565a:	f04f 0100 	mov.w	r1, #0
  40565e:	220d      	movs	r2, #13
  405660:	f362 01c7 	bfi	r1, r2, #3, #5
  405664:	f363 210c 	bfi	r1, r3, #8, #5
  405668:	f36f 314f 	bfc	r1, #13, #3
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
  40566c:	4b15      	ldr	r3, [pc, #84]	; (4056c4 <lv_init+0xb4>)
  40566e:	9302      	str	r3, [sp, #8]
  405670:	9301      	str	r3, [sp, #4]
  405672:	9300      	str	r3, [sp, #0]
  405674:	2202      	movs	r2, #2
  405676:	4c14      	ldr	r4, [pc, #80]	; (4056c8 <lv_init+0xb8>)
  405678:	47a0      	blx	r4
    lv_theme_set_act(th);
  40567a:	4b14      	ldr	r3, [pc, #80]	; (4056cc <lv_init+0xbc>)
  40567c:	4798      	blx	r3
    _lv_refr_init();
  40567e:	4b14      	ldr	r3, [pc, #80]	; (4056d0 <lv_init+0xc0>)
  405680:	4798      	blx	r3
    _lv_indev_init();
  405682:	4b14      	ldr	r3, [pc, #80]	; (4056d4 <lv_init+0xc4>)
  405684:	4798      	blx	r3
    _lv_img_decoder_init();
  405686:	4b14      	ldr	r3, [pc, #80]	; (4056d8 <lv_init+0xc8>)
  405688:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
  40568a:	2001      	movs	r0, #1
  40568c:	4b13      	ldr	r3, [pc, #76]	; (4056dc <lv_init+0xcc>)
  40568e:	4798      	blx	r3
    lv_initialized = true;
  405690:	2201      	movs	r2, #1
  405692:	4b02      	ldr	r3, [pc, #8]	; (40569c <lv_init+0x8c>)
  405694:	701a      	strb	r2, [r3, #0]
}
  405696:	b004      	add	sp, #16
  405698:	bd10      	pop	{r4, pc}
  40569a:	bf00      	nop
  40569c:	2040c418 	.word	0x2040c418
  4056a0:	00416599 	.word	0x00416599
  4056a4:	00417915 	.word	0x00417915
  4056a8:	00415f09 	.word	0x00415f09
  4056ac:	00415339 	.word	0x00415339
  4056b0:	004037d9 	.word	0x004037d9
  4056b4:	2043a310 	.word	0x2043a310
  4056b8:	004160df 	.word	0x004160df
  4056bc:	2043a26c 	.word	0x2043a26c
  4056c0:	2043a260 	.word	0x2043a260
  4056c4:	2040008c 	.word	0x2040008c
  4056c8:	0041d925 	.word	0x0041d925
  4056cc:	004182ed 	.word	0x004182ed
  4056d0:	00409691 	.word	0x00409691
  4056d4:	00404ce5 	.word	0x00404ce5
  4056d8:	00413aad 	.word	0x00413aad
  4056dc:	0041309d 	.word	0x0041309d

004056e0 <lv_obj_set_adv_hittest>:
{
  4056e0:	b538      	push	{r3, r4, r5, lr}
  4056e2:	4604      	mov	r4, r0
  4056e4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056e6:	4b0a      	ldr	r3, [pc, #40]	; (405710 <lv_obj_set_adv_hittest+0x30>)
  4056e8:	4798      	blx	r3
  4056ea:	b140      	cbz	r0, 4056fe <lv_obj_set_adv_hittest+0x1e>
    obj->adv_hittest = en == false ? 0 : 1;
  4056ec:	b96d      	cbnz	r5, 40570a <lv_obj_set_adv_hittest+0x2a>
  4056ee:	2200      	movs	r2, #0
  4056f0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4056f4:	f362 13c7 	bfi	r3, r2, #7, #1
  4056f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  4056fc:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056fe:	4622      	mov	r2, r4
  405700:	2300      	movs	r3, #0
  405702:	4804      	ldr	r0, [pc, #16]	; (405714 <lv_obj_set_adv_hittest+0x34>)
  405704:	4904      	ldr	r1, [pc, #16]	; (405718 <lv_obj_set_adv_hittest+0x38>)
  405706:	4788      	blx	r1
  405708:	e7fe      	b.n	405708 <lv_obj_set_adv_hittest+0x28>
    obj->adv_hittest = en == false ? 0 : 1;
  40570a:	2201      	movs	r2, #1
  40570c:	e7f0      	b.n	4056f0 <lv_obj_set_adv_hittest+0x10>
  40570e:	bf00      	nop
  405710:	00415e79 	.word	0x00415e79
  405714:	0042c168 	.word	0x0042c168
  405718:	00415e85 	.word	0x00415e85

0040571c <lv_obj_set_click>:
{
  40571c:	b538      	push	{r3, r4, r5, lr}
  40571e:	4604      	mov	r4, r0
  405720:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405722:	4b08      	ldr	r3, [pc, #32]	; (405744 <lv_obj_set_click+0x28>)
  405724:	4798      	blx	r3
  405726:	b130      	cbz	r0, 405736 <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
  405728:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40572c:	f365 0300 	bfi	r3, r5, #0, #1
  405730:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  405734:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405736:	4622      	mov	r2, r4
  405738:	2300      	movs	r3, #0
  40573a:	4803      	ldr	r0, [pc, #12]	; (405748 <lv_obj_set_click+0x2c>)
  40573c:	4903      	ldr	r1, [pc, #12]	; (40574c <lv_obj_set_click+0x30>)
  40573e:	4788      	blx	r1
  405740:	e7fe      	b.n	405740 <lv_obj_set_click+0x24>
  405742:	bf00      	nop
  405744:	00415e79 	.word	0x00415e79
  405748:	0042c168 	.word	0x0042c168
  40574c:	00415e85 	.word	0x00415e85

00405750 <lv_obj_add_protect>:
{
  405750:	b538      	push	{r3, r4, r5, lr}
  405752:	4604      	mov	r4, r0
  405754:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405756:	4b07      	ldr	r3, [pc, #28]	; (405774 <lv_obj_add_protect+0x24>)
  405758:	4798      	blx	r3
  40575a:	b128      	cbz	r0, 405768 <lv_obj_add_protect+0x18>
    obj->protect |= prot;
  40575c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  405760:	431d      	orrs	r5, r3
  405762:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  405766:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405768:	4622      	mov	r2, r4
  40576a:	2300      	movs	r3, #0
  40576c:	4802      	ldr	r0, [pc, #8]	; (405778 <lv_obj_add_protect+0x28>)
  40576e:	4903      	ldr	r1, [pc, #12]	; (40577c <lv_obj_add_protect+0x2c>)
  405770:	4788      	blx	r1
  405772:	e7fe      	b.n	405772 <lv_obj_add_protect+0x22>
  405774:	00415e79 	.word	0x00415e79
  405778:	0042c168 	.word	0x0042c168
  40577c:	00415e85 	.word	0x00415e85

00405780 <lv_obj_clear_protect>:
{
  405780:	b538      	push	{r3, r4, r5, lr}
  405782:	4604      	mov	r4, r0
  405784:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405786:	4b08      	ldr	r3, [pc, #32]	; (4057a8 <lv_obj_clear_protect+0x28>)
  405788:	4798      	blx	r3
  40578a:	b130      	cbz	r0, 40579a <lv_obj_clear_protect+0x1a>
    obj->protect &= prot;
  40578c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  405790:	ea23 0305 	bic.w	r3, r3, r5
  405794:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  405798:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40579a:	4622      	mov	r2, r4
  40579c:	2300      	movs	r3, #0
  40579e:	4803      	ldr	r0, [pc, #12]	; (4057ac <lv_obj_clear_protect+0x2c>)
  4057a0:	4903      	ldr	r1, [pc, #12]	; (4057b0 <lv_obj_clear_protect+0x30>)
  4057a2:	4788      	blx	r1
  4057a4:	e7fe      	b.n	4057a4 <lv_obj_clear_protect+0x24>
  4057a6:	bf00      	nop
  4057a8:	00415e79 	.word	0x00415e79
  4057ac:	0042c168 	.word	0x0042c168
  4057b0:	00415e85 	.word	0x00415e85

004057b4 <lv_obj_set_event_cb>:
{
  4057b4:	b538      	push	{r3, r4, r5, lr}
  4057b6:	4604      	mov	r4, r0
  4057b8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057ba:	4b05      	ldr	r3, [pc, #20]	; (4057d0 <lv_obj_set_event_cb+0x1c>)
  4057bc:	4798      	blx	r3
  4057be:	b108      	cbz	r0, 4057c4 <lv_obj_set_event_cb+0x10>
    obj->event_cb = event_cb;
  4057c0:	61a5      	str	r5, [r4, #24]
  4057c2:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057c4:	4622      	mov	r2, r4
  4057c6:	2300      	movs	r3, #0
  4057c8:	4802      	ldr	r0, [pc, #8]	; (4057d4 <lv_obj_set_event_cb+0x20>)
  4057ca:	4903      	ldr	r1, [pc, #12]	; (4057d8 <lv_obj_set_event_cb+0x24>)
  4057cc:	4788      	blx	r1
  4057ce:	e7fe      	b.n	4057ce <lv_obj_set_event_cb+0x1a>
  4057d0:	00415e79 	.word	0x00415e79
  4057d4:	0042c168 	.word	0x0042c168
  4057d8:	00415e85 	.word	0x00415e85

004057dc <lv_event_send_func>:
{
  4057dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4057e0:	b084      	sub	sp, #16
  4057e2:	4607      	mov	r7, r0
  4057e4:	4615      	mov	r5, r2
  4057e6:	461e      	mov	r6, r3
    if(obj != NULL) {
  4057e8:	460c      	mov	r4, r1
  4057ea:	b121      	cbz	r1, 4057f6 <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057ec:	4608      	mov	r0, r1
  4057ee:	4b24      	ldr	r3, [pc, #144]	; (405880 <lv_event_send_func+0xa4>)
  4057f0:	4798      	blx	r3
  4057f2:	2800      	cmp	r0, #0
  4057f4:	d034      	beq.n	405860 <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
  4057f6:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
  4057f8:	2300      	movs	r3, #0
  4057fa:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
  4057fe:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
  405800:	4b20      	ldr	r3, [pc, #128]	; (405884 <lv_event_send_func+0xa8>)
  405802:	681b      	ldr	r3, [r3, #0]
  405804:	b103      	cbz	r3, 405808 <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
  405806:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
  405808:	aa01      	add	r2, sp, #4
  40580a:	4b1e      	ldr	r3, [pc, #120]	; (405884 <lv_event_send_func+0xa8>)
  40580c:	601a      	str	r2, [r3, #0]
    const void * event_act_data_save = event_act_data;
  40580e:	4b1e      	ldr	r3, [pc, #120]	; (405888 <lv_event_send_func+0xac>)
  405810:	f8d3 8000 	ldr.w	r8, [r3]
    event_act_data                   = data;
  405814:	601e      	str	r6, [r3, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
  405816:	4b1d      	ldr	r3, [pc, #116]	; (40588c <lv_event_send_func+0xb0>)
  405818:	4798      	blx	r3
    if(indev_act) {
  40581a:	b118      	cbz	r0, 405824 <lv_event_send_func+0x48>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
  40581c:	6883      	ldr	r3, [r0, #8]
  40581e:	b10b      	cbz	r3, 405824 <lv_event_send_func+0x48>
  405820:	4629      	mov	r1, r5
  405822:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
  405824:	b117      	cbz	r7, 40582c <lv_event_send_func+0x50>
  405826:	4629      	mov	r1, r5
  405828:	4620      	mov	r0, r4
  40582a:	47b8      	blx	r7
    event_act_data = event_act_data_save;
  40582c:	4b16      	ldr	r3, [pc, #88]	; (405888 <lv_event_send_func+0xac>)
  40582e:	f8c3 8000 	str.w	r8, [r3]
    event_temp_data_head = event_temp_data_head->prev;
  405832:	4b14      	ldr	r3, [pc, #80]	; (405884 <lv_event_send_func+0xa8>)
  405834:	681a      	ldr	r2, [r3, #0]
  405836:	6892      	ldr	r2, [r2, #8]
  405838:	601a      	str	r2, [r3, #0]
    if(event_temp_data.deleted) {
  40583a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  40583e:	b9ab      	cbnz	r3, 40586c <lv_event_send_func+0x90>
    if(obj) {
  405840:	b1c4      	cbz	r4, 405874 <lv_event_send_func+0x98>
        if(obj->parent_event && obj->parent) {
  405842:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405846:	f013 0f40 	tst.w	r3, #64	; 0x40
  40584a:	d015      	beq.n	405878 <lv_event_send_func+0x9c>
  40584c:	6820      	ldr	r0, [r4, #0]
  40584e:	b1a8      	cbz	r0, 40587c <lv_event_send_func+0xa0>
            lv_res_t res = lv_event_send(obj->parent, event, data);
  405850:	4632      	mov	r2, r6
  405852:	4629      	mov	r1, r5
  405854:	4b0e      	ldr	r3, [pc, #56]	; (405890 <lv_event_send_func+0xb4>)
  405856:	4798      	blx	r3
            if(res != LV_RES_OK) {
  405858:	2801      	cmp	r0, #1
  40585a:	d008      	beq.n	40586e <lv_event_send_func+0x92>
                return LV_RES_INV;
  40585c:	2000      	movs	r0, #0
  40585e:	e006      	b.n	40586e <lv_event_send_func+0x92>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405860:	4622      	mov	r2, r4
  405862:	2300      	movs	r3, #0
  405864:	480b      	ldr	r0, [pc, #44]	; (405894 <lv_event_send_func+0xb8>)
  405866:	490c      	ldr	r1, [pc, #48]	; (405898 <lv_event_send_func+0xbc>)
  405868:	4788      	blx	r1
  40586a:	e7fe      	b.n	40586a <lv_event_send_func+0x8e>
        return LV_RES_INV;
  40586c:	2000      	movs	r0, #0
}
  40586e:	b004      	add	sp, #16
  405870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
  405874:	2001      	movs	r0, #1
  405876:	e7fa      	b.n	40586e <lv_event_send_func+0x92>
  405878:	2001      	movs	r0, #1
  40587a:	e7f8      	b.n	40586e <lv_event_send_func+0x92>
  40587c:	2001      	movs	r0, #1
  40587e:	e7f6      	b.n	40586e <lv_event_send_func+0x92>
  405880:	00415e79 	.word	0x00415e79
  405884:	2040c414 	.word	0x2040c414
  405888:	2040c410 	.word	0x2040c410
  40588c:	00404c51 	.word	0x00404c51
  405890:	0040589d 	.word	0x0040589d
  405894:	0042c168 	.word	0x0042c168
  405898:	00415e85 	.word	0x00415e85

0040589c <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
  40589c:	b198      	cbz	r0, 4058c6 <lv_event_send+0x2a>
{
  40589e:	b570      	push	{r4, r5, r6, lr}
  4058a0:	4604      	mov	r4, r0
  4058a2:	4616      	mov	r6, r2
  4058a4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058a6:	4b09      	ldr	r3, [pc, #36]	; (4058cc <lv_event_send+0x30>)
  4058a8:	4798      	blx	r3
  4058aa:	b928      	cbnz	r0, 4058b8 <lv_event_send+0x1c>
  4058ac:	4622      	mov	r2, r4
  4058ae:	2300      	movs	r3, #0
  4058b0:	4807      	ldr	r0, [pc, #28]	; (4058d0 <lv_event_send+0x34>)
  4058b2:	4908      	ldr	r1, [pc, #32]	; (4058d4 <lv_event_send+0x38>)
  4058b4:	4788      	blx	r1
  4058b6:	e7fe      	b.n	4058b6 <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
  4058b8:	4633      	mov	r3, r6
  4058ba:	462a      	mov	r2, r5
  4058bc:	4621      	mov	r1, r4
  4058be:	69a0      	ldr	r0, [r4, #24]
  4058c0:	4c05      	ldr	r4, [pc, #20]	; (4058d8 <lv_event_send+0x3c>)
  4058c2:	47a0      	blx	r4
    return res;
  4058c4:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
  4058c6:	2001      	movs	r0, #1
  4058c8:	4770      	bx	lr
  4058ca:	bf00      	nop
  4058cc:	00415e79 	.word	0x00415e79
  4058d0:	0042c168 	.word	0x0042c168
  4058d4:	00415e85 	.word	0x00415e85
  4058d8:	004057dd 	.word	0x004057dd

004058dc <lv_obj_set_signal_cb>:
{
  4058dc:	b538      	push	{r3, r4, r5, lr}
  4058de:	4604      	mov	r4, r0
  4058e0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058e2:	4b05      	ldr	r3, [pc, #20]	; (4058f8 <lv_obj_set_signal_cb+0x1c>)
  4058e4:	4798      	blx	r3
  4058e6:	b108      	cbz	r0, 4058ec <lv_obj_set_signal_cb+0x10>
    obj->signal_cb = signal_cb;
  4058e8:	61e5      	str	r5, [r4, #28]
  4058ea:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058ec:	4622      	mov	r2, r4
  4058ee:	2300      	movs	r3, #0
  4058f0:	4802      	ldr	r0, [pc, #8]	; (4058fc <lv_obj_set_signal_cb+0x20>)
  4058f2:	4903      	ldr	r1, [pc, #12]	; (405900 <lv_obj_set_signal_cb+0x24>)
  4058f4:	4788      	blx	r1
  4058f6:	e7fe      	b.n	4058f6 <lv_obj_set_signal_cb+0x1a>
  4058f8:	00415e79 	.word	0x00415e79
  4058fc:	0042c168 	.word	0x0042c168
  405900:	00415e85 	.word	0x00415e85

00405904 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
  405904:	b120      	cbz	r0, 405910 <lv_signal_send+0xc>
{
  405906:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
  405908:	69c4      	ldr	r4, [r0, #28]
  40590a:	b11c      	cbz	r4, 405914 <lv_signal_send+0x10>
  40590c:	47a0      	blx	r4
  40590e:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
  405910:	2001      	movs	r0, #1
  405912:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
  405914:	2001      	movs	r0, #1
}
  405916:	bd10      	pop	{r4, pc}

00405918 <lv_obj_set_design_cb>:
{
  405918:	b538      	push	{r3, r4, r5, lr}
  40591a:	4604      	mov	r4, r0
  40591c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40591e:	4b05      	ldr	r3, [pc, #20]	; (405934 <lv_obj_set_design_cb+0x1c>)
  405920:	4798      	blx	r3
  405922:	b108      	cbz	r0, 405928 <lv_obj_set_design_cb+0x10>
    obj->design_cb = design_cb;
  405924:	6225      	str	r5, [r4, #32]
  405926:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405928:	4622      	mov	r2, r4
  40592a:	2300      	movs	r3, #0
  40592c:	4802      	ldr	r0, [pc, #8]	; (405938 <lv_obj_set_design_cb+0x20>)
  40592e:	4903      	ldr	r1, [pc, #12]	; (40593c <lv_obj_set_design_cb+0x24>)
  405930:	4788      	blx	r1
  405932:	e7fe      	b.n	405932 <lv_obj_set_design_cb+0x1a>
  405934:	00415e79 	.word	0x00415e79
  405938:	0042c168 	.word	0x0042c168
  40593c:	00415e85 	.word	0x00415e85

00405940 <lv_obj_allocate_ext_attr>:
{
  405940:	b538      	push	{r3, r4, r5, lr}
  405942:	4604      	mov	r4, r0
  405944:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405946:	4b09      	ldr	r3, [pc, #36]	; (40596c <lv_obj_allocate_ext_attr+0x2c>)
  405948:	4798      	blx	r3
  40594a:	b928      	cbnz	r0, 405958 <lv_obj_allocate_ext_attr+0x18>
  40594c:	4622      	mov	r2, r4
  40594e:	2300      	movs	r3, #0
  405950:	4807      	ldr	r0, [pc, #28]	; (405970 <lv_obj_allocate_ext_attr+0x30>)
  405952:	4908      	ldr	r1, [pc, #32]	; (405974 <lv_obj_allocate_ext_attr+0x34>)
  405954:	4788      	blx	r1
  405956:	e7fe      	b.n	405956 <lv_obj_allocate_ext_attr+0x16>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
  405958:	4629      	mov	r1, r5
  40595a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  40595c:	4b06      	ldr	r3, [pc, #24]	; (405978 <lv_obj_allocate_ext_attr+0x38>)
  40595e:	4798      	blx	r3
    if(new_ext == NULL) return NULL;
  405960:	4603      	mov	r3, r0
  405962:	b100      	cbz	r0, 405966 <lv_obj_allocate_ext_attr+0x26>
    obj->ext_attr = new_ext;
  405964:	6260      	str	r0, [r4, #36]	; 0x24
}
  405966:	4618      	mov	r0, r3
  405968:	bd38      	pop	{r3, r4, r5, pc}
  40596a:	bf00      	nop
  40596c:	00415e79 	.word	0x00415e79
  405970:	0042c168 	.word	0x0042c168
  405974:	00415e85 	.word	0x00415e85
  405978:	004168ed 	.word	0x004168ed

0040597c <lv_obj_refresh_ext_draw_pad>:
{
  40597c:	b510      	push	{r4, lr}
  40597e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405980:	4b07      	ldr	r3, [pc, #28]	; (4059a0 <lv_obj_refresh_ext_draw_pad+0x24>)
  405982:	4798      	blx	r3
  405984:	b928      	cbnz	r0, 405992 <lv_obj_refresh_ext_draw_pad+0x16>
  405986:	4622      	mov	r2, r4
  405988:	2300      	movs	r3, #0
  40598a:	4806      	ldr	r0, [pc, #24]	; (4059a4 <lv_obj_refresh_ext_draw_pad+0x28>)
  40598c:	4906      	ldr	r1, [pc, #24]	; (4059a8 <lv_obj_refresh_ext_draw_pad+0x2c>)
  40598e:	4788      	blx	r1
  405990:	e7fe      	b.n	405990 <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
  405992:	2200      	movs	r2, #0
  405994:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
  405996:	69e3      	ldr	r3, [r4, #28]
  405998:	2106      	movs	r1, #6
  40599a:	4620      	mov	r0, r4
  40599c:	4798      	blx	r3
  40599e:	bd10      	pop	{r4, pc}
  4059a0:	00415e79 	.word	0x00415e79
  4059a4:	0042c168 	.word	0x0042c168
  4059a8:	00415e85 	.word	0x00415e85

004059ac <lv_obj_get_parent>:
{
  4059ac:	b510      	push	{r4, lr}
  4059ae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059b0:	4b05      	ldr	r3, [pc, #20]	; (4059c8 <lv_obj_get_parent+0x1c>)
  4059b2:	4798      	blx	r3
  4059b4:	b108      	cbz	r0, 4059ba <lv_obj_get_parent+0xe>
}
  4059b6:	6820      	ldr	r0, [r4, #0]
  4059b8:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059ba:	4622      	mov	r2, r4
  4059bc:	2300      	movs	r3, #0
  4059be:	4803      	ldr	r0, [pc, #12]	; (4059cc <lv_obj_get_parent+0x20>)
  4059c0:	4903      	ldr	r1, [pc, #12]	; (4059d0 <lv_obj_get_parent+0x24>)
  4059c2:	4788      	blx	r1
  4059c4:	e7fe      	b.n	4059c4 <lv_obj_get_parent+0x18>
  4059c6:	bf00      	nop
  4059c8:	00415e79 	.word	0x00415e79
  4059cc:	0042c168 	.word	0x0042c168
  4059d0:	00415e85 	.word	0x00415e85

004059d4 <lv_obj_get_screen>:
{
  4059d4:	b510      	push	{r4, lr}
  4059d6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059d8:	4b08      	ldr	r3, [pc, #32]	; (4059fc <lv_obj_get_screen+0x28>)
  4059da:	4798      	blx	r3
  4059dc:	b930      	cbnz	r0, 4059ec <lv_obj_get_screen+0x18>
  4059de:	4622      	mov	r2, r4
  4059e0:	2300      	movs	r3, #0
  4059e2:	4807      	ldr	r0, [pc, #28]	; (405a00 <lv_obj_get_screen+0x2c>)
  4059e4:	4907      	ldr	r1, [pc, #28]	; (405a04 <lv_obj_get_screen+0x30>)
  4059e6:	4788      	blx	r1
  4059e8:	e7fe      	b.n	4059e8 <lv_obj_get_screen+0x14>
        par   = lv_obj_get_parent(act_p);
  4059ea:	461c      	mov	r4, r3
  4059ec:	4620      	mov	r0, r4
  4059ee:	4b06      	ldr	r3, [pc, #24]	; (405a08 <lv_obj_get_screen+0x34>)
  4059f0:	4798      	blx	r3
    } while(par != NULL);
  4059f2:	4603      	mov	r3, r0
  4059f4:	2800      	cmp	r0, #0
  4059f6:	d1f8      	bne.n	4059ea <lv_obj_get_screen+0x16>
}
  4059f8:	4620      	mov	r0, r4
  4059fa:	bd10      	pop	{r4, pc}
  4059fc:	00415e79 	.word	0x00415e79
  405a00:	0042c168 	.word	0x0042c168
  405a04:	00415e85 	.word	0x00415e85
  405a08:	004059ad 	.word	0x004059ad

00405a0c <lv_obj_get_disp>:
{
  405a0c:	b570      	push	{r4, r5, r6, lr}
  405a0e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a10:	4b14      	ldr	r3, [pc, #80]	; (405a64 <lv_obj_get_disp+0x58>)
  405a12:	4798      	blx	r3
  405a14:	b1b8      	cbz	r0, 405a46 <lv_obj_get_disp+0x3a>
    if(obj->parent == NULL)
  405a16:	6823      	ldr	r3, [r4, #0]
  405a18:	b11b      	cbz	r3, 405a22 <lv_obj_get_disp+0x16>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
  405a1a:	4620      	mov	r0, r4
  405a1c:	4b12      	ldr	r3, [pc, #72]	; (405a68 <lv_obj_get_disp+0x5c>)
  405a1e:	4798      	blx	r3
  405a20:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405a22:	4812      	ldr	r0, [pc, #72]	; (405a6c <lv_obj_get_disp+0x60>)
  405a24:	4b12      	ldr	r3, [pc, #72]	; (405a70 <lv_obj_get_disp+0x64>)
  405a26:	4798      	blx	r3
  405a28:	4605      	mov	r5, r0
  405a2a:	b1c5      	cbz	r5, 405a5e <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  405a2c:	f105 0638 	add.w	r6, r5, #56	; 0x38
  405a30:	4630      	mov	r0, r6
  405a32:	4b0f      	ldr	r3, [pc, #60]	; (405a70 <lv_obj_get_disp+0x64>)
  405a34:	4798      	blx	r3
  405a36:	b160      	cbz	r0, 405a52 <lv_obj_get_disp+0x46>
            if(s == scr) return d;
  405a38:	4284      	cmp	r4, r0
  405a3a:	d010      	beq.n	405a5e <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  405a3c:	4601      	mov	r1, r0
  405a3e:	4630      	mov	r0, r6
  405a40:	4b0c      	ldr	r3, [pc, #48]	; (405a74 <lv_obj_get_disp+0x68>)
  405a42:	4798      	blx	r3
  405a44:	e7f7      	b.n	405a36 <lv_obj_get_disp+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a46:	4622      	mov	r2, r4
  405a48:	2300      	movs	r3, #0
  405a4a:	480b      	ldr	r0, [pc, #44]	; (405a78 <lv_obj_get_disp+0x6c>)
  405a4c:	490b      	ldr	r1, [pc, #44]	; (405a7c <lv_obj_get_disp+0x70>)
  405a4e:	4788      	blx	r1
  405a50:	e7fe      	b.n	405a50 <lv_obj_get_disp+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405a52:	4629      	mov	r1, r5
  405a54:	4805      	ldr	r0, [pc, #20]	; (405a6c <lv_obj_get_disp+0x60>)
  405a56:	4b07      	ldr	r3, [pc, #28]	; (405a74 <lv_obj_get_disp+0x68>)
  405a58:	4798      	blx	r3
  405a5a:	4605      	mov	r5, r0
  405a5c:	e7e5      	b.n	405a2a <lv_obj_get_disp+0x1e>
}
  405a5e:	4628      	mov	r0, r5
  405a60:	bd70      	pop	{r4, r5, r6, pc}
  405a62:	bf00      	nop
  405a64:	00415e79 	.word	0x00415e79
  405a68:	004059d5 	.word	0x004059d5
  405a6c:	2043a26c 	.word	0x2043a26c
  405a70:	00416189 	.word	0x00416189
  405a74:	0041619d 	.word	0x0041619d
  405a78:	0042c168 	.word	0x0042c168
  405a7c:	00415e85 	.word	0x00415e85

00405a80 <lv_obj_get_child>:
{
  405a80:	b538      	push	{r3, r4, r5, lr}
  405a82:	4604      	mov	r4, r0
  405a84:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a86:	4b09      	ldr	r3, [pc, #36]	; (405aac <lv_obj_get_child+0x2c>)
  405a88:	4798      	blx	r3
  405a8a:	b128      	cbz	r0, 405a98 <lv_obj_get_child+0x18>
    if(child == NULL) {
  405a8c:	b155      	cbz	r5, 405aa4 <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
  405a8e:	4629      	mov	r1, r5
  405a90:	1d20      	adds	r0, r4, #4
  405a92:	4b07      	ldr	r3, [pc, #28]	; (405ab0 <lv_obj_get_child+0x30>)
  405a94:	4798      	blx	r3
}
  405a96:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a98:	4622      	mov	r2, r4
  405a9a:	2300      	movs	r3, #0
  405a9c:	4805      	ldr	r0, [pc, #20]	; (405ab4 <lv_obj_get_child+0x34>)
  405a9e:	4906      	ldr	r1, [pc, #24]	; (405ab8 <lv_obj_get_child+0x38>)
  405aa0:	4788      	blx	r1
  405aa2:	e7fe      	b.n	405aa2 <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
  405aa4:	1d20      	adds	r0, r4, #4
  405aa6:	4b05      	ldr	r3, [pc, #20]	; (405abc <lv_obj_get_child+0x3c>)
  405aa8:	4798      	blx	r3
  405aaa:	bd38      	pop	{r3, r4, r5, pc}
  405aac:	00415e79 	.word	0x00415e79
  405ab0:	0041619d 	.word	0x0041619d
  405ab4:	0042c168 	.word	0x0042c168
  405ab8:	00415e85 	.word	0x00415e85
  405abc:	00416189 	.word	0x00416189

00405ac0 <lv_obj_get_coords>:
{
  405ac0:	b538      	push	{r3, r4, r5, lr}
  405ac2:	4604      	mov	r4, r0
  405ac4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ac6:	4b0b      	ldr	r3, [pc, #44]	; (405af4 <lv_obj_get_coords+0x34>)
  405ac8:	4798      	blx	r3
  405aca:	b120      	cbz	r0, 405ad6 <lv_obj_get_coords+0x16>
    lv_area_copy(cords_p, &obj->coords);
  405acc:	f104 0310 	add.w	r3, r4, #16
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  405ad0:	4629      	mov	r1, r5
  405ad2:	2208      	movs	r2, #8
  405ad4:	e00a      	b.n	405aec <lv_obj_get_coords+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ad6:	4622      	mov	r2, r4
  405ad8:	2300      	movs	r3, #0
  405ada:	4807      	ldr	r0, [pc, #28]	; (405af8 <lv_obj_get_coords+0x38>)
  405adc:	4907      	ldr	r1, [pc, #28]	; (405afc <lv_obj_get_coords+0x3c>)
  405ade:	4788      	blx	r1
  405ae0:	e7fe      	b.n	405ae0 <lv_obj_get_coords+0x20>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  405ae2:	f813 0b01 	ldrb.w	r0, [r3], #1
  405ae6:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  405aea:	3a01      	subs	r2, #1
    while(len) {
  405aec:	2a00      	cmp	r2, #0
  405aee:	d1f8      	bne.n	405ae2 <lv_obj_get_coords+0x22>
}
  405af0:	bd38      	pop	{r3, r4, r5, pc}
  405af2:	bf00      	nop
  405af4:	00415e79 	.word	0x00415e79
  405af8:	0042c168 	.word	0x0042c168
  405afc:	00415e85 	.word	0x00415e85

00405b00 <lv_obj_get_x>:
{
  405b00:	b510      	push	{r4, lr}
  405b02:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b04:	4b0a      	ldr	r3, [pc, #40]	; (405b30 <lv_obj_get_x+0x30>)
  405b06:	4798      	blx	r3
  405b08:	b928      	cbnz	r0, 405b16 <lv_obj_get_x+0x16>
  405b0a:	4622      	mov	r2, r4
  405b0c:	2300      	movs	r3, #0
  405b0e:	4809      	ldr	r0, [pc, #36]	; (405b34 <lv_obj_get_x+0x34>)
  405b10:	4909      	ldr	r1, [pc, #36]	; (405b38 <lv_obj_get_x+0x38>)
  405b12:	4788      	blx	r1
  405b14:	e7fe      	b.n	405b14 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405b16:	4620      	mov	r0, r4
  405b18:	4b08      	ldr	r3, [pc, #32]	; (405b3c <lv_obj_get_x+0x3c>)
  405b1a:	4798      	blx	r3
    if(parent) {
  405b1c:	4603      	mov	r3, r0
  405b1e:	b120      	cbz	r0, 405b2a <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
  405b20:	8a20      	ldrh	r0, [r4, #16]
  405b22:	8a1b      	ldrh	r3, [r3, #16]
  405b24:	1ac0      	subs	r0, r0, r3
  405b26:	b200      	sxth	r0, r0
  405b28:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
  405b2a:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
  405b2e:	bd10      	pop	{r4, pc}
  405b30:	00415e79 	.word	0x00415e79
  405b34:	0042c168 	.word	0x0042c168
  405b38:	00415e85 	.word	0x00415e85
  405b3c:	004059ad 	.word	0x004059ad

00405b40 <lv_obj_get_y>:
{
  405b40:	b510      	push	{r4, lr}
  405b42:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b44:	4b0a      	ldr	r3, [pc, #40]	; (405b70 <lv_obj_get_y+0x30>)
  405b46:	4798      	blx	r3
  405b48:	b928      	cbnz	r0, 405b56 <lv_obj_get_y+0x16>
  405b4a:	4622      	mov	r2, r4
  405b4c:	2300      	movs	r3, #0
  405b4e:	4809      	ldr	r0, [pc, #36]	; (405b74 <lv_obj_get_y+0x34>)
  405b50:	4909      	ldr	r1, [pc, #36]	; (405b78 <lv_obj_get_y+0x38>)
  405b52:	4788      	blx	r1
  405b54:	e7fe      	b.n	405b54 <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405b56:	4620      	mov	r0, r4
  405b58:	4b08      	ldr	r3, [pc, #32]	; (405b7c <lv_obj_get_y+0x3c>)
  405b5a:	4798      	blx	r3
    if(parent) {
  405b5c:	4603      	mov	r3, r0
  405b5e:	b120      	cbz	r0, 405b6a <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
  405b60:	8a60      	ldrh	r0, [r4, #18]
  405b62:	8a5b      	ldrh	r3, [r3, #18]
  405b64:	1ac0      	subs	r0, r0, r3
  405b66:	b200      	sxth	r0, r0
  405b68:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
  405b6a:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
  405b6e:	bd10      	pop	{r4, pc}
  405b70:	00415e79 	.word	0x00415e79
  405b74:	0042c168 	.word	0x0042c168
  405b78:	00415e85 	.word	0x00415e85
  405b7c:	004059ad 	.word	0x004059ad

00405b80 <lv_obj_get_width>:
{
  405b80:	b510      	push	{r4, lr}
  405b82:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b84:	4b07      	ldr	r3, [pc, #28]	; (405ba4 <lv_obj_get_width+0x24>)
  405b86:	4798      	blx	r3
  405b88:	b130      	cbz	r0, 405b98 <lv_obj_get_width+0x18>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  405b8a:	8aa0      	ldrh	r0, [r4, #20]
  405b8c:	8a23      	ldrh	r3, [r4, #16]
  405b8e:	1ac0      	subs	r0, r0, r3
  405b90:	b280      	uxth	r0, r0
  405b92:	3001      	adds	r0, #1
}
  405b94:	b200      	sxth	r0, r0
  405b96:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b98:	4622      	mov	r2, r4
  405b9a:	2300      	movs	r3, #0
  405b9c:	4802      	ldr	r0, [pc, #8]	; (405ba8 <lv_obj_get_width+0x28>)
  405b9e:	4903      	ldr	r1, [pc, #12]	; (405bac <lv_obj_get_width+0x2c>)
  405ba0:	4788      	blx	r1
  405ba2:	e7fe      	b.n	405ba2 <lv_obj_get_width+0x22>
  405ba4:	00415e79 	.word	0x00415e79
  405ba8:	0042c168 	.word	0x0042c168
  405bac:	00415e85 	.word	0x00415e85

00405bb0 <lv_obj_get_height>:
{
  405bb0:	b510      	push	{r4, lr}
  405bb2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405bb4:	4b07      	ldr	r3, [pc, #28]	; (405bd4 <lv_obj_get_height+0x24>)
  405bb6:	4798      	blx	r3
  405bb8:	b130      	cbz	r0, 405bc8 <lv_obj_get_height+0x18>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  405bba:	8ae0      	ldrh	r0, [r4, #22]
  405bbc:	8a63      	ldrh	r3, [r4, #18]
  405bbe:	1ac0      	subs	r0, r0, r3
  405bc0:	b280      	uxth	r0, r0
  405bc2:	3001      	adds	r0, #1
}
  405bc4:	b200      	sxth	r0, r0
  405bc6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405bc8:	4622      	mov	r2, r4
  405bca:	2300      	movs	r3, #0
  405bcc:	4802      	ldr	r0, [pc, #8]	; (405bd8 <lv_obj_get_height+0x28>)
  405bce:	4903      	ldr	r1, [pc, #12]	; (405bdc <lv_obj_get_height+0x2c>)
  405bd0:	4788      	blx	r1
  405bd2:	e7fe      	b.n	405bd2 <lv_obj_get_height+0x22>
  405bd4:	00415e79 	.word	0x00415e79
  405bd8:	0042c168 	.word	0x0042c168
  405bdc:	00415e85 	.word	0x00415e85

00405be0 <lv_obj_get_auto_realign>:
{
  405be0:	b510      	push	{r4, lr}
  405be2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405be4:	4b06      	ldr	r3, [pc, #24]	; (405c00 <lv_obj_get_auto_realign+0x20>)
  405be6:	4798      	blx	r3
  405be8:	b120      	cbz	r0, 405bf4 <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
  405bea:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
}
  405bee:	f000 0001 	and.w	r0, r0, #1
  405bf2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405bf4:	4622      	mov	r2, r4
  405bf6:	2300      	movs	r3, #0
  405bf8:	4802      	ldr	r0, [pc, #8]	; (405c04 <lv_obj_get_auto_realign+0x24>)
  405bfa:	4903      	ldr	r1, [pc, #12]	; (405c08 <lv_obj_get_auto_realign+0x28>)
  405bfc:	4788      	blx	r1
  405bfe:	e7fe      	b.n	405bfe <lv_obj_get_auto_realign+0x1e>
  405c00:	00415e79 	.word	0x00415e79
  405c04:	0042c168 	.word	0x0042c168
  405c08:	00415e85 	.word	0x00415e85

00405c0c <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
  405c0c:	b909      	cbnz	r1, 405c12 <lv_obj_get_style_list+0x6>
  405c0e:	3028      	adds	r0, #40	; 0x28
  405c10:	4770      	bx	lr
{
  405c12:	b500      	push	{lr}
  405c14:	b083      	sub	sp, #12
    info.part = part;
  405c16:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
  405c1a:	2300      	movs	r3, #0
  405c1c:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
  405c1e:	466a      	mov	r2, sp
  405c20:	2108      	movs	r1, #8
  405c22:	4b05      	ldr	r3, [pc, #20]	; (405c38 <lv_obj_get_style_list+0x2c>)
  405c24:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
  405c26:	2801      	cmp	r0, #1
  405c28:	d103      	bne.n	405c32 <lv_obj_get_style_list+0x26>
    return info.result;
  405c2a:	9801      	ldr	r0, [sp, #4]
}
  405c2c:	b003      	add	sp, #12
  405c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    if(res != LV_RES_OK) return NULL;
  405c32:	2000      	movs	r0, #0
  405c34:	e7fa      	b.n	405c2c <lv_obj_get_style_list+0x20>
  405c36:	bf00      	nop
  405c38:	00405905 	.word	0x00405905

00405c3c <trans_del>:
{
  405c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405c40:	4607      	mov	r7, r0
  405c42:	4688      	mov	r8, r1
  405c44:	4691      	mov	r9, r2
  405c46:	461e      	mov	r6, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  405c48:	4819      	ldr	r0, [pc, #100]	; (405cb0 <trans_del+0x74>)
  405c4a:	4b1a      	ldr	r3, [pc, #104]	; (405cb4 <trans_del+0x78>)
  405c4c:	4798      	blx	r3
  405c4e:	4604      	mov	r4, r0
    while(tr != NULL) {
  405c50:	e006      	b.n	405c60 <trans_del+0x24>
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405c52:	88a3      	ldrh	r3, [r4, #4]
  405c54:	454b      	cmp	r3, r9
  405c56:	d015      	beq.n	405c84 <trans_del+0x48>
  405c58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
  405c5c:	d012      	beq.n	405c84 <trans_del+0x48>
{
  405c5e:	462c      	mov	r4, r5
    while(tr != NULL) {
  405c60:	b31c      	cbz	r4, 405caa <trans_del+0x6e>
        if(tr == tr_limit) break;
  405c62:	42b4      	cmp	r4, r6
  405c64:	d021      	beq.n	405caa <trans_del+0x6e>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405c66:	4621      	mov	r1, r4
  405c68:	4811      	ldr	r0, [pc, #68]	; (405cb0 <trans_del+0x74>)
  405c6a:	4b13      	ldr	r3, [pc, #76]	; (405cb8 <trans_del+0x7c>)
  405c6c:	4798      	blx	r3
  405c6e:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405c70:	6820      	ldr	r0, [r4, #0]
  405c72:	42b8      	cmp	r0, r7
  405c74:	d1f3      	bne.n	405c5e <trans_del+0x22>
  405c76:	79a1      	ldrb	r1, [r4, #6]
  405c78:	4541      	cmp	r1, r8
  405c7a:	d0ea      	beq.n	405c52 <trans_del+0x16>
  405c7c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  405c80:	d1ed      	bne.n	405c5e <trans_del+0x22>
  405c82:	e7e6      	b.n	405c52 <trans_del+0x16>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405c84:	4b0d      	ldr	r3, [pc, #52]	; (405cbc <trans_del+0x80>)
  405c86:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  405c88:	4b0d      	ldr	r3, [pc, #52]	; (405cc0 <trans_del+0x84>)
  405c8a:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
  405c8c:	88a1      	ldrh	r1, [r4, #4]
  405c8e:	4b0d      	ldr	r3, [pc, #52]	; (405cc4 <trans_del+0x88>)
  405c90:	4798      	blx	r3
            lv_anim_del(tr, NULL);
  405c92:	2100      	movs	r1, #0
  405c94:	4620      	mov	r0, r4
  405c96:	4b0c      	ldr	r3, [pc, #48]	; (405cc8 <trans_del+0x8c>)
  405c98:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405c9a:	4621      	mov	r1, r4
  405c9c:	4804      	ldr	r0, [pc, #16]	; (405cb0 <trans_del+0x74>)
  405c9e:	4b0b      	ldr	r3, [pc, #44]	; (405ccc <trans_del+0x90>)
  405ca0:	4798      	blx	r3
            lv_mem_free(tr);
  405ca2:	4620      	mov	r0, r4
  405ca4:	4b0a      	ldr	r3, [pc, #40]	; (405cd0 <trans_del+0x94>)
  405ca6:	4798      	blx	r3
  405ca8:	e7d9      	b.n	405c5e <trans_del+0x22>
  405caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405cae:	bf00      	nop
  405cb0:	2043a310 	.word	0x2043a310
  405cb4:	00416193 	.word	0x00416193
  405cb8:	004161ab 	.word	0x004161ab
  405cbc:	00405c0d 	.word	0x00405c0d
  405cc0:	0040ac2d 	.word	0x0040ac2d
  405cc4:	0040a089 	.word	0x0040a089
  405cc8:	004153d9 	.word	0x004153d9
  405ccc:	00416245 	.word	0x00416245
  405cd0:	00416681 	.word	0x00416681

00405cd4 <lv_obj_clean_style_list>:
{
  405cd4:	b538      	push	{r3, r4, r5, lr}
  405cd6:	4604      	mov	r4, r0
  405cd8:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  405cda:	4b06      	ldr	r3, [pc, #24]	; (405cf4 <lv_obj_clean_style_list+0x20>)
  405cdc:	4798      	blx	r3
    if(style_dsc == NULL) {
  405cde:	b138      	cbz	r0, 405cf0 <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
  405ce0:	4b05      	ldr	r3, [pc, #20]	; (405cf8 <lv_obj_clean_style_list+0x24>)
  405ce2:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
  405ce4:	2300      	movs	r3, #0
  405ce6:	22ff      	movs	r2, #255	; 0xff
  405ce8:	4629      	mov	r1, r5
  405cea:	4620      	mov	r0, r4
  405cec:	4c03      	ldr	r4, [pc, #12]	; (405cfc <lv_obj_clean_style_list+0x28>)
  405cee:	47a0      	blx	r4
  405cf0:	bd38      	pop	{r3, r4, r5, pc}
  405cf2:	bf00      	nop
  405cf4:	00405c0d 	.word	0x00405c0d
  405cf8:	0040ac41 	.word	0x0040ac41
  405cfc:	00405c3d 	.word	0x00405c3d

00405d00 <_lv_obj_disable_style_caching>:
{
  405d00:	b570      	push	{r4, r5, r6, lr}
  405d02:	4605      	mov	r5, r0
  405d04:	460e      	mov	r6, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405d06:	2400      	movs	r4, #0
  405d08:	2c3f      	cmp	r4, #63	; 0x3f
  405d0a:	d80b      	bhi.n	405d24 <_lv_obj_disable_style_caching+0x24>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405d0c:	4621      	mov	r1, r4
  405d0e:	4628      	mov	r0, r5
  405d10:	4b0c      	ldr	r3, [pc, #48]	; (405d44 <_lv_obj_disable_style_caching+0x44>)
  405d12:	4798      	blx	r3
        if(list == NULL) break;
  405d14:	b130      	cbz	r0, 405d24 <_lv_obj_disable_style_caching+0x24>
        list->ignore_cache = dis;
  405d16:	7942      	ldrb	r2, [r0, #5]
  405d18:	f366 02c3 	bfi	r2, r6, #3, #1
  405d1c:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405d1e:	3401      	adds	r4, #1
  405d20:	b2e4      	uxtb	r4, r4
  405d22:	e7f1      	b.n	405d08 <_lv_obj_disable_style_caching+0x8>
  405d24:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405d26:	2cff      	cmp	r4, #255	; 0xff
  405d28:	d00b      	beq.n	405d42 <_lv_obj_disable_style_caching+0x42>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405d2a:	4621      	mov	r1, r4
  405d2c:	4628      	mov	r0, r5
  405d2e:	4b05      	ldr	r3, [pc, #20]	; (405d44 <_lv_obj_disable_style_caching+0x44>)
  405d30:	4798      	blx	r3
        if(list == NULL) break;
  405d32:	b130      	cbz	r0, 405d42 <_lv_obj_disable_style_caching+0x42>
        list->ignore_cache = dis;
  405d34:	7942      	ldrb	r2, [r0, #5]
  405d36:	f366 02c3 	bfi	r2, r6, #3, #1
  405d3a:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405d3c:	3401      	adds	r4, #1
  405d3e:	b2e4      	uxtb	r4, r4
  405d40:	e7f1      	b.n	405d26 <_lv_obj_disable_style_caching+0x26>
  405d42:	bd70      	pop	{r4, r5, r6, pc}
  405d44:	00405c0d 	.word	0x00405c0d

00405d48 <trans_anim_ready_cb>:
{
  405d48:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
  405d4a:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405d4c:	4816      	ldr	r0, [pc, #88]	; (405da8 <trans_anim_ready_cb+0x60>)
  405d4e:	4b17      	ldr	r3, [pc, #92]	; (405dac <trans_anim_ready_cb+0x64>)
  405d50:	4798      	blx	r3
    bool running = false;
  405d52:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405d54:	e003      	b.n	405d5e <trans_anim_ready_cb+0x16>
  405d56:	4601      	mov	r1, r0
  405d58:	4813      	ldr	r0, [pc, #76]	; (405da8 <trans_anim_ready_cb+0x60>)
  405d5a:	4b15      	ldr	r3, [pc, #84]	; (405db0 <trans_anim_ready_cb+0x68>)
  405d5c:	4798      	blx	r3
  405d5e:	b178      	cbz	r0, 405d80 <trans_anim_ready_cb+0x38>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
  405d60:	42a0      	cmp	r0, r4
  405d62:	d0f8      	beq.n	405d56 <trans_anim_ready_cb+0xe>
  405d64:	6802      	ldr	r2, [r0, #0]
  405d66:	6823      	ldr	r3, [r4, #0]
  405d68:	429a      	cmp	r2, r3
  405d6a:	d1f4      	bne.n	405d56 <trans_anim_ready_cb+0xe>
  405d6c:	6843      	ldr	r3, [r0, #4]
  405d6e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  405d72:	6863      	ldr	r3, [r4, #4]
  405d74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  405d78:	429a      	cmp	r2, r3
  405d7a:	d1ec      	bne.n	405d56 <trans_anim_ready_cb+0xe>
            running = true;
  405d7c:	2501      	movs	r5, #1
  405d7e:	e7ea      	b.n	405d56 <trans_anim_ready_cb+0xe>
    if(!running) {
  405d80:	b13d      	cbz	r5, 405d92 <trans_anim_ready_cb+0x4a>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405d82:	4621      	mov	r1, r4
  405d84:	4808      	ldr	r0, [pc, #32]	; (405da8 <trans_anim_ready_cb+0x60>)
  405d86:	4b0b      	ldr	r3, [pc, #44]	; (405db4 <trans_anim_ready_cb+0x6c>)
  405d88:	4798      	blx	r3
    lv_mem_free(tr);
  405d8a:	4620      	mov	r0, r4
  405d8c:	4b0a      	ldr	r3, [pc, #40]	; (405db8 <trans_anim_ready_cb+0x70>)
  405d8e:	4798      	blx	r3
  405d90:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405d92:	79a1      	ldrb	r1, [r4, #6]
  405d94:	6820      	ldr	r0, [r4, #0]
  405d96:	4b09      	ldr	r3, [pc, #36]	; (405dbc <trans_anim_ready_cb+0x74>)
  405d98:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  405d9a:	4b09      	ldr	r3, [pc, #36]	; (405dc0 <trans_anim_ready_cb+0x78>)
  405d9c:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
  405d9e:	88a1      	ldrh	r1, [r4, #4]
  405da0:	4b08      	ldr	r3, [pc, #32]	; (405dc4 <trans_anim_ready_cb+0x7c>)
  405da2:	4798      	blx	r3
  405da4:	e7ed      	b.n	405d82 <trans_anim_ready_cb+0x3a>
  405da6:	bf00      	nop
  405da8:	2043a310 	.word	0x2043a310
  405dac:	00416189 	.word	0x00416189
  405db0:	0041619d 	.word	0x0041619d
  405db4:	00416245 	.word	0x00416245
  405db8:	00416681 	.word	0x00416681
  405dbc:	00405c0d 	.word	0x00405c0d
  405dc0:	0040ac2d 	.word	0x0040ac2d
  405dc4:	0040a089 	.word	0x0040a089

00405dc8 <lv_obj_get_hidden>:
{
  405dc8:	b510      	push	{r4, lr}
  405dca:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405dcc:	4b06      	ldr	r3, [pc, #24]	; (405de8 <lv_obj_get_hidden+0x20>)
  405dce:	4798      	blx	r3
  405dd0:	b120      	cbz	r0, 405ddc <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
  405dd2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  405dd6:	f3c0 1000 	ubfx	r0, r0, #4, #1
  405dda:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ddc:	4622      	mov	r2, r4
  405dde:	2300      	movs	r3, #0
  405de0:	4802      	ldr	r0, [pc, #8]	; (405dec <lv_obj_get_hidden+0x24>)
  405de2:	4903      	ldr	r1, [pc, #12]	; (405df0 <lv_obj_get_hidden+0x28>)
  405de4:	4788      	blx	r1
  405de6:	e7fe      	b.n	405de6 <lv_obj_get_hidden+0x1e>
  405de8:	00415e79 	.word	0x00415e79
  405dec:	0042c168 	.word	0x0042c168
  405df0:	00415e85 	.word	0x00415e85

00405df4 <lv_obj_area_is_visible>:
{
  405df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405df8:	b082      	sub	sp, #8
  405dfa:	4604      	mov	r4, r0
  405dfc:	460d      	mov	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
  405dfe:	4b34      	ldr	r3, [pc, #208]	; (405ed0 <lv_obj_area_is_visible+0xdc>)
  405e00:	4798      	blx	r3
  405e02:	b120      	cbz	r0, 405e0e <lv_obj_area_is_visible+0x1a>
  405e04:	2600      	movs	r6, #0
}
  405e06:	4630      	mov	r0, r6
  405e08:	b002      	add	sp, #8
  405e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405e0e:	4606      	mov	r6, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
  405e10:	4620      	mov	r0, r4
  405e12:	4b30      	ldr	r3, [pc, #192]	; (405ed4 <lv_obj_area_is_visible+0xe0>)
  405e14:	4798      	blx	r3
  405e16:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
  405e18:	4b2f      	ldr	r3, [pc, #188]	; (405ed8 <lv_obj_area_is_visible+0xe4>)
  405e1a:	4798      	blx	r3
  405e1c:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405e1e:	4b2f      	ldr	r3, [pc, #188]	; (405edc <lv_obj_area_is_visible+0xe8>)
  405e20:	4798      	blx	r3
  405e22:	4287      	cmp	r7, r0
  405e24:	d010      	beq.n	405e48 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405e26:	4640      	mov	r0, r8
  405e28:	4b2d      	ldr	r3, [pc, #180]	; (405ee0 <lv_obj_area_is_visible+0xec>)
  405e2a:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405e2c:	4287      	cmp	r7, r0
  405e2e:	d00b      	beq.n	405e48 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_top(disp) ||
  405e30:	4640      	mov	r0, r8
  405e32:	4b2c      	ldr	r3, [pc, #176]	; (405ee4 <lv_obj_area_is_visible+0xf0>)
  405e34:	4798      	blx	r3
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405e36:	4287      	cmp	r7, r0
  405e38:	d006      	beq.n	405e48 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
  405e3a:	4640      	mov	r0, r8
  405e3c:	4b2a      	ldr	r3, [pc, #168]	; (405ee8 <lv_obj_area_is_visible+0xf4>)
  405e3e:	4798      	blx	r3
       obj_scr == lv_disp_get_layer_top(disp) ||
  405e40:	4287      	cmp	r7, r0
  405e42:	d001      	beq.n	405e48 <lv_obj_area_is_visible+0x54>
    return true;
  405e44:	2601      	movs	r6, #1
  405e46:	e7de      	b.n	405e06 <lv_obj_area_is_visible+0x12>
        lv_coord_t ext_size = obj->ext_draw_pad;
  405e48:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
  405e4c:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405e50:	466a      	mov	r2, sp
  405e52:	2308      	movs	r3, #8
  405e54:	e004      	b.n	405e60 <lv_obj_area_is_visible+0x6c>
        *d8 = *s8;
  405e56:	f811 0b01 	ldrb.w	r0, [r1], #1
  405e5a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  405e5e:	3b01      	subs	r3, #1
    while(len) {
  405e60:	2b00      	cmp	r3, #0
  405e62:	d1f8      	bne.n	405e56 <lv_obj_area_is_visible+0x62>
        obj_coords.x1 -= ext_size;
  405e64:	b2bb      	uxth	r3, r7
  405e66:	f8bd 2000 	ldrh.w	r2, [sp]
  405e6a:	1ad2      	subs	r2, r2, r3
  405e6c:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
  405e70:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405e74:	1ad2      	subs	r2, r2, r3
  405e76:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
  405e7a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405e7e:	441a      	add	r2, r3
  405e80:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
  405e84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405e88:	4413      	add	r3, r2
  405e8a:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
  405e8e:	466a      	mov	r2, sp
  405e90:	4629      	mov	r1, r5
  405e92:	4628      	mov	r0, r5
  405e94:	4b15      	ldr	r3, [pc, #84]	; (405eec <lv_obj_area_is_visible+0xf8>)
  405e96:	4798      	blx	r3
        if(is_common == false) return false;  /*The area is not on the object*/
  405e98:	4607      	mov	r7, r0
  405e9a:	2800      	cmp	r0, #0
  405e9c:	d0b3      	beq.n	405e06 <lv_obj_area_is_visible+0x12>
        lv_obj_t * par = lv_obj_get_parent(obj);
  405e9e:	4620      	mov	r0, r4
  405ea0:	4b13      	ldr	r3, [pc, #76]	; (405ef0 <lv_obj_area_is_visible+0xfc>)
  405ea2:	4798      	blx	r3
  405ea4:	4604      	mov	r4, r0
        while(par != NULL) {
  405ea6:	b18c      	cbz	r4, 405ecc <lv_obj_area_is_visible+0xd8>
            is_common = _lv_area_intersect(area, area, &par->coords);
  405ea8:	f104 0210 	add.w	r2, r4, #16
  405eac:	4629      	mov	r1, r5
  405eae:	4628      	mov	r0, r5
  405eb0:	4b0e      	ldr	r3, [pc, #56]	; (405eec <lv_obj_area_is_visible+0xf8>)
  405eb2:	4798      	blx	r3
            if(is_common == false) return false;       /*If no common parts with parent break;*/
  405eb4:	2800      	cmp	r0, #0
  405eb6:	d0a6      	beq.n	405e06 <lv_obj_area_is_visible+0x12>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  405eb8:	4620      	mov	r0, r4
  405eba:	4b05      	ldr	r3, [pc, #20]	; (405ed0 <lv_obj_area_is_visible+0xdc>)
  405ebc:	4798      	blx	r3
  405ebe:	2800      	cmp	r0, #0
  405ec0:	d1a1      	bne.n	405e06 <lv_obj_area_is_visible+0x12>
            par = lv_obj_get_parent(par);
  405ec2:	4620      	mov	r0, r4
  405ec4:	4b0a      	ldr	r3, [pc, #40]	; (405ef0 <lv_obj_area_is_visible+0xfc>)
  405ec6:	4798      	blx	r3
  405ec8:	4604      	mov	r4, r0
  405eca:	e7ec      	b.n	405ea6 <lv_obj_area_is_visible+0xb2>
    return true;
  405ecc:	463e      	mov	r6, r7
  405ece:	e79a      	b.n	405e06 <lv_obj_area_is_visible+0x12>
  405ed0:	00405dc9 	.word	0x00405dc9
  405ed4:	004059d5 	.word	0x004059d5
  405ed8:	00405a0d 	.word	0x00405a0d
  405edc:	00403659 	.word	0x00403659
  405ee0:	00403675 	.word	0x00403675
  405ee4:	00403691 	.word	0x00403691
  405ee8:	004036ad 	.word	0x004036ad
  405eec:	004155b3 	.word	0x004155b3
  405ef0:	004059ad 	.word	0x004059ad

00405ef4 <lv_obj_invalidate_area>:
{
  405ef4:	b530      	push	{r4, r5, lr}
  405ef6:	b083      	sub	sp, #12
  405ef8:	4605      	mov	r5, r0
  405efa:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405efc:	4b10      	ldr	r3, [pc, #64]	; (405f40 <lv_obj_invalidate_area+0x4c>)
  405efe:	4798      	blx	r3
  405f00:	b118      	cbz	r0, 405f0a <lv_obj_invalidate_area+0x16>
  405f02:	4622      	mov	r2, r4
  405f04:	4669      	mov	r1, sp
  405f06:	2308      	movs	r3, #8
  405f08:	e00a      	b.n	405f20 <lv_obj_invalidate_area+0x2c>
  405f0a:	462a      	mov	r2, r5
  405f0c:	2300      	movs	r3, #0
  405f0e:	480d      	ldr	r0, [pc, #52]	; (405f44 <lv_obj_invalidate_area+0x50>)
  405f10:	490d      	ldr	r1, [pc, #52]	; (405f48 <lv_obj_invalidate_area+0x54>)
  405f12:	4788      	blx	r1
  405f14:	e7fe      	b.n	405f14 <lv_obj_invalidate_area+0x20>
        *d8 = *s8;
  405f16:	f812 0b01 	ldrb.w	r0, [r2], #1
  405f1a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  405f1e:	3b01      	subs	r3, #1
    while(len) {
  405f20:	2b00      	cmp	r3, #0
  405f22:	d1f8      	bne.n	405f16 <lv_obj_invalidate_area+0x22>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
  405f24:	4669      	mov	r1, sp
  405f26:	4628      	mov	r0, r5
  405f28:	4b08      	ldr	r3, [pc, #32]	; (405f4c <lv_obj_invalidate_area+0x58>)
  405f2a:	4798      	blx	r3
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  405f2c:	b128      	cbz	r0, 405f3a <lv_obj_invalidate_area+0x46>
  405f2e:	4628      	mov	r0, r5
  405f30:	4b07      	ldr	r3, [pc, #28]	; (405f50 <lv_obj_invalidate_area+0x5c>)
  405f32:	4798      	blx	r3
  405f34:	4669      	mov	r1, sp
  405f36:	4b07      	ldr	r3, [pc, #28]	; (405f54 <lv_obj_invalidate_area+0x60>)
  405f38:	4798      	blx	r3
}
  405f3a:	b003      	add	sp, #12
  405f3c:	bd30      	pop	{r4, r5, pc}
  405f3e:	bf00      	nop
  405f40:	00415e79 	.word	0x00415e79
  405f44:	0042c168 	.word	0x0042c168
  405f48:	00415e85 	.word	0x00415e85
  405f4c:	00405df5 	.word	0x00405df5
  405f50:	00405a0d 	.word	0x00405a0d
  405f54:	00409695 	.word	0x00409695

00405f58 <lv_obj_invalidate>:
{
  405f58:	b530      	push	{r4, r5, lr}
  405f5a:	b083      	sub	sp, #12
  405f5c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f5e:	4b19      	ldr	r3, [pc, #100]	; (405fc4 <lv_obj_invalidate+0x6c>)
  405f60:	4798      	blx	r3
  405f62:	b130      	cbz	r0, 405f72 <lv_obj_invalidate+0x1a>
    lv_coord_t ext_size = obj->ext_draw_pad;
  405f64:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    lv_area_copy(&obj_coords, &obj->coords);
  405f68:	f104 0010 	add.w	r0, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405f6c:	4669      	mov	r1, sp
  405f6e:	2208      	movs	r2, #8
  405f70:	e00a      	b.n	405f88 <lv_obj_invalidate+0x30>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f72:	4622      	mov	r2, r4
  405f74:	2300      	movs	r3, #0
  405f76:	4814      	ldr	r0, [pc, #80]	; (405fc8 <lv_obj_invalidate+0x70>)
  405f78:	4914      	ldr	r1, [pc, #80]	; (405fcc <lv_obj_invalidate+0x74>)
  405f7a:	4788      	blx	r1
  405f7c:	e7fe      	b.n	405f7c <lv_obj_invalidate+0x24>
        *d8 = *s8;
  405f7e:	f810 5b01 	ldrb.w	r5, [r0], #1
  405f82:	f801 5b01 	strb.w	r5, [r1], #1
        len--;
  405f86:	3a01      	subs	r2, #1
    while(len) {
  405f88:	2a00      	cmp	r2, #0
  405f8a:	d1f8      	bne.n	405f7e <lv_obj_invalidate+0x26>
    obj_coords.x1 -= ext_size;
  405f8c:	b29b      	uxth	r3, r3
  405f8e:	f8bd 2000 	ldrh.w	r2, [sp]
  405f92:	1ad2      	subs	r2, r2, r3
  405f94:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
  405f98:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405f9c:	1ad2      	subs	r2, r2, r3
  405f9e:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  405fa2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405fa6:	441a      	add	r2, r3
  405fa8:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
  405fac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405fb0:	4413      	add	r3, r2
  405fb2:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
  405fb6:	4669      	mov	r1, sp
  405fb8:	4620      	mov	r0, r4
  405fba:	4b05      	ldr	r3, [pc, #20]	; (405fd0 <lv_obj_invalidate+0x78>)
  405fbc:	4798      	blx	r3
}
  405fbe:	b003      	add	sp, #12
  405fc0:	bd30      	pop	{r4, r5, pc}
  405fc2:	bf00      	nop
  405fc4:	00415e79 	.word	0x00415e79
  405fc8:	0042c168 	.word	0x0042c168
  405fcc:	00415e85 	.word	0x00415e85
  405fd0:	00405ef5 	.word	0x00405ef5

00405fd4 <lv_obj_move_foreground>:
{
  405fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fd6:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405fd8:	4b11      	ldr	r3, [pc, #68]	; (406020 <lv_obj_move_foreground+0x4c>)
  405fda:	4798      	blx	r3
  405fdc:	b928      	cbnz	r0, 405fea <lv_obj_move_foreground+0x16>
  405fde:	462a      	mov	r2, r5
  405fe0:	2300      	movs	r3, #0
  405fe2:	4810      	ldr	r0, [pc, #64]	; (406024 <lv_obj_move_foreground+0x50>)
  405fe4:	4910      	ldr	r1, [pc, #64]	; (406028 <lv_obj_move_foreground+0x54>)
  405fe6:	4788      	blx	r1
  405fe8:	e7fe      	b.n	405fe8 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405fea:	4628      	mov	r0, r5
  405fec:	4b0f      	ldr	r3, [pc, #60]	; (40602c <lv_obj_move_foreground+0x58>)
  405fee:	4798      	blx	r3
  405ff0:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
  405ff2:	1d06      	adds	r6, r0, #4
  405ff4:	4630      	mov	r0, r6
  405ff6:	4b0e      	ldr	r3, [pc, #56]	; (406030 <lv_obj_move_foreground+0x5c>)
  405ff8:	4798      	blx	r3
  405ffa:	4285      	cmp	r5, r0
  405ffc:	d00f      	beq.n	40601e <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
  405ffe:	4620      	mov	r0, r4
  406000:	4f0c      	ldr	r7, [pc, #48]	; (406034 <lv_obj_move_foreground+0x60>)
  406002:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
  406004:	2301      	movs	r3, #1
  406006:	462a      	mov	r2, r5
  406008:	4631      	mov	r1, r6
  40600a:	4630      	mov	r0, r6
  40600c:	4e0a      	ldr	r6, [pc, #40]	; (406038 <lv_obj_move_foreground+0x64>)
  40600e:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
  406010:	69e3      	ldr	r3, [r4, #28]
  406012:	462a      	mov	r2, r5
  406014:	2101      	movs	r1, #1
  406016:	4620      	mov	r0, r4
  406018:	4798      	blx	r3
    lv_obj_invalidate(parent);
  40601a:	4620      	mov	r0, r4
  40601c:	47b8      	blx	r7
  40601e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406020:	00415e79 	.word	0x00415e79
  406024:	0042c168 	.word	0x0042c168
  406028:	00415e85 	.word	0x00415e85
  40602c:	004059ad 	.word	0x004059ad
  406030:	00416189 	.word	0x00416189
  406034:	00405f59 	.word	0x00405f59
  406038:	00416319 	.word	0x00416319

0040603c <lv_obj_set_pos>:
{
  40603c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406040:	b083      	sub	sp, #12
  406042:	4604      	mov	r4, r0
  406044:	460f      	mov	r7, r1
  406046:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406048:	4b24      	ldr	r3, [pc, #144]	; (4060dc <lv_obj_set_pos+0xa0>)
  40604a:	4798      	blx	r3
  40604c:	2800      	cmp	r0, #0
  40604e:	d03f      	beq.n	4060d0 <lv_obj_set_pos+0x94>
    lv_obj_t * par = obj->parent;
  406050:	6826      	ldr	r6, [r4, #0]
    if(par) {
  406052:	b12e      	cbz	r6, 406060 <lv_obj_set_pos+0x24>
        x = x + par->coords.x1;
  406054:	8a33      	ldrh	r3, [r6, #16]
  406056:	441f      	add	r7, r3
  406058:	b23f      	sxth	r7, r7
        y = y + par->coords.y1;
  40605a:	8a73      	ldrh	r3, [r6, #18]
  40605c:	441d      	add	r5, r3
  40605e:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
  406060:	8a23      	ldrh	r3, [r4, #16]
  406062:	1afb      	subs	r3, r7, r3
  406064:	fa1f f883 	uxth.w	r8, r3
  406068:	fa0f f788 	sxth.w	r7, r8
    diff.y = y - obj->coords.y1;
  40606c:	8a63      	ldrh	r3, [r4, #18]
  40606e:	1aed      	subs	r5, r5, r3
  406070:	b2ad      	uxth	r5, r5
  406072:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
  406076:	b917      	cbnz	r7, 40607e <lv_obj_set_pos+0x42>
  406078:	f1b9 0f00 	cmp.w	r9, #0
  40607c:	d025      	beq.n	4060ca <lv_obj_set_pos+0x8e>
    lv_obj_invalidate(obj);
  40607e:	4620      	mov	r0, r4
  406080:	4b17      	ldr	r3, [pc, #92]	; (4060e0 <lv_obj_set_pos+0xa4>)
  406082:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  406084:	4669      	mov	r1, sp
  406086:	4620      	mov	r0, r4
  406088:	4b16      	ldr	r3, [pc, #88]	; (4060e4 <lv_obj_set_pos+0xa8>)
  40608a:	4798      	blx	r3
    obj->coords.x1 += diff.x;
  40608c:	8a23      	ldrh	r3, [r4, #16]
  40608e:	4443      	add	r3, r8
  406090:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
  406092:	8a63      	ldrh	r3, [r4, #18]
  406094:	442b      	add	r3, r5
  406096:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
  406098:	8aa3      	ldrh	r3, [r4, #20]
  40609a:	4443      	add	r3, r8
  40609c:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
  40609e:	8ae3      	ldrh	r3, [r4, #22]
  4060a0:	441d      	add	r5, r3
  4060a2:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
  4060a4:	464a      	mov	r2, r9
  4060a6:	4639      	mov	r1, r7
  4060a8:	4620      	mov	r0, r4
  4060aa:	4b0f      	ldr	r3, [pc, #60]	; (4060e8 <lv_obj_set_pos+0xac>)
  4060ac:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  4060ae:	69e3      	ldr	r3, [r4, #28]
  4060b0:	466a      	mov	r2, sp
  4060b2:	2102      	movs	r1, #2
  4060b4:	4620      	mov	r0, r4
  4060b6:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  4060b8:	b126      	cbz	r6, 4060c4 <lv_obj_set_pos+0x88>
  4060ba:	69f3      	ldr	r3, [r6, #28]
  4060bc:	4622      	mov	r2, r4
  4060be:	2101      	movs	r1, #1
  4060c0:	4630      	mov	r0, r6
  4060c2:	4798      	blx	r3
    lv_obj_invalidate(obj);
  4060c4:	4620      	mov	r0, r4
  4060c6:	4b06      	ldr	r3, [pc, #24]	; (4060e0 <lv_obj_set_pos+0xa4>)
  4060c8:	4798      	blx	r3
}
  4060ca:	b003      	add	sp, #12
  4060cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4060d0:	4622      	mov	r2, r4
  4060d2:	2300      	movs	r3, #0
  4060d4:	4805      	ldr	r0, [pc, #20]	; (4060ec <lv_obj_set_pos+0xb0>)
  4060d6:	4906      	ldr	r1, [pc, #24]	; (4060f0 <lv_obj_set_pos+0xb4>)
  4060d8:	4788      	blx	r1
  4060da:	e7fe      	b.n	4060da <lv_obj_set_pos+0x9e>
  4060dc:	00415e79 	.word	0x00415e79
  4060e0:	00405f59 	.word	0x00405f59
  4060e4:	00405ac1 	.word	0x00405ac1
  4060e8:	0040545d 	.word	0x0040545d
  4060ec:	0042c168 	.word	0x0042c168
  4060f0:	00415e85 	.word	0x00415e85

004060f4 <lv_obj_set_x>:
{
  4060f4:	b538      	push	{r3, r4, r5, lr}
  4060f6:	4604      	mov	r4, r0
  4060f8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4060fa:	4b09      	ldr	r3, [pc, #36]	; (406120 <lv_obj_set_x+0x2c>)
  4060fc:	4798      	blx	r3
  4060fe:	b928      	cbnz	r0, 40610c <lv_obj_set_x+0x18>
  406100:	4622      	mov	r2, r4
  406102:	2300      	movs	r3, #0
  406104:	4807      	ldr	r0, [pc, #28]	; (406124 <lv_obj_set_x+0x30>)
  406106:	4908      	ldr	r1, [pc, #32]	; (406128 <lv_obj_set_x+0x34>)
  406108:	4788      	blx	r1
  40610a:	e7fe      	b.n	40610a <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
  40610c:	4620      	mov	r0, r4
  40610e:	4b07      	ldr	r3, [pc, #28]	; (40612c <lv_obj_set_x+0x38>)
  406110:	4798      	blx	r3
  406112:	4602      	mov	r2, r0
  406114:	4629      	mov	r1, r5
  406116:	4620      	mov	r0, r4
  406118:	4b05      	ldr	r3, [pc, #20]	; (406130 <lv_obj_set_x+0x3c>)
  40611a:	4798      	blx	r3
  40611c:	bd38      	pop	{r3, r4, r5, pc}
  40611e:	bf00      	nop
  406120:	00415e79 	.word	0x00415e79
  406124:	0042c168 	.word	0x0042c168
  406128:	00415e85 	.word	0x00415e85
  40612c:	00405b41 	.word	0x00405b41
  406130:	0040603d 	.word	0x0040603d

00406134 <lv_obj_set_y>:
{
  406134:	b538      	push	{r3, r4, r5, lr}
  406136:	4604      	mov	r4, r0
  406138:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40613a:	4b09      	ldr	r3, [pc, #36]	; (406160 <lv_obj_set_y+0x2c>)
  40613c:	4798      	blx	r3
  40613e:	b928      	cbnz	r0, 40614c <lv_obj_set_y+0x18>
  406140:	4622      	mov	r2, r4
  406142:	2300      	movs	r3, #0
  406144:	4807      	ldr	r0, [pc, #28]	; (406164 <lv_obj_set_y+0x30>)
  406146:	4908      	ldr	r1, [pc, #32]	; (406168 <lv_obj_set_y+0x34>)
  406148:	4788      	blx	r1
  40614a:	e7fe      	b.n	40614a <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
  40614c:	4620      	mov	r0, r4
  40614e:	4b07      	ldr	r3, [pc, #28]	; (40616c <lv_obj_set_y+0x38>)
  406150:	4798      	blx	r3
  406152:	462a      	mov	r2, r5
  406154:	4601      	mov	r1, r0
  406156:	4620      	mov	r0, r4
  406158:	4b05      	ldr	r3, [pc, #20]	; (406170 <lv_obj_set_y+0x3c>)
  40615a:	4798      	blx	r3
  40615c:	bd38      	pop	{r3, r4, r5, pc}
  40615e:	bf00      	nop
  406160:	00415e79 	.word	0x00415e79
  406164:	0042c168 	.word	0x0042c168
  406168:	00415e85 	.word	0x00415e85
  40616c:	00405b01 	.word	0x00405b01
  406170:	0040603d 	.word	0x0040603d

00406174 <obj_align_core>:
{
  406174:	b5f0      	push	{r4, r5, r6, r7, lr}
  406176:	b083      	sub	sp, #12
  406178:	4604      	mov	r4, r0
  40617a:	461d      	mov	r5, r3
  40617c:	f89d 6020 	ldrb.w	r6, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
  406180:	f101 0010 	add.w	r0, r1, #16
  406184:	ab01      	add	r3, sp, #4
  406186:	f104 0110 	add.w	r1, r4, #16
  40618a:	4f18      	ldr	r7, [pc, #96]	; (4061ec <obj_align_core+0x78>)
  40618c:	47b8      	blx	r7
    lv_obj_t * par        = lv_obj_get_parent(obj);
  40618e:	4620      	mov	r0, r4
  406190:	4b17      	ldr	r3, [pc, #92]	; (4061f0 <obj_align_core+0x7c>)
  406192:	4798      	blx	r3
    lv_coord_t par_abs_x  = par->coords.x1;
  406194:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  406198:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.x += x_ofs;
  40619c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  4061a0:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  4061a4:	4411      	add	r1, r2
  4061a6:	b289      	uxth	r1, r1
    new_pos.y += y_ofs;
  4061a8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  4061ac:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  4061b0:	4402      	add	r2, r0
  4061b2:	b292      	uxth	r2, r2
    new_pos.x -= par_abs_x;
  4061b4:	1bc9      	subs	r1, r1, r7
  4061b6:	b209      	sxth	r1, r1
  4061b8:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
  4061bc:	1ad2      	subs	r2, r2, r3
  4061be:	b212      	sxth	r2, r2
  4061c0:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  4061c4:	4235      	tst	r5, r6
  4061c6:	d103      	bne.n	4061d0 <obj_align_core+0x5c>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  4061c8:	b935      	cbnz	r5, 4061d8 <obj_align_core+0x64>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  4061ca:	b94e      	cbnz	r6, 4061e0 <obj_align_core+0x6c>
}
  4061cc:	b003      	add	sp, #12
  4061ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  4061d0:	4620      	mov	r0, r4
  4061d2:	4b08      	ldr	r3, [pc, #32]	; (4061f4 <obj_align_core+0x80>)
  4061d4:	4798      	blx	r3
  4061d6:	e7f9      	b.n	4061cc <obj_align_core+0x58>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  4061d8:	4620      	mov	r0, r4
  4061da:	4b07      	ldr	r3, [pc, #28]	; (4061f8 <obj_align_core+0x84>)
  4061dc:	4798      	blx	r3
  4061de:	e7f5      	b.n	4061cc <obj_align_core+0x58>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  4061e0:	4611      	mov	r1, r2
  4061e2:	4620      	mov	r0, r4
  4061e4:	4b05      	ldr	r3, [pc, #20]	; (4061fc <obj_align_core+0x88>)
  4061e6:	4798      	blx	r3
}
  4061e8:	e7f0      	b.n	4061cc <obj_align_core+0x58>
  4061ea:	bf00      	nop
  4061ec:	004158f1 	.word	0x004158f1
  4061f0:	004059ad 	.word	0x004059ad
  4061f4:	0040603d 	.word	0x0040603d
  4061f8:	004060f5 	.word	0x004060f5
  4061fc:	00406135 	.word	0x00406135

00406200 <lv_obj_align>:
{
  406200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406204:	b085      	sub	sp, #20
  406206:	4604      	mov	r4, r0
  406208:	460d      	mov	r5, r1
  40620a:	4690      	mov	r8, r2
  40620c:	461f      	mov	r7, r3
  40620e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406212:	4b19      	ldr	r3, [pc, #100]	; (406278 <lv_obj_align+0x78>)
  406214:	4798      	blx	r3
  406216:	b928      	cbnz	r0, 406224 <lv_obj_align+0x24>
  406218:	4622      	mov	r2, r4
  40621a:	2300      	movs	r3, #0
  40621c:	4817      	ldr	r0, [pc, #92]	; (40627c <lv_obj_align+0x7c>)
  40621e:	4918      	ldr	r1, [pc, #96]	; (406280 <lv_obj_align+0x80>)
  406220:	4788      	blx	r1
  406222:	e7fe      	b.n	406222 <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
  406224:	b14d      	cbz	r5, 40623a <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  406226:	4628      	mov	r0, r5
  406228:	4b13      	ldr	r3, [pc, #76]	; (406278 <lv_obj_align+0x78>)
  40622a:	4798      	blx	r3
  40622c:	b950      	cbnz	r0, 406244 <lv_obj_align+0x44>
  40622e:	462a      	mov	r2, r5
  406230:	2300      	movs	r3, #0
  406232:	4812      	ldr	r0, [pc, #72]	; (40627c <lv_obj_align+0x7c>)
  406234:	4912      	ldr	r1, [pc, #72]	; (406280 <lv_obj_align+0x80>)
  406236:	4788      	blx	r1
  406238:	e7fe      	b.n	406238 <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
  40623a:	4620      	mov	r0, r4
  40623c:	4b11      	ldr	r3, [pc, #68]	; (406284 <lv_obj_align+0x84>)
  40623e:	4798      	blx	r3
  406240:	4605      	mov	r5, r0
  406242:	e7f0      	b.n	406226 <lv_obj_align+0x26>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
  406244:	9602      	str	r6, [sp, #8]
  406246:	9701      	str	r7, [sp, #4]
  406248:	2301      	movs	r3, #1
  40624a:	9300      	str	r3, [sp, #0]
  40624c:	4642      	mov	r2, r8
  40624e:	4629      	mov	r1, r5
  406250:	4620      	mov	r0, r4
  406252:	f8df 9034 	ldr.w	r9, [pc, #52]	; 406288 <lv_obj_align+0x88>
  406256:	47c8      	blx	r9
    obj->realign.align       = align;
  406258:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  40625c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  406260:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  406264:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
  406266:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  40626a:	f36f 0341 	bfc	r3, #1, #1
  40626e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  406272:	b005      	add	sp, #20
  406274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406278:	00415e79 	.word	0x00415e79
  40627c:	0042c168 	.word	0x0042c168
  406280:	00415e85 	.word	0x00415e85
  406284:	004059ad 	.word	0x004059ad
  406288:	00406175 	.word	0x00406175

0040628c <obj_align_mid_core>:
{
  40628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406290:	b083      	sub	sp, #12
  406292:	4680      	mov	r8, r0
  406294:	9001      	str	r0, [sp, #4]
  406296:	460f      	mov	r7, r1
  406298:	4616      	mov	r6, r2
  40629a:	469a      	mov	sl, r3
  40629c:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    lv_coord_t new_x = lv_obj_get_x(obj);
  4062a0:	4ba4      	ldr	r3, [pc, #656]	; (406534 <obj_align_mid_core+0x2a8>)
  4062a2:	4798      	blx	r3
  4062a4:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
  4062a6:	4640      	mov	r0, r8
  4062a8:	4ba3      	ldr	r3, [pc, #652]	; (406538 <obj_align_mid_core+0x2ac>)
  4062aa:	4798      	blx	r3
  4062ac:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  4062ae:	4640      	mov	r0, r8
  4062b0:	4ba2      	ldr	r3, [pc, #648]	; (40653c <obj_align_mid_core+0x2b0>)
  4062b2:	4798      	blx	r3
  4062b4:	4681      	mov	r9, r0
  4062b6:	2800      	cmp	r0, #0
  4062b8:	db22      	blt.n	406300 <obj_align_mid_core+0x74>
  4062ba:	f349 094f 	sbfx	r9, r9, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  4062be:	9801      	ldr	r0, [sp, #4]
  4062c0:	4b9f      	ldr	r3, [pc, #636]	; (406540 <obj_align_mid_core+0x2b4>)
  4062c2:	4798      	blx	r3
  4062c4:	4680      	mov	r8, r0
  4062c6:	2800      	cmp	r0, #0
  4062c8:	db1d      	blt.n	406306 <obj_align_mid_core+0x7a>
  4062ca:	f348 084f 	sbfx	r8, r8, #1, #16
    switch(align) {
  4062ce:	2e14      	cmp	r6, #20
  4062d0:	d82e      	bhi.n	406330 <obj_align_mid_core+0xa4>
  4062d2:	e8df f016 	tbh	[pc, r6, lsl #1]
  4062d6:	001b      	.short	0x001b
  4062d8:	0062005b 	.word	0x0062005b
  4062dc:	007c0071 	.word	0x007c0071
  4062e0:	009a0087 	.word	0x009a0087
  4062e4:	00b800a9 	.word	0x00b800a9
  4062e8:	00d200cb 	.word	0x00d200cb
  4062ec:	00ec00e1 	.word	0x00ec00e1
  4062f0:	010a00f7 	.word	0x010a00f7
  4062f4:	01200119 	.word	0x01200119
  4062f8:	01440139 	.word	0x01440139
  4062fc:	0162014f 	.word	0x0162014f
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  406300:	f100 0901 	add.w	r9, r0, #1
  406304:	e7d9      	b.n	4062ba <obj_align_mid_core+0x2e>
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  406306:	f100 0801 	add.w	r8, r0, #1
  40630a:	e7de      	b.n	4062ca <obj_align_mid_core+0x3e>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40630c:	4638      	mov	r0, r7
  40630e:	4b8b      	ldr	r3, [pc, #556]	; (40653c <obj_align_mid_core+0x2b0>)
  406310:	4798      	blx	r3
  406312:	4605      	mov	r5, r0
  406314:	2800      	cmp	r0, #0
  406316:	db35      	blt.n	406384 <obj_align_mid_core+0xf8>
  406318:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  40631c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40631e:	4638      	mov	r0, r7
  406320:	4b87      	ldr	r3, [pc, #540]	; (406540 <obj_align_mid_core+0x2b4>)
  406322:	4798      	blx	r3
  406324:	4604      	mov	r4, r0
  406326:	2800      	cmp	r0, #0
  406328:	db2e      	blt.n	406388 <obj_align_mid_core+0xfc>
  40632a:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40632e:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
  406330:	9801      	ldr	r0, [sp, #4]
  406332:	4b84      	ldr	r3, [pc, #528]	; (406544 <obj_align_mid_core+0x2b8>)
  406334:	4798      	blx	r3
    lv_coord_t base_abs_x = base->coords.x1;
  406336:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    lv_coord_t base_abs_y = base->coords.y1;
  40633a:	f9b7 e012 	ldrsh.w	lr, [r7, #18]
    lv_coord_t par_abs_x  = par->coords.x1;
  40633e:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  406342:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_x += x_ofs + base_abs_x;
  406346:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
  40634a:	4411      	add	r1, r2
  40634c:	fa15 f181 	uxtah	r1, r5, r1
  406350:	b289      	uxth	r1, r1
    new_y += y_ofs + base_abs_y;
  406352:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  406356:	4472      	add	r2, lr
  406358:	fa14 f282 	uxtah	r2, r4, r2
  40635c:	b292      	uxth	r2, r2
    new_x -= par_abs_x;
  40635e:	1bc9      	subs	r1, r1, r7
  406360:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
  406362:	1ad2      	subs	r2, r2, r3
  406364:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  406366:	ea1a 0f0b 	tst.w	sl, fp
  40636a:	f040 8125 	bne.w	4065b8 <obj_align_mid_core+0x32c>
    else if(x_set) lv_obj_set_x(obj, new_x);
  40636e:	f1ba 0f00 	cmp.w	sl, #0
  406372:	f040 8125 	bne.w	4065c0 <obj_align_mid_core+0x334>
    else if(y_set) lv_obj_set_y(obj, new_y);
  406376:	f1bb 0f00 	cmp.w	fp, #0
  40637a:	f040 8125 	bne.w	4065c8 <obj_align_mid_core+0x33c>
}
  40637e:	b003      	add	sp, #12
  406380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406384:	1c45      	adds	r5, r0, #1
  406386:	e7c7      	b.n	406318 <obj_align_mid_core+0x8c>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406388:	1c44      	adds	r4, r0, #1
  40638a:	e7ce      	b.n	40632a <obj_align_mid_core+0x9e>
            new_x = -obj_w_half;
  40638c:	f1c9 0500 	rsb	r5, r9, #0
  406390:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  406392:	f1c8 0400 	rsb	r4, r8, #0
  406396:	b224      	sxth	r4, r4
            break;
  406398:	e7ca      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40639a:	4638      	mov	r0, r7
  40639c:	4b67      	ldr	r3, [pc, #412]	; (40653c <obj_align_mid_core+0x2b0>)
  40639e:	4798      	blx	r3
  4063a0:	4605      	mov	r5, r0
  4063a2:	2800      	cmp	r0, #0
  4063a4:	db06      	blt.n	4063b4 <obj_align_mid_core+0x128>
  4063a6:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  4063aa:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4063ac:	f1c8 0400 	rsb	r4, r8, #0
  4063b0:	b224      	sxth	r4, r4
            break;
  4063b2:	e7bd      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4063b4:	1c45      	adds	r5, r0, #1
  4063b6:	e7f6      	b.n	4063a6 <obj_align_mid_core+0x11a>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4063b8:	4638      	mov	r0, r7
  4063ba:	4b60      	ldr	r3, [pc, #384]	; (40653c <obj_align_mid_core+0x2b0>)
  4063bc:	4798      	blx	r3
  4063be:	b285      	uxth	r5, r0
  4063c0:	eba5 0509 	sub.w	r5, r5, r9
  4063c4:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4063c6:	f1c8 0400 	rsb	r4, r8, #0
  4063ca:	b224      	sxth	r4, r4
            break;
  4063cc:	e7b0      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  4063ce:	f1c9 0500 	rsb	r5, r9, #0
  4063d2:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4063d4:	4638      	mov	r0, r7
  4063d6:	4b5a      	ldr	r3, [pc, #360]	; (406540 <obj_align_mid_core+0x2b4>)
  4063d8:	4798      	blx	r3
  4063da:	b284      	uxth	r4, r0
  4063dc:	eba4 0408 	sub.w	r4, r4, r8
  4063e0:	b224      	sxth	r4, r4
            break;
  4063e2:	e7a5      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4063e4:	4638      	mov	r0, r7
  4063e6:	4b55      	ldr	r3, [pc, #340]	; (40653c <obj_align_mid_core+0x2b0>)
  4063e8:	4798      	blx	r3
  4063ea:	4605      	mov	r5, r0
  4063ec:	2800      	cmp	r0, #0
  4063ee:	db0a      	blt.n	406406 <obj_align_mid_core+0x17a>
  4063f0:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  4063f4:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4063f6:	4638      	mov	r0, r7
  4063f8:	4b51      	ldr	r3, [pc, #324]	; (406540 <obj_align_mid_core+0x2b4>)
  4063fa:	4798      	blx	r3
  4063fc:	b284      	uxth	r4, r0
  4063fe:	eba4 0408 	sub.w	r4, r4, r8
  406402:	b224      	sxth	r4, r4
            break;
  406404:	e794      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406406:	1c45      	adds	r5, r0, #1
  406408:	e7f2      	b.n	4063f0 <obj_align_mid_core+0x164>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40640a:	4638      	mov	r0, r7
  40640c:	4b4b      	ldr	r3, [pc, #300]	; (40653c <obj_align_mid_core+0x2b0>)
  40640e:	4798      	blx	r3
  406410:	b285      	uxth	r5, r0
  406412:	eba5 0509 	sub.w	r5, r5, r9
  406416:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406418:	4638      	mov	r0, r7
  40641a:	4b49      	ldr	r3, [pc, #292]	; (406540 <obj_align_mid_core+0x2b4>)
  40641c:	4798      	blx	r3
  40641e:	b284      	uxth	r4, r0
  406420:	eba4 0408 	sub.w	r4, r4, r8
  406424:	b224      	sxth	r4, r4
            break;
  406426:	e783      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406428:	f1c9 0500 	rsb	r5, r9, #0
  40642c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40642e:	4638      	mov	r0, r7
  406430:	4b43      	ldr	r3, [pc, #268]	; (406540 <obj_align_mid_core+0x2b4>)
  406432:	4798      	blx	r3
  406434:	4604      	mov	r4, r0
  406436:	2800      	cmp	r0, #0
  406438:	db03      	blt.n	406442 <obj_align_mid_core+0x1b6>
  40643a:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40643e:	b224      	sxth	r4, r4
            break;
  406440:	e776      	b.n	406330 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406442:	1c44      	adds	r4, r0, #1
  406444:	e7f9      	b.n	40643a <obj_align_mid_core+0x1ae>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406446:	4638      	mov	r0, r7
  406448:	4b3c      	ldr	r3, [pc, #240]	; (40653c <obj_align_mid_core+0x2b0>)
  40644a:	4798      	blx	r3
  40644c:	b285      	uxth	r5, r0
  40644e:	eba5 0509 	sub.w	r5, r5, r9
  406452:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406454:	4638      	mov	r0, r7
  406456:	4b3a      	ldr	r3, [pc, #232]	; (406540 <obj_align_mid_core+0x2b4>)
  406458:	4798      	blx	r3
  40645a:	4604      	mov	r4, r0
  40645c:	2800      	cmp	r0, #0
  40645e:	db03      	blt.n	406468 <obj_align_mid_core+0x1dc>
  406460:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  406464:	b224      	sxth	r4, r4
            break;
  406466:	e763      	b.n	406330 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406468:	1c44      	adds	r4, r0, #1
  40646a:	e7f9      	b.n	406460 <obj_align_mid_core+0x1d4>
            new_x = -obj_w_half;
  40646c:	f1c9 0500 	rsb	r5, r9, #0
  406470:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  406472:	f1c8 0400 	rsb	r4, r8, #0
  406476:	b224      	sxth	r4, r4
            break;
  406478:	e75a      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40647a:	4638      	mov	r0, r7
  40647c:	4b2f      	ldr	r3, [pc, #188]	; (40653c <obj_align_mid_core+0x2b0>)
  40647e:	4798      	blx	r3
  406480:	4605      	mov	r5, r0
  406482:	2800      	cmp	r0, #0
  406484:	db06      	blt.n	406494 <obj_align_mid_core+0x208>
  406486:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  40648a:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40648c:	f1c8 0400 	rsb	r4, r8, #0
  406490:	b224      	sxth	r4, r4
            break;
  406492:	e74d      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406494:	1c45      	adds	r5, r0, #1
  406496:	e7f6      	b.n	406486 <obj_align_mid_core+0x1fa>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406498:	4638      	mov	r0, r7
  40649a:	4b28      	ldr	r3, [pc, #160]	; (40653c <obj_align_mid_core+0x2b0>)
  40649c:	4798      	blx	r3
  40649e:	b285      	uxth	r5, r0
  4064a0:	eba5 0509 	sub.w	r5, r5, r9
  4064a4:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4064a6:	f1c8 0400 	rsb	r4, r8, #0
  4064aa:	b224      	sxth	r4, r4
            break;
  4064ac:	e740      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  4064ae:	f1c9 0500 	rsb	r5, r9, #0
  4064b2:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4064b4:	4638      	mov	r0, r7
  4064b6:	4b22      	ldr	r3, [pc, #136]	; (406540 <obj_align_mid_core+0x2b4>)
  4064b8:	4798      	blx	r3
  4064ba:	b284      	uxth	r4, r0
  4064bc:	eba4 0408 	sub.w	r4, r4, r8
  4064c0:	b224      	sxth	r4, r4
            break;
  4064c2:	e735      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4064c4:	4638      	mov	r0, r7
  4064c6:	4b1d      	ldr	r3, [pc, #116]	; (40653c <obj_align_mid_core+0x2b0>)
  4064c8:	4798      	blx	r3
  4064ca:	4605      	mov	r5, r0
  4064cc:	2800      	cmp	r0, #0
  4064ce:	db0a      	blt.n	4064e6 <obj_align_mid_core+0x25a>
  4064d0:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  4064d4:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4064d6:	4638      	mov	r0, r7
  4064d8:	4b19      	ldr	r3, [pc, #100]	; (406540 <obj_align_mid_core+0x2b4>)
  4064da:	4798      	blx	r3
  4064dc:	b284      	uxth	r4, r0
  4064de:	eba4 0408 	sub.w	r4, r4, r8
  4064e2:	b224      	sxth	r4, r4
            break;
  4064e4:	e724      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4064e6:	1c45      	adds	r5, r0, #1
  4064e8:	e7f2      	b.n	4064d0 <obj_align_mid_core+0x244>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4064ea:	4638      	mov	r0, r7
  4064ec:	4b13      	ldr	r3, [pc, #76]	; (40653c <obj_align_mid_core+0x2b0>)
  4064ee:	4798      	blx	r3
  4064f0:	b285      	uxth	r5, r0
  4064f2:	eba5 0509 	sub.w	r5, r5, r9
  4064f6:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4064f8:	4638      	mov	r0, r7
  4064fa:	4b11      	ldr	r3, [pc, #68]	; (406540 <obj_align_mid_core+0x2b4>)
  4064fc:	4798      	blx	r3
  4064fe:	b284      	uxth	r4, r0
  406500:	eba4 0408 	sub.w	r4, r4, r8
  406504:	b224      	sxth	r4, r4
            break;
  406506:	e713      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406508:	f1c9 0500 	rsb	r5, r9, #0
  40650c:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40650e:	f1c8 0400 	rsb	r4, r8, #0
  406512:	b224      	sxth	r4, r4
            break;
  406514:	e70c      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406516:	f1c9 0500 	rsb	r5, r9, #0
  40651a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40651c:	4638      	mov	r0, r7
  40651e:	4b08      	ldr	r3, [pc, #32]	; (406540 <obj_align_mid_core+0x2b4>)
  406520:	4798      	blx	r3
  406522:	4604      	mov	r4, r0
  406524:	2800      	cmp	r0, #0
  406526:	db03      	blt.n	406530 <obj_align_mid_core+0x2a4>
  406528:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40652c:	b224      	sxth	r4, r4
            break;
  40652e:	e6ff      	b.n	406330 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406530:	1c44      	adds	r4, r0, #1
  406532:	e7f9      	b.n	406528 <obj_align_mid_core+0x29c>
  406534:	00405b01 	.word	0x00405b01
  406538:	00405b41 	.word	0x00405b41
  40653c:	00405b81 	.word	0x00405b81
  406540:	00405bb1 	.word	0x00405bb1
  406544:	004059ad 	.word	0x004059ad
            new_x = -obj_w_half;
  406548:	f1c9 0500 	rsb	r5, r9, #0
  40654c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  40654e:	4638      	mov	r0, r7
  406550:	4b20      	ldr	r3, [pc, #128]	; (4065d4 <obj_align_mid_core+0x348>)
  406552:	4798      	blx	r3
  406554:	b284      	uxth	r4, r0
  406556:	eba4 0408 	sub.w	r4, r4, r8
  40655a:	b224      	sxth	r4, r4
            break;
  40655c:	e6e8      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40655e:	4638      	mov	r0, r7
  406560:	4b1d      	ldr	r3, [pc, #116]	; (4065d8 <obj_align_mid_core+0x34c>)
  406562:	4798      	blx	r3
  406564:	b285      	uxth	r5, r0
  406566:	eba5 0509 	sub.w	r5, r5, r9
  40656a:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40656c:	f1c8 0400 	rsb	r4, r8, #0
  406570:	b224      	sxth	r4, r4
            break;
  406572:	e6dd      	b.n	406330 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406574:	4638      	mov	r0, r7
  406576:	4b18      	ldr	r3, [pc, #96]	; (4065d8 <obj_align_mid_core+0x34c>)
  406578:	4798      	blx	r3
  40657a:	b285      	uxth	r5, r0
  40657c:	eba5 0509 	sub.w	r5, r5, r9
  406580:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406582:	4638      	mov	r0, r7
  406584:	4b13      	ldr	r3, [pc, #76]	; (4065d4 <obj_align_mid_core+0x348>)
  406586:	4798      	blx	r3
  406588:	4604      	mov	r4, r0
  40658a:	2800      	cmp	r0, #0
  40658c:	db03      	blt.n	406596 <obj_align_mid_core+0x30a>
  40658e:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  406592:	b224      	sxth	r4, r4
            break;
  406594:	e6cc      	b.n	406330 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406596:	1c44      	adds	r4, r0, #1
  406598:	e7f9      	b.n	40658e <obj_align_mid_core+0x302>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40659a:	4638      	mov	r0, r7
  40659c:	4b0e      	ldr	r3, [pc, #56]	; (4065d8 <obj_align_mid_core+0x34c>)
  40659e:	4798      	blx	r3
  4065a0:	b285      	uxth	r5, r0
  4065a2:	eba5 0509 	sub.w	r5, r5, r9
  4065a6:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4065a8:	4638      	mov	r0, r7
  4065aa:	4b0a      	ldr	r3, [pc, #40]	; (4065d4 <obj_align_mid_core+0x348>)
  4065ac:	4798      	blx	r3
  4065ae:	b284      	uxth	r4, r0
  4065b0:	eba4 0408 	sub.w	r4, r4, r8
  4065b4:	b224      	sxth	r4, r4
            break;
  4065b6:	e6bb      	b.n	406330 <obj_align_mid_core+0xa4>
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  4065b8:	9801      	ldr	r0, [sp, #4]
  4065ba:	4b08      	ldr	r3, [pc, #32]	; (4065dc <obj_align_mid_core+0x350>)
  4065bc:	4798      	blx	r3
  4065be:	e6de      	b.n	40637e <obj_align_mid_core+0xf2>
    else if(x_set) lv_obj_set_x(obj, new_x);
  4065c0:	9801      	ldr	r0, [sp, #4]
  4065c2:	4b07      	ldr	r3, [pc, #28]	; (4065e0 <obj_align_mid_core+0x354>)
  4065c4:	4798      	blx	r3
  4065c6:	e6da      	b.n	40637e <obj_align_mid_core+0xf2>
    else if(y_set) lv_obj_set_y(obj, new_y);
  4065c8:	4611      	mov	r1, r2
  4065ca:	9801      	ldr	r0, [sp, #4]
  4065cc:	4b05      	ldr	r3, [pc, #20]	; (4065e4 <obj_align_mid_core+0x358>)
  4065ce:	4798      	blx	r3
}
  4065d0:	e6d5      	b.n	40637e <obj_align_mid_core+0xf2>
  4065d2:	bf00      	nop
  4065d4:	00405bb1 	.word	0x00405bb1
  4065d8:	00405b81 	.word	0x00405b81
  4065dc:	0040603d 	.word	0x0040603d
  4065e0:	004060f5 	.word	0x004060f5
  4065e4:	00406135 	.word	0x00406135

004065e8 <lv_obj_align_mid>:
{
  4065e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4065ec:	b085      	sub	sp, #20
  4065ee:	4604      	mov	r4, r0
  4065f0:	460d      	mov	r5, r1
  4065f2:	4690      	mov	r8, r2
  4065f4:	461f      	mov	r7, r3
  4065f6:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4065fa:	4b19      	ldr	r3, [pc, #100]	; (406660 <lv_obj_align_mid+0x78>)
  4065fc:	4798      	blx	r3
  4065fe:	b928      	cbnz	r0, 40660c <lv_obj_align_mid+0x24>
  406600:	4622      	mov	r2, r4
  406602:	2300      	movs	r3, #0
  406604:	4817      	ldr	r0, [pc, #92]	; (406664 <lv_obj_align_mid+0x7c>)
  406606:	4918      	ldr	r1, [pc, #96]	; (406668 <lv_obj_align_mid+0x80>)
  406608:	4788      	blx	r1
  40660a:	e7fe      	b.n	40660a <lv_obj_align_mid+0x22>
    if(base == NULL) {
  40660c:	b14d      	cbz	r5, 406622 <lv_obj_align_mid+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  40660e:	4628      	mov	r0, r5
  406610:	4b13      	ldr	r3, [pc, #76]	; (406660 <lv_obj_align_mid+0x78>)
  406612:	4798      	blx	r3
  406614:	b950      	cbnz	r0, 40662c <lv_obj_align_mid+0x44>
  406616:	462a      	mov	r2, r5
  406618:	2300      	movs	r3, #0
  40661a:	4812      	ldr	r0, [pc, #72]	; (406664 <lv_obj_align_mid+0x7c>)
  40661c:	4912      	ldr	r1, [pc, #72]	; (406668 <lv_obj_align_mid+0x80>)
  40661e:	4788      	blx	r1
  406620:	e7fe      	b.n	406620 <lv_obj_align_mid+0x38>
        base = lv_obj_get_parent(obj);
  406622:	4620      	mov	r0, r4
  406624:	4b11      	ldr	r3, [pc, #68]	; (40666c <lv_obj_align_mid+0x84>)
  406626:	4798      	blx	r3
  406628:	4605      	mov	r5, r0
  40662a:	e7f0      	b.n	40660e <lv_obj_align_mid+0x26>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
  40662c:	9602      	str	r6, [sp, #8]
  40662e:	9701      	str	r7, [sp, #4]
  406630:	2301      	movs	r3, #1
  406632:	9300      	str	r3, [sp, #0]
  406634:	4642      	mov	r2, r8
  406636:	4629      	mov	r1, r5
  406638:	4620      	mov	r0, r4
  40663a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 406670 <lv_obj_align_mid+0x88>
  40663e:	47c8      	blx	r9
    obj->realign.align       = align;
  406640:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  406644:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  406648:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  40664c:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
  40664e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406652:	f043 0302 	orr.w	r3, r3, #2
  406656:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  40665a:	b005      	add	sp, #20
  40665c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406660:	00415e79 	.word	0x00415e79
  406664:	0042c168 	.word	0x0042c168
  406668:	00415e85 	.word	0x00415e85
  40666c:	004059ad 	.word	0x004059ad
  406670:	0040628d 	.word	0x0040628d

00406674 <lv_obj_realign>:
{
  406674:	b510      	push	{r4, lr}
  406676:	b082      	sub	sp, #8
  406678:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40667a:	4b13      	ldr	r3, [pc, #76]	; (4066c8 <lv_obj_realign+0x54>)
  40667c:	4798      	blx	r3
  40667e:	b188      	cbz	r0, 4066a4 <lv_obj_realign+0x30>
    if(obj->realign.mid_align)
  406680:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406684:	f013 0f02 	tst.w	r3, #2
  406688:	d012      	beq.n	4066b0 <lv_obj_realign+0x3c>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  40668a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  40668e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  406692:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  406696:	9100      	str	r1, [sp, #0]
  406698:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40669a:	4620      	mov	r0, r4
  40669c:	4c0b      	ldr	r4, [pc, #44]	; (4066cc <lv_obj_realign+0x58>)
  40669e:	47a0      	blx	r4
}
  4066a0:	b002      	add	sp, #8
  4066a2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4066a4:	4622      	mov	r2, r4
  4066a6:	2300      	movs	r3, #0
  4066a8:	4809      	ldr	r0, [pc, #36]	; (4066d0 <lv_obj_realign+0x5c>)
  4066aa:	490a      	ldr	r1, [pc, #40]	; (4066d4 <lv_obj_realign+0x60>)
  4066ac:	4788      	blx	r1
  4066ae:	e7fe      	b.n	4066ae <lv_obj_realign+0x3a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  4066b0:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  4066b4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  4066b8:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  4066bc:	9100      	str	r1, [sp, #0]
  4066be:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4066c0:	4620      	mov	r0, r4
  4066c2:	4c05      	ldr	r4, [pc, #20]	; (4066d8 <lv_obj_realign+0x64>)
  4066c4:	47a0      	blx	r4
}
  4066c6:	e7eb      	b.n	4066a0 <lv_obj_realign+0x2c>
  4066c8:	00415e79 	.word	0x00415e79
  4066cc:	004065e9 	.word	0x004065e9
  4066d0:	0042c168 	.word	0x0042c168
  4066d4:	00415e85 	.word	0x00415e85
  4066d8:	00406201 	.word	0x00406201

004066dc <refresh_children_style>:
{
  4066dc:	b570      	push	{r4, r5, r6, lr}
  4066de:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4066e0:	2100      	movs	r1, #0
  4066e2:	4b0c      	ldr	r3, [pc, #48]	; (406714 <refresh_children_style+0x38>)
  4066e4:	4798      	blx	r3
  4066e6:	4604      	mov	r4, r0
    while(child != NULL) {
  4066e8:	e011      	b.n	40670e <refresh_children_style+0x32>
        lv_obj_invalidate(child);
  4066ea:	4620      	mov	r0, r4
  4066ec:	4d0a      	ldr	r5, [pc, #40]	; (406718 <refresh_children_style+0x3c>)
  4066ee:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
  4066f0:	69e3      	ldr	r3, [r4, #28]
  4066f2:	2200      	movs	r2, #0
  4066f4:	2104      	movs	r1, #4
  4066f6:	4620      	mov	r0, r4
  4066f8:	4798      	blx	r3
        lv_obj_invalidate(child);
  4066fa:	4620      	mov	r0, r4
  4066fc:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
  4066fe:	4620      	mov	r0, r4
  406700:	f7ff ffec 	bl	4066dc <refresh_children_style>
        child = lv_obj_get_child(obj, child);
  406704:	4621      	mov	r1, r4
  406706:	4630      	mov	r0, r6
  406708:	4b02      	ldr	r3, [pc, #8]	; (406714 <refresh_children_style+0x38>)
  40670a:	4798      	blx	r3
  40670c:	4604      	mov	r4, r0
    while(child != NULL) {
  40670e:	2c00      	cmp	r4, #0
  406710:	d1eb      	bne.n	4066ea <refresh_children_style+0xe>
}
  406712:	bd70      	pop	{r4, r5, r6, pc}
  406714:	00405a81 	.word	0x00405a81
  406718:	00405f59 	.word	0x00405f59

0040671c <lv_obj_get_click>:
{
  40671c:	b510      	push	{r4, lr}
  40671e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406720:	4b06      	ldr	r3, [pc, #24]	; (40673c <lv_obj_get_click+0x20>)
  406722:	4798      	blx	r3
  406724:	b120      	cbz	r0, 406730 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
  406726:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  40672a:	f000 0001 	and.w	r0, r0, #1
  40672e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406730:	4622      	mov	r2, r4
  406732:	2300      	movs	r3, #0
  406734:	4802      	ldr	r0, [pc, #8]	; (406740 <lv_obj_get_click+0x24>)
  406736:	4903      	ldr	r1, [pc, #12]	; (406744 <lv_obj_get_click+0x28>)
  406738:	4788      	blx	r1
  40673a:	e7fe      	b.n	40673a <lv_obj_get_click+0x1e>
  40673c:	00415e79 	.word	0x00415e79
  406740:	0042c168 	.word	0x0042c168
  406744:	00415e85 	.word	0x00415e85

00406748 <lv_obj_get_drag>:
{
  406748:	b510      	push	{r4, lr}
  40674a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40674c:	4b06      	ldr	r3, [pc, #24]	; (406768 <lv_obj_get_drag+0x20>)
  40674e:	4798      	blx	r3
  406750:	b120      	cbz	r0, 40675c <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
  406752:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  406756:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40675a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40675c:	4622      	mov	r2, r4
  40675e:	2300      	movs	r3, #0
  406760:	4802      	ldr	r0, [pc, #8]	; (40676c <lv_obj_get_drag+0x24>)
  406762:	4903      	ldr	r1, [pc, #12]	; (406770 <lv_obj_get_drag+0x28>)
  406764:	4788      	blx	r1
  406766:	e7fe      	b.n	406766 <lv_obj_get_drag+0x1e>
  406768:	00415e79 	.word	0x00415e79
  40676c:	0042c168 	.word	0x0042c168
  406770:	00415e85 	.word	0x00415e85

00406774 <lv_obj_get_drag_dir>:
{
  406774:	b510      	push	{r4, lr}
  406776:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406778:	4b06      	ldr	r3, [pc, #24]	; (406794 <lv_obj_get_drag_dir+0x20>)
  40677a:	4798      	blx	r3
  40677c:	b120      	cbz	r0, 406788 <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
  40677e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
  406782:	f3c0 0082 	ubfx	r0, r0, #2, #3
  406786:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406788:	4622      	mov	r2, r4
  40678a:	2300      	movs	r3, #0
  40678c:	4802      	ldr	r0, [pc, #8]	; (406798 <lv_obj_get_drag_dir+0x24>)
  40678e:	4903      	ldr	r1, [pc, #12]	; (40679c <lv_obj_get_drag_dir+0x28>)
  406790:	4788      	blx	r1
  406792:	e7fe      	b.n	406792 <lv_obj_get_drag_dir+0x1e>
  406794:	00415e79 	.word	0x00415e79
  406798:	0042c168 	.word	0x0042c168
  40679c:	00415e85 	.word	0x00415e85

004067a0 <lv_obj_get_drag_throw>:
{
  4067a0:	b510      	push	{r4, lr}
  4067a2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067a4:	4b06      	ldr	r3, [pc, #24]	; (4067c0 <lv_obj_get_drag_throw+0x20>)
  4067a6:	4798      	blx	r3
  4067a8:	b120      	cbz	r0, 4067b4 <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
  4067aa:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  4067ae:	f3c0 0080 	ubfx	r0, r0, #2, #1
  4067b2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067b4:	4622      	mov	r2, r4
  4067b6:	2300      	movs	r3, #0
  4067b8:	4802      	ldr	r0, [pc, #8]	; (4067c4 <lv_obj_get_drag_throw+0x24>)
  4067ba:	4903      	ldr	r1, [pc, #12]	; (4067c8 <lv_obj_get_drag_throw+0x28>)
  4067bc:	4788      	blx	r1
  4067be:	e7fe      	b.n	4067be <lv_obj_get_drag_throw+0x1e>
  4067c0:	00415e79 	.word	0x00415e79
  4067c4:	0042c168 	.word	0x0042c168
  4067c8:	00415e85 	.word	0x00415e85

004067cc <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
  4067cc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
  4067d0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  4067d4:	4770      	bx	lr

004067d6 <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
  4067d6:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  4067da:	f000 0001 	and.w	r0, r0, #1
  4067de:	4770      	bx	lr

004067e0 <lv_obj_get_focus_parent>:
    return obj->focus_parent == 0 ? false : true;
  4067e0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  4067e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4067e8:	4770      	bx	lr
	...

004067ec <lv_obj_get_base_dir>:
{
  4067ec:	b510      	push	{r4, lr}
  4067ee:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067f0:	4b05      	ldr	r3, [pc, #20]	; (406808 <lv_obj_get_base_dir+0x1c>)
  4067f2:	4798      	blx	r3
  4067f4:	b108      	cbz	r0, 4067fa <lv_obj_get_base_dir+0xe>
}
  4067f6:	2000      	movs	r0, #0
  4067f8:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067fa:	4622      	mov	r2, r4
  4067fc:	2300      	movs	r3, #0
  4067fe:	4803      	ldr	r0, [pc, #12]	; (40680c <lv_obj_get_base_dir+0x20>)
  406800:	4903      	ldr	r1, [pc, #12]	; (406810 <lv_obj_get_base_dir+0x24>)
  406802:	4788      	blx	r1
  406804:	e7fe      	b.n	406804 <lv_obj_get_base_dir+0x18>
  406806:	bf00      	nop
  406808:	00415e79 	.word	0x00415e79
  40680c:	0042c168 	.word	0x0042c168
  406810:	00415e85 	.word	0x00415e85

00406814 <lv_obj_create>:
{
  406814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406816:	460d      	mov	r5, r1
    if(parent == NULL) {
  406818:	4606      	mov	r6, r0
  40681a:	b150      	cbz	r0, 406832 <lv_obj_create+0x1e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
  40681c:	4b8e      	ldr	r3, [pc, #568]	; (406a58 <lv_obj_create+0x244>)
  40681e:	4798      	blx	r3
  406820:	2800      	cmp	r0, #0
  406822:	f040 8086 	bne.w	406932 <lv_obj_create+0x11e>
  406826:	4632      	mov	r2, r6
  406828:	2300      	movs	r3, #0
  40682a:	488c      	ldr	r0, [pc, #560]	; (406a5c <lv_obj_create+0x248>)
  40682c:	498c      	ldr	r1, [pc, #560]	; (406a60 <lv_obj_create+0x24c>)
  40682e:	4788      	blx	r1
  406830:	e7fe      	b.n	406830 <lv_obj_create+0x1c>
        lv_disp_t * disp = lv_disp_get_default();
  406832:	4b8c      	ldr	r3, [pc, #560]	; (406a64 <lv_obj_create+0x250>)
  406834:	4798      	blx	r3
        if(!disp) {
  406836:	2800      	cmp	r0, #0
  406838:	f000 81f0 	beq.w	406c1c <lv_obj_create+0x408>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
  40683c:	3038      	adds	r0, #56	; 0x38
  40683e:	4b8a      	ldr	r3, [pc, #552]	; (406a68 <lv_obj_create+0x254>)
  406840:	4798      	blx	r3
  406842:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  406844:	4b84      	ldr	r3, [pc, #528]	; (406a58 <lv_obj_create+0x244>)
  406846:	4798      	blx	r3
  406848:	b928      	cbnz	r0, 406856 <lv_obj_create+0x42>
  40684a:	4622      	mov	r2, r4
  40684c:	2300      	movs	r3, #0
  40684e:	4887      	ldr	r0, [pc, #540]	; (406a6c <lv_obj_create+0x258>)
  406850:	4983      	ldr	r1, [pc, #524]	; (406a60 <lv_obj_create+0x24c>)
  406852:	4788      	blx	r1
  406854:	e7fe      	b.n	406854 <lv_obj_create+0x40>
        if(new_obj == NULL) return NULL;
  406856:	2c00      	cmp	r4, #0
  406858:	f000 81de 	beq.w	406c18 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  40685c:	214c      	movs	r1, #76	; 0x4c
  40685e:	4620      	mov	r0, r4
  406860:	4b83      	ldr	r3, [pc, #524]	; (406a70 <lv_obj_create+0x25c>)
  406862:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  406864:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406868:	f36f 1346 	bfc	r3, #5, #2
  40686c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  406870:	4b80      	ldr	r3, [pc, #512]	; (406a74 <lv_obj_create+0x260>)
  406872:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  406874:	4b80      	ldr	r3, [pc, #512]	; (406a78 <lv_obj_create+0x264>)
  406876:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  406878:	2700      	movs	r7, #0
  40687a:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
  40687c:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
  40687e:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
  406880:	4638      	mov	r0, r7
  406882:	4b7e      	ldr	r3, [pc, #504]	; (406a7c <lv_obj_create+0x268>)
  406884:	4798      	blx	r3
  406886:	b283      	uxth	r3, r0
  406888:	3b01      	subs	r3, #1
  40688a:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
  40688c:	4638      	mov	r0, r7
  40688e:	4b7c      	ldr	r3, [pc, #496]	; (406a80 <lv_obj_create+0x26c>)
  406890:	4798      	blx	r3
  406892:	b283      	uxth	r3, r0
  406894:	3b01      	subs	r3, #1
  406896:	82e3      	strh	r3, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
  406898:	214c      	movs	r1, #76	; 0x4c
  40689a:	1d20      	adds	r0, r4, #4
  40689c:	4b79      	ldr	r3, [pc, #484]	; (406a84 <lv_obj_create+0x270>)
  40689e:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
  4068a0:	2300      	movs	r3, #0
  4068a2:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
  4068a4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
  4068a8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
  4068ac:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
  4068b0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
  4068b4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
  4068b8:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
  4068ba:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
  4068be:	f363 0200 	bfi	r2, r3, #0, #1
  4068c2:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
  4068c6:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
  4068c8:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    new_obj->click        = 1;
  4068cc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    new_obj->drag         = 0;
  4068d0:	f041 0101 	orr.w	r1, r1, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
  4068d4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  4068d8:	2003      	movs	r0, #3
  4068da:	f360 0284 	bfi	r2, r0, #2, #3
    new_obj->protect      = LV_PROTECT_NONE;
  4068de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
  4068e2:	f001 01c1 	and.w	r1, r1, #193	; 0xc1
  4068e6:	f363 1186 	bfi	r1, r3, #6, #1
  4068ea:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
  4068ee:	1af1      	subs	r1, r6, r3
  4068f0:	bf18      	it	ne
  4068f2:	2101      	movne	r1, #1
  4068f4:	f361 0200 	bfi	r2, r1, #0, #1
    new_obj->focus_parent  = 0;
  4068f8:	f363 0241 	bfi	r2, r3, #1, #1
  4068fc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
  406900:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
  406904:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
  406906:	f104 0728 	add.w	r7, r4, #40	; 0x28
  40690a:	4638      	mov	r0, r7
  40690c:	4b5e      	ldr	r3, [pc, #376]	; (406a88 <lv_obj_create+0x274>)
  40690e:	4798      	blx	r3
    if(copy == NULL) {
  406910:	2d00      	cmp	r5, #0
  406912:	f000 8096 	beq.w	406a42 <lv_obj_create+0x22e>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
  406916:	f105 0128 	add.w	r1, r5, #40	; 0x28
  40691a:	4638      	mov	r0, r7
  40691c:	4b5b      	ldr	r3, [pc, #364]	; (406a8c <lv_obj_create+0x278>)
  40691e:	4798      	blx	r3
    if(copy != NULL) {
  406920:	2d00      	cmp	r5, #0
  406922:	f000 8170 	beq.w	406c06 <lv_obj_create+0x3f2>
        lv_area_copy(&new_obj->coords, &copy->coords);
  406926:	f105 0110 	add.w	r1, r5, #16
    uint8_t * d8 = (uint8_t *)dst;
  40692a:	f104 0210 	add.w	r2, r4, #16
  40692e:	2308      	movs	r3, #8
  406930:	e0bb      	b.n	406aaa <lv_obj_create+0x296>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
  406932:	1d30      	adds	r0, r6, #4
  406934:	4b4c      	ldr	r3, [pc, #304]	; (406a68 <lv_obj_create+0x254>)
  406936:	4798      	blx	r3
  406938:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  40693a:	4b47      	ldr	r3, [pc, #284]	; (406a58 <lv_obj_create+0x244>)
  40693c:	4798      	blx	r3
  40693e:	2800      	cmp	r0, #0
  406940:	d047      	beq.n	4069d2 <lv_obj_create+0x1be>
        if(new_obj == NULL) return NULL;
  406942:	2c00      	cmp	r4, #0
  406944:	f000 8168 	beq.w	406c18 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  406948:	214c      	movs	r1, #76	; 0x4c
  40694a:	4620      	mov	r0, r4
  40694c:	4b48      	ldr	r3, [pc, #288]	; (406a70 <lv_obj_create+0x25c>)
  40694e:	4798      	blx	r3
        new_obj->parent = parent;
  406950:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  406952:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406956:	f36f 1346 	bfc	r3, #5, #2
  40695a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  40695e:	4b45      	ldr	r3, [pc, #276]	; (406a74 <lv_obj_create+0x260>)
  406960:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  406962:	4b45      	ldr	r3, [pc, #276]	; (406a78 <lv_obj_create+0x264>)
  406964:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  406966:	2000      	movs	r0, #0
  406968:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
  40696a:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  40696e:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  406970:	8a77      	ldrh	r7, [r6, #18]
  406972:	4b47      	ldr	r3, [pc, #284]	; (406a90 <lv_obj_create+0x27c>)
  406974:	4798      	blx	r3
  406976:	2332      	movs	r3, #50	; 0x32
  406978:	fb03 f300 	mul.w	r3, r3, r0
  40697c:	3350      	adds	r3, #80	; 0x50
  40697e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  406982:	da2c      	bge.n	4069de <lv_obj_create+0x1ca>
  406984:	2301      	movs	r3, #1
  406986:	443b      	add	r3, r7
  406988:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
  40698a:	4620      	mov	r0, r4
  40698c:	4b41      	ldr	r3, [pc, #260]	; (406a94 <lv_obj_create+0x280>)
  40698e:	4798      	blx	r3
  406990:	2801      	cmp	r0, #1
  406992:	d033      	beq.n	4069fc <lv_obj_create+0x1e8>
            new_obj->coords.x1    = parent->coords.x1;
  406994:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  406998:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  40699a:	8a37      	ldrh	r7, [r6, #16]
  40699c:	2000      	movs	r0, #0
  40699e:	4b3c      	ldr	r3, [pc, #240]	; (406a90 <lv_obj_create+0x27c>)
  4069a0:	4798      	blx	r3
  4069a2:	2364      	movs	r3, #100	; 0x64
  4069a4:	fb03 f300 	mul.w	r3, r3, r0
  4069a8:	3350      	adds	r3, #80	; 0x50
  4069aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4069ae:	db46      	blt.n	406a3e <lv_obj_create+0x22a>
  4069b0:	2000      	movs	r0, #0
  4069b2:	4b37      	ldr	r3, [pc, #220]	; (406a90 <lv_obj_create+0x27c>)
  4069b4:	4798      	blx	r3
  4069b6:	2364      	movs	r3, #100	; 0x64
  4069b8:	fb03 f300 	mul.w	r3, r3, r0
  4069bc:	3350      	adds	r3, #80	; 0x50
  4069be:	4a36      	ldr	r2, [pc, #216]	; (406a98 <lv_obj_create+0x284>)
  4069c0:	fb82 1203 	smull	r1, r2, r2, r3
  4069c4:	17db      	asrs	r3, r3, #31
  4069c6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  4069ca:	b29b      	uxth	r3, r3
  4069cc:	443b      	add	r3, r7
  4069ce:	82a3      	strh	r3, [r4, #20]
  4069d0:	e762      	b.n	406898 <lv_obj_create+0x84>
        LV_ASSERT_MEM(new_obj);
  4069d2:	4622      	mov	r2, r4
  4069d4:	2300      	movs	r3, #0
  4069d6:	4825      	ldr	r0, [pc, #148]	; (406a6c <lv_obj_create+0x258>)
  4069d8:	4921      	ldr	r1, [pc, #132]	; (406a60 <lv_obj_create+0x24c>)
  4069da:	4788      	blx	r1
  4069dc:	e7fe      	b.n	4069dc <lv_obj_create+0x1c8>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  4069de:	2000      	movs	r0, #0
  4069e0:	4b2b      	ldr	r3, [pc, #172]	; (406a90 <lv_obj_create+0x27c>)
  4069e2:	4798      	blx	r3
  4069e4:	2332      	movs	r3, #50	; 0x32
  4069e6:	fb03 f300 	mul.w	r3, r3, r0
  4069ea:	3350      	adds	r3, #80	; 0x50
  4069ec:	4a2a      	ldr	r2, [pc, #168]	; (406a98 <lv_obj_create+0x284>)
  4069ee:	fb82 1203 	smull	r1, r2, r2, r3
  4069f2:	17db      	asrs	r3, r3, #31
  4069f4:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  4069f8:	b29b      	uxth	r3, r3
  4069fa:	e7c4      	b.n	406986 <lv_obj_create+0x172>
            new_obj->coords.x2    = parent->coords.x2;
  4069fc:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  406a00:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
  406a02:	8ab7      	ldrh	r7, [r6, #20]
  406a04:	2000      	movs	r0, #0
  406a06:	4b22      	ldr	r3, [pc, #136]	; (406a90 <lv_obj_create+0x27c>)
  406a08:	4798      	blx	r3
  406a0a:	2364      	movs	r3, #100	; 0x64
  406a0c:	fb03 f300 	mul.w	r3, r3, r0
  406a10:	3350      	adds	r3, #80	; 0x50
  406a12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  406a16:	db10      	blt.n	406a3a <lv_obj_create+0x226>
  406a18:	2000      	movs	r0, #0
  406a1a:	4b1d      	ldr	r3, [pc, #116]	; (406a90 <lv_obj_create+0x27c>)
  406a1c:	4798      	blx	r3
  406a1e:	2364      	movs	r3, #100	; 0x64
  406a20:	fb03 f300 	mul.w	r3, r3, r0
  406a24:	3350      	adds	r3, #80	; 0x50
  406a26:	4a1c      	ldr	r2, [pc, #112]	; (406a98 <lv_obj_create+0x284>)
  406a28:	fb82 1203 	smull	r1, r2, r2, r3
  406a2c:	17db      	asrs	r3, r3, #31
  406a2e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406a32:	b29b      	uxth	r3, r3
  406a34:	1afb      	subs	r3, r7, r3
  406a36:	8223      	strh	r3, [r4, #16]
  406a38:	e72e      	b.n	406898 <lv_obj_create+0x84>
  406a3a:	2301      	movs	r3, #1
  406a3c:	e7fa      	b.n	406a34 <lv_obj_create+0x220>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  406a3e:	2301      	movs	r3, #1
  406a40:	e7c4      	b.n	4069cc <lv_obj_create+0x1b8>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
  406a42:	b126      	cbz	r6, 406a4e <lv_obj_create+0x23a>
  406a44:	2102      	movs	r1, #2
  406a46:	4620      	mov	r0, r4
  406a48:	4b14      	ldr	r3, [pc, #80]	; (406a9c <lv_obj_create+0x288>)
  406a4a:	4798      	blx	r3
  406a4c:	e768      	b.n	406920 <lv_obj_create+0x10c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
  406a4e:	2101      	movs	r1, #1
  406a50:	4620      	mov	r0, r4
  406a52:	4b12      	ldr	r3, [pc, #72]	; (406a9c <lv_obj_create+0x288>)
  406a54:	4798      	blx	r3
  406a56:	e763      	b.n	406920 <lv_obj_create+0x10c>
  406a58:	00415e79 	.word	0x00415e79
  406a5c:	0042c168 	.word	0x0042c168
  406a60:	00415e85 	.word	0x00415e85
  406a64:	00414ce5 	.word	0x00414ce5
  406a68:	004160f1 	.word	0x004160f1
  406a6c:	0042c154 	.word	0x0042c154
  406a70:	00416af1 	.word	0x00416af1
  406a74:	00409261 	.word	0x00409261
  406a78:	00408691 	.word	0x00408691
  406a7c:	00414cf1 	.word	0x00414cf1
  406a80:	00414d21 	.word	0x00414d21
  406a84:	004160df 	.word	0x004160df
  406a88:	00409de1 	.word	0x00409de1
  406a8c:	0040acbd 	.word	0x0040acbd
  406a90:	00414d4d 	.word	0x00414d4d
  406a94:	004067ed 	.word	0x004067ed
  406a98:	66666667 	.word	0x66666667
  406a9c:	004182f9 	.word	0x004182f9
        *d8 = *s8;
  406aa0:	f811 0b01 	ldrb.w	r0, [r1], #1
  406aa4:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  406aa8:	3b01      	subs	r3, #1
    while(len) {
  406aaa:	2b00      	cmp	r3, #0
  406aac:	d1f8      	bne.n	406aa0 <lv_obj_create+0x28c>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
  406aae:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  406ab2:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
  406ab4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  406ab8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
  406abc:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
  406ac0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
  406ac4:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406ac8:	f3c3 1341 	ubfx	r3, r3, #5, #2
  406acc:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406ad0:	f363 1246 	bfi	r2, r3, #5, #2
  406ad4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
  406ad8:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  406adc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
  406ae0:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
  406ae4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
  406ae8:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
  406aec:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
  406af0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  406af2:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
  406af4:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
  406af8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406afc:	f362 0300 	bfi	r3, r2, #0, #1
  406b00:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
  406b04:	69ab      	ldr	r3, [r5, #24]
  406b06:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
  406b08:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b0c:	09db      	lsrs	r3, r3, #7
  406b0e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406b12:	f363 12c7 	bfi	r2, r3, #7, #1
  406b16:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
  406b1a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  406b1e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  406b22:	f362 0300 	bfi	r3, r2, #0, #1
  406b26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
  406b2a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406b32:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406b36:	f363 0241 	bfi	r2, r3, #1, #1
  406b3a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
  406b3e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406b42:	f3c3 0382 	ubfx	r3, r3, #2, #3
  406b46:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406b4a:	f363 0284 	bfi	r2, r3, #2, #3
  406b4e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
  406b52:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b56:	f3c3 0380 	ubfx	r3, r3, #2, #1
  406b5a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406b5e:	f363 0282 	bfi	r2, r3, #2, #1
  406b62:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
  406b66:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  406b6e:	b2d2      	uxtb	r2, r2
  406b70:	f363 02c3 	bfi	r2, r3, #3, #1
  406b74:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
  406b78:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
  406b80:	b2d2      	uxtb	r2, r2
  406b82:	f363 1204 	bfi	r2, r3, #4, #1
  406b86:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
  406b8a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
  406b92:	b2d2      	uxtb	r2, r2
  406b94:	f363 1245 	bfi	r2, r3, #5, #1
  406b98:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
  406b9c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406ba0:	f3c3 1380 	ubfx	r3, r3, #6, #1
  406ba4:	b2d2      	uxtb	r2, r2
  406ba6:	f363 1286 	bfi	r2, r3, #6, #1
  406baa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
  406bae:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  406bb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
  406bb6:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  406bba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406bbe:	f362 0300 	bfi	r3, r2, #0, #1
  406bc2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
  406bc6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406bca:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406bce:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406bd2:	f363 0241 	bfi	r2, r3, #1, #1
  406bd6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
  406bda:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  406bdc:	b110      	cbz	r0, 406be4 <lv_obj_create+0x3d0>
            lv_group_add_obj(copy->group_p, new_obj);
  406bde:	4621      	mov	r1, r4
  406be0:	4b0f      	ldr	r3, [pc, #60]	; (406c20 <lv_obj_create+0x40c>)
  406be2:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
  406be4:	4628      	mov	r0, r5
  406be6:	4b0f      	ldr	r3, [pc, #60]	; (406c24 <lv_obj_create+0x410>)
  406be8:	4798      	blx	r3
  406bea:	b160      	cbz	r0, 406c06 <lv_obj_create+0x3f2>
  406bec:	b15e      	cbz	r6, 406c06 <lv_obj_create+0x3f2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
  406bee:	4628      	mov	r0, r5
  406bf0:	4b0d      	ldr	r3, [pc, #52]	; (406c28 <lv_obj_create+0x414>)
  406bf2:	4798      	blx	r3
  406bf4:	4607      	mov	r7, r0
  406bf6:	4628      	mov	r0, r5
  406bf8:	4b0c      	ldr	r3, [pc, #48]	; (406c2c <lv_obj_create+0x418>)
  406bfa:	4798      	blx	r3
  406bfc:	4602      	mov	r2, r0
  406bfe:	4639      	mov	r1, r7
  406c00:	4620      	mov	r0, r4
  406c02:	4b0b      	ldr	r3, [pc, #44]	; (406c30 <lv_obj_create+0x41c>)
  406c04:	4798      	blx	r3
    if(parent != NULL) {
  406c06:	b13e      	cbz	r6, 406c18 <lv_obj_create+0x404>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
  406c08:	69f3      	ldr	r3, [r6, #28]
  406c0a:	4622      	mov	r2, r4
  406c0c:	2101      	movs	r1, #1
  406c0e:	4630      	mov	r0, r6
  406c10:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
  406c12:	4620      	mov	r0, r4
  406c14:	4b07      	ldr	r3, [pc, #28]	; (406c34 <lv_obj_create+0x420>)
  406c16:	4798      	blx	r3
}
  406c18:	4620      	mov	r0, r4
  406c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
  406c1c:	4634      	mov	r4, r6
  406c1e:	e7fb      	b.n	406c18 <lv_obj_create+0x404>
  406c20:	00403851 	.word	0x00403851
  406c24:	004059ad 	.word	0x004059ad
  406c28:	00405b01 	.word	0x00405b01
  406c2c:	00405b41 	.word	0x00405b41
  406c30:	0040603d 	.word	0x0040603d
  406c34:	00405f59 	.word	0x00405f59

00406c38 <lv_obj_set_size>:
{
  406c38:	b570      	push	{r4, r5, r6, lr}
  406c3a:	b082      	sub	sp, #8
  406c3c:	4604      	mov	r4, r0
  406c3e:	460d      	mov	r5, r1
  406c40:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406c42:	4b2e      	ldr	r3, [pc, #184]	; (406cfc <lv_obj_set_size+0xc4>)
  406c44:	4798      	blx	r3
  406c46:	b928      	cbnz	r0, 406c54 <lv_obj_set_size+0x1c>
  406c48:	4622      	mov	r2, r4
  406c4a:	2300      	movs	r3, #0
  406c4c:	482c      	ldr	r0, [pc, #176]	; (406d00 <lv_obj_set_size+0xc8>)
  406c4e:	492d      	ldr	r1, [pc, #180]	; (406d04 <lv_obj_set_size+0xcc>)
  406c50:	4788      	blx	r1
  406c52:	e7fe      	b.n	406c52 <lv_obj_set_size+0x1a>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406c54:	4620      	mov	r0, r4
  406c56:	4b2c      	ldr	r3, [pc, #176]	; (406d08 <lv_obj_set_size+0xd0>)
  406c58:	4798      	blx	r3
  406c5a:	42a8      	cmp	r0, r5
  406c5c:	d028      	beq.n	406cb0 <lv_obj_set_size+0x78>
    lv_obj_invalidate(obj);
  406c5e:	4620      	mov	r0, r4
  406c60:	4b2a      	ldr	r3, [pc, #168]	; (406d0c <lv_obj_set_size+0xd4>)
  406c62:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  406c64:	4669      	mov	r1, sp
  406c66:	4620      	mov	r0, r4
  406c68:	4b29      	ldr	r3, [pc, #164]	; (406d10 <lv_obj_set_size+0xd8>)
  406c6a:	4798      	blx	r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
  406c6c:	8a63      	ldrh	r3, [r4, #18]
  406c6e:	4433      	add	r3, r6
  406c70:	b29b      	uxth	r3, r3
  406c72:	3b01      	subs	r3, #1
  406c74:	82e3      	strh	r3, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
  406c76:	4620      	mov	r0, r4
  406c78:	4b26      	ldr	r3, [pc, #152]	; (406d14 <lv_obj_set_size+0xdc>)
  406c7a:	4798      	blx	r3
  406c7c:	2801      	cmp	r0, #1
  406c7e:	d01d      	beq.n	406cbc <lv_obj_set_size+0x84>
        obj->coords.x2 = obj->coords.x1 + w - 1;
  406c80:	8a23      	ldrh	r3, [r4, #16]
  406c82:	442b      	add	r3, r5
  406c84:	b29b      	uxth	r3, r3
  406c86:	3b01      	subs	r3, #1
  406c88:	82a3      	strh	r3, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  406c8a:	69e3      	ldr	r3, [r4, #28]
  406c8c:	466a      	mov	r2, sp
  406c8e:	2102      	movs	r1, #2
  406c90:	4620      	mov	r0, r4
  406c92:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  406c94:	4620      	mov	r0, r4
  406c96:	4b20      	ldr	r3, [pc, #128]	; (406d18 <lv_obj_set_size+0xe0>)
  406c98:	4798      	blx	r3
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  406c9a:	b118      	cbz	r0, 406ca4 <lv_obj_set_size+0x6c>
  406c9c:	69c5      	ldr	r5, [r0, #28]
  406c9e:	4622      	mov	r2, r4
  406ca0:	2101      	movs	r1, #1
  406ca2:	47a8      	blx	r5
    _LV_LL_READ(obj->child_ll, i) {
  406ca4:	1d26      	adds	r6, r4, #4
  406ca6:	4630      	mov	r0, r6
  406ca8:	4b1c      	ldr	r3, [pc, #112]	; (406d1c <lv_obj_set_size+0xe4>)
  406caa:	4798      	blx	r3
  406cac:	4605      	mov	r5, r0
  406cae:	e015      	b.n	406cdc <lv_obj_set_size+0xa4>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406cb0:	4620      	mov	r0, r4
  406cb2:	4b1b      	ldr	r3, [pc, #108]	; (406d20 <lv_obj_set_size+0xe8>)
  406cb4:	4798      	blx	r3
  406cb6:	42b0      	cmp	r0, r6
  406cb8:	d1d1      	bne.n	406c5e <lv_obj_set_size+0x26>
  406cba:	e019      	b.n	406cf0 <lv_obj_set_size+0xb8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
  406cbc:	8aa3      	ldrh	r3, [r4, #20]
  406cbe:	1b5b      	subs	r3, r3, r5
  406cc0:	b29b      	uxth	r3, r3
  406cc2:	3301      	adds	r3, #1
  406cc4:	8223      	strh	r3, [r4, #16]
  406cc6:	e7e0      	b.n	406c8a <lv_obj_set_size+0x52>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
  406cc8:	69eb      	ldr	r3, [r5, #28]
  406cca:	466a      	mov	r2, sp
  406ccc:	2103      	movs	r1, #3
  406cce:	4628      	mov	r0, r5
  406cd0:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
  406cd2:	4629      	mov	r1, r5
  406cd4:	4630      	mov	r0, r6
  406cd6:	4b13      	ldr	r3, [pc, #76]	; (406d24 <lv_obj_set_size+0xec>)
  406cd8:	4798      	blx	r3
  406cda:	4605      	mov	r5, r0
  406cdc:	2d00      	cmp	r5, #0
  406cde:	d1f3      	bne.n	406cc8 <lv_obj_set_size+0x90>
    lv_obj_invalidate(obj);
  406ce0:	4620      	mov	r0, r4
  406ce2:	4b0a      	ldr	r3, [pc, #40]	; (406d0c <lv_obj_set_size+0xd4>)
  406ce4:	4798      	blx	r3
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406ce6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406cea:	f013 0f01 	tst.w	r3, #1
  406cee:	d101      	bne.n	406cf4 <lv_obj_set_size+0xbc>
}
  406cf0:	b002      	add	sp, #8
  406cf2:	bd70      	pop	{r4, r5, r6, pc}
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406cf4:	4620      	mov	r0, r4
  406cf6:	4b0c      	ldr	r3, [pc, #48]	; (406d28 <lv_obj_set_size+0xf0>)
  406cf8:	4798      	blx	r3
  406cfa:	e7f9      	b.n	406cf0 <lv_obj_set_size+0xb8>
  406cfc:	00415e79 	.word	0x00415e79
  406d00:	0042c168 	.word	0x0042c168
  406d04:	00415e85 	.word	0x00415e85
  406d08:	00405b81 	.word	0x00405b81
  406d0c:	00405f59 	.word	0x00405f59
  406d10:	00405ac1 	.word	0x00405ac1
  406d14:	004067ed 	.word	0x004067ed
  406d18:	004059ad 	.word	0x004059ad
  406d1c:	00416189 	.word	0x00416189
  406d20:	00405bb1 	.word	0x00405bb1
  406d24:	0041619d 	.word	0x0041619d
  406d28:	00406675 	.word	0x00406675

00406d2c <lv_obj_set_width>:
{
  406d2c:	b538      	push	{r3, r4, r5, lr}
  406d2e:	4604      	mov	r4, r0
  406d30:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406d32:	4b09      	ldr	r3, [pc, #36]	; (406d58 <lv_obj_set_width+0x2c>)
  406d34:	4798      	blx	r3
  406d36:	b928      	cbnz	r0, 406d44 <lv_obj_set_width+0x18>
  406d38:	4622      	mov	r2, r4
  406d3a:	2300      	movs	r3, #0
  406d3c:	4807      	ldr	r0, [pc, #28]	; (406d5c <lv_obj_set_width+0x30>)
  406d3e:	4908      	ldr	r1, [pc, #32]	; (406d60 <lv_obj_set_width+0x34>)
  406d40:	4788      	blx	r1
  406d42:	e7fe      	b.n	406d42 <lv_obj_set_width+0x16>
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
  406d44:	4620      	mov	r0, r4
  406d46:	4b07      	ldr	r3, [pc, #28]	; (406d64 <lv_obj_set_width+0x38>)
  406d48:	4798      	blx	r3
  406d4a:	4602      	mov	r2, r0
  406d4c:	4629      	mov	r1, r5
  406d4e:	4620      	mov	r0, r4
  406d50:	4b05      	ldr	r3, [pc, #20]	; (406d68 <lv_obj_set_width+0x3c>)
  406d52:	4798      	blx	r3
  406d54:	bd38      	pop	{r3, r4, r5, pc}
  406d56:	bf00      	nop
  406d58:	00415e79 	.word	0x00415e79
  406d5c:	0042c168 	.word	0x0042c168
  406d60:	00415e85 	.word	0x00415e85
  406d64:	00405bb1 	.word	0x00405bb1
  406d68:	00406c39 	.word	0x00406c39

00406d6c <lv_obj_set_height>:
{
  406d6c:	b538      	push	{r3, r4, r5, lr}
  406d6e:	4604      	mov	r4, r0
  406d70:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406d72:	4b09      	ldr	r3, [pc, #36]	; (406d98 <lv_obj_set_height+0x2c>)
  406d74:	4798      	blx	r3
  406d76:	b928      	cbnz	r0, 406d84 <lv_obj_set_height+0x18>
  406d78:	4622      	mov	r2, r4
  406d7a:	2300      	movs	r3, #0
  406d7c:	4807      	ldr	r0, [pc, #28]	; (406d9c <lv_obj_set_height+0x30>)
  406d7e:	4908      	ldr	r1, [pc, #32]	; (406da0 <lv_obj_set_height+0x34>)
  406d80:	4788      	blx	r1
  406d82:	e7fe      	b.n	406d82 <lv_obj_set_height+0x16>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
  406d84:	4620      	mov	r0, r4
  406d86:	4b07      	ldr	r3, [pc, #28]	; (406da4 <lv_obj_set_height+0x38>)
  406d88:	4798      	blx	r3
  406d8a:	462a      	mov	r2, r5
  406d8c:	4601      	mov	r1, r0
  406d8e:	4620      	mov	r0, r4
  406d90:	4b05      	ldr	r3, [pc, #20]	; (406da8 <lv_obj_set_height+0x3c>)
  406d92:	4798      	blx	r3
  406d94:	bd38      	pop	{r3, r4, r5, pc}
  406d96:	bf00      	nop
  406d98:	00415e79 	.word	0x00415e79
  406d9c:	0042c168 	.word	0x0042c168
  406da0:	00415e85 	.word	0x00415e85
  406da4:	00405b81 	.word	0x00405b81
  406da8:	00406c39 	.word	0x00406c39

00406dac <lv_obj_is_protected>:
{
  406dac:	b538      	push	{r3, r4, r5, lr}
  406dae:	4604      	mov	r4, r0
  406db0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406db2:	4b08      	ldr	r3, [pc, #32]	; (406dd4 <lv_obj_is_protected+0x28>)
  406db4:	4798      	blx	r3
  406db6:	b130      	cbz	r0, 406dc6 <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
  406db8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  406dbc:	422b      	tst	r3, r5
}
  406dbe:	bf14      	ite	ne
  406dc0:	2001      	movne	r0, #1
  406dc2:	2000      	moveq	r0, #0
  406dc4:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406dc6:	4622      	mov	r2, r4
  406dc8:	2300      	movs	r3, #0
  406dca:	4803      	ldr	r0, [pc, #12]	; (406dd8 <lv_obj_is_protected+0x2c>)
  406dcc:	4903      	ldr	r1, [pc, #12]	; (406ddc <lv_obj_is_protected+0x30>)
  406dce:	4788      	blx	r1
  406dd0:	e7fe      	b.n	406dd0 <lv_obj_is_protected+0x24>
  406dd2:	bf00      	nop
  406dd4:	00415e79 	.word	0x00415e79
  406dd8:	0042c168 	.word	0x0042c168
  406ddc:	00415e85 	.word	0x00415e85

00406de0 <lv_obj_get_state>:
{
  406de0:	b530      	push	{r4, r5, lr}
  406de2:	b083      	sub	sp, #12
  406de4:	4604      	mov	r4, r0
  406de6:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406de8:	4b0d      	ldr	r3, [pc, #52]	; (406e20 <lv_obj_get_state+0x40>)
  406dea:	4798      	blx	r3
  406dec:	b128      	cbz	r0, 406dfa <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
  406dee:	2d3f      	cmp	r5, #63	; 0x3f
  406df0:	d809      	bhi.n	406e06 <lv_obj_get_state+0x26>
  406df2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
  406df6:	b003      	add	sp, #12
  406df8:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406dfa:	4622      	mov	r2, r4
  406dfc:	2300      	movs	r3, #0
  406dfe:	4809      	ldr	r0, [pc, #36]	; (406e24 <lv_obj_get_state+0x44>)
  406e00:	4909      	ldr	r1, [pc, #36]	; (406e28 <lv_obj_get_state+0x48>)
  406e02:	4788      	blx	r1
  406e04:	e7fe      	b.n	406e04 <lv_obj_get_state+0x24>
    info.part = part;
  406e06:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
  406e0a:	2300      	movs	r3, #0
  406e0c:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
  406e10:	aa01      	add	r2, sp, #4
  406e12:	2109      	movs	r1, #9
  406e14:	4620      	mov	r0, r4
  406e16:	4b05      	ldr	r3, [pc, #20]	; (406e2c <lv_obj_get_state+0x4c>)
  406e18:	4798      	blx	r3
    return info.result;
  406e1a:	f89d 0005 	ldrb.w	r0, [sp, #5]
  406e1e:	e7ea      	b.n	406df6 <lv_obj_get_state+0x16>
  406e20:	00415e79 	.word	0x00415e79
  406e24:	0042c168 	.word	0x0042c168
  406e28:	00415e85 	.word	0x00415e85
  406e2c:	00405905 	.word	0x00405905

00406e30 <_lv_obj_get_style_color>:
{
  406e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406e34:	b083      	sub	sp, #12
  406e36:	4606      	mov	r6, r0
  406e38:	460d      	mov	r5, r1
  406e3a:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406e3c:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406e40:	4614      	mov	r4, r2
  406e42:	e006      	b.n	406e52 <_lv_obj_get_style_color+0x22>
        if(res == LV_RES_OK) return value_act;
  406e44:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  406e48:	e026      	b.n	406e98 <_lv_obj_get_style_color+0x68>
        parent = lv_obj_get_parent(parent);
  406e4a:	4630      	mov	r0, r6
  406e4c:	4b15      	ldr	r3, [pc, #84]	; (406ea4 <_lv_obj_get_style_color+0x74>)
  406e4e:	4798      	blx	r3
  406e50:	4606      	mov	r6, r0
    while(parent) {
  406e52:	b1d6      	cbz	r6, 406e8a <_lv_obj_get_style_color+0x5a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406e54:	4629      	mov	r1, r5
  406e56:	4630      	mov	r0, r6
  406e58:	4b13      	ldr	r3, [pc, #76]	; (406ea8 <_lv_obj_get_style_color+0x78>)
  406e5a:	4798      	blx	r3
  406e5c:	4607      	mov	r7, r0
        lv_state_t state = lv_obj_get_state(parent, part);
  406e5e:	4629      	mov	r1, r5
  406e60:	4630      	mov	r0, r6
  406e62:	4b12      	ldr	r3, [pc, #72]	; (406eac <_lv_obj_get_style_color+0x7c>)
  406e64:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406e66:	0204      	lsls	r4, r0, #8
  406e68:	b2a4      	uxth	r4, r4
  406e6a:	4444      	add	r4, r8
  406e6c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
  406e6e:	aa01      	add	r2, sp, #4
  406e70:	4621      	mov	r1, r4
  406e72:	4638      	mov	r0, r7
  406e74:	4b0e      	ldr	r3, [pc, #56]	; (406eb0 <_lv_obj_get_style_color+0x80>)
  406e76:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406e78:	2801      	cmp	r0, #1
  406e7a:	d0e3      	beq.n	406e44 <_lv_obj_get_style_color+0x14>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406e7c:	f019 0f80 	tst.w	r9, #128	; 0x80
  406e80:	d003      	beq.n	406e8a <_lv_obj_get_style_color+0x5a>
        if(part != LV_OBJ_PART_MAIN) {
  406e82:	2d00      	cmp	r5, #0
  406e84:	d0e1      	beq.n	406e4a <_lv_obj_get_style_color+0x1a>
            part = LV_OBJ_PART_MAIN;
  406e86:	2500      	movs	r5, #0
  406e88:	e7e3      	b.n	406e52 <_lv_obj_get_style_color+0x22>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406e8a:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  406e8e:	3c29      	subs	r4, #41	; 0x29
  406e90:	2c01      	cmp	r4, #1
  406e92:	d904      	bls.n	406e9e <_lv_obj_get_style_color+0x6e>
    return LV_COLOR_BLACK;
  406e94:	f04f 0000 	mov.w	r0, #0
}
  406e98:	b003      	add	sp, #12
  406e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return LV_COLOR_WHITE;
  406e9e:	4b05      	ldr	r3, [pc, #20]	; (406eb4 <_lv_obj_get_style_color+0x84>)
  406ea0:	8818      	ldrh	r0, [r3, #0]
  406ea2:	e7f9      	b.n	406e98 <_lv_obj_get_style_color+0x68>
  406ea4:	004059ad 	.word	0x004059ad
  406ea8:	00405c0d 	.word	0x00405c0d
  406eac:	00406de1 	.word	0x00406de1
  406eb0:	0040af89 	.word	0x0040af89
  406eb4:	0042c164 	.word	0x0042c164

00406eb8 <_lv_obj_get_style_opa>:
{
  406eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406ebc:	b083      	sub	sp, #12
  406ebe:	4607      	mov	r7, r0
  406ec0:	460e      	mov	r6, r1
  406ec2:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406ec4:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406ec8:	4614      	mov	r4, r2
  406eca:	e023      	b.n	406f14 <_lv_obj_get_style_opa+0x5c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406ecc:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406ed0:	4631      	mov	r1, r6
  406ed2:	4638      	mov	r0, r7
  406ed4:	4b37      	ldr	r3, [pc, #220]	; (406fb4 <_lv_obj_get_style_opa+0xfc>)
  406ed6:	4798      	blx	r3
  406ed8:	e02e      	b.n	406f38 <_lv_obj_get_style_opa+0x80>
                    if(list->opa_scale_cover) def = true;
  406eda:	796b      	ldrb	r3, [r5, #5]
  406edc:	f013 0f20 	tst.w	r3, #32
  406ee0:	d147      	bne.n	406f72 <_lv_obj_get_style_opa+0xba>
            bool def = false;
  406ee2:	2300      	movs	r3, #0
            if(def) {
  406ee4:	2b00      	cmp	r3, #0
  406ee6:	d152      	bne.n	406f8e <_lv_obj_get_style_opa+0xd6>
        lv_state_t state = lv_obj_get_state(parent, part);
  406ee8:	4631      	mov	r1, r6
  406eea:	4638      	mov	r0, r7
  406eec:	4b32      	ldr	r3, [pc, #200]	; (406fb8 <_lv_obj_get_style_opa+0x100>)
  406eee:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406ef0:	0204      	lsls	r4, r0, #8
  406ef2:	b2a4      	uxth	r4, r4
  406ef4:	4444      	add	r4, r8
  406ef6:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
  406ef8:	f10d 0207 	add.w	r2, sp, #7
  406efc:	4621      	mov	r1, r4
  406efe:	4628      	mov	r0, r5
  406f00:	4b2e      	ldr	r3, [pc, #184]	; (406fbc <_lv_obj_get_style_opa+0x104>)
  406f02:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406f04:	2801      	cmp	r0, #1
  406f06:	d03a      	beq.n	406f7e <_lv_obj_get_style_opa+0xc6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406f08:	f019 0f80 	tst.w	r9, #128	; 0x80
  406f0c:	d03f      	beq.n	406f8e <_lv_obj_get_style_opa+0xd6>
        if(part != LV_OBJ_PART_MAIN) {
  406f0e:	2e00      	cmp	r6, #0
  406f10:	d038      	beq.n	406f84 <_lv_obj_get_style_opa+0xcc>
            part = LV_OBJ_PART_MAIN;
  406f12:	2600      	movs	r6, #0
    while(parent) {
  406f14:	2f00      	cmp	r7, #0
  406f16:	d03a      	beq.n	406f8e <_lv_obj_get_style_opa+0xd6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406f18:	4631      	mov	r1, r6
  406f1a:	4638      	mov	r0, r7
  406f1c:	4b28      	ldr	r3, [pc, #160]	; (406fc0 <_lv_obj_get_style_opa+0x108>)
  406f1e:	4798      	blx	r3
  406f20:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406f22:	7943      	ldrb	r3, [r0, #5]
  406f24:	f013 0f08 	tst.w	r3, #8
  406f28:	d1de      	bne.n	406ee8 <_lv_obj_get_style_opa+0x30>
  406f2a:	7902      	ldrb	r2, [r0, #4]
  406f2c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406f30:	d0da      	beq.n	406ee8 <_lv_obj_get_style_opa+0x30>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406f32:	f013 0f04 	tst.w	r3, #4
  406f36:	d0c9      	beq.n	406ecc <_lv_obj_get_style_opa+0x14>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
  406f38:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406f3c:	f248 020c 	movw	r2, #32780	; 0x800c
  406f40:	4293      	cmp	r3, r2
  406f42:	d0ca      	beq.n	406eda <_lv_obj_get_style_opa+0x22>
  406f44:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406f48:	4293      	cmp	r3, r2
  406f4a:	d00c      	beq.n	406f66 <_lv_obj_get_style_opa+0xae>
  406f4c:	2b2c      	cmp	r3, #44	; 0x2c
  406f4e:	d001      	beq.n	406f54 <_lv_obj_get_style_opa+0x9c>
            bool def = false;
  406f50:	2300      	movs	r3, #0
  406f52:	e7c7      	b.n	406ee4 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406f54:	79ab      	ldrb	r3, [r5, #6]
  406f56:	f013 0f10 	tst.w	r3, #16
  406f5a:	d127      	bne.n	406fac <_lv_obj_get_style_opa+0xf4>
                    if(list->bg_opa_transp) def = true;
  406f5c:	f013 0f08 	tst.w	r3, #8
  406f60:	d109      	bne.n	406f76 <_lv_obj_get_style_opa+0xbe>
            bool def = false;
  406f62:	2300      	movs	r3, #0
  406f64:	e7be      	b.n	406ee4 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406f66:	79eb      	ldrb	r3, [r5, #7]
  406f68:	f013 0f10 	tst.w	r3, #16
  406f6c:	d105      	bne.n	406f7a <_lv_obj_get_style_opa+0xc2>
            bool def = false;
  406f6e:	2300      	movs	r3, #0
  406f70:	e7b8      	b.n	406ee4 <_lv_obj_get_style_opa+0x2c>
                    if(list->opa_scale_cover) def = true;
  406f72:	2301      	movs	r3, #1
  406f74:	e7b6      	b.n	406ee4 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_transp) def = true;
  406f76:	2301      	movs	r3, #1
  406f78:	e7b4      	b.n	406ee4 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406f7a:	2301      	movs	r3, #1
  406f7c:	e7b2      	b.n	406ee4 <_lv_obj_get_style_opa+0x2c>
        if(res == LV_RES_OK) return value_act;
  406f7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  406f82:	e014      	b.n	406fae <_lv_obj_get_style_opa+0xf6>
        parent = lv_obj_get_parent(parent);
  406f84:	4638      	mov	r0, r7
  406f86:	4b0f      	ldr	r3, [pc, #60]	; (406fc4 <_lv_obj_get_style_opa+0x10c>)
  406f88:	4798      	blx	r3
  406f8a:	4607      	mov	r7, r0
  406f8c:	e7c2      	b.n	406f14 <_lv_obj_get_style_opa+0x5c>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406f8e:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406f92:	b2a4      	uxth	r4, r4
    switch(prop) {
  406f94:	2c6d      	cmp	r4, #109	; 0x6d
  406f96:	d007      	beq.n	406fa8 <_lv_obj_get_style_opa+0xf0>
  406f98:	f248 03ad 	movw	r3, #32941	; 0x80ad
  406f9c:	429c      	cmp	r4, r3
  406f9e:	d003      	beq.n	406fa8 <_lv_obj_get_style_opa+0xf0>
  406fa0:	2c2c      	cmp	r4, #44	; 0x2c
  406fa2:	d001      	beq.n	406fa8 <_lv_obj_get_style_opa+0xf0>
    return LV_OPA_COVER;
  406fa4:	20ff      	movs	r0, #255	; 0xff
  406fa6:	e002      	b.n	406fae <_lv_obj_get_style_opa+0xf6>
            return LV_OPA_TRANSP;
  406fa8:	2000      	movs	r0, #0
  406faa:	e000      	b.n	406fae <_lv_obj_get_style_opa+0xf6>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406fac:	20ff      	movs	r0, #255	; 0xff
}
  406fae:	b003      	add	sp, #12
  406fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406fb4:	00406fc9 	.word	0x00406fc9
  406fb8:	00406de1 	.word	0x00406de1
  406fbc:	0040b059 	.word	0x0040b059
  406fc0:	00405c0d 	.word	0x00405c0d
  406fc4:	004059ad 	.word	0x004059ad

00406fc8 <update_style_cache>:
{
  406fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406fcc:	4605      	mov	r5, r0
  406fce:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
  406fd0:	4610      	mov	r0, r2
  406fd2:	4baf      	ldr	r3, [pc, #700]	; (407290 <update_style_cache+0x2c8>)
  406fd4:	4798      	blx	r3
  406fd6:	b908      	cbnz	r0, 406fdc <update_style_cache+0x14>
  406fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406fdc:	4631      	mov	r1, r6
  406fde:	4628      	mov	r0, r5
  406fe0:	4bac      	ldr	r3, [pc, #688]	; (407294 <update_style_cache+0x2cc>)
  406fe2:	4798      	blx	r3
  406fe4:	4604      	mov	r4, r0
    bool ignore_cache_ori = list->ignore_cache;
  406fe6:	7943      	ldrb	r3, [r0, #5]
  406fe8:	f3c3 08c0 	ubfx	r8, r3, #3, #1
    list->ignore_cache = 1;
  406fec:	f043 0308 	orr.w	r3, r3, #8
  406ff0:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  406ff2:	f248 020c 	movw	r2, #32780	; 0x800c
  406ff6:	4631      	mov	r1, r6
  406ff8:	4628      	mov	r0, r5
  406ffa:	4ba7      	ldr	r3, [pc, #668]	; (407298 <update_style_cache+0x2d0>)
  406ffc:	4798      	blx	r3
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  406ffe:	28ff      	cmp	r0, #255	; 0xff
  407000:	bf14      	ite	ne
  407002:	2000      	movne	r0, #0
  407004:	2001      	moveq	r0, #1
  407006:	7963      	ldrb	r3, [r4, #5]
  407008:	f360 1345 	bfi	r3, r0, #5, #1
  40700c:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  40700e:	f248 0282 	movw	r2, #32898	; 0x8082
  407012:	4631      	mov	r1, r6
  407014:	4628      	mov	r0, r5
  407016:	4fa1      	ldr	r7, [pc, #644]	; (40729c <update_style_cache+0x2d4>)
  407018:	47b8      	blx	r7
  40701a:	b2c0      	uxtb	r0, r0
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  40701c:	fab0 f080 	clz	r0, r0
  407020:	0940      	lsrs	r0, r0, #5
  407022:	79e3      	ldrb	r3, [r4, #7]
  407024:	f360 1386 	bfi	r3, r0, #6, #1
  407028:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  40702a:	f248 028e 	movw	r2, #32910	; 0x808e
  40702e:	4631      	mov	r1, r6
  407030:	4628      	mov	r0, r5
  407032:	4b9b      	ldr	r3, [pc, #620]	; (4072a0 <update_style_cache+0x2d8>)
  407034:	4798      	blx	r3
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
  407036:	4b9b      	ldr	r3, [pc, #620]	; (4072a4 <update_style_cache+0x2dc>)
  407038:	4283      	cmp	r3, r0
  40703a:	bf14      	ite	ne
  40703c:	2000      	movne	r0, #0
  40703e:	2001      	moveq	r0, #1
  407040:	79e3      	ldrb	r3, [r4, #7]
  407042:	f360 13c7 	bfi	r3, r0, #7, #1
    list->text_space_zero = 1;
  407046:	b2db      	uxtb	r3, r3
  407048:	f043 0320 	orr.w	r3, r3, #32
  40704c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  40704e:	f248 0280 	movw	r2, #32896	; 0x8080
  407052:	4631      	mov	r1, r6
  407054:	4628      	mov	r0, r5
  407056:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  407058:	2800      	cmp	r0, #0
  40705a:	f000 80cf 	beq.w	4071fc <update_style_cache+0x234>
        list->text_space_zero = 0;
  40705e:	79e3      	ldrb	r3, [r4, #7]
  407060:	f36f 1345 	bfc	r3, #5, #1
  407064:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  407066:	222c      	movs	r2, #44	; 0x2c
  407068:	4631      	mov	r1, r6
  40706a:	4628      	mov	r0, r5
  40706c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 407298 <update_style_cache+0x2d0>
  407070:	47c8      	blx	r9
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
  407072:	fab0 f280 	clz	r2, r0
  407076:	0952      	lsrs	r2, r2, #5
  407078:	79a3      	ldrb	r3, [r4, #6]
  40707a:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
  40707e:	28ff      	cmp	r0, #255	; 0xff
  407080:	bf14      	ite	ne
  407082:	2000      	movne	r0, #0
  407084:	2001      	moveq	r0, #1
  407086:	f360 1304 	bfi	r3, r0, #4, #1
  40708a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  40708c:	2230      	movs	r2, #48	; 0x30
  40708e:	4631      	mov	r1, r6
  407090:	4628      	mov	r0, r5
  407092:	4f82      	ldr	r7, [pc, #520]	; (40729c <update_style_cache+0x2d4>)
  407094:	47b8      	blx	r7
    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
  407096:	fab0 f080 	clz	r0, r0
  40709a:	0940      	lsrs	r0, r0, #5
  40709c:	79a3      	ldrb	r3, [r4, #6]
  40709e:	f360 1345 	bfi	r3, r0, #5, #1
  4070a2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  4070a4:	2231      	movs	r2, #49	; 0x31
  4070a6:	4631      	mov	r1, r6
  4070a8:	4628      	mov	r0, r5
  4070aa:	47b8      	blx	r7
  4070ac:	b2c0      	uxtb	r0, r0
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
  4070ae:	280f      	cmp	r0, #15
  4070b0:	bf14      	ite	ne
  4070b2:	2000      	movne	r0, #0
  4070b4:	2001      	moveq	r0, #1
  4070b6:	79a3      	ldrb	r3, [r4, #6]
  4070b8:	f360 1386 	bfi	r3, r0, #6, #1
  4070bc:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  4070be:	2233      	movs	r2, #51	; 0x33
  4070c0:	4631      	mov	r1, r6
  4070c2:	4628      	mov	r0, r5
  4070c4:	47b8      	blx	r7
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
  4070c6:	fab0 f080 	clz	r0, r0
  4070ca:	0940      	lsrs	r0, r0, #5
  4070cc:	79a3      	ldrb	r3, [r4, #6]
  4070ce:	f360 13c7 	bfi	r3, r0, #7, #1
  4070d2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4070d4:	2202      	movs	r2, #2
  4070d6:	4631      	mov	r1, r6
  4070d8:	4628      	mov	r0, r5
  4070da:	47b8      	blx	r7
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
  4070dc:	fab0 f080 	clz	r0, r0
  4070e0:	0940      	lsrs	r0, r0, #5
  4070e2:	7963      	ldrb	r3, [r4, #5]
  4070e4:	f360 1386 	bfi	r3, r0, #6, #1
  4070e8:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  4070ea:	f248 02ad 	movw	r2, #32941	; 0x80ad
  4070ee:	4631      	mov	r1, r6
  4070f0:	4628      	mov	r0, r5
  4070f2:	47c8      	blx	r9
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  4070f4:	fab0 f080 	clz	r0, r0
  4070f8:	0940      	lsrs	r0, r0, #5
  4070fa:	79e3      	ldrb	r3, [r4, #7]
  4070fc:	f360 1304 	bfi	r3, r0, #4, #1
  407100:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  407102:	2240      	movs	r2, #64	; 0x40
  407104:	4631      	mov	r1, r6
  407106:	4628      	mov	r0, r5
  407108:	47b8      	blx	r7
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
  40710a:	fab0 f080 	clz	r0, r0
  40710e:	0940      	lsrs	r0, r0, #5
  407110:	79e3      	ldrb	r3, [r4, #7]
  407112:	f360 0300 	bfi	r3, r0, #0, #1
  407116:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  407118:	226e      	movs	r2, #110	; 0x6e
  40711a:	4631      	mov	r1, r6
  40711c:	4628      	mov	r0, r5
  40711e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 4072a0 <update_style_cache+0x2d8>
  407122:	47c8      	blx	r9
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
  407124:	fab0 f080 	clz	r0, r0
  407128:	0940      	lsrs	r0, r0, #5
  40712a:	79e3      	ldrb	r3, [r4, #7]
  40712c:	f360 0341 	bfi	r3, r0, #1, #1
  407130:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  407132:	2201      	movs	r2, #1
  407134:	4631      	mov	r1, r6
  407136:	4628      	mov	r0, r5
  407138:	47b8      	blx	r7
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
  40713a:	fab0 f080 	clz	r0, r0
  40713e:	0940      	lsrs	r0, r0, #5
  407140:	7963      	ldrb	r3, [r4, #5]
  407142:	f360 1304 	bfi	r3, r0, #4, #1
  407146:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  407148:	2250      	movs	r2, #80	; 0x50
  40714a:	4631      	mov	r1, r6
  40714c:	4628      	mov	r0, r5
  40714e:	47b8      	blx	r7
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
  407150:	fab0 f080 	clz	r0, r0
  407154:	0940      	lsrs	r0, r0, #5
  407156:	79e3      	ldrb	r3, [r4, #7]
  407158:	f360 0382 	bfi	r3, r0, #2, #1
  40715c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  40715e:	227f      	movs	r2, #127	; 0x7f
  407160:	4631      	mov	r1, r6
  407162:	4628      	mov	r0, r5
  407164:	47c8      	blx	r9
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
  407166:	fab0 f080 	clz	r0, r0
  40716a:	0940      	lsrs	r0, r0, #5
  40716c:	79e3      	ldrb	r3, [r4, #7]
  40716e:	f360 03c3 	bfi	r3, r0, #3, #1
  407172:	71e3      	strb	r3, [r4, #7]
    list->transform_all_zero  = 1;
  407174:	7963      	ldrb	r3, [r4, #5]
  407176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40717a:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  40717c:	2206      	movs	r2, #6
  40717e:	4631      	mov	r1, r6
  407180:	4628      	mov	r0, r5
  407182:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  407184:	2800      	cmp	r0, #0
  407186:	d042      	beq.n	40720e <update_style_cache+0x246>
        list->transform_all_zero  = 0;
  407188:	7963      	ldrb	r3, [r4, #5]
  40718a:	f36f 13c7 	bfc	r3, #7, #1
  40718e:	7163      	strb	r3, [r4, #5]
    list->pad_all_zero  = 1;
  407190:	79a3      	ldrb	r3, [r4, #6]
  407192:	f043 0301 	orr.w	r3, r3, #1
  407196:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  407198:	2210      	movs	r2, #16
  40719a:	4631      	mov	r1, r6
  40719c:	4628      	mov	r0, r5
  40719e:	4b3f      	ldr	r3, [pc, #252]	; (40729c <update_style_cache+0x2d4>)
  4071a0:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  4071a2:	2800      	cmp	r0, #0
  4071a4:	d047      	beq.n	407236 <update_style_cache+0x26e>
        list->pad_all_zero  = 0;
  4071a6:	79a3      	ldrb	r3, [r4, #6]
  4071a8:	f36f 0300 	bfc	r3, #0, #1
  4071ac:	71a3      	strb	r3, [r4, #6]
    list->margin_all_zero  = 1;
  4071ae:	79a3      	ldrb	r3, [r4, #6]
  4071b0:	f043 0302 	orr.w	r3, r3, #2
  4071b4:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  4071b6:	2215      	movs	r2, #21
  4071b8:	4631      	mov	r1, r6
  4071ba:	4628      	mov	r0, r5
  4071bc:	4b37      	ldr	r3, [pc, #220]	; (40729c <update_style_cache+0x2d4>)
  4071be:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  4071c0:	2800      	cmp	r0, #0
  4071c2:	d04e      	beq.n	407262 <update_style_cache+0x29a>
        list->margin_all_zero  = 0;
  4071c4:	79a3      	ldrb	r3, [r4, #6]
  4071c6:	f36f 0341 	bfc	r3, #1, #1
  4071ca:	71a3      	strb	r3, [r4, #6]
    list->blend_mode_all_normal = 1;
  4071cc:	79a3      	ldrb	r3, [r4, #6]
  4071ce:	f043 0304 	orr.w	r3, r3, #4
  4071d2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  4071d4:	2220      	movs	r2, #32
  4071d6:	4631      	mov	r1, r6
  4071d8:	4628      	mov	r0, r5
  4071da:	4b30      	ldr	r3, [pc, #192]	; (40729c <update_style_cache+0x2d4>)
  4071dc:	4798      	blx	r3
  4071de:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4071e0:	2800      	cmp	r0, #0
  4071e2:	d061      	beq.n	4072a8 <update_style_cache+0x2e0>
        list->blend_mode_all_normal = 0;
  4071e4:	79a3      	ldrb	r3, [r4, #6]
  4071e6:	f36f 0382 	bfc	r3, #2, #1
  4071ea:	71a3      	strb	r3, [r4, #6]
    list->ignore_cache = ignore_cache_ori;
  4071ec:	7963      	ldrb	r3, [r4, #5]
  4071ee:	f368 03c3 	bfi	r3, r8, #3, #1
    list->valid_cache = 1;
  4071f2:	b2db      	uxtb	r3, r3
  4071f4:	f043 0304 	orr.w	r3, r3, #4
  4071f8:	7163      	strb	r3, [r4, #5]
  4071fa:	e6ed      	b.n	406fd8 <update_style_cache+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  4071fc:	f248 0281 	movw	r2, #32897	; 0x8081
  407200:	4631      	mov	r1, r6
  407202:	4628      	mov	r0, r5
  407204:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  407206:	2800      	cmp	r0, #0
  407208:	f43f af2d 	beq.w	407066 <update_style_cache+0x9e>
  40720c:	e727      	b.n	40705e <update_style_cache+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40720e:	2204      	movs	r2, #4
  407210:	4631      	mov	r1, r6
  407212:	4628      	mov	r0, r5
  407214:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  407216:	2800      	cmp	r0, #0
  407218:	d1b6      	bne.n	407188 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40721a:	2205      	movs	r2, #5
  40721c:	4631      	mov	r1, r6
  40721e:	4628      	mov	r0, r5
  407220:	47b8      	blx	r7
       lv_obj_get_style_transform_width(obj, part) != 0 ||
  407222:	2800      	cmp	r0, #0
  407224:	d1b0      	bne.n	407188 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  407226:	2207      	movs	r2, #7
  407228:	4631      	mov	r1, r6
  40722a:	4628      	mov	r0, r5
  40722c:	47b8      	blx	r7
       lv_obj_get_style_transform_height(obj, part) != 0 ||
  40722e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  407232:	d1a9      	bne.n	407188 <update_style_cache+0x1c0>
  407234:	e7ac      	b.n	407190 <update_style_cache+0x1c8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  407236:	2211      	movs	r2, #17
  407238:	4631      	mov	r1, r6
  40723a:	4628      	mov	r0, r5
  40723c:	4b17      	ldr	r3, [pc, #92]	; (40729c <update_style_cache+0x2d4>)
  40723e:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  407240:	2800      	cmp	r0, #0
  407242:	d1b0      	bne.n	4071a6 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  407244:	2212      	movs	r2, #18
  407246:	4631      	mov	r1, r6
  407248:	4628      	mov	r0, r5
  40724a:	4b14      	ldr	r3, [pc, #80]	; (40729c <update_style_cache+0x2d4>)
  40724c:	4798      	blx	r3
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
  40724e:	2800      	cmp	r0, #0
  407250:	d1a9      	bne.n	4071a6 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  407252:	2213      	movs	r2, #19
  407254:	4631      	mov	r1, r6
  407256:	4628      	mov	r0, r5
  407258:	4b10      	ldr	r3, [pc, #64]	; (40729c <update_style_cache+0x2d4>)
  40725a:	4798      	blx	r3
       lv_obj_get_style_pad_left(obj, part) != 0 ||
  40725c:	2800      	cmp	r0, #0
  40725e:	d0a6      	beq.n	4071ae <update_style_cache+0x1e6>
  407260:	e7a1      	b.n	4071a6 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  407262:	2216      	movs	r2, #22
  407264:	4631      	mov	r1, r6
  407266:	4628      	mov	r0, r5
  407268:	4b0c      	ldr	r3, [pc, #48]	; (40729c <update_style_cache+0x2d4>)
  40726a:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  40726c:	2800      	cmp	r0, #0
  40726e:	d1a9      	bne.n	4071c4 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  407270:	2217      	movs	r2, #23
  407272:	4631      	mov	r1, r6
  407274:	4628      	mov	r0, r5
  407276:	4b09      	ldr	r3, [pc, #36]	; (40729c <update_style_cache+0x2d4>)
  407278:	4798      	blx	r3
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
  40727a:	2800      	cmp	r0, #0
  40727c:	d1a2      	bne.n	4071c4 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  40727e:	2218      	movs	r2, #24
  407280:	4631      	mov	r1, r6
  407282:	4628      	mov	r0, r5
  407284:	4b05      	ldr	r3, [pc, #20]	; (40729c <update_style_cache+0x2d4>)
  407286:	4798      	blx	r3
       lv_obj_get_style_margin_left(obj, part) != 0 ||
  407288:	2800      	cmp	r0, #0
  40728a:	d09f      	beq.n	4071cc <update_style_cache+0x204>
  40728c:	e79a      	b.n	4071c4 <update_style_cache+0x1fc>
  40728e:	bf00      	nop
  407290:	004053b5 	.word	0x004053b5
  407294:	00405c0d 	.word	0x00405c0d
  407298:	00406eb9 	.word	0x00406eb9
  40729c:	00407445 	.word	0x00407445
  4072a0:	0040733d 	.word	0x0040733d
  4072a4:	2040008c 	.word	0x2040008c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  4072a8:	2232      	movs	r2, #50	; 0x32
  4072aa:	4631      	mov	r1, r6
  4072ac:	4628      	mov	r0, r5
  4072ae:	4b22      	ldr	r3, [pc, #136]	; (407338 <update_style_cache+0x370>)
  4072b0:	4798      	blx	r3
  4072b2:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072b4:	2800      	cmp	r0, #0
  4072b6:	d195      	bne.n	4071e4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  4072b8:	2260      	movs	r2, #96	; 0x60
  4072ba:	4631      	mov	r1, r6
  4072bc:	4628      	mov	r0, r5
  4072be:	4b1e      	ldr	r3, [pc, #120]	; (407338 <update_style_cache+0x370>)
  4072c0:	4798      	blx	r3
  4072c2:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072c4:	2800      	cmp	r0, #0
  4072c6:	d18d      	bne.n	4071e4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  4072c8:	2242      	movs	r2, #66	; 0x42
  4072ca:	4631      	mov	r1, r6
  4072cc:	4628      	mov	r0, r5
  4072ce:	4b1a      	ldr	r3, [pc, #104]	; (407338 <update_style_cache+0x370>)
  4072d0:	4798      	blx	r3
  4072d2:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072d4:	2800      	cmp	r0, #0
  4072d6:	d185      	bne.n	4071e4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  4072d8:	2272      	movs	r2, #114	; 0x72
  4072da:	4631      	mov	r1, r6
  4072dc:	4628      	mov	r0, r5
  4072de:	4b16      	ldr	r3, [pc, #88]	; (407338 <update_style_cache+0x370>)
  4072e0:	4798      	blx	r3
  4072e2:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072e4:	2800      	cmp	r0, #0
  4072e6:	f47f af7d 	bne.w	4071e4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  4072ea:	f248 0283 	movw	r2, #32899	; 0x8083
  4072ee:	4631      	mov	r1, r6
  4072f0:	4628      	mov	r0, r5
  4072f2:	4b11      	ldr	r3, [pc, #68]	; (407338 <update_style_cache+0x370>)
  4072f4:	4798      	blx	r3
  4072f6:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072f8:	2800      	cmp	r0, #0
  4072fa:	f47f af73 	bne.w	4071e4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  4072fe:	2291      	movs	r2, #145	; 0x91
  407300:	4631      	mov	r1, r6
  407302:	4628      	mov	r0, r5
  407304:	4b0c      	ldr	r3, [pc, #48]	; (407338 <update_style_cache+0x370>)
  407306:	4798      	blx	r3
  407308:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40730a:	2800      	cmp	r0, #0
  40730c:	f47f af6a 	bne.w	4071e4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  407310:	f248 02a0 	movw	r2, #32928	; 0x80a0
  407314:	4631      	mov	r1, r6
  407316:	4628      	mov	r0, r5
  407318:	4b07      	ldr	r3, [pc, #28]	; (407338 <update_style_cache+0x370>)
  40731a:	4798      	blx	r3
  40731c:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40731e:	2800      	cmp	r0, #0
  407320:	f47f af60 	bne.w	4071e4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  407324:	2254      	movs	r2, #84	; 0x54
  407326:	4631      	mov	r1, r6
  407328:	4628      	mov	r0, r5
  40732a:	4b03      	ldr	r3, [pc, #12]	; (407338 <update_style_cache+0x370>)
  40732c:	4798      	blx	r3
  40732e:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407330:	2800      	cmp	r0, #0
  407332:	f43f af5b 	beq.w	4071ec <update_style_cache+0x224>
  407336:	e755      	b.n	4071e4 <update_style_cache+0x21c>
  407338:	00407445 	.word	0x00407445

0040733c <_lv_obj_get_style_ptr>:
{
  40733c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407340:	b083      	sub	sp, #12
  407342:	4607      	mov	r7, r0
  407344:	460e      	mov	r6, r1
  407346:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  407348:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  40734c:	4614      	mov	r4, r2
  40734e:	e02d      	b.n	4073ac <_lv_obj_get_style_ptr+0x70>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407350:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407354:	4631      	mov	r1, r6
  407356:	4638      	mov	r0, r7
  407358:	4b33      	ldr	r3, [pc, #204]	; (407428 <_lv_obj_get_style_ptr+0xec>)
  40735a:	4798      	blx	r3
  40735c:	e037      	b.n	4073ce <_lv_obj_get_style_ptr+0x92>
                    if(list->value_txt_str) def = true;
  40735e:	79eb      	ldrb	r3, [r5, #7]
  407360:	f013 0f08 	tst.w	r3, #8
  407364:	d13f      	bne.n	4073e6 <_lv_obj_get_style_ptr+0xaa>
            bool def = false;
  407366:	2300      	movs	r3, #0
  407368:	e00a      	b.n	407380 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  40736a:	79eb      	ldrb	r3, [r5, #7]
  40736c:	f013 0f02 	tst.w	r3, #2
  407370:	d13b      	bne.n	4073ea <_lv_obj_get_style_ptr+0xae>
            bool def = false;
  407372:	2300      	movs	r3, #0
  407374:	e004      	b.n	407380 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  407376:	f995 3007 	ldrsb.w	r3, [r5, #7]
  40737a:	2b00      	cmp	r3, #0
  40737c:	db37      	blt.n	4073ee <_lv_obj_get_style_ptr+0xb2>
            bool def = false;
  40737e:	2300      	movs	r3, #0
            if(def) {
  407380:	2b00      	cmp	r3, #0
  407382:	d13f      	bne.n	407404 <_lv_obj_get_style_ptr+0xc8>
        lv_state_t state = lv_obj_get_state(parent, part);
  407384:	4631      	mov	r1, r6
  407386:	4638      	mov	r0, r7
  407388:	4b28      	ldr	r3, [pc, #160]	; (40742c <_lv_obj_get_style_ptr+0xf0>)
  40738a:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  40738c:	0204      	lsls	r4, r0, #8
  40738e:	b2a4      	uxth	r4, r4
  407390:	4444      	add	r4, r8
  407392:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
  407394:	aa01      	add	r2, sp, #4
  407396:	4621      	mov	r1, r4
  407398:	4628      	mov	r0, r5
  40739a:	4b25      	ldr	r3, [pc, #148]	; (407430 <_lv_obj_get_style_ptr+0xf4>)
  40739c:	4798      	blx	r3
        if(res == LV_RES_OK)  return value_act;
  40739e:	2801      	cmp	r0, #1
  4073a0:	d027      	beq.n	4073f2 <_lv_obj_get_style_ptr+0xb6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  4073a2:	f019 0f80 	tst.w	r9, #128	; 0x80
  4073a6:	d02d      	beq.n	407404 <_lv_obj_get_style_ptr+0xc8>
        if(part != LV_OBJ_PART_MAIN) {
  4073a8:	b33e      	cbz	r6, 4073fa <_lv_obj_get_style_ptr+0xbe>
            part = LV_OBJ_PART_MAIN;
  4073aa:	2600      	movs	r6, #0
    while(parent) {
  4073ac:	b357      	cbz	r7, 407404 <_lv_obj_get_style_ptr+0xc8>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4073ae:	4631      	mov	r1, r6
  4073b0:	4638      	mov	r0, r7
  4073b2:	4b20      	ldr	r3, [pc, #128]	; (407434 <_lv_obj_get_style_ptr+0xf8>)
  4073b4:	4798      	blx	r3
  4073b6:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  4073b8:	7943      	ldrb	r3, [r0, #5]
  4073ba:	f013 0f08 	tst.w	r3, #8
  4073be:	d1e1      	bne.n	407384 <_lv_obj_get_style_ptr+0x48>
  4073c0:	7902      	ldrb	r2, [r0, #4]
  4073c2:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  4073c6:	d0dd      	beq.n	407384 <_lv_obj_get_style_ptr+0x48>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  4073c8:	f013 0f04 	tst.w	r3, #4
  4073cc:	d0c0      	beq.n	407350 <_lv_obj_get_style_ptr+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4073ce:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  4073d2:	2b7f      	cmp	r3, #127	; 0x7f
  4073d4:	d0c3      	beq.n	40735e <_lv_obj_get_style_ptr+0x22>
  4073d6:	f248 028e 	movw	r2, #32910	; 0x808e
  4073da:	4293      	cmp	r3, r2
  4073dc:	d0cb      	beq.n	407376 <_lv_obj_get_style_ptr+0x3a>
  4073de:	2b6e      	cmp	r3, #110	; 0x6e
  4073e0:	d0c3      	beq.n	40736a <_lv_obj_get_style_ptr+0x2e>
            bool def = false;
  4073e2:	2300      	movs	r3, #0
  4073e4:	e7cc      	b.n	407380 <_lv_obj_get_style_ptr+0x44>
                    if(list->value_txt_str) def = true;
  4073e6:	2301      	movs	r3, #1
  4073e8:	e7ca      	b.n	407380 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  4073ea:	2301      	movs	r3, #1
  4073ec:	e7c8      	b.n	407380 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  4073ee:	2301      	movs	r3, #1
  4073f0:	e7c6      	b.n	407380 <_lv_obj_get_style_ptr+0x44>
        if(res == LV_RES_OK)  return value_act;
  4073f2:	9801      	ldr	r0, [sp, #4]
}
  4073f4:	b003      	add	sp, #12
  4073f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  4073fa:	4638      	mov	r0, r7
  4073fc:	4b0e      	ldr	r3, [pc, #56]	; (407438 <_lv_obj_get_style_ptr+0xfc>)
  4073fe:	4798      	blx	r3
  407400:	4607      	mov	r7, r0
  407402:	e7d3      	b.n	4073ac <_lv_obj_get_style_ptr+0x70>
    prop = prop & (~LV_STYLE_STATE_MASK);
  407404:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  407408:	b2a4      	uxth	r4, r4
    switch(prop) {
  40740a:	2cbe      	cmp	r4, #190	; 0xbe
  40740c:	d007      	beq.n	40741e <_lv_obj_get_style_ptr+0xe2>
  40740e:	f248 038e 	movw	r3, #32910	; 0x808e
  407412:	429c      	cmp	r4, r3
  407414:	d005      	beq.n	407422 <_lv_obj_get_style_ptr+0xe6>
  407416:	2c7e      	cmp	r4, #126	; 0x7e
  407418:	d003      	beq.n	407422 <_lv_obj_get_style_ptr+0xe6>
    return NULL;
  40741a:	2000      	movs	r0, #0
  40741c:	e7ea      	b.n	4073f4 <_lv_obj_get_style_ptr+0xb8>
            return &lv_anim_path_def;
  40741e:	4807      	ldr	r0, [pc, #28]	; (40743c <_lv_obj_get_style_ptr+0x100>)
  407420:	e7e8      	b.n	4073f4 <_lv_obj_get_style_ptr+0xb8>
            return lv_theme_get_font_normal();
  407422:	4b07      	ldr	r3, [pc, #28]	; (407440 <_lv_obj_get_style_ptr+0x104>)
  407424:	4798      	blx	r3
  407426:	e7e5      	b.n	4073f4 <_lv_obj_get_style_ptr+0xb8>
  407428:	00406fc9 	.word	0x00406fc9
  40742c:	00406de1 	.word	0x00406de1
  407430:	0040b12d 	.word	0x0040b12d
  407434:	00405c0d 	.word	0x00405c0d
  407438:	004059ad 	.word	0x004059ad
  40743c:	0042f708 	.word	0x0042f708
  407440:	0041831d 	.word	0x0041831d

00407444 <_lv_obj_get_style_int>:
{
  407444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407448:	b083      	sub	sp, #12
  40744a:	4607      	mov	r7, r0
  40744c:	460e      	mov	r6, r1
  40744e:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  407450:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  407454:	4614      	mov	r4, r2
  407456:	e078      	b.n	40754a <_lv_obj_get_style_int+0x106>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407458:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  40745c:	4631      	mov	r1, r6
  40745e:	4638      	mov	r0, r7
  407460:	4b82      	ldr	r3, [pc, #520]	; (40766c <_lv_obj_get_style_int+0x228>)
  407462:	4798      	blx	r3
  407464:	e084      	b.n	407570 <_lv_obj_get_style_int+0x12c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407466:	3b04      	subs	r3, #4
  407468:	2b03      	cmp	r3, #3
  40746a:	d854      	bhi.n	407516 <_lv_obj_get_style_int+0xd2>
                    if(list->transform_all_zero) def = true;
  40746c:	f995 3005 	ldrsb.w	r3, [r5, #5]
  407470:	2b00      	cmp	r3, #0
  407472:	f2c0 80c0 	blt.w	4075f6 <_lv_obj_get_style_int+0x1b2>
            bool def = false;
  407476:	2300      	movs	r3, #0
  407478:	e04e      	b.n	407518 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40747a:	2b20      	cmp	r3, #32
  40747c:	d029      	beq.n	4074d2 <_lv_obj_get_style_int+0x8e>
  40747e:	dd0c      	ble.n	40749a <_lv_obj_get_style_int+0x56>
  407480:	2b31      	cmp	r3, #49	; 0x31
  407482:	f000 809c 	beq.w	4075be <_lv_obj_get_style_int+0x17a>
  407486:	dc24      	bgt.n	4074d2 <_lv_obj_get_style_int+0x8e>
  407488:	2b30      	cmp	r3, #48	; 0x30
  40748a:	d144      	bne.n	407516 <_lv_obj_get_style_int+0xd2>
                    if(list->border_width_zero) def = true;
  40748c:	79ab      	ldrb	r3, [r5, #6]
  40748e:	f013 0f20 	tst.w	r3, #32
  407492:	f040 80b2 	bne.w	4075fa <_lv_obj_get_style_int+0x1b6>
            bool def = false;
  407496:	2300      	movs	r3, #0
  407498:	e03e      	b.n	407518 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40749a:	3b15      	subs	r3, #21
  40749c:	2b03      	cmp	r3, #3
  40749e:	d83a      	bhi.n	407516 <_lv_obj_get_style_int+0xd2>
                    if(list->margin_all_zero) def = true;
  4074a0:	79ab      	ldrb	r3, [r5, #6]
  4074a2:	f013 0f02 	tst.w	r3, #2
  4074a6:	f040 80b6 	bne.w	407616 <_lv_obj_get_style_int+0x1d2>
            bool def = false;
  4074aa:	2300      	movs	r3, #0
  4074ac:	e034      	b.n	407518 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4074ae:	2b72      	cmp	r3, #114	; 0x72
  4074b0:	d00f      	beq.n	4074d2 <_lv_obj_get_style_int+0x8e>
  4074b2:	dc1a      	bgt.n	4074ea <_lv_obj_get_style_int+0xa6>
  4074b4:	2b50      	cmp	r3, #80	; 0x50
  4074b6:	f000 808e 	beq.w	4075d6 <_lv_obj_get_style_int+0x192>
  4074ba:	dc11      	bgt.n	4074e0 <_lv_obj_get_style_int+0x9c>
  4074bc:	2b40      	cmp	r3, #64	; 0x40
  4074be:	d106      	bne.n	4074ce <_lv_obj_get_style_int+0x8a>
                    if(list->outline_width_zero) def = true;
  4074c0:	79eb      	ldrb	r3, [r5, #7]
  4074c2:	f013 0f01 	tst.w	r3, #1
  4074c6:	f040 809e 	bne.w	407606 <_lv_obj_get_style_int+0x1c2>
            bool def = false;
  4074ca:	2300      	movs	r3, #0
  4074cc:	e024      	b.n	407518 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4074ce:	2b42      	cmp	r3, #66	; 0x42
  4074d0:	d121      	bne.n	407516 <_lv_obj_get_style_int+0xd2>
                    if(list->blend_mode_all_normal) def = true;
  4074d2:	79ab      	ldrb	r3, [r5, #6]
  4074d4:	f013 0f04 	tst.w	r3, #4
  4074d8:	f040 809f 	bne.w	40761a <_lv_obj_get_style_int+0x1d6>
            bool def = false;
  4074dc:	2300      	movs	r3, #0
  4074de:	e01b      	b.n	407518 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4074e0:	2b54      	cmp	r3, #84	; 0x54
  4074e2:	d0f6      	beq.n	4074d2 <_lv_obj_get_style_int+0x8e>
  4074e4:	2b60      	cmp	r3, #96	; 0x60
  4074e6:	d116      	bne.n	407516 <_lv_obj_get_style_int+0xd2>
  4074e8:	e7f3      	b.n	4074d2 <_lv_obj_get_style_int+0x8e>
  4074ea:	f248 0281 	movw	r2, #32897	; 0x8081
  4074ee:	4293      	cmp	r3, r2
  4074f0:	dd0b      	ble.n	40750a <_lv_obj_get_style_int+0xc6>
  4074f2:	f248 0283 	movw	r2, #32899	; 0x8083
  4074f6:	4293      	cmp	r3, r2
  4074f8:	d0eb      	beq.n	4074d2 <_lv_obj_get_style_int+0x8e>
  4074fa:	da4f      	bge.n	40759c <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
  4074fc:	79eb      	ldrb	r3, [r5, #7]
  4074fe:	f013 0f40 	tst.w	r3, #64	; 0x40
  407502:	f040 808c 	bne.w	40761e <_lv_obj_get_style_int+0x1da>
            bool def = false;
  407506:	2300      	movs	r3, #0
  407508:	e006      	b.n	407518 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40750a:	f248 0280 	movw	r2, #32896	; 0x8080
  40750e:	4293      	cmp	r3, r2
  407510:	da4f      	bge.n	4075b2 <_lv_obj_get_style_int+0x16e>
  407512:	2b91      	cmp	r3, #145	; 0x91
  407514:	d0dd      	beq.n	4074d2 <_lv_obj_get_style_int+0x8e>
            bool def = false;
  407516:	2300      	movs	r3, #0
            if(def) {
  407518:	2b00      	cmp	r3, #0
  40751a:	f040 808c 	bne.w	407636 <_lv_obj_get_style_int+0x1f2>
        lv_state_t state = lv_obj_get_state(parent, part);
  40751e:	4631      	mov	r1, r6
  407520:	4638      	mov	r0, r7
  407522:	4b53      	ldr	r3, [pc, #332]	; (407670 <_lv_obj_get_style_int+0x22c>)
  407524:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  407526:	0204      	lsls	r4, r0, #8
  407528:	b2a4      	uxth	r4, r4
  40752a:	4444      	add	r4, r8
  40752c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_int(list, prop, &value_act);
  40752e:	f10d 0206 	add.w	r2, sp, #6
  407532:	4621      	mov	r1, r4
  407534:	4628      	mov	r0, r5
  407536:	4b4f      	ldr	r3, [pc, #316]	; (407674 <_lv_obj_get_style_int+0x230>)
  407538:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  40753a:	2801      	cmp	r0, #1
  40753c:	d071      	beq.n	407622 <_lv_obj_get_style_int+0x1de>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  40753e:	f019 0f80 	tst.w	r9, #128	; 0x80
  407542:	d078      	beq.n	407636 <_lv_obj_get_style_int+0x1f2>
        if(part != LV_OBJ_PART_MAIN) {
  407544:	2e00      	cmp	r6, #0
  407546:	d071      	beq.n	40762c <_lv_obj_get_style_int+0x1e8>
            part = LV_OBJ_PART_MAIN;
  407548:	2600      	movs	r6, #0
    while(parent) {
  40754a:	2f00      	cmp	r7, #0
  40754c:	d073      	beq.n	407636 <_lv_obj_get_style_int+0x1f2>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  40754e:	4631      	mov	r1, r6
  407550:	4638      	mov	r0, r7
  407552:	4b49      	ldr	r3, [pc, #292]	; (407678 <_lv_obj_get_style_int+0x234>)
  407554:	4798      	blx	r3
  407556:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  407558:	7943      	ldrb	r3, [r0, #5]
  40755a:	f013 0f08 	tst.w	r3, #8
  40755e:	d1de      	bne.n	40751e <_lv_obj_get_style_int+0xda>
  407560:	7902      	ldrb	r2, [r0, #4]
  407562:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  407566:	d0da      	beq.n	40751e <_lv_obj_get_style_int+0xda>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407568:	f013 0f04 	tst.w	r3, #4
  40756c:	f43f af74 	beq.w	407458 <_lv_obj_get_style_int+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407570:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  407574:	2b33      	cmp	r3, #51	; 0x33
  407576:	d028      	beq.n	4075ca <_lv_obj_get_style_int+0x186>
  407578:	dc99      	bgt.n	4074ae <_lv_obj_get_style_int+0x6a>
  40757a:	2b13      	cmp	r3, #19
  40757c:	f73f af7d 	bgt.w	40747a <_lv_obj_get_style_int+0x36>
  407580:	2b10      	cmp	r3, #16
  407582:	da2e      	bge.n	4075e2 <_lv_obj_get_style_int+0x19e>
  407584:	2b02      	cmp	r3, #2
  407586:	d00e      	beq.n	4075a6 <_lv_obj_get_style_int+0x162>
  407588:	f73f af6d 	bgt.w	407466 <_lv_obj_get_style_int+0x22>
  40758c:	2b01      	cmp	r3, #1
  40758e:	d1c2      	bne.n	407516 <_lv_obj_get_style_int+0xd2>
                    if(list->radius_zero) def = true;
  407590:	796b      	ldrb	r3, [r5, #5]
  407592:	f013 0f10 	tst.w	r3, #16
  407596:	d138      	bne.n	40760a <_lv_obj_get_style_int+0x1c6>
            bool def = false;
  407598:	2300      	movs	r3, #0
  40759a:	e7bd      	b.n	407518 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40759c:	f248 02a0 	movw	r2, #32928	; 0x80a0
  4075a0:	4293      	cmp	r3, r2
  4075a2:	d1b8      	bne.n	407516 <_lv_obj_get_style_int+0xd2>
  4075a4:	e795      	b.n	4074d2 <_lv_obj_get_style_int+0x8e>
                    if(list->clip_corner_off) def = true;
  4075a6:	796b      	ldrb	r3, [r5, #5]
  4075a8:	f013 0f40 	tst.w	r3, #64	; 0x40
  4075ac:	d11f      	bne.n	4075ee <_lv_obj_get_style_int+0x1aa>
            bool def = false;
  4075ae:	2300      	movs	r3, #0
  4075b0:	e7b2      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  4075b2:	79eb      	ldrb	r3, [r5, #7]
  4075b4:	f013 0f20 	tst.w	r3, #32
  4075b8:	d11b      	bne.n	4075f2 <_lv_obj_get_style_int+0x1ae>
            bool def = false;
  4075ba:	2300      	movs	r3, #0
  4075bc:	e7ac      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  4075be:	79ab      	ldrb	r3, [r5, #6]
  4075c0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4075c4:	d11b      	bne.n	4075fe <_lv_obj_get_style_int+0x1ba>
            bool def = false;
  4075c6:	2300      	movs	r3, #0
  4075c8:	e7a6      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  4075ca:	f995 3006 	ldrsb.w	r3, [r5, #6]
  4075ce:	2b00      	cmp	r3, #0
  4075d0:	db17      	blt.n	407602 <_lv_obj_get_style_int+0x1be>
            bool def = false;
  4075d2:	2300      	movs	r3, #0
  4075d4:	e7a0      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  4075d6:	79eb      	ldrb	r3, [r5, #7]
  4075d8:	f013 0f04 	tst.w	r3, #4
  4075dc:	d117      	bne.n	40760e <_lv_obj_get_style_int+0x1ca>
            bool def = false;
  4075de:	2300      	movs	r3, #0
  4075e0:	e79a      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  4075e2:	79ab      	ldrb	r3, [r5, #6]
  4075e4:	f013 0f01 	tst.w	r3, #1
  4075e8:	d113      	bne.n	407612 <_lv_obj_get_style_int+0x1ce>
            bool def = false;
  4075ea:	2300      	movs	r3, #0
  4075ec:	e794      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->clip_corner_off) def = true;
  4075ee:	2301      	movs	r3, #1
  4075f0:	e792      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  4075f2:	2301      	movs	r3, #1
  4075f4:	e790      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->transform_all_zero) def = true;
  4075f6:	2301      	movs	r3, #1
  4075f8:	e78e      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->border_width_zero) def = true;
  4075fa:	2301      	movs	r3, #1
  4075fc:	e78c      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  4075fe:	2301      	movs	r3, #1
  407600:	e78a      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  407602:	2301      	movs	r3, #1
  407604:	e788      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->outline_width_zero) def = true;
  407606:	2301      	movs	r3, #1
  407608:	e786      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->radius_zero) def = true;
  40760a:	2301      	movs	r3, #1
  40760c:	e784      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  40760e:	2301      	movs	r3, #1
  407610:	e782      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  407612:	2301      	movs	r3, #1
  407614:	e780      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->margin_all_zero) def = true;
  407616:	2301      	movs	r3, #1
  407618:	e77e      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->blend_mode_all_normal) def = true;
  40761a:	2301      	movs	r3, #1
  40761c:	e77c      	b.n	407518 <_lv_obj_get_style_int+0xd4>
                    if(list->text_decor_none) def = true;
  40761e:	2301      	movs	r3, #1
  407620:	e77a      	b.n	407518 <_lv_obj_get_style_int+0xd4>
        if(res == LV_RES_OK) return value_act;
  407622:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
}
  407626:	b003      	add	sp, #12
  407628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  40762c:	4638      	mov	r0, r7
  40762e:	4b13      	ldr	r3, [pc, #76]	; (40767c <_lv_obj_get_style_int+0x238>)
  407630:	4798      	blx	r3
  407632:	4607      	mov	r7, r0
  407634:	e789      	b.n	40754a <_lv_obj_get_style_int+0x106>
    prop = prop & (~LV_STYLE_STATE_MASK);
  407636:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  40763a:	b2a4      	uxth	r4, r4
    switch(prop) {
  40763c:	2c22      	cmp	r4, #34	; 0x22
  40763e:	d00f      	beq.n	407660 <_lv_obj_get_style_int+0x21c>
  407640:	d806      	bhi.n	407650 <_lv_obj_get_style_int+0x20c>
  407642:	2c03      	cmp	r4, #3
  407644:	d010      	beq.n	407668 <_lv_obj_get_style_int+0x224>
  407646:	2c07      	cmp	r4, #7
  407648:	d10c      	bne.n	407664 <_lv_obj_get_style_int+0x220>
            return LV_IMG_ZOOM_NONE;
  40764a:	f44f 7080 	mov.w	r0, #256	; 0x100
  40764e:	e7ea      	b.n	407626 <_lv_obj_get_style_int+0x1e2>
    switch(prop) {
  407650:	2c31      	cmp	r4, #49	; 0x31
  407652:	d003      	beq.n	40765c <_lv_obj_get_style_int+0x218>
  407654:	2cc0      	cmp	r4, #192	; 0xc0
  407656:	d105      	bne.n	407664 <_lv_obj_get_style_int+0x220>
            return LV_DPI / 8;
  407658:	2012      	movs	r0, #18
  40765a:	e7e4      	b.n	407626 <_lv_obj_get_style_int+0x1e2>
            return LV_BORDER_SIDE_FULL;
  40765c:	200f      	movs	r0, #15
  40765e:	e7e2      	b.n	407626 <_lv_obj_get_style_int+0x1e2>
            return 255;
  407660:	20ff      	movs	r0, #255	; 0xff
  407662:	e7e0      	b.n	407626 <_lv_obj_get_style_int+0x1e2>
    return 0;
  407664:	2000      	movs	r0, #0
  407666:	e7de      	b.n	407626 <_lv_obj_get_style_int+0x1e2>
            return LV_DPI / 20;
  407668:	2007      	movs	r0, #7
  40766a:	e7dc      	b.n	407626 <_lv_obj_get_style_int+0x1e2>
  40766c:	00406fc9 	.word	0x00406fc9
  407670:	00406de1 	.word	0x00406de1
  407674:	0040aeb5 	.word	0x0040aeb5
  407678:	00405c0d 	.word	0x00405c0d
  40767c:	004059ad 	.word	0x004059ad

00407680 <lv_obj_get_width_fit>:
{
  407680:	b570      	push	{r4, r5, r6, lr}
  407682:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407684:	4b0e      	ldr	r3, [pc, #56]	; (4076c0 <lv_obj_get_width_fit+0x40>)
  407686:	4798      	blx	r3
  407688:	b928      	cbnz	r0, 407696 <lv_obj_get_width_fit+0x16>
  40768a:	4622      	mov	r2, r4
  40768c:	2300      	movs	r3, #0
  40768e:	480d      	ldr	r0, [pc, #52]	; (4076c4 <lv_obj_get_width_fit+0x44>)
  407690:	490d      	ldr	r1, [pc, #52]	; (4076c8 <lv_obj_get_width_fit+0x48>)
  407692:	4788      	blx	r1
  407694:	e7fe      	b.n	407694 <lv_obj_get_width_fit+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  407696:	2212      	movs	r2, #18
  407698:	2100      	movs	r1, #0
  40769a:	4620      	mov	r0, r4
  40769c:	4d0b      	ldr	r5, [pc, #44]	; (4076cc <lv_obj_get_width_fit+0x4c>)
  40769e:	47a8      	blx	r5
  4076a0:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4076a2:	2213      	movs	r2, #19
  4076a4:	2100      	movs	r1, #0
  4076a6:	4620      	mov	r0, r4
  4076a8:	47a8      	blx	r5
  4076aa:	4605      	mov	r5, r0
    return lv_obj_get_width(obj) - left - right;
  4076ac:	4620      	mov	r0, r4
  4076ae:	4b08      	ldr	r3, [pc, #32]	; (4076d0 <lv_obj_get_width_fit+0x50>)
  4076b0:	4798      	blx	r3
  4076b2:	b280      	uxth	r0, r0
  4076b4:	1b80      	subs	r0, r0, r6
  4076b6:	b280      	uxth	r0, r0
  4076b8:	1b40      	subs	r0, r0, r5
}
  4076ba:	b200      	sxth	r0, r0
  4076bc:	bd70      	pop	{r4, r5, r6, pc}
  4076be:	bf00      	nop
  4076c0:	00415e79 	.word	0x00415e79
  4076c4:	0042c168 	.word	0x0042c168
  4076c8:	00415e85 	.word	0x00415e85
  4076cc:	00407445 	.word	0x00407445
  4076d0:	00405b81 	.word	0x00405b81

004076d4 <update_style_cache_children>:
{
  4076d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4076d8:	4606      	mov	r6, r0
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  4076da:	2500      	movs	r5, #0
  4076dc:	e009      	b.n	4076f2 <update_style_cache_children+0x1e>
            list->text_space_zero = 0;
  4076de:	79e3      	ldrb	r3, [r4, #7]
  4076e0:	f36f 1345 	bfc	r3, #5, #1
  4076e4:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
  4076e6:	7963      	ldrb	r3, [r4, #5]
  4076e8:	f368 03c3 	bfi	r3, r8, #3, #1
  4076ec:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  4076ee:	3501      	adds	r5, #1
  4076f0:	b2ed      	uxtb	r5, r5
  4076f2:	2d40      	cmp	r5, #64	; 0x40
  4076f4:	d058      	beq.n	4077a8 <update_style_cache_children+0xd4>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4076f6:	4629      	mov	r1, r5
  4076f8:	4630      	mov	r0, r6
  4076fa:	4b34      	ldr	r3, [pc, #208]	; (4077cc <update_style_cache_children+0xf8>)
  4076fc:	4798      	blx	r3
        if(list == NULL) break;
  4076fe:	4604      	mov	r4, r0
  407700:	2800      	cmp	r0, #0
  407702:	d051      	beq.n	4077a8 <update_style_cache_children+0xd4>
        bool ignore_cache_ori = list->ignore_cache;
  407704:	7943      	ldrb	r3, [r0, #5]
  407706:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
  40770a:	f043 0308 	orr.w	r3, r3, #8
  40770e:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407710:	f248 020c 	movw	r2, #32780	; 0x800c
  407714:	4629      	mov	r1, r5
  407716:	4630      	mov	r0, r6
  407718:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 4077e0 <update_style_cache_children+0x10c>
  40771c:	47c8      	blx	r9
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  40771e:	28ff      	cmp	r0, #255	; 0xff
  407720:	bf14      	ite	ne
  407722:	2000      	movne	r0, #0
  407724:	2001      	moveq	r0, #1
  407726:	7963      	ldrb	r3, [r4, #5]
  407728:	f360 1345 	bfi	r3, r0, #5, #1
  40772c:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  40772e:	f248 0282 	movw	r2, #32898	; 0x8082
  407732:	4629      	mov	r1, r5
  407734:	4630      	mov	r0, r6
  407736:	4f26      	ldr	r7, [pc, #152]	; (4077d0 <update_style_cache_children+0xfc>)
  407738:	47b8      	blx	r7
  40773a:	b2c0      	uxtb	r0, r0
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  40773c:	fab0 f080 	clz	r0, r0
  407740:	0940      	lsrs	r0, r0, #5
  407742:	79e3      	ldrb	r3, [r4, #7]
  407744:	f360 1386 	bfi	r3, r0, #6, #1
  407748:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  40774a:	f248 028e 	movw	r2, #32910	; 0x808e
  40774e:	4629      	mov	r1, r5
  407750:	4630      	mov	r0, r6
  407752:	4b20      	ldr	r3, [pc, #128]	; (4077d4 <update_style_cache_children+0x100>)
  407754:	4798      	blx	r3
  407756:	4682      	mov	sl, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
  407758:	4b1f      	ldr	r3, [pc, #124]	; (4077d8 <update_style_cache_children+0x104>)
  40775a:	4798      	blx	r3
  40775c:	4582      	cmp	sl, r0
  40775e:	bf14      	ite	ne
  407760:	2000      	movne	r0, #0
  407762:	2001      	moveq	r0, #1
  407764:	79e3      	ldrb	r3, [r4, #7]
  407766:	f360 13c7 	bfi	r3, r0, #7, #1
  40776a:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  40776c:	f248 02ad 	movw	r2, #32941	; 0x80ad
  407770:	4629      	mov	r1, r5
  407772:	4630      	mov	r0, r6
  407774:	47c8      	blx	r9
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  407776:	fab0 f080 	clz	r0, r0
  40777a:	0940      	lsrs	r0, r0, #5
  40777c:	79e3      	ldrb	r3, [r4, #7]
  40777e:	f360 1304 	bfi	r3, r0, #4, #1
        list->text_space_zero = 1;
  407782:	b2db      	uxtb	r3, r3
  407784:	f043 0320 	orr.w	r3, r3, #32
  407788:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  40778a:	f248 0280 	movw	r2, #32896	; 0x8080
  40778e:	4629      	mov	r1, r5
  407790:	4630      	mov	r0, r6
  407792:	47b8      	blx	r7
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  407794:	2800      	cmp	r0, #0
  407796:	d1a2      	bne.n	4076de <update_style_cache_children+0xa>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  407798:	f248 0281 	movw	r2, #32897	; 0x8081
  40779c:	4629      	mov	r1, r5
  40779e:	4630      	mov	r0, r6
  4077a0:	47b8      	blx	r7
  4077a2:	2800      	cmp	r0, #0
  4077a4:	d09f      	beq.n	4076e6 <update_style_cache_children+0x12>
  4077a6:	e79a      	b.n	4076de <update_style_cache_children+0xa>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4077a8:	2100      	movs	r1, #0
  4077aa:	4630      	mov	r0, r6
  4077ac:	4b0b      	ldr	r3, [pc, #44]	; (4077dc <update_style_cache_children+0x108>)
  4077ae:	4798      	blx	r3
  4077b0:	4604      	mov	r4, r0
    while(child) {
  4077b2:	e007      	b.n	4077c4 <update_style_cache_children+0xf0>
        update_style_cache_children(child);
  4077b4:	4620      	mov	r0, r4
  4077b6:	f7ff ff8d 	bl	4076d4 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
  4077ba:	4621      	mov	r1, r4
  4077bc:	4630      	mov	r0, r6
  4077be:	4b07      	ldr	r3, [pc, #28]	; (4077dc <update_style_cache_children+0x108>)
  4077c0:	4798      	blx	r3
  4077c2:	4604      	mov	r4, r0
    while(child) {
  4077c4:	2c00      	cmp	r4, #0
  4077c6:	d1f5      	bne.n	4077b4 <update_style_cache_children+0xe0>
}
  4077c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4077cc:	00405c0d 	.word	0x00405c0d
  4077d0:	00407445 	.word	0x00407445
  4077d4:	0040733d 	.word	0x0040733d
  4077d8:	0041831d 	.word	0x0041831d
  4077dc:	00405a81 	.word	0x00405a81
  4077e0:	00406eb9 	.word	0x00406eb9

004077e4 <invalidate_style_cache>:
{
  4077e4:	b538      	push	{r3, r4, r5, lr}
  4077e6:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
  4077e8:	4610      	mov	r0, r2
  4077ea:	4b19      	ldr	r3, [pc, #100]	; (407850 <invalidate_style_cache+0x6c>)
  4077ec:	4798      	blx	r3
  4077ee:	b170      	cbz	r0, 40780e <invalidate_style_cache+0x2a>
  4077f0:	2400      	movs	r4, #0
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  4077f2:	2c3f      	cmp	r4, #63	; 0x3f
  4077f4:	d80c      	bhi.n	407810 <invalidate_style_cache+0x2c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4077f6:	4621      	mov	r1, r4
  4077f8:	4628      	mov	r0, r5
  4077fa:	4b16      	ldr	r3, [pc, #88]	; (407854 <invalidate_style_cache+0x70>)
  4077fc:	4798      	blx	r3
        if(list == NULL) break;
  4077fe:	b138      	cbz	r0, 407810 <invalidate_style_cache+0x2c>
        list->valid_cache = 0;
  407800:	7942      	ldrb	r2, [r0, #5]
  407802:	f36f 0282 	bfc	r2, #2, #1
  407806:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  407808:	3401      	adds	r4, #1
  40780a:	b2e4      	uxtb	r4, r4
  40780c:	e7f1      	b.n	4077f2 <invalidate_style_cache+0xe>
  40780e:	bd38      	pop	{r3, r4, r5, pc}
  407810:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  407812:	2cff      	cmp	r4, #255	; 0xff
  407814:	d00b      	beq.n	40782e <invalidate_style_cache+0x4a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407816:	4621      	mov	r1, r4
  407818:	4628      	mov	r0, r5
  40781a:	4b0e      	ldr	r3, [pc, #56]	; (407854 <invalidate_style_cache+0x70>)
  40781c:	4798      	blx	r3
        if(list == NULL) break;
  40781e:	b130      	cbz	r0, 40782e <invalidate_style_cache+0x4a>
        list->valid_cache = 0;
  407820:	7942      	ldrb	r2, [r0, #5]
  407822:	f36f 0282 	bfc	r2, #2, #1
  407826:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  407828:	3401      	adds	r4, #1
  40782a:	b2e4      	uxtb	r4, r4
  40782c:	e7f1      	b.n	407812 <invalidate_style_cache+0x2e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  40782e:	2100      	movs	r1, #0
  407830:	4628      	mov	r0, r5
  407832:	4b09      	ldr	r3, [pc, #36]	; (407858 <invalidate_style_cache+0x74>)
  407834:	4798      	blx	r3
  407836:	4604      	mov	r4, r0
    while(child) {
  407838:	e007      	b.n	40784a <invalidate_style_cache+0x66>
        update_style_cache_children(child);
  40783a:	4620      	mov	r0, r4
  40783c:	4b07      	ldr	r3, [pc, #28]	; (40785c <invalidate_style_cache+0x78>)
  40783e:	4798      	blx	r3
        child = lv_obj_get_child(obj, child);
  407840:	4621      	mov	r1, r4
  407842:	4628      	mov	r0, r5
  407844:	4b04      	ldr	r3, [pc, #16]	; (407858 <invalidate_style_cache+0x74>)
  407846:	4798      	blx	r3
  407848:	4604      	mov	r4, r0
    while(child) {
  40784a:	2c00      	cmp	r4, #0
  40784c:	d1f5      	bne.n	40783a <invalidate_style_cache+0x56>
  40784e:	bd38      	pop	{r3, r4, r5, pc}
  407850:	004053b5 	.word	0x004053b5
  407854:	00405c0d 	.word	0x00405c0d
  407858:	00405a81 	.word	0x00405a81
  40785c:	004076d5 	.word	0x004076d5

00407860 <lv_obj_refresh_style>:
{
  407860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407862:	4605      	mov	r5, r0
  407864:	460f      	mov	r7, r1
  407866:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407868:	4b37      	ldr	r3, [pc, #220]	; (407948 <lv_obj_refresh_style+0xe8>)
  40786a:	4798      	blx	r3
  40786c:	b928      	cbnz	r0, 40787a <lv_obj_refresh_style+0x1a>
  40786e:	462a      	mov	r2, r5
  407870:	2300      	movs	r3, #0
  407872:	4836      	ldr	r0, [pc, #216]	; (40794c <lv_obj_refresh_style+0xec>)
  407874:	4936      	ldr	r1, [pc, #216]	; (407950 <lv_obj_refresh_style+0xf0>)
  407876:	4788      	blx	r1
  407878:	e7fe      	b.n	407878 <lv_obj_refresh_style+0x18>
  40787a:	4606      	mov	r6, r0
    invalidate_style_cache(obj, part, prop);
  40787c:	4622      	mov	r2, r4
  40787e:	4639      	mov	r1, r7
  407880:	4628      	mov	r0, r5
  407882:	4b34      	ldr	r3, [pc, #208]	; (407954 <lv_obj_refresh_style+0xf4>)
  407884:	4798      	blx	r3
    switch(prop) {
  407886:	2c71      	cmp	r4, #113	; 0x71
  407888:	d83c      	bhi.n	407904 <lv_obj_refresh_style+0xa4>
  40788a:	2c70      	cmp	r4, #112	; 0x70
  40788c:	d20c      	bcs.n	4078a8 <lv_obj_refresh_style+0x48>
  40788e:	2c41      	cmp	r4, #65	; 0x41
  407890:	d82e      	bhi.n	4078f0 <lv_obj_refresh_style+0x90>
  407892:	2c40      	cmp	r4, #64	; 0x40
  407894:	d208      	bcs.n	4078a8 <lv_obj_refresh_style+0x48>
  407896:	2c02      	cmp	r4, #2
  407898:	d305      	bcc.n	4078a6 <lv_obj_refresh_style+0x46>
  40789a:	2c07      	cmp	r4, #7
  40789c:	d904      	bls.n	4078a8 <lv_obj_refresh_style+0x48>
  40789e:	f1a4 0310 	sub.w	r3, r4, #16
  4078a2:	2b08      	cmp	r3, #8
  4078a4:	d900      	bls.n	4078a8 <lv_obj_refresh_style+0x48>
            real_refr = false;
  4078a6:	2600      	movs	r6, #0
    if(real_refr) {
  4078a8:	2e00      	cmp	r6, #0
  4078aa:	d048      	beq.n	40793e <lv_obj_refresh_style+0xde>
        lv_obj_invalidate(obj);
  4078ac:	4628      	mov	r0, r5
  4078ae:	4b2a      	ldr	r3, [pc, #168]	; (407958 <lv_obj_refresh_style+0xf8>)
  4078b0:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
  4078b2:	69eb      	ldr	r3, [r5, #28]
  4078b4:	2200      	movs	r2, #0
  4078b6:	2104      	movs	r1, #4
  4078b8:	4628      	mov	r0, r5
  4078ba:	4798      	blx	r3
        switch(prop) {
  4078bc:	2c15      	cmp	r4, #21
  4078be:	d309      	bcc.n	4078d4 <lv_obj_refresh_style+0x74>
  4078c0:	2c18      	cmp	r4, #24
  4078c2:	d901      	bls.n	4078c8 <lv_obj_refresh_style+0x68>
  4078c4:	2cff      	cmp	r4, #255	; 0xff
  4078c6:	d105      	bne.n	4078d4 <lv_obj_refresh_style+0x74>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
  4078c8:	6828      	ldr	r0, [r5, #0]
  4078ca:	b118      	cbz	r0, 4078d4 <lv_obj_refresh_style+0x74>
  4078cc:	69c3      	ldr	r3, [r0, #28]
  4078ce:	2200      	movs	r2, #0
  4078d0:	2101      	movs	r1, #1
  4078d2:	4798      	blx	r3
        lv_obj_invalidate(obj);
  4078d4:	4628      	mov	r0, r5
  4078d6:	4b20      	ldr	r3, [pc, #128]	; (407958 <lv_obj_refresh_style+0xf8>)
  4078d8:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
  4078da:	0be3      	lsrs	r3, r4, #15
  4078dc:	2cff      	cmp	r4, #255	; 0xff
  4078de:	bf14      	ite	ne
  4078e0:	461c      	movne	r4, r3
  4078e2:	f043 0401 	orreq.w	r4, r3, #1
  4078e6:	b36c      	cbz	r4, 407944 <lv_obj_refresh_style+0xe4>
  4078e8:	4628      	mov	r0, r5
  4078ea:	4b1c      	ldr	r3, [pc, #112]	; (40795c <lv_obj_refresh_style+0xfc>)
  4078ec:	4798      	blx	r3
  4078ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(prop) {
  4078f0:	2c53      	cmp	r4, #83	; 0x53
  4078f2:	d804      	bhi.n	4078fe <lv_obj_refresh_style+0x9e>
  4078f4:	2c50      	cmp	r4, #80	; 0x50
  4078f6:	d2d7      	bcs.n	4078a8 <lv_obj_refresh_style+0x48>
  4078f8:	2c4c      	cmp	r4, #76	; 0x4c
  4078fa:	d1d4      	bne.n	4078a6 <lv_obj_refresh_style+0x46>
  4078fc:	e7d4      	b.n	4078a8 <lv_obj_refresh_style+0x48>
  4078fe:	2c5c      	cmp	r4, #92	; 0x5c
  407900:	d1d1      	bne.n	4078a6 <lv_obj_refresh_style+0x46>
  407902:	e7d1      	b.n	4078a8 <lv_obj_refresh_style+0x48>
  407904:	2c7f      	cmp	r4, #127	; 0x7f
  407906:	d90c      	bls.n	407922 <lv_obj_refresh_style+0xc2>
  407908:	f248 0381 	movw	r3, #32897	; 0x8081
  40790c:	429c      	cmp	r4, r3
  40790e:	d811      	bhi.n	407934 <lv_obj_refresh_style+0xd4>
  407910:	f248 0380 	movw	r3, #32896	; 0x8080
  407914:	429c      	cmp	r4, r3
  407916:	d2c7      	bcs.n	4078a8 <lv_obj_refresh_style+0x48>
  407918:	2c90      	cmp	r4, #144	; 0x90
  40791a:	d0c5      	beq.n	4078a8 <lv_obj_refresh_style+0x48>
  40791c:	2cff      	cmp	r4, #255	; 0xff
  40791e:	d1c2      	bne.n	4078a6 <lv_obj_refresh_style+0x46>
  407920:	e7c2      	b.n	4078a8 <lv_obj_refresh_style+0x48>
  407922:	2c7e      	cmp	r4, #126	; 0x7e
  407924:	d2c0      	bcs.n	4078a8 <lv_obj_refresh_style+0x48>
  407926:	2c73      	cmp	r4, #115	; 0x73
  407928:	d3bd      	bcc.n	4078a6 <lv_obj_refresh_style+0x46>
  40792a:	2c75      	cmp	r4, #117	; 0x75
  40792c:	d9bc      	bls.n	4078a8 <lv_obj_refresh_style+0x48>
  40792e:	2c7c      	cmp	r4, #124	; 0x7c
  407930:	d1b9      	bne.n	4078a6 <lv_obj_refresh_style+0x46>
  407932:	e7b9      	b.n	4078a8 <lv_obj_refresh_style+0x48>
  407934:	f248 038e 	movw	r3, #32910	; 0x808e
  407938:	429c      	cmp	r4, r3
  40793a:	d1b4      	bne.n	4078a6 <lv_obj_refresh_style+0x46>
  40793c:	e7b4      	b.n	4078a8 <lv_obj_refresh_style+0x48>
        lv_obj_invalidate(obj);
  40793e:	4628      	mov	r0, r5
  407940:	4b05      	ldr	r3, [pc, #20]	; (407958 <lv_obj_refresh_style+0xf8>)
  407942:	4798      	blx	r3
  407944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407946:	bf00      	nop
  407948:	00415e79 	.word	0x00415e79
  40794c:	0042c168 	.word	0x0042c168
  407950:	00415e85 	.word	0x00415e85
  407954:	004077e5 	.word	0x004077e5
  407958:	00405f59 	.word	0x00405f59
  40795c:	004066dd 	.word	0x004066dd

00407960 <lv_obj_reset_style_list>:
{
  407960:	b538      	push	{r3, r4, r5, lr}
  407962:	4604      	mov	r4, r0
  407964:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
  407966:	4b04      	ldr	r3, [pc, #16]	; (407978 <lv_obj_reset_style_list+0x18>)
  407968:	4798      	blx	r3
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  40796a:	22ff      	movs	r2, #255	; 0xff
  40796c:	4629      	mov	r1, r5
  40796e:	4620      	mov	r0, r4
  407970:	4b02      	ldr	r3, [pc, #8]	; (40797c <lv_obj_reset_style_list+0x1c>)
  407972:	4798      	blx	r3
  407974:	bd38      	pop	{r3, r4, r5, pc}
  407976:	bf00      	nop
  407978:	00405cd5 	.word	0x00405cd5
  40797c:	00407861 	.word	0x00407861

00407980 <_lv_obj_set_style_local_int>:
{
  407980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407982:	4605      	mov	r5, r0
  407984:	460e      	mov	r6, r1
  407986:	4614      	mov	r4, r2
  407988:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  40798a:	4b09      	ldr	r3, [pc, #36]	; (4079b0 <_lv_obj_set_style_local_int+0x30>)
  40798c:	4798      	blx	r3
    _lv_style_list_set_local_int(style_dsc, prop, value);
  40798e:	463a      	mov	r2, r7
  407990:	4621      	mov	r1, r4
  407992:	4b08      	ldr	r3, [pc, #32]	; (4079b4 <_lv_obj_set_style_local_int+0x34>)
  407994:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  407996:	2300      	movs	r3, #0
  407998:	4622      	mov	r2, r4
  40799a:	4631      	mov	r1, r6
  40799c:	4628      	mov	r0, r5
  40799e:	4f06      	ldr	r7, [pc, #24]	; (4079b8 <_lv_obj_set_style_local_int+0x38>)
  4079a0:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  4079a2:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4079a6:	4631      	mov	r1, r6
  4079a8:	4628      	mov	r0, r5
  4079aa:	4b04      	ldr	r3, [pc, #16]	; (4079bc <_lv_obj_set_style_local_int+0x3c>)
  4079ac:	4798      	blx	r3
  4079ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4079b0:	00405c0d 	.word	0x00405c0d
  4079b4:	0040ae45 	.word	0x0040ae45
  4079b8:	00405c3d 	.word	0x00405c3d
  4079bc:	00407861 	.word	0x00407861

004079c0 <_lv_obj_set_style_local_color>:
{
  4079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4079c2:	4605      	mov	r5, r0
  4079c4:	460e      	mov	r6, r1
  4079c6:	4614      	mov	r4, r2
  4079c8:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  4079ca:	4b09      	ldr	r3, [pc, #36]	; (4079f0 <_lv_obj_set_style_local_color+0x30>)
  4079cc:	4798      	blx	r3
    _lv_style_list_set_local_color(style_dsc, prop, color);
  4079ce:	463a      	mov	r2, r7
  4079d0:	4621      	mov	r1, r4
  4079d2:	4b08      	ldr	r3, [pc, #32]	; (4079f4 <_lv_obj_set_style_local_color+0x34>)
  4079d4:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  4079d6:	2300      	movs	r3, #0
  4079d8:	4622      	mov	r2, r4
  4079da:	4631      	mov	r1, r6
  4079dc:	4628      	mov	r0, r5
  4079de:	4f06      	ldr	r7, [pc, #24]	; (4079f8 <_lv_obj_set_style_local_color+0x38>)
  4079e0:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  4079e2:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4079e6:	4631      	mov	r1, r6
  4079e8:	4628      	mov	r0, r5
  4079ea:	4b04      	ldr	r3, [pc, #16]	; (4079fc <_lv_obj_set_style_local_color+0x3c>)
  4079ec:	4798      	blx	r3
  4079ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4079f0:	00405c0d 	.word	0x00405c0d
  4079f4:	0040ae7d 	.word	0x0040ae7d
  4079f8:	00405c3d 	.word	0x00405c3d
  4079fc:	00407861 	.word	0x00407861

00407a00 <_lv_obj_set_style_local_opa>:
{
  407a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407a02:	4605      	mov	r5, r0
  407a04:	460e      	mov	r6, r1
  407a06:	4614      	mov	r4, r2
  407a08:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407a0a:	4b09      	ldr	r3, [pc, #36]	; (407a30 <_lv_obj_set_style_local_opa+0x30>)
  407a0c:	4798      	blx	r3
    _lv_style_list_set_local_opa(style_dsc, prop, opa);
  407a0e:	463a      	mov	r2, r7
  407a10:	4621      	mov	r1, r4
  407a12:	4b08      	ldr	r3, [pc, #32]	; (407a34 <_lv_obj_set_style_local_opa+0x34>)
  407a14:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  407a16:	2300      	movs	r3, #0
  407a18:	4622      	mov	r2, r4
  407a1a:	4631      	mov	r1, r6
  407a1c:	4628      	mov	r0, r5
  407a1e:	4f06      	ldr	r7, [pc, #24]	; (407a38 <_lv_obj_set_style_local_opa+0x38>)
  407a20:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  407a22:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407a26:	4631      	mov	r1, r6
  407a28:	4628      	mov	r0, r5
  407a2a:	4b04      	ldr	r3, [pc, #16]	; (407a3c <_lv_obj_set_style_local_opa+0x3c>)
  407a2c:	4798      	blx	r3
  407a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a30:	00405c0d 	.word	0x00405c0d
  407a34:	0040ae61 	.word	0x0040ae61
  407a38:	00405c3d 	.word	0x00405c3d
  407a3c:	00407861 	.word	0x00407861

00407a40 <_lv_obj_set_style_local_ptr>:
{
  407a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407a42:	4605      	mov	r5, r0
  407a44:	460e      	mov	r6, r1
  407a46:	4614      	mov	r4, r2
  407a48:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407a4a:	4b09      	ldr	r3, [pc, #36]	; (407a70 <_lv_obj_set_style_local_ptr+0x30>)
  407a4c:	4798      	blx	r3
    _lv_style_list_set_local_ptr(style_dsc, prop, value);
  407a4e:	463a      	mov	r2, r7
  407a50:	4621      	mov	r1, r4
  407a52:	4b08      	ldr	r3, [pc, #32]	; (407a74 <_lv_obj_set_style_local_ptr+0x34>)
  407a54:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  407a56:	2300      	movs	r3, #0
  407a58:	4622      	mov	r2, r4
  407a5a:	4631      	mov	r1, r6
  407a5c:	4628      	mov	r0, r5
  407a5e:	4f06      	ldr	r7, [pc, #24]	; (407a78 <_lv_obj_set_style_local_ptr+0x38>)
  407a60:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  407a62:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407a66:	4631      	mov	r1, r6
  407a68:	4628      	mov	r0, r5
  407a6a:	4b04      	ldr	r3, [pc, #16]	; (407a7c <_lv_obj_set_style_local_ptr+0x3c>)
  407a6c:	4798      	blx	r3
  407a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a70:	00405c0d 	.word	0x00405c0d
  407a74:	0040ae99 	.word	0x0040ae99
  407a78:	00405c3d 	.word	0x00405c3d
  407a7c:	00407861 	.word	0x00407861

00407a80 <report_style_mod_core>:
{
  407a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407a82:	4604      	mov	r4, r0
  407a84:	460e      	mov	r6, r1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407a86:	2500      	movs	r5, #0
  407a88:	e028      	b.n	407adc <report_style_mod_core+0x5c>
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
  407a8a:	1c59      	adds	r1, r3, #1
  407a8c:	b2c9      	uxtb	r1, r1
  407a8e:	e012      	b.n	407ab6 <report_style_mod_core+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407a90:	2200      	movs	r2, #0
            if(_class == style || style == NULL) {
  407a92:	2c00      	cmp	r4, #0
  407a94:	bf18      	it	ne
  407a96:	4294      	cmpne	r4, r2
  407a98:	d019      	beq.n	407ace <report_style_mod_core+0x4e>
        for(ci = 0; ci < list->style_cnt; ci++) {
  407a9a:	3301      	adds	r3, #1
  407a9c:	b2db      	uxtb	r3, r3
  407a9e:	793a      	ldrb	r2, [r7, #4]
  407aa0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  407aa4:	4293      	cmp	r3, r2
  407aa6:	da17      	bge.n	407ad8 <report_style_mod_core+0x58>
    if(list->has_trans && list->skip_trans) id++;
  407aa8:	88b9      	ldrh	r1, [r7, #4]
  407aaa:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  407aae:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  407ab2:	d0ea      	beq.n	407a8a <report_style_mod_core+0xa>
  407ab4:	4619      	mov	r1, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407ab6:	7938      	ldrb	r0, [r7, #4]
  407ab8:	f010 0f3f 	tst.w	r0, #63	; 0x3f
  407abc:	d0e8      	beq.n	407a90 <report_style_mod_core+0x10>
  407abe:	428a      	cmp	r2, r1
  407ac0:	dd03      	ble.n	407aca <report_style_mod_core+0x4a>
    return list->style_list[id];
  407ac2:	683a      	ldr	r2, [r7, #0]
  407ac4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  407ac8:	e7e3      	b.n	407a92 <report_style_mod_core+0x12>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407aca:	2200      	movs	r2, #0
  407acc:	e7e1      	b.n	407a92 <report_style_mod_core+0x12>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  407ace:	22ff      	movs	r2, #255	; 0xff
  407ad0:	4629      	mov	r1, r5
  407ad2:	4630      	mov	r0, r6
  407ad4:	4b0f      	ldr	r3, [pc, #60]	; (407b14 <report_style_mod_core+0x94>)
  407ad6:	4798      	blx	r3
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407ad8:	3501      	adds	r5, #1
  407ada:	b2ed      	uxtb	r5, r5
  407adc:	2d40      	cmp	r5, #64	; 0x40
  407ade:	d007      	beq.n	407af0 <report_style_mod_core+0x70>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407ae0:	4629      	mov	r1, r5
  407ae2:	4630      	mov	r0, r6
  407ae4:	4b0c      	ldr	r3, [pc, #48]	; (407b18 <report_style_mod_core+0x98>)
  407ae6:	4798      	blx	r3
        if(list == NULL) break;
  407ae8:	4607      	mov	r7, r0
  407aea:	b108      	cbz	r0, 407af0 <report_style_mod_core+0x70>
  407aec:	2300      	movs	r3, #0
  407aee:	e7d6      	b.n	407a9e <report_style_mod_core+0x1e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  407af0:	2100      	movs	r1, #0
  407af2:	4630      	mov	r0, r6
  407af4:	4b09      	ldr	r3, [pc, #36]	; (407b1c <report_style_mod_core+0x9c>)
  407af6:	4798      	blx	r3
  407af8:	4605      	mov	r5, r0
    while(child) {
  407afa:	e008      	b.n	407b0e <report_style_mod_core+0x8e>
        report_style_mod_core(style, child);
  407afc:	4629      	mov	r1, r5
  407afe:	4620      	mov	r0, r4
  407b00:	f7ff ffbe 	bl	407a80 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
  407b04:	4629      	mov	r1, r5
  407b06:	4630      	mov	r0, r6
  407b08:	4b04      	ldr	r3, [pc, #16]	; (407b1c <report_style_mod_core+0x9c>)
  407b0a:	4798      	blx	r3
  407b0c:	4605      	mov	r5, r0
    while(child) {
  407b0e:	2d00      	cmp	r5, #0
  407b10:	d1f4      	bne.n	407afc <report_style_mod_core+0x7c>
}
  407b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407b14:	00407861 	.word	0x00407861
  407b18:	00405c0d 	.word	0x00405c0d
  407b1c:	00405a81 	.word	0x00405a81

00407b20 <lv_obj_report_style_mod>:
{
  407b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b22:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
  407b24:	2000      	movs	r0, #0
  407b26:	4b0e      	ldr	r3, [pc, #56]	; (407b60 <lv_obj_report_style_mod+0x40>)
  407b28:	4798      	blx	r3
  407b2a:	4607      	mov	r7, r0
    while(d) {
  407b2c:	e00e      	b.n	407b4c <lv_obj_report_style_mod+0x2c>
            report_style_mod_core(style, i);
  407b2e:	4621      	mov	r1, r4
  407b30:	4630      	mov	r0, r6
  407b32:	4b0c      	ldr	r3, [pc, #48]	; (407b64 <lv_obj_report_style_mod+0x44>)
  407b34:	4798      	blx	r3
        _LV_LL_READ(d->scr_ll, i) {
  407b36:	4621      	mov	r1, r4
  407b38:	4628      	mov	r0, r5
  407b3a:	4b0b      	ldr	r3, [pc, #44]	; (407b68 <lv_obj_report_style_mod+0x48>)
  407b3c:	4798      	blx	r3
  407b3e:	4604      	mov	r4, r0
  407b40:	2c00      	cmp	r4, #0
  407b42:	d1f4      	bne.n	407b2e <lv_obj_report_style_mod+0xe>
        d = lv_disp_get_next(d);
  407b44:	4638      	mov	r0, r7
  407b46:	4b06      	ldr	r3, [pc, #24]	; (407b60 <lv_obj_report_style_mod+0x40>)
  407b48:	4798      	blx	r3
  407b4a:	4607      	mov	r7, r0
    while(d) {
  407b4c:	b137      	cbz	r7, 407b5c <lv_obj_report_style_mod+0x3c>
        _LV_LL_READ(d->scr_ll, i) {
  407b4e:	f107 0538 	add.w	r5, r7, #56	; 0x38
  407b52:	4628      	mov	r0, r5
  407b54:	4b05      	ldr	r3, [pc, #20]	; (407b6c <lv_obj_report_style_mod+0x4c>)
  407b56:	4798      	blx	r3
  407b58:	4604      	mov	r4, r0
  407b5a:	e7f1      	b.n	407b40 <lv_obj_report_style_mod+0x20>
}
  407b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407b5e:	bf00      	nop
  407b60:	00414dd1 	.word	0x00414dd1
  407b64:	00407a81 	.word	0x00407a81
  407b68:	0041619d 	.word	0x0041619d
  407b6c:	00416189 	.word	0x00416189

00407b70 <trans_anim_cb>:
{
  407b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407b74:	4604      	mov	r4, r0
  407b76:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  407b78:	7981      	ldrb	r1, [r0, #6]
  407b7a:	6800      	ldr	r0, [r0, #0]
  407b7c:	4b4b      	ldr	r3, [pc, #300]	; (407cac <trans_anim_cb+0x13c>)
  407b7e:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
  407b80:	4b4b      	ldr	r3, [pc, #300]	; (407cb0 <trans_anim_cb+0x140>)
  407b82:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
  407b84:	88a1      	ldrh	r1, [r4, #4]
  407b86:	f001 030f 	and.w	r3, r1, #15
  407b8a:	2b08      	cmp	r3, #8
  407b8c:	dc1c      	bgt.n	407bc8 <trans_anim_cb+0x58>
        if(v == 0) x = tr->start_value._int;
  407b8e:	b955      	cbnz	r5, 407ba6 <trans_anim_cb+0x36>
  407b90:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
  407b94:	4b47      	ldr	r3, [pc, #284]	; (407cb4 <trans_anim_cb+0x144>)
  407b96:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
  407b98:	88a2      	ldrh	r2, [r4, #4]
  407b9a:	79a1      	ldrb	r1, [r4, #6]
  407b9c:	6820      	ldr	r0, [r4, #0]
  407b9e:	4b46      	ldr	r3, [pc, #280]	; (407cb8 <trans_anim_cb+0x148>)
  407ba0:	4798      	blx	r3
  407ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(v == 255) x = tr->end_value._int;
  407ba6:	2dff      	cmp	r5, #255	; 0xff
  407ba8:	d00b      	beq.n	407bc2 <trans_anim_cb+0x52>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
  407baa:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
  407bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407bb2:	1a9b      	subs	r3, r3, r2
  407bb4:	fb03 f505 	mul.w	r5, r3, r5
  407bb8:	122d      	asrs	r5, r5, #8
  407bba:	fa15 f282 	uxtah	r2, r5, r2
  407bbe:	b212      	sxth	r2, r2
  407bc0:	e7e8      	b.n	407b94 <trans_anim_cb+0x24>
        else if(v == 255) x = tr->end_value._int;
  407bc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407bc6:	e7e5      	b.n	407b94 <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407bc8:	2b0b      	cmp	r3, #11
  407bca:	dc50      	bgt.n	407c6e <trans_anim_cb+0xfe>
        if(v <= 0) x = tr->start_value._color;
  407bcc:	2d00      	cmp	r5, #0
  407bce:	dd05      	ble.n	407bdc <trans_anim_cb+0x6c>
        else if(v >= 255) x = tr->end_value._color;
  407bd0:	2dfe      	cmp	r5, #254	; 0xfe
  407bd2:	dd05      	ble.n	407be0 <trans_anim_cb+0x70>
  407bd4:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
  407bd6:	4b39      	ldr	r3, [pc, #228]	; (407cbc <trans_anim_cb+0x14c>)
  407bd8:	4798      	blx	r3
  407bda:	e7dd      	b.n	407b98 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._color;
  407bdc:	8922      	ldrh	r2, [r4, #8]
  407bde:	e7fa      	b.n	407bd6 <trans_anim_cb+0x66>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
  407be0:	b2ed      	uxtb	r5, r5
  407be2:	89a7      	ldrh	r7, [r4, #12]
  407be4:	8926      	ldrh	r6, [r4, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  407be6:	f3c7 03c4 	ubfx	r3, r7, #3, #5
  407bea:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  407bee:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
  407bf2:	fb0e f202 	mul.w	r2, lr, r2
  407bf6:	fb05 2303 	mla	r3, r5, r3, r2
  407bfa:	3380      	adds	r3, #128	; 0x80
  407bfc:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  407c00:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  407c04:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  407c08:	f04f 0200 	mov.w	r2, #0
  407c0c:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407c10:	f007 0c07 	and.w	ip, r7, #7
  407c14:	f3c7 3342 	ubfx	r3, r7, #13, #3
  407c18:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  407c1c:	f006 0807 	and.w	r8, r6, #7
  407c20:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  407c24:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  407c28:	fb0c fc0e 	mul.w	ip, ip, lr
  407c2c:	fb03 c305 	mla	r3, r3, r5, ip
  407c30:	3380      	adds	r3, #128	; 0x80
  407c32:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  407c36:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  407c3a:	f3c3 6c82 	ubfx	ip, r3, #26, #3
  407c3e:	f36c 0202 	bfi	r2, ip, #0, #3
  407c42:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  407c46:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407c4a:	f3c7 2704 	ubfx	r7, r7, #8, #5
  407c4e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  407c52:	fb06 fe0e 	mul.w	lr, r6, lr
  407c56:	fb07 e505 	mla	r5, r7, r5, lr
  407c5a:	3580      	adds	r5, #128	; 0x80
  407c5c:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  407c60:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  407c64:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  407c68:	f365 220c 	bfi	r2, r5, #8, #5
  407c6c:	e7b3      	b.n	407bd6 <trans_anim_cb+0x66>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407c6e:	2b0d      	cmp	r3, #13
  407c70:	dc13      	bgt.n	407c9a <trans_anim_cb+0x12a>
        if(v <= 0) x = tr->start_value._opa;
  407c72:	2d00      	cmp	r5, #0
  407c74:	dd05      	ble.n	407c82 <trans_anim_cb+0x112>
        else if(v >= 255) x = tr->end_value._opa;
  407c76:	2dfe      	cmp	r5, #254	; 0xfe
  407c78:	dd05      	ble.n	407c86 <trans_anim_cb+0x116>
  407c7a:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
  407c7c:	4b10      	ldr	r3, [pc, #64]	; (407cc0 <trans_anim_cb+0x150>)
  407c7e:	4798      	blx	r3
  407c80:	e78a      	b.n	407b98 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._opa;
  407c82:	7a22      	ldrb	r2, [r4, #8]
  407c84:	e7fa      	b.n	407c7c <trans_anim_cb+0x10c>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
  407c86:	7a22      	ldrb	r2, [r4, #8]
  407c88:	7b23      	ldrb	r3, [r4, #12]
  407c8a:	1a9b      	subs	r3, r3, r2
  407c8c:	fb03 f505 	mul.w	r5, r3, r5
  407c90:	f3c5 2507 	ubfx	r5, r5, #8, #8
  407c94:	442a      	add	r2, r5
  407c96:	b2d2      	uxtb	r2, r2
  407c98:	e7f0      	b.n	407c7c <trans_anim_cb+0x10c>
        if(v < 128) x = tr->start_value._ptr;
  407c9a:	2d7f      	cmp	r5, #127	; 0x7f
  407c9c:	dc03      	bgt.n	407ca6 <trans_anim_cb+0x136>
  407c9e:	68a2      	ldr	r2, [r4, #8]
        _lv_style_set_ptr(style, tr->prop, x);
  407ca0:	4b08      	ldr	r3, [pc, #32]	; (407cc4 <trans_anim_cb+0x154>)
  407ca2:	4798      	blx	r3
  407ca4:	e778      	b.n	407b98 <trans_anim_cb+0x28>
        else x = tr->end_value._ptr;
  407ca6:	68e2      	ldr	r2, [r4, #12]
  407ca8:	e7fa      	b.n	407ca0 <trans_anim_cb+0x130>
  407caa:	bf00      	nop
  407cac:	00405c0d 	.word	0x00405c0d
  407cb0:	0040ac2d 	.word	0x0040ac2d
  407cb4:	0040a1b9 	.word	0x0040a1b9
  407cb8:	00407861 	.word	0x00407861
  407cbc:	0040a349 	.word	0x0040a349
  407cc0:	0040a4d9 	.word	0x0040a4d9
  407cc4:	0040a669 	.word	0x0040a669

00407cc8 <trans_anim_start_cb>:
{
  407cc8:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
  407cca:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
  407ccc:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407cce:	f005 030f 	and.w	r3, r5, #15
  407cd2:	2b08      	cmp	r3, #8
  407cd4:	dd13      	ble.n	407cfe <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407cd6:	2b0b      	cmp	r3, #11
  407cd8:	dd18      	ble.n	407d0c <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407cda:	2b0d      	cmp	r3, #13
  407cdc:	dd1d      	ble.n	407d1a <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
  407cde:	462a      	mov	r2, r5
  407ce0:	79a1      	ldrb	r1, [r4, #6]
  407ce2:	6820      	ldr	r0, [r4, #0]
  407ce4:	4b10      	ldr	r3, [pc, #64]	; (407d28 <trans_anim_start_cb+0x60>)
  407ce6:	4798      	blx	r3
  407ce8:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
  407cea:	2300      	movs	r3, #0
  407cec:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
  407cee:	4623      	mov	r3, r4
  407cf0:	462a      	mov	r2, r5
  407cf2:	79a1      	ldrb	r1, [r4, #6]
  407cf4:	6820      	ldr	r0, [r4, #0]
  407cf6:	4e0d      	ldr	r6, [pc, #52]	; (407d2c <trans_anim_start_cb+0x64>)
  407cf8:	47b0      	blx	r6
    tr->prop = prop_tmp;
  407cfa:	80a5      	strh	r5, [r4, #4]
  407cfc:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
  407cfe:	462a      	mov	r2, r5
  407d00:	79a1      	ldrb	r1, [r4, #6]
  407d02:	6820      	ldr	r0, [r4, #0]
  407d04:	4b0a      	ldr	r3, [pc, #40]	; (407d30 <trans_anim_start_cb+0x68>)
  407d06:	4798      	blx	r3
  407d08:	8120      	strh	r0, [r4, #8]
  407d0a:	e7ee      	b.n	407cea <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
  407d0c:	462a      	mov	r2, r5
  407d0e:	79a1      	ldrb	r1, [r4, #6]
  407d10:	6820      	ldr	r0, [r4, #0]
  407d12:	4b08      	ldr	r3, [pc, #32]	; (407d34 <trans_anim_start_cb+0x6c>)
  407d14:	4798      	blx	r3
  407d16:	8120      	strh	r0, [r4, #8]
  407d18:	e7e7      	b.n	407cea <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
  407d1a:	462a      	mov	r2, r5
  407d1c:	79a1      	ldrb	r1, [r4, #6]
  407d1e:	6820      	ldr	r0, [r4, #0]
  407d20:	4b05      	ldr	r3, [pc, #20]	; (407d38 <trans_anim_start_cb+0x70>)
  407d22:	4798      	blx	r3
  407d24:	7220      	strb	r0, [r4, #8]
  407d26:	e7e0      	b.n	407cea <trans_anim_start_cb+0x22>
  407d28:	0040733d 	.word	0x0040733d
  407d2c:	00405c3d 	.word	0x00405c3d
  407d30:	00407445 	.word	0x00407445
  407d34:	00406e31 	.word	0x00406e31
  407d38:	00406eb9 	.word	0x00406eb9

00407d3c <trans_create>:
{
  407d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d40:	b085      	sub	sp, #20
  407d42:	4604      	mov	r4, r0
  407d44:	460d      	mov	r5, r1
  407d46:	4617      	mov	r7, r2
  407d48:	4699      	mov	r9, r3
  407d4a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  407d4e:	4611      	mov	r1, r2
  407d50:	4bab      	ldr	r3, [pc, #684]	; (408000 <trans_create+0x2c4>)
  407d52:	4798      	blx	r3
  407d54:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
  407d56:	4bab      	ldr	r3, [pc, #684]	; (408004 <trans_create+0x2c8>)
  407d58:	4798      	blx	r3
  407d5a:	9000      	str	r0, [sp, #0]
    bool cache_ori = style_list->ignore_cache;
  407d5c:	f896 a005 	ldrb.w	sl, [r6, #5]
  407d60:	f3ca 0ac0 	ubfx	sl, sl, #3, #1
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407d64:	f005 030f 	and.w	r3, r5, #15
  407d68:	2b08      	cmp	r3, #8
  407d6a:	dd41      	ble.n	407df0 <trans_create+0xb4>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407d6c:	2b0b      	cmp	r3, #11
  407d6e:	f340 80b2 	ble.w	407ed6 <trans_create+0x19a>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407d72:	2b0d      	cmp	r3, #13
  407d74:	f300 80fb 	bgt.w	407f6e <trans_create+0x232>
        style_list->skip_trans = 1;
  407d78:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407d7a:	f043 0309 	orr.w	r3, r3, #9
  407d7e:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407d80:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
  407d84:	462a      	mov	r2, r5
  407d86:	4639      	mov	r1, r7
  407d88:	4620      	mov	r0, r4
  407d8a:	f8df b27c 	ldr.w	fp, [pc, #636]	; 408008 <trans_create+0x2cc>
  407d8e:	47d8      	blx	fp
  407d90:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  407d92:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
  407d96:	462a      	mov	r2, r5
  407d98:	4639      	mov	r1, r7
  407d9a:	4620      	mov	r0, r4
  407d9c:	47d8      	blx	fp
  407d9e:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407da0:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407da2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407da6:	f36a 03c3 	bfi	r3, sl, #3, #1
  407daa:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
  407dac:	9b01      	ldr	r3, [sp, #4]
  407dae:	4283      	cmp	r3, r0
  407db0:	f000 8123 	beq.w	407ffa <trans_create+0x2be>
        obj->state = prev_state;
  407db4:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
  407db8:	462a      	mov	r2, r5
  407dba:	4639      	mov	r1, r7
  407dbc:	4620      	mov	r0, r4
  407dbe:	4b92      	ldr	r3, [pc, #584]	; (408008 <trans_create+0x2cc>)
  407dc0:	4798      	blx	r3
  407dc2:	4606      	mov	r6, r0
        obj->state = new_state;
  407dc4:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
  407dc8:	4602      	mov	r2, r0
  407dca:	4629      	mov	r1, r5
  407dcc:	9800      	ldr	r0, [sp, #0]
  407dce:	4b8f      	ldr	r3, [pc, #572]	; (40800c <trans_create+0x2d0>)
  407dd0:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407dd2:	488f      	ldr	r0, [pc, #572]	; (408010 <trans_create+0x2d4>)
  407dd4:	4b8f      	ldr	r3, [pc, #572]	; (408014 <trans_create+0x2d8>)
  407dd6:	4798      	blx	r3
  407dd8:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407dda:	4b8f      	ldr	r3, [pc, #572]	; (408018 <trans_create+0x2dc>)
  407ddc:	4798      	blx	r3
  407dde:	2800      	cmp	r0, #0
  407de0:	f000 80bf 	beq.w	407f62 <trans_create+0x226>
        if(tr == NULL) return NULL;
  407de4:	2c00      	cmp	r4, #0
  407de6:	d03d      	beq.n	407e64 <trans_create+0x128>
        tr->start_value._opa = o1;
  407de8:	7226      	strb	r6, [r4, #8]
        tr->end_value._opa = o2;
  407dea:	f884 b00c 	strb.w	fp, [r4, #12]
  407dee:	e039      	b.n	407e64 <trans_create+0x128>
        style_list->skip_trans = 1;
  407df0:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407df2:	f043 0309 	orr.w	r3, r3, #9
  407df6:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407df8:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
  407dfc:	462a      	mov	r2, r5
  407dfe:	4639      	mov	r1, r7
  407e00:	4620      	mov	r0, r4
  407e02:	f8df b218 	ldr.w	fp, [pc, #536]	; 40801c <trans_create+0x2e0>
  407e06:	47d8      	blx	fp
  407e08:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  407e0a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
  407e0e:	462a      	mov	r2, r5
  407e10:	4639      	mov	r1, r7
  407e12:	4620      	mov	r0, r4
  407e14:	47d8      	blx	fp
  407e16:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407e18:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407e1a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407e1e:	f36a 03c3 	bfi	r3, sl, #3, #1
  407e22:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
  407e24:	9b01      	ldr	r3, [sp, #4]
  407e26:	4283      	cmp	r3, r0
  407e28:	f000 80e5 	beq.w	407ff6 <trans_create+0x2ba>
        obj->state = prev_state;
  407e2c:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
  407e30:	462a      	mov	r2, r5
  407e32:	4639      	mov	r1, r7
  407e34:	4620      	mov	r0, r4
  407e36:	4b79      	ldr	r3, [pc, #484]	; (40801c <trans_create+0x2e0>)
  407e38:	4798      	blx	r3
  407e3a:	4606      	mov	r6, r0
        obj->state = new_state;
  407e3c:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
  407e40:	4602      	mov	r2, r0
  407e42:	4629      	mov	r1, r5
  407e44:	9800      	ldr	r0, [sp, #0]
  407e46:	4b76      	ldr	r3, [pc, #472]	; (408020 <trans_create+0x2e4>)
  407e48:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
  407e4a:	2d01      	cmp	r5, #1
  407e4c:	d00e      	beq.n	407e6c <trans_create+0x130>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407e4e:	4870      	ldr	r0, [pc, #448]	; (408010 <trans_create+0x2d4>)
  407e50:	4b70      	ldr	r3, [pc, #448]	; (408014 <trans_create+0x2d8>)
  407e52:	4798      	blx	r3
  407e54:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407e56:	4b70      	ldr	r3, [pc, #448]	; (408018 <trans_create+0x2dc>)
  407e58:	4798      	blx	r3
  407e5a:	b3b0      	cbz	r0, 407eca <trans_create+0x18e>
        if(tr == NULL) return NULL;
  407e5c:	b114      	cbz	r4, 407e64 <trans_create+0x128>
        tr->start_value._int = int1;
  407e5e:	8126      	strh	r6, [r4, #8]
        tr->end_value._int = int2;
  407e60:	f8a4 b00c 	strh.w	fp, [r4, #12]
}
  407e64:	4620      	mov	r0, r4
  407e66:	b005      	add	sp, #20
  407e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
  407e6c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  407e70:	459b      	cmp	fp, r3
  407e72:	bf18      	it	ne
  407e74:	429e      	cmpne	r6, r3
  407e76:	d1ea      	bne.n	407e4e <trans_create+0x112>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  407e78:	4620      	mov	r0, r4
  407e7a:	4b6a      	ldr	r3, [pc, #424]	; (408024 <trans_create+0x2e8>)
  407e7c:	4798      	blx	r3
  407e7e:	4605      	mov	r5, r0
  407e80:	2800      	cmp	r0, #0
  407e82:	da00      	bge.n	407e86 <trans_create+0x14a>
  407e84:	1c45      	adds	r5, r0, #1
  407e86:	f345 054f 	sbfx	r5, r5, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  407e8a:	4620      	mov	r0, r4
  407e8c:	4b65      	ldr	r3, [pc, #404]	; (408024 <trans_create+0x2e8>)
  407e8e:	4798      	blx	r3
  407e90:	4603      	mov	r3, r0
  407e92:	2800      	cmp	r0, #0
  407e94:	da00      	bge.n	407e98 <trans_create+0x15c>
  407e96:	1c43      	adds	r3, r0, #1
  407e98:	f343 034f 	sbfx	r3, r3, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407e9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407ea0:	4296      	cmp	r6, r2
  407ea2:	d105      	bne.n	407eb0 <trans_create+0x174>
  407ea4:	1c5e      	adds	r6, r3, #1
  407ea6:	1c6a      	adds	r2, r5, #1
  407ea8:	4296      	cmp	r6, r2
  407eaa:	bfa8      	it	ge
  407eac:	4616      	movge	r6, r2
  407eae:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407eb0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407eb4:	4593      	cmp	fp, r2
  407eb6:	d1ca      	bne.n	407e4e <trans_create+0x112>
  407eb8:	f103 0b01 	add.w	fp, r3, #1
  407ebc:	3501      	adds	r5, #1
  407ebe:	45ab      	cmp	fp, r5
  407ec0:	bfa8      	it	ge
  407ec2:	46ab      	movge	fp, r5
  407ec4:	fa0f fb8b 	sxth.w	fp, fp
  407ec8:	e7c1      	b.n	407e4e <trans_create+0x112>
        LV_ASSERT_MEM(tr);
  407eca:	4622      	mov	r2, r4
  407ecc:	2300      	movs	r3, #0
  407ece:	4856      	ldr	r0, [pc, #344]	; (408028 <trans_create+0x2ec>)
  407ed0:	4956      	ldr	r1, [pc, #344]	; (40802c <trans_create+0x2f0>)
  407ed2:	4788      	blx	r1
  407ed4:	e7fe      	b.n	407ed4 <trans_create+0x198>
        style_list->skip_trans = 1;
  407ed6:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407ed8:	f043 0309 	orr.w	r3, r3, #9
  407edc:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407ede:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
  407ee2:	462a      	mov	r2, r5
  407ee4:	4639      	mov	r1, r7
  407ee6:	4620      	mov	r0, r4
  407ee8:	f8df b144 	ldr.w	fp, [pc, #324]	; 408030 <trans_create+0x2f4>
  407eec:	47d8      	blx	fp
  407eee:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407ef2:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
  407ef6:	462a      	mov	r2, r5
  407ef8:	4639      	mov	r1, r7
  407efa:	4620      	mov	r0, r4
  407efc:	47d8      	blx	fp
  407efe:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407f00:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407f02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407f06:	f36a 03c3 	bfi	r3, sl, #3, #1
  407f0a:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
  407f0c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  407f10:	b283      	uxth	r3, r0
  407f12:	429a      	cmp	r2, r3
  407f14:	d023      	beq.n	407f5e <trans_create+0x222>
        obj->state = prev_state;
  407f16:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
  407f1a:	462a      	mov	r2, r5
  407f1c:	4639      	mov	r1, r7
  407f1e:	4620      	mov	r0, r4
  407f20:	4b43      	ldr	r3, [pc, #268]	; (408030 <trans_create+0x2f4>)
  407f22:	4798      	blx	r3
  407f24:	4602      	mov	r2, r0
  407f26:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407f2a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
  407f2e:	4629      	mov	r1, r5
  407f30:	9800      	ldr	r0, [sp, #0]
  407f32:	4b40      	ldr	r3, [pc, #256]	; (408034 <trans_create+0x2f8>)
  407f34:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407f36:	4836      	ldr	r0, [pc, #216]	; (408010 <trans_create+0x2d4>)
  407f38:	4b36      	ldr	r3, [pc, #216]	; (408014 <trans_create+0x2d8>)
  407f3a:	4798      	blx	r3
  407f3c:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407f3e:	4b36      	ldr	r3, [pc, #216]	; (408018 <trans_create+0x2dc>)
  407f40:	4798      	blx	r3
  407f42:	b928      	cbnz	r0, 407f50 <trans_create+0x214>
  407f44:	4622      	mov	r2, r4
  407f46:	2300      	movs	r3, #0
  407f48:	4837      	ldr	r0, [pc, #220]	; (408028 <trans_create+0x2ec>)
  407f4a:	4938      	ldr	r1, [pc, #224]	; (40802c <trans_create+0x2f0>)
  407f4c:	4788      	blx	r1
  407f4e:	e7fe      	b.n	407f4e <trans_create+0x212>
        if(tr == NULL) return NULL;
  407f50:	b12c      	cbz	r4, 407f5e <trans_create+0x222>
        tr->start_value._color = c1;
  407f52:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  407f56:	8123      	strh	r3, [r4, #8]
        tr->end_value._color = c2;
  407f58:	f8a4 b00c 	strh.w	fp, [r4, #12]
  407f5c:	e782      	b.n	407e64 <trans_create+0x128>
        if(c1.full == c2.full) return NULL;
  407f5e:	2400      	movs	r4, #0
  407f60:	e780      	b.n	407e64 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  407f62:	4622      	mov	r2, r4
  407f64:	2300      	movs	r3, #0
  407f66:	4830      	ldr	r0, [pc, #192]	; (408028 <trans_create+0x2ec>)
  407f68:	4930      	ldr	r1, [pc, #192]	; (40802c <trans_create+0x2f0>)
  407f6a:	4788      	blx	r1
  407f6c:	e7fe      	b.n	407f6c <trans_create+0x230>
        obj->state = prev_state;
  407f6e:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        style_list->skip_trans = 1;
  407f72:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407f74:	f043 0309 	orr.w	r3, r3, #9
  407f78:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407f7a:	462a      	mov	r2, r5
  407f7c:	4639      	mov	r1, r7
  407f7e:	4620      	mov	r0, r4
  407f80:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 408040 <trans_create+0x304>
  407f84:	47d8      	blx	fp
  407f86:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407f88:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
  407f8c:	462a      	mov	r2, r5
  407f8e:	4639      	mov	r1, r7
  407f90:	4620      	mov	r0, r4
  407f92:	47d8      	blx	fp
  407f94:	a904      	add	r1, sp, #16
  407f96:	f841 0d04 	str.w	r0, [r1, #-4]!
        style_list->skip_trans = 0;
  407f9a:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407f9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407fa0:	f36a 03c3 	bfi	r3, sl, #3, #1
  407fa4:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  407fa6:	2204      	movs	r2, #4
  407fa8:	a802      	add	r0, sp, #8
  407faa:	4b23      	ldr	r3, [pc, #140]	; (408038 <trans_create+0x2fc>)
  407fac:	4798      	blx	r3
  407fae:	b300      	cbz	r0, 407ff2 <trans_create+0x2b6>
        obj->state = prev_state;
  407fb0:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407fb4:	462a      	mov	r2, r5
  407fb6:	4639      	mov	r1, r7
  407fb8:	4620      	mov	r0, r4
  407fba:	47d8      	blx	fp
  407fbc:	4602      	mov	r2, r0
  407fbe:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407fc0:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
  407fc4:	4629      	mov	r1, r5
  407fc6:	9800      	ldr	r0, [sp, #0]
  407fc8:	4b1c      	ldr	r3, [pc, #112]	; (40803c <trans_create+0x300>)
  407fca:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407fcc:	4810      	ldr	r0, [pc, #64]	; (408010 <trans_create+0x2d4>)
  407fce:	4b11      	ldr	r3, [pc, #68]	; (408014 <trans_create+0x2d8>)
  407fd0:	4798      	blx	r3
  407fd2:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407fd4:	4b10      	ldr	r3, [pc, #64]	; (408018 <trans_create+0x2dc>)
  407fd6:	4798      	blx	r3
  407fd8:	b128      	cbz	r0, 407fe6 <trans_create+0x2aa>
        if(tr == NULL) return NULL;
  407fda:	b154      	cbz	r4, 407ff2 <trans_create+0x2b6>
        tr->start_value._ptr = p1;
  407fdc:	9b02      	ldr	r3, [sp, #8]
  407fde:	60a3      	str	r3, [r4, #8]
        tr->end_value._ptr = p2;
  407fe0:	9b03      	ldr	r3, [sp, #12]
  407fe2:	60e3      	str	r3, [r4, #12]
  407fe4:	e73e      	b.n	407e64 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  407fe6:	4622      	mov	r2, r4
  407fe8:	2300      	movs	r3, #0
  407fea:	480f      	ldr	r0, [pc, #60]	; (408028 <trans_create+0x2ec>)
  407fec:	490f      	ldr	r1, [pc, #60]	; (40802c <trans_create+0x2f0>)
  407fee:	4788      	blx	r1
  407ff0:	e7fe      	b.n	407ff0 <trans_create+0x2b4>
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  407ff2:	2400      	movs	r4, #0
  407ff4:	e736      	b.n	407e64 <trans_create+0x128>
        if(int1 == int2)  return NULL;
  407ff6:	2400      	movs	r4, #0
  407ff8:	e734      	b.n	407e64 <trans_create+0x128>
        if(o1 == o2) return NULL;
  407ffa:	2400      	movs	r4, #0
  407ffc:	e732      	b.n	407e64 <trans_create+0x128>
  407ffe:	bf00      	nop
  408000:	00405c0d 	.word	0x00405c0d
  408004:	0040ac2d 	.word	0x0040ac2d
  408008:	00406eb9 	.word	0x00406eb9
  40800c:	0040a4d9 	.word	0x0040a4d9
  408010:	2043a310 	.word	0x2043a310
  408014:	004160f1 	.word	0x004160f1
  408018:	00415e79 	.word	0x00415e79
  40801c:	00407445 	.word	0x00407445
  408020:	0040a1b9 	.word	0x0040a1b9
  408024:	00405b81 	.word	0x00405b81
  408028:	0042c154 	.word	0x0042c154
  40802c:	00415e85 	.word	0x00415e85
  408030:	00406e31 	.word	0x00406e31
  408034:	0040a349 	.word	0x0040a349
  408038:	004277e9 	.word	0x004277e9
  40803c:	0040a669 	.word	0x0040a669
  408040:	0040733d 	.word	0x0040733d

00408044 <lv_obj_get_signal_cb>:
{
  408044:	b510      	push	{r4, lr}
  408046:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408048:	4b05      	ldr	r3, [pc, #20]	; (408060 <lv_obj_get_signal_cb+0x1c>)
  40804a:	4798      	blx	r3
  40804c:	b108      	cbz	r0, 408052 <lv_obj_get_signal_cb+0xe>
}
  40804e:	69e0      	ldr	r0, [r4, #28]
  408050:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408052:	4622      	mov	r2, r4
  408054:	2300      	movs	r3, #0
  408056:	4803      	ldr	r0, [pc, #12]	; (408064 <lv_obj_get_signal_cb+0x20>)
  408058:	4903      	ldr	r1, [pc, #12]	; (408068 <lv_obj_get_signal_cb+0x24>)
  40805a:	4788      	blx	r1
  40805c:	e7fe      	b.n	40805c <lv_obj_get_signal_cb+0x18>
  40805e:	bf00      	nop
  408060:	00415e79 	.word	0x00415e79
  408064:	0042c168 	.word	0x0042c168
  408068:	00415e85 	.word	0x00415e85

0040806c <lv_obj_get_design_cb>:
{
  40806c:	b510      	push	{r4, lr}
  40806e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408070:	4b05      	ldr	r3, [pc, #20]	; (408088 <lv_obj_get_design_cb+0x1c>)
  408072:	4798      	blx	r3
  408074:	b108      	cbz	r0, 40807a <lv_obj_get_design_cb+0xe>
}
  408076:	6a20      	ldr	r0, [r4, #32]
  408078:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40807a:	4622      	mov	r2, r4
  40807c:	2300      	movs	r3, #0
  40807e:	4803      	ldr	r0, [pc, #12]	; (40808c <lv_obj_get_design_cb+0x20>)
  408080:	4903      	ldr	r1, [pc, #12]	; (408090 <lv_obj_get_design_cb+0x24>)
  408082:	4788      	blx	r1
  408084:	e7fe      	b.n	408084 <lv_obj_get_design_cb+0x18>
  408086:	bf00      	nop
  408088:	00415e79 	.word	0x00415e79
  40808c:	0042c168 	.word	0x0042c168
  408090:	00415e85 	.word	0x00415e85

00408094 <lv_obj_get_ext_attr>:
{
  408094:	b510      	push	{r4, lr}
  408096:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408098:	4b05      	ldr	r3, [pc, #20]	; (4080b0 <lv_obj_get_ext_attr+0x1c>)
  40809a:	4798      	blx	r3
  40809c:	b108      	cbz	r0, 4080a2 <lv_obj_get_ext_attr+0xe>
}
  40809e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  4080a0:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4080a2:	4622      	mov	r2, r4
  4080a4:	2300      	movs	r3, #0
  4080a6:	4803      	ldr	r0, [pc, #12]	; (4080b4 <lv_obj_get_ext_attr+0x20>)
  4080a8:	4903      	ldr	r1, [pc, #12]	; (4080b8 <lv_obj_get_ext_attr+0x24>)
  4080aa:	4788      	blx	r1
  4080ac:	e7fe      	b.n	4080ac <lv_obj_get_ext_attr+0x18>
  4080ae:	bf00      	nop
  4080b0:	00415e79 	.word	0x00415e79
  4080b4:	0042c168 	.word	0x0042c168
  4080b8:	00415e85 	.word	0x00415e85

004080bc <lv_obj_get_group>:
{
  4080bc:	b510      	push	{r4, lr}
  4080be:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4080c0:	4b05      	ldr	r3, [pc, #20]	; (4080d8 <lv_obj_get_group+0x1c>)
  4080c2:	4798      	blx	r3
  4080c4:	b108      	cbz	r0, 4080ca <lv_obj_get_group+0xe>
}
  4080c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  4080c8:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4080ca:	4622      	mov	r2, r4
  4080cc:	2300      	movs	r3, #0
  4080ce:	4803      	ldr	r0, [pc, #12]	; (4080dc <lv_obj_get_group+0x20>)
  4080d0:	4903      	ldr	r1, [pc, #12]	; (4080e0 <lv_obj_get_group+0x24>)
  4080d2:	4788      	blx	r1
  4080d4:	e7fe      	b.n	4080d4 <lv_obj_get_group+0x18>
  4080d6:	bf00      	nop
  4080d8:	00415e79 	.word	0x00415e79
  4080dc:	0042c168 	.word	0x0042c168
  4080e0:	00415e85 	.word	0x00415e85

004080e4 <obj_del_core>:
{
  4080e4:	b570      	push	{r4, r5, r6, lr}
  4080e6:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
  4080e8:	2200      	movs	r2, #0
  4080ea:	2115      	movs	r1, #21
  4080ec:	4b33      	ldr	r3, [pc, #204]	; (4081bc <obj_del_core+0xd8>)
  4080ee:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
  4080f0:	4628      	mov	r0, r5
  4080f2:	4b33      	ldr	r3, [pc, #204]	; (4081c0 <obj_del_core+0xdc>)
  4080f4:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
  4080f6:	4606      	mov	r6, r0
  4080f8:	b110      	cbz	r0, 408100 <obj_del_core+0x1c>
  4080fa:	4628      	mov	r0, r5
  4080fc:	4b31      	ldr	r3, [pc, #196]	; (4081c4 <obj_del_core+0xe0>)
  4080fe:	4798      	blx	r3
    lv_anim_del(obj, NULL);
  408100:	2100      	movs	r1, #0
  408102:	4628      	mov	r0, r5
  408104:	4b30      	ldr	r3, [pc, #192]	; (4081c8 <obj_del_core+0xe4>)
  408106:	4798      	blx	r3
    trans_del(obj, 0xFF, 0xFF, NULL);
  408108:	2300      	movs	r3, #0
  40810a:	22ff      	movs	r2, #255	; 0xff
  40810c:	4611      	mov	r1, r2
  40810e:	4628      	mov	r0, r5
  408110:	4c2e      	ldr	r4, [pc, #184]	; (4081cc <obj_del_core+0xe8>)
  408112:	47a0      	blx	r4
    i = _lv_ll_get_head(&(obj->child_ll));
  408114:	1d2c      	adds	r4, r5, #4
  408116:	4620      	mov	r0, r4
  408118:	4b2d      	ldr	r3, [pc, #180]	; (4081d0 <obj_del_core+0xec>)
  40811a:	4798      	blx	r3
    while(i != NULL) {
  40811c:	e004      	b.n	408128 <obj_del_core+0x44>
        obj_del_core(i);
  40811e:	f7ff ffe1 	bl	4080e4 <obj_del_core>
        i = _lv_ll_get_head(&(obj->child_ll));
  408122:	4620      	mov	r0, r4
  408124:	4b2a      	ldr	r3, [pc, #168]	; (4081d0 <obj_del_core+0xec>)
  408126:	4798      	blx	r3
    while(i != NULL) {
  408128:	2800      	cmp	r0, #0
  40812a:	d1f8      	bne.n	40811e <obj_del_core+0x3a>
    lv_event_mark_deleted(obj);
  40812c:	4628      	mov	r0, r5
  40812e:	4b29      	ldr	r3, [pc, #164]	; (4081d4 <obj_del_core+0xf0>)
  408130:	4798      	blx	r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
  408132:	2000      	movs	r0, #0
  408134:	4b28      	ldr	r3, [pc, #160]	; (4081d8 <obj_del_core+0xf4>)
  408136:	4798      	blx	r3
  408138:	4604      	mov	r4, r0
    while(indev) {
  40813a:	e00d      	b.n	408158 <obj_del_core+0x74>
            lv_indev_reset(indev, obj);
  40813c:	4629      	mov	r1, r5
  40813e:	4620      	mov	r0, r4
  408140:	4b26      	ldr	r3, [pc, #152]	; (4081dc <obj_del_core+0xf8>)
  408142:	4798      	blx	r3
        if(indev->proc.types.pointer.last_pressed == obj) {
  408144:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  408146:	429d      	cmp	r5, r3
  408148:	d00e      	beq.n	408168 <obj_del_core+0x84>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  40814a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  40814c:	429e      	cmp	r6, r3
  40814e:	d00e      	beq.n	40816e <obj_del_core+0x8a>
        indev = lv_indev_get_next(indev);
  408150:	4620      	mov	r0, r4
  408152:	4b21      	ldr	r3, [pc, #132]	; (4081d8 <obj_del_core+0xf4>)
  408154:	4798      	blx	r3
  408156:	4604      	mov	r4, r0
    while(indev) {
  408158:	b194      	cbz	r4, 408180 <obj_del_core+0x9c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
  40815a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40815c:	429d      	cmp	r5, r3
  40815e:	d0ed      	beq.n	40813c <obj_del_core+0x58>
  408160:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  408162:	429d      	cmp	r5, r3
  408164:	d1ee      	bne.n	408144 <obj_del_core+0x60>
  408166:	e7e9      	b.n	40813c <obj_del_core+0x58>
            indev->proc.types.pointer.last_pressed = NULL;
  408168:	2300      	movs	r3, #0
  40816a:	63e3      	str	r3, [r4, #60]	; 0x3c
  40816c:	e7ed      	b.n	40814a <obj_del_core+0x66>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  40816e:	4b1c      	ldr	r3, [pc, #112]	; (4081e0 <obj_del_core+0xfc>)
  408170:	4798      	blx	r3
  408172:	4285      	cmp	r5, r0
  408174:	d1ec      	bne.n	408150 <obj_del_core+0x6c>
            lv_indev_reset(indev, obj);
  408176:	4629      	mov	r1, r5
  408178:	4620      	mov	r0, r4
  40817a:	4b18      	ldr	r3, [pc, #96]	; (4081dc <obj_del_core+0xf8>)
  40817c:	4798      	blx	r3
  40817e:	e7e7      	b.n	408150 <obj_del_core+0x6c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
  408180:	69eb      	ldr	r3, [r5, #28]
  408182:	2200      	movs	r2, #0
  408184:	4611      	mov	r1, r2
  408186:	4628      	mov	r0, r5
  408188:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  40818a:	4628      	mov	r0, r5
  40818c:	4b15      	ldr	r3, [pc, #84]	; (4081e4 <obj_del_core+0x100>)
  40818e:	4798      	blx	r3
    if(par == NULL) { /*It is a screen*/
  408190:	b158      	cbz	r0, 4081aa <obj_del_core+0xc6>
        _lv_ll_remove(&(par->child_ll), obj);
  408192:	4629      	mov	r1, r5
  408194:	3004      	adds	r0, #4
  408196:	4b14      	ldr	r3, [pc, #80]	; (4081e8 <obj_del_core+0x104>)
  408198:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
  40819a:	6a68      	ldr	r0, [r5, #36]	; 0x24
  40819c:	b108      	cbz	r0, 4081a2 <obj_del_core+0xbe>
  40819e:	4b13      	ldr	r3, [pc, #76]	; (4081ec <obj_del_core+0x108>)
  4081a0:	4798      	blx	r3
    lv_mem_free(obj); /*Free the object itself*/
  4081a2:	4628      	mov	r0, r5
  4081a4:	4b11      	ldr	r3, [pc, #68]	; (4081ec <obj_del_core+0x108>)
  4081a6:	4798      	blx	r3
  4081a8:	bd70      	pop	{r4, r5, r6, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
  4081aa:	4628      	mov	r0, r5
  4081ac:	4b10      	ldr	r3, [pc, #64]	; (4081f0 <obj_del_core+0x10c>)
  4081ae:	4798      	blx	r3
        _lv_ll_remove(&d->scr_ll, obj);
  4081b0:	4629      	mov	r1, r5
  4081b2:	3038      	adds	r0, #56	; 0x38
  4081b4:	4b0c      	ldr	r3, [pc, #48]	; (4081e8 <obj_del_core+0x104>)
  4081b6:	4798      	blx	r3
  4081b8:	e7ef      	b.n	40819a <obj_del_core+0xb6>
  4081ba:	bf00      	nop
  4081bc:	0040589d 	.word	0x0040589d
  4081c0:	004080bd 	.word	0x004080bd
  4081c4:	004038dd 	.word	0x004038dd
  4081c8:	004153d9 	.word	0x004153d9
  4081cc:	00405c3d 	.word	0x00405c3d
  4081d0:	00416189 	.word	0x00416189
  4081d4:	00405399 	.word	0x00405399
  4081d8:	00415071 	.word	0x00415071
  4081dc:	00404c69 	.word	0x00404c69
  4081e0:	00404d61 	.word	0x00404d61
  4081e4:	004059ad 	.word	0x004059ad
  4081e8:	00416245 	.word	0x00416245
  4081ec:	00416681 	.word	0x00416681
  4081f0:	00405a0d 	.word	0x00405a0d

004081f4 <lv_obj_del>:
{
  4081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4081f6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4081f8:	4b16      	ldr	r3, [pc, #88]	; (408254 <lv_obj_del+0x60>)
  4081fa:	4798      	blx	r3
  4081fc:	b928      	cbnz	r0, 40820a <lv_obj_del+0x16>
  4081fe:	4622      	mov	r2, r4
  408200:	2300      	movs	r3, #0
  408202:	4815      	ldr	r0, [pc, #84]	; (408258 <lv_obj_del+0x64>)
  408204:	4915      	ldr	r1, [pc, #84]	; (40825c <lv_obj_del+0x68>)
  408206:	4788      	blx	r1
  408208:	e7fe      	b.n	408208 <lv_obj_del+0x14>
  40820a:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
  40820c:	4620      	mov	r0, r4
  40820e:	4b14      	ldr	r3, [pc, #80]	; (408260 <lv_obj_del+0x6c>)
  408210:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  408212:	4620      	mov	r0, r4
  408214:	4b13      	ldr	r3, [pc, #76]	; (408264 <lv_obj_del+0x70>)
  408216:	4798      	blx	r3
    if(par == NULL) {
  408218:	4607      	mov	r7, r0
  40821a:	b178      	cbz	r0, 40823c <lv_obj_del+0x48>
    bool act_scr_del = false;
  40821c:	2500      	movs	r5, #0
    lv_disp_t * disp = NULL;
  40821e:	462e      	mov	r6, r5
    obj_del_core(obj);
  408220:	4620      	mov	r0, r4
  408222:	4b11      	ldr	r3, [pc, #68]	; (408268 <lv_obj_del+0x74>)
  408224:	4798      	blx	r3
    if(par) {
  408226:	b127      	cbz	r7, 408232 <lv_obj_del+0x3e>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
  408228:	69fb      	ldr	r3, [r7, #28]
  40822a:	2200      	movs	r2, #0
  40822c:	2101      	movs	r1, #1
  40822e:	4638      	mov	r0, r7
  408230:	4798      	blx	r3
    if(act_scr_del)  {
  408232:	b10d      	cbz	r5, 408238 <lv_obj_del+0x44>
        disp->act_scr = NULL;
  408234:	2300      	movs	r3, #0
  408236:	6473      	str	r3, [r6, #68]	; 0x44
}
  408238:	2000      	movs	r0, #0
  40823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
  40823c:	4620      	mov	r0, r4
  40823e:	4b0b      	ldr	r3, [pc, #44]	; (40826c <lv_obj_del+0x78>)
  408240:	4798      	blx	r3
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
  408242:	4606      	mov	r6, r0
  408244:	2800      	cmp	r0, #0
  408246:	d0f7      	beq.n	408238 <lv_obj_del+0x44>
        if(disp->act_scr == obj) act_scr_del = true;
  408248:	6c43      	ldr	r3, [r0, #68]	; 0x44
  40824a:	429c      	cmp	r4, r3
  40824c:	d0e8      	beq.n	408220 <lv_obj_del+0x2c>
    bool act_scr_del = false;
  40824e:	2500      	movs	r5, #0
  408250:	e7e6      	b.n	408220 <lv_obj_del+0x2c>
  408252:	bf00      	nop
  408254:	00415e79 	.word	0x00415e79
  408258:	0042c168 	.word	0x0042c168
  40825c:	00415e85 	.word	0x00415e85
  408260:	00405f59 	.word	0x00405f59
  408264:	004059ad 	.word	0x004059ad
  408268:	004080e5 	.word	0x004080e5
  40826c:	00405a0d 	.word	0x00405a0d

00408270 <lv_obj_is_focused>:
{
  408270:	b538      	push	{r3, r4, r5, lr}
  408272:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408274:	4b0a      	ldr	r3, [pc, #40]	; (4082a0 <lv_obj_is_focused+0x30>)
  408276:	4798      	blx	r3
  408278:	b148      	cbz	r0, 40828e <lv_obj_is_focused+0x1e>
  40827a:	4604      	mov	r4, r0
    if(obj->group_p) {
  40827c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  40827e:	b160      	cbz	r0, 40829a <lv_obj_is_focused+0x2a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
  408280:	4b08      	ldr	r3, [pc, #32]	; (4082a4 <lv_obj_is_focused+0x34>)
  408282:	4798      	blx	r3
  408284:	4285      	cmp	r5, r0
  408286:	d000      	beq.n	40828a <lv_obj_is_focused+0x1a>
    return false;
  408288:	2400      	movs	r4, #0
}
  40828a:	4620      	mov	r0, r4
  40828c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40828e:	462a      	mov	r2, r5
  408290:	2300      	movs	r3, #0
  408292:	4805      	ldr	r0, [pc, #20]	; (4082a8 <lv_obj_is_focused+0x38>)
  408294:	4905      	ldr	r1, [pc, #20]	; (4082ac <lv_obj_is_focused+0x3c>)
  408296:	4788      	blx	r1
  408298:	e7fe      	b.n	408298 <lv_obj_is_focused+0x28>
    return false;
  40829a:	2400      	movs	r4, #0
  40829c:	e7f5      	b.n	40828a <lv_obj_is_focused+0x1a>
  40829e:	bf00      	nop
  4082a0:	00415e79 	.word	0x00415e79
  4082a4:	00403989 	.word	0x00403989
  4082a8:	0042c168 	.word	0x0042c168
  4082ac:	00415e85 	.word	0x00415e85

004082b0 <lv_obj_is_point_on_coords>:
{
  4082b0:	b500      	push	{lr}
  4082b2:	b083      	sub	sp, #12
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
  4082b4:	8a02      	ldrh	r2, [r0, #16]
  4082b6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
  4082ba:	1ad2      	subs	r2, r2, r3
  4082bc:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
  4082c0:	8a82      	ldrh	r2, [r0, #20]
  4082c2:	4413      	add	r3, r2
  4082c4:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
  4082c8:	8a42      	ldrh	r2, [r0, #18]
  4082ca:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4082ce:	1ad2      	subs	r2, r2, r3
  4082d0:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
  4082d4:	8ac2      	ldrh	r2, [r0, #22]
  4082d6:	4413      	add	r3, r2
  4082d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
  4082dc:	2200      	movs	r2, #0
  4082de:	4668      	mov	r0, sp
  4082e0:	4b02      	ldr	r3, [pc, #8]	; (4082ec <lv_obj_is_point_on_coords+0x3c>)
  4082e2:	4798      	blx	r3
}
  4082e4:	b003      	add	sp, #12
  4082e6:	f85d fb04 	ldr.w	pc, [sp], #4
  4082ea:	bf00      	nop
  4082ec:	00415655 	.word	0x00415655

004082f0 <lv_obj_hittest>:
{
  4082f0:	b500      	push	{lr}
  4082f2:	b083      	sub	sp, #12
    if(obj->adv_hittest) {
  4082f4:	f990 3034 	ldrsb.w	r3, [r0, #52]	; 0x34
  4082f8:	2b00      	cmp	r3, #0
  4082fa:	db04      	blt.n	408306 <lv_obj_hittest+0x16>
        return lv_obj_is_point_on_coords(obj, point);
  4082fc:	4b07      	ldr	r3, [pc, #28]	; (40831c <lv_obj_hittest+0x2c>)
  4082fe:	4798      	blx	r3
}
  408300:	b003      	add	sp, #12
  408302:	f85d fb04 	ldr.w	pc, [sp], #4
        hit_info.point = point;
  408306:	9100      	str	r1, [sp, #0]
        hit_info.result = true;
  408308:	2301      	movs	r3, #1
  40830a:	f88d 3004 	strb.w	r3, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
  40830e:	69c3      	ldr	r3, [r0, #28]
  408310:	466a      	mov	r2, sp
  408312:	210a      	movs	r1, #10
  408314:	4798      	blx	r3
        return hit_info.result;
  408316:	f89d 0004 	ldrb.w	r0, [sp, #4]
  40831a:	e7f1      	b.n	408300 <lv_obj_hittest+0x10>
  40831c:	004082b1 	.word	0x004082b1

00408320 <lv_obj_handle_get_type_signal>:
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  408320:	2300      	movs	r3, #0
  408322:	2b06      	cmp	r3, #6
  408324:	d805      	bhi.n	408332 <lv_obj_handle_get_type_signal+0x12>
        if(buf->type[i] == NULL) break;
  408326:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  40832a:	b112      	cbz	r2, 408332 <lv_obj_handle_get_type_signal+0x12>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  40832c:	3301      	adds	r3, #1
  40832e:	b2db      	uxtb	r3, r3
  408330:	e7f7      	b.n	408322 <lv_obj_handle_get_type_signal+0x2>
    buf->type[i] = name;
  408332:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
  408336:	2001      	movs	r0, #1
  408338:	4770      	bx	lr
	...

0040833c <lv_obj_init_draw_rect_dsc>:
{
  40833c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408340:	4605      	mov	r5, r0
  408342:	460e      	mov	r6, r1
  408344:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  408346:	2201      	movs	r2, #1
  408348:	4ba9      	ldr	r3, [pc, #676]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40834a:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
  40834c:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  40834e:	f248 020c 	movw	r2, #32780	; 0x800c
  408352:	4631      	mov	r1, r6
  408354:	4628      	mov	r0, r5
  408356:	4ba7      	ldr	r3, [pc, #668]	; (4085f4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  408358:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
  40835a:	2802      	cmp	r0, #2
  40835c:	d966      	bls.n	40842c <lv_obj_init_draw_rect_dsc+0xf0>
  40835e:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
  408360:	7b23      	ldrb	r3, [r4, #12]
  408362:	2b00      	cmp	r3, #0
  408364:	d16d      	bne.n	408442 <lv_obj_init_draw_rect_dsc+0x106>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  408366:	2230      	movs	r2, #48	; 0x30
  408368:	4631      	mov	r1, r6
  40836a:	4628      	mov	r0, r5
  40836c:	4ba0      	ldr	r3, [pc, #640]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40836e:	4798      	blx	r3
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
  408370:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
  408372:	b118      	cbz	r0, 40837c <lv_obj_init_draw_rect_dsc+0x40>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
  408374:	7d23      	ldrb	r3, [r4, #20]
  408376:	2b00      	cmp	r3, #0
  408378:	f040 8093 	bne.w	4084a2 <lv_obj_init_draw_rect_dsc+0x166>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  40837c:	2240      	movs	r2, #64	; 0x40
  40837e:	4631      	mov	r1, r6
  408380:	4628      	mov	r0, r5
  408382:	4b9b      	ldr	r3, [pc, #620]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408384:	4798      	blx	r3
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
  408386:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
  408388:	b118      	cbz	r0, 408392 <lv_obj_init_draw_rect_dsc+0x56>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
  40838a:	7fa3      	ldrb	r3, [r4, #30]
  40838c:	2b00      	cmp	r3, #0
  40838e:	f040 80a5 	bne.w	4084dc <lv_obj_init_draw_rect_dsc+0x1a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  408392:	226e      	movs	r2, #110	; 0x6e
  408394:	4631      	mov	r1, r6
  408396:	4628      	mov	r0, r5
  408398:	4b97      	ldr	r3, [pc, #604]	; (4085f8 <lv_obj_init_draw_rect_dsc+0x2bc>)
  40839a:	4798      	blx	r3
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
  40839c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
  40839e:	b120      	cbz	r0, 4083aa <lv_obj_init_draw_rect_dsc+0x6e>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
  4083a0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4083a4:	2b00      	cmp	r3, #0
  4083a6:	f040 80b5 	bne.w	408514 <lv_obj_init_draw_rect_dsc+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4083aa:	2250      	movs	r2, #80	; 0x50
  4083ac:	4631      	mov	r1, r6
  4083ae:	4628      	mov	r0, r5
  4083b0:	4b8f      	ldr	r3, [pc, #572]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4083b2:	4798      	blx	r3
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
  4083b4:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->shadow_width) {
  4083b6:	b120      	cbz	r0, 4083c2 <lv_obj_init_draw_rect_dsc+0x86>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  4083b8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4083bc:	2b02      	cmp	r3, #2
  4083be:	f200 80ee 	bhi.w	40859e <lv_obj_init_draw_rect_dsc+0x262>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  4083c2:	227f      	movs	r2, #127	; 0x7f
  4083c4:	4631      	mov	r1, r6
  4083c6:	4628      	mov	r0, r5
  4083c8:	4b8b      	ldr	r3, [pc, #556]	; (4085f8 <lv_obj_init_draw_rect_dsc+0x2bc>)
  4083ca:	4798      	blx	r3
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
  4083cc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
  4083ce:	b120      	cbz	r0, 4083da <lv_obj_init_draw_rect_dsc+0x9e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
  4083d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4083d4:	2b02      	cmp	r3, #2
  4083d6:	f200 8115 	bhi.w	408604 <lv_obj_init_draw_rect_dsc+0x2c8>
    if(opa_scale < LV_OPA_MAX) {
  4083da:	2ffc      	cmp	r7, #252	; 0xfc
  4083dc:	d824      	bhi.n	408428 <lv_obj_init_draw_rect_dsc+0xec>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
  4083de:	7b23      	ldrb	r3, [r4, #12]
  4083e0:	b2bf      	uxth	r7, r7
  4083e2:	fb13 f307 	smulbb	r3, r3, r7
  4083e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4083ea:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
  4083ec:	7d23      	ldrb	r3, [r4, #20]
  4083ee:	fb17 f303 	smulbb	r3, r7, r3
  4083f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4083f6:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
  4083f8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4083fc:	fb17 f303 	smulbb	r3, r7, r3
  408400:	f3c3 2307 	ubfx	r3, r3, #8, #8
  408404:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
  408408:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  40840c:	fb17 f303 	smulbb	r3, r7, r3
  408410:	f3c3 2307 	ubfx	r3, r3, #8, #8
  408414:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
  408418:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40841c:	fb17 f703 	smulbb	r7, r7, r3
  408420:	f3c7 2707 	ubfx	r7, r7, #8, #8
  408424:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  408428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
  40842c:	2300      	movs	r3, #0
  40842e:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
  408430:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
  408432:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
  408436:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
  40843a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
  40843e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  408442:	222c      	movs	r2, #44	; 0x2c
  408444:	4631      	mov	r1, r6
  408446:	4628      	mov	r0, r5
  408448:	4b6a      	ldr	r3, [pc, #424]	; (4085f4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  40844a:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
  40844c:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
  40844e:	2802      	cmp	r0, #2
  408450:	d989      	bls.n	408366 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  408452:	2229      	movs	r2, #41	; 0x29
  408454:	4631      	mov	r1, r6
  408456:	4628      	mov	r0, r5
  408458:	4b68      	ldr	r3, [pc, #416]	; (4085fc <lv_obj_init_draw_rect_dsc+0x2c0>)
  40845a:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
  40845c:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  40845e:	2223      	movs	r2, #35	; 0x23
  408460:	4631      	mov	r1, r6
  408462:	4628      	mov	r0, r5
  408464:	4b62      	ldr	r3, [pc, #392]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408466:	4798      	blx	r3
  408468:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
  40846a:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
  40846c:	b930      	cbnz	r0, 40847c <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  40846e:	2220      	movs	r2, #32
  408470:	4631      	mov	r1, r6
  408472:	4628      	mov	r0, r5
  408474:	4b5e      	ldr	r3, [pc, #376]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408476:	4798      	blx	r3
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
  408478:	7360      	strb	r0, [r4, #13]
  40847a:	e774      	b.n	408366 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
  40847c:	222a      	movs	r2, #42	; 0x2a
  40847e:	4631      	mov	r1, r6
  408480:	4628      	mov	r0, r5
  408482:	4b5e      	ldr	r3, [pc, #376]	; (4085fc <lv_obj_init_draw_rect_dsc+0x2c0>)
  408484:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
  408486:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  408488:	2221      	movs	r2, #33	; 0x21
  40848a:	4631      	mov	r1, r6
  40848c:	4628      	mov	r0, r5
  40848e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>
  408492:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
  408494:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  408496:	2222      	movs	r2, #34	; 0x22
  408498:	4631      	mov	r1, r6
  40849a:	4628      	mov	r0, r5
  40849c:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
  40849e:	8160      	strh	r0, [r4, #10]
  4084a0:	e7e5      	b.n	40846e <lv_obj_init_draw_rect_dsc+0x132>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  4084a2:	223c      	movs	r2, #60	; 0x3c
  4084a4:	4631      	mov	r1, r6
  4084a6:	4628      	mov	r0, r5
  4084a8:	4b52      	ldr	r3, [pc, #328]	; (4085f4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4084aa:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
  4084ac:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
  4084ae:	2802      	cmp	r0, #2
  4084b0:	d806      	bhi.n	4084c0 <lv_obj_init_draw_rect_dsc+0x184>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  4084b2:	2232      	movs	r2, #50	; 0x32
  4084b4:	4631      	mov	r1, r6
  4084b6:	4628      	mov	r0, r5
  4084b8:	4b4d      	ldr	r3, [pc, #308]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4084ba:	4798      	blx	r3
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
  4084bc:	7560      	strb	r0, [r4, #21]
  4084be:	e75d      	b.n	40837c <lv_obj_init_draw_rect_dsc+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  4084c0:	2231      	movs	r2, #49	; 0x31
  4084c2:	4631      	mov	r1, r6
  4084c4:	4628      	mov	r0, r5
  4084c6:	4b4a      	ldr	r3, [pc, #296]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4084c8:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
  4084ca:	b2c0      	uxtb	r0, r0
  4084cc:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  4084ce:	2239      	movs	r2, #57	; 0x39
  4084d0:	4631      	mov	r1, r6
  4084d2:	4628      	mov	r0, r5
  4084d4:	4b49      	ldr	r3, [pc, #292]	; (4085fc <lv_obj_init_draw_rect_dsc+0x2c0>)
  4084d6:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
  4084d8:	81e0      	strh	r0, [r4, #14]
  4084da:	e7ea      	b.n	4084b2 <lv_obj_init_draw_rect_dsc+0x176>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4084dc:	224c      	movs	r2, #76	; 0x4c
  4084de:	4631      	mov	r1, r6
  4084e0:	4628      	mov	r0, r5
  4084e2:	4b44      	ldr	r3, [pc, #272]	; (4085f4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4084e4:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
  4084e6:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
  4084e8:	2802      	cmp	r0, #2
  4084ea:	d806      	bhi.n	4084fa <lv_obj_init_draw_rect_dsc+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  4084ec:	2242      	movs	r2, #66	; 0x42
  4084ee:	4631      	mov	r1, r6
  4084f0:	4628      	mov	r0, r5
  4084f2:	4b3f      	ldr	r3, [pc, #252]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4084f4:	4798      	blx	r3
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
  4084f6:	77e0      	strb	r0, [r4, #31]
  4084f8:	e74b      	b.n	408392 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  4084fa:	2241      	movs	r2, #65	; 0x41
  4084fc:	4631      	mov	r1, r6
  4084fe:	4628      	mov	r0, r5
  408500:	4b3b      	ldr	r3, [pc, #236]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408502:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
  408504:	83a0      	strh	r0, [r4, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  408506:	2249      	movs	r2, #73	; 0x49
  408508:	4631      	mov	r1, r6
  40850a:	4628      	mov	r0, r5
  40850c:	4b3b      	ldr	r3, [pc, #236]	; (4085fc <lv_obj_init_draw_rect_dsc+0x2c0>)
  40850e:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
  408510:	8320      	strh	r0, [r4, #24]
  408512:	e7eb      	b.n	4084ec <lv_obj_init_draw_rect_dsc+0x1b0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  408514:	226c      	movs	r2, #108	; 0x6c
  408516:	4631      	mov	r1, r6
  408518:	4628      	mov	r0, r5
  40851a:	4b36      	ldr	r3, [pc, #216]	; (4085f4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  40851c:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
  40851e:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
  408522:	2802      	cmp	r0, #2
  408524:	f67f af41 	bls.w	4083aa <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
  408528:	226d      	movs	r2, #109	; 0x6d
  40852a:	4631      	mov	r1, r6
  40852c:	4628      	mov	r0, r5
  40852e:	4b31      	ldr	r3, [pc, #196]	; (4085f4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  408530:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
  408532:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
  408536:	2261      	movs	r2, #97	; 0x61
  408538:	4631      	mov	r1, r6
  40853a:	4628      	mov	r0, r5
  40853c:	4b2c      	ldr	r3, [pc, #176]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40853e:	4798      	blx	r3
  408540:	3000      	adds	r0, #0
  408542:	bf18      	it	ne
  408544:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
  408546:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  40854a:	f360 0300 	bfi	r3, r0, #0, #1
  40854e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
  408552:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  408554:	4b2a      	ldr	r3, [pc, #168]	; (408600 <lv_obj_init_draw_rect_dsc+0x2c4>)
  408556:	4798      	blx	r3
  408558:	2802      	cmp	r0, #2
  40855a:	d00b      	beq.n	408574 <lv_obj_init_draw_rect_dsc+0x238>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
  40855c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  408560:	2b02      	cmp	r3, #2
  408562:	d815      	bhi.n	408590 <lv_obj_init_draw_rect_dsc+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  408564:	2260      	movs	r2, #96	; 0x60
  408566:	4631      	mov	r1, r6
  408568:	4628      	mov	r0, r5
  40856a:	4b21      	ldr	r3, [pc, #132]	; (4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40856c:	4798      	blx	r3
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
  40856e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  408572:	e71a      	b.n	4083aa <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  408574:	2269      	movs	r2, #105	; 0x69
  408576:	4631      	mov	r1, r6
  408578:	4628      	mov	r0, r5
  40857a:	4b20      	ldr	r3, [pc, #128]	; (4085fc <lv_obj_init_draw_rect_dsc+0x2c0>)
  40857c:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  40857e:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  408580:	f248 028e 	movw	r2, #32910	; 0x808e
  408584:	4631      	mov	r1, r6
  408586:	4628      	mov	r0, r5
  408588:	4b1b      	ldr	r3, [pc, #108]	; (4085f8 <lv_obj_init_draw_rect_dsc+0x2bc>)
  40858a:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
  40858c:	6320      	str	r0, [r4, #48]	; 0x30
  40858e:	e7e9      	b.n	408564 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  408590:	2269      	movs	r2, #105	; 0x69
  408592:	4631      	mov	r1, r6
  408594:	4628      	mov	r0, r5
  408596:	4b19      	ldr	r3, [pc, #100]	; (4085fc <lv_obj_init_draw_rect_dsc+0x2c0>)
  408598:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  40859a:	86a0      	strh	r0, [r4, #52]	; 0x34
  40859c:	e7e2      	b.n	408564 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  40859e:	225c      	movs	r2, #92	; 0x5c
  4085a0:	4631      	mov	r1, r6
  4085a2:	4628      	mov	r0, r5
  4085a4:	4b13      	ldr	r3, [pc, #76]	; (4085f4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4085a6:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
  4085a8:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  4085ac:	2802      	cmp	r0, #2
  4085ae:	f67f af08 	bls.w	4083c2 <lv_obj_init_draw_rect_dsc+0x86>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  4085b2:	2251      	movs	r2, #81	; 0x51
  4085b4:	4631      	mov	r1, r6
  4085b6:	4628      	mov	r0, r5
  4085b8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4085f0 <lv_obj_init_draw_rect_dsc+0x2b4>
  4085bc:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
  4085be:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  4085c0:	2252      	movs	r2, #82	; 0x52
  4085c2:	4631      	mov	r1, r6
  4085c4:	4628      	mov	r0, r5
  4085c6:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
  4085c8:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  4085ca:	2253      	movs	r2, #83	; 0x53
  4085cc:	4631      	mov	r1, r6
  4085ce:	4628      	mov	r0, r5
  4085d0:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
  4085d2:	8520      	strh	r0, [r4, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  4085d4:	2259      	movs	r2, #89	; 0x59
  4085d6:	4631      	mov	r1, r6
  4085d8:	4628      	mov	r0, r5
  4085da:	4b08      	ldr	r3, [pc, #32]	; (4085fc <lv_obj_init_draw_rect_dsc+0x2c0>)
  4085dc:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
  4085de:	8420      	strh	r0, [r4, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  4085e0:	2254      	movs	r2, #84	; 0x54
  4085e2:	4631      	mov	r1, r6
  4085e4:	4628      	mov	r0, r5
  4085e6:	47c0      	blx	r8
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
  4085e8:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  4085ec:	e6e9      	b.n	4083c2 <lv_obj_init_draw_rect_dsc+0x86>
  4085ee:	bf00      	nop
  4085f0:	00407445 	.word	0x00407445
  4085f4:	00406eb9 	.word	0x00406eb9
  4085f8:	0040733d 	.word	0x0040733d
  4085fc:	00406e31 	.word	0x00406e31
  408600:	0040d62d 	.word	0x0040d62d
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  408604:	227c      	movs	r2, #124	; 0x7c
  408606:	4631      	mov	r1, r6
  408608:	4628      	mov	r0, r5
  40860a:	4b1d      	ldr	r3, [pc, #116]	; (408680 <lv_obj_init_draw_rect_dsc+0x344>)
  40860c:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
  40860e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
  408612:	2802      	cmp	r0, #2
  408614:	f67f aee1 	bls.w	4083da <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  408618:	2273      	movs	r2, #115	; 0x73
  40861a:	4631      	mov	r1, r6
  40861c:	4628      	mov	r0, r5
  40861e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 40868c <lv_obj_init_draw_rect_dsc+0x350>
  408622:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
  408624:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  408628:	2274      	movs	r2, #116	; 0x74
  40862a:	4631      	mov	r1, r6
  40862c:	4628      	mov	r0, r5
  40862e:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
  408630:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  408634:	2279      	movs	r2, #121	; 0x79
  408636:	4631      	mov	r1, r6
  408638:	4628      	mov	r0, r5
  40863a:	4b12      	ldr	r3, [pc, #72]	; (408684 <lv_obj_init_draw_rect_dsc+0x348>)
  40863c:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
  40863e:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  408642:	227e      	movs	r2, #126	; 0x7e
  408644:	4631      	mov	r1, r6
  408646:	4628      	mov	r0, r5
  408648:	4b0f      	ldr	r3, [pc, #60]	; (408688 <lv_obj_init_draw_rect_dsc+0x34c>)
  40864a:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
  40864c:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  40864e:	2270      	movs	r2, #112	; 0x70
  408650:	4631      	mov	r1, r6
  408652:	4628      	mov	r0, r5
  408654:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
  408656:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
  40865a:	2271      	movs	r2, #113	; 0x71
  40865c:	4631      	mov	r1, r6
  40865e:	4628      	mov	r0, r5
  408660:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
  408662:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  408666:	2275      	movs	r2, #117	; 0x75
  408668:	4631      	mov	r1, r6
  40866a:	4628      	mov	r0, r5
  40866c:	47c0      	blx	r8
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
  40866e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  408672:	2272      	movs	r2, #114	; 0x72
  408674:	4631      	mov	r1, r6
  408676:	4628      	mov	r0, r5
  408678:	47c0      	blx	r8
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
  40867a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  40867e:	e6ac      	b.n	4083da <lv_obj_init_draw_rect_dsc+0x9e>
  408680:	00406eb9 	.word	0x00406eb9
  408684:	00406e31 	.word	0x00406e31
  408688:	0040733d 	.word	0x0040733d
  40868c:	00407445 	.word	0x00407445

00408690 <lv_obj_design>:
{
  408690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408694:	b09a      	sub	sp, #104	; 0x68
  408696:	4604      	mov	r4, r0
  408698:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  40869a:	2a02      	cmp	r2, #2
  40869c:	d008      	beq.n	4086b0 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  40869e:	2a00      	cmp	r2, #0
  4086a0:	d06d      	beq.n	40877e <lv_obj_design+0xee>
    else if(mode == LV_DESIGN_DRAW_POST) {
  4086a2:	2a01      	cmp	r2, #1
  4086a4:	f000 80f4 	beq.w	408890 <lv_obj_design+0x200>
    return LV_DESIGN_RES_OK;
  4086a8:	2000      	movs	r0, #0
}
  4086aa:	b01a      	add	sp, #104	; 0x68
  4086ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4086b0:	2100      	movs	r1, #0
  4086b2:	4ba3      	ldr	r3, [pc, #652]	; (408940 <lv_obj_design+0x2b0>)
  4086b4:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  4086b6:	b108      	cbz	r0, 4086bc <lv_obj_design+0x2c>
  4086b8:	2003      	movs	r0, #3
  4086ba:	e7f6      	b.n	4086aa <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4086bc:	2201      	movs	r2, #1
  4086be:	2100      	movs	r1, #0
  4086c0:	4620      	mov	r0, r4
  4086c2:	4d9f      	ldr	r5, [pc, #636]	; (408940 <lv_obj_design+0x2b0>)
  4086c4:	47a8      	blx	r5
  4086c6:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  4086c8:	2204      	movs	r2, #4
  4086ca:	2100      	movs	r1, #0
  4086cc:	4620      	mov	r0, r4
  4086ce:	47a8      	blx	r5
  4086d0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  4086d2:	2205      	movs	r2, #5
  4086d4:	2100      	movs	r1, #0
  4086d6:	4620      	mov	r0, r4
  4086d8:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  4086da:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  4086de:	aa05      	add	r2, sp, #20
  4086e0:	2308      	movs	r3, #8
    while(len) {
  4086e2:	b12b      	cbz	r3, 4086f0 <lv_obj_design+0x60>
        *d8 = *s8;
  4086e4:	f811 5b01 	ldrb.w	r5, [r1], #1
  4086e8:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  4086ec:	3b01      	subs	r3, #1
  4086ee:	e7f8      	b.n	4086e2 <lv_obj_design+0x52>
        coords.x1 -= w;
  4086f0:	fa1f f888 	uxth.w	r8, r8
  4086f4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4086f8:	eba3 0308 	sub.w	r3, r3, r8
  4086fc:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
  408700:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  408704:	4498      	add	r8, r3
  408706:	f8ad 8018 	strh.w	r8, [sp, #24]
        coords.y1 -= h;
  40870a:	b280      	uxth	r0, r0
  40870c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  408710:	1a1b      	subs	r3, r3, r0
  408712:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
  408716:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40871a:	4418      	add	r0, r3
  40871c:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
  408720:	463a      	mov	r2, r7
  408722:	a905      	add	r1, sp, #20
  408724:	4630      	mov	r0, r6
  408726:	4b87      	ldr	r3, [pc, #540]	; (408944 <lv_obj_design+0x2b4>)
  408728:	4798      	blx	r3
  40872a:	b908      	cbnz	r0, 408730 <lv_obj_design+0xa0>
  40872c:	2002      	movs	r0, #2
  40872e:	e7bc      	b.n	4086aa <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  408730:	222c      	movs	r2, #44	; 0x2c
  408732:	2100      	movs	r1, #0
  408734:	4620      	mov	r0, r4
  408736:	4b84      	ldr	r3, [pc, #528]	; (408948 <lv_obj_design+0x2b8>)
  408738:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  40873a:	28fc      	cmp	r0, #252	; 0xfc
  40873c:	d801      	bhi.n	408742 <lv_obj_design+0xb2>
  40873e:	2002      	movs	r0, #2
  408740:	e7b3      	b.n	4086aa <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  408742:	2220      	movs	r2, #32
  408744:	2100      	movs	r1, #0
  408746:	4620      	mov	r0, r4
  408748:	4b7d      	ldr	r3, [pc, #500]	; (408940 <lv_obj_design+0x2b0>)
  40874a:	4798      	blx	r3
  40874c:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  40874e:	b108      	cbz	r0, 408754 <lv_obj_design+0xc4>
  408750:	2002      	movs	r0, #2
  408752:	e7aa      	b.n	4086aa <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  408754:	2232      	movs	r2, #50	; 0x32
  408756:	2100      	movs	r1, #0
  408758:	4620      	mov	r0, r4
  40875a:	4b79      	ldr	r3, [pc, #484]	; (408940 <lv_obj_design+0x2b0>)
  40875c:	4798      	blx	r3
  40875e:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  408760:	b108      	cbz	r0, 408766 <lv_obj_design+0xd6>
  408762:	2002      	movs	r0, #2
  408764:	e7a1      	b.n	4086aa <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408766:	f248 020c 	movw	r2, #32780	; 0x800c
  40876a:	2100      	movs	r1, #0
  40876c:	4620      	mov	r0, r4
  40876e:	4b76      	ldr	r3, [pc, #472]	; (408948 <lv_obj_design+0x2b8>)
  408770:	4798      	blx	r3
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  408772:	28fc      	cmp	r0, #252	; 0xfc
  408774:	d901      	bls.n	40877a <lv_obj_design+0xea>
        return LV_DESIGN_RES_COVER;
  408776:	2001      	movs	r0, #1
  408778:	e797      	b.n	4086aa <lv_obj_design+0x1a>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  40877a:	2002      	movs	r0, #2
  40877c:	e795      	b.n	4086aa <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
  40877e:	a805      	add	r0, sp, #20
  408780:	4b72      	ldr	r3, [pc, #456]	; (40894c <lv_obj_design+0x2bc>)
  408782:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408784:	2233      	movs	r2, #51	; 0x33
  408786:	2100      	movs	r1, #0
  408788:	4620      	mov	r0, r4
  40878a:	4b6d      	ldr	r3, [pc, #436]	; (408940 <lv_obj_design+0x2b0>)
  40878c:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  40878e:	b128      	cbz	r0, 40879c <lv_obj_design+0x10c>
            draw_dsc.border_post = 1;
  408790:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  408794:	f043 0301 	orr.w	r3, r3, #1
  408798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  40879c:	aa05      	add	r2, sp, #20
  40879e:	2100      	movs	r1, #0
  4087a0:	4620      	mov	r0, r4
  4087a2:	4b6b      	ldr	r3, [pc, #428]	; (408950 <lv_obj_design+0x2c0>)
  4087a4:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  4087a6:	2204      	movs	r2, #4
  4087a8:	2100      	movs	r1, #0
  4087aa:	4620      	mov	r0, r4
  4087ac:	4d64      	ldr	r5, [pc, #400]	; (408940 <lv_obj_design+0x2b0>)
  4087ae:	47a8      	blx	r5
  4087b0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  4087b2:	2205      	movs	r2, #5
  4087b4:	2100      	movs	r1, #0
  4087b6:	4620      	mov	r0, r4
  4087b8:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  4087ba:	f104 0710 	add.w	r7, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  4087be:	4639      	mov	r1, r7
    uint8_t * d8 = (uint8_t *)dst;
  4087c0:	aa01      	add	r2, sp, #4
  4087c2:	2308      	movs	r3, #8
  4087c4:	e004      	b.n	4087d0 <lv_obj_design+0x140>
        *d8 = *s8;
  4087c6:	f811 5b01 	ldrb.w	r5, [r1], #1
  4087ca:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  4087ce:	3b01      	subs	r3, #1
    while(len) {
  4087d0:	2b00      	cmp	r3, #0
  4087d2:	d1f8      	bne.n	4087c6 <lv_obj_design+0x136>
        coords.x1 -= w;
  4087d4:	fa1f f888 	uxth.w	r8, r8
  4087d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4087dc:	eba3 0308 	sub.w	r3, r3, r8
  4087e0:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
  4087e4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  4087e8:	4498      	add	r8, r3
  4087ea:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
  4087ee:	b280      	uxth	r0, r0
  4087f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4087f4:	1a1b      	subs	r3, r3, r0
  4087f6:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
  4087fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  4087fe:	4418      	add	r0, r3
  408800:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
  408804:	aa05      	add	r2, sp, #20
  408806:	4631      	mov	r1, r6
  408808:	a801      	add	r0, sp, #4
  40880a:	4b52      	ldr	r3, [pc, #328]	; (408954 <lv_obj_design+0x2c4>)
  40880c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  40880e:	2202      	movs	r2, #2
  408810:	2100      	movs	r1, #0
  408812:	4620      	mov	r0, r4
  408814:	4b4a      	ldr	r3, [pc, #296]	; (408940 <lv_obj_design+0x2b0>)
  408816:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  408818:	b908      	cbnz	r0, 40881e <lv_obj_design+0x18e>
    return LV_DESIGN_RES_OK;
  40881a:	2000      	movs	r0, #0
  40881c:	e745      	b.n	4086aa <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  40881e:	201c      	movs	r0, #28
  408820:	4b4d      	ldr	r3, [pc, #308]	; (408958 <lv_obj_design+0x2c8>)
  408822:	4798      	blx	r3
  408824:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  408826:	2201      	movs	r2, #1
  408828:	2100      	movs	r1, #0
  40882a:	4620      	mov	r0, r4
  40882c:	4b44      	ldr	r3, [pc, #272]	; (408940 <lv_obj_design+0x2b0>)
  40882e:	4798      	blx	r3
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  408830:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  408834:	f013 0f01 	tst.w	r3, #1
  408838:	d01e      	beq.n	408878 <lv_obj_design+0x1e8>
  40883a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  40883e:	2b01      	cmp	r3, #1
  408840:	d91a      	bls.n	408878 <lv_obj_design+0x1e8>
  408842:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  408846:	2b00      	cmp	r3, #0
  408848:	dd16      	ble.n	408878 <lv_obj_design+0x1e8>
                cc_area.x1 = obj->coords.x1 + 1;
  40884a:	8a23      	ldrh	r3, [r4, #16]
  40884c:	3301      	adds	r3, #1
  40884e:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
  408852:	8a63      	ldrh	r3, [r4, #18]
  408854:	3301      	adds	r3, #1
  408856:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
  40885a:	8aa3      	ldrh	r3, [r4, #20]
  40885c:	3b01      	subs	r3, #1
  40885e:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
  408862:	8ae3      	ldrh	r3, [r4, #22]
  408864:	3b01      	subs	r3, #1
  408866:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
  40886a:	2300      	movs	r3, #0
  40886c:	4602      	mov	r2, r0
  40886e:	a903      	add	r1, sp, #12
  408870:	4628      	mov	r0, r5
  408872:	4e3a      	ldr	r6, [pc, #232]	; (40895c <lv_obj_design+0x2cc>)
  408874:	47b0      	blx	r6
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  408876:	e005      	b.n	408884 <lv_obj_design+0x1f4>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
  408878:	2300      	movs	r3, #0
  40887a:	4602      	mov	r2, r0
  40887c:	4639      	mov	r1, r7
  40887e:	4628      	mov	r0, r5
  408880:	4e36      	ldr	r6, [pc, #216]	; (40895c <lv_obj_design+0x2cc>)
  408882:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
  408884:	f504 7118 	add.w	r1, r4, #608	; 0x260
  408888:	4628      	mov	r0, r5
  40888a:	4b35      	ldr	r3, [pc, #212]	; (408960 <lv_obj_design+0x2d0>)
  40888c:	4798      	blx	r3
  40888e:	e7c4      	b.n	40881a <lv_obj_design+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408890:	2202      	movs	r2, #2
  408892:	2100      	movs	r1, #0
  408894:	4b2a      	ldr	r3, [pc, #168]	; (408940 <lv_obj_design+0x2b0>)
  408896:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  408898:	b938      	cbnz	r0, 4088aa <lv_obj_design+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  40889a:	2233      	movs	r2, #51	; 0x33
  40889c:	2100      	movs	r1, #0
  40889e:	4620      	mov	r0, r4
  4088a0:	4b27      	ldr	r3, [pc, #156]	; (408940 <lv_obj_design+0x2b0>)
  4088a2:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  4088a4:	b940      	cbnz	r0, 4088b8 <lv_obj_design+0x228>
    return LV_DESIGN_RES_OK;
  4088a6:	2000      	movs	r0, #0
  4088a8:	e6ff      	b.n	4086aa <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
  4088aa:	f504 7018 	add.w	r0, r4, #608	; 0x260
  4088ae:	4b2d      	ldr	r3, [pc, #180]	; (408964 <lv_obj_design+0x2d4>)
  4088b0:	4798      	blx	r3
            _lv_mem_buf_release(param);
  4088b2:	4b2d      	ldr	r3, [pc, #180]	; (408968 <lv_obj_design+0x2d8>)
  4088b4:	4798      	blx	r3
  4088b6:	e7f0      	b.n	40889a <lv_obj_design+0x20a>
            lv_draw_rect_dsc_init(&draw_dsc);
  4088b8:	a805      	add	r0, sp, #20
  4088ba:	4b24      	ldr	r3, [pc, #144]	; (40894c <lv_obj_design+0x2bc>)
  4088bc:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  4088be:	2500      	movs	r5, #0
  4088c0:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  4088c4:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  4088c8:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
  4088cc:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  4088d0:	aa05      	add	r2, sp, #20
  4088d2:	4629      	mov	r1, r5
  4088d4:	4620      	mov	r0, r4
  4088d6:	4b1e      	ldr	r3, [pc, #120]	; (408950 <lv_obj_design+0x2c0>)
  4088d8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  4088da:	2204      	movs	r2, #4
  4088dc:	4629      	mov	r1, r5
  4088de:	4620      	mov	r0, r4
  4088e0:	4f17      	ldr	r7, [pc, #92]	; (408940 <lv_obj_design+0x2b0>)
  4088e2:	47b8      	blx	r7
  4088e4:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  4088e6:	2205      	movs	r2, #5
  4088e8:	4629      	mov	r1, r5
  4088ea:	4620      	mov	r0, r4
  4088ec:	47b8      	blx	r7
            lv_area_copy(&coords, &obj->coords);
  4088ee:	3410      	adds	r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  4088f0:	aa03      	add	r2, sp, #12
  4088f2:	2308      	movs	r3, #8
  4088f4:	e004      	b.n	408900 <lv_obj_design+0x270>
        *d8 = *s8;
  4088f6:	f814 1b01 	ldrb.w	r1, [r4], #1
  4088fa:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  4088fe:	3b01      	subs	r3, #1
    while(len) {
  408900:	2b00      	cmp	r3, #0
  408902:	d1f8      	bne.n	4088f6 <lv_obj_design+0x266>
            coords.x1 -= w;
  408904:	fa1f f788 	uxth.w	r7, r8
  408908:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40890c:	1bdb      	subs	r3, r3, r7
  40890e:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
  408912:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  408916:	441f      	add	r7, r3
  408918:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
  40891c:	b280      	uxth	r0, r0
  40891e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  408922:	1a1b      	subs	r3, r3, r0
  408924:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
  408928:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40892c:	4418      	add	r0, r3
  40892e:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
  408932:	aa05      	add	r2, sp, #20
  408934:	4631      	mov	r1, r6
  408936:	a803      	add	r0, sp, #12
  408938:	4b06      	ldr	r3, [pc, #24]	; (408954 <lv_obj_design+0x2c4>)
  40893a:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  40893c:	2000      	movs	r0, #0
  40893e:	e6b4      	b.n	4086aa <lv_obj_design+0x1a>
  408940:	00407445 	.word	0x00407445
  408944:	00415829 	.word	0x00415829
  408948:	00406eb9 	.word	0x00406eb9
  40894c:	0041245d 	.word	0x0041245d
  408950:	0040833d 	.word	0x0040833d
  408954:	004124a9 	.word	0x004124a9
  408958:	00416965 	.word	0x00416965
  40895c:	0040fe2d 	.word	0x0040fe2d
  408960:	0040fbb1 	.word	0x0040fbb1
  408964:	0040fc59 	.word	0x0040fc59
  408968:	00416715 	.word	0x00416715

0040896c <lv_obj_init_draw_label_dsc>:
{
  40896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40896e:	4605      	mov	r5, r0
  408970:	460e      	mov	r6, r1
  408972:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
  408974:	f248 028c 	movw	r2, #32908	; 0x808c
  408978:	4b2a      	ldr	r3, [pc, #168]	; (408a24 <lv_obj_init_draw_label_dsc+0xb8>)
  40897a:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
  40897c:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  40897e:	2802      	cmp	r0, #2
  408980:	d800      	bhi.n	408984 <lv_obj_init_draw_label_dsc+0x18>
  408982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408984:	f248 020c 	movw	r2, #32780	; 0x800c
  408988:	4631      	mov	r1, r6
  40898a:	4628      	mov	r0, r5
  40898c:	4b25      	ldr	r3, [pc, #148]	; (408a24 <lv_obj_init_draw_label_dsc+0xb8>)
  40898e:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408990:	28fc      	cmp	r0, #252	; 0xfc
  408992:	d805      	bhi.n	4089a0 <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408994:	7b23      	ldrb	r3, [r4, #12]
  408996:	fb10 f003 	smulbb	r0, r0, r3
  40899a:	f3c0 2007 	ubfx	r0, r0, #8, #8
  40899e:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  4089a0:	7b23      	ldrb	r3, [r4, #12]
  4089a2:	2b02      	cmp	r3, #2
  4089a4:	d9ed      	bls.n	408982 <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4089a6:	f248 0289 	movw	r2, #32905	; 0x8089
  4089aa:	4631      	mov	r1, r6
  4089ac:	4628      	mov	r0, r5
  4089ae:	4b1e      	ldr	r3, [pc, #120]	; (408a28 <lv_obj_init_draw_label_dsc+0xbc>)
  4089b0:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
  4089b2:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  4089b4:	f248 0280 	movw	r2, #32896	; 0x8080
  4089b8:	4631      	mov	r1, r6
  4089ba:	4628      	mov	r0, r5
  4089bc:	4f1b      	ldr	r7, [pc, #108]	; (408a2c <lv_obj_init_draw_label_dsc+0xc0>)
  4089be:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
  4089c0:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  4089c2:	f248 0281 	movw	r2, #32897	; 0x8081
  4089c6:	4631      	mov	r1, r6
  4089c8:	4628      	mov	r0, r5
  4089ca:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
  4089cc:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  4089ce:	f248 0282 	movw	r2, #32898	; 0x8082
  4089d2:	4631      	mov	r1, r6
  4089d4:	4628      	mov	r0, r5
  4089d6:	47b8      	blx	r7
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
  4089d8:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  4089dc:	f248 0283 	movw	r2, #32899	; 0x8083
  4089e0:	4631      	mov	r1, r6
  4089e2:	4628      	mov	r0, r5
  4089e4:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
  4089e6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4089ea:	f248 028e 	movw	r2, #32910	; 0x808e
  4089ee:	4631      	mov	r1, r6
  4089f0:	4628      	mov	r0, r5
  4089f2:	4b0f      	ldr	r3, [pc, #60]	; (408a30 <lv_obj_init_draw_label_dsc+0xc4>)
  4089f4:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
  4089f6:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
  4089f8:	6962      	ldr	r2, [r4, #20]
  4089fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4089fe:	429a      	cmp	r2, r3
  408a00:	d0bf      	beq.n	408982 <lv_obj_init_draw_label_dsc+0x16>
  408a02:	69a2      	ldr	r2, [r4, #24]
  408a04:	429a      	cmp	r2, r3
  408a06:	d0bc      	beq.n	408982 <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  408a08:	f248 028a 	movw	r2, #32906	; 0x808a
  408a0c:	4631      	mov	r1, r6
  408a0e:	4628      	mov	r0, r5
  408a10:	4f05      	ldr	r7, [pc, #20]	; (408a28 <lv_obj_init_draw_label_dsc+0xbc>)
  408a12:	47b8      	blx	r7
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
  408a14:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  408a16:	f248 028b 	movw	r2, #32907	; 0x808b
  408a1a:	4631      	mov	r1, r6
  408a1c:	4628      	mov	r0, r5
  408a1e:	47b8      	blx	r7
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
  408a20:	80a0      	strh	r0, [r4, #4]
  408a22:	e7ae      	b.n	408982 <lv_obj_init_draw_label_dsc+0x16>
  408a24:	00406eb9 	.word	0x00406eb9
  408a28:	00406e31 	.word	0x00406e31
  408a2c:	00407445 	.word	0x00407445
  408a30:	0040733d 	.word	0x0040733d

00408a34 <lv_obj_init_draw_img_dsc>:
{
  408a34:	b570      	push	{r4, r5, r6, lr}
  408a36:	4605      	mov	r5, r0
  408a38:	460e      	mov	r6, r1
  408a3a:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  408a3c:	f248 02ac 	movw	r2, #32940	; 0x80ac
  408a40:	4b25      	ldr	r3, [pc, #148]	; (408ad8 <lv_obj_init_draw_img_dsc+0xa4>)
  408a42:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
  408a44:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408a46:	2802      	cmp	r0, #2
  408a48:	d800      	bhi.n	408a4c <lv_obj_init_draw_img_dsc+0x18>
  408a4a:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408a4c:	f248 020c 	movw	r2, #32780	; 0x800c
  408a50:	4631      	mov	r1, r6
  408a52:	4628      	mov	r0, r5
  408a54:	4b20      	ldr	r3, [pc, #128]	; (408ad8 <lv_obj_init_draw_img_dsc+0xa4>)
  408a56:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408a58:	28fc      	cmp	r0, #252	; 0xfc
  408a5a:	d805      	bhi.n	408a68 <lv_obj_init_draw_img_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408a5c:	7823      	ldrb	r3, [r4, #0]
  408a5e:	fb10 f003 	smulbb	r0, r0, r3
  408a62:	f3c0 2007 	ubfx	r0, r0, #8, #8
  408a66:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408a68:	7823      	ldrb	r3, [r4, #0]
  408a6a:	2b02      	cmp	r3, #2
  408a6c:	d9ed      	bls.n	408a4a <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
  408a6e:	2300      	movs	r3, #0
  408a70:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
  408a72:	f44f 7380 	mov.w	r3, #256	; 0x100
  408a76:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  408a78:	8aab      	ldrh	r3, [r5, #20]
  408a7a:	8a2a      	ldrh	r2, [r5, #16]
  408a7c:	1a9b      	subs	r3, r3, r2
  408a7e:	b29b      	uxth	r3, r3
  408a80:	3301      	adds	r3, #1
  408a82:	b21b      	sxth	r3, r3
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408a84:	2b00      	cmp	r3, #0
  408a86:	db1b      	blt.n	408ac0 <lv_obj_init_draw_img_dsc+0x8c>
  408a88:	105b      	asrs	r3, r3, #1
  408a8a:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  408a8c:	8aeb      	ldrh	r3, [r5, #22]
  408a8e:	8a6a      	ldrh	r2, [r5, #18]
  408a90:	1a9b      	subs	r3, r3, r2
  408a92:	b29b      	uxth	r3, r3
  408a94:	3301      	adds	r3, #1
  408a96:	b21b      	sxth	r3, r3
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408a98:	2b00      	cmp	r3, #0
  408a9a:	db13      	blt.n	408ac4 <lv_obj_init_draw_img_dsc+0x90>
  408a9c:	105b      	asrs	r3, r3, #1
  408a9e:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  408aa0:	f248 02ad 	movw	r2, #32941	; 0x80ad
  408aa4:	4631      	mov	r1, r6
  408aa6:	4628      	mov	r0, r5
  408aa8:	4b0b      	ldr	r3, [pc, #44]	; (408ad8 <lv_obj_init_draw_img_dsc+0xa4>)
  408aaa:	4798      	blx	r3
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
  408aac:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
  408aae:	b958      	cbnz	r0, 408ac8 <lv_obj_init_draw_img_dsc+0x94>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  408ab0:	f248 02a0 	movw	r2, #32928	; 0x80a0
  408ab4:	4631      	mov	r1, r6
  408ab6:	4628      	mov	r0, r5
  408ab8:	4b08      	ldr	r3, [pc, #32]	; (408adc <lv_obj_init_draw_img_dsc+0xa8>)
  408aba:	4798      	blx	r3
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
  408abc:	73a0      	strb	r0, [r4, #14]
  408abe:	e7c4      	b.n	408a4a <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408ac0:	3301      	adds	r3, #1
  408ac2:	e7e1      	b.n	408a88 <lv_obj_init_draw_img_dsc+0x54>
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408ac4:	3301      	adds	r3, #1
  408ac6:	e7e9      	b.n	408a9c <lv_obj_init_draw_img_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  408ac8:	f248 02a9 	movw	r2, #32937	; 0x80a9
  408acc:	4631      	mov	r1, r6
  408ace:	4628      	mov	r0, r5
  408ad0:	4b03      	ldr	r3, [pc, #12]	; (408ae0 <lv_obj_init_draw_img_dsc+0xac>)
  408ad2:	4798      	blx	r3
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
  408ad4:	81a0      	strh	r0, [r4, #12]
  408ad6:	e7eb      	b.n	408ab0 <lv_obj_init_draw_img_dsc+0x7c>
  408ad8:	00406eb9 	.word	0x00406eb9
  408adc:	00407445 	.word	0x00407445
  408ae0:	00406e31 	.word	0x00406e31

00408ae4 <lv_obj_init_draw_line_dsc>:
{
  408ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408ae6:	4605      	mov	r5, r0
  408ae8:	460e      	mov	r6, r1
  408aea:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  408aec:	2290      	movs	r2, #144	; 0x90
  408aee:	4b24      	ldr	r3, [pc, #144]	; (408b80 <lv_obj_init_draw_line_dsc+0x9c>)
  408af0:	4798      	blx	r3
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
  408af2:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
  408af4:	b900      	cbnz	r0, 408af8 <lv_obj_init_draw_line_dsc+0x14>
  408af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
  408af8:	229c      	movs	r2, #156	; 0x9c
  408afa:	4631      	mov	r1, r6
  408afc:	4628      	mov	r0, r5
  408afe:	4b21      	ldr	r3, [pc, #132]	; (408b84 <lv_obj_init_draw_line_dsc+0xa0>)
  408b00:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
  408b02:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408b04:	2802      	cmp	r0, #2
  408b06:	d9f6      	bls.n	408af6 <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408b08:	f248 020c 	movw	r2, #32780	; 0x800c
  408b0c:	4631      	mov	r1, r6
  408b0e:	4628      	mov	r0, r5
  408b10:	4b1c      	ldr	r3, [pc, #112]	; (408b84 <lv_obj_init_draw_line_dsc+0xa0>)
  408b12:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408b14:	28fc      	cmp	r0, #252	; 0xfc
  408b16:	d805      	bhi.n	408b24 <lv_obj_init_draw_line_dsc+0x40>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408b18:	7a23      	ldrb	r3, [r4, #8]
  408b1a:	fb10 f003 	smulbb	r0, r0, r3
  408b1e:	f3c0 2007 	ubfx	r0, r0, #8, #8
  408b22:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408b24:	7a23      	ldrb	r3, [r4, #8]
  408b26:	2b02      	cmp	r3, #2
  408b28:	d9e5      	bls.n	408af6 <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  408b2a:	2299      	movs	r2, #153	; 0x99
  408b2c:	4631      	mov	r1, r6
  408b2e:	4628      	mov	r0, r5
  408b30:	4b15      	ldr	r3, [pc, #84]	; (408b88 <lv_obj_init_draw_line_dsc+0xa4>)
  408b32:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
  408b34:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  408b36:	2292      	movs	r2, #146	; 0x92
  408b38:	4631      	mov	r1, r6
  408b3a:	4628      	mov	r0, r5
  408b3c:	4b10      	ldr	r3, [pc, #64]	; (408b80 <lv_obj_init_draw_line_dsc+0x9c>)
  408b3e:	4798      	blx	r3
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
  408b40:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
  408b42:	b9b0      	cbnz	r0, 408b72 <lv_obj_init_draw_line_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  408b44:	2294      	movs	r2, #148	; 0x94
  408b46:	4631      	mov	r1, r6
  408b48:	4628      	mov	r0, r5
  408b4a:	4f0d      	ldr	r7, [pc, #52]	; (408b80 <lv_obj_init_draw_line_dsc+0x9c>)
  408b4c:	47b8      	blx	r7
  408b4e:	3000      	adds	r0, #0
  408b50:	bf18      	it	ne
  408b52:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
  408b54:	7a63      	ldrb	r3, [r4, #9]
  408b56:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
  408b5a:	f360 03c3 	bfi	r3, r0, #3, #1
  408b5e:	7263      	strb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  408b60:	2291      	movs	r2, #145	; 0x91
  408b62:	4631      	mov	r1, r6
  408b64:	4628      	mov	r0, r5
  408b66:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
  408b68:	7a63      	ldrb	r3, [r4, #9]
  408b6a:	f360 0301 	bfi	r3, r0, #0, #2
  408b6e:	7263      	strb	r3, [r4, #9]
  408b70:	e7c1      	b.n	408af6 <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  408b72:	2293      	movs	r2, #147	; 0x93
  408b74:	4631      	mov	r1, r6
  408b76:	4628      	mov	r0, r5
  408b78:	4b01      	ldr	r3, [pc, #4]	; (408b80 <lv_obj_init_draw_line_dsc+0x9c>)
  408b7a:	4798      	blx	r3
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
  408b7c:	80e0      	strh	r0, [r4, #6]
  408b7e:	e7e1      	b.n	408b44 <lv_obj_init_draw_line_dsc+0x60>
  408b80:	00407445 	.word	0x00407445
  408b84:	00406eb9 	.word	0x00406eb9
  408b88:	00406e31 	.word	0x00406e31

00408b8c <style_snapshot>:
{
  408b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b90:	b083      	sub	sp, #12
  408b92:	4605      	mov	r5, r0
  408b94:	4689      	mov	r9, r1
  408b96:	4614      	mov	r4, r2
    _lv_obj_disable_style_caching(obj, true);
  408b98:	2101      	movs	r1, #1
  408b9a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 408d8c <style_snapshot+0x200>
  408b9e:	47c0      	blx	r8
    _lv_memset_00(shot, sizeof(style_snapshot_t));
  408ba0:	21bc      	movs	r1, #188	; 0xbc
  408ba2:	4620      	mov	r0, r4
  408ba4:	4b6d      	ldr	r3, [pc, #436]	; (408d5c <style_snapshot+0x1d0>)
  408ba6:	4798      	blx	r3
    lv_draw_rect_dsc_init(&shot->rect);
  408ba8:	4620      	mov	r0, r4
  408baa:	4b6d      	ldr	r3, [pc, #436]	; (408d60 <style_snapshot+0x1d4>)
  408bac:	4798      	blx	r3
    lv_draw_label_dsc_init(&shot->label);
  408bae:	f104 0a54 	add.w	sl, r4, #84	; 0x54
  408bb2:	4650      	mov	r0, sl
  408bb4:	4b6b      	ldr	r3, [pc, #428]	; (408d64 <style_snapshot+0x1d8>)
  408bb6:	4798      	blx	r3
    lv_draw_img_dsc_init(&shot->img);
  408bb8:	f104 0382 	add.w	r3, r4, #130	; 0x82
  408bbc:	9301      	str	r3, [sp, #4]
  408bbe:	4618      	mov	r0, r3
  408bc0:	4b69      	ldr	r3, [pc, #420]	; (408d68 <style_snapshot+0x1dc>)
  408bc2:	4798      	blx	r3
    lv_draw_line_dsc_init(&shot->line);
  408bc4:	f104 0678 	add.w	r6, r4, #120	; 0x78
  408bc8:	4630      	mov	r0, r6
  408bca:	4b68      	ldr	r3, [pc, #416]	; (408d6c <style_snapshot+0x1e0>)
  408bcc:	4798      	blx	r3
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  408bce:	4649      	mov	r1, r9
  408bd0:	4628      	mov	r0, r5
  408bd2:	4b67      	ldr	r3, [pc, #412]	; (408d70 <style_snapshot+0x1e4>)
  408bd4:	4798      	blx	r3
  408bd6:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
  408bd8:	7943      	ldrb	r3, [r0, #5]
  408bda:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
  408bde:	f043 0301 	orr.w	r3, r3, #1
  408be2:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
  408be4:	4622      	mov	r2, r4
  408be6:	4649      	mov	r1, r9
  408be8:	4628      	mov	r0, r5
  408bea:	4b62      	ldr	r3, [pc, #392]	; (408d74 <style_snapshot+0x1e8>)
  408bec:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
  408bee:	4652      	mov	r2, sl
  408bf0:	4649      	mov	r1, r9
  408bf2:	4628      	mov	r0, r5
  408bf4:	4b60      	ldr	r3, [pc, #384]	; (408d78 <style_snapshot+0x1ec>)
  408bf6:	4798      	blx	r3
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
  408bf8:	9a01      	ldr	r2, [sp, #4]
  408bfa:	4649      	mov	r1, r9
  408bfc:	4628      	mov	r0, r5
  408bfe:	4b5f      	ldr	r3, [pc, #380]	; (408d7c <style_snapshot+0x1f0>)
  408c00:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
  408c02:	4632      	mov	r2, r6
  408c04:	4649      	mov	r1, r9
  408c06:	4628      	mov	r0, r5
  408c08:	4b5d      	ldr	r3, [pc, #372]	; (408d80 <style_snapshot+0x1f4>)
  408c0a:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  408c0c:	2210      	movs	r2, #16
  408c0e:	4649      	mov	r1, r9
  408c10:	4628      	mov	r0, r5
  408c12:	4e5c      	ldr	r6, [pc, #368]	; (408d84 <style_snapshot+0x1f8>)
  408c14:	47b0      	blx	r6
    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
  408c16:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  408c1a:	2211      	movs	r2, #17
  408c1c:	4649      	mov	r1, r9
  408c1e:	4628      	mov	r0, r5
  408c20:	47b0      	blx	r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
  408c22:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  408c26:	2213      	movs	r2, #19
  408c28:	4649      	mov	r1, r9
  408c2a:	4628      	mov	r0, r5
  408c2c:	47b0      	blx	r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
  408c2e:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  408c32:	2212      	movs	r2, #18
  408c34:	4649      	mov	r1, r9
  408c36:	4628      	mov	r0, r5
  408c38:	47b0      	blx	r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
  408c3a:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  408c3e:	2214      	movs	r2, #20
  408c40:	4649      	mov	r1, r9
  408c42:	4628      	mov	r0, r5
  408c44:	47b0      	blx	r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
  408c46:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  408c4a:	2215      	movs	r2, #21
  408c4c:	4649      	mov	r1, r9
  408c4e:	4628      	mov	r0, r5
  408c50:	47b0      	blx	r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
  408c52:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  408c56:	2216      	movs	r2, #22
  408c58:	4649      	mov	r1, r9
  408c5a:	4628      	mov	r0, r5
  408c5c:	47b0      	blx	r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
  408c5e:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  408c62:	2217      	movs	r2, #23
  408c64:	4649      	mov	r1, r9
  408c66:	4628      	mov	r0, r5
  408c68:	47b0      	blx	r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
  408c6a:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  408c6e:	2218      	movs	r2, #24
  408c70:	4649      	mov	r1, r9
  408c72:	4628      	mov	r0, r5
  408c74:	47b0      	blx	r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
  408c76:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  408c7a:	2203      	movs	r2, #3
  408c7c:	4649      	mov	r1, r9
  408c7e:	4628      	mov	r0, r5
  408c80:	47b0      	blx	r6
    shot->size = lv_obj_get_style_size(obj, part);
  408c82:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408c86:	2204      	movs	r2, #4
  408c88:	4649      	mov	r1, r9
  408c8a:	4628      	mov	r0, r5
  408c8c:	47b0      	blx	r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
  408c8e:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408c92:	2205      	movs	r2, #5
  408c94:	4649      	mov	r1, r9
  408c96:	4628      	mov	r0, r5
  408c98:	47b0      	blx	r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
  408c9a:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  408c9e:	2206      	movs	r2, #6
  408ca0:	4649      	mov	r1, r9
  408ca2:	4628      	mov	r0, r5
  408ca4:	47b0      	blx	r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
  408ca6:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  408caa:	2207      	movs	r2, #7
  408cac:	4649      	mov	r1, r9
  408cae:	4628      	mov	r0, r5
  408cb0:	47b0      	blx	r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
  408cb2:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  408cb6:	22c0      	movs	r2, #192	; 0xc0
  408cb8:	4649      	mov	r1, r9
  408cba:	4628      	mov	r0, r5
  408cbc:	47b0      	blx	r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
  408cbe:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
  408cc2:	22c1      	movs	r2, #193	; 0xc1
  408cc4:	4649      	mov	r1, r9
  408cc6:	4628      	mov	r0, r5
  408cc8:	47b0      	blx	r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
  408cca:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  408cce:	22c2      	movs	r2, #194	; 0xc2
  408cd0:	4649      	mov	r1, r9
  408cd2:	4628      	mov	r0, r5
  408cd4:	47b0      	blx	r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
  408cd6:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  408cda:	22c3      	movs	r2, #195	; 0xc3
  408cdc:	4649      	mov	r1, r9
  408cde:	4628      	mov	r0, r5
  408ce0:	47b0      	blx	r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
  408ce2:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  408ce6:	22c9      	movs	r2, #201	; 0xc9
  408ce8:	4649      	mov	r1, r9
  408cea:	4628      	mov	r0, r5
  408cec:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 408d90 <style_snapshot+0x204>
  408cf0:	47d0      	blx	sl
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
  408cf2:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  408cf6:	22ca      	movs	r2, #202	; 0xca
  408cf8:	4649      	mov	r1, r9
  408cfa:	4628      	mov	r0, r5
  408cfc:	47d0      	blx	sl
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
  408cfe:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408d02:	f248 020c 	movw	r2, #32780	; 0x800c
  408d06:	4649      	mov	r1, r9
  408d08:	4628      	mov	r0, r5
  408d0a:	4b1f      	ldr	r3, [pc, #124]	; (408d88 <style_snapshot+0x1fc>)
  408d0c:	4798      	blx	r3
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
  408d0e:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408d12:	2202      	movs	r2, #2
  408d14:	4649      	mov	r1, r9
  408d16:	4628      	mov	r0, r5
  408d18:	47b0      	blx	r6
  408d1a:	3000      	adds	r0, #0
  408d1c:	bf18      	it	ne
  408d1e:	2001      	movne	r0, #1
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
  408d20:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408d24:	f360 0300 	bfi	r3, r0, #0, #1
  408d28:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408d2c:	2233      	movs	r2, #51	; 0x33
  408d2e:	4649      	mov	r1, r9
  408d30:	4628      	mov	r0, r5
  408d32:	47b0      	blx	r6
  408d34:	3000      	adds	r0, #0
  408d36:	bf18      	it	ne
  408d38:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
  408d3a:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408d3e:	f360 0341 	bfi	r3, r0, #1, #1
  408d42:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
  408d46:	2100      	movs	r1, #0
  408d48:	4628      	mov	r0, r5
  408d4a:	47c0      	blx	r8
    list->skip_trans = trans_ori;
  408d4c:	797b      	ldrb	r3, [r7, #5]
  408d4e:	f36b 0300 	bfi	r3, fp, #0, #1
  408d52:	717b      	strb	r3, [r7, #5]
}
  408d54:	b003      	add	sp, #12
  408d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d5a:	bf00      	nop
  408d5c:	00416af1 	.word	0x00416af1
  408d60:	0041245d 	.word	0x0041245d
  408d64:	0040ded5 	.word	0x0040ded5
  408d68:	0040d341 	.word	0x0040d341
  408d6c:	0040ed25 	.word	0x0040ed25
  408d70:	00405c0d 	.word	0x00405c0d
  408d74:	0040833d 	.word	0x0040833d
  408d78:	0040896d 	.word	0x0040896d
  408d7c:	00408a35 	.word	0x00408a35
  408d80:	00408ae5 	.word	0x00408ae5
  408d84:	00407445 	.word	0x00407445
  408d88:	00406eb9 	.word	0x00406eb9
  408d8c:	00405d01 	.word	0x00405d01
  408d90:	00406e31 	.word	0x00406e31

00408d94 <lv_obj_set_state>:
    if(obj->state == new_state) return;
  408d94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  408d98:	428b      	cmp	r3, r1
  408d9a:	f000 80e4 	beq.w	408f66 <lv_obj_set_state+0x1d2>
{
  408d9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408da2:	b0e5      	sub	sp, #404	; 0x194
  408da4:	4688      	mov	r8, r1
  408da6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408da8:	4b6f      	ldr	r3, [pc, #444]	; (408f68 <lv_obj_set_state+0x1d4>)
  408daa:	4798      	blx	r3
  408dac:	b120      	cbz	r0, 408db8 <lv_obj_set_state+0x24>
    lv_state_t prev_state = obj->state;
  408dae:	f894 a03d 	ldrb.w	sl, [r4, #61]	; 0x3d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408db2:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
  408db4:	46ab      	mov	fp, r5
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408db6:	e007      	b.n	408dc8 <lv_obj_set_state+0x34>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408db8:	4622      	mov	r2, r4
  408dba:	2300      	movs	r3, #0
  408dbc:	486b      	ldr	r0, [pc, #428]	; (408f6c <lv_obj_set_state+0x1d8>)
  408dbe:	496c      	ldr	r1, [pc, #432]	; (408f70 <lv_obj_set_state+0x1dc>)
  408dc0:	4788      	blx	r1
  408dc2:	e7fe      	b.n	408dc2 <lv_obj_set_state+0x2e>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408dc4:	3501      	adds	r5, #1
  408dc6:	b2ed      	uxtb	r5, r5
  408dc8:	2d3f      	cmp	r5, #63	; 0x3f
  408dca:	d81c      	bhi.n	408e06 <lv_obj_set_state+0x72>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408dcc:	4629      	mov	r1, r5
  408dce:	4620      	mov	r0, r4
  408dd0:	4b68      	ldr	r3, [pc, #416]	; (408f74 <lv_obj_set_state+0x1e0>)
  408dd2:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408dd4:	b1b8      	cbz	r0, 408e06 <lv_obj_set_state+0x72>
        obj->state = prev_state;
  408dd6:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
  408dda:	aa06      	add	r2, sp, #24
  408ddc:	4629      	mov	r1, r5
  408dde:	4620      	mov	r0, r4
  408de0:	4e65      	ldr	r6, [pc, #404]	; (408f78 <lv_obj_set_state+0x1e4>)
  408de2:	47b0      	blx	r6
        obj->state = new_state;
  408de4:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
  408de8:	aa35      	add	r2, sp, #212	; 0xd4
  408dea:	4629      	mov	r1, r5
  408dec:	4620      	mov	r0, r4
  408dee:	47b0      	blx	r6
        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
  408df0:	a935      	add	r1, sp, #212	; 0xd4
  408df2:	a806      	add	r0, sp, #24
  408df4:	4b61      	ldr	r3, [pc, #388]	; (408f7c <lv_obj_set_state+0x1e8>)
  408df6:	4798      	blx	r3
        if(r == STYLE_COMPARE_DIFF) {
  408df8:	2802      	cmp	r0, #2
  408dfa:	d003      	beq.n	408e04 <lv_obj_set_state+0x70>
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
  408dfc:	2801      	cmp	r0, #1
  408dfe:	d1e1      	bne.n	408dc4 <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
  408e00:	4683      	mov	fp, r0
  408e02:	e7df      	b.n	408dc4 <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_DIFF;
  408e04:	4683      	mov	fp, r0
    obj->state = new_state;
  408e06:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
  408e0a:	f1bb 0f00 	cmp.w	fp, #0
  408e0e:	f000 80a3 	beq.w	408f58 <lv_obj_set_state+0x1c4>
  408e12:	2500      	movs	r5, #0
  408e14:	f8cd a014 	str.w	sl, [sp, #20]
  408e18:	e04b      	b.n	408eb2 <lv_obj_set_state+0x11e>
                    a.early_apply = 0;
  408e1a:	f89d 310e 	ldrb.w	r3, [sp, #270]	; 0x10e
  408e1e:	f36f 0300 	bfc	r3, #0, #1
  408e22:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
                    lv_anim_start(&a);
  408e26:	a835      	add	r0, sp, #212	; 0xd4
  408e28:	4b55      	ldr	r3, [pc, #340]	; (408f80 <lv_obj_set_state+0x1ec>)
  408e2a:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  408e2c:	3601      	adds	r6, #1
  408e2e:	b2f6      	uxtb	r6, r6
  408e30:	2e05      	cmp	r6, #5
  408e32:	d836      	bhi.n	408ea2 <lv_obj_set_state+0x10e>
            if(props[i] != 0) {
  408e34:	ab06      	add	r3, sp, #24
  408e36:	f833 7016 	ldrh.w	r7, [r3, r6, lsl #1]
  408e3a:	2f00      	cmp	r7, #0
  408e3c:	d0f6      	beq.n	408e2c <lv_obj_set_state+0x98>
                _lv_style_list_add_trans_style(style_list);
  408e3e:	4650      	mov	r0, sl
  408e40:	4b50      	ldr	r3, [pc, #320]	; (408f84 <lv_obj_set_state+0x1f0>)
  408e42:	4798      	blx	r3
                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
  408e44:	f8cd 8000 	str.w	r8, [sp]
  408e48:	9b05      	ldr	r3, [sp, #20]
  408e4a:	462a      	mov	r2, r5
  408e4c:	4639      	mov	r1, r7
  408e4e:	4620      	mov	r0, r4
  408e50:	f8df 9158 	ldr.w	r9, [pc, #344]	; 408fac <lv_obj_set_state+0x218>
  408e54:	47c8      	blx	r9
                if(tr) {
  408e56:	4681      	mov	r9, r0
  408e58:	2800      	cmp	r0, #0
  408e5a:	d0e7      	beq.n	408e2c <lv_obj_set_state+0x98>
                    tr->obj = obj;
  408e5c:	6004      	str	r4, [r0, #0]
                    tr->prop = props[i];
  408e5e:	8087      	strh	r7, [r0, #4]
                    tr->part = part;
  408e60:	7185      	strb	r5, [r0, #6]
                    lv_anim_init(&a);
  408e62:	a835      	add	r0, sp, #212	; 0xd4
  408e64:	4b48      	ldr	r3, [pc, #288]	; (408f88 <lv_obj_set_state+0x1f4>)
  408e66:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  408e68:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
  408e6c:	4b47      	ldr	r3, [pc, #284]	; (408f8c <lv_obj_set_state+0x1f8>)
  408e6e:	9336      	str	r3, [sp, #216]	; 0xd8
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
  408e70:	4b47      	ldr	r3, [pc, #284]	; (408f90 <lv_obj_set_state+0x1fc>)
  408e72:	9337      	str	r3, [sp, #220]	; 0xdc
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
  408e74:	4b47      	ldr	r3, [pc, #284]	; (408f94 <lv_obj_set_state+0x200>)
  408e76:	9338      	str	r3, [sp, #224]	; 0xe0
    a->start = start;
  408e78:	2300      	movs	r3, #0
  408e7a:	933b      	str	r3, [sp, #236]	; 0xec
    a->current = start;
  408e7c:	933c      	str	r3, [sp, #240]	; 0xf0
    a->end   = end;
  408e7e:	23ff      	movs	r3, #255	; 0xff
  408e80:	933d      	str	r3, [sp, #244]	; 0xf4
    a->time     = duration;
  408e82:	9b04      	ldr	r3, [sp, #16]
  408e84:	933e      	str	r3, [sp, #248]	; 0xf8
    a->act_time = -(int32_t)(delay);
  408e86:	9b03      	ldr	r3, [sp, #12]
  408e88:	425b      	negs	r3, r3
  408e8a:	933f      	str	r3, [sp, #252]	; 0xfc
    const uint8_t * s8 = (const uint8_t *)src;
  408e8c:	9902      	ldr	r1, [sp, #8]
    uint8_t * d8 = (uint8_t *)dst;
  408e8e:	aa39      	add	r2, sp, #228	; 0xe4
  408e90:	2308      	movs	r3, #8
    while(len) {
  408e92:	2b00      	cmp	r3, #0
  408e94:	d0c1      	beq.n	408e1a <lv_obj_set_state+0x86>
        *d8 = *s8;
  408e96:	f811 0b01 	ldrb.w	r0, [r1], #1
  408e9a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  408e9e:	3b01      	subs	r3, #1
  408ea0:	e7f7      	b.n	408e92 <lv_obj_set_state+0xfe>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408ea2:	f1bb 0f02 	cmp.w	fp, #2
  408ea6:	d048      	beq.n	408f3a <lv_obj_set_state+0x1a6>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408ea8:	f1bb 0f01 	cmp.w	fp, #1
  408eac:	d04b      	beq.n	408f46 <lv_obj_set_state+0x1b2>
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
  408eae:	3501      	adds	r5, #1
  408eb0:	b2ed      	uxtb	r5, r5
  408eb2:	2d3f      	cmp	r5, #63	; 0x3f
  408eb4:	d84d      	bhi.n	408f52 <lv_obj_set_state+0x1be>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408eb6:	4629      	mov	r1, r5
  408eb8:	4620      	mov	r0, r4
  408eba:	4b2e      	ldr	r3, [pc, #184]	; (408f74 <lv_obj_set_state+0x1e0>)
  408ebc:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408ebe:	4682      	mov	sl, r0
  408ec0:	2800      	cmp	r0, #0
  408ec2:	d046      	beq.n	408f52 <lv_obj_set_state+0x1be>
        if(style_list->ignore_trans) continue;
  408ec4:	7943      	ldrb	r3, [r0, #5]
  408ec6:	f013 0f02 	tst.w	r3, #2
  408eca:	d1f0      	bne.n	408eae <lv_obj_set_state+0x11a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  408ecc:	22b0      	movs	r2, #176	; 0xb0
  408ece:	4629      	mov	r1, r5
  408ed0:	4620      	mov	r0, r4
  408ed2:	4e31      	ldr	r6, [pc, #196]	; (408f98 <lv_obj_set_state+0x204>)
  408ed4:	47b0      	blx	r6
  408ed6:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  408ed8:	22b1      	movs	r2, #177	; 0xb1
  408eda:	4629      	mov	r1, r5
  408edc:	4620      	mov	r0, r4
  408ede:	47b0      	blx	r6
  408ee0:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
  408ee2:	22be      	movs	r2, #190	; 0xbe
  408ee4:	4629      	mov	r1, r5
  408ee6:	4620      	mov	r0, r4
  408ee8:	4b2c      	ldr	r3, [pc, #176]	; (408f9c <lv_obj_set_state+0x208>)
  408eea:	4798      	blx	r3
  408eec:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
  408eee:	22b2      	movs	r2, #178	; 0xb2
  408ef0:	4629      	mov	r1, r5
  408ef2:	4620      	mov	r0, r4
  408ef4:	47b0      	blx	r6
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
  408ef6:	f8ad 0018 	strh.w	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
  408efa:	22b3      	movs	r2, #179	; 0xb3
  408efc:	4629      	mov	r1, r5
  408efe:	4620      	mov	r0, r4
  408f00:	47b0      	blx	r6
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
  408f02:	f8ad 001a 	strh.w	r0, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  408f06:	22b4      	movs	r2, #180	; 0xb4
  408f08:	4629      	mov	r1, r5
  408f0a:	4620      	mov	r0, r4
  408f0c:	47b0      	blx	r6
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
  408f0e:	f8ad 001c 	strh.w	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  408f12:	22b5      	movs	r2, #181	; 0xb5
  408f14:	4629      	mov	r1, r5
  408f16:	4620      	mov	r0, r4
  408f18:	47b0      	blx	r6
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
  408f1a:	f8ad 001e 	strh.w	r0, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  408f1e:	22b6      	movs	r2, #182	; 0xb6
  408f20:	4629      	mov	r1, r5
  408f22:	4620      	mov	r0, r4
  408f24:	47b0      	blx	r6
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
  408f26:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  408f2a:	22b7      	movs	r2, #183	; 0xb7
  408f2c:	4629      	mov	r1, r5
  408f2e:	4620      	mov	r0, r4
  408f30:	47b0      	blx	r6
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
  408f32:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  408f36:	2600      	movs	r6, #0
  408f38:	e77a      	b.n	408e30 <lv_obj_set_state+0x9c>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408f3a:	22ff      	movs	r2, #255	; 0xff
  408f3c:	4629      	mov	r1, r5
  408f3e:	4620      	mov	r0, r4
  408f40:	4b17      	ldr	r3, [pc, #92]	; (408fa0 <lv_obj_set_state+0x20c>)
  408f42:	4798      	blx	r3
  408f44:	e7b0      	b.n	408ea8 <lv_obj_set_state+0x114>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
  408f46:	22ff      	movs	r2, #255	; 0xff
  408f48:	4629      	mov	r1, r5
  408f4a:	4620      	mov	r0, r4
  408f4c:	4b15      	ldr	r3, [pc, #84]	; (408fa4 <lv_obj_set_state+0x210>)
  408f4e:	4798      	blx	r3
  408f50:	e7ad      	b.n	408eae <lv_obj_set_state+0x11a>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408f52:	f1bb 0f01 	cmp.w	fp, #1
  408f56:	d002      	beq.n	408f5e <lv_obj_set_state+0x1ca>
}
  408f58:	b065      	add	sp, #404	; 0x194
  408f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(obj);
  408f5e:	4620      	mov	r0, r4
  408f60:	4b11      	ldr	r3, [pc, #68]	; (408fa8 <lv_obj_set_state+0x214>)
  408f62:	4798      	blx	r3
  408f64:	e7f8      	b.n	408f58 <lv_obj_set_state+0x1c4>
  408f66:	4770      	bx	lr
  408f68:	00415e79 	.word	0x00415e79
  408f6c:	0042c168 	.word	0x0042c168
  408f70:	00415e85 	.word	0x00415e85
  408f74:	00405c0d 	.word	0x00405c0d
  408f78:	00408b8d 	.word	0x00408b8d
  408f7c:	004054ad 	.word	0x004054ad
  408f80:	00415445 	.word	0x00415445
  408f84:	0040adcd 	.word	0x0040adcd
  408f88:	0041538d 	.word	0x0041538d
  408f8c:	00407b71 	.word	0x00407b71
  408f90:	00407cc9 	.word	0x00407cc9
  408f94:	00405d49 	.word	0x00405d49
  408f98:	00407445 	.word	0x00407445
  408f9c:	0040733d 	.word	0x0040733d
  408fa0:	00407861 	.word	0x00407861
  408fa4:	004077e5 	.word	0x004077e5
  408fa8:	00405f59 	.word	0x00405f59
  408fac:	00407d3d 	.word	0x00407d3d

00408fb0 <lv_obj_add_state>:
{
  408fb0:	b538      	push	{r3, r4, r5, lr}
  408fb2:	4605      	mov	r5, r0
  408fb4:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408fb6:	4b09      	ldr	r3, [pc, #36]	; (408fdc <lv_obj_add_state+0x2c>)
  408fb8:	4798      	blx	r3
  408fba:	b148      	cbz	r0, 408fd0 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
  408fbc:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  408fc0:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
  408fc4:	428b      	cmp	r3, r1
  408fc6:	d002      	beq.n	408fce <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
  408fc8:	4628      	mov	r0, r5
  408fca:	4b05      	ldr	r3, [pc, #20]	; (408fe0 <lv_obj_add_state+0x30>)
  408fcc:	4798      	blx	r3
  408fce:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408fd0:	462a      	mov	r2, r5
  408fd2:	2300      	movs	r3, #0
  408fd4:	4803      	ldr	r0, [pc, #12]	; (408fe4 <lv_obj_add_state+0x34>)
  408fd6:	4904      	ldr	r1, [pc, #16]	; (408fe8 <lv_obj_add_state+0x38>)
  408fd8:	4788      	blx	r1
  408fda:	e7fe      	b.n	408fda <lv_obj_add_state+0x2a>
  408fdc:	00415e79 	.word	0x00415e79
  408fe0:	00408d95 	.word	0x00408d95
  408fe4:	0042c168 	.word	0x0042c168
  408fe8:	00415e85 	.word	0x00415e85

00408fec <lv_obj_clear_state>:
{
  408fec:	b538      	push	{r3, r4, r5, lr}
  408fee:	4604      	mov	r4, r0
  408ff0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408ff2:	4b0a      	ldr	r3, [pc, #40]	; (40901c <lv_obj_clear_state+0x30>)
  408ff4:	4798      	blx	r3
  408ff6:	b158      	cbz	r0, 409010 <lv_obj_clear_state+0x24>
    lv_state_t new_state = obj->state & (~state);
  408ff8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  408ffc:	b259      	sxtb	r1, r3
  408ffe:	ea21 0105 	bic.w	r1, r1, r5
  409002:	b2c9      	uxtb	r1, r1
    if(obj->state != new_state) {
  409004:	428b      	cmp	r3, r1
  409006:	d002      	beq.n	40900e <lv_obj_clear_state+0x22>
        lv_obj_set_state(obj, new_state);
  409008:	4620      	mov	r0, r4
  40900a:	4b05      	ldr	r3, [pc, #20]	; (409020 <lv_obj_clear_state+0x34>)
  40900c:	4798      	blx	r3
  40900e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  409010:	4622      	mov	r2, r4
  409012:	2300      	movs	r3, #0
  409014:	4803      	ldr	r0, [pc, #12]	; (409024 <lv_obj_clear_state+0x38>)
  409016:	4904      	ldr	r1, [pc, #16]	; (409028 <lv_obj_clear_state+0x3c>)
  409018:	4788      	blx	r1
  40901a:	e7fe      	b.n	40901a <lv_obj_clear_state+0x2e>
  40901c:	00415e79 	.word	0x00415e79
  409020:	00408d95 	.word	0x00408d95
  409024:	0042c168 	.word	0x0042c168
  409028:	00415e85 	.word	0x00415e85

0040902c <lv_obj_get_draw_rect_ext_pad_size>:
{
  40902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409030:	b089      	sub	sp, #36	; 0x24
  409032:	4604      	mov	r4, r0
  409034:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  409036:	2250      	movs	r2, #80	; 0x50
  409038:	4b78      	ldr	r3, [pc, #480]	; (40921c <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  40903a:	4798      	blx	r3
    if(sh_width) {
  40903c:	4607      	mov	r7, r0
  40903e:	bb68      	cbnz	r0, 40909c <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  409040:	227f      	movs	r2, #127	; 0x7f
  409042:	4631      	mov	r1, r6
  409044:	4620      	mov	r0, r4
  409046:	4b76      	ldr	r3, [pc, #472]	; (409220 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  409048:	4798      	blx	r3
    if(value_str) {
  40904a:	4605      	mov	r5, r0
  40904c:	b130      	cbz	r0, 40905c <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  40904e:	227c      	movs	r2, #124	; 0x7c
  409050:	4631      	mov	r1, r6
  409052:	4620      	mov	r0, r4
  409054:	4b73      	ldr	r3, [pc, #460]	; (409224 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  409056:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
  409058:	2802      	cmp	r0, #2
  40905a:	d851      	bhi.n	409100 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  40905c:	2240      	movs	r2, #64	; 0x40
  40905e:	4631      	mov	r1, r6
  409060:	4620      	mov	r0, r4
  409062:	4b6e      	ldr	r3, [pc, #440]	; (40921c <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  409064:	4798      	blx	r3
    if(outline_width) {
  409066:	4605      	mov	r5, r0
  409068:	2800      	cmp	r0, #0
  40906a:	f040 80c4 	bne.w	4091f6 <lv_obj_get_draw_rect_ext_pad_size+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40906e:	2204      	movs	r2, #4
  409070:	4631      	mov	r1, r6
  409072:	4620      	mov	r0, r4
  409074:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 40921c <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  409078:	47c0      	blx	r8
  40907a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40907c:	2205      	movs	r2, #5
  40907e:	4631      	mov	r1, r6
  409080:	4620      	mov	r0, r4
  409082:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
  409084:	42a8      	cmp	r0, r5
  409086:	bfb8      	it	lt
  409088:	4628      	movlt	r0, r5
  40908a:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
  40908c:	2800      	cmp	r0, #0
  40908e:	dd01      	ble.n	409094 <lv_obj_get_draw_rect_ext_pad_size+0x68>
  409090:	4438      	add	r0, r7
  409092:	b207      	sxth	r7, r0
}
  409094:	4638      	mov	r0, r7
  409096:	b009      	add	sp, #36	; 0x24
  409098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  40909c:	225c      	movs	r2, #92	; 0x5c
  40909e:	4631      	mov	r1, r6
  4090a0:	4620      	mov	r0, r4
  4090a2:	4b60      	ldr	r3, [pc, #384]	; (409224 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  4090a4:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
  4090a6:	2802      	cmp	r0, #2
  4090a8:	d801      	bhi.n	4090ae <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
  4090aa:	2700      	movs	r7, #0
  4090ac:	e7c8      	b.n	409040 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  4090ae:	463b      	mov	r3, r7
  4090b0:	2f00      	cmp	r7, #0
  4090b2:	db23      	blt.n	4090fc <lv_obj_get_draw_rect_ext_pad_size+0xd0>
  4090b4:	f343 074f 	sbfx	r7, r3, #1, #16
            sh_width++;
  4090b8:	3701      	adds	r7, #1
  4090ba:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  4090bc:	2253      	movs	r2, #83	; 0x53
  4090be:	4631      	mov	r1, r6
  4090c0:	4620      	mov	r0, r4
  4090c2:	f8df 8158 	ldr.w	r8, [pc, #344]	; 40921c <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  4090c6:	47c0      	blx	r8
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
  4090c8:	fa17 f780 	uxtah	r7, r7, r0
  4090cc:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  4090ce:	2251      	movs	r2, #81	; 0x51
  4090d0:	4631      	mov	r1, r6
  4090d2:	4620      	mov	r0, r4
  4090d4:	47c0      	blx	r8
  4090d6:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  4090d8:	2252      	movs	r2, #82	; 0x52
  4090da:	4631      	mov	r1, r6
  4090dc:	4620      	mov	r0, r4
  4090de:	47c0      	blx	r8
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
  4090e0:	2800      	cmp	r0, #0
  4090e2:	bfb8      	it	lt
  4090e4:	4240      	neglt	r0, r0
  4090e6:	2d00      	cmp	r5, #0
  4090e8:	bfb8      	it	lt
  4090ea:	426d      	neglt	r5, r5
  4090ec:	42a8      	cmp	r0, r5
  4090ee:	bfac      	ite	ge
  4090f0:	183f      	addge	r7, r7, r0
  4090f2:	197f      	addlt	r7, r7, r5
  4090f4:	b238      	sxth	r0, r7
            s = LV_MATH_MAX(s, sh_width);
  4090f6:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
  4090fa:	e7a1      	b.n	409040 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  4090fc:	1c7b      	adds	r3, r7, #1
  4090fe:	e7d9      	b.n	4090b4 <lv_obj_get_draw_rect_ext_pad_size+0x88>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  409100:	2270      	movs	r2, #112	; 0x70
  409102:	4631      	mov	r1, r6
  409104:	4620      	mov	r0, r4
  409106:	f8df 8114 	ldr.w	r8, [pc, #276]	; 40921c <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  40910a:	47c0      	blx	r8
  40910c:	4682      	mov	sl, r0
  40910e:	2270      	movs	r2, #112	; 0x70
  409110:	4631      	mov	r1, r6
  409112:	4620      	mov	r0, r4
  409114:	47c0      	blx	r8
  409116:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  409118:	227e      	movs	r2, #126	; 0x7e
  40911a:	4631      	mov	r1, r6
  40911c:	4620      	mov	r0, r4
  40911e:	4b40      	ldr	r3, [pc, #256]	; (409220 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  409120:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
  409122:	f04f 0900 	mov.w	r9, #0
  409126:	f8cd 9008 	str.w	r9, [sp, #8]
  40912a:	f647 4318 	movw	r3, #31768	; 0x7c18
  40912e:	9301      	str	r3, [sp, #4]
  409130:	f8cd b000 	str.w	fp, [sp]
  409134:	4653      	mov	r3, sl
  409136:	4602      	mov	r2, r0
  409138:	4629      	mov	r1, r5
  40913a:	a804      	add	r0, sp, #16
  40913c:	4d3a      	ldr	r5, [pc, #232]	; (409228 <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
  40913e:	47a8      	blx	r5
            value_area.x1 = 0;
  409140:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
  409144:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
  409148:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40914c:	3b01      	subs	r3, #1
  40914e:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
  409152:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  409156:	3b01      	subs	r3, #1
  409158:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  40915c:	2275      	movs	r2, #117	; 0x75
  40915e:	4631      	mov	r1, r6
  409160:	4620      	mov	r0, r4
  409162:	47c0      	blx	r8
  409164:	fa5f f980 	uxtb.w	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  409168:	2273      	movs	r2, #115	; 0x73
  40916a:	4631      	mov	r1, r6
  40916c:	4620      	mov	r0, r4
  40916e:	47c0      	blx	r8
  409170:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  409172:	2274      	movs	r2, #116	; 0x74
  409174:	4631      	mov	r1, r6
  409176:	4620      	mov	r0, r4
  409178:	47c0      	blx	r8
  40917a:	4680      	mov	r8, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
  40917c:	ab05      	add	r3, sp, #20
  40917e:	464a      	mov	r2, r9
  409180:	a906      	add	r1, sp, #24
  409182:	f104 0010 	add.w	r0, r4, #16
  409186:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40922c <lv_obj_get_draw_rect_ext_pad_size+0x200>
  40918a:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
  40918c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  409190:	442a      	add	r2, r5
  409192:	b292      	uxth	r2, r2
  409194:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  409198:	4410      	add	r0, r2
  40919a:	b205      	sxth	r5, r0
            value_area.y1 += p_align.y + yofs;
  40919c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4091a0:	4443      	add	r3, r8
  4091a2:	b29b      	uxth	r3, r3
  4091a4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
  4091a8:	4419      	add	r1, r3
  4091aa:	b209      	sxth	r1, r1
            value_area.x2 += p_align.x + xofs;
  4091ac:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  4091b0:	4402      	add	r2, r0
  4091b2:	b212      	sxth	r2, r2
            value_area.y2 += p_align.y + yofs;
  4091b4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  4091b8:	4403      	add	r3, r0
  4091ba:	b21b      	sxth	r3, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
  4091bc:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
  4091c0:	1b40      	subs	r0, r0, r5
  4091c2:	42b8      	cmp	r0, r7
  4091c4:	bfb8      	it	lt
  4091c6:	4638      	movlt	r0, r7
  4091c8:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
  4091ca:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  4091ce:	1a69      	subs	r1, r5, r1
  4091d0:	4288      	cmp	r0, r1
  4091d2:	bfb8      	it	lt
  4091d4:	4608      	movlt	r0, r1
  4091d6:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
  4091d8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  4091dc:	1a52      	subs	r2, r2, r1
  4091de:	4290      	cmp	r0, r2
  4091e0:	bfb8      	it	lt
  4091e2:	4610      	movlt	r0, r2
  4091e4:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
  4091e6:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
  4091ea:	1bdf      	subs	r7, r3, r7
  4091ec:	42b8      	cmp	r0, r7
  4091ee:	bfb8      	it	lt
  4091f0:	4638      	movlt	r0, r7
  4091f2:	b207      	sxth	r7, r0
  4091f4:	e732      	b.n	40905c <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4091f6:	224c      	movs	r2, #76	; 0x4c
  4091f8:	4631      	mov	r1, r6
  4091fa:	4620      	mov	r0, r4
  4091fc:	4b09      	ldr	r3, [pc, #36]	; (409224 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  4091fe:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
  409200:	2802      	cmp	r0, #2
  409202:	f67f af34 	bls.w	40906e <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  409206:	2241      	movs	r2, #65	; 0x41
  409208:	4631      	mov	r1, r6
  40920a:	4620      	mov	r0, r4
  40920c:	4b03      	ldr	r3, [pc, #12]	; (40921c <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  40920e:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
  409210:	4428      	add	r0, r5
  409212:	42b8      	cmp	r0, r7
  409214:	bfb8      	it	lt
  409216:	4638      	movlt	r0, r7
  409218:	b207      	sxth	r7, r0
  40921a:	e728      	b.n	40906e <lv_obj_get_draw_rect_ext_pad_size+0x42>
  40921c:	00407445 	.word	0x00407445
  409220:	0040733d 	.word	0x0040733d
  409224:	00406eb9 	.word	0x00406eb9
  409228:	00417e85 	.word	0x00417e85
  40922c:	004158f1 	.word	0x004158f1

00409230 <lv_obj_get_focused_obj>:
{
  409230:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  409232:	4604      	mov	r4, r0
  409234:	b928      	cbnz	r0, 409242 <lv_obj_get_focused_obj+0x12>
  409236:	2000      	movs	r0, #0
  409238:	bd10      	pop	{r4, pc}
        focus_obj = lv_obj_get_parent(focus_obj);
  40923a:	4620      	mov	r0, r4
  40923c:	4b06      	ldr	r3, [pc, #24]	; (409258 <lv_obj_get_focused_obj+0x28>)
  40923e:	4798      	blx	r3
  409240:	4604      	mov	r4, r0
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
  409242:	4620      	mov	r0, r4
  409244:	4b05      	ldr	r3, [pc, #20]	; (40925c <lv_obj_get_focused_obj+0x2c>)
  409246:	4798      	blx	r3
  409248:	b118      	cbz	r0, 409252 <lv_obj_get_focused_obj+0x22>
  40924a:	2c00      	cmp	r4, #0
  40924c:	d1f5      	bne.n	40923a <lv_obj_get_focused_obj+0xa>
    return (lv_obj_t *)focus_obj;
  40924e:	4620      	mov	r0, r4
  409250:	bd10      	pop	{r4, pc}
  409252:	4620      	mov	r0, r4
}
  409254:	bd10      	pop	{r4, pc}
  409256:	bf00      	nop
  409258:	004059ad 	.word	0x004059ad
  40925c:	004067e1 	.word	0x004067e1

00409260 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
  409260:	2908      	cmp	r1, #8
  409262:	d01a      	beq.n	40929a <lv_obj_signal+0x3a>
{
  409264:	b510      	push	{r4, lr}
  409266:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  409268:	2907      	cmp	r1, #7
  40926a:	d020      	beq.n	4092ae <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
  40926c:	2901      	cmp	r1, #1
  40926e:	d023      	beq.n	4092b8 <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  409270:	2906      	cmp	r1, #6
  409272:	d027      	beq.n	4092c4 <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  409274:	2903      	cmp	r1, #3
  409276:	d030      	beq.n	4092da <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  409278:	2904      	cmp	r1, #4
  40927a:	d039      	beq.n	4092f0 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
  40927c:	290b      	cmp	r1, #11
  40927e:	d03b      	beq.n	4092f8 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
  409280:	f1a1 030d 	sub.w	r3, r1, #13
  409284:	b2db      	uxtb	r3, r3
  409286:	2b01      	cmp	r3, #1
  409288:	d93b      	bls.n	409302 <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
  40928a:	2916      	cmp	r1, #22
  40928c:	d03e      	beq.n	40930c <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
  40928e:	2917      	cmp	r1, #23
  409290:	d056      	beq.n	409340 <lv_obj_signal+0xe0>
    else if(sign == LV_SIGNAL_CLEANUP) {
  409292:	2900      	cmp	r1, #0
  409294:	d05b      	beq.n	40934e <lv_obj_signal+0xee>
    lv_res_t res = LV_RES_OK;
  409296:	2001      	movs	r0, #1
}
  409298:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
  40929a:	7813      	ldrb	r3, [r2, #0]
  40929c:	b91b      	cbnz	r3, 4092a6 <lv_obj_signal+0x46>
  40929e:	3028      	adds	r0, #40	; 0x28
  4092a0:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
  4092a2:	2001      	movs	r0, #1
  4092a4:	4770      	bx	lr
        else info->result = NULL;
  4092a6:	2300      	movs	r3, #0
  4092a8:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
  4092aa:	2001      	movs	r0, #1
  4092ac:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4092ae:	492b      	ldr	r1, [pc, #172]	; (40935c <lv_obj_signal+0xfc>)
  4092b0:	4610      	mov	r0, r2
  4092b2:	4b2b      	ldr	r3, [pc, #172]	; (409360 <lv_obj_signal+0x100>)
  4092b4:	4798      	blx	r3
  4092b6:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  4092b8:	4b2a      	ldr	r3, [pc, #168]	; (409364 <lv_obj_signal+0x104>)
  4092ba:	4798      	blx	r3
  4092bc:	2800      	cmp	r0, #0
  4092be:	d14a      	bne.n	409356 <lv_obj_signal+0xf6>
    lv_res_t res = LV_RES_OK;
  4092c0:	2001      	movs	r0, #1
  4092c2:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
  4092c4:	2100      	movs	r1, #0
  4092c6:	4b28      	ldr	r3, [pc, #160]	; (409368 <lv_obj_signal+0x108>)
  4092c8:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
  4092ca:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  4092ce:	4298      	cmp	r0, r3
  4092d0:	bfb8      	it	lt
  4092d2:	4618      	movlt	r0, r3
  4092d4:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
  4092d6:	2001      	movs	r0, #1
  4092d8:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
  4092da:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
  4092de:	f013 0f01 	tst.w	r3, #1
  4092e2:	d101      	bne.n	4092e8 <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
  4092e4:	2001      	movs	r0, #1
  4092e6:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
  4092e8:	4b20      	ldr	r3, [pc, #128]	; (40936c <lv_obj_signal+0x10c>)
  4092ea:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4092ec:	2001      	movs	r0, #1
  4092ee:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
  4092f0:	4b1f      	ldr	r3, [pc, #124]	; (409370 <lv_obj_signal+0x110>)
  4092f2:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4092f4:	2001      	movs	r0, #1
  4092f6:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
  4092f8:	2110      	movs	r1, #16
  4092fa:	4b1e      	ldr	r3, [pc, #120]	; (409374 <lv_obj_signal+0x114>)
  4092fc:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4092fe:	2001      	movs	r0, #1
  409300:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  409302:	2110      	movs	r1, #16
  409304:	4b1c      	ldr	r3, [pc, #112]	; (409378 <lv_obj_signal+0x118>)
  409306:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  409308:	2001      	movs	r0, #1
  40930a:	bd10      	pop	{r4, pc}
        editing = lv_group_get_editing(lv_obj_get_group(obj));
  40930c:	4b1b      	ldr	r3, [pc, #108]	; (40937c <lv_obj_signal+0x11c>)
  40930e:	4798      	blx	r3
  409310:	4b1b      	ldr	r3, [pc, #108]	; (409380 <lv_obj_signal+0x120>)
  409312:	4798      	blx	r3
        if(editing) {
  409314:	b138      	cbz	r0, 409326 <lv_obj_signal+0xc6>
            obj = lv_obj_get_focused_obj(obj);
  409316:	4620      	mov	r0, r4
  409318:	4b1a      	ldr	r3, [pc, #104]	; (409384 <lv_obj_signal+0x124>)
  40931a:	4798      	blx	r3
            lv_obj_add_state(obj, state);
  40931c:	2106      	movs	r1, #6
  40931e:	4b15      	ldr	r3, [pc, #84]	; (409374 <lv_obj_signal+0x114>)
  409320:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  409322:	2001      	movs	r0, #1
  409324:	bd10      	pop	{r4, pc}
            obj = lv_obj_get_focused_obj(obj);
  409326:	4620      	mov	r0, r4
  409328:	4b16      	ldr	r3, [pc, #88]	; (409384 <lv_obj_signal+0x124>)
  40932a:	4798      	blx	r3
  40932c:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
  40932e:	2102      	movs	r1, #2
  409330:	4b10      	ldr	r3, [pc, #64]	; (409374 <lv_obj_signal+0x114>)
  409332:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
  409334:	2104      	movs	r1, #4
  409336:	4620      	mov	r0, r4
  409338:	4b0f      	ldr	r3, [pc, #60]	; (409378 <lv_obj_signal+0x118>)
  40933a:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40933c:	2001      	movs	r0, #1
  40933e:	bd10      	pop	{r4, pc}
        obj = lv_obj_get_focused_obj(obj);
  409340:	4b10      	ldr	r3, [pc, #64]	; (409384 <lv_obj_signal+0x124>)
  409342:	4798      	blx	r3
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
  409344:	2106      	movs	r1, #6
  409346:	4b0c      	ldr	r3, [pc, #48]	; (409378 <lv_obj_signal+0x118>)
  409348:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40934a:	2001      	movs	r0, #1
  40934c:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  40934e:	4b0e      	ldr	r3, [pc, #56]	; (409388 <lv_obj_signal+0x128>)
  409350:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  409352:	2001      	movs	r0, #1
  409354:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  409356:	2000      	movs	r0, #0
  409358:	bd10      	pop	{r4, pc}
  40935a:	bf00      	nop
  40935c:	0042c178 	.word	0x0042c178
  409360:	00408321 	.word	0x00408321
  409364:	00406dad 	.word	0x00406dad
  409368:	0040902d 	.word	0x0040902d
  40936c:	00406675 	.word	0x00406675
  409370:	0040597d 	.word	0x0040597d
  409374:	00408fb1 	.word	0x00408fb1
  409378:	00408fed 	.word	0x00408fed
  40937c:	004080bd 	.word	0x004080bd
  409380:	00403ae1 	.word	0x00403ae1
  409384:	00409231 	.word	0x00409231
  409388:	00405cd5 	.word	0x00405cd5

0040938c <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
  40938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409390:	b082      	sub	sp, #8
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  409392:	2500      	movs	r5, #0
  409394:	e057      	b.n	409446 <lv_refr_join_area+0xba>
        *d8 = *s8;
  409396:	f811 0b01 	ldrb.w	r0, [r1], #1
  40939a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40939e:	3b01      	subs	r3, #1
    while(len) {
  4093a0:	2b00      	cmp	r3, #0
  4093a2:	d1f8      	bne.n	409396 <lv_refr_join_area+0xa>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
  4093a4:	4426      	add	r6, r4
  4093a6:	2301      	movs	r3, #1
  4093a8:	f886 3162 	strb.w	r3, [r6, #354]	; 0x162
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  4093ac:	3401      	adds	r4, #1
  4093ae:	4b2f      	ldr	r3, [pc, #188]	; (40946c <lv_refr_join_area+0xe0>)
  4093b0:	6819      	ldr	r1, [r3, #0]
  4093b2:	f8b1 3182 	ldrh.w	r3, [r1, #386]	; 0x182
  4093b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4093ba:	429c      	cmp	r4, r3
  4093bc:	d242      	bcs.n	409444 <lv_refr_join_area+0xb8>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
  4093be:	190b      	adds	r3, r1, r4
  4093c0:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  4093c4:	2b00      	cmp	r3, #0
  4093c6:	d1f1      	bne.n	4093ac <lv_refr_join_area+0x20>
  4093c8:	42ac      	cmp	r4, r5
  4093ca:	d0ef      	beq.n	4093ac <lv_refr_join_area+0x20>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
  4093cc:	f105 000c 	add.w	r0, r5, #12
  4093d0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
  4093d4:	f104 030c 	add.w	r3, r4, #12
  4093d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4093dc:	3102      	adds	r1, #2
  4093de:	3002      	adds	r0, #2
  4093e0:	4b23      	ldr	r3, [pc, #140]	; (409470 <lv_refr_join_area+0xe4>)
  4093e2:	4798      	blx	r3
  4093e4:	2800      	cmp	r0, #0
  4093e6:	d0e1      	beq.n	4093ac <lv_refr_join_area+0x20>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
  4093e8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 40946c <lv_refr_join_area+0xe0>
  4093ec:	f8d8 2000 	ldr.w	r2, [r8]
  4093f0:	f105 070c 	add.w	r7, r5, #12
  4093f4:	00ff      	lsls	r7, r7, #3
  4093f6:	19d1      	adds	r1, r2, r7
  4093f8:	f104 060c 	add.w	r6, r4, #12
  4093fc:	00f6      	lsls	r6, r6, #3
  4093fe:	4432      	add	r2, r6
  409400:	3202      	adds	r2, #2
  409402:	3102      	adds	r1, #2
  409404:	4668      	mov	r0, sp
  409406:	4b1b      	ldr	r3, [pc, #108]	; (409474 <lv_refr_join_area+0xe8>)
  409408:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  40940a:	4668      	mov	r0, sp
  40940c:	f8df a068 	ldr.w	sl, [pc, #104]	; 409478 <lv_refr_join_area+0xec>
  409410:	47d0      	blx	sl
  409412:	4681      	mov	r9, r0
  409414:	f8d8 0000 	ldr.w	r0, [r8]
  409418:	4438      	add	r0, r7
  40941a:	3002      	adds	r0, #2
  40941c:	47d0      	blx	sl
  40941e:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
  409420:	f8d8 0000 	ldr.w	r0, [r8]
  409424:	4430      	add	r0, r6
  409426:	3002      	adds	r0, #2
  409428:	47d0      	blx	sl
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  40942a:	4438      	add	r0, r7
  40942c:	4581      	cmp	r9, r0
  40942e:	d2bd      	bcs.n	4093ac <lv_refr_join_area+0x20>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
  409430:	f8d8 6000 	ldr.w	r6, [r8]
  409434:	f105 020c 	add.w	r2, r5, #12
  409438:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
  40943c:	3202      	adds	r2, #2
    const uint8_t * s8 = (const uint8_t *)src;
  40943e:	4669      	mov	r1, sp
  409440:	2308      	movs	r3, #8
  409442:	e7ad      	b.n	4093a0 <lv_refr_join_area+0x14>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  409444:	3501      	adds	r5, #1
  409446:	4b09      	ldr	r3, [pc, #36]	; (40946c <lv_refr_join_area+0xe0>)
  409448:	681b      	ldr	r3, [r3, #0]
  40944a:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  40944e:	f3c2 0209 	ubfx	r2, r2, #0, #10
  409452:	4295      	cmp	r5, r2
  409454:	d206      	bcs.n	409464 <lv_refr_join_area+0xd8>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
  409456:	442b      	add	r3, r5
  409458:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  40945c:	2b00      	cmp	r3, #0
  40945e:	d1f1      	bne.n	409444 <lv_refr_join_area+0xb8>
  409460:	2400      	movs	r4, #0
  409462:	e7a4      	b.n	4093ae <lv_refr_join_area+0x22>
            }
        }
    }
}
  409464:	b002      	add	sp, #8
  409466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40946a:	bf00      	nop
  40946c:	2040c41c 	.word	0x2040c41c
  409470:	004157e5 	.word	0x004157e5
  409474:	0041560b 	.word	0x0041560b
  409478:	00415597 	.word	0x00415597

0040947c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
  40947c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409480:	4606      	mov	r6, r0
  409482:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
  409484:	2200      	movs	r2, #0
  409486:	3110      	adds	r1, #16
  409488:	4b20      	ldr	r3, [pc, #128]	; (40950c <lv_refr_get_top_obj+0x90>)
  40948a:	4798      	blx	r3
  40948c:	b3b8      	cbz	r0, 4094fe <lv_refr_get_top_obj+0x82>
  40948e:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
  409492:	f013 0f10 	tst.w	r3, #16
  409496:	d134      	bne.n	409502 <lv_refr_get_top_obj+0x86>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
  409498:	f8d8 3020 	ldr.w	r3, [r8, #32]
  40949c:	2202      	movs	r2, #2
  40949e:	4631      	mov	r1, r6
  4094a0:	4640      	mov	r0, r8
  4094a2:	4798      	blx	r3
  4094a4:	4681      	mov	r9, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  4094a6:	2803      	cmp	r0, #3
  4094a8:	d02d      	beq.n	409506 <lv_refr_get_top_obj+0x8a>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  4094aa:	2801      	cmp	r0, #1
  4094ac:	d013      	beq.n	4094d6 <lv_refr_get_top_obj+0x5a>
            design_res = LV_DESIGN_RES_NOT_COVER;
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
  4094ae:	f108 0704 	add.w	r7, r8, #4
  4094b2:	4638      	mov	r0, r7
  4094b4:	4b16      	ldr	r3, [pc, #88]	; (409510 <lv_refr_get_top_obj+0x94>)
  4094b6:	4798      	blx	r3
  4094b8:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  4094ba:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  4094bc:	b1b4      	cbz	r4, 4094ec <lv_refr_get_top_obj+0x70>
            found_p = lv_refr_get_top_obj(area_p, i);
  4094be:	4621      	mov	r1, r4
  4094c0:	4630      	mov	r0, r6
  4094c2:	f7ff ffdb 	bl	40947c <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
  4094c6:	4605      	mov	r5, r0
  4094c8:	b980      	cbnz	r0, 4094ec <lv_refr_get_top_obj+0x70>
        _LV_LL_READ(obj->child_ll, i) {
  4094ca:	4621      	mov	r1, r4
  4094cc:	4638      	mov	r0, r7
  4094ce:	4b11      	ldr	r3, [pc, #68]	; (409514 <lv_refr_get_top_obj+0x98>)
  4094d0:	4798      	blx	r3
  4094d2:	4604      	mov	r4, r0
  4094d4:	e7f2      	b.n	4094bc <lv_refr_get_top_obj+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4094d6:	f248 020c 	movw	r2, #32780	; 0x800c
  4094da:	2100      	movs	r1, #0
  4094dc:	4640      	mov	r0, r8
  4094de:	4b0e      	ldr	r3, [pc, #56]	; (409518 <lv_refr_get_top_obj+0x9c>)
  4094e0:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  4094e2:	28ff      	cmp	r0, #255	; 0xff
  4094e4:	d0e3      	beq.n	4094ae <lv_refr_get_top_obj+0x32>
            design_res = LV_DESIGN_RES_NOT_COVER;
  4094e6:	f04f 0902 	mov.w	r9, #2
  4094ea:	e7e0      	b.n	4094ae <lv_refr_get_top_obj+0x32>
                break;
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
  4094ec:	b115      	cbz	r5, 4094f4 <lv_refr_get_top_obj+0x78>
            }
        }
    }

    return found_p;
}
  4094ee:	4628      	mov	r0, r5
  4094f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(design_res == LV_DESIGN_RES_COVER) {
  4094f4:	f1b9 0f01 	cmp.w	r9, #1
  4094f8:	d1f9      	bne.n	4094ee <lv_refr_get_top_obj+0x72>
                found_p = obj;
  4094fa:	4645      	mov	r5, r8
  4094fc:	e7f7      	b.n	4094ee <lv_refr_get_top_obj+0x72>
    lv_obj_t * found_p = NULL;
  4094fe:	2500      	movs	r5, #0
  409500:	e7f5      	b.n	4094ee <lv_refr_get_top_obj+0x72>
  409502:	2500      	movs	r5, #0
  409504:	e7f3      	b.n	4094ee <lv_refr_get_top_obj+0x72>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  409506:	2500      	movs	r5, #0
  409508:	e7f1      	b.n	4094ee <lv_refr_get_top_obj+0x72>
  40950a:	bf00      	nop
  40950c:	00415829 	.word	0x00415829
  409510:	00416189 	.word	0x00416189
  409514:	0041619d 	.word	0x0041619d
  409518:	00406eb9 	.word	0x00406eb9

0040951c <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
  40951c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  409520:	f013 0f10 	tst.w	r3, #16
  409524:	d000      	beq.n	409528 <lv_refr_obj+0xc>
  409526:	4770      	bx	lr
{
  409528:	b570      	push	{r4, r5, r6, lr}
  40952a:	b08a      	sub	sp, #40	; 0x28
  40952c:	460e      	mov	r6, r1
  40952e:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
  409530:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
  409534:	a904      	add	r1, sp, #16
  409536:	4b33      	ldr	r3, [pc, #204]	; (409604 <lv_refr_obj+0xe8>)
  409538:	4798      	blx	r3
    obj_area.x1 -= ext_size;
  40953a:	b2a3      	uxth	r3, r4
  40953c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  409540:	1ad2      	subs	r2, r2, r3
  409542:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
  409546:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40954a:	1ad2      	subs	r2, r2, r3
  40954c:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
  409550:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  409554:	441a      	add	r2, r3
  409556:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
  40955a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40955e:	4413      	add	r3, r2
  409560:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
  409564:	aa04      	add	r2, sp, #16
  409566:	4631      	mov	r1, r6
  409568:	a806      	add	r0, sp, #24
  40956a:	4b27      	ldr	r3, [pc, #156]	; (409608 <lv_refr_obj+0xec>)
  40956c:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
  40956e:	b1a8      	cbz	r0, 40959c <lv_refr_obj+0x80>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
  409570:	6a2b      	ldr	r3, [r5, #32]
  409572:	b11b      	cbz	r3, 40957c <lv_refr_obj+0x60>
  409574:	2200      	movs	r2, #0
  409576:	a906      	add	r1, sp, #24
  409578:	4628      	mov	r0, r5
  40957a:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
  40957c:	a904      	add	r1, sp, #16
  40957e:	4628      	mov	r0, r5
  409580:	4b20      	ldr	r3, [pc, #128]	; (409604 <lv_refr_obj+0xe8>)
  409582:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
  409584:	aa04      	add	r2, sp, #16
  409586:	4631      	mov	r1, r6
  409588:	a808      	add	r0, sp, #32
  40958a:	4b1f      	ldr	r3, [pc, #124]	; (409608 <lv_refr_obj+0xec>)
  40958c:	4798      	blx	r3
        if(union_ok != false) {
  40958e:	b938      	cbnz	r0, 4095a0 <lv_refr_obj+0x84>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
  409590:	6a2b      	ldr	r3, [r5, #32]
  409592:	b11b      	cbz	r3, 40959c <lv_refr_obj+0x80>
  409594:	2201      	movs	r2, #1
  409596:	a906      	add	r1, sp, #24
  409598:	4628      	mov	r0, r5
  40959a:	4798      	blx	r3
    }
}
  40959c:	b00a      	add	sp, #40	; 0x28
  40959e:	bd70      	pop	{r4, r5, r6, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
  4095a0:	1d2e      	adds	r6, r5, #4
  4095a2:	4630      	mov	r0, r6
  4095a4:	4b19      	ldr	r3, [pc, #100]	; (40960c <lv_refr_obj+0xf0>)
  4095a6:	4798      	blx	r3
  4095a8:	4604      	mov	r4, r0
  4095aa:	e004      	b.n	4095b6 <lv_refr_obj+0x9a>
  4095ac:	4621      	mov	r1, r4
  4095ae:	4630      	mov	r0, r6
  4095b0:	4b17      	ldr	r3, [pc, #92]	; (409610 <lv_refr_obj+0xf4>)
  4095b2:	4798      	blx	r3
  4095b4:	4604      	mov	r4, r0
  4095b6:	2c00      	cmp	r4, #0
  4095b8:	d0ea      	beq.n	409590 <lv_refr_obj+0x74>
                lv_obj_get_coords(child_p, &child_area);
  4095ba:	a902      	add	r1, sp, #8
  4095bc:	4620      	mov	r0, r4
  4095be:	4b11      	ldr	r3, [pc, #68]	; (409604 <lv_refr_obj+0xe8>)
  4095c0:	4798      	blx	r3
                child_area.x1 -= ext_size;
  4095c2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  4095c4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  4095c8:	1ad2      	subs	r2, r2, r3
  4095ca:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
  4095ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  4095d2:	1ad2      	subs	r2, r2, r3
  4095d4:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
  4095d8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4095dc:	441a      	add	r2, r3
  4095de:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
  4095e2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  4095e6:	4413      	add	r3, r2
  4095e8:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
  4095ec:	aa02      	add	r2, sp, #8
  4095ee:	a908      	add	r1, sp, #32
  4095f0:	4668      	mov	r0, sp
  4095f2:	4b05      	ldr	r3, [pc, #20]	; (409608 <lv_refr_obj+0xec>)
  4095f4:	4798      	blx	r3
                if(union_ok) {
  4095f6:	2800      	cmp	r0, #0
  4095f8:	d0d8      	beq.n	4095ac <lv_refr_obj+0x90>
                    lv_refr_obj(child_p, &mask_child);
  4095fa:	4669      	mov	r1, sp
  4095fc:	4620      	mov	r0, r4
  4095fe:	f7ff ff8d 	bl	40951c <lv_refr_obj>
  409602:	e7d3      	b.n	4095ac <lv_refr_obj+0x90>
  409604:	00405ac1 	.word	0x00405ac1
  409608:	004155b3 	.word	0x004155b3
  40960c:	00416193 	.word	0x00416193
  409610:	004161ab 	.word	0x004161ab

00409614 <lv_refr_obj_and_children>:
{
  409614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409616:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  409618:	4604      	mov	r4, r0
  40961a:	b150      	cbz	r0, 409632 <lv_refr_obj_and_children+0x1e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
  40961c:	2c00      	cmp	r4, #0
  40961e:	d02c      	beq.n	40967a <lv_refr_obj_and_children+0x66>
    lv_refr_obj(top_p, mask_p);
  409620:	4631      	mov	r1, r6
  409622:	4620      	mov	r0, r4
  409624:	4b15      	ldr	r3, [pc, #84]	; (40967c <lv_refr_obj_and_children+0x68>)
  409626:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
  409628:	4620      	mov	r0, r4
  40962a:	4b15      	ldr	r3, [pc, #84]	; (409680 <lv_refr_obj_and_children+0x6c>)
  40962c:	4798      	blx	r3
  40962e:	4607      	mov	r7, r0
    while(par != NULL) {
  409630:	e01b      	b.n	40966a <lv_refr_obj_and_children+0x56>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  409632:	4b14      	ldr	r3, [pc, #80]	; (409684 <lv_refr_obj_and_children+0x70>)
  409634:	6818      	ldr	r0, [r3, #0]
  409636:	4b14      	ldr	r3, [pc, #80]	; (409688 <lv_refr_obj_and_children+0x74>)
  409638:	4798      	blx	r3
  40963a:	4604      	mov	r4, r0
  40963c:	e7ee      	b.n	40961c <lv_refr_obj_and_children+0x8>
            lv_refr_obj(i, mask_p);
  40963e:	4631      	mov	r1, r6
  409640:	4620      	mov	r0, r4
  409642:	4b0e      	ldr	r3, [pc, #56]	; (40967c <lv_refr_obj_and_children+0x68>)
  409644:	4798      	blx	r3
            i = _lv_ll_get_prev(&(par->child_ll), i);
  409646:	4621      	mov	r1, r4
  409648:	4628      	mov	r0, r5
  40964a:	4b10      	ldr	r3, [pc, #64]	; (40968c <lv_refr_obj_and_children+0x78>)
  40964c:	4798      	blx	r3
  40964e:	4604      	mov	r4, r0
        while(i != NULL) {
  409650:	2c00      	cmp	r4, #0
  409652:	d1f4      	bne.n	40963e <lv_refr_obj_and_children+0x2a>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
  409654:	6a3b      	ldr	r3, [r7, #32]
  409656:	b11b      	cbz	r3, 409660 <lv_refr_obj_and_children+0x4c>
  409658:	2201      	movs	r2, #1
  40965a:	4631      	mov	r1, r6
  40965c:	4638      	mov	r0, r7
  40965e:	4798      	blx	r3
        par = lv_obj_get_parent(par);
  409660:	4638      	mov	r0, r7
  409662:	4b07      	ldr	r3, [pc, #28]	; (409680 <lv_refr_obj_and_children+0x6c>)
  409664:	4798      	blx	r3
        border_p = par;
  409666:	463c      	mov	r4, r7
        par = lv_obj_get_parent(par);
  409668:	4607      	mov	r7, r0
    while(par != NULL) {
  40966a:	b137      	cbz	r7, 40967a <lv_refr_obj_and_children+0x66>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
  40966c:	1d3d      	adds	r5, r7, #4
  40966e:	4621      	mov	r1, r4
  409670:	4628      	mov	r0, r5
  409672:	4b06      	ldr	r3, [pc, #24]	; (40968c <lv_refr_obj_and_children+0x78>)
  409674:	4798      	blx	r3
  409676:	4604      	mov	r4, r0
        while(i != NULL) {
  409678:	e7ea      	b.n	409650 <lv_refr_obj_and_children+0x3c>
  40967a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40967c:	0040951d 	.word	0x0040951d
  409680:	004059ad 	.word	0x004059ad
  409684:	2040c41c 	.word	0x2040c41c
  409688:	00403659 	.word	0x00403659
  40968c:	004161ab 	.word	0x004161ab

00409690 <_lv_refr_init>:
{
  409690:	4770      	bx	lr
	...

00409694 <_lv_inv_area>:
{
  409694:	b530      	push	{r4, r5, lr}
  409696:	b085      	sub	sp, #20
  409698:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
  40969a:	4605      	mov	r5, r0
  40969c:	2800      	cmp	r0, #0
  40969e:	d035      	beq.n	40970c <_lv_inv_area+0x78>
    if(!disp) return;
  4096a0:	2d00      	cmp	r5, #0
  4096a2:	d03d      	beq.n	409720 <_lv_inv_area+0x8c>
    if(area_p == NULL) {
  4096a4:	2c00      	cmp	r4, #0
  4096a6:	d035      	beq.n	409714 <_lv_inv_area+0x80>
    scr_area.x1 = 0;
  4096a8:	2300      	movs	r3, #0
  4096aa:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
  4096ae:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
  4096b2:	4628      	mov	r0, r5
  4096b4:	4b34      	ldr	r3, [pc, #208]	; (409788 <_lv_inv_area+0xf4>)
  4096b6:	4798      	blx	r3
  4096b8:	b280      	uxth	r0, r0
  4096ba:	3801      	subs	r0, #1
  4096bc:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
  4096c0:	4628      	mov	r0, r5
  4096c2:	4b32      	ldr	r3, [pc, #200]	; (40978c <_lv_inv_area+0xf8>)
  4096c4:	4798      	blx	r3
  4096c6:	b280      	uxth	r0, r0
  4096c8:	3801      	subs	r0, #1
  4096ca:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
  4096ce:	aa02      	add	r2, sp, #8
  4096d0:	4621      	mov	r1, r4
  4096d2:	4668      	mov	r0, sp
  4096d4:	4b2e      	ldr	r3, [pc, #184]	; (409790 <_lv_inv_area+0xfc>)
  4096d6:	4798      	blx	r3
    if(suc != false) {
  4096d8:	b310      	cbz	r0, 409720 <_lv_inv_area+0x8c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
  4096da:	692b      	ldr	r3, [r5, #16]
  4096dc:	b113      	cbz	r3, 4096e4 <_lv_inv_area+0x50>
  4096de:	4669      	mov	r1, sp
  4096e0:	4628      	mov	r0, r5
  4096e2:	4798      	blx	r3
{
  4096e4:	2400      	movs	r4, #0
        for(i = 0; i < disp->inv_p; i++) {
  4096e6:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4096ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4096ee:	429c      	cmp	r4, r3
  4096f0:	da18      	bge.n	409724 <_lv_inv_area+0x90>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
  4096f2:	f104 010c 	add.w	r1, r4, #12
  4096f6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  4096fa:	2200      	movs	r2, #0
  4096fc:	3102      	adds	r1, #2
  4096fe:	4668      	mov	r0, sp
  409700:	4b24      	ldr	r3, [pc, #144]	; (409794 <_lv_inv_area+0x100>)
  409702:	4798      	blx	r3
  409704:	b960      	cbnz	r0, 409720 <_lv_inv_area+0x8c>
        for(i = 0; i < disp->inv_p; i++) {
  409706:	3401      	adds	r4, #1
  409708:	b2a4      	uxth	r4, r4
  40970a:	e7ec      	b.n	4096e6 <_lv_inv_area+0x52>
    if(!disp) disp = lv_disp_get_default();
  40970c:	4b22      	ldr	r3, [pc, #136]	; (409798 <_lv_inv_area+0x104>)
  40970e:	4798      	blx	r3
  409710:	4605      	mov	r5, r0
  409712:	e7c5      	b.n	4096a0 <_lv_inv_area+0xc>
        disp->inv_p = 0;
  409714:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  409718:	f36f 0309 	bfc	r3, #0, #10
  40971c:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
}
  409720:	b005      	add	sp, #20
  409722:	bd30      	pop	{r4, r5, pc}
        if(disp->inv_p < LV_INV_BUF_SIZE) {
  409724:	2b1f      	cmp	r3, #31
  409726:	dc1b      	bgt.n	409760 <_lv_inv_area+0xcc>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
  409728:	330c      	adds	r3, #12
  40972a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  40972e:	3302      	adds	r3, #2
  409730:	4669      	mov	r1, sp
  409732:	2208      	movs	r2, #8
  409734:	e004      	b.n	409740 <_lv_inv_area+0xac>
        *d8 = *s8;
  409736:	f811 0b01 	ldrb.w	r0, [r1], #1
  40973a:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40973e:	3a01      	subs	r2, #1
    while(len) {
  409740:	2a00      	cmp	r2, #0
  409742:	d1f8      	bne.n	409736 <_lv_inv_area+0xa2>
        disp->inv_p++;
  409744:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  409748:	f3c3 0209 	ubfx	r2, r3, #0, #10
  40974c:	3201      	adds	r2, #1
  40974e:	f362 0309 	bfi	r3, r2, #0, #10
  409752:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
  409756:	2103      	movs	r1, #3
  409758:	6b68      	ldr	r0, [r5, #52]	; 0x34
  40975a:	4b10      	ldr	r3, [pc, #64]	; (40979c <_lv_inv_area+0x108>)
  40975c:	4798      	blx	r3
  40975e:	e7df      	b.n	409720 <_lv_inv_area+0x8c>
            disp->inv_p = 0;
  409760:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  409764:	f36f 0309 	bfc	r3, #0, #10
  409768:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
  40976c:	f105 0162 	add.w	r1, r5, #98	; 0x62
    const uint8_t * s8 = (const uint8_t *)src;
  409770:	aa02      	add	r2, sp, #8
  409772:	2308      	movs	r3, #8
  409774:	e004      	b.n	409780 <_lv_inv_area+0xec>
        *d8 = *s8;
  409776:	f812 0b01 	ldrb.w	r0, [r2], #1
  40977a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  40977e:	3b01      	subs	r3, #1
    while(len) {
  409780:	2b00      	cmp	r3, #0
  409782:	d1f8      	bne.n	409776 <_lv_inv_area+0xe2>
  409784:	e7de      	b.n	409744 <_lv_inv_area+0xb0>
  409786:	bf00      	nop
  409788:	00414cf1 	.word	0x00414cf1
  40978c:	00414d21 	.word	0x00414d21
  409790:	004155b3 	.word	0x004155b3
  409794:	00415829 	.word	0x00415829
  409798:	00414ce5 	.word	0x00414ce5
  40979c:	0041787d 	.word	0x0041787d

004097a0 <_lv_refr_get_disp_refreshing>:
}
  4097a0:	4b01      	ldr	r3, [pc, #4]	; (4097a8 <_lv_refr_get_disp_refreshing+0x8>)
  4097a2:	6818      	ldr	r0, [r3, #0]
  4097a4:	4770      	bx	lr
  4097a6:	bf00      	nop
  4097a8:	2040c41c 	.word	0x2040c41c

004097ac <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
  4097ac:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  4097ae:	4d1e      	ldr	r5, [pc, #120]	; (409828 <lv_refr_vdb_flush+0x7c>)
  4097b0:	6828      	ldr	r0, [r5, #0]
  4097b2:	4b1e      	ldr	r3, [pc, #120]	; (40982c <lv_refr_vdb_flush+0x80>)
  4097b4:	4798      	blx	r3
  4097b6:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
  4097b8:	6828      	ldr	r0, [r5, #0]
  4097ba:	4b1d      	ldr	r3, [pc, #116]	; (409830 <lv_refr_vdb_flush+0x84>)
  4097bc:	4798      	blx	r3
  4097be:	b978      	cbnz	r0, 4097e0 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
  4097c0:	2301      	movs	r3, #1
  4097c2:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
  4097c4:	4b18      	ldr	r3, [pc, #96]	; (409828 <lv_refr_vdb_flush+0x7c>)
  4097c6:	681b      	ldr	r3, [r3, #0]
  4097c8:	685b      	ldr	r3, [r3, #4]
  4097ca:	6a1a      	ldr	r2, [r3, #32]
  4097cc:	f012 0f01 	tst.w	r2, #1
  4097d0:	d010      	beq.n	4097f4 <lv_refr_vdb_flush+0x48>
  4097d2:	6a1b      	ldr	r3, [r3, #32]
  4097d4:	f013 0f02 	tst.w	r3, #2
  4097d8:	d00c      	beq.n	4097f4 <lv_refr_vdb_flush+0x48>
  4097da:	2301      	movs	r3, #1
  4097dc:	61e3      	str	r3, [r4, #28]
  4097de:	e00b      	b.n	4097f8 <lv_refr_vdb_flush+0x4c>
        while(vdb->flushing) {
  4097e0:	69a3      	ldr	r3, [r4, #24]
  4097e2:	2b00      	cmp	r3, #0
  4097e4:	d0ec      	beq.n	4097c0 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  4097e6:	4b10      	ldr	r3, [pc, #64]	; (409828 <lv_refr_vdb_flush+0x7c>)
  4097e8:	6818      	ldr	r0, [r3, #0]
  4097ea:	69c3      	ldr	r3, [r0, #28]
  4097ec:	2b00      	cmp	r3, #0
  4097ee:	d0f7      	beq.n	4097e0 <lv_refr_vdb_flush+0x34>
  4097f0:	4798      	blx	r3
  4097f2:	e7f5      	b.n	4097e0 <lv_refr_vdb_flush+0x34>
    else vdb->flushing_last = 0;
  4097f4:	2300      	movs	r3, #0
  4097f6:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  4097f8:	4b0e      	ldr	r3, [pc, #56]	; (409834 <lv_refr_vdb_flush+0x88>)
  4097fa:	4798      	blx	r3
  4097fc:	4605      	mov	r5, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  4097fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
  409800:	b103      	cbz	r3, 409804 <lv_refr_vdb_flush+0x58>
  409802:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
  409804:	68eb      	ldr	r3, [r5, #12]
  409806:	b123      	cbz	r3, 409812 <lv_refr_vdb_flush+0x66>
  409808:	68a2      	ldr	r2, [r4, #8]
  40980a:	f104 0110 	add.w	r1, r4, #16
  40980e:	4628      	mov	r0, r5
  409810:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
  409812:	6823      	ldr	r3, [r4, #0]
  409814:	b12b      	cbz	r3, 409822 <lv_refr_vdb_flush+0x76>
  409816:	6862      	ldr	r2, [r4, #4]
  409818:	b11a      	cbz	r2, 409822 <lv_refr_vdb_flush+0x76>
        if(vdb->buf_act == vdb->buf1)
  40981a:	68a1      	ldr	r1, [r4, #8]
  40981c:	428b      	cmp	r3, r1
  40981e:	d001      	beq.n	409824 <lv_refr_vdb_flush+0x78>
            vdb->buf_act = vdb->buf2;
        else
            vdb->buf_act = vdb->buf1;
  409820:	60a3      	str	r3, [r4, #8]
  409822:	bd38      	pop	{r3, r4, r5, pc}
            vdb->buf_act = vdb->buf2;
  409824:	60a2      	str	r2, [r4, #8]
  409826:	bd38      	pop	{r3, r4, r5, pc}
  409828:	2040c41c 	.word	0x2040c41c
  40982c:	00414df5 	.word	0x00414df5
  409830:	00414e2d 	.word	0x00414e2d
  409834:	004097a1 	.word	0x004097a1

00409838 <lv_refr_area_part>:
{
  409838:	b570      	push	{r4, r5, r6, lr}
  40983a:	b09c      	sub	sp, #112	; 0x70
  40983c:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  40983e:	4d4c      	ldr	r5, [pc, #304]	; (409970 <lv_refr_area_part+0x138>)
  409840:	6828      	ldr	r0, [r5, #0]
  409842:	4b4c      	ldr	r3, [pc, #304]	; (409974 <lv_refr_area_part+0x13c>)
  409844:	4798      	blx	r3
  409846:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
  409848:	6828      	ldr	r0, [r5, #0]
  40984a:	4b4b      	ldr	r3, [pc, #300]	; (409978 <lv_refr_area_part+0x140>)
  40984c:	4798      	blx	r3
  40984e:	b940      	cbnz	r0, 409862 <lv_refr_area_part+0x2a>
        while(vdb->flushing) {
  409850:	69a3      	ldr	r3, [r4, #24]
  409852:	b133      	cbz	r3, 409862 <lv_refr_area_part+0x2a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  409854:	4b46      	ldr	r3, [pc, #280]	; (409970 <lv_refr_area_part+0x138>)
  409856:	6818      	ldr	r0, [r3, #0]
  409858:	69c3      	ldr	r3, [r0, #28]
  40985a:	2b00      	cmp	r3, #0
  40985c:	d0f8      	beq.n	409850 <lv_refr_area_part+0x18>
  40985e:	4798      	blx	r3
  409860:	e7f6      	b.n	409850 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
  409862:	f104 0210 	add.w	r2, r4, #16
  409866:	4631      	mov	r1, r6
  409868:	a81a      	add	r0, sp, #104	; 0x68
  40986a:	4b44      	ldr	r3, [pc, #272]	; (40997c <lv_refr_area_part+0x144>)
  40986c:	4798      	blx	r3
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
  40986e:	4d40      	ldr	r5, [pc, #256]	; (409970 <lv_refr_area_part+0x138>)
  409870:	6828      	ldr	r0, [r5, #0]
  409872:	4b43      	ldr	r3, [pc, #268]	; (409980 <lv_refr_area_part+0x148>)
  409874:	4798      	blx	r3
  409876:	4601      	mov	r1, r0
  409878:	a81a      	add	r0, sp, #104	; 0x68
  40987a:	4b42      	ldr	r3, [pc, #264]	; (409984 <lv_refr_area_part+0x14c>)
  40987c:	4798      	blx	r3
  40987e:	4604      	mov	r4, r0
    if(disp_refr->prev_scr) {
  409880:	682b      	ldr	r3, [r5, #0]
  409882:	6c99      	ldr	r1, [r3, #72]	; 0x48
  409884:	2900      	cmp	r1, #0
  409886:	d03d      	beq.n	409904 <lv_refr_area_part+0xcc>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
  409888:	a81a      	add	r0, sp, #104	; 0x68
  40988a:	4b3e      	ldr	r3, [pc, #248]	; (409984 <lv_refr_area_part+0x14c>)
  40988c:	4798      	blx	r3
  40988e:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  409890:	2c00      	cmp	r4, #0
  409892:	bf08      	it	eq
  409894:	2d00      	cmpeq	r5, #0
  409896:	d113      	bne.n	4098c0 <lv_refr_area_part+0x88>
        if(disp_refr->bg_img) {
  409898:	4b35      	ldr	r3, [pc, #212]	; (409970 <lv_refr_area_part+0x138>)
  40989a:	681b      	ldr	r3, [r3, #0]
  40989c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  40989e:	2b00      	cmp	r3, #0
  4098a0:	d04a      	beq.n	409938 <lv_refr_area_part+0x100>
            lv_draw_img_dsc_init(&dsc);
  4098a2:	a805      	add	r0, sp, #20
  4098a4:	4b38      	ldr	r3, [pc, #224]	; (409988 <lv_refr_area_part+0x150>)
  4098a6:	4798      	blx	r3
            dsc.opa = disp_refr->bg_opa;
  4098a8:	4b31      	ldr	r3, [pc, #196]	; (409970 <lv_refr_area_part+0x138>)
  4098aa:	681b      	ldr	r3, [r3, #0]
  4098ac:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
  4098b0:	f88d 2014 	strb.w	r2, [sp, #20]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
  4098b4:	a902      	add	r1, sp, #8
  4098b6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
  4098b8:	4b34      	ldr	r3, [pc, #208]	; (40998c <lv_refr_area_part+0x154>)
  4098ba:	4798      	blx	r3
            if(res == LV_RES_OK) {
  4098bc:	2801      	cmp	r0, #1
  4098be:	d023      	beq.n	409908 <lv_refr_area_part+0xd0>
    if(disp_refr->prev_scr) {
  4098c0:	4b2b      	ldr	r3, [pc, #172]	; (409970 <lv_refr_area_part+0x138>)
  4098c2:	681b      	ldr	r3, [r3, #0]
  4098c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4098c6:	b12b      	cbz	r3, 4098d4 <lv_refr_area_part+0x9c>
        if(top_prev_scr == NULL) {
  4098c8:	2d00      	cmp	r5, #0
  4098ca:	d048      	beq.n	40995e <lv_refr_area_part+0x126>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
  4098cc:	a91a      	add	r1, sp, #104	; 0x68
  4098ce:	4628      	mov	r0, r5
  4098d0:	4b2f      	ldr	r3, [pc, #188]	; (409990 <lv_refr_area_part+0x158>)
  4098d2:	4798      	blx	r3
    if(top_act_scr == NULL) {
  4098d4:	2c00      	cmp	r4, #0
  4098d6:	d044      	beq.n	409962 <lv_refr_area_part+0x12a>
    lv_refr_obj_and_children(top_act_scr, &start_mask);
  4098d8:	a91a      	add	r1, sp, #104	; 0x68
  4098da:	4620      	mov	r0, r4
  4098dc:	4d2c      	ldr	r5, [pc, #176]	; (409990 <lv_refr_area_part+0x158>)
  4098de:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
  4098e0:	4c23      	ldr	r4, [pc, #140]	; (409970 <lv_refr_area_part+0x138>)
  4098e2:	6820      	ldr	r0, [r4, #0]
  4098e4:	4b2b      	ldr	r3, [pc, #172]	; (409994 <lv_refr_area_part+0x15c>)
  4098e6:	4798      	blx	r3
  4098e8:	a91a      	add	r1, sp, #104	; 0x68
  4098ea:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
  4098ec:	6820      	ldr	r0, [r4, #0]
  4098ee:	4b2a      	ldr	r3, [pc, #168]	; (409998 <lv_refr_area_part+0x160>)
  4098f0:	4798      	blx	r3
  4098f2:	a91a      	add	r1, sp, #104	; 0x68
  4098f4:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
  4098f6:	6820      	ldr	r0, [r4, #0]
  4098f8:	4b28      	ldr	r3, [pc, #160]	; (40999c <lv_refr_area_part+0x164>)
  4098fa:	4798      	blx	r3
  4098fc:	2800      	cmp	r0, #0
  4098fe:	d034      	beq.n	40996a <lv_refr_area_part+0x132>
}
  409900:	b01c      	add	sp, #112	; 0x70
  409902:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_t * top_prev_scr = NULL;
  409904:	2500      	movs	r5, #0
  409906:	e7c3      	b.n	409890 <lv_refr_area_part+0x58>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
  409908:	9b02      	ldr	r3, [sp, #8]
  40990a:	f3c3 238a 	ubfx	r3, r3, #10, #11
  40990e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  409912:	f3c2 124a 	ubfx	r2, r2, #5, #11
  409916:	3a01      	subs	r2, #1
  409918:	9200      	str	r2, [sp, #0]
  40991a:	3b01      	subs	r3, #1
  40991c:	2200      	movs	r2, #0
  40991e:	4611      	mov	r1, r2
  409920:	a803      	add	r0, sp, #12
  409922:	4e1f      	ldr	r6, [pc, #124]	; (4099a0 <lv_refr_area_part+0x168>)
  409924:	47b0      	blx	r6
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
  409926:	4b12      	ldr	r3, [pc, #72]	; (409970 <lv_refr_area_part+0x138>)
  409928:	681a      	ldr	r2, [r3, #0]
  40992a:	ab05      	add	r3, sp, #20
  40992c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  40992e:	a91a      	add	r1, sp, #104	; 0x68
  409930:	a803      	add	r0, sp, #12
  409932:	4e1c      	ldr	r6, [pc, #112]	; (4099a4 <lv_refr_area_part+0x16c>)
  409934:	47b0      	blx	r6
  409936:	e7c3      	b.n	4098c0 <lv_refr_area_part+0x88>
            lv_draw_rect_dsc_init(&dsc);
  409938:	a805      	add	r0, sp, #20
  40993a:	4b1b      	ldr	r3, [pc, #108]	; (4099a8 <lv_refr_area_part+0x170>)
  40993c:	4798      	blx	r3
            dsc.bg_color = disp_refr->bg_color;
  40993e:	4b0c      	ldr	r3, [pc, #48]	; (409970 <lv_refr_area_part+0x138>)
  409940:	681b      	ldr	r3, [r3, #0]
  409942:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
  409946:	f8ad 2016 	strh.w	r2, [sp, #22]
            dsc.bg_opa = disp_refr->bg_opa;
  40994a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  40994e:	f88d 3020 	strb.w	r3, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
  409952:	aa05      	add	r2, sp, #20
  409954:	a91a      	add	r1, sp, #104	; 0x68
  409956:	4608      	mov	r0, r1
  409958:	4b14      	ldr	r3, [pc, #80]	; (4099ac <lv_refr_area_part+0x174>)
  40995a:	4798      	blx	r3
  40995c:	e7b0      	b.n	4098c0 <lv_refr_area_part+0x88>
            top_prev_scr = disp_refr->prev_scr;
  40995e:	461d      	mov	r5, r3
  409960:	e7b4      	b.n	4098cc <lv_refr_area_part+0x94>
        top_act_scr = disp_refr->act_scr;
  409962:	4b03      	ldr	r3, [pc, #12]	; (409970 <lv_refr_area_part+0x138>)
  409964:	681b      	ldr	r3, [r3, #0]
  409966:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  409968:	e7b6      	b.n	4098d8 <lv_refr_area_part+0xa0>
        lv_refr_vdb_flush();
  40996a:	4b11      	ldr	r3, [pc, #68]	; (4099b0 <lv_refr_area_part+0x178>)
  40996c:	4798      	blx	r3
}
  40996e:	e7c7      	b.n	409900 <lv_refr_area_part+0xc8>
  409970:	2040c41c 	.word	0x2040c41c
  409974:	00414df5 	.word	0x00414df5
  409978:	00414e2d 	.word	0x00414e2d
  40997c:	004155b3 	.word	0x004155b3
  409980:	00403659 	.word	0x00403659
  409984:	0040947d 	.word	0x0040947d
  409988:	0040d341 	.word	0x0040d341
  40998c:	00413909 	.word	0x00413909
  409990:	00409615 	.word	0x00409615
  409994:	00403691 	.word	0x00403691
  409998:	004036ad 	.word	0x004036ad
  40999c:	00414e45 	.word	0x00414e45
  4099a0:	0041557d 	.word	0x0041557d
  4099a4:	0040d5ed 	.word	0x0040d5ed
  4099a8:	0041245d 	.word	0x0041245d
  4099ac:	004124a9 	.word	0x004124a9
  4099b0:	004097ad 	.word	0x004097ad

004099b4 <lv_refr_area>:
{
  4099b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4099b8:	b083      	sub	sp, #12
  4099ba:	4606      	mov	r6, r0
    if(lv_disp_is_true_double_buf(disp_refr)) {
  4099bc:	4b62      	ldr	r3, [pc, #392]	; (409b48 <lv_refr_area+0x194>)
  4099be:	6818      	ldr	r0, [r3, #0]
  4099c0:	4b62      	ldr	r3, [pc, #392]	; (409b4c <lv_refr_area+0x198>)
  4099c2:	4798      	blx	r3
  4099c4:	2800      	cmp	r0, #0
  4099c6:	d157      	bne.n	409a78 <lv_refr_area+0xc4>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  4099c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 409b48 <lv_refr_area+0x194>
  4099cc:	f8d9 0000 	ldr.w	r0, [r9]
  4099d0:	4b5f      	ldr	r3, [pc, #380]	; (409b50 <lv_refr_area+0x19c>)
  4099d2:	4798      	blx	r3
  4099d4:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4099d6:	f8b6 8004 	ldrh.w	r8, [r6, #4]
  4099da:	8833      	ldrh	r3, [r6, #0]
  4099dc:	eba8 0803 	sub.w	r8, r8, r3
  4099e0:	fa1f f888 	uxth.w	r8, r8
  4099e4:	f108 0801 	add.w	r8, r8, #1
  4099e8:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4099ec:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
  4099f0:	b2bc      	uxth	r4, r7
  4099f2:	8873      	ldrh	r3, [r6, #2]
  4099f4:	1ae4      	subs	r4, r4, r3
  4099f6:	b2a4      	uxth	r4, r4
  4099f8:	3401      	adds	r4, #1
  4099fa:	b224      	sxth	r4, r4
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  4099fc:	f8d9 0000 	ldr.w	r0, [r9]
  409a00:	4b54      	ldr	r3, [pc, #336]	; (409b54 <lv_refr_area+0x1a0>)
  409a02:	4798      	blx	r3
        lv_coord_t y2 =
  409a04:	42b8      	cmp	r0, r7
  409a06:	dd59      	ble.n	409abc <lv_refr_area+0x108>
  409a08:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
        int32_t max_row = (uint32_t)vdb->size / w;
  409a0c:	68eb      	ldr	r3, [r5, #12]
  409a0e:	fbb3 f3f8 	udiv	r3, r3, r8
        if(max_row > h) max_row = h;
  409a12:	46a0      	mov	r8, r4
  409a14:	42a3      	cmp	r3, r4
  409a16:	dc00      	bgt.n	409a1a <lv_refr_area+0x66>
        int32_t max_row = (uint32_t)vdb->size / w;
  409a18:	4698      	mov	r8, r3
        if(disp_refr->driver.rounder_cb) {
  409a1a:	4b4b      	ldr	r3, [pc, #300]	; (409b48 <lv_refr_area+0x194>)
  409a1c:	681b      	ldr	r3, [r3, #0]
  409a1e:	691b      	ldr	r3, [r3, #16]
  409a20:	b32b      	cbz	r3, 409a6e <lv_refr_area+0xba>
            tmp.x1 = 0;
  409a22:	2300      	movs	r3, #0
  409a24:	f8ad 3000 	strh.w	r3, [sp]
            tmp.x2 = 0;
  409a28:	f8ad 3004 	strh.w	r3, [sp, #4]
            tmp.y1 = 0;
  409a2c:	f8ad 3002 	strh.w	r3, [sp, #2]
            lv_coord_t h_tmp = max_row;
  409a30:	fa0f f988 	sxth.w	r9, r8
                tmp.y2 = h_tmp - 1;
  409a34:	f109 34ff 	add.w	r4, r9, #4294967295
  409a38:	b224      	sxth	r4, r4
  409a3a:	f8ad 4006 	strh.w	r4, [sp, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
  409a3e:	4b42      	ldr	r3, [pc, #264]	; (409b48 <lv_refr_area+0x194>)
  409a40:	6818      	ldr	r0, [r3, #0]
  409a42:	6903      	ldr	r3, [r0, #16]
  409a44:	4669      	mov	r1, sp
  409a46:	4798      	blx	r3
  409a48:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  409a4c:	b293      	uxth	r3, r2
  409a4e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
  409a52:	1a5b      	subs	r3, r3, r1
  409a54:	b29b      	uxth	r3, r3
  409a56:	3301      	adds	r3, #1
  409a58:	b21b      	sxth	r3, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
  409a5a:	4598      	cmp	r8, r3
  409a5c:	da02      	bge.n	409a64 <lv_refr_area+0xb0>
                h_tmp--;
  409a5e:	46a1      	mov	r9, r4
            } while(h_tmp > 0);
  409a60:	2c00      	cmp	r4, #0
  409a62:	dce7      	bgt.n	409a34 <lv_refr_area+0x80>
            if(h_tmp <= 0) {
  409a64:	f1b9 0f00 	cmp.w	r9, #0
  409a68:	dd25      	ble.n	409ab6 <lv_refr_area+0x102>
                max_row = tmp.y2 + 1;
  409a6a:	f102 0801 	add.w	r8, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409a6e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
        lv_coord_t row_last = 0;
  409a72:	f04f 0900 	mov.w	r9, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409a76:	e031      	b.n	409adc <lv_refr_area+0x128>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409a78:	4c33      	ldr	r4, [pc, #204]	; (409b48 <lv_refr_area+0x194>)
  409a7a:	6820      	ldr	r0, [r4, #0]
  409a7c:	4b34      	ldr	r3, [pc, #208]	; (409b50 <lv_refr_area+0x19c>)
  409a7e:	4798      	blx	r3
  409a80:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
  409a82:	2700      	movs	r7, #0
  409a84:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
  409a86:	6820      	ldr	r0, [r4, #0]
  409a88:	4b33      	ldr	r3, [pc, #204]	; (409b58 <lv_refr_area+0x1a4>)
  409a8a:	4798      	blx	r3
  409a8c:	b280      	uxth	r0, r0
  409a8e:	3801      	subs	r0, #1
  409a90:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
  409a92:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
  409a94:	6820      	ldr	r0, [r4, #0]
  409a96:	4b2f      	ldr	r3, [pc, #188]	; (409b54 <lv_refr_area+0x1a0>)
  409a98:	4798      	blx	r3
  409a9a:	b280      	uxth	r0, r0
  409a9c:	3801      	subs	r0, #1
  409a9e:	82e8      	strh	r0, [r5, #22]
        disp_refr->driver.buffer->last_part = 1;
  409aa0:	6823      	ldr	r3, [r4, #0]
  409aa2:	685a      	ldr	r2, [r3, #4]
  409aa4:	f892 3020 	ldrb.w	r3, [r2, #32]
  409aa8:	f043 0302 	orr.w	r3, r3, #2
  409aac:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
  409ab0:	4630      	mov	r0, r6
  409ab2:	4b2a      	ldr	r3, [pc, #168]	; (409b5c <lv_refr_area+0x1a8>)
  409ab4:	4798      	blx	r3
}
  409ab6:	b003      	add	sp, #12
  409ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  409abc:	f8d9 0000 	ldr.w	r0, [r9]
  409ac0:	4b24      	ldr	r3, [pc, #144]	; (409b54 <lv_refr_area+0x1a0>)
  409ac2:	4798      	blx	r3
  409ac4:	b287      	uxth	r7, r0
  409ac6:	3f01      	subs	r7, #1
        lv_coord_t y2 =
  409ac8:	b23f      	sxth	r7, r7
  409aca:	e79f      	b.n	409a0c <lv_refr_area+0x58>
            row_last = vdb->area.y2;
  409acc:	f9b5 9016 	ldrsh.w	r9, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409ad0:	454f      	cmp	r7, r9
  409ad2:	d018      	beq.n	409b06 <lv_refr_area+0x152>
            lv_refr_area_part(area_p);
  409ad4:	4630      	mov	r0, r6
  409ad6:	4b21      	ldr	r3, [pc, #132]	; (409b5c <lv_refr_area+0x1a8>)
  409ad8:	4798      	blx	r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409ada:	b223      	sxth	r3, r4
  409adc:	eb03 0208 	add.w	r2, r3, r8
  409ae0:	3a01      	subs	r2, #1
  409ae2:	42ba      	cmp	r2, r7
  409ae4:	dc19      	bgt.n	409b1a <lv_refr_area+0x166>
            vdb->area.x1 = area_p->x1;
  409ae6:	f9b6 2000 	ldrsh.w	r2, [r6]
  409aea:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  409aec:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  409af0:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  409af2:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = row + max_row - 1;
  409af4:	4443      	add	r3, r8
  409af6:	b29c      	uxth	r4, r3
  409af8:	1e63      	subs	r3, r4, #1
  409afa:	b21b      	sxth	r3, r3
  409afc:	82eb      	strh	r3, [r5, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
  409afe:	429f      	cmp	r7, r3
  409b00:	dae4      	bge.n	409acc <lv_refr_area+0x118>
  409b02:	82ef      	strh	r7, [r5, #22]
  409b04:	e7e2      	b.n	409acc <lv_refr_area+0x118>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409b06:	4b10      	ldr	r3, [pc, #64]	; (409b48 <lv_refr_area+0x194>)
  409b08:	681b      	ldr	r3, [r3, #0]
  409b0a:	685a      	ldr	r2, [r3, #4]
  409b0c:	f892 3020 	ldrb.w	r3, [r2, #32]
  409b10:	f043 0302 	orr.w	r3, r3, #2
  409b14:	f882 3020 	strb.w	r3, [r2, #32]
  409b18:	e7dc      	b.n	409ad4 <lv_refr_area+0x120>
        if(y2 != row_last) {
  409b1a:	45b9      	cmp	r9, r7
  409b1c:	d0cb      	beq.n	409ab6 <lv_refr_area+0x102>
            vdb->area.x1 = area_p->x1;
  409b1e:	f9b6 2000 	ldrsh.w	r2, [r6]
  409b22:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  409b24:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  409b28:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  409b2a:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = y2;
  409b2c:	82ef      	strh	r7, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
  409b2e:	4b06      	ldr	r3, [pc, #24]	; (409b48 <lv_refr_area+0x194>)
  409b30:	681b      	ldr	r3, [r3, #0]
  409b32:	685a      	ldr	r2, [r3, #4]
  409b34:	f892 3020 	ldrb.w	r3, [r2, #32]
  409b38:	f043 0302 	orr.w	r3, r3, #2
  409b3c:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
  409b40:	4630      	mov	r0, r6
  409b42:	4b06      	ldr	r3, [pc, #24]	; (409b5c <lv_refr_area+0x1a8>)
  409b44:	4798      	blx	r3
  409b46:	e7b6      	b.n	409ab6 <lv_refr_area+0x102>
  409b48:	2040c41c 	.word	0x2040c41c
  409b4c:	00414e45 	.word	0x00414e45
  409b50:	00414df5 	.word	0x00414df5
  409b54:	00414d21 	.word	0x00414d21
  409b58:	00414cf1 	.word	0x00414cf1
  409b5c:	00409839 	.word	0x00409839

00409b60 <lv_refr_areas>:
    px_num = 0;
  409b60:	2200      	movs	r2, #0
  409b62:	4b2b      	ldr	r3, [pc, #172]	; (409c10 <lv_refr_areas+0xb0>)
  409b64:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
  409b66:	4b2b      	ldr	r3, [pc, #172]	; (409c14 <lv_refr_areas+0xb4>)
  409b68:	681a      	ldr	r2, [r3, #0]
  409b6a:	f8b2 3182 	ldrh.w	r3, [r2, #386]	; 0x182
  409b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409b72:	2b00      	cmp	r3, #0
  409b74:	d04b      	beq.n	409c0e <lv_refr_areas+0xae>
{
  409b76:	b570      	push	{r4, r5, r6, lr}
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409b78:	1e5e      	subs	r6, r3, #1
  409b7a:	2e00      	cmp	r6, #0
  409b7c:	db05      	blt.n	409b8a <lv_refr_areas+0x2a>
        if(disp_refr->inv_area_joined[i] == 0) {
  409b7e:	1993      	adds	r3, r2, r6
  409b80:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409b84:	b113      	cbz	r3, 409b8c <lv_refr_areas+0x2c>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409b86:	3e01      	subs	r6, #1
  409b88:	e7f7      	b.n	409b7a <lv_refr_areas+0x1a>
    int32_t last_i = 0;
  409b8a:	2600      	movs	r6, #0
    disp_refr->driver.buffer->last_area = 0;
  409b8c:	6851      	ldr	r1, [r2, #4]
  409b8e:	f891 3020 	ldrb.w	r3, [r1, #32]
  409b92:	f36f 0300 	bfc	r3, #0, #1
  409b96:	f881 3020 	strb.w	r3, [r1, #32]
    disp_refr->driver.buffer->last_part = 0;
  409b9a:	6852      	ldr	r2, [r2, #4]
  409b9c:	f892 3020 	ldrb.w	r3, [r2, #32]
  409ba0:	f36f 0341 	bfc	r3, #1, #1
  409ba4:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
  409ba8:	2400      	movs	r4, #0
  409baa:	e01f      	b.n	409bec <lv_refr_areas+0x8c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409bac:	6842      	ldr	r2, [r0, #4]
  409bae:	f892 3020 	ldrb.w	r3, [r2, #32]
  409bb2:	f043 0301 	orr.w	r3, r3, #1
  409bb6:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
  409bba:	6842      	ldr	r2, [r0, #4]
  409bbc:	f892 3020 	ldrb.w	r3, [r2, #32]
  409bc0:	f36f 0341 	bfc	r3, #1, #1
  409bc4:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
  409bc8:	f104 050c 	add.w	r5, r4, #12
  409bcc:	00ed      	lsls	r5, r5, #3
  409bce:	4428      	add	r0, r5
  409bd0:	3002      	adds	r0, #2
  409bd2:	4b11      	ldr	r3, [pc, #68]	; (409c18 <lv_refr_areas+0xb8>)
  409bd4:	4798      	blx	r3
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
  409bd6:	4b0f      	ldr	r3, [pc, #60]	; (409c14 <lv_refr_areas+0xb4>)
  409bd8:	6818      	ldr	r0, [r3, #0]
  409bda:	4428      	add	r0, r5
  409bdc:	3002      	adds	r0, #2
  409bde:	4b0f      	ldr	r3, [pc, #60]	; (409c1c <lv_refr_areas+0xbc>)
  409be0:	4798      	blx	r3
  409be2:	4a0b      	ldr	r2, [pc, #44]	; (409c10 <lv_refr_areas+0xb0>)
  409be4:	6813      	ldr	r3, [r2, #0]
  409be6:	4418      	add	r0, r3
  409be8:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
  409bea:	3401      	adds	r4, #1
  409bec:	4b09      	ldr	r3, [pc, #36]	; (409c14 <lv_refr_areas+0xb4>)
  409bee:	6818      	ldr	r0, [r3, #0]
  409bf0:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409bf8:	429c      	cmp	r4, r3
  409bfa:	da07      	bge.n	409c0c <lv_refr_areas+0xac>
        if(disp_refr->inv_area_joined[i] == 0) {
  409bfc:	1903      	adds	r3, r0, r4
  409bfe:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409c02:	2b00      	cmp	r3, #0
  409c04:	d1f1      	bne.n	409bea <lv_refr_areas+0x8a>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409c06:	42b4      	cmp	r4, r6
  409c08:	d1d7      	bne.n	409bba <lv_refr_areas+0x5a>
  409c0a:	e7cf      	b.n	409bac <lv_refr_areas+0x4c>
  409c0c:	bd70      	pop	{r4, r5, r6, pc}
  409c0e:	4770      	bx	lr
  409c10:	2040c420 	.word	0x2040c420
  409c14:	2040c41c 	.word	0x2040c41c
  409c18:	004099b5 	.word	0x004099b5
  409c1c:	00415597 	.word	0x00415597

00409c20 <_lv_disp_refr_task>:
{
  409c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c24:	b085      	sub	sp, #20
  409c26:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
  409c28:	4b58      	ldr	r3, [pc, #352]	; (409d8c <_lv_disp_refr_task+0x16c>)
  409c2a:	4798      	blx	r3
  409c2c:	9001      	str	r0, [sp, #4]
    disp_refr = task->user_data;
  409c2e:	68eb      	ldr	r3, [r5, #12]
  409c30:	4c57      	ldr	r4, [pc, #348]	; (409d90 <_lv_disp_refr_task+0x170>)
  409c32:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
  409c34:	2100      	movs	r1, #0
  409c36:	4628      	mov	r0, r5
  409c38:	4b56      	ldr	r3, [pc, #344]	; (409d94 <_lv_disp_refr_task+0x174>)
  409c3a:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
  409c3c:	6823      	ldr	r3, [r4, #0]
  409c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  409c40:	b18a      	cbz	r2, 409c66 <_lv_disp_refr_task+0x46>
    lv_refr_join_area();
  409c42:	4b55      	ldr	r3, [pc, #340]	; (409d98 <_lv_disp_refr_task+0x178>)
  409c44:	4798      	blx	r3
    lv_refr_areas();
  409c46:	4b55      	ldr	r3, [pc, #340]	; (409d9c <_lv_disp_refr_task+0x17c>)
  409c48:	4798      	blx	r3
    if(disp_refr->inv_p != 0) {
  409c4a:	4b51      	ldr	r3, [pc, #324]	; (409d90 <_lv_disp_refr_task+0x170>)
  409c4c:	6818      	ldr	r0, [r3, #0]
  409c4e:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409c56:	b96b      	cbnz	r3, 409c74 <_lv_disp_refr_task+0x54>
    _lv_mem_buf_free_all();
  409c58:	4b51      	ldr	r3, [pc, #324]	; (409da0 <_lv_disp_refr_task+0x180>)
  409c5a:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
  409c5c:	4b51      	ldr	r3, [pc, #324]	; (409da4 <_lv_disp_refr_task+0x184>)
  409c5e:	4798      	blx	r3
}
  409c60:	b005      	add	sp, #20
  409c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr->inv_p = 0;
  409c66:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409c6a:	f36f 0209 	bfc	r2, #0, #10
  409c6e:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        return;
  409c72:	e7f5      	b.n	409c60 <_lv_disp_refr_task+0x40>
        if(lv_disp_is_true_double_buf(disp_refr)) {
  409c74:	4b4c      	ldr	r3, [pc, #304]	; (409da8 <_lv_disp_refr_task+0x188>)
  409c76:	4798      	blx	r3
  409c78:	b118      	cbz	r0, 409c82 <_lv_disp_refr_task+0x62>
            if(disp_refr->driver.set_px_cb) {
  409c7a:	4b45      	ldr	r3, [pc, #276]	; (409d90 <_lv_disp_refr_task+0x170>)
  409c7c:	6818      	ldr	r0, [r3, #0]
  409c7e:	6943      	ldr	r3, [r0, #20]
  409c80:	b1fb      	cbz	r3, 409cc2 <_lv_disp_refr_task+0xa2>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
  409c82:	4c43      	ldr	r4, [pc, #268]	; (409d90 <_lv_disp_refr_task+0x170>)
  409c84:	6820      	ldr	r0, [r4, #0]
  409c86:	f44f 7180 	mov.w	r1, #256	; 0x100
  409c8a:	3062      	adds	r0, #98	; 0x62
  409c8c:	4d47      	ldr	r5, [pc, #284]	; (409dac <_lv_disp_refr_task+0x18c>)
  409c8e:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
  409c90:	6820      	ldr	r0, [r4, #0]
  409c92:	2120      	movs	r1, #32
  409c94:	f500 70b1 	add.w	r0, r0, #354	; 0x162
  409c98:	47a8      	blx	r5
        disp_refr->inv_p = 0;
  409c9a:	6823      	ldr	r3, [r4, #0]
  409c9c:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409ca0:	f36f 0209 	bfc	r2, #0, #10
  409ca4:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        elaps = lv_tick_elaps(start);
  409ca8:	9801      	ldr	r0, [sp, #4]
  409caa:	4b41      	ldr	r3, [pc, #260]	; (409db0 <_lv_disp_refr_task+0x190>)
  409cac:	4798      	blx	r3
        if(disp_refr->driver.monitor_cb) {
  409cae:	6824      	ldr	r4, [r4, #0]
  409cb0:	69a3      	ldr	r3, [r4, #24]
  409cb2:	2b00      	cmp	r3, #0
  409cb4:	d0d0      	beq.n	409c58 <_lv_disp_refr_task+0x38>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
  409cb6:	4a3f      	ldr	r2, [pc, #252]	; (409db4 <_lv_disp_refr_task+0x194>)
  409cb8:	6812      	ldr	r2, [r2, #0]
  409cba:	4601      	mov	r1, r0
  409cbc:	4620      	mov	r0, r4
  409cbe:	4798      	blx	r3
  409cc0:	e7ca      	b.n	409c58 <_lv_disp_refr_task+0x38>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409cc2:	4b3d      	ldr	r3, [pc, #244]	; (409db8 <_lv_disp_refr_task+0x198>)
  409cc4:	4798      	blx	r3
  409cc6:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
  409cc8:	4b3c      	ldr	r3, [pc, #240]	; (409dbc <_lv_disp_refr_task+0x19c>)
  409cca:	4798      	blx	r3
                while(vdb->flushing);
  409ccc:	69a3      	ldr	r3, [r4, #24]
  409cce:	2b00      	cmp	r3, #0
  409cd0:	d1fc      	bne.n	409ccc <_lv_disp_refr_task+0xac>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
  409cd2:	4b2f      	ldr	r3, [pc, #188]	; (409d90 <_lv_disp_refr_task+0x170>)
  409cd4:	681b      	ldr	r3, [r3, #0]
  409cd6:	f9b3 0000 	ldrsh.w	r0, [r3]
  409cda:	0040      	lsls	r0, r0, #1
  409cdc:	4b38      	ldr	r3, [pc, #224]	; (409dc0 <_lv_disp_refr_task+0x1a0>)
  409cde:	4798      	blx	r3
  409ce0:	9003      	str	r0, [sp, #12]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
  409ce2:	f8d4 b008 	ldr.w	fp, [r4, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  409ce6:	f8d4 a000 	ldr.w	sl, [r4]
  409cea:	45d3      	cmp	fp, sl
  409cec:	d006      	beq.n	409cfc <_lv_disp_refr_task+0xdc>
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
  409cee:	4b28      	ldr	r3, [pc, #160]	; (409d90 <_lv_disp_refr_task+0x170>)
  409cf0:	6818      	ldr	r0, [r3, #0]
  409cf2:	4b34      	ldr	r3, [pc, #208]	; (409dc4 <_lv_disp_refr_task+0x1a4>)
  409cf4:	4798      	blx	r3
  409cf6:	4681      	mov	r9, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
  409cf8:	2600      	movs	r6, #0
  409cfa:	e01d      	b.n	409d38 <_lv_disp_refr_task+0x118>
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  409cfc:	f8d4 a004 	ldr.w	sl, [r4, #4]
  409d00:	e7f5      	b.n	409cee <_lv_disp_refr_task+0xce>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
  409d02:	9a02      	ldr	r2, [sp, #8]
  409d04:	eb0a 0105 	add.w	r1, sl, r5
  409d08:	9803      	ldr	r0, [sp, #12]
  409d0a:	4f2f      	ldr	r7, [pc, #188]	; (409dc8 <_lv_disp_refr_task+0x1a8>)
  409d0c:	47b8      	blx	r7
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
  409d0e:	9a02      	ldr	r2, [sp, #8]
  409d10:	9903      	ldr	r1, [sp, #12]
  409d12:	eb0b 0005 	add.w	r0, fp, r5
  409d16:	47b8      	blx	r7
                            start_offs += hres * sizeof(lv_color_t);
  409d18:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409d1c:	3401      	adds	r4, #1
  409d1e:	b224      	sxth	r4, r4
  409d20:	4b1b      	ldr	r3, [pc, #108]	; (409d90 <_lv_disp_refr_task+0x170>)
  409d22:	681b      	ldr	r3, [r3, #0]
  409d24:	f108 020c 	add.w	r2, r8, #12
  409d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409d2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  409d30:	429c      	cmp	r4, r3
  409d32:	dde6      	ble.n	409d02 <_lv_disp_refr_task+0xe2>
                for(a = 0; a < disp_refr->inv_p; a++) {
  409d34:	3601      	adds	r6, #1
  409d36:	b2b6      	uxth	r6, r6
  409d38:	46b0      	mov	r8, r6
  409d3a:	4b15      	ldr	r3, [pc, #84]	; (409d90 <_lv_disp_refr_task+0x170>)
  409d3c:	681b      	ldr	r3, [r3, #0]
  409d3e:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409d42:	f3c2 0209 	ubfx	r2, r2, #0, #10
  409d46:	4296      	cmp	r6, r2
  409d48:	da18      	bge.n	409d7c <_lv_disp_refr_task+0x15c>
                    if(disp_refr->inv_area_joined[a] == 0) {
  409d4a:	199a      	adds	r2, r3, r6
  409d4c:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
  409d50:	2a00      	cmp	r2, #0
  409d52:	d1ef      	bne.n	409d34 <_lv_disp_refr_task+0x114>
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
  409d54:	f108 020c 	add.w	r2, r8, #12
  409d58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409d5c:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  409d60:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  409d64:	fb04 2509 	mla	r5, r4, r9, r2
                        uint32_t start_offs =
  409d68:	006d      	lsls	r5, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  409d6a:	88db      	ldrh	r3, [r3, #6]
  409d6c:	b292      	uxth	r2, r2
  409d6e:	1a9b      	subs	r3, r3, r2
  409d70:	b29b      	uxth	r3, r3
  409d72:	3301      	adds	r3, #1
  409d74:	b21b      	sxth	r3, r3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
  409d76:	005b      	lsls	r3, r3, #1
  409d78:	9302      	str	r3, [sp, #8]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409d7a:	e7d1      	b.n	409d20 <_lv_disp_refr_task+0x100>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
  409d7c:	9b03      	ldr	r3, [sp, #12]
  409d7e:	2b00      	cmp	r3, #0
  409d80:	f43f af7f 	beq.w	409c82 <_lv_disp_refr_task+0x62>
  409d84:	4618      	mov	r0, r3
  409d86:	4b11      	ldr	r3, [pc, #68]	; (409dcc <_lv_disp_refr_task+0x1ac>)
  409d88:	4798      	blx	r3
  409d8a:	e77a      	b.n	409c82 <_lv_disp_refr_task+0x62>
  409d8c:	004150fd 	.word	0x004150fd
  409d90:	2040c41c 	.word	0x2040c41c
  409d94:	0041787d 	.word	0x0041787d
  409d98:	0040938d 	.word	0x0040938d
  409d9c:	00409b61 	.word	0x00409b61
  409da0:	00416771 	.word	0x00416771
  409da4:	00414c51 	.word	0x00414c51
  409da8:	00414e45 	.word	0x00414e45
  409dac:	00416af1 	.word	0x00416af1
  409db0:	00415119 	.word	0x00415119
  409db4:	2040c420 	.word	0x2040c420
  409db8:	00414df5 	.word	0x00414df5
  409dbc:	004097ad 	.word	0x004097ad
  409dc0:	00416965 	.word	0x00416965
  409dc4:	00414cf1 	.word	0x00414cf1
  409dc8:	004167cd 	.word	0x004167cd
  409dcc:	00416715 	.word	0x00416715

00409dd0 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
  409dd0:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
  409dd2:	2104      	movs	r1, #4
  409dd4:	4b01      	ldr	r3, [pc, #4]	; (409ddc <lv_style_init+0xc>)
  409dd6:	4798      	blx	r3
  409dd8:	bd08      	pop	{r3, pc}
  409dda:	bf00      	nop
  409ddc:	00416af1 	.word	0x00416af1

00409de0 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
  409de0:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
  409de2:	2108      	movs	r1, #8
  409de4:	4b01      	ldr	r3, [pc, #4]	; (409dec <lv_style_list_init+0xc>)
  409de6:	4798      	blx	r3
  409de8:	bd08      	pop	{r3, pc}
  409dea:	bf00      	nop
  409dec:	00416af1 	.word	0x00416af1

00409df0 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
  409df0:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
  409df2:	7903      	ldrb	r3, [r0, #4]
  409df4:	f013 063f 	ands.w	r6, r3, #63	; 0x3f
  409df8:	d051      	beq.n	409e9e <_lv_style_list_remove_style+0xae>
  409dfa:	2300      	movs	r3, #0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
  409dfc:	7902      	ldrb	r2, [r0, #4]
  409dfe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409e02:	4293      	cmp	r3, r2
  409e04:	da07      	bge.n	409e16 <_lv_style_list_remove_style+0x26>
        if(list->style_list[i] == style) {
  409e06:	6804      	ldr	r4, [r0, #0]
  409e08:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  409e0c:	428c      	cmp	r4, r1
  409e0e:	d016      	beq.n	409e3e <_lv_style_list_remove_style+0x4e>
    for(i = 0; i < list->style_cnt; i++) {
  409e10:	3301      	adds	r3, #1
  409e12:	b2db      	uxtb	r3, r3
  409e14:	e7f2      	b.n	409dfc <_lv_style_list_remove_style+0xc>
    bool found = false;
  409e16:	2300      	movs	r3, #0
            found = true;
            break;
        }
    }
    if(found == false) return;
  409e18:	2b00      	cmp	r3, #0
  409e1a:	d040      	beq.n	409e9e <_lv_style_list_remove_style+0xae>
  409e1c:	460d      	mov	r5, r1
  409e1e:	4604      	mov	r4, r0

    if(list->style_cnt == 1) {
  409e20:	2e01      	cmp	r6, #1
  409e22:	d00e      	beq.n	409e42 <_lv_style_list_remove_style+0x52>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
  409e24:	3a01      	subs	r2, #1
  409e26:	0090      	lsls	r0, r2, #2
  409e28:	4b1d      	ldr	r3, [pc, #116]	; (409ea0 <_lv_style_list_remove_style+0xb0>)
  409e2a:	4798      	blx	r3
  409e2c:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
  409e2e:	4b1d      	ldr	r3, [pc, #116]	; (409ea4 <_lv_style_list_remove_style+0xb4>)
  409e30:	4798      	blx	r3
  409e32:	b190      	cbz	r0, 409e5a <_lv_style_list_remove_style+0x6a>
    if(new_classes == NULL) {
  409e34:	2e00      	cmp	r6, #0
  409e36:	d032      	beq.n	409e9e <_lv_style_list_remove_style+0xae>
  409e38:	2100      	movs	r1, #0
  409e3a:	460b      	mov	r3, r1
  409e3c:	e015      	b.n	409e6a <_lv_style_list_remove_style+0x7a>
            found = true;
  409e3e:	2301      	movs	r3, #1
  409e40:	e7ea      	b.n	409e18 <_lv_style_list_remove_style+0x28>
        lv_mem_free(list->style_list);
  409e42:	6800      	ldr	r0, [r0, #0]
  409e44:	4b18      	ldr	r3, [pc, #96]	; (409ea8 <_lv_style_list_remove_style+0xb8>)
  409e46:	4798      	blx	r3
        list->style_list = NULL;
  409e48:	2200      	movs	r2, #0
  409e4a:	6022      	str	r2, [r4, #0]
        list->style_cnt = 0;
  409e4c:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
  409e4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  409e52:	f362 1386 	bfi	r3, r2, #6, #1
  409e56:	7123      	strb	r3, [r4, #4]
        return;
  409e58:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
  409e5a:	4632      	mov	r2, r6
  409e5c:	2300      	movs	r3, #0
  409e5e:	4813      	ldr	r0, [pc, #76]	; (409eac <_lv_style_list_remove_style+0xbc>)
  409e60:	4913      	ldr	r1, [pc, #76]	; (409eb0 <_lv_style_list_remove_style+0xc0>)
  409e62:	4788      	blx	r1
  409e64:	e7fe      	b.n	409e64 <_lv_style_list_remove_style+0x74>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
  409e66:	3301      	adds	r3, #1
  409e68:	b2db      	uxtb	r3, r3
  409e6a:	7922      	ldrb	r2, [r4, #4]
  409e6c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409e70:	4293      	cmp	r3, r2
  409e72:	da09      	bge.n	409e88 <_lv_style_list_remove_style+0x98>
        if(list->style_list[i] == style) continue;
  409e74:	6822      	ldr	r2, [r4, #0]
  409e76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  409e7a:	4295      	cmp	r5, r2
  409e7c:	d0f3      	beq.n	409e66 <_lv_style_list_remove_style+0x76>
        new_classes[j] = list->style_list[i];
  409e7e:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
  409e82:	3101      	adds	r1, #1
  409e84:	b2c9      	uxtb	r1, r1
  409e86:	e7ee      	b.n	409e66 <_lv_style_list_remove_style+0x76>

    }

    lv_mem_free(list->style_list);
  409e88:	6820      	ldr	r0, [r4, #0]
  409e8a:	4b07      	ldr	r3, [pc, #28]	; (409ea8 <_lv_style_list_remove_style+0xb8>)
  409e8c:	4798      	blx	r3

    list->style_cnt--;
  409e8e:	7923      	ldrb	r3, [r4, #4]
  409e90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409e94:	323f      	adds	r2, #63	; 0x3f
  409e96:	f362 0305 	bfi	r3, r2, #0, #6
  409e9a:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409e9c:	6026      	str	r6, [r4, #0]
  409e9e:	bd70      	pop	{r4, r5, r6, pc}
  409ea0:	004165bd 	.word	0x004165bd
  409ea4:	00415e79 	.word	0x00415e79
  409ea8:	00416681 	.word	0x00416681
  409eac:	0042c154 	.word	0x0042c154
  409eb0:	00415e85 	.word	0x00415e85

00409eb4 <_lv_style_list_add_style>:
    if(list == NULL) return;
  409eb4:	2800      	cmp	r0, #0
  409eb6:	d048      	beq.n	409f4a <_lv_style_list_add_style+0x96>
{
  409eb8:	b570      	push	{r4, r5, r6, lr}
  409eba:	4604      	mov	r4, r0
  409ebc:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
  409ebe:	4b23      	ldr	r3, [pc, #140]	; (409f4c <_lv_style_list_add_style+0x98>)
  409ec0:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
  409ec2:	7923      	ldrb	r3, [r4, #4]
  409ec4:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  409ec8:	d117      	bne.n	409efa <_lv_style_list_add_style+0x46>
  409eca:	2004      	movs	r0, #4
  409ecc:	4b20      	ldr	r3, [pc, #128]	; (409f50 <_lv_style_list_add_style+0x9c>)
  409ece:	4798      	blx	r3
  409ed0:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
  409ed2:	4628      	mov	r0, r5
  409ed4:	4b1f      	ldr	r3, [pc, #124]	; (409f54 <_lv_style_list_add_style+0xa0>)
  409ed6:	4798      	blx	r3
  409ed8:	b1c8      	cbz	r0, 409f0e <_lv_style_list_add_style+0x5a>
    if(new_classes == NULL) {
  409eda:	2d00      	cmp	r5, #0
  409edc:	d034      	beq.n	409f48 <_lv_style_list_add_style+0x94>
    if(list->has_trans) first_style++;
  409ede:	7923      	ldrb	r3, [r4, #4]
  409ee0:	f013 0f80 	tst.w	r3, #128	; 0x80
  409ee4:	d119      	bne.n	409f1a <_lv_style_list_add_style+0x66>
    uint8_t first_style = 0;
  409ee6:	2200      	movs	r2, #0
    if(list->has_local) first_style++;
  409ee8:	f013 0f40 	tst.w	r3, #64	; 0x40
  409eec:	d001      	beq.n	409ef2 <_lv_style_list_add_style+0x3e>
  409eee:	3201      	adds	r2, #1
  409ef0:	b2d2      	uxtb	r2, r2
    for(i = list->style_cnt; i > first_style; i--) {
  409ef2:	7923      	ldrb	r3, [r4, #4]
  409ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  409ef8:	e01a      	b.n	409f30 <_lv_style_list_add_style+0x7c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
  409efa:	7921      	ldrb	r1, [r4, #4]
  409efc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  409f00:	3101      	adds	r1, #1
  409f02:	0089      	lsls	r1, r1, #2
  409f04:	6820      	ldr	r0, [r4, #0]
  409f06:	4b14      	ldr	r3, [pc, #80]	; (409f58 <_lv_style_list_add_style+0xa4>)
  409f08:	4798      	blx	r3
  409f0a:	4605      	mov	r5, r0
  409f0c:	e7e1      	b.n	409ed2 <_lv_style_list_add_style+0x1e>
    LV_ASSERT_MEM(new_classes);
  409f0e:	462a      	mov	r2, r5
  409f10:	2300      	movs	r3, #0
  409f12:	4812      	ldr	r0, [pc, #72]	; (409f5c <_lv_style_list_add_style+0xa8>)
  409f14:	4912      	ldr	r1, [pc, #72]	; (409f60 <_lv_style_list_add_style+0xac>)
  409f16:	4788      	blx	r1
  409f18:	e7fe      	b.n	409f18 <_lv_style_list_add_style+0x64>
    if(list->has_trans) first_style++;
  409f1a:	2201      	movs	r2, #1
  409f1c:	e7e4      	b.n	409ee8 <_lv_style_list_add_style+0x34>
        new_classes[i] = new_classes[i - 1];
  409f1e:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
  409f22:	4419      	add	r1, r3
  409f24:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  409f28:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    for(i = list->style_cnt; i > first_style; i--) {
  409f2c:	3b01      	subs	r3, #1
  409f2e:	b2db      	uxtb	r3, r3
  409f30:	4293      	cmp	r3, r2
  409f32:	d8f4      	bhi.n	409f1e <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
  409f34:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
    list->style_cnt++;
  409f38:	7923      	ldrb	r3, [r4, #4]
  409f3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409f3e:	3201      	adds	r2, #1
  409f40:	f362 0305 	bfi	r3, r2, #0, #6
  409f44:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409f46:	6025      	str	r5, [r4, #0]
  409f48:	bd70      	pop	{r4, r5, r6, pc}
  409f4a:	4770      	bx	lr
  409f4c:	00409df1 	.word	0x00409df1
  409f50:	004165bd 	.word	0x004165bd
  409f54:	00415e79 	.word	0x00415e79
  409f58:	004168ed 	.word	0x004168ed
  409f5c:	0042c154 	.word	0x0042c154
  409f60:	00415e85 	.word	0x00415e85

00409f64 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
  409f64:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
  409f66:	7902      	ldrb	r2, [r0, #4]
  409f68:	f012 0f40 	tst.w	r2, #64	; 0x40
  409f6c:	d015      	beq.n	409f9a <get_alloc_local_style+0x36>
  409f6e:	09d3      	lsrs	r3, r2, #7
    if(list->has_trans && list->skip_trans) id++;
  409f70:	8881      	ldrh	r1, [r0, #4]
  409f72:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  409f76:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  409f7a:	d00c      	beq.n	409f96 <get_alloc_local_style+0x32>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409f7c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  409f80:	d027      	beq.n	409fd2 <get_alloc_local_style+0x6e>
  409f82:	7902      	ldrb	r2, [r0, #4]
  409f84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409f88:	4293      	cmp	r3, r2
  409f8a:	da24      	bge.n	409fd6 <get_alloc_local_style+0x72>
    return list->style_list[id];
  409f8c:	6802      	ldr	r2, [r0, #0]
  409f8e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
  409f92:	4628      	mov	r0, r5
  409f94:	bd38      	pop	{r3, r4, r5, pc}
    if(list->has_trans && list->skip_trans) id++;
  409f96:	3301      	adds	r3, #1
  409f98:	e7f0      	b.n	409f7c <get_alloc_local_style+0x18>
  409f9a:	4604      	mov	r4, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
  409f9c:	2004      	movs	r0, #4
  409f9e:	4b0f      	ldr	r3, [pc, #60]	; (409fdc <get_alloc_local_style+0x78>)
  409fa0:	4798      	blx	r3
  409fa2:	4605      	mov	r5, r0
    LV_ASSERT_MEM(local_style);
  409fa4:	4b0e      	ldr	r3, [pc, #56]	; (409fe0 <get_alloc_local_style+0x7c>)
  409fa6:	4798      	blx	r3
  409fa8:	b168      	cbz	r0, 409fc6 <get_alloc_local_style+0x62>
    if(local_style == NULL) {
  409faa:	2d00      	cmp	r5, #0
  409fac:	d0f1      	beq.n	409f92 <get_alloc_local_style+0x2e>
    lv_style_init(local_style);
  409fae:	4628      	mov	r0, r5
  409fb0:	4b0c      	ldr	r3, [pc, #48]	; (409fe4 <get_alloc_local_style+0x80>)
  409fb2:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
  409fb4:	4629      	mov	r1, r5
  409fb6:	4620      	mov	r0, r4
  409fb8:	4b0b      	ldr	r3, [pc, #44]	; (409fe8 <get_alloc_local_style+0x84>)
  409fba:	4798      	blx	r3
    list->has_local = 1;
  409fbc:	7923      	ldrb	r3, [r4, #4]
  409fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409fc2:	7123      	strb	r3, [r4, #4]
    return local_style;
  409fc4:	e7e5      	b.n	409f92 <get_alloc_local_style+0x2e>
    LV_ASSERT_MEM(local_style);
  409fc6:	462a      	mov	r2, r5
  409fc8:	2300      	movs	r3, #0
  409fca:	4808      	ldr	r0, [pc, #32]	; (409fec <get_alloc_local_style+0x88>)
  409fcc:	4908      	ldr	r1, [pc, #32]	; (409ff0 <get_alloc_local_style+0x8c>)
  409fce:	4788      	blx	r1
  409fd0:	e7fe      	b.n	409fd0 <get_alloc_local_style+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409fd2:	2500      	movs	r5, #0
  409fd4:	e7dd      	b.n	409f92 <get_alloc_local_style+0x2e>
  409fd6:	2500      	movs	r5, #0
  409fd8:	e7db      	b.n	409f92 <get_alloc_local_style+0x2e>
  409fda:	bf00      	nop
  409fdc:	004165bd 	.word	0x004165bd
  409fe0:	00415e79 	.word	0x00415e79
  409fe4:	00409dd1 	.word	0x00409dd1
  409fe8:	00409eb5 	.word	0x00409eb5
  409fec:	0042c154 	.word	0x0042c154
  409ff0:	00415e85 	.word	0x00415e85

00409ff4 <lv_style_reset>:
{
  409ff4:	b510      	push	{r4, lr}
  409ff6:	4604      	mov	r4, r0
    lv_mem_free(style->map);
  409ff8:	6800      	ldr	r0, [r0, #0]
  409ffa:	4b02      	ldr	r3, [pc, #8]	; (40a004 <lv_style_reset+0x10>)
  409ffc:	4798      	blx	r3
    style->map = NULL;
  409ffe:	2300      	movs	r3, #0
  40a000:	6023      	str	r3, [r4, #0]
  40a002:	bd10      	pop	{r4, pc}
  40a004:	00416681 	.word	0x00416681

0040a008 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
  40a008:	6803      	ldr	r3, [r0, #0]
  40a00a:	b30b      	cbz	r3, 40a050 <_lv_style_get_mem_size+0x48>
{
  40a00c:	b082      	sub	sp, #8
  40a00e:	2200      	movs	r2, #0
  40a010:	e001      	b.n	40a016 <_lv_style_get_mem_size+0xe>
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a012:	2304      	movs	r3, #4
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
  40a014:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a016:	6803      	ldr	r3, [r0, #0]
  40a018:	5c99      	ldrb	r1, [r3, r2]
  40a01a:	f88d 1006 	strb.w	r1, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a01e:	4413      	add	r3, r2
  40a020:	785b      	ldrb	r3, [r3, #1]
  40a022:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a026:	b2cb      	uxtb	r3, r1
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a028:	2bff      	cmp	r3, #255	; 0xff
  40a02a:	d00d      	beq.n	40a048 <_lv_style_get_mem_size+0x40>
    prop_id &= 0xF;
  40a02c:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a030:	2b08      	cmp	r3, #8
  40a032:	d9ee      	bls.n	40a012 <_lv_style_get_mem_size+0xa>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a034:	2b0b      	cmp	r3, #11
  40a036:	d903      	bls.n	40a040 <_lv_style_get_mem_size+0x38>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a038:	2b0d      	cmp	r3, #13
  40a03a:	d803      	bhi.n	40a044 <_lv_style_get_mem_size+0x3c>
  40a03c:	2303      	movs	r3, #3
  40a03e:	e7e9      	b.n	40a014 <_lv_style_get_mem_size+0xc>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a040:	2304      	movs	r3, #4
  40a042:	e7e7      	b.n	40a014 <_lv_style_get_mem_size+0xc>
    else size += sizeof(const void *);
  40a044:	2306      	movs	r3, #6
  40a046:	e7e5      	b.n	40a014 <_lv_style_get_mem_size+0xc>
    return i + sizeof(lv_style_property_t);
  40a048:	1c90      	adds	r0, r2, #2
  40a04a:	b280      	uxth	r0, r0
}
  40a04c:	b002      	add	sp, #8
  40a04e:	4770      	bx	lr
    if(style->map == NULL) return 0;
  40a050:	2000      	movs	r0, #0
  40a052:	4770      	bx	lr

0040a054 <lv_style_copy>:
    if(style_src == NULL) return;
  40a054:	b181      	cbz	r1, 40a078 <lv_style_copy+0x24>
{
  40a056:	b570      	push	{r4, r5, r6, lr}
  40a058:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
  40a05a:	680a      	ldr	r2, [r1, #0]
  40a05c:	b15a      	cbz	r2, 40a076 <lv_style_copy+0x22>
  40a05e:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
  40a060:	4608      	mov	r0, r1
  40a062:	4b06      	ldr	r3, [pc, #24]	; (40a07c <lv_style_copy+0x28>)
  40a064:	4798      	blx	r3
  40a066:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
  40a068:	4b05      	ldr	r3, [pc, #20]	; (40a080 <lv_style_copy+0x2c>)
  40a06a:	4798      	blx	r3
  40a06c:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
  40a06e:	4632      	mov	r2, r6
  40a070:	6821      	ldr	r1, [r4, #0]
  40a072:	4b04      	ldr	r3, [pc, #16]	; (40a084 <lv_style_copy+0x30>)
  40a074:	4798      	blx	r3
  40a076:	bd70      	pop	{r4, r5, r6, pc}
  40a078:	4770      	bx	lr
  40a07a:	bf00      	nop
  40a07c:	0040a009 	.word	0x0040a009
  40a080:	004165bd 	.word	0x004165bd
  40a084:	004167cd 	.word	0x004167cd

0040a088 <lv_style_remove_prop>:
    if(style == NULL) return false;
  40a088:	2800      	cmp	r0, #0
  40a08a:	f000 808d 	beq.w	40a1a8 <lv_style_remove_prop+0x120>
{
  40a08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a092:	b082      	sub	sp, #8
  40a094:	4604      	mov	r4, r0
    if(style->map == NULL) return -1;
  40a096:	6803      	ldr	r3, [r0, #0]
  40a098:	2b00      	cmp	r3, #0
  40a09a:	d05e      	beq.n	40a15a <lv_style_remove_prop+0xd2>
    uint8_t id_to_find = prop & 0xFF;
  40a09c:	b2cd      	uxtb	r5, r1
    attr = (prop >> 8) & 0xFF;
  40a09e:	0a0e      	lsrs	r6, r1, #8
    size_t i = 0;
  40a0a0:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a0a2:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t weight = -1;
  40a0a6:	46be      	mov	lr, r7
  40a0a8:	e03b      	b.n	40a122 <lv_style_remove_prop+0x9a>
    prop_p[0] = style->map[idx];
  40a0aa:	f8d4 c000 	ldr.w	ip, [r4]
  40a0ae:	f81c 8002 	ldrb.w	r8, [ip, r2]
  40a0b2:	f88d 8006 	strb.w	r8, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a0b6:	f81c 0000 	ldrb.w	r0, [ip, r0]
  40a0ba:	f88d 0007 	strb.w	r0, [sp, #7]
    return prop;
  40a0be:	f8bd c006 	ldrh.w	ip, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a0c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
  40a0c6:	fa5f f08c 	uxtb.w	r0, ip
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a0ca:	ea86 0800 	eor.w	r8, r6, r0
  40a0ce:	f018 0f7f 	tst.w	r8, #127	; 0x7f
  40a0d2:	d00c      	beq.n	40a0ee <lv_style_remove_prop+0x66>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a0d4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40a0d8:	f006 087f 	and.w	r8, r6, #127	; 0x7f
  40a0dc:	ea30 0808 	bics.w	r8, r0, r8
  40a0e0:	d12d      	bne.n	40a13e <lv_style_remove_prop+0xb6>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a0e2:	4570      	cmp	r0, lr
  40a0e4:	dd2b      	ble.n	40a13e <lv_style_remove_prop+0xb6>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a0e6:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
                    id_guess = i;
  40a0ea:	b217      	sxth	r7, r2
  40a0ec:	e027      	b.n	40a13e <lv_style_remove_prop+0xb6>
                return i;
  40a0ee:	4617      	mov	r7, r2
    if(id >= 0) {
  40a0f0:	2f00      	cmp	r7, #0
  40a0f2:	db5b      	blt.n	40a1ac <lv_style_remove_prop+0x124>
        attr_found = get_style_prop_attr(style, id);
  40a0f4:	463d      	mov	r5, r7
    prop_p[0] = style->map[idx];
  40a0f6:	6823      	ldr	r3, [r4, #0]
  40a0f8:	5dda      	ldrb	r2, [r3, r7]
  40a0fa:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a0fe:	441f      	add	r7, r3
  40a100:	787b      	ldrb	r3, [r7, #1]
  40a102:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a106:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        attr_goal = (prop >> 8) & 0xFFU;
  40a10a:	0a0b      	lsrs	r3, r1, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a10c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
  40a110:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a114:	d024      	beq.n	40a160 <lv_style_remove_prop+0xd8>
    return false;
  40a116:	2000      	movs	r0, #0
}
  40a118:	b002      	add	sp, #8
  40a11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a11e:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a120:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a122:	6823      	ldr	r3, [r4, #0]
  40a124:	5c98      	ldrb	r0, [r3, r2]
  40a126:	f88d 0006 	strb.w	r0, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a12a:	1c50      	adds	r0, r2, #1
  40a12c:	5c1b      	ldrb	r3, [r3, r0]
  40a12e:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a132:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a136:	2bff      	cmp	r3, #255	; 0xff
  40a138:	d0da      	beq.n	40a0f0 <lv_style_remove_prop+0x68>
        if(prop_id == id_to_find) {
  40a13a:	429d      	cmp	r5, r3
  40a13c:	d0b5      	beq.n	40a0aa <lv_style_remove_prop+0x22>
    prop_id &= 0xF;
  40a13e:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a142:	2b08      	cmp	r3, #8
  40a144:	d9eb      	bls.n	40a11e <lv_style_remove_prop+0x96>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a146:	2b0b      	cmp	r3, #11
  40a148:	d903      	bls.n	40a152 <lv_style_remove_prop+0xca>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a14a:	2b0d      	cmp	r3, #13
  40a14c:	d803      	bhi.n	40a156 <lv_style_remove_prop+0xce>
  40a14e:	2303      	movs	r3, #3
  40a150:	e7e6      	b.n	40a120 <lv_style_remove_prop+0x98>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a152:	2304      	movs	r3, #4
  40a154:	e7e4      	b.n	40a120 <lv_style_remove_prop+0x98>
    else size += sizeof(const void *);
  40a156:	2306      	movs	r3, #6
  40a158:	e7e2      	b.n	40a120 <lv_style_remove_prop+0x98>
    if(style->map == NULL) return -1;
  40a15a:	f04f 37ff 	mov.w	r7, #4294967295
  40a15e:	e7c7      	b.n	40a0f0 <lv_style_remove_prop+0x68>
  40a160:	460e      	mov	r6, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
  40a162:	4620      	mov	r0, r4
  40a164:	4b12      	ldr	r3, [pc, #72]	; (40a1b0 <lv_style_remove_prop+0x128>)
  40a166:	4798      	blx	r3
    prop_id &= 0xF;
  40a168:	f006 010f 	and.w	r1, r6, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a16c:	2908      	cmp	r1, #8
  40a16e:	d905      	bls.n	40a17c <lv_style_remove_prop+0xf4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a170:	290b      	cmp	r1, #11
  40a172:	d90f      	bls.n	40a194 <lv_style_remove_prop+0x10c>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a174:	290d      	cmp	r1, #13
  40a176:	d80f      	bhi.n	40a198 <lv_style_remove_prop+0x110>
  40a178:	2603      	movs	r6, #3
  40a17a:	e000      	b.n	40a17e <lv_style_remove_prop+0xf6>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a17c:	2604      	movs	r6, #4
            for(i = id; i < map_size - prop_size; i++) {
  40a17e:	462b      	mov	r3, r5
  40a180:	b2f2      	uxtb	r2, r6
  40a182:	1a81      	subs	r1, r0, r2
  40a184:	428b      	cmp	r3, r1
  40a186:	d209      	bcs.n	40a19c <lv_style_remove_prop+0x114>
                style->map[i] = style->map[i + prop_size];
  40a188:	6821      	ldr	r1, [r4, #0]
  40a18a:	441a      	add	r2, r3
  40a18c:	5c8a      	ldrb	r2, [r1, r2]
  40a18e:	54ca      	strb	r2, [r1, r3]
            for(i = id; i < map_size - prop_size; i++) {
  40a190:	3301      	adds	r3, #1
  40a192:	e7f5      	b.n	40a180 <lv_style_remove_prop+0xf8>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a194:	2604      	movs	r6, #4
  40a196:	e7f2      	b.n	40a17e <lv_style_remove_prop+0xf6>
    else size += sizeof(const void *);
  40a198:	2606      	movs	r6, #6
  40a19a:	e7f0      	b.n	40a17e <lv_style_remove_prop+0xf6>
    style->map = lv_mem_realloc(style->map, sz);
  40a19c:	6820      	ldr	r0, [r4, #0]
  40a19e:	4b05      	ldr	r3, [pc, #20]	; (40a1b4 <lv_style_remove_prop+0x12c>)
  40a1a0:	4798      	blx	r3
  40a1a2:	6020      	str	r0, [r4, #0]
            return true;
  40a1a4:	2001      	movs	r0, #1
  40a1a6:	e7b7      	b.n	40a118 <lv_style_remove_prop+0x90>
    if(style == NULL) return false;
  40a1a8:	2000      	movs	r0, #0
  40a1aa:	4770      	bx	lr
    return false;
  40a1ac:	2000      	movs	r0, #0
  40a1ae:	e7b3      	b.n	40a118 <lv_style_remove_prop+0x90>
  40a1b0:	0040a009 	.word	0x0040a009
  40a1b4:	004168ed 	.word	0x004168ed

0040a1b8 <_lv_style_set_int>:
{
  40a1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a1ba:	b085      	sub	sp, #20
  40a1bc:	f8ad 1006 	strh.w	r1, [sp, #6]
  40a1c0:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
  40a1c4:	6803      	ldr	r3, [r0, #0]
  40a1c6:	2b00      	cmp	r3, #0
  40a1c8:	d061      	beq.n	40a28e <_lv_style_set_int+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  40a1ca:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a1cc:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a1ce:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a1d0:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a1d4:	4627      	mov	r7, r4
  40a1d6:	e023      	b.n	40a220 <_lv_style_set_int+0x68>
    prop_p[0] = style->map[idx];
  40a1d8:	f8d0 e000 	ldr.w	lr, [r0]
  40a1dc:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a1e0:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a1e4:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a1e8:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a1ec:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a1f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a1f4:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a1f8:	ea85 0c01 	eor.w	ip, r5, r1
  40a1fc:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a200:	d02b      	beq.n	40a25a <_lv_style_set_int+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a202:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a206:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a20a:	ea31 0c0c 	bics.w	ip, r1, ip
  40a20e:	d115      	bne.n	40a23c <_lv_style_set_int+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a210:	42b9      	cmp	r1, r7
  40a212:	dd13      	ble.n	40a23c <_lv_style_set_int+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a214:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a218:	b214      	sxth	r4, r2
  40a21a:	e00f      	b.n	40a23c <_lv_style_set_int+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a21c:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a21e:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a220:	6803      	ldr	r3, [r0, #0]
  40a222:	5c99      	ldrb	r1, [r3, r2]
  40a224:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a228:	1c51      	adds	r1, r2, #1
  40a22a:	5c5b      	ldrb	r3, [r3, r1]
  40a22c:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a230:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a234:	2bff      	cmp	r3, #255	; 0xff
  40a236:	d00f      	beq.n	40a258 <_lv_style_set_int+0xa0>
        if(prop_id == id_to_find) {
  40a238:	429e      	cmp	r6, r3
  40a23a:	d0cd      	beq.n	40a1d8 <_lv_style_set_int+0x20>
    prop_id &= 0xF;
  40a23c:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a240:	2b08      	cmp	r3, #8
  40a242:	d9eb      	bls.n	40a21c <_lv_style_set_int+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a244:	2b0b      	cmp	r3, #11
  40a246:	d903      	bls.n	40a250 <_lv_style_set_int+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a248:	2b0d      	cmp	r3, #13
  40a24a:	d803      	bhi.n	40a254 <_lv_style_set_int+0x9c>
  40a24c:	2303      	movs	r3, #3
  40a24e:	e7e6      	b.n	40a21e <_lv_style_set_int+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a250:	2304      	movs	r3, #4
  40a252:	e7e4      	b.n	40a21e <_lv_style_set_int+0x66>
    else size += sizeof(const void *);
  40a254:	2306      	movs	r3, #6
  40a256:	e7e2      	b.n	40a21e <_lv_style_set_int+0x66>
    return id_guess;
  40a258:	4622      	mov	r2, r4
    if(id >= 0) {
  40a25a:	2a00      	cmp	r2, #0
  40a25c:	db23      	blt.n	40a2a6 <_lv_style_set_int+0xee>
    prop_p[0] = style->map[idx];
  40a25e:	6803      	ldr	r3, [r0, #0]
  40a260:	5c99      	ldrb	r1, [r3, r2]
  40a262:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a266:	4413      	add	r3, r2
  40a268:	785b      	ldrb	r3, [r3, #1]
  40a26a:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a26e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a272:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a276:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a278:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a27c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a280:	d111      	bne.n	40a2a6 <_lv_style_set_int+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
  40a282:	6803      	ldr	r3, [r0, #0]
  40a284:	3202      	adds	r2, #2
  40a286:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a288:	a901      	add	r1, sp, #4
  40a28a:	2302      	movs	r3, #2
  40a28c:	e007      	b.n	40a29e <_lv_style_set_int+0xe6>
    if(style->map == NULL) return -1;
  40a28e:	f04f 32ff 	mov.w	r2, #4294967295
  40a292:	e7e2      	b.n	40a25a <_lv_style_set_int+0xa2>
        *d8 = *s8;
  40a294:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a298:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a29c:	3b01      	subs	r3, #1
    while(len) {
  40a29e:	2b00      	cmp	r3, #0
  40a2a0:	d1f8      	bne.n	40a294 <_lv_style_set_int+0xdc>
}
  40a2a2:	b005      	add	sp, #20
  40a2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a2a6:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a2a8:	23ff      	movs	r3, #255	; 0xff
  40a2aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a2ae:	4b21      	ldr	r3, [pc, #132]	; (40a334 <_lv_style_set_int+0x17c>)
  40a2b0:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a2b2:	4603      	mov	r3, r0
  40a2b4:	b908      	cbnz	r0, 40a2ba <_lv_style_set_int+0x102>
  40a2b6:	3302      	adds	r3, #2
  40a2b8:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
  40a2ba:	3304      	adds	r3, #4
  40a2bc:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a2be:	4621      	mov	r1, r4
  40a2c0:	6828      	ldr	r0, [r5, #0]
  40a2c2:	4b1d      	ldr	r3, [pc, #116]	; (40a338 <_lv_style_set_int+0x180>)
  40a2c4:	4798      	blx	r3
  40a2c6:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a2c8:	4b1c      	ldr	r3, [pc, #112]	; (40a33c <_lv_style_set_int+0x184>)
  40a2ca:	4798      	blx	r3
  40a2cc:	b148      	cbz	r0, 40a2e2 <_lv_style_set_int+0x12a>
    if(style == NULL) return;
  40a2ce:	2d00      	cmp	r5, #0
  40a2d0:	d0e7      	beq.n	40a2a2 <_lv_style_set_int+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a2d2:	682b      	ldr	r3, [r5, #0]
  40a2d4:	1f20      	subs	r0, r4, #4
  40a2d6:	1fa2      	subs	r2, r4, #6
  40a2d8:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a2da:	f10d 0106 	add.w	r1, sp, #6
  40a2de:	2202      	movs	r2, #2
  40a2e0:	e00a      	b.n	40a2f8 <_lv_style_set_int+0x140>
    LV_ASSERT_MEM(style->map);
  40a2e2:	682a      	ldr	r2, [r5, #0]
  40a2e4:	2300      	movs	r3, #0
  40a2e6:	4816      	ldr	r0, [pc, #88]	; (40a340 <_lv_style_set_int+0x188>)
  40a2e8:	4916      	ldr	r1, [pc, #88]	; (40a344 <_lv_style_set_int+0x18c>)
  40a2ea:	4788      	blx	r1
  40a2ec:	e7fe      	b.n	40a2ec <_lv_style_set_int+0x134>
        *d8 = *s8;
  40a2ee:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a2f2:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a2f6:	3a01      	subs	r2, #1
    while(len) {
  40a2f8:	2a00      	cmp	r2, #0
  40a2fa:	d1f8      	bne.n	40a2ee <_lv_style_set_int+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
  40a2fc:	682b      	ldr	r3, [r5, #0]
  40a2fe:	3c02      	subs	r4, #2
  40a300:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a302:	a901      	add	r1, sp, #4
  40a304:	2202      	movs	r2, #2
  40a306:	e004      	b.n	40a312 <_lv_style_set_int+0x15a>
        *d8 = *s8;
  40a308:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a30c:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a310:	3a01      	subs	r2, #1
    while(len) {
  40a312:	2a00      	cmp	r2, #0
  40a314:	d1f8      	bne.n	40a308 <_lv_style_set_int+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a316:	682b      	ldr	r3, [r5, #0]
  40a318:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a31a:	f10d 020e 	add.w	r2, sp, #14
  40a31e:	2302      	movs	r3, #2
  40a320:	e004      	b.n	40a32c <_lv_style_set_int+0x174>
        *d8 = *s8;
  40a322:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a326:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a32a:	3b01      	subs	r3, #1
    while(len) {
  40a32c:	2b00      	cmp	r3, #0
  40a32e:	d1f8      	bne.n	40a322 <_lv_style_set_int+0x16a>
  40a330:	e7b7      	b.n	40a2a2 <_lv_style_set_int+0xea>
  40a332:	bf00      	nop
  40a334:	0040a009 	.word	0x0040a009
  40a338:	004168ed 	.word	0x004168ed
  40a33c:	00415e79 	.word	0x00415e79
  40a340:	0042c154 	.word	0x0042c154
  40a344:	00415e85 	.word	0x00415e85

0040a348 <_lv_style_set_color>:
{
  40a348:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a34a:	b085      	sub	sp, #20
  40a34c:	f8ad 2004 	strh.w	r2, [sp, #4]
  40a350:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40a354:	6803      	ldr	r3, [r0, #0]
  40a356:	2b00      	cmp	r3, #0
  40a358:	d061      	beq.n	40a41e <_lv_style_set_color+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  40a35a:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a35c:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a35e:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a360:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a364:	4627      	mov	r7, r4
  40a366:	e023      	b.n	40a3b0 <_lv_style_set_color+0x68>
    prop_p[0] = style->map[idx];
  40a368:	f8d0 e000 	ldr.w	lr, [r0]
  40a36c:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a370:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a374:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a378:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a37c:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a380:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a384:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a388:	ea85 0c01 	eor.w	ip, r5, r1
  40a38c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a390:	d02b      	beq.n	40a3ea <_lv_style_set_color+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a392:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a396:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a39a:	ea31 0c0c 	bics.w	ip, r1, ip
  40a39e:	d115      	bne.n	40a3cc <_lv_style_set_color+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a3a0:	42b9      	cmp	r1, r7
  40a3a2:	dd13      	ble.n	40a3cc <_lv_style_set_color+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a3a4:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a3a8:	b214      	sxth	r4, r2
  40a3aa:	e00f      	b.n	40a3cc <_lv_style_set_color+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a3ac:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a3ae:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a3b0:	6803      	ldr	r3, [r0, #0]
  40a3b2:	5c99      	ldrb	r1, [r3, r2]
  40a3b4:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a3b8:	1c51      	adds	r1, r2, #1
  40a3ba:	5c5b      	ldrb	r3, [r3, r1]
  40a3bc:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a3c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a3c4:	2bff      	cmp	r3, #255	; 0xff
  40a3c6:	d00f      	beq.n	40a3e8 <_lv_style_set_color+0xa0>
        if(prop_id == id_to_find) {
  40a3c8:	429e      	cmp	r6, r3
  40a3ca:	d0cd      	beq.n	40a368 <_lv_style_set_color+0x20>
    prop_id &= 0xF;
  40a3cc:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a3d0:	2b08      	cmp	r3, #8
  40a3d2:	d9eb      	bls.n	40a3ac <_lv_style_set_color+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a3d4:	2b0b      	cmp	r3, #11
  40a3d6:	d903      	bls.n	40a3e0 <_lv_style_set_color+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a3d8:	2b0d      	cmp	r3, #13
  40a3da:	d803      	bhi.n	40a3e4 <_lv_style_set_color+0x9c>
  40a3dc:	2303      	movs	r3, #3
  40a3de:	e7e6      	b.n	40a3ae <_lv_style_set_color+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a3e0:	2304      	movs	r3, #4
  40a3e2:	e7e4      	b.n	40a3ae <_lv_style_set_color+0x66>
    else size += sizeof(const void *);
  40a3e4:	2306      	movs	r3, #6
  40a3e6:	e7e2      	b.n	40a3ae <_lv_style_set_color+0x66>
    return id_guess;
  40a3e8:	4622      	mov	r2, r4
    if(id >= 0) {
  40a3ea:	2a00      	cmp	r2, #0
  40a3ec:	db23      	blt.n	40a436 <_lv_style_set_color+0xee>
    prop_p[0] = style->map[idx];
  40a3ee:	6803      	ldr	r3, [r0, #0]
  40a3f0:	5c99      	ldrb	r1, [r3, r2]
  40a3f2:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a3f6:	4413      	add	r3, r2
  40a3f8:	785b      	ldrb	r3, [r3, #1]
  40a3fa:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a3fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a402:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a406:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a408:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a40c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a410:	d111      	bne.n	40a436 <_lv_style_set_color+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
  40a412:	6803      	ldr	r3, [r0, #0]
  40a414:	3202      	adds	r2, #2
  40a416:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a418:	a901      	add	r1, sp, #4
  40a41a:	2302      	movs	r3, #2
  40a41c:	e007      	b.n	40a42e <_lv_style_set_color+0xe6>
    if(style->map == NULL) return -1;
  40a41e:	f04f 32ff 	mov.w	r2, #4294967295
  40a422:	e7e2      	b.n	40a3ea <_lv_style_set_color+0xa2>
        *d8 = *s8;
  40a424:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a428:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a42c:	3b01      	subs	r3, #1
    while(len) {
  40a42e:	2b00      	cmp	r3, #0
  40a430:	d1f8      	bne.n	40a424 <_lv_style_set_color+0xdc>
}
  40a432:	b005      	add	sp, #20
  40a434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a436:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a438:	23ff      	movs	r3, #255	; 0xff
  40a43a:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a43e:	4b21      	ldr	r3, [pc, #132]	; (40a4c4 <_lv_style_set_color+0x17c>)
  40a440:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a442:	4603      	mov	r3, r0
  40a444:	b908      	cbnz	r0, 40a44a <_lv_style_set_color+0x102>
  40a446:	3302      	adds	r3, #2
  40a448:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
  40a44a:	3304      	adds	r3, #4
  40a44c:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a44e:	4621      	mov	r1, r4
  40a450:	6828      	ldr	r0, [r5, #0]
  40a452:	4b1d      	ldr	r3, [pc, #116]	; (40a4c8 <_lv_style_set_color+0x180>)
  40a454:	4798      	blx	r3
  40a456:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a458:	4b1c      	ldr	r3, [pc, #112]	; (40a4cc <_lv_style_set_color+0x184>)
  40a45a:	4798      	blx	r3
  40a45c:	b148      	cbz	r0, 40a472 <_lv_style_set_color+0x12a>
    if(style == NULL) return;
  40a45e:	2d00      	cmp	r5, #0
  40a460:	d0e7      	beq.n	40a432 <_lv_style_set_color+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a462:	682b      	ldr	r3, [r5, #0]
  40a464:	1f20      	subs	r0, r4, #4
  40a466:	1fa2      	subs	r2, r4, #6
  40a468:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a46a:	f10d 0106 	add.w	r1, sp, #6
  40a46e:	2202      	movs	r2, #2
  40a470:	e00a      	b.n	40a488 <_lv_style_set_color+0x140>
    LV_ASSERT_MEM(style->map);
  40a472:	682a      	ldr	r2, [r5, #0]
  40a474:	2300      	movs	r3, #0
  40a476:	4816      	ldr	r0, [pc, #88]	; (40a4d0 <_lv_style_set_color+0x188>)
  40a478:	4916      	ldr	r1, [pc, #88]	; (40a4d4 <_lv_style_set_color+0x18c>)
  40a47a:	4788      	blx	r1
  40a47c:	e7fe      	b.n	40a47c <_lv_style_set_color+0x134>
        *d8 = *s8;
  40a47e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a482:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a486:	3a01      	subs	r2, #1
    while(len) {
  40a488:	2a00      	cmp	r2, #0
  40a48a:	d1f8      	bne.n	40a47e <_lv_style_set_color+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
  40a48c:	682b      	ldr	r3, [r5, #0]
  40a48e:	3c02      	subs	r4, #2
  40a490:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a492:	a901      	add	r1, sp, #4
  40a494:	2202      	movs	r2, #2
  40a496:	e004      	b.n	40a4a2 <_lv_style_set_color+0x15a>
        *d8 = *s8;
  40a498:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a49c:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a4a0:	3a01      	subs	r2, #1
    while(len) {
  40a4a2:	2a00      	cmp	r2, #0
  40a4a4:	d1f8      	bne.n	40a498 <_lv_style_set_color+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a4a6:	682b      	ldr	r3, [r5, #0]
  40a4a8:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a4aa:	f10d 020e 	add.w	r2, sp, #14
  40a4ae:	2302      	movs	r3, #2
  40a4b0:	e004      	b.n	40a4bc <_lv_style_set_color+0x174>
        *d8 = *s8;
  40a4b2:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a4b6:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a4ba:	3b01      	subs	r3, #1
    while(len) {
  40a4bc:	2b00      	cmp	r3, #0
  40a4be:	d1f8      	bne.n	40a4b2 <_lv_style_set_color+0x16a>
  40a4c0:	e7b7      	b.n	40a432 <_lv_style_set_color+0xea>
  40a4c2:	bf00      	nop
  40a4c4:	0040a009 	.word	0x0040a009
  40a4c8:	004168ed 	.word	0x004168ed
  40a4cc:	00415e79 	.word	0x00415e79
  40a4d0:	0042c154 	.word	0x0042c154
  40a4d4:	00415e85 	.word	0x00415e85

0040a4d8 <_lv_style_set_opa>:
{
  40a4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a4da:	b085      	sub	sp, #20
  40a4dc:	f8ad 1006 	strh.w	r1, [sp, #6]
  40a4e0:	f88d 2005 	strb.w	r2, [sp, #5]
    if(style->map == NULL) return -1;
  40a4e4:	6803      	ldr	r3, [r0, #0]
  40a4e6:	2b00      	cmp	r3, #0
  40a4e8:	d064      	beq.n	40a5b4 <_lv_style_set_opa+0xdc>
    uint8_t id_to_find = prop & 0xFF;
  40a4ea:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a4ec:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a4ee:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a4f0:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a4f4:	4627      	mov	r7, r4
  40a4f6:	e023      	b.n	40a540 <_lv_style_set_opa+0x68>
    prop_p[0] = style->map[idx];
  40a4f8:	f8d0 e000 	ldr.w	lr, [r0]
  40a4fc:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a500:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a504:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a508:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a50c:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a510:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a514:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a518:	ea85 0c01 	eor.w	ip, r5, r1
  40a51c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a520:	d02b      	beq.n	40a57a <_lv_style_set_opa+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a522:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a526:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a52a:	ea31 0c0c 	bics.w	ip, r1, ip
  40a52e:	d115      	bne.n	40a55c <_lv_style_set_opa+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a530:	42b9      	cmp	r1, r7
  40a532:	dd13      	ble.n	40a55c <_lv_style_set_opa+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a534:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a538:	b214      	sxth	r4, r2
  40a53a:	e00f      	b.n	40a55c <_lv_style_set_opa+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a53c:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a53e:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a540:	6803      	ldr	r3, [r0, #0]
  40a542:	5c99      	ldrb	r1, [r3, r2]
  40a544:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a548:	1c51      	adds	r1, r2, #1
  40a54a:	5c5b      	ldrb	r3, [r3, r1]
  40a54c:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a550:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a554:	2bff      	cmp	r3, #255	; 0xff
  40a556:	d00f      	beq.n	40a578 <_lv_style_set_opa+0xa0>
        if(prop_id == id_to_find) {
  40a558:	429e      	cmp	r6, r3
  40a55a:	d0cd      	beq.n	40a4f8 <_lv_style_set_opa+0x20>
    prop_id &= 0xF;
  40a55c:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a560:	2b08      	cmp	r3, #8
  40a562:	d9eb      	bls.n	40a53c <_lv_style_set_opa+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a564:	2b0b      	cmp	r3, #11
  40a566:	d903      	bls.n	40a570 <_lv_style_set_opa+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a568:	2b0d      	cmp	r3, #13
  40a56a:	d803      	bhi.n	40a574 <_lv_style_set_opa+0x9c>
  40a56c:	2303      	movs	r3, #3
  40a56e:	e7e6      	b.n	40a53e <_lv_style_set_opa+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a570:	2304      	movs	r3, #4
  40a572:	e7e4      	b.n	40a53e <_lv_style_set_opa+0x66>
    else size += sizeof(const void *);
  40a574:	2306      	movs	r3, #6
  40a576:	e7e2      	b.n	40a53e <_lv_style_set_opa+0x66>
    return id_guess;
  40a578:	4622      	mov	r2, r4
    if(id >= 0) {
  40a57a:	2a00      	cmp	r2, #0
  40a57c:	db23      	blt.n	40a5c6 <_lv_style_set_opa+0xee>
    prop_p[0] = style->map[idx];
  40a57e:	6803      	ldr	r3, [r0, #0]
  40a580:	5c99      	ldrb	r1, [r3, r2]
  40a582:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a586:	4413      	add	r3, r2
  40a588:	785b      	ldrb	r3, [r3, #1]
  40a58a:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a58e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a592:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a596:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a598:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a59c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a5a0:	d111      	bne.n	40a5c6 <_lv_style_set_opa+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
  40a5a2:	6803      	ldr	r3, [r0, #0]
  40a5a4:	3202      	adds	r2, #2
  40a5a6:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a5a8:	f10d 0105 	add.w	r1, sp, #5
  40a5ac:	2301      	movs	r3, #1
    while(len) {
  40a5ae:	b923      	cbnz	r3, 40a5ba <_lv_style_set_opa+0xe2>
}
  40a5b0:	b005      	add	sp, #20
  40a5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
  40a5b4:	f04f 32ff 	mov.w	r2, #4294967295
  40a5b8:	e7df      	b.n	40a57a <_lv_style_set_opa+0xa2>
        *d8 = *s8;
  40a5ba:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a5be:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a5c2:	3b01      	subs	r3, #1
  40a5c4:	e7f3      	b.n	40a5ae <_lv_style_set_opa+0xd6>
  40a5c6:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a5c8:	23ff      	movs	r3, #255	; 0xff
  40a5ca:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a5ce:	4b21      	ldr	r3, [pc, #132]	; (40a654 <_lv_style_set_opa+0x17c>)
  40a5d0:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a5d2:	4603      	mov	r3, r0
  40a5d4:	b908      	cbnz	r0, 40a5da <_lv_style_set_opa+0x102>
  40a5d6:	3302      	adds	r3, #2
  40a5d8:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
  40a5da:	3303      	adds	r3, #3
  40a5dc:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a5de:	4621      	mov	r1, r4
  40a5e0:	6828      	ldr	r0, [r5, #0]
  40a5e2:	4b1d      	ldr	r3, [pc, #116]	; (40a658 <_lv_style_set_opa+0x180>)
  40a5e4:	4798      	blx	r3
  40a5e6:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a5e8:	4b1c      	ldr	r3, [pc, #112]	; (40a65c <_lv_style_set_opa+0x184>)
  40a5ea:	4798      	blx	r3
  40a5ec:	b148      	cbz	r0, 40a602 <_lv_style_set_opa+0x12a>
    if(style == NULL) return;
  40a5ee:	2d00      	cmp	r5, #0
  40a5f0:	d0de      	beq.n	40a5b0 <_lv_style_set_opa+0xd8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a5f2:	682b      	ldr	r3, [r5, #0]
  40a5f4:	1ee0      	subs	r0, r4, #3
  40a5f6:	1f62      	subs	r2, r4, #5
  40a5f8:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a5fa:	f10d 0106 	add.w	r1, sp, #6
  40a5fe:	2202      	movs	r2, #2
  40a600:	e00a      	b.n	40a618 <_lv_style_set_opa+0x140>
    LV_ASSERT_MEM(style->map);
  40a602:	682a      	ldr	r2, [r5, #0]
  40a604:	2300      	movs	r3, #0
  40a606:	4816      	ldr	r0, [pc, #88]	; (40a660 <_lv_style_set_opa+0x188>)
  40a608:	4916      	ldr	r1, [pc, #88]	; (40a664 <_lv_style_set_opa+0x18c>)
  40a60a:	4788      	blx	r1
  40a60c:	e7fe      	b.n	40a60c <_lv_style_set_opa+0x134>
        *d8 = *s8;
  40a60e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a612:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a616:	3a01      	subs	r2, #1
    while(len) {
  40a618:	2a00      	cmp	r2, #0
  40a61a:	d1f8      	bne.n	40a60e <_lv_style_set_opa+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
  40a61c:	682b      	ldr	r3, [r5, #0]
  40a61e:	3c02      	subs	r4, #2
  40a620:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a622:	f10d 0105 	add.w	r1, sp, #5
  40a626:	2201      	movs	r2, #1
    while(len) {
  40a628:	b92a      	cbnz	r2, 40a636 <_lv_style_set_opa+0x15e>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a62a:	682b      	ldr	r3, [r5, #0]
  40a62c:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a62e:	f10d 020e 	add.w	r2, sp, #14
  40a632:	2302      	movs	r3, #2
  40a634:	e00a      	b.n	40a64c <_lv_style_set_opa+0x174>
        *d8 = *s8;
  40a636:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a63a:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a63e:	3a01      	subs	r2, #1
  40a640:	e7f2      	b.n	40a628 <_lv_style_set_opa+0x150>
        *d8 = *s8;
  40a642:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a646:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a64a:	3b01      	subs	r3, #1
    while(len) {
  40a64c:	2b00      	cmp	r3, #0
  40a64e:	d1f8      	bne.n	40a642 <_lv_style_set_opa+0x16a>
  40a650:	e7ae      	b.n	40a5b0 <_lv_style_set_opa+0xd8>
  40a652:	bf00      	nop
  40a654:	0040a009 	.word	0x0040a009
  40a658:	004168ed 	.word	0x004168ed
  40a65c:	00415e79 	.word	0x00415e79
  40a660:	0042c154 	.word	0x0042c154
  40a664:	00415e85 	.word	0x00415e85

0040a668 <_lv_style_set_ptr>:
{
  40a668:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a66a:	b085      	sub	sp, #20
  40a66c:	9200      	str	r2, [sp, #0]
  40a66e:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40a672:	6803      	ldr	r3, [r0, #0]
  40a674:	2b00      	cmp	r3, #0
  40a676:	d061      	beq.n	40a73c <_lv_style_set_ptr+0xd4>
    uint8_t id_to_find = prop & 0xFF;
  40a678:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a67a:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a67c:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a67e:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a682:	4627      	mov	r7, r4
  40a684:	e023      	b.n	40a6ce <_lv_style_set_ptr+0x66>
    prop_p[0] = style->map[idx];
  40a686:	f8d0 e000 	ldr.w	lr, [r0]
  40a68a:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a68e:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a692:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a696:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a69a:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a69e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a6a2:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a6a6:	ea85 0c01 	eor.w	ip, r5, r1
  40a6aa:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a6ae:	d02b      	beq.n	40a708 <_lv_style_set_ptr+0xa0>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a6b0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a6b4:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a6b8:	ea31 0c0c 	bics.w	ip, r1, ip
  40a6bc:	d115      	bne.n	40a6ea <_lv_style_set_ptr+0x82>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a6be:	42b9      	cmp	r1, r7
  40a6c0:	dd13      	ble.n	40a6ea <_lv_style_set_ptr+0x82>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a6c2:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a6c6:	b214      	sxth	r4, r2
  40a6c8:	e00f      	b.n	40a6ea <_lv_style_set_ptr+0x82>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a6ca:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a6cc:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a6ce:	6803      	ldr	r3, [r0, #0]
  40a6d0:	5c99      	ldrb	r1, [r3, r2]
  40a6d2:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a6d6:	1c51      	adds	r1, r2, #1
  40a6d8:	5c5b      	ldrb	r3, [r3, r1]
  40a6da:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a6de:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a6e2:	2bff      	cmp	r3, #255	; 0xff
  40a6e4:	d00f      	beq.n	40a706 <_lv_style_set_ptr+0x9e>
        if(prop_id == id_to_find) {
  40a6e6:	429e      	cmp	r6, r3
  40a6e8:	d0cd      	beq.n	40a686 <_lv_style_set_ptr+0x1e>
    prop_id &= 0xF;
  40a6ea:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a6ee:	2b08      	cmp	r3, #8
  40a6f0:	d9eb      	bls.n	40a6ca <_lv_style_set_ptr+0x62>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a6f2:	2b0b      	cmp	r3, #11
  40a6f4:	d903      	bls.n	40a6fe <_lv_style_set_ptr+0x96>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a6f6:	2b0d      	cmp	r3, #13
  40a6f8:	d803      	bhi.n	40a702 <_lv_style_set_ptr+0x9a>
  40a6fa:	2303      	movs	r3, #3
  40a6fc:	e7e6      	b.n	40a6cc <_lv_style_set_ptr+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a6fe:	2304      	movs	r3, #4
  40a700:	e7e4      	b.n	40a6cc <_lv_style_set_ptr+0x64>
    else size += sizeof(const void *);
  40a702:	2306      	movs	r3, #6
  40a704:	e7e2      	b.n	40a6cc <_lv_style_set_ptr+0x64>
    return id_guess;
  40a706:	4622      	mov	r2, r4
    if(id >= 0) {
  40a708:	2a00      	cmp	r2, #0
  40a70a:	db23      	blt.n	40a754 <_lv_style_set_ptr+0xec>
    prop_p[0] = style->map[idx];
  40a70c:	6803      	ldr	r3, [r0, #0]
  40a70e:	5c99      	ldrb	r1, [r3, r2]
  40a710:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a714:	4413      	add	r3, r2
  40a716:	785b      	ldrb	r3, [r3, #1]
  40a718:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a71c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a720:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a724:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a726:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a72a:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a72e:	d111      	bne.n	40a754 <_lv_style_set_ptr+0xec>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
  40a730:	6803      	ldr	r3, [r0, #0]
  40a732:	3202      	adds	r2, #2
  40a734:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a736:	4669      	mov	r1, sp
  40a738:	2304      	movs	r3, #4
  40a73a:	e007      	b.n	40a74c <_lv_style_set_ptr+0xe4>
    if(style->map == NULL) return -1;
  40a73c:	f04f 32ff 	mov.w	r2, #4294967295
  40a740:	e7e2      	b.n	40a708 <_lv_style_set_ptr+0xa0>
        *d8 = *s8;
  40a742:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a746:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a74a:	3b01      	subs	r3, #1
    while(len) {
  40a74c:	2b00      	cmp	r3, #0
  40a74e:	d1f8      	bne.n	40a742 <_lv_style_set_ptr+0xda>
}
  40a750:	b005      	add	sp, #20
  40a752:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a754:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a756:	23ff      	movs	r3, #255	; 0xff
  40a758:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a75c:	4b21      	ldr	r3, [pc, #132]	; (40a7e4 <_lv_style_set_ptr+0x17c>)
  40a75e:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a760:	4603      	mov	r3, r0
  40a762:	b908      	cbnz	r0, 40a768 <_lv_style_set_ptr+0x100>
  40a764:	3302      	adds	r3, #2
  40a766:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(const void *);
  40a768:	3306      	adds	r3, #6
  40a76a:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a76c:	4621      	mov	r1, r4
  40a76e:	6828      	ldr	r0, [r5, #0]
  40a770:	4b1d      	ldr	r3, [pc, #116]	; (40a7e8 <_lv_style_set_ptr+0x180>)
  40a772:	4798      	blx	r3
  40a774:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a776:	4b1d      	ldr	r3, [pc, #116]	; (40a7ec <_lv_style_set_ptr+0x184>)
  40a778:	4798      	blx	r3
  40a77a:	b150      	cbz	r0, 40a792 <_lv_style_set_ptr+0x12a>
    if(style == NULL) return;
  40a77c:	2d00      	cmp	r5, #0
  40a77e:	d0e7      	beq.n	40a750 <_lv_style_set_ptr+0xe8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a780:	682b      	ldr	r3, [r5, #0]
  40a782:	1fa0      	subs	r0, r4, #6
  40a784:	f1a4 0208 	sub.w	r2, r4, #8
  40a788:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a78a:	f10d 0106 	add.w	r1, sp, #6
  40a78e:	2202      	movs	r2, #2
  40a790:	e00a      	b.n	40a7a8 <_lv_style_set_ptr+0x140>
    LV_ASSERT_MEM(style->map);
  40a792:	682a      	ldr	r2, [r5, #0]
  40a794:	2300      	movs	r3, #0
  40a796:	4816      	ldr	r0, [pc, #88]	; (40a7f0 <_lv_style_set_ptr+0x188>)
  40a798:	4916      	ldr	r1, [pc, #88]	; (40a7f4 <_lv_style_set_ptr+0x18c>)
  40a79a:	4788      	blx	r1
  40a79c:	e7fe      	b.n	40a79c <_lv_style_set_ptr+0x134>
        *d8 = *s8;
  40a79e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a7a2:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a7a6:	3a01      	subs	r2, #1
    while(len) {
  40a7a8:	2a00      	cmp	r2, #0
  40a7aa:	d1f8      	bne.n	40a79e <_lv_style_set_ptr+0x136>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
  40a7ac:	682b      	ldr	r3, [r5, #0]
  40a7ae:	3c02      	subs	r4, #2
  40a7b0:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a7b2:	4669      	mov	r1, sp
  40a7b4:	2204      	movs	r2, #4
  40a7b6:	e004      	b.n	40a7c2 <_lv_style_set_ptr+0x15a>
        *d8 = *s8;
  40a7b8:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a7bc:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a7c0:	3a01      	subs	r2, #1
    while(len) {
  40a7c2:	2a00      	cmp	r2, #0
  40a7c4:	d1f8      	bne.n	40a7b8 <_lv_style_set_ptr+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a7c6:	682b      	ldr	r3, [r5, #0]
  40a7c8:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a7ca:	f10d 020e 	add.w	r2, sp, #14
  40a7ce:	2302      	movs	r3, #2
  40a7d0:	e004      	b.n	40a7dc <_lv_style_set_ptr+0x174>
        *d8 = *s8;
  40a7d2:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a7d6:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a7da:	3b01      	subs	r3, #1
    while(len) {
  40a7dc:	2b00      	cmp	r3, #0
  40a7de:	d1f8      	bne.n	40a7d2 <_lv_style_set_ptr+0x16a>
  40a7e0:	e7b6      	b.n	40a750 <_lv_style_set_ptr+0xe8>
  40a7e2:	bf00      	nop
  40a7e4:	0040a009 	.word	0x0040a009
  40a7e8:	004168ed 	.word	0x004168ed
  40a7ec:	00415e79 	.word	0x00415e79
  40a7f0:	0042c154 	.word	0x0042c154
  40a7f4:	00415e85 	.word	0x00415e85

0040a7f8 <_lv_style_get_int>:
    if(style == NULL) return -1;
  40a7f8:	2800      	cmp	r0, #0
  40a7fa:	d077      	beq.n	40a8ec <_lv_style_get_int+0xf4>
{
  40a7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a800:	b082      	sub	sp, #8
  40a802:	4692      	mov	sl, r2
  40a804:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a806:	6803      	ldr	r3, [r0, #0]
  40a808:	2b00      	cmp	r3, #0
  40a80a:	d072      	beq.n	40a8f2 <_lv_style_get_int+0xfa>
    if(style->map == NULL) return -1;
  40a80c:	2b00      	cmp	r3, #0
  40a80e:	d051      	beq.n	40a8b4 <_lv_style_get_int+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a810:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a812:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a814:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a816:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a81a:	46f4      	mov	ip, lr
  40a81c:	e02e      	b.n	40a87c <_lv_style_get_int+0x84>
    prop_p[0] = style->map[idx];
  40a81e:	682a      	ldr	r2, [r5, #0]
  40a820:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a824:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a828:	5d14      	ldrb	r4, [r2, r4]
  40a82a:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a82e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a832:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a836:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a83a:	ea87 0904 	eor.w	r9, r7, r4
  40a83e:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a842:	d00d      	beq.n	40a860 <_lv_style_get_int+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a844:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a848:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a84c:	ea34 0209 	bics.w	r2, r4, r9
  40a850:	d122      	bne.n	40a898 <_lv_style_get_int+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a852:	4564      	cmp	r4, ip
  40a854:	dd20      	ble.n	40a898 <_lv_style_get_int+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a856:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a85a:	fa0f fe80 	sxth.w	lr, r0
  40a85e:	e01b      	b.n	40a898 <_lv_style_get_int+0xa0>
                return i;
  40a860:	4686      	mov	lr, r0
    if(id < 0) {
  40a862:	f1be 0f00 	cmp.w	lr, #0
  40a866:	db47      	blt.n	40a8f8 <_lv_style_get_int+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
  40a868:	682b      	ldr	r3, [r5, #0]
  40a86a:	4674      	mov	r4, lr
  40a86c:	f10e 0e02 	add.w	lr, lr, #2
  40a870:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a872:	4652      	mov	r2, sl
  40a874:	2302      	movs	r3, #2
  40a876:	e025      	b.n	40a8c4 <_lv_style_get_int+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a878:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a87a:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a87c:	682b      	ldr	r3, [r5, #0]
  40a87e:	5c1c      	ldrb	r4, [r3, r0]
  40a880:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a884:	1c44      	adds	r4, r0, #1
  40a886:	5d1b      	ldrb	r3, [r3, r4]
  40a888:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a88c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a890:	2bff      	cmp	r3, #255	; 0xff
  40a892:	d0e6      	beq.n	40a862 <_lv_style_get_int+0x6a>
        if(prop_id == id_to_find) {
  40a894:	429e      	cmp	r6, r3
  40a896:	d0c2      	beq.n	40a81e <_lv_style_get_int+0x26>
    prop_id &= 0xF;
  40a898:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a89c:	2b08      	cmp	r3, #8
  40a89e:	d9eb      	bls.n	40a878 <_lv_style_get_int+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a8a0:	2b0b      	cmp	r3, #11
  40a8a2:	d903      	bls.n	40a8ac <_lv_style_get_int+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a8a4:	2b0d      	cmp	r3, #13
  40a8a6:	d803      	bhi.n	40a8b0 <_lv_style_get_int+0xb8>
  40a8a8:	2303      	movs	r3, #3
  40a8aa:	e7e6      	b.n	40a87a <_lv_style_get_int+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a8ac:	2304      	movs	r3, #4
  40a8ae:	e7e4      	b.n	40a87a <_lv_style_get_int+0x82>
    else size += sizeof(const void *);
  40a8b0:	2306      	movs	r3, #6
  40a8b2:	e7e2      	b.n	40a87a <_lv_style_get_int+0x82>
    if(style->map == NULL) return -1;
  40a8b4:	f04f 3eff 	mov.w	lr, #4294967295
  40a8b8:	e7d3      	b.n	40a862 <_lv_style_get_int+0x6a>
        *d8 = *s8;
  40a8ba:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a8be:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a8c2:	3b01      	subs	r3, #1
    while(len) {
  40a8c4:	2b00      	cmp	r3, #0
  40a8c6:	d1f8      	bne.n	40a8ba <_lv_style_get_int+0xc2>
    prop_p[0] = style->map[idx];
  40a8c8:	682b      	ldr	r3, [r5, #0]
  40a8ca:	5d1a      	ldrb	r2, [r3, r4]
  40a8cc:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a8d0:	4423      	add	r3, r4
  40a8d2:	785b      	ldrb	r3, [r3, #1]
  40a8d4:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a8d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a8dc:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a8de:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a8e2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a8e6:	b002      	add	sp, #8
  40a8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a8ec:	f04f 30ff 	mov.w	r0, #4294967295
  40a8f0:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a8f2:	f04f 30ff 	mov.w	r0, #4294967295
  40a8f6:	e7f6      	b.n	40a8e6 <_lv_style_get_int+0xee>
        return -1;
  40a8f8:	f04f 30ff 	mov.w	r0, #4294967295
  40a8fc:	e7f3      	b.n	40a8e6 <_lv_style_get_int+0xee>

0040a8fe <_lv_style_get_opa>:
    if(style == NULL) return -1;
  40a8fe:	2800      	cmp	r0, #0
  40a900:	d076      	beq.n	40a9f0 <_lv_style_get_opa+0xf2>
{
  40a902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a906:	b082      	sub	sp, #8
  40a908:	4692      	mov	sl, r2
  40a90a:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a90c:	6803      	ldr	r3, [r0, #0]
  40a90e:	2b00      	cmp	r3, #0
  40a910:	d071      	beq.n	40a9f6 <_lv_style_get_opa+0xf8>
    if(style->map == NULL) return -1;
  40a912:	2b00      	cmp	r3, #0
  40a914:	d063      	beq.n	40a9de <_lv_style_get_opa+0xe0>
    uint8_t id_to_find = prop & 0xFF;
  40a916:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a918:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a91a:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a91c:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a920:	46f4      	mov	ip, lr
  40a922:	e040      	b.n	40a9a6 <_lv_style_get_opa+0xa8>
    prop_p[0] = style->map[idx];
  40a924:	682a      	ldr	r2, [r5, #0]
  40a926:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a92a:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a92e:	5d14      	ldrb	r4, [r2, r4]
  40a930:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a934:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a938:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a93c:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a940:	ea87 0904 	eor.w	r9, r7, r4
  40a944:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a948:	d00d      	beq.n	40a966 <_lv_style_get_opa+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a94a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a94e:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a952:	ea34 0209 	bics.w	r2, r4, r9
  40a956:	d134      	bne.n	40a9c2 <_lv_style_get_opa+0xc4>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a958:	4564      	cmp	r4, ip
  40a95a:	dd32      	ble.n	40a9c2 <_lv_style_get_opa+0xc4>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a95c:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a960:	fa0f fe80 	sxth.w	lr, r0
  40a964:	e02d      	b.n	40a9c2 <_lv_style_get_opa+0xc4>
                return i;
  40a966:	4686      	mov	lr, r0
    if(id < 0) {
  40a968:	f1be 0f00 	cmp.w	lr, #0
  40a96c:	db46      	blt.n	40a9fc <_lv_style_get_opa+0xfe>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
  40a96e:	6828      	ldr	r0, [r5, #0]
  40a970:	4674      	mov	r4, lr
  40a972:	f10e 0e02 	add.w	lr, lr, #2
  40a976:	4486      	add	lr, r0
    uint8_t * d8 = (uint8_t *)dst;
  40a978:	4652      	mov	r2, sl
  40a97a:	2301      	movs	r3, #1
    while(len) {
  40a97c:	bb93      	cbnz	r3, 40a9e4 <_lv_style_get_opa+0xe6>
    prop_p[0] = style->map[idx];
  40a97e:	682b      	ldr	r3, [r5, #0]
  40a980:	5d1a      	ldrb	r2, [r3, r4]
  40a982:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a986:	4423      	add	r3, r4
  40a988:	785b      	ldrb	r3, [r3, #1]
  40a98a:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a98e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a992:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a994:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a998:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a99c:	b002      	add	sp, #8
  40a99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a9a2:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a9a4:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a9a6:	682b      	ldr	r3, [r5, #0]
  40a9a8:	5c1c      	ldrb	r4, [r3, r0]
  40a9aa:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a9ae:	1c44      	adds	r4, r0, #1
  40a9b0:	5d1b      	ldrb	r3, [r3, r4]
  40a9b2:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a9b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a9ba:	2bff      	cmp	r3, #255	; 0xff
  40a9bc:	d0d4      	beq.n	40a968 <_lv_style_get_opa+0x6a>
        if(prop_id == id_to_find) {
  40a9be:	429e      	cmp	r6, r3
  40a9c0:	d0b0      	beq.n	40a924 <_lv_style_get_opa+0x26>
    prop_id &= 0xF;
  40a9c2:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a9c6:	2b08      	cmp	r3, #8
  40a9c8:	d9eb      	bls.n	40a9a2 <_lv_style_get_opa+0xa4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a9ca:	2b0b      	cmp	r3, #11
  40a9cc:	d903      	bls.n	40a9d6 <_lv_style_get_opa+0xd8>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a9ce:	2b0d      	cmp	r3, #13
  40a9d0:	d803      	bhi.n	40a9da <_lv_style_get_opa+0xdc>
  40a9d2:	2303      	movs	r3, #3
  40a9d4:	e7e6      	b.n	40a9a4 <_lv_style_get_opa+0xa6>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a9d6:	2304      	movs	r3, #4
  40a9d8:	e7e4      	b.n	40a9a4 <_lv_style_get_opa+0xa6>
    else size += sizeof(const void *);
  40a9da:	2306      	movs	r3, #6
  40a9dc:	e7e2      	b.n	40a9a4 <_lv_style_get_opa+0xa6>
    if(style->map == NULL) return -1;
  40a9de:	f04f 3eff 	mov.w	lr, #4294967295
  40a9e2:	e7c1      	b.n	40a968 <_lv_style_get_opa+0x6a>
        *d8 = *s8;
  40a9e4:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a9e8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a9ec:	3b01      	subs	r3, #1
  40a9ee:	e7c5      	b.n	40a97c <_lv_style_get_opa+0x7e>
    if(style == NULL) return -1;
  40a9f0:	f04f 30ff 	mov.w	r0, #4294967295
  40a9f4:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a9f6:	f04f 30ff 	mov.w	r0, #4294967295
  40a9fa:	e7cf      	b.n	40a99c <_lv_style_get_opa+0x9e>
        return -1;
  40a9fc:	f04f 30ff 	mov.w	r0, #4294967295
  40aa00:	e7cc      	b.n	40a99c <_lv_style_get_opa+0x9e>

0040aa02 <_lv_style_get_color>:
    if(style == NULL) return -1;
  40aa02:	2800      	cmp	r0, #0
  40aa04:	d077      	beq.n	40aaf6 <_lv_style_get_color+0xf4>
{
  40aa06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aa0a:	b082      	sub	sp, #8
  40aa0c:	4692      	mov	sl, r2
  40aa0e:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40aa10:	6803      	ldr	r3, [r0, #0]
  40aa12:	2b00      	cmp	r3, #0
  40aa14:	d072      	beq.n	40aafc <_lv_style_get_color+0xfa>
    if(style->map == NULL) return -1;
  40aa16:	2b00      	cmp	r3, #0
  40aa18:	d051      	beq.n	40aabe <_lv_style_get_color+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40aa1a:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40aa1c:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40aa1e:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40aa20:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40aa24:	46f4      	mov	ip, lr
  40aa26:	e02e      	b.n	40aa86 <_lv_style_get_color+0x84>
    prop_p[0] = style->map[idx];
  40aa28:	682a      	ldr	r2, [r5, #0]
  40aa2a:	f812 9000 	ldrb.w	r9, [r2, r0]
  40aa2e:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40aa32:	5d14      	ldrb	r4, [r2, r4]
  40aa34:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40aa38:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40aa3c:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40aa40:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40aa44:	ea87 0904 	eor.w	r9, r7, r4
  40aa48:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40aa4c:	d00d      	beq.n	40aa6a <_lv_style_get_color+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40aa4e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40aa52:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40aa56:	ea34 0209 	bics.w	r2, r4, r9
  40aa5a:	d122      	bne.n	40aaa2 <_lv_style_get_color+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40aa5c:	4564      	cmp	r4, ip
  40aa5e:	dd20      	ble.n	40aaa2 <_lv_style_get_color+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40aa60:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40aa64:	fa0f fe80 	sxth.w	lr, r0
  40aa68:	e01b      	b.n	40aaa2 <_lv_style_get_color+0xa0>
                return i;
  40aa6a:	4686      	mov	lr, r0
    if(id < 0) {
  40aa6c:	f1be 0f00 	cmp.w	lr, #0
  40aa70:	db47      	blt.n	40ab02 <_lv_style_get_color+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
  40aa72:	682b      	ldr	r3, [r5, #0]
  40aa74:	4674      	mov	r4, lr
  40aa76:	f10e 0e02 	add.w	lr, lr, #2
  40aa7a:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40aa7c:	4652      	mov	r2, sl
  40aa7e:	2302      	movs	r3, #2
  40aa80:	e025      	b.n	40aace <_lv_style_get_color+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40aa82:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40aa84:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40aa86:	682b      	ldr	r3, [r5, #0]
  40aa88:	5c1c      	ldrb	r4, [r3, r0]
  40aa8a:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40aa8e:	1c44      	adds	r4, r0, #1
  40aa90:	5d1b      	ldrb	r3, [r3, r4]
  40aa92:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40aa96:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40aa9a:	2bff      	cmp	r3, #255	; 0xff
  40aa9c:	d0e6      	beq.n	40aa6c <_lv_style_get_color+0x6a>
        if(prop_id == id_to_find) {
  40aa9e:	429e      	cmp	r6, r3
  40aaa0:	d0c2      	beq.n	40aa28 <_lv_style_get_color+0x26>
    prop_id &= 0xF;
  40aaa2:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40aaa6:	2b08      	cmp	r3, #8
  40aaa8:	d9eb      	bls.n	40aa82 <_lv_style_get_color+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40aaaa:	2b0b      	cmp	r3, #11
  40aaac:	d903      	bls.n	40aab6 <_lv_style_get_color+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40aaae:	2b0d      	cmp	r3, #13
  40aab0:	d803      	bhi.n	40aaba <_lv_style_get_color+0xb8>
  40aab2:	2303      	movs	r3, #3
  40aab4:	e7e6      	b.n	40aa84 <_lv_style_get_color+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40aab6:	2304      	movs	r3, #4
  40aab8:	e7e4      	b.n	40aa84 <_lv_style_get_color+0x82>
    else size += sizeof(const void *);
  40aaba:	2306      	movs	r3, #6
  40aabc:	e7e2      	b.n	40aa84 <_lv_style_get_color+0x82>
    if(style->map == NULL) return -1;
  40aabe:	f04f 3eff 	mov.w	lr, #4294967295
  40aac2:	e7d3      	b.n	40aa6c <_lv_style_get_color+0x6a>
        *d8 = *s8;
  40aac4:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40aac8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40aacc:	3b01      	subs	r3, #1
    while(len) {
  40aace:	2b00      	cmp	r3, #0
  40aad0:	d1f8      	bne.n	40aac4 <_lv_style_get_color+0xc2>
    prop_p[0] = style->map[idx];
  40aad2:	682b      	ldr	r3, [r5, #0]
  40aad4:	5d1a      	ldrb	r2, [r3, r4]
  40aad6:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40aada:	4423      	add	r3, r4
  40aadc:	785b      	ldrb	r3, [r3, #1]
  40aade:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40aae2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40aae6:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40aae8:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40aaec:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40aaf0:	b002      	add	sp, #8
  40aaf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40aaf6:	f04f 30ff 	mov.w	r0, #4294967295
  40aafa:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40aafc:	f04f 30ff 	mov.w	r0, #4294967295
  40ab00:	e7f6      	b.n	40aaf0 <_lv_style_get_color+0xee>
        return -1;
  40ab02:	f04f 30ff 	mov.w	r0, #4294967295
  40ab06:	e7f3      	b.n	40aaf0 <_lv_style_get_color+0xee>

0040ab08 <_lv_style_get_ptr>:
    if(style == NULL) return -1;
  40ab08:	2800      	cmp	r0, #0
  40ab0a:	d077      	beq.n	40abfc <_lv_style_get_ptr+0xf4>
{
  40ab0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ab10:	b082      	sub	sp, #8
  40ab12:	4692      	mov	sl, r2
  40ab14:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40ab16:	6803      	ldr	r3, [r0, #0]
  40ab18:	2b00      	cmp	r3, #0
  40ab1a:	d072      	beq.n	40ac02 <_lv_style_get_ptr+0xfa>
    if(style->map == NULL) return -1;
  40ab1c:	2b00      	cmp	r3, #0
  40ab1e:	d051      	beq.n	40abc4 <_lv_style_get_ptr+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40ab20:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40ab22:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40ab24:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40ab26:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40ab2a:	46f4      	mov	ip, lr
  40ab2c:	e02e      	b.n	40ab8c <_lv_style_get_ptr+0x84>
    prop_p[0] = style->map[idx];
  40ab2e:	682a      	ldr	r2, [r5, #0]
  40ab30:	f812 9000 	ldrb.w	r9, [r2, r0]
  40ab34:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40ab38:	5d14      	ldrb	r4, [r2, r4]
  40ab3a:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40ab3e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40ab42:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40ab46:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40ab4a:	ea87 0904 	eor.w	r9, r7, r4
  40ab4e:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40ab52:	d00d      	beq.n	40ab70 <_lv_style_get_ptr+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40ab54:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40ab58:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40ab5c:	ea34 0209 	bics.w	r2, r4, r9
  40ab60:	d122      	bne.n	40aba8 <_lv_style_get_ptr+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40ab62:	4564      	cmp	r4, ip
  40ab64:	dd20      	ble.n	40aba8 <_lv_style_get_ptr+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40ab66:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40ab6a:	fa0f fe80 	sxth.w	lr, r0
  40ab6e:	e01b      	b.n	40aba8 <_lv_style_get_ptr+0xa0>
                return i;
  40ab70:	4686      	mov	lr, r0
    if(id < 0) {
  40ab72:	f1be 0f00 	cmp.w	lr, #0
  40ab76:	db47      	blt.n	40ac08 <_lv_style_get_ptr+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
  40ab78:	682b      	ldr	r3, [r5, #0]
  40ab7a:	4676      	mov	r6, lr
  40ab7c:	f10e 0002 	add.w	r0, lr, #2
  40ab80:	4418      	add	r0, r3
    uint8_t * d8 = (uint8_t *)dst;
  40ab82:	4652      	mov	r2, sl
  40ab84:	2304      	movs	r3, #4
  40ab86:	e025      	b.n	40abd4 <_lv_style_get_ptr+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40ab88:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40ab8a:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40ab8c:	682b      	ldr	r3, [r5, #0]
  40ab8e:	5c1c      	ldrb	r4, [r3, r0]
  40ab90:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40ab94:	1c44      	adds	r4, r0, #1
  40ab96:	5d1b      	ldrb	r3, [r3, r4]
  40ab98:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40ab9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40aba0:	2bff      	cmp	r3, #255	; 0xff
  40aba2:	d0e6      	beq.n	40ab72 <_lv_style_get_ptr+0x6a>
        if(prop_id == id_to_find) {
  40aba4:	429e      	cmp	r6, r3
  40aba6:	d0c2      	beq.n	40ab2e <_lv_style_get_ptr+0x26>
    prop_id &= 0xF;
  40aba8:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40abac:	2b08      	cmp	r3, #8
  40abae:	d9eb      	bls.n	40ab88 <_lv_style_get_ptr+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40abb0:	2b0b      	cmp	r3, #11
  40abb2:	d903      	bls.n	40abbc <_lv_style_get_ptr+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40abb4:	2b0d      	cmp	r3, #13
  40abb6:	d803      	bhi.n	40abc0 <_lv_style_get_ptr+0xb8>
  40abb8:	2303      	movs	r3, #3
  40abba:	e7e6      	b.n	40ab8a <_lv_style_get_ptr+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40abbc:	2304      	movs	r3, #4
  40abbe:	e7e4      	b.n	40ab8a <_lv_style_get_ptr+0x82>
    else size += sizeof(const void *);
  40abc0:	2306      	movs	r3, #6
  40abc2:	e7e2      	b.n	40ab8a <_lv_style_get_ptr+0x82>
    if(style->map == NULL) return -1;
  40abc4:	f04f 3eff 	mov.w	lr, #4294967295
  40abc8:	e7d3      	b.n	40ab72 <_lv_style_get_ptr+0x6a>
        *d8 = *s8;
  40abca:	f810 4b01 	ldrb.w	r4, [r0], #1
  40abce:	f802 4b01 	strb.w	r4, [r2], #1
        len--;
  40abd2:	3b01      	subs	r3, #1
    while(len) {
  40abd4:	2b00      	cmp	r3, #0
  40abd6:	d1f8      	bne.n	40abca <_lv_style_get_ptr+0xc2>
    prop_p[0] = style->map[idx];
  40abd8:	682b      	ldr	r3, [r5, #0]
  40abda:	5d9a      	ldrb	r2, [r3, r6]
  40abdc:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40abe0:	4433      	add	r3, r6
  40abe2:	785b      	ldrb	r3, [r3, #1]
  40abe4:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40abe8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40abec:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40abee:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40abf2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40abf6:	b002      	add	sp, #8
  40abf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40abfc:	f04f 30ff 	mov.w	r0, #4294967295
  40ac00:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40ac02:	f04f 30ff 	mov.w	r0, #4294967295
  40ac06:	e7f6      	b.n	40abf6 <_lv_style_get_ptr+0xee>
        return -1;
  40ac08:	f04f 30ff 	mov.w	r0, #4294967295
  40ac0c:	e7f3      	b.n	40abf6 <_lv_style_get_ptr+0xee>

0040ac0e <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
  40ac0e:	7903      	ldrb	r3, [r0, #4]
  40ac10:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ac14:	d008      	beq.n	40ac28 <lv_style_list_get_local_style+0x1a>
    if(list->has_trans) return list->style_list[1];
  40ac16:	f013 0f80 	tst.w	r3, #128	; 0x80
  40ac1a:	d102      	bne.n	40ac22 <lv_style_list_get_local_style+0x14>
    else return list->style_list[0];
  40ac1c:	6803      	ldr	r3, [r0, #0]
  40ac1e:	6818      	ldr	r0, [r3, #0]
  40ac20:	4770      	bx	lr
    if(list->has_trans) return list->style_list[1];
  40ac22:	6803      	ldr	r3, [r0, #0]
  40ac24:	6858      	ldr	r0, [r3, #4]
  40ac26:	4770      	bx	lr
    if(!list->has_local) return NULL;
  40ac28:	2000      	movs	r0, #0
}
  40ac2a:	4770      	bx	lr

0040ac2c <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
  40ac2c:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40ac30:	2b00      	cmp	r3, #0
  40ac32:	da02      	bge.n	40ac3a <_lv_style_list_get_transition_style+0xe>
    return list->style_list[0];
  40ac34:	6803      	ldr	r3, [r0, #0]
  40ac36:	6818      	ldr	r0, [r3, #0]
  40ac38:	4770      	bx	lr
    if(!list->has_trans) return NULL;
  40ac3a:	2000      	movs	r0, #0
}
  40ac3c:	4770      	bx	lr
	...

0040ac40 <_lv_style_list_reset>:
    if(list == NULL) return;
  40ac40:	2800      	cmp	r0, #0
  40ac42:	d032      	beq.n	40acaa <_lv_style_list_reset+0x6a>
{
  40ac44:	b538      	push	{r3, r4, r5, lr}
  40ac46:	4604      	mov	r4, r0
    if(list->has_local) {
  40ac48:	7903      	ldrb	r3, [r0, #4]
  40ac4a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ac4e:	d008      	beq.n	40ac62 <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
  40ac50:	4b16      	ldr	r3, [pc, #88]	; (40acac <_lv_style_list_reset+0x6c>)
  40ac52:	4798      	blx	r3
        if(local) {
  40ac54:	4605      	mov	r5, r0
  40ac56:	b120      	cbz	r0, 40ac62 <_lv_style_list_reset+0x22>
            lv_style_reset(local);
  40ac58:	4b15      	ldr	r3, [pc, #84]	; (40acb0 <_lv_style_list_reset+0x70>)
  40ac5a:	4798      	blx	r3
            lv_mem_free(local);
  40ac5c:	4628      	mov	r0, r5
  40ac5e:	4b15      	ldr	r3, [pc, #84]	; (40acb4 <_lv_style_list_reset+0x74>)
  40ac60:	4798      	blx	r3
    if(list->has_trans) {
  40ac62:	f994 3004 	ldrsb.w	r3, [r4, #4]
  40ac66:	2b00      	cmp	r3, #0
  40ac68:	db13      	blt.n	40ac92 <_lv_style_list_reset+0x52>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
  40ac6a:	7923      	ldrb	r3, [r4, #4]
  40ac6c:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40ac70:	d002      	beq.n	40ac78 <_lv_style_list_reset+0x38>
  40ac72:	6820      	ldr	r0, [r4, #0]
  40ac74:	4b0f      	ldr	r3, [pc, #60]	; (40acb4 <_lv_style_list_reset+0x74>)
  40ac76:	4798      	blx	r3
    list->style_list = NULL;
  40ac78:	2200      	movs	r2, #0
  40ac7a:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
  40ac7c:	7923      	ldrb	r3, [r4, #4]
    list->has_trans = 0;
  40ac7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40ac82:	f362 13c7 	bfi	r3, r2, #7, #1
  40ac86:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
  40ac88:	7963      	ldrb	r3, [r4, #5]
  40ac8a:	f362 0300 	bfi	r3, r2, #0, #1
  40ac8e:	7163      	strb	r3, [r4, #5]
  40ac90:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
  40ac92:	4620      	mov	r0, r4
  40ac94:	4b08      	ldr	r3, [pc, #32]	; (40acb8 <_lv_style_list_reset+0x78>)
  40ac96:	4798      	blx	r3
        if(trans) {
  40ac98:	4605      	mov	r5, r0
  40ac9a:	2800      	cmp	r0, #0
  40ac9c:	d0e5      	beq.n	40ac6a <_lv_style_list_reset+0x2a>
            lv_style_reset(trans);
  40ac9e:	4b04      	ldr	r3, [pc, #16]	; (40acb0 <_lv_style_list_reset+0x70>)
  40aca0:	4798      	blx	r3
            lv_mem_free(trans);
  40aca2:	4628      	mov	r0, r5
  40aca4:	4b03      	ldr	r3, [pc, #12]	; (40acb4 <_lv_style_list_reset+0x74>)
  40aca6:	4798      	blx	r3
  40aca8:	e7df      	b.n	40ac6a <_lv_style_list_reset+0x2a>
  40acaa:	4770      	bx	lr
  40acac:	0040ac0f 	.word	0x0040ac0f
  40acb0:	00409ff5 	.word	0x00409ff5
  40acb4:	00416681 	.word	0x00416681
  40acb8:	0040ac2d 	.word	0x0040ac2d

0040acbc <lv_style_list_copy>:
{
  40acbc:	b570      	push	{r4, r5, r6, lr}
  40acbe:	4605      	mov	r5, r0
  40acc0:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
  40acc2:	4b3d      	ldr	r3, [pc, #244]	; (40adb8 <lv_style_list_copy+0xfc>)
  40acc4:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
  40acc6:	6823      	ldr	r3, [r4, #0]
  40acc8:	2b00      	cmp	r3, #0
  40acca:	d059      	beq.n	40ad80 <lv_style_list_copy+0xc4>
    if(list_src->has_local == 0) {
  40accc:	7923      	ldrb	r3, [r4, #4]
  40acce:	f013 0f40 	tst.w	r3, #64	; 0x40
  40acd2:	d12f      	bne.n	40ad34 <lv_style_list_copy+0x78>
        if(list_src->has_trans) {
  40acd4:	f013 0f80 	tst.w	r3, #128	; 0x80
  40acd8:	d113      	bne.n	40ad02 <lv_style_list_copy+0x46>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
  40acda:	7920      	ldrb	r0, [r4, #4]
  40acdc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40ace0:	0080      	lsls	r0, r0, #2
  40ace2:	4b36      	ldr	r3, [pc, #216]	; (40adbc <lv_style_list_copy+0x100>)
  40ace4:	4798      	blx	r3
  40ace6:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
  40ace8:	7922      	ldrb	r2, [r4, #4]
  40acea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40acee:	0092      	lsls	r2, r2, #2
  40acf0:	6821      	ldr	r1, [r4, #0]
  40acf2:	4b33      	ldr	r3, [pc, #204]	; (40adc0 <lv_style_list_copy+0x104>)
  40acf4:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
  40acf6:	7922      	ldrb	r2, [r4, #4]
  40acf8:	792b      	ldrb	r3, [r5, #4]
  40acfa:	f362 0305 	bfi	r3, r2, #0, #6
  40acfe:	712b      	strb	r3, [r5, #4]
  40ad00:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40ad02:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  40ad06:	3801      	subs	r0, #1
  40ad08:	0080      	lsls	r0, r0, #2
  40ad0a:	4b2c      	ldr	r3, [pc, #176]	; (40adbc <lv_style_list_copy+0x100>)
  40ad0c:	4798      	blx	r3
  40ad0e:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40ad10:	6821      	ldr	r1, [r4, #0]
  40ad12:	7922      	ldrb	r2, [r4, #4]
  40ad14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ad18:	3a01      	subs	r2, #1
  40ad1a:	0092      	lsls	r2, r2, #2
  40ad1c:	3104      	adds	r1, #4
  40ad1e:	4b28      	ldr	r3, [pc, #160]	; (40adc0 <lv_style_list_copy+0x104>)
  40ad20:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40ad22:	7923      	ldrb	r3, [r4, #4]
  40ad24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ad28:	3b01      	subs	r3, #1
  40ad2a:	792a      	ldrb	r2, [r5, #4]
  40ad2c:	f363 0205 	bfi	r2, r3, #0, #6
  40ad30:	712a      	strb	r2, [r5, #4]
  40ad32:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
  40ad34:	f013 0f80 	tst.w	r3, #128	; 0x80
  40ad38:	d123      	bne.n	40ad82 <lv_style_list_copy+0xc6>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40ad3a:	7920      	ldrb	r0, [r4, #4]
  40ad3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40ad40:	3801      	subs	r0, #1
  40ad42:	0080      	lsls	r0, r0, #2
  40ad44:	4b1d      	ldr	r3, [pc, #116]	; (40adbc <lv_style_list_copy+0x100>)
  40ad46:	4798      	blx	r3
  40ad48:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40ad4a:	6821      	ldr	r1, [r4, #0]
  40ad4c:	7922      	ldrb	r2, [r4, #4]
  40ad4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ad52:	3a01      	subs	r2, #1
  40ad54:	0092      	lsls	r2, r2, #2
  40ad56:	3104      	adds	r1, #4
  40ad58:	4b19      	ldr	r3, [pc, #100]	; (40adc0 <lv_style_list_copy+0x104>)
  40ad5a:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40ad5c:	7923      	ldrb	r3, [r4, #4]
  40ad5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ad62:	3b01      	subs	r3, #1
  40ad64:	792a      	ldrb	r2, [r5, #4]
  40ad66:	f363 0205 	bfi	r2, r3, #0, #6
  40ad6a:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
  40ad6c:	4628      	mov	r0, r5
  40ad6e:	4d15      	ldr	r5, [pc, #84]	; (40adc4 <lv_style_list_copy+0x108>)
  40ad70:	47a8      	blx	r5
  40ad72:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
  40ad74:	4620      	mov	r0, r4
  40ad76:	47a8      	blx	r5
  40ad78:	4601      	mov	r1, r0
  40ad7a:	4630      	mov	r0, r6
  40ad7c:	4b12      	ldr	r3, [pc, #72]	; (40adc8 <lv_style_list_copy+0x10c>)
  40ad7e:	4798      	blx	r3
  40ad80:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40ad82:	7920      	ldrb	r0, [r4, #4]
  40ad84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40ad88:	3802      	subs	r0, #2
  40ad8a:	0080      	lsls	r0, r0, #2
  40ad8c:	4b0b      	ldr	r3, [pc, #44]	; (40adbc <lv_style_list_copy+0x100>)
  40ad8e:	4798      	blx	r3
  40ad90:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40ad92:	6821      	ldr	r1, [r4, #0]
  40ad94:	7922      	ldrb	r2, [r4, #4]
  40ad96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ad9a:	3a02      	subs	r2, #2
  40ad9c:	0092      	lsls	r2, r2, #2
  40ad9e:	3108      	adds	r1, #8
  40ada0:	4b07      	ldr	r3, [pc, #28]	; (40adc0 <lv_style_list_copy+0x104>)
  40ada2:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
  40ada4:	7923      	ldrb	r3, [r4, #4]
  40ada6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40adaa:	3b02      	subs	r3, #2
  40adac:	792a      	ldrb	r2, [r5, #4]
  40adae:	f363 0205 	bfi	r2, r3, #0, #6
  40adb2:	712a      	strb	r2, [r5, #4]
  40adb4:	e7da      	b.n	40ad6c <lv_style_list_copy+0xb0>
  40adb6:	bf00      	nop
  40adb8:	0040ac41 	.word	0x0040ac41
  40adbc:	004165bd 	.word	0x004165bd
  40adc0:	004167cd 	.word	0x004167cd
  40adc4:	00409f65 	.word	0x00409f65
  40adc8:	0040a055 	.word	0x0040a055

0040adcc <_lv_style_list_add_trans_style>:
{
  40adcc:	b538      	push	{r3, r4, r5, lr}
  40adce:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40add0:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40add4:	2b00      	cmp	r3, #0
  40add6:	db1c      	blt.n	40ae12 <_lv_style_list_add_trans_style+0x46>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
  40add8:	2004      	movs	r0, #4
  40adda:	4b13      	ldr	r3, [pc, #76]	; (40ae28 <_lv_style_list_add_trans_style+0x5c>)
  40addc:	4798      	blx	r3
  40adde:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
  40ade0:	4b12      	ldr	r3, [pc, #72]	; (40ae2c <_lv_style_list_add_trans_style+0x60>)
  40ade2:	4798      	blx	r3
  40ade4:	b1d0      	cbz	r0, 40ae1c <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
  40ade6:	b1bd      	cbz	r5, 40ae18 <_lv_style_list_add_trans_style+0x4c>
    lv_style_init(trans_style);
  40ade8:	4628      	mov	r0, r5
  40adea:	4b11      	ldr	r3, [pc, #68]	; (40ae30 <_lv_style_list_add_trans_style+0x64>)
  40adec:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
  40adee:	4629      	mov	r1, r5
  40adf0:	4620      	mov	r0, r4
  40adf2:	4b10      	ldr	r3, [pc, #64]	; (40ae34 <_lv_style_list_add_trans_style+0x68>)
  40adf4:	4798      	blx	r3
    list->has_trans = 1;
  40adf6:	7923      	ldrb	r3, [r4, #4]
  40adf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40adfc:	7123      	strb	r3, [r4, #4]
    if(list->has_local) {
  40adfe:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ae02:	d009      	beq.n	40ae18 <_lv_style_list_add_trans_style+0x4c>
        lv_style_t * tmp = list->style_list[0];
  40ae04:	6823      	ldr	r3, [r4, #0]
  40ae06:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
  40ae08:	6859      	ldr	r1, [r3, #4]
  40ae0a:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
  40ae0c:	6823      	ldr	r3, [r4, #0]
  40ae0e:	605a      	str	r2, [r3, #4]
  40ae10:	e002      	b.n	40ae18 <_lv_style_list_add_trans_style+0x4c>
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40ae12:	4b09      	ldr	r3, [pc, #36]	; (40ae38 <_lv_style_list_add_trans_style+0x6c>)
  40ae14:	4798      	blx	r3
  40ae16:	4605      	mov	r5, r0
}
  40ae18:	4628      	mov	r0, r5
  40ae1a:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(trans_style);
  40ae1c:	462a      	mov	r2, r5
  40ae1e:	2300      	movs	r3, #0
  40ae20:	4806      	ldr	r0, [pc, #24]	; (40ae3c <_lv_style_list_add_trans_style+0x70>)
  40ae22:	4907      	ldr	r1, [pc, #28]	; (40ae40 <_lv_style_list_add_trans_style+0x74>)
  40ae24:	4788      	blx	r1
  40ae26:	e7fe      	b.n	40ae26 <_lv_style_list_add_trans_style+0x5a>
  40ae28:	004165bd 	.word	0x004165bd
  40ae2c:	00415e79 	.word	0x00415e79
  40ae30:	00409dd1 	.word	0x00409dd1
  40ae34:	00409eb5 	.word	0x00409eb5
  40ae38:	0040ac2d 	.word	0x0040ac2d
  40ae3c:	0042c154 	.word	0x0042c154
  40ae40:	00415e85 	.word	0x00415e85

0040ae44 <_lv_style_list_set_local_int>:
{
  40ae44:	b538      	push	{r3, r4, r5, lr}
  40ae46:	460c      	mov	r4, r1
  40ae48:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40ae4a:	4b03      	ldr	r3, [pc, #12]	; (40ae58 <_lv_style_list_set_local_int+0x14>)
  40ae4c:	4798      	blx	r3
    _lv_style_set_int(local, prop, value);
  40ae4e:	462a      	mov	r2, r5
  40ae50:	4621      	mov	r1, r4
  40ae52:	4b02      	ldr	r3, [pc, #8]	; (40ae5c <_lv_style_list_set_local_int+0x18>)
  40ae54:	4798      	blx	r3
  40ae56:	bd38      	pop	{r3, r4, r5, pc}
  40ae58:	00409f65 	.word	0x00409f65
  40ae5c:	0040a1b9 	.word	0x0040a1b9

0040ae60 <_lv_style_list_set_local_opa>:
{
  40ae60:	b538      	push	{r3, r4, r5, lr}
  40ae62:	460c      	mov	r4, r1
  40ae64:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40ae66:	4b03      	ldr	r3, [pc, #12]	; (40ae74 <_lv_style_list_set_local_opa+0x14>)
  40ae68:	4798      	blx	r3
    _lv_style_set_opa(local, prop, value);
  40ae6a:	462a      	mov	r2, r5
  40ae6c:	4621      	mov	r1, r4
  40ae6e:	4b02      	ldr	r3, [pc, #8]	; (40ae78 <_lv_style_list_set_local_opa+0x18>)
  40ae70:	4798      	blx	r3
  40ae72:	bd38      	pop	{r3, r4, r5, pc}
  40ae74:	00409f65 	.word	0x00409f65
  40ae78:	0040a4d9 	.word	0x0040a4d9

0040ae7c <_lv_style_list_set_local_color>:
{
  40ae7c:	b538      	push	{r3, r4, r5, lr}
  40ae7e:	460c      	mov	r4, r1
  40ae80:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40ae82:	4b03      	ldr	r3, [pc, #12]	; (40ae90 <_lv_style_list_set_local_color+0x14>)
  40ae84:	4798      	blx	r3
    _lv_style_set_color(local, prop, value);
  40ae86:	462a      	mov	r2, r5
  40ae88:	4621      	mov	r1, r4
  40ae8a:	4b02      	ldr	r3, [pc, #8]	; (40ae94 <_lv_style_list_set_local_color+0x18>)
  40ae8c:	4798      	blx	r3
  40ae8e:	bd38      	pop	{r3, r4, r5, pc}
  40ae90:	00409f65 	.word	0x00409f65
  40ae94:	0040a349 	.word	0x0040a349

0040ae98 <_lv_style_list_set_local_ptr>:
{
  40ae98:	b538      	push	{r3, r4, r5, lr}
  40ae9a:	460c      	mov	r4, r1
  40ae9c:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40ae9e:	4b03      	ldr	r3, [pc, #12]	; (40aeac <_lv_style_list_set_local_ptr+0x14>)
  40aea0:	4798      	blx	r3
    _lv_style_set_ptr(local, prop, value);
  40aea2:	462a      	mov	r2, r5
  40aea4:	4621      	mov	r1, r4
  40aea6:	4b02      	ldr	r3, [pc, #8]	; (40aeb0 <_lv_style_list_set_local_ptr+0x18>)
  40aea8:	4798      	blx	r3
  40aeaa:	bd38      	pop	{r3, r4, r5, pc}
  40aeac:	00409f65 	.word	0x00409f65
  40aeb0:	0040a669 	.word	0x0040a669

0040aeb4 <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
  40aeb4:	2800      	cmp	r0, #0
  40aeb6:	d05e      	beq.n	40af76 <_lv_style_list_get_int+0xc2>
{
  40aeb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40aebc:	b083      	sub	sp, #12
  40aebe:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40aec0:	6803      	ldr	r3, [r0, #0]
  40aec2:	2b00      	cmp	r3, #0
  40aec4:	d059      	beq.n	40af7a <_lv_style_list_get_int+0xc6>
  40aec6:	4691      	mov	r9, r2
  40aec8:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40aeca:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
  40aece:	2400      	movs	r4, #0
  40aed0:	f8ad 4006 	strh.w	r4, [sp, #6]
    int16_t weight = -1;
  40aed4:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40aed8:	e017      	b.n	40af0a <_lv_style_list_get_int+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40aeda:	3101      	adds	r1, #1
  40aedc:	b2c9      	uxtb	r1, r1
  40aede:	e020      	b.n	40af22 <_lv_style_list_get_int+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40aee0:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
  40aee2:	f10d 0206 	add.w	r2, sp, #6
  40aee6:	4639      	mov	r1, r7
  40aee8:	4b26      	ldr	r3, [pc, #152]	; (40af84 <_lv_style_list_get_int+0xd0>)
  40aeea:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40aeec:	4580      	cmp	r8, r0
  40aeee:	d024      	beq.n	40af3a <_lv_style_list_get_int+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40aef0:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40aef4:	2b00      	cmp	r3, #0
  40aef6:	db28      	blt.n	40af4a <_lv_style_list_get_int+0x96>
        else if(weight_act > weight) {
  40aef8:	4286      	cmp	r6, r0
  40aefa:	da04      	bge.n	40af06 <_lv_style_list_get_int+0x52>
            *res = value_act;
  40aefc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40af00:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40af04:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40af06:	3401      	adds	r4, #1
  40af08:	b224      	sxth	r4, r4
  40af0a:	792b      	ldrb	r3, [r5, #4]
  40af0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40af10:	429c      	cmp	r4, r3
  40af12:	da2c      	bge.n	40af6e <_lv_style_list_get_int+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40af14:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40af16:	88aa      	ldrh	r2, [r5, #4]
  40af18:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40af1c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40af20:	d0db      	beq.n	40aeda <_lv_style_list_get_int+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40af22:	792a      	ldrb	r2, [r5, #4]
  40af24:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40af28:	d0da      	beq.n	40aee0 <_lv_style_list_get_int+0x2c>
  40af2a:	428b      	cmp	r3, r1
  40af2c:	dd03      	ble.n	40af36 <_lv_style_list_get_int+0x82>
    return list->style_list[id];
  40af2e:	682b      	ldr	r3, [r5, #0]
  40af30:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40af34:	e7d5      	b.n	40aee2 <_lv_style_list_get_int+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40af36:	2000      	movs	r0, #0
  40af38:	e7d3      	b.n	40aee2 <_lv_style_list_get_int+0x2e>
            *res = value_act;
  40af3a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40af3e:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40af42:	2001      	movs	r0, #1
}
  40af44:	b003      	add	sp, #12
  40af46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40af4a:	fab4 f384 	clz	r3, r4
  40af4e:	095b      	lsrs	r3, r3, #5
  40af50:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40af54:	d1d0      	bne.n	40aef8 <_lv_style_list_get_int+0x44>
  40af56:	2b00      	cmp	r3, #0
  40af58:	d0ce      	beq.n	40aef8 <_lv_style_list_get_int+0x44>
  40af5a:	796b      	ldrb	r3, [r5, #5]
  40af5c:	f013 0f01 	tst.w	r3, #1
  40af60:	d1ca      	bne.n	40aef8 <_lv_style_list_get_int+0x44>
            *res = value_act;
  40af62:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40af66:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40af6a:	2001      	movs	r0, #1
  40af6c:	e7ea      	b.n	40af44 <_lv_style_list_get_int+0x90>
    if(weight >= 0) return LV_RES_OK;
  40af6e:	2e00      	cmp	r6, #0
  40af70:	db05      	blt.n	40af7e <_lv_style_list_get_int+0xca>
  40af72:	2001      	movs	r0, #1
  40af74:	e7e6      	b.n	40af44 <_lv_style_list_get_int+0x90>
    if(list == NULL) return LV_RES_INV;
  40af76:	2000      	movs	r0, #0
  40af78:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40af7a:	2000      	movs	r0, #0
  40af7c:	e7e2      	b.n	40af44 <_lv_style_list_get_int+0x90>
    else return LV_RES_INV;
  40af7e:	2000      	movs	r0, #0
  40af80:	e7e0      	b.n	40af44 <_lv_style_list_get_int+0x90>
  40af82:	bf00      	nop
  40af84:	0040a7f9 	.word	0x0040a7f9

0040af88 <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
  40af88:	2800      	cmp	r0, #0
  40af8a:	d05d      	beq.n	40b048 <_lv_style_list_get_color+0xc0>
{
  40af8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40af90:	b083      	sub	sp, #12
  40af92:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40af94:	6803      	ldr	r3, [r0, #0]
  40af96:	2b00      	cmp	r3, #0
  40af98:	d058      	beq.n	40b04c <_lv_style_list_get_color+0xc4>
  40af9a:	4691      	mov	r9, r2
  40af9c:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40af9e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    value_act.full = 0;
  40afa2:	2400      	movs	r4, #0
  40afa4:	f8ad 4004 	strh.w	r4, [sp, #4]
    int16_t weight = -1;
  40afa8:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40afac:	e016      	b.n	40afdc <_lv_style_list_get_color+0x54>
    if(list->has_trans && list->skip_trans) id++;
  40afae:	3101      	adds	r1, #1
  40afb0:	b2c9      	uxtb	r1, r1
  40afb2:	e01f      	b.n	40aff4 <_lv_style_list_get_color+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40afb4:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
  40afb6:	aa01      	add	r2, sp, #4
  40afb8:	4639      	mov	r1, r7
  40afba:	4b26      	ldr	r3, [pc, #152]	; (40b054 <_lv_style_list_get_color+0xcc>)
  40afbc:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40afbe:	4580      	cmp	r8, r0
  40afc0:	d024      	beq.n	40b00c <_lv_style_list_get_color+0x84>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40afc2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40afc6:	2b00      	cmp	r3, #0
  40afc8:	db28      	blt.n	40b01c <_lv_style_list_get_color+0x94>
        else if(weight_act > weight) {
  40afca:	4286      	cmp	r6, r0
  40afcc:	da04      	bge.n	40afd8 <_lv_style_list_get_color+0x50>
            *res = value_act;
  40afce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40afd2:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40afd6:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40afd8:	3401      	adds	r4, #1
  40afda:	b224      	sxth	r4, r4
  40afdc:	792b      	ldrb	r3, [r5, #4]
  40afde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40afe2:	429c      	cmp	r4, r3
  40afe4:	da2c      	bge.n	40b040 <_lv_style_list_get_color+0xb8>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40afe6:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40afe8:	88aa      	ldrh	r2, [r5, #4]
  40afea:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40afee:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40aff2:	d0dc      	beq.n	40afae <_lv_style_list_get_color+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40aff4:	792a      	ldrb	r2, [r5, #4]
  40aff6:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40affa:	d0db      	beq.n	40afb4 <_lv_style_list_get_color+0x2c>
  40affc:	428b      	cmp	r3, r1
  40affe:	dd03      	ble.n	40b008 <_lv_style_list_get_color+0x80>
    return list->style_list[id];
  40b000:	682b      	ldr	r3, [r5, #0]
  40b002:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40b006:	e7d6      	b.n	40afb6 <_lv_style_list_get_color+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b008:	2000      	movs	r0, #0
  40b00a:	e7d4      	b.n	40afb6 <_lv_style_list_get_color+0x2e>
            *res = value_act;
  40b00c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40b010:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40b014:	2001      	movs	r0, #1
}
  40b016:	b003      	add	sp, #12
  40b018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b01c:	fab4 f384 	clz	r3, r4
  40b020:	095b      	lsrs	r3, r3, #5
  40b022:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40b026:	d1d0      	bne.n	40afca <_lv_style_list_get_color+0x42>
  40b028:	2b00      	cmp	r3, #0
  40b02a:	d0ce      	beq.n	40afca <_lv_style_list_get_color+0x42>
  40b02c:	796b      	ldrb	r3, [r5, #5]
  40b02e:	f013 0f01 	tst.w	r3, #1
  40b032:	d1ca      	bne.n	40afca <_lv_style_list_get_color+0x42>
            *res = value_act;
  40b034:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40b038:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40b03c:	2001      	movs	r0, #1
  40b03e:	e7ea      	b.n	40b016 <_lv_style_list_get_color+0x8e>
    if(weight >= 0)  return LV_RES_OK;
  40b040:	2e00      	cmp	r6, #0
  40b042:	db05      	blt.n	40b050 <_lv_style_list_get_color+0xc8>
  40b044:	2001      	movs	r0, #1
  40b046:	e7e6      	b.n	40b016 <_lv_style_list_get_color+0x8e>
    if(list == NULL) return LV_RES_INV;
  40b048:	2000      	movs	r0, #0
  40b04a:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40b04c:	2000      	movs	r0, #0
  40b04e:	e7e2      	b.n	40b016 <_lv_style_list_get_color+0x8e>
    else return LV_RES_INV;
  40b050:	2000      	movs	r0, #0
  40b052:	e7e0      	b.n	40b016 <_lv_style_list_get_color+0x8e>
  40b054:	0040aa03 	.word	0x0040aa03

0040b058 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
  40b058:	2800      	cmp	r0, #0
  40b05a:	d05e      	beq.n	40b11a <_lv_style_list_get_opa+0xc2>
{
  40b05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40b060:	b083      	sub	sp, #12
  40b062:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40b064:	6803      	ldr	r3, [r0, #0]
  40b066:	2b00      	cmp	r3, #0
  40b068:	d059      	beq.n	40b11e <_lv_style_list_get_opa+0xc6>
  40b06a:	4691      	mov	r9, r2
  40b06c:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40b06e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
  40b072:	2400      	movs	r4, #0
  40b074:	f88d 4007 	strb.w	r4, [sp, #7]
    int16_t weight = -1;
  40b078:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b07c:	e017      	b.n	40b0ae <_lv_style_list_get_opa+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40b07e:	3101      	adds	r1, #1
  40b080:	b2c9      	uxtb	r1, r1
  40b082:	e020      	b.n	40b0c6 <_lv_style_list_get_opa+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b084:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
  40b086:	f10d 0207 	add.w	r2, sp, #7
  40b08a:	4639      	mov	r1, r7
  40b08c:	4b26      	ldr	r3, [pc, #152]	; (40b128 <_lv_style_list_get_opa+0xd0>)
  40b08e:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40b090:	4580      	cmp	r8, r0
  40b092:	d024      	beq.n	40b0de <_lv_style_list_get_opa+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b094:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40b098:	2b00      	cmp	r3, #0
  40b09a:	db28      	blt.n	40b0ee <_lv_style_list_get_opa+0x96>
        else if(weight_act > weight) {
  40b09c:	4286      	cmp	r6, r0
  40b09e:	da04      	bge.n	40b0aa <_lv_style_list_get_opa+0x52>
            *res = value_act;
  40b0a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40b0a4:	f889 3000 	strb.w	r3, [r9]
            weight =  weight_act;
  40b0a8:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b0aa:	3401      	adds	r4, #1
  40b0ac:	b224      	sxth	r4, r4
  40b0ae:	792b      	ldrb	r3, [r5, #4]
  40b0b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40b0b4:	429c      	cmp	r4, r3
  40b0b6:	da2c      	bge.n	40b112 <_lv_style_list_get_opa+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40b0b8:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40b0ba:	88aa      	ldrh	r2, [r5, #4]
  40b0bc:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40b0c0:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40b0c4:	d0db      	beq.n	40b07e <_lv_style_list_get_opa+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b0c6:	792a      	ldrb	r2, [r5, #4]
  40b0c8:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40b0cc:	d0da      	beq.n	40b084 <_lv_style_list_get_opa+0x2c>
  40b0ce:	428b      	cmp	r3, r1
  40b0d0:	dd03      	ble.n	40b0da <_lv_style_list_get_opa+0x82>
    return list->style_list[id];
  40b0d2:	682b      	ldr	r3, [r5, #0]
  40b0d4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40b0d8:	e7d5      	b.n	40b086 <_lv_style_list_get_opa+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b0da:	2000      	movs	r0, #0
  40b0dc:	e7d3      	b.n	40b086 <_lv_style_list_get_opa+0x2e>
            *res = value_act;
  40b0de:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40b0e2:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40b0e6:	2001      	movs	r0, #1
}
  40b0e8:	b003      	add	sp, #12
  40b0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b0ee:	fab4 f384 	clz	r3, r4
  40b0f2:	095b      	lsrs	r3, r3, #5
  40b0f4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40b0f8:	d1d0      	bne.n	40b09c <_lv_style_list_get_opa+0x44>
  40b0fa:	2b00      	cmp	r3, #0
  40b0fc:	d0ce      	beq.n	40b09c <_lv_style_list_get_opa+0x44>
  40b0fe:	796b      	ldrb	r3, [r5, #5]
  40b100:	f013 0f01 	tst.w	r3, #1
  40b104:	d1ca      	bne.n	40b09c <_lv_style_list_get_opa+0x44>
            *res = value_act;
  40b106:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40b10a:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40b10e:	2001      	movs	r0, #1
  40b110:	e7ea      	b.n	40b0e8 <_lv_style_list_get_opa+0x90>
    if(weight >= 0)  return LV_RES_OK;
  40b112:	2e00      	cmp	r6, #0
  40b114:	db05      	blt.n	40b122 <_lv_style_list_get_opa+0xca>
  40b116:	2001      	movs	r0, #1
  40b118:	e7e6      	b.n	40b0e8 <_lv_style_list_get_opa+0x90>
    if(list == NULL) return LV_RES_INV;
  40b11a:	2000      	movs	r0, #0
  40b11c:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40b11e:	2000      	movs	r0, #0
  40b120:	e7e2      	b.n	40b0e8 <_lv_style_list_get_opa+0x90>
    else return LV_RES_INV;
  40b122:	2000      	movs	r0, #0
  40b124:	e7e0      	b.n	40b0e8 <_lv_style_list_get_opa+0x90>
  40b126:	bf00      	nop
  40b128:	0040a8ff 	.word	0x0040a8ff

0040b12c <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
  40b12c:	2800      	cmp	r0, #0
  40b12e:	d058      	beq.n	40b1e2 <_lv_style_list_get_ptr+0xb6>
{
  40b130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40b134:	b083      	sub	sp, #12
  40b136:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40b138:	6803      	ldr	r3, [r0, #0]
  40b13a:	2b00      	cmp	r3, #0
  40b13c:	d053      	beq.n	40b1e6 <_lv_style_list_get_ptr+0xba>
  40b13e:	4691      	mov	r9, r2
  40b140:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40b142:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b146:	2400      	movs	r4, #0
    int16_t weight = -1;
  40b148:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b14c:	e015      	b.n	40b17a <_lv_style_list_get_ptr+0x4e>
    if(list->has_trans && list->skip_trans) id++;
  40b14e:	3101      	adds	r1, #1
  40b150:	b2c9      	uxtb	r1, r1
  40b152:	e01e      	b.n	40b192 <_lv_style_list_get_ptr+0x66>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b154:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
  40b156:	aa01      	add	r2, sp, #4
  40b158:	4639      	mov	r1, r7
  40b15a:	4b25      	ldr	r3, [pc, #148]	; (40b1f0 <_lv_style_list_get_ptr+0xc4>)
  40b15c:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40b15e:	4580      	cmp	r8, r0
  40b160:	d023      	beq.n	40b1aa <_lv_style_list_get_ptr+0x7e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b162:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40b166:	2b00      	cmp	r3, #0
  40b168:	db26      	blt.n	40b1b8 <_lv_style_list_get_ptr+0x8c>
        else if(weight_act > weight) {
  40b16a:	4286      	cmp	r6, r0
  40b16c:	da03      	bge.n	40b176 <_lv_style_list_get_ptr+0x4a>
            *res = value_act;
  40b16e:	9b01      	ldr	r3, [sp, #4]
  40b170:	f8c9 3000 	str.w	r3, [r9]
            weight =  weight_act;
  40b174:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b176:	3401      	adds	r4, #1
  40b178:	b224      	sxth	r4, r4
  40b17a:	792b      	ldrb	r3, [r5, #4]
  40b17c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40b180:	429c      	cmp	r4, r3
  40b182:	da2a      	bge.n	40b1da <_lv_style_list_get_ptr+0xae>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40b184:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40b186:	88aa      	ldrh	r2, [r5, #4]
  40b188:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40b18c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40b190:	d0dd      	beq.n	40b14e <_lv_style_list_get_ptr+0x22>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b192:	792a      	ldrb	r2, [r5, #4]
  40b194:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40b198:	d0dc      	beq.n	40b154 <_lv_style_list_get_ptr+0x28>
  40b19a:	428b      	cmp	r3, r1
  40b19c:	dd03      	ble.n	40b1a6 <_lv_style_list_get_ptr+0x7a>
    return list->style_list[id];
  40b19e:	682b      	ldr	r3, [r5, #0]
  40b1a0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40b1a4:	e7d7      	b.n	40b156 <_lv_style_list_get_ptr+0x2a>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b1a6:	2000      	movs	r0, #0
  40b1a8:	e7d5      	b.n	40b156 <_lv_style_list_get_ptr+0x2a>
            *res = value_act;
  40b1aa:	9b01      	ldr	r3, [sp, #4]
  40b1ac:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40b1b0:	2001      	movs	r0, #1
}
  40b1b2:	b003      	add	sp, #12
  40b1b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b1b8:	fab4 f384 	clz	r3, r4
  40b1bc:	095b      	lsrs	r3, r3, #5
  40b1be:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40b1c2:	d1d2      	bne.n	40b16a <_lv_style_list_get_ptr+0x3e>
  40b1c4:	2b00      	cmp	r3, #0
  40b1c6:	d0d0      	beq.n	40b16a <_lv_style_list_get_ptr+0x3e>
  40b1c8:	796b      	ldrb	r3, [r5, #5]
  40b1ca:	f013 0f01 	tst.w	r3, #1
  40b1ce:	d1cc      	bne.n	40b16a <_lv_style_list_get_ptr+0x3e>
            *res = value_act;
  40b1d0:	9b01      	ldr	r3, [sp, #4]
  40b1d2:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40b1d6:	2001      	movs	r0, #1
  40b1d8:	e7eb      	b.n	40b1b2 <_lv_style_list_get_ptr+0x86>
    if(weight >= 0)  return LV_RES_OK;
  40b1da:	2e00      	cmp	r6, #0
  40b1dc:	db05      	blt.n	40b1ea <_lv_style_list_get_ptr+0xbe>
  40b1de:	2001      	movs	r0, #1
  40b1e0:	e7e7      	b.n	40b1b2 <_lv_style_list_get_ptr+0x86>
    if(list == NULL) return LV_RES_INV;
  40b1e2:	2000      	movs	r0, #0
  40b1e4:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40b1e6:	2000      	movs	r0, #0
  40b1e8:	e7e3      	b.n	40b1b2 <_lv_style_list_get_ptr+0x86>
    else return LV_RES_INV;
  40b1ea:	2000      	movs	r0, #0
  40b1ec:	e7e1      	b.n	40b1b2 <_lv_style_list_get_ptr+0x86>
  40b1ee:	bf00      	nop
  40b1f0:	0040ab09 	.word	0x0040ab09

0040b1f4 <map_blended>:
}
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
  40b1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b1f8:	b085      	sub	sp, #20
  40b1fa:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
  40b1fe:	9400      	str	r4, [sp, #0]
  40b200:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b204:	8884      	ldrh	r4, [r0, #4]
  40b206:	f9b0 c000 	ldrsh.w	ip, [r0]
  40b20a:	fa1f f58c 	uxth.w	r5, ip
  40b20e:	1b64      	subs	r4, r4, r5
  40b210:	b2a4      	uxth	r4, r4
  40b212:	3401      	adds	r4, #1
  40b214:	b224      	sxth	r4, r4
  40b216:	9402      	str	r4, [sp, #8]
  40b218:	8895      	ldrh	r5, [r2, #4]
  40b21a:	f9b2 4000 	ldrsh.w	r4, [r2]
  40b21e:	b2a6      	uxth	r6, r4
  40b220:	1bad      	subs	r5, r5, r6
  40b222:	b2ad      	uxth	r5, r5
  40b224:	3501      	adds	r5, #1
  40b226:	b22e      	sxth	r6, r5
  40b228:	9603      	str	r6, [sp, #12]
  40b22a:	889d      	ldrh	r5, [r3, #4]
  40b22c:	f9b3 e000 	ldrsh.w	lr, [r3]
  40b230:	fa1f f68e 	uxth.w	r6, lr
  40b234:	1bad      	subs	r5, r5, r6
  40b236:	b2ad      	uxth	r5, r5
  40b238:	3501      	adds	r5, #1
  40b23a:	b22e      	sxth	r6, r5
  40b23c:	9601      	str	r6, [sp, #4]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40b23e:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40b242:	9d02      	ldr	r5, [sp, #8]
  40b244:	fb0b f605 	mul.w	r6, fp, r5
  40b248:	eb01 0646 	add.w	r6, r1, r6, lsl #1

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b24c:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40b250:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40b254:	1aed      	subs	r5, r5, r3
  40b256:	ebab 0505 	sub.w	r5, fp, r5
  40b25a:	9b01      	ldr	r3, [sp, #4]
  40b25c:	fb05 f503 	mul.w	r5, r5, r3
  40b260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b262:	eb03 0545 	add.w	r5, r3, r5, lsl #1

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
  40b266:	2f01      	cmp	r7, #1
  40b268:	d004      	beq.n	40b274 <map_blended+0x80>
  40b26a:	2f02      	cmp	r7, #2
  40b26c:	d00f      	beq.n	40b28e <map_blended+0x9a>
            disp_buf_tmp += disp_w;
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
  40b26e:	b005      	add	sp, #20
  40b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40b274:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 40b338 <map_blended+0x144>
  40b278:	4617      	mov	r7, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b27a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40b27e:	2b01      	cmp	r3, #1
  40b280:	d008      	beq.n	40b294 <map_blended+0xa0>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b282:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b284:	eba3 0904 	sub.w	r9, r3, r4
        map_buf_tmp -= draw_area->x1;
  40b288:	eba5 0844 	sub.w	r8, r5, r4, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b28c:	e04d      	b.n	40b32a <map_blended+0x136>
            blend_fp = color_blend_true_color_subtractive;
  40b28e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 40b33c <map_blended+0x148>
  40b292:	e7f1      	b.n	40b278 <map_blended+0x84>
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b294:	ebae 030c 	sub.w	r3, lr, ip
  40b298:	1ae3      	subs	r3, r4, r3
        map_buf_tmp -= draw_area->x1;
  40b29a:	0064      	lsls	r4, r4, #1
  40b29c:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
  40b2a0:	441d      	add	r5, r3
  40b2a2:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40b2a6:	f8dd 8000 	ldr.w	r8, [sp]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b2aa:	e013      	b.n	40b2d4 <map_blended+0xe0>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
  40b2ac:	4642      	mov	r2, r8
  40b2ae:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
  40b2b2:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
  40b2b6:	47d0      	blx	sl
  40b2b8:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b2bc:	3401      	adds	r4, #1
  40b2be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40b2c2:	429c      	cmp	r4, r3
  40b2c4:	ddf2      	ble.n	40b2ac <map_blended+0xb8>
            disp_buf_tmp += disp_w;
  40b2c6:	eb06 0649 	add.w	r6, r6, r9, lsl #1
            map_buf_tmp += map_w;
  40b2ca:	9b01      	ldr	r3, [sp, #4]
  40b2cc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b2d0:	f10b 0b01 	add.w	fp, fp, #1
  40b2d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40b2d8:	459b      	cmp	fp, r3
  40b2da:	dcc8      	bgt.n	40b26e <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b2dc:	f9b7 4000 	ldrsh.w	r4, [r7]
  40b2e0:	e7ed      	b.n	40b2be <map_blended+0xca>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40b2e2:	9a00      	ldr	r2, [sp, #0]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
  40b2e4:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
  40b2e8:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
  40b2ec:	47d0      	blx	sl
  40b2ee:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b2f2:	3401      	adds	r4, #1
  40b2f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40b2f8:	429c      	cmp	r4, r3
  40b2fa:	dc0c      	bgt.n	40b316 <map_blended+0x122>
                if(mask_tmp[x] == 0) continue;
  40b2fc:	4625      	mov	r5, r4
  40b2fe:	f819 2004 	ldrb.w	r2, [r9, r4]
  40b302:	2a00      	cmp	r2, #0
  40b304:	d0f5      	beq.n	40b2f2 <map_blended+0xfe>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40b306:	2afc      	cmp	r2, #252	; 0xfc
  40b308:	d8eb      	bhi.n	40b2e2 <map_blended+0xee>
  40b30a:	9b00      	ldr	r3, [sp, #0]
  40b30c:	fb02 f203 	mul.w	r2, r2, r3
  40b310:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40b314:	e7e6      	b.n	40b2e4 <map_blended+0xf0>
            disp_buf_tmp += disp_w;
  40b316:	9b02      	ldr	r3, [sp, #8]
  40b318:	eb06 0643 	add.w	r6, r6, r3, lsl #1
            mask_tmp += draw_area_w;
  40b31c:	9b03      	ldr	r3, [sp, #12]
  40b31e:	4499      	add	r9, r3
            map_buf_tmp += map_w;
  40b320:	9b01      	ldr	r3, [sp, #4]
  40b322:	eb08 0843 	add.w	r8, r8, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b326:	f10b 0b01 	add.w	fp, fp, #1
  40b32a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40b32e:	459b      	cmp	fp, r3
  40b330:	dc9d      	bgt.n	40b26e <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b332:	f9b7 4000 	ldrsh.w	r4, [r7]
  40b336:	e7dd      	b.n	40b2f4 <map_blended+0x100>
  40b338:	0040c501 	.word	0x0040c501
  40b33c:	0040c5ef 	.word	0x0040c5ef

0040b340 <fill_set_px>:
{
  40b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b344:	b089      	sub	sp, #36	; 0x24
  40b346:	4604      	mov	r4, r0
  40b348:	9106      	str	r1, [sp, #24]
  40b34a:	4615      	mov	r5, r2
  40b34c:	4698      	mov	r8, r3
  40b34e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b352:	4b33      	ldr	r3, [pc, #204]	; (40b420 <fill_set_px+0xe0>)
  40b354:	4798      	blx	r3
  40b356:	4606      	mov	r6, r0
  40b358:	88a3      	ldrh	r3, [r4, #4]
  40b35a:	8822      	ldrh	r2, [r4, #0]
  40b35c:	1a9b      	subs	r3, r3, r2
  40b35e:	b29b      	uxth	r3, r3
  40b360:	3301      	adds	r3, #1
  40b362:	b21b      	sxth	r3, r3
  40b364:	9305      	str	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b366:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  40b36a:	2b01      	cmp	r3, #1
  40b36c:	d00d      	beq.n	40b38a <fill_set_px+0x4a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b36e:	f9b5 2000 	ldrsh.w	r2, [r5]
  40b372:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40b374:	1abf      	subs	r7, r7, r2
  40b376:	88ab      	ldrh	r3, [r5, #4]
  40b378:	b292      	uxth	r2, r2
  40b37a:	1a9b      	subs	r3, r3, r2
  40b37c:	b29b      	uxth	r3, r3
  40b37e:	3301      	adds	r3, #1
  40b380:	b21b      	sxth	r3, r3
  40b382:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b384:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40b388:	e03f      	b.n	40b40a <fill_set_px+0xca>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b38a:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40b38e:	f8dd b018 	ldr.w	fp, [sp, #24]
  40b392:	e014      	b.n	40b3be <fill_set_px+0x7e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
  40b394:	f8d6 9014 	ldr.w	r9, [r6, #20]
  40b398:	9702      	str	r7, [sp, #8]
  40b39a:	f8ad 8004 	strh.w	r8, [sp, #4]
  40b39e:	fa0f f38a 	sxth.w	r3, sl
  40b3a2:	9300      	str	r3, [sp, #0]
  40b3a4:	b223      	sxth	r3, r4
  40b3a6:	9a05      	ldr	r2, [sp, #20]
  40b3a8:	4659      	mov	r1, fp
  40b3aa:	4630      	mov	r0, r6
  40b3ac:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b3ae:	3401      	adds	r4, #1
  40b3b0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b3b4:	429c      	cmp	r4, r3
  40b3b6:	dded      	ble.n	40b394 <fill_set_px+0x54>
  40b3b8:	46b9      	mov	r9, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b3ba:	f10a 0a01 	add.w	sl, sl, #1
  40b3be:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b3c2:	459a      	cmp	sl, r3
  40b3c4:	dc28      	bgt.n	40b418 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b3c6:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b3ca:	464f      	mov	r7, r9
  40b3cc:	e7f0      	b.n	40b3b0 <fill_set_px+0x70>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b3ce:	3401      	adds	r4, #1
  40b3d0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b3d4:	429c      	cmp	r4, r3
  40b3d6:	dc14      	bgt.n	40b402 <fill_set_px+0xc2>
                if(mask_tmp[x]) {
  40b3d8:	5d3b      	ldrb	r3, [r7, r4]
  40b3da:	2b00      	cmp	r3, #0
  40b3dc:	d0f7      	beq.n	40b3ce <fill_set_px+0x8e>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40b3de:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40b3e2:	fb03 f309 	mul.w	r3, r3, r9
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40b3e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b3ea:	9302      	str	r3, [sp, #8]
  40b3ec:	f8ad 8004 	strh.w	r8, [sp, #4]
  40b3f0:	fa0f f38a 	sxth.w	r3, sl
  40b3f4:	9300      	str	r3, [sp, #0]
  40b3f6:	b223      	sxth	r3, r4
  40b3f8:	9a05      	ldr	r2, [sp, #20]
  40b3fa:	9906      	ldr	r1, [sp, #24]
  40b3fc:	4630      	mov	r0, r6
  40b3fe:	47d8      	blx	fp
  40b400:	e7e5      	b.n	40b3ce <fill_set_px+0x8e>
            mask_tmp += draw_area_w;
  40b402:	9b07      	ldr	r3, [sp, #28]
  40b404:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b406:	f10a 0a01 	add.w	sl, sl, #1
  40b40a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b40e:	459a      	cmp	sl, r3
  40b410:	dc02      	bgt.n	40b418 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b412:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b416:	e7db      	b.n	40b3d0 <fill_set_px+0x90>
}
  40b418:	b009      	add	sp, #36	; 0x24
  40b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b41e:	bf00      	nop
  40b420:	004097a1 	.word	0x004097a1

0040b424 <map_set_px>:
{
  40b424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b428:	b089      	sub	sp, #36	; 0x24
  40b42a:	4604      	mov	r4, r0
  40b42c:	9105      	str	r1, [sp, #20]
  40b42e:	4615      	mov	r5, r2
  40b430:	461f      	mov	r7, r3
  40b432:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b436:	4b48      	ldr	r3, [pc, #288]	; (40b558 <map_set_px+0x134>)
  40b438:	4798      	blx	r3
  40b43a:	4606      	mov	r6, r0
  40b43c:	88a3      	ldrh	r3, [r4, #4]
  40b43e:	f9b4 9000 	ldrsh.w	r9, [r4]
  40b442:	fa1f f289 	uxth.w	r2, r9
  40b446:	1a9b      	subs	r3, r3, r2
  40b448:	b29b      	uxth	r3, r3
  40b44a:	3301      	adds	r3, #1
  40b44c:	b21b      	sxth	r3, r3
  40b44e:	9304      	str	r3, [sp, #16]
  40b450:	88ab      	ldrh	r3, [r5, #4]
  40b452:	f9b5 2000 	ldrsh.w	r2, [r5]
  40b456:	b291      	uxth	r1, r2
  40b458:	1a5b      	subs	r3, r3, r1
  40b45a:	b29b      	uxth	r3, r3
  40b45c:	3301      	adds	r3, #1
  40b45e:	b21b      	sxth	r3, r3
  40b460:	9307      	str	r3, [sp, #28]
  40b462:	88b9      	ldrh	r1, [r7, #4]
  40b464:	f9b7 3000 	ldrsh.w	r3, [r7]
  40b468:	b298      	uxth	r0, r3
  40b46a:	1a09      	subs	r1, r1, r0
  40b46c:	b289      	uxth	r1, r1
  40b46e:	3101      	adds	r1, #1
  40b470:	b209      	sxth	r1, r1
  40b472:	9106      	str	r1, [sp, #24]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b474:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
  40b478:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
  40b47c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40b480:	1a09      	subs	r1, r1, r0
  40b482:	eba8 0101 	sub.w	r1, r8, r1
  40b486:	9806      	ldr	r0, [sp, #24]
  40b488:	fb01 f100 	mul.w	r1, r1, r0
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b48c:	eba3 0909 	sub.w	r9, r3, r9
  40b490:	eba2 0909 	sub.w	r9, r2, r9
  40b494:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_tmp -= draw_area->x1;
  40b498:	eb09 0941 	add.w	r9, r9, r1, lsl #1
  40b49c:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
  40b4a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b4a2:	4499      	add	r9, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b4a4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  40b4a8:	2b01      	cmp	r3, #1
  40b4aa:	d024      	beq.n	40b4f6 <map_set_px+0xd2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b4ac:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40b4ae:	1abf      	subs	r7, r7, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b4b0:	e047      	b.n	40b542 <map_set_px+0x11e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
  40b4b2:	f8d6 a014 	ldr.w	sl, [r6, #20]
  40b4b6:	9702      	str	r7, [sp, #8]
  40b4b8:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40b4bc:	f8ad 3004 	strh.w	r3, [sp, #4]
  40b4c0:	fa0f f388 	sxth.w	r3, r8
  40b4c4:	9300      	str	r3, [sp, #0]
  40b4c6:	b223      	sxth	r3, r4
  40b4c8:	9a04      	ldr	r2, [sp, #16]
  40b4ca:	4659      	mov	r1, fp
  40b4cc:	4630      	mov	r0, r6
  40b4ce:	47d0      	blx	sl
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b4d0:	3401      	adds	r4, #1
  40b4d2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b4d6:	429c      	cmp	r4, r3
  40b4d8:	ddeb      	ble.n	40b4b2 <map_set_px+0x8e>
  40b4da:	46ba      	mov	sl, r7
            map_buf_tmp += map_w;
  40b4dc:	9b06      	ldr	r3, [sp, #24]
  40b4de:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b4e2:	f108 0801 	add.w	r8, r8, #1
  40b4e6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b4ea:	4598      	cmp	r8, r3
  40b4ec:	dc30      	bgt.n	40b550 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b4ee:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b4f2:	4657      	mov	r7, sl
  40b4f4:	e7ed      	b.n	40b4d2 <map_set_px+0xae>
  40b4f6:	f8dd b014 	ldr.w	fp, [sp, #20]
  40b4fa:	e7f4      	b.n	40b4e6 <map_set_px+0xc2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b4fc:	3401      	adds	r4, #1
  40b4fe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b502:	429c      	cmp	r4, r3
  40b504:	dc16      	bgt.n	40b534 <map_set_px+0x110>
                if(mask_tmp[x]) {
  40b506:	5d3b      	ldrb	r3, [r7, r4]
  40b508:	2b00      	cmp	r3, #0
  40b50a:	d0f7      	beq.n	40b4fc <map_set_px+0xd8>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40b50c:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40b510:	fb03 f30a 	mul.w	r3, r3, sl
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40b514:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b518:	9302      	str	r3, [sp, #8]
  40b51a:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40b51e:	f8ad 3004 	strh.w	r3, [sp, #4]
  40b522:	fa0f f388 	sxth.w	r3, r8
  40b526:	9300      	str	r3, [sp, #0]
  40b528:	b223      	sxth	r3, r4
  40b52a:	9a04      	ldr	r2, [sp, #16]
  40b52c:	9905      	ldr	r1, [sp, #20]
  40b52e:	4630      	mov	r0, r6
  40b530:	47d8      	blx	fp
  40b532:	e7e3      	b.n	40b4fc <map_set_px+0xd8>
            mask_tmp += draw_area_w;
  40b534:	9b07      	ldr	r3, [sp, #28]
  40b536:	441f      	add	r7, r3
            map_buf_tmp += map_w;
  40b538:	9b06      	ldr	r3, [sp, #24]
  40b53a:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b53e:	f108 0801 	add.w	r8, r8, #1
  40b542:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b546:	4598      	cmp	r8, r3
  40b548:	dc02      	bgt.n	40b550 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b54a:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b54e:	e7d6      	b.n	40b4fe <map_set_px+0xda>
}
  40b550:	b009      	add	sp, #36	; 0x24
  40b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b556:	bf00      	nop
  40b558:	004097a1 	.word	0x004097a1

0040b55c <map_normal>:
{
  40b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b560:	b08f      	sub	sp, #60	; 0x3c
  40b562:	4686      	mov	lr, r0
  40b564:	4614      	mov	r4, r2
  40b566:	9206      	str	r2, [sp, #24]
  40b568:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
  40b56c:	8882      	ldrh	r2, [r0, #4]
  40b56e:	f9b0 0000 	ldrsh.w	r0, [r0]
  40b572:	9003      	str	r0, [sp, #12]
  40b574:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40b578:	1a12      	subs	r2, r2, r0
  40b57a:	b292      	uxth	r2, r2
  40b57c:	3201      	adds	r2, #1
  40b57e:	b212      	sxth	r2, r2
  40b580:	9208      	str	r2, [sp, #32]
  40b582:	88a2      	ldrh	r2, [r4, #4]
  40b584:	f9b4 c000 	ldrsh.w	ip, [r4]
  40b588:	fa1f f08c 	uxth.w	r0, ip
  40b58c:	1a12      	subs	r2, r2, r0
  40b58e:	b292      	uxth	r2, r2
  40b590:	3201      	adds	r2, #1
  40b592:	b212      	sxth	r2, r2
  40b594:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40b596:	4693      	mov	fp, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b598:	88e0      	ldrh	r0, [r4, #6]
  40b59a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  40b59e:	b294      	uxth	r4, r2
  40b5a0:	1b00      	subs	r0, r0, r4
  40b5a2:	b280      	uxth	r0, r0
  40b5a4:	3001      	adds	r0, #1
  40b5a6:	b204      	sxth	r4, r0
  40b5a8:	940a      	str	r4, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b5aa:	8898      	ldrh	r0, [r3, #4]
  40b5ac:	f9b3 5000 	ldrsh.w	r5, [r3]
  40b5b0:	b2ac      	uxth	r4, r5
  40b5b2:	1b00      	subs	r0, r0, r4
  40b5b4:	b280      	uxth	r0, r0
  40b5b6:	3001      	adds	r0, #1
  40b5b8:	b204      	sxth	r4, r0
  40b5ba:	9407      	str	r4, [sp, #28]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40b5bc:	9808      	ldr	r0, [sp, #32]
  40b5be:	fb02 c400 	mla	r4, r2, r0, ip
  40b5c2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b5c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40b5ca:	f9be 1002 	ldrsh.w	r1, [lr, #2]
  40b5ce:	1a5b      	subs	r3, r3, r1
  40b5d0:	1ad3      	subs	r3, r2, r3
  40b5d2:	9a07      	ldr	r2, [sp, #28]
  40b5d4:	fb03 f302 	mul.w	r3, r3, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b5d8:	9803      	ldr	r0, [sp, #12]
  40b5da:	1a2d      	subs	r5, r5, r0
  40b5dc:	ebac 0505 	sub.w	r5, ip, r5
  40b5e0:	006d      	lsls	r5, r5, #1
  40b5e2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40b5e6:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b5e8:	441d      	add	r5, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b5ea:	4b8a      	ldr	r3, [pc, #552]	; (40b814 <map_normal+0x2b8>)
  40b5ec:	4798      	blx	r3
  40b5ee:	9003      	str	r0, [sp, #12]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b5f0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
  40b5f4:	2b01      	cmp	r3, #1
  40b5f6:	d008      	beq.n	40b60a <map_normal+0xae>
        if(opa > LV_OPA_MAX) {
  40b5f8:	2ffd      	cmp	r7, #253	; 0xfd
  40b5fa:	f240 8383 	bls.w	40bd04 <map_normal+0x7a8>
            int32_t x_end4 = draw_area_w - 4;
  40b5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b600:	3b04      	subs	r3, #4
  40b602:	9303      	str	r3, [sp, #12]
            for(y = 0; y < draw_area_h; y++) {
  40b604:	2300      	movs	r3, #0
  40b606:	9306      	str	r3, [sp, #24]
  40b608:	e308      	b.n	40bc1c <map_normal+0x6c0>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
  40b60a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40b60c:	b32b      	cbz	r3, 40b65a <map_normal+0xfe>
  40b60e:	9e06      	ldr	r6, [sp, #24]
  40b610:	4630      	mov	r0, r6
  40b612:	4b81      	ldr	r3, [pc, #516]	; (40b818 <map_normal+0x2bc>)
  40b614:	4798      	blx	r3
  40b616:	28f0      	cmp	r0, #240	; 0xf0
  40b618:	d91f      	bls.n	40b65a <map_normal+0xfe>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b61a:	4631      	mov	r1, r6
  40b61c:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40b620:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40b624:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b628:	4689      	mov	r9, r1
  40b62a:	46bb      	mov	fp, r7
  40b62c:	e00e      	b.n	40b64c <map_normal+0xf0>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
  40b62e:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  40b632:	f8cd b000 	str.w	fp, [sp]
  40b636:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b638:	462a      	mov	r2, r5
  40b63a:	4621      	mov	r1, r4
  40b63c:	4640      	mov	r0, r8
  40b63e:	47b8      	blx	r7
                disp_buf_first += disp_w;
  40b640:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40b644:	9b07      	ldr	r3, [sp, #28]
  40b646:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b64a:	3601      	adds	r6, #1
  40b64c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
  40b650:	429e      	cmp	r6, r3
  40b652:	ddec      	ble.n	40b62e <map_normal+0xd2>
}
  40b654:	b00f      	add	sp, #60	; 0x3c
  40b656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(opa > LV_OPA_MAX) {
  40b65a:	2ffd      	cmp	r7, #253	; 0xfd
  40b65c:	d812      	bhi.n	40b684 <map_normal+0x128>
  40b65e:	f04f 0800 	mov.w	r8, #0
  40b662:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40b666:	e069      	b.n	40b73c <map_normal+0x1e0>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40b668:	ea4f 0249 	mov.w	r2, r9, lsl #1
  40b66c:	4629      	mov	r1, r5
  40b66e:	4620      	mov	r0, r4
  40b670:	4b6a      	ldr	r3, [pc, #424]	; (40b81c <map_normal+0x2c0>)
  40b672:	4798      	blx	r3
                disp_buf_first += disp_w;
  40b674:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40b678:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b67c:	3601      	adds	r6, #1
  40b67e:	42be      	cmp	r6, r7
  40b680:	dbf2      	blt.n	40b668 <map_normal+0x10c>
  40b682:	e7e7      	b.n	40b654 <map_normal+0xf8>
  40b684:	2600      	movs	r6, #0
  40b686:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b688:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40b68c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40b690:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b694:	e7f3      	b.n	40b67e <map_normal+0x122>
  40b696:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
  40b69a:	f834 101c 	ldrh.w	r1, [r4, ip, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b69e:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40b6a2:	f3c1 06c4 	ubfx	r6, r1, #3, #5
  40b6a6:	f1c7 00ff 	rsb	r0, r7, #255	; 0xff
  40b6aa:	fb00 f606 	mul.w	r6, r0, r6
  40b6ae:	fb07 6202 	mla	r2, r7, r2, r6
  40b6b2:	3280      	adds	r2, #128	; 0x80
  40b6b4:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40b6b8:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40b6bc:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40b6c0:	f362 0ac7 	bfi	sl, r2, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b6c4:	f003 0607 	and.w	r6, r3, #7
  40b6c8:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40b6cc:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  40b6d0:	f001 0e07 	and.w	lr, r1, #7
  40b6d4:	f3c1 3642 	ubfx	r6, r1, #13, #3
  40b6d8:	eb06 06ce 	add.w	r6, r6, lr, lsl #3
  40b6dc:	fb06 f600 	mul.w	r6, r6, r0
  40b6e0:	fb02 6207 	mla	r2, r2, r7, r6
  40b6e4:	3280      	adds	r2, #128	; 0x80
  40b6e6:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40b6ea:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40b6ee:	f3c2 6682 	ubfx	r6, r2, #26, #3
  40b6f2:	f366 0a02 	bfi	sl, r6, #0, #3
  40b6f6:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40b6fa:	f362 3a4f 	bfi	sl, r2, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b6fe:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40b702:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40b706:	fb01 f000 	mul.w	r0, r1, r0
  40b70a:	fb03 0307 	mla	r3, r3, r7, r0
  40b70e:	3380      	adds	r3, #128	; 0x80
  40b710:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b714:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b718:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b71c:	f363 2a0c 	bfi	sl, r3, #8, #5
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
  40b720:	f824 a01c 	strh.w	sl, [r4, ip, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40b724:	f10c 0c01 	add.w	ip, ip, #1
  40b728:	45dc      	cmp	ip, fp
  40b72a:	dbb4      	blt.n	40b696 <map_normal+0x13a>
                disp_buf_first += disp_w;
  40b72c:	9b08      	ldr	r3, [sp, #32]
  40b72e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                map_buf_first += map_w;
  40b732:	9b07      	ldr	r3, [sp, #28]
  40b734:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b738:	f108 0801 	add.w	r8, r8, #1
  40b73c:	45c8      	cmp	r8, r9
  40b73e:	da89      	bge.n	40b654 <map_normal+0xf8>
  40b740:	f04f 0c00 	mov.w	ip, #0
  40b744:	e7f0      	b.n	40b728 <map_normal+0x1cc>
                    MAP_NORMAL_MASK_PX(x)
  40b746:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b74a:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b74e:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40b750:	3301      	adds	r3, #1
  40b752:	455b      	cmp	r3, fp
  40b754:	f280 81e6 	bge.w	40bb24 <map_normal+0x5c8>
  40b758:	f012 0f03 	tst.w	r2, #3
  40b75c:	d04c      	beq.n	40b7f8 <map_normal+0x29c>
                    MAP_NORMAL_MASK_PX(x)
  40b75e:	7811      	ldrb	r1, [r2, #0]
  40b760:	2900      	cmp	r1, #0
  40b762:	d0f4      	beq.n	40b74e <map_normal+0x1f2>
  40b764:	29ff      	cmp	r1, #255	; 0xff
  40b766:	d0ee      	beq.n	40b746 <map_normal+0x1ea>
  40b768:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40b76c:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b770:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40b774:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b778:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40b77c:	fb0e fc0c 	mul.w	ip, lr, ip
  40b780:	fb01 c000 	mla	r0, r1, r0, ip
  40b784:	3080      	adds	r0, #128	; 0x80
  40b786:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b78a:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b78e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b792:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b796:	f007 0c07 	and.w	ip, r7, #7
  40b79a:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40b79e:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40b7a2:	f006 0a07 	and.w	sl, r6, #7
  40b7a6:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b7aa:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40b7ae:	fb0c fc0e 	mul.w	ip, ip, lr
  40b7b2:	fb00 c001 	mla	r0, r0, r1, ip
  40b7b6:	3080      	adds	r0, #128	; 0x80
  40b7b8:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b7bc:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b7c0:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b7c4:	f36c 0802 	bfi	r8, ip, #0, #3
  40b7c8:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b7cc:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b7d0:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40b7d4:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b7d8:	fb06 fe0e 	mul.w	lr, r6, lr
  40b7dc:	fb07 e101 	mla	r1, r7, r1, lr
  40b7e0:	3180      	adds	r1, #128	; 0x80
  40b7e2:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b7e6:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b7ea:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b7ee:	f361 280c 	bfi	r8, r1, #8, #5
  40b7f2:	f824 8013 	strh.w	r8, [r4, r3, lsl #1]
  40b7f6:	e7aa      	b.n	40b74e <map_normal+0x1f2>
  40b7f8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40b7fc:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40b800:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40b804:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40b808:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40b80c:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40b810:	e01b      	b.n	40b84a <map_normal+0x2ee>
  40b812:	bf00      	nop
  40b814:	004097a1 	.word	0x004097a1
  40b818:	00415597 	.word	0x00415597
  40b81c:	004167cd 	.word	0x004167cd
                            disp_buf_first[x] = map_buf_first[x];
  40b820:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b824:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
  40b828:	1c59      	adds	r1, r3, #1
  40b82a:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b82e:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
  40b832:	1c99      	adds	r1, r3, #2
  40b834:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b838:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
  40b83c:	1cd9      	adds	r1, r3, #3
  40b83e:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b842:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                    mask32++;
  40b846:	3204      	adds	r2, #4
                for(; x < x_end4; x += 4) {
  40b848:	3304      	adds	r3, #4
  40b84a:	9903      	ldr	r1, [sp, #12]
  40b84c:	428b      	cmp	r3, r1
  40b84e:	f280 8176 	bge.w	40bb3e <map_normal+0x5e2>
                    if(*mask32) {
  40b852:	6811      	ldr	r1, [r2, #0]
  40b854:	2900      	cmp	r1, #0
  40b856:	d0f6      	beq.n	40b846 <map_normal+0x2ea>
                        if((*mask32) == 0xFFFFFFFF) {
  40b858:	f1b1 3fff 	cmp.w	r1, #4294967295
  40b85c:	d0e0      	beq.n	40b820 <map_normal+0x2c4>
                            MAP_NORMAL_MASK_PX(x)
  40b85e:	7811      	ldrb	r1, [r2, #0]
  40b860:	2900      	cmp	r1, #0
  40b862:	d049      	beq.n	40b8f8 <map_normal+0x39c>
  40b864:	29ff      	cmp	r1, #255	; 0xff
  40b866:	f000 8146 	beq.w	40baf6 <map_normal+0x59a>
  40b86a:	f835 c013 	ldrh.w	ip, [r5, r3, lsl #1]
  40b86e:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b872:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b876:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b87a:	f1c1 09ff 	rsb	r9, r1, #255	; 0xff
  40b87e:	fb09 f808 	mul.w	r8, r9, r8
  40b882:	fb01 8000 	mla	r0, r1, r0, r8
  40b886:	3080      	adds	r0, #128	; 0x80
  40b888:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b88c:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b890:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b894:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b898:	f00c 0807 	and.w	r8, ip, #7
  40b89c:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b8a0:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b8a4:	f006 0707 	and.w	r7, r6, #7
  40b8a8:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b8ac:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b8b0:	fb08 f809 	mul.w	r8, r8, r9
  40b8b4:	fb00 8001 	mla	r0, r0, r1, r8
  40b8b8:	3080      	adds	r0, #128	; 0x80
  40b8ba:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b8be:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b8c2:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b8c6:	f368 0e02 	bfi	lr, r8, #0, #3
  40b8ca:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b8ce:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b8d2:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b8d6:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b8da:	fb06 f609 	mul.w	r6, r6, r9
  40b8de:	fb0c 6601 	mla	r6, ip, r1, r6
  40b8e2:	3680      	adds	r6, #128	; 0x80
  40b8e4:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b8e8:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b8ec:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b8f0:	f366 2e0c 	bfi	lr, r6, #8, #5
  40b8f4:	f824 e013 	strh.w	lr, [r4, r3, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 1)
  40b8f8:	7851      	ldrb	r1, [r2, #1]
  40b8fa:	2900      	cmp	r1, #0
  40b8fc:	d056      	beq.n	40b9ac <map_normal+0x450>
  40b8fe:	29ff      	cmp	r1, #255	; 0xff
  40b900:	f000 80fe 	beq.w	40bb00 <map_normal+0x5a4>
  40b904:	f103 0901 	add.w	r9, r3, #1
  40b908:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b90c:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b910:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b914:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b918:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b91c:	9705      	str	r7, [sp, #20]
  40b91e:	fb07 f808 	mul.w	r8, r7, r8
  40b922:	fb01 8000 	mla	r0, r1, r0, r8
  40b926:	3080      	adds	r0, #128	; 0x80
  40b928:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b92c:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b930:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b934:	9f04      	ldr	r7, [sp, #16]
  40b936:	f360 07c7 	bfi	r7, r0, #3, #5
  40b93a:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b93c:	f00c 0807 	and.w	r8, ip, #7
  40b940:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b944:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b948:	f006 0807 	and.w	r8, r6, #7
  40b94c:	4647      	mov	r7, r8
  40b94e:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b952:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b956:	9f05      	ldr	r7, [sp, #20]
  40b958:	fb08 f807 	mul.w	r8, r8, r7
  40b95c:	fb00 8001 	mla	r0, r0, r1, r8
  40b960:	3080      	adds	r0, #128	; 0x80
  40b962:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b966:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b96a:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b96e:	9f04      	ldr	r7, [sp, #16]
  40b970:	f368 0702 	bfi	r7, r8, #0, #3
  40b974:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b978:	f360 374f 	bfi	r7, r0, #13, #3
  40b97c:	4638      	mov	r0, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b97e:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b982:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b986:	9f05      	ldr	r7, [sp, #20]
  40b988:	fb06 f607 	mul.w	r6, r6, r7
  40b98c:	fb0c 6601 	mla	r6, ip, r1, r6
  40b990:	3680      	adds	r6, #128	; 0x80
  40b992:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b996:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b99a:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b99e:	4601      	mov	r1, r0
  40b9a0:	f366 210c 	bfi	r1, r6, #8, #5
  40b9a4:	f8ad 1010 	strh.w	r1, [sp, #16]
  40b9a8:	f824 1019 	strh.w	r1, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 2)
  40b9ac:	7891      	ldrb	r1, [r2, #2]
  40b9ae:	2900      	cmp	r1, #0
  40b9b0:	d04e      	beq.n	40ba50 <map_normal+0x4f4>
  40b9b2:	29ff      	cmp	r1, #255	; 0xff
  40b9b4:	f000 80aa 	beq.w	40bb0c <map_normal+0x5b0>
  40b9b8:	f103 0902 	add.w	r9, r3, #2
  40b9bc:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b9c0:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b9c4:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b9c8:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b9cc:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b9d0:	9705      	str	r7, [sp, #20]
  40b9d2:	fb07 f808 	mul.w	r8, r7, r8
  40b9d6:	fb01 8000 	mla	r0, r1, r0, r8
  40b9da:	3080      	adds	r0, #128	; 0x80
  40b9dc:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b9e0:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b9e4:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b9e8:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b9ec:	f00c 0807 	and.w	r8, ip, #7
  40b9f0:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b9f4:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b9f8:	f006 0807 	and.w	r8, r6, #7
  40b9fc:	4647      	mov	r7, r8
  40b9fe:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40ba02:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40ba06:	9f05      	ldr	r7, [sp, #20]
  40ba08:	fb08 f807 	mul.w	r8, r8, r7
  40ba0c:	fb00 8001 	mla	r0, r0, r1, r8
  40ba10:	3080      	adds	r0, #128	; 0x80
  40ba12:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40ba16:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ba1a:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40ba1e:	f368 0a02 	bfi	sl, r8, #0, #3
  40ba22:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40ba26:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ba2a:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40ba2e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40ba32:	fb06 f607 	mul.w	r6, r6, r7
  40ba36:	fb0c 6601 	mla	r6, ip, r1, r6
  40ba3a:	3680      	adds	r6, #128	; 0x80
  40ba3c:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40ba40:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40ba44:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40ba48:	f366 2a0c 	bfi	sl, r6, #8, #5
  40ba4c:	f824 a019 	strh.w	sl, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 3)
  40ba50:	78d1      	ldrb	r1, [r2, #3]
  40ba52:	2900      	cmp	r1, #0
  40ba54:	f43f aef7 	beq.w	40b846 <map_normal+0x2ea>
  40ba58:	29ff      	cmp	r1, #255	; 0xff
  40ba5a:	d05d      	beq.n	40bb18 <map_normal+0x5bc>
  40ba5c:	f103 0903 	add.w	r9, r3, #3
  40ba60:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40ba64:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ba68:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40ba6c:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40ba70:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40ba74:	9705      	str	r7, [sp, #20]
  40ba76:	fb07 f808 	mul.w	r8, r7, r8
  40ba7a:	fb01 8000 	mla	r0, r1, r0, r8
  40ba7e:	3080      	adds	r0, #128	; 0x80
  40ba80:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40ba84:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ba88:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ba8c:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ba90:	f00c 0807 	and.w	r8, ip, #7
  40ba94:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40ba98:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40ba9c:	f006 0807 	and.w	r8, r6, #7
  40baa0:	4647      	mov	r7, r8
  40baa2:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40baa6:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40baaa:	9f05      	ldr	r7, [sp, #20]
  40baac:	fb08 f807 	mul.w	r8, r8, r7
  40bab0:	fb00 8001 	mla	r0, r0, r1, r8
  40bab4:	3080      	adds	r0, #128	; 0x80
  40bab6:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40baba:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40babe:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40bac2:	f368 0b02 	bfi	fp, r8, #0, #3
  40bac6:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40baca:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bace:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40bad2:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bad6:	fb06 f607 	mul.w	r6, r6, r7
  40bada:	fb0c 6601 	mla	r6, ip, r1, r6
  40bade:	3680      	adds	r6, #128	; 0x80
  40bae0:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40bae4:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40bae8:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40baec:	f366 2b0c 	bfi	fp, r6, #8, #5
  40baf0:	f824 b019 	strh.w	fp, [r4, r9, lsl #1]
  40baf4:	e6a7      	b.n	40b846 <map_normal+0x2ea>
                            MAP_NORMAL_MASK_PX(x)
  40baf6:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40bafa:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40bafe:	e6fb      	b.n	40b8f8 <map_normal+0x39c>
                            MAP_NORMAL_MASK_PX(x + 1)
  40bb00:	1c59      	adds	r1, r3, #1
  40bb02:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40bb06:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40bb0a:	e74f      	b.n	40b9ac <map_normal+0x450>
                            MAP_NORMAL_MASK_PX(x + 2)
  40bb0c:	1c99      	adds	r1, r3, #2
  40bb0e:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40bb12:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40bb16:	e79b      	b.n	40ba50 <map_normal+0x4f4>
                            MAP_NORMAL_MASK_PX(x + 3)
  40bb18:	1cd9      	adds	r1, r3, #3
  40bb1a:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40bb1e:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40bb22:	e690      	b.n	40b846 <map_normal+0x2ea>
  40bb24:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40bb28:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40bb2c:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40bb30:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40bb34:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40bb38:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40bb3c:	e685      	b.n	40b84a <map_normal+0x2ee>
  40bb3e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  40bb42:	f8ad b014 	strh.w	fp, [sp, #20]
  40bb46:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40bb4a:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
  40bb4e:	f8ad e02e 	strh.w	lr, [sp, #46]	; 0x2e
  40bb52:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
  40bb56:	e005      	b.n	40bb64 <map_normal+0x608>
                    MAP_NORMAL_MASK_PX(x)
  40bb58:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40bb5c:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40bb60:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40bb62:	3301      	adds	r3, #1
  40bb64:	455b      	cmp	r3, fp
  40bb66:	da4c      	bge.n	40bc02 <map_normal+0x6a6>
                    MAP_NORMAL_MASK_PX(x)
  40bb68:	7811      	ldrb	r1, [r2, #0]
  40bb6a:	2900      	cmp	r1, #0
  40bb6c:	d0f8      	beq.n	40bb60 <map_normal+0x604>
  40bb6e:	29ff      	cmp	r1, #255	; 0xff
  40bb70:	d0f2      	beq.n	40bb58 <map_normal+0x5fc>
  40bb72:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40bb76:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bb7a:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40bb7e:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bb82:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40bb86:	fb0e fc0c 	mul.w	ip, lr, ip
  40bb8a:	fb01 c000 	mla	r0, r1, r0, ip
  40bb8e:	3080      	adds	r0, #128	; 0x80
  40bb90:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bb94:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bb98:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bb9c:	f360 09c7 	bfi	r9, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bba0:	f007 0c07 	and.w	ip, r7, #7
  40bba4:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40bba8:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40bbac:	f006 0a07 	and.w	sl, r6, #7
  40bbb0:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40bbb4:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40bbb8:	fb0c fc0e 	mul.w	ip, ip, lr
  40bbbc:	fb00 c001 	mla	r0, r0, r1, ip
  40bbc0:	3080      	adds	r0, #128	; 0x80
  40bbc2:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bbc6:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bbca:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40bbce:	f36c 0902 	bfi	r9, ip, #0, #3
  40bbd2:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bbd6:	f360 394f 	bfi	r9, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bbda:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40bbde:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bbe2:	fb06 fe0e 	mul.w	lr, r6, lr
  40bbe6:	fb07 e101 	mla	r1, r7, r1, lr
  40bbea:	3180      	adds	r1, #128	; 0x80
  40bbec:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40bbf0:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40bbf4:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40bbf8:	f361 290c 	bfi	r9, r1, #8, #5
  40bbfc:	f824 9013 	strh.w	r9, [r4, r3, lsl #1]
  40bc00:	e7ae      	b.n	40bb60 <map_normal+0x604>
                disp_buf_first += disp_w;
  40bc02:	9b08      	ldr	r3, [sp, #32]
  40bc04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40bc08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40bc0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40bc0c:	4413      	add	r3, r2
  40bc0e:	931a      	str	r3, [sp, #104]	; 0x68
                map_buf_first += map_w;
  40bc10:	9b07      	ldr	r3, [sp, #28]
  40bc12:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40bc16:	9b06      	ldr	r3, [sp, #24]
  40bc18:	3301      	adds	r3, #1
  40bc1a:	9306      	str	r3, [sp, #24]
  40bc1c:	9b06      	ldr	r3, [sp, #24]
  40bc1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bc20:	4293      	cmp	r3, r2
  40bc22:	f6bf ad17 	bge.w	40b654 <map_normal+0xf8>
  40bc26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40bc28:	2300      	movs	r3, #0
  40bc2a:	e592      	b.n	40b752 <map_normal+0x1f6>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40bc2c:	9b03      	ldr	r3, [sp, #12]
  40bc2e:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
  40bc32:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bc36:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  40bc3a:	f3c1 07c4 	ubfx	r7, r1, #3, #5
  40bc3e:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  40bc42:	fb0c f707 	mul.w	r7, ip, r7
  40bc46:	fb03 7202 	mla	r2, r3, r2, r7
  40bc4a:	3280      	adds	r2, #128	; 0x80
  40bc4c:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40bc50:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40bc54:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40bc58:	f362 06c7 	bfi	r6, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bc5c:	f000 0707 	and.w	r7, r0, #7
  40bc60:	f3c0 3242 	ubfx	r2, r0, #13, #3
  40bc64:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
  40bc68:	f001 0907 	and.w	r9, r1, #7
  40bc6c:	f3c1 3742 	ubfx	r7, r1, #13, #3
  40bc70:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
  40bc74:	fb07 f70c 	mul.w	r7, r7, ip
  40bc78:	fb02 7203 	mla	r2, r2, r3, r7
  40bc7c:	3280      	adds	r2, #128	; 0x80
  40bc7e:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40bc82:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40bc86:	f3c2 6782 	ubfx	r7, r2, #26, #3
  40bc8a:	f367 0602 	bfi	r6, r7, #0, #3
  40bc8e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40bc92:	f362 364f 	bfi	r6, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bc96:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40bc9a:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40bc9e:	fb01 fc0c 	mul.w	ip, r1, ip
  40bca2:	fb00 c303 	mla	r3, r0, r3, ip
  40bca6:	3380      	adds	r3, #128	; 0x80
  40bca8:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  40bcac:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  40bcb0:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bcb4:	f363 260c 	bfi	r6, r3, #8, #5
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
  40bcb8:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40bcbc:	f108 0801 	add.w	r8, r8, #1
  40bcc0:	45d8      	cmp	r8, fp
  40bcc2:	da0c      	bge.n	40bcde <map_normal+0x782>
                    if(mask[x]) {
  40bcc4:	46c6      	mov	lr, r8
  40bcc6:	f81a 3008 	ldrb.w	r3, [sl, r8]
  40bcca:	2b00      	cmp	r3, #0
  40bccc:	d0f6      	beq.n	40bcbc <map_normal+0x760>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40bcce:	2bfc      	cmp	r3, #252	; 0xfc
  40bcd0:	d8ac      	bhi.n	40bc2c <map_normal+0x6d0>
  40bcd2:	9a03      	ldr	r2, [sp, #12]
  40bcd4:	fb03 f302 	mul.w	r3, r3, r2
  40bcd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40bcdc:	e7a7      	b.n	40bc2e <map_normal+0x6d2>
                disp_buf_first += disp_w;
  40bcde:	9b08      	ldr	r3, [sp, #32]
  40bce0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40bce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bce6:	449a      	add	sl, r3
                map_buf_first += map_w;
  40bce8:	9b07      	ldr	r3, [sp, #28]
  40bcea:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40bcee:	9b04      	ldr	r3, [sp, #16]
  40bcf0:	3301      	adds	r3, #1
  40bcf2:	9304      	str	r3, [sp, #16]
  40bcf4:	9b04      	ldr	r3, [sp, #16]
  40bcf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bcf8:	4293      	cmp	r3, r2
  40bcfa:	f6bf acab 	bge.w	40b654 <map_normal+0xf8>
  40bcfe:	f04f 0800 	mov.w	r8, #0
  40bd02:	e7dd      	b.n	40bcc0 <map_normal+0x764>
  40bd04:	2300      	movs	r3, #0
  40bd06:	9304      	str	r3, [sp, #16]
  40bd08:	9703      	str	r7, [sp, #12]
  40bd0a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  40bd0e:	e7f1      	b.n	40bcf4 <map_normal+0x798>

0040bd10 <fill_normal>:
{
  40bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bd14:	b091      	sub	sp, #68	; 0x44
  40bd16:	4605      	mov	r5, r0
  40bd18:	9103      	str	r1, [sp, #12]
  40bd1a:	4616      	mov	r6, r2
  40bd1c:	920a      	str	r2, [sp, #40]	; 0x28
  40bd1e:	461c      	mov	r4, r3
  40bd20:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40bd24:	9006      	str	r0, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40bd26:	4bc5      	ldr	r3, [pc, #788]	; (40c03c <fill_normal+0x32c>)
  40bd28:	4798      	blx	r3
  40bd2a:	900b      	str	r0, [sp, #44]	; 0x2c
  40bd2c:	88ab      	ldrh	r3, [r5, #4]
  40bd2e:	882a      	ldrh	r2, [r5, #0]
  40bd30:	1a9b      	subs	r3, r3, r2
  40bd32:	b29b      	uxth	r3, r3
  40bd34:	3301      	adds	r3, #1
  40bd36:	b218      	sxth	r0, r3
  40bd38:	4605      	mov	r5, r0
  40bd3a:	9008      	str	r0, [sp, #32]
  40bd3c:	88b3      	ldrh	r3, [r6, #4]
  40bd3e:	4630      	mov	r0, r6
  40bd40:	f9b6 1000 	ldrsh.w	r1, [r6]
  40bd44:	b28a      	uxth	r2, r1
  40bd46:	1a9b      	subs	r3, r3, r2
  40bd48:	b29b      	uxth	r3, r3
  40bd4a:	3301      	adds	r3, #1
  40bd4c:	b21b      	sxth	r3, r3
  40bd4e:	9307      	str	r3, [sp, #28]
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40bd50:	461e      	mov	r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40bd52:	88c3      	ldrh	r3, [r0, #6]
  40bd54:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  40bd58:	b290      	uxth	r0, r2
  40bd5a:	1a1b      	subs	r3, r3, r0
  40bd5c:	b29b      	uxth	r3, r3
  40bd5e:	3301      	adds	r3, #1
  40bd60:	b21b      	sxth	r3, r3
  40bd62:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40bd64:	4696      	mov	lr, r2
  40bd66:	fb02 1205 	mla	r2, r2, r5, r1
  40bd6a:	9b03      	ldr	r3, [sp, #12]
  40bd6c:	eb03 0542 	add.w	r5, r3, r2, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40bd70:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  40bd74:	2b01      	cmp	r3, #1
  40bd76:	d00f      	beq.n	40bd98 <fill_normal+0x88>
        last_dest_color.full = disp_buf_first[0].full;
  40bd78:	9b03      	ldr	r3, [sp, #12]
  40bd7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40bd7e:	461a      	mov	r2, r3
        int32_t x_end4 = draw_area_w - 4;
  40bd80:	9907      	ldr	r1, [sp, #28]
  40bd82:	3904      	subs	r1, #4
  40bd84:	9103      	str	r1, [sp, #12]
        if(opa > LV_OPA_MAX) {
  40bd86:	9906      	ldr	r1, [sp, #24]
  40bd88:	29fd      	cmp	r1, #253	; 0xfd
  40bd8a:	f200 8335 	bhi.w	40c3f8 <fill_normal+0x6e8>
  40bd8e:	f04f 0800 	mov.w	r8, #0
  40bd92:	4641      	mov	r1, r8
  40bd94:	46a3      	mov	fp, r4
  40bd96:	e3a7      	b.n	40c4e8 <fill_normal+0x7d8>
        if(opa > LV_OPA_MAX) {
  40bd98:	9b06      	ldr	r3, [sp, #24]
  40bd9a:	2bfd      	cmp	r3, #253	; 0xfd
  40bd9c:	d922      	bls.n	40bde4 <fill_normal+0xd4>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40bd9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40bda2:	b123      	cbz	r3, 40bdae <fill_normal+0x9e>
  40bda4:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bda6:	4ba6      	ldr	r3, [pc, #664]	; (40c040 <fill_normal+0x330>)
  40bda8:	4798      	blx	r3
  40bdaa:	28f0      	cmp	r0, #240	; 0xf0
  40bdac:	d804      	bhi.n	40bdb8 <fill_normal+0xa8>
{
  40bdae:	2600      	movs	r6, #0
  40bdb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40bdb2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40bdb6:	e010      	b.n	40bdda <fill_normal+0xca>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
  40bdb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40bdba:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  40bdbc:	f8ad 4000 	strh.w	r4, [sp]
  40bdc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bdc2:	9a08      	ldr	r2, [sp, #32]
  40bdc4:	9903      	ldr	r1, [sp, #12]
  40bdc6:	47a8      	blx	r5
                return;
  40bdc8:	e009      	b.n	40bdde <fill_normal+0xce>
                lv_color_fill(disp_buf_first, color, draw_area_w);
  40bdca:	9a07      	ldr	r2, [sp, #28]
  40bdcc:	4621      	mov	r1, r4
  40bdce:	4628      	mov	r0, r5
  40bdd0:	4b9c      	ldr	r3, [pc, #624]	; (40c044 <fill_normal+0x334>)
  40bdd2:	4798      	blx	r3
                disp_buf_first += disp_w;
  40bdd4:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40bdd8:	3601      	adds	r6, #1
  40bdda:	42be      	cmp	r6, r7
  40bddc:	dbf5      	blt.n	40bdca <fill_normal+0xba>
}
  40bdde:	b011      	add	sp, #68	; 0x44
  40bde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40bde4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40bde8:	b123      	cbz	r3, 40bdf4 <fill_normal+0xe4>
  40bdea:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bdec:	4b94      	ldr	r3, [pc, #592]	; (40c040 <fill_normal+0x330>)
  40bdee:	4798      	blx	r3
  40bdf0:	28f0      	cmp	r0, #240	; 0xf0
  40bdf2:	d864      	bhi.n	40bebe <fill_normal+0x1ae>
            lv_color_t last_dest_color = LV_COLOR_BLACK;
  40bdf4:	f04f 0e00 	mov.w	lr, #0
  40bdf8:	4670      	mov	r0, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bdfa:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40bdfe:	9f06      	ldr	r7, [sp, #24]
  40be00:	fb07 f303 	mul.w	r3, r7, r3
  40be04:	3380      	adds	r3, #128	; 0x80
  40be06:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40be0a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40be0e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40be12:	f04f 0200 	mov.w	r2, #0
  40be16:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40be1a:	f004 0107 	and.w	r1, r4, #7
  40be1e:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40be22:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40be26:	fb03 f307 	mul.w	r3, r3, r7
  40be2a:	3380      	adds	r3, #128	; 0x80
  40be2c:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40be30:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40be34:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40be38:	f361 0202 	bfi	r2, r1, #0, #3
  40be3c:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40be40:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40be44:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40be48:	fb03 f307 	mul.w	r3, r3, r7
  40be4c:	3380      	adds	r3, #128	; 0x80
  40be4e:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40be52:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40be56:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40be5a:	f363 220c 	bfi	r2, r3, #8, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40be5e:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  40be62:	46bc      	mov	ip, r7
  40be64:	b2bb      	uxth	r3, r7
  40be66:	fb01 f103 	mul.w	r1, r1, r3
  40be6a:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40be6e:	f004 0707 	and.w	r7, r4, #7
  40be72:	f3c4 3142 	ubfx	r1, r4, #13, #3
  40be76:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40be7a:	fb13 f101 	smulbb	r1, r3, r1
  40be7e:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40be82:	f3c4 2404 	ubfx	r4, r4, #8, #5
  40be86:	fb03 f304 	mul.w	r3, r3, r4
  40be8a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            lv_opa_t opa_inv = 255 - opa;
  40be8e:	4661      	mov	r1, ip
  40be90:	43cc      	mvns	r4, r1
  40be92:	b2e4      	uxtb	r4, r4
  40be94:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40be98:	f8dd 8020 	ldr.w	r8, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
  40be9c:	e069      	b.n	40bf72 <fill_normal+0x262>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
  40be9e:	4a6a      	ldr	r2, [pc, #424]	; (40c048 <fill_normal+0x338>)
  40bea0:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
  40bea4:	3301      	adds	r3, #1
  40bea6:	42b3      	cmp	r3, r6
  40bea8:	dbf9      	blt.n	40be9e <fill_normal+0x18e>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40beaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40beac:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  40beb0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40beb2:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40beb6:	4690      	mov	r8, r2
  40beb8:	f8dd a018 	ldr.w	sl, [sp, #24]
  40bebc:	e00c      	b.n	40bed8 <fill_normal+0x1c8>
  40bebe:	2300      	movs	r3, #0
  40bec0:	e7f1      	b.n	40bea6 <fill_normal+0x196>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
  40bec2:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  40bec4:	f8cd a000 	str.w	sl, [sp]
  40bec8:	9b07      	ldr	r3, [sp, #28]
  40beca:	4a5f      	ldr	r2, [pc, #380]	; (40c048 <fill_normal+0x338>)
  40becc:	4629      	mov	r1, r5
  40bece:	4630      	mov	r0, r6
  40bed0:	47b8      	blx	r7
                    disp_buf_first += disp_w;
  40bed2:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bed6:	3401      	adds	r4, #1
  40bed8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40bedc:	429c      	cmp	r4, r3
  40bede:	ddf0      	ble.n	40bec2 <fill_normal+0x1b2>
  40bee0:	e77d      	b.n	40bdde <fill_normal+0xce>
                    disp_buf_first[x] = last_res_color;
  40bee2:	803a      	strh	r2, [r7, #0]
                for(x = 0; x < draw_area_w; x++) {
  40bee4:	3101      	adds	r1, #1
  40bee6:	42b1      	cmp	r1, r6
  40bee8:	da3f      	bge.n	40bf6a <fill_normal+0x25a>
                    if(last_dest_color.full != disp_buf_first[x].full) {
  40beea:	b283      	uxth	r3, r0
  40beec:	eb05 0741 	add.w	r7, r5, r1, lsl #1
  40bef0:	f835 9011 	ldrh.w	r9, [r5, r1, lsl #1]
  40bef4:	454b      	cmp	r3, r9
  40bef6:	d0f4      	beq.n	40bee2 <fill_normal+0x1d2>
                        last_dest_color = disp_buf_first[x];
  40bef8:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40befc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  40bf00:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40bf04:	fb04 2303 	mla	r3, r4, r3, r2
  40bf08:	3380      	adds	r3, #128	; 0x80
  40bf0a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bf0e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bf12:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bf16:	f363 0ac7 	bfi	sl, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40bf1a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  40bf1e:	f000 0907 	and.w	r9, r0, #7
  40bf22:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40bf26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40bf2a:	fb03 2304 	mla	r3, r3, r4, r2
  40bf2e:	3380      	adds	r3, #128	; 0x80
  40bf30:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bf34:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bf38:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40bf3c:	f362 0a02 	bfi	sl, r2, #0, #3
  40bf40:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bf44:	f363 3a4f 	bfi	sl, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40bf48:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  40bf4c:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40bf50:	fb03 2304 	mla	r3, r3, r4, r2
  40bf54:	3380      	adds	r3, #128	; 0x80
  40bf56:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bf5a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bf5e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bf62:	f363 2a0c 	bfi	sl, r3, #8, #5
  40bf66:	4652      	mov	r2, sl
  40bf68:	e7bb      	b.n	40bee2 <fill_normal+0x1d2>
                disp_buf_first += disp_w;
  40bf6a:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40bf6e:	f10e 0e01 	add.w	lr, lr, #1
  40bf72:	45e6      	cmp	lr, ip
  40bf74:	f6bf af33 	bge.w	40bdde <fill_normal+0xce>
  40bf78:	2100      	movs	r1, #0
  40bf7a:	e7b4      	b.n	40bee6 <fill_normal+0x1d6>
                    FILL_NORMAL_MASK_PX(x, color)
  40bf7c:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40bf80:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40bf82:	3301      	adds	r3, #1
  40bf84:	42b3      	cmp	r3, r6
  40bf86:	f280 81c0 	bge.w	40c30a <fill_normal+0x5fa>
  40bf8a:	f012 0f03 	tst.w	r2, #3
  40bf8e:	d04a      	beq.n	40c026 <fill_normal+0x316>
                    FILL_NORMAL_MASK_PX(x, color)
  40bf90:	7811      	ldrb	r1, [r2, #0]
  40bf92:	2900      	cmp	r1, #0
  40bf94:	d0f4      	beq.n	40bf80 <fill_normal+0x270>
  40bf96:	29ff      	cmp	r1, #255	; 0xff
  40bf98:	d0f0      	beq.n	40bf7c <fill_normal+0x26c>
  40bf9a:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bf9e:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bfa2:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40bfa6:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40bfaa:	fb0c f909 	mul.w	r9, ip, r9
  40bfae:	fb01 9000 	mla	r0, r1, r0, r9
  40bfb2:	3080      	adds	r0, #128	; 0x80
  40bfb4:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40bfb8:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40bfbc:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bfc0:	f360 07c7 	bfi	r7, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bfc4:	f004 0007 	and.w	r0, r4, #7
  40bfc8:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40bfcc:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40bfd0:	f00e 0a07 	and.w	sl, lr, #7
  40bfd4:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40bfd8:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40bfdc:	fb09 f90c 	mul.w	r9, r9, ip
  40bfe0:	fb00 9001 	mla	r0, r0, r1, r9
  40bfe4:	3080      	adds	r0, #128	; 0x80
  40bfe6:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40bfea:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40bfee:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40bff2:	f369 0702 	bfi	r7, r9, #0, #3
  40bff6:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bffa:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bffe:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c002:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40c006:	fb0e fc0c 	mul.w	ip, lr, ip
  40c00a:	fb00 c101 	mla	r1, r0, r1, ip
  40c00e:	3180      	adds	r1, #128	; 0x80
  40c010:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40c014:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40c018:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c01c:	f361 270c 	bfi	r7, r1, #8, #5
  40c020:	f825 7013 	strh.w	r7, [r5, r3, lsl #1]
  40c024:	e7ac      	b.n	40bf80 <fill_normal+0x270>
  40c026:	960a      	str	r6, [sp, #40]	; 0x28
  40c028:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40c02c:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40c030:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40c034:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40c038:	e015      	b.n	40c066 <fill_normal+0x356>
  40c03a:	bf00      	nop
  40c03c:	004097a1 	.word	0x004097a1
  40c040:	00415597 	.word	0x00415597
  40c044:	00415d37 	.word	0x00415d37
  40c048:	2040c424 	.word	0x2040c424
                            disp_buf_first[x] = color;
  40c04c:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
                            disp_buf_first[x + 1] = color;
  40c050:	1c59      	adds	r1, r3, #1
  40c052:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 2] = color;
  40c056:	1c99      	adds	r1, r3, #2
  40c058:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 3] = color;
  40c05c:	1cd9      	adds	r1, r3, #3
  40c05e:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                    mask32++;
  40c062:	3204      	adds	r2, #4
                for(; x <= x_end4; x += 4) {
  40c064:	3304      	adds	r3, #4
  40c066:	9903      	ldr	r1, [sp, #12]
  40c068:	428b      	cmp	r3, r1
  40c06a:	f300 8158 	bgt.w	40c31e <fill_normal+0x60e>
                    if(*mask32) {
  40c06e:	6811      	ldr	r1, [r2, #0]
  40c070:	2900      	cmp	r1, #0
  40c072:	d0f6      	beq.n	40c062 <fill_normal+0x352>
                        if((*mask32) == 0xFFFFFFFF) {
  40c074:	f1b1 3fff 	cmp.w	r1, #4294967295
  40c078:	d0e8      	beq.n	40c04c <fill_normal+0x33c>
                            FILL_NORMAL_MASK_PX(x, color)
  40c07a:	7811      	ldrb	r1, [r2, #0]
  40c07c:	2900      	cmp	r1, #0
  40c07e:	d047      	beq.n	40c110 <fill_normal+0x400>
  40c080:	29ff      	cmp	r1, #255	; 0xff
  40c082:	f000 8133 	beq.w	40c2ec <fill_normal+0x5dc>
  40c086:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c08a:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c08e:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c092:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40c096:	fb08 fc0c 	mul.w	ip, r8, ip
  40c09a:	fb01 c000 	mla	r0, r1, r0, ip
  40c09e:	3080      	adds	r0, #128	; 0x80
  40c0a0:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c0a4:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c0a8:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c0ac:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c0b0:	f004 0007 	and.w	r0, r4, #7
  40c0b4:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40c0b8:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40c0bc:	f006 0907 	and.w	r9, r6, #7
  40c0c0:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c0c4:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
  40c0c8:	fb0c fc08 	mul.w	ip, ip, r8
  40c0cc:	fb00 c001 	mla	r0, r0, r1, ip
  40c0d0:	3080      	adds	r0, #128	; 0x80
  40c0d2:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c0d6:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c0da:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c0de:	f36c 0e02 	bfi	lr, ip, #0, #3
  40c0e2:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c0e6:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c0ea:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c0ee:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c0f2:	fb06 f608 	mul.w	r6, r6, r8
  40c0f6:	fb00 6601 	mla	r6, r0, r1, r6
  40c0fa:	3680      	adds	r6, #128	; 0x80
  40c0fc:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40c100:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
  40c104:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40c108:	f366 2e0c 	bfi	lr, r6, #8, #5
  40c10c:	f825 e013 	strh.w	lr, [r5, r3, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40c110:	7851      	ldrb	r1, [r2, #1]
  40c112:	2900      	cmp	r1, #0
  40c114:	d04f      	beq.n	40c1b6 <fill_normal+0x4a6>
  40c116:	29ff      	cmp	r1, #255	; 0xff
  40c118:	f000 80eb 	beq.w	40c2f2 <fill_normal+0x5e2>
  40c11c:	f103 0901 	add.w	r9, r3, #1
  40c120:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c124:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c128:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c12c:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40c130:	fb08 fc0c 	mul.w	ip, r8, ip
  40c134:	fb01 c000 	mla	r0, r1, r0, ip
  40c138:	3080      	adds	r0, #128	; 0x80
  40c13a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c13e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c142:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c146:	9f04      	ldr	r7, [sp, #16]
  40c148:	f360 07c7 	bfi	r7, r0, #3, #5
  40c14c:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c14e:	f004 0007 	and.w	r0, r4, #7
  40c152:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40c156:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40c15a:	f006 0707 	and.w	r7, r6, #7
  40c15e:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c162:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40c166:	fb0c fc08 	mul.w	ip, ip, r8
  40c16a:	fb00 c001 	mla	r0, r0, r1, ip
  40c16e:	3080      	adds	r0, #128	; 0x80
  40c170:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c174:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c178:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c17c:	9f04      	ldr	r7, [sp, #16]
  40c17e:	f36c 0702 	bfi	r7, ip, #0, #3
  40c182:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c186:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c18a:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c18e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c192:	fb06 f608 	mul.w	r6, r6, r8
  40c196:	fb00 6601 	mla	r6, r0, r1, r6
  40c19a:	3680      	adds	r6, #128	; 0x80
  40c19c:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40c1a0:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40c1a4:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c1a8:	4639      	mov	r1, r7
  40c1aa:	f360 210c 	bfi	r1, r0, #8, #5
  40c1ae:	f8ad 1010 	strh.w	r1, [sp, #16]
  40c1b2:	f825 1019 	strh.w	r1, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40c1b6:	7891      	ldrb	r1, [r2, #2]
  40c1b8:	2900      	cmp	r1, #0
  40c1ba:	d049      	beq.n	40c250 <fill_normal+0x540>
  40c1bc:	29ff      	cmp	r1, #255	; 0xff
  40c1be:	f000 809c 	beq.w	40c2fa <fill_normal+0x5ea>
  40c1c2:	f103 0902 	add.w	r9, r3, #2
  40c1c6:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c1ca:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c1ce:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c1d2:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40c1d6:	fb08 fc0c 	mul.w	ip, r8, ip
  40c1da:	fb01 c000 	mla	r0, r1, r0, ip
  40c1de:	3080      	adds	r0, #128	; 0x80
  40c1e0:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c1e4:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c1e8:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c1ec:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c1f0:	f004 0007 	and.w	r0, r4, #7
  40c1f4:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40c1f8:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40c1fc:	f006 0707 	and.w	r7, r6, #7
  40c200:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c204:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40c208:	fb0c fc08 	mul.w	ip, ip, r8
  40c20c:	fb00 c001 	mla	r0, r0, r1, ip
  40c210:	3080      	adds	r0, #128	; 0x80
  40c212:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c216:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c21a:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c21e:	f36c 0a02 	bfi	sl, ip, #0, #3
  40c222:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c226:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c22a:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c22e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c232:	fb06 f608 	mul.w	r6, r6, r8
  40c236:	fb00 6601 	mla	r6, r0, r1, r6
  40c23a:	3680      	adds	r6, #128	; 0x80
  40c23c:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40c240:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40c244:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c248:	f360 2a0c 	bfi	sl, r0, #8, #5
  40c24c:	f825 a019 	strh.w	sl, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40c250:	78d1      	ldrb	r1, [r2, #3]
  40c252:	2900      	cmp	r1, #0
  40c254:	f43f af05 	beq.w	40c062 <fill_normal+0x352>
  40c258:	29ff      	cmp	r1, #255	; 0xff
  40c25a:	d052      	beq.n	40c302 <fill_normal+0x5f2>
  40c25c:	f103 0903 	add.w	r9, r3, #3
  40c260:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c264:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c268:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c26c:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40c270:	fb08 fc0c 	mul.w	ip, r8, ip
  40c274:	fb01 c000 	mla	r0, r1, r0, ip
  40c278:	3080      	adds	r0, #128	; 0x80
  40c27a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c27e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c282:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c286:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c28a:	f004 0007 	and.w	r0, r4, #7
  40c28e:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40c292:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40c296:	f006 0707 	and.w	r7, r6, #7
  40c29a:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c29e:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40c2a2:	fb0c fc08 	mul.w	ip, ip, r8
  40c2a6:	fb00 c001 	mla	r0, r0, r1, ip
  40c2aa:	3080      	adds	r0, #128	; 0x80
  40c2ac:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c2b0:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c2b4:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c2b8:	f36c 0b02 	bfi	fp, ip, #0, #3
  40c2bc:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c2c0:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c2c4:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c2c8:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c2cc:	fb06 f608 	mul.w	r6, r6, r8
  40c2d0:	fb00 6601 	mla	r6, r0, r1, r6
  40c2d4:	3680      	adds	r6, #128	; 0x80
  40c2d6:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40c2da:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40c2de:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c2e2:	f360 2b0c 	bfi	fp, r0, #8, #5
  40c2e6:	f825 b019 	strh.w	fp, [r5, r9, lsl #1]
  40c2ea:	e6ba      	b.n	40c062 <fill_normal+0x352>
                            FILL_NORMAL_MASK_PX(x, color)
  40c2ec:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40c2f0:	e70e      	b.n	40c110 <fill_normal+0x400>
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40c2f2:	1c59      	adds	r1, r3, #1
  40c2f4:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40c2f8:	e75d      	b.n	40c1b6 <fill_normal+0x4a6>
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40c2fa:	1c99      	adds	r1, r3, #2
  40c2fc:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40c300:	e7a6      	b.n	40c250 <fill_normal+0x540>
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40c302:	1cd9      	adds	r1, r3, #3
  40c304:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40c308:	e6ab      	b.n	40c062 <fill_normal+0x352>
  40c30a:	960a      	str	r6, [sp, #40]	; 0x28
  40c30c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40c310:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40c314:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40c318:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40c31c:	e6a3      	b.n	40c066 <fill_normal+0x356>
  40c31e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40c320:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40c324:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
  40c328:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
  40c32c:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
  40c330:	e003      	b.n	40c33a <fill_normal+0x62a>
                    FILL_NORMAL_MASK_PX(x, color)
  40c332:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40c336:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40c338:	3301      	adds	r3, #1
  40c33a:	42b3      	cmp	r3, r6
  40c33c:	da4a      	bge.n	40c3d4 <fill_normal+0x6c4>
                    FILL_NORMAL_MASK_PX(x, color)
  40c33e:	7811      	ldrb	r1, [r2, #0]
  40c340:	2900      	cmp	r1, #0
  40c342:	d0f8      	beq.n	40c336 <fill_normal+0x626>
  40c344:	29ff      	cmp	r1, #255	; 0xff
  40c346:	d0f4      	beq.n	40c332 <fill_normal+0x622>
  40c348:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c34c:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c350:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40c354:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40c358:	fb0c f909 	mul.w	r9, ip, r9
  40c35c:	fb01 9000 	mla	r0, r1, r0, r9
  40c360:	3080      	adds	r0, #128	; 0x80
  40c362:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40c366:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40c36a:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c36e:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c372:	f004 0007 	and.w	r0, r4, #7
  40c376:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40c37a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40c37e:	f00e 0a07 	and.w	sl, lr, #7
  40c382:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40c386:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40c38a:	fb09 f90c 	mul.w	r9, r9, ip
  40c38e:	fb00 9001 	mla	r0, r0, r1, r9
  40c392:	3080      	adds	r0, #128	; 0x80
  40c394:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40c398:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40c39c:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40c3a0:	f369 0802 	bfi	r8, r9, #0, #3
  40c3a4:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c3a8:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c3ac:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c3b0:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40c3b4:	fb0e fc0c 	mul.w	ip, lr, ip
  40c3b8:	fb00 c101 	mla	r1, r0, r1, ip
  40c3bc:	3180      	adds	r1, #128	; 0x80
  40c3be:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40c3c2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40c3c6:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c3ca:	f361 280c 	bfi	r8, r1, #8, #5
  40c3ce:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
  40c3d2:	e7b0      	b.n	40c336 <fill_normal+0x626>
                disp_buf_first += disp_w;
  40c3d4:	9b08      	ldr	r3, [sp, #32]
  40c3d6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
                mask += draw_area_w;
  40c3da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c3dc:	9a07      	ldr	r2, [sp, #28]
  40c3de:	4413      	add	r3, r2
  40c3e0:	931b      	str	r3, [sp, #108]	; 0x6c
            for(y = 0; y < draw_area_h; y++) {
  40c3e2:	9b06      	ldr	r3, [sp, #24]
  40c3e4:	3301      	adds	r3, #1
  40c3e6:	9306      	str	r3, [sp, #24]
  40c3e8:	9b06      	ldr	r3, [sp, #24]
  40c3ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c3ec:	4293      	cmp	r3, r2
  40c3ee:	f6bf acf6 	bge.w	40bdde <fill_normal+0xce>
  40c3f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40c3f4:	2300      	movs	r3, #0
  40c3f6:	e5c5      	b.n	40bf84 <fill_normal+0x274>
  40c3f8:	2300      	movs	r3, #0
  40c3fa:	9306      	str	r3, [sp, #24]
  40c3fc:	e7f4      	b.n	40c3e8 <fill_normal+0x6d8>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
  40c3fe:	9c06      	ldr	r4, [sp, #24]
  40c400:	fb00 f804 	mul.w	r8, r0, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40c404:	f3c8 2807 	ubfx	r8, r8, #8, #8
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40c408:	4281      	cmp	r1, r0
  40c40a:	d05c      	beq.n	40c4c6 <fill_normal+0x7b6>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40c40c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  40c410:	d05f      	beq.n	40c4d2 <fill_normal+0x7c2>
  40c412:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c416:	f3cb 03c4 	ubfx	r3, fp, #3, #5
  40c41a:	f3c2 01c4 	ubfx	r1, r2, #3, #5
  40c41e:	f1c8 04ff 	rsb	r4, r8, #255	; 0xff
  40c422:	fb04 f101 	mul.w	r1, r4, r1
  40c426:	fb08 1303 	mla	r3, r8, r3, r1
  40c42a:	3380      	adds	r3, #128	; 0x80
  40c42c:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40c430:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40c434:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c438:	f363 09c7 	bfi	r9, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c43c:	f00b 0307 	and.w	r3, fp, #7
  40c440:	f3cb 3142 	ubfx	r1, fp, #13, #3
  40c444:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40c448:	f002 0707 	and.w	r7, r2, #7
  40c44c:	f3c2 3142 	ubfx	r1, r2, #13, #3
  40c450:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40c454:	fb01 f104 	mul.w	r1, r1, r4
  40c458:	fb03 1308 	mla	r3, r3, r8, r1
  40c45c:	3380      	adds	r3, #128	; 0x80
  40c45e:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40c462:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40c466:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40c46a:	f361 0902 	bfi	r9, r1, #0, #3
  40c46e:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c472:	f363 394f 	bfi	r9, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c476:	f3cb 2304 	ubfx	r3, fp, #8, #5
  40c47a:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40c47e:	fb02 f204 	mul.w	r2, r2, r4
  40c482:	fb03 2408 	mla	r4, r3, r8, r2
  40c486:	3480      	adds	r4, #128	; 0x80
  40c488:	eb04 2304 	add.w	r3, r4, r4, lsl #8
  40c48c:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
  40c490:	f3c4 54c4 	ubfx	r4, r4, #23, #5
  40c494:	f364 290c 	bfi	r9, r4, #8, #5
  40c498:	464b      	mov	r3, r9
                            last_dest_color.full = disp_buf_first[x].full;
  40c49a:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
                            last_mask = *mask_tmp_x;
  40c49e:	4601      	mov	r1, r0
                        disp_buf_first[x] = last_res_color;
  40c4a0:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
                    mask_tmp_x++;
  40c4a4:	f10a 0a01 	add.w	sl, sl, #1
                for(x = 0; x < draw_area_w; x++) {
  40c4a8:	f10c 0c01 	add.w	ip, ip, #1
  40c4ac:	45b4      	cmp	ip, r6
  40c4ae:	da12      	bge.n	40c4d6 <fill_normal+0x7c6>
                    if(*mask_tmp_x) {
  40c4b0:	f89a 0000 	ldrb.w	r0, [sl]
  40c4b4:	2800      	cmp	r0, #0
  40c4b6:	d0f5      	beq.n	40c4a4 <fill_normal+0x794>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40c4b8:	4281      	cmp	r1, r0
  40c4ba:	d0a5      	beq.n	40c408 <fill_normal+0x6f8>
  40c4bc:	28ff      	cmp	r0, #255	; 0xff
  40c4be:	d19e      	bne.n	40c3fe <fill_normal+0x6ee>
  40c4c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40c4c4:	e7a0      	b.n	40c408 <fill_normal+0x6f8>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40c4c6:	b294      	uxth	r4, r2
  40c4c8:	f835 701c 	ldrh.w	r7, [r5, ip, lsl #1]
  40c4cc:	42bc      	cmp	r4, r7
  40c4ce:	d19d      	bne.n	40c40c <fill_normal+0x6fc>
  40c4d0:	e7e6      	b.n	40c4a0 <fill_normal+0x790>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40c4d2:	465b      	mov	r3, fp
  40c4d4:	e7e1      	b.n	40c49a <fill_normal+0x78a>
                disp_buf_first += disp_w;
  40c4d6:	9808      	ldr	r0, [sp, #32]
  40c4d8:	eb05 0540 	add.w	r5, r5, r0, lsl #1
                mask += draw_area_w;
  40c4dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40c4de:	9c07      	ldr	r4, [sp, #28]
  40c4e0:	4420      	add	r0, r4
  40c4e2:	901b      	str	r0, [sp, #108]	; 0x6c
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c4e4:	f10e 0e01 	add.w	lr, lr, #1
  40c4e8:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c4ea:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  40c4ee:	4586      	cmp	lr, r0
  40c4f0:	f73f ac75 	bgt.w	40bdde <fill_normal+0xce>
  40c4f4:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
  40c4f8:	f04f 0c00 	mov.w	ip, #0
  40c4fc:	e7d6      	b.n	40c4ac <fill_normal+0x79c>
  40c4fe:	bf00      	nop

0040c500 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40c500:	2a02      	cmp	r2, #2
  40c502:	d972      	bls.n	40c5ea <color_blend_true_color_additive+0xea>
{
  40c504:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
  40c506:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40c50a:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40c50e:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
  40c510:	2b1f      	cmp	r3, #31
  40c512:	bf28      	it	cs
  40c514:	231f      	movcs	r3, #31
  40c516:	f363 00c7 	bfi	r0, r3, #3, #5
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MATH_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40c51a:	f001 0307 	and.w	r3, r1, #7
  40c51e:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c522:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40c526:	f000 0407 	and.w	r4, r0, #7
  40c52a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c52e:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40c532:	4423      	add	r3, r4
    tmp = LV_MATH_MIN(tmp, 63);
  40c534:	2b3f      	cmp	r3, #63	; 0x3f
  40c536:	bf28      	it	cs
  40c538:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.green_h = tmp >> 3;
  40c53a:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40c53e:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40c542:	f363 304f 	bfi	r0, r3, #13, #3

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
  40c546:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40c54a:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40c54e:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
  40c550:	2b1f      	cmp	r3, #31
  40c552:	bf28      	it	cs
  40c554:	231f      	movcs	r3, #31
  40c556:	f363 200c 	bfi	r0, r3, #8, #5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
  40c55a:	2aff      	cmp	r2, #255	; 0xff
  40c55c:	d043      	beq.n	40c5e6 <color_blend_true_color_additive+0xe6>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c55e:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40c562:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40c566:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40c56a:	fb06 f404 	mul.w	r4, r6, r4
  40c56e:	fb02 4303 	mla	r3, r2, r3, r4
  40c572:	3380      	adds	r3, #128	; 0x80
  40c574:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c578:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c57c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c580:	f04f 0500 	mov.w	r5, #0
  40c584:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c588:	f000 0407 	and.w	r4, r0, #7
  40c58c:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40c590:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c594:	f001 0707 	and.w	r7, r1, #7
  40c598:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c59c:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40c5a0:	fb04 f406 	mul.w	r4, r4, r6
  40c5a4:	fb03 4302 	mla	r3, r3, r2, r4
  40c5a8:	3380      	adds	r3, #128	; 0x80
  40c5aa:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c5ae:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c5b2:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40c5b6:	f364 0502 	bfi	r5, r4, #0, #3
  40c5ba:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c5be:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c5c2:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c5c6:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40c5ca:	fb04 f406 	mul.w	r4, r4, r6
  40c5ce:	fb03 4202 	mla	r2, r3, r2, r4
  40c5d2:	3280      	adds	r2, #128	; 0x80
  40c5d4:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40c5d8:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40c5dc:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c5e0:	f362 250c 	bfi	r5, r2, #8, #5
  40c5e4:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40c5e6:	bcf0      	pop	{r4, r5, r6, r7}
  40c5e8:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40c5ea:	4608      	mov	r0, r1
  40c5ec:	4770      	bx	lr

0040c5ee <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40c5ee:	2a02      	cmp	r2, #2
  40c5f0:	d96f      	bls.n	40c6d2 <color_blend_true_color_subtractive+0xe4>
{
  40c5f2:	b4f0      	push	{r4, r5, r6, r7}

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
  40c5f4:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40c5f8:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40c5fc:	1b1b      	subs	r3, r3, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
  40c5fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c602:	f363 00c7 	bfi	r0, r3, #3, #5

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MATH_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40c606:	f001 0307 	and.w	r3, r1, #7
  40c60a:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c60e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40c612:	f000 0407 	and.w	r4, r0, #7
  40c616:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c61a:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40c61e:	4423      	add	r3, r4
    tmp = LV_MATH_MAX(tmp, 0);
  40c620:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
  40c624:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40c628:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40c62c:	f363 304f 	bfi	r0, r3, #13, #3
#endif

    tmp = bg.ch.blue - fg.ch.blue;
  40c630:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40c634:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40c638:	1b1b      	subs	r3, r3, r4
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
  40c63a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c63e:	f363 200c 	bfi	r0, r3, #8, #5

    if(opa == LV_OPA_COVER) return fg;
  40c642:	2aff      	cmp	r2, #255	; 0xff
  40c644:	d043      	beq.n	40c6ce <color_blend_true_color_subtractive+0xe0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c646:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40c64a:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40c64e:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40c652:	fb06 f404 	mul.w	r4, r6, r4
  40c656:	fb02 4303 	mla	r3, r2, r3, r4
  40c65a:	3380      	adds	r3, #128	; 0x80
  40c65c:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c660:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c664:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c668:	f04f 0500 	mov.w	r5, #0
  40c66c:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c670:	f000 0407 	and.w	r4, r0, #7
  40c674:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40c678:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c67c:	f001 0707 	and.w	r7, r1, #7
  40c680:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c684:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40c688:	fb04 f406 	mul.w	r4, r4, r6
  40c68c:	fb03 4302 	mla	r3, r3, r2, r4
  40c690:	3380      	adds	r3, #128	; 0x80
  40c692:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c696:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c69a:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40c69e:	f364 0502 	bfi	r5, r4, #0, #3
  40c6a2:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c6a6:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c6aa:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c6ae:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40c6b2:	fb04 f406 	mul.w	r4, r4, r6
  40c6b6:	fb03 4202 	mla	r2, r3, r2, r4
  40c6ba:	3280      	adds	r2, #128	; 0x80
  40c6bc:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40c6c0:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40c6c4:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c6c8:	f362 250c 	bfi	r5, r2, #8, #5
  40c6cc:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40c6ce:	bcf0      	pop	{r4, r5, r6, r7}
  40c6d0:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40c6d2:	4608      	mov	r0, r1
  40c6d4:	4770      	bx	lr
	...

0040c6d8 <fill_blended>:
{
  40c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c6dc:	b085      	sub	sp, #20
  40c6de:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
  40c6e2:	9400      	str	r4, [sp, #0]
  40c6e4:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c6e8:	8884      	ldrh	r4, [r0, #4]
  40c6ea:	8800      	ldrh	r0, [r0, #0]
  40c6ec:	1a20      	subs	r0, r4, r0
  40c6ee:	b280      	uxth	r0, r0
  40c6f0:	3001      	adds	r0, #1
  40c6f2:	b200      	sxth	r0, r0
  40c6f4:	9002      	str	r0, [sp, #8]
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40c6f6:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40c6fa:	fb0b f000 	mul.w	r0, fp, r0
  40c6fe:	eb01 0540 	add.w	r5, r1, r0, lsl #1
    switch(mode) {
  40c702:	2e01      	cmp	r6, #1
  40c704:	d004      	beq.n	40c710 <fill_blended+0x38>
  40c706:	2e02      	cmp	r6, #2
  40c708:	d01b      	beq.n	40c742 <fill_blended+0x6a>
}
  40c70a:	b005      	add	sp, #20
  40c70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40c710:	f8df a154 	ldr.w	sl, [pc, #340]	; 40c868 <fill_blended+0x190>
  40c714:	f8ad 3006 	strh.w	r3, [sp, #6]
  40c718:	4690      	mov	r8, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40c71a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  40c71e:	2b01      	cmp	r3, #1
  40c720:	d012      	beq.n	40c748 <fill_blended+0x70>
  40c722:	8893      	ldrh	r3, [r2, #4]
  40c724:	f9b2 2000 	ldrsh.w	r2, [r2]
  40c728:	b294      	uxth	r4, r2
  40c72a:	1b1b      	subs	r3, r3, r4
  40c72c:	b29b      	uxth	r3, r3
  40c72e:	3301      	adds	r3, #1
  40c730:	b21b      	sxth	r3, r3
  40c732:	9303      	str	r3, [sp, #12]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40c734:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40c736:	1abf      	subs	r7, r7, r2
        last_dest_color.full = disp_buf_tmp[0].full;
  40c738:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
  40c73c:	4686      	mov	lr, r0
        lv_opa_t last_mask = LV_OPA_TRANSP;
  40c73e:	2100      	movs	r1, #0
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c740:	e089      	b.n	40c856 <fill_blended+0x17e>
            blend_fp = color_blend_true_color_subtractive;
  40c742:	f8df a128 	ldr.w	sl, [pc, #296]	; 40c86c <fill_blended+0x194>
  40c746:	e7e5      	b.n	40c714 <fill_blended+0x3c>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
  40c748:	f04f 0600 	mov.w	r6, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c74c:	f8bd 4006 	ldrh.w	r4, [sp, #6]
  40c750:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40c754:	9900      	ldr	r1, [sp, #0]
  40c756:	fb01 f303 	mul.w	r3, r1, r3
  40c75a:	3380      	adds	r3, #128	; 0x80
  40c75c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c760:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c764:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c768:	4630      	mov	r0, r6
  40c76a:	f363 00c7 	bfi	r0, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c76e:	f004 0207 	and.w	r2, r4, #7
  40c772:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40c776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c77a:	fb03 f301 	mul.w	r3, r3, r1
  40c77e:	3380      	adds	r3, #128	; 0x80
  40c780:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c784:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c788:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40c78c:	f362 0002 	bfi	r0, r2, #0, #3
  40c790:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c794:	f363 304f 	bfi	r0, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c798:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40c79c:	fb03 f301 	mul.w	r3, r3, r1
  40c7a0:	3380      	adds	r3, #128	; 0x80
  40c7a2:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c7a6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c7aa:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c7ae:	f363 200c 	bfi	r0, r3, #8, #5
  40c7b2:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40c7b6:	e018      	b.n	40c7ea <fill_blended+0x112>
                disp_buf_tmp[x] = last_res_color;
  40c7b8:	8038      	strh	r0, [r7, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c7ba:	3401      	adds	r4, #1
  40c7bc:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c7c0:	429c      	cmp	r4, r3
  40c7c2:	dc0e      	bgt.n	40c7e2 <fill_blended+0x10a>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  40c7c4:	b2b3      	uxth	r3, r6
  40c7c6:	eb05 0744 	add.w	r7, r5, r4, lsl #1
  40c7ca:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
  40c7ce:	4293      	cmp	r3, r2
  40c7d0:	d0f2      	beq.n	40c7b8 <fill_blended+0xe0>
                    last_dest_color = disp_buf_tmp[x];
  40c7d2:	f835 6014 	ldrh.w	r6, [r5, r4, lsl #1]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
  40c7d6:	9a00      	ldr	r2, [sp, #0]
  40c7d8:	4631      	mov	r1, r6
  40c7da:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c7de:	47d0      	blx	sl
  40c7e0:	e7ea      	b.n	40c7b8 <fill_blended+0xe0>
            disp_buf_tmp += disp_w;
  40c7e2:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c7e6:	f10b 0b01 	add.w	fp, fp, #1
  40c7ea:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c7ee:	459b      	cmp	fp, r3
  40c7f0:	dc8b      	bgt.n	40c70a <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c7f2:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c7f6:	e7e1      	b.n	40c7bc <fill_blended+0xe4>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c7f8:	fa1f f38e 	uxth.w	r3, lr
  40c7fc:	f835 c014 	ldrh.w	ip, [r5, r4, lsl #1]
  40c800:	4563      	cmp	r3, ip
  40c802:	d119      	bne.n	40c838 <fill_blended+0x160>
  40c804:	e009      	b.n	40c81a <fill_blended+0x142>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c806:	9a00      	ldr	r2, [sp, #0]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
  40c808:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
  40c80c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c810:	47d0      	blx	sl
                    last_mask = mask_tmp[x];
  40c812:	f899 1000 	ldrb.w	r1, [r9]
                    last_dest_color.full = disp_buf_tmp[x].full;
  40c816:	f835 e016 	ldrh.w	lr, [r5, r6, lsl #1]
                disp_buf_tmp[x] = last_res_color;
  40c81a:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c81e:	3401      	adds	r4, #1
  40c820:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c824:	429c      	cmp	r4, r3
  40c826:	dc0f      	bgt.n	40c848 <fill_blended+0x170>
                if(mask_tmp[x] == 0) continue;
  40c828:	4626      	mov	r6, r4
  40c82a:	eb07 0904 	add.w	r9, r7, r4
  40c82e:	5d3a      	ldrb	r2, [r7, r4]
  40c830:	2a00      	cmp	r2, #0
  40c832:	d0f4      	beq.n	40c81e <fill_blended+0x146>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c834:	4291      	cmp	r1, r2
  40c836:	d0df      	beq.n	40c7f8 <fill_blended+0x120>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c838:	2afc      	cmp	r2, #252	; 0xfc
  40c83a:	d8e4      	bhi.n	40c806 <fill_blended+0x12e>
  40c83c:	9b00      	ldr	r3, [sp, #0]
  40c83e:	fb02 f203 	mul.w	r2, r2, r3
  40c842:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40c846:	e7df      	b.n	40c808 <fill_blended+0x130>
            disp_buf_tmp += disp_w;
  40c848:	9b02      	ldr	r3, [sp, #8]
  40c84a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            mask_tmp += draw_area_w;
  40c84e:	9b03      	ldr	r3, [sp, #12]
  40c850:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c852:	f10b 0b01 	add.w	fp, fp, #1
  40c856:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c85a:	459b      	cmp	fp, r3
  40c85c:	f73f af55 	bgt.w	40c70a <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c860:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c864:	e7dc      	b.n	40c820 <fill_blended+0x148>
  40c866:	bf00      	nop
  40c868:	0040c501 	.word	0x0040c501
  40c86c:	0040c5ef 	.word	0x0040c5ef

0040c870 <_lv_blend_fill>:
{
  40c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c874:	b08b      	sub	sp, #44	; 0x2c
  40c876:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40c87a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40c87e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40c882:	2d01      	cmp	r5, #1
  40c884:	d900      	bls.n	40c888 <_lv_blend_fill+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40c886:	b916      	cbnz	r6, 40c88e <_lv_blend_fill+0x1e>
}
  40c888:	b00b      	add	sp, #44	; 0x2c
  40c88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c88e:	461c      	mov	r4, r3
  40c890:	f8ad 201e 	strh.w	r2, [sp, #30]
  40c894:	9106      	str	r1, [sp, #24]
  40c896:	9005      	str	r0, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c898:	4b37      	ldr	r3, [pc, #220]	; (40c978 <_lv_blend_fill+0x108>)
  40c89a:	4798      	blx	r3
  40c89c:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c89e:	4b37      	ldr	r3, [pc, #220]	; (40c97c <_lv_blend_fill+0x10c>)
  40c8a0:	4798      	blx	r3
  40c8a2:	4680      	mov	r8, r0
    const lv_area_t * disp_area = &vdb->area;
  40c8a4:	f100 0a10 	add.w	sl, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40c8a8:	f8d0 b008 	ldr.w	fp, [r0, #8]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40c8ac:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  40c8b0:	b10b      	cbz	r3, 40c8b6 <_lv_blend_fill+0x46>
  40c8b2:	4648      	mov	r0, r9
  40c8b4:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
  40c8b6:	9a06      	ldr	r2, [sp, #24]
  40c8b8:	9905      	ldr	r1, [sp, #20]
  40c8ba:	a808      	add	r0, sp, #32
  40c8bc:	4b30      	ldr	r3, [pc, #192]	; (40c980 <_lv_blend_fill+0x110>)
  40c8be:	4798      	blx	r3
    if(!is_common) return;
  40c8c0:	2800      	cmp	r0, #0
  40c8c2:	d0e1      	beq.n	40c888 <_lv_blend_fill+0x18>
    draw_area.x1 -= disp_area->x1;
  40c8c4:	f8b8 e010 	ldrh.w	lr, [r8, #16]
  40c8c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40c8cc:	eba2 020e 	sub.w	r2, r2, lr
  40c8d0:	b292      	uxth	r2, r2
  40c8d2:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40c8d6:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  40c8da:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40c8de:	1a09      	subs	r1, r1, r0
  40c8e0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40c8e4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c8e8:	eba3 030e 	sub.w	r3, r3, lr
  40c8ec:	b29b      	uxth	r3, r3
  40c8ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40c8f2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40c8f6:	1a09      	subs	r1, r1, r0
  40c8f8:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40c8fc:	b1ac      	cbz	r4, 40c92a <_lv_blend_fill+0xba>
  40c8fe:	f899 1008 	ldrb.w	r1, [r9, #8]
  40c902:	f011 0f01 	tst.w	r1, #1
  40c906:	d110      	bne.n	40c92a <_lv_blend_fill+0xba>
  40c908:	1a9a      	subs	r2, r3, r2
  40c90a:	b292      	uxth	r2, r2
  40c90c:	3201      	adds	r2, #1
  40c90e:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40c910:	2300      	movs	r3, #0
  40c912:	e002      	b.n	40c91a <_lv_blend_fill+0xaa>
  40c914:	2000      	movs	r0, #0
  40c916:	7008      	strb	r0, [r1, #0]
  40c918:	3301      	adds	r3, #1
  40c91a:	4293      	cmp	r3, r2
  40c91c:	da05      	bge.n	40c92a <_lv_blend_fill+0xba>
  40c91e:	18e1      	adds	r1, r4, r3
  40c920:	5ce0      	ldrb	r0, [r4, r3]
  40c922:	2880      	cmp	r0, #128	; 0x80
  40c924:	d9f6      	bls.n	40c914 <_lv_blend_fill+0xa4>
  40c926:	20ff      	movs	r0, #255	; 0xff
  40c928:	e7f5      	b.n	40c916 <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
  40c92a:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40c92e:	b153      	cbz	r3, 40c946 <_lv_blend_fill+0xd6>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c930:	9602      	str	r6, [sp, #8]
  40c932:	9401      	str	r4, [sp, #4]
  40c934:	9500      	str	r5, [sp, #0]
  40c936:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c93a:	aa08      	add	r2, sp, #32
  40c93c:	4659      	mov	r1, fp
  40c93e:	4650      	mov	r0, sl
  40c940:	4c10      	ldr	r4, [pc, #64]	; (40c984 <_lv_blend_fill+0x114>)
  40c942:	47a0      	blx	r4
  40c944:	e7a0      	b.n	40c888 <_lv_blend_fill+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40c946:	b957      	cbnz	r7, 40c95e <_lv_blend_fill+0xee>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c948:	9602      	str	r6, [sp, #8]
  40c94a:	9401      	str	r4, [sp, #4]
  40c94c:	9500      	str	r5, [sp, #0]
  40c94e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c952:	aa08      	add	r2, sp, #32
  40c954:	4659      	mov	r1, fp
  40c956:	4650      	mov	r0, sl
  40c958:	4c0b      	ldr	r4, [pc, #44]	; (40c988 <_lv_blend_fill+0x118>)
  40c95a:	47a0      	blx	r4
  40c95c:	e794      	b.n	40c888 <_lv_blend_fill+0x18>
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
  40c95e:	9703      	str	r7, [sp, #12]
  40c960:	9602      	str	r6, [sp, #8]
  40c962:	9401      	str	r4, [sp, #4]
  40c964:	9500      	str	r5, [sp, #0]
  40c966:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c96a:	aa08      	add	r2, sp, #32
  40c96c:	4659      	mov	r1, fp
  40c96e:	4650      	mov	r0, sl
  40c970:	4c06      	ldr	r4, [pc, #24]	; (40c98c <_lv_blend_fill+0x11c>)
  40c972:	47a0      	blx	r4
  40c974:	e788      	b.n	40c888 <_lv_blend_fill+0x18>
  40c976:	bf00      	nop
  40c978:	004097a1 	.word	0x004097a1
  40c97c:	00414df5 	.word	0x00414df5
  40c980:	004155b3 	.word	0x004155b3
  40c984:	0040b341 	.word	0x0040b341
  40c988:	0040bd11 	.word	0x0040bd11
  40c98c:	0040c6d9 	.word	0x0040c6d9

0040c990 <_lv_blend_map>:
{
  40c990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c994:	b08b      	sub	sp, #44	; 0x2c
  40c996:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40c99a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40c99e:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40c9a2:	2d01      	cmp	r5, #1
  40c9a4:	d900      	bls.n	40c9a8 <_lv_blend_map+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40c9a6:	b916      	cbnz	r6, 40c9ae <_lv_blend_map+0x1e>
}
  40c9a8:	b00b      	add	sp, #44	; 0x2c
  40c9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9ae:	461c      	mov	r4, r3
  40c9b0:	4617      	mov	r7, r2
  40c9b2:	460a      	mov	r2, r1
  40c9b4:	9106      	str	r1, [sp, #24]
  40c9b6:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
  40c9b8:	a808      	add	r0, sp, #32
  40c9ba:	4b37      	ldr	r3, [pc, #220]	; (40ca98 <_lv_blend_map+0x108>)
  40c9bc:	4798      	blx	r3
    if(!is_common) return;
  40c9be:	2800      	cmp	r0, #0
  40c9c0:	d0f2      	beq.n	40c9a8 <_lv_blend_map+0x18>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c9c2:	4b36      	ldr	r3, [pc, #216]	; (40ca9c <_lv_blend_map+0x10c>)
  40c9c4:	4798      	blx	r3
  40c9c6:	4682      	mov	sl, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c9c8:	4b35      	ldr	r3, [pc, #212]	; (40caa0 <_lv_blend_map+0x110>)
  40c9ca:	4798      	blx	r3
  40c9cc:	4681      	mov	r9, r0
    const lv_area_t * disp_area = &vdb->area;
  40c9ce:	f100 0b10 	add.w	fp, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40c9d2:	6883      	ldr	r3, [r0, #8]
  40c9d4:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40c9d6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40c9da:	b10b      	cbz	r3, 40c9e0 <_lv_blend_map+0x50>
  40c9dc:	4650      	mov	r0, sl
  40c9de:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
  40c9e0:	f8b9 e010 	ldrh.w	lr, [r9, #16]
  40c9e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40c9e8:	eba2 020e 	sub.w	r2, r2, lr
  40c9ec:	b292      	uxth	r2, r2
  40c9ee:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40c9f2:	f8b9 0012 	ldrh.w	r0, [r9, #18]
  40c9f6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40c9fa:	1a09      	subs	r1, r1, r0
  40c9fc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40ca00:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40ca04:	eba3 030e 	sub.w	r3, r3, lr
  40ca08:	b29b      	uxth	r3, r3
  40ca0a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40ca0e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40ca12:	1a09      	subs	r1, r1, r0
  40ca14:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40ca18:	b1ac      	cbz	r4, 40ca46 <_lv_blend_map+0xb6>
  40ca1a:	f89a 1008 	ldrb.w	r1, [sl, #8]
  40ca1e:	f011 0f01 	tst.w	r1, #1
  40ca22:	d110      	bne.n	40ca46 <_lv_blend_map+0xb6>
  40ca24:	1a9a      	subs	r2, r3, r2
  40ca26:	b292      	uxth	r2, r2
  40ca28:	3201      	adds	r2, #1
  40ca2a:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40ca2c:	2300      	movs	r3, #0
  40ca2e:	e002      	b.n	40ca36 <_lv_blend_map+0xa6>
  40ca30:	2000      	movs	r0, #0
  40ca32:	7008      	strb	r0, [r1, #0]
  40ca34:	3301      	adds	r3, #1
  40ca36:	4293      	cmp	r3, r2
  40ca38:	da05      	bge.n	40ca46 <_lv_blend_map+0xb6>
  40ca3a:	18e1      	adds	r1, r4, r3
  40ca3c:	5ce0      	ldrb	r0, [r4, r3]
  40ca3e:	2880      	cmp	r0, #128	; 0x80
  40ca40:	d9f6      	bls.n	40ca30 <_lv_blend_map+0xa0>
  40ca42:	20ff      	movs	r0, #255	; 0xff
  40ca44:	e7f5      	b.n	40ca32 <_lv_blend_map+0xa2>
    if(disp->driver.set_px_cb) {
  40ca46:	f8da 3014 	ldr.w	r3, [sl, #20]
  40ca4a:	b153      	cbz	r3, 40ca62 <_lv_blend_map+0xd2>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40ca4c:	9603      	str	r6, [sp, #12]
  40ca4e:	9402      	str	r4, [sp, #8]
  40ca50:	9501      	str	r5, [sp, #4]
  40ca52:	9700      	str	r7, [sp, #0]
  40ca54:	9b06      	ldr	r3, [sp, #24]
  40ca56:	aa08      	add	r2, sp, #32
  40ca58:	9907      	ldr	r1, [sp, #28]
  40ca5a:	4658      	mov	r0, fp
  40ca5c:	4c11      	ldr	r4, [pc, #68]	; (40caa4 <_lv_blend_map+0x114>)
  40ca5e:	47a0      	blx	r4
  40ca60:	e7a2      	b.n	40c9a8 <_lv_blend_map+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40ca62:	f1b8 0f00 	cmp.w	r8, #0
  40ca66:	d10a      	bne.n	40ca7e <_lv_blend_map+0xee>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40ca68:	9603      	str	r6, [sp, #12]
  40ca6a:	9402      	str	r4, [sp, #8]
  40ca6c:	9501      	str	r5, [sp, #4]
  40ca6e:	9700      	str	r7, [sp, #0]
  40ca70:	9b06      	ldr	r3, [sp, #24]
  40ca72:	aa08      	add	r2, sp, #32
  40ca74:	9907      	ldr	r1, [sp, #28]
  40ca76:	4658      	mov	r0, fp
  40ca78:	4c0b      	ldr	r4, [pc, #44]	; (40caa8 <_lv_blend_map+0x118>)
  40ca7a:	47a0      	blx	r4
  40ca7c:	e794      	b.n	40c9a8 <_lv_blend_map+0x18>
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
  40ca7e:	f8cd 8010 	str.w	r8, [sp, #16]
  40ca82:	9603      	str	r6, [sp, #12]
  40ca84:	9402      	str	r4, [sp, #8]
  40ca86:	9501      	str	r5, [sp, #4]
  40ca88:	9700      	str	r7, [sp, #0]
  40ca8a:	9b06      	ldr	r3, [sp, #24]
  40ca8c:	aa08      	add	r2, sp, #32
  40ca8e:	9907      	ldr	r1, [sp, #28]
  40ca90:	4658      	mov	r0, fp
  40ca92:	4c06      	ldr	r4, [pc, #24]	; (40caac <_lv_blend_map+0x11c>)
  40ca94:	47a0      	blx	r4
  40ca96:	e787      	b.n	40c9a8 <_lv_blend_map+0x18>
  40ca98:	004155b3 	.word	0x004155b3
  40ca9c:	004097a1 	.word	0x004097a1
  40caa0:	00414df5 	.word	0x00414df5
  40caa4:	0040b425 	.word	0x0040b425
  40caa8:	0040b55d 	.word	0x0040b55d
  40caac:	0040b1f5 	.word	0x0040b1f5

0040cab0 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
  40cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cab4:	b0bd      	sub	sp, #244	; 0xf4
  40cab6:	9016      	str	r0, [sp, #88]	; 0x58
  40cab8:	911f      	str	r1, [sp, #124]	; 0x7c
  40caba:	4616      	mov	r6, r2
  40cabc:	930a      	str	r3, [sp, #40]	; 0x28
  40cabe:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
  40cac2:	930d      	str	r3, [sp, #52]	; 0x34
  40cac4:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
  40cac8:	9308      	str	r3, [sp, #32]
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40caca:	aa3a      	add	r2, sp, #232	; 0xe8
  40cacc:	2308      	movs	r3, #8
  40cace:	e004      	b.n	40cada <lv_draw_map+0x2a>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40cad0:	f811 0b01 	ldrb.w	r0, [r1], #1
  40cad4:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
  40cad8:	3b01      	subs	r3, #1
    while(len) {
  40cada:	2b00      	cmp	r3, #0
  40cadc:	d1f8      	bne.n	40cad0 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40cade:	4ba6      	ldr	r3, [pc, #664]	; (40cd78 <lv_draw_map+0x2c8>)
  40cae0:	4798      	blx	r3
  40cae2:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40cae4:	4ba5      	ldr	r3, [pc, #660]	; (40cd7c <lv_draw_map+0x2cc>)
  40cae6:	4798      	blx	r3
  40cae8:	9014      	str	r0, [sp, #80]	; 0x50
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
  40caea:	8a01      	ldrh	r1, [r0, #16]
  40caec:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40caf0:	1a5b      	subs	r3, r3, r1
  40caf2:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40caf6:	8a42      	ldrh	r2, [r0, #18]
  40caf8:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40cafc:	1a9b      	subs	r3, r3, r2
  40cafe:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40cb02:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40cb06:	1a5b      	subs	r3, r3, r1
  40cb08:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40cb0c:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40cb10:	1a9b      	subs	r3, r3, r2
  40cb12:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40cb16:	4b9a      	ldr	r3, [pc, #616]	; (40cd80 <lv_draw_map+0x2d0>)
  40cb18:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
  40cb1a:	9015      	str	r0, [sp, #84]	; 0x54
  40cb1c:	b930      	cbnz	r0, 40cb2c <lv_draw_map+0x7c>
  40cb1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cb20:	8853      	ldrh	r3, [r2, #2]
  40cb22:	b91b      	cbnz	r3, 40cb2c <lv_draw_map+0x7c>
  40cb24:	8913      	ldrh	r3, [r2, #8]
  40cb26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40cb2a:	d055      	beq.n	40cbd8 <lv_draw_map+0x128>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40cb2c:	9b08      	ldr	r3, [sp, #32]
  40cb2e:	2b00      	cmp	r3, #0
  40cb30:	d068      	beq.n	40cc04 <lv_draw_map+0x154>
  40cb32:	2303      	movs	r3, #3
  40cb34:	9307      	str	r3, [sp, #28]
  40cb36:	9916      	ldr	r1, [sp, #88]	; 0x58
  40cb38:	888d      	ldrh	r5, [r1, #4]
  40cb3a:	f9b1 2000 	ldrsh.w	r2, [r1]
  40cb3e:	b293      	uxth	r3, r2
  40cb40:	1aed      	subs	r5, r5, r3
  40cb42:	b2ad      	uxth	r5, r5
  40cb44:	3501      	adds	r5, #1
  40cb46:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
  40cb48:	9519      	str	r5, [sp, #100]	; 0x64
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40cb4a:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
  40cb4e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40cb52:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40cb54:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  40cb58:	1a5b      	subs	r3, r3, r1
  40cb5a:	1ac3      	subs	r3, r0, r3
  40cb5c:	fb03 f305 	mul.w	r3, r3, r5
  40cb60:	9f07      	ldr	r7, [sp, #28]
  40cb62:	971a      	str	r7, [sp, #104]	; 0x68
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  40cb64:	f9bd c0e8 	ldrsh.w	ip, [sp, #232]	; 0xe8
  40cb68:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
  40cb6c:	eba2 020e 	sub.w	r2, r2, lr
  40cb70:	ebac 0202 	sub.w	r2, ip, r2
  40cb74:	fb02 f207 	mul.w	r2, r2, r7
  40cb78:	fb07 2303 	mla	r3, r7, r3, r2
  40cb7c:	18f3      	adds	r3, r6, r3
  40cb7e:	9311      	str	r3, [sp, #68]	; 0x44
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
  40cb80:	fa1f f78c 	uxth.w	r7, ip
  40cb84:	fa17 f38e 	uxtah	r3, r7, lr
  40cb88:	b29b      	uxth	r3, r3
  40cb8a:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  40cb8e:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40cb92:	1bd2      	subs	r2, r2, r7
  40cb94:	b292      	uxth	r2, r2
  40cb96:	3201      	adds	r2, #1
  40cb98:	b292      	uxth	r2, r2
  40cb9a:	fa0f f982 	sxth.w	r9, r2
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
  40cb9e:	4413      	add	r3, r2
  40cba0:	b29b      	uxth	r3, r3
  40cba2:	3b01      	subs	r3, #1
  40cba4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        blend_area.y1 = disp_area->y1 + draw_area.y1;
  40cba8:	b280      	uxth	r0, r0
  40cbaa:	fa10 f381 	uxtah	r3, r0, r1
  40cbae:	b21b      	sxth	r3, r3
  40cbb0:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        blend_area.y2 = blend_area.y1;
  40cbb4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40cbb8:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40cbbc:	1a1b      	subs	r3, r3, r0
  40cbbe:	b29b      	uxth	r3, r3
  40cbc0:	3301      	adds	r3, #1
  40cbc2:	b21b      	sxth	r3, r3
  40cbc4:	9318      	str	r3, [sp, #96]	; 0x60

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40cbc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cbc8:	8853      	ldrh	r3, [r2, #2]
  40cbca:	b9f3      	cbnz	r3, 40cc0a <lv_draw_map+0x15a>
  40cbcc:	8913      	ldrh	r3, [r2, #8]
  40cbce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40cbd2:	d051      	beq.n	40cc78 <lv_draw_map+0x1c8>
  40cbd4:	2301      	movs	r3, #1
  40cbd6:	e019      	b.n	40cc0c <lv_draw_map+0x15c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
  40cbd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cbda:	2b00      	cmp	r3, #0
  40cbdc:	d1a6      	bne.n	40cb2c <lv_draw_map+0x7c>
  40cbde:	9b08      	ldr	r3, [sp, #32]
  40cbe0:	2b00      	cmp	r3, #0
  40cbe2:	d1a3      	bne.n	40cb2c <lv_draw_map+0x7c>
  40cbe4:	7a93      	ldrb	r3, [r2, #10]
  40cbe6:	2b00      	cmp	r3, #0
  40cbe8:	d1a0      	bne.n	40cb2c <lv_draw_map+0x7c>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
  40cbea:	7b93      	ldrb	r3, [r2, #14]
  40cbec:	9302      	str	r3, [sp, #8]
  40cbee:	7813      	ldrb	r3, [r2, #0]
  40cbf0:	9301      	str	r3, [sp, #4]
  40cbf2:	2301      	movs	r3, #1
  40cbf4:	9300      	str	r3, [sp, #0]
  40cbf6:	2300      	movs	r3, #0
  40cbf8:	4632      	mov	r2, r6
  40cbfa:	9916      	ldr	r1, [sp, #88]	; 0x58
  40cbfc:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40cbfe:	4c61      	ldr	r4, [pc, #388]	; (40cd84 <lv_draw_map+0x2d4>)
  40cc00:	47a0      	blx	r4
  40cc02:	e368      	b.n	40d2d6 <lv_draw_map+0x826>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40cc04:	2302      	movs	r3, #2
  40cc06:	9307      	str	r3, [sp, #28]
  40cc08:	e795      	b.n	40cb36 <lv_draw_map+0x86>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40cc0a:	2301      	movs	r3, #1
  40cc0c:	9306      	str	r3, [sp, #24]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40cc0e:	f083 0301 	eor.w	r3, r3, #1
  40cc12:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40cc14:	2a00      	cmp	r2, #0
  40cc16:	bf14      	ite	ne
  40cc18:	2300      	movne	r3, #0
  40cc1a:	f003 0301 	andeq.w	r3, r3, #1
  40cc1e:	b133      	cbz	r3, 40cc2e <lv_draw_map+0x17e>
  40cc20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cc22:	b923      	cbnz	r3, 40cc2e <lv_draw_map+0x17e>
  40cc24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cc26:	7a9b      	ldrb	r3, [r3, #10]
  40cc28:	b90b      	cbnz	r3, 40cc2e <lv_draw_map+0x17e>
  40cc2a:	9b08      	ldr	r3, [sp, #32]
  40cc2c:	bb33      	cbnz	r3, 40cc7c <lv_draw_map+0x1cc>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40cc2e:	4640      	mov	r0, r8
  40cc30:	4b55      	ldr	r3, [pc, #340]	; (40cd88 <lv_draw_map+0x2d8>)
  40cc32:	4798      	blx	r3
  40cc34:	4604      	mov	r4, r0
  40cc36:	9017      	str	r0, [sp, #92]	; 0x5c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40cc38:	a83a      	add	r0, sp, #232	; 0xe8
  40cc3a:	4b54      	ldr	r3, [pc, #336]	; (40cd8c <lv_draw_map+0x2dc>)
  40cc3c:	4798      	blx	r3
  40cc3e:	4284      	cmp	r4, r0
  40cc40:	f080 80ac 	bcs.w	40cd9c <lv_draw_map+0x2ec>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40cc44:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  40cc46:	0078      	lsls	r0, r7, #1
  40cc48:	4c51      	ldr	r4, [pc, #324]	; (40cd90 <lv_draw_map+0x2e0>)
  40cc4a:	47a0      	blx	r4
  40cc4c:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40cc4e:	4638      	mov	r0, r7
  40cc50:	47a0      	blx	r4
  40cc52:	4682      	mov	sl, r0

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  40cc54:	214c      	movs	r1, #76	; 0x4c
  40cc56:	a827      	add	r0, sp, #156	; 0x9c
  40cc58:	4b4e      	ldr	r3, [pc, #312]	; (40cd94 <lv_draw_map+0x2e4>)
  40cc5a:	4798      	blx	r3
            if(transform) {
  40cc5c:	9b06      	ldr	r3, [sp, #24]
  40cc5e:	2b00      	cmp	r3, #0
  40cc60:	f000 80ca 	beq.w	40cdf8 <lv_draw_map+0x348>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40cc64:	9b08      	ldr	r3, [sp, #32]
  40cc66:	2b00      	cmp	r3, #0
  40cc68:	f040 809d 	bne.w	40cda6 <lv_draw_map+0x2f6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40cc6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cc6e:	2b00      	cmp	r3, #0
  40cc70:	f040 80f3 	bne.w	40ce5a <lv_draw_map+0x3aa>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
  40cc74:	2204      	movs	r2, #4
  40cc76:	e097      	b.n	40cda8 <lv_draw_map+0x2f8>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40cc78:	2300      	movs	r3, #0
  40cc7a:	e7c7      	b.n	40cc0c <lv_draw_map+0x15c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40cc7c:	4640      	mov	r0, r8
  40cc7e:	4b42      	ldr	r3, [pc, #264]	; (40cd88 <lv_draw_map+0x2d8>)
  40cc80:	4798      	blx	r3
  40cc82:	4604      	mov	r4, r0
  40cc84:	4680      	mov	r8, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40cc86:	a83a      	add	r0, sp, #232	; 0xe8
  40cc88:	4b40      	ldr	r3, [pc, #256]	; (40cd8c <lv_draw_map+0x2dc>)
  40cc8a:	4798      	blx	r3
  40cc8c:	4284      	cmp	r4, r0
  40cc8e:	d20e      	bcs.n	40ccae <lv_draw_map+0x1fe>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40cc90:	ea4f 0048 	mov.w	r0, r8, lsl #1
  40cc94:	4c3e      	ldr	r4, [pc, #248]	; (40cd90 <lv_draw_map+0x2e0>)
  40cc96:	47a0      	blx	r4
  40cc98:	4605      	mov	r5, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40cc9a:	4640      	mov	r0, r8
  40cc9c:	47a0      	blx	r4
  40cc9e:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
  40cca0:	2600      	movs	r6, #0
        uint32_t px_i = 0;
  40cca2:	4632      	mov	r2, r6
  40cca4:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40cca8:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
            for(y = 0; y < draw_area_h; y++) {
  40ccac:	e02b      	b.n	40cd06 <lv_draw_map+0x256>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40ccae:	a83a      	add	r0, sp, #232	; 0xe8
  40ccb0:	4b36      	ldr	r3, [pc, #216]	; (40cd8c <lv_draw_map+0x2dc>)
  40ccb2:	4798      	blx	r3
  40ccb4:	4680      	mov	r8, r0
  40ccb6:	e7eb      	b.n	40cc90 <lv_draw_map+0x1e0>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40ccb8:	3101      	adds	r1, #1
  40ccba:	443b      	add	r3, r7
  40ccbc:	3201      	adds	r2, #1
  40ccbe:	4549      	cmp	r1, r9
  40ccc0:	da0b      	bge.n	40ccda <lv_draw_map+0x22a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40ccc2:	7898      	ldrb	r0, [r3, #2]
                    mask_buf[px_i] = px_opa;
  40ccc4:	54a0      	strb	r0, [r4, r2]
                    if(px_opa) {
  40ccc6:	2800      	cmp	r0, #0
  40ccc8:	d0f6      	beq.n	40ccb8 <lv_draw_map+0x208>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
  40ccca:	7818      	ldrb	r0, [r3, #0]
  40cccc:	f893 e001 	ldrb.w	lr, [r3, #1]
  40ccd0:	eb00 200e 	add.w	r0, r0, lr, lsl #8
  40ccd4:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
  40ccd8:	e7ee      	b.n	40ccb8 <lv_draw_map+0x208>
  40ccda:	9707      	str	r7, [sp, #28]
                map_buf_tmp += map_w * px_size_byte;
  40ccdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40ccde:	991a      	ldr	r1, [sp, #104]	; 0x68
  40cce0:	fb01 aa03 	mla	sl, r1, r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40cce4:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40cce8:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
  40ccec:	1a5b      	subs	r3, r3, r1
  40ccee:	b29b      	uxth	r3, r3
  40ccf0:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40ccf2:	fa02 f383 	sxtah	r3, r2, r3
  40ccf6:	4598      	cmp	r8, r3
  40ccf8:	d90b      	bls.n	40cd12 <lv_draw_map+0x262>
                    blend_area.y2 ++;
  40ccfa:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40ccfe:	3301      	adds	r3, #1
  40cd00:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            for(y = 0; y < draw_area_h; y++) {
  40cd04:	3601      	adds	r6, #1
  40cd06:	455e      	cmp	r6, fp
  40cd08:	da1a      	bge.n	40cd40 <lv_draw_map+0x290>
  40cd0a:	4653      	mov	r3, sl
  40cd0c:	2100      	movs	r1, #0
  40cd0e:	9f07      	ldr	r7, [sp, #28]
  40cd10:	e7d5      	b.n	40ccbe <lv_draw_map+0x20e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40cd12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cd14:	7b93      	ldrb	r3, [r2, #14]
  40cd16:	9302      	str	r3, [sp, #8]
  40cd18:	7813      	ldrb	r3, [r2, #0]
  40cd1a:	9301      	str	r3, [sp, #4]
  40cd1c:	2302      	movs	r3, #2
  40cd1e:	9300      	str	r3, [sp, #0]
  40cd20:	4623      	mov	r3, r4
  40cd22:	462a      	mov	r2, r5
  40cd24:	a925      	add	r1, sp, #148	; 0x94
  40cd26:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40cd28:	4f16      	ldr	r7, [pc, #88]	; (40cd84 <lv_draw_map+0x2d4>)
  40cd2a:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
  40cd2c:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40cd30:	3301      	adds	r3, #1
  40cd32:	b21b      	sxth	r3, r3
  40cd34:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40cd38:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    px_i = 0;
  40cd3c:	2200      	movs	r2, #0
  40cd3e:	e7e1      	b.n	40cd04 <lv_draw_map+0x254>
            if(blend_area.y1 != blend_area.y2) {
  40cd40:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40cd44:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40cd48:	429a      	cmp	r2, r3
  40cd4a:	d00f      	beq.n	40cd6c <lv_draw_map+0x2bc>
                blend_area.y2--;
  40cd4c:	3b01      	subs	r3, #1
  40cd4e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40cd52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cd54:	7b93      	ldrb	r3, [r2, #14]
  40cd56:	9302      	str	r3, [sp, #8]
  40cd58:	7813      	ldrb	r3, [r2, #0]
  40cd5a:	9301      	str	r3, [sp, #4]
  40cd5c:	2302      	movs	r3, #2
  40cd5e:	9300      	str	r3, [sp, #0]
  40cd60:	4623      	mov	r3, r4
  40cd62:	462a      	mov	r2, r5
  40cd64:	a925      	add	r1, sp, #148	; 0x94
  40cd66:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40cd68:	4e06      	ldr	r6, [pc, #24]	; (40cd84 <lv_draw_map+0x2d4>)
  40cd6a:	47b0      	blx	r6
            _lv_mem_buf_release(mask_buf);
  40cd6c:	4620      	mov	r0, r4
  40cd6e:	4c0a      	ldr	r4, [pc, #40]	; (40cd98 <lv_draw_map+0x2e8>)
  40cd70:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40cd72:	4628      	mov	r0, r5
  40cd74:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40cd76:	e2ae      	b.n	40d2d6 <lv_draw_map+0x826>
  40cd78:	004097a1 	.word	0x004097a1
  40cd7c:	00414df5 	.word	0x00414df5
  40cd80:	0040fcad 	.word	0x0040fcad
  40cd84:	0040c991 	.word	0x0040c991
  40cd88:	00414cf1 	.word	0x00414cf1
  40cd8c:	00415597 	.word	0x00415597
  40cd90:	00416965 	.word	0x00416965
  40cd94:	00416af1 	.word	0x00416af1
  40cd98:	00416715 	.word	0x00416715
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40cd9c:	a83a      	add	r0, sp, #232	; 0xe8
  40cd9e:	4bb6      	ldr	r3, [pc, #728]	; (40d078 <lv_draw_map+0x5c8>)
  40cda0:	4798      	blx	r3
  40cda2:	9017      	str	r0, [sp, #92]	; 0x5c
  40cda4:	e74e      	b.n	40cc44 <lv_draw_map+0x194>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40cda6:	2205      	movs	r2, #5

                trans_dsc.cfg.angle = draw_dsc->angle;
  40cda8:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cdaa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40cdae:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.zoom = draw_dsc->zoom;
  40cdb2:	8903      	ldrh	r3, [r0, #8]
  40cdb4:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.src = map_p;
  40cdb8:	9627      	str	r6, [sp, #156]	; 0x9c
                trans_dsc.cfg.src_w = map_w;
  40cdba:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40cdbe:	9916      	ldr	r1, [sp, #88]	; 0x58
  40cdc0:	88cb      	ldrh	r3, [r1, #6]
  40cdc2:	8849      	ldrh	r1, [r1, #2]
  40cdc4:	1a5b      	subs	r3, r3, r1
  40cdc6:	b29b      	uxth	r3, r3
  40cdc8:	3301      	adds	r3, #1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
  40cdca:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                trans_dsc.cfg.cf = cf;
  40cdce:	f88d 20ae 	strb.w	r2, [sp, #174]	; 0xae
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
  40cdd2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  40cdd6:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
  40cdda:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  40cdde:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.color = draw_dsc->recolor;
  40cde2:	8983      	ldrh	r3, [r0, #12]
  40cde4:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.antialias = draw_dsc->antialias;
  40cde8:	7bc3      	ldrb	r3, [r0, #15]
  40cdea:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40cdee:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf

                _lv_img_buf_transform_init(&trans_dsc);
  40cdf2:	a827      	add	r0, sp, #156	; 0x9c
  40cdf4:	4ba1      	ldr	r3, [pc, #644]	; (40d07c <lv_draw_map+0x5cc>)
  40cdf6:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
  40cdf8:	2300      	movs	r3, #0
  40cdfa:	9323      	str	r3, [sp, #140]	; 0x8c
  40cdfc:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
  40ce00:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ce02:	7a8a      	ldrb	r2, [r1, #10]
  40ce04:	43d3      	mvns	r3, r2
  40ce06:	b2db      	uxtb	r3, r3
  40ce08:	9310      	str	r3, [sp, #64]	; 0x40
            if(draw_dsc->recolor_opa != 0) {
  40ce0a:	b1ba      	cbz	r2, 40ce3c <lv_draw_map+0x38c>
  40ce0c:	898b      	ldrh	r3, [r1, #12]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40ce0e:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  40ce12:	b292      	uxth	r2, r2
  40ce14:	fb01 f102 	mul.w	r1, r1, r2
  40ce18:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40ce1c:	f003 0007 	and.w	r0, r3, #7
  40ce20:	f3c3 3142 	ubfx	r1, r3, #13, #3
  40ce24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40ce28:	fb12 f101 	smulbb	r1, r2, r1
  40ce2c:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40ce30:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40ce34:	fb02 f203 	mul.w	r2, r2, r3
  40ce38:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40ce3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ce3e:	9a08      	ldr	r2, [sp, #32]
  40ce40:	4313      	orrs	r3, r2
  40ce42:	9321      	str	r3, [sp, #132]	; 0x84
  40ce44:	d10b      	bne.n	40ce5e <lv_draw_map+0x3ae>
  40ce46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ce48:	8853      	ldrh	r3, [r2, #2]
  40ce4a:	b9f3      	cbnz	r3, 40ce8a <lv_draw_map+0x3da>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40ce4c:	8913      	ldrh	r3, [r2, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40ce4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40ce52:	d01d      	beq.n	40ce90 <lv_draw_map+0x3e0>
  40ce54:	2302      	movs	r3, #2
  40ce56:	931b      	str	r3, [sp, #108]	; 0x6c
  40ce58:	e003      	b.n	40ce62 <lv_draw_map+0x3b2>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40ce5a:	2206      	movs	r2, #6
  40ce5c:	e7a4      	b.n	40cda8 <lv_draw_map+0x2f8>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40ce5e:	2302      	movs	r3, #2
  40ce60:	931b      	str	r3, [sp, #108]	; 0x6c

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
  40ce62:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40ce64:	b9bb      	cbnz	r3, 40ce96 <lv_draw_map+0x3e6>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
  40ce66:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ce68:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  40ce6c:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
  40ce70:	4413      	add	r3, r2
  40ce72:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40ce74:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40ce78:	1a9b      	subs	r3, r3, r2
  40ce7a:	9312      	str	r3, [sp, #72]	; 0x48
#endif
            for(y = 0; y < draw_area_h; y++) {
  40ce7c:	2300      	movs	r3, #0
  40ce7e:	930c      	str	r3, [sp, #48]	; 0x30
        uint32_t px_i = 0;
  40ce80:	9313      	str	r3, [sp, #76]	; 0x4c
  40ce82:	4657      	mov	r7, sl
  40ce84:	f8cd 9014 	str.w	r9, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40ce88:	e192      	b.n	40d1b0 <lv_draw_map+0x700>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40ce8a:	2302      	movs	r3, #2
  40ce8c:	931b      	str	r3, [sp, #108]	; 0x6c
  40ce8e:	e7e8      	b.n	40ce62 <lv_draw_map+0x3b2>
  40ce90:	2301      	movs	r3, #1
  40ce92:	931b      	str	r3, [sp, #108]	; 0x6c
  40ce94:	e7e5      	b.n	40ce62 <lv_draw_map+0x3b2>
                _lv_memset_ff(mask_buf, mask_buf_size);
  40ce96:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40ce98:	4650      	mov	r0, sl
  40ce9a:	4b79      	ldr	r3, [pc, #484]	; (40d080 <lv_draw_map+0x5d0>)
  40ce9c:	4798      	blx	r3
  40ce9e:	e7e2      	b.n	40ce66 <lv_draw_map+0x3b6>
#if LV_USE_IMG_TRANSFORM
                    if(transform) {

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
  40cea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cea2:	4443      	add	r3, r8
  40cea4:	b21b      	sxth	r3, r3
  40cea6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40cea8:	990c      	ldr	r1, [sp, #48]	; 0x30
  40ceaa:	440a      	add	r2, r1
  40ceac:	b212      	sxth	r2, r2
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
  40ceae:	9927      	ldr	r1, [sp, #156]	; 0x9c

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
  40ceb0:	f9bd 40a4 	ldrsh.w	r4, [sp, #164]	; 0xa4
  40ceb4:	1b1b      	subs	r3, r3, r4
    int32_t yt = y - dsc->cfg.pivot_y;
  40ceb6:	f9bd 40a6 	ldrsh.w	r4, [sp, #166]	; 0xa6
  40ceba:	1b12      	subs	r2, r2, r4

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
  40cebc:	f8bd 00aa 	ldrh.w	r0, [sp, #170]	; 0xaa
  40cec0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40cec4:	d035      	beq.n	40cf32 <lv_draw_map+0x482>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    }
    else if(dsc->cfg.angle == 0) {
  40cec6:	f9bd 00a8 	ldrsh.w	r0, [sp, #168]	; 0xa8
  40ceca:	2800      	cmp	r0, #0
  40cecc:	d143      	bne.n	40cf56 <lv_draw_map+0x4a6>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40cece:	9835      	ldr	r0, [sp, #212]	; 0xd4
  40ced0:	fb03 f300 	mul.w	r3, r3, r0
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40ced4:	fb02 f200 	mul.w	r2, r2, r0
        xs = xt + dsc->tmp.pivot_x_256;
  40ced8:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40ceda:	eb00 1663 	add.w	r6, r0, r3, asr #5
        ys = yt + dsc->tmp.pivot_y_256;
  40cede:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40cee0:	eb04 1362 	add.w	r3, r4, r2, asr #5
  40cee4:	9309      	str	r3, [sp, #36]	; 0x24
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
  40cee6:	1235      	asrs	r5, r6, #8
    int32_t ys_int = ys >> 8;
  40cee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ceea:	121b      	asrs	r3, r3, #8
  40ceec:	461c      	mov	r4, r3
  40ceee:	930f      	str	r3, [sp, #60]	; 0x3c

    if(xs_int >= dsc->cfg.src_w) return false;
  40cef0:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
  40cef4:	429d      	cmp	r5, r3
  40cef6:	f280 80b3 	bge.w	40d060 <lv_draw_map+0x5b0>
    else if(xs_int < 0) return false;
  40cefa:	2d00      	cmp	r5, #0
  40cefc:	f2c0 80b6 	blt.w	40d06c <lv_draw_map+0x5bc>

    if(ys_int >= dsc->cfg.src_h) return false;
  40cf00:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  40cf04:	4294      	cmp	r4, r2
  40cf06:	f280 80b3 	bge.w	40d070 <lv_draw_map+0x5c0>
    else if(ys_int < 0) return false;
  40cf0a:	2c00      	cmp	r4, #0
  40cf0c:	f2c0 80b2 	blt.w	40d074 <lv_draw_map+0x5c4>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
  40cf10:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  40cf14:	f012 0f04 	tst.w	r2, #4
  40cf18:	d075      	beq.n	40d006 <lv_draw_map+0x556>
        if(dsc->tmp.has_alpha == 0) {
  40cf1a:	f012 0f02 	tst.w	r2, #2
  40cf1e:	d157      	bne.n	40cfd0 <lv_draw_map+0x520>
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40cf20:	fb03 5304 	mla	r3, r3, r4, r5
  40cf24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
  40cf28:	4461      	add	r1, ip
    uint8_t * d8 = (uint8_t *)dst;
  40cf2a:	aa2c      	add	r2, sp, #176	; 0xb0
  40cf2c:	2302      	movs	r3, #2
  40cf2e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cf30:	e02f      	b.n	40cf92 <lv_draw_map+0x4e2>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
  40cf32:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40cf34:	fb05 f603 	mul.w	r6, r5, r3
  40cf38:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40cf3a:	fb04 6612 	mls	r6, r4, r2, r6
  40cf3e:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40cf40:	eb00 06a6 	add.w	r6, r0, r6, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
  40cf44:	fb05 f202 	mul.w	r2, r5, r2
  40cf48:	fb04 2403 	mla	r4, r4, r3, r2
  40cf4c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
  40cf4e:	eb03 03a4 	add.w	r3, r3, r4, asr #2
  40cf52:	9309      	str	r3, [sp, #36]	; 0x24
  40cf54:	e7c7      	b.n	40cee6 <lv_draw_map+0x436>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40cf56:	9c35      	ldr	r4, [sp, #212]	; 0xd4
  40cf58:	fb03 f304 	mul.w	r3, r3, r4
  40cf5c:	115b      	asrs	r3, r3, #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40cf5e:	fb02 f204 	mul.w	r2, r2, r4
  40cf62:	1152      	asrs	r2, r2, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
  40cf64:	9c33      	ldr	r4, [sp, #204]	; 0xcc
  40cf66:	fb04 f603 	mul.w	r6, r4, r3
  40cf6a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
  40cf6c:	fb05 6612 	mls	r6, r5, r2, r6
  40cf70:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40cf72:	eb00 26a6 	add.w	r6, r0, r6, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
  40cf76:	fb04 f402 	mul.w	r4, r4, r2
  40cf7a:	fb05 4303 	mla	r3, r5, r3, r4
  40cf7e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40cf80:	eb04 23a3 	add.w	r3, r4, r3, asr #10
  40cf84:	9309      	str	r3, [sp, #36]	; 0x24
  40cf86:	e7ae      	b.n	40cee6 <lv_draw_map+0x436>
        *d8 = *s8;
  40cf88:	f811 0b01 	ldrb.w	r0, [r1], #1
  40cf8c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40cf90:	3b01      	subs	r3, #1
    while(len) {
  40cf92:	2b00      	cmp	r3, #0
  40cf94:	d1f8      	bne.n	40cf88 <lv_draw_map+0x4d8>
  40cf96:	9409      	str	r4, [sp, #36]	; 0x24
            px_size = LV_COLOR_SIZE >> 3;
  40cf98:	2202      	movs	r2, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
  40cf9a:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
  40cf9e:	f013 0f01 	tst.w	r3, #1
  40cfa2:	d00f      	beq.n	40cfc4 <lv_draw_map+0x514>
        lv_color_t ct = LV_COLOR_TRANSP;
  40cfa4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40cfa6:	f043 0307 	orr.w	r3, r3, #7
  40cfaa:	f36f 03c7 	bfc	r3, #3, #5
  40cfae:	f36f 230c 	bfc	r3, #8, #5
  40cfb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
  40cfb6:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        if(dsc->res.color.full == ct.full) return false;
  40cfba:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
  40cfbe:	b29b      	uxth	r3, r3
  40cfc0:	4299      	cmp	r1, r3
  40cfc2:	d037      	beq.n	40d034 <lv_draw_map+0x584>
    }

    if(dsc->cfg.antialias == false) return true;
  40cfc4:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
  40cfc8:	2b00      	cmp	r3, #0
  40cfca:	d135      	bne.n	40d038 <lv_draw_map+0x588>
  40cfcc:	9806      	ldr	r0, [sp, #24]
  40cfce:	e048      	b.n	40d062 <lv_draw_map+0x5b2>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40cfd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cfd2:	fb03 5302 	mla	r3, r3, r2, r5
  40cfd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40cfda:	931e      	str	r3, [sp, #120]	; 0x78
  40cfdc:	469c      	mov	ip, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
  40cfde:	18cb      	adds	r3, r1, r3
    uint8_t * d8 = (uint8_t *)dst;
  40cfe0:	a82c      	add	r0, sp, #176	; 0xb0
  40cfe2:	2202      	movs	r2, #2
  40cfe4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cfe6:	e004      	b.n	40cff2 <lv_draw_map+0x542>
        *d8 = *s8;
  40cfe8:	f813 eb01 	ldrb.w	lr, [r3], #1
  40cfec:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  40cff0:	3a01      	subs	r2, #1
    while(len) {
  40cff2:	2a00      	cmp	r2, #0
  40cff4:	d1f8      	bne.n	40cfe8 <lv_draw_map+0x538>
  40cff6:	9409      	str	r4, [sp, #36]	; 0x24
            dsc->res.opa = src_u8[pxi + px_size - 1];
  40cff8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40cffa:	4419      	add	r1, r3
  40cffc:	788b      	ldrb	r3, [r1, #2]
  40cffe:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
  40d002:	2203      	movs	r2, #3
  40d004:	e7c9      	b.n	40cf9a <lv_draw_map+0x4ea>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40d006:	b229      	sxth	r1, r5
  40d008:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  40d00c:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  40d010:	9220      	str	r2, [sp, #128]	; 0x80
  40d012:	911e      	str	r1, [sp, #120]	; 0x78
  40d014:	a82d      	add	r0, sp, #180	; 0xb4
  40d016:	4c1b      	ldr	r4, [pc, #108]	; (40d084 <lv_draw_map+0x5d4>)
  40d018:	47a0      	blx	r4
  40d01a:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
  40d01e:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40d020:	991e      	ldr	r1, [sp, #120]	; 0x78
  40d022:	a82d      	add	r0, sp, #180	; 0xb4
  40d024:	4b18      	ldr	r3, [pc, #96]	; (40d088 <lv_draw_map+0x5d8>)
  40d026:	4798      	blx	r3
  40d028:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
        pxi = 0; /*unused*/
  40d02c:	f04f 0c00 	mov.w	ip, #0
        px_size = 0;    /*unused*/
  40d030:	4662      	mov	r2, ip
  40d032:	e7b2      	b.n	40cf9a <lv_draw_map+0x4ea>
        if(dsc->res.color.full == ct.full) return false;
  40d034:	2000      	movs	r0, #0
  40d036:	e014      	b.n	40d062 <lv_draw_map+0x5b2>

    dsc->tmp.xs = xs;
  40d038:	f8ad 60d8 	strh.w	r6, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
  40d03c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40d040:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
  40d044:	f8ad 50dc 	strh.w	r5, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
  40d048:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40d04c:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
  40d050:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
  40d054:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
  40d058:	a827      	add	r0, sp, #156	; 0x9c
  40d05a:	4b0c      	ldr	r3, [pc, #48]	; (40d08c <lv_draw_map+0x5dc>)
  40d05c:	4798      	blx	r3
  40d05e:	e000      	b.n	40d062 <lv_draw_map+0x5b2>
    if(xs_int >= dsc->cfg.src_w) return false;
  40d060:	2000      	movs	r0, #0
                        if(ret == false) {
  40d062:	b9b8      	cbnz	r0, 40d094 <lv_draw_map+0x5e4>
                            mask_buf[px_i] = LV_OPA_TRANSP;
  40d064:	2300      	movs	r3, #0
  40d066:	f807 3009 	strb.w	r3, [r7, r9]
                            continue;
  40d06a:	e068      	b.n	40d13e <lv_draw_map+0x68e>
    else if(xs_int < 0) return false;
  40d06c:	2000      	movs	r0, #0
  40d06e:	e7f8      	b.n	40d062 <lv_draw_map+0x5b2>
    if(ys_int >= dsc->cfg.src_h) return false;
  40d070:	2000      	movs	r0, #0
  40d072:	e7f6      	b.n	40d062 <lv_draw_map+0x5b2>
    else if(ys_int < 0) return false;
  40d074:	2000      	movs	r0, #0
  40d076:	e7f4      	b.n	40d062 <lv_draw_map+0x5b2>
  40d078:	00415597 	.word	0x00415597
  40d07c:	00412741 	.word	0x00412741
  40d080:	00416b49 	.word	0x00416b49
  40d084:	00412521 	.word	0x00412521
  40d088:	00412645 	.word	0x00412645
  40d08c:	00412a55 	.word	0x00412a55
  40d090:	0000e007 	.word	0x0000e007
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
  40d094:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
  40d098:	f807 3009 	strb.w	r3, [r7, r9]
                            c.full = trans_dsc.res.color.full;
  40d09c:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
  40d0a0:	e010      	b.n	40d0c4 <lv_draw_map+0x614>
#endif
                                continue;
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
  40d0a2:	23ff      	movs	r3, #255	; 0xff
  40d0a4:	f807 3009 	strb.w	r3, [r7, r9]
#if LV_COLOR_DEPTH == 1
                        c.full = map_px[0];
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
  40d0a8:	f89a 2000 	ldrb.w	r2, [sl]
  40d0ac:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40d0b0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  40d0b4:	b292      	uxth	r2, r2
  40d0b6:	4613      	mov	r3, r2
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
                        c.ch.alpha = 0xFF;
#endif
                        if(chroma_key) {
  40d0b8:	990d      	ldr	r1, [sp, #52]	; 0x34
  40d0ba:	b119      	cbz	r1, 40d0c4 <lv_draw_map+0x614>
                            if(c.full == chroma_keyed_color.full) {
  40d0bc:	f83f 1030 	ldrh.w	r1, [pc, #-48]	; 40d090 <lv_draw_map+0x5e0>
  40d0c0:	428a      	cmp	r2, r1
  40d0c2:	d053      	beq.n	40d16c <lv_draw_map+0x6bc>
                                continue;
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
  40d0c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d0c6:	7a92      	ldrb	r2, [r2, #10]
  40d0c8:	b3b2      	cbz	r2, 40d138 <lv_draw_map+0x688>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40d0ca:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
  40d0ce:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40d0d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d0d4:	fb04 1202 	mla	r2, r4, r2, r1
  40d0d8:	3280      	adds	r2, #128	; 0x80
  40d0da:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40d0de:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40d0e2:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40d0e6:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40d0ea:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  40d0ee:	f003 0007 	and.w	r0, r3, #7
  40d0f2:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40d0f6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  40d0fa:	fb02 1204 	mla	r2, r2, r4, r1
  40d0fe:	3280      	adds	r2, #128	; 0x80
  40d100:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40d104:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40d108:	f3c2 6182 	ubfx	r1, r2, #26, #3
  40d10c:	f361 0b02 	bfi	fp, r1, #0, #3
  40d110:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40d114:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40d118:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
  40d11c:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40d120:	fb03 2304 	mla	r3, r3, r4, r2
  40d124:	3380      	adds	r3, #128	; 0x80
  40d126:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40d12a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40d12e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40d132:	f363 2b0c 	bfi	fp, r3, #8, #5
  40d136:	465b      	mov	r3, fp
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
                    }

                    map2[px_i].full = c.full;
  40d138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d13a:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40d13e:	f108 0801 	add.w	r8, r8, #1
  40d142:	9b07      	ldr	r3, [sp, #28]
  40d144:	449a      	add	sl, r3
  40d146:	f109 0901 	add.w	r9, r9, #1
  40d14a:	9b05      	ldr	r3, [sp, #20]
  40d14c:	4598      	cmp	r8, r3
  40d14e:	da11      	bge.n	40d174 <lv_draw_map+0x6c4>
                    if(transform) {
  40d150:	9b06      	ldr	r3, [sp, #24]
  40d152:	2b00      	cmp	r3, #0
  40d154:	f47f aea4 	bne.w	40cea0 <lv_draw_map+0x3f0>
                        if(alpha_byte) {
  40d158:	9b08      	ldr	r3, [sp, #32]
  40d15a:	2b00      	cmp	r3, #0
  40d15c:	d0a1      	beq.n	40d0a2 <lv_draw_map+0x5f2>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40d15e:	f89a 3002 	ldrb.w	r3, [sl, #2]
                            mask_buf[px_i] = px_opa;
  40d162:	f807 3009 	strb.w	r3, [r7, r9]
                            if(px_opa == 0) {
  40d166:	2b00      	cmp	r3, #0
  40d168:	d0e9      	beq.n	40d13e <lv_draw_map+0x68e>
  40d16a:	e79d      	b.n	40d0a8 <lv_draw_map+0x5f8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
  40d16c:	2300      	movs	r3, #0
  40d16e:	f807 3009 	strb.w	r3, [r7, r9]
                                continue;
  40d172:	e7e4      	b.n	40d13e <lv_draw_map+0x68e>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
  40d174:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d176:	bb8b      	cbnz	r3, 40d1dc <lv_draw_map+0x72c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
  40d178:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40d17a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40d17c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40d17e:	fb02 1303 	mla	r3, r2, r3, r1
  40d182:	9311      	str	r3, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40d184:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40d188:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40d18c:	1a9b      	subs	r3, r3, r2
  40d18e:	b29b      	uxth	r3, r3
  40d190:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40d192:	fa09 f383 	sxtah	r3, r9, r3
  40d196:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40d198:	429a      	cmp	r2, r3
  40d19a:	d94c      	bls.n	40d236 <lv_draw_map+0x786>
                    blend_area.y2 ++;
  40d19c:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40d1a0:	3301      	adds	r3, #1
  40d1a2:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  40d1a6:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
            for(y = 0; y < draw_area_h; y++) {
  40d1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d1ac:	3301      	adds	r3, #1
  40d1ae:	930c      	str	r3, [sp, #48]	; 0x30
  40d1b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d1b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40d1b4:	4293      	cmp	r3, r2
  40d1b6:	da72      	bge.n	40d29e <lv_draw_map+0x7ee>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
  40d1b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d1ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  40d1be:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
  40d1c2:	4413      	add	r3, r2
  40d1c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40d1c6:	f9b2 2000 	ldrsh.w	r2, [r2]
  40d1ca:	1a9b      	subs	r3, r3, r2
  40d1cc:	930e      	str	r3, [sp, #56]	; 0x38
                map_px = map_buf_tmp;
  40d1ce:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40d1d2:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
  40d1d6:	f04f 0800 	mov.w	r8, #0
  40d1da:	e7b6      	b.n	40d14a <lv_draw_map+0x69a>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
  40d1dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40d1de:	443b      	add	r3, r7
  40d1e0:	461d      	mov	r5, r3
  40d1e2:	f8bd 00e8 	ldrh.w	r0, [sp, #232]	; 0xe8
  40d1e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40d1e8:	8a21      	ldrh	r1, [r4, #16]
  40d1ea:	4401      	add	r1, r0
  40d1ec:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40d1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d1f2:	441a      	add	r2, r3
  40d1f4:	8a63      	ldrh	r3, [r4, #18]
  40d1f6:	fa13 f282 	uxtah	r2, r3, r2
  40d1fa:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40d1fe:	1a1b      	subs	r3, r3, r0
  40d200:	b29b      	uxth	r3, r3
  40d202:	3301      	adds	r3, #1
  40d204:	b21b      	sxth	r3, r3
  40d206:	b212      	sxth	r2, r2
  40d208:	b209      	sxth	r1, r1
  40d20a:	4628      	mov	r0, r5
  40d20c:	4c33      	ldr	r4, [pc, #204]	; (40d2dc <lv_draw_map+0x82c>)
  40d20e:	47a0      	blx	r4
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
  40d210:	b118      	cbz	r0, 40d21a <lv_draw_map+0x76a>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
  40d212:	2802      	cmp	r0, #2
  40d214:	d1b0      	bne.n	40d178 <lv_draw_map+0x6c8>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40d216:	901b      	str	r0, [sp, #108]	; 0x6c
  40d218:	e7ae      	b.n	40d178 <lv_draw_map+0x6c8>
  40d21a:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
  40d21e:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40d222:	1ac9      	subs	r1, r1, r3
  40d224:	b289      	uxth	r1, r1
  40d226:	3101      	adds	r1, #1
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
  40d228:	b209      	sxth	r1, r1
  40d22a:	4628      	mov	r0, r5
  40d22c:	4b2c      	ldr	r3, [pc, #176]	; (40d2e0 <lv_draw_map+0x830>)
  40d22e:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40d230:	2302      	movs	r3, #2
  40d232:	931b      	str	r3, [sp, #108]	; 0x6c
  40d234:	e7a0      	b.n	40d178 <lv_draw_map+0x6c8>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40d236:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40d238:	7bab      	ldrb	r3, [r5, #14]
  40d23a:	9302      	str	r3, [sp, #8]
  40d23c:	782b      	ldrb	r3, [r5, #0]
  40d23e:	9301      	str	r3, [sp, #4]
  40d240:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d242:	9300      	str	r3, [sp, #0]
  40d244:	463b      	mov	r3, r7
  40d246:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d248:	a925      	add	r1, sp, #148	; 0x94
  40d24a:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40d24c:	4c25      	ldr	r4, [pc, #148]	; (40d2e4 <lv_draw_map+0x834>)
  40d24e:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
  40d250:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40d254:	3301      	adds	r3, #1
  40d256:	b21b      	sxth	r3, r3
  40d258:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40d25c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d260:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d262:	b943      	cbnz	r3, 40d276 <lv_draw_map+0x7c6>
  40d264:	886b      	ldrh	r3, [r5, #2]
  40d266:	b96b      	cbnz	r3, 40d284 <lv_draw_map+0x7d4>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40d268:	892b      	ldrh	r3, [r5, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d26a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40d26e:	d00c      	beq.n	40d28a <lv_draw_map+0x7da>
  40d270:	2302      	movs	r3, #2
  40d272:	931b      	str	r3, [sp, #108]	; 0x6c
  40d274:	e001      	b.n	40d27a <lv_draw_map+0x7ca>
  40d276:	2302      	movs	r3, #2
  40d278:	931b      	str	r3, [sp, #108]	; 0x6c

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
  40d27a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d27c:	b943      	cbnz	r3, 40d290 <lv_draw_map+0x7e0>
                    px_i = 0;
  40d27e:	2300      	movs	r3, #0
  40d280:	9313      	str	r3, [sp, #76]	; 0x4c
  40d282:	e792      	b.n	40d1aa <lv_draw_map+0x6fa>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d284:	2302      	movs	r3, #2
  40d286:	931b      	str	r3, [sp, #108]	; 0x6c
  40d288:	e7f7      	b.n	40d27a <lv_draw_map+0x7ca>
  40d28a:	2301      	movs	r3, #1
  40d28c:	931b      	str	r3, [sp, #108]	; 0x6c
  40d28e:	e7f4      	b.n	40d27a <lv_draw_map+0x7ca>
                        _lv_memset_ff(mask_buf, mask_buf_size);
  40d290:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40d292:	4638      	mov	r0, r7
  40d294:	4b14      	ldr	r3, [pc, #80]	; (40d2e8 <lv_draw_map+0x838>)
  40d296:	4798      	blx	r3
                    px_i = 0;
  40d298:	2300      	movs	r3, #0
  40d29a:	9313      	str	r3, [sp, #76]	; 0x4c
  40d29c:	e785      	b.n	40d1aa <lv_draw_map+0x6fa>
  40d29e:	46ba      	mov	sl, r7
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
  40d2a0:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40d2a4:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40d2a8:	429a      	cmp	r2, r3
  40d2aa:	d00f      	beq.n	40d2cc <lv_draw_map+0x81c>
                blend_area.y2--;
  40d2ac:	3b01      	subs	r3, #1
  40d2ae:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40d2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d2b4:	7b93      	ldrb	r3, [r2, #14]
  40d2b6:	9302      	str	r3, [sp, #8]
  40d2b8:	7813      	ldrb	r3, [r2, #0]
  40d2ba:	9301      	str	r3, [sp, #4]
  40d2bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d2be:	9300      	str	r3, [sp, #0]
  40d2c0:	463b      	mov	r3, r7
  40d2c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d2c4:	a925      	add	r1, sp, #148	; 0x94
  40d2c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40d2c8:	4c06      	ldr	r4, [pc, #24]	; (40d2e4 <lv_draw_map+0x834>)
  40d2ca:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
  40d2cc:	4650      	mov	r0, sl
  40d2ce:	4c07      	ldr	r4, [pc, #28]	; (40d2ec <lv_draw_map+0x83c>)
  40d2d0:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40d2d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d2d4:	47a0      	blx	r4
        }
    }
}
  40d2d6:	b03d      	add	sp, #244	; 0xf4
  40d2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d2dc:	0040fbe5 	.word	0x0040fbe5
  40d2e0:	00416af1 	.word	0x00416af1
  40d2e4:	0040c991 	.word	0x0040c991
  40d2e8:	00416b49 	.word	0x00416b49
  40d2ec:	00416715 	.word	0x00416715

0040d2f0 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
  40d2f0:	b570      	push	{r4, r5, r6, lr}
  40d2f2:	b0a0      	sub	sp, #128	; 0x80
  40d2f4:	4604      	mov	r4, r0
  40d2f6:	460d      	mov	r5, r1
  40d2f8:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
  40d2fa:	a80b      	add	r0, sp, #44	; 0x2c
  40d2fc:	4b0b      	ldr	r3, [pc, #44]	; (40d32c <show_error+0x3c>)
  40d2fe:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
  40d300:	4b0b      	ldr	r3, [pc, #44]	; (40d330 <show_error+0x40>)
  40d302:	881b      	ldrh	r3, [r3, #0]
  40d304:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
  40d308:	aa0b      	add	r2, sp, #44	; 0x2c
  40d30a:	4629      	mov	r1, r5
  40d30c:	4620      	mov	r0, r4
  40d30e:	4b09      	ldr	r3, [pc, #36]	; (40d334 <show_error+0x44>)
  40d310:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  40d312:	a802      	add	r0, sp, #8
  40d314:	4b08      	ldr	r3, [pc, #32]	; (40d338 <show_error+0x48>)
  40d316:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
  40d318:	2300      	movs	r3, #0
  40d31a:	9300      	str	r3, [sp, #0]
  40d31c:	4633      	mov	r3, r6
  40d31e:	aa02      	add	r2, sp, #8
  40d320:	4629      	mov	r1, r5
  40d322:	4620      	mov	r0, r4
  40d324:	4c05      	ldr	r4, [pc, #20]	; (40d33c <show_error+0x4c>)
  40d326:	47a0      	blx	r4
}
  40d328:	b020      	add	sp, #128	; 0x80
  40d32a:	bd70      	pop	{r4, r5, r6, pc}
  40d32c:	0041245d 	.word	0x0041245d
  40d330:	0042c180 	.word	0x0042c180
  40d334:	004124a9 	.word	0x004124a9
  40d338:	0040ded5 	.word	0x0040ded5
  40d33c:	0040df1d 	.word	0x0040df1d

0040d340 <lv_draw_img_dsc_init>:
{
  40d340:	b510      	push	{r4, lr}
  40d342:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  40d344:	2110      	movs	r1, #16
  40d346:	4b07      	ldr	r3, [pc, #28]	; (40d364 <lv_draw_img_dsc_init+0x24>)
  40d348:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
  40d34a:	2300      	movs	r3, #0
  40d34c:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
  40d34e:	23ff      	movs	r3, #255	; 0xff
  40d350:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
  40d352:	f44f 7380 	mov.w	r3, #256	; 0x100
  40d356:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
  40d358:	7be3      	ldrb	r3, [r4, #15]
  40d35a:	f043 0301 	orr.w	r3, r3, #1
  40d35e:	73e3      	strb	r3, [r4, #15]
  40d360:	bd10      	pop	{r4, pc}
  40d362:	bf00      	nop
  40d364:	00416af1 	.word	0x00416af1

0040d368 <lv_img_cf_get_px_size>:
    switch(cf) {
  40d368:	3804      	subs	r0, #4
  40d36a:	280a      	cmp	r0, #10
  40d36c:	d807      	bhi.n	40d37e <lv_img_cf_get_px_size+0x16>
  40d36e:	e8df f000 	tbb	[pc, r0]
  40d372:	0812      	.short	0x0812
  40d374:	0e0c0a12 	.word	0x0e0c0a12
  40d378:	0e0c0a10 	.word	0x0e0c0a10
  40d37c:	10          	.byte	0x10
  40d37d:	00          	.byte	0x00
            px_size = 0;
  40d37e:	2000      	movs	r0, #0
  40d380:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
  40d382:	2018      	movs	r0, #24
            break;
  40d384:	4770      	bx	lr
            px_size = 1;
  40d386:	2001      	movs	r0, #1
            break;
  40d388:	4770      	bx	lr
            px_size = 2;
  40d38a:	2002      	movs	r0, #2
            break;
  40d38c:	4770      	bx	lr
            px_size = 4;
  40d38e:	2004      	movs	r0, #4
            break;
  40d390:	4770      	bx	lr
            px_size = 8;
  40d392:	2008      	movs	r0, #8
            break;
  40d394:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
  40d396:	2010      	movs	r0, #16
}
  40d398:	4770      	bx	lr

0040d39a <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
  40d39a:	2803      	cmp	r0, #3
  40d39c:	d005      	beq.n	40d3aa <lv_img_cf_is_chroma_keyed+0x10>
  40d39e:	d302      	bcc.n	40d3a6 <lv_img_cf_is_chroma_keyed+0xc>
  40d3a0:	3806      	subs	r0, #6
  40d3a2:	2804      	cmp	r0, #4
  40d3a4:	d901      	bls.n	40d3aa <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
  40d3a6:	2000      	movs	r0, #0
}
  40d3a8:	4770      	bx	lr
            is_chroma_keyed = true;
  40d3aa:	2001      	movs	r0, #1
  40d3ac:	4770      	bx	lr

0040d3ae <lv_img_cf_has_alpha>:
    switch(cf) {
  40d3ae:	3802      	subs	r0, #2
  40d3b0:	280c      	cmp	r0, #12
  40d3b2:	d80a      	bhi.n	40d3ca <lv_img_cf_has_alpha+0x1c>
  40d3b4:	e8df f000 	tbb	[pc, r0]
  40d3b8:	07090907 	.word	0x07090907
  40d3bc:	07070709 	.word	0x07070709
  40d3c0:	07070707 	.word	0x07070707
  40d3c4:	07          	.byte	0x07
  40d3c5:	00          	.byte	0x00
            has_alpha = true;
  40d3c6:	2001      	movs	r0, #1
  40d3c8:	4770      	bx	lr
            has_alpha = false;
  40d3ca:	2000      	movs	r0, #0
}
  40d3cc:	4770      	bx	lr
	...

0040d3d0 <lv_img_draw_core>:
{
  40d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d3d4:	b08f      	sub	sp, #60	; 0x3c
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
  40d3d6:	781c      	ldrb	r4, [r3, #0]
  40d3d8:	2c02      	cmp	r4, #2
  40d3da:	d803      	bhi.n	40d3e4 <lv_img_draw_core+0x14>
  40d3dc:	2001      	movs	r0, #1
}
  40d3de:	b00f      	add	sp, #60	; 0x3c
  40d3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d3e4:	461c      	mov	r4, r3
  40d3e6:	460d      	mov	r5, r1
  40d3e8:	4682      	mov	sl, r0
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
  40d3ea:	8999      	ldrh	r1, [r3, #12]
  40d3ec:	4610      	mov	r0, r2
  40d3ee:	4b73      	ldr	r3, [pc, #460]	; (40d5bc <lv_img_draw_core+0x1ec>)
  40d3f0:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
  40d3f2:	4606      	mov	r6, r0
  40d3f4:	2800      	cmp	r0, #0
  40d3f6:	f000 80de 	beq.w	40d5b6 <lv_img_draw_core+0x1e6>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
  40d3fa:	f890 800c 	ldrb.w	r8, [r0, #12]
  40d3fe:	f008 081f 	and.w	r8, r8, #31
  40d402:	4640      	mov	r0, r8
  40d404:	4b6e      	ldr	r3, [pc, #440]	; (40d5c0 <lv_img_draw_core+0x1f0>)
  40d406:	4798      	blx	r3
  40d408:	4607      	mov	r7, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
  40d40a:	4640      	mov	r0, r8
  40d40c:	4b6d      	ldr	r3, [pc, #436]	; (40d5c4 <lv_img_draw_core+0x1f4>)
  40d40e:	4798      	blx	r3
  40d410:	4680      	mov	r8, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
  40d412:	69b2      	ldr	r2, [r6, #24]
  40d414:	b12a      	cbz	r2, 40d422 <lv_img_draw_core+0x52>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
  40d416:	4629      	mov	r1, r5
  40d418:	4650      	mov	r0, sl
  40d41a:	4b6b      	ldr	r3, [pc, #428]	; (40d5c8 <lv_img_draw_core+0x1f8>)
  40d41c:	4798      	blx	r3
    return LV_RES_OK;
  40d41e:	2001      	movs	r0, #1
  40d420:	e7dd      	b.n	40d3de <lv_img_draw_core+0xe>
    else if(cdsc->dec_dsc.img_data) {
  40d422:	6933      	ldr	r3, [r6, #16]
  40d424:	2b00      	cmp	r3, #0
  40d426:	d053      	beq.n	40d4d0 <lv_img_draw_core+0x100>
  40d428:	4651      	mov	r1, sl
  40d42a:	aa0a      	add	r2, sp, #40	; 0x28
  40d42c:	2308      	movs	r3, #8
  40d42e:	e004      	b.n	40d43a <lv_img_draw_core+0x6a>
        *d8 = *s8;
  40d430:	f811 0b01 	ldrb.w	r0, [r1], #1
  40d434:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40d438:	3b01      	subs	r3, #1
    while(len) {
  40d43a:	2b00      	cmp	r3, #0
  40d43c:	d1f8      	bne.n	40d430 <lv_img_draw_core+0x60>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
  40d43e:	8863      	ldrh	r3, [r4, #2]
  40d440:	b91b      	cbnz	r3, 40d44a <lv_img_draw_core+0x7a>
  40d442:	8922      	ldrh	r2, [r4, #8]
  40d444:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  40d448:	d030      	beq.n	40d4ac <lv_img_draw_core+0xdc>
  40d44a:	f8ba 1004 	ldrh.w	r1, [sl, #4]
  40d44e:	f8ba 2000 	ldrh.w	r2, [sl]
  40d452:	1a89      	subs	r1, r1, r2
  40d454:	b289      	uxth	r1, r1
  40d456:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40d458:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  40d45c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  40d460:	1a12      	subs	r2, r2, r0
  40d462:	b292      	uxth	r2, r2
  40d464:	3201      	adds	r2, #1
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
  40d466:	1d20      	adds	r0, r4, #4
  40d468:	9001      	str	r0, [sp, #4]
  40d46a:	8920      	ldrh	r0, [r4, #8]
  40d46c:	9000      	str	r0, [sp, #0]
  40d46e:	b21b      	sxth	r3, r3
  40d470:	b212      	sxth	r2, r2
  40d472:	b209      	sxth	r1, r1
  40d474:	a80a      	add	r0, sp, #40	; 0x28
  40d476:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40d5e8 <lv_img_draw_core+0x218>
  40d47a:	47c8      	blx	r9
            map_area_rot.x1 += coords->x1;
  40d47c:	f8ba 2000 	ldrh.w	r2, [sl]
  40d480:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40d484:	4413      	add	r3, r2
  40d486:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
  40d48a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  40d48e:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
  40d492:	4419      	add	r1, r3
  40d494:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
  40d498:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  40d49c:	440a      	add	r2, r1
  40d49e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
  40d4a2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  40d4a6:	4413      	add	r3, r2
  40d4a8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
  40d4ac:	aa0a      	add	r2, sp, #40	; 0x28
  40d4ae:	4629      	mov	r1, r5
  40d4b0:	a80c      	add	r0, sp, #48	; 0x30
  40d4b2:	4b46      	ldr	r3, [pc, #280]	; (40d5cc <lv_img_draw_core+0x1fc>)
  40d4b4:	4798      	blx	r3
        if(union_ok == false) {
  40d4b6:	b908      	cbnz	r0, 40d4bc <lv_img_draw_core+0xec>
            return LV_RES_OK;
  40d4b8:	2001      	movs	r0, #1
  40d4ba:	e790      	b.n	40d3de <lv_img_draw_core+0xe>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
  40d4bc:	6932      	ldr	r2, [r6, #16]
  40d4be:	f8cd 8004 	str.w	r8, [sp, #4]
  40d4c2:	9700      	str	r7, [sp, #0]
  40d4c4:	4623      	mov	r3, r4
  40d4c6:	a90c      	add	r1, sp, #48	; 0x30
  40d4c8:	4650      	mov	r0, sl
  40d4ca:	4c41      	ldr	r4, [pc, #260]	; (40d5d0 <lv_img_draw_core+0x200>)
  40d4cc:	47a0      	blx	r4
  40d4ce:	e7a6      	b.n	40d41e <lv_img_draw_core+0x4e>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
  40d4d0:	4652      	mov	r2, sl
  40d4d2:	4629      	mov	r1, r5
  40d4d4:	a808      	add	r0, sp, #32
  40d4d6:	4b3d      	ldr	r3, [pc, #244]	; (40d5cc <lv_img_draw_core+0x1fc>)
  40d4d8:	4798      	blx	r3
        if(union_ok == false) {
  40d4da:	b908      	cbnz	r0, 40d4e0 <lv_img_draw_core+0x110>
            return LV_RES_OK;
  40d4dc:	2001      	movs	r0, #1
  40d4de:	e77e      	b.n	40d3de <lv_img_draw_core+0xe>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40d4e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40d4e4:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  40d4e8:	f839 2d18 	ldrh.w	r2, [r9, #-24]!
  40d4ec:	1a9b      	subs	r3, r3, r2
  40d4ee:	b29b      	uxth	r3, r3
  40d4f0:	3301      	adds	r3, #1
  40d4f2:	b21b      	sxth	r3, r3
  40d4f4:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
  40d4f6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40d4fa:	4b36      	ldr	r3, [pc, #216]	; (40d5d4 <lv_img_draw_core+0x204>)
  40d4fc:	4798      	blx	r3
  40d4fe:	9007      	str	r0, [sp, #28]
    uint8_t * d8 = (uint8_t *)dst;
  40d500:	aa0a      	add	r2, sp, #40	; 0x28
  40d502:	2308      	movs	r3, #8
  40d504:	e004      	b.n	40d510 <lv_img_draw_core+0x140>
        *d8 = *s8;
  40d506:	f819 1b01 	ldrb.w	r1, [r9], #1
  40d50a:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  40d50e:	3b01      	subs	r3, #1
    while(len) {
  40d510:	2b00      	cmp	r3, #0
  40d512:	d1f8      	bne.n	40d506 <lv_img_draw_core+0x136>
        lv_area_set_height(&line, 1);
  40d514:	2101      	movs	r1, #1
  40d516:	a80a      	add	r0, sp, #40	; 0x28
  40d518:	4b2f      	ldr	r3, [pc, #188]	; (40d5d8 <lv_img_draw_core+0x208>)
  40d51a:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
  40d51c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40d520:	f9ba 2000 	ldrsh.w	r2, [sl]
        int32_t y = mask_com.y1 - coords->y1;
  40d524:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
  40d528:	f9ba a002 	ldrsh.w	sl, [sl, #2]
  40d52c:	eba9 0a0a 	sub.w	sl, r9, sl
  40d530:	9604      	str	r6, [sp, #16]
  40d532:	9e07      	ldr	r6, [sp, #28]
  40d534:	469b      	mov	fp, r3
  40d536:	9502      	str	r5, [sp, #8]
  40d538:	4615      	mov	r5, r2
  40d53a:	9406      	str	r4, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40d53c:	e009      	b.n	40d552 <lv_img_draw_core+0x182>
                lv_img_decoder_close(&cdsc->dec_dsc);
  40d53e:	9805      	ldr	r0, [sp, #20]
  40d540:	4b26      	ldr	r3, [pc, #152]	; (40d5dc <lv_img_draw_core+0x20c>)
  40d542:	4798      	blx	r3
                _lv_mem_buf_release(buf);
  40d544:	9807      	ldr	r0, [sp, #28]
  40d546:	4b26      	ldr	r3, [pc, #152]	; (40d5e0 <lv_img_draw_core+0x210>)
  40d548:	4798      	blx	r3
                return LV_RES_INV;
  40d54a:	2000      	movs	r0, #0
  40d54c:	e747      	b.n	40d3de <lv_img_draw_core+0xe>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40d54e:	f109 0901 	add.w	r9, r9, #1
  40d552:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40d556:	4599      	cmp	r9, r3
  40d558:	dc29      	bgt.n	40d5ae <lv_img_draw_core+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40d55a:	aa0a      	add	r2, sp, #40	; 0x28
  40d55c:	9902      	ldr	r1, [sp, #8]
  40d55e:	a80c      	add	r0, sp, #48	; 0x30
  40d560:	4b1a      	ldr	r3, [pc, #104]	; (40d5cc <lv_img_draw_core+0x1fc>)
  40d562:	4798      	blx	r3
            if(union_ok == false) continue;
  40d564:	2800      	cmp	r0, #0
  40d566:	d0f2      	beq.n	40d54e <lv_img_draw_core+0x17e>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  40d568:	9804      	ldr	r0, [sp, #16]
  40d56a:	9005      	str	r0, [sp, #20]
  40d56c:	ebab 0105 	sub.w	r1, fp, r5
  40d570:	9600      	str	r6, [sp, #0]
  40d572:	9b03      	ldr	r3, [sp, #12]
  40d574:	fa0f f28a 	sxth.w	r2, sl
  40d578:	b209      	sxth	r1, r1
  40d57a:	4c1a      	ldr	r4, [pc, #104]	; (40d5e4 <lv_img_draw_core+0x214>)
  40d57c:	47a0      	blx	r4
            if(read_res != LV_RES_OK) {
  40d57e:	2801      	cmp	r0, #1
  40d580:	d1dd      	bne.n	40d53e <lv_img_draw_core+0x16e>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
  40d582:	f8cd 8004 	str.w	r8, [sp, #4]
  40d586:	9700      	str	r7, [sp, #0]
  40d588:	9b06      	ldr	r3, [sp, #24]
  40d58a:	4632      	mov	r2, r6
  40d58c:	a90c      	add	r1, sp, #48	; 0x30
  40d58e:	a80a      	add	r0, sp, #40	; 0x28
  40d590:	4c0f      	ldr	r4, [pc, #60]	; (40d5d0 <lv_img_draw_core+0x200>)
  40d592:	47a0      	blx	r4
            line.y1++;
  40d594:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  40d598:	3301      	adds	r3, #1
  40d59a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
  40d59e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  40d5a2:	3301      	adds	r3, #1
  40d5a4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
  40d5a8:	f10a 0a01 	add.w	sl, sl, #1
  40d5ac:	e7cf      	b.n	40d54e <lv_img_draw_core+0x17e>
        _lv_mem_buf_release(buf);
  40d5ae:	9807      	ldr	r0, [sp, #28]
  40d5b0:	4b0b      	ldr	r3, [pc, #44]	; (40d5e0 <lv_img_draw_core+0x210>)
  40d5b2:	4798      	blx	r3
  40d5b4:	e733      	b.n	40d41e <lv_img_draw_core+0x4e>
    if(cdsc == NULL) return LV_RES_INV;
  40d5b6:	2000      	movs	r0, #0
  40d5b8:	e711      	b.n	40d3de <lv_img_draw_core+0xe>
  40d5ba:	bf00      	nop
  40d5bc:	00412ee1 	.word	0x00412ee1
  40d5c0:	0040d39b 	.word	0x0040d39b
  40d5c4:	0040d3af 	.word	0x0040d3af
  40d5c8:	0040d2f1 	.word	0x0040d2f1
  40d5cc:	004155b3 	.word	0x004155b3
  40d5d0:	0040cab1 	.word	0x0040cab1
  40d5d4:	00416965 	.word	0x00416965
  40d5d8:	0041558b 	.word	0x0041558b
  40d5dc:	00413a2d 	.word	0x00413a2d
  40d5e0:	00416715 	.word	0x00416715
  40d5e4:	00413a09 	.word	0x00413a09
  40d5e8:	00412869 	.word	0x00412869

0040d5ec <lv_draw_img>:
{
  40d5ec:	b570      	push	{r4, r5, r6, lr}
  40d5ee:	4604      	mov	r4, r0
  40d5f0:	460d      	mov	r5, r1
    if(src == NULL) {
  40d5f2:	b122      	cbz	r2, 40d5fe <lv_draw_img+0x12>
  40d5f4:	4611      	mov	r1, r2
    if(dsc->opa <= LV_OPA_MIN) return;
  40d5f6:	781a      	ldrb	r2, [r3, #0]
  40d5f8:	2a02      	cmp	r2, #2
  40d5fa:	d804      	bhi.n	40d606 <lv_draw_img+0x1a>
  40d5fc:	bd70      	pop	{r4, r5, r6, pc}
        show_error(coords, mask, "No\ndata");
  40d5fe:	4a08      	ldr	r2, [pc, #32]	; (40d620 <lv_draw_img+0x34>)
  40d600:	4b08      	ldr	r3, [pc, #32]	; (40d624 <lv_draw_img+0x38>)
  40d602:	4798      	blx	r3
        return;
  40d604:	bd70      	pop	{r4, r5, r6, pc}
    res = lv_img_draw_core(coords, mask, src, dsc);
  40d606:	460a      	mov	r2, r1
  40d608:	4629      	mov	r1, r5
  40d60a:	4e07      	ldr	r6, [pc, #28]	; (40d628 <lv_draw_img+0x3c>)
  40d60c:	47b0      	blx	r6
    if(res == LV_RES_INV) {
  40d60e:	2800      	cmp	r0, #0
  40d610:	d1f4      	bne.n	40d5fc <lv_draw_img+0x10>
        show_error(coords, mask, "No\ndata");
  40d612:	4a03      	ldr	r2, [pc, #12]	; (40d620 <lv_draw_img+0x34>)
  40d614:	4629      	mov	r1, r5
  40d616:	4620      	mov	r0, r4
  40d618:	4b02      	ldr	r3, [pc, #8]	; (40d624 <lv_draw_img+0x38>)
  40d61a:	4798      	blx	r3
        return;
  40d61c:	e7ee      	b.n	40d5fc <lv_draw_img+0x10>
  40d61e:	bf00      	nop
  40d620:	0042c184 	.word	0x0042c184
  40d624:	0040d2f1 	.word	0x0040d2f1
  40d628:	0040d3d1 	.word	0x0040d3d1

0040d62c <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
  40d62c:	b160      	cbz	r0, 40d648 <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
  40d62e:	7802      	ldrb	r2, [r0, #0]
  40d630:	f1a2 0320 	sub.w	r3, r2, #32
  40d634:	b2db      	uxtb	r3, r3
  40d636:	2b5f      	cmp	r3, #95	; 0x5f
  40d638:	d908      	bls.n	40d64c <lv_img_src_get_type+0x20>
    else if(u8_p[0] >= 0x80) {
  40d63a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40d63e:	d101      	bne.n	40d644 <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
  40d640:	2000      	movs	r0, #0
}
  40d642:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
  40d644:	2002      	movs	r0, #2
  40d646:	4770      	bx	lr
    if(src == NULL) return img_src_type;
  40d648:	2003      	movs	r0, #3
  40d64a:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
  40d64c:	2001      	movs	r0, #1
  40d64e:	4770      	bx	lr

0040d650 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
  40d650:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40d654:	b2db      	uxtb	r3, r3
  40d656:	2b09      	cmp	r3, #9
  40d658:	d917      	bls.n	40d68a <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
  40d65a:	2860      	cmp	r0, #96	; 0x60
  40d65c:	d901      	bls.n	40d662 <hex_char_to_num+0x12>
  40d65e:	3820      	subs	r0, #32
  40d660:	b2c0      	uxtb	r0, r0

        switch(hex) {
  40d662:	3841      	subs	r0, #65	; 0x41
  40d664:	2805      	cmp	r0, #5
  40d666:	d80e      	bhi.n	40d686 <hex_char_to_num+0x36>
  40d668:	e8df f000 	tbb	[pc, r0]
  40d66c:	07051103 	.word	0x07051103
  40d670:	0b09      	.short	0x0b09
            case 'A':
                result = 10;
  40d672:	200a      	movs	r0, #10
  40d674:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
  40d676:	200c      	movs	r0, #12
                break;
  40d678:	4770      	bx	lr
            case 'D':
                result = 13;
  40d67a:	200d      	movs	r0, #13
                break;
  40d67c:	4770      	bx	lr
            case 'E':
                result = 14;
  40d67e:	200e      	movs	r0, #14
                break;
  40d680:	4770      	bx	lr
            case 'F':
                result = 15;
  40d682:	200f      	movs	r0, #15
                break;
  40d684:	4770      	bx	lr
            default:
                result = 0;
  40d686:	2000      	movs	r0, #0
                break;
  40d688:	4770      	bx	lr
        result = hex - '0';
  40d68a:	4618      	mov	r0, r3
  40d68c:	4770      	bx	lr
                result = 11;
  40d68e:	200b      	movs	r0, #11
        }
    }

    return result;
}
  40d690:	4770      	bx	lr
	...

0040d694 <draw_letter_subpx>:
{
  40d694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d698:	b09d      	sub	sp, #116	; 0x74
  40d69a:	f8bd 909c 	ldrh.w	r9, [sp, #156]	; 0x9c
  40d69e:	f89d 40a0 	ldrb.w	r4, [sp, #160]	; 0xa0
  40d6a2:	9409      	str	r4, [sp, #36]	; 0x24
  40d6a4:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
  40d6a8:	9416      	str	r4, [sp, #88]	; 0x58
    uint32_t bpp = g->bpp;
  40d6aa:	7a95      	ldrb	r5, [r2, #10]
    if(bpp == 3) bpp = 4;
  40d6ac:	2d03      	cmp	r5, #3
  40d6ae:	d00d      	beq.n	40d6cc <draw_letter_subpx+0x38>
    switch(bpp) {
  40d6b0:	1e6c      	subs	r4, r5, #1
  40d6b2:	2c07      	cmp	r4, #7
  40d6b4:	f200 820e 	bhi.w	40dad4 <draw_letter_subpx+0x440>
  40d6b8:	e8df f014 	tbh	[pc, r4, lsl #1]
  40d6bc:	0019000a 	.word	0x0019000a
  40d6c0:	000f020c 	.word	0x000f020c
  40d6c4:	020c020c 	.word	0x020c020c
  40d6c8:	0014020c 	.word	0x0014020c
    if(bpp == 3) bpp = 4;
  40d6cc:	2504      	movs	r5, #4
  40d6ce:	e7ef      	b.n	40d6b0 <draw_letter_subpx+0x1c>
            bitmask_init  = 0x80;
  40d6d0:	2480      	movs	r4, #128	; 0x80
  40d6d2:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp1_opa_table;
  40d6d4:	4caf      	ldr	r4, [pc, #700]	; (40d994 <draw_letter_subpx+0x300>)
  40d6d6:	940b      	str	r4, [sp, #44]	; 0x2c
  40d6d8:	e00d      	b.n	40d6f6 <draw_letter_subpx+0x62>
            bitmask_init  = 0xF0;
  40d6da:	24f0      	movs	r4, #240	; 0xf0
  40d6dc:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp4_opa_table;
  40d6de:	4cae      	ldr	r4, [pc, #696]	; (40d998 <draw_letter_subpx+0x304>)
  40d6e0:	940b      	str	r4, [sp, #44]	; 0x2c
            break;
  40d6e2:	e008      	b.n	40d6f6 <draw_letter_subpx+0x62>
            bitmask_init  = 0xFF;
  40d6e4:	24ff      	movs	r4, #255	; 0xff
  40d6e6:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp8_opa_table;
  40d6e8:	4cac      	ldr	r4, [pc, #688]	; (40d99c <draw_letter_subpx+0x308>)
  40d6ea:	940b      	str	r4, [sp, #44]	; 0x2c
            break;       /*No opa table, pixel value will be used directly*/
  40d6ec:	e003      	b.n	40d6f6 <draw_letter_subpx+0x62>
            bitmask_init  = 0xC0;
  40d6ee:	24c0      	movs	r4, #192	; 0xc0
  40d6f0:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp2_opa_table;
  40d6f2:	4cab      	ldr	r4, [pc, #684]	; (40d9a0 <draw_letter_subpx+0x30c>)
  40d6f4:	940b      	str	r4, [sp, #44]	; 0x2c
    int32_t box_w = g->box_w;
  40d6f6:	8854      	ldrh	r4, [r2, #2]
  40d6f8:	9411      	str	r4, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
  40d6fa:	f8b2 e004 	ldrh.w	lr, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40d6fe:	fb05 f604 	mul.w	r6, r5, r4
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d702:	f9b3 2000 	ldrsh.w	r2, [r3]
  40d706:	4282      	cmp	r2, r0
  40d708:	f340 8097 	ble.w	40d83a <draw_letter_subpx+0x1a6>
  40d70c:	1a12      	subs	r2, r2, r0
  40d70e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40d712:	920f      	str	r2, [sp, #60]	; 0x3c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d714:	4aa3      	ldr	r2, [pc, #652]	; (40d9a4 <draw_letter_subpx+0x310>)
  40d716:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40d718:	fb82 4204 	smull	r4, r2, r2, r4
  40d71c:	4402      	add	r2, r0
  40d71e:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  40d722:	42a2      	cmp	r2, r4
  40d724:	f340 808c 	ble.w	40d840 <draw_letter_subpx+0x1ac>
  40d728:	1a22      	subs	r2, r4, r0
  40d72a:	3201      	adds	r2, #1
  40d72c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40d730:	9208      	str	r2, [sp, #32]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d732:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40d736:	428a      	cmp	r2, r1
  40d738:	f340 8085 	ble.w	40d846 <draw_letter_subpx+0x1b2>
  40d73c:	1a52      	subs	r2, r2, r1
  40d73e:	920d      	str	r2, [sp, #52]	; 0x34
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d740:	eb0e 0201 	add.w	r2, lr, r1
  40d744:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
  40d748:	42a2      	cmp	r2, r4
  40d74a:	dd7f      	ble.n	40d84c <draw_letter_subpx+0x1b8>
  40d74c:	1a64      	subs	r4, r4, r1
  40d74e:	1c62      	adds	r2, r4, #1
  40d750:	9213      	str	r2, [sp, #76]	; 0x4c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40d752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d754:	fb05 f402 	mul.w	r4, r5, r2
  40d758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d75a:	fb06 4402 	mla	r4, r6, r2, r4
    map_p += bit_ofs >> 3;
  40d75e:	9e26      	ldr	r6, [sp, #152]	; 0x98
  40d760:	eb06 06e4 	add.w	r6, r6, r4, asr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40d764:	f004 0407 	and.w	r4, r4, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
  40d768:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d76a:	fb0e f202 	mul.w	r2, lr, r2
  40d76e:	9212      	str	r2, [sp, #72]	; 0x48
  40d770:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
  40d774:	dd02      	ble.n	40d77c <draw_letter_subpx+0xe8>
  40d776:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40d77a:	9212      	str	r2, [sp, #72]	; 0x48
  40d77c:	9317      	str	r3, [sp, #92]	; 0x5c
  40d77e:	468a      	mov	sl, r1
  40d780:	4683      	mov	fp, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d782:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40d784:	4638      	mov	r0, r7
  40d786:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40d9b4 <draw_letter_subpx+0x320>
  40d78a:	47c0      	blx	r8
  40d78c:	900c      	str	r0, [sp, #48]	; 0x30
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40d78e:	0078      	lsls	r0, r7, #1
  40d790:	47c0      	blx	r8
  40d792:	900e      	str	r0, [sp, #56]	; 0x38
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40d794:	4b84      	ldr	r3, [pc, #528]	; (40d9a8 <draw_letter_subpx+0x314>)
  40d796:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40d798:	4b84      	ldr	r3, [pc, #528]	; (40d9ac <draw_letter_subpx+0x318>)
  40d79a:	4798      	blx	r3
  40d79c:	8a83      	ldrh	r3, [r0, #20]
  40d79e:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
  40d7a2:	b291      	uxth	r1, r2
  40d7a4:	1a5b      	subs	r3, r3, r1
  40d7a6:	b29b      	uxth	r3, r3
  40d7a8:	3301      	adds	r3, #1
  40d7aa:	b21b      	sxth	r3, r3
  40d7ac:	4619      	mov	r1, r3
  40d7ae:	9314      	str	r3, [sp, #80]	; 0x50
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
  40d7b0:	f8d0 8008 	ldr.w	r8, [r0, #8]
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
  40d7b4:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  40d7b8:	ebaa 0303 	sub.w	r3, sl, r3
  40d7bc:	4608      	mov	r0, r1
  40d7be:	fb03 b301 	mla	r3, r3, r1, fp
  40d7c2:	1a9b      	subs	r3, r3, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
  40d7c4:	4a77      	ldr	r2, [pc, #476]	; (40d9a4 <draw_letter_subpx+0x310>)
  40d7c6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40d7c8:	fb82 e107 	smull	lr, r1, r2, r7
  40d7cc:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40d7d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40d7d2:	fb00 1007 	mla	r0, r0, r7, r1
  40d7d6:	0040      	lsls	r0, r0, #1
  40d7d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  40d7dc:	4498      	add	r8, r3
    map_area.x1 = col_start / 3 + pos_x;
  40d7de:	fa1f f08b 	uxth.w	r0, fp
  40d7e2:	4401      	add	r1, r0
  40d7e4:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    map_area.x2 = col_end / 3  + pos_x - 1;
  40d7e8:	9908      	ldr	r1, [sp, #32]
  40d7ea:	fb82 2301 	smull	r2, r3, r2, r1
  40d7ee:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  40d7f2:	4403      	add	r3, r0
  40d7f4:	b29b      	uxth	r3, r3
  40d7f6:	3b01      	subs	r3, #1
  40d7f8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    map_area.y1 = row_start + pos_y;
  40d7fc:	eb07 030a 	add.w	r3, r7, sl
  40d800:	b21b      	sxth	r3, r3
  40d802:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    map_area.y2 = map_area.y1;
  40d806:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d80a:	4b69      	ldr	r3, [pc, #420]	; (40d9b0 <draw_letter_subpx+0x31c>)
  40d80c:	4798      	blx	r3
  40d80e:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
  40d810:	f3c9 03c4 	ubfx	r3, r9, #3, #5
  40d814:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  40d818:	f009 0207 	and.w	r2, r9, #7
  40d81c:	f3c9 3342 	ubfx	r3, r9, #13, #3
  40d820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d824:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
  40d828:	f3c9 2904 	ubfx	r9, r9, #8, #5
  40d82c:	f88d 9062 	strb.w	r9, [sp, #98]	; 0x62
    int32_t mask_p = 0;
  40d830:	2300      	movs	r3, #0
  40d832:	9310      	str	r3, [sp, #64]	; 0x40
  40d834:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    for(row = row_start ; row < row_end; row++) {
  40d838:	e0eb      	b.n	40da12 <draw_letter_subpx+0x37e>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d83a:	2200      	movs	r2, #0
  40d83c:	920f      	str	r2, [sp, #60]	; 0x3c
  40d83e:	e769      	b.n	40d714 <draw_letter_subpx+0x80>
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d840:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d842:	9208      	str	r2, [sp, #32]
  40d844:	e775      	b.n	40d732 <draw_letter_subpx+0x9e>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d846:	2200      	movs	r2, #0
  40d848:	920d      	str	r2, [sp, #52]	; 0x34
  40d84a:	e779      	b.n	40d740 <draw_letter_subpx+0xac>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d84c:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  40d850:	e77f      	b.n	40d752 <draw_letter_subpx+0xbe>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
  40d852:	2d08      	cmp	r5, #8
  40d854:	d00b      	beq.n	40d86e <draw_letter_subpx+0x1da>
  40d856:	b2db      	uxtb	r3, r3
  40d858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d85a:	5cd2      	ldrb	r2, [r2, r3]
  40d85c:	e007      	b.n	40d86e <draw_letter_subpx+0x1da>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d85e:	b2da      	uxtb	r2, r3
  40d860:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d862:	fb03 f202 	mul.w	r2, r3, r2
  40d866:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d86a:	e000      	b.n	40d86e <draw_letter_subpx+0x1da>
                px_opa = 0;
  40d86c:	2200      	movs	r2, #0
            font_rgb[subpx_cnt] = px_opa;
  40d86e:	ab1c      	add	r3, sp, #112	; 0x70
  40d870:	440b      	add	r3, r1
  40d872:	f803 2c0c 	strb.w	r2, [r3, #-12]
            subpx_cnt ++;
  40d876:	3101      	adds	r1, #1
            if(subpx_cnt == 3) {
  40d878:	2903      	cmp	r1, #3
  40d87a:	d028      	beq.n	40d8ce <draw_letter_subpx+0x23a>
            if(col_bit < (int32_t)(8 - bpp)) {
  40d87c:	f1c5 0308 	rsb	r3, r5, #8
  40d880:	429c      	cmp	r4, r3
  40d882:	f280 8081 	bge.w	40d988 <draw_letter_subpx+0x2f4>
                col_bit += bpp;
  40d886:	9b05      	ldr	r3, [sp, #20]
  40d888:	442b      	add	r3, r5
  40d88a:	461c      	mov	r4, r3
                bitmask = bitmask >> bpp;
  40d88c:	fa2e fe05 	lsr.w	lr, lr, r5
        for(col = col_start; col < col_end; col++) {
  40d890:	3001      	adds	r0, #1
  40d892:	9b08      	ldr	r3, [sp, #32]
  40d894:	4298      	cmp	r0, r3
  40d896:	f280 808f 	bge.w	40d9b8 <draw_letter_subpx+0x324>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
  40d89a:	7833      	ldrb	r3, [r6, #0]
  40d89c:	ea0e 0203 	and.w	r2, lr, r3
  40d8a0:	9405      	str	r4, [sp, #20]
  40d8a2:	426b      	negs	r3, r5
  40d8a4:	1b1b      	subs	r3, r3, r4
  40d8a6:	3308      	adds	r3, #8
  40d8a8:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
  40d8ac:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
  40d8b0:	d0dc      	beq.n	40d86c <draw_letter_subpx+0x1d8>
                if(opa == LV_OPA_COVER) {
  40d8b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40d8b4:	2fff      	cmp	r7, #255	; 0xff
  40d8b6:	d0cc      	beq.n	40d852 <draw_letter_subpx+0x1be>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d8b8:	2d08      	cmp	r5, #8
  40d8ba:	d0d0      	beq.n	40d85e <draw_letter_subpx+0x1ca>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
  40d8bc:	b2db      	uxtb	r3, r3
  40d8be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d8c0:	5cd2      	ldrb	r2, [r2, r3]
  40d8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d8c4:	fb02 f203 	mul.w	r2, r2, r3
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d8c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d8cc:	e7cf      	b.n	40d86e <draw_letter_subpx+0x1da>
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red,
  40d8ce:	f898 9000 	ldrb.w	r9, [r8]
  40d8d2:	ea4f 0bd9 	mov.w	fp, r9, lsr #3
                                     (vdb_buf_tmp->ch.green_h << 3) + vdb_buf_tmp->ch.green_l,
  40d8d6:	f009 0107 	and.w	r1, r9, #7
  40d8da:	f898 2001 	ldrb.w	r2, [r8, #1]
  40d8de:	ea4f 1952 	mov.w	r9, r2, lsr #5
  40d8e2:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
                                     vdb_buf_tmp->ch.blue
  40d8e6:	f002 021f 	and.w	r2, r2, #31
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
  40d8ea:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  40d8ee:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
  40d8f2:	f1c1 0aff 	rsb	sl, r1, #255	; 0xff
  40d8f6:	fb0a fa0b 	mul.w	sl, sl, fp
  40d8fa:	fb01 aa03 	mla	sl, r1, r3, sl
  40d8fe:	f3ca 2a04 	ubfx	sl, sl, #8, #5
  40d902:	9b06      	ldr	r3, [sp, #24]
  40d904:	f36a 03c7 	bfi	r3, sl, #3, #5
  40d908:	461f      	mov	r7, r3
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
  40d90a:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
  40d90e:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
  40d912:	f1ca 0bff 	rsb	fp, sl, #255	; 0xff
  40d916:	fb0b f202 	mul.w	r2, fp, r2
  40d91a:	fb0a 2203 	mla	r2, sl, r3, r2
  40d91e:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40d922:	463b      	mov	r3, r7
  40d924:	f362 230c 	bfi	r3, r2, #8, #5
  40d928:	461f      	mov	r7, r3
                uint8_t green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
  40d92a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
  40d92e:	f89d b065 	ldrb.w	fp, [sp, #101]	; 0x65
  40d932:	f1cb 02ff 	rsb	r2, fp, #255	; 0xff
  40d936:	fb02 f909 	mul.w	r9, r2, r9
  40d93a:	fb0b 9303 	mla	r3, fp, r3, r9
  40d93e:	f3c3 2307 	ubfx	r3, r3, #8, #8
                res_color.ch.green_h = green >> 3;
  40d942:	f3c3 02c2 	ubfx	r2, r3, #3, #3
  40d946:	f362 0702 	bfi	r7, r2, #0, #3
  40d94a:	463a      	mov	r2, r7
                res_color.ch.green_l = green & 0x7;
  40d94c:	f363 324f 	bfi	r2, r3, #13, #3
  40d950:	9206      	str	r2, [sp, #24]
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
  40d952:	b951      	cbnz	r1, 40d96a <draw_letter_subpx+0x2d6>
  40d954:	f1bb 0f00 	cmp.w	fp, #0
  40d958:	d107      	bne.n	40d96a <draw_letter_subpx+0x2d6>
  40d95a:	f1ba 0f00 	cmp.w	sl, #0
  40d95e:	d104      	bne.n	40d96a <draw_letter_subpx+0x2d6>
  40d960:	2300      	movs	r3, #0
  40d962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d964:	f802 300c 	strb.w	r3, [r2, ip]
  40d968:	e003      	b.n	40d972 <draw_letter_subpx+0x2de>
                else mask_buf[mask_p] = LV_OPA_COVER;
  40d96a:	23ff      	movs	r3, #255	; 0xff
  40d96c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d96e:	f802 300c 	strb.w	r3, [r2, ip]
                color_buf[mask_p] = res_color;
  40d972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d974:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  40d978:	f823 201c 	strh.w	r2, [r3, ip, lsl #1]
                mask_p++;
  40d97c:	f10c 0c01 	add.w	ip, ip, #1
                vdb_buf_tmp++;
  40d980:	f108 0802 	add.w	r8, r8, #2
                subpx_cnt = 0;
  40d984:	2100      	movs	r1, #0
  40d986:	e779      	b.n	40d87c <draw_letter_subpx+0x1e8>
                map_p++;
  40d988:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40d98a:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
                col_bit = 0;
  40d98e:	2400      	movs	r4, #0
  40d990:	e77e      	b.n	40d890 <draw_letter_subpx+0x1fc>
  40d992:	bf00      	nop
  40d994:	0042c18c 	.word	0x0042c18c
  40d998:	0042c194 	.word	0x0042c194
  40d99c:	0042c1a4 	.word	0x0042c1a4
  40d9a0:	0042c190 	.word	0x0042c190
  40d9a4:	55555556 	.word	0x55555556
  40d9a8:	004097a1 	.word	0x004097a1
  40d9ac:	00414df5 	.word	0x00414df5
  40d9b0:	0040fcad 	.word	0x0040fcad
  40d9b4:	00416965 	.word	0x00416965
  40d9b8:	46e3      	mov	fp, ip
  40d9ba:	f8bd 7018 	ldrh.w	r7, [sp, #24]
        if(other_mask_cnt) {
  40d9be:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d9c0:	2b00      	cmp	r3, #0
  40d9c2:	d134      	bne.n	40da2e <draw_letter_subpx+0x39a>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d9c4:	9b08      	ldr	r3, [sp, #32]
  40d9c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d9c8:	eba3 0902 	sub.w	r9, r3, r2
  40d9cc:	465b      	mov	r3, fp
  40d9ce:	444b      	add	r3, r9
  40d9d0:	9912      	ldr	r1, [sp, #72]	; 0x48
  40d9d2:	4299      	cmp	r1, r3
  40d9d4:	dd4c      	ble.n	40da70 <draw_letter_subpx+0x3dc>
            map_area.y2 ++;
  40d9d6:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40d9da:	3301      	adds	r3, #1
  40d9dc:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
  40d9e0:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
        col_bit += ((box_w - col_end) + col_start) * bpp;
  40d9e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40d9e6:	9a08      	ldr	r2, [sp, #32]
  40d9e8:	1a9b      	subs	r3, r3, r2
  40d9ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d9ec:	4413      	add	r3, r2
  40d9ee:	fb03 4405 	mla	r4, r3, r5, r4
        map_p += (col_bit >> 3);
  40d9f2:	eb06 06e4 	add.w	r6, r6, r4, asr #3
        col_bit = col_bit & 0x7;
  40d9f6:	f004 0407 	and.w	r4, r4, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
  40d9fa:	4b38      	ldr	r3, [pc, #224]	; (40dadc <draw_letter_subpx+0x448>)
  40d9fc:	fb83 2309 	smull	r2, r3, r3, r9
  40da00:	ebc3 79e9 	rsb	r9, r3, r9, asr #31
  40da04:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40da06:	4499      	add	r9, r3
  40da08:	eb08 0849 	add.w	r8, r8, r9, lsl #1
    for(row = row_start ; row < row_end; row++) {
  40da0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40da0e:	3301      	adds	r3, #1
  40da10:	930d      	str	r3, [sp, #52]	; 0x34
  40da12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40da14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40da16:	4293      	cmp	r3, r2
  40da18:	da42      	bge.n	40daa0 <draw_letter_subpx+0x40c>
        bitmask = bitmask_init >> col_bit;
  40da1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40da1c:	fa23 fe04 	lsr.w	lr, r3, r4
        for(col = col_start; col < col_end; col++) {
  40da20:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40da22:	980f      	ldr	r0, [sp, #60]	; 0x3c
        uint32_t subpx_cnt = 0;
  40da24:	2100      	movs	r1, #0
  40da26:	469c      	mov	ip, r3
  40da28:	f8ad 7018 	strh.w	r7, [sp, #24]
        for(col = col_start; col < col_end; col++) {
  40da2c:	e731      	b.n	40d892 <draw_letter_subpx+0x1fe>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
  40da2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40da30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40da32:	4413      	add	r3, r2
  40da34:	469a      	mov	sl, r3
  40da36:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
  40da3a:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  40da3e:	b28a      	uxth	r2, r1
  40da40:	1a9b      	subs	r3, r3, r2
  40da42:	b29b      	uxth	r3, r3
  40da44:	3301      	adds	r3, #1
  40da46:	b21b      	sxth	r3, r3
  40da48:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
  40da4c:	4650      	mov	r0, sl
  40da4e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 40daec <draw_letter_subpx+0x458>
  40da52:	47c8      	blx	r9
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40da54:	2800      	cmp	r0, #0
  40da56:	d1b5      	bne.n	40d9c4 <draw_letter_subpx+0x330>
  40da58:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
  40da5c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  40da60:	1ac9      	subs	r1, r1, r3
  40da62:	b289      	uxth	r1, r1
  40da64:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
  40da66:	b209      	sxth	r1, r1
  40da68:	4650      	mov	r0, sl
  40da6a:	4b1d      	ldr	r3, [pc, #116]	; (40dae0 <draw_letter_subpx+0x44c>)
  40da6c:	4798      	blx	r3
  40da6e:	e7a9      	b.n	40d9c4 <draw_letter_subpx+0x330>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40da70:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40da72:	9302      	str	r3, [sp, #8]
  40da74:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40da76:	9301      	str	r3, [sp, #4]
  40da78:	2302      	movs	r3, #2
  40da7a:	9300      	str	r3, [sp, #0]
  40da7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40da7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40da80:	a91a      	add	r1, sp, #104	; 0x68
  40da82:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40da84:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40dae4 <draw_letter_subpx+0x450>
  40da88:	47d0      	blx	sl
            map_area.y1 = map_area.y2 + 1;
  40da8a:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  40da8e:	3301      	adds	r3, #1
  40da90:	b21b      	sxth	r3, r3
  40da92:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            map_area.y2 = map_area.y1;
  40da96:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            mask_p = 0;
  40da9a:	2300      	movs	r3, #0
  40da9c:	9310      	str	r3, [sp, #64]	; 0x40
  40da9e:	e7a1      	b.n	40d9e4 <draw_letter_subpx+0x350>
    if(map_area.y1 != map_area.y2) {
  40daa0:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
  40daa4:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40daa8:	429a      	cmp	r2, r3
  40daaa:	d00e      	beq.n	40daca <draw_letter_subpx+0x436>
        map_area.y2--;
  40daac:	3b01      	subs	r3, #1
  40daae:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40dab2:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40dab4:	9302      	str	r3, [sp, #8]
  40dab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40dab8:	9301      	str	r3, [sp, #4]
  40daba:	2302      	movs	r3, #2
  40dabc:	9300      	str	r3, [sp, #0]
  40dabe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40dac2:	a91a      	add	r1, sp, #104	; 0x68
  40dac4:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40dac6:	4c07      	ldr	r4, [pc, #28]	; (40dae4 <draw_letter_subpx+0x450>)
  40dac8:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40daca:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dacc:	4c06      	ldr	r4, [pc, #24]	; (40dae8 <draw_letter_subpx+0x454>)
  40dace:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
  40dad0:	980e      	ldr	r0, [sp, #56]	; 0x38
  40dad2:	47a0      	blx	r4
}
  40dad4:	b01d      	add	sp, #116	; 0x74
  40dad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dada:	bf00      	nop
  40dadc:	55555556 	.word	0x55555556
  40dae0:	00416af1 	.word	0x00416af1
  40dae4:	0040c991 	.word	0x0040c991
  40dae8:	00416715 	.word	0x00416715
  40daec:	0040fbe5 	.word	0x0040fbe5

0040daf0 <draw_letter_normal>:
{
  40daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40daf4:	b093      	sub	sp, #76	; 0x4c
  40daf6:	468e      	mov	lr, r1
  40daf8:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
  40dafc:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
  40db00:	910d      	str	r1, [sp, #52]	; 0x34
    uint32_t bpp = g->bpp;
  40db02:	f892 a00a 	ldrb.w	sl, [r2, #10]
    if(bpp == 3) bpp = 4;
  40db06:	f1ba 0f03 	cmp.w	sl, #3
  40db0a:	d00e      	beq.n	40db2a <draw_letter_normal+0x3a>
    switch(bpp) {
  40db0c:	f10a 34ff 	add.w	r4, sl, #4294967295
  40db10:	2c07      	cmp	r4, #7
  40db12:	f200 8147 	bhi.w	40dda4 <draw_letter_normal+0x2b4>
  40db16:	e8df f014 	tbh	[pc, r4, lsl #1]
  40db1a:	000b      	.short	0x000b
  40db1c:	0145001e 	.word	0x0145001e
  40db20:	01450011 	.word	0x01450011
  40db24:	01450145 	.word	0x01450145
  40db28:	0017      	.short	0x0017
    if(bpp == 3) bpp = 4;
  40db2a:	f04f 0a04 	mov.w	sl, #4
  40db2e:	e7ed      	b.n	40db0c <draw_letter_normal+0x1c>
            shades = 2;
  40db30:	2702      	movs	r7, #2
            bitmask_init  = 0x80;
  40db32:	2180      	movs	r1, #128	; 0x80
  40db34:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp1_opa_table;
  40db36:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 40ddd8 <draw_letter_normal+0x2e8>
  40db3a:	e011      	b.n	40db60 <draw_letter_normal+0x70>
            shades = 16;
  40db3c:	2710      	movs	r7, #16
            bitmask_init  = 0xF0;
  40db3e:	21f0      	movs	r1, #240	; 0xf0
  40db40:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp4_opa_table;
  40db42:	f8df b298 	ldr.w	fp, [pc, #664]	; 40dddc <draw_letter_normal+0x2ec>
            break;
  40db46:	e00b      	b.n	40db60 <draw_letter_normal+0x70>
            shades = 256;
  40db48:	f44f 7780 	mov.w	r7, #256	; 0x100
            bitmask_init  = 0xFF;
  40db4c:	21ff      	movs	r1, #255	; 0xff
  40db4e:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp8_opa_table;
  40db50:	f8df b28c 	ldr.w	fp, [pc, #652]	; 40dde0 <draw_letter_normal+0x2f0>
            break;       /*No opa table, pixel value will be used directly*/
  40db54:	e004      	b.n	40db60 <draw_letter_normal+0x70>
            shades = 4;
  40db56:	2704      	movs	r7, #4
            bitmask_init  = 0xC0;
  40db58:	21c0      	movs	r1, #192	; 0xc0
  40db5a:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp2_opa_table;
  40db5c:	f8df b284 	ldr.w	fp, [pc, #644]	; 40dde4 <draw_letter_normal+0x2f4>
    if(opa < LV_OPA_MAX) {
  40db60:	2efc      	cmp	r6, #252	; 0xfc
  40db62:	d821      	bhi.n	40dba8 <draw_letter_normal+0xb8>
        if(prev_opa != opa || prev_bpp != bpp) {
  40db64:	4c91      	ldr	r4, [pc, #580]	; (40ddac <draw_letter_normal+0x2bc>)
  40db66:	7824      	ldrb	r4, [r4, #0]
  40db68:	42a6      	cmp	r6, r4
  40db6a:	d001      	beq.n	40db70 <draw_letter_normal+0x80>
  40db6c:	2500      	movs	r5, #0
  40db6e:	e009      	b.n	40db84 <draw_letter_normal+0x94>
  40db70:	4c8f      	ldr	r4, [pc, #572]	; (40ddb0 <draw_letter_normal+0x2c0>)
  40db72:	6824      	ldr	r4, [r4, #0]
  40db74:	45a2      	cmp	sl, r4
  40db76:	d010      	beq.n	40db9a <draw_letter_normal+0xaa>
  40db78:	2500      	movs	r5, #0
  40db7a:	e003      	b.n	40db84 <draw_letter_normal+0x94>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40db7c:	4631      	mov	r1, r6
  40db7e:	4c8d      	ldr	r4, [pc, #564]	; (40ddb4 <draw_letter_normal+0x2c4>)
  40db80:	5561      	strb	r1, [r4, r5]
            for(i = 0; i < shades; i++) {
  40db82:	3501      	adds	r5, #1
  40db84:	42af      	cmp	r7, r5
  40db86:	d908      	bls.n	40db9a <draw_letter_normal+0xaa>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40db88:	f81b 1005 	ldrb.w	r1, [fp, r5]
  40db8c:	29ff      	cmp	r1, #255	; 0xff
  40db8e:	d0f5      	beq.n	40db7c <draw_letter_normal+0x8c>
  40db90:	fb01 f106 	mul.w	r1, r1, r6
  40db94:	f3c1 2107 	ubfx	r1, r1, #8, #8
  40db98:	e7f1      	b.n	40db7e <draw_letter_normal+0x8e>
        prev_opa = opa;
  40db9a:	4c84      	ldr	r4, [pc, #528]	; (40ddac <draw_letter_normal+0x2bc>)
  40db9c:	7026      	strb	r6, [r4, #0]
        prev_bpp = bpp;
  40db9e:	4c84      	ldr	r4, [pc, #528]	; (40ddb0 <draw_letter_normal+0x2c0>)
  40dba0:	f8c4 a000 	str.w	sl, [r4]
        bpp_opa_table_p = opa_table;
  40dba4:	f8df b20c 	ldr.w	fp, [pc, #524]	; 40ddb4 <draw_letter_normal+0x2c4>
    int32_t box_w = g->box_w;
  40dba8:	8855      	ldrh	r5, [r2, #2]
    int32_t box_h = g->box_h;
  40dbaa:	8897      	ldrh	r7, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40dbac:	fb0a f405 	mul.w	r4, sl, r5
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40dbb0:	f9b3 2000 	ldrsh.w	r2, [r3]
  40dbb4:	4282      	cmp	r2, r0
  40dbb6:	dd5a      	ble.n	40dc6e <draw_letter_normal+0x17e>
  40dbb8:	1a12      	subs	r2, r2, r0
  40dbba:	9207      	str	r2, [sp, #28]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40dbbc:	182a      	adds	r2, r5, r0
  40dbbe:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
  40dbc2:	42b2      	cmp	r2, r6
  40dbc4:	dd56      	ble.n	40dc74 <draw_letter_normal+0x184>
  40dbc6:	1a36      	subs	r6, r6, r0
  40dbc8:	f106 0801 	add.w	r8, r6, #1
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40dbcc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40dbd0:	4572      	cmp	r2, lr
  40dbd2:	dd51      	ble.n	40dc78 <draw_letter_normal+0x188>
  40dbd4:	eba2 020e 	sub.w	r2, r2, lr
  40dbd8:	9206      	str	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40dbda:	eb07 020e 	add.w	r2, r7, lr
  40dbde:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
  40dbe2:	42b2      	cmp	r2, r6
  40dbe4:	dd4b      	ble.n	40dc7e <draw_letter_normal+0x18e>
  40dbe6:	eba6 060e 	sub.w	r6, r6, lr
  40dbea:	1c72      	adds	r2, r6, #1
  40dbec:	9209      	str	r2, [sp, #36]	; 0x24
  40dbee:	930e      	str	r3, [sp, #56]	; 0x38
  40dbf0:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  40dbf4:	9008      	str	r0, [sp, #32]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40dbf6:	9b07      	ldr	r3, [sp, #28]
  40dbf8:	fb0a f303 	mul.w	r3, sl, r3
  40dbfc:	9a06      	ldr	r2, [sp, #24]
  40dbfe:	fb04 3402 	mla	r4, r4, r2, r3
    map_p += bit_ofs >> 3;
  40dc02:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  40dc04:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40dc08:	f004 0407 	and.w	r4, r4, #7
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
  40dc0c:	4b6a      	ldr	r3, [pc, #424]	; (40ddb8 <draw_letter_normal+0x2c8>)
  40dc0e:	4798      	blx	r3
  40dc10:	4b6a      	ldr	r3, [pc, #424]	; (40ddbc <draw_letter_normal+0x2cc>)
  40dc12:	4798      	blx	r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
  40dc14:	fb07 f705 	mul.w	r7, r7, r5
  40dc18:	42b8      	cmp	r0, r7
  40dc1a:	bfa8      	it	ge
  40dc1c:	4638      	movge	r0, r7
  40dc1e:	900a      	str	r0, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40dc20:	4b67      	ldr	r3, [pc, #412]	; (40ddc0 <draw_letter_normal+0x2d0>)
  40dc22:	4798      	blx	r3
  40dc24:	4681      	mov	r9, r0
    fill_area.x1 = col_start + pos_x;
  40dc26:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40dc2a:	9b07      	ldr	r3, [sp, #28]
  40dc2c:	18d3      	adds	r3, r2, r3
  40dc2e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos_x - 1;
  40dc32:	eb02 0308 	add.w	r3, r2, r8
  40dc36:	b29b      	uxth	r3, r3
  40dc38:	3b01      	subs	r3, #1
  40dc3a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos_y;
  40dc3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40dc40:	9a06      	ldr	r2, [sp, #24]
  40dc42:	4411      	add	r1, r2
  40dc44:	b20b      	sxth	r3, r1
  40dc46:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
  40dc4a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40dc4e:	4b5d      	ldr	r3, [pc, #372]	; (40ddc4 <draw_letter_normal+0x2d4>)
  40dc50:	4798      	blx	r3
  40dc52:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32_t col_bit_max = 8 - bpp;
  40dc54:	f1ca 0708 	rsb	r7, sl, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
  40dc58:	9b07      	ldr	r3, [sp, #28]
  40dc5a:	442b      	add	r3, r5
  40dc5c:	eba3 0308 	sub.w	r3, r3, r8
  40dc60:	fb03 f30a 	mul.w	r3, r3, sl
  40dc64:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t mask_p = 0;
  40dc66:	f04f 0e00 	mov.w	lr, #0
  40dc6a:	9708      	str	r7, [sp, #32]
    for(row = row_start ; row < row_end; row++) {
  40dc6c:	e03f      	b.n	40dcee <draw_letter_normal+0x1fe>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40dc6e:	2200      	movs	r2, #0
  40dc70:	9207      	str	r2, [sp, #28]
  40dc72:	e7a3      	b.n	40dbbc <draw_letter_normal+0xcc>
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40dc74:	46a8      	mov	r8, r5
  40dc76:	e7a9      	b.n	40dbcc <draw_letter_normal+0xdc>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40dc78:	2200      	movs	r2, #0
  40dc7a:	9206      	str	r2, [sp, #24]
  40dc7c:	e7ad      	b.n	40dbda <draw_letter_normal+0xea>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40dc7e:	9709      	str	r7, [sp, #36]	; 0x24
  40dc80:	e7b5      	b.n	40dbee <draw_letter_normal+0xfe>
                mask_buf[mask_p] = 0;
  40dc82:	2300      	movs	r3, #0
  40dc84:	f809 3005 	strb.w	r3, [r9, r5]
  40dc88:	e012      	b.n	40dcb0 <draw_letter_normal+0x1c0>
                map_p++;
  40dc8a:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40dc8c:	9805      	ldr	r0, [sp, #20]
                col_bit = 0;
  40dc8e:	2400      	movs	r4, #0
            mask_p++;
  40dc90:	3501      	adds	r5, #1
        for(col = col_start; col < col_end; col++) {
  40dc92:	3101      	adds	r1, #1
  40dc94:	4541      	cmp	r1, r8
  40dc96:	da11      	bge.n	40dcbc <draw_letter_normal+0x1cc>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
  40dc98:	7833      	ldrb	r3, [r6, #0]
  40dc9a:	4003      	ands	r3, r0
  40dc9c:	1b3a      	subs	r2, r7, r4
  40dc9e:	40d3      	lsrs	r3, r2
            if(letter_px) {
  40dca0:	f013 0fff 	tst.w	r3, #255	; 0xff
  40dca4:	d0ed      	beq.n	40dc82 <draw_letter_normal+0x192>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
  40dca6:	b2db      	uxtb	r3, r3
  40dca8:	f81b 3003 	ldrb.w	r3, [fp, r3]
  40dcac:	f809 3005 	strb.w	r3, [r9, r5]
            if(col_bit < col_bit_max) {
  40dcb0:	42bc      	cmp	r4, r7
  40dcb2:	d2ea      	bcs.n	40dc8a <draw_letter_normal+0x19a>
                col_bit += bpp;
  40dcb4:	4454      	add	r4, sl
                bitmask = bitmask >> bpp;
  40dcb6:	fa20 f00a 	lsr.w	r0, r0, sl
  40dcba:	e7e9      	b.n	40dc90 <draw_letter_normal+0x1a0>
  40dcbc:	9708      	str	r7, [sp, #32]
        if(other_mask_cnt) {
  40dcbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40dcc0:	bb03      	cbnz	r3, 40dd04 <draw_letter_normal+0x214>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40dcc2:	9b07      	ldr	r3, [sp, #28]
  40dcc4:	eba8 0303 	sub.w	r3, r8, r3
  40dcc8:	442b      	add	r3, r5
  40dcca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40dccc:	429a      	cmp	r2, r3
  40dcce:	d938      	bls.n	40dd42 <draw_letter_normal+0x252>
            fill_area.y2 ++;
  40dcd0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40dcd4:	3301      	adds	r3, #1
  40dcd6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  40dcda:	46ae      	mov	lr, r5
        col_bit += col_bit_row_ofs;
  40dcdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dcde:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
  40dce0:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
  40dce4:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
  40dce8:	9b06      	ldr	r3, [sp, #24]
  40dcea:	3301      	adds	r3, #1
  40dcec:	9306      	str	r3, [sp, #24]
  40dcee:	9b06      	ldr	r3, [sp, #24]
  40dcf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dcf2:	4293      	cmp	r3, r2
  40dcf4:	da3d      	bge.n	40dd72 <draw_letter_normal+0x282>
        bitmask = bitmask_init >> col_bit;
  40dcf6:	9b05      	ldr	r3, [sp, #20]
  40dcf8:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
  40dcfc:	4675      	mov	r5, lr
  40dcfe:	9907      	ldr	r1, [sp, #28]
  40dd00:	9f08      	ldr	r7, [sp, #32]
  40dd02:	e7c7      	b.n	40dc94 <draw_letter_normal+0x1a4>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  40dd04:	eb09 030e 	add.w	r3, r9, lr
  40dd08:	4618      	mov	r0, r3
  40dd0a:	930f      	str	r3, [sp, #60]	; 0x3c
  40dd0c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
  40dd10:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  40dd14:	b28a      	uxth	r2, r1
  40dd16:	1a9b      	subs	r3, r3, r2
  40dd18:	b29b      	uxth	r3, r3
  40dd1a:	3301      	adds	r3, #1
  40dd1c:	b21b      	sxth	r3, r3
  40dd1e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40dd22:	4f29      	ldr	r7, [pc, #164]	; (40ddc8 <draw_letter_normal+0x2d8>)
  40dd24:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40dd26:	2800      	cmp	r0, #0
  40dd28:	d1cb      	bne.n	40dcc2 <draw_letter_normal+0x1d2>
  40dd2a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  40dd2e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  40dd32:	1ac9      	subs	r1, r1, r3
  40dd34:	b289      	uxth	r1, r1
  40dd36:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
  40dd38:	b209      	sxth	r1, r1
  40dd3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40dd3c:	4b23      	ldr	r3, [pc, #140]	; (40ddcc <draw_letter_normal+0x2dc>)
  40dd3e:	4798      	blx	r3
  40dd40:	e7bf      	b.n	40dcc2 <draw_letter_normal+0x1d2>
            _lv_blend_fill(clip_area, &fill_area,
  40dd42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40dd44:	9302      	str	r3, [sp, #8]
  40dd46:	23ff      	movs	r3, #255	; 0xff
  40dd48:	9301      	str	r3, [sp, #4]
  40dd4a:	2302      	movs	r3, #2
  40dd4c:	9300      	str	r3, [sp, #0]
  40dd4e:	464b      	mov	r3, r9
  40dd50:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40dd54:	a910      	add	r1, sp, #64	; 0x40
  40dd56:	980e      	ldr	r0, [sp, #56]	; 0x38
  40dd58:	4d1d      	ldr	r5, [pc, #116]	; (40ddd0 <draw_letter_normal+0x2e0>)
  40dd5a:	47a8      	blx	r5
            fill_area.y1 = fill_area.y2 + 1;
  40dd5c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  40dd60:	3301      	adds	r3, #1
  40dd62:	b21b      	sxth	r3, r3
  40dd64:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
  40dd68:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
  40dd6c:	f04f 0e00 	mov.w	lr, #0
  40dd70:	e7b4      	b.n	40dcdc <draw_letter_normal+0x1ec>
    if(fill_area.y1 != fill_area.y2) {
  40dd72:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  40dd76:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40dd7a:	429a      	cmp	r2, r3
  40dd7c:	d00f      	beq.n	40dd9e <draw_letter_normal+0x2ae>
        fill_area.y2--;
  40dd7e:	3b01      	subs	r3, #1
  40dd80:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(clip_area, &fill_area,
  40dd84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40dd86:	9302      	str	r3, [sp, #8]
  40dd88:	23ff      	movs	r3, #255	; 0xff
  40dd8a:	9301      	str	r3, [sp, #4]
  40dd8c:	2302      	movs	r3, #2
  40dd8e:	9300      	str	r3, [sp, #0]
  40dd90:	464b      	mov	r3, r9
  40dd92:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40dd96:	a910      	add	r1, sp, #64	; 0x40
  40dd98:	980e      	ldr	r0, [sp, #56]	; 0x38
  40dd9a:	4c0d      	ldr	r4, [pc, #52]	; (40ddd0 <draw_letter_normal+0x2e0>)
  40dd9c:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40dd9e:	4648      	mov	r0, r9
  40dda0:	4b0c      	ldr	r3, [pc, #48]	; (40ddd4 <draw_letter_normal+0x2e4>)
  40dda2:	4798      	blx	r3
}
  40dda4:	b013      	add	sp, #76	; 0x4c
  40dda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ddaa:	bf00      	nop
  40ddac:	2040c7a8 	.word	0x2040c7a8
  40ddb0:	2040c7a4 	.word	0x2040c7a4
  40ddb4:	2040c6a4 	.word	0x2040c6a4
  40ddb8:	004097a1 	.word	0x004097a1
  40ddbc:	00414cf1 	.word	0x00414cf1
  40ddc0:	00416965 	.word	0x00416965
  40ddc4:	0040fcad 	.word	0x0040fcad
  40ddc8:	0040fbe5 	.word	0x0040fbe5
  40ddcc:	00416af1 	.word	0x00416af1
  40ddd0:	0040c871 	.word	0x0040c871
  40ddd4:	00416715 	.word	0x00416715
  40ddd8:	0042c18c 	.word	0x0042c18c
  40dddc:	0042c194 	.word	0x0042c194
  40dde0:	0042c1a4 	.word	0x0042c1a4
  40dde4:	0042c190 	.word	0x0042c190

0040dde8 <lv_draw_letter>:
{
  40dde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ddec:	b089      	sub	sp, #36	; 0x24
  40ddee:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
  40ddf2:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    if(opa < LV_OPA_MIN) return;
  40ddf6:	2d01      	cmp	r5, #1
  40ddf8:	d937      	bls.n	40de6a <lv_draw_letter+0x82>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40ddfa:	2dfd      	cmp	r5, #253	; 0xfd
  40ddfc:	d900      	bls.n	40de00 <lv_draw_letter+0x18>
  40ddfe:	25ff      	movs	r5, #255	; 0xff
    if(font_p == NULL) {
  40de00:	b39a      	cbz	r2, 40de6a <lv_draw_letter+0x82>
  40de02:	469b      	mov	fp, r3
  40de04:	4614      	mov	r4, r2
  40de06:	4689      	mov	r9, r1
  40de08:	4607      	mov	r7, r0
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
  40de0a:	2300      	movs	r3, #0
  40de0c:	465a      	mov	r2, fp
  40de0e:	a905      	add	r1, sp, #20
  40de10:	4620      	mov	r0, r4
  40de12:	4e2c      	ldr	r6, [pc, #176]	; (40dec4 <lv_draw_letter+0xdc>)
  40de14:	47b0      	blx	r6
    if(g_ret == false)  {
  40de16:	b340      	cbz	r0, 40de6a <lv_draw_letter+0x82>
    if((g.box_h == 0) || (g.box_w == 0)) return;
  40de18:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40de1c:	b32b      	cbz	r3, 40de6a <lv_draw_letter+0x82>
  40de1e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40de22:	b312      	cbz	r2, 40de6a <lv_draw_letter+0x82>
    int32_t pos_x = pos_p->x + g.ofs_x;
  40de24:	f9b7 a000 	ldrsh.w	sl, [r7]
  40de28:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
  40de2c:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
  40de2e:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
  40de32:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  40de36:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  40de3a:	1a09      	subs	r1, r1, r0
  40de3c:	440f      	add	r7, r1
  40de3e:	1aff      	subs	r7, r7, r3
  40de40:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  40de44:	1a7f      	subs	r7, r7, r1
    if(pos_x + g.box_w < clip_area->x1 ||
  40de46:	4452      	add	r2, sl
  40de48:	f9b9 1000 	ldrsh.w	r1, [r9]
  40de4c:	428a      	cmp	r2, r1
  40de4e:	db0c      	blt.n	40de6a <lv_draw_letter+0x82>
       pos_x > clip_area->x2 ||
  40de50:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
  40de54:	4592      	cmp	sl, r2
  40de56:	dc08      	bgt.n	40de6a <lv_draw_letter+0x82>
       pos_y + g.box_h < clip_area->y1 ||
  40de58:	443b      	add	r3, r7
  40de5a:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
       pos_x > clip_area->x2 ||
  40de5e:	4293      	cmp	r3, r2
  40de60:	db03      	blt.n	40de6a <lv_draw_letter+0x82>
       pos_y > clip_area->y2)  {
  40de62:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
       pos_y + g.box_h < clip_area->y1 ||
  40de66:	429f      	cmp	r7, r3
  40de68:	dd02      	ble.n	40de70 <lv_draw_letter+0x88>
}
  40de6a:	b009      	add	sp, #36	; 0x24
  40de6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
  40de70:	4659      	mov	r1, fp
  40de72:	4620      	mov	r0, r4
  40de74:	4b14      	ldr	r3, [pc, #80]	; (40dec8 <lv_draw_letter+0xe0>)
  40de76:	4798      	blx	r3
    if(map_p == NULL) {
  40de78:	2800      	cmp	r0, #0
  40de7a:	d0f6      	beq.n	40de6a <lv_draw_letter+0x82>
    if(font_p->subpx) {
  40de7c:	7b22      	ldrb	r2, [r4, #12]
  40de7e:	f012 0f03 	tst.w	r2, #3
  40de82:	d00f      	beq.n	40dea4 <lv_draw_letter+0xbc>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40de84:	f8cd 800c 	str.w	r8, [sp, #12]
  40de88:	9502      	str	r5, [sp, #8]
  40de8a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40de8e:	f8ad 2004 	strh.w	r2, [sp, #4]
  40de92:	9000      	str	r0, [sp, #0]
  40de94:	464b      	mov	r3, r9
  40de96:	aa05      	add	r2, sp, #20
  40de98:	b239      	sxth	r1, r7
  40de9a:	fa0f f08a 	sxth.w	r0, sl
  40de9e:	4c0b      	ldr	r4, [pc, #44]	; (40decc <lv_draw_letter+0xe4>)
  40dea0:	47a0      	blx	r4
  40dea2:	e7e2      	b.n	40de6a <lv_draw_letter+0x82>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40dea4:	f8cd 800c 	str.w	r8, [sp, #12]
  40dea8:	9502      	str	r5, [sp, #8]
  40deaa:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40deae:	f8ad 2004 	strh.w	r2, [sp, #4]
  40deb2:	9000      	str	r0, [sp, #0]
  40deb4:	464b      	mov	r3, r9
  40deb6:	aa05      	add	r2, sp, #20
  40deb8:	b239      	sxth	r1, r7
  40deba:	fa0f f08a 	sxth.w	r0, sl
  40debe:	4c04      	ldr	r4, [pc, #16]	; (40ded0 <lv_draw_letter+0xe8>)
  40dec0:	47a0      	blx	r4
  40dec2:	e7d2      	b.n	40de6a <lv_draw_letter+0x82>
  40dec4:	00413b35 	.word	0x00413b35
  40dec8:	00413b2d 	.word	0x00413b2d
  40decc:	0040d695 	.word	0x0040d695
  40ded0:	0040daf1 	.word	0x0040daf1

0040ded4 <lv_draw_label_dsc_init>:
{
  40ded4:	b510      	push	{r4, lr}
  40ded6:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
  40ded8:	2124      	movs	r1, #36	; 0x24
  40deda:	4b0e      	ldr	r3, [pc, #56]	; (40df14 <lv_draw_label_dsc_init+0x40>)
  40dedc:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
  40dede:	23ff      	movs	r3, #255	; 0xff
  40dee0:	7323      	strb	r3, [r4, #12]
    dsc->color = LV_COLOR_BLACK;
  40dee2:	2300      	movs	r3, #0
  40dee4:	8023      	strh	r3, [r4, #0]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
  40dee6:	4a0c      	ldr	r2, [pc, #48]	; (40df18 <lv_draw_label_dsc_init+0x44>)
  40dee8:	60a2      	str	r2, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  40deea:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40deee:	6162      	str	r2, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
  40def0:	61a2      	str	r2, [r4, #24]
    dsc->sel_color = LV_COLOR_BLACK;
  40def2:	8063      	strh	r3, [r4, #2]
    dsc->sel_bg_color = LV_COLOR_BLUE;
  40def4:	7922      	ldrb	r2, [r4, #4]
  40def6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  40defa:	f363 02c7 	bfi	r2, r3, #3, #5
  40defe:	7122      	strb	r2, [r4, #4]
  40df00:	7962      	ldrb	r2, [r4, #5]
  40df02:	f042 021f 	orr.w	r2, r2, #31
  40df06:	f363 1247 	bfi	r2, r3, #5, #3
  40df0a:	7162      	strb	r2, [r4, #5]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
  40df0c:	f884 3020 	strb.w	r3, [r4, #32]
  40df10:	bd10      	pop	{r4, pc}
  40df12:	bf00      	nop
  40df14:	00416af1 	.word	0x00416af1
  40df18:	2040008c 	.word	0x2040008c

0040df1c <lv_draw_label>:
{
  40df1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40df20:	b0b7      	sub	sp, #220	; 0xdc
  40df22:	9c40      	ldr	r4, [sp, #256]	; 0x100
    if(dsc->opa <= LV_OPA_MIN) return;
  40df24:	7b15      	ldrb	r5, [r2, #12]
  40df26:	2d02      	cmp	r5, #2
  40df28:	d903      	bls.n	40df32 <lv_draw_label+0x16>
    const lv_font_t * font = dsc->font;
  40df2a:	6895      	ldr	r5, [r2, #8]
  40df2c:	9506      	str	r5, [sp, #24]
    if(txt[0] == '\0')  return;
  40df2e:	781d      	ldrb	r5, [r3, #0]
  40df30:	b915      	cbnz	r5, 40df38 <lv_draw_label+0x1c>
}
  40df32:	b037      	add	sp, #220	; 0xdc
  40df34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40df38:	930c      	str	r3, [sp, #48]	; 0x30
  40df3a:	4616      	mov	r6, r2
  40df3c:	460a      	mov	r2, r1
  40df3e:	9109      	str	r1, [sp, #36]	; 0x24
  40df40:	4605      	mov	r5, r0
  40df42:	9010      	str	r0, [sp, #64]	; 0x40
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
  40df44:	4601      	mov	r1, r0
  40df46:	a834      	add	r0, sp, #208	; 0xd0
  40df48:	4ba8      	ldr	r3, [pc, #672]	; (40e1ec <lv_draw_label+0x2d0>)
  40df4a:	4798      	blx	r3
    if(!clip_ok) return;
  40df4c:	2800      	cmp	r0, #0
  40df4e:	d0f0      	beq.n	40df32 <lv_draw_label+0x16>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
  40df50:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40df54:	f012 0f02 	tst.w	r2, #2
  40df58:	d12b      	bne.n	40dfb2 <lv_draw_label+0x96>
  40df5a:	88ab      	ldrh	r3, [r5, #4]
  40df5c:	882a      	ldrh	r2, [r5, #0]
  40df5e:	1a9b      	subs	r3, r3, r2
  40df60:	b29b      	uxth	r3, r3
  40df62:	3301      	adds	r3, #1
  40df64:	b21b      	sxth	r3, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  40df66:	9a06      	ldr	r2, [sp, #24]
  40df68:	f9b2 8008 	ldrsh.w	r8, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
  40df6c:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40df70:	4442      	add	r2, r8
  40df72:	920d      	str	r2, [sp, #52]	; 0x34
    pos.x = coords->x1;
  40df74:	9810      	ldr	r0, [sp, #64]	; 0x40
  40df76:	f9b0 2000 	ldrsh.w	r2, [r0]
  40df7a:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
    pos.y = coords->y1;
  40df7e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    x_ofs = dsc->ofs_x;
  40df82:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
  40df86:	9112      	str	r1, [sp, #72]	; 0x48
    y_ofs = dsc->ofs_y;
  40df88:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
    pos.y += y_ofs;
  40df8c:	440a      	add	r2, r1
  40df8e:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    if(hint && y_ofs == 0 && coords->y1 < 0) {
  40df92:	1c22      	adds	r2, r4, #0
  40df94:	bf18      	it	ne
  40df96:	2201      	movne	r2, #1
  40df98:	2900      	cmp	r1, #0
  40df9a:	bf14      	ite	ne
  40df9c:	2100      	movne	r1, #0
  40df9e:	f002 0101 	andeq.w	r1, r2, #1
  40dfa2:	b341      	cbz	r1, 40dff6 <lv_draw_label+0xda>
  40dfa4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
  40dfa8:	2900      	cmp	r1, #0
  40dfaa:	db13      	blt.n	40dfd4 <lv_draw_label+0xb8>
    int32_t last_line_start = -1;
  40dfac:	f04f 37ff 	mov.w	r7, #4294967295
  40dfb0:	e023      	b.n	40dffa <lv_draw_label+0xde>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
  40dfb2:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40dfb6:	9202      	str	r2, [sp, #8]
  40dfb8:	f647 4218 	movw	r2, #31768	; 0x7c18
  40dfbc:	9201      	str	r2, [sp, #4]
  40dfbe:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40dfc2:	9200      	str	r2, [sp, #0]
  40dfc4:	68b2      	ldr	r2, [r6, #8]
  40dfc6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40dfc8:	a818      	add	r0, sp, #96	; 0x60
  40dfca:	4d89      	ldr	r5, [pc, #548]	; (40e1f0 <lv_draw_label+0x2d4>)
  40dfcc:	47a8      	blx	r5
        w = p.x;
  40dfce:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40dfd2:	e7c8      	b.n	40df66 <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
  40dfd4:	68a0      	ldr	r0, [r4, #8]
  40dfd6:	1a40      	subs	r0, r0, r1
  40dfd8:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40dfdc:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40dfe0:	980d      	ldr	r0, [sp, #52]	; 0x34
  40dfe2:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  40dfe6:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
  40dfea:	dd02      	ble.n	40dff2 <lv_draw_label+0xd6>
            hint->line_start = -1;
  40dfec:	f04f 31ff 	mov.w	r1, #4294967295
  40dff0:	6021      	str	r1, [r4, #0]
        last_line_start = hint->line_start;
  40dff2:	6827      	ldr	r7, [r4, #0]
  40dff4:	e001      	b.n	40dffa <lv_draw_label+0xde>
    int32_t last_line_start = -1;
  40dff6:	f04f 37ff 	mov.w	r7, #4294967295
    if(hint && last_line_start >= 0) {
  40dffa:	2f00      	cmp	r7, #0
  40dffc:	bfb4      	ite	lt
  40dffe:	2200      	movlt	r2, #0
  40e000:	f002 0201 	andge.w	r2, r2, #1
  40e004:	b1d2      	cbz	r2, 40e03c <lv_draw_label+0x120>
        pos.y += hint->y;
  40e006:	6862      	ldr	r2, [r4, #4]
  40e008:	f8bd 10ce 	ldrh.w	r1, [sp, #206]	; 0xce
  40e00c:	440a      	add	r2, r1
  40e00e:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e012:	b21b      	sxth	r3, r3
  40e014:	4619      	mov	r1, r3
  40e016:	930e      	str	r3, [sp, #56]	; 0x38
  40e018:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40e01c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e020:	9300      	str	r3, [sp, #0]
  40e022:	460b      	mov	r3, r1
  40e024:	9906      	ldr	r1, [sp, #24]
  40e026:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e028:	4438      	add	r0, r7
  40e02a:	4d72      	ldr	r5, [pc, #456]	; (40e1f4 <lv_draw_label+0x2d8>)
  40e02c:	47a8      	blx	r5
  40e02e:	eb07 0b00 	add.w	fp, r7, r0
  40e032:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40e036:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    while(pos.y + line_height_font < mask->y1) {
  40e03a:	e007      	b.n	40e04c <lv_draw_label+0x130>
    uint32_t line_start     = 0;
  40e03c:	2700      	movs	r7, #0
  40e03e:	e7e8      	b.n	40e012 <lv_draw_label+0xf6>
        if(txt[line_start] == '\0') return;
  40e040:	782b      	ldrb	r3, [r5, #0]
        line_start = line_end;
  40e042:	465f      	mov	r7, fp
        if(txt[line_start] == '\0') return;
  40e044:	2b00      	cmp	r3, #0
  40e046:	f43f af74 	beq.w	40df32 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e04a:	4683      	mov	fp, r0
    while(pos.y + line_height_font < mask->y1) {
  40e04c:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40e050:	4443      	add	r3, r8
  40e052:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40e056:	4293      	cmp	r3, r2
  40e058:	da28      	bge.n	40e0ac <lv_draw_label+0x190>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e05a:	eb0a 050b 	add.w	r5, sl, fp
  40e05e:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40e062:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e066:	9300      	str	r3, [sp, #0]
  40e068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40e06a:	9906      	ldr	r1, [sp, #24]
  40e06c:	4628      	mov	r0, r5
  40e06e:	4f61      	ldr	r7, [pc, #388]	; (40e1f4 <lv_draw_label+0x2d8>)
  40e070:	47b8      	blx	r7
  40e072:	4458      	add	r0, fp
        pos.y += line_height;
  40e074:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e07a:	4413      	add	r3, r2
  40e07c:	b21b      	sxth	r3, r3
  40e07e:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
  40e082:	2c00      	cmp	r4, #0
  40e084:	d0dc      	beq.n	40e040 <lv_draw_label+0x124>
  40e086:	f513 6f80 	cmn.w	r3, #1024	; 0x400
  40e08a:	dbd9      	blt.n	40e040 <lv_draw_label+0x124>
  40e08c:	6823      	ldr	r3, [r4, #0]
  40e08e:	2b00      	cmp	r3, #0
  40e090:	dad6      	bge.n	40e040 <lv_draw_label+0x124>
            hint->line_start = line_start;
  40e092:	f8c4 b000 	str.w	fp, [r4]
            hint->y          = pos.y - coords->y1;
  40e096:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40e09a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e09c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40e0a0:	1a9b      	subs	r3, r3, r2
  40e0a2:	6063      	str	r3, [r4, #4]
            hint->coord_y    = coords->y1;
  40e0a4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40e0a8:	60a3      	str	r3, [r4, #8]
  40e0aa:	e7c9      	b.n	40e040 <lv_draw_label+0x124>
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40e0ac:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40e0b0:	f012 0f04 	tst.w	r2, #4
  40e0b4:	d124      	bne.n	40e100 <lv_draw_label+0x1e4>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40e0b6:	f012 0f08 	tst.w	r2, #8
  40e0ba:	d13d      	bne.n	40e138 <lv_draw_label+0x21c>
    lv_opa_t opa = dsc->opa;
  40e0bc:	7b33      	ldrb	r3, [r6, #12]
  40e0be:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t sel_start = dsc->sel_start;
  40e0c0:	6973      	ldr	r3, [r6, #20]
  40e0c2:	4619      	mov	r1, r3
  40e0c4:	461c      	mov	r4, r3
    uint32_t sel_end = dsc->sel_end;
  40e0c6:	f8d6 8018 	ldr.w	r8, [r6, #24]
    if(sel_start > sel_end) {
  40e0ca:	4543      	cmp	r3, r8
  40e0cc:	d802      	bhi.n	40e0d4 <lv_draw_label+0x1b8>
  40e0ce:	4643      	mov	r3, r8
    uint32_t sel_start = dsc->sel_start;
  40e0d0:	4688      	mov	r8, r1
    uint32_t sel_end = dsc->sel_end;
  40e0d2:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
  40e0d4:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40e0d8:	f013 0f03 	tst.w	r3, #3
  40e0dc:	d144      	bne.n	40e168 <lv_draw_label+0x24c>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
  40e0de:	a81a      	add	r0, sp, #104	; 0x68
  40e0e0:	4b45      	ldr	r3, [pc, #276]	; (40e1f8 <lv_draw_label+0x2dc>)
  40e0e2:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
  40e0e4:	88b3      	ldrh	r3, [r6, #4]
  40e0e6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    int32_t pos_x_start = pos.x;
  40e0ea:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40e0ee:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
  40e0f0:	2300      	movs	r3, #0
  40e0f2:	9311      	str	r3, [sp, #68]	; 0x44
  40e0f4:	f8cd b01c 	str.w	fp, [sp, #28]
  40e0f8:	46bb      	mov	fp, r7
  40e0fa:	46c2      	mov	sl, r8
  40e0fc:	46a0      	mov	r8, r4
    while(txt[line_start] != '\0') {
  40e0fe:	e170      	b.n	40e3e2 <lv_draw_label+0x4c6>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e100:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e104:	9200      	str	r2, [sp, #0]
  40e106:	9a06      	ldr	r2, [sp, #24]
  40e108:	ebab 0107 	sub.w	r1, fp, r7
  40e10c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e10e:	4438      	add	r0, r7
  40e110:	4c3a      	ldr	r4, [pc, #232]	; (40e1fc <lv_draw_label+0x2e0>)
  40e112:	47a0      	blx	r4
  40e114:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e116:	8893      	ldrh	r3, [r2, #4]
  40e118:	8812      	ldrh	r2, [r2, #0]
  40e11a:	1a9b      	subs	r3, r3, r2
  40e11c:	b29b      	uxth	r3, r3
  40e11e:	3301      	adds	r3, #1
  40e120:	b21b      	sxth	r3, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40e122:	1a1b      	subs	r3, r3, r0
  40e124:	d406      	bmi.n	40e134 <lv_draw_label+0x218>
  40e126:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40e12a:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40e12e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e132:	e7c3      	b.n	40e0bc <lv_draw_label+0x1a0>
  40e134:	3301      	adds	r3, #1
  40e136:	e7f6      	b.n	40e126 <lv_draw_label+0x20a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e138:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e13c:	9200      	str	r2, [sp, #0]
  40e13e:	9a06      	ldr	r2, [sp, #24]
  40e140:	ebab 0107 	sub.w	r1, fp, r7
  40e144:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e146:	4438      	add	r0, r7
  40e148:	4c2c      	ldr	r4, [pc, #176]	; (40e1fc <lv_draw_label+0x2e0>)
  40e14a:	47a0      	blx	r4
  40e14c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e14e:	8893      	ldrh	r3, [r2, #4]
  40e150:	8812      	ldrh	r2, [r2, #0]
  40e152:	1a9b      	subs	r3, r3, r2
  40e154:	b29b      	uxth	r3, r3
  40e156:	3301      	adds	r3, #1
  40e158:	b21b      	sxth	r3, r3
        pos.x += lv_area_get_width(coords) - line_width;
  40e15a:	1a1b      	subs	r3, r3, r0
  40e15c:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40e160:	4413      	add	r3, r2
  40e162:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e166:	e7a9      	b.n	40e0bc <lv_draw_label+0x1a0>
        lv_draw_line_dsc_init(&line_dsc);
  40e168:	a830      	add	r0, sp, #192	; 0xc0
  40e16a:	4b25      	ldr	r3, [pc, #148]	; (40e200 <lv_draw_label+0x2e4>)
  40e16c:	4798      	blx	r3
        line_dsc.color = dsc->color;
  40e16e:	8833      	ldrh	r3, [r6, #0]
  40e170:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40e174:	9b06      	ldr	r3, [sp, #24]
  40e176:	f993 300e 	ldrsb.w	r3, [r3, #14]
  40e17a:	b173      	cbz	r3, 40e19a <lv_draw_label+0x27e>
  40e17c:	b21b      	sxth	r3, r3
  40e17e:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
        line_dsc.opa = dsc->opa;
  40e182:	7b33      	ldrb	r3, [r6, #12]
  40e184:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
        line_dsc.blend_mode = dsc->blend_mode;
  40e188:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
  40e18c:	f89d 30c9 	ldrb.w	r3, [sp, #201]	; 0xc9
  40e190:	f362 0301 	bfi	r3, r2, #0, #2
  40e194:	f88d 30c9 	strb.w	r3, [sp, #201]	; 0xc9
  40e198:	e7a1      	b.n	40e0de <lv_draw_label+0x1c2>
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40e19a:	2301      	movs	r3, #1
  40e19c:	e7ef      	b.n	40e17e <lv_draw_label+0x262>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
  40e19e:	4b19      	ldr	r3, [pc, #100]	; (40e204 <lv_draw_label+0x2e8>)
  40e1a0:	681b      	ldr	r3, [r3, #0]
  40e1a2:	4459      	add	r1, fp
  40e1a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e1a6:	4798      	blx	r3
  40e1a8:	9008      	str	r0, [sp, #32]
  40e1aa:	e093      	b.n	40e2d4 <lv_draw_label+0x3b8>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
  40e1ac:	b91f      	cbnz	r7, 40e1b6 <lv_draw_label+0x29a>
                        par_start = i;
  40e1ae:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40e1b0:	9311      	str	r3, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
  40e1b2:	2701      	movs	r7, #1
                        continue;
  40e1b4:	e07c      	b.n	40e2b0 <lv_draw_label+0x394>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
  40e1b6:	2f01      	cmp	r7, #1
  40e1b8:	d004      	beq.n	40e1c4 <lv_draw_label+0x2a8>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
  40e1ba:	2f02      	cmp	r7, #2
  40e1bc:	f040 80a0 	bne.w	40e300 <lv_draw_label+0x3e4>
                        cmd_state = CMD_STATE_WAIT;
  40e1c0:	2700      	movs	r7, #0
  40e1c2:	e075      	b.n	40e2b0 <lv_draw_label+0x394>
                        cmd_state = CMD_STATE_WAIT;
  40e1c4:	2700      	movs	r7, #0
  40e1c6:	e09b      	b.n	40e300 <lv_draw_label+0x3e4>
                    if(letter == ' ') {
  40e1c8:	9b05      	ldr	r3, [sp, #20]
  40e1ca:	2b20      	cmp	r3, #32
  40e1cc:	d170      	bne.n	40e2b0 <lv_draw_label+0x394>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
  40e1ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40e1d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e1d2:	1a9b      	subs	r3, r3, r2
  40e1d4:	2b07      	cmp	r3, #7
  40e1d6:	d004      	beq.n	40e1e2 <lv_draw_label+0x2c6>
                            recolor.full = dsc->color.full;
  40e1d8:	8833      	ldrh	r3, [r6, #0]
  40e1da:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40e1de:	2702      	movs	r7, #2
                    continue;
  40e1e0:	e066      	b.n	40e2b0 <lv_draw_label+0x394>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
  40e1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e1e4:	1899      	adds	r1, r3, r2
    uint8_t * d8 = (uint8_t *)dst;
  40e1e6:	aa18      	add	r2, sp, #96	; 0x60
  40e1e8:	2306      	movs	r3, #6
  40e1ea:	e012      	b.n	40e212 <lv_draw_label+0x2f6>
  40e1ec:	004155b3 	.word	0x004155b3
  40e1f0:	00417e85 	.word	0x00417e85
  40e1f4:	00417cf9 	.word	0x00417cf9
  40e1f8:	0041245d 	.word	0x0041245d
  40e1fc:	00417dd9 	.word	0x00417dd9
  40e200:	0040ed25 	.word	0x0040ed25
  40e204:	204000b4 	.word	0x204000b4
        *d8 = *s8;
  40e208:	f811 0b01 	ldrb.w	r0, [r1], #1
  40e20c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40e210:	3b01      	subs	r3, #1
    while(len) {
  40e212:	2b00      	cmp	r3, #0
  40e214:	d1f8      	bne.n	40e208 <lv_draw_label+0x2ec>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
  40e216:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
  40e21a:	4db8      	ldr	r5, [pc, #736]	; (40e4fc <lv_draw_label+0x5e0>)
  40e21c:	47a8      	blx	r5
  40e21e:	ea4f 1800 	mov.w	r8, r0, lsl #4
  40e222:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
  40e226:	47a8      	blx	r5
  40e228:	4480      	add	r8, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
  40e22a:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
  40e22e:	47a8      	blx	r5
  40e230:	0104      	lsls	r4, r0, #4
  40e232:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
  40e236:	47a8      	blx	r5
  40e238:	4404      	add	r4, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  40e23a:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
  40e23e:	47a8      	blx	r5
  40e240:	0107      	lsls	r7, r0, #4
  40e242:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
  40e246:	47a8      	blx	r5
  40e248:	183b      	adds	r3, r7, r0
                            recolor = lv_color_make(r, g, b);
  40e24a:	b2e4      	uxtb	r4, r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40e24c:	0962      	lsrs	r2, r4, #5
  40e24e:	f3c8 08c4 	ubfx	r8, r8, #3, #5
  40e252:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  40e256:	f3c4 0482 	ubfx	r4, r4, #2, #3
  40e25a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40e25c:	f362 0102 	bfi	r1, r2, #0, #3
  40e260:	460a      	mov	r2, r1
  40e262:	f368 02c7 	bfi	r2, r8, #3, #5
  40e266:	f363 220c 	bfi	r2, r3, #8, #5
  40e26a:	4613      	mov	r3, r2
  40e26c:	f364 334f 	bfi	r3, r4, #13, #3
  40e270:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  40e274:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40e278:	2702      	movs	r7, #2
  40e27a:	e019      	b.n	40e2b0 <lv_draw_label+0x394>
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40e27c:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
  40e280:	e045      	b.n	40e30e <lv_draw_label+0x3f2>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
  40e282:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
  40e286:	9302      	str	r3, [sp, #8]
  40e288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e28a:	9301      	str	r3, [sp, #4]
  40e28c:	f8ad 8000 	strh.w	r8, [sp]
  40e290:	9b05      	ldr	r3, [sp, #20]
  40e292:	9a06      	ldr	r2, [sp, #24]
  40e294:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e296:	a833      	add	r0, sp, #204	; 0xcc
  40e298:	4c99      	ldr	r4, [pc, #612]	; (40e500 <lv_draw_label+0x5e4>)
  40e29a:	47a0      	blx	r4
            if(letter_w > 0) {
  40e29c:	2d00      	cmp	r5, #0
  40e29e:	dd07      	ble.n	40e2b0 <lv_draw_label+0x394>
                pos.x += letter_w + dsc->letter_space;
  40e2a0:	8a33      	ldrh	r3, [r6, #16]
  40e2a2:	441d      	add	r5, r3
  40e2a4:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40e2a8:	fa13 f585 	uxtah	r5, r3, r5
  40e2ac:	f8ad 50cc 	strh.w	r5, [sp, #204]	; 0xcc
        while(i < line_end - line_start) {
  40e2b0:	9b07      	ldr	r3, [sp, #28]
  40e2b2:	eba3 030b 	sub.w	r3, r3, fp
  40e2b6:	992f      	ldr	r1, [sp, #188]	; 0xbc
  40e2b8:	428b      	cmp	r3, r1
  40e2ba:	d95b      	bls.n	40e374 <lv_draw_label+0x458>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40e2bc:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40e2c0:	45a2      	cmp	sl, r4
  40e2c2:	bf18      	it	ne
  40e2c4:	45a1      	cmpne	r9, r4
  40e2c6:	bf14      	ite	ne
  40e2c8:	2401      	movne	r4, #1
  40e2ca:	2400      	moveq	r4, #0
  40e2cc:	f47f af67 	bne.w	40e19e <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
  40e2d0:	2300      	movs	r3, #0
  40e2d2:	9308      	str	r3, [sp, #32]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
  40e2d4:	4d8b      	ldr	r5, [pc, #556]	; (40e504 <lv_draw_label+0x5e8>)
  40e2d6:	682b      	ldr	r3, [r5, #0]
  40e2d8:	a92f      	add	r1, sp, #188	; 0xbc
  40e2da:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40e2de:	4640      	mov	r0, r8
  40e2e0:	4798      	blx	r3
  40e2e2:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  40e2e4:	682b      	ldr	r3, [r5, #0]
  40e2e6:	2100      	movs	r1, #0
  40e2e8:	982f      	ldr	r0, [sp, #188]	; 0xbc
  40e2ea:	4440      	add	r0, r8
  40e2ec:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
  40e2ee:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e2f2:	f013 0f01 	tst.w	r3, #1
  40e2f6:	d006      	beq.n	40e306 <lv_draw_label+0x3ea>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  40e2f8:	9b05      	ldr	r3, [sp, #20]
  40e2fa:	2b23      	cmp	r3, #35	; 0x23
  40e2fc:	f43f af56 	beq.w	40e1ac <lv_draw_label+0x290>
                if(cmd_state == CMD_STATE_PAR) {
  40e300:	2f01      	cmp	r7, #1
  40e302:	f43f af61 	beq.w	40e1c8 <lv_draw_label+0x2ac>
            lv_color_t color = dsc->color;
  40e306:	f8b6 8000 	ldrh.w	r8, [r6]
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40e30a:	2f02      	cmp	r7, #2
  40e30c:	d0b6      	beq.n	40e27c <lv_draw_label+0x360>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  40e30e:	4602      	mov	r2, r0
  40e310:	9905      	ldr	r1, [sp, #20]
  40e312:	9806      	ldr	r0, [sp, #24]
  40e314:	4b7c      	ldr	r3, [pc, #496]	; (40e508 <lv_draw_label+0x5ec>)
  40e316:	4798      	blx	r3
  40e318:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40e31a:	2c00      	cmp	r4, #0
  40e31c:	d0b1      	beq.n	40e282 <lv_draw_label+0x366>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
  40e31e:	9a08      	ldr	r2, [sp, #32]
  40e320:	4613      	mov	r3, r2
  40e322:	4592      	cmp	sl, r2
  40e324:	bf8c      	ite	hi
  40e326:	2300      	movhi	r3, #0
  40e328:	2301      	movls	r3, #1
  40e32a:	4591      	cmp	r9, r2
  40e32c:	bf98      	it	ls
  40e32e:	2300      	movls	r3, #0
  40e330:	2b00      	cmp	r3, #0
  40e332:	d0a6      	beq.n	40e282 <lv_draw_label+0x366>
                    sel_coords.x1 = pos.x;
  40e334:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40e338:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y1 = pos.y;
  40e33c:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
  40e340:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
  40e344:	fa10 f383 	uxtah	r3, r0, r3
  40e348:	8a31      	ldrh	r1, [r6, #16]
  40e34a:	fa11 f383 	uxtah	r3, r1, r3
  40e34e:	b29b      	uxth	r3, r3
  40e350:	3b01      	subs	r3, #1
  40e352:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
  40e356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e358:	fa13 f282 	uxtah	r2, r3, r2
  40e35c:	b292      	uxth	r2, r2
  40e35e:	3a01      	subs	r2, #1
  40e360:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
  40e364:	aa1a      	add	r2, sp, #104	; 0x68
  40e366:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e368:	a818      	add	r0, sp, #96	; 0x60
  40e36a:	4b68      	ldr	r3, [pc, #416]	; (40e50c <lv_draw_label+0x5f0>)
  40e36c:	4798      	blx	r3
                    color = dsc->sel_color;
  40e36e:	f8b6 8002 	ldrh.w	r8, [r6, #2]
  40e372:	e786      	b.n	40e282 <lv_draw_label+0x366>
  40e374:	46c8      	mov	r8, r9
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
  40e376:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40e37a:	f013 0f02 	tst.w	r3, #2
  40e37e:	d143      	bne.n	40e408 <lv_draw_label+0x4ec>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
  40e380:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40e384:	f013 0f01 	tst.w	r3, #1
  40e388:	d166      	bne.n	40e458 <lv_draw_label+0x53c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e38a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e38c:	9f07      	ldr	r7, [sp, #28]
  40e38e:	19d5      	adds	r5, r2, r7
  40e390:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40e394:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e398:	9300      	str	r3, [sp, #0]
  40e39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40e39c:	9906      	ldr	r1, [sp, #24]
  40e39e:	4628      	mov	r0, r5
  40e3a0:	4c5b      	ldr	r4, [pc, #364]	; (40e510 <lv_draw_label+0x5f4>)
  40e3a2:	47a0      	blx	r4
  40e3a4:	183c      	adds	r4, r7, r0
        pos.x = coords->x1;
  40e3a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e3a8:	f9b3 3000 	ldrsh.w	r3, [r3]
  40e3ac:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40e3b0:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40e3b4:	f012 0f04 	tst.w	r2, #4
  40e3b8:	d170      	bne.n	40e49c <lv_draw_label+0x580>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40e3ba:	f012 0f08 	tst.w	r2, #8
  40e3be:	f040 8087 	bne.w	40e4d0 <lv_draw_label+0x5b4>
        pos.y += line_height;
  40e3c2:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e3c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e3c8:	4413      	add	r3, r2
  40e3ca:	b21b      	sxth	r3, r3
  40e3cc:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(pos.y > mask->y2) return;
  40e3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e3d2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        line_start = line_end;
  40e3d6:	f8dd b01c 	ldr.w	fp, [sp, #28]
        if(pos.y > mask->y2) return;
  40e3da:	4293      	cmp	r3, r2
  40e3dc:	f73f ada9 	bgt.w	40df32 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e3e0:	9407      	str	r4, [sp, #28]
    while(txt[line_start] != '\0') {
  40e3e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e3e4:	4613      	mov	r3, r2
  40e3e6:	445b      	add	r3, fp
  40e3e8:	930a      	str	r3, [sp, #40]	; 0x28
  40e3ea:	f812 300b 	ldrb.w	r3, [r2, fp]
  40e3ee:	2b00      	cmp	r3, #0
  40e3f0:	f43f ad9f 	beq.w	40df32 <lv_draw_label+0x16>
        pos.x += x_ofs;
  40e3f4:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40e3f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40e3fa:	4413      	add	r3, r2
  40e3fc:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        i         = 0;
  40e400:	2700      	movs	r7, #0
  40e402:	972f      	str	r7, [sp, #188]	; 0xbc
  40e404:	46c1      	mov	r9, r8
        while(i < line_end - line_start) {
  40e406:	e753      	b.n	40e2b0 <lv_draw_label+0x394>
            p1.x = pos_x_start;
  40e408:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40e40c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40e410:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e414:	68b2      	ldr	r2, [r6, #8]
  40e416:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  40e41a:	2a00      	cmp	r2, #0
  40e41c:	db18      	blt.n	40e450 <lv_draw_label+0x534>
  40e41e:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40e422:	b29b      	uxth	r3, r3
  40e424:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
  40e428:	2a00      	cmp	r2, #0
  40e42a:	db13      	blt.n	40e454 <lv_draw_label+0x538>
  40e42c:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40e430:	b21b      	sxth	r3, r3
  40e432:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40e436:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40e43a:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40e43e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40e442:	ab30      	add	r3, sp, #192	; 0xc0
  40e444:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e446:	a918      	add	r1, sp, #96	; 0x60
  40e448:	a817      	add	r0, sp, #92	; 0x5c
  40e44a:	4c32      	ldr	r4, [pc, #200]	; (40e514 <lv_draw_label+0x5f8>)
  40e44c:	47a0      	blx	r4
  40e44e:	e797      	b.n	40e380 <lv_draw_label+0x464>
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40e450:	3201      	adds	r2, #1
  40e452:	e7e4      	b.n	40e41e <lv_draw_label+0x502>
  40e454:	3201      	adds	r2, #1
  40e456:	e7e9      	b.n	40e42c <lv_draw_label+0x510>
            p1.x = pos_x_start;
  40e458:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40e45c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
  40e460:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e464:	68b2      	ldr	r2, [r6, #8]
  40e466:	8911      	ldrh	r1, [r2, #8]
  40e468:	440b      	add	r3, r1
  40e46a:	b29b      	uxth	r3, r3
  40e46c:	8952      	ldrh	r2, [r2, #10]
  40e46e:	1a9b      	subs	r3, r3, r2
  40e470:	b29b      	uxth	r3, r3
  40e472:	9a06      	ldr	r2, [sp, #24]
  40e474:	f992 200d 	ldrsb.w	r2, [r2, #13]
  40e478:	b292      	uxth	r2, r2
  40e47a:	1a9b      	subs	r3, r3, r2
  40e47c:	b21b      	sxth	r3, r3
  40e47e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40e482:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40e486:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40e48a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40e48e:	ab30      	add	r3, sp, #192	; 0xc0
  40e490:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e492:	a918      	add	r1, sp, #96	; 0x60
  40e494:	a817      	add	r0, sp, #92	; 0x5c
  40e496:	4c1f      	ldr	r4, [pc, #124]	; (40e514 <lv_draw_label+0x5f8>)
  40e498:	47a0      	blx	r4
  40e49a:	e776      	b.n	40e38a <lv_draw_label+0x46e>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e49c:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e4a0:	9200      	str	r2, [sp, #0]
  40e4a2:	9a06      	ldr	r2, [sp, #24]
  40e4a4:	4601      	mov	r1, r0
  40e4a6:	4628      	mov	r0, r5
  40e4a8:	4d1b      	ldr	r5, [pc, #108]	; (40e518 <lv_draw_label+0x5fc>)
  40e4aa:	47a8      	blx	r5
  40e4ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e4ae:	8893      	ldrh	r3, [r2, #4]
  40e4b0:	8812      	ldrh	r2, [r2, #0]
  40e4b2:	1a9b      	subs	r3, r3, r2
  40e4b4:	b29b      	uxth	r3, r3
  40e4b6:	3301      	adds	r3, #1
  40e4b8:	b21b      	sxth	r3, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40e4ba:	1a18      	subs	r0, r3, r0
  40e4bc:	d406      	bmi.n	40e4cc <lv_draw_label+0x5b0>
  40e4be:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40e4c2:	eb03 0360 	add.w	r3, r3, r0, asr #1
  40e4c6:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e4ca:	e77a      	b.n	40e3c2 <lv_draw_label+0x4a6>
  40e4cc:	3001      	adds	r0, #1
  40e4ce:	e7f6      	b.n	40e4be <lv_draw_label+0x5a2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e4d0:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e4d4:	9200      	str	r2, [sp, #0]
  40e4d6:	9a06      	ldr	r2, [sp, #24]
  40e4d8:	4601      	mov	r1, r0
  40e4da:	4628      	mov	r0, r5
  40e4dc:	4d0e      	ldr	r5, [pc, #56]	; (40e518 <lv_draw_label+0x5fc>)
  40e4de:	47a8      	blx	r5
  40e4e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e4e2:	8893      	ldrh	r3, [r2, #4]
  40e4e4:	8812      	ldrh	r2, [r2, #0]
  40e4e6:	1a9b      	subs	r3, r3, r2
  40e4e8:	b29b      	uxth	r3, r3
  40e4ea:	3301      	adds	r3, #1
  40e4ec:	b21b      	sxth	r3, r3
            pos.x += lv_area_get_width(coords) - line_width;
  40e4ee:	1a1b      	subs	r3, r3, r0
  40e4f0:	f8bd 00cc 	ldrh.w	r0, [sp, #204]	; 0xcc
  40e4f4:	4403      	add	r3, r0
  40e4f6:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e4fa:	e762      	b.n	40e3c2 <lv_draw_label+0x4a6>
  40e4fc:	0040d651 	.word	0x0040d651
  40e500:	0040dde9 	.word	0x0040dde9
  40e504:	204000b8 	.word	0x204000b8
  40e508:	00413b3d 	.word	0x00413b3d
  40e50c:	004124a9 	.word	0x004124a9
  40e510:	00417cf9 	.word	0x00417cf9
  40e514:	0040ed41 	.word	0x0040ed41
  40e518:	00417dd9 	.word	0x00417dd9

0040e51c <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e520:	b08b      	sub	sp, #44	; 0x2c
  40e522:	4681      	mov	r9, r0
  40e524:	468a      	mov	sl, r1
  40e526:	9204      	str	r2, [sp, #16]
  40e528:	461c      	mov	r4, r3
    lv_opa_t opa = dsc->opa;
  40e52a:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e52e:	4b76      	ldr	r3, [pc, #472]	; (40e708 <draw_line_hor+0x1ec>)
  40e530:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e532:	4b76      	ldr	r3, [pc, #472]	; (40e70c <draw_line_hor+0x1f0>)
  40e534:	4798      	blx	r3
  40e536:	4606      	mov	r6, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40e538:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
  40e53c:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
  40e53e:	ea4f 0865 	mov.w	r8, r5, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e542:	f005 0501 	and.w	r5, r5, #1
  40e546:	4445      	add	r5, r8

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e548:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e54c:	b123      	cbz	r3, 40e558 <draw_line_hor+0x3c>
  40e54e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e552:	b943      	cbnz	r3, 40e566 <draw_line_hor+0x4a>
  40e554:	2700      	movs	r7, #0
  40e556:	e000      	b.n	40e55a <draw_line_hor+0x3e>
  40e558:	2700      	movs	r7, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e55a:	4b6d      	ldr	r3, [pc, #436]	; (40e710 <draw_line_hor+0x1f4>)
  40e55c:	4798      	blx	r3
  40e55e:	b920      	cbnz	r0, 40e56a <draw_line_hor+0x4e>
    else if(dashed) simple_mode = false;
  40e560:	bb7f      	cbnz	r7, 40e5c2 <draw_line_hor+0xa6>
    bool simple_mode = true;
  40e562:	2201      	movs	r2, #1
  40e564:	e002      	b.n	40e56c <draw_line_hor+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e566:	2701      	movs	r7, #1
  40e568:	e7f7      	b.n	40e55a <draw_line_hor+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e56a:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
  40e56c:	f9ba 3000 	ldrsh.w	r3, [sl]
  40e570:	f9b9 1000 	ldrsh.w	r1, [r9]
  40e574:	4618      	mov	r0, r3
  40e576:	428b      	cmp	r3, r1
  40e578:	bfa8      	it	ge
  40e57a:	4608      	movge	r0, r1
  40e57c:	f8ad 0020 	strh.w	r0, [sp, #32]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
  40e580:	428b      	cmp	r3, r1
  40e582:	bfb8      	it	lt
  40e584:	460b      	movlt	r3, r1
  40e586:	b29b      	uxth	r3, r3
  40e588:	3b01      	subs	r3, #1
  40e58a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y1 = point1->y - w_half1;
  40e58e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
  40e592:	1b5d      	subs	r5, r3, r5
  40e594:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
    draw_area.y2 = point1->y + w_half0;
  40e598:	4498      	add	r8, r3
  40e59a:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40e59e:	b192      	cbz	r2, 40e5c6 <draw_line_hor+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40e5a0:	7a63      	ldrb	r3, [r4, #9]
  40e5a2:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40e5a6:	8822      	ldrh	r2, [r4, #0]
  40e5a8:	9302      	str	r3, [sp, #8]
  40e5aa:	f8cd b004 	str.w	fp, [sp, #4]
  40e5ae:	2301      	movs	r3, #1
  40e5b0:	9300      	str	r3, [sp, #0]
  40e5b2:	2300      	movs	r3, #0
  40e5b4:	a908      	add	r1, sp, #32
  40e5b6:	9804      	ldr	r0, [sp, #16]
  40e5b8:	4c56      	ldr	r4, [pc, #344]	; (40e714 <draw_line_hor+0x1f8>)
  40e5ba:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40e5bc:	b00b      	add	sp, #44	; 0x2c
  40e5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40e5c2:	2200      	movs	r2, #0
  40e5c4:	e7d2      	b.n	40e56c <draw_line_hor+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e5c6:	aa08      	add	r2, sp, #32
  40e5c8:	9904      	ldr	r1, [sp, #16]
  40e5ca:	4610      	mov	r0, r2
  40e5cc:	4b52      	ldr	r3, [pc, #328]	; (40e718 <draw_line_hor+0x1fc>)
  40e5ce:	4798      	blx	r3
        if(!is_common) return;
  40e5d0:	2800      	cmp	r0, #0
  40e5d2:	d0f3      	beq.n	40e5bc <draw_line_hor+0xa0>
        draw_area.x1 -= disp_area->x1;
  40e5d4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
  40e5d8:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
  40e5dc:	b28b      	uxth	r3, r1
  40e5de:	ebae 0503 	sub.w	r5, lr, r3
  40e5e2:	b2ad      	uxth	r5, r5
  40e5e4:	fa0f fc85 	sxth.w	ip, r5
  40e5e8:	f8ad c020 	strh.w	ip, [sp, #32]
        draw_area.y1 -= disp_area->y1;
  40e5ec:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40e5f0:	f8b6 8012 	ldrh.w	r8, [r6, #18]
  40e5f4:	eba2 0008 	sub.w	r0, r2, r8
  40e5f8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        draw_area.x2 -= disp_area->x1;
  40e5fc:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
  40e600:	1ac3      	subs	r3, r0, r3
  40e602:	b29b      	uxth	r3, r3
  40e604:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= disp_area->y1;
  40e608:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
  40e60c:	eba9 0808 	sub.w	r8, r9, r8
  40e610:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
  40e614:	1b5d      	subs	r5, r3, r5
  40e616:	b2ad      	uxth	r5, r5
  40e618:	3501      	adds	r5, #1
  40e61a:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e61c:	f8ad e018 	strh.w	lr, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e620:	f8ad 001c 	strh.w	r0, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e624:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40e628:	f8ad 201e 	strh.w	r2, [sp, #30]
        if(dashed) {
  40e62c:	b1a7      	cbz	r7, 40e658 <draw_line_hor+0x13c>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
  40e62e:	4461      	add	r1, ip
  40e630:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e634:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  40e638:	4413      	add	r3, r2
  40e63a:	fb91 fcf3 	sdiv	ip, r1, r3
  40e63e:	fb03 111c 	mls	r1, r3, ip, r1
  40e642:	b20b      	sxth	r3, r1
  40e644:	9305      	str	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e646:	46ab      	mov	fp, r5
  40e648:	4628      	mov	r0, r5
  40e64a:	4b34      	ldr	r3, [pc, #208]	; (40e71c <draw_line_hor+0x200>)
  40e64c:	4798      	blx	r3
  40e64e:	4681      	mov	r9, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e650:	f9bd 8022 	ldrsh.w	r8, [sp, #34]	; 0x22
  40e654:	46ba      	mov	sl, r7
  40e656:	e037      	b.n	40e6c8 <draw_line_hor+0x1ac>
        lv_style_int_t dash_start = 0;
  40e658:	2300      	movs	r3, #0
  40e65a:	9305      	str	r3, [sp, #20]
  40e65c:	e7f3      	b.n	40e646 <draw_line_hor+0x12a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e65e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  40e662:	440b      	add	r3, r1
  40e664:	429a      	cmp	r2, r3
  40e666:	da13      	bge.n	40e690 <draw_line_hor+0x174>
                            mask_buf[i] = 0x00;
  40e668:	2300      	movs	r3, #0
  40e66a:	f809 3000 	strb.w	r3, [r9, r0]
  40e66e:	4613      	mov	r3, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  40e670:	3001      	adds	r0, #1
  40e672:	b200      	sxth	r0, r0
  40e674:	3301      	adds	r3, #1
  40e676:	b21a      	sxth	r2, r3
  40e678:	42a8      	cmp	r0, r5
  40e67a:	da0b      	bge.n	40e694 <draw_line_hor+0x178>
                        if(dash_cnt <= dsc->dash_width) {
  40e67c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e680:	429a      	cmp	r2, r3
  40e682:	dcec      	bgt.n	40e65e <draw_line_hor+0x142>
                            int16_t diff = dsc->dash_width - dash_cnt;
  40e684:	b299      	uxth	r1, r3
  40e686:	1a8a      	subs	r2, r1, r2
                            i += diff;
  40e688:	fa10 f082 	uxtah	r0, r0, r2
  40e68c:	b200      	sxth	r0, r0
  40e68e:	e7ef      	b.n	40e670 <draw_line_hor+0x154>
                            dash_cnt = 0;
  40e690:	2300      	movs	r3, #0
  40e692:	e7ed      	b.n	40e670 <draw_line_hor+0x154>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40e694:	2002      	movs	r0, #2
                           dsc->blend_mode);
  40e696:	7a63      	ldrb	r3, [r4, #9]
  40e698:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(clip, &fill_area,
  40e69c:	9302      	str	r3, [sp, #8]
  40e69e:	7a23      	ldrb	r3, [r4, #8]
  40e6a0:	9301      	str	r3, [sp, #4]
  40e6a2:	9000      	str	r0, [sp, #0]
  40e6a4:	464b      	mov	r3, r9
  40e6a6:	8822      	ldrh	r2, [r4, #0]
  40e6a8:	a906      	add	r1, sp, #24
  40e6aa:	9804      	ldr	r0, [sp, #16]
  40e6ac:	4f19      	ldr	r7, [pc, #100]	; (40e714 <draw_line_hor+0x1f8>)
  40e6ae:	47b8      	blx	r7
            fill_area.y1++;
  40e6b0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40e6b4:	3301      	adds	r3, #1
  40e6b6:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40e6ba:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40e6be:	3301      	adds	r3, #1
  40e6c0:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e6c4:	f108 0801 	add.w	r8, r8, #1
  40e6c8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40e6cc:	4598      	cmp	r8, r3
  40e6ce:	dc17      	bgt.n	40e700 <draw_line_hor+0x1e4>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e6d0:	4659      	mov	r1, fp
  40e6d2:	4648      	mov	r0, r9
  40e6d4:	4b12      	ldr	r3, [pc, #72]	; (40e720 <draw_line_hor+0x204>)
  40e6d6:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e6d8:	8a31      	ldrh	r1, [r6, #16]
  40e6da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40e6de:	4419      	add	r1, r3
  40e6e0:	8a72      	ldrh	r2, [r6, #18]
  40e6e2:	4442      	add	r2, r8
  40e6e4:	462b      	mov	r3, r5
  40e6e6:	b212      	sxth	r2, r2
  40e6e8:	b209      	sxth	r1, r1
  40e6ea:	4648      	mov	r0, r9
  40e6ec:	4f0d      	ldr	r7, [pc, #52]	; (40e724 <draw_line_hor+0x208>)
  40e6ee:	47b8      	blx	r7
            if(dashed) {
  40e6f0:	f1ba 0f00 	cmp.w	sl, #0
  40e6f4:	d0cf      	beq.n	40e696 <draw_line_hor+0x17a>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e6f6:	2800      	cmp	r0, #0
  40e6f8:	d0cd      	beq.n	40e696 <draw_line_hor+0x17a>
  40e6fa:	9a05      	ldr	r2, [sp, #20]
  40e6fc:	2000      	movs	r0, #0
  40e6fe:	e7bb      	b.n	40e678 <draw_line_hor+0x15c>
        _lv_mem_buf_release(mask_buf);
  40e700:	4648      	mov	r0, r9
  40e702:	4b09      	ldr	r3, [pc, #36]	; (40e728 <draw_line_hor+0x20c>)
  40e704:	4798      	blx	r3
  40e706:	e759      	b.n	40e5bc <draw_line_hor+0xa0>
  40e708:	004097a1 	.word	0x004097a1
  40e70c:	00414df5 	.word	0x00414df5
  40e710:	0040fcad 	.word	0x0040fcad
  40e714:	0040c871 	.word	0x0040c871
  40e718:	004155b3 	.word	0x004155b3
  40e71c:	00416965 	.word	0x00416965
  40e720:	00416b49 	.word	0x00416b49
  40e724:	0040fbe5 	.word	0x0040fbe5
  40e728:	00416715 	.word	0x00416715

0040e72c <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40e72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e730:	b08b      	sub	sp, #44	; 0x2c
  40e732:	4680      	mov	r8, r0
  40e734:	468a      	mov	sl, r1
  40e736:	9204      	str	r2, [sp, #16]
  40e738:	461d      	mov	r5, r3
    lv_opa_t opa = dsc->opa;
  40e73a:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e73e:	4b71      	ldr	r3, [pc, #452]	; (40e904 <draw_line_ver+0x1d8>)
  40e740:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e742:	4b71      	ldr	r3, [pc, #452]	; (40e908 <draw_line_ver+0x1dc>)
  40e744:	4798      	blx	r3
  40e746:	4607      	mov	r7, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40e748:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  40e74c:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
  40e74e:	ea4f 0964 	mov.w	r9, r4, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e752:	f004 0401 	and.w	r4, r4, #1
  40e756:	444c      	add	r4, r9

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e758:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e75c:	b123      	cbz	r3, 40e768 <draw_line_ver+0x3c>
  40e75e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40e762:	b943      	cbnz	r3, 40e776 <draw_line_ver+0x4a>
  40e764:	2600      	movs	r6, #0
  40e766:	e000      	b.n	40e76a <draw_line_ver+0x3e>
  40e768:	2600      	movs	r6, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e76a:	4b68      	ldr	r3, [pc, #416]	; (40e90c <draw_line_ver+0x1e0>)
  40e76c:	4798      	blx	r3
  40e76e:	b920      	cbnz	r0, 40e77a <draw_line_ver+0x4e>
    else if(dashed) simple_mode = false;
  40e770:	bb7e      	cbnz	r6, 40e7d2 <draw_line_ver+0xa6>
    bool simple_mode = true;
  40e772:	2201      	movs	r2, #1
  40e774:	e002      	b.n	40e77c <draw_line_ver+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e776:	2601      	movs	r6, #1
  40e778:	e7f7      	b.n	40e76a <draw_line_ver+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e77a:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
  40e77c:	f8b8 3000 	ldrh.w	r3, [r8]
  40e780:	1b1c      	subs	r4, r3, r4
  40e782:	f8ad 4020 	strh.w	r4, [sp, #32]
    draw_area.x2 = point1->x + w_half0;
  40e786:	4499      	add	r9, r3
  40e788:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
  40e78c:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  40e790:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
  40e794:	4618      	mov	r0, r3
  40e796:	428b      	cmp	r3, r1
  40e798:	bfa8      	it	ge
  40e79a:	4608      	movge	r0, r1
  40e79c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
  40e7a0:	428b      	cmp	r3, r1
  40e7a2:	bfb8      	it	lt
  40e7a4:	460b      	movlt	r3, r1
  40e7a6:	b29b      	uxth	r3, r3
  40e7a8:	3b01      	subs	r3, #1
  40e7aa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40e7ae:	b192      	cbz	r2, 40e7d6 <draw_line_ver+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40e7b0:	7a6b      	ldrb	r3, [r5, #9]
  40e7b2:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40e7b6:	882a      	ldrh	r2, [r5, #0]
  40e7b8:	9302      	str	r3, [sp, #8]
  40e7ba:	f8cd b004 	str.w	fp, [sp, #4]
  40e7be:	2301      	movs	r3, #1
  40e7c0:	9300      	str	r3, [sp, #0]
  40e7c2:	2300      	movs	r3, #0
  40e7c4:	a908      	add	r1, sp, #32
  40e7c6:	9804      	ldr	r0, [sp, #16]
  40e7c8:	4c51      	ldr	r4, [pc, #324]	; (40e910 <draw_line_ver+0x1e4>)
  40e7ca:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40e7cc:	b00b      	add	sp, #44	; 0x2c
  40e7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40e7d2:	2200      	movs	r2, #0
  40e7d4:	e7d2      	b.n	40e77c <draw_line_ver+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e7d6:	aa08      	add	r2, sp, #32
  40e7d8:	9904      	ldr	r1, [sp, #16]
  40e7da:	4610      	mov	r0, r2
  40e7dc:	4b4d      	ldr	r3, [pc, #308]	; (40e914 <draw_line_ver+0x1e8>)
  40e7de:	4798      	blx	r3
        if(!is_common) return;
  40e7e0:	2800      	cmp	r0, #0
  40e7e2:	d0f3      	beq.n	40e7cc <draw_line_ver+0xa0>
        draw_area.x1 -= vdb->area.x1;
  40e7e4:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
  40e7e8:	8a3b      	ldrh	r3, [r7, #16]
  40e7ea:	eba0 0b03 	sub.w	fp, r0, r3
  40e7ee:	fa1f fb8b 	uxth.w	fp, fp
  40e7f2:	f8ad b020 	strh.w	fp, [sp, #32]
        draw_area.y1 -= vdb->area.y1;
  40e7f6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40e7fa:	f8b7 e012 	ldrh.w	lr, [r7, #18]
  40e7fe:	eba2 010e 	sub.w	r1, r2, lr
  40e802:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        draw_area.x2 -= vdb->area.x1;
  40e806:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40e80a:	1acb      	subs	r3, r1, r3
  40e80c:	b29b      	uxth	r3, r3
  40e80e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= vdb->area.y1;
  40e812:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
  40e816:	eba4 040e 	sub.w	r4, r4, lr
  40e81a:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  40e81e:	eba3 0b0b 	sub.w	fp, r3, fp
  40e822:	fa1f fb8b 	uxth.w	fp, fp
  40e826:	f10b 0b01 	add.w	fp, fp, #1
  40e82a:	fa0f fb8b 	sxth.w	fp, fp
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e82e:	f8ad 0018 	strh.w	r0, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e832:	f8ad 101c 	strh.w	r1, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e836:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40e83a:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e83e:	f8cd b014 	str.w	fp, [sp, #20]
  40e842:	4658      	mov	r0, fp
  40e844:	4b34      	ldr	r3, [pc, #208]	; (40e918 <draw_line_ver+0x1ec>)
  40e846:	4798      	blx	r3
  40e848:	4680      	mov	r8, r0
        if(dashed) {
  40e84a:	b19e      	cbz	r6, 40e874 <draw_line_ver+0x148>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
  40e84c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
  40e850:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
  40e854:	441a      	add	r2, r3
  40e856:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e85a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
  40e85e:	444b      	add	r3, r9
  40e860:	fb92 f9f3 	sdiv	r9, r2, r3
  40e864:	fb03 2919 	mls	r9, r3, r9, r2
  40e868:	fa0f f989 	sxth.w	r9, r9
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e86c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40e870:	46b2      	mov	sl, r6
  40e872:	e01c      	b.n	40e8ae <draw_line_ver+0x182>
        lv_style_int_t dash_start = 0;
  40e874:	f04f 0900 	mov.w	r9, #0
  40e878:	e7f8      	b.n	40e86c <draw_line_ver+0x140>
                dash_cnt ++;
  40e87a:	f109 0901 	add.w	r9, r9, #1
  40e87e:	fa0f f989 	sxth.w	r9, r9
            _lv_blend_fill(clip, &fill_area,
  40e882:	2300      	movs	r3, #0
  40e884:	9302      	str	r3, [sp, #8]
  40e886:	7a2b      	ldrb	r3, [r5, #8]
  40e888:	9301      	str	r3, [sp, #4]
  40e88a:	9000      	str	r0, [sp, #0]
  40e88c:	4643      	mov	r3, r8
  40e88e:	882a      	ldrh	r2, [r5, #0]
  40e890:	a906      	add	r1, sp, #24
  40e892:	9804      	ldr	r0, [sp, #16]
  40e894:	4e1e      	ldr	r6, [pc, #120]	; (40e910 <draw_line_ver+0x1e4>)
  40e896:	47b0      	blx	r6
            fill_area.y1++;
  40e898:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40e89c:	3301      	adds	r3, #1
  40e89e:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40e8a2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40e8a6:	3301      	adds	r3, #1
  40e8a8:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e8ac:	3401      	adds	r4, #1
  40e8ae:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40e8b2:	429c      	cmp	r4, r3
  40e8b4:	dc21      	bgt.n	40e8fa <draw_line_ver+0x1ce>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e8b6:	9905      	ldr	r1, [sp, #20]
  40e8b8:	4640      	mov	r0, r8
  40e8ba:	4b18      	ldr	r3, [pc, #96]	; (40e91c <draw_line_ver+0x1f0>)
  40e8bc:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e8be:	8a39      	ldrh	r1, [r7, #16]
  40e8c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40e8c4:	4419      	add	r1, r3
  40e8c6:	8a7a      	ldrh	r2, [r7, #18]
  40e8c8:	4422      	add	r2, r4
  40e8ca:	465b      	mov	r3, fp
  40e8cc:	b212      	sxth	r2, r2
  40e8ce:	b209      	sxth	r1, r1
  40e8d0:	4640      	mov	r0, r8
  40e8d2:	4e13      	ldr	r6, [pc, #76]	; (40e920 <draw_line_ver+0x1f4>)
  40e8d4:	47b0      	blx	r6
            if(dashed) {
  40e8d6:	f1ba 0f00 	cmp.w	sl, #0
  40e8da:	d0d2      	beq.n	40e882 <draw_line_ver+0x156>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e8dc:	2800      	cmp	r0, #0
  40e8de:	d0cc      	beq.n	40e87a <draw_line_ver+0x14e>
                    if(dash_cnt > dsc->dash_width) {
  40e8e0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  40e8e4:	4591      	cmp	r9, r2
  40e8e6:	dd00      	ble.n	40e8ea <draw_line_ver+0x1be>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
  40e8e8:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e8ea:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e8ee:	4413      	add	r3, r2
  40e8f0:	4599      	cmp	r9, r3
  40e8f2:	dbc2      	blt.n	40e87a <draw_line_ver+0x14e>
                        dash_cnt = 0;
  40e8f4:	f04f 0900 	mov.w	r9, #0
  40e8f8:	e7bf      	b.n	40e87a <draw_line_ver+0x14e>
        _lv_mem_buf_release(mask_buf);
  40e8fa:	4640      	mov	r0, r8
  40e8fc:	4b09      	ldr	r3, [pc, #36]	; (40e924 <draw_line_ver+0x1f8>)
  40e8fe:	4798      	blx	r3
  40e900:	e764      	b.n	40e7cc <draw_line_ver+0xa0>
  40e902:	bf00      	nop
  40e904:	004097a1 	.word	0x004097a1
  40e908:	00414df5 	.word	0x00414df5
  40e90c:	0040fcad 	.word	0x0040fcad
  40e910:	0040c871 	.word	0x0040c871
  40e914:	004155b3 	.word	0x004155b3
  40e918:	00416965 	.word	0x00416965
  40e91c:	00416b49 	.word	0x00416b49
  40e920:	0040fbe5 	.word	0x0040fbe5
  40e924:	00416715 	.word	0x00416715

0040e928 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
  40e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e92c:	b0bf      	sub	sp, #252	; 0xfc
  40e92e:	9206      	str	r2, [sp, #24]
  40e930:	9305      	str	r3, [sp, #20]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
  40e932:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40e936:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40e93a:	4293      	cmp	r3, r2
  40e93c:	f280 80e7 	bge.w	40eb0e <draw_line_skew+0x1e6>
        p1.y = point1->y;
  40e940:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
        p2.y = point2->y;
  40e944:	f8ad 20f2 	strh.w	r2, [sp, #242]	; 0xf2
        p1.x = point1->x;
  40e948:	f9b0 3000 	ldrsh.w	r3, [r0]
  40e94c:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point2->x;
  40e950:	f9b1 3000 	ldrsh.w	r3, [r1]
  40e954:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
  40e958:	f9bd 80f0 	ldrsh.w	r8, [sp, #240]	; 0xf0
  40e95c:	f9bd 70f4 	ldrsh.w	r7, [sp, #244]	; 0xf4
  40e960:	eba8 0907 	sub.w	r9, r8, r7
    int32_t ydiff = p2.y - p1.y;
  40e964:	f9bd 50f2 	ldrsh.w	r5, [sp, #242]	; 0xf2
  40e968:	f9bd 60f6 	ldrsh.w	r6, [sp, #246]	; 0xf6
  40e96c:	1bab      	subs	r3, r5, r6
  40e96e:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
  40e970:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
  40e974:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
  40e978:	2b00      	cmp	r3, #0
  40e97a:	bfb8      	it	lt
  40e97c:	425b      	neglt	r3, r3
  40e97e:	469a      	mov	sl, r3
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
  40e980:	9b05      	ldr	r3, [sp, #20]
  40e982:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
  40e986:	45d3      	cmp	fp, sl
  40e988:	f340 80ce 	ble.w	40eb28 <draw_line_skew+0x200>
  40e98c:	ea4f 134a 	mov.w	r3, sl, lsl #5
  40e990:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
  40e994:	49a1      	ldr	r1, [pc, #644]	; (40ec1c <draw_line_skew+0x2f4>)
  40e996:	5ccc      	ldrb	r4, [r1, r3]
  40e998:	fb04 f402 	mul.w	r4, r4, r2
  40e99c:	343f      	adds	r4, #63	; 0x3f
  40e99e:	11e3      	asrs	r3, r4, #7
    int32_t w_half0 = w >> 1;
  40e9a0:	1224      	asrs	r4, r4, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e9a2:	f003 0201 	and.w	r2, r3, #1
  40e9a6:	18a2      	adds	r2, r4, r2
  40e9a8:	9204      	str	r2, [sp, #16]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
  40e9aa:	4642      	mov	r2, r8
  40e9ac:	45b8      	cmp	r8, r7
  40e9ae:	bfa8      	it	ge
  40e9b0:	463a      	movge	r2, r7
  40e9b2:	b292      	uxth	r2, r2
  40e9b4:	b29b      	uxth	r3, r3
  40e9b6:	1ad2      	subs	r2, r2, r3
  40e9b8:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
  40e9bc:	4642      	mov	r2, r8
  40e9be:	45b8      	cmp	r8, r7
  40e9c0:	bfb8      	it	lt
  40e9c2:	463a      	movlt	r2, r7
  40e9c4:	fa13 f282 	uxtah	r2, r3, r2
  40e9c8:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
  40e9cc:	462a      	mov	r2, r5
  40e9ce:	42b5      	cmp	r5, r6
  40e9d0:	bfa8      	it	ge
  40e9d2:	4632      	movge	r2, r6
  40e9d4:	b292      	uxth	r2, r2
  40e9d6:	1ad2      	subs	r2, r2, r3
  40e9d8:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
  40e9dc:	462a      	mov	r2, r5
  40e9de:	42b5      	cmp	r5, r6
  40e9e0:	bfb8      	it	lt
  40e9e2:	4632      	movlt	r2, r6
  40e9e4:	fa13 f382 	uxtah	r3, r3, r2
  40e9e8:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
  40e9ec:	9a06      	ldr	r2, [sp, #24]
  40e9ee:	a93a      	add	r1, sp, #232	; 0xe8
  40e9f0:	4608      	mov	r0, r1
  40e9f2:	4b8b      	ldr	r3, [pc, #556]	; (40ec20 <draw_line_skew+0x2f8>)
  40e9f4:	4798      	blx	r3
    if(is_common == false) return;
  40e9f6:	2800      	cmp	r0, #0
  40e9f8:	f000 8187 	beq.w	40ed0a <draw_line_skew+0x3e2>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
  40e9fc:	45d3      	cmp	fp, sl
  40e9fe:	f340 80b6 	ble.w	40eb6e <draw_line_skew+0x246>
        if(xdiff > 0) {
  40ea02:	f1b9 0f00 	cmp.w	r9, #0
  40ea06:	f340 8094 	ble.w	40eb32 <draw_line_skew+0x20a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40ea0a:	b2b6      	uxth	r6, r6
  40ea0c:	b2a4      	uxth	r4, r4
  40ea0e:	1b32      	subs	r2, r6, r4
  40ea10:	b2ad      	uxth	r5, r5
  40ea12:	1b2c      	subs	r4, r5, r4
  40ea14:	2300      	movs	r3, #0
  40ea16:	9301      	str	r3, [sp, #4]
  40ea18:	b224      	sxth	r4, r4
  40ea1a:	9400      	str	r4, [sp, #0]
  40ea1c:	4643      	mov	r3, r8
  40ea1e:	b212      	sxth	r2, r2
  40ea20:	4639      	mov	r1, r7
  40ea22:	a82f      	add	r0, sp, #188	; 0xbc
  40ea24:	4c7f      	ldr	r4, [pc, #508]	; (40ec24 <draw_line_skew+0x2fc>)
  40ea26:	47a0      	blx	r4
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40ea28:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40ea2c:	441e      	add	r6, r3
  40ea2e:	441d      	add	r5, r3
  40ea30:	2301      	movs	r3, #1
  40ea32:	9301      	str	r3, [sp, #4]
  40ea34:	b22d      	sxth	r5, r5
  40ea36:	9500      	str	r5, [sp, #0]
  40ea38:	4643      	mov	r3, r8
  40ea3a:	b232      	sxth	r2, r6
  40ea3c:	4639      	mov	r1, r7
  40ea3e:	a824      	add	r0, sp, #144	; 0x90
  40ea40:	47a0      	blx	r4
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
  40ea42:	2100      	movs	r1, #0
  40ea44:	a82f      	add	r0, sp, #188	; 0xbc
  40ea46:	4c78      	ldr	r4, [pc, #480]	; (40ec28 <draw_line_skew+0x300>)
  40ea48:	47a0      	blx	r4
  40ea4a:	9008      	str	r0, [sp, #32]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
  40ea4c:	2100      	movs	r1, #0
  40ea4e:	a824      	add	r0, sp, #144	; 0x90
  40ea50:	47a0      	blx	r4
  40ea52:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
  40ea54:	9b05      	ldr	r3, [sp, #20]
  40ea56:	7a5b      	ldrb	r3, [r3, #9]
  40ea58:	f013 0f10 	tst.w	r3, #16
  40ea5c:	f000 80a6 	beq.w	40ebac <draw_line_skew+0x284>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
  40ea60:	f04f 33ff 	mov.w	r3, #4294967295
  40ea64:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t mask_top_id = LV_MASK_ID_INV;
  40ea66:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40ea68:	4b70      	ldr	r3, [pc, #448]	; (40ec2c <draw_line_skew+0x304>)
  40ea6a:	4798      	blx	r3
  40ea6c:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40ea6e:	4b70      	ldr	r3, [pc, #448]	; (40ec30 <draw_line_skew+0x308>)
  40ea70:	4798      	blx	r3
  40ea72:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
  40ea74:	8a00      	ldrh	r0, [r0, #16]
  40ea76:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
  40ea7a:	1a24      	subs	r4, r4, r0
  40ea7c:	b2a4      	uxth	r4, r4
  40ea7e:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40ea82:	f8ba 1012 	ldrh.w	r1, [sl, #18]
  40ea86:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40ea8a:	1a52      	subs	r2, r2, r1
  40ea8c:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40ea90:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40ea94:	1a1b      	subs	r3, r3, r0
  40ea96:	b29b      	uxth	r3, r3
  40ea98:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40ea9c:	f8bd 20ee 	ldrh.w	r2, [sp, #238]	; 0xee
  40eaa0:	1a52      	subs	r2, r2, r1
  40eaa2:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
  40eaa6:	1b1c      	subs	r4, r3, r4
  40eaa8:	b2a4      	uxth	r4, r4
  40eaaa:	3401      	adds	r4, #1
  40eaac:	b224      	sxth	r4, r4
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
  40eaae:	4628      	mov	r0, r5
  40eab0:	4b60      	ldr	r3, [pc, #384]	; (40ec34 <draw_line_skew+0x30c>)
  40eab2:	4798      	blx	r3
  40eab4:	4683      	mov	fp, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40eab6:	a83a      	add	r0, sp, #232	; 0xe8
  40eab8:	4b5f      	ldr	r3, [pc, #380]	; (40ec38 <draw_line_skew+0x310>)
  40eaba:	4798      	blx	r3
  40eabc:	4583      	cmp	fp, r0
  40eabe:	f200 80a3 	bhi.w	40ec08 <draw_line_skew+0x2e0>
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40eac2:	4658      	mov	r0, fp
  40eac4:	4b5d      	ldr	r3, [pc, #372]	; (40ec3c <draw_line_skew+0x314>)
  40eac6:	4798      	blx	r3
  40eac8:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
  40eaca:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40eace:	f8ba 3010 	ldrh.w	r3, [sl, #16]
  40ead2:	441a      	add	r2, r3
  40ead4:	b212      	sxth	r2, r2
  40ead6:	9204      	str	r2, [sp, #16]
  40ead8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    fill_area.x2 = draw_area.x2 + disp_area->x1;
  40eadc:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40eae0:	4413      	add	r3, r2
  40eae2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    fill_area.y1 = draw_area.y1 + disp_area->y1;
  40eae6:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40eaea:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  40eaee:	4413      	add	r3, r2
  40eaf0:	b21b      	sxth	r3, r3
  40eaf2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    fill_area.y2 = fill_area.y1;
  40eaf6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
  40eafa:	4659      	mov	r1, fp
  40eafc:	4b50      	ldr	r3, [pc, #320]	; (40ec40 <draw_line_skew+0x318>)
  40eafe:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40eb00:	f9bd 50ea 	ldrsh.w	r5, [sp, #234]	; 0xea
  40eb04:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  40eb08:	441d      	add	r5, r3
    uint32_t mask_p = 0;
  40eb0a:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40eb0c:	e0bd      	b.n	40ec8a <draw_line_skew+0x362>
        p1.y = point2->y;
  40eb0e:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
        p2.y = point1->y;
  40eb12:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
        p1.x = point2->x;
  40eb16:	f9b1 3000 	ldrsh.w	r3, [r1]
  40eb1a:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point1->x;
  40eb1e:	f9b0 3000 	ldrsh.w	r3, [r0]
  40eb22:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
  40eb26:	e717      	b.n	40e958 <draw_line_skew+0x30>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
  40eb28:	ea4f 134b 	mov.w	r3, fp, lsl #5
  40eb2c:	fb93 f3fa 	sdiv	r3, r3, sl
  40eb30:	e730      	b.n	40e994 <draw_line_skew+0x6c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40eb32:	b2b6      	uxth	r6, r6
  40eb34:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40eb38:	18f2      	adds	r2, r6, r3
  40eb3a:	b2ad      	uxth	r5, r5
  40eb3c:	442b      	add	r3, r5
  40eb3e:	2100      	movs	r1, #0
  40eb40:	9101      	str	r1, [sp, #4]
  40eb42:	b21b      	sxth	r3, r3
  40eb44:	9300      	str	r3, [sp, #0]
  40eb46:	4643      	mov	r3, r8
  40eb48:	b212      	sxth	r2, r2
  40eb4a:	4639      	mov	r1, r7
  40eb4c:	a82f      	add	r0, sp, #188	; 0xbc
  40eb4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 40ec24 <draw_line_skew+0x2fc>
  40eb52:	47d0      	blx	sl
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40eb54:	b2a4      	uxth	r4, r4
  40eb56:	1b36      	subs	r6, r6, r4
  40eb58:	1b2d      	subs	r5, r5, r4
  40eb5a:	2301      	movs	r3, #1
  40eb5c:	9301      	str	r3, [sp, #4]
  40eb5e:	b22d      	sxth	r5, r5
  40eb60:	9500      	str	r5, [sp, #0]
  40eb62:	4643      	mov	r3, r8
  40eb64:	b232      	sxth	r2, r6
  40eb66:	4639      	mov	r1, r7
  40eb68:	a824      	add	r0, sp, #144	; 0x90
  40eb6a:	47d0      	blx	sl
  40eb6c:	e769      	b.n	40ea42 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
  40eb6e:	b2bf      	uxth	r7, r7
  40eb70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40eb74:	18f9      	adds	r1, r7, r3
  40eb76:	fa1f f888 	uxth.w	r8, r8
  40eb7a:	4443      	add	r3, r8
  40eb7c:	2200      	movs	r2, #0
  40eb7e:	9201      	str	r2, [sp, #4]
  40eb80:	9500      	str	r5, [sp, #0]
  40eb82:	b21b      	sxth	r3, r3
  40eb84:	4632      	mov	r2, r6
  40eb86:	b209      	sxth	r1, r1
  40eb88:	a82f      	add	r0, sp, #188	; 0xbc
  40eb8a:	f8df a098 	ldr.w	sl, [pc, #152]	; 40ec24 <draw_line_skew+0x2fc>
  40eb8e:	47d0      	blx	sl
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
  40eb90:	b2a4      	uxth	r4, r4
  40eb92:	1b3f      	subs	r7, r7, r4
  40eb94:	eba8 0804 	sub.w	r8, r8, r4
  40eb98:	2301      	movs	r3, #1
  40eb9a:	9301      	str	r3, [sp, #4]
  40eb9c:	9500      	str	r5, [sp, #0]
  40eb9e:	fa0f f388 	sxth.w	r3, r8
  40eba2:	4632      	mov	r2, r6
  40eba4:	b239      	sxth	r1, r7
  40eba6:	a824      	add	r0, sp, #144	; 0x90
  40eba8:	47d0      	blx	sl
  40ebaa:	e74a      	b.n	40ea42 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  40ebac:	f9bd 10f4 	ldrsh.w	r1, [sp, #244]	; 0xf4
  40ebb0:	f9bd 20f6 	ldrsh.w	r2, [sp, #246]	; 0xf6
  40ebb4:	b28b      	uxth	r3, r1
  40ebb6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  40ebba:	1b5b      	subs	r3, r3, r5
  40ebbc:	fa1f f989 	uxth.w	r9, r9
  40ebc0:	fa19 f082 	uxtah	r0, r9, r2
  40ebc4:	2403      	movs	r4, #3
  40ebc6:	9401      	str	r4, [sp, #4]
  40ebc8:	b200      	sxth	r0, r0
  40ebca:	9000      	str	r0, [sp, #0]
  40ebcc:	b21b      	sxth	r3, r3
  40ebce:	a819      	add	r0, sp, #100	; 0x64
  40ebd0:	4c14      	ldr	r4, [pc, #80]	; (40ec24 <draw_line_skew+0x2fc>)
  40ebd2:	47a0      	blx	r4
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
  40ebd4:	f9bd 10f0 	ldrsh.w	r1, [sp, #240]	; 0xf0
  40ebd8:	f9bd 20f2 	ldrsh.w	r2, [sp, #242]	; 0xf2
  40ebdc:	b28b      	uxth	r3, r1
  40ebde:	1b5b      	subs	r3, r3, r5
  40ebe0:	fa19 f982 	uxtah	r9, r9, r2
  40ebe4:	2002      	movs	r0, #2
  40ebe6:	9001      	str	r0, [sp, #4]
  40ebe8:	fa0f f089 	sxth.w	r0, r9
  40ebec:	9000      	str	r0, [sp, #0]
  40ebee:	b21b      	sxth	r3, r3
  40ebf0:	a80e      	add	r0, sp, #56	; 0x38
  40ebf2:	47a0      	blx	r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
  40ebf4:	2100      	movs	r1, #0
  40ebf6:	a819      	add	r0, sp, #100	; 0x64
  40ebf8:	4c0b      	ldr	r4, [pc, #44]	; (40ec28 <draw_line_skew+0x300>)
  40ebfa:	47a0      	blx	r4
  40ebfc:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
  40ebfe:	2100      	movs	r1, #0
  40ec00:	a80e      	add	r0, sp, #56	; 0x38
  40ec02:	47a0      	blx	r4
  40ec04:	900b      	str	r0, [sp, #44]	; 0x2c
  40ec06:	e72f      	b.n	40ea68 <draw_line_skew+0x140>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40ec08:	a83a      	add	r0, sp, #232	; 0xe8
  40ec0a:	4b0b      	ldr	r3, [pc, #44]	; (40ec38 <draw_line_skew+0x310>)
  40ec0c:	4798      	blx	r3
  40ec0e:	4683      	mov	fp, r0
  40ec10:	e757      	b.n	40eac2 <draw_line_skew+0x19a>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
  40ec12:	4621      	mov	r1, r4
  40ec14:	4638      	mov	r0, r7
  40ec16:	4b0b      	ldr	r3, [pc, #44]	; (40ec44 <draw_line_skew+0x31c>)
  40ec18:	4798      	blx	r3
  40ec1a:	e048      	b.n	40ecae <draw_line_skew+0x386>
  40ec1c:	0042c2a4 	.word	0x0042c2a4
  40ec20:	004155b3 	.word	0x004155b3
  40ec24:	0040fcd1 	.word	0x0040fcd1
  40ec28:	0040fbb1 	.word	0x0040fbb1
  40ec2c:	004097a1 	.word	0x004097a1
  40ec30:	00414df5 	.word	0x00414df5
  40ec34:	00414cf1 	.word	0x00414cf1
  40ec38:	00415597 	.word	0x00415597
  40ec3c:	00416965 	.word	0x00416965
  40ec40:	00416b49 	.word	0x00416b49
  40ec44:	00416af1 	.word	0x00416af1
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
  40ec48:	9905      	ldr	r1, [sp, #20]
  40ec4a:	7a4b      	ldrb	r3, [r1, #9]
  40ec4c:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(&fill_area, clip,
  40ec50:	880a      	ldrh	r2, [r1, #0]
  40ec52:	f8ad 201c 	strh.w	r2, [sp, #28]
  40ec56:	9302      	str	r3, [sp, #8]
  40ec58:	7a0b      	ldrb	r3, [r1, #8]
  40ec5a:	9301      	str	r3, [sp, #4]
  40ec5c:	2302      	movs	r3, #2
  40ec5e:	9300      	str	r3, [sp, #0]
  40ec60:	464b      	mov	r3, r9
  40ec62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40ec66:	9906      	ldr	r1, [sp, #24]
  40ec68:	a80c      	add	r0, sp, #48	; 0x30
  40ec6a:	4e29      	ldr	r6, [pc, #164]	; (40ed10 <draw_line_skew+0x3e8>)
  40ec6c:	47b0      	blx	r6

            fill_area.y1 = fill_area.y2 + 1;
  40ec6e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
  40ec72:	3301      	adds	r3, #1
  40ec74:	b21b      	sxth	r3, r3
  40ec76:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            fill_area.y2 = fill_area.y1;
  40ec7a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
  40ec7e:	4659      	mov	r1, fp
  40ec80:	4648      	mov	r0, r9
  40ec82:	4b24      	ldr	r3, [pc, #144]	; (40ed14 <draw_line_skew+0x3ec>)
  40ec84:	4798      	blx	r3
            mask_p = 0;
  40ec86:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40ec88:	3501      	adds	r5, #1
  40ec8a:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
  40ec8e:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  40ec92:	4413      	add	r3, r2
  40ec94:	429d      	cmp	r5, r3
  40ec96:	dc14      	bgt.n	40ecc2 <draw_line_skew+0x39a>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
  40ec98:	eb09 0706 	add.w	r7, r9, r6
  40ec9c:	4623      	mov	r3, r4
  40ec9e:	b22a      	sxth	r2, r5
  40eca0:	9904      	ldr	r1, [sp, #16]
  40eca2:	4638      	mov	r0, r7
  40eca4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40ed20 <draw_line_skew+0x3f8>
  40eca8:	47c0      	blx	r8
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40ecaa:	2800      	cmp	r0, #0
  40ecac:	d0b1      	beq.n	40ec12 <draw_line_skew+0x2ea>
        mask_p += draw_area_w;
  40ecae:	4426      	add	r6, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
  40ecb0:	19a3      	adds	r3, r4, r6
  40ecb2:	459b      	cmp	fp, r3
  40ecb4:	d9c8      	bls.n	40ec48 <draw_line_skew+0x320>
            fill_area.y2 ++;
  40ecb6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40ecba:	3301      	adds	r3, #1
  40ecbc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  40ecc0:	e7e2      	b.n	40ec88 <draw_line_skew+0x360>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
  40ecc2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
  40ecc6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40ecca:	429a      	cmp	r2, r3
  40eccc:	d011      	beq.n	40ecf2 <draw_line_skew+0x3ca>
        fill_area.y2--;
  40ecce:	3b01      	subs	r3, #1
  40ecd0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
  40ecd4:	9905      	ldr	r1, [sp, #20]
  40ecd6:	7a4b      	ldrb	r3, [r1, #9]
  40ecd8:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(&fill_area, clip,
  40ecdc:	880a      	ldrh	r2, [r1, #0]
  40ecde:	9302      	str	r3, [sp, #8]
  40ece0:	7a0b      	ldrb	r3, [r1, #8]
  40ece2:	9301      	str	r3, [sp, #4]
  40ece4:	2302      	movs	r3, #2
  40ece6:	9300      	str	r3, [sp, #0]
  40ece8:	464b      	mov	r3, r9
  40ecea:	9906      	ldr	r1, [sp, #24]
  40ecec:	a80c      	add	r0, sp, #48	; 0x30
  40ecee:	4c08      	ldr	r4, [pc, #32]	; (40ed10 <draw_line_skew+0x3e8>)
  40ecf0:	47a0      	blx	r4

    }

    _lv_mem_buf_release(mask_buf);
  40ecf2:	4648      	mov	r0, r9
  40ecf4:	4b08      	ldr	r3, [pc, #32]	; (40ed18 <draw_line_skew+0x3f0>)
  40ecf6:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
  40ecf8:	9808      	ldr	r0, [sp, #32]
  40ecfa:	4c08      	ldr	r4, [pc, #32]	; (40ed1c <draw_line_skew+0x3f4>)
  40ecfc:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_right_id);
  40ecfe:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ed00:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_top_id);
  40ed02:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ed04:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_bottom_id);
  40ed06:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40ed08:	47a0      	blx	r4
}
  40ed0a:	b03f      	add	sp, #252	; 0xfc
  40ed0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ed10:	0040c871 	.word	0x0040c871
  40ed14:	00416b49 	.word	0x00416b49
  40ed18:	00416715 	.word	0x00416715
  40ed1c:	0040fc35 	.word	0x0040fc35
  40ed20:	0040fbe5 	.word	0x0040fbe5

0040ed24 <lv_draw_line_dsc_init>:
{
  40ed24:	b510      	push	{r4, lr}
  40ed26:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
  40ed28:	210a      	movs	r1, #10
  40ed2a:	4b04      	ldr	r3, [pc, #16]	; (40ed3c <lv_draw_line_dsc_init+0x18>)
  40ed2c:	4798      	blx	r3
    dsc->width = 1;
  40ed2e:	2301      	movs	r3, #1
  40ed30:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
  40ed32:	23ff      	movs	r3, #255	; 0xff
  40ed34:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
  40ed36:	2300      	movs	r3, #0
  40ed38:	8023      	strh	r3, [r4, #0]
  40ed3a:	bd10      	pop	{r4, pc}
  40ed3c:	00416af1 	.word	0x00416af1

0040ed40 <lv_draw_line>:
{
  40ed40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40ed44:	b09b      	sub	sp, #108	; 0x6c
    if(dsc->width == 0) return;
  40ed46:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
  40ed4a:	2c00      	cmp	r4, #0
  40ed4c:	d05e      	beq.n	40ee0c <lv_draw_line+0xcc>
    if(dsc->opa <= LV_OPA_MIN) return;
  40ed4e:	7a1d      	ldrb	r5, [r3, #8]
  40ed50:	2d02      	cmp	r5, #2
  40ed52:	d95b      	bls.n	40ee0c <lv_draw_line+0xcc>
    if(point1->x == point2->x && point1->y == point2->y) return;
  40ed54:	f9b0 5000 	ldrsh.w	r5, [r0]
  40ed58:	f9b1 6000 	ldrsh.w	r6, [r1]
  40ed5c:	42b5      	cmp	r5, r6
  40ed5e:	d058      	beq.n	40ee12 <lv_draw_line+0xd2>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40ed60:	42b5      	cmp	r5, r6
  40ed62:	bfa8      	it	ge
  40ed64:	4635      	movge	r5, r6
  40ed66:	b2ad      	uxth	r5, r5
  40ed68:	4626      	mov	r6, r4
  40ed6a:	2c00      	cmp	r4, #0
  40ed6c:	db58      	blt.n	40ee20 <lv_draw_line+0xe0>
  40ed6e:	f3c6 064f 	ubfx	r6, r6, #1, #16
  40ed72:	1bad      	subs	r5, r5, r6
  40ed74:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
  40ed78:	f9b1 4000 	ldrsh.w	r4, [r1]
  40ed7c:	f9b0 5000 	ldrsh.w	r5, [r0]
  40ed80:	42ac      	cmp	r4, r5
  40ed82:	bfb8      	it	lt
  40ed84:	462c      	movlt	r4, r5
  40ed86:	fa16 f484 	uxtah	r4, r6, r4
  40ed8a:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40ed8e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40ed92:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40ed96:	42ac      	cmp	r4, r5
  40ed98:	bfa8      	it	ge
  40ed9a:	462c      	movge	r4, r5
  40ed9c:	b2a4      	uxth	r4, r4
  40ed9e:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40eda2:	2d00      	cmp	r5, #0
  40eda4:	db3e      	blt.n	40ee24 <lv_draw_line+0xe4>
  40eda6:	eba4 0465 	sub.w	r4, r4, r5, asr #1
  40edaa:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40edae:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40edb2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40edb6:	42ac      	cmp	r4, r5
  40edb8:	bfb8      	it	lt
  40edba:	462c      	movlt	r4, r5
  40edbc:	b2a4      	uxth	r4, r4
  40edbe:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40edc2:	2d00      	cmp	r5, #0
  40edc4:	db30      	blt.n	40ee28 <lv_draw_line+0xe8>
  40edc6:	461e      	mov	r6, r3
  40edc8:	4690      	mov	r8, r2
  40edca:	460f      	mov	r7, r1
  40edcc:	4681      	mov	r9, r0
  40edce:	eb04 0365 	add.w	r3, r4, r5, asr #1
  40edd2:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
  40edd6:	a918      	add	r1, sp, #96	; 0x60
  40edd8:	4608      	mov	r0, r1
  40edda:	4b45      	ldr	r3, [pc, #276]	; (40eef0 <lv_draw_line+0x1b0>)
  40eddc:	4798      	blx	r3
    if(!is_common) return;
  40edde:	b1a8      	cbz	r0, 40ee0c <lv_draw_line+0xcc>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40ede0:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40ede4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  40ede8:	429a      	cmp	r2, r3
  40edea:	d01f      	beq.n	40ee2c <lv_draw_line+0xec>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40edec:	f9b9 2000 	ldrsh.w	r2, [r9]
  40edf0:	f9b7 3000 	ldrsh.w	r3, [r7]
  40edf4:	429a      	cmp	r2, r3
  40edf6:	d020      	beq.n	40ee3a <lv_draw_line+0xfa>
    else draw_line_skew(point1, point2, &clip_line, dsc);
  40edf8:	4633      	mov	r3, r6
  40edfa:	aa18      	add	r2, sp, #96	; 0x60
  40edfc:	4639      	mov	r1, r7
  40edfe:	4648      	mov	r0, r9
  40ee00:	4c3c      	ldr	r4, [pc, #240]	; (40eef4 <lv_draw_line+0x1b4>)
  40ee02:	47a0      	blx	r4
    if(dsc->round_end || dsc->round_start) {
  40ee04:	7a73      	ldrb	r3, [r6, #9]
  40ee06:	f013 0f0c 	tst.w	r3, #12
  40ee0a:	d11d      	bne.n	40ee48 <lv_draw_line+0x108>
}
  40ee0c:	b01b      	add	sp, #108	; 0x6c
  40ee0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(point1->x == point2->x && point1->y == point2->y) return;
  40ee12:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
  40ee16:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
  40ee1a:	45be      	cmp	lr, r7
  40ee1c:	d1a0      	bne.n	40ed60 <lv_draw_line+0x20>
  40ee1e:	e7f5      	b.n	40ee0c <lv_draw_line+0xcc>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40ee20:	1c66      	adds	r6, r4, #1
  40ee22:	e7a4      	b.n	40ed6e <lv_draw_line+0x2e>
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40ee24:	3501      	adds	r5, #1
  40ee26:	e7be      	b.n	40eda6 <lv_draw_line+0x66>
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40ee28:	3501      	adds	r5, #1
  40ee2a:	e7cc      	b.n	40edc6 <lv_draw_line+0x86>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40ee2c:	4633      	mov	r3, r6
  40ee2e:	aa18      	add	r2, sp, #96	; 0x60
  40ee30:	4639      	mov	r1, r7
  40ee32:	4648      	mov	r0, r9
  40ee34:	4c30      	ldr	r4, [pc, #192]	; (40eef8 <lv_draw_line+0x1b8>)
  40ee36:	47a0      	blx	r4
  40ee38:	e7e4      	b.n	40ee04 <lv_draw_line+0xc4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40ee3a:	4633      	mov	r3, r6
  40ee3c:	aa18      	add	r2, sp, #96	; 0x60
  40ee3e:	4639      	mov	r1, r7
  40ee40:	4648      	mov	r0, r9
  40ee42:	4c2e      	ldr	r4, [pc, #184]	; (40eefc <lv_draw_line+0x1bc>)
  40ee44:	47a0      	blx	r4
  40ee46:	e7dd      	b.n	40ee04 <lv_draw_line+0xc4>
        lv_draw_rect_dsc_init(&cir_dsc);
  40ee48:	a803      	add	r0, sp, #12
  40ee4a:	4b2d      	ldr	r3, [pc, #180]	; (40ef00 <lv_draw_line+0x1c0>)
  40ee4c:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
  40ee4e:	8833      	ldrh	r3, [r6, #0]
  40ee50:	f8ad 300e 	strh.w	r3, [sp, #14]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
  40ee54:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40ee58:	f8ad 300c 	strh.w	r3, [sp, #12]
        cir_dsc.bg_opa = dsc->opa;
  40ee5c:	7a33      	ldrb	r3, [r6, #8]
  40ee5e:	f88d 3018 	strb.w	r3, [sp, #24]
        int32_t r = (dsc->width >> 1);
  40ee62:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  40ee66:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
  40ee68:	b29b      	uxth	r3, r3
  40ee6a:	f083 0301 	eor.w	r3, r3, #1
  40ee6e:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
  40ee72:	7a73      	ldrb	r3, [r6, #9]
  40ee74:	f013 0f04 	tst.w	r3, #4
  40ee78:	d11d      	bne.n	40eeb6 <lv_draw_line+0x176>
        if(dsc->round_end) {
  40ee7a:	7a73      	ldrb	r3, [r6, #9]
  40ee7c:	f013 0f08 	tst.w	r3, #8
  40ee80:	d0c4      	beq.n	40ee0c <lv_draw_line+0xcc>
            cir_area.x1 = point2->x - r;
  40ee82:	883b      	ldrh	r3, [r7, #0]
  40ee84:	b2a4      	uxth	r4, r4
  40ee86:	1b1a      	subs	r2, r3, r4
  40ee88:	f8ad 2004 	strh.w	r2, [sp, #4]
            cir_area.y1 = point2->y - r;
  40ee8c:	8879      	ldrh	r1, [r7, #2]
  40ee8e:	1b0a      	subs	r2, r1, r4
  40ee90:	f8ad 2006 	strh.w	r2, [sp, #6]
            cir_area.x2 = point2->x + r - r_corr;
  40ee94:	18e2      	adds	r2, r4, r3
  40ee96:	b292      	uxth	r2, r2
  40ee98:	b2ad      	uxth	r5, r5
  40ee9a:	1b52      	subs	r2, r2, r5
  40ee9c:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point2->y + r - r_corr ;
  40eea0:	440c      	add	r4, r1
  40eea2:	b2a3      	uxth	r3, r4
  40eea4:	1b5b      	subs	r3, r3, r5
  40eea6:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40eeaa:	aa03      	add	r2, sp, #12
  40eeac:	4641      	mov	r1, r8
  40eeae:	a801      	add	r0, sp, #4
  40eeb0:	4b14      	ldr	r3, [pc, #80]	; (40ef04 <lv_draw_line+0x1c4>)
  40eeb2:	4798      	blx	r3
  40eeb4:	e7aa      	b.n	40ee0c <lv_draw_line+0xcc>
            cir_area.x1 = point1->x - r;
  40eeb6:	f8b9 2000 	ldrh.w	r2, [r9]
  40eeba:	b2a3      	uxth	r3, r4
  40eebc:	1ad1      	subs	r1, r2, r3
  40eebe:	f8ad 1004 	strh.w	r1, [sp, #4]
            cir_area.y1 = point1->y - r;
  40eec2:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  40eec6:	1ac1      	subs	r1, r0, r3
  40eec8:	f8ad 1006 	strh.w	r1, [sp, #6]
            cir_area.x2 = point1->x + r - r_corr;
  40eecc:	441a      	add	r2, r3
  40eece:	b292      	uxth	r2, r2
  40eed0:	b2a9      	uxth	r1, r5
  40eed2:	1a52      	subs	r2, r2, r1
  40eed4:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point1->y + r - r_corr ;
  40eed8:	4403      	add	r3, r0
  40eeda:	b29b      	uxth	r3, r3
  40eedc:	1a5b      	subs	r3, r3, r1
  40eede:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40eee2:	aa03      	add	r2, sp, #12
  40eee4:	4641      	mov	r1, r8
  40eee6:	a801      	add	r0, sp, #4
  40eee8:	4b06      	ldr	r3, [pc, #24]	; (40ef04 <lv_draw_line+0x1c4>)
  40eeea:	4798      	blx	r3
  40eeec:	e7c5      	b.n	40ee7a <lv_draw_line+0x13a>
  40eeee:	bf00      	nop
  40eef0:	004155b3 	.word	0x004155b3
  40eef4:	0040e929 	.word	0x0040e929
  40eef8:	0040e51d 	.word	0x0040e51d
  40eefc:	0040e72d 	.word	0x0040e72d
  40ef00:	0041245d 	.word	0x0041245d
  40ef04:	004124a9 	.word	0x004124a9

0040ef08 <lv_draw_mask_fade>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_fade(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_fade_param_t * p)
{
  40ef08:	b4f0      	push	{r4, r5, r6, r7}
  40ef0a:	9c04      	ldr	r4, [sp, #16]
    if(abs_y < p->cfg.coords.y1) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef0c:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
  40ef10:	4295      	cmp	r5, r2
  40ef12:	dc7c      	bgt.n	40f00e <lv_draw_mask_fade+0x106>
    if(abs_y > p->cfg.coords.y2) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef14:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
  40ef18:	42aa      	cmp	r2, r5
  40ef1a:	dc7b      	bgt.n	40f014 <lv_draw_mask_fade+0x10c>
    if(abs_x + len < p->cfg.coords.x1) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef1c:	185f      	adds	r7, r3, r1
  40ef1e:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
  40ef22:	42b7      	cmp	r7, r6
  40ef24:	db78      	blt.n	40f018 <lv_draw_mask_fade+0x110>
    if(abs_x > p->cfg.coords.x2) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef26:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40ef2a:	42a9      	cmp	r1, r5
  40ef2c:	dc76      	bgt.n	40f01c <lv_draw_mask_fade+0x114>

    if(abs_x + len > p->cfg.coords.x2) len -= abs_x + len - p->cfg.coords.x2 - 1;
  40ef2e:	42af      	cmp	r7, r5
  40ef30:	dd08      	ble.n	40ef44 <lv_draw_mask_fade+0x3c>
  40ef32:	b2ad      	uxth	r5, r5
  40ef34:	b29f      	uxth	r7, r3
  40ef36:	187b      	adds	r3, r7, r1
  40ef38:	b29b      	uxth	r3, r3
  40ef3a:	1aeb      	subs	r3, r5, r3
  40ef3c:	fa17 f383 	uxtah	r3, r7, r3
  40ef40:	3301      	adds	r3, #1
  40ef42:	b21b      	sxth	r3, r3

    if(abs_x < p->cfg.coords.x1) {
  40ef44:	42b1      	cmp	r1, r6
  40ef46:	da03      	bge.n	40ef50 <lv_draw_mask_fade+0x48>
        int32_t x_ofs = 0;
        x_ofs = p->cfg.coords.x1 - abs_x;
  40ef48:	1a71      	subs	r1, r6, r1
        len -= x_ofs;
  40ef4a:	1a5b      	subs	r3, r3, r1
  40ef4c:	b21b      	sxth	r3, r3
        mask_buf += x_ofs;
  40ef4e:	4408      	add	r0, r1
    }

    int32_t i;

    if(abs_y <= p->cfg.y_top) {
  40ef50:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  40ef54:	428a      	cmp	r2, r1
  40ef56:	dd27      	ble.n	40efa8 <lv_draw_mask_fade+0xa0>
        for(i = 0; i < len; i++) {
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
        }
        return LV_DRAW_MASK_RES_CHANGED;
    }
    else if(abs_y >= p->cfg.y_bottom) {
  40ef58:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  40ef5c:	42aa      	cmp	r2, r5
  40ef5e:	da3c      	bge.n	40efda <lv_draw_mask_fade+0xd2>
        }
        return LV_DRAW_MASK_RES_CHANGED;
    }
    else {
        /*Calculate the opa proportionally*/
        int16_t opa_diff = p->cfg.opa_bottom - p->cfg.opa_top;
  40ef60:	7d66      	ldrb	r6, [r4, #21]
  40ef62:	7d27      	ldrb	r7, [r4, #20]
  40ef64:	1bf4      	subs	r4, r6, r7
        int32_t y_diff = p->cfg.y_bottom - p->cfg.y_top + 1;
  40ef66:	1a6d      	subs	r5, r5, r1
  40ef68:	3501      	adds	r5, #1
        lv_opa_t opa_act = (int32_t)((int32_t)(abs_y - p->cfg.y_top) * opa_diff) / y_diff;
  40ef6a:	1a52      	subs	r2, r2, r1
  40ef6c:	fb02 f204 	mul.w	r2, r2, r4
  40ef70:	fb92 f2f5 	sdiv	r2, r2, r5
        opa_act += p->cfg.opa_top;
  40ef74:	fa57 f282 	uxtab	r2, r7, r2
  40ef78:	b2d2      	uxtb	r2, r2

        for(i = 0; i < len; i++) {
  40ef7a:	2100      	movs	r1, #0
  40ef7c:	e034      	b.n	40efe8 <lv_draw_mask_fade+0xe0>
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
  40ef7e:	2100      	movs	r1, #0
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
  40ef80:	7031      	strb	r1, [r6, #0]
        for(i = 0; i < len; i++) {
  40ef82:	3201      	adds	r2, #1
  40ef84:	429a      	cmp	r2, r3
  40ef86:	da11      	bge.n	40efac <lv_draw_mask_fade+0xa4>
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
  40ef88:	1886      	adds	r6, r0, r2
  40ef8a:	5c81      	ldrb	r1, [r0, r2]
  40ef8c:	7d25      	ldrb	r5, [r4, #20]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ef8e:	2dfc      	cmp	r5, #252	; 0xfc
  40ef90:	d8f6      	bhi.n	40ef80 <lv_draw_mask_fade+0x78>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ef92:	2d02      	cmp	r5, #2
  40ef94:	d9f3      	bls.n	40ef7e <lv_draw_mask_fade+0x76>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ef96:	fb01 f105 	mul.w	r1, r1, r5
  40ef9a:	eb01 2501 	add.w	r5, r1, r1, lsl #8
  40ef9e:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
  40efa2:	f3c1 51c7 	ubfx	r1, r1, #23, #8
  40efa6:	e7eb      	b.n	40ef80 <lv_draw_mask_fade+0x78>
  40efa8:	2200      	movs	r2, #0
  40efaa:	e7eb      	b.n	40ef84 <lv_draw_mask_fade+0x7c>
        return LV_DRAW_MASK_RES_CHANGED;
  40efac:	2002      	movs	r0, #2
  40efae:	e02f      	b.n	40f010 <lv_draw_mask_fade+0x108>
    if(mask_new <= LV_OPA_MIN) return 0;
  40efb0:	2500      	movs	r5, #0
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_bottom);
  40efb2:	7035      	strb	r5, [r6, #0]
        for(i = 0; i < len; i++) {
  40efb4:	3201      	adds	r2, #1
  40efb6:	429a      	cmp	r2, r3
  40efb8:	da11      	bge.n	40efde <lv_draw_mask_fade+0xd6>
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_bottom);
  40efba:	1886      	adds	r6, r0, r2
  40efbc:	5c85      	ldrb	r5, [r0, r2]
  40efbe:	7d61      	ldrb	r1, [r4, #21]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40efc0:	29fc      	cmp	r1, #252	; 0xfc
  40efc2:	d8f6      	bhi.n	40efb2 <lv_draw_mask_fade+0xaa>
    if(mask_new <= LV_OPA_MIN) return 0;
  40efc4:	2902      	cmp	r1, #2
  40efc6:	d9f3      	bls.n	40efb0 <lv_draw_mask_fade+0xa8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40efc8:	fb01 f105 	mul.w	r1, r1, r5
  40efcc:	eb01 2501 	add.w	r5, r1, r1, lsl #8
  40efd0:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
  40efd4:	f3c1 55c7 	ubfx	r5, r1, #23, #8
  40efd8:	e7eb      	b.n	40efb2 <lv_draw_mask_fade+0xaa>
  40efda:	2200      	movs	r2, #0
  40efdc:	e7eb      	b.n	40efb6 <lv_draw_mask_fade+0xae>
        return LV_DRAW_MASK_RES_CHANGED;
  40efde:	2002      	movs	r0, #2
  40efe0:	e016      	b.n	40f010 <lv_draw_mask_fade+0x108>
    if(mask_new <= LV_OPA_MIN) return 0;
  40efe2:	2400      	movs	r4, #0
            mask_buf[i] = mask_mix(mask_buf[i], opa_act);
  40efe4:	702c      	strb	r4, [r5, #0]
        for(i = 0; i < len; i++) {
  40efe6:	3101      	adds	r1, #1
  40efe8:	4299      	cmp	r1, r3
  40efea:	da0e      	bge.n	40f00a <lv_draw_mask_fade+0x102>
            mask_buf[i] = mask_mix(mask_buf[i], opa_act);
  40efec:	1845      	adds	r5, r0, r1
  40efee:	5c44      	ldrb	r4, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40eff0:	2afc      	cmp	r2, #252	; 0xfc
  40eff2:	d8f7      	bhi.n	40efe4 <lv_draw_mask_fade+0xdc>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eff4:	2a02      	cmp	r2, #2
  40eff6:	d9f4      	bls.n	40efe2 <lv_draw_mask_fade+0xda>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eff8:	fb02 f404 	mul.w	r4, r2, r4
  40effc:	eb04 2604 	add.w	r6, r4, r4, lsl #8
  40f000:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
  40f004:	f3c4 54c7 	ubfx	r4, r4, #23, #8
  40f008:	e7ec      	b.n	40efe4 <lv_draw_mask_fade+0xdc>
        return LV_DRAW_MASK_RES_CHANGED;
  40f00a:	2002      	movs	r0, #2
  40f00c:	e000      	b.n	40f010 <lv_draw_mask_fade+0x108>
    if(abs_y < p->cfg.coords.y1) return LV_DRAW_MASK_RES_FULL_COVER;
  40f00e:	2001      	movs	r0, #1
}
  40f010:	bcf0      	pop	{r4, r5, r6, r7}
  40f012:	4770      	bx	lr
    if(abs_y > p->cfg.coords.y2) return LV_DRAW_MASK_RES_FULL_COVER;
  40f014:	2001      	movs	r0, #1
  40f016:	e7fb      	b.n	40f010 <lv_draw_mask_fade+0x108>
    if(abs_x + len < p->cfg.coords.x1) return LV_DRAW_MASK_RES_FULL_COVER;
  40f018:	2001      	movs	r0, #1
  40f01a:	e7f9      	b.n	40f010 <lv_draw_mask_fade+0x108>
    if(abs_x > p->cfg.coords.x2) return LV_DRAW_MASK_RES_FULL_COVER;
  40f01c:	2001      	movs	r0, #1
  40f01e:	e7f7      	b.n	40f010 <lv_draw_mask_fade+0x108>

0040f020 <line_mask_flat>:
{
  40f020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f022:	9e06      	ldr	r6, [sp, #24]
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
  40f024:	69f4      	ldr	r4, [r6, #28]
  40f026:	fb01 f504 	mul.w	r5, r1, r4
  40f02a:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40f02c:	2c00      	cmp	r4, #0
  40f02e:	dd09      	ble.n	40f044 <line_mask_flat+0x24>
        if(y_at_x > abs_y) {
  40f030:	4295      	cmp	r5, r2
  40f032:	dd11      	ble.n	40f058 <line_mask_flat+0x38>
            if(p->inv) {
  40f034:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f038:	f013 0f02 	tst.w	r3, #2
  40f03c:	f000 80e2 	beq.w	40f204 <line_mask_flat+0x1e4>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40f040:	2001      	movs	r0, #1
  40f042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(y_at_x < abs_y) {
  40f044:	4295      	cmp	r5, r2
  40f046:	da07      	bge.n	40f058 <line_mask_flat+0x38>
            if(p->inv) {
  40f048:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f04c:	f013 0f02 	tst.w	r3, #2
  40f050:	f000 80da 	beq.w	40f208 <line_mask_flat+0x1e8>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40f054:	2001      	movs	r0, #1
  40f056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  40f058:	461f      	mov	r7, r3
  40f05a:	18cd      	adds	r5, r1, r3
  40f05c:	fb05 f504 	mul.w	r5, r5, r4
  40f060:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40f062:	2c00      	cmp	r4, #0
  40f064:	dd09      	ble.n	40f07a <line_mask_flat+0x5a>
        if(y_at_x < abs_y) {
  40f066:	4295      	cmp	r5, r2
  40f068:	da11      	bge.n	40f08e <line_mask_flat+0x6e>
            if(p->inv) {
  40f06a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f06e:	f013 0f02 	tst.w	r3, #2
  40f072:	f000 80cb 	beq.w	40f20c <line_mask_flat+0x1ec>
                return LV_DRAW_MASK_RES_TRANSP;
  40f076:	2000      	movs	r0, #0
  40f078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(y_at_x > abs_y) {
  40f07a:	4295      	cmp	r5, r2
  40f07c:	dd07      	ble.n	40f08e <line_mask_flat+0x6e>
            if(p->inv) {
  40f07e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f082:	f013 0f02 	tst.w	r3, #2
  40f086:	f000 80c3 	beq.w	40f210 <line_mask_flat+0x1f0>
                return LV_DRAW_MASK_RES_TRANSP;
  40f08a:	2000      	movs	r0, #0
  40f08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
  40f08e:	2c00      	cmp	r4, #0
  40f090:	dd39      	ble.n	40f106 <line_mask_flat+0xe6>
  40f092:	0212      	lsls	r2, r2, #8
  40f094:	69b4      	ldr	r4, [r6, #24]
  40f096:	fb04 f202 	mul.w	r2, r4, r2
  40f09a:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
  40f09c:	ea4f 2e22 	mov.w	lr, r2, asr #8
    if(xef == 0) px_h = 255;
  40f0a0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  40f0a4:	d036      	beq.n	40f114 <line_mask_flat+0xf4>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
  40f0a6:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40f0aa:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40f0ac:	fb04 f505 	mul.w	r5, r4, r5
  40f0b0:	122d      	asrs	r5, r5, #8
  40f0b2:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    int32_t k = xei - abs_x;
  40f0b6:	ebae 0101 	sub.w	r1, lr, r1
    if(xef) {
  40f0ba:	2a00      	cmp	r2, #0
  40f0bc:	d05d      	beq.n	40f17a <line_mask_flat+0x15a>
        if(k >= 0 && k < len) {
  40f0be:	2900      	cmp	r1, #0
  40f0c0:	db1f      	blt.n	40f102 <line_mask_flat+0xe2>
  40f0c2:	428b      	cmp	r3, r1
  40f0c4:	dd1d      	ble.n	40f102 <line_mask_flat+0xe2>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40f0c6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40f0ca:	f1c5 04ff 	rsb	r4, r5, #255	; 0xff
  40f0ce:	fb04 f202 	mul.w	r2, r4, r2
  40f0d2:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40f0d6:	43d4      	mvns	r4, r2
  40f0d8:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40f0da:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40f0de:	f01e 0f02 	tst.w	lr, #2
  40f0e2:	d100      	bne.n	40f0e6 <line_mask_flat+0xc6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40f0e4:	4622      	mov	r2, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f0e6:	5c44      	ldrb	r4, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f0e8:	2afc      	cmp	r2, #252	; 0xfc
  40f0ea:	d809      	bhi.n	40f100 <line_mask_flat+0xe0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f0ec:	2a02      	cmp	r2, #2
  40f0ee:	d913      	bls.n	40f118 <line_mask_flat+0xf8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f0f0:	fb04 f202 	mul.w	r2, r4, r2
  40f0f4:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40f0f8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40f0fc:	f3c2 54c7 	ubfx	r4, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f100:	5444      	strb	r4, [r0, r1]
        k++;
  40f102:	1c4a      	adds	r2, r1, #1
  40f104:	e013      	b.n	40f12e <line_mask_flat+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40f106:	3201      	adds	r2, #1
  40f108:	0212      	lsls	r2, r2, #8
  40f10a:	69b4      	ldr	r4, [r6, #24]
  40f10c:	fb04 f202 	mul.w	r2, r4, r2
  40f110:	1292      	asrs	r2, r2, #10
  40f112:	e7c3      	b.n	40f09c <line_mask_flat+0x7c>
    if(xef == 0) px_h = 255;
  40f114:	25ff      	movs	r5, #255	; 0xff
  40f116:	e7ce      	b.n	40f0b6 <line_mask_flat+0x96>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f118:	2400      	movs	r4, #0
  40f11a:	e7f1      	b.n	40f100 <line_mask_flat+0xe0>
  40f11c:	f04f 0e00 	mov.w	lr, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f120:	f88c e000 	strb.w	lr, [ip]
        px_h -= p->spx;
  40f124:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40f126:	1b2d      	subs	r5, r5, r4
        k++;
  40f128:	3201      	adds	r2, #1
        if(k >= len) break;
  40f12a:	4297      	cmp	r7, r2
  40f12c:	dd27      	ble.n	40f17e <line_mask_flat+0x15e>
    while(px_h > p->spx) {
  40f12e:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
  40f132:	4575      	cmp	r5, lr
  40f134:	dd23      	ble.n	40f17e <line_mask_flat+0x15e>
        if(k >= 0 && k < len) {
  40f136:	2a00      	cmp	r2, #0
  40f138:	dbf4      	blt.n	40f124 <line_mask_flat+0x104>
  40f13a:	42ba      	cmp	r2, r7
  40f13c:	daf2      	bge.n	40f124 <line_mask_flat+0x104>
            m = px_h - (p->spx >> 1);
  40f13e:	b2ec      	uxtb	r4, r5
  40f140:	f3ce 0e47 	ubfx	lr, lr, #1, #8
  40f144:	eba4 040e 	sub.w	r4, r4, lr
  40f148:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40f14a:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40f14e:	f01e 0f02 	tst.w	lr, #2
  40f152:	d001      	beq.n	40f158 <line_mask_flat+0x138>
  40f154:	43e4      	mvns	r4, r4
  40f156:	b2e4      	uxtb	r4, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f158:	eb00 0c02 	add.w	ip, r0, r2
  40f15c:	f810 e002 	ldrb.w	lr, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f160:	2cfc      	cmp	r4, #252	; 0xfc
  40f162:	d8dd      	bhi.n	40f120 <line_mask_flat+0x100>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f164:	2c02      	cmp	r4, #2
  40f166:	d9d9      	bls.n	40f11c <line_mask_flat+0xfc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f168:	fb04 f40e 	mul.w	r4, r4, lr
  40f16c:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
  40f170:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
  40f174:	f3c4 5ec7 	ubfx	lr, r4, #23, #8
  40f178:	e7d2      	b.n	40f120 <line_mask_flat+0x100>
    int32_t k = xei - abs_x;
  40f17a:	460a      	mov	r2, r1
  40f17c:	e7d7      	b.n	40f12e <line_mask_flat+0x10e>
    if(k < len && k >= 0) {
  40f17e:	429a      	cmp	r2, r3
  40f180:	da27      	bge.n	40f1d2 <line_mask_flat+0x1b2>
  40f182:	2a00      	cmp	r2, #0
  40f184:	db25      	blt.n	40f1d2 <line_mask_flat+0x1b2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
  40f186:	69b4      	ldr	r4, [r6, #24]
  40f188:	fb04 f405 	mul.w	r4, r4, r5
  40f18c:	12a4      	asrs	r4, r4, #10
        m = (x_inters * px_h) >> 9;
  40f18e:	fb04 f505 	mul.w	r5, r4, r5
  40f192:	f3c5 2547 	ubfx	r5, r5, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
  40f196:	69f4      	ldr	r4, [r6, #28]
  40f198:	2c00      	cmp	r4, #0
  40f19a:	db15      	blt.n	40f1c8 <line_mask_flat+0x1a8>
        if(p->inv) m = 255 - m;
  40f19c:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40f1a0:	f014 0f02 	tst.w	r4, #2
  40f1a4:	d001      	beq.n	40f1aa <line_mask_flat+0x18a>
  40f1a6:	43ed      	mvns	r5, r5
  40f1a8:	b2ed      	uxtb	r5, r5
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40f1aa:	1887      	adds	r7, r0, r2
  40f1ac:	5c84      	ldrb	r4, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f1ae:	2dfc      	cmp	r5, #252	; 0xfc
  40f1b0:	d80e      	bhi.n	40f1d0 <line_mask_flat+0x1b0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f1b2:	2d02      	cmp	r5, #2
  40f1b4:	d90b      	bls.n	40f1ce <line_mask_flat+0x1ae>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f1b6:	fb05 f504 	mul.w	r5, r5, r4
  40f1ba:	eb05 2405 	add.w	r4, r5, r5, lsl #8
  40f1be:	eb05 15c4 	add.w	r5, r5, r4, lsl #7
  40f1c2:	f3c5 54c7 	ubfx	r4, r5, #23, #8
  40f1c6:	e003      	b.n	40f1d0 <line_mask_flat+0x1b0>
        if(p->yx_steep < 0) m = 255 - m;
  40f1c8:	43ed      	mvns	r5, r5
  40f1ca:	b2ed      	uxtb	r5, r5
  40f1cc:	e7e6      	b.n	40f19c <line_mask_flat+0x17c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f1ce:	2400      	movs	r4, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40f1d0:	703c      	strb	r4, [r7, #0]
    if(p->inv) {
  40f1d2:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40f1d6:	f014 0f02 	tst.w	r4, #2
  40f1da:	d007      	beq.n	40f1ec <line_mask_flat+0x1cc>
        if(k > len) {
  40f1dc:	428b      	cmp	r3, r1
  40f1de:	db19      	blt.n	40f214 <line_mask_flat+0x1f4>
        if(k >= 0) {
  40f1e0:	2900      	cmp	r1, #0
  40f1e2:	db19      	blt.n	40f218 <line_mask_flat+0x1f8>
            _lv_memset_00(&mask_buf[0], k);
  40f1e4:	4b0e      	ldr	r3, [pc, #56]	; (40f220 <line_mask_flat+0x200>)
  40f1e6:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f1e8:	2002      	movs	r0, #2
  40f1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(k < 0) {
  40f1ec:	3201      	adds	r2, #1
  40f1ee:	d415      	bmi.n	40f21c <line_mask_flat+0x1fc>
        if(k <= len) {
  40f1f0:	4293      	cmp	r3, r2
  40f1f2:	da01      	bge.n	40f1f8 <line_mask_flat+0x1d8>
    return LV_DRAW_MASK_RES_CHANGED;
  40f1f4:	2002      	movs	r0, #2
}
  40f1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            _lv_memset_00(&mask_buf[k], len - k);
  40f1f8:	1a99      	subs	r1, r3, r2
  40f1fa:	4410      	add	r0, r2
  40f1fc:	4b08      	ldr	r3, [pc, #32]	; (40f220 <line_mask_flat+0x200>)
  40f1fe:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f200:	2002      	movs	r0, #2
  40f202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40f204:	2000      	movs	r0, #0
  40f206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40f208:	2000      	movs	r0, #0
  40f20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40f20c:	2001      	movs	r0, #1
  40f20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40f210:	2001      	movs	r0, #1
  40f212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f214:	2000      	movs	r0, #0
  40f216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f218:	2002      	movs	r0, #2
  40f21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f21c:	2000      	movs	r0, #0
  40f21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f220:	00416af1 	.word	0x00416af1

0040f224 <line_mask_steep>:
{
  40f224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f226:	9e06      	ldr	r6, [sp, #24]
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40f228:	69b5      	ldr	r5, [r6, #24]
  40f22a:	fb02 f405 	mul.w	r4, r2, r5
  40f22e:	12a4      	asrs	r4, r4, #10
    if(p->xy_steep > 0) x_at_y++;
  40f230:	2d00      	cmp	r5, #0
  40f232:	dd0a      	ble.n	40f24a <line_mask_steep+0x26>
  40f234:	1c67      	adds	r7, r4, #1
    if(x_at_y < abs_x) {
  40f236:	428f      	cmp	r7, r1
  40f238:	da09      	bge.n	40f24e <line_mask_steep+0x2a>
        if(p->inv) {
  40f23a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f23e:	f013 0f02 	tst.w	r3, #2
  40f242:	f000 8156 	beq.w	40f4f2 <line_mask_steep+0x2ce>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f246:	2001      	movs	r0, #1
  40f248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40f24a:	4627      	mov	r7, r4
  40f24c:	e7f3      	b.n	40f236 <line_mask_steep+0x12>
    if(x_at_y > abs_x + len) {
  40f24e:	18cf      	adds	r7, r1, r3
  40f250:	42bc      	cmp	r4, r7
  40f252:	dd07      	ble.n	40f264 <line_mask_steep+0x40>
        if(p->inv) {
  40f254:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f258:	f013 0f02 	tst.w	r3, #2
  40f25c:	f000 814b 	beq.w	40f4f6 <line_mask_steep+0x2d2>
            return LV_DRAW_MASK_RES_TRANSP;
  40f260:	2000      	movs	r0, #0
  40f262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
  40f264:	0217      	lsls	r7, r2, #8
  40f266:	fb07 f705 	mul.w	r7, r7, r5
    int32_t xsi = xs >> 8;
  40f26a:	14bc      	asrs	r4, r7, #18
    int32_t xsf = xs & 0xFF;
  40f26c:	f3c7 2e87 	ubfx	lr, r7, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40f270:	3201      	adds	r2, #1
  40f272:	0212      	lsls	r2, r2, #8
  40f274:	fb02 f205 	mul.w	r2, r2, r5
    int32_t xei = xe >> 8;
  40f278:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    int32_t xef = xe & 0xFF;
  40f27c:	f3c2 2287 	ubfx	r2, r2, #10, #8
    k = xsi - abs_x;
  40f280:	1a67      	subs	r7, r4, r1
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40f282:	4564      	cmp	r4, ip
  40f284:	d001      	beq.n	40f28a <line_mask_steep+0x66>
  40f286:	2d00      	cmp	r5, #0
  40f288:	db68      	blt.n	40f35c <line_mask_steep+0x138>
    if(xsi == xei) {
  40f28a:	4564      	cmp	r4, ip
  40f28c:	d06e      	beq.n	40f36c <line_mask_steep+0x148>
        if(p->xy_steep < 0) {
  40f28e:	2d00      	cmp	r5, #0
  40f290:	f2c0 80ad 	blt.w	40f3ee <line_mask_steep+0x1ca>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
  40f294:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
  40f298:	69f5      	ldr	r5, [r6, #28]
  40f29a:	fb05 f502 	mul.w	r5, r5, r2
  40f29e:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
  40f2a0:	2f00      	cmp	r7, #0
  40f2a2:	db22      	blt.n	40f2ea <line_mask_steep+0xc6>
  40f2a4:	429f      	cmp	r7, r3
  40f2a6:	da20      	bge.n	40f2ea <line_mask_steep+0xc6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40f2a8:	fb05 f202 	mul.w	r2, r5, r2
  40f2ac:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40f2b0:	ea6f 0e02 	mvn.w	lr, r2
  40f2b4:	fa5f fe8e 	uxtb.w	lr, lr
                if(p->inv) m = 255 - m;
  40f2b8:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40f2bc:	f01c 0f02 	tst.w	ip, #2
  40f2c0:	d100      	bne.n	40f2c4 <line_mask_steep+0xa0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40f2c2:	4672      	mov	r2, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f2c4:	eb00 0c07 	add.w	ip, r0, r7
  40f2c8:	f810 e007 	ldrb.w	lr, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f2cc:	2afc      	cmp	r2, #252	; 0xfc
  40f2ce:	d80a      	bhi.n	40f2e6 <line_mask_steep+0xc2>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f2d0:	2a02      	cmp	r2, #2
  40f2d2:	f240 80fd 	bls.w	40f4d0 <line_mask_steep+0x2ac>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f2d6:	fb02 f20e 	mul.w	r2, r2, lr
  40f2da:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  40f2de:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  40f2e2:	f3c2 5ec7 	ubfx	lr, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f2e6:	f88c e000 	strb.w	lr, [ip]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
  40f2ea:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
  40f2ee:	69b2      	ldr	r2, [r6, #24]
  40f2f0:	fb02 f205 	mul.w	r2, r2, r5
  40f2f4:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40f2f6:	f117 0e01 	adds.w	lr, r7, #1
  40f2fa:	d41d      	bmi.n	40f338 <line_mask_steep+0x114>
  40f2fc:	4573      	cmp	r3, lr
  40f2fe:	dd1b      	ble.n	40f338 <line_mask_steep+0x114>
                m = ((255 - y_inters) * x_inters) >> 9;
  40f300:	fb02 f205 	mul.w	r2, r2, r5
  40f304:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  40f308:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40f30c:	f015 0f02 	tst.w	r5, #2
  40f310:	d001      	beq.n	40f316 <line_mask_steep+0xf2>
  40f312:	43d2      	mvns	r2, r2
  40f314:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f316:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f31a:	2afc      	cmp	r2, #252	; 0xfc
  40f31c:	d80a      	bhi.n	40f334 <line_mask_steep+0x110>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f31e:	2a02      	cmp	r2, #2
  40f320:	f240 80d9 	bls.w	40f4d6 <line_mask_steep+0x2b2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f324:	fb02 f205 	mul.w	r2, r2, r5
  40f328:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40f32c:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40f330:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f334:	f800 500e 	strb.w	r5, [r0, lr]
            k++;
  40f338:	3702      	adds	r7, #2
            if(p->inv) {
  40f33a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40f33e:	f012 0f02 	tst.w	r2, #2
  40f342:	f000 80ca 	beq.w	40f4da <line_mask_steep+0x2b6>
                k = xsi - abs_x;
  40f346:	1a61      	subs	r1, r4, r1
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40f348:	428b      	cmp	r3, r1
  40f34a:	f2c0 80e4 	blt.w	40f516 <line_mask_steep+0x2f2>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
  40f34e:	2900      	cmp	r1, #0
  40f350:	f2c0 80e3 	blt.w	40f51a <line_mask_steep+0x2f6>
  40f354:	4b74      	ldr	r3, [pc, #464]	; (40f528 <line_mask_steep+0x304>)
  40f356:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f358:	2002      	movs	r0, #2
  40f35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40f35c:	f1be 0f00 	cmp.w	lr, #0
  40f360:	d193      	bne.n	40f28a <line_mask_steep+0x66>
        k--;
  40f362:	3f01      	subs	r7, #1
        xsi = xei;
  40f364:	4664      	mov	r4, ip
        xsf = 0xFF;
  40f366:	f04f 0eff 	mov.w	lr, #255	; 0xff
  40f36a:	e78e      	b.n	40f28a <line_mask_steep+0x66>
        if(k >= 0 && k < len) {
  40f36c:	2f00      	cmp	r7, #0
  40f36e:	db1c      	blt.n	40f3aa <line_mask_steep+0x186>
  40f370:	429f      	cmp	r7, r3
  40f372:	da1a      	bge.n	40f3aa <line_mask_steep+0x186>
            m = (xsf + xef) >> 1;
  40f374:	4472      	add	r2, lr
  40f376:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
  40f37a:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40f37e:	f015 0f02 	tst.w	r5, #2
  40f382:	d001      	beq.n	40f388 <line_mask_steep+0x164>
  40f384:	43d2      	mvns	r2, r2
  40f386:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f388:	eb00 0e07 	add.w	lr, r0, r7
  40f38c:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f38e:	2afc      	cmp	r2, #252	; 0xfc
  40f390:	d809      	bhi.n	40f3a6 <line_mask_steep+0x182>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f392:	2a02      	cmp	r2, #2
  40f394:	d91a      	bls.n	40f3cc <line_mask_steep+0x1a8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f396:	fb05 f202 	mul.w	r2, r5, r2
  40f39a:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40f39e:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40f3a2:	f3c2 55c7 	ubfx	r5, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f3a6:	f88e 5000 	strb.w	r5, [lr]
        k++;
  40f3aa:	3701      	adds	r7, #1
        if(p->inv) {
  40f3ac:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40f3b0:	f012 0f02 	tst.w	r2, #2
  40f3b4:	d00c      	beq.n	40f3d0 <line_mask_steep+0x1ac>
            k = xsi - abs_x;
  40f3b6:	1a61      	subs	r1, r4, r1
            if(k >= len) {
  40f3b8:	428b      	cmp	r3, r1
  40f3ba:	f340 809e 	ble.w	40f4fa <line_mask_steep+0x2d6>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
  40f3be:	2900      	cmp	r1, #0
  40f3c0:	f2c0 809d 	blt.w	40f4fe <line_mask_steep+0x2da>
  40f3c4:	4b58      	ldr	r3, [pc, #352]	; (40f528 <line_mask_steep+0x304>)
  40f3c6:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f3c8:	2002      	movs	r0, #2
  40f3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40f3cc:	2500      	movs	r5, #0
  40f3ce:	e7ea      	b.n	40f3a6 <line_mask_steep+0x182>
            if(k > len) k = len;
  40f3d0:	42bb      	cmp	r3, r7
  40f3d2:	da00      	bge.n	40f3d6 <line_mask_steep+0x1b2>
  40f3d4:	461f      	mov	r7, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f3d6:	2f00      	cmp	r7, #0
  40f3d8:	f000 8093 	beq.w	40f502 <line_mask_steep+0x2de>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40f3dc:	2f00      	cmp	r7, #0
  40f3de:	f340 8092 	ble.w	40f506 <line_mask_steep+0x2e2>
  40f3e2:	1bd9      	subs	r1, r3, r7
  40f3e4:	4438      	add	r0, r7
  40f3e6:	4b50      	ldr	r3, [pc, #320]	; (40f528 <line_mask_steep+0x304>)
  40f3e8:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f3ea:	2002      	movs	r0, #2
  40f3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            y_inters = (xsf * (-p->yx_steep)) >> 10;
  40f3ee:	69f2      	ldr	r2, [r6, #28]
  40f3f0:	4252      	negs	r2, r2
  40f3f2:	fb02 f20e 	mul.w	r2, r2, lr
  40f3f6:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40f3f8:	2f00      	cmp	r7, #0
  40f3fa:	db23      	blt.n	40f444 <line_mask_steep+0x220>
  40f3fc:	429f      	cmp	r7, r3
  40f3fe:	da21      	bge.n	40f444 <line_mask_steep+0x220>
                m = (y_inters * xsf) >> 9;
  40f400:	fb02 fe0e 	mul.w	lr, r2, lr
  40f404:	f3ce 2e47 	ubfx	lr, lr, #9, #8
                if(p->inv) m = 255 - m;
  40f408:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40f40c:	f015 0f02 	tst.w	r5, #2
  40f410:	d003      	beq.n	40f41a <line_mask_steep+0x1f6>
  40f412:	ea6f 0e0e 	mvn.w	lr, lr
  40f416:	fa5f fe8e 	uxtb.w	lr, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f41a:	eb00 0c07 	add.w	ip, r0, r7
  40f41e:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f420:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
  40f424:	d80c      	bhi.n	40f440 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f426:	f1be 0f02 	cmp.w	lr, #2
  40f42a:	d908      	bls.n	40f43e <line_mask_steep+0x21a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f42c:	fb0e fe05 	mul.w	lr, lr, r5
  40f430:	eb0e 250e 	add.w	r5, lr, lr, lsl #8
  40f434:	eb0e 1ec5 	add.w	lr, lr, r5, lsl #7
  40f438:	f3ce 55c7 	ubfx	r5, lr, #23, #8
  40f43c:	e000      	b.n	40f440 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f43e:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f440:	f88c 5000 	strb.w	r5, [ip]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
  40f444:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40f448:	69b2      	ldr	r2, [r6, #24]
  40f44a:	4252      	negs	r2, r2
  40f44c:	fb02 f205 	mul.w	r2, r2, r5
  40f450:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40f452:	f1b7 0e01 	subs.w	lr, r7, #1
  40f456:	d41f      	bmi.n	40f498 <line_mask_steep+0x274>
  40f458:	4573      	cmp	r3, lr
  40f45a:	dd1d      	ble.n	40f498 <line_mask_steep+0x274>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40f45c:	fb02 f205 	mul.w	r2, r2, r5
  40f460:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40f464:	43d5      	mvns	r5, r2
  40f466:	b2ed      	uxtb	r5, r5
                if(p->inv) m = 255 - m;
  40f468:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40f46c:	f01c 0f02 	tst.w	ip, #2
  40f470:	d100      	bne.n	40f474 <line_mask_steep+0x250>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40f472:	462a      	mov	r2, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f474:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f478:	2afc      	cmp	r2, #252	; 0xfc
  40f47a:	d80b      	bhi.n	40f494 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f47c:	2a02      	cmp	r2, #2
  40f47e:	d908      	bls.n	40f492 <line_mask_steep+0x26e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f480:	fb02 f205 	mul.w	r2, r2, r5
  40f484:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40f488:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40f48c:	f3c2 55c7 	ubfx	r5, r2, #23, #8
  40f490:	e000      	b.n	40f494 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f492:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f494:	f800 500e 	strb.w	r5, [r0, lr]
            k += 2;
  40f498:	3701      	adds	r7, #1
            if(p->inv) {
  40f49a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40f49e:	f012 0f02 	tst.w	r2, #2
  40f4a2:	d00b      	beq.n	40f4bc <line_mask_steep+0x298>
                k = xsi - abs_x - 1;
  40f4a4:	1a61      	subs	r1, r4, r1
  40f4a6:	3901      	subs	r1, #1
                if(k > len) k = len;
  40f4a8:	428b      	cmp	r3, r1
  40f4aa:	da01      	bge.n	40f4b0 <line_mask_steep+0x28c>
    return LV_DRAW_MASK_RES_CHANGED;
  40f4ac:	2002      	movs	r0, #2
  40f4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
  40f4b0:	2900      	cmp	r1, #0
  40f4b2:	dd2a      	ble.n	40f50a <line_mask_steep+0x2e6>
  40f4b4:	4b1c      	ldr	r3, [pc, #112]	; (40f528 <line_mask_steep+0x304>)
  40f4b6:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f4b8:	2002      	movs	r0, #2
  40f4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f4bc:	42bb      	cmp	r3, r7
  40f4be:	db26      	blt.n	40f50e <line_mask_steep+0x2ea>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
  40f4c0:	2f00      	cmp	r7, #0
  40f4c2:	db26      	blt.n	40f512 <line_mask_steep+0x2ee>
  40f4c4:	1bd9      	subs	r1, r3, r7
  40f4c6:	4438      	add	r0, r7
  40f4c8:	4b17      	ldr	r3, [pc, #92]	; (40f528 <line_mask_steep+0x304>)
  40f4ca:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f4cc:	2002      	movs	r0, #2
  40f4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40f4d0:	f04f 0e00 	mov.w	lr, #0
  40f4d4:	e707      	b.n	40f2e6 <line_mask_steep+0xc2>
  40f4d6:	2500      	movs	r5, #0
  40f4d8:	e72c      	b.n	40f334 <line_mask_steep+0x110>
                if(k > len) k = len;
  40f4da:	42bb      	cmp	r3, r7
  40f4dc:	da00      	bge.n	40f4e0 <line_mask_steep+0x2bc>
  40f4de:	461f      	mov	r7, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f4e0:	b1ef      	cbz	r7, 40f51e <line_mask_steep+0x2fa>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40f4e2:	2f00      	cmp	r7, #0
  40f4e4:	dd1d      	ble.n	40f522 <line_mask_steep+0x2fe>
  40f4e6:	1bd9      	subs	r1, r3, r7
  40f4e8:	4438      	add	r0, r7
  40f4ea:	4b0f      	ldr	r3, [pc, #60]	; (40f528 <line_mask_steep+0x304>)
  40f4ec:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f4ee:	2002      	movs	r0, #2
  40f4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f4f2:	2000      	movs	r0, #0
  40f4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f4f6:	2001      	movs	r0, #1
  40f4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40f4fa:	2000      	movs	r0, #0
  40f4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f4fe:	2002      	movs	r0, #2
  40f500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f502:	2000      	movs	r0, #0
  40f504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f506:	2002      	movs	r0, #2
  40f508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f50a:	2002      	movs	r0, #2
  40f50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f50e:	2001      	movs	r0, #1
  40f510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f512:	2002      	movs	r0, #2
  40f514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40f516:	2000      	movs	r0, #0
  40f518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f51a:	2002      	movs	r0, #2
  40f51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f51e:	2000      	movs	r0, #0
  40f520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f522:	2002      	movs	r0, #2
}
  40f524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f526:	bf00      	nop
  40f528:	00416af1 	.word	0x00416af1

0040f52c <lv_draw_mask_line>:
{
  40f52c:	b570      	push	{r4, r5, r6, lr}
  40f52e:	b082      	sub	sp, #8
  40f530:	9c06      	ldr	r4, [sp, #24]
    abs_y -= p->origo.y;
  40f532:	8aa5      	ldrh	r5, [r4, #20]
  40f534:	1b52      	subs	r2, r2, r5
  40f536:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
  40f538:	8a65      	ldrh	r5, [r4, #18]
  40f53a:	1b49      	subs	r1, r1, r5
  40f53c:	b209      	sxth	r1, r1
    if(p->steep == 0) {
  40f53e:	6a26      	ldr	r6, [r4, #32]
  40f540:	2e00      	cmp	r6, #0
  40f542:	d146      	bne.n	40f5d2 <lv_draw_mask_line+0xa6>
        if(p->flat) {
  40f544:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40f548:	f015 0f01 	tst.w	r5, #1
  40f54c:	d015      	beq.n	40f57a <lv_draw_mask_line+0x4e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
  40f54e:	7c23      	ldrb	r3, [r4, #16]
  40f550:	f003 0303 	and.w	r3, r3, #3
  40f554:	2b01      	cmp	r3, #1
  40f556:	d94a      	bls.n	40f5ee <lv_draw_mask_line+0xc2>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f558:	2b02      	cmp	r3, #2
  40f55a:	d003      	beq.n	40f564 <lv_draw_mask_line+0x38>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f55c:	2b03      	cmp	r3, #3
  40f55e:	d006      	beq.n	40f56e <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
  40f560:	2000      	movs	r0, #0
  40f562:	e03e      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f564:	f112 0f01 	cmn.w	r2, #1
  40f568:	d5f8      	bpl.n	40f55c <lv_draw_mask_line+0x30>
  40f56a:	2001      	movs	r0, #1
  40f56c:	e039      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f56e:	2a00      	cmp	r2, #0
  40f570:	dd01      	ble.n	40f576 <lv_draw_mask_line+0x4a>
  40f572:	2001      	movs	r0, #1
  40f574:	e035      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
                return LV_DRAW_MASK_RES_TRANSP;
  40f576:	2000      	movs	r0, #0
  40f578:	e033      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
  40f57a:	7c22      	ldrb	r2, [r4, #16]
  40f57c:	f002 0203 	and.w	r2, r2, #3
  40f580:	1e94      	subs	r4, r2, #2
  40f582:	b2e4      	uxtb	r4, r4
  40f584:	2c01      	cmp	r4, #1
  40f586:	d934      	bls.n	40f5f2 <lv_draw_mask_line+0xc6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f588:	2a01      	cmp	r2, #1
  40f58a:	d009      	beq.n	40f5a0 <lv_draw_mask_line+0x74>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
  40f58c:	b992      	cbnz	r2, 40f5b4 <lv_draw_mask_line+0x88>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f58e:	18ca      	adds	r2, r1, r3
  40f590:	d431      	bmi.n	40f5f6 <lv_draw_mask_line+0xca>
                    int32_t k = - abs_x;
  40f592:	424d      	negs	r5, r1
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f594:	2d00      	cmp	r5, #0
  40f596:	db30      	blt.n	40f5fa <lv_draw_mask_line+0xce>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40f598:	42ab      	cmp	r3, r5
  40f59a:	dc05      	bgt.n	40f5a8 <lv_draw_mask_line+0x7c>
                    return LV_DRAW_MASK_RES_CHANGED;
  40f59c:	2002      	movs	r0, #2
  40f59e:	e020      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f5a0:	2900      	cmp	r1, #0
  40f5a2:	ddf3      	ble.n	40f58c <lv_draw_mask_line+0x60>
  40f5a4:	2001      	movs	r0, #1
  40f5a6:	e01c      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40f5a8:	4611      	mov	r1, r2
  40f5aa:	4428      	add	r0, r5
  40f5ac:	4b17      	ldr	r3, [pc, #92]	; (40f60c <lv_draw_mask_line+0xe0>)
  40f5ae:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40f5b0:	2002      	movs	r0, #2
  40f5b2:	e016      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f5b4:	42d9      	cmn	r1, r3
  40f5b6:	d422      	bmi.n	40f5fe <lv_draw_mask_line+0xd2>
                    int32_t k = - abs_x;
  40f5b8:	4249      	negs	r1, r1
                    if(k < 0) k = 0;
  40f5ba:	2900      	cmp	r1, #0
  40f5bc:	db07      	blt.n	40f5ce <lv_draw_mask_line+0xa2>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40f5be:	4299      	cmp	r1, r3
  40f5c0:	da1f      	bge.n	40f602 <lv_draw_mask_line+0xd6>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
  40f5c2:	2900      	cmp	r1, #0
  40f5c4:	db1f      	blt.n	40f606 <lv_draw_mask_line+0xda>
  40f5c6:	4b11      	ldr	r3, [pc, #68]	; (40f60c <lv_draw_mask_line+0xe0>)
  40f5c8:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40f5ca:	2002      	movs	r0, #2
  40f5cc:	e009      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
                    if(k < 0) k = 0;
  40f5ce:	4631      	mov	r1, r6
  40f5d0:	e7f5      	b.n	40f5be <lv_draw_mask_line+0x92>
    if(p->flat) {
  40f5d2:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40f5d6:	f015 0f01 	tst.w	r5, #1
  40f5da:	d104      	bne.n	40f5e6 <lv_draw_mask_line+0xba>
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
  40f5dc:	9400      	str	r4, [sp, #0]
  40f5de:	4c0c      	ldr	r4, [pc, #48]	; (40f610 <lv_draw_mask_line+0xe4>)
  40f5e0:	47a0      	blx	r4
}
  40f5e2:	b002      	add	sp, #8
  40f5e4:	bd70      	pop	{r4, r5, r6, pc}
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
  40f5e6:	9400      	str	r4, [sp, #0]
  40f5e8:	4c0a      	ldr	r4, [pc, #40]	; (40f614 <lv_draw_mask_line+0xe8>)
  40f5ea:	47a0      	blx	r4
  40f5ec:	e7f9      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40f5ee:	2001      	movs	r0, #1
  40f5f0:	e7f7      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
  40f5f2:	2001      	movs	r0, #1
  40f5f4:	e7f5      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f5f6:	2001      	movs	r0, #1
  40f5f8:	e7f3      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f5fa:	2000      	movs	r0, #0
  40f5fc:	e7f1      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f5fe:	2000      	movs	r0, #0
  40f600:	e7ef      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40f602:	2000      	movs	r0, #0
  40f604:	e7ed      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
                    return LV_DRAW_MASK_RES_CHANGED;
  40f606:	2002      	movs	r0, #2
  40f608:	e7eb      	b.n	40f5e2 <lv_draw_mask_line+0xb6>
  40f60a:	bf00      	nop
  40f60c:	00416af1 	.word	0x00416af1
  40f610:	0040f225 	.word	0x0040f225
  40f614:	0040f021 	.word	0x0040f021

0040f618 <lv_draw_mask_radius>:
{
  40f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f61c:	b08b      	sub	sp, #44	; 0x2c
  40f61e:	9e14      	ldr	r6, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
  40f620:	7cb5      	ldrb	r5, [r6, #18]
  40f622:	f005 0501 	and.w	r5, r5, #1
    int32_t radius = p->cfg.radius;
  40f626:	f9b6 9010 	ldrsh.w	r9, [r6, #16]
    lv_area_copy(&rect, &p->cfg.rect);
  40f62a:	f106 0c08 	add.w	ip, r6, #8
    uint8_t * d8 = (uint8_t *)dst;
  40f62e:	f10d 0e20 	add.w	lr, sp, #32
  40f632:	2408      	movs	r4, #8
  40f634:	e004      	b.n	40f640 <lv_draw_mask_radius+0x28>
        *d8 = *s8;
  40f636:	f81c 7b01 	ldrb.w	r7, [ip], #1
  40f63a:	f80e 7b01 	strb.w	r7, [lr], #1
        len--;
  40f63e:	3c01      	subs	r4, #1
    while(len) {
  40f640:	2c00      	cmp	r4, #0
  40f642:	d1f8      	bne.n	40f636 <lv_draw_mask_radius+0x1e>
    if(outer == false) {
  40f644:	2d00      	cmp	r5, #0
  40f646:	d13f      	bne.n	40f6c8 <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40f648:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40f64c:	4294      	cmp	r4, r2
  40f64e:	f300 829d 	bgt.w	40fb8c <lv_draw_mask_radius+0x574>
  40f652:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40f656:	42a2      	cmp	r2, r4
  40f658:	f300 829c 	bgt.w	40fb94 <lv_draw_mask_radius+0x57c>
  40f65c:	461f      	mov	r7, r3
  40f65e:	468b      	mov	fp, r1
  40f660:	4680      	mov	r8, r0
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40f662:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40f666:	eb09 0103 	add.w	r1, r9, r3
  40f66a:	458b      	cmp	fp, r1
  40f66c:	db07      	blt.n	40f67e <lv_draw_mask_radius+0x66>
  40f66e:	eb07 000b 	add.w	r0, r7, fp
  40f672:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40f676:	eba1 0109 	sub.w	r1, r1, r9
  40f67a:	4288      	cmp	r0, r1
  40f67c:	dd0b      	ble.n	40f696 <lv_draw_mask_radius+0x7e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40f67e:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
  40f682:	eb09 0001 	add.w	r0, r9, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40f686:	4282      	cmp	r2, r0
  40f688:	db50      	blt.n	40f72c <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40f68a:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
  40f68e:	eba0 0009 	sub.w	r0, r0, r9
  40f692:	4282      	cmp	r2, r0
  40f694:	dc4a      	bgt.n	40f72c <lv_draw_mask_radius+0x114>
        if(outer == false) {
  40f696:	bb6d      	cbnz	r5, 40f6f4 <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
  40f698:	eba3 050b 	sub.w	r5, r3, fp
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40f69c:	42bd      	cmp	r5, r7
  40f69e:	f300 827d 	bgt.w	40fb9c <lv_draw_mask_radius+0x584>
            if(last >= 0) {
  40f6a2:	2d00      	cmp	r5, #0
  40f6a4:	db03      	blt.n	40f6ae <lv_draw_mask_radius+0x96>
                _lv_memset_00(&mask_buf[0], last);
  40f6a6:	4629      	mov	r1, r5
  40f6a8:	4640      	mov	r0, r8
  40f6aa:	4ba7      	ldr	r3, [pc, #668]	; (40f948 <lv_draw_mask_radius+0x330>)
  40f6ac:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
  40f6ae:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  40f6b2:	eba3 040b 	sub.w	r4, r3, fp
  40f6b6:	3401      	adds	r4, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40f6b8:	2c00      	cmp	r4, #0
  40f6ba:	f340 8271 	ble.w	40fba0 <lv_draw_mask_radius+0x588>
            else if(first < len) {
  40f6be:	42a7      	cmp	r7, r4
  40f6c0:	dc0d      	bgt.n	40f6de <lv_draw_mask_radius+0xc6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f6c2:	b195      	cbz	r5, 40f6ea <lv_draw_mask_radius+0xd2>
            else return LV_DRAW_MASK_RES_CHANGED;
  40f6c4:	2002      	movs	r0, #2
  40f6c6:	e262      	b.n	40fb8e <lv_draw_mask_radius+0x576>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40f6c8:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40f6cc:	42a2      	cmp	r2, r4
  40f6ce:	f2c0 8263 	blt.w	40fb98 <lv_draw_mask_radius+0x580>
  40f6d2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40f6d6:	42a2      	cmp	r2, r4
  40f6d8:	ddc0      	ble.n	40f65c <lv_draw_mask_radius+0x44>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f6da:	2001      	movs	r0, #1
  40f6dc:	e257      	b.n	40fb8e <lv_draw_mask_radius+0x576>
                _lv_memset_00(&mask_buf[first], len - first);
  40f6de:	1b39      	subs	r1, r7, r4
  40f6e0:	eb08 0004 	add.w	r0, r8, r4
  40f6e4:	4b98      	ldr	r3, [pc, #608]	; (40f948 <lv_draw_mask_radius+0x330>)
  40f6e6:	4798      	blx	r3
  40f6e8:	e7eb      	b.n	40f6c2 <lv_draw_mask_radius+0xaa>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f6ea:	42a7      	cmp	r7, r4
  40f6ec:	f000 825a 	beq.w	40fba4 <lv_draw_mask_radius+0x58c>
            else return LV_DRAW_MASK_RES_CHANGED;
  40f6f0:	2002      	movs	r0, #2
  40f6f2:	e24c      	b.n	40fb8e <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40f6f4:	ebb3 030b 	subs.w	r3, r3, fp
  40f6f8:	d403      	bmi.n	40f702 <lv_draw_mask_radius+0xea>
            if(first <= len) {
  40f6fa:	42bb      	cmp	r3, r7
  40f6fc:	dd03      	ble.n	40f706 <lv_draw_mask_radius+0xee>
        return LV_DRAW_MASK_RES_CHANGED;
  40f6fe:	2002      	movs	r0, #2
  40f700:	e245      	b.n	40fb8e <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40f702:	2300      	movs	r3, #0
  40f704:	e7f9      	b.n	40f6fa <lv_draw_mask_radius+0xe2>
                int32_t last =  rect.x2 - abs_x - first + 1;
  40f706:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40f70a:	eba1 010b 	sub.w	r1, r1, fp
  40f70e:	1ac9      	subs	r1, r1, r3
  40f710:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
  40f712:	185a      	adds	r2, r3, r1
  40f714:	4297      	cmp	r7, r2
  40f716:	da00      	bge.n	40f71a <lv_draw_mask_radius+0x102>
  40f718:	1af9      	subs	r1, r7, r3
                if(last >= 0) {
  40f71a:	2900      	cmp	r1, #0
  40f71c:	f2c0 8244 	blt.w	40fba8 <lv_draw_mask_radius+0x590>
                    _lv_memset_00(&mask_buf[first], last);
  40f720:	eb08 0003 	add.w	r0, r8, r3
  40f724:	4b88      	ldr	r3, [pc, #544]	; (40f948 <lv_draw_mask_radius+0x330>)
  40f726:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
  40f728:	2002      	movs	r0, #2
  40f72a:	e230      	b.n	40fb8e <lv_draw_mask_radius+0x576>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
  40f72c:	eba3 0b0b 	sub.w	fp, r3, fp
  40f730:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
  40f734:	b29b      	uxth	r3, r3
  40f736:	1ac3      	subs	r3, r0, r3
  40f738:	b29b      	uxth	r3, r3
  40f73a:	3301      	adds	r3, #1
  40f73c:	b21b      	sxth	r3, r3
  40f73e:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f740:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  40f744:	b28c      	uxth	r4, r1
  40f746:	1b1b      	subs	r3, r3, r4
  40f748:	b29b      	uxth	r3, r3
  40f74a:	3301      	adds	r3, #1
  40f74c:	b21b      	sxth	r3, r3
    abs_y -= rect.y1;
  40f74e:	1b14      	subs	r4, r2, r4
  40f750:	b224      	sxth	r4, r4
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
  40f752:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
  40f756:	fb0a fa0a 	mul.w	sl, sl, sl
    if(abs_y < radius || abs_y > h - radius - 1) {
  40f75a:	45a1      	cmp	r9, r4
  40f75c:	dc06      	bgt.n	40f76c <lv_draw_mask_radius+0x154>
  40f75e:	eba3 0209 	sub.w	r2, r3, r9
  40f762:	3a01      	subs	r2, #1
  40f764:	4294      	cmp	r4, r2
  40f766:	dc01      	bgt.n	40f76c <lv_draw_mask_radius+0x154>
    return LV_DRAW_MASK_RES_CHANGED;
  40f768:	2002      	movs	r0, #2
  40f76a:	e210      	b.n	40fb8e <lv_draw_mask_radius+0x576>
        if(radius <= 256) sqrt_mask = 0x800;
  40f76c:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  40f770:	f300 80b1 	bgt.w	40f8d6 <lv_draw_mask_radius+0x2be>
  40f774:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40f778:	9201      	str	r2, [sp, #4]
        if(abs_y < radius) {
  40f77a:	45a1      	cmp	r9, r4
  40f77c:	f340 80b6 	ble.w	40f8ec <lv_draw_mask_radius+0x2d4>
            y = radius - abs_y;
  40f780:	eba9 0404 	sub.w	r4, r9, r4
            if(y == p->y_prev) {
  40f784:	6973      	ldr	r3, [r6, #20]
  40f786:	429c      	cmp	r4, r3
  40f788:	f000 80a9 	beq.w	40f8de <lv_draw_mask_radius+0x2c6>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40f78c:	9a01      	ldr	r2, [sp, #4]
  40f78e:	a904      	add	r1, sp, #16
  40f790:	fb04 a014 	mls	r0, r4, r4, sl
  40f794:	4b6d      	ldr	r3, [pc, #436]	; (40f94c <lv_draw_mask_radius+0x334>)
  40f796:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40f798:	1e63      	subs	r3, r4, #1
  40f79a:	9a01      	ldr	r2, [sp, #4]
  40f79c:	a905      	add	r1, sp, #20
  40f79e:	9303      	str	r3, [sp, #12]
  40f7a0:	fb03 a013 	mls	r0, r3, r3, sl
  40f7a4:	4b69      	ldr	r3, [pc, #420]	; (40f94c <lv_draw_mask_radius+0x334>)
  40f7a6:	4798      	blx	r3
            p->y_prev = y - 1;
  40f7a8:	9b03      	ldr	r3, [sp, #12]
  40f7aa:	6173      	str	r3, [r6, #20]
            p->y_prev_x.f = x1.f;
  40f7ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40f7b0:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x1.i;
  40f7b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40f7b6:	8333      	strh	r3, [r6, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f7b8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f7bc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40f7c0:	1e51      	subs	r1, r2, #1
  40f7c2:	428b      	cmp	r3, r1
  40f7c4:	f000 80b4 	beq.w	40f930 <lv_draw_mask_radius+0x318>
        if(x0.i == x1.i) {
  40f7c8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40f7cc:	4293      	cmp	r3, r2
  40f7ce:	f000 80bf 	beq.w	40f950 <lv_draw_mask_radius+0x338>
            int32_t ofs = radius - (x0.i + 1);
  40f7d2:	3301      	adds	r3, #1
  40f7d4:	eba9 0903 	sub.w	r9, r9, r3
            int32_t kl = k + ofs;
  40f7d8:	eb0b 0609 	add.w	r6, fp, r9
            int32_t kr = k + (w - ofs - 1);
  40f7dc:	9b02      	ldr	r3, [sp, #8]
  40f7de:	eba3 0909 	sub.w	r9, r3, r9
  40f7e2:	f109 39ff 	add.w	r9, r9, #4294967295
  40f7e6:	44d9      	add	r9, fp
            if(outer) {
  40f7e8:	b175      	cbz	r5, 40f808 <lv_draw_mask_radius+0x1f0>
                if(first < 0) first = 0;
  40f7ea:	1c70      	adds	r0, r6, #1
  40f7ec:	f100 8116 	bmi.w	40fa1c <lv_draw_mask_radius+0x404>
                int32_t len_tmp = kr - first;
  40f7f0:	eba9 0100 	sub.w	r1, r9, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40f7f4:	45b9      	cmp	r9, r7
  40f7f6:	dd00      	ble.n	40f7fa <lv_draw_mask_radius+0x1e2>
  40f7f8:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40f7fa:	42b8      	cmp	r0, r7
  40f7fc:	da04      	bge.n	40f808 <lv_draw_mask_radius+0x1f0>
  40f7fe:	2900      	cmp	r1, #0
  40f800:	db02      	blt.n	40f808 <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40f802:	4440      	add	r0, r8
  40f804:	4b50      	ldr	r3, [pc, #320]	; (40f948 <lv_draw_mask_radius+0x330>)
  40f806:	4798      	blx	r3
            uint32_t i = x0.i + 1;
  40f808:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  40f80c:	f100 0b01 	add.w	fp, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
  40f810:	9a01      	ldr	r2, [sp, #4]
  40f812:	a906      	add	r1, sp, #24
  40f814:	fb00 a010 	mls	r0, r0, r0, sl
  40f818:	4b4c      	ldr	r3, [pc, #304]	; (40f94c <lv_draw_mask_radius+0x334>)
  40f81a:	4798      	blx	r3
            if(y_prev.f == 0) {
  40f81c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40f820:	b93b      	cbnz	r3, 40f832 <lv_draw_mask_radius+0x21a>
                y_prev.i--;
  40f822:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40f826:	3b01      	subs	r3, #1
  40f828:	f8ad 3018 	strh.w	r3, [sp, #24]
                y_prev.f = 0xFF;
  40f82c:	23ff      	movs	r3, #255	; 0xff
  40f82e:	f8ad 301a 	strh.w	r3, [sp, #26]
            if(y_prev.i >= y) {
  40f832:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40f836:	429c      	cmp	r4, r3
  40f838:	f300 8103 	bgt.w	40fa42 <lv_draw_mask_radius+0x42a>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
  40f83c:	9a01      	ldr	r2, [sp, #4]
  40f83e:	a907      	add	r1, sp, #28
  40f840:	fb0b a01b 	mls	r0, fp, fp, sl
  40f844:	4b41      	ldr	r3, [pc, #260]	; (40f94c <lv_draw_mask_radius+0x334>)
  40f846:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40f848:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40f84c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
  40f850:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f854:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  40f858:	fb03 f302 	mul.w	r3, r3, r2
  40f85c:	f3c3 2347 	ubfx	r3, r3, #9, #8
  40f860:	43da      	mvns	r2, r3
  40f862:	b2d2      	uxtb	r2, r2
                if(outer) m = 255 - m;
  40f864:	b905      	cbnz	r5, 40f868 <lv_draw_mask_radius+0x250>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40f866:	4613      	mov	r3, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f868:	2e00      	cmp	r6, #0
  40f86a:	db13      	blt.n	40f894 <lv_draw_mask_radius+0x27c>
  40f86c:	42be      	cmp	r6, r7
  40f86e:	da11      	bge.n	40f894 <lv_draw_mask_radius+0x27c>
  40f870:	eb08 0106 	add.w	r1, r8, r6
  40f874:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f878:	2bfc      	cmp	r3, #252	; 0xfc
  40f87a:	d80a      	bhi.n	40f892 <lv_draw_mask_radius+0x27a>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f87c:	2b02      	cmp	r3, #2
  40f87e:	f240 80cf 	bls.w	40fa20 <lv_draw_mask_radius+0x408>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f882:	fb03 f202 	mul.w	r2, r3, r2
  40f886:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f88a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f88e:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f892:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f894:	f1b9 0f00 	cmp.w	r9, #0
  40f898:	db13      	blt.n	40f8c2 <lv_draw_mask_radius+0x2aa>
  40f89a:	45b9      	cmp	r9, r7
  40f89c:	da11      	bge.n	40f8c2 <lv_draw_mask_radius+0x2aa>
  40f89e:	eb08 0109 	add.w	r1, r8, r9
  40f8a2:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f8a6:	2bfc      	cmp	r3, #252	; 0xfc
  40f8a8:	d80a      	bhi.n	40f8c0 <lv_draw_mask_radius+0x2a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f8aa:	2b02      	cmp	r3, #2
  40f8ac:	f240 80ba 	bls.w	40fa24 <lv_draw_mask_radius+0x40c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f8b0:	fb03 f302 	mul.w	r3, r3, r2
  40f8b4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f8b8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f8bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f8c0:	700a      	strb	r2, [r1, #0]
                kl--;
  40f8c2:	3e01      	subs	r6, #1
                kr++;
  40f8c4:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40f8c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f8cc:	f8ad 301a 	strh.w	r3, [sp, #26]
                i++;
  40f8d0:	f10b 0b01 	add.w	fp, fp, #1
  40f8d4:	e0b5      	b.n	40fa42 <lv_draw_mask_radius+0x42a>
        else sqrt_mask = 0x8000;
  40f8d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40f8da:	9201      	str	r2, [sp, #4]
  40f8dc:	e74d      	b.n	40f77a <lv_draw_mask_radius+0x162>
                x0.f = p->y_prev_x.f;
  40f8de:	8b73      	ldrh	r3, [r6, #26]
  40f8e0:	f8ad 3012 	strh.w	r3, [sp, #18]
                x0.i = p->y_prev_x.i;
  40f8e4:	8b33      	ldrh	r3, [r6, #24]
  40f8e6:	f8ad 3010 	strh.w	r3, [sp, #16]
  40f8ea:	e755      	b.n	40f798 <lv_draw_mask_radius+0x180>
            y = radius - (h - abs_y) + 1;
  40f8ec:	1b1b      	subs	r3, r3, r4
  40f8ee:	eba9 0003 	sub.w	r0, r9, r3
  40f8f2:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
  40f8f4:	6973      	ldr	r3, [r6, #20]
  40f8f6:	4298      	cmp	r0, r3
  40f8f8:	d013      	beq.n	40f922 <lv_draw_mask_radius+0x30a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40f8fa:	9a01      	ldr	r2, [sp, #4]
  40f8fc:	a905      	add	r1, sp, #20
  40f8fe:	fb00 a010 	mls	r0, r0, r0, sl
  40f902:	4b12      	ldr	r3, [pc, #72]	; (40f94c <lv_draw_mask_radius+0x334>)
  40f904:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40f906:	9a01      	ldr	r2, [sp, #4]
  40f908:	a904      	add	r1, sp, #16
  40f90a:	fb04 a014 	mls	r0, r4, r4, sl
  40f90e:	4b0f      	ldr	r3, [pc, #60]	; (40f94c <lv_draw_mask_radius+0x334>)
  40f910:	4798      	blx	r3
            p->y_prev = y;
  40f912:	6174      	str	r4, [r6, #20]
            p->y_prev_x.f = x0.f;
  40f914:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40f918:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x0.i;
  40f91a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f91e:	8333      	strh	r3, [r6, #24]
  40f920:	e74a      	b.n	40f7b8 <lv_draw_mask_radius+0x1a0>
                x1.f = p->y_prev_x.f;
  40f922:	8b73      	ldrh	r3, [r6, #26]
  40f924:	f8ad 3016 	strh.w	r3, [sp, #22]
                x1.i = p->y_prev_x.i;
  40f928:	8b33      	ldrh	r3, [r6, #24]
  40f92a:	f8ad 3014 	strh.w	r3, [sp, #20]
  40f92e:	e7ea      	b.n	40f906 <lv_draw_mask_radius+0x2ee>
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f930:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40f934:	2900      	cmp	r1, #0
  40f936:	f47f af47 	bne.w	40f7c8 <lv_draw_mask_radius+0x1b0>
            x1.i--;
  40f93a:	3a01      	subs	r2, #1
  40f93c:	f8ad 2014 	strh.w	r2, [sp, #20]
            x1.f = 0xFF;
  40f940:	22ff      	movs	r2, #255	; 0xff
  40f942:	f8ad 2016 	strh.w	r2, [sp, #22]
  40f946:	e73f      	b.n	40f7c8 <lv_draw_mask_radius+0x1b0>
  40f948:	00416af1 	.word	0x00416af1
  40f94c:	004164c9 	.word	0x004164c9
            lv_opa_t m = (x0.f + x1.f) >> 1;
  40f950:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40f954:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40f958:	440a      	add	r2, r1
  40f95a:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
  40f95e:	b10d      	cbz	r5, 40f964 <lv_draw_mask_radius+0x34c>
  40f960:	43d2      	mvns	r2, r2
  40f962:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
  40f964:	eba9 0303 	sub.w	r3, r9, r3
  40f968:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
  40f96a:	eb1b 0103 	adds.w	r1, fp, r3
  40f96e:	d411      	bmi.n	40f994 <lv_draw_mask_radius+0x37c>
  40f970:	42b9      	cmp	r1, r7
  40f972:	da0f      	bge.n	40f994 <lv_draw_mask_radius+0x37c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f974:	f818 0001 	ldrb.w	r0, [r8, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f978:	2afc      	cmp	r2, #252	; 0xfc
  40f97a:	d809      	bhi.n	40f990 <lv_draw_mask_radius+0x378>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f97c:	2a02      	cmp	r2, #2
  40f97e:	d932      	bls.n	40f9e6 <lv_draw_mask_radius+0x3ce>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f980:	fb02 f000 	mul.w	r0, r2, r0
  40f984:	eb00 2400 	add.w	r4, r0, r0, lsl #8
  40f988:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  40f98c:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f990:	f808 0001 	strb.w	r0, [r8, r1]
            int32_t kr = k + (w - ofs - 1);
  40f994:	9802      	ldr	r0, [sp, #8]
  40f996:	1ac3      	subs	r3, r0, r3
  40f998:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
  40f99a:	eb1b 0303 	adds.w	r3, fp, r3
  40f99e:	d411      	bmi.n	40f9c4 <lv_draw_mask_radius+0x3ac>
  40f9a0:	42bb      	cmp	r3, r7
  40f9a2:	da0f      	bge.n	40f9c4 <lv_draw_mask_radius+0x3ac>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f9a4:	f818 0003 	ldrb.w	r0, [r8, r3]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f9a8:	2afc      	cmp	r2, #252	; 0xfc
  40f9aa:	d809      	bhi.n	40f9c0 <lv_draw_mask_radius+0x3a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f9ac:	2a02      	cmp	r2, #2
  40f9ae:	d91c      	bls.n	40f9ea <lv_draw_mask_radius+0x3d2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f9b0:	fb02 f200 	mul.w	r2, r2, r0
  40f9b4:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f9b8:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f9bc:	f3c2 50c7 	ubfx	r0, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f9c0:	f808 0003 	strb.w	r0, [r8, r3]
            if(outer == false) {
  40f9c4:	b19d      	cbz	r5, 40f9ee <lv_draw_mask_radius+0x3d6>
                if(first < 0) first = 0;
  40f9c6:	1c48      	adds	r0, r1, #1
  40f9c8:	d426      	bmi.n	40fa18 <lv_draw_mask_radius+0x400>
                int32_t len_tmp = kr - first;
  40f9ca:	1a19      	subs	r1, r3, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40f9cc:	42bb      	cmp	r3, r7
  40f9ce:	dd00      	ble.n	40f9d2 <lv_draw_mask_radius+0x3ba>
  40f9d0:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40f9d2:	42b8      	cmp	r0, r7
  40f9d4:	f280 80be 	bge.w	40fb54 <lv_draw_mask_radius+0x53c>
  40f9d8:	2900      	cmp	r1, #0
  40f9da:	f2c0 80bb 	blt.w	40fb54 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40f9de:	4440      	add	r0, r8
  40f9e0:	4b72      	ldr	r3, [pc, #456]	; (40fbac <lv_draw_mask_radius+0x594>)
  40f9e2:	4798      	blx	r3
  40f9e4:	e0b6      	b.n	40fb54 <lv_draw_mask_radius+0x53c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f9e6:	2000      	movs	r0, #0
  40f9e8:	e7d2      	b.n	40f990 <lv_draw_mask_radius+0x378>
  40f9ea:	2000      	movs	r0, #0
  40f9ec:	e7e8      	b.n	40f9c0 <lv_draw_mask_radius+0x3a8>
                kr++;
  40f9ee:	1c5c      	adds	r4, r3, #1
                if(kl > len)  {
  40f9f0:	42b9      	cmp	r1, r7
  40f9f2:	f300 80c9 	bgt.w	40fb88 <lv_draw_mask_radius+0x570>
                if(kl >= 0) {
  40f9f6:	2900      	cmp	r1, #0
  40f9f8:	db02      	blt.n	40fa00 <lv_draw_mask_radius+0x3e8>
                    _lv_memset_00(&mask_buf[0], kl);
  40f9fa:	4640      	mov	r0, r8
  40f9fc:	4b6b      	ldr	r3, [pc, #428]	; (40fbac <lv_draw_mask_radius+0x594>)
  40f9fe:	4798      	blx	r3
                if(kr < 0) {
  40fa00:	2c00      	cmp	r4, #0
  40fa02:	f2c0 80c1 	blt.w	40fb88 <lv_draw_mask_radius+0x570>
                if(kr <= len) {
  40fa06:	42bc      	cmp	r4, r7
  40fa08:	f300 80a4 	bgt.w	40fb54 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[kr], len - kr);
  40fa0c:	1b39      	subs	r1, r7, r4
  40fa0e:	eb08 0004 	add.w	r0, r8, r4
  40fa12:	4b66      	ldr	r3, [pc, #408]	; (40fbac <lv_draw_mask_radius+0x594>)
  40fa14:	4798      	blx	r3
  40fa16:	e09d      	b.n	40fb54 <lv_draw_mask_radius+0x53c>
                if(first < 0) first = 0;
  40fa18:	2000      	movs	r0, #0
  40fa1a:	e7d6      	b.n	40f9ca <lv_draw_mask_radius+0x3b2>
                if(first < 0) first = 0;
  40fa1c:	2000      	movs	r0, #0
  40fa1e:	e6e7      	b.n	40f7f0 <lv_draw_mask_radius+0x1d8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fa20:	2200      	movs	r2, #0
  40fa22:	e736      	b.n	40f892 <lv_draw_mask_radius+0x27a>
  40fa24:	2200      	movs	r2, #0
  40fa26:	e74b      	b.n	40f8c0 <lv_draw_mask_radius+0x2a8>
  40fa28:	2200      	movs	r2, #0
  40fa2a:	e041      	b.n	40fab0 <lv_draw_mask_radius+0x498>
  40fa2c:	2200      	movs	r2, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fa2e:	700a      	strb	r2, [r1, #0]
                kl--;
  40fa30:	3e01      	subs	r6, #1
                kr++;
  40fa32:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40fa36:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40fa3a:	f8ad 301a 	strh.w	r3, [sp, #26]
            for(; i <= x1.i; i++) {
  40fa3e:	f10b 0b01 	add.w	fp, fp, #1
  40fa42:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40fa46:	459b      	cmp	fp, r3
  40fa48:	d849      	bhi.n	40fade <lv_draw_mask_radius+0x4c6>
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
  40fa4a:	fb0b a11b 	mls	r1, fp, fp, sl
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
  40fa4e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  40fa52:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40fa56:	0913      	lsrs	r3, r2, #4
  40fa58:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    uint32_t raw2 = raw * raw;
  40fa5c:	fb03 f003 	mul.w	r0, r3, r3

    int32_t d = x - raw2;
  40fa60:	ebc0 2101 	rsb	r1, r0, r1, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
  40fa64:	0058      	lsls	r0, r3, #1
  40fa66:	fb91 f1f0 	sdiv	r1, r1, r0
  40fa6a:	440b      	add	r3, r1

    q->i = d >> 4;
  40fa6c:	1119      	asrs	r1, r3, #4
  40fa6e:	f8ad 101c 	strh.w	r1, [sp, #28]
    q->f = (d & 0xF) << 4;
  40fa72:	011b      	lsls	r3, r3, #4
  40fa74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40fa78:	f8ad 301e 	strh.w	r3, [sp, #30]
                m = (y_prev.f + y_next.f) >> 1;
  40fa7c:	4413      	add	r3, r2
  40fa7e:	f3c3 0347 	ubfx	r3, r3, #1, #8
                if(outer) m = 255 - m;
  40fa82:	b10d      	cbz	r5, 40fa88 <lv_draw_mask_radius+0x470>
  40fa84:	43db      	mvns	r3, r3
  40fa86:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40fa88:	2e00      	cmp	r6, #0
  40fa8a:	db12      	blt.n	40fab2 <lv_draw_mask_radius+0x49a>
  40fa8c:	42be      	cmp	r6, r7
  40fa8e:	da10      	bge.n	40fab2 <lv_draw_mask_radius+0x49a>
  40fa90:	eb08 0106 	add.w	r1, r8, r6
  40fa94:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fa98:	2bfc      	cmp	r3, #252	; 0xfc
  40fa9a:	d809      	bhi.n	40fab0 <lv_draw_mask_radius+0x498>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fa9c:	2b02      	cmp	r3, #2
  40fa9e:	d9c3      	bls.n	40fa28 <lv_draw_mask_radius+0x410>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40faa0:	fb03 f202 	mul.w	r2, r3, r2
  40faa4:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40faa8:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40faac:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40fab0:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fab2:	f1b9 0f00 	cmp.w	r9, #0
  40fab6:	dbbb      	blt.n	40fa30 <lv_draw_mask_radius+0x418>
  40fab8:	45b9      	cmp	r9, r7
  40faba:	dab9      	bge.n	40fa30 <lv_draw_mask_radius+0x418>
  40fabc:	eb08 0109 	add.w	r1, r8, r9
  40fac0:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fac4:	2bfc      	cmp	r3, #252	; 0xfc
  40fac6:	d8b2      	bhi.n	40fa2e <lv_draw_mask_radius+0x416>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fac8:	2b02      	cmp	r3, #2
  40faca:	d9af      	bls.n	40fa2c <lv_draw_mask_radius+0x414>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40facc:	fb03 f302 	mul.w	r3, r3, r2
  40fad0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40fad4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40fad8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  40fadc:	e7a7      	b.n	40fa2e <lv_draw_mask_radius+0x416>
            if(y_prev.f) {
  40fade:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40fae2:	b3b2      	cbz	r2, 40fb52 <lv_draw_mask_radius+0x53a>
                m = (y_prev.f * x1.f) >> 9;
  40fae4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40fae8:	fb03 f302 	mul.w	r3, r3, r2
  40faec:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
  40faf0:	b10d      	cbz	r5, 40faf6 <lv_draw_mask_radius+0x4de>
  40faf2:	43db      	mvns	r3, r3
  40faf4:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40faf6:	2e00      	cmp	r6, #0
  40faf8:	db12      	blt.n	40fb20 <lv_draw_mask_radius+0x508>
  40fafa:	42be      	cmp	r6, r7
  40fafc:	da10      	bge.n	40fb20 <lv_draw_mask_radius+0x508>
  40fafe:	eb08 0106 	add.w	r1, r8, r6
  40fb02:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fb06:	2bfc      	cmp	r3, #252	; 0xfc
  40fb08:	d809      	bhi.n	40fb1e <lv_draw_mask_radius+0x506>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fb0a:	2b02      	cmp	r3, #2
  40fb0c:	d924      	bls.n	40fb58 <lv_draw_mask_radius+0x540>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fb0e:	fb03 f202 	mul.w	r2, r3, r2
  40fb12:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40fb16:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40fb1a:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40fb1e:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fb20:	f1b9 0f00 	cmp.w	r9, #0
  40fb24:	db12      	blt.n	40fb4c <lv_draw_mask_radius+0x534>
  40fb26:	45b9      	cmp	r9, r7
  40fb28:	da10      	bge.n	40fb4c <lv_draw_mask_radius+0x534>
  40fb2a:	eb08 0109 	add.w	r1, r8, r9
  40fb2e:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fb32:	2bfc      	cmp	r3, #252	; 0xfc
  40fb34:	d809      	bhi.n	40fb4a <lv_draw_mask_radius+0x532>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fb36:	2b02      	cmp	r3, #2
  40fb38:	d910      	bls.n	40fb5c <lv_draw_mask_radius+0x544>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fb3a:	fb03 f302 	mul.w	r3, r3, r2
  40fb3e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40fb42:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40fb46:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fb4a:	700a      	strb	r2, [r1, #0]
                kl--;
  40fb4c:	3e01      	subs	r6, #1
                kr++;
  40fb4e:	f109 0901 	add.w	r9, r9, #1
            if(outer == 0) {
  40fb52:	b12d      	cbz	r5, 40fb60 <lv_draw_mask_radius+0x548>
    return LV_DRAW_MASK_RES_CHANGED;
  40fb54:	2002      	movs	r0, #2
  40fb56:	e01a      	b.n	40fb8e <lv_draw_mask_radius+0x576>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fb58:	2200      	movs	r2, #0
  40fb5a:	e7e0      	b.n	40fb1e <lv_draw_mask_radius+0x506>
  40fb5c:	2200      	movs	r2, #0
  40fb5e:	e7f4      	b.n	40fb4a <lv_draw_mask_radius+0x532>
                kl++;
  40fb60:	1c71      	adds	r1, r6, #1
                if(kl > len) {
  40fb62:	42b9      	cmp	r1, r7
  40fb64:	dc10      	bgt.n	40fb88 <lv_draw_mask_radius+0x570>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
  40fb66:	2900      	cmp	r1, #0
  40fb68:	db02      	blt.n	40fb70 <lv_draw_mask_radius+0x558>
  40fb6a:	4640      	mov	r0, r8
  40fb6c:	4b0f      	ldr	r3, [pc, #60]	; (40fbac <lv_draw_mask_radius+0x594>)
  40fb6e:	4798      	blx	r3
                if(kr < 0) {
  40fb70:	f1b9 0f00 	cmp.w	r9, #0
  40fb74:	db08      	blt.n	40fb88 <lv_draw_mask_radius+0x570>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
  40fb76:	45b9      	cmp	r9, r7
  40fb78:	daec      	bge.n	40fb54 <lv_draw_mask_radius+0x53c>
  40fb7a:	eba7 0109 	sub.w	r1, r7, r9
  40fb7e:	eb08 0009 	add.w	r0, r8, r9
  40fb82:	4b0a      	ldr	r3, [pc, #40]	; (40fbac <lv_draw_mask_radius+0x594>)
  40fb84:	4798      	blx	r3
  40fb86:	e7e5      	b.n	40fb54 <lv_draw_mask_radius+0x53c>
                    return LV_DRAW_MASK_RES_TRANSP;
  40fb88:	2000      	movs	r0, #0
  40fb8a:	e000      	b.n	40fb8e <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_TRANSP;
  40fb8c:	2000      	movs	r0, #0
}
  40fb8e:	b00b      	add	sp, #44	; 0x2c
  40fb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40fb94:	2000      	movs	r0, #0
  40fb96:	e7fa      	b.n	40fb8e <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40fb98:	2001      	movs	r0, #1
  40fb9a:	e7f8      	b.n	40fb8e <lv_draw_mask_radius+0x576>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40fb9c:	2000      	movs	r0, #0
  40fb9e:	e7f6      	b.n	40fb8e <lv_draw_mask_radius+0x576>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40fba0:	2000      	movs	r0, #0
  40fba2:	e7f4      	b.n	40fb8e <lv_draw_mask_radius+0x576>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40fba4:	2001      	movs	r0, #1
  40fba6:	e7f2      	b.n	40fb8e <lv_draw_mask_radius+0x576>
        return LV_DRAW_MASK_RES_CHANGED;
  40fba8:	2002      	movs	r0, #2
  40fbaa:	e7f0      	b.n	40fb8e <lv_draw_mask_radius+0x576>
  40fbac:	00416af1 	.word	0x00416af1

0040fbb0 <lv_draw_mask_add>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fbb0:	2300      	movs	r3, #0
  40fbb2:	2b0f      	cmp	r3, #15
  40fbb4:	d806      	bhi.n	40fbc4 <lv_draw_mask_add+0x14>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  40fbb6:	4a0a      	ldr	r2, [pc, #40]	; (40fbe0 <lv_draw_mask_add+0x30>)
  40fbb8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40fbbc:	b112      	cbz	r2, 40fbc4 <lv_draw_mask_add+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fbbe:	3301      	adds	r3, #1
  40fbc0:	b2db      	uxtb	r3, r3
  40fbc2:	e7f6      	b.n	40fbb2 <lv_draw_mask_add+0x2>
    if(i >= _LV_MASK_MAX_NUM) {
  40fbc4:	2b0f      	cmp	r3, #15
  40fbc6:	d807      	bhi.n	40fbd8 <lv_draw_mask_add+0x28>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
  40fbc8:	4a05      	ldr	r2, [pc, #20]	; (40fbe0 <lv_draw_mask_add+0x30>)
  40fbca:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
  40fbce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40fbd2:	6051      	str	r1, [r2, #4]
    return i;
  40fbd4:	b218      	sxth	r0, r3
  40fbd6:	4770      	bx	lr
        return LV_MASK_ID_INV;
  40fbd8:	f04f 30ff 	mov.w	r0, #4294967295
}
  40fbdc:	4770      	bx	lr
  40fbde:	bf00      	nop
  40fbe0:	2043a340 	.word	0x2043a340

0040fbe4 <lv_draw_mask_apply>:
{
  40fbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40fbe8:	b082      	sub	sp, #8
  40fbea:	4680      	mov	r8, r0
  40fbec:	460f      	mov	r7, r1
  40fbee:	4616      	mov	r6, r2
  40fbf0:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
  40fbf2:	4c0f      	ldr	r4, [pc, #60]	; (40fc30 <lv_draw_mask_apply+0x4c>)
    bool changed = false;
  40fbf4:	f04f 0900 	mov.w	r9, #0
    while(m->param) {
  40fbf8:	e000      	b.n	40fbfc <lv_draw_mask_apply+0x18>
        m++;
  40fbfa:	3408      	adds	r4, #8
    while(m->param) {
  40fbfc:	6823      	ldr	r3, [r4, #0]
  40fbfe:	b16b      	cbz	r3, 40fc1c <lv_draw_mask_apply+0x38>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
  40fc00:	681d      	ldr	r5, [r3, #0]
  40fc02:	9300      	str	r3, [sp, #0]
  40fc04:	4653      	mov	r3, sl
  40fc06:	4632      	mov	r2, r6
  40fc08:	4639      	mov	r1, r7
  40fc0a:	4640      	mov	r0, r8
  40fc0c:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  40fc0e:	4603      	mov	r3, r0
  40fc10:	b140      	cbz	r0, 40fc24 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
  40fc12:	2802      	cmp	r0, #2
  40fc14:	d1f1      	bne.n	40fbfa <lv_draw_mask_apply+0x16>
  40fc16:	f04f 0901 	mov.w	r9, #1
  40fc1a:	e7ee      	b.n	40fbfa <lv_draw_mask_apply+0x16>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40fc1c:	f1b9 0f00 	cmp.w	r9, #0
  40fc20:	d004      	beq.n	40fc2c <lv_draw_mask_apply+0x48>
  40fc22:	2302      	movs	r3, #2
}
  40fc24:	4618      	mov	r0, r3
  40fc26:	b002      	add	sp, #8
  40fc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40fc2c:	2301      	movs	r3, #1
  40fc2e:	e7f9      	b.n	40fc24 <lv_draw_mask_apply+0x40>
  40fc30:	2043a340 	.word	0x2043a340

0040fc34 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
  40fc34:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fc38:	d00a      	beq.n	40fc50 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
  40fc3a:	4b06      	ldr	r3, [pc, #24]	; (40fc54 <lv_draw_mask_remove_id+0x20>)
  40fc3c:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
  40fc40:	2200      	movs	r2, #0
  40fc42:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
  40fc46:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  40fc4a:	605a      	str	r2, [r3, #4]
}
  40fc4c:	4608      	mov	r0, r1
  40fc4e:	4770      	bx	lr
    void * p = NULL;
  40fc50:	2100      	movs	r1, #0
    return p;
  40fc52:	e7fb      	b.n	40fc4c <lv_draw_mask_remove_id+0x18>
  40fc54:	2043a340 	.word	0x2043a340

0040fc58 <lv_draw_mask_remove_custom>:
{
  40fc58:	4601      	mov	r1, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fc5a:	2300      	movs	r3, #0
    void * p = NULL;
  40fc5c:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fc5e:	e004      	b.n	40fc6a <lv_draw_mask_remove_custom+0x12>
}
  40fc60:	f85d 4b04 	ldr.w	r4, [sp], #4
  40fc64:	4770      	bx	lr
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fc66:	3301      	adds	r3, #1
  40fc68:	b2db      	uxtb	r3, r3
  40fc6a:	2b0f      	cmp	r3, #15
  40fc6c:	d81a      	bhi.n	40fca4 <lv_draw_mask_remove_custom+0x4c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40fc6e:	4a0e      	ldr	r2, [pc, #56]	; (40fca8 <lv_draw_mask_remove_custom+0x50>)
  40fc70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40fc74:	6852      	ldr	r2, [r2, #4]
  40fc76:	428a      	cmp	r2, r1
  40fc78:	d1f5      	bne.n	40fc66 <lv_draw_mask_remove_custom+0xe>
{
  40fc7a:	b410      	push	{r4}
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40fc7c:	4a0a      	ldr	r2, [pc, #40]	; (40fca8 <lv_draw_mask_remove_custom+0x50>)
  40fc7e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
  40fc82:	2400      	movs	r4, #0
  40fc84:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
  40fc88:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40fc8c:	6054      	str	r4, [r2, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fc8e:	3301      	adds	r3, #1
  40fc90:	b2db      	uxtb	r3, r3
  40fc92:	2b0f      	cmp	r3, #15
  40fc94:	d8e4      	bhi.n	40fc60 <lv_draw_mask_remove_custom+0x8>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40fc96:	4a04      	ldr	r2, [pc, #16]	; (40fca8 <lv_draw_mask_remove_custom+0x50>)
  40fc98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40fc9c:	6852      	ldr	r2, [r2, #4]
  40fc9e:	428a      	cmp	r2, r1
  40fca0:	d1f5      	bne.n	40fc8e <lv_draw_mask_remove_custom+0x36>
  40fca2:	e7eb      	b.n	40fc7c <lv_draw_mask_remove_custom+0x24>
  40fca4:	4770      	bx	lr
  40fca6:	bf00      	nop
  40fca8:	2043a340 	.word	0x2043a340

0040fcac <lv_draw_mask_get_cnt>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fcac:	2300      	movs	r3, #0
    uint8_t cnt = 0;
  40fcae:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fcb0:	e001      	b.n	40fcb6 <lv_draw_mask_get_cnt+0xa>
  40fcb2:	3301      	adds	r3, #1
  40fcb4:	b2db      	uxtb	r3, r3
  40fcb6:	2b0f      	cmp	r3, #15
  40fcb8:	d807      	bhi.n	40fcca <lv_draw_mask_get_cnt+0x1e>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
  40fcba:	4a04      	ldr	r2, [pc, #16]	; (40fccc <lv_draw_mask_get_cnt+0x20>)
  40fcbc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40fcc0:	2a00      	cmp	r2, #0
  40fcc2:	d0f6      	beq.n	40fcb2 <lv_draw_mask_get_cnt+0x6>
  40fcc4:	3001      	adds	r0, #1
  40fcc6:	b2c0      	uxtb	r0, r0
  40fcc8:	e7f3      	b.n	40fcb2 <lv_draw_mask_get_cnt+0x6>
}
  40fcca:	4770      	bx	lr
  40fccc:	2043a340 	.word	0x2043a340

0040fcd0 <lv_draw_mask_line_points_init>:
{
  40fcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fcd4:	4604      	mov	r4, r0
  40fcd6:	4688      	mov	r8, r1
  40fcd8:	4616      	mov	r6, r2
  40fcda:	461f      	mov	r7, r3
  40fcdc:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
  40fce0:	212c      	movs	r1, #44	; 0x2c
  40fce2:	4b50      	ldr	r3, [pc, #320]	; (40fe24 <lv_draw_mask_line_points_init+0x154>)
  40fce4:	4798      	blx	r3
    if(p1y > p2y) {
  40fce6:	42ae      	cmp	r6, r5
  40fce8:	dc05      	bgt.n	40fcf6 <lv_draw_mask_line_points_init+0x26>
  40fcea:	462b      	mov	r3, r5
  40fcec:	4635      	mov	r5, r6
  40fcee:	461e      	mov	r6, r3
  40fcf0:	463b      	mov	r3, r7
  40fcf2:	4647      	mov	r7, r8
  40fcf4:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
  40fcf6:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
  40fcf8:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
  40fcfa:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
  40fcfe:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
  40fd00:	7c23      	ldrb	r3, [r4, #16]
  40fd02:	f89d 201c 	ldrb.w	r2, [sp, #28]
  40fd06:	f362 0301 	bfi	r3, r2, #0, #2
  40fd0a:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
  40fd0c:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
  40fd0e:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
  40fd10:	eba8 0707 	sub.w	r7, r8, r7
  40fd14:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
  40fd18:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
  40fd1c:	1b75      	subs	r5, r6, r5
  40fd1e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40fd22:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40fd26:	429a      	cmp	r2, r3
  40fd28:	bfd4      	ite	le
  40fd2a:	2200      	movle	r2, #0
  40fd2c:	2201      	movgt	r2, #1
  40fd2e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fd32:	f362 0300 	bfi	r3, r2, #0, #1
  40fd36:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->yx_steep = 0;
  40fd3a:	2200      	movs	r2, #0
  40fd3c:	61e2      	str	r2, [r4, #28]
    param->xy_steep = 0;
  40fd3e:	61a2      	str	r2, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
  40fd40:	4939      	ldr	r1, [pc, #228]	; (40fe28 <lv_draw_mask_line_points_init+0x158>)
  40fd42:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
  40fd44:	7122      	strb	r2, [r4, #4]
    if(param->flat) {
  40fd46:	f013 0f01 	tst.w	r3, #1
  40fd4a:	d024      	beq.n	40fd96 <lv_draw_mask_line_points_init+0xc6>
        if(dx) {
  40fd4c:	b13f      	cbz	r7, 40fd5e <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
  40fd4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40fd52:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
  40fd56:	fb03 f305 	mul.w	r3, r3, r5
  40fd5a:	129b      	asrs	r3, r3, #10
  40fd5c:	61e3      	str	r3, [r4, #28]
        if(dy) {
  40fd5e:	b13d      	cbz	r5, 40fd70 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40fd60:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  40fd64:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
  40fd68:	fb05 f707 	mul.w	r7, r5, r7
  40fd6c:	12bf      	asrs	r7, r7, #10
  40fd6e:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
  40fd70:	69e3      	ldr	r3, [r4, #28]
  40fd72:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
  40fd74:	7c23      	ldrb	r3, [r4, #16]
  40fd76:	f013 0303 	ands.w	r3, r3, #3
  40fd7a:	d121      	bne.n	40fdc0 <lv_draw_mask_line_points_init+0xf0>
  40fd7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fd80:	f36f 0341 	bfc	r3, #1, #1
  40fd84:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
  40fd88:	6a22      	ldr	r2, [r4, #32]
  40fd8a:	1093      	asrs	r3, r2, #2
  40fd8c:	6263      	str	r3, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
  40fd8e:	2a00      	cmp	r2, #0
  40fd90:	db45      	blt.n	40fe1e <lv_draw_mask_line_points_init+0x14e>
  40fd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
  40fd96:	b13d      	cbz	r5, 40fda8 <lv_draw_mask_line_points_init+0xd8>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40fd98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40fd9c:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
  40fda0:	fb03 f307 	mul.w	r3, r3, r7
  40fda4:	129b      	asrs	r3, r3, #10
  40fda6:	61a3      	str	r3, [r4, #24]
        if(dx) {
  40fda8:	b13f      	cbz	r7, 40fdba <lv_draw_mask_line_points_init+0xea>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40fdaa:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  40fdae:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
  40fdb2:	fb07 f505 	mul.w	r5, r7, r5
  40fdb6:	12ad      	asrs	r5, r5, #10
  40fdb8:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
  40fdba:	69a3      	ldr	r3, [r4, #24]
  40fdbc:	6223      	str	r3, [r4, #32]
  40fdbe:	e7d9      	b.n	40fd74 <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40fdc0:	2b01      	cmp	r3, #1
  40fdc2:	d00d      	beq.n	40fde0 <lv_draw_mask_line_points_init+0x110>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
  40fdc4:	2b02      	cmp	r3, #2
  40fdc6:	d012      	beq.n	40fdee <lv_draw_mask_line_points_init+0x11e>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  40fdc8:	2b03      	cmp	r3, #3
  40fdca:	d1dd      	bne.n	40fd88 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
  40fdcc:	6a23      	ldr	r3, [r4, #32]
  40fdce:	2b00      	cmp	r3, #0
  40fdd0:	dd1e      	ble.n	40fe10 <lv_draw_mask_line_points_init+0x140>
  40fdd2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fdd6:	f36f 0341 	bfc	r3, #1, #1
  40fdda:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fdde:	e7d3      	b.n	40fd88 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40fde0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fde4:	f043 0302 	orr.w	r3, r3, #2
  40fde8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fdec:	e7cc      	b.n	40fd88 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
  40fdee:	6a23      	ldr	r3, [r4, #32]
  40fdf0:	2b00      	cmp	r3, #0
  40fdf2:	dd06      	ble.n	40fe02 <lv_draw_mask_line_points_init+0x132>
  40fdf4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fdf8:	f043 0302 	orr.w	r3, r3, #2
  40fdfc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fe00:	e7c2      	b.n	40fd88 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 0;
  40fe02:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fe06:	f36f 0341 	bfc	r3, #1, #1
  40fe0a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fe0e:	e7bb      	b.n	40fd88 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 1;
  40fe10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fe14:	f043 0302 	orr.w	r3, r3, #2
  40fe18:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fe1c:	e7b4      	b.n	40fd88 <lv_draw_mask_line_points_init+0xb8>
    if(param->steep < 0) param->spx = -param->spx;
  40fe1e:	425b      	negs	r3, r3
  40fe20:	6263      	str	r3, [r4, #36]	; 0x24
}
  40fe22:	e7b6      	b.n	40fd92 <lv_draw_mask_line_points_init+0xc2>
  40fe24:	00416af1 	.word	0x00416af1
  40fe28:	0040f52d 	.word	0x0040f52d

0040fe2c <lv_draw_mask_radius_init>:
{
  40fe2c:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fe2e:	888c      	ldrh	r4, [r1, #4]
  40fe30:	880e      	ldrh	r6, [r1, #0]
  40fe32:	1ba4      	subs	r4, r4, r6
  40fe34:	b2a4      	uxth	r4, r4
  40fe36:	3401      	adds	r4, #1
  40fe38:	b226      	sxth	r6, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fe3a:	88cd      	ldrh	r5, [r1, #6]
  40fe3c:	884c      	ldrh	r4, [r1, #2]
  40fe3e:	1b2d      	subs	r5, r5, r4
  40fe40:	b2ad      	uxth	r5, r5
  40fe42:	3501      	adds	r5, #1
  40fe44:	b22c      	sxth	r4, r5
    int32_t short_side = LV_MATH_MIN(w, h);
  40fe46:	42b4      	cmp	r4, r6
  40fe48:	bfa8      	it	ge
  40fe4a:	4634      	movge	r4, r6
    if(radius > short_side >> 1) radius = short_side >> 1;
  40fe4c:	1064      	asrs	r4, r4, #1
  40fe4e:	42a2      	cmp	r2, r4
  40fe50:	dd00      	ble.n	40fe54 <lv_draw_mask_radius_init+0x28>
  40fe52:	b222      	sxth	r2, r4
    uint8_t * d8 = (uint8_t *)dst;
  40fe54:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.rect, rect);
  40fe58:	2408      	movs	r4, #8
  40fe5a:	e004      	b.n	40fe66 <lv_draw_mask_radius_init+0x3a>
        *d8 = *s8;
  40fe5c:	f811 6b01 	ldrb.w	r6, [r1], #1
  40fe60:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  40fe64:	3c01      	subs	r4, #1
    while(len) {
  40fe66:	2c00      	cmp	r4, #0
  40fe68:	d1f8      	bne.n	40fe5c <lv_draw_mask_radius_init+0x30>
    param->cfg.radius = radius;
  40fe6a:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
  40fe6c:	7c82      	ldrb	r2, [r0, #18]
  40fe6e:	f363 0200 	bfi	r2, r3, #0, #1
  40fe72:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
  40fe74:	4b05      	ldr	r3, [pc, #20]	; (40fe8c <lv_draw_mask_radius_init+0x60>)
  40fe76:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
  40fe78:	2302      	movs	r3, #2
  40fe7a:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
  40fe7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40fe80:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
  40fe82:	2300      	movs	r3, #0
  40fe84:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
  40fe86:	8303      	strh	r3, [r0, #24]
}
  40fe88:	bc70      	pop	{r4, r5, r6}
  40fe8a:	4770      	bx	lr
  40fe8c:	0040f619 	.word	0x0040f619

0040fe90 <lv_draw_mask_fade_init>:
{
  40fe90:	b470      	push	{r4, r5, r6}
    uint8_t * d8 = (uint8_t *)dst;
  40fe92:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.coords, coords);
  40fe96:	2408      	movs	r4, #8
  40fe98:	e004      	b.n	40fea4 <lv_draw_mask_fade_init+0x14>
        *d8 = *s8;
  40fe9a:	f811 6b01 	ldrb.w	r6, [r1], #1
  40fe9e:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  40fea2:	3c01      	subs	r4, #1
    while(len) {
  40fea4:	2c00      	cmp	r4, #0
  40fea6:	d1f8      	bne.n	40fe9a <lv_draw_mask_fade_init+0xa>
    param->cfg.opa_top = opa_top;
  40fea8:	7502      	strb	r2, [r0, #20]
    param->cfg.opa_bottom = opa_bottom;
  40feaa:	f89d 200c 	ldrb.w	r2, [sp, #12]
  40feae:	7542      	strb	r2, [r0, #21]
    param->cfg.y_top = y_top;
  40feb0:	8203      	strh	r3, [r0, #16]
    param->cfg.y_bottom = y_bottom;
  40feb2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  40feb6:	8243      	strh	r3, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_fade;
  40feb8:	4b02      	ldr	r3, [pc, #8]	; (40fec4 <lv_draw_mask_fade_init+0x34>)
  40feba:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_FADE;
  40febc:	2303      	movs	r3, #3
  40febe:	7103      	strb	r3, [r0, #4]
}
  40fec0:	bc70      	pop	{r4, r5, r6}
  40fec2:	4770      	bx	lr
  40fec4:	0040ef09 	.word	0x0040ef09

0040fec8 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
  40fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fecc:	b085      	sub	sp, #20
  40fece:	9002      	str	r0, [sp, #8]
  40fed0:	9101      	str	r1, [sp, #4]
  40fed2:	4615      	mov	r5, r2
    int32_t s_left = sw >> 1;
  40fed4:	104f      	asrs	r7, r1, #1
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
  40fed6:	f011 0f01 	tst.w	r1, #1
  40feda:	d10e      	bne.n	40fefa <shadow_blur_corner+0x32>
  40fedc:	f107 38ff 	add.w	r8, r7, #4294967295

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
  40fee0:	9b02      	ldr	r3, [sp, #8]
  40fee2:	469a      	mov	sl, r3
  40fee4:	005e      	lsls	r6, r3, #1
  40fee6:	4630      	mov	r0, r6
  40fee8:	4b50      	ldr	r3, [pc, #320]	; (41002c <shadow_blur_corner+0x164>)
  40feea:	4798      	blx	r3
  40feec:	4604      	mov	r4, r0

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
  40feee:	46a9      	mov	r9, r5

    for(y = 0; y < size; y++) {
  40fef0:	f04f 0b00 	mov.w	fp, #0
  40fef4:	9503      	str	r5, [sp, #12]
  40fef6:	9d02      	ldr	r5, [sp, #8]
  40fef8:	e024      	b.n	40ff44 <shadow_blur_corner+0x7c>
    int32_t s_left = sw >> 1;
  40fefa:	46b8      	mov	r8, r7
  40fefc:	e7f0      	b.n	40fee0 <shadow_blur_corner+0x18>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
        for(x = size - 1; x >= 0; x--) {
            sh_ups_blur_buf[x] = v;

            /*Forget the right pixel*/
            uint32_t right_val = 0;
  40fefe:	2200      	movs	r2, #0
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
            v -= right_val;
  40ff00:	1a9b      	subs	r3, r3, r2

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40ff02:	eba0 0e08 	sub.w	lr, r0, r8
  40ff06:	f1be 0f01 	cmp.w	lr, #1
  40ff0a:	d410      	bmi.n	40ff2e <shadow_blur_corner+0x66>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
  40ff0c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40ff10:	4472      	add	r2, lr
  40ff12:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
            v += left_val;
  40ff16:	4413      	add	r3, r2
        for(x = size - 1; x >= 0; x--) {
  40ff18:	3801      	subs	r0, #1
  40ff1a:	2800      	cmp	r0, #0
  40ff1c:	db0a      	blt.n	40ff34 <shadow_blur_corner+0x6c>
            sh_ups_blur_buf[x] = v;
  40ff1e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
  40ff22:	19c2      	adds	r2, r0, r7
  40ff24:	4291      	cmp	r1, r2
  40ff26:	ddea      	ble.n	40fefe <shadow_blur_corner+0x36>
  40ff28:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
  40ff2c:	e7e8      	b.n	40ff00 <shadow_blur_corner+0x38>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40ff2e:	f8b9 2000 	ldrh.w	r2, [r9]
  40ff32:	e7f0      	b.n	40ff16 <shadow_blur_corner+0x4e>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
  40ff34:	4632      	mov	r2, r6
  40ff36:	4621      	mov	r1, r4
  40ff38:	4648      	mov	r0, r9
  40ff3a:	4b3d      	ldr	r3, [pc, #244]	; (410030 <shadow_blur_corner+0x168>)
  40ff3c:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40ff3e:	44b1      	add	r9, r6
    for(y = 0; y < size; y++) {
  40ff40:	f10b 0b01 	add.w	fp, fp, #1
  40ff44:	4629      	mov	r1, r5
  40ff46:	45ab      	cmp	fp, r5
  40ff48:	da09      	bge.n	40ff5e <shadow_blur_corner+0x96>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40ff4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40ff4e:	4453      	add	r3, sl
  40ff50:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
  40ff54:	9a01      	ldr	r2, [sp, #4]
  40ff56:	fb02 f303 	mul.w	r3, r2, r3
        for(x = size - 1; x >= 0; x--) {
  40ff5a:	1e68      	subs	r0, r5, #1
  40ff5c:	e7dd      	b.n	40ff1a <shadow_blur_corner+0x52>
  40ff5e:	9d03      	ldr	r5, [sp, #12]
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
  40ff60:	882b      	ldrh	r3, [r5, #0]
  40ff62:	9a01      	ldr	r2, [sp, #4]
  40ff64:	4694      	mov	ip, r2
  40ff66:	fb93 f3f2 	sdiv	r3, r3, r2
  40ff6a:	802b      	strh	r3, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40ff6c:	2301      	movs	r3, #1
  40ff6e:	e002      	b.n	40ff76 <shadow_blur_corner+0xae>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40ff70:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40ff74:	3301      	adds	r3, #1
  40ff76:	fb0a f20a 	mul.w	r2, sl, sl
  40ff7a:	4293      	cmp	r3, r2
  40ff7c:	d20d      	bcs.n	40ff9a <shadow_blur_corner+0xd2>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40ff7e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  40ff82:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40ff86:	4418      	add	r0, r3
  40ff88:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40ff8c:	4282      	cmp	r2, r0
  40ff8e:	d0ef      	beq.n	40ff70 <shadow_blur_corner+0xa8>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
  40ff90:	fb92 f2fc 	sdiv	r2, r2, ip
  40ff94:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
  40ff98:	e7ec      	b.n	40ff74 <shadow_blur_corner+0xac>
  40ff9a:	f04f 0a00 	mov.w	sl, #0
  40ff9e:	e034      	b.n	41000a <shadow_blur_corner+0x142>

    for(x = 0; x < size; x++) {
        sh_ups_tmp_buf = &sh_ups_buf[x];
        int32_t v = sh_ups_tmp_buf[0] * sw;
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40ffa0:	f04f 0b00 	mov.w	fp, #0
  40ffa4:	e011      	b.n	40ffca <shadow_blur_corner+0x102>

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40ffa6:	f8b9 0000 	ldrh.w	r0, [r9]
  40ffaa:	e017      	b.n	40ffdc <shadow_blur_corner+0x114>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  40ffac:	1e48      	subs	r0, r1, #1
  40ffae:	fb00 a001 	mla	r0, r0, r1, sl
  40ffb2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v += bottom_val;
  40ffb6:	4402      	add	r2, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40ffb8:	3301      	adds	r3, #1
  40ffba:	44b1      	add	r9, r6
  40ffbc:	428b      	cmp	r3, r1
  40ffbe:	da18      	bge.n	40fff2 <shadow_blur_corner+0x12a>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40ffc0:	0058      	lsls	r0, r3, #1
  40ffc2:	2a00      	cmp	r2, #0
  40ffc4:	dbec      	blt.n	40ffa0 <shadow_blur_corner+0xd8>
  40ffc6:	f3c2 1b8f 	ubfx	fp, r2, #6, #16
  40ffca:	f824 b000 	strh.w	fp, [r4, r0]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40ffce:	1bd8      	subs	r0, r3, r7
  40ffd0:	2800      	cmp	r0, #0
  40ffd2:	dde8      	ble.n	40ffa6 <shadow_blur_corner+0xde>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
  40ffd4:	fb00 a001 	mla	r0, r0, r1, sl
  40ffd8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v -= top_val;
  40ffdc:	1a12      	subs	r2, r2, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  40ffde:	eb08 0003 	add.w	r0, r8, r3
  40ffe2:	3001      	adds	r0, #1
  40ffe4:	4281      	cmp	r1, r0
  40ffe6:	dde1      	ble.n	40ffac <shadow_blur_corner+0xe4>
  40ffe8:	fb00 a001 	mla	r0, r0, r1, sl
  40ffec:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40fff0:	e7e1      	b.n	40ffb6 <shadow_blur_corner+0xee>
  40fff2:	2300      	movs	r3, #0
  40fff4:	e005      	b.n	410002 <shadow_blur_corner+0x13a>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
  40fff6:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
  40fffa:	f8ae 2000 	strh.w	r2, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
  40fffe:	3301      	adds	r3, #1
  410000:	44b6      	add	lr, r6
  410002:	428b      	cmp	r3, r1
  410004:	dbf7      	blt.n	40fff6 <shadow_blur_corner+0x12e>
    for(x = 0; x < size; x++) {
  410006:	f10a 0a01 	add.w	sl, sl, #1
  41000a:	458a      	cmp	sl, r1
  41000c:	da08      	bge.n	410020 <shadow_blur_corner+0x158>
        sh_ups_tmp_buf = &sh_ups_buf[x];
  41000e:	eb05 0e4a 	add.w	lr, r5, sl, lsl #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
  410012:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
  410016:	fb02 f20c 	mul.w	r2, r2, ip
        sh_ups_tmp_buf = &sh_ups_buf[x];
  41001a:	46f1      	mov	r9, lr
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  41001c:	2300      	movs	r3, #0
  41001e:	e7cd      	b.n	40ffbc <shadow_blur_corner+0xf4>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
  410020:	4620      	mov	r0, r4
  410022:	4b04      	ldr	r3, [pc, #16]	; (410034 <shadow_blur_corner+0x16c>)
  410024:	4798      	blx	r3
}
  410026:	b005      	add	sp, #20
  410028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41002c:	00416965 	.word	0x00416965
  410030:	004167cd 	.word	0x004167cd
  410034:	00416715 	.word	0x00416715

00410038 <shadow_draw_corner_buf>:
{
  410038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41003c:	b08f      	sub	sp, #60	; 0x3c
  41003e:	4688      	mov	r8, r1
  410040:	4692      	mov	sl, r2
  410042:	461a      	mov	r2, r3
    int32_t size = sw_ori  + r;
  410044:	eb0a 0503 	add.w	r5, sl, r3
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  410048:	4604      	mov	r4, r0
    uint8_t * d8 = (uint8_t *)dst;
  41004a:	a90c      	add	r1, sp, #48	; 0x30
  41004c:	2308      	movs	r3, #8
  41004e:	e004      	b.n	41005a <shadow_draw_corner_buf+0x22>

    while(len) {
        *d8 = *s8;
  410050:	f814 6b01 	ldrb.w	r6, [r4], #1
  410054:	f801 6b01 	strb.w	r6, [r1], #1
        d8++;
        s8++;
        len--;
  410058:	3b01      	subs	r3, #1
    while(len) {
  41005a:	2b00      	cmp	r3, #0
  41005c:	d1f8      	bne.n	410050 <shadow_draw_corner_buf+0x18>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  41005e:	4651      	mov	r1, sl
  410060:	f1ba 0f00 	cmp.w	sl, #0
  410064:	db36      	blt.n	4100d4 <shadow_draw_corner_buf+0x9c>
  410066:	f3c1 014f 	ubfx	r1, r1, #1, #16
  41006a:	188b      	adds	r3, r1, r2
  41006c:	b29b      	uxth	r3, r3
  41006e:	f01a 0401 	ands.w	r4, sl, #1
  410072:	9403      	str	r4, [sp, #12]
  410074:	bf0c      	ite	eq
  410076:	2401      	moveq	r4, #1
  410078:	2400      	movne	r4, #0
  41007a:	1b1b      	subs	r3, r3, r4
  41007c:	3b01      	subs	r3, #1
  41007e:	b29b      	uxth	r3, r3
  410080:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
  410084:	3101      	adds	r1, #1
  410086:	b289      	uxth	r1, r1
  410088:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41008c:	8884      	ldrh	r4, [r0, #4]
  41008e:	8806      	ldrh	r6, [r0, #0]
  410090:	1ba4      	subs	r4, r4, r6
  410092:	b2a4      	uxth	r4, r4
  410094:	3401      	adds	r4, #1
  410096:	b2a4      	uxth	r4, r4
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
  410098:	1b1b      	subs	r3, r3, r4
  41009a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41009e:	88c3      	ldrh	r3, [r0, #6]
  4100a0:	8840      	ldrh	r0, [r0, #2]
  4100a2:	1a1b      	subs	r3, r3, r0
  4100a4:	b29b      	uxth	r3, r3
  4100a6:	3301      	adds	r3, #1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
  4100a8:	fa11 f183 	uxtah	r1, r1, r3
  4100ac:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
  4100b0:	2300      	movs	r3, #0
  4100b2:	a90c      	add	r1, sp, #48	; 0x30
  4100b4:	a805      	add	r0, sp, #20
  4100b6:	4c4d      	ldr	r4, [pc, #308]	; (4101ec <shadow_draw_corner_buf+0x1b4>)
  4100b8:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
  4100ba:	f1ba 0f01 	cmp.w	sl, #1
  4100be:	d00c      	beq.n	4100da <shadow_draw_corner_buf+0xa2>
    else sw = sw_ori >> 1;
  4100c0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
  4100c4:	46a9      	mov	r9, r5
  4100c6:	4628      	mov	r0, r5
  4100c8:	4b49      	ldr	r3, [pc, #292]	; (4101f0 <shadow_draw_corner_buf+0x1b8>)
  4100ca:	4798      	blx	r3
  4100cc:	4604      	mov	r4, r0
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
  4100ce:	4646      	mov	r6, r8
    for(y = 0; y < size; y++) {
  4100d0:	2700      	movs	r7, #0
  4100d2:	e00d      	b.n	4100f0 <shadow_draw_corner_buf+0xb8>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  4100d4:	f10a 0101 	add.w	r1, sl, #1
  4100d8:	e7c5      	b.n	410066 <shadow_draw_corner_buf+0x2e>
    if(sw_ori == 1) sw = 1;
  4100da:	f04f 0a01 	mov.w	sl, #1
  4100de:	e7f1      	b.n	4100c4 <shadow_draw_corner_buf+0x8c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  4100e0:	ea4f 0149 	mov.w	r1, r9, lsl #1
  4100e4:	4630      	mov	r0, r6
  4100e6:	4b43      	ldr	r3, [pc, #268]	; (4101f4 <shadow_draw_corner_buf+0x1bc>)
  4100e8:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  4100ea:	eb06 0649 	add.w	r6, r6, r9, lsl #1
    for(y = 0; y < size; y++) {
  4100ee:	3701      	adds	r7, #1
  4100f0:	42af      	cmp	r7, r5
  4100f2:	da2c      	bge.n	41014e <shadow_draw_corner_buf+0x116>
        _lv_memset_ff(mask_line, size);
  4100f4:	4649      	mov	r1, r9
  4100f6:	4620      	mov	r0, r4
  4100f8:	4b3f      	ldr	r3, [pc, #252]	; (4101f8 <shadow_draw_corner_buf+0x1c0>)
  4100fa:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  4100fc:	ab0e      	add	r3, sp, #56	; 0x38
  4100fe:	f853 bd24 	ldr.w	fp, [r3, #-36]!
  410102:	9300      	str	r3, [sp, #0]
  410104:	b22b      	sxth	r3, r5
  410106:	b23a      	sxth	r2, r7
  410108:	2100      	movs	r1, #0
  41010a:	4620      	mov	r0, r4
  41010c:	47d8      	blx	fp
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  41010e:	2800      	cmp	r0, #0
  410110:	d0e6      	beq.n	4100e0 <shadow_draw_corner_buf+0xa8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
  410112:	7823      	ldrb	r3, [r4, #0]
  410114:	019b      	lsls	r3, r3, #6
  410116:	4650      	mov	r0, sl
  410118:	fb93 f3fa 	sdiv	r3, r3, sl
  41011c:	8033      	strh	r3, [r6, #0]
            for(i = 1; i < size; i++) {
  41011e:	2301      	movs	r3, #1
  410120:	e007      	b.n	410132 <shadow_draw_corner_buf+0xfa>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  410122:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  410126:	441a      	add	r2, r3
  410128:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
  41012c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
            for(i = 1; i < size; i++) {
  410130:	3301      	adds	r3, #1
  410132:	42ab      	cmp	r3, r5
  410134:	dad9      	bge.n	4100ea <shadow_draw_corner_buf+0xb2>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  410136:	5ce2      	ldrb	r2, [r4, r3]
  410138:	18e1      	adds	r1, r4, r3
  41013a:	f811 1c01 	ldrb.w	r1, [r1, #-1]
  41013e:	428a      	cmp	r2, r1
  410140:	d0ef      	beq.n	410122 <shadow_draw_corner_buf+0xea>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
  410142:	0192      	lsls	r2, r2, #6
  410144:	fb92 f2f0 	sdiv	r2, r2, r0
  410148:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
  41014c:	e7f0      	b.n	410130 <shadow_draw_corner_buf+0xf8>
    _lv_mem_buf_release(mask_line);
  41014e:	4620      	mov	r0, r4
  410150:	4b2a      	ldr	r3, [pc, #168]	; (4101fc <shadow_draw_corner_buf+0x1c4>)
  410152:	4798      	blx	r3
    if(sw == 1) {
  410154:	f1ba 0f01 	cmp.w	sl, #1
  410158:	d021      	beq.n	41019e <shadow_draw_corner_buf+0x166>
    shadow_blur_corner(size, sw, sh_buf);
  41015a:	b22c      	sxth	r4, r5
  41015c:	4642      	mov	r2, r8
  41015e:	4651      	mov	r1, sl
  410160:	4620      	mov	r0, r4
  410162:	4b27      	ldr	r3, [pc, #156]	; (410200 <shadow_draw_corner_buf+0x1c8>)
  410164:	4798      	blx	r3
    sw += sw_ori & 1;
  410166:	9b03      	ldr	r3, [sp, #12]
  410168:	4453      	add	r3, sl
  41016a:	b219      	sxth	r1, r3
    if(sw > 1) {
  41016c:	2901      	cmp	r1, #1
  41016e:	dd32      	ble.n	4101d6 <shadow_draw_corner_buf+0x19e>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
  410170:	f8b8 3000 	ldrh.w	r3, [r8]
  410174:	019b      	lsls	r3, r3, #6
  410176:	460e      	mov	r6, r1
  410178:	fb93 f3f1 	sdiv	r3, r3, r1
  41017c:	f8a8 3000 	strh.w	r3, [r8]
        for(i = 1; i < (uint32_t) size * size; i++) {
  410180:	2301      	movs	r3, #1
  410182:	e011      	b.n	4101a8 <shadow_draw_corner_buf+0x170>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
  410184:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  410188:	0992      	lsrs	r2, r2, #6
  41018a:	f808 2003 	strb.w	r2, [r8, r3]
        for(i = 0; i < size * size; i++) {
  41018e:	3301      	adds	r3, #1
  410190:	fb05 f205 	mul.w	r2, r5, r5
  410194:	4293      	cmp	r3, r2
  410196:	dbf5      	blt.n	410184 <shadow_draw_corner_buf+0x14c>
}
  410198:	b00f      	add	sp, #60	; 0x3c
  41019a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41019e:	2300      	movs	r3, #0
  4101a0:	e7f6      	b.n	410190 <shadow_draw_corner_buf+0x158>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  4101a2:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
        for(i = 1; i < (uint32_t) size * size; i++) {
  4101a6:	3301      	adds	r3, #1
  4101a8:	fb09 f209 	mul.w	r2, r9, r9
  4101ac:	4293      	cmp	r3, r2
  4101ae:	d20e      	bcs.n	4101ce <shadow_draw_corner_buf+0x196>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  4101b0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  4101b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  4101b8:	4418      	add	r0, r3
  4101ba:	f838 0010 	ldrh.w	r0, [r8, r0, lsl #1]
  4101be:	4282      	cmp	r2, r0
  4101c0:	d0ef      	beq.n	4101a2 <shadow_draw_corner_buf+0x16a>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
  4101c2:	0192      	lsls	r2, r2, #6
  4101c4:	fb92 f2f6 	sdiv	r2, r2, r6
  4101c8:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
  4101cc:	e7eb      	b.n	4101a6 <shadow_draw_corner_buf+0x16e>
        shadow_blur_corner(size, sw, sh_buf);
  4101ce:	4642      	mov	r2, r8
  4101d0:	4620      	mov	r0, r4
  4101d2:	4b0b      	ldr	r3, [pc, #44]	; (410200 <shadow_draw_corner_buf+0x1c8>)
  4101d4:	4798      	blx	r3
        for(i = 1; i < (uint32_t) size * size; i++) {
  4101d6:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
  4101d8:	fb05 f205 	mul.w	r2, r5, r5
  4101dc:	4293      	cmp	r3, r2
  4101de:	dadb      	bge.n	410198 <shadow_draw_corner_buf+0x160>
        res_buf[x] = sh_buf[x];
  4101e0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  4101e4:	f808 2003 	strb.w	r2, [r8, r3]
    for(x = 0; x < size * size; x++) {
  4101e8:	3301      	adds	r3, #1
  4101ea:	e7f5      	b.n	4101d8 <shadow_draw_corner_buf+0x1a0>
  4101ec:	0040fe2d 	.word	0x0040fe2d
  4101f0:	00416965 	.word	0x00416965
  4101f4:	00416af1 	.word	0x00416af1
  4101f8:	00416b49 	.word	0x00416b49
  4101fc:	00416715 	.word	0x00416715
  410200:	0040fec9 	.word	0x0040fec9

00410204 <draw_shadow>:
{
  410204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410208:	b0a7      	sub	sp, #156	; 0x9c
    if(dsc->shadow_width == 0) return;
  41020a:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
  41020e:	2c00      	cmp	r4, #0
  410210:	f000 83f0 	beq.w	4109f4 <draw_shadow+0x7f0>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
  410214:	f892 702a 	ldrb.w	r7, [r2, #42]	; 0x2a
  410218:	2f02      	cmp	r7, #2
  41021a:	f240 83eb 	bls.w	4109f4 <draw_shadow+0x7f0>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  41021e:	2c01      	cmp	r4, #1
  410220:	d07b      	beq.n	41031a <draw_shadow+0x116>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
  410222:	8806      	ldrh	r6, [r0, #0]
  410224:	8c93      	ldrh	r3, [r2, #36]	; 0x24
  410226:	441e      	add	r6, r3
  410228:	b2b6      	uxth	r6, r6
  41022a:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
  41022e:	eba6 060e 	sub.w	r6, r6, lr
  410232:	b2b6      	uxth	r6, r6
  410234:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
  410238:	8885      	ldrh	r5, [r0, #4]
  41023a:	441d      	add	r5, r3
  41023c:	fa1e f585 	uxtah	r5, lr, r5
  410240:	b2ad      	uxth	r5, r5
  410242:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
  410246:	8843      	ldrh	r3, [r0, #2]
  410248:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
  41024c:	4463      	add	r3, ip
  41024e:	b29b      	uxth	r3, r3
  410250:	eba3 030e 	sub.w	r3, r3, lr
  410254:	b29b      	uxth	r3, r3
  410256:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
  41025a:	f8b0 8006 	ldrh.w	r8, [r0, #6]
  41025e:	44c4      	add	ip, r8
  410260:	fa1e fe8c 	uxtah	lr, lr, ip
  410264:	fa1f fe8e 	uxth.w	lr, lr
  410268:	f8ad e096 	strh.w	lr, [sp, #150]	; 0x96
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  41026c:	46a0      	mov	r8, r4
  41026e:	2c00      	cmp	r4, #0
  410270:	db5c      	blt.n	41032c <draw_shadow+0x128>
  410272:	ea4f 0868 	mov.w	r8, r8, asr #1
  410276:	f1c8 0800 	rsb	r8, r8, #0
  41027a:	fa1f f888 	uxth.w	r8, r8
  41027e:	eb06 0c08 	add.w	ip, r6, r8
  410282:	fa1f fc8c 	uxth.w	ip, ip
  410286:	f10c 3cff 	add.w	ip, ip, #4294967295
  41028a:	f8ad c088 	strh.w	ip, [sp, #136]	; 0x88
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  41028e:	46a4      	mov	ip, r4
  410290:	2c00      	cmp	r4, #0
  410292:	db4e      	blt.n	410332 <draw_shadow+0x12e>
  410294:	f3cc 0c4f 	ubfx	ip, ip, #1, #16
  410298:	4465      	add	r5, ip
  41029a:	b2ad      	uxth	r5, r5
  41029c:	3501      	adds	r5, #1
  41029e:	f8ad 508c 	strh.w	r5, [sp, #140]	; 0x8c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
  4102a2:	eb03 0608 	add.w	r6, r3, r8
  4102a6:	b2b6      	uxth	r6, r6
  4102a8:	3e01      	subs	r6, #1
  4102aa:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
  4102ae:	eb0e 030c 	add.w	r3, lr, ip
  4102b2:	b29b      	uxth	r3, r3
  4102b4:	3301      	adds	r3, #1
  4102b6:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  4102ba:	2ffd      	cmp	r7, #253	; 0xfd
  4102bc:	d900      	bls.n	4102c0 <draw_shadow+0xbc>
  4102be:	27ff      	movs	r7, #255	; 0xff
  4102c0:	4615      	mov	r5, r2
  4102c2:	4688      	mov	r8, r1
  4102c4:	9104      	str	r1, [sp, #16]
  4102c6:	4681      	mov	r9, r0
  4102c8:	9009      	str	r0, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  4102ca:	4b9a      	ldr	r3, [pc, #616]	; (410534 <draw_shadow+0x330>)
  4102cc:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4102ce:	4b9a      	ldr	r3, [pc, #616]	; (410538 <draw_shadow+0x334>)
  4102d0:	4798      	blx	r3
  4102d2:	4606      	mov	r6, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
  4102d4:	4642      	mov	r2, r8
  4102d6:	a922      	add	r1, sp, #136	; 0x88
  4102d8:	a820      	add	r0, sp, #128	; 0x80
  4102da:	4b98      	ldr	r3, [pc, #608]	; (41053c <draw_shadow+0x338>)
  4102dc:	4798      	blx	r3
    if(is_common == false) return;
  4102de:	9006      	str	r0, [sp, #24]
  4102e0:	2800      	cmp	r0, #0
  4102e2:	f000 8387 	beq.w	4109f4 <draw_shadow+0x7f0>
    draw_area.x1 -= disp_area->x1;
  4102e6:	8a31      	ldrh	r1, [r6, #16]
  4102e8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  4102ec:	1a5b      	subs	r3, r3, r1
  4102ee:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  4102f2:	8a72      	ldrh	r2, [r6, #18]
  4102f4:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  4102f8:	1a9b      	subs	r3, r3, r2
  4102fa:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  4102fe:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  410302:	1a5b      	subs	r3, r3, r1
  410304:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  410308:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  41030c:	1a9b      	subs	r3, r3, r2
  41030e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    const uint8_t * s8 = (const uint8_t *)src;
  410312:	4649      	mov	r1, r9
    uint8_t * d8 = (uint8_t *)dst;
  410314:	aa1e      	add	r2, sp, #120	; 0x78
  410316:	2308      	movs	r3, #8
  410318:	e013      	b.n	410342 <draw_shadow+0x13e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  41031a:	6a53      	ldr	r3, [r2, #36]	; 0x24
  41031c:	2b00      	cmp	r3, #0
  41031e:	d180      	bne.n	410222 <draw_shadow+0x1e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
  410320:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
  410324:	2b00      	cmp	r3, #0
  410326:	f73f af7c 	bgt.w	410222 <draw_shadow+0x1e>
  41032a:	e363      	b.n	4109f4 <draw_shadow+0x7f0>
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  41032c:	f104 0801 	add.w	r8, r4, #1
  410330:	e79f      	b.n	410272 <draw_shadow+0x6e>
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  410332:	f104 0c01 	add.w	ip, r4, #1
  410336:	e7ad      	b.n	410294 <draw_shadow+0x90>
        *d8 = *s8;
  410338:	f811 0b01 	ldrb.w	r0, [r1], #1
  41033c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410340:	3b01      	subs	r3, #1
    while(len) {
  410342:	2b00      	cmp	r3, #0
  410344:	d1f8      	bne.n	410338 <draw_shadow+0x134>
    bg_coords.x1 += 1;
  410346:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
  41034a:	3201      	adds	r2, #1
  41034c:	b296      	uxth	r6, r2
  41034e:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    bg_coords.y1 += 1;
  410352:	f8bd 007a 	ldrh.w	r0, [sp, #122]	; 0x7a
  410356:	3001      	adds	r0, #1
  410358:	b280      	uxth	r0, r0
  41035a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    bg_coords.x2 -= 1;
  41035e:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
  410362:	3a01      	subs	r2, #1
  410364:	b292      	uxth	r2, r2
  410366:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
    bg_coords.y2 -= 1;
  41036a:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
  41036e:	3b01      	subs	r3, #1
  410370:	b29b      	uxth	r3, r3
  410372:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    int32_t r_bg = dsc->radius;
  410376:	f9b5 1000 	ldrsh.w	r1, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41037a:	1b92      	subs	r2, r2, r6
  41037c:	b292      	uxth	r2, r2
  41037e:	3201      	adds	r2, #1
  410380:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410382:	1a1e      	subs	r6, r3, r0
  410384:	b2b6      	uxth	r6, r6
  410386:	3601      	adds	r6, #1
  410388:	b236      	sxth	r6, r6
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
  41038a:	42b2      	cmp	r2, r6
  41038c:	da00      	bge.n	410390 <draw_shadow+0x18c>
  41038e:	4616      	mov	r6, r2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
  410390:	1076      	asrs	r6, r6, #1
  410392:	42b1      	cmp	r1, r6
  410394:	dc00      	bgt.n	410398 <draw_shadow+0x194>
    int32_t r_bg = dsc->radius;
  410396:	460e      	mov	r6, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410398:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
  41039c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
  4103a0:	1ad2      	subs	r2, r2, r3
  4103a2:	b292      	uxth	r2, r2
  4103a4:	3201      	adds	r2, #1
  4103a6:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4103a8:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  4103ac:	f8bd 0092 	ldrh.w	r0, [sp, #146]	; 0x92
  4103b0:	1a1b      	subs	r3, r3, r0
  4103b2:	b29b      	uxth	r3, r3
  4103b4:	3301      	adds	r3, #1
  4103b6:	fa0f f883 	sxth.w	r8, r3
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
  4103ba:	4590      	cmp	r8, r2
  4103bc:	dd00      	ble.n	4103c0 <draw_shadow+0x1bc>
  4103be:	4690      	mov	r8, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
  4103c0:	ea4f 0868 	mov.w	r8, r8, asr #1
  4103c4:	4541      	cmp	r1, r8
  4103c6:	dc00      	bgt.n	4103ca <draw_shadow+0x1c6>
    int32_t r_sh = dsc->radius;
  4103c8:	4688      	mov	r8, r1
    int32_t corner_size = sw  + r_sh;
  4103ca:	4444      	add	r4, r8
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
  4103cc:	fb04 f004 	mul.w	r0, r4, r4
  4103d0:	0040      	lsls	r0, r0, #1
  4103d2:	4b5b      	ldr	r3, [pc, #364]	; (410540 <draw_shadow+0x33c>)
  4103d4:	4798      	blx	r3
  4103d6:	4601      	mov	r1, r0
  4103d8:	9007      	str	r0, [sp, #28]
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
  4103da:	fa0f f388 	sxth.w	r3, r8
  4103de:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
  4103e2:	a824      	add	r0, sp, #144	; 0x90
  4103e4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 410550 <draw_shadow+0x34c>
  4103e8:	47c0      	blx	r8
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  4103ea:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
  4103ee:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4103f2:	1a9b      	subs	r3, r3, r2
  4103f4:	b29b      	uxth	r3, r3
  4103f6:	3301      	adds	r3, #1
  4103f8:	b21b      	sxth	r3, r3
  4103fa:	2b00      	cmp	r3, #0
  4103fc:	db21      	blt.n	410442 <draw_shadow+0x23e>
  4103fe:	eb02 0363 	add.w	r3, r2, r3, asr #1
  410402:	b29b      	uxth	r3, r3
  410404:	930d      	str	r3, [sp, #52]	; 0x34
  410406:	fa0f fb83 	sxth.w	fp, r3
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  41040a:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41040e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410412:	1a9b      	subs	r3, r3, r2
  410414:	b29b      	uxth	r3, r3
  410416:	3301      	adds	r3, #1
  410418:	b21b      	sxth	r3, r3
  41041a:	2b00      	cmp	r3, #0
  41041c:	db13      	blt.n	410446 <draw_shadow+0x242>
  41041e:	eb02 0363 	add.w	r3, r2, r3, asr #1
  410422:	b29b      	uxth	r3, r3
  410424:	930e      	str	r3, [sp, #56]	; 0x38
  410426:	b21b      	sxth	r3, r3
  410428:	930c      	str	r3, [sp, #48]	; 0x30
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  41042a:	4b46      	ldr	r3, [pc, #280]	; (410544 <draw_shadow+0x340>)
  41042c:	4798      	blx	r3
  41042e:	b960      	cbnz	r0, 41044a <draw_shadow+0x246>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  410430:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  410432:	2b00      	cmp	r3, #0
  410434:	d17a      	bne.n	41052c <draw_shadow+0x328>
    else if(dsc->shadow_spread != 0) simple_mode = false;
  410436:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  41043a:	b143      	cbz	r3, 41044e <draw_shadow+0x24a>
  41043c:	2300      	movs	r3, #0
  41043e:	9306      	str	r3, [sp, #24]
  410440:	e005      	b.n	41044e <draw_shadow+0x24a>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  410442:	3301      	adds	r3, #1
  410444:	e7db      	b.n	4103fe <draw_shadow+0x1fa>
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  410446:	3301      	adds	r3, #1
  410448:	e7e9      	b.n	41041e <draw_shadow+0x21a>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  41044a:	2300      	movs	r3, #0
  41044c:	9306      	str	r3, [sp, #24]
  41044e:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  410452:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410456:	1ac0      	subs	r0, r0, r3
  410458:	b280      	uxth	r0, r0
  41045a:	3001      	adds	r0, #1
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
  41045c:	b200      	sxth	r0, r0
  41045e:	4b38      	ldr	r3, [pc, #224]	; (410540 <draw_shadow+0x33c>)
  410460:	4798      	blx	r3
  410462:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
  410464:	b233      	sxth	r3, r6
  410466:	461a      	mov	r2, r3
  410468:	9308      	str	r3, [sp, #32]
  41046a:	2301      	movs	r3, #1
  41046c:	a91e      	add	r1, sp, #120	; 0x78
  41046e:	a817      	add	r0, sp, #92	; 0x5c
  410470:	4e35      	ldr	r6, [pc, #212]	; (410548 <draw_shadow+0x344>)
  410472:	47b0      	blx	r6
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  410474:	2100      	movs	r1, #0
  410476:	a817      	add	r0, sp, #92	; 0x5c
  410478:	4b34      	ldr	r3, [pc, #208]	; (41054c <draw_shadow+0x348>)
  41047a:	4798      	blx	r3
  41047c:	900b      	str	r0, [sp, #44]	; 0x2c
    a.x2 = sh_area.x2;
  41047e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  410482:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  410486:	b29b      	uxth	r3, r3
  410488:	b2a6      	uxth	r6, r4
  41048a:	1b9b      	subs	r3, r3, r6
  41048c:	b29b      	uxth	r3, r3
  41048e:	3301      	adds	r3, #1
  410490:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1;
  410494:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  410498:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  41049c:	fa16 f383 	uxtah	r3, r6, r3
  4104a0:	b29b      	uxth	r3, r3
  4104a2:	3b01      	subs	r3, #1
  4104a4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
  4104a8:	9a04      	ldr	r2, [sp, #16]
  4104aa:	a915      	add	r1, sp, #84	; 0x54
  4104ac:	a813      	add	r0, sp, #76	; 0x4c
  4104ae:	4b23      	ldr	r3, [pc, #140]	; (41053c <draw_shadow+0x338>)
  4104b0:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4104b2:	2800      	cmp	r0, #0
  4104b4:	d14e      	bne.n	410554 <draw_shadow+0x350>
    a.x2 = sh_area.x2;
  4104b6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  4104ba:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  4104be:	b29b      	uxth	r3, r3
  4104c0:	1b9b      	subs	r3, r3, r6
  4104c2:	b29b      	uxth	r3, r3
  4104c4:	3301      	adds	r3, #1
  4104c6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y2 - corner_size + 1;
  4104ca:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  4104ce:	b293      	uxth	r3, r2
  4104d0:	1b9b      	subs	r3, r3, r6
  4104d2:	b29b      	uxth	r3, r3
  4104d4:	3301      	adds	r3, #1
  4104d6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  4104da:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4104de:	9a04      	ldr	r2, [sp, #16]
  4104e0:	a915      	add	r1, sp, #84	; 0x54
  4104e2:	a813      	add	r0, sp, #76	; 0x4c
  4104e4:	4b15      	ldr	r3, [pc, #84]	; (41053c <draw_shadow+0x338>)
  4104e6:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4104e8:	2800      	cmp	r0, #0
  4104ea:	f040 80b0 	bne.w	41064e <draw_shadow+0x44a>
    a.x2 = sh_area.x2;
  4104ee:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  4104f2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  4104f6:	b29b      	uxth	r3, r3
  4104f8:	1b9b      	subs	r3, r3, r6
  4104fa:	b29b      	uxth	r3, r3
  4104fc:	3301      	adds	r3, #1
  4104fe:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1 + corner_size;
  410502:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  410506:	4433      	add	r3, r6
  410508:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  41050c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  410510:	1b9b      	subs	r3, r3, r6
  410512:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410516:	9a04      	ldr	r2, [sp, #16]
  410518:	a915      	add	r1, sp, #84	; 0x54
  41051a:	a813      	add	r0, sp, #76	; 0x4c
  41051c:	4b07      	ldr	r3, [pc, #28]	; (41053c <draw_shadow+0x338>)
  41051e:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410520:	2800      	cmp	r0, #0
  410522:	f040 8115 	bne.w	410750 <draw_shadow+0x54c>
  410526:	9907      	ldr	r1, [sp, #28]
  410528:	2000      	movs	r0, #0
  41052a:	e1ab      	b.n	410884 <draw_shadow+0x680>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  41052c:	2300      	movs	r3, #0
  41052e:	9306      	str	r3, [sp, #24]
  410530:	e78d      	b.n	41044e <draw_shadow+0x24a>
  410532:	bf00      	nop
  410534:	004097a1 	.word	0x004097a1
  410538:	00414df5 	.word	0x00414df5
  41053c:	004155b3 	.word	0x004155b3
  410540:	00416965 	.word	0x00416965
  410544:	0040fcad 	.word	0x0040fcad
  410548:	0040fe2d 	.word	0x0040fe2d
  41054c:	0040fbb1 	.word	0x0040fbb1
  410550:	00410039 	.word	0x00410039
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410554:	9a08      	ldr	r2, [sp, #32]
  410556:	a91e      	add	r1, sp, #120	; 0x78
  410558:	a815      	add	r0, sp, #84	; 0x54
  41055a:	4ba2      	ldr	r3, [pc, #648]	; (4107e4 <draw_shadow+0x5e0>)
  41055c:	4798      	blx	r3
  41055e:	2800      	cmp	r0, #0
  410560:	d1a9      	bne.n	4104b6 <draw_shadow+0x2b2>
        if(ca.y2 > h_half) ca.y2 = h_half;
  410562:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  410566:	459b      	cmp	fp, r3
  410568:	da01      	bge.n	41056e <draw_shadow+0x36a>
  41056a:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  41056e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  410572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410574:	429a      	cmp	r2, r3
  410576:	db03      	blt.n	410580 <draw_shadow+0x37c>
  410578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41057a:	3301      	adds	r3, #1
  41057c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410580:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  410584:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410588:	b291      	uxth	r1, r2
  41058a:	1a5b      	subs	r3, r3, r1
  41058c:	b29b      	uxth	r3, r3
  41058e:	3301      	adds	r3, #1
  410590:	b21b      	sxth	r3, r3
  410592:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410594:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410598:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  41059c:	b288      	uxth	r0, r1
  41059e:	1a1b      	subs	r3, r3, r0
  4105a0:	b29b      	uxth	r3, r3
  4105a2:	3301      	adds	r3, #1
  4105a4:	b21b      	sxth	r3, r3
  4105a6:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4105a8:	2b00      	cmp	r3, #0
  4105aa:	dd84      	ble.n	4104b6 <draw_shadow+0x2b2>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  4105ac:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  4105b0:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  4105b4:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  4105b8:	eba2 0808 	sub.w	r8, r2, r8
  4105bc:	fb08 1804 	mla	r8, r8, r4, r1
  4105c0:	9b07      	ldr	r3, [sp, #28]
  4105c2:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4105c4:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4105c6:	aa11      	add	r2, sp, #68	; 0x44
  4105c8:	2308      	movs	r3, #8
    while(len) {
  4105ca:	b12b      	cbz	r3, 4105d8 <draw_shadow+0x3d4>
        *d8 = *s8;
  4105cc:	f811 0b01 	ldrb.w	r0, [r1], #1
  4105d0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4105d4:	3b01      	subs	r3, #1
  4105d6:	e7f8      	b.n	4105ca <draw_shadow+0x3c6>
            fa.y2 = fa.y1;
  4105d8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4105dc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4105e0:	f04f 0900 	mov.w	r9, #0
  4105e4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  4105e8:	46a3      	mov	fp, r4
  4105ea:	46f2      	mov	sl, lr
  4105ec:	e017      	b.n	41061e <draw_shadow+0x41a>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4105ee:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4105f2:	9302      	str	r3, [sp, #8]
  4105f4:	9701      	str	r7, [sp, #4]
  4105f6:	9000      	str	r0, [sp, #0]
  4105f8:	9b05      	ldr	r3, [sp, #20]
  4105fa:	8c2a      	ldrh	r2, [r5, #32]
  4105fc:	a911      	add	r1, sp, #68	; 0x44
  4105fe:	9804      	ldr	r0, [sp, #16]
  410600:	4c79      	ldr	r4, [pc, #484]	; (4107e8 <draw_shadow+0x5e4>)
  410602:	47a0      	blx	r4
                fa.y1++;
  410604:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410608:	3301      	adds	r3, #1
  41060a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  41060e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410612:	3301      	adds	r3, #1
  410614:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  410618:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  41061a:	f109 0901 	add.w	r9, r9, #1
  41061e:	45d1      	cmp	r9, sl
  410620:	da11      	bge.n	410646 <draw_shadow+0x442>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410624:	4641      	mov	r1, r8
  410626:	9c05      	ldr	r4, [sp, #20]
  410628:	4620      	mov	r0, r4
  41062a:	4b70      	ldr	r3, [pc, #448]	; (4107ec <draw_shadow+0x5e8>)
  41062c:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  41062e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410630:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410634:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410638:	4620      	mov	r0, r4
  41063a:	4c6d      	ldr	r4, [pc, #436]	; (4107f0 <draw_shadow+0x5ec>)
  41063c:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41063e:	2801      	cmp	r0, #1
  410640:	d1d5      	bne.n	4105ee <draw_shadow+0x3ea>
  410642:	2002      	movs	r0, #2
  410644:	e7d3      	b.n	4105ee <draw_shadow+0x3ea>
  410646:	465c      	mov	r4, fp
  410648:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  41064c:	e733      	b.n	4104b6 <draw_shadow+0x2b2>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41064e:	9a08      	ldr	r2, [sp, #32]
  410650:	a91e      	add	r1, sp, #120	; 0x78
  410652:	a815      	add	r0, sp, #84	; 0x54
  410654:	4b63      	ldr	r3, [pc, #396]	; (4107e4 <draw_shadow+0x5e0>)
  410656:	4798      	blx	r3
  410658:	2800      	cmp	r0, #0
  41065a:	f47f af48 	bne.w	4104ee <draw_shadow+0x2ea>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  41065e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410662:	459b      	cmp	fp, r3
  410664:	db03      	blt.n	41066e <draw_shadow+0x46a>
  410666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410668:	3301      	adds	r3, #1
  41066a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  41066e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  410672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410674:	429a      	cmp	r2, r3
  410676:	db03      	blt.n	410680 <draw_shadow+0x47c>
  410678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41067a:	3301      	adds	r3, #1
  41067c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410680:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410684:	b293      	uxth	r3, r2
  410686:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
  41068a:	1a5b      	subs	r3, r3, r1
  41068c:	b29b      	uxth	r3, r3
  41068e:	3301      	adds	r3, #1
  410690:	b21b      	sxth	r3, r3
  410692:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410694:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410698:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  41069c:	b288      	uxth	r0, r1
  41069e:	1a1b      	subs	r3, r3, r0
  4106a0:	b29b      	uxth	r3, r3
  4106a2:	3301      	adds	r3, #1
  4106a4:	b21b      	sxth	r3, r3
  4106a6:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4106a8:	2b00      	cmp	r3, #0
  4106aa:	f77f af20 	ble.w	4104ee <draw_shadow+0x2ea>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  4106ae:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  4106b2:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  4106b6:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  4106ba:	eba8 0802 	sub.w	r8, r8, r2
  4106be:	fb08 1804 	mla	r8, r8, r4, r1
  4106c2:	9b07      	ldr	r3, [sp, #28]
  4106c4:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4106c6:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4106c8:	aa11      	add	r2, sp, #68	; 0x44
  4106ca:	2308      	movs	r3, #8
    while(len) {
  4106cc:	b12b      	cbz	r3, 4106da <draw_shadow+0x4d6>
        *d8 = *s8;
  4106ce:	f811 0b01 	ldrb.w	r0, [r1], #1
  4106d2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4106d6:	3b01      	subs	r3, #1
  4106d8:	e7f8      	b.n	4106cc <draw_shadow+0x4c8>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  4106da:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4106de:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  4106e2:	f04f 0900 	mov.w	r9, #0
  4106e6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  4106ea:	46a3      	mov	fp, r4
  4106ec:	46f2      	mov	sl, lr
  4106ee:	e017      	b.n	410720 <draw_shadow+0x51c>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4106f0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4106f4:	9302      	str	r3, [sp, #8]
  4106f6:	9701      	str	r7, [sp, #4]
  4106f8:	9000      	str	r0, [sp, #0]
  4106fa:	9b05      	ldr	r3, [sp, #20]
  4106fc:	8c2a      	ldrh	r2, [r5, #32]
  4106fe:	a911      	add	r1, sp, #68	; 0x44
  410700:	9804      	ldr	r0, [sp, #16]
  410702:	4c39      	ldr	r4, [pc, #228]	; (4107e8 <draw_shadow+0x5e4>)
  410704:	47a0      	blx	r4
                fa.y1--;
  410706:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41070a:	3b01      	subs	r3, #1
  41070c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  410710:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410714:	3b01      	subs	r3, #1
  410716:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  41071a:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  41071c:	f109 0901 	add.w	r9, r9, #1
  410720:	45d1      	cmp	r9, sl
  410722:	da11      	bge.n	410748 <draw_shadow+0x544>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410726:	4641      	mov	r1, r8
  410728:	9c05      	ldr	r4, [sp, #20]
  41072a:	4620      	mov	r0, r4
  41072c:	4b2f      	ldr	r3, [pc, #188]	; (4107ec <draw_shadow+0x5e8>)
  41072e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410732:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410736:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41073a:	4620      	mov	r0, r4
  41073c:	4c2c      	ldr	r4, [pc, #176]	; (4107f0 <draw_shadow+0x5ec>)
  41073e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410740:	2801      	cmp	r0, #1
  410742:	d1d5      	bne.n	4106f0 <draw_shadow+0x4ec>
  410744:	2002      	movs	r0, #2
  410746:	e7d3      	b.n	4106f0 <draw_shadow+0x4ec>
  410748:	465c      	mov	r4, fp
  41074a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  41074e:	e6ce      	b.n	4104ee <draw_shadow+0x2ea>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410750:	9a08      	ldr	r2, [sp, #32]
  410752:	a91e      	add	r1, sp, #120	; 0x78
  410754:	a815      	add	r0, sp, #84	; 0x54
  410756:	4b23      	ldr	r3, [pc, #140]	; (4107e4 <draw_shadow+0x5e0>)
  410758:	4798      	blx	r3
  41075a:	2800      	cmp	r0, #0
  41075c:	f47f aee3 	bne.w	410526 <draw_shadow+0x322>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
  410760:	9b06      	ldr	r3, [sp, #24]
  410762:	b14b      	cbz	r3, 410778 <draw_shadow+0x574>
  410764:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410766:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41076a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  41076e:	4293      	cmp	r3, r2
  410770:	bfb8      	it	lt
  410772:	4613      	movlt	r3, r2
  410774:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  410778:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41077c:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  410780:	b291      	uxth	r1, r2
  410782:	1a5b      	subs	r3, r3, r1
  410784:	b29b      	uxth	r3, r3
  410786:	3301      	adds	r3, #1
  410788:	b21b      	sxth	r3, r3
  41078a:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  41078c:	2b00      	cmp	r3, #0
  41078e:	f77f aeca 	ble.w	410526 <draw_shadow+0x322>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410792:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  410796:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  41079a:	ebaa 0a03 	sub.w	sl, sl, r3
  41079e:	fa1f fa8a 	uxth.w	sl, sl
  4107a2:	f10a 0a01 	add.w	sl, sl, #1
  4107a6:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  4107aa:	1e63      	subs	r3, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  4107ac:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  4107b0:	1a52      	subs	r2, r2, r1
  4107b2:	fb03 2304 	mla	r3, r3, r4, r2
  4107b6:	9a07      	ldr	r2, [sp, #28]
  4107b8:	18d3      	adds	r3, r2, r3
  4107ba:	930e      	str	r3, [sp, #56]	; 0x38
    const uint8_t * s8 = (const uint8_t *)src;
  4107bc:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4107be:	aa11      	add	r2, sp, #68	; 0x44
  4107c0:	2308      	movs	r3, #8
    while(len) {
  4107c2:	b12b      	cbz	r3, 4107d0 <draw_shadow+0x5cc>
        *d8 = *s8;
  4107c4:	f811 0b01 	ldrb.w	r0, [r1], #1
  4107c8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4107cc:	3b01      	subs	r3, #1
  4107ce:	e7f8      	b.n	4107c2 <draw_shadow+0x5be>
            fa.y2 = fa.y1;
  4107d0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4107d4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4107d8:	f04f 0800 	mov.w	r8, #0
  4107dc:	970f      	str	r7, [sp, #60]	; 0x3c
  4107de:	46a1      	mov	r9, r4
  4107e0:	9c06      	ldr	r4, [sp, #24]
  4107e2:	e02a      	b.n	41083a <draw_shadow+0x636>
  4107e4:	00415829 	.word	0x00415829
  4107e8:	0040c871 	.word	0x0040c871
  4107ec:	004167cd 	.word	0x004167cd
  4107f0:	0040fbe5 	.word	0x0040fbe5
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4107f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4107f6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4107fa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4107fe:	9805      	ldr	r0, [sp, #20]
  410800:	4fbc      	ldr	r7, [pc, #752]	; (410af4 <draw_shadow+0x8f0>)
  410802:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410804:	2801      	cmp	r0, #1
  410806:	d023      	beq.n	410850 <draw_shadow+0x64c>
                _lv_blend_fill(clip, &fa,
  410808:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  41080c:	9302      	str	r3, [sp, #8]
  41080e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  410812:	9301      	str	r3, [sp, #4]
  410814:	9000      	str	r0, [sp, #0]
  410816:	9b05      	ldr	r3, [sp, #20]
  410818:	8c2a      	ldrh	r2, [r5, #32]
  41081a:	a911      	add	r1, sp, #68	; 0x44
  41081c:	9804      	ldr	r0, [sp, #16]
  41081e:	4fb6      	ldr	r7, [pc, #728]	; (410af8 <draw_shadow+0x8f4>)
  410820:	47b8      	blx	r7
                fa.y1++;
  410822:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410826:	3301      	adds	r3, #1
  410828:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  41082c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410830:	3301      	adds	r3, #1
  410832:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410836:	f108 0801 	add.w	r8, r8, #1
  41083a:	45d0      	cmp	r8, sl
  41083c:	da0a      	bge.n	410854 <draw_shadow+0x650>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  41083e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410840:	990e      	ldr	r1, [sp, #56]	; 0x38
  410842:	9805      	ldr	r0, [sp, #20]
  410844:	4bad      	ldr	r3, [pc, #692]	; (410afc <draw_shadow+0x8f8>)
  410846:	4798      	blx	r3
                if(simple_mode) {
  410848:	2c00      	cmp	r4, #0
  41084a:	d0d3      	beq.n	4107f4 <draw_shadow+0x5f0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  41084c:	2002      	movs	r0, #2
  41084e:	e7db      	b.n	410808 <draw_shadow+0x604>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410850:	2002      	movs	r0, #2
  410852:	e7d9      	b.n	410808 <draw_shadow+0x604>
  410854:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  410856:	464c      	mov	r4, r9
  410858:	e665      	b.n	410526 <draw_shadow+0x322>
        for(x = 0; x < corner_size / 2; x++) {
  41085a:	ebb3 0f62 	cmp.w	r3, r2, asr #1
  41085e:	da0f      	bge.n	410880 <draw_shadow+0x67c>
            lv_opa_t tmp = sh_buf_tmp[x];
  410860:	f811 e003 	ldrb.w	lr, [r1, r3]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
  410864:	1ae2      	subs	r2, r4, r3
  410866:	3a01      	subs	r2, #1
  410868:	f811 c002 	ldrb.w	ip, [r1, r2]
  41086c:	f801 c003 	strb.w	ip, [r1, r3]
            sh_buf_tmp[corner_size - x - 1] = tmp;
  410870:	f801 e002 	strb.w	lr, [r1, r2]
        for(x = 0; x < corner_size / 2; x++) {
  410874:	3301      	adds	r3, #1
  410876:	4622      	mov	r2, r4
  410878:	2c00      	cmp	r4, #0
  41087a:	daee      	bge.n	41085a <draw_shadow+0x656>
  41087c:	1c62      	adds	r2, r4, #1
  41087e:	e7ec      	b.n	41085a <draw_shadow+0x656>
        sh_buf_tmp += corner_size;
  410880:	4421      	add	r1, r4
    for(y = 0; y < corner_size; y++) {
  410882:	3001      	adds	r0, #1
  410884:	42a0      	cmp	r0, r4
  410886:	da01      	bge.n	41088c <draw_shadow+0x688>
  410888:	2300      	movs	r3, #0
  41088a:	e7f4      	b.n	410876 <draw_shadow+0x672>
    a.x1 = sh_area.x1;
  41088c:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  410890:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  410894:	fa16 f383 	uxtah	r3, r6, r3
  410898:	b29b      	uxth	r3, r3
  41089a:	3b01      	subs	r3, #1
  41089c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  4108a0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4108a4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  4108a8:	fa16 f383 	uxtah	r3, r6, r3
  4108ac:	b29b      	uxth	r3, r3
  4108ae:	3b01      	subs	r3, #1
  4108b0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4108b4:	9a04      	ldr	r2, [sp, #16]
  4108b6:	a915      	add	r1, sp, #84	; 0x54
  4108b8:	a813      	add	r0, sp, #76	; 0x4c
  4108ba:	4b91      	ldr	r3, [pc, #580]	; (410b00 <draw_shadow+0x8fc>)
  4108bc:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4108be:	2800      	cmp	r0, #0
  4108c0:	f040 809b 	bne.w	4109fa <draw_shadow+0x7f6>
    a.x1 = sh_area.x1;
  4108c4:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  4108c8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  4108cc:	fa16 f383 	uxtah	r3, r6, r3
  4108d0:	b29b      	uxth	r3, r3
  4108d2:	3b01      	subs	r3, #1
  4108d4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  4108d8:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  4108dc:	b293      	uxth	r3, r2
  4108de:	1b9b      	subs	r3, r3, r6
  4108e0:	b29b      	uxth	r3, r3
  4108e2:	3301      	adds	r3, #1
  4108e4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  4108e8:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4108ec:	9a04      	ldr	r2, [sp, #16]
  4108ee:	a915      	add	r1, sp, #84	; 0x54
  4108f0:	a813      	add	r0, sp, #76	; 0x4c
  4108f2:	4b83      	ldr	r3, [pc, #524]	; (410b00 <draw_shadow+0x8fc>)
  4108f4:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4108f6:	2800      	cmp	r0, #0
  4108f8:	f040 810a 	bne.w	410b10 <draw_shadow+0x90c>
    a.x1 = sh_area.x1;
  4108fc:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  410900:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  410904:	fa16 f383 	uxtah	r3, r6, r3
  410908:	b29b      	uxth	r3, r3
  41090a:	3b01      	subs	r3, #1
  41090c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  410910:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  410914:	4433      	add	r3, r6
  410916:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  41091a:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  41091e:	1b9b      	subs	r3, r3, r6
  410920:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410924:	9a04      	ldr	r2, [sp, #16]
  410926:	a915      	add	r1, sp, #84	; 0x54
  410928:	a813      	add	r0, sp, #76	; 0x4c
  41092a:	4b75      	ldr	r3, [pc, #468]	; (410b00 <draw_shadow+0x8fc>)
  41092c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41092e:	2800      	cmp	r0, #0
  410930:	f040 816c 	bne.w	410c0c <draw_shadow+0xa08>
    a.x1 = sh_area.x1 + corner_size;
  410934:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410938:	4433      	add	r3, r6
  41093a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  41093e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410942:	1b9b      	subs	r3, r3, r6
  410944:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  410948:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  41094c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y1 + corner_size - 1;
  410950:	fa16 f383 	uxtah	r3, r6, r3
  410954:	b29b      	uxth	r3, r3
  410956:	3b01      	subs	r3, #1
  410958:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41095c:	9a04      	ldr	r2, [sp, #16]
  41095e:	a915      	add	r1, sp, #84	; 0x54
  410960:	a813      	add	r0, sp, #76	; 0x4c
  410962:	4b67      	ldr	r3, [pc, #412]	; (410b00 <draw_shadow+0x8fc>)
  410964:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410966:	2800      	cmp	r0, #0
  410968:	f040 81d1 	bne.w	410d0e <draw_shadow+0xb0a>
    a.x1 = sh_area.x1 + corner_size;
  41096c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410970:	4433      	add	r3, r6
  410972:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  410976:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41097a:	1b9b      	subs	r3, r3, r6
  41097c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  410980:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  410984:	b293      	uxth	r3, r2
  410986:	1b9b      	subs	r3, r3, r6
  410988:	b29b      	uxth	r3, r3
  41098a:	3301      	adds	r3, #1
  41098c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  410990:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410994:	9a04      	ldr	r2, [sp, #16]
  410996:	a915      	add	r1, sp, #84	; 0x54
  410998:	a813      	add	r0, sp, #76	; 0x4c
  41099a:	4b59      	ldr	r3, [pc, #356]	; (410b00 <draw_shadow+0x8fc>)
  41099c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41099e:	2800      	cmp	r0, #0
  4109a0:	f040 8245 	bne.w	410e2e <draw_shadow+0xc2a>
    a.x1 = sh_area.x1 + corner_size;
  4109a4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4109a8:	4433      	add	r3, r6
  4109aa:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  4109ae:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4109b2:	1b9b      	subs	r3, r3, r6
  4109b4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  4109b8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  4109bc:	4433      	add	r3, r6
  4109be:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  4109c2:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4109c6:	1b9e      	subs	r6, r3, r6
  4109c8:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4109cc:	9a04      	ldr	r2, [sp, #16]
  4109ce:	a915      	add	r1, sp, #84	; 0x54
  4109d0:	a813      	add	r0, sp, #76	; 0x4c
  4109d2:	4b4b      	ldr	r3, [pc, #300]	; (410b00 <draw_shadow+0x8fc>)
  4109d4:	4798      	blx	r3
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4109d6:	9b06      	ldr	r3, [sp, #24]
  4109d8:	f083 0301 	eor.w	r3, r3, #1
  4109dc:	b2db      	uxtb	r3, r3
  4109de:	4218      	tst	r0, r3
  4109e0:	f040 82a9 	bne.w	410f36 <draw_shadow+0xd32>
    lv_draw_mask_remove_id(mask_rout_id);
  4109e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4109e6:	4b47      	ldr	r3, [pc, #284]	; (410b04 <draw_shadow+0x900>)
  4109e8:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  4109ea:	9805      	ldr	r0, [sp, #20]
  4109ec:	4c46      	ldr	r4, [pc, #280]	; (410b08 <draw_shadow+0x904>)
  4109ee:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
  4109f0:	9807      	ldr	r0, [sp, #28]
  4109f2:	47a0      	blx	r4
}
  4109f4:	b027      	add	sp, #156	; 0x9c
  4109f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4109fa:	9a08      	ldr	r2, [sp, #32]
  4109fc:	a91e      	add	r1, sp, #120	; 0x78
  4109fe:	a815      	add	r0, sp, #84	; 0x54
  410a00:	4b42      	ldr	r3, [pc, #264]	; (410b0c <draw_shadow+0x908>)
  410a02:	4798      	blx	r3
  410a04:	2800      	cmp	r0, #0
  410a06:	f47f af5d 	bne.w	4108c4 <draw_shadow+0x6c0>
        if(ca.y2 > h_half) ca.y2 = h_half;
  410a0a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  410a0e:	459b      	cmp	fp, r3
  410a10:	da01      	bge.n	410a16 <draw_shadow+0x812>
  410a12:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x2 > w_half) ca.x2 = w_half;
  410a16:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410a1a:	990c      	ldr	r1, [sp, #48]	; 0x30
  410a1c:	4299      	cmp	r1, r3
  410a1e:	da01      	bge.n	410a24 <draw_shadow+0x820>
  410a20:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
  410a24:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  410a28:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410a2c:	b291      	uxth	r1, r2
  410a2e:	1a5b      	subs	r3, r3, r1
  410a30:	b29b      	uxth	r3, r3
  410a32:	3301      	adds	r3, #1
  410a34:	b21b      	sxth	r3, r3
  410a36:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410a38:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410a3c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  410a40:	b288      	uxth	r0, r1
  410a42:	1a1b      	subs	r3, r3, r0
  410a44:	b29b      	uxth	r3, r3
  410a46:	3301      	adds	r3, #1
  410a48:	b21b      	sxth	r3, r3
  410a4a:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410a4c:	2b00      	cmp	r3, #0
  410a4e:	f77f af39 	ble.w	4108c4 <draw_shadow+0x6c0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  410a52:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410a56:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410a5a:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  410a5e:	eba2 0808 	sub.w	r8, r2, r8
  410a62:	fb08 1804 	mla	r8, r8, r4, r1
  410a66:	9b07      	ldr	r3, [sp, #28]
  410a68:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410a6a:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410a6c:	aa11      	add	r2, sp, #68	; 0x44
  410a6e:	2308      	movs	r3, #8
    while(len) {
  410a70:	b12b      	cbz	r3, 410a7e <draw_shadow+0x87a>
        *d8 = *s8;
  410a72:	f811 0b01 	ldrb.w	r0, [r1], #1
  410a76:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410a7a:	3b01      	subs	r3, #1
  410a7c:	e7f8      	b.n	410a70 <draw_shadow+0x86c>
            fa.y2 = fa.y1;
  410a7e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410a82:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410a86:	f04f 0900 	mov.w	r9, #0
  410a8a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  410a8e:	46a3      	mov	fp, r4
  410a90:	46f2      	mov	sl, lr
  410a92:	e017      	b.n	410ac4 <draw_shadow+0x8c0>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410a94:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410a98:	9302      	str	r3, [sp, #8]
  410a9a:	9701      	str	r7, [sp, #4]
  410a9c:	9000      	str	r0, [sp, #0]
  410a9e:	9b05      	ldr	r3, [sp, #20]
  410aa0:	8c2a      	ldrh	r2, [r5, #32]
  410aa2:	a911      	add	r1, sp, #68	; 0x44
  410aa4:	9804      	ldr	r0, [sp, #16]
  410aa6:	4c14      	ldr	r4, [pc, #80]	; (410af8 <draw_shadow+0x8f4>)
  410aa8:	47a0      	blx	r4
                fa.y1++;
  410aaa:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410aae:	3301      	adds	r3, #1
  410ab0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  410ab4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410ab8:	3301      	adds	r3, #1
  410aba:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  410abe:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  410ac0:	f109 0901 	add.w	r9, r9, #1
  410ac4:	45d1      	cmp	r9, sl
  410ac6:	da11      	bge.n	410aec <draw_shadow+0x8e8>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410aca:	4641      	mov	r1, r8
  410acc:	9c05      	ldr	r4, [sp, #20]
  410ace:	4620      	mov	r0, r4
  410ad0:	4b0a      	ldr	r3, [pc, #40]	; (410afc <draw_shadow+0x8f8>)
  410ad2:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410ad6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410ada:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410ade:	4620      	mov	r0, r4
  410ae0:	4c04      	ldr	r4, [pc, #16]	; (410af4 <draw_shadow+0x8f0>)
  410ae2:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410ae4:	2801      	cmp	r0, #1
  410ae6:	d1d5      	bne.n	410a94 <draw_shadow+0x890>
  410ae8:	2002      	movs	r0, #2
  410aea:	e7d3      	b.n	410a94 <draw_shadow+0x890>
  410aec:	465c      	mov	r4, fp
  410aee:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  410af2:	e6e7      	b.n	4108c4 <draw_shadow+0x6c0>
  410af4:	0040fbe5 	.word	0x0040fbe5
  410af8:	0040c871 	.word	0x0040c871
  410afc:	004167cd 	.word	0x004167cd
  410b00:	004155b3 	.word	0x004155b3
  410b04:	0040fc35 	.word	0x0040fc35
  410b08:	00416715 	.word	0x00416715
  410b0c:	00415829 	.word	0x00415829
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410b10:	9a08      	ldr	r2, [sp, #32]
  410b12:	a91e      	add	r1, sp, #120	; 0x78
  410b14:	a815      	add	r0, sp, #84	; 0x54
  410b16:	4bb9      	ldr	r3, [pc, #740]	; (410dfc <draw_shadow+0xbf8>)
  410b18:	4798      	blx	r3
  410b1a:	2800      	cmp	r0, #0
  410b1c:	f47f aeee 	bne.w	4108fc <draw_shadow+0x6f8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  410b20:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410b24:	459b      	cmp	fp, r3
  410b26:	db03      	blt.n	410b30 <draw_shadow+0x92c>
  410b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410b2a:	3301      	adds	r3, #1
  410b2c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x2 > w_half) ca.x2 = w_half;
  410b30:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410b34:	990c      	ldr	r1, [sp, #48]	; 0x30
  410b36:	4299      	cmp	r1, r3
  410b38:	da01      	bge.n	410b3e <draw_shadow+0x93a>
  410b3a:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410b3e:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410b42:	fa1f fb82 	uxth.w	fp, r2
  410b46:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  410b4a:	ebab 0b03 	sub.w	fp, fp, r3
  410b4e:	fa1f fb8b 	uxth.w	fp, fp
  410b52:	f10b 0b01 	add.w	fp, fp, #1
  410b56:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410b5a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410b5e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  410b62:	b288      	uxth	r0, r1
  410b64:	1a1b      	subs	r3, r3, r0
  410b66:	b29b      	uxth	r3, r3
  410b68:	3301      	adds	r3, #1
  410b6a:	b21b      	sxth	r3, r3
  410b6c:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410b6e:	2b00      	cmp	r3, #0
  410b70:	f77f aec4 	ble.w	4108fc <draw_shadow+0x6f8>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  410b74:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410b78:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410b7c:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  410b80:	eba8 0802 	sub.w	r8, r8, r2
  410b84:	fb08 1804 	mla	r8, r8, r4, r1
  410b88:	9b07      	ldr	r3, [sp, #28]
  410b8a:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410b8c:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410b8e:	aa11      	add	r2, sp, #68	; 0x44
  410b90:	2308      	movs	r3, #8
    while(len) {
  410b92:	b12b      	cbz	r3, 410ba0 <draw_shadow+0x99c>
        *d8 = *s8;
  410b94:	f811 0b01 	ldrb.w	r0, [r1], #1
  410b98:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410b9c:	3b01      	subs	r3, #1
  410b9e:	e7f8      	b.n	410b92 <draw_shadow+0x98e>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  410ba0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410ba4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  410ba8:	f04f 0900 	mov.w	r9, #0
  410bac:	46a2      	mov	sl, r4
  410bae:	e017      	b.n	410be0 <draw_shadow+0x9dc>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410bb0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410bb4:	9302      	str	r3, [sp, #8]
  410bb6:	9701      	str	r7, [sp, #4]
  410bb8:	9000      	str	r0, [sp, #0]
  410bba:	9b05      	ldr	r3, [sp, #20]
  410bbc:	8c2a      	ldrh	r2, [r5, #32]
  410bbe:	a911      	add	r1, sp, #68	; 0x44
  410bc0:	9804      	ldr	r0, [sp, #16]
  410bc2:	4c8f      	ldr	r4, [pc, #572]	; (410e00 <draw_shadow+0xbfc>)
  410bc4:	47a0      	blx	r4
                fa.y1--;
  410bc6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410bca:	3b01      	subs	r3, #1
  410bcc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  410bd0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410bd4:	3b01      	subs	r3, #1
  410bd6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  410bda:	44d0      	add	r8, sl
            for(y = 0; y < h; y++) {
  410bdc:	f109 0901 	add.w	r9, r9, #1
  410be0:	45d9      	cmp	r9, fp
  410be2:	da11      	bge.n	410c08 <draw_shadow+0xa04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410be6:	4641      	mov	r1, r8
  410be8:	9c05      	ldr	r4, [sp, #20]
  410bea:	4620      	mov	r0, r4
  410bec:	4b85      	ldr	r3, [pc, #532]	; (410e04 <draw_shadow+0xc00>)
  410bee:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410bf2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410bf6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410bfa:	4620      	mov	r0, r4
  410bfc:	4c82      	ldr	r4, [pc, #520]	; (410e08 <draw_shadow+0xc04>)
  410bfe:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410c00:	2801      	cmp	r0, #1
  410c02:	d1d5      	bne.n	410bb0 <draw_shadow+0x9ac>
  410c04:	2002      	movs	r0, #2
  410c06:	e7d3      	b.n	410bb0 <draw_shadow+0x9ac>
  410c08:	4654      	mov	r4, sl
  410c0a:	e677      	b.n	4108fc <draw_shadow+0x6f8>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410c0c:	9a08      	ldr	r2, [sp, #32]
  410c0e:	a91e      	add	r1, sp, #120	; 0x78
  410c10:	a815      	add	r0, sp, #84	; 0x54
  410c12:	4b7a      	ldr	r3, [pc, #488]	; (410dfc <draw_shadow+0xbf8>)
  410c14:	4798      	blx	r3
  410c16:	2800      	cmp	r0, #0
  410c18:	f47f ae8c 	bne.w	410934 <draw_shadow+0x730>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
  410c1c:	9b06      	ldr	r3, [sp, #24]
  410c1e:	b14b      	cbz	r3, 410c34 <draw_shadow+0xa30>
  410c20:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410c26:	f9b2 2000 	ldrsh.w	r2, [r2]
  410c2a:	4293      	cmp	r3, r2
  410c2c:	bfa8      	it	ge
  410c2e:	4613      	movge	r3, r2
  410c30:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  410c34:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
  410c38:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  410c3c:	b29a      	uxth	r2, r3
  410c3e:	ebab 0b02 	sub.w	fp, fp, r2
  410c42:	fa1f fb8b 	uxth.w	fp, fp
  410c46:	f10b 0b01 	add.w	fp, fp, #1
  410c4a:	fa0f fb8b 	sxth.w	fp, fp
        if(w > 0) {
  410c4e:	f1bb 0f00 	cmp.w	fp, #0
  410c52:	f77f ae6f 	ble.w	410934 <draw_shadow+0x730>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410c56:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  410c5a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
  410c5e:	ebaa 0a02 	sub.w	sl, sl, r2
  410c62:	fa1f fa8a 	uxth.w	sl, sl
  410c66:	f10a 0a01 	add.w	sl, sl, #1
  410c6a:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  410c6e:	1e62      	subs	r2, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  410c70:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  410c74:	1a59      	subs	r1, r3, r1
  410c76:	fb02 1304 	mla	r3, r2, r4, r1
  410c7a:	9a07      	ldr	r2, [sp, #28]
  410c7c:	18d3      	adds	r3, r2, r3
  410c7e:	930a      	str	r3, [sp, #40]	; 0x28
    const uint8_t * s8 = (const uint8_t *)src;
  410c80:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410c82:	aa11      	add	r2, sp, #68	; 0x44
  410c84:	2308      	movs	r3, #8
    while(len) {
  410c86:	b12b      	cbz	r3, 410c94 <draw_shadow+0xa90>
        *d8 = *s8;
  410c88:	f811 0b01 	ldrb.w	r0, [r1], #1
  410c8c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410c90:	3b01      	subs	r3, #1
  410c92:	e7f8      	b.n	410c86 <draw_shadow+0xa82>
            fa.y2 = fa.y1;
  410c94:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410c98:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410c9c:	f04f 0800 	mov.w	r8, #0
  410ca0:	970c      	str	r7, [sp, #48]	; 0x30
  410ca2:	46a1      	mov	r9, r4
  410ca4:	9c06      	ldr	r4, [sp, #24]
  410ca6:	e022      	b.n	410cee <draw_shadow+0xaea>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410ca8:	465b      	mov	r3, fp
  410caa:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410cae:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410cb2:	9805      	ldr	r0, [sp, #20]
  410cb4:	4f54      	ldr	r7, [pc, #336]	; (410e08 <draw_shadow+0xc04>)
  410cb6:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410cb8:	2801      	cmp	r0, #1
  410cba:	d023      	beq.n	410d04 <draw_shadow+0xb00>
                _lv_blend_fill(clip, &fa,
  410cbc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410cc0:	9302      	str	r3, [sp, #8]
  410cc2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  410cc6:	9301      	str	r3, [sp, #4]
  410cc8:	9000      	str	r0, [sp, #0]
  410cca:	9b05      	ldr	r3, [sp, #20]
  410ccc:	8c2a      	ldrh	r2, [r5, #32]
  410cce:	a911      	add	r1, sp, #68	; 0x44
  410cd0:	9804      	ldr	r0, [sp, #16]
  410cd2:	4f4b      	ldr	r7, [pc, #300]	; (410e00 <draw_shadow+0xbfc>)
  410cd4:	47b8      	blx	r7
                fa.y1++;
  410cd6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410cda:	3301      	adds	r3, #1
  410cdc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  410ce0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410ce4:	3301      	adds	r3, #1
  410ce6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410cea:	f108 0801 	add.w	r8, r8, #1
  410cee:	45d0      	cmp	r8, sl
  410cf0:	da0a      	bge.n	410d08 <draw_shadow+0xb04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410cf2:	465a      	mov	r2, fp
  410cf4:	990a      	ldr	r1, [sp, #40]	; 0x28
  410cf6:	9805      	ldr	r0, [sp, #20]
  410cf8:	4b42      	ldr	r3, [pc, #264]	; (410e04 <draw_shadow+0xc00>)
  410cfa:	4798      	blx	r3
                if(simple_mode) {
  410cfc:	2c00      	cmp	r4, #0
  410cfe:	d0d3      	beq.n	410ca8 <draw_shadow+0xaa4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  410d00:	2002      	movs	r0, #2
  410d02:	e7db      	b.n	410cbc <draw_shadow+0xab8>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410d04:	2002      	movs	r0, #2
  410d06:	e7d9      	b.n	410cbc <draw_shadow+0xab8>
  410d08:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  410d0a:	464c      	mov	r4, r9
  410d0c:	e612      	b.n	410934 <draw_shadow+0x730>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410d0e:	9a08      	ldr	r2, [sp, #32]
  410d10:	a91e      	add	r1, sp, #120	; 0x78
  410d12:	a815      	add	r0, sp, #84	; 0x54
  410d14:	4b39      	ldr	r3, [pc, #228]	; (410dfc <draw_shadow+0xbf8>)
  410d16:	4798      	blx	r3
  410d18:	2800      	cmp	r0, #0
  410d1a:	f47f ae27 	bne.w	41096c <draw_shadow+0x768>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
  410d1e:	9b06      	ldr	r3, [sp, #24]
  410d20:	b14b      	cbz	r3, 410d36 <draw_shadow+0xb32>
  410d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410d24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  410d28:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410d2c:	4293      	cmp	r3, r2
  410d2e:	bfa8      	it	ge
  410d30:	4613      	movge	r3, r2
  410d32:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410d36:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410d3a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  410d3e:	1a9b      	subs	r3, r3, r2
  410d40:	b29b      	uxth	r3, r3
  410d42:	3301      	adds	r3, #1
  410d44:	b21b      	sxth	r3, r3
  410d46:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410d48:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
  410d4c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410d50:	b29a      	uxth	r2, r3
  410d52:	ebab 0b02 	sub.w	fp, fp, r2
  410d56:	fa1f fb8b 	uxth.w	fp, fp
  410d5a:	f10b 0b01 	add.w	fp, fp, #1
  410d5e:	fa0f fb8b 	sxth.w	fp, fp
        sh_buf_tmp = sh_buf + corner_size - 1;
  410d62:	46a6      	mov	lr, r4
  410d64:	1e62      	subs	r2, r4, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410d66:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  410d6a:	eba3 0808 	sub.w	r8, r3, r8
  410d6e:	fb08 2804 	mla	r8, r8, r4, r2
  410d72:	9b07      	ldr	r3, [sp, #28]
  410d74:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410d76:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410d78:	aa11      	add	r2, sp, #68	; 0x44
  410d7a:	2308      	movs	r3, #8
  410d7c:	e004      	b.n	410d88 <draw_shadow+0xb84>
        *d8 = *s8;
  410d7e:	f811 0b01 	ldrb.w	r0, [r1], #1
  410d82:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410d86:	3b01      	subs	r3, #1
    while(len) {
  410d88:	2b00      	cmp	r3, #0
  410d8a:	d1f8      	bne.n	410d7e <draw_shadow+0xb7a>
        fa.y2 = fa.y1;
  410d8c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410d90:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  410d94:	f04f 0900 	mov.w	r9, #0
  410d98:	940c      	str	r4, [sp, #48]	; 0x30
  410d9a:	960d      	str	r6, [sp, #52]	; 0x34
  410d9c:	9e06      	ldr	r6, [sp, #24]
  410d9e:	46f2      	mov	sl, lr
  410da0:	e01e      	b.n	410de0 <draw_shadow+0xbdc>
            _lv_memset(mask_buf, opa_tmp, w);
  410da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410da4:	9805      	ldr	r0, [sp, #20]
  410da6:	4b19      	ldr	r3, [pc, #100]	; (410e0c <draw_shadow+0xc08>)
  410da8:	4798      	blx	r3
            if(simple_mode) {
  410daa:	b38e      	cbz	r6, 410e10 <draw_shadow+0xc0c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  410dac:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410dae:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410db2:	9302      	str	r3, [sp, #8]
  410db4:	23ff      	movs	r3, #255	; 0xff
  410db6:	9301      	str	r3, [sp, #4]
  410db8:	9000      	str	r0, [sp, #0]
  410dba:	9b05      	ldr	r3, [sp, #20]
  410dbc:	8c2a      	ldrh	r2, [r5, #32]
  410dbe:	a911      	add	r1, sp, #68	; 0x44
  410dc0:	9804      	ldr	r0, [sp, #16]
  410dc2:	4c0f      	ldr	r4, [pc, #60]	; (410e00 <draw_shadow+0xbfc>)
  410dc4:	47a0      	blx	r4
            fa.y1++;
  410dc6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410dca:	3301      	adds	r3, #1
  410dcc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  410dd0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410dd4:	3301      	adds	r3, #1
  410dd6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  410dda:	44d0      	add	r8, sl
        for(y = 0; y < h; y++) {
  410ddc:	f109 0901 	add.w	r9, r9, #1
  410de0:	45d9      	cmp	r9, fp
  410de2:	da21      	bge.n	410e28 <draw_shadow+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410de4:	f898 1000 	ldrb.w	r1, [r8]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410de8:	2fff      	cmp	r7, #255	; 0xff
  410dea:	bf08      	it	eq
  410dec:	29ff      	cmpeq	r1, #255	; 0xff
  410dee:	d0d8      	beq.n	410da2 <draw_shadow+0xb9e>
  410df0:	fb01 f107 	mul.w	r1, r1, r7
  410df4:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410df8:	e7d3      	b.n	410da2 <draw_shadow+0xb9e>
  410dfa:	bf00      	nop
  410dfc:	00415829 	.word	0x00415829
  410e00:	0040c871 	.word	0x0040c871
  410e04:	004167cd 	.word	0x004167cd
  410e08:	0040fbe5 	.word	0x0040fbe5
  410e0c:	00416a95 	.word	0x00416a95
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410e12:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410e16:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410e1a:	9805      	ldr	r0, [sp, #20]
  410e1c:	4c73      	ldr	r4, [pc, #460]	; (410fec <draw_shadow+0xde8>)
  410e1e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410e20:	2801      	cmp	r0, #1
  410e22:	d1c4      	bne.n	410dae <draw_shadow+0xbaa>
  410e24:	2002      	movs	r0, #2
  410e26:	e7c2      	b.n	410dae <draw_shadow+0xbaa>
  410e28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  410e2a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  410e2c:	e59e      	b.n	41096c <draw_shadow+0x768>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410e2e:	9a08      	ldr	r2, [sp, #32]
  410e30:	a91e      	add	r1, sp, #120	; 0x78
  410e32:	a815      	add	r0, sp, #84	; 0x54
  410e34:	4b6e      	ldr	r3, [pc, #440]	; (410ff0 <draw_shadow+0xdec>)
  410e36:	4798      	blx	r3
  410e38:	2800      	cmp	r0, #0
  410e3a:	f47f adb3 	bne.w	4109a4 <draw_shadow+0x7a0>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
  410e3e:	9b06      	ldr	r3, [sp, #24]
  410e40:	b14b      	cbz	r3, 410e56 <draw_shadow+0xc52>
  410e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410e44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  410e48:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410e4c:	4293      	cmp	r3, r2
  410e4e:	bfb8      	it	lt
  410e50:	4613      	movlt	r3, r2
  410e52:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410e56:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410e5a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  410e5e:	1a9b      	subs	r3, r3, r2
  410e60:	b29b      	uxth	r3, r3
  410e62:	3301      	adds	r3, #1
  410e64:	b21b      	sxth	r3, r3
  410e66:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410e68:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410e6c:	fa1f f982 	uxth.w	r9, r2
  410e70:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  410e74:	eba9 0903 	sub.w	r9, r9, r3
  410e78:	fa1f f989 	uxth.w	r9, r9
  410e7c:	f109 0901 	add.w	r9, r9, #1
  410e80:	fa0f f989 	sxth.w	r9, r9
        sh_buf_tmp = sh_buf + corner_size - 1;
  410e84:	46a2      	mov	sl, r4
  410e86:	1e61      	subs	r1, r4, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410e88:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  410e8c:	1a9b      	subs	r3, r3, r2
  410e8e:	fb03 1404 	mla	r4, r3, r4, r1
  410e92:	9b07      	ldr	r3, [sp, #28]
  410e94:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410e96:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410e98:	aa11      	add	r2, sp, #68	; 0x44
  410e9a:	2308      	movs	r3, #8
  410e9c:	e004      	b.n	410ea8 <draw_shadow+0xca4>
        *d8 = *s8;
  410e9e:	f811 0b01 	ldrb.w	r0, [r1], #1
  410ea2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410ea6:	3b01      	subs	r3, #1
    while(len) {
  410ea8:	2b00      	cmp	r3, #0
  410eaa:	d1f8      	bne.n	410e9e <draw_shadow+0xc9a>
        fa.y1 = fa.y2;
  410eac:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410eb0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(y = 0; y < h; y++) {
  410eb4:	f04f 0800 	mov.w	r8, #0
  410eb8:	f8dd b018 	ldr.w	fp, [sp, #24]
  410ebc:	960a      	str	r6, [sp, #40]	; 0x28
  410ebe:	e020      	b.n	410f02 <draw_shadow+0xcfe>
            _lv_memset(mask_buf, opa_tmp, w);
  410ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410ec2:	9805      	ldr	r0, [sp, #20]
  410ec4:	4b4b      	ldr	r3, [pc, #300]	; (410ff4 <draw_shadow+0xdf0>)
  410ec6:	4798      	blx	r3
            if(simple_mode) {
  410ec8:	f1bb 0f00 	cmp.w	fp, #0
  410ecc:	d025      	beq.n	410f1a <draw_shadow+0xd16>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  410ece:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410ed0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410ed4:	9302      	str	r3, [sp, #8]
  410ed6:	23ff      	movs	r3, #255	; 0xff
  410ed8:	9301      	str	r3, [sp, #4]
  410eda:	9000      	str	r0, [sp, #0]
  410edc:	9b05      	ldr	r3, [sp, #20]
  410ede:	8c2a      	ldrh	r2, [r5, #32]
  410ee0:	a911      	add	r1, sp, #68	; 0x44
  410ee2:	9804      	ldr	r0, [sp, #16]
  410ee4:	4e44      	ldr	r6, [pc, #272]	; (410ff8 <draw_shadow+0xdf4>)
  410ee6:	47b0      	blx	r6
            fa.y1--;
  410ee8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410eec:	3b01      	subs	r3, #1
  410eee:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2--;
  410ef2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410ef6:	3b01      	subs	r3, #1
  410ef8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  410efc:	4454      	add	r4, sl
        for(y = 0; y < h; y++) {
  410efe:	f108 0801 	add.w	r8, r8, #1
  410f02:	45c8      	cmp	r8, r9
  410f04:	da15      	bge.n	410f32 <draw_shadow+0xd2e>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410f06:	7821      	ldrb	r1, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410f08:	2fff      	cmp	r7, #255	; 0xff
  410f0a:	bf08      	it	eq
  410f0c:	29ff      	cmpeq	r1, #255	; 0xff
  410f0e:	d0d7      	beq.n	410ec0 <draw_shadow+0xcbc>
  410f10:	fb01 f107 	mul.w	r1, r1, r7
  410f14:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410f18:	e7d2      	b.n	410ec0 <draw_shadow+0xcbc>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410f1c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410f20:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410f24:	9805      	ldr	r0, [sp, #20]
  410f26:	4e31      	ldr	r6, [pc, #196]	; (410fec <draw_shadow+0xde8>)
  410f28:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410f2a:	2801      	cmp	r0, #1
  410f2c:	d1d0      	bne.n	410ed0 <draw_shadow+0xccc>
  410f2e:	2002      	movs	r0, #2
  410f30:	e7ce      	b.n	410ed0 <draw_shadow+0xccc>
  410f32:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  410f34:	e536      	b.n	4109a4 <draw_shadow+0x7a0>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410f36:	9a08      	ldr	r2, [sp, #32]
  410f38:	a91e      	add	r1, sp, #120	; 0x78
  410f3a:	a815      	add	r0, sp, #84	; 0x54
  410f3c:	4b2c      	ldr	r3, [pc, #176]	; (410ff0 <draw_shadow+0xdec>)
  410f3e:	4798      	blx	r3
  410f40:	2800      	cmp	r0, #0
  410f42:	f47f ad4f 	bne.w	4109e4 <draw_shadow+0x7e0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410f46:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
  410f4a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  410f4e:	1af6      	subs	r6, r6, r3
  410f50:	b2b6      	uxth	r6, r6
  410f52:	3601      	adds	r6, #1
  410f54:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410f56:	f8bd 8052 	ldrh.w	r8, [sp, #82]	; 0x52
  410f5a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  410f5e:	eba8 0803 	sub.w	r8, r8, r3
  410f62:	fa1f f888 	uxth.w	r8, r8
  410f66:	f108 0801 	add.w	r8, r8, #1
  410f6a:	fa0f f888 	sxth.w	r8, r8
    const uint8_t * s8 = (const uint8_t *)src;
  410f6e:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410f70:	aa11      	add	r2, sp, #68	; 0x44
  410f72:	2308      	movs	r3, #8
    while(len) {
  410f74:	b12b      	cbz	r3, 410f82 <draw_shadow+0xd7e>
        *d8 = *s8;
  410f76:	f811 0b01 	ldrb.w	r0, [r1], #1
  410f7a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410f7e:	3b01      	subs	r3, #1
  410f80:	e7f8      	b.n	410f74 <draw_shadow+0xd70>
        fa.y2 = fa.y1;
  410f82:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410f86:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  410f8a:	2400      	movs	r4, #0
  410f8c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  410f90:	e016      	b.n	410fc0 <draw_shadow+0xdbc>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410f92:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410f96:	9302      	str	r3, [sp, #8]
  410f98:	23ff      	movs	r3, #255	; 0xff
  410f9a:	9301      	str	r3, [sp, #4]
  410f9c:	9000      	str	r0, [sp, #0]
  410f9e:	464b      	mov	r3, r9
  410fa0:	8c2a      	ldrh	r2, [r5, #32]
  410fa2:	a911      	add	r1, sp, #68	; 0x44
  410fa4:	9804      	ldr	r0, [sp, #16]
  410fa6:	4f14      	ldr	r7, [pc, #80]	; (410ff8 <draw_shadow+0xdf4>)
  410fa8:	47b8      	blx	r7
            fa.y1++;
  410faa:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410fae:	3301      	adds	r3, #1
  410fb0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  410fb4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410fb8:	3301      	adds	r3, #1
  410fba:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  410fbe:	3401      	adds	r4, #1
  410fc0:	4544      	cmp	r4, r8
  410fc2:	f6bf ad0f 	bge.w	4109e4 <draw_shadow+0x7e0>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
  410fc6:	4632      	mov	r2, r6
  410fc8:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
  410fcc:	4648      	mov	r0, r9
  410fce:	4b09      	ldr	r3, [pc, #36]	; (410ff4 <draw_shadow+0xdf0>)
  410fd0:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410fd2:	4633      	mov	r3, r6
  410fd4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410fd8:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410fdc:	4648      	mov	r0, r9
  410fde:	4f03      	ldr	r7, [pc, #12]	; (410fec <draw_shadow+0xde8>)
  410fe0:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410fe2:	2801      	cmp	r0, #1
  410fe4:	d1d5      	bne.n	410f92 <draw_shadow+0xd8e>
  410fe6:	2002      	movs	r0, #2
  410fe8:	e7d3      	b.n	410f92 <draw_shadow+0xd8e>
  410fea:	bf00      	nop
  410fec:	0040fbe5 	.word	0x0040fbe5
  410ff0:	00415829 	.word	0x00415829
  410ff4:	00416a95 	.word	0x00416a95
  410ff8:	0040c871 	.word	0x0040c871

00410ffc <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
  410ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411000:	b0a5      	sub	sp, #148	; 0x94
  411002:	4683      	mov	fp, r0
  411004:	460c      	mov	r4, r1
  411006:	9205      	str	r2, [sp, #20]
  411008:	461e      	mov	r6, r3
  41100a:	f89d 50b8 	ldrb.w	r5, [sp, #184]	; 0xb8
  41100e:	f89d 70c0 	ldrb.w	r7, [sp, #192]	; 0xc0
  411012:	f89d 80c4 	ldrb.w	r8, [sp, #196]	; 0xc4
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  411016:	4baa      	ldr	r3, [pc, #680]	; (4112c0 <draw_full_border+0x2c4>)
  411018:	4798      	blx	r3
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;
  41101a:	2800      	cmp	r0, #0
  41101c:	d13d      	bne.n	41109a <draw_full_border+0x9e>
    bool simple_mode = true;
  41101e:	f04f 0a01 	mov.w	sl, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411022:	f8bb 1004 	ldrh.w	r1, [fp, #4]
  411026:	f8bb 2000 	ldrh.w	r2, [fp]
  41102a:	1a8a      	subs	r2, r1, r2
  41102c:	b292      	uxth	r2, r2
  41102e:	3201      	adds	r2, #1
  411030:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411032:	f8bb 0006 	ldrh.w	r0, [fp, #6]
  411036:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  41103a:	1ac0      	subs	r0, r0, r3
  41103c:	b280      	uxth	r0, r0
  41103e:	3001      	adds	r0, #1
  411040:	b200      	sxth	r0, r0

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
  411042:	88a3      	ldrh	r3, [r4, #4]
  411044:	1a59      	subs	r1, r3, r1
  411046:	b289      	uxth	r1, r1
  411048:	910c      	str	r1, [sp, #48]	; 0x30
  41104a:	fa0f f981 	sxth.w	r9, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41104e:	8821      	ldrh	r1, [r4, #0]
  411050:	1a5b      	subs	r3, r3, r1
  411052:	b29b      	uxth	r3, r3
  411054:	3301      	adds	r3, #1
  411056:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411058:	88e1      	ldrh	r1, [r4, #6]
  41105a:	f8b4 e002 	ldrh.w	lr, [r4, #2]
  41105e:	eba1 010e 	sub.w	r1, r1, lr
  411062:	b289      	uxth	r1, r1
  411064:	3101      	adds	r1, #1
  411066:	b209      	sxth	r1, r1
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
  411068:	b1d5      	cbz	r5, 4110a0 <draw_full_border+0xa4>
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
  41106a:	4282      	cmp	r2, r0
  41106c:	bfa8      	it	ge
  41106e:	4602      	movge	r2, r0
        if(rin > short_side >> 1) rin = short_side >> 1;
  411070:	1055      	asrs	r5, r2, #1
  411072:	42ae      	cmp	r6, r5
  411074:	dc00      	bgt.n	411078 <draw_full_border+0x7c>
        rin = radius;
  411076:	4635      	mov	r5, r6

        /*Get the outer area*/
        rout = rin + border_width;
  411078:	eb05 0309 	add.w	r3, r5, r9
  41107c:	9306      	str	r3, [sp, #24]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  41107e:	4b91      	ldr	r3, [pc, #580]	; (4112c4 <draw_full_border+0x2c8>)
  411080:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  411082:	4b91      	ldr	r3, [pc, #580]	; (4112c8 <draw_full_border+0x2cc>)
  411084:	4798      	blx	r3
  411086:	4606      	mov	r6, r0

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
  411088:	9a05      	ldr	r2, [sp, #20]
  41108a:	4621      	mov	r1, r4
  41108c:	a822      	add	r0, sp, #136	; 0x88
  41108e:	4b8f      	ldr	r3, [pc, #572]	; (4112cc <draw_full_border+0x2d0>)
  411090:	4798      	blx	r3
    if(is_common == false) return;
  411092:	b998      	cbnz	r0, 4110bc <draw_full_border+0xc0>
        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
    lv_draw_mask_remove_id(mask_rout_id);
    _lv_mem_buf_release(mask_buf);
}
  411094:	b025      	add	sp, #148	; 0x94
  411096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
  41109a:	f04f 0a00 	mov.w	sl, #0
  41109e:	e7c0      	b.n	411022 <draw_full_border+0x26>
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
  4110a0:	4299      	cmp	r1, r3
  4110a2:	bfa8      	it	ge
  4110a4:	4619      	movge	r1, r3
        if(rout > short_side >> 1) rout = short_side >> 1;
  4110a6:	104b      	asrs	r3, r1, #1
  4110a8:	9306      	str	r3, [sp, #24]
  4110aa:	429e      	cmp	r6, r3
  4110ac:	dc00      	bgt.n	4110b0 <draw_full_border+0xb4>
        rout = radius;
  4110ae:	9606      	str	r6, [sp, #24]
        if(rin < 0) rin = 0;
  4110b0:	9b06      	ldr	r3, [sp, #24]
  4110b2:	ebb3 0509 	subs.w	r5, r3, r9
  4110b6:	d5e2      	bpl.n	41107e <draw_full_border+0x82>
  4110b8:	2500      	movs	r5, #0
  4110ba:	e7e0      	b.n	41107e <draw_full_border+0x82>
    draw_area.x1 -= disp_area->x1;
  4110bc:	f8b6 e010 	ldrh.w	lr, [r6, #16]
  4110c0:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4110c4:	eba3 030e 	sub.w	r3, r3, lr
  4110c8:	b29a      	uxth	r2, r3
  4110ca:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
  4110ce:	8a70      	ldrh	r0, [r6, #18]
  4110d0:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
  4110d4:	1a09      	subs	r1, r1, r0
  4110d6:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    draw_area.x2 -= disp_area->x1;
  4110da:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4110de:	eba3 030e 	sub.w	r3, r3, lr
  4110e2:	b29b      	uxth	r3, r3
  4110e4:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    draw_area.y2 -= disp_area->y1;
  4110e8:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  4110ec:	1a09      	subs	r1, r1, r0
  4110ee:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4110f2:	1a9b      	subs	r3, r3, r2
  4110f4:	b29b      	uxth	r3, r3
  4110f6:	3301      	adds	r3, #1
  4110f8:	b21b      	sxth	r3, r3
  4110fa:	9309      	str	r3, [sp, #36]	; 0x24
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
  4110fc:	2301      	movs	r3, #1
  4110fe:	b22a      	sxth	r2, r5
  411100:	4659      	mov	r1, fp
  411102:	a81b      	add	r0, sp, #108	; 0x6c
  411104:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 4112e4 <draw_full_border+0x2e8>
  411108:	47d8      	blx	fp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  41110a:	2100      	movs	r1, #0
  41110c:	a81b      	add	r0, sp, #108	; 0x6c
  41110e:	4d70      	ldr	r5, [pc, #448]	; (4112d0 <draw_full_border+0x2d4>)
  411110:	47a8      	blx	r5
  411112:	900d      	str	r0, [sp, #52]	; 0x34
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
  411114:	2300      	movs	r3, #0
  411116:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  41111a:	4621      	mov	r1, r4
  41111c:	a814      	add	r0, sp, #80	; 0x50
  41111e:	47d8      	blx	fp
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  411120:	2100      	movs	r1, #0
  411122:	a814      	add	r0, sp, #80	; 0x50
  411124:	47a8      	blx	r5
  411126:	900e      	str	r0, [sp, #56]	; 0x38
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  411128:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41112a:	9308      	str	r3, [sp, #32]
  41112c:	4618      	mov	r0, r3
  41112e:	4b69      	ldr	r3, [pc, #420]	; (4112d4 <draw_full_border+0x2d8>)
  411130:	4798      	blx	r3
  411132:	9007      	str	r0, [sp, #28]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
  411134:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  411138:	f109 39ff 	add.w	r9, r9, #4294967295
  41113c:	464b      	mov	r3, r9
  41113e:	9a06      	ldr	r2, [sp, #24]
  411140:	4591      	cmp	r9, r2
  411142:	bfb8      	it	lt
  411144:	4613      	movlt	r3, r2
  411146:	4619      	mov	r1, r3
  411148:	930f      	str	r3, [sp, #60]	; 0x3c
    if(simple_mode) {
  41114a:	f1ba 0f00 	cmp.w	sl, #0
  41114e:	f000 8197 	beq.w	411480 <draw_full_border+0x484>
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
  411152:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  411156:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  41115a:	1ad2      	subs	r2, r2, r3
  41115c:	188a      	adds	r2, r1, r2
  41115e:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.x1 = area_outer->x1;
  411160:	f9b4 2000 	ldrsh.w	r2, [r4]
  411164:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  411168:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  41116c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  411170:	f9bd 908a 	ldrsh.w	r9, [sp, #138]	; 0x8a
  411174:	fa1f f289 	uxth.w	r2, r9
  411178:	fa12 f383 	uxtah	r3, r2, r3
  41117c:	b21b      	sxth	r3, r3
  41117e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  411182:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  411186:	46ba      	mov	sl, r7
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  411188:	e02c      	b.n	4111e4 <draw_full_border+0x1e8>
            fill_area2.x1 = area_outer->x2 - rout + 1;
  41118a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41118e:	b29a      	uxth	r2, r3
  411190:	1b55      	subs	r5, r2, r5
  411192:	b2ad      	uxth	r5, r5
  411194:	3501      	adds	r5, #1
  411196:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  41119a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  41119e:	9a06      	ldr	r2, [sp, #24]
  4111a0:	1a9b      	subs	r3, r3, r2
  4111a2:	3301      	adds	r3, #1
  4111a4:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  4111a8:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  4111ac:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  4111ae:	1a9b      	subs	r3, r3, r2
  4111b0:	d46c      	bmi.n	41128c <draw_full_border+0x290>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  4111b2:	f8cd 8008 	str.w	r8, [sp, #8]
  4111b6:	f8cd a004 	str.w	sl, [sp, #4]
  4111ba:	9700      	str	r7, [sp, #0]
  4111bc:	9a07      	ldr	r2, [sp, #28]
  4111be:	4413      	add	r3, r2
  4111c0:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4111c4:	a910      	add	r1, sp, #64	; 0x40
  4111c6:	9805      	ldr	r0, [sp, #20]
  4111c8:	4d43      	ldr	r5, [pc, #268]	; (4112d8 <draw_full_border+0x2dc>)
  4111ca:	47a8      	blx	r5
            fill_area.y1++;
  4111cc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4111d0:	3301      	adds	r3, #1
  4111d2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  4111d6:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  4111da:	3301      	adds	r3, #1
  4111dc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  4111e0:	f109 0901 	add.w	r9, r9, #1
  4111e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4111e6:	4599      	cmp	r9, r3
  4111e8:	dc52      	bgt.n	411290 <draw_full_border+0x294>
            _lv_memset_ff(mask_buf, draw_area_w);
  4111ea:	9908      	ldr	r1, [sp, #32]
  4111ec:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4111f0:	4658      	mov	r0, fp
  4111f2:	4b3a      	ldr	r3, [pc, #232]	; (4112dc <draw_full_border+0x2e0>)
  4111f4:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4111f6:	8a31      	ldrh	r1, [r6, #16]
  4111f8:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4111fc:	4419      	add	r1, r3
  4111fe:	8a72      	ldrh	r2, [r6, #18]
  411200:	444a      	add	r2, r9
  411202:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411204:	b212      	sxth	r2, r2
  411206:	b209      	sxth	r1, r1
  411208:	4658      	mov	r0, fp
  41120a:	4d35      	ldr	r5, [pc, #212]	; (4112e0 <draw_full_border+0x2e4>)
  41120c:	47a8      	blx	r5
  41120e:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
  411210:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411214:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  411218:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  41121c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area2.x1 = area_outer->x1;
  411220:	f9b4 3000 	ldrsh.w	r3, [r4]
  411224:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  411228:	8823      	ldrh	r3, [r4, #0]
  41122a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  41122e:	442b      	add	r3, r5
  411230:	b29b      	uxth	r3, r3
  411232:	3b01      	subs	r3, #1
  411234:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  411238:	f8cd 8008 	str.w	r8, [sp, #8]
  41123c:	f8cd a004 	str.w	sl, [sp, #4]
  411240:	9000      	str	r0, [sp, #0]
  411242:	465b      	mov	r3, fp
  411244:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411248:	a910      	add	r1, sp, #64	; 0x40
  41124a:	9805      	ldr	r0, [sp, #20]
  41124c:	f8df b088 	ldr.w	fp, [pc, #136]	; 4112d8 <draw_full_border+0x2dc>
  411250:	47d8      	blx	fp
            if(fill_area2.y2 < area_outer->y1 + border_width) {
  411252:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411256:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  41125a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41125c:	440b      	add	r3, r1
  41125e:	429a      	cmp	r2, r3
  411260:	da93      	bge.n	41118a <draw_full_border+0x18e>
                fill_area2.x1 = area_outer->x1 + rout;
  411262:	8823      	ldrh	r3, [r4, #0]
  411264:	442b      	add	r3, r5
  411266:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  41126a:	88a3      	ldrh	r3, [r4, #4]
  41126c:	1b5b      	subs	r3, r3, r5
  41126e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  411272:	f8cd 8008 	str.w	r8, [sp, #8]
  411276:	f8cd a004 	str.w	sl, [sp, #4]
  41127a:	2301      	movs	r3, #1
  41127c:	9300      	str	r3, [sp, #0]
  41127e:	2300      	movs	r3, #0
  411280:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411284:	a910      	add	r1, sp, #64	; 0x40
  411286:	9805      	ldr	r0, [sp, #20]
  411288:	47d8      	blx	fp
  41128a:	e77e      	b.n	41118a <draw_full_border+0x18e>
            if(mask_ofs < 0) mask_ofs = 0;
  41128c:	2300      	movs	r3, #0
  41128e:	e790      	b.n	4111b2 <draw_full_border+0x1b6>
  411290:	4657      	mov	r7, sl
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
  411292:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
  411296:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  41129a:	eba9 0903 	sub.w	r9, r9, r3
  41129e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4112a0:	eba9 0902 	sub.w	r9, r9, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
  4112a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4112a6:	4549      	cmp	r1, r9
  4112a8:	db01      	blt.n	4112ae <draw_full_border+0x2b2>
  4112aa:	f101 0901 	add.w	r9, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
  4112ae:	fa19 f383 	uxtah	r3, r9, r3
  4112b2:	b21b      	sxth	r3, r3
  4112b4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  4112b8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  4112bc:	46ba      	mov	sl, r7
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  4112be:	e040      	b.n	411342 <draw_full_border+0x346>
  4112c0:	0040fcad 	.word	0x0040fcad
  4112c4:	004097a1 	.word	0x004097a1
  4112c8:	00414df5 	.word	0x00414df5
  4112cc:	004155b3 	.word	0x004155b3
  4112d0:	0040fbb1 	.word	0x0040fbb1
  4112d4:	00416965 	.word	0x00416965
  4112d8:	0040c871 	.word	0x0040c871
  4112dc:	00416b49 	.word	0x00416b49
  4112e0:	0040fbe5 	.word	0x0040fbe5
  4112e4:	0040fe2d 	.word	0x0040fe2d
            fill_area2.x1 = area_outer->x2 - rout + 1;
  4112e8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4112ec:	b29a      	uxth	r2, r3
  4112ee:	1b55      	subs	r5, r2, r5
  4112f0:	b2ad      	uxth	r5, r5
  4112f2:	3501      	adds	r5, #1
  4112f4:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  4112f8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  4112fc:	9a06      	ldr	r2, [sp, #24]
  4112fe:	1a9b      	subs	r3, r3, r2
  411300:	3301      	adds	r3, #1
  411302:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  411306:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  41130a:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  41130c:	1a9b      	subs	r3, r3, r2
  41130e:	d46d      	bmi.n	4113ec <draw_full_border+0x3f0>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  411310:	f8cd 8008 	str.w	r8, [sp, #8]
  411314:	f8cd a004 	str.w	sl, [sp, #4]
  411318:	9700      	str	r7, [sp, #0]
  41131a:	9a07      	ldr	r2, [sp, #28]
  41131c:	4413      	add	r3, r2
  41131e:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411322:	a910      	add	r1, sp, #64	; 0x40
  411324:	9805      	ldr	r0, [sp, #20]
  411326:	4d79      	ldr	r5, [pc, #484]	; (41150c <draw_full_border+0x510>)
  411328:	47a8      	blx	r5
            fill_area.y1++;
  41132a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41132e:	3301      	adds	r3, #1
  411330:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  411334:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  411338:	3301      	adds	r3, #1
  41133a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  41133e:	f109 0901 	add.w	r9, r9, #1
  411342:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  411346:	4599      	cmp	r9, r3
  411348:	dc52      	bgt.n	4113f0 <draw_full_border+0x3f4>
            _lv_memset_ff(mask_buf, draw_area_w);
  41134a:	9908      	ldr	r1, [sp, #32]
  41134c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  411350:	4658      	mov	r0, fp
  411352:	4b6f      	ldr	r3, [pc, #444]	; (411510 <draw_full_border+0x514>)
  411354:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411356:	8a31      	ldrh	r1, [r6, #16]
  411358:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  41135c:	4419      	add	r1, r3
  41135e:	8a72      	ldrh	r2, [r6, #18]
  411360:	444a      	add	r2, r9
  411362:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411364:	b212      	sxth	r2, r2
  411366:	b209      	sxth	r1, r1
  411368:	4658      	mov	r0, fp
  41136a:	4d6a      	ldr	r5, [pc, #424]	; (411514 <draw_full_border+0x518>)
  41136c:	47a8      	blx	r5
  41136e:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer->x1;
  411370:	f9b4 3000 	ldrsh.w	r3, [r4]
  411374:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  411378:	8823      	ldrh	r3, [r4, #0]
  41137a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  41137e:	442b      	add	r3, r5
  411380:	b29b      	uxth	r3, r3
  411382:	3b01      	subs	r3, #1
  411384:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
  411388:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41138c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  411390:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  411394:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  411398:	f8cd 8008 	str.w	r8, [sp, #8]
  41139c:	f8cd a004 	str.w	sl, [sp, #4]
  4113a0:	9000      	str	r0, [sp, #0]
  4113a2:	465b      	mov	r3, fp
  4113a4:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4113a8:	a910      	add	r1, sp, #64	; 0x40
  4113aa:	9805      	ldr	r0, [sp, #20]
  4113ac:	f8df b15c 	ldr.w	fp, [pc, #348]	; 41150c <draw_full_border+0x510>
  4113b0:	47d8      	blx	fp
            if(fill_area2.y2 > area_outer->y2 - border_width) {
  4113b2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4113b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  4113ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4113bc:	1a5b      	subs	r3, r3, r1
  4113be:	429a      	cmp	r2, r3
  4113c0:	dd92      	ble.n	4112e8 <draw_full_border+0x2ec>
                fill_area2.x1 = area_outer->x1 + rout;
  4113c2:	8823      	ldrh	r3, [r4, #0]
  4113c4:	442b      	add	r3, r5
  4113c6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  4113ca:	88a3      	ldrh	r3, [r4, #4]
  4113cc:	1b5b      	subs	r3, r3, r5
  4113ce:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  4113d2:	f8cd 8008 	str.w	r8, [sp, #8]
  4113d6:	f8cd a004 	str.w	sl, [sp, #4]
  4113da:	2301      	movs	r3, #1
  4113dc:	9300      	str	r3, [sp, #0]
  4113de:	2300      	movs	r3, #0
  4113e0:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4113e4:	a910      	add	r1, sp, #64	; 0x40
  4113e6:	9805      	ldr	r0, [sp, #20]
  4113e8:	47d8      	blx	fp
  4113ea:	e77d      	b.n	4112e8 <draw_full_border+0x2ec>
            if(mask_ofs < 0) mask_ofs = 0;
  4113ec:	2300      	movs	r3, #0
  4113ee:	e78f      	b.n	411310 <draw_full_border+0x314>
        fill_area.y1 = area_outer->y1 + corner_size + 1;
  4113f0:	8863      	ldrh	r3, [r4, #2]
  4113f2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  4113f6:	444b      	add	r3, r9
  4113f8:	b29b      	uxth	r3, r3
  4113fa:	3301      	adds	r3, #1
  4113fc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
  411400:	88e3      	ldrh	r3, [r4, #6]
  411402:	eba3 0309 	sub.w	r3, r3, r9
  411406:	b29b      	uxth	r3, r3
  411408:	3b01      	subs	r3, #1
  41140a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        fill_area.x1 = area_outer->x1;
  41140e:	f9b4 3000 	ldrsh.w	r3, [r4]
  411412:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x1 + border_width - 1;
  411416:	8823      	ldrh	r3, [r4, #0]
  411418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41141a:	4413      	add	r3, r2
  41141c:	b29b      	uxth	r3, r3
  41141e:	3b01      	subs	r3, #1
  411420:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  411424:	f8cd 8008 	str.w	r8, [sp, #8]
  411428:	f8cd a004 	str.w	sl, [sp, #4]
  41142c:	2601      	movs	r6, #1
  41142e:	9600      	str	r6, [sp, #0]
  411430:	2300      	movs	r3, #0
  411432:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411436:	a912      	add	r1, sp, #72	; 0x48
  411438:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41143c:	4648      	mov	r0, r9
  41143e:	4d33      	ldr	r5, [pc, #204]	; (41150c <draw_full_border+0x510>)
  411440:	47a8      	blx	r5
        fill_area.x1 = area_outer->x2 - border_width + 1;
  411442:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  411446:	b293      	uxth	r3, r2
  411448:	990c      	ldr	r1, [sp, #48]	; 0x30
  41144a:	1a5b      	subs	r3, r3, r1
  41144c:	b29b      	uxth	r3, r3
  41144e:	4433      	add	r3, r6
  411450:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  411454:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  411458:	f8cd 8008 	str.w	r8, [sp, #8]
  41145c:	f8cd a004 	str.w	sl, [sp, #4]
  411460:	9600      	str	r6, [sp, #0]
  411462:	2300      	movs	r3, #0
  411464:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411468:	a912      	add	r1, sp, #72	; 0x48
  41146a:	4648      	mov	r0, r9
  41146c:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
  41146e:	980d      	ldr	r0, [sp, #52]	; 0x34
  411470:	4c29      	ldr	r4, [pc, #164]	; (411518 <draw_full_border+0x51c>)
  411472:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
  411474:	980e      	ldr	r0, [sp, #56]	; 0x38
  411476:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  411478:	9807      	ldr	r0, [sp, #28]
  41147a:	4b28      	ldr	r3, [pc, #160]	; (41151c <draw_full_border+0x520>)
  41147c:	4798      	blx	r3
  41147e:	e609      	b.n	411094 <draw_full_border+0x98>
        fill_area.x1 = area_outer->x1;
  411480:	f9b4 3000 	ldrsh.w	r3, [r4]
  411484:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  411488:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41148c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  411490:	8a73      	ldrh	r3, [r6, #18]
  411492:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
  411496:	fa13 f384 	uxtah	r3, r3, r4
  41149a:	b21b      	sxth	r3, r3
  41149c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  4114a0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  4114a4:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4114a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  4114ac:	f8dd a014 	ldr.w	sl, [sp, #20]
  4114b0:	463d      	mov	r5, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4114b2:	e025      	b.n	411500 <draw_full_border+0x504>
            _lv_memset_ff(mask_buf, draw_area_w);
  4114b4:	9908      	ldr	r1, [sp, #32]
  4114b6:	4658      	mov	r0, fp
  4114b8:	4b15      	ldr	r3, [pc, #84]	; (411510 <draw_full_border+0x514>)
  4114ba:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4114bc:	8a31      	ldrh	r1, [r6, #16]
  4114be:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4114c2:	4419      	add	r1, r3
  4114c4:	8a72      	ldrh	r2, [r6, #18]
  4114c6:	4422      	add	r2, r4
  4114c8:	464b      	mov	r3, r9
  4114ca:	b212      	sxth	r2, r2
  4114cc:	b209      	sxth	r1, r1
  4114ce:	4658      	mov	r0, fp
  4114d0:	4f10      	ldr	r7, [pc, #64]	; (411514 <draw_full_border+0x518>)
  4114d2:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
  4114d4:	f8cd 8008 	str.w	r8, [sp, #8]
  4114d8:	9501      	str	r5, [sp, #4]
  4114da:	9000      	str	r0, [sp, #0]
  4114dc:	465b      	mov	r3, fp
  4114de:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4114e2:	a912      	add	r1, sp, #72	; 0x48
  4114e4:	4650      	mov	r0, sl
  4114e6:	4f09      	ldr	r7, [pc, #36]	; (41150c <draw_full_border+0x510>)
  4114e8:	47b8      	blx	r7
            fill_area.y1++;
  4114ea:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4114ee:	3301      	adds	r3, #1
  4114f0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  4114f4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  4114f8:	3301      	adds	r3, #1
  4114fa:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4114fe:	3401      	adds	r4, #1
  411500:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  411504:	429c      	cmp	r4, r3
  411506:	ddd5      	ble.n	4114b4 <draw_full_border+0x4b8>
  411508:	e7b1      	b.n	41146e <draw_full_border+0x472>
  41150a:	bf00      	nop
  41150c:	0040c871 	.word	0x0040c871
  411510:	00416b49 	.word	0x00416b49
  411514:	0040fbe5 	.word	0x0040fbe5
  411518:	0040fc35 	.word	0x0040fc35
  41151c:	00416715 	.word	0x00416715

00411520 <draw_outline>:
    if(dsc->outline_opa <= LV_OPA_MIN) return;
  411520:	7f93      	ldrb	r3, [r2, #30]
  411522:	2b02      	cmp	r3, #2
  411524:	d957      	bls.n	4115d6 <draw_outline+0xb6>
    if(dsc->outline_width == 0) return;
  411526:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
  41152a:	2b00      	cmp	r3, #0
  41152c:	d053      	beq.n	4115d6 <draw_outline+0xb6>
{
  41152e:	b530      	push	{r4, r5, lr}
  411530:	b089      	sub	sp, #36	; 0x24
  411532:	ac06      	add	r4, sp, #24
  411534:	2308      	movs	r3, #8
  411536:	e004      	b.n	411542 <draw_outline+0x22>
        *d8 = *s8;
  411538:	f810 5b01 	ldrb.w	r5, [r0], #1
  41153c:	f804 5b01 	strb.w	r5, [r4], #1
        len--;
  411540:	3b01      	subs	r3, #1
    while(len) {
  411542:	2b00      	cmp	r3, #0
  411544:	d1f8      	bne.n	411538 <draw_outline+0x18>
    area_inner.x1 -= dsc->outline_pad;
  411546:	8b93      	ldrh	r3, [r2, #28]
  411548:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  41154c:	1ac0      	subs	r0, r0, r3
  41154e:	f8ad 0018 	strh.w	r0, [sp, #24]
    area_inner.y1 -= dsc->outline_pad;
  411552:	f8bd 001a 	ldrh.w	r0, [sp, #26]
  411556:	1ac0      	subs	r0, r0, r3
  411558:	f8ad 001a 	strh.w	r0, [sp, #26]
    area_inner.x2 += dsc->outline_pad;
  41155c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  411560:	4418      	add	r0, r3
  411562:	f8ad 001c 	strh.w	r0, [sp, #28]
    area_inner.y2 += dsc->outline_pad;
  411566:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  41156a:	4403      	add	r3, r0
  41156c:	f8ad 301e 	strh.w	r3, [sp, #30]
    const uint8_t * s8 = (const uint8_t *)src;
  411570:	ac06      	add	r4, sp, #24
    uint8_t * d8 = (uint8_t *)dst;
  411572:	a804      	add	r0, sp, #16
  411574:	2308      	movs	r3, #8
  411576:	e004      	b.n	411582 <draw_outline+0x62>
        *d8 = *s8;
  411578:	f814 5b01 	ldrb.w	r5, [r4], #1
  41157c:	f800 5b01 	strb.w	r5, [r0], #1
        len--;
  411580:	3b01      	subs	r3, #1
    while(len) {
  411582:	2b00      	cmp	r3, #0
  411584:	d1f8      	bne.n	411578 <draw_outline+0x58>
  411586:	4610      	mov	r0, r2
  411588:	460a      	mov	r2, r1
    area_outer.x1 -= dsc->outline_width;
  41158a:	8b43      	ldrh	r3, [r0, #26]
  41158c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  411590:	1ae4      	subs	r4, r4, r3
  411592:	f8ad 4010 	strh.w	r4, [sp, #16]
    area_outer.x2 += dsc->outline_width;
  411596:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  41159a:	441c      	add	r4, r3
  41159c:	f8ad 4014 	strh.w	r4, [sp, #20]
    area_outer.y1 -= dsc->outline_width;
  4115a0:	f8bd 4012 	ldrh.w	r4, [sp, #18]
  4115a4:	1ae4      	subs	r4, r4, r3
  4115a6:	f8ad 4012 	strh.w	r4, [sp, #18]
    area_outer.y2 += dsc->outline_width;
  4115aa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  4115ae:	440b      	add	r3, r1
  4115b0:	f8ad 3016 	strh.w	r3, [sp, #22]
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
  4115b4:	f9b0 3000 	ldrsh.w	r3, [r0]
  4115b8:	7fc1      	ldrb	r1, [r0, #31]
  4115ba:	9103      	str	r1, [sp, #12]
  4115bc:	7f81      	ldrb	r1, [r0, #30]
  4115be:	9102      	str	r1, [sp, #8]
  4115c0:	8b01      	ldrh	r1, [r0, #24]
  4115c2:	f8ad 1004 	strh.w	r1, [sp, #4]
  4115c6:	2101      	movs	r1, #1
  4115c8:	9100      	str	r1, [sp, #0]
  4115ca:	a904      	add	r1, sp, #16
  4115cc:	a806      	add	r0, sp, #24
  4115ce:	4c02      	ldr	r4, [pc, #8]	; (4115d8 <draw_outline+0xb8>)
  4115d0:	47a0      	blx	r4
}
  4115d2:	b009      	add	sp, #36	; 0x24
  4115d4:	bd30      	pop	{r4, r5, pc}
  4115d6:	4770      	bx	lr
  4115d8:	00410ffd 	.word	0x00410ffd

004115dc <draw_border>:
    if(dsc->border_opa <= LV_OPA_MIN) return;
  4115dc:	7d13      	ldrb	r3, [r2, #20]
  4115de:	2b02      	cmp	r3, #2
  4115e0:	f240 8197 	bls.w	411912 <draw_border+0x336>
    if(dsc->border_width == 0) return;
  4115e4:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  4115e8:	2b00      	cmp	r3, #0
  4115ea:	f000 8192 	beq.w	411912 <draw_border+0x336>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
  4115ee:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
  4115f2:	2b00      	cmp	r3, #0
  4115f4:	f000 818d 	beq.w	411912 <draw_border+0x336>
    if(dsc->border_post) return;
  4115f8:	7d93      	ldrb	r3, [r2, #22]
  4115fa:	f013 0f01 	tst.w	r3, #1
  4115fe:	f040 8188 	bne.w	411912 <draw_border+0x336>
{
  411602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411606:	b0a3      	sub	sp, #140	; 0x8c
  411608:	8885      	ldrh	r5, [r0, #4]
  41160a:	8803      	ldrh	r3, [r0, #0]
  41160c:	1aed      	subs	r5, r5, r3
  41160e:	b2ad      	uxth	r5, r5
  411610:	3501      	adds	r5, #1
  411612:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411614:	88c3      	ldrh	r3, [r0, #6]
  411616:	8844      	ldrh	r4, [r0, #2]
  411618:	1b1b      	subs	r3, r3, r4
  41161a:	b29b      	uxth	r3, r3
  41161c:	3301      	adds	r3, #1
  41161e:	b21b      	sxth	r3, r3
    int32_t rout = dsc->radius;
  411620:	f9b2 4000 	ldrsh.w	r4, [r2]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  411624:	429d      	cmp	r5, r3
  411626:	bfa8      	it	ge
  411628:	461d      	movge	r5, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
  41162a:	106d      	asrs	r5, r5, #1
  41162c:	42ac      	cmp	r4, r5
  41162e:	dc00      	bgt.n	411632 <draw_border+0x56>
    int32_t rout = dsc->radius;
  411630:	4625      	mov	r5, r4
    const uint8_t * s8 = (const uint8_t *)src;
  411632:	4606      	mov	r6, r0
    uint8_t * d8 = (uint8_t *)dst;
  411634:	ac20      	add	r4, sp, #128	; 0x80
  411636:	2308      	movs	r3, #8
  411638:	e004      	b.n	411644 <draw_border+0x68>
        *d8 = *s8;
  41163a:	f816 7b01 	ldrb.w	r7, [r6], #1
  41163e:	f804 7b01 	strb.w	r7, [r4], #1
        len--;
  411642:	3b01      	subs	r3, #1
    while(len) {
  411644:	2b00      	cmp	r3, #0
  411646:	d1f8      	bne.n	41163a <draw_border+0x5e>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  411648:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
  41164c:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
  411650:	b2b4      	uxth	r4, r6
  411652:	f014 0f04 	tst.w	r4, #4
  411656:	d039      	beq.n	4116cc <draw_border+0xf0>
  411658:	8a13      	ldrh	r3, [r2, #16]
  41165a:	443b      	add	r3, r7
  41165c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  411660:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
  411664:	f014 0f08 	tst.w	r4, #8
  411668:	d036      	beq.n	4116d8 <draw_border+0xfc>
  41166a:	8a13      	ldrh	r3, [r2, #16]
  41166c:	1afb      	subs	r3, r7, r3
  41166e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  411672:	f8bd 7082 	ldrh.w	r7, [sp, #130]	; 0x82
  411676:	f014 0f02 	tst.w	r4, #2
  41167a:	d033      	beq.n	4116e4 <draw_border+0x108>
  41167c:	8a13      	ldrh	r3, [r2, #16]
  41167e:	443b      	add	r3, r7
  411680:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  411684:	f8bd 7086 	ldrh.w	r7, [sp, #134]	; 0x86
  411688:	f014 0f01 	tst.w	r4, #1
  41168c:	d030      	beq.n	4116f0 <draw_border+0x114>
  41168e:	8a13      	ldrh	r3, [r2, #16]
  411690:	4692      	mov	sl, r2
  411692:	9105      	str	r1, [sp, #20]
  411694:	4604      	mov	r4, r0
  411696:	1afb      	subs	r3, r7, r3
  411698:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
  41169c:	2e0f      	cmp	r6, #15
  41169e:	d02d      	beq.n	4116fc <draw_border+0x120>
        lv_opa_t opa = dsc->border_opa;
  4116a0:	f892 9014 	ldrb.w	r9, [r2, #20]
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  4116a4:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
  4116a8:	d901      	bls.n	4116ae <draw_border+0xd2>
  4116aa:	f04f 09ff 	mov.w	r9, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  4116ae:	4b99      	ldr	r3, [pc, #612]	; (411914 <draw_border+0x338>)
  4116b0:	4798      	blx	r3
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4116b2:	4b99      	ldr	r3, [pc, #612]	; (411918 <draw_border+0x33c>)
  4116b4:	4798      	blx	r3
  4116b6:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
  4116b8:	9a05      	ldr	r2, [sp, #20]
  4116ba:	4621      	mov	r1, r4
  4116bc:	a80e      	add	r0, sp, #56	; 0x38
  4116be:	4b97      	ldr	r3, [pc, #604]	; (41191c <draw_border+0x340>)
  4116c0:	4798      	blx	r3
        if(is_common == false) return;
  4116c2:	2800      	cmp	r0, #0
  4116c4:	d12d      	bne.n	411722 <draw_border+0x146>
}
  4116c6:	b023      	add	sp, #140	; 0x8c
  4116c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  4116cc:	8a13      	ldrh	r3, [r2, #16]
  4116ce:	442b      	add	r3, r5
  4116d0:	b29b      	uxth	r3, r3
  4116d2:	425b      	negs	r3, r3
  4116d4:	b29b      	uxth	r3, r3
  4116d6:	e7c0      	b.n	41165a <draw_border+0x7e>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  4116d8:	8a13      	ldrh	r3, [r2, #16]
  4116da:	442b      	add	r3, r5
  4116dc:	b29b      	uxth	r3, r3
  4116de:	425b      	negs	r3, r3
  4116e0:	b29b      	uxth	r3, r3
  4116e2:	e7c3      	b.n	41166c <draw_border+0x90>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  4116e4:	8a13      	ldrh	r3, [r2, #16]
  4116e6:	442b      	add	r3, r5
  4116e8:	b29b      	uxth	r3, r3
  4116ea:	425b      	negs	r3, r3
  4116ec:	b29b      	uxth	r3, r3
  4116ee:	e7c6      	b.n	41167e <draw_border+0xa2>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  4116f0:	8a13      	ldrh	r3, [r2, #16]
  4116f2:	442b      	add	r3, r5
  4116f4:	b29b      	uxth	r3, r3
  4116f6:	425b      	negs	r3, r3
  4116f8:	b29b      	uxth	r3, r3
  4116fa:	e7c9      	b.n	411690 <draw_border+0xb4>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
  4116fc:	f9b2 3000 	ldrsh.w	r3, [r2]
  411700:	7d52      	ldrb	r2, [r2, #21]
  411702:	9203      	str	r2, [sp, #12]
  411704:	f89a 2014 	ldrb.w	r2, [sl, #20]
  411708:	9202      	str	r2, [sp, #8]
  41170a:	f8ba 200e 	ldrh.w	r2, [sl, #14]
  41170e:	f8ad 2004 	strh.w	r2, [sp, #4]
  411712:	2200      	movs	r2, #0
  411714:	9200      	str	r2, [sp, #0]
  411716:	460a      	mov	r2, r1
  411718:	4601      	mov	r1, r0
  41171a:	a820      	add	r0, sp, #128	; 0x80
  41171c:	4c80      	ldr	r4, [pc, #512]	; (411920 <draw_border+0x344>)
  41171e:	47a0      	blx	r4
  411720:	e7d1      	b.n	4116c6 <draw_border+0xea>
        draw_area.x1 -= disp_area->x1;
  411722:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  411726:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  41172a:	1a5b      	subs	r3, r3, r1
  41172c:	b29a      	uxth	r2, r3
  41172e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        draw_area.y1 -= disp_area->y1;
  411732:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  411736:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  41173a:	1a1b      	subs	r3, r3, r0
  41173c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        draw_area.x2 -= disp_area->x1;
  411740:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  411744:	1a5b      	subs	r3, r3, r1
  411746:	b29b      	uxth	r3, r3
  411748:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        draw_area.y2 -= disp_area->y1;
  41174c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  411750:	1a09      	subs	r1, r1, r0
  411752:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411756:	1a9b      	subs	r3, r3, r2
  411758:	b29b      	uxth	r3, r3
  41175a:	3301      	adds	r3, #1
  41175c:	b21b      	sxth	r3, r3
  41175e:	9308      	str	r3, [sp, #32]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  411760:	9306      	str	r3, [sp, #24]
  411762:	4618      	mov	r0, r3
  411764:	4b6f      	ldr	r3, [pc, #444]	; (411924 <draw_border+0x348>)
  411766:	4798      	blx	r3
  411768:	4607      	mov	r7, r0
        if(rout > 0) {
  41176a:	2d00      	cmp	r5, #0
  41176c:	dd53      	ble.n	411816 <draw_border+0x23a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
  41176e:	2300      	movs	r3, #0
  411770:	462a      	mov	r2, r5
  411772:	4621      	mov	r1, r4
  411774:	a812      	add	r0, sp, #72	; 0x48
  411776:	4e6c      	ldr	r6, [pc, #432]	; (411928 <draw_border+0x34c>)
  411778:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  41177a:	2100      	movs	r1, #0
  41177c:	a812      	add	r0, sp, #72	; 0x48
  41177e:	4b6b      	ldr	r3, [pc, #428]	; (41192c <draw_border+0x350>)
  411780:	4798      	blx	r3
  411782:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
  411784:	f8ba 2010 	ldrh.w	r2, [sl, #16]
  411788:	1aaa      	subs	r2, r5, r2
  41178a:	2301      	movs	r3, #1
  41178c:	b212      	sxth	r2, r2
  41178e:	a920      	add	r1, sp, #128	; 0x80
  411790:	a819      	add	r0, sp, #100	; 0x64
  411792:	4e65      	ldr	r6, [pc, #404]	; (411928 <draw_border+0x34c>)
  411794:	47b0      	blx	r6
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  411796:	2100      	movs	r1, #0
  411798:	a819      	add	r0, sp, #100	; 0x64
  41179a:	4b64      	ldr	r3, [pc, #400]	; (41192c <draw_border+0x350>)
  41179c:	4798      	blx	r3
  41179e:	900b      	str	r0, [sp, #44]	; 0x2c
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
  4117a0:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
  4117a4:	3b01      	subs	r3, #1
  4117a6:	429d      	cmp	r5, r3
  4117a8:	bfb8      	it	lt
  4117aa:	461d      	movlt	r5, r3
        lv_color_t color = dsc->border_color;
  4117ac:	f8ba 300e 	ldrh.w	r3, [sl, #14]
  4117b0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
  4117b4:	f89a 3015 	ldrb.w	r3, [sl, #21]
  4117b8:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
  4117ba:	f9b4 3000 	ldrsh.w	r3, [r4]
  4117be:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = coords->x2;
  4117c2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4117c6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  4117ca:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  4117ce:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
  4117d2:	fa13 f386 	uxtah	r3, r3, r6
  4117d6:	b21b      	sxth	r3, r3
  4117d8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
  4117dc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  4117e0:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  4117e4:	2b04      	cmp	r3, #4
  4117e6:	d01a      	beq.n	41181e <draw_border+0x242>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
  4117e8:	2b08      	cmp	r3, #8
  4117ea:	d01f      	beq.n	41182c <draw_border+0x250>
        uint32_t buf_ofs = 0;
  4117ec:	f04f 0b00 	mov.w	fp, #0
        volatile bool top_only = false;
  4117f0:	2200      	movs	r2, #0
  4117f2:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
        volatile bool bottom_only = false;
  4117f6:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  4117fa:	2b02      	cmp	r3, #2
  4117fc:	d023      	beq.n	411846 <draw_border+0x26a>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  4117fe:	2b01      	cmp	r3, #1
  411800:	d025      	beq.n	41184e <draw_border+0x272>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
  411802:	2b03      	cmp	r3, #3
  411804:	d027      	beq.n	411856 <draw_border+0x27a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  411806:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
  41180a:	bb53      	cbnz	r3, 411862 <draw_border+0x286>
  41180c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
  411810:	b363      	cbz	r3, 41186c <draw_border+0x290>
  411812:	2300      	movs	r3, #0
  411814:	e026      	b.n	411864 <draw_border+0x288>
        int16_t mask_rout_id = LV_MASK_ID_INV;
  411816:	f04f 33ff 	mov.w	r3, #4294967295
  41181a:	930a      	str	r3, [sp, #40]	; 0x28
  41181c:	e7b2      	b.n	411784 <draw_border+0x1a8>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  41181e:	8822      	ldrh	r2, [r4, #0]
  411820:	442a      	add	r2, r5
  411822:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        uint32_t buf_ofs = 0;
  411826:	f04f 0b00 	mov.w	fp, #0
  41182a:	e7e1      	b.n	4117f0 <draw_border+0x214>
            fill_area.x1 = coords->x2 - corner_size;
  41182c:	f8b4 b004 	ldrh.w	fp, [r4, #4]
  411830:	ebab 0b05 	sub.w	fp, fp, r5
  411834:	fa0f fb8b 	sxth.w	fp, fp
  411838:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
            buf_ofs = fill_area.x1 - coords->x1;
  41183c:	f9b4 2000 	ldrsh.w	r2, [r4]
  411840:	ebab 0b02 	sub.w	fp, fp, r2
  411844:	e7d4      	b.n	4117f0 <draw_border+0x214>
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  411846:	2201      	movs	r2, #1
  411848:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  41184c:	e7d7      	b.n	4117fe <draw_border+0x222>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  41184e:	2201      	movs	r2, #1
  411850:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  411854:	e7d5      	b.n	411802 <draw_border+0x226>
            top_only = true;
  411856:	2301      	movs	r3, #1
  411858:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            bottom_only = true;
  41185c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  411860:	e7d1      	b.n	411806 <draw_border+0x22a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  411862:	2300      	movs	r3, #0
  411864:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  411868:	46a2      	mov	sl, r4
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  41186a:	e02b      	b.n	4118c4 <draw_border+0x2e8>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  41186c:	2301      	movs	r3, #1
  41186e:	e7f9      	b.n	411864 <draw_border+0x288>
                _lv_memset_ff(mask_buf, draw_area_w);
  411870:	9906      	ldr	r1, [sp, #24]
  411872:	4638      	mov	r0, r7
  411874:	4b2e      	ldr	r3, [pc, #184]	; (411930 <draw_border+0x354>)
  411876:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411878:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  41187c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  411880:	4419      	add	r1, r3
  411882:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  411886:	4432      	add	r2, r6
  411888:	9b08      	ldr	r3, [sp, #32]
  41188a:	b212      	sxth	r2, r2
  41188c:	b209      	sxth	r1, r1
  41188e:	4638      	mov	r0, r7
  411890:	4c28      	ldr	r4, [pc, #160]	; (411934 <draw_border+0x358>)
  411892:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
  411894:	9b07      	ldr	r3, [sp, #28]
  411896:	9302      	str	r3, [sp, #8]
  411898:	f8cd 9004 	str.w	r9, [sp, #4]
  41189c:	9000      	str	r0, [sp, #0]
  41189e:	eb07 030b 	add.w	r3, r7, fp
  4118a2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  4118a6:	a910      	add	r1, sp, #64	; 0x40
  4118a8:	9805      	ldr	r0, [sp, #20]
  4118aa:	4c23      	ldr	r4, [pc, #140]	; (411938 <draw_border+0x35c>)
  4118ac:	47a0      	blx	r4
            fill_area.y1++;
  4118ae:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
  4118b2:	3301      	adds	r3, #1
  4118b4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
  4118b8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4118bc:	3301      	adds	r3, #1
  4118be:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4118c2:	3601      	adds	r6, #1
  4118c4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  4118c8:	429e      	cmp	r6, r3
  4118ca:	dc19      	bgt.n	411900 <draw_border+0x324>
            if(normal ||
  4118cc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  4118d0:	2b00      	cmp	r3, #0
  4118d2:	d1cd      	bne.n	411870 <draw_border+0x294>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  4118d4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
            if(normal ||
  4118d8:	b133      	cbz	r3, 4118e8 <draw_border+0x30c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  4118da:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  4118de:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  4118e2:	442b      	add	r3, r5
  4118e4:	429a      	cmp	r2, r3
  4118e6:	ddc3      	ble.n	411870 <draw_border+0x294>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  4118e8:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  4118ec:	2b00      	cmp	r3, #0
  4118ee:	d0de      	beq.n	4118ae <draw_border+0x2d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  4118f0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  4118f4:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
  4118f8:	1b5b      	subs	r3, r3, r5
  4118fa:	429a      	cmp	r2, r3
  4118fc:	dbd7      	blt.n	4118ae <draw_border+0x2d2>
  4118fe:	e7b7      	b.n	411870 <draw_border+0x294>
        lv_draw_mask_remove_id(mask_rin_id);
  411900:	980b      	ldr	r0, [sp, #44]	; 0x2c
  411902:	4c0e      	ldr	r4, [pc, #56]	; (41193c <draw_border+0x360>)
  411904:	47a0      	blx	r4
        lv_draw_mask_remove_id(mask_rout_id);
  411906:	980a      	ldr	r0, [sp, #40]	; 0x28
  411908:	47a0      	blx	r4
        _lv_mem_buf_release(mask_buf);
  41190a:	4638      	mov	r0, r7
  41190c:	4b0c      	ldr	r3, [pc, #48]	; (411940 <draw_border+0x364>)
  41190e:	4798      	blx	r3
  411910:	e6d9      	b.n	4116c6 <draw_border+0xea>
  411912:	4770      	bx	lr
  411914:	004097a1 	.word	0x004097a1
  411918:	00414df5 	.word	0x00414df5
  41191c:	004155b3 	.word	0x004155b3
  411920:	00410ffd 	.word	0x00410ffd
  411924:	00416965 	.word	0x00416965
  411928:	0040fe2d 	.word	0x0040fe2d
  41192c:	0040fbb1 	.word	0x0040fbb1
  411930:	00416b49 	.word	0x00416b49
  411934:	0040fbe5 	.word	0x0040fbe5
  411938:	0040c871 	.word	0x0040c871
  41193c:	0040fc35 	.word	0x0040fc35
  411940:	00416715 	.word	0x00416715

00411944 <draw_pattern>:
    if(dsc->pattern_image == NULL) return;
  411944:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  411946:	2b00      	cmp	r3, #0
  411948:	f000 814e 	beq.w	411be8 <draw_pattern+0x2a4>
{
  41194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411950:	b09f      	sub	sp, #124	; 0x7c
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
  411952:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
  411956:	2c02      	cmp	r4, #2
  411958:	d802      	bhi.n	411960 <draw_pattern+0x1c>
}
  41195a:	b01f      	add	sp, #124	; 0x7c
  41195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411960:	4614      	mov	r4, r2
  411962:	460e      	mov	r6, r1
  411964:	4605      	mov	r5, r0
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
  411966:	4618      	mov	r0, r3
  411968:	4ba0      	ldr	r3, [pc, #640]	; (411bec <draw_pattern+0x2a8>)
  41196a:	4798      	blx	r3
  41196c:	4680      	mov	r8, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
  41196e:	2801      	cmp	r0, #1
  411970:	d908      	bls.n	411984 <draw_pattern+0x40>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  411972:	2802      	cmp	r0, #2
  411974:	d022      	beq.n	4119bc <draw_pattern+0x78>
        lv_draw_img(coords, clip, NULL, NULL);
  411976:	2300      	movs	r3, #0
  411978:	461a      	mov	r2, r3
  41197a:	4631      	mov	r1, r6
  41197c:	4628      	mov	r0, r5
  41197e:	4c9c      	ldr	r4, [pc, #624]	; (411bf0 <draw_pattern+0x2ac>)
  411980:	47a0      	blx	r4
        return;
  411982:	e7ea      	b.n	41195a <draw_pattern+0x16>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
  411984:	a907      	add	r1, sp, #28
  411986:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  411988:	4b9a      	ldr	r3, [pc, #616]	; (411bf4 <draw_pattern+0x2b0>)
  41198a:	4798      	blx	r3
        if(res != LV_RES_OK) {
  41198c:	2801      	cmp	r0, #1
  41198e:	d1e4      	bne.n	41195a <draw_pattern+0x16>
        img_w = header.w;
  411990:	9b07      	ldr	r3, [sp, #28]
  411992:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
        img_h = header.h;
  411996:	f8bd a01e 	ldrh.w	sl, [sp, #30]
  41199a:	f3ca 1a4a 	ubfx	sl, sl, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
  41199e:	a81a      	add	r0, sp, #104	; 0x68
  4119a0:	4b95      	ldr	r3, [pc, #596]	; (411bf8 <draw_pattern+0x2b4>)
  4119a2:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
  4119a4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4119a8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
  4119ac:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  4119b0:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
  4119b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  4119b6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  4119ba:	e01d      	b.n	4119f8 <draw_pattern+0xb4>
        lv_draw_label_dsc_init(&label_dsc);
  4119bc:	a811      	add	r0, sp, #68	; 0x44
  4119be:	4b8f      	ldr	r3, [pc, #572]	; (411bfc <draw_pattern+0x2b8>)
  4119c0:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
  4119c2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  4119c4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        label_dsc.font = dsc->pattern_font;
  4119c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
  4119ca:	9213      	str	r2, [sp, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
  4119cc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4119d0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
  4119d4:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
  4119d8:	2100      	movs	r1, #0
  4119da:	9102      	str	r1, [sp, #8]
  4119dc:	f647 4118 	movw	r1, #31768	; 0x7c18
  4119e0:	9101      	str	r1, [sp, #4]
  4119e2:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
  4119e6:	9100      	str	r1, [sp, #0]
  4119e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4119ea:	a807      	add	r0, sp, #28
  4119ec:	4f84      	ldr	r7, [pc, #528]	; (411c00 <draw_pattern+0x2bc>)
  4119ee:	47b8      	blx	r7
        img_w = s.x;
  4119f0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
        img_h = s.y;
  4119f4:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
    if(img_w == 0 || img_h == 0) return;
  4119f8:	f1ba 0f00 	cmp.w	sl, #0
  4119fc:	bf18      	it	ne
  4119fe:	f1bb 0f00 	cmpne.w	fp, #0
  411a02:	d0aa      	beq.n	41195a <draw_pattern+0x16>
    if(dsc->pattern_repeat) {
  411a04:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  411a08:	f013 0f01 	tst.w	r3, #1
  411a0c:	d148      	bne.n	411aa0 <draw_pattern+0x15c>
  411a0e:	88a8      	ldrh	r0, [r5, #4]
  411a10:	882b      	ldrh	r3, [r5, #0]
  411a12:	1ac0      	subs	r0, r0, r3
  411a14:	b280      	uxth	r0, r0
  411a16:	3001      	adds	r0, #1
  411a18:	b200      	sxth	r0, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411a1a:	88ea      	ldrh	r2, [r5, #6]
  411a1c:	8869      	ldrh	r1, [r5, #2]
  411a1e:	1a52      	subs	r2, r2, r1
  411a20:	b292      	uxth	r2, r2
  411a22:	3201      	adds	r2, #1
  411a24:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  411a26:	ebb0 000b 	subs.w	r0, r0, fp
  411a2a:	f100 80ba 	bmi.w	411ba2 <draw_pattern+0x25e>
  411a2e:	eb03 0360 	add.w	r3, r3, r0, asr #1
  411a32:	b29b      	uxth	r3, r3
  411a34:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  411a38:	eba2 020a 	sub.w	r2, r2, sl
  411a3c:	4610      	mov	r0, r2
  411a3e:	2a00      	cmp	r2, #0
  411a40:	f2c0 80b1 	blt.w	411ba6 <draw_pattern+0x262>
  411a44:	eb01 0160 	add.w	r1, r1, r0, asr #1
  411a48:	b289      	uxth	r1, r1
  411a4a:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  411a4e:	445b      	add	r3, fp
  411a50:	b29b      	uxth	r3, r3
  411a52:	3b01      	subs	r3, #1
  411a54:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  411a58:	eb01 030a 	add.w	r3, r1, sl
  411a5c:	b29b      	uxth	r3, r3
  411a5e:	3b01      	subs	r3, #1
  411a60:	b29b      	uxth	r3, r3
  411a62:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(src_type == LV_IMG_SRC_SYMBOL) {
  411a66:	f1b8 0f02 	cmp.w	r8, #2
  411a6a:	f000 809e 	beq.w	411baa <draw_pattern+0x266>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
  411a6e:	f9b4 2000 	ldrsh.w	r2, [r4]
  411a72:	4629      	mov	r1, r5
  411a74:	a80f      	add	r0, sp, #60	; 0x3c
  411a76:	4b63      	ldr	r3, [pc, #396]	; (411c04 <draw_pattern+0x2c0>)
  411a78:	4798      	blx	r3
  411a7a:	2800      	cmp	r0, #0
  411a7c:	f000 809e 	beq.w	411bbc <draw_pattern+0x278>
        int16_t radius_mask_id = LV_MASK_ID_INV;
  411a80:	f04f 35ff 	mov.w	r5, #4294967295
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411a84:	f1b8 0f02 	cmp.w	r8, #2
  411a88:	f000 80a5 	beq.w	411bd6 <draw_pattern+0x292>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  411a8c:	ab1a      	add	r3, sp, #104	; 0x68
  411a8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  411a90:	4631      	mov	r1, r6
  411a92:	a80f      	add	r0, sp, #60	; 0x3c
  411a94:	4c56      	ldr	r4, [pc, #344]	; (411bf0 <draw_pattern+0x2ac>)
  411a96:	47a0      	blx	r4
        lv_draw_mask_remove_id(radius_mask_id);
  411a98:	4628      	mov	r0, r5
  411a9a:	4b5b      	ldr	r3, [pc, #364]	; (411c08 <draw_pattern+0x2c4>)
  411a9c:	4798      	blx	r3
  411a9e:	e75c      	b.n	41195a <draw_pattern+0x16>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  411aa0:	2300      	movs	r3, #0
  411aa2:	f9b4 2000 	ldrsh.w	r2, [r4]
  411aa6:	4629      	mov	r1, r5
  411aa8:	a808      	add	r0, sp, #32
  411aaa:	4f58      	ldr	r7, [pc, #352]	; (411c0c <draw_pattern+0x2c8>)
  411aac:	47b8      	blx	r7
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  411aae:	2100      	movs	r1, #0
  411ab0:	a808      	add	r0, sp, #32
  411ab2:	4b57      	ldr	r3, [pc, #348]	; (411c10 <draw_pattern+0x2cc>)
  411ab4:	4798      	blx	r3
  411ab6:	9005      	str	r0, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411ab8:	88ab      	ldrh	r3, [r5, #4]
  411aba:	882a      	ldrh	r2, [r5, #0]
  411abc:	1a9b      	subs	r3, r3, r2
  411abe:	b29b      	uxth	r3, r3
  411ac0:	3301      	adds	r3, #1
  411ac2:	b21b      	sxth	r3, r3
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  411ac4:	fb93 f2fb 	sdiv	r2, r3, fp
  411ac8:	fb02 331b 	mls	r3, r2, fp, r3
  411acc:	2b00      	cmp	r3, #0
  411ace:	db1e      	blt.n	411b0e <draw_pattern+0x1ca>
  411ad0:	105b      	asrs	r3, r3, #1
  411ad2:	4618      	mov	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411ad4:	88ea      	ldrh	r2, [r5, #6]
  411ad6:	886b      	ldrh	r3, [r5, #2]
  411ad8:	1ad2      	subs	r2, r2, r3
  411ada:	b292      	uxth	r2, r2
  411adc:	3201      	adds	r2, #1
  411ade:	b212      	sxth	r2, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  411ae0:	fb92 f1fa 	sdiv	r1, r2, sl
  411ae4:	fb01 221a 	mls	r2, r1, sl, r2
  411ae8:	2a00      	cmp	r2, #0
  411aea:	db12      	blt.n	411b12 <draw_pattern+0x1ce>
        coords_tmp.y1 = coords->y1 - ofs_y;
  411aec:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  411af0:	b29b      	uxth	r3, r3
  411af2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  411af6:	fa1f fa8a 	uxth.w	sl, sl
  411afa:	4453      	add	r3, sl
  411afc:	b29b      	uxth	r3, r3
  411afe:	3b01      	subs	r3, #1
  411b00:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  411b04:	f8cd b010 	str.w	fp, [sp, #16]
  411b08:	4683      	mov	fp, r0
  411b0a:	46a1      	mov	r9, r4
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  411b0c:	e031      	b.n	411b72 <draw_pattern+0x22e>
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  411b0e:	3301      	adds	r3, #1
  411b10:	e7de      	b.n	411ad0 <draw_pattern+0x18c>
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  411b12:	3201      	adds	r2, #1
  411b14:	e7ea      	b.n	411aec <draw_pattern+0x1a8>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411b16:	2300      	movs	r3, #0
  411b18:	9300      	str	r3, [sp, #0]
  411b1a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  411b1e:	aa11      	add	r2, sp, #68	; 0x44
  411b20:	4631      	mov	r1, r6
  411b22:	a80f      	add	r0, sp, #60	; 0x3c
  411b24:	4c3b      	ldr	r4, [pc, #236]	; (411c14 <draw_pattern+0x2d0>)
  411b26:	47a0      	blx	r4
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  411b28:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  411b2c:	443b      	add	r3, r7
  411b2e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  411b32:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  411b36:	443b      	add	r3, r7
  411b38:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  411b3c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  411b40:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  411b44:	429a      	cmp	r2, r3
  411b46:	dc0a      	bgt.n	411b5e <draw_pattern+0x21a>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411b48:	f1b8 0f02 	cmp.w	r8, #2
  411b4c:	d0e3      	beq.n	411b16 <draw_pattern+0x1d2>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  411b4e:	ab1a      	add	r3, sp, #104	; 0x68
  411b50:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
  411b54:	4631      	mov	r1, r6
  411b56:	a80f      	add	r0, sp, #60	; 0x3c
  411b58:	4c25      	ldr	r4, [pc, #148]	; (411bf0 <draw_pattern+0x2ac>)
  411b5a:	47a0      	blx	r4
  411b5c:	e7e4      	b.n	411b28 <draw_pattern+0x1e4>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  411b5e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
  411b62:	4453      	add	r3, sl
  411b64:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  411b68:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  411b6c:	4453      	add	r3, sl
  411b6e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  411b72:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  411b76:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  411b7a:	429a      	cmp	r2, r3
  411b7c:	dc0d      	bgt.n	411b9a <draw_pattern+0x256>
            coords_tmp.x1 = coords->x1 - ofs_x;
  411b7e:	882b      	ldrh	r3, [r5, #0]
  411b80:	eba3 030b 	sub.w	r3, r3, fp
  411b84:	b29b      	uxth	r3, r3
  411b86:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  411b8a:	f8bd 7010 	ldrh.w	r7, [sp, #16]
  411b8e:	443b      	add	r3, r7
  411b90:	b29b      	uxth	r3, r3
  411b92:	3b01      	subs	r3, #1
  411b94:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  411b98:	e7d0      	b.n	411b3c <draw_pattern+0x1f8>
        lv_draw_mask_remove_id(radius_mask_id);
  411b9a:	9805      	ldr	r0, [sp, #20]
  411b9c:	4b1a      	ldr	r3, [pc, #104]	; (411c08 <draw_pattern+0x2c4>)
  411b9e:	4798      	blx	r3
  411ba0:	e6db      	b.n	41195a <draw_pattern+0x16>
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  411ba2:	3001      	adds	r0, #1
  411ba4:	e743      	b.n	411a2e <draw_pattern+0xea>
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  411ba6:	1c50      	adds	r0, r2, #1
  411ba8:	e74c      	b.n	411a44 <draw_pattern+0x100>
            coords_tmp.y1 += y_corr;
  411baa:	f002 0201 	and.w	r2, r2, #1
  411bae:	4411      	add	r1, r2
  411bb0:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            coords_tmp.y2 += y_corr;
  411bb4:	4413      	add	r3, r2
  411bb6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  411bba:	e758      	b.n	411a6e <draw_pattern+0x12a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  411bbc:	2300      	movs	r3, #0
  411bbe:	f9b4 2000 	ldrsh.w	r2, [r4]
  411bc2:	4629      	mov	r1, r5
  411bc4:	a808      	add	r0, sp, #32
  411bc6:	4d11      	ldr	r5, [pc, #68]	; (411c0c <draw_pattern+0x2c8>)
  411bc8:	47a8      	blx	r5
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  411bca:	2100      	movs	r1, #0
  411bcc:	a808      	add	r0, sp, #32
  411bce:	4b10      	ldr	r3, [pc, #64]	; (411c10 <draw_pattern+0x2cc>)
  411bd0:	4798      	blx	r3
  411bd2:	4605      	mov	r5, r0
  411bd4:	e756      	b.n	411a84 <draw_pattern+0x140>
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411bd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  411bd8:	2200      	movs	r2, #0
  411bda:	9200      	str	r2, [sp, #0]
  411bdc:	aa11      	add	r2, sp, #68	; 0x44
  411bde:	4631      	mov	r1, r6
  411be0:	a80f      	add	r0, sp, #60	; 0x3c
  411be2:	4c0c      	ldr	r4, [pc, #48]	; (411c14 <draw_pattern+0x2d0>)
  411be4:	47a0      	blx	r4
  411be6:	e757      	b.n	411a98 <draw_pattern+0x154>
  411be8:	4770      	bx	lr
  411bea:	bf00      	nop
  411bec:	0040d62d 	.word	0x0040d62d
  411bf0:	0040d5ed 	.word	0x0040d5ed
  411bf4:	00413909 	.word	0x00413909
  411bf8:	0040d341 	.word	0x0040d341
  411bfc:	0040ded5 	.word	0x0040ded5
  411c00:	00417e85 	.word	0x00417e85
  411c04:	00415829 	.word	0x00415829
  411c08:	0040fc35 	.word	0x0040fc35
  411c0c:	0040fe2d 	.word	0x0040fe2d
  411c10:	0040fbb1 	.word	0x0040fbb1
  411c14:	0040df1d 	.word	0x0040df1d

00411c18 <draw_value_str>:
{
  411c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  411c1c:	b093      	sub	sp, #76	; 0x4c
    if(dsc->value_str == NULL) return;
  411c1e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  411c20:	b11d      	cbz	r5, 411c2a <draw_value_str+0x12>
    if(dsc->value_opa <= LV_OPA_MIN) return;
  411c22:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
  411c26:	2b02      	cmp	r3, #2
  411c28:	d802      	bhi.n	411c30 <draw_value_str+0x18>
}
  411c2a:	b013      	add	sp, #76	; 0x4c
  411c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411c30:	4614      	mov	r4, r2
  411c32:	460e      	mov	r6, r1
  411c34:	4680      	mov	r8, r0
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
  411c36:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
  411c3a:	2700      	movs	r7, #0
  411c3c:	9702      	str	r7, [sp, #8]
  411c3e:	f647 4218 	movw	r2, #31768	; 0x7c18
  411c42:	9201      	str	r2, [sp, #4]
  411c44:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
  411c48:	9200      	str	r2, [sp, #0]
  411c4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  411c4c:	4629      	mov	r1, r5
  411c4e:	a811      	add	r0, sp, #68	; 0x44
  411c50:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 411d04 <draw_value_str+0xec>
  411c54:	47c8      	blx	r9
    value_area.x1 = 0;
  411c56:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
    value_area.y1 = 0;
  411c5a:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
    value_area.x2 = s.x - 1;
  411c5e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  411c62:	3b01      	subs	r3, #1
  411c64:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    value_area.y2 = s.y - 1;
  411c68:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  411c6c:	3b01      	subs	r3, #1
  411c6e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
  411c72:	ab0e      	add	r3, sp, #56	; 0x38
  411c74:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  411c78:	a90f      	add	r1, sp, #60	; 0x3c
  411c7a:	4640      	mov	r0, r8
  411c7c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 411d08 <draw_value_str+0xf0>
  411c80:	47c0      	blx	r8
    value_area.x1 += p_align.x + dsc->value_ofs_x;
  411c82:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  411c86:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  411c8a:	441a      	add	r2, r3
  411c8c:	b292      	uxth	r2, r2
  411c8e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  411c92:	4413      	add	r3, r2
  411c94:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    value_area.y1 += p_align.y + dsc->value_ofs_y;
  411c98:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  411c9c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  411ca0:	440b      	add	r3, r1
  411ca2:	b29b      	uxth	r3, r3
  411ca4:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  411ca8:	4419      	add	r1, r3
  411caa:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    value_area.x2 += p_align.x + dsc->value_ofs_x;
  411cae:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
  411cb2:	440a      	add	r2, r1
  411cb4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    value_area.y2 += p_align.y + dsc->value_ofs_y;
  411cb8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
  411cbc:	4413      	add	r3, r2
  411cbe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    lv_draw_label_dsc_init(&label_dsc);
  411cc2:	a805      	add	r0, sp, #20
  411cc4:	4b0d      	ldr	r3, [pc, #52]	; (411cfc <draw_value_str+0xe4>)
  411cc6:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
  411cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  411cca:	9307      	str	r3, [sp, #28]
    label_dsc.letter_space = dsc->value_letter_space;
  411ccc:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
  411cd0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    label_dsc.line_space = dsc->value_line_space;
  411cd4:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
  411cd8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    label_dsc.color = dsc->value_color;
  411cdc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  411ce0:	f8ad 3014 	strh.w	r3, [sp, #20]
    label_dsc.opa = dsc->value_opa;
  411ce4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  411ce8:	f88d 3020 	strb.w	r3, [sp, #32]
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
  411cec:	9700      	str	r7, [sp, #0]
  411cee:	462b      	mov	r3, r5
  411cf0:	aa05      	add	r2, sp, #20
  411cf2:	4631      	mov	r1, r6
  411cf4:	a80f      	add	r0, sp, #60	; 0x3c
  411cf6:	4c02      	ldr	r4, [pc, #8]	; (411d00 <draw_value_str+0xe8>)
  411cf8:	47a0      	blx	r4
  411cfa:	e796      	b.n	411c2a <draw_value_str+0x12>
  411cfc:	0040ded5 	.word	0x0040ded5
  411d00:	0040df1d 	.word	0x0040df1d
  411d04:	00417e85 	.word	0x00417e85
  411d08:	004158f1 	.word	0x004158f1

00411d0c <draw_bg>:
    if(dsc->bg_opa <= LV_OPA_MIN) return;
  411d0c:	7b13      	ldrb	r3, [r2, #12]
  411d0e:	2b02      	cmp	r3, #2
  411d10:	f240 839c 	bls.w	41244c <draw_bg+0x740>
{
  411d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411d18:	b0a5      	sub	sp, #148	; 0x94
  411d1a:	ad22      	add	r5, sp, #136	; 0x88
  411d1c:	2308      	movs	r3, #8
  411d1e:	e004      	b.n	411d2a <draw_bg+0x1e>
        *d8 = *s8;
  411d20:	f810 6b01 	ldrb.w	r6, [r0], #1
  411d24:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  411d28:	3b01      	subs	r3, #1
    while(len) {
  411d2a:	2b00      	cmp	r3, #0
  411d2c:	d1f8      	bne.n	411d20 <draw_bg+0x14>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
  411d2e:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  411d32:	2b01      	cmp	r3, #1
  411d34:	dd22      	ble.n	411d7c <draw_bg+0x70>
  411d36:	7d13      	ldrb	r3, [r2, #20]
  411d38:	2bfc      	cmp	r3, #252	; 0xfc
  411d3a:	d91f      	bls.n	411d7c <draw_bg+0x70>
  411d3c:	f9b2 3000 	ldrsh.w	r3, [r2]
  411d40:	b1e3      	cbz	r3, 411d7c <draw_bg+0x70>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
  411d42:	8a53      	ldrh	r3, [r2, #18]
  411d44:	f3c3 0080 	ubfx	r0, r3, #2, #1
  411d48:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
  411d4c:	4428      	add	r0, r5
  411d4e:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
  411d52:	f3c3 0040 	ubfx	r0, r3, #1, #1
  411d56:	f8bd 508a 	ldrh.w	r5, [sp, #138]	; 0x8a
  411d5a:	4428      	add	r0, r5
  411d5c:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
  411d60:	f3c3 05c0 	ubfx	r5, r3, #3, #1
  411d64:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  411d68:	1b40      	subs	r0, r0, r5
  411d6a:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
  411d6e:	f003 0301 	and.w	r3, r3, #1
  411d72:	f8bd 008e 	ldrh.w	r0, [sp, #142]	; 0x8e
  411d76:	1ac3      	subs	r3, r0, r3
  411d78:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_opa_t opa = dsc->bg_opa;
  411d7c:	7b13      	ldrb	r3, [r2, #12]
  411d7e:	9305      	str	r3, [sp, #20]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  411d80:	2bfd      	cmp	r3, #253	; 0xfd
  411d82:	d901      	bls.n	411d88 <draw_bg+0x7c>
  411d84:	23ff      	movs	r3, #255	; 0xff
  411d86:	9305      	str	r3, [sp, #20]
  411d88:	4692      	mov	sl, r2
  411d8a:	460d      	mov	r5, r1
  411d8c:	910a      	str	r1, [sp, #40]	; 0x28
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  411d8e:	4bad      	ldr	r3, [pc, #692]	; (412044 <draw_bg+0x338>)
  411d90:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  411d92:	4bad      	ldr	r3, [pc, #692]	; (412048 <draw_bg+0x33c>)
  411d94:	4798      	blx	r3
  411d96:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
  411d98:	462a      	mov	r2, r5
  411d9a:	a922      	add	r1, sp, #136	; 0x88
  411d9c:	a820      	add	r0, sp, #128	; 0x80
  411d9e:	4bab      	ldr	r3, [pc, #684]	; (41204c <draw_bg+0x340>)
  411da0:	4798      	blx	r3
    if(is_common == false) return;
  411da2:	9006      	str	r0, [sp, #24]
  411da4:	b910      	cbnz	r0, 411dac <draw_bg+0xa0>
}
  411da6:	b025      	add	sp, #148	; 0x94
  411da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    draw_area.x1 -= disp_area->x1;
  411dac:	8a39      	ldrh	r1, [r7, #16]
  411dae:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  411db2:	1a5b      	subs	r3, r3, r1
  411db4:	b29a      	uxth	r2, r3
  411db6:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  411dba:	8a7d      	ldrh	r5, [r7, #18]
  411dbc:	f8bd 0082 	ldrh.w	r0, [sp, #130]	; 0x82
  411dc0:	1b40      	subs	r0, r0, r5
  411dc2:	f8ad 0082 	strh.w	r0, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  411dc6:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  411dca:	1a5b      	subs	r3, r3, r1
  411dcc:	b29b      	uxth	r3, r3
  411dce:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  411dd2:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
  411dd6:	1b49      	subs	r1, r1, r5
  411dd8:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411ddc:	1a9b      	subs	r3, r3, r2
  411dde:	b29b      	uxth	r3, r3
  411de0:	3301      	adds	r3, #1
  411de2:	b21b      	sxth	r3, r3
  411de4:	930d      	str	r3, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  411de6:	930c      	str	r3, [sp, #48]	; 0x30
  411de8:	4618      	mov	r0, r3
  411dea:	4b99      	ldr	r3, [pc, #612]	; (412050 <draw_bg+0x344>)
  411dec:	4798      	blx	r3
  411dee:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
  411df0:	f89a 8006 	ldrb.w	r8, [sl, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  411df4:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411df8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  411dfc:	429a      	cmp	r2, r3
  411dfe:	d00a      	beq.n	411e16 <draw_bg+0x10a>
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
  411e00:	4b94      	ldr	r3, [pc, #592]	; (412054 <draw_bg+0x348>)
  411e02:	4798      	blx	r3
  411e04:	b283      	uxth	r3, r0
  411e06:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
  411e08:	b943      	cbnz	r3, 411e1c <draw_bg+0x110>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  411e0a:	f1b8 0f02 	cmp.w	r8, #2
  411e0e:	d068      	beq.n	411ee2 <draw_bg+0x1d6>
    bool simple_mode = true;
  411e10:	9b06      	ldr	r3, [sp, #24]
  411e12:	9309      	str	r3, [sp, #36]	; 0x24
  411e14:	e004      	b.n	411e20 <draw_bg+0x114>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  411e16:	f04f 0800 	mov.w	r8, #0
  411e1a:	e7f1      	b.n	411e00 <draw_bg+0xf4>
    if(other_mask_cnt) simple_mode = false;
  411e1c:	2300      	movs	r3, #0
  411e1e:	9309      	str	r3, [sp, #36]	; 0x24
  411e20:	f8bd b08c 	ldrh.w	fp, [sp, #140]	; 0x8c
  411e24:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411e28:	ebab 0b03 	sub.w	fp, fp, r3
  411e2c:	fa1f fb8b 	uxth.w	fp, fp
  411e30:	f10b 0b01 	add.w	fp, fp, #1
  411e34:	fa0f fb8b 	sxth.w	fp, fp
    int32_t coords_w = lv_area_get_width(&coords_bg);
  411e38:	f8cd b010 	str.w	fp, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411e3c:	f8bd 508e 	ldrh.w	r5, [sp, #142]	; 0x8e
  411e40:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411e44:	1aed      	subs	r5, r5, r3
  411e46:	b2ad      	uxth	r5, r5
  411e48:	3501      	adds	r5, #1
  411e4a:	b22d      	sxth	r5, r5
    int32_t rout = dsc->radius;
  411e4c:	f9ba 3000 	ldrsh.w	r3, [sl]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  411e50:	455d      	cmp	r5, fp
  411e52:	bfa8      	it	ge
  411e54:	465d      	movge	r5, fp
    if(rout > short_side >> 1) rout = short_side >> 1;
  411e56:	106d      	asrs	r5, r5, #1
  411e58:	42ab      	cmp	r3, r5
  411e5a:	dc00      	bgt.n	411e5e <draw_bg+0x152>
    int32_t rout = dsc->radius;
  411e5c:	461d      	mov	r5, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
  411e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411e60:	2d00      	cmp	r5, #0
  411e62:	bf14      	ite	ne
  411e64:	2300      	movne	r3, #0
  411e66:	f003 0301 	andeq.w	r3, r3, #1
  411e6a:	b113      	cbz	r3, 411e72 <draw_bg+0x166>
  411e6c:	f1b8 0f00 	cmp.w	r8, #0
  411e70:	d03a      	beq.n	411ee8 <draw_bg+0x1dc>
        if(rout > 0) {
  411e72:	2d00      	cmp	r5, #0
  411e74:	dd4a      	ble.n	411f0c <draw_bg+0x200>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
  411e76:	2300      	movs	r3, #0
  411e78:	462a      	mov	r2, r5
  411e7a:	a922      	add	r1, sp, #136	; 0x88
  411e7c:	a819      	add	r0, sp, #100	; 0x64
  411e7e:	4e76      	ldr	r6, [pc, #472]	; (412058 <draw_bg+0x34c>)
  411e80:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  411e82:	2100      	movs	r1, #0
  411e84:	a819      	add	r0, sp, #100	; 0x64
  411e86:	4b75      	ldr	r3, [pc, #468]	; (41205c <draw_bg+0x350>)
  411e88:	4798      	blx	r3
  411e8a:	9010      	str	r0, [sp, #64]	; 0x40
        lv_color_t grad_color = dsc->bg_color;
  411e8c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  411e90:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(grad_dir == LV_GRAD_DIR_HOR) {
  411e94:	f1b8 0f02 	cmp.w	r8, #2
  411e98:	d03c      	beq.n	411f14 <draw_bg+0x208>
        lv_color_t * grad_map = NULL;
  411e9a:	2300      	movs	r3, #0
  411e9c:	930f      	str	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411e9e:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
  411ea2:	b293      	uxth	r3, r2
  411ea4:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  411ea8:	b288      	uxth	r0, r1
  411eaa:	1a1b      	subs	r3, r3, r0
  411eac:	b29b      	uxth	r3, r3
  411eae:	3301      	adds	r3, #1
  411eb0:	b21b      	sxth	r3, r3
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
  411eb2:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  411eb6:	2b32      	cmp	r3, #50	; 0x32
  411eb8:	dc01      	bgt.n	411ebe <draw_bg+0x1b2>
        bool split = false;
  411eba:	2300      	movs	r3, #0
  411ebc:	9306      	str	r3, [sp, #24]
        fill_area.x1 = coords_bg.x1;
  411ebe:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
        fill_area.x2 = coords_bg.x2;
  411ec2:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  411ec6:	8a7b      	ldrh	r3, [r7, #18]
  411ec8:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  411ecc:	fa13 f386 	uxtah	r3, r3, r6
  411ed0:	b21b      	sxth	r3, r3
  411ed2:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        fill_area.y2 = fill_area.y1;
  411ed6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  411eda:	46b9      	mov	r9, r7
  411edc:	f8bd b01c 	ldrh.w	fp, [sp, #28]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411ee0:	e1ec      	b.n	4122bc <draw_bg+0x5b0>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  411ee2:	2300      	movs	r3, #0
  411ee4:	9309      	str	r3, [sp, #36]	; 0x24
  411ee6:	e79b      	b.n	411e20 <draw_bg+0x114>
        _lv_blend_fill(clip, &coords_bg,
  411ee8:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411eec:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411ef0:	9302      	str	r3, [sp, #8]
  411ef2:	9b05      	ldr	r3, [sp, #20]
  411ef4:	9301      	str	r3, [sp, #4]
  411ef6:	2301      	movs	r3, #1
  411ef8:	9300      	str	r3, [sp, #0]
  411efa:	2300      	movs	r3, #0
  411efc:	a922      	add	r1, sp, #136	; 0x88
  411efe:	980a      	ldr	r0, [sp, #40]	; 0x28
  411f00:	4c57      	ldr	r4, [pc, #348]	; (412060 <draw_bg+0x354>)
  411f02:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
  411f04:	f04f 33ff 	mov.w	r3, #4294967295
  411f08:	9310      	str	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &coords_bg,
  411f0a:	e234      	b.n	412376 <draw_bg+0x66a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
  411f0c:	f04f 33ff 	mov.w	r3, #4294967295
  411f10:	9310      	str	r3, [sp, #64]	; 0x40
  411f12:	e7bb      	b.n	411e8c <draw_bg+0x180>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
  411f14:	ea4f 004b 	mov.w	r0, fp, lsl #1
  411f18:	4b4d      	ldr	r3, [pc, #308]	; (412050 <draw_bg+0x344>)
  411f1a:	4798      	blx	r3
  411f1c:	900f      	str	r0, [sp, #60]	; 0x3c
            for(i = 0; i < coords_w; i++) {
  411f1e:	f04f 0900 	mov.w	r9, #0
  411f22:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  411f26:	9512      	str	r5, [sp, #72]	; 0x48
  411f28:	4684      	mov	ip, r0
  411f2a:	9713      	str	r7, [sp, #76]	; 0x4c
  411f2c:	f8dd e010 	ldr.w	lr, [sp, #16]
  411f30:	e004      	b.n	411f3c <draw_bg+0x230>
    if(i <= min) return dsc->bg_color;
  411f32:	f8ba 3002 	ldrh.w	r3, [sl, #2]
                grad_map[i] = grad_get(dsc, coords_w, i);
  411f36:	8033      	strh	r3, [r6, #0]
            for(i = 0; i < coords_w; i++) {
  411f38:	f109 0901 	add.w	r9, r9, #1
  411f3c:	45f1      	cmp	r9, lr
  411f3e:	da66      	bge.n	41200e <draw_bg+0x302>
                grad_map[i] = grad_get(dsc, coords_w, i);
  411f40:	eb0c 0649 	add.w	r6, ip, r9, lsl #1
  411f44:	fa0f f389 	sxth.w	r3, r9
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  411f48:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
  411f4c:	fb0b f200 	mul.w	r2, fp, r0
  411f50:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  411f52:	429a      	cmp	r2, r3
  411f54:	daed      	bge.n	411f32 <draw_bg+0x226>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  411f56:	f9ba 100a 	ldrsh.w	r1, [sl, #10]
  411f5a:	fb01 f50b 	mul.w	r5, r1, fp
    if(i >= max) return dsc->bg_grad_color;
  411f5e:	ebb3 2f25 	cmp.w	r3, r5, asr #8
  411f62:	da51      	bge.n	412008 <draw_bg+0x2fc>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  411f64:	1a09      	subs	r1, r1, r0
    d = (s * d) >> 8;
  411f66:	fb01 f10b 	mul.w	r1, r1, fp
  411f6a:	1209      	asrs	r1, r1, #8
    i -= min;
  411f6c:	1a9b      	subs	r3, r3, r2
  411f6e:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  411f70:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  411f74:	fb93 f3f1 	sdiv	r3, r3, r1
  411f78:	b2db      	uxtb	r3, r3
  411f7a:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  411f7e:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  411f82:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  411f86:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  411f8a:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  411f8e:	fb07 f505 	mul.w	r5, r7, r5
  411f92:	fb03 5202 	mla	r2, r3, r2, r5
  411f96:	3280      	adds	r2, #128	; 0x80
  411f98:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  411f9c:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  411fa0:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  411fa4:	f362 04c7 	bfi	r4, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  411fa8:	f000 0507 	and.w	r5, r0, #7
  411fac:	f3c0 3242 	ubfx	r2, r0, #13, #3
  411fb0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  411fb4:	f001 0807 	and.w	r8, r1, #7
  411fb8:	f3c1 3542 	ubfx	r5, r1, #13, #3
  411fbc:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
  411fc0:	fb05 f507 	mul.w	r5, r5, r7
  411fc4:	fb02 5203 	mla	r2, r2, r3, r5
  411fc8:	3280      	adds	r2, #128	; 0x80
  411fca:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  411fce:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  411fd2:	f3c2 6582 	ubfx	r5, r2, #26, #3
  411fd6:	f365 0402 	bfi	r4, r5, #0, #3
  411fda:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  411fde:	f362 344f 	bfi	r4, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  411fe2:	f3c0 2004 	ubfx	r0, r0, #8, #5
  411fe6:	f3c1 2104 	ubfx	r1, r1, #8, #5
  411fea:	fb01 f707 	mul.w	r7, r1, r7
  411fee:	fb00 7303 	mla	r3, r0, r3, r7
  411ff2:	3380      	adds	r3, #128	; 0x80
  411ff4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  411ff8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  411ffc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  412000:	f363 240c 	bfi	r4, r3, #8, #5
  412004:	4623      	mov	r3, r4
  412006:	e796      	b.n	411f36 <draw_bg+0x22a>
    if(i >= max) return dsc->bg_grad_color;
  412008:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41200c:	e793      	b.n	411f36 <draw_bg+0x22a>
  41200e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  412012:	9d12      	ldr	r5, [sp, #72]	; 0x48
  412014:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  412016:	e742      	b.n	411e9e <draw_bg+0x192>
                    _lv_memset(mask_buf, opa, draw_area_w);
  412018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41201a:	9905      	ldr	r1, [sp, #20]
  41201c:	9f08      	ldr	r7, [sp, #32]
  41201e:	4638      	mov	r0, r7
  412020:	4b10      	ldr	r3, [pc, #64]	; (412064 <draw_bg+0x358>)
  412022:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  412024:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  412028:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  41202c:	4419      	add	r1, r3
  41202e:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  412032:	4432      	add	r2, r6
  412034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  412036:	b212      	sxth	r2, r2
  412038:	b209      	sxth	r1, r1
  41203a:	4638      	mov	r0, r7
  41203c:	4f0a      	ldr	r7, [pc, #40]	; (412068 <draw_bg+0x35c>)
  41203e:	47b8      	blx	r7
  412040:	9004      	str	r0, [sp, #16]
  412042:	e028      	b.n	412096 <draw_bg+0x38a>
  412044:	004097a1 	.word	0x004097a1
  412048:	00414df5 	.word	0x00414df5
  41204c:	004155b3 	.word	0x004155b3
  412050:	00416965 	.word	0x00416965
  412054:	0040fcad 	.word	0x0040fcad
  412058:	0040fe2d 	.word	0x0040fe2d
  41205c:	0040fbb1 	.word	0x0040fbb1
  412060:	0040c871 	.word	0x0040c871
  412064:	00416a95 	.word	0x00416a95
  412068:	0040fbe5 	.word	0x0040fbe5
                _lv_memset(mask_buf, opa, draw_area_w);
  41206c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41206e:	9905      	ldr	r1, [sp, #20]
  412070:	9f08      	ldr	r7, [sp, #32]
  412072:	4638      	mov	r0, r7
  412074:	4bb5      	ldr	r3, [pc, #724]	; (41234c <draw_bg+0x640>)
  412076:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  412078:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  41207c:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  412080:	4419      	add	r1, r3
  412082:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  412086:	4432      	add	r2, r6
  412088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41208a:	b212      	sxth	r2, r2
  41208c:	b209      	sxth	r1, r1
  41208e:	4638      	mov	r0, r7
  412090:	4faf      	ldr	r7, [pc, #700]	; (412350 <draw_bg+0x644>)
  412092:	47b8      	blx	r7
  412094:	9004      	str	r0, [sp, #16]
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
  412096:	9b04      	ldr	r3, [sp, #16]
  412098:	2b02      	cmp	r3, #2
  41209a:	d061      	beq.n	412160 <draw_bg+0x454>
            opa2 = opa;
  41209c:	9b05      	ldr	r3, [sp, #20]
  41209e:	9307      	str	r3, [sp, #28]
            if(grad_dir == LV_GRAD_DIR_VER) {
  4120a0:	f1b8 0f01 	cmp.w	r8, #1
  4120a4:	d05f      	beq.n	412166 <draw_bg+0x45a>
            if(simple_mode && split &&
  4120a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4120a8:	9a06      	ldr	r2, [sp, #24]
  4120aa:	4013      	ands	r3, r2
  4120ac:	f013 0fff 	tst.w	r3, #255	; 0xff
  4120b0:	f000 80e8 	beq.w	412284 <draw_bg+0x578>
               (y < coords_bg.y1 + rout + 1 ||
  4120b4:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4120b8:	442b      	add	r3, r5
  4120ba:	3301      	adds	r3, #1
            if(simple_mode && split &&
  4120bc:	429c      	cmp	r4, r3
  4120be:	db06      	blt.n	4120ce <draw_bg+0x3c2>
                y > coords_bg.y2 - rout - 1)) {
  4120c0:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  4120c4:	1b5b      	subs	r3, r3, r5
  4120c6:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
  4120c8:	429c      	cmp	r4, r3
  4120ca:	f340 80db 	ble.w	412284 <draw_bg+0x578>
                fill_area2.x1 = coords_bg.x1;
  4120ce:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  4120d2:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x1 + rout - 1;
  4120d6:	b2ac      	uxth	r4, r5
  4120d8:	fa14 f383 	uxtah	r3, r4, r3
  4120dc:	b29b      	uxth	r3, r3
  4120de:	3b01      	subs	r3, #1
  4120e0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                fill_area2.y1 = fill_area.y1;
  4120e4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  4120e8:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                fill_area2.y2 = fill_area.y2;
  4120ec:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  4120f0:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                _lv_blend_fill(clip, &fill_area2,
  4120f4:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4120f8:	9302      	str	r3, [sp, #8]
  4120fa:	9b07      	ldr	r3, [sp, #28]
  4120fc:	9301      	str	r3, [sp, #4]
  4120fe:	9b04      	ldr	r3, [sp, #16]
  412100:	9300      	str	r3, [sp, #0]
  412102:	9b08      	ldr	r3, [sp, #32]
  412104:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  412108:	a917      	add	r1, sp, #92	; 0x5c
  41210a:	980a      	ldr	r0, [sp, #40]	; 0x28
  41210c:	4f91      	ldr	r7, [pc, #580]	; (412354 <draw_bg+0x648>)
  41210e:	47b8      	blx	r7
                if(grad_dir == LV_GRAD_DIR_VER) {
  412110:	f1b8 0f01 	cmp.w	r8, #1
  412114:	f000 809c 	beq.w	412250 <draw_bg+0x544>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
  412118:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  41211c:	b29a      	uxth	r2, r3
  41211e:	1b14      	subs	r4, r2, r4
  412120:	b2a4      	uxth	r4, r4
  412122:	3401      	adds	r4, #1
  412124:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x2;
  412128:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  41212c:	1b5b      	subs	r3, r3, r5
  41212e:	3301      	adds	r3, #1
  412130:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
  412134:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  412138:	440a      	add	r2, r1
                if(mask_ofs < 0) mask_ofs = 0;
  41213a:	1a9b      	subs	r3, r3, r2
  41213c:	f100 80a0 	bmi.w	412280 <draw_bg+0x574>
                _lv_blend_fill(clip, &fill_area2,
  412140:	f89a 200d 	ldrb.w	r2, [sl, #13]
  412144:	9202      	str	r2, [sp, #8]
  412146:	9a07      	ldr	r2, [sp, #28]
  412148:	9201      	str	r2, [sp, #4]
  41214a:	9a04      	ldr	r2, [sp, #16]
  41214c:	9200      	str	r2, [sp, #0]
  41214e:	9a08      	ldr	r2, [sp, #32]
  412150:	4413      	add	r3, r2
  412152:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  412156:	a917      	add	r1, sp, #92	; 0x5c
  412158:	980a      	ldr	r0, [sp, #40]	; 0x28
  41215a:	4c7e      	ldr	r4, [pc, #504]	; (412354 <draw_bg+0x648>)
  41215c:	47a0      	blx	r4
                y > coords_bg.y2 - rout - 1)) {
  41215e:	e0a2      	b.n	4122a6 <draw_bg+0x59a>
                opa2 = LV_OPA_COVER;
  412160:	23ff      	movs	r3, #255	; 0xff
  412162:	9307      	str	r3, [sp, #28]
  412164:	e79c      	b.n	4120a0 <draw_bg+0x394>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  412166:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
  41216a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  41216e:	1ad2      	subs	r2, r2, r3
  412170:	b292      	uxth	r2, r2
  412172:	3201      	adds	r2, #1
  412174:	b212      	sxth	r2, r2
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
  412176:	1ae3      	subs	r3, r4, r3
  412178:	b29b      	uxth	r3, r3
  41217a:	fa0f fe83 	sxth.w	lr, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  41217e:	f9ba c008 	ldrsh.w	ip, [sl, #8]
  412182:	fb02 f10c 	mul.w	r1, r2, ip
  412186:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
  412188:	4571      	cmp	r1, lr
  41218a:	da59      	bge.n	412240 <draw_bg+0x534>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  41218c:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
  412190:	fb00 f702 	mul.w	r7, r0, r2
    if(i >= max) return dsc->bg_grad_color;
  412194:	ebbe 2f27 	cmp.w	lr, r7, asr #8
  412198:	da57      	bge.n	41224a <draw_bg+0x53e>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  41219a:	eba0 000c 	sub.w	r0, r0, ip
    d = (s * d) >> 8;
  41219e:	fb00 f202 	mul.w	r2, r0, r2
  4121a2:	1212      	asrs	r2, r2, #8
    i -= min;
  4121a4:	1a5b      	subs	r3, r3, r1
  4121a6:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  4121a8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  4121ac:	fb93 f3f2 	sdiv	r3, r3, r2
  4121b0:	b2db      	uxtb	r3, r3
  4121b2:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  4121b6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4121ba:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  4121be:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
  4121c2:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  4121c6:	fb0c fe0e 	mul.w	lr, ip, lr
  4121ca:	fb03 e202 	mla	r2, r3, r2, lr
  4121ce:	3280      	adds	r2, #128	; 0x80
  4121d0:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  4121d4:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  4121d8:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4121dc:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4121e0:	f000 0e07 	and.w	lr, r0, #7
  4121e4:	f3c0 3242 	ubfx	r2, r0, #13, #3
  4121e8:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  4121ec:	f001 0707 	and.w	r7, r1, #7
  4121f0:	f3c1 3e42 	ubfx	lr, r1, #13, #3
  4121f4:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
  4121f8:	fb0e fe0c 	mul.w	lr, lr, ip
  4121fc:	fb02 e203 	mla	r2, r2, r3, lr
  412200:	3280      	adds	r2, #128	; 0x80
  412202:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412206:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  41220a:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  41220e:	f36e 0b02 	bfi	fp, lr, #0, #3
  412212:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412216:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41221a:	f3c0 2004 	ubfx	r0, r0, #8, #5
  41221e:	f3c1 2104 	ubfx	r1, r1, #8, #5
  412222:	fb01 fc0c 	mul.w	ip, r1, ip
  412226:	fb00 c303 	mla	r3, r0, r3, ip
  41222a:	3380      	adds	r3, #128	; 0x80
  41222c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  412230:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  412234:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  412238:	f363 2b0c 	bfi	fp, r3, #8, #5
  41223c:	465b      	mov	r3, fp
  41223e:	e001      	b.n	412244 <draw_bg+0x538>
    if(i <= min) return dsc->bg_color;
  412240:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  412244:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  412248:	e72d      	b.n	4120a6 <draw_bg+0x39a>
    if(i >= max) return dsc->bg_grad_color;
  41224a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41224e:	e7f9      	b.n	412244 <draw_bg+0x538>
                    fill_area2.x1 = coords_bg.x1 + rout;
  412250:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  412254:	4423      	add	r3, r4
  412256:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    fill_area2.x2 = coords_bg.x2 - rout;
  41225a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41225e:	1b1b      	subs	r3, r3, r4
  412260:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
  412264:	f89a 300d 	ldrb.w	r3, [sl, #13]
  412268:	9302      	str	r3, [sp, #8]
  41226a:	9b05      	ldr	r3, [sp, #20]
  41226c:	9301      	str	r3, [sp, #4]
  41226e:	2301      	movs	r3, #1
  412270:	9300      	str	r3, [sp, #0]
  412272:	2300      	movs	r3, #0
  412274:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  412278:	a917      	add	r1, sp, #92	; 0x5c
  41227a:	980a      	ldr	r0, [sp, #40]	; 0x28
  41227c:	47b8      	blx	r7
  41227e:	e74b      	b.n	412118 <draw_bg+0x40c>
                if(mask_ofs < 0) mask_ofs = 0;
  412280:	2300      	movs	r3, #0
  412282:	e75d      	b.n	412140 <draw_bg+0x434>
                if(grad_dir == LV_GRAD_DIR_HOR) {
  412284:	f1b8 0f02 	cmp.w	r8, #2
  412288:	d034      	beq.n	4122f4 <draw_bg+0x5e8>
                else if(grad_dir == LV_GRAD_DIR_VER) {
  41228a:	f1b8 0f01 	cmp.w	r8, #1
  41228e:	d03f      	beq.n	412310 <draw_bg+0x604>
                else if(other_mask_cnt != 0 || !split) {
  412290:	9b06      	ldr	r3, [sp, #24]
  412292:	f083 0301 	eor.w	r3, r3, #1
  412296:	b2db      	uxtb	r3, r3
  412298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41229a:	2a00      	cmp	r2, #0
  41229c:	bf18      	it	ne
  41229e:	f043 0301 	orrne.w	r3, r3, #1
  4122a2:	2b00      	cmp	r3, #0
  4122a4:	d143      	bne.n	41232e <draw_bg+0x622>
            fill_area.y1++;
  4122a6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  4122aa:	3301      	adds	r3, #1
  4122ac:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2++;
  4122b0:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  4122b4:	3301      	adds	r3, #1
  4122b6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4122ba:	3601      	adds	r6, #1
  4122bc:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  4122c0:	429e      	cmp	r6, r3
  4122c2:	dc4b      	bgt.n	41235c <draw_bg+0x650>
            int32_t y = h + vdb->area.y1;
  4122c4:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
  4122c8:	4434      	add	r4, r6
            if(y > coords_bg.y1 + rout + 1 &&
  4122ca:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4122ce:	442b      	add	r3, r5
  4122d0:	3301      	adds	r3, #1
  4122d2:	429c      	cmp	r4, r3
  4122d4:	f77f aeca 	ble.w	41206c <draw_bg+0x360>
               y < coords_bg.y2 - rout - 1) {
  4122d8:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  4122dc:	1b5b      	subs	r3, r3, r5
  4122de:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
  4122e0:	429c      	cmp	r4, r3
  4122e2:	f6bf aec3 	bge.w	41206c <draw_bg+0x360>
                if(simple_mode == false) {
  4122e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4122e8:	2b00      	cmp	r3, #0
  4122ea:	f43f ae95 	beq.w	412018 <draw_bg+0x30c>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
  4122ee:	2301      	movs	r3, #1
  4122f0:	9304      	str	r3, [sp, #16]
  4122f2:	e6d0      	b.n	412096 <draw_bg+0x38a>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
  4122f4:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4122f8:	9302      	str	r3, [sp, #8]
  4122fa:	9b07      	ldr	r3, [sp, #28]
  4122fc:	9301      	str	r3, [sp, #4]
  4122fe:	9b04      	ldr	r3, [sp, #16]
  412300:	9300      	str	r3, [sp, #0]
  412302:	9b08      	ldr	r3, [sp, #32]
  412304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  412306:	a915      	add	r1, sp, #84	; 0x54
  412308:	980a      	ldr	r0, [sp, #40]	; 0x28
  41230a:	4c13      	ldr	r4, [pc, #76]	; (412358 <draw_bg+0x64c>)
  41230c:	47a0      	blx	r4
  41230e:	e7ca      	b.n	4122a6 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  412310:	f89a 300d 	ldrb.w	r3, [sl, #13]
  412314:	9302      	str	r3, [sp, #8]
  412316:	9b07      	ldr	r3, [sp, #28]
  412318:	9301      	str	r3, [sp, #4]
  41231a:	9b04      	ldr	r3, [sp, #16]
  41231c:	9300      	str	r3, [sp, #0]
  41231e:	9b08      	ldr	r3, [sp, #32]
  412320:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  412324:	a915      	add	r1, sp, #84	; 0x54
  412326:	980a      	ldr	r0, [sp, #40]	; 0x28
  412328:	4c0a      	ldr	r4, [pc, #40]	; (412354 <draw_bg+0x648>)
  41232a:	47a0      	blx	r4
  41232c:	e7bb      	b.n	4122a6 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  41232e:	f89a 300d 	ldrb.w	r3, [sl, #13]
  412332:	9302      	str	r3, [sp, #8]
  412334:	9b07      	ldr	r3, [sp, #28]
  412336:	9301      	str	r3, [sp, #4]
  412338:	9b04      	ldr	r3, [sp, #16]
  41233a:	9300      	str	r3, [sp, #0]
  41233c:	9b08      	ldr	r3, [sp, #32]
  41233e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  412342:	a915      	add	r1, sp, #84	; 0x54
  412344:	980a      	ldr	r0, [sp, #40]	; 0x28
  412346:	4c03      	ldr	r4, [pc, #12]	; (412354 <draw_bg+0x648>)
  412348:	47a0      	blx	r4
  41234a:	e7ac      	b.n	4122a6 <draw_bg+0x59a>
  41234c:	00416a95 	.word	0x00416a95
  412350:	0040fbe5 	.word	0x0040fbe5
  412354:	0040c871 	.word	0x0040c871
  412358:	0040c991 	.word	0x0040c991
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
  41235c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41235e:	f1b8 0f00 	cmp.w	r8, #0
  412362:	bf08      	it	eq
  412364:	2b00      	cmpeq	r3, #0
  412366:	d101      	bne.n	41236c <draw_bg+0x660>
  412368:	9b06      	ldr	r3, [sp, #24]
  41236a:	b95b      	cbnz	r3, 412384 <draw_bg+0x678>
        if(grad_map) _lv_mem_buf_release(grad_map);
  41236c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41236e:	b113      	cbz	r3, 412376 <draw_bg+0x66a>
  412370:	4618      	mov	r0, r3
  412372:	4b37      	ldr	r3, [pc, #220]	; (412450 <draw_bg+0x744>)
  412374:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
  412376:	9810      	ldr	r0, [sp, #64]	; 0x40
  412378:	4b36      	ldr	r3, [pc, #216]	; (412454 <draw_bg+0x748>)
  41237a:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  41237c:	9808      	ldr	r0, [sp, #32]
  41237e:	4b34      	ldr	r3, [pc, #208]	; (412450 <draw_bg+0x744>)
  412380:	4798      	blx	r3
  412382:	e510      	b.n	411da6 <draw_bg+0x9a>
            fill_area.x1 = coords_bg.x1 + rout;
  412384:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  412388:	b2ad      	uxth	r5, r5
  41238a:	442b      	add	r3, r5
  41238c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2 - rout;
  412390:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  412394:	1b5b      	subs	r3, r3, r5
  412396:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1;
  41239a:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  41239e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y1 + rout;
  4123a2:	fa15 f383 	uxtah	r3, r5, r3
  4123a6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  4123aa:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4123ae:	9302      	str	r3, [sp, #8]
  4123b0:	9b05      	ldr	r3, [sp, #20]
  4123b2:	9301      	str	r3, [sp, #4]
  4123b4:	2301      	movs	r3, #1
  4123b6:	9300      	str	r3, [sp, #0]
  4123b8:	2300      	movs	r3, #0
  4123ba:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  4123be:	a915      	add	r1, sp, #84	; 0x54
  4123c0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4123c2:	4c25      	ldr	r4, [pc, #148]	; (412458 <draw_bg+0x74c>)
  4123c4:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
  4123c6:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	; 0x8e
  4123ca:	b28b      	uxth	r3, r1
  4123cc:	1b5b      	subs	r3, r3, r5
  4123ce:	b21b      	sxth	r3, r3
  4123d0:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
  4123d4:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
  4123d8:	4293      	cmp	r3, r2
  4123da:	dc03      	bgt.n	4123e4 <draw_bg+0x6d8>
  4123dc:	b293      	uxth	r3, r2
  4123de:	3301      	adds	r3, #1
  4123e0:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2;
  4123e4:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  4123e8:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4123ec:	9302      	str	r3, [sp, #8]
  4123ee:	9f05      	ldr	r7, [sp, #20]
  4123f0:	9701      	str	r7, [sp, #4]
  4123f2:	2601      	movs	r6, #1
  4123f4:	9600      	str	r6, [sp, #0]
  4123f6:	2300      	movs	r3, #0
  4123f8:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  4123fc:	a915      	add	r1, sp, #84	; 0x54
  4123fe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  412402:	4640      	mov	r0, r8
  412404:	4c14      	ldr	r4, [pc, #80]	; (412458 <draw_bg+0x74c>)
  412406:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
  412408:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  41240c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2;
  412410:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  412414:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1 + rout + 1;
  412418:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  41241c:	442b      	add	r3, r5
  41241e:	b29b      	uxth	r3, r3
  412420:	4433      	add	r3, r6
  412422:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2 - rout - 1;
  412426:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  41242a:	1b5b      	subs	r3, r3, r5
  41242c:	b29b      	uxth	r3, r3
  41242e:	3b01      	subs	r3, #1
  412430:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  412434:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  412438:	f89a 300d 	ldrb.w	r3, [sl, #13]
  41243c:	9302      	str	r3, [sp, #8]
  41243e:	9701      	str	r7, [sp, #4]
  412440:	9600      	str	r6, [sp, #0]
  412442:	2300      	movs	r3, #0
  412444:	a915      	add	r1, sp, #84	; 0x54
  412446:	4640      	mov	r0, r8
  412448:	47a0      	blx	r4
  41244a:	e78f      	b.n	41236c <draw_bg+0x660>
  41244c:	4770      	bx	lr
  41244e:	bf00      	nop
  412450:	00416715 	.word	0x00416715
  412454:	0040fc35 	.word	0x0040fc35
  412458:	0040c871 	.word	0x0040c871

0041245c <lv_draw_rect_dsc_init>:
{
  41245c:	b510      	push	{r4, lr}
  41245e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
  412460:	2154      	movs	r1, #84	; 0x54
  412462:	4b0e      	ldr	r3, [pc, #56]	; (41249c <lv_draw_rect_dsc_init+0x40>)
  412464:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
  412466:	4b0e      	ldr	r3, [pc, #56]	; (4124a0 <lv_draw_rect_dsc_init+0x44>)
  412468:	881b      	ldrh	r3, [r3, #0]
  41246a:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
  41246c:	2300      	movs	r3, #0
  41246e:	80a3      	strh	r3, [r4, #4]
    dsc->border_color = LV_COLOR_BLACK;
  412470:	81e3      	strh	r3, [r4, #14]
    dsc->pattern_recolor = LV_COLOR_BLACK;
  412472:	86a3      	strh	r3, [r4, #52]	; 0x34
    dsc->value_color = LV_COLOR_BLACK;
  412474:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
  412478:	8423      	strh	r3, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
  41247a:	23ff      	movs	r3, #255	; 0xff
  41247c:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
  41247e:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
  412480:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
  412482:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
  412484:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
  412488:	4a06      	ldr	r2, [pc, #24]	; (4124a4 <lv_draw_rect_dsc_init+0x48>)
  41248a:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
  41248c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
  412490:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
  412492:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
  412496:	230f      	movs	r3, #15
  412498:	8263      	strh	r3, [r4, #18]
  41249a:	bd10      	pop	{r4, pc}
  41249c:	00416af1 	.word	0x00416af1
  4124a0:	0042c2c8 	.word	0x0042c2c8
  4124a4:	2040008c 	.word	0x2040008c

004124a8 <lv_draw_rect>:
{
  4124a8:	b570      	push	{r4, r5, r6, lr}
  4124aa:	88c3      	ldrh	r3, [r0, #6]
  4124ac:	8844      	ldrh	r4, [r0, #2]
  4124ae:	1b1b      	subs	r3, r3, r4
  4124b0:	b29b      	uxth	r3, r3
  4124b2:	3301      	adds	r3, #1
  4124b4:	b21b      	sxth	r3, r3
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
  4124b6:	2b00      	cmp	r3, #0
  4124b8:	dd25      	ble.n	412506 <lv_draw_rect+0x5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4124ba:	8883      	ldrh	r3, [r0, #4]
  4124bc:	8804      	ldrh	r4, [r0, #0]
  4124be:	1b1b      	subs	r3, r3, r4
  4124c0:	b29b      	uxth	r3, r3
  4124c2:	3301      	adds	r3, #1
  4124c4:	b21b      	sxth	r3, r3
  4124c6:	2b00      	cmp	r3, #0
  4124c8:	dd1d      	ble.n	412506 <lv_draw_rect+0x5e>
  4124ca:	4616      	mov	r6, r2
  4124cc:	460d      	mov	r5, r1
  4124ce:	4604      	mov	r4, r0
    draw_shadow(coords, clip, dsc);
  4124d0:	4b0d      	ldr	r3, [pc, #52]	; (412508 <lv_draw_rect+0x60>)
  4124d2:	4798      	blx	r3
    draw_bg(coords, clip, dsc);
  4124d4:	4632      	mov	r2, r6
  4124d6:	4629      	mov	r1, r5
  4124d8:	4620      	mov	r0, r4
  4124da:	4b0c      	ldr	r3, [pc, #48]	; (41250c <lv_draw_rect+0x64>)
  4124dc:	4798      	blx	r3
    draw_pattern(coords, clip, dsc);
  4124de:	4632      	mov	r2, r6
  4124e0:	4629      	mov	r1, r5
  4124e2:	4620      	mov	r0, r4
  4124e4:	4b0a      	ldr	r3, [pc, #40]	; (412510 <lv_draw_rect+0x68>)
  4124e6:	4798      	blx	r3
    draw_border(coords, clip, dsc);
  4124e8:	4632      	mov	r2, r6
  4124ea:	4629      	mov	r1, r5
  4124ec:	4620      	mov	r0, r4
  4124ee:	4b09      	ldr	r3, [pc, #36]	; (412514 <lv_draw_rect+0x6c>)
  4124f0:	4798      	blx	r3
    draw_value_str(coords, clip, dsc);
  4124f2:	4632      	mov	r2, r6
  4124f4:	4629      	mov	r1, r5
  4124f6:	4620      	mov	r0, r4
  4124f8:	4b07      	ldr	r3, [pc, #28]	; (412518 <lv_draw_rect+0x70>)
  4124fa:	4798      	blx	r3
    draw_outline(coords, clip, dsc);
  4124fc:	4632      	mov	r2, r6
  4124fe:	4629      	mov	r1, r5
  412500:	4620      	mov	r0, r4
  412502:	4b06      	ldr	r3, [pc, #24]	; (41251c <lv_draw_rect+0x74>)
  412504:	4798      	blx	r3
  412506:	bd70      	pop	{r4, r5, r6, pc}
  412508:	00410205 	.word	0x00410205
  41250c:	00411d0d 	.word	0x00411d0d
  412510:	00411945 	.word	0x00411945
  412514:	004115dd 	.word	0x004115dd
  412518:	00411c19 	.word	0x00411c19
  41251c:	00411521 	.word	0x00411521

00412520 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
  412520:	b5f0      	push	{r4, r5, r6, r7, lr}
  412522:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
  412524:	2400      	movs	r4, #0
  412526:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  41252a:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
  41252c:	7804      	ldrb	r4, [r0, #0]
  41252e:	f004 041f 	and.w	r4, r4, #31
  412532:	2c06      	cmp	r4, #6
  412534:	bf18      	it	ne
  412536:	2c04      	cmpne	r4, #4
  412538:	d010      	beq.n	41255c <lv_img_buf_get_px_color+0x3c>
  41253a:	2c05      	cmp	r4, #5
  41253c:	d00e      	beq.n	41255c <lv_img_buf_get_px_color+0x3c>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  41253e:	2c07      	cmp	r4, #7
  412540:	d02b      	beq.n	41259a <lv_img_buf_get_px_color+0x7a>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  412542:	2c08      	cmp	r4, #8
  412544:	d03f      	beq.n	4125c6 <lv_img_buf_get_px_color+0xa6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  412546:	2c09      	cmp	r4, #9
  412548:	d055      	beq.n	4125f6 <lv_img_buf_get_px_color+0xd6>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  41254a:	2c0a      	cmp	r4, #10
  41254c:	d06c      	beq.n	412628 <lv_img_buf_get_px_color+0x108>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  41254e:	3c0b      	subs	r4, #11
  412550:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  412552:	2c03      	cmp	r4, #3
  412554:	d81d      	bhi.n	412592 <lv_img_buf_get_px_color+0x72>
        p_color = color;
  412556:	f8ad 3004 	strh.w	r3, [sp, #4]
  41255a:	e01a      	b.n	412592 <lv_img_buf_get_px_color+0x72>
  41255c:	4616      	mov	r6, r2
  41255e:	460f      	mov	r7, r1
  412560:	4604      	mov	r4, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  412562:	7800      	ldrb	r0, [r0, #0]
  412564:	f000 001f 	and.w	r0, r0, #31
  412568:	4b35      	ldr	r3, [pc, #212]	; (412640 <lv_img_buf_get_px_color+0x120>)
  41256a:	4798      	blx	r3
  41256c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  412570:	6822      	ldr	r2, [r4, #0]
  412572:	f3c2 228a 	ubfx	r2, r2, #10, #11
  412576:	fb02 7206 	mla	r2, r2, r6, r7
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  41257a:	fb00 5002 	mla	r0, r0, r2, r5
    uint8_t * d8 = (uint8_t *)dst;
  41257e:	aa01      	add	r2, sp, #4
  412580:	2302      	movs	r3, #2
  412582:	e004      	b.n	41258e <lv_img_buf_get_px_color+0x6e>
        *d8 = *s8;
  412584:	f810 1b01 	ldrb.w	r1, [r0], #1
  412588:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  41258c:	3b01      	subs	r3, #1
    while(len) {
  41258e:	2b00      	cmp	r3, #0
  412590:	d1f8      	bne.n	412584 <lv_img_buf_get_px_color+0x64>
    }
    return p_color;
}
  412592:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  412596:	b003      	add	sp, #12
  412598:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t bit = x & 0x7;
  41259a:	f001 0407 	and.w	r4, r1, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  41259e:	6800      	ldr	r0, [r0, #0]
  4125a0:	f3c0 208a 	ubfx	r0, r0, #10, #11
  4125a4:	3007      	adds	r0, #7
  4125a6:	10c0      	asrs	r0, r0, #3
  4125a8:	fb00 f202 	mul.w	r2, r0, r2
  4125ac:	eb02 02e1 	add.w	r2, r2, r1, asr #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  4125b0:	18a8      	adds	r0, r5, r2
  4125b2:	7a03      	ldrb	r3, [r0, #8]
  4125b4:	f1c4 0207 	rsb	r2, r4, #7
  4125b8:	2101      	movs	r1, #1
  4125ba:	4091      	lsls	r1, r2
  4125bc:	400b      	ands	r3, r1
  4125be:	4113      	asrs	r3, r2
  4125c0:	f8ad 3004 	strh.w	r3, [sp, #4]
  4125c4:	e7e5      	b.n	412592 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x3) * 2;
  4125c6:	f001 0303 	and.w	r3, r1, #3
  4125ca:	005b      	lsls	r3, r3, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  4125cc:	6800      	ldr	r0, [r0, #0]
  4125ce:	f3c0 208a 	ubfx	r0, r0, #10, #11
  4125d2:	3003      	adds	r0, #3
  4125d4:	1080      	asrs	r0, r0, #2
  4125d6:	fb00 f202 	mul.w	r2, r0, r2
  4125da:	eb02 02a1 	add.w	r2, r2, r1, asr #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  4125de:	18a8      	adds	r0, r5, r2
  4125e0:	7c02      	ldrb	r2, [r0, #16]
  4125e2:	f1c3 0306 	rsb	r3, r3, #6
  4125e6:	2103      	movs	r1, #3
  4125e8:	4099      	lsls	r1, r3
  4125ea:	400a      	ands	r2, r1
  4125ec:	fa42 f303 	asr.w	r3, r2, r3
  4125f0:	f8ad 3004 	strh.w	r3, [sp, #4]
  4125f4:	e7cd      	b.n	412592 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x1) * 4;
  4125f6:	f001 0301 	and.w	r3, r1, #1
  4125fa:	009b      	lsls	r3, r3, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  4125fc:	6800      	ldr	r0, [r0, #0]
  4125fe:	f3c0 208a 	ubfx	r0, r0, #10, #11
  412602:	3001      	adds	r0, #1
  412604:	1040      	asrs	r0, r0, #1
  412606:	fb00 f202 	mul.w	r2, r0, r2
  41260a:	eb02 0261 	add.w	r2, r2, r1, asr #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  41260e:	18a8      	adds	r0, r5, r2
  412610:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  412614:	f1c3 0304 	rsb	r3, r3, #4
  412618:	210f      	movs	r1, #15
  41261a:	4099      	lsls	r1, r3
  41261c:	400a      	ands	r2, r1
  41261e:	fa42 f303 	asr.w	r3, r2, r3
  412622:	f8ad 3004 	strh.w	r3, [sp, #4]
  412626:	e7b4      	b.n	412592 <lv_img_buf_get_px_color+0x72>
        uint32_t px  = dsc->header.w * y + x;
  412628:	6800      	ldr	r0, [r0, #0]
  41262a:	f3c0 208a 	ubfx	r0, r0, #10, #11
  41262e:	fb00 1202 	mla	r2, r0, r2, r1
        p_color.full = buf_u8[px];
  412632:	18a8      	adds	r0, r5, r2
  412634:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
  412638:	f8ad 3004 	strh.w	r3, [sp, #4]
  41263c:	e7a9      	b.n	412592 <lv_img_buf_get_px_color+0x72>
  41263e:	bf00      	nop
  412640:	0040d369 	.word	0x0040d369

00412644 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
  412644:	b5f0      	push	{r4, r5, r6, r7, lr}
  412646:	b085      	sub	sp, #20
  412648:	4604      	mov	r4, r0
  41264a:	460e      	mov	r6, r1
  41264c:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  41264e:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  412650:	7803      	ldrb	r3, [r0, #0]
  412652:	f003 031f 	and.w	r3, r3, #31
  412656:	2b05      	cmp	r3, #5
  412658:	d00a      	beq.n	412670 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
  41265a:	2b0b      	cmp	r3, #11
  41265c:	d012      	beq.n	412684 <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
  41265e:	2b0c      	cmp	r3, #12
  412660:	d029      	beq.n	4126b6 <lv_img_buf_get_px_alpha+0x72>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
  412662:	2b0d      	cmp	r3, #13
  412664:	d043      	beq.n	4126ee <lv_img_buf_get_px_alpha+0xaa>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  412666:	2b0e      	cmp	r3, #14
  412668:	d05f      	beq.n	41272a <lv_img_buf_get_px_alpha+0xe6>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
  41266a:	20ff      	movs	r0, #255	; 0xff
}
  41266c:	b005      	add	sp, #20
  41266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
  412670:	6801      	ldr	r1, [r0, #0]
  412672:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412676:	fb01 6102 	mla	r1, r1, r2, r6
  41267a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  41267e:	440d      	add	r5, r1
  412680:	78a8      	ldrb	r0, [r5, #2]
  412682:	e7f3      	b.n	41266c <lv_img_buf_get_px_alpha+0x28>
        uint8_t bit = x & 0x7;
  412684:	f001 0207 	and.w	r2, r1, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
  412688:	6801      	ldr	r1, [r0, #0]
  41268a:	f3c1 218a 	ubfx	r1, r1, #10, #11
  41268e:	3107      	adds	r1, #7
  412690:	10c9      	asrs	r1, r1, #3
  412692:	fb01 f107 	mul.w	r1, r1, r7
  412696:	eb01 01e6 	add.w	r1, r1, r6, asr #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  41269a:	5c6b      	ldrb	r3, [r5, r1]
  41269c:	f1c2 0207 	rsb	r2, r2, #7
  4126a0:	2101      	movs	r1, #1
  4126a2:	4091      	lsls	r1, r2
  4126a4:	400b      	ands	r3, r1
  4126a6:	4113      	asrs	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
  4126a8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4126ac:	d101      	bne.n	4126b2 <lv_img_buf_get_px_alpha+0x6e>
  4126ae:	20ff      	movs	r0, #255	; 0xff
  4126b0:	e7dc      	b.n	41266c <lv_img_buf_get_px_alpha+0x28>
  4126b2:	2000      	movs	r0, #0
  4126b4:	e7da      	b.n	41266c <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  4126b6:	4b20      	ldr	r3, [pc, #128]	; (412738 <lv_img_buf_get_px_alpha+0xf4>)
  4126b8:	681b      	ldr	r3, [r3, #0]
  4126ba:	9300      	str	r3, [sp, #0]
        uint8_t bit = (x & 0x3) * 2;
  4126bc:	f001 0203 	and.w	r2, r1, #3
  4126c0:	0052      	lsls	r2, r2, #1
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
  4126c2:	6801      	ldr	r1, [r0, #0]
  4126c4:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4126c8:	3103      	adds	r1, #3
  4126ca:	1089      	asrs	r1, r1, #2
  4126cc:	fb01 f107 	mul.w	r1, r1, r7
  4126d0:	eb01 01a6 	add.w	r1, r1, r6, asr #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  4126d4:	5c6b      	ldrb	r3, [r5, r1]
  4126d6:	f1c2 0206 	rsb	r2, r2, #6
  4126da:	2103      	movs	r1, #3
  4126dc:	4091      	lsls	r1, r2
  4126de:	400b      	ands	r3, r1
  4126e0:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  4126e2:	aa04      	add	r2, sp, #16
  4126e4:	fa52 f383 	uxtab	r3, r2, r3
  4126e8:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  4126ec:	e7be      	b.n	41266c <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
  4126ee:	4b13      	ldr	r3, [pc, #76]	; (41273c <lv_img_buf_get_px_alpha+0xf8>)
  4126f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4126f2:	f10d 0e10 	add.w	lr, sp, #16
  4126f6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
  4126fa:	f006 0201 	and.w	r2, r6, #1
  4126fe:	0092      	lsls	r2, r2, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
  412700:	6821      	ldr	r1, [r4, #0]
  412702:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412706:	3101      	adds	r1, #1
  412708:	1049      	asrs	r1, r1, #1
  41270a:	fb01 f107 	mul.w	r1, r1, r7
  41270e:	eb01 0166 	add.w	r1, r1, r6, asr #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  412712:	5c6b      	ldrb	r3, [r5, r1]
  412714:	f1c2 0204 	rsb	r2, r2, #4
  412718:	210f      	movs	r1, #15
  41271a:	4091      	lsls	r1, r2
  41271c:	400b      	ands	r3, r1
  41271e:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  412720:	fa5e f383 	uxtab	r3, lr, r3
  412724:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  412728:	e7a0      	b.n	41266c <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
  41272a:	6801      	ldr	r1, [r0, #0]
  41272c:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412730:	fb01 6102 	mla	r1, r1, r2, r6
        return buf_u8[px];
  412734:	5c68      	ldrb	r0, [r5, r1]
  412736:	e799      	b.n	41266c <lv_img_buf_get_px_alpha+0x28>
  412738:	0042c2cc 	.word	0x0042c2cc
  41273c:	0042c2d0 	.word	0x0042c2d0

00412740 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
  412740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412744:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
  412746:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  41274a:	021b      	lsls	r3, r3, #8
  41274c:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
  41274e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  412752:	021b      	lsls	r3, r3, #8
  412754:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
  412756:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  41275a:	4e3f      	ldr	r6, [pc, #252]	; (412858 <_lv_img_buf_transform_init+0x118>)
  41275c:	fb86 3200 	smull	r3, r2, r6, r0
  412760:	17c3      	asrs	r3, r0, #31
  412762:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  412766:	b21b      	sxth	r3, r3
    int32_t angle_high = angle_low + 1;
  412768:	f103 0901 	add.w	r9, r3, #1
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
  41276c:	f06f 0709 	mvn.w	r7, #9
  412770:	fb07 0703 	mla	r7, r7, r3, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
  412774:	b29d      	uxth	r5, r3
  412776:	4268      	negs	r0, r5
  412778:	b200      	sxth	r0, r0
  41277a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 412864 <_lv_img_buf_transform_init+0x124>
  41277e:	47d0      	blx	sl
  412780:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(-angle_high);
  412782:	fa1f f989 	uxth.w	r9, r9
  412786:	f1c9 0000 	rsb	r0, r9, #0
  41278a:	b200      	sxth	r0, r0
  41278c:	47d0      	blx	sl
  41278e:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
  412790:	f1c5 005a 	rsb	r0, r5, #90	; 0x5a
  412794:	b200      	sxth	r0, r0
  412796:	47d0      	blx	sl
  412798:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
  41279a:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
  41279e:	b200      	sxth	r0, r0
  4127a0:	47d0      	blx	sl

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  4127a2:	f1c7 020a 	rsb	r2, r7, #10
  4127a6:	fb0b f307 	mul.w	r3, fp, r7
  4127aa:	fb02 3308 	mla	r3, r2, r8, r3
  4127ae:	fb86 e103 	smull	lr, r1, r6, r3
  4127b2:	17db      	asrs	r3, r3, #31
  4127b4:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  4127b8:	fb00 f007 	mul.w	r0, r0, r7
  4127bc:	fb02 0005 	mla	r0, r2, r5, r0
  4127c0:	fb86 2600 	smull	r2, r6, r6, r0
  4127c4:	17c0      	asrs	r0, r0, #31
  4127c6:	ebc0 00a6 	rsb	r0, r0, r6, asr #2

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  4127ca:	115b      	asrs	r3, r3, #5
  4127cc:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  4127ce:	1140      	asrs	r0, r0, #5
  4127d0:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
  4127d2:	7ca0      	ldrb	r0, [r4, #18]
  4127d4:	4b21      	ldr	r3, [pc, #132]	; (41285c <_lv_img_buf_transform_init+0x11c>)
  4127d6:	4798      	blx	r3
  4127d8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4127dc:	f360 0300 	bfi	r3, r0, #0, #1
  4127e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
  4127e4:	7ca0      	ldrb	r0, [r4, #18]
  4127e6:	4b1e      	ldr	r3, [pc, #120]	; (412860 <_lv_img_buf_transform_init+0x120>)
  4127e8:	4798      	blx	r3
  4127ea:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4127ee:	f360 0341 	bfi	r3, r0, #1, #1
  4127f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  4127f6:	7ca2      	ldrb	r2, [r4, #18]
  4127f8:	1f13      	subs	r3, r2, #4
  4127fa:	b2db      	uxtb	r3, r3
  4127fc:	2b02      	cmp	r3, #2
  4127fe:	d924      	bls.n	41284a <_lv_img_buf_transform_init+0x10a>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    }
    else {
        dsc->tmp.native_color = 0;
  412800:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412804:	f36f 0382 	bfc	r3, #2, #1
  412808:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
  41280c:	6823      	ldr	r3, [r4, #0]
  41280e:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
  412810:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
  412812:	f003 031f 	and.w	r3, r3, #31
  412816:	f362 0304 	bfi	r3, r2, #0, #5
  41281a:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
  41281c:	88a2      	ldrh	r2, [r4, #4]
  41281e:	69a3      	ldr	r3, [r4, #24]
  412820:	f362 2394 	bfi	r3, r2, #10, #11
  412824:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
  412826:	88e2      	ldrh	r2, [r4, #6]
  412828:	0c1b      	lsrs	r3, r3, #16
  41282a:	f362 134f 	bfi	r3, r2, #5, #11
  41282e:	8363      	strh	r3, [r4, #26]

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
  412830:	89e2      	ldrh	r2, [r4, #14]
  412832:	0853      	lsrs	r3, r2, #1
  412834:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  412838:	fb93 f3f2 	sdiv	r3, r3, r2
  41283c:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
  41283e:	23ff      	movs	r3, #255	; 0xff
  412840:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
  412842:	8a23      	ldrh	r3, [r4, #16]
  412844:	82a3      	strh	r3, [r4, #20]
  412846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dsc->tmp.native_color = 1;
  41284a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41284e:	f043 0304 	orr.w	r3, r3, #4
  412852:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  412856:	e7d9      	b.n	41280c <_lv_img_buf_transform_init+0xcc>
  412858:	66666667 	.word	0x66666667
  41285c:	0040d39b 	.word	0x0040d39b
  412860:	0040d3af 	.word	0x0040d3af
  412864:	0041644d 	.word	0x0041644d

00412868 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
  412868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41286c:	b083      	sub	sp, #12
  41286e:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  412872:	9d0d      	ldr	r5, [sp, #52]	; 0x34
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
  412874:	2b00      	cmp	r3, #0
  412876:	bf08      	it	eq
  412878:	f5be 7f80 	cmpeq.w	lr, #256	; 0x100
  41287c:	d109      	bne.n	412892 <_lv_img_buf_get_transformed_area+0x2a>
        res->x1 = 0;
  41287e:	2300      	movs	r3, #0
  412880:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
  412882:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
  412884:	3901      	subs	r1, #1
  412886:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
  412888:	3a01      	subs	r2, #1
  41288a:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
  41288c:	b003      	add	sp, #12
  41288e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412892:	461f      	mov	r7, r3
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
  412894:	f9b5 6000 	ldrsh.w	r6, [r5]
  412898:	4276      	negs	r6, r6
  41289a:	fb0e f606 	mul.w	r6, lr, r6
  41289e:	1236      	asrs	r6, r6, #8
  4128a0:	3e01      	subs	r6, #1
  4128a2:	b2b6      	uxth	r6, r6
  4128a4:	8006      	strh	r6, [r0, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
  4128a6:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  4128aa:	4264      	negs	r4, r4
  4128ac:	fb04 f40e 	mul.w	r4, r4, lr
  4128b0:	1224      	asrs	r4, r4, #8
  4128b2:	3c01      	subs	r4, #1
  4128b4:	b2a4      	uxth	r4, r4
  4128b6:	8044      	strh	r4, [r0, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
  4128b8:	f9b5 3000 	ldrsh.w	r3, [r5]
  4128bc:	1ac9      	subs	r1, r1, r3
  4128be:	fb01 f10e 	mul.w	r1, r1, lr
  4128c2:	1209      	asrs	r1, r1, #8
  4128c4:	3102      	adds	r1, #2
  4128c6:	b289      	uxth	r1, r1
  4128c8:	8081      	strh	r1, [r0, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
  4128ca:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  4128ce:	1ad3      	subs	r3, r2, r3
  4128d0:	fb03 f30e 	mul.w	r3, r3, lr
  4128d4:	121b      	asrs	r3, r3, #8
  4128d6:	3302      	adds	r3, #2
  4128d8:	b29b      	uxth	r3, r3
  4128da:	80c3      	strh	r3, [r0, #6]
    if(angle == 0) {
  4128dc:	b967      	cbnz	r7, 4128f8 <_lv_img_buf_get_transformed_area+0x90>
        res->x1 += pivot->x;
  4128de:	882a      	ldrh	r2, [r5, #0]
  4128e0:	4416      	add	r6, r2
  4128e2:	8006      	strh	r6, [r0, #0]
        res->y1 += pivot->y;
  4128e4:	886a      	ldrh	r2, [r5, #2]
  4128e6:	4414      	add	r4, r2
  4128e8:	8044      	strh	r4, [r0, #2]
        res->x2 += pivot->x;
  4128ea:	882a      	ldrh	r2, [r5, #0]
  4128ec:	4411      	add	r1, r2
  4128ee:	8081      	strh	r1, [r0, #4]
        res->y2 += pivot->y;
  4128f0:	886a      	ldrh	r2, [r5, #2]
  4128f2:	4413      	add	r3, r2
  4128f4:	80c3      	strh	r3, [r0, #6]
        return;
  4128f6:	e7c9      	b.n	41288c <_lv_img_buf_get_transformed_area+0x24>
  4128f8:	4604      	mov	r4, r0
    int32_t angle_low = angle / 10;
  4128fa:	f8df 8150 	ldr.w	r8, [pc, #336]	; 412a4c <_lv_img_buf_get_transformed_area+0x1e4>
  4128fe:	fb88 3007 	smull	r3, r0, r8, r7
  412902:	17fe      	asrs	r6, r7, #31
  412904:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
  412908:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
  41290a:	f106 0a01 	add.w	sl, r6, #1
    int32_t angle_rem = angle  - (angle_low * 10);
  41290e:	f06f 0009 	mvn.w	r0, #9
  412912:	fb00 7706 	mla	r7, r0, r6, r7
    int32_t s1 = _lv_trigo_sin(angle_low);
  412916:	4630      	mov	r0, r6
  412918:	f8df 9134 	ldr.w	r9, [pc, #308]	; 412a50 <_lv_img_buf_get_transformed_area+0x1e8>
  41291c:	47c8      	blx	r9
  41291e:	9001      	str	r0, [sp, #4]
    int32_t s2 = _lv_trigo_sin(angle_high);
  412920:	fa0f f08a 	sxth.w	r0, sl
  412924:	47c8      	blx	r9
  412926:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
  412928:	f106 005a 	add.w	r0, r6, #90	; 0x5a
  41292c:	b200      	sxth	r0, r0
  41292e:	47c8      	blx	r9
  412930:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
  412932:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
  412936:	b200      	sxth	r0, r0
  412938:	47c8      	blx	r9
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  41293a:	f1c7 030a 	rsb	r3, r7, #10
  41293e:	fb0b fb07 	mul.w	fp, fp, r7
  412942:	9a01      	ldr	r2, [sp, #4]
  412944:	fb03 bb02 	mla	fp, r3, r2, fp
  412948:	fb88 210b 	smull	r2, r1, r8, fp
  41294c:	ea4f 72eb 	mov.w	r2, fp, asr #31
  412950:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  412954:	fb00 f007 	mul.w	r0, r0, r7
  412958:	fb03 0606 	mla	r6, r3, r6, r0
  41295c:	fb88 3806 	smull	r3, r8, r8, r6
  412960:	17f6      	asrs	r6, r6, #31
  412962:	ebc6 08a8 	rsb	r8, r6, r8, asr #2
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  412966:	1152      	asrs	r2, r2, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  412968:	ea4f 1868 	mov.w	r8, r8, asr #5
    xt = res->x1;
  41296c:	f9b4 0000 	ldrsh.w	r0, [r4]
    yt = res->y1;
  412970:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  412974:	fb00 f608 	mul.w	r6, r0, r8
  412978:	fb03 f102 	mul.w	r1, r3, r2
  41297c:	eba6 0c01 	sub.w	ip, r6, r1
  412980:	882f      	ldrh	r7, [r5, #0]
  412982:	eb07 2cac 	add.w	ip, r7, ip, asr #10
  412986:	fa0f fc8c 	sxth.w	ip, ip
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  41298a:	fb00 f002 	mul.w	r0, r0, r2
  41298e:	fb03 f308 	mul.w	r3, r3, r8
  412992:	eb00 0e03 	add.w	lr, r0, r3
  412996:	886d      	ldrh	r5, [r5, #2]
  412998:	eb05 2eae 	add.w	lr, r5, lr, asr #10
  41299c:	fa0f fe8e 	sxth.w	lr, lr
    xt = res->x2;
  4129a0:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4129a4:	fb09 fb08 	mul.w	fp, r9, r8
  4129a8:	ebab 0101 	sub.w	r1, fp, r1
  4129ac:	eb07 21a1 	add.w	r1, r7, r1, asr #10
  4129b0:	b209      	sxth	r1, r1
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4129b2:	fb09 f902 	mul.w	r9, r9, r2
  4129b6:	444b      	add	r3, r9
  4129b8:	eb05 23a3 	add.w	r3, r5, r3, asr #10
  4129bc:	b21b      	sxth	r3, r3
    yt = res->y2;
  4129be:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4129c2:	fb0a f202 	mul.w	r2, sl, r2
  4129c6:	1ab6      	subs	r6, r6, r2
  4129c8:	eb07 26a6 	add.w	r6, r7, r6, asr #10
  4129cc:	b236      	sxth	r6, r6
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4129ce:	fb0a f808 	mul.w	r8, sl, r8
  4129d2:	4440      	add	r0, r8
  4129d4:	eb05 20a0 	add.w	r0, r5, r0, asr #10
  4129d8:	b200      	sxth	r0, r0
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4129da:	ebab 0202 	sub.w	r2, fp, r2
  4129de:	eb07 27a2 	add.w	r7, r7, r2, asr #10
  4129e2:	b23f      	sxth	r7, r7
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4129e4:	44c8      	add	r8, r9
  4129e6:	eb05 25a8 	add.w	r5, r5, r8, asr #10
  4129ea:	b22d      	sxth	r5, r5
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
  4129ec:	460a      	mov	r2, r1
  4129ee:	42b9      	cmp	r1, r7
  4129f0:	bfa8      	it	ge
  4129f2:	463a      	movge	r2, r7
  4129f4:	46e0      	mov	r8, ip
  4129f6:	45b4      	cmp	ip, r6
  4129f8:	bfa8      	it	ge
  4129fa:	46b0      	movge	r8, r6
  4129fc:	4542      	cmp	r2, r8
  4129fe:	bfa8      	it	ge
  412a00:	4642      	movge	r2, r8
  412a02:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
  412a04:	42b9      	cmp	r1, r7
  412a06:	bfb8      	it	lt
  412a08:	4639      	movlt	r1, r7
  412a0a:	45b4      	cmp	ip, r6
  412a0c:	bfb8      	it	lt
  412a0e:	46b4      	movlt	ip, r6
  412a10:	458c      	cmp	ip, r1
  412a12:	bfb8      	it	lt
  412a14:	468c      	movlt	ip, r1
  412a16:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
  412a1a:	461a      	mov	r2, r3
  412a1c:	42ab      	cmp	r3, r5
  412a1e:	bfa8      	it	ge
  412a20:	462a      	movge	r2, r5
  412a22:	4671      	mov	r1, lr
  412a24:	4586      	cmp	lr, r0
  412a26:	bfa8      	it	ge
  412a28:	4601      	movge	r1, r0
  412a2a:	428a      	cmp	r2, r1
  412a2c:	bfa8      	it	ge
  412a2e:	460a      	movge	r2, r1
  412a30:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
  412a32:	429d      	cmp	r5, r3
  412a34:	bfb8      	it	lt
  412a36:	461d      	movlt	r5, r3
  412a38:	4586      	cmp	lr, r0
  412a3a:	bfb8      	it	lt
  412a3c:	4686      	movlt	lr, r0
  412a3e:	45ae      	cmp	lr, r5
  412a40:	bfb8      	it	lt
  412a42:	46ae      	movlt	lr, r5
  412a44:	f8a4 e006 	strh.w	lr, [r4, #6]
  412a48:	e720      	b.n	41288c <_lv_img_buf_get_transformed_area+0x24>
  412a4a:	bf00      	nop
  412a4c:	66666667 	.word	0x66666667
  412a50:	0041644d 	.word	0x0041644d

00412a54 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
  412a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412a58:	b089      	sub	sp, #36	; 0x24
  412a5a:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
  412a5c:	6801      	ldr	r1, [r0, #0]

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
  412a5e:	f9b0 603c 	ldrsh.w	r6, [r0, #60]	; 0x3c
  412a62:	b2f2      	uxtb	r2, r6
    int ys_fract = dsc->tmp.ys & 0xff;
  412a64:	f9b0 503e 	ldrsh.w	r5, [r0, #62]	; 0x3e
  412a68:	b2eb      	uxtb	r3, r5
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
  412a6a:	2a6f      	cmp	r2, #111	; 0x6f
  412a6c:	dc28      	bgt.n	412ac0 <_lv_img_buf_transform_anti_alias+0x6c>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  412a6e:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  412a72:	2a01      	cmp	r2, #1
  412a74:	d422      	bmi.n	412abc <_lv_img_buf_transform_anti_alias+0x68>
        xn = - 1;
  412a76:	f04f 37ff 	mov.w	r7, #4294967295
        xr = xs_fract + 0x80;
  412a7a:	b2f6      	uxtb	r6, r6
  412a7c:	f086 0680 	eor.w	r6, r6, #128	; 0x80
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
  412a80:	2b6f      	cmp	r3, #111	; 0x6f
  412a82:	dc34      	bgt.n	412aee <_lv_img_buf_transform_anti_alias+0x9a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  412a84:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  412a88:	2b01      	cmp	r3, #1
  412a8a:	d42d      	bmi.n	412ae8 <_lv_img_buf_transform_anti_alias+0x94>
        yn = - 1;
  412a8c:	f04f 38ff 	mov.w	r8, #4294967295

        yr = ys_fract + 0x80;
  412a90:	b2ed      	uxtb	r5, r5
  412a92:	f085 0580 	eor.w	r5, r5, #128	; 0x80
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
  412a96:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
  412a9a:	f894 a016 	ldrb.w	sl, [r4, #22]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
  412a9e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412aa2:	f013 0f04 	tst.w	r3, #4
  412aa6:	f000 808b 	beq.w	412bc0 <_lv_img_buf_transform_anti_alias+0x16c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
  412aaa:	6c62      	ldr	r2, [r4, #68]	; 0x44
  412aac:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  412ab0:	fb03 2307 	mla	r3, r3, r7, r2
  412ab4:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  412ab6:	a807      	add	r0, sp, #28
  412ab8:	2202      	movs	r2, #2
  412aba:	e034      	b.n	412b26 <_lv_img_buf_transform_anti_alias+0xd2>
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  412abc:	2700      	movs	r7, #0
  412abe:	e7dc      	b.n	412a7a <_lv_img_buf_transform_anti_alias+0x26>
    else if(xs_fract > 0x90) {
  412ac0:	2a90      	cmp	r2, #144	; 0x90
  412ac2:	dd0e      	ble.n	412ae2 <_lv_img_buf_transform_anti_alias+0x8e>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  412ac4:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  412ac8:	3201      	adds	r2, #1
  412aca:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
  412ace:	4282      	cmp	r2, r0
  412ad0:	da05      	bge.n	412ade <_lv_img_buf_transform_anti_alias+0x8a>
        xn =  1;
  412ad2:	2701      	movs	r7, #1
        xr = (0xFF - xs_fract) + 0x80;
  412ad4:	b2f6      	uxtb	r6, r6
  412ad6:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
  412ada:	b2f6      	uxtb	r6, r6
  412adc:	e7d0      	b.n	412a80 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  412ade:	2700      	movs	r7, #0
  412ae0:	e7f8      	b.n	412ad4 <_lv_img_buf_transform_anti_alias+0x80>
        xr = 0xFF;
  412ae2:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
  412ae4:	2700      	movs	r7, #0
  412ae6:	e7cb      	b.n	412a80 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  412ae8:	f04f 0800 	mov.w	r8, #0
  412aec:	e7d0      	b.n	412a90 <_lv_img_buf_transform_anti_alias+0x3c>
    else if(ys_fract > 0x90) {
  412aee:	2b90      	cmp	r3, #144	; 0x90
  412af0:	dd10      	ble.n	412b14 <_lv_img_buf_transform_anti_alias+0xc0>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  412af2:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  412af6:	3301      	adds	r3, #1
  412af8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  412afc:	4293      	cmp	r3, r2
  412afe:	da06      	bge.n	412b0e <_lv_img_buf_transform_anti_alias+0xba>
        yn =  1;
  412b00:	f04f 0801 	mov.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
  412b04:	b2ed      	uxtb	r5, r5
  412b06:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
  412b0a:	b2ed      	uxtb	r5, r5
  412b0c:	e7c3      	b.n	412a96 <_lv_img_buf_transform_anti_alias+0x42>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  412b0e:	f04f 0800 	mov.w	r8, #0
  412b12:	e7f7      	b.n	412b04 <_lv_img_buf_transform_anti_alias+0xb0>
        yr = 0xFF;
  412b14:	25ff      	movs	r5, #255	; 0xff
        yn = 0;
  412b16:	f04f 0800 	mov.w	r8, #0
  412b1a:	e7bc      	b.n	412a96 <_lv_img_buf_transform_anti_alias+0x42>
        *d8 = *s8;
  412b1c:	f813 eb01 	ldrb.w	lr, [r3], #1
  412b20:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412b24:	3a01      	subs	r2, #1
    while(len) {
  412b26:	2a00      	cmp	r2, #0
  412b28:	d1f8      	bne.n	412b1c <_lv_img_buf_transform_anti_alias+0xc8>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
  412b2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
  412b2c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  412b30:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  412b34:	fb03 f300 	mul.w	r3, r3, r0
  412b38:	fb03 2308 	mla	r3, r3, r8, r2
  412b3c:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  412b3e:	a806      	add	r0, sp, #24
  412b40:	2202      	movs	r2, #2
  412b42:	e004      	b.n	412b4e <_lv_img_buf_transform_anti_alias+0xfa>
        *d8 = *s8;
  412b44:	f813 eb01 	ldrb.w	lr, [r3], #1
  412b48:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412b4c:	3a01      	subs	r2, #1
    while(len) {
  412b4e:	2a00      	cmp	r2, #0
  412b50:	d1f8      	bne.n	412b44 <_lv_img_buf_transform_anti_alias+0xf0>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
  412b52:	6c60      	ldr	r0, [r4, #68]	; 0x44
  412b54:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  412b58:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  412b5c:	fb03 f302 	mul.w	r3, r3, r2
  412b60:	fb03 f308 	mul.w	r3, r3, r8
  412b64:	fb02 3307 	mla	r3, r2, r7, r3
  412b68:	4403      	add	r3, r0
  412b6a:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  412b6c:	a805      	add	r0, sp, #20
  412b6e:	2202      	movs	r2, #2
  412b70:	e004      	b.n	412b7c <_lv_img_buf_transform_anti_alias+0x128>
        *d8 = *s8;
  412b72:	f813 eb01 	ldrb.w	lr, [r3], #1
  412b76:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412b7a:	3a01      	subs	r2, #1
    while(len) {
  412b7c:	2a00      	cmp	r2, #0
  412b7e:	d1f8      	bne.n	412b72 <_lv_img_buf_transform_anti_alias+0x11e>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
  412b80:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412b84:	f013 0f02 	tst.w	r3, #2
  412b88:	d06a      	beq.n	412c60 <_lv_img_buf_transform_anti_alias+0x20c>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  412b8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  412b8c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  412b90:	fb03 f207 	mul.w	r2, r3, r7
  412b94:	1887      	adds	r7, r0, r2
  412b96:	441f      	add	r7, r3
  412b98:	3f01      	subs	r7, #1
  412b9a:	f811 b007 	ldrb.w	fp, [r1, r7]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
  412b9e:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
  412ba2:	fb07 f703 	mul.w	r7, r7, r3
  412ba6:	fb07 f808 	mul.w	r8, r7, r8
  412baa:	eb00 0708 	add.w	r7, r0, r8
  412bae:	441f      	add	r7, r3
  412bb0:	3f01      	subs	r7, #1
  412bb2:	5dcf      	ldrb	r7, [r1, r7]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  412bb4:	4442      	add	r2, r8
  412bb6:	4402      	add	r2, r0
  412bb8:	4413      	add	r3, r2
  412bba:	3b01      	subs	r3, #1
  412bbc:	5cc8      	ldrb	r0, [r1, r3]
  412bbe:	e052      	b.n	412c66 <_lv_img_buf_transform_anti_alias+0x212>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
  412bc0:	f104 0318 	add.w	r3, r4, #24
  412bc4:	4618      	mov	r0, r3
  412bc6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  412bca:	b2bf      	uxth	r7, r7
  412bcc:	4439      	add	r1, r7
  412bce:	8a23      	ldrh	r3, [r4, #16]
  412bd0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  412bd4:	b209      	sxth	r1, r1
  412bd6:	9001      	str	r0, [sp, #4]
  412bd8:	f8df b300 	ldr.w	fp, [pc, #768]	; 412edc <_lv_img_buf_transform_anti_alias+0x488>
  412bdc:	47d8      	blx	fp
  412bde:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
  412be2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412be6:	fa1f f888 	uxth.w	r8, r8
  412bea:	4442      	add	r2, r8
  412bec:	8a23      	ldrh	r3, [r4, #16]
  412bee:	b212      	sxth	r2, r2
  412bf0:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  412bf4:	9801      	ldr	r0, [sp, #4]
  412bf6:	47d8      	blx	fp
  412bf8:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
  412bfc:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  412c00:	4439      	add	r1, r7
  412c02:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412c06:	4442      	add	r2, r8
  412c08:	8a23      	ldrh	r3, [r4, #16]
  412c0a:	b212      	sxth	r2, r2
  412c0c:	b209      	sxth	r1, r1
  412c0e:	9801      	ldr	r0, [sp, #4]
  412c10:	47d8      	blx	fp
  412c12:	f8ad 0014 	strh.w	r0, [sp, #20]

        if(dsc->tmp.has_alpha) {
  412c16:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412c1a:	f013 0f02 	tst.w	r3, #2
  412c1e:	d058      	beq.n	412cd2 <_lv_img_buf_transform_anti_alias+0x27e>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
  412c20:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
  412c24:	9202      	str	r2, [sp, #8]
  412c26:	fa17 f782 	uxtah	r7, r7, r2
  412c2a:	b23f      	sxth	r7, r7
  412c2c:	463b      	mov	r3, r7
  412c2e:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  412c32:	463a      	mov	r2, r7
  412c34:	9303      	str	r3, [sp, #12]
  412c36:	4619      	mov	r1, r3
  412c38:	9801      	ldr	r0, [sp, #4]
  412c3a:	4ba7      	ldr	r3, [pc, #668]	; (412ed8 <_lv_img_buf_transform_anti_alias+0x484>)
  412c3c:	4798      	blx	r3
  412c3e:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
  412c40:	fa18 f887 	uxtah	r8, r8, r7
  412c44:	fa0f f888 	sxth.w	r8, r8
  412c48:	4642      	mov	r2, r8
  412c4a:	9902      	ldr	r1, [sp, #8]
  412c4c:	9801      	ldr	r0, [sp, #4]
  412c4e:	4fa2      	ldr	r7, [pc, #648]	; (412ed8 <_lv_img_buf_transform_anti_alias+0x484>)
  412c50:	47b8      	blx	r7
  412c52:	4607      	mov	r7, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
  412c54:	4642      	mov	r2, r8
  412c56:	9903      	ldr	r1, [sp, #12]
  412c58:	9801      	ldr	r0, [sp, #4]
  412c5a:	4b9f      	ldr	r3, [pc, #636]	; (412ed8 <_lv_img_buf_transform_anti_alias+0x484>)
  412c5c:	4798      	blx	r3
  412c5e:	e002      	b.n	412c66 <_lv_img_buf_transform_anti_alias+0x212>
    lv_opa_t a11 = 0;
  412c60:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  412c62:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  412c64:	4683      	mov	fp, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
  412c66:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412c6a:	f013 0f02 	tst.w	r3, #2
  412c6e:	d036      	beq.n	412cde <_lv_img_buf_transform_anti_alias+0x28a>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
  412c70:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
  412c74:	fb03 f10b 	mul.w	r1, r3, fp
  412c78:	fb06 110a 	mla	r1, r6, sl, r1
  412c7c:	f3c1 2107 	ubfx	r1, r1, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
  412c80:	fb03 f300 	mul.w	r3, r3, r0
  412c84:	fb06 3307 	mla	r3, r6, r7, r3
  412c88:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
  412c8c:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  412c90:	fb02 f203 	mul.w	r2, r2, r3
  412c94:	fb05 2201 	mla	r2, r5, r1, r2
  412c98:	1212      	asrs	r2, r2, #8
  412c9a:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  412c9c:	2902      	cmp	r1, #2
  412c9e:	bf98      	it	ls
  412ca0:	2b02      	cmpls	r3, #2
  412ca2:	f240 8117 	bls.w	412ed4 <_lv_img_buf_transform_anti_alias+0x480>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  412ca6:	2902      	cmp	r1, #2
  412ca8:	d800      	bhi.n	412cac <_lv_img_buf_transform_anti_alias+0x258>
  412caa:	2500      	movs	r5, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
  412cac:	2b02      	cmp	r3, #2
  412cae:	d800      	bhi.n	412cb2 <_lv_img_buf_transform_anti_alias+0x25e>
  412cb0:	25ff      	movs	r5, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  412cb2:	f1ba 0f02 	cmp.w	sl, #2
  412cb6:	d910      	bls.n	412cda <_lv_img_buf_transform_anti_alias+0x286>
    lv_opa_t xr0 = xr;
  412cb8:	4632      	mov	r2, r6
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
  412cba:	f1bb 0f02 	cmp.w	fp, #2
  412cbe:	d800      	bhi.n	412cc2 <_lv_img_buf_transform_anti_alias+0x26e>
  412cc0:	22ff      	movs	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
  412cc2:	2f02      	cmp	r7, #2
  412cc4:	d800      	bhi.n	412cc8 <_lv_img_buf_transform_anti_alias+0x274>
  412cc6:	2600      	movs	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  412cc8:	2802      	cmp	r0, #2
  412cca:	d962      	bls.n	412d92 <_lv_img_buf_transform_anti_alias+0x33e>
  412ccc:	4633      	mov	r3, r6
  412cce:	4616      	mov	r6, r2
  412cd0:	e008      	b.n	412ce4 <_lv_img_buf_transform_anti_alias+0x290>
    lv_opa_t a11 = 0;
  412cd2:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  412cd4:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  412cd6:	4683      	mov	fp, r0
  412cd8:	e7c5      	b.n	412c66 <_lv_img_buf_transform_anti_alias+0x212>
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  412cda:	2200      	movs	r2, #0
  412cdc:	e7ed      	b.n	412cba <_lv_img_buf_transform_anti_alias+0x266>
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
  412cde:	23ff      	movs	r3, #255	; 0xff
  412ce0:	75a3      	strb	r3, [r4, #22]
        xr1 = xr;
  412ce2:	4633      	mov	r3, r6
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
  412ce4:	2e00      	cmp	r6, #0
  412ce6:	d157      	bne.n	412d98 <_lv_img_buf_transform_anti_alias+0x344>
  412ce8:	f8bd 901c 	ldrh.w	r9, [sp, #28]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
  412cec:	2b00      	cmp	r3, #0
  412cee:	f040 809c 	bne.w	412e2a <_lv_img_buf_transform_anti_alias+0x3d6>
  412cf2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  412cf6:	2d00      	cmp	r5, #0
  412cf8:	f000 80e5 	beq.w	412ec6 <_lv_img_buf_transform_anti_alias+0x472>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  412cfc:	2dff      	cmp	r5, #255	; 0xff
  412cfe:	f000 80e5 	beq.w	412ecc <_lv_img_buf_transform_anti_alias+0x478>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412d02:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  412d06:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  412d0a:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
  412d0e:	fb00 f101 	mul.w	r1, r0, r1
  412d12:	fb05 1202 	mla	r2, r5, r2, r1
  412d16:	3280      	adds	r2, #128	; 0x80
  412d18:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412d1c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412d20:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412d24:	f04f 0100 	mov.w	r1, #0
  412d28:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412d2c:	f009 0607 	and.w	r6, r9, #7
  412d30:	f3c9 3242 	ubfx	r2, r9, #13, #3
  412d34:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  412d38:	f003 0707 	and.w	r7, r3, #7
  412d3c:	f3c3 3642 	ubfx	r6, r3, #13, #3
  412d40:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  412d44:	fb06 f600 	mul.w	r6, r6, r0
  412d48:	fb02 6205 	mla	r2, r2, r5, r6
  412d4c:	3280      	adds	r2, #128	; 0x80
  412d4e:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  412d52:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  412d56:	f3c2 6682 	ubfx	r6, r2, #26, #3
  412d5a:	f366 0102 	bfi	r1, r6, #0, #3
  412d5e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412d62:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412d66:	f3c9 2904 	ubfx	r9, r9, #8, #5
  412d6a:	f3c3 2304 	ubfx	r3, r3, #8, #5
  412d6e:	fb03 f000 	mul.w	r0, r3, r0
  412d72:	fb09 0505 	mla	r5, r9, r5, r0
  412d76:	3580      	adds	r5, #128	; 0x80
  412d78:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  412d7c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  412d80:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  412d84:	f365 210c 	bfi	r1, r5, #8, #5
    else dsc->res.color = lv_color_mix(c0, c1, yr);
  412d88:	82a1      	strh	r1, [r4, #20]

    return true;
  412d8a:	2001      	movs	r0, #1
}
  412d8c:	b009      	add	sp, #36	; 0x24
  412d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412d92:	4616      	mov	r6, r2
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  412d94:	23ff      	movs	r3, #255	; 0xff
  412d96:	e7a5      	b.n	412ce4 <_lv_img_buf_transform_anti_alias+0x290>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
  412d98:	2eff      	cmp	r6, #255	; 0xff
  412d9a:	d0a7      	beq.n	412cec <_lv_img_buf_transform_anti_alias+0x298>
  412d9c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412da0:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  412da4:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  412da8:	f1c6 07ff 	rsb	r7, r6, #255	; 0xff
  412dac:	fb07 f101 	mul.w	r1, r7, r1
  412db0:	fb06 1202 	mla	r2, r6, r2, r1
  412db4:	3280      	adds	r2, #128	; 0x80
  412db6:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412dba:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412dbe:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412dc2:	f04f 0100 	mov.w	r1, #0
  412dc6:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412dca:	f009 0e07 	and.w	lr, r9, #7
  412dce:	f3c9 3242 	ubfx	r2, r9, #13, #3
  412dd2:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  412dd6:	f000 0c07 	and.w	ip, r0, #7
  412dda:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  412dde:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  412de2:	fb0e fe07 	mul.w	lr, lr, r7
  412de6:	fb02 e206 	mla	r2, r2, r6, lr
  412dea:	3280      	adds	r2, #128	; 0x80
  412dec:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412df0:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  412df4:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  412df8:	f36e 0102 	bfi	r1, lr, #0, #3
  412dfc:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412e00:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412e04:	f3c9 2904 	ubfx	r9, r9, #8, #5
  412e08:	f3c0 2004 	ubfx	r0, r0, #8, #5
  412e0c:	fb00 f707 	mul.w	r7, r0, r7
  412e10:	fb09 7606 	mla	r6, r9, r6, r7
  412e14:	3680      	adds	r6, #128	; 0x80
  412e16:	eb06 2206 	add.w	r2, r6, r6, lsl #8
  412e1a:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
  412e1e:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  412e22:	f366 210c 	bfi	r1, r6, #8, #5
  412e26:	4689      	mov	r9, r1
  412e28:	e760      	b.n	412cec <_lv_img_buf_transform_anti_alias+0x298>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
  412e2a:	2bff      	cmp	r3, #255	; 0xff
  412e2c:	d048      	beq.n	412ec0 <_lv_img_buf_transform_anti_alias+0x46c>
  412e2e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  412e32:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412e36:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  412e3a:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  412e3e:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  412e42:	fb07 f101 	mul.w	r1, r7, r1
  412e46:	fb03 1202 	mla	r2, r3, r2, r1
  412e4a:	3280      	adds	r2, #128	; 0x80
  412e4c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412e50:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412e54:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412e58:	f04f 0100 	mov.w	r1, #0
  412e5c:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412e60:	f006 0e07 	and.w	lr, r6, #7
  412e64:	f3c6 3242 	ubfx	r2, r6, #13, #3
  412e68:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  412e6c:	f000 0c07 	and.w	ip, r0, #7
  412e70:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  412e74:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  412e78:	fb0e fe07 	mul.w	lr, lr, r7
  412e7c:	fb02 e203 	mla	r2, r2, r3, lr
  412e80:	3280      	adds	r2, #128	; 0x80
  412e82:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412e86:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  412e8a:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  412e8e:	f36e 0102 	bfi	r1, lr, #0, #3
  412e92:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412e96:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412e9a:	f3c6 2604 	ubfx	r6, r6, #8, #5
  412e9e:	f3c0 2004 	ubfx	r0, r0, #8, #5
  412ea2:	fb00 f707 	mul.w	r7, r0, r7
  412ea6:	fb06 7303 	mla	r3, r6, r3, r7
  412eaa:	3380      	adds	r3, #128	; 0x80
  412eac:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  412eb0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  412eb4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  412eb8:	f363 210c 	bfi	r1, r3, #8, #5
  412ebc:	460b      	mov	r3, r1
  412ebe:	e71a      	b.n	412cf6 <_lv_img_buf_transform_anti_alias+0x2a2>
  412ec0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  412ec4:	e717      	b.n	412cf6 <_lv_img_buf_transform_anti_alias+0x2a2>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  412ec6:	82a3      	strh	r3, [r4, #20]
    return true;
  412ec8:	2001      	movs	r0, #1
  412eca:	e75f      	b.n	412d8c <_lv_img_buf_transform_anti_alias+0x338>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  412ecc:	f8a4 9014 	strh.w	r9, [r4, #20]
    return true;
  412ed0:	2001      	movs	r0, #1
  412ed2:	e75b      	b.n	412d8c <_lv_img_buf_transform_anti_alias+0x338>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  412ed4:	2000      	movs	r0, #0
  412ed6:	e759      	b.n	412d8c <_lv_img_buf_transform_anti_alias+0x338>
  412ed8:	00412645 	.word	0x00412645
  412edc:	00412521 	.word	0x00412521

00412ee0 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
  412ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
  412ee4:	4b4c      	ldr	r3, [pc, #304]	; (413018 <_lv_img_cache_open+0x138>)
  412ee6:	881f      	ldrh	r7, [r3, #0]
  412ee8:	2f00      	cmp	r7, #0
  412eea:	f000 8091 	beq.w	413010 <_lv_img_cache_open+0x130>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  412eee:	4b4b      	ldr	r3, [pc, #300]	; (41301c <_lv_img_cache_open+0x13c>)
  412ef0:	681e      	ldr	r6, [r3, #0]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  412ef2:	2300      	movs	r3, #0
  412ef4:	e001      	b.n	412efa <_lv_img_cache_open+0x1a>
  412ef6:	3301      	adds	r3, #1
  412ef8:	b29b      	uxth	r3, r3
  412efa:	42bb      	cmp	r3, r7
  412efc:	d20a      	bcs.n	412f14 <_lv_img_cache_open+0x34>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  412efe:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
  412f02:	00ac      	lsls	r4, r5, #2
  412f04:	4434      	add	r4, r6
  412f06:	6a25      	ldr	r5, [r4, #32]
  412f08:	4a45      	ldr	r2, [pc, #276]	; (413020 <_lv_img_cache_open+0x140>)
  412f0a:	4295      	cmp	r5, r2
  412f0c:	dbf3      	blt.n	412ef6 <_lv_img_cache_open+0x16>
            cache[i].life -= LV_IMG_CACHE_AGING;
  412f0e:	3d01      	subs	r5, #1
  412f10:	6225      	str	r5, [r4, #32]
  412f12:	e7f0      	b.n	412ef6 <_lv_img_cache_open+0x16>
  412f14:	4688      	mov	r8, r1
  412f16:	4607      	mov	r7, r0
  412f18:	2400      	movs	r4, #0
  412f1a:	e00c      	b.n	412f36 <_lv_img_cache_open+0x56>

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412f1c:	892a      	ldrh	r2, [r5, #8]
  412f1e:	fa1f f388 	uxth.w	r3, r8
  412f22:	429a      	cmp	r2, r3
  412f24:	d020      	beq.n	412f68 <_lv_img_cache_open+0x88>
        bool match = false;
  412f26:	2300      	movs	r3, #0
  412f28:	e002      	b.n	412f30 <_lv_img_cache_open+0x50>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
  412f2a:	2801      	cmp	r0, #1
  412f2c:	d015      	beq.n	412f5a <_lv_img_cache_open+0x7a>
        bool match = false;
  412f2e:	2300      	movs	r3, #0
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
        }

        if(match) {
  412f30:	b9f3      	cbnz	r3, 412f70 <_lv_img_cache_open+0x90>
    for(i = 0; i < entry_cnt; i++) {
  412f32:	3401      	adds	r4, #1
  412f34:	b2a4      	uxth	r4, r4
  412f36:	4b38      	ldr	r3, [pc, #224]	; (413018 <_lv_img_cache_open+0x138>)
  412f38:	881b      	ldrh	r3, [r3, #0]
  412f3a:	429c      	cmp	r4, r3
  412f3c:	d223      	bcs.n	412f86 <_lv_img_cache_open+0xa6>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
  412f3e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412f42:	009d      	lsls	r5, r3, #2
  412f44:	4435      	add	r5, r6
  412f46:	6868      	ldr	r0, [r5, #4]
  412f48:	4b36      	ldr	r3, [pc, #216]	; (413024 <_lv_img_cache_open+0x144>)
  412f4a:	4798      	blx	r3
        if(src_type == LV_IMG_SRC_VARIABLE) {
  412f4c:	2800      	cmp	r0, #0
  412f4e:	d1ec      	bne.n	412f2a <_lv_img_cache_open+0x4a>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412f50:	686b      	ldr	r3, [r5, #4]
  412f52:	42bb      	cmp	r3, r7
  412f54:	d0e2      	beq.n	412f1c <_lv_img_cache_open+0x3c>
        bool match = false;
  412f56:	2300      	movs	r3, #0
  412f58:	e7ea      	b.n	412f30 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  412f5a:	4639      	mov	r1, r7
  412f5c:	6868      	ldr	r0, [r5, #4]
  412f5e:	4b32      	ldr	r3, [pc, #200]	; (413028 <_lv_img_cache_open+0x148>)
  412f60:	4798      	blx	r3
  412f62:	b118      	cbz	r0, 412f6c <_lv_img_cache_open+0x8c>
        bool match = false;
  412f64:	2300      	movs	r3, #0
  412f66:	e7e3      	b.n	412f30 <_lv_img_cache_open+0x50>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412f68:	2301      	movs	r3, #1
  412f6a:	e7e1      	b.n	412f30 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  412f6c:	2301      	movs	r3, #1
  412f6e:	e7df      	b.n	412f30 <_lv_img_cache_open+0x50>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  412f70:	696b      	ldr	r3, [r5, #20]
  412f72:	6a2a      	ldr	r2, [r5, #32]
  412f74:	4413      	add	r3, r2
  412f76:	622b      	str	r3, [r5, #32]
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
  412f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  412f7c:	dd04      	ble.n	412f88 <_lv_img_cache_open+0xa8>
  412f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  412f82:	622b      	str	r3, [r5, #32]
  412f84:	e000      	b.n	412f88 <_lv_img_cache_open+0xa8>
    lv_img_cache_entry_t * cached_src = NULL;
  412f86:	2500      	movs	r5, #0
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
  412f88:	b115      	cbz	r5, 412f90 <_lv_img_cache_open+0xb0>
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
  412f8a:	4628      	mov	r0, r5
  412f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412f90:	4634      	mov	r4, r6
  412f92:	2301      	movs	r3, #1
  412f94:	e001      	b.n	412f9a <_lv_img_cache_open+0xba>
    for(i = 1; i < entry_cnt; i++) {
  412f96:	3301      	adds	r3, #1
  412f98:	b29b      	uxth	r3, r3
  412f9a:	4a1f      	ldr	r2, [pc, #124]	; (413018 <_lv_img_cache_open+0x138>)
  412f9c:	8812      	ldrh	r2, [r2, #0]
  412f9e:	4293      	cmp	r3, r2
  412fa0:	d209      	bcs.n	412fb6 <_lv_img_cache_open+0xd6>
        if(cache[i].life < cached_src->life) {
  412fa2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  412fa6:	008a      	lsls	r2, r1, #2
  412fa8:	4432      	add	r2, r6
  412faa:	6a10      	ldr	r0, [r2, #32]
  412fac:	6a21      	ldr	r1, [r4, #32]
  412fae:	4288      	cmp	r0, r1
  412fb0:	daf1      	bge.n	412f96 <_lv_img_cache_open+0xb6>
            cached_src = &cache[i];
  412fb2:	4614      	mov	r4, r2
  412fb4:	e7ef      	b.n	412f96 <_lv_img_cache_open+0xb6>
    if(cached_src->dec_dsc.src) {
  412fb6:	6863      	ldr	r3, [r4, #4]
  412fb8:	b113      	cbz	r3, 412fc0 <_lv_img_cache_open+0xe0>
        lv_img_decoder_close(&cached_src->dec_dsc);
  412fba:	4620      	mov	r0, r4
  412fbc:	4b1b      	ldr	r3, [pc, #108]	; (41302c <_lv_img_cache_open+0x14c>)
  412fbe:	4798      	blx	r3
    t_start                          = lv_tick_get();
  412fc0:	4b1b      	ldr	r3, [pc, #108]	; (413030 <_lv_img_cache_open+0x150>)
  412fc2:	4798      	blx	r3
  412fc4:	4606      	mov	r6, r0
    cached_src->dec_dsc.time_to_open = 0;
  412fc6:	2300      	movs	r3, #0
  412fc8:	6163      	str	r3, [r4, #20]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
  412fca:	4642      	mov	r2, r8
  412fcc:	4639      	mov	r1, r7
  412fce:	4620      	mov	r0, r4
  412fd0:	4b18      	ldr	r3, [pc, #96]	; (413034 <_lv_img_cache_open+0x154>)
  412fd2:	4798      	blx	r3
    if(open_res == LV_RES_INV) {
  412fd4:	b148      	cbz	r0, 412fea <_lv_img_cache_open+0x10a>
    cached_src->life = 0;
  412fd6:	2300      	movs	r3, #0
  412fd8:	6223      	str	r3, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
  412fda:	6963      	ldr	r3, [r4, #20]
  412fdc:	b19b      	cbz	r3, 413006 <_lv_img_cache_open+0x126>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  412fde:	6963      	ldr	r3, [r4, #20]
  412fe0:	b9c3      	cbnz	r3, 413014 <_lv_img_cache_open+0x134>
  412fe2:	2301      	movs	r3, #1
  412fe4:	6163      	str	r3, [r4, #20]
    return cached_src;
  412fe6:	4625      	mov	r5, r4
  412fe8:	e7cf      	b.n	412f8a <_lv_img_cache_open+0xaa>
        lv_img_decoder_close(&cached_src->dec_dsc);
  412fea:	4620      	mov	r0, r4
  412fec:	4b0f      	ldr	r3, [pc, #60]	; (41302c <_lv_img_cache_open+0x14c>)
  412fee:	4798      	blx	r3
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412ff0:	2120      	movs	r1, #32
  412ff2:	4620      	mov	r0, r4
  412ff4:	4e10      	ldr	r6, [pc, #64]	; (413038 <_lv_img_cache_open+0x158>)
  412ff6:	47b0      	blx	r6
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
  412ff8:	2124      	movs	r1, #36	; 0x24
  412ffa:	4620      	mov	r0, r4
  412ffc:	47b0      	blx	r6
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
  412ffe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  413002:	6223      	str	r3, [r4, #32]
        return NULL;
  413004:	e7c1      	b.n	412f8a <_lv_img_cache_open+0xaa>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
  413006:	4630      	mov	r0, r6
  413008:	4b0c      	ldr	r3, [pc, #48]	; (41303c <_lv_img_cache_open+0x15c>)
  41300a:	4798      	blx	r3
  41300c:	6160      	str	r0, [r4, #20]
  41300e:	e7e6      	b.n	412fde <_lv_img_cache_open+0xfe>
        return NULL;
  413010:	2500      	movs	r5, #0
  413012:	e7ba      	b.n	412f8a <_lv_img_cache_open+0xaa>
    return cached_src;
  413014:	4625      	mov	r5, r4
  413016:	e7b8      	b.n	412f8a <_lv_img_cache_open+0xaa>
  413018:	2040c7aa 	.word	0x2040c7aa
  41301c:	2043a32c 	.word	0x2043a32c
  413020:	80000002 	.word	0x80000002
  413024:	0040d62d 	.word	0x0040d62d
  413028:	00427c49 	.word	0x00427c49
  41302c:	00413a2d 	.word	0x00413a2d
  413030:	004150fd 	.word	0x004150fd
  413034:	0041396d 	.word	0x0041396d
  413038:	00416af1 	.word	0x00416af1
  41303c:	00415119 	.word	0x00415119

00413040 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
  413040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413044:	4606      	mov	r6, r0
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  413046:	4b11      	ldr	r3, [pc, #68]	; (41308c <lv_img_cache_invalidate_src+0x4c>)
  413048:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  41304a:	2400      	movs	r4, #0
  41304c:	e00d      	b.n	41306a <lv_img_cache_invalidate_src+0x2a>
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
  41304e:	b113      	cbz	r3, 413056 <lv_img_cache_invalidate_src+0x16>
                lv_img_decoder_close(&cache[i].dec_dsc);
  413050:	4628      	mov	r0, r5
  413052:	4b0f      	ldr	r3, [pc, #60]	; (413090 <lv_img_cache_invalidate_src+0x50>)
  413054:	4798      	blx	r3
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  413056:	2120      	movs	r1, #32
  413058:	4628      	mov	r0, r5
  41305a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 413098 <lv_img_cache_invalidate_src+0x58>
  41305e:	47c0      	blx	r8
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
  413060:	2124      	movs	r1, #36	; 0x24
  413062:	4628      	mov	r0, r5
  413064:	47c0      	blx	r8
    for(i = 0; i < entry_cnt; i++) {
  413066:	3401      	adds	r4, #1
  413068:	b2a4      	uxth	r4, r4
  41306a:	4b0a      	ldr	r3, [pc, #40]	; (413094 <lv_img_cache_invalidate_src+0x54>)
  41306c:	881b      	ldrh	r3, [r3, #0]
  41306e:	429c      	cmp	r4, r3
  413070:	d209      	bcs.n	413086 <lv_img_cache_invalidate_src+0x46>
        if(cache[i].dec_dsc.src == src || src == NULL) {
  413072:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  413076:	0098      	lsls	r0, r3, #2
  413078:	183d      	adds	r5, r7, r0
  41307a:	686b      	ldr	r3, [r5, #4]
  41307c:	42b3      	cmp	r3, r6
  41307e:	d0e6      	beq.n	41304e <lv_img_cache_invalidate_src+0xe>
  413080:	2e00      	cmp	r6, #0
  413082:	d1f0      	bne.n	413066 <lv_img_cache_invalidate_src+0x26>
  413084:	e7e3      	b.n	41304e <lv_img_cache_invalidate_src+0xe>
        }
    }
#endif
}
  413086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41308a:	bf00      	nop
  41308c:	2043a32c 	.word	0x2043a32c
  413090:	00413a2d 	.word	0x00413a2d
  413094:	2040c7aa 	.word	0x2040c7aa
  413098:	00416af1 	.word	0x00416af1

0041309c <lv_img_cache_set_size>:
{
  41309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41309e:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
  4130a0:	4b1c      	ldr	r3, [pc, #112]	; (413114 <lv_img_cache_set_size+0x78>)
  4130a2:	681b      	ldr	r3, [r3, #0]
  4130a4:	b133      	cbz	r3, 4130b4 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
  4130a6:	2000      	movs	r0, #0
  4130a8:	4b1b      	ldr	r3, [pc, #108]	; (413118 <lv_img_cache_set_size+0x7c>)
  4130aa:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
  4130ac:	4b19      	ldr	r3, [pc, #100]	; (413114 <lv_img_cache_set_size+0x78>)
  4130ae:	6818      	ldr	r0, [r3, #0]
  4130b0:	4b1a      	ldr	r3, [pc, #104]	; (41311c <lv_img_cache_set_size+0x80>)
  4130b2:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
  4130b4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4130b8:	0098      	lsls	r0, r3, #2
  4130ba:	4b19      	ldr	r3, [pc, #100]	; (413120 <lv_img_cache_set_size+0x84>)
  4130bc:	4798      	blx	r3
  4130be:	4b15      	ldr	r3, [pc, #84]	; (413114 <lv_img_cache_set_size+0x78>)
  4130c0:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  4130c2:	4b18      	ldr	r3, [pc, #96]	; (413124 <lv_img_cache_set_size+0x88>)
  4130c4:	4798      	blx	r3
  4130c6:	b130      	cbz	r0, 4130d6 <lv_img_cache_set_size+0x3a>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
  4130c8:	4b12      	ldr	r3, [pc, #72]	; (413114 <lv_img_cache_set_size+0x78>)
  4130ca:	681b      	ldr	r3, [r3, #0]
  4130cc:	b153      	cbz	r3, 4130e4 <lv_img_cache_set_size+0x48>
    entry_cnt = new_entry_cnt;
  4130ce:	4b16      	ldr	r3, [pc, #88]	; (413128 <lv_img_cache_set_size+0x8c>)
  4130d0:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
  4130d2:	2400      	movs	r4, #0
  4130d4:	e019      	b.n	41310a <lv_img_cache_set_size+0x6e>
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  4130d6:	4b0f      	ldr	r3, [pc, #60]	; (413114 <lv_img_cache_set_size+0x78>)
  4130d8:	681a      	ldr	r2, [r3, #0]
  4130da:	2300      	movs	r3, #0
  4130dc:	4813      	ldr	r0, [pc, #76]	; (41312c <lv_img_cache_set_size+0x90>)
  4130de:	4914      	ldr	r1, [pc, #80]	; (413130 <lv_img_cache_set_size+0x94>)
  4130e0:	4788      	blx	r1
  4130e2:	e7fe      	b.n	4130e2 <lv_img_cache_set_size+0x46>
        entry_cnt = 0;
  4130e4:	2200      	movs	r2, #0
  4130e6:	4b10      	ldr	r3, [pc, #64]	; (413128 <lv_img_cache_set_size+0x8c>)
  4130e8:	801a      	strh	r2, [r3, #0]
        return;
  4130ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  4130ec:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4130f0:	009d      	lsls	r5, r3, #2
  4130f2:	4f08      	ldr	r7, [pc, #32]	; (413114 <lv_img_cache_set_size+0x78>)
  4130f4:	6838      	ldr	r0, [r7, #0]
  4130f6:	2120      	movs	r1, #32
  4130f8:	4428      	add	r0, r5
  4130fa:	4e0e      	ldr	r6, [pc, #56]	; (413134 <lv_img_cache_set_size+0x98>)
  4130fc:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
  4130fe:	6838      	ldr	r0, [r7, #0]
  413100:	2124      	movs	r1, #36	; 0x24
  413102:	4428      	add	r0, r5
  413104:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
  413106:	3401      	adds	r4, #1
  413108:	b2a4      	uxth	r4, r4
  41310a:	4b07      	ldr	r3, [pc, #28]	; (413128 <lv_img_cache_set_size+0x8c>)
  41310c:	881b      	ldrh	r3, [r3, #0]
  41310e:	429c      	cmp	r4, r3
  413110:	d3ec      	bcc.n	4130ec <lv_img_cache_set_size+0x50>
  413112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  413114:	2043a32c 	.word	0x2043a32c
  413118:	00413041 	.word	0x00413041
  41311c:	00416681 	.word	0x00416681
  413120:	004165bd 	.word	0x004165bd
  413124:	00415e79 	.word	0x00415e79
  413128:	2040c7aa 	.word	0x2040c7aa
  41312c:	0042c154 	.word	0x0042c154
  413130:	00415e85 	.word	0x00415e85
  413134:	00416af1 	.word	0x00416af1

00413138 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
  413138:	b530      	push	{r4, r5, lr}
  41313a:	b085      	sub	sp, #20
  41313c:	460c      	mov	r4, r1
  41313e:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
  413140:	4608      	mov	r0, r1
  413142:	4b2b      	ldr	r3, [pc, #172]	; (4131f0 <lv_img_decoder_built_in_info+0xb8>)
  413144:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  413146:	b9d8      	cbnz	r0, 413180 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
  413148:	7823      	ldrb	r3, [r4, #0]
  41314a:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  41314e:	3b04      	subs	r3, #4
  413150:	b2db      	uxtb	r3, r3
  413152:	2b0a      	cmp	r3, #10
  413154:	d849      	bhi.n	4131ea <lv_img_decoder_built_in_info+0xb2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
  413156:	6823      	ldr	r3, [r4, #0]
  413158:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41315c:	682a      	ldr	r2, [r5, #0]
  41315e:	f363 2294 	bfi	r2, r3, #10, #11
  413162:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
  413164:	8863      	ldrh	r3, [r4, #2]
  413166:	f3c3 134a 	ubfx	r3, r3, #5, #11
  41316a:	886a      	ldrh	r2, [r5, #2]
  41316c:	f363 124f 	bfi	r2, r3, #5, #11
  413170:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
  413172:	7822      	ldrb	r2, [r4, #0]
  413174:	782b      	ldrb	r3, [r5, #0]
  413176:	f362 0304 	bfi	r3, r2, #0, #5
  41317a:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
  41317c:	2001      	movs	r0, #1
  41317e:	e004      	b.n	41318a <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
  413180:	2801      	cmp	r0, #1
  413182:	d004      	beq.n	41318e <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  413184:	2802      	cmp	r0, #2
  413186:	d022      	beq.n	4131ce <lv_img_decoder_built_in_info+0x96>
        return LV_RES_INV;
  413188:	2000      	movs	r0, #0
}
  41318a:	b005      	add	sp, #20
  41318c:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
  41318e:	2202      	movs	r2, #2
  413190:	4621      	mov	r1, r4
  413192:	a802      	add	r0, sp, #8
  413194:	4b17      	ldr	r3, [pc, #92]	; (4131f4 <lv_img_decoder_built_in_info+0xbc>)
  413196:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
  413198:	b148      	cbz	r0, 4131ae <lv_img_decoder_built_in_info+0x76>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  41319a:	782b      	ldrb	r3, [r5, #0]
  41319c:	f003 031f 	and.w	r3, r3, #31
  4131a0:	331c      	adds	r3, #28
  4131a2:	f003 031f 	and.w	r3, r3, #31
  4131a6:	2b0a      	cmp	r3, #10
  4131a8:	d80f      	bhi.n	4131ca <lv_img_decoder_built_in_info+0x92>
    return LV_RES_OK;
  4131aa:	2001      	movs	r0, #1
  4131ac:	e7ed      	b.n	41318a <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
  4131ae:	ab01      	add	r3, sp, #4
  4131b0:	2204      	movs	r2, #4
  4131b2:	4629      	mov	r1, r5
  4131b4:	a802      	add	r0, sp, #8
  4131b6:	4c10      	ldr	r4, [pc, #64]	; (4131f8 <lv_img_decoder_built_in_info+0xc0>)
  4131b8:	47a0      	blx	r4
  4131ba:	4604      	mov	r4, r0
            lv_fs_close(&file);
  4131bc:	a802      	add	r0, sp, #8
  4131be:	4b0f      	ldr	r3, [pc, #60]	; (4131fc <lv_img_decoder_built_in_info+0xc4>)
  4131c0:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
  4131c2:	b914      	cbnz	r4, 4131ca <lv_img_decoder_built_in_info+0x92>
  4131c4:	9b01      	ldr	r3, [sp, #4]
  4131c6:	2b04      	cmp	r3, #4
  4131c8:	d0e7      	beq.n	41319a <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
  4131ca:	2000      	movs	r0, #0
  4131cc:	e7dd      	b.n	41318a <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
  4131ce:	682b      	ldr	r3, [r5, #0]
  4131d0:	2001      	movs	r0, #1
  4131d2:	f360 2394 	bfi	r3, r0, #10, #11
  4131d6:	602b      	str	r3, [r5, #0]
        header->h = 1;
  4131d8:	0c1a      	lsrs	r2, r3, #16
  4131da:	f360 124f 	bfi	r2, r0, #5, #11
  4131de:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
  4131e0:	220b      	movs	r2, #11
  4131e2:	f362 0304 	bfi	r3, r2, #0, #5
  4131e6:	702b      	strb	r3, [r5, #0]
  4131e8:	e7cf      	b.n	41318a <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  4131ea:	2000      	movs	r0, #0
  4131ec:	e7cd      	b.n	41318a <lv_img_decoder_built_in_info+0x52>
  4131ee:	bf00      	nop
  4131f0:	0040d62d 	.word	0x0040d62d
  4131f4:	00415fd1 	.word	0x00415fd1
  4131f8:	00415f4d 	.word	0x00415f4d
  4131fc:	00415f1d 	.word	0x00415f1d

00413200 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
  413200:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  413202:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
  413204:	b1a4      	cbz	r4, 413230 <lv_img_decoder_built_in_close+0x30>
  413206:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
  413208:	6820      	ldr	r0, [r4, #0]
  41320a:	b120      	cbz	r0, 413216 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
  41320c:	4b09      	ldr	r3, [pc, #36]	; (413234 <lv_img_decoder_built_in_close+0x34>)
  41320e:	4798      	blx	r3
            lv_mem_free(user_data->f);
  413210:	6820      	ldr	r0, [r4, #0]
  413212:	4b09      	ldr	r3, [pc, #36]	; (413238 <lv_img_decoder_built_in_close+0x38>)
  413214:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
  413216:	6860      	ldr	r0, [r4, #4]
  413218:	b108      	cbz	r0, 41321e <lv_img_decoder_built_in_close+0x1e>
  41321a:	4b07      	ldr	r3, [pc, #28]	; (413238 <lv_img_decoder_built_in_close+0x38>)
  41321c:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
  41321e:	68a0      	ldr	r0, [r4, #8]
  413220:	b108      	cbz	r0, 413226 <lv_img_decoder_built_in_close+0x26>
  413222:	4b05      	ldr	r3, [pc, #20]	; (413238 <lv_img_decoder_built_in_close+0x38>)
  413224:	4798      	blx	r3

        lv_mem_free(user_data);
  413226:	4620      	mov	r0, r4
  413228:	4b03      	ldr	r3, [pc, #12]	; (413238 <lv_img_decoder_built_in_close+0x38>)
  41322a:	4798      	blx	r3

        dsc->user_data = NULL;
  41322c:	2300      	movs	r3, #0
  41322e:	61eb      	str	r3, [r5, #28]
  413230:	bd38      	pop	{r3, r4, r5, pc}
  413232:	bf00      	nop
  413234:	00415f1d 	.word	0x00415f1d
  413238:	00416681 	.word	0x00416681

0041323c <lv_img_decoder_built_in_open>:
{
  41323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  413240:	b082      	sub	sp, #8
  413242:	4607      	mov	r7, r0
  413244:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  413246:	7a8b      	ldrb	r3, [r1, #10]
  413248:	2b01      	cmp	r3, #1
  41324a:	d016      	beq.n	41327a <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  41324c:	b923      	cbnz	r3, 413258 <lv_img_decoder_built_in_open+0x1c>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
  41324e:	684b      	ldr	r3, [r1, #4]
  413250:	689b      	ldr	r3, [r3, #8]
  413252:	2b00      	cmp	r3, #0
  413254:	f000 810b 	beq.w	41346e <lv_img_decoder_built_in_open+0x232>
    lv_img_cf_t cf = dsc->header.cf;
  413258:	7b20      	ldrb	r0, [r4, #12]
  41325a:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  41325e:	1f03      	subs	r3, r0, #4
  413260:	b2db      	uxtb	r3, r3
  413262:	2b02      	cmp	r3, #2
  413264:	d851      	bhi.n	41330a <lv_img_decoder_built_in_open+0xce>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  413266:	7aa3      	ldrb	r3, [r4, #10]
  413268:	2b00      	cmp	r3, #0
  41326a:	d14a      	bne.n	413302 <lv_img_decoder_built_in_open+0xc6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
  41326c:	6863      	ldr	r3, [r4, #4]
  41326e:	689b      	ldr	r3, [r3, #8]
  413270:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  413272:	2001      	movs	r0, #1
}
  413274:	b002      	add	sp, #8
  413276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  41327a:	6848      	ldr	r0, [r1, #4]
  41327c:	4b7d      	ldr	r3, [pc, #500]	; (413474 <lv_img_decoder_built_in_open+0x238>)
  41327e:	4798      	blx	r3
  413280:	497d      	ldr	r1, [pc, #500]	; (413478 <lv_img_decoder_built_in_open+0x23c>)
  413282:	4b7e      	ldr	r3, [pc, #504]	; (41347c <lv_img_decoder_built_in_open+0x240>)
  413284:	4798      	blx	r3
  413286:	b9a8      	cbnz	r0, 4132b4 <lv_img_decoder_built_in_open+0x78>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
  413288:	2202      	movs	r2, #2
  41328a:	6861      	ldr	r1, [r4, #4]
  41328c:	4668      	mov	r0, sp
  41328e:	4b7c      	ldr	r3, [pc, #496]	; (413480 <lv_img_decoder_built_in_open+0x244>)
  413290:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
  413292:	b978      	cbnz	r0, 4132b4 <lv_img_decoder_built_in_open+0x78>
        if(dsc->user_data == NULL) {
  413294:	69e3      	ldr	r3, [r4, #28]
  413296:	b17b      	cbz	r3, 4132b8 <lv_img_decoder_built_in_open+0x7c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  413298:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
  41329a:	2008      	movs	r0, #8
  41329c:	4b79      	ldr	r3, [pc, #484]	; (413484 <lv_img_decoder_built_in_open+0x248>)
  41329e:	4798      	blx	r3
  4132a0:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
  4132a2:	4b79      	ldr	r3, [pc, #484]	; (413488 <lv_img_decoder_built_in_open+0x24c>)
  4132a4:	4798      	blx	r3
  4132a6:	b1d8      	cbz	r0, 4132e0 <lv_img_decoder_built_in_open+0xa4>
        if(user_data->f == NULL) {
  4132a8:	682b      	ldr	r3, [r5, #0]
  4132aa:	bb3b      	cbnz	r3, 4132fc <lv_img_decoder_built_in_open+0xc0>
            lv_img_decoder_built_in_close(decoder, dsc);
  4132ac:	4621      	mov	r1, r4
  4132ae:	4638      	mov	r0, r7
  4132b0:	4b76      	ldr	r3, [pc, #472]	; (41348c <lv_img_decoder_built_in_open+0x250>)
  4132b2:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  4132b4:	2000      	movs	r0, #0
  4132b6:	e7dd      	b.n	413274 <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  4132b8:	200c      	movs	r0, #12
  4132ba:	4b72      	ldr	r3, [pc, #456]	; (413484 <lv_img_decoder_built_in_open+0x248>)
  4132bc:	4798      	blx	r3
  4132be:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  4132c0:	4b71      	ldr	r3, [pc, #452]	; (413488 <lv_img_decoder_built_in_open+0x24c>)
  4132c2:	4798      	blx	r3
  4132c4:	b928      	cbnz	r0, 4132d2 <lv_img_decoder_built_in_open+0x96>
  4132c6:	69e2      	ldr	r2, [r4, #28]
  4132c8:	2300      	movs	r3, #0
  4132ca:	4871      	ldr	r0, [pc, #452]	; (413490 <lv_img_decoder_built_in_open+0x254>)
  4132cc:	4971      	ldr	r1, [pc, #452]	; (413494 <lv_img_decoder_built_in_open+0x258>)
  4132ce:	4788      	blx	r1
  4132d0:	e7fe      	b.n	4132d0 <lv_img_decoder_built_in_open+0x94>
            if(dsc->user_data == NULL) {
  4132d2:	69e0      	ldr	r0, [r4, #28]
  4132d4:	2800      	cmp	r0, #0
  4132d6:	d0ed      	beq.n	4132b4 <lv_img_decoder_built_in_open+0x78>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  4132d8:	210c      	movs	r1, #12
  4132da:	4b6f      	ldr	r3, [pc, #444]	; (413498 <lv_img_decoder_built_in_open+0x25c>)
  4132dc:	4798      	blx	r3
  4132de:	e7db      	b.n	413298 <lv_img_decoder_built_in_open+0x5c>
        LV_ASSERT_MEM(user_data->f);
  4132e0:	682a      	ldr	r2, [r5, #0]
  4132e2:	2300      	movs	r3, #0
  4132e4:	486a      	ldr	r0, [pc, #424]	; (413490 <lv_img_decoder_built_in_open+0x254>)
  4132e6:	496b      	ldr	r1, [pc, #428]	; (413494 <lv_img_decoder_built_in_open+0x258>)
  4132e8:	4788      	blx	r1
  4132ea:	e7fe      	b.n	4132ea <lv_img_decoder_built_in_open+0xae>
        *d8 = *s8;
  4132ec:	f811 0b01 	ldrb.w	r0, [r1], #1
  4132f0:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  4132f4:	3a01      	subs	r2, #1
    while(len) {
  4132f6:	2a00      	cmp	r2, #0
  4132f8:	d1f8      	bne.n	4132ec <lv_img_decoder_built_in_open+0xb0>
  4132fa:	e7ad      	b.n	413258 <lv_img_decoder_built_in_open+0x1c>
  4132fc:	4669      	mov	r1, sp
  4132fe:	2208      	movs	r2, #8
  413300:	e7f9      	b.n	4132f6 <lv_img_decoder_built_in_open+0xba>
            dsc->img_data = NULL;
  413302:	2300      	movs	r3, #0
  413304:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  413306:	2001      	movs	r0, #1
  413308:	e7b4      	b.n	413274 <lv_img_decoder_built_in_open+0x38>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
  41330a:	1fc3      	subs	r3, r0, #7
  41330c:	b2db      	uxtb	r3, r3
  41330e:	2b03      	cmp	r3, #3
  413310:	d909      	bls.n	413326 <lv_img_decoder_built_in_open+0xea>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
  413312:	f1a0 030b 	sub.w	r3, r0, #11
  413316:	b2db      	uxtb	r3, r3
  413318:	2b03      	cmp	r3, #3
  41331a:	f200 80a2 	bhi.w	413462 <lv_img_decoder_built_in_open+0x226>
        dsc->img_data = NULL;
  41331e:	2300      	movs	r3, #0
  413320:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
  413322:	2001      	movs	r0, #1
  413324:	e7a6      	b.n	413274 <lv_img_decoder_built_in_open+0x38>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
  413326:	4b5d      	ldr	r3, [pc, #372]	; (41349c <lv_img_decoder_built_in_open+0x260>)
  413328:	4798      	blx	r3
  41332a:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
  41332c:	2601      	movs	r6, #1
  41332e:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
  413330:	69e3      	ldr	r3, [r4, #28]
  413332:	b17b      	cbz	r3, 413354 <lv_img_decoder_built_in_open+0x118>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  413334:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
  413336:	2002      	movs	r0, #2
  413338:	fa00 f00a 	lsl.w	r0, r0, sl
  41333c:	4b51      	ldr	r3, [pc, #324]	; (413484 <lv_img_decoder_built_in_open+0x248>)
  41333e:	4798      	blx	r3
  413340:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
  413342:	4b51      	ldr	r3, [pc, #324]	; (413488 <lv_img_decoder_built_in_open+0x24c>)
  413344:	4798      	blx	r3
  413346:	b9f0      	cbnz	r0, 413386 <lv_img_decoder_built_in_open+0x14a>
  413348:	686a      	ldr	r2, [r5, #4]
  41334a:	2300      	movs	r3, #0
  41334c:	4850      	ldr	r0, [pc, #320]	; (413490 <lv_img_decoder_built_in_open+0x254>)
  41334e:	4951      	ldr	r1, [pc, #324]	; (413494 <lv_img_decoder_built_in_open+0x258>)
  413350:	4788      	blx	r1
  413352:	e7fe      	b.n	413352 <lv_img_decoder_built_in_open+0x116>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  413354:	200c      	movs	r0, #12
  413356:	4b4b      	ldr	r3, [pc, #300]	; (413484 <lv_img_decoder_built_in_open+0x248>)
  413358:	4798      	blx	r3
  41335a:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  41335c:	4b4a      	ldr	r3, [pc, #296]	; (413488 <lv_img_decoder_built_in_open+0x24c>)
  41335e:	4798      	blx	r3
  413360:	b928      	cbnz	r0, 41336e <lv_img_decoder_built_in_open+0x132>
  413362:	69e2      	ldr	r2, [r4, #28]
  413364:	2300      	movs	r3, #0
  413366:	484a      	ldr	r0, [pc, #296]	; (413490 <lv_img_decoder_built_in_open+0x254>)
  413368:	494a      	ldr	r1, [pc, #296]	; (413494 <lv_img_decoder_built_in_open+0x258>)
  41336a:	4788      	blx	r1
  41336c:	e7fe      	b.n	41336c <lv_img_decoder_built_in_open+0x130>
            if(dsc->user_data == NULL) {
  41336e:	69e0      	ldr	r0, [r4, #28]
  413370:	b928      	cbnz	r0, 41337e <lv_img_decoder_built_in_open+0x142>
                lv_img_decoder_built_in_close(decoder, dsc);
  413372:	4621      	mov	r1, r4
  413374:	4638      	mov	r0, r7
  413376:	4b45      	ldr	r3, [pc, #276]	; (41348c <lv_img_decoder_built_in_open+0x250>)
  413378:	4798      	blx	r3
                return LV_RES_INV;
  41337a:	2000      	movs	r0, #0
  41337c:	e77a      	b.n	413274 <lv_img_decoder_built_in_open+0x38>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  41337e:	210c      	movs	r1, #12
  413380:	4b45      	ldr	r3, [pc, #276]	; (413498 <lv_img_decoder_built_in_open+0x25c>)
  413382:	4798      	blx	r3
  413384:	e7d6      	b.n	413334 <lv_img_decoder_built_in_open+0xf8>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
  413386:	4630      	mov	r0, r6
  413388:	4b3e      	ldr	r3, [pc, #248]	; (413484 <lv_img_decoder_built_in_open+0x248>)
  41338a:	4798      	blx	r3
  41338c:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
  41338e:	4b3e      	ldr	r3, [pc, #248]	; (413488 <lv_img_decoder_built_in_open+0x24c>)
  413390:	4798      	blx	r3
  413392:	b158      	cbz	r0, 4133ac <lv_img_decoder_built_in_open+0x170>
        if(user_data->palette == NULL || user_data->opa == NULL) {
  413394:	686b      	ldr	r3, [r5, #4]
  413396:	b17b      	cbz	r3, 4133b8 <lv_img_decoder_built_in_open+0x17c>
  413398:	68ab      	ldr	r3, [r5, #8]
  41339a:	b16b      	cbz	r3, 4133b8 <lv_img_decoder_built_in_open+0x17c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  41339c:	7aa3      	ldrb	r3, [r4, #10]
  41339e:	2b01      	cmp	r3, #1
  4133a0:	d010      	beq.n	4133c4 <lv_img_decoder_built_in_open+0x188>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
  4133a2:	6863      	ldr	r3, [r4, #4]
  4133a4:	f8d3 c008 	ldr.w	ip, [r3, #8]
            for(i = 0; i < palette_size; i++) {
  4133a8:	2300      	movs	r3, #0
  4133aa:	e054      	b.n	413456 <lv_img_decoder_built_in_open+0x21a>
        LV_ASSERT_MEM(user_data->opa);
  4133ac:	68aa      	ldr	r2, [r5, #8]
  4133ae:	2300      	movs	r3, #0
  4133b0:	4837      	ldr	r0, [pc, #220]	; (413490 <lv_img_decoder_built_in_open+0x254>)
  4133b2:	4938      	ldr	r1, [pc, #224]	; (413494 <lv_img_decoder_built_in_open+0x258>)
  4133b4:	4788      	blx	r1
  4133b6:	e7fe      	b.n	4133b6 <lv_img_decoder_built_in_open+0x17a>
            lv_img_decoder_built_in_close(decoder, dsc);
  4133b8:	4621      	mov	r1, r4
  4133ba:	4638      	mov	r0, r7
  4133bc:	4b33      	ldr	r3, [pc, #204]	; (41348c <lv_img_decoder_built_in_open+0x250>)
  4133be:	4798      	blx	r3
            return LV_RES_INV;
  4133c0:	2000      	movs	r0, #0
  4133c2:	e757      	b.n	413274 <lv_img_decoder_built_in_open+0x38>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
  4133c4:	2104      	movs	r1, #4
  4133c6:	6828      	ldr	r0, [r5, #0]
  4133c8:	4b35      	ldr	r3, [pc, #212]	; (4134a0 <lv_img_decoder_built_in_open+0x264>)
  4133ca:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
  4133cc:	2700      	movs	r7, #0
  4133ce:	e022      	b.n	413416 <lv_img_decoder_built_in_open+0x1da>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
  4133d0:	2300      	movs	r3, #0
  4133d2:	2204      	movs	r2, #4
  4133d4:	4669      	mov	r1, sp
  4133d6:	6828      	ldr	r0, [r5, #0]
  4133d8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4134a4 <lv_img_decoder_built_in_open+0x268>
  4133dc:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
  4133de:	6869      	ldr	r1, [r5, #4]
  4133e0:	f89d 0002 	ldrb.w	r0, [sp, #2]
  4133e4:	f89d 3001 	ldrb.w	r3, [sp, #1]
  4133e8:	f89d 2000 	ldrb.w	r2, [sp]
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  4133ec:	ea4f 1e53 	mov.w	lr, r3, lsr #5
  4133f0:	08c0      	lsrs	r0, r0, #3
  4133f2:	08d2      	lsrs	r2, r2, #3
  4133f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
  4133f8:	f36e 0902 	bfi	r9, lr, #0, #3
  4133fc:	f360 09c7 	bfi	r9, r0, #3, #5
  413400:	f362 290c 	bfi	r9, r2, #8, #5
  413404:	f363 394f 	bfi	r9, r3, #13, #3
  413408:	f821 9017 	strh.w	r9, [r1, r7, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
  41340c:	68ab      	ldr	r3, [r5, #8]
  41340e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  413412:	55da      	strb	r2, [r3, r7]
            for(i = 0; i < palette_size; i++) {
  413414:	3701      	adds	r7, #1
  413416:	42b7      	cmp	r7, r6
  413418:	d3da      	bcc.n	4133d0 <lv_img_decoder_built_in_open+0x194>
  41341a:	e01e      	b.n	41345a <lv_img_decoder_built_in_open+0x21e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
  41341c:	6869      	ldr	r1, [r5, #4]
  41341e:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
  413422:	f890 e002 	ldrb.w	lr, [r0, #2]
  413426:	7842      	ldrb	r2, [r0, #1]
  413428:	f81c 7023 	ldrb.w	r7, [ip, r3, lsl #2]
  41342c:	ea4f 1952 	mov.w	r9, r2, lsr #5
  413430:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  413434:	08ff      	lsrs	r7, r7, #3
  413436:	f3c2 0282 	ubfx	r2, r2, #2, #3
  41343a:	f369 0802 	bfi	r8, r9, #0, #3
  41343e:	f36e 08c7 	bfi	r8, lr, #3, #5
  413442:	f367 280c 	bfi	r8, r7, #8, #5
  413446:	f362 384f 	bfi	r8, r2, #13, #3
  41344a:	f821 8013 	strh.w	r8, [r1, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
  41344e:	68aa      	ldr	r2, [r5, #8]
  413450:	78c1      	ldrb	r1, [r0, #3]
  413452:	54d1      	strb	r1, [r2, r3]
            for(i = 0; i < palette_size; i++) {
  413454:	3301      	adds	r3, #1
  413456:	42b3      	cmp	r3, r6
  413458:	d3e0      	bcc.n	41341c <lv_img_decoder_built_in_open+0x1e0>
        dsc->img_data = NULL;
  41345a:	2300      	movs	r3, #0
  41345c:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
  41345e:	2001      	movs	r0, #1
  413460:	e708      	b.n	413274 <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
  413462:	4621      	mov	r1, r4
  413464:	4638      	mov	r0, r7
  413466:	4b09      	ldr	r3, [pc, #36]	; (41348c <lv_img_decoder_built_in_open+0x250>)
  413468:	4798      	blx	r3
        return LV_RES_INV;
  41346a:	2000      	movs	r0, #0
  41346c:	e702      	b.n	413274 <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
  41346e:	2000      	movs	r0, #0
  413470:	e700      	b.n	413274 <lv_img_decoder_built_in_open+0x38>
  413472:	bf00      	nop
  413474:	00416091 	.word	0x00416091
  413478:	0042c2f4 	.word	0x0042c2f4
  41347c:	00427c49 	.word	0x00427c49
  413480:	00415fd1 	.word	0x00415fd1
  413484:	004165bd 	.word	0x004165bd
  413488:	00415e79 	.word	0x00415e79
  41348c:	00413201 	.word	0x00413201
  413490:	0042c154 	.word	0x0042c154
  413494:	00415e85 	.word	0x00415e85
  413498:	00416af1 	.word	0x00416af1
  41349c:	0040d369 	.word	0x0040d369
  4134a0:	00415f89 	.word	0x00415f89
  4134a4:	00415f4d 	.word	0x00415f4d

004134a8 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
  4134a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4134ac:	b083      	sub	sp, #12
  4134ae:	4680      	mov	r8, r0
  4134b0:	4689      	mov	r9, r1
  4134b2:	4614      	mov	r4, r2
  4134b4:	461f      	mov	r7, r3
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4134b6:	69c6      	ldr	r6, [r0, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  4134b8:	7b00      	ldrb	r0, [r0, #12]
  4134ba:	f000 001f 	and.w	r0, r0, #31
  4134be:	4b15      	ldr	r3, [pc, #84]	; (413514 <lv_img_decoder_built_in_line_true_color+0x6c>)
  4134c0:	4798      	blx	r3
  4134c2:	4605      	mov	r5, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
  4134c4:	f8d8 100c 	ldr.w	r1, [r8, #12]
  4134c8:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4134cc:	fb01 9104 	mla	r1, r1, r4, r9
  4134d0:	fb01 f100 	mul.w	r1, r1, r0
  4134d4:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
  4134d6:	3104      	adds	r1, #4
  4134d8:	6830      	ldr	r0, [r6, #0]
  4134da:	4b0f      	ldr	r3, [pc, #60]	; (413518 <lv_img_decoder_built_in_line_true_color+0x70>)
  4134dc:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
  4134de:	b118      	cbz	r0, 4134e8 <lv_img_decoder_built_in_line_true_color+0x40>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
  4134e0:	2000      	movs	r0, #0
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
  4134e2:	b003      	add	sp, #12
  4134e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t btr = len * (px_size >> 3);
  4134e8:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  4134ec:	fb05 f507 	mul.w	r5, r5, r7
    uint32_t br  = 0;
  4134f0:	ab02      	add	r3, sp, #8
  4134f2:	2200      	movs	r2, #0
  4134f4:	f843 2d04 	str.w	r2, [r3, #-4]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
  4134f8:	462a      	mov	r2, r5
  4134fa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4134fc:	6830      	ldr	r0, [r6, #0]
  4134fe:	4c07      	ldr	r4, [pc, #28]	; (41351c <lv_img_decoder_built_in_line_true_color+0x74>)
  413500:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
  413502:	b920      	cbnz	r0, 41350e <lv_img_decoder_built_in_line_true_color+0x66>
  413504:	9b01      	ldr	r3, [sp, #4]
  413506:	429d      	cmp	r5, r3
  413508:	d1eb      	bne.n	4134e2 <lv_img_decoder_built_in_line_true_color+0x3a>
    return LV_RES_OK;
  41350a:	2001      	movs	r0, #1
  41350c:	e7e9      	b.n	4134e2 <lv_img_decoder_built_in_line_true_color+0x3a>
        return LV_RES_INV;
  41350e:	2000      	movs	r0, #0
  413510:	e7e7      	b.n	4134e2 <lv_img_decoder_built_in_line_true_color+0x3a>
  413512:	bf00      	nop
  413514:	0040d369 	.word	0x0040d369
  413518:	00415f89 	.word	0x00415f89
  41351c:	00415f4d 	.word	0x00415f4d

00413520 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
  413520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413524:	b08b      	sub	sp, #44	; 0x2c
  413526:	4680      	mov	r8, r0
  413528:	460c      	mov	r4, r1
  41352a:	4693      	mov	fp, r2
  41352c:	461e      	mov	r6, r3
  41352e:	9d14      	ldr	r5, [sp, #80]	; 0x50

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
  413530:	2700      	movs	r7, #0
  413532:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
  413536:	23ff      	movs	r3, #255	; 0xff
  413538:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  41353c:	4b6a      	ldr	r3, [pc, #424]	; (4136e8 <lv_img_decoder_built_in_line_alpha+0x1c8>)
  41353e:	f853 2b04 	ldr.w	r2, [r3], #4
  413542:	9208      	str	r2, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
  413544:	f10d 0e10 	add.w	lr, sp, #16
  413548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  41354a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
  41354e:	f8b8 0008 	ldrh.w	r0, [r8, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
  413552:	463b      	mov	r3, r7
  413554:	e008      	b.n	413568 <lv_img_decoder_built_in_line_alpha+0x48>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
  413556:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  41355a:	b281      	uxth	r1, r0
  41355c:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  41355e:	3201      	adds	r2, #1
  413560:	0a09      	lsrs	r1, r1, #8
  413562:	54a9      	strb	r1, [r5, r2]
    for(i = 0; i < len; i++) {
  413564:	3301      	adds	r3, #1
  413566:	b21b      	sxth	r3, r3
  413568:	42b3      	cmp	r3, r6
  41356a:	dbf4      	blt.n	413556 <lv_img_decoder_built_in_line_alpha+0x36>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
  41356c:	f898 000c 	ldrb.w	r0, [r8, #12]
  413570:	f000 001f 	and.w	r0, r0, #31
  413574:	4b5d      	ldr	r3, [pc, #372]	; (4136ec <lv_img_decoder_built_in_line_alpha+0x1cc>)
  413576:	4798      	blx	r3
  413578:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  41357a:	2701      	movs	r7, #1
  41357c:	4087      	lsls	r7, r0
  41357e:	b2bf      	uxth	r7, r7
  413580:	3f01      	subs	r7, #1
  413582:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
  413584:	f898 300c 	ldrb.w	r3, [r8, #12]
  413588:	f003 031f 	and.w	r3, r3, #31
  41358c:	3b0b      	subs	r3, #11
  41358e:	2b03      	cmp	r3, #3
  413590:	d864      	bhi.n	41365c <lv_img_decoder_built_in_line_alpha+0x13c>
  413592:	e8df f003 	tbb	[pc, r3]
  413596:	2802      	.short	0x2802
  413598:	5740      	.short	0x5740
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  41359a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  41359e:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4135a2:	10da      	asrs	r2, r3, #3
  4135a4:	b211      	sxth	r1, r2
  4135a6:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x7) w++;
  4135a8:	f013 0f07 	tst.w	r3, #7
  4135ac:	d001      	beq.n	4135b2 <lv_img_decoder_built_in_line_alpha+0x92>
  4135ae:	1c53      	adds	r3, r2, #1
  4135b0:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 3); /*First pixel*/
  4135b2:	10e3      	asrs	r3, r4, #3
  4135b4:	9a01      	ldr	r2, [sp, #4]
  4135b6:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 7 - (x & 0x7);
  4135ba:	43e4      	mvns	r4, r4
  4135bc:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
  4135c0:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4135c4:	f8d8 301c 	ldr.w	r3, [r8, #28]
  4135c8:	9303      	str	r3, [sp, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  4135ca:	9801      	ldr	r0, [sp, #4]
  4135cc:	4b48      	ldr	r3, [pc, #288]	; (4136f0 <lv_img_decoder_built_in_line_alpha+0x1d0>)
  4135ce:	4798      	blx	r3
  4135d0:	9002      	str	r0, [sp, #8]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  4135d2:	f898 300a 	ldrb.w	r3, [r8, #10]
  4135d6:	2b00      	cmp	r3, #0
  4135d8:	d149      	bne.n	41366e <lv_img_decoder_built_in_line_alpha+0x14e>
        const lv_img_dsc_t * img_dsc = dsc->src;
  4135da:	f8d8 3004 	ldr.w	r3, [r8, #4]

        data_tmp = img_dsc->data + ofs;
  4135de:	689b      	ldr	r3, [r3, #8]
  4135e0:	449b      	add	fp, r3
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  4135e2:	2100      	movs	r1, #0
  4135e4:	e05d      	b.n	4136a2 <lv_img_decoder_built_in_line_alpha+0x182>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  4135e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4135ea:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4135ee:	109a      	asrs	r2, r3, #2
  4135f0:	b211      	sxth	r1, r2
  4135f2:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x3) w++;
  4135f4:	f013 0f03 	tst.w	r3, #3
  4135f8:	d001      	beq.n	4135fe <lv_img_decoder_built_in_line_alpha+0xde>
  4135fa:	1c53      	adds	r3, r2, #1
  4135fc:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 2); /*First pixel*/
  4135fe:	10a3      	asrs	r3, r4, #2
  413600:	9a01      	ldr	r2, [sp, #4]
  413602:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 6 - ((x & 0x3) * 2);
  413606:	b2a4      	uxth	r4, r4
  413608:	43e4      	mvns	r4, r4
  41360a:	f004 0403 	and.w	r4, r4, #3
  41360e:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
  413610:	f10d 0a20 	add.w	sl, sp, #32
            break;
  413614:	e7d6      	b.n	4135c4 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  413616:	f8d8 300c 	ldr.w	r3, [r8, #12]
  41361a:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41361e:	105a      	asrs	r2, r3, #1
  413620:	b211      	sxth	r1, r2
  413622:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x1) w++;
  413624:	f013 0f01 	tst.w	r3, #1
  413628:	d001      	beq.n	41362e <lv_img_decoder_built_in_line_alpha+0x10e>
  41362a:	1c53      	adds	r3, r2, #1
  41362c:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 1); /*First pixel*/
  41362e:	1063      	asrs	r3, r4, #1
  413630:	9a01      	ldr	r2, [sp, #4]
  413632:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 4 - ((x & 0x1) * 4);
  413636:	f014 0f01 	tst.w	r4, #1
  41363a:	d114      	bne.n	413666 <lv_img_decoder_built_in_line_alpha+0x146>
  41363c:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
  41363e:	f10d 0a10 	add.w	sl, sp, #16
  413642:	e7bf      	b.n	4135c4 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  413644:	f8d8 300c 	ldr.w	r3, [r8, #12]
  413648:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41364c:	b29a      	uxth	r2, r3
  41364e:	b21b      	sxth	r3, r3
  413650:	9301      	str	r3, [sp, #4]
            ofs += w * y + x;  /*First pixel*/
  413652:	fb0b 4b02 	mla	fp, fp, r2, r4
            pos = 0;
  413656:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
  413658:	46a2      	mov	sl, r4
            break;
  41365a:	e7b3      	b.n	4135c4 <lv_img_decoder_built_in_line_alpha+0xa4>
    int8_t pos   = 0;
  41365c:	2400      	movs	r4, #0
    uint32_t ofs = 0;
  41365e:	46a3      	mov	fp, r4
    lv_coord_t w = 0;
  413660:	9401      	str	r4, [sp, #4]
    const lv_opa_t * opa_table = NULL;
  413662:	46a2      	mov	sl, r4
  413664:	e7ae      	b.n	4135c4 <lv_img_decoder_built_in_line_alpha+0xa4>
            pos       = 4 - ((x & 0x1) * 4);
  413666:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
  413668:	f10d 0a10 	add.w	sl, sp, #16
  41366c:	e7aa      	b.n	4135c4 <lv_img_decoder_built_in_line_alpha+0xa4>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  41366e:	f10b 0104 	add.w	r1, fp, #4
  413672:	9b03      	ldr	r3, [sp, #12]
  413674:	6818      	ldr	r0, [r3, #0]
  413676:	4b1f      	ldr	r3, [pc, #124]	; (4136f4 <lv_img_decoder_built_in_line_alpha+0x1d4>)
  413678:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  41367a:	2300      	movs	r3, #0
  41367c:	9a01      	ldr	r2, [sp, #4]
  41367e:	9902      	ldr	r1, [sp, #8]
  413680:	9803      	ldr	r0, [sp, #12]
  413682:	6800      	ldr	r0, [r0, #0]
  413684:	f8df b074 	ldr.w	fp, [pc, #116]	; 4136fc <lv_img_decoder_built_in_line_alpha+0x1dc>
  413688:	47d8      	blx	fp
        data_tmp = fs_buf;
  41368a:	f8dd b008 	ldr.w	fp, [sp, #8]
  41368e:	e7a8      	b.n	4135e2 <lv_img_decoder_built_in_line_alpha+0xc2>
    }

    for(i = 0; i < len; i++) {
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  413690:	f805 e000 	strb.w	lr, [r5, r0]
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
  413694:	eba4 0409 	sub.w	r4, r4, r9
  413698:	b264      	sxtb	r4, r4
        if(pos < 0) {
  41369a:	2c00      	cmp	r4, #0
  41369c:	db17      	blt.n	4136ce <lv_img_decoder_built_in_line_alpha+0x1ae>
    for(i = 0; i < len; i++) {
  41369e:	3101      	adds	r1, #1
  4136a0:	b209      	sxth	r1, r1
  4136a2:	42b1      	cmp	r1, r6
  4136a4:	da19      	bge.n	4136da <lv_img_decoder_built_in_line_alpha+0x1ba>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  4136a6:	f89b 3000 	ldrb.w	r3, [fp]
  4136aa:	fa07 f204 	lsl.w	r2, r7, r4
  4136ae:	4013      	ands	r3, r2
  4136b0:	4123      	asrs	r3, r4
  4136b2:	fa5f fe83 	uxtb.w	lr, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  4136b6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
  4136ba:	3002      	adds	r0, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
  4136bc:	f898 200c 	ldrb.w	r2, [r8, #12]
  4136c0:	f002 021f 	and.w	r2, r2, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  4136c4:	2a0e      	cmp	r2, #14
  4136c6:	d0e3      	beq.n	413690 <lv_img_decoder_built_in_line_alpha+0x170>
  4136c8:	f81a e00e 	ldrb.w	lr, [sl, lr]
  4136cc:	e7e0      	b.n	413690 <lv_img_decoder_built_in_line_alpha+0x170>
            pos = 8 - px_size;
  4136ce:	f1c9 0408 	rsb	r4, r9, #8
  4136d2:	b264      	sxtb	r4, r4
            data_tmp++;
  4136d4:	f10b 0b01 	add.w	fp, fp, #1
  4136d8:	e7e1      	b.n	41369e <lv_img_decoder_built_in_line_alpha+0x17e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  4136da:	9802      	ldr	r0, [sp, #8]
  4136dc:	4b06      	ldr	r3, [pc, #24]	; (4136f8 <lv_img_decoder_built_in_line_alpha+0x1d8>)
  4136de:	4798      	blx	r3

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  4136e0:	2001      	movs	r0, #1
  4136e2:	b00b      	add	sp, #44	; 0x2c
  4136e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4136e8:	0042c2e0 	.word	0x0042c2e0
  4136ec:	0040d369 	.word	0x0040d369
  4136f0:	00416965 	.word	0x00416965
  4136f4:	00415f89 	.word	0x00415f89
  4136f8:	00416715 	.word	0x00416715
  4136fc:	00415f4d 	.word	0x00415f4d

00413700 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
  413700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413704:	b083      	sub	sp, #12
  413706:	4682      	mov	sl, r0
  413708:	460c      	mov	r4, r1
  41370a:	4616      	mov	r6, r2
  41370c:	4699      	mov	r9, r3
  41370e:	9d0c      	ldr	r5, [sp, #48]	; 0x30

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  413710:	7b00      	ldrb	r0, [r0, #12]
  413712:	f000 001f 	and.w	r0, r0, #31
  413716:	4b5d      	ldr	r3, [pc, #372]	; (41388c <lv_img_decoder_built_in_line_indexed+0x18c>)
  413718:	4798      	blx	r3
  41371a:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  41371c:	2701      	movs	r7, #1
  41371e:	4087      	lsls	r7, r0
  413720:	b2bf      	uxth	r7, r7
  413722:	3f01      	subs	r7, #1
  413724:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
  413726:	f89a 300c 	ldrb.w	r3, [sl, #12]
  41372a:	f003 031f 	and.w	r3, r3, #31
  41372e:	3b07      	subs	r3, #7
  413730:	2b03      	cmp	r3, #3
  413732:	d868      	bhi.n	413806 <lv_img_decoder_built_in_line_indexed+0x106>
  413734:	e8df f003 	tbb	[pc, r3]
  413738:	58412902 	.word	0x58412902
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  41373c:	f8da 300c 	ldr.w	r3, [sl, #12]
  413740:	f3c3 238a 	ubfx	r3, r3, #10, #11
  413744:	10da      	asrs	r2, r3, #3
  413746:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x7) w++;
  41374a:	f013 0f07 	tst.w	r3, #7
  41374e:	d001      	beq.n	413754 <lv_img_decoder_built_in_line_indexed+0x54>
  413750:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
  413754:	10e3      	asrs	r3, r4, #3
  413756:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 8;                /*Skip the palette*/
  41375a:	f106 0308 	add.w	r3, r6, #8
  41375e:	9301      	str	r3, [sp, #4]
            pos = 7 - (x & 0x7);
  413760:	43e4      	mvns	r4, r4
  413762:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  413766:	f8da 601c 	ldr.w	r6, [sl, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  41376a:	4658      	mov	r0, fp
  41376c:	4b48      	ldr	r3, [pc, #288]	; (413890 <lv_img_decoder_built_in_line_indexed+0x190>)
  41376e:	4798      	blx	r3
  413770:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  413772:	f89a 300a 	ldrb.w	r3, [sl, #10]
  413776:	2b00      	cmp	r3, #0
  413778:	d14c      	bne.n	413814 <lv_img_decoder_built_in_line_indexed+0x114>
        const lv_img_dsc_t * img_dsc = dsc->src;
  41377a:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
  41377e:	689b      	ldr	r3, [r3, #8]
  413780:	9a01      	ldr	r2, [sp, #4]
  413782:	441a      	add	r2, r3
  413784:	4696      	mov	lr, r2
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  413786:	2100      	movs	r1, #0
  413788:	e056      	b.n	413838 <lv_img_decoder_built_in_line_indexed+0x138>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  41378a:	f8da 300c 	ldr.w	r3, [sl, #12]
  41378e:	f3c3 238a 	ubfx	r3, r3, #10, #11
  413792:	109a      	asrs	r2, r3, #2
  413794:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x3) w++;
  413798:	f013 0f03 	tst.w	r3, #3
  41379c:	d001      	beq.n	4137a2 <lv_img_decoder_built_in_line_indexed+0xa2>
  41379e:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
  4137a2:	10a3      	asrs	r3, r4, #2
  4137a4:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 16;               /*Skip the palette*/
  4137a8:	f106 0310 	add.w	r3, r6, #16
  4137ac:	9301      	str	r3, [sp, #4]
            pos = 6 - ((x & 0x3) * 2);
  4137ae:	b2a4      	uxth	r4, r4
  4137b0:	43e4      	mvns	r4, r4
  4137b2:	f004 0403 	and.w	r4, r4, #3
  4137b6:	0064      	lsls	r4, r4, #1
            break;
  4137b8:	e7d5      	b.n	413766 <lv_img_decoder_built_in_line_indexed+0x66>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  4137ba:	f8da 300c 	ldr.w	r3, [sl, #12]
  4137be:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4137c2:	105a      	asrs	r2, r3, #1
  4137c4:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x1) w++;
  4137c8:	f013 0f01 	tst.w	r3, #1
  4137cc:	d001      	beq.n	4137d2 <lv_img_decoder_built_in_line_indexed+0xd2>
  4137ce:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  4137d2:	1063      	asrs	r3, r4, #1
  4137d4:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 64;               /*Skip the palette*/
  4137d8:	f106 0340 	add.w	r3, r6, #64	; 0x40
  4137dc:	9301      	str	r3, [sp, #4]
            pos = 4 - ((x & 0x1) * 4);
  4137de:	f014 0f01 	tst.w	r4, #1
  4137e2:	d115      	bne.n	413810 <lv_img_decoder_built_in_line_indexed+0x110>
  4137e4:	2404      	movs	r4, #4
  4137e6:	e7be      	b.n	413766 <lv_img_decoder_built_in_line_indexed+0x66>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  4137e8:	f8da 300c 	ldr.w	r3, [sl, #12]
  4137ec:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
  4137f0:	fa1f f38b 	uxth.w	r3, fp
  4137f4:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
  4137f8:	fb06 4403 	mla	r4, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
  4137fc:	f504 6380 	add.w	r3, r4, #1024	; 0x400
  413800:	9301      	str	r3, [sp, #4]
            pos = 0;
  413802:	2400      	movs	r4, #0
            break;
  413804:	e7af      	b.n	413766 <lv_img_decoder_built_in_line_indexed+0x66>
    uint32_t ofs = 0;
  413806:	2300      	movs	r3, #0
  413808:	9301      	str	r3, [sp, #4]
    int8_t pos   = 0;
  41380a:	461c      	mov	r4, r3
    lv_coord_t w = 0;
  41380c:	469b      	mov	fp, r3
  41380e:	e7aa      	b.n	413766 <lv_img_decoder_built_in_line_indexed+0x66>
            pos = 4 - ((x & 0x1) * 4);
  413810:	2400      	movs	r4, #0
  413812:	e7a8      	b.n	413766 <lv_img_decoder_built_in_line_indexed+0x66>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  413814:	9901      	ldr	r1, [sp, #4]
  413816:	3104      	adds	r1, #4
  413818:	6830      	ldr	r0, [r6, #0]
  41381a:	4b1e      	ldr	r3, [pc, #120]	; (413894 <lv_img_decoder_built_in_line_indexed+0x194>)
  41381c:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  41381e:	2300      	movs	r3, #0
  413820:	465a      	mov	r2, fp
  413822:	f8dd b000 	ldr.w	fp, [sp]
  413826:	4659      	mov	r1, fp
  413828:	6830      	ldr	r0, [r6, #0]
  41382a:	f8df a070 	ldr.w	sl, [pc, #112]	; 41389c <lv_img_decoder_built_in_line_indexed+0x19c>
  41382e:	47d0      	blx	sl
        data_tmp = fs_buf;
  413830:	46de      	mov	lr, fp
  413832:	e7a8      	b.n	413786 <lv_img_decoder_built_in_line_indexed+0x86>
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
  413834:	3101      	adds	r1, #1
  413836:	b209      	sxth	r1, r1
  413838:	4549      	cmp	r1, r9
  41383a:	da20      	bge.n	41387e <lv_img_decoder_built_in_line_indexed+0x17e>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  41383c:	f89e 3000 	ldrb.w	r3, [lr]
  413840:	fa07 f204 	lsl.w	r2, r7, r4
  413844:	4013      	ands	r3, r2
  413846:	4123      	asrs	r3, r4

        lv_color_t color = user_data->palette[val_act];
  413848:	6870      	ldr	r0, [r6, #4]
  41384a:	b2db      	uxtb	r3, r3
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
  41384c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  413850:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  413854:	54a8      	strb	r0, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
  413856:	f102 0c01 	add.w	ip, r2, #1
  41385a:	0a00      	lsrs	r0, r0, #8
  41385c:	f805 000c 	strb.w	r0, [r5, ip]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
  413860:	3202      	adds	r2, #2
  413862:	68b0      	ldr	r0, [r6, #8]
  413864:	5cc3      	ldrb	r3, [r0, r3]
  413866:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
  413868:	eba4 0408 	sub.w	r4, r4, r8
  41386c:	b264      	sxtb	r4, r4
        if(pos < 0) {
  41386e:	2c00      	cmp	r4, #0
  413870:	dae0      	bge.n	413834 <lv_img_decoder_built_in_line_indexed+0x134>
            pos = 8 - px_size;
  413872:	f1c8 0408 	rsb	r4, r8, #8
  413876:	b264      	sxtb	r4, r4
            data_tmp++;
  413878:	f10e 0e01 	add.w	lr, lr, #1
  41387c:	e7da      	b.n	413834 <lv_img_decoder_built_in_line_indexed+0x134>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  41387e:	9800      	ldr	r0, [sp, #0]
  413880:	4b05      	ldr	r3, [pc, #20]	; (413898 <lv_img_decoder_built_in_line_indexed+0x198>)
  413882:	4798      	blx	r3
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  413884:	2001      	movs	r0, #1
  413886:	b003      	add	sp, #12
  413888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41388c:	0040d369 	.word	0x0040d369
  413890:	00416965 	.word	0x00416965
  413894:	00415f89 	.word	0x00415f89
  413898:	00416715 	.word	0x00416715
  41389c:	00415f4d 	.word	0x00415f4d

004138a0 <lv_img_decoder_built_in_read_line>:
{
  4138a0:	b530      	push	{r4, r5, lr}
  4138a2:	b083      	sub	sp, #12
  4138a4:	4608      	mov	r0, r1
  4138a6:	4611      	mov	r1, r2
  4138a8:	461a      	mov	r2, r3
  4138aa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  4138ae:	7b04      	ldrb	r4, [r0, #12]
  4138b0:	f004 041f 	and.w	r4, r4, #31
  4138b4:	1f25      	subs	r5, r4, #4
  4138b6:	b2ed      	uxtb	r5, r5
  4138b8:	2d02      	cmp	r5, #2
  4138ba:	d80a      	bhi.n	4138d2 <lv_img_decoder_built_in_read_line+0x32>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  4138bc:	7a84      	ldrb	r4, [r0, #10]
  4138be:	2c01      	cmp	r4, #1
  4138c0:	d002      	beq.n	4138c8 <lv_img_decoder_built_in_read_line+0x28>
    lv_res_t res = LV_RES_INV;
  4138c2:	2000      	movs	r0, #0
}
  4138c4:	b003      	add	sp, #12
  4138c6:	bd30      	pop	{r4, r5, pc}
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
  4138c8:	9c07      	ldr	r4, [sp, #28]
  4138ca:	9400      	str	r4, [sp, #0]
  4138cc:	4c0b      	ldr	r4, [pc, #44]	; (4138fc <lv_img_decoder_built_in_read_line+0x5c>)
  4138ce:	47a0      	blx	r4
  4138d0:	e7f8      	b.n	4138c4 <lv_img_decoder_built_in_read_line+0x24>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  4138d2:	f1a4 050b 	sub.w	r5, r4, #11
  4138d6:	b2ed      	uxtb	r5, r5
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  4138d8:	2d03      	cmp	r5, #3
  4138da:	d905      	bls.n	4138e8 <lv_img_decoder_built_in_read_line+0x48>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  4138dc:	3c07      	subs	r4, #7
  4138de:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
  4138e0:	2c03      	cmp	r4, #3
  4138e2:	d906      	bls.n	4138f2 <lv_img_decoder_built_in_read_line+0x52>
        return LV_RES_INV;
  4138e4:	2000      	movs	r0, #0
  4138e6:	e7ed      	b.n	4138c4 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
  4138e8:	9c07      	ldr	r4, [sp, #28]
  4138ea:	9400      	str	r4, [sp, #0]
  4138ec:	4c04      	ldr	r4, [pc, #16]	; (413900 <lv_img_decoder_built_in_read_line+0x60>)
  4138ee:	47a0      	blx	r4
  4138f0:	e7e8      	b.n	4138c4 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
  4138f2:	9c07      	ldr	r4, [sp, #28]
  4138f4:	9400      	str	r4, [sp, #0]
  4138f6:	4c03      	ldr	r4, [pc, #12]	; (413904 <lv_img_decoder_built_in_read_line+0x64>)
  4138f8:	47a0      	blx	r4
  4138fa:	e7e3      	b.n	4138c4 <lv_img_decoder_built_in_read_line+0x24>
  4138fc:	004134a9 	.word	0x004134a9
  413900:	00413521 	.word	0x00413521
  413904:	00413701 	.word	0x00413701

00413908 <lv_img_decoder_get_info>:
{
  413908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41390a:	4607      	mov	r7, r0
  41390c:	460e      	mov	r6, r1
    header->always_zero = 0;
  41390e:	780b      	ldrb	r3, [r1, #0]
  413910:	f36f 1347 	bfc	r3, #5, #3
  413914:	700b      	strb	r3, [r1, #0]
    header->h = 0;
  413916:	884b      	ldrh	r3, [r1, #2]
  413918:	f36f 134f 	bfc	r3, #5, #11
  41391c:	804b      	strh	r3, [r1, #2]
    header->w = 0;
  41391e:	680b      	ldr	r3, [r1, #0]
  413920:	f36f 2394 	bfc	r3, #10, #11
  413924:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
  413926:	f36f 0304 	bfc	r3, #0, #5
  41392a:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41392c:	480c      	ldr	r0, [pc, #48]	; (413960 <lv_img_decoder_get_info+0x58>)
  41392e:	4b0d      	ldr	r3, [pc, #52]	; (413964 <lv_img_decoder_get_info+0x5c>)
  413930:	4798      	blx	r3
  413932:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  413934:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413936:	e005      	b.n	413944 <lv_img_decoder_get_info+0x3c>
        res = LV_RES_INV;
  413938:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41393a:	4621      	mov	r1, r4
  41393c:	4808      	ldr	r0, [pc, #32]	; (413960 <lv_img_decoder_get_info+0x58>)
  41393e:	4b0a      	ldr	r3, [pc, #40]	; (413968 <lv_img_decoder_get_info+0x60>)
  413940:	4798      	blx	r3
  413942:	4604      	mov	r4, r0
  413944:	b14c      	cbz	r4, 41395a <lv_img_decoder_get_info+0x52>
        if(d->info_cb) {
  413946:	6823      	ldr	r3, [r4, #0]
  413948:	2b00      	cmp	r3, #0
  41394a:	d0f5      	beq.n	413938 <lv_img_decoder_get_info+0x30>
            res = d->info_cb(d, src, header);
  41394c:	4632      	mov	r2, r6
  41394e:	4639      	mov	r1, r7
  413950:	4620      	mov	r0, r4
  413952:	4798      	blx	r3
  413954:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
  413956:	2801      	cmp	r0, #1
  413958:	d1ef      	bne.n	41393a <lv_img_decoder_get_info+0x32>
}
  41395a:	4628      	mov	r0, r5
  41395c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41395e:	bf00      	nop
  413960:	2043a278 	.word	0x2043a278
  413964:	00416189 	.word	0x00416189
  413968:	0041619d 	.word	0x0041619d

0041396c <lv_img_decoder_open>:
{
  41396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41396e:	4606      	mov	r6, r0
  413970:	460f      	mov	r7, r1
    dsc->color     = color;
  413972:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
  413974:	4608      	mov	r0, r1
  413976:	4b1d      	ldr	r3, [pc, #116]	; (4139ec <lv_img_decoder_open+0x80>)
  413978:	4798      	blx	r3
  41397a:	72b0      	strb	r0, [r6, #10]
    dsc->user_data = NULL;
  41397c:	2300      	movs	r3, #0
  41397e:	61f3      	str	r3, [r6, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  413980:	2801      	cmp	r0, #1
  413982:	d006      	beq.n	413992 <lv_img_decoder_open+0x26>
        dsc->src       = src;
  413984:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413986:	481a      	ldr	r0, [pc, #104]	; (4139f0 <lv_img_decoder_open+0x84>)
  413988:	4b1a      	ldr	r3, [pc, #104]	; (4139f4 <lv_img_decoder_open+0x88>)
  41398a:	4798      	blx	r3
  41398c:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  41398e:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413990:	e00f      	b.n	4139b2 <lv_img_decoder_open+0x46>
        size_t fnlen = strlen(src);
  413992:	4638      	mov	r0, r7
  413994:	4b18      	ldr	r3, [pc, #96]	; (4139f8 <lv_img_decoder_open+0x8c>)
  413996:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
  413998:	3001      	adds	r0, #1
  41399a:	4b18      	ldr	r3, [pc, #96]	; (4139fc <lv_img_decoder_open+0x90>)
  41399c:	4798      	blx	r3
  41399e:	6070      	str	r0, [r6, #4]
        strcpy((char *)dsc->src, src);
  4139a0:	4639      	mov	r1, r7
  4139a2:	4b17      	ldr	r3, [pc, #92]	; (413a00 <lv_img_decoder_open+0x94>)
  4139a4:	4798      	blx	r3
  4139a6:	e7ee      	b.n	413986 <lv_img_decoder_open+0x1a>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4139a8:	4621      	mov	r1, r4
  4139aa:	4811      	ldr	r0, [pc, #68]	; (4139f0 <lv_img_decoder_open+0x84>)
  4139ac:	4b15      	ldr	r3, [pc, #84]	; (413a04 <lv_img_decoder_open+0x98>)
  4139ae:	4798      	blx	r3
  4139b0:	4604      	mov	r4, r0
  4139b2:	b1c4      	cbz	r4, 4139e6 <lv_img_decoder_open+0x7a>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
  4139b4:	6823      	ldr	r3, [r4, #0]
  4139b6:	2b00      	cmp	r3, #0
  4139b8:	d0f6      	beq.n	4139a8 <lv_img_decoder_open+0x3c>
  4139ba:	6862      	ldr	r2, [r4, #4]
  4139bc:	2a00      	cmp	r2, #0
  4139be:	d0f3      	beq.n	4139a8 <lv_img_decoder_open+0x3c>
        res = d->info_cb(d, src, &dsc->header);
  4139c0:	f106 020c 	add.w	r2, r6, #12
  4139c4:	4639      	mov	r1, r7
  4139c6:	4620      	mov	r0, r4
  4139c8:	4798      	blx	r3
  4139ca:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
  4139cc:	2801      	cmp	r0, #1
  4139ce:	d1eb      	bne.n	4139a8 <lv_img_decoder_open+0x3c>
        dsc->error_msg = NULL;
  4139d0:	2300      	movs	r3, #0
  4139d2:	61b3      	str	r3, [r6, #24]
        dsc->img_data  = NULL;
  4139d4:	6133      	str	r3, [r6, #16]
        dsc->decoder   = d;
  4139d6:	6034      	str	r4, [r6, #0]
        res = d->open_cb(d, dsc);
  4139d8:	6863      	ldr	r3, [r4, #4]
  4139da:	4631      	mov	r1, r6
  4139dc:	4620      	mov	r0, r4
  4139de:	4798      	blx	r3
  4139e0:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
  4139e2:	2801      	cmp	r0, #1
  4139e4:	d1e0      	bne.n	4139a8 <lv_img_decoder_open+0x3c>
}
  4139e6:	4628      	mov	r0, r5
  4139e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4139ea:	bf00      	nop
  4139ec:	0040d62d 	.word	0x0040d62d
  4139f0:	2043a278 	.word	0x2043a278
  4139f4:	00416189 	.word	0x00416189
  4139f8:	00428001 	.word	0x00428001
  4139fc:	004165bd 	.word	0x004165bd
  413a00:	00427f1d 	.word	0x00427f1d
  413a04:	0041619d 	.word	0x0041619d

00413a08 <lv_img_decoder_read_line>:
{
  413a08:	b570      	push	{r4, r5, r6, lr}
  413a0a:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
  413a0c:	6806      	ldr	r6, [r0, #0]
  413a0e:	68b4      	ldr	r4, [r6, #8]
  413a10:	b154      	cbz	r4, 413a28 <lv_img_decoder_read_line+0x20>
  413a12:	461d      	mov	r5, r3
  413a14:	4613      	mov	r3, r2
  413a16:	460a      	mov	r2, r1
  413a18:	4601      	mov	r1, r0
  413a1a:	9806      	ldr	r0, [sp, #24]
  413a1c:	9001      	str	r0, [sp, #4]
  413a1e:	9500      	str	r5, [sp, #0]
  413a20:	4630      	mov	r0, r6
  413a22:	47a0      	blx	r4
}
  413a24:	b002      	add	sp, #8
  413a26:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
  413a28:	2000      	movs	r0, #0
  413a2a:	e7fb      	b.n	413a24 <lv_img_decoder_read_line+0x1c>

00413a2c <lv_img_decoder_close>:
    if(dsc->decoder) {
  413a2c:	6803      	ldr	r3, [r0, #0]
  413a2e:	b183      	cbz	r3, 413a52 <lv_img_decoder_close+0x26>
{
  413a30:	b510      	push	{r4, lr}
  413a32:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
  413a34:	68da      	ldr	r2, [r3, #12]
  413a36:	b112      	cbz	r2, 413a3e <lv_img_decoder_close+0x12>
  413a38:	4601      	mov	r1, r0
  413a3a:	4618      	mov	r0, r3
  413a3c:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  413a3e:	7aa3      	ldrb	r3, [r4, #10]
  413a40:	2b01      	cmp	r3, #1
  413a42:	d000      	beq.n	413a46 <lv_img_decoder_close+0x1a>
  413a44:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
  413a46:	6860      	ldr	r0, [r4, #4]
  413a48:	4b02      	ldr	r3, [pc, #8]	; (413a54 <lv_img_decoder_close+0x28>)
  413a4a:	4798      	blx	r3
            dsc->src = NULL;
  413a4c:	2300      	movs	r3, #0
  413a4e:	6063      	str	r3, [r4, #4]
}
  413a50:	e7f8      	b.n	413a44 <lv_img_decoder_close+0x18>
  413a52:	4770      	bx	lr
  413a54:	00416681 	.word	0x00416681

00413a58 <lv_img_decoder_create>:
{
  413a58:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
  413a5a:	480a      	ldr	r0, [pc, #40]	; (413a84 <lv_img_decoder_create+0x2c>)
  413a5c:	4b0a      	ldr	r3, [pc, #40]	; (413a88 <lv_img_decoder_create+0x30>)
  413a5e:	4798      	blx	r3
  413a60:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
  413a62:	4b0a      	ldr	r3, [pc, #40]	; (413a8c <lv_img_decoder_create+0x34>)
  413a64:	4798      	blx	r3
  413a66:	b130      	cbz	r0, 413a76 <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
  413a68:	b11c      	cbz	r4, 413a72 <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
  413a6a:	2110      	movs	r1, #16
  413a6c:	4620      	mov	r0, r4
  413a6e:	4b08      	ldr	r3, [pc, #32]	; (413a90 <lv_img_decoder_create+0x38>)
  413a70:	4798      	blx	r3
}
  413a72:	4620      	mov	r0, r4
  413a74:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
  413a76:	4622      	mov	r2, r4
  413a78:	2300      	movs	r3, #0
  413a7a:	4806      	ldr	r0, [pc, #24]	; (413a94 <lv_img_decoder_create+0x3c>)
  413a7c:	4906      	ldr	r1, [pc, #24]	; (413a98 <lv_img_decoder_create+0x40>)
  413a7e:	4788      	blx	r1
  413a80:	e7fe      	b.n	413a80 <lv_img_decoder_create+0x28>
  413a82:	bf00      	nop
  413a84:	2043a278 	.word	0x2043a278
  413a88:	004160f1 	.word	0x004160f1
  413a8c:	00415e79 	.word	0x00415e79
  413a90:	00416af1 	.word	0x00416af1
  413a94:	0042c154 	.word	0x0042c154
  413a98:	00415e85 	.word	0x00415e85

00413a9c <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
  413a9c:	6001      	str	r1, [r0, #0]
  413a9e:	4770      	bx	lr

00413aa0 <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
  413aa0:	6041      	str	r1, [r0, #4]
  413aa2:	4770      	bx	lr

00413aa4 <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
  413aa4:	6081      	str	r1, [r0, #8]
  413aa6:	4770      	bx	lr

00413aa8 <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
  413aa8:	60c1      	str	r1, [r0, #12]
  413aaa:	4770      	bx	lr

00413aac <_lv_img_decoder_init>:
{
  413aac:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
  413aae:	2110      	movs	r1, #16
  413ab0:	4810      	ldr	r0, [pc, #64]	; (413af4 <_lv_img_decoder_init+0x48>)
  413ab2:	4b11      	ldr	r3, [pc, #68]	; (413af8 <_lv_img_decoder_init+0x4c>)
  413ab4:	4798      	blx	r3
    decoder = lv_img_decoder_create();
  413ab6:	4b11      	ldr	r3, [pc, #68]	; (413afc <_lv_img_decoder_init+0x50>)
  413ab8:	4798      	blx	r3
    if(decoder == NULL) {
  413aba:	4604      	mov	r4, r0
  413abc:	b178      	cbz	r0, 413ade <_lv_img_decoder_init+0x32>
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
  413abe:	4910      	ldr	r1, [pc, #64]	; (413b00 <_lv_img_decoder_init+0x54>)
  413ac0:	4b10      	ldr	r3, [pc, #64]	; (413b04 <_lv_img_decoder_init+0x58>)
  413ac2:	4798      	blx	r3
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
  413ac4:	4910      	ldr	r1, [pc, #64]	; (413b08 <_lv_img_decoder_init+0x5c>)
  413ac6:	4620      	mov	r0, r4
  413ac8:	4b10      	ldr	r3, [pc, #64]	; (413b0c <_lv_img_decoder_init+0x60>)
  413aca:	4798      	blx	r3
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
  413acc:	4910      	ldr	r1, [pc, #64]	; (413b10 <_lv_img_decoder_init+0x64>)
  413ace:	4620      	mov	r0, r4
  413ad0:	4b10      	ldr	r3, [pc, #64]	; (413b14 <_lv_img_decoder_init+0x68>)
  413ad2:	4798      	blx	r3
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
  413ad4:	4910      	ldr	r1, [pc, #64]	; (413b18 <_lv_img_decoder_init+0x6c>)
  413ad6:	4620      	mov	r0, r4
  413ad8:	4b10      	ldr	r3, [pc, #64]	; (413b1c <_lv_img_decoder_init+0x70>)
  413ada:	4798      	blx	r3
  413adc:	bd10      	pop	{r4, pc}
        LV_ASSERT_MEM(decoder);
  413ade:	4b10      	ldr	r3, [pc, #64]	; (413b20 <_lv_img_decoder_init+0x74>)
  413ae0:	4798      	blx	r3
  413ae2:	2800      	cmp	r0, #0
  413ae4:	d1fa      	bne.n	413adc <_lv_img_decoder_init+0x30>
  413ae6:	4622      	mov	r2, r4
  413ae8:	2300      	movs	r3, #0
  413aea:	480e      	ldr	r0, [pc, #56]	; (413b24 <_lv_img_decoder_init+0x78>)
  413aec:	490e      	ldr	r1, [pc, #56]	; (413b28 <_lv_img_decoder_init+0x7c>)
  413aee:	4788      	blx	r1
  413af0:	e7fe      	b.n	413af0 <_lv_img_decoder_init+0x44>
  413af2:	bf00      	nop
  413af4:	2043a278 	.word	0x2043a278
  413af8:	004160df 	.word	0x004160df
  413afc:	00413a59 	.word	0x00413a59
  413b00:	00413139 	.word	0x00413139
  413b04:	00413a9d 	.word	0x00413a9d
  413b08:	0041323d 	.word	0x0041323d
  413b0c:	00413aa1 	.word	0x00413aa1
  413b10:	004138a1 	.word	0x004138a1
  413b14:	00413aa5 	.word	0x00413aa5
  413b18:	00413201 	.word	0x00413201
  413b1c:	00413aa9 	.word	0x00413aa9
  413b20:	00415e79 	.word	0x00415e79
  413b24:	0042c154 	.word	0x0042c154
  413b28:	00415e85 	.word	0x00415e85

00413b2c <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
  413b2c:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
  413b2e:	6843      	ldr	r3, [r0, #4]
  413b30:	4798      	blx	r3
}
  413b32:	bd08      	pop	{r3, pc}

00413b34 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
  413b34:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
  413b36:	6804      	ldr	r4, [r0, #0]
  413b38:	47a0      	blx	r4
}
  413b3a:	bd10      	pop	{r4, pc}

00413b3c <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
  413b3c:	b510      	push	{r4, lr}
  413b3e:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
  413b40:	4613      	mov	r3, r2
  413b42:	460a      	mov	r2, r1
  413b44:	a901      	add	r1, sp, #4
  413b46:	4c04      	ldr	r4, [pc, #16]	; (413b58 <lv_font_get_glyph_width+0x1c>)
  413b48:	47a0      	blx	r4
    if(ret) return g.adv_w;
  413b4a:	b118      	cbz	r0, 413b54 <lv_font_get_glyph_width+0x18>
  413b4c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
  413b50:	b004      	add	sp, #16
  413b52:	bd10      	pop	{r4, pc}
    else return 0;
  413b54:	2000      	movs	r0, #0
  413b56:	e7fb      	b.n	413b50 <lv_font_get_glyph_width+0x14>
  413b58:	00413b35 	.word	0x00413b35

00413b5c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
  413b5c:	7803      	ldrb	r3, [r0, #0]
  413b5e:	780a      	ldrb	r2, [r1, #0]
  413b60:	4293      	cmp	r3, r2
  413b62:	d001      	beq.n	413b68 <kern_pair_8_compare+0xc>
  413b64:	1a98      	subs	r0, r3, r2
  413b66:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
  413b68:	7840      	ldrb	r0, [r0, #1]
  413b6a:	784b      	ldrb	r3, [r1, #1]
  413b6c:	1ac0      	subs	r0, r0, r3

}
  413b6e:	4770      	bx	lr

00413b70 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
  413b70:	8803      	ldrh	r3, [r0, #0]
  413b72:	880a      	ldrh	r2, [r1, #0]
  413b74:	4293      	cmp	r3, r2
  413b76:	d001      	beq.n	413b7c <kern_pair_16_compare+0xc>
  413b78:	1a98      	subs	r0, r3, r2
  413b7a:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
  413b7c:	8840      	ldrh	r0, [r0, #2]
  413b7e:	884b      	ldrh	r3, [r1, #2]
  413b80:	1ac0      	subs	r0, r0, r3
}
  413b82:	4770      	bx	lr

00413b84 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
  413b84:	8800      	ldrh	r0, [r0, #0]
  413b86:	880b      	ldrh	r3, [r1, #0]
}
  413b88:	1ac0      	subs	r0, r0, r3
  413b8a:	4770      	bx	lr

00413b8c <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
  413b8c:	460b      	mov	r3, r1
  413b8e:	2900      	cmp	r1, #0
  413b90:	d061      	beq.n	413c56 <get_glyph_dsc_id+0xca>
{
  413b92:	b5f0      	push	{r4, r5, r6, r7, lr}
  413b94:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  413b96:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  413b98:	6962      	ldr	r2, [r4, #20]
  413b9a:	4291      	cmp	r1, r2
  413b9c:	d013      	beq.n	413bc6 <get_glyph_dsc_id+0x3a>
  413b9e:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
  413ba0:	8a61      	ldrh	r1, [r4, #18]
  413ba2:	f3c1 0108 	ubfx	r1, r1, #0, #9
  413ba6:	428a      	cmp	r2, r1
  413ba8:	da51      	bge.n	413c4e <get_glyph_dsc_id+0xc2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  413baa:	68a0      	ldr	r0, [r4, #8]
  413bac:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  413bb0:	00a9      	lsls	r1, r5, #2
  413bb2:	460e      	mov	r6, r1
  413bb4:	1847      	adds	r7, r0, r1
  413bb6:	5841      	ldr	r1, [r0, r1]
  413bb8:	1a59      	subs	r1, r3, r1
        if(rcp > fdsc->cmaps[i].range_length) continue;
  413bba:	88b8      	ldrh	r0, [r7, #4]
  413bbc:	4281      	cmp	r1, r0
  413bbe:	d904      	bls.n	413bca <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
  413bc0:	3201      	adds	r2, #1
  413bc2:	b292      	uxth	r2, r2
  413bc4:	e7ec      	b.n	413ba0 <get_glyph_dsc_id+0x14>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  413bc6:	69a0      	ldr	r0, [r4, #24]
  413bc8:	e00a      	b.n	413be0 <get_glyph_dsc_id+0x54>
  413bca:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
  413bcc:	7cbb      	ldrb	r3, [r7, #18]
  413bce:	2b02      	cmp	r3, #2
  413bd0:	d008      	beq.n	413be4 <get_glyph_dsc_id+0x58>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
  413bd2:	b953      	cbnz	r3, 413bea <get_glyph_dsc_id+0x5e>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
  413bd4:	68fb      	ldr	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
  413bd6:	88f8      	ldrh	r0, [r7, #6]
  413bd8:	5c5b      	ldrb	r3, [r3, r1]
  413bda:	4418      	add	r0, r3
        fdsc->last_letter = letter;
  413bdc:	6165      	str	r5, [r4, #20]
        fdsc->last_glyph_id = glyph_id;
  413bde:	61a0      	str	r0, [r4, #24]
}
  413be0:	b005      	add	sp, #20
  413be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
  413be4:	88f8      	ldrh	r0, [r7, #6]
  413be6:	4408      	add	r0, r1
  413be8:	e7f8      	b.n	413bdc <get_glyph_dsc_id+0x50>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
  413bea:	2b03      	cmp	r3, #3
  413bec:	d003      	beq.n	413bf6 <get_glyph_dsc_id+0x6a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
  413bee:	2b01      	cmp	r3, #1
  413bf0:	d017      	beq.n	413c22 <get_glyph_dsc_id+0x96>
        uint32_t glyph_id = 0;
  413bf2:	2000      	movs	r0, #0
  413bf4:	e7f2      	b.n	413bdc <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  413bf6:	a804      	add	r0, sp, #16
  413bf8:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  413bfc:	68b9      	ldr	r1, [r7, #8]
  413bfe:	8a3a      	ldrh	r2, [r7, #16]
  413c00:	4b16      	ldr	r3, [pc, #88]	; (413c5c <get_glyph_dsc_id+0xd0>)
  413c02:	9300      	str	r3, [sp, #0]
  413c04:	2302      	movs	r3, #2
  413c06:	4f16      	ldr	r7, [pc, #88]	; (413c60 <get_glyph_dsc_id+0xd4>)
  413c08:	47b8      	blx	r7
            if(p) {
  413c0a:	4603      	mov	r3, r0
  413c0c:	b138      	cbz	r0, 413c1e <get_glyph_dsc_id+0x92>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  413c0e:	68a2      	ldr	r2, [r4, #8]
  413c10:	4416      	add	r6, r2
  413c12:	68b0      	ldr	r0, [r6, #8]
  413c14:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
  413c16:	88f3      	ldrh	r3, [r6, #6]
  413c18:	eb03 0060 	add.w	r0, r3, r0, asr #1
  413c1c:	e7de      	b.n	413bdc <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  413c1e:	2000      	movs	r0, #0
  413c20:	e7dc      	b.n	413bdc <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  413c22:	a804      	add	r0, sp, #16
  413c24:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  413c28:	68b9      	ldr	r1, [r7, #8]
  413c2a:	8a3a      	ldrh	r2, [r7, #16]
  413c2c:	4b0b      	ldr	r3, [pc, #44]	; (413c5c <get_glyph_dsc_id+0xd0>)
  413c2e:	9300      	str	r3, [sp, #0]
  413c30:	2302      	movs	r3, #2
  413c32:	4f0b      	ldr	r7, [pc, #44]	; (413c60 <get_glyph_dsc_id+0xd4>)
  413c34:	47b8      	blx	r7
            if(p) {
  413c36:	b140      	cbz	r0, 413c4a <get_glyph_dsc_id+0xbe>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  413c38:	68a3      	ldr	r3, [r4, #8]
  413c3a:	441e      	add	r6, r3
  413c3c:	68b3      	ldr	r3, [r6, #8]
  413c3e:	1ac2      	subs	r2, r0, r3
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
  413c40:	68f1      	ldr	r1, [r6, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
  413c42:	88f3      	ldrh	r3, [r6, #6]
  413c44:	5a88      	ldrh	r0, [r1, r2]
  413c46:	4418      	add	r0, r3
  413c48:	e7c8      	b.n	413bdc <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  413c4a:	2000      	movs	r0, #0
  413c4c:	e7c6      	b.n	413bdc <get_glyph_dsc_id+0x50>
    fdsc->last_letter = letter;
  413c4e:	6163      	str	r3, [r4, #20]
    fdsc->last_glyph_id = 0;
  413c50:	2000      	movs	r0, #0
  413c52:	61a0      	str	r0, [r4, #24]
    return 0;
  413c54:	e7c4      	b.n	413be0 <get_glyph_dsc_id+0x54>
    if(letter == '\0') return 0;
  413c56:	4608      	mov	r0, r1
  413c58:	4770      	bx	lr
  413c5a:	bf00      	nop
  413c5c:	00413b85 	.word	0x00413b85
  413c60:	00417fbd 	.word	0x00417fbd

00413c64 <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  413c64:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
  413c66:	7cd8      	ldrb	r0, [r3, #19]
  413c68:	f010 0f20 	tst.w	r0, #32
  413c6c:	d13a      	bne.n	413ce4 <get_kern_value+0x80>
{
  413c6e:	b570      	push	{r4, r5, r6, lr}
  413c70:	b084      	sub	sp, #16
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
  413c72:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
  413c74:	7ae3      	ldrb	r3, [r4, #11]
  413c76:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
  413c7a:	d004      	beq.n	413c86 <get_kern_value+0x22>
        else if(kdsc->glyph_ids_size == 1) {
  413c7c:	2b40      	cmp	r3, #64	; 0x40
  413c7e:	d01a      	beq.n	413cb6 <get_kern_value+0x52>
    int8_t value = 0;
  413c80:	2000      	movs	r0, #0
}
  413c82:	b004      	add	sp, #16
  413c84:	bd70      	pop	{r4, r5, r6, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
  413c86:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
  413c88:	0212      	lsls	r2, r2, #8
  413c8a:	b292      	uxth	r2, r2
  413c8c:	440a      	add	r2, r1
  413c8e:	a804      	add	r0, sp, #16
  413c90:	f820 2d04 	strh.w	r2, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
  413c94:	68a2      	ldr	r2, [r4, #8]
  413c96:	4b1d      	ldr	r3, [pc, #116]	; (413d0c <get_kern_value+0xa8>)
  413c98:	9300      	str	r3, [sp, #0]
  413c9a:	2302      	movs	r3, #2
  413c9c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  413ca0:	4629      	mov	r1, r5
  413ca2:	4e1b      	ldr	r6, [pc, #108]	; (413d10 <get_kern_value+0xac>)
  413ca4:	47b0      	blx	r6
            if(kid_p) {
  413ca6:	b120      	cbz	r0, 413cb2 <get_kern_value+0x4e>
                lv_uintptr_t ofs = kid_p - g_ids;
  413ca8:	1b43      	subs	r3, r0, r5
  413caa:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
  413cac:	6862      	ldr	r2, [r4, #4]
  413cae:	56d0      	ldrsb	r0, [r2, r3]
  413cb0:	e7e7      	b.n	413c82 <get_kern_value+0x1e>
    int8_t value = 0;
  413cb2:	2000      	movs	r0, #0
  413cb4:	e7e5      	b.n	413c82 <get_kern_value+0x1e>
            const uint32_t * g_ids = kdsc->glyph_ids;
  413cb6:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
  413cb8:	eb01 4202 	add.w	r2, r1, r2, lsl #16
  413cbc:	a804      	add	r0, sp, #16
  413cbe:	f840 2d04 	str.w	r2, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
  413cc2:	68a2      	ldr	r2, [r4, #8]
  413cc4:	4b13      	ldr	r3, [pc, #76]	; (413d14 <get_kern_value+0xb0>)
  413cc6:	9300      	str	r3, [sp, #0]
  413cc8:	2304      	movs	r3, #4
  413cca:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  413cce:	4629      	mov	r1, r5
  413cd0:	4e0f      	ldr	r6, [pc, #60]	; (413d10 <get_kern_value+0xac>)
  413cd2:	47b0      	blx	r6
            if(kid_p) {
  413cd4:	b120      	cbz	r0, 413ce0 <get_kern_value+0x7c>
                lv_uintptr_t ofs = kid_p - g_ids;
  413cd6:	1b43      	subs	r3, r0, r5
  413cd8:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
  413cda:	6862      	ldr	r2, [r4, #4]
  413cdc:	56d0      	ldrsb	r0, [r2, r3]
  413cde:	e7d0      	b.n	413c82 <get_kern_value+0x1e>
    int8_t value = 0;
  413ce0:	2000      	movs	r0, #0
  413ce2:	e7ce      	b.n	413c82 <get_kern_value+0x1e>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
  413ce4:	68d8      	ldr	r0, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
  413ce6:	6843      	ldr	r3, [r0, #4]
  413ce8:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
  413cea:	6881      	ldr	r1, [r0, #8]
  413cec:	5c8a      	ldrb	r2, [r1, r2]
        if(left_class > 0 && right_class > 0) {
  413cee:	2b00      	cmp	r3, #0
  413cf0:	bf18      	it	ne
  413cf2:	2a00      	cmpne	r2, #0
  413cf4:	d007      	beq.n	413d06 <get_kern_value+0xa2>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
  413cf6:	6801      	ldr	r1, [r0, #0]
  413cf8:	3b01      	subs	r3, #1
  413cfa:	7b40      	ldrb	r0, [r0, #13]
  413cfc:	3a01      	subs	r2, #1
  413cfe:	fb00 2303 	mla	r3, r0, r3, r2
  413d02:	56c8      	ldrsb	r0, [r1, r3]
  413d04:	4770      	bx	lr
    int8_t value = 0;
  413d06:	2000      	movs	r0, #0
  413d08:	4770      	bx	lr
  413d0a:	bf00      	nop
  413d0c:	00413b5d 	.word	0x00413b5d
  413d10:	00417fbd 	.word	0x00417fbd
  413d14:	00413b71 	.word	0x00413b71

00413d18 <decompress>:
{
  413d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413d1c:	b087      	sub	sp, #28
  413d1e:	460e      	mov	r6, r1
  413d20:	4614      	mov	r4, r2
  413d22:	9301      	str	r3, [sp, #4]
  413d24:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
  413d28:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  413d2c:	9304      	str	r3, [sp, #16]
    if(bpp == 3) wr_size = 4;
  413d2e:	2f03      	cmp	r7, #3
  413d30:	d018      	beq.n	413d64 <decompress+0x4c>
    uint8_t wr_size = bpp;
  413d32:	9702      	str	r7, [sp, #8]
    rle_in = in;
  413d34:	4ba8      	ldr	r3, [pc, #672]	; (413fd8 <decompress+0x2c0>)
  413d36:	6018      	str	r0, [r3, #0]
    rle_bpp = bpp;
  413d38:	4ba8      	ldr	r3, [pc, #672]	; (413fdc <decompress+0x2c4>)
  413d3a:	701f      	strb	r7, [r3, #0]
    rle_state = RLE_STATE_SINGLE;
  413d3c:	2300      	movs	r3, #0
  413d3e:	4aa8      	ldr	r2, [pc, #672]	; (413fe0 <decompress+0x2c8>)
  413d40:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
  413d42:	4aa8      	ldr	r2, [pc, #672]	; (413fe4 <decompress+0x2cc>)
  413d44:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
  413d46:	4aa8      	ldr	r2, [pc, #672]	; (413fe8 <decompress+0x2d0>)
  413d48:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
  413d4a:	4aa8      	ldr	r2, [pc, #672]	; (413fec <decompress+0x2d4>)
  413d4c:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
  413d4e:	4620      	mov	r0, r4
  413d50:	4ba7      	ldr	r3, [pc, #668]	; (413ff0 <decompress+0x2d8>)
  413d52:	4798      	blx	r3
  413d54:	4605      	mov	r5, r0
    if(prefilter) {
  413d56:	9b04      	ldr	r3, [sp, #16]
  413d58:	b93b      	cbnz	r3, 413d6a <decompress+0x52>
    uint8_t * line_buf2 = NULL;
  413d5a:	2300      	movs	r3, #0
  413d5c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < w; i++) {
  413d5e:	2000      	movs	r0, #0
  413d60:	46a6      	mov	lr, r4
  413d62:	e03a      	b.n	413dda <decompress+0xc2>
    if(bpp == 3) wr_size = 4;
  413d64:	2304      	movs	r3, #4
  413d66:	9302      	str	r3, [sp, #8]
  413d68:	e7e4      	b.n	413d34 <decompress+0x1c>
        line_buf2 = _lv_mem_buf_get(w);
  413d6a:	4620      	mov	r0, r4
  413d6c:	4ba0      	ldr	r3, [pc, #640]	; (413ff0 <decompress+0x2d8>)
  413d6e:	4798      	blx	r3
  413d70:	9003      	str	r0, [sp, #12]
  413d72:	e7f4      	b.n	413d5e <decompress+0x46>
            bit_mask = 0x1;
  413d74:	f04f 0801 	mov.w	r8, #1
  413d78:	e011      	b.n	413d9e <decompress+0x86>
            bit_mask = 0x7;
  413d7a:	f04f 0807 	mov.w	r8, #7
  413d7e:	e00e      	b.n	413d9e <decompress+0x86>
            bit_mask = 0xF;
  413d80:	f04f 080f 	mov.w	r8, #15
  413d84:	e00b      	b.n	413d9e <decompress+0x86>
            bit_mask = 0xFF;
  413d86:	f04f 08ff 	mov.w	r8, #255	; 0xff
  413d8a:	e008      	b.n	413d9e <decompress+0x86>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413d8c:	2301      	movs	r3, #1
  413d8e:	4093      	lsls	r3, r2
  413d90:	b2db      	uxtb	r3, r3
  413d92:	3b01      	subs	r3, #1
  413d94:	fa5f f883 	uxtb.w	r8, r3
  413d98:	e001      	b.n	413d9e <decompress+0x86>
            bit_mask = 0x3;
  413d9a:	f04f 0803 	mov.w	r8, #3
    uint32_t byte_pos = bit_pos >> 3;
  413d9e:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  413da0:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  413da4:	eb01 0902 	add.w	r9, r1, r2
  413da8:	f1b9 0f07 	cmp.w	r9, #7
  413dac:	d83c      	bhi.n	413e28 <decompress+0x110>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413dae:	f81a 3003 	ldrb.w	r3, [sl, r3]
  413db2:	4249      	negs	r1, r1
  413db4:	1a89      	subs	r1, r1, r2
  413db6:	3108      	adds	r1, #8
  413db8:	410b      	asrs	r3, r1
  413dba:	ea03 0308 	and.w	r3, r3, r8
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413dbe:	b11c      	cbz	r4, 413dc8 <decompress+0xb0>
  413dc0:	4989      	ldr	r1, [pc, #548]	; (413fe8 <decompress+0x2d0>)
  413dc2:	7809      	ldrb	r1, [r1, #0]
  413dc4:	4299      	cmp	r1, r3
  413dc6:	d03d      	beq.n	413e44 <decompress+0x12c>
        rle_prev_v = ret;
  413dc8:	4987      	ldr	r1, [pc, #540]	; (413fe8 <decompress+0x2d0>)
  413dca:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  413dcc:	4422      	add	r2, r4
  413dce:	4985      	ldr	r1, [pc, #532]	; (413fe4 <decompress+0x2cc>)
  413dd0:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  413dd2:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  413dd6:	3001      	adds	r0, #1
  413dd8:	b200      	sxth	r0, r0
  413dda:	4586      	cmp	lr, r0
  413ddc:	f340 8188 	ble.w	4140f0 <decompress+0x3d8>
        out[i] = rle_next();
  413de0:	eb05 0c00 	add.w	ip, r5, r0
    if(rle_state == RLE_STATE_SINGLE) {
  413de4:	4b7e      	ldr	r3, [pc, #504]	; (413fe0 <decompress+0x2c8>)
  413de6:	781b      	ldrb	r3, [r3, #0]
  413de8:	2b00      	cmp	r3, #0
  413dea:	d136      	bne.n	413e5a <decompress+0x142>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413dec:	4b7a      	ldr	r3, [pc, #488]	; (413fd8 <decompress+0x2c0>)
  413dee:	f8d3 a000 	ldr.w	sl, [r3]
  413df2:	4b7c      	ldr	r3, [pc, #496]	; (413fe4 <decompress+0x2cc>)
  413df4:	681c      	ldr	r4, [r3, #0]
  413df6:	4b79      	ldr	r3, [pc, #484]	; (413fdc <decompress+0x2c4>)
  413df8:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  413dfa:	1e51      	subs	r1, r2, #1
  413dfc:	2907      	cmp	r1, #7
  413dfe:	d8c5      	bhi.n	413d8c <decompress+0x74>
  413e00:	a301      	add	r3, pc, #4	; (adr r3, 413e08 <decompress+0xf0>)
  413e02:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
  413e06:	bf00      	nop
  413e08:	00413d75 	.word	0x00413d75
  413e0c:	00413d9b 	.word	0x00413d9b
  413e10:	00413d7b 	.word	0x00413d7b
  413e14:	00413d81 	.word	0x00413d81
  413e18:	00413d8d 	.word	0x00413d8d
  413e1c:	00413d8d 	.word	0x00413d8d
  413e20:	00413d8d 	.word	0x00413d8d
  413e24:	00413d87 	.word	0x00413d87
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413e28:	f81a 9003 	ldrb.w	r9, [sl, r3]
  413e2c:	4453      	add	r3, sl
  413e2e:	785b      	ldrb	r3, [r3, #1]
  413e30:	eb03 2309 	add.w	r3, r3, r9, lsl #8
  413e34:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413e36:	4249      	negs	r1, r1
  413e38:	1a89      	subs	r1, r1, r2
  413e3a:	3110      	adds	r1, #16
  413e3c:	410b      	asrs	r3, r1
  413e3e:	ea03 0308 	and.w	r3, r3, r8
  413e42:	e7bc      	b.n	413dbe <decompress+0xa6>
            rle_cnt = 0;
  413e44:	f04f 0800 	mov.w	r8, #0
  413e48:	4968      	ldr	r1, [pc, #416]	; (413fec <decompress+0x2d4>)
  413e4a:	f881 8000 	strb.w	r8, [r1]
            rle_state = RLE_STATE_REPEATE;
  413e4e:	f04f 0801 	mov.w	r8, #1
  413e52:	4963      	ldr	r1, [pc, #396]	; (413fe0 <decompress+0x2c8>)
  413e54:	f881 8000 	strb.w	r8, [r1]
  413e58:	e7b6      	b.n	413dc8 <decompress+0xb0>
    else if(rle_state == RLE_STATE_REPEATE) {
  413e5a:	2b01      	cmp	r3, #1
  413e5c:	d004      	beq.n	413e68 <decompress+0x150>
    else if(rle_state == RLE_STATE_COUNTER) {
  413e5e:	2b02      	cmp	r3, #2
  413e60:	f000 80f3 	beq.w	41404a <decompress+0x332>
    uint8_t ret = 0;
  413e64:	2300      	movs	r3, #0
  413e66:	e7b4      	b.n	413dd2 <decompress+0xba>
        v = get_bits(rle_in, rle_rdp, 1);
  413e68:	4b5b      	ldr	r3, [pc, #364]	; (413fd8 <decompress+0x2c0>)
  413e6a:	f8d3 8000 	ldr.w	r8, [r3]
  413e6e:	4b5d      	ldr	r3, [pc, #372]	; (413fe4 <decompress+0x2cc>)
  413e70:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  413e72:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  413e74:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413e78:	1c5c      	adds	r4, r3, #1
  413e7a:	2c07      	cmp	r4, #7
  413e7c:	d81d      	bhi.n	413eba <decompress+0x1a2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413e7e:	f818 1001 	ldrb.w	r1, [r8, r1]
  413e82:	f1c3 0307 	rsb	r3, r3, #7
  413e86:	fa41 f303 	asr.w	r3, r1, r3
  413e8a:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  413e8e:	4b57      	ldr	r3, [pc, #348]	; (413fec <decompress+0x2d4>)
  413e90:	781c      	ldrb	r4, [r3, #0]
  413e92:	3401      	adds	r4, #1
  413e94:	b2e4      	uxtb	r4, r4
  413e96:	701c      	strb	r4, [r3, #0]
        rle_rdp += 1;
  413e98:	3201      	adds	r2, #1
  413e9a:	4b52      	ldr	r3, [pc, #328]	; (413fe4 <decompress+0x2cc>)
  413e9c:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  413e9e:	2901      	cmp	r1, #1
  413ea0:	d018      	beq.n	413ed4 <decompress+0x1bc>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413ea2:	4b4e      	ldr	r3, [pc, #312]	; (413fdc <decompress+0x2c4>)
  413ea4:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  413ea6:	1e63      	subs	r3, r4, #1
  413ea8:	2b07      	cmp	r3, #7
  413eaa:	f200 808e 	bhi.w	413fca <decompress+0x2b2>
  413eae:	e8df f003 	tbb	[pc, r3]
  413eb2:	a184      	.short	0xa184
  413eb4:	8c8c8886 	.word	0x8c8c8886
  413eb8:	8a8c      	.short	0x8a8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413eba:	f818 4001 	ldrb.w	r4, [r8, r1]
  413ebe:	4441      	add	r1, r8
  413ec0:	7849      	ldrb	r1, [r1, #1]
  413ec2:	eb01 2104 	add.w	r1, r1, r4, lsl #8
  413ec6:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413ec8:	f1c3 030f 	rsb	r3, r3, #15
  413ecc:	4119      	asrs	r1, r3
  413ece:	f001 0101 	and.w	r1, r1, #1
  413ed2:	e7dc      	b.n	413e8e <decompress+0x176>
            ret = rle_prev_v;
  413ed4:	4b44      	ldr	r3, [pc, #272]	; (413fe8 <decompress+0x2d0>)
  413ed6:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  413ed8:	2c0b      	cmp	r4, #11
  413eda:	f47f af7a 	bne.w	413dd2 <decompress+0xba>
    uint32_t byte_pos = bit_pos >> 3;
  413ede:	08d4      	lsrs	r4, r2, #3
    bit_pos = bit_pos & 0x7;
  413ee0:	f002 0907 	and.w	r9, r2, #7
    if(bit_pos + len >= 8) {
  413ee4:	f109 0a06 	add.w	sl, r9, #6
  413ee8:	f1ba 0f07 	cmp.w	sl, #7
  413eec:	d815      	bhi.n	413f1a <decompress+0x202>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413eee:	f818 4004 	ldrb.w	r4, [r8, r4]
  413ef2:	f1c9 0902 	rsb	r9, r9, #2
  413ef6:	fa44 f409 	asr.w	r4, r4, r9
  413efa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  413efe:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 413fec <decompress+0x2d4>
  413f02:	f889 4000 	strb.w	r4, [r9]
                rle_rdp += 6;
  413f06:	3206      	adds	r2, #6
  413f08:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 413fe4 <decompress+0x2cc>
  413f0c:	f8c9 2000 	str.w	r2, [r9]
                if(rle_cnt != 0) {
  413f10:	b18c      	cbz	r4, 413f36 <decompress+0x21e>
                    rle_state = RLE_STATE_COUNTER;
  413f12:	2102      	movs	r1, #2
  413f14:	4a32      	ldr	r2, [pc, #200]	; (413fe0 <decompress+0x2c8>)
  413f16:	7011      	strb	r1, [r2, #0]
  413f18:	e75b      	b.n	413dd2 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413f1a:	f818 a004 	ldrb.w	sl, [r8, r4]
  413f1e:	4444      	add	r4, r8
  413f20:	7864      	ldrb	r4, [r4, #1]
  413f22:	eb04 240a 	add.w	r4, r4, sl, lsl #8
  413f26:	b2a4      	uxth	r4, r4
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413f28:	f1c9 090a 	rsb	r9, r9, #10
  413f2c:	fa44 f409 	asr.w	r4, r4, r9
  413f30:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  413f34:	e7e3      	b.n	413efe <decompress+0x1e6>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413f36:	4b29      	ldr	r3, [pc, #164]	; (413fdc <decompress+0x2c4>)
  413f38:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  413f3a:	1e63      	subs	r3, r4, #1
  413f3c:	2b07      	cmp	r3, #7
  413f3e:	d824      	bhi.n	413f8a <decompress+0x272>
  413f40:	e8df f003 	tbb	[pc, r3]
  413f44:	1f042905 	.word	0x1f042905
  413f48:	21232323 	.word	0x21232323
            bit_mask = 0x7;
  413f4c:	2107      	movs	r1, #7
    uint32_t byte_pos = bit_pos >> 3;
  413f4e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413f52:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413f56:	eb03 0a04 	add.w	sl, r3, r4
  413f5a:	f1ba 0f07 	cmp.w	sl, #7
  413f5e:	d81c      	bhi.n	413f9a <decompress+0x282>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413f60:	f818 8009 	ldrb.w	r8, [r8, r9]
  413f64:	425b      	negs	r3, r3
  413f66:	1b1b      	subs	r3, r3, r4
  413f68:	3308      	adds	r3, #8
  413f6a:	fa48 f303 	asr.w	r3, r8, r3
  413f6e:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  413f70:	491d      	ldr	r1, [pc, #116]	; (413fe8 <decompress+0x2d0>)
  413f72:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  413f74:	4422      	add	r2, r4
  413f76:	491b      	ldr	r1, [pc, #108]	; (413fe4 <decompress+0x2cc>)
  413f78:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  413f7a:	2100      	movs	r1, #0
  413f7c:	4a18      	ldr	r2, [pc, #96]	; (413fe0 <decompress+0x2c8>)
  413f7e:	7011      	strb	r1, [r2, #0]
  413f80:	e727      	b.n	413dd2 <decompress+0xba>
            bit_mask = 0xF;
  413f82:	210f      	movs	r1, #15
  413f84:	e7e3      	b.n	413f4e <decompress+0x236>
            bit_mask = 0xFF;
  413f86:	21ff      	movs	r1, #255	; 0xff
  413f88:	e7e1      	b.n	413f4e <decompress+0x236>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413f8a:	2101      	movs	r1, #1
  413f8c:	40a1      	lsls	r1, r4
  413f8e:	b2c9      	uxtb	r1, r1
  413f90:	3901      	subs	r1, #1
  413f92:	b2c9      	uxtb	r1, r1
  413f94:	e7db      	b.n	413f4e <decompress+0x236>
            bit_mask = 0x3;
  413f96:	2103      	movs	r1, #3
  413f98:	e7d9      	b.n	413f4e <decompress+0x236>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413f9a:	f818 a009 	ldrb.w	sl, [r8, r9]
  413f9e:	44c8      	add	r8, r9
  413fa0:	f898 8001 	ldrb.w	r8, [r8, #1]
  413fa4:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  413fa8:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413fac:	425b      	negs	r3, r3
  413fae:	1b1b      	subs	r3, r3, r4
  413fb0:	3310      	adds	r3, #16
  413fb2:	fa48 f303 	asr.w	r3, r8, r3
  413fb6:	400b      	ands	r3, r1
  413fb8:	e7da      	b.n	413f70 <decompress+0x258>
            bit_mask = 0x1;
  413fba:	2301      	movs	r3, #1
  413fbc:	e01b      	b.n	413ff6 <decompress+0x2de>
            bit_mask = 0x7;
  413fbe:	2307      	movs	r3, #7
  413fc0:	e019      	b.n	413ff6 <decompress+0x2de>
            bit_mask = 0xF;
  413fc2:	230f      	movs	r3, #15
  413fc4:	e017      	b.n	413ff6 <decompress+0x2de>
            bit_mask = 0xFF;
  413fc6:	23ff      	movs	r3, #255	; 0xff
  413fc8:	e015      	b.n	413ff6 <decompress+0x2de>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413fca:	2301      	movs	r3, #1
  413fcc:	40a3      	lsls	r3, r4
  413fce:	b2db      	uxtb	r3, r3
  413fd0:	3b01      	subs	r3, #1
  413fd2:	b2db      	uxtb	r3, r3
  413fd4:	e00f      	b.n	413ff6 <decompress+0x2de>
  413fd6:	bf00      	nop
  413fd8:	2040c7b0 	.word	0x2040c7b0
  413fdc:	2040c7ac 	.word	0x2040c7ac
  413fe0:	2040c7bc 	.word	0x2040c7bc
  413fe4:	2040c7b8 	.word	0x2040c7b8
  413fe8:	2040c7b4 	.word	0x2040c7b4
  413fec:	2040c7ad 	.word	0x2040c7ad
  413ff0:	00416965 	.word	0x00416965
            bit_mask = 0x3;
  413ff4:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413ff6:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413ffa:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  413ffe:	eb01 0a04 	add.w	sl, r1, r4
  414002:	f1ba 0f07 	cmp.w	sl, #7
  414006:	d810      	bhi.n	41402a <decompress+0x312>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414008:	f818 8009 	ldrb.w	r8, [r8, r9]
  41400c:	4249      	negs	r1, r1
  41400e:	1b09      	subs	r1, r1, r4
  414010:	3108      	adds	r1, #8
  414012:	fa48 f101 	asr.w	r1, r8, r1
  414016:	400b      	ands	r3, r1
            rle_prev_v = ret;
  414018:	49b4      	ldr	r1, [pc, #720]	; (4142ec <decompress+0x5d4>)
  41401a:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  41401c:	4422      	add	r2, r4
  41401e:	49b4      	ldr	r1, [pc, #720]	; (4142f0 <decompress+0x5d8>)
  414020:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414022:	2100      	movs	r1, #0
  414024:	4ab3      	ldr	r2, [pc, #716]	; (4142f4 <decompress+0x5dc>)
  414026:	7011      	strb	r1, [r2, #0]
  414028:	e6d3      	b.n	413dd2 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41402a:	f818 a009 	ldrb.w	sl, [r8, r9]
  41402e:	44c8      	add	r8, r9
  414030:	f898 8001 	ldrb.w	r8, [r8, #1]
  414034:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  414038:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41403c:	4249      	negs	r1, r1
  41403e:	1b09      	subs	r1, r1, r4
  414040:	3110      	adds	r1, #16
  414042:	fa48 f101 	asr.w	r1, r8, r1
  414046:	400b      	ands	r3, r1
  414048:	e7e6      	b.n	414018 <decompress+0x300>
        ret = rle_prev_v;
  41404a:	4ba8      	ldr	r3, [pc, #672]	; (4142ec <decompress+0x5d4>)
  41404c:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  41404e:	49aa      	ldr	r1, [pc, #680]	; (4142f8 <decompress+0x5e0>)
  414050:	780a      	ldrb	r2, [r1, #0]
  414052:	3a01      	subs	r2, #1
  414054:	b2d2      	uxtb	r2, r2
  414056:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  414058:	2a00      	cmp	r2, #0
  41405a:	f47f aeba 	bne.w	413dd2 <decompress+0xba>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41405e:	4ba7      	ldr	r3, [pc, #668]	; (4142fc <decompress+0x5e4>)
  414060:	f8d3 a000 	ldr.w	sl, [r3]
  414064:	4ba2      	ldr	r3, [pc, #648]	; (4142f0 <decompress+0x5d8>)
  414066:	681c      	ldr	r4, [r3, #0]
  414068:	4ba5      	ldr	r3, [pc, #660]	; (414300 <decompress+0x5e8>)
  41406a:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  41406c:	1e53      	subs	r3, r2, #1
  41406e:	2b07      	cmp	r3, #7
  414070:	d80d      	bhi.n	41408e <decompress+0x376>
  414072:	e8df f003 	tbb	[pc, r3]
  414076:	1204      	.short	0x1204
  414078:	0c0c0806 	.word	0x0c0c0806
  41407c:	0a0c      	.short	0x0a0c
            bit_mask = 0x1;
  41407e:	2301      	movs	r3, #1
  414080:	e00c      	b.n	41409c <decompress+0x384>
            bit_mask = 0x7;
  414082:	2307      	movs	r3, #7
  414084:	e00a      	b.n	41409c <decompress+0x384>
            bit_mask = 0xF;
  414086:	230f      	movs	r3, #15
  414088:	e008      	b.n	41409c <decompress+0x384>
            bit_mask = 0xFF;
  41408a:	23ff      	movs	r3, #255	; 0xff
  41408c:	e006      	b.n	41409c <decompress+0x384>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41408e:	2301      	movs	r3, #1
  414090:	4093      	lsls	r3, r2
  414092:	b2db      	uxtb	r3, r3
  414094:	3b01      	subs	r3, #1
  414096:	b2db      	uxtb	r3, r3
  414098:	e000      	b.n	41409c <decompress+0x384>
            bit_mask = 0x3;
  41409a:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  41409c:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    bit_pos = bit_pos & 0x7;
  4140a0:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  4140a4:	eb01 0902 	add.w	r9, r1, r2
  4140a8:	f1b9 0f07 	cmp.w	r9, #7
  4140ac:	d810      	bhi.n	4140d0 <decompress+0x3b8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4140ae:	f81a 8008 	ldrb.w	r8, [sl, r8]
  4140b2:	4249      	negs	r1, r1
  4140b4:	1a89      	subs	r1, r1, r2
  4140b6:	3108      	adds	r1, #8
  4140b8:	fa48 f101 	asr.w	r1, r8, r1
  4140bc:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4140be:	498b      	ldr	r1, [pc, #556]	; (4142ec <decompress+0x5d4>)
  4140c0:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  4140c2:	4422      	add	r2, r4
  4140c4:	498a      	ldr	r1, [pc, #552]	; (4142f0 <decompress+0x5d8>)
  4140c6:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  4140c8:	2100      	movs	r1, #0
  4140ca:	4a8a      	ldr	r2, [pc, #552]	; (4142f4 <decompress+0x5dc>)
  4140cc:	7011      	strb	r1, [r2, #0]
  4140ce:	e680      	b.n	413dd2 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4140d0:	f81a 9008 	ldrb.w	r9, [sl, r8]
  4140d4:	44d0      	add	r8, sl
  4140d6:	f898 8001 	ldrb.w	r8, [r8, #1]
  4140da:	eb08 2809 	add.w	r8, r8, r9, lsl #8
  4140de:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4140e2:	4249      	negs	r1, r1
  4140e4:	1a89      	subs	r1, r1, r2
  4140e6:	3110      	adds	r1, #16
  4140e8:	fa48 f101 	asr.w	r1, r8, r1
  4140ec:	400b      	ands	r3, r1
  4140ee:	e7e6      	b.n	4140be <decompress+0x3a6>
  4140f0:	4674      	mov	r4, lr
    for(i = 0; i < w; i++) {
  4140f2:	f04f 0c00 	mov.w	ip, #0
  4140f6:	4660      	mov	r0, ip
  4140f8:	f8dd e008 	ldr.w	lr, [sp, #8]
  4140fc:	e048      	b.n	414190 <decompress+0x478>
        switch(val) {
  4140fe:	2907      	cmp	r1, #7
  414100:	d805      	bhi.n	41410e <decompress+0x3f6>
  414102:	e8df f001 	tbb	[pc, r1]
  414106:	0723      	.short	0x0723
  414108:	17130f0b 	.word	0x17130f0b
  41410c:	1f1b      	.short	0x1f1b
        len = 4;
  41410e:	f04f 0804 	mov.w	r8, #4
  414112:	e01e      	b.n	414152 <decompress+0x43a>
  414114:	f04f 0804 	mov.w	r8, #4
                val = 2;
  414118:	2102      	movs	r1, #2
  41411a:	e01a      	b.n	414152 <decompress+0x43a>
        len = 4;
  41411c:	f04f 0804 	mov.w	r8, #4
                val = 4;
  414120:	4641      	mov	r1, r8
  414122:	e016      	b.n	414152 <decompress+0x43a>
        len = 4;
  414124:	f04f 0804 	mov.w	r8, #4
                val = 6;
  414128:	2106      	movs	r1, #6
  41412a:	e012      	b.n	414152 <decompress+0x43a>
        len = 4;
  41412c:	f04f 0804 	mov.w	r8, #4
                val = 9;
  414130:	2109      	movs	r1, #9
  414132:	e00e      	b.n	414152 <decompress+0x43a>
        len = 4;
  414134:	f04f 0804 	mov.w	r8, #4
                val = 11;
  414138:	210b      	movs	r1, #11
  41413a:	e00a      	b.n	414152 <decompress+0x43a>
        len = 4;
  41413c:	f04f 0804 	mov.w	r8, #4
                val = 13;
  414140:	210d      	movs	r1, #13
  414142:	e006      	b.n	414152 <decompress+0x43a>
        len = 4;
  414144:	f04f 0804 	mov.w	r8, #4
                val = 15;
  414148:	210f      	movs	r1, #15
  41414a:	e002      	b.n	414152 <decompress+0x43a>
        len = 4;
  41414c:	f04f 0804 	mov.w	r8, #4
                val = 0;
  414150:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  414152:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  414156:	4252      	negs	r2, r2
  414158:	eba2 0208 	sub.w	r2, r2, r8
  41415c:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41415e:	2301      	movs	r3, #1
  414160:	fa03 f308 	lsl.w	r3, r3, r8
  414164:	b2db      	uxtb	r3, r3
  414166:	3b01      	subs	r3, #1
  414168:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  41416a:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  41416e:	43db      	mvns	r3, r3
  414170:	4093      	lsls	r3, r2
  414172:	f816 9008 	ldrb.w	r9, [r6, r8]
  414176:	ea09 0303 	and.w	r3, r9, r3
  41417a:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  41417c:	fa01 f202 	lsl.w	r2, r1, r2
  414180:	431a      	orrs	r2, r3
  414182:	f806 2008 	strb.w	r2, [r6, r8]
        wrp += wr_size;
  414186:	4470      	add	r0, lr
    for(x = 0; x < w; x++) {
  414188:	f10c 0c01 	add.w	ip, ip, #1
  41418c:	fa0f fc8c 	sxth.w	ip, ip
  414190:	45a4      	cmp	ip, r4
  414192:	da05      	bge.n	4141a0 <decompress+0x488>
        bits_write(out, wrp, line_buf1[x], bpp);
  414194:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  414198:	2f03      	cmp	r7, #3
  41419a:	d0b0      	beq.n	4140fe <decompress+0x3e6>
  41419c:	46b8      	mov	r8, r7
  41419e:	e7d8      	b.n	414152 <decompress+0x43a>
  4141a0:	2301      	movs	r3, #1
  4141a2:	9300      	str	r3, [sp, #0]
  4141a4:	f000 bc62 	b.w	414a6c <decompress+0xd54>
            bit_mask = 0x1;
  4141a8:	2301      	movs	r3, #1
  4141aa:	e00c      	b.n	4141c6 <decompress+0x4ae>
            bit_mask = 0x7;
  4141ac:	2307      	movs	r3, #7
  4141ae:	e00a      	b.n	4141c6 <decompress+0x4ae>
            bit_mask = 0xF;
  4141b0:	230f      	movs	r3, #15
  4141b2:	e008      	b.n	4141c6 <decompress+0x4ae>
            bit_mask = 0xFF;
  4141b4:	23ff      	movs	r3, #255	; 0xff
  4141b6:	e006      	b.n	4141c6 <decompress+0x4ae>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4141b8:	2301      	movs	r3, #1
  4141ba:	408b      	lsls	r3, r1
  4141bc:	b2db      	uxtb	r3, r3
  4141be:	3b01      	subs	r3, #1
  4141c0:	b2db      	uxtb	r3, r3
  4141c2:	e000      	b.n	4141c6 <decompress+0x4ae>
            bit_mask = 0x3;
  4141c4:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4141c6:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  4141ca:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  4141ce:	eb02 0b01 	add.w	fp, r2, r1
  4141d2:	f1bb 0f07 	cmp.w	fp, #7
  4141d6:	d83d      	bhi.n	414254 <decompress+0x53c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4141d8:	f81a 8008 	ldrb.w	r8, [sl, r8]
  4141dc:	4252      	negs	r2, r2
  4141de:	1a52      	subs	r2, r2, r1
  4141e0:	3208      	adds	r2, #8
  4141e2:	fa48 f202 	asr.w	r2, r8, r2
  4141e6:	4013      	ands	r3, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
  4141e8:	b118      	cbz	r0, 4141f2 <decompress+0x4da>
  4141ea:	4a40      	ldr	r2, [pc, #256]	; (4142ec <decompress+0x5d4>)
  4141ec:	7812      	ldrb	r2, [r2, #0]
  4141ee:	429a      	cmp	r2, r3
  4141f0:	d041      	beq.n	414276 <decompress+0x55e>
        rle_prev_v = ret;
  4141f2:	4a3e      	ldr	r2, [pc, #248]	; (4142ec <decompress+0x5d4>)
  4141f4:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
  4141f6:	4401      	add	r1, r0
  4141f8:	4a3d      	ldr	r2, [pc, #244]	; (4142f0 <decompress+0x5d8>)
  4141fa:	6011      	str	r1, [r2, #0]
        out[i] = rle_next();
  4141fc:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  414200:	f10e 0e01 	add.w	lr, lr, #1
  414204:	fa0f fe8e 	sxth.w	lr, lr
  414208:	4574      	cmp	r4, lr
  41420a:	f340 8191 	ble.w	414530 <decompress+0x818>
        out[i] = rle_next();
  41420e:	eb09 0c0e 	add.w	ip, r9, lr
    if(rle_state == RLE_STATE_SINGLE) {
  414212:	4b38      	ldr	r3, [pc, #224]	; (4142f4 <decompress+0x5dc>)
  414214:	781b      	ldrb	r3, [r3, #0]
  414216:	2b00      	cmp	r3, #0
  414218:	d138      	bne.n	41428c <decompress+0x574>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41421a:	4b38      	ldr	r3, [pc, #224]	; (4142fc <decompress+0x5e4>)
  41421c:	f8d3 a000 	ldr.w	sl, [r3]
  414220:	4b33      	ldr	r3, [pc, #204]	; (4142f0 <decompress+0x5d8>)
  414222:	6818      	ldr	r0, [r3, #0]
  414224:	4b36      	ldr	r3, [pc, #216]	; (414300 <decompress+0x5e8>)
  414226:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  414228:	1e4b      	subs	r3, r1, #1
  41422a:	2b07      	cmp	r3, #7
  41422c:	d8c4      	bhi.n	4141b8 <decompress+0x4a0>
  41422e:	a201      	add	r2, pc, #4	; (adr r2, 414234 <decompress+0x51c>)
  414230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  414234:	004141a9 	.word	0x004141a9
  414238:	004141c5 	.word	0x004141c5
  41423c:	004141ad 	.word	0x004141ad
  414240:	004141b1 	.word	0x004141b1
  414244:	004141b9 	.word	0x004141b9
  414248:	004141b9 	.word	0x004141b9
  41424c:	004141b9 	.word	0x004141b9
  414250:	004141b5 	.word	0x004141b5
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414254:	f81a b008 	ldrb.w	fp, [sl, r8]
  414258:	44d0      	add	r8, sl
  41425a:	f898 8001 	ldrb.w	r8, [r8, #1]
  41425e:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  414262:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414266:	4252      	negs	r2, r2
  414268:	1a52      	subs	r2, r2, r1
  41426a:	3210      	adds	r2, #16
  41426c:	fa4b fb02 	asr.w	fp, fp, r2
  414270:	ea0b 0303 	and.w	r3, fp, r3
  414274:	e7b8      	b.n	4141e8 <decompress+0x4d0>
            rle_cnt = 0;
  414276:	f04f 0800 	mov.w	r8, #0
  41427a:	4a1f      	ldr	r2, [pc, #124]	; (4142f8 <decompress+0x5e0>)
  41427c:	f882 8000 	strb.w	r8, [r2]
            rle_state = RLE_STATE_REPEATE;
  414280:	f04f 0801 	mov.w	r8, #1
  414284:	4a1b      	ldr	r2, [pc, #108]	; (4142f4 <decompress+0x5dc>)
  414286:	f882 8000 	strb.w	r8, [r2]
  41428a:	e7b2      	b.n	4141f2 <decompress+0x4da>
    else if(rle_state == RLE_STATE_REPEATE) {
  41428c:	2b01      	cmp	r3, #1
  41428e:	d004      	beq.n	41429a <decompress+0x582>
    else if(rle_state == RLE_STATE_COUNTER) {
  414290:	2b02      	cmp	r3, #2
  414292:	f000 80f3 	beq.w	41447c <decompress+0x764>
    uint8_t ret = 0;
  414296:	2300      	movs	r3, #0
  414298:	e7b0      	b.n	4141fc <decompress+0x4e4>
        v = get_bits(rle_in, rle_rdp, 1);
  41429a:	4b18      	ldr	r3, [pc, #96]	; (4142fc <decompress+0x5e4>)
  41429c:	f8d3 8000 	ldr.w	r8, [r3]
  4142a0:	4b13      	ldr	r3, [pc, #76]	; (4142f0 <decompress+0x5d8>)
  4142a2:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  4142a4:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  4142a6:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4142aa:	1c58      	adds	r0, r3, #1
  4142ac:	2807      	cmp	r0, #7
  4142ae:	d829      	bhi.n	414304 <decompress+0x5ec>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4142b0:	f818 1001 	ldrb.w	r1, [r8, r1]
  4142b4:	f1c3 0307 	rsb	r3, r3, #7
  4142b8:	fa41 f303 	asr.w	r3, r1, r3
  4142bc:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  4142c0:	4b0d      	ldr	r3, [pc, #52]	; (4142f8 <decompress+0x5e0>)
  4142c2:	7818      	ldrb	r0, [r3, #0]
  4142c4:	3001      	adds	r0, #1
  4142c6:	b2c0      	uxtb	r0, r0
  4142c8:	7018      	strb	r0, [r3, #0]
        rle_rdp += 1;
  4142ca:	3201      	adds	r2, #1
  4142cc:	4b08      	ldr	r3, [pc, #32]	; (4142f0 <decompress+0x5d8>)
  4142ce:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  4142d0:	2901      	cmp	r1, #1
  4142d2:	d024      	beq.n	41431e <decompress+0x606>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4142d4:	4b0a      	ldr	r3, [pc, #40]	; (414300 <decompress+0x5e8>)
  4142d6:	7818      	ldrb	r0, [r3, #0]
    switch(len) {
  4142d8:	1e43      	subs	r3, r0, #1
  4142da:	2b07      	cmp	r3, #7
  4142dc:	f200 809c 	bhi.w	414418 <decompress+0x700>
  4142e0:	e8df f003 	tbb	[pc, r3]
  4142e4:	9694a092 	.word	0x9694a092
  4142e8:	989a9a9a 	.word	0x989a9a9a
  4142ec:	2040c7b4 	.word	0x2040c7b4
  4142f0:	2040c7b8 	.word	0x2040c7b8
  4142f4:	2040c7bc 	.word	0x2040c7bc
  4142f8:	2040c7ad 	.word	0x2040c7ad
  4142fc:	2040c7b0 	.word	0x2040c7b0
  414300:	2040c7ac 	.word	0x2040c7ac
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414304:	f818 0001 	ldrb.w	r0, [r8, r1]
  414308:	4441      	add	r1, r8
  41430a:	7849      	ldrb	r1, [r1, #1]
  41430c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  414310:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414312:	f1c3 030f 	rsb	r3, r3, #15
  414316:	4119      	asrs	r1, r3
  414318:	f001 0101 	and.w	r1, r1, #1
  41431c:	e7d0      	b.n	4142c0 <decompress+0x5a8>
            ret = rle_prev_v;
  41431e:	4bb8      	ldr	r3, [pc, #736]	; (414600 <decompress+0x8e8>)
  414320:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  414322:	280b      	cmp	r0, #11
  414324:	f47f af6a 	bne.w	4141fc <decompress+0x4e4>
    uint32_t byte_pos = bit_pos >> 3;
  414328:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  41432a:	f002 0a07 	and.w	sl, r2, #7
    if(bit_pos + len >= 8) {
  41432e:	f10a 0b06 	add.w	fp, sl, #6
  414332:	f1bb 0f07 	cmp.w	fp, #7
  414336:	d815      	bhi.n	414364 <decompress+0x64c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414338:	f818 0000 	ldrb.w	r0, [r8, r0]
  41433c:	f1ca 0a02 	rsb	sl, sl, #2
  414340:	fa40 f00a 	asr.w	r0, r0, sl
  414344:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  414348:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 414610 <decompress+0x8f8>
  41434c:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
  414350:	3206      	adds	r2, #6
  414352:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 41460c <decompress+0x8f4>
  414356:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  41435a:	b188      	cbz	r0, 414380 <decompress+0x668>
                    rle_state = RLE_STATE_COUNTER;
  41435c:	2102      	movs	r1, #2
  41435e:	4aa9      	ldr	r2, [pc, #676]	; (414604 <decompress+0x8ec>)
  414360:	7011      	strb	r1, [r2, #0]
  414362:	e74b      	b.n	4141fc <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414364:	f818 b000 	ldrb.w	fp, [r8, r0]
  414368:	4440      	add	r0, r8
  41436a:	7840      	ldrb	r0, [r0, #1]
  41436c:	eb00 200b 	add.w	r0, r0, fp, lsl #8
  414370:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414372:	f1ca 0a0a 	rsb	sl, sl, #10
  414376:	fa40 f00a 	asr.w	r0, r0, sl
  41437a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  41437e:	e7e3      	b.n	414348 <decompress+0x630>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414380:	4ba1      	ldr	r3, [pc, #644]	; (414608 <decompress+0x8f0>)
  414382:	f893 b000 	ldrb.w	fp, [r3]
    switch(len) {
  414386:	f10b 33ff 	add.w	r3, fp, #4294967295
  41438a:	2b07      	cmp	r3, #7
  41438c:	d80b      	bhi.n	4143a6 <decompress+0x68e>
  41438e:	e8df f003 	tbb	[pc, r3]
  414392:	1112      	.short	0x1112
  414394:	0a0a0604 	.word	0x0a0a0604
  414398:	080a      	.short	0x080a
            bit_mask = 0x7;
  41439a:	2107      	movs	r1, #7
  41439c:	e00b      	b.n	4143b6 <decompress+0x69e>
            bit_mask = 0xF;
  41439e:	210f      	movs	r1, #15
  4143a0:	e009      	b.n	4143b6 <decompress+0x69e>
            bit_mask = 0xFF;
  4143a2:	21ff      	movs	r1, #255	; 0xff
  4143a4:	e007      	b.n	4143b6 <decompress+0x69e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4143a6:	2101      	movs	r1, #1
  4143a8:	fa01 f10b 	lsl.w	r1, r1, fp
  4143ac:	b2c9      	uxtb	r1, r1
  4143ae:	3901      	subs	r1, #1
  4143b0:	b2c9      	uxtb	r1, r1
  4143b2:	e000      	b.n	4143b6 <decompress+0x69e>
            bit_mask = 0x3;
  4143b4:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  4143b6:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  4143b8:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4143bc:	eb03 0a0b 	add.w	sl, r3, fp
  4143c0:	f1ba 0f07 	cmp.w	sl, #7
  4143c4:	d811      	bhi.n	4143ea <decompress+0x6d2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4143c6:	f818 0000 	ldrb.w	r0, [r8, r0]
  4143ca:	425b      	negs	r3, r3
  4143cc:	eba3 030b 	sub.w	r3, r3, fp
  4143d0:	3308      	adds	r3, #8
  4143d2:	fa40 f303 	asr.w	r3, r0, r3
  4143d6:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  4143d8:	4989      	ldr	r1, [pc, #548]	; (414600 <decompress+0x8e8>)
  4143da:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  4143dc:	445a      	add	r2, fp
  4143de:	498b      	ldr	r1, [pc, #556]	; (41460c <decompress+0x8f4>)
  4143e0:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  4143e2:	2100      	movs	r1, #0
  4143e4:	4a87      	ldr	r2, [pc, #540]	; (414604 <decompress+0x8ec>)
  4143e6:	7011      	strb	r1, [r2, #0]
  4143e8:	e708      	b.n	4141fc <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4143ea:	f818 a000 	ldrb.w	sl, [r8, r0]
  4143ee:	4440      	add	r0, r8
  4143f0:	7840      	ldrb	r0, [r0, #1]
  4143f2:	eb00 200a 	add.w	r0, r0, sl, lsl #8
  4143f6:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4143f8:	425b      	negs	r3, r3
  4143fa:	eba3 030b 	sub.w	r3, r3, fp
  4143fe:	3310      	adds	r3, #16
  414400:	fa40 f303 	asr.w	r3, r0, r3
  414404:	400b      	ands	r3, r1
  414406:	e7e7      	b.n	4143d8 <decompress+0x6c0>
            bit_mask = 0x1;
  414408:	2301      	movs	r3, #1
  41440a:	e00c      	b.n	414426 <decompress+0x70e>
            bit_mask = 0x7;
  41440c:	2307      	movs	r3, #7
  41440e:	e00a      	b.n	414426 <decompress+0x70e>
            bit_mask = 0xF;
  414410:	230f      	movs	r3, #15
  414412:	e008      	b.n	414426 <decompress+0x70e>
            bit_mask = 0xFF;
  414414:	23ff      	movs	r3, #255	; 0xff
  414416:	e006      	b.n	414426 <decompress+0x70e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414418:	2301      	movs	r3, #1
  41441a:	4083      	lsls	r3, r0
  41441c:	b2db      	uxtb	r3, r3
  41441e:	3b01      	subs	r3, #1
  414420:	b2db      	uxtb	r3, r3
  414422:	e000      	b.n	414426 <decompress+0x70e>
            bit_mask = 0x3;
  414424:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  414426:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41442a:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  41442e:	eb01 0b00 	add.w	fp, r1, r0
  414432:	f1bb 0f07 	cmp.w	fp, #7
  414436:	d810      	bhi.n	41445a <decompress+0x742>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414438:	f818 800a 	ldrb.w	r8, [r8, sl]
  41443c:	4249      	negs	r1, r1
  41443e:	1a09      	subs	r1, r1, r0
  414440:	3108      	adds	r1, #8
  414442:	fa48 f101 	asr.w	r1, r8, r1
  414446:	400b      	ands	r3, r1
            rle_prev_v = ret;
  414448:	496d      	ldr	r1, [pc, #436]	; (414600 <decompress+0x8e8>)
  41444a:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  41444c:	4402      	add	r2, r0
  41444e:	496f      	ldr	r1, [pc, #444]	; (41460c <decompress+0x8f4>)
  414450:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414452:	2100      	movs	r1, #0
  414454:	4a6b      	ldr	r2, [pc, #428]	; (414604 <decompress+0x8ec>)
  414456:	7011      	strb	r1, [r2, #0]
  414458:	e6d0      	b.n	4141fc <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41445a:	f818 b00a 	ldrb.w	fp, [r8, sl]
  41445e:	44d0      	add	r8, sl
  414460:	f898 8001 	ldrb.w	r8, [r8, #1]
  414464:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  414468:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41446c:	4249      	negs	r1, r1
  41446e:	1a09      	subs	r1, r1, r0
  414470:	3110      	adds	r1, #16
  414472:	fa4b fb01 	asr.w	fp, fp, r1
  414476:	ea0b 0303 	and.w	r3, fp, r3
  41447a:	e7e5      	b.n	414448 <decompress+0x730>
        ret = rle_prev_v;
  41447c:	4b60      	ldr	r3, [pc, #384]	; (414600 <decompress+0x8e8>)
  41447e:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  414480:	4963      	ldr	r1, [pc, #396]	; (414610 <decompress+0x8f8>)
  414482:	780a      	ldrb	r2, [r1, #0]
  414484:	3a01      	subs	r2, #1
  414486:	b2d2      	uxtb	r2, r2
  414488:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  41448a:	2a00      	cmp	r2, #0
  41448c:	f47f aeb6 	bne.w	4141fc <decompress+0x4e4>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414490:	4b60      	ldr	r3, [pc, #384]	; (414614 <decompress+0x8fc>)
  414492:	f8d3 a000 	ldr.w	sl, [r3]
  414496:	4b5d      	ldr	r3, [pc, #372]	; (41460c <decompress+0x8f4>)
  414498:	6818      	ldr	r0, [r3, #0]
  41449a:	4b5b      	ldr	r3, [pc, #364]	; (414608 <decompress+0x8f0>)
  41449c:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  41449e:	1e4b      	subs	r3, r1, #1
  4144a0:	2b07      	cmp	r3, #7
  4144a2:	d80d      	bhi.n	4144c0 <decompress+0x7a8>
  4144a4:	e8df f003 	tbb	[pc, r3]
  4144a8:	08061204 	.word	0x08061204
  4144ac:	0a0c0c0c 	.word	0x0a0c0c0c
            bit_mask = 0x1;
  4144b0:	2301      	movs	r3, #1
  4144b2:	e00c      	b.n	4144ce <decompress+0x7b6>
            bit_mask = 0x7;
  4144b4:	2307      	movs	r3, #7
  4144b6:	e00a      	b.n	4144ce <decompress+0x7b6>
            bit_mask = 0xF;
  4144b8:	230f      	movs	r3, #15
  4144ba:	e008      	b.n	4144ce <decompress+0x7b6>
            bit_mask = 0xFF;
  4144bc:	23ff      	movs	r3, #255	; 0xff
  4144be:	e006      	b.n	4144ce <decompress+0x7b6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4144c0:	2301      	movs	r3, #1
  4144c2:	408b      	lsls	r3, r1
  4144c4:	b2db      	uxtb	r3, r3
  4144c6:	3b01      	subs	r3, #1
  4144c8:	b2db      	uxtb	r3, r3
  4144ca:	e000      	b.n	4144ce <decompress+0x7b6>
            bit_mask = 0x3;
  4144cc:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4144ce:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  4144d2:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  4144d6:	eb02 0b01 	add.w	fp, r2, r1
  4144da:	f1bb 0f07 	cmp.w	fp, #7
  4144de:	d810      	bhi.n	414502 <decompress+0x7ea>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4144e0:	f81a 8008 	ldrb.w	r8, [sl, r8]
  4144e4:	4252      	negs	r2, r2
  4144e6:	1a52      	subs	r2, r2, r1
  4144e8:	3208      	adds	r2, #8
  4144ea:	fa48 f202 	asr.w	r2, r8, r2
  4144ee:	4013      	ands	r3, r2
            rle_prev_v = ret;
  4144f0:	4a43      	ldr	r2, [pc, #268]	; (414600 <decompress+0x8e8>)
  4144f2:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  4144f4:	4401      	add	r1, r0
  4144f6:	4a45      	ldr	r2, [pc, #276]	; (41460c <decompress+0x8f4>)
  4144f8:	6011      	str	r1, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
  4144fa:	2100      	movs	r1, #0
  4144fc:	4a41      	ldr	r2, [pc, #260]	; (414604 <decompress+0x8ec>)
  4144fe:	7011      	strb	r1, [r2, #0]
  414500:	e67c      	b.n	4141fc <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414502:	f81a b008 	ldrb.w	fp, [sl, r8]
  414506:	44d0      	add	r8, sl
  414508:	f898 8001 	ldrb.w	r8, [r8, #1]
  41450c:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  414510:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414514:	4252      	negs	r2, r2
  414516:	1a52      	subs	r2, r2, r1
  414518:	3210      	adds	r2, #16
  41451a:	fa4b fb02 	asr.w	fp, fp, r2
  41451e:	ea0b 0303 	and.w	r3, fp, r3
  414522:	e7e5      	b.n	4144f0 <decompress+0x7d8>
  414524:	f04f 0e00 	mov.w	lr, #0
  414528:	9005      	str	r0, [sp, #20]
  41452a:	f8dd 900c 	ldr.w	r9, [sp, #12]
  41452e:	e66b      	b.n	414208 <decompress+0x4f0>
  414530:	9805      	ldr	r0, [sp, #20]
    for(i = 0; i < w; i++) {
  414532:	f04f 0c00 	mov.w	ip, #0
  414536:	f8dd e008 	ldr.w	lr, [sp, #8]
  41453a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  41453e:	e048      	b.n	4145d2 <decompress+0x8ba>
        switch(val) {
  414540:	2907      	cmp	r1, #7
  414542:	d805      	bhi.n	414550 <decompress+0x838>
  414544:	e8df f001 	tbb	[pc, r1]
  414548:	0f0b0723 	.word	0x0f0b0723
  41454c:	1f1b1713 	.word	0x1f1b1713
        len = 4;
  414550:	f04f 0904 	mov.w	r9, #4
  414554:	e01e      	b.n	414594 <decompress+0x87c>
  414556:	f04f 0904 	mov.w	r9, #4
                val = 2;
  41455a:	2102      	movs	r1, #2
  41455c:	e01a      	b.n	414594 <decompress+0x87c>
        len = 4;
  41455e:	f04f 0904 	mov.w	r9, #4
                val = 4;
  414562:	4649      	mov	r1, r9
  414564:	e016      	b.n	414594 <decompress+0x87c>
        len = 4;
  414566:	f04f 0904 	mov.w	r9, #4
                val = 6;
  41456a:	2106      	movs	r1, #6
  41456c:	e012      	b.n	414594 <decompress+0x87c>
        len = 4;
  41456e:	f04f 0904 	mov.w	r9, #4
                val = 9;
  414572:	2109      	movs	r1, #9
  414574:	e00e      	b.n	414594 <decompress+0x87c>
        len = 4;
  414576:	f04f 0904 	mov.w	r9, #4
                val = 11;
  41457a:	210b      	movs	r1, #11
  41457c:	e00a      	b.n	414594 <decompress+0x87c>
        len = 4;
  41457e:	f04f 0904 	mov.w	r9, #4
                val = 13;
  414582:	210d      	movs	r1, #13
  414584:	e006      	b.n	414594 <decompress+0x87c>
        len = 4;
  414586:	f04f 0904 	mov.w	r9, #4
                val = 15;
  41458a:	210f      	movs	r1, #15
  41458c:	e002      	b.n	414594 <decompress+0x87c>
        len = 4;
  41458e:	f04f 0904 	mov.w	r9, #4
                val = 0;
  414592:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  414594:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  414598:	4252      	negs	r2, r2
  41459a:	eba2 0209 	sub.w	r2, r2, r9
  41459e:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4145a0:	2301      	movs	r3, #1
  4145a2:	fa03 f309 	lsl.w	r3, r3, r9
  4145a6:	b2db      	uxtb	r3, r3
  4145a8:	3b01      	subs	r3, #1
  4145aa:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  4145ac:	f3c0 09cf 	ubfx	r9, r0, #3, #16
  4145b0:	43db      	mvns	r3, r3
  4145b2:	4093      	lsls	r3, r2
  4145b4:	f816 a009 	ldrb.w	sl, [r6, r9]
  4145b8:	ea0a 0303 	and.w	r3, sl, r3
  4145bc:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  4145be:	fa01 f202 	lsl.w	r2, r1, r2
  4145c2:	431a      	orrs	r2, r3
  4145c4:	f806 2009 	strb.w	r2, [r6, r9]
                wrp += wr_size;
  4145c8:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  4145ca:	f10c 0c01 	add.w	ip, ip, #1
  4145ce:	fa0f fc8c 	sxth.w	ip, ip
  4145d2:	45a4      	cmp	ip, r4
  4145d4:	f280 8246 	bge.w	414a64 <decompress+0xd4c>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
  4145d8:	f818 100c 	ldrb.w	r1, [r8, ip]
  4145dc:	f815 300c 	ldrb.w	r3, [r5, ip]
  4145e0:	4059      	eors	r1, r3
  4145e2:	f805 100c 	strb.w	r1, [r5, ip]
    if(len == 3) {
  4145e6:	2f03      	cmp	r7, #3
  4145e8:	d0aa      	beq.n	414540 <decompress+0x828>
  4145ea:	46b9      	mov	r9, r7
  4145ec:	e7d2      	b.n	414594 <decompress+0x87c>
            bit_mask = 0x1;
  4145ee:	f04f 0901 	mov.w	r9, #1
  4145f2:	e01d      	b.n	414630 <decompress+0x918>
            bit_mask = 0x7;
  4145f4:	f04f 0907 	mov.w	r9, #7
  4145f8:	e01a      	b.n	414630 <decompress+0x918>
            bit_mask = 0xF;
  4145fa:	f04f 090f 	mov.w	r9, #15
  4145fe:	e017      	b.n	414630 <decompress+0x918>
  414600:	2040c7b4 	.word	0x2040c7b4
  414604:	2040c7bc 	.word	0x2040c7bc
  414608:	2040c7ac 	.word	0x2040c7ac
  41460c:	2040c7b8 	.word	0x2040c7b8
  414610:	2040c7ad 	.word	0x2040c7ad
  414614:	2040c7b0 	.word	0x2040c7b0
            bit_mask = 0xFF;
  414618:	f04f 09ff 	mov.w	r9, #255	; 0xff
  41461c:	e008      	b.n	414630 <decompress+0x918>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41461e:	2301      	movs	r3, #1
  414620:	4093      	lsls	r3, r2
  414622:	b2db      	uxtb	r3, r3
  414624:	3b01      	subs	r3, #1
  414626:	fa5f f983 	uxtb.w	r9, r3
  41462a:	e001      	b.n	414630 <decompress+0x918>
            bit_mask = 0x3;
  41462c:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
  414630:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
    bit_pos = bit_pos & 0x7;
  414634:	f008 0107 	and.w	r1, r8, #7
    if(bit_pos + len >= 8) {
  414638:	188b      	adds	r3, r1, r2
  41463a:	2b07      	cmp	r3, #7
  41463c:	d840      	bhi.n	4146c0 <decompress+0x9a8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41463e:	f81b 300a 	ldrb.w	r3, [fp, sl]
  414642:	4249      	negs	r1, r1
  414644:	1a89      	subs	r1, r1, r2
  414646:	3108      	adds	r1, #8
  414648:	410b      	asrs	r3, r1
  41464a:	ea03 0309 	and.w	r3, r3, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
  41464e:	f1b8 0f00 	cmp.w	r8, #0
  414652:	d003      	beq.n	41465c <decompress+0x944>
  414654:	49b9      	ldr	r1, [pc, #740]	; (41493c <decompress+0xc24>)
  414656:	7809      	ldrb	r1, [r1, #0]
  414658:	4299      	cmp	r1, r3
  41465a:	d040      	beq.n	4146de <decompress+0x9c6>
        rle_prev_v = ret;
  41465c:	49b7      	ldr	r1, [pc, #732]	; (41493c <decompress+0xc24>)
  41465e:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  414660:	4442      	add	r2, r8
  414662:	49b7      	ldr	r1, [pc, #732]	; (414940 <decompress+0xc28>)
  414664:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  414666:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  41466a:	f10e 0e01 	add.w	lr, lr, #1
  41466e:	fa0f fe8e 	sxth.w	lr, lr
  414672:	4574      	cmp	r4, lr
  414674:	f340 81a0 	ble.w	4149b8 <decompress+0xca0>
        out[i] = rle_next();
  414678:	eb05 0c0e 	add.w	ip, r5, lr
    if(rle_state == RLE_STATE_SINGLE) {
  41467c:	4bb1      	ldr	r3, [pc, #708]	; (414944 <decompress+0xc2c>)
  41467e:	781b      	ldrb	r3, [r3, #0]
  414680:	2b00      	cmp	r3, #0
  414682:	d137      	bne.n	4146f4 <decompress+0x9dc>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414684:	4bb0      	ldr	r3, [pc, #704]	; (414948 <decompress+0xc30>)
  414686:	f8d3 b000 	ldr.w	fp, [r3]
  41468a:	4bad      	ldr	r3, [pc, #692]	; (414940 <decompress+0xc28>)
  41468c:	f8d3 8000 	ldr.w	r8, [r3]
  414690:	4bae      	ldr	r3, [pc, #696]	; (41494c <decompress+0xc34>)
  414692:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  414694:	1e53      	subs	r3, r2, #1
  414696:	2b07      	cmp	r3, #7
  414698:	d8c1      	bhi.n	41461e <decompress+0x906>
  41469a:	a101      	add	r1, pc, #4	; (adr r1, 4146a0 <decompress+0x988>)
  41469c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  4146a0:	004145ef 	.word	0x004145ef
  4146a4:	0041462d 	.word	0x0041462d
  4146a8:	004145f5 	.word	0x004145f5
  4146ac:	004145fb 	.word	0x004145fb
  4146b0:	0041461f 	.word	0x0041461f
  4146b4:	0041461f 	.word	0x0041461f
  4146b8:	0041461f 	.word	0x0041461f
  4146bc:	00414619 	.word	0x00414619
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4146c0:	f81b 300a 	ldrb.w	r3, [fp, sl]
  4146c4:	44da      	add	sl, fp
  4146c6:	f89a a001 	ldrb.w	sl, [sl, #1]
  4146ca:	eb0a 2303 	add.w	r3, sl, r3, lsl #8
  4146ce:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4146d0:	4249      	negs	r1, r1
  4146d2:	1a89      	subs	r1, r1, r2
  4146d4:	3110      	adds	r1, #16
  4146d6:	410b      	asrs	r3, r1
  4146d8:	ea03 0309 	and.w	r3, r3, r9
  4146dc:	e7b7      	b.n	41464e <decompress+0x936>
            rle_cnt = 0;
  4146de:	f04f 0900 	mov.w	r9, #0
  4146e2:	499b      	ldr	r1, [pc, #620]	; (414950 <decompress+0xc38>)
  4146e4:	f881 9000 	strb.w	r9, [r1]
            rle_state = RLE_STATE_REPEATE;
  4146e8:	f04f 0901 	mov.w	r9, #1
  4146ec:	4995      	ldr	r1, [pc, #596]	; (414944 <decompress+0xc2c>)
  4146ee:	f881 9000 	strb.w	r9, [r1]
  4146f2:	e7b3      	b.n	41465c <decompress+0x944>
    else if(rle_state == RLE_STATE_REPEATE) {
  4146f4:	2b01      	cmp	r3, #1
  4146f6:	d004      	beq.n	414702 <decompress+0x9ea>
    else if(rle_state == RLE_STATE_COUNTER) {
  4146f8:	2b02      	cmp	r3, #2
  4146fa:	f000 80fa 	beq.w	4148f2 <decompress+0xbda>
    uint8_t ret = 0;
  4146fe:	2300      	movs	r3, #0
  414700:	e7b1      	b.n	414666 <decompress+0x94e>
        v = get_bits(rle_in, rle_rdp, 1);
  414702:	4b91      	ldr	r3, [pc, #580]	; (414948 <decompress+0xc30>)
  414704:	f8d3 9000 	ldr.w	r9, [r3]
  414708:	4b8d      	ldr	r3, [pc, #564]	; (414940 <decompress+0xc28>)
  41470a:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  41470c:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  41470e:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  414712:	f103 0801 	add.w	r8, r3, #1
  414716:	f1b8 0f07 	cmp.w	r8, #7
  41471a:	d822      	bhi.n	414762 <decompress+0xa4a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41471c:	f819 1001 	ldrb.w	r1, [r9, r1]
  414720:	f1c3 0307 	rsb	r3, r3, #7
  414724:	4119      	asrs	r1, r3
  414726:	f001 0101 	and.w	r1, r1, #1
        rle_cnt++;
  41472a:	4b89      	ldr	r3, [pc, #548]	; (414950 <decompress+0xc38>)
  41472c:	f893 8000 	ldrb.w	r8, [r3]
  414730:	f108 0801 	add.w	r8, r8, #1
  414734:	fa5f f888 	uxtb.w	r8, r8
  414738:	f883 8000 	strb.w	r8, [r3]
        rle_rdp += 1;
  41473c:	3201      	adds	r2, #1
  41473e:	4b80      	ldr	r3, [pc, #512]	; (414940 <decompress+0xc28>)
  414740:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  414742:	2901      	cmp	r1, #1
  414744:	d01a      	beq.n	41477c <decompress+0xa64>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414746:	4b81      	ldr	r3, [pc, #516]	; (41494c <decompress+0xc34>)
  414748:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  41474c:	f108 33ff 	add.w	r3, r8, #4294967295
  414750:	2b07      	cmp	r3, #7
  414752:	f200 8099 	bhi.w	414888 <decompress+0xb70>
  414756:	e8df f003 	tbb	[pc, r3]
  41475a:	9e8f      	.short	0x9e8f
  41475c:	97979391 	.word	0x97979391
  414760:	9597      	.short	0x9597
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414762:	f819 8001 	ldrb.w	r8, [r9, r1]
  414766:	4449      	add	r1, r9
  414768:	7849      	ldrb	r1, [r1, #1]
  41476a:	eb01 2108 	add.w	r1, r1, r8, lsl #8
  41476e:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414770:	f1c3 030f 	rsb	r3, r3, #15
  414774:	4119      	asrs	r1, r3
  414776:	f001 0101 	and.w	r1, r1, #1
  41477a:	e7d6      	b.n	41472a <decompress+0xa12>
            ret = rle_prev_v;
  41477c:	4b6f      	ldr	r3, [pc, #444]	; (41493c <decompress+0xc24>)
  41477e:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  414780:	f1b8 0f0b 	cmp.w	r8, #11
  414784:	f47f af6f 	bne.w	414666 <decompress+0x94e>
    uint32_t byte_pos = bit_pos >> 3;
  414788:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41478c:	f002 0b07 	and.w	fp, r2, #7
    if(bit_pos + len >= 8) {
  414790:	f10b 0806 	add.w	r8, fp, #6
  414794:	f1b8 0f07 	cmp.w	r8, #7
  414798:	d817      	bhi.n	4147ca <decompress+0xab2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41479a:	f819 a00a 	ldrb.w	sl, [r9, sl]
  41479e:	f1cb 0802 	rsb	r8, fp, #2
  4147a2:	fa4a f808 	asr.w	r8, sl, r8
  4147a6:	f008 083f 	and.w	r8, r8, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  4147aa:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 414950 <decompress+0xc38>
  4147ae:	f88a 8000 	strb.w	r8, [sl]
                rle_rdp += 6;
  4147b2:	3206      	adds	r2, #6
  4147b4:	f8df a188 	ldr.w	sl, [pc, #392]	; 414940 <decompress+0xc28>
  4147b8:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  4147bc:	f1b8 0f00 	cmp.w	r8, #0
  4147c0:	d013      	beq.n	4147ea <decompress+0xad2>
                    rle_state = RLE_STATE_COUNTER;
  4147c2:	2102      	movs	r1, #2
  4147c4:	4a5f      	ldr	r2, [pc, #380]	; (414944 <decompress+0xc2c>)
  4147c6:	7011      	strb	r1, [r2, #0]
  4147c8:	e74d      	b.n	414666 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4147ca:	f819 800a 	ldrb.w	r8, [r9, sl]
  4147ce:	44ca      	add	sl, r9
  4147d0:	f89a a001 	ldrb.w	sl, [sl, #1]
  4147d4:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
  4147d8:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4147dc:	f1cb 0b0a 	rsb	fp, fp, #10
  4147e0:	fa48 f80b 	asr.w	r8, r8, fp
  4147e4:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  4147e8:	e7df      	b.n	4147aa <decompress+0xa92>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4147ea:	4b58      	ldr	r3, [pc, #352]	; (41494c <decompress+0xc34>)
  4147ec:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  4147f0:	f108 33ff 	add.w	r3, r8, #4294967295
  4147f4:	2b07      	cmp	r3, #7
  4147f6:	d80b      	bhi.n	414810 <decompress+0xaf8>
  4147f8:	e8df f003 	tbb	[pc, r3]
  4147fc:	06041112 	.word	0x06041112
  414800:	080a0a0a 	.word	0x080a0a0a
            bit_mask = 0x7;
  414804:	2107      	movs	r1, #7
  414806:	e00b      	b.n	414820 <decompress+0xb08>
            bit_mask = 0xF;
  414808:	210f      	movs	r1, #15
  41480a:	e009      	b.n	414820 <decompress+0xb08>
            bit_mask = 0xFF;
  41480c:	21ff      	movs	r1, #255	; 0xff
  41480e:	e007      	b.n	414820 <decompress+0xb08>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414810:	2101      	movs	r1, #1
  414812:	fa01 f108 	lsl.w	r1, r1, r8
  414816:	b2c9      	uxtb	r1, r1
  414818:	3901      	subs	r1, #1
  41481a:	b2c9      	uxtb	r1, r1
  41481c:	e000      	b.n	414820 <decompress+0xb08>
            bit_mask = 0x3;
  41481e:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  414820:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  414824:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  414828:	eb03 0b08 	add.w	fp, r3, r8
  41482c:	f1bb 0f07 	cmp.w	fp, #7
  414830:	d811      	bhi.n	414856 <decompress+0xb3e>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414832:	f819 900a 	ldrb.w	r9, [r9, sl]
  414836:	425b      	negs	r3, r3
  414838:	eba3 0308 	sub.w	r3, r3, r8
  41483c:	3308      	adds	r3, #8
  41483e:	fa49 f303 	asr.w	r3, r9, r3
  414842:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  414844:	493d      	ldr	r1, [pc, #244]	; (41493c <decompress+0xc24>)
  414846:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  414848:	4442      	add	r2, r8
  41484a:	493d      	ldr	r1, [pc, #244]	; (414940 <decompress+0xc28>)
  41484c:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  41484e:	2100      	movs	r1, #0
  414850:	4a3c      	ldr	r2, [pc, #240]	; (414944 <decompress+0xc2c>)
  414852:	7011      	strb	r1, [r2, #0]
  414854:	e707      	b.n	414666 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414856:	f819 b00a 	ldrb.w	fp, [r9, sl]
  41485a:	44d1      	add	r9, sl
  41485c:	f899 9001 	ldrb.w	r9, [r9, #1]
  414860:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  414864:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414868:	425b      	negs	r3, r3
  41486a:	eba3 0308 	sub.w	r3, r3, r8
  41486e:	3310      	adds	r3, #16
  414870:	fa49 f303 	asr.w	r3, r9, r3
  414874:	400b      	ands	r3, r1
  414876:	e7e5      	b.n	414844 <decompress+0xb2c>
            bit_mask = 0x1;
  414878:	2301      	movs	r3, #1
  41487a:	e00d      	b.n	414898 <decompress+0xb80>
            bit_mask = 0x7;
  41487c:	2307      	movs	r3, #7
  41487e:	e00b      	b.n	414898 <decompress+0xb80>
            bit_mask = 0xF;
  414880:	230f      	movs	r3, #15
  414882:	e009      	b.n	414898 <decompress+0xb80>
            bit_mask = 0xFF;
  414884:	23ff      	movs	r3, #255	; 0xff
  414886:	e007      	b.n	414898 <decompress+0xb80>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414888:	2301      	movs	r3, #1
  41488a:	fa03 f308 	lsl.w	r3, r3, r8
  41488e:	b2db      	uxtb	r3, r3
  414890:	3b01      	subs	r3, #1
  414892:	b2db      	uxtb	r3, r3
  414894:	e000      	b.n	414898 <decompress+0xb80>
            bit_mask = 0x3;
  414896:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  414898:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41489c:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  4148a0:	eb01 0b08 	add.w	fp, r1, r8
  4148a4:	f1bb 0f07 	cmp.w	fp, #7
  4148a8:	d811      	bhi.n	4148ce <decompress+0xbb6>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4148aa:	f819 900a 	ldrb.w	r9, [r9, sl]
  4148ae:	4249      	negs	r1, r1
  4148b0:	eba1 0108 	sub.w	r1, r1, r8
  4148b4:	3108      	adds	r1, #8
  4148b6:	fa49 f101 	asr.w	r1, r9, r1
  4148ba:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4148bc:	491f      	ldr	r1, [pc, #124]	; (41493c <decompress+0xc24>)
  4148be:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  4148c0:	4442      	add	r2, r8
  4148c2:	491f      	ldr	r1, [pc, #124]	; (414940 <decompress+0xc28>)
  4148c4:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  4148c6:	2100      	movs	r1, #0
  4148c8:	4a1e      	ldr	r2, [pc, #120]	; (414944 <decompress+0xc2c>)
  4148ca:	7011      	strb	r1, [r2, #0]
  4148cc:	e6cb      	b.n	414666 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4148ce:	f819 b00a 	ldrb.w	fp, [r9, sl]
  4148d2:	44d1      	add	r9, sl
  4148d4:	f899 9001 	ldrb.w	r9, [r9, #1]
  4148d8:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  4148dc:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4148e0:	4249      	negs	r1, r1
  4148e2:	eba1 0108 	sub.w	r1, r1, r8
  4148e6:	3110      	adds	r1, #16
  4148e8:	fa49 f901 	asr.w	r9, r9, r1
  4148ec:	ea09 0303 	and.w	r3, r9, r3
  4148f0:	e7e4      	b.n	4148bc <decompress+0xba4>
        ret = rle_prev_v;
  4148f2:	4b12      	ldr	r3, [pc, #72]	; (41493c <decompress+0xc24>)
  4148f4:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  4148f6:	4916      	ldr	r1, [pc, #88]	; (414950 <decompress+0xc38>)
  4148f8:	780a      	ldrb	r2, [r1, #0]
  4148fa:	3a01      	subs	r2, #1
  4148fc:	b2d2      	uxtb	r2, r2
  4148fe:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  414900:	2a00      	cmp	r2, #0
  414902:	f47f aeb0 	bne.w	414666 <decompress+0x94e>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414906:	4b10      	ldr	r3, [pc, #64]	; (414948 <decompress+0xc30>)
  414908:	f8d3 a000 	ldr.w	sl, [r3]
  41490c:	4b0c      	ldr	r3, [pc, #48]	; (414940 <decompress+0xc28>)
  41490e:	f8d3 9000 	ldr.w	r9, [r3]
  414912:	4b0e      	ldr	r3, [pc, #56]	; (41494c <decompress+0xc34>)
  414914:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  414918:	f108 33ff 	add.w	r3, r8, #4294967295
  41491c:	2b07      	cmp	r3, #7
  41491e:	d819      	bhi.n	414954 <decompress+0xc3c>
  414920:	e8df f003 	tbb	[pc, r3]
  414924:	08061f04 	.word	0x08061f04
  414928:	0a181818 	.word	0x0a181818
            bit_mask = 0x1;
  41492c:	2301      	movs	r3, #1
  41492e:	e019      	b.n	414964 <decompress+0xc4c>
            bit_mask = 0x7;
  414930:	2307      	movs	r3, #7
  414932:	e017      	b.n	414964 <decompress+0xc4c>
            bit_mask = 0xF;
  414934:	230f      	movs	r3, #15
  414936:	e015      	b.n	414964 <decompress+0xc4c>
            bit_mask = 0xFF;
  414938:	23ff      	movs	r3, #255	; 0xff
  41493a:	e013      	b.n	414964 <decompress+0xc4c>
  41493c:	2040c7b4 	.word	0x2040c7b4
  414940:	2040c7b8 	.word	0x2040c7b8
  414944:	2040c7bc 	.word	0x2040c7bc
  414948:	2040c7b0 	.word	0x2040c7b0
  41494c:	2040c7ac 	.word	0x2040c7ac
  414950:	2040c7ad 	.word	0x2040c7ad
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414954:	2301      	movs	r3, #1
  414956:	fa03 f308 	lsl.w	r3, r3, r8
  41495a:	b2db      	uxtb	r3, r3
  41495c:	3b01      	subs	r3, #1
  41495e:	b2db      	uxtb	r3, r3
  414960:	e000      	b.n	414964 <decompress+0xc4c>
            bit_mask = 0x3;
  414962:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  414964:	ea4f 01d9 	mov.w	r1, r9, lsr #3
    bit_pos = bit_pos & 0x7;
  414968:	f009 0207 	and.w	r2, r9, #7
    if(bit_pos + len >= 8) {
  41496c:	eb02 0b08 	add.w	fp, r2, r8
  414970:	f1bb 0f07 	cmp.w	fp, #7
  414974:	d812      	bhi.n	41499c <decompress+0xc84>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414976:	f81a a001 	ldrb.w	sl, [sl, r1]
  41497a:	4251      	negs	r1, r2
  41497c:	eba1 0108 	sub.w	r1, r1, r8
  414980:	3108      	adds	r1, #8
  414982:	fa4a f101 	asr.w	r1, sl, r1
  414986:	400b      	ands	r3, r1
            rle_prev_v = ret;
  414988:	4a42      	ldr	r2, [pc, #264]	; (414a94 <decompress+0xd7c>)
  41498a:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  41498c:	eb08 0209 	add.w	r2, r8, r9
  414990:	4941      	ldr	r1, [pc, #260]	; (414a98 <decompress+0xd80>)
  414992:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414994:	2100      	movs	r1, #0
  414996:	4a41      	ldr	r2, [pc, #260]	; (414a9c <decompress+0xd84>)
  414998:	7011      	strb	r1, [r2, #0]
  41499a:	e664      	b.n	414666 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41499c:	f81a b001 	ldrb.w	fp, [sl, r1]
  4149a0:	4451      	add	r1, sl
  4149a2:	7849      	ldrb	r1, [r1, #1]
  4149a4:	eb01 210b 	add.w	r1, r1, fp, lsl #8
  4149a8:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4149aa:	4252      	negs	r2, r2
  4149ac:	eba2 0208 	sub.w	r2, r2, r8
  4149b0:	3210      	adds	r2, #16
  4149b2:	4111      	asrs	r1, r2
  4149b4:	400b      	ands	r3, r1
  4149b6:	e7e7      	b.n	414988 <decompress+0xc70>
    for(i = 0; i < w; i++) {
  4149b8:	f04f 0c00 	mov.w	ip, #0
  4149bc:	f8dd e008 	ldr.w	lr, [sp, #8]
  4149c0:	e048      	b.n	414a54 <decompress+0xd3c>
        switch(val) {
  4149c2:	2907      	cmp	r1, #7
  4149c4:	d805      	bhi.n	4149d2 <decompress+0xcba>
  4149c6:	e8df f001 	tbb	[pc, r1]
  4149ca:	0723      	.short	0x0723
  4149cc:	17130f0b 	.word	0x17130f0b
  4149d0:	1f1b      	.short	0x1f1b
        len = 4;
  4149d2:	f04f 0804 	mov.w	r8, #4
  4149d6:	e01e      	b.n	414a16 <decompress+0xcfe>
  4149d8:	f04f 0804 	mov.w	r8, #4
                val = 2;
  4149dc:	2102      	movs	r1, #2
  4149de:	e01a      	b.n	414a16 <decompress+0xcfe>
        len = 4;
  4149e0:	f04f 0804 	mov.w	r8, #4
                val = 4;
  4149e4:	4641      	mov	r1, r8
  4149e6:	e016      	b.n	414a16 <decompress+0xcfe>
        len = 4;
  4149e8:	f04f 0804 	mov.w	r8, #4
                val = 6;
  4149ec:	2106      	movs	r1, #6
  4149ee:	e012      	b.n	414a16 <decompress+0xcfe>
        len = 4;
  4149f0:	f04f 0804 	mov.w	r8, #4
                val = 9;
  4149f4:	2109      	movs	r1, #9
  4149f6:	e00e      	b.n	414a16 <decompress+0xcfe>
        len = 4;
  4149f8:	f04f 0804 	mov.w	r8, #4
                val = 11;
  4149fc:	210b      	movs	r1, #11
  4149fe:	e00a      	b.n	414a16 <decompress+0xcfe>
        len = 4;
  414a00:	f04f 0804 	mov.w	r8, #4
                val = 13;
  414a04:	210d      	movs	r1, #13
  414a06:	e006      	b.n	414a16 <decompress+0xcfe>
        len = 4;
  414a08:	f04f 0804 	mov.w	r8, #4
                val = 15;
  414a0c:	210f      	movs	r1, #15
  414a0e:	e002      	b.n	414a16 <decompress+0xcfe>
        len = 4;
  414a10:	f04f 0804 	mov.w	r8, #4
                val = 0;
  414a14:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  414a16:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  414a1a:	4252      	negs	r2, r2
  414a1c:	eba2 0208 	sub.w	r2, r2, r8
  414a20:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414a22:	2301      	movs	r3, #1
  414a24:	fa03 f308 	lsl.w	r3, r3, r8
  414a28:	b2db      	uxtb	r3, r3
  414a2a:	3b01      	subs	r3, #1
  414a2c:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  414a2e:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  414a32:	43db      	mvns	r3, r3
  414a34:	4093      	lsls	r3, r2
  414a36:	f816 9008 	ldrb.w	r9, [r6, r8]
  414a3a:	ea09 0303 	and.w	r3, r9, r3
  414a3e:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  414a40:	fa01 f202 	lsl.w	r2, r1, r2
  414a44:	431a      	orrs	r2, r3
  414a46:	f806 2008 	strb.w	r2, [r6, r8]
                wrp += wr_size;
  414a4a:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  414a4c:	f10c 0c01 	add.w	ip, ip, #1
  414a50:	fa0f fc8c 	sxth.w	ip, ip
  414a54:	45a4      	cmp	ip, r4
  414a56:	da05      	bge.n	414a64 <decompress+0xd4c>
                bits_write(out, wrp, line_buf1[x], bpp);
  414a58:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  414a5c:	2f03      	cmp	r7, #3
  414a5e:	d0b0      	beq.n	4149c2 <decompress+0xcaa>
  414a60:	46b8      	mov	r8, r7
  414a62:	e7d8      	b.n	414a16 <decompress+0xcfe>
    for(y = 1; y < h; y++) {
  414a64:	9b00      	ldr	r3, [sp, #0]
  414a66:	3301      	adds	r3, #1
  414a68:	b21b      	sxth	r3, r3
  414a6a:	9300      	str	r3, [sp, #0]
  414a6c:	9b00      	ldr	r3, [sp, #0]
  414a6e:	9a01      	ldr	r2, [sp, #4]
  414a70:	4293      	cmp	r3, r2
  414a72:	da06      	bge.n	414a82 <decompress+0xd6a>
        if(prefilter) {
  414a74:	9b04      	ldr	r3, [sp, #16]
  414a76:	2b00      	cmp	r3, #0
  414a78:	f47f ad54 	bne.w	414524 <decompress+0x80c>
  414a7c:	f04f 0e00 	mov.w	lr, #0
  414a80:	e5f7      	b.n	414672 <decompress+0x95a>
    _lv_mem_buf_release(line_buf1);
  414a82:	4628      	mov	r0, r5
  414a84:	4c06      	ldr	r4, [pc, #24]	; (414aa0 <decompress+0xd88>)
  414a86:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
  414a88:	9803      	ldr	r0, [sp, #12]
  414a8a:	47a0      	blx	r4
}
  414a8c:	b007      	add	sp, #28
  414a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414a92:	bf00      	nop
  414a94:	2040c7b4 	.word	0x2040c7b4
  414a98:	2040c7b8 	.word	0x2040c7b8
  414a9c:	2040c7bc 	.word	0x2040c7bc
  414aa0:	00416715 	.word	0x00416715

00414aa4 <lv_font_get_bitmap_fmt_txt>:
{
  414aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414aa8:	b082      	sub	sp, #8
    if(unicode_letter == '\t') unicode_letter = ' ';
  414aaa:	2909      	cmp	r1, #9
  414aac:	d01e      	beq.n	414aec <lv_font_get_bitmap_fmt_txt+0x48>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  414aae:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  414ab0:	4b37      	ldr	r3, [pc, #220]	; (414b90 <lv_font_get_bitmap_fmt_txt+0xec>)
  414ab2:	4798      	blx	r3
    if(!gid) return NULL;
  414ab4:	4607      	mov	r7, r0
  414ab6:	2800      	cmp	r0, #0
  414ab8:	d063      	beq.n	414b82 <lv_font_get_bitmap_fmt_txt+0xde>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  414aba:	686e      	ldr	r6, [r5, #4]
  414abc:	eb06 08c0 	add.w	r8, r6, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
  414ac0:	7ceb      	ldrb	r3, [r5, #19]
  414ac2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  414ac6:	d013      	beq.n	414af0 <lv_font_get_bitmap_fmt_txt+0x4c>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
  414ac8:	f898 3004 	ldrb.w	r3, [r8, #4]
  414acc:	f898 4005 	ldrb.w	r4, [r8, #5]
  414ad0:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
  414ad4:	2c00      	cmp	r4, #0
  414ad6:	d056      	beq.n	414b86 <lv_font_get_bitmap_fmt_txt+0xe2>
        switch(fdsc->bpp) {
  414ad8:	7ceb      	ldrb	r3, [r5, #19]
  414ada:	f3c3 0343 	ubfx	r3, r3, #1, #4
  414ade:	3b01      	subs	r3, #1
  414ae0:	2b03      	cmp	r3, #3
  414ae2:	d80e      	bhi.n	414b02 <lv_font_get_bitmap_fmt_txt+0x5e>
  414ae4:	e8df f003 	tbb	[pc, r3]
  414ae8:	44413e0b 	.word	0x44413e0b
    if(unicode_letter == '\t') unicode_letter = ' ';
  414aec:	2120      	movs	r1, #32
  414aee:	e7de      	b.n	414aae <lv_font_get_bitmap_fmt_txt+0xa>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
  414af0:	6828      	ldr	r0, [r5, #0]
  414af2:	f856 3037 	ldr.w	r3, [r6, r7, lsl #3]
  414af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
  414afa:	4418      	add	r0, r3
  414afc:	e02f      	b.n	414b5e <lv_font_get_bitmap_fmt_txt+0xba>
                buf_size = (gsize + 7) >> 3;
  414afe:	3407      	adds	r4, #7
  414b00:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
  414b02:	4b24      	ldr	r3, [pc, #144]	; (414b94 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414b04:	6818      	ldr	r0, [r3, #0]
  414b06:	4b24      	ldr	r3, [pc, #144]	; (414b98 <lv_font_get_bitmap_fmt_txt+0xf4>)
  414b08:	4798      	blx	r3
  414b0a:	4284      	cmp	r4, r0
  414b0c:	d90c      	bls.n	414b28 <lv_font_get_bitmap_fmt_txt+0x84>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
  414b0e:	4621      	mov	r1, r4
  414b10:	4b20      	ldr	r3, [pc, #128]	; (414b94 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414b12:	6818      	ldr	r0, [r3, #0]
  414b14:	4b21      	ldr	r3, [pc, #132]	; (414b9c <lv_font_get_bitmap_fmt_txt+0xf8>)
  414b16:	4798      	blx	r3
  414b18:	4604      	mov	r4, r0
            LV_ASSERT_MEM(tmp);
  414b1a:	4b21      	ldr	r3, [pc, #132]	; (414ba0 <lv_font_get_bitmap_fmt_txt+0xfc>)
  414b1c:	4798      	blx	r3
  414b1e:	b350      	cbz	r0, 414b76 <lv_font_get_bitmap_fmt_txt+0xd2>
            if(tmp == NULL) return NULL;
  414b20:	2c00      	cmp	r4, #0
  414b22:	d032      	beq.n	414b8a <lv_font_get_bitmap_fmt_txt+0xe6>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
  414b24:	4b1b      	ldr	r3, [pc, #108]	; (414b94 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414b26:	601c      	str	r4, [r3, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
  414b28:	7ceb      	ldrb	r3, [r5, #19]
  414b2a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
  414b2e:	2c40      	cmp	r4, #64	; 0x40
  414b30:	bf14      	ite	ne
  414b32:	2400      	movne	r4, #0
  414b34:	2401      	moveq	r4, #1
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  414b36:	f8d5 e000 	ldr.w	lr, [r5]
  414b3a:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
  414b3e:	f3c0 0013 	ubfx	r0, r0, #0, #20
                   (uint8_t)fdsc->bpp, prefilter);
  414b42:	f3c3 0143 	ubfx	r1, r3, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  414b46:	f898 3005 	ldrb.w	r3, [r8, #5]
  414b4a:	f898 2004 	ldrb.w	r2, [r8, #4]
  414b4e:	4d11      	ldr	r5, [pc, #68]	; (414b94 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414b50:	9401      	str	r4, [sp, #4]
  414b52:	9100      	str	r1, [sp, #0]
  414b54:	6829      	ldr	r1, [r5, #0]
  414b56:	4470      	add	r0, lr
  414b58:	4c12      	ldr	r4, [pc, #72]	; (414ba4 <lv_font_get_bitmap_fmt_txt+0x100>)
  414b5a:	47a0      	blx	r4
        return LV_GC_ROOT(_lv_font_decompr_buf);
  414b5c:	6828      	ldr	r0, [r5, #0]
}
  414b5e:	b002      	add	sp, #8
  414b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                buf_size = (gsize + 3) >> 2;
  414b64:	3403      	adds	r4, #3
  414b66:	08a4      	lsrs	r4, r4, #2
                break;
  414b68:	e7cb      	b.n	414b02 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  414b6a:	3401      	adds	r4, #1
  414b6c:	0864      	lsrs	r4, r4, #1
                break;
  414b6e:	e7c8      	b.n	414b02 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  414b70:	3401      	adds	r4, #1
  414b72:	0864      	lsrs	r4, r4, #1
                break;
  414b74:	e7c5      	b.n	414b02 <lv_font_get_bitmap_fmt_txt+0x5e>
            LV_ASSERT_MEM(tmp);
  414b76:	4622      	mov	r2, r4
  414b78:	2300      	movs	r3, #0
  414b7a:	480b      	ldr	r0, [pc, #44]	; (414ba8 <lv_font_get_bitmap_fmt_txt+0x104>)
  414b7c:	490b      	ldr	r1, [pc, #44]	; (414bac <lv_font_get_bitmap_fmt_txt+0x108>)
  414b7e:	4788      	blx	r1
  414b80:	e7fe      	b.n	414b80 <lv_font_get_bitmap_fmt_txt+0xdc>
    if(!gid) return NULL;
  414b82:	2000      	movs	r0, #0
  414b84:	e7eb      	b.n	414b5e <lv_font_get_bitmap_fmt_txt+0xba>
        if(gsize == 0) return NULL;
  414b86:	2000      	movs	r0, #0
  414b88:	e7e9      	b.n	414b5e <lv_font_get_bitmap_fmt_txt+0xba>
            if(tmp == NULL) return NULL;
  414b8a:	2000      	movs	r0, #0
  414b8c:	e7e7      	b.n	414b5e <lv_font_get_bitmap_fmt_txt+0xba>
  414b8e:	bf00      	nop
  414b90:	00413b8d 	.word	0x00413b8d
  414b94:	2043a25c 	.word	0x2043a25c
  414b98:	004166f5 	.word	0x004166f5
  414b9c:	004168ed 	.word	0x004168ed
  414ba0:	00415e79 	.word	0x00415e79
  414ba4:	00413d19 	.word	0x00413d19
  414ba8:	0042c154 	.word	0x0042c154
  414bac:	00415e85 	.word	0x00415e85

00414bb0 <lv_font_get_glyph_dsc_fmt_txt>:
{
  414bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  414bb4:	4607      	mov	r7, r0
  414bb6:	460c      	mov	r4, r1
  414bb8:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
  414bba:	2a09      	cmp	r2, #9
  414bbc:	d034      	beq.n	414c28 <lv_font_get_glyph_dsc_fmt_txt+0x78>
    bool is_tab = false;
  414bbe:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  414bc0:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  414bc2:	4611      	mov	r1, r2
  414bc4:	4638      	mov	r0, r7
  414bc6:	4b20      	ldr	r3, [pc, #128]	; (414c48 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  414bc8:	4798      	blx	r3
    if(!gid) return false;
  414bca:	4680      	mov	r8, r0
  414bcc:	2800      	cmp	r0, #0
  414bce:	d035      	beq.n	414c3c <lv_font_get_glyph_dsc_fmt_txt+0x8c>
    if(fdsc->kern_dsc) {
  414bd0:	68f3      	ldr	r3, [r6, #12]
  414bd2:	2b00      	cmp	r3, #0
  414bd4:	d030      	beq.n	414c38 <lv_font_get_glyph_dsc_fmt_txt+0x88>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
  414bd6:	4649      	mov	r1, r9
  414bd8:	4638      	mov	r0, r7
  414bda:	4b1b      	ldr	r3, [pc, #108]	; (414c48 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  414bdc:	4798      	blx	r3
        if(gid_next) {
  414bde:	4602      	mov	r2, r0
  414be0:	bb28      	cbnz	r0, 414c2e <lv_font_get_glyph_dsc_fmt_txt+0x7e>
    int8_t kvalue = 0;
  414be2:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  414be4:	6871      	ldr	r1, [r6, #4]
  414be6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
  414bea:	8a33      	ldrh	r3, [r6, #16]
  414bec:	fb03 f300 	mul.w	r3, r3, r0
  414bf0:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
  414bf2:	8848      	ldrh	r0, [r1, #2]
  414bf4:	f3c0 100b 	ubfx	r0, r0, #4, #12
    if(is_tab) adv_w *= 2;
  414bf8:	b105      	cbz	r5, 414bfc <lv_font_get_glyph_dsc_fmt_txt+0x4c>
  414bfa:	0040      	lsls	r0, r0, #1
    adv_w += kv;
  414bfc:	4403      	add	r3, r0
    adv_w  = (adv_w + (1 << 3)) >> 4;
  414bfe:	3308      	adds	r3, #8
  414c00:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
  414c02:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
  414c04:	794b      	ldrb	r3, [r1, #5]
  414c06:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
  414c08:	790a      	ldrb	r2, [r1, #4]
  414c0a:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
  414c0c:	f991 3006 	ldrsb.w	r3, [r1, #6]
  414c10:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
  414c12:	f991 3007 	ldrsb.w	r3, [r1, #7]
  414c16:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
  414c18:	7cf3      	ldrb	r3, [r6, #19]
  414c1a:	f3c3 0343 	ubfx	r3, r3, #1, #4
  414c1e:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
  414c20:	b185      	cbz	r5, 414c44 <lv_font_get_glyph_dsc_fmt_txt+0x94>
  414c22:	0052      	lsls	r2, r2, #1
  414c24:	8062      	strh	r2, [r4, #2]
  414c26:	e00a      	b.n	414c3e <lv_font_get_glyph_dsc_fmt_txt+0x8e>
        is_tab = true;
  414c28:	2501      	movs	r5, #1
        unicode_letter = ' ';
  414c2a:	2220      	movs	r2, #32
  414c2c:	e7c8      	b.n	414bc0 <lv_font_get_glyph_dsc_fmt_txt+0x10>
            kvalue = get_kern_value(font, gid, gid_next);
  414c2e:	4641      	mov	r1, r8
  414c30:	4638      	mov	r0, r7
  414c32:	4b06      	ldr	r3, [pc, #24]	; (414c4c <lv_font_get_glyph_dsc_fmt_txt+0x9c>)
  414c34:	4798      	blx	r3
  414c36:	e7d5      	b.n	414be4 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    int8_t kvalue = 0;
  414c38:	2000      	movs	r0, #0
  414c3a:	e7d3      	b.n	414be4 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    if(!gid) return false;
  414c3c:	2500      	movs	r5, #0
}
  414c3e:	4628      	mov	r0, r5
  414c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
  414c44:	2501      	movs	r5, #1
  414c46:	e7fa      	b.n	414c3e <lv_font_get_glyph_dsc_fmt_txt+0x8e>
  414c48:	00413b8d 	.word	0x00413b8d
  414c4c:	00413c65 	.word	0x00413c65

00414c50 <_lv_font_clean_up_fmt_txt>:
{
  414c50:	b508      	push	{r3, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
  414c52:	4b04      	ldr	r3, [pc, #16]	; (414c64 <_lv_font_clean_up_fmt_txt+0x14>)
  414c54:	6818      	ldr	r0, [r3, #0]
  414c56:	b120      	cbz	r0, 414c62 <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
  414c58:	4b03      	ldr	r3, [pc, #12]	; (414c68 <_lv_font_clean_up_fmt_txt+0x18>)
  414c5a:	4798      	blx	r3
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
  414c5c:	2200      	movs	r2, #0
  414c5e:	4b01      	ldr	r3, [pc, #4]	; (414c64 <_lv_font_clean_up_fmt_txt+0x14>)
  414c60:	601a      	str	r2, [r3, #0]
  414c62:	bd08      	pop	{r3, pc}
  414c64:	2043a25c 	.word	0x2043a25c
  414c68:	00416681 	.word	0x00416681

00414c6c <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
  414c6c:	b510      	push	{r4, lr}
  414c6e:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
  414c70:	2134      	movs	r1, #52	; 0x34
  414c72:	4b13      	ldr	r3, [pc, #76]	; (414cc0 <lv_disp_drv_init+0x54>)
  414c74:	4798      	blx	r3

    driver->flush_cb         = NULL;
  414c76:	2300      	movs	r3, #0
  414c78:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
  414c7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
  414c7e:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
  414c80:	22f0      	movs	r2, #240	; 0xf0
  414c82:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
  414c84:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
  414c86:	7a22      	ldrb	r2, [r4, #8]
  414c88:	f363 0241 	bfi	r2, r3, #1, #1
  414c8c:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
  414c8e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  414c92:	f042 0207 	orr.w	r2, r2, #7
  414c96:	f363 02c7 	bfi	r2, r3, #3, #5
  414c9a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  414c9e:	22e0      	movs	r2, #224	; 0xe0
  414ca0:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    driver->dpi = LV_DPI;
  414ca4:	8922      	ldrh	r2, [r4, #8]
  414ca6:	2194      	movs	r1, #148	; 0x94
  414ca8:	f361 028b 	bfi	r2, r1, #2, #10
  414cac:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
  414cae:	b2d2      	uxtb	r2, r2
  414cb0:	f042 0201 	orr.w	r2, r2, #1
  414cb4:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
  414cb6:	62a3      	str	r3, [r4, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
  414cb8:	62e3      	str	r3, [r4, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
  414cba:	6163      	str	r3, [r4, #20]
  414cbc:	bd10      	pop	{r4, pc}
  414cbe:	bf00      	nop
  414cc0:	00416af1 	.word	0x00416af1

00414cc4 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
  414cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414cc6:	4604      	mov	r4, r0
  414cc8:	460d      	mov	r5, r1
  414cca:	4617      	mov	r7, r2
  414ccc:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
  414cce:	2124      	movs	r1, #36	; 0x24
  414cd0:	4b03      	ldr	r3, [pc, #12]	; (414ce0 <lv_disp_buf_init+0x1c>)
  414cd2:	4798      	blx	r3

    disp_buf->buf1    = buf1;
  414cd4:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
  414cd6:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
  414cd8:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
  414cda:	60e6      	str	r6, [r4, #12]
  414cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414cde:	bf00      	nop
  414ce0:	00416af1 	.word	0x00416af1

00414ce4 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
  414ce4:	4b01      	ldr	r3, [pc, #4]	; (414cec <lv_disp_get_default+0x8>)
  414ce6:	6818      	ldr	r0, [r3, #0]
  414ce8:	4770      	bx	lr
  414cea:	bf00      	nop
  414cec:	2040c7c0 	.word	0x2040c7c0

00414cf0 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
  414cf0:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414cf2:	4603      	mov	r3, r0
  414cf4:	b138      	cbz	r0, 414d06 <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
  414cf6:	b16b      	cbz	r3, 414d14 <lv_disp_get_hor_res+0x24>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  414cf8:	7a1a      	ldrb	r2, [r3, #8]
  414cfa:	f012 0f02 	tst.w	r2, #2
  414cfe:	d006      	beq.n	414d0e <lv_disp_get_hor_res+0x1e>
  414d00:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  414d04:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414d06:	4b05      	ldr	r3, [pc, #20]	; (414d1c <lv_disp_get_hor_res+0x2c>)
  414d08:	4798      	blx	r3
  414d0a:	4603      	mov	r3, r0
  414d0c:	e7f3      	b.n	414cf6 <lv_disp_get_hor_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  414d0e:	f9b3 0000 	ldrsh.w	r0, [r3]
  414d12:	bd08      	pop	{r3, pc}
        return LV_HOR_RES_MAX;
  414d14:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
  414d18:	bd08      	pop	{r3, pc}
  414d1a:	bf00      	nop
  414d1c:	00414ce5 	.word	0x00414ce5

00414d20 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
  414d20:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414d22:	4603      	mov	r3, r0
  414d24:	b138      	cbz	r0, 414d36 <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
  414d26:	b16b      	cbz	r3, 414d44 <lv_disp_get_ver_res+0x24>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  414d28:	7a1a      	ldrb	r2, [r3, #8]
  414d2a:	f012 0f02 	tst.w	r2, #2
  414d2e:	d006      	beq.n	414d3e <lv_disp_get_ver_res+0x1e>
  414d30:	f9b3 0000 	ldrsh.w	r0, [r3]
  414d34:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414d36:	4b04      	ldr	r3, [pc, #16]	; (414d48 <lv_disp_get_ver_res+0x28>)
  414d38:	4798      	blx	r3
  414d3a:	4603      	mov	r3, r0
  414d3c:	e7f3      	b.n	414d26 <lv_disp_get_ver_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  414d3e:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  414d42:	bd08      	pop	{r3, pc}
        return LV_VER_RES_MAX;
  414d44:	20f0      	movs	r0, #240	; 0xf0
}
  414d46:	bd08      	pop	{r3, pc}
  414d48:	00414ce5 	.word	0x00414ce5

00414d4c <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
  414d4c:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414d4e:	4603      	mov	r3, r0
  414d50:	b120      	cbz	r0, 414d5c <lv_disp_get_dpi+0x10>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  414d52:	b13b      	cbz	r3, 414d64 <lv_disp_get_dpi+0x18>
    return disp->driver.dpi;
  414d54:	8918      	ldrh	r0, [r3, #8]
  414d56:	f3c0 0089 	ubfx	r0, r0, #2, #10
  414d5a:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414d5c:	4b02      	ldr	r3, [pc, #8]	; (414d68 <lv_disp_get_dpi+0x1c>)
  414d5e:	4798      	blx	r3
  414d60:	4603      	mov	r3, r0
  414d62:	e7f6      	b.n	414d52 <lv_disp_get_dpi+0x6>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  414d64:	2094      	movs	r0, #148	; 0x94
}
  414d66:	bd08      	pop	{r3, pc}
  414d68:	00414ce5 	.word	0x00414ce5

00414d6c <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
  414d6c:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414d6e:	4605      	mov	r5, r0
  414d70:	b1a0      	cbz	r0, 414d9c <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
  414d72:	b1bd      	cbz	r5, 414da4 <lv_disp_get_size_category+0x38>
    else w = lv_disp_get_hor_res(disp);
  414d74:	4628      	mov	r0, r5
  414d76:	4b10      	ldr	r3, [pc, #64]	; (414db8 <lv_disp_get_size_category+0x4c>)
  414d78:	4798      	blx	r3
  414d7a:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
  414d7c:	4628      	mov	r0, r5
  414d7e:	4b0f      	ldr	r3, [pc, #60]	; (414dbc <lv_disp_get_size_category+0x50>)
  414d80:	4798      	blx	r3

    w = w * 10 / dpi;
  414d82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  414d86:	0063      	lsls	r3, r4, #1
  414d88:	fbb3 f0f0 	udiv	r0, r3, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  414d8c:	281d      	cmp	r0, #29
  414d8e:	d90c      	bls.n	414daa <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  414d90:	2831      	cmp	r0, #49	; 0x31
  414d92:	d90c      	bls.n	414dae <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
  414d94:	2845      	cmp	r0, #69	; 0x45
  414d96:	d80c      	bhi.n	414db2 <lv_disp_get_size_category+0x46>
  414d98:	2002      	movs	r0, #2
  414d9a:	bd38      	pop	{r3, r4, r5, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414d9c:	4b08      	ldr	r3, [pc, #32]	; (414dc0 <lv_disp_get_size_category+0x54>)
  414d9e:	4798      	blx	r3
  414da0:	4605      	mov	r5, r0
  414da2:	e7e6      	b.n	414d72 <lv_disp_get_size_category+0x6>
    if(disp == NULL) w = LV_HOR_RES_MAX;
  414da4:	f44f 74a0 	mov.w	r4, #320	; 0x140
  414da8:	e7e8      	b.n	414d7c <lv_disp_get_size_category+0x10>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  414daa:	2000      	movs	r0, #0
  414dac:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  414dae:	2001      	movs	r0, #1
  414db0:	bd38      	pop	{r3, r4, r5, pc}
    else return LV_DISP_SIZE_EXTRA_LARGE;
  414db2:	2003      	movs	r0, #3
}
  414db4:	bd38      	pop	{r3, r4, r5, pc}
  414db6:	bf00      	nop
  414db8:	00414cf1 	.word	0x00414cf1
  414dbc:	00414d4d 	.word	0x00414d4d
  414dc0:	00414ce5 	.word	0x00414ce5

00414dc4 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
  414dc4:	6842      	ldr	r2, [r0, #4]
  414dc6:	2300      	movs	r3, #0
  414dc8:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
  414dca:	6842      	ldr	r2, [r0, #4]
  414dcc:	61d3      	str	r3, [r2, #28]
  414dce:	4770      	bx	lr

00414dd0 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
  414dd0:	b508      	push	{r3, lr}
    if(disp == NULL)
  414dd2:	b120      	cbz	r0, 414dde <lv_disp_get_next+0xe>
  414dd4:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
  414dd6:	4804      	ldr	r0, [pc, #16]	; (414de8 <lv_disp_get_next+0x18>)
  414dd8:	4b04      	ldr	r3, [pc, #16]	; (414dec <lv_disp_get_next+0x1c>)
  414dda:	4798      	blx	r3
}
  414ddc:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
  414dde:	4802      	ldr	r0, [pc, #8]	; (414de8 <lv_disp_get_next+0x18>)
  414de0:	4b03      	ldr	r3, [pc, #12]	; (414df0 <lv_disp_get_next+0x20>)
  414de2:	4798      	blx	r3
  414de4:	bd08      	pop	{r3, pc}
  414de6:	bf00      	nop
  414de8:	2043a26c 	.word	0x2043a26c
  414dec:	0041619d 	.word	0x0041619d
  414df0:	00416189 	.word	0x00416189

00414df4 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
  414df4:	6840      	ldr	r0, [r0, #4]
  414df6:	4770      	bx	lr

00414df8 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
  414df8:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
}
  414dfc:	f3c0 0009 	ubfx	r0, r0, #0, #10
  414e00:	4770      	bx	lr

00414e02 <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
  414e02:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
  414e0a:	428b      	cmp	r3, r1
  414e0c:	db07      	blt.n	414e1e <_lv_disp_pop_from_inv_buf+0x1c>
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
  414e0e:	1a5b      	subs	r3, r3, r1
  414e10:	f8b0 2182 	ldrh.w	r2, [r0, #386]	; 0x182
  414e14:	f363 0209 	bfi	r2, r3, #0, #10
  414e18:	f8a0 2182 	strh.w	r2, [r0, #386]	; 0x182
  414e1c:	4770      	bx	lr
        disp->inv_p = 0;
  414e1e:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414e22:	f36f 0309 	bfc	r3, #0, #10
  414e26:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
  414e2a:	4770      	bx	lr

00414e2c <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
  414e2c:	6843      	ldr	r3, [r0, #4]
  414e2e:	681a      	ldr	r2, [r3, #0]
  414e30:	b12a      	cbz	r2, 414e3e <lv_disp_is_double_buf+0x12>
  414e32:	685b      	ldr	r3, [r3, #4]
  414e34:	b10b      	cbz	r3, 414e3a <lv_disp_is_double_buf+0xe>
        return true;
  414e36:	2001      	movs	r0, #1
    else
        return false;
}
  414e38:	4770      	bx	lr
        return false;
  414e3a:	2000      	movs	r0, #0
  414e3c:	4770      	bx	lr
  414e3e:	2000      	movs	r0, #0
  414e40:	4770      	bx	lr
	...

00414e44 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
  414e44:	b538      	push	{r3, r4, r5, lr}
  414e46:	4605      	mov	r5, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
  414e48:	f9b0 4000 	ldrsh.w	r4, [r0]
  414e4c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414e50:	fb03 f404 	mul.w	r4, r3, r4

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
  414e54:	4b06      	ldr	r3, [pc, #24]	; (414e70 <lv_disp_is_true_double_buf+0x2c>)
  414e56:	4798      	blx	r3
  414e58:	b130      	cbz	r0, 414e68 <lv_disp_is_true_double_buf+0x24>
  414e5a:	4603      	mov	r3, r0
  414e5c:	686a      	ldr	r2, [r5, #4]
  414e5e:	68d2      	ldr	r2, [r2, #12]
  414e60:	4294      	cmp	r4, r2
  414e62:	d002      	beq.n	414e6a <lv_disp_is_true_double_buf+0x26>
        return true;
    }
    else {
        return false;
  414e64:	2300      	movs	r3, #0
  414e66:	e000      	b.n	414e6a <lv_disp_is_true_double_buf+0x26>
  414e68:	2300      	movs	r3, #0
    }
}
  414e6a:	4618      	mov	r0, r3
  414e6c:	bd38      	pop	{r3, r4, r5, pc}
  414e6e:	bf00      	nop
  414e70:	00414e2d 	.word	0x00414e2d

00414e74 <lv_disp_drv_register>:
{
  414e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414e76:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
  414e78:	483b      	ldr	r0, [pc, #236]	; (414f68 <lv_disp_drv_register+0xf4>)
  414e7a:	4b3c      	ldr	r3, [pc, #240]	; (414f6c <lv_disp_drv_register+0xf8>)
  414e7c:	4798      	blx	r3
    if(!disp) {
  414e7e:	4604      	mov	r4, r0
  414e80:	2800      	cmp	r0, #0
  414e82:	d05c      	beq.n	414f3e <lv_disp_drv_register+0xca>
    _lv_memset_00(disp, sizeof(lv_disp_t));
  414e84:	f44f 71c4 	mov.w	r1, #392	; 0x188
  414e88:	4b39      	ldr	r3, [pc, #228]	; (414f70 <lv_disp_drv_register+0xfc>)
  414e8a:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
  414e8c:	2234      	movs	r2, #52	; 0x34
  414e8e:	4629      	mov	r1, r5
  414e90:	4620      	mov	r0, r4
  414e92:	4b38      	ldr	r3, [pc, #224]	; (414f74 <lv_disp_drv_register+0x100>)
  414e94:	4798      	blx	r3
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
  414e96:	214c      	movs	r1, #76	; 0x4c
  414e98:	f104 0038 	add.w	r0, r4, #56	; 0x38
  414e9c:	4b36      	ldr	r3, [pc, #216]	; (414f78 <lv_disp_drv_register+0x104>)
  414e9e:	4798      	blx	r3
    disp->last_activity_time = 0;
  414ea0:	2300      	movs	r3, #0
  414ea2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    if(disp_def == NULL) disp_def = disp;
  414ea6:	4b35      	ldr	r3, [pc, #212]	; (414f7c <lv_disp_drv_register+0x108>)
  414ea8:	681b      	ldr	r3, [r3, #0]
  414eaa:	2b00      	cmp	r3, #0
  414eac:	d051      	beq.n	414f52 <lv_disp_drv_register+0xde>
    lv_disp_t * disp_def_tmp = disp_def;
  414eae:	4b33      	ldr	r3, [pc, #204]	; (414f7c <lv_disp_drv_register+0x108>)
  414eb0:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
  414eb2:	601c      	str	r4, [r3, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
  414eb4:	4623      	mov	r3, r4
  414eb6:	2203      	movs	r2, #3
  414eb8:	211e      	movs	r1, #30
  414eba:	4831      	ldr	r0, [pc, #196]	; (414f80 <lv_disp_drv_register+0x10c>)
  414ebc:	4d31      	ldr	r5, [pc, #196]	; (414f84 <lv_disp_drv_register+0x110>)
  414ebe:	47a8      	blx	r5
  414ec0:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
  414ec2:	4b31      	ldr	r3, [pc, #196]	; (414f88 <lv_disp_drv_register+0x114>)
  414ec4:	4798      	blx	r3
  414ec6:	2800      	cmp	r0, #0
  414ec8:	d046      	beq.n	414f58 <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
  414eca:	6b63      	ldr	r3, [r4, #52]	; 0x34
  414ecc:	2b00      	cmp	r3, #0
  414ece:	d049      	beq.n	414f64 <lv_disp_drv_register+0xf0>
    disp->inv_p = 0;
  414ed0:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
  414ed4:	f36f 0309 	bfc	r3, #0, #10
  414ed8:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
    disp->last_activity_time = 0;
  414edc:	2500      	movs	r5, #0
  414ede:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
    disp->bg_color = LV_COLOR_WHITE;
  414ee2:	4b2a      	ldr	r3, [pc, #168]	; (414f8c <lv_disp_drv_register+0x118>)
  414ee4:	881b      	ldrh	r3, [r3, #0]
  414ee6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    disp->bg_img = NULL;
  414eea:	65e5      	str	r5, [r4, #92]	; 0x5c
    disp->bg_opa = LV_OPA_COVER;
  414eec:	23ff      	movs	r3, #255	; 0xff
  414eee:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    disp->prev_scr  = NULL;
  414ef2:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
  414ef4:	4629      	mov	r1, r5
  414ef6:	4628      	mov	r0, r5
  414ef8:	4e25      	ldr	r6, [pc, #148]	; (414f90 <lv_disp_drv_register+0x11c>)
  414efa:	47b0      	blx	r6
  414efc:	6460      	str	r0, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
  414efe:	4629      	mov	r1, r5
  414f00:	4628      	mov	r0, r5
  414f02:	47b0      	blx	r6
  414f04:	6520      	str	r0, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
  414f06:	4629      	mov	r1, r5
  414f08:	4628      	mov	r0, r5
  414f0a:	47b0      	blx	r6
  414f0c:	6560      	str	r0, [r4, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
  414f0e:	4629      	mov	r1, r5
  414f10:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414f12:	4e20      	ldr	r6, [pc, #128]	; (414f94 <lv_disp_drv_register+0x120>)
  414f14:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
  414f16:	4629      	mov	r1, r5
  414f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414f1a:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
  414f1c:	4629      	mov	r1, r5
  414f1e:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414f20:	4e1d      	ldr	r6, [pc, #116]	; (414f98 <lv_disp_drv_register+0x124>)
  414f22:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
  414f24:	4629      	mov	r1, r5
  414f26:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414f28:	47b0      	blx	r6
    lv_obj_invalidate(disp->act_scr);
  414f2a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  414f2c:	4b1b      	ldr	r3, [pc, #108]	; (414f9c <lv_disp_drv_register+0x128>)
  414f2e:	4798      	blx	r3
    disp_def = disp_def_tmp; /*Revert the default display*/
  414f30:	4b12      	ldr	r3, [pc, #72]	; (414f7c <lv_disp_drv_register+0x108>)
  414f32:	601f      	str	r7, [r3, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
  414f34:	6b60      	ldr	r0, [r4, #52]	; 0x34
  414f36:	4b1a      	ldr	r3, [pc, #104]	; (414fa0 <lv_disp_drv_register+0x12c>)
  414f38:	4798      	blx	r3
}
  414f3a:	4620      	mov	r0, r4
  414f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
  414f3e:	4b12      	ldr	r3, [pc, #72]	; (414f88 <lv_disp_drv_register+0x114>)
  414f40:	4798      	blx	r3
  414f42:	2800      	cmp	r0, #0
  414f44:	d1f9      	bne.n	414f3a <lv_disp_drv_register+0xc6>
  414f46:	4622      	mov	r2, r4
  414f48:	2300      	movs	r3, #0
  414f4a:	4816      	ldr	r0, [pc, #88]	; (414fa4 <lv_disp_drv_register+0x130>)
  414f4c:	4916      	ldr	r1, [pc, #88]	; (414fa8 <lv_disp_drv_register+0x134>)
  414f4e:	4788      	blx	r1
  414f50:	e7fe      	b.n	414f50 <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
  414f52:	4b0a      	ldr	r3, [pc, #40]	; (414f7c <lv_disp_drv_register+0x108>)
  414f54:	601c      	str	r4, [r3, #0]
  414f56:	e7aa      	b.n	414eae <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
  414f58:	6b62      	ldr	r2, [r4, #52]	; 0x34
  414f5a:	2300      	movs	r3, #0
  414f5c:	4811      	ldr	r0, [pc, #68]	; (414fa4 <lv_disp_drv_register+0x130>)
  414f5e:	4912      	ldr	r1, [pc, #72]	; (414fa8 <lv_disp_drv_register+0x134>)
  414f60:	4788      	blx	r1
  414f62:	e7fe      	b.n	414f62 <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
  414f64:	2400      	movs	r4, #0
  414f66:	e7e8      	b.n	414f3a <lv_disp_drv_register+0xc6>
  414f68:	2043a26c 	.word	0x2043a26c
  414f6c:	004160f1 	.word	0x004160f1
  414f70:	00416af1 	.word	0x00416af1
  414f74:	004167cd 	.word	0x004167cd
  414f78:	004160df 	.word	0x004160df
  414f7c:	2040c7c0 	.word	0x2040c7c0
  414f80:	00409c21 	.word	0x00409c21
  414f84:	00417529 	.word	0x00417529
  414f88:	00415e79 	.word	0x00415e79
  414f8c:	0042f704 	.word	0x0042f704
  414f90:	00406815 	.word	0x00406815
  414f94:	00407961 	.word	0x00407961
  414f98:	0040571d 	.word	0x0040571d
  414f9c:	00405f59 	.word	0x00405f59
  414fa0:	004178f1 	.word	0x004178f1
  414fa4:	0042c154 	.word	0x0042c154
  414fa8:	00415e85 	.word	0x00415e85

00414fac <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
  414fac:	b510      	push	{r4, lr}
  414fae:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
  414fb0:	211c      	movs	r1, #28
  414fb2:	4b08      	ldr	r3, [pc, #32]	; (414fd4 <lv_indev_drv_init+0x28>)
  414fb4:	4798      	blx	r3

    driver->type                 = LV_INDEV_TYPE_NONE;
  414fb6:	2300      	movs	r3, #0
  414fb8:	7023      	strb	r3, [r4, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
  414fba:	230a      	movs	r3, #10
  414fbc:	7523      	strb	r3, [r4, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
  414fbe:	7563      	strb	r3, [r4, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
  414fc0:	f44f 73c8 	mov.w	r3, #400	; 0x190
  414fc4:	8323      	strh	r3, [r4, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
  414fc6:	2364      	movs	r3, #100	; 0x64
  414fc8:	8363      	strh	r3, [r4, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
  414fca:	2332      	movs	r3, #50	; 0x32
  414fcc:	75e3      	strb	r3, [r4, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
  414fce:	2303      	movs	r3, #3
  414fd0:	75a3      	strb	r3, [r4, #22]
  414fd2:	bd10      	pop	{r4, pc}
  414fd4:	00416af1 	.word	0x00416af1

00414fd8 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
  414fd8:	b538      	push	{r3, r4, r5, lr}
  414fda:	4605      	mov	r5, r0

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  414fdc:	68c3      	ldr	r3, [r0, #12]
  414fde:	b313      	cbz	r3, 415026 <lv_indev_drv_register+0x4e>

    if(driver->disp == NULL) {
  414fe0:	68eb      	ldr	r3, [r5, #12]
  414fe2:	2b00      	cmp	r3, #0
  414fe4:	d02d      	beq.n	415042 <lv_indev_drv_register+0x6a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
  414fe6:	4818      	ldr	r0, [pc, #96]	; (415048 <lv_indev_drv_register+0x70>)
  414fe8:	4b18      	ldr	r3, [pc, #96]	; (41504c <lv_indev_drv_register+0x74>)
  414fea:	4798      	blx	r3
    if(!indev) {
  414fec:	4604      	mov	r4, r0
  414fee:	b1f0      	cbz	r0, 41502e <lv_indev_drv_register+0x56>
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
  414ff0:	2160      	movs	r1, #96	; 0x60
  414ff2:	4b17      	ldr	r3, [pc, #92]	; (415050 <lv_indev_drv_register+0x78>)
  414ff4:	4798      	blx	r3
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
  414ff6:	221c      	movs	r2, #28
  414ff8:	4629      	mov	r1, r5
  414ffa:	4620      	mov	r0, r4
  414ffc:	4b15      	ldr	r3, [pc, #84]	; (415054 <lv_indev_drv_register+0x7c>)
  414ffe:	4798      	blx	r3

    indev->proc.reset_query = 1;
  415000:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  415004:	f043 0302 	orr.w	r3, r3, #2
  415008:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
  41500c:	2300      	movs	r3, #0
  41500e:	6563      	str	r3, [r4, #84]	; 0x54
    indev->group            = NULL;
  415010:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->btn_points       = NULL;
  415012:	65e3      	str	r3, [r4, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
  415014:	4623      	mov	r3, r4
  415016:	2204      	movs	r2, #4
  415018:	211e      	movs	r1, #30
  41501a:	480f      	ldr	r0, [pc, #60]	; (415058 <lv_indev_drv_register+0x80>)
  41501c:	4d0f      	ldr	r5, [pc, #60]	; (41505c <lv_indev_drv_register+0x84>)
  41501e:	47a8      	blx	r5
  415020:	6120      	str	r0, [r4, #16]

    return indev;
}
  415022:	4620      	mov	r0, r4
  415024:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  415026:	4b0e      	ldr	r3, [pc, #56]	; (415060 <lv_indev_drv_register+0x88>)
  415028:	4798      	blx	r3
  41502a:	60e8      	str	r0, [r5, #12]
  41502c:	e7d8      	b.n	414fe0 <lv_indev_drv_register+0x8>
        LV_ASSERT_MEM(indev);
  41502e:	4b0d      	ldr	r3, [pc, #52]	; (415064 <lv_indev_drv_register+0x8c>)
  415030:	4798      	blx	r3
  415032:	2800      	cmp	r0, #0
  415034:	d1f5      	bne.n	415022 <lv_indev_drv_register+0x4a>
  415036:	4622      	mov	r2, r4
  415038:	2300      	movs	r3, #0
  41503a:	480b      	ldr	r0, [pc, #44]	; (415068 <lv_indev_drv_register+0x90>)
  41503c:	490b      	ldr	r1, [pc, #44]	; (41506c <lv_indev_drv_register+0x94>)
  41503e:	4788      	blx	r1
  415040:	e7fe      	b.n	415040 <lv_indev_drv_register+0x68>
        return NULL;
  415042:	2400      	movs	r4, #0
  415044:	e7ed      	b.n	415022 <lv_indev_drv_register+0x4a>
  415046:	bf00      	nop
  415048:	2043a260 	.word	0x2043a260
  41504c:	004160f1 	.word	0x004160f1
  415050:	00416af1 	.word	0x00416af1
  415054:	004167cd 	.word	0x004167cd
  415058:	004052b9 	.word	0x004052b9
  41505c:	00417529 	.word	0x00417529
  415060:	00414ce5 	.word	0x00414ce5
  415064:	00415e79 	.word	0x00415e79
  415068:	0042c154 	.word	0x0042c154
  41506c:	00415e85 	.word	0x00415e85

00415070 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
  415070:	b508      	push	{r3, lr}
    if(indev == NULL)
  415072:	b120      	cbz	r0, 41507e <lv_indev_get_next+0xe>
  415074:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
  415076:	4804      	ldr	r0, [pc, #16]	; (415088 <lv_indev_get_next+0x18>)
  415078:	4b04      	ldr	r3, [pc, #16]	; (41508c <lv_indev_get_next+0x1c>)
  41507a:	4798      	blx	r3
}
  41507c:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
  41507e:	4802      	ldr	r0, [pc, #8]	; (415088 <lv_indev_get_next+0x18>)
  415080:	4b03      	ldr	r3, [pc, #12]	; (415090 <lv_indev_get_next+0x20>)
  415082:	4798      	blx	r3
  415084:	bd08      	pop	{r3, pc}
  415086:	bf00      	nop
  415088:	2043a260 	.word	0x2043a260
  41508c:	0041619d 	.word	0x0041619d
  415090:	00416189 	.word	0x00416189

00415094 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
  415094:	b538      	push	{r3, r4, r5, lr}
  415096:	4604      	mov	r4, r0
  415098:	460d      	mov	r5, r1
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
  41509a:	2110      	movs	r1, #16
  41509c:	4628      	mov	r0, r5
  41509e:	4b10      	ldr	r3, [pc, #64]	; (4150e0 <_lv_indev_read+0x4c>)
  4150a0:	4798      	blx	r3

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
  4150a2:	7823      	ldrb	r3, [r4, #0]
  4150a4:	2b01      	cmp	r3, #1
  4150a6:	d009      	beq.n	4150bc <_lv_indev_read+0x28>
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
  4150a8:	2b02      	cmp	r3, #2
  4150aa:	d00e      	beq.n	4150ca <_lv_indev_read+0x36>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
  4150ac:	2b04      	cmp	r3, #4
  4150ae:	d00f      	beq.n	4150d0 <_lv_indev_read+0x3c>
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
  4150b0:	6863      	ldr	r3, [r4, #4]
  4150b2:	b193      	cbz	r3, 4150da <_lv_indev_read+0x46>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
  4150b4:	4629      	mov	r1, r5
  4150b6:	4620      	mov	r0, r4
  4150b8:	4798      	blx	r3
  4150ba:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.act_point.x;
  4150bc:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  4150c0:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
  4150c2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  4150c6:	806b      	strh	r3, [r5, #2]
  4150c8:	e7f2      	b.n	4150b0 <_lv_indev_read+0x1c>
        data->key = indev->proc.types.keypad.last_key;
  4150ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4150cc:	606b      	str	r3, [r5, #4]
  4150ce:	e7ef      	b.n	4150b0 <_lv_indev_read+0x1c>
        data->key = LV_KEY_ENTER;
  4150d0:	230a      	movs	r3, #10
  4150d2:	606b      	str	r3, [r5, #4]
        data->enc_diff = 0;
  4150d4:	2300      	movs	r3, #0
  4150d6:	81ab      	strh	r3, [r5, #12]
  4150d8:	e7ea      	b.n	4150b0 <_lv_indev_read+0x1c>
    bool cont = false;
  4150da:	2000      	movs	r0, #0
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
  4150dc:	bd38      	pop	{r3, r4, r5, pc}
  4150de:	bf00      	nop
  4150e0:	00416af1 	.word	0x00416af1

004150e4 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
  4150e4:	2200      	movs	r2, #0
  4150e6:	4b03      	ldr	r3, [pc, #12]	; (4150f4 <lv_tick_inc+0x10>)
  4150e8:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
  4150ea:	4a03      	ldr	r2, [pc, #12]	; (4150f8 <lv_tick_inc+0x14>)
  4150ec:	6813      	ldr	r3, [r2, #0]
  4150ee:	4418      	add	r0, r3
  4150f0:	6010      	str	r0, [r2, #0]
  4150f2:	4770      	bx	lr
  4150f4:	2040c7c8 	.word	0x2040c7c8
  4150f8:	2040c7c4 	.word	0x2040c7c4

004150fc <lv_tick_get>:
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
  4150fc:	4b04      	ldr	r3, [pc, #16]	; (415110 <lv_tick_get+0x14>)
  4150fe:	2201      	movs	r2, #1
  415100:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
  415102:	4a04      	ldr	r2, [pc, #16]	; (415114 <lv_tick_get+0x18>)
  415104:	6810      	ldr	r0, [r2, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
  415106:	781b      	ldrb	r3, [r3, #0]
  415108:	2b00      	cmp	r3, #0
  41510a:	d0f7      	beq.n	4150fc <lv_tick_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
  41510c:	4770      	bx	lr
  41510e:	bf00      	nop
  415110:	2040c7c8 	.word	0x2040c7c8
  415114:	2040c7c4 	.word	0x2040c7c4

00415118 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
  415118:	b510      	push	{r4, lr}
  41511a:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
  41511c:	4b03      	ldr	r3, [pc, #12]	; (41512c <lv_tick_elaps+0x14>)
  41511e:	4798      	blx	r3

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
  415120:	42a0      	cmp	r0, r4
  415122:	d201      	bcs.n	415128 <lv_tick_elaps+0x10>
        prev_tick = act_time - prev_tick;
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
  415124:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
  415126:	bd10      	pop	{r4, pc}
        prev_tick = act_time - prev_tick;
  415128:	1b00      	subs	r0, r0, r4
  41512a:	bd10      	pop	{r4, pc}
  41512c:	004150fd 	.word	0x004150fd

00415130 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
  415130:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  415132:	6a88      	ldr	r0, [r1, #40]	; 0x28
  415134:	4282      	cmp	r2, r0
  415136:	d00b      	beq.n	415150 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
  415138:	0280      	lsls	r0, r0, #10
  41513a:	fb90 f0f2 	sdiv	r0, r0, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
  41513e:	6a0b      	ldr	r3, [r1, #32]
  415140:	698a      	ldr	r2, [r1, #24]
  415142:	1a9b      	subs	r3, r3, r2
  415144:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
  415148:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
  41514c:	b200      	sxth	r0, r0
  41514e:	4770      	bx	lr
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
  415150:	f44f 6080 	mov.w	r0, #1024	; 0x400
  415154:	e7f3      	b.n	41513e <lv_anim_path_linear+0xe>
	...

00415158 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
  415158:	b508      	push	{r3, lr}
    anim_list_changed = true;
  41515a:	2201      	movs	r2, #1
  41515c:	4b08      	ldr	r3, [pc, #32]	; (415180 <anim_mark_list_change+0x28>)
  41515e:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
  415160:	4808      	ldr	r0, [pc, #32]	; (415184 <anim_mark_list_change+0x2c>)
  415162:	4b09      	ldr	r3, [pc, #36]	; (415188 <anim_mark_list_change+0x30>)
  415164:	4798      	blx	r3
  415166:	b128      	cbz	r0, 415174 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
  415168:	2104      	movs	r1, #4
  41516a:	4b08      	ldr	r3, [pc, #32]	; (41518c <anim_mark_list_change+0x34>)
  41516c:	6818      	ldr	r0, [r3, #0]
  41516e:	4b08      	ldr	r3, [pc, #32]	; (415190 <anim_mark_list_change+0x38>)
  415170:	4798      	blx	r3
  415172:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
  415174:	2100      	movs	r1, #0
  415176:	4b05      	ldr	r3, [pc, #20]	; (41518c <anim_mark_list_change+0x34>)
  415178:	6818      	ldr	r0, [r3, #0]
  41517a:	4b05      	ldr	r3, [pc, #20]	; (415190 <anim_mark_list_change+0x38>)
  41517c:	4798      	blx	r3
  41517e:	bd08      	pop	{r3, pc}
  415180:	2040c7d0 	.word	0x2040c7d0
  415184:	2043a330 	.word	0x2043a330
  415188:	00416189 	.word	0x00416189
  41518c:	2040c7cc 	.word	0x2040c7cc
  415190:	0041787d 	.word	0x0041787d

00415194 <anim_ready_handler>:
{
  415194:	b510      	push	{r4, lr}
  415196:	b092      	sub	sp, #72	; 0x48
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
  415198:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  41519c:	f013 0301 	ands.w	r3, r3, #1
  4151a0:	d107      	bne.n	4151b2 <anim_ready_handler+0x1e>
  4151a2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  4151a4:	b12a      	cbz	r2, 4151b2 <anim_ready_handler+0x1e>
  4151a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4151aa:	428a      	cmp	r2, r1
  4151ac:	d001      	beq.n	4151b2 <anim_ready_handler+0x1e>
        a->repeat_cnt--;
  4151ae:	3a01      	subs	r2, #1
  4151b0:	8702      	strh	r2, [r0, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  4151b2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  4151b4:	b9b2      	cbnz	r2, 4151e4 <anim_ready_handler+0x50>
  4151b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4151b8:	b102      	cbz	r2, 4151bc <anim_ready_handler+0x28>
  4151ba:	b19b      	cbz	r3, 4151e4 <anim_ready_handler+0x50>
  4151bc:	4604      	mov	r4, r0
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
  4151be:	2244      	movs	r2, #68	; 0x44
  4151c0:	4601      	mov	r1, r0
  4151c2:	a801      	add	r0, sp, #4
  4151c4:	4b16      	ldr	r3, [pc, #88]	; (415220 <anim_ready_handler+0x8c>)
  4151c6:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  4151c8:	4621      	mov	r1, r4
  4151ca:	4816      	ldr	r0, [pc, #88]	; (415224 <anim_ready_handler+0x90>)
  4151cc:	4b16      	ldr	r3, [pc, #88]	; (415228 <anim_ready_handler+0x94>)
  4151ce:	4798      	blx	r3
        lv_mem_free(a);
  4151d0:	4620      	mov	r0, r4
  4151d2:	4b16      	ldr	r3, [pc, #88]	; (41522c <anim_ready_handler+0x98>)
  4151d4:	4798      	blx	r3
        anim_mark_list_change();
  4151d6:	4b16      	ldr	r3, [pc, #88]	; (415230 <anim_ready_handler+0x9c>)
  4151d8:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
  4151da:	9b04      	ldr	r3, [sp, #16]
  4151dc:	b1e3      	cbz	r3, 415218 <anim_ready_handler+0x84>
  4151de:	a801      	add	r0, sp, #4
  4151e0:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  4151e2:	e019      	b.n	415218 <anim_ready_handler+0x84>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  4151e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
  4151e6:	4252      	negs	r2, r2
  4151e8:	6282      	str	r2, [r0, #40]	; 0x28
        if(a->playback_time != 0) {
  4151ea:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4151ec:	b1a2      	cbz	r2, 415218 <anim_ready_handler+0x84>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
  4151ee:	b913      	cbnz	r3, 4151f6 <anim_ready_handler+0x62>
  4151f0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  4151f2:	4249      	negs	r1, r1
  4151f4:	6281      	str	r1, [r0, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
  4151f6:	f083 0301 	eor.w	r3, r3, #1
  4151fa:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
  4151fe:	f363 0100 	bfi	r1, r3, #0, #1
  415202:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
            tmp      = a->start;
  415206:	6983      	ldr	r3, [r0, #24]
            a->start = a->end;
  415208:	6a04      	ldr	r4, [r0, #32]
  41520a:	6184      	str	r4, [r0, #24]
            a->end   = tmp;
  41520c:	6203      	str	r3, [r0, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
  41520e:	f011 0f01 	tst.w	r1, #1
  415212:	d100      	bne.n	415216 <anim_ready_handler+0x82>
  415214:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  415216:	6242      	str	r2, [r0, #36]	; 0x24
}
  415218:	4b06      	ldr	r3, [pc, #24]	; (415234 <anim_ready_handler+0xa0>)
  41521a:	7818      	ldrb	r0, [r3, #0]
  41521c:	b012      	add	sp, #72	; 0x48
  41521e:	bd10      	pop	{r4, pc}
  415220:	004167cd 	.word	0x004167cd
  415224:	2043a330 	.word	0x2043a330
  415228:	00416245 	.word	0x00416245
  41522c:	00416681 	.word	0x00416681
  415230:	00415159 	.word	0x00415159
  415234:	2040c7d0 	.word	0x2040c7d0

00415238 <anim_task>:
{
  415238:	b538      	push	{r3, r4, r5, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  41523a:	4836      	ldr	r0, [pc, #216]	; (415314 <anim_task+0xdc>)
  41523c:	4b36      	ldr	r3, [pc, #216]	; (415318 <anim_task+0xe0>)
  41523e:	4798      	blx	r3
  415240:	e009      	b.n	415256 <anim_task+0x1e>
        a->has_run = 0;
  415242:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  415246:	f36f 0341 	bfc	r3, #1, #1
  41524a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  41524e:	4601      	mov	r1, r0
  415250:	4830      	ldr	r0, [pc, #192]	; (415314 <anim_task+0xdc>)
  415252:	4b32      	ldr	r3, [pc, #200]	; (41531c <anim_task+0xe4>)
  415254:	4798      	blx	r3
  415256:	2800      	cmp	r0, #0
  415258:	d1f3      	bne.n	415242 <anim_task+0xa>
    uint32_t elaps = lv_tick_elaps(last_task_run);
  41525a:	4b31      	ldr	r3, [pc, #196]	; (415320 <anim_task+0xe8>)
  41525c:	6818      	ldr	r0, [r3, #0]
  41525e:	4b31      	ldr	r3, [pc, #196]	; (415324 <anim_task+0xec>)
  415260:	4798      	blx	r3
  415262:	4605      	mov	r5, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  415264:	482b      	ldr	r0, [pc, #172]	; (415314 <anim_task+0xdc>)
  415266:	4b2c      	ldr	r3, [pc, #176]	; (415318 <anim_task+0xe0>)
  415268:	4798      	blx	r3
  41526a:	4604      	mov	r4, r0
    while(a != NULL) {
  41526c:	e022      	b.n	4152b4 <anim_task+0x7c>
            if(a->act_time <= 0 && new_act_time >= 0) {
  41526e:	2a00      	cmp	r2, #0
  415270:	db31      	blt.n	4152d6 <anim_task+0x9e>
                if(a->start_cb) a->start_cb(a);
  415272:	68a3      	ldr	r3, [r4, #8]
  415274:	2b00      	cmp	r3, #0
  415276:	d02e      	beq.n	4152d6 <anim_task+0x9e>
  415278:	4620      	mov	r0, r4
  41527a:	4798      	blx	r3
  41527c:	e02b      	b.n	4152d6 <anim_task+0x9e>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
  41527e:	6923      	ldr	r3, [r4, #16]
  415280:	2b00      	cmp	r3, #0
  415282:	d032      	beq.n	4152ea <anim_task+0xb2>
  415284:	4621      	mov	r1, r4
  415286:	f104 0010 	add.w	r0, r4, #16
  41528a:	4798      	blx	r3
                if(new_value != a->current) {
  41528c:	69e3      	ldr	r3, [r4, #28]
  41528e:	4298      	cmp	r0, r3
  415290:	d005      	beq.n	41529e <anim_task+0x66>
                    a->current = new_value;
  415292:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
  415294:	6863      	ldr	r3, [r4, #4]
  415296:	b113      	cbz	r3, 41529e <anim_task+0x66>
  415298:	b201      	sxth	r1, r0
  41529a:	6820      	ldr	r0, [r4, #0]
  41529c:	4798      	blx	r3
                if(a->act_time >= a->time) {
  41529e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4152a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4152a2:	429a      	cmp	r2, r3
  4152a4:	da27      	bge.n	4152f6 <anim_task+0xbe>
        if(anim_list_changed)
  4152a6:	4b20      	ldr	r3, [pc, #128]	; (415328 <anim_task+0xf0>)
  4152a8:	781b      	ldrb	r3, [r3, #0]
  4152aa:	b343      	cbz	r3, 4152fe <anim_task+0xc6>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  4152ac:	4819      	ldr	r0, [pc, #100]	; (415314 <anim_task+0xdc>)
  4152ae:	4b1a      	ldr	r3, [pc, #104]	; (415318 <anim_task+0xe0>)
  4152b0:	4798      	blx	r3
  4152b2:	4604      	mov	r4, r0
    while(a != NULL) {
  4152b4:	b34c      	cbz	r4, 41530a <anim_task+0xd2>
        anim_list_changed = false;
  4152b6:	2200      	movs	r2, #0
  4152b8:	4b1b      	ldr	r3, [pc, #108]	; (415328 <anim_task+0xf0>)
  4152ba:	701a      	strb	r2, [r3, #0]
        if(!a->has_run) {
  4152bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  4152c0:	f013 0f02 	tst.w	r3, #2
  4152c4:	d1ef      	bne.n	4152a6 <anim_task+0x6e>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
  4152c6:	f043 0302 	orr.w	r3, r3, #2
  4152ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
  4152ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4152d0:	18ea      	adds	r2, r5, r3
            if(a->act_time <= 0 && new_act_time >= 0) {
  4152d2:	2b00      	cmp	r3, #0
  4152d4:	ddcb      	ble.n	41526e <anim_task+0x36>
            a->act_time += elaps;
  4152d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4152d8:	442b      	add	r3, r5
  4152da:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
  4152dc:	2b00      	cmp	r3, #0
  4152de:	dbe2      	blt.n	4152a6 <anim_task+0x6e>
                if(a->act_time > a->time) a->act_time = a->time;
  4152e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4152e2:	4293      	cmp	r3, r2
  4152e4:	ddcb      	ble.n	41527e <anim_task+0x46>
  4152e6:	62a2      	str	r2, [r4, #40]	; 0x28
  4152e8:	e7c9      	b.n	41527e <anim_task+0x46>
                else new_value = lv_anim_path_linear(&a->path, a);
  4152ea:	4621      	mov	r1, r4
  4152ec:	f104 0010 	add.w	r0, r4, #16
  4152f0:	4b0e      	ldr	r3, [pc, #56]	; (41532c <anim_task+0xf4>)
  4152f2:	4798      	blx	r3
  4152f4:	e7ca      	b.n	41528c <anim_task+0x54>
                    anim_ready_handler(a);
  4152f6:	4620      	mov	r0, r4
  4152f8:	4b0d      	ldr	r3, [pc, #52]	; (415330 <anim_task+0xf8>)
  4152fa:	4798      	blx	r3
  4152fc:	e7d3      	b.n	4152a6 <anim_task+0x6e>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  4152fe:	4621      	mov	r1, r4
  415300:	4804      	ldr	r0, [pc, #16]	; (415314 <anim_task+0xdc>)
  415302:	4b06      	ldr	r3, [pc, #24]	; (41531c <anim_task+0xe4>)
  415304:	4798      	blx	r3
  415306:	4604      	mov	r4, r0
  415308:	e7d4      	b.n	4152b4 <anim_task+0x7c>
    last_task_run = lv_tick_get();
  41530a:	4b0a      	ldr	r3, [pc, #40]	; (415334 <anim_task+0xfc>)
  41530c:	4798      	blx	r3
  41530e:	4b04      	ldr	r3, [pc, #16]	; (415320 <anim_task+0xe8>)
  415310:	6018      	str	r0, [r3, #0]
  415312:	bd38      	pop	{r3, r4, r5, pc}
  415314:	2043a330 	.word	0x2043a330
  415318:	00416189 	.word	0x00416189
  41531c:	0041619d 	.word	0x0041619d
  415320:	2040c7d4 	.word	0x2040c7d4
  415324:	00415119 	.word	0x00415119
  415328:	2040c7d0 	.word	0x2040c7d0
  41532c:	00415131 	.word	0x00415131
  415330:	00415195 	.word	0x00415195
  415334:	004150fd 	.word	0x004150fd

00415338 <_lv_anim_core_init>:
{
  415338:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
  41533a:	2144      	movs	r1, #68	; 0x44
  41533c:	480a      	ldr	r0, [pc, #40]	; (415368 <_lv_anim_core_init+0x30>)
  41533e:	4b0b      	ldr	r3, [pc, #44]	; (41536c <_lv_anim_core_init+0x34>)
  415340:	4798      	blx	r3
    last_task_run = lv_tick_get();
  415342:	4b0b      	ldr	r3, [pc, #44]	; (415370 <_lv_anim_core_init+0x38>)
  415344:	4798      	blx	r3
  415346:	4b0b      	ldr	r3, [pc, #44]	; (415374 <_lv_anim_core_init+0x3c>)
  415348:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
  41534a:	2300      	movs	r3, #0
  41534c:	2204      	movs	r2, #4
  41534e:	211e      	movs	r1, #30
  415350:	4809      	ldr	r0, [pc, #36]	; (415378 <_lv_anim_core_init+0x40>)
  415352:	4c0a      	ldr	r4, [pc, #40]	; (41537c <_lv_anim_core_init+0x44>)
  415354:	47a0      	blx	r4
  415356:	4b0a      	ldr	r3, [pc, #40]	; (415380 <_lv_anim_core_init+0x48>)
  415358:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
  41535a:	4b0a      	ldr	r3, [pc, #40]	; (415384 <_lv_anim_core_init+0x4c>)
  41535c:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actually changed*/
  41535e:	2200      	movs	r2, #0
  415360:	4b09      	ldr	r3, [pc, #36]	; (415388 <_lv_anim_core_init+0x50>)
  415362:	701a      	strb	r2, [r3, #0]
  415364:	bd10      	pop	{r4, pc}
  415366:	bf00      	nop
  415368:	2043a330 	.word	0x2043a330
  41536c:	004160df 	.word	0x004160df
  415370:	004150fd 	.word	0x004150fd
  415374:	2040c7d4 	.word	0x2040c7d4
  415378:	00415239 	.word	0x00415239
  41537c:	00417529 	.word	0x00417529
  415380:	2040c7cc 	.word	0x2040c7cc
  415384:	00415159 	.word	0x00415159
  415388:	2040c7d0 	.word	0x2040c7d0

0041538c <lv_anim_init>:
{
  41538c:	b510      	push	{r4, lr}
  41538e:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
  415390:	2144      	movs	r1, #68	; 0x44
  415392:	4b0f      	ldr	r3, [pc, #60]	; (4153d0 <lv_anim_init+0x44>)
  415394:	4798      	blx	r3
    a->time    = 500;
  415396:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  41539a:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
  41539c:	2300      	movs	r3, #0
  41539e:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
  4153a0:	2364      	movs	r3, #100	; 0x64
  4153a2:	6223      	str	r3, [r4, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
  4153a4:	f104 0110 	add.w	r1, r4, #16
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  4153a8:	4a0a      	ldr	r2, [pc, #40]	; (4153d4 <lv_anim_init+0x48>)
  4153aa:	2304      	movs	r3, #4
  4153ac:	e004      	b.n	4153b8 <lv_anim_init+0x2c>

    while(len) {
        *d8 = *s8;
  4153ae:	f812 0b01 	ldrb.w	r0, [r2], #1
  4153b2:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  4153b6:	3b01      	subs	r3, #1
    while(len) {
  4153b8:	2b00      	cmp	r3, #0
  4153ba:	d1f8      	bne.n	4153ae <lv_anim_init+0x22>
    a->repeat_cnt = 1;
  4153bc:	2301      	movs	r3, #1
  4153be:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
  4153c0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  4153c4:	f043 0301 	orr.w	r3, r3, #1
  4153c8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  4153cc:	bd10      	pop	{r4, pc}
  4153ce:	bf00      	nop
  4153d0:	00416af1 	.word	0x00416af1
  4153d4:	0042f708 	.word	0x0042f708

004153d8 <lv_anim_del>:
{
  4153d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4153dc:	4606      	mov	r6, r0
  4153de:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  4153e0:	4812      	ldr	r0, [pc, #72]	; (41542c <lv_anim_del+0x54>)
  4153e2:	4b13      	ldr	r3, [pc, #76]	; (415430 <lv_anim_del+0x58>)
  4153e4:	4798      	blx	r3
  4153e6:	4604      	mov	r4, r0
    bool del = false;
  4153e8:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
  4153ec:	e00b      	b.n	415406 <lv_anim_del+0x2e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  4153ee:	4621      	mov	r1, r4
  4153f0:	480e      	ldr	r0, [pc, #56]	; (41542c <lv_anim_del+0x54>)
  4153f2:	4b10      	ldr	r3, [pc, #64]	; (415434 <lv_anim_del+0x5c>)
  4153f4:	4798      	blx	r3
            lv_mem_free(a);
  4153f6:	4620      	mov	r0, r4
  4153f8:	4b0f      	ldr	r3, [pc, #60]	; (415438 <lv_anim_del+0x60>)
  4153fa:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
  4153fc:	4b0f      	ldr	r3, [pc, #60]	; (41543c <lv_anim_del+0x64>)
  4153fe:	4798      	blx	r3
            del = true;
  415400:	f04f 0801 	mov.w	r8, #1
  415404:	462c      	mov	r4, r5
    while(a != NULL) {
  415406:	b16c      	cbz	r4, 415424 <lv_anim_del+0x4c>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  415408:	4621      	mov	r1, r4
  41540a:	4808      	ldr	r0, [pc, #32]	; (41542c <lv_anim_del+0x54>)
  41540c:	4b0c      	ldr	r3, [pc, #48]	; (415440 <lv_anim_del+0x68>)
  41540e:	4798      	blx	r3
  415410:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  415412:	6823      	ldr	r3, [r4, #0]
  415414:	42b3      	cmp	r3, r6
  415416:	d1f5      	bne.n	415404 <lv_anim_del+0x2c>
  415418:	6863      	ldr	r3, [r4, #4]
  41541a:	42bb      	cmp	r3, r7
  41541c:	d0e7      	beq.n	4153ee <lv_anim_del+0x16>
  41541e:	2f00      	cmp	r7, #0
  415420:	d1f0      	bne.n	415404 <lv_anim_del+0x2c>
  415422:	e7e4      	b.n	4153ee <lv_anim_del+0x16>
}
  415424:	4640      	mov	r0, r8
  415426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41542a:	bf00      	nop
  41542c:	2043a330 	.word	0x2043a330
  415430:	00416189 	.word	0x00416189
  415434:	00416245 	.word	0x00416245
  415438:	00416681 	.word	0x00416681
  41543c:	00415159 	.word	0x00415159
  415440:	0041619d 	.word	0x0041619d

00415444 <lv_anim_start>:
{
  415444:	b538      	push	{r3, r4, r5, lr}
  415446:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
  415448:	6841      	ldr	r1, [r0, #4]
  41544a:	b111      	cbz	r1, 415452 <lv_anim_start+0xe>
  41544c:	6800      	ldr	r0, [r0, #0]
  41544e:	4b18      	ldr	r3, [pc, #96]	; (4154b0 <lv_anim_start+0x6c>)
  415450:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
  415452:	4818      	ldr	r0, [pc, #96]	; (4154b4 <lv_anim_start+0x70>)
  415454:	4b18      	ldr	r3, [pc, #96]	; (4154b8 <lv_anim_start+0x74>)
  415456:	4798      	blx	r3
  415458:	b9e8      	cbnz	r0, 415496 <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
  41545a:	4816      	ldr	r0, [pc, #88]	; (4154b4 <lv_anim_start+0x70>)
  41545c:	4b17      	ldr	r3, [pc, #92]	; (4154bc <lv_anim_start+0x78>)
  41545e:	4798      	blx	r3
  415460:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
  415462:	4b17      	ldr	r3, [pc, #92]	; (4154c0 <lv_anim_start+0x7c>)
  415464:	4798      	blx	r3
  415466:	b1e0      	cbz	r0, 4154a2 <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
  415468:	b1a4      	cbz	r4, 415494 <lv_anim_start+0x50>
    a->time_orig = a->time;
  41546a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  41546c:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
  41546e:	2244      	movs	r2, #68	; 0x44
  415470:	4629      	mov	r1, r5
  415472:	4620      	mov	r0, r4
  415474:	4b13      	ldr	r3, [pc, #76]	; (4154c4 <lv_anim_start+0x80>)
  415476:	4798      	blx	r3
    if(new_anim->early_apply) {
  415478:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  41547c:	f013 0f01 	tst.w	r3, #1
  415480:	d006      	beq.n	415490 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
  415482:	6863      	ldr	r3, [r4, #4]
  415484:	b123      	cbz	r3, 415490 <lv_anim_start+0x4c>
  415486:	6820      	ldr	r0, [r4, #0]
  415488:	b110      	cbz	r0, 415490 <lv_anim_start+0x4c>
  41548a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
  41548e:	4798      	blx	r3
    anim_mark_list_change();
  415490:	4b0d      	ldr	r3, [pc, #52]	; (4154c8 <lv_anim_start+0x84>)
  415492:	4798      	blx	r3
  415494:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
  415496:	4b0d      	ldr	r3, [pc, #52]	; (4154cc <lv_anim_start+0x88>)
  415498:	4798      	blx	r3
  41549a:	3801      	subs	r0, #1
  41549c:	4b0c      	ldr	r3, [pc, #48]	; (4154d0 <lv_anim_start+0x8c>)
  41549e:	6018      	str	r0, [r3, #0]
  4154a0:	e7db      	b.n	41545a <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
  4154a2:	4622      	mov	r2, r4
  4154a4:	2300      	movs	r3, #0
  4154a6:	480b      	ldr	r0, [pc, #44]	; (4154d4 <lv_anim_start+0x90>)
  4154a8:	490b      	ldr	r1, [pc, #44]	; (4154d8 <lv_anim_start+0x94>)
  4154aa:	4788      	blx	r1
  4154ac:	e7fe      	b.n	4154ac <lv_anim_start+0x68>
  4154ae:	bf00      	nop
  4154b0:	004153d9 	.word	0x004153d9
  4154b4:	2043a330 	.word	0x2043a330
  4154b8:	00416431 	.word	0x00416431
  4154bc:	004160f1 	.word	0x004160f1
  4154c0:	00415e79 	.word	0x00415e79
  4154c4:	004167cd 	.word	0x004167cd
  4154c8:	00415159 	.word	0x00415159
  4154cc:	004150fd 	.word	0x004150fd
  4154d0:	2040c7d4 	.word	0x2040c7d4
  4154d4:	0042c154 	.word	0x0042c154
  4154d8:	00415e85 	.word	0x00415e85

004154dc <lv_anim_get>:
{
  4154dc:	b538      	push	{r3, r4, r5, lr}
  4154de:	4604      	mov	r4, r0
  4154e0:	460d      	mov	r5, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  4154e2:	4808      	ldr	r0, [pc, #32]	; (415504 <lv_anim_get+0x28>)
  4154e4:	4b08      	ldr	r3, [pc, #32]	; (415508 <lv_anim_get+0x2c>)
  4154e6:	4798      	blx	r3
  4154e8:	e003      	b.n	4154f2 <lv_anim_get+0x16>
  4154ea:	4601      	mov	r1, r0
  4154ec:	4805      	ldr	r0, [pc, #20]	; (415504 <lv_anim_get+0x28>)
  4154ee:	4b07      	ldr	r3, [pc, #28]	; (41550c <lv_anim_get+0x30>)
  4154f0:	4798      	blx	r3
  4154f2:	b128      	cbz	r0, 415500 <lv_anim_get+0x24>
        if(a->var == var && a->exec_cb == exec_cb) {
  4154f4:	6803      	ldr	r3, [r0, #0]
  4154f6:	42a3      	cmp	r3, r4
  4154f8:	d1f7      	bne.n	4154ea <lv_anim_get+0xe>
  4154fa:	6843      	ldr	r3, [r0, #4]
  4154fc:	42ab      	cmp	r3, r5
  4154fe:	d1f4      	bne.n	4154ea <lv_anim_get+0xe>
}
  415500:	bd38      	pop	{r3, r4, r5, pc}
  415502:	bf00      	nop
  415504:	2043a330 	.word	0x2043a330
  415508:	00416189 	.word	0x00416189
  41550c:	0041619d 	.word	0x0041619d

00415510 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
  415510:	1a89      	subs	r1, r1, r2
  415512:	2900      	cmp	r1, #0
  415514:	bfb8      	it	lt
  415516:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
  415518:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  41551c:	fb02 f201 	mul.w	r2, r2, r1
  415520:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
  415524:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  415528:	d301      	bcc.n	41552e <lv_anim_speed_to_time+0x1e>
  41552a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    if(time == 0) {
  41552e:	b900      	cbnz	r0, 415532 <lv_anim_speed_to_time+0x22>
        time++;
  415530:	3001      	adds	r0, #1
}
  415532:	b280      	uxth	r0, r0
  415534:	4770      	bx	lr

00415536 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
  415536:	b410      	push	{r4}
    lv_coord_t r = (area->x2 - area->x1) / 2;
  415538:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  41553c:	f9b0 2000 	ldrsh.w	r2, [r0]
  415540:	1a9b      	subs	r3, r3, r2
  415542:	d417      	bmi.n	415574 <lv_point_within_circle+0x3e>
  415544:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
  415546:	b29c      	uxth	r4, r3
  415548:	fa14 f282 	uxtah	r2, r4, r2
  41554c:	b292      	uxth	r2, r2
    lv_coord_t cy = area->y1 + r;
  41554e:	8840      	ldrh	r0, [r0, #2]
  415550:	4404      	add	r4, r0
  415552:	b2a4      	uxth	r4, r4

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
  415554:	8808      	ldrh	r0, [r1, #0]
  415556:	1a82      	subs	r2, r0, r2
    lv_coord_t py = p->y - cy;
  415558:	8849      	ldrh	r1, [r1, #2]
  41555a:	1b09      	subs	r1, r1, r4

    uint32_t r_sqrd = r * r;
  41555c:	fb13 f303 	smulbb	r3, r3, r3
    uint32_t dist = (px * px) + (py * py);
  415560:	fb11 f101 	smulbb	r1, r1, r1
  415564:	fb12 1202 	smlabb	r2, r2, r2, r1

    if(dist <= r_sqrd)
  415568:	4293      	cmp	r3, r2
  41556a:	d205      	bcs.n	415578 <lv_point_within_circle+0x42>
        return true;
    else
        return false;
  41556c:	2000      	movs	r0, #0
}
  41556e:	f85d 4b04 	ldr.w	r4, [sp], #4
  415572:	4770      	bx	lr
    lv_coord_t r = (area->x2 - area->x1) / 2;
  415574:	3301      	adds	r3, #1
  415576:	e7e5      	b.n	415544 <lv_point_within_circle+0xe>
        return true;
  415578:	2001      	movs	r0, #1
  41557a:	e7f8      	b.n	41556e <lv_point_within_circle+0x38>

0041557c <lv_area_set>:
    area_p->x1 = x1;
  41557c:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
  41557e:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
  415580:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
  415582:	f9bd 3000 	ldrsh.w	r3, [sp]
  415586:	80c3      	strh	r3, [r0, #6]
  415588:	4770      	bx	lr

0041558a <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
  41558a:	8843      	ldrh	r3, [r0, #2]
  41558c:	4419      	add	r1, r3
  41558e:	b289      	uxth	r1, r1
  415590:	3901      	subs	r1, #1
  415592:	80c1      	strh	r1, [r0, #6]
  415594:	4770      	bx	lr

00415596 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
  415596:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  41559a:	f9b0 3000 	ldrsh.w	r3, [r0]
  41559e:	1ad2      	subs	r2, r2, r3
  4155a0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  4155a4:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
  4155a8:	1a18      	subs	r0, r3, r0
  4155aa:	3001      	adds	r0, #1
}
  4155ac:	fb02 0000 	mla	r0, r2, r0, r0
  4155b0:	4770      	bx	lr

004155b2 <_lv_area_intersect>:
{
  4155b2:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
  4155b4:	f9b2 4000 	ldrsh.w	r4, [r2]
  4155b8:	f9b1 3000 	ldrsh.w	r3, [r1]
  4155bc:	429c      	cmp	r4, r3
  4155be:	bfb8      	it	lt
  4155c0:	461c      	movlt	r4, r3
  4155c2:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
  4155c4:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  4155c8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  4155cc:	429d      	cmp	r5, r3
  4155ce:	bfb8      	it	lt
  4155d0:	461d      	movlt	r5, r3
  4155d2:	8045      	strh	r5, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
  4155d4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  4155d8:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  4155dc:	42b3      	cmp	r3, r6
  4155de:	bfa8      	it	ge
  4155e0:	4633      	movge	r3, r6
  4155e2:	8083      	strh	r3, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
  4155e4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  4155e8:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
  4155ec:	428a      	cmp	r2, r1
  4155ee:	bfa8      	it	ge
  4155f0:	460a      	movge	r2, r1
  4155f2:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
  4155f4:	429c      	cmp	r4, r3
  4155f6:	dc05      	bgt.n	415604 <_lv_area_intersect+0x52>
  4155f8:	4295      	cmp	r5, r2
  4155fa:	dd01      	ble.n	415600 <_lv_area_intersect+0x4e>
        union_ok = false;
  4155fc:	2000      	movs	r0, #0
  4155fe:	e002      	b.n	415606 <_lv_area_intersect+0x54>
    bool union_ok = true;
  415600:	2001      	movs	r0, #1
  415602:	e000      	b.n	415606 <_lv_area_intersect+0x54>
        union_ok = false;
  415604:	2000      	movs	r0, #0
}
  415606:	bc70      	pop	{r4, r5, r6}
  415608:	4770      	bx	lr

0041560a <_lv_area_join>:
{
  41560a:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
  41560c:	f9b2 3000 	ldrsh.w	r3, [r2]
  415610:	f9b1 4000 	ldrsh.w	r4, [r1]
  415614:	42a3      	cmp	r3, r4
  415616:	bfa8      	it	ge
  415618:	4623      	movge	r3, r4
  41561a:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
  41561c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  415620:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  415624:	42a3      	cmp	r3, r4
  415626:	bfa8      	it	ge
  415628:	4623      	movge	r3, r4
  41562a:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
  41562c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  415630:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  415634:	42a3      	cmp	r3, r4
  415636:	bfb8      	it	lt
  415638:	4623      	movlt	r3, r4
  41563a:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
  41563c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  415640:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
  415644:	4293      	cmp	r3, r2
  415646:	bfb8      	it	lt
  415648:	4613      	movlt	r3, r2
  41564a:	80c3      	strh	r3, [r0, #6]
}
  41564c:	f85d 4b04 	ldr.w	r4, [sp], #4
  415650:	4770      	bx	lr
	...

00415654 <_lv_area_is_point_on>:
{
  415654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415658:	b082      	sub	sp, #8
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
  41565a:	f9b1 3000 	ldrsh.w	r3, [r1]
  41565e:	f9b0 6000 	ldrsh.w	r6, [r0]
  415662:	42b3      	cmp	r3, r6
  415664:	db0f      	blt.n	415686 <_lv_area_is_point_on+0x32>
  415666:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  41566a:	42a3      	cmp	r3, r4
  41566c:	dc52      	bgt.n	415714 <_lv_area_is_point_on+0xc0>
  41566e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  415672:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  415676:	42a3      	cmp	r3, r4
  415678:	db4e      	blt.n	415718 <_lv_area_is_point_on+0xc4>
  41567a:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  41567e:	42a3      	cmp	r3, r4
  415680:	dd4c      	ble.n	41571c <_lv_area_is_point_on+0xc8>
    bool is_on_rect = false;
  415682:	2500      	movs	r5, #0
  415684:	e000      	b.n	415688 <_lv_area_is_point_on+0x34>
  415686:	2500      	movs	r5, #0
    if(!is_on_rect)
  415688:	2d00      	cmp	r5, #0
  41568a:	d03f      	beq.n	41570c <_lv_area_is_point_on+0xb8>
    if(radius <= 0) {
  41568c:	2a00      	cmp	r2, #0
  41568e:	dd3d      	ble.n	41570c <_lv_area_is_point_on+0xb8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415690:	8884      	ldrh	r4, [r0, #4]
  415692:	b2b3      	uxth	r3, r6
  415694:	1ae4      	subs	r4, r4, r3
  415696:	b2a4      	uxth	r4, r4
  415698:	3401      	adds	r4, #1
  41569a:	b224      	sxth	r4, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  41569c:	2c00      	cmp	r4, #0
  41569e:	db3f      	blt.n	415720 <_lv_area_is_point_on+0xcc>
  4156a0:	1064      	asrs	r4, r4, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4156a2:	88c3      	ldrh	r3, [r0, #6]
  4156a4:	8847      	ldrh	r7, [r0, #2]
  4156a6:	1bdb      	subs	r3, r3, r7
  4156a8:	b29b      	uxth	r3, r3
  4156aa:	3301      	adds	r3, #1
  4156ac:	b21b      	sxth	r3, r3
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  4156ae:	2b00      	cmp	r3, #0
  4156b0:	db38      	blt.n	415724 <_lv_area_is_point_on+0xd0>
  4156b2:	105b      	asrs	r3, r3, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
  4156b4:	429c      	cmp	r4, r3
  4156b6:	bfa8      	it	ge
  4156b8:	461c      	movge	r4, r3
  4156ba:	b224      	sxth	r4, r4
    if(radius > max_radius)
  4156bc:	42a2      	cmp	r2, r4
  4156be:	dc00      	bgt.n	4156c2 <_lv_area_is_point_on+0x6e>
  4156c0:	4614      	mov	r4, r2
  4156c2:	4688      	mov	r8, r1
  4156c4:	4607      	mov	r7, r0
    corner_area.x1 = a_p->x1;
  4156c6:	f8ad 6000 	strh.w	r6, [sp]
    corner_area.x2 = a_p->x1 + radius;
  4156ca:	8803      	ldrh	r3, [r0, #0]
  4156cc:	b2a4      	uxth	r4, r4
  4156ce:	4423      	add	r3, r4
  4156d0:	f8ad 3004 	strh.w	r3, [sp, #4]
    corner_area.y1 = a_p->y1;
  4156d4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  4156d8:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  4156dc:	8843      	ldrh	r3, [r0, #2]
  4156de:	4423      	add	r3, r4
  4156e0:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  4156e4:	2200      	movs	r2, #0
  4156e6:	4668      	mov	r0, sp
  4156e8:	f7ff ffb4 	bl	415654 <_lv_area_is_point_on>
  4156ec:	b1e0      	cbz	r0, 415728 <_lv_area_is_point_on+0xd4>
        corner_area.x2 += radius;
  4156ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4156f2:	4423      	add	r3, r4
  4156f4:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y2 += radius;
  4156f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4156fc:	441c      	add	r4, r3
  4156fe:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  415702:	4641      	mov	r1, r8
  415704:	4668      	mov	r0, sp
  415706:	4b36      	ldr	r3, [pc, #216]	; (4157e0 <_lv_area_is_point_on+0x18c>)
  415708:	4798      	blx	r3
  41570a:	4605      	mov	r5, r0
}
  41570c:	4628      	mov	r0, r5
  41570e:	b002      	add	sp, #8
  415710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_on_rect = false;
  415714:	2500      	movs	r5, #0
  415716:	e7b7      	b.n	415688 <_lv_area_is_point_on+0x34>
  415718:	2500      	movs	r5, #0
  41571a:	e7b5      	b.n	415688 <_lv_area_is_point_on+0x34>
        is_on_rect = true;
  41571c:	2501      	movs	r5, #1
  41571e:	e7b3      	b.n	415688 <_lv_area_is_point_on+0x34>
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  415720:	3401      	adds	r4, #1
  415722:	e7bd      	b.n	4156a0 <_lv_area_is_point_on+0x4c>
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  415724:	3301      	adds	r3, #1
  415726:	e7c4      	b.n	4156b2 <_lv_area_is_point_on+0x5e>
    corner_area.y1 = a_p->y2 - radius;
  415728:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
  41572c:	b293      	uxth	r3, r2
  41572e:	1b1b      	subs	r3, r3, r4
  415730:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y2;
  415734:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  415738:	2200      	movs	r2, #0
  41573a:	4641      	mov	r1, r8
  41573c:	4668      	mov	r0, sp
  41573e:	f7ff ff89 	bl	415654 <_lv_area_is_point_on>
  415742:	b178      	cbz	r0, 415764 <_lv_area_is_point_on+0x110>
        corner_area.x2 += radius;
  415744:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  415748:	4423      	add	r3, r4
  41574a:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y1 -= radius;
  41574e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  415752:	1b1c      	subs	r4, r3, r4
  415754:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  415758:	4641      	mov	r1, r8
  41575a:	4668      	mov	r0, sp
  41575c:	4b20      	ldr	r3, [pc, #128]	; (4157e0 <_lv_area_is_point_on+0x18c>)
  41575e:	4798      	blx	r3
  415760:	4605      	mov	r5, r0
  415762:	e7d3      	b.n	41570c <_lv_area_is_point_on+0xb8>
    corner_area.x1 = a_p->x2 - radius;
  415764:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
  415768:	b293      	uxth	r3, r2
  41576a:	1b1b      	subs	r3, r3, r4
  41576c:	f8ad 3000 	strh.w	r3, [sp]
    corner_area.x2 = a_p->x2;
  415770:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  415774:	2200      	movs	r2, #0
  415776:	4641      	mov	r1, r8
  415778:	4668      	mov	r0, sp
  41577a:	f7ff ff6b 	bl	415654 <_lv_area_is_point_on>
  41577e:	b178      	cbz	r0, 4157a0 <_lv_area_is_point_on+0x14c>
        corner_area.x1 -= radius;
  415780:	f8bd 3000 	ldrh.w	r3, [sp]
  415784:	1b1b      	subs	r3, r3, r4
  415786:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y1 -= radius;
  41578a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41578e:	1b1c      	subs	r4, r3, r4
  415790:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  415794:	4641      	mov	r1, r8
  415796:	4668      	mov	r0, sp
  415798:	4b11      	ldr	r3, [pc, #68]	; (4157e0 <_lv_area_is_point_on+0x18c>)
  41579a:	4798      	blx	r3
  41579c:	4605      	mov	r5, r0
  41579e:	e7b5      	b.n	41570c <_lv_area_is_point_on+0xb8>
    corner_area.y1 = a_p->y1;
  4157a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  4157a4:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  4157a8:	887b      	ldrh	r3, [r7, #2]
  4157aa:	4423      	add	r3, r4
  4157ac:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  4157b0:	2200      	movs	r2, #0
  4157b2:	4641      	mov	r1, r8
  4157b4:	4668      	mov	r0, sp
  4157b6:	f7ff ff4d 	bl	415654 <_lv_area_is_point_on>
  4157ba:	2800      	cmp	r0, #0
  4157bc:	d0a6      	beq.n	41570c <_lv_area_is_point_on+0xb8>
        corner_area.x1 -= radius;
  4157be:	f8bd 3000 	ldrh.w	r3, [sp]
  4157c2:	1b1b      	subs	r3, r3, r4
  4157c4:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y2 += radius;
  4157c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4157cc:	441c      	add	r4, r3
  4157ce:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  4157d2:	4641      	mov	r1, r8
  4157d4:	4668      	mov	r0, sp
  4157d6:	4b02      	ldr	r3, [pc, #8]	; (4157e0 <_lv_area_is_point_on+0x18c>)
  4157d8:	4798      	blx	r3
  4157da:	4605      	mov	r5, r0
  4157dc:	e796      	b.n	41570c <_lv_area_is_point_on+0xb8>
  4157de:	bf00      	nop
  4157e0:	00415537 	.word	0x00415537

004157e4 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
  4157e4:	f9b0 2000 	ldrsh.w	r2, [r0]
  4157e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  4157ec:	429a      	cmp	r2, r3
  4157ee:	dc13      	bgt.n	415818 <_lv_area_is_on+0x34>
  4157f0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  4157f4:	f9b1 3000 	ldrsh.w	r3, [r1]
  4157f8:	429a      	cmp	r2, r3
  4157fa:	db0f      	blt.n	41581c <_lv_area_is_on+0x38>
  4157fc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  415800:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  415804:	429a      	cmp	r2, r3
  415806:	dc0b      	bgt.n	415820 <_lv_area_is_on+0x3c>
  415808:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  41580c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  415810:	429a      	cmp	r2, r3
  415812:	da07      	bge.n	415824 <_lv_area_is_on+0x40>
        return false;
  415814:	2000      	movs	r0, #0
  415816:	4770      	bx	lr
  415818:	2000      	movs	r0, #0
  41581a:	4770      	bx	lr
  41581c:	2000      	movs	r0, #0
  41581e:	4770      	bx	lr
  415820:	2000      	movs	r0, #0
  415822:	4770      	bx	lr
        return true;
  415824:	2001      	movs	r0, #1
}
  415826:	4770      	bx	lr

00415828 <_lv_area_is_in>:
{
  415828:	b5f0      	push	{r4, r5, r6, r7, lr}
  41582a:	b083      	sub	sp, #12
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  41582c:	f9b0 5000 	ldrsh.w	r5, [r0]
  415830:	f9b1 3000 	ldrsh.w	r3, [r1]
  415834:	429d      	cmp	r5, r3
  415836:	db13      	blt.n	415860 <_lv_area_is_in+0x38>
  415838:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  41583c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  415840:	429c      	cmp	r4, r3
  415842:	db13      	blt.n	41586c <_lv_area_is_in+0x44>
  415844:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  415848:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  41584c:	429c      	cmp	r4, r3
  41584e:	dc0f      	bgt.n	415870 <_lv_area_is_in+0x48>
       ain_p->y2 <= aholder_p->y2) {
  415850:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  415854:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  415858:	429c      	cmp	r4, r3
  41585a:	dd0b      	ble.n	415874 <_lv_area_is_in+0x4c>
    bool is_in = false;
  41585c:	2300      	movs	r3, #0
  41585e:	e000      	b.n	415862 <_lv_area_is_in+0x3a>
  415860:	2300      	movs	r3, #0
    if(!is_in) return false;
  415862:	b103      	cbz	r3, 415866 <_lv_area_is_in+0x3e>
    if(radius == 0) return true;
  415864:	b942      	cbnz	r2, 415878 <_lv_area_is_in+0x50>
}
  415866:	4618      	mov	r0, r3
  415868:	b003      	add	sp, #12
  41586a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool is_in = false;
  41586c:	2300      	movs	r3, #0
  41586e:	e7f8      	b.n	415862 <_lv_area_is_in+0x3a>
  415870:	2300      	movs	r3, #0
  415872:	e7f6      	b.n	415862 <_lv_area_is_in+0x3a>
        is_in = true;
  415874:	2301      	movs	r3, #1
  415876:	e7f4      	b.n	415862 <_lv_area_is_in+0x3a>
  415878:	4617      	mov	r7, r2
  41587a:	460c      	mov	r4, r1
  41587c:	4606      	mov	r6, r0
    p.x = ain_p->x1;
  41587e:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  415882:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  415886:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  41588a:	a901      	add	r1, sp, #4
  41588c:	4620      	mov	r0, r4
  41588e:	4b17      	ldr	r3, [pc, #92]	; (4158ec <_lv_area_is_in+0xc4>)
  415890:	4798      	blx	r3
  415892:	4603      	mov	r3, r0
  415894:	2800      	cmp	r0, #0
  415896:	d0e6      	beq.n	415866 <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  415898:	f9b6 5004 	ldrsh.w	r5, [r6, #4]
  41589c:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  4158a0:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  4158a4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4158a8:	463a      	mov	r2, r7
  4158aa:	a901      	add	r1, sp, #4
  4158ac:	4620      	mov	r0, r4
  4158ae:	4b0f      	ldr	r3, [pc, #60]	; (4158ec <_lv_area_is_in+0xc4>)
  4158b0:	4798      	blx	r3
  4158b2:	4603      	mov	r3, r0
  4158b4:	2800      	cmp	r0, #0
  4158b6:	d0d6      	beq.n	415866 <_lv_area_is_in+0x3e>
    p.x = ain_p->x1;
  4158b8:	f9b6 3000 	ldrsh.w	r3, [r6]
  4158bc:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y2;
  4158c0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
  4158c4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4158c8:	463a      	mov	r2, r7
  4158ca:	a901      	add	r1, sp, #4
  4158cc:	4620      	mov	r0, r4
  4158ce:	4b07      	ldr	r3, [pc, #28]	; (4158ec <_lv_area_is_in+0xc4>)
  4158d0:	4798      	blx	r3
  4158d2:	4603      	mov	r3, r0
  4158d4:	2800      	cmp	r0, #0
  4158d6:	d0c6      	beq.n	415866 <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  4158d8:	a902      	add	r1, sp, #8
  4158da:	f821 5d04 	strh.w	r5, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4158de:	463a      	mov	r2, r7
  4158e0:	4620      	mov	r0, r4
  4158e2:	4b02      	ldr	r3, [pc, #8]	; (4158ec <_lv_area_is_in+0xc4>)
  4158e4:	4798      	blx	r3
  4158e6:	4603      	mov	r3, r0
  4158e8:	e7bd      	b.n	415866 <_lv_area_is_in+0x3e>
  4158ea:	bf00      	nop
  4158ec:	00415655 	.word	0x00415655

004158f0 <_lv_area_align>:
{
  4158f0:	b430      	push	{r4, r5}
    switch(align) {
  4158f2:	2a14      	cmp	r2, #20
  4158f4:	d842      	bhi.n	41597c <_lv_area_align+0x8c>
  4158f6:	e8df f012 	tbh	[pc, r2, lsl #1]
  4158fa:	0015      	.short	0x0015
  4158fc:	00570053 	.word	0x00570053
  415900:	00850074 	.word	0x00850074
  415904:	00bf0096 	.word	0x00bf0096
  415908:	00f900dc 	.word	0x00f900dc
  41590c:	012b0122 	.word	0x012b0122
  415910:	0161014c 	.word	0x0161014c
  415914:	018b016a 	.word	0x018b016a
  415918:	01a901a0 	.word	0x01a901a0
  41591c:	01df01ca 	.word	0x01df01ca
  415920:	020901e8 	.word	0x020901e8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415924:	8884      	ldrh	r4, [r0, #4]
  415926:	8802      	ldrh	r2, [r0, #0]
  415928:	1aa4      	subs	r4, r4, r2
  41592a:	b2a4      	uxth	r4, r4
  41592c:	3401      	adds	r4, #1
  41592e:	b224      	sxth	r4, r4
  415930:	888a      	ldrh	r2, [r1, #4]
  415932:	880d      	ldrh	r5, [r1, #0]
  415934:	1b52      	subs	r2, r2, r5
  415936:	b292      	uxth	r2, r2
  415938:	3201      	adds	r2, #1
  41593a:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  41593c:	4625      	mov	r5, r4
  41593e:	2c00      	cmp	r4, #0
  415940:	db26      	blt.n	415990 <_lv_area_align+0xa0>
  415942:	106d      	asrs	r5, r5, #1
  415944:	4614      	mov	r4, r2
  415946:	2a00      	cmp	r2, #0
  415948:	db24      	blt.n	415994 <_lv_area_align+0xa4>
  41594a:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  41594e:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415950:	88c4      	ldrh	r4, [r0, #6]
  415952:	8842      	ldrh	r2, [r0, #2]
  415954:	1aa4      	subs	r4, r4, r2
  415956:	b2a4      	uxth	r4, r4
  415958:	3401      	adds	r4, #1
  41595a:	b224      	sxth	r4, r4
  41595c:	88ca      	ldrh	r2, [r1, #6]
  41595e:	8849      	ldrh	r1, [r1, #2]
  415960:	1a52      	subs	r2, r2, r1
  415962:	b292      	uxth	r2, r2
  415964:	3201      	adds	r2, #1
  415966:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415968:	4621      	mov	r1, r4
  41596a:	2c00      	cmp	r4, #0
  41596c:	db14      	blt.n	415998 <_lv_area_align+0xa8>
  41596e:	1049      	asrs	r1, r1, #1
  415970:	4614      	mov	r4, r2
  415972:	2a00      	cmp	r2, #0
  415974:	db12      	blt.n	41599c <_lv_area_align+0xac>
  415976:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  41597a:	8059      	strh	r1, [r3, #2]
    res->x += base->x1;
  41597c:	8802      	ldrh	r2, [r0, #0]
  41597e:	8819      	ldrh	r1, [r3, #0]
  415980:	440a      	add	r2, r1
  415982:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
  415984:	8842      	ldrh	r2, [r0, #2]
  415986:	8859      	ldrh	r1, [r3, #2]
  415988:	440a      	add	r2, r1
  41598a:	805a      	strh	r2, [r3, #2]
}
  41598c:	bc30      	pop	{r4, r5}
  41598e:	4770      	bx	lr
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415990:	1c65      	adds	r5, r4, #1
  415992:	e7d6      	b.n	415942 <_lv_area_align+0x52>
  415994:	1c54      	adds	r4, r2, #1
  415996:	e7d8      	b.n	41594a <_lv_area_align+0x5a>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415998:	1c61      	adds	r1, r4, #1
  41599a:	e7e8      	b.n	41596e <_lv_area_align+0x7e>
  41599c:	1c54      	adds	r4, r2, #1
  41599e:	e7ea      	b.n	415976 <_lv_area_align+0x86>
            res->x = 0;
  4159a0:	2200      	movs	r2, #0
  4159a2:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  4159a4:	805a      	strh	r2, [r3, #2]
            break;
  4159a6:	e7e9      	b.n	41597c <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4159a8:	8884      	ldrh	r4, [r0, #4]
  4159aa:	8802      	ldrh	r2, [r0, #0]
  4159ac:	1aa4      	subs	r4, r4, r2
  4159ae:	b2a4      	uxth	r4, r4
  4159b0:	3401      	adds	r4, #1
  4159b2:	b224      	sxth	r4, r4
  4159b4:	888a      	ldrh	r2, [r1, #4]
  4159b6:	8809      	ldrh	r1, [r1, #0]
  4159b8:	1a52      	subs	r2, r2, r1
  4159ba:	b292      	uxth	r2, r2
  4159bc:	3201      	adds	r2, #1
  4159be:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4159c0:	4621      	mov	r1, r4
  4159c2:	2c00      	cmp	r4, #0
  4159c4:	db09      	blt.n	4159da <_lv_area_align+0xea>
  4159c6:	1049      	asrs	r1, r1, #1
  4159c8:	4614      	mov	r4, r2
  4159ca:	2a00      	cmp	r2, #0
  4159cc:	db07      	blt.n	4159de <_lv_area_align+0xee>
  4159ce:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  4159d2:	8019      	strh	r1, [r3, #0]
            res->y = 0;
  4159d4:	2200      	movs	r2, #0
  4159d6:	805a      	strh	r2, [r3, #2]
            break;
  4159d8:	e7d0      	b.n	41597c <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4159da:	1c61      	adds	r1, r4, #1
  4159dc:	e7f3      	b.n	4159c6 <_lv_area_align+0xd6>
  4159de:	1c54      	adds	r4, r2, #1
  4159e0:	e7f5      	b.n	4159ce <_lv_area_align+0xde>
  4159e2:	8882      	ldrh	r2, [r0, #4]
  4159e4:	8804      	ldrh	r4, [r0, #0]
  4159e6:	1b12      	subs	r2, r2, r4
  4159e8:	b292      	uxth	r2, r2
  4159ea:	3201      	adds	r2, #1
  4159ec:	b292      	uxth	r2, r2
  4159ee:	888c      	ldrh	r4, [r1, #4]
  4159f0:	8809      	ldrh	r1, [r1, #0]
  4159f2:	1a61      	subs	r1, r4, r1
  4159f4:	b289      	uxth	r1, r1
  4159f6:	3101      	adds	r1, #1
  4159f8:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  4159fa:	1a52      	subs	r2, r2, r1
  4159fc:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  4159fe:	2200      	movs	r2, #0
  415a00:	805a      	strh	r2, [r3, #2]
            break;
  415a02:	e7bb      	b.n	41597c <_lv_area_align+0x8c>
            res->x = 0;
  415a04:	2200      	movs	r2, #0
  415a06:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415a08:	88c2      	ldrh	r2, [r0, #6]
  415a0a:	8844      	ldrh	r4, [r0, #2]
  415a0c:	1b12      	subs	r2, r2, r4
  415a0e:	b292      	uxth	r2, r2
  415a10:	3201      	adds	r2, #1
  415a12:	b292      	uxth	r2, r2
  415a14:	88cc      	ldrh	r4, [r1, #6]
  415a16:	8849      	ldrh	r1, [r1, #2]
  415a18:	1a61      	subs	r1, r4, r1
  415a1a:	b289      	uxth	r1, r1
  415a1c:	3101      	adds	r1, #1
  415a1e:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415a20:	1a52      	subs	r2, r2, r1
  415a22:	805a      	strh	r2, [r3, #2]
            break;
  415a24:	e7aa      	b.n	41597c <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415a26:	8884      	ldrh	r4, [r0, #4]
  415a28:	8802      	ldrh	r2, [r0, #0]
  415a2a:	1aa4      	subs	r4, r4, r2
  415a2c:	b2a4      	uxth	r4, r4
  415a2e:	3401      	adds	r4, #1
  415a30:	b224      	sxth	r4, r4
  415a32:	888a      	ldrh	r2, [r1, #4]
  415a34:	880d      	ldrh	r5, [r1, #0]
  415a36:	1b52      	subs	r2, r2, r5
  415a38:	b292      	uxth	r2, r2
  415a3a:	3201      	adds	r2, #1
  415a3c:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415a3e:	4625      	mov	r5, r4
  415a40:	2c00      	cmp	r4, #0
  415a42:	db15      	blt.n	415a70 <_lv_area_align+0x180>
  415a44:	106d      	asrs	r5, r5, #1
  415a46:	4614      	mov	r4, r2
  415a48:	2a00      	cmp	r2, #0
  415a4a:	db13      	blt.n	415a74 <_lv_area_align+0x184>
  415a4c:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415a50:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415a52:	88c2      	ldrh	r2, [r0, #6]
  415a54:	8844      	ldrh	r4, [r0, #2]
  415a56:	1b12      	subs	r2, r2, r4
  415a58:	b292      	uxth	r2, r2
  415a5a:	3201      	adds	r2, #1
  415a5c:	b292      	uxth	r2, r2
  415a5e:	88cc      	ldrh	r4, [r1, #6]
  415a60:	8849      	ldrh	r1, [r1, #2]
  415a62:	1a61      	subs	r1, r4, r1
  415a64:	b289      	uxth	r1, r1
  415a66:	3101      	adds	r1, #1
  415a68:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415a6a:	1a52      	subs	r2, r2, r1
  415a6c:	805a      	strh	r2, [r3, #2]
            break;
  415a6e:	e785      	b.n	41597c <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415a70:	1c65      	adds	r5, r4, #1
  415a72:	e7e7      	b.n	415a44 <_lv_area_align+0x154>
  415a74:	1c54      	adds	r4, r2, #1
  415a76:	e7e9      	b.n	415a4c <_lv_area_align+0x15c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415a78:	8882      	ldrh	r2, [r0, #4]
  415a7a:	8804      	ldrh	r4, [r0, #0]
  415a7c:	1b12      	subs	r2, r2, r4
  415a7e:	b292      	uxth	r2, r2
  415a80:	3201      	adds	r2, #1
  415a82:	b292      	uxth	r2, r2
  415a84:	888c      	ldrh	r4, [r1, #4]
  415a86:	880d      	ldrh	r5, [r1, #0]
  415a88:	1b64      	subs	r4, r4, r5
  415a8a:	b2a4      	uxth	r4, r4
  415a8c:	3401      	adds	r4, #1
  415a8e:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  415a90:	1b12      	subs	r2, r2, r4
  415a92:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415a94:	88c2      	ldrh	r2, [r0, #6]
  415a96:	8844      	ldrh	r4, [r0, #2]
  415a98:	1b12      	subs	r2, r2, r4
  415a9a:	b292      	uxth	r2, r2
  415a9c:	3201      	adds	r2, #1
  415a9e:	b292      	uxth	r2, r2
  415aa0:	88cc      	ldrh	r4, [r1, #6]
  415aa2:	8849      	ldrh	r1, [r1, #2]
  415aa4:	1a61      	subs	r1, r4, r1
  415aa6:	b289      	uxth	r1, r1
  415aa8:	3101      	adds	r1, #1
  415aaa:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415aac:	1a52      	subs	r2, r2, r1
  415aae:	805a      	strh	r2, [r3, #2]
            break;
  415ab0:	e764      	b.n	41597c <_lv_area_align+0x8c>
            res->x = 0;
  415ab2:	2200      	movs	r2, #0
  415ab4:	801a      	strh	r2, [r3, #0]
  415ab6:	88c4      	ldrh	r4, [r0, #6]
  415ab8:	8842      	ldrh	r2, [r0, #2]
  415aba:	1aa4      	subs	r4, r4, r2
  415abc:	b2a4      	uxth	r4, r4
  415abe:	3401      	adds	r4, #1
  415ac0:	b224      	sxth	r4, r4
  415ac2:	88ca      	ldrh	r2, [r1, #6]
  415ac4:	8849      	ldrh	r1, [r1, #2]
  415ac6:	1a52      	subs	r2, r2, r1
  415ac8:	b292      	uxth	r2, r2
  415aca:	3201      	adds	r2, #1
  415acc:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415ace:	4621      	mov	r1, r4
  415ad0:	2c00      	cmp	r4, #0
  415ad2:	db07      	blt.n	415ae4 <_lv_area_align+0x1f4>
  415ad4:	1049      	asrs	r1, r1, #1
  415ad6:	4614      	mov	r4, r2
  415ad8:	2a00      	cmp	r2, #0
  415ada:	db05      	blt.n	415ae8 <_lv_area_align+0x1f8>
  415adc:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415ae0:	8059      	strh	r1, [r3, #2]
            break;
  415ae2:	e74b      	b.n	41597c <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415ae4:	1c61      	adds	r1, r4, #1
  415ae6:	e7f5      	b.n	415ad4 <_lv_area_align+0x1e4>
  415ae8:	1c54      	adds	r4, r2, #1
  415aea:	e7f7      	b.n	415adc <_lv_area_align+0x1ec>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415aec:	8882      	ldrh	r2, [r0, #4]
  415aee:	8804      	ldrh	r4, [r0, #0]
  415af0:	1b12      	subs	r2, r2, r4
  415af2:	b292      	uxth	r2, r2
  415af4:	3201      	adds	r2, #1
  415af6:	b292      	uxth	r2, r2
  415af8:	888c      	ldrh	r4, [r1, #4]
  415afa:	880d      	ldrh	r5, [r1, #0]
  415afc:	1b64      	subs	r4, r4, r5
  415afe:	b2a4      	uxth	r4, r4
  415b00:	3401      	adds	r4, #1
  415b02:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  415b04:	1b12      	subs	r2, r2, r4
  415b06:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415b08:	88c4      	ldrh	r4, [r0, #6]
  415b0a:	8842      	ldrh	r2, [r0, #2]
  415b0c:	1aa4      	subs	r4, r4, r2
  415b0e:	b2a4      	uxth	r4, r4
  415b10:	3401      	adds	r4, #1
  415b12:	b224      	sxth	r4, r4
  415b14:	88ca      	ldrh	r2, [r1, #6]
  415b16:	8849      	ldrh	r1, [r1, #2]
  415b18:	1a52      	subs	r2, r2, r1
  415b1a:	b292      	uxth	r2, r2
  415b1c:	3201      	adds	r2, #1
  415b1e:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415b20:	4621      	mov	r1, r4
  415b22:	2c00      	cmp	r4, #0
  415b24:	db07      	blt.n	415b36 <_lv_area_align+0x246>
  415b26:	1049      	asrs	r1, r1, #1
  415b28:	4614      	mov	r4, r2
  415b2a:	2a00      	cmp	r2, #0
  415b2c:	db05      	blt.n	415b3a <_lv_area_align+0x24a>
  415b2e:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415b32:	8059      	strh	r1, [r3, #2]
            break;
  415b34:	e722      	b.n	41597c <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415b36:	1c61      	adds	r1, r4, #1
  415b38:	e7f5      	b.n	415b26 <_lv_area_align+0x236>
  415b3a:	1c54      	adds	r4, r2, #1
  415b3c:	e7f7      	b.n	415b2e <_lv_area_align+0x23e>
            res->x = 0;
  415b3e:	2200      	movs	r2, #0
  415b40:	801a      	strh	r2, [r3, #0]
  415b42:	88ca      	ldrh	r2, [r1, #6]
  415b44:	8849      	ldrh	r1, [r1, #2]
  415b46:	1a52      	subs	r2, r2, r1
  415b48:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  415b4a:	43d2      	mvns	r2, r2
  415b4c:	805a      	strh	r2, [r3, #2]
            break;
  415b4e:	e715      	b.n	41597c <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415b50:	8884      	ldrh	r4, [r0, #4]
  415b52:	8802      	ldrh	r2, [r0, #0]
  415b54:	1aa4      	subs	r4, r4, r2
  415b56:	b2a4      	uxth	r4, r4
  415b58:	3401      	adds	r4, #1
  415b5a:	b224      	sxth	r4, r4
  415b5c:	888a      	ldrh	r2, [r1, #4]
  415b5e:	880d      	ldrh	r5, [r1, #0]
  415b60:	1b52      	subs	r2, r2, r5
  415b62:	b292      	uxth	r2, r2
  415b64:	3201      	adds	r2, #1
  415b66:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415b68:	4625      	mov	r5, r4
  415b6a:	2c00      	cmp	r4, #0
  415b6c:	db0d      	blt.n	415b8a <_lv_area_align+0x29a>
  415b6e:	106d      	asrs	r5, r5, #1
  415b70:	4614      	mov	r4, r2
  415b72:	2a00      	cmp	r2, #0
  415b74:	db0b      	blt.n	415b8e <_lv_area_align+0x29e>
  415b76:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415b7a:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415b7c:	88ca      	ldrh	r2, [r1, #6]
  415b7e:	8849      	ldrh	r1, [r1, #2]
  415b80:	1a52      	subs	r2, r2, r1
  415b82:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  415b84:	43d2      	mvns	r2, r2
  415b86:	805a      	strh	r2, [r3, #2]
            break;
  415b88:	e6f8      	b.n	41597c <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415b8a:	1c65      	adds	r5, r4, #1
  415b8c:	e7ef      	b.n	415b6e <_lv_area_align+0x27e>
  415b8e:	1c54      	adds	r4, r2, #1
  415b90:	e7f1      	b.n	415b76 <_lv_area_align+0x286>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415b92:	8882      	ldrh	r2, [r0, #4]
  415b94:	8804      	ldrh	r4, [r0, #0]
  415b96:	1b12      	subs	r2, r2, r4
  415b98:	b292      	uxth	r2, r2
  415b9a:	3201      	adds	r2, #1
  415b9c:	b292      	uxth	r2, r2
  415b9e:	888c      	ldrh	r4, [r1, #4]
  415ba0:	880d      	ldrh	r5, [r1, #0]
  415ba2:	1b64      	subs	r4, r4, r5
  415ba4:	b2a4      	uxth	r4, r4
  415ba6:	3401      	adds	r4, #1
  415ba8:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  415baa:	1b12      	subs	r2, r2, r4
  415bac:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415bae:	88ca      	ldrh	r2, [r1, #6]
  415bb0:	8849      	ldrh	r1, [r1, #2]
  415bb2:	1a52      	subs	r2, r2, r1
  415bb4:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  415bb6:	43d2      	mvns	r2, r2
  415bb8:	805a      	strh	r2, [r3, #2]
            break;
  415bba:	e6df      	b.n	41597c <_lv_area_align+0x8c>
            res->x = 0;
  415bbc:	2200      	movs	r2, #0
  415bbe:	801a      	strh	r2, [r3, #0]
  415bc0:	88c2      	ldrh	r2, [r0, #6]
  415bc2:	8841      	ldrh	r1, [r0, #2]
  415bc4:	1a52      	subs	r2, r2, r1
  415bc6:	b292      	uxth	r2, r2
  415bc8:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  415bca:	805a      	strh	r2, [r3, #2]
            break;
  415bcc:	e6d6      	b.n	41597c <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415bce:	8884      	ldrh	r4, [r0, #4]
  415bd0:	8802      	ldrh	r2, [r0, #0]
  415bd2:	1aa4      	subs	r4, r4, r2
  415bd4:	b2a4      	uxth	r4, r4
  415bd6:	3401      	adds	r4, #1
  415bd8:	b224      	sxth	r4, r4
  415bda:	888a      	ldrh	r2, [r1, #4]
  415bdc:	8809      	ldrh	r1, [r1, #0]
  415bde:	1a52      	subs	r2, r2, r1
  415be0:	b292      	uxth	r2, r2
  415be2:	3201      	adds	r2, #1
  415be4:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415be6:	4621      	mov	r1, r4
  415be8:	2c00      	cmp	r4, #0
  415bea:	db0d      	blt.n	415c08 <_lv_area_align+0x318>
  415bec:	1049      	asrs	r1, r1, #1
  415bee:	4614      	mov	r4, r2
  415bf0:	2a00      	cmp	r2, #0
  415bf2:	db0b      	blt.n	415c0c <_lv_area_align+0x31c>
  415bf4:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415bf8:	8019      	strh	r1, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415bfa:	88c2      	ldrh	r2, [r0, #6]
  415bfc:	8841      	ldrh	r1, [r0, #2]
  415bfe:	1a52      	subs	r2, r2, r1
  415c00:	b292      	uxth	r2, r2
  415c02:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  415c04:	805a      	strh	r2, [r3, #2]
            break;
  415c06:	e6b9      	b.n	41597c <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415c08:	1c61      	adds	r1, r4, #1
  415c0a:	e7ef      	b.n	415bec <_lv_area_align+0x2fc>
  415c0c:	1c54      	adds	r4, r2, #1
  415c0e:	e7f1      	b.n	415bf4 <_lv_area_align+0x304>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415c10:	8882      	ldrh	r2, [r0, #4]
  415c12:	8804      	ldrh	r4, [r0, #0]
  415c14:	1b12      	subs	r2, r2, r4
  415c16:	b292      	uxth	r2, r2
  415c18:	3201      	adds	r2, #1
  415c1a:	b292      	uxth	r2, r2
  415c1c:	888c      	ldrh	r4, [r1, #4]
  415c1e:	8809      	ldrh	r1, [r1, #0]
  415c20:	1a61      	subs	r1, r4, r1
  415c22:	b289      	uxth	r1, r1
  415c24:	3101      	adds	r1, #1
  415c26:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  415c28:	1a52      	subs	r2, r2, r1
  415c2a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415c2c:	88c2      	ldrh	r2, [r0, #6]
  415c2e:	8841      	ldrh	r1, [r0, #2]
  415c30:	1a52      	subs	r2, r2, r1
  415c32:	b292      	uxth	r2, r2
  415c34:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  415c36:	805a      	strh	r2, [r3, #2]
            break;
  415c38:	e6a0      	b.n	41597c <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415c3a:	888a      	ldrh	r2, [r1, #4]
  415c3c:	8809      	ldrh	r1, [r1, #0]
  415c3e:	1a52      	subs	r2, r2, r1
  415c40:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  415c42:	43d2      	mvns	r2, r2
  415c44:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  415c46:	2200      	movs	r2, #0
  415c48:	805a      	strh	r2, [r3, #2]
            break;
  415c4a:	e697      	b.n	41597c <_lv_area_align+0x8c>
  415c4c:	888a      	ldrh	r2, [r1, #4]
  415c4e:	880c      	ldrh	r4, [r1, #0]
  415c50:	1b12      	subs	r2, r2, r4
  415c52:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  415c54:	43d2      	mvns	r2, r2
  415c56:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415c58:	88c4      	ldrh	r4, [r0, #6]
  415c5a:	8842      	ldrh	r2, [r0, #2]
  415c5c:	1aa4      	subs	r4, r4, r2
  415c5e:	b2a4      	uxth	r4, r4
  415c60:	3401      	adds	r4, #1
  415c62:	b224      	sxth	r4, r4
  415c64:	88ca      	ldrh	r2, [r1, #6]
  415c66:	8849      	ldrh	r1, [r1, #2]
  415c68:	1a52      	subs	r2, r2, r1
  415c6a:	b292      	uxth	r2, r2
  415c6c:	3201      	adds	r2, #1
  415c6e:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415c70:	4621      	mov	r1, r4
  415c72:	2c00      	cmp	r4, #0
  415c74:	db07      	blt.n	415c86 <_lv_area_align+0x396>
  415c76:	1049      	asrs	r1, r1, #1
  415c78:	4614      	mov	r4, r2
  415c7a:	2a00      	cmp	r2, #0
  415c7c:	db05      	blt.n	415c8a <_lv_area_align+0x39a>
  415c7e:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415c82:	8059      	strh	r1, [r3, #2]
            break;
  415c84:	e67a      	b.n	41597c <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415c86:	1c61      	adds	r1, r4, #1
  415c88:	e7f5      	b.n	415c76 <_lv_area_align+0x386>
  415c8a:	1c54      	adds	r4, r2, #1
  415c8c:	e7f7      	b.n	415c7e <_lv_area_align+0x38e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415c8e:	888a      	ldrh	r2, [r1, #4]
  415c90:	880c      	ldrh	r4, [r1, #0]
  415c92:	1b12      	subs	r2, r2, r4
  415c94:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  415c96:	43d2      	mvns	r2, r2
  415c98:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415c9a:	88c2      	ldrh	r2, [r0, #6]
  415c9c:	8844      	ldrh	r4, [r0, #2]
  415c9e:	1b12      	subs	r2, r2, r4
  415ca0:	b292      	uxth	r2, r2
  415ca2:	3201      	adds	r2, #1
  415ca4:	b292      	uxth	r2, r2
  415ca6:	88cc      	ldrh	r4, [r1, #6]
  415ca8:	8849      	ldrh	r1, [r1, #2]
  415caa:	1a61      	subs	r1, r4, r1
  415cac:	b289      	uxth	r1, r1
  415cae:	3101      	adds	r1, #1
  415cb0:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415cb2:	1a52      	subs	r2, r2, r1
  415cb4:	805a      	strh	r2, [r3, #2]
            break;
  415cb6:	e661      	b.n	41597c <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415cb8:	8882      	ldrh	r2, [r0, #4]
  415cba:	8801      	ldrh	r1, [r0, #0]
  415cbc:	1a52      	subs	r2, r2, r1
  415cbe:	b292      	uxth	r2, r2
  415cc0:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  415cc2:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  415cc4:	2200      	movs	r2, #0
  415cc6:	805a      	strh	r2, [r3, #2]
            break;
  415cc8:	e658      	b.n	41597c <_lv_area_align+0x8c>
  415cca:	8882      	ldrh	r2, [r0, #4]
  415ccc:	8804      	ldrh	r4, [r0, #0]
  415cce:	1b12      	subs	r2, r2, r4
  415cd0:	b292      	uxth	r2, r2
  415cd2:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  415cd4:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415cd6:	88c4      	ldrh	r4, [r0, #6]
  415cd8:	8842      	ldrh	r2, [r0, #2]
  415cda:	1aa4      	subs	r4, r4, r2
  415cdc:	b2a4      	uxth	r4, r4
  415cde:	3401      	adds	r4, #1
  415ce0:	b224      	sxth	r4, r4
  415ce2:	88ca      	ldrh	r2, [r1, #6]
  415ce4:	8849      	ldrh	r1, [r1, #2]
  415ce6:	1a52      	subs	r2, r2, r1
  415ce8:	b292      	uxth	r2, r2
  415cea:	3201      	adds	r2, #1
  415cec:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415cee:	4621      	mov	r1, r4
  415cf0:	2c00      	cmp	r4, #0
  415cf2:	db07      	blt.n	415d04 <_lv_area_align+0x414>
  415cf4:	1049      	asrs	r1, r1, #1
  415cf6:	4614      	mov	r4, r2
  415cf8:	2a00      	cmp	r2, #0
  415cfa:	db05      	blt.n	415d08 <_lv_area_align+0x418>
  415cfc:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415d00:	8059      	strh	r1, [r3, #2]
            break;
  415d02:	e63b      	b.n	41597c <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415d04:	1c61      	adds	r1, r4, #1
  415d06:	e7f5      	b.n	415cf4 <_lv_area_align+0x404>
  415d08:	1c54      	adds	r4, r2, #1
  415d0a:	e7f7      	b.n	415cfc <_lv_area_align+0x40c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415d0c:	8882      	ldrh	r2, [r0, #4]
  415d0e:	8804      	ldrh	r4, [r0, #0]
  415d10:	1b12      	subs	r2, r2, r4
  415d12:	b292      	uxth	r2, r2
  415d14:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  415d16:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415d18:	88c2      	ldrh	r2, [r0, #6]
  415d1a:	8844      	ldrh	r4, [r0, #2]
  415d1c:	1b12      	subs	r2, r2, r4
  415d1e:	b292      	uxth	r2, r2
  415d20:	3201      	adds	r2, #1
  415d22:	b292      	uxth	r2, r2
  415d24:	88cc      	ldrh	r4, [r1, #6]
  415d26:	8849      	ldrh	r1, [r1, #2]
  415d28:	1a61      	subs	r1, r4, r1
  415d2a:	b289      	uxth	r1, r1
  415d2c:	3101      	adds	r1, #1
  415d2e:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415d30:	1a52      	subs	r2, r2, r1
  415d32:	805a      	strh	r2, [r3, #2]
            break;
  415d34:	e622      	b.n	41597c <_lv_area_align+0x8c>

00415d36 <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
  415d36:	f010 0f03 	tst.w	r0, #3
  415d3a:	d002      	beq.n	415d42 <lv_color_fill+0xc>
        *buf = color;
  415d3c:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
  415d40:	3a01      	subs	r2, #1
    }

    uint32_t c32 = color.full + (color.full << 16);
  415d42:	b28b      	uxth	r3, r1
  415d44:	eb03 4303 	add.w	r3, r3, r3, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
  415d48:	e009      	b.n	415d5e <lv_color_fill+0x28>
        *buf32 = c32;
  415d4a:	6003      	str	r3, [r0, #0]
        buf32++;
        *buf32 = c32;
  415d4c:	6043      	str	r3, [r0, #4]
        buf32++;
        *buf32 = c32;
  415d4e:	6083      	str	r3, [r0, #8]
        buf32++;
        *buf32 = c32;
  415d50:	60c3      	str	r3, [r0, #12]
        buf32++;

        *buf32 = c32;
  415d52:	6103      	str	r3, [r0, #16]
        buf32++;
        *buf32 = c32;
  415d54:	6143      	str	r3, [r0, #20]
        buf32++;
        *buf32 = c32;
  415d56:	6183      	str	r3, [r0, #24]
        buf32++;
        *buf32 = c32;
  415d58:	61c3      	str	r3, [r0, #28]
        buf32++;
  415d5a:	3020      	adds	r0, #32

        px_num -= 16;
  415d5c:	3a10      	subs	r2, #16
    while(px_num > 16) {
  415d5e:	2a10      	cmp	r2, #16
  415d60:	d8f3      	bhi.n	415d4a <lv_color_fill+0x14>
  415d62:	e002      	b.n	415d6a <lv_color_fill+0x34>
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
        *buf = color;
  415d64:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num --;
  415d68:	3a01      	subs	r2, #1
    while(px_num) {
  415d6a:	2a00      	cmp	r2, #0
  415d6c:	d1fa      	bne.n	415d64 <lv_color_fill+0x2e>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
  415d6e:	4770      	bx	lr

00415d70 <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
  415d70:	b4f0      	push	{r4, r5, r6, r7}
  415d72:	4602      	mov	r2, r0
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
  415d74:	4b23      	ldr	r3, [pc, #140]	; (415e04 <lv_color_lighten+0x94>)
  415d76:	881c      	ldrh	r4, [r3, #0]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  415d78:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  415d7c:	f3c2 00c4 	ubfx	r0, r2, #3, #5
  415d80:	f1c1 05ff 	rsb	r5, r1, #255	; 0xff
  415d84:	fb05 f000 	mul.w	r0, r5, r0
  415d88:	fb01 0303 	mla	r3, r1, r3, r0
  415d8c:	3380      	adds	r3, #128	; 0x80
  415d8e:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  415d92:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  415d96:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  415d9a:	f04f 0000 	mov.w	r0, #0
  415d9e:	f363 00c7 	bfi	r0, r3, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  415da2:	f004 0607 	and.w	r6, r4, #7
  415da6:	f3c4 3342 	ubfx	r3, r4, #13, #3
  415daa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  415dae:	f002 0707 	and.w	r7, r2, #7
  415db2:	f3c2 3642 	ubfx	r6, r2, #13, #3
  415db6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  415dba:	fb06 f605 	mul.w	r6, r6, r5
  415dbe:	fb03 6301 	mla	r3, r3, r1, r6
  415dc2:	3380      	adds	r3, #128	; 0x80
  415dc4:	eb03 2603 	add.w	r6, r3, r3, lsl #8
  415dc8:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
  415dcc:	f3c3 6682 	ubfx	r6, r3, #26, #3
  415dd0:	f366 0002 	bfi	r0, r6, #0, #3
  415dd4:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  415dd8:	f363 304f 	bfi	r0, r3, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  415ddc:	f3c4 2404 	ubfx	r4, r4, #8, #5
  415de0:	f3c2 2204 	ubfx	r2, r2, #8, #5
  415de4:	fb02 f505 	mul.w	r5, r2, r5
  415de8:	fb04 5101 	mla	r1, r4, r1, r5
  415dec:	3180      	adds	r1, #128	; 0x80
  415dee:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  415df2:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
  415df6:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  415dfa:	f361 200c 	bfi	r0, r1, #8, #5
}
  415dfe:	bcf0      	pop	{r4, r5, r6, r7}
  415e00:	4770      	bx	lr
  415e02:	bf00      	nop
  415e04:	0042f710 	.word	0x0042f710

00415e08 <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
  415e08:	b410      	push	{r4}
  415e0a:	4603      	mov	r3, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  415e0c:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  415e10:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
  415e14:	fb01 f202 	mul.w	r2, r1, r2
  415e18:	3280      	adds	r2, #128	; 0x80
  415e1a:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  415e1e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  415e22:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  415e26:	f04f 0000 	mov.w	r0, #0
  415e2a:	f362 00c7 	bfi	r0, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  415e2e:	f003 0407 	and.w	r4, r3, #7
  415e32:	f3c3 3242 	ubfx	r2, r3, #13, #3
  415e36:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  415e3a:	fb02 f201 	mul.w	r2, r2, r1
  415e3e:	3280      	adds	r2, #128	; 0x80
  415e40:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  415e44:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  415e48:	f3c2 6482 	ubfx	r4, r2, #26, #3
  415e4c:	f364 0002 	bfi	r0, r4, #0, #3
  415e50:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  415e54:	f362 304f 	bfi	r0, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  415e58:	f3c3 2304 	ubfx	r3, r3, #8, #5
  415e5c:	fb03 f301 	mul.w	r3, r3, r1
  415e60:	3380      	adds	r3, #128	; 0x80
  415e62:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  415e66:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  415e6a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  415e6e:	f363 200c 	bfi	r0, r3, #8, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
  415e72:	f85d 4b04 	ldr.w	r4, [sp], #4
  415e76:	4770      	bx	lr

00415e78 <lv_debug_check_null>:
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
    if(p) return true;
  415e78:	b108      	cbz	r0, 415e7e <lv_debug_check_null+0x6>
  415e7a:	2001      	movs	r0, #1
  415e7c:	4770      	bx	lr

    return false;
  415e7e:	2000      	movs	r0, #0
}
  415e80:	4770      	bx	lr
	...

00415e84 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
  415e84:	b570      	push	{r4, r5, r6, lr}
  415e86:	b0c0      	sub	sp, #256	; 0x100
  415e88:	4606      	mov	r6, r0
  415e8a:	4614      	mov	r4, r2
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
  415e8c:	4b15      	ldr	r3, [pc, #84]	; (415ee4 <lv_debug_log_error+0x60>)
  415e8e:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
  415e90:	28e5      	cmp	r0, #229	; 0xe5
  415e92:	d901      	bls.n	415e98 <lv_debug_log_error+0x14>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
  415e94:	b040      	add	sp, #256	; 0x100
  415e96:	bd70      	pop	{r4, r5, r6, pc}
  415e98:	4605      	mov	r5, r0
        _lv_memcpy(bufp, msg, msg_len);
  415e9a:	4602      	mov	r2, r0
  415e9c:	4631      	mov	r1, r6
  415e9e:	4668      	mov	r0, sp
  415ea0:	4b11      	ldr	r3, [pc, #68]	; (415ee8 <lv_debug_log_error+0x64>)
  415ea2:	4798      	blx	r3
        bufp += msg_len;
  415ea4:	eb0d 0105 	add.w	r1, sp, r5
        *bufp = ' ';
  415ea8:	2320      	movs	r3, #32
  415eaa:	f80d 3005 	strb.w	r3, [sp, r5]
        *bufp = '(';
  415eae:	2328      	movs	r3, #40	; 0x28
  415eb0:	704b      	strb	r3, [r1, #1]
        *bufp = '0';
  415eb2:	2330      	movs	r3, #48	; 0x30
  415eb4:	708b      	strb	r3, [r1, #2]
        *bufp = 'x';
  415eb6:	2378      	movs	r3, #120	; 0x78
  415eb8:	70cb      	strb	r3, [r1, #3]
        bufp ++;
  415eba:	3104      	adds	r1, #4
        for(i = value_len * 2 - 1; i >= 0; i--) {
  415ebc:	2307      	movs	r3, #7
  415ebe:	e00a      	b.n	415ed6 <lv_debug_log_error+0x52>
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
  415ec0:	009a      	lsls	r2, r3, #2
  415ec2:	fa24 f202 	lsr.w	r2, r4, r2
  415ec6:	f002 020f 	and.w	r2, r2, #15
            *bufp = hex[x];
  415eca:	4808      	ldr	r0, [pc, #32]	; (415eec <lv_debug_log_error+0x68>)
  415ecc:	5c82      	ldrb	r2, [r0, r2]
  415ece:	f801 2b01 	strb.w	r2, [r1], #1
        for(i = value_len * 2 - 1; i >= 0; i--) {
  415ed2:	3b01      	subs	r3, #1
  415ed4:	b25b      	sxtb	r3, r3
  415ed6:	2b00      	cmp	r3, #0
  415ed8:	daf2      	bge.n	415ec0 <lv_debug_log_error+0x3c>
        *bufp = ')';
  415eda:	2329      	movs	r3, #41	; 0x29
  415edc:	700b      	strb	r3, [r1, #0]
        *bufp = '\0';
  415ede:	2300      	movs	r3, #0
  415ee0:	704b      	strb	r3, [r1, #1]
}
  415ee2:	e7d7      	b.n	415e94 <lv_debug_log_error+0x10>
  415ee4:	00428001 	.word	0x00428001
  415ee8:	004167cd 	.word	0x004167cd
  415eec:	0042f714 	.word	0x0042f714

00415ef0 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
  415ef0:	3001      	adds	r0, #1

    while(*path != '\0') {
  415ef2:	e000      	b.n	415ef6 <lv_fs_get_real_path+0x6>
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
  415ef4:	3001      	adds	r0, #1
    while(*path != '\0') {
  415ef6:	7803      	ldrb	r3, [r0, #0]
  415ef8:	b12b      	cbz	r3, 415f06 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
  415efa:	2b5c      	cmp	r3, #92	; 0x5c
  415efc:	bf18      	it	ne
  415efe:	2b3a      	cmpne	r3, #58	; 0x3a
  415f00:	d0f8      	beq.n	415ef4 <lv_fs_get_real_path+0x4>
  415f02:	2b2f      	cmp	r3, #47	; 0x2f
  415f04:	d0f6      	beq.n	415ef4 <lv_fs_get_real_path+0x4>
            break;
        }
    }

    return path;
}
  415f06:	4770      	bx	lr

00415f08 <_lv_fs_init>:
{
  415f08:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
  415f0a:	2144      	movs	r1, #68	; 0x44
  415f0c:	4801      	ldr	r0, [pc, #4]	; (415f14 <_lv_fs_init+0xc>)
  415f0e:	4b02      	ldr	r3, [pc, #8]	; (415f18 <_lv_fs_init+0x10>)
  415f10:	4798      	blx	r3
  415f12:	bd08      	pop	{r3, pc}
  415f14:	2043a304 	.word	0x2043a304
  415f18:	004160df 	.word	0x004160df

00415f1c <lv_fs_close>:
{
  415f1c:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  415f1e:	6843      	ldr	r3, [r0, #4]
  415f20:	b173      	cbz	r3, 415f40 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
  415f22:	691a      	ldr	r2, [r3, #16]
  415f24:	b172      	cbz	r2, 415f44 <lv_fs_close+0x28>
  415f26:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
  415f28:	6801      	ldr	r1, [r0, #0]
  415f2a:	4618      	mov	r0, r3
  415f2c:	4790      	blx	r2
  415f2e:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
  415f30:	6820      	ldr	r0, [r4, #0]
  415f32:	4b05      	ldr	r3, [pc, #20]	; (415f48 <lv_fs_close+0x2c>)
  415f34:	4798      	blx	r3
    file_p->file_d = NULL;
  415f36:	2300      	movs	r3, #0
  415f38:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
  415f3a:	6063      	str	r3, [r4, #4]
}
  415f3c:	4628      	mov	r0, r5
  415f3e:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  415f40:	250b      	movs	r5, #11
  415f42:	e7fb      	b.n	415f3c <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
  415f44:	2509      	movs	r5, #9
  415f46:	e7f9      	b.n	415f3c <lv_fs_close+0x20>
  415f48:	00416681 	.word	0x00416681

00415f4c <lv_fs_read>:
{
  415f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  415f4e:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
  415f50:	461e      	mov	r6, r3
  415f52:	b10b      	cbz	r3, 415f58 <lv_fs_read+0xc>
  415f54:	2300      	movs	r3, #0
  415f56:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  415f58:	6845      	ldr	r5, [r0, #4]
  415f5a:	b18d      	cbz	r5, 415f80 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  415f5c:	69af      	ldr	r7, [r5, #24]
  415f5e:	b18f      	cbz	r7, 415f84 <lv_fs_read+0x38>
  415f60:	4613      	mov	r3, r2
  415f62:	460a      	mov	r2, r1
  415f64:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
  415f66:	a804      	add	r0, sp, #16
  415f68:	2100      	movs	r1, #0
  415f6a:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
  415f6e:	6821      	ldr	r1, [r4, #0]
  415f70:	9000      	str	r0, [sp, #0]
  415f72:	4628      	mov	r0, r5
  415f74:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
  415f76:	b10e      	cbz	r6, 415f7c <lv_fs_read+0x30>
  415f78:	9b03      	ldr	r3, [sp, #12]
  415f7a:	6033      	str	r3, [r6, #0]
}
  415f7c:	b005      	add	sp, #20
  415f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  415f80:	200b      	movs	r0, #11
  415f82:	e7fb      	b.n	415f7c <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  415f84:	2009      	movs	r0, #9
  415f86:	e7f9      	b.n	415f7c <lv_fs_read+0x30>

00415f88 <lv_fs_seek>:
{
  415f88:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  415f8a:	6844      	ldr	r4, [r0, #4]
  415f8c:	b134      	cbz	r4, 415f9c <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
  415f8e:	6a25      	ldr	r5, [r4, #32]
  415f90:	b135      	cbz	r5, 415fa0 <lv_fs_seek+0x18>
  415f92:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
  415f94:	6801      	ldr	r1, [r0, #0]
  415f96:	4620      	mov	r0, r4
  415f98:	47a8      	blx	r5
    return res;
  415f9a:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  415f9c:	200b      	movs	r0, #11
  415f9e:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
  415fa0:	2009      	movs	r0, #9
}
  415fa2:	bd38      	pop	{r3, r4, r5, pc}

00415fa4 <lv_fs_get_drv>:
{
  415fa4:	b510      	push	{r4, lr}
  415fa6:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  415fa8:	4806      	ldr	r0, [pc, #24]	; (415fc4 <lv_fs_get_drv+0x20>)
  415faa:	4b07      	ldr	r3, [pc, #28]	; (415fc8 <lv_fs_get_drv+0x24>)
  415fac:	4798      	blx	r3
  415fae:	b138      	cbz	r0, 415fc0 <lv_fs_get_drv+0x1c>
        if(drv->letter == letter) {
  415fb0:	7803      	ldrb	r3, [r0, #0]
  415fb2:	42a3      	cmp	r3, r4
  415fb4:	d004      	beq.n	415fc0 <lv_fs_get_drv+0x1c>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  415fb6:	4601      	mov	r1, r0
  415fb8:	4802      	ldr	r0, [pc, #8]	; (415fc4 <lv_fs_get_drv+0x20>)
  415fba:	4b04      	ldr	r3, [pc, #16]	; (415fcc <lv_fs_get_drv+0x28>)
  415fbc:	4798      	blx	r3
  415fbe:	e7f6      	b.n	415fae <lv_fs_get_drv+0xa>
}
  415fc0:	bd10      	pop	{r4, pc}
  415fc2:	bf00      	nop
  415fc4:	2043a304 	.word	0x2043a304
  415fc8:	00416189 	.word	0x00416189
  415fcc:	0041619d 	.word	0x0041619d

00415fd0 <lv_fs_open>:
{
  415fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    file_p->drv    = NULL;
  415fd4:	2400      	movs	r4, #0
  415fd6:	6044      	str	r4, [r0, #4]
    file_p->file_d = NULL;
  415fd8:	6004      	str	r4, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  415fda:	2900      	cmp	r1, #0
  415fdc:	d044      	beq.n	416068 <lv_fs_open+0x98>
  415fde:	460d      	mov	r5, r1
  415fe0:	4690      	mov	r8, r2
  415fe2:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
  415fe4:	7808      	ldrb	r0, [r1, #0]
  415fe6:	4b23      	ldr	r3, [pc, #140]	; (416074 <lv_fs_open+0xa4>)
  415fe8:	4798      	blx	r3
  415fea:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
  415fec:	2800      	cmp	r0, #0
  415fee:	d03f      	beq.n	416070 <lv_fs_open+0xa0>
    if(file_p->drv->ready_cb != NULL) {
  415ff0:	6883      	ldr	r3, [r0, #8]
  415ff2:	b10b      	cbz	r3, 415ff8 <lv_fs_open+0x28>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
  415ff4:	4798      	blx	r3
  415ff6:	b1a0      	cbz	r0, 416022 <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
  415ff8:	6867      	ldr	r7, [r4, #4]
  415ffa:	68fe      	ldr	r6, [r7, #12]
  415ffc:	b1ae      	cbz	r6, 41602a <lv_fs_open+0x5a>
    const char * real_path = lv_fs_get_real_path(path);
  415ffe:	4628      	mov	r0, r5
  416000:	4b1d      	ldr	r3, [pc, #116]	; (416078 <lv_fs_open+0xa8>)
  416002:	4798      	blx	r3
  416004:	4605      	mov	r5, r0
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
  416006:	8878      	ldrh	r0, [r7, #2]
  416008:	b198      	cbz	r0, 416032 <lv_fs_open+0x62>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
  41600a:	4b1c      	ldr	r3, [pc, #112]	; (41607c <lv_fs_open+0xac>)
  41600c:	4798      	blx	r3
  41600e:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
  416010:	4b1b      	ldr	r3, [pc, #108]	; (416080 <lv_fs_open+0xb0>)
  416012:	4798      	blx	r3
  416014:	b1a0      	cbz	r0, 416040 <lv_fs_open+0x70>
    if(file_p->file_d == NULL) {
  416016:	6821      	ldr	r1, [r4, #0]
  416018:	b9c1      	cbnz	r1, 41604c <lv_fs_open+0x7c>
        file_p->drv = NULL;
  41601a:	2300      	movs	r3, #0
  41601c:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
  41601e:	250a      	movs	r5, #10
  416020:	e023      	b.n	41606a <lv_fs_open+0x9a>
            file_p->drv = NULL;
  416022:	2300      	movs	r3, #0
  416024:	6063      	str	r3, [r4, #4]
            return LV_FS_RES_HW_ERR;
  416026:	2501      	movs	r5, #1
  416028:	e01f      	b.n	41606a <lv_fs_open+0x9a>
        file_p->drv = NULL;
  41602a:	2300      	movs	r3, #0
  41602c:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
  41602e:	2509      	movs	r5, #9
  416030:	e01b      	b.n	41606a <lv_fs_open+0x9a>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
  416032:	4643      	mov	r3, r8
  416034:	462a      	mov	r2, r5
  416036:	4621      	mov	r1, r4
  416038:	4638      	mov	r0, r7
  41603a:	47b0      	blx	r6
  41603c:	4605      	mov	r5, r0
  41603e:	e014      	b.n	41606a <lv_fs_open+0x9a>
    LV_ASSERT_MEM(file_p->file_d);
  416040:	6822      	ldr	r2, [r4, #0]
  416042:	2300      	movs	r3, #0
  416044:	480f      	ldr	r0, [pc, #60]	; (416084 <lv_fs_open+0xb4>)
  416046:	4910      	ldr	r1, [pc, #64]	; (416088 <lv_fs_open+0xb8>)
  416048:	4788      	blx	r1
  41604a:	e7fe      	b.n	41604a <lv_fs_open+0x7a>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
  41604c:	6860      	ldr	r0, [r4, #4]
  41604e:	68c7      	ldr	r7, [r0, #12]
  416050:	4643      	mov	r3, r8
  416052:	462a      	mov	r2, r5
  416054:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
  416056:	4605      	mov	r5, r0
  416058:	b138      	cbz	r0, 41606a <lv_fs_open+0x9a>
        lv_mem_free(file_p->file_d);
  41605a:	6820      	ldr	r0, [r4, #0]
  41605c:	4b0b      	ldr	r3, [pc, #44]	; (41608c <lv_fs_open+0xbc>)
  41605e:	4798      	blx	r3
        file_p->file_d = NULL;
  416060:	2300      	movs	r3, #0
  416062:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
  416064:	6063      	str	r3, [r4, #4]
  416066:	e000      	b.n	41606a <lv_fs_open+0x9a>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  416068:	250b      	movs	r5, #11
}
  41606a:	4628      	mov	r0, r5
  41606c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LV_FS_RES_NOT_EX;
  416070:	2503      	movs	r5, #3
  416072:	e7fa      	b.n	41606a <lv_fs_open+0x9a>
  416074:	00415fa5 	.word	0x00415fa5
  416078:	00415ef1 	.word	0x00415ef1
  41607c:	004165bd 	.word	0x004165bd
  416080:	00415e79 	.word	0x00415e79
  416084:	0042c154 	.word	0x0042c154
  416088:	00415e85 	.word	0x00415e85
  41608c:	00416681 	.word	0x00416681

00416090 <lv_fs_get_ext>:
{
  416090:	b510      	push	{r4, lr}
  416092:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
  416094:	4b09      	ldr	r3, [pc, #36]	; (4160bc <lv_fs_get_ext+0x2c>)
  416096:	4798      	blx	r3
  416098:	b158      	cbz	r0, 4160b2 <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
  41609a:	5c23      	ldrb	r3, [r4, r0]
  41609c:	2b2e      	cmp	r3, #46	; 0x2e
  41609e:	d005      	beq.n	4160ac <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
  4160a0:	2b5c      	cmp	r3, #92	; 0x5c
  4160a2:	bf18      	it	ne
  4160a4:	2b2f      	cmpne	r3, #47	; 0x2f
  4160a6:	d006      	beq.n	4160b6 <lv_fs_get_ext+0x26>
    for(i = strlen(fn); i > 0; i--) {
  4160a8:	3801      	subs	r0, #1
  4160aa:	e7f5      	b.n	416098 <lv_fs_get_ext+0x8>
            return &fn[i + 1];
  4160ac:	3001      	adds	r0, #1
  4160ae:	4420      	add	r0, r4
  4160b0:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
  4160b2:	4803      	ldr	r0, [pc, #12]	; (4160c0 <lv_fs_get_ext+0x30>)
  4160b4:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
  4160b6:	4802      	ldr	r0, [pc, #8]	; (4160c0 <lv_fs_get_ext+0x30>)
}
  4160b8:	bd10      	pop	{r4, pc}
  4160ba:	bf00      	nop
  4160bc:	00428001 	.word	0x00428001
  4160c0:	00431140 	.word	0x00431140

004160c4 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
  4160c4:	460b      	mov	r3, r1
  4160c6:	b109      	cbz	r1, 4160cc <node_set_prev+0x8>

    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_PREV_P_OFFSET(ll_p);
  4160c8:	6801      	ldr	r1, [r0, #0]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
  4160ca:	505a      	str	r2, [r3, r1]
  4160cc:	4770      	bx	lr

004160ce <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
  4160ce:	b129      	cbz	r1, 4160dc <node_set_next+0xe>
{
  4160d0:	b410      	push	{r4}
    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_NEXT_P_OFFSET(ll_p);
  4160d2:	6803      	ldr	r3, [r0, #0]
  4160d4:	3304      	adds	r3, #4
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
  4160d6:	50ca      	str	r2, [r1, r3]
}
  4160d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4160dc:	4770      	bx	lr

004160de <_lv_ll_init>:
    ll_p->head = NULL;
  4160de:	2300      	movs	r3, #0
  4160e0:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
  4160e2:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
  4160e4:	3103      	adds	r1, #3
  4160e6:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
  4160ea:	6001      	str	r1, [r0, #0]
  4160ec:	4770      	bx	lr
	...

004160f0 <_lv_ll_ins_head>:
{
  4160f0:	b538      	push	{r3, r4, r5, lr}
  4160f2:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  4160f4:	6800      	ldr	r0, [r0, #0]
  4160f6:	3008      	adds	r0, #8
  4160f8:	4b0d      	ldr	r3, [pc, #52]	; (416130 <_lv_ll_ins_head+0x40>)
  4160fa:	4798      	blx	r3
    if(n_new != NULL) {
  4160fc:	4605      	mov	r5, r0
  4160fe:	b190      	cbz	r0, 416126 <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
  416100:	2200      	movs	r2, #0
  416102:	4601      	mov	r1, r0
  416104:	4620      	mov	r0, r4
  416106:	4b0b      	ldr	r3, [pc, #44]	; (416134 <_lv_ll_ins_head+0x44>)
  416108:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
  41610a:	6862      	ldr	r2, [r4, #4]
  41610c:	4629      	mov	r1, r5
  41610e:	4620      	mov	r0, r4
  416110:	4b09      	ldr	r3, [pc, #36]	; (416138 <_lv_ll_ins_head+0x48>)
  416112:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
  416114:	6861      	ldr	r1, [r4, #4]
  416116:	b119      	cbz	r1, 416120 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
  416118:	462a      	mov	r2, r5
  41611a:	4620      	mov	r0, r4
  41611c:	4b05      	ldr	r3, [pc, #20]	; (416134 <_lv_ll_ins_head+0x44>)
  41611e:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
  416120:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
  416122:	68a3      	ldr	r3, [r4, #8]
  416124:	b10b      	cbz	r3, 41612a <_lv_ll_ins_head+0x3a>
}
  416126:	4628      	mov	r0, r5
  416128:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
  41612a:	60a5      	str	r5, [r4, #8]
  41612c:	e7fb      	b.n	416126 <_lv_ll_ins_head+0x36>
  41612e:	bf00      	nop
  416130:	004165bd 	.word	0x004165bd
  416134:	004160c5 	.word	0x004160c5
  416138:	004160cf 	.word	0x004160cf

0041613c <_lv_ll_ins_tail>:
{
  41613c:	b538      	push	{r3, r4, r5, lr}
  41613e:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  416140:	6800      	ldr	r0, [r0, #0]
  416142:	3008      	adds	r0, #8
  416144:	4b0d      	ldr	r3, [pc, #52]	; (41617c <_lv_ll_ins_tail+0x40>)
  416146:	4798      	blx	r3
    if(n_new != NULL) {
  416148:	4605      	mov	r5, r0
  41614a:	b190      	cbz	r0, 416172 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
  41614c:	2200      	movs	r2, #0
  41614e:	4601      	mov	r1, r0
  416150:	4620      	mov	r0, r4
  416152:	4b0b      	ldr	r3, [pc, #44]	; (416180 <_lv_ll_ins_tail+0x44>)
  416154:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
  416156:	68a2      	ldr	r2, [r4, #8]
  416158:	4629      	mov	r1, r5
  41615a:	4620      	mov	r0, r4
  41615c:	4b09      	ldr	r3, [pc, #36]	; (416184 <_lv_ll_ins_tail+0x48>)
  41615e:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
  416160:	68a1      	ldr	r1, [r4, #8]
  416162:	b119      	cbz	r1, 41616c <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
  416164:	462a      	mov	r2, r5
  416166:	4620      	mov	r0, r4
  416168:	4b05      	ldr	r3, [pc, #20]	; (416180 <_lv_ll_ins_tail+0x44>)
  41616a:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
  41616c:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
  41616e:	6863      	ldr	r3, [r4, #4]
  416170:	b10b      	cbz	r3, 416176 <_lv_ll_ins_tail+0x3a>
}
  416172:	4628      	mov	r0, r5
  416174:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
  416176:	6065      	str	r5, [r4, #4]
  416178:	e7fb      	b.n	416172 <_lv_ll_ins_tail+0x36>
  41617a:	bf00      	nop
  41617c:	004165bd 	.word	0x004165bd
  416180:	004160cf 	.word	0x004160cf
  416184:	004160c5 	.word	0x004160c5

00416188 <_lv_ll_get_head>:
    if(ll_p != NULL) {
  416188:	b108      	cbz	r0, 41618e <_lv_ll_get_head+0x6>
        head = ll_p->head;
  41618a:	6840      	ldr	r0, [r0, #4]
  41618c:	4770      	bx	lr
    void * head = NULL;
  41618e:	2000      	movs	r0, #0
}
  416190:	4770      	bx	lr

00416192 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
  416192:	b108      	cbz	r0, 416198 <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
  416194:	6880      	ldr	r0, [r0, #8]
  416196:	4770      	bx	lr
    void * tail = NULL;
  416198:	2000      	movs	r0, #0
}
  41619a:	4770      	bx	lr

0041619c <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
  41619c:	b118      	cbz	r0, 4161a6 <_lv_ll_get_next+0xa>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
  41619e:	6803      	ldr	r3, [r0, #0]
  4161a0:	3304      	adds	r3, #4
    return *((lv_ll_node_t **)n_act_d);
  4161a2:	58c8      	ldr	r0, [r1, r3]
  4161a4:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  4161a6:	2000      	movs	r0, #0
}
  4161a8:	4770      	bx	lr

004161aa <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
  4161aa:	b110      	cbz	r0, 4161b2 <_lv_ll_get_prev+0x8>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
  4161ac:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
  4161ae:	58c8      	ldr	r0, [r1, r3]
  4161b0:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  4161b2:	2000      	movs	r0, #0
}
  4161b4:	4770      	bx	lr
	...

004161b8 <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
  4161b8:	2900      	cmp	r1, #0
  4161ba:	bf18      	it	ne
  4161bc:	2800      	cmpne	r0, #0
  4161be:	d02f      	beq.n	416220 <_lv_ll_ins_prev+0x68>
{
  4161c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4161c4:	4604      	mov	r4, r0
  4161c6:	4688      	mov	r8, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
  4161c8:	4b18      	ldr	r3, [pc, #96]	; (41622c <_lv_ll_ins_prev+0x74>)
  4161ca:	4798      	blx	r3
  4161cc:	4580      	cmp	r8, r0
  4161ce:	d01f      	beq.n	416210 <_lv_ll_ins_prev+0x58>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  4161d0:	6820      	ldr	r0, [r4, #0]
  4161d2:	3008      	adds	r0, #8
  4161d4:	4b16      	ldr	r3, [pc, #88]	; (416230 <_lv_ll_ins_prev+0x78>)
  4161d6:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  4161d8:	4605      	mov	r5, r0
  4161da:	b318      	cbz	r0, 416224 <_lv_ll_ins_prev+0x6c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
  4161dc:	4641      	mov	r1, r8
  4161de:	4620      	mov	r0, r4
  4161e0:	4b14      	ldr	r3, [pc, #80]	; (416234 <_lv_ll_ins_prev+0x7c>)
  4161e2:	4798      	blx	r3
  4161e4:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
  4161e6:	462a      	mov	r2, r5
  4161e8:	4601      	mov	r1, r0
  4161ea:	4620      	mov	r0, r4
  4161ec:	4e12      	ldr	r6, [pc, #72]	; (416238 <_lv_ll_ins_prev+0x80>)
  4161ee:	47b0      	blx	r6
        node_set_prev(ll_p, n_new, n_prev);
  4161f0:	463a      	mov	r2, r7
  4161f2:	4629      	mov	r1, r5
  4161f4:	4620      	mov	r0, r4
  4161f6:	4f11      	ldr	r7, [pc, #68]	; (41623c <_lv_ll_ins_prev+0x84>)
  4161f8:	47b8      	blx	r7
        node_set_prev(ll_p, n_act, n_new);
  4161fa:	462a      	mov	r2, r5
  4161fc:	4641      	mov	r1, r8
  4161fe:	4620      	mov	r0, r4
  416200:	47b8      	blx	r7
        node_set_next(ll_p, n_new, n_act);
  416202:	4642      	mov	r2, r8
  416204:	4629      	mov	r1, r5
  416206:	4620      	mov	r0, r4
  416208:	47b0      	blx	r6
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  41620a:	4628      	mov	r0, r5
  41620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n_new = _lv_ll_ins_head(ll_p);
  416210:	4620      	mov	r0, r4
  416212:	4b0b      	ldr	r3, [pc, #44]	; (416240 <_lv_ll_ins_prev+0x88>)
  416214:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  416216:	b108      	cbz	r0, 41621c <_lv_ll_ins_prev+0x64>
  416218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
  416220:	2000      	movs	r0, #0
  416222:	4770      	bx	lr
        if(n_new == NULL) return NULL;
  416224:	2000      	movs	r0, #0
}
  416226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41622a:	bf00      	nop
  41622c:	00416189 	.word	0x00416189
  416230:	004165bd 	.word	0x004165bd
  416234:	004161ab 	.word	0x004161ab
  416238:	004160cf 	.word	0x004160cf
  41623c:	004160c5 	.word	0x004160c5
  416240:	004160f1 	.word	0x004160f1

00416244 <_lv_ll_remove>:
{
  416244:	b570      	push	{r4, r5, r6, lr}
  416246:	4604      	mov	r4, r0
  416248:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == node_p) {
  41624a:	4b1e      	ldr	r3, [pc, #120]	; (4162c4 <_lv_ll_remove+0x80>)
  41624c:	4798      	blx	r3
  41624e:	4285      	cmp	r5, r0
  416250:	d019      	beq.n	416286 <_lv_ll_remove+0x42>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
  416252:	4620      	mov	r0, r4
  416254:	4b1c      	ldr	r3, [pc, #112]	; (4162c8 <_lv_ll_remove+0x84>)
  416256:	4798      	blx	r3
  416258:	4285      	cmp	r5, r0
  41625a:	d023      	beq.n	4162a4 <_lv_ll_remove+0x60>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
  41625c:	4629      	mov	r1, r5
  41625e:	4620      	mov	r0, r4
  416260:	4b1a      	ldr	r3, [pc, #104]	; (4162cc <_lv_ll_remove+0x88>)
  416262:	4798      	blx	r3
  416264:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
  416266:	4629      	mov	r1, r5
  416268:	4620      	mov	r0, r4
  41626a:	4b19      	ldr	r3, [pc, #100]	; (4162d0 <_lv_ll_remove+0x8c>)
  41626c:	4798      	blx	r3
  41626e:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
  416270:	4602      	mov	r2, r0
  416272:	4631      	mov	r1, r6
  416274:	4620      	mov	r0, r4
  416276:	4b17      	ldr	r3, [pc, #92]	; (4162d4 <_lv_ll_remove+0x90>)
  416278:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
  41627a:	4632      	mov	r2, r6
  41627c:	4629      	mov	r1, r5
  41627e:	4620      	mov	r0, r4
  416280:	4b15      	ldr	r3, [pc, #84]	; (4162d8 <_lv_ll_remove+0x94>)
  416282:	4798      	blx	r3
  416284:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
  416286:	4629      	mov	r1, r5
  416288:	4620      	mov	r0, r4
  41628a:	4b11      	ldr	r3, [pc, #68]	; (4162d0 <_lv_ll_remove+0x8c>)
  41628c:	4798      	blx	r3
  41628e:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
  416290:	b128      	cbz	r0, 41629e <_lv_ll_remove+0x5a>
            node_set_prev(ll_p, ll_p->head, NULL);
  416292:	2200      	movs	r2, #0
  416294:	4601      	mov	r1, r0
  416296:	4620      	mov	r0, r4
  416298:	4b0f      	ldr	r3, [pc, #60]	; (4162d8 <_lv_ll_remove+0x94>)
  41629a:	4798      	blx	r3
  41629c:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
  41629e:	2300      	movs	r3, #0
  4162a0:	60a3      	str	r3, [r4, #8]
  4162a2:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
  4162a4:	4629      	mov	r1, r5
  4162a6:	4620      	mov	r0, r4
  4162a8:	4b08      	ldr	r3, [pc, #32]	; (4162cc <_lv_ll_remove+0x88>)
  4162aa:	4798      	blx	r3
  4162ac:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
  4162ae:	b128      	cbz	r0, 4162bc <_lv_ll_remove+0x78>
            node_set_next(ll_p, ll_p->tail, NULL);
  4162b0:	2200      	movs	r2, #0
  4162b2:	4601      	mov	r1, r0
  4162b4:	4620      	mov	r0, r4
  4162b6:	4b07      	ldr	r3, [pc, #28]	; (4162d4 <_lv_ll_remove+0x90>)
  4162b8:	4798      	blx	r3
  4162ba:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
  4162bc:	2300      	movs	r3, #0
  4162be:	6063      	str	r3, [r4, #4]
  4162c0:	bd70      	pop	{r4, r5, r6, pc}
  4162c2:	bf00      	nop
  4162c4:	00416189 	.word	0x00416189
  4162c8:	00416193 	.word	0x00416193
  4162cc:	004161ab 	.word	0x004161ab
  4162d0:	0041619d 	.word	0x0041619d
  4162d4:	004160cf 	.word	0x004160cf
  4162d8:	004160c5 	.word	0x004160c5

004162dc <_lv_ll_clear>:
{
  4162dc:	b570      	push	{r4, r5, r6, lr}
  4162de:	4605      	mov	r5, r0
    i      = _lv_ll_get_head(ll_p);
  4162e0:	4b09      	ldr	r3, [pc, #36]	; (416308 <_lv_ll_clear+0x2c>)
  4162e2:	4798      	blx	r3
  4162e4:	4604      	mov	r4, r0
    while(i != NULL) {
  4162e6:	e00c      	b.n	416302 <_lv_ll_clear+0x26>
        i_next = _lv_ll_get_next(ll_p, i);
  4162e8:	4621      	mov	r1, r4
  4162ea:	4628      	mov	r0, r5
  4162ec:	4b07      	ldr	r3, [pc, #28]	; (41630c <_lv_ll_clear+0x30>)
  4162ee:	4798      	blx	r3
  4162f0:	4606      	mov	r6, r0
        _lv_ll_remove(ll_p, i);
  4162f2:	4621      	mov	r1, r4
  4162f4:	4628      	mov	r0, r5
  4162f6:	4b06      	ldr	r3, [pc, #24]	; (416310 <_lv_ll_clear+0x34>)
  4162f8:	4798      	blx	r3
        lv_mem_free(i);
  4162fa:	4620      	mov	r0, r4
  4162fc:	4b05      	ldr	r3, [pc, #20]	; (416314 <_lv_ll_clear+0x38>)
  4162fe:	4798      	blx	r3
        i = i_next;
  416300:	4634      	mov	r4, r6
    while(i != NULL) {
  416302:	2c00      	cmp	r4, #0
  416304:	d1f0      	bne.n	4162e8 <_lv_ll_clear+0xc>
}
  416306:	bd70      	pop	{r4, r5, r6, pc}
  416308:	00416189 	.word	0x00416189
  41630c:	0041619d 	.word	0x0041619d
  416310:	00416245 	.word	0x00416245
  416314:	00416681 	.word	0x00416681

00416318 <_lv_ll_chg_list>:
{
  416318:	b570      	push	{r4, r5, r6, lr}
  41631a:	460c      	mov	r4, r1
  41631c:	4615      	mov	r5, r2
  41631e:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
  416320:	4611      	mov	r1, r2
  416322:	4b17      	ldr	r3, [pc, #92]	; (416380 <_lv_ll_chg_list+0x68>)
  416324:	4798      	blx	r3
    if(head) {
  416326:	b1ae      	cbz	r6, 416354 <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
  416328:	2200      	movs	r2, #0
  41632a:	4629      	mov	r1, r5
  41632c:	4620      	mov	r0, r4
  41632e:	4b15      	ldr	r3, [pc, #84]	; (416384 <_lv_ll_chg_list+0x6c>)
  416330:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
  416332:	6862      	ldr	r2, [r4, #4]
  416334:	4629      	mov	r1, r5
  416336:	4620      	mov	r0, r4
  416338:	4b13      	ldr	r3, [pc, #76]	; (416388 <_lv_ll_chg_list+0x70>)
  41633a:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
  41633c:	6861      	ldr	r1, [r4, #4]
  41633e:	b119      	cbz	r1, 416348 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
  416340:	462a      	mov	r2, r5
  416342:	4620      	mov	r0, r4
  416344:	4b0f      	ldr	r3, [pc, #60]	; (416384 <_lv_ll_chg_list+0x6c>)
  416346:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
  416348:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
  41634a:	68a3      	ldr	r3, [r4, #8]
  41634c:	b103      	cbz	r3, 416350 <_lv_ll_chg_list+0x38>
  41634e:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
  416350:	60a5      	str	r5, [r4, #8]
  416352:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
  416354:	68a2      	ldr	r2, [r4, #8]
  416356:	4629      	mov	r1, r5
  416358:	4620      	mov	r0, r4
  41635a:	4b0a      	ldr	r3, [pc, #40]	; (416384 <_lv_ll_chg_list+0x6c>)
  41635c:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
  41635e:	2200      	movs	r2, #0
  416360:	4629      	mov	r1, r5
  416362:	4620      	mov	r0, r4
  416364:	4b08      	ldr	r3, [pc, #32]	; (416388 <_lv_ll_chg_list+0x70>)
  416366:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
  416368:	68a1      	ldr	r1, [r4, #8]
  41636a:	b119      	cbz	r1, 416374 <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
  41636c:	462a      	mov	r2, r5
  41636e:	4620      	mov	r0, r4
  416370:	4b05      	ldr	r3, [pc, #20]	; (416388 <_lv_ll_chg_list+0x70>)
  416372:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
  416374:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
  416376:	6863      	ldr	r3, [r4, #4]
  416378:	2b00      	cmp	r3, #0
  41637a:	d1e8      	bne.n	41634e <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
  41637c:	6065      	str	r5, [r4, #4]
}
  41637e:	e7e6      	b.n	41634e <_lv_ll_chg_list+0x36>
  416380:	00416245 	.word	0x00416245
  416384:	004160c5 	.word	0x004160c5
  416388:	004160cf 	.word	0x004160cf

0041638c <_lv_ll_get_len>:
{
  41638c:	b538      	push	{r3, r4, r5, lr}
  41638e:	4605      	mov	r5, r0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  416390:	4b06      	ldr	r3, [pc, #24]	; (4163ac <_lv_ll_get_len+0x20>)
  416392:	4798      	blx	r3
    uint32_t len = 0;
  416394:	2400      	movs	r4, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  416396:	e004      	b.n	4163a2 <_lv_ll_get_len+0x16>
        len++;
  416398:	3401      	adds	r4, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  41639a:	4601      	mov	r1, r0
  41639c:	4628      	mov	r0, r5
  41639e:	4b04      	ldr	r3, [pc, #16]	; (4163b0 <_lv_ll_get_len+0x24>)
  4163a0:	4798      	blx	r3
  4163a2:	2800      	cmp	r0, #0
  4163a4:	d1f8      	bne.n	416398 <_lv_ll_get_len+0xc>
}
  4163a6:	4620      	mov	r0, r4
  4163a8:	bd38      	pop	{r3, r4, r5, pc}
  4163aa:	bf00      	nop
  4163ac:	00416189 	.word	0x00416189
  4163b0:	0041619d 	.word	0x0041619d

004163b4 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
  4163b4:	4291      	cmp	r1, r2
  4163b6:	d02f      	beq.n	416418 <_lv_ll_move_before+0x64>
{
  4163b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4163bc:	4617      	mov	r7, r2
  4163be:	460c      	mov	r4, r1
  4163c0:	4605      	mov	r5, r0
    if(n_after != NULL)
  4163c2:	b30a      	cbz	r2, 416408 <_lv_ll_move_before+0x54>
        n_before = _lv_ll_get_prev(ll_p, n_after);
  4163c4:	4611      	mov	r1, r2
  4163c6:	4b15      	ldr	r3, [pc, #84]	; (41641c <_lv_ll_move_before+0x68>)
  4163c8:	4798      	blx	r3
  4163ca:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
  4163cc:	42a6      	cmp	r6, r4
  4163ce:	d019      	beq.n	416404 <_lv_ll_move_before+0x50>
    _lv_ll_remove(ll_p, n_act);
  4163d0:	4621      	mov	r1, r4
  4163d2:	4628      	mov	r0, r5
  4163d4:	4b12      	ldr	r3, [pc, #72]	; (416420 <_lv_ll_move_before+0x6c>)
  4163d6:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
  4163d8:	4622      	mov	r2, r4
  4163da:	4631      	mov	r1, r6
  4163dc:	4628      	mov	r0, r5
  4163de:	f8df 8048 	ldr.w	r8, [pc, #72]	; 416428 <_lv_ll_move_before+0x74>
  4163e2:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
  4163e4:	4632      	mov	r2, r6
  4163e6:	4621      	mov	r1, r4
  4163e8:	4628      	mov	r0, r5
  4163ea:	f8df 9040 	ldr.w	r9, [pc, #64]	; 41642c <_lv_ll_move_before+0x78>
  4163ee:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
  4163f0:	4622      	mov	r2, r4
  4163f2:	4639      	mov	r1, r7
  4163f4:	4628      	mov	r0, r5
  4163f6:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
  4163f8:	463a      	mov	r2, r7
  4163fa:	4621      	mov	r1, r4
  4163fc:	4628      	mov	r0, r5
  4163fe:	47c0      	blx	r8
    if(n_after == NULL) ll_p->tail = n_act;
  416400:	b137      	cbz	r7, 416410 <_lv_ll_move_before+0x5c>
    if(n_before == NULL) ll_p->head = n_act;
  416402:	b13e      	cbz	r6, 416414 <_lv_ll_move_before+0x60>
  416404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        n_before = _lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
  416408:	4b06      	ldr	r3, [pc, #24]	; (416424 <_lv_ll_move_before+0x70>)
  41640a:	4798      	blx	r3
  41640c:	4606      	mov	r6, r0
  41640e:	e7dd      	b.n	4163cc <_lv_ll_move_before+0x18>
    if(n_after == NULL) ll_p->tail = n_act;
  416410:	60ac      	str	r4, [r5, #8]
  416412:	e7f6      	b.n	416402 <_lv_ll_move_before+0x4e>
    if(n_before == NULL) ll_p->head = n_act;
  416414:	606c      	str	r4, [r5, #4]
  416416:	e7f5      	b.n	416404 <_lv_ll_move_before+0x50>
  416418:	4770      	bx	lr
  41641a:	bf00      	nop
  41641c:	004161ab 	.word	0x004161ab
  416420:	00416245 	.word	0x00416245
  416424:	00416193 	.word	0x00416193
  416428:	004160cf 	.word	0x004160cf
  41642c:	004160c5 	.word	0x004160c5

00416430 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
  416430:	b138      	cbz	r0, 416442 <_lv_ll_is_empty+0x12>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  416432:	6842      	ldr	r2, [r0, #4]
  416434:	b10a      	cbz	r2, 41643a <_lv_ll_is_empty+0xa>
    return false;
  416436:	2000      	movs	r0, #0
  416438:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  41643a:	6883      	ldr	r3, [r0, #8]
  41643c:	b11b      	cbz	r3, 416446 <_lv_ll_is_empty+0x16>
    return false;
  41643e:	2000      	movs	r0, #0
  416440:	4770      	bx	lr
    if(ll_p == NULL) return true;
  416442:	2001      	movs	r0, #1
  416444:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  416446:	2001      	movs	r0, #1
}
  416448:	4770      	bx	lr
	...

0041644c <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
  41644c:	4b1c      	ldr	r3, [pc, #112]	; (4164c0 <_lv_trigo_sin+0x74>)
  41644e:	fb83 2300 	smull	r2, r3, r3, r0
  416452:	181a      	adds	r2, r3, r0
  416454:	17c3      	asrs	r3, r0, #31
  416456:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  41645a:	f44f 72b4 	mov.w	r2, #360	; 0x168
  41645e:	fb02 0013 	mls	r0, r2, r3, r0
  416462:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
  416464:	2800      	cmp	r0, #0
  416466:	db15      	blt.n	416494 <_lv_trigo_sin+0x48>

    if(angle < 90) {
  416468:	2859      	cmp	r0, #89	; 0x59
  41646a:	dd16      	ble.n	41649a <_lv_trigo_sin+0x4e>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
  41646c:	b280      	uxth	r0, r0
  41646e:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
  416472:	b29b      	uxth	r3, r3
  416474:	2b59      	cmp	r3, #89	; 0x59
  416476:	d914      	bls.n	4164a2 <_lv_trigo_sin+0x56>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
  416478:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
  41647c:	b29b      	uxth	r3, r3
  41647e:	2b59      	cmp	r3, #89	; 0x59
  416480:	d916      	bls.n	4164b0 <_lv_trigo_sin+0x64>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
  416482:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
  416486:	b200      	sxth	r0, r0
        ret   = -sin0_90_table[angle];
  416488:	4b0e      	ldr	r3, [pc, #56]	; (4164c4 <_lv_trigo_sin+0x78>)
  41648a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  41648e:	4240      	negs	r0, r0
  416490:	b200      	sxth	r0, r0
    }

    return ret;
}
  416492:	4770      	bx	lr
    if(angle < 0) angle = 360 + angle;
  416494:	4410      	add	r0, r2
  416496:	b200      	sxth	r0, r0
  416498:	e7e6      	b.n	416468 <_lv_trigo_sin+0x1c>
        ret = sin0_90_table[angle];
  41649a:	4b0a      	ldr	r3, [pc, #40]	; (4164c4 <_lv_trigo_sin+0x78>)
  41649c:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  4164a0:	4770      	bx	lr
        angle = 180 - angle;
  4164a2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
  4164a6:	b200      	sxth	r0, r0
        ret   = sin0_90_table[angle];
  4164a8:	4b06      	ldr	r3, [pc, #24]	; (4164c4 <_lv_trigo_sin+0x78>)
  4164aa:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  4164ae:	4770      	bx	lr
        angle = angle - 180;
  4164b0:	b21b      	sxth	r3, r3
        ret   = -sin0_90_table[angle];
  4164b2:	4a04      	ldr	r2, [pc, #16]	; (4164c4 <_lv_trigo_sin+0x78>)
  4164b4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  4164b8:	4240      	negs	r0, r0
  4164ba:	b200      	sxth	r0, r0
  4164bc:	4770      	bx	lr
  4164be:	bf00      	nop
  4164c0:	b60b60b7 	.word	0xb60b60b7
  4164c4:	0042f728 	.word	0x0042f728

004164c8 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
  4164c8:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
  4164ca:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
  4164cc:	2400      	movs	r4, #0
  4164ce:	e001      	b.n	4164d4 <_lv_sqrt+0xc>
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
        if(trial * trial <= x) root = trial;
        mask = mask >> 1;
    } while(mask);
  4164d0:	0852      	lsrs	r2, r2, #1
  4164d2:	d006      	beq.n	4164e2 <_lv_sqrt+0x1a>
        trial = root + mask;
  4164d4:	1913      	adds	r3, r2, r4
        if(trial * trial <= x) root = trial;
  4164d6:	fb03 f503 	mul.w	r5, r3, r3
  4164da:	42a8      	cmp	r0, r5
  4164dc:	d3f8      	bcc.n	4164d0 <_lv_sqrt+0x8>
  4164de:	461c      	mov	r4, r3
  4164e0:	e7f6      	b.n	4164d0 <_lv_sqrt+0x8>

    q->i = root >> 4;
  4164e2:	0923      	lsrs	r3, r4, #4
  4164e4:	800b      	strh	r3, [r1, #0]
    q->f = (root & 0xf) << 4;
  4164e6:	0124      	lsls	r4, r4, #4
  4164e8:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
  4164ec:	804c      	strh	r4, [r1, #2]
}
  4164ee:	bc30      	pop	{r4, r5}
  4164f0:	4770      	bx	lr
	...

004164f4 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
  4164f4:	4603      	mov	r3, r0
  4164f6:	b158      	cbz	r0, 416510 <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
  4164f8:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
  4164fa:	681b      	ldr	r3, [r3, #0]
  4164fc:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  416500:	1d02      	adds	r2, r0, #4
  416502:	4b06      	ldr	r3, [pc, #24]	; (41651c <ent_get_next+0x28>)
  416504:	681b      	ldr	r3, [r3, #0]
  416506:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  41650a:	429a      	cmp	r2, r3
  41650c:	d203      	bcs.n	416516 <ent_get_next+0x22>
    }

    return next_e;
}
  41650e:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
  416510:	4b02      	ldr	r3, [pc, #8]	; (41651c <ent_get_next+0x28>)
  416512:	6818      	ldr	r0, [r3, #0]
  416514:	4770      	bx	lr
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  416516:	2000      	movs	r0, #0
    return next_e;
  416518:	e7f9      	b.n	41650e <ent_get_next+0x1a>
  41651a:	bf00      	nop
  41651c:	2040c800 	.word	0x2040c800

00416520 <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  416520:	3103      	adds	r1, #3
  416522:	f021 0103 	bic.w	r1, r1, #3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
  416526:	6803      	ldr	r3, [r0, #0]
  416528:	f3c3 035e 	ubfx	r3, r3, #1, #31
  41652c:	1d0a      	adds	r2, r1, #4
  41652e:	4293      	cmp	r3, r2
  416530:	d016      	beq.n	416560 <ent_trunc+0x40>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
  416532:	4299      	cmp	r1, r3
  416534:	d013      	beq.n	41655e <ent_trunc+0x3e>
{
  416536:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
  416538:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
  41653a:	5c53      	ldrb	r3, [r2, r1]
  41653c:	f36f 0300 	bfc	r3, #0, #1
  416540:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
  416542:	6803      	ldr	r3, [r0, #0]
  416544:	ebc1 0353 	rsb	r3, r1, r3, lsr #1
  416548:	3b04      	subs	r3, #4
  41654a:	5854      	ldr	r4, [r2, r1]
  41654c:	f363 045f 	bfi	r4, r3, #1, #31
  416550:	5054      	str	r4, [r2, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
  416552:	6803      	ldr	r3, [r0, #0]
  416554:	f361 035f 	bfi	r3, r1, #1, #31
  416558:	6003      	str	r3, [r0, #0]
    }
}
  41655a:	f85d 4b04 	ldr.w	r4, [sp], #4
  41655e:	4770      	bx	lr
        size = e->header.s.d_size;
  416560:	4619      	mov	r1, r3
  416562:	e7e6      	b.n	416532 <ent_trunc+0x12>

00416564 <ent_alloc>:
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
  416564:	7803      	ldrb	r3, [r0, #0]
  416566:	f013 0f01 	tst.w	r3, #1
  41656a:	d10f      	bne.n	41658c <ent_alloc+0x28>
  41656c:	6803      	ldr	r3, [r0, #0]
  41656e:	f3c3 035e 	ubfx	r3, r3, #1, #31
  416572:	428b      	cmp	r3, r1
  416574:	d30c      	bcc.n	416590 <ent_alloc+0x2c>
{
  416576:	b510      	push	{r4, lr}
  416578:	4604      	mov	r4, r0
        ent_trunc(e, size);
  41657a:	4b06      	ldr	r3, [pc, #24]	; (416594 <ent_alloc+0x30>)
  41657c:	4798      	blx	r3
        e->header.s.used = 1;
  41657e:	7823      	ldrb	r3, [r4, #0]
  416580:	f043 0301 	orr.w	r3, r3, #1
  416584:	4620      	mov	r0, r4
  416586:	f800 3b04 	strb.w	r3, [r0], #4
  41658a:	bd10      	pop	{r4, pc}
    void * alloc = NULL;
  41658c:	2000      	movs	r0, #0
  41658e:	4770      	bx	lr
  416590:	2000      	movs	r0, #0
    return alloc;
  416592:	4770      	bx	lr
  416594:	00416521 	.word	0x00416521

00416598 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
  416598:	4b06      	ldr	r3, [pc, #24]	; (4165b4 <_lv_mem_init+0x1c>)
  41659a:	4a07      	ldr	r2, [pc, #28]	; (4165b8 <_lv_mem_init+0x20>)
  41659c:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
  41659e:	781a      	ldrb	r2, [r3, #0]
  4165a0:	f36f 0200 	bfc	r2, #0, #1
  4165a4:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
  4165a6:	681a      	ldr	r2, [r3, #0]
  4165a8:	f647 71fc 	movw	r1, #32764	; 0x7ffc
  4165ac:	f361 025f 	bfi	r2, r1, #1, #31
  4165b0:	601a      	str	r2, [r3, #0]
  4165b2:	4770      	bx	lr
  4165b4:	2040c804 	.word	0x2040c804
  4165b8:	2040c800 	.word	0x2040c800

004165bc <lv_mem_alloc>:
{
  4165bc:	b570      	push	{r4, r5, r6, lr}
    if(size == 0) {
  4165be:	b330      	cbz	r0, 41660e <lv_mem_alloc+0x52>
  4165c0:	4606      	mov	r6, r0
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  4165c2:	3603      	adds	r6, #3
  4165c4:	f026 0603 	bic.w	r6, r6, #3
    lv_mem_ent_t * e = NULL;
  4165c8:	2400      	movs	r4, #0
    void * alloc = NULL;
  4165ca:	4625      	mov	r5, r4
  4165cc:	e006      	b.n	4165dc <lv_mem_alloc+0x20>
    } while(e != NULL && alloc == NULL);
  4165ce:	1c23      	adds	r3, r4, #0
  4165d0:	bf18      	it	ne
  4165d2:	2301      	movne	r3, #1
  4165d4:	2d00      	cmp	r5, #0
  4165d6:	bf18      	it	ne
  4165d8:	2300      	movne	r3, #0
  4165da:	b153      	cbz	r3, 4165f2 <lv_mem_alloc+0x36>
        e = ent_get_next(e);
  4165dc:	4620      	mov	r0, r4
  4165de:	4b0d      	ldr	r3, [pc, #52]	; (416614 <lv_mem_alloc+0x58>)
  4165e0:	4798      	blx	r3
        if(e != NULL) {
  4165e2:	4604      	mov	r4, r0
  4165e4:	2800      	cmp	r0, #0
  4165e6:	d0f2      	beq.n	4165ce <lv_mem_alloc+0x12>
            alloc = ent_alloc(e, size);
  4165e8:	4631      	mov	r1, r6
  4165ea:	4b0b      	ldr	r3, [pc, #44]	; (416618 <lv_mem_alloc+0x5c>)
  4165ec:	4798      	blx	r3
  4165ee:	4605      	mov	r5, r0
  4165f0:	e7ed      	b.n	4165ce <lv_mem_alloc+0x12>
    if(alloc == NULL) {
  4165f2:	b16d      	cbz	r5, 416610 <lv_mem_alloc+0x54>
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
  4165f4:	4b09      	ldr	r3, [pc, #36]	; (41661c <lv_mem_alloc+0x60>)
  4165f6:	681b      	ldr	r3, [r3, #0]
  4165f8:	429d      	cmp	r5, r3
  4165fa:	d909      	bls.n	416610 <lv_mem_alloc+0x54>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
  4165fc:	1aeb      	subs	r3, r5, r3
  4165fe:	441e      	add	r6, r3
  416600:	4b07      	ldr	r3, [pc, #28]	; (416620 <lv_mem_alloc+0x64>)
  416602:	681b      	ldr	r3, [r3, #0]
  416604:	429e      	cmp	r6, r3
  416606:	d903      	bls.n	416610 <lv_mem_alloc+0x54>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
  416608:	4b05      	ldr	r3, [pc, #20]	; (416620 <lv_mem_alloc+0x64>)
  41660a:	601e      	str	r6, [r3, #0]
  41660c:	e000      	b.n	416610 <lv_mem_alloc+0x54>
        return &zero_mem;
  41660e:	4d05      	ldr	r5, [pc, #20]	; (416624 <lv_mem_alloc+0x68>)
}
  416610:	4628      	mov	r0, r5
  416612:	bd70      	pop	{r4, r5, r6, pc}
  416614:	004164f5 	.word	0x004164f5
  416618:	00416565 	.word	0x00416565
  41661c:	2040c800 	.word	0x2040c800
  416620:	2040c7fc 	.word	0x2040c7fc
  416624:	20414804 	.word	0x20414804

00416628 <lv_mem_defrag>:
{
  416628:	b510      	push	{r4, lr}
    e_free = ent_get_next(NULL);
  41662a:	2000      	movs	r0, #0
  41662c:	4b13      	ldr	r3, [pc, #76]	; (41667c <lv_mem_defrag+0x54>)
  41662e:	4798      	blx	r3
  416630:	4604      	mov	r4, r0
  416632:	e017      	b.n	416664 <lv_mem_defrag+0x3c>
        if(e_free == NULL) return;
  416634:	b304      	cbz	r4, 416678 <lv_mem_defrag+0x50>
        e_next = ent_get_next(e_free);
  416636:	4620      	mov	r0, r4
  416638:	4b10      	ldr	r3, [pc, #64]	; (41667c <lv_mem_defrag+0x54>)
  41663a:	4798      	blx	r3
        while(e_next != NULL) {
  41663c:	b180      	cbz	r0, 416660 <lv_mem_defrag+0x38>
            if(e_next->header.s.used == 0) {
  41663e:	7803      	ldrb	r3, [r0, #0]
  416640:	f013 0f01 	tst.w	r3, #1
  416644:	d10c      	bne.n	416660 <lv_mem_defrag+0x38>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
  416646:	6801      	ldr	r1, [r0, #0]
  416648:	6823      	ldr	r3, [r4, #0]
  41664a:	f3c3 025e 	ubfx	r2, r3, #1, #31
  41664e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  416652:	3204      	adds	r2, #4
  416654:	f362 035f 	bfi	r3, r2, #1, #31
  416658:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
  41665a:	4b08      	ldr	r3, [pc, #32]	; (41667c <lv_mem_defrag+0x54>)
  41665c:	4798      	blx	r3
  41665e:	e7ed      	b.n	41663c <lv_mem_defrag+0x14>
        if(e_next == NULL) return;
  416660:	b150      	cbz	r0, 416678 <lv_mem_defrag+0x50>
{
  416662:	4604      	mov	r4, r0
        while(e_free != NULL) {
  416664:	2c00      	cmp	r4, #0
  416666:	d0e5      	beq.n	416634 <lv_mem_defrag+0xc>
            if(e_free->header.s.used != 0) {
  416668:	7823      	ldrb	r3, [r4, #0]
  41666a:	f013 0f01 	tst.w	r3, #1
  41666e:	d0e1      	beq.n	416634 <lv_mem_defrag+0xc>
                e_free = ent_get_next(e_free);
  416670:	4620      	mov	r0, r4
  416672:	4b02      	ldr	r3, [pc, #8]	; (41667c <lv_mem_defrag+0x54>)
  416674:	4798      	blx	r3
  416676:	e7f4      	b.n	416662 <lv_mem_defrag+0x3a>
  416678:	bd10      	pop	{r4, pc}
  41667a:	bf00      	nop
  41667c:	004164f5 	.word	0x004164f5

00416680 <lv_mem_free>:
    if(data == &zero_mem) return;
  416680:	4b18      	ldr	r3, [pc, #96]	; (4166e4 <lv_mem_free+0x64>)
  416682:	4298      	cmp	r0, r3
  416684:	d02d      	beq.n	4166e2 <lv_mem_free+0x62>
    if(data == NULL) return;
  416686:	b360      	cbz	r0, 4166e2 <lv_mem_free+0x62>
{
  416688:	b510      	push	{r4, lr}
  41668a:	4604      	mov	r4, r0
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
  41668c:	3804      	subs	r0, #4
    e->header.s.used = 0;
  41668e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  416692:	f36f 0300 	bfc	r3, #0, #1
  416696:	f804 3c04 	strb.w	r3, [r4, #-4]
    full_defrag_cnt++;
  41669a:	4a13      	ldr	r2, [pc, #76]	; (4166e8 <lv_mem_free+0x68>)
  41669c:	8813      	ldrh	r3, [r2, #0]
  41669e:	3301      	adds	r3, #1
  4166a0:	b29b      	uxth	r3, r3
  4166a2:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
  4166a4:	2b0f      	cmp	r3, #15
  4166a6:	d816      	bhi.n	4166d6 <lv_mem_free+0x56>
        e_next = ent_get_next(e);
  4166a8:	4b10      	ldr	r3, [pc, #64]	; (4166ec <lv_mem_free+0x6c>)
  4166aa:	4798      	blx	r3
        while(e_next != NULL) {
  4166ac:	b190      	cbz	r0, 4166d4 <lv_mem_free+0x54>
            if(e_next->header.s.used == 0) {
  4166ae:	7803      	ldrb	r3, [r0, #0]
  4166b0:	f013 0f01 	tst.w	r3, #1
  4166b4:	d114      	bne.n	4166e0 <lv_mem_free+0x60>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
  4166b6:	6801      	ldr	r1, [r0, #0]
  4166b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4166bc:	f3c3 025e 	ubfx	r2, r3, #1, #31
  4166c0:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  4166c4:	3204      	adds	r2, #4
  4166c6:	f362 035f 	bfi	r3, r2, #1, #31
  4166ca:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
  4166ce:	4b07      	ldr	r3, [pc, #28]	; (4166ec <lv_mem_free+0x6c>)
  4166d0:	4798      	blx	r3
  4166d2:	e7eb      	b.n	4166ac <lv_mem_free+0x2c>
  4166d4:	bd10      	pop	{r4, pc}
        full_defrag_cnt = 0;
  4166d6:	2200      	movs	r2, #0
  4166d8:	4b03      	ldr	r3, [pc, #12]	; (4166e8 <lv_mem_free+0x68>)
  4166da:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
  4166dc:	4b04      	ldr	r3, [pc, #16]	; (4166f0 <lv_mem_free+0x70>)
  4166de:	4798      	blx	r3
  4166e0:	bd10      	pop	{r4, pc}
  4166e2:	4770      	bx	lr
  4166e4:	20414804 	.word	0x20414804
  4166e8:	2040c7d8 	.word	0x2040c7d8
  4166ec:	004164f5 	.word	0x004164f5
  4166f0:	00416629 	.word	0x00416629

004166f4 <_lv_mem_get_size>:
    if(data == NULL) return 0;
  4166f4:	b138      	cbz	r0, 416706 <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
  4166f6:	4a06      	ldr	r2, [pc, #24]	; (416710 <_lv_mem_get_size+0x1c>)
  4166f8:	4290      	cmp	r0, r2
  4166fa:	d006      	beq.n	41670a <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
  4166fc:	f850 0c04 	ldr.w	r0, [r0, #-4]
  416700:	f3c0 005e 	ubfx	r0, r0, #1, #31
  416704:	4770      	bx	lr
    if(data == NULL) return 0;
  416706:	2000      	movs	r0, #0
  416708:	4770      	bx	lr
    if(data == &zero_mem) return 0;
  41670a:	2000      	movs	r0, #0
}
  41670c:	4770      	bx	lr
  41670e:	bf00      	nop
  416710:	20414804 	.word	0x20414804

00416714 <_lv_mem_buf_release>:
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416714:	2300      	movs	r3, #0
  416716:	2b01      	cmp	r3, #1
  416718:	d810      	bhi.n	41673c <_lv_mem_buf_release+0x28>
        if(mem_buf_small[i].p == p) {
  41671a:	4619      	mov	r1, r3
  41671c:	4a12      	ldr	r2, [pc, #72]	; (416768 <_lv_mem_buf_release+0x54>)
  41671e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  416722:	4282      	cmp	r2, r0
  416724:	d002      	beq.n	41672c <_lv_mem_buf_release+0x18>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416726:	3301      	adds	r3, #1
  416728:	b2db      	uxtb	r3, r3
  41672a:	e7f4      	b.n	416716 <_lv_mem_buf_release+0x2>
            mem_buf_small[i].used = 0;
  41672c:	4b0e      	ldr	r3, [pc, #56]	; (416768 <_lv_mem_buf_release+0x54>)
  41672e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  416732:	798b      	ldrb	r3, [r1, #6]
  416734:	f36f 0300 	bfc	r3, #0, #1
  416738:	718b      	strb	r3, [r1, #6]
            return;
  41673a:	4770      	bx	lr
  41673c:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41673e:	2b0f      	cmp	r3, #15
  416740:	d810      	bhi.n	416764 <_lv_mem_buf_release+0x50>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
  416742:	4619      	mov	r1, r3
  416744:	4a09      	ldr	r2, [pc, #36]	; (41676c <_lv_mem_buf_release+0x58>)
  416746:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  41674a:	4290      	cmp	r0, r2
  41674c:	d002      	beq.n	416754 <_lv_mem_buf_release+0x40>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41674e:	3301      	adds	r3, #1
  416750:	b2db      	uxtb	r3, r3
  416752:	e7f4      	b.n	41673e <_lv_mem_buf_release+0x2a>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  416754:	4b05      	ldr	r3, [pc, #20]	; (41676c <_lv_mem_buf_release+0x58>)
  416756:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  41675a:	798b      	ldrb	r3, [r1, #6]
  41675c:	f36f 0300 	bfc	r3, #0, #1
  416760:	718b      	strb	r3, [r1, #6]
            return;
  416762:	4770      	bx	lr
  416764:	4770      	bx	lr
  416766:	bf00      	nop
  416768:	204000a0 	.word	0x204000a0
  41676c:	2043a284 	.word	0x2043a284

00416770 <_lv_mem_buf_free_all>:
{
  416770:	b510      	push	{r4, lr}
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416772:	2300      	movs	r3, #0
  416774:	e008      	b.n	416788 <_lv_mem_buf_free_all+0x18>
        mem_buf_small[i].used = 0;
  416776:	4a12      	ldr	r2, [pc, #72]	; (4167c0 <_lv_mem_buf_free_all+0x50>)
  416778:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  41677c:	7991      	ldrb	r1, [r2, #6]
  41677e:	f36f 0100 	bfc	r1, #0, #1
  416782:	7191      	strb	r1, [r2, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416784:	3301      	adds	r3, #1
  416786:	b2db      	uxtb	r3, r3
  416788:	2b01      	cmp	r3, #1
  41678a:	d9f4      	bls.n	416776 <_lv_mem_buf_free_all+0x6>
  41678c:	2400      	movs	r4, #0
  41678e:	e001      	b.n	416794 <_lv_mem_buf_free_all+0x24>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416790:	3401      	adds	r4, #1
  416792:	b2e4      	uxtb	r4, r4
  416794:	2c0f      	cmp	r4, #15
  416796:	d812      	bhi.n	4167be <_lv_mem_buf_free_all+0x4e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
  416798:	4b0a      	ldr	r3, [pc, #40]	; (4167c4 <_lv_mem_buf_free_all+0x54>)
  41679a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  41679e:	2800      	cmp	r0, #0
  4167a0:	d0f6      	beq.n	416790 <_lv_mem_buf_free_all+0x20>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
  4167a2:	4b09      	ldr	r3, [pc, #36]	; (4167c8 <_lv_mem_buf_free_all+0x58>)
  4167a4:	4798      	blx	r3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
  4167a6:	4b07      	ldr	r3, [pc, #28]	; (4167c4 <_lv_mem_buf_free_all+0x54>)
  4167a8:	2200      	movs	r2, #0
  4167aa:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  4167ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  4167b2:	7999      	ldrb	r1, [r3, #6]
  4167b4:	f362 0100 	bfi	r1, r2, #0, #1
  4167b8:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
  4167ba:	809a      	strh	r2, [r3, #4]
  4167bc:	e7e8      	b.n	416790 <_lv_mem_buf_free_all+0x20>
}
  4167be:	bd10      	pop	{r4, pc}
  4167c0:	204000a0 	.word	0x204000a0
  4167c4:	2043a284 	.word	0x2043a284
  4167c8:	00416681 	.word	0x00416681

004167cc <_lv_memcpy>:
{
  4167cc:	b430      	push	{r4, r5}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
  4167ce:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
  4167d2:	f001 0303 	and.w	r3, r1, #3
    if(s_align != d_align) {
  4167d6:	429c      	cmp	r4, r3
  4167d8:	d050      	beq.n	41687c <_lv_memcpy+0xb0>
  4167da:	4603      	mov	r3, r0
  4167dc:	e042      	b.n	416864 <_lv_memcpy+0x98>
            REPEAT8(COPY8);
  4167de:	780c      	ldrb	r4, [r1, #0]
  4167e0:	701c      	strb	r4, [r3, #0]
  4167e2:	784c      	ldrb	r4, [r1, #1]
  4167e4:	705c      	strb	r4, [r3, #1]
  4167e6:	788c      	ldrb	r4, [r1, #2]
  4167e8:	709c      	strb	r4, [r3, #2]
  4167ea:	78cc      	ldrb	r4, [r1, #3]
  4167ec:	70dc      	strb	r4, [r3, #3]
  4167ee:	790c      	ldrb	r4, [r1, #4]
  4167f0:	711c      	strb	r4, [r3, #4]
  4167f2:	794c      	ldrb	r4, [r1, #5]
  4167f4:	715c      	strb	r4, [r3, #5]
  4167f6:	798c      	ldrb	r4, [r1, #6]
  4167f8:	719c      	strb	r4, [r3, #6]
  4167fa:	79cc      	ldrb	r4, [r1, #7]
  4167fc:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
  4167fe:	7a0c      	ldrb	r4, [r1, #8]
  416800:	721c      	strb	r4, [r3, #8]
  416802:	7a4c      	ldrb	r4, [r1, #9]
  416804:	725c      	strb	r4, [r3, #9]
  416806:	7a8c      	ldrb	r4, [r1, #10]
  416808:	729c      	strb	r4, [r3, #10]
  41680a:	7acc      	ldrb	r4, [r1, #11]
  41680c:	72dc      	strb	r4, [r3, #11]
  41680e:	7b0c      	ldrb	r4, [r1, #12]
  416810:	731c      	strb	r4, [r3, #12]
  416812:	7b4c      	ldrb	r4, [r1, #13]
  416814:	735c      	strb	r4, [r3, #13]
  416816:	7b8c      	ldrb	r4, [r1, #14]
  416818:	739c      	strb	r4, [r3, #14]
  41681a:	7bcc      	ldrb	r4, [r1, #15]
  41681c:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
  41681e:	7c0c      	ldrb	r4, [r1, #16]
  416820:	741c      	strb	r4, [r3, #16]
  416822:	7c4c      	ldrb	r4, [r1, #17]
  416824:	745c      	strb	r4, [r3, #17]
  416826:	7c8c      	ldrb	r4, [r1, #18]
  416828:	749c      	strb	r4, [r3, #18]
  41682a:	7ccc      	ldrb	r4, [r1, #19]
  41682c:	74dc      	strb	r4, [r3, #19]
  41682e:	7d0c      	ldrb	r4, [r1, #20]
  416830:	751c      	strb	r4, [r3, #20]
  416832:	7d4c      	ldrb	r4, [r1, #21]
  416834:	755c      	strb	r4, [r3, #21]
  416836:	7d8c      	ldrb	r4, [r1, #22]
  416838:	759c      	strb	r4, [r3, #22]
  41683a:	7dcc      	ldrb	r4, [r1, #23]
  41683c:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
  41683e:	7e0c      	ldrb	r4, [r1, #24]
  416840:	761c      	strb	r4, [r3, #24]
  416842:	7e4c      	ldrb	r4, [r1, #25]
  416844:	765c      	strb	r4, [r3, #25]
  416846:	7e8c      	ldrb	r4, [r1, #26]
  416848:	769c      	strb	r4, [r3, #26]
  41684a:	7ecc      	ldrb	r4, [r1, #27]
  41684c:	76dc      	strb	r4, [r3, #27]
  41684e:	7f0c      	ldrb	r4, [r1, #28]
  416850:	771c      	strb	r4, [r3, #28]
  416852:	7f4c      	ldrb	r4, [r1, #29]
  416854:	775c      	strb	r4, [r3, #29]
  416856:	7f8c      	ldrb	r4, [r1, #30]
  416858:	779c      	strb	r4, [r3, #30]
  41685a:	7fcc      	ldrb	r4, [r1, #31]
  41685c:	77dc      	strb	r4, [r3, #31]
  41685e:	3320      	adds	r3, #32
  416860:	3120      	adds	r1, #32
            len -= 32;
  416862:	3a20      	subs	r2, #32
        while(len > 32) {
  416864:	2a20      	cmp	r2, #32
  416866:	d8ba      	bhi.n	4167de <_lv_memcpy+0x12>
  416868:	e004      	b.n	416874 <_lv_memcpy+0xa8>
            COPY8
  41686a:	f811 4b01 	ldrb.w	r4, [r1], #1
  41686e:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
  416872:	3a01      	subs	r2, #1
        while(len) {
  416874:	2a00      	cmp	r2, #0
  416876:	d1f8      	bne.n	41686a <_lv_memcpy+0x9e>
}
  416878:	bc30      	pop	{r4, r5}
  41687a:	4770      	bx	lr
    if(d_align) {
  41687c:	b174      	cbz	r4, 41689c <_lv_memcpy+0xd0>
        d_align = ALIGN_MASK + 1 - d_align;
  41687e:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
  416882:	4603      	mov	r3, r0
        while(d_align && len) {
  416884:	e005      	b.n	416892 <_lv_memcpy+0xc6>
            COPY8;
  416886:	f811 5b01 	ldrb.w	r5, [r1], #1
  41688a:	f803 5b01 	strb.w	r5, [r3], #1
            d_align--;
  41688e:	3c01      	subs	r4, #1
            len--;
  416890:	3a01      	subs	r2, #1
        while(d_align && len) {
  416892:	2c00      	cmp	r4, #0
  416894:	bf18      	it	ne
  416896:	2a00      	cmpne	r2, #0
  416898:	d1f5      	bne.n	416886 <_lv_memcpy+0xba>
  41689a:	e014      	b.n	4168c6 <_lv_memcpy+0xfa>
    uint8_t * d8 = dst;
  41689c:	4603      	mov	r3, r0
  41689e:	e012      	b.n	4168c6 <_lv_memcpy+0xfa>
        REPEAT8(COPY32)
  4168a0:	680c      	ldr	r4, [r1, #0]
  4168a2:	601c      	str	r4, [r3, #0]
  4168a4:	684c      	ldr	r4, [r1, #4]
  4168a6:	605c      	str	r4, [r3, #4]
  4168a8:	688c      	ldr	r4, [r1, #8]
  4168aa:	609c      	str	r4, [r3, #8]
  4168ac:	68cc      	ldr	r4, [r1, #12]
  4168ae:	60dc      	str	r4, [r3, #12]
  4168b0:	690c      	ldr	r4, [r1, #16]
  4168b2:	611c      	str	r4, [r3, #16]
  4168b4:	694c      	ldr	r4, [r1, #20]
  4168b6:	615c      	str	r4, [r3, #20]
  4168b8:	698c      	ldr	r4, [r1, #24]
  4168ba:	619c      	str	r4, [r3, #24]
  4168bc:	69cc      	ldr	r4, [r1, #28]
  4168be:	61dc      	str	r4, [r3, #28]
  4168c0:	3320      	adds	r3, #32
  4168c2:	3120      	adds	r1, #32
        len -= 32;
  4168c4:	3a20      	subs	r2, #32
    while(len > 32) {
  4168c6:	2a20      	cmp	r2, #32
  4168c8:	d8ea      	bhi.n	4168a0 <_lv_memcpy+0xd4>
  4168ca:	e004      	b.n	4168d6 <_lv_memcpy+0x10a>
        COPY32;
  4168cc:	f851 4b04 	ldr.w	r4, [r1], #4
  4168d0:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
  4168d4:	3a04      	subs	r2, #4
    while(len > 4) {
  4168d6:	2a04      	cmp	r2, #4
  4168d8:	d8f8      	bhi.n	4168cc <_lv_memcpy+0x100>
  4168da:	e004      	b.n	4168e6 <_lv_memcpy+0x11a>
        COPY8
  4168dc:	f811 4b01 	ldrb.w	r4, [r1], #1
  4168e0:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
  4168e4:	3a01      	subs	r2, #1
    while(len) {
  4168e6:	2a00      	cmp	r2, #0
  4168e8:	d1f8      	bne.n	4168dc <_lv_memcpy+0x110>
  4168ea:	e7c5      	b.n	416878 <_lv_memcpy+0xac>

004168ec <lv_mem_realloc>:
{
  4168ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
  4168ee:	3103      	adds	r1, #3
  4168f0:	f021 0403 	bic.w	r4, r1, #3
    if(data_p != NULL) {
  4168f4:	4605      	mov	r5, r0
  4168f6:	b128      	cbz	r0, 416904 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
  4168f8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  4168fc:	f013 0f01 	tst.w	r3, #1
  416900:	d100      	bne.n	416904 <lv_mem_realloc+0x18>
            data_p = NULL;
  416902:	2500      	movs	r5, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
  416904:	4628      	mov	r0, r5
  416906:	4b12      	ldr	r3, [pc, #72]	; (416950 <lv_mem_realloc+0x64>)
  416908:	4798      	blx	r3
  41690a:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  41690c:	4284      	cmp	r4, r0
  41690e:	d01d      	beq.n	41694c <lv_mem_realloc+0x60>
    if(new_size < old_size) {
  416910:	d30e      	bcc.n	416930 <lv_mem_realloc+0x44>
    new_p = lv_mem_alloc(new_size);
  416912:	4620      	mov	r0, r4
  416914:	4b0f      	ldr	r3, [pc, #60]	; (416954 <lv_mem_realloc+0x68>)
  416916:	4798      	blx	r3
    if(new_p == NULL) {
  416918:	4607      	mov	r7, r0
  41691a:	b138      	cbz	r0, 41692c <lv_mem_realloc+0x40>
    if(data_p != NULL) {
  41691c:	b135      	cbz	r5, 41692c <lv_mem_realloc+0x40>
        if(old_size != 0 && new_size != 0) {
  41691e:	2e00      	cmp	r6, #0
  416920:	bf18      	it	ne
  416922:	2c00      	cmpne	r4, #0
  416924:	d10a      	bne.n	41693c <lv_mem_realloc+0x50>
        lv_mem_free(data_p);
  416926:	4628      	mov	r0, r5
  416928:	4b0b      	ldr	r3, [pc, #44]	; (416958 <lv_mem_realloc+0x6c>)
  41692a:	4798      	blx	r3
}
  41692c:	4638      	mov	r0, r7
  41692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ent_trunc(e, new_size);
  416930:	4621      	mov	r1, r4
  416932:	1f28      	subs	r0, r5, #4
  416934:	4b09      	ldr	r3, [pc, #36]	; (41695c <lv_mem_realloc+0x70>)
  416936:	4798      	blx	r3
        return &e->first_data;
  416938:	462f      	mov	r7, r5
  41693a:	e7f7      	b.n	41692c <lv_mem_realloc+0x40>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
  41693c:	4622      	mov	r2, r4
  41693e:	42b4      	cmp	r4, r6
  416940:	bf28      	it	cs
  416942:	4632      	movcs	r2, r6
  416944:	4629      	mov	r1, r5
  416946:	4b06      	ldr	r3, [pc, #24]	; (416960 <lv_mem_realloc+0x74>)
  416948:	4798      	blx	r3
  41694a:	e7ec      	b.n	416926 <lv_mem_realloc+0x3a>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  41694c:	462f      	mov	r7, r5
  41694e:	e7ed      	b.n	41692c <lv_mem_realloc+0x40>
  416950:	004166f5 	.word	0x004166f5
  416954:	004165bd 	.word	0x004165bd
  416958:	00416681 	.word	0x00416681
  41695c:	00416521 	.word	0x00416521
  416960:	004167cd 	.word	0x004167cd

00416964 <_lv_mem_buf_get>:
{
  416964:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) return NULL;
  416966:	2800      	cmp	r0, #0
  416968:	f000 8085 	beq.w	416a76 <_lv_mem_buf_get+0x112>
  41696c:	4604      	mov	r4, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
  41696e:	2810      	cmp	r0, #16
  416970:	d91d      	bls.n	4169ae <_lv_mem_buf_get+0x4a>
  416972:	f04f 31ff 	mov.w	r1, #4294967295
  416976:	2300      	movs	r3, #0
  416978:	e028      	b.n	4169cc <_lv_mem_buf_get+0x68>
            if(mem_buf_small[i].used == 0) {
  41697a:	4619      	mov	r1, r3
  41697c:	4a3f      	ldr	r2, [pc, #252]	; (416a7c <_lv_mem_buf_get+0x118>)
  41697e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416982:	7992      	ldrb	r2, [r2, #6]
  416984:	f012 0f01 	tst.w	r2, #1
  416988:	d007      	beq.n	41699a <_lv_mem_buf_get+0x36>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  41698a:	3301      	adds	r3, #1
  41698c:	b2db      	uxtb	r3, r3
  41698e:	2b01      	cmp	r3, #1
  416990:	d9f3      	bls.n	41697a <_lv_mem_buf_get+0x16>
  416992:	f04f 31ff 	mov.w	r1, #4294967295
  416996:	2300      	movs	r3, #0
  416998:	e018      	b.n	4169cc <_lv_mem_buf_get+0x68>
                mem_buf_small[i].used = 1;
  41699a:	4a38      	ldr	r2, [pc, #224]	; (416a7c <_lv_mem_buf_get+0x118>)
  41699c:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  4169a0:	7983      	ldrb	r3, [r0, #6]
  4169a2:	f043 0301 	orr.w	r3, r3, #1
  4169a6:	7183      	strb	r3, [r0, #6]
                return mem_buf_small[i].p;
  4169a8:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  4169ac:	e034      	b.n	416a18 <_lv_mem_buf_get+0xb4>
  4169ae:	2300      	movs	r3, #0
  4169b0:	e7ed      	b.n	41698e <_lv_mem_buf_get+0x2a>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  4169b2:	4a33      	ldr	r2, [pc, #204]	; (416a80 <_lv_mem_buf_get+0x11c>)
  4169b4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4169b8:	798b      	ldrb	r3, [r1, #6]
  4169ba:	f043 0301 	orr.w	r3, r3, #1
  4169be:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
  4169c0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
  4169c4:	e028      	b.n	416a18 <_lv_mem_buf_get+0xb4>
                i_guess = i;
  4169c6:	b259      	sxtb	r1, r3
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4169c8:	3301      	adds	r3, #1
  4169ca:	b2db      	uxtb	r3, r3
  4169cc:	2b0f      	cmp	r3, #15
  4169ce:	d818      	bhi.n	416a02 <_lv_mem_buf_get+0x9e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
  4169d0:	4618      	mov	r0, r3
  4169d2:	4a2b      	ldr	r2, [pc, #172]	; (416a80 <_lv_mem_buf_get+0x11c>)
  4169d4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4169d8:	7992      	ldrb	r2, [r2, #6]
  4169da:	f012 0f01 	tst.w	r2, #1
  4169de:	d1f3      	bne.n	4169c8 <_lv_mem_buf_get+0x64>
  4169e0:	4a27      	ldr	r2, [pc, #156]	; (416a80 <_lv_mem_buf_get+0x11c>)
  4169e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4169e6:	8892      	ldrh	r2, [r2, #4]
  4169e8:	4294      	cmp	r4, r2
  4169ea:	d8ed      	bhi.n	4169c8 <_lv_mem_buf_get+0x64>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
  4169ec:	d0e1      	beq.n	4169b2 <_lv_mem_buf_get+0x4e>
            else if(i_guess < 0) {
  4169ee:	2900      	cmp	r1, #0
  4169f0:	dbe9      	blt.n	4169c6 <_lv_mem_buf_get+0x62>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
  4169f2:	4823      	ldr	r0, [pc, #140]	; (416a80 <_lv_mem_buf_get+0x11c>)
  4169f4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  4169f8:	8880      	ldrh	r0, [r0, #4]
  4169fa:	4282      	cmp	r2, r0
  4169fc:	d2e4      	bcs.n	4169c8 <_lv_mem_buf_get+0x64>
                i_guess = i;
  4169fe:	b259      	sxtb	r1, r3
  416a00:	e7e2      	b.n	4169c8 <_lv_mem_buf_get+0x64>
    if(i_guess >= 0) {
  416a02:	2900      	cmp	r1, #0
  416a04:	db23      	blt.n	416a4e <_lv_mem_buf_get+0xea>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
  416a06:	4a1e      	ldr	r2, [pc, #120]	; (416a80 <_lv_mem_buf_get+0x11c>)
  416a08:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  416a0c:	7983      	ldrb	r3, [r0, #6]
  416a0e:	f043 0301 	orr.w	r3, r3, #1
  416a12:	7183      	strb	r3, [r0, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
  416a14:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
}
  416a18:	4618      	mov	r0, r3
  416a1a:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
  416a1c:	4621      	mov	r1, r4
  416a1e:	4b18      	ldr	r3, [pc, #96]	; (416a80 <_lv_mem_buf_get+0x11c>)
  416a20:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
  416a24:	4b17      	ldr	r3, [pc, #92]	; (416a84 <_lv_mem_buf_get+0x120>)
  416a26:	4798      	blx	r3
            if(buf == NULL) {
  416a28:	4603      	mov	r3, r0
  416a2a:	b150      	cbz	r0, 416a42 <_lv_mem_buf_get+0xde>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  416a2c:	4814      	ldr	r0, [pc, #80]	; (416a80 <_lv_mem_buf_get+0x11c>)
  416a2e:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
  416a32:	7991      	ldrb	r1, [r2, #6]
  416a34:	f041 0101 	orr.w	r1, r1, #1
  416a38:	7191      	strb	r1, [r2, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
  416a3a:	8094      	strh	r4, [r2, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
  416a3c:	f840 3035 	str.w	r3, [r0, r5, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
  416a40:	e7ea      	b.n	416a18 <_lv_mem_buf_get+0xb4>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
  416a42:	2200      	movs	r2, #0
  416a44:	2300      	movs	r3, #0
  416a46:	4810      	ldr	r0, [pc, #64]	; (416a88 <_lv_mem_buf_get+0x124>)
  416a48:	4910      	ldr	r1, [pc, #64]	; (416a8c <_lv_mem_buf_get+0x128>)
  416a4a:	4788      	blx	r1
  416a4c:	e7fe      	b.n	416a4c <_lv_mem_buf_get+0xe8>
  416a4e:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416a50:	2b0f      	cmp	r3, #15
  416a52:	d80a      	bhi.n	416a6a <_lv_mem_buf_get+0x106>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
  416a54:	461d      	mov	r5, r3
  416a56:	4a0a      	ldr	r2, [pc, #40]	; (416a80 <_lv_mem_buf_get+0x11c>)
  416a58:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416a5c:	7992      	ldrb	r2, [r2, #6]
  416a5e:	f012 0f01 	tst.w	r2, #1
  416a62:	d0db      	beq.n	416a1c <_lv_mem_buf_get+0xb8>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416a64:	3301      	adds	r3, #1
  416a66:	b2db      	uxtb	r3, r3
  416a68:	e7f2      	b.n	416a50 <_lv_mem_buf_get+0xec>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
  416a6a:	2200      	movs	r2, #0
  416a6c:	2300      	movs	r3, #0
  416a6e:	4808      	ldr	r0, [pc, #32]	; (416a90 <_lv_mem_buf_get+0x12c>)
  416a70:	4906      	ldr	r1, [pc, #24]	; (416a8c <_lv_mem_buf_get+0x128>)
  416a72:	4788      	blx	r1
  416a74:	e7fe      	b.n	416a74 <_lv_mem_buf_get+0x110>
    if(size == 0) return NULL;
  416a76:	2300      	movs	r3, #0
  416a78:	e7ce      	b.n	416a18 <_lv_mem_buf_get+0xb4>
  416a7a:	bf00      	nop
  416a7c:	204000a0 	.word	0x204000a0
  416a80:	2043a284 	.word	0x2043a284
  416a84:	004168ed 	.word	0x004168ed
  416a88:	0042f7e0 	.word	0x0042f7e0
  416a8c:	00415e85 	.word	0x00415e85
  416a90:	0042f834 	.word	0x0042f834

00416a94 <_lv_memset>:
    if(d_align) {
  416a94:	f010 0303 	ands.w	r3, r0, #3
  416a98:	d00a      	beq.n	416ab0 <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
  416a9a:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  416a9e:	e003      	b.n	416aa8 <_lv_memset+0x14>
            SET8(v);
  416aa0:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
  416aa4:	3a01      	subs	r2, #1
            d_align--;
  416aa6:	3b01      	subs	r3, #1
        while(d_align && len) {
  416aa8:	2b00      	cmp	r3, #0
  416aaa:	bf18      	it	ne
  416aac:	2a00      	cmpne	r2, #0
  416aae:	d1f7      	bne.n	416aa0 <_lv_memset+0xc>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
  416ab0:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  416ab4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  416ab8:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
  416abc:	e009      	b.n	416ad2 <_lv_memset+0x3e>
        REPEAT8(SET32(v32));
  416abe:	6003      	str	r3, [r0, #0]
  416ac0:	6043      	str	r3, [r0, #4]
  416ac2:	6083      	str	r3, [r0, #8]
  416ac4:	60c3      	str	r3, [r0, #12]
  416ac6:	6103      	str	r3, [r0, #16]
  416ac8:	6143      	str	r3, [r0, #20]
  416aca:	6183      	str	r3, [r0, #24]
  416acc:	61c3      	str	r3, [r0, #28]
  416ace:	3020      	adds	r0, #32
        len -= 32;
  416ad0:	3a20      	subs	r2, #32
    while(len > 32) {
  416ad2:	2a20      	cmp	r2, #32
  416ad4:	d8f3      	bhi.n	416abe <_lv_memset+0x2a>
  416ad6:	e002      	b.n	416ade <_lv_memset+0x4a>
        SET32(v32);
  416ad8:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416adc:	3a04      	subs	r2, #4
    while(len > 4) {
  416ade:	2a04      	cmp	r2, #4
  416ae0:	d8fa      	bhi.n	416ad8 <_lv_memset+0x44>
  416ae2:	e002      	b.n	416aea <_lv_memset+0x56>
        SET8(v);
  416ae4:	f800 1b01 	strb.w	r1, [r0], #1
        len--;
  416ae8:	3a01      	subs	r2, #1
    while(len) {
  416aea:	2a00      	cmp	r2, #0
  416aec:	d1fa      	bne.n	416ae4 <_lv_memset+0x50>
}
  416aee:	4770      	bx	lr

00416af0 <_lv_memset_00>:
    if(d_align) {
  416af0:	f010 0303 	ands.w	r3, r0, #3
  416af4:	d017      	beq.n	416b26 <_lv_memset_00+0x36>
        d_align = ALIGN_MASK + 1 - d_align;
  416af6:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  416afa:	e004      	b.n	416b06 <_lv_memset_00+0x16>
            SET8(0);
  416afc:	2200      	movs	r2, #0
  416afe:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  416b02:	3901      	subs	r1, #1
            d_align--;
  416b04:	3b01      	subs	r3, #1
        while(d_align && len) {
  416b06:	2b00      	cmp	r3, #0
  416b08:	bf18      	it	ne
  416b0a:	2900      	cmpne	r1, #0
  416b0c:	d1f6      	bne.n	416afc <_lv_memset_00+0xc>
  416b0e:	e00a      	b.n	416b26 <_lv_memset_00+0x36>
        REPEAT8(SET32(0));
  416b10:	2300      	movs	r3, #0
  416b12:	6003      	str	r3, [r0, #0]
  416b14:	6043      	str	r3, [r0, #4]
  416b16:	6083      	str	r3, [r0, #8]
  416b18:	60c3      	str	r3, [r0, #12]
  416b1a:	6103      	str	r3, [r0, #16]
  416b1c:	6143      	str	r3, [r0, #20]
  416b1e:	6183      	str	r3, [r0, #24]
  416b20:	61c3      	str	r3, [r0, #28]
  416b22:	3020      	adds	r0, #32
        len -= 32;
  416b24:	3920      	subs	r1, #32
    while(len > 32) {
  416b26:	2920      	cmp	r1, #32
  416b28:	d8f2      	bhi.n	416b10 <_lv_memset_00+0x20>
  416b2a:	e003      	b.n	416b34 <_lv_memset_00+0x44>
        SET32(0);
  416b2c:	2300      	movs	r3, #0
  416b2e:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416b32:	3904      	subs	r1, #4
    while(len > 4) {
  416b34:	2904      	cmp	r1, #4
  416b36:	d8f9      	bhi.n	416b2c <_lv_memset_00+0x3c>
  416b38:	e003      	b.n	416b42 <_lv_memset_00+0x52>
        SET8(0);
  416b3a:	2300      	movs	r3, #0
  416b3c:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  416b40:	3901      	subs	r1, #1
    while(len) {
  416b42:	2900      	cmp	r1, #0
  416b44:	d1f9      	bne.n	416b3a <_lv_memset_00+0x4a>
}
  416b46:	4770      	bx	lr

00416b48 <_lv_memset_ff>:
    if(d_align) {
  416b48:	f010 0303 	ands.w	r3, r0, #3
  416b4c:	d018      	beq.n	416b80 <_lv_memset_ff+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
  416b4e:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  416b52:	e004      	b.n	416b5e <_lv_memset_ff+0x16>
            SET8(0xFF);
  416b54:	22ff      	movs	r2, #255	; 0xff
  416b56:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  416b5a:	3901      	subs	r1, #1
            d_align--;
  416b5c:	3b01      	subs	r3, #1
        while(d_align && len) {
  416b5e:	2b00      	cmp	r3, #0
  416b60:	bf18      	it	ne
  416b62:	2900      	cmpne	r1, #0
  416b64:	d1f6      	bne.n	416b54 <_lv_memset_ff+0xc>
  416b66:	e00b      	b.n	416b80 <_lv_memset_ff+0x38>
        REPEAT8(SET32(0xFFFFFFFF));
  416b68:	f04f 33ff 	mov.w	r3, #4294967295
  416b6c:	6003      	str	r3, [r0, #0]
  416b6e:	6043      	str	r3, [r0, #4]
  416b70:	6083      	str	r3, [r0, #8]
  416b72:	60c3      	str	r3, [r0, #12]
  416b74:	6103      	str	r3, [r0, #16]
  416b76:	6143      	str	r3, [r0, #20]
  416b78:	6183      	str	r3, [r0, #24]
  416b7a:	61c3      	str	r3, [r0, #28]
  416b7c:	3020      	adds	r0, #32
        len -= 32;
  416b7e:	3920      	subs	r1, #32
    while(len > 32) {
  416b80:	2920      	cmp	r1, #32
  416b82:	d8f1      	bhi.n	416b68 <_lv_memset_ff+0x20>
  416b84:	e004      	b.n	416b90 <_lv_memset_ff+0x48>
        SET32(0xFFFFFFFF);
  416b86:	f04f 33ff 	mov.w	r3, #4294967295
  416b8a:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416b8e:	3904      	subs	r1, #4
    while(len > 4) {
  416b90:	2904      	cmp	r1, #4
  416b92:	d8f8      	bhi.n	416b86 <_lv_memset_ff+0x3e>
  416b94:	e003      	b.n	416b9e <_lv_memset_ff+0x56>
        SET8(0xFF);
  416b96:	23ff      	movs	r3, #255	; 0xff
  416b98:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  416b9c:	3901      	subs	r1, #1
    while(len) {
  416b9e:	2900      	cmp	r1, #0
  416ba0:	d1f9      	bne.n	416b96 <_lv_memset_ff+0x4e>
}
  416ba2:	4770      	bx	lr

00416ba4 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
  416ba4:	429a      	cmp	r2, r3
  416ba6:	d200      	bcs.n	416baa <_out_buffer+0x6>
        ((char *)buffer)[idx] = character;
  416ba8:	5488      	strb	r0, [r1, r2]
  416baa:	4770      	bx	lr

00416bac <_out_null>:
    }
}

// internal null output
static inline void _out_null(char character, void * buffer, size_t idx, size_t maxlen)
{
  416bac:	4770      	bx	lr

00416bae <_atoi>:
}

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char ** str)
{
    unsigned int i = 0U;
  416bae:	2300      	movs	r3, #0
    while(_is_digit(**str)) {
  416bb0:	e007      	b.n	416bc2 <_atoi+0x14>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
  416bb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  416bb6:	005a      	lsls	r2, r3, #1
  416bb8:	1c4b      	adds	r3, r1, #1
  416bba:	6003      	str	r3, [r0, #0]
  416bbc:	780b      	ldrb	r3, [r1, #0]
  416bbe:	4413      	add	r3, r2
  416bc0:	3b30      	subs	r3, #48	; 0x30
    while(_is_digit(**str)) {
  416bc2:	6801      	ldr	r1, [r0, #0]
  416bc4:	780a      	ldrb	r2, [r1, #0]
    return (ch >= '0') && (ch <= '9');
  416bc6:	3a30      	subs	r2, #48	; 0x30
  416bc8:	b2d2      	uxtb	r2, r2
    while(_is_digit(**str)) {
  416bca:	2a09      	cmp	r2, #9
  416bcc:	d9f1      	bls.n	416bb2 <_atoi+0x4>
    }
    return i;
}
  416bce:	4618      	mov	r0, r3
  416bd0:	4770      	bx	lr

00416bd2 <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char * buffer, size_t idx, size_t maxlen, const char * buf, size_t len,
                       unsigned int width, unsigned int flags)
{
  416bd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416bd6:	b083      	sub	sp, #12
  416bd8:	4605      	mov	r5, r0
  416bda:	9101      	str	r1, [sp, #4]
  416bdc:	4693      	mov	fp, r2
  416bde:	461e      	mov	r6, r3
  416be0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  416be4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  416be6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    const size_t start_idx = idx;

    // pad spaces up to given width
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  416bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  416bec:	f013 0f03 	tst.w	r3, #3
  416bf0:	d114      	bne.n	416c1c <_out_rev+0x4a>
  416bf2:	4627      	mov	r7, r4
  416bf4:	e007      	b.n	416c06 <_out_rev+0x34>
        size_t i;
        for(i = len; i < width; i++) {
            out(' ', buffer, idx++, maxlen);
  416bf6:	f102 0a01 	add.w	sl, r2, #1
  416bfa:	4633      	mov	r3, r6
  416bfc:	9901      	ldr	r1, [sp, #4]
  416bfe:	2020      	movs	r0, #32
  416c00:	47a8      	blx	r5
        for(i = len; i < width; i++) {
  416c02:	3701      	adds	r7, #1
            out(' ', buffer, idx++, maxlen);
  416c04:	4652      	mov	r2, sl
        for(i = len; i < width; i++) {
  416c06:	4547      	cmp	r7, r8
  416c08:	d3f5      	bcc.n	416bf6 <_out_rev+0x24>
  416c0a:	e007      	b.n	416c1c <_out_rev+0x4a>
        }
    }

    // reverse string
    while(len) {
        out(buf[--len], buffer, idx++, maxlen);
  416c0c:	3c01      	subs	r4, #1
  416c0e:	1c57      	adds	r7, r2, #1
  416c10:	4633      	mov	r3, r6
  416c12:	9901      	ldr	r1, [sp, #4]
  416c14:	f819 0004 	ldrb.w	r0, [r9, r4]
  416c18:	47a8      	blx	r5
  416c1a:	463a      	mov	r2, r7
    while(len) {
  416c1c:	2c00      	cmp	r4, #0
  416c1e:	d1f5      	bne.n	416c0c <_out_rev+0x3a>
    }

    // append pad spaces up to given width
    if(flags & FLAGS_LEFT) {
  416c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  416c22:	f013 0f02 	tst.w	r3, #2
  416c26:	d00b      	beq.n	416c40 <_out_rev+0x6e>
  416c28:	9f01      	ldr	r7, [sp, #4]
  416c2a:	e005      	b.n	416c38 <_out_rev+0x66>
        while(idx - start_idx < width) {
            out(' ', buffer, idx++, maxlen);
  416c2c:	1c54      	adds	r4, r2, #1
  416c2e:	4633      	mov	r3, r6
  416c30:	4639      	mov	r1, r7
  416c32:	2020      	movs	r0, #32
  416c34:	47a8      	blx	r5
  416c36:	4622      	mov	r2, r4
        while(idx - start_idx < width) {
  416c38:	eba2 030b 	sub.w	r3, r2, fp
  416c3c:	4598      	cmp	r8, r3
  416c3e:	d8f5      	bhi.n	416c2c <_out_rev+0x5a>
        }
    }

    return idx;
}
  416c40:	4610      	mov	r0, r2
  416c42:	b003      	add	sp, #12
  416c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416c48 <_ntoa_format>:

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
  416c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  416c4c:	b085      	sub	sp, #20
  416c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  416c50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  416c52:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
  416c56:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  416c5a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  416c5e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
  416c62:	9e12      	ldr	r6, [sp, #72]	; 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
  416c64:	f016 0f02 	tst.w	r6, #2
  416c68:	d124      	bne.n	416cb4 <_ntoa_format+0x6c>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  416c6a:	f1be 0f00 	cmp.w	lr, #0
  416c6e:	d00e      	beq.n	416c8e <_ntoa_format+0x46>
  416c70:	f016 0f01 	tst.w	r6, #1
  416c74:	d00b      	beq.n	416c8e <_ntoa_format+0x46>
  416c76:	f1b9 0f00 	cmp.w	r9, #0
  416c7a:	d102      	bne.n	416c82 <_ntoa_format+0x3a>
  416c7c:	f016 0f0c 	tst.w	r6, #12
  416c80:	d005      	beq.n	416c8e <_ntoa_format+0x46>
            width--;
  416c82:	f10e 3eff 	add.w	lr, lr, #4294967295
  416c86:	e002      	b.n	416c8e <_ntoa_format+0x46>
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
  416c88:	2730      	movs	r7, #48	; 0x30
  416c8a:	552f      	strb	r7, [r5, r4]
  416c8c:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416c8e:	2c1f      	cmp	r4, #31
  416c90:	bf98      	it	ls
  416c92:	4564      	cmpls	r4, ip
  416c94:	d3f8      	bcc.n	416c88 <_ntoa_format+0x40>
  416c96:	e002      	b.n	416c9e <_ntoa_format+0x56>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
  416c98:	2730      	movs	r7, #48	; 0x30
  416c9a:	552f      	strb	r7, [r5, r4]
  416c9c:	3401      	adds	r4, #1
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416c9e:	f016 0f01 	tst.w	r6, #1
  416ca2:	d007      	beq.n	416cb4 <_ntoa_format+0x6c>
  416ca4:	2c1f      	cmp	r4, #31
  416ca6:	bf8c      	ite	hi
  416ca8:	2700      	movhi	r7, #0
  416caa:	2701      	movls	r7, #1
  416cac:	4574      	cmp	r4, lr
  416cae:	d201      	bcs.n	416cb4 <_ntoa_format+0x6c>
  416cb0:	2f00      	cmp	r7, #0
  416cb2:	d1f1      	bne.n	416c98 <_ntoa_format+0x50>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
  416cb4:	f016 0f10 	tst.w	r6, #16
  416cb8:	d026      	beq.n	416d08 <_ntoa_format+0xc0>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
  416cba:	f416 6f80 	tst.w	r6, #1024	; 0x400
  416cbe:	d110      	bne.n	416ce2 <_ntoa_format+0x9a>
  416cc0:	b17c      	cbz	r4, 416ce2 <_ntoa_format+0x9a>
  416cc2:	4574      	cmp	r4, lr
  416cc4:	bf18      	it	ne
  416cc6:	4564      	cmpne	r4, ip
  416cc8:	d10b      	bne.n	416ce2 <_ntoa_format+0x9a>
            len--;
            if(len && (base == 16U)) {
  416cca:	f104 3cff 	add.w	ip, r4, #4294967295
  416cce:	f114 37ff 	adds.w	r7, r4, #4294967295
  416cd2:	bf18      	it	ne
  416cd4:	2701      	movne	r7, #1
  416cd6:	f1b8 0f10 	cmp.w	r8, #16
  416cda:	bf18      	it	ne
  416cdc:	2700      	movne	r7, #0
  416cde:	b317      	cbz	r7, 416d26 <_ntoa_format+0xde>
                len--;
  416ce0:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416ce2:	f1b8 0f10 	cmp.w	r8, #16
  416ce6:	d020      	beq.n	416d2a <_ntoa_format+0xe2>
            buf[len++] = 'x';
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416ce8:	f1b8 0f10 	cmp.w	r8, #16
  416cec:	d026      	beq.n	416d3c <_ntoa_format+0xf4>
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416cee:	2c1f      	cmp	r4, #31
  416cf0:	bf98      	it	ls
  416cf2:	f1b8 0f02 	cmpls.w	r8, #2
  416cf6:	d102      	bne.n	416cfe <_ntoa_format+0xb6>
            buf[len++] = 'b';
  416cf8:	2762      	movs	r7, #98	; 0x62
  416cfa:	552f      	strb	r7, [r5, r4]
  416cfc:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
  416cfe:	2c1f      	cmp	r4, #31
  416d00:	d802      	bhi.n	416d08 <_ntoa_format+0xc0>
            buf[len++] = '0';
  416d02:	2730      	movs	r7, #48	; 0x30
  416d04:	552f      	strb	r7, [r5, r4]
  416d06:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
  416d08:	2c1f      	cmp	r4, #31
  416d0a:	d823      	bhi.n	416d54 <_ntoa_format+0x10c>
        if(negative) {
  416d0c:	f1b9 0f00 	cmp.w	r9, #0
  416d10:	d11d      	bne.n	416d4e <_ntoa_format+0x106>
            buf[len++] = '-';
        }
        else if(flags & FLAGS_PLUS) {
  416d12:	f016 0f04 	tst.w	r6, #4
  416d16:	d127      	bne.n	416d68 <_ntoa_format+0x120>
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
  416d18:	f016 0f08 	tst.w	r6, #8
  416d1c:	d01a      	beq.n	416d54 <_ntoa_format+0x10c>
            buf[len++] = ' ';
  416d1e:	2720      	movs	r7, #32
  416d20:	552f      	strb	r7, [r5, r4]
  416d22:	3401      	adds	r4, #1
  416d24:	e016      	b.n	416d54 <_ntoa_format+0x10c>
            len--;
  416d26:	4664      	mov	r4, ip
  416d28:	e7db      	b.n	416ce2 <_ntoa_format+0x9a>
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416d2a:	f016 0f20 	tst.w	r6, #32
  416d2e:	d1db      	bne.n	416ce8 <_ntoa_format+0xa0>
  416d30:	2c1f      	cmp	r4, #31
  416d32:	d8d9      	bhi.n	416ce8 <_ntoa_format+0xa0>
            buf[len++] = 'x';
  416d34:	2778      	movs	r7, #120	; 0x78
  416d36:	552f      	strb	r7, [r5, r4]
  416d38:	3401      	adds	r4, #1
  416d3a:	e7e0      	b.n	416cfe <_ntoa_format+0xb6>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416d3c:	f016 0f20 	tst.w	r6, #32
  416d40:	d0d5      	beq.n	416cee <_ntoa_format+0xa6>
  416d42:	2c1f      	cmp	r4, #31
  416d44:	d8d3      	bhi.n	416cee <_ntoa_format+0xa6>
            buf[len++] = 'X';
  416d46:	2758      	movs	r7, #88	; 0x58
  416d48:	552f      	strb	r7, [r5, r4]
  416d4a:	3401      	adds	r4, #1
  416d4c:	e7d7      	b.n	416cfe <_ntoa_format+0xb6>
            buf[len++] = '-';
  416d4e:	272d      	movs	r7, #45	; 0x2d
  416d50:	552f      	strb	r7, [r5, r4]
  416d52:	3401      	adds	r4, #1
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  416d54:	9603      	str	r6, [sp, #12]
  416d56:	f8cd e008 	str.w	lr, [sp, #8]
  416d5a:	9401      	str	r4, [sp, #4]
  416d5c:	9500      	str	r5, [sp, #0]
  416d5e:	4c04      	ldr	r4, [pc, #16]	; (416d70 <_ntoa_format+0x128>)
  416d60:	47a0      	blx	r4
}
  416d62:	b005      	add	sp, #20
  416d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            buf[len++] = '+';  // ignore the space if the '+' exists
  416d68:	272b      	movs	r7, #43	; 0x2b
  416d6a:	552f      	strb	r7, [r5, r4]
  416d6c:	3401      	adds	r4, #1
  416d6e:	e7f1      	b.n	416d54 <_ntoa_format+0x10c>
  416d70:	00416bd3 	.word	0x00416bd3

00416d74 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  416d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  416d78:	b090      	sub	sp, #64	; 0x40
  416d7a:	9d16      	ldr	r5, [sp, #88]	; 0x58
  416d7c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  416d7e:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  416d82:	b90d      	cbnz	r5, 416d88 <_ntoa_long+0x14>
        flags &= ~FLAGS_HASH;
  416d84:	f02e 0e10 	bic.w	lr, lr, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  416d88:	f41e 6680 	ands.w	r6, lr, #1024	; 0x400
  416d8c:	d01b      	beq.n	416dc6 <_ntoa_long+0x52>
  416d8e:	b34d      	cbz	r5, 416de4 <_ntoa_long+0x70>
  416d90:	2600      	movs	r6, #0
  416d92:	e018      	b.n	416dc6 <_ntoa_long+0x52>
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416d94:	f01e 0f20 	tst.w	lr, #32
  416d98:	d021      	beq.n	416dde <_ntoa_long+0x6a>
  416d9a:	f04f 0841 	mov.w	r8, #65	; 0x41
  416d9e:	4444      	add	r4, r8
  416da0:	b2e4      	uxtb	r4, r4
  416da2:	3c0a      	subs	r4, #10
  416da4:	b2e4      	uxtb	r4, r4
  416da6:	f10d 0840 	add.w	r8, sp, #64	; 0x40
  416daa:	4446      	add	r6, r8
  416dac:	f806 4c20 	strb.w	r4, [r6, #-32]
            value /= base;
  416db0:	fbb5 f5f7 	udiv	r5, r5, r7
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  416db4:	1c2c      	adds	r4, r5, #0
  416db6:	bf18      	it	ne
  416db8:	2401      	movne	r4, #1
  416dba:	f1bc 0f1f 	cmp.w	ip, #31
  416dbe:	bf88      	it	hi
  416dc0:	2400      	movhi	r4, #0
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416dc2:	4666      	mov	r6, ip
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  416dc4:	b184      	cbz	r4, 416de8 <_ntoa_long+0x74>
            const char digit = (char)(value % base);
  416dc6:	fbb5 f4f7 	udiv	r4, r5, r7
  416dca:	fb07 5414 	mls	r4, r7, r4, r5
  416dce:	b2e4      	uxtb	r4, r4
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416dd0:	f106 0c01 	add.w	ip, r6, #1
  416dd4:	2c09      	cmp	r4, #9
  416dd6:	d8dd      	bhi.n	416d94 <_ntoa_long+0x20>
  416dd8:	3430      	adds	r4, #48	; 0x30
  416dda:	b2e4      	uxtb	r4, r4
  416ddc:	e7e3      	b.n	416da6 <_ntoa_long+0x32>
  416dde:	f04f 0861 	mov.w	r8, #97	; 0x61
  416de2:	e7dc      	b.n	416d9e <_ntoa_long+0x2a>
    size_t len = 0U;
  416de4:	f04f 0c00 	mov.w	ip, #0
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  416de8:	f8cd e018 	str.w	lr, [sp, #24]
  416dec:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  416dee:	9405      	str	r4, [sp, #20]
  416df0:	9c19      	ldr	r4, [sp, #100]	; 0x64
  416df2:	9404      	str	r4, [sp, #16]
  416df4:	9703      	str	r7, [sp, #12]
  416df6:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
  416dfa:	9402      	str	r4, [sp, #8]
  416dfc:	f8cd c004 	str.w	ip, [sp, #4]
  416e00:	ac08      	add	r4, sp, #32
  416e02:	9400      	str	r4, [sp, #0]
  416e04:	4c02      	ldr	r4, [pc, #8]	; (416e10 <_ntoa_long+0x9c>)
  416e06:	47a0      	blx	r4
}
  416e08:	b010      	add	sp, #64	; 0x40
  416e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  416e0e:	bf00      	nop
  416e10:	00416c49 	.word	0x00416c49

00416e14 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  416e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416e18:	b095      	sub	sp, #84	; 0x54
  416e1a:	9009      	str	r0, [sp, #36]	; 0x24
  416e1c:	910a      	str	r1, [sp, #40]	; 0x28
  416e1e:	920b      	str	r2, [sp, #44]	; 0x2c
  416e20:	469b      	mov	fp, r3
  416e22:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
  416e26:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
  416e2a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
  416e2e:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  416e32:	ea54 0305 	orrs.w	r3, r4, r5
  416e36:	d101      	bne.n	416e3c <_ntoa_long_long+0x28>
        flags &= ~FLAGS_HASH;
  416e38:	f02a 0a10 	bic.w	sl, sl, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  416e3c:	f41a 6680 	ands.w	r6, sl, #1024	; 0x400
  416e40:	d024      	beq.n	416e8c <_ntoa_long_long+0x78>
  416e42:	ea54 0305 	orrs.w	r3, r4, r5
  416e46:	d031      	beq.n	416eac <_ntoa_long_long+0x98>
  416e48:	2600      	movs	r6, #0
  416e4a:	e01f      	b.n	416e8c <_ntoa_long_long+0x78>
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416e4c:	f01a 0f20 	tst.w	sl, #32
  416e50:	d02a      	beq.n	416ea8 <_ntoa_long_long+0x94>
  416e52:	2241      	movs	r2, #65	; 0x41
  416e54:	441a      	add	r2, r3
  416e56:	b2d2      	uxtb	r2, r2
  416e58:	3a0a      	subs	r2, #10
  416e5a:	b2d2      	uxtb	r2, r2
  416e5c:	ab14      	add	r3, sp, #80	; 0x50
  416e5e:	441e      	add	r6, r3
  416e60:	f806 2c20 	strb.w	r2, [r6, #-32]
            value /= base;
  416e64:	4642      	mov	r2, r8
  416e66:	464b      	mov	r3, r9
  416e68:	4620      	mov	r0, r4
  416e6a:	4629      	mov	r1, r5
  416e6c:	4c1b      	ldr	r4, [pc, #108]	; (416edc <_ntoa_long_long+0xc8>)
  416e6e:	47a0      	blx	r4
  416e70:	4604      	mov	r4, r0
  416e72:	460d      	mov	r5, r1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  416e74:	ea50 0301 	orrs.w	r3, r0, r1
  416e78:	bf14      	ite	ne
  416e7a:	2301      	movne	r3, #1
  416e7c:	2300      	moveq	r3, #0
  416e7e:	2f1f      	cmp	r7, #31
  416e80:	bf8c      	ite	hi
  416e82:	2300      	movhi	r3, #0
  416e84:	f003 0301 	andls.w	r3, r3, #1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416e88:	463e      	mov	r6, r7
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  416e8a:	b183      	cbz	r3, 416eae <_ntoa_long_long+0x9a>
            const char digit = (char)(value % base);
  416e8c:	4642      	mov	r2, r8
  416e8e:	464b      	mov	r3, r9
  416e90:	4620      	mov	r0, r4
  416e92:	4629      	mov	r1, r5
  416e94:	4f11      	ldr	r7, [pc, #68]	; (416edc <_ntoa_long_long+0xc8>)
  416e96:	47b8      	blx	r7
  416e98:	b2d3      	uxtb	r3, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416e9a:	1c77      	adds	r7, r6, #1
  416e9c:	2b09      	cmp	r3, #9
  416e9e:	d8d5      	bhi.n	416e4c <_ntoa_long_long+0x38>
  416ea0:	f103 0230 	add.w	r2, r3, #48	; 0x30
  416ea4:	b2d2      	uxtb	r2, r2
  416ea6:	e7d9      	b.n	416e5c <_ntoa_long_long+0x48>
  416ea8:	2261      	movs	r2, #97	; 0x61
  416eaa:	e7d3      	b.n	416e54 <_ntoa_long_long+0x40>
    size_t len = 0U;
  416eac:	2700      	movs	r7, #0
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  416eae:	f8cd a018 	str.w	sl, [sp, #24]
  416eb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  416eb4:	9305      	str	r3, [sp, #20]
  416eb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  416eb8:	9304      	str	r3, [sp, #16]
  416eba:	f8cd 800c 	str.w	r8, [sp, #12]
  416ebe:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  416ec2:	9302      	str	r3, [sp, #8]
  416ec4:	9701      	str	r7, [sp, #4]
  416ec6:	ab0c      	add	r3, sp, #48	; 0x30
  416ec8:	9300      	str	r3, [sp, #0]
  416eca:	465b      	mov	r3, fp
  416ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  416ece:	990a      	ldr	r1, [sp, #40]	; 0x28
  416ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
  416ed2:	4c03      	ldr	r4, [pc, #12]	; (416ee0 <_ntoa_long_long+0xcc>)
  416ed4:	47a0      	blx	r4
}
  416ed6:	b015      	add	sp, #84	; 0x54
  416ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416edc:	00426ef1 	.word	0x00426ef1
  416ee0:	00416c49 	.word	0x00416c49

00416ee4 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
  416ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416ee8:	b08f      	sub	sp, #60	; 0x3c
  416eea:	4606      	mov	r6, r0
  416eec:	920a      	str	r2, [sp, #40]	; 0x28
  416eee:	930d      	str	r3, [sp, #52]	; 0x34
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
  416ef0:	910b      	str	r1, [sp, #44]	; 0x2c
  416ef2:	b189      	cbz	r1, 416f18 <_vsnprintf+0x34>
                    format++;
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
  416ef4:	2500      	movs	r5, #0
    while(*format) {
  416ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416ef8:	7818      	ldrb	r0, [r3, #0]
  416efa:	2800      	cmp	r0, #0
  416efc:	f000 82e5 	beq.w	4174ca <_vsnprintf+0x5e6>
        if(*format != '%') {
  416f00:	2825      	cmp	r0, #37	; 0x25
  416f02:	d00b      	beq.n	416f1c <_vsnprintf+0x38>
            out(*format, buffer, idx++, maxlen);
  416f04:	1c6c      	adds	r4, r5, #1
  416f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416f08:	462a      	mov	r2, r5
  416f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416f0c:	47b0      	blx	r6
            format++;
  416f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416f10:	3301      	adds	r3, #1
  416f12:	930d      	str	r3, [sp, #52]	; 0x34
            out(*format, buffer, idx++, maxlen);
  416f14:	4625      	mov	r5, r4
            continue;
  416f16:	e7ee      	b.n	416ef6 <_vsnprintf+0x12>
        out = _out_null;
  416f18:	4e93      	ldr	r6, [pc, #588]	; (417168 <_vsnprintf+0x284>)
  416f1a:	e7eb      	b.n	416ef4 <_vsnprintf+0x10>
            format++;
  416f1c:	3301      	adds	r3, #1
  416f1e:	930d      	str	r3, [sp, #52]	; 0x34
        flags = 0U;
  416f20:	f04f 0900 	mov.w	r9, #0
  416f24:	e006      	b.n	416f34 <_vsnprintf+0x50>
                    flags |= FLAGS_ZEROPAD;
  416f26:	f049 0901 	orr.w	r9, r9, #1
                    format++;
  416f2a:	3201      	adds	r2, #1
  416f2c:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416f2e:	2401      	movs	r4, #1
        } while(n);
  416f30:	2c00      	cmp	r4, #0
  416f32:	d043      	beq.n	416fbc <_vsnprintf+0xd8>
            switch(*format) {
  416f34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  416f36:	7813      	ldrb	r3, [r2, #0]
  416f38:	3b20      	subs	r3, #32
  416f3a:	2b10      	cmp	r3, #16
  416f3c:	d83c      	bhi.n	416fb8 <_vsnprintf+0xd4>
  416f3e:	a101      	add	r1, pc, #4	; (adr r1, 416f44 <_vsnprintf+0x60>)
  416f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  416f44:	00416fa1 	.word	0x00416fa1
  416f48:	00416fb9 	.word	0x00416fb9
  416f4c:	00416fb9 	.word	0x00416fb9
  416f50:	00416fad 	.word	0x00416fad
  416f54:	00416fb9 	.word	0x00416fb9
  416f58:	00416fb9 	.word	0x00416fb9
  416f5c:	00416fb9 	.word	0x00416fb9
  416f60:	00416fb9 	.word	0x00416fb9
  416f64:	00416fb9 	.word	0x00416fb9
  416f68:	00416fb9 	.word	0x00416fb9
  416f6c:	00416fb9 	.word	0x00416fb9
  416f70:	00416f95 	.word	0x00416f95
  416f74:	00416fb9 	.word	0x00416fb9
  416f78:	00416f89 	.word	0x00416f89
  416f7c:	00416fb9 	.word	0x00416fb9
  416f80:	00416fb9 	.word	0x00416fb9
  416f84:	00416f27 	.word	0x00416f27
                    flags |= FLAGS_LEFT;
  416f88:	f049 0902 	orr.w	r9, r9, #2
                    format++;
  416f8c:	3201      	adds	r2, #1
  416f8e:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416f90:	2401      	movs	r4, #1
                    break;
  416f92:	e7cd      	b.n	416f30 <_vsnprintf+0x4c>
                    flags |= FLAGS_PLUS;
  416f94:	f049 0904 	orr.w	r9, r9, #4
                    format++;
  416f98:	3201      	adds	r2, #1
  416f9a:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416f9c:	2401      	movs	r4, #1
                    break;
  416f9e:	e7c7      	b.n	416f30 <_vsnprintf+0x4c>
                    flags |= FLAGS_SPACE;
  416fa0:	f049 0908 	orr.w	r9, r9, #8
                    format++;
  416fa4:	3201      	adds	r2, #1
  416fa6:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416fa8:	2401      	movs	r4, #1
                    break;
  416faa:	e7c1      	b.n	416f30 <_vsnprintf+0x4c>
                    flags |= FLAGS_HASH;
  416fac:	f049 0910 	orr.w	r9, r9, #16
                    format++;
  416fb0:	3201      	adds	r2, #1
  416fb2:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416fb4:	2401      	movs	r4, #1
                    break;
  416fb6:	e7bb      	b.n	416f30 <_vsnprintf+0x4c>
                    n = 0U;
  416fb8:	2400      	movs	r4, #0
  416fba:	e7b9      	b.n	416f30 <_vsnprintf+0x4c>
        if(_is_digit(*format)) {
  416fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416fbe:	781a      	ldrb	r2, [r3, #0]
    return (ch >= '0') && (ch <= '9');
  416fc0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
  416fc4:	b2db      	uxtb	r3, r3
        if(_is_digit(*format)) {
  416fc6:	2b09      	cmp	r3, #9
  416fc8:	d917      	bls.n	416ffa <_vsnprintf+0x116>
        else if(*format == '*') {
  416fca:	2a2a      	cmp	r2, #42	; 0x2a
  416fcc:	d01a      	beq.n	417004 <_vsnprintf+0x120>
        width = 0U;
  416fce:	46a0      	mov	r8, r4
        if(*format == '.') {
  416fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416fd2:	781a      	ldrb	r2, [r3, #0]
  416fd4:	2a2e      	cmp	r2, #46	; 0x2e
  416fd6:	d025      	beq.n	417024 <_vsnprintf+0x140>
        switch(*format) {
  416fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  416fda:	7813      	ldrb	r3, [r2, #0]
  416fdc:	3b68      	subs	r3, #104	; 0x68
  416fde:	2b12      	cmp	r3, #18
  416fe0:	d85b      	bhi.n	41709a <_vsnprintf+0x1b6>
  416fe2:	e8df f003 	tbb	[pc, r3]
  416fe6:	5a48      	.short	0x5a48
  416fe8:	5a3a5ab7 	.word	0x5a3a5ab7
  416fec:	5a5a5a5a 	.word	0x5a5a5a5a
  416ff0:	5a565a5a 	.word	0x5a565a5a
  416ff4:	5a5a5a5a 	.word	0x5a5a5a5a
  416ff8:	bc          	.byte	0xbc
  416ff9:	00          	.byte	0x00
            width = _atoi(&format);
  416ffa:	a80d      	add	r0, sp, #52	; 0x34
  416ffc:	4b5b      	ldr	r3, [pc, #364]	; (41716c <_vsnprintf+0x288>)
  416ffe:	4798      	blx	r3
  417000:	4680      	mov	r8, r0
  417002:	e7e5      	b.n	416fd0 <_vsnprintf+0xec>
            const int w = va_arg(va, int);
  417004:	9b18      	ldr	r3, [sp, #96]	; 0x60
  417006:	1d1a      	adds	r2, r3, #4
  417008:	9218      	str	r2, [sp, #96]	; 0x60
  41700a:	681b      	ldr	r3, [r3, #0]
            if(w < 0) {
  41700c:	2b00      	cmp	r3, #0
  41700e:	db04      	blt.n	41701a <_vsnprintf+0x136>
                width = (unsigned int)w;
  417010:	4698      	mov	r8, r3
            format++;
  417012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417014:	3301      	adds	r3, #1
  417016:	930d      	str	r3, [sp, #52]	; 0x34
  417018:	e7da      	b.n	416fd0 <_vsnprintf+0xec>
                flags |= FLAGS_LEFT;    // reverse padding
  41701a:	f049 0902 	orr.w	r9, r9, #2
                width = (unsigned int) - w;
  41701e:	f1c3 0800 	rsb	r8, r3, #0
  417022:	e7f6      	b.n	417012 <_vsnprintf+0x12e>
            flags |= FLAGS_PRECISION;
  417024:	f449 6980 	orr.w	r9, r9, #1024	; 0x400
            format++;
  417028:	1c5a      	adds	r2, r3, #1
  41702a:	920d      	str	r2, [sp, #52]	; 0x34
            if(_is_digit(*format)) {
  41702c:	785a      	ldrb	r2, [r3, #1]
    return (ch >= '0') && (ch <= '9');
  41702e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
  417032:	b2db      	uxtb	r3, r3
            if(_is_digit(*format)) {
  417034:	2b09      	cmp	r3, #9
  417036:	d90b      	bls.n	417050 <_vsnprintf+0x16c>
            else if(*format == '*') {
  417038:	2a2a      	cmp	r2, #42	; 0x2a
  41703a:	d1cd      	bne.n	416fd8 <_vsnprintf+0xf4>
                const int prec = (int)va_arg(va, int);
  41703c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41703e:	1d1a      	adds	r2, r3, #4
  417040:	9218      	str	r2, [sp, #96]	; 0x60
  417042:	681c      	ldr	r4, [r3, #0]
                precision = prec > 0 ? (unsigned int)prec : 0U;
  417044:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                format++;
  417048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41704a:	3301      	adds	r3, #1
  41704c:	930d      	str	r3, [sp, #52]	; 0x34
  41704e:	e7c3      	b.n	416fd8 <_vsnprintf+0xf4>
                precision = _atoi(&format);
  417050:	a80d      	add	r0, sp, #52	; 0x34
  417052:	4b46      	ldr	r3, [pc, #280]	; (41716c <_vsnprintf+0x288>)
  417054:	4798      	blx	r3
  417056:	4604      	mov	r4, r0
  417058:	e7be      	b.n	416fd8 <_vsnprintf+0xf4>
                flags |= FLAGS_LONG;
  41705a:	f449 7180 	orr.w	r1, r9, #256	; 0x100
                format++;
  41705e:	1c53      	adds	r3, r2, #1
  417060:	930d      	str	r3, [sp, #52]	; 0x34
                if(*format == 'l') {
  417062:	7852      	ldrb	r2, [r2, #1]
  417064:	2a6c      	cmp	r2, #108	; 0x6c
  417066:	d001      	beq.n	41706c <_vsnprintf+0x188>
                flags |= FLAGS_LONG;
  417068:	4689      	mov	r9, r1
  41706a:	e016      	b.n	41709a <_vsnprintf+0x1b6>
                    flags |= FLAGS_LONG_LONG;
  41706c:	f449 7940 	orr.w	r9, r9, #768	; 0x300
                    format++;
  417070:	3301      	adds	r3, #1
  417072:	930d      	str	r3, [sp, #52]	; 0x34
  417074:	e011      	b.n	41709a <_vsnprintf+0x1b6>
                flags |= FLAGS_SHORT;
  417076:	f049 0180 	orr.w	r1, r9, #128	; 0x80
                format++;
  41707a:	1c53      	adds	r3, r2, #1
  41707c:	930d      	str	r3, [sp, #52]	; 0x34
                if(*format == 'h') {
  41707e:	7852      	ldrb	r2, [r2, #1]
  417080:	2a68      	cmp	r2, #104	; 0x68
  417082:	d001      	beq.n	417088 <_vsnprintf+0x1a4>
                flags |= FLAGS_SHORT;
  417084:	4689      	mov	r9, r1
  417086:	e008      	b.n	41709a <_vsnprintf+0x1b6>
                    flags |= FLAGS_CHAR;
  417088:	f049 09c0 	orr.w	r9, r9, #192	; 0xc0
                    format++;
  41708c:	3301      	adds	r3, #1
  41708e:	930d      	str	r3, [sp, #52]	; 0x34
  417090:	e003      	b.n	41709a <_vsnprintf+0x1b6>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  417092:	f449 7980 	orr.w	r9, r9, #256	; 0x100
                format++;
  417096:	3201      	adds	r2, #1
  417098:	920d      	str	r2, [sp, #52]	; 0x34
        switch(*format) {
  41709a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41709c:	7818      	ldrb	r0, [r3, #0]
  41709e:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
  4170a2:	2b53      	cmp	r3, #83	; 0x53
  4170a4:	f200 8207 	bhi.w	4174b6 <_vsnprintf+0x5d2>
  4170a8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4170ac:	020501fa 	.word	0x020501fa
  4170b0:	02050205 	.word	0x02050205
  4170b4:	02050205 	.word	0x02050205
  4170b8:	02050205 	.word	0x02050205
  4170bc:	02050205 	.word	0x02050205
  4170c0:	02050205 	.word	0x02050205
  4170c4:	02050205 	.word	0x02050205
  4170c8:	02050205 	.word	0x02050205
  4170cc:	02050205 	.word	0x02050205
  4170d0:	02050205 	.word	0x02050205
  4170d4:	02050205 	.word	0x02050205
  4170d8:	02050205 	.word	0x02050205
  4170dc:	02050205 	.word	0x02050205
  4170e0:	02050205 	.word	0x02050205
  4170e4:	02050205 	.word	0x02050205
  4170e8:	02050205 	.word	0x02050205
  4170ec:	02050205 	.word	0x02050205
  4170f0:	02050205 	.word	0x02050205
  4170f4:	02050205 	.word	0x02050205
  4170f8:	02050205 	.word	0x02050205
  4170fc:	02050205 	.word	0x02050205
  417100:	02050205 	.word	0x02050205
  417104:	02050205 	.word	0x02050205
  417108:	02050205 	.word	0x02050205
  41710c:	02050205 	.word	0x02050205
  417110:	00620205 	.word	0x00620205
  417114:	02050205 	.word	0x02050205
  417118:	02050205 	.word	0x02050205
  41711c:	02050205 	.word	0x02050205
  417120:	02050205 	.word	0x02050205
  417124:	00620205 	.word	0x00620205
  417128:	00620155 	.word	0x00620155
  41712c:	02050205 	.word	0x02050205
  417130:	02050205 	.word	0x02050205
  417134:	02050062 	.word	0x02050062
  417138:	02050205 	.word	0x02050205
  41713c:	02050205 	.word	0x02050205
  417140:	01e00062 	.word	0x01e00062
  417144:	02050205 	.word	0x02050205
  417148:	02050187 	.word	0x02050187
  41714c:	02050062 	.word	0x02050062
  417150:	00620205 	.word	0x00620205
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  417154:	f449 7900 	orr.w	r9, r9, #512	; 0x200
                format++;
  417158:	3201      	adds	r2, #1
  41715a:	920d      	str	r2, [sp, #52]	; 0x34
                break;
  41715c:	e79d      	b.n	41709a <_vsnprintf+0x1b6>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  41715e:	f449 7980 	orr.w	r9, r9, #256	; 0x100
                format++;
  417162:	3201      	adds	r2, #1
  417164:	920d      	str	r2, [sp, #52]	; 0x34
                break;
  417166:	e798      	b.n	41709a <_vsnprintf+0x1b6>
  417168:	00416bad 	.word	0x00416bad
  41716c:	00416baf 	.word	0x00416baf
                    if(*format == 'x' || *format == 'X') {
  417170:	2858      	cmp	r0, #88	; 0x58
  417172:	bf18      	it	ne
  417174:	2878      	cmpne	r0, #120	; 0x78
  417176:	d007      	beq.n	417188 <_vsnprintf+0x2a4>
                    else if(*format == 'o') {
  417178:	286f      	cmp	r0, #111	; 0x6f
  41717a:	d040      	beq.n	4171fe <_vsnprintf+0x31a>
                    else if(*format == 'b') {
  41717c:	2862      	cmp	r0, #98	; 0x62
  41717e:	d040      	beq.n	417202 <_vsnprintf+0x31e>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
  417180:	f029 0910 	bic.w	r9, r9, #16
                        base = 10U;
  417184:	210a      	movs	r1, #10
  417186:	e000      	b.n	41718a <_vsnprintf+0x2a6>
                        base = 16U;
  417188:	2110      	movs	r1, #16
                    if(*format == 'X') {
  41718a:	2858      	cmp	r0, #88	; 0x58
  41718c:	d03b      	beq.n	417206 <_vsnprintf+0x322>
                    if((*format != 'i') && (*format != 'd')) {
  41718e:	2869      	cmp	r0, #105	; 0x69
  417190:	bf18      	it	ne
  417192:	2864      	cmpne	r0, #100	; 0x64
  417194:	d001      	beq.n	41719a <_vsnprintf+0x2b6>
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
  417196:	f029 090c 	bic.w	r9, r9, #12
                    if(flags & FLAGS_PRECISION) {
  41719a:	f419 6f80 	tst.w	r9, #1024	; 0x400
  41719e:	d001      	beq.n	4171a4 <_vsnprintf+0x2c0>
                        flags &= ~FLAGS_ZEROPAD;
  4171a0:	f029 0901 	bic.w	r9, r9, #1
                    if((*format == 'i') || (*format == 'd')) {
  4171a4:	2864      	cmp	r0, #100	; 0x64
  4171a6:	bf18      	it	ne
  4171a8:	2869      	cmpne	r0, #105	; 0x69
  4171aa:	d178      	bne.n	41729e <_vsnprintf+0x3ba>
                        if(flags & FLAGS_LONG_LONG) {
  4171ac:	f419 7f00 	tst.w	r9, #512	; 0x200
  4171b0:	d12c      	bne.n	41720c <_vsnprintf+0x328>
                        else if(flags & FLAGS_LONG) {
  4171b2:	f419 7f80 	tst.w	r9, #256	; 0x100
  4171b6:	d14f      	bne.n	417258 <_vsnprintf+0x374>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  4171b8:	f019 0f40 	tst.w	r9, #64	; 0x40
  4171bc:	d165      	bne.n	41728a <_vsnprintf+0x3a6>
                                                                                                                                       int) : va_arg(va, int);
  4171be:	f019 0f80 	tst.w	r9, #128	; 0x80
  4171c2:	d067      	beq.n	417294 <_vsnprintf+0x3b0>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  4171c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4171c6:	1d1a      	adds	r2, r3, #4
  4171c8:	9218      	str	r2, [sp, #96]	; 0x60
  4171ca:	f9b3 3000 	ldrsh.w	r3, [r3]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
  4171ce:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  4171d2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  4171d6:	0fdb      	lsrs	r3, r3, #31
  4171d8:	f8cd 9014 	str.w	r9, [sp, #20]
  4171dc:	f8cd 8010 	str.w	r8, [sp, #16]
  4171e0:	9403      	str	r4, [sp, #12]
  4171e2:	9102      	str	r1, [sp, #8]
  4171e4:	9301      	str	r3, [sp, #4]
  4171e6:	9200      	str	r2, [sp, #0]
  4171e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4171ea:	462a      	mov	r2, r5
  4171ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4171ee:	4630      	mov	r0, r6
  4171f0:	4c9c      	ldr	r4, [pc, #624]	; (417464 <_vsnprintf+0x580>)
  4171f2:	47a0      	blx	r4
  4171f4:	4605      	mov	r5, r0
                    format++;
  4171f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4171f8:	3301      	adds	r3, #1
  4171fa:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  4171fc:	e67b      	b.n	416ef6 <_vsnprintf+0x12>
                        base =  8U;
  4171fe:	2108      	movs	r1, #8
  417200:	e7c3      	b.n	41718a <_vsnprintf+0x2a6>
                        base =  2U;
  417202:	2102      	movs	r1, #2
  417204:	e7c1      	b.n	41718a <_vsnprintf+0x2a6>
                        flags |= FLAGS_UPPERCASE;
  417206:	f049 0920 	orr.w	r9, r9, #32
  41720a:	e7c0      	b.n	41718e <_vsnprintf+0x2aa>
                            const long long value = va_arg(va, long long);
  41720c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41720e:	3307      	adds	r3, #7
  417210:	f023 0007 	bic.w	r0, r3, #7
  417214:	f100 0308 	add.w	r3, r0, #8
  417218:	9318      	str	r3, [sp, #96]	; 0x60
  41721a:	6847      	ldr	r7, [r0, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
  41721c:	6802      	ldr	r2, [r0, #0]
  41721e:	463b      	mov	r3, r7
  417220:	2a00      	cmp	r2, #0
  417222:	f177 0000 	sbcs.w	r0, r7, #0
  417226:	db13      	blt.n	417250 <_vsnprintf+0x36c>
  417228:	0fff      	lsrs	r7, r7, #31
  41722a:	f8cd 9020 	str.w	r9, [sp, #32]
  41722e:	f8cd 801c 	str.w	r8, [sp, #28]
  417232:	9406      	str	r4, [sp, #24]
  417234:	9104      	str	r1, [sp, #16]
  417236:	2100      	movs	r1, #0
  417238:	9105      	str	r1, [sp, #20]
  41723a:	9702      	str	r7, [sp, #8]
  41723c:	e9cd 2300 	strd	r2, r3, [sp]
  417240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417242:	462a      	mov	r2, r5
  417244:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417246:	4630      	mov	r0, r6
  417248:	4c87      	ldr	r4, [pc, #540]	; (417468 <_vsnprintf+0x584>)
  41724a:	47a0      	blx	r4
  41724c:	4605      	mov	r5, r0
  41724e:	e7d2      	b.n	4171f6 <_vsnprintf+0x312>
  417250:	4252      	negs	r2, r2
  417252:	eb67 0347 	sbc.w	r3, r7, r7, lsl #1
  417256:	e7e7      	b.n	417228 <_vsnprintf+0x344>
                            const long value = va_arg(va, long);
  417258:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41725a:	1d1a      	adds	r2, r3, #4
  41725c:	9218      	str	r2, [sp, #96]	; 0x60
  41725e:	681b      	ldr	r3, [r3, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
  417260:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  417264:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  417268:	0fdb      	lsrs	r3, r3, #31
  41726a:	f8cd 9014 	str.w	r9, [sp, #20]
  41726e:	f8cd 8010 	str.w	r8, [sp, #16]
  417272:	9403      	str	r4, [sp, #12]
  417274:	9102      	str	r1, [sp, #8]
  417276:	9301      	str	r3, [sp, #4]
  417278:	9200      	str	r2, [sp, #0]
  41727a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41727c:	462a      	mov	r2, r5
  41727e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417280:	4630      	mov	r0, r6
  417282:	4c78      	ldr	r4, [pc, #480]	; (417464 <_vsnprintf+0x580>)
  417284:	47a0      	blx	r4
  417286:	4605      	mov	r5, r0
  417288:	e7b5      	b.n	4171f6 <_vsnprintf+0x312>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  41728a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41728c:	1d1a      	adds	r2, r3, #4
  41728e:	9218      	str	r2, [sp, #96]	; 0x60
  417290:	781b      	ldrb	r3, [r3, #0]
  417292:	e79c      	b.n	4171ce <_vsnprintf+0x2ea>
                                                                                                                                       int) : va_arg(va, int);
  417294:	9b18      	ldr	r3, [sp, #96]	; 0x60
  417296:	1d1a      	adds	r2, r3, #4
  417298:	9218      	str	r2, [sp, #96]	; 0x60
  41729a:	681b      	ldr	r3, [r3, #0]
  41729c:	e797      	b.n	4171ce <_vsnprintf+0x2ea>
                        if(flags & FLAGS_LONG_LONG) {
  41729e:	f419 7f00 	tst.w	r9, #512	; 0x200
  4172a2:	d11d      	bne.n	4172e0 <_vsnprintf+0x3fc>
                        else if(flags & FLAGS_LONG) {
  4172a4:	f419 7f80 	tst.w	r9, #256	; 0x100
  4172a8:	d136      	bne.n	417318 <_vsnprintf+0x434>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  4172aa:	f019 0f40 	tst.w	r9, #64	; 0x40
  4172ae:	d148      	bne.n	417342 <_vsnprintf+0x45e>
  4172b0:	f019 0f80 	tst.w	r9, #128	; 0x80
  4172b4:	d04a      	beq.n	41734c <_vsnprintf+0x468>
  4172b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4172b8:	1d1a      	adds	r2, r3, #4
  4172ba:	9218      	str	r2, [sp, #96]	; 0x60
  4172bc:	881b      	ldrh	r3, [r3, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
  4172be:	f8cd 9014 	str.w	r9, [sp, #20]
  4172c2:	f8cd 8010 	str.w	r8, [sp, #16]
  4172c6:	9403      	str	r4, [sp, #12]
  4172c8:	9102      	str	r1, [sp, #8]
  4172ca:	2200      	movs	r2, #0
  4172cc:	9201      	str	r2, [sp, #4]
  4172ce:	9300      	str	r3, [sp, #0]
  4172d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4172d2:	462a      	mov	r2, r5
  4172d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4172d6:	4630      	mov	r0, r6
  4172d8:	4c62      	ldr	r4, [pc, #392]	; (417464 <_vsnprintf+0x580>)
  4172da:	47a0      	blx	r4
  4172dc:	4605      	mov	r5, r0
  4172de:	e78a      	b.n	4171f6 <_vsnprintf+0x312>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
  4172e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4172e2:	3307      	adds	r3, #7
  4172e4:	f023 0307 	bic.w	r3, r3, #7
  4172e8:	f103 0208 	add.w	r2, r3, #8
  4172ec:	9218      	str	r2, [sp, #96]	; 0x60
  4172ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4172f2:	2000      	movs	r0, #0
  4172f4:	f8cd 9020 	str.w	r9, [sp, #32]
  4172f8:	f8cd 801c 	str.w	r8, [sp, #28]
  4172fc:	9406      	str	r4, [sp, #24]
  4172fe:	9104      	str	r1, [sp, #16]
  417300:	9005      	str	r0, [sp, #20]
  417302:	9002      	str	r0, [sp, #8]
  417304:	e9cd 2300 	strd	r2, r3, [sp]
  417308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41730a:	462a      	mov	r2, r5
  41730c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41730e:	4630      	mov	r0, r6
  417310:	4c55      	ldr	r4, [pc, #340]	; (417468 <_vsnprintf+0x584>)
  417312:	47a0      	blx	r4
  417314:	4605      	mov	r5, r0
  417316:	e76e      	b.n	4171f6 <_vsnprintf+0x312>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
  417318:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41731a:	1d1a      	adds	r2, r3, #4
  41731c:	9218      	str	r2, [sp, #96]	; 0x60
  41731e:	681b      	ldr	r3, [r3, #0]
  417320:	f8cd 9014 	str.w	r9, [sp, #20]
  417324:	f8cd 8010 	str.w	r8, [sp, #16]
  417328:	9403      	str	r4, [sp, #12]
  41732a:	9102      	str	r1, [sp, #8]
  41732c:	2200      	movs	r2, #0
  41732e:	9201      	str	r2, [sp, #4]
  417330:	9300      	str	r3, [sp, #0]
  417332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417334:	462a      	mov	r2, r5
  417336:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417338:	4630      	mov	r0, r6
  41733a:	4c4a      	ldr	r4, [pc, #296]	; (417464 <_vsnprintf+0x580>)
  41733c:	47a0      	blx	r4
  41733e:	4605      	mov	r5, r0
  417340:	e759      	b.n	4171f6 <_vsnprintf+0x312>
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
  417342:	9b18      	ldr	r3, [sp, #96]	; 0x60
  417344:	1d1a      	adds	r2, r3, #4
  417346:	9218      	str	r2, [sp, #96]	; 0x60
  417348:	781b      	ldrb	r3, [r3, #0]
  41734a:	e7b8      	b.n	4172be <_vsnprintf+0x3da>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  41734c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41734e:	1d1a      	adds	r2, r3, #4
  417350:	9218      	str	r2, [sp, #96]	; 0x60
  417352:	681b      	ldr	r3, [r3, #0]
  417354:	e7b3      	b.n	4172be <_vsnprintf+0x3da>
                    if(!(flags & FLAGS_LEFT)) {
  417356:	f019 0902 	ands.w	r9, r9, #2
  41735a:	d01d      	beq.n	417398 <_vsnprintf+0x4b4>
                    unsigned int l = 1U;
  41735c:	2401      	movs	r4, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  41735e:	9818      	ldr	r0, [sp, #96]	; 0x60
  417360:	1d03      	adds	r3, r0, #4
  417362:	9318      	str	r3, [sp, #96]	; 0x60
  417364:	1c6f      	adds	r7, r5, #1
  417366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417368:	462a      	mov	r2, r5
  41736a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41736c:	7800      	ldrb	r0, [r0, #0]
  41736e:	47b0      	blx	r6
                    if(flags & FLAGS_LEFT) {
  417370:	f1b9 0f00 	cmp.w	r9, #0
  417374:	d11f      	bne.n	4173b6 <_vsnprintf+0x4d2>
                    format++;
  417376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417378:	3301      	adds	r3, #1
  41737a:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  41737c:	463d      	mov	r5, r7
  41737e:	e5ba      	b.n	416ef6 <_vsnprintf+0x12>
                            out(' ', buffer, idx++, maxlen);
  417380:	1c55      	adds	r5, r2, #1
  417382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417384:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417386:	2020      	movs	r0, #32
  417388:	47b0      	blx	r6
                        while(l++ < width) {
  41738a:	4623      	mov	r3, r4
                            out(' ', buffer, idx++, maxlen);
  41738c:	462a      	mov	r2, r5
                        while(l++ < width) {
  41738e:	1c5c      	adds	r4, r3, #1
  417390:	4598      	cmp	r8, r3
  417392:	d8f5      	bhi.n	417380 <_vsnprintf+0x49c>
  417394:	4615      	mov	r5, r2
  417396:	e7e2      	b.n	41735e <_vsnprintf+0x47a>
  417398:	2301      	movs	r3, #1
  41739a:	462a      	mov	r2, r5
  41739c:	e7f7      	b.n	41738e <_vsnprintf+0x4aa>
                            out(' ', buffer, idx++, maxlen);
  41739e:	1c57      	adds	r7, r2, #1
  4173a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4173a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4173a4:	2020      	movs	r0, #32
  4173a6:	47b0      	blx	r6
                        while(l++ < width) {
  4173a8:	462c      	mov	r4, r5
                            out(' ', buffer, idx++, maxlen);
  4173aa:	463a      	mov	r2, r7
                        while(l++ < width) {
  4173ac:	1c65      	adds	r5, r4, #1
  4173ae:	45a0      	cmp	r8, r4
  4173b0:	d8f5      	bhi.n	41739e <_vsnprintf+0x4ba>
  4173b2:	4617      	mov	r7, r2
  4173b4:	e7df      	b.n	417376 <_vsnprintf+0x492>
  4173b6:	463a      	mov	r2, r7
  4173b8:	e7f8      	b.n	4173ac <_vsnprintf+0x4c8>
                    const char * p = va_arg(va, char *);
  4173ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4173bc:	1d1a      	adds	r2, r3, #4
  4173be:	9218      	str	r2, [sp, #96]	; 0x60
  4173c0:	681f      	ldr	r7, [r3, #0]
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
  4173c2:	b114      	cbz	r4, 4173ca <_vsnprintf+0x4e6>
  4173c4:	4622      	mov	r2, r4
  4173c6:	463b      	mov	r3, r7
  4173c8:	e004      	b.n	4173d4 <_vsnprintf+0x4f0>
  4173ca:	f04f 32ff 	mov.w	r2, #4294967295
  4173ce:	e7fa      	b.n	4173c6 <_vsnprintf+0x4e2>
    for(s = str; *s && maxsize--; ++s);
  4173d0:	3301      	adds	r3, #1
  4173d2:	460a      	mov	r2, r1
  4173d4:	7819      	ldrb	r1, [r3, #0]
  4173d6:	b111      	cbz	r1, 4173de <_vsnprintf+0x4fa>
  4173d8:	1e51      	subs	r1, r2, #1
  4173da:	2a00      	cmp	r2, #0
  4173dc:	d1f8      	bne.n	4173d0 <_vsnprintf+0x4ec>
    return (unsigned int)(s - str);
  4173de:	1bdb      	subs	r3, r3, r7
                    if(flags & FLAGS_PRECISION) {
  4173e0:	f419 6b80 	ands.w	fp, r9, #1024	; 0x400
  4173e4:	d002      	beq.n	4173ec <_vsnprintf+0x508>
                        l = (l < precision ? l : precision);
  4173e6:	42a3      	cmp	r3, r4
  4173e8:	bf28      	it	cs
  4173ea:	4623      	movcs	r3, r4
                    if(!(flags & FLAGS_LEFT)) {
  4173ec:	f019 0202 	ands.w	r2, r9, #2
  4173f0:	920c      	str	r2, [sp, #48]	; 0x30
  4173f2:	d011      	beq.n	417418 <_vsnprintf+0x534>
  4173f4:	4699      	mov	r9, r3
  4173f6:	462a      	mov	r2, r5
  4173f8:	465d      	mov	r5, fp
  4173fa:	e017      	b.n	41742c <_vsnprintf+0x548>
                            out(' ', buffer, idx++, maxlen);
  4173fc:	f102 0a01 	add.w	sl, r2, #1
  417400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417402:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417404:	2020      	movs	r0, #32
  417406:	47b0      	blx	r6
                        while(l++ < width) {
  417408:	464b      	mov	r3, r9
                            out(' ', buffer, idx++, maxlen);
  41740a:	4652      	mov	r2, sl
                        while(l++ < width) {
  41740c:	f103 0901 	add.w	r9, r3, #1
  417410:	4598      	cmp	r8, r3
  417412:	d8f3      	bhi.n	4173fc <_vsnprintf+0x518>
  417414:	465d      	mov	r5, fp
  417416:	e009      	b.n	41742c <_vsnprintf+0x548>
  417418:	462a      	mov	r2, r5
  41741a:	e7f7      	b.n	41740c <_vsnprintf+0x528>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  41741c:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
  41741e:	3701      	adds	r7, #1
  417420:	f102 0a01 	add.w	sl, r2, #1
  417424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417426:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417428:	47b0      	blx	r6
  41742a:	4652      	mov	r2, sl
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  41742c:	7838      	ldrb	r0, [r7, #0]
  41742e:	b120      	cbz	r0, 41743a <_vsnprintf+0x556>
  417430:	2d00      	cmp	r5, #0
  417432:	d0f4      	beq.n	41741e <_vsnprintf+0x53a>
  417434:	1e63      	subs	r3, r4, #1
  417436:	2c00      	cmp	r4, #0
  417438:	d1f0      	bne.n	41741c <_vsnprintf+0x538>
  41743a:	4615      	mov	r5, r2
                    if(flags & FLAGS_LEFT) {
  41743c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41743e:	b953      	cbnz	r3, 417456 <_vsnprintf+0x572>
                    format++;
  417440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417442:	3301      	adds	r3, #1
  417444:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  417446:	e556      	b.n	416ef6 <_vsnprintf+0x12>
                            out(' ', buffer, idx++, maxlen);
  417448:	1c55      	adds	r5, r2, #1
  41744a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41744c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41744e:	2020      	movs	r0, #32
  417450:	47b0      	blx	r6
                        while(l++ < width) {
  417452:	46a1      	mov	r9, r4
                            out(' ', buffer, idx++, maxlen);
  417454:	462a      	mov	r2, r5
                        while(l++ < width) {
  417456:	f109 0401 	add.w	r4, r9, #1
  41745a:	45c8      	cmp	r8, r9
  41745c:	d8f4      	bhi.n	417448 <_vsnprintf+0x564>
  41745e:	4615      	mov	r5, r2
  417460:	e7ee      	b.n	417440 <_vsnprintf+0x55c>
  417462:	bf00      	nop
  417464:	00416d75 	.word	0x00416d75
  417468:	00416e15 	.word	0x00416e15
                    flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
  41746c:	f049 0321 	orr.w	r3, r9, #33	; 0x21
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
  417470:	9a18      	ldr	r2, [sp, #96]	; 0x60
  417472:	1d11      	adds	r1, r2, #4
  417474:	9118      	str	r1, [sp, #96]	; 0x60
  417476:	6812      	ldr	r2, [r2, #0]
  417478:	9305      	str	r3, [sp, #20]
  41747a:	2308      	movs	r3, #8
  41747c:	9304      	str	r3, [sp, #16]
  41747e:	9403      	str	r4, [sp, #12]
  417480:	2310      	movs	r3, #16
  417482:	9302      	str	r3, [sp, #8]
  417484:	2300      	movs	r3, #0
  417486:	9301      	str	r3, [sp, #4]
  417488:	9200      	str	r2, [sp, #0]
  41748a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41748c:	462a      	mov	r2, r5
  41748e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417490:	4630      	mov	r0, r6
  417492:	4c15      	ldr	r4, [pc, #84]	; (4174e8 <_vsnprintf+0x604>)
  417494:	47a0      	blx	r4
  417496:	4605      	mov	r5, r0
                    format++;
  417498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41749a:	3301      	adds	r3, #1
  41749c:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  41749e:	e52a      	b.n	416ef6 <_vsnprintf+0x12>
                out('%', buffer, idx++, maxlen);
  4174a0:	1c6c      	adds	r4, r5, #1
  4174a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4174a4:	462a      	mov	r2, r5
  4174a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4174a8:	2025      	movs	r0, #37	; 0x25
  4174aa:	47b0      	blx	r6
                format++;
  4174ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4174ae:	3301      	adds	r3, #1
  4174b0:	930d      	str	r3, [sp, #52]	; 0x34
                out('%', buffer, idx++, maxlen);
  4174b2:	4625      	mov	r5, r4
                break;
  4174b4:	e51f      	b.n	416ef6 <_vsnprintf+0x12>

            default :
                out(*format, buffer, idx++, maxlen);
  4174b6:	1c6c      	adds	r4, r5, #1
  4174b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4174ba:	462a      	mov	r2, r5
  4174bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4174be:	47b0      	blx	r6
                format++;
  4174c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4174c2:	3301      	adds	r3, #1
  4174c4:	930d      	str	r3, [sp, #52]	; 0x34
                out(*format, buffer, idx++, maxlen);
  4174c6:	4625      	mov	r5, r4
                break;
  4174c8:	e515      	b.n	416ef6 <_vsnprintf+0x12>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  4174ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4174cc:	4295      	cmp	r5, r2
  4174ce:	d308      	bcc.n	4174e2 <_vsnprintf+0x5fe>
  4174d0:	3a01      	subs	r2, #1
  4174d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4174d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4174d6:	2000      	movs	r0, #0
  4174d8:	47b0      	blx	r6

    // return written chars without terminating \0
    return (int)idx;
}
  4174da:	4628      	mov	r0, r5
  4174dc:	b00f      	add	sp, #60	; 0x3c
  4174de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  4174e2:	462a      	mov	r2, r5
  4174e4:	e7f5      	b.n	4174d2 <_vsnprintf+0x5ee>
  4174e6:	bf00      	nop
  4174e8:	00416d75 	.word	0x00416d75

004174ec <lv_vsnprintf>:
    va_end(va);
    return ret;
}

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
  4174ec:	b510      	push	{r4, lr}
  4174ee:	b082      	sub	sp, #8
    return _vsnprintf(_out_buffer, buffer, count, format, va);
  4174f0:	9300      	str	r3, [sp, #0]
  4174f2:	4613      	mov	r3, r2
  4174f4:	460a      	mov	r2, r1
  4174f6:	4601      	mov	r1, r0
  4174f8:	4802      	ldr	r0, [pc, #8]	; (417504 <lv_vsnprintf+0x18>)
  4174fa:	4c03      	ldr	r4, [pc, #12]	; (417508 <lv_vsnprintf+0x1c>)
  4174fc:	47a0      	blx	r4
}
  4174fe:	b002      	add	sp, #8
  417500:	bd10      	pop	{r4, pc}
  417502:	bf00      	nop
  417504:	00416ba5 	.word	0x00416ba5
  417508:	00416ee5 	.word	0x00416ee5

0041750c <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
  41750c:	b510      	push	{r4, lr}
  41750e:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
  417510:	6840      	ldr	r0, [r0, #4]
  417512:	4b04      	ldr	r3, [pc, #16]	; (417524 <lv_task_time_remaining+0x18>)
  417514:	4798      	blx	r3
    if(elp >= task->period)
  417516:	6823      	ldr	r3, [r4, #0]
  417518:	4298      	cmp	r0, r3
  41751a:	d201      	bcs.n	417520 <lv_task_time_remaining+0x14>
        return 0;
    return task->period - elp;
  41751c:	1a18      	subs	r0, r3, r0
  41751e:	bd10      	pop	{r4, pc}
        return 0;
  417520:	2000      	movs	r0, #0
}
  417522:	bd10      	pop	{r4, pc}
  417524:	00415119 	.word	0x00415119

00417528 <lv_task_create>:
{
  417528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41752c:	4607      	mov	r7, r0
  41752e:	4688      	mov	r8, r1
  417530:	4615      	mov	r5, r2
  417532:	461e      	mov	r6, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  417534:	4831      	ldr	r0, [pc, #196]	; (4175fc <lv_task_create+0xd4>)
  417536:	4b32      	ldr	r3, [pc, #200]	; (417600 <lv_task_create+0xd8>)
  417538:	4798      	blx	r3
    if(NULL == tmp) {
  41753a:	4604      	mov	r4, r0
  41753c:	b338      	cbz	r0, 41758e <lv_task_create+0x66>
            if(tmp->prio <= prio) {
  41753e:	7d23      	ldrb	r3, [r4, #20]
  417540:	f003 0307 	and.w	r3, r3, #7
  417544:	42ab      	cmp	r3, r5
  417546:	dd32      	ble.n	4175ae <lv_task_create+0x86>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  417548:	4621      	mov	r1, r4
  41754a:	482c      	ldr	r0, [pc, #176]	; (4175fc <lv_task_create+0xd4>)
  41754c:	4b2d      	ldr	r3, [pc, #180]	; (417604 <lv_task_create+0xdc>)
  41754e:	4798      	blx	r3
        } while(tmp != NULL);
  417550:	4604      	mov	r4, r0
  417552:	2800      	cmp	r0, #0
  417554:	d1f3      	bne.n	41753e <lv_task_create+0x16>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  417556:	4603      	mov	r3, r0
        if(tmp == NULL) {
  417558:	2b00      	cmp	r3, #0
  41755a:	d03c      	beq.n	4175d6 <lv_task_create+0xae>
    task_list_changed = true;
  41755c:	f04f 0901 	mov.w	r9, #1
  417560:	4b29      	ldr	r3, [pc, #164]	; (417608 <lv_task_create+0xe0>)
  417562:	f883 9000 	strb.w	r9, [r3]
    new_task->period  = period;
  417566:	f8c4 8000 	str.w	r8, [r4]
    new_task->task_cb = task_xcb;
  41756a:	60a7      	str	r7, [r4, #8]
    new_task->prio    = prio;
  41756c:	7d23      	ldrb	r3, [r4, #20]
  41756e:	f365 0302 	bfi	r3, r5, #0, #3
  417572:	7523      	strb	r3, [r4, #20]
    new_task->repeat_count = -1;
  417574:	f04f 33ff 	mov.w	r3, #4294967295
  417578:	6123      	str	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
  41757a:	4b24      	ldr	r3, [pc, #144]	; (41760c <lv_task_create+0xe4>)
  41757c:	4798      	blx	r3
  41757e:	6060      	str	r0, [r4, #4]
    new_task->user_data = user_data;
  417580:	60e6      	str	r6, [r4, #12]
    task_created = true;
  417582:	4b23      	ldr	r3, [pc, #140]	; (417610 <lv_task_create+0xe8>)
  417584:	f883 9000 	strb.w	r9, [r3]
}
  417588:	4620      	mov	r0, r4
  41758a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
  41758e:	481b      	ldr	r0, [pc, #108]	; (4175fc <lv_task_create+0xd4>)
  417590:	4b20      	ldr	r3, [pc, #128]	; (417614 <lv_task_create+0xec>)
  417592:	4798      	blx	r3
  417594:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
  417596:	4b20      	ldr	r3, [pc, #128]	; (417618 <lv_task_create+0xf0>)
  417598:	4798      	blx	r3
  41759a:	b928      	cbnz	r0, 4175a8 <lv_task_create+0x80>
  41759c:	4622      	mov	r2, r4
  41759e:	2300      	movs	r3, #0
  4175a0:	481e      	ldr	r0, [pc, #120]	; (41761c <lv_task_create+0xf4>)
  4175a2:	491f      	ldr	r1, [pc, #124]	; (417620 <lv_task_create+0xf8>)
  4175a4:	4788      	blx	r1
  4175a6:	e7fe      	b.n	4175a6 <lv_task_create+0x7e>
        if(new_task == NULL) return NULL;
  4175a8:	2c00      	cmp	r4, #0
  4175aa:	d1d7      	bne.n	41755c <lv_task_create+0x34>
  4175ac:	e7ec      	b.n	417588 <lv_task_create+0x60>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  4175ae:	4621      	mov	r1, r4
  4175b0:	4812      	ldr	r0, [pc, #72]	; (4175fc <lv_task_create+0xd4>)
  4175b2:	4b1c      	ldr	r3, [pc, #112]	; (417624 <lv_task_create+0xfc>)
  4175b4:	4798      	blx	r3
  4175b6:	4681      	mov	r9, r0
                LV_ASSERT_MEM(new_task);
  4175b8:	4b17      	ldr	r3, [pc, #92]	; (417618 <lv_task_create+0xf0>)
  4175ba:	4798      	blx	r3
  4175bc:	b128      	cbz	r0, 4175ca <lv_task_create+0xa2>
                if(new_task == NULL) return NULL;
  4175be:	f1b9 0f00 	cmp.w	r9, #0
  4175c2:	d018      	beq.n	4175f6 <lv_task_create+0xce>
  4175c4:	4623      	mov	r3, r4
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  4175c6:	464c      	mov	r4, r9
  4175c8:	e7c6      	b.n	417558 <lv_task_create+0x30>
                LV_ASSERT_MEM(new_task);
  4175ca:	464a      	mov	r2, r9
  4175cc:	2300      	movs	r3, #0
  4175ce:	4813      	ldr	r0, [pc, #76]	; (41761c <lv_task_create+0xf4>)
  4175d0:	4913      	ldr	r1, [pc, #76]	; (417620 <lv_task_create+0xf8>)
  4175d2:	4788      	blx	r1
  4175d4:	e7fe      	b.n	4175d4 <lv_task_create+0xac>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
  4175d6:	4809      	ldr	r0, [pc, #36]	; (4175fc <lv_task_create+0xd4>)
  4175d8:	4b13      	ldr	r3, [pc, #76]	; (417628 <lv_task_create+0x100>)
  4175da:	4798      	blx	r3
  4175dc:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
  4175de:	4b0e      	ldr	r3, [pc, #56]	; (417618 <lv_task_create+0xf0>)
  4175e0:	4798      	blx	r3
  4175e2:	b928      	cbnz	r0, 4175f0 <lv_task_create+0xc8>
  4175e4:	4622      	mov	r2, r4
  4175e6:	2300      	movs	r3, #0
  4175e8:	480c      	ldr	r0, [pc, #48]	; (41761c <lv_task_create+0xf4>)
  4175ea:	490d      	ldr	r1, [pc, #52]	; (417620 <lv_task_create+0xf8>)
  4175ec:	4788      	blx	r1
  4175ee:	e7fe      	b.n	4175ee <lv_task_create+0xc6>
            if(new_task == NULL) return NULL;
  4175f0:	2c00      	cmp	r4, #0
  4175f2:	d1b3      	bne.n	41755c <lv_task_create+0x34>
  4175f4:	e7c8      	b.n	417588 <lv_task_create+0x60>
                if(new_task == NULL) return NULL;
  4175f6:	464c      	mov	r4, r9
  4175f8:	e7c6      	b.n	417588 <lv_task_create+0x60>
  4175fa:	bf00      	nop
  4175fc:	2043a250 	.word	0x2043a250
  417600:	00416189 	.word	0x00416189
  417604:	0041619d 	.word	0x0041619d
  417608:	2041481b 	.word	0x2041481b
  41760c:	004150fd 	.word	0x004150fd
  417610:	20414819 	.word	0x20414819
  417614:	004160f1 	.word	0x004160f1
  417618:	00415e79 	.word	0x00415e79
  41761c:	0042c154 	.word	0x0042c154
  417620:	00415e85 	.word	0x00415e85
  417624:	004161b9 	.word	0x004161b9
  417628:	0041613d 	.word	0x0041613d

0041762c <lv_task_del>:
{
  41762c:	b510      	push	{r4, lr}
  41762e:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
  417630:	4601      	mov	r1, r0
  417632:	4809      	ldr	r0, [pc, #36]	; (417658 <lv_task_del+0x2c>)
  417634:	4b09      	ldr	r3, [pc, #36]	; (41765c <lv_task_del+0x30>)
  417636:	4798      	blx	r3
    task_list_changed = true;
  417638:	2201      	movs	r2, #1
  41763a:	4b09      	ldr	r3, [pc, #36]	; (417660 <lv_task_del+0x34>)
  41763c:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
  41763e:	4620      	mov	r0, r4
  417640:	4b08      	ldr	r3, [pc, #32]	; (417664 <lv_task_del+0x38>)
  417642:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
  417644:	4b08      	ldr	r3, [pc, #32]	; (417668 <lv_task_del+0x3c>)
  417646:	681b      	ldr	r3, [r3, #0]
  417648:	429c      	cmp	r4, r3
  41764a:	d000      	beq.n	41764e <lv_task_del+0x22>
  41764c:	bd10      	pop	{r4, pc}
  41764e:	2201      	movs	r2, #1
  417650:	4b06      	ldr	r3, [pc, #24]	; (41766c <lv_task_del+0x40>)
  417652:	701a      	strb	r2, [r3, #0]
}
  417654:	e7fa      	b.n	41764c <lv_task_del+0x20>
  417656:	bf00      	nop
  417658:	2043a250 	.word	0x2043a250
  41765c:	00416245 	.word	0x00416245
  417660:	2041481b 	.word	0x2041481b
  417664:	00416681 	.word	0x00416681
  417668:	2043a320 	.word	0x2043a320
  41766c:	2041481a 	.word	0x2041481a

00417670 <lv_task_exec>:
{
  417670:	b510      	push	{r4, lr}
  417672:	4604      	mov	r4, r0
    if(lv_task_time_remaining(task) == 0) {
  417674:	4b0e      	ldr	r3, [pc, #56]	; (4176b0 <lv_task_exec+0x40>)
  417676:	4798      	blx	r3
  417678:	b108      	cbz	r0, 41767e <lv_task_exec+0xe>
    bool exec = false;
  41767a:	2000      	movs	r0, #0
  41767c:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
  41767e:	4b0d      	ldr	r3, [pc, #52]	; (4176b4 <lv_task_exec+0x44>)
  417680:	4798      	blx	r3
  417682:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
  417684:	68a3      	ldr	r3, [r4, #8]
  417686:	b10b      	cbz	r3, 41768c <lv_task_exec+0x1c>
  417688:	4620      	mov	r0, r4
  41768a:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
  41768c:	4b0a      	ldr	r3, [pc, #40]	; (4176b8 <lv_task_exec+0x48>)
  41768e:	7818      	ldrb	r0, [r3, #0]
  417690:	b938      	cbnz	r0, 4176a2 <lv_task_exec+0x32>
            if(task->repeat_count > 0) {
  417692:	6923      	ldr	r3, [r4, #16]
  417694:	2b00      	cmp	r3, #0
  417696:	dd01      	ble.n	41769c <lv_task_exec+0x2c>
                task->repeat_count--;
  417698:	3b01      	subs	r3, #1
  41769a:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
  41769c:	6923      	ldr	r3, [r4, #16]
  41769e:	b10b      	cbz	r3, 4176a4 <lv_task_exec+0x34>
        exec = true;
  4176a0:	2001      	movs	r0, #1
}
  4176a2:	bd10      	pop	{r4, pc}
                lv_task_del(task);
  4176a4:	4620      	mov	r0, r4
  4176a6:	4b05      	ldr	r3, [pc, #20]	; (4176bc <lv_task_exec+0x4c>)
  4176a8:	4798      	blx	r3
        exec = true;
  4176aa:	2001      	movs	r0, #1
  4176ac:	bd10      	pop	{r4, pc}
  4176ae:	bf00      	nop
  4176b0:	0041750d 	.word	0x0041750d
  4176b4:	004150fd 	.word	0x004150fd
  4176b8:	2041481a 	.word	0x2041481a
  4176bc:	0041762d 	.word	0x0041762d

004176c0 <lv_task_handler>:
{
  4176c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(already_running) return 1;
  4176c2:	4b5e      	ldr	r3, [pc, #376]	; (41783c <lv_task_handler+0x17c>)
  4176c4:	781b      	ldrb	r3, [r3, #0]
  4176c6:	2b00      	cmp	r3, #0
  4176c8:	f040 80b5 	bne.w	417836 <lv_task_handler+0x176>
    already_running = true;
  4176cc:	2201      	movs	r2, #1
  4176ce:	4b5b      	ldr	r3, [pc, #364]	; (41783c <lv_task_handler+0x17c>)
  4176d0:	701a      	strb	r2, [r3, #0]
    if(lv_task_run == false) {
  4176d2:	4b5b      	ldr	r3, [pc, #364]	; (417840 <lv_task_handler+0x180>)
  4176d4:	781d      	ldrb	r5, [r3, #0]
  4176d6:	b925      	cbnz	r5, 4176e2 <lv_task_handler+0x22>
        already_running = false; /*Release mutex*/
  4176d8:	2200      	movs	r2, #0
  4176da:	4b58      	ldr	r3, [pc, #352]	; (41783c <lv_task_handler+0x17c>)
  4176dc:	701a      	strb	r2, [r3, #0]
        return 1;
  4176de:	2501      	movs	r5, #1
  4176e0:	e0aa      	b.n	417838 <lv_task_handler+0x178>
    uint32_t handler_start = lv_tick_get();
  4176e2:	4b58      	ldr	r3, [pc, #352]	; (417844 <lv_task_handler+0x184>)
  4176e4:	4798      	blx	r3
  4176e6:	4606      	mov	r6, r0
    lv_task_t * task_interrupter = NULL;
  4176e8:	2400      	movs	r4, #0
  4176ea:	e04e      	b.n	41778a <lv_task_handler+0xca>
                LV_GC_ROOT(_lv_task_act) = next;
  4176ec:	4b56      	ldr	r3, [pc, #344]	; (417848 <lv_task_handler+0x188>)
  4176ee:	601f      	str	r7, [r3, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
  4176f0:	2400      	movs	r4, #0
                continue; /*Load the next task*/
  4176f2:	e00f      	b.n	417714 <lv_task_handler+0x54>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
  4176f4:	4b55      	ldr	r3, [pc, #340]	; (41784c <lv_task_handler+0x18c>)
  4176f6:	4798      	blx	r3
            if(task_created || task_deleted) {
  4176f8:	4b55      	ldr	r3, [pc, #340]	; (417850 <lv_task_handler+0x190>)
  4176fa:	781b      	ldrb	r3, [r3, #0]
  4176fc:	2b00      	cmp	r3, #0
  4176fe:	d153      	bne.n	4177a8 <lv_task_handler+0xe8>
  417700:	4b54      	ldr	r3, [pc, #336]	; (417854 <lv_task_handler+0x194>)
  417702:	781b      	ldrb	r3, [r3, #0]
  417704:	2b00      	cmp	r3, #0
  417706:	d151      	bne.n	4177ac <lv_task_handler+0xec>
            if(task_list_changed) {
  417708:	4a53      	ldr	r2, [pc, #332]	; (417858 <lv_task_handler+0x198>)
  41770a:	7812      	ldrb	r2, [r2, #0]
  41770c:	2a00      	cmp	r2, #0
  41770e:	d14f      	bne.n	4177b0 <lv_task_handler+0xf0>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
  417710:	4b4d      	ldr	r3, [pc, #308]	; (417848 <lv_task_handler+0x188>)
  417712:	601f      	str	r7, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  417714:	4b4c      	ldr	r3, [pc, #304]	; (417848 <lv_task_handler+0x188>)
  417716:	6819      	ldr	r1, [r3, #0]
  417718:	2900      	cmp	r1, #0
  41771a:	d034      	beq.n	417786 <lv_task_handler+0xc6>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
  41771c:	484f      	ldr	r0, [pc, #316]	; (41785c <lv_task_handler+0x19c>)
  41771e:	4b50      	ldr	r3, [pc, #320]	; (417860 <lv_task_handler+0x1a0>)
  417720:	4798      	blx	r3
  417722:	4607      	mov	r7, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
  417724:	4b48      	ldr	r3, [pc, #288]	; (417848 <lv_task_handler+0x188>)
  417726:	6818      	ldr	r0, [r3, #0]
  417728:	7d03      	ldrb	r3, [r0, #20]
  41772a:	f013 0307 	ands.w	r3, r3, #7
  41772e:	d039      	beq.n	4177a4 <lv_task_handler+0xe4>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
  417730:	4284      	cmp	r4, r0
  417732:	d0db      	beq.n	4176ec <lv_task_handler+0x2c>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
  417734:	2b05      	cmp	r3, #5
  417736:	d0dd      	beq.n	4176f4 <lv_task_handler+0x34>
            else if(task_interrupter) {
  417738:	b1b4      	cbz	r4, 417768 <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
  41773a:	7d02      	ldrb	r2, [r0, #20]
  41773c:	f002 0207 	and.w	r2, r2, #7
  417740:	7d23      	ldrb	r3, [r4, #20]
  417742:	f003 0307 	and.w	r3, r3, #7
  417746:	429a      	cmp	r2, r3
  417748:	ddd6      	ble.n	4176f8 <lv_task_handler+0x38>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  41774a:	4b40      	ldr	r3, [pc, #256]	; (41784c <lv_task_handler+0x18c>)
  41774c:	4798      	blx	r3
  41774e:	2800      	cmp	r0, #0
  417750:	d0d2      	beq.n	4176f8 <lv_task_handler+0x38>
                        if(!task_created && !task_deleted) {
  417752:	4b3f      	ldr	r3, [pc, #252]	; (417850 <lv_task_handler+0x190>)
  417754:	781b      	ldrb	r3, [r3, #0]
  417756:	2b00      	cmp	r3, #0
  417758:	d1ce      	bne.n	4176f8 <lv_task_handler+0x38>
  41775a:	4b3e      	ldr	r3, [pc, #248]	; (417854 <lv_task_handler+0x194>)
  41775c:	781b      	ldrb	r3, [r3, #0]
  41775e:	2b00      	cmp	r3, #0
  417760:	d1ca      	bne.n	4176f8 <lv_task_handler+0x38>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
  417762:	4a39      	ldr	r2, [pc, #228]	; (417848 <lv_task_handler+0x188>)
  417764:	6814      	ldr	r4, [r2, #0]
                            break;
  417766:	e00f      	b.n	417788 <lv_task_handler+0xc8>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  417768:	4b38      	ldr	r3, [pc, #224]	; (41784c <lv_task_handler+0x18c>)
  41776a:	4798      	blx	r3
  41776c:	2800      	cmp	r0, #0
  41776e:	d0c3      	beq.n	4176f8 <lv_task_handler+0x38>
                    if(!task_created && !task_deleted) {
  417770:	4b37      	ldr	r3, [pc, #220]	; (417850 <lv_task_handler+0x190>)
  417772:	781b      	ldrb	r3, [r3, #0]
  417774:	2b00      	cmp	r3, #0
  417776:	d1bf      	bne.n	4176f8 <lv_task_handler+0x38>
  417778:	4b36      	ldr	r3, [pc, #216]	; (417854 <lv_task_handler+0x194>)
  41777a:	781b      	ldrb	r3, [r3, #0]
  41777c:	2b00      	cmp	r3, #0
  41777e:	d1bb      	bne.n	4176f8 <lv_task_handler+0x38>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
  417780:	4a31      	ldr	r2, [pc, #196]	; (417848 <lv_task_handler+0x188>)
  417782:	6814      	ldr	r4, [r2, #0]
                        break;
  417784:	e000      	b.n	417788 <lv_task_handler+0xc8>
        end_flag                 = true;
  417786:	462b      	mov	r3, r5
    } while(!end_flag);
  417788:	b9a3      	cbnz	r3, 4177b4 <lv_task_handler+0xf4>
        task_deleted             = false;
  41778a:	2300      	movs	r3, #0
  41778c:	4a31      	ldr	r2, [pc, #196]	; (417854 <lv_task_handler+0x194>)
  41778e:	7013      	strb	r3, [r2, #0]
        task_created             = false;
  417790:	4a2f      	ldr	r2, [pc, #188]	; (417850 <lv_task_handler+0x190>)
  417792:	7013      	strb	r3, [r2, #0]
        task_list_changed        = false;
  417794:	4a30      	ldr	r2, [pc, #192]	; (417858 <lv_task_handler+0x198>)
  417796:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  417798:	4830      	ldr	r0, [pc, #192]	; (41785c <lv_task_handler+0x19c>)
  41779a:	4b32      	ldr	r3, [pc, #200]	; (417864 <lv_task_handler+0x1a4>)
  41779c:	4798      	blx	r3
  41779e:	4b2a      	ldr	r3, [pc, #168]	; (417848 <lv_task_handler+0x188>)
  4177a0:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  4177a2:	e7b7      	b.n	417714 <lv_task_handler+0x54>
        end_flag                 = true;
  4177a4:	462b      	mov	r3, r5
  4177a6:	e7ef      	b.n	417788 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  4177a8:	2400      	movs	r4, #0
  4177aa:	e7ed      	b.n	417788 <lv_task_handler+0xc8>
  4177ac:	2400      	movs	r4, #0
  4177ae:	e7eb      	b.n	417788 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  4177b0:	2400      	movs	r4, #0
  4177b2:	e7e9      	b.n	417788 <lv_task_handler+0xc8>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  4177b4:	4829      	ldr	r0, [pc, #164]	; (41785c <lv_task_handler+0x19c>)
  4177b6:	4b2b      	ldr	r3, [pc, #172]	; (417864 <lv_task_handler+0x1a4>)
  4177b8:	4798      	blx	r3
  4177ba:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TASK_READY;
  4177bc:	f04f 35ff 	mov.w	r5, #4294967295
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  4177c0:	e004      	b.n	4177cc <lv_task_handler+0x10c>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
  4177c2:	4621      	mov	r1, r4
  4177c4:	4825      	ldr	r0, [pc, #148]	; (41785c <lv_task_handler+0x19c>)
  4177c6:	4b26      	ldr	r3, [pc, #152]	; (417860 <lv_task_handler+0x1a0>)
  4177c8:	4798      	blx	r3
  4177ca:	4604      	mov	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  4177cc:	b154      	cbz	r4, 4177e4 <lv_task_handler+0x124>
  4177ce:	7d23      	ldrb	r3, [r4, #20]
  4177d0:	f013 0f07 	tst.w	r3, #7
  4177d4:	d006      	beq.n	4177e4 <lv_task_handler+0x124>
        uint32_t delay = lv_task_time_remaining(next);
  4177d6:	4620      	mov	r0, r4
  4177d8:	4b23      	ldr	r3, [pc, #140]	; (417868 <lv_task_handler+0x1a8>)
  4177da:	4798      	blx	r3
        if(delay < time_till_next)
  4177dc:	4285      	cmp	r5, r0
  4177de:	d9f0      	bls.n	4177c2 <lv_task_handler+0x102>
            time_till_next = delay;
  4177e0:	4605      	mov	r5, r0
  4177e2:	e7ee      	b.n	4177c2 <lv_task_handler+0x102>
    busy_time += lv_tick_elaps(handler_start);
  4177e4:	4630      	mov	r0, r6
  4177e6:	4c21      	ldr	r4, [pc, #132]	; (41786c <lv_task_handler+0x1ac>)
  4177e8:	47a0      	blx	r4
  4177ea:	4a21      	ldr	r2, [pc, #132]	; (417870 <lv_task_handler+0x1b0>)
  4177ec:	6813      	ldr	r3, [r2, #0]
  4177ee:	4403      	add	r3, r0
  4177f0:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
  4177f2:	4b20      	ldr	r3, [pc, #128]	; (417874 <lv_task_handler+0x1b4>)
  4177f4:	6818      	ldr	r0, [r3, #0]
  4177f6:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
  4177f8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  4177fc:	d315      	bcc.n	41782a <lv_task_handler+0x16a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
  4177fe:	4b1c      	ldr	r3, [pc, #112]	; (417870 <lv_task_handler+0x1b0>)
  417800:	681a      	ldr	r2, [r3, #0]
  417802:	2364      	movs	r3, #100	; 0x64
  417804:	fb03 f302 	mul.w	r3, r3, r2
  417808:	fbb3 f3f0 	udiv	r3, r3, r0
  41780c:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  41780e:	2b64      	cmp	r3, #100	; 0x64
  417810:	d80f      	bhi.n	417832 <lv_task_handler+0x172>
  417812:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  417816:	b2db      	uxtb	r3, r3
  417818:	4a17      	ldr	r2, [pc, #92]	; (417878 <lv_task_handler+0x1b8>)
  41781a:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
  41781c:	2200      	movs	r2, #0
  41781e:	4b14      	ldr	r3, [pc, #80]	; (417870 <lv_task_handler+0x1b0>)
  417820:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
  417822:	4b08      	ldr	r3, [pc, #32]	; (417844 <lv_task_handler+0x184>)
  417824:	4798      	blx	r3
  417826:	4b13      	ldr	r3, [pc, #76]	; (417874 <lv_task_handler+0x1b4>)
  417828:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
  41782a:	2200      	movs	r2, #0
  41782c:	4b03      	ldr	r3, [pc, #12]	; (41783c <lv_task_handler+0x17c>)
  41782e:	701a      	strb	r2, [r3, #0]
    return time_till_next;
  417830:	e002      	b.n	417838 <lv_task_handler+0x178>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  417832:	2300      	movs	r3, #0
  417834:	e7f0      	b.n	417818 <lv_task_handler+0x158>
    if(already_running) return 1;
  417836:	2501      	movs	r5, #1
}
  417838:	4628      	mov	r0, r5
  41783a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41783c:	20414808 	.word	0x20414808
  417840:	20414818 	.word	0x20414818
  417844:	004150fd 	.word	0x004150fd
  417848:	2043a320 	.word	0x2043a320
  41784c:	00417671 	.word	0x00417671
  417850:	20414819 	.word	0x20414819
  417854:	2041481a 	.word	0x2041481a
  417858:	2041481b 	.word	0x2041481b
  41785c:	2043a250 	.word	0x2043a250
  417860:	0041619d 	.word	0x0041619d
  417864:	00416189 	.word	0x00416189
  417868:	0041750d 	.word	0x0041750d
  41786c:	00415119 	.word	0x00415119
  417870:	2041480c 	.word	0x2041480c
  417874:	20414814 	.word	0x20414814
  417878:	20414810 	.word	0x20414810

0041787c <lv_task_set_prio>:
{
  41787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(task->prio == prio) return;
  41787e:	7d03      	ldrb	r3, [r0, #20]
  417880:	f003 0307 	and.w	r3, r3, #7
  417884:	428b      	cmp	r3, r1
  417886:	d021      	beq.n	4178cc <lv_task_set_prio+0x50>
  417888:	460d      	mov	r5, r1
  41788a:	460f      	mov	r7, r1
  41788c:	4606      	mov	r6, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  41788e:	4813      	ldr	r0, [pc, #76]	; (4178dc <lv_task_set_prio+0x60>)
  417890:	4b13      	ldr	r3, [pc, #76]	; (4178e0 <lv_task_set_prio+0x64>)
  417892:	4798      	blx	r3
  417894:	4604      	mov	r4, r0
  417896:	b18c      	cbz	r4, 4178bc <lv_task_set_prio+0x40>
        if(i->prio <= prio) {
  417898:	7d23      	ldrb	r3, [r4, #20]
  41789a:	f003 0307 	and.w	r3, r3, #7
  41789e:	429d      	cmp	r5, r3
  4178a0:	da05      	bge.n	4178ae <lv_task_set_prio+0x32>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  4178a2:	4621      	mov	r1, r4
  4178a4:	480d      	ldr	r0, [pc, #52]	; (4178dc <lv_task_set_prio+0x60>)
  4178a6:	4b0f      	ldr	r3, [pc, #60]	; (4178e4 <lv_task_set_prio+0x68>)
  4178a8:	4798      	blx	r3
  4178aa:	4604      	mov	r4, r0
  4178ac:	e7f3      	b.n	417896 <lv_task_set_prio+0x1a>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
  4178ae:	42b4      	cmp	r4, r6
  4178b0:	d004      	beq.n	4178bc <lv_task_set_prio+0x40>
  4178b2:	4622      	mov	r2, r4
  4178b4:	4631      	mov	r1, r6
  4178b6:	4809      	ldr	r0, [pc, #36]	; (4178dc <lv_task_set_prio+0x60>)
  4178b8:	4b0b      	ldr	r3, [pc, #44]	; (4178e8 <lv_task_set_prio+0x6c>)
  4178ba:	4798      	blx	r3
    if(i == NULL) {
  4178bc:	b13c      	cbz	r4, 4178ce <lv_task_set_prio+0x52>
    task_list_changed = true;
  4178be:	2201      	movs	r2, #1
  4178c0:	4b0a      	ldr	r3, [pc, #40]	; (4178ec <lv_task_set_prio+0x70>)
  4178c2:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
  4178c4:	7d33      	ldrb	r3, [r6, #20]
  4178c6:	f367 0302 	bfi	r3, r7, #0, #3
  4178ca:	7533      	strb	r3, [r6, #20]
  4178cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
  4178ce:	2200      	movs	r2, #0
  4178d0:	4631      	mov	r1, r6
  4178d2:	4802      	ldr	r0, [pc, #8]	; (4178dc <lv_task_set_prio+0x60>)
  4178d4:	4b04      	ldr	r3, [pc, #16]	; (4178e8 <lv_task_set_prio+0x6c>)
  4178d6:	4798      	blx	r3
  4178d8:	e7f1      	b.n	4178be <lv_task_set_prio+0x42>
  4178da:	bf00      	nop
  4178dc:	2043a250 	.word	0x2043a250
  4178e0:	00416189 	.word	0x00416189
  4178e4:	0041619d 	.word	0x0041619d
  4178e8:	004163b5 	.word	0x004163b5
  4178ec:	2041481b 	.word	0x2041481b

004178f0 <lv_task_ready>:
{
  4178f0:	b510      	push	{r4, lr}
  4178f2:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
  4178f4:	4b03      	ldr	r3, [pc, #12]	; (417904 <lv_task_ready+0x14>)
  4178f6:	4798      	blx	r3
  4178f8:	6823      	ldr	r3, [r4, #0]
  4178fa:	1ac0      	subs	r0, r0, r3
  4178fc:	3801      	subs	r0, #1
  4178fe:	6060      	str	r0, [r4, #4]
  417900:	bd10      	pop	{r4, pc}
  417902:	bf00      	nop
  417904:	004150fd 	.word	0x004150fd

00417908 <lv_task_enable>:
    lv_task_run = en;
  417908:	4b01      	ldr	r3, [pc, #4]	; (417910 <lv_task_enable+0x8>)
  41790a:	7018      	strb	r0, [r3, #0]
  41790c:	4770      	bx	lr
  41790e:	bf00      	nop
  417910:	20414818 	.word	0x20414818

00417914 <_lv_task_core_init>:
{
  417914:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
  417916:	2118      	movs	r1, #24
  417918:	4803      	ldr	r0, [pc, #12]	; (417928 <_lv_task_core_init+0x14>)
  41791a:	4b04      	ldr	r3, [pc, #16]	; (41792c <_lv_task_core_init+0x18>)
  41791c:	4798      	blx	r3
    lv_task_enable(true);
  41791e:	2001      	movs	r0, #1
  417920:	4b03      	ldr	r3, [pc, #12]	; (417930 <_lv_task_core_init+0x1c>)
  417922:	4798      	blx	r3
  417924:	bd08      	pop	{r3, pc}
  417926:	bf00      	nop
  417928:	2043a250 	.word	0x2043a250
  41792c:	004160df 	.word	0x004160df
  417930:	00417909 	.word	0x00417909

00417934 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
  417934:	7803      	ldrb	r3, [r0, #0]
  417936:	f013 0f80 	tst.w	r3, #128	; 0x80
  41793a:	d101      	bne.n	417940 <lv_txt_utf8_size+0xc>
        return 1;
  41793c:	2001      	movs	r0, #1
  41793e:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
  417940:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
  417944:	2ac0      	cmp	r2, #192	; 0xc0
  417946:	d00b      	beq.n	417960 <lv_txt_utf8_size+0x2c>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
  417948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  41794c:	2ae0      	cmp	r2, #224	; 0xe0
  41794e:	d009      	beq.n	417964 <lv_txt_utf8_size+0x30>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
  417950:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  417954:	2bf0      	cmp	r3, #240	; 0xf0
  417956:	d001      	beq.n	41795c <lv_txt_utf8_size+0x28>
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
  417958:	2000      	movs	r0, #0
}
  41795a:	4770      	bx	lr
        return 4;
  41795c:	2004      	movs	r0, #4
  41795e:	4770      	bx	lr
        return 2;
  417960:	2002      	movs	r0, #2
  417962:	4770      	bx	lr
        return 3;
  417964:	2003      	movs	r0, #3
  417966:	4770      	bx	lr

00417968 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
  417968:	b430      	push	{r4, r5}
  41796a:	b082      	sub	sp, #8
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
  41796c:	2300      	movs	r3, #0
  41796e:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
  417970:	460c      	mov	r4, r1
  417972:	b151      	cbz	r1, 41798a <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
  417974:	6822      	ldr	r2, [r4, #0]
  417976:	5c83      	ldrb	r3, [r0, r2]
  417978:	f013 0f80 	tst.w	r3, #128	; 0x80
  41797c:	d107      	bne.n	41798e <lv_txt_utf8_next+0x26>
        result = txt[*i];
  41797e:	4618      	mov	r0, r3
        (*i)++;
  417980:	3201      	adds	r2, #1
  417982:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
  417984:	b002      	add	sp, #8
  417986:	bc30      	pop	{r4, r5}
  417988:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
  41798a:	ac01      	add	r4, sp, #4
  41798c:	e7f2      	b.n	417974 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
  41798e:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
  417992:	29c0      	cmp	r1, #192	; 0xc0
  417994:	d00b      	beq.n	4179ae <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
  417996:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
  41799a:	29e0      	cmp	r1, #224	; 0xe0
  41799c:	d019      	beq.n	4179d2 <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
  41799e:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
  4179a2:	29f0      	cmp	r1, #240	; 0xf0
  4179a4:	d033      	beq.n	417a0e <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
  4179a6:	3201      	adds	r2, #1
  4179a8:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
  4179aa:	2000      	movs	r0, #0
  4179ac:	e7ea      	b.n	417984 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
  4179ae:	019b      	lsls	r3, r3, #6
  4179b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
  4179b4:	3201      	adds	r2, #1
  4179b6:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4179b8:	5c80      	ldrb	r0, [r0, r2]
  4179ba:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  4179be:	2980      	cmp	r1, #128	; 0x80
  4179c0:	d001      	beq.n	4179c6 <lv_txt_utf8_next+0x5e>
  4179c2:	2000      	movs	r0, #0
  4179c4:	e7de      	b.n	417984 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  4179c6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  4179ca:	4418      	add	r0, r3
            (*i)++;
  4179cc:	3201      	adds	r2, #1
  4179ce:	6022      	str	r2, [r4, #0]
  4179d0:	e7d8      	b.n	417984 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
  4179d2:	031b      	lsls	r3, r3, #12
  4179d4:	b29b      	uxth	r3, r3
            (*i)++;
  4179d6:	3201      	adds	r2, #1
  4179d8:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4179da:	5c81      	ldrb	r1, [r0, r2]
  4179dc:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  4179e0:	2d80      	cmp	r5, #128	; 0x80
  4179e2:	d001      	beq.n	4179e8 <lv_txt_utf8_next+0x80>
  4179e4:	2000      	movs	r0, #0
  4179e6:	e7cd      	b.n	417984 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  4179e8:	0189      	lsls	r1, r1, #6
  4179ea:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  4179ee:	440b      	add	r3, r1
            (*i)++;
  4179f0:	3201      	adds	r2, #1
  4179f2:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4179f4:	5c81      	ldrb	r1, [r0, r2]
  4179f6:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  4179fa:	2880      	cmp	r0, #128	; 0x80
  4179fc:	d001      	beq.n	417a02 <lv_txt_utf8_next+0x9a>
  4179fe:	2000      	movs	r0, #0
  417a00:	e7c0      	b.n	417984 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  417a02:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  417a06:	1858      	adds	r0, r3, r1
            (*i)++;
  417a08:	3201      	adds	r2, #1
  417a0a:	6022      	str	r2, [r4, #0]
  417a0c:	e7ba      	b.n	417984 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
  417a0e:	049b      	lsls	r3, r3, #18
  417a10:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            (*i)++;
  417a14:	3201      	adds	r2, #1
  417a16:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417a18:	5c81      	ldrb	r1, [r0, r2]
  417a1a:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  417a1e:	2d80      	cmp	r5, #128	; 0x80
  417a20:	d001      	beq.n	417a26 <lv_txt_utf8_next+0xbe>
  417a22:	2000      	movs	r0, #0
  417a24:	e7ae      	b.n	417984 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
  417a26:	0309      	lsls	r1, r1, #12
  417a28:	f401 317c 	and.w	r1, r1, #258048	; 0x3f000
  417a2c:	430b      	orrs	r3, r1
            (*i)++;
  417a2e:	3201      	adds	r2, #1
  417a30:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417a32:	5c81      	ldrb	r1, [r0, r2]
  417a34:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  417a38:	2d80      	cmp	r5, #128	; 0x80
  417a3a:	d001      	beq.n	417a40 <lv_txt_utf8_next+0xd8>
  417a3c:	2000      	movs	r0, #0
  417a3e:	e7a1      	b.n	417984 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  417a40:	0189      	lsls	r1, r1, #6
  417a42:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  417a46:	440b      	add	r3, r1
            (*i)++;
  417a48:	3201      	adds	r2, #1
  417a4a:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417a4c:	5c81      	ldrb	r1, [r0, r2]
  417a4e:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  417a52:	2880      	cmp	r0, #128	; 0x80
  417a54:	d001      	beq.n	417a5a <lv_txt_utf8_next+0xf2>
  417a56:	2000      	movs	r0, #0
  417a58:	e794      	b.n	417984 <lv_txt_utf8_next+0x1c>
            result += txt[*i] & 0x3F;
  417a5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  417a5e:	1858      	adds	r0, r3, r1
            (*i)++;
  417a60:	3201      	adds	r2, #1
  417a62:	6022      	str	r2, [r4, #0]
  417a64:	e78e      	b.n	417984 <lv_txt_utf8_next+0x1c>
	...

00417a68 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
  417a68:	b570      	push	{r4, r5, r6, lr}
  417a6a:	b082      	sub	sp, #8
  417a6c:	4606      	mov	r6, r0
  417a6e:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
  417a70:	680b      	ldr	r3, [r1, #0]
  417a72:	3b01      	subs	r3, #1
  417a74:	600b      	str	r3, [r1, #0]
    uint8_t cnt = 0;
  417a76:	2400      	movs	r4, #0
  417a78:	e002      	b.n	417a80 <lv_txt_utf8_prev+0x18>
            if(*i != 0)
                (*i)--;
            else
                return 0;
        }
        cnt++;
  417a7a:	3401      	adds	r4, #1
  417a7c:	b2e4      	uxtb	r4, r4
    } while(c_size == 0);
  417a7e:	b973      	cbnz	r3, 417a9e <lv_txt_utf8_prev+0x36>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  417a80:	2c03      	cmp	r4, #3
  417a82:	d815      	bhi.n	417ab0 <lv_txt_utf8_prev+0x48>
        c_size = _lv_txt_encoded_size(&txt[*i]);
  417a84:	4b0c      	ldr	r3, [pc, #48]	; (417ab8 <lv_txt_utf8_prev+0x50>)
  417a86:	681b      	ldr	r3, [r3, #0]
  417a88:	6828      	ldr	r0, [r5, #0]
  417a8a:	4430      	add	r0, r6
  417a8c:	4798      	blx	r3
        if(c_size == 0) {
  417a8e:	4603      	mov	r3, r0
  417a90:	2800      	cmp	r0, #0
  417a92:	d1f2      	bne.n	417a7a <lv_txt_utf8_prev+0x12>
            if(*i != 0)
  417a94:	6828      	ldr	r0, [r5, #0]
  417a96:	b160      	cbz	r0, 417ab2 <lv_txt_utf8_prev+0x4a>
                (*i)--;
  417a98:	3801      	subs	r0, #1
  417a9a:	6028      	str	r0, [r5, #0]
  417a9c:	e7ed      	b.n	417a7a <lv_txt_utf8_prev+0x12>

    uint32_t i_tmp  = *i;
  417a9e:	682b      	ldr	r3, [r5, #0]
  417aa0:	a902      	add	r1, sp, #8
  417aa2:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
  417aa6:	4b05      	ldr	r3, [pc, #20]	; (417abc <lv_txt_utf8_prev+0x54>)
  417aa8:	681b      	ldr	r3, [r3, #0]
  417aaa:	4630      	mov	r0, r6
  417aac:	4798      	blx	r3

    return letter;
  417aae:	e000      	b.n	417ab2 <lv_txt_utf8_prev+0x4a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  417ab0:	2000      	movs	r0, #0
}
  417ab2:	b002      	add	sp, #8
  417ab4:	bd70      	pop	{r4, r5, r6, pc}
  417ab6:	bf00      	nop
  417ab8:	204000c0 	.word	0x204000c0
  417abc:	204000b8 	.word	0x204000b8

00417ac0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
  417ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  417ac2:	4607      	mov	r7, r0
  417ac4:	460e      	mov	r6, r1
    uint32_t i;
    uint32_t byte_cnt = 0;
  417ac6:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
  417ac8:	4625      	mov	r5, r4
  417aca:	e001      	b.n	417ad0 <lv_txt_utf8_get_byte_id+0x10>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
        byte_cnt += c_size > 0 ? c_size : 1;
  417acc:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
  417ace:	3501      	adds	r5, #1
  417ad0:	42b5      	cmp	r5, r6
  417ad2:	d207      	bcs.n	417ae4 <lv_txt_utf8_get_byte_id+0x24>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
  417ad4:	4b04      	ldr	r3, [pc, #16]	; (417ae8 <lv_txt_utf8_get_byte_id+0x28>)
  417ad6:	681b      	ldr	r3, [r3, #0]
  417ad8:	1938      	adds	r0, r7, r4
  417ada:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
  417adc:	2800      	cmp	r0, #0
  417ade:	d1f5      	bne.n	417acc <lv_txt_utf8_get_byte_id+0xc>
  417ae0:	2001      	movs	r0, #1
  417ae2:	e7f3      	b.n	417acc <lv_txt_utf8_get_byte_id+0xc>
    }

    return byte_cnt;
}
  417ae4:	4620      	mov	r0, r4
  417ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  417ae8:	204000c0 	.word	0x204000c0

00417aec <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
  417aec:	b570      	push	{r4, r5, r6, lr}
  417aee:	b082      	sub	sp, #8
  417af0:	4606      	mov	r6, r0
  417af2:	460d      	mov	r5, r1
    uint32_t i        = 0;
  417af4:	2400      	movs	r4, #0
  417af6:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
  417af8:	e005      	b.n	417b06 <lv_txt_utf8_get_char_id+0x1a>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
  417afa:	4b06      	ldr	r3, [pc, #24]	; (417b14 <lv_txt_utf8_get_char_id+0x28>)
  417afc:	681b      	ldr	r3, [r3, #0]
  417afe:	a901      	add	r1, sp, #4
  417b00:	4630      	mov	r0, r6
  417b02:	4798      	blx	r3
        char_cnt++;
  417b04:	3401      	adds	r4, #1
    while(i < byte_id) {
  417b06:	9b01      	ldr	r3, [sp, #4]
  417b08:	42ab      	cmp	r3, r5
  417b0a:	d3f6      	bcc.n	417afa <lv_txt_utf8_get_char_id+0xe>
    }

    return char_cnt;
}
  417b0c:	4620      	mov	r0, r4
  417b0e:	b002      	add	sp, #8
  417b10:	bd70      	pop	{r4, r5, r6, pc}
  417b12:	bf00      	nop
  417b14:	204000b8 	.word	0x204000b8

00417b18 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
  417b18:	b530      	push	{r4, r5, lr}
  417b1a:	b083      	sub	sp, #12
  417b1c:	4605      	mov	r5, r0
    uint32_t len = 0;
    uint32_t i   = 0;
  417b1e:	2400      	movs	r4, #0
  417b20:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
  417b22:	e005      	b.n	417b30 <lv_txt_utf8_get_length+0x18>
        _lv_txt_encoded_next(txt, &i);
  417b24:	4b06      	ldr	r3, [pc, #24]	; (417b40 <lv_txt_utf8_get_length+0x28>)
  417b26:	681b      	ldr	r3, [r3, #0]
  417b28:	a901      	add	r1, sp, #4
  417b2a:	4628      	mov	r0, r5
  417b2c:	4798      	blx	r3
        len++;
  417b2e:	3401      	adds	r4, #1
    while(txt[i] != '\0') {
  417b30:	9b01      	ldr	r3, [sp, #4]
  417b32:	5ceb      	ldrb	r3, [r5, r3]
  417b34:	2b00      	cmp	r3, #0
  417b36:	d1f5      	bne.n	417b24 <lv_txt_utf8_get_length+0xc>
    }

    return len;
}
  417b38:	4620      	mov	r0, r4
  417b3a:	b003      	add	sp, #12
  417b3c:	bd30      	pop	{r4, r5, pc}
  417b3e:	bf00      	nop
  417b40:	204000b8 	.word	0x204000b8

00417b44 <_lv_txt_is_cmd>:
{
  417b44:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  417b46:	2923      	cmp	r1, #35	; 0x23
  417b48:	d004      	beq.n	417b54 <_lv_txt_is_cmd+0x10>
    bool ret = false;
  417b4a:	2000      	movs	r0, #0
    if(*state == LV_TXT_CMD_STATE_PAR) {
  417b4c:	7813      	ldrb	r3, [r2, #0]
  417b4e:	2b01      	cmp	r3, #1
  417b50:	d014      	beq.n	417b7c <_lv_txt_is_cmd+0x38>
}
  417b52:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
  417b54:	7803      	ldrb	r3, [r0, #0]
  417b56:	b91b      	cbnz	r3, 417b60 <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_PAR;
  417b58:	2301      	movs	r3, #1
  417b5a:	7003      	strb	r3, [r0, #0]
            ret    = true;
  417b5c:	4618      	mov	r0, r3
  417b5e:	e7f5      	b.n	417b4c <_lv_txt_is_cmd+0x8>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
  417b60:	2b01      	cmp	r3, #1
  417b62:	d003      	beq.n	417b6c <_lv_txt_is_cmd+0x28>
        else if(*state == LV_TXT_CMD_STATE_IN) {
  417b64:	2b02      	cmp	r3, #2
  417b66:	d005      	beq.n	417b74 <_lv_txt_is_cmd+0x30>
    bool ret = false;
  417b68:	2000      	movs	r0, #0
  417b6a:	e7ef      	b.n	417b4c <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  417b6c:	2300      	movs	r3, #0
  417b6e:	7003      	strb	r3, [r0, #0]
    bool ret = false;
  417b70:	4618      	mov	r0, r3
  417b72:	e7eb      	b.n	417b4c <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  417b74:	2300      	movs	r3, #0
  417b76:	7003      	strb	r3, [r0, #0]
            ret    = true;
  417b78:	2001      	movs	r0, #1
  417b7a:	e7e7      	b.n	417b4c <_lv_txt_is_cmd+0x8>
        if(c == ' ') {
  417b7c:	2920      	cmp	r1, #32
  417b7e:	d001      	beq.n	417b84 <_lv_txt_is_cmd+0x40>
        ret = true;
  417b80:	2001      	movs	r0, #1
  417b82:	e7e6      	b.n	417b52 <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
  417b84:	2302      	movs	r3, #2
  417b86:	7013      	strb	r3, [r2, #0]
        ret = true;
  417b88:	2001      	movs	r0, #1
  417b8a:	4770      	bx	lr

00417b8c <lv_txt_get_next_word>:
{
  417b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417b90:	b089      	sub	sp, #36	; 0x24
  417b92:	9103      	str	r1, [sp, #12]
  417b94:	9202      	str	r2, [sp, #8]
  417b96:	9304      	str	r3, [sp, #16]
  417b98:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
  417b9c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  417ba0:	9305      	str	r3, [sp, #20]
    if(txt == NULL || txt[0] == '\0') return 0;
  417ba2:	2800      	cmp	r0, #0
  417ba4:	f000 808f 	beq.w	417cc6 <lv_txt_get_next_word+0x13a>
  417ba8:	4607      	mov	r7, r0
  417baa:	7803      	ldrb	r3, [r0, #0]
  417bac:	2b00      	cmp	r3, #0
  417bae:	f000 808d 	beq.w	417ccc <lv_txt_get_next_word+0x140>
    if(font == NULL) return 0;
  417bb2:	2900      	cmp	r1, #0
  417bb4:	f000 8090 	beq.w	417cd8 <lv_txt_get_next_word+0x14c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417bb8:	f01b 0f02 	tst.w	fp, #2
  417bbc:	d002      	beq.n	417bc4 <lv_txt_get_next_word+0x38>
  417bbe:	f647 4318 	movw	r3, #31768	; 0x7c18
  417bc2:	9304      	str	r3, [sp, #16]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
  417bc4:	2600      	movs	r6, #0
  417bc6:	9607      	str	r6, [sp, #28]
  417bc8:	9606      	str	r6, [sp, #24]
    letter = _lv_txt_encoded_next(txt, &i_next);
  417bca:	4b47      	ldr	r3, [pc, #284]	; (417ce8 <lv_txt_get_next_word+0x15c>)
  417bcc:	681b      	ldr	r3, [r3, #0]
  417bce:	a907      	add	r1, sp, #28
  417bd0:	4638      	mov	r0, r7
  417bd2:	4798      	blx	r3
  417bd4:	4604      	mov	r4, r0
    i_next_next = i_next;
  417bd6:	9b07      	ldr	r3, [sp, #28]
  417bd8:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
  417bda:	f04f 38ff 	mov.w	r8, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
  417bde:	46b1      	mov	r9, r6
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
  417be0:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
  417be2:	9601      	str	r6, [sp, #4]
    while(txt[i] != '\0') {
  417be4:	e039      	b.n	417c5a <lv_txt_get_next_word+0xce>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  417be6:	9a01      	ldr	r2, [sp, #4]
  417be8:	4621      	mov	r1, r4
  417bea:	9803      	ldr	r0, [sp, #12]
  417bec:	4b3f      	ldr	r3, [pc, #252]	; (417cec <lv_txt_get_next_word+0x160>)
  417bee:	4798      	blx	r3
  417bf0:	b203      	sxth	r3, r0
        cur_w += letter_w;
  417bf2:	4428      	add	r0, r5
  417bf4:	b280      	uxth	r0, r0
  417bf6:	b205      	sxth	r5, r0
        if(letter_w > 0) {
  417bf8:	2b00      	cmp	r3, #0
  417bfa:	dd02      	ble.n	417c02 <lv_txt_get_next_word+0x76>
            cur_w += letter_space;
  417bfc:	9b02      	ldr	r3, [sp, #8]
  417bfe:	18c5      	adds	r5, r0, r3
  417c00:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  417c02:	f1b8 3fff 	cmp.w	r8, #4294967295
  417c06:	d00f      	beq.n	417c28 <lv_txt_get_next_word+0x9c>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  417c08:	2c0d      	cmp	r4, #13
  417c0a:	bf18      	it	ne
  417c0c:	2c0a      	cmpne	r4, #10
  417c0e:	bf0c      	ite	eq
  417c10:	2101      	moveq	r1, #1
  417c12:	2100      	movne	r1, #0
  417c14:	d038      	beq.n	417c88 <lv_txt_get_next_word+0xfc>
  417c16:	2300      	movs	r3, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  417c18:	4a35      	ldr	r2, [pc, #212]	; (417cf0 <lv_txt_get_next_word+0x164>)
  417c1a:	5cd2      	ldrb	r2, [r2, r3]
  417c1c:	b162      	cbz	r2, 417c38 <lv_txt_get_next_word+0xac>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
  417c1e:	4294      	cmp	r4, r2
  417c20:	d009      	beq.n	417c36 <lv_txt_get_next_word+0xaa>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  417c22:	3301      	adds	r3, #1
  417c24:	b2db      	uxtb	r3, r3
  417c26:	e7f7      	b.n	417c18 <lv_txt_get_next_word+0x8c>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  417c28:	9b02      	ldr	r3, [sp, #8]
  417c2a:	1aeb      	subs	r3, r5, r3
  417c2c:	9a04      	ldr	r2, [sp, #16]
  417c2e:	4293      	cmp	r3, r2
  417c30:	ddea      	ble.n	417c08 <lv_txt_get_next_word+0x7c>
            break_index = i;
  417c32:	46b0      	mov	r8, r6
  417c34:	e7e8      	b.n	417c08 <lv_txt_get_next_word+0x7c>
            ret = true; /*If match then it is break char*/
  417c36:	2101      	movs	r1, #1
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  417c38:	bb31      	cbnz	r1, 417c88 <lv_txt_get_next_word+0xfc>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
  417c3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417c3c:	3300      	adds	r3, #0
  417c3e:	bf18      	it	ne
  417c40:	2301      	movne	r3, #1
  417c42:	f1b8 3fff 	cmp.w	r8, #4294967295
  417c46:	bf18      	it	ne
  417c48:	2300      	movne	r3, #0
  417c4a:	b10b      	cbz	r3, 417c50 <lv_txt_get_next_word+0xc4>
  417c4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417c4e:	601d      	str	r5, [r3, #0]
        i = i_next;
  417c50:	9e07      	ldr	r6, [sp, #28]
        i_next = i_next_next;
  417c52:	9b06      	ldr	r3, [sp, #24]
  417c54:	9307      	str	r3, [sp, #28]
            ret = true; /*If match then it is break char*/
  417c56:	46d1      	mov	r9, sl
  417c58:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
  417c5a:	5dbb      	ldrb	r3, [r7, r6]
  417c5c:	b1e3      	cbz	r3, 417c98 <lv_txt_get_next_word+0x10c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  417c5e:	4b22      	ldr	r3, [pc, #136]	; (417ce8 <lv_txt_get_next_word+0x15c>)
  417c60:	681b      	ldr	r3, [r3, #0]
  417c62:	a906      	add	r1, sp, #24
  417c64:	4638      	mov	r0, r7
  417c66:	4798      	blx	r3
  417c68:	9001      	str	r0, [sp, #4]
        word_len++;
  417c6a:	f109 0a01 	add.w	sl, r9, #1
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  417c6e:	f01b 0f01 	tst.w	fp, #1
  417c72:	d0b8      	beq.n	417be6 <lv_txt_get_next_word+0x5a>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
  417c74:	4621      	mov	r1, r4
  417c76:	9814      	ldr	r0, [sp, #80]	; 0x50
  417c78:	4b1e      	ldr	r3, [pc, #120]	; (417cf4 <lv_txt_get_next_word+0x168>)
  417c7a:	4798      	blx	r3
  417c7c:	2800      	cmp	r0, #0
  417c7e:	d0b2      	beq.n	417be6 <lv_txt_get_next_word+0x5a>
                i = i_next;
  417c80:	9e07      	ldr	r6, [sp, #28]
                i_next = i_next_next;
  417c82:	9b06      	ldr	r3, [sp, #24]
  417c84:	9307      	str	r3, [sp, #28]
                continue;   /*Skip the letter is it is part of a command*/
  417c86:	e7e6      	b.n	417c56 <lv_txt_get_next_word+0xca>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
  417c88:	2e00      	cmp	r6, #0
  417c8a:	bf08      	it	eq
  417c8c:	f1b8 3fff 	cmpeq.w	r8, #4294967295
  417c90:	d102      	bne.n	417c98 <lv_txt_get_next_word+0x10c>
  417c92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417c94:	b103      	cbz	r3, 417c98 <lv_txt_get_next_word+0x10c>
  417c96:	601d      	str	r5, [r3, #0]
    if(break_index == NO_BREAK_FOUND) {
  417c98:	f1b8 3fff 	cmp.w	r8, #4294967295
  417c9c:	d008      	beq.n	417cb0 <lv_txt_get_next_word+0x124>
    if(force) return break_index;
  417c9e:	9b05      	ldr	r3, [sp, #20]
  417ca0:	b9b3      	cbnz	r3, 417cd0 <lv_txt_get_next_word+0x144>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
  417ca2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417ca4:	b1eb      	cbz	r3, 417ce2 <lv_txt_get_next_word+0x156>
  417ca6:	2300      	movs	r3, #0
  417ca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  417caa:	6013      	str	r3, [r2, #0]
    return 0;
  417cac:	4698      	mov	r8, r3
  417cae:	e00f      	b.n	417cd0 <lv_txt_get_next_word+0x144>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  417cb0:	f1b9 0f00 	cmp.w	r9, #0
  417cb4:	d004      	beq.n	417cc0 <lv_txt_get_next_word+0x134>
  417cb6:	9b01      	ldr	r3, [sp, #4]
  417cb8:	2c0d      	cmp	r4, #13
  417cba:	bf08      	it	eq
  417cbc:	2b0a      	cmpeq	r3, #10
  417cbe:	d10e      	bne.n	417cde <lv_txt_get_next_word+0x152>
  417cc0:	f8dd 801c 	ldr.w	r8, [sp, #28]
  417cc4:	e004      	b.n	417cd0 <lv_txt_get_next_word+0x144>
    if(txt == NULL || txt[0] == '\0') return 0;
  417cc6:	f04f 0800 	mov.w	r8, #0
  417cca:	e001      	b.n	417cd0 <lv_txt_get_next_word+0x144>
  417ccc:	f04f 0800 	mov.w	r8, #0
}
  417cd0:	4640      	mov	r0, r8
  417cd2:	b009      	add	sp, #36	; 0x24
  417cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
  417cd8:	f04f 0800 	mov.w	r8, #0
  417cdc:	e7f8      	b.n	417cd0 <lv_txt_get_next_word+0x144>
  417cde:	46b0      	mov	r8, r6
  417ce0:	e7f6      	b.n	417cd0 <lv_txt_get_next_word+0x144>
    return 0;
  417ce2:	f04f 0800 	mov.w	r8, #0
  417ce6:	e7f3      	b.n	417cd0 <lv_txt_get_next_word+0x144>
  417ce8:	204000b8 	.word	0x204000b8
  417cec:	00413b3d 	.word	0x00413b3d
  417cf0:	0042f864 	.word	0x0042f864
  417cf4:	00417b45 	.word	0x00417b45

00417cf8 <_lv_txt_get_next_line>:
{
  417cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  417cfc:	b089      	sub	sp, #36	; 0x24
  417cfe:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
  417d02:	2800      	cmp	r0, #0
  417d04:	d05f      	beq.n	417dc6 <_lv_txt_get_next_line+0xce>
  417d06:	4689      	mov	r9, r1
  417d08:	4690      	mov	r8, r2
  417d0a:	461d      	mov	r5, r3
  417d0c:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  417d0e:	2900      	cmp	r1, #0
  417d10:	d05b      	beq.n	417dca <_lv_txt_get_next_line+0xd2>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
  417d12:	f016 0f12 	tst.w	r6, #18
  417d16:	d145      	bne.n	417da4 <_lv_txt_get_next_line+0xac>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417d18:	f016 0f02 	tst.w	r6, #2
  417d1c:	d001      	beq.n	417d22 <_lv_txt_get_next_line+0x2a>
  417d1e:	f647 4518 	movw	r5, #31768	; 0x7c18
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  417d22:	2300      	movs	r3, #0
  417d24:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
  417d28:	9306      	str	r3, [sp, #24]
    while(txt[i] != '\0' && max_width > 0) {
  417d2a:	9b06      	ldr	r3, [sp, #24]
  417d2c:	18e0      	adds	r0, r4, r3
  417d2e:	5ce2      	ldrb	r2, [r4, r3]
  417d30:	b332      	cbz	r2, 417d80 <_lv_txt_get_next_line+0x88>
  417d32:	2d00      	cmp	r5, #0
  417d34:	dd24      	ble.n	417d80 <_lv_txt_get_next_line+0x88>
        uint32_t word_w = 0;
  417d36:	2200      	movs	r2, #0
  417d38:	9205      	str	r2, [sp, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
  417d3a:	fab3 f383 	clz	r3, r3
  417d3e:	095b      	lsrs	r3, r3, #5
  417d40:	9303      	str	r3, [sp, #12]
  417d42:	f10d 031f 	add.w	r3, sp, #31
  417d46:	9302      	str	r3, [sp, #8]
  417d48:	ab05      	add	r3, sp, #20
  417d4a:	9301      	str	r3, [sp, #4]
  417d4c:	9600      	str	r6, [sp, #0]
  417d4e:	462b      	mov	r3, r5
  417d50:	4642      	mov	r2, r8
  417d52:	4649      	mov	r1, r9
  417d54:	4f1e      	ldr	r7, [pc, #120]	; (417dd0 <_lv_txt_get_next_line+0xd8>)
  417d56:	47b8      	blx	r7
        max_width -= word_w;
  417d58:	9b05      	ldr	r3, [sp, #20]
  417d5a:	1aed      	subs	r5, r5, r3
  417d5c:	b22d      	sxth	r5, r5
        if(advance == 0) {
  417d5e:	4603      	mov	r3, r0
  417d60:	b310      	cbz	r0, 417da8 <_lv_txt_get_next_line+0xb0>
        i += advance;
  417d62:	9806      	ldr	r0, [sp, #24]
  417d64:	4418      	add	r0, r3
  417d66:	9006      	str	r0, [sp, #24]
        if(txt[0] == '\n' || txt[0] == '\r') break;
  417d68:	7823      	ldrb	r3, [r4, #0]
  417d6a:	2b0d      	cmp	r3, #13
  417d6c:	bf18      	it	ne
  417d6e:	2b0a      	cmpne	r3, #10
  417d70:	d006      	beq.n	417d80 <_lv_txt_get_next_line+0x88>
        if(txt[i] == '\n' || txt[i] == '\r') {
  417d72:	5c23      	ldrb	r3, [r4, r0]
  417d74:	2b0d      	cmp	r3, #13
  417d76:	bf18      	it	ne
  417d78:	2b0a      	cmpne	r3, #10
  417d7a:	d1d6      	bne.n	417d2a <_lv_txt_get_next_line+0x32>
            i++;  /* Include the following newline in the current line */
  417d7c:	3001      	adds	r0, #1
  417d7e:	9006      	str	r0, [sp, #24]
    if(i == 0) {
  417d80:	9b06      	ldr	r3, [sp, #24]
  417d82:	b1d3      	cbz	r3, 417dba <_lv_txt_get_next_line+0xc2>
    return i;
  417d84:	9806      	ldr	r0, [sp, #24]
}
  417d86:	b009      	add	sp, #36	; 0x24
  417d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  417d8c:	3001      	adds	r0, #1
  417d8e:	5c23      	ldrb	r3, [r4, r0]
  417d90:	2b0a      	cmp	r3, #10
  417d92:	bf18      	it	ne
  417d94:	2b0d      	cmpne	r3, #13
  417d96:	d001      	beq.n	417d9c <_lv_txt_get_next_line+0xa4>
  417d98:	2b00      	cmp	r3, #0
  417d9a:	d1f7      	bne.n	417d8c <_lv_txt_get_next_line+0x94>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
  417d9c:	2b00      	cmp	r3, #0
  417d9e:	d0f2      	beq.n	417d86 <_lv_txt_get_next_line+0x8e>
  417da0:	3001      	adds	r0, #1
  417da2:	e7f0      	b.n	417d86 <_lv_txt_get_next_line+0x8e>
  417da4:	2000      	movs	r0, #0
  417da6:	e7f2      	b.n	417d8e <_lv_txt_get_next_line+0x96>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
  417da8:	9b06      	ldr	r3, [sp, #24]
  417daa:	2b00      	cmp	r3, #0
  417dac:	d1e8      	bne.n	417d80 <_lv_txt_get_next_line+0x88>
  417dae:	4b09      	ldr	r3, [pc, #36]	; (417dd4 <_lv_txt_get_next_line+0xdc>)
  417db0:	681b      	ldr	r3, [r3, #0]
  417db2:	a906      	add	r1, sp, #24
  417db4:	4620      	mov	r0, r4
  417db6:	4798      	blx	r3
  417db8:	e7e2      	b.n	417d80 <_lv_txt_get_next_line+0x88>
        _lv_txt_encoded_next(txt, &i);
  417dba:	4b06      	ldr	r3, [pc, #24]	; (417dd4 <_lv_txt_get_next_line+0xdc>)
  417dbc:	681b      	ldr	r3, [r3, #0]
  417dbe:	a906      	add	r1, sp, #24
  417dc0:	4620      	mov	r0, r4
  417dc2:	4798      	blx	r3
  417dc4:	e7de      	b.n	417d84 <_lv_txt_get_next_line+0x8c>
    if(txt == NULL) return 0;
  417dc6:	2000      	movs	r0, #0
  417dc8:	e7dd      	b.n	417d86 <_lv_txt_get_next_line+0x8e>
    if(font == NULL) return 0;
  417dca:	2000      	movs	r0, #0
  417dcc:	e7db      	b.n	417d86 <_lv_txt_get_next_line+0x8e>
  417dce:	bf00      	nop
  417dd0:	00417b8d 	.word	0x00417b8d
  417dd4:	204000b8 	.word	0x204000b8

00417dd8 <_lv_txt_get_width>:
{
  417dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417ddc:	b085      	sub	sp, #20
  417dde:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    if(txt == NULL) return 0;
  417de2:	2800      	cmp	r0, #0
  417de4:	d041      	beq.n	417e6a <_lv_txt_get_width+0x92>
  417de6:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  417de8:	2a00      	cmp	r2, #0
  417dea:	d041      	beq.n	417e70 <_lv_txt_get_width+0x98>
    uint32_t i                   = 0;
  417dec:	2000      	movs	r0, #0
  417dee:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  417df0:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
  417df4:	b129      	cbz	r1, 417e02 <_lv_txt_get_width+0x2a>
  417df6:	4698      	mov	r8, r3
  417df8:	9201      	str	r2, [sp, #4]
  417dfa:	460d      	mov	r5, r1
  417dfc:	f04f 0a00 	mov.w	sl, #0
  417e00:	e00e      	b.n	417e20 <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
  417e02:	4682      	mov	sl, r0
  417e04:	e02d      	b.n	417e62 <_lv_txt_get_width+0x8a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
  417e06:	464a      	mov	r2, r9
  417e08:	4659      	mov	r1, fp
  417e0a:	9801      	ldr	r0, [sp, #4]
  417e0c:	4b1a      	ldr	r3, [pc, #104]	; (417e78 <_lv_txt_get_width+0xa0>)
  417e0e:	4798      	blx	r3
  417e10:	b203      	sxth	r3, r0
            if(char_width > 0) {
  417e12:	2b00      	cmp	r3, #0
  417e14:	dd04      	ble.n	417e20 <_lv_txt_get_width+0x48>
                width += char_width;
  417e16:	4450      	add	r0, sl
                width += letter_space;
  417e18:	fa18 f080 	uxtah	r0, r8, r0
  417e1c:	fa0f fa80 	sxth.w	sl, r0
        while(i < length) {
  417e20:	9b03      	ldr	r3, [sp, #12]
  417e22:	429d      	cmp	r5, r3
  417e24:	d916      	bls.n	417e54 <_lv_txt_get_width+0x7c>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
  417e26:	4e15      	ldr	r6, [pc, #84]	; (417e7c <_lv_txt_get_width+0xa4>)
  417e28:	6833      	ldr	r3, [r6, #0]
  417e2a:	a903      	add	r1, sp, #12
  417e2c:	4620      	mov	r0, r4
  417e2e:	4798      	blx	r3
  417e30:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
  417e32:	6833      	ldr	r3, [r6, #0]
  417e34:	2100      	movs	r1, #0
  417e36:	9803      	ldr	r0, [sp, #12]
  417e38:	4420      	add	r0, r4
  417e3a:	4798      	blx	r3
  417e3c:	4681      	mov	r9, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  417e3e:	f017 0f01 	tst.w	r7, #1
  417e42:	d0e0      	beq.n	417e06 <_lv_txt_get_width+0x2e>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
  417e44:	4659      	mov	r1, fp
  417e46:	f10d 000b 	add.w	r0, sp, #11
  417e4a:	4b0d      	ldr	r3, [pc, #52]	; (417e80 <_lv_txt_get_width+0xa8>)
  417e4c:	4798      	blx	r3
  417e4e:	2800      	cmp	r0, #0
  417e50:	d1e6      	bne.n	417e20 <_lv_txt_get_width+0x48>
  417e52:	e7d8      	b.n	417e06 <_lv_txt_get_width+0x2e>
        if(width > 0) {
  417e54:	f1ba 0f00 	cmp.w	sl, #0
  417e58:	dd03      	ble.n	417e62 <_lv_txt_get_width+0x8a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
  417e5a:	ebaa 0008 	sub.w	r0, sl, r8
  417e5e:	fa0f fa80 	sxth.w	sl, r0
}
  417e62:	4650      	mov	r0, sl
  417e64:	b005      	add	sp, #20
  417e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
  417e6a:	f04f 0a00 	mov.w	sl, #0
  417e6e:	e7f8      	b.n	417e62 <_lv_txt_get_width+0x8a>
    if(font == NULL) return 0;
  417e70:	f04f 0a00 	mov.w	sl, #0
  417e74:	e7f5      	b.n	417e62 <_lv_txt_get_width+0x8a>
  417e76:	bf00      	nop
  417e78:	00413b3d 	.word	0x00413b3d
  417e7c:	204000b8 	.word	0x204000b8
  417e80:	00417b45 	.word	0x00417b45

00417e84 <_lv_txt_get_size>:
{
  417e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417e88:	b087      	sub	sp, #28
  417e8a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
  417e8e:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  417e92:	9404      	str	r4, [sp, #16]
  417e94:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    size_res->x = 0;
  417e98:	2400      	movs	r4, #0
  417e9a:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
  417e9c:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
  417e9e:	2900      	cmp	r1, #0
  417ea0:	d04d      	beq.n	417f3e <_lv_txt_get_size+0xba>
  417ea2:	460f      	mov	r7, r1
    if(font == NULL) return;
  417ea4:	2a00      	cmp	r2, #0
  417ea6:	d04a      	beq.n	417f3e <_lv_txt_get_size+0xba>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417ea8:	f018 0f02 	tst.w	r8, #2
  417eac:	d002      	beq.n	417eb4 <_lv_txt_get_size+0x30>
  417eae:	f647 4118 	movw	r1, #31768	; 0x7c18
  417eb2:	9104      	str	r1, [sp, #16]
  417eb4:	9303      	str	r3, [sp, #12]
  417eb6:	9202      	str	r2, [sp, #8]
  417eb8:	4604      	mov	r4, r0
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  417eba:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
  417ebe:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
  417ec0:	fa1f fa83 	uxth.w	sl, r3
    uint32_t line_start     = 0;
  417ec4:	2500      	movs	r5, #0
    while(text[line_start] != '\0') {
  417ec6:	197e      	adds	r6, r7, r5
  417ec8:	5d7b      	ldrb	r3, [r7, r5]
  417eca:	b323      	cbz	r3, 417f16 <_lv_txt_get_size+0x92>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  417ecc:	f8cd 8000 	str.w	r8, [sp]
  417ed0:	9b04      	ldr	r3, [sp, #16]
  417ed2:	9a03      	ldr	r2, [sp, #12]
  417ed4:	9902      	ldr	r1, [sp, #8]
  417ed6:	4630      	mov	r0, r6
  417ed8:	f8df b074 	ldr.w	fp, [pc, #116]	; 417f50 <_lv_txt_get_size+0xcc>
  417edc:	47d8      	blx	fp
  417ede:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  417ee0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  417ee4:	eb03 020a 	add.w	r2, r3, sl
  417ee8:	444a      	add	r2, r9
  417eea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  417eee:	d226      	bcs.n	417f3e <_lv_txt_get_size+0xba>
            size_res->y += letter_height;
  417ef0:	4453      	add	r3, sl
            size_res->y += line_space;
  417ef2:	fa19 f383 	uxtah	r3, r9, r3
  417ef6:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
  417ef8:	f8cd 8000 	str.w	r8, [sp]
  417efc:	9b03      	ldr	r3, [sp, #12]
  417efe:	9a02      	ldr	r2, [sp, #8]
  417f00:	4601      	mov	r1, r0
  417f02:	4630      	mov	r0, r6
  417f04:	4e11      	ldr	r6, [pc, #68]	; (417f4c <_lv_txt_get_size+0xc8>)
  417f06:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
  417f08:	f9b4 3000 	ldrsh.w	r3, [r4]
  417f0c:	4298      	cmp	r0, r3
  417f0e:	bfb8      	it	lt
  417f10:	4618      	movlt	r0, r3
  417f12:	8020      	strh	r0, [r4, #0]
  417f14:	e7d7      	b.n	417ec6 <_lv_txt_get_size+0x42>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
  417f16:	b15d      	cbz	r5, 417f30 <_lv_txt_get_size+0xac>
  417f18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  417f1c:	2b0d      	cmp	r3, #13
  417f1e:	bf18      	it	ne
  417f20:	2b0a      	cmpne	r3, #10
  417f22:	d105      	bne.n	417f30 <_lv_txt_get_size+0xac>
        size_res->y += letter_height + line_space;
  417f24:	eb0a 0309 	add.w	r3, sl, r9
  417f28:	8862      	ldrh	r2, [r4, #2]
  417f2a:	fa12 f383 	uxtah	r3, r2, r3
  417f2e:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
  417f30:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  417f34:	b133      	cbz	r3, 417f44 <_lv_txt_get_size+0xc0>
        size_res->y -= line_space;
  417f36:	eba3 0909 	sub.w	r9, r3, r9
  417f3a:	f8a4 9002 	strh.w	r9, [r4, #2]
}
  417f3e:	b007      	add	sp, #28
  417f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y = letter_height;
  417f44:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  417f48:	8063      	strh	r3, [r4, #2]
  417f4a:	e7f8      	b.n	417f3e <_lv_txt_get_size+0xba>
  417f4c:	00417dd9 	.word	0x00417dd9
  417f50:	00417cf9 	.word	0x00417cf9

00417f54 <_lv_txt_set_text_vfmt>:
{
  417f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417f58:	b082      	sub	sp, #8
  417f5a:	4607      	mov	r7, r0
  417f5c:	460d      	mov	r5, r1
    va_copy(ap_copy, ap);
  417f5e:	9101      	str	r1, [sp, #4]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
  417f60:	460b      	mov	r3, r1
  417f62:	4602      	mov	r2, r0
  417f64:	2100      	movs	r1, #0
  417f66:	4608      	mov	r0, r1
  417f68:	4c0f      	ldr	r4, [pc, #60]	; (417fa8 <_lv_txt_set_text_vfmt+0x54>)
  417f6a:	47a0      	blx	r4
  417f6c:	4680      	mov	r8, r0
    text = lv_mem_alloc(len + 1);
  417f6e:	1c46      	adds	r6, r0, #1
  417f70:	4630      	mov	r0, r6
  417f72:	4b0e      	ldr	r3, [pc, #56]	; (417fac <_lv_txt_set_text_vfmt+0x58>)
  417f74:	4798      	blx	r3
  417f76:	4604      	mov	r4, r0
    LV_ASSERT_MEM(text);
  417f78:	4b0d      	ldr	r3, [pc, #52]	; (417fb0 <_lv_txt_set_text_vfmt+0x5c>)
  417f7a:	4798      	blx	r3
  417f7c:	b168      	cbz	r0, 417f9a <_lv_txt_set_text_vfmt+0x46>
    if(text == NULL) {
  417f7e:	b144      	cbz	r4, 417f92 <_lv_txt_set_text_vfmt+0x3e>
    text[len] = 0; /* Ensure NULL termination */
  417f80:	2300      	movs	r3, #0
  417f82:	f804 3008 	strb.w	r3, [r4, r8]
    lv_vsnprintf(text, len + 1, fmt, ap);
  417f86:	462b      	mov	r3, r5
  417f88:	463a      	mov	r2, r7
  417f8a:	4631      	mov	r1, r6
  417f8c:	4620      	mov	r0, r4
  417f8e:	4d06      	ldr	r5, [pc, #24]	; (417fa8 <_lv_txt_set_text_vfmt+0x54>)
  417f90:	47a8      	blx	r5
}
  417f92:	4620      	mov	r0, r4
  417f94:	b002      	add	sp, #8
  417f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(text);
  417f9a:	4622      	mov	r2, r4
  417f9c:	2300      	movs	r3, #0
  417f9e:	4805      	ldr	r0, [pc, #20]	; (417fb4 <_lv_txt_set_text_vfmt+0x60>)
  417fa0:	4905      	ldr	r1, [pc, #20]	; (417fb8 <_lv_txt_set_text_vfmt+0x64>)
  417fa2:	4788      	blx	r1
  417fa4:	e7fe      	b.n	417fa4 <_lv_txt_set_text_vfmt+0x50>
  417fa6:	bf00      	nop
  417fa8:	004174ed 	.word	0x004174ed
  417fac:	004165bd 	.word	0x004165bd
  417fb0:	00415e79 	.word	0x00415e79
  417fb4:	0042c154 	.word	0x0042c154
  417fb8:	00415e85 	.word	0x00415e85

00417fbc <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
  417fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  417fc0:	4681      	mov	r9, r0
  417fc2:	468a      	mov	sl, r1
  417fc4:	4615      	mov	r5, r2
  417fc6:	461f      	mov	r7, r3
  417fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
  417fcc:	4608      	mov	r0, r1
  417fce:	e003      	b.n	417fd8 <_lv_utils_bsearch+0x1c>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
            base = (middle += size);
        }
        else if(c < 0) {
  417fd0:	2800      	cmp	r0, #0
  417fd2:	da16      	bge.n	418002 <_lv_utils_bsearch+0x46>
            n /= 2;
            middle = base;
  417fd4:	4650      	mov	r0, sl
            n /= 2;
  417fd6:	4635      	mov	r5, r6
    for(middle = base; n != 0;) {
  417fd8:	b185      	cbz	r5, 417ffc <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
  417fda:	086e      	lsrs	r6, r5, #1
  417fdc:	fb07 0406 	mla	r4, r7, r6, r0
        if((c = (*cmp)(key, middle)) > 0) {
  417fe0:	4621      	mov	r1, r4
  417fe2:	4648      	mov	r0, r9
  417fe4:	47c0      	blx	r8
  417fe6:	2800      	cmp	r0, #0
  417fe8:	ddf2      	ble.n	417fd0 <_lv_utils_bsearch+0x14>
            n    = (n / 2) - ((n & 1) == 0);
  417fea:	f015 0f01 	tst.w	r5, #1
  417fee:	bf0c      	ite	eq
  417ff0:	2501      	moveq	r5, #1
  417ff2:	2500      	movne	r5, #0
  417ff4:	1b75      	subs	r5, r6, r5
            base = (middle += size);
  417ff6:	19e0      	adds	r0, r4, r7
  417ff8:	4682      	mov	sl, r0
  417ffa:	e7ed      	b.n	417fd8 <_lv_utils_bsearch+0x1c>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
  417ffc:	2000      	movs	r0, #0
  417ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return (char *)middle;
  418002:	4620      	mov	r0, r4
}
  418004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00418008 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  418008:	b570      	push	{r4, r5, r6, lr}
  41800a:	4604      	mov	r4, r0
  41800c:	460d      	mov	r5, r1
  41800e:	4616      	mov	r6, r2
    if(th->base) {
  418010:	6880      	ldr	r0, [r0, #8]
  418012:	b108      	cbz	r0, 418018 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
  418014:	f7ff fff8 	bl	418008 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
  418018:	6863      	ldr	r3, [r4, #4]
  41801a:	b11b      	cbz	r3, 418024 <apply_theme+0x1c>
        th->apply_xcb(obj, name);
  41801c:	4631      	mov	r1, r6
  41801e:	4628      	mov	r0, r5
  418020:	4798      	blx	r3
  418022:	bd70      	pop	{r4, r5, r6, pc}
    }
    else if(th->apply_cb) {
  418024:	6823      	ldr	r3, [r4, #0]
  418026:	b123      	cbz	r3, 418032 <apply_theme+0x2a>
        th->apply_cb(act_theme, obj, name);
  418028:	4632      	mov	r2, r6
  41802a:	4629      	mov	r1, r5
  41802c:	4801      	ldr	r0, [pc, #4]	; (418034 <apply_theme+0x2c>)
  41802e:	6800      	ldr	r0, [r0, #0]
  418030:	4798      	blx	r3
  418032:	bd70      	pop	{r4, r5, r6, pc}
  418034:	2041481c 	.word	0x2041481c

00418038 <clear_styles>:
    }
}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
  418038:	b538      	push	{r3, r4, r5, lr}
  41803a:	4604      	mov	r4, r0
    switch(name) {
  41803c:	3901      	subs	r1, #1
  41803e:	2927      	cmp	r1, #39	; 0x27
  418040:	f200 8150 	bhi.w	4182e4 <clear_styles+0x2ac>
  418044:	e8df f011 	tbh	[pc, r1, lsl #1]
  418048:	002c0028 	.word	0x002c0028
  41804c:	0046006b 	.word	0x0046006b
  418050:	00380034 	.word	0x00380034
  418054:	0057012d 	.word	0x0057012d
  418058:	00ea0083 	.word	0x00ea0083
  41805c:	013a0030 	.word	0x013a0030
  418060:	014500dd 	.word	0x014500dd
  418064:	005f005b 	.word	0x005f005b
  418068:	0063003f 	.word	0x0063003f
  41806c:	00670095 	.word	0x00670095
  418070:	00d900cf 	.word	0x00d900cf
  418074:	008a0141 	.word	0x008a0141
  418078:	00cb008e 	.word	0x00cb008e
  41807c:	00c40099 	.word	0x00c40099
  418080:	01220079 	.word	0x01220079
  418084:	00720129 	.word	0x00720129
  418088:	00f4004d 	.word	0x00f4004d
  41808c:	00b300a3 	.word	0x00b300a3
  418090:	00ba0115 	.word	0x00ba0115
  418094:	01110104 	.word	0x01110104
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  418098:	2100      	movs	r1, #0
  41809a:	4b93      	ldr	r3, [pc, #588]	; (4182e8 <clear_styles+0x2b0>)
  41809c:	4798      	blx	r3
            break;
  41809e:	bd38      	pop	{r3, r4, r5, pc}
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4180a0:	2100      	movs	r1, #0
  4180a2:	4b91      	ldr	r3, [pc, #580]	; (4182e8 <clear_styles+0x2b0>)
  4180a4:	4798      	blx	r3
            break;
  4180a6:	bd38      	pop	{r3, r4, r5, pc}
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4180a8:	2100      	movs	r1, #0
  4180aa:	4b8f      	ldr	r3, [pc, #572]	; (4182e8 <clear_styles+0x2b0>)
  4180ac:	4798      	blx	r3
            break;
  4180ae:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4180b0:	2100      	movs	r1, #0
  4180b2:	4b8d      	ldr	r3, [pc, #564]	; (4182e8 <clear_styles+0x2b0>)
  4180b4:	4798      	blx	r3
            break;
  4180b6:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
  4180b8:	2100      	movs	r1, #0
  4180ba:	4d8b      	ldr	r5, [pc, #556]	; (4182e8 <clear_styles+0x2b0>)
  4180bc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
  4180be:	2101      	movs	r1, #1
  4180c0:	4620      	mov	r0, r4
  4180c2:	47a8      	blx	r5
            break;
  4180c4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
  4180c6:	2100      	movs	r1, #0
  4180c8:	4d87      	ldr	r5, [pc, #540]	; (4182e8 <clear_styles+0x2b0>)
  4180ca:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
  4180cc:	2101      	movs	r1, #1
  4180ce:	4620      	mov	r0, r4
  4180d0:	47a8      	blx	r5
            break;
  4180d2:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
  4180d4:	2100      	movs	r1, #0
  4180d6:	4d84      	ldr	r5, [pc, #528]	; (4182e8 <clear_styles+0x2b0>)
  4180d8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
  4180da:	2101      	movs	r1, #1
  4180dc:	4620      	mov	r0, r4
  4180de:	47a8      	blx	r5
            break;
  4180e0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
  4180e2:	2100      	movs	r1, #0
  4180e4:	4d80      	ldr	r5, [pc, #512]	; (4182e8 <clear_styles+0x2b0>)
  4180e6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
  4180e8:	2101      	movs	r1, #1
  4180ea:	4620      	mov	r0, r4
  4180ec:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
  4180ee:	2102      	movs	r1, #2
  4180f0:	4620      	mov	r0, r4
  4180f2:	47a8      	blx	r5
            break;
  4180f4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
  4180f6:	2100      	movs	r1, #0
  4180f8:	4b7b      	ldr	r3, [pc, #492]	; (4182e8 <clear_styles+0x2b0>)
  4180fa:	4798      	blx	r3
            break;
  4180fc:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  4180fe:	2100      	movs	r1, #0
  418100:	4b79      	ldr	r3, [pc, #484]	; (4182e8 <clear_styles+0x2b0>)
  418102:	4798      	blx	r3
            break;
  418104:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  418106:	2100      	movs	r1, #0
  418108:	4b77      	ldr	r3, [pc, #476]	; (4182e8 <clear_styles+0x2b0>)
  41810a:	4798      	blx	r3
            break;
  41810c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  41810e:	2100      	movs	r1, #0
  418110:	4b75      	ldr	r3, [pc, #468]	; (4182e8 <clear_styles+0x2b0>)
  418112:	4798      	blx	r3
            break;
  418114:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  418116:	2100      	movs	r1, #0
  418118:	4b73      	ldr	r3, [pc, #460]	; (4182e8 <clear_styles+0x2b0>)
  41811a:	4798      	blx	r3
            break;
  41811c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
  41811e:	2100      	movs	r1, #0
  418120:	4d71      	ldr	r5, [pc, #452]	; (4182e8 <clear_styles+0x2b0>)
  418122:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
  418124:	2101      	movs	r1, #1
  418126:	4620      	mov	r0, r4
  418128:	47a8      	blx	r5
            break;
  41812a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
  41812c:	2100      	movs	r1, #0
  41812e:	4d6e      	ldr	r5, [pc, #440]	; (4182e8 <clear_styles+0x2b0>)
  418130:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
  418132:	2101      	movs	r1, #1
  418134:	4620      	mov	r0, r4
  418136:	47a8      	blx	r5
            break;
  418138:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
  41813a:	2100      	movs	r1, #0
  41813c:	4d6a      	ldr	r5, [pc, #424]	; (4182e8 <clear_styles+0x2b0>)
  41813e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
  418140:	2101      	movs	r1, #1
  418142:	4620      	mov	r0, r4
  418144:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
  418146:	2102      	movs	r1, #2
  418148:	4620      	mov	r0, r4
  41814a:	47a8      	blx	r5
            break;
  41814c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
  41814e:	2100      	movs	r1, #0
  418150:	4d65      	ldr	r5, [pc, #404]	; (4182e8 <clear_styles+0x2b0>)
  418152:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
  418154:	2140      	movs	r1, #64	; 0x40
  418156:	4620      	mov	r0, r4
  418158:	47a8      	blx	r5
            break;
  41815a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
  41815c:	2100      	movs	r1, #0
  41815e:	4b62      	ldr	r3, [pc, #392]	; (4182e8 <clear_styles+0x2b0>)
  418160:	4798      	blx	r3
            break;
  418162:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  418164:	2140      	movs	r1, #64	; 0x40
  418166:	4d60      	ldr	r5, [pc, #384]	; (4182e8 <clear_styles+0x2b0>)
  418168:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
  41816a:	2141      	movs	r1, #65	; 0x41
  41816c:	4620      	mov	r0, r4
  41816e:	47a8      	blx	r5
            break;
  418170:	bd38      	pop	{r3, r4, r5, pc}

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
  418172:	2100      	movs	r1, #0
  418174:	4b5c      	ldr	r3, [pc, #368]	; (4182e8 <clear_styles+0x2b0>)
  418176:	4798      	blx	r3
            break;
  418178:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  41817a:	2100      	movs	r1, #0
  41817c:	4d5a      	ldr	r5, [pc, #360]	; (4182e8 <clear_styles+0x2b0>)
  41817e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  418180:	2140      	movs	r1, #64	; 0x40
  418182:	4620      	mov	r0, r4
  418184:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  418186:	2101      	movs	r1, #1
  418188:	4620      	mov	r0, r4
  41818a:	47a8      	blx	r5
            break;
  41818c:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
  41818e:	2100      	movs	r1, #0
  418190:	4d55      	ldr	r5, [pc, #340]	; (4182e8 <clear_styles+0x2b0>)
  418192:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
  418194:	2140      	movs	r1, #64	; 0x40
  418196:	4620      	mov	r0, r4
  418198:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  41819a:	2141      	movs	r1, #65	; 0x41
  41819c:	4620      	mov	r0, r4
  41819e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
  4181a0:	2143      	movs	r1, #67	; 0x43
  4181a2:	4620      	mov	r0, r4
  4181a4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  4181a6:	2142      	movs	r1, #66	; 0x42
  4181a8:	4620      	mov	r0, r4
  4181aa:	47a8      	blx	r5
            break;
  4181ac:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  4181ae:	2100      	movs	r1, #0
  4181b0:	4d4d      	ldr	r5, [pc, #308]	; (4182e8 <clear_styles+0x2b0>)
  4181b2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4181b4:	2140      	movs	r1, #64	; 0x40
  4181b6:	4620      	mov	r0, r4
  4181b8:	47a8      	blx	r5
            break;
  4181ba:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
  4181bc:	2100      	movs	r1, #0
  4181be:	4d4a      	ldr	r5, [pc, #296]	; (4182e8 <clear_styles+0x2b0>)
  4181c0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  4181c2:	2101      	movs	r1, #1
  4181c4:	4620      	mov	r0, r4
  4181c6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  4181c8:	2102      	movs	r1, #2
  4181ca:	4620      	mov	r0, r4
  4181cc:	47a8      	blx	r5
            break;
  4181ce:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
  4181d0:	2100      	movs	r1, #0
  4181d2:	4d45      	ldr	r5, [pc, #276]	; (4182e8 <clear_styles+0x2b0>)
  4181d4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
  4181d6:	2103      	movs	r1, #3
  4181d8:	4620      	mov	r0, r4
  4181da:	47a8      	blx	r5
            break;
  4181dc:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
  4181de:	2100      	movs	r1, #0
  4181e0:	4b41      	ldr	r3, [pc, #260]	; (4182e8 <clear_styles+0x2b0>)
  4181e2:	4798      	blx	r3
            break;
  4181e4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
  4181e6:	2100      	movs	r1, #0
  4181e8:	4d3f      	ldr	r5, [pc, #252]	; (4182e8 <clear_styles+0x2b0>)
  4181ea:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
  4181ec:	2140      	movs	r1, #64	; 0x40
  4181ee:	4620      	mov	r0, r4
  4181f0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
  4181f2:	2101      	movs	r1, #1
  4181f4:	4620      	mov	r0, r4
  4181f6:	47a8      	blx	r5
            break;
  4181f8:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4181fa:	2100      	movs	r1, #0
  4181fc:	4b3a      	ldr	r3, [pc, #232]	; (4182e8 <clear_styles+0x2b0>)
  4181fe:	4798      	blx	r3
            break;
  418200:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
  418202:	2100      	movs	r1, #0
  418204:	4d38      	ldr	r5, [pc, #224]	; (4182e8 <clear_styles+0x2b0>)
  418206:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
  418208:	2140      	movs	r1, #64	; 0x40
  41820a:	4620      	mov	r0, r4
  41820c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  41820e:	2141      	movs	r1, #65	; 0x41
  418210:	4620      	mov	r0, r4
  418212:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  418214:	2142      	movs	r1, #66	; 0x42
  418216:	4620      	mov	r0, r4
  418218:	47a8      	blx	r5
            break;
  41821a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
  41821c:	2100      	movs	r1, #0
  41821e:	4d32      	ldr	r5, [pc, #200]	; (4182e8 <clear_styles+0x2b0>)
  418220:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
  418222:	2101      	movs	r1, #1
  418224:	4620      	mov	r0, r4
  418226:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
  418228:	2102      	movs	r1, #2
  41822a:	4620      	mov	r0, r4
  41822c:	47a8      	blx	r5
            break;
  41822e:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
  418230:	2100      	movs	r1, #0
  418232:	4d2d      	ldr	r5, [pc, #180]	; (4182e8 <clear_styles+0x2b0>)
  418234:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
  418236:	2101      	movs	r1, #1
  418238:	4620      	mov	r0, r4
  41823a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
  41823c:	2102      	movs	r1, #2
  41823e:	4620      	mov	r0, r4
  418240:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
  418242:	2103      	movs	r1, #3
  418244:	4620      	mov	r0, r4
  418246:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
  418248:	2104      	movs	r1, #4
  41824a:	4620      	mov	r0, r4
  41824c:	47a8      	blx	r5
            break;
  41824e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
  418250:	2100      	movs	r1, #0
  418252:	4d25      	ldr	r5, [pc, #148]	; (4182e8 <clear_styles+0x2b0>)
  418254:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
  418256:	2142      	movs	r1, #66	; 0x42
  418258:	4620      	mov	r0, r4
  41825a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  41825c:	2141      	movs	r1, #65	; 0x41
  41825e:	4620      	mov	r0, r4
  418260:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
  418262:	2140      	movs	r1, #64	; 0x40
  418264:	4620      	mov	r0, r4
  418266:	47a8      	blx	r5
            break;
  418268:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  41826a:	2100      	movs	r1, #0
  41826c:	4b1e      	ldr	r3, [pc, #120]	; (4182e8 <clear_styles+0x2b0>)
  41826e:	4798      	blx	r3
            break;
  418270:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
  418272:	2100      	movs	r1, #0
  418274:	4d1c      	ldr	r5, [pc, #112]	; (4182e8 <clear_styles+0x2b0>)
  418276:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  418278:	2104      	movs	r1, #4
  41827a:	4620      	mov	r0, r4
  41827c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  41827e:	2103      	movs	r1, #3
  418280:	4620      	mov	r0, r4
  418282:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  418284:	2101      	movs	r1, #1
  418286:	4620      	mov	r0, r4
  418288:	47a8      	blx	r5
            break;
  41828a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
  41828c:	2100      	movs	r1, #0
  41828e:	4d16      	ldr	r5, [pc, #88]	; (4182e8 <clear_styles+0x2b0>)
  418290:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
  418292:	2103      	movs	r1, #3
  418294:	4620      	mov	r0, r4
  418296:	47a8      	blx	r5
            break;
  418298:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  41829a:	2100      	movs	r1, #0
  41829c:	4b12      	ldr	r3, [pc, #72]	; (4182e8 <clear_styles+0x2b0>)
  41829e:	4798      	blx	r3
            break;
  4182a0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
  4182a2:	2100      	movs	r1, #0
  4182a4:	4d10      	ldr	r5, [pc, #64]	; (4182e8 <clear_styles+0x2b0>)
  4182a6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
  4182a8:	2103      	movs	r1, #3
  4182aa:	4620      	mov	r0, r4
  4182ac:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
  4182ae:	2101      	movs	r1, #1
  4182b0:	4620      	mov	r0, r4
  4182b2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  4182b4:	2102      	movs	r1, #2
  4182b6:	4620      	mov	r0, r4
  4182b8:	47a8      	blx	r5
            break;
  4182ba:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
  4182bc:	2100      	movs	r1, #0
  4182be:	4d0a      	ldr	r5, [pc, #40]	; (4182e8 <clear_styles+0x2b0>)
  4182c0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
  4182c2:	2101      	movs	r1, #1
  4182c4:	4620      	mov	r0, r4
  4182c6:	47a8      	blx	r5
            break;
  4182c8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
  4182ca:	2100      	movs	r1, #0
  4182cc:	4b06      	ldr	r3, [pc, #24]	; (4182e8 <clear_styles+0x2b0>)
  4182ce:	4798      	blx	r3
            break;
  4182d0:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
  4182d2:	2100      	movs	r1, #0
  4182d4:	4d04      	ldr	r5, [pc, #16]	; (4182e8 <clear_styles+0x2b0>)
  4182d6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
  4182d8:	2101      	movs	r1, #1
  4182da:	4620      	mov	r0, r4
  4182dc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
  4182de:	2102      	movs	r1, #2
  4182e0:	4620      	mov	r0, r4
  4182e2:	47a8      	blx	r5
  4182e4:	bd38      	pop	{r3, r4, r5, pc}
  4182e6:	bf00      	nop
  4182e8:	00405cd5 	.word	0x00405cd5

004182ec <lv_theme_set_act>:
    act_theme = th;
  4182ec:	4b01      	ldr	r3, [pc, #4]	; (4182f4 <lv_theme_set_act+0x8>)
  4182ee:	6018      	str	r0, [r3, #0]
  4182f0:	4770      	bx	lr
  4182f2:	bf00      	nop
  4182f4:	2041481c 	.word	0x2041481c

004182f8 <lv_theme_apply>:
{
  4182f8:	b538      	push	{r3, r4, r5, lr}
  4182fa:	4604      	mov	r4, r0
  4182fc:	460d      	mov	r5, r1
    clear_styles(obj, name);
  4182fe:	4b04      	ldr	r3, [pc, #16]	; (418310 <lv_theme_apply+0x18>)
  418300:	4798      	blx	r3
    apply_theme(act_theme, obj, name);
  418302:	462a      	mov	r2, r5
  418304:	4621      	mov	r1, r4
  418306:	4b03      	ldr	r3, [pc, #12]	; (418314 <lv_theme_apply+0x1c>)
  418308:	6818      	ldr	r0, [r3, #0]
  41830a:	4b03      	ldr	r3, [pc, #12]	; (418318 <lv_theme_apply+0x20>)
  41830c:	4798      	blx	r3
  41830e:	bd38      	pop	{r3, r4, r5, pc}
  418310:	00418039 	.word	0x00418039
  418314:	2041481c 	.word	0x2041481c
  418318:	00418009 	.word	0x00418009

0041831c <lv_theme_get_font_normal>:
    return act_theme->font_normal;
  41831c:	4b01      	ldr	r3, [pc, #4]	; (418324 <lv_theme_get_font_normal+0x8>)
  41831e:	681b      	ldr	r3, [r3, #0]
}
  418320:	6958      	ldr	r0, [r3, #20]
  418322:	4770      	bx	lr
  418324:	2041481c 	.word	0x2041481c

00418328 <theme_apply>:

    return &theme;
}

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  418328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41832c:	460c      	mov	r4, r1
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
  41832e:	3a01      	subs	r2, #1
  418330:	2a27      	cmp	r2, #39	; 0x27
  418332:	d831      	bhi.n	418398 <theme_apply+0x70>
  418334:	e8df f012 	tbh	[pc, r2, lsl #1]
  418338:	00370028 	.word	0x00370028
  41833c:	008800ae 	.word	0x008800ae
  418340:	0055004b 	.word	0x0055004b
  418344:	003002af 	.word	0x003002af
  418348:	01fd00fd 	.word	0x01fd00fd
  41834c:	02cb0041 	.word	0x02cb0041
  418350:	02ea01d3 	.word	0x02ea01d3
  418354:	00300030 	.word	0x00300030
  418358:	0030006f 	.word	0x0030006f
  41835c:	00300131 	.word	0x00300131
  418360:	01c901b4 	.word	0x01c901b4
  418364:	011202db 	.word	0x011202db
  418368:	01af0121 	.word	0x01af0121
  41836c:	019a013b 	.word	0x019a013b
  418370:	028500e2 	.word	0x028500e2
  418374:	00d202a0 	.word	0x00d202a0
  418378:	02270098 	.word	0x02270098
  41837c:	017b0160 	.word	0x017b0160
  418380:	01850264 	.word	0x01850264
  418384:	025a023f 	.word	0x025a023f
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  418388:	2100      	movs	r1, #0
  41838a:	4620      	mov	r0, r4
  41838c:	4b96      	ldr	r3, [pc, #600]	; (4185e8 <theme_apply+0x2c0>)
  41838e:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
  418390:	4b96      	ldr	r3, [pc, #600]	; (4185ec <theme_apply+0x2c4>)
  418392:	6819      	ldr	r1, [r3, #0]
  418394:	4b96      	ldr	r3, [pc, #600]	; (4185f0 <theme_apply+0x2c8>)
  418396:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  418398:	22ff      	movs	r2, #255	; 0xff
  41839a:	4611      	mov	r1, r2
  41839c:	4620      	mov	r0, r4
  41839e:	4b95      	ldr	r3, [pc, #596]	; (4185f4 <theme_apply+0x2cc>)
  4183a0:	4798      	blx	r3
  4183a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  4183a6:	2100      	movs	r1, #0
  4183a8:	4620      	mov	r0, r4
  4183aa:	4b8f      	ldr	r3, [pc, #572]	; (4185e8 <theme_apply+0x2c0>)
  4183ac:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  4183ae:	4b8f      	ldr	r3, [pc, #572]	; (4185ec <theme_apply+0x2c4>)
  4183b0:	6819      	ldr	r1, [r3, #0]
  4183b2:	3104      	adds	r1, #4
  4183b4:	4b8e      	ldr	r3, [pc, #568]	; (4185f0 <theme_apply+0x2c8>)
  4183b6:	4798      	blx	r3
            break;
  4183b8:	e7ee      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
  4183ba:	2100      	movs	r1, #0
  4183bc:	4620      	mov	r0, r4
  4183be:	4b8a      	ldr	r3, [pc, #552]	; (4185e8 <theme_apply+0x2c0>)
  4183c0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  4183c2:	4b8a      	ldr	r3, [pc, #552]	; (4185ec <theme_apply+0x2c4>)
  4183c4:	6819      	ldr	r1, [r3, #0]
  4183c6:	3104      	adds	r1, #4
  4183c8:	4b89      	ldr	r3, [pc, #548]	; (4185f0 <theme_apply+0x2c8>)
  4183ca:	4798      	blx	r3
            break;
  4183cc:	e7e4      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4183ce:	2100      	movs	r1, #0
  4183d0:	4620      	mov	r0, r4
  4183d2:	4b85      	ldr	r3, [pc, #532]	; (4185e8 <theme_apply+0x2c0>)
  4183d4:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
  4183d6:	4b85      	ldr	r3, [pc, #532]	; (4185ec <theme_apply+0x2c4>)
  4183d8:	6819      	ldr	r1, [r3, #0]
  4183da:	3110      	adds	r1, #16
  4183dc:	4b84      	ldr	r3, [pc, #528]	; (4185f0 <theme_apply+0x2c8>)
  4183de:	4798      	blx	r3
            break;
  4183e0:	e7da      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
  4183e2:	2100      	movs	r1, #0
  4183e4:	4620      	mov	r0, r4
  4183e6:	4f80      	ldr	r7, [pc, #512]	; (4185e8 <theme_apply+0x2c0>)
  4183e8:	47b8      	blx	r7
  4183ea:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4183ec:	4e7f      	ldr	r6, [pc, #508]	; (4185ec <theme_apply+0x2c4>)
  4183ee:	6831      	ldr	r1, [r6, #0]
  4183f0:	3104      	adds	r1, #4
  4183f2:	4d7f      	ldr	r5, [pc, #508]	; (4185f0 <theme_apply+0x2c8>)
  4183f4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4183f6:	6831      	ldr	r1, [r6, #0]
  4183f8:	3118      	adds	r1, #24
  4183fa:	4640      	mov	r0, r8
  4183fc:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
  4183fe:	2101      	movs	r1, #1
  418400:	4620      	mov	r0, r4
  418402:	47b8      	blx	r7
  418404:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418406:	6831      	ldr	r1, [r6, #0]
  418408:	3104      	adds	r1, #4
  41840a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  41840c:	6831      	ldr	r1, [r6, #0]
  41840e:	3108      	adds	r1, #8
  418410:	4638      	mov	r0, r7
  418412:	47a8      	blx	r5
            break;
  418414:	e7c0      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
  418416:	2100      	movs	r1, #0
  418418:	4620      	mov	r0, r4
  41841a:	4f73      	ldr	r7, [pc, #460]	; (4185e8 <theme_apply+0x2c0>)
  41841c:	47b8      	blx	r7
  41841e:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->scr);
  418420:	4e72      	ldr	r6, [pc, #456]	; (4185ec <theme_apply+0x2c4>)
  418422:	6831      	ldr	r1, [r6, #0]
  418424:	4d72      	ldr	r5, [pc, #456]	; (4185f0 <theme_apply+0x2c8>)
  418426:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
  418428:	6831      	ldr	r1, [r6, #0]
  41842a:	316c      	adds	r1, #108	; 0x6c
  41842c:	4640      	mov	r0, r8
  41842e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
  418430:	2101      	movs	r1, #1
  418432:	4620      	mov	r0, r4
  418434:	47b8      	blx	r7
  418436:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418438:	6831      	ldr	r1, [r6, #0]
  41843a:	3104      	adds	r1, #4
  41843c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  41843e:	6831      	ldr	r1, [r6, #0]
  418440:	3108      	adds	r1, #8
  418442:	4638      	mov	r0, r7
  418444:	47a8      	blx	r5
            break;
  418446:	e7a7      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
  418448:	2100      	movs	r1, #0
  41844a:	4620      	mov	r0, r4
  41844c:	4f66      	ldr	r7, [pc, #408]	; (4185e8 <theme_apply+0x2c0>)
  41844e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  418450:	4e66      	ldr	r6, [pc, #408]	; (4185ec <theme_apply+0x2c4>)
  418452:	6831      	ldr	r1, [r6, #0]
  418454:	3128      	adds	r1, #40	; 0x28
  418456:	4d66      	ldr	r5, [pc, #408]	; (4185f0 <theme_apply+0x2c8>)
  418458:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
  41845a:	2101      	movs	r1, #1
  41845c:	4620      	mov	r0, r4
  41845e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  418460:	6831      	ldr	r1, [r6, #0]
  418462:	312c      	adds	r1, #44	; 0x2c
  418464:	47a8      	blx	r5
            break;
  418466:	e797      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
  418468:	2100      	movs	r1, #0
  41846a:	4620      	mov	r0, r4
  41846c:	4f5e      	ldr	r7, [pc, #376]	; (4185e8 <theme_apply+0x2c0>)
  41846e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  418470:	4e5e      	ldr	r6, [pc, #376]	; (4185ec <theme_apply+0x2c4>)
  418472:	6831      	ldr	r1, [r6, #0]
  418474:	3128      	adds	r1, #40	; 0x28
  418476:	4d5e      	ldr	r5, [pc, #376]	; (4185f0 <theme_apply+0x2c8>)
  418478:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
  41847a:	2101      	movs	r1, #1
  41847c:	4620      	mov	r0, r4
  41847e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  418480:	6831      	ldr	r1, [r6, #0]
  418482:	312c      	adds	r1, #44	; 0x2c
  418484:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
  418486:	2102      	movs	r1, #2
  418488:	4620      	mov	r0, r4
  41848a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
  41848c:	6831      	ldr	r1, [r6, #0]
  41848e:	31a0      	adds	r1, #160	; 0xa0
  418490:	47a8      	blx	r5
            break;
  418492:	e781      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
  418494:	2100      	movs	r1, #0
  418496:	4620      	mov	r0, r4
  418498:	4f53      	ldr	r7, [pc, #332]	; (4185e8 <theme_apply+0x2c0>)
  41849a:	47b8      	blx	r7
  41849c:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41849e:	4e53      	ldr	r6, [pc, #332]	; (4185ec <theme_apply+0x2c4>)
  4184a0:	6831      	ldr	r1, [r6, #0]
  4184a2:	3104      	adds	r1, #4
  4184a4:	4d52      	ldr	r5, [pc, #328]	; (4185f0 <theme_apply+0x2c8>)
  4184a6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
  4184a8:	6831      	ldr	r1, [r6, #0]
  4184aa:	3120      	adds	r1, #32
  4184ac:	4640      	mov	r0, r8
  4184ae:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
  4184b0:	2101      	movs	r1, #1
  4184b2:	4620      	mov	r0, r4
  4184b4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  4184b6:	6831      	ldr	r1, [r6, #0]
  4184b8:	311c      	adds	r1, #28
  4184ba:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
  4184bc:	2102      	movs	r1, #2
  4184be:	4620      	mov	r0, r4
  4184c0:	47b8      	blx	r7
  4184c2:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4184c4:	6831      	ldr	r1, [r6, #0]
  4184c6:	3104      	adds	r1, #4
  4184c8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4184ca:	6831      	ldr	r1, [r6, #0]
  4184cc:	3108      	adds	r1, #8
  4184ce:	4638      	mov	r0, r7
  4184d0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_knob);
  4184d2:	6831      	ldr	r1, [r6, #0]
  4184d4:	3124      	adds	r1, #36	; 0x24
  4184d6:	4638      	mov	r0, r7
  4184d8:	47a8      	blx	r5
            break;
  4184da:	e75d      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
  4184dc:	2100      	movs	r1, #0
  4184de:	4620      	mov	r0, r4
  4184e0:	4f41      	ldr	r7, [pc, #260]	; (4185e8 <theme_apply+0x2c0>)
  4184e2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
  4184e4:	4e41      	ldr	r6, [pc, #260]	; (4185ec <theme_apply+0x2c4>)
  4184e6:	6831      	ldr	r1, [r6, #0]
  4184e8:	3120      	adds	r1, #32
  4184ea:	4d41      	ldr	r5, [pc, #260]	; (4185f0 <theme_apply+0x2c8>)
  4184ec:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
  4184ee:	2101      	movs	r1, #1
  4184f0:	4620      	mov	r0, r4
  4184f2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  4184f4:	6831      	ldr	r1, [r6, #0]
  4184f6:	311c      	adds	r1, #28
  4184f8:	47a8      	blx	r5
            break;
  4184fa:	e74d      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
  4184fc:	2100      	movs	r1, #0
  4184fe:	4620      	mov	r0, r4
  418500:	4f39      	ldr	r7, [pc, #228]	; (4185e8 <theme_apply+0x2c0>)
  418502:	47b8      	blx	r7
  418504:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
  418506:	4e39      	ldr	r6, [pc, #228]	; (4185ec <theme_apply+0x2c4>)
  418508:	6831      	ldr	r1, [r6, #0]
  41850a:	3128      	adds	r1, #40	; 0x28
  41850c:	4d38      	ldr	r5, [pc, #224]	; (4185f0 <theme_apply+0x2c8>)
  41850e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
  418510:	6831      	ldr	r1, [r6, #0]
  418512:	3198      	adds	r1, #152	; 0x98
  418514:	4640      	mov	r0, r8
  418516:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
  418518:	2101      	movs	r1, #1
  41851a:	4620      	mov	r0, r4
  41851c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  41851e:	6831      	ldr	r1, [r6, #0]
  418520:	312c      	adds	r1, #44	; 0x2c
  418522:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
  418524:	2102      	movs	r1, #2
  418526:	4620      	mov	r0, r4
  418528:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
  41852a:	6831      	ldr	r1, [r6, #0]
  41852c:	3194      	adds	r1, #148	; 0x94
  41852e:	47a8      	blx	r5
            break;
  418530:	e732      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
  418532:	2100      	movs	r1, #0
  418534:	4620      	mov	r0, r4
  418536:	4f2c      	ldr	r7, [pc, #176]	; (4185e8 <theme_apply+0x2c0>)
  418538:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
  41853a:	4e2c      	ldr	r6, [pc, #176]	; (4185ec <theme_apply+0x2c4>)
  41853c:	6831      	ldr	r1, [r6, #0]
  41853e:	3150      	adds	r1, #80	; 0x50
  418540:	4d2b      	ldr	r5, [pc, #172]	; (4185f0 <theme_apply+0x2c8>)
  418542:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
  418544:	2140      	movs	r1, #64	; 0x40
  418546:	4620      	mov	r0, r4
  418548:	47b8      	blx	r7
  41854a:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
  41854c:	6831      	ldr	r1, [r6, #0]
  41854e:	3110      	adds	r1, #16
  418550:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
  418552:	6831      	ldr	r1, [r6, #0]
  418554:	3154      	adds	r1, #84	; 0x54
  418556:	4638      	mov	r0, r7
  418558:	47a8      	blx	r5
            break;
  41855a:	e71d      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
  41855c:	2100      	movs	r1, #0
  41855e:	4620      	mov	r0, r4
  418560:	4b21      	ldr	r3, [pc, #132]	; (4185e8 <theme_apply+0x2c0>)
  418562:	4798      	blx	r3
  418564:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418566:	4e21      	ldr	r6, [pc, #132]	; (4185ec <theme_apply+0x2c4>)
  418568:	6831      	ldr	r1, [r6, #0]
  41856a:	3104      	adds	r1, #4
  41856c:	4d20      	ldr	r5, [pc, #128]	; (4185f0 <theme_apply+0x2c8>)
  41856e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
  418570:	6831      	ldr	r1, [r6, #0]
  418572:	3180      	adds	r1, #128	; 0x80
  418574:	4638      	mov	r0, r7
  418576:	47a8      	blx	r5
            break;
  418578:	e70e      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  41857a:	2140      	movs	r1, #64	; 0x40
  41857c:	4620      	mov	r0, r4
  41857e:	4f1a      	ldr	r7, [pc, #104]	; (4185e8 <theme_apply+0x2c0>)
  418580:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
  418582:	4e1a      	ldr	r6, [pc, #104]	; (4185ec <theme_apply+0x2c4>)
  418584:	6831      	ldr	r1, [r6, #0]
  418586:	3118      	adds	r1, #24
  418588:	4d19      	ldr	r5, [pc, #100]	; (4185f0 <theme_apply+0x2c8>)
  41858a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
  41858c:	2141      	movs	r1, #65	; 0x41
  41858e:	4620      	mov	r0, r4
  418590:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
  418592:	6831      	ldr	r1, [r6, #0]
  418594:	3110      	adds	r1, #16
  418596:	47a8      	blx	r5
            break;
  418598:	e6fe      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
  41859a:	2100      	movs	r1, #0
  41859c:	4620      	mov	r0, r4
  41859e:	4b12      	ldr	r3, [pc, #72]	; (4185e8 <theme_apply+0x2c0>)
  4185a0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
  4185a2:	4b12      	ldr	r3, [pc, #72]	; (4185ec <theme_apply+0x2c4>)
  4185a4:	6819      	ldr	r1, [r3, #0]
  4185a6:	3170      	adds	r1, #112	; 0x70
  4185a8:	4b11      	ldr	r3, [pc, #68]	; (4185f0 <theme_apply+0x2c8>)
  4185aa:	4798      	blx	r3
            break;
  4185ac:	e6f4      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
  4185ae:	2100      	movs	r1, #0
  4185b0:	4620      	mov	r0, r4
  4185b2:	4f0d      	ldr	r7, [pc, #52]	; (4185e8 <theme_apply+0x2c0>)
  4185b4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  4185b6:	4e0d      	ldr	r6, [pc, #52]	; (4185ec <theme_apply+0x2c4>)
  4185b8:	6831      	ldr	r1, [r6, #0]
  4185ba:	3104      	adds	r1, #4
  4185bc:	4d0c      	ldr	r5, [pc, #48]	; (4185f0 <theme_apply+0x2c8>)
  4185be:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4185c0:	2140      	movs	r1, #64	; 0x40
  4185c2:	4620      	mov	r0, r4
  4185c4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
  4185c6:	6831      	ldr	r1, [r6, #0]
  4185c8:	3114      	adds	r1, #20
  4185ca:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  4185cc:	2101      	movs	r1, #1
  4185ce:	4620      	mov	r0, r4
  4185d0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4185d2:	6831      	ldr	r1, [r6, #0]
  4185d4:	3184      	adds	r1, #132	; 0x84
  4185d6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
  4185d8:	2102      	movs	r1, #2
  4185da:	4620      	mov	r0, r4
  4185dc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  4185de:	6831      	ldr	r1, [r6, #0]
  4185e0:	3188      	adds	r1, #136	; 0x88
  4185e2:	47a8      	blx	r5
            break;
  4185e4:	e6d8      	b.n	418398 <theme_apply+0x70>
  4185e6:	bf00      	nop
  4185e8:	00405c0d 	.word	0x00405c0d
  4185ec:	20414824 	.word	0x20414824
  4185f0:	00409eb5 	.word	0x00409eb5
  4185f4:	00407861 	.word	0x00407861
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
  4185f8:	2100      	movs	r1, #0
  4185fa:	4620      	mov	r0, r4
  4185fc:	4f9b      	ldr	r7, [pc, #620]	; (41886c <theme_apply+0x544>)
  4185fe:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  418600:	4e9b      	ldr	r6, [pc, #620]	; (418870 <theme_apply+0x548>)
  418602:	6831      	ldr	r1, [r6, #0]
  418604:	4d9b      	ldr	r5, [pc, #620]	; (418874 <theme_apply+0x54c>)
  418606:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  418608:	2141      	movs	r1, #65	; 0x41
  41860a:	4620      	mov	r0, r4
  41860c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  41860e:	6831      	ldr	r1, [r6, #0]
  418610:	31ac      	adds	r1, #172	; 0xac
  418612:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
  418614:	2143      	movs	r1, #67	; 0x43
  418616:	4620      	mov	r0, r4
  418618:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_indic);
  41861a:	6831      	ldr	r1, [r6, #0]
  41861c:	31b0      	adds	r1, #176	; 0xb0
  41861e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  418620:	2142      	movs	r1, #66	; 0x42
  418622:	4620      	mov	r0, r4
  418624:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns);
  418626:	6831      	ldr	r1, [r6, #0]
  418628:	31a8      	adds	r1, #168	; 0xa8
  41862a:	47a8      	blx	r5
            break;
  41862c:	e6b4      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  41862e:	2140      	movs	r1, #64	; 0x40
  418630:	4620      	mov	r0, r4
  418632:	4b8e      	ldr	r3, [pc, #568]	; (41886c <theme_apply+0x544>)
  418634:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  418636:	4b8e      	ldr	r3, [pc, #568]	; (418870 <theme_apply+0x548>)
  418638:	6819      	ldr	r1, [r3, #0]
  41863a:	31b4      	adds	r1, #180	; 0xb4
  41863c:	4b8d      	ldr	r3, [pc, #564]	; (418874 <theme_apply+0x54c>)
  41863e:	4798      	blx	r3
            break;
  418640:	e6aa      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
  418642:	2100      	movs	r1, #0
  418644:	4620      	mov	r0, r4
  418646:	4f89      	ldr	r7, [pc, #548]	; (41886c <theme_apply+0x544>)
  418648:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  41864a:	4e89      	ldr	r6, [pc, #548]	; (418870 <theme_apply+0x548>)
  41864c:	6831      	ldr	r1, [r6, #0]
  41864e:	4d89      	ldr	r5, [pc, #548]	; (418874 <theme_apply+0x54c>)
  418650:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  418652:	2101      	movs	r1, #1
  418654:	4620      	mov	r0, r4
  418656:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  418658:	6831      	ldr	r1, [r6, #0]
  41865a:	3184      	adds	r1, #132	; 0x84
  41865c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  41865e:	2102      	movs	r1, #2
  418660:	4620      	mov	r0, r4
  418662:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  418664:	6831      	ldr	r1, [r6, #0]
  418666:	3188      	adds	r1, #136	; 0x88
  418668:	47a8      	blx	r5
            break;
  41866a:	e695      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
  41866c:	2100      	movs	r1, #0
  41866e:	4620      	mov	r0, r4
  418670:	4f7e      	ldr	r7, [pc, #504]	; (41886c <theme_apply+0x544>)
  418672:	47b8      	blx	r7
  418674:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  418676:	4e7e      	ldr	r6, [pc, #504]	; (418870 <theme_apply+0x548>)
  418678:	6831      	ldr	r1, [r6, #0]
  41867a:	3104      	adds	r1, #4
  41867c:	4d7d      	ldr	r5, [pc, #500]	; (418874 <theme_apply+0x54c>)
  41867e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
  418680:	6831      	ldr	r1, [r6, #0]
  418682:	318c      	adds	r1, #140	; 0x8c
  418684:	4640      	mov	r0, r8
  418686:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
  418688:	2103      	movs	r1, #3
  41868a:	4620      	mov	r0, r4
  41868c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
  41868e:	6831      	ldr	r1, [r6, #0]
  418690:	3190      	adds	r1, #144	; 0x90
  418692:	47a8      	blx	r5
            break;
  418694:	e680      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
  418696:	2100      	movs	r1, #0
  418698:	4620      	mov	r0, r4
  41869a:	4b74      	ldr	r3, [pc, #464]	; (41886c <theme_apply+0x544>)
  41869c:	4798      	blx	r3
            break;
  41869e:	e67b      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
  4186a0:	2100      	movs	r1, #0
  4186a2:	4620      	mov	r0, r4
  4186a4:	4f71      	ldr	r7, [pc, #452]	; (41886c <theme_apply+0x544>)
  4186a6:	47b8      	blx	r7
  4186a8:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4186aa:	4e71      	ldr	r6, [pc, #452]	; (418870 <theme_apply+0x548>)
  4186ac:	6831      	ldr	r1, [r6, #0]
  4186ae:	3104      	adds	r1, #4
  4186b0:	4d70      	ldr	r5, [pc, #448]	; (418874 <theme_apply+0x54c>)
  4186b2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
  4186b4:	6831      	ldr	r1, [r6, #0]
  4186b6:	3178      	adds	r1, #120	; 0x78
  4186b8:	4640      	mov	r0, r8
  4186ba:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
  4186bc:	2101      	movs	r1, #1
  4186be:	4620      	mov	r0, r4
  4186c0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4186c2:	6831      	ldr	r1, [r6, #0]
  4186c4:	3184      	adds	r1, #132	; 0x84
  4186c6:	47a8      	blx	r5
            break;
  4186c8:	e666      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4186ca:	2100      	movs	r1, #0
  4186cc:	4620      	mov	r0, r4
  4186ce:	4b67      	ldr	r3, [pc, #412]	; (41886c <theme_apply+0x544>)
  4186d0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
  4186d2:	4b67      	ldr	r3, [pc, #412]	; (418870 <theme_apply+0x548>)
  4186d4:	6819      	ldr	r1, [r3, #0]
  4186d6:	317c      	adds	r1, #124	; 0x7c
  4186d8:	4b66      	ldr	r3, [pc, #408]	; (418874 <theme_apply+0x54c>)
  4186da:	4798      	blx	r3
            break;
  4186dc:	e65c      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
  4186de:	2100      	movs	r1, #0
  4186e0:	4620      	mov	r0, r4
  4186e2:	4f62      	ldr	r7, [pc, #392]	; (41886c <theme_apply+0x544>)
  4186e4:	47b8      	blx	r7
  4186e6:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4186e8:	4e61      	ldr	r6, [pc, #388]	; (418870 <theme_apply+0x548>)
  4186ea:	6831      	ldr	r1, [r6, #0]
  4186ec:	3104      	adds	r1, #4
  4186ee:	4d61      	ldr	r5, [pc, #388]	; (418874 <theme_apply+0x54c>)
  4186f0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4186f2:	6831      	ldr	r1, [r6, #0]
  4186f4:	3108      	adds	r1, #8
  4186f6:	4640      	mov	r0, r8
  4186f8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4186fa:	6831      	ldr	r1, [r6, #0]
  4186fc:	3118      	adds	r1, #24
  4186fe:	4640      	mov	r0, r8
  418700:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
  418702:	2140      	movs	r1, #64	; 0x40
  418704:	4620      	mov	r0, r4
  418706:	47b8      	blx	r7
  418708:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41870a:	6831      	ldr	r1, [r6, #0]
  41870c:	3104      	adds	r1, #4
  41870e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
  418710:	6831      	ldr	r1, [r6, #0]
  418712:	3158      	adds	r1, #88	; 0x58
  418714:	4640      	mov	r0, r8
  418716:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  418718:	2141      	movs	r1, #65	; 0x41
  41871a:	4620      	mov	r0, r4
  41871c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41871e:	6831      	ldr	r1, [r6, #0]
  418720:	3184      	adds	r1, #132	; 0x84
  418722:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  418724:	2142      	movs	r1, #66	; 0x42
  418726:	4620      	mov	r0, r4
  418728:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
  41872a:	6831      	ldr	r1, [r6, #0]
  41872c:	315c      	adds	r1, #92	; 0x5c
  41872e:	47a8      	blx	r5
            break;
  418730:	e632      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
  418732:	2100      	movs	r1, #0
  418734:	4620      	mov	r0, r4
  418736:	4f4d      	ldr	r7, [pc, #308]	; (41886c <theme_apply+0x544>)
  418738:	47b8      	blx	r7
  41873a:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41873c:	4e4c      	ldr	r6, [pc, #304]	; (418870 <theme_apply+0x548>)
  41873e:	6831      	ldr	r1, [r6, #0]
  418740:	3104      	adds	r1, #4
  418742:	4d4c      	ldr	r5, [pc, #304]	; (418874 <theme_apply+0x54c>)
  418744:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
  418746:	6831      	ldr	r1, [r6, #0]
  418748:	3144      	adds	r1, #68	; 0x44
  41874a:	4640      	mov	r0, r8
  41874c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  41874e:	6831      	ldr	r1, [r6, #0]
  418750:	3118      	adds	r1, #24
  418752:	4640      	mov	r0, r8
  418754:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
  418756:	2101      	movs	r1, #1
  418758:	4620      	mov	r0, r4
  41875a:	47b8      	blx	r7
  41875c:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->pad_small);
  41875e:	6831      	ldr	r1, [r6, #0]
  418760:	3118      	adds	r1, #24
  418762:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  418764:	6831      	ldr	r1, [r6, #0]
  418766:	3148      	adds	r1, #72	; 0x48
  418768:	4640      	mov	r0, r8
  41876a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
  41876c:	2103      	movs	r1, #3
  41876e:	4620      	mov	r0, r4
  418770:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  418772:	6831      	ldr	r1, [r6, #0]
  418774:	3148      	adds	r1, #72	; 0x48
  418776:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
  418778:	2102      	movs	r1, #2
  41877a:	4620      	mov	r0, r4
  41877c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
  41877e:	6831      	ldr	r1, [r6, #0]
  418780:	314c      	adds	r1, #76	; 0x4c
  418782:	47a8      	blx	r5
            break;
  418784:	e608      	b.n	418398 <theme_apply+0x70>
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
  418786:	2100      	movs	r1, #0
  418788:	4620      	mov	r0, r4
  41878a:	4b38      	ldr	r3, [pc, #224]	; (41886c <theme_apply+0x544>)
  41878c:	4798      	blx	r3
                _lv_style_list_add_style(list, &styles->bg);
  41878e:	4b38      	ldr	r3, [pc, #224]	; (418870 <theme_apply+0x548>)
  418790:	6819      	ldr	r1, [r3, #0]
  418792:	3104      	adds	r1, #4
  418794:	4b37      	ldr	r3, [pc, #220]	; (418874 <theme_apply+0x54c>)
  418796:	4798      	blx	r3
                int idx = 1; /* start value should be 1, not zero, since cell styles
  418798:	2501      	movs	r5, #1
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  41879a:	e009      	b.n	4187b0 <theme_apply+0x488>
                    list = lv_obj_get_style_list(obj, idx);
  41879c:	b2e9      	uxtb	r1, r5
  41879e:	4620      	mov	r0, r4
  4187a0:	4b32      	ldr	r3, [pc, #200]	; (41886c <theme_apply+0x544>)
  4187a2:	4798      	blx	r3
                    _lv_style_list_add_style(list, &styles->table_cell);
  4187a4:	4b32      	ldr	r3, [pc, #200]	; (418870 <theme_apply+0x548>)
  4187a6:	6819      	ldr	r1, [r3, #0]
  4187a8:	31a4      	adds	r1, #164	; 0xa4
  4187aa:	4b32      	ldr	r3, [pc, #200]	; (418874 <theme_apply+0x54c>)
  4187ac:	4798      	blx	r3
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  4187ae:	3501      	adds	r5, #1
  4187b0:	2d04      	cmp	r5, #4
  4187b2:	ddf3      	ble.n	41879c <theme_apply+0x474>
  4187b4:	e5f0      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
  4187b6:	2100      	movs	r1, #0
  4187b8:	4620      	mov	r0, r4
  4187ba:	4f2c      	ldr	r7, [pc, #176]	; (41886c <theme_apply+0x544>)
  4187bc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  4187be:	4e2c      	ldr	r6, [pc, #176]	; (418870 <theme_apply+0x548>)
  4187c0:	6831      	ldr	r1, [r6, #0]
  4187c2:	4d2c      	ldr	r5, [pc, #176]	; (418874 <theme_apply+0x54c>)
  4187c4:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
  4187c6:	2142      	movs	r1, #66	; 0x42
  4187c8:	4620      	mov	r0, r4
  4187ca:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4187cc:	6831      	ldr	r1, [r6, #0]
  4187ce:	3184      	adds	r1, #132	; 0x84
  4187d0:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  4187d2:	2141      	movs	r1, #65	; 0x41
  4187d4:	4620      	mov	r0, r4
  4187d6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  4187d8:	6831      	ldr	r1, [r6, #0]
  4187da:	31b4      	adds	r1, #180	; 0xb4
  4187dc:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
  4187de:	2140      	movs	r1, #64	; 0x40
  4187e0:	4620      	mov	r0, r4
  4187e2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  4187e4:	6831      	ldr	r1, [r6, #0]
  4187e6:	31ac      	adds	r1, #172	; 0xac
  4187e8:	47a8      	blx	r5
            break;
  4187ea:	e5d5      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4187ec:	2100      	movs	r1, #0
  4187ee:	4620      	mov	r0, r4
  4187f0:	4b1e      	ldr	r3, [pc, #120]	; (41886c <theme_apply+0x544>)
  4187f2:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
  4187f4:	4b1e      	ldr	r3, [pc, #120]	; (418870 <theme_apply+0x548>)
  4187f6:	6819      	ldr	r1, [r3, #0]
  4187f8:	31a8      	adds	r1, #168	; 0xa8
  4187fa:	4b1e      	ldr	r3, [pc, #120]	; (418874 <theme_apply+0x54c>)
  4187fc:	4798      	blx	r3
            break;
  4187fe:	e5cb      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
  418800:	2100      	movs	r1, #0
  418802:	4620      	mov	r0, r4
  418804:	4f19      	ldr	r7, [pc, #100]	; (41886c <theme_apply+0x544>)
  418806:	47b8      	blx	r7
  418808:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41880a:	4e19      	ldr	r6, [pc, #100]	; (418870 <theme_apply+0x548>)
  41880c:	6831      	ldr	r1, [r6, #0]
  41880e:	3104      	adds	r1, #4
  418810:	4d18      	ldr	r5, [pc, #96]	; (418874 <theme_apply+0x54c>)
  418812:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  418814:	6831      	ldr	r1, [r6, #0]
  418816:	3118      	adds	r1, #24
  418818:	4640      	mov	r0, r8
  41881a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  41881c:	2104      	movs	r1, #4
  41881e:	4620      	mov	r0, r4
  418820:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
  418822:	6831      	ldr	r1, [r6, #0]
  418824:	31bc      	adds	r1, #188	; 0xbc
  418826:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  418828:	2103      	movs	r1, #3
  41882a:	4620      	mov	r0, r4
  41882c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
  41882e:	6831      	ldr	r1, [r6, #0]
  418830:	31b8      	adds	r1, #184	; 0xb8
  418832:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  418834:	2101      	movs	r1, #1
  418836:	4620      	mov	r0, r4
  418838:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41883a:	6831      	ldr	r1, [r6, #0]
  41883c:	3184      	adds	r1, #132	; 0x84
  41883e:	47a8      	blx	r5
            break;
  418840:	e5aa      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
  418842:	2100      	movs	r1, #0
  418844:	4620      	mov	r0, r4
  418846:	4f09      	ldr	r7, [pc, #36]	; (41886c <theme_apply+0x544>)
  418848:	47b8      	blx	r7
  41884a:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41884c:	4e08      	ldr	r6, [pc, #32]	; (418870 <theme_apply+0x548>)
  41884e:	6831      	ldr	r1, [r6, #0]
  418850:	3104      	adds	r1, #4
  418852:	4d08      	ldr	r5, [pc, #32]	; (418874 <theme_apply+0x54c>)
  418854:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  418856:	6831      	ldr	r1, [r6, #0]
  418858:	3118      	adds	r1, #24
  41885a:	4640      	mov	r0, r8
  41885c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
  41885e:	2103      	movs	r1, #3
  418860:	4620      	mov	r0, r4
  418862:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
  418864:	6831      	ldr	r1, [r6, #0]
  418866:	319c      	adds	r1, #156	; 0x9c
  418868:	47a8      	blx	r5
            break;
  41886a:	e595      	b.n	418398 <theme_apply+0x70>
  41886c:	00405c0d 	.word	0x00405c0d
  418870:	20414824 	.word	0x20414824
  418874:	00409eb5 	.word	0x00409eb5
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  418878:	2100      	movs	r1, #0
  41887a:	4620      	mov	r0, r4
  41887c:	4b31      	ldr	r3, [pc, #196]	; (418944 <theme_apply+0x61c>)
  41887e:	4798      	blx	r3
  418880:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418882:	4e31      	ldr	r6, [pc, #196]	; (418948 <theme_apply+0x620>)
  418884:	6831      	ldr	r1, [r6, #0]
  418886:	3104      	adds	r1, #4
  418888:	4d30      	ldr	r5, [pc, #192]	; (41894c <theme_apply+0x624>)
  41888a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  41888c:	6831      	ldr	r1, [r6, #0]
  41888e:	3108      	adds	r1, #8
  418890:	4638      	mov	r0, r7
  418892:	47a8      	blx	r5
            break;
  418894:	e580      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
  418896:	2100      	movs	r1, #0
  418898:	4620      	mov	r0, r4
  41889a:	4f2a      	ldr	r7, [pc, #168]	; (418944 <theme_apply+0x61c>)
  41889c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  41889e:	4e2a      	ldr	r6, [pc, #168]	; (418948 <theme_apply+0x620>)
  4188a0:	6831      	ldr	r1, [r6, #0]
  4188a2:	3104      	adds	r1, #4
  4188a4:	4d29      	ldr	r5, [pc, #164]	; (41894c <theme_apply+0x624>)
  4188a6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
  4188a8:	2103      	movs	r1, #3
  4188aa:	4620      	mov	r0, r4
  4188ac:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
  4188ae:	6831      	ldr	r1, [r6, #0]
  4188b0:	3130      	adds	r1, #48	; 0x30
  4188b2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
  4188b4:	2101      	movs	r1, #1
  4188b6:	4620      	mov	r0, r4
  4188b8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
  4188ba:	6831      	ldr	r1, [r6, #0]
  4188bc:	3134      	adds	r1, #52	; 0x34
  4188be:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  4188c0:	2102      	movs	r1, #2
  4188c2:	4620      	mov	r0, r4
  4188c4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
  4188c6:	6831      	ldr	r1, [r6, #0]
  4188c8:	3138      	adds	r1, #56	; 0x38
  4188ca:	47a8      	blx	r5
            break;
  4188cc:	e564      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
  4188ce:	2100      	movs	r1, #0
  4188d0:	4620      	mov	r0, r4
  4188d2:	4f1c      	ldr	r7, [pc, #112]	; (418944 <theme_apply+0x61c>)
  4188d4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
  4188d6:	4e1c      	ldr	r6, [pc, #112]	; (418948 <theme_apply+0x620>)
  4188d8:	6831      	ldr	r1, [r6, #0]
  4188da:	313c      	adds	r1, #60	; 0x3c
  4188dc:	4d1b      	ldr	r5, [pc, #108]	; (41894c <theme_apply+0x624>)
  4188de:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
  4188e0:	2101      	movs	r1, #1
  4188e2:	4620      	mov	r0, r4
  4188e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
  4188e6:	6831      	ldr	r1, [r6, #0]
  4188e8:	3140      	adds	r1, #64	; 0x40
  4188ea:	47a8      	blx	r5
            break;
  4188ec:	e554      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
  4188ee:	2100      	movs	r1, #0
  4188f0:	4620      	mov	r0, r4
  4188f2:	4b14      	ldr	r3, [pc, #80]	; (418944 <theme_apply+0x61c>)
  4188f4:	4798      	blx	r3
  4188f6:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4188f8:	4e13      	ldr	r6, [pc, #76]	; (418948 <theme_apply+0x620>)
  4188fa:	6831      	ldr	r1, [r6, #0]
  4188fc:	3104      	adds	r1, #4
  4188fe:	4d13      	ldr	r5, [pc, #76]	; (41894c <theme_apply+0x624>)
  418900:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
  418902:	6831      	ldr	r1, [r6, #0]
  418904:	3174      	adds	r1, #116	; 0x74
  418906:	4638      	mov	r0, r7
  418908:	47a8      	blx	r5
            break;
  41890a:	e545      	b.n	418398 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
  41890c:	2100      	movs	r1, #0
  41890e:	4620      	mov	r0, r4
  418910:	4f0c      	ldr	r7, [pc, #48]	; (418944 <theme_apply+0x61c>)
  418912:	47b8      	blx	r7
  418914:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  418916:	4e0c      	ldr	r6, [pc, #48]	; (418948 <theme_apply+0x620>)
  418918:	6831      	ldr	r1, [r6, #0]
  41891a:	3104      	adds	r1, #4
  41891c:	4d0b      	ldr	r5, [pc, #44]	; (41894c <theme_apply+0x624>)
  41891e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
  418920:	6831      	ldr	r1, [r6, #0]
  418922:	3160      	adds	r1, #96	; 0x60
  418924:	4640      	mov	r0, r8
  418926:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
  418928:	2101      	movs	r1, #1
  41892a:	4620      	mov	r0, r4
  41892c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
  41892e:	6831      	ldr	r1, [r6, #0]
  418930:	3164      	adds	r1, #100	; 0x64
  418932:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
  418934:	2102      	movs	r1, #2
  418936:	4620      	mov	r0, r4
  418938:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
  41893a:	6831      	ldr	r1, [r6, #0]
  41893c:	3168      	adds	r1, #104	; 0x68
  41893e:	47a8      	blx	r5
            break;
  418940:	e52a      	b.n	418398 <theme_apply+0x70>
  418942:	bf00      	nop
  418944:	00405c0d 	.word	0x00405c0d
  418948:	20414824 	.word	0x20414824
  41894c:	00409eb5 	.word	0x00409eb5

00418950 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
  418950:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
  418952:	4b04      	ldr	r3, [pc, #16]	; (418964 <style_init_reset+0x14>)
  418954:	781b      	ldrb	r3, [r3, #0]
  418956:	b913      	cbnz	r3, 41895e <style_init_reset+0xe>
    else lv_style_init(style);
  418958:	4b03      	ldr	r3, [pc, #12]	; (418968 <style_init_reset+0x18>)
  41895a:	4798      	blx	r3
  41895c:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
  41895e:	4b03      	ldr	r3, [pc, #12]	; (41896c <style_init_reset+0x1c>)
  418960:	4798      	blx	r3
  418962:	bd08      	pop	{r3, pc}
  418964:	20414820 	.word	0x20414820
  418968:	00409dd1 	.word	0x00409dd1
  41896c:	00409ff5 	.word	0x00409ff5

00418970 <bar_init>:
{
  418970:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->bar_bg);
  418972:	4c6f      	ldr	r4, [pc, #444]	; (418b30 <bar_init+0x1c0>)
  418974:	6820      	ldr	r0, [r4, #0]
  418976:	3028      	adds	r0, #40	; 0x28
  418978:	4b6e      	ldr	r3, [pc, #440]	; (418b34 <bar_init+0x1c4>)
  41897a:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41897c:	6820      	ldr	r0, [r4, #0]
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41897e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418982:	2101      	movs	r1, #1
  418984:	3028      	adds	r0, #40	; 0x28
  418986:	4b6c      	ldr	r3, [pc, #432]	; (418b38 <bar_init+0x1c8>)
  418988:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41898a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41898c:	22ff      	movs	r2, #255	; 0xff
  41898e:	212c      	movs	r1, #44	; 0x2c
  418990:	3028      	adds	r0, #40	; 0x28
  418992:	4b6a      	ldr	r3, [pc, #424]	; (418b3c <bar_init+0x1cc>)
  418994:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  418996:	6820      	ldr	r0, [r4, #0]
  418998:	3028      	adds	r0, #40	; 0x28
  41899a:	4b69      	ldr	r3, [pc, #420]	; (418b40 <bar_init+0x1d0>)
  41899c:	6a1b      	ldr	r3, [r3, #32]
  41899e:	f013 0f02 	tst.w	r3, #2
  4189a2:	f000 808e 	beq.w	418ac2 <bar_init+0x152>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  4189a6:	f04f 0200 	mov.w	r2, #0
  4189aa:	2306      	movs	r3, #6
  4189ac:	f363 0202 	bfi	r2, r3, #0, #3
  4189b0:	231a      	movs	r3, #26
  4189b2:	f363 02c7 	bfi	r2, r3, #3, #5
  4189b6:	231b      	movs	r3, #27
  4189b8:	f363 220c 	bfi	r2, r3, #8, #5
  4189bc:	2305      	movs	r3, #5
  4189be:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4189c2:	2129      	movs	r1, #41	; 0x29
  4189c4:	4b5f      	ldr	r3, [pc, #380]	; (418b44 <bar_init+0x1d4>)
  4189c6:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4189c8:	4b59      	ldr	r3, [pc, #356]	; (418b30 <bar_init+0x1c0>)
  4189ca:	6818      	ldr	r0, [r3, #0]
  4189cc:	3028      	adds	r0, #40	; 0x28
  4189ce:	4b5c      	ldr	r3, [pc, #368]	; (418b40 <bar_init+0x1d0>)
  4189d0:	6a1b      	ldr	r3, [r3, #32]
  4189d2:	f013 0f02 	tst.w	r3, #2
  4189d6:	f000 8082 	beq.w	418ade <bar_init+0x16e>
  4189da:	f04f 0200 	mov.w	r2, #0
  4189de:	2302      	movs	r3, #2
  4189e0:	f363 0202 	bfi	r2, r3, #0, #3
  4189e4:	2306      	movs	r3, #6
  4189e6:	f363 02c7 	bfi	r2, r3, #3, #5
  4189ea:	2309      	movs	r3, #9
  4189ec:	f363 220c 	bfi	r2, r3, #8, #5
  4189f0:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4189f4:	2179      	movs	r1, #121	; 0x79
  4189f6:	4d53      	ldr	r5, [pc, #332]	; (418b44 <bar_init+0x1d4>)
  4189f8:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
  4189fa:	4c4d      	ldr	r4, [pc, #308]	; (418b30 <bar_init+0x1c0>)
  4189fc:	6820      	ldr	r0, [r4, #0]
  4189fe:	4e50      	ldr	r6, [pc, #320]	; (418b40 <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  418a00:	89b2      	ldrh	r2, [r6, #12]
  418a02:	2149      	movs	r1, #73	; 0x49
  418a04:	3028      	adds	r0, #40	; 0x28
  418a06:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
  418a08:	6820      	ldr	r0, [r4, #0]
  418a0a:	89f2      	ldrh	r2, [r6, #14]
  418a0c:	f240 4149 	movw	r1, #1097	; 0x449
  418a10:	3028      	adds	r0, #40	; 0x28
  418a12:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  418a14:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  418a16:	2200      	movs	r2, #0
  418a18:	214c      	movs	r1, #76	; 0x4c
  418a1a:	3028      	adds	r0, #40	; 0x28
  418a1c:	4d47      	ldr	r5, [pc, #284]	; (418b3c <bar_init+0x1cc>)
  418a1e:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
  418a20:	6820      	ldr	r0, [r4, #0]
  418a22:	227f      	movs	r2, #127	; 0x7f
  418a24:	f44f 7113 	mov.w	r1, #588	; 0x24c
  418a28:	3028      	adds	r0, #40	; 0x28
  418a2a:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  418a2c:	6824      	ldr	r4, [r4, #0]
  418a2e:	3428      	adds	r4, #40	; 0x28
  418a30:	6a33      	ldr	r3, [r6, #32]
  418a32:	f013 0f20 	tst.w	r3, #32
  418a36:	d055      	beq.n	418ae4 <bar_init+0x174>
  418a38:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  418a3a:	2140      	movs	r1, #64	; 0x40
  418a3c:	4620      	mov	r0, r4
  418a3e:	4d3e      	ldr	r5, [pc, #248]	; (418b38 <bar_init+0x1c8>)
  418a40:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  418a42:	4c3b      	ldr	r4, [pc, #236]	; (418b30 <bar_init+0x1c0>)
  418a44:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  418a46:	2200      	movs	r2, #0
  418a48:	21b0      	movs	r1, #176	; 0xb0
  418a4a:	3028      	adds	r0, #40	; 0x28
  418a4c:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  418a4e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  418a50:	224c      	movs	r2, #76	; 0x4c
  418a52:	21b7      	movs	r1, #183	; 0xb7
  418a54:	3028      	adds	r0, #40	; 0x28
  418a56:	47a8      	blx	r5
    style_init_reset(&styles->bar_indic);
  418a58:	6820      	ldr	r0, [r4, #0]
  418a5a:	302c      	adds	r0, #44	; 0x2c
  418a5c:	4b35      	ldr	r3, [pc, #212]	; (418b34 <bar_init+0x1c4>)
  418a5e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  418a60:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418a62:	22ff      	movs	r2, #255	; 0xff
  418a64:	212c      	movs	r1, #44	; 0x2c
  418a66:	4408      	add	r0, r1
  418a68:	4b34      	ldr	r3, [pc, #208]	; (418b3c <bar_init+0x1cc>)
  418a6a:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418a6c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418a6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418a72:	2101      	movs	r1, #1
  418a74:	302c      	adds	r0, #44	; 0x2c
  418a76:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
  418a78:	6820      	ldr	r0, [r4, #0]
  418a7a:	4d31      	ldr	r5, [pc, #196]	; (418b40 <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418a7c:	89aa      	ldrh	r2, [r5, #12]
  418a7e:	2129      	movs	r1, #41	; 0x29
  418a80:	302c      	adds	r0, #44	; 0x2c
  418a82:	4e30      	ldr	r6, [pc, #192]	; (418b44 <bar_init+0x1d4>)
  418a84:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
  418a86:	6820      	ldr	r0, [r4, #0]
  418a88:	f04f 0200 	mov.w	r2, #0
  418a8c:	2304      	movs	r3, #4
  418a8e:	f363 0202 	bfi	r2, r3, #0, #3
  418a92:	2311      	movs	r3, #17
  418a94:	f363 02c7 	bfi	r2, r3, #3, #5
  418a98:	f363 220c 	bfi	r2, r3, #8, #5
  418a9c:	2302      	movs	r3, #2
  418a9e:	f363 324f 	bfi	r2, r3, #13, #3
  418aa2:	f242 0129 	movw	r1, #8233	; 0x2029
  418aa6:	302c      	adds	r0, #44	; 0x2c
  418aa8:	47b0      	blx	r6
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
  418aaa:	6820      	ldr	r0, [r4, #0]
  418aac:	302c      	adds	r0, #44	; 0x2c
  418aae:	6a2b      	ldr	r3, [r5, #32]
  418ab0:	f013 0f02 	tst.w	r3, #2
  418ab4:	d12d      	bne.n	418b12 <bar_init+0x1a2>
  418ab6:	4b24      	ldr	r3, [pc, #144]	; (418b48 <bar_init+0x1d8>)
  418ab8:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  418aba:	2179      	movs	r1, #121	; 0x79
  418abc:	4b21      	ldr	r3, [pc, #132]	; (418b44 <bar_init+0x1d4>)
  418abe:	4798      	blx	r3
  418ac0:	bd70      	pop	{r4, r5, r6, pc}
  418ac2:	2302      	movs	r3, #2
  418ac4:	f04f 0200 	mov.w	r2, #0
  418ac8:	f363 0202 	bfi	r2, r3, #0, #3
  418acc:	2108      	movs	r1, #8
  418ace:	f361 02c7 	bfi	r2, r1, #3, #5
  418ad2:	2109      	movs	r1, #9
  418ad4:	f361 220c 	bfi	r2, r1, #8, #5
  418ad8:	f363 324f 	bfi	r2, r3, #13, #3
  418adc:	e771      	b.n	4189c2 <bar_init+0x52>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418ade:	4b1a      	ldr	r3, [pc, #104]	; (418b48 <bar_init+0x1d8>)
  418ae0:	881a      	ldrh	r2, [r3, #0]
  418ae2:	e787      	b.n	4189f4 <bar_init+0x84>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  418ae4:	2000      	movs	r0, #0
  418ae6:	4b19      	ldr	r3, [pc, #100]	; (418b4c <bar_init+0x1dc>)
  418ae8:	4798      	blx	r3
  418aea:	3028      	adds	r0, #40	; 0x28
  418aec:	0040      	lsls	r0, r0, #1
  418aee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418af2:	da01      	bge.n	418af8 <bar_init+0x188>
  418af4:	2201      	movs	r2, #1
  418af6:	e7a0      	b.n	418a3a <bar_init+0xca>
  418af8:	2000      	movs	r0, #0
  418afa:	4b14      	ldr	r3, [pc, #80]	; (418b4c <bar_init+0x1dc>)
  418afc:	4798      	blx	r3
  418afe:	3028      	adds	r0, #40	; 0x28
  418b00:	0040      	lsls	r0, r0, #1
  418b02:	4b13      	ldr	r3, [pc, #76]	; (418b50 <bar_init+0x1e0>)
  418b04:	fb83 2300 	smull	r2, r3, r3, r0
  418b08:	17c2      	asrs	r2, r0, #31
  418b0a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b0e:	b212      	sxth	r2, r2
  418b10:	e793      	b.n	418a3a <bar_init+0xca>
  418b12:	f04f 0200 	mov.w	r2, #0
  418b16:	2302      	movs	r3, #2
  418b18:	f363 0202 	bfi	r2, r3, #0, #3
  418b1c:	2308      	movs	r3, #8
  418b1e:	f363 02c7 	bfi	r2, r3, #3, #5
  418b22:	2309      	movs	r3, #9
  418b24:	f363 220c 	bfi	r2, r3, #8, #5
  418b28:	f36f 324f 	bfc	r2, #13, #3
  418b2c:	e7c5      	b.n	418aba <bar_init+0x14a>
  418b2e:	bf00      	nop
  418b30:	20414824 	.word	0x20414824
  418b34:	00418951 	.word	0x00418951
  418b38:	0040a1b9 	.word	0x0040a1b9
  418b3c:	0040a4d9 	.word	0x0040a4d9
  418b40:	20414828 	.word	0x20414828
  418b44:	0040a349 	.word	0x0040a349
  418b48:	0042f86c 	.word	0x0042f86c
  418b4c:	00414d4d 	.word	0x00414d4d
  418b50:	66666667 	.word	0x66666667

00418b54 <slider_init>:
{
  418b54:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
  418b56:	4ca3      	ldr	r4, [pc, #652]	; (418de4 <slider_init+0x290>)
  418b58:	6820      	ldr	r0, [r4, #0]
  418b5a:	3094      	adds	r0, #148	; 0x94
  418b5c:	4ba2      	ldr	r3, [pc, #648]	; (418de8 <slider_init+0x294>)
  418b5e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  418b60:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418b62:	22ff      	movs	r2, #255	; 0xff
  418b64:	212c      	movs	r1, #44	; 0x2c
  418b66:	3094      	adds	r0, #148	; 0x94
  418b68:	4ba0      	ldr	r3, [pc, #640]	; (418dec <slider_init+0x298>)
  418b6a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  418b6c:	6820      	ldr	r0, [r4, #0]
  418b6e:	3094      	adds	r0, #148	; 0x94
  418b70:	4b9f      	ldr	r3, [pc, #636]	; (418df0 <slider_init+0x29c>)
  418b72:	6a1b      	ldr	r3, [r3, #32]
  418b74:	f013 0f02 	tst.w	r3, #2
  418b78:	f000 80ba 	beq.w	418cf0 <slider_init+0x19c>
  418b7c:	4b9c      	ldr	r3, [pc, #624]	; (418df0 <slider_init+0x29c>)
  418b7e:	899a      	ldrh	r2, [r3, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418b80:	2129      	movs	r1, #41	; 0x29
  418b82:	4b9c      	ldr	r3, [pc, #624]	; (418df4 <slider_init+0x2a0>)
  418b84:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418b86:	4b97      	ldr	r3, [pc, #604]	; (418de4 <slider_init+0x290>)
  418b88:	6818      	ldr	r0, [r3, #0]
  418b8a:	3094      	adds	r0, #148	; 0x94
  418b8c:	4b98      	ldr	r3, [pc, #608]	; (418df0 <slider_init+0x29c>)
  418b8e:	6a1b      	ldr	r3, [r3, #32]
  418b90:	f013 0f02 	tst.w	r3, #2
  418b94:	f000 80af 	beq.w	418cf6 <slider_init+0x1a2>
  418b98:	f04f 0200 	mov.w	r2, #0
  418b9c:	2302      	movs	r3, #2
  418b9e:	f363 0202 	bfi	r2, r3, #0, #3
  418ba2:	2306      	movs	r3, #6
  418ba4:	f363 02c7 	bfi	r2, r3, #3, #5
  418ba8:	2309      	movs	r3, #9
  418baa:	f363 220c 	bfi	r2, r3, #8, #5
  418bae:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  418bb2:	2179      	movs	r1, #121	; 0x79
  418bb4:	4b8f      	ldr	r3, [pc, #572]	; (418df4 <slider_init+0x2a0>)
  418bb6:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418bb8:	4c8a      	ldr	r4, [pc, #552]	; (418de4 <slider_init+0x290>)
  418bba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418bbc:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418bc0:	2101      	movs	r1, #1
  418bc2:	3094      	adds	r0, #148	; 0x94
  418bc4:	4b8c      	ldr	r3, [pc, #560]	; (418df8 <slider_init+0x2a4>)
  418bc6:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418bc8:	6824      	ldr	r4, [r4, #0]
  418bca:	3494      	adds	r4, #148	; 0x94
  418bcc:	2000      	movs	r0, #0
  418bce:	4b8b      	ldr	r3, [pc, #556]	; (418dfc <slider_init+0x2a8>)
  418bd0:	4798      	blx	r3
  418bd2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418bd6:	3050      	adds	r0, #80	; 0x50
  418bd8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418bdc:	f280 808e 	bge.w	418cfc <slider_init+0x1a8>
  418be0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418be2:	2112      	movs	r1, #18
  418be4:	4620      	mov	r0, r4
  418be6:	4b84      	ldr	r3, [pc, #528]	; (418df8 <slider_init+0x2a4>)
  418be8:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418bea:	4b7e      	ldr	r3, [pc, #504]	; (418de4 <slider_init+0x290>)
  418bec:	681c      	ldr	r4, [r3, #0]
  418bee:	3494      	adds	r4, #148	; 0x94
  418bf0:	2000      	movs	r0, #0
  418bf2:	4b82      	ldr	r3, [pc, #520]	; (418dfc <slider_init+0x2a8>)
  418bf4:	4798      	blx	r3
  418bf6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418bfa:	3050      	adds	r0, #80	; 0x50
  418bfc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c00:	f280 808a 	bge.w	418d18 <slider_init+0x1c4>
  418c04:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418c06:	2113      	movs	r1, #19
  418c08:	4620      	mov	r0, r4
  418c0a:	4b7b      	ldr	r3, [pc, #492]	; (418df8 <slider_init+0x2a4>)
  418c0c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418c0e:	4b75      	ldr	r3, [pc, #468]	; (418de4 <slider_init+0x290>)
  418c10:	681c      	ldr	r4, [r3, #0]
  418c12:	3494      	adds	r4, #148	; 0x94
  418c14:	2000      	movs	r0, #0
  418c16:	4b79      	ldr	r3, [pc, #484]	; (418dfc <slider_init+0x2a8>)
  418c18:	4798      	blx	r3
  418c1a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418c1e:	3050      	adds	r0, #80	; 0x50
  418c20:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c24:	f280 8086 	bge.w	418d34 <slider_init+0x1e0>
  418c28:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418c2a:	2110      	movs	r1, #16
  418c2c:	4620      	mov	r0, r4
  418c2e:	4b72      	ldr	r3, [pc, #456]	; (418df8 <slider_init+0x2a4>)
  418c30:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418c32:	4b6c      	ldr	r3, [pc, #432]	; (418de4 <slider_init+0x290>)
  418c34:	681c      	ldr	r4, [r3, #0]
  418c36:	3494      	adds	r4, #148	; 0x94
  418c38:	2000      	movs	r0, #0
  418c3a:	4b70      	ldr	r3, [pc, #448]	; (418dfc <slider_init+0x2a8>)
  418c3c:	4798      	blx	r3
  418c3e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418c42:	3050      	adds	r0, #80	; 0x50
  418c44:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c48:	f280 8082 	bge.w	418d50 <slider_init+0x1fc>
  418c4c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418c4e:	2111      	movs	r1, #17
  418c50:	4620      	mov	r0, r4
  418c52:	4b69      	ldr	r3, [pc, #420]	; (418df8 <slider_init+0x2a4>)
  418c54:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
  418c56:	4c63      	ldr	r4, [pc, #396]	; (418de4 <slider_init+0x290>)
  418c58:	6820      	ldr	r0, [r4, #0]
  418c5a:	3098      	adds	r0, #152	; 0x98
  418c5c:	4b62      	ldr	r3, [pc, #392]	; (418de8 <slider_init+0x294>)
  418c5e:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418c60:	6824      	ldr	r4, [r4, #0]
  418c62:	3498      	adds	r4, #152	; 0x98
  418c64:	2000      	movs	r0, #0
  418c66:	4b65      	ldr	r3, [pc, #404]	; (418dfc <slider_init+0x2a8>)
  418c68:	4798      	blx	r3
  418c6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418c6e:	0040      	lsls	r0, r0, #1
  418c70:	3050      	adds	r0, #80	; 0x50
  418c72:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c76:	da79      	bge.n	418d6c <slider_init+0x218>
  418c78:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  418c7a:	2117      	movs	r1, #23
  418c7c:	4620      	mov	r0, r4
  418c7e:	4b5e      	ldr	r3, [pc, #376]	; (418df8 <slider_init+0x2a4>)
  418c80:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418c82:	4b58      	ldr	r3, [pc, #352]	; (418de4 <slider_init+0x290>)
  418c84:	681c      	ldr	r4, [r3, #0]
  418c86:	3498      	adds	r4, #152	; 0x98
  418c88:	2000      	movs	r0, #0
  418c8a:	4b5c      	ldr	r3, [pc, #368]	; (418dfc <slider_init+0x2a8>)
  418c8c:	4798      	blx	r3
  418c8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418c92:	0040      	lsls	r0, r0, #1
  418c94:	3050      	adds	r0, #80	; 0x50
  418c96:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c9a:	da76      	bge.n	418d8a <slider_init+0x236>
  418c9c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  418c9e:	2118      	movs	r1, #24
  418ca0:	4620      	mov	r0, r4
  418ca2:	4b55      	ldr	r3, [pc, #340]	; (418df8 <slider_init+0x2a4>)
  418ca4:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418ca6:	4b4f      	ldr	r3, [pc, #316]	; (418de4 <slider_init+0x290>)
  418ca8:	681c      	ldr	r4, [r3, #0]
  418caa:	3498      	adds	r4, #152	; 0x98
  418cac:	2000      	movs	r0, #0
  418cae:	4b53      	ldr	r3, [pc, #332]	; (418dfc <slider_init+0x2a8>)
  418cb0:	4798      	blx	r3
  418cb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418cb6:	0040      	lsls	r0, r0, #1
  418cb8:	3050      	adds	r0, #80	; 0x50
  418cba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418cbe:	da73      	bge.n	418da8 <slider_init+0x254>
  418cc0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  418cc2:	2115      	movs	r1, #21
  418cc4:	4620      	mov	r0, r4
  418cc6:	4b4c      	ldr	r3, [pc, #304]	; (418df8 <slider_init+0x2a4>)
  418cc8:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418cca:	4b46      	ldr	r3, [pc, #280]	; (418de4 <slider_init+0x290>)
  418ccc:	681c      	ldr	r4, [r3, #0]
  418cce:	3498      	adds	r4, #152	; 0x98
  418cd0:	2000      	movs	r0, #0
  418cd2:	4b4a      	ldr	r3, [pc, #296]	; (418dfc <slider_init+0x2a8>)
  418cd4:	4798      	blx	r3
  418cd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418cda:	0040      	lsls	r0, r0, #1
  418cdc:	3050      	adds	r0, #80	; 0x50
  418cde:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418ce2:	da70      	bge.n	418dc6 <slider_init+0x272>
  418ce4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  418ce6:	2116      	movs	r1, #22
  418ce8:	4620      	mov	r0, r4
  418cea:	4b43      	ldr	r3, [pc, #268]	; (418df8 <slider_init+0x2a4>)
  418cec:	4798      	blx	r3
  418cee:	bd10      	pop	{r4, pc}
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  418cf0:	4b43      	ldr	r3, [pc, #268]	; (418e00 <slider_init+0x2ac>)
  418cf2:	881a      	ldrh	r2, [r3, #0]
  418cf4:	e744      	b.n	418b80 <slider_init+0x2c>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418cf6:	4b42      	ldr	r3, [pc, #264]	; (418e00 <slider_init+0x2ac>)
  418cf8:	881a      	ldrh	r2, [r3, #0]
  418cfa:	e75a      	b.n	418bb2 <slider_init+0x5e>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418cfc:	2000      	movs	r0, #0
  418cfe:	4b3f      	ldr	r3, [pc, #252]	; (418dfc <slider_init+0x2a8>)
  418d00:	4798      	blx	r3
  418d02:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418d06:	3050      	adds	r0, #80	; 0x50
  418d08:	4b3e      	ldr	r3, [pc, #248]	; (418e04 <slider_init+0x2b0>)
  418d0a:	fb83 2300 	smull	r2, r3, r3, r0
  418d0e:	17c2      	asrs	r2, r0, #31
  418d10:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d14:	b212      	sxth	r2, r2
  418d16:	e764      	b.n	418be2 <slider_init+0x8e>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418d18:	2000      	movs	r0, #0
  418d1a:	4b38      	ldr	r3, [pc, #224]	; (418dfc <slider_init+0x2a8>)
  418d1c:	4798      	blx	r3
  418d1e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418d22:	3050      	adds	r0, #80	; 0x50
  418d24:	4b37      	ldr	r3, [pc, #220]	; (418e04 <slider_init+0x2b0>)
  418d26:	fb83 2300 	smull	r2, r3, r3, r0
  418d2a:	17c2      	asrs	r2, r0, #31
  418d2c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d30:	b212      	sxth	r2, r2
  418d32:	e768      	b.n	418c06 <slider_init+0xb2>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418d34:	2000      	movs	r0, #0
  418d36:	4b31      	ldr	r3, [pc, #196]	; (418dfc <slider_init+0x2a8>)
  418d38:	4798      	blx	r3
  418d3a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418d3e:	3050      	adds	r0, #80	; 0x50
  418d40:	4b30      	ldr	r3, [pc, #192]	; (418e04 <slider_init+0x2b0>)
  418d42:	fb83 2300 	smull	r2, r3, r3, r0
  418d46:	17c2      	asrs	r2, r0, #31
  418d48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d4c:	b212      	sxth	r2, r2
  418d4e:	e76c      	b.n	418c2a <slider_init+0xd6>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418d50:	2000      	movs	r0, #0
  418d52:	4b2a      	ldr	r3, [pc, #168]	; (418dfc <slider_init+0x2a8>)
  418d54:	4798      	blx	r3
  418d56:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418d5a:	3050      	adds	r0, #80	; 0x50
  418d5c:	4b29      	ldr	r3, [pc, #164]	; (418e04 <slider_init+0x2b0>)
  418d5e:	fb83 2300 	smull	r2, r3, r3, r0
  418d62:	17c2      	asrs	r2, r0, #31
  418d64:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d68:	b212      	sxth	r2, r2
  418d6a:	e770      	b.n	418c4e <slider_init+0xfa>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418d6c:	2000      	movs	r0, #0
  418d6e:	4b23      	ldr	r3, [pc, #140]	; (418dfc <slider_init+0x2a8>)
  418d70:	4798      	blx	r3
  418d72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418d76:	0040      	lsls	r0, r0, #1
  418d78:	3050      	adds	r0, #80	; 0x50
  418d7a:	4b22      	ldr	r3, [pc, #136]	; (418e04 <slider_init+0x2b0>)
  418d7c:	fb83 2300 	smull	r2, r3, r3, r0
  418d80:	17c2      	asrs	r2, r0, #31
  418d82:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d86:	b212      	sxth	r2, r2
  418d88:	e777      	b.n	418c7a <slider_init+0x126>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418d8a:	2000      	movs	r0, #0
  418d8c:	4b1b      	ldr	r3, [pc, #108]	; (418dfc <slider_init+0x2a8>)
  418d8e:	4798      	blx	r3
  418d90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418d94:	0040      	lsls	r0, r0, #1
  418d96:	3050      	adds	r0, #80	; 0x50
  418d98:	4b1a      	ldr	r3, [pc, #104]	; (418e04 <slider_init+0x2b0>)
  418d9a:	fb83 2300 	smull	r2, r3, r3, r0
  418d9e:	17c2      	asrs	r2, r0, #31
  418da0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418da4:	b212      	sxth	r2, r2
  418da6:	e77a      	b.n	418c9e <slider_init+0x14a>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418da8:	2000      	movs	r0, #0
  418daa:	4b14      	ldr	r3, [pc, #80]	; (418dfc <slider_init+0x2a8>)
  418dac:	4798      	blx	r3
  418dae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418db2:	0040      	lsls	r0, r0, #1
  418db4:	3050      	adds	r0, #80	; 0x50
  418db6:	4b13      	ldr	r3, [pc, #76]	; (418e04 <slider_init+0x2b0>)
  418db8:	fb83 2300 	smull	r2, r3, r3, r0
  418dbc:	17c2      	asrs	r2, r0, #31
  418dbe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418dc2:	b212      	sxth	r2, r2
  418dc4:	e77d      	b.n	418cc2 <slider_init+0x16e>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418dc6:	2000      	movs	r0, #0
  418dc8:	4b0c      	ldr	r3, [pc, #48]	; (418dfc <slider_init+0x2a8>)
  418dca:	4798      	blx	r3
  418dcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418dd0:	0040      	lsls	r0, r0, #1
  418dd2:	3050      	adds	r0, #80	; 0x50
  418dd4:	4b0b      	ldr	r3, [pc, #44]	; (418e04 <slider_init+0x2b0>)
  418dd6:	fb83 2300 	smull	r2, r3, r3, r0
  418dda:	17c2      	asrs	r2, r0, #31
  418ddc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418de0:	b212      	sxth	r2, r2
  418de2:	e780      	b.n	418ce6 <slider_init+0x192>
  418de4:	20414824 	.word	0x20414824
  418de8:	00418951 	.word	0x00418951
  418dec:	0040a4d9 	.word	0x0040a4d9
  418df0:	20414828 	.word	0x20414828
  418df4:	0040a349 	.word	0x0040a349
  418df8:	0040a1b9 	.word	0x0040a1b9
  418dfc:	00414d4d 	.word	0x00414d4d
  418e00:	0042f86c 	.word	0x0042f86c
  418e04:	66666667 	.word	0x66666667

00418e08 <switch_init>:
{
  418e08:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
  418e0a:	4c48      	ldr	r4, [pc, #288]	; (418f2c <switch_init+0x124>)
  418e0c:	6820      	ldr	r0, [r4, #0]
  418e0e:	30a0      	adds	r0, #160	; 0xa0
  418e10:	4b47      	ldr	r3, [pc, #284]	; (418f30 <switch_init+0x128>)
  418e12:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  418e14:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418e16:	22ff      	movs	r2, #255	; 0xff
  418e18:	212c      	movs	r1, #44	; 0x2c
  418e1a:	30a0      	adds	r0, #160	; 0xa0
  418e1c:	4b45      	ldr	r3, [pc, #276]	; (418f34 <switch_init+0x12c>)
  418e1e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  418e20:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418e22:	4b45      	ldr	r3, [pc, #276]	; (418f38 <switch_init+0x130>)
  418e24:	881a      	ldrh	r2, [r3, #0]
  418e26:	2129      	movs	r1, #41	; 0x29
  418e28:	30a0      	adds	r0, #160	; 0xa0
  418e2a:	4b44      	ldr	r3, [pc, #272]	; (418f3c <switch_init+0x134>)
  418e2c:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418e2e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418e30:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418e34:	2101      	movs	r1, #1
  418e36:	30a0      	adds	r0, #160	; 0xa0
  418e38:	4b41      	ldr	r3, [pc, #260]	; (418f40 <switch_init+0x138>)
  418e3a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  418e3c:	6824      	ldr	r4, [r4, #0]
  418e3e:	34a0      	adds	r4, #160	; 0xa0
  418e40:	2000      	movs	r0, #0
  418e42:	4b40      	ldr	r3, [pc, #256]	; (418f44 <switch_init+0x13c>)
  418e44:	4798      	blx	r3
  418e46:	3014      	adds	r0, #20
  418e48:	0080      	lsls	r0, r0, #2
  418e4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e4e:	da39      	bge.n	418ec4 <switch_init+0xbc>
  418e50:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418e54:	2110      	movs	r1, #16
  418e56:	4620      	mov	r0, r4
  418e58:	4b39      	ldr	r3, [pc, #228]	; (418f40 <switch_init+0x138>)
  418e5a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  418e5c:	4b33      	ldr	r3, [pc, #204]	; (418f2c <switch_init+0x124>)
  418e5e:	681c      	ldr	r4, [r3, #0]
  418e60:	34a0      	adds	r4, #160	; 0xa0
  418e62:	2000      	movs	r0, #0
  418e64:	4b37      	ldr	r3, [pc, #220]	; (418f44 <switch_init+0x13c>)
  418e66:	4798      	blx	r3
  418e68:	3014      	adds	r0, #20
  418e6a:	0080      	lsls	r0, r0, #2
  418e6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e70:	da35      	bge.n	418ede <switch_init+0xd6>
  418e72:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418e76:	2111      	movs	r1, #17
  418e78:	4620      	mov	r0, r4
  418e7a:	4b31      	ldr	r3, [pc, #196]	; (418f40 <switch_init+0x138>)
  418e7c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  418e7e:	4b2b      	ldr	r3, [pc, #172]	; (418f2c <switch_init+0x124>)
  418e80:	681c      	ldr	r4, [r3, #0]
  418e82:	34a0      	adds	r4, #160	; 0xa0
  418e84:	2000      	movs	r0, #0
  418e86:	4b2f      	ldr	r3, [pc, #188]	; (418f44 <switch_init+0x13c>)
  418e88:	4798      	blx	r3
  418e8a:	3014      	adds	r0, #20
  418e8c:	0080      	lsls	r0, r0, #2
  418e8e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e92:	da31      	bge.n	418ef8 <switch_init+0xf0>
  418e94:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418e98:	2112      	movs	r1, #18
  418e9a:	4620      	mov	r0, r4
  418e9c:	4b28      	ldr	r3, [pc, #160]	; (418f40 <switch_init+0x138>)
  418e9e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  418ea0:	4b22      	ldr	r3, [pc, #136]	; (418f2c <switch_init+0x124>)
  418ea2:	681c      	ldr	r4, [r3, #0]
  418ea4:	34a0      	adds	r4, #160	; 0xa0
  418ea6:	2000      	movs	r0, #0
  418ea8:	4b26      	ldr	r3, [pc, #152]	; (418f44 <switch_init+0x13c>)
  418eaa:	4798      	blx	r3
  418eac:	3014      	adds	r0, #20
  418eae:	0080      	lsls	r0, r0, #2
  418eb0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418eb4:	da2d      	bge.n	418f12 <switch_init+0x10a>
  418eb6:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418eba:	2113      	movs	r1, #19
  418ebc:	4620      	mov	r0, r4
  418ebe:	4b20      	ldr	r3, [pc, #128]	; (418f40 <switch_init+0x138>)
  418ec0:	4798      	blx	r3
  418ec2:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  418ec4:	2000      	movs	r0, #0
  418ec6:	4b1f      	ldr	r3, [pc, #124]	; (418f44 <switch_init+0x13c>)
  418ec8:	4798      	blx	r3
  418eca:	3014      	adds	r0, #20
  418ecc:	0080      	lsls	r0, r0, #2
  418ece:	4b1e      	ldr	r3, [pc, #120]	; (418f48 <switch_init+0x140>)
  418ed0:	fb83 2300 	smull	r2, r3, r3, r0
  418ed4:	17c2      	asrs	r2, r0, #31
  418ed6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418eda:	b212      	sxth	r2, r2
  418edc:	e7ba      	b.n	418e54 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  418ede:	2000      	movs	r0, #0
  418ee0:	4b18      	ldr	r3, [pc, #96]	; (418f44 <switch_init+0x13c>)
  418ee2:	4798      	blx	r3
  418ee4:	3014      	adds	r0, #20
  418ee6:	0080      	lsls	r0, r0, #2
  418ee8:	4b17      	ldr	r3, [pc, #92]	; (418f48 <switch_init+0x140>)
  418eea:	fb83 2300 	smull	r2, r3, r3, r0
  418eee:	17c2      	asrs	r2, r0, #31
  418ef0:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418ef4:	b212      	sxth	r2, r2
  418ef6:	e7be      	b.n	418e76 <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  418ef8:	2000      	movs	r0, #0
  418efa:	4b12      	ldr	r3, [pc, #72]	; (418f44 <switch_init+0x13c>)
  418efc:	4798      	blx	r3
  418efe:	3014      	adds	r0, #20
  418f00:	0080      	lsls	r0, r0, #2
  418f02:	4b11      	ldr	r3, [pc, #68]	; (418f48 <switch_init+0x140>)
  418f04:	fb83 2300 	smull	r2, r3, r3, r0
  418f08:	17c2      	asrs	r2, r0, #31
  418f0a:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418f0e:	b212      	sxth	r2, r2
  418f10:	e7c2      	b.n	418e98 <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  418f12:	2000      	movs	r0, #0
  418f14:	4b0b      	ldr	r3, [pc, #44]	; (418f44 <switch_init+0x13c>)
  418f16:	4798      	blx	r3
  418f18:	3014      	adds	r0, #20
  418f1a:	0080      	lsls	r0, r0, #2
  418f1c:	4b0a      	ldr	r3, [pc, #40]	; (418f48 <switch_init+0x140>)
  418f1e:	fb83 2300 	smull	r2, r3, r3, r0
  418f22:	17c2      	asrs	r2, r0, #31
  418f24:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418f28:	b212      	sxth	r2, r2
  418f2a:	e7c6      	b.n	418eba <switch_init+0xb2>
  418f2c:	20414824 	.word	0x20414824
  418f30:	00418951 	.word	0x00418951
  418f34:	0040a4d9 	.word	0x0040a4d9
  418f38:	0042f86c 	.word	0x0042f86c
  418f3c:	0040a349 	.word	0x0040a349
  418f40:	0040a1b9 	.word	0x0040a1b9
  418f44:	00414d4d 	.word	0x00414d4d
  418f48:	66666667 	.word	0x66666667

00418f4c <linemeter_init>:
{
  418f4c:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->lmeter);
  418f4e:	4c8a      	ldr	r4, [pc, #552]	; (419178 <linemeter_init+0x22c>)
  418f50:	6820      	ldr	r0, [r4, #0]
  418f52:	3074      	adds	r0, #116	; 0x74
  418f54:	4b89      	ldr	r3, [pc, #548]	; (41917c <linemeter_init+0x230>)
  418f56:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418f58:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418f5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418f5e:	2101      	movs	r1, #1
  418f60:	3074      	adds	r0, #116	; 0x74
  418f62:	4b87      	ldr	r3, [pc, #540]	; (419180 <linemeter_init+0x234>)
  418f64:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418f66:	6824      	ldr	r4, [r4, #0]
  418f68:	3474      	adds	r4, #116	; 0x74
  418f6a:	2000      	movs	r0, #0
  418f6c:	4b85      	ldr	r3, [pc, #532]	; (419184 <linemeter_init+0x238>)
  418f6e:	4798      	blx	r3
  418f70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418f74:	0080      	lsls	r0, r0, #2
  418f76:	3050      	adds	r0, #80	; 0x50
  418f78:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f7c:	f280 8093 	bge.w	4190a6 <linemeter_init+0x15a>
  418f80:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418f82:	2112      	movs	r1, #18
  418f84:	4620      	mov	r0, r4
  418f86:	4b7e      	ldr	r3, [pc, #504]	; (419180 <linemeter_init+0x234>)
  418f88:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418f8a:	4b7b      	ldr	r3, [pc, #492]	; (419178 <linemeter_init+0x22c>)
  418f8c:	681c      	ldr	r4, [r3, #0]
  418f8e:	3474      	adds	r4, #116	; 0x74
  418f90:	2000      	movs	r0, #0
  418f92:	4b7c      	ldr	r3, [pc, #496]	; (419184 <linemeter_init+0x238>)
  418f94:	4798      	blx	r3
  418f96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418f9a:	0080      	lsls	r0, r0, #2
  418f9c:	3050      	adds	r0, #80	; 0x50
  418f9e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418fa2:	f280 808f 	bge.w	4190c4 <linemeter_init+0x178>
  418fa6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418fa8:	2113      	movs	r1, #19
  418faa:	4620      	mov	r0, r4
  418fac:	4b74      	ldr	r3, [pc, #464]	; (419180 <linemeter_init+0x234>)
  418fae:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418fb0:	4b71      	ldr	r3, [pc, #452]	; (419178 <linemeter_init+0x22c>)
  418fb2:	681c      	ldr	r4, [r3, #0]
  418fb4:	3474      	adds	r4, #116	; 0x74
  418fb6:	2000      	movs	r0, #0
  418fb8:	4b72      	ldr	r3, [pc, #456]	; (419184 <linemeter_init+0x238>)
  418fba:	4798      	blx	r3
  418fbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418fc0:	0080      	lsls	r0, r0, #2
  418fc2:	3050      	adds	r0, #80	; 0x50
  418fc4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418fc8:	f280 808b 	bge.w	4190e2 <linemeter_init+0x196>
  418fcc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418fce:	2110      	movs	r1, #16
  418fd0:	4620      	mov	r0, r4
  418fd2:	4b6b      	ldr	r3, [pc, #428]	; (419180 <linemeter_init+0x234>)
  418fd4:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  418fd6:	4b68      	ldr	r3, [pc, #416]	; (419178 <linemeter_init+0x22c>)
  418fd8:	681c      	ldr	r4, [r3, #0]
  418fda:	3474      	adds	r4, #116	; 0x74
  418fdc:	2000      	movs	r0, #0
  418fde:	4b69      	ldr	r3, [pc, #420]	; (419184 <linemeter_init+0x238>)
  418fe0:	4798      	blx	r3
  418fe2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418fe6:	0040      	lsls	r0, r0, #1
  418fe8:	3050      	adds	r0, #80	; 0x50
  418fea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418fee:	f280 8087 	bge.w	419100 <linemeter_init+0x1b4>
  418ff2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  418ff4:	2114      	movs	r1, #20
  418ff6:	4620      	mov	r0, r4
  418ff8:	4b61      	ldr	r3, [pc, #388]	; (419180 <linemeter_init+0x234>)
  418ffa:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  418ffc:	4b5e      	ldr	r3, [pc, #376]	; (419178 <linemeter_init+0x22c>)
  418ffe:	681c      	ldr	r4, [r3, #0]
  419000:	3474      	adds	r4, #116	; 0x74
  419002:	2000      	movs	r0, #0
  419004:	4b5f      	ldr	r3, [pc, #380]	; (419184 <linemeter_init+0x238>)
  419006:	4798      	blx	r3
  419008:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41900c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419010:	3050      	adds	r0, #80	; 0x50
  419012:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419016:	f280 8082 	bge.w	41911e <linemeter_init+0x1d2>
  41901a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41901c:	21c0      	movs	r1, #192	; 0xc0
  41901e:	4620      	mov	r0, r4
  419020:	4b57      	ldr	r3, [pc, #348]	; (419180 <linemeter_init+0x234>)
  419022:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  419024:	4c54      	ldr	r4, [pc, #336]	; (419178 <linemeter_init+0x22c>)
  419026:	6820      	ldr	r0, [r4, #0]
  419028:	4e57      	ldr	r6, [pc, #348]	; (419188 <linemeter_init+0x23c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41902a:	89b2      	ldrh	r2, [r6, #12]
  41902c:	2199      	movs	r1, #153	; 0x99
  41902e:	3074      	adds	r0, #116	; 0x74
  419030:	4d56      	ldr	r5, [pc, #344]	; (41918c <linemeter_init+0x240>)
  419032:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  419034:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  419036:	89b2      	ldrh	r2, [r6, #12]
  419038:	21c9      	movs	r1, #201	; 0xc9
  41903a:	3074      	adds	r0, #116	; 0x74
  41903c:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41903e:	6820      	ldr	r0, [r4, #0]
  419040:	f04f 0200 	mov.w	r2, #0
  419044:	2304      	movs	r3, #4
  419046:	f363 0202 	bfi	r2, r3, #0, #3
  41904a:	2311      	movs	r3, #17
  41904c:	f363 02c7 	bfi	r2, r3, #3, #5
  419050:	f363 220c 	bfi	r2, r3, #8, #5
  419054:	2302      	movs	r3, #2
  419056:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  41905a:	21ca      	movs	r1, #202	; 0xca
  41905c:	3074      	adds	r0, #116	; 0x74
  41905e:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  419060:	6824      	ldr	r4, [r4, #0]
  419062:	3474      	adds	r4, #116	; 0x74
  419064:	2000      	movs	r0, #0
  419066:	4b47      	ldr	r3, [pc, #284]	; (419184 <linemeter_init+0x238>)
  419068:	4798      	blx	r3
  41906a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41906e:	0040      	lsls	r0, r0, #1
  419070:	3050      	adds	r0, #80	; 0x50
  419072:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419076:	da62      	bge.n	41913e <linemeter_init+0x1f2>
  419078:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41907a:	2190      	movs	r1, #144	; 0x90
  41907c:	4620      	mov	r0, r4
  41907e:	4b40      	ldr	r3, [pc, #256]	; (419180 <linemeter_init+0x234>)
  419080:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  419082:	4b3d      	ldr	r3, [pc, #244]	; (419178 <linemeter_init+0x22c>)
  419084:	681c      	ldr	r4, [r3, #0]
  419086:	3474      	adds	r4, #116	; 0x74
  419088:	2000      	movs	r0, #0
  41908a:	4b3e      	ldr	r3, [pc, #248]	; (419184 <linemeter_init+0x238>)
  41908c:	4798      	blx	r3
  41908e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419092:	3050      	adds	r0, #80	; 0x50
  419094:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419098:	da60      	bge.n	41915c <linemeter_init+0x210>
  41909a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  41909c:	21c3      	movs	r1, #195	; 0xc3
  41909e:	4620      	mov	r0, r4
  4190a0:	4b37      	ldr	r3, [pc, #220]	; (419180 <linemeter_init+0x234>)
  4190a2:	4798      	blx	r3
  4190a4:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4190a6:	2000      	movs	r0, #0
  4190a8:	4b36      	ldr	r3, [pc, #216]	; (419184 <linemeter_init+0x238>)
  4190aa:	4798      	blx	r3
  4190ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4190b0:	0080      	lsls	r0, r0, #2
  4190b2:	3050      	adds	r0, #80	; 0x50
  4190b4:	4b36      	ldr	r3, [pc, #216]	; (419190 <linemeter_init+0x244>)
  4190b6:	fb83 2300 	smull	r2, r3, r3, r0
  4190ba:	17c2      	asrs	r2, r0, #31
  4190bc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4190c0:	b212      	sxth	r2, r2
  4190c2:	e75e      	b.n	418f82 <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4190c4:	2000      	movs	r0, #0
  4190c6:	4b2f      	ldr	r3, [pc, #188]	; (419184 <linemeter_init+0x238>)
  4190c8:	4798      	blx	r3
  4190ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4190ce:	0080      	lsls	r0, r0, #2
  4190d0:	3050      	adds	r0, #80	; 0x50
  4190d2:	4b2f      	ldr	r3, [pc, #188]	; (419190 <linemeter_init+0x244>)
  4190d4:	fb83 2300 	smull	r2, r3, r3, r0
  4190d8:	17c2      	asrs	r2, r0, #31
  4190da:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4190de:	b212      	sxth	r2, r2
  4190e0:	e762      	b.n	418fa8 <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4190e2:	2000      	movs	r0, #0
  4190e4:	4b27      	ldr	r3, [pc, #156]	; (419184 <linemeter_init+0x238>)
  4190e6:	4798      	blx	r3
  4190e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4190ec:	0080      	lsls	r0, r0, #2
  4190ee:	3050      	adds	r0, #80	; 0x50
  4190f0:	4b27      	ldr	r3, [pc, #156]	; (419190 <linemeter_init+0x244>)
  4190f2:	fb83 2300 	smull	r2, r3, r3, r0
  4190f6:	17c2      	asrs	r2, r0, #31
  4190f8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4190fc:	b212      	sxth	r2, r2
  4190fe:	e766      	b.n	418fce <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  419100:	2000      	movs	r0, #0
  419102:	4b20      	ldr	r3, [pc, #128]	; (419184 <linemeter_init+0x238>)
  419104:	4798      	blx	r3
  419106:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41910a:	0040      	lsls	r0, r0, #1
  41910c:	3050      	adds	r0, #80	; 0x50
  41910e:	4b20      	ldr	r3, [pc, #128]	; (419190 <linemeter_init+0x244>)
  419110:	fb83 2300 	smull	r2, r3, r3, r0
  419114:	17c2      	asrs	r2, r0, #31
  419116:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41911a:	b212      	sxth	r2, r2
  41911c:	e76a      	b.n	418ff4 <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  41911e:	2000      	movs	r0, #0
  419120:	4b18      	ldr	r3, [pc, #96]	; (419184 <linemeter_init+0x238>)
  419122:	4798      	blx	r3
  419124:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41912c:	3050      	adds	r0, #80	; 0x50
  41912e:	4b18      	ldr	r3, [pc, #96]	; (419190 <linemeter_init+0x244>)
  419130:	fb83 2300 	smull	r2, r3, r3, r0
  419134:	17c2      	asrs	r2, r0, #31
  419136:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41913a:	b212      	sxth	r2, r2
  41913c:	e76e      	b.n	41901c <linemeter_init+0xd0>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  41913e:	2000      	movs	r0, #0
  419140:	4b10      	ldr	r3, [pc, #64]	; (419184 <linemeter_init+0x238>)
  419142:	4798      	blx	r3
  419144:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419148:	0040      	lsls	r0, r0, #1
  41914a:	3050      	adds	r0, #80	; 0x50
  41914c:	4b10      	ldr	r3, [pc, #64]	; (419190 <linemeter_init+0x244>)
  41914e:	fb83 2300 	smull	r2, r3, r3, r0
  419152:	17c2      	asrs	r2, r0, #31
  419154:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419158:	b212      	sxth	r2, r2
  41915a:	e78e      	b.n	41907a <linemeter_init+0x12e>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  41915c:	2000      	movs	r0, #0
  41915e:	4b09      	ldr	r3, [pc, #36]	; (419184 <linemeter_init+0x238>)
  419160:	4798      	blx	r3
  419162:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419166:	3050      	adds	r0, #80	; 0x50
  419168:	4b09      	ldr	r3, [pc, #36]	; (419190 <linemeter_init+0x244>)
  41916a:	fb83 2300 	smull	r2, r3, r3, r0
  41916e:	17c2      	asrs	r2, r0, #31
  419170:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419174:	b212      	sxth	r2, r2
  419176:	e791      	b.n	41909c <linemeter_init+0x150>
  419178:	20414824 	.word	0x20414824
  41917c:	00418951 	.word	0x00418951
  419180:	0040a1b9 	.word	0x0040a1b9
  419184:	00414d4d 	.word	0x00414d4d
  419188:	20414828 	.word	0x20414828
  41918c:	0040a349 	.word	0x0040a349
  419190:	66666667 	.word	0x66666667

00419194 <gauge_init>:
{
  419194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->gauge_main);
  419198:	4cc0      	ldr	r4, [pc, #768]	; (41949c <gauge_init+0x308>)
  41919a:	6820      	ldr	r0, [r4, #0]
  41919c:	3060      	adds	r0, #96	; 0x60
  41919e:	4bc0      	ldr	r3, [pc, #768]	; (4194a0 <gauge_init+0x30c>)
  4191a0:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  4191a2:	6820      	ldr	r0, [r4, #0]
  4191a4:	f04f 0804 	mov.w	r8, #4
  4191a8:	f04f 0200 	mov.w	r2, #0
  4191ac:	f368 0202 	bfi	r2, r8, #0, #3
  4191b0:	2511      	movs	r5, #17
  4191b2:	f365 02c7 	bfi	r2, r5, #3, #5
  4191b6:	f365 220c 	bfi	r2, r5, #8, #5
  4191ba:	2702      	movs	r7, #2
  4191bc:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4191c0:	2199      	movs	r1, #153	; 0x99
  4191c2:	3060      	adds	r0, #96	; 0x60
  4191c4:	4eb7      	ldr	r6, [pc, #732]	; (4194a4 <gauge_init+0x310>)
  4191c6:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  4191c8:	6820      	ldr	r0, [r4, #0]
  4191ca:	f04f 0200 	mov.w	r2, #0
  4191ce:	f368 0202 	bfi	r2, r8, #0, #3
  4191d2:	f365 02c7 	bfi	r2, r5, #3, #5
  4191d6:	f365 220c 	bfi	r2, r5, #8, #5
  4191da:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  4191de:	21c9      	movs	r1, #201	; 0xc9
  4191e0:	3060      	adds	r0, #96	; 0x60
  4191e2:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
  4191e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  4191e6:	4bb0      	ldr	r3, [pc, #704]	; (4194a8 <gauge_init+0x314>)
  4191e8:	899a      	ldrh	r2, [r3, #12]
  4191ea:	21ca      	movs	r1, #202	; 0xca
  4191ec:	3060      	adds	r0, #96	; 0x60
  4191ee:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  4191f0:	6824      	ldr	r4, [r4, #0]
  4191f2:	3460      	adds	r4, #96	; 0x60
  4191f4:	2000      	movs	r0, #0
  4191f6:	4bad      	ldr	r3, [pc, #692]	; (4194ac <gauge_init+0x318>)
  4191f8:	4798      	blx	r3
  4191fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4191fe:	3050      	adds	r0, #80	; 0x50
  419200:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419204:	f280 8177 	bge.w	4194f6 <gauge_init+0x362>
  419208:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41920a:	2190      	movs	r1, #144	; 0x90
  41920c:	4620      	mov	r0, r4
  41920e:	4ba8      	ldr	r3, [pc, #672]	; (4194b0 <gauge_init+0x31c>)
  419210:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  419212:	4ba2      	ldr	r3, [pc, #648]	; (41949c <gauge_init+0x308>)
  419214:	681c      	ldr	r4, [r3, #0]
  419216:	3460      	adds	r4, #96	; 0x60
  419218:	2000      	movs	r0, #0
  41921a:	4ba4      	ldr	r3, [pc, #656]	; (4194ac <gauge_init+0x318>)
  41921c:	4798      	blx	r3
  41921e:	3014      	adds	r0, #20
  419220:	0080      	lsls	r0, r0, #2
  419222:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419226:	f280 8174 	bge.w	419512 <gauge_init+0x37e>
  41922a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  41922c:	21c3      	movs	r1, #195	; 0xc3
  41922e:	4620      	mov	r0, r4
  419230:	4b9f      	ldr	r3, [pc, #636]	; (4194b0 <gauge_init+0x31c>)
  419232:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  419234:	4b99      	ldr	r3, [pc, #612]	; (41949c <gauge_init+0x308>)
  419236:	681c      	ldr	r4, [r3, #0]
  419238:	3460      	adds	r4, #96	; 0x60
  41923a:	2000      	movs	r0, #0
  41923c:	4b9b      	ldr	r3, [pc, #620]	; (4194ac <gauge_init+0x318>)
  41923e:	4798      	blx	r3
  419240:	300a      	adds	r0, #10
  419242:	00c0      	lsls	r0, r0, #3
  419244:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419248:	f280 8170 	bge.w	41952c <gauge_init+0x398>
  41924c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  41924e:	21c2      	movs	r1, #194	; 0xc2
  419250:	4620      	mov	r0, r4
  419252:	4b97      	ldr	r3, [pc, #604]	; (4194b0 <gauge_init+0x31c>)
  419254:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  419256:	4b91      	ldr	r3, [pc, #580]	; (41949c <gauge_init+0x308>)
  419258:	681c      	ldr	r4, [r3, #0]
  41925a:	3460      	adds	r4, #96	; 0x60
  41925c:	2000      	movs	r0, #0
  41925e:	4b93      	ldr	r3, [pc, #588]	; (4194ac <gauge_init+0x318>)
  419260:	4798      	blx	r3
  419262:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419266:	0080      	lsls	r0, r0, #2
  419268:	3050      	adds	r0, #80	; 0x50
  41926a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41926e:	f280 816a 	bge.w	419546 <gauge_init+0x3b2>
  419272:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419274:	2112      	movs	r1, #18
  419276:	4620      	mov	r0, r4
  419278:	4b8d      	ldr	r3, [pc, #564]	; (4194b0 <gauge_init+0x31c>)
  41927a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41927c:	4b87      	ldr	r3, [pc, #540]	; (41949c <gauge_init+0x308>)
  41927e:	681c      	ldr	r4, [r3, #0]
  419280:	3460      	adds	r4, #96	; 0x60
  419282:	2000      	movs	r0, #0
  419284:	4b89      	ldr	r3, [pc, #548]	; (4194ac <gauge_init+0x318>)
  419286:	4798      	blx	r3
  419288:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41928c:	0080      	lsls	r0, r0, #2
  41928e:	3050      	adds	r0, #80	; 0x50
  419290:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419294:	f280 8166 	bge.w	419564 <gauge_init+0x3d0>
  419298:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41929a:	2113      	movs	r1, #19
  41929c:	4620      	mov	r0, r4
  41929e:	4b84      	ldr	r3, [pc, #528]	; (4194b0 <gauge_init+0x31c>)
  4192a0:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4192a2:	4b7e      	ldr	r3, [pc, #504]	; (41949c <gauge_init+0x308>)
  4192a4:	681c      	ldr	r4, [r3, #0]
  4192a6:	3460      	adds	r4, #96	; 0x60
  4192a8:	2000      	movs	r0, #0
  4192aa:	4b80      	ldr	r3, [pc, #512]	; (4194ac <gauge_init+0x318>)
  4192ac:	4798      	blx	r3
  4192ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4192b2:	0080      	lsls	r0, r0, #2
  4192b4:	3050      	adds	r0, #80	; 0x50
  4192b6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4192ba:	f280 8162 	bge.w	419582 <gauge_init+0x3ee>
  4192be:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4192c0:	2110      	movs	r1, #16
  4192c2:	4620      	mov	r0, r4
  4192c4:	4b7a      	ldr	r3, [pc, #488]	; (4194b0 <gauge_init+0x31c>)
  4192c6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4192c8:	4b74      	ldr	r3, [pc, #464]	; (41949c <gauge_init+0x308>)
  4192ca:	681c      	ldr	r4, [r3, #0]
  4192cc:	3460      	adds	r4, #96	; 0x60
  4192ce:	2000      	movs	r0, #0
  4192d0:	4b76      	ldr	r3, [pc, #472]	; (4194ac <gauge_init+0x318>)
  4192d2:	4798      	blx	r3
  4192d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4192d8:	0080      	lsls	r0, r0, #2
  4192da:	3050      	adds	r0, #80	; 0x50
  4192dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4192e0:	f280 815e 	bge.w	4195a0 <gauge_init+0x40c>
  4192e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4192e6:	2114      	movs	r1, #20
  4192e8:	4620      	mov	r0, r4
  4192ea:	4b71      	ldr	r3, [pc, #452]	; (4194b0 <gauge_init+0x31c>)
  4192ec:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  4192ee:	4b6b      	ldr	r3, [pc, #428]	; (41949c <gauge_init+0x308>)
  4192f0:	681c      	ldr	r4, [r3, #0]
  4192f2:	3460      	adds	r4, #96	; 0x60
  4192f4:	2000      	movs	r0, #0
  4192f6:	4b6d      	ldr	r3, [pc, #436]	; (4194ac <gauge_init+0x318>)
  4192f8:	4798      	blx	r3
  4192fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4192fe:	3050      	adds	r0, #80	; 0x50
  419300:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419304:	f280 815b 	bge.w	4195be <gauge_init+0x42a>
  419308:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41930a:	21c0      	movs	r1, #192	; 0xc0
  41930c:	4620      	mov	r0, r4
  41930e:	4d68      	ldr	r5, [pc, #416]	; (4194b0 <gauge_init+0x31c>)
  419310:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419312:	4c62      	ldr	r4, [pc, #392]	; (41949c <gauge_init+0x308>)
  419314:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419316:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41931a:	2101      	movs	r1, #1
  41931c:	3060      	adds	r0, #96	; 0x60
  41931e:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
  419320:	6820      	ldr	r0, [r4, #0]
  419322:	3064      	adds	r0, #100	; 0x64
  419324:	4b5e      	ldr	r3, [pc, #376]	; (4194a0 <gauge_init+0x30c>)
  419326:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  419328:	6820      	ldr	r0, [r4, #0]
  41932a:	f04f 0804 	mov.w	r8, #4
  41932e:	f04f 0200 	mov.w	r2, #0
  419332:	f368 0202 	bfi	r2, r8, #0, #3
  419336:	2511      	movs	r5, #17
  419338:	f365 02c7 	bfi	r2, r5, #3, #5
  41933c:	f365 220c 	bfi	r2, r5, #8, #5
  419340:	2702      	movs	r7, #2
  419342:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  419346:	2199      	movs	r1, #153	; 0x99
  419348:	3064      	adds	r0, #100	; 0x64
  41934a:	4e56      	ldr	r6, [pc, #344]	; (4194a4 <gauge_init+0x310>)
  41934c:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41934e:	6820      	ldr	r0, [r4, #0]
  419350:	f04f 0200 	mov.w	r2, #0
  419354:	f368 0202 	bfi	r2, r8, #0, #3
  419358:	f365 02c7 	bfi	r2, r5, #3, #5
  41935c:	f365 220c 	bfi	r2, r5, #8, #5
  419360:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  419364:	21c9      	movs	r1, #201	; 0xc9
  419366:	3064      	adds	r0, #100	; 0x64
  419368:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
  41936a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  41936c:	4b4e      	ldr	r3, [pc, #312]	; (4194a8 <gauge_init+0x314>)
  41936e:	899a      	ldrh	r2, [r3, #12]
  419370:	21ca      	movs	r1, #202	; 0xca
  419372:	3064      	adds	r0, #100	; 0x64
  419374:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  419376:	6824      	ldr	r4, [r4, #0]
  419378:	3464      	adds	r4, #100	; 0x64
  41937a:	2000      	movs	r0, #0
  41937c:	4b4b      	ldr	r3, [pc, #300]	; (4194ac <gauge_init+0x318>)
  41937e:	4798      	blx	r3
  419380:	300a      	adds	r0, #10
  419382:	00c0      	lsls	r0, r0, #3
  419384:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419388:	f280 8127 	bge.w	4195da <gauge_init+0x446>
  41938c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41938e:	2190      	movs	r1, #144	; 0x90
  419390:	4620      	mov	r0, r4
  419392:	4b47      	ldr	r3, [pc, #284]	; (4194b0 <gauge_init+0x31c>)
  419394:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  419396:	4b41      	ldr	r3, [pc, #260]	; (41949c <gauge_init+0x308>)
  419398:	681c      	ldr	r4, [r3, #0]
  41939a:	3464      	adds	r4, #100	; 0x64
  41939c:	2000      	movs	r0, #0
  41939e:	4b43      	ldr	r3, [pc, #268]	; (4194ac <gauge_init+0x318>)
  4193a0:	4798      	blx	r3
  4193a2:	300a      	adds	r0, #10
  4193a4:	00c0      	lsls	r0, r0, #3
  4193a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4193aa:	f280 8123 	bge.w	4195f4 <gauge_init+0x460>
  4193ae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  4193b0:	21c3      	movs	r1, #195	; 0xc3
  4193b2:	4620      	mov	r0, r4
  4193b4:	4b3e      	ldr	r3, [pc, #248]	; (4194b0 <gauge_init+0x31c>)
  4193b6:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  4193b8:	4b38      	ldr	r3, [pc, #224]	; (41949c <gauge_init+0x308>)
  4193ba:	681c      	ldr	r4, [r3, #0]
  4193bc:	3464      	adds	r4, #100	; 0x64
  4193be:	2000      	movs	r0, #0
  4193c0:	4b3a      	ldr	r3, [pc, #232]	; (4194ac <gauge_init+0x318>)
  4193c2:	4798      	blx	r3
  4193c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4193c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4193cc:	3050      	adds	r0, #80	; 0x50
  4193ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4193d2:	f280 811c 	bge.w	41960e <gauge_init+0x47a>
  4193d6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  4193d8:	21c0      	movs	r1, #192	; 0xc0
  4193da:	4620      	mov	r0, r4
  4193dc:	4b34      	ldr	r3, [pc, #208]	; (4194b0 <gauge_init+0x31c>)
  4193de:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
  4193e0:	4c2e      	ldr	r4, [pc, #184]	; (41949c <gauge_init+0x308>)
  4193e2:	6820      	ldr	r0, [r4, #0]
  4193e4:	3068      	adds	r0, #104	; 0x68
  4193e6:	4b2e      	ldr	r3, [pc, #184]	; (4194a0 <gauge_init+0x30c>)
  4193e8:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  4193ea:	6820      	ldr	r0, [r4, #0]
  4193ec:	3068      	adds	r0, #104	; 0x68
  4193ee:	4b2e      	ldr	r3, [pc, #184]	; (4194a8 <gauge_init+0x314>)
  4193f0:	6a1b      	ldr	r3, [r3, #32]
  4193f2:	f013 0f02 	tst.w	r3, #2
  4193f6:	f000 811a 	beq.w	41962e <gauge_init+0x49a>
  4193fa:	2302      	movs	r3, #2
  4193fc:	f04f 0200 	mov.w	r2, #0
  419400:	f363 0202 	bfi	r2, r3, #0, #3
  419404:	2108      	movs	r1, #8
  419406:	f361 02c7 	bfi	r2, r1, #3, #5
  41940a:	210b      	movs	r1, #11
  41940c:	f361 220c 	bfi	r2, r1, #8, #5
  419410:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  419414:	2199      	movs	r1, #153	; 0x99
  419416:	4b23      	ldr	r3, [pc, #140]	; (4194a4 <gauge_init+0x310>)
  419418:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  41941a:	4b20      	ldr	r3, [pc, #128]	; (41949c <gauge_init+0x308>)
  41941c:	681c      	ldr	r4, [r3, #0]
  41941e:	3468      	adds	r4, #104	; 0x68
  419420:	2000      	movs	r0, #0
  419422:	4b22      	ldr	r3, [pc, #136]	; (4194ac <gauge_init+0x318>)
  419424:	4798      	blx	r3
  419426:	300a      	adds	r0, #10
  419428:	00c0      	lsls	r0, r0, #3
  41942a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41942e:	f280 8101 	bge.w	419634 <gauge_init+0x4a0>
  419432:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  419434:	2190      	movs	r1, #144	; 0x90
  419436:	4620      	mov	r0, r4
  419438:	4b1d      	ldr	r3, [pc, #116]	; (4194b0 <gauge_init+0x31c>)
  41943a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
  41943c:	4c17      	ldr	r4, [pc, #92]	; (41949c <gauge_init+0x308>)
  41943e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419440:	22ff      	movs	r2, #255	; 0xff
  419442:	212c      	movs	r1, #44	; 0x2c
  419444:	3068      	adds	r0, #104	; 0x68
  419446:	4b1b      	ldr	r3, [pc, #108]	; (4194b4 <gauge_init+0x320>)
  419448:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41944a:	6820      	ldr	r0, [r4, #0]
  41944c:	3068      	adds	r0, #104	; 0x68
  41944e:	4b16      	ldr	r3, [pc, #88]	; (4194a8 <gauge_init+0x314>)
  419450:	6a1b      	ldr	r3, [r3, #32]
  419452:	f013 0f02 	tst.w	r3, #2
  419456:	f000 80fa 	beq.w	41964e <gauge_init+0x4ba>
  41945a:	2302      	movs	r3, #2
  41945c:	f04f 0200 	mov.w	r2, #0
  419460:	f363 0202 	bfi	r2, r3, #0, #3
  419464:	2108      	movs	r1, #8
  419466:	f361 02c7 	bfi	r2, r1, #3, #5
  41946a:	210b      	movs	r1, #11
  41946c:	f361 220c 	bfi	r2, r1, #8, #5
  419470:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419474:	2129      	movs	r1, #41	; 0x29
  419476:	4b0b      	ldr	r3, [pc, #44]	; (4194a4 <gauge_init+0x310>)
  419478:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41947a:	4c08      	ldr	r4, [pc, #32]	; (41949c <gauge_init+0x308>)
  41947c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41947e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419482:	2101      	movs	r1, #1
  419484:	3068      	adds	r0, #104	; 0x68
  419486:	4b0a      	ldr	r3, [pc, #40]	; (4194b0 <gauge_init+0x31c>)
  419488:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  41948a:	6824      	ldr	r4, [r4, #0]
  41948c:	3468      	adds	r4, #104	; 0x68
  41948e:	2000      	movs	r0, #0
  419490:	4b06      	ldr	r3, [pc, #24]	; (4194ac <gauge_init+0x318>)
  419492:	4798      	blx	r3
  419494:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419498:	0040      	lsls	r0, r0, #1
  41949a:	e00d      	b.n	4194b8 <gauge_init+0x324>
  41949c:	20414824 	.word	0x20414824
  4194a0:	00418951 	.word	0x00418951
  4194a4:	0040a349 	.word	0x0040a349
  4194a8:	20414828 	.word	0x20414828
  4194ac:	00414d4d 	.word	0x00414d4d
  4194b0:	0040a1b9 	.word	0x0040a1b9
  4194b4:	0040a4d9 	.word	0x0040a4d9
  4194b8:	3050      	adds	r0, #80	; 0x50
  4194ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194be:	f280 80c9 	bge.w	419654 <gauge_init+0x4c0>
  4194c2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  4194c4:	2103      	movs	r1, #3
  4194c6:	4620      	mov	r0, r4
  4194c8:	4b71      	ldr	r3, [pc, #452]	; (419690 <gauge_init+0x4fc>)
  4194ca:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  4194cc:	4b71      	ldr	r3, [pc, #452]	; (419694 <gauge_init+0x500>)
  4194ce:	681c      	ldr	r4, [r3, #0]
  4194d0:	3468      	adds	r4, #104	; 0x68
  4194d2:	2000      	movs	r0, #0
  4194d4:	4b70      	ldr	r3, [pc, #448]	; (419698 <gauge_init+0x504>)
  4194d6:	4798      	blx	r3
  4194d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4194dc:	0040      	lsls	r0, r0, #1
  4194de:	3050      	adds	r0, #80	; 0x50
  4194e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194e4:	f280 80c5 	bge.w	419672 <gauge_init+0x4de>
  4194e8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4194ea:	2114      	movs	r1, #20
  4194ec:	4620      	mov	r0, r4
  4194ee:	4b68      	ldr	r3, [pc, #416]	; (419690 <gauge_init+0x4fc>)
  4194f0:	4798      	blx	r3
  4194f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  4194f6:	2000      	movs	r0, #0
  4194f8:	4b67      	ldr	r3, [pc, #412]	; (419698 <gauge_init+0x504>)
  4194fa:	4798      	blx	r3
  4194fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419500:	3050      	adds	r0, #80	; 0x50
  419502:	4b66      	ldr	r3, [pc, #408]	; (41969c <gauge_init+0x508>)
  419504:	fb83 2300 	smull	r2, r3, r3, r0
  419508:	17c2      	asrs	r2, r0, #31
  41950a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41950e:	b212      	sxth	r2, r2
  419510:	e67b      	b.n	41920a <gauge_init+0x76>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  419512:	2000      	movs	r0, #0
  419514:	4b60      	ldr	r3, [pc, #384]	; (419698 <gauge_init+0x504>)
  419516:	4798      	blx	r3
  419518:	3014      	adds	r0, #20
  41951a:	0080      	lsls	r0, r0, #2
  41951c:	4b5f      	ldr	r3, [pc, #380]	; (41969c <gauge_init+0x508>)
  41951e:	fb83 2300 	smull	r2, r3, r3, r0
  419522:	17c2      	asrs	r2, r0, #31
  419524:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419528:	b212      	sxth	r2, r2
  41952a:	e67f      	b.n	41922c <gauge_init+0x98>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  41952c:	2000      	movs	r0, #0
  41952e:	4b5a      	ldr	r3, [pc, #360]	; (419698 <gauge_init+0x504>)
  419530:	4798      	blx	r3
  419532:	300a      	adds	r0, #10
  419534:	00c0      	lsls	r0, r0, #3
  419536:	4b59      	ldr	r3, [pc, #356]	; (41969c <gauge_init+0x508>)
  419538:	fb83 2300 	smull	r2, r3, r3, r0
  41953c:	17c2      	asrs	r2, r0, #31
  41953e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419542:	b212      	sxth	r2, r2
  419544:	e683      	b.n	41924e <gauge_init+0xba>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  419546:	2000      	movs	r0, #0
  419548:	4b53      	ldr	r3, [pc, #332]	; (419698 <gauge_init+0x504>)
  41954a:	4798      	blx	r3
  41954c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419550:	0080      	lsls	r0, r0, #2
  419552:	3050      	adds	r0, #80	; 0x50
  419554:	4b51      	ldr	r3, [pc, #324]	; (41969c <gauge_init+0x508>)
  419556:	fb83 2300 	smull	r2, r3, r3, r0
  41955a:	17c2      	asrs	r2, r0, #31
  41955c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419560:	b212      	sxth	r2, r2
  419562:	e687      	b.n	419274 <gauge_init+0xe0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  419564:	2000      	movs	r0, #0
  419566:	4b4c      	ldr	r3, [pc, #304]	; (419698 <gauge_init+0x504>)
  419568:	4798      	blx	r3
  41956a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41956e:	0080      	lsls	r0, r0, #2
  419570:	3050      	adds	r0, #80	; 0x50
  419572:	4b4a      	ldr	r3, [pc, #296]	; (41969c <gauge_init+0x508>)
  419574:	fb83 2300 	smull	r2, r3, r3, r0
  419578:	17c2      	asrs	r2, r0, #31
  41957a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41957e:	b212      	sxth	r2, r2
  419580:	e68b      	b.n	41929a <gauge_init+0x106>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  419582:	2000      	movs	r0, #0
  419584:	4b44      	ldr	r3, [pc, #272]	; (419698 <gauge_init+0x504>)
  419586:	4798      	blx	r3
  419588:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41958c:	0080      	lsls	r0, r0, #2
  41958e:	3050      	adds	r0, #80	; 0x50
  419590:	4b42      	ldr	r3, [pc, #264]	; (41969c <gauge_init+0x508>)
  419592:	fb83 2300 	smull	r2, r3, r3, r0
  419596:	17c2      	asrs	r2, r0, #31
  419598:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41959c:	b212      	sxth	r2, r2
  41959e:	e68f      	b.n	4192c0 <gauge_init+0x12c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4195a0:	2000      	movs	r0, #0
  4195a2:	4b3d      	ldr	r3, [pc, #244]	; (419698 <gauge_init+0x504>)
  4195a4:	4798      	blx	r3
  4195a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4195aa:	0080      	lsls	r0, r0, #2
  4195ac:	3050      	adds	r0, #80	; 0x50
  4195ae:	4b3b      	ldr	r3, [pc, #236]	; (41969c <gauge_init+0x508>)
  4195b0:	fb83 2300 	smull	r2, r3, r3, r0
  4195b4:	17c2      	asrs	r2, r0, #31
  4195b6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4195ba:	b212      	sxth	r2, r2
  4195bc:	e693      	b.n	4192e6 <gauge_init+0x152>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  4195be:	2000      	movs	r0, #0
  4195c0:	4b35      	ldr	r3, [pc, #212]	; (419698 <gauge_init+0x504>)
  4195c2:	4798      	blx	r3
  4195c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4195c8:	3050      	adds	r0, #80	; 0x50
  4195ca:	4b34      	ldr	r3, [pc, #208]	; (41969c <gauge_init+0x508>)
  4195cc:	fb83 2300 	smull	r2, r3, r3, r0
  4195d0:	17c2      	asrs	r2, r0, #31
  4195d2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4195d6:	b212      	sxth	r2, r2
  4195d8:	e697      	b.n	41930a <gauge_init+0x176>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4195da:	2000      	movs	r0, #0
  4195dc:	4b2e      	ldr	r3, [pc, #184]	; (419698 <gauge_init+0x504>)
  4195de:	4798      	blx	r3
  4195e0:	300a      	adds	r0, #10
  4195e2:	00c0      	lsls	r0, r0, #3
  4195e4:	4b2d      	ldr	r3, [pc, #180]	; (41969c <gauge_init+0x508>)
  4195e6:	fb83 2300 	smull	r2, r3, r3, r0
  4195ea:	17c2      	asrs	r2, r0, #31
  4195ec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4195f0:	b212      	sxth	r2, r2
  4195f2:	e6cc      	b.n	41938e <gauge_init+0x1fa>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4195f4:	2000      	movs	r0, #0
  4195f6:	4b28      	ldr	r3, [pc, #160]	; (419698 <gauge_init+0x504>)
  4195f8:	4798      	blx	r3
  4195fa:	300a      	adds	r0, #10
  4195fc:	00c0      	lsls	r0, r0, #3
  4195fe:	4b27      	ldr	r3, [pc, #156]	; (41969c <gauge_init+0x508>)
  419600:	fb83 2300 	smull	r2, r3, r3, r0
  419604:	17c2      	asrs	r2, r0, #31
  419606:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41960a:	b212      	sxth	r2, r2
  41960c:	e6d0      	b.n	4193b0 <gauge_init+0x21c>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  41960e:	2000      	movs	r0, #0
  419610:	4b21      	ldr	r3, [pc, #132]	; (419698 <gauge_init+0x504>)
  419612:	4798      	blx	r3
  419614:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419618:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41961c:	3050      	adds	r0, #80	; 0x50
  41961e:	4b1f      	ldr	r3, [pc, #124]	; (41969c <gauge_init+0x508>)
  419620:	fb83 2300 	smull	r2, r3, r3, r0
  419624:	17c2      	asrs	r2, r0, #31
  419626:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41962a:	b212      	sxth	r2, r2
  41962c:	e6d4      	b.n	4193d8 <gauge_init+0x244>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41962e:	4b1c      	ldr	r3, [pc, #112]	; (4196a0 <gauge_init+0x50c>)
  419630:	881a      	ldrh	r2, [r3, #0]
  419632:	e6ef      	b.n	419414 <gauge_init+0x280>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  419634:	2000      	movs	r0, #0
  419636:	4b18      	ldr	r3, [pc, #96]	; (419698 <gauge_init+0x504>)
  419638:	4798      	blx	r3
  41963a:	300a      	adds	r0, #10
  41963c:	00c0      	lsls	r0, r0, #3
  41963e:	4b17      	ldr	r3, [pc, #92]	; (41969c <gauge_init+0x508>)
  419640:	fb83 2300 	smull	r2, r3, r3, r0
  419644:	17c2      	asrs	r2, r0, #31
  419646:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41964a:	b212      	sxth	r2, r2
  41964c:	e6f2      	b.n	419434 <gauge_init+0x2a0>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41964e:	4b14      	ldr	r3, [pc, #80]	; (4196a0 <gauge_init+0x50c>)
  419650:	881a      	ldrh	r2, [r3, #0]
  419652:	e70f      	b.n	419474 <gauge_init+0x2e0>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  419654:	2000      	movs	r0, #0
  419656:	4b10      	ldr	r3, [pc, #64]	; (419698 <gauge_init+0x504>)
  419658:	4798      	blx	r3
  41965a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41965e:	0040      	lsls	r0, r0, #1
  419660:	3050      	adds	r0, #80	; 0x50
  419662:	4b0e      	ldr	r3, [pc, #56]	; (41969c <gauge_init+0x508>)
  419664:	fb83 2300 	smull	r2, r3, r3, r0
  419668:	17c2      	asrs	r2, r0, #31
  41966a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41966e:	b212      	sxth	r2, r2
  419670:	e728      	b.n	4194c4 <gauge_init+0x330>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  419672:	2000      	movs	r0, #0
  419674:	4b08      	ldr	r3, [pc, #32]	; (419698 <gauge_init+0x504>)
  419676:	4798      	blx	r3
  419678:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41967c:	0040      	lsls	r0, r0, #1
  41967e:	3050      	adds	r0, #80	; 0x50
  419680:	4b06      	ldr	r3, [pc, #24]	; (41969c <gauge_init+0x508>)
  419682:	fb83 2300 	smull	r2, r3, r3, r0
  419686:	17c2      	asrs	r2, r0, #31
  419688:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41968c:	b212      	sxth	r2, r2
  41968e:	e72c      	b.n	4194ea <gauge_init+0x356>
  419690:	0040a1b9 	.word	0x0040a1b9
  419694:	20414824 	.word	0x20414824
  419698:	00414d4d 	.word	0x00414d4d
  41969c:	66666667 	.word	0x66666667
  4196a0:	0042f86c 	.word	0x0042f86c

004196a4 <arc_init>:
{
  4196a4:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
  4196a6:	4c53      	ldr	r4, [pc, #332]	; (4197f4 <arc_init+0x150>)
  4196a8:	6820      	ldr	r0, [r4, #0]
  4196aa:	301c      	adds	r0, #28
  4196ac:	4b52      	ldr	r3, [pc, #328]	; (4197f8 <arc_init+0x154>)
  4196ae:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
  4196b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4196b2:	4b52      	ldr	r3, [pc, #328]	; (4197fc <arc_init+0x158>)
  4196b4:	899a      	ldrh	r2, [r3, #12]
  4196b6:	2199      	movs	r1, #153	; 0x99
  4196b8:	301c      	adds	r0, #28
  4196ba:	4b51      	ldr	r3, [pc, #324]	; (419800 <arc_init+0x15c>)
  4196bc:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  4196be:	6824      	ldr	r4, [r4, #0]
  4196c0:	341c      	adds	r4, #28
  4196c2:	2000      	movs	r0, #0
  4196c4:	4b4f      	ldr	r3, [pc, #316]	; (419804 <arc_init+0x160>)
  4196c6:	4798      	blx	r3
  4196c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4196cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4196d0:	3050      	adds	r0, #80	; 0x50
  4196d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4196d6:	da5e      	bge.n	419796 <arc_init+0xf2>
  4196d8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4196da:	2190      	movs	r1, #144	; 0x90
  4196dc:	4620      	mov	r0, r4
  4196de:	4d4a      	ldr	r5, [pc, #296]	; (419808 <arc_init+0x164>)
  4196e0:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
  4196e2:	4c44      	ldr	r4, [pc, #272]	; (4197f4 <arc_init+0x150>)
  4196e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  4196e6:	2201      	movs	r2, #1
  4196e8:	2194      	movs	r1, #148	; 0x94
  4196ea:	301c      	adds	r0, #28
  4196ec:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
  4196ee:	6820      	ldr	r0, [r4, #0]
  4196f0:	3020      	adds	r0, #32
  4196f2:	4b41      	ldr	r3, [pc, #260]	; (4197f8 <arc_init+0x154>)
  4196f4:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  4196f6:	6820      	ldr	r0, [r4, #0]
  4196f8:	3020      	adds	r0, #32
  4196fa:	4b40      	ldr	r3, [pc, #256]	; (4197fc <arc_init+0x158>)
  4196fc:	6a1b      	ldr	r3, [r3, #32]
  4196fe:	f013 0f02 	tst.w	r3, #2
  419702:	d058      	beq.n	4197b6 <arc_init+0x112>
  419704:	f04f 0200 	mov.w	r2, #0
  419708:	2306      	movs	r3, #6
  41970a:	f363 0202 	bfi	r2, r3, #0, #3
  41970e:	231a      	movs	r3, #26
  419710:	f363 02c7 	bfi	r2, r3, #3, #5
  419714:	231b      	movs	r3, #27
  419716:	f363 220c 	bfi	r2, r3, #8, #5
  41971a:	2305      	movs	r3, #5
  41971c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  419720:	2199      	movs	r1, #153	; 0x99
  419722:	4b37      	ldr	r3, [pc, #220]	; (419800 <arc_init+0x15c>)
  419724:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  419726:	4b33      	ldr	r3, [pc, #204]	; (4197f4 <arc_init+0x150>)
  419728:	681c      	ldr	r4, [r3, #0]
  41972a:	3420      	adds	r4, #32
  41972c:	2000      	movs	r0, #0
  41972e:	4b35      	ldr	r3, [pc, #212]	; (419804 <arc_init+0x160>)
  419730:	4798      	blx	r3
  419732:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419736:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41973a:	3050      	adds	r0, #80	; 0x50
  41973c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419740:	da47      	bge.n	4197d2 <arc_init+0x12e>
  419742:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  419744:	2190      	movs	r1, #144	; 0x90
  419746:	4620      	mov	r0, r4
  419748:	4c2f      	ldr	r4, [pc, #188]	; (419808 <arc_init+0x164>)
  41974a:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
  41974c:	4d29      	ldr	r5, [pc, #164]	; (4197f4 <arc_init+0x150>)
  41974e:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  419750:	2201      	movs	r2, #1
  419752:	2194      	movs	r1, #148	; 0x94
  419754:	3020      	adds	r0, #32
  419756:	47a0      	blx	r4
    style_init_reset(&styles->arc_knob);
  419758:	6828      	ldr	r0, [r5, #0]
  41975a:	3024      	adds	r0, #36	; 0x24
  41975c:	4b26      	ldr	r3, [pc, #152]	; (4197f8 <arc_init+0x154>)
  41975e:	4798      	blx	r3
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
  419760:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419762:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419766:	2101      	movs	r1, #1
  419768:	3024      	adds	r0, #36	; 0x24
  41976a:	47a0      	blx	r4
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  41976c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41976e:	2200      	movs	r2, #0
  419770:	2110      	movs	r1, #16
  419772:	3024      	adds	r0, #36	; 0x24
  419774:	47a0      	blx	r4
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  419776:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419778:	2200      	movs	r2, #0
  41977a:	2111      	movs	r1, #17
  41977c:	3024      	adds	r0, #36	; 0x24
  41977e:	47a0      	blx	r4
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
  419780:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419782:	2200      	movs	r2, #0
  419784:	2112      	movs	r1, #18
  419786:	3024      	adds	r0, #36	; 0x24
  419788:	47a0      	blx	r4
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
  41978a:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41978c:	2200      	movs	r2, #0
  41978e:	2113      	movs	r1, #19
  419790:	3024      	adds	r0, #36	; 0x24
  419792:	47a0      	blx	r4
  419794:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  419796:	2000      	movs	r0, #0
  419798:	4b1a      	ldr	r3, [pc, #104]	; (419804 <arc_init+0x160>)
  41979a:	4798      	blx	r3
  41979c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4197a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4197a4:	3050      	adds	r0, #80	; 0x50
  4197a6:	4b19      	ldr	r3, [pc, #100]	; (41980c <arc_init+0x168>)
  4197a8:	fb83 2300 	smull	r2, r3, r3, r0
  4197ac:	17c2      	asrs	r2, r0, #31
  4197ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4197b2:	b212      	sxth	r2, r2
  4197b4:	e791      	b.n	4196da <arc_init+0x36>
  4197b6:	2302      	movs	r3, #2
  4197b8:	f04f 0200 	mov.w	r2, #0
  4197bc:	f363 0202 	bfi	r2, r3, #0, #3
  4197c0:	2108      	movs	r1, #8
  4197c2:	f361 02c7 	bfi	r2, r1, #3, #5
  4197c6:	2109      	movs	r1, #9
  4197c8:	f361 220c 	bfi	r2, r1, #8, #5
  4197cc:	f363 324f 	bfi	r2, r3, #13, #3
  4197d0:	e7a6      	b.n	419720 <arc_init+0x7c>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  4197d2:	2000      	movs	r0, #0
  4197d4:	4b0b      	ldr	r3, [pc, #44]	; (419804 <arc_init+0x160>)
  4197d6:	4798      	blx	r3
  4197d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4197dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4197e0:	3050      	adds	r0, #80	; 0x50
  4197e2:	4b0a      	ldr	r3, [pc, #40]	; (41980c <arc_init+0x168>)
  4197e4:	fb83 2300 	smull	r2, r3, r3, r0
  4197e8:	17c2      	asrs	r2, r0, #31
  4197ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4197ee:	b212      	sxth	r2, r2
  4197f0:	e7a8      	b.n	419744 <arc_init+0xa0>
  4197f2:	bf00      	nop
  4197f4:	20414824 	.word	0x20414824
  4197f8:	00418951 	.word	0x00418951
  4197fc:	20414828 	.word	0x20414828
  419800:	0040a349 	.word	0x0040a349
  419804:	00414d4d 	.word	0x00414d4d
  419808:	0040a1b9 	.word	0x0040a1b9
  41980c:	66666667 	.word	0x66666667

00419810 <chart_init>:
{
  419810:	b510      	push	{r4, lr}
    style_init_reset(&styles->chart_bg);
  419812:	4c9a      	ldr	r4, [pc, #616]	; (419a7c <chart_init+0x26c>)
  419814:	6820      	ldr	r0, [r4, #0]
  419816:	3044      	adds	r0, #68	; 0x44
  419818:	4b99      	ldr	r3, [pc, #612]	; (419a80 <chart_init+0x270>)
  41981a:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  41981c:	6820      	ldr	r0, [r4, #0]
  41981e:	3044      	adds	r0, #68	; 0x44
  419820:	4b98      	ldr	r3, [pc, #608]	; (419a84 <chart_init+0x274>)
  419822:	6a1b      	ldr	r3, [r3, #32]
  419824:	f013 0f02 	tst.w	r3, #2
  419828:	f000 80ab 	beq.w	419982 <chart_init+0x172>
  41982c:	f04f 0200 	mov.w	r2, #0
  419830:	2305      	movs	r3, #5
  419832:	f363 0202 	bfi	r2, r3, #0, #3
  419836:	2315      	movs	r3, #21
  419838:	f363 02c7 	bfi	r2, r3, #3, #5
  41983c:	f363 220c 	bfi	r2, r3, #8, #5
  419840:	2302      	movs	r3, #2
  419842:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419846:	f248 0189 	movw	r1, #32905	; 0x8089
  41984a:	4b8f      	ldr	r3, [pc, #572]	; (419a88 <chart_init+0x278>)
  41984c:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
  41984e:	4c8b      	ldr	r4, [pc, #556]	; (419a7c <chart_init+0x26c>)
  419850:	6820      	ldr	r0, [r4, #0]
  419852:	3048      	adds	r0, #72	; 0x48
  419854:	4b8a      	ldr	r3, [pc, #552]	; (419a80 <chart_init+0x270>)
  419856:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  419858:	6824      	ldr	r4, [r4, #0]
  41985a:	3448      	adds	r4, #72	; 0x48
  41985c:	2000      	movs	r0, #0
  41985e:	4b8b      	ldr	r3, [pc, #556]	; (419a8c <chart_init+0x27c>)
  419860:	4798      	blx	r3
  419862:	3050      	adds	r0, #80	; 0x50
  419864:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419868:	f280 809a 	bge.w	4199a0 <chart_init+0x190>
  41986c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41986e:	2190      	movs	r1, #144	; 0x90
  419870:	4620      	mov	r0, r4
  419872:	4b87      	ldr	r3, [pc, #540]	; (419a90 <chart_init+0x280>)
  419874:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419876:	4b81      	ldr	r3, [pc, #516]	; (419a7c <chart_init+0x26c>)
  419878:	681c      	ldr	r4, [r3, #0]
  41987a:	3448      	adds	r4, #72	; 0x48
  41987c:	2000      	movs	r0, #0
  41987e:	4b83      	ldr	r3, [pc, #524]	; (419a8c <chart_init+0x27c>)
  419880:	4798      	blx	r3
  419882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419886:	0040      	lsls	r0, r0, #1
  419888:	3050      	adds	r0, #80	; 0x50
  41988a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41988e:	f280 8093 	bge.w	4199b8 <chart_init+0x1a8>
  419892:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  419894:	2192      	movs	r1, #146	; 0x92
  419896:	4620      	mov	r0, r4
  419898:	4b7d      	ldr	r3, [pc, #500]	; (419a90 <chart_init+0x280>)
  41989a:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41989c:	4b77      	ldr	r3, [pc, #476]	; (419a7c <chart_init+0x26c>)
  41989e:	681c      	ldr	r4, [r3, #0]
  4198a0:	3448      	adds	r4, #72	; 0x48
  4198a2:	2000      	movs	r0, #0
  4198a4:	4b79      	ldr	r3, [pc, #484]	; (419a8c <chart_init+0x27c>)
  4198a6:	4798      	blx	r3
  4198a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4198ac:	0040      	lsls	r0, r0, #1
  4198ae:	3050      	adds	r0, #80	; 0x50
  4198b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4198b4:	f280 808f 	bge.w	4199d6 <chart_init+0x1c6>
  4198b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  4198ba:	2193      	movs	r1, #147	; 0x93
  4198bc:	4620      	mov	r0, r4
  4198be:	4b74      	ldr	r3, [pc, #464]	; (419a90 <chart_init+0x280>)
  4198c0:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  4198c2:	4b6e      	ldr	r3, [pc, #440]	; (419a7c <chart_init+0x26c>)
  4198c4:	6818      	ldr	r0, [r3, #0]
  4198c6:	3048      	adds	r0, #72	; 0x48
  4198c8:	4b6e      	ldr	r3, [pc, #440]	; (419a84 <chart_init+0x274>)
  4198ca:	6a1b      	ldr	r3, [r3, #32]
  4198cc:	f013 0f02 	tst.w	r3, #2
  4198d0:	f000 8090 	beq.w	4199f4 <chart_init+0x1e4>
  4198d4:	f04f 0200 	mov.w	r2, #0
  4198d8:	2306      	movs	r3, #6
  4198da:	f363 0202 	bfi	r2, r3, #0, #3
  4198de:	231a      	movs	r3, #26
  4198e0:	f363 02c7 	bfi	r2, r3, #3, #5
  4198e4:	231c      	movs	r3, #28
  4198e6:	f363 220c 	bfi	r2, r3, #8, #5
  4198ea:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  4198ee:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4198f2:	2199      	movs	r1, #153	; 0x99
  4198f4:	4b64      	ldr	r3, [pc, #400]	; (419a88 <chart_init+0x278>)
  4198f6:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
  4198f8:	4c60      	ldr	r4, [pc, #384]	; (419a7c <chart_init+0x26c>)
  4198fa:	6820      	ldr	r0, [r4, #0]
  4198fc:	304c      	adds	r0, #76	; 0x4c
  4198fe:	4b60      	ldr	r3, [pc, #384]	; (419a80 <chart_init+0x270>)
  419900:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  419902:	6824      	ldr	r4, [r4, #0]
  419904:	344c      	adds	r4, #76	; 0x4c
  419906:	2000      	movs	r0, #0
  419908:	4b60      	ldr	r3, [pc, #384]	; (419a8c <chart_init+0x27c>)
  41990a:	4798      	blx	r3
  41990c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419910:	3050      	adds	r0, #80	; 0x50
  419912:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419916:	da7c      	bge.n	419a12 <chart_init+0x202>
  419918:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41991a:	2190      	movs	r1, #144	; 0x90
  41991c:	4620      	mov	r0, r4
  41991e:	4b5c      	ldr	r3, [pc, #368]	; (419a90 <chart_init+0x280>)
  419920:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  419922:	4b56      	ldr	r3, [pc, #344]	; (419a7c <chart_init+0x26c>)
  419924:	681c      	ldr	r4, [r3, #0]
  419926:	344c      	adds	r4, #76	; 0x4c
  419928:	2000      	movs	r0, #0
  41992a:	4b58      	ldr	r3, [pc, #352]	; (419a8c <chart_init+0x27c>)
  41992c:	4798      	blx	r3
  41992e:	3014      	adds	r0, #20
  419930:	0080      	lsls	r0, r0, #2
  419932:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419936:	da7a      	bge.n	419a2e <chart_init+0x21e>
  419938:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41993a:	2103      	movs	r1, #3
  41993c:	4620      	mov	r0, r4
  41993e:	4b54      	ldr	r3, [pc, #336]	; (419a90 <chart_init+0x280>)
  419940:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  419942:	4b4e      	ldr	r3, [pc, #312]	; (419a7c <chart_init+0x26c>)
  419944:	681c      	ldr	r4, [r3, #0]
  419946:	344c      	adds	r4, #76	; 0x4c
  419948:	2000      	movs	r0, #0
  41994a:	4b50      	ldr	r3, [pc, #320]	; (419a8c <chart_init+0x27c>)
  41994c:	4798      	blx	r3
  41994e:	3028      	adds	r0, #40	; 0x28
  419950:	0040      	lsls	r0, r0, #1
  419952:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419956:	da77      	bge.n	419a48 <chart_init+0x238>
  419958:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41995a:	2114      	movs	r1, #20
  41995c:	4620      	mov	r0, r4
  41995e:	4b4c      	ldr	r3, [pc, #304]	; (419a90 <chart_init+0x280>)
  419960:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  419962:	4b46      	ldr	r3, [pc, #280]	; (419a7c <chart_init+0x26c>)
  419964:	681c      	ldr	r4, [r3, #0]
  419966:	344c      	adds	r4, #76	; 0x4c
  419968:	2000      	movs	r0, #0
  41996a:	4b48      	ldr	r3, [pc, #288]	; (419a8c <chart_init+0x27c>)
  41996c:	4798      	blx	r3
  41996e:	3050      	adds	r0, #80	; 0x50
  419970:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419974:	da75      	bge.n	419a62 <chart_init+0x252>
  419976:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419978:	2101      	movs	r1, #1
  41997a:	4620      	mov	r0, r4
  41997c:	4b44      	ldr	r3, [pc, #272]	; (419a90 <chart_init+0x280>)
  41997e:	4798      	blx	r3
  419980:	bd10      	pop	{r4, pc}
  419982:	f04f 0200 	mov.w	r2, #0
  419986:	2305      	movs	r3, #5
  419988:	f363 0202 	bfi	r2, r3, #0, #3
  41998c:	2314      	movs	r3, #20
  41998e:	f363 02c7 	bfi	r2, r3, #3, #5
  419992:	2317      	movs	r3, #23
  419994:	f363 220c 	bfi	r2, r3, #8, #5
  419998:	2303      	movs	r3, #3
  41999a:	f363 324f 	bfi	r2, r3, #13, #3
  41999e:	e752      	b.n	419846 <chart_init+0x36>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  4199a0:	2000      	movs	r0, #0
  4199a2:	4b3a      	ldr	r3, [pc, #232]	; (419a8c <chart_init+0x27c>)
  4199a4:	4798      	blx	r3
  4199a6:	3050      	adds	r0, #80	; 0x50
  4199a8:	4b3a      	ldr	r3, [pc, #232]	; (419a94 <chart_init+0x284>)
  4199aa:	fb83 2300 	smull	r2, r3, r3, r0
  4199ae:	17c2      	asrs	r2, r0, #31
  4199b0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4199b4:	b212      	sxth	r2, r2
  4199b6:	e75a      	b.n	41986e <chart_init+0x5e>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4199b8:	2000      	movs	r0, #0
  4199ba:	4b34      	ldr	r3, [pc, #208]	; (419a8c <chart_init+0x27c>)
  4199bc:	4798      	blx	r3
  4199be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4199c2:	0040      	lsls	r0, r0, #1
  4199c4:	3050      	adds	r0, #80	; 0x50
  4199c6:	4b33      	ldr	r3, [pc, #204]	; (419a94 <chart_init+0x284>)
  4199c8:	fb83 2300 	smull	r2, r3, r3, r0
  4199cc:	17c2      	asrs	r2, r0, #31
  4199ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4199d2:	b212      	sxth	r2, r2
  4199d4:	e75e      	b.n	419894 <chart_init+0x84>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4199d6:	2000      	movs	r0, #0
  4199d8:	4b2c      	ldr	r3, [pc, #176]	; (419a8c <chart_init+0x27c>)
  4199da:	4798      	blx	r3
  4199dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4199e0:	0040      	lsls	r0, r0, #1
  4199e2:	3050      	adds	r0, #80	; 0x50
  4199e4:	4b2b      	ldr	r3, [pc, #172]	; (419a94 <chart_init+0x284>)
  4199e6:	fb83 2300 	smull	r2, r3, r3, r0
  4199ea:	17c2      	asrs	r2, r0, #31
  4199ec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4199f0:	b212      	sxth	r2, r2
  4199f2:	e762      	b.n	4198ba <chart_init+0xaa>
  4199f4:	f04f 0200 	mov.w	r2, #0
  4199f8:	2304      	movs	r3, #4
  4199fa:	f363 0202 	bfi	r2, r3, #0, #3
  4199fe:	2310      	movs	r3, #16
  419a00:	f363 02c7 	bfi	r2, r3, #3, #5
  419a04:	2312      	movs	r3, #18
  419a06:	f363 220c 	bfi	r2, r3, #8, #5
  419a0a:	2302      	movs	r3, #2
  419a0c:	f363 324f 	bfi	r2, r3, #13, #3
  419a10:	e76f      	b.n	4198f2 <chart_init+0xe2>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  419a12:	2000      	movs	r0, #0
  419a14:	4b1d      	ldr	r3, [pc, #116]	; (419a8c <chart_init+0x27c>)
  419a16:	4798      	blx	r3
  419a18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419a1c:	3050      	adds	r0, #80	; 0x50
  419a1e:	4b1d      	ldr	r3, [pc, #116]	; (419a94 <chart_init+0x284>)
  419a20:	fb83 2300 	smull	r2, r3, r3, r0
  419a24:	17c2      	asrs	r2, r0, #31
  419a26:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419a2a:	b212      	sxth	r2, r2
  419a2c:	e775      	b.n	41991a <chart_init+0x10a>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  419a2e:	2000      	movs	r0, #0
  419a30:	4b16      	ldr	r3, [pc, #88]	; (419a8c <chart_init+0x27c>)
  419a32:	4798      	blx	r3
  419a34:	3014      	adds	r0, #20
  419a36:	0080      	lsls	r0, r0, #2
  419a38:	4b16      	ldr	r3, [pc, #88]	; (419a94 <chart_init+0x284>)
  419a3a:	fb83 2300 	smull	r2, r3, r3, r0
  419a3e:	17c2      	asrs	r2, r0, #31
  419a40:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419a44:	b212      	sxth	r2, r2
  419a46:	e778      	b.n	41993a <chart_init+0x12a>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  419a48:	2000      	movs	r0, #0
  419a4a:	4b10      	ldr	r3, [pc, #64]	; (419a8c <chart_init+0x27c>)
  419a4c:	4798      	blx	r3
  419a4e:	3028      	adds	r0, #40	; 0x28
  419a50:	0040      	lsls	r0, r0, #1
  419a52:	4b10      	ldr	r3, [pc, #64]	; (419a94 <chart_init+0x284>)
  419a54:	fb83 2300 	smull	r2, r3, r3, r0
  419a58:	17c2      	asrs	r2, r0, #31
  419a5a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419a5e:	b212      	sxth	r2, r2
  419a60:	e77b      	b.n	41995a <chart_init+0x14a>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  419a62:	2000      	movs	r0, #0
  419a64:	4b09      	ldr	r3, [pc, #36]	; (419a8c <chart_init+0x27c>)
  419a66:	4798      	blx	r3
  419a68:	3050      	adds	r0, #80	; 0x50
  419a6a:	4b0a      	ldr	r3, [pc, #40]	; (419a94 <chart_init+0x284>)
  419a6c:	fb83 2300 	smull	r2, r3, r3, r0
  419a70:	17c2      	asrs	r2, r0, #31
  419a72:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419a76:	b212      	sxth	r2, r2
  419a78:	e77e      	b.n	419978 <chart_init+0x168>
  419a7a:	bf00      	nop
  419a7c:	20414824 	.word	0x20414824
  419a80:	00418951 	.word	0x00418951
  419a84:	20414828 	.word	0x20414828
  419a88:	0040a349 	.word	0x0040a349
  419a8c:	00414d4d 	.word	0x00414d4d
  419a90:	0040a1b9 	.word	0x0040a1b9
  419a94:	66666667 	.word	0x66666667

00419a98 <calendar_init>:
{
  419a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->calendar_header);
  419a9a:	4cbd      	ldr	r4, [pc, #756]	; (419d90 <calendar_init+0x2f8>)
  419a9c:	6820      	ldr	r0, [r4, #0]
  419a9e:	3034      	adds	r0, #52	; 0x34
  419aa0:	4bbc      	ldr	r3, [pc, #752]	; (419d94 <calendar_init+0x2fc>)
  419aa2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  419aa4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419aa6:	2200      	movs	r2, #0
  419aa8:	2110      	movs	r1, #16
  419aaa:	3034      	adds	r0, #52	; 0x34
  419aac:	4bba      	ldr	r3, [pc, #744]	; (419d98 <calendar_init+0x300>)
  419aae:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419ab0:	6824      	ldr	r4, [r4, #0]
  419ab2:	3434      	adds	r4, #52	; 0x34
  419ab4:	2000      	movs	r0, #0
  419ab6:	4bb9      	ldr	r3, [pc, #740]	; (419d9c <calendar_init+0x304>)
  419ab8:	4798      	blx	r3
  419aba:	2801      	cmp	r0, #1
  419abc:	f240 81e5 	bls.w	419e8a <calendar_init+0x3f2>
  419ac0:	2000      	movs	r0, #0
  419ac2:	4bb7      	ldr	r3, [pc, #732]	; (419da0 <calendar_init+0x308>)
  419ac4:	4798      	blx	r3
  419ac6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419aca:	0040      	lsls	r0, r0, #1
  419acc:	3050      	adds	r0, #80	; 0x50
  419ace:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419ad2:	f280 81f3 	bge.w	419ebc <calendar_init+0x424>
  419ad6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419ad8:	2112      	movs	r1, #18
  419ada:	4620      	mov	r0, r4
  419adc:	4bae      	ldr	r3, [pc, #696]	; (419d98 <calendar_init+0x300>)
  419ade:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419ae0:	4bab      	ldr	r3, [pc, #684]	; (419d90 <calendar_init+0x2f8>)
  419ae2:	681c      	ldr	r4, [r3, #0]
  419ae4:	3434      	adds	r4, #52	; 0x34
  419ae6:	2000      	movs	r0, #0
  419ae8:	4bac      	ldr	r3, [pc, #688]	; (419d9c <calendar_init+0x304>)
  419aea:	4798      	blx	r3
  419aec:	2801      	cmp	r0, #1
  419aee:	f240 81f4 	bls.w	419eda <calendar_init+0x442>
  419af2:	2000      	movs	r0, #0
  419af4:	4baa      	ldr	r3, [pc, #680]	; (419da0 <calendar_init+0x308>)
  419af6:	4798      	blx	r3
  419af8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419afc:	0040      	lsls	r0, r0, #1
  419afe:	3050      	adds	r0, #80	; 0x50
  419b00:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419b04:	f280 8202 	bge.w	419f0c <calendar_init+0x474>
  419b08:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419b0a:	2113      	movs	r1, #19
  419b0c:	4620      	mov	r0, r4
  419b0e:	4da2      	ldr	r5, [pc, #648]	; (419d98 <calendar_init+0x300>)
  419b10:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  419b12:	4c9f      	ldr	r4, [pc, #636]	; (419d90 <calendar_init+0x2f8>)
  419b14:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419b16:	2200      	movs	r2, #0
  419b18:	2111      	movs	r1, #17
  419b1a:	3034      	adds	r0, #52	; 0x34
  419b1c:	47a8      	blx	r5
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419b1e:	6824      	ldr	r4, [r4, #0]
  419b20:	3434      	adds	r4, #52	; 0x34
  419b22:	2000      	movs	r0, #0
  419b24:	4b9d      	ldr	r3, [pc, #628]	; (419d9c <calendar_init+0x304>)
  419b26:	4798      	blx	r3
  419b28:	2801      	cmp	r0, #1
  419b2a:	f240 81fe 	bls.w	419f2a <calendar_init+0x492>
  419b2e:	2000      	movs	r0, #0
  419b30:	4b9b      	ldr	r3, [pc, #620]	; (419da0 <calendar_init+0x308>)
  419b32:	4798      	blx	r3
  419b34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b38:	0040      	lsls	r0, r0, #1
  419b3a:	3050      	adds	r0, #80	; 0x50
  419b3c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419b40:	f280 820c 	bge.w	419f5c <calendar_init+0x4c4>
  419b44:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  419b46:	2115      	movs	r1, #21
  419b48:	4620      	mov	r0, r4
  419b4a:	4b93      	ldr	r3, [pc, #588]	; (419d98 <calendar_init+0x300>)
  419b4c:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419b4e:	4b90      	ldr	r3, [pc, #576]	; (419d90 <calendar_init+0x2f8>)
  419b50:	681c      	ldr	r4, [r3, #0]
  419b52:	3434      	adds	r4, #52	; 0x34
  419b54:	2000      	movs	r0, #0
  419b56:	4b91      	ldr	r3, [pc, #580]	; (419d9c <calendar_init+0x304>)
  419b58:	4798      	blx	r3
  419b5a:	2801      	cmp	r0, #1
  419b5c:	f240 820d 	bls.w	419f7a <calendar_init+0x4e2>
  419b60:	2000      	movs	r0, #0
  419b62:	4b8f      	ldr	r3, [pc, #572]	; (419da0 <calendar_init+0x308>)
  419b64:	4798      	blx	r3
  419b66:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b6a:	0040      	lsls	r0, r0, #1
  419b6c:	3050      	adds	r0, #80	; 0x50
  419b6e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419b72:	f280 821b 	bge.w	419fac <calendar_init+0x514>
  419b76:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  419b78:	2116      	movs	r1, #22
  419b7a:	4620      	mov	r0, r4
  419b7c:	4b86      	ldr	r3, [pc, #536]	; (419d98 <calendar_init+0x300>)
  419b7e:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  419b80:	4b83      	ldr	r3, [pc, #524]	; (419d90 <calendar_init+0x2f8>)
  419b82:	6818      	ldr	r0, [r3, #0]
  419b84:	3034      	adds	r0, #52	; 0x34
  419b86:	4b87      	ldr	r3, [pc, #540]	; (419da4 <calendar_init+0x30c>)
  419b88:	6a1b      	ldr	r3, [r3, #32]
  419b8a:	f013 0f02 	tst.w	r3, #2
  419b8e:	f000 821c 	beq.w	419fca <calendar_init+0x532>
  419b92:	f04f 0200 	mov.w	r2, #0
  419b96:	2304      	movs	r3, #4
  419b98:	f363 0202 	bfi	r2, r3, #0, #3
  419b9c:	2311      	movs	r3, #17
  419b9e:	f363 02c7 	bfi	r2, r3, #3, #5
  419ba2:	f363 220c 	bfi	r2, r3, #8, #5
  419ba6:	2302      	movs	r3, #2
  419ba8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419bac:	f249 0189 	movw	r1, #37001	; 0x9089
  419bb0:	4b7d      	ldr	r3, [pc, #500]	; (419da8 <calendar_init+0x310>)
  419bb2:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
  419bb4:	4c76      	ldr	r4, [pc, #472]	; (419d90 <calendar_init+0x2f8>)
  419bb6:	6820      	ldr	r0, [r4, #0]
  419bb8:	3038      	adds	r0, #56	; 0x38
  419bba:	4b76      	ldr	r3, [pc, #472]	; (419d94 <calendar_init+0x2fc>)
  419bbc:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  419bbe:	6820      	ldr	r0, [r4, #0]
  419bc0:	3038      	adds	r0, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
  419bc2:	4b78      	ldr	r3, [pc, #480]	; (419da4 <calendar_init+0x30c>)
  419bc4:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  419bc6:	f013 0f02 	tst.w	r3, #2
  419bca:	f000 8201 	beq.w	419fd0 <calendar_init+0x538>
  419bce:	f04f 0200 	mov.w	r2, #0
  419bd2:	2302      	movs	r3, #2
  419bd4:	f363 0202 	bfi	r2, r3, #0, #3
  419bd8:	2306      	movs	r3, #6
  419bda:	f363 02c7 	bfi	r2, r3, #3, #5
  419bde:	2309      	movs	r3, #9
  419be0:	f363 220c 	bfi	r2, r3, #8, #5
  419be4:	f36f 324f 	bfc	r2, #13, #3
  419be8:	f248 0189 	movw	r1, #32905	; 0x8089
  419bec:	4b6e      	ldr	r3, [pc, #440]	; (419da8 <calendar_init+0x310>)
  419bee:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419bf0:	4b67      	ldr	r3, [pc, #412]	; (419d90 <calendar_init+0x2f8>)
  419bf2:	681c      	ldr	r4, [r3, #0]
  419bf4:	3438      	adds	r4, #56	; 0x38
  419bf6:	2000      	movs	r0, #0
  419bf8:	4b68      	ldr	r3, [pc, #416]	; (419d9c <calendar_init+0x304>)
  419bfa:	4798      	blx	r3
  419bfc:	2801      	cmp	r0, #1
  419bfe:	f240 81f2 	bls.w	419fe6 <calendar_init+0x54e>
  419c02:	2000      	movs	r0, #0
  419c04:	4b66      	ldr	r3, [pc, #408]	; (419da0 <calendar_init+0x308>)
  419c06:	4798      	blx	r3
  419c08:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c0c:	0040      	lsls	r0, r0, #1
  419c0e:	3050      	adds	r0, #80	; 0x50
  419c10:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c14:	f280 8200 	bge.w	41a018 <calendar_init+0x580>
  419c18:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419c1a:	2112      	movs	r1, #18
  419c1c:	4620      	mov	r0, r4
  419c1e:	4b5e      	ldr	r3, [pc, #376]	; (419d98 <calendar_init+0x300>)
  419c20:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419c22:	4b5b      	ldr	r3, [pc, #364]	; (419d90 <calendar_init+0x2f8>)
  419c24:	681c      	ldr	r4, [r3, #0]
  419c26:	3438      	adds	r4, #56	; 0x38
  419c28:	2000      	movs	r0, #0
  419c2a:	4b5c      	ldr	r3, [pc, #368]	; (419d9c <calendar_init+0x304>)
  419c2c:	4798      	blx	r3
  419c2e:	2801      	cmp	r0, #1
  419c30:	f240 8201 	bls.w	41a036 <calendar_init+0x59e>
  419c34:	2000      	movs	r0, #0
  419c36:	4b5a      	ldr	r3, [pc, #360]	; (419da0 <calendar_init+0x308>)
  419c38:	4798      	blx	r3
  419c3a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c3e:	0040      	lsls	r0, r0, #1
  419c40:	3050      	adds	r0, #80	; 0x50
  419c42:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c46:	f280 820f 	bge.w	41a068 <calendar_init+0x5d0>
  419c4a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419c4c:	2113      	movs	r1, #19
  419c4e:	4620      	mov	r0, r4
  419c50:	4b51      	ldr	r3, [pc, #324]	; (419d98 <calendar_init+0x300>)
  419c52:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419c54:	4b4e      	ldr	r3, [pc, #312]	; (419d90 <calendar_init+0x2f8>)
  419c56:	681c      	ldr	r4, [r3, #0]
  419c58:	3438      	adds	r4, #56	; 0x38
  419c5a:	2000      	movs	r0, #0
  419c5c:	4b4f      	ldr	r3, [pc, #316]	; (419d9c <calendar_init+0x304>)
  419c5e:	4798      	blx	r3
  419c60:	2801      	cmp	r0, #1
  419c62:	f240 8210 	bls.w	41a086 <calendar_init+0x5ee>
  419c66:	2000      	movs	r0, #0
  419c68:	4b4d      	ldr	r3, [pc, #308]	; (419da0 <calendar_init+0x308>)
  419c6a:	4798      	blx	r3
  419c6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c70:	0040      	lsls	r0, r0, #1
  419c72:	3050      	adds	r0, #80	; 0x50
  419c74:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c78:	f280 822a 	bge.w	41a0d0 <calendar_init+0x638>
  419c7c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419c7e:	2111      	movs	r1, #17
  419c80:	4620      	mov	r0, r4
  419c82:	4b45      	ldr	r3, [pc, #276]	; (419d98 <calendar_init+0x300>)
  419c84:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
  419c86:	4c42      	ldr	r4, [pc, #264]	; (419d90 <calendar_init+0x2f8>)
  419c88:	6820      	ldr	r0, [r4, #0]
  419c8a:	3030      	adds	r0, #48	; 0x30
  419c8c:	4b41      	ldr	r3, [pc, #260]	; (419d94 <calendar_init+0x2fc>)
  419c8e:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  419c90:	6824      	ldr	r4, [r4, #0]
  419c92:	3430      	adds	r4, #48	; 0x30
  419c94:	2000      	movs	r0, #0
  419c96:	4b42      	ldr	r3, [pc, #264]	; (419da0 <calendar_init+0x308>)
  419c98:	4798      	blx	r3
  419c9a:	3014      	adds	r0, #20
  419c9c:	0080      	lsls	r0, r0, #2
  419c9e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419ca2:	f280 8224 	bge.w	41a0ee <calendar_init+0x656>
  419ca6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419ca8:	2101      	movs	r1, #1
  419caa:	4620      	mov	r0, r4
  419cac:	4b3a      	ldr	r3, [pc, #232]	; (419d98 <calendar_init+0x300>)
  419cae:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  419cb0:	4b37      	ldr	r3, [pc, #220]	; (419d90 <calendar_init+0x2f8>)
  419cb2:	6818      	ldr	r0, [r3, #0]
  419cb4:	3030      	adds	r0, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  419cb6:	4b3b      	ldr	r3, [pc, #236]	; (419da4 <calendar_init+0x30c>)
  419cb8:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  419cba:	f013 0f02 	tst.w	r3, #2
  419cbe:	f000 8223 	beq.w	41a108 <calendar_init+0x670>
  419cc2:	f04f 0200 	mov.w	r2, #0
  419cc6:	2302      	movs	r3, #2
  419cc8:	f363 0202 	bfi	r2, r3, #0, #3
  419ccc:	2306      	movs	r3, #6
  419cce:	f363 02c7 	bfi	r2, r3, #3, #5
  419cd2:	2309      	movs	r3, #9
  419cd4:	f363 220c 	bfi	r2, r3, #8, #5
  419cd8:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419cdc:	f248 1189 	movw	r1, #33161	; 0x8189
  419ce0:	4d31      	ldr	r5, [pc, #196]	; (419da8 <calendar_init+0x310>)
  419ce2:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
  419ce4:	4c2a      	ldr	r4, [pc, #168]	; (419d90 <calendar_init+0x2f8>)
  419ce6:	6820      	ldr	r0, [r4, #0]
  419ce8:	4b30      	ldr	r3, [pc, #192]	; (419dac <calendar_init+0x314>)
  419cea:	889a      	ldrh	r2, [r3, #4]
  419cec:	f24a 0189 	movw	r1, #41097	; 0xa089
  419cf0:	3030      	adds	r0, #48	; 0x30
  419cf2:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  419cf4:	6820      	ldr	r0, [r4, #0]
  419cf6:	3030      	adds	r0, #48	; 0x30
  419cf8:	4b2a      	ldr	r3, [pc, #168]	; (419da4 <calendar_init+0x30c>)
  419cfa:	6a1b      	ldr	r3, [r3, #32]
  419cfc:	f013 0f02 	tst.w	r3, #2
  419d00:	f000 8205 	beq.w	41a10e <calendar_init+0x676>
  419d04:	2233      	movs	r2, #51	; 0x33
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419d06:	f44f 7196 	mov.w	r1, #300	; 0x12c
  419d0a:	4d29      	ldr	r5, [pc, #164]	; (419db0 <calendar_init+0x318>)
  419d0c:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
  419d0e:	4c20      	ldr	r4, [pc, #128]	; (419d90 <calendar_init+0x2f8>)
  419d10:	6820      	ldr	r0, [r4, #0]
  419d12:	2233      	movs	r2, #51	; 0x33
  419d14:	f241 012c 	movw	r1, #4140	; 0x102c
  419d18:	3030      	adds	r0, #48	; 0x30
  419d1a:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
  419d1c:	6820      	ldr	r0, [r4, #0]
  419d1e:	22ff      	movs	r2, #255	; 0xff
  419d20:	f44f 710b 	mov.w	r1, #556	; 0x22c
  419d24:	3030      	adds	r0, #48	; 0x30
  419d26:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
  419d28:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419d2a:	4b20      	ldr	r3, [pc, #128]	; (419dac <calendar_init+0x314>)
  419d2c:	881a      	ldrh	r2, [r3, #0]
  419d2e:	f248 2189 	movw	r1, #33417	; 0x8289
  419d32:	3030      	adds	r0, #48	; 0x30
  419d34:	4e1c      	ldr	r6, [pc, #112]	; (419da8 <calendar_init+0x310>)
  419d36:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
  419d38:	6820      	ldr	r0, [r4, #0]
  419d3a:	4d1a      	ldr	r5, [pc, #104]	; (419da4 <calendar_init+0x30c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419d3c:	89aa      	ldrh	r2, [r5, #12]
  419d3e:	f240 2129 	movw	r1, #553	; 0x229
  419d42:	3030      	adds	r0, #48	; 0x30
  419d44:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  419d46:	6820      	ldr	r0, [r4, #0]
  419d48:	3030      	adds	r0, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
  419d4a:	6a2b      	ldr	r3, [r5, #32]
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  419d4c:	f013 0f02 	tst.w	r3, #2
  419d50:	f000 81df 	beq.w	41a112 <calendar_init+0x67a>
  419d54:	f04f 0200 	mov.w	r2, #0
  419d58:	2303      	movs	r3, #3
  419d5a:	f363 0202 	bfi	r2, r3, #0, #3
  419d5e:	230c      	movs	r3, #12
  419d60:	f363 02c7 	bfi	r2, r3, #3, #5
  419d64:	f363 220c 	bfi	r2, r3, #8, #5
  419d68:	2301      	movs	r3, #1
  419d6a:	f363 324f 	bfi	r2, r3, #13, #3
  419d6e:	2129      	movs	r1, #41	; 0x29
  419d70:	4d0d      	ldr	r5, [pc, #52]	; (419da8 <calendar_init+0x310>)
  419d72:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  419d74:	4c06      	ldr	r4, [pc, #24]	; (419d90 <calendar_init+0x2f8>)
  419d76:	6820      	ldr	r0, [r4, #0]
  419d78:	4e0a      	ldr	r6, [pc, #40]	; (419da4 <calendar_init+0x30c>)
  419d7a:	89b2      	ldrh	r2, [r6, #12]
  419d7c:	f240 1129 	movw	r1, #297	; 0x129
  419d80:	3030      	adds	r0, #48	; 0x30
  419d82:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
  419d84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419d86:	2202      	movs	r2, #2
  419d88:	f44f 7198 	mov.w	r1, #304	; 0x130
  419d8c:	3030      	adds	r0, #48	; 0x30
  419d8e:	e011      	b.n	419db4 <calendar_init+0x31c>
  419d90:	20414824 	.word	0x20414824
  419d94:	00418951 	.word	0x00418951
  419d98:	0040a1b9 	.word	0x0040a1b9
  419d9c:	00414d6d 	.word	0x00414d6d
  419da0:	00414d4d 	.word	0x00414d4d
  419da4:	20414828 	.word	0x20414828
  419da8:	0040a349 	.word	0x0040a349
  419dac:	0042f86c 	.word	0x0042f86c
  419db0:	0040a4d9 	.word	0x0040a4d9
  419db4:	4fb9      	ldr	r7, [pc, #740]	; (41a09c <calendar_init+0x604>)
  419db6:	47b8      	blx	r7
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
  419db8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419dba:	2204      	movs	r2, #4
  419dbc:	f240 1131 	movw	r1, #305	; 0x131
  419dc0:	3030      	adds	r0, #48	; 0x30
  419dc2:	47b8      	blx	r7
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  419dc4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419dc6:	89b2      	ldrh	r2, [r6, #12]
  419dc8:	f240 1139 	movw	r1, #313	; 0x139
  419dcc:	3030      	adds	r0, #48	; 0x30
  419dce:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  419dd0:	6824      	ldr	r4, [r4, #0]
  419dd2:	3430      	adds	r4, #48	; 0x30
  419dd4:	2000      	movs	r0, #0
  419dd6:	4bb2      	ldr	r3, [pc, #712]	; (41a0a0 <calendar_init+0x608>)
  419dd8:	4798      	blx	r3
  419dda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419dde:	3050      	adds	r0, #80	; 0x50
  419de0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419de4:	f280 8198 	bge.w	41a118 <calendar_init+0x680>
  419de8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419dea:	2114      	movs	r1, #20
  419dec:	4620      	mov	r0, r4
  419dee:	4bab      	ldr	r3, [pc, #684]	; (41a09c <calendar_init+0x604>)
  419df0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419df2:	4bac      	ldr	r3, [pc, #688]	; (41a0a4 <calendar_init+0x60c>)
  419df4:	681c      	ldr	r4, [r3, #0]
  419df6:	3430      	adds	r4, #48	; 0x30
  419df8:	2000      	movs	r0, #0
  419dfa:	4bab      	ldr	r3, [pc, #684]	; (41a0a8 <calendar_init+0x610>)
  419dfc:	4798      	blx	r3
  419dfe:	2801      	cmp	r0, #1
  419e00:	f240 8198 	bls.w	41a134 <calendar_init+0x69c>
  419e04:	2000      	movs	r0, #0
  419e06:	4ba6      	ldr	r3, [pc, #664]	; (41a0a0 <calendar_init+0x608>)
  419e08:	4798      	blx	r3
  419e0a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419e0e:	0040      	lsls	r0, r0, #1
  419e10:	3050      	adds	r0, #80	; 0x50
  419e12:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e16:	f280 81a6 	bge.w	41a166 <calendar_init+0x6ce>
  419e1a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419e1c:	2112      	movs	r1, #18
  419e1e:	4620      	mov	r0, r4
  419e20:	4b9e      	ldr	r3, [pc, #632]	; (41a09c <calendar_init+0x604>)
  419e22:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419e24:	4b9f      	ldr	r3, [pc, #636]	; (41a0a4 <calendar_init+0x60c>)
  419e26:	681c      	ldr	r4, [r3, #0]
  419e28:	3430      	adds	r4, #48	; 0x30
  419e2a:	2000      	movs	r0, #0
  419e2c:	4b9e      	ldr	r3, [pc, #632]	; (41a0a8 <calendar_init+0x610>)
  419e2e:	4798      	blx	r3
  419e30:	2801      	cmp	r0, #1
  419e32:	f240 81a7 	bls.w	41a184 <calendar_init+0x6ec>
  419e36:	2000      	movs	r0, #0
  419e38:	4b99      	ldr	r3, [pc, #612]	; (41a0a0 <calendar_init+0x608>)
  419e3a:	4798      	blx	r3
  419e3c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419e40:	0040      	lsls	r0, r0, #1
  419e42:	3050      	adds	r0, #80	; 0x50
  419e44:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e48:	f280 81b5 	bge.w	41a1b6 <calendar_init+0x71e>
  419e4c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419e4e:	2113      	movs	r1, #19
  419e50:	4620      	mov	r0, r4
  419e52:	4b92      	ldr	r3, [pc, #584]	; (41a09c <calendar_init+0x604>)
  419e54:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419e56:	4b93      	ldr	r3, [pc, #588]	; (41a0a4 <calendar_init+0x60c>)
  419e58:	681c      	ldr	r4, [r3, #0]
  419e5a:	3430      	adds	r4, #48	; 0x30
  419e5c:	2000      	movs	r0, #0
  419e5e:	4b92      	ldr	r3, [pc, #584]	; (41a0a8 <calendar_init+0x610>)
  419e60:	4798      	blx	r3
  419e62:	2801      	cmp	r0, #1
  419e64:	f240 81b6 	bls.w	41a1d4 <calendar_init+0x73c>
  419e68:	2000      	movs	r0, #0
  419e6a:	4b8d      	ldr	r3, [pc, #564]	; (41a0a0 <calendar_init+0x608>)
  419e6c:	4798      	blx	r3
  419e6e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419e72:	0040      	lsls	r0, r0, #1
  419e74:	3050      	adds	r0, #80	; 0x50
  419e76:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e7a:	f280 81c4 	bge.w	41a206 <calendar_init+0x76e>
  419e7e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419e80:	2111      	movs	r1, #17
  419e82:	4620      	mov	r0, r4
  419e84:	4b85      	ldr	r3, [pc, #532]	; (41a09c <calendar_init+0x604>)
  419e86:	4798      	blx	r3
  419e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419e8a:	2000      	movs	r0, #0
  419e8c:	4b84      	ldr	r3, [pc, #528]	; (41a0a0 <calendar_init+0x608>)
  419e8e:	4798      	blx	r3
  419e90:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419e94:	3050      	adds	r0, #80	; 0x50
  419e96:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e9a:	da01      	bge.n	419ea0 <calendar_init+0x408>
  419e9c:	2201      	movs	r2, #1
  419e9e:	e61b      	b.n	419ad8 <calendar_init+0x40>
  419ea0:	2000      	movs	r0, #0
  419ea2:	4b7f      	ldr	r3, [pc, #508]	; (41a0a0 <calendar_init+0x608>)
  419ea4:	4798      	blx	r3
  419ea6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419eaa:	3050      	adds	r0, #80	; 0x50
  419eac:	4b7f      	ldr	r3, [pc, #508]	; (41a0ac <calendar_init+0x614>)
  419eae:	fb83 2300 	smull	r2, r3, r3, r0
  419eb2:	17c2      	asrs	r2, r0, #31
  419eb4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419eb8:	b212      	sxth	r2, r2
  419eba:	e60d      	b.n	419ad8 <calendar_init+0x40>
  419ebc:	2000      	movs	r0, #0
  419ebe:	4b78      	ldr	r3, [pc, #480]	; (41a0a0 <calendar_init+0x608>)
  419ec0:	4798      	blx	r3
  419ec2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ec6:	0040      	lsls	r0, r0, #1
  419ec8:	3050      	adds	r0, #80	; 0x50
  419eca:	4b78      	ldr	r3, [pc, #480]	; (41a0ac <calendar_init+0x614>)
  419ecc:	fb83 2300 	smull	r2, r3, r3, r0
  419ed0:	17c2      	asrs	r2, r0, #31
  419ed2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419ed6:	b212      	sxth	r2, r2
  419ed8:	e5fe      	b.n	419ad8 <calendar_init+0x40>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419eda:	2000      	movs	r0, #0
  419edc:	4b70      	ldr	r3, [pc, #448]	; (41a0a0 <calendar_init+0x608>)
  419ede:	4798      	blx	r3
  419ee0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ee4:	3050      	adds	r0, #80	; 0x50
  419ee6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419eea:	da01      	bge.n	419ef0 <calendar_init+0x458>
  419eec:	2201      	movs	r2, #1
  419eee:	e60c      	b.n	419b0a <calendar_init+0x72>
  419ef0:	2000      	movs	r0, #0
  419ef2:	4b6b      	ldr	r3, [pc, #428]	; (41a0a0 <calendar_init+0x608>)
  419ef4:	4798      	blx	r3
  419ef6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419efa:	3050      	adds	r0, #80	; 0x50
  419efc:	4b6b      	ldr	r3, [pc, #428]	; (41a0ac <calendar_init+0x614>)
  419efe:	fb83 2300 	smull	r2, r3, r3, r0
  419f02:	17c2      	asrs	r2, r0, #31
  419f04:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419f08:	b212      	sxth	r2, r2
  419f0a:	e5fe      	b.n	419b0a <calendar_init+0x72>
  419f0c:	2000      	movs	r0, #0
  419f0e:	4b64      	ldr	r3, [pc, #400]	; (41a0a0 <calendar_init+0x608>)
  419f10:	4798      	blx	r3
  419f12:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f16:	0040      	lsls	r0, r0, #1
  419f18:	3050      	adds	r0, #80	; 0x50
  419f1a:	4b64      	ldr	r3, [pc, #400]	; (41a0ac <calendar_init+0x614>)
  419f1c:	fb83 2300 	smull	r2, r3, r3, r0
  419f20:	17c2      	asrs	r2, r0, #31
  419f22:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419f26:	b212      	sxth	r2, r2
  419f28:	e5ef      	b.n	419b0a <calendar_init+0x72>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419f2a:	2000      	movs	r0, #0
  419f2c:	4b5c      	ldr	r3, [pc, #368]	; (41a0a0 <calendar_init+0x608>)
  419f2e:	4798      	blx	r3
  419f30:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f34:	3050      	adds	r0, #80	; 0x50
  419f36:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f3a:	da01      	bge.n	419f40 <calendar_init+0x4a8>
  419f3c:	2201      	movs	r2, #1
  419f3e:	e602      	b.n	419b46 <calendar_init+0xae>
  419f40:	2000      	movs	r0, #0
  419f42:	4b57      	ldr	r3, [pc, #348]	; (41a0a0 <calendar_init+0x608>)
  419f44:	4798      	blx	r3
  419f46:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f4a:	3050      	adds	r0, #80	; 0x50
  419f4c:	4b57      	ldr	r3, [pc, #348]	; (41a0ac <calendar_init+0x614>)
  419f4e:	fb83 2300 	smull	r2, r3, r3, r0
  419f52:	17c2      	asrs	r2, r0, #31
  419f54:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419f58:	b212      	sxth	r2, r2
  419f5a:	e5f4      	b.n	419b46 <calendar_init+0xae>
  419f5c:	2000      	movs	r0, #0
  419f5e:	4b50      	ldr	r3, [pc, #320]	; (41a0a0 <calendar_init+0x608>)
  419f60:	4798      	blx	r3
  419f62:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f66:	0040      	lsls	r0, r0, #1
  419f68:	3050      	adds	r0, #80	; 0x50
  419f6a:	4b50      	ldr	r3, [pc, #320]	; (41a0ac <calendar_init+0x614>)
  419f6c:	fb83 2300 	smull	r2, r3, r3, r0
  419f70:	17c2      	asrs	r2, r0, #31
  419f72:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419f76:	b212      	sxth	r2, r2
  419f78:	e5e5      	b.n	419b46 <calendar_init+0xae>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419f7a:	2000      	movs	r0, #0
  419f7c:	4b48      	ldr	r3, [pc, #288]	; (41a0a0 <calendar_init+0x608>)
  419f7e:	4798      	blx	r3
  419f80:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f84:	3050      	adds	r0, #80	; 0x50
  419f86:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f8a:	da01      	bge.n	419f90 <calendar_init+0x4f8>
  419f8c:	2201      	movs	r2, #1
  419f8e:	e5f3      	b.n	419b78 <calendar_init+0xe0>
  419f90:	2000      	movs	r0, #0
  419f92:	4b43      	ldr	r3, [pc, #268]	; (41a0a0 <calendar_init+0x608>)
  419f94:	4798      	blx	r3
  419f96:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f9a:	3050      	adds	r0, #80	; 0x50
  419f9c:	4b43      	ldr	r3, [pc, #268]	; (41a0ac <calendar_init+0x614>)
  419f9e:	fb83 2300 	smull	r2, r3, r3, r0
  419fa2:	17c2      	asrs	r2, r0, #31
  419fa4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419fa8:	b212      	sxth	r2, r2
  419faa:	e5e5      	b.n	419b78 <calendar_init+0xe0>
  419fac:	2000      	movs	r0, #0
  419fae:	4b3c      	ldr	r3, [pc, #240]	; (41a0a0 <calendar_init+0x608>)
  419fb0:	4798      	blx	r3
  419fb2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fb6:	0040      	lsls	r0, r0, #1
  419fb8:	3050      	adds	r0, #80	; 0x50
  419fba:	4b3c      	ldr	r3, [pc, #240]	; (41a0ac <calendar_init+0x614>)
  419fbc:	fb83 2300 	smull	r2, r3, r3, r0
  419fc0:	17c2      	asrs	r2, r0, #31
  419fc2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419fc6:	b212      	sxth	r2, r2
  419fc8:	e5d6      	b.n	419b78 <calendar_init+0xe0>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  419fca:	4b39      	ldr	r3, [pc, #228]	; (41a0b0 <calendar_init+0x618>)
  419fcc:	881a      	ldrh	r2, [r3, #0]
  419fce:	e5ed      	b.n	419bac <calendar_init+0x114>
  419fd0:	f04f 0207 	mov.w	r2, #7
  419fd4:	231d      	movs	r3, #29
  419fd6:	f363 02c7 	bfi	r2, r3, #3, #5
  419fda:	f363 220c 	bfi	r2, r3, #8, #5
  419fde:	2303      	movs	r3, #3
  419fe0:	f363 324f 	bfi	r2, r3, #13, #3
  419fe4:	e600      	b.n	419be8 <calendar_init+0x150>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419fe6:	2000      	movs	r0, #0
  419fe8:	4b2d      	ldr	r3, [pc, #180]	; (41a0a0 <calendar_init+0x608>)
  419fea:	4798      	blx	r3
  419fec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ff0:	3050      	adds	r0, #80	; 0x50
  419ff2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419ff6:	da01      	bge.n	419ffc <calendar_init+0x564>
  419ff8:	2201      	movs	r2, #1
  419ffa:	e60e      	b.n	419c1a <calendar_init+0x182>
  419ffc:	2000      	movs	r0, #0
  419ffe:	4b28      	ldr	r3, [pc, #160]	; (41a0a0 <calendar_init+0x608>)
  41a000:	4798      	blx	r3
  41a002:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a006:	3050      	adds	r0, #80	; 0x50
  41a008:	4b28      	ldr	r3, [pc, #160]	; (41a0ac <calendar_init+0x614>)
  41a00a:	fb83 2300 	smull	r2, r3, r3, r0
  41a00e:	17c2      	asrs	r2, r0, #31
  41a010:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a014:	b212      	sxth	r2, r2
  41a016:	e600      	b.n	419c1a <calendar_init+0x182>
  41a018:	2000      	movs	r0, #0
  41a01a:	4b21      	ldr	r3, [pc, #132]	; (41a0a0 <calendar_init+0x608>)
  41a01c:	4798      	blx	r3
  41a01e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a022:	0040      	lsls	r0, r0, #1
  41a024:	3050      	adds	r0, #80	; 0x50
  41a026:	4b21      	ldr	r3, [pc, #132]	; (41a0ac <calendar_init+0x614>)
  41a028:	fb83 2300 	smull	r2, r3, r3, r0
  41a02c:	17c2      	asrs	r2, r0, #31
  41a02e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a032:	b212      	sxth	r2, r2
  41a034:	e5f1      	b.n	419c1a <calendar_init+0x182>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41a036:	2000      	movs	r0, #0
  41a038:	4b19      	ldr	r3, [pc, #100]	; (41a0a0 <calendar_init+0x608>)
  41a03a:	4798      	blx	r3
  41a03c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a040:	3050      	adds	r0, #80	; 0x50
  41a042:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a046:	da01      	bge.n	41a04c <calendar_init+0x5b4>
  41a048:	2201      	movs	r2, #1
  41a04a:	e5ff      	b.n	419c4c <calendar_init+0x1b4>
  41a04c:	2000      	movs	r0, #0
  41a04e:	4b14      	ldr	r3, [pc, #80]	; (41a0a0 <calendar_init+0x608>)
  41a050:	4798      	blx	r3
  41a052:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a056:	3050      	adds	r0, #80	; 0x50
  41a058:	4b14      	ldr	r3, [pc, #80]	; (41a0ac <calendar_init+0x614>)
  41a05a:	fb83 2300 	smull	r2, r3, r3, r0
  41a05e:	17c2      	asrs	r2, r0, #31
  41a060:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a064:	b212      	sxth	r2, r2
  41a066:	e5f1      	b.n	419c4c <calendar_init+0x1b4>
  41a068:	2000      	movs	r0, #0
  41a06a:	4b0d      	ldr	r3, [pc, #52]	; (41a0a0 <calendar_init+0x608>)
  41a06c:	4798      	blx	r3
  41a06e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a072:	0040      	lsls	r0, r0, #1
  41a074:	3050      	adds	r0, #80	; 0x50
  41a076:	4b0d      	ldr	r3, [pc, #52]	; (41a0ac <calendar_init+0x614>)
  41a078:	fb83 2300 	smull	r2, r3, r3, r0
  41a07c:	17c2      	asrs	r2, r0, #31
  41a07e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a082:	b212      	sxth	r2, r2
  41a084:	e5e2      	b.n	419c4c <calendar_init+0x1b4>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41a086:	2000      	movs	r0, #0
  41a088:	4b05      	ldr	r3, [pc, #20]	; (41a0a0 <calendar_init+0x608>)
  41a08a:	4798      	blx	r3
  41a08c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a090:	3050      	adds	r0, #80	; 0x50
  41a092:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a096:	da0d      	bge.n	41a0b4 <calendar_init+0x61c>
  41a098:	2201      	movs	r2, #1
  41a09a:	e5f0      	b.n	419c7e <calendar_init+0x1e6>
  41a09c:	0040a1b9 	.word	0x0040a1b9
  41a0a0:	00414d4d 	.word	0x00414d4d
  41a0a4:	20414824 	.word	0x20414824
  41a0a8:	00414d6d 	.word	0x00414d6d
  41a0ac:	66666667 	.word	0x66666667
  41a0b0:	0042f86c 	.word	0x0042f86c
  41a0b4:	2000      	movs	r0, #0
  41a0b6:	4b5b      	ldr	r3, [pc, #364]	; (41a224 <calendar_init+0x78c>)
  41a0b8:	4798      	blx	r3
  41a0ba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0be:	3050      	adds	r0, #80	; 0x50
  41a0c0:	4b59      	ldr	r3, [pc, #356]	; (41a228 <calendar_init+0x790>)
  41a0c2:	fb83 2300 	smull	r2, r3, r3, r0
  41a0c6:	17c2      	asrs	r2, r0, #31
  41a0c8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0cc:	b212      	sxth	r2, r2
  41a0ce:	e5d6      	b.n	419c7e <calendar_init+0x1e6>
  41a0d0:	2000      	movs	r0, #0
  41a0d2:	4b54      	ldr	r3, [pc, #336]	; (41a224 <calendar_init+0x78c>)
  41a0d4:	4798      	blx	r3
  41a0d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0da:	0040      	lsls	r0, r0, #1
  41a0dc:	3050      	adds	r0, #80	; 0x50
  41a0de:	4b52      	ldr	r3, [pc, #328]	; (41a228 <calendar_init+0x790>)
  41a0e0:	fb83 2300 	smull	r2, r3, r3, r0
  41a0e4:	17c2      	asrs	r2, r0, #31
  41a0e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0ea:	b212      	sxth	r2, r2
  41a0ec:	e5c7      	b.n	419c7e <calendar_init+0x1e6>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  41a0ee:	2000      	movs	r0, #0
  41a0f0:	4b4c      	ldr	r3, [pc, #304]	; (41a224 <calendar_init+0x78c>)
  41a0f2:	4798      	blx	r3
  41a0f4:	3014      	adds	r0, #20
  41a0f6:	0080      	lsls	r0, r0, #2
  41a0f8:	4b4b      	ldr	r3, [pc, #300]	; (41a228 <calendar_init+0x790>)
  41a0fa:	fb83 2300 	smull	r2, r3, r3, r0
  41a0fe:	17c2      	asrs	r2, r0, #31
  41a100:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a104:	b212      	sxth	r2, r2
  41a106:	e5cf      	b.n	419ca8 <calendar_init+0x210>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41a108:	4b48      	ldr	r3, [pc, #288]	; (41a22c <calendar_init+0x794>)
  41a10a:	881a      	ldrh	r2, [r3, #0]
  41a10c:	e5e6      	b.n	419cdc <calendar_init+0x244>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  41a10e:	2266      	movs	r2, #102	; 0x66
  41a110:	e5f9      	b.n	419d06 <calendar_init+0x26e>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41a112:	4b46      	ldr	r3, [pc, #280]	; (41a22c <calendar_init+0x794>)
  41a114:	881a      	ldrh	r2, [r3, #0]
  41a116:	e62a      	b.n	419d6e <calendar_init+0x2d6>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  41a118:	2000      	movs	r0, #0
  41a11a:	4b42      	ldr	r3, [pc, #264]	; (41a224 <calendar_init+0x78c>)
  41a11c:	4798      	blx	r3
  41a11e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a122:	3050      	adds	r0, #80	; 0x50
  41a124:	4b40      	ldr	r3, [pc, #256]	; (41a228 <calendar_init+0x790>)
  41a126:	fb83 2300 	smull	r2, r3, r3, r0
  41a12a:	17c2      	asrs	r2, r0, #31
  41a12c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a130:	b212      	sxth	r2, r2
  41a132:	e65a      	b.n	419dea <calendar_init+0x352>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41a134:	2000      	movs	r0, #0
  41a136:	4b3b      	ldr	r3, [pc, #236]	; (41a224 <calendar_init+0x78c>)
  41a138:	4798      	blx	r3
  41a13a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a13e:	3050      	adds	r0, #80	; 0x50
  41a140:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a144:	da01      	bge.n	41a14a <calendar_init+0x6b2>
  41a146:	2201      	movs	r2, #1
  41a148:	e668      	b.n	419e1c <calendar_init+0x384>
  41a14a:	2000      	movs	r0, #0
  41a14c:	4b35      	ldr	r3, [pc, #212]	; (41a224 <calendar_init+0x78c>)
  41a14e:	4798      	blx	r3
  41a150:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a154:	3050      	adds	r0, #80	; 0x50
  41a156:	4b34      	ldr	r3, [pc, #208]	; (41a228 <calendar_init+0x790>)
  41a158:	fb83 2300 	smull	r2, r3, r3, r0
  41a15c:	17c2      	asrs	r2, r0, #31
  41a15e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a162:	b212      	sxth	r2, r2
  41a164:	e65a      	b.n	419e1c <calendar_init+0x384>
  41a166:	2000      	movs	r0, #0
  41a168:	4b2e      	ldr	r3, [pc, #184]	; (41a224 <calendar_init+0x78c>)
  41a16a:	4798      	blx	r3
  41a16c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a170:	0040      	lsls	r0, r0, #1
  41a172:	3050      	adds	r0, #80	; 0x50
  41a174:	4b2c      	ldr	r3, [pc, #176]	; (41a228 <calendar_init+0x790>)
  41a176:	fb83 2300 	smull	r2, r3, r3, r0
  41a17a:	17c2      	asrs	r2, r0, #31
  41a17c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a180:	b212      	sxth	r2, r2
  41a182:	e64b      	b.n	419e1c <calendar_init+0x384>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41a184:	2000      	movs	r0, #0
  41a186:	4b27      	ldr	r3, [pc, #156]	; (41a224 <calendar_init+0x78c>)
  41a188:	4798      	blx	r3
  41a18a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a18e:	3050      	adds	r0, #80	; 0x50
  41a190:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a194:	da01      	bge.n	41a19a <calendar_init+0x702>
  41a196:	2201      	movs	r2, #1
  41a198:	e659      	b.n	419e4e <calendar_init+0x3b6>
  41a19a:	2000      	movs	r0, #0
  41a19c:	4b21      	ldr	r3, [pc, #132]	; (41a224 <calendar_init+0x78c>)
  41a19e:	4798      	blx	r3
  41a1a0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a1a4:	3050      	adds	r0, #80	; 0x50
  41a1a6:	4b20      	ldr	r3, [pc, #128]	; (41a228 <calendar_init+0x790>)
  41a1a8:	fb83 2300 	smull	r2, r3, r3, r0
  41a1ac:	17c2      	asrs	r2, r0, #31
  41a1ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a1b2:	b212      	sxth	r2, r2
  41a1b4:	e64b      	b.n	419e4e <calendar_init+0x3b6>
  41a1b6:	2000      	movs	r0, #0
  41a1b8:	4b1a      	ldr	r3, [pc, #104]	; (41a224 <calendar_init+0x78c>)
  41a1ba:	4798      	blx	r3
  41a1bc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a1c0:	0040      	lsls	r0, r0, #1
  41a1c2:	3050      	adds	r0, #80	; 0x50
  41a1c4:	4b18      	ldr	r3, [pc, #96]	; (41a228 <calendar_init+0x790>)
  41a1c6:	fb83 2300 	smull	r2, r3, r3, r0
  41a1ca:	17c2      	asrs	r2, r0, #31
  41a1cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a1d0:	b212      	sxth	r2, r2
  41a1d2:	e63c      	b.n	419e4e <calendar_init+0x3b6>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41a1d4:	2000      	movs	r0, #0
  41a1d6:	4b13      	ldr	r3, [pc, #76]	; (41a224 <calendar_init+0x78c>)
  41a1d8:	4798      	blx	r3
  41a1da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a1de:	3050      	adds	r0, #80	; 0x50
  41a1e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a1e4:	da01      	bge.n	41a1ea <calendar_init+0x752>
  41a1e6:	2201      	movs	r2, #1
  41a1e8:	e64a      	b.n	419e80 <calendar_init+0x3e8>
  41a1ea:	2000      	movs	r0, #0
  41a1ec:	4b0d      	ldr	r3, [pc, #52]	; (41a224 <calendar_init+0x78c>)
  41a1ee:	4798      	blx	r3
  41a1f0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a1f4:	3050      	adds	r0, #80	; 0x50
  41a1f6:	4b0c      	ldr	r3, [pc, #48]	; (41a228 <calendar_init+0x790>)
  41a1f8:	fb83 2300 	smull	r2, r3, r3, r0
  41a1fc:	17c2      	asrs	r2, r0, #31
  41a1fe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a202:	b212      	sxth	r2, r2
  41a204:	e63c      	b.n	419e80 <calendar_init+0x3e8>
  41a206:	2000      	movs	r0, #0
  41a208:	4b06      	ldr	r3, [pc, #24]	; (41a224 <calendar_init+0x78c>)
  41a20a:	4798      	blx	r3
  41a20c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a210:	0040      	lsls	r0, r0, #1
  41a212:	3050      	adds	r0, #80	; 0x50
  41a214:	4b04      	ldr	r3, [pc, #16]	; (41a228 <calendar_init+0x790>)
  41a216:	fb83 2300 	smull	r2, r3, r3, r0
  41a21a:	17c2      	asrs	r2, r0, #31
  41a21c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a220:	b212      	sxth	r2, r2
  41a222:	e62d      	b.n	419e80 <calendar_init+0x3e8>
  41a224:	00414d4d 	.word	0x00414d4d
  41a228:	66666667 	.word	0x66666667
  41a22c:	0042f86c 	.word	0x0042f86c

0041a230 <cpicker_init>:
{
  41a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cpicker_bg);
  41a232:	4c9a      	ldr	r4, [pc, #616]	; (41a49c <cpicker_init+0x26c>)
  41a234:	6820      	ldr	r0, [r4, #0]
  41a236:	303c      	adds	r0, #60	; 0x3c
  41a238:	4b99      	ldr	r3, [pc, #612]	; (41a4a0 <cpicker_init+0x270>)
  41a23a:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  41a23c:	6824      	ldr	r4, [r4, #0]
  41a23e:	343c      	adds	r4, #60	; 0x3c
  41a240:	2000      	movs	r0, #0
  41a242:	4b98      	ldr	r3, [pc, #608]	; (41a4a4 <cpicker_init+0x274>)
  41a244:	4798      	blx	r3
  41a246:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a24a:	0040      	lsls	r0, r0, #1
  41a24c:	3050      	adds	r0, #80	; 0x50
  41a24e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a252:	f280 80b6 	bge.w	41a3c2 <cpicker_init+0x192>
  41a256:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41a258:	21c0      	movs	r1, #192	; 0xc0
  41a25a:	4620      	mov	r0, r4
  41a25c:	4b92      	ldr	r3, [pc, #584]	; (41a4a8 <cpicker_init+0x278>)
  41a25e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a260:	4c8e      	ldr	r4, [pc, #568]	; (41a49c <cpicker_init+0x26c>)
  41a262:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a264:	22ff      	movs	r2, #255	; 0xff
  41a266:	212c      	movs	r1, #44	; 0x2c
  41a268:	303c      	adds	r0, #60	; 0x3c
  41a26a:	4b90      	ldr	r3, [pc, #576]	; (41a4ac <cpicker_init+0x27c>)
  41a26c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
  41a26e:	6820      	ldr	r0, [r4, #0]
  41a270:	303c      	adds	r0, #60	; 0x3c
  41a272:	4b8f      	ldr	r3, [pc, #572]	; (41a4b0 <cpicker_init+0x280>)
  41a274:	6a1b      	ldr	r3, [r3, #32]
  41a276:	f013 0f02 	tst.w	r3, #2
  41a27a:	f000 80b1 	beq.w	41a3e0 <cpicker_init+0x1b0>
  41a27e:	f04f 0207 	mov.w	r2, #7
  41a282:	231d      	movs	r3, #29
  41a284:	f363 02c7 	bfi	r2, r3, #3, #5
  41a288:	231e      	movs	r3, #30
  41a28a:	f363 220c 	bfi	r2, r3, #8, #5
  41a28e:	2303      	movs	r3, #3
  41a290:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a294:	2129      	movs	r1, #41	; 0x29
  41a296:	4b87      	ldr	r3, [pc, #540]	; (41a4b4 <cpicker_init+0x284>)
  41a298:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  41a29a:	4b80      	ldr	r3, [pc, #512]	; (41a49c <cpicker_init+0x26c>)
  41a29c:	681c      	ldr	r4, [r3, #0]
  41a29e:	343c      	adds	r4, #60	; 0x3c
  41a2a0:	2000      	movs	r0, #0
  41a2a2:	4b80      	ldr	r3, [pc, #512]	; (41a4a4 <cpicker_init+0x274>)
  41a2a4:	4798      	blx	r3
  41a2a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a2aa:	0080      	lsls	r0, r0, #2
  41a2ac:	3050      	adds	r0, #80	; 0x50
  41a2ae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a2b2:	f280 80a3 	bge.w	41a3fc <cpicker_init+0x1cc>
  41a2b6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a2b8:	2114      	movs	r1, #20
  41a2ba:	4620      	mov	r0, r4
  41a2bc:	4e7a      	ldr	r6, [pc, #488]	; (41a4a8 <cpicker_init+0x278>)
  41a2be:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a2c0:	4c76      	ldr	r4, [pc, #472]	; (41a49c <cpicker_init+0x26c>)
  41a2c2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a2c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a2c8:	2101      	movs	r1, #1
  41a2ca:	303c      	adds	r0, #60	; 0x3c
  41a2cc:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
  41a2ce:	6820      	ldr	r0, [r4, #0]
  41a2d0:	3040      	adds	r0, #64	; 0x40
  41a2d2:	4b73      	ldr	r3, [pc, #460]	; (41a4a0 <cpicker_init+0x270>)
  41a2d4:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a2d6:	6820      	ldr	r0, [r4, #0]
  41a2d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a2dc:	2101      	movs	r1, #1
  41a2de:	3040      	adds	r0, #64	; 0x40
  41a2e0:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41a2e2:	6820      	ldr	r0, [r4, #0]
  41a2e4:	4f74      	ldr	r7, [pc, #464]	; (41a4b8 <cpicker_init+0x288>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a2e6:	883a      	ldrh	r2, [r7, #0]
  41a2e8:	2129      	movs	r1, #41	; 0x29
  41a2ea:	3040      	adds	r0, #64	; 0x40
  41a2ec:	4d71      	ldr	r5, [pc, #452]	; (41a4b4 <cpicker_init+0x284>)
  41a2ee:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a2f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a2f2:	22ff      	movs	r2, #255	; 0xff
  41a2f4:	212c      	movs	r1, #44	; 0x2c
  41a2f6:	3040      	adds	r0, #64	; 0x40
  41a2f8:	4b6c      	ldr	r3, [pc, #432]	; (41a4ac <cpicker_init+0x27c>)
  41a2fa:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
  41a2fc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a2fe:	2202      	movs	r2, #2
  41a300:	2130      	movs	r1, #48	; 0x30
  41a302:	3040      	adds	r0, #64	; 0x40
  41a304:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
  41a306:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a308:	88ba      	ldrh	r2, [r7, #4]
  41a30a:	2139      	movs	r1, #57	; 0x39
  41a30c:	3040      	adds	r0, #64	; 0x40
  41a30e:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
  41a310:	6820      	ldr	r0, [r4, #0]
  41a312:	4e67      	ldr	r6, [pc, #412]	; (41a4b0 <cpicker_init+0x280>)
  41a314:	89b2      	ldrh	r2, [r6, #12]
  41a316:	f240 2139 	movw	r1, #569	; 0x239
  41a31a:	3040      	adds	r0, #64	; 0x40
  41a31c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
  41a31e:	6820      	ldr	r0, [r4, #0]
  41a320:	89f2      	ldrh	r2, [r6, #14]
  41a322:	f240 4139 	movw	r1, #1081	; 0x439
  41a326:	3040      	adds	r0, #64	; 0x40
  41a328:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a32a:	6824      	ldr	r4, [r4, #0]
  41a32c:	3440      	adds	r4, #64	; 0x40
  41a32e:	2000      	movs	r0, #0
  41a330:	4b5c      	ldr	r3, [pc, #368]	; (41a4a4 <cpicker_init+0x274>)
  41a332:	4798      	blx	r3
  41a334:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a338:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a33c:	3050      	adds	r0, #80	; 0x50
  41a33e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a342:	da6a      	bge.n	41a41a <cpicker_init+0x1ea>
  41a344:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a346:	2112      	movs	r1, #18
  41a348:	4620      	mov	r0, r4
  41a34a:	4b57      	ldr	r3, [pc, #348]	; (41a4a8 <cpicker_init+0x278>)
  41a34c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a34e:	4b53      	ldr	r3, [pc, #332]	; (41a49c <cpicker_init+0x26c>)
  41a350:	681c      	ldr	r4, [r3, #0]
  41a352:	3440      	adds	r4, #64	; 0x40
  41a354:	2000      	movs	r0, #0
  41a356:	4b53      	ldr	r3, [pc, #332]	; (41a4a4 <cpicker_init+0x274>)
  41a358:	4798      	blx	r3
  41a35a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a35e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a362:	3050      	adds	r0, #80	; 0x50
  41a364:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a368:	da67      	bge.n	41a43a <cpicker_init+0x20a>
  41a36a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a36c:	2113      	movs	r1, #19
  41a36e:	4620      	mov	r0, r4
  41a370:	4b4d      	ldr	r3, [pc, #308]	; (41a4a8 <cpicker_init+0x278>)
  41a372:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a374:	4b49      	ldr	r3, [pc, #292]	; (41a49c <cpicker_init+0x26c>)
  41a376:	681c      	ldr	r4, [r3, #0]
  41a378:	3440      	adds	r4, #64	; 0x40
  41a37a:	2000      	movs	r0, #0
  41a37c:	4b49      	ldr	r3, [pc, #292]	; (41a4a4 <cpicker_init+0x274>)
  41a37e:	4798      	blx	r3
  41a380:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a384:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a388:	3050      	adds	r0, #80	; 0x50
  41a38a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a38e:	da64      	bge.n	41a45a <cpicker_init+0x22a>
  41a390:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a392:	2110      	movs	r1, #16
  41a394:	4620      	mov	r0, r4
  41a396:	4b44      	ldr	r3, [pc, #272]	; (41a4a8 <cpicker_init+0x278>)
  41a398:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a39a:	4b40      	ldr	r3, [pc, #256]	; (41a49c <cpicker_init+0x26c>)
  41a39c:	681c      	ldr	r4, [r3, #0]
  41a39e:	3440      	adds	r4, #64	; 0x40
  41a3a0:	2000      	movs	r0, #0
  41a3a2:	4b40      	ldr	r3, [pc, #256]	; (41a4a4 <cpicker_init+0x274>)
  41a3a4:	4798      	blx	r3
  41a3a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a3aa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a3ae:	3050      	adds	r0, #80	; 0x50
  41a3b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a3b4:	da61      	bge.n	41a47a <cpicker_init+0x24a>
  41a3b6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a3b8:	2111      	movs	r1, #17
  41a3ba:	4620      	mov	r0, r4
  41a3bc:	4b3a      	ldr	r3, [pc, #232]	; (41a4a8 <cpicker_init+0x278>)
  41a3be:	4798      	blx	r3
  41a3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  41a3c2:	2000      	movs	r0, #0
  41a3c4:	4b37      	ldr	r3, [pc, #220]	; (41a4a4 <cpicker_init+0x274>)
  41a3c6:	4798      	blx	r3
  41a3c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a3cc:	0040      	lsls	r0, r0, #1
  41a3ce:	3050      	adds	r0, #80	; 0x50
  41a3d0:	4b3a      	ldr	r3, [pc, #232]	; (41a4bc <cpicker_init+0x28c>)
  41a3d2:	fb83 2300 	smull	r2, r3, r3, r0
  41a3d6:	17c2      	asrs	r2, r0, #31
  41a3d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a3dc:	b212      	sxth	r2, r2
  41a3de:	e73b      	b.n	41a258 <cpicker_init+0x28>
  41a3e0:	2302      	movs	r3, #2
  41a3e2:	f04f 0200 	mov.w	r2, #0
  41a3e6:	f363 0202 	bfi	r2, r3, #0, #3
  41a3ea:	2108      	movs	r1, #8
  41a3ec:	f361 02c7 	bfi	r2, r1, #3, #5
  41a3f0:	210b      	movs	r1, #11
  41a3f2:	f361 220c 	bfi	r2, r1, #8, #5
  41a3f6:	f363 324f 	bfi	r2, r3, #13, #3
  41a3fa:	e74b      	b.n	41a294 <cpicker_init+0x64>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  41a3fc:	2000      	movs	r0, #0
  41a3fe:	4b29      	ldr	r3, [pc, #164]	; (41a4a4 <cpicker_init+0x274>)
  41a400:	4798      	blx	r3
  41a402:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a406:	0080      	lsls	r0, r0, #2
  41a408:	3050      	adds	r0, #80	; 0x50
  41a40a:	4b2c      	ldr	r3, [pc, #176]	; (41a4bc <cpicker_init+0x28c>)
  41a40c:	fb83 2300 	smull	r2, r3, r3, r0
  41a410:	17c2      	asrs	r2, r0, #31
  41a412:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a416:	b212      	sxth	r2, r2
  41a418:	e74e      	b.n	41a2b8 <cpicker_init+0x88>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a41a:	2000      	movs	r0, #0
  41a41c:	4b21      	ldr	r3, [pc, #132]	; (41a4a4 <cpicker_init+0x274>)
  41a41e:	4798      	blx	r3
  41a420:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a424:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a428:	3050      	adds	r0, #80	; 0x50
  41a42a:	4b24      	ldr	r3, [pc, #144]	; (41a4bc <cpicker_init+0x28c>)
  41a42c:	fb83 2300 	smull	r2, r3, r3, r0
  41a430:	17c2      	asrs	r2, r0, #31
  41a432:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a436:	b212      	sxth	r2, r2
  41a438:	e785      	b.n	41a346 <cpicker_init+0x116>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a43a:	2000      	movs	r0, #0
  41a43c:	4b19      	ldr	r3, [pc, #100]	; (41a4a4 <cpicker_init+0x274>)
  41a43e:	4798      	blx	r3
  41a440:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a444:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a448:	3050      	adds	r0, #80	; 0x50
  41a44a:	4b1c      	ldr	r3, [pc, #112]	; (41a4bc <cpicker_init+0x28c>)
  41a44c:	fb83 2300 	smull	r2, r3, r3, r0
  41a450:	17c2      	asrs	r2, r0, #31
  41a452:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a456:	b212      	sxth	r2, r2
  41a458:	e788      	b.n	41a36c <cpicker_init+0x13c>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a45a:	2000      	movs	r0, #0
  41a45c:	4b11      	ldr	r3, [pc, #68]	; (41a4a4 <cpicker_init+0x274>)
  41a45e:	4798      	blx	r3
  41a460:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a464:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a468:	3050      	adds	r0, #80	; 0x50
  41a46a:	4b14      	ldr	r3, [pc, #80]	; (41a4bc <cpicker_init+0x28c>)
  41a46c:	fb83 2300 	smull	r2, r3, r3, r0
  41a470:	17c2      	asrs	r2, r0, #31
  41a472:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a476:	b212      	sxth	r2, r2
  41a478:	e78b      	b.n	41a392 <cpicker_init+0x162>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a47a:	2000      	movs	r0, #0
  41a47c:	4b09      	ldr	r3, [pc, #36]	; (41a4a4 <cpicker_init+0x274>)
  41a47e:	4798      	blx	r3
  41a480:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a484:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a488:	3050      	adds	r0, #80	; 0x50
  41a48a:	4b0c      	ldr	r3, [pc, #48]	; (41a4bc <cpicker_init+0x28c>)
  41a48c:	fb83 2300 	smull	r2, r3, r3, r0
  41a490:	17c2      	asrs	r2, r0, #31
  41a492:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a496:	b212      	sxth	r2, r2
  41a498:	e78e      	b.n	41a3b8 <cpicker_init+0x188>
  41a49a:	bf00      	nop
  41a49c:	20414824 	.word	0x20414824
  41a4a0:	00418951 	.word	0x00418951
  41a4a4:	00414d4d 	.word	0x00414d4d
  41a4a8:	0040a1b9 	.word	0x0040a1b9
  41a4ac:	0040a4d9 	.word	0x0040a4d9
  41a4b0:	20414828 	.word	0x20414828
  41a4b4:	0040a349 	.word	0x0040a349
  41a4b8:	0042f86c 	.word	0x0042f86c
  41a4bc:	66666667 	.word	0x66666667

0041a4c0 <checkbox_init>:
{
  41a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cb_bg);
  41a4c2:	4cb5      	ldr	r4, [pc, #724]	; (41a798 <checkbox_init+0x2d8>)
  41a4c4:	6820      	ldr	r0, [r4, #0]
  41a4c6:	3050      	adds	r0, #80	; 0x50
  41a4c8:	4bb4      	ldr	r3, [pc, #720]	; (41a79c <checkbox_init+0x2dc>)
  41a4ca:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a4cc:	6824      	ldr	r4, [r4, #0]
  41a4ce:	3450      	adds	r4, #80	; 0x50
  41a4d0:	2000      	movs	r0, #0
  41a4d2:	4bb3      	ldr	r3, [pc, #716]	; (41a7a0 <checkbox_init+0x2e0>)
  41a4d4:	4798      	blx	r3
  41a4d6:	3014      	adds	r0, #20
  41a4d8:	0080      	lsls	r0, r0, #2
  41a4da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4de:	f280 80e1 	bge.w	41a6a4 <checkbox_init+0x1e4>
  41a4e2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a4e4:	2101      	movs	r1, #1
  41a4e6:	4620      	mov	r0, r4
  41a4e8:	4bae      	ldr	r3, [pc, #696]	; (41a7a4 <checkbox_init+0x2e4>)
  41a4ea:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a4ec:	4baa      	ldr	r3, [pc, #680]	; (41a798 <checkbox_init+0x2d8>)
  41a4ee:	681c      	ldr	r4, [r3, #0]
  41a4f0:	3450      	adds	r4, #80	; 0x50
  41a4f2:	2000      	movs	r0, #0
  41a4f4:	4baa      	ldr	r3, [pc, #680]	; (41a7a0 <checkbox_init+0x2e0>)
  41a4f6:	4798      	blx	r3
  41a4f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a4fc:	0043      	lsls	r3, r0, #1
  41a4fe:	3350      	adds	r3, #80	; 0x50
  41a500:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41a504:	f280 80db 	bge.w	41a6be <checkbox_init+0x1fe>
  41a508:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a50a:	2114      	movs	r1, #20
  41a50c:	4620      	mov	r0, r4
  41a50e:	4ba5      	ldr	r3, [pc, #660]	; (41a7a4 <checkbox_init+0x2e4>)
  41a510:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
  41a512:	4ca1      	ldr	r4, [pc, #644]	; (41a798 <checkbox_init+0x2d8>)
  41a514:	6820      	ldr	r0, [r4, #0]
  41a516:	4ea4      	ldr	r6, [pc, #656]	; (41a7a8 <checkbox_init+0x2e8>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41a518:	89b2      	ldrh	r2, [r6, #12]
  41a51a:	2149      	movs	r1, #73	; 0x49
  41a51c:	3050      	adds	r0, #80	; 0x50
  41a51e:	4ba3      	ldr	r3, [pc, #652]	; (41a7ac <checkbox_init+0x2ec>)
  41a520:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41a522:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41a524:	2200      	movs	r2, #0
  41a526:	214c      	movs	r1, #76	; 0x4c
  41a528:	3050      	adds	r0, #80	; 0x50
  41a52a:	4da1      	ldr	r5, [pc, #644]	; (41a7b0 <checkbox_init+0x2f0>)
  41a52c:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
  41a52e:	6820      	ldr	r0, [r4, #0]
  41a530:	227f      	movs	r2, #127	; 0x7f
  41a532:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41a536:	3050      	adds	r0, #80	; 0x50
  41a538:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41a53a:	6824      	ldr	r4, [r4, #0]
  41a53c:	3450      	adds	r4, #80	; 0x50
  41a53e:	6a33      	ldr	r3, [r6, #32]
  41a540:	f013 0f20 	tst.w	r3, #32
  41a544:	f000 80ca 	beq.w	41a6dc <checkbox_init+0x21c>
  41a548:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41a54a:	2140      	movs	r1, #64	; 0x40
  41a54c:	4620      	mov	r0, r4
  41a54e:	4b95      	ldr	r3, [pc, #596]	; (41a7a4 <checkbox_init+0x2e4>)
  41a550:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a552:	4b91      	ldr	r3, [pc, #580]	; (41a798 <checkbox_init+0x2d8>)
  41a554:	681c      	ldr	r4, [r3, #0]
  41a556:	3450      	adds	r4, #80	; 0x50
  41a558:	2000      	movs	r0, #0
  41a55a:	4b91      	ldr	r3, [pc, #580]	; (41a7a0 <checkbox_init+0x2e0>)
  41a55c:	4798      	blx	r3
  41a55e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a562:	0043      	lsls	r3, r0, #1
  41a564:	3350      	adds	r3, #80	; 0x50
  41a566:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41a56a:	f280 80ce 	bge.w	41a70a <checkbox_init+0x24a>
  41a56e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41a570:	2141      	movs	r1, #65	; 0x41
  41a572:	4620      	mov	r0, r4
  41a574:	4d8b      	ldr	r5, [pc, #556]	; (41a7a4 <checkbox_init+0x2e4>)
  41a576:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41a578:	4c87      	ldr	r4, [pc, #540]	; (41a798 <checkbox_init+0x2d8>)
  41a57a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41a57c:	2200      	movs	r2, #0
  41a57e:	21b0      	movs	r1, #176	; 0xb0
  41a580:	3050      	adds	r0, #80	; 0x50
  41a582:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41a584:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41a586:	224c      	movs	r2, #76	; 0x4c
  41a588:	21b7      	movs	r1, #183	; 0xb7
  41a58a:	3050      	adds	r0, #80	; 0x50
  41a58c:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
  41a58e:	6820      	ldr	r0, [r4, #0]
  41a590:	3054      	adds	r0, #84	; 0x54
  41a592:	4b82      	ldr	r3, [pc, #520]	; (41a79c <checkbox_init+0x2dc>)
  41a594:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
  41a596:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41a598:	2200      	movs	r2, #0
  41a59a:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41a59e:	3054      	adds	r0, #84	; 0x54
  41a5a0:	4b83      	ldr	r3, [pc, #524]	; (41a7b0 <checkbox_init+0x2f0>)
  41a5a2:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41a5a4:	6824      	ldr	r4, [r4, #0]
  41a5a6:	3454      	adds	r4, #84	; 0x54
  41a5a8:	2000      	movs	r0, #0
  41a5aa:	4b7d      	ldr	r3, [pc, #500]	; (41a7a0 <checkbox_init+0x2e0>)
  41a5ac:	4798      	blx	r3
  41a5ae:	3014      	adds	r0, #20
  41a5b0:	0080      	lsls	r0, r0, #2
  41a5b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a5b6:	f280 80b7 	bge.w	41a728 <checkbox_init+0x268>
  41a5ba:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a5bc:	2101      	movs	r1, #1
  41a5be:	4620      	mov	r0, r4
  41a5c0:	4e78      	ldr	r6, [pc, #480]	; (41a7a4 <checkbox_init+0x2e4>)
  41a5c2:	47b0      	blx	r6
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
  41a5c4:	4c74      	ldr	r4, [pc, #464]	; (41a798 <checkbox_init+0x2d8>)
  41a5c6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  41a5c8:	4a7a      	ldr	r2, [pc, #488]	; (41a7b4 <checkbox_init+0x2f4>)
  41a5ca:	f44f 71b7 	mov.w	r1, #366	; 0x16e
  41a5ce:	3054      	adds	r0, #84	; 0x54
  41a5d0:	4d79      	ldr	r5, [pc, #484]	; (41a7b8 <checkbox_init+0x2f8>)
  41a5d2:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
  41a5d4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  41a5d6:	4b79      	ldr	r3, [pc, #484]	; (41a7bc <checkbox_init+0x2fc>)
  41a5d8:	881a      	ldrh	r2, [r3, #0]
  41a5da:	f240 1169 	movw	r1, #361	; 0x169
  41a5de:	3054      	adds	r0, #84	; 0x54
  41a5e0:	4b72      	ldr	r3, [pc, #456]	; (41a7ac <checkbox_init+0x2ec>)
  41a5e2:	4798      	blx	r3
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41a5e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  41a5e6:	2200      	movs	r2, #0
  41a5e8:	216c      	movs	r1, #108	; 0x6c
  41a5ea:	3054      	adds	r0, #84	; 0x54
  41a5ec:	4f70      	ldr	r7, [pc, #448]	; (41a7b0 <checkbox_init+0x2f0>)
  41a5ee:	47b8      	blx	r7
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
  41a5f0:	6820      	ldr	r0, [r4, #0]
  41a5f2:	22ff      	movs	r2, #255	; 0xff
  41a5f4:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  41a5f8:	3054      	adds	r0, #84	; 0x54
  41a5fa:	47b8      	blx	r7
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
  41a5fc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  41a5fe:	226c      	movs	r2, #108	; 0x6c
  41a600:	21b4      	movs	r1, #180	; 0xb4
  41a602:	3054      	adds	r0, #84	; 0x54
  41a604:	47b0      	blx	r6
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
  41a606:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41a608:	4b67      	ldr	r3, [pc, #412]	; (41a7a8 <checkbox_init+0x2e8>)
  41a60a:	691a      	ldr	r2, [r3, #16]
  41a60c:	f248 118e 	movw	r1, #33166	; 0x818e
  41a610:	3054      	adds	r0, #84	; 0x54
  41a612:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a614:	6824      	ldr	r4, [r4, #0]
  41a616:	3454      	adds	r4, #84	; 0x54
  41a618:	2000      	movs	r0, #0
  41a61a:	4b61      	ldr	r3, [pc, #388]	; (41a7a0 <checkbox_init+0x2e0>)
  41a61c:	4798      	blx	r3
  41a61e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a622:	3050      	adds	r0, #80	; 0x50
  41a624:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a628:	f280 808b 	bge.w	41a742 <checkbox_init+0x282>
  41a62c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a62e:	2112      	movs	r1, #18
  41a630:	4620      	mov	r0, r4
  41a632:	4b5c      	ldr	r3, [pc, #368]	; (41a7a4 <checkbox_init+0x2e4>)
  41a634:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a636:	4b58      	ldr	r3, [pc, #352]	; (41a798 <checkbox_init+0x2d8>)
  41a638:	681c      	ldr	r4, [r3, #0]
  41a63a:	3454      	adds	r4, #84	; 0x54
  41a63c:	2000      	movs	r0, #0
  41a63e:	4b58      	ldr	r3, [pc, #352]	; (41a7a0 <checkbox_init+0x2e0>)
  41a640:	4798      	blx	r3
  41a642:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a646:	3050      	adds	r0, #80	; 0x50
  41a648:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a64c:	f280 8087 	bge.w	41a75e <checkbox_init+0x29e>
  41a650:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a652:	2113      	movs	r1, #19
  41a654:	4620      	mov	r0, r4
  41a656:	4b53      	ldr	r3, [pc, #332]	; (41a7a4 <checkbox_init+0x2e4>)
  41a658:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a65a:	4b4f      	ldr	r3, [pc, #316]	; (41a798 <checkbox_init+0x2d8>)
  41a65c:	681c      	ldr	r4, [r3, #0]
  41a65e:	3454      	adds	r4, #84	; 0x54
  41a660:	2000      	movs	r0, #0
  41a662:	4b4f      	ldr	r3, [pc, #316]	; (41a7a0 <checkbox_init+0x2e0>)
  41a664:	4798      	blx	r3
  41a666:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a66a:	3050      	adds	r0, #80	; 0x50
  41a66c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a670:	f280 8083 	bge.w	41a77a <checkbox_init+0x2ba>
  41a674:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a676:	2110      	movs	r1, #16
  41a678:	4620      	mov	r0, r4
  41a67a:	4b4a      	ldr	r3, [pc, #296]	; (41a7a4 <checkbox_init+0x2e4>)
  41a67c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a67e:	4b46      	ldr	r3, [pc, #280]	; (41a798 <checkbox_init+0x2d8>)
  41a680:	681c      	ldr	r4, [r3, #0]
  41a682:	3454      	adds	r4, #84	; 0x54
  41a684:	2000      	movs	r0, #0
  41a686:	4b46      	ldr	r3, [pc, #280]	; (41a7a0 <checkbox_init+0x2e0>)
  41a688:	4798      	blx	r3
  41a68a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a68e:	3050      	adds	r0, #80	; 0x50
  41a690:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a694:	f280 8096 	bge.w	41a7c4 <checkbox_init+0x304>
  41a698:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a69a:	2111      	movs	r1, #17
  41a69c:	4620      	mov	r0, r4
  41a69e:	4b41      	ldr	r3, [pc, #260]	; (41a7a4 <checkbox_init+0x2e4>)
  41a6a0:	4798      	blx	r3
  41a6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a6a4:	2000      	movs	r0, #0
  41a6a6:	4b3e      	ldr	r3, [pc, #248]	; (41a7a0 <checkbox_init+0x2e0>)
  41a6a8:	4798      	blx	r3
  41a6aa:	3014      	adds	r0, #20
  41a6ac:	0080      	lsls	r0, r0, #2
  41a6ae:	4b44      	ldr	r3, [pc, #272]	; (41a7c0 <checkbox_init+0x300>)
  41a6b0:	fb83 2300 	smull	r2, r3, r3, r0
  41a6b4:	17c2      	asrs	r2, r0, #31
  41a6b6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a6ba:	b212      	sxth	r2, r2
  41a6bc:	e712      	b.n	41a4e4 <checkbox_init+0x24>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a6be:	2000      	movs	r0, #0
  41a6c0:	4b37      	ldr	r3, [pc, #220]	; (41a7a0 <checkbox_init+0x2e0>)
  41a6c2:	4798      	blx	r3
  41a6c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a6c8:	0043      	lsls	r3, r0, #1
  41a6ca:	3350      	adds	r3, #80	; 0x50
  41a6cc:	493c      	ldr	r1, [pc, #240]	; (41a7c0 <checkbox_init+0x300>)
  41a6ce:	fb81 2103 	smull	r2, r1, r1, r3
  41a6d2:	17da      	asrs	r2, r3, #31
  41a6d4:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41a6d8:	b212      	sxth	r2, r2
  41a6da:	e716      	b.n	41a50a <checkbox_init+0x4a>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41a6dc:	2000      	movs	r0, #0
  41a6de:	4b30      	ldr	r3, [pc, #192]	; (41a7a0 <checkbox_init+0x2e0>)
  41a6e0:	4798      	blx	r3
  41a6e2:	3028      	adds	r0, #40	; 0x28
  41a6e4:	0040      	lsls	r0, r0, #1
  41a6e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a6ea:	da01      	bge.n	41a6f0 <checkbox_init+0x230>
  41a6ec:	2201      	movs	r2, #1
  41a6ee:	e72c      	b.n	41a54a <checkbox_init+0x8a>
  41a6f0:	2000      	movs	r0, #0
  41a6f2:	4b2b      	ldr	r3, [pc, #172]	; (41a7a0 <checkbox_init+0x2e0>)
  41a6f4:	4798      	blx	r3
  41a6f6:	3028      	adds	r0, #40	; 0x28
  41a6f8:	0040      	lsls	r0, r0, #1
  41a6fa:	4b31      	ldr	r3, [pc, #196]	; (41a7c0 <checkbox_init+0x300>)
  41a6fc:	fb83 2300 	smull	r2, r3, r3, r0
  41a700:	17c2      	asrs	r2, r0, #31
  41a702:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a706:	b212      	sxth	r2, r2
  41a708:	e71f      	b.n	41a54a <checkbox_init+0x8a>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a70a:	2000      	movs	r0, #0
  41a70c:	4b24      	ldr	r3, [pc, #144]	; (41a7a0 <checkbox_init+0x2e0>)
  41a70e:	4798      	blx	r3
  41a710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a714:	0043      	lsls	r3, r0, #1
  41a716:	3350      	adds	r3, #80	; 0x50
  41a718:	4929      	ldr	r1, [pc, #164]	; (41a7c0 <checkbox_init+0x300>)
  41a71a:	fb81 2103 	smull	r2, r1, r1, r3
  41a71e:	17da      	asrs	r2, r3, #31
  41a720:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41a724:	b212      	sxth	r2, r2
  41a726:	e723      	b.n	41a570 <checkbox_init+0xb0>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41a728:	2000      	movs	r0, #0
  41a72a:	4b1d      	ldr	r3, [pc, #116]	; (41a7a0 <checkbox_init+0x2e0>)
  41a72c:	4798      	blx	r3
  41a72e:	3014      	adds	r0, #20
  41a730:	0080      	lsls	r0, r0, #2
  41a732:	4b23      	ldr	r3, [pc, #140]	; (41a7c0 <checkbox_init+0x300>)
  41a734:	fb83 2300 	smull	r2, r3, r3, r0
  41a738:	17c2      	asrs	r2, r0, #31
  41a73a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a73e:	b212      	sxth	r2, r2
  41a740:	e73c      	b.n	41a5bc <checkbox_init+0xfc>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a742:	2000      	movs	r0, #0
  41a744:	4b16      	ldr	r3, [pc, #88]	; (41a7a0 <checkbox_init+0x2e0>)
  41a746:	4798      	blx	r3
  41a748:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a74c:	3050      	adds	r0, #80	; 0x50
  41a74e:	4b1c      	ldr	r3, [pc, #112]	; (41a7c0 <checkbox_init+0x300>)
  41a750:	fb83 2300 	smull	r2, r3, r3, r0
  41a754:	17c2      	asrs	r2, r0, #31
  41a756:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a75a:	b212      	sxth	r2, r2
  41a75c:	e767      	b.n	41a62e <checkbox_init+0x16e>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a75e:	2000      	movs	r0, #0
  41a760:	4b0f      	ldr	r3, [pc, #60]	; (41a7a0 <checkbox_init+0x2e0>)
  41a762:	4798      	blx	r3
  41a764:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a768:	3050      	adds	r0, #80	; 0x50
  41a76a:	4b15      	ldr	r3, [pc, #84]	; (41a7c0 <checkbox_init+0x300>)
  41a76c:	fb83 2300 	smull	r2, r3, r3, r0
  41a770:	17c2      	asrs	r2, r0, #31
  41a772:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a776:	b212      	sxth	r2, r2
  41a778:	e76b      	b.n	41a652 <checkbox_init+0x192>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a77a:	2000      	movs	r0, #0
  41a77c:	4b08      	ldr	r3, [pc, #32]	; (41a7a0 <checkbox_init+0x2e0>)
  41a77e:	4798      	blx	r3
  41a780:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a784:	3050      	adds	r0, #80	; 0x50
  41a786:	4b0e      	ldr	r3, [pc, #56]	; (41a7c0 <checkbox_init+0x300>)
  41a788:	fb83 2300 	smull	r2, r3, r3, r0
  41a78c:	17c2      	asrs	r2, r0, #31
  41a78e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a792:	b212      	sxth	r2, r2
  41a794:	e76f      	b.n	41a676 <checkbox_init+0x1b6>
  41a796:	bf00      	nop
  41a798:	20414824 	.word	0x20414824
  41a79c:	00418951 	.word	0x00418951
  41a7a0:	00414d4d 	.word	0x00414d4d
  41a7a4:	0040a1b9 	.word	0x0040a1b9
  41a7a8:	20414828 	.word	0x20414828
  41a7ac:	0040a349 	.word	0x0040a349
  41a7b0:	0040a4d9 	.word	0x0040a4d9
  41a7b4:	0042f878 	.word	0x0042f878
  41a7b8:	0040a669 	.word	0x0040a669
  41a7bc:	0042f86c 	.word	0x0042f86c
  41a7c0:	66666667 	.word	0x66666667
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a7c4:	2000      	movs	r0, #0
  41a7c6:	4b06      	ldr	r3, [pc, #24]	; (41a7e0 <checkbox_init+0x320>)
  41a7c8:	4798      	blx	r3
  41a7ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a7ce:	3050      	adds	r0, #80	; 0x50
  41a7d0:	4b04      	ldr	r3, [pc, #16]	; (41a7e4 <checkbox_init+0x324>)
  41a7d2:	fb83 2300 	smull	r2, r3, r3, r0
  41a7d6:	17c2      	asrs	r2, r0, #31
  41a7d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a7dc:	b212      	sxth	r2, r2
  41a7de:	e75c      	b.n	41a69a <checkbox_init+0x1da>
  41a7e0:	00414d4d 	.word	0x00414d4d
  41a7e4:	66666667 	.word	0x66666667

0041a7e8 <keyboard_init>:
{
  41a7e8:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->kb_bg);
  41a7ea:	4c76      	ldr	r4, [pc, #472]	; (41a9c4 <keyboard_init+0x1dc>)
  41a7ec:	6820      	ldr	r0, [r4, #0]
  41a7ee:	306c      	adds	r0, #108	; 0x6c
  41a7f0:	4b75      	ldr	r3, [pc, #468]	; (41a9c8 <keyboard_init+0x1e0>)
  41a7f2:	4798      	blx	r3
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
  41a7f4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a7f6:	2200      	movs	r2, #0
  41a7f8:	2101      	movs	r1, #1
  41a7fa:	306c      	adds	r0, #108	; 0x6c
  41a7fc:	4b73      	ldr	r3, [pc, #460]	; (41a9cc <keyboard_init+0x1e4>)
  41a7fe:	4798      	blx	r3
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a800:	6824      	ldr	r4, [r4, #0]
  41a802:	346c      	adds	r4, #108	; 0x6c
  41a804:	2000      	movs	r0, #0
  41a806:	4b72      	ldr	r3, [pc, #456]	; (41a9d0 <keyboard_init+0x1e8>)
  41a808:	4798      	blx	r3
  41a80a:	3014      	adds	r0, #20
  41a80c:	0080      	lsls	r0, r0, #2
  41a80e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a812:	f280 8081 	bge.w	41a918 <keyboard_init+0x130>
  41a816:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a818:	2130      	movs	r1, #48	; 0x30
  41a81a:	4620      	mov	r0, r4
  41a81c:	4d6b      	ldr	r5, [pc, #428]	; (41a9cc <keyboard_init+0x1e4>)
  41a81e:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
  41a820:	4c68      	ldr	r4, [pc, #416]	; (41a9c4 <keyboard_init+0x1dc>)
  41a822:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41a824:	2202      	movs	r2, #2
  41a826:	2131      	movs	r1, #49	; 0x31
  41a828:	306c      	adds	r0, #108	; 0x6c
  41a82a:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41a82c:	6820      	ldr	r0, [r4, #0]
  41a82e:	306c      	adds	r0, #108	; 0x6c
  41a830:	4b68      	ldr	r3, [pc, #416]	; (41a9d4 <keyboard_init+0x1ec>)
  41a832:	6a1b      	ldr	r3, [r3, #32]
  41a834:	f013 0f02 	tst.w	r3, #2
  41a838:	d07b      	beq.n	41a932 <keyboard_init+0x14a>
  41a83a:	f04f 0200 	mov.w	r2, #0
  41a83e:	2301      	movs	r3, #1
  41a840:	f363 0202 	bfi	r2, r3, #0, #3
  41a844:	2307      	movs	r3, #7
  41a846:	f363 02c7 	bfi	r2, r3, #3, #5
  41a84a:	2308      	movs	r3, #8
  41a84c:	f363 220c 	bfi	r2, r3, #8, #5
  41a850:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a854:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a858:	2139      	movs	r1, #57	; 0x39
  41a85a:	4d5f      	ldr	r5, [pc, #380]	; (41a9d8 <keyboard_init+0x1f0>)
  41a85c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
  41a85e:	4c59      	ldr	r4, [pc, #356]	; (41a9c4 <keyboard_init+0x1dc>)
  41a860:	6820      	ldr	r0, [r4, #0]
  41a862:	4b5c      	ldr	r3, [pc, #368]	; (41a9d4 <keyboard_init+0x1ec>)
  41a864:	89da      	ldrh	r2, [r3, #14]
  41a866:	f240 4139 	movw	r1, #1081	; 0x439
  41a86a:	306c      	adds	r0, #108	; 0x6c
  41a86c:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a86e:	6824      	ldr	r4, [r4, #0]
  41a870:	346c      	adds	r4, #108	; 0x6c
  41a872:	2000      	movs	r0, #0
  41a874:	4b56      	ldr	r3, [pc, #344]	; (41a9d0 <keyboard_init+0x1e8>)
  41a876:	4798      	blx	r3
  41a878:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a87c:	3050      	adds	r0, #80	; 0x50
  41a87e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a882:	da59      	bge.n	41a938 <keyboard_init+0x150>
  41a884:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a886:	2112      	movs	r1, #18
  41a888:	4620      	mov	r0, r4
  41a88a:	4b50      	ldr	r3, [pc, #320]	; (41a9cc <keyboard_init+0x1e4>)
  41a88c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a88e:	4b4d      	ldr	r3, [pc, #308]	; (41a9c4 <keyboard_init+0x1dc>)
  41a890:	681c      	ldr	r4, [r3, #0]
  41a892:	346c      	adds	r4, #108	; 0x6c
  41a894:	2000      	movs	r0, #0
  41a896:	4b4e      	ldr	r3, [pc, #312]	; (41a9d0 <keyboard_init+0x1e8>)
  41a898:	4798      	blx	r3
  41a89a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a89e:	3050      	adds	r0, #80	; 0x50
  41a8a0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a8a4:	da56      	bge.n	41a954 <keyboard_init+0x16c>
  41a8a6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a8a8:	2113      	movs	r1, #19
  41a8aa:	4620      	mov	r0, r4
  41a8ac:	4b47      	ldr	r3, [pc, #284]	; (41a9cc <keyboard_init+0x1e4>)
  41a8ae:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a8b0:	4b44      	ldr	r3, [pc, #272]	; (41a9c4 <keyboard_init+0x1dc>)
  41a8b2:	681c      	ldr	r4, [r3, #0]
  41a8b4:	346c      	adds	r4, #108	; 0x6c
  41a8b6:	2000      	movs	r0, #0
  41a8b8:	4b45      	ldr	r3, [pc, #276]	; (41a9d0 <keyboard_init+0x1e8>)
  41a8ba:	4798      	blx	r3
  41a8bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a8c0:	3050      	adds	r0, #80	; 0x50
  41a8c2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a8c6:	da53      	bge.n	41a970 <keyboard_init+0x188>
  41a8c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a8ca:	2110      	movs	r1, #16
  41a8cc:	4620      	mov	r0, r4
  41a8ce:	4b3f      	ldr	r3, [pc, #252]	; (41a9cc <keyboard_init+0x1e4>)
  41a8d0:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a8d2:	4b3c      	ldr	r3, [pc, #240]	; (41a9c4 <keyboard_init+0x1dc>)
  41a8d4:	681c      	ldr	r4, [r3, #0]
  41a8d6:	346c      	adds	r4, #108	; 0x6c
  41a8d8:	2000      	movs	r0, #0
  41a8da:	4b3d      	ldr	r3, [pc, #244]	; (41a9d0 <keyboard_init+0x1e8>)
  41a8dc:	4798      	blx	r3
  41a8de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a8e2:	3050      	adds	r0, #80	; 0x50
  41a8e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a8e8:	da50      	bge.n	41a98c <keyboard_init+0x1a4>
  41a8ea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a8ec:	2111      	movs	r1, #17
  41a8ee:	4620      	mov	r0, r4
  41a8f0:	4b36      	ldr	r3, [pc, #216]	; (41a9cc <keyboard_init+0x1e4>)
  41a8f2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41a8f4:	4b33      	ldr	r3, [pc, #204]	; (41a9c4 <keyboard_init+0x1dc>)
  41a8f6:	681c      	ldr	r4, [r3, #0]
  41a8f8:	346c      	adds	r4, #108	; 0x6c
  41a8fa:	2000      	movs	r0, #0
  41a8fc:	4b34      	ldr	r3, [pc, #208]	; (41a9d0 <keyboard_init+0x1e8>)
  41a8fe:	4798      	blx	r3
  41a900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a904:	3050      	adds	r0, #80	; 0x50
  41a906:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a90a:	da4d      	bge.n	41a9a8 <keyboard_init+0x1c0>
  41a90c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a90e:	2114      	movs	r1, #20
  41a910:	4620      	mov	r0, r4
  41a912:	4b2e      	ldr	r3, [pc, #184]	; (41a9cc <keyboard_init+0x1e4>)
  41a914:	4798      	blx	r3
  41a916:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a918:	2000      	movs	r0, #0
  41a91a:	4b2d      	ldr	r3, [pc, #180]	; (41a9d0 <keyboard_init+0x1e8>)
  41a91c:	4798      	blx	r3
  41a91e:	3014      	adds	r0, #20
  41a920:	0080      	lsls	r0, r0, #2
  41a922:	4b2e      	ldr	r3, [pc, #184]	; (41a9dc <keyboard_init+0x1f4>)
  41a924:	fb83 2300 	smull	r2, r3, r3, r0
  41a928:	17c2      	asrs	r2, r0, #31
  41a92a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a92e:	b212      	sxth	r2, r2
  41a930:	e772      	b.n	41a818 <keyboard_init+0x30>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41a932:	f04f 0200 	mov.w	r2, #0
  41a936:	e78f      	b.n	41a858 <keyboard_init+0x70>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a938:	2000      	movs	r0, #0
  41a93a:	4b25      	ldr	r3, [pc, #148]	; (41a9d0 <keyboard_init+0x1e8>)
  41a93c:	4798      	blx	r3
  41a93e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a942:	3050      	adds	r0, #80	; 0x50
  41a944:	4b25      	ldr	r3, [pc, #148]	; (41a9dc <keyboard_init+0x1f4>)
  41a946:	fb83 2300 	smull	r2, r3, r3, r0
  41a94a:	17c2      	asrs	r2, r0, #31
  41a94c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a950:	b212      	sxth	r2, r2
  41a952:	e798      	b.n	41a886 <keyboard_init+0x9e>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a954:	2000      	movs	r0, #0
  41a956:	4b1e      	ldr	r3, [pc, #120]	; (41a9d0 <keyboard_init+0x1e8>)
  41a958:	4798      	blx	r3
  41a95a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a95e:	3050      	adds	r0, #80	; 0x50
  41a960:	4b1e      	ldr	r3, [pc, #120]	; (41a9dc <keyboard_init+0x1f4>)
  41a962:	fb83 2300 	smull	r2, r3, r3, r0
  41a966:	17c2      	asrs	r2, r0, #31
  41a968:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a96c:	b212      	sxth	r2, r2
  41a96e:	e79b      	b.n	41a8a8 <keyboard_init+0xc0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a970:	2000      	movs	r0, #0
  41a972:	4b17      	ldr	r3, [pc, #92]	; (41a9d0 <keyboard_init+0x1e8>)
  41a974:	4798      	blx	r3
  41a976:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a97a:	3050      	adds	r0, #80	; 0x50
  41a97c:	4b17      	ldr	r3, [pc, #92]	; (41a9dc <keyboard_init+0x1f4>)
  41a97e:	fb83 2300 	smull	r2, r3, r3, r0
  41a982:	17c2      	asrs	r2, r0, #31
  41a984:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a988:	b212      	sxth	r2, r2
  41a98a:	e79e      	b.n	41a8ca <keyboard_init+0xe2>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a98c:	2000      	movs	r0, #0
  41a98e:	4b10      	ldr	r3, [pc, #64]	; (41a9d0 <keyboard_init+0x1e8>)
  41a990:	4798      	blx	r3
  41a992:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a996:	3050      	adds	r0, #80	; 0x50
  41a998:	4b10      	ldr	r3, [pc, #64]	; (41a9dc <keyboard_init+0x1f4>)
  41a99a:	fb83 2300 	smull	r2, r3, r3, r0
  41a99e:	17c2      	asrs	r2, r0, #31
  41a9a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a9a4:	b212      	sxth	r2, r2
  41a9a6:	e7a1      	b.n	41a8ec <keyboard_init+0x104>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41a9a8:	2000      	movs	r0, #0
  41a9aa:	4b09      	ldr	r3, [pc, #36]	; (41a9d0 <keyboard_init+0x1e8>)
  41a9ac:	4798      	blx	r3
  41a9ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a9b2:	3050      	adds	r0, #80	; 0x50
  41a9b4:	4b09      	ldr	r3, [pc, #36]	; (41a9dc <keyboard_init+0x1f4>)
  41a9b6:	fb83 2300 	smull	r2, r3, r3, r0
  41a9ba:	17c2      	asrs	r2, r0, #31
  41a9bc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a9c0:	b212      	sxth	r2, r2
  41a9c2:	e7a4      	b.n	41a90e <keyboard_init+0x126>
  41a9c4:	20414824 	.word	0x20414824
  41a9c8:	00418951 	.word	0x00418951
  41a9cc:	0040a1b9 	.word	0x0040a1b9
  41a9d0:	00414d4d 	.word	0x00414d4d
  41a9d4:	20414828 	.word	0x20414828
  41a9d8:	0040a349 	.word	0x0040a349
  41a9dc:	66666667 	.word	0x66666667

0041a9e0 <msgbox_init>:
{
  41a9e0:	b510      	push	{r4, lr}
    style_init_reset(&styles->mbox_bg);
  41a9e2:	4c20      	ldr	r4, [pc, #128]	; (41aa64 <msgbox_init+0x84>)
  41a9e4:	6820      	ldr	r0, [r4, #0]
  41a9e6:	3080      	adds	r0, #128	; 0x80
  41a9e8:	4b1f      	ldr	r3, [pc, #124]	; (41aa68 <msgbox_init+0x88>)
  41a9ea:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41a9ec:	6824      	ldr	r4, [r4, #0]
  41a9ee:	3480      	adds	r4, #128	; 0x80
  41a9f0:	2000      	movs	r0, #0
  41a9f2:	4b1e      	ldr	r3, [pc, #120]	; (41aa6c <msgbox_init+0x8c>)
  41a9f4:	4798      	blx	r3
  41a9f6:	2332      	movs	r3, #50	; 0x32
  41a9f8:	fb03 f000 	mul.w	r0, r3, r0
  41a9fc:	3050      	adds	r0, #80	; 0x50
  41a9fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aa02:	da1d      	bge.n	41aa40 <msgbox_init+0x60>
  41aa04:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41aa06:	2150      	movs	r1, #80	; 0x50
  41aa08:	4620      	mov	r0, r4
  41aa0a:	4b19      	ldr	r3, [pc, #100]	; (41aa70 <msgbox_init+0x90>)
  41aa0c:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41aa0e:	4b15      	ldr	r3, [pc, #84]	; (41aa64 <msgbox_init+0x84>)
  41aa10:	6818      	ldr	r0, [r3, #0]
  41aa12:	3080      	adds	r0, #128	; 0x80
  41aa14:	4b17      	ldr	r3, [pc, #92]	; (41aa74 <msgbox_init+0x94>)
  41aa16:	6a1b      	ldr	r3, [r3, #32]
  41aa18:	f013 0f02 	tst.w	r3, #2
  41aa1c:	d11f      	bne.n	41aa5e <msgbox_init+0x7e>
  41aa1e:	f04f 0200 	mov.w	r2, #0
  41aa22:	2304      	movs	r3, #4
  41aa24:	f363 0202 	bfi	r2, r3, #0, #3
  41aa28:	2313      	movs	r3, #19
  41aa2a:	f363 02c7 	bfi	r2, r3, #3, #5
  41aa2e:	f363 220c 	bfi	r2, r3, #8, #5
  41aa32:	2306      	movs	r3, #6
  41aa34:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41aa38:	2159      	movs	r1, #89	; 0x59
  41aa3a:	4b0f      	ldr	r3, [pc, #60]	; (41aa78 <msgbox_init+0x98>)
  41aa3c:	4798      	blx	r3
  41aa3e:	bd10      	pop	{r4, pc}
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41aa40:	2000      	movs	r0, #0
  41aa42:	4b0a      	ldr	r3, [pc, #40]	; (41aa6c <msgbox_init+0x8c>)
  41aa44:	4798      	blx	r3
  41aa46:	2232      	movs	r2, #50	; 0x32
  41aa48:	fb02 f000 	mul.w	r0, r2, r0
  41aa4c:	3050      	adds	r0, #80	; 0x50
  41aa4e:	4b0b      	ldr	r3, [pc, #44]	; (41aa7c <msgbox_init+0x9c>)
  41aa50:	fb83 2300 	smull	r2, r3, r3, r0
  41aa54:	17c2      	asrs	r2, r0, #31
  41aa56:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aa5a:	b212      	sxth	r2, r2
  41aa5c:	e7d3      	b.n	41aa06 <msgbox_init+0x26>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41aa5e:	4b08      	ldr	r3, [pc, #32]	; (41aa80 <msgbox_init+0xa0>)
  41aa60:	891a      	ldrh	r2, [r3, #8]
  41aa62:	e7e9      	b.n	41aa38 <msgbox_init+0x58>
  41aa64:	20414824 	.word	0x20414824
  41aa68:	00418951 	.word	0x00418951
  41aa6c:	00414d4d 	.word	0x00414d4d
  41aa70:	0040a1b9 	.word	0x0040a1b9
  41aa74:	20414828 	.word	0x20414828
  41aa78:	0040a349 	.word	0x0040a349
  41aa7c:	66666667 	.word	0x66666667
  41aa80:	0042f86c 	.word	0x0042f86c

0041aa84 <page_init>:
{
  41aa84:	b510      	push	{r4, lr}
    style_init_reset(&styles->sb);
  41aa86:	4c5a      	ldr	r4, [pc, #360]	; (41abf0 <page_init+0x16c>)
  41aa88:	6820      	ldr	r0, [r4, #0]
  41aa8a:	3084      	adds	r0, #132	; 0x84
  41aa8c:	4b59      	ldr	r3, [pc, #356]	; (41abf4 <page_init+0x170>)
  41aa8e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
  41aa90:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41aa92:	22ff      	movs	r2, #255	; 0xff
  41aa94:	212c      	movs	r1, #44	; 0x2c
  41aa96:	3084      	adds	r0, #132	; 0x84
  41aa98:	4b57      	ldr	r3, [pc, #348]	; (41abf8 <page_init+0x174>)
  41aa9a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
  41aa9c:	6820      	ldr	r0, [r4, #0]
  41aa9e:	3084      	adds	r0, #132	; 0x84
  41aaa0:	4b56      	ldr	r3, [pc, #344]	; (41abfc <page_init+0x178>)
  41aaa2:	6a1b      	ldr	r3, [r3, #32]
  41aaa4:	f013 0f02 	tst.w	r3, #2
  41aaa8:	d068      	beq.n	41ab7c <page_init+0xf8>
  41aaaa:	f04f 0200 	mov.w	r2, #0
  41aaae:	2306      	movs	r3, #6
  41aab0:	f363 0202 	bfi	r2, r3, #0, #3
  41aab4:	2319      	movs	r3, #25
  41aab6:	f363 02c7 	bfi	r2, r3, #3, #5
  41aaba:	231a      	movs	r3, #26
  41aabc:	f363 220c 	bfi	r2, r3, #8, #5
  41aac0:	2303      	movs	r3, #3
  41aac2:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41aac6:	2129      	movs	r1, #41	; 0x29
  41aac8:	4b4d      	ldr	r3, [pc, #308]	; (41ac00 <page_init+0x17c>)
  41aaca:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41aacc:	4c48      	ldr	r4, [pc, #288]	; (41abf0 <page_init+0x16c>)
  41aace:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41aad0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41aad4:	2101      	movs	r1, #1
  41aad6:	3084      	adds	r0, #132	; 0x84
  41aad8:	4b4a      	ldr	r3, [pc, #296]	; (41ac04 <page_init+0x180>)
  41aada:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41aadc:	6824      	ldr	r4, [r4, #0]
  41aade:	3484      	adds	r4, #132	; 0x84
  41aae0:	2000      	movs	r0, #0
  41aae2:	4b49      	ldr	r3, [pc, #292]	; (41ac08 <page_init+0x184>)
  41aae4:	4798      	blx	r3
  41aae6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41aaea:	3050      	adds	r0, #80	; 0x50
  41aaec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aaf0:	da54      	bge.n	41ab9c <page_init+0x118>
  41aaf2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41aaf4:	2103      	movs	r1, #3
  41aaf6:	4620      	mov	r0, r4
  41aaf8:	4b42      	ldr	r3, [pc, #264]	; (41ac04 <page_init+0x180>)
  41aafa:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41aafc:	4b3c      	ldr	r3, [pc, #240]	; (41abf0 <page_init+0x16c>)
  41aafe:	681c      	ldr	r4, [r3, #0]
  41ab00:	3484      	adds	r4, #132	; 0x84
  41ab02:	2000      	movs	r0, #0
  41ab04:	4b40      	ldr	r3, [pc, #256]	; (41ac08 <page_init+0x184>)
  41ab06:	4798      	blx	r3
  41ab08:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ab0c:	3050      	adds	r0, #80	; 0x50
  41ab0e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab12:	da51      	bge.n	41abb8 <page_init+0x134>
  41ab14:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ab16:	2113      	movs	r1, #19
  41ab18:	4620      	mov	r0, r4
  41ab1a:	4b3a      	ldr	r3, [pc, #232]	; (41ac04 <page_init+0x180>)
  41ab1c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41ab1e:	4b34      	ldr	r3, [pc, #208]	; (41abf0 <page_init+0x16c>)
  41ab20:	681c      	ldr	r4, [r3, #0]
  41ab22:	3484      	adds	r4, #132	; 0x84
  41ab24:	2000      	movs	r0, #0
  41ab26:	4b38      	ldr	r3, [pc, #224]	; (41ac08 <page_init+0x184>)
  41ab28:	4798      	blx	r3
  41ab2a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ab2e:	3050      	adds	r0, #80	; 0x50
  41ab30:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab34:	da4e      	bge.n	41abd4 <page_init+0x150>
  41ab36:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ab38:	2111      	movs	r1, #17
  41ab3a:	4620      	mov	r0, r4
  41ab3c:	4b31      	ldr	r3, [pc, #196]	; (41ac04 <page_init+0x180>)
  41ab3e:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
  41ab40:	4c2b      	ldr	r4, [pc, #172]	; (41abf0 <page_init+0x16c>)
  41ab42:	6820      	ldr	r0, [r4, #0]
  41ab44:	3088      	adds	r0, #136	; 0x88
  41ab46:	4b2b      	ldr	r3, [pc, #172]	; (41abf4 <page_init+0x170>)
  41ab48:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
  41ab4a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ab4c:	22ff      	movs	r2, #255	; 0xff
  41ab4e:	212c      	movs	r1, #44	; 0x2c
  41ab50:	3088      	adds	r0, #136	; 0x88
  41ab52:	4b29      	ldr	r3, [pc, #164]	; (41abf8 <page_init+0x174>)
  41ab54:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
  41ab56:	6820      	ldr	r0, [r4, #0]
  41ab58:	f04f 0200 	mov.w	r2, #0
  41ab5c:	2304      	movs	r3, #4
  41ab5e:	f363 0202 	bfi	r2, r3, #0, #3
  41ab62:	2311      	movs	r3, #17
  41ab64:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab68:	f363 220c 	bfi	r2, r3, #8, #5
  41ab6c:	2302      	movs	r3, #2
  41ab6e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ab72:	2129      	movs	r1, #41	; 0x29
  41ab74:	3088      	adds	r0, #136	; 0x88
  41ab76:	4b22      	ldr	r3, [pc, #136]	; (41ac00 <page_init+0x17c>)
  41ab78:	4798      	blx	r3
  41ab7a:	bd10      	pop	{r4, pc}
  41ab7c:	f04f 0200 	mov.w	r2, #0
  41ab80:	2303      	movs	r3, #3
  41ab82:	f363 0202 	bfi	r2, r3, #0, #3
  41ab86:	230e      	movs	r3, #14
  41ab88:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab8c:	2310      	movs	r3, #16
  41ab8e:	f363 220c 	bfi	r2, r3, #8, #5
  41ab92:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ab96:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41ab9a:	e794      	b.n	41aac6 <page_init+0x42>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41ab9c:	2000      	movs	r0, #0
  41ab9e:	4b1a      	ldr	r3, [pc, #104]	; (41ac08 <page_init+0x184>)
  41aba0:	4798      	blx	r3
  41aba2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41aba6:	3050      	adds	r0, #80	; 0x50
  41aba8:	4b18      	ldr	r3, [pc, #96]	; (41ac0c <page_init+0x188>)
  41abaa:	fb83 2300 	smull	r2, r3, r3, r0
  41abae:	17c2      	asrs	r2, r0, #31
  41abb0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41abb4:	b212      	sxth	r2, r2
  41abb6:	e79d      	b.n	41aaf4 <page_init+0x70>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41abb8:	2000      	movs	r0, #0
  41abba:	4b13      	ldr	r3, [pc, #76]	; (41ac08 <page_init+0x184>)
  41abbc:	4798      	blx	r3
  41abbe:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41abc2:	3050      	adds	r0, #80	; 0x50
  41abc4:	4b11      	ldr	r3, [pc, #68]	; (41ac0c <page_init+0x188>)
  41abc6:	fb83 2300 	smull	r2, r3, r3, r0
  41abca:	17c2      	asrs	r2, r0, #31
  41abcc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41abd0:	b212      	sxth	r2, r2
  41abd2:	e7a0      	b.n	41ab16 <page_init+0x92>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41abd4:	2000      	movs	r0, #0
  41abd6:	4b0c      	ldr	r3, [pc, #48]	; (41ac08 <page_init+0x184>)
  41abd8:	4798      	blx	r3
  41abda:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41abde:	3050      	adds	r0, #80	; 0x50
  41abe0:	4b0a      	ldr	r3, [pc, #40]	; (41ac0c <page_init+0x188>)
  41abe2:	fb83 2300 	smull	r2, r3, r3, r0
  41abe6:	17c2      	asrs	r2, r0, #31
  41abe8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41abec:	b212      	sxth	r2, r2
  41abee:	e7a3      	b.n	41ab38 <page_init+0xb4>
  41abf0:	20414824 	.word	0x20414824
  41abf4:	00418951 	.word	0x00418951
  41abf8:	0040a4d9 	.word	0x0040a4d9
  41abfc:	20414828 	.word	0x20414828
  41ac00:	0040a349 	.word	0x0040a349
  41ac04:	0040a1b9 	.word	0x0040a1b9
  41ac08:	00414d4d 	.word	0x00414d4d
  41ac0c:	66666667 	.word	0x66666667

0041ac10 <textarea_init>:
{
  41ac10:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ta_cursor);
  41ac12:	4c4a      	ldr	r4, [pc, #296]	; (41ad3c <textarea_init+0x12c>)
  41ac14:	6820      	ldr	r0, [r4, #0]
  41ac16:	30b8      	adds	r0, #184	; 0xb8
  41ac18:	4b49      	ldr	r3, [pc, #292]	; (41ad40 <textarea_init+0x130>)
  41ac1a:	4798      	blx	r3
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41ac1c:	6820      	ldr	r0, [r4, #0]
  41ac1e:	30b8      	adds	r0, #184	; 0xb8
  41ac20:	4b48      	ldr	r3, [pc, #288]	; (41ad44 <textarea_init+0x134>)
  41ac22:	6a1b      	ldr	r3, [r3, #32]
  41ac24:	f013 0f02 	tst.w	r3, #2
  41ac28:	d052      	beq.n	41acd0 <textarea_init+0xc0>
  41ac2a:	f04f 0200 	mov.w	r2, #0
  41ac2e:	2302      	movs	r3, #2
  41ac30:	f363 0202 	bfi	r2, r3, #0, #3
  41ac34:	2306      	movs	r3, #6
  41ac36:	f363 02c7 	bfi	r2, r3, #3, #5
  41ac3a:	2309      	movs	r3, #9
  41ac3c:	f363 220c 	bfi	r2, r3, #8, #5
  41ac40:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41ac44:	2139      	movs	r1, #57	; 0x39
  41ac46:	4b40      	ldr	r3, [pc, #256]	; (41ad48 <textarea_init+0x138>)
  41ac48:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41ac4a:	4b3c      	ldr	r3, [pc, #240]	; (41ad3c <textarea_init+0x12c>)
  41ac4c:	681c      	ldr	r4, [r3, #0]
  41ac4e:	34b8      	adds	r4, #184	; 0xb8
  41ac50:	2000      	movs	r0, #0
  41ac52:	4b3e      	ldr	r3, [pc, #248]	; (41ad4c <textarea_init+0x13c>)
  41ac54:	4798      	blx	r3
  41ac56:	3028      	adds	r0, #40	; 0x28
  41ac58:	0040      	lsls	r0, r0, #1
  41ac5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac5e:	da46      	bge.n	41acee <textarea_init+0xde>
  41ac60:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41ac62:	2130      	movs	r1, #48	; 0x30
  41ac64:	4620      	mov	r0, r4
  41ac66:	4b3a      	ldr	r3, [pc, #232]	; (41ad50 <textarea_init+0x140>)
  41ac68:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41ac6a:	4b34      	ldr	r3, [pc, #208]	; (41ad3c <textarea_init+0x12c>)
  41ac6c:	681c      	ldr	r4, [r3, #0]
  41ac6e:	34b8      	adds	r4, #184	; 0xb8
  41ac70:	2000      	movs	r0, #0
  41ac72:	4b36      	ldr	r3, [pc, #216]	; (41ad4c <textarea_init+0x13c>)
  41ac74:	4798      	blx	r3
  41ac76:	3050      	adds	r0, #80	; 0x50
  41ac78:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac7c:	da44      	bge.n	41ad08 <textarea_init+0xf8>
  41ac7e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ac80:	2112      	movs	r1, #18
  41ac82:	4620      	mov	r0, r4
  41ac84:	4d32      	ldr	r5, [pc, #200]	; (41ad50 <textarea_init+0x140>)
  41ac86:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
  41ac88:	4c2c      	ldr	r4, [pc, #176]	; (41ad3c <textarea_init+0x12c>)
  41ac8a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41ac8c:	2204      	movs	r2, #4
  41ac8e:	2131      	movs	r1, #49	; 0x31
  41ac90:	30b8      	adds	r0, #184	; 0xb8
  41ac92:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
  41ac94:	6820      	ldr	r0, [r4, #0]
  41ac96:	30bc      	adds	r0, #188	; 0xbc
  41ac98:	4b29      	ldr	r3, [pc, #164]	; (41ad40 <textarea_init+0x130>)
  41ac9a:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41ac9c:	6820      	ldr	r0, [r4, #0]
  41ac9e:	30bc      	adds	r0, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  41aca0:	4b28      	ldr	r3, [pc, #160]	; (41ad44 <textarea_init+0x134>)
  41aca2:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41aca4:	f013 0f02 	tst.w	r3, #2
  41aca8:	d13a      	bne.n	41ad20 <textarea_init+0x110>
  41acaa:	f04f 0200 	mov.w	r2, #0
  41acae:	2305      	movs	r3, #5
  41acb0:	f363 0202 	bfi	r2, r3, #0, #3
  41acb4:	2314      	movs	r3, #20
  41acb6:	f363 02c7 	bfi	r2, r3, #3, #5
  41acba:	2317      	movs	r3, #23
  41acbc:	f363 220c 	bfi	r2, r3, #8, #5
  41acc0:	2303      	movs	r3, #3
  41acc2:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41acc6:	f248 0189 	movw	r1, #32905	; 0x8089
  41acca:	4b1f      	ldr	r3, [pc, #124]	; (41ad48 <textarea_init+0x138>)
  41accc:	4798      	blx	r3
  41acce:	bd38      	pop	{r3, r4, r5, pc}
  41acd0:	f04f 0200 	mov.w	r2, #0
  41acd4:	2305      	movs	r3, #5
  41acd6:	f363 0202 	bfi	r2, r3, #0, #3
  41acda:	2314      	movs	r3, #20
  41acdc:	f363 02c7 	bfi	r2, r3, #3, #5
  41ace0:	2315      	movs	r3, #21
  41ace2:	f363 220c 	bfi	r2, r3, #8, #5
  41ace6:	2302      	movs	r3, #2
  41ace8:	f363 324f 	bfi	r2, r3, #13, #3
  41acec:	e7aa      	b.n	41ac44 <textarea_init+0x34>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41acee:	2000      	movs	r0, #0
  41acf0:	4b16      	ldr	r3, [pc, #88]	; (41ad4c <textarea_init+0x13c>)
  41acf2:	4798      	blx	r3
  41acf4:	3028      	adds	r0, #40	; 0x28
  41acf6:	0040      	lsls	r0, r0, #1
  41acf8:	4b16      	ldr	r3, [pc, #88]	; (41ad54 <textarea_init+0x144>)
  41acfa:	fb83 2300 	smull	r2, r3, r3, r0
  41acfe:	17c2      	asrs	r2, r0, #31
  41ad00:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ad04:	b212      	sxth	r2, r2
  41ad06:	e7ac      	b.n	41ac62 <textarea_init+0x52>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41ad08:	2000      	movs	r0, #0
  41ad0a:	4b10      	ldr	r3, [pc, #64]	; (41ad4c <textarea_init+0x13c>)
  41ad0c:	4798      	blx	r3
  41ad0e:	3050      	adds	r0, #80	; 0x50
  41ad10:	4b10      	ldr	r3, [pc, #64]	; (41ad54 <textarea_init+0x144>)
  41ad12:	fb83 2300 	smull	r2, r3, r3, r0
  41ad16:	17c2      	asrs	r2, r0, #31
  41ad18:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ad1c:	b212      	sxth	r2, r2
  41ad1e:	e7af      	b.n	41ac80 <textarea_init+0x70>
  41ad20:	f04f 0200 	mov.w	r2, #0
  41ad24:	2305      	movs	r3, #5
  41ad26:	f363 0202 	bfi	r2, r3, #0, #3
  41ad2a:	2315      	movs	r3, #21
  41ad2c:	f363 02c7 	bfi	r2, r3, #3, #5
  41ad30:	f363 220c 	bfi	r2, r3, #8, #5
  41ad34:	2302      	movs	r3, #2
  41ad36:	f363 324f 	bfi	r2, r3, #13, #3
  41ad3a:	e7c4      	b.n	41acc6 <textarea_init+0xb6>
  41ad3c:	20414824 	.word	0x20414824
  41ad40:	00418951 	.word	0x00418951
  41ad44:	20414828 	.word	0x20414828
  41ad48:	0040a349 	.word	0x0040a349
  41ad4c:	00414d4d 	.word	0x00414d4d
  41ad50:	0040a1b9 	.word	0x0040a1b9
  41ad54:	66666667 	.word	0x66666667

0041ad58 <spinbox_init>:
{
  41ad58:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->spinbox_cursor);
  41ad5a:	4c2d      	ldr	r4, [pc, #180]	; (41ae10 <spinbox_init+0xb8>)
  41ad5c:	6820      	ldr	r0, [r4, #0]
  41ad5e:	309c      	adds	r0, #156	; 0x9c
  41ad60:	4b2c      	ldr	r3, [pc, #176]	; (41ae14 <spinbox_init+0xbc>)
  41ad62:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
  41ad64:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ad66:	22ff      	movs	r2, #255	; 0xff
  41ad68:	212c      	movs	r1, #44	; 0x2c
  41ad6a:	309c      	adds	r0, #156	; 0x9c
  41ad6c:	4b2a      	ldr	r3, [pc, #168]	; (41ae18 <spinbox_init+0xc0>)
  41ad6e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
  41ad70:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ad72:	4b2a      	ldr	r3, [pc, #168]	; (41ae1c <spinbox_init+0xc4>)
  41ad74:	899a      	ldrh	r2, [r3, #12]
  41ad76:	2129      	movs	r1, #41	; 0x29
  41ad78:	309c      	adds	r0, #156	; 0x9c
  41ad7a:	4d29      	ldr	r5, [pc, #164]	; (41ae20 <spinbox_init+0xc8>)
  41ad7c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41ad7e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41ad80:	4b28      	ldr	r3, [pc, #160]	; (41ae24 <spinbox_init+0xcc>)
  41ad82:	881a      	ldrh	r2, [r3, #0]
  41ad84:	f248 0189 	movw	r1, #32905	; 0x8089
  41ad88:	309c      	adds	r0, #156	; 0x9c
  41ad8a:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41ad8c:	6824      	ldr	r4, [r4, #0]
  41ad8e:	349c      	adds	r4, #156	; 0x9c
  41ad90:	2000      	movs	r0, #0
  41ad92:	4b25      	ldr	r3, [pc, #148]	; (41ae28 <spinbox_init+0xd0>)
  41ad94:	4798      	blx	r3
  41ad96:	2364      	movs	r3, #100	; 0x64
  41ad98:	fb03 f000 	mul.w	r0, r3, r0
  41ad9c:	3050      	adds	r0, #80	; 0x50
  41ad9e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ada2:	da17      	bge.n	41add4 <spinbox_init+0x7c>
  41ada4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ada6:	2110      	movs	r1, #16
  41ada8:	4620      	mov	r0, r4
  41adaa:	4b20      	ldr	r3, [pc, #128]	; (41ae2c <spinbox_init+0xd4>)
  41adac:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41adae:	4b18      	ldr	r3, [pc, #96]	; (41ae10 <spinbox_init+0xb8>)
  41adb0:	681c      	ldr	r4, [r3, #0]
  41adb2:	349c      	adds	r4, #156	; 0x9c
  41adb4:	2000      	movs	r0, #0
  41adb6:	4b1c      	ldr	r3, [pc, #112]	; (41ae28 <spinbox_init+0xd0>)
  41adb8:	4798      	blx	r3
  41adba:	2364      	movs	r3, #100	; 0x64
  41adbc:	fb03 f000 	mul.w	r0, r3, r0
  41adc0:	3050      	adds	r0, #80	; 0x50
  41adc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41adc6:	da14      	bge.n	41adf2 <spinbox_init+0x9a>
  41adc8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41adca:	2111      	movs	r1, #17
  41adcc:	4620      	mov	r0, r4
  41adce:	4b17      	ldr	r3, [pc, #92]	; (41ae2c <spinbox_init+0xd4>)
  41add0:	4798      	blx	r3
  41add2:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41add4:	2000      	movs	r0, #0
  41add6:	4b14      	ldr	r3, [pc, #80]	; (41ae28 <spinbox_init+0xd0>)
  41add8:	4798      	blx	r3
  41adda:	2264      	movs	r2, #100	; 0x64
  41addc:	fb02 f000 	mul.w	r0, r2, r0
  41ade0:	3050      	adds	r0, #80	; 0x50
  41ade2:	4b13      	ldr	r3, [pc, #76]	; (41ae30 <spinbox_init+0xd8>)
  41ade4:	fb83 2300 	smull	r2, r3, r3, r0
  41ade8:	17c2      	asrs	r2, r0, #31
  41adea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41adee:	b212      	sxth	r2, r2
  41adf0:	e7d9      	b.n	41ada6 <spinbox_init+0x4e>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41adf2:	2000      	movs	r0, #0
  41adf4:	4b0c      	ldr	r3, [pc, #48]	; (41ae28 <spinbox_init+0xd0>)
  41adf6:	4798      	blx	r3
  41adf8:	2264      	movs	r2, #100	; 0x64
  41adfa:	fb02 f000 	mul.w	r0, r2, r0
  41adfe:	3050      	adds	r0, #80	; 0x50
  41ae00:	4b0b      	ldr	r3, [pc, #44]	; (41ae30 <spinbox_init+0xd8>)
  41ae02:	fb83 2300 	smull	r2, r3, r3, r0
  41ae06:	17c2      	asrs	r2, r0, #31
  41ae08:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ae0c:	b212      	sxth	r2, r2
  41ae0e:	e7dc      	b.n	41adca <spinbox_init+0x72>
  41ae10:	20414824 	.word	0x20414824
  41ae14:	00418951 	.word	0x00418951
  41ae18:	0040a4d9 	.word	0x0040a4d9
  41ae1c:	20414828 	.word	0x20414828
  41ae20:	0040a349 	.word	0x0040a349
  41ae24:	0042f86c 	.word	0x0042f86c
  41ae28:	00414d4d 	.word	0x00414d4d
  41ae2c:	0040a1b9 	.word	0x0040a1b9
  41ae30:	66666667 	.word	0x66666667

0041ae34 <list_init>:
{
  41ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->list_bg);
  41ae36:	4cbf      	ldr	r4, [pc, #764]	; (41b134 <list_init+0x300>)
  41ae38:	6820      	ldr	r0, [r4, #0]
  41ae3a:	3078      	adds	r0, #120	; 0x78
  41ae3c:	4ebe      	ldr	r6, [pc, #760]	; (41b138 <list_init+0x304>)
  41ae3e:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
  41ae40:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41ae42:	2201      	movs	r2, #1
  41ae44:	2102      	movs	r1, #2
  41ae46:	3078      	adds	r0, #120	; 0x78
  41ae48:	4dbc      	ldr	r5, [pc, #752]	; (41b13c <list_init+0x308>)
  41ae4a:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41ae4c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ae4e:	2200      	movs	r2, #0
  41ae50:	2112      	movs	r1, #18
  41ae52:	3078      	adds	r0, #120	; 0x78
  41ae54:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41ae56:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ae58:	2200      	movs	r2, #0
  41ae5a:	2113      	movs	r1, #19
  41ae5c:	3078      	adds	r0, #120	; 0x78
  41ae5e:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41ae60:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ae62:	2200      	movs	r2, #0
  41ae64:	2110      	movs	r1, #16
  41ae66:	3078      	adds	r0, #120	; 0x78
  41ae68:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41ae6a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ae6c:	2200      	movs	r2, #0
  41ae6e:	2111      	movs	r1, #17
  41ae70:	3078      	adds	r0, #120	; 0x78
  41ae72:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41ae74:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41ae76:	2200      	movs	r2, #0
  41ae78:	2114      	movs	r1, #20
  41ae7a:	3078      	adds	r0, #120	; 0x78
  41ae7c:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
  41ae7e:	6820      	ldr	r0, [r4, #0]
  41ae80:	307c      	adds	r0, #124	; 0x7c
  41ae82:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41ae84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ae86:	22ff      	movs	r2, #255	; 0xff
  41ae88:	212c      	movs	r1, #44	; 0x2c
  41ae8a:	307c      	adds	r0, #124	; 0x7c
  41ae8c:	4bac      	ldr	r3, [pc, #688]	; (41b140 <list_init+0x30c>)
  41ae8e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
  41ae90:	6820      	ldr	r0, [r4, #0]
  41ae92:	307c      	adds	r0, #124	; 0x7c
  41ae94:	4bab      	ldr	r3, [pc, #684]	; (41b144 <list_init+0x310>)
  41ae96:	6a1b      	ldr	r3, [r3, #32]
  41ae98:	f013 0f02 	tst.w	r3, #2
  41ae9c:	f000 8223 	beq.w	41b2e6 <list_init+0x4b2>
  41aea0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41aea4:	2129      	movs	r1, #41	; 0x29
  41aea6:	4ba8      	ldr	r3, [pc, #672]	; (41b148 <list_init+0x314>)
  41aea8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
  41aeaa:	4ba2      	ldr	r3, [pc, #648]	; (41b134 <list_init+0x300>)
  41aeac:	6818      	ldr	r0, [r3, #0]
  41aeae:	307c      	adds	r0, #124	; 0x7c
  41aeb0:	4ba4      	ldr	r3, [pc, #656]	; (41b144 <list_init+0x310>)
  41aeb2:	6a1b      	ldr	r3, [r3, #32]
  41aeb4:	f013 0f02 	tst.w	r3, #2
  41aeb8:	f000 8223 	beq.w	41b302 <list_init+0x4ce>
  41aebc:	f04f 0207 	mov.w	r2, #7
  41aec0:	231d      	movs	r3, #29
  41aec2:	f363 02c7 	bfi	r2, r3, #3, #5
  41aec6:	f363 220c 	bfi	r2, r3, #8, #5
  41aeca:	2303      	movs	r3, #3
  41aecc:	f363 324f 	bfi	r2, r3, #13, #3
  41aed0:	f241 0129 	movw	r1, #4137	; 0x1029
  41aed4:	4b9c      	ldr	r3, [pc, #624]	; (41b148 <list_init+0x314>)
  41aed6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
  41aed8:	4b96      	ldr	r3, [pc, #600]	; (41b134 <list_init+0x300>)
  41aeda:	6818      	ldr	r0, [r3, #0]
  41aedc:	307c      	adds	r0, #124	; 0x7c
  41aede:	4b99      	ldr	r3, [pc, #612]	; (41b144 <list_init+0x310>)
  41aee0:	6a1b      	ldr	r3, [r3, #32]
  41aee2:	f013 0f02 	tst.w	r3, #2
  41aee6:	f000 821b 	beq.w	41b320 <list_init+0x4ec>
  41aeea:	f04f 32ff 	mov.w	r2, #4294967295
  41aeee:	f242 0129 	movw	r1, #8233	; 0x2029
  41aef2:	4d95      	ldr	r5, [pc, #596]	; (41b148 <list_init+0x314>)
  41aef4:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
  41aef6:	4c8f      	ldr	r4, [pc, #572]	; (41b134 <list_init+0x300>)
  41aef8:	6820      	ldr	r0, [r4, #0]
  41aefa:	4f92      	ldr	r7, [pc, #584]	; (41b144 <list_init+0x310>)
  41aefc:	89ba      	ldrh	r2, [r7, #12]
  41aefe:	f240 1129 	movw	r1, #297	; 0x129
  41af02:	307c      	adds	r0, #124	; 0x7c
  41af04:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
  41af06:	6826      	ldr	r6, [r4, #0]
  41af08:	367c      	adds	r6, #124	; 0x7c
  41af0a:	2133      	movs	r1, #51	; 0x33
  41af0c:	89b8      	ldrh	r0, [r7, #12]
  41af0e:	4b8f      	ldr	r3, [pc, #572]	; (41b14c <list_init+0x318>)
  41af10:	4798      	blx	r3
  41af12:	4602      	mov	r2, r0
  41af14:	f241 1129 	movw	r1, #4393	; 0x1129
  41af18:	4630      	mov	r0, r6
  41af1a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41af1c:	6820      	ldr	r0, [r4, #0]
  41af1e:	307c      	adds	r0, #124	; 0x7c
  41af20:	6a3b      	ldr	r3, [r7, #32]
  41af22:	f013 0f02 	tst.w	r3, #2
  41af26:	f000 8209 	beq.w	41b33c <list_init+0x508>
  41af2a:	f04f 0200 	mov.w	r2, #0
  41af2e:	2301      	movs	r3, #1
  41af30:	f363 0202 	bfi	r2, r3, #0, #3
  41af34:	2307      	movs	r3, #7
  41af36:	f363 02c7 	bfi	r2, r3, #3, #5
  41af3a:	2308      	movs	r3, #8
  41af3c:	f363 220c 	bfi	r2, r3, #8, #5
  41af40:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41af44:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41af48:	f248 0189 	movw	r1, #32905	; 0x8089
  41af4c:	4b7e      	ldr	r3, [pc, #504]	; (41b148 <list_init+0x314>)
  41af4e:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41af50:	4b78      	ldr	r3, [pc, #480]	; (41b134 <list_init+0x300>)
  41af52:	6818      	ldr	r0, [r3, #0]
  41af54:	307c      	adds	r0, #124	; 0x7c
  41af56:	4b7b      	ldr	r3, [pc, #492]	; (41b144 <list_init+0x310>)
  41af58:	6a1b      	ldr	r3, [r3, #32]
  41af5a:	f013 0f02 	tst.w	r3, #2
  41af5e:	f000 81f0 	beq.w	41b342 <list_init+0x50e>
  41af62:	f04f 32ff 	mov.w	r2, #4294967295
  41af66:	f248 1189 	movw	r1, #33161	; 0x8189
  41af6a:	4b77      	ldr	r3, [pc, #476]	; (41b148 <list_init+0x314>)
  41af6c:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41af6e:	4b71      	ldr	r3, [pc, #452]	; (41b134 <list_init+0x300>)
  41af70:	6818      	ldr	r0, [r3, #0]
  41af72:	307c      	adds	r0, #124	; 0x7c
  41af74:	4b73      	ldr	r3, [pc, #460]	; (41b144 <list_init+0x310>)
  41af76:	6a1b      	ldr	r3, [r3, #32]
  41af78:	f013 0f02 	tst.w	r3, #2
  41af7c:	f000 81e4 	beq.w	41b348 <list_init+0x514>
  41af80:	f04f 0200 	mov.w	r2, #0
  41af84:	2305      	movs	r3, #5
  41af86:	f363 0202 	bfi	r2, r3, #0, #3
  41af8a:	2315      	movs	r3, #21
  41af8c:	f363 02c7 	bfi	r2, r3, #3, #5
  41af90:	f363 220c 	bfi	r2, r3, #8, #5
  41af94:	2302      	movs	r3, #2
  41af96:	f363 324f 	bfi	r2, r3, #13, #3
  41af9a:	f24a 0189 	movw	r1, #41097	; 0xa089
  41af9e:	4b6a      	ldr	r3, [pc, #424]	; (41b148 <list_init+0x314>)
  41afa0:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41afa2:	4b64      	ldr	r3, [pc, #400]	; (41b134 <list_init+0x300>)
  41afa4:	6818      	ldr	r0, [r3, #0]
  41afa6:	307c      	adds	r0, #124	; 0x7c
  41afa8:	4b66      	ldr	r3, [pc, #408]	; (41b144 <list_init+0x310>)
  41afaa:	6a1b      	ldr	r3, [r3, #32]
  41afac:	f013 0f02 	tst.w	r3, #2
  41afb0:	f000 81d8 	beq.w	41b364 <list_init+0x530>
  41afb4:	f04f 0200 	mov.w	r2, #0
  41afb8:	2301      	movs	r3, #1
  41afba:	f363 0202 	bfi	r2, r3, #0, #3
  41afbe:	2307      	movs	r3, #7
  41afc0:	f363 02c7 	bfi	r2, r3, #3, #5
  41afc4:	2308      	movs	r3, #8
  41afc6:	f363 220c 	bfi	r2, r3, #8, #5
  41afca:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41afce:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41afd2:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41afd6:	4b5c      	ldr	r3, [pc, #368]	; (41b148 <list_init+0x314>)
  41afd8:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41afda:	4b56      	ldr	r3, [pc, #344]	; (41b134 <list_init+0x300>)
  41afdc:	6818      	ldr	r0, [r3, #0]
  41afde:	307c      	adds	r0, #124	; 0x7c
  41afe0:	4b58      	ldr	r3, [pc, #352]	; (41b144 <list_init+0x310>)
  41afe2:	6a1b      	ldr	r3, [r3, #32]
  41afe4:	f013 0f02 	tst.w	r3, #2
  41afe8:	f000 81bf 	beq.w	41b36a <list_init+0x536>
  41afec:	f04f 32ff 	mov.w	r2, #4294967295
  41aff0:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41aff4:	4b54      	ldr	r3, [pc, #336]	; (41b148 <list_init+0x314>)
  41aff6:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41aff8:	4b4e      	ldr	r3, [pc, #312]	; (41b134 <list_init+0x300>)
  41affa:	6818      	ldr	r0, [r3, #0]
  41affc:	307c      	adds	r0, #124	; 0x7c
  41affe:	4b51      	ldr	r3, [pc, #324]	; (41b144 <list_init+0x310>)
  41b000:	6a1b      	ldr	r3, [r3, #32]
  41b002:	f013 0f02 	tst.w	r3, #2
  41b006:	f000 81b3 	beq.w	41b370 <list_init+0x53c>
  41b00a:	f04f 0200 	mov.w	r2, #0
  41b00e:	2305      	movs	r3, #5
  41b010:	f363 0202 	bfi	r2, r3, #0, #3
  41b014:	2315      	movs	r3, #21
  41b016:	f363 02c7 	bfi	r2, r3, #3, #5
  41b01a:	f363 220c 	bfi	r2, r3, #8, #5
  41b01e:	2302      	movs	r3, #2
  41b020:	f363 324f 	bfi	r2, r3, #13, #3
  41b024:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41b028:	4b47      	ldr	r3, [pc, #284]	; (41b148 <list_init+0x314>)
  41b02a:	4798      	blx	r3
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
  41b02c:	4c41      	ldr	r4, [pc, #260]	; (41b134 <list_init+0x300>)
  41b02e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41b030:	2201      	movs	r2, #1
  41b032:	2131      	movs	r1, #49	; 0x31
  41b034:	307c      	adds	r0, #124	; 0x7c
  41b036:	4b41      	ldr	r3, [pc, #260]	; (41b13c <list_init+0x308>)
  41b038:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41b03a:	6820      	ldr	r0, [r4, #0]
  41b03c:	307c      	adds	r0, #124	; 0x7c
  41b03e:	4b41      	ldr	r3, [pc, #260]	; (41b144 <list_init+0x310>)
  41b040:	6a1b      	ldr	r3, [r3, #32]
  41b042:	f013 0f02 	tst.w	r3, #2
  41b046:	f000 81a1 	beq.w	41b38c <list_init+0x558>
  41b04a:	f04f 0200 	mov.w	r2, #0
  41b04e:	2306      	movs	r3, #6
  41b050:	f363 0202 	bfi	r2, r3, #0, #3
  41b054:	231a      	movs	r3, #26
  41b056:	f363 02c7 	bfi	r2, r3, #3, #5
  41b05a:	231c      	movs	r3, #28
  41b05c:	f363 220c 	bfi	r2, r3, #8, #5
  41b060:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b064:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b068:	2139      	movs	r1, #57	; 0x39
  41b06a:	4d37      	ldr	r5, [pc, #220]	; (41b148 <list_init+0x314>)
  41b06c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
  41b06e:	4c31      	ldr	r4, [pc, #196]	; (41b134 <list_init+0x300>)
  41b070:	6820      	ldr	r0, [r4, #0]
  41b072:	4e34      	ldr	r6, [pc, #208]	; (41b144 <list_init+0x310>)
  41b074:	89b2      	ldrh	r2, [r6, #12]
  41b076:	f240 2139 	movw	r1, #569	; 0x239
  41b07a:	307c      	adds	r0, #124	; 0x7c
  41b07c:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
  41b07e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b080:	2201      	movs	r2, #1
  41b082:	2130      	movs	r1, #48	; 0x30
  41b084:	307c      	adds	r0, #124	; 0x7c
  41b086:	4b2d      	ldr	r3, [pc, #180]	; (41b13c <list_init+0x308>)
  41b088:	4798      	blx	r3
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
  41b08a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41b08c:	89f2      	ldrh	r2, [r6, #14]
  41b08e:	f240 2149 	movw	r1, #585	; 0x249
  41b092:	307c      	adds	r0, #124	; 0x7c
  41b094:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41b096:	6824      	ldr	r4, [r4, #0]
  41b098:	347c      	adds	r4, #124	; 0x7c
  41b09a:	6a33      	ldr	r3, [r6, #32]
  41b09c:	f013 0f20 	tst.w	r3, #32
  41b0a0:	f000 8183 	beq.w	41b3aa <list_init+0x576>
  41b0a4:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41b0a6:	f44f 7110 	mov.w	r1, #576	; 0x240
  41b0aa:	4620      	mov	r0, r4
  41b0ac:	4b23      	ldr	r3, [pc, #140]	; (41b13c <list_init+0x308>)
  41b0ae:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41b0b0:	4b20      	ldr	r3, [pc, #128]	; (41b134 <list_init+0x300>)
  41b0b2:	681c      	ldr	r4, [r3, #0]
  41b0b4:	347c      	adds	r4, #124	; 0x7c
  41b0b6:	2000      	movs	r0, #0
  41b0b8:	4b25      	ldr	r3, [pc, #148]	; (41b150 <list_init+0x31c>)
  41b0ba:	4798      	blx	r3
  41b0bc:	3028      	adds	r0, #40	; 0x28
  41b0be:	0040      	lsls	r0, r0, #1
  41b0c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b0c4:	f280 8188 	bge.w	41b3d8 <list_init+0x5a4>
  41b0c8:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41b0cc:	f240 2141 	movw	r1, #577	; 0x241
  41b0d0:	4620      	mov	r0, r4
  41b0d2:	4b1a      	ldr	r3, [pc, #104]	; (41b13c <list_init+0x308>)
  41b0d4:	4798      	blx	r3
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b0d6:	4b17      	ldr	r3, [pc, #92]	; (41b134 <list_init+0x300>)
  41b0d8:	681c      	ldr	r4, [r3, #0]
  41b0da:	347c      	adds	r4, #124	; 0x7c
  41b0dc:	2000      	movs	r0, #0
  41b0de:	4b1d      	ldr	r3, [pc, #116]	; (41b154 <list_init+0x320>)
  41b0e0:	4798      	blx	r3
  41b0e2:	2801      	cmp	r0, #1
  41b0e4:	f240 8185 	bls.w	41b3f2 <list_init+0x5be>
  41b0e8:	2000      	movs	r0, #0
  41b0ea:	4b19      	ldr	r3, [pc, #100]	; (41b150 <list_init+0x31c>)
  41b0ec:	4798      	blx	r3
  41b0ee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b0f2:	0040      	lsls	r0, r0, #1
  41b0f4:	3050      	adds	r0, #80	; 0x50
  41b0f6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b0fa:	f280 8193 	bge.w	41b424 <list_init+0x5f0>
  41b0fe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b100:	2112      	movs	r1, #18
  41b102:	4620      	mov	r0, r4
  41b104:	4b0d      	ldr	r3, [pc, #52]	; (41b13c <list_init+0x308>)
  41b106:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b108:	4b0a      	ldr	r3, [pc, #40]	; (41b134 <list_init+0x300>)
  41b10a:	681c      	ldr	r4, [r3, #0]
  41b10c:	347c      	adds	r4, #124	; 0x7c
  41b10e:	2000      	movs	r0, #0
  41b110:	4b10      	ldr	r3, [pc, #64]	; (41b154 <list_init+0x320>)
  41b112:	4798      	blx	r3
  41b114:	2801      	cmp	r0, #1
  41b116:	f240 8194 	bls.w	41b442 <list_init+0x60e>
  41b11a:	2000      	movs	r0, #0
  41b11c:	4b0c      	ldr	r3, [pc, #48]	; (41b150 <list_init+0x31c>)
  41b11e:	4798      	blx	r3
  41b120:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b124:	0040      	lsls	r0, r0, #1
  41b126:	3050      	adds	r0, #80	; 0x50
  41b128:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b12c:	f280 81ac 	bge.w	41b488 <list_init+0x654>
  41b130:	e012      	b.n	41b158 <list_init+0x324>
  41b132:	bf00      	nop
  41b134:	20414824 	.word	0x20414824
  41b138:	00418951 	.word	0x00418951
  41b13c:	0040a1b9 	.word	0x0040a1b9
  41b140:	0040a4d9 	.word	0x0040a4d9
  41b144:	20414828 	.word	0x20414828
  41b148:	0040a349 	.word	0x0040a349
  41b14c:	00415e09 	.word	0x00415e09
  41b150:	00414d4d 	.word	0x00414d4d
  41b154:	00414d6d 	.word	0x00414d6d
  41b158:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b15a:	2113      	movs	r1, #19
  41b15c:	4620      	mov	r0, r4
  41b15e:	4bc5      	ldr	r3, [pc, #788]	; (41b474 <list_init+0x640>)
  41b160:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b162:	4bc5      	ldr	r3, [pc, #788]	; (41b478 <list_init+0x644>)
  41b164:	681c      	ldr	r4, [r3, #0]
  41b166:	347c      	adds	r4, #124	; 0x7c
  41b168:	2000      	movs	r0, #0
  41b16a:	4bc4      	ldr	r3, [pc, #784]	; (41b47c <list_init+0x648>)
  41b16c:	4798      	blx	r3
  41b16e:	2801      	cmp	r0, #1
  41b170:	f240 8199 	bls.w	41b4a6 <list_init+0x672>
  41b174:	2000      	movs	r0, #0
  41b176:	4bc2      	ldr	r3, [pc, #776]	; (41b480 <list_init+0x64c>)
  41b178:	4798      	blx	r3
  41b17a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b17e:	0040      	lsls	r0, r0, #1
  41b180:	3050      	adds	r0, #80	; 0x50
  41b182:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b186:	f280 81a7 	bge.w	41b4d8 <list_init+0x6a4>
  41b18a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b18c:	2110      	movs	r1, #16
  41b18e:	4620      	mov	r0, r4
  41b190:	4bb8      	ldr	r3, [pc, #736]	; (41b474 <list_init+0x640>)
  41b192:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b194:	4bb8      	ldr	r3, [pc, #736]	; (41b478 <list_init+0x644>)
  41b196:	681c      	ldr	r4, [r3, #0]
  41b198:	347c      	adds	r4, #124	; 0x7c
  41b19a:	2000      	movs	r0, #0
  41b19c:	4bb7      	ldr	r3, [pc, #732]	; (41b47c <list_init+0x648>)
  41b19e:	4798      	blx	r3
  41b1a0:	2801      	cmp	r0, #1
  41b1a2:	f240 81a8 	bls.w	41b4f6 <list_init+0x6c2>
  41b1a6:	2000      	movs	r0, #0
  41b1a8:	4bb5      	ldr	r3, [pc, #724]	; (41b480 <list_init+0x64c>)
  41b1aa:	4798      	blx	r3
  41b1ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b1b0:	0040      	lsls	r0, r0, #1
  41b1b2:	3050      	adds	r0, #80	; 0x50
  41b1b4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b1b8:	f280 81b6 	bge.w	41b528 <list_init+0x6f4>
  41b1bc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b1be:	2111      	movs	r1, #17
  41b1c0:	4620      	mov	r0, r4
  41b1c2:	4bac      	ldr	r3, [pc, #688]	; (41b474 <list_init+0x640>)
  41b1c4:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b1c6:	4bac      	ldr	r3, [pc, #688]	; (41b478 <list_init+0x644>)
  41b1c8:	681c      	ldr	r4, [r3, #0]
  41b1ca:	347c      	adds	r4, #124	; 0x7c
  41b1cc:	2000      	movs	r0, #0
  41b1ce:	4bab      	ldr	r3, [pc, #684]	; (41b47c <list_init+0x648>)
  41b1d0:	4798      	blx	r3
  41b1d2:	2801      	cmp	r0, #1
  41b1d4:	f240 81b7 	bls.w	41b546 <list_init+0x712>
  41b1d8:	2000      	movs	r0, #0
  41b1da:	4ba9      	ldr	r3, [pc, #676]	; (41b480 <list_init+0x64c>)
  41b1dc:	4798      	blx	r3
  41b1de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b1e2:	0040      	lsls	r0, r0, #1
  41b1e4:	3050      	adds	r0, #80	; 0x50
  41b1e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b1ea:	f280 81c5 	bge.w	41b578 <list_init+0x744>
  41b1ee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b1f0:	2114      	movs	r1, #20
  41b1f2:	4620      	mov	r0, r4
  41b1f4:	4b9f      	ldr	r3, [pc, #636]	; (41b474 <list_init+0x640>)
  41b1f6:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41b1f8:	4b9f      	ldr	r3, [pc, #636]	; (41b478 <list_init+0x644>)
  41b1fa:	681c      	ldr	r4, [r3, #0]
  41b1fc:	347c      	adds	r4, #124	; 0x7c
  41b1fe:	2000      	movs	r0, #0
  41b200:	4b9e      	ldr	r3, [pc, #632]	; (41b47c <list_init+0x648>)
  41b202:	4798      	blx	r3
  41b204:	2801      	cmp	r0, #1
  41b206:	f240 81c6 	bls.w	41b596 <list_init+0x762>
  41b20a:	2000      	movs	r0, #0
  41b20c:	4b9c      	ldr	r3, [pc, #624]	; (41b480 <list_init+0x64c>)
  41b20e:	4798      	blx	r3
  41b210:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b214:	0040      	lsls	r0, r0, #1
  41b216:	3050      	adds	r0, #80	; 0x50
  41b218:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b21c:	f280 81d5 	bge.w	41b5ca <list_init+0x796>
  41b220:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  41b224:	2104      	movs	r1, #4
  41b226:	4620      	mov	r0, r4
  41b228:	4b92      	ldr	r3, [pc, #584]	; (41b474 <list_init+0x640>)
  41b22a:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41b22c:	4b92      	ldr	r3, [pc, #584]	; (41b478 <list_init+0x644>)
  41b22e:	681c      	ldr	r4, [r3, #0]
  41b230:	347c      	adds	r4, #124	; 0x7c
  41b232:	2000      	movs	r0, #0
  41b234:	4b92      	ldr	r3, [pc, #584]	; (41b480 <list_init+0x64c>)
  41b236:	4798      	blx	r3
  41b238:	3028      	adds	r0, #40	; 0x28
  41b23a:	0040      	lsls	r0, r0, #1
  41b23c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b240:	f280 81d2 	bge.w	41b5e8 <list_init+0x7b4>
  41b244:	f04f 32ff 	mov.w	r2, #4294967295
  41b248:	f241 0104 	movw	r1, #4100	; 0x1004
  41b24c:	4620      	mov	r0, r4
  41b24e:	4b89      	ldr	r3, [pc, #548]	; (41b474 <list_init+0x640>)
  41b250:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41b252:	4b89      	ldr	r3, [pc, #548]	; (41b478 <list_init+0x644>)
  41b254:	681c      	ldr	r4, [r3, #0]
  41b256:	347c      	adds	r4, #124	; 0x7c
  41b258:	2000      	movs	r0, #0
  41b25a:	4b89      	ldr	r3, [pc, #548]	; (41b480 <list_init+0x64c>)
  41b25c:	4798      	blx	r3
  41b25e:	3028      	adds	r0, #40	; 0x28
  41b260:	0040      	lsls	r0, r0, #1
  41b262:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b266:	f280 81cc 	bge.w	41b602 <list_init+0x7ce>
  41b26a:	f04f 32ff 	mov.w	r2, #4294967295
  41b26e:	f44f 7182 	mov.w	r1, #260	; 0x104
  41b272:	4620      	mov	r0, r4
  41b274:	4b7f      	ldr	r3, [pc, #508]	; (41b474 <list_init+0x640>)
  41b276:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41b278:	4b7f      	ldr	r3, [pc, #508]	; (41b478 <list_init+0x644>)
  41b27a:	681c      	ldr	r4, [r3, #0]
  41b27c:	347c      	adds	r4, #124	; 0x7c
  41b27e:	2000      	movs	r0, #0
  41b280:	4b7f      	ldr	r3, [pc, #508]	; (41b480 <list_init+0x64c>)
  41b282:	4798      	blx	r3
  41b284:	3028      	adds	r0, #40	; 0x28
  41b286:	0040      	lsls	r0, r0, #1
  41b288:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b28c:	f280 81c6 	bge.w	41b61c <list_init+0x7e8>
  41b290:	f04f 32ff 	mov.w	r2, #4294967295
  41b294:	f242 0104 	movw	r1, #8196	; 0x2004
  41b298:	4620      	mov	r0, r4
  41b29a:	4b76      	ldr	r3, [pc, #472]	; (41b474 <list_init+0x640>)
  41b29c:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41b29e:	4b76      	ldr	r3, [pc, #472]	; (41b478 <list_init+0x644>)
  41b2a0:	681c      	ldr	r4, [r3, #0]
  41b2a2:	347c      	adds	r4, #124	; 0x7c
  41b2a4:	2000      	movs	r0, #0
  41b2a6:	4b76      	ldr	r3, [pc, #472]	; (41b480 <list_init+0x64c>)
  41b2a8:	4798      	blx	r3
  41b2aa:	3028      	adds	r0, #40	; 0x28
  41b2ac:	0040      	lsls	r0, r0, #1
  41b2ae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b2b2:	f280 81c0 	bge.w	41b636 <list_init+0x802>
  41b2b6:	f04f 32ff 	mov.w	r2, #4294967295
  41b2ba:	f44f 7101 	mov.w	r1, #516	; 0x204
  41b2be:	4620      	mov	r0, r4
  41b2c0:	4c6c      	ldr	r4, [pc, #432]	; (41b474 <list_init+0x640>)
  41b2c2:	47a0      	blx	r4
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41b2c4:	4d6c      	ldr	r5, [pc, #432]	; (41b478 <list_init+0x644>)
  41b2c6:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41b2c8:	2200      	movs	r2, #0
  41b2ca:	21b0      	movs	r1, #176	; 0xb0
  41b2cc:	307c      	adds	r0, #124	; 0x7c
  41b2ce:	47a0      	blx	r4
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41b2d0:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41b2d2:	2229      	movs	r2, #41	; 0x29
  41b2d4:	21b7      	movs	r1, #183	; 0xb7
  41b2d6:	307c      	adds	r0, #124	; 0x7c
  41b2d8:	47a0      	blx	r4
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
  41b2da:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41b2dc:	2204      	movs	r2, #4
  41b2de:	21b6      	movs	r1, #182	; 0xb6
  41b2e0:	307c      	adds	r0, #124	; 0x7c
  41b2e2:	47a0      	blx	r4
  41b2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41b2e6:	f04f 0200 	mov.w	r2, #0
  41b2ea:	2303      	movs	r3, #3
  41b2ec:	f363 0202 	bfi	r2, r3, #0, #3
  41b2f0:	230b      	movs	r3, #11
  41b2f2:	f363 02c7 	bfi	r2, r3, #3, #5
  41b2f6:	230e      	movs	r3, #14
  41b2f8:	f363 220c 	bfi	r2, r3, #8, #5
  41b2fc:	f36f 324f 	bfc	r2, #13, #3
  41b300:	e5d0      	b.n	41aea4 <list_init+0x70>
  41b302:	f04f 0200 	mov.w	r2, #0
  41b306:	2302      	movs	r3, #2
  41b308:	f363 0202 	bfi	r2, r3, #0, #3
  41b30c:	2309      	movs	r3, #9
  41b30e:	f363 02c7 	bfi	r2, r3, #3, #5
  41b312:	230a      	movs	r3, #10
  41b314:	f363 220c 	bfi	r2, r3, #8, #5
  41b318:	2303      	movs	r3, #3
  41b31a:	f363 324f 	bfi	r2, r3, #13, #3
  41b31e:	e5d7      	b.n	41aed0 <list_init+0x9c>
  41b320:	f04f 0200 	mov.w	r2, #0
  41b324:	2303      	movs	r3, #3
  41b326:	f363 0202 	bfi	r2, r3, #0, #3
  41b32a:	230b      	movs	r3, #11
  41b32c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b330:	230e      	movs	r3, #14
  41b332:	f363 220c 	bfi	r2, r3, #8, #5
  41b336:	f36f 324f 	bfc	r2, #13, #3
  41b33a:	e5d8      	b.n	41aeee <list_init+0xba>
  41b33c:	f04f 32ff 	mov.w	r2, #4294967295
  41b340:	e602      	b.n	41af48 <list_init+0x114>
  41b342:	f04f 32ff 	mov.w	r2, #4294967295
  41b346:	e60e      	b.n	41af66 <list_init+0x132>
  41b348:	f04f 0200 	mov.w	r2, #0
  41b34c:	2304      	movs	r3, #4
  41b34e:	f363 0202 	bfi	r2, r3, #0, #3
  41b352:	2313      	movs	r3, #19
  41b354:	f363 02c7 	bfi	r2, r3, #3, #5
  41b358:	f363 220c 	bfi	r2, r3, #8, #5
  41b35c:	2306      	movs	r3, #6
  41b35e:	f363 324f 	bfi	r2, r3, #13, #3
  41b362:	e61a      	b.n	41af9a <list_init+0x166>
  41b364:	f04f 32ff 	mov.w	r2, #4294967295
  41b368:	e633      	b.n	41afd2 <list_init+0x19e>
  41b36a:	f04f 32ff 	mov.w	r2, #4294967295
  41b36e:	e63f      	b.n	41aff0 <list_init+0x1bc>
  41b370:	f04f 0200 	mov.w	r2, #0
  41b374:	2304      	movs	r3, #4
  41b376:	f363 0202 	bfi	r2, r3, #0, #3
  41b37a:	2313      	movs	r3, #19
  41b37c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b380:	f363 220c 	bfi	r2, r3, #8, #5
  41b384:	2306      	movs	r3, #6
  41b386:	f363 324f 	bfi	r2, r3, #13, #3
  41b38a:	e64b      	b.n	41b024 <list_init+0x1f0>
  41b38c:	f04f 0200 	mov.w	r2, #0
  41b390:	2304      	movs	r3, #4
  41b392:	f363 0202 	bfi	r2, r3, #0, #3
  41b396:	2310      	movs	r3, #16
  41b398:	f363 02c7 	bfi	r2, r3, #3, #5
  41b39c:	2312      	movs	r3, #18
  41b39e:	f363 220c 	bfi	r2, r3, #8, #5
  41b3a2:	2302      	movs	r3, #2
  41b3a4:	f363 324f 	bfi	r2, r3, #13, #3
  41b3a8:	e65e      	b.n	41b068 <list_init+0x234>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41b3aa:	2000      	movs	r0, #0
  41b3ac:	4b34      	ldr	r3, [pc, #208]	; (41b480 <list_init+0x64c>)
  41b3ae:	4798      	blx	r3
  41b3b0:	3028      	adds	r0, #40	; 0x28
  41b3b2:	0040      	lsls	r0, r0, #1
  41b3b4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b3b8:	da01      	bge.n	41b3be <list_init+0x58a>
  41b3ba:	2201      	movs	r2, #1
  41b3bc:	e673      	b.n	41b0a6 <list_init+0x272>
  41b3be:	2000      	movs	r0, #0
  41b3c0:	4b2f      	ldr	r3, [pc, #188]	; (41b480 <list_init+0x64c>)
  41b3c2:	4798      	blx	r3
  41b3c4:	3028      	adds	r0, #40	; 0x28
  41b3c6:	0040      	lsls	r0, r0, #1
  41b3c8:	4b2e      	ldr	r3, [pc, #184]	; (41b484 <list_init+0x650>)
  41b3ca:	fb83 2300 	smull	r2, r3, r3, r0
  41b3ce:	17c2      	asrs	r2, r0, #31
  41b3d0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b3d4:	b212      	sxth	r2, r2
  41b3d6:	e666      	b.n	41b0a6 <list_init+0x272>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41b3d8:	2000      	movs	r0, #0
  41b3da:	4b29      	ldr	r3, [pc, #164]	; (41b480 <list_init+0x64c>)
  41b3dc:	4798      	blx	r3
  41b3de:	3028      	adds	r0, #40	; 0x28
  41b3e0:	0040      	lsls	r0, r0, #1
  41b3e2:	4b28      	ldr	r3, [pc, #160]	; (41b484 <list_init+0x650>)
  41b3e4:	fb83 2300 	smull	r2, r3, r3, r0
  41b3e8:	17c2      	asrs	r2, r0, #31
  41b3ea:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b3ee:	b212      	sxth	r2, r2
  41b3f0:	e66c      	b.n	41b0cc <list_init+0x298>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b3f2:	2000      	movs	r0, #0
  41b3f4:	4b22      	ldr	r3, [pc, #136]	; (41b480 <list_init+0x64c>)
  41b3f6:	4798      	blx	r3
  41b3f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b3fc:	3050      	adds	r0, #80	; 0x50
  41b3fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b402:	da01      	bge.n	41b408 <list_init+0x5d4>
  41b404:	2201      	movs	r2, #1
  41b406:	e67b      	b.n	41b100 <list_init+0x2cc>
  41b408:	2000      	movs	r0, #0
  41b40a:	4b1d      	ldr	r3, [pc, #116]	; (41b480 <list_init+0x64c>)
  41b40c:	4798      	blx	r3
  41b40e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b412:	3050      	adds	r0, #80	; 0x50
  41b414:	4b1b      	ldr	r3, [pc, #108]	; (41b484 <list_init+0x650>)
  41b416:	fb83 2300 	smull	r2, r3, r3, r0
  41b41a:	17c2      	asrs	r2, r0, #31
  41b41c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b420:	b212      	sxth	r2, r2
  41b422:	e66d      	b.n	41b100 <list_init+0x2cc>
  41b424:	2000      	movs	r0, #0
  41b426:	4b16      	ldr	r3, [pc, #88]	; (41b480 <list_init+0x64c>)
  41b428:	4798      	blx	r3
  41b42a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b42e:	0040      	lsls	r0, r0, #1
  41b430:	3050      	adds	r0, #80	; 0x50
  41b432:	4b14      	ldr	r3, [pc, #80]	; (41b484 <list_init+0x650>)
  41b434:	fb83 2300 	smull	r2, r3, r3, r0
  41b438:	17c2      	asrs	r2, r0, #31
  41b43a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b43e:	b212      	sxth	r2, r2
  41b440:	e65e      	b.n	41b100 <list_init+0x2cc>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b442:	2000      	movs	r0, #0
  41b444:	4b0e      	ldr	r3, [pc, #56]	; (41b480 <list_init+0x64c>)
  41b446:	4798      	blx	r3
  41b448:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b44c:	3050      	adds	r0, #80	; 0x50
  41b44e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b452:	da01      	bge.n	41b458 <list_init+0x624>
  41b454:	2201      	movs	r2, #1
  41b456:	e680      	b.n	41b15a <list_init+0x326>
  41b458:	2000      	movs	r0, #0
  41b45a:	4b09      	ldr	r3, [pc, #36]	; (41b480 <list_init+0x64c>)
  41b45c:	4798      	blx	r3
  41b45e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b462:	3050      	adds	r0, #80	; 0x50
  41b464:	4b07      	ldr	r3, [pc, #28]	; (41b484 <list_init+0x650>)
  41b466:	fb83 2300 	smull	r2, r3, r3, r0
  41b46a:	17c2      	asrs	r2, r0, #31
  41b46c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b470:	b212      	sxth	r2, r2
  41b472:	e672      	b.n	41b15a <list_init+0x326>
  41b474:	0040a1b9 	.word	0x0040a1b9
  41b478:	20414824 	.word	0x20414824
  41b47c:	00414d6d 	.word	0x00414d6d
  41b480:	00414d4d 	.word	0x00414d4d
  41b484:	66666667 	.word	0x66666667
  41b488:	2000      	movs	r0, #0
  41b48a:	4b71      	ldr	r3, [pc, #452]	; (41b650 <list_init+0x81c>)
  41b48c:	4798      	blx	r3
  41b48e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b492:	0040      	lsls	r0, r0, #1
  41b494:	3050      	adds	r0, #80	; 0x50
  41b496:	4b6f      	ldr	r3, [pc, #444]	; (41b654 <list_init+0x820>)
  41b498:	fb83 2300 	smull	r2, r3, r3, r0
  41b49c:	17c2      	asrs	r2, r0, #31
  41b49e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b4a2:	b212      	sxth	r2, r2
  41b4a4:	e659      	b.n	41b15a <list_init+0x326>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b4a6:	2000      	movs	r0, #0
  41b4a8:	4b69      	ldr	r3, [pc, #420]	; (41b650 <list_init+0x81c>)
  41b4aa:	4798      	blx	r3
  41b4ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b4b0:	3050      	adds	r0, #80	; 0x50
  41b4b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b4b6:	da01      	bge.n	41b4bc <list_init+0x688>
  41b4b8:	2201      	movs	r2, #1
  41b4ba:	e667      	b.n	41b18c <list_init+0x358>
  41b4bc:	2000      	movs	r0, #0
  41b4be:	4b64      	ldr	r3, [pc, #400]	; (41b650 <list_init+0x81c>)
  41b4c0:	4798      	blx	r3
  41b4c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b4c6:	3050      	adds	r0, #80	; 0x50
  41b4c8:	4b62      	ldr	r3, [pc, #392]	; (41b654 <list_init+0x820>)
  41b4ca:	fb83 2300 	smull	r2, r3, r3, r0
  41b4ce:	17c2      	asrs	r2, r0, #31
  41b4d0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b4d4:	b212      	sxth	r2, r2
  41b4d6:	e659      	b.n	41b18c <list_init+0x358>
  41b4d8:	2000      	movs	r0, #0
  41b4da:	4b5d      	ldr	r3, [pc, #372]	; (41b650 <list_init+0x81c>)
  41b4dc:	4798      	blx	r3
  41b4de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b4e2:	0040      	lsls	r0, r0, #1
  41b4e4:	3050      	adds	r0, #80	; 0x50
  41b4e6:	4b5b      	ldr	r3, [pc, #364]	; (41b654 <list_init+0x820>)
  41b4e8:	fb83 2300 	smull	r2, r3, r3, r0
  41b4ec:	17c2      	asrs	r2, r0, #31
  41b4ee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b4f2:	b212      	sxth	r2, r2
  41b4f4:	e64a      	b.n	41b18c <list_init+0x358>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b4f6:	2000      	movs	r0, #0
  41b4f8:	4b55      	ldr	r3, [pc, #340]	; (41b650 <list_init+0x81c>)
  41b4fa:	4798      	blx	r3
  41b4fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b500:	3050      	adds	r0, #80	; 0x50
  41b502:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b506:	da01      	bge.n	41b50c <list_init+0x6d8>
  41b508:	2201      	movs	r2, #1
  41b50a:	e658      	b.n	41b1be <list_init+0x38a>
  41b50c:	2000      	movs	r0, #0
  41b50e:	4b50      	ldr	r3, [pc, #320]	; (41b650 <list_init+0x81c>)
  41b510:	4798      	blx	r3
  41b512:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b516:	3050      	adds	r0, #80	; 0x50
  41b518:	4b4e      	ldr	r3, [pc, #312]	; (41b654 <list_init+0x820>)
  41b51a:	fb83 2300 	smull	r2, r3, r3, r0
  41b51e:	17c2      	asrs	r2, r0, #31
  41b520:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b524:	b212      	sxth	r2, r2
  41b526:	e64a      	b.n	41b1be <list_init+0x38a>
  41b528:	2000      	movs	r0, #0
  41b52a:	4b49      	ldr	r3, [pc, #292]	; (41b650 <list_init+0x81c>)
  41b52c:	4798      	blx	r3
  41b52e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b532:	0040      	lsls	r0, r0, #1
  41b534:	3050      	adds	r0, #80	; 0x50
  41b536:	4b47      	ldr	r3, [pc, #284]	; (41b654 <list_init+0x820>)
  41b538:	fb83 2300 	smull	r2, r3, r3, r0
  41b53c:	17c2      	asrs	r2, r0, #31
  41b53e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b542:	b212      	sxth	r2, r2
  41b544:	e63b      	b.n	41b1be <list_init+0x38a>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b546:	2000      	movs	r0, #0
  41b548:	4b41      	ldr	r3, [pc, #260]	; (41b650 <list_init+0x81c>)
  41b54a:	4798      	blx	r3
  41b54c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b550:	3050      	adds	r0, #80	; 0x50
  41b552:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b556:	da01      	bge.n	41b55c <list_init+0x728>
  41b558:	2201      	movs	r2, #1
  41b55a:	e649      	b.n	41b1f0 <list_init+0x3bc>
  41b55c:	2000      	movs	r0, #0
  41b55e:	4b3c      	ldr	r3, [pc, #240]	; (41b650 <list_init+0x81c>)
  41b560:	4798      	blx	r3
  41b562:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b566:	3050      	adds	r0, #80	; 0x50
  41b568:	4b3a      	ldr	r3, [pc, #232]	; (41b654 <list_init+0x820>)
  41b56a:	fb83 2300 	smull	r2, r3, r3, r0
  41b56e:	17c2      	asrs	r2, r0, #31
  41b570:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b574:	b212      	sxth	r2, r2
  41b576:	e63b      	b.n	41b1f0 <list_init+0x3bc>
  41b578:	2000      	movs	r0, #0
  41b57a:	4b35      	ldr	r3, [pc, #212]	; (41b650 <list_init+0x81c>)
  41b57c:	4798      	blx	r3
  41b57e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b582:	0040      	lsls	r0, r0, #1
  41b584:	3050      	adds	r0, #80	; 0x50
  41b586:	4b33      	ldr	r3, [pc, #204]	; (41b654 <list_init+0x820>)
  41b588:	fb83 2300 	smull	r2, r3, r3, r0
  41b58c:	17c2      	asrs	r2, r0, #31
  41b58e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b592:	b212      	sxth	r2, r2
  41b594:	e62c      	b.n	41b1f0 <list_init+0x3bc>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41b596:	2000      	movs	r0, #0
  41b598:	4b2d      	ldr	r3, [pc, #180]	; (41b650 <list_init+0x81c>)
  41b59a:	4798      	blx	r3
  41b59c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5a0:	3050      	adds	r0, #80	; 0x50
  41b5a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b5a6:	da02      	bge.n	41b5ae <list_init+0x77a>
  41b5a8:	f04f 32ff 	mov.w	r2, #4294967295
  41b5ac:	e63a      	b.n	41b224 <list_init+0x3f0>
  41b5ae:	2000      	movs	r0, #0
  41b5b0:	4b27      	ldr	r3, [pc, #156]	; (41b650 <list_init+0x81c>)
  41b5b2:	4798      	blx	r3
  41b5b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5b8:	3050      	adds	r0, #80	; 0x50
  41b5ba:	4b26      	ldr	r3, [pc, #152]	; (41b654 <list_init+0x820>)
  41b5bc:	fb83 2300 	smull	r2, r3, r3, r0
  41b5c0:	17c2      	asrs	r2, r0, #31
  41b5c2:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b5c6:	b212      	sxth	r2, r2
  41b5c8:	e62c      	b.n	41b224 <list_init+0x3f0>
  41b5ca:	2000      	movs	r0, #0
  41b5cc:	4b20      	ldr	r3, [pc, #128]	; (41b650 <list_init+0x81c>)
  41b5ce:	4798      	blx	r3
  41b5d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5d4:	0040      	lsls	r0, r0, #1
  41b5d6:	3050      	adds	r0, #80	; 0x50
  41b5d8:	4b1e      	ldr	r3, [pc, #120]	; (41b654 <list_init+0x820>)
  41b5da:	fb83 2300 	smull	r2, r3, r3, r0
  41b5de:	17c2      	asrs	r2, r0, #31
  41b5e0:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b5e4:	b212      	sxth	r2, r2
  41b5e6:	e61d      	b.n	41b224 <list_init+0x3f0>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41b5e8:	2000      	movs	r0, #0
  41b5ea:	4b19      	ldr	r3, [pc, #100]	; (41b650 <list_init+0x81c>)
  41b5ec:	4798      	blx	r3
  41b5ee:	3028      	adds	r0, #40	; 0x28
  41b5f0:	0040      	lsls	r0, r0, #1
  41b5f2:	4b18      	ldr	r3, [pc, #96]	; (41b654 <list_init+0x820>)
  41b5f4:	fb83 2300 	smull	r2, r3, r3, r0
  41b5f8:	17c2      	asrs	r2, r0, #31
  41b5fa:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b5fe:	b212      	sxth	r2, r2
  41b600:	e622      	b.n	41b248 <list_init+0x414>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41b602:	2000      	movs	r0, #0
  41b604:	4b12      	ldr	r3, [pc, #72]	; (41b650 <list_init+0x81c>)
  41b606:	4798      	blx	r3
  41b608:	3028      	adds	r0, #40	; 0x28
  41b60a:	0040      	lsls	r0, r0, #1
  41b60c:	4b11      	ldr	r3, [pc, #68]	; (41b654 <list_init+0x820>)
  41b60e:	fb83 2300 	smull	r2, r3, r3, r0
  41b612:	17c2      	asrs	r2, r0, #31
  41b614:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b618:	b212      	sxth	r2, r2
  41b61a:	e628      	b.n	41b26e <list_init+0x43a>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41b61c:	2000      	movs	r0, #0
  41b61e:	4b0c      	ldr	r3, [pc, #48]	; (41b650 <list_init+0x81c>)
  41b620:	4798      	blx	r3
  41b622:	3028      	adds	r0, #40	; 0x28
  41b624:	0040      	lsls	r0, r0, #1
  41b626:	4b0b      	ldr	r3, [pc, #44]	; (41b654 <list_init+0x820>)
  41b628:	fb83 2300 	smull	r2, r3, r3, r0
  41b62c:	17c2      	asrs	r2, r0, #31
  41b62e:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b632:	b212      	sxth	r2, r2
  41b634:	e62e      	b.n	41b294 <list_init+0x460>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41b636:	2000      	movs	r0, #0
  41b638:	4b05      	ldr	r3, [pc, #20]	; (41b650 <list_init+0x81c>)
  41b63a:	4798      	blx	r3
  41b63c:	3028      	adds	r0, #40	; 0x28
  41b63e:	0040      	lsls	r0, r0, #1
  41b640:	4b04      	ldr	r3, [pc, #16]	; (41b654 <list_init+0x820>)
  41b642:	fb83 2300 	smull	r2, r3, r3, r0
  41b646:	17c2      	asrs	r2, r0, #31
  41b648:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b64c:	b212      	sxth	r2, r2
  41b64e:	e634      	b.n	41b2ba <list_init+0x486>
  41b650:	00414d4d 	.word	0x00414d4d
  41b654:	66666667 	.word	0x66666667

0041b658 <ddlist_init>:
{
  41b658:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ddlist_page);
  41b65a:	4c48      	ldr	r4, [pc, #288]	; (41b77c <ddlist_init+0x124>)
  41b65c:	6820      	ldr	r0, [r4, #0]
  41b65e:	3058      	adds	r0, #88	; 0x58
  41b660:	4b47      	ldr	r3, [pc, #284]	; (41b780 <ddlist_init+0x128>)
  41b662:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41b664:	6824      	ldr	r4, [r4, #0]
  41b666:	3458      	adds	r4, #88	; 0x58
  41b668:	2000      	movs	r0, #0
  41b66a:	4b46      	ldr	r3, [pc, #280]	; (41b784 <ddlist_init+0x12c>)
  41b66c:	4798      	blx	r3
  41b66e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b672:	0080      	lsls	r0, r0, #2
  41b674:	3050      	adds	r0, #80	; 0x50
  41b676:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b67a:	da4d      	bge.n	41b718 <ddlist_init+0xc0>
  41b67c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41b67e:	f248 0181 	movw	r1, #32897	; 0x8081
  41b682:	4620      	mov	r0, r4
  41b684:	4d40      	ldr	r5, [pc, #256]	; (41b788 <ddlist_init+0x130>)
  41b686:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
  41b688:	4c3c      	ldr	r4, [pc, #240]	; (41b77c <ddlist_init+0x124>)
  41b68a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41b68c:	2201      	movs	r2, #1
  41b68e:	2102      	movs	r1, #2
  41b690:	3058      	adds	r0, #88	; 0x58
  41b692:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
  41b694:	6820      	ldr	r0, [r4, #0]
  41b696:	305c      	adds	r0, #92	; 0x5c
  41b698:	4b39      	ldr	r3, [pc, #228]	; (41b780 <ddlist_init+0x128>)
  41b69a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b69c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b69e:	22ff      	movs	r2, #255	; 0xff
  41b6a0:	212c      	movs	r1, #44	; 0x2c
  41b6a2:	305c      	adds	r0, #92	; 0x5c
  41b6a4:	4b39      	ldr	r3, [pc, #228]	; (41b78c <ddlist_init+0x134>)
  41b6a6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
  41b6a8:	6820      	ldr	r0, [r4, #0]
  41b6aa:	4d39      	ldr	r5, [pc, #228]	; (41b790 <ddlist_init+0x138>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b6ac:	89aa      	ldrh	r2, [r5, #12]
  41b6ae:	2129      	movs	r1, #41	; 0x29
  41b6b0:	305c      	adds	r0, #92	; 0x5c
  41b6b2:	4b38      	ldr	r3, [pc, #224]	; (41b794 <ddlist_init+0x13c>)
  41b6b4:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
  41b6b6:	6820      	ldr	r0, [r4, #0]
  41b6b8:	305c      	adds	r0, #92	; 0x5c
  41b6ba:	6a2b      	ldr	r3, [r5, #32]
  41b6bc:	f013 0f02 	tst.w	r3, #2
  41b6c0:	d039      	beq.n	41b736 <ddlist_init+0xde>
  41b6c2:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b6c6:	f248 0189 	movw	r1, #32905	; 0x8089
  41b6ca:	4b32      	ldr	r3, [pc, #200]	; (41b794 <ddlist_init+0x13c>)
  41b6cc:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
  41b6ce:	4b2b      	ldr	r3, [pc, #172]	; (41b77c <ddlist_init+0x124>)
  41b6d0:	6818      	ldr	r0, [r3, #0]
  41b6d2:	305c      	adds	r0, #92	; 0x5c
  41b6d4:	4b2e      	ldr	r3, [pc, #184]	; (41b790 <ddlist_init+0x138>)
  41b6d6:	6a1b      	ldr	r3, [r3, #32]
  41b6d8:	f013 0f02 	tst.w	r3, #2
  41b6dc:	d02e      	beq.n	41b73c <ddlist_init+0xe4>
  41b6de:	f04f 0207 	mov.w	r2, #7
  41b6e2:	231d      	movs	r3, #29
  41b6e4:	f363 02c7 	bfi	r2, r3, #3, #5
  41b6e8:	f363 220c 	bfi	r2, r3, #8, #5
  41b6ec:	2303      	movs	r3, #3
  41b6ee:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b6f2:	f241 0129 	movw	r1, #4137	; 0x1029
  41b6f6:	4b27      	ldr	r3, [pc, #156]	; (41b794 <ddlist_init+0x13c>)
  41b6f8:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b6fa:	4b20      	ldr	r3, [pc, #128]	; (41b77c <ddlist_init+0x124>)
  41b6fc:	6818      	ldr	r0, [r3, #0]
  41b6fe:	305c      	adds	r0, #92	; 0x5c
  41b700:	4b23      	ldr	r3, [pc, #140]	; (41b790 <ddlist_init+0x138>)
  41b702:	6a1b      	ldr	r3, [r3, #32]
  41b704:	f013 0f02 	tst.w	r3, #2
  41b708:	d127      	bne.n	41b75a <ddlist_init+0x102>
  41b70a:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b70e:	f249 0189 	movw	r1, #37001	; 0x9089
  41b712:	4b20      	ldr	r3, [pc, #128]	; (41b794 <ddlist_init+0x13c>)
  41b714:	4798      	blx	r3
  41b716:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41b718:	2000      	movs	r0, #0
  41b71a:	4b1a      	ldr	r3, [pc, #104]	; (41b784 <ddlist_init+0x12c>)
  41b71c:	4798      	blx	r3
  41b71e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b722:	0080      	lsls	r0, r0, #2
  41b724:	3050      	adds	r0, #80	; 0x50
  41b726:	4b1c      	ldr	r3, [pc, #112]	; (41b798 <ddlist_init+0x140>)
  41b728:	fb83 2300 	smull	r2, r3, r3, r0
  41b72c:	17c2      	asrs	r2, r0, #31
  41b72e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b732:	b212      	sxth	r2, r2
  41b734:	e7a3      	b.n	41b67e <ddlist_init+0x26>
  41b736:	f04f 32ff 	mov.w	r2, #4294967295
  41b73a:	e7c4      	b.n	41b6c6 <ddlist_init+0x6e>
  41b73c:	f04f 0200 	mov.w	r2, #0
  41b740:	2302      	movs	r3, #2
  41b742:	f363 0202 	bfi	r2, r3, #0, #3
  41b746:	2309      	movs	r3, #9
  41b748:	f363 02c7 	bfi	r2, r3, #3, #5
  41b74c:	230a      	movs	r3, #10
  41b74e:	f363 220c 	bfi	r2, r3, #8, #5
  41b752:	2303      	movs	r3, #3
  41b754:	f363 324f 	bfi	r2, r3, #13, #3
  41b758:	e7cb      	b.n	41b6f2 <ddlist_init+0x9a>
  41b75a:	f04f 0200 	mov.w	r2, #0
  41b75e:	2301      	movs	r3, #1
  41b760:	f363 0202 	bfi	r2, r3, #0, #3
  41b764:	2307      	movs	r3, #7
  41b766:	f363 02c7 	bfi	r2, r3, #3, #5
  41b76a:	2308      	movs	r3, #8
  41b76c:	f363 220c 	bfi	r2, r3, #8, #5
  41b770:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b774:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b778:	e7c9      	b.n	41b70e <ddlist_init+0xb6>
  41b77a:	bf00      	nop
  41b77c:	20414824 	.word	0x20414824
  41b780:	00418951 	.word	0x00418951
  41b784:	00414d4d 	.word	0x00414d4d
  41b788:	0040a1b9 	.word	0x0040a1b9
  41b78c:	0040a4d9 	.word	0x0040a4d9
  41b790:	20414828 	.word	0x20414828
  41b794:	0040a349 	.word	0x0040a349
  41b798:	66666667 	.word	0x66666667

0041b79c <roller_init>:
{
  41b79c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->roller_bg);
  41b79e:	4c21      	ldr	r4, [pc, #132]	; (41b824 <roller_init+0x88>)
  41b7a0:	6820      	ldr	r0, [r4, #0]
  41b7a2:	308c      	adds	r0, #140	; 0x8c
  41b7a4:	4b20      	ldr	r3, [pc, #128]	; (41b828 <roller_init+0x8c>)
  41b7a6:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41b7a8:	6824      	ldr	r4, [r4, #0]
  41b7aa:	348c      	adds	r4, #140	; 0x8c
  41b7ac:	2000      	movs	r0, #0
  41b7ae:	4b1f      	ldr	r3, [pc, #124]	; (41b82c <roller_init+0x90>)
  41b7b0:	4798      	blx	r3
  41b7b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b7b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b7ba:	3050      	adds	r0, #80	; 0x50
  41b7bc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b7c0:	da1f      	bge.n	41b802 <roller_init+0x66>
  41b7c2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41b7c4:	f248 0181 	movw	r1, #32897	; 0x8081
  41b7c8:	4620      	mov	r0, r4
  41b7ca:	4b19      	ldr	r3, [pc, #100]	; (41b830 <roller_init+0x94>)
  41b7cc:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
  41b7ce:	4c15      	ldr	r4, [pc, #84]	; (41b824 <roller_init+0x88>)
  41b7d0:	6820      	ldr	r0, [r4, #0]
  41b7d2:	3090      	adds	r0, #144	; 0x90
  41b7d4:	4b14      	ldr	r3, [pc, #80]	; (41b828 <roller_init+0x8c>)
  41b7d6:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b7d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b7da:	22ff      	movs	r2, #255	; 0xff
  41b7dc:	212c      	movs	r1, #44	; 0x2c
  41b7de:	3090      	adds	r0, #144	; 0x90
  41b7e0:	4b14      	ldr	r3, [pc, #80]	; (41b834 <roller_init+0x98>)
  41b7e2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
  41b7e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b7e6:	4b14      	ldr	r3, [pc, #80]	; (41b838 <roller_init+0x9c>)
  41b7e8:	899a      	ldrh	r2, [r3, #12]
  41b7ea:	2129      	movs	r1, #41	; 0x29
  41b7ec:	3090      	adds	r0, #144	; 0x90
  41b7ee:	4d13      	ldr	r5, [pc, #76]	; (41b83c <roller_init+0xa0>)
  41b7f0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41b7f2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b7f4:	4b12      	ldr	r3, [pc, #72]	; (41b840 <roller_init+0xa4>)
  41b7f6:	881a      	ldrh	r2, [r3, #0]
  41b7f8:	f248 0189 	movw	r1, #32905	; 0x8089
  41b7fc:	3090      	adds	r0, #144	; 0x90
  41b7fe:	47a8      	blx	r5
  41b800:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41b802:	2000      	movs	r0, #0
  41b804:	4b09      	ldr	r3, [pc, #36]	; (41b82c <roller_init+0x90>)
  41b806:	4798      	blx	r3
  41b808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b80c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b810:	3050      	adds	r0, #80	; 0x50
  41b812:	4b0c      	ldr	r3, [pc, #48]	; (41b844 <roller_init+0xa8>)
  41b814:	fb83 2300 	smull	r2, r3, r3, r0
  41b818:	17c2      	asrs	r2, r0, #31
  41b81a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b81e:	b212      	sxth	r2, r2
  41b820:	e7d0      	b.n	41b7c4 <roller_init+0x28>
  41b822:	bf00      	nop
  41b824:	20414824 	.word	0x20414824
  41b828:	00418951 	.word	0x00418951
  41b82c:	00414d4d 	.word	0x00414d4d
  41b830:	0040a1b9 	.word	0x0040a1b9
  41b834:	0040a4d9 	.word	0x0040a4d9
  41b838:	20414828 	.word	0x20414828
  41b83c:	0040a349 	.word	0x0040a349
  41b840:	0042f86c 	.word	0x0042f86c
  41b844:	66666667 	.word	0x66666667

0041b848 <table_init>:
{
  41b848:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->table_cell);
  41b84a:	4c9d      	ldr	r4, [pc, #628]	; (41bac0 <table_init+0x278>)
  41b84c:	6820      	ldr	r0, [r4, #0]
  41b84e:	30a4      	adds	r0, #164	; 0xa4
  41b850:	4b9c      	ldr	r3, [pc, #624]	; (41bac4 <table_init+0x27c>)
  41b852:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41b854:	6820      	ldr	r0, [r4, #0]
  41b856:	30a4      	adds	r0, #164	; 0xa4
  41b858:	4b9b      	ldr	r3, [pc, #620]	; (41bac8 <table_init+0x280>)
  41b85a:	6a1b      	ldr	r3, [r3, #32]
  41b85c:	f013 0f02 	tst.w	r3, #2
  41b860:	d07e      	beq.n	41b960 <table_init+0x118>
  41b862:	f04f 0200 	mov.w	r2, #0
  41b866:	2306      	movs	r3, #6
  41b868:	f363 0202 	bfi	r2, r3, #0, #3
  41b86c:	231a      	movs	r3, #26
  41b86e:	f363 02c7 	bfi	r2, r3, #3, #5
  41b872:	231c      	movs	r3, #28
  41b874:	f363 220c 	bfi	r2, r3, #8, #5
  41b878:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b87c:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b880:	2139      	movs	r1, #57	; 0x39
  41b882:	4b92      	ldr	r3, [pc, #584]	; (41bacc <table_init+0x284>)
  41b884:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
  41b886:	4c8e      	ldr	r4, [pc, #568]	; (41bac0 <table_init+0x278>)
  41b888:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b88a:	2201      	movs	r2, #1
  41b88c:	2130      	movs	r1, #48	; 0x30
  41b88e:	30a4      	adds	r0, #164	; 0xa4
  41b890:	4d8f      	ldr	r5, [pc, #572]	; (41bad0 <table_init+0x288>)
  41b892:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
  41b894:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41b896:	2203      	movs	r2, #3
  41b898:	2131      	movs	r1, #49	; 0x31
  41b89a:	30a4      	adds	r0, #164	; 0xa4
  41b89c:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b89e:	6824      	ldr	r4, [r4, #0]
  41b8a0:	34a4      	adds	r4, #164	; 0xa4
  41b8a2:	2000      	movs	r0, #0
  41b8a4:	4b8b      	ldr	r3, [pc, #556]	; (41bad4 <table_init+0x28c>)
  41b8a6:	4798      	blx	r3
  41b8a8:	2801      	cmp	r0, #1
  41b8aa:	d968      	bls.n	41b97e <table_init+0x136>
  41b8ac:	2000      	movs	r0, #0
  41b8ae:	4b8a      	ldr	r3, [pc, #552]	; (41bad8 <table_init+0x290>)
  41b8b0:	4798      	blx	r3
  41b8b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b8b6:	0040      	lsls	r0, r0, #1
  41b8b8:	3050      	adds	r0, #80	; 0x50
  41b8ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b8be:	da77      	bge.n	41b9b0 <table_init+0x168>
  41b8c0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b8c2:	2112      	movs	r1, #18
  41b8c4:	4620      	mov	r0, r4
  41b8c6:	4b82      	ldr	r3, [pc, #520]	; (41bad0 <table_init+0x288>)
  41b8c8:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b8ca:	4b7d      	ldr	r3, [pc, #500]	; (41bac0 <table_init+0x278>)
  41b8cc:	681c      	ldr	r4, [r3, #0]
  41b8ce:	34a4      	adds	r4, #164	; 0xa4
  41b8d0:	2000      	movs	r0, #0
  41b8d2:	4b80      	ldr	r3, [pc, #512]	; (41bad4 <table_init+0x28c>)
  41b8d4:	4798      	blx	r3
  41b8d6:	2801      	cmp	r0, #1
  41b8d8:	d979      	bls.n	41b9ce <table_init+0x186>
  41b8da:	2000      	movs	r0, #0
  41b8dc:	4b7e      	ldr	r3, [pc, #504]	; (41bad8 <table_init+0x290>)
  41b8de:	4798      	blx	r3
  41b8e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b8e4:	0040      	lsls	r0, r0, #1
  41b8e6:	3050      	adds	r0, #80	; 0x50
  41b8e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b8ec:	f280 8088 	bge.w	41ba00 <table_init+0x1b8>
  41b8f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b8f2:	2113      	movs	r1, #19
  41b8f4:	4620      	mov	r0, r4
  41b8f6:	4b76      	ldr	r3, [pc, #472]	; (41bad0 <table_init+0x288>)
  41b8f8:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b8fa:	4b71      	ldr	r3, [pc, #452]	; (41bac0 <table_init+0x278>)
  41b8fc:	681c      	ldr	r4, [r3, #0]
  41b8fe:	34a4      	adds	r4, #164	; 0xa4
  41b900:	2000      	movs	r0, #0
  41b902:	4b74      	ldr	r3, [pc, #464]	; (41bad4 <table_init+0x28c>)
  41b904:	4798      	blx	r3
  41b906:	2801      	cmp	r0, #1
  41b908:	f240 8089 	bls.w	41ba1e <table_init+0x1d6>
  41b90c:	2000      	movs	r0, #0
  41b90e:	4b72      	ldr	r3, [pc, #456]	; (41bad8 <table_init+0x290>)
  41b910:	4798      	blx	r3
  41b912:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b916:	0040      	lsls	r0, r0, #1
  41b918:	3050      	adds	r0, #80	; 0x50
  41b91a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b91e:	f280 8097 	bge.w	41ba50 <table_init+0x208>
  41b922:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b924:	2110      	movs	r1, #16
  41b926:	4620      	mov	r0, r4
  41b928:	4b69      	ldr	r3, [pc, #420]	; (41bad0 <table_init+0x288>)
  41b92a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b92c:	4b64      	ldr	r3, [pc, #400]	; (41bac0 <table_init+0x278>)
  41b92e:	681c      	ldr	r4, [r3, #0]
  41b930:	34a4      	adds	r4, #164	; 0xa4
  41b932:	2000      	movs	r0, #0
  41b934:	4b67      	ldr	r3, [pc, #412]	; (41bad4 <table_init+0x28c>)
  41b936:	4798      	blx	r3
  41b938:	2801      	cmp	r0, #1
  41b93a:	f240 8098 	bls.w	41ba6e <table_init+0x226>
  41b93e:	2000      	movs	r0, #0
  41b940:	4b65      	ldr	r3, [pc, #404]	; (41bad8 <table_init+0x290>)
  41b942:	4798      	blx	r3
  41b944:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b948:	0040      	lsls	r0, r0, #1
  41b94a:	3050      	adds	r0, #80	; 0x50
  41b94c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b950:	f280 80a6 	bge.w	41baa0 <table_init+0x258>
  41b954:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b956:	2111      	movs	r1, #17
  41b958:	4620      	mov	r0, r4
  41b95a:	4b5d      	ldr	r3, [pc, #372]	; (41bad0 <table_init+0x288>)
  41b95c:	4798      	blx	r3
  41b95e:	bd38      	pop	{r3, r4, r5, pc}
  41b960:	f04f 0200 	mov.w	r2, #0
  41b964:	2304      	movs	r3, #4
  41b966:	f363 0202 	bfi	r2, r3, #0, #3
  41b96a:	2310      	movs	r3, #16
  41b96c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b970:	2312      	movs	r3, #18
  41b972:	f363 220c 	bfi	r2, r3, #8, #5
  41b976:	2302      	movs	r3, #2
  41b978:	f363 324f 	bfi	r2, r3, #13, #3
  41b97c:	e780      	b.n	41b880 <table_init+0x38>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b97e:	2000      	movs	r0, #0
  41b980:	4b55      	ldr	r3, [pc, #340]	; (41bad8 <table_init+0x290>)
  41b982:	4798      	blx	r3
  41b984:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b988:	3050      	adds	r0, #80	; 0x50
  41b98a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b98e:	da01      	bge.n	41b994 <table_init+0x14c>
  41b990:	2201      	movs	r2, #1
  41b992:	e796      	b.n	41b8c2 <table_init+0x7a>
  41b994:	2000      	movs	r0, #0
  41b996:	4b50      	ldr	r3, [pc, #320]	; (41bad8 <table_init+0x290>)
  41b998:	4798      	blx	r3
  41b99a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b99e:	3050      	adds	r0, #80	; 0x50
  41b9a0:	4b4e      	ldr	r3, [pc, #312]	; (41badc <table_init+0x294>)
  41b9a2:	fb83 2300 	smull	r2, r3, r3, r0
  41b9a6:	17c2      	asrs	r2, r0, #31
  41b9a8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b9ac:	b212      	sxth	r2, r2
  41b9ae:	e788      	b.n	41b8c2 <table_init+0x7a>
  41b9b0:	2000      	movs	r0, #0
  41b9b2:	4b49      	ldr	r3, [pc, #292]	; (41bad8 <table_init+0x290>)
  41b9b4:	4798      	blx	r3
  41b9b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b9ba:	0040      	lsls	r0, r0, #1
  41b9bc:	3050      	adds	r0, #80	; 0x50
  41b9be:	4b47      	ldr	r3, [pc, #284]	; (41badc <table_init+0x294>)
  41b9c0:	fb83 2300 	smull	r2, r3, r3, r0
  41b9c4:	17c2      	asrs	r2, r0, #31
  41b9c6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b9ca:	b212      	sxth	r2, r2
  41b9cc:	e779      	b.n	41b8c2 <table_init+0x7a>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b9ce:	2000      	movs	r0, #0
  41b9d0:	4b41      	ldr	r3, [pc, #260]	; (41bad8 <table_init+0x290>)
  41b9d2:	4798      	blx	r3
  41b9d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b9d8:	3050      	adds	r0, #80	; 0x50
  41b9da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b9de:	da01      	bge.n	41b9e4 <table_init+0x19c>
  41b9e0:	2201      	movs	r2, #1
  41b9e2:	e786      	b.n	41b8f2 <table_init+0xaa>
  41b9e4:	2000      	movs	r0, #0
  41b9e6:	4b3c      	ldr	r3, [pc, #240]	; (41bad8 <table_init+0x290>)
  41b9e8:	4798      	blx	r3
  41b9ea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b9ee:	3050      	adds	r0, #80	; 0x50
  41b9f0:	4b3a      	ldr	r3, [pc, #232]	; (41badc <table_init+0x294>)
  41b9f2:	fb83 2300 	smull	r2, r3, r3, r0
  41b9f6:	17c2      	asrs	r2, r0, #31
  41b9f8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b9fc:	b212      	sxth	r2, r2
  41b9fe:	e778      	b.n	41b8f2 <table_init+0xaa>
  41ba00:	2000      	movs	r0, #0
  41ba02:	4b35      	ldr	r3, [pc, #212]	; (41bad8 <table_init+0x290>)
  41ba04:	4798      	blx	r3
  41ba06:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba0a:	0040      	lsls	r0, r0, #1
  41ba0c:	3050      	adds	r0, #80	; 0x50
  41ba0e:	4b33      	ldr	r3, [pc, #204]	; (41badc <table_init+0x294>)
  41ba10:	fb83 2300 	smull	r2, r3, r3, r0
  41ba14:	17c2      	asrs	r2, r0, #31
  41ba16:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba1a:	b212      	sxth	r2, r2
  41ba1c:	e769      	b.n	41b8f2 <table_init+0xaa>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41ba1e:	2000      	movs	r0, #0
  41ba20:	4b2d      	ldr	r3, [pc, #180]	; (41bad8 <table_init+0x290>)
  41ba22:	4798      	blx	r3
  41ba24:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba28:	3050      	adds	r0, #80	; 0x50
  41ba2a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba2e:	da01      	bge.n	41ba34 <table_init+0x1ec>
  41ba30:	2201      	movs	r2, #1
  41ba32:	e777      	b.n	41b924 <table_init+0xdc>
  41ba34:	2000      	movs	r0, #0
  41ba36:	4b28      	ldr	r3, [pc, #160]	; (41bad8 <table_init+0x290>)
  41ba38:	4798      	blx	r3
  41ba3a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba3e:	3050      	adds	r0, #80	; 0x50
  41ba40:	4b26      	ldr	r3, [pc, #152]	; (41badc <table_init+0x294>)
  41ba42:	fb83 2300 	smull	r2, r3, r3, r0
  41ba46:	17c2      	asrs	r2, r0, #31
  41ba48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba4c:	b212      	sxth	r2, r2
  41ba4e:	e769      	b.n	41b924 <table_init+0xdc>
  41ba50:	2000      	movs	r0, #0
  41ba52:	4b21      	ldr	r3, [pc, #132]	; (41bad8 <table_init+0x290>)
  41ba54:	4798      	blx	r3
  41ba56:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba5a:	0040      	lsls	r0, r0, #1
  41ba5c:	3050      	adds	r0, #80	; 0x50
  41ba5e:	4b1f      	ldr	r3, [pc, #124]	; (41badc <table_init+0x294>)
  41ba60:	fb83 2300 	smull	r2, r3, r3, r0
  41ba64:	17c2      	asrs	r2, r0, #31
  41ba66:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba6a:	b212      	sxth	r2, r2
  41ba6c:	e75a      	b.n	41b924 <table_init+0xdc>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41ba6e:	2000      	movs	r0, #0
  41ba70:	4b19      	ldr	r3, [pc, #100]	; (41bad8 <table_init+0x290>)
  41ba72:	4798      	blx	r3
  41ba74:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba78:	3050      	adds	r0, #80	; 0x50
  41ba7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba7e:	da01      	bge.n	41ba84 <table_init+0x23c>
  41ba80:	2201      	movs	r2, #1
  41ba82:	e768      	b.n	41b956 <table_init+0x10e>
  41ba84:	2000      	movs	r0, #0
  41ba86:	4b14      	ldr	r3, [pc, #80]	; (41bad8 <table_init+0x290>)
  41ba88:	4798      	blx	r3
  41ba8a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba8e:	3050      	adds	r0, #80	; 0x50
  41ba90:	4b12      	ldr	r3, [pc, #72]	; (41badc <table_init+0x294>)
  41ba92:	fb83 2300 	smull	r2, r3, r3, r0
  41ba96:	17c2      	asrs	r2, r0, #31
  41ba98:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba9c:	b212      	sxth	r2, r2
  41ba9e:	e75a      	b.n	41b956 <table_init+0x10e>
  41baa0:	2000      	movs	r0, #0
  41baa2:	4b0d      	ldr	r3, [pc, #52]	; (41bad8 <table_init+0x290>)
  41baa4:	4798      	blx	r3
  41baa6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41baaa:	0040      	lsls	r0, r0, #1
  41baac:	3050      	adds	r0, #80	; 0x50
  41baae:	4b0b      	ldr	r3, [pc, #44]	; (41badc <table_init+0x294>)
  41bab0:	fb83 2300 	smull	r2, r3, r3, r0
  41bab4:	17c2      	asrs	r2, r0, #31
  41bab6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41baba:	b212      	sxth	r2, r2
  41babc:	e74b      	b.n	41b956 <table_init+0x10e>
  41babe:	bf00      	nop
  41bac0:	20414824 	.word	0x20414824
  41bac4:	00418951 	.word	0x00418951
  41bac8:	20414828 	.word	0x20414828
  41bacc:	0040a349 	.word	0x0040a349
  41bad0:	0040a1b9 	.word	0x0040a1b9
  41bad4:	00414d6d 	.word	0x00414d6d
  41bad8:	00414d4d 	.word	0x00414d4d
  41badc:	66666667 	.word	0x66666667

0041bae0 <tabview_win_shared_init>:
{
  41bae0:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->tabview_btns_bg);
  41bae2:	4cbe      	ldr	r4, [pc, #760]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bae4:	6820      	ldr	r0, [r4, #0]
  41bae6:	30ac      	adds	r0, #172	; 0xac
  41bae8:	4bbd      	ldr	r3, [pc, #756]	; (41bde0 <tabview_win_shared_init+0x300>)
  41baea:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41baec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41baee:	22ff      	movs	r2, #255	; 0xff
  41baf0:	212c      	movs	r1, #44	; 0x2c
  41baf2:	30ac      	adds	r0, #172	; 0xac
  41baf4:	4bbb      	ldr	r3, [pc, #748]	; (41bde4 <tabview_win_shared_init+0x304>)
  41baf6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
  41baf8:	6820      	ldr	r0, [r4, #0]
  41bafa:	30ac      	adds	r0, #172	; 0xac
  41bafc:	4bba      	ldr	r3, [pc, #744]	; (41bde8 <tabview_win_shared_init+0x308>)
  41bafe:	6a1b      	ldr	r3, [r3, #32]
  41bb00:	f013 0f02 	tst.w	r3, #2
  41bb04:	f000 8198 	beq.w	41be38 <tabview_win_shared_init+0x358>
  41bb08:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bb0c:	2129      	movs	r1, #41	; 0x29
  41bb0e:	4bb7      	ldr	r3, [pc, #732]	; (41bdec <tabview_win_shared_init+0x30c>)
  41bb10:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41bb12:	4bb2      	ldr	r3, [pc, #712]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bb14:	6818      	ldr	r0, [r3, #0]
  41bb16:	30ac      	adds	r0, #172	; 0xac
  41bb18:	4bb3      	ldr	r3, [pc, #716]	; (41bde8 <tabview_win_shared_init+0x308>)
  41bb1a:	6a1b      	ldr	r3, [r3, #32]
  41bb1c:	f013 0f02 	tst.w	r3, #2
  41bb20:	f000 8198 	beq.w	41be54 <tabview_win_shared_init+0x374>
  41bb24:	f04f 0200 	mov.w	r2, #0
  41bb28:	2301      	movs	r3, #1
  41bb2a:	f363 0202 	bfi	r2, r3, #0, #3
  41bb2e:	2307      	movs	r3, #7
  41bb30:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb34:	2308      	movs	r3, #8
  41bb36:	f363 220c 	bfi	r2, r3, #8, #5
  41bb3a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bb3e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bb42:	f248 0189 	movw	r1, #32905	; 0x8089
  41bb46:	4da9      	ldr	r5, [pc, #676]	; (41bdec <tabview_win_shared_init+0x30c>)
  41bb48:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
  41bb4a:	4ca4      	ldr	r4, [pc, #656]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bb4c:	6820      	ldr	r0, [r4, #0]
  41bb4e:	f04f 0200 	mov.w	r2, #0
  41bb52:	2304      	movs	r3, #4
  41bb54:	f363 0202 	bfi	r2, r3, #0, #3
  41bb58:	2312      	movs	r3, #18
  41bb5a:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb5e:	2313      	movs	r3, #19
  41bb60:	f363 220c 	bfi	r2, r3, #8, #5
  41bb64:	2306      	movs	r3, #6
  41bb66:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41bb6a:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41bb6e:	30ac      	adds	r0, #172	; 0xac
  41bb70:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bb72:	6824      	ldr	r4, [r4, #0]
  41bb74:	34ac      	adds	r4, #172	; 0xac
  41bb76:	2000      	movs	r0, #0
  41bb78:	4b9d      	ldr	r3, [pc, #628]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bb7a:	4798      	blx	r3
  41bb7c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bb80:	3050      	adds	r0, #80	; 0x50
  41bb82:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bb86:	f280 8171 	bge.w	41be6c <tabview_win_shared_init+0x38c>
  41bb8a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41bb8c:	2110      	movs	r1, #16
  41bb8e:	4620      	mov	r0, r4
  41bb90:	4b98      	ldr	r3, [pc, #608]	; (41bdf4 <tabview_win_shared_init+0x314>)
  41bb92:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bb94:	4b91      	ldr	r3, [pc, #580]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bb96:	681c      	ldr	r4, [r3, #0]
  41bb98:	34ac      	adds	r4, #172	; 0xac
  41bb9a:	2000      	movs	r0, #0
  41bb9c:	4b94      	ldr	r3, [pc, #592]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bb9e:	4798      	blx	r3
  41bba0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bba4:	3050      	adds	r0, #80	; 0x50
  41bba6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bbaa:	f280 816d 	bge.w	41be88 <tabview_win_shared_init+0x3a8>
  41bbae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41bbb0:	2112      	movs	r1, #18
  41bbb2:	4620      	mov	r0, r4
  41bbb4:	4b8f      	ldr	r3, [pc, #572]	; (41bdf4 <tabview_win_shared_init+0x314>)
  41bbb6:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bbb8:	4b88      	ldr	r3, [pc, #544]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bbba:	681c      	ldr	r4, [r3, #0]
  41bbbc:	34ac      	adds	r4, #172	; 0xac
  41bbbe:	2000      	movs	r0, #0
  41bbc0:	4b8b      	ldr	r3, [pc, #556]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bbc2:	4798      	blx	r3
  41bbc4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bbc8:	3050      	adds	r0, #80	; 0x50
  41bbca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bbce:	f280 8169 	bge.w	41bea4 <tabview_win_shared_init+0x3c4>
  41bbd2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41bbd4:	2113      	movs	r1, #19
  41bbd6:	4620      	mov	r0, r4
  41bbd8:	4b86      	ldr	r3, [pc, #536]	; (41bdf4 <tabview_win_shared_init+0x314>)
  41bbda:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
  41bbdc:	4c7f      	ldr	r4, [pc, #508]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bbde:	6820      	ldr	r0, [r4, #0]
  41bbe0:	30a8      	adds	r0, #168	; 0xa8
  41bbe2:	4b7f      	ldr	r3, [pc, #508]	; (41bde0 <tabview_win_shared_init+0x300>)
  41bbe4:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
  41bbe6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41bbe8:	227f      	movs	r2, #127	; 0x7f
  41bbea:	f241 012c 	movw	r1, #4140	; 0x102c
  41bbee:	30a8      	adds	r0, #168	; 0xa8
  41bbf0:	4b7c      	ldr	r3, [pc, #496]	; (41bde4 <tabview_win_shared_init+0x304>)
  41bbf2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
  41bbf4:	6820      	ldr	r0, [r4, #0]
  41bbf6:	f04f 0200 	mov.w	r2, #0
  41bbfa:	2304      	movs	r3, #4
  41bbfc:	f363 0202 	bfi	r2, r3, #0, #3
  41bc00:	2311      	movs	r3, #17
  41bc02:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc06:	f363 220c 	bfi	r2, r3, #8, #5
  41bc0a:	2302      	movs	r3, #2
  41bc0c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bc10:	f241 0129 	movw	r1, #4137	; 0x1029
  41bc14:	30a8      	adds	r0, #168	; 0xa8
  41bc16:	4b75      	ldr	r3, [pc, #468]	; (41bdec <tabview_win_shared_init+0x30c>)
  41bc18:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
  41bc1a:	6820      	ldr	r0, [r4, #0]
  41bc1c:	30a8      	adds	r0, #168	; 0xa8
  41bc1e:	4b72      	ldr	r3, [pc, #456]	; (41bde8 <tabview_win_shared_init+0x308>)
  41bc20:	6a1b      	ldr	r3, [r3, #32]
  41bc22:	f013 0f02 	tst.w	r3, #2
  41bc26:	f000 814b 	beq.w	41bec0 <tabview_win_shared_init+0x3e0>
  41bc2a:	f04f 0200 	mov.w	r2, #0
  41bc2e:	2301      	movs	r3, #1
  41bc30:	f363 0202 	bfi	r2, r3, #0, #3
  41bc34:	2307      	movs	r3, #7
  41bc36:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc3a:	2308      	movs	r3, #8
  41bc3c:	f363 220c 	bfi	r2, r3, #8, #5
  41bc40:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bc44:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bc48:	f248 1189 	movw	r1, #33161	; 0x8189
  41bc4c:	4b67      	ldr	r3, [pc, #412]	; (41bdec <tabview_win_shared_init+0x30c>)
  41bc4e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41bc50:	4b62      	ldr	r3, [pc, #392]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bc52:	681c      	ldr	r4, [r3, #0]
  41bc54:	34a8      	adds	r4, #168	; 0xa8
  41bc56:	2000      	movs	r0, #0
  41bc58:	4b65      	ldr	r3, [pc, #404]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bc5a:	4798      	blx	r3
  41bc5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bc60:	0080      	lsls	r0, r0, #2
  41bc62:	3050      	adds	r0, #80	; 0x50
  41bc64:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bc68:	f280 8136 	bge.w	41bed8 <tabview_win_shared_init+0x3f8>
  41bc6c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41bc6e:	2110      	movs	r1, #16
  41bc70:	4620      	mov	r0, r4
  41bc72:	4b60      	ldr	r3, [pc, #384]	; (41bdf4 <tabview_win_shared_init+0x314>)
  41bc74:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41bc76:	4b59      	ldr	r3, [pc, #356]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bc78:	681c      	ldr	r4, [r3, #0]
  41bc7a:	34a8      	adds	r4, #168	; 0xa8
  41bc7c:	2000      	movs	r0, #0
  41bc7e:	4b5c      	ldr	r3, [pc, #368]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bc80:	4798      	blx	r3
  41bc82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bc86:	0080      	lsls	r0, r0, #2
  41bc88:	3050      	adds	r0, #80	; 0x50
  41bc8a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bc8e:	f280 8132 	bge.w	41bef6 <tabview_win_shared_init+0x416>
  41bc92:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41bc94:	2111      	movs	r1, #17
  41bc96:	4620      	mov	r0, r4
  41bc98:	4b56      	ldr	r3, [pc, #344]	; (41bdf4 <tabview_win_shared_init+0x314>)
  41bc9a:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
  41bc9c:	4c4f      	ldr	r4, [pc, #316]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bc9e:	6820      	ldr	r0, [r4, #0]
  41bca0:	4e51      	ldr	r6, [pc, #324]	; (41bde8 <tabview_win_shared_init+0x308>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bca2:	89b2      	ldrh	r2, [r6, #12]
  41bca4:	f248 2189 	movw	r1, #33417	; 0x8289
  41bca8:	30a8      	adds	r0, #168	; 0xa8
  41bcaa:	4d50      	ldr	r5, [pc, #320]	; (41bdec <tabview_win_shared_init+0x30c>)
  41bcac:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
  41bcae:	6820      	ldr	r0, [r4, #0]
  41bcb0:	89f2      	ldrh	r2, [r6, #14]
  41bcb2:	f248 4189 	movw	r1, #33929	; 0x8489
  41bcb6:	30a8      	adds	r0, #168	; 0xa8
  41bcb8:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
  41bcba:	6820      	ldr	r0, [r4, #0]
  41bcbc:	30b0      	adds	r0, #176	; 0xb0
  41bcbe:	4b48      	ldr	r3, [pc, #288]	; (41bde0 <tabview_win_shared_init+0x300>)
  41bcc0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41bcc2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41bcc4:	22ff      	movs	r2, #255	; 0xff
  41bcc6:	212c      	movs	r1, #44	; 0x2c
  41bcc8:	30b0      	adds	r0, #176	; 0xb0
  41bcca:	4b46      	ldr	r3, [pc, #280]	; (41bde4 <tabview_win_shared_init+0x304>)
  41bccc:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
  41bcce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bcd0:	89b2      	ldrh	r2, [r6, #12]
  41bcd2:	2129      	movs	r1, #41	; 0x29
  41bcd4:	30b0      	adds	r0, #176	; 0xb0
  41bcd6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
  41bcd8:	6820      	ldr	r0, [r4, #0]
  41bcda:	89f2      	ldrh	r2, [r6, #14]
  41bcdc:	f240 4129 	movw	r1, #1065	; 0x429
  41bce0:	30b0      	adds	r0, #176	; 0xb0
  41bce2:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41bce4:	6824      	ldr	r4, [r4, #0]
  41bce6:	34b0      	adds	r4, #176	; 0xb0
  41bce8:	2000      	movs	r0, #0
  41bcea:	4b41      	ldr	r3, [pc, #260]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bcec:	4798      	blx	r3
  41bcee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bcf2:	3050      	adds	r0, #80	; 0x50
  41bcf4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bcf8:	f280 810c 	bge.w	41bf14 <tabview_win_shared_init+0x434>
  41bcfc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41bcfe:	2103      	movs	r1, #3
  41bd00:	4620      	mov	r0, r4
  41bd02:	4d3c      	ldr	r5, [pc, #240]	; (41bdf4 <tabview_win_shared_init+0x314>)
  41bd04:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41bd06:	4c35      	ldr	r4, [pc, #212]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bd08:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41bd0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41bd0e:	2101      	movs	r1, #1
  41bd10:	30b0      	adds	r0, #176	; 0xb0
  41bd12:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
  41bd14:	6820      	ldr	r0, [r4, #0]
  41bd16:	30b4      	adds	r0, #180	; 0xb4
  41bd18:	4b31      	ldr	r3, [pc, #196]	; (41bde0 <tabview_win_shared_init+0x300>)
  41bd1a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bd1c:	6824      	ldr	r4, [r4, #0]
  41bd1e:	34b4      	adds	r4, #180	; 0xb4
  41bd20:	2000      	movs	r0, #0
  41bd22:	4b35      	ldr	r3, [pc, #212]	; (41bdf8 <tabview_win_shared_init+0x318>)
  41bd24:	4798      	blx	r3
  41bd26:	2801      	cmp	r0, #1
  41bd28:	f240 8102 	bls.w	41bf30 <tabview_win_shared_init+0x450>
  41bd2c:	2000      	movs	r0, #0
  41bd2e:	4b30      	ldr	r3, [pc, #192]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bd30:	4798      	blx	r3
  41bd32:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd36:	0040      	lsls	r0, r0, #1
  41bd38:	3050      	adds	r0, #80	; 0x50
  41bd3a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd3e:	f280 8110 	bge.w	41bf62 <tabview_win_shared_init+0x482>
  41bd42:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41bd44:	2110      	movs	r1, #16
  41bd46:	4620      	mov	r0, r4
  41bd48:	4b2a      	ldr	r3, [pc, #168]	; (41bdf4 <tabview_win_shared_init+0x314>)
  41bd4a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bd4c:	4b23      	ldr	r3, [pc, #140]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bd4e:	681c      	ldr	r4, [r3, #0]
  41bd50:	34b4      	adds	r4, #180	; 0xb4
  41bd52:	2000      	movs	r0, #0
  41bd54:	4b28      	ldr	r3, [pc, #160]	; (41bdf8 <tabview_win_shared_init+0x318>)
  41bd56:	4798      	blx	r3
  41bd58:	2801      	cmp	r0, #1
  41bd5a:	f240 8111 	bls.w	41bf80 <tabview_win_shared_init+0x4a0>
  41bd5e:	2000      	movs	r0, #0
  41bd60:	4b23      	ldr	r3, [pc, #140]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bd62:	4798      	blx	r3
  41bd64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd68:	0040      	lsls	r0, r0, #1
  41bd6a:	3050      	adds	r0, #80	; 0x50
  41bd6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd70:	f280 811f 	bge.w	41bfb2 <tabview_win_shared_init+0x4d2>
  41bd74:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41bd76:	2111      	movs	r1, #17
  41bd78:	4620      	mov	r0, r4
  41bd7a:	4b1e      	ldr	r3, [pc, #120]	; (41bdf4 <tabview_win_shared_init+0x314>)
  41bd7c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bd7e:	4b17      	ldr	r3, [pc, #92]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bd80:	681c      	ldr	r4, [r3, #0]
  41bd82:	34b4      	adds	r4, #180	; 0xb4
  41bd84:	2000      	movs	r0, #0
  41bd86:	4b1c      	ldr	r3, [pc, #112]	; (41bdf8 <tabview_win_shared_init+0x318>)
  41bd88:	4798      	blx	r3
  41bd8a:	2801      	cmp	r0, #1
  41bd8c:	f240 8120 	bls.w	41bfd0 <tabview_win_shared_init+0x4f0>
  41bd90:	2000      	movs	r0, #0
  41bd92:	4b17      	ldr	r3, [pc, #92]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bd94:	4798      	blx	r3
  41bd96:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd9a:	0040      	lsls	r0, r0, #1
  41bd9c:	3050      	adds	r0, #80	; 0x50
  41bd9e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bda2:	f280 812e 	bge.w	41c002 <tabview_win_shared_init+0x522>
  41bda6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41bda8:	2112      	movs	r1, #18
  41bdaa:	4620      	mov	r0, r4
  41bdac:	4b11      	ldr	r3, [pc, #68]	; (41bdf4 <tabview_win_shared_init+0x314>)
  41bdae:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bdb0:	4b0a      	ldr	r3, [pc, #40]	; (41bddc <tabview_win_shared_init+0x2fc>)
  41bdb2:	681c      	ldr	r4, [r3, #0]
  41bdb4:	34b4      	adds	r4, #180	; 0xb4
  41bdb6:	2000      	movs	r0, #0
  41bdb8:	4b0f      	ldr	r3, [pc, #60]	; (41bdf8 <tabview_win_shared_init+0x318>)
  41bdba:	4798      	blx	r3
  41bdbc:	2801      	cmp	r0, #1
  41bdbe:	f240 812f 	bls.w	41c020 <tabview_win_shared_init+0x540>
  41bdc2:	2000      	movs	r0, #0
  41bdc4:	4b0a      	ldr	r3, [pc, #40]	; (41bdf0 <tabview_win_shared_init+0x310>)
  41bdc6:	4798      	blx	r3
  41bdc8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bdcc:	0040      	lsls	r0, r0, #1
  41bdce:	3050      	adds	r0, #80	; 0x50
  41bdd0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bdd4:	f280 813d 	bge.w	41c052 <tabview_win_shared_init+0x572>
  41bdd8:	2201      	movs	r2, #1
  41bdda:	e00f      	b.n	41bdfc <tabview_win_shared_init+0x31c>
  41bddc:	20414824 	.word	0x20414824
  41bde0:	00418951 	.word	0x00418951
  41bde4:	0040a4d9 	.word	0x0040a4d9
  41bde8:	20414828 	.word	0x20414828
  41bdec:	0040a349 	.word	0x0040a349
  41bdf0:	00414d4d 	.word	0x00414d4d
  41bdf4:	0040a1b9 	.word	0x0040a1b9
  41bdf8:	00414d6d 	.word	0x00414d6d
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41bdfc:	2113      	movs	r1, #19
  41bdfe:	4620      	mov	r0, r4
  41be00:	4baf      	ldr	r3, [pc, #700]	; (41c0c0 <tabview_win_shared_init+0x5e0>)
  41be02:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41be04:	4baf      	ldr	r3, [pc, #700]	; (41c0c4 <tabview_win_shared_init+0x5e4>)
  41be06:	681c      	ldr	r4, [r3, #0]
  41be08:	34b4      	adds	r4, #180	; 0xb4
  41be0a:	2000      	movs	r0, #0
  41be0c:	4bae      	ldr	r3, [pc, #696]	; (41c0c8 <tabview_win_shared_init+0x5e8>)
  41be0e:	4798      	blx	r3
  41be10:	2801      	cmp	r0, #1
  41be12:	f240 812d 	bls.w	41c070 <tabview_win_shared_init+0x590>
  41be16:	2000      	movs	r0, #0
  41be18:	4bac      	ldr	r3, [pc, #688]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41be1a:	4798      	blx	r3
  41be1c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be20:	0040      	lsls	r0, r0, #1
  41be22:	3050      	adds	r0, #80	; 0x50
  41be24:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be28:	f280 813b 	bge.w	41c0a2 <tabview_win_shared_init+0x5c2>
  41be2c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41be2e:	2114      	movs	r1, #20
  41be30:	4620      	mov	r0, r4
  41be32:	4ba3      	ldr	r3, [pc, #652]	; (41c0c0 <tabview_win_shared_init+0x5e0>)
  41be34:	4798      	blx	r3
  41be36:	bd70      	pop	{r4, r5, r6, pc}
  41be38:	f04f 0200 	mov.w	r2, #0
  41be3c:	2303      	movs	r3, #3
  41be3e:	f363 0202 	bfi	r2, r3, #0, #3
  41be42:	230b      	movs	r3, #11
  41be44:	f363 02c7 	bfi	r2, r3, #3, #5
  41be48:	230e      	movs	r3, #14
  41be4a:	f363 220c 	bfi	r2, r3, #8, #5
  41be4e:	f36f 324f 	bfc	r2, #13, #3
  41be52:	e65b      	b.n	41bb0c <tabview_win_shared_init+0x2c>
  41be54:	f04f 0207 	mov.w	r2, #7
  41be58:	231c      	movs	r3, #28
  41be5a:	f363 02c7 	bfi	r2, r3, #3, #5
  41be5e:	231d      	movs	r3, #29
  41be60:	f363 220c 	bfi	r2, r3, #8, #5
  41be64:	2302      	movs	r3, #2
  41be66:	f363 324f 	bfi	r2, r3, #13, #3
  41be6a:	e66a      	b.n	41bb42 <tabview_win_shared_init+0x62>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41be6c:	2000      	movs	r0, #0
  41be6e:	4b97      	ldr	r3, [pc, #604]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41be70:	4798      	blx	r3
  41be72:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41be76:	3050      	adds	r0, #80	; 0x50
  41be78:	4b95      	ldr	r3, [pc, #596]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41be7a:	fb83 2300 	smull	r2, r3, r3, r0
  41be7e:	17c2      	asrs	r2, r0, #31
  41be80:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41be84:	b212      	sxth	r2, r2
  41be86:	e681      	b.n	41bb8c <tabview_win_shared_init+0xac>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41be88:	2000      	movs	r0, #0
  41be8a:	4b90      	ldr	r3, [pc, #576]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41be8c:	4798      	blx	r3
  41be8e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41be92:	3050      	adds	r0, #80	; 0x50
  41be94:	4b8e      	ldr	r3, [pc, #568]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41be96:	fb83 2300 	smull	r2, r3, r3, r0
  41be9a:	17c2      	asrs	r2, r0, #31
  41be9c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bea0:	b212      	sxth	r2, r2
  41bea2:	e685      	b.n	41bbb0 <tabview_win_shared_init+0xd0>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bea4:	2000      	movs	r0, #0
  41bea6:	4b89      	ldr	r3, [pc, #548]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bea8:	4798      	blx	r3
  41beaa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41beae:	3050      	adds	r0, #80	; 0x50
  41beb0:	4b87      	ldr	r3, [pc, #540]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41beb2:	fb83 2300 	smull	r2, r3, r3, r0
  41beb6:	17c2      	asrs	r2, r0, #31
  41beb8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bebc:	b212      	sxth	r2, r2
  41bebe:	e689      	b.n	41bbd4 <tabview_win_shared_init+0xf4>
  41bec0:	f04f 0207 	mov.w	r2, #7
  41bec4:	231c      	movs	r3, #28
  41bec6:	f363 02c7 	bfi	r2, r3, #3, #5
  41beca:	231d      	movs	r3, #29
  41becc:	f363 220c 	bfi	r2, r3, #8, #5
  41bed0:	2302      	movs	r3, #2
  41bed2:	f363 324f 	bfi	r2, r3, #13, #3
  41bed6:	e6b7      	b.n	41bc48 <tabview_win_shared_init+0x168>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41bed8:	2000      	movs	r0, #0
  41beda:	4b7c      	ldr	r3, [pc, #496]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bedc:	4798      	blx	r3
  41bede:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bee2:	0080      	lsls	r0, r0, #2
  41bee4:	3050      	adds	r0, #80	; 0x50
  41bee6:	4b7a      	ldr	r3, [pc, #488]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41bee8:	fb83 2300 	smull	r2, r3, r3, r0
  41beec:	17c2      	asrs	r2, r0, #31
  41beee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bef2:	b212      	sxth	r2, r2
  41bef4:	e6bb      	b.n	41bc6e <tabview_win_shared_init+0x18e>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41bef6:	2000      	movs	r0, #0
  41bef8:	4b74      	ldr	r3, [pc, #464]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41befa:	4798      	blx	r3
  41befc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bf00:	0080      	lsls	r0, r0, #2
  41bf02:	3050      	adds	r0, #80	; 0x50
  41bf04:	4b72      	ldr	r3, [pc, #456]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41bf06:	fb83 2300 	smull	r2, r3, r3, r0
  41bf0a:	17c2      	asrs	r2, r0, #31
  41bf0c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf10:	b212      	sxth	r2, r2
  41bf12:	e6bf      	b.n	41bc94 <tabview_win_shared_init+0x1b4>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41bf14:	2000      	movs	r0, #0
  41bf16:	4b6d      	ldr	r3, [pc, #436]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bf18:	4798      	blx	r3
  41bf1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bf1e:	3050      	adds	r0, #80	; 0x50
  41bf20:	4b6b      	ldr	r3, [pc, #428]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41bf22:	fb83 2300 	smull	r2, r3, r3, r0
  41bf26:	17c2      	asrs	r2, r0, #31
  41bf28:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf2c:	b212      	sxth	r2, r2
  41bf2e:	e6e6      	b.n	41bcfe <tabview_win_shared_init+0x21e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bf30:	2000      	movs	r0, #0
  41bf32:	4b66      	ldr	r3, [pc, #408]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bf34:	4798      	blx	r3
  41bf36:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf3a:	3050      	adds	r0, #80	; 0x50
  41bf3c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bf40:	da01      	bge.n	41bf46 <tabview_win_shared_init+0x466>
  41bf42:	2201      	movs	r2, #1
  41bf44:	e6fe      	b.n	41bd44 <tabview_win_shared_init+0x264>
  41bf46:	2000      	movs	r0, #0
  41bf48:	4b60      	ldr	r3, [pc, #384]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bf4a:	4798      	blx	r3
  41bf4c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf50:	3050      	adds	r0, #80	; 0x50
  41bf52:	4b5f      	ldr	r3, [pc, #380]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41bf54:	fb83 2300 	smull	r2, r3, r3, r0
  41bf58:	17c2      	asrs	r2, r0, #31
  41bf5a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf5e:	b212      	sxth	r2, r2
  41bf60:	e6f0      	b.n	41bd44 <tabview_win_shared_init+0x264>
  41bf62:	2000      	movs	r0, #0
  41bf64:	4b59      	ldr	r3, [pc, #356]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bf66:	4798      	blx	r3
  41bf68:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf6c:	0040      	lsls	r0, r0, #1
  41bf6e:	3050      	adds	r0, #80	; 0x50
  41bf70:	4b57      	ldr	r3, [pc, #348]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41bf72:	fb83 2300 	smull	r2, r3, r3, r0
  41bf76:	17c2      	asrs	r2, r0, #31
  41bf78:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf7c:	b212      	sxth	r2, r2
  41bf7e:	e6e1      	b.n	41bd44 <tabview_win_shared_init+0x264>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bf80:	2000      	movs	r0, #0
  41bf82:	4b52      	ldr	r3, [pc, #328]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bf84:	4798      	blx	r3
  41bf86:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf8a:	3050      	adds	r0, #80	; 0x50
  41bf8c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bf90:	da01      	bge.n	41bf96 <tabview_win_shared_init+0x4b6>
  41bf92:	2201      	movs	r2, #1
  41bf94:	e6ef      	b.n	41bd76 <tabview_win_shared_init+0x296>
  41bf96:	2000      	movs	r0, #0
  41bf98:	4b4c      	ldr	r3, [pc, #304]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bf9a:	4798      	blx	r3
  41bf9c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bfa0:	3050      	adds	r0, #80	; 0x50
  41bfa2:	4b4b      	ldr	r3, [pc, #300]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41bfa4:	fb83 2300 	smull	r2, r3, r3, r0
  41bfa8:	17c2      	asrs	r2, r0, #31
  41bfaa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bfae:	b212      	sxth	r2, r2
  41bfb0:	e6e1      	b.n	41bd76 <tabview_win_shared_init+0x296>
  41bfb2:	2000      	movs	r0, #0
  41bfb4:	4b45      	ldr	r3, [pc, #276]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bfb6:	4798      	blx	r3
  41bfb8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bfbc:	0040      	lsls	r0, r0, #1
  41bfbe:	3050      	adds	r0, #80	; 0x50
  41bfc0:	4b43      	ldr	r3, [pc, #268]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41bfc2:	fb83 2300 	smull	r2, r3, r3, r0
  41bfc6:	17c2      	asrs	r2, r0, #31
  41bfc8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bfcc:	b212      	sxth	r2, r2
  41bfce:	e6d2      	b.n	41bd76 <tabview_win_shared_init+0x296>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bfd0:	2000      	movs	r0, #0
  41bfd2:	4b3e      	ldr	r3, [pc, #248]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bfd4:	4798      	blx	r3
  41bfd6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bfda:	3050      	adds	r0, #80	; 0x50
  41bfdc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bfe0:	da01      	bge.n	41bfe6 <tabview_win_shared_init+0x506>
  41bfe2:	2201      	movs	r2, #1
  41bfe4:	e6e0      	b.n	41bda8 <tabview_win_shared_init+0x2c8>
  41bfe6:	2000      	movs	r0, #0
  41bfe8:	4b38      	ldr	r3, [pc, #224]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41bfea:	4798      	blx	r3
  41bfec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bff0:	3050      	adds	r0, #80	; 0x50
  41bff2:	4b37      	ldr	r3, [pc, #220]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41bff4:	fb83 2300 	smull	r2, r3, r3, r0
  41bff8:	17c2      	asrs	r2, r0, #31
  41bffa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bffe:	b212      	sxth	r2, r2
  41c000:	e6d2      	b.n	41bda8 <tabview_win_shared_init+0x2c8>
  41c002:	2000      	movs	r0, #0
  41c004:	4b31      	ldr	r3, [pc, #196]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41c006:	4798      	blx	r3
  41c008:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c00c:	0040      	lsls	r0, r0, #1
  41c00e:	3050      	adds	r0, #80	; 0x50
  41c010:	4b2f      	ldr	r3, [pc, #188]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41c012:	fb83 2300 	smull	r2, r3, r3, r0
  41c016:	17c2      	asrs	r2, r0, #31
  41c018:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c01c:	b212      	sxth	r2, r2
  41c01e:	e6c3      	b.n	41bda8 <tabview_win_shared_init+0x2c8>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c020:	2000      	movs	r0, #0
  41c022:	4b2a      	ldr	r3, [pc, #168]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41c024:	4798      	blx	r3
  41c026:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c02a:	3050      	adds	r0, #80	; 0x50
  41c02c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c030:	da01      	bge.n	41c036 <tabview_win_shared_init+0x556>
  41c032:	2201      	movs	r2, #1
  41c034:	e6e2      	b.n	41bdfc <tabview_win_shared_init+0x31c>
  41c036:	2000      	movs	r0, #0
  41c038:	4b24      	ldr	r3, [pc, #144]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41c03a:	4798      	blx	r3
  41c03c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c040:	3050      	adds	r0, #80	; 0x50
  41c042:	4b23      	ldr	r3, [pc, #140]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41c044:	fb83 2300 	smull	r2, r3, r3, r0
  41c048:	17c2      	asrs	r2, r0, #31
  41c04a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c04e:	b212      	sxth	r2, r2
  41c050:	e6d4      	b.n	41bdfc <tabview_win_shared_init+0x31c>
  41c052:	2000      	movs	r0, #0
  41c054:	4b1d      	ldr	r3, [pc, #116]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41c056:	4798      	blx	r3
  41c058:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c05c:	0040      	lsls	r0, r0, #1
  41c05e:	3050      	adds	r0, #80	; 0x50
  41c060:	4b1b      	ldr	r3, [pc, #108]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41c062:	fb83 2300 	smull	r2, r3, r3, r0
  41c066:	17c2      	asrs	r2, r0, #31
  41c068:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c06c:	b212      	sxth	r2, r2
  41c06e:	e6c5      	b.n	41bdfc <tabview_win_shared_init+0x31c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c070:	2000      	movs	r0, #0
  41c072:	4b16      	ldr	r3, [pc, #88]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41c074:	4798      	blx	r3
  41c076:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c07a:	3050      	adds	r0, #80	; 0x50
  41c07c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c080:	da01      	bge.n	41c086 <tabview_win_shared_init+0x5a6>
  41c082:	2201      	movs	r2, #1
  41c084:	e6d3      	b.n	41be2e <tabview_win_shared_init+0x34e>
  41c086:	2000      	movs	r0, #0
  41c088:	4b10      	ldr	r3, [pc, #64]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41c08a:	4798      	blx	r3
  41c08c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c090:	3050      	adds	r0, #80	; 0x50
  41c092:	4b0f      	ldr	r3, [pc, #60]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41c094:	fb83 2300 	smull	r2, r3, r3, r0
  41c098:	17c2      	asrs	r2, r0, #31
  41c09a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c09e:	b212      	sxth	r2, r2
  41c0a0:	e6c5      	b.n	41be2e <tabview_win_shared_init+0x34e>
  41c0a2:	2000      	movs	r0, #0
  41c0a4:	4b09      	ldr	r3, [pc, #36]	; (41c0cc <tabview_win_shared_init+0x5ec>)
  41c0a6:	4798      	blx	r3
  41c0a8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c0ac:	0040      	lsls	r0, r0, #1
  41c0ae:	3050      	adds	r0, #80	; 0x50
  41c0b0:	4b07      	ldr	r3, [pc, #28]	; (41c0d0 <tabview_win_shared_init+0x5f0>)
  41c0b2:	fb83 2300 	smull	r2, r3, r3, r0
  41c0b6:	17c2      	asrs	r2, r0, #31
  41c0b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c0bc:	b212      	sxth	r2, r2
  41c0be:	e6b6      	b.n	41be2e <tabview_win_shared_init+0x34e>
  41c0c0:	0040a1b9 	.word	0x0040a1b9
  41c0c4:	20414824 	.word	0x20414824
  41c0c8:	00414d6d 	.word	0x00414d6d
  41c0cc:	00414d4d 	.word	0x00414d4d
  41c0d0:	66666667 	.word	0x66666667

0041c0d4 <led_init>:
{
  41c0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->led);
  41c0d8:	4c3a      	ldr	r4, [pc, #232]	; (41c1c4 <led_init+0xf0>)
  41c0da:	6820      	ldr	r0, [r4, #0]
  41c0dc:	3070      	adds	r0, #112	; 0x70
  41c0de:	4b3a      	ldr	r3, [pc, #232]	; (41c1c8 <led_init+0xf4>)
  41c0e0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
  41c0e2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41c0e4:	22ff      	movs	r2, #255	; 0xff
  41c0e6:	212c      	movs	r1, #44	; 0x2c
  41c0e8:	3070      	adds	r0, #112	; 0x70
  41c0ea:	4d38      	ldr	r5, [pc, #224]	; (41c1cc <led_init+0xf8>)
  41c0ec:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41c0ee:	6820      	ldr	r0, [r4, #0]
  41c0f0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 41c1e0 <led_init+0x10c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c0f4:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  41c0f8:	2129      	movs	r1, #41	; 0x29
  41c0fa:	3070      	adds	r0, #112	; 0x70
  41c0fc:	4f34      	ldr	r7, [pc, #208]	; (41c1d0 <led_init+0xfc>)
  41c0fe:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
  41c100:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c102:	2202      	movs	r2, #2
  41c104:	2130      	movs	r1, #48	; 0x30
  41c106:	3070      	adds	r0, #112	; 0x70
  41c108:	4e32      	ldr	r6, [pc, #200]	; (41c1d4 <led_init+0x100>)
  41c10a:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
  41c10c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41c10e:	227f      	movs	r2, #127	; 0x7f
  41c110:	213c      	movs	r1, #60	; 0x3c
  41c112:	3070      	adds	r0, #112	; 0x70
  41c114:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
  41c116:	6825      	ldr	r5, [r4, #0]
  41c118:	3570      	adds	r5, #112	; 0x70
  41c11a:	214c      	movs	r1, #76	; 0x4c
  41c11c:	f8b8 000c 	ldrh.w	r0, [r8, #12]
  41c120:	4b2d      	ldr	r3, [pc, #180]	; (41c1d8 <led_init+0x104>)
  41c122:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c124:	4602      	mov	r2, r0
  41c126:	2139      	movs	r1, #57	; 0x39
  41c128:	4628      	mov	r0, r5
  41c12a:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41c12c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41c12e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41c132:	2101      	movs	r1, #1
  41c134:	3070      	adds	r0, #112	; 0x70
  41c136:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41c138:	6824      	ldr	r4, [r4, #0]
  41c13a:	3470      	adds	r4, #112	; 0x70
  41c13c:	2000      	movs	r0, #0
  41c13e:	4b27      	ldr	r3, [pc, #156]	; (41c1dc <led_init+0x108>)
  41c140:	4798      	blx	r3
  41c142:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c146:	3050      	adds	r0, #80	; 0x50
  41c148:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c14c:	da1e      	bge.n	41c18c <led_init+0xb8>
  41c14e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41c150:	2150      	movs	r1, #80	; 0x50
  41c152:	4620      	mov	r0, r4
  41c154:	4b1f      	ldr	r3, [pc, #124]	; (41c1d4 <led_init+0x100>)
  41c156:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41c158:	4c1a      	ldr	r4, [pc, #104]	; (41c1c4 <led_init+0xf0>)
  41c15a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41c15c:	4b20      	ldr	r3, [pc, #128]	; (41c1e0 <led_init+0x10c>)
  41c15e:	899a      	ldrh	r2, [r3, #12]
  41c160:	2159      	movs	r1, #89	; 0x59
  41c162:	3070      	adds	r0, #112	; 0x70
  41c164:	4b1a      	ldr	r3, [pc, #104]	; (41c1d0 <led_init+0xfc>)
  41c166:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41c168:	6824      	ldr	r4, [r4, #0]
  41c16a:	3470      	adds	r4, #112	; 0x70
  41c16c:	2000      	movs	r0, #0
  41c16e:	4b1b      	ldr	r3, [pc, #108]	; (41c1dc <led_init+0x108>)
  41c170:	4798      	blx	r3
  41c172:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c176:	3050      	adds	r0, #80	; 0x50
  41c178:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c17c:	da14      	bge.n	41c1a8 <led_init+0xd4>
  41c17e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  41c180:	2153      	movs	r1, #83	; 0x53
  41c182:	4620      	mov	r0, r4
  41c184:	4b13      	ldr	r3, [pc, #76]	; (41c1d4 <led_init+0x100>)
  41c186:	4798      	blx	r3
  41c188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41c18c:	2000      	movs	r0, #0
  41c18e:	4b13      	ldr	r3, [pc, #76]	; (41c1dc <led_init+0x108>)
  41c190:	4798      	blx	r3
  41c192:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c196:	3050      	adds	r0, #80	; 0x50
  41c198:	4b12      	ldr	r3, [pc, #72]	; (41c1e4 <led_init+0x110>)
  41c19a:	fb83 2300 	smull	r2, r3, r3, r0
  41c19e:	17c2      	asrs	r2, r0, #31
  41c1a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c1a4:	b212      	sxth	r2, r2
  41c1a6:	e7d3      	b.n	41c150 <led_init+0x7c>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41c1a8:	2000      	movs	r0, #0
  41c1aa:	4b0c      	ldr	r3, [pc, #48]	; (41c1dc <led_init+0x108>)
  41c1ac:	4798      	blx	r3
  41c1ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c1b2:	3050      	adds	r0, #80	; 0x50
  41c1b4:	4b0b      	ldr	r3, [pc, #44]	; (41c1e4 <led_init+0x110>)
  41c1b6:	fb83 2300 	smull	r2, r3, r3, r0
  41c1ba:	17c2      	asrs	r2, r0, #31
  41c1bc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c1c0:	b212      	sxth	r2, r2
  41c1c2:	e7dd      	b.n	41c180 <led_init+0xac>
  41c1c4:	20414824 	.word	0x20414824
  41c1c8:	00418951 	.word	0x00418951
  41c1cc:	0040a4d9 	.word	0x0040a4d9
  41c1d0:	0040a349 	.word	0x0040a349
  41c1d4:	0040a1b9 	.word	0x0040a1b9
  41c1d8:	00415d71 	.word	0x00415d71
  41c1dc:	00414d4d 	.word	0x00414d4d
  41c1e0:	20414828 	.word	0x20414828
  41c1e4:	66666667 	.word	0x66666667

0041c1e8 <basic_init>:
{
  41c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->scr);
  41c1ea:	4cc2      	ldr	r4, [pc, #776]	; (41c4f4 <basic_init+0x30c>)
  41c1ec:	6820      	ldr	r0, [r4, #0]
  41c1ee:	4bc2      	ldr	r3, [pc, #776]	; (41c4f8 <basic_init+0x310>)
  41c1f0:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41c1f2:	22ff      	movs	r2, #255	; 0xff
  41c1f4:	212c      	movs	r1, #44	; 0x2c
  41c1f6:	6820      	ldr	r0, [r4, #0]
  41c1f8:	4bc0      	ldr	r3, [pc, #768]	; (41c4fc <basic_init+0x314>)
  41c1fa:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
  41c1fc:	6820      	ldr	r0, [r4, #0]
  41c1fe:	4bc0      	ldr	r3, [pc, #768]	; (41c500 <basic_init+0x318>)
  41c200:	6a1b      	ldr	r3, [r3, #32]
  41c202:	f013 0f02 	tst.w	r3, #2
  41c206:	f000 8742 	beq.w	41d08e <basic_init+0xea6>
  41c20a:	f04f 0207 	mov.w	r2, #7
  41c20e:	231d      	movs	r3, #29
  41c210:	f363 02c7 	bfi	r2, r3, #3, #5
  41c214:	231e      	movs	r3, #30
  41c216:	f363 220c 	bfi	r2, r3, #8, #5
  41c21a:	2303      	movs	r3, #3
  41c21c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c220:	2129      	movs	r1, #41	; 0x29
  41c222:	4bb8      	ldr	r3, [pc, #736]	; (41c504 <basic_init+0x31c>)
  41c224:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41c226:	4bb3      	ldr	r3, [pc, #716]	; (41c4f4 <basic_init+0x30c>)
  41c228:	6818      	ldr	r0, [r3, #0]
  41c22a:	4bb5      	ldr	r3, [pc, #724]	; (41c500 <basic_init+0x318>)
  41c22c:	6a1b      	ldr	r3, [r3, #32]
  41c22e:	f013 0f02 	tst.w	r3, #2
  41c232:	f000 873b 	beq.w	41d0ac <basic_init+0xec4>
  41c236:	f04f 0200 	mov.w	r2, #0
  41c23a:	2301      	movs	r3, #1
  41c23c:	f363 0202 	bfi	r2, r3, #0, #3
  41c240:	2307      	movs	r3, #7
  41c242:	f363 02c7 	bfi	r2, r3, #3, #5
  41c246:	2308      	movs	r3, #8
  41c248:	f363 220c 	bfi	r2, r3, #8, #5
  41c24c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c250:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c254:	f248 0189 	movw	r1, #32905	; 0x8089
  41c258:	4baa      	ldr	r3, [pc, #680]	; (41c504 <basic_init+0x31c>)
  41c25a:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41c25c:	4ba5      	ldr	r3, [pc, #660]	; (41c4f4 <basic_init+0x30c>)
  41c25e:	6818      	ldr	r0, [r3, #0]
  41c260:	4ba7      	ldr	r3, [pc, #668]	; (41c500 <basic_init+0x318>)
  41c262:	6a1b      	ldr	r3, [r3, #32]
  41c264:	f013 0f02 	tst.w	r3, #2
  41c268:	f000 872d 	beq.w	41d0c6 <basic_init+0xede>
  41c26c:	f04f 0200 	mov.w	r2, #0
  41c270:	2301      	movs	r3, #1
  41c272:	f363 0202 	bfi	r2, r3, #0, #3
  41c276:	2307      	movs	r3, #7
  41c278:	f363 02c7 	bfi	r2, r3, #3, #5
  41c27c:	2308      	movs	r3, #8
  41c27e:	f363 220c 	bfi	r2, r3, #8, #5
  41c282:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c286:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41c28a:	2179      	movs	r1, #121	; 0x79
  41c28c:	4b9d      	ldr	r3, [pc, #628]	; (41c504 <basic_init+0x31c>)
  41c28e:	4798      	blx	r3
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41c290:	4b98      	ldr	r3, [pc, #608]	; (41c4f4 <basic_init+0x30c>)
  41c292:	6818      	ldr	r0, [r3, #0]
  41c294:	4b9a      	ldr	r3, [pc, #616]	; (41c500 <basic_init+0x318>)
  41c296:	6a1b      	ldr	r3, [r3, #32]
  41c298:	f013 0f02 	tst.w	r3, #2
  41c29c:	f000 8720 	beq.w	41d0e0 <basic_init+0xef8>
  41c2a0:	f04f 0200 	mov.w	r2, #0
  41c2a4:	2301      	movs	r3, #1
  41c2a6:	f363 0202 	bfi	r2, r3, #0, #3
  41c2aa:	2307      	movs	r3, #7
  41c2ac:	f363 02c7 	bfi	r2, r3, #3, #5
  41c2b0:	2308      	movs	r3, #8
  41c2b2:	f363 220c 	bfi	r2, r3, #8, #5
  41c2b6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c2ba:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  41c2be:	f248 018a 	movw	r1, #32906	; 0x808a
  41c2c2:	4e90      	ldr	r6, [pc, #576]	; (41c504 <basic_init+0x31c>)
  41c2c4:	47b0      	blx	r6
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
  41c2c6:	4c8b      	ldr	r4, [pc, #556]	; (41c4f4 <basic_init+0x30c>)
  41c2c8:	4d8d      	ldr	r5, [pc, #564]	; (41c500 <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  41c2ca:	89aa      	ldrh	r2, [r5, #12]
  41c2cc:	f248 018b 	movw	r1, #32907	; 0x808b
  41c2d0:	6820      	ldr	r0, [r4, #0]
  41c2d2:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41c2d4:	696a      	ldr	r2, [r5, #20]
  41c2d6:	217e      	movs	r1, #126	; 0x7e
  41c2d8:	6820      	ldr	r0, [r4, #0]
  41c2da:	4b8b      	ldr	r3, [pc, #556]	; (41c508 <basic_init+0x320>)
  41c2dc:	4798      	blx	r3
    style_init_reset(&styles->bg);
  41c2de:	6820      	ldr	r0, [r4, #0]
  41c2e0:	3004      	adds	r0, #4
  41c2e2:	4b85      	ldr	r3, [pc, #532]	; (41c4f8 <basic_init+0x310>)
  41c2e4:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41c2e6:	6824      	ldr	r4, [r4, #0]
  41c2e8:	3404      	adds	r4, #4
  41c2ea:	2000      	movs	r0, #0
  41c2ec:	4b87      	ldr	r3, [pc, #540]	; (41c50c <basic_init+0x324>)
  41c2ee:	4798      	blx	r3
  41c2f0:	300a      	adds	r0, #10
  41c2f2:	00c0      	lsls	r0, r0, #3
  41c2f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c2f8:	f280 86ff 	bge.w	41d0fa <basic_init+0xf12>
  41c2fc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41c2fe:	2101      	movs	r1, #1
  41c300:	4620      	mov	r0, r4
  41c302:	4b83      	ldr	r3, [pc, #524]	; (41c510 <basic_init+0x328>)
  41c304:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41c306:	4c7b      	ldr	r4, [pc, #492]	; (41c4f4 <basic_init+0x30c>)
  41c308:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41c30a:	22ff      	movs	r2, #255	; 0xff
  41c30c:	212c      	movs	r1, #44	; 0x2c
  41c30e:	3004      	adds	r0, #4
  41c310:	4b7a      	ldr	r3, [pc, #488]	; (41c4fc <basic_init+0x314>)
  41c312:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
  41c314:	6820      	ldr	r0, [r4, #0]
  41c316:	3004      	adds	r0, #4
  41c318:	4b79      	ldr	r3, [pc, #484]	; (41c500 <basic_init+0x318>)
  41c31a:	6a1b      	ldr	r3, [r3, #32]
  41c31c:	f013 0f02 	tst.w	r3, #2
  41c320:	f000 86f9 	beq.w	41d116 <basic_init+0xf2e>
  41c324:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c328:	2129      	movs	r1, #41	; 0x29
  41c32a:	4b76      	ldr	r3, [pc, #472]	; (41c504 <basic_init+0x31c>)
  41c32c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41c32e:	4b71      	ldr	r3, [pc, #452]	; (41c4f4 <basic_init+0x30c>)
  41c330:	6818      	ldr	r0, [r3, #0]
  41c332:	3004      	adds	r0, #4
  41c334:	4b72      	ldr	r3, [pc, #456]	; (41c500 <basic_init+0x318>)
  41c336:	6a1b      	ldr	r3, [r3, #32]
  41c338:	f013 0f02 	tst.w	r3, #2
  41c33c:	f000 86fa 	beq.w	41d134 <basic_init+0xf4c>
  41c340:	f04f 0200 	mov.w	r2, #0
  41c344:	2306      	movs	r3, #6
  41c346:	f363 0202 	bfi	r2, r3, #0, #3
  41c34a:	231a      	movs	r3, #26
  41c34c:	f363 02c7 	bfi	r2, r3, #3, #5
  41c350:	231c      	movs	r3, #28
  41c352:	f363 220c 	bfi	r2, r3, #8, #5
  41c356:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c35a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c35e:	2139      	movs	r1, #57	; 0x39
  41c360:	4b68      	ldr	r3, [pc, #416]	; (41c504 <basic_init+0x31c>)
  41c362:	4798      	blx	r3
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41c364:	4b66      	ldr	r3, [pc, #408]	; (41c500 <basic_init+0x318>)
  41c366:	6a1b      	ldr	r3, [r3, #32]
  41c368:	f013 0f20 	tst.w	r3, #32
  41c36c:	f000 86f2 	beq.w	41d154 <basic_init+0xf6c>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
  41c370:	4c60      	ldr	r4, [pc, #384]	; (41c4f4 <basic_init+0x30c>)
  41c372:	6820      	ldr	r0, [r4, #0]
  41c374:	4b62      	ldr	r3, [pc, #392]	; (41c500 <basic_init+0x318>)
  41c376:	89da      	ldrh	r2, [r3, #14]
  41c378:	f240 4139 	movw	r1, #1081	; 0x439
  41c37c:	3004      	adds	r0, #4
  41c37e:	4b61      	ldr	r3, [pc, #388]	; (41c504 <basic_init+0x31c>)
  41c380:	4798      	blx	r3
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41c382:	6824      	ldr	r4, [r4, #0]
  41c384:	3404      	adds	r4, #4
  41c386:	2000      	movs	r0, #0
  41c388:	4b60      	ldr	r3, [pc, #384]	; (41c50c <basic_init+0x324>)
  41c38a:	4798      	blx	r3
  41c38c:	3028      	adds	r0, #40	; 0x28
  41c38e:	0040      	lsls	r0, r0, #1
  41c390:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c394:	f280 86e9 	bge.w	41d16a <basic_init+0xf82>
  41c398:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c39a:	2130      	movs	r1, #48	; 0x30
  41c39c:	4620      	mov	r0, r4
  41c39e:	4d5c      	ldr	r5, [pc, #368]	; (41c510 <basic_init+0x328>)
  41c3a0:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
  41c3a2:	4c54      	ldr	r4, [pc, #336]	; (41c4f4 <basic_init+0x30c>)
  41c3a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41c3a6:	2201      	movs	r2, #1
  41c3a8:	2133      	movs	r1, #51	; 0x33
  41c3aa:	3004      	adds	r0, #4
  41c3ac:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c3ae:	6820      	ldr	r0, [r4, #0]
  41c3b0:	3004      	adds	r0, #4
  41c3b2:	4b53      	ldr	r3, [pc, #332]	; (41c500 <basic_init+0x318>)
  41c3b4:	6a1b      	ldr	r3, [r3, #32]
  41c3b6:	f013 0f02 	tst.w	r3, #2
  41c3ba:	f000 86e4 	beq.w	41d186 <basic_init+0xf9e>
  41c3be:	f04f 0200 	mov.w	r2, #0
  41c3c2:	2301      	movs	r3, #1
  41c3c4:	f363 0202 	bfi	r2, r3, #0, #3
  41c3c8:	2307      	movs	r3, #7
  41c3ca:	f363 02c7 	bfi	r2, r3, #3, #5
  41c3ce:	2308      	movs	r3, #8
  41c3d0:	f363 220c 	bfi	r2, r3, #8, #5
  41c3d4:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c3d8:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c3dc:	f248 0189 	movw	r1, #32905	; 0x8089
  41c3e0:	4b48      	ldr	r3, [pc, #288]	; (41c504 <basic_init+0x31c>)
  41c3e2:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
  41c3e4:	4d43      	ldr	r5, [pc, #268]	; (41c4f4 <basic_init+0x30c>)
  41c3e6:	6828      	ldr	r0, [r5, #0]
  41c3e8:	4c45      	ldr	r4, [pc, #276]	; (41c500 <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41c3ea:	6962      	ldr	r2, [r4, #20]
  41c3ec:	217e      	movs	r1, #126	; 0x7e
  41c3ee:	3004      	adds	r0, #4
  41c3f0:	4b45      	ldr	r3, [pc, #276]	; (41c508 <basic_init+0x320>)
  41c3f2:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c3f4:	6828      	ldr	r0, [r5, #0]
  41c3f6:	3004      	adds	r0, #4
  41c3f8:	6a23      	ldr	r3, [r4, #32]
  41c3fa:	f013 0f02 	tst.w	r3, #2
  41c3fe:	f000 86c6 	beq.w	41d18e <basic_init+0xfa6>
  41c402:	f04f 0200 	mov.w	r2, #0
  41c406:	2301      	movs	r3, #1
  41c408:	f363 0202 	bfi	r2, r3, #0, #3
  41c40c:	2307      	movs	r3, #7
  41c40e:	f363 02c7 	bfi	r2, r3, #3, #5
  41c412:	2308      	movs	r3, #8
  41c414:	f363 220c 	bfi	r2, r3, #8, #5
  41c418:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c41c:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41c420:	2179      	movs	r1, #121	; 0x79
  41c422:	4b38      	ldr	r3, [pc, #224]	; (41c504 <basic_init+0x31c>)
  41c424:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c426:	4b33      	ldr	r3, [pc, #204]	; (41c4f4 <basic_init+0x30c>)
  41c428:	6818      	ldr	r0, [r3, #0]
  41c42a:	3004      	adds	r0, #4
  41c42c:	4b34      	ldr	r3, [pc, #208]	; (41c500 <basic_init+0x318>)
  41c42e:	6a1b      	ldr	r3, [r3, #32]
  41c430:	f013 0f02 	tst.w	r3, #2
  41c434:	f000 86af 	beq.w	41d196 <basic_init+0xfae>
  41c438:	f04f 0200 	mov.w	r2, #0
  41c43c:	2301      	movs	r3, #1
  41c43e:	f363 0202 	bfi	r2, r3, #0, #3
  41c442:	2307      	movs	r3, #7
  41c444:	f363 02c7 	bfi	r2, r3, #3, #5
  41c448:	2308      	movs	r3, #8
  41c44a:	f363 220c 	bfi	r2, r3, #8, #5
  41c44e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c452:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41c456:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41c45a:	4b2a      	ldr	r3, [pc, #168]	; (41c504 <basic_init+0x31c>)
  41c45c:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c45e:	4b25      	ldr	r3, [pc, #148]	; (41c4f4 <basic_init+0x30c>)
  41c460:	6818      	ldr	r0, [r3, #0]
  41c462:	3004      	adds	r0, #4
  41c464:	4b26      	ldr	r3, [pc, #152]	; (41c500 <basic_init+0x318>)
  41c466:	6a1b      	ldr	r3, [r3, #32]
  41c468:	f013 0f02 	tst.w	r3, #2
  41c46c:	f000 8697 	beq.w	41d19e <basic_init+0xfb6>
  41c470:	f04f 0200 	mov.w	r2, #0
  41c474:	2301      	movs	r3, #1
  41c476:	f363 0202 	bfi	r2, r3, #0, #3
  41c47a:	2307      	movs	r3, #7
  41c47c:	f363 02c7 	bfi	r2, r3, #3, #5
  41c480:	2308      	movs	r3, #8
  41c482:	f363 220c 	bfi	r2, r3, #8, #5
  41c486:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c48a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41c48e:	2199      	movs	r1, #153	; 0x99
  41c490:	4b1c      	ldr	r3, [pc, #112]	; (41c504 <basic_init+0x31c>)
  41c492:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
  41c494:	4c17      	ldr	r4, [pc, #92]	; (41c4f4 <basic_init+0x30c>)
  41c496:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41c498:	2201      	movs	r2, #1
  41c49a:	2190      	movs	r1, #144	; 0x90
  41c49c:	3004      	adds	r0, #4
  41c49e:	4b1c      	ldr	r3, [pc, #112]	; (41c510 <basic_init+0x328>)
  41c4a0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c4a2:	6825      	ldr	r5, [r4, #0]
  41c4a4:	3504      	adds	r5, #4
  41c4a6:	2000      	movs	r0, #0
  41c4a8:	4b1a      	ldr	r3, [pc, #104]	; (41c514 <basic_init+0x32c>)
  41c4aa:	4798      	blx	r3
  41c4ac:	2801      	cmp	r0, #1
  41c4ae:	f240 867a 	bls.w	41d1a6 <basic_init+0xfbe>
  41c4b2:	2000      	movs	r0, #0
  41c4b4:	4b15      	ldr	r3, [pc, #84]	; (41c50c <basic_init+0x324>)
  41c4b6:	4798      	blx	r3
  41c4b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c4bc:	0040      	lsls	r0, r0, #1
  41c4be:	3050      	adds	r0, #80	; 0x50
  41c4c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c4c4:	f280 868a 	bge.w	41d1dc <basic_init+0xff4>
  41c4c8:	2401      	movs	r4, #1
  41c4ca:	2000      	movs	r0, #0
  41c4cc:	4b0f      	ldr	r3, [pc, #60]	; (41c50c <basic_init+0x324>)
  41c4ce:	4798      	blx	r3
  41c4d0:	3028      	adds	r0, #40	; 0x28
  41c4d2:	0040      	lsls	r0, r0, #1
  41c4d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c4d8:	f280 86a2 	bge.w	41d220 <basic_init+0x1038>
  41c4dc:	2201      	movs	r2, #1
  41c4de:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41c4e0:	b212      	sxth	r2, r2
  41c4e2:	2112      	movs	r1, #18
  41c4e4:	4628      	mov	r0, r5
  41c4e6:	4b0a      	ldr	r3, [pc, #40]	; (41c510 <basic_init+0x328>)
  41c4e8:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c4ea:	4b02      	ldr	r3, [pc, #8]	; (41c4f4 <basic_init+0x30c>)
  41c4ec:	681d      	ldr	r5, [r3, #0]
  41c4ee:	3504      	adds	r5, #4
  41c4f0:	e012      	b.n	41c518 <basic_init+0x330>
  41c4f2:	bf00      	nop
  41c4f4:	20414824 	.word	0x20414824
  41c4f8:	00418951 	.word	0x00418951
  41c4fc:	0040a4d9 	.word	0x0040a4d9
  41c500:	20414828 	.word	0x20414828
  41c504:	0040a349 	.word	0x0040a349
  41c508:	0040a669 	.word	0x0040a669
  41c50c:	00414d4d 	.word	0x00414d4d
  41c510:	0040a1b9 	.word	0x0040a1b9
  41c514:	00414d6d 	.word	0x00414d6d
  41c518:	2000      	movs	r0, #0
  41c51a:	4bc2      	ldr	r3, [pc, #776]	; (41c824 <basic_init+0x63c>)
  41c51c:	4798      	blx	r3
  41c51e:	2801      	cmp	r0, #1
  41c520:	f240 868c 	bls.w	41d23c <basic_init+0x1054>
  41c524:	2000      	movs	r0, #0
  41c526:	4bc0      	ldr	r3, [pc, #768]	; (41c828 <basic_init+0x640>)
  41c528:	4798      	blx	r3
  41c52a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c52e:	0040      	lsls	r0, r0, #1
  41c530:	3050      	adds	r0, #80	; 0x50
  41c532:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c536:	f280 869c 	bge.w	41d272 <basic_init+0x108a>
  41c53a:	2401      	movs	r4, #1
  41c53c:	2000      	movs	r0, #0
  41c53e:	4bba      	ldr	r3, [pc, #744]	; (41c828 <basic_init+0x640>)
  41c540:	4798      	blx	r3
  41c542:	3028      	adds	r0, #40	; 0x28
  41c544:	0040      	lsls	r0, r0, #1
  41c546:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c54a:	f280 86a2 	bge.w	41d292 <basic_init+0x10aa>
  41c54e:	2201      	movs	r2, #1
  41c550:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41c552:	b212      	sxth	r2, r2
  41c554:	2113      	movs	r1, #19
  41c556:	4628      	mov	r0, r5
  41c558:	4bb4      	ldr	r3, [pc, #720]	; (41c82c <basic_init+0x644>)
  41c55a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c55c:	4bb4      	ldr	r3, [pc, #720]	; (41c830 <basic_init+0x648>)
  41c55e:	681d      	ldr	r5, [r3, #0]
  41c560:	3504      	adds	r5, #4
  41c562:	2000      	movs	r0, #0
  41c564:	4baf      	ldr	r3, [pc, #700]	; (41c824 <basic_init+0x63c>)
  41c566:	4798      	blx	r3
  41c568:	2801      	cmp	r0, #1
  41c56a:	f240 86a0 	bls.w	41d2ae <basic_init+0x10c6>
  41c56e:	2000      	movs	r0, #0
  41c570:	4bad      	ldr	r3, [pc, #692]	; (41c828 <basic_init+0x640>)
  41c572:	4798      	blx	r3
  41c574:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c578:	0040      	lsls	r0, r0, #1
  41c57a:	3050      	adds	r0, #80	; 0x50
  41c57c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c580:	f280 86b0 	bge.w	41d2e4 <basic_init+0x10fc>
  41c584:	2401      	movs	r4, #1
  41c586:	2000      	movs	r0, #0
  41c588:	4ba7      	ldr	r3, [pc, #668]	; (41c828 <basic_init+0x640>)
  41c58a:	4798      	blx	r3
  41c58c:	3028      	adds	r0, #40	; 0x28
  41c58e:	0040      	lsls	r0, r0, #1
  41c590:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c594:	f280 86b6 	bge.w	41d304 <basic_init+0x111c>
  41c598:	2201      	movs	r2, #1
  41c59a:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41c59c:	b212      	sxth	r2, r2
  41c59e:	2110      	movs	r1, #16
  41c5a0:	4628      	mov	r0, r5
  41c5a2:	4ba2      	ldr	r3, [pc, #648]	; (41c82c <basic_init+0x644>)
  41c5a4:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c5a6:	4ba2      	ldr	r3, [pc, #648]	; (41c830 <basic_init+0x648>)
  41c5a8:	681d      	ldr	r5, [r3, #0]
  41c5aa:	3504      	adds	r5, #4
  41c5ac:	2000      	movs	r0, #0
  41c5ae:	4b9d      	ldr	r3, [pc, #628]	; (41c824 <basic_init+0x63c>)
  41c5b0:	4798      	blx	r3
  41c5b2:	2801      	cmp	r0, #1
  41c5b4:	f240 86b4 	bls.w	41d320 <basic_init+0x1138>
  41c5b8:	2000      	movs	r0, #0
  41c5ba:	4b9b      	ldr	r3, [pc, #620]	; (41c828 <basic_init+0x640>)
  41c5bc:	4798      	blx	r3
  41c5be:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c5c2:	0040      	lsls	r0, r0, #1
  41c5c4:	3050      	adds	r0, #80	; 0x50
  41c5c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c5ca:	f280 86c4 	bge.w	41d356 <basic_init+0x116e>
  41c5ce:	2401      	movs	r4, #1
  41c5d0:	2000      	movs	r0, #0
  41c5d2:	4b95      	ldr	r3, [pc, #596]	; (41c828 <basic_init+0x640>)
  41c5d4:	4798      	blx	r3
  41c5d6:	3028      	adds	r0, #40	; 0x28
  41c5d8:	0040      	lsls	r0, r0, #1
  41c5da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c5de:	f280 86ca 	bge.w	41d376 <basic_init+0x118e>
  41c5e2:	2201      	movs	r2, #1
  41c5e4:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41c5e6:	b212      	sxth	r2, r2
  41c5e8:	2111      	movs	r1, #17
  41c5ea:	4628      	mov	r0, r5
  41c5ec:	4b8f      	ldr	r3, [pc, #572]	; (41c82c <basic_init+0x644>)
  41c5ee:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41c5f0:	4b8f      	ldr	r3, [pc, #572]	; (41c830 <basic_init+0x648>)
  41c5f2:	681c      	ldr	r4, [r3, #0]
  41c5f4:	3404      	adds	r4, #4
  41c5f6:	2000      	movs	r0, #0
  41c5f8:	4b8a      	ldr	r3, [pc, #552]	; (41c824 <basic_init+0x63c>)
  41c5fa:	4798      	blx	r3
  41c5fc:	2801      	cmp	r0, #1
  41c5fe:	f240 86c8 	bls.w	41d392 <basic_init+0x11aa>
  41c602:	2000      	movs	r0, #0
  41c604:	4b88      	ldr	r3, [pc, #544]	; (41c828 <basic_init+0x640>)
  41c606:	4798      	blx	r3
  41c608:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c60c:	0040      	lsls	r0, r0, #1
  41c60e:	3050      	adds	r0, #80	; 0x50
  41c610:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c614:	f280 86d8 	bge.w	41d3c8 <basic_init+0x11e0>
  41c618:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41c61a:	2114      	movs	r1, #20
  41c61c:	4620      	mov	r0, r4
  41c61e:	4d83      	ldr	r5, [pc, #524]	; (41c82c <basic_init+0x644>)
  41c620:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41c622:	4c83      	ldr	r4, [pc, #524]	; (41c830 <basic_init+0x648>)
  41c624:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41c626:	2200      	movs	r2, #0
  41c628:	21b0      	movs	r1, #176	; 0xb0
  41c62a:	3004      	adds	r0, #4
  41c62c:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
  41c62e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41c630:	2239      	movs	r2, #57	; 0x39
  41c632:	21b7      	movs	r1, #183	; 0xb7
  41c634:	3004      	adds	r0, #4
  41c636:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
  41c638:	6820      	ldr	r0, [r4, #0]
  41c63a:	300c      	adds	r0, #12
  41c63c:	4b7d      	ldr	r3, [pc, #500]	; (41c834 <basic_init+0x64c>)
  41c63e:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
  41c640:	6820      	ldr	r0, [r4, #0]
  41c642:	1d01      	adds	r1, r0, #4
  41c644:	300c      	adds	r0, #12
  41c646:	4b7c      	ldr	r3, [pc, #496]	; (41c838 <basic_init+0x650>)
  41c648:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41c64a:	6820      	ldr	r0, [r4, #0]
  41c64c:	300c      	adds	r0, #12
  41c64e:	4b7b      	ldr	r3, [pc, #492]	; (41c83c <basic_init+0x654>)
  41c650:	6a1b      	ldr	r3, [r3, #32]
  41c652:	f013 0f02 	tst.w	r3, #2
  41c656:	f000 86c7 	beq.w	41d3e8 <basic_init+0x1200>
  41c65a:	f04f 0200 	mov.w	r2, #0
  41c65e:	2306      	movs	r3, #6
  41c660:	f363 0202 	bfi	r2, r3, #0, #3
  41c664:	231a      	movs	r3, #26
  41c666:	f363 02c7 	bfi	r2, r3, #3, #5
  41c66a:	231b      	movs	r3, #27
  41c66c:	f363 220c 	bfi	r2, r3, #8, #5
  41c670:	2305      	movs	r3, #5
  41c672:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c676:	2129      	movs	r1, #41	; 0x29
  41c678:	4b71      	ldr	r3, [pc, #452]	; (41c840 <basic_init+0x658>)
  41c67a:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
  41c67c:	4b6c      	ldr	r3, [pc, #432]	; (41c830 <basic_init+0x648>)
  41c67e:	6818      	ldr	r0, [r3, #0]
  41c680:	300c      	adds	r0, #12
  41c682:	4b6e      	ldr	r3, [pc, #440]	; (41c83c <basic_init+0x654>)
  41c684:	6a1b      	ldr	r3, [r3, #32]
  41c686:	f013 0f02 	tst.w	r3, #2
  41c68a:	f000 86bc 	beq.w	41d406 <basic_init+0x121e>
  41c68e:	f04f 0207 	mov.w	r2, #7
  41c692:	231b      	movs	r3, #27
  41c694:	f363 02c7 	bfi	r2, r3, #3, #5
  41c698:	231d      	movs	r3, #29
  41c69a:	f363 220c 	bfi	r2, r3, #8, #5
  41c69e:	2301      	movs	r3, #1
  41c6a0:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c6a4:	2139      	movs	r1, #57	; 0x39
  41c6a6:	4b66      	ldr	r3, [pc, #408]	; (41c840 <basic_init+0x658>)
  41c6a8:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c6aa:	4b61      	ldr	r3, [pc, #388]	; (41c830 <basic_init+0x648>)
  41c6ac:	6818      	ldr	r0, [r3, #0]
  41c6ae:	300c      	adds	r0, #12
  41c6b0:	4b62      	ldr	r3, [pc, #392]	; (41c83c <basic_init+0x654>)
  41c6b2:	6a1b      	ldr	r3, [r3, #32]
  41c6b4:	f013 0f02 	tst.w	r3, #2
  41c6b8:	f000 86b3 	beq.w	41d422 <basic_init+0x123a>
  41c6bc:	f04f 0200 	mov.w	r2, #0
  41c6c0:	2302      	movs	r3, #2
  41c6c2:	f363 0202 	bfi	r2, r3, #0, #3
  41c6c6:	2306      	movs	r3, #6
  41c6c8:	f363 02c7 	bfi	r2, r3, #3, #5
  41c6cc:	2309      	movs	r3, #9
  41c6ce:	f363 220c 	bfi	r2, r3, #8, #5
  41c6d2:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c6d6:	f248 0189 	movw	r1, #32905	; 0x8089
  41c6da:	4b59      	ldr	r3, [pc, #356]	; (41c840 <basic_init+0x658>)
  41c6dc:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c6de:	4b54      	ldr	r3, [pc, #336]	; (41c830 <basic_init+0x648>)
  41c6e0:	6818      	ldr	r0, [r3, #0]
  41c6e2:	300c      	adds	r0, #12
  41c6e4:	4b55      	ldr	r3, [pc, #340]	; (41c83c <basic_init+0x654>)
  41c6e6:	6a1b      	ldr	r3, [r3, #32]
  41c6e8:	f013 0f02 	tst.w	r3, #2
  41c6ec:	f000 86a9 	beq.w	41d442 <basic_init+0x125a>
  41c6f0:	f04f 0200 	mov.w	r2, #0
  41c6f4:	2302      	movs	r3, #2
  41c6f6:	f363 0202 	bfi	r2, r3, #0, #3
  41c6fa:	2306      	movs	r3, #6
  41c6fc:	f363 02c7 	bfi	r2, r3, #3, #5
  41c700:	2309      	movs	r3, #9
  41c702:	f363 220c 	bfi	r2, r3, #8, #5
  41c706:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41c70a:	2179      	movs	r1, #121	; 0x79
  41c70c:	4b4c      	ldr	r3, [pc, #304]	; (41c840 <basic_init+0x658>)
  41c70e:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c710:	4b47      	ldr	r3, [pc, #284]	; (41c830 <basic_init+0x648>)
  41c712:	6818      	ldr	r0, [r3, #0]
  41c714:	300c      	adds	r0, #12
  41c716:	4b49      	ldr	r3, [pc, #292]	; (41c83c <basic_init+0x654>)
  41c718:	6a1b      	ldr	r3, [r3, #32]
  41c71a:	f013 0f02 	tst.w	r3, #2
  41c71e:	f000 86a0 	beq.w	41d462 <basic_init+0x127a>
  41c722:	f04f 0200 	mov.w	r2, #0
  41c726:	2302      	movs	r3, #2
  41c728:	f363 0202 	bfi	r2, r3, #0, #3
  41c72c:	2306      	movs	r3, #6
  41c72e:	f363 02c7 	bfi	r2, r3, #3, #5
  41c732:	2309      	movs	r3, #9
  41c734:	f363 220c 	bfi	r2, r3, #8, #5
  41c738:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41c73c:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41c740:	4b3f      	ldr	r3, [pc, #252]	; (41c840 <basic_init+0x658>)
  41c742:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c744:	4b3a      	ldr	r3, [pc, #232]	; (41c830 <basic_init+0x648>)
  41c746:	6818      	ldr	r0, [r3, #0]
  41c748:	300c      	adds	r0, #12
  41c74a:	4b3c      	ldr	r3, [pc, #240]	; (41c83c <basic_init+0x654>)
  41c74c:	6a1b      	ldr	r3, [r3, #32]
  41c74e:	f013 0f02 	tst.w	r3, #2
  41c752:	f000 8696 	beq.w	41d482 <basic_init+0x129a>
  41c756:	f04f 0200 	mov.w	r2, #0
  41c75a:	2302      	movs	r3, #2
  41c75c:	f363 0202 	bfi	r2, r3, #0, #3
  41c760:	2306      	movs	r3, #6
  41c762:	f363 02c7 	bfi	r2, r3, #3, #5
  41c766:	2309      	movs	r3, #9
  41c768:	f363 220c 	bfi	r2, r3, #8, #5
  41c76c:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41c770:	2199      	movs	r1, #153	; 0x99
  41c772:	4b33      	ldr	r3, [pc, #204]	; (41c840 <basic_init+0x658>)
  41c774:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
  41c776:	4c2e      	ldr	r4, [pc, #184]	; (41c830 <basic_init+0x648>)
  41c778:	6820      	ldr	r0, [r4, #0]
  41c77a:	3008      	adds	r0, #8
  41c77c:	4b2d      	ldr	r3, [pc, #180]	; (41c834 <basic_init+0x64c>)
  41c77e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
  41c780:	6820      	ldr	r0, [r4, #0]
  41c782:	3008      	adds	r0, #8
  41c784:	4b2d      	ldr	r3, [pc, #180]	; (41c83c <basic_init+0x654>)
  41c786:	6a1b      	ldr	r3, [r3, #32]
  41c788:	f013 0f02 	tst.w	r3, #2
  41c78c:	f000 8689 	beq.w	41d4a2 <basic_init+0x12ba>
  41c790:	f04f 0207 	mov.w	r2, #7
  41c794:	231d      	movs	r3, #29
  41c796:	f363 02c7 	bfi	r2, r3, #3, #5
  41c79a:	f363 220c 	bfi	r2, r3, #8, #5
  41c79e:	2303      	movs	r3, #3
  41c7a0:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c7a4:	f241 0129 	movw	r1, #4137	; 0x1029
  41c7a8:	4d25      	ldr	r5, [pc, #148]	; (41c840 <basic_init+0x658>)
  41c7aa:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
  41c7ac:	4c20      	ldr	r4, [pc, #128]	; (41c830 <basic_init+0x648>)
  41c7ae:	6820      	ldr	r0, [r4, #0]
  41c7b0:	4f22      	ldr	r7, [pc, #136]	; (41c83c <basic_init+0x654>)
  41c7b2:	89ba      	ldrh	r2, [r7, #12]
  41c7b4:	f240 1129 	movw	r1, #297	; 0x129
  41c7b8:	3008      	adds	r0, #8
  41c7ba:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
  41c7bc:	6826      	ldr	r6, [r4, #0]
  41c7be:	3608      	adds	r6, #8
  41c7c0:	2133      	movs	r1, #51	; 0x33
  41c7c2:	89b8      	ldrh	r0, [r7, #12]
  41c7c4:	4b1f      	ldr	r3, [pc, #124]	; (41c844 <basic_init+0x65c>)
  41c7c6:	4798      	blx	r3
  41c7c8:	4602      	mov	r2, r0
  41c7ca:	f241 1129 	movw	r1, #4393	; 0x1129
  41c7ce:	4630      	mov	r0, r6
  41c7d0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
  41c7d2:	6820      	ldr	r0, [r4, #0]
  41c7d4:	3008      	adds	r0, #8
  41c7d6:	6a3b      	ldr	r3, [r7, #32]
  41c7d8:	f013 0f02 	tst.w	r3, #2
  41c7dc:	f000 8671 	beq.w	41d4c2 <basic_init+0x12da>
  41c7e0:	f04f 32ff 	mov.w	r2, #4294967295
  41c7e4:	f242 0129 	movw	r1, #8233	; 0x2029
  41c7e8:	4f15      	ldr	r7, [pc, #84]	; (41c840 <basic_init+0x658>)
  41c7ea:	47b8      	blx	r7
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
  41c7ec:	4c10      	ldr	r4, [pc, #64]	; (41c830 <basic_init+0x648>)
  41c7ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c7f0:	2200      	movs	r2, #0
  41c7f2:	f44f 7198 	mov.w	r1, #304	; 0x130
  41c7f6:	3008      	adds	r0, #8
  41c7f8:	4b0c      	ldr	r3, [pc, #48]	; (41c82c <basic_init+0x644>)
  41c7fa:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
  41c7fc:	6825      	ldr	r5, [r4, #0]
  41c7fe:	3508      	adds	r5, #8
  41c800:	4e0e      	ldr	r6, [pc, #56]	; (41c83c <basic_init+0x654>)
  41c802:	2133      	movs	r1, #51	; 0x33
  41c804:	89b0      	ldrh	r0, [r6, #12]
  41c806:	4b0f      	ldr	r3, [pc, #60]	; (41c844 <basic_init+0x65c>)
  41c808:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c80a:	4602      	mov	r2, r0
  41c80c:	f241 2139 	movw	r1, #4665	; 0x1239
  41c810:	4628      	mov	r0, r5
  41c812:	47b8      	blx	r7
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
  41c814:	6820      	ldr	r0, [r4, #0]
  41c816:	3008      	adds	r0, #8
  41c818:	6a33      	ldr	r3, [r6, #32]
  41c81a:	f013 0f02 	tst.w	r3, #2
  41c81e:	f000 865f 	beq.w	41d4e0 <basic_init+0x12f8>
  41c822:	e011      	b.n	41c848 <basic_init+0x660>
  41c824:	00414d6d 	.word	0x00414d6d
  41c828:	00414d4d 	.word	0x00414d4d
  41c82c:	0040a1b9 	.word	0x0040a1b9
  41c830:	20414824 	.word	0x20414824
  41c834:	00418951 	.word	0x00418951
  41c838:	0040a055 	.word	0x0040a055
  41c83c:	20414828 	.word	0x20414828
  41c840:	0040a349 	.word	0x0040a349
  41c844:	00415e09 	.word	0x00415e09
  41c848:	f04f 0200 	mov.w	r2, #0
  41c84c:	2306      	movs	r3, #6
  41c84e:	f363 0202 	bfi	r2, r3, #0, #3
  41c852:	2319      	movs	r3, #25
  41c854:	f363 02c7 	bfi	r2, r3, #3, #5
  41c858:	f363 220c 	bfi	r2, r3, #8, #5
  41c85c:	2303      	movs	r3, #3
  41c85e:	f363 324f 	bfi	r2, r3, #13, #3
  41c862:	f241 0139 	movw	r1, #4153	; 0x1039
  41c866:	4bc9      	ldr	r3, [pc, #804]	; (41cb8c <basic_init+0x9a4>)
  41c868:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
  41c86a:	4bc9      	ldr	r3, [pc, #804]	; (41cb90 <basic_init+0x9a8>)
  41c86c:	6818      	ldr	r0, [r3, #0]
  41c86e:	3008      	adds	r0, #8
  41c870:	4bc8      	ldr	r3, [pc, #800]	; (41cb94 <basic_init+0x9ac>)
  41c872:	6a1b      	ldr	r3, [r3, #32]
  41c874:	f013 0f02 	tst.w	r3, #2
  41c878:	f000 8642 	beq.w	41d500 <basic_init+0x1318>
  41c87c:	f04f 0200 	mov.w	r2, #0
  41c880:	2301      	movs	r3, #1
  41c882:	f363 0202 	bfi	r2, r3, #0, #3
  41c886:	2307      	movs	r3, #7
  41c888:	f363 02c7 	bfi	r2, r3, #3, #5
  41c88c:	2308      	movs	r3, #8
  41c88e:	f363 220c 	bfi	r2, r3, #8, #5
  41c892:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c896:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41c89a:	f240 1139 	movw	r1, #313	; 0x139
  41c89e:	4bbb      	ldr	r3, [pc, #748]	; (41cb8c <basic_init+0x9a4>)
  41c8a0:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
  41c8a2:	4bbb      	ldr	r3, [pc, #748]	; (41cb90 <basic_init+0x9a8>)
  41c8a4:	6818      	ldr	r0, [r3, #0]
  41c8a6:	3008      	adds	r0, #8
  41c8a8:	4bba      	ldr	r3, [pc, #744]	; (41cb94 <basic_init+0x9ac>)
  41c8aa:	6a1b      	ldr	r3, [r3, #32]
  41c8ac:	f013 0f02 	tst.w	r3, #2
  41c8b0:	f000 8636 	beq.w	41d520 <basic_init+0x1338>
  41c8b4:	f04f 0200 	mov.w	r2, #0
  41c8b8:	2301      	movs	r3, #1
  41c8ba:	f363 0202 	bfi	r2, r3, #0, #3
  41c8be:	2307      	movs	r3, #7
  41c8c0:	f363 02c7 	bfi	r2, r3, #3, #5
  41c8c4:	2308      	movs	r3, #8
  41c8c6:	f363 220c 	bfi	r2, r3, #8, #5
  41c8ca:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c8ce:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41c8d2:	f241 1139 	movw	r1, #4409	; 0x1139
  41c8d6:	4bad      	ldr	r3, [pc, #692]	; (41cb8c <basic_init+0x9a4>)
  41c8d8:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
  41c8da:	4bad      	ldr	r3, [pc, #692]	; (41cb90 <basic_init+0x9a8>)
  41c8dc:	6818      	ldr	r0, [r3, #0]
  41c8de:	3008      	adds	r0, #8
  41c8e0:	4bac      	ldr	r3, [pc, #688]	; (41cb94 <basic_init+0x9ac>)
  41c8e2:	6a1b      	ldr	r3, [r3, #32]
  41c8e4:	f013 0f02 	tst.w	r3, #2
  41c8e8:	f000 862a 	beq.w	41d540 <basic_init+0x1358>
  41c8ec:	f04f 0200 	mov.w	r2, #0
  41c8f0:	2306      	movs	r3, #6
  41c8f2:	f363 0202 	bfi	r2, r3, #0, #3
  41c8f6:	231a      	movs	r3, #26
  41c8f8:	f363 02c7 	bfi	r2, r3, #3, #5
  41c8fc:	231c      	movs	r3, #28
  41c8fe:	f363 220c 	bfi	r2, r3, #8, #5
  41c902:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c906:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41c90a:	f242 0139 	movw	r1, #8249	; 0x2039
  41c90e:	4b9f      	ldr	r3, [pc, #636]	; (41cb8c <basic_init+0x9a4>)
  41c910:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41c912:	4b9f      	ldr	r3, [pc, #636]	; (41cb90 <basic_init+0x9a8>)
  41c914:	6818      	ldr	r0, [r3, #0]
  41c916:	3008      	adds	r0, #8
  41c918:	4b9e      	ldr	r3, [pc, #632]	; (41cb94 <basic_init+0x9ac>)
  41c91a:	6a1b      	ldr	r3, [r3, #32]
  41c91c:	f013 0f02 	tst.w	r3, #2
  41c920:	f000 861e 	beq.w	41d560 <basic_init+0x1378>
  41c924:	f04f 0200 	mov.w	r2, #0
  41c928:	2301      	movs	r3, #1
  41c92a:	f363 0202 	bfi	r2, r3, #0, #3
  41c92e:	2307      	movs	r3, #7
  41c930:	f363 02c7 	bfi	r2, r3, #3, #5
  41c934:	2308      	movs	r3, #8
  41c936:	f363 220c 	bfi	r2, r3, #8, #5
  41c93a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c93e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c942:	f249 0189 	movw	r1, #37001	; 0x9089
  41c946:	4b91      	ldr	r3, [pc, #580]	; (41cb8c <basic_init+0x9a4>)
  41c948:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41c94a:	4b91      	ldr	r3, [pc, #580]	; (41cb90 <basic_init+0x9a8>)
  41c94c:	6818      	ldr	r0, [r3, #0]
  41c94e:	3008      	adds	r0, #8
  41c950:	4b90      	ldr	r3, [pc, #576]	; (41cb94 <basic_init+0x9ac>)
  41c952:	6a1b      	ldr	r3, [r3, #32]
  41c954:	f013 0f02 	tst.w	r3, #2
  41c958:	f000 8606 	beq.w	41d568 <basic_init+0x1380>
  41c95c:	f04f 32ff 	mov.w	r2, #4294967295
  41c960:	f248 1189 	movw	r1, #33161	; 0x8189
  41c964:	4b89      	ldr	r3, [pc, #548]	; (41cb8c <basic_init+0x9a4>)
  41c966:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41c968:	4b89      	ldr	r3, [pc, #548]	; (41cb90 <basic_init+0x9a8>)
  41c96a:	6818      	ldr	r0, [r3, #0]
  41c96c:	3008      	adds	r0, #8
  41c96e:	4b89      	ldr	r3, [pc, #548]	; (41cb94 <basic_init+0x9ac>)
  41c970:	6a1b      	ldr	r3, [r3, #32]
  41c972:	f013 0f02 	tst.w	r3, #2
  41c976:	f000 85fb 	beq.w	41d570 <basic_init+0x1388>
  41c97a:	f04f 32ff 	mov.w	r2, #4294967295
  41c97e:	f249 1189 	movw	r1, #37257	; 0x9189
  41c982:	4b82      	ldr	r3, [pc, #520]	; (41cb8c <basic_init+0x9a4>)
  41c984:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41c986:	4b82      	ldr	r3, [pc, #520]	; (41cb90 <basic_init+0x9a8>)
  41c988:	6818      	ldr	r0, [r3, #0]
  41c98a:	3008      	adds	r0, #8
  41c98c:	4b81      	ldr	r3, [pc, #516]	; (41cb94 <basic_init+0x9ac>)
  41c98e:	6a1b      	ldr	r3, [r3, #32]
  41c990:	f013 0f02 	tst.w	r3, #2
  41c994:	f000 85f0 	beq.w	41d578 <basic_init+0x1390>
  41c998:	f04f 0200 	mov.w	r2, #0
  41c99c:	2305      	movs	r3, #5
  41c99e:	f363 0202 	bfi	r2, r3, #0, #3
  41c9a2:	2315      	movs	r3, #21
  41c9a4:	f363 02c7 	bfi	r2, r3, #3, #5
  41c9a8:	f363 220c 	bfi	r2, r3, #8, #5
  41c9ac:	2302      	movs	r3, #2
  41c9ae:	f363 324f 	bfi	r2, r3, #13, #3
  41c9b2:	f24a 0189 	movw	r1, #41097	; 0xa089
  41c9b6:	4b75      	ldr	r3, [pc, #468]	; (41cb8c <basic_init+0x9a4>)
  41c9b8:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41c9ba:	4b75      	ldr	r3, [pc, #468]	; (41cb90 <basic_init+0x9a8>)
  41c9bc:	6818      	ldr	r0, [r3, #0]
  41c9be:	3008      	adds	r0, #8
  41c9c0:	4b74      	ldr	r3, [pc, #464]	; (41cb94 <basic_init+0x9ac>)
  41c9c2:	6a1b      	ldr	r3, [r3, #32]
  41c9c4:	f013 0f02 	tst.w	r3, #2
  41c9c8:	f000 85e5 	beq.w	41d596 <basic_init+0x13ae>
  41c9cc:	f04f 0200 	mov.w	r2, #0
  41c9d0:	2301      	movs	r3, #1
  41c9d2:	f363 0202 	bfi	r2, r3, #0, #3
  41c9d6:	2307      	movs	r3, #7
  41c9d8:	f363 02c7 	bfi	r2, r3, #3, #5
  41c9dc:	2308      	movs	r3, #8
  41c9de:	f363 220c 	bfi	r2, r3, #8, #5
  41c9e2:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c9e6:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41c9ea:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41c9ee:	4b67      	ldr	r3, [pc, #412]	; (41cb8c <basic_init+0x9a4>)
  41c9f0:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41c9f2:	4b67      	ldr	r3, [pc, #412]	; (41cb90 <basic_init+0x9a8>)
  41c9f4:	6818      	ldr	r0, [r3, #0]
  41c9f6:	3008      	adds	r0, #8
  41c9f8:	4b66      	ldr	r3, [pc, #408]	; (41cb94 <basic_init+0x9ac>)
  41c9fa:	6a1b      	ldr	r3, [r3, #32]
  41c9fc:	f013 0f02 	tst.w	r3, #2
  41ca00:	f000 85d2 	beq.w	41d5a8 <basic_init+0x13c0>
  41ca04:	f04f 32ff 	mov.w	r2, #4294967295
  41ca08:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41ca0c:	4b5f      	ldr	r3, [pc, #380]	; (41cb8c <basic_init+0x9a4>)
  41ca0e:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41ca10:	4b5f      	ldr	r3, [pc, #380]	; (41cb90 <basic_init+0x9a8>)
  41ca12:	6818      	ldr	r0, [r3, #0]
  41ca14:	3008      	adds	r0, #8
  41ca16:	4b5f      	ldr	r3, [pc, #380]	; (41cb94 <basic_init+0x9ac>)
  41ca18:	6a1b      	ldr	r3, [r3, #32]
  41ca1a:	f013 0f02 	tst.w	r3, #2
  41ca1e:	f000 85c7 	beq.w	41d5b0 <basic_init+0x13c8>
  41ca22:	f04f 32ff 	mov.w	r2, #4294967295
  41ca26:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41ca2a:	4b58      	ldr	r3, [pc, #352]	; (41cb8c <basic_init+0x9a4>)
  41ca2c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41ca2e:	4b58      	ldr	r3, [pc, #352]	; (41cb90 <basic_init+0x9a8>)
  41ca30:	6818      	ldr	r0, [r3, #0]
  41ca32:	3008      	adds	r0, #8
  41ca34:	4b57      	ldr	r3, [pc, #348]	; (41cb94 <basic_init+0x9ac>)
  41ca36:	6a1b      	ldr	r3, [r3, #32]
  41ca38:	f013 0f02 	tst.w	r3, #2
  41ca3c:	f000 85bc 	beq.w	41d5b8 <basic_init+0x13d0>
  41ca40:	f04f 0200 	mov.w	r2, #0
  41ca44:	2305      	movs	r3, #5
  41ca46:	f363 0202 	bfi	r2, r3, #0, #3
  41ca4a:	2315      	movs	r3, #21
  41ca4c:	f363 02c7 	bfi	r2, r3, #3, #5
  41ca50:	f363 220c 	bfi	r2, r3, #8, #5
  41ca54:	2302      	movs	r3, #2
  41ca56:	f363 324f 	bfi	r2, r3, #13, #3
  41ca5a:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41ca5e:	4b4b      	ldr	r3, [pc, #300]	; (41cb8c <basic_init+0x9a4>)
  41ca60:	4798      	blx	r3
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41ca62:	4c4b      	ldr	r4, [pc, #300]	; (41cb90 <basic_init+0x9a8>)
  41ca64:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41ca66:	2229      	movs	r2, #41	; 0x29
  41ca68:	21b6      	movs	r1, #182	; 0xb6
  41ca6a:	3008      	adds	r0, #8
  41ca6c:	4d4a      	ldr	r5, [pc, #296]	; (41cb98 <basic_init+0x9b0>)
  41ca6e:	47a8      	blx	r5
    style_init_reset(&styles->btn);
  41ca70:	6820      	ldr	r0, [r4, #0]
  41ca72:	3010      	adds	r0, #16
  41ca74:	4b49      	ldr	r3, [pc, #292]	; (41cb9c <basic_init+0x9b4>)
  41ca76:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41ca78:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41ca7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41ca7e:	2101      	movs	r1, #1
  41ca80:	3010      	adds	r0, #16
  41ca82:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41ca84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ca86:	22ff      	movs	r2, #255	; 0xff
  41ca88:	212c      	movs	r1, #44	; 0x2c
  41ca8a:	3010      	adds	r0, #16
  41ca8c:	4b44      	ldr	r3, [pc, #272]	; (41cba0 <basic_init+0x9b8>)
  41ca8e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
  41ca90:	6820      	ldr	r0, [r4, #0]
  41ca92:	3010      	adds	r0, #16
  41ca94:	4b3f      	ldr	r3, [pc, #252]	; (41cb94 <basic_init+0x9ac>)
  41ca96:	6a1b      	ldr	r3, [r3, #32]
  41ca98:	f013 0f02 	tst.w	r3, #2
  41ca9c:	f000 859b 	beq.w	41d5d6 <basic_init+0x13ee>
  41caa0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41caa4:	2129      	movs	r1, #41	; 0x29
  41caa6:	4b39      	ldr	r3, [pc, #228]	; (41cb8c <basic_init+0x9a4>)
  41caa8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
  41caaa:	4b39      	ldr	r3, [pc, #228]	; (41cb90 <basic_init+0x9a8>)
  41caac:	6818      	ldr	r0, [r3, #0]
  41caae:	3010      	adds	r0, #16
  41cab0:	4b38      	ldr	r3, [pc, #224]	; (41cb94 <basic_init+0x9ac>)
  41cab2:	6a1b      	ldr	r3, [r3, #32]
  41cab4:	f013 0f02 	tst.w	r3, #2
  41cab8:	f000 859c 	beq.w	41d5f4 <basic_init+0x140c>
  41cabc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41cac0:	4a34      	ldr	r2, [pc, #208]	; (41cb94 <basic_init+0x9ac>)
  41cac2:	8994      	ldrh	r4, [r2, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41cac4:	f3c4 02c4 	ubfx	r2, r4, #3, #5
  41cac8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  41cacc:	eb02 1102 	add.w	r1, r2, r2, lsl #4
  41cad0:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41cad4:	25cc      	movs	r5, #204	; 0xcc
  41cad6:	fb05 1202 	mla	r2, r5, r2, r1
  41cada:	3280      	adds	r2, #128	; 0x80
  41cadc:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41cae0:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41cae4:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41cae8:	f04f 0200 	mov.w	r2, #0
  41caec:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41caf0:	f004 0607 	and.w	r6, r4, #7
  41caf4:	f3c4 3142 	ubfx	r1, r4, #13, #3
  41caf8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
  41cafc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  41cb00:	eb01 1601 	add.w	r6, r1, r1, lsl #4
  41cb04:	f003 0707 	and.w	r7, r3, #7
  41cb08:	0b59      	lsrs	r1, r3, #13
  41cb0a:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41cb0e:	fb05 6101 	mla	r1, r5, r1, r6
  41cb12:	3180      	adds	r1, #128	; 0x80
  41cb14:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  41cb18:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  41cb1c:	f3c1 6682 	ubfx	r6, r1, #26, #3
  41cb20:	f366 0202 	bfi	r2, r6, #0, #3
  41cb24:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41cb28:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41cb2c:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41cb30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  41cb34:	eb04 1404 	add.w	r4, r4, r4, lsl #4
  41cb38:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41cb3c:	fb05 4303 	mla	r3, r5, r3, r4
  41cb40:	3380      	adds	r3, #128	; 0x80
  41cb42:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41cb46:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41cb4a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41cb4e:	f363 220c 	bfi	r2, r3, #8, #5
  41cb52:	f241 0129 	movw	r1, #4137	; 0x1029
  41cb56:	4d0d      	ldr	r5, [pc, #52]	; (41cb8c <basic_init+0x9a4>)
  41cb58:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
  41cb5a:	4c0d      	ldr	r4, [pc, #52]	; (41cb90 <basic_init+0x9a8>)
  41cb5c:	6820      	ldr	r0, [r4, #0]
  41cb5e:	4f0d      	ldr	r7, [pc, #52]	; (41cb94 <basic_init+0x9ac>)
  41cb60:	89ba      	ldrh	r2, [r7, #12]
  41cb62:	f240 1129 	movw	r1, #297	; 0x129
  41cb66:	3010      	adds	r0, #16
  41cb68:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
  41cb6a:	6826      	ldr	r6, [r4, #0]
  41cb6c:	3610      	adds	r6, #16
  41cb6e:	214c      	movs	r1, #76	; 0x4c
  41cb70:	89b8      	ldrh	r0, [r7, #12]
  41cb72:	4b0c      	ldr	r3, [pc, #48]	; (41cba4 <basic_init+0x9bc>)
  41cb74:	4798      	blx	r3
  41cb76:	4602      	mov	r2, r0
  41cb78:	f241 1129 	movw	r1, #4393	; 0x1129
  41cb7c:	4630      	mov	r0, r6
  41cb7e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
  41cb80:	6820      	ldr	r0, [r4, #0]
  41cb82:	3010      	adds	r0, #16
  41cb84:	6a3b      	ldr	r3, [r7, #32]
  41cb86:	f013 0f02 	tst.w	r3, #2
  41cb8a:	e00d      	b.n	41cba8 <basic_init+0x9c0>
  41cb8c:	0040a349 	.word	0x0040a349
  41cb90:	20414824 	.word	0x20414824
  41cb94:	20414828 	.word	0x20414828
  41cb98:	0040a1b9 	.word	0x0040a1b9
  41cb9c:	00418951 	.word	0x00418951
  41cba0:	0040a4d9 	.word	0x0040a4d9
  41cba4:	00415e09 	.word	0x00415e09
  41cba8:	f000 8575 	beq.w	41d696 <basic_init+0x14ae>
  41cbac:	f04f 32ff 	mov.w	r2, #4294967295
  41cbb0:	f242 0129 	movw	r1, #8233	; 0x2029
  41cbb4:	4bc7      	ldr	r3, [pc, #796]	; (41ced4 <basic_init+0xcec>)
  41cbb6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
  41cbb8:	4bc7      	ldr	r3, [pc, #796]	; (41ced8 <basic_init+0xcf0>)
  41cbba:	6818      	ldr	r0, [r3, #0]
  41cbbc:	3010      	adds	r0, #16
  41cbbe:	4bc7      	ldr	r3, [pc, #796]	; (41cedc <basic_init+0xcf4>)
  41cbc0:	6a1b      	ldr	r3, [r3, #32]
  41cbc2:	f013 0f02 	tst.w	r3, #2
  41cbc6:	f000 8575 	beq.w	41d6b4 <basic_init+0x14cc>
    return LV_COLOR_MAKE(r, g, b);
  41cbca:	f04f 0200 	mov.w	r2, #0
  41cbce:	2306      	movs	r3, #6
  41cbd0:	f363 0202 	bfi	r2, r3, #0, #3
  41cbd4:	2319      	movs	r3, #25
  41cbd6:	f363 02c7 	bfi	r2, r3, #3, #5
  41cbda:	f363 220c 	bfi	r2, r3, #8, #5
  41cbde:	2303      	movs	r3, #3
  41cbe0:	f363 324f 	bfi	r2, r3, #13, #3
  41cbe4:	f242 1129 	movw	r1, #8489	; 0x2129
  41cbe8:	4eba      	ldr	r6, [pc, #744]	; (41ced4 <basic_init+0xcec>)
  41cbea:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
  41cbec:	4dba      	ldr	r5, [pc, #744]	; (41ced8 <basic_init+0xcf0>)
  41cbee:	6828      	ldr	r0, [r5, #0]
  41cbf0:	4cba      	ldr	r4, [pc, #744]	; (41cedc <basic_init+0xcf4>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41cbf2:	89a2      	ldrh	r2, [r4, #12]
  41cbf4:	2139      	movs	r1, #57	; 0x39
  41cbf6:	3010      	adds	r0, #16
  41cbf8:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
  41cbfa:	6828      	ldr	r0, [r5, #0]
  41cbfc:	89a2      	ldrh	r2, [r4, #12]
  41cbfe:	f241 0139 	movw	r1, #4153	; 0x1039
  41cc02:	3010      	adds	r0, #16
  41cc04:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
  41cc06:	6828      	ldr	r0, [r5, #0]
  41cc08:	3010      	adds	r0, #16
  41cc0a:	6a23      	ldr	r3, [r4, #32]
  41cc0c:	f013 0f02 	tst.w	r3, #2
  41cc10:	f000 855f 	beq.w	41d6d2 <basic_init+0x14ea>
  41cc14:	f04f 0200 	mov.w	r2, #0
  41cc18:	2304      	movs	r3, #4
  41cc1a:	f363 0202 	bfi	r2, r3, #0, #3
  41cc1e:	2311      	movs	r3, #17
  41cc20:	f363 02c7 	bfi	r2, r3, #3, #5
  41cc24:	f363 220c 	bfi	r2, r3, #8, #5
  41cc28:	2302      	movs	r3, #2
  41cc2a:	f363 324f 	bfi	r2, r3, #13, #3
  41cc2e:	f242 0139 	movw	r1, #8249	; 0x2039
  41cc32:	4ba8      	ldr	r3, [pc, #672]	; (41ced4 <basic_init+0xcec>)
  41cc34:	4798      	blx	r3
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41cc36:	4ba8      	ldr	r3, [pc, #672]	; (41ced8 <basic_init+0xcf0>)
  41cc38:	681c      	ldr	r4, [r3, #0]
  41cc3a:	3410      	adds	r4, #16
  41cc3c:	2000      	movs	r0, #0
  41cc3e:	4ba8      	ldr	r3, [pc, #672]	; (41cee0 <basic_init+0xcf8>)
  41cc40:	4798      	blx	r3
  41cc42:	3028      	adds	r0, #40	; 0x28
  41cc44:	0040      	lsls	r0, r0, #1
  41cc46:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cc4a:	f280 8550 	bge.w	41d6ee <basic_init+0x1506>
  41cc4e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41cc50:	2130      	movs	r1, #48	; 0x30
  41cc52:	4620      	mov	r0, r4
  41cc54:	4ba3      	ldr	r3, [pc, #652]	; (41cee4 <basic_init+0xcfc>)
  41cc56:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
  41cc58:	4c9f      	ldr	r4, [pc, #636]	; (41ced8 <basic_init+0xcf0>)
  41cc5a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41cc5c:	2200      	movs	r2, #0
  41cc5e:	f44f 719e 	mov.w	r1, #316	; 0x13c
  41cc62:	3010      	adds	r0, #16
  41cc64:	4ba0      	ldr	r3, [pc, #640]	; (41cee8 <basic_init+0xd00>)
  41cc66:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41cc68:	6820      	ldr	r0, [r4, #0]
  41cc6a:	3010      	adds	r0, #16
  41cc6c:	4b9b      	ldr	r3, [pc, #620]	; (41cedc <basic_init+0xcf4>)
  41cc6e:	6a1b      	ldr	r3, [r3, #32]
  41cc70:	f013 0f02 	tst.w	r3, #2
  41cc74:	f000 8549 	beq.w	41d70a <basic_init+0x1522>
  41cc78:	f04f 0200 	mov.w	r2, #0
  41cc7c:	2302      	movs	r3, #2
  41cc7e:	f363 0202 	bfi	r2, r3, #0, #3
  41cc82:	2306      	movs	r3, #6
  41cc84:	f363 02c7 	bfi	r2, r3, #3, #5
  41cc88:	2309      	movs	r3, #9
  41cc8a:	f363 220c 	bfi	r2, r3, #8, #5
  41cc8e:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41cc92:	f248 0189 	movw	r1, #32905	; 0x8089
  41cc96:	4b8f      	ldr	r3, [pc, #572]	; (41ced4 <basic_init+0xcec>)
  41cc98:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41cc9a:	4b8f      	ldr	r3, [pc, #572]	; (41ced8 <basic_init+0xcf0>)
  41cc9c:	6818      	ldr	r0, [r3, #0]
  41cc9e:	3010      	adds	r0, #16
  41cca0:	4b8e      	ldr	r3, [pc, #568]	; (41cedc <basic_init+0xcf4>)
  41cca2:	6a1b      	ldr	r3, [r3, #32]
  41cca4:	f013 0f02 	tst.w	r3, #2
  41cca8:	f000 8533 	beq.w	41d712 <basic_init+0x152a>
  41ccac:	f04f 0200 	mov.w	r2, #0
  41ccb0:	2302      	movs	r3, #2
  41ccb2:	f363 0202 	bfi	r2, r3, #0, #3
  41ccb6:	2306      	movs	r3, #6
  41ccb8:	f363 02c7 	bfi	r2, r3, #3, #5
  41ccbc:	2309      	movs	r3, #9
  41ccbe:	f363 220c 	bfi	r2, r3, #8, #5
  41ccc2:	f36f 324f 	bfc	r2, #13, #3
  41ccc6:	f249 0189 	movw	r1, #37001	; 0x9089
  41ccca:	4d82      	ldr	r5, [pc, #520]	; (41ced4 <basic_init+0xcec>)
  41cccc:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41ccce:	4c82      	ldr	r4, [pc, #520]	; (41ced8 <basic_init+0xcf0>)
  41ccd0:	6820      	ldr	r0, [r4, #0]
  41ccd2:	f04f 32ff 	mov.w	r2, #4294967295
  41ccd6:	f248 1189 	movw	r1, #33161	; 0x8189
  41ccda:	3010      	adds	r0, #16
  41ccdc:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41ccde:	6820      	ldr	r0, [r4, #0]
  41cce0:	f04f 32ff 	mov.w	r2, #4294967295
  41cce4:	f249 1189 	movw	r1, #37257	; 0x9189
  41cce8:	3010      	adds	r0, #16
  41ccea:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41ccec:	6820      	ldr	r0, [r4, #0]
  41ccee:	3010      	adds	r0, #16
  41ccf0:	4b7a      	ldr	r3, [pc, #488]	; (41cedc <basic_init+0xcf4>)
  41ccf2:	6a1b      	ldr	r3, [r3, #32]
  41ccf4:	f013 0f02 	tst.w	r3, #2
  41ccf8:	f000 850f 	beq.w	41d71a <basic_init+0x1532>
  41ccfc:	f04f 0200 	mov.w	r2, #0
  41cd00:	2304      	movs	r3, #4
  41cd02:	f363 0202 	bfi	r2, r3, #0, #3
  41cd06:	2311      	movs	r3, #17
  41cd08:	f363 02c7 	bfi	r2, r3, #3, #5
  41cd0c:	f363 220c 	bfi	r2, r3, #8, #5
  41cd10:	2302      	movs	r3, #2
  41cd12:	f363 324f 	bfi	r2, r3, #13, #3
  41cd16:	f24a 0189 	movw	r1, #41097	; 0xa089
  41cd1a:	4b6e      	ldr	r3, [pc, #440]	; (41ced4 <basic_init+0xcec>)
  41cd1c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41cd1e:	4b6e      	ldr	r3, [pc, #440]	; (41ced8 <basic_init+0xcf0>)
  41cd20:	6818      	ldr	r0, [r3, #0]
  41cd22:	3010      	adds	r0, #16
  41cd24:	4b6d      	ldr	r3, [pc, #436]	; (41cedc <basic_init+0xcf4>)
  41cd26:	6a1b      	ldr	r3, [r3, #32]
  41cd28:	f013 0f02 	tst.w	r3, #2
  41cd2c:	f000 8504 	beq.w	41d738 <basic_init+0x1550>
  41cd30:	f04f 0200 	mov.w	r2, #0
  41cd34:	2302      	movs	r3, #2
  41cd36:	f363 0202 	bfi	r2, r3, #0, #3
  41cd3a:	2306      	movs	r3, #6
  41cd3c:	f363 02c7 	bfi	r2, r3, #3, #5
  41cd40:	2309      	movs	r3, #9
  41cd42:	f363 220c 	bfi	r2, r3, #8, #5
  41cd46:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41cd4a:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41cd4e:	4b61      	ldr	r3, [pc, #388]	; (41ced4 <basic_init+0xcec>)
  41cd50:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41cd52:	4b61      	ldr	r3, [pc, #388]	; (41ced8 <basic_init+0xcf0>)
  41cd54:	6818      	ldr	r0, [r3, #0]
  41cd56:	3010      	adds	r0, #16
  41cd58:	4b60      	ldr	r3, [pc, #384]	; (41cedc <basic_init+0xcf4>)
  41cd5a:	6a1b      	ldr	r3, [r3, #32]
  41cd5c:	f013 0f02 	tst.w	r3, #2
  41cd60:	f000 84ee 	beq.w	41d740 <basic_init+0x1558>
  41cd64:	f04f 0200 	mov.w	r2, #0
  41cd68:	2302      	movs	r3, #2
  41cd6a:	f363 0202 	bfi	r2, r3, #0, #3
  41cd6e:	2306      	movs	r3, #6
  41cd70:	f363 02c7 	bfi	r2, r3, #3, #5
  41cd74:	2309      	movs	r3, #9
  41cd76:	f363 220c 	bfi	r2, r3, #8, #5
  41cd7a:	f36f 324f 	bfc	r2, #13, #3
  41cd7e:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41cd82:	4d54      	ldr	r5, [pc, #336]	; (41ced4 <basic_init+0xcec>)
  41cd84:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41cd86:	4c54      	ldr	r4, [pc, #336]	; (41ced8 <basic_init+0xcf0>)
  41cd88:	6820      	ldr	r0, [r4, #0]
  41cd8a:	f04f 32ff 	mov.w	r2, #4294967295
  41cd8e:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41cd92:	3010      	adds	r0, #16
  41cd94:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41cd96:	6820      	ldr	r0, [r4, #0]
  41cd98:	f04f 32ff 	mov.w	r2, #4294967295
  41cd9c:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41cda0:	3010      	adds	r0, #16
  41cda2:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41cda4:	6820      	ldr	r0, [r4, #0]
  41cda6:	3010      	adds	r0, #16
  41cda8:	4b4c      	ldr	r3, [pc, #304]	; (41cedc <basic_init+0xcf4>)
  41cdaa:	6a1b      	ldr	r3, [r3, #32]
  41cdac:	f013 0f02 	tst.w	r3, #2
  41cdb0:	f000 84ca 	beq.w	41d748 <basic_init+0x1560>
  41cdb4:	f04f 0200 	mov.w	r2, #0
  41cdb8:	2304      	movs	r3, #4
  41cdba:	f363 0202 	bfi	r2, r3, #0, #3
  41cdbe:	2311      	movs	r3, #17
  41cdc0:	f363 02c7 	bfi	r2, r3, #3, #5
  41cdc4:	f363 220c 	bfi	r2, r3, #8, #5
  41cdc8:	2302      	movs	r3, #2
  41cdca:	f363 324f 	bfi	r2, r3, #13, #3
  41cdce:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41cdd2:	4b40      	ldr	r3, [pc, #256]	; (41ced4 <basic_init+0xcec>)
  41cdd4:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41cdd6:	4b40      	ldr	r3, [pc, #256]	; (41ced8 <basic_init+0xcf0>)
  41cdd8:	6818      	ldr	r0, [r3, #0]
  41cdda:	3010      	adds	r0, #16
  41cddc:	4b3f      	ldr	r3, [pc, #252]	; (41cedc <basic_init+0xcf4>)
  41cdde:	6a1b      	ldr	r3, [r3, #32]
  41cde0:	f013 0f02 	tst.w	r3, #2
  41cde4:	f000 84bf 	beq.w	41d766 <basic_init+0x157e>
  41cde8:	f04f 0200 	mov.w	r2, #0
  41cdec:	2302      	movs	r3, #2
  41cdee:	f363 0202 	bfi	r2, r3, #0, #3
  41cdf2:	2306      	movs	r3, #6
  41cdf4:	f363 02c7 	bfi	r2, r3, #3, #5
  41cdf8:	2309      	movs	r3, #9
  41cdfa:	f363 220c 	bfi	r2, r3, #8, #5
  41cdfe:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41ce02:	2179      	movs	r1, #121	; 0x79
  41ce04:	4b33      	ldr	r3, [pc, #204]	; (41ced4 <basic_init+0xcec>)
  41ce06:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41ce08:	4b33      	ldr	r3, [pc, #204]	; (41ced8 <basic_init+0xcf0>)
  41ce0a:	6818      	ldr	r0, [r3, #0]
  41ce0c:	3010      	adds	r0, #16
  41ce0e:	4b33      	ldr	r3, [pc, #204]	; (41cedc <basic_init+0xcf4>)
  41ce10:	6a1b      	ldr	r3, [r3, #32]
  41ce12:	f013 0f02 	tst.w	r3, #2
  41ce16:	f000 84aa 	beq.w	41d76e <basic_init+0x1586>
  41ce1a:	f04f 0200 	mov.w	r2, #0
  41ce1e:	2302      	movs	r3, #2
  41ce20:	f363 0202 	bfi	r2, r3, #0, #3
  41ce24:	2306      	movs	r3, #6
  41ce26:	f363 02c7 	bfi	r2, r3, #3, #5
  41ce2a:	2309      	movs	r3, #9
  41ce2c:	f363 220c 	bfi	r2, r3, #8, #5
  41ce30:	f36f 324f 	bfc	r2, #13, #3
  41ce34:	f241 0179 	movw	r1, #4217	; 0x1079
  41ce38:	4d26      	ldr	r5, [pc, #152]	; (41ced4 <basic_init+0xcec>)
  41ce3a:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41ce3c:	4c26      	ldr	r4, [pc, #152]	; (41ced8 <basic_init+0xcf0>)
  41ce3e:	6820      	ldr	r0, [r4, #0]
  41ce40:	f04f 32ff 	mov.w	r2, #4294967295
  41ce44:	f240 1179 	movw	r1, #377	; 0x179
  41ce48:	3010      	adds	r0, #16
  41ce4a:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41ce4c:	6820      	ldr	r0, [r4, #0]
  41ce4e:	f04f 32ff 	mov.w	r2, #4294967295
  41ce52:	f241 1179 	movw	r1, #4473	; 0x1179
  41ce56:	3010      	adds	r0, #16
  41ce58:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41ce5a:	6820      	ldr	r0, [r4, #0]
  41ce5c:	3010      	adds	r0, #16
  41ce5e:	4b1f      	ldr	r3, [pc, #124]	; (41cedc <basic_init+0xcf4>)
  41ce60:	6a1b      	ldr	r3, [r3, #32]
  41ce62:	f013 0f02 	tst.w	r3, #2
  41ce66:	f000 8486 	beq.w	41d776 <basic_init+0x158e>
  41ce6a:	f04f 0200 	mov.w	r2, #0
  41ce6e:	2304      	movs	r3, #4
  41ce70:	f363 0202 	bfi	r2, r3, #0, #3
  41ce74:	2311      	movs	r3, #17
  41ce76:	f363 02c7 	bfi	r2, r3, #3, #5
  41ce7a:	f363 220c 	bfi	r2, r3, #8, #5
  41ce7e:	2302      	movs	r3, #2
  41ce80:	f363 324f 	bfi	r2, r3, #13, #3
  41ce84:	f242 0179 	movw	r1, #8313	; 0x2079
  41ce88:	4b12      	ldr	r3, [pc, #72]	; (41ced4 <basic_init+0xcec>)
  41ce8a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41ce8c:	4b12      	ldr	r3, [pc, #72]	; (41ced8 <basic_init+0xcf0>)
  41ce8e:	681c      	ldr	r4, [r3, #0]
  41ce90:	3410      	adds	r4, #16
  41ce92:	2000      	movs	r0, #0
  41ce94:	4b12      	ldr	r3, [pc, #72]	; (41cee0 <basic_init+0xcf8>)
  41ce96:	4798      	blx	r3
  41ce98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ce9c:	00c0      	lsls	r0, r0, #3
  41ce9e:	3050      	adds	r0, #80	; 0x50
  41cea0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cea4:	f280 8476 	bge.w	41d794 <basic_init+0x15ac>
  41cea8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ceaa:	2112      	movs	r1, #18
  41ceac:	4620      	mov	r0, r4
  41ceae:	4b0d      	ldr	r3, [pc, #52]	; (41cee4 <basic_init+0xcfc>)
  41ceb0:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41ceb2:	4b09      	ldr	r3, [pc, #36]	; (41ced8 <basic_init+0xcf0>)
  41ceb4:	681c      	ldr	r4, [r3, #0]
  41ceb6:	3410      	adds	r4, #16
  41ceb8:	2000      	movs	r0, #0
  41ceba:	4b09      	ldr	r3, [pc, #36]	; (41cee0 <basic_init+0xcf8>)
  41cebc:	4798      	blx	r3
  41cebe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cec2:	00c0      	lsls	r0, r0, #3
  41cec4:	3050      	adds	r0, #80	; 0x50
  41cec6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ceca:	f280 8473 	bge.w	41d7b4 <basic_init+0x15cc>
  41cece:	2201      	movs	r2, #1
  41ced0:	e00c      	b.n	41ceec <basic_init+0xd04>
  41ced2:	bf00      	nop
  41ced4:	0040a349 	.word	0x0040a349
  41ced8:	20414824 	.word	0x20414824
  41cedc:	20414828 	.word	0x20414828
  41cee0:	00414d4d 	.word	0x00414d4d
  41cee4:	0040a1b9 	.word	0x0040a1b9
  41cee8:	0040a4d9 	.word	0x0040a4d9
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ceec:	2113      	movs	r1, #19
  41ceee:	4620      	mov	r0, r4
  41cef0:	4bc2      	ldr	r3, [pc, #776]	; (41d1fc <basic_init+0x1014>)
  41cef2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41cef4:	4bc2      	ldr	r3, [pc, #776]	; (41d200 <basic_init+0x1018>)
  41cef6:	681c      	ldr	r4, [r3, #0]
  41cef8:	3410      	adds	r4, #16
  41cefa:	2000      	movs	r0, #0
  41cefc:	4bc1      	ldr	r3, [pc, #772]	; (41d204 <basic_init+0x101c>)
  41cefe:	4798      	blx	r3
  41cf00:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf04:	3050      	adds	r0, #80	; 0x50
  41cf06:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cf0a:	f280 8463 	bge.w	41d7d4 <basic_init+0x15ec>
  41cf0e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41cf10:	2110      	movs	r1, #16
  41cf12:	4620      	mov	r0, r4
  41cf14:	4bb9      	ldr	r3, [pc, #740]	; (41d1fc <basic_init+0x1014>)
  41cf16:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41cf18:	4bb9      	ldr	r3, [pc, #740]	; (41d200 <basic_init+0x1018>)
  41cf1a:	681c      	ldr	r4, [r3, #0]
  41cf1c:	3410      	adds	r4, #16
  41cf1e:	2000      	movs	r0, #0
  41cf20:	4bb8      	ldr	r3, [pc, #736]	; (41d204 <basic_init+0x101c>)
  41cf22:	4798      	blx	r3
  41cf24:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf28:	3050      	adds	r0, #80	; 0x50
  41cf2a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cf2e:	f280 8460 	bge.w	41d7f2 <basic_init+0x160a>
  41cf32:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41cf34:	2111      	movs	r1, #17
  41cf36:	4620      	mov	r0, r4
  41cf38:	4bb0      	ldr	r3, [pc, #704]	; (41d1fc <basic_init+0x1014>)
  41cf3a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41cf3c:	4bb0      	ldr	r3, [pc, #704]	; (41d200 <basic_init+0x1018>)
  41cf3e:	681c      	ldr	r4, [r3, #0]
  41cf40:	3410      	adds	r4, #16
  41cf42:	2000      	movs	r0, #0
  41cf44:	4baf      	ldr	r3, [pc, #700]	; (41d204 <basic_init+0x101c>)
  41cf46:	4798      	blx	r3
  41cf48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cf4c:	0080      	lsls	r0, r0, #2
  41cf4e:	3050      	adds	r0, #80	; 0x50
  41cf50:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cf54:	f280 845c 	bge.w	41d810 <basic_init+0x1628>
  41cf58:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41cf5a:	2114      	movs	r1, #20
  41cf5c:	4620      	mov	r0, r4
  41cf5e:	4ba7      	ldr	r3, [pc, #668]	; (41d1fc <basic_init+0x1014>)
  41cf60:	4798      	blx	r3
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41cf62:	4ba7      	ldr	r3, [pc, #668]	; (41d200 <basic_init+0x1018>)
  41cf64:	681c      	ldr	r4, [r3, #0]
  41cf66:	3410      	adds	r4, #16
  41cf68:	4ba7      	ldr	r3, [pc, #668]	; (41d208 <basic_init+0x1020>)
  41cf6a:	6a1b      	ldr	r3, [r3, #32]
  41cf6c:	f013 0f20 	tst.w	r3, #32
  41cf70:	f000 845e 	beq.w	41d830 <basic_init+0x1648>
  41cf74:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41cf76:	2140      	movs	r1, #64	; 0x40
  41cf78:	4620      	mov	r0, r4
  41cf7a:	4da0      	ldr	r5, [pc, #640]	; (41d1fc <basic_init+0x1014>)
  41cf7c:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
  41cf7e:	4ca0      	ldr	r4, [pc, #640]	; (41d200 <basic_init+0x1018>)
  41cf80:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41cf82:	2200      	movs	r2, #0
  41cf84:	214c      	movs	r1, #76	; 0x4c
  41cf86:	3010      	adds	r0, #16
  41cf88:	4ea0      	ldr	r6, [pc, #640]	; (41d20c <basic_init+0x1024>)
  41cf8a:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
  41cf8c:	6820      	ldr	r0, [r4, #0]
  41cf8e:	227f      	movs	r2, #127	; 0x7f
  41cf90:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41cf94:	3010      	adds	r0, #16
  41cf96:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
  41cf98:	6820      	ldr	r0, [r4, #0]
  41cf9a:	4f9b      	ldr	r7, [pc, #620]	; (41d208 <basic_init+0x1020>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41cf9c:	89ba      	ldrh	r2, [r7, #12]
  41cf9e:	2149      	movs	r1, #73	; 0x49
  41cfa0:	3010      	adds	r0, #16
  41cfa2:	4e9b      	ldr	r6, [pc, #620]	; (41d210 <basic_init+0x1028>)
  41cfa4:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
  41cfa6:	6820      	ldr	r0, [r4, #0]
  41cfa8:	89fa      	ldrh	r2, [r7, #14]
  41cfaa:	f240 4149 	movw	r1, #1097	; 0x449
  41cfae:	3010      	adds	r0, #16
  41cfb0:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41cfb2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41cfb4:	2200      	movs	r2, #0
  41cfb6:	21b0      	movs	r1, #176	; 0xb0
  41cfb8:	3010      	adds	r0, #16
  41cfba:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
  41cfbc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  41cfbe:	223c      	movs	r2, #60	; 0x3c
  41cfc0:	21b5      	movs	r1, #181	; 0xb5
  41cfc2:	3010      	adds	r0, #16
  41cfc4:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41cfc6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41cfc8:	2229      	movs	r2, #41	; 0x29
  41cfca:	21b6      	movs	r1, #182	; 0xb6
  41cfcc:	3010      	adds	r0, #16
  41cfce:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41cfd0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41cfd2:	224c      	movs	r2, #76	; 0x4c
  41cfd4:	21b7      	movs	r1, #183	; 0xb7
  41cfd6:	3010      	adds	r0, #16
  41cfd8:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41cfda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  41cfdc:	2200      	movs	r2, #0
  41cfde:	21b1      	movs	r1, #177	; 0xb1
  41cfe0:	3010      	adds	r0, #16
  41cfe2:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
  41cfe4:	6820      	ldr	r0, [r4, #0]
  41cfe6:	2200      	movs	r2, #0
  41cfe8:	f241 01b1 	movw	r1, #4273	; 0x10b1
  41cfec:	3010      	adds	r0, #16
  41cfee:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
  41cff0:	6820      	ldr	r0, [r4, #0]
  41cff2:	3014      	adds	r0, #20
  41cff4:	4b87      	ldr	r3, [pc, #540]	; (41d214 <basic_init+0x102c>)
  41cff6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41cff8:	6824      	ldr	r4, [r4, #0]
  41cffa:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41cffc:	2000      	movs	r0, #0
  41cffe:	4b86      	ldr	r3, [pc, #536]	; (41d218 <basic_init+0x1030>)
  41d000:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d002:	2801      	cmp	r0, #1
  41d004:	f240 842d 	bls.w	41d862 <basic_init+0x167a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d008:	2000      	movs	r0, #0
  41d00a:	4b7e      	ldr	r3, [pc, #504]	; (41d204 <basic_init+0x101c>)
  41d00c:	4798      	blx	r3
  41d00e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d012:	00c0      	lsls	r0, r0, #3
  41d014:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d016:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d01a:	f280 843f 	bge.w	41d89c <basic_init+0x16b4>
  41d01e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d020:	2114      	movs	r1, #20
  41d022:	4620      	mov	r0, r4
  41d024:	4b75      	ldr	r3, [pc, #468]	; (41d1fc <basic_init+0x1014>)
  41d026:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
  41d028:	4b75      	ldr	r3, [pc, #468]	; (41d200 <basic_init+0x1018>)
  41d02a:	6818      	ldr	r0, [r3, #0]
  41d02c:	3018      	adds	r0, #24
  41d02e:	4b79      	ldr	r3, [pc, #484]	; (41d214 <basic_init+0x102c>)
  41d030:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41d032:	2000      	movs	r0, #0
  41d034:	4b78      	ldr	r3, [pc, #480]	; (41d218 <basic_init+0x1030>)
  41d036:	4798      	blx	r3
  41d038:	2801      	cmp	r0, #1
  41d03a:	f240 843f 	bls.w	41d8bc <basic_init+0x16d4>
  41d03e:	2000      	movs	r0, #0
  41d040:	4b70      	ldr	r3, [pc, #448]	; (41d204 <basic_init+0x101c>)
  41d042:	4798      	blx	r3
  41d044:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d048:	0080      	lsls	r0, r0, #2
  41d04a:	3050      	adds	r0, #80	; 0x50
  41d04c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d050:	f280 8451 	bge.w	41d8f6 <basic_init+0x170e>
  41d054:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41d056:	4e6a      	ldr	r6, [pc, #424]	; (41d200 <basic_init+0x1018>)
  41d058:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41d05a:	4622      	mov	r2, r4
  41d05c:	2112      	movs	r1, #18
  41d05e:	3018      	adds	r0, #24
  41d060:	4d66      	ldr	r5, [pc, #408]	; (41d1fc <basic_init+0x1014>)
  41d062:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41d064:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d066:	4622      	mov	r2, r4
  41d068:	2113      	movs	r1, #19
  41d06a:	3018      	adds	r0, #24
  41d06c:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41d06e:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d070:	4622      	mov	r2, r4
  41d072:	2110      	movs	r1, #16
  41d074:	3018      	adds	r0, #24
  41d076:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41d078:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41d07a:	4622      	mov	r2, r4
  41d07c:	2111      	movs	r1, #17
  41d07e:	3018      	adds	r0, #24
  41d080:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41d082:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d084:	4622      	mov	r2, r4
  41d086:	2114      	movs	r1, #20
  41d088:	3018      	adds	r0, #24
  41d08a:	47a8      	blx	r5
  41d08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41d08e:	2302      	movs	r3, #2
  41d090:	f04f 0200 	mov.w	r2, #0
  41d094:	f363 0202 	bfi	r2, r3, #0, #3
  41d098:	2108      	movs	r1, #8
  41d09a:	f361 02c7 	bfi	r2, r1, #3, #5
  41d09e:	210b      	movs	r1, #11
  41d0a0:	f361 220c 	bfi	r2, r1, #8, #5
  41d0a4:	f363 324f 	bfi	r2, r3, #13, #3
  41d0a8:	f7ff b8ba 	b.w	41c220 <basic_init+0x38>
  41d0ac:	f04f 0207 	mov.w	r2, #7
  41d0b0:	231c      	movs	r3, #28
  41d0b2:	f363 02c7 	bfi	r2, r3, #3, #5
  41d0b6:	231d      	movs	r3, #29
  41d0b8:	f363 220c 	bfi	r2, r3, #8, #5
  41d0bc:	2302      	movs	r3, #2
  41d0be:	f363 324f 	bfi	r2, r3, #13, #3
  41d0c2:	f7ff b8c7 	b.w	41c254 <basic_init+0x6c>
  41d0c6:	f04f 0207 	mov.w	r2, #7
  41d0ca:	231c      	movs	r3, #28
  41d0cc:	f363 02c7 	bfi	r2, r3, #3, #5
  41d0d0:	231d      	movs	r3, #29
  41d0d2:	f363 220c 	bfi	r2, r3, #8, #5
  41d0d6:	2302      	movs	r3, #2
  41d0d8:	f363 324f 	bfi	r2, r3, #13, #3
  41d0dc:	f7ff b8d5 	b.w	41c28a <basic_init+0xa2>
  41d0e0:	f04f 0207 	mov.w	r2, #7
  41d0e4:	231c      	movs	r3, #28
  41d0e6:	f363 02c7 	bfi	r2, r3, #3, #5
  41d0ea:	231d      	movs	r3, #29
  41d0ec:	f363 220c 	bfi	r2, r3, #8, #5
  41d0f0:	2302      	movs	r3, #2
  41d0f2:	f363 324f 	bfi	r2, r3, #13, #3
  41d0f6:	f7ff b8e2 	b.w	41c2be <basic_init+0xd6>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41d0fa:	2000      	movs	r0, #0
  41d0fc:	4b41      	ldr	r3, [pc, #260]	; (41d204 <basic_init+0x101c>)
  41d0fe:	4798      	blx	r3
  41d100:	300a      	adds	r0, #10
  41d102:	00c0      	lsls	r0, r0, #3
  41d104:	4b45      	ldr	r3, [pc, #276]	; (41d21c <basic_init+0x1034>)
  41d106:	fb83 2300 	smull	r2, r3, r3, r0
  41d10a:	17c2      	asrs	r2, r0, #31
  41d10c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d110:	b212      	sxth	r2, r2
  41d112:	f7ff b8f4 	b.w	41c2fe <basic_init+0x116>
  41d116:	f04f 0200 	mov.w	r2, #0
  41d11a:	2303      	movs	r3, #3
  41d11c:	f363 0202 	bfi	r2, r3, #0, #3
  41d120:	230b      	movs	r3, #11
  41d122:	f363 02c7 	bfi	r2, r3, #3, #5
  41d126:	230e      	movs	r3, #14
  41d128:	f363 220c 	bfi	r2, r3, #8, #5
  41d12c:	f36f 324f 	bfc	r2, #13, #3
  41d130:	f7ff b8fa 	b.w	41c328 <basic_init+0x140>
  41d134:	f04f 0200 	mov.w	r2, #0
  41d138:	2304      	movs	r3, #4
  41d13a:	f363 0202 	bfi	r2, r3, #0, #3
  41d13e:	2310      	movs	r3, #16
  41d140:	f363 02c7 	bfi	r2, r3, #3, #5
  41d144:	2312      	movs	r3, #18
  41d146:	f363 220c 	bfi	r2, r3, #8, #5
  41d14a:	2302      	movs	r3, #2
  41d14c:	f363 324f 	bfi	r2, r3, #13, #3
  41d150:	f7ff b905 	b.w	41c35e <basic_init+0x176>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41d154:	4b2a      	ldr	r3, [pc, #168]	; (41d200 <basic_init+0x1018>)
  41d156:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41d158:	4b2b      	ldr	r3, [pc, #172]	; (41d208 <basic_init+0x1020>)
  41d15a:	899a      	ldrh	r2, [r3, #12]
  41d15c:	f240 2139 	movw	r1, #569	; 0x239
  41d160:	3004      	adds	r0, #4
  41d162:	4b2b      	ldr	r3, [pc, #172]	; (41d210 <basic_init+0x1028>)
  41d164:	4798      	blx	r3
  41d166:	f7ff b903 	b.w	41c370 <basic_init+0x188>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41d16a:	2000      	movs	r0, #0
  41d16c:	4b25      	ldr	r3, [pc, #148]	; (41d204 <basic_init+0x101c>)
  41d16e:	4798      	blx	r3
  41d170:	3028      	adds	r0, #40	; 0x28
  41d172:	0040      	lsls	r0, r0, #1
  41d174:	4b29      	ldr	r3, [pc, #164]	; (41d21c <basic_init+0x1034>)
  41d176:	fb83 2300 	smull	r2, r3, r3, r0
  41d17a:	17c2      	asrs	r2, r0, #31
  41d17c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d180:	b212      	sxth	r2, r2
  41d182:	f7ff b90a 	b.w	41c39a <basic_init+0x1b2>
  41d186:	f04f 32ff 	mov.w	r2, #4294967295
  41d18a:	f7ff b927 	b.w	41c3dc <basic_init+0x1f4>
  41d18e:	f04f 32ff 	mov.w	r2, #4294967295
  41d192:	f7ff b945 	b.w	41c420 <basic_init+0x238>
  41d196:	f04f 32ff 	mov.w	r2, #4294967295
  41d19a:	f7ff b95c 	b.w	41c456 <basic_init+0x26e>
  41d19e:	f04f 32ff 	mov.w	r2, #4294967295
  41d1a2:	f7ff b974 	b.w	41c48e <basic_init+0x2a6>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d1a6:	2000      	movs	r0, #0
  41d1a8:	4b16      	ldr	r3, [pc, #88]	; (41d204 <basic_init+0x101c>)
  41d1aa:	4798      	blx	r3
  41d1ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d1b0:	3050      	adds	r0, #80	; 0x50
  41d1b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d1b6:	da02      	bge.n	41d1be <basic_init+0xfd6>
  41d1b8:	2401      	movs	r4, #1
  41d1ba:	f7ff b986 	b.w	41c4ca <basic_init+0x2e2>
  41d1be:	2000      	movs	r0, #0
  41d1c0:	4b10      	ldr	r3, [pc, #64]	; (41d204 <basic_init+0x101c>)
  41d1c2:	4798      	blx	r3
  41d1c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d1c8:	3050      	adds	r0, #80	; 0x50
  41d1ca:	4a14      	ldr	r2, [pc, #80]	; (41d21c <basic_init+0x1034>)
  41d1cc:	fb82 3200 	smull	r3, r2, r2, r0
  41d1d0:	17c4      	asrs	r4, r0, #31
  41d1d2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d1d6:	b2a4      	uxth	r4, r4
  41d1d8:	f7ff b977 	b.w	41c4ca <basic_init+0x2e2>
  41d1dc:	2000      	movs	r0, #0
  41d1de:	4b09      	ldr	r3, [pc, #36]	; (41d204 <basic_init+0x101c>)
  41d1e0:	4798      	blx	r3
  41d1e2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d1e6:	0040      	lsls	r0, r0, #1
  41d1e8:	3050      	adds	r0, #80	; 0x50
  41d1ea:	4a0c      	ldr	r2, [pc, #48]	; (41d21c <basic_init+0x1034>)
  41d1ec:	fb82 3200 	smull	r3, r2, r2, r0
  41d1f0:	17c4      	asrs	r4, r0, #31
  41d1f2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d1f6:	b2a4      	uxth	r4, r4
  41d1f8:	f7ff b967 	b.w	41c4ca <basic_init+0x2e2>
  41d1fc:	0040a1b9 	.word	0x0040a1b9
  41d200:	20414824 	.word	0x20414824
  41d204:	00414d4d 	.word	0x00414d4d
  41d208:	20414828 	.word	0x20414828
  41d20c:	0040a4d9 	.word	0x0040a4d9
  41d210:	0040a349 	.word	0x0040a349
  41d214:	00418951 	.word	0x00418951
  41d218:	00414d6d 	.word	0x00414d6d
  41d21c:	66666667 	.word	0x66666667
  41d220:	2000      	movs	r0, #0
  41d222:	4bdf      	ldr	r3, [pc, #892]	; (41d5a0 <basic_init+0x13b8>)
  41d224:	4798      	blx	r3
  41d226:	3028      	adds	r0, #40	; 0x28
  41d228:	0040      	lsls	r0, r0, #1
  41d22a:	4bde      	ldr	r3, [pc, #888]	; (41d5a4 <basic_init+0x13bc>)
  41d22c:	fb83 2300 	smull	r2, r3, r3, r0
  41d230:	17c2      	asrs	r2, r0, #31
  41d232:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d236:	b292      	uxth	r2, r2
  41d238:	f7ff b951 	b.w	41c4de <basic_init+0x2f6>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d23c:	2000      	movs	r0, #0
  41d23e:	4bd8      	ldr	r3, [pc, #864]	; (41d5a0 <basic_init+0x13b8>)
  41d240:	4798      	blx	r3
  41d242:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d246:	3050      	adds	r0, #80	; 0x50
  41d248:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d24c:	da02      	bge.n	41d254 <basic_init+0x106c>
  41d24e:	2401      	movs	r4, #1
  41d250:	f7ff b974 	b.w	41c53c <basic_init+0x354>
  41d254:	2000      	movs	r0, #0
  41d256:	4bd2      	ldr	r3, [pc, #840]	; (41d5a0 <basic_init+0x13b8>)
  41d258:	4798      	blx	r3
  41d25a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d25e:	3050      	adds	r0, #80	; 0x50
  41d260:	4ad0      	ldr	r2, [pc, #832]	; (41d5a4 <basic_init+0x13bc>)
  41d262:	fb82 3200 	smull	r3, r2, r2, r0
  41d266:	17c4      	asrs	r4, r0, #31
  41d268:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d26c:	b2a4      	uxth	r4, r4
  41d26e:	f7ff b965 	b.w	41c53c <basic_init+0x354>
  41d272:	2000      	movs	r0, #0
  41d274:	4bca      	ldr	r3, [pc, #808]	; (41d5a0 <basic_init+0x13b8>)
  41d276:	4798      	blx	r3
  41d278:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d27c:	0040      	lsls	r0, r0, #1
  41d27e:	3050      	adds	r0, #80	; 0x50
  41d280:	4ac8      	ldr	r2, [pc, #800]	; (41d5a4 <basic_init+0x13bc>)
  41d282:	fb82 3200 	smull	r3, r2, r2, r0
  41d286:	17c4      	asrs	r4, r0, #31
  41d288:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d28c:	b2a4      	uxth	r4, r4
  41d28e:	f7ff b955 	b.w	41c53c <basic_init+0x354>
  41d292:	2000      	movs	r0, #0
  41d294:	4bc2      	ldr	r3, [pc, #776]	; (41d5a0 <basic_init+0x13b8>)
  41d296:	4798      	blx	r3
  41d298:	3028      	adds	r0, #40	; 0x28
  41d29a:	0040      	lsls	r0, r0, #1
  41d29c:	4bc1      	ldr	r3, [pc, #772]	; (41d5a4 <basic_init+0x13bc>)
  41d29e:	fb83 2300 	smull	r2, r3, r3, r0
  41d2a2:	17c2      	asrs	r2, r0, #31
  41d2a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d2a8:	b292      	uxth	r2, r2
  41d2aa:	f7ff b951 	b.w	41c550 <basic_init+0x368>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d2ae:	2000      	movs	r0, #0
  41d2b0:	4bbb      	ldr	r3, [pc, #748]	; (41d5a0 <basic_init+0x13b8>)
  41d2b2:	4798      	blx	r3
  41d2b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d2b8:	3050      	adds	r0, #80	; 0x50
  41d2ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d2be:	da02      	bge.n	41d2c6 <basic_init+0x10de>
  41d2c0:	2401      	movs	r4, #1
  41d2c2:	f7ff b960 	b.w	41c586 <basic_init+0x39e>
  41d2c6:	2000      	movs	r0, #0
  41d2c8:	4bb5      	ldr	r3, [pc, #724]	; (41d5a0 <basic_init+0x13b8>)
  41d2ca:	4798      	blx	r3
  41d2cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d2d0:	3050      	adds	r0, #80	; 0x50
  41d2d2:	4ab4      	ldr	r2, [pc, #720]	; (41d5a4 <basic_init+0x13bc>)
  41d2d4:	fb82 3200 	smull	r3, r2, r2, r0
  41d2d8:	17c4      	asrs	r4, r0, #31
  41d2da:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d2de:	b2a4      	uxth	r4, r4
  41d2e0:	f7ff b951 	b.w	41c586 <basic_init+0x39e>
  41d2e4:	2000      	movs	r0, #0
  41d2e6:	4bae      	ldr	r3, [pc, #696]	; (41d5a0 <basic_init+0x13b8>)
  41d2e8:	4798      	blx	r3
  41d2ea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d2ee:	0040      	lsls	r0, r0, #1
  41d2f0:	3050      	adds	r0, #80	; 0x50
  41d2f2:	4aac      	ldr	r2, [pc, #688]	; (41d5a4 <basic_init+0x13bc>)
  41d2f4:	fb82 3200 	smull	r3, r2, r2, r0
  41d2f8:	17c4      	asrs	r4, r0, #31
  41d2fa:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d2fe:	b2a4      	uxth	r4, r4
  41d300:	f7ff b941 	b.w	41c586 <basic_init+0x39e>
  41d304:	2000      	movs	r0, #0
  41d306:	4ba6      	ldr	r3, [pc, #664]	; (41d5a0 <basic_init+0x13b8>)
  41d308:	4798      	blx	r3
  41d30a:	3028      	adds	r0, #40	; 0x28
  41d30c:	0040      	lsls	r0, r0, #1
  41d30e:	4ba5      	ldr	r3, [pc, #660]	; (41d5a4 <basic_init+0x13bc>)
  41d310:	fb83 2300 	smull	r2, r3, r3, r0
  41d314:	17c2      	asrs	r2, r0, #31
  41d316:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d31a:	b292      	uxth	r2, r2
  41d31c:	f7ff b93d 	b.w	41c59a <basic_init+0x3b2>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d320:	2000      	movs	r0, #0
  41d322:	4b9f      	ldr	r3, [pc, #636]	; (41d5a0 <basic_init+0x13b8>)
  41d324:	4798      	blx	r3
  41d326:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d32a:	3050      	adds	r0, #80	; 0x50
  41d32c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d330:	da02      	bge.n	41d338 <basic_init+0x1150>
  41d332:	2401      	movs	r4, #1
  41d334:	f7ff b94c 	b.w	41c5d0 <basic_init+0x3e8>
  41d338:	2000      	movs	r0, #0
  41d33a:	4b99      	ldr	r3, [pc, #612]	; (41d5a0 <basic_init+0x13b8>)
  41d33c:	4798      	blx	r3
  41d33e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d342:	3050      	adds	r0, #80	; 0x50
  41d344:	4a97      	ldr	r2, [pc, #604]	; (41d5a4 <basic_init+0x13bc>)
  41d346:	fb82 3200 	smull	r3, r2, r2, r0
  41d34a:	17c4      	asrs	r4, r0, #31
  41d34c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d350:	b2a4      	uxth	r4, r4
  41d352:	f7ff b93d 	b.w	41c5d0 <basic_init+0x3e8>
  41d356:	2000      	movs	r0, #0
  41d358:	4b91      	ldr	r3, [pc, #580]	; (41d5a0 <basic_init+0x13b8>)
  41d35a:	4798      	blx	r3
  41d35c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d360:	0040      	lsls	r0, r0, #1
  41d362:	3050      	adds	r0, #80	; 0x50
  41d364:	4a8f      	ldr	r2, [pc, #572]	; (41d5a4 <basic_init+0x13bc>)
  41d366:	fb82 3200 	smull	r3, r2, r2, r0
  41d36a:	17c4      	asrs	r4, r0, #31
  41d36c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d370:	b2a4      	uxth	r4, r4
  41d372:	f7ff b92d 	b.w	41c5d0 <basic_init+0x3e8>
  41d376:	2000      	movs	r0, #0
  41d378:	4b89      	ldr	r3, [pc, #548]	; (41d5a0 <basic_init+0x13b8>)
  41d37a:	4798      	blx	r3
  41d37c:	3028      	adds	r0, #40	; 0x28
  41d37e:	0040      	lsls	r0, r0, #1
  41d380:	4b88      	ldr	r3, [pc, #544]	; (41d5a4 <basic_init+0x13bc>)
  41d382:	fb83 2300 	smull	r2, r3, r3, r0
  41d386:	17c2      	asrs	r2, r0, #31
  41d388:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d38c:	b292      	uxth	r2, r2
  41d38e:	f7ff b929 	b.w	41c5e4 <basic_init+0x3fc>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41d392:	2000      	movs	r0, #0
  41d394:	4b82      	ldr	r3, [pc, #520]	; (41d5a0 <basic_init+0x13b8>)
  41d396:	4798      	blx	r3
  41d398:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d39c:	3050      	adds	r0, #80	; 0x50
  41d39e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d3a2:	da02      	bge.n	41d3aa <basic_init+0x11c2>
  41d3a4:	2201      	movs	r2, #1
  41d3a6:	f7ff b938 	b.w	41c61a <basic_init+0x432>
  41d3aa:	2000      	movs	r0, #0
  41d3ac:	4b7c      	ldr	r3, [pc, #496]	; (41d5a0 <basic_init+0x13b8>)
  41d3ae:	4798      	blx	r3
  41d3b0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d3b4:	3050      	adds	r0, #80	; 0x50
  41d3b6:	4b7b      	ldr	r3, [pc, #492]	; (41d5a4 <basic_init+0x13bc>)
  41d3b8:	fb83 2300 	smull	r2, r3, r3, r0
  41d3bc:	17c2      	asrs	r2, r0, #31
  41d3be:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d3c2:	b212      	sxth	r2, r2
  41d3c4:	f7ff b929 	b.w	41c61a <basic_init+0x432>
  41d3c8:	2000      	movs	r0, #0
  41d3ca:	4b75      	ldr	r3, [pc, #468]	; (41d5a0 <basic_init+0x13b8>)
  41d3cc:	4798      	blx	r3
  41d3ce:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d3d2:	0040      	lsls	r0, r0, #1
  41d3d4:	3050      	adds	r0, #80	; 0x50
  41d3d6:	4b73      	ldr	r3, [pc, #460]	; (41d5a4 <basic_init+0x13bc>)
  41d3d8:	fb83 2300 	smull	r2, r3, r3, r0
  41d3dc:	17c2      	asrs	r2, r0, #31
  41d3de:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d3e2:	b212      	sxth	r2, r2
  41d3e4:	f7ff b919 	b.w	41c61a <basic_init+0x432>
  41d3e8:	2302      	movs	r3, #2
  41d3ea:	f04f 0200 	mov.w	r2, #0
  41d3ee:	f363 0202 	bfi	r2, r3, #0, #3
  41d3f2:	2108      	movs	r1, #8
  41d3f4:	f361 02c7 	bfi	r2, r1, #3, #5
  41d3f8:	2109      	movs	r1, #9
  41d3fa:	f361 220c 	bfi	r2, r1, #8, #5
  41d3fe:	f363 324f 	bfi	r2, r3, #13, #3
  41d402:	f7ff b938 	b.w	41c676 <basic_init+0x48e>
  41d406:	f04f 0200 	mov.w	r2, #0
  41d40a:	2302      	movs	r3, #2
  41d40c:	f363 0202 	bfi	r2, r3, #0, #3
  41d410:	2308      	movs	r3, #8
  41d412:	f363 02c7 	bfi	r2, r3, #3, #5
  41d416:	f363 220c 	bfi	r2, r3, #8, #5
  41d41a:	f36f 324f 	bfc	r2, #13, #3
  41d41e:	f7ff b941 	b.w	41c6a4 <basic_init+0x4bc>
  41d422:	f04f 0200 	mov.w	r2, #0
  41d426:	2305      	movs	r3, #5
  41d428:	f363 0202 	bfi	r2, r3, #0, #3
  41d42c:	2314      	movs	r3, #20
  41d42e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d432:	2315      	movs	r3, #21
  41d434:	f363 220c 	bfi	r2, r3, #8, #5
  41d438:	2302      	movs	r3, #2
  41d43a:	f363 324f 	bfi	r2, r3, #13, #3
  41d43e:	f7ff b94a 	b.w	41c6d6 <basic_init+0x4ee>
  41d442:	f04f 0200 	mov.w	r2, #0
  41d446:	2305      	movs	r3, #5
  41d448:	f363 0202 	bfi	r2, r3, #0, #3
  41d44c:	2314      	movs	r3, #20
  41d44e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d452:	2315      	movs	r3, #21
  41d454:	f363 220c 	bfi	r2, r3, #8, #5
  41d458:	2302      	movs	r3, #2
  41d45a:	f363 324f 	bfi	r2, r3, #13, #3
  41d45e:	f7ff b954 	b.w	41c70a <basic_init+0x522>
  41d462:	f04f 0200 	mov.w	r2, #0
  41d466:	2305      	movs	r3, #5
  41d468:	f363 0202 	bfi	r2, r3, #0, #3
  41d46c:	2314      	movs	r3, #20
  41d46e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d472:	2315      	movs	r3, #21
  41d474:	f363 220c 	bfi	r2, r3, #8, #5
  41d478:	2302      	movs	r3, #2
  41d47a:	f363 324f 	bfi	r2, r3, #13, #3
  41d47e:	f7ff b95d 	b.w	41c73c <basic_init+0x554>
  41d482:	f04f 0200 	mov.w	r2, #0
  41d486:	2305      	movs	r3, #5
  41d488:	f363 0202 	bfi	r2, r3, #0, #3
  41d48c:	2314      	movs	r3, #20
  41d48e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d492:	2315      	movs	r3, #21
  41d494:	f363 220c 	bfi	r2, r3, #8, #5
  41d498:	2302      	movs	r3, #2
  41d49a:	f363 324f 	bfi	r2, r3, #13, #3
  41d49e:	f7ff b967 	b.w	41c770 <basic_init+0x588>
  41d4a2:	f04f 0200 	mov.w	r2, #0
  41d4a6:	2302      	movs	r3, #2
  41d4a8:	f363 0202 	bfi	r2, r3, #0, #3
  41d4ac:	2309      	movs	r3, #9
  41d4ae:	f363 02c7 	bfi	r2, r3, #3, #5
  41d4b2:	230a      	movs	r3, #10
  41d4b4:	f363 220c 	bfi	r2, r3, #8, #5
  41d4b8:	2303      	movs	r3, #3
  41d4ba:	f363 324f 	bfi	r2, r3, #13, #3
  41d4be:	f7ff b971 	b.w	41c7a4 <basic_init+0x5bc>
  41d4c2:	f04f 0200 	mov.w	r2, #0
  41d4c6:	2303      	movs	r3, #3
  41d4c8:	f363 0202 	bfi	r2, r3, #0, #3
  41d4cc:	230b      	movs	r3, #11
  41d4ce:	f363 02c7 	bfi	r2, r3, #3, #5
  41d4d2:	230e      	movs	r3, #14
  41d4d4:	f363 220c 	bfi	r2, r3, #8, #5
  41d4d8:	f36f 324f 	bfc	r2, #13, #3
  41d4dc:	f7ff b982 	b.w	41c7e4 <basic_init+0x5fc>
  41d4e0:	f04f 0200 	mov.w	r2, #0
  41d4e4:	2303      	movs	r3, #3
  41d4e6:	f363 0202 	bfi	r2, r3, #0, #3
  41d4ea:	230b      	movs	r3, #11
  41d4ec:	f363 02c7 	bfi	r2, r3, #3, #5
  41d4f0:	230d      	movs	r3, #13
  41d4f2:	f363 220c 	bfi	r2, r3, #8, #5
  41d4f6:	2301      	movs	r3, #1
  41d4f8:	f363 324f 	bfi	r2, r3, #13, #3
  41d4fc:	f7ff b9b1 	b.w	41c862 <basic_init+0x67a>
  41d500:	f04f 0200 	mov.w	r2, #0
  41d504:	2303      	movs	r3, #3
  41d506:	f363 0202 	bfi	r2, r3, #0, #3
  41d50a:	230b      	movs	r3, #11
  41d50c:	f363 02c7 	bfi	r2, r3, #3, #5
  41d510:	230d      	movs	r3, #13
  41d512:	f363 220c 	bfi	r2, r3, #8, #5
  41d516:	2301      	movs	r3, #1
  41d518:	f363 324f 	bfi	r2, r3, #13, #3
  41d51c:	f7ff b9bd 	b.w	41c89a <basic_init+0x6b2>
  41d520:	f04f 0200 	mov.w	r2, #0
  41d524:	2303      	movs	r3, #3
  41d526:	f363 0202 	bfi	r2, r3, #0, #3
  41d52a:	230b      	movs	r3, #11
  41d52c:	f363 02c7 	bfi	r2, r3, #3, #5
  41d530:	230d      	movs	r3, #13
  41d532:	f363 220c 	bfi	r2, r3, #8, #5
  41d536:	2301      	movs	r3, #1
  41d538:	f363 324f 	bfi	r2, r3, #13, #3
  41d53c:	f7ff b9c9 	b.w	41c8d2 <basic_init+0x6ea>
  41d540:	f04f 0200 	mov.w	r2, #0
  41d544:	2303      	movs	r3, #3
  41d546:	f363 0202 	bfi	r2, r3, #0, #3
  41d54a:	230b      	movs	r3, #11
  41d54c:	f363 02c7 	bfi	r2, r3, #3, #5
  41d550:	230d      	movs	r3, #13
  41d552:	f363 220c 	bfi	r2, r3, #8, #5
  41d556:	2301      	movs	r3, #1
  41d558:	f363 324f 	bfi	r2, r3, #13, #3
  41d55c:	f7ff b9d5 	b.w	41c90a <basic_init+0x722>
  41d560:	f04f 32ff 	mov.w	r2, #4294967295
  41d564:	f7ff b9ed 	b.w	41c942 <basic_init+0x75a>
  41d568:	f04f 32ff 	mov.w	r2, #4294967295
  41d56c:	f7ff b9f8 	b.w	41c960 <basic_init+0x778>
  41d570:	f04f 32ff 	mov.w	r2, #4294967295
  41d574:	f7ff ba03 	b.w	41c97e <basic_init+0x796>
  41d578:	f04f 0200 	mov.w	r2, #0
  41d57c:	2304      	movs	r3, #4
  41d57e:	f363 0202 	bfi	r2, r3, #0, #3
  41d582:	2313      	movs	r3, #19
  41d584:	f363 02c7 	bfi	r2, r3, #3, #5
  41d588:	f363 220c 	bfi	r2, r3, #8, #5
  41d58c:	2306      	movs	r3, #6
  41d58e:	f363 324f 	bfi	r2, r3, #13, #3
  41d592:	f7ff ba0e 	b.w	41c9b2 <basic_init+0x7ca>
  41d596:	f04f 32ff 	mov.w	r2, #4294967295
  41d59a:	f7ff ba26 	b.w	41c9ea <basic_init+0x802>
  41d59e:	bf00      	nop
  41d5a0:	00414d4d 	.word	0x00414d4d
  41d5a4:	66666667 	.word	0x66666667
  41d5a8:	f04f 32ff 	mov.w	r2, #4294967295
  41d5ac:	f7ff ba2c 	b.w	41ca08 <basic_init+0x820>
  41d5b0:	f04f 32ff 	mov.w	r2, #4294967295
  41d5b4:	f7ff ba37 	b.w	41ca26 <basic_init+0x83e>
  41d5b8:	f04f 0200 	mov.w	r2, #0
  41d5bc:	2304      	movs	r3, #4
  41d5be:	f363 0202 	bfi	r2, r3, #0, #3
  41d5c2:	2313      	movs	r3, #19
  41d5c4:	f363 02c7 	bfi	r2, r3, #3, #5
  41d5c8:	f363 220c 	bfi	r2, r3, #8, #5
  41d5cc:	2306      	movs	r3, #6
  41d5ce:	f363 324f 	bfi	r2, r3, #13, #3
  41d5d2:	f7ff ba42 	b.w	41ca5a <basic_init+0x872>
  41d5d6:	f04f 0200 	mov.w	r2, #0
  41d5da:	2303      	movs	r3, #3
  41d5dc:	f363 0202 	bfi	r2, r3, #0, #3
  41d5e0:	230b      	movs	r3, #11
  41d5e2:	f363 02c7 	bfi	r2, r3, #3, #5
  41d5e6:	230e      	movs	r3, #14
  41d5e8:	f363 220c 	bfi	r2, r3, #8, #5
  41d5ec:	f36f 324f 	bfc	r2, #13, #3
  41d5f0:	f7ff ba58 	b.w	41caa4 <basic_init+0x8bc>
  41d5f4:	f04f 0400 	mov.w	r4, #0
  41d5f8:	2303      	movs	r3, #3
  41d5fa:	f363 0402 	bfi	r4, r3, #0, #3
  41d5fe:	230b      	movs	r3, #11
  41d600:	f363 04c7 	bfi	r4, r3, #3, #5
  41d604:	230e      	movs	r3, #14
  41d606:	f363 240c 	bfi	r4, r3, #8, #5
  41d60a:	f36f 344f 	bfc	r4, #13, #3
  41d60e:	4bc2      	ldr	r3, [pc, #776]	; (41d918 <basic_init+0x1730>)
  41d610:	899b      	ldrh	r3, [r3, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41d612:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41d616:	264c      	movs	r6, #76	; 0x4c
  41d618:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  41d61c:	25b3      	movs	r5, #179	; 0xb3
  41d61e:	fb05 f101 	mul.w	r1, r5, r1
  41d622:	fb06 1202 	mla	r2, r6, r2, r1
  41d626:	3280      	adds	r2, #128	; 0x80
  41d628:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41d62c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41d630:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41d634:	f04f 0200 	mov.w	r2, #0
  41d638:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41d63c:	f003 0707 	and.w	r7, r3, #7
  41d640:	f3c3 3142 	ubfx	r1, r3, #13, #3
  41d644:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41d648:	f004 0707 	and.w	r7, r4, #7
  41d64c:	00ff      	lsls	r7, r7, #3
  41d64e:	fb05 f707 	mul.w	r7, r5, r7
  41d652:	fb06 7101 	mla	r1, r6, r1, r7
  41d656:	3180      	adds	r1, #128	; 0x80
  41d658:	eb01 2701 	add.w	r7, r1, r1, lsl #8
  41d65c:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
  41d660:	f3c1 6782 	ubfx	r7, r1, #26, #3
  41d664:	f367 0202 	bfi	r2, r7, #0, #3
  41d668:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41d66c:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41d670:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41d674:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41d678:	fb05 f404 	mul.w	r4, r5, r4
  41d67c:	fb06 4303 	mla	r3, r6, r3, r4
  41d680:	3380      	adds	r3, #128	; 0x80
  41d682:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41d686:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41d68a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41d68e:	f363 220c 	bfi	r2, r3, #8, #5
  41d692:	f7ff ba5e 	b.w	41cb52 <basic_init+0x96a>
    return LV_COLOR_MAKE(r, g, b);
  41d696:	f04f 0200 	mov.w	r2, #0
  41d69a:	2303      	movs	r3, #3
  41d69c:	f363 0202 	bfi	r2, r3, #0, #3
  41d6a0:	230b      	movs	r3, #11
  41d6a2:	f363 02c7 	bfi	r2, r3, #3, #5
  41d6a6:	230e      	movs	r3, #14
  41d6a8:	f363 220c 	bfi	r2, r3, #8, #5
  41d6ac:	f36f 324f 	bfc	r2, #13, #3
  41d6b0:	f7ff ba7e 	b.w	41cbb0 <basic_init+0x9c8>
  41d6b4:	f04f 0200 	mov.w	r2, #0
  41d6b8:	2304      	movs	r3, #4
  41d6ba:	f363 0202 	bfi	r2, r3, #0, #3
  41d6be:	2311      	movs	r3, #17
  41d6c0:	f363 02c7 	bfi	r2, r3, #3, #5
  41d6c4:	f363 220c 	bfi	r2, r3, #8, #5
  41d6c8:	2302      	movs	r3, #2
  41d6ca:	f363 324f 	bfi	r2, r3, #13, #3
  41d6ce:	f7ff ba89 	b.w	41cbe4 <basic_init+0x9fc>
  41d6d2:	f04f 0200 	mov.w	r2, #0
  41d6d6:	2302      	movs	r3, #2
  41d6d8:	f363 0202 	bfi	r2, r3, #0, #3
  41d6dc:	2308      	movs	r3, #8
  41d6de:	f363 02c7 	bfi	r2, r3, #3, #5
  41d6e2:	f363 220c 	bfi	r2, r3, #8, #5
  41d6e6:	f36f 324f 	bfc	r2, #13, #3
  41d6ea:	f7ff baa0 	b.w	41cc2e <basic_init+0xa46>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41d6ee:	2000      	movs	r0, #0
  41d6f0:	4b8a      	ldr	r3, [pc, #552]	; (41d91c <basic_init+0x1734>)
  41d6f2:	4798      	blx	r3
  41d6f4:	3028      	adds	r0, #40	; 0x28
  41d6f6:	0040      	lsls	r0, r0, #1
  41d6f8:	4b89      	ldr	r3, [pc, #548]	; (41d920 <basic_init+0x1738>)
  41d6fa:	fb83 2300 	smull	r2, r3, r3, r0
  41d6fe:	17c2      	asrs	r2, r0, #31
  41d700:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d704:	b212      	sxth	r2, r2
  41d706:	f7ff baa3 	b.w	41cc50 <basic_init+0xa68>
  41d70a:	f04f 32ff 	mov.w	r2, #4294967295
  41d70e:	f7ff bac0 	b.w	41cc92 <basic_init+0xaaa>
  41d712:	f04f 32ff 	mov.w	r2, #4294967295
  41d716:	f7ff bad6 	b.w	41ccc6 <basic_init+0xade>
  41d71a:	f04f 0200 	mov.w	r2, #0
  41d71e:	2304      	movs	r3, #4
  41d720:	f363 0202 	bfi	r2, r3, #0, #3
  41d724:	2311      	movs	r3, #17
  41d726:	f363 02c7 	bfi	r2, r3, #3, #5
  41d72a:	f363 220c 	bfi	r2, r3, #8, #5
  41d72e:	2302      	movs	r3, #2
  41d730:	f363 324f 	bfi	r2, r3, #13, #3
  41d734:	f7ff baef 	b.w	41cd16 <basic_init+0xb2e>
  41d738:	f04f 32ff 	mov.w	r2, #4294967295
  41d73c:	f7ff bb05 	b.w	41cd4a <basic_init+0xb62>
  41d740:	f04f 32ff 	mov.w	r2, #4294967295
  41d744:	f7ff bb1b 	b.w	41cd7e <basic_init+0xb96>
  41d748:	f04f 0200 	mov.w	r2, #0
  41d74c:	2304      	movs	r3, #4
  41d74e:	f363 0202 	bfi	r2, r3, #0, #3
  41d752:	2311      	movs	r3, #17
  41d754:	f363 02c7 	bfi	r2, r3, #3, #5
  41d758:	f363 220c 	bfi	r2, r3, #8, #5
  41d75c:	2302      	movs	r3, #2
  41d75e:	f363 324f 	bfi	r2, r3, #13, #3
  41d762:	f7ff bb34 	b.w	41cdce <basic_init+0xbe6>
  41d766:	f04f 32ff 	mov.w	r2, #4294967295
  41d76a:	f7ff bb4a 	b.w	41ce02 <basic_init+0xc1a>
  41d76e:	f04f 32ff 	mov.w	r2, #4294967295
  41d772:	f7ff bb5f 	b.w	41ce34 <basic_init+0xc4c>
  41d776:	f04f 0200 	mov.w	r2, #0
  41d77a:	2304      	movs	r3, #4
  41d77c:	f363 0202 	bfi	r2, r3, #0, #3
  41d780:	2311      	movs	r3, #17
  41d782:	f363 02c7 	bfi	r2, r3, #3, #5
  41d786:	f363 220c 	bfi	r2, r3, #8, #5
  41d78a:	2302      	movs	r3, #2
  41d78c:	f363 324f 	bfi	r2, r3, #13, #3
  41d790:	f7ff bb78 	b.w	41ce84 <basic_init+0xc9c>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41d794:	2000      	movs	r0, #0
  41d796:	4b61      	ldr	r3, [pc, #388]	; (41d91c <basic_init+0x1734>)
  41d798:	4798      	blx	r3
  41d79a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d79e:	00c0      	lsls	r0, r0, #3
  41d7a0:	3050      	adds	r0, #80	; 0x50
  41d7a2:	4b5f      	ldr	r3, [pc, #380]	; (41d920 <basic_init+0x1738>)
  41d7a4:	fb83 2300 	smull	r2, r3, r3, r0
  41d7a8:	17c2      	asrs	r2, r0, #31
  41d7aa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d7ae:	b212      	sxth	r2, r2
  41d7b0:	f7ff bb7b 	b.w	41ceaa <basic_init+0xcc2>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41d7b4:	2000      	movs	r0, #0
  41d7b6:	4b59      	ldr	r3, [pc, #356]	; (41d91c <basic_init+0x1734>)
  41d7b8:	4798      	blx	r3
  41d7ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d7be:	00c0      	lsls	r0, r0, #3
  41d7c0:	3050      	adds	r0, #80	; 0x50
  41d7c2:	4b57      	ldr	r3, [pc, #348]	; (41d920 <basic_init+0x1738>)
  41d7c4:	fb83 2300 	smull	r2, r3, r3, r0
  41d7c8:	17c2      	asrs	r2, r0, #31
  41d7ca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d7ce:	b212      	sxth	r2, r2
  41d7d0:	f7ff bb8c 	b.w	41ceec <basic_init+0xd04>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41d7d4:	2000      	movs	r0, #0
  41d7d6:	4b51      	ldr	r3, [pc, #324]	; (41d91c <basic_init+0x1734>)
  41d7d8:	4798      	blx	r3
  41d7da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d7de:	3050      	adds	r0, #80	; 0x50
  41d7e0:	4b4f      	ldr	r3, [pc, #316]	; (41d920 <basic_init+0x1738>)
  41d7e2:	fb83 2300 	smull	r2, r3, r3, r0
  41d7e6:	17c2      	asrs	r2, r0, #31
  41d7e8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d7ec:	b212      	sxth	r2, r2
  41d7ee:	f7ff bb8f 	b.w	41cf10 <basic_init+0xd28>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41d7f2:	2000      	movs	r0, #0
  41d7f4:	4b49      	ldr	r3, [pc, #292]	; (41d91c <basic_init+0x1734>)
  41d7f6:	4798      	blx	r3
  41d7f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d7fc:	3050      	adds	r0, #80	; 0x50
  41d7fe:	4b48      	ldr	r3, [pc, #288]	; (41d920 <basic_init+0x1738>)
  41d800:	fb83 2300 	smull	r2, r3, r3, r0
  41d804:	17c2      	asrs	r2, r0, #31
  41d806:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d80a:	b212      	sxth	r2, r2
  41d80c:	f7ff bb92 	b.w	41cf34 <basic_init+0xd4c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41d810:	2000      	movs	r0, #0
  41d812:	4b42      	ldr	r3, [pc, #264]	; (41d91c <basic_init+0x1734>)
  41d814:	4798      	blx	r3
  41d816:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d81a:	0080      	lsls	r0, r0, #2
  41d81c:	3050      	adds	r0, #80	; 0x50
  41d81e:	4b40      	ldr	r3, [pc, #256]	; (41d920 <basic_init+0x1738>)
  41d820:	fb83 2300 	smull	r2, r3, r3, r0
  41d824:	17c2      	asrs	r2, r0, #31
  41d826:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d82a:	b212      	sxth	r2, r2
  41d82c:	f7ff bb95 	b.w	41cf5a <basic_init+0xd72>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41d830:	2000      	movs	r0, #0
  41d832:	4b3a      	ldr	r3, [pc, #232]	; (41d91c <basic_init+0x1734>)
  41d834:	4798      	blx	r3
  41d836:	3028      	adds	r0, #40	; 0x28
  41d838:	0040      	lsls	r0, r0, #1
  41d83a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d83e:	da02      	bge.n	41d846 <basic_init+0x165e>
  41d840:	2201      	movs	r2, #1
  41d842:	f7ff bb98 	b.w	41cf76 <basic_init+0xd8e>
  41d846:	2000      	movs	r0, #0
  41d848:	4b34      	ldr	r3, [pc, #208]	; (41d91c <basic_init+0x1734>)
  41d84a:	4798      	blx	r3
  41d84c:	3028      	adds	r0, #40	; 0x28
  41d84e:	0040      	lsls	r0, r0, #1
  41d850:	4b33      	ldr	r3, [pc, #204]	; (41d920 <basic_init+0x1738>)
  41d852:	fb83 2300 	smull	r2, r3, r3, r0
  41d856:	17c2      	asrs	r2, r0, #31
  41d858:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d85c:	b212      	sxth	r2, r2
  41d85e:	f7ff bb8a 	b.w	41cf76 <basic_init+0xd8e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d862:	2000      	movs	r0, #0
  41d864:	4b2d      	ldr	r3, [pc, #180]	; (41d91c <basic_init+0x1734>)
  41d866:	4798      	blx	r3
  41d868:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d86c:	0080      	lsls	r0, r0, #2
  41d86e:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d870:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d874:	da02      	bge.n	41d87c <basic_init+0x1694>
  41d876:	2201      	movs	r2, #1
  41d878:	f7ff bbd2 	b.w	41d020 <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d87c:	2000      	movs	r0, #0
  41d87e:	4b27      	ldr	r3, [pc, #156]	; (41d91c <basic_init+0x1734>)
  41d880:	4798      	blx	r3
  41d882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d886:	0080      	lsls	r0, r0, #2
  41d888:	3050      	adds	r0, #80	; 0x50
  41d88a:	4b25      	ldr	r3, [pc, #148]	; (41d920 <basic_init+0x1738>)
  41d88c:	fb83 2300 	smull	r2, r3, r3, r0
  41d890:	17c2      	asrs	r2, r0, #31
  41d892:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d896:	b212      	sxth	r2, r2
  41d898:	f7ff bbc2 	b.w	41d020 <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d89c:	2000      	movs	r0, #0
  41d89e:	4b1f      	ldr	r3, [pc, #124]	; (41d91c <basic_init+0x1734>)
  41d8a0:	4798      	blx	r3
  41d8a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d8a6:	00c0      	lsls	r0, r0, #3
  41d8a8:	3050      	adds	r0, #80	; 0x50
  41d8aa:	4b1d      	ldr	r3, [pc, #116]	; (41d920 <basic_init+0x1738>)
  41d8ac:	fb83 2300 	smull	r2, r3, r3, r0
  41d8b0:	17c2      	asrs	r2, r0, #31
  41d8b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d8b6:	b212      	sxth	r2, r2
  41d8b8:	f7ff bbb2 	b.w	41d020 <basic_init+0xe38>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41d8bc:	2000      	movs	r0, #0
  41d8be:	4b17      	ldr	r3, [pc, #92]	; (41d91c <basic_init+0x1734>)
  41d8c0:	4798      	blx	r3
  41d8c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d8c6:	0040      	lsls	r0, r0, #1
  41d8c8:	3050      	adds	r0, #80	; 0x50
  41d8ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d8ce:	da02      	bge.n	41d8d6 <basic_init+0x16ee>
  41d8d0:	2401      	movs	r4, #1
  41d8d2:	f7ff bbc0 	b.w	41d056 <basic_init+0xe6e>
  41d8d6:	2000      	movs	r0, #0
  41d8d8:	4b10      	ldr	r3, [pc, #64]	; (41d91c <basic_init+0x1734>)
  41d8da:	4798      	blx	r3
  41d8dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d8e0:	0040      	lsls	r0, r0, #1
  41d8e2:	3050      	adds	r0, #80	; 0x50
  41d8e4:	4b0e      	ldr	r3, [pc, #56]	; (41d920 <basic_init+0x1738>)
  41d8e6:	fb83 2300 	smull	r2, r3, r3, r0
  41d8ea:	17c4      	asrs	r4, r0, #31
  41d8ec:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41d8f0:	b224      	sxth	r4, r4
  41d8f2:	f7ff bbb0 	b.w	41d056 <basic_init+0xe6e>
  41d8f6:	2000      	movs	r0, #0
  41d8f8:	4b08      	ldr	r3, [pc, #32]	; (41d91c <basic_init+0x1734>)
  41d8fa:	4798      	blx	r3
  41d8fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d900:	0080      	lsls	r0, r0, #2
  41d902:	3050      	adds	r0, #80	; 0x50
  41d904:	4b06      	ldr	r3, [pc, #24]	; (41d920 <basic_init+0x1738>)
  41d906:	fb83 2300 	smull	r2, r3, r3, r0
  41d90a:	17c4      	asrs	r4, r0, #31
  41d90c:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41d910:	b224      	sxth	r4, r4
  41d912:	f7ff bba0 	b.w	41d056 <basic_init+0xe6e>
  41d916:	bf00      	nop
  41d918:	20414828 	.word	0x20414828
  41d91c:	00414d4d 	.word	0x00414d4d
  41d920:	66666667 	.word	0x66666667

0041d924 <lv_theme_material_init>:
{
  41d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41d928:	4680      	mov	r8, r0
  41d92a:	460f      	mov	r7, r1
  41d92c:	4615      	mov	r5, r2
  41d92e:	461e      	mov	r6, r3
    if(!inited) {
  41d930:	4b27      	ldr	r3, [pc, #156]	; (41d9d0 <lv_theme_material_init+0xac>)
  41d932:	781b      	ldrb	r3, [r3, #0]
  41d934:	2b00      	cmp	r3, #0
  41d936:	d043      	beq.n	41d9c0 <lv_theme_material_init+0x9c>
    theme.color_primary = color_primary;
  41d938:	4c26      	ldr	r4, [pc, #152]	; (41d9d4 <lv_theme_material_init+0xb0>)
  41d93a:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
  41d93e:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
  41d940:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
  41d942:	9b06      	ldr	r3, [sp, #24]
  41d944:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
  41d946:	9b07      	ldr	r3, [sp, #28]
  41d948:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
  41d94a:	9b08      	ldr	r3, [sp, #32]
  41d94c:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
  41d94e:	6225      	str	r5, [r4, #32]
    basic_init();
  41d950:	4b21      	ldr	r3, [pc, #132]	; (41d9d8 <lv_theme_material_init+0xb4>)
  41d952:	4798      	blx	r3
    bar_init();
  41d954:	4b21      	ldr	r3, [pc, #132]	; (41d9dc <lv_theme_material_init+0xb8>)
  41d956:	4798      	blx	r3
    led_init();
  41d958:	4b21      	ldr	r3, [pc, #132]	; (41d9e0 <lv_theme_material_init+0xbc>)
  41d95a:	4798      	blx	r3
    slider_init();
  41d95c:	4b21      	ldr	r3, [pc, #132]	; (41d9e4 <lv_theme_material_init+0xc0>)
  41d95e:	4798      	blx	r3
    switch_init();
  41d960:	4b21      	ldr	r3, [pc, #132]	; (41d9e8 <lv_theme_material_init+0xc4>)
  41d962:	4798      	blx	r3
    linemeter_init();
  41d964:	4b21      	ldr	r3, [pc, #132]	; (41d9ec <lv_theme_material_init+0xc8>)
  41d966:	4798      	blx	r3
    gauge_init();
  41d968:	4b21      	ldr	r3, [pc, #132]	; (41d9f0 <lv_theme_material_init+0xcc>)
  41d96a:	4798      	blx	r3
    arc_init();
  41d96c:	4b21      	ldr	r3, [pc, #132]	; (41d9f4 <lv_theme_material_init+0xd0>)
  41d96e:	4798      	blx	r3
    chart_init();
  41d970:	4b21      	ldr	r3, [pc, #132]	; (41d9f8 <lv_theme_material_init+0xd4>)
  41d972:	4798      	blx	r3
    calendar_init();
  41d974:	4b21      	ldr	r3, [pc, #132]	; (41d9fc <lv_theme_material_init+0xd8>)
  41d976:	4798      	blx	r3
    cpicker_init();
  41d978:	4b21      	ldr	r3, [pc, #132]	; (41da00 <lv_theme_material_init+0xdc>)
  41d97a:	4798      	blx	r3
    checkbox_init();
  41d97c:	4b21      	ldr	r3, [pc, #132]	; (41da04 <lv_theme_material_init+0xe0>)
  41d97e:	4798      	blx	r3
    keyboard_init();
  41d980:	4b21      	ldr	r3, [pc, #132]	; (41da08 <lv_theme_material_init+0xe4>)
  41d982:	4798      	blx	r3
    msgbox_init();
  41d984:	4b21      	ldr	r3, [pc, #132]	; (41da0c <lv_theme_material_init+0xe8>)
  41d986:	4798      	blx	r3
    page_init();
  41d988:	4b21      	ldr	r3, [pc, #132]	; (41da10 <lv_theme_material_init+0xec>)
  41d98a:	4798      	blx	r3
    textarea_init();
  41d98c:	4b21      	ldr	r3, [pc, #132]	; (41da14 <lv_theme_material_init+0xf0>)
  41d98e:	4798      	blx	r3
    spinbox_init();
  41d990:	4b21      	ldr	r3, [pc, #132]	; (41da18 <lv_theme_material_init+0xf4>)
  41d992:	4798      	blx	r3
    list_init();
  41d994:	4b21      	ldr	r3, [pc, #132]	; (41da1c <lv_theme_material_init+0xf8>)
  41d996:	4798      	blx	r3
    ddlist_init();
  41d998:	4b21      	ldr	r3, [pc, #132]	; (41da20 <lv_theme_material_init+0xfc>)
  41d99a:	4798      	blx	r3
    roller_init();
  41d99c:	4b21      	ldr	r3, [pc, #132]	; (41da24 <lv_theme_material_init+0x100>)
  41d99e:	4798      	blx	r3
    table_init();
  41d9a0:	4b21      	ldr	r3, [pc, #132]	; (41da28 <lv_theme_material_init+0x104>)
  41d9a2:	4798      	blx	r3
    tabview_win_shared_init();
  41d9a4:	4b21      	ldr	r3, [pc, #132]	; (41da2c <lv_theme_material_init+0x108>)
  41d9a6:	4798      	blx	r3
    theme.apply_xcb = NULL;
  41d9a8:	2000      	movs	r0, #0
  41d9aa:	6060      	str	r0, [r4, #4]
    theme.apply_cb = theme_apply;
  41d9ac:	4b20      	ldr	r3, [pc, #128]	; (41da30 <lv_theme_material_init+0x10c>)
  41d9ae:	6023      	str	r3, [r4, #0]
    inited = true;
  41d9b0:	2201      	movs	r2, #1
  41d9b2:	4b07      	ldr	r3, [pc, #28]	; (41d9d0 <lv_theme_material_init+0xac>)
  41d9b4:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
  41d9b6:	4b1f      	ldr	r3, [pc, #124]	; (41da34 <lv_theme_material_init+0x110>)
  41d9b8:	4798      	blx	r3
}
  41d9ba:	4620      	mov	r0, r4
  41d9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
  41d9c0:	20c0      	movs	r0, #192	; 0xc0
  41d9c2:	4b1d      	ldr	r3, [pc, #116]	; (41da38 <lv_theme_material_init+0x114>)
  41d9c4:	4798      	blx	r3
  41d9c6:	4b1d      	ldr	r3, [pc, #116]	; (41da3c <lv_theme_material_init+0x118>)
  41d9c8:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
  41d9ca:	4b1d      	ldr	r3, [pc, #116]	; (41da40 <lv_theme_material_init+0x11c>)
  41d9cc:	6018      	str	r0, [r3, #0]
  41d9ce:	e7b3      	b.n	41d938 <lv_theme_material_init+0x14>
  41d9d0:	20414820 	.word	0x20414820
  41d9d4:	20414828 	.word	0x20414828
  41d9d8:	0041c1e9 	.word	0x0041c1e9
  41d9dc:	00418971 	.word	0x00418971
  41d9e0:	0041c0d5 	.word	0x0041c0d5
  41d9e4:	00418b55 	.word	0x00418b55
  41d9e8:	00418e09 	.word	0x00418e09
  41d9ec:	00418f4d 	.word	0x00418f4d
  41d9f0:	00419195 	.word	0x00419195
  41d9f4:	004196a5 	.word	0x004196a5
  41d9f8:	00419811 	.word	0x00419811
  41d9fc:	00419a99 	.word	0x00419a99
  41da00:	0041a231 	.word	0x0041a231
  41da04:	0041a4c1 	.word	0x0041a4c1
  41da08:	0041a7e9 	.word	0x0041a7e9
  41da0c:	0041a9e1 	.word	0x0041a9e1
  41da10:	0041aa85 	.word	0x0041aa85
  41da14:	0041ac11 	.word	0x0041ac11
  41da18:	0041ad59 	.word	0x0041ad59
  41da1c:	0041ae35 	.word	0x0041ae35
  41da20:	0041b659 	.word	0x0041b659
  41da24:	0041b79d 	.word	0x0041b79d
  41da28:	0041b849 	.word	0x0041b849
  41da2c:	0041bae1 	.word	0x0041bae1
  41da30:	00418329 	.word	0x00418329
  41da34:	00407b21 	.word	0x00407b21
  41da38:	004165bd 	.word	0x004165bd
  41da3c:	2043a31c 	.word	0x2043a31c
  41da40:	20414824 	.word	0x20414824

0041da44 <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
  41da44:	b508      	push	{r3, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
  41da46:	2a02      	cmp	r2, #2
  41da48:	d004      	beq.n	41da54 <lv_btn_design+0x10>
        return ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41da4a:	b13a      	cbz	r2, 41da5c <lv_btn_design+0x18>
        ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
  41da4c:	2a01      	cmp	r2, #1
  41da4e:	d00a      	beq.n	41da66 <lv_btn_design+0x22>
        ancestor_design(btn, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
  41da50:	2000      	movs	r0, #0
}
  41da52:	bd08      	pop	{r3, pc}
        return ancestor_design(btn, clip_area, mode);
  41da54:	4b06      	ldr	r3, [pc, #24]	; (41da70 <lv_btn_design+0x2c>)
  41da56:	681b      	ldr	r3, [r3, #0]
  41da58:	4798      	blx	r3
  41da5a:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41da5c:	4b04      	ldr	r3, [pc, #16]	; (41da70 <lv_btn_design+0x2c>)
  41da5e:	681b      	ldr	r3, [r3, #0]
  41da60:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41da62:	2000      	movs	r0, #0
  41da64:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41da66:	4b02      	ldr	r3, [pc, #8]	; (41da70 <lv_btn_design+0x2c>)
  41da68:	681b      	ldr	r3, [r3, #0]
  41da6a:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41da6c:	2000      	movs	r0, #0
  41da6e:	bd08      	pop	{r3, pc}
  41da70:	20414850 	.word	0x20414850

0041da74 <lv_btn_create>:
{
  41da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41da76:	4607      	mov	r7, r0
  41da78:	460e      	mov	r6, r1
    btn = lv_cont_create(par, copy);
  41da7a:	4b31      	ldr	r3, [pc, #196]	; (41db40 <lv_btn_create+0xcc>)
  41da7c:	4798      	blx	r3
  41da7e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btn);
  41da80:	4b30      	ldr	r3, [pc, #192]	; (41db44 <lv_btn_create+0xd0>)
  41da82:	4798      	blx	r3
  41da84:	b1a8      	cbz	r0, 41dab2 <lv_btn_create+0x3e>
    if(btn == NULL) return NULL;
  41da86:	2c00      	cmp	r4, #0
  41da88:	d045      	beq.n	41db16 <lv_btn_create+0xa2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41da8a:	4b2f      	ldr	r3, [pc, #188]	; (41db48 <lv_btn_create+0xd4>)
  41da8c:	681b      	ldr	r3, [r3, #0]
  41da8e:	b1b3      	cbz	r3, 41dabe <lv_btn_create+0x4a>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41da90:	4b2e      	ldr	r3, [pc, #184]	; (41db4c <lv_btn_create+0xd8>)
  41da92:	681b      	ldr	r3, [r3, #0]
  41da94:	b1cb      	cbz	r3, 41daca <lv_btn_create+0x56>
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
  41da96:	2103      	movs	r1, #3
  41da98:	4620      	mov	r0, r4
  41da9a:	4b2d      	ldr	r3, [pc, #180]	; (41db50 <lv_btn_create+0xdc>)
  41da9c:	4798      	blx	r3
  41da9e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41daa0:	4b28      	ldr	r3, [pc, #160]	; (41db44 <lv_btn_create+0xd0>)
  41daa2:	4798      	blx	r3
  41daa4:	b9b8      	cbnz	r0, 41dad6 <lv_btn_create+0x62>
  41daa6:	462a      	mov	r2, r5
  41daa8:	2300      	movs	r3, #0
  41daaa:	482a      	ldr	r0, [pc, #168]	; (41db54 <lv_btn_create+0xe0>)
  41daac:	492a      	ldr	r1, [pc, #168]	; (41db58 <lv_btn_create+0xe4>)
  41daae:	4788      	blx	r1
  41dab0:	e7fe      	b.n	41dab0 <lv_btn_create+0x3c>
    LV_ASSERT_MEM(btn);
  41dab2:	4622      	mov	r2, r4
  41dab4:	2300      	movs	r3, #0
  41dab6:	4827      	ldr	r0, [pc, #156]	; (41db54 <lv_btn_create+0xe0>)
  41dab8:	4927      	ldr	r1, [pc, #156]	; (41db58 <lv_btn_create+0xe4>)
  41daba:	4788      	blx	r1
  41dabc:	e7fe      	b.n	41dabc <lv_btn_create+0x48>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41dabe:	4620      	mov	r0, r4
  41dac0:	4b26      	ldr	r3, [pc, #152]	; (41db5c <lv_btn_create+0xe8>)
  41dac2:	4798      	blx	r3
  41dac4:	4b20      	ldr	r3, [pc, #128]	; (41db48 <lv_btn_create+0xd4>)
  41dac6:	6018      	str	r0, [r3, #0]
  41dac8:	e7e2      	b.n	41da90 <lv_btn_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41daca:	4620      	mov	r0, r4
  41dacc:	4b24      	ldr	r3, [pc, #144]	; (41db60 <lv_btn_create+0xec>)
  41dace:	4798      	blx	r3
  41dad0:	4b1e      	ldr	r3, [pc, #120]	; (41db4c <lv_btn_create+0xd8>)
  41dad2:	6018      	str	r0, [r3, #0]
  41dad4:	e7df      	b.n	41da96 <lv_btn_create+0x22>
    if(ext == NULL) {
  41dad6:	b305      	cbz	r5, 41db1a <lv_btn_create+0xa6>
    ext->checkable = 0;
  41dad8:	78ab      	ldrb	r3, [r5, #2]
  41dada:	f36f 0300 	bfc	r3, #0, #1
  41dade:	70ab      	strb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
  41dae0:	4920      	ldr	r1, [pc, #128]	; (41db64 <lv_btn_create+0xf0>)
  41dae2:	4620      	mov	r0, r4
  41dae4:	4b20      	ldr	r3, [pc, #128]	; (41db68 <lv_btn_create+0xf4>)
  41dae6:	4798      	blx	r3
    lv_obj_set_design_cb(btn, lv_btn_design);
  41dae8:	4920      	ldr	r1, [pc, #128]	; (41db6c <lv_btn_create+0xf8>)
  41daea:	4620      	mov	r0, r4
  41daec:	4b20      	ldr	r3, [pc, #128]	; (41db70 <lv_btn_create+0xfc>)
  41daee:	4798      	blx	r3
    if(copy == NULL) {
  41daf0:	b9c6      	cbnz	r6, 41db24 <lv_btn_create+0xb0>
        if(par) {
  41daf2:	b147      	cbz	r7, 41db06 <lv_btn_create+0x92>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
  41daf4:	2231      	movs	r2, #49	; 0x31
  41daf6:	2194      	movs	r1, #148	; 0x94
  41daf8:	4620      	mov	r0, r4
  41dafa:	4b1e      	ldr	r3, [pc, #120]	; (41db74 <lv_btn_create+0x100>)
  41dafc:	4798      	blx	r3
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
  41dafe:	2101      	movs	r1, #1
  41db00:	4620      	mov	r0, r4
  41db02:	4b1d      	ldr	r3, [pc, #116]	; (41db78 <lv_btn_create+0x104>)
  41db04:	4798      	blx	r3
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
  41db06:	2101      	movs	r1, #1
  41db08:	4620      	mov	r0, r4
  41db0a:	4b1c      	ldr	r3, [pc, #112]	; (41db7c <lv_btn_create+0x108>)
  41db0c:	4798      	blx	r3
        lv_theme_apply(btn, LV_THEME_BTN);
  41db0e:	2105      	movs	r1, #5
  41db10:	4620      	mov	r0, r4
  41db12:	4b1b      	ldr	r3, [pc, #108]	; (41db80 <lv_btn_create+0x10c>)
  41db14:	4798      	blx	r3
}
  41db16:	4620      	mov	r0, r4
  41db18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_del(btn);
  41db1a:	4620      	mov	r0, r4
  41db1c:	4b19      	ldr	r3, [pc, #100]	; (41db84 <lv_btn_create+0x110>)
  41db1e:	4798      	blx	r3
        return NULL;
  41db20:	2400      	movs	r4, #0
  41db22:	e7f8      	b.n	41db16 <lv_btn_create+0xa2>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41db24:	4630      	mov	r0, r6
  41db26:	4b18      	ldr	r3, [pc, #96]	; (41db88 <lv_btn_create+0x114>)
  41db28:	4798      	blx	r3
        ext->checkable             = copy_ext->checkable;
  41db2a:	7882      	ldrb	r2, [r0, #2]
  41db2c:	78ab      	ldrb	r3, [r5, #2]
  41db2e:	f362 0300 	bfi	r3, r2, #0, #1
  41db32:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41db34:	22ff      	movs	r2, #255	; 0xff
  41db36:	4611      	mov	r1, r2
  41db38:	4620      	mov	r0, r4
  41db3a:	4b14      	ldr	r3, [pc, #80]	; (41db8c <lv_btn_create+0x118>)
  41db3c:	4798      	blx	r3
  41db3e:	e7ea      	b.n	41db16 <lv_btn_create+0xa2>
  41db40:	00421479 	.word	0x00421479
  41db44:	00415e79 	.word	0x00415e79
  41db48:	20414854 	.word	0x20414854
  41db4c:	20414850 	.word	0x20414850
  41db50:	00405941 	.word	0x00405941
  41db54:	0042c154 	.word	0x0042c154
  41db58:	00415e85 	.word	0x00415e85
  41db5c:	00408045 	.word	0x00408045
  41db60:	0040806d 	.word	0x0040806d
  41db64:	0041dc65 	.word	0x0041dc65
  41db68:	004058dd 	.word	0x004058dd
  41db6c:	0041da45 	.word	0x0041da45
  41db70:	00405919 	.word	0x00405919
  41db74:	00406c39 	.word	0x00406c39
  41db78:	004215a9 	.word	0x004215a9
  41db7c:	0040571d 	.word	0x0040571d
  41db80:	004182f9 	.word	0x004182f9
  41db84:	004081f5 	.word	0x004081f5
  41db88:	00408095 	.word	0x00408095
  41db8c:	00407861 	.word	0x00407861

0041db90 <lv_btn_set_state>:
{
  41db90:	b538      	push	{r3, r4, r5, lr}
  41db92:	4604      	mov	r4, r0
  41db94:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41db96:	4b21      	ldr	r3, [pc, #132]	; (41dc1c <lv_btn_set_state+0x8c>)
  41db98:	4798      	blx	r3
  41db9a:	b130      	cbz	r0, 41dbaa <lv_btn_set_state+0x1a>
    switch(state) {
  41db9c:	2d05      	cmp	r5, #5
  41db9e:	d83b      	bhi.n	41dc18 <lv_btn_set_state+0x88>
  41dba0:	e8df f005 	tbb	[pc, r5]
  41dba4:	17290e09 	.word	0x17290e09
  41dba8:	3220      	.short	0x3220
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41dbaa:	4622      	mov	r2, r4
  41dbac:	2300      	movs	r3, #0
  41dbae:	481c      	ldr	r0, [pc, #112]	; (41dc20 <lv_btn_set_state+0x90>)
  41dbb0:	491c      	ldr	r1, [pc, #112]	; (41dc24 <lv_btn_set_state+0x94>)
  41dbb2:	4788      	blx	r1
  41dbb4:	e7fe      	b.n	41dbb4 <lv_btn_set_state+0x24>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
  41dbb6:	2131      	movs	r1, #49	; 0x31
  41dbb8:	4620      	mov	r0, r4
  41dbba:	4b1b      	ldr	r3, [pc, #108]	; (41dc28 <lv_btn_set_state+0x98>)
  41dbbc:	4798      	blx	r3
            break;
  41dbbe:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_CHECKED | LV_STATE_DISABLED);
  41dbc0:	2121      	movs	r1, #33	; 0x21
  41dbc2:	4620      	mov	r0, r4
  41dbc4:	4b18      	ldr	r3, [pc, #96]	; (41dc28 <lv_btn_set_state+0x98>)
  41dbc6:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_PRESSED);
  41dbc8:	2110      	movs	r1, #16
  41dbca:	4620      	mov	r0, r4
  41dbcc:	4b17      	ldr	r3, [pc, #92]	; (41dc2c <lv_btn_set_state+0x9c>)
  41dbce:	4798      	blx	r3
            break;
  41dbd0:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_CHECKED);
  41dbd2:	2101      	movs	r1, #1
  41dbd4:	4620      	mov	r0, r4
  41dbd6:	4b15      	ldr	r3, [pc, #84]	; (41dc2c <lv_btn_set_state+0x9c>)
  41dbd8:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
  41dbda:	2130      	movs	r1, #48	; 0x30
  41dbdc:	4620      	mov	r0, r4
  41dbde:	4b12      	ldr	r3, [pc, #72]	; (41dc28 <lv_btn_set_state+0x98>)
  41dbe0:	4798      	blx	r3
            break;
  41dbe2:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41dbe4:	2111      	movs	r1, #17
  41dbe6:	4620      	mov	r0, r4
  41dbe8:	4b10      	ldr	r3, [pc, #64]	; (41dc2c <lv_btn_set_state+0x9c>)
  41dbea:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
  41dbec:	2120      	movs	r1, #32
  41dbee:	4620      	mov	r0, r4
  41dbf0:	4b0d      	ldr	r3, [pc, #52]	; (41dc28 <lv_btn_set_state+0x98>)
  41dbf2:	4798      	blx	r3
            break;
  41dbf4:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41dbf6:	2111      	movs	r1, #17
  41dbf8:	4620      	mov	r0, r4
  41dbfa:	4b0b      	ldr	r3, [pc, #44]	; (41dc28 <lv_btn_set_state+0x98>)
  41dbfc:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED);
  41dbfe:	2120      	movs	r1, #32
  41dc00:	4620      	mov	r0, r4
  41dc02:	4b0a      	ldr	r3, [pc, #40]	; (41dc2c <lv_btn_set_state+0x9c>)
  41dc04:	4798      	blx	r3
            break;
  41dc06:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED);
  41dc08:	2110      	movs	r1, #16
  41dc0a:	4620      	mov	r0, r4
  41dc0c:	4b06      	ldr	r3, [pc, #24]	; (41dc28 <lv_btn_set_state+0x98>)
  41dc0e:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
  41dc10:	2121      	movs	r1, #33	; 0x21
  41dc12:	4620      	mov	r0, r4
  41dc14:	4b05      	ldr	r3, [pc, #20]	; (41dc2c <lv_btn_set_state+0x9c>)
  41dc16:	4798      	blx	r3
  41dc18:	bd38      	pop	{r3, r4, r5, pc}
  41dc1a:	bf00      	nop
  41dc1c:	00415e79 	.word	0x00415e79
  41dc20:	0042c168 	.word	0x0042c168
  41dc24:	00415e85 	.word	0x00415e85
  41dc28:	00408fed 	.word	0x00408fed
  41dc2c:	00408fb1 	.word	0x00408fb1

0041dc30 <lv_btn_get_checkable>:
{
  41dc30:	b510      	push	{r4, lr}
  41dc32:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41dc34:	4b07      	ldr	r3, [pc, #28]	; (41dc54 <lv_btn_get_checkable+0x24>)
  41dc36:	4798      	blx	r3
  41dc38:	b928      	cbnz	r0, 41dc46 <lv_btn_get_checkable+0x16>
  41dc3a:	4622      	mov	r2, r4
  41dc3c:	2300      	movs	r3, #0
  41dc3e:	4806      	ldr	r0, [pc, #24]	; (41dc58 <lv_btn_get_checkable+0x28>)
  41dc40:	4906      	ldr	r1, [pc, #24]	; (41dc5c <lv_btn_get_checkable+0x2c>)
  41dc42:	4788      	blx	r1
  41dc44:	e7fe      	b.n	41dc44 <lv_btn_get_checkable+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
  41dc46:	4620      	mov	r0, r4
  41dc48:	4b05      	ldr	r3, [pc, #20]	; (41dc60 <lv_btn_get_checkable+0x30>)
  41dc4a:	4798      	blx	r3
    return ext->checkable != 0 ? true : false;
  41dc4c:	7880      	ldrb	r0, [r0, #2]
}
  41dc4e:	f000 0001 	and.w	r0, r0, #1
  41dc52:	bd10      	pop	{r4, pc}
  41dc54:	00415e79 	.word	0x00415e79
  41dc58:	0042c168 	.word	0x0042c168
  41dc5c:	00415e85 	.word	0x00415e85
  41dc60:	00408095 	.word	0x00408095

0041dc64 <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
  41dc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41dc68:	b082      	sub	sp, #8
  41dc6a:	4606      	mov	r6, r0
  41dc6c:	460d      	mov	r5, r1
  41dc6e:	4617      	mov	r7, r2
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
  41dc70:	4b36      	ldr	r3, [pc, #216]	; (41dd4c <lv_btn_signal+0xe8>)
  41dc72:	681b      	ldr	r3, [r3, #0]
  41dc74:	4798      	blx	r3
  41dc76:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
  41dc78:	2801      	cmp	r0, #1
  41dc7a:	d003      	beq.n	41dc84 <lv_btn_signal+0x20>
        }
#endif
    }

    return res;
}
  41dc7c:	4620      	mov	r0, r4
  41dc7e:	b002      	add	sp, #8
  41dc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41dc84:	2d07      	cmp	r5, #7
  41dc86:	d023      	beq.n	41dcd0 <lv_btn_signal+0x6c>
    bool tgl           = lv_btn_get_checkable(btn);
  41dc88:	4630      	mov	r0, r6
  41dc8a:	4b31      	ldr	r3, [pc, #196]	; (41dd50 <lv_btn_signal+0xec>)
  41dc8c:	4798      	blx	r3
  41dc8e:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_RELEASED) {
  41dc90:	2d0e      	cmp	r5, #14
  41dc92:	d023      	beq.n	41dcdc <lv_btn_signal+0x78>
    else if(sign == LV_SIGNAL_CONTROL) {
  41dc94:	2d18      	cmp	r5, #24
  41dc96:	d1f1      	bne.n	41dc7c <lv_btn_signal+0x18>
        char c = *((char *)param);
  41dc98:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
  41dc9a:	2b11      	cmp	r3, #17
  41dc9c:	bf18      	it	ne
  41dc9e:	2b13      	cmpne	r3, #19
  41dca0:	d040      	beq.n	41dd24 <lv_btn_signal+0xc0>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
  41dca2:	2b12      	cmp	r3, #18
  41dca4:	bf18      	it	ne
  41dca6:	2b14      	cmpne	r3, #20
  41dca8:	d1e8      	bne.n	41dc7c <lv_btn_signal+0x18>
            if(lv_btn_get_checkable(btn)) {
  41dcaa:	4630      	mov	r0, r6
  41dcac:	4b28      	ldr	r3, [pc, #160]	; (41dd50 <lv_btn_signal+0xec>)
  41dcae:	4798      	blx	r3
  41dcb0:	2800      	cmp	r0, #0
  41dcb2:	d0e3      	beq.n	41dc7c <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41dcb4:	2100      	movs	r1, #0
  41dcb6:	4630      	mov	r0, r6
  41dcb8:	4b26      	ldr	r3, [pc, #152]	; (41dd54 <lv_btn_signal+0xf0>)
  41dcba:	4798      	blx	r3
                uint32_t state = 0;
  41dcbc:	aa02      	add	r2, sp, #8
  41dcbe:	2300      	movs	r3, #0
  41dcc0:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41dcc4:	2110      	movs	r1, #16
  41dcc6:	4630      	mov	r0, r6
  41dcc8:	4b23      	ldr	r3, [pc, #140]	; (41dd58 <lv_btn_signal+0xf4>)
  41dcca:	4798      	blx	r3
  41dccc:	4604      	mov	r4, r0
  41dcce:	e7d5      	b.n	41dc7c <lv_btn_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41dcd0:	4922      	ldr	r1, [pc, #136]	; (41dd5c <lv_btn_signal+0xf8>)
  41dcd2:	4638      	mov	r0, r7
  41dcd4:	4b22      	ldr	r3, [pc, #136]	; (41dd60 <lv_btn_signal+0xfc>)
  41dcd6:	4798      	blx	r3
  41dcd8:	4604      	mov	r4, r0
  41dcda:	e7cf      	b.n	41dc7c <lv_btn_signal+0x18>
        if(lv_indev_is_dragging(param) == false && tgl) {
  41dcdc:	4638      	mov	r0, r7
  41dcde:	4b21      	ldr	r3, [pc, #132]	; (41dd64 <lv_btn_signal+0x100>)
  41dce0:	4798      	blx	r3
  41dce2:	2800      	cmp	r0, #0
  41dce4:	d1ca      	bne.n	41dc7c <lv_btn_signal+0x18>
  41dce6:	f1b8 0f00 	cmp.w	r8, #0
  41dcea:	d0c7      	beq.n	41dc7c <lv_btn_signal+0x18>
            uint32_t toggled = 0;
  41dcec:	2100      	movs	r1, #0
  41dcee:	9101      	str	r1, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
  41dcf0:	4630      	mov	r0, r6
  41dcf2:	4b1d      	ldr	r3, [pc, #116]	; (41dd68 <lv_btn_signal+0x104>)
  41dcf4:	4798      	blx	r3
  41dcf6:	f010 0f01 	tst.w	r0, #1
  41dcfa:	d00c      	beq.n	41dd16 <lv_btn_signal+0xb2>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41dcfc:	2100      	movs	r1, #0
  41dcfe:	4630      	mov	r0, r6
  41dd00:	4b14      	ldr	r3, [pc, #80]	; (41dd54 <lv_btn_signal+0xf0>)
  41dd02:	4798      	blx	r3
                toggled = 0;
  41dd04:	2300      	movs	r3, #0
  41dd06:	9301      	str	r3, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
  41dd08:	aa01      	add	r2, sp, #4
  41dd0a:	2110      	movs	r1, #16
  41dd0c:	4630      	mov	r0, r6
  41dd0e:	4b12      	ldr	r3, [pc, #72]	; (41dd58 <lv_btn_signal+0xf4>)
  41dd10:	4798      	blx	r3
  41dd12:	4604      	mov	r4, r0
  41dd14:	e7b2      	b.n	41dc7c <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41dd16:	2103      	movs	r1, #3
  41dd18:	4630      	mov	r0, r6
  41dd1a:	4b0e      	ldr	r3, [pc, #56]	; (41dd54 <lv_btn_signal+0xf0>)
  41dd1c:	4798      	blx	r3
                toggled = 1;
  41dd1e:	2301      	movs	r3, #1
  41dd20:	9301      	str	r3, [sp, #4]
  41dd22:	e7f1      	b.n	41dd08 <lv_btn_signal+0xa4>
            if(lv_btn_get_checkable(btn)) {
  41dd24:	4630      	mov	r0, r6
  41dd26:	4b0a      	ldr	r3, [pc, #40]	; (41dd50 <lv_btn_signal+0xec>)
  41dd28:	4798      	blx	r3
  41dd2a:	2800      	cmp	r0, #0
  41dd2c:	d0a6      	beq.n	41dc7c <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41dd2e:	2103      	movs	r1, #3
  41dd30:	4630      	mov	r0, r6
  41dd32:	4b08      	ldr	r3, [pc, #32]	; (41dd54 <lv_btn_signal+0xf0>)
  41dd34:	4798      	blx	r3
                uint32_t state = 1;
  41dd36:	aa02      	add	r2, sp, #8
  41dd38:	2301      	movs	r3, #1
  41dd3a:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41dd3e:	2110      	movs	r1, #16
  41dd40:	4630      	mov	r0, r6
  41dd42:	4b05      	ldr	r3, [pc, #20]	; (41dd58 <lv_btn_signal+0xf4>)
  41dd44:	4798      	blx	r3
  41dd46:	4604      	mov	r4, r0
  41dd48:	e798      	b.n	41dc7c <lv_btn_signal+0x18>
  41dd4a:	bf00      	nop
  41dd4c:	20414854 	.word	0x20414854
  41dd50:	0041dc31 	.word	0x0041dc31
  41dd54:	0041db91 	.word	0x0041db91
  41dd58:	0040589d 	.word	0x0040589d
  41dd5c:	0042f87c 	.word	0x0042f87c
  41dd60:	00408321 	.word	0x00408321
  41dd64:	00404d41 	.word	0x00404d41
  41dd68:	00406de1 	.word	0x00406de1

0041dd6c <get_button_width>:
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnmatrix_ctrl_t ctrl_bits)
{
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
    return w != 0 ? w : 1;
  41dd6c:	f010 0007 	ands.w	r0, r0, #7
  41dd70:	d100      	bne.n	41dd74 <get_button_width+0x8>
  41dd72:	2001      	movs	r0, #1
}
  41dd74:	4770      	bx	lr

0041dd76 <button_is_hidden>:

static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
}
  41dd76:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  41dd7a:	4770      	bx	lr

0041dd7c <button_is_repeat_disabled>:

static bool button_is_repeat_disabled(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
}
  41dd7c:	f3c0 1000 	ubfx	r0, r0, #4, #1
  41dd80:	4770      	bx	lr

0041dd82 <button_is_inactive>:

static bool button_is_inactive(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
}
  41dd82:	f3c0 1040 	ubfx	r0, r0, #5, #1
  41dd86:	4770      	bx	lr

0041dd88 <button_is_click_trig>:

static bool button_is_click_trig(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
}
  41dd88:	f3c0 2000 	ubfx	r0, r0, #8, #1
  41dd8c:	4770      	bx	lr

0041dd8e <button_is_tgl_enabled>:

static bool button_is_tgl_enabled(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKABLE) ? true : false;
}
  41dd8e:	f3c0 1080 	ubfx	r0, r0, #6, #1
  41dd92:	4770      	bx	lr

0041dd94 <button_get_tgl_state>:

static bool button_get_tgl_state(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECK_STATE) ? true : false;
}
  41dd94:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  41dd98:	4770      	bx	lr
	...

0041dd9c <lv_btnmatrix_get_style>:
{
  41dd9c:	b538      	push	{r3, r4, r5, lr}
  41dd9e:	4604      	mov	r4, r0
  41dda0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41dda2:	4b0b      	ldr	r3, [pc, #44]	; (41ddd0 <lv_btnmatrix_get_style+0x34>)
  41dda4:	4798      	blx	r3
  41dda6:	b928      	cbnz	r0, 41ddb4 <lv_btnmatrix_get_style+0x18>
  41dda8:	4622      	mov	r2, r4
  41ddaa:	2300      	movs	r3, #0
  41ddac:	4809      	ldr	r0, [pc, #36]	; (41ddd4 <lv_btnmatrix_get_style+0x38>)
  41ddae:	490a      	ldr	r1, [pc, #40]	; (41ddd8 <lv_btnmatrix_get_style+0x3c>)
  41ddb0:	4788      	blx	r1
  41ddb2:	e7fe      	b.n	41ddb2 <lv_btnmatrix_get_style+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41ddb4:	4620      	mov	r0, r4
  41ddb6:	4b09      	ldr	r3, [pc, #36]	; (41dddc <lv_btnmatrix_get_style+0x40>)
  41ddb8:	4798      	blx	r3
    switch(part) {
  41ddba:	b11d      	cbz	r5, 41ddc4 <lv_btnmatrix_get_style+0x28>
  41ddbc:	2d01      	cmp	r5, #1
  41ddbe:	d004      	beq.n	41ddca <lv_btnmatrix_get_style+0x2e>
            style_dsc_p = NULL;
  41ddc0:	2000      	movs	r0, #0
}
  41ddc2:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &btnm->style_list;
  41ddc4:	f104 0028 	add.w	r0, r4, #40	; 0x28
            break;
  41ddc8:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_btn;
  41ddca:	300c      	adds	r0, #12
            break;
  41ddcc:	bd38      	pop	{r3, r4, r5, pc}
  41ddce:	bf00      	nop
  41ddd0:	00415e79 	.word	0x00415e79
  41ddd4:	0042c168 	.word	0x0042c168
  41ddd8:	00415e85 	.word	0x00415e85
  41dddc:	00408095 	.word	0x00408095

0041dde0 <get_button_from_point>:
 * @param btnm pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNMATRIX_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)
{
  41dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41dde4:	b087      	sub	sp, #28
  41dde6:	4604      	mov	r4, r0
  41dde8:	9101      	str	r1, [sp, #4]
    lv_area_t btnm_cords;
    lv_area_t btn_area;
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41ddea:	4b69      	ldr	r3, [pc, #420]	; (41df90 <get_button_from_point+0x1b0>)
  41ddec:	4798      	blx	r3
  41ddee:	4606      	mov	r6, r0
    uint16_t i;
    lv_obj_get_coords(btnm, &btnm_cords);
  41ddf0:	a904      	add	r1, sp, #16
  41ddf2:	4620      	mov	r0, r4
  41ddf4:	4b67      	ldr	r3, [pc, #412]	; (41df94 <get_button_from_point+0x1b4>)
  41ddf6:	4798      	blx	r3

    lv_coord_t w = lv_obj_get_width(btnm);
  41ddf8:	4620      	mov	r0, r4
  41ddfa:	4b67      	ldr	r3, [pc, #412]	; (41df98 <get_button_from_point+0x1b8>)
  41ddfc:	4798      	blx	r3
  41ddfe:	9000      	str	r0, [sp, #0]
    lv_coord_t h = lv_obj_get_height(btnm);
  41de00:	4620      	mov	r0, r4
  41de02:	4b66      	ldr	r3, [pc, #408]	; (41df9c <get_button_from_point+0x1bc>)
  41de04:	4798      	blx	r3
  41de06:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41de08:	2212      	movs	r2, #18
  41de0a:	2100      	movs	r1, #0
  41de0c:	4620      	mov	r0, r4
  41de0e:	4d64      	ldr	r5, [pc, #400]	; (41dfa0 <get_button_from_point+0x1c0>)
  41de10:	47a8      	blx	r5
  41de12:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41de14:	2213      	movs	r2, #19
  41de16:	2100      	movs	r1, #0
  41de18:	4620      	mov	r0, r4
  41de1a:	47a8      	blx	r5
  41de1c:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41de1e:	2210      	movs	r2, #16
  41de20:	2100      	movs	r1, #0
  41de22:	4620      	mov	r0, r4
  41de24:	47a8      	blx	r5
  41de26:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41de28:	2211      	movs	r2, #17
  41de2a:	2100      	movs	r1, #0
  41de2c:	4620      	mov	r0, r4
  41de2e:	47a8      	blx	r5
  41de30:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41de32:	2214      	movs	r2, #20
  41de34:	2100      	movs	r1, #0
  41de36:	4620      	mov	r0, r4
  41de38:	47a8      	blx	r5
    lv_style_int_t ptop = lv_obj_get_style_pad_top(btnm, LV_BTNMATRIX_PART_BG);
    lv_style_int_t pbottom = lv_obj_get_style_pad_bottom(btnm, LV_BTNMATRIX_PART_BG);
    lv_style_int_t pinner = lv_obj_get_style_pad_inner(btnm, LV_BTNMATRIX_PART_BG);

    /*Get the half inner padding. Button look larger with this value. (+1 for rounding error)*/
    pinner = (pinner / 2) + 1 + (pinner & 1);
  41de3a:	f000 0501 	and.w	r5, r0, #1
  41de3e:	4603      	mov	r3, r0
  41de40:	2800      	cmp	r0, #0
  41de42:	db1a      	blt.n	41de7a <get_button_from_point+0x9a>
  41de44:	eb05 0563 	add.w	r5, r5, r3, asr #1
  41de48:	3501      	adds	r5, #1
  41de4a:	b22d      	sxth	r5, r5

    pinner = LV_MATH_MIN(pinner, BTN_EXTRA_CLICK_AREA_MAX);
  41de4c:	2d25      	cmp	r5, #37	; 0x25
  41de4e:	bfa8      	it	ge
  41de50:	2525      	movge	r5, #37	; 0x25
    pright = LV_MATH_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
  41de52:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
  41de56:	bfa8      	it	ge
  41de58:	f04f 0925 	movge.w	r9, #37	; 0x25
  41de5c:	fa0f f989 	sxth.w	r9, r9
    ptop = LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
  41de60:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
  41de64:	bfa8      	it	ge
  41de66:	f04f 0825 	movge.w	r8, #37	; 0x25
  41de6a:	fa0f f888 	sxth.w	r8, r8
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
  41de6e:	2f25      	cmp	r7, #37	; 0x25
  41de70:	bfa8      	it	ge
  41de72:	2725      	movge	r7, #37	; 0x25
  41de74:	b23f      	sxth	r7, r7

    for(i = 0; i < ext->btn_cnt; i++) {
  41de76:	2400      	movs	r4, #0
  41de78:	e057      	b.n	41df2a <get_button_from_point+0x14a>
    pinner = (pinner / 2) + 1 + (pinner & 1);
  41de7a:	1c43      	adds	r3, r0, #1
  41de7c:	e7e2      	b.n	41de44 <get_button_from_point+0x64>
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  41de7e:	f812 0b01 	ldrb.w	r0, [r2], #1
  41de82:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  41de86:	3b01      	subs	r3, #1
    while(len) {
  41de88:	2b00      	cmp	r3, #0
  41de8a:	d1f8      	bne.n	41de7e <get_button_from_point+0x9e>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
  41de8c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  41de90:	4553      	cmp	r3, sl
  41de92:	dc53      	bgt.n	41df3c <get_button_from_point+0x15c>
  41de94:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  41de98:	4651      	mov	r1, sl
  41de9a:	2925      	cmp	r1, #37	; 0x25
  41de9c:	bfa8      	it	ge
  41de9e:	2125      	movge	r1, #37	; 0x25
  41dea0:	b289      	uxth	r1, r1
  41dea2:	1a52      	subs	r2, r2, r1
  41dea4:	fa13 f382 	uxtah	r3, r3, r2
  41dea8:	f8ad 3008 	strh.w	r3, [sp, #8]
        else btn_area.x1 += btnm_cords.x1 - pinner;

        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
  41deac:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  41deb0:	4598      	cmp	r8, r3
  41deb2:	db4b      	blt.n	41df4c <get_button_from_point+0x16c>
  41deb4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  41deb8:	4641      	mov	r1, r8
  41deba:	2925      	cmp	r1, #37	; 0x25
  41debc:	bfa8      	it	ge
  41debe:	2125      	movge	r1, #37	; 0x25
  41dec0:	b289      	uxth	r1, r1
  41dec2:	1a52      	subs	r2, r2, r1
  41dec4:	fa13 f382 	uxtah	r3, r3, r2
  41dec8:	f8ad 300a 	strh.w	r3, [sp, #10]
        else btn_area.y1 += btnm_cords.y1 - pinner;

        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
  41decc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  41ded0:	9b00      	ldr	r3, [sp, #0]
  41ded2:	eba3 0309 	sub.w	r3, r3, r9
  41ded6:	3b02      	subs	r3, #2
  41ded8:	429a      	cmp	r2, r3
  41deda:	db3f      	blt.n	41df5c <get_button_from_point+0x17c>
  41dedc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
  41dee0:	464b      	mov	r3, r9
  41dee2:	2b25      	cmp	r3, #37	; 0x25
  41dee4:	bfa8      	it	ge
  41dee6:	2325      	movge	r3, #37	; 0x25
  41dee8:	fa11 f383 	uxtah	r3, r1, r3
  41deec:	fa12 f283 	uxtah	r2, r2, r3
  41def0:	f8ad 200c 	strh.w	r2, [sp, #12]
                                                                                         BTN_EXTRA_CLICK_AREA_MAX);  /*-2 for rounding error*/
        else btn_area.x2 += btnm_cords.x1 + pinner;

        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
  41def4:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
  41def8:	ebab 0307 	sub.w	r3, fp, r7
  41defc:	3b02      	subs	r3, #2
  41defe:	429a      	cmp	r2, r3
  41df00:	db34      	blt.n	41df6c <get_button_from_point+0x18c>
  41df02:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  41df06:	463b      	mov	r3, r7
  41df08:	2f25      	cmp	r7, #37	; 0x25
  41df0a:	bfa8      	it	ge
  41df0c:	2325      	movge	r3, #37	; 0x25
  41df0e:	fa11 f383 	uxtah	r3, r1, r3
  41df12:	fa12 f283 	uxtah	r2, r2, r3
  41df16:	f8ad 200e 	strh.w	r2, [sp, #14]
                                                                                          BTN_EXTRA_CLICK_AREA_MAX); /*-2 for rounding error*/
        else btn_area.y2 += btnm_cords.y1 + pinner;

        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
  41df1a:	2200      	movs	r2, #0
  41df1c:	9901      	ldr	r1, [sp, #4]
  41df1e:	a802      	add	r0, sp, #8
  41df20:	4b20      	ldr	r3, [pc, #128]	; (41dfa4 <get_button_from_point+0x1c4>)
  41df22:	4798      	blx	r3
  41df24:	bb50      	cbnz	r0, 41df7c <get_button_from_point+0x19c>
    for(i = 0; i < ext->btn_cnt; i++) {
  41df26:	3401      	adds	r4, #1
  41df28:	b2a4      	uxth	r4, r4
  41df2a:	8ab3      	ldrh	r3, [r6, #20]
  41df2c:	429c      	cmp	r4, r3
  41df2e:	d225      	bcs.n	41df7c <get_button_from_point+0x19c>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
  41df30:	6872      	ldr	r2, [r6, #4]
  41df32:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    uint8_t * d8 = (uint8_t *)dst;
  41df36:	a902      	add	r1, sp, #8
  41df38:	2308      	movs	r3, #8
  41df3a:	e7a5      	b.n	41de88 <get_button_from_point+0xa8>
        else btn_area.x1 += btnm_cords.x1 - pinner;
  41df3c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  41df40:	1b52      	subs	r2, r2, r5
  41df42:	fa13 f382 	uxtah	r3, r3, r2
  41df46:	f8ad 3008 	strh.w	r3, [sp, #8]
  41df4a:	e7af      	b.n	41deac <get_button_from_point+0xcc>
        else btn_area.y1 += btnm_cords.y1 - pinner;
  41df4c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  41df50:	1b52      	subs	r2, r2, r5
  41df52:	fa13 f382 	uxtah	r3, r3, r2
  41df56:	f8ad 300a 	strh.w	r3, [sp, #10]
  41df5a:	e7b7      	b.n	41decc <get_button_from_point+0xec>
        else btn_area.x2 += btnm_cords.x1 + pinner;
  41df5c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  41df60:	442b      	add	r3, r5
  41df62:	fa12 f283 	uxtah	r2, r2, r3
  41df66:	f8ad 200c 	strh.w	r2, [sp, #12]
  41df6a:	e7c3      	b.n	41def4 <get_button_from_point+0x114>
        else btn_area.y2 += btnm_cords.y1 + pinner;
  41df6c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  41df70:	442b      	add	r3, r5
  41df72:	fa12 f283 	uxtah	r2, r2, r3
  41df76:	f8ad 200e 	strh.w	r2, [sp, #14]
  41df7a:	e7ce      	b.n	41df1a <get_button_from_point+0x13a>
            break;
        }
    }

    if(i == ext->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
  41df7c:	8ab3      	ldrh	r3, [r6, #20]
  41df7e:	429c      	cmp	r4, r3
  41df80:	d003      	beq.n	41df8a <get_button_from_point+0x1aa>

    return i;
}
  41df82:	4620      	mov	r0, r4
  41df84:	b007      	add	sp, #28
  41df86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i == ext->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
  41df8a:	f64f 74ff 	movw	r4, #65535	; 0xffff
  41df8e:	e7f8      	b.n	41df82 <get_button_from_point+0x1a2>
  41df90:	00408095 	.word	0x00408095
  41df94:	00405ac1 	.word	0x00405ac1
  41df98:	00405b81 	.word	0x00405b81
  41df9c:	00405bb1 	.word	0x00405bb1
  41dfa0:	00407445 	.word	0x00407445
  41dfa4:	00415655 	.word	0x00415655

0041dfa8 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
  41dfa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41dfac:	4299      	cmp	r1, r3
  41dfae:	d034      	beq.n	41e01a <invalidate_button_area+0x72>
{
  41dfb0:	b530      	push	{r4, r5, lr}
  41dfb2:	b085      	sub	sp, #20
  41dfb4:	460c      	mov	r4, r1
  41dfb6:	4605      	mov	r5, r0

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41dfb8:	4b18      	ldr	r3, [pc, #96]	; (41e01c <invalidate_button_area+0x74>)
  41dfba:	4798      	blx	r3
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
  41dfbc:	6841      	ldr	r1, [r0, #4]
  41dfbe:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
  41dfc2:	aa02      	add	r2, sp, #8
  41dfc4:	2308      	movs	r3, #8
  41dfc6:	e004      	b.n	41dfd2 <invalidate_button_area+0x2a>
        *d8 = *s8;
  41dfc8:	f811 4b01 	ldrb.w	r4, [r1], #1
  41dfcc:	f802 4b01 	strb.w	r4, [r2], #1
        len--;
  41dfd0:	3b01      	subs	r3, #1
    while(len) {
  41dfd2:	2b00      	cmp	r3, #0
  41dfd4:	d1f8      	bne.n	41dfc8 <invalidate_button_area+0x20>
    lv_obj_get_coords(btnm, &btnm_area);
  41dfd6:	4669      	mov	r1, sp
  41dfd8:	4628      	mov	r0, r5
  41dfda:	4b11      	ldr	r3, [pc, #68]	; (41e020 <invalidate_button_area+0x78>)
  41dfdc:	4798      	blx	r3

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
  41dfde:	f8bd 2000 	ldrh.w	r2, [sp]
  41dfe2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  41dfe6:	4413      	add	r3, r2
  41dfe8:	f8ad 3008 	strh.w	r3, [sp, #8]
    btn_area.y1 += btnm_area.y1;
  41dfec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41dff0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
  41dff4:	4419      	add	r1, r3
  41dff6:	f8ad 100a 	strh.w	r1, [sp, #10]
    btn_area.x2 += btnm_area.x1;
  41dffa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  41dffe:	440a      	add	r2, r1
  41e000:	f8ad 200c 	strh.w	r2, [sp, #12]
    btn_area.y2 += btnm_area.y1;
  41e004:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  41e008:	4413      	add	r3, r2
  41e00a:	f8ad 300e 	strh.w	r3, [sp, #14]

    lv_obj_invalidate_area(btnm, &btn_area);
  41e00e:	a902      	add	r1, sp, #8
  41e010:	4628      	mov	r0, r5
  41e012:	4b04      	ldr	r3, [pc, #16]	; (41e024 <invalidate_button_area+0x7c>)
  41e014:	4798      	blx	r3
}
  41e016:	b005      	add	sp, #20
  41e018:	bd30      	pop	{r4, r5, pc}
  41e01a:	4770      	bx	lr
  41e01c:	00408095 	.word	0x00408095
  41e020:	00405ac1 	.word	0x00405ac1
  41e024:	00405ef5 	.word	0x00405ef5

0041e028 <allocate_btn_areas_and_controls>:
{
  41e028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e02a:	4606      	mov	r6, r0
  41e02c:	460f      	mov	r7, r1
    uint16_t i       = 0;
  41e02e:	2400      	movs	r4, #0
    uint16_t btn_cnt = 0;
  41e030:	4625      	mov	r5, r4
    while(strlen(map[i]) != 0) {
  41e032:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
  41e036:	7803      	ldrb	r3, [r0, #0]
  41e038:	b9fb      	cbnz	r3, 41e07a <allocate_btn_areas_and_controls+0x52>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e03a:	4630      	mov	r0, r6
  41e03c:	4b20      	ldr	r3, [pc, #128]	; (41e0c0 <allocate_btn_areas_and_controls+0x98>)
  41e03e:	4798      	blx	r3
  41e040:	4604      	mov	r4, r0
    if(btn_cnt == ext->btn_cnt) return;
  41e042:	8a83      	ldrh	r3, [r0, #20]
  41e044:	429d      	cmp	r5, r3
  41e046:	d03a      	beq.n	41e0be <allocate_btn_areas_and_controls+0x96>
    if(ext->button_areas != NULL) {
  41e048:	6840      	ldr	r0, [r0, #4]
  41e04a:	b118      	cbz	r0, 41e054 <allocate_btn_areas_and_controls+0x2c>
        lv_mem_free(ext->button_areas);
  41e04c:	4b1d      	ldr	r3, [pc, #116]	; (41e0c4 <allocate_btn_areas_and_controls+0x9c>)
  41e04e:	4798      	blx	r3
        ext->button_areas = NULL;
  41e050:	2300      	movs	r3, #0
  41e052:	6063      	str	r3, [r4, #4]
    if(ext->ctrl_bits != NULL) {
  41e054:	68a0      	ldr	r0, [r4, #8]
  41e056:	b118      	cbz	r0, 41e060 <allocate_btn_areas_and_controls+0x38>
        lv_mem_free(ext->ctrl_bits);
  41e058:	4b1a      	ldr	r3, [pc, #104]	; (41e0c4 <allocate_btn_areas_and_controls+0x9c>)
  41e05a:	4798      	blx	r3
        ext->ctrl_bits = NULL;
  41e05c:	2300      	movs	r3, #0
  41e05e:	60a3      	str	r3, [r4, #8]
    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
  41e060:	00e8      	lsls	r0, r5, #3
  41e062:	4b19      	ldr	r3, [pc, #100]	; (41e0c8 <allocate_btn_areas_and_controls+0xa0>)
  41e064:	4798      	blx	r3
  41e066:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MEM(ext->button_areas);
  41e068:	4b18      	ldr	r3, [pc, #96]	; (41e0cc <allocate_btn_areas_and_controls+0xa4>)
  41e06a:	4798      	blx	r3
  41e06c:	b970      	cbnz	r0, 41e08c <allocate_btn_areas_and_controls+0x64>
  41e06e:	6862      	ldr	r2, [r4, #4]
  41e070:	2300      	movs	r3, #0
  41e072:	4817      	ldr	r0, [pc, #92]	; (41e0d0 <allocate_btn_areas_and_controls+0xa8>)
  41e074:	4917      	ldr	r1, [pc, #92]	; (41e0d4 <allocate_btn_areas_and_controls+0xac>)
  41e076:	4788      	blx	r1
  41e078:	e7fe      	b.n	41e078 <allocate_btn_areas_and_controls+0x50>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
  41e07a:	4917      	ldr	r1, [pc, #92]	; (41e0d8 <allocate_btn_areas_and_controls+0xb0>)
  41e07c:	4b17      	ldr	r3, [pc, #92]	; (41e0dc <allocate_btn_areas_and_controls+0xb4>)
  41e07e:	4798      	blx	r3
  41e080:	b108      	cbz	r0, 41e086 <allocate_btn_areas_and_controls+0x5e>
            btn_cnt++;
  41e082:	3501      	adds	r5, #1
  41e084:	b2ad      	uxth	r5, r5
        i++;
  41e086:	3401      	adds	r4, #1
  41e088:	b2a4      	uxth	r4, r4
  41e08a:	e7d2      	b.n	41e032 <allocate_btn_areas_and_controls+0xa>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
  41e08c:	0068      	lsls	r0, r5, #1
  41e08e:	4b0e      	ldr	r3, [pc, #56]	; (41e0c8 <allocate_btn_areas_and_controls+0xa0>)
  41e090:	4798      	blx	r3
  41e092:	60a0      	str	r0, [r4, #8]
    LV_ASSERT_MEM(ext->ctrl_bits);
  41e094:	4b0d      	ldr	r3, [pc, #52]	; (41e0cc <allocate_btn_areas_and_controls+0xa4>)
  41e096:	4798      	blx	r3
  41e098:	b928      	cbnz	r0, 41e0a6 <allocate_btn_areas_and_controls+0x7e>
  41e09a:	68a2      	ldr	r2, [r4, #8]
  41e09c:	2300      	movs	r3, #0
  41e09e:	480c      	ldr	r0, [pc, #48]	; (41e0d0 <allocate_btn_areas_and_controls+0xa8>)
  41e0a0:	490c      	ldr	r1, [pc, #48]	; (41e0d4 <allocate_btn_areas_and_controls+0xac>)
  41e0a2:	4788      	blx	r1
  41e0a4:	e7fe      	b.n	41e0a4 <allocate_btn_areas_and_controls+0x7c>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
  41e0a6:	6863      	ldr	r3, [r4, #4]
  41e0a8:	b11b      	cbz	r3, 41e0b2 <allocate_btn_areas_and_controls+0x8a>
  41e0aa:	68a3      	ldr	r3, [r4, #8]
  41e0ac:	b913      	cbnz	r3, 41e0b4 <allocate_btn_areas_and_controls+0x8c>
  41e0ae:	2500      	movs	r5, #0
  41e0b0:	e000      	b.n	41e0b4 <allocate_btn_areas_and_controls+0x8c>
  41e0b2:	2500      	movs	r5, #0
    _lv_memset_00(ext->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
  41e0b4:	0069      	lsls	r1, r5, #1
  41e0b6:	68a0      	ldr	r0, [r4, #8]
  41e0b8:	4b09      	ldr	r3, [pc, #36]	; (41e0e0 <allocate_btn_areas_and_controls+0xb8>)
  41e0ba:	4798      	blx	r3
    ext->btn_cnt = btn_cnt;
  41e0bc:	82a5      	strh	r5, [r4, #20]
  41e0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e0c0:	00408095 	.word	0x00408095
  41e0c4:	00416681 	.word	0x00416681
  41e0c8:	004165bd 	.word	0x004165bd
  41e0cc:	00415e79 	.word	0x00415e79
  41e0d0:	0042c154 	.word	0x0042c154
  41e0d4:	00415e85 	.word	0x00415e85
  41e0d8:	0042f884 	.word	0x0042f884
  41e0dc:	00427c49 	.word	0x00427c49
  41e0e0:	00416af1 	.word	0x00416af1

0041e0e4 <lv_btnmatrix_set_map>:
{
  41e0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e0e8:	b097      	sub	sp, #92	; 0x5c
  41e0ea:	4604      	mov	r4, r0
  41e0ec:	9009      	str	r0, [sp, #36]	; 0x24
  41e0ee:	4688      	mov	r8, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e0f0:	4ba8      	ldr	r3, [pc, #672]	; (41e394 <lv_btnmatrix_set_map+0x2b0>)
  41e0f2:	4798      	blx	r3
  41e0f4:	b928      	cbnz	r0, 41e102 <lv_btnmatrix_set_map+0x1e>
  41e0f6:	4622      	mov	r2, r4
  41e0f8:	2300      	movs	r3, #0
  41e0fa:	48a7      	ldr	r0, [pc, #668]	; (41e398 <lv_btnmatrix_set_map+0x2b4>)
  41e0fc:	49a7      	ldr	r1, [pc, #668]	; (41e39c <lv_btnmatrix_set_map+0x2b8>)
  41e0fe:	4788      	blx	r1
  41e100:	e7fe      	b.n	41e100 <lv_btnmatrix_set_map+0x1c>
    LV_ASSERT_NULL(map);
  41e102:	4640      	mov	r0, r8
  41e104:	4ba3      	ldr	r3, [pc, #652]	; (41e394 <lv_btnmatrix_set_map+0x2b0>)
  41e106:	4798      	blx	r3
  41e108:	b928      	cbnz	r0, 41e116 <lv_btnmatrix_set_map+0x32>
  41e10a:	4642      	mov	r2, r8
  41e10c:	2300      	movs	r3, #0
  41e10e:	48a2      	ldr	r0, [pc, #648]	; (41e398 <lv_btnmatrix_set_map+0x2b4>)
  41e110:	49a2      	ldr	r1, [pc, #648]	; (41e39c <lv_btnmatrix_set_map+0x2b8>)
  41e112:	4788      	blx	r1
  41e114:	e7fe      	b.n	41e114 <lv_btnmatrix_set_map+0x30>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e116:	9e09      	ldr	r6, [sp, #36]	; 0x24
  41e118:	4630      	mov	r0, r6
  41e11a:	4ba1      	ldr	r3, [pc, #644]	; (41e3a0 <lv_btnmatrix_set_map+0x2bc>)
  41e11c:	4798      	blx	r3
  41e11e:	4682      	mov	sl, r0
    allocate_btn_areas_and_controls(btnm, map);
  41e120:	4641      	mov	r1, r8
  41e122:	4630      	mov	r0, r6
  41e124:	4b9f      	ldr	r3, [pc, #636]	; (41e3a4 <lv_btnmatrix_set_map+0x2c0>)
  41e126:	4798      	blx	r3
    ext->map_p = map;
  41e128:	f8ca 8000 	str.w	r8, [sl]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e12c:	2212      	movs	r2, #18
  41e12e:	2100      	movs	r1, #0
  41e130:	4630      	mov	r0, r6
  41e132:	4d9d      	ldr	r5, [pc, #628]	; (41e3a8 <lv_btnmatrix_set_map+0x2c4>)
  41e134:	47a8      	blx	r5
  41e136:	4683      	mov	fp, r0
  41e138:	900e      	str	r0, [sp, #56]	; 0x38
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e13a:	2213      	movs	r2, #19
  41e13c:	2100      	movs	r1, #0
  41e13e:	4630      	mov	r0, r6
  41e140:	47a8      	blx	r5
  41e142:	4681      	mov	r9, r0
  41e144:	9014      	str	r0, [sp, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e146:	2210      	movs	r2, #16
  41e148:	2100      	movs	r1, #0
  41e14a:	4630      	mov	r0, r6
  41e14c:	47a8      	blx	r5
  41e14e:	4607      	mov	r7, r0
  41e150:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41e152:	2211      	movs	r2, #17
  41e154:	2100      	movs	r1, #0
  41e156:	4630      	mov	r0, r6
  41e158:	47a8      	blx	r5
  41e15a:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41e15c:	2214      	movs	r2, #20
  41e15e:	2100      	movs	r1, #0
  41e160:	4630      	mov	r0, r6
  41e162:	47a8      	blx	r5
  41e164:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t max_w            = lv_obj_get_width(btnm) - left - right;
  41e166:	4630      	mov	r0, r6
  41e168:	4b90      	ldr	r3, [pc, #576]	; (41e3ac <lv_btnmatrix_set_map+0x2c8>)
  41e16a:	4798      	blx	r3
  41e16c:	b283      	uxth	r3, r0
  41e16e:	fa1f f28b 	uxth.w	r2, fp
  41e172:	920d      	str	r2, [sp, #52]	; 0x34
  41e174:	1a9b      	subs	r3, r3, r2
  41e176:	b29b      	uxth	r3, r3
  41e178:	fa1f f289 	uxth.w	r2, r9
  41e17c:	920f      	str	r2, [sp, #60]	; 0x3c
  41e17e:	1a9b      	subs	r3, r3, r2
  41e180:	b29b      	uxth	r3, r3
  41e182:	9310      	str	r3, [sp, #64]	; 0x40
  41e184:	b21b      	sxth	r3, r3
  41e186:	9311      	str	r3, [sp, #68]	; 0x44
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
  41e188:	4630      	mov	r0, r6
  41e18a:	4b89      	ldr	r3, [pc, #548]	; (41e3b0 <lv_btnmatrix_set_map+0x2cc>)
  41e18c:	4798      	blx	r3
  41e18e:	b286      	uxth	r6, r0
  41e190:	1bf6      	subs	r6, r6, r7
  41e192:	b2b6      	uxth	r6, r6
  41e194:	b2a3      	uxth	r3, r4
  41e196:	9312      	str	r3, [sp, #72]	; 0x48
  41e198:	1af6      	subs	r6, r6, r3
  41e19a:	b2b6      	uxth	r6, r6
    for(li = 0; strlen(map[li]) != 0; li++) {
  41e19c:	2500      	movs	r5, #0
    uint8_t line_cnt = 1;
  41e19e:	2401      	movs	r4, #1
    for(li = 0; strlen(map[li]) != 0; li++) {
  41e1a0:	e001      	b.n	41e1a6 <lv_btnmatrix_set_map+0xc2>
  41e1a2:	3501      	adds	r5, #1
  41e1a4:	b2ed      	uxtb	r5, r5
  41e1a6:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
  41e1aa:	7803      	ldrb	r3, [r0, #0]
  41e1ac:	b13b      	cbz	r3, 41e1be <lv_btnmatrix_set_map+0xda>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
  41e1ae:	4981      	ldr	r1, [pc, #516]	; (41e3b4 <lv_btnmatrix_set_map+0x2d0>)
  41e1b0:	4b81      	ldr	r3, [pc, #516]	; (41e3b8 <lv_btnmatrix_set_map+0x2d4>)
  41e1b2:	4798      	blx	r3
  41e1b4:	2800      	cmp	r0, #0
  41e1b6:	d1f4      	bne.n	41e1a2 <lv_btnmatrix_set_map+0xbe>
  41e1b8:	3401      	adds	r4, #1
  41e1ba:	b2e4      	uxtb	r4, r4
  41e1bc:	e7f1      	b.n	41e1a2 <lv_btnmatrix_set_map+0xbe>
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * inner);
  41e1be:	1e63      	subs	r3, r4, #1
  41e1c0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  41e1c4:	9203      	str	r2, [sp, #12]
  41e1c6:	fb13 f302 	smulbb	r3, r3, r2
  41e1ca:	1af3      	subs	r3, r6, r3
    btn_h            = (btn_h + line_cnt / 2) / line_cnt;
  41e1cc:	0862      	lsrs	r2, r4, #1
  41e1ce:	fa02 f383 	sxtah	r3, r2, r3
  41e1d2:	fb93 f3f4 	sdiv	r3, r3, r4
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
  41e1d6:	3b01      	subs	r3, #1
  41e1d8:	b21b      	sxth	r3, r3
  41e1da:	9305      	str	r3, [sp, #20]
    uint16_t btn_i          = 0; /*Act. index of button areas*/
  41e1dc:	f04f 0b00 	mov.w	fp, #0
  41e1e0:	46d9      	mov	r9, fp
  41e1e2:	e104      	b.n	41e3ee <lv_btnmatrix_set_map+0x30a>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
  41e1e4:	f8da 3008 	ldr.w	r3, [sl, #8]
  41e1e8:	eb09 0206 	add.w	r2, r9, r6
  41e1ec:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
  41e1f0:	4b72      	ldr	r3, [pc, #456]	; (41e3bc <lv_btnmatrix_set_map+0x2d8>)
  41e1f2:	4798      	blx	r3
  41e1f4:	fa14 f480 	uxtah	r4, r4, r0
  41e1f8:	b2a4      	uxth	r4, r4
            btn_cnt++;
  41e1fa:	3601      	adds	r6, #1
  41e1fc:	b2b6      	uxth	r6, r6
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
  41e1fe:	9604      	str	r6, [sp, #16]
  41e200:	eb08 0786 	add.w	r7, r8, r6, lsl #2
  41e204:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
  41e208:	496a      	ldr	r1, [pc, #424]	; (41e3b4 <lv_btnmatrix_set_map+0x2d0>)
  41e20a:	4628      	mov	r0, r5
  41e20c:	4b6a      	ldr	r3, [pc, #424]	; (41e3b8 <lv_btnmatrix_set_map+0x2d4>)
  41e20e:	4798      	blx	r3
  41e210:	b110      	cbz	r0, 41e218 <lv_btnmatrix_set_map+0x134>
  41e212:	782b      	ldrb	r3, [r5, #0]
  41e214:	2b00      	cmp	r3, #0
  41e216:	d1e5      	bne.n	41e1e4 <lv_btnmatrix_set_map+0x100>
  41e218:	9713      	str	r7, [sp, #76]	; 0x4c
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
  41e21a:	782b      	ldrb	r3, [r5, #0]
  41e21c:	b1bb      	cbz	r3, 41e24e <lv_btnmatrix_set_map+0x16a>
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(btnm);
  41e21e:	9809      	ldr	r0, [sp, #36]	; 0x24
  41e220:	4b67      	ldr	r3, [pc, #412]	; (41e3c0 <lv_btnmatrix_set_map+0x2dc>)
  41e222:	4798      	blx	r3
  41e224:	9006      	str	r0, [sp, #24]
        if(btn_cnt != 0) {
  41e226:	2e00      	cmp	r6, #0
  41e228:	f000 80d0 	beq.w	41e3cc <lv_btnmatrix_set_map+0x2e8>
            lv_coord_t all_unit_w = max_w - ((unit_cnt - 1) * inner);
  41e22c:	9407      	str	r4, [sp, #28]
  41e22e:	1e63      	subs	r3, r4, #1
  41e230:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  41e234:	fb13 f302 	smulbb	r3, r3, r2
  41e238:	9a10      	ldr	r2, [sp, #64]	; 0x40
  41e23a:	1ad3      	subs	r3, r2, r3
  41e23c:	b21b      	sxth	r3, r3
  41e23e:	9308      	str	r3, [sp, #32]
            for(i = 0; i < btn_cnt; i++) {
  41e240:	f04f 0b00 	mov.w	fp, #0
            unit_act_cnt = 0;
  41e244:	465f      	mov	r7, fp
  41e246:	960c      	str	r6, [sp, #48]	; 0x30
  41e248:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
            for(i = 0; i < btn_cnt; i++) {
  41e24c:	e042      	b.n	41e2d4 <lv_btnmatrix_set_map+0x1f0>
            btn_h = lv_obj_get_height(btnm) - act_y - bottom - 1;
  41e24e:	9809      	ldr	r0, [sp, #36]	; 0x24
  41e250:	4b57      	ldr	r3, [pc, #348]	; (41e3b0 <lv_btnmatrix_set_map+0x2cc>)
  41e252:	4798      	blx	r3
  41e254:	b283      	uxth	r3, r0
  41e256:	9a02      	ldr	r2, [sp, #8]
  41e258:	1a9b      	subs	r3, r3, r2
  41e25a:	b29b      	uxth	r3, r3
  41e25c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  41e25e:	1a9b      	subs	r3, r3, r2
  41e260:	b29b      	uxth	r3, r3
  41e262:	3b01      	subs	r3, #1
  41e264:	b21b      	sxth	r3, r3
  41e266:	9305      	str	r3, [sp, #20]
  41e268:	e7d9      	b.n	41e21e <lv_btnmatrix_set_map+0x13a>
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner;
  41e26a:	9b08      	ldr	r3, [sp, #32]
  41e26c:	fb03 f807 	mul.w	r8, r3, r7
  41e270:	9b07      	ldr	r3, [sp, #28]
  41e272:	fb98 f8f3 	sdiv	r8, r8, r3
  41e276:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  41e27a:	fb17 8803 	smlabb	r8, r7, r3, r8
  41e27e:	fa1f f888 	uxth.w	r8, r8
                    act_x = lv_obj_get_width(btnm) - right - act_x - act_unit_w - 1;
  41e282:	9809      	ldr	r0, [sp, #36]	; 0x24
  41e284:	4b49      	ldr	r3, [pc, #292]	; (41e3ac <lv_btnmatrix_set_map+0x2c8>)
  41e286:	4798      	blx	r3
  41e288:	b281      	uxth	r1, r0
  41e28a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41e28c:	1ac9      	subs	r1, r1, r3
  41e28e:	b289      	uxth	r1, r1
  41e290:	eba1 0108 	sub.w	r1, r1, r8
  41e294:	b289      	uxth	r1, r1
  41e296:	1b09      	subs	r1, r1, r4
  41e298:	b289      	uxth	r1, r1
  41e29a:	3901      	subs	r1, #1
  41e29c:	b209      	sxth	r1, r1
  41e29e:	e046      	b.n	41e32e <lv_btnmatrix_set_map+0x24a>
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
  41e2a0:	f8da 0004 	ldr.w	r0, [sl, #4]
  41e2a4:	1863      	adds	r3, r4, r1
  41e2a6:	9c02      	ldr	r4, [sp, #8]
  41e2a8:	4622      	mov	r2, r4
  41e2aa:	9e05      	ldr	r6, [sp, #20]
  41e2ac:	4432      	add	r2, r6
  41e2ae:	b212      	sxth	r2, r2
  41e2b0:	9200      	str	r2, [sp, #0]
  41e2b2:	b21b      	sxth	r3, r3
  41e2b4:	4622      	mov	r2, r4
  41e2b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  41e2b8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  41e2bc:	4c41      	ldr	r4, [pc, #260]	; (41e3c4 <lv_btnmatrix_set_map+0x2e0>)
  41e2be:	47a0      	blx	r4
                unit_act_cnt += btn_unit_w;
  41e2c0:	442f      	add	r7, r5
  41e2c2:	b2bf      	uxth	r7, r7
                btn_i++;
  41e2c4:	f109 0901 	add.w	r9, r9, #1
  41e2c8:	fa1f f989 	uxth.w	r9, r9
            for(i = 0; i < btn_cnt; i++) {
  41e2cc:	f10b 0b01 	add.w	fp, fp, #1
  41e2d0:	fa1f fb8b 	uxth.w	fp, fp
  41e2d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41e2d6:	455b      	cmp	r3, fp
  41e2d8:	d976      	bls.n	41e3c8 <lv_btnmatrix_set_map+0x2e4>
                uint8_t btn_unit_w = get_button_width(ext->ctrl_bits[btn_i]);
  41e2da:	f8da 3008 	ldr.w	r3, [sl, #8]
  41e2de:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  41e2e2:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
  41e2e6:	4b35      	ldr	r3, [pc, #212]	; (41e3bc <lv_btnmatrix_set_map+0x2d8>)
  41e2e8:	4798      	blx	r3
  41e2ea:	4605      	mov	r5, r0
                lv_coord_t act_unit_w = (all_unit_w * btn_unit_w) / unit_cnt + inner * (btn_unit_w - 1);
  41e2ec:	9b08      	ldr	r3, [sp, #32]
  41e2ee:	fb00 f303 	mul.w	r3, r0, r3
  41e2f2:	9a07      	ldr	r2, [sp, #28]
  41e2f4:	fb93 f3f2 	sdiv	r3, r3, r2
  41e2f8:	1e44      	subs	r4, r0, #1
  41e2fa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  41e2fe:	fb14 3402 	smlabb	r4, r4, r2, r3
  41e302:	b2a4      	uxth	r4, r4
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
  41e304:	3c01      	subs	r4, #1
  41e306:	b2a4      	uxth	r4, r4
  41e308:	b223      	sxth	r3, r4
  41e30a:	461e      	mov	r6, r3
                if(base_dir == LV_BIDI_DIR_RTL)  {
  41e30c:	9b06      	ldr	r3, [sp, #24]
  41e30e:	2b01      	cmp	r3, #1
  41e310:	d0ab      	beq.n	41e26a <lv_btnmatrix_set_map+0x186>
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner +
  41e312:	9b08      	ldr	r3, [sp, #32]
  41e314:	fb03 f107 	mul.w	r1, r3, r7
  41e318:	9b07      	ldr	r3, [sp, #28]
  41e31a:	fb91 f1f3 	sdiv	r1, r1, r3
  41e31e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  41e322:	fb17 1103 	smlabb	r1, r7, r3, r1
  41e326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41e328:	fa13 f181 	uxtah	r1, r3, r1
  41e32c:	b209      	sxth	r1, r1
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
  41e32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  41e330:	461a      	mov	r2, r3
  41e332:	f119 0300 	adds.w	r3, r9, #0
  41e336:	bf18      	it	ne
  41e338:	2301      	movne	r3, #1
  41e33a:	2a00      	cmp	r2, #0
  41e33c:	bf18      	it	ne
  41e33e:	2300      	movne	r3, #0
  41e340:	2b00      	cmp	r3, #0
  41e342:	d0ad      	beq.n	41e2a0 <lv_btnmatrix_set_map+0x1bc>
  41e344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41e346:	9a06      	ldr	r2, [sp, #24]
  41e348:	4299      	cmp	r1, r3
  41e34a:	bf18      	it	ne
  41e34c:	2a01      	cmpne	r2, #1
  41e34e:	d109      	bne.n	41e364 <lv_btnmatrix_set_map+0x280>
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
  41e350:	4633      	mov	r3, r6
  41e352:	440b      	add	r3, r1
  41e354:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41e356:	9814      	ldr	r0, [sp, #80]	; 0x50
  41e358:	1a12      	subs	r2, r2, r0
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
  41e35a:	4293      	cmp	r3, r2
  41e35c:	d1a0      	bne.n	41e2a0 <lv_btnmatrix_set_map+0x1bc>
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
  41e35e:	9b06      	ldr	r3, [sp, #24]
  41e360:	2b01      	cmp	r3, #1
  41e362:	d19d      	bne.n	41e2a0 <lv_btnmatrix_set_map+0x1bc>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
  41e364:	f8da 0004 	ldr.w	r0, [sl, #4]
  41e368:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  41e36c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  41e36e:	4433      	add	r3, r6
  41e370:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  41e374:	440c      	add	r4, r1
                                act_y + btn_h);
  41e376:	9a02      	ldr	r2, [sp, #8]
  41e378:	9905      	ldr	r1, [sp, #20]
  41e37a:	440a      	add	r2, r1
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
  41e37c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
  41e380:	b212      	sxth	r2, r2
  41e382:	9200      	str	r2, [sp, #0]
  41e384:	b223      	sxth	r3, r4
  41e386:	9a02      	ldr	r2, [sp, #8]
  41e388:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
  41e38c:	4c0d      	ldr	r4, [pc, #52]	; (41e3c4 <lv_btnmatrix_set_map+0x2e0>)
  41e38e:	47a0      	blx	r4
  41e390:	e796      	b.n	41e2c0 <lv_btnmatrix_set_map+0x1dc>
  41e392:	bf00      	nop
  41e394:	00415e79 	.word	0x00415e79
  41e398:	0042c168 	.word	0x0042c168
  41e39c:	00415e85 	.word	0x00415e85
  41e3a0:	00408095 	.word	0x00408095
  41e3a4:	0041e029 	.word	0x0041e029
  41e3a8:	00407445 	.word	0x00407445
  41e3ac:	00405b81 	.word	0x00405b81
  41e3b0:	00405bb1 	.word	0x00405bb1
  41e3b4:	0042f884 	.word	0x0042f884
  41e3b8:	00427c49 	.word	0x00427c49
  41e3bc:	0041dd6d 	.word	0x0041dd6d
  41e3c0:	004067ed 	.word	0x004067ed
  41e3c4:	0041557d 	.word	0x0041557d
  41e3c8:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
        act_y += btn_h + inner + 1;
  41e3cc:	9b03      	ldr	r3, [sp, #12]
  41e3ce:	9a05      	ldr	r2, [sp, #20]
  41e3d0:	4413      	add	r3, r2
  41e3d2:	9a02      	ldr	r2, [sp, #8]
  41e3d4:	fa12 f383 	uxtah	r3, r2, r3
  41e3d8:	3301      	adds	r3, #1
  41e3da:	b21b      	sxth	r3, r3
  41e3dc:	9302      	str	r3, [sp, #8]
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
  41e3de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  41e3e0:	681b      	ldr	r3, [r3, #0]
  41e3e2:	781b      	ldrb	r3, [r3, #0]
  41e3e4:	b133      	cbz	r3, 41e3f4 <lv_btnmatrix_set_map+0x310>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
  41e3e6:	9b04      	ldr	r3, [sp, #16]
  41e3e8:	3301      	adds	r3, #1
  41e3ea:	eb08 0883 	add.w	r8, r8, r3, lsl #2
        uint16_t btn_cnt = 0;            /*Number of buttons in a row*/
  41e3ee:	2600      	movs	r6, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
  41e3f0:	4634      	mov	r4, r6
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
  41e3f2:	e704      	b.n	41e1fe <lv_btnmatrix_set_map+0x11a>
    lv_obj_invalidate(btnm);
  41e3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
  41e3f6:	4b02      	ldr	r3, [pc, #8]	; (41e400 <lv_btnmatrix_set_map+0x31c>)
  41e3f8:	4798      	blx	r3
}
  41e3fa:	b017      	add	sp, #92	; 0x5c
  41e3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e400:	00405f59 	.word	0x00405f59

0041e404 <lv_btnmatrix_set_ctrl_map>:
{
  41e404:	b570      	push	{r4, r5, r6, lr}
  41e406:	4604      	mov	r4, r0
  41e408:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e40a:	4b0c      	ldr	r3, [pc, #48]	; (41e43c <lv_btnmatrix_set_ctrl_map+0x38>)
  41e40c:	4798      	blx	r3
  41e40e:	b928      	cbnz	r0, 41e41c <lv_btnmatrix_set_ctrl_map+0x18>
  41e410:	4622      	mov	r2, r4
  41e412:	2300      	movs	r3, #0
  41e414:	480a      	ldr	r0, [pc, #40]	; (41e440 <lv_btnmatrix_set_ctrl_map+0x3c>)
  41e416:	490b      	ldr	r1, [pc, #44]	; (41e444 <lv_btnmatrix_set_ctrl_map+0x40>)
  41e418:	4788      	blx	r1
  41e41a:	e7fe      	b.n	41e41a <lv_btnmatrix_set_ctrl_map+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e41c:	4620      	mov	r0, r4
  41e41e:	4b0a      	ldr	r3, [pc, #40]	; (41e448 <lv_btnmatrix_set_ctrl_map+0x44>)
  41e420:	4798      	blx	r3
  41e422:	4605      	mov	r5, r0
    _lv_memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * ext->btn_cnt);
  41e424:	8a82      	ldrh	r2, [r0, #20]
  41e426:	0052      	lsls	r2, r2, #1
  41e428:	4631      	mov	r1, r6
  41e42a:	6880      	ldr	r0, [r0, #8]
  41e42c:	4b07      	ldr	r3, [pc, #28]	; (41e44c <lv_btnmatrix_set_ctrl_map+0x48>)
  41e42e:	4798      	blx	r3
    lv_btnmatrix_set_map(btnm, ext->map_p);
  41e430:	6829      	ldr	r1, [r5, #0]
  41e432:	4620      	mov	r0, r4
  41e434:	4b06      	ldr	r3, [pc, #24]	; (41e450 <lv_btnmatrix_set_ctrl_map+0x4c>)
  41e436:	4798      	blx	r3
  41e438:	bd70      	pop	{r4, r5, r6, pc}
  41e43a:	bf00      	nop
  41e43c:	00415e79 	.word	0x00415e79
  41e440:	0042c168 	.word	0x0042c168
  41e444:	00415e85 	.word	0x00415e85
  41e448:	00408095 	.word	0x00408095
  41e44c:	004167cd 	.word	0x004167cd
  41e450:	0041e0e5 	.word	0x0041e0e5

0041e454 <lv_btnmatrix_create>:
{
  41e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e456:	460e      	mov	r6, r1
    lv_obj_t * btnm = lv_obj_create(par, copy);
  41e458:	4b3c      	ldr	r3, [pc, #240]	; (41e54c <lv_btnmatrix_create+0xf8>)
  41e45a:	4798      	blx	r3
  41e45c:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btnm);
  41e45e:	4b3c      	ldr	r3, [pc, #240]	; (41e550 <lv_btnmatrix_create+0xfc>)
  41e460:	4798      	blx	r3
  41e462:	b190      	cbz	r0, 41e48a <lv_btnmatrix_create+0x36>
    if(btnm == NULL) return NULL;
  41e464:	2c00      	cmp	r4, #0
  41e466:	d054      	beq.n	41e512 <lv_btnmatrix_create+0xbe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btnm);
  41e468:	4b3a      	ldr	r3, [pc, #232]	; (41e554 <lv_btnmatrix_create+0x100>)
  41e46a:	681b      	ldr	r3, [r3, #0]
  41e46c:	b19b      	cbz	r3, 41e496 <lv_btnmatrix_create+0x42>
    lv_btnmatrix_ext_t * ext = lv_obj_allocate_ext_attr(btnm, sizeof(lv_btnmatrix_ext_t));
  41e46e:	2120      	movs	r1, #32
  41e470:	4620      	mov	r0, r4
  41e472:	4b39      	ldr	r3, [pc, #228]	; (41e558 <lv_btnmatrix_create+0x104>)
  41e474:	4798      	blx	r3
  41e476:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41e478:	4b35      	ldr	r3, [pc, #212]	; (41e550 <lv_btnmatrix_create+0xfc>)
  41e47a:	4798      	blx	r3
  41e47c:	b988      	cbnz	r0, 41e4a2 <lv_btnmatrix_create+0x4e>
  41e47e:	462a      	mov	r2, r5
  41e480:	2300      	movs	r3, #0
  41e482:	4836      	ldr	r0, [pc, #216]	; (41e55c <lv_btnmatrix_create+0x108>)
  41e484:	4936      	ldr	r1, [pc, #216]	; (41e560 <lv_btnmatrix_create+0x10c>)
  41e486:	4788      	blx	r1
  41e488:	e7fe      	b.n	41e488 <lv_btnmatrix_create+0x34>
    LV_ASSERT_MEM(btnm);
  41e48a:	4622      	mov	r2, r4
  41e48c:	2300      	movs	r3, #0
  41e48e:	4833      	ldr	r0, [pc, #204]	; (41e55c <lv_btnmatrix_create+0x108>)
  41e490:	4933      	ldr	r1, [pc, #204]	; (41e560 <lv_btnmatrix_create+0x10c>)
  41e492:	4788      	blx	r1
  41e494:	e7fe      	b.n	41e494 <lv_btnmatrix_create+0x40>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btnm);
  41e496:	4620      	mov	r0, r4
  41e498:	4b32      	ldr	r3, [pc, #200]	; (41e564 <lv_btnmatrix_create+0x110>)
  41e49a:	4798      	blx	r3
  41e49c:	4b2d      	ldr	r3, [pc, #180]	; (41e554 <lv_btnmatrix_create+0x100>)
  41e49e:	6018      	str	r0, [r3, #0]
  41e4a0:	e7e5      	b.n	41e46e <lv_btnmatrix_create+0x1a>
    if(ext == NULL) {
  41e4a2:	2d00      	cmp	r5, #0
  41e4a4:	d037      	beq.n	41e516 <lv_btnmatrix_create+0xc2>
    ext->btn_cnt        = 0;
  41e4a6:	2300      	movs	r3, #0
  41e4a8:	82ab      	strh	r3, [r5, #20]
    ext->btn_id_pr      = LV_BTNMATRIX_BTN_NONE;
  41e4aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41e4ae:	82ea      	strh	r2, [r5, #22]
    ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
  41e4b0:	832a      	strh	r2, [r5, #24]
    ext->btn_id_act     = LV_BTNMATRIX_BTN_NONE;
  41e4b2:	836a      	strh	r2, [r5, #26]
    ext->button_areas   = NULL;
  41e4b4:	606b      	str	r3, [r5, #4]
    ext->ctrl_bits      = NULL;
  41e4b6:	60ab      	str	r3, [r5, #8]
    ext->map_p          = NULL;
  41e4b8:	602b      	str	r3, [r5, #0]
    ext->recolor        = 0;
  41e4ba:	7f2a      	ldrb	r2, [r5, #28]
    ext->one_check      = 0;
  41e4bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  41e4c0:	f363 0241 	bfi	r2, r3, #1, #1
  41e4c4:	772a      	strb	r2, [r5, #28]
    lv_style_list_init(&ext->style_btn);
  41e4c6:	f105 070c 	add.w	r7, r5, #12
  41e4ca:	4638      	mov	r0, r7
  41e4cc:	4b26      	ldr	r3, [pc, #152]	; (41e568 <lv_btnmatrix_create+0x114>)
  41e4ce:	4798      	blx	r3
    ext->style_btn.ignore_trans = 1;
  41e4d0:	7c6b      	ldrb	r3, [r5, #17]
  41e4d2:	f043 0302 	orr.w	r3, r3, #2
  41e4d6:	746b      	strb	r3, [r5, #17]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(btnm);
  41e4d8:	4b24      	ldr	r3, [pc, #144]	; (41e56c <lv_btnmatrix_create+0x118>)
  41e4da:	681b      	ldr	r3, [r3, #0]
  41e4dc:	b303      	cbz	r3, 41e520 <lv_btnmatrix_create+0xcc>
    lv_obj_set_signal_cb(btnm, lv_btnmatrix_signal);
  41e4de:	4924      	ldr	r1, [pc, #144]	; (41e570 <lv_btnmatrix_create+0x11c>)
  41e4e0:	4620      	mov	r0, r4
  41e4e2:	4b24      	ldr	r3, [pc, #144]	; (41e574 <lv_btnmatrix_create+0x120>)
  41e4e4:	4798      	blx	r3
    lv_obj_set_design_cb(btnm, lv_btnmatrix_design);
  41e4e6:	4924      	ldr	r1, [pc, #144]	; (41e578 <lv_btnmatrix_create+0x124>)
  41e4e8:	4620      	mov	r0, r4
  41e4ea:	4b24      	ldr	r3, [pc, #144]	; (41e57c <lv_btnmatrix_create+0x128>)
  41e4ec:	4798      	blx	r3
    if(copy == NULL) {
  41e4ee:	b1ee      	cbz	r6, 41e52c <lv_btnmatrix_create+0xd8>
        lv_btnmatrix_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41e4f0:	4630      	mov	r0, r6
  41e4f2:	4b23      	ldr	r3, [pc, #140]	; (41e580 <lv_btnmatrix_create+0x12c>)
  41e4f4:	4798      	blx	r3
  41e4f6:	4605      	mov	r5, r0
        lv_btnmatrix_set_map(btnm, copy_ext->map_p);
  41e4f8:	6801      	ldr	r1, [r0, #0]
  41e4fa:	4620      	mov	r0, r4
  41e4fc:	4b21      	ldr	r3, [pc, #132]	; (41e584 <lv_btnmatrix_create+0x130>)
  41e4fe:	4798      	blx	r3
        lv_btnmatrix_set_ctrl_map(btnm, copy_ext->ctrl_bits);
  41e500:	68a9      	ldr	r1, [r5, #8]
  41e502:	4620      	mov	r0, r4
  41e504:	4b20      	ldr	r3, [pc, #128]	; (41e588 <lv_btnmatrix_create+0x134>)
  41e506:	4798      	blx	r3
        lv_style_list_copy(&ext->style_btn, &copy_ext->style_btn);
  41e508:	f105 010c 	add.w	r1, r5, #12
  41e50c:	4638      	mov	r0, r7
  41e50e:	4b1f      	ldr	r3, [pc, #124]	; (41e58c <lv_btnmatrix_create+0x138>)
  41e510:	4798      	blx	r3
}
  41e512:	4620      	mov	r0, r4
  41e514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_del(btnm);
  41e516:	4620      	mov	r0, r4
  41e518:	4b1d      	ldr	r3, [pc, #116]	; (41e590 <lv_btnmatrix_create+0x13c>)
  41e51a:	4798      	blx	r3
        return NULL;
  41e51c:	2400      	movs	r4, #0
  41e51e:	e7f8      	b.n	41e512 <lv_btnmatrix_create+0xbe>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(btnm);
  41e520:	4620      	mov	r0, r4
  41e522:	4b1c      	ldr	r3, [pc, #112]	; (41e594 <lv_btnmatrix_create+0x140>)
  41e524:	4798      	blx	r3
  41e526:	4b11      	ldr	r3, [pc, #68]	; (41e56c <lv_btnmatrix_create+0x118>)
  41e528:	6018      	str	r0, [r3, #0]
  41e52a:	e7d8      	b.n	41e4de <lv_btnmatrix_create+0x8a>
        lv_btnmatrix_set_map(btnm, lv_btnmatrix_def_map);
  41e52c:	491a      	ldr	r1, [pc, #104]	; (41e598 <lv_btnmatrix_create+0x144>)
  41e52e:	4620      	mov	r0, r4
  41e530:	4b14      	ldr	r3, [pc, #80]	; (41e584 <lv_btnmatrix_create+0x130>)
  41e532:	4798      	blx	r3
        lv_obj_set_size(btnm, LV_DPI * 2, LV_DPI * 1);
  41e534:	2294      	movs	r2, #148	; 0x94
  41e536:	f44f 7194 	mov.w	r1, #296	; 0x128
  41e53a:	4620      	mov	r0, r4
  41e53c:	4b17      	ldr	r3, [pc, #92]	; (41e59c <lv_btnmatrix_create+0x148>)
  41e53e:	4798      	blx	r3
        lv_theme_apply(btnm, LV_THEME_BTNMATRIX);
  41e540:	2106      	movs	r1, #6
  41e542:	4620      	mov	r0, r4
  41e544:	4b16      	ldr	r3, [pc, #88]	; (41e5a0 <lv_btnmatrix_create+0x14c>)
  41e546:	4798      	blx	r3
  41e548:	e7e3      	b.n	41e512 <lv_btnmatrix_create+0xbe>
  41e54a:	bf00      	nop
  41e54c:	00406815 	.word	0x00406815
  41e550:	00415e79 	.word	0x00415e79
  41e554:	2041485c 	.word	0x2041485c
  41e558:	00405941 	.word	0x00405941
  41e55c:	0042c154 	.word	0x0042c154
  41e560:	00415e85 	.word	0x00415e85
  41e564:	00408045 	.word	0x00408045
  41e568:	00409de1 	.word	0x00409de1
  41e56c:	20414858 	.word	0x20414858
  41e570:	0041e829 	.word	0x0041e829
  41e574:	004058dd 	.word	0x004058dd
  41e578:	0041ee99 	.word	0x0041ee99
  41e57c:	00405919 	.word	0x00405919
  41e580:	00408095 	.word	0x00408095
  41e584:	0041e0e5 	.word	0x0041e0e5
  41e588:	0041e405 	.word	0x0041e405
  41e58c:	0040acbd 	.word	0x0040acbd
  41e590:	004081f5 	.word	0x004081f5
  41e594:	0040806d 	.word	0x0040806d
  41e598:	204000c8 	.word	0x204000c8
  41e59c:	00406c39 	.word	0x00406c39
  41e5a0:	004182f9 	.word	0x004182f9

0041e5a4 <lv_btnmatrix_set_focused_btn>:
{
  41e5a4:	b538      	push	{r3, r4, r5, lr}
  41e5a6:	4605      	mov	r5, r0
  41e5a8:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e5aa:	4b11      	ldr	r3, [pc, #68]	; (41e5f0 <lv_btnmatrix_set_focused_btn+0x4c>)
  41e5ac:	4798      	blx	r3
  41e5ae:	b928      	cbnz	r0, 41e5bc <lv_btnmatrix_set_focused_btn+0x18>
  41e5b0:	462a      	mov	r2, r5
  41e5b2:	2300      	movs	r3, #0
  41e5b4:	480f      	ldr	r0, [pc, #60]	; (41e5f4 <lv_btnmatrix_set_focused_btn+0x50>)
  41e5b6:	4910      	ldr	r1, [pc, #64]	; (41e5f8 <lv_btnmatrix_set_focused_btn+0x54>)
  41e5b8:	4788      	blx	r1
  41e5ba:	e7fe      	b.n	41e5ba <lv_btnmatrix_set_focused_btn+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e5bc:	4628      	mov	r0, r5
  41e5be:	4b0f      	ldr	r3, [pc, #60]	; (41e5fc <lv_btnmatrix_set_focused_btn+0x58>)
  41e5c0:	4798      	blx	r3
    if(id >= ext->btn_cnt && id != LV_BTNMATRIX_BTN_NONE) return;
  41e5c2:	8a83      	ldrh	r3, [r0, #20]
  41e5c4:	42a3      	cmp	r3, r4
  41e5c6:	d803      	bhi.n	41e5d0 <lv_btnmatrix_set_focused_btn+0x2c>
  41e5c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e5cc:	429c      	cmp	r4, r3
  41e5ce:	d10b      	bne.n	41e5e8 <lv_btnmatrix_set_focused_btn+0x44>
    if(ext->btn_id_act == LV_BTNMATRIX_BTN_NONE) ext->btn_id_act = id;
  41e5d0:	8b42      	ldrh	r2, [r0, #26]
  41e5d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e5d6:	429a      	cmp	r2, r3
  41e5d8:	d007      	beq.n	41e5ea <lv_btnmatrix_set_focused_btn+0x46>
    if(id == ext->btn_id_focused) return;
  41e5da:	8b03      	ldrh	r3, [r0, #24]
  41e5dc:	429c      	cmp	r4, r3
  41e5de:	d003      	beq.n	41e5e8 <lv_btnmatrix_set_focused_btn+0x44>
    ext->btn_id_focused = id;
  41e5e0:	8304      	strh	r4, [r0, #24]
    lv_obj_invalidate(btnm);
  41e5e2:	4628      	mov	r0, r5
  41e5e4:	4b06      	ldr	r3, [pc, #24]	; (41e600 <lv_btnmatrix_set_focused_btn+0x5c>)
  41e5e6:	4798      	blx	r3
  41e5e8:	bd38      	pop	{r3, r4, r5, pc}
    if(ext->btn_id_act == LV_BTNMATRIX_BTN_NONE) ext->btn_id_act = id;
  41e5ea:	8344      	strh	r4, [r0, #26]
  41e5ec:	e7f5      	b.n	41e5da <lv_btnmatrix_set_focused_btn+0x36>
  41e5ee:	bf00      	nop
  41e5f0:	00415e79 	.word	0x00415e79
  41e5f4:	0042c168 	.word	0x0042c168
  41e5f8:	00415e85 	.word	0x00415e85
  41e5fc:	00408095 	.word	0x00408095
  41e600:	00405f59 	.word	0x00405f59

0041e604 <lv_btnmatrix_clear_btn_ctrl>:
{
  41e604:	b570      	push	{r4, r5, r6, lr}
  41e606:	4605      	mov	r5, r0
  41e608:	460c      	mov	r4, r1
  41e60a:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e60c:	4b0d      	ldr	r3, [pc, #52]	; (41e644 <lv_btnmatrix_clear_btn_ctrl+0x40>)
  41e60e:	4798      	blx	r3
  41e610:	b928      	cbnz	r0, 41e61e <lv_btnmatrix_clear_btn_ctrl+0x1a>
  41e612:	462a      	mov	r2, r5
  41e614:	2300      	movs	r3, #0
  41e616:	480c      	ldr	r0, [pc, #48]	; (41e648 <lv_btnmatrix_clear_btn_ctrl+0x44>)
  41e618:	490c      	ldr	r1, [pc, #48]	; (41e64c <lv_btnmatrix_clear_btn_ctrl+0x48>)
  41e61a:	4788      	blx	r1
  41e61c:	e7fe      	b.n	41e61c <lv_btnmatrix_clear_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e61e:	4628      	mov	r0, r5
  41e620:	4b0b      	ldr	r3, [pc, #44]	; (41e650 <lv_btnmatrix_clear_btn_ctrl+0x4c>)
  41e622:	4798      	blx	r3
    if(btn_id >= ext->btn_cnt) return;
  41e624:	8a83      	ldrh	r3, [r0, #20]
  41e626:	42a3      	cmp	r3, r4
  41e628:	d800      	bhi.n	41e62c <lv_btnmatrix_clear_btn_ctrl+0x28>
  41e62a:	bd70      	pop	{r4, r5, r6, pc}
    ext->ctrl_bits[btn_id] &= (~ctrl);
  41e62c:	6882      	ldr	r2, [r0, #8]
  41e62e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
  41e632:	ea23 0306 	bic.w	r3, r3, r6
  41e636:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    invalidate_button_area(btnm, btn_id);
  41e63a:	4621      	mov	r1, r4
  41e63c:	4628      	mov	r0, r5
  41e63e:	4b05      	ldr	r3, [pc, #20]	; (41e654 <lv_btnmatrix_clear_btn_ctrl+0x50>)
  41e640:	4798      	blx	r3
  41e642:	e7f2      	b.n	41e62a <lv_btnmatrix_clear_btn_ctrl+0x26>
  41e644:	00415e79 	.word	0x00415e79
  41e648:	0042c168 	.word	0x0042c168
  41e64c:	00415e85 	.word	0x00415e85
  41e650:	00408095 	.word	0x00408095
  41e654:	0041dfa9 	.word	0x0041dfa9

0041e658 <lv_btnmatrix_clear_btn_ctrl_all>:
{
  41e658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e65a:	4605      	mov	r5, r0
  41e65c:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e65e:	4b0d      	ldr	r3, [pc, #52]	; (41e694 <lv_btnmatrix_clear_btn_ctrl_all+0x3c>)
  41e660:	4798      	blx	r3
  41e662:	b928      	cbnz	r0, 41e670 <lv_btnmatrix_clear_btn_ctrl_all+0x18>
  41e664:	462a      	mov	r2, r5
  41e666:	2300      	movs	r3, #0
  41e668:	480b      	ldr	r0, [pc, #44]	; (41e698 <lv_btnmatrix_clear_btn_ctrl_all+0x40>)
  41e66a:	490c      	ldr	r1, [pc, #48]	; (41e69c <lv_btnmatrix_clear_btn_ctrl_all+0x44>)
  41e66c:	4788      	blx	r1
  41e66e:	e7fe      	b.n	41e66e <lv_btnmatrix_clear_btn_ctrl_all+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e670:	4628      	mov	r0, r5
  41e672:	4b0b      	ldr	r3, [pc, #44]	; (41e6a0 <lv_btnmatrix_clear_btn_ctrl_all+0x48>)
  41e674:	4798      	blx	r3
  41e676:	4606      	mov	r6, r0
    for(i = 0; i < ext->btn_cnt; i++) {
  41e678:	2400      	movs	r4, #0
  41e67a:	e006      	b.n	41e68a <lv_btnmatrix_clear_btn_ctrl_all+0x32>
        lv_btnmatrix_clear_btn_ctrl(btnm, i, ctrl);
  41e67c:	463a      	mov	r2, r7
  41e67e:	4621      	mov	r1, r4
  41e680:	4628      	mov	r0, r5
  41e682:	4b08      	ldr	r3, [pc, #32]	; (41e6a4 <lv_btnmatrix_clear_btn_ctrl_all+0x4c>)
  41e684:	4798      	blx	r3
    for(i = 0; i < ext->btn_cnt; i++) {
  41e686:	3401      	adds	r4, #1
  41e688:	b2a4      	uxth	r4, r4
  41e68a:	8ab3      	ldrh	r3, [r6, #20]
  41e68c:	429c      	cmp	r4, r3
  41e68e:	d3f5      	bcc.n	41e67c <lv_btnmatrix_clear_btn_ctrl_all+0x24>
}
  41e690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e692:	bf00      	nop
  41e694:	00415e79 	.word	0x00415e79
  41e698:	0042c168 	.word	0x0042c168
  41e69c:	00415e85 	.word	0x00415e85
  41e6a0:	00408095 	.word	0x00408095
  41e6a4:	0041e605 	.word	0x0041e605

0041e6a8 <lv_btnmatrix_set_btn_ctrl>:
{
  41e6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e6aa:	4605      	mov	r5, r0
  41e6ac:	460c      	mov	r4, r1
  41e6ae:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e6b0:	4b13      	ldr	r3, [pc, #76]	; (41e700 <lv_btnmatrix_set_btn_ctrl+0x58>)
  41e6b2:	4798      	blx	r3
  41e6b4:	b928      	cbnz	r0, 41e6c2 <lv_btnmatrix_set_btn_ctrl+0x1a>
  41e6b6:	462a      	mov	r2, r5
  41e6b8:	2300      	movs	r3, #0
  41e6ba:	4812      	ldr	r0, [pc, #72]	; (41e704 <lv_btnmatrix_set_btn_ctrl+0x5c>)
  41e6bc:	4912      	ldr	r1, [pc, #72]	; (41e708 <lv_btnmatrix_set_btn_ctrl+0x60>)
  41e6be:	4788      	blx	r1
  41e6c0:	e7fe      	b.n	41e6c0 <lv_btnmatrix_set_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e6c2:	4628      	mov	r0, r5
  41e6c4:	4b11      	ldr	r3, [pc, #68]	; (41e70c <lv_btnmatrix_set_btn_ctrl+0x64>)
  41e6c6:	4798      	blx	r3
  41e6c8:	4607      	mov	r7, r0
    if(btn_id >= ext->btn_cnt) return;
  41e6ca:	8a83      	ldrh	r3, [r0, #20]
  41e6cc:	42a3      	cmp	r3, r4
  41e6ce:	d915      	bls.n	41e6fc <lv_btnmatrix_set_btn_ctrl+0x54>
    if(ext->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECK_STATE)) {
  41e6d0:	7f03      	ldrb	r3, [r0, #28]
  41e6d2:	f013 0f02 	tst.w	r3, #2
  41e6d6:	d007      	beq.n	41e6e8 <lv_btnmatrix_set_btn_ctrl+0x40>
  41e6d8:	f016 0f80 	tst.w	r6, #128	; 0x80
  41e6dc:	d004      	beq.n	41e6e8 <lv_btnmatrix_set_btn_ctrl+0x40>
        lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41e6de:	2180      	movs	r1, #128	; 0x80
  41e6e0:	4628      	mov	r0, r5
  41e6e2:	4b0b      	ldr	r3, [pc, #44]	; (41e710 <lv_btnmatrix_set_btn_ctrl+0x68>)
  41e6e4:	4798      	blx	r3
        ext->btn_id_act = btn_id;
  41e6e6:	837c      	strh	r4, [r7, #26]
    ext->ctrl_bits[btn_id] |= ctrl;
  41e6e8:	68bb      	ldr	r3, [r7, #8]
  41e6ea:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
  41e6ee:	4316      	orrs	r6, r2
  41e6f0:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]
    invalidate_button_area(btnm, btn_id);
  41e6f4:	4621      	mov	r1, r4
  41e6f6:	4628      	mov	r0, r5
  41e6f8:	4b06      	ldr	r3, [pc, #24]	; (41e714 <lv_btnmatrix_set_btn_ctrl+0x6c>)
  41e6fa:	4798      	blx	r3
  41e6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e6fe:	bf00      	nop
  41e700:	00415e79 	.word	0x00415e79
  41e704:	0042c168 	.word	0x0042c168
  41e708:	00415e85 	.word	0x00415e85
  41e70c:	00408095 	.word	0x00408095
  41e710:	0041e659 	.word	0x0041e659
  41e714:	0041dfa9 	.word	0x0041dfa9

0041e718 <lv_btnmatrix_get_map_array>:
{
  41e718:	b510      	push	{r4, lr}
  41e71a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e71c:	4b06      	ldr	r3, [pc, #24]	; (41e738 <lv_btnmatrix_get_map_array+0x20>)
  41e71e:	4798      	blx	r3
  41e720:	b928      	cbnz	r0, 41e72e <lv_btnmatrix_get_map_array+0x16>
  41e722:	4622      	mov	r2, r4
  41e724:	2300      	movs	r3, #0
  41e726:	4805      	ldr	r0, [pc, #20]	; (41e73c <lv_btnmatrix_get_map_array+0x24>)
  41e728:	4905      	ldr	r1, [pc, #20]	; (41e740 <lv_btnmatrix_get_map_array+0x28>)
  41e72a:	4788      	blx	r1
  41e72c:	e7fe      	b.n	41e72c <lv_btnmatrix_get_map_array+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e72e:	4620      	mov	r0, r4
  41e730:	4b04      	ldr	r3, [pc, #16]	; (41e744 <lv_btnmatrix_get_map_array+0x2c>)
  41e732:	4798      	blx	r3
}
  41e734:	6800      	ldr	r0, [r0, #0]
  41e736:	bd10      	pop	{r4, pc}
  41e738:	00415e79 	.word	0x00415e79
  41e73c:	0042c168 	.word	0x0042c168
  41e740:	00415e85 	.word	0x00415e85
  41e744:	00408095 	.word	0x00408095

0041e748 <lv_btnmatrix_get_active_btn>:
{
  41e748:	b510      	push	{r4, lr}
  41e74a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e74c:	4b06      	ldr	r3, [pc, #24]	; (41e768 <lv_btnmatrix_get_active_btn+0x20>)
  41e74e:	4798      	blx	r3
  41e750:	b928      	cbnz	r0, 41e75e <lv_btnmatrix_get_active_btn+0x16>
  41e752:	4622      	mov	r2, r4
  41e754:	2300      	movs	r3, #0
  41e756:	4805      	ldr	r0, [pc, #20]	; (41e76c <lv_btnmatrix_get_active_btn+0x24>)
  41e758:	4905      	ldr	r1, [pc, #20]	; (41e770 <lv_btnmatrix_get_active_btn+0x28>)
  41e75a:	4788      	blx	r1
  41e75c:	e7fe      	b.n	41e75c <lv_btnmatrix_get_active_btn+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e75e:	4620      	mov	r0, r4
  41e760:	4b04      	ldr	r3, [pc, #16]	; (41e774 <lv_btnmatrix_get_active_btn+0x2c>)
  41e762:	4798      	blx	r3
}
  41e764:	8b40      	ldrh	r0, [r0, #26]
  41e766:	bd10      	pop	{r4, pc}
  41e768:	00415e79 	.word	0x00415e79
  41e76c:	0042c168 	.word	0x0042c168
  41e770:	00415e85 	.word	0x00415e85
  41e774:	00408095 	.word	0x00408095

0041e778 <lv_btnmatrix_get_focused_btn>:
{
  41e778:	b510      	push	{r4, lr}
  41e77a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e77c:	4b06      	ldr	r3, [pc, #24]	; (41e798 <lv_btnmatrix_get_focused_btn+0x20>)
  41e77e:	4798      	blx	r3
  41e780:	b928      	cbnz	r0, 41e78e <lv_btnmatrix_get_focused_btn+0x16>
  41e782:	4622      	mov	r2, r4
  41e784:	2300      	movs	r3, #0
  41e786:	4805      	ldr	r0, [pc, #20]	; (41e79c <lv_btnmatrix_get_focused_btn+0x24>)
  41e788:	4905      	ldr	r1, [pc, #20]	; (41e7a0 <lv_btnmatrix_get_focused_btn+0x28>)
  41e78a:	4788      	blx	r1
  41e78c:	e7fe      	b.n	41e78c <lv_btnmatrix_get_focused_btn+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e78e:	4620      	mov	r0, r4
  41e790:	4b04      	ldr	r3, [pc, #16]	; (41e7a4 <lv_btnmatrix_get_focused_btn+0x2c>)
  41e792:	4798      	blx	r3
}
  41e794:	8b00      	ldrh	r0, [r0, #24]
  41e796:	bd10      	pop	{r4, pc}
  41e798:	00415e79 	.word	0x00415e79
  41e79c:	0042c168 	.word	0x0042c168
  41e7a0:	00415e85 	.word	0x00415e85
  41e7a4:	00408095 	.word	0x00408095

0041e7a8 <lv_btnmatrix_get_btn_ctrl>:
{
  41e7a8:	b570      	push	{r4, r5, r6, lr}
  41e7aa:	4605      	mov	r5, r0
  41e7ac:	460c      	mov	r4, r1
  41e7ae:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e7b0:	4b0c      	ldr	r3, [pc, #48]	; (41e7e4 <lv_btnmatrix_get_btn_ctrl+0x3c>)
  41e7b2:	4798      	blx	r3
  41e7b4:	b928      	cbnz	r0, 41e7c2 <lv_btnmatrix_get_btn_ctrl+0x1a>
  41e7b6:	462a      	mov	r2, r5
  41e7b8:	2300      	movs	r3, #0
  41e7ba:	480b      	ldr	r0, [pc, #44]	; (41e7e8 <lv_btnmatrix_get_btn_ctrl+0x40>)
  41e7bc:	490b      	ldr	r1, [pc, #44]	; (41e7ec <lv_btnmatrix_get_btn_ctrl+0x44>)
  41e7be:	4788      	blx	r1
  41e7c0:	e7fe      	b.n	41e7c0 <lv_btnmatrix_get_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e7c2:	4628      	mov	r0, r5
  41e7c4:	4b0a      	ldr	r3, [pc, #40]	; (41e7f0 <lv_btnmatrix_get_btn_ctrl+0x48>)
  41e7c6:	4798      	blx	r3
    if(btn_id >= ext->btn_cnt) return false;
  41e7c8:	8a83      	ldrh	r3, [r0, #20]
  41e7ca:	42a3      	cmp	r3, r4
  41e7cc:	d907      	bls.n	41e7de <lv_btnmatrix_get_btn_ctrl+0x36>
    return (ext->ctrl_bits[btn_id] & ctrl) ? true : false;
  41e7ce:	6883      	ldr	r3, [r0, #8]
  41e7d0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  41e7d4:	4233      	tst	r3, r6
  41e7d6:	bf14      	ite	ne
  41e7d8:	2001      	movne	r0, #1
  41e7da:	2000      	moveq	r0, #0
  41e7dc:	bd70      	pop	{r4, r5, r6, pc}
    if(btn_id >= ext->btn_cnt) return false;
  41e7de:	2000      	movs	r0, #0
}
  41e7e0:	bd70      	pop	{r4, r5, r6, pc}
  41e7e2:	bf00      	nop
  41e7e4:	00415e79 	.word	0x00415e79
  41e7e8:	0042c168 	.word	0x0042c168
  41e7ec:	00415e85 	.word	0x00415e85
  41e7f0:	00408095 	.word	0x00408095

0041e7f4 <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
  41e7f4:	b570      	push	{r4, r5, r6, lr}
  41e7f6:	4604      	mov	r4, r0
  41e7f8:	460e      	mov	r6, r1
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_get_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41e7fa:	2280      	movs	r2, #128	; 0x80
  41e7fc:	4b07      	ldr	r3, [pc, #28]	; (41e81c <make_one_button_toggled+0x28>)
  41e7fe:	4798      	blx	r3
  41e800:	4605      	mov	r5, r0

    lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41e802:	2180      	movs	r1, #128	; 0x80
  41e804:	4620      	mov	r0, r4
  41e806:	4b06      	ldr	r3, [pc, #24]	; (41e820 <make_one_button_toggled+0x2c>)
  41e808:	4798      	blx	r3

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41e80a:	b905      	cbnz	r5, 41e80e <make_one_button_toggled+0x1a>
  41e80c:	bd70      	pop	{r4, r5, r6, pc}
  41e80e:	2280      	movs	r2, #128	; 0x80
  41e810:	4631      	mov	r1, r6
  41e812:	4620      	mov	r0, r4
  41e814:	4b03      	ldr	r3, [pc, #12]	; (41e824 <make_one_button_toggled+0x30>)
  41e816:	4798      	blx	r3
}
  41e818:	e7f8      	b.n	41e80c <make_one_button_toggled+0x18>
  41e81a:	bf00      	nop
  41e81c:	0041e7a9 	.word	0x0041e7a9
  41e820:	0041e659 	.word	0x0041e659
  41e824:	0041e6a9 	.word	0x0041e6a9

0041e828 <lv_btnmatrix_signal>:
{
  41e828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e82c:	b085      	sub	sp, #20
  41e82e:	4605      	mov	r5, r0
  41e830:	460f      	mov	r7, r1
  41e832:	4690      	mov	r8, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41e834:	2908      	cmp	r1, #8
  41e836:	d009      	beq.n	41e84c <lv_btnmatrix_signal+0x24>
    res = ancestor_signal(btnm, sign, param);
  41e838:	4b9b      	ldr	r3, [pc, #620]	; (41eaa8 <lv_btnmatrix_signal+0x280>)
  41e83a:	681b      	ldr	r3, [r3, #0]
  41e83c:	4798      	blx	r3
  41e83e:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
  41e840:	2801      	cmp	r0, #1
  41e842:	d013      	beq.n	41e86c <lv_btnmatrix_signal+0x44>
}
  41e844:	4620      	mov	r0, r4
  41e846:	b005      	add	sp, #20
  41e848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        info->result = lv_btnmatrix_get_style(btnm, info->part);
  41e84c:	7811      	ldrb	r1, [r2, #0]
  41e84e:	4b97      	ldr	r3, [pc, #604]	; (41eaac <lv_btnmatrix_signal+0x284>)
  41e850:	4798      	blx	r3
  41e852:	f8c8 0004 	str.w	r0, [r8, #4]
        if(info->result != NULL) return LV_RES_OK;
  41e856:	b108      	cbz	r0, 41e85c <lv_btnmatrix_signal+0x34>
  41e858:	2401      	movs	r4, #1
  41e85a:	e7f3      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
        else return ancestor_signal(btnm, sign, param);
  41e85c:	4b92      	ldr	r3, [pc, #584]	; (41eaa8 <lv_btnmatrix_signal+0x280>)
  41e85e:	681b      	ldr	r3, [r3, #0]
  41e860:	4642      	mov	r2, r8
  41e862:	4639      	mov	r1, r7
  41e864:	4628      	mov	r0, r5
  41e866:	4798      	blx	r3
  41e868:	4604      	mov	r4, r0
  41e86a:	e7eb      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41e86c:	2f07      	cmp	r7, #7
  41e86e:	d035      	beq.n	41e8dc <lv_btnmatrix_signal+0xb4>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e870:	4628      	mov	r0, r5
  41e872:	4b8f      	ldr	r3, [pc, #572]	; (41eab0 <lv_btnmatrix_signal+0x288>)
  41e874:	4798      	blx	r3
  41e876:	4606      	mov	r6, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  41e878:	2f00      	cmp	r7, #0
  41e87a:	d035      	beq.n	41e8e8 <lv_btnmatrix_signal+0xc0>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  41e87c:	2f04      	cmp	r7, #4
  41e87e:	d03d      	beq.n	41e8fc <lv_btnmatrix_signal+0xd4>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  41e880:	2f02      	cmp	r7, #2
  41e882:	d040      	beq.n	41e906 <lv_btnmatrix_signal+0xde>
    else if(sign == LV_SIGNAL_PRESSED) {
  41e884:	2f0b      	cmp	r7, #11
  41e886:	d05e      	beq.n	41e946 <lv_btnmatrix_signal+0x11e>
    else if(sign == LV_SIGNAL_PRESSING) {
  41e888:	2f0c      	cmp	r7, #12
  41e88a:	f000 80c2 	beq.w	41ea12 <lv_btnmatrix_signal+0x1ea>
    else if(sign == LV_SIGNAL_RELEASED) {
  41e88e:	2f0e      	cmp	r7, #14
  41e890:	f000 8136 	beq.w	41eb00 <lv_btnmatrix_signal+0x2d8>
    else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
  41e894:	2f10      	cmp	r7, #16
  41e896:	f000 8192 	beq.w	41ebbe <lv_btnmatrix_signal+0x396>
    else if(sign == LV_SIGNAL_PRESS_LOST) {
  41e89a:	2f0d      	cmp	r7, #13
  41e89c:	f000 81b3 	beq.w	41ec06 <lv_btnmatrix_signal+0x3de>
    else if(sign == LV_SIGNAL_FOCUS) {
  41e8a0:	2f16      	cmp	r7, #22
  41e8a2:	f000 81b8 	beq.w	41ec16 <lv_btnmatrix_signal+0x3ee>
    else if(sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_LEAVE) {
  41e8a6:	2f15      	cmp	r7, #21
  41e8a8:	bf18      	it	ne
  41e8aa:	2f17      	cmpne	r7, #23
  41e8ac:	f040 81d6 	bne.w	41ec5c <lv_btnmatrix_signal+0x434>
        if(ext->btn_id_focused != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_focused);
  41e8b0:	8b01      	ldrh	r1, [r0, #24]
  41e8b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e8b6:	4299      	cmp	r1, r3
  41e8b8:	d002      	beq.n	41e8c0 <lv_btnmatrix_signal+0x98>
  41e8ba:	4628      	mov	r0, r5
  41e8bc:	4b7d      	ldr	r3, [pc, #500]	; (41eab4 <lv_btnmatrix_signal+0x28c>)
  41e8be:	4798      	blx	r3
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_pr);
  41e8c0:	8af1      	ldrh	r1, [r6, #22]
  41e8c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e8c6:	4299      	cmp	r1, r3
  41e8c8:	d002      	beq.n	41e8d0 <lv_btnmatrix_signal+0xa8>
  41e8ca:	4628      	mov	r0, r5
  41e8cc:	4b79      	ldr	r3, [pc, #484]	; (41eab4 <lv_btnmatrix_signal+0x28c>)
  41e8ce:	4798      	blx	r3
        ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
  41e8d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e8d4:	8333      	strh	r3, [r6, #24]
        ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
  41e8d6:	82f3      	strh	r3, [r6, #22]
        ext->btn_id_act = LV_BTNMATRIX_BTN_NONE;
  41e8d8:	8373      	strh	r3, [r6, #26]
  41e8da:	e7b3      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41e8dc:	4976      	ldr	r1, [pc, #472]	; (41eab8 <lv_btnmatrix_signal+0x290>)
  41e8de:	4640      	mov	r0, r8
  41e8e0:	4b76      	ldr	r3, [pc, #472]	; (41eabc <lv_btnmatrix_signal+0x294>)
  41e8e2:	4798      	blx	r3
  41e8e4:	4604      	mov	r4, r0
  41e8e6:	e7ad      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
        lv_obj_clean_style_list(btnm, LV_BTNMATRIX_PART_BTN);
  41e8e8:	2101      	movs	r1, #1
  41e8ea:	4628      	mov	r0, r5
  41e8ec:	4b74      	ldr	r3, [pc, #464]	; (41eac0 <lv_btnmatrix_signal+0x298>)
  41e8ee:	4798      	blx	r3
        lv_mem_free(ext->button_areas);
  41e8f0:	6870      	ldr	r0, [r6, #4]
  41e8f2:	4d74      	ldr	r5, [pc, #464]	; (41eac4 <lv_btnmatrix_signal+0x29c>)
  41e8f4:	47a8      	blx	r5
        lv_mem_free(ext->ctrl_bits);
  41e8f6:	68b0      	ldr	r0, [r6, #8]
  41e8f8:	47a8      	blx	r5
  41e8fa:	e7a3      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
        lv_btnmatrix_set_map(btnm, ext->map_p);
  41e8fc:	6801      	ldr	r1, [r0, #0]
  41e8fe:	4628      	mov	r0, r5
  41e900:	4b71      	ldr	r3, [pc, #452]	; (41eac8 <lv_btnmatrix_signal+0x2a0>)
  41e902:	4798      	blx	r3
  41e904:	e79e      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
        if(lv_obj_get_width(btnm) != lv_area_get_width(param) || lv_obj_get_height(btnm) != lv_area_get_height(param)) {
  41e906:	4628      	mov	r0, r5
  41e908:	4b70      	ldr	r3, [pc, #448]	; (41eacc <lv_btnmatrix_signal+0x2a4>)
  41e90a:	4798      	blx	r3
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41e90c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  41e910:	f8b8 2000 	ldrh.w	r2, [r8]
  41e914:	1a9b      	subs	r3, r3, r2
  41e916:	b29b      	uxth	r3, r3
  41e918:	3301      	adds	r3, #1
  41e91a:	b21b      	sxth	r3, r3
  41e91c:	4283      	cmp	r3, r0
  41e91e:	d004      	beq.n	41e92a <lv_btnmatrix_signal+0x102>
            lv_btnmatrix_set_map(btnm, ext->map_p);
  41e920:	6831      	ldr	r1, [r6, #0]
  41e922:	4628      	mov	r0, r5
  41e924:	4b68      	ldr	r3, [pc, #416]	; (41eac8 <lv_btnmatrix_signal+0x2a0>)
  41e926:	4798      	blx	r3
  41e928:	e78c      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
        if(lv_obj_get_width(btnm) != lv_area_get_width(param) || lv_obj_get_height(btnm) != lv_area_get_height(param)) {
  41e92a:	4628      	mov	r0, r5
  41e92c:	4b68      	ldr	r3, [pc, #416]	; (41ead0 <lv_btnmatrix_signal+0x2a8>)
  41e92e:	4798      	blx	r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41e930:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  41e934:	f8b8 2002 	ldrh.w	r2, [r8, #2]
  41e938:	1a9b      	subs	r3, r3, r2
  41e93a:	b29b      	uxth	r3, r3
  41e93c:	3301      	adds	r3, #1
  41e93e:	b21b      	sxth	r3, r3
  41e940:	4283      	cmp	r3, r0
  41e942:	d1ed      	bne.n	41e920 <lv_btnmatrix_signal+0xf8>
  41e944:	e77e      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
        invalidate_button_area(btnm, ext->btn_id_pr);
  41e946:	8ac1      	ldrh	r1, [r0, #22]
  41e948:	4628      	mov	r0, r5
  41e94a:	4b5a      	ldr	r3, [pc, #360]	; (41eab4 <lv_btnmatrix_signal+0x28c>)
  41e94c:	4798      	blx	r3
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
  41e94e:	4b61      	ldr	r3, [pc, #388]	; (41ead4 <lv_btnmatrix_signal+0x2ac>)
  41e950:	4798      	blx	r3
  41e952:	4b61      	ldr	r3, [pc, #388]	; (41ead8 <lv_btnmatrix_signal+0x2b0>)
  41e954:	4798      	blx	r3
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
  41e956:	2803      	cmp	r0, #3
  41e958:	bf18      	it	ne
  41e95a:	2801      	cmpne	r0, #1
  41e95c:	d027      	beq.n	41e9ae <lv_btnmatrix_signal+0x186>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER &&
  41e95e:	2802      	cmp	r0, #2
  41e960:	d051      	beq.n	41ea06 <lv_btnmatrix_signal+0x1de>
  41e962:	2804      	cmp	r0, #4
  41e964:	d048      	beq.n	41e9f8 <lv_btnmatrix_signal+0x1d0>
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
  41e966:	8af7      	ldrh	r7, [r6, #22]
  41e968:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e96c:	429f      	cmp	r7, r3
  41e96e:	f43f af69 	beq.w	41e844 <lv_btnmatrix_signal+0x1c>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41e972:	68b3      	ldr	r3, [r6, #8]
  41e974:	f833 6017 	ldrh.w	r6, [r3, r7, lsl #1]
  41e978:	4630      	mov	r0, r6
  41e97a:	4b58      	ldr	r3, [pc, #352]	; (41eadc <lv_btnmatrix_signal+0x2b4>)
  41e97c:	4798      	blx	r3
  41e97e:	2800      	cmp	r0, #0
  41e980:	f47f af60 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41e984:	4630      	mov	r0, r6
  41e986:	4b56      	ldr	r3, [pc, #344]	; (41eae0 <lv_btnmatrix_signal+0x2b8>)
  41e988:	4798      	blx	r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41e98a:	2800      	cmp	r0, #0
  41e98c:	f47f af5a 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_pr]) == false) {
  41e990:	4630      	mov	r0, r6
  41e992:	4b54      	ldr	r3, [pc, #336]	; (41eae4 <lv_btnmatrix_signal+0x2bc>)
  41e994:	4798      	blx	r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41e996:	2800      	cmp	r0, #0
  41e998:	f47f af54 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
                uint32_t b = ext->btn_id_pr;
  41e99c:	aa04      	add	r2, sp, #16
  41e99e:	f842 7d08 	str.w	r7, [r2, #-8]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41e9a2:	2110      	movs	r1, #16
  41e9a4:	4628      	mov	r0, r5
  41e9a6:	4b50      	ldr	r3, [pc, #320]	; (41eae8 <lv_btnmatrix_signal+0x2c0>)
  41e9a8:	4798      	blx	r3
  41e9aa:	4604      	mov	r4, r0
  41e9ac:	e74a      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
            lv_indev_get_point(param, &p);
  41e9ae:	a903      	add	r1, sp, #12
  41e9b0:	4640      	mov	r0, r8
  41e9b2:	4b4e      	ldr	r3, [pc, #312]	; (41eaec <lv_btnmatrix_signal+0x2c4>)
  41e9b4:	4798      	blx	r3
            btn_pr = get_button_from_point(btnm, &p);
  41e9b6:	a903      	add	r1, sp, #12
  41e9b8:	4628      	mov	r0, r5
  41e9ba:	4b4d      	ldr	r3, [pc, #308]	; (41eaf0 <lv_btnmatrix_signal+0x2c8>)
  41e9bc:	4798      	blx	r3
  41e9be:	4607      	mov	r7, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
  41e9c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e9c4:	4298      	cmp	r0, r3
  41e9c6:	d0ce      	beq.n	41e966 <lv_btnmatrix_signal+0x13e>
                if(button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41e9c8:	68b3      	ldr	r3, [r6, #8]
  41e9ca:	f833 8010 	ldrh.w	r8, [r3, r0, lsl #1]
  41e9ce:	4640      	mov	r0, r8
  41e9d0:	4b43      	ldr	r3, [pc, #268]	; (41eae0 <lv_btnmatrix_signal+0x2b8>)
  41e9d2:	4798      	blx	r3
  41e9d4:	2800      	cmp	r0, #0
  41e9d6:	d1c6      	bne.n	41e966 <lv_btnmatrix_signal+0x13e>
                   button_is_hidden(ext->ctrl_bits[btn_pr]) == false) {
  41e9d8:	4640      	mov	r0, r8
  41e9da:	4b42      	ldr	r3, [pc, #264]	; (41eae4 <lv_btnmatrix_signal+0x2bc>)
  41e9dc:	4798      	blx	r3
                if(button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41e9de:	2800      	cmp	r0, #0
  41e9e0:	d1c1      	bne.n	41e966 <lv_btnmatrix_signal+0x13e>
                    invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
  41e9e2:	8af1      	ldrh	r1, [r6, #22]
  41e9e4:	4628      	mov	r0, r5
  41e9e6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 41eab4 <lv_btnmatrix_signal+0x28c>
  41e9ea:	47c0      	blx	r8
                    ext->btn_id_pr = btn_pr;
  41e9ec:	82f7      	strh	r7, [r6, #22]
                    ext->btn_id_act = btn_pr;
  41e9ee:	8377      	strh	r7, [r6, #26]
                    invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
  41e9f0:	4639      	mov	r1, r7
  41e9f2:	4628      	mov	r0, r5
  41e9f4:	47c0      	blx	r8
  41e9f6:	e7b6      	b.n	41e966 <lv_btnmatrix_signal+0x13e>
                                                       lv_group_get_editing(lv_obj_get_group(btnm)))) {
  41e9f8:	4628      	mov	r0, r5
  41e9fa:	4b3e      	ldr	r3, [pc, #248]	; (41eaf4 <lv_btnmatrix_signal+0x2cc>)
  41e9fc:	4798      	blx	r3
  41e9fe:	4b3e      	ldr	r3, [pc, #248]	; (41eaf8 <lv_btnmatrix_signal+0x2d0>)
  41ea00:	4798      	blx	r3
        else if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER &&
  41ea02:	2800      	cmp	r0, #0
  41ea04:	d0af      	beq.n	41e966 <lv_btnmatrix_signal+0x13e>
            ext->btn_id_pr = ext->btn_id_focused;
  41ea06:	8b31      	ldrh	r1, [r6, #24]
  41ea08:	82f1      	strh	r1, [r6, #22]
            invalidate_button_area(btnm, ext->btn_id_focused);
  41ea0a:	4628      	mov	r0, r5
  41ea0c:	4b29      	ldr	r3, [pc, #164]	; (41eab4 <lv_btnmatrix_signal+0x28c>)
  41ea0e:	4798      	blx	r3
  41ea10:	e7a9      	b.n	41e966 <lv_btnmatrix_signal+0x13e>
        lv_indev_t * indev = lv_indev_get_act();
  41ea12:	4b30      	ldr	r3, [pc, #192]	; (41ead4 <lv_btnmatrix_signal+0x2ac>)
  41ea14:	4798      	blx	r3
  41ea16:	4607      	mov	r7, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
  41ea18:	4b2f      	ldr	r3, [pc, #188]	; (41ead8 <lv_btnmatrix_signal+0x2b0>)
  41ea1a:	4798      	blx	r3
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return LV_RES_OK;
  41ea1c:	2802      	cmp	r0, #2
  41ea1e:	bf18      	it	ne
  41ea20:	2804      	cmpne	r0, #4
  41ea22:	f43f af0f 	beq.w	41e844 <lv_btnmatrix_signal+0x1c>
        lv_indev_get_point(indev, &p);
  41ea26:	a903      	add	r1, sp, #12
  41ea28:	4638      	mov	r0, r7
  41ea2a:	4b30      	ldr	r3, [pc, #192]	; (41eaec <lv_btnmatrix_signal+0x2c4>)
  41ea2c:	4798      	blx	r3
        btn_pr = get_button_from_point(btnm, &p);
  41ea2e:	a903      	add	r1, sp, #12
  41ea30:	4628      	mov	r0, r5
  41ea32:	4b2f      	ldr	r3, [pc, #188]	; (41eaf0 <lv_btnmatrix_signal+0x2c8>)
  41ea34:	4798      	blx	r3
  41ea36:	4607      	mov	r7, r0
        if(btn_pr != ext->btn_id_pr) {
  41ea38:	8af1      	ldrh	r1, [r6, #22]
  41ea3a:	4288      	cmp	r0, r1
  41ea3c:	f43f af02 	beq.w	41e844 <lv_btnmatrix_signal+0x1c>
            if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
  41ea40:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ea44:	4299      	cmp	r1, r3
  41ea46:	d002      	beq.n	41ea4e <lv_btnmatrix_signal+0x226>
                invalidate_button_area(btnm, ext->btn_id_pr);
  41ea48:	4628      	mov	r0, r5
  41ea4a:	4b1a      	ldr	r3, [pc, #104]	; (41eab4 <lv_btnmatrix_signal+0x28c>)
  41ea4c:	4798      	blx	r3
            ext->btn_id_pr  = btn_pr;
  41ea4e:	82f7      	strh	r7, [r6, #22]
            ext->btn_id_act = btn_pr;
  41ea50:	8377      	strh	r7, [r6, #26]
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
  41ea52:	4640      	mov	r0, r8
  41ea54:	4b29      	ldr	r3, [pc, #164]	; (41eafc <lv_btnmatrix_signal+0x2d4>)
  41ea56:	4798      	blx	r3
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
  41ea58:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ea5c:	429f      	cmp	r7, r3
  41ea5e:	f43f aef1 	beq.w	41e844 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41ea62:	68b3      	ldr	r3, [r6, #8]
  41ea64:	f833 8017 	ldrh.w	r8, [r3, r7, lsl #1]
  41ea68:	4640      	mov	r0, r8
  41ea6a:	4b1d      	ldr	r3, [pc, #116]	; (41eae0 <lv_btnmatrix_signal+0x2b8>)
  41ea6c:	4798      	blx	r3
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
  41ea6e:	2800      	cmp	r0, #0
  41ea70:	f47f aee8 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
               button_is_hidden(ext->ctrl_bits[btn_pr]) == false) {
  41ea74:	4640      	mov	r0, r8
  41ea76:	4b1b      	ldr	r3, [pc, #108]	; (41eae4 <lv_btnmatrix_signal+0x2bc>)
  41ea78:	4798      	blx	r3
               button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41ea7a:	2800      	cmp	r0, #0
  41ea7c:	f47f aee2 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
                invalidate_button_area(btnm, btn_pr);
  41ea80:	4639      	mov	r1, r7
  41ea82:	4628      	mov	r0, r5
  41ea84:	4b0b      	ldr	r3, [pc, #44]	; (41eab4 <lv_btnmatrix_signal+0x28c>)
  41ea86:	4798      	blx	r3
                if(button_is_click_trig(ext->ctrl_bits[btn_pr]) == false) {
  41ea88:	68b3      	ldr	r3, [r6, #8]
  41ea8a:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
  41ea8e:	4b13      	ldr	r3, [pc, #76]	; (41eadc <lv_btnmatrix_signal+0x2b4>)
  41ea90:	4798      	blx	r3
  41ea92:	2800      	cmp	r0, #0
  41ea94:	f47f aed6 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
                    uint32_t b = btn_pr;
  41ea98:	aa04      	add	r2, sp, #16
  41ea9a:	f842 7d08 	str.w	r7, [r2, #-8]!
                    lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41ea9e:	2110      	movs	r1, #16
  41eaa0:	4628      	mov	r0, r5
  41eaa2:	4b11      	ldr	r3, [pc, #68]	; (41eae8 <lv_btnmatrix_signal+0x2c0>)
  41eaa4:	4798      	blx	r3
  41eaa6:	e6cd      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
  41eaa8:	2041485c 	.word	0x2041485c
  41eaac:	0041dd9d 	.word	0x0041dd9d
  41eab0:	00408095 	.word	0x00408095
  41eab4:	0041dfa9 	.word	0x0041dfa9
  41eab8:	0042f888 	.word	0x0042f888
  41eabc:	00408321 	.word	0x00408321
  41eac0:	00405cd5 	.word	0x00405cd5
  41eac4:	00416681 	.word	0x00416681
  41eac8:	0041e0e5 	.word	0x0041e0e5
  41eacc:	00405b81 	.word	0x00405b81
  41ead0:	00405bb1 	.word	0x00405bb1
  41ead4:	00404c51 	.word	0x00404c51
  41ead8:	00404c5d 	.word	0x00404c5d
  41eadc:	0041dd89 	.word	0x0041dd89
  41eae0:	0041dd83 	.word	0x0041dd83
  41eae4:	0041dd77 	.word	0x0041dd77
  41eae8:	0040589d 	.word	0x0040589d
  41eaec:	00404d15 	.word	0x00404d15
  41eaf0:	0041dde1 	.word	0x0041dde1
  41eaf4:	004080bd 	.word	0x004080bd
  41eaf8:	00403ae1 	.word	0x00403ae1
  41eafc:	00404cf5 	.word	0x00404cf5
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
  41eb00:	8ac7      	ldrh	r7, [r0, #22]
  41eb02:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41eb06:	429f      	cmp	r7, r3
  41eb08:	f43f ae9c 	beq.w	41e844 <lv_btnmatrix_signal+0x1c>
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr]) &&
  41eb0c:	f8d0 9008 	ldr.w	r9, [r0, #8]
  41eb10:	f839 8017 	ldrh.w	r8, [r9, r7, lsl #1]
  41eb14:	4640      	mov	r0, r8
  41eb16:	4ba7      	ldr	r3, [pc, #668]	; (41edb4 <lv_btnmatrix_signal+0x58c>)
  41eb18:	4798      	blx	r3
  41eb1a:	b1c0      	cbz	r0, 41eb4e <lv_btnmatrix_signal+0x326>
               !button_is_inactive(ext->ctrl_bits[ext->btn_id_pr])) {
  41eb1c:	4640      	mov	r0, r8
  41eb1e:	4ba6      	ldr	r3, [pc, #664]	; (41edb8 <lv_btnmatrix_signal+0x590>)
  41eb20:	4798      	blx	r3
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr]) &&
  41eb22:	b9a0      	cbnz	r0, 41eb4e <lv_btnmatrix_signal+0x326>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr]) && !ext->one_check) {
  41eb24:	4640      	mov	r0, r8
  41eb26:	4ba5      	ldr	r3, [pc, #660]	; (41edbc <lv_btnmatrix_signal+0x594>)
  41eb28:	4798      	blx	r3
  41eb2a:	b140      	cbz	r0, 41eb3e <lv_btnmatrix_signal+0x316>
  41eb2c:	7f33      	ldrb	r3, [r6, #28]
  41eb2e:	f013 0f02 	tst.w	r3, #2
  41eb32:	d104      	bne.n	41eb3e <lv_btnmatrix_signal+0x316>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNMATRIX_CTRL_CHECK_STATE);
  41eb34:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  41eb38:	f829 8017 	strh.w	r8, [r9, r7, lsl #1]
  41eb3c:	e003      	b.n	41eb46 <lv_btnmatrix_signal+0x31e>
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNMATRIX_CTRL_CHECK_STATE;
  41eb3e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  41eb42:	f829 8017 	strh.w	r8, [r9, r7, lsl #1]
                if(ext->one_check) make_one_button_toggled(btnm, ext->btn_id_pr);
  41eb46:	7f33      	ldrb	r3, [r6, #28]
  41eb48:	f013 0f02 	tst.w	r3, #2
  41eb4c:	d132      	bne.n	41ebb4 <lv_btnmatrix_signal+0x38c>
            invalidate_button_area(btnm, ext->btn_id_pr);
  41eb4e:	8af1      	ldrh	r1, [r6, #22]
  41eb50:	4628      	mov	r0, r5
  41eb52:	4f9b      	ldr	r7, [pc, #620]	; (41edc0 <lv_btnmatrix_signal+0x598>)
  41eb54:	47b8      	blx	r7
            invalidate_button_area(btnm, ext->btn_id_focused);
  41eb56:	8b31      	ldrh	r1, [r6, #24]
  41eb58:	4628      	mov	r0, r5
  41eb5a:	47b8      	blx	r7
            lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
  41eb5c:	4b99      	ldr	r3, [pc, #612]	; (41edc4 <lv_btnmatrix_signal+0x59c>)
  41eb5e:	4798      	blx	r3
  41eb60:	4b99      	ldr	r3, [pc, #612]	; (41edc8 <lv_btnmatrix_signal+0x5a0>)
  41eb62:	4798      	blx	r3
            if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) {
  41eb64:	2804      	cmp	r0, #4
  41eb66:	bf18      	it	ne
  41eb68:	2802      	cmpne	r0, #2
  41eb6a:	d101      	bne.n	41eb70 <lv_btnmatrix_signal+0x348>
                ext->btn_id_focused = ext->btn_id_pr;
  41eb6c:	8af3      	ldrh	r3, [r6, #22]
  41eb6e:	8333      	strh	r3, [r6, #24]
            ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
  41eb70:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41eb74:	82f3      	strh	r3, [r6, #22]
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
  41eb76:	68b3      	ldr	r3, [r6, #8]
  41eb78:	8b77      	ldrh	r7, [r6, #26]
  41eb7a:	f833 6017 	ldrh.w	r6, [r3, r7, lsl #1]
  41eb7e:	4630      	mov	r0, r6
  41eb80:	4b92      	ldr	r3, [pc, #584]	; (41edcc <lv_btnmatrix_signal+0x5a4>)
  41eb82:	4798      	blx	r3
  41eb84:	2800      	cmp	r0, #0
  41eb86:	f43f ae5d 	beq.w	41e844 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41eb8a:	4630      	mov	r0, r6
  41eb8c:	4b8a      	ldr	r3, [pc, #552]	; (41edb8 <lv_btnmatrix_signal+0x590>)
  41eb8e:	4798      	blx	r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
  41eb90:	2800      	cmp	r0, #0
  41eb92:	f47f ae57 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
  41eb96:	4630      	mov	r0, r6
  41eb98:	4b8d      	ldr	r3, [pc, #564]	; (41edd0 <lv_btnmatrix_signal+0x5a8>)
  41eb9a:	4798      	blx	r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41eb9c:	2800      	cmp	r0, #0
  41eb9e:	f47f ae51 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
                uint32_t b = ext->btn_id_act;
  41eba2:	aa04      	add	r2, sp, #16
  41eba4:	f842 7d08 	str.w	r7, [r2, #-8]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41eba8:	2110      	movs	r1, #16
  41ebaa:	4628      	mov	r0, r5
  41ebac:	4b89      	ldr	r3, [pc, #548]	; (41edd4 <lv_btnmatrix_signal+0x5ac>)
  41ebae:	4798      	blx	r3
  41ebb0:	4604      	mov	r4, r0
  41ebb2:	e647      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
                if(ext->one_check) make_one_button_toggled(btnm, ext->btn_id_pr);
  41ebb4:	8af1      	ldrh	r1, [r6, #22]
  41ebb6:	4628      	mov	r0, r5
  41ebb8:	4b87      	ldr	r3, [pc, #540]	; (41edd8 <lv_btnmatrix_signal+0x5b0>)
  41ebba:	4798      	blx	r3
  41ebbc:	e7c7      	b.n	41eb4e <lv_btnmatrix_signal+0x326>
        if(ext->btn_id_act != LV_BTNMATRIX_BTN_NONE) {
  41ebbe:	8b47      	ldrh	r7, [r0, #26]
  41ebc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ebc4:	429f      	cmp	r7, r3
  41ebc6:	f43f ae3d 	beq.w	41e844 <lv_btnmatrix_signal+0x1c>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ebca:	6883      	ldr	r3, [r0, #8]
  41ebcc:	f833 6017 	ldrh.w	r6, [r3, r7, lsl #1]
  41ebd0:	4630      	mov	r0, r6
  41ebd2:	4b82      	ldr	r3, [pc, #520]	; (41eddc <lv_btnmatrix_signal+0x5b4>)
  41ebd4:	4798      	blx	r3
  41ebd6:	2800      	cmp	r0, #0
  41ebd8:	f47f ae34 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ebdc:	4630      	mov	r0, r6
  41ebde:	4b76      	ldr	r3, [pc, #472]	; (41edb8 <lv_btnmatrix_signal+0x590>)
  41ebe0:	4798      	blx	r3
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ebe2:	2800      	cmp	r0, #0
  41ebe4:	f47f ae2e 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
  41ebe8:	4630      	mov	r0, r6
  41ebea:	4b79      	ldr	r3, [pc, #484]	; (41edd0 <lv_btnmatrix_signal+0x5a8>)
  41ebec:	4798      	blx	r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ebee:	2800      	cmp	r0, #0
  41ebf0:	f47f ae28 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
                uint32_t b = ext->btn_id_act;
  41ebf4:	aa04      	add	r2, sp, #16
  41ebf6:	f842 7d08 	str.w	r7, [r2, #-8]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41ebfa:	2110      	movs	r1, #16
  41ebfc:	4628      	mov	r0, r5
  41ebfe:	4b75      	ldr	r3, [pc, #468]	; (41edd4 <lv_btnmatrix_signal+0x5ac>)
  41ec00:	4798      	blx	r3
  41ec02:	4604      	mov	r4, r0
  41ec04:	e61e      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
        ext->btn_id_pr  = LV_BTNMATRIX_BTN_NONE;
  41ec06:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ec0a:	82c3      	strh	r3, [r0, #22]
        ext->btn_id_act = LV_BTNMATRIX_BTN_NONE;
  41ec0c:	8343      	strh	r3, [r0, #26]
        lv_obj_invalidate(btnm);
  41ec0e:	4628      	mov	r0, r5
  41ec10:	4b73      	ldr	r3, [pc, #460]	; (41ede0 <lv_btnmatrix_signal+0x5b8>)
  41ec12:	4798      	blx	r3
  41ec14:	e616      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
        lv_indev_t * indev         = lv_indev_get_act();
  41ec16:	4b6b      	ldr	r3, [pc, #428]	; (41edc4 <lv_btnmatrix_signal+0x59c>)
  41ec18:	4798      	blx	r3
  41ec1a:	4607      	mov	r7, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
  41ec1c:	4b6a      	ldr	r3, [pc, #424]	; (41edc8 <lv_btnmatrix_signal+0x5a0>)
  41ec1e:	4798      	blx	r3
        if(indev == NULL) {
  41ec20:	b147      	cbz	r7, 41ec34 <lv_btnmatrix_signal+0x40c>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
  41ec22:	2804      	cmp	r0, #4
  41ec24:	d00c      	beq.n	41ec40 <lv_btnmatrix_signal+0x418>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD) {
  41ec26:	2802      	cmp	r0, #2
  41ec28:	f47f ae0c 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
            ext->btn_id_focused = 0;
  41ec2c:	2300      	movs	r3, #0
  41ec2e:	8333      	strh	r3, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41ec30:	8373      	strh	r3, [r6, #26]
  41ec32:	e607      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
            indev = lv_indev_get_next(NULL);
  41ec34:	2000      	movs	r0, #0
  41ec36:	4b6b      	ldr	r3, [pc, #428]	; (41ede4 <lv_btnmatrix_signal+0x5bc>)
  41ec38:	4798      	blx	r3
            indev_type = lv_indev_get_type(indev);
  41ec3a:	4b63      	ldr	r3, [pc, #396]	; (41edc8 <lv_btnmatrix_signal+0x5a0>)
  41ec3c:	4798      	blx	r3
  41ec3e:	e7f0      	b.n	41ec22 <lv_btnmatrix_signal+0x3fa>
            if(lv_group_get_editing(lv_obj_get_group(btnm))) {
  41ec40:	4628      	mov	r0, r5
  41ec42:	4b69      	ldr	r3, [pc, #420]	; (41ede8 <lv_btnmatrix_signal+0x5c0>)
  41ec44:	4798      	blx	r3
  41ec46:	4b69      	ldr	r3, [pc, #420]	; (41edec <lv_btnmatrix_signal+0x5c4>)
  41ec48:	4798      	blx	r3
  41ec4a:	b118      	cbz	r0, 41ec54 <lv_btnmatrix_signal+0x42c>
                ext->btn_id_focused = 0;
  41ec4c:	2300      	movs	r3, #0
  41ec4e:	8333      	strh	r3, [r6, #24]
                ext->btn_id_act = ext->btn_id_focused;
  41ec50:	8373      	strh	r3, [r6, #26]
  41ec52:	e5f7      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
                ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
  41ec54:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ec58:	8333      	strh	r3, [r6, #24]
  41ec5a:	e5f3      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
    else if(sign == LV_SIGNAL_CONTROL) {
  41ec5c:	2f18      	cmp	r7, #24
  41ec5e:	d006      	beq.n	41ec6e <lv_btnmatrix_signal+0x446>
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
  41ec60:	2f19      	cmp	r7, #25
  41ec62:	f47f adef 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
        *editable       = true;
  41ec66:	2301      	movs	r3, #1
  41ec68:	f888 3000 	strb.w	r3, [r8]
  41ec6c:	e5ea      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
        char c = *((char *)param);
  41ec6e:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_KEY_RIGHT) {
  41ec72:	2b13      	cmp	r3, #19
  41ec74:	d024      	beq.n	41ecc0 <lv_btnmatrix_signal+0x498>
        else if(c == LV_KEY_LEFT) {
  41ec76:	2b14      	cmp	r3, #20
  41ec78:	d038      	beq.n	41ecec <lv_btnmatrix_signal+0x4c4>
        else if(c == LV_KEY_DOWN) {
  41ec7a:	2b12      	cmp	r3, #18
  41ec7c:	d048      	beq.n	41ed10 <lv_btnmatrix_signal+0x4e8>
        else if(c == LV_KEY_UP) {
  41ec7e:	2b11      	cmp	r3, #17
  41ec80:	f47f ade0 	bne.w	41e844 <lv_btnmatrix_signal+0x1c>
  41ec84:	2214      	movs	r2, #20
  41ec86:	2100      	movs	r1, #0
  41ec88:	4628      	mov	r0, r5
  41ec8a:	4b59      	ldr	r3, [pc, #356]	; (41edf0 <lv_btnmatrix_signal+0x5c8>)
  41ec8c:	4798      	blx	r3
  41ec8e:	4683      	mov	fp, r0
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) {
  41ec90:	8b37      	ldrh	r7, [r6, #24]
  41ec92:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ec96:	429f      	cmp	r7, r3
  41ec98:	f000 8088 	beq.w	41edac <lv_btnmatrix_signal+0x584>
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
  41ec9c:	f8d6 8004 	ldr.w	r8, [r6, #4]
  41eca0:	eb08 0ac7 	add.w	sl, r8, r7, lsl #3
  41eca4:	f838 2037 	ldrh.w	r2, [r8, r7, lsl #3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41eca8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41ecac:	1a9b      	subs	r3, r3, r2
  41ecae:	b29b      	uxth	r3, r3
  41ecb0:	3301      	adds	r3, #1
  41ecb2:	f343 034e 	sbfx	r3, r3, #1, #15
  41ecb6:	4413      	add	r3, r2
                lv_coord_t pr_center =
  41ecb8:	fa0f f983 	sxth.w	r9, r3
                for(area_above = ext->btn_id_focused; area_above >= 0; area_above--) {
  41ecbc:	b23f      	sxth	r7, r7
  41ecbe:	e09b      	b.n	41edf8 <lv_btnmatrix_signal+0x5d0>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE)
  41ecc0:	8b03      	ldrh	r3, [r0, #24]
  41ecc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41ecc6:	4293      	cmp	r3, r2
  41ecc8:	d00d      	beq.n	41ece6 <lv_btnmatrix_signal+0x4be>
                ext->btn_id_focused++;
  41ecca:	3301      	adds	r3, #1
  41eccc:	8303      	strh	r3, [r0, #24]
            if(ext->btn_id_focused >= ext->btn_cnt - 1) ext->btn_id_focused = ext->btn_cnt - 1;
  41ecce:	8b31      	ldrh	r1, [r6, #24]
  41ecd0:	8ab3      	ldrh	r3, [r6, #20]
  41ecd2:	1e5a      	subs	r2, r3, #1
  41ecd4:	4291      	cmp	r1, r2
  41ecd6:	db00      	blt.n	41ecda <lv_btnmatrix_signal+0x4b2>
  41ecd8:	8332      	strh	r2, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41ecda:	8b33      	ldrh	r3, [r6, #24]
  41ecdc:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(btnm);
  41ecde:	4628      	mov	r0, r5
  41ece0:	4b3f      	ldr	r3, [pc, #252]	; (41ede0 <lv_btnmatrix_signal+0x5b8>)
  41ece2:	4798      	blx	r3
  41ece4:	e5ae      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
                ext->btn_id_focused = 0;
  41ece6:	2300      	movs	r3, #0
  41ece8:	8303      	strh	r3, [r0, #24]
  41ecea:	e7f0      	b.n	41ecce <lv_btnmatrix_signal+0x4a6>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) ext->btn_id_focused = 0;
  41ecec:	8b02      	ldrh	r2, [r0, #24]
  41ecee:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ecf2:	429a      	cmp	r2, r3
  41ecf4:	d009      	beq.n	41ed0a <lv_btnmatrix_signal+0x4e2>
            if(ext->btn_id_focused > 0) ext->btn_id_focused--;
  41ecf6:	8b33      	ldrh	r3, [r6, #24]
  41ecf8:	b10b      	cbz	r3, 41ecfe <lv_btnmatrix_signal+0x4d6>
  41ecfa:	3b01      	subs	r3, #1
  41ecfc:	8333      	strh	r3, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41ecfe:	8b33      	ldrh	r3, [r6, #24]
  41ed00:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(btnm);
  41ed02:	4628      	mov	r0, r5
  41ed04:	4b36      	ldr	r3, [pc, #216]	; (41ede0 <lv_btnmatrix_signal+0x5b8>)
  41ed06:	4798      	blx	r3
  41ed08:	e59c      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) ext->btn_id_focused = 0;
  41ed0a:	2300      	movs	r3, #0
  41ed0c:	8303      	strh	r3, [r0, #24]
  41ed0e:	e7f2      	b.n	41ecf6 <lv_btnmatrix_signal+0x4ce>
  41ed10:	2214      	movs	r2, #20
  41ed12:	2100      	movs	r1, #0
  41ed14:	4628      	mov	r0, r5
  41ed16:	4b36      	ldr	r3, [pc, #216]	; (41edf0 <lv_btnmatrix_signal+0x5c8>)
  41ed18:	4798      	blx	r3
  41ed1a:	9000      	str	r0, [sp, #0]
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) {
  41ed1c:	8b37      	ldrh	r7, [r6, #24]
  41ed1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ed22:	429f      	cmp	r7, r3
  41ed24:	d010      	beq.n	41ed48 <lv_btnmatrix_signal+0x520>
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
  41ed26:	f8d6 9004 	ldr.w	r9, [r6, #4]
  41ed2a:	eb09 0ac7 	add.w	sl, r9, r7, lsl #3
  41ed2e:	f839 2037 	ldrh.w	r2, [r9, r7, lsl #3]
  41ed32:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41ed36:	1a9b      	subs	r3, r3, r2
  41ed38:	b29b      	uxth	r3, r3
  41ed3a:	3301      	adds	r3, #1
  41ed3c:	f343 034e 	sbfx	r3, r3, #1, #15
  41ed40:	4413      	add	r3, r2
                lv_coord_t pr_center =
  41ed42:	fa0f fb83 	sxth.w	fp, r3
                for(area_below = ext->btn_id_focused; area_below < ext->btn_cnt; area_below++) {
  41ed46:	e004      	b.n	41ed52 <lv_btnmatrix_signal+0x52a>
                ext->btn_id_focused = 0;
  41ed48:	2300      	movs	r3, #0
  41ed4a:	8333      	strh	r3, [r6, #24]
  41ed4c:	e028      	b.n	41eda0 <lv_btnmatrix_signal+0x578>
                for(area_below = ext->btn_id_focused; area_below < ext->btn_cnt; area_below++) {
  41ed4e:	3701      	adds	r7, #1
  41ed50:	b2bf      	uxth	r7, r7
  41ed52:	f8b6 8014 	ldrh.w	r8, [r6, #20]
  41ed56:	4547      	cmp	r7, r8
  41ed58:	d21f      	bcs.n	41ed9a <lv_btnmatrix_signal+0x572>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_focused].y1 &&
  41ed5a:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
  41ed5e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
  41ed62:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
  41ed66:	4291      	cmp	r1, r2
  41ed68:	ddf1      	ble.n	41ed4e <lv_btnmatrix_signal+0x526>
                       pr_center >= ext->button_areas[area_below].x1 &&
  41ed6a:	f939 2037 	ldrsh.w	r2, [r9, r7, lsl #3]
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_focused].y1 &&
  41ed6e:	4593      	cmp	fp, r2
  41ed70:	dbed      	blt.n	41ed4e <lv_btnmatrix_signal+0x526>
                       pr_center <= ext->button_areas[area_below].x2 + pad_inner &&
  41ed72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41ed76:	9a00      	ldr	r2, [sp, #0]
  41ed78:	4413      	add	r3, r2
                       pr_center >= ext->button_areas[area_below].x1 &&
  41ed7a:	459b      	cmp	fp, r3
  41ed7c:	dce7      	bgt.n	41ed4e <lv_btnmatrix_signal+0x526>
                       button_is_inactive(ext->ctrl_bits[area_below]) == false &&
  41ed7e:	68b3      	ldr	r3, [r6, #8]
  41ed80:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
  41ed84:	9301      	str	r3, [sp, #4]
  41ed86:	4618      	mov	r0, r3
  41ed88:	4b0b      	ldr	r3, [pc, #44]	; (41edb8 <lv_btnmatrix_signal+0x590>)
  41ed8a:	4798      	blx	r3
                       pr_center <= ext->button_areas[area_below].x2 + pad_inner &&
  41ed8c:	2800      	cmp	r0, #0
  41ed8e:	d1de      	bne.n	41ed4e <lv_btnmatrix_signal+0x526>
                       button_is_hidden(ext->ctrl_bits[area_below]) == false) {
  41ed90:	9801      	ldr	r0, [sp, #4]
  41ed92:	4b0f      	ldr	r3, [pc, #60]	; (41edd0 <lv_btnmatrix_signal+0x5a8>)
  41ed94:	4798      	blx	r3
                       button_is_inactive(ext->ctrl_bits[area_below]) == false &&
  41ed96:	2800      	cmp	r0, #0
  41ed98:	d1d9      	bne.n	41ed4e <lv_btnmatrix_signal+0x526>
                if(area_below < ext->btn_cnt) ext->btn_id_focused = area_below;
  41ed9a:	4547      	cmp	r7, r8
  41ed9c:	d200      	bcs.n	41eda0 <lv_btnmatrix_signal+0x578>
  41ed9e:	8337      	strh	r7, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41eda0:	8b33      	ldrh	r3, [r6, #24]
  41eda2:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(btnm);
  41eda4:	4628      	mov	r0, r5
  41eda6:	4b0e      	ldr	r3, [pc, #56]	; (41ede0 <lv_btnmatrix_signal+0x5b8>)
  41eda8:	4798      	blx	r3
  41edaa:	e54b      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
                ext->btn_id_focused = 0;
  41edac:	2300      	movs	r3, #0
  41edae:	8333      	strh	r3, [r6, #24]
  41edb0:	e047      	b.n	41ee42 <lv_btnmatrix_signal+0x61a>
  41edb2:	bf00      	nop
  41edb4:	0041dd8f 	.word	0x0041dd8f
  41edb8:	0041dd83 	.word	0x0041dd83
  41edbc:	0041dd95 	.word	0x0041dd95
  41edc0:	0041dfa9 	.word	0x0041dfa9
  41edc4:	00404c51 	.word	0x00404c51
  41edc8:	00404c5d 	.word	0x00404c5d
  41edcc:	0041dd89 	.word	0x0041dd89
  41edd0:	0041dd77 	.word	0x0041dd77
  41edd4:	0040589d 	.word	0x0040589d
  41edd8:	0041e7f5 	.word	0x0041e7f5
  41eddc:	0041dd7d 	.word	0x0041dd7d
  41ede0:	00405f59 	.word	0x00405f59
  41ede4:	00415071 	.word	0x00415071
  41ede8:	004080bd 	.word	0x004080bd
  41edec:	00403ae1 	.word	0x00403ae1
  41edf0:	00407445 	.word	0x00407445
                for(area_above = ext->btn_id_focused; area_above >= 0; area_above--) {
  41edf4:	3f01      	subs	r7, #1
  41edf6:	b23f      	sxth	r7, r7
  41edf8:	2f00      	cmp	r7, #0
  41edfa:	db1f      	blt.n	41ee3c <lv_btnmatrix_signal+0x614>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_focused].y1 &&
  41edfc:	eb08 03c7 	add.w	r3, r8, r7, lsl #3
  41ee00:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
  41ee04:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
  41ee08:	4291      	cmp	r1, r2
  41ee0a:	daf3      	bge.n	41edf4 <lv_btnmatrix_signal+0x5cc>
                       pr_center >= ext->button_areas[area_above].x1 - pad_inner &&
  41ee0c:	f938 2037 	ldrsh.w	r2, [r8, r7, lsl #3]
  41ee10:	eba2 020b 	sub.w	r2, r2, fp
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_focused].y1 &&
  41ee14:	4591      	cmp	r9, r2
  41ee16:	dbed      	blt.n	41edf4 <lv_btnmatrix_signal+0x5cc>
                       pr_center <= ext->button_areas[area_above].x2 &&
  41ee18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                       pr_center >= ext->button_areas[area_above].x1 - pad_inner &&
  41ee1c:	4599      	cmp	r9, r3
  41ee1e:	dce9      	bgt.n	41edf4 <lv_btnmatrix_signal+0x5cc>
                       button_is_inactive(ext->ctrl_bits[area_above]) == false &&
  41ee20:	68b3      	ldr	r3, [r6, #8]
  41ee22:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
  41ee26:	9300      	str	r3, [sp, #0]
  41ee28:	4618      	mov	r0, r3
  41ee2a:	4b09      	ldr	r3, [pc, #36]	; (41ee50 <lv_btnmatrix_signal+0x628>)
  41ee2c:	4798      	blx	r3
                       pr_center <= ext->button_areas[area_above].x2 &&
  41ee2e:	2800      	cmp	r0, #0
  41ee30:	d1e0      	bne.n	41edf4 <lv_btnmatrix_signal+0x5cc>
                       button_is_hidden(ext->ctrl_bits[area_above]) == false) {
  41ee32:	9800      	ldr	r0, [sp, #0]
  41ee34:	4b07      	ldr	r3, [pc, #28]	; (41ee54 <lv_btnmatrix_signal+0x62c>)
  41ee36:	4798      	blx	r3
                       button_is_inactive(ext->ctrl_bits[area_above]) == false &&
  41ee38:	2800      	cmp	r0, #0
  41ee3a:	d1db      	bne.n	41edf4 <lv_btnmatrix_signal+0x5cc>
                if(area_above >= 0) ext->btn_id_focused = area_above;
  41ee3c:	2f00      	cmp	r7, #0
  41ee3e:	db00      	blt.n	41ee42 <lv_btnmatrix_signal+0x61a>
  41ee40:	8337      	strh	r7, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41ee42:	8b33      	ldrh	r3, [r6, #24]
  41ee44:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(btnm);
  41ee46:	4628      	mov	r0, r5
  41ee48:	4b03      	ldr	r3, [pc, #12]	; (41ee58 <lv_btnmatrix_signal+0x630>)
  41ee4a:	4798      	blx	r3
  41ee4c:	e4fa      	b.n	41e844 <lv_btnmatrix_signal+0x1c>
  41ee4e:	bf00      	nop
  41ee50:	0041dd83 	.word	0x0041dd83
  41ee54:	0041dd77 	.word	0x0041dd77
  41ee58:	00405f59 	.word	0x00405f59

0041ee5c <lv_btnmatrix_get_align>:
{
  41ee5c:	b510      	push	{r4, lr}
  41ee5e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41ee60:	4b09      	ldr	r3, [pc, #36]	; (41ee88 <lv_btnmatrix_get_align+0x2c>)
  41ee62:	4798      	blx	r3
  41ee64:	b928      	cbnz	r0, 41ee72 <lv_btnmatrix_get_align+0x16>
  41ee66:	4622      	mov	r2, r4
  41ee68:	2300      	movs	r3, #0
  41ee6a:	4808      	ldr	r0, [pc, #32]	; (41ee8c <lv_btnmatrix_get_align+0x30>)
  41ee6c:	4908      	ldr	r1, [pc, #32]	; (41ee90 <lv_btnmatrix_get_align+0x34>)
  41ee6e:	4788      	blx	r1
  41ee70:	e7fe      	b.n	41ee70 <lv_btnmatrix_get_align+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41ee72:	4620      	mov	r0, r4
  41ee74:	4b07      	ldr	r3, [pc, #28]	; (41ee94 <lv_btnmatrix_get_align+0x38>)
  41ee76:	4798      	blx	r3
    lv_label_align_t align = ext->align;
  41ee78:	7f00      	ldrb	r0, [r0, #28]
  41ee7a:	f3c0 0081 	ubfx	r0, r0, #2, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
  41ee7e:	2803      	cmp	r0, #3
  41ee80:	d000      	beq.n	41ee84 <lv_btnmatrix_get_align+0x28>
}
  41ee82:	bd10      	pop	{r4, pc}
        align = LV_LABEL_ALIGN_LEFT;
  41ee84:	2000      	movs	r0, #0
  41ee86:	e7fc      	b.n	41ee82 <lv_btnmatrix_get_align+0x26>
  41ee88:	00415e79 	.word	0x00415e79
  41ee8c:	0042c168 	.word	0x0042c168
  41ee90:	00415e85 	.word	0x00415e85
  41ee94:	00408095 	.word	0x00408095

0041ee98 <lv_btnmatrix_design>:
{
  41ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41ee9c:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
  41eea0:	9005      	str	r0, [sp, #20]
  41eea2:	9104      	str	r1, [sp, #16]
    if(mode == LV_DESIGN_COVER_CHK) {
  41eea4:	2a02      	cmp	r2, #2
  41eea6:	d008      	beq.n	41eeba <lv_btnmatrix_design+0x22>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41eea8:	b15a      	cbz	r2, 41eec2 <lv_btnmatrix_design+0x2a>
    else if(mode == LV_DESIGN_DRAW_POST) {
  41eeaa:	2a01      	cmp	r2, #1
  41eeac:	f000 823d 	beq.w	41f32a <lv_btnmatrix_design+0x492>
    return LV_DESIGN_RES_OK;
  41eeb0:	2000      	movs	r0, #0
}
  41eeb2:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
  41eeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ancestor_design_f(btnm, clip_area, mode);
  41eeba:	4ba3      	ldr	r3, [pc, #652]	; (41f148 <lv_btnmatrix_design+0x2b0>)
  41eebc:	681b      	ldr	r3, [r3, #0]
  41eebe:	4798      	blx	r3
  41eec0:	e7f7      	b.n	41eeb2 <lv_btnmatrix_design+0x1a>
        ancestor_design_f(btnm, clip_area, mode);
  41eec2:	4ba1      	ldr	r3, [pc, #644]	; (41f148 <lv_btnmatrix_design+0x2b0>)
  41eec4:	681b      	ldr	r3, [r3, #0]
  41eec6:	9904      	ldr	r1, [sp, #16]
  41eec8:	9c05      	ldr	r4, [sp, #20]
  41eeca:	4620      	mov	r0, r4
  41eecc:	4798      	blx	r3
        lv_btnmatrix_ext_t * ext         = lv_obj_get_ext_attr(btnm);
  41eece:	4620      	mov	r0, r4
  41eed0:	4b9e      	ldr	r3, [pc, #632]	; (41f14c <lv_btnmatrix_design+0x2b4>)
  41eed2:	4798      	blx	r3
  41eed4:	4607      	mov	r7, r0
        if(ext->btn_cnt == 0) return LV_DESIGN_RES_OK;
  41eed6:	8a83      	ldrh	r3, [r0, #20]
  41eed8:	b90b      	cbnz	r3, 41eede <lv_btnmatrix_design+0x46>
  41eeda:	2000      	movs	r0, #0
  41eedc:	e7e9      	b.n	41eeb2 <lv_btnmatrix_design+0x1a>
        lv_obj_get_coords(btnm, &area_btnm);
  41eede:	a910      	add	r1, sp, #64	; 0x40
  41eee0:	9805      	ldr	r0, [sp, #20]
  41eee2:	4b9b      	ldr	r3, [pc, #620]	; (41f150 <lv_btnmatrix_design+0x2b8>)
  41eee4:	4798      	blx	r3
        if(ext->recolor) txt_flag |= LV_TXT_FLAG_RECOLOR;
  41eee6:	7f3b      	ldrb	r3, [r7, #28]
  41eee8:	f013 0f01 	tst.w	r3, #1
  41eeec:	d140      	bne.n	41ef70 <lv_btnmatrix_design+0xd8>
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
  41eeee:	2300      	movs	r3, #0
  41eef0:	9308      	str	r3, [sp, #32]
        lv_label_align_t align = lv_btnmatrix_get_align(btnm);
  41eef2:	9805      	ldr	r0, [sp, #20]
  41eef4:	4b97      	ldr	r3, [pc, #604]	; (41f154 <lv_btnmatrix_design+0x2bc>)
  41eef6:	4798      	blx	r3
        if(align == LV_LABEL_ALIGN_CENTER) txt_flag |= LV_TXT_FLAG_CENTER;
  41eef8:	2801      	cmp	r0, #1
  41eefa:	d03c      	beq.n	41ef76 <lv_btnmatrix_design+0xde>
        if(align == LV_LABEL_ALIGN_RIGHT) txt_flag |= LV_TXT_FLAG_RIGHT;
  41eefc:	2802      	cmp	r0, #2
  41eefe:	d03f      	beq.n	41ef80 <lv_btnmatrix_design+0xe8>
        lv_state_t state_ori = btnm->state;
  41ef00:	9e05      	ldr	r6, [sp, #20]
  41ef02:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
  41ef06:	461d      	mov	r5, r3
  41ef08:	9309      	str	r3, [sp, #36]	; 0x24
        _lv_obj_disable_style_caching(btnm, true);
  41ef0a:	2101      	movs	r1, #1
  41ef0c:	4630      	mov	r0, r6
  41ef0e:	4c92      	ldr	r4, [pc, #584]	; (41f158 <lv_btnmatrix_design+0x2c0>)
  41ef10:	47a0      	blx	r4
        btnm->state = LV_STATE_DEFAULT;
  41ef12:	f04f 0b00 	mov.w	fp, #0
  41ef16:	f886 b03d 	strb.w	fp, [r6, #61]	; 0x3d
        lv_draw_rect_dsc_init(&draw_rect_rel_dsc);
  41ef1a:	a838      	add	r0, sp, #224	; 0xe0
  41ef1c:	4b8f      	ldr	r3, [pc, #572]	; (41f15c <lv_btnmatrix_design+0x2c4>)
  41ef1e:	4798      	blx	r3
        lv_draw_label_dsc_init(&draw_label_rel_dsc);
  41ef20:	a814      	add	r0, sp, #80	; 0x50
  41ef22:	4b8f      	ldr	r3, [pc, #572]	; (41f160 <lv_btnmatrix_design+0x2c8>)
  41ef24:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_rel_dsc);
  41ef26:	aa38      	add	r2, sp, #224	; 0xe0
  41ef28:	2101      	movs	r1, #1
  41ef2a:	4630      	mov	r0, r6
  41ef2c:	4b8d      	ldr	r3, [pc, #564]	; (41f164 <lv_btnmatrix_design+0x2cc>)
  41ef2e:	4798      	blx	r3
        lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_rel_dsc);
  41ef30:	aa14      	add	r2, sp, #80	; 0x50
  41ef32:	2101      	movs	r1, #1
  41ef34:	4630      	mov	r0, r6
  41ef36:	4b8c      	ldr	r3, [pc, #560]	; (41f168 <lv_btnmatrix_design+0x2d0>)
  41ef38:	4798      	blx	r3
        draw_label_rel_dsc.flag = txt_flag;
  41ef3a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  41ef3e:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
        btnm->state = state_ori;
  41ef42:	4632      	mov	r2, r6
  41ef44:	f882 503d 	strb.w	r5, [r2, #61]	; 0x3d
        _lv_obj_disable_style_caching(btnm, false);
  41ef48:	4659      	mov	r1, fp
  41ef4a:	4630      	mov	r0, r6
  41ef4c:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ef4e:	2210      	movs	r2, #16
  41ef50:	4659      	mov	r1, fp
  41ef52:	4630      	mov	r0, r6
  41ef54:	4c85      	ldr	r4, [pc, #532]	; (41f16c <lv_btnmatrix_design+0x2d4>)
  41ef56:	47a0      	blx	r4
  41ef58:	900a      	str	r0, [sp, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ef5a:	2211      	movs	r2, #17
  41ef5c:	4659      	mov	r1, fp
  41ef5e:	4630      	mov	r0, r6
  41ef60:	47a0      	blx	r4
  41ef62:	900b      	str	r0, [sp, #44]	; 0x2c
        bool disabled_inited = false;
  41ef64:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
        bool chk_inited = false;
  41ef68:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
        uint16_t txt_i = 0;
  41ef6c:	465c      	mov	r4, fp
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
  41ef6e:	e1b4      	b.n	41f2da <lv_btnmatrix_design+0x442>
        if(ext->recolor) txt_flag |= LV_TXT_FLAG_RECOLOR;
  41ef70:	2301      	movs	r3, #1
  41ef72:	9308      	str	r3, [sp, #32]
  41ef74:	e7bd      	b.n	41eef2 <lv_btnmatrix_design+0x5a>
        if(align == LV_LABEL_ALIGN_CENTER) txt_flag |= LV_TXT_FLAG_CENTER;
  41ef76:	9b08      	ldr	r3, [sp, #32]
  41ef78:	f043 0304 	orr.w	r3, r3, #4
  41ef7c:	9308      	str	r3, [sp, #32]
  41ef7e:	e7bd      	b.n	41eefc <lv_btnmatrix_design+0x64>
        if(align == LV_LABEL_ALIGN_RIGHT) txt_flag |= LV_TXT_FLAG_RIGHT;
  41ef80:	9b08      	ldr	r3, [sp, #32]
  41ef82:	f043 0308 	orr.w	r3, r3, #8
  41ef86:	9308      	str	r3, [sp, #32]
  41ef88:	e7ba      	b.n	41ef00 <lv_btnmatrix_design+0x68>
                txt_i++;
  41ef8a:	3401      	adds	r4, #1
  41ef8c:	b2a4      	uxth	r4, r4
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
  41ef8e:	683b      	ldr	r3, [r7, #0]
  41ef90:	4625      	mov	r5, r4
  41ef92:	00a6      	lsls	r6, r4, #2
  41ef94:	4976      	ldr	r1, [pc, #472]	; (41f170 <lv_btnmatrix_design+0x2d8>)
  41ef96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  41ef9a:	4b76      	ldr	r3, [pc, #472]	; (41f174 <lv_btnmatrix_design+0x2dc>)
  41ef9c:	4798      	blx	r3
  41ef9e:	2800      	cmp	r0, #0
  41efa0:	d0f3      	beq.n	41ef8a <lv_btnmatrix_design+0xf2>
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
  41efa2:	68bb      	ldr	r3, [r7, #8]
  41efa4:	ea4f 084b 	mov.w	r8, fp, lsl #1
  41efa8:	f833 001b 	ldrh.w	r0, [r3, fp, lsl #1]
  41efac:	4b72      	ldr	r3, [pc, #456]	; (41f178 <lv_btnmatrix_design+0x2e0>)
  41efae:	4798      	blx	r3
  41efb0:	2800      	cmp	r0, #0
  41efb2:	f040 818c 	bne.w	41f2ce <lv_btnmatrix_design+0x436>
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
  41efb6:	687a      	ldr	r2, [r7, #4]
  41efb8:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
    uint8_t * d8 = (uint8_t *)dst;
  41efbc:	a912      	add	r1, sp, #72	; 0x48
  41efbe:	2308      	movs	r3, #8
  41efc0:	e004      	b.n	41efcc <lv_btnmatrix_design+0x134>
        *d8 = *s8;
  41efc2:	f812 0b01 	ldrb.w	r0, [r2], #1
  41efc6:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  41efca:	3b01      	subs	r3, #1
    while(len) {
  41efcc:	2b00      	cmp	r3, #0
  41efce:	d1f8      	bne.n	41efc2 <lv_btnmatrix_design+0x12a>
            area_tmp.x1 += area_btnm.x1;
  41efd0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
  41efd4:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
  41efd8:	4410      	add	r0, r2
  41efda:	b280      	uxth	r0, r0
  41efdc:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            area_tmp.y1 += area_btnm.y1;
  41efe0:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
  41efe4:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
  41efe8:	4473      	add	r3, lr
  41efea:	b299      	uxth	r1, r3
  41efec:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
            area_tmp.x2 += area_btnm.x1;
  41eff0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  41eff4:	441a      	add	r2, r3
  41eff6:	b292      	uxth	r2, r2
  41eff8:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
            area_tmp.y2 += area_btnm.y1;
  41effc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  41f000:	4473      	add	r3, lr
  41f002:	b29b      	uxth	r3, r3
  41f004:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  41f008:	1a12      	subs	r2, r2, r0
  41f00a:	b292      	uxth	r2, r2
  41f00c:	3201      	adds	r2, #1
  41f00e:	b212      	sxth	r2, r2
  41f010:	9207      	str	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f012:	1a5b      	subs	r3, r3, r1
  41f014:	b29b      	uxth	r3, r3
  41f016:	3301      	adds	r3, #1
  41f018:	b21b      	sxth	r3, r3
  41f01a:	9306      	str	r3, [sp, #24]
            if(button_get_tgl_state(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
  41f01c:	68bb      	ldr	r3, [r7, #8]
  41f01e:	f833 9008 	ldrh.w	r9, [r3, r8]
  41f022:	4648      	mov	r0, r9
  41f024:	4b55      	ldr	r3, [pc, #340]	; (41f17c <lv_btnmatrix_design+0x2e4>)
  41f026:	4798      	blx	r3
  41f028:	2800      	cmp	r0, #0
  41f02a:	d140      	bne.n	41f0ae <lv_btnmatrix_design+0x216>
            lv_state_t btn_state = LV_STATE_DEFAULT;
  41f02c:	f04f 0800 	mov.w	r8, #0
            if(button_is_inactive(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
  41f030:	4648      	mov	r0, r9
  41f032:	4b53      	ldr	r3, [pc, #332]	; (41f180 <lv_btnmatrix_design+0x2e8>)
  41f034:	4798      	blx	r3
  41f036:	b108      	cbz	r0, 41f03c <lv_btnmatrix_design+0x1a4>
  41f038:	f048 0820 	orr.w	r8, r8, #32
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
  41f03c:	8afb      	ldrh	r3, [r7, #22]
  41f03e:	459b      	cmp	fp, r3
  41f040:	d038      	beq.n	41f0b4 <lv_btnmatrix_design+0x21c>
            if(btn_i == ext->btn_id_focused) {
  41f042:	8b3b      	ldrh	r3, [r7, #24]
  41f044:	459b      	cmp	fp, r3
  41f046:	d038      	beq.n	41f0ba <lv_btnmatrix_design+0x222>
            if(btn_state == LV_STATE_DEFAULT) {
  41f048:	f1b8 0f00 	cmp.w	r8, #0
  41f04c:	f000 80c5 	beq.w	41f1da <lv_btnmatrix_design+0x342>
            else if(btn_state == LV_STATE_CHECKED) {
  41f050:	f1b8 0f01 	cmp.w	r8, #1
  41f054:	d03c      	beq.n	41f0d0 <lv_btnmatrix_design+0x238>
            else if(btn_state == LV_STATE_DISABLED) {
  41f056:	f1b8 0f20 	cmp.w	r8, #32
  41f05a:	d06d      	beq.n	41f138 <lv_btnmatrix_design+0x2a0>
                btnm->state = btn_state;
  41f05c:	9a05      	ldr	r2, [sp, #20]
  41f05e:	f882 803d 	strb.w	r8, [r2, #61]	; 0x3d
                _lv_obj_disable_style_caching(btnm, true);
  41f062:	2101      	movs	r1, #1
  41f064:	4691      	mov	r9, r2
  41f066:	4610      	mov	r0, r2
  41f068:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 41f158 <lv_btnmatrix_design+0x2c0>
  41f06c:	47c0      	blx	r8
                lv_draw_rect_dsc_init(&draw_rect_tmp_dsc);
  41f06e:	a877      	add	r0, sp, #476	; 0x1dc
  41f070:	4b3a      	ldr	r3, [pc, #232]	; (41f15c <lv_btnmatrix_design+0x2c4>)
  41f072:	4798      	blx	r3
                lv_draw_label_dsc_init(&draw_label_tmp_dsc);
  41f074:	a82f      	add	r0, sp, #188	; 0xbc
  41f076:	4b3a      	ldr	r3, [pc, #232]	; (41f160 <lv_btnmatrix_design+0x2c8>)
  41f078:	4798      	blx	r3
                lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_tmp_dsc);
  41f07a:	aa77      	add	r2, sp, #476	; 0x1dc
  41f07c:	2101      	movs	r1, #1
  41f07e:	4648      	mov	r0, r9
  41f080:	4b38      	ldr	r3, [pc, #224]	; (41f164 <lv_btnmatrix_design+0x2cc>)
  41f082:	4798      	blx	r3
                lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_tmp_dsc);
  41f084:	aa2f      	add	r2, sp, #188	; 0xbc
  41f086:	2101      	movs	r1, #1
  41f088:	4648      	mov	r0, r9
  41f08a:	4b37      	ldr	r3, [pc, #220]	; (41f168 <lv_btnmatrix_design+0x2d0>)
  41f08c:	4798      	blx	r3
                draw_label_tmp_dsc.flag = txt_flag;
  41f08e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  41f092:	f88d 30dd 	strb.w	r3, [sp, #221]	; 0xdd
                btnm->state = state_ori;
  41f096:	4648      	mov	r0, r9
  41f098:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  41f09c:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
                _lv_obj_disable_style_caching(btnm, false);
  41f0a0:	2100      	movs	r1, #0
  41f0a2:	47c0      	blx	r8
                draw_label_dsc_act = &draw_label_tmp_dsc;
  41f0a4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
                draw_rect_dsc_act = &draw_rect_tmp_dsc;
  41f0a8:	f50d 78ee 	add.w	r8, sp, #476	; 0x1dc
  41f0ac:	e099      	b.n	41f1e2 <lv_btnmatrix_design+0x34a>
            if(button_get_tgl_state(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
  41f0ae:	f04f 0801 	mov.w	r8, #1
  41f0b2:	e7bd      	b.n	41f030 <lv_btnmatrix_design+0x198>
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
  41f0b4:	f048 0810 	orr.w	r8, r8, #16
  41f0b8:	e7c3      	b.n	41f042 <lv_btnmatrix_design+0x1aa>
                btn_state |= LV_STATE_FOCUSED;
  41f0ba:	f048 0302 	orr.w	r3, r8, #2
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
  41f0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41f0c0:	f012 0f04 	tst.w	r2, #4
  41f0c4:	d002      	beq.n	41f0cc <lv_btnmatrix_design+0x234>
  41f0c6:	f048 0806 	orr.w	r8, r8, #6
  41f0ca:	e7bd      	b.n	41f048 <lv_btnmatrix_design+0x1b0>
                btn_state |= LV_STATE_FOCUSED;
  41f0cc:	4698      	mov	r8, r3
  41f0ce:	e7bb      	b.n	41f048 <lv_btnmatrix_design+0x1b0>
                if(!chk_inited) {
  41f0d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41f0d2:	b123      	cbz	r3, 41f0de <lv_btnmatrix_design+0x246>
                draw_label_dsc_act = &draw_label_chk_dsc;
  41f0d4:	f10d 0974 	add.w	r9, sp, #116	; 0x74
                draw_rect_dsc_act = &draw_rect_chk_dsc;
  41f0d8:	f50d 789a 	add.w	r8, sp, #308	; 0x134
  41f0dc:	e081      	b.n	41f1e2 <lv_btnmatrix_design+0x34a>
                    btnm->state = LV_STATE_CHECKED;
  41f0de:	f04f 0a01 	mov.w	sl, #1
  41f0e2:	9a05      	ldr	r2, [sp, #20]
  41f0e4:	f882 a03d 	strb.w	sl, [r2, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, true);
  41f0e8:	4651      	mov	r1, sl
  41f0ea:	4691      	mov	r9, r2
  41f0ec:	4610      	mov	r0, r2
  41f0ee:	f8df 8068 	ldr.w	r8, [pc, #104]	; 41f158 <lv_btnmatrix_design+0x2c0>
  41f0f2:	47c0      	blx	r8
                    lv_draw_rect_dsc_init(&draw_rect_chk_dsc);
  41f0f4:	a84d      	add	r0, sp, #308	; 0x134
  41f0f6:	4b19      	ldr	r3, [pc, #100]	; (41f15c <lv_btnmatrix_design+0x2c4>)
  41f0f8:	4798      	blx	r3
                    lv_draw_label_dsc_init(&draw_label_chk_dsc);
  41f0fa:	a81d      	add	r0, sp, #116	; 0x74
  41f0fc:	4b18      	ldr	r3, [pc, #96]	; (41f160 <lv_btnmatrix_design+0x2c8>)
  41f0fe:	4798      	blx	r3
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_chk_dsc);
  41f100:	aa4d      	add	r2, sp, #308	; 0x134
  41f102:	4651      	mov	r1, sl
  41f104:	4648      	mov	r0, r9
  41f106:	4b17      	ldr	r3, [pc, #92]	; (41f164 <lv_btnmatrix_design+0x2cc>)
  41f108:	4798      	blx	r3
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_chk_dsc);
  41f10a:	aa1d      	add	r2, sp, #116	; 0x74
  41f10c:	4651      	mov	r1, sl
  41f10e:	4648      	mov	r0, r9
  41f110:	4b15      	ldr	r3, [pc, #84]	; (41f168 <lv_btnmatrix_design+0x2d0>)
  41f112:	4798      	blx	r3
                    draw_label_chk_dsc.flag = txt_flag;
  41f114:	f89d 3020 	ldrb.w	r3, [sp, #32]
  41f118:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
                    btnm->state = state_ori;
  41f11c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
  41f120:	f889 103d 	strb.w	r1, [r9, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, false);
  41f124:	2100      	movs	r1, #0
  41f126:	4648      	mov	r0, r9
  41f128:	47c0      	blx	r8
                draw_label_dsc_act = &draw_label_chk_dsc;
  41f12a:	f10d 0974 	add.w	r9, sp, #116	; 0x74
                draw_rect_dsc_act = &draw_rect_chk_dsc;
  41f12e:	f50d 789a 	add.w	r8, sp, #308	; 0x134
                    chk_inited = true;
  41f132:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  41f136:	e054      	b.n	41f1e2 <lv_btnmatrix_design+0x34a>
                if(!disabled_inited) {
  41f138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41f13a:	b31b      	cbz	r3, 41f184 <lv_btnmatrix_design+0x2ec>
                draw_label_dsc_act = &draw_label_ina_dsc;
  41f13c:	f10d 0998 	add.w	r9, sp, #152	; 0x98
                draw_rect_dsc_act = &draw_rect_ina_dsc;
  41f140:	f50d 78c4 	add.w	r8, sp, #392	; 0x188
  41f144:	e04d      	b.n	41f1e2 <lv_btnmatrix_design+0x34a>
  41f146:	bf00      	nop
  41f148:	20414858 	.word	0x20414858
  41f14c:	00408095 	.word	0x00408095
  41f150:	00405ac1 	.word	0x00405ac1
  41f154:	0041ee5d 	.word	0x0041ee5d
  41f158:	00405d01 	.word	0x00405d01
  41f15c:	0041245d 	.word	0x0041245d
  41f160:	0040ded5 	.word	0x0040ded5
  41f164:	0040833d 	.word	0x0040833d
  41f168:	0040896d 	.word	0x0040896d
  41f16c:	00407445 	.word	0x00407445
  41f170:	0042f884 	.word	0x0042f884
  41f174:	00427c49 	.word	0x00427c49
  41f178:	0041dd77 	.word	0x0041dd77
  41f17c:	0041dd95 	.word	0x0041dd95
  41f180:	0041dd83 	.word	0x0041dd83
                    btnm->state = LV_STATE_DISABLED;
  41f184:	2320      	movs	r3, #32
  41f186:	9805      	ldr	r0, [sp, #20]
  41f188:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, true);
  41f18c:	2101      	movs	r1, #1
  41f18e:	4681      	mov	r9, r0
  41f190:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 41f360 <lv_btnmatrix_design+0x4c8>
  41f194:	47c0      	blx	r8
                    lv_draw_rect_dsc_init(&draw_rect_ina_dsc);
  41f196:	a862      	add	r0, sp, #392	; 0x188
  41f198:	4b67      	ldr	r3, [pc, #412]	; (41f338 <lv_btnmatrix_design+0x4a0>)
  41f19a:	4798      	blx	r3
                    lv_draw_label_dsc_init(&draw_label_ina_dsc);
  41f19c:	a826      	add	r0, sp, #152	; 0x98
  41f19e:	4b67      	ldr	r3, [pc, #412]	; (41f33c <lv_btnmatrix_design+0x4a4>)
  41f1a0:	4798      	blx	r3
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_ina_dsc);
  41f1a2:	aa62      	add	r2, sp, #392	; 0x188
  41f1a4:	2101      	movs	r1, #1
  41f1a6:	4648      	mov	r0, r9
  41f1a8:	4b65      	ldr	r3, [pc, #404]	; (41f340 <lv_btnmatrix_design+0x4a8>)
  41f1aa:	4798      	blx	r3
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_ina_dsc);
  41f1ac:	aa26      	add	r2, sp, #152	; 0x98
  41f1ae:	2101      	movs	r1, #1
  41f1b0:	4648      	mov	r0, r9
  41f1b2:	4b64      	ldr	r3, [pc, #400]	; (41f344 <lv_btnmatrix_design+0x4ac>)
  41f1b4:	4798      	blx	r3
                    draw_label_ina_dsc.flag = txt_flag;
  41f1b6:	f89d 3020 	ldrb.w	r3, [sp, #32]
  41f1ba:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
                    btnm->state = state_ori;
  41f1be:	4648      	mov	r0, r9
  41f1c0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
  41f1c4:	f889 203d 	strb.w	r2, [r9, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, false);
  41f1c8:	2100      	movs	r1, #0
  41f1ca:	47c0      	blx	r8
                draw_label_dsc_act = &draw_label_ina_dsc;
  41f1cc:	f10d 0998 	add.w	r9, sp, #152	; 0x98
                draw_rect_dsc_act = &draw_rect_ina_dsc;
  41f1d0:	f50d 78c4 	add.w	r8, sp, #392	; 0x188
                    disabled_inited = true;
  41f1d4:	2301      	movs	r3, #1
  41f1d6:	930c      	str	r3, [sp, #48]	; 0x30
  41f1d8:	e003      	b.n	41f1e2 <lv_btnmatrix_design+0x34a>
                draw_label_dsc_act = &draw_label_rel_dsc;
  41f1da:	f10d 0950 	add.w	r9, sp, #80	; 0x50
                draw_rect_dsc_act = &draw_rect_rel_dsc;
  41f1de:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
            lv_style_int_t border_part_ori = draw_rect_dsc_act->border_side;
  41f1e2:	f9b8 a012 	ldrsh.w	sl, [r8, #18]
            if(border_part_ori & LV_BORDER_SIDE_INTERNAL) {
  41f1e6:	f01a 0f10 	tst.w	sl, #16
  41f1ea:	d029      	beq.n	41f240 <lv_btnmatrix_design+0x3a8>
                if(area_tmp.y1 == btnm->coords.y1 + padding_top) {
  41f1ec:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
  41f1f0:	9b05      	ldr	r3, [sp, #20]
  41f1f2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  41f1f6:	990a      	ldr	r1, [sp, #40]	; 0x28
  41f1f8:	440b      	add	r3, r1
  41f1fa:	429a      	cmp	r2, r3
  41f1fc:	d073      	beq.n	41f2e6 <lv_btnmatrix_design+0x44e>
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
  41f1fe:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  41f202:	9b05      	ldr	r3, [sp, #20]
  41f204:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
  41f208:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41f20a:	1a5b      	subs	r3, r3, r1
  41f20c:	429a      	cmp	r2, r3
  41f20e:	d06f      	beq.n	41f2f0 <lv_btnmatrix_design+0x458>
                if(txt_i == 0) { /*First button*/
  41f210:	2c00      	cmp	r4, #0
  41f212:	d174      	bne.n	41f2fe <lv_btnmatrix_design+0x466>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
  41f214:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f218:	f023 0304 	bic.w	r3, r3, #4
  41f21c:	f8a8 3012 	strh.w	r3, [r8, #18]
                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
  41f220:	683b      	ldr	r3, [r7, #0]
  41f222:	3501      	adds	r5, #1
  41f224:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
  41f228:	7803      	ldrb	r3, [r0, #0]
  41f22a:	b11b      	cbz	r3, 41f234 <lv_btnmatrix_design+0x39c>
  41f22c:	4946      	ldr	r1, [pc, #280]	; (41f348 <lv_btnmatrix_design+0x4b0>)
  41f22e:	4b47      	ldr	r3, [pc, #284]	; (41f34c <lv_btnmatrix_design+0x4b4>)
  41f230:	4798      	blx	r3
  41f232:	b928      	cbnz	r0, 41f240 <lv_btnmatrix_design+0x3a8>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_RIGHT;
  41f234:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f238:	f023 0308 	bic.w	r3, r3, #8
  41f23c:	f8a8 3012 	strh.w	r3, [r8, #18]
            lv_draw_rect(&area_tmp, clip_area, draw_rect_dsc_act);
  41f240:	4642      	mov	r2, r8
  41f242:	9904      	ldr	r1, [sp, #16]
  41f244:	a812      	add	r0, sp, #72	; 0x48
  41f246:	4b42      	ldr	r3, [pc, #264]	; (41f350 <lv_btnmatrix_design+0x4b8>)
  41f248:	4798      	blx	r3
            draw_rect_dsc_act->border_side = border_part_ori;
  41f24a:	f8a8 a012 	strh.w	sl, [r8, #18]
            lv_style_int_t letter_space = draw_label_dsc_act->letter_space;
  41f24e:	f9b9 3010 	ldrsh.w	r3, [r9, #16]
            lv_style_int_t line_space = draw_label_dsc_act->line_space;
  41f252:	f9b9 100e 	ldrsh.w	r1, [r9, #14]
            const char * txt = ext->map_p[txt_i];
  41f256:	683a      	ldr	r2, [r7, #0]
  41f258:	5995      	ldr	r5, [r2, r6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f25a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
  41f25e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
  41f262:	1a12      	subs	r2, r2, r0
  41f264:	b292      	uxth	r2, r2
  41f266:	3201      	adds	r2, #1
  41f268:	b212      	sxth	r2, r2
            _lv_txt_get_size(&txt_size, txt, font, letter_space,
  41f26a:	9808      	ldr	r0, [sp, #32]
  41f26c:	9002      	str	r0, [sp, #8]
  41f26e:	9201      	str	r2, [sp, #4]
  41f270:	9100      	str	r1, [sp, #0]
  41f272:	f8d9 2008 	ldr.w	r2, [r9, #8]
  41f276:	4629      	mov	r1, r5
  41f278:	a80f      	add	r0, sp, #60	; 0x3c
  41f27a:	4e36      	ldr	r6, [pc, #216]	; (41f354 <lv_btnmatrix_design+0x4bc>)
  41f27c:	47b0      	blx	r6
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
  41f27e:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
  41f282:	9b07      	ldr	r3, [sp, #28]
  41f284:	1a1b      	subs	r3, r3, r0
  41f286:	d44c      	bmi.n	41f322 <lv_btnmatrix_design+0x48a>
  41f288:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  41f28c:	eb02 0263 	add.w	r2, r2, r3, asr #1
  41f290:	b292      	uxth	r2, r2
  41f292:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
  41f296:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
  41f29a:	9b06      	ldr	r3, [sp, #24]
  41f29c:	1a5e      	subs	r6, r3, r1
  41f29e:	d442      	bmi.n	41f326 <lv_btnmatrix_design+0x48e>
  41f2a0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
  41f2a4:	eb03 0366 	add.w	r3, r3, r6, asr #1
  41f2a8:	b29b      	uxth	r3, r3
  41f2aa:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
  41f2ae:	fa12 f280 	uxtah	r2, r2, r0
  41f2b2:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
  41f2b6:	fa13 f381 	uxtah	r3, r3, r1
  41f2ba:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
  41f2be:	2300      	movs	r3, #0
  41f2c0:	9300      	str	r3, [sp, #0]
  41f2c2:	462b      	mov	r3, r5
  41f2c4:	464a      	mov	r2, r9
  41f2c6:	9904      	ldr	r1, [sp, #16]
  41f2c8:	a812      	add	r0, sp, #72	; 0x48
  41f2ca:	4d23      	ldr	r5, [pc, #140]	; (41f358 <lv_btnmatrix_design+0x4c0>)
  41f2cc:	47a8      	blx	r5
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
  41f2ce:	f10b 0b01 	add.w	fp, fp, #1
  41f2d2:	fa1f fb8b 	uxth.w	fp, fp
  41f2d6:	3401      	adds	r4, #1
  41f2d8:	b2a4      	uxth	r4, r4
  41f2da:	8abb      	ldrh	r3, [r7, #20]
  41f2dc:	459b      	cmp	fp, r3
  41f2de:	f4ff ae56 	bcc.w	41ef8e <lv_btnmatrix_design+0xf6>
    return LV_DESIGN_RES_OK;
  41f2e2:	2000      	movs	r0, #0
  41f2e4:	e5e5      	b.n	41eeb2 <lv_btnmatrix_design+0x1a>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_TOP;
  41f2e6:	f02a 0302 	bic.w	r3, sl, #2
  41f2ea:	f8a8 3012 	strh.w	r3, [r8, #18]
  41f2ee:	e786      	b.n	41f1fe <lv_btnmatrix_design+0x366>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_BOTTOM;
  41f2f0:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f2f4:	f023 0301 	bic.w	r3, r3, #1
  41f2f8:	f8a8 3012 	strh.w	r3, [r8, #18]
  41f2fc:	e788      	b.n	41f210 <lv_btnmatrix_design+0x378>
                else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
  41f2fe:	683a      	ldr	r2, [r7, #0]
  41f300:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  41f304:	442b      	add	r3, r5
  41f306:	4910      	ldr	r1, [pc, #64]	; (41f348 <lv_btnmatrix_design+0x4b0>)
  41f308:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  41f30c:	4b0f      	ldr	r3, [pc, #60]	; (41f34c <lv_btnmatrix_design+0x4b4>)
  41f30e:	4798      	blx	r3
  41f310:	2800      	cmp	r0, #0
  41f312:	d185      	bne.n	41f220 <lv_btnmatrix_design+0x388>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
  41f314:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f318:	f023 0304 	bic.w	r3, r3, #4
  41f31c:	f8a8 3012 	strh.w	r3, [r8, #18]
  41f320:	e77e      	b.n	41f220 <lv_btnmatrix_design+0x388>
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
  41f322:	3301      	adds	r3, #1
  41f324:	e7b0      	b.n	41f288 <lv_btnmatrix_design+0x3f0>
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
  41f326:	3601      	adds	r6, #1
  41f328:	e7ba      	b.n	41f2a0 <lv_btnmatrix_design+0x408>
        ancestor_design_f(btnm, clip_area, mode);
  41f32a:	4b0c      	ldr	r3, [pc, #48]	; (41f35c <lv_btnmatrix_design+0x4c4>)
  41f32c:	681b      	ldr	r3, [r3, #0]
  41f32e:	9904      	ldr	r1, [sp, #16]
  41f330:	9805      	ldr	r0, [sp, #20]
  41f332:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41f334:	2000      	movs	r0, #0
  41f336:	e5bc      	b.n	41eeb2 <lv_btnmatrix_design+0x1a>
  41f338:	0041245d 	.word	0x0041245d
  41f33c:	0040ded5 	.word	0x0040ded5
  41f340:	0040833d 	.word	0x0040833d
  41f344:	0040896d 	.word	0x0040896d
  41f348:	0042f884 	.word	0x0042f884
  41f34c:	00427c49 	.word	0x00427c49
  41f350:	004124a9 	.word	0x004124a9
  41f354:	00417e85 	.word	0x00417e85
  41f358:	0040df1d 	.word	0x0040df1d
  41f35c:	20414858 	.word	0x20414858
  41f360:	00405d01 	.word	0x00405d01

0041f364 <create_axis_label_iter>:
 * @param list pointer to newline-separated labels list
 * @param iterator_dir LV_CHART_ITERATOR_FORWARD or LV_CHART_LABEL_ITERATOR_REVERSE
 * @return lv_chart_label_iterator_t
 */
static lv_chart_label_iterator_t create_axis_label_iter(const char * list, uint8_t iterator_dir)
{
  41f364:	b430      	push	{r4, r5}
    lv_chart_label_iterator_t iterator = {0};
  41f366:	2300      	movs	r3, #0
  41f368:	6043      	str	r3, [r0, #4]
  41f36a:	6083      	str	r3, [r0, #8]
    uint8_t j;

    iterator.list_start = list;
  41f36c:	6001      	str	r1, [r0, #0]

    /* count number of list items */
    for(j = 0; list[j] != '\0'; j++) {
  41f36e:	e001      	b.n	41f374 <create_axis_label_iter+0x10>
  41f370:	3301      	adds	r3, #1
  41f372:	b2db      	uxtb	r3, r3
  41f374:	461d      	mov	r5, r3
  41f376:	5ccc      	ldrb	r4, [r1, r3]
  41f378:	b12c      	cbz	r4, 41f386 <create_axis_label_iter+0x22>
        if(list[j] == '\n')
  41f37a:	2c0a      	cmp	r4, #10
  41f37c:	d1f8      	bne.n	41f370 <create_axis_label_iter+0xc>
            iterator.items_left++;
  41f37e:	7a04      	ldrb	r4, [r0, #8]
  41f380:	3401      	adds	r4, #1
  41f382:	7204      	strb	r4, [r0, #8]
  41f384:	e7f4      	b.n	41f370 <create_axis_label_iter+0xc>
    }

    if(iterator_dir == LV_CHART_LABEL_ITERATOR_FORWARD) {
  41f386:	2a01      	cmp	r2, #1
  41f388:	d009      	beq.n	41f39e <create_axis_label_iter+0x3a>
        iterator.is_reverse_iter = 0;
        iterator.current_pos = list;
    }
    else {
        iterator.is_reverse_iter = 1;
  41f38a:	2301      	movs	r3, #1
  41f38c:	7243      	strb	r3, [r0, #9]
        // -1 to skip '\0' at the end of the string
        iterator.current_pos = list + j - 1;
  41f38e:	3d01      	subs	r5, #1
  41f390:	4429      	add	r1, r5
  41f392:	6041      	str	r1, [r0, #4]
    }
    iterator.items_left++;
  41f394:	7a03      	ldrb	r3, [r0, #8]
  41f396:	3301      	adds	r3, #1
  41f398:	7203      	strb	r3, [r0, #8]
    return iterator;
}
  41f39a:	bc30      	pop	{r4, r5}
  41f39c:	4770      	bx	lr
        iterator.current_pos = list;
  41f39e:	6041      	str	r1, [r0, #4]
  41f3a0:	e7f8      	b.n	41f394 <create_axis_label_iter+0x30>
	...

0041f3a4 <lv_chart_get_style>:
{
  41f3a4:	b538      	push	{r3, r4, r5, lr}
  41f3a6:	4604      	mov	r4, r0
  41f3a8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  41f3aa:	4b0e      	ldr	r3, [pc, #56]	; (41f3e4 <lv_chart_get_style+0x40>)
  41f3ac:	4798      	blx	r3
  41f3ae:	b928      	cbnz	r0, 41f3bc <lv_chart_get_style+0x18>
  41f3b0:	4622      	mov	r2, r4
  41f3b2:	2300      	movs	r3, #0
  41f3b4:	480c      	ldr	r0, [pc, #48]	; (41f3e8 <lv_chart_get_style+0x44>)
  41f3b6:	490d      	ldr	r1, [pc, #52]	; (41f3ec <lv_chart_get_style+0x48>)
  41f3b8:	4788      	blx	r1
  41f3ba:	e7fe      	b.n	41f3ba <lv_chart_get_style+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41f3bc:	4620      	mov	r0, r4
  41f3be:	4b0c      	ldr	r3, [pc, #48]	; (41f3f0 <lv_chart_get_style+0x4c>)
  41f3c0:	4798      	blx	r3
    switch(part) {
  41f3c2:	2d03      	cmp	r5, #3
  41f3c4:	d80c      	bhi.n	41f3e0 <lv_chart_get_style+0x3c>
  41f3c6:	e8df f005 	tbb	[pc, r5]
  41f3ca:	0502      	.short	0x0502
  41f3cc:	0907      	.short	0x0907
            style_dsc_p = &chart->style_list;
  41f3ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
            break;
  41f3d2:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_series_bg;
  41f3d4:	3024      	adds	r0, #36	; 0x24
            break;
  41f3d6:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_series;
  41f3d8:	302c      	adds	r0, #44	; 0x2c
            break;
  41f3da:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_cursors;
  41f3dc:	3034      	adds	r0, #52	; 0x34
            break;
  41f3de:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = NULL;
  41f3e0:	2000      	movs	r0, #0
}
  41f3e2:	bd38      	pop	{r3, r4, r5, pc}
  41f3e4:	00415e79 	.word	0x00415e79
  41f3e8:	0042c168 	.word	0x0042c168
  41f3ec:	00415e85 	.word	0x00415e85
  41f3f0:	00408095 	.word	0x00408095

0041f3f4 <draw_series_bg>:
{
  41f3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f3f8:	b09f      	sub	sp, #124	; 0x7c
  41f3fa:	4604      	mov	r4, r0
  41f3fc:	460e      	mov	r6, r1
  41f3fe:	4615      	mov	r5, r2
  41f400:	9200      	str	r2, [sp, #0]
    lv_draw_rect_dsc_init(&bg_dsc);
  41f402:	a809      	add	r0, sp, #36	; 0x24
  41f404:	4b4d      	ldr	r3, [pc, #308]	; (41f53c <draw_series_bg+0x148>)
  41f406:	4798      	blx	r3
    lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES_BG, &bg_dsc);
  41f408:	aa09      	add	r2, sp, #36	; 0x24
  41f40a:	2101      	movs	r1, #1
  41f40c:	4620      	mov	r0, r4
  41f40e:	4b4c      	ldr	r3, [pc, #304]	; (41f540 <draw_series_bg+0x14c>)
  41f410:	4798      	blx	r3
    lv_draw_rect(series_area, clip_area, &bg_dsc);
  41f412:	aa09      	add	r2, sp, #36	; 0x24
  41f414:	4629      	mov	r1, r5
  41f416:	4630      	mov	r0, r6
  41f418:	4b4a      	ldr	r3, [pc, #296]	; (41f544 <draw_series_bg+0x150>)
  41f41a:	4798      	blx	r3
    lv_chart_ext_t * ext     = lv_obj_get_ext_attr(chart);
  41f41c:	4620      	mov	r0, r4
  41f41e:	4b4a      	ldr	r3, [pc, #296]	; (41f548 <draw_series_bg+0x154>)
  41f420:	4798      	blx	r3
  41f422:	4605      	mov	r5, r0
  41f424:	88b3      	ldrh	r3, [r6, #4]
  41f426:	f9b6 7000 	ldrsh.w	r7, [r6]
  41f42a:	fa1f f887 	uxth.w	r8, r7
  41f42e:	eba3 0308 	sub.w	r3, r3, r8
  41f432:	b29b      	uxth	r3, r3
  41f434:	3301      	adds	r3, #1
  41f436:	b29b      	uxth	r3, r3
  41f438:	9303      	str	r3, [sp, #12]
  41f43a:	fa0f fa83 	sxth.w	sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f43e:	88f3      	ldrh	r3, [r6, #6]
  41f440:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
  41f444:	9201      	str	r2, [sp, #4]
  41f446:	b296      	uxth	r6, r2
  41f448:	1b9b      	subs	r3, r3, r6
  41f44a:	b29b      	uxth	r3, r3
  41f44c:	3301      	adds	r3, #1
  41f44e:	b29b      	uxth	r3, r3
  41f450:	9302      	str	r3, [sp, #8]
  41f452:	fa0f fb83 	sxth.w	fp, r3
    lv_draw_line_dsc_init(&line_dsc);
  41f456:	a804      	add	r0, sp, #16
  41f458:	4b3c      	ldr	r3, [pc, #240]	; (41f54c <draw_series_bg+0x158>)
  41f45a:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_SERIES_BG, &line_dsc);
  41f45c:	aa04      	add	r2, sp, #16
  41f45e:	2101      	movs	r1, #1
  41f460:	4620      	mov	r0, r4
  41f462:	4b3b      	ldr	r3, [pc, #236]	; (41f550 <draw_series_bg+0x15c>)
  41f464:	4798      	blx	r3
    if(ext->hdiv_cnt != 0) {
  41f466:	f895 9020 	ldrb.w	r9, [r5, #32]
  41f46a:	f1b9 0f00 	cmp.w	r9, #0
  41f46e:	d02d      	beq.n	41f4cc <draw_series_bg+0xd8>
        if(bg_dsc.border_width != 0) {
  41f470:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
  41f474:	b963      	cbnz	r3, 41f490 <draw_series_bg+0x9c>
            div_i_end   = ext->hdiv_cnt + 1;
  41f476:	f109 0901 	add.w	r9, r9, #1
  41f47a:	fa5f f989 	uxtb.w	r9, r9
            div_i_start = 0;
  41f47e:	2400      	movs	r4, #0
        p1.x = 0 + x_ofs;
  41f480:	f8ad 7020 	strh.w	r7, [sp, #32]
        p2.x = w - 1 + x_ofs;
  41f484:	9b03      	ldr	r3, [sp, #12]
  41f486:	4443      	add	r3, r8
  41f488:	3b01      	subs	r3, #1
  41f48a:	f8ad 301c 	strh.w	r3, [sp, #28]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41f48e:	e01b      	b.n	41f4c8 <draw_series_bg+0xd4>
            div_i_start = 1;
  41f490:	2401      	movs	r4, #1
  41f492:	e7f5      	b.n	41f480 <draw_series_bg+0x8c>
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * div_i) / (ext->hdiv_cnt + 1);
  41f494:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41f498:	ebab 0303 	sub.w	r3, fp, r3
  41f49c:	fb03 f304 	mul.w	r3, r3, r4
  41f4a0:	f895 2020 	ldrb.w	r2, [r5, #32]
  41f4a4:	3201      	adds	r2, #1
  41f4a6:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
  41f4aa:	fa06 f383 	sxtah	r3, r6, r3
  41f4ae:	b21b      	sxth	r3, r3
  41f4b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            p2.y = p1.y;
  41f4b4:	f8ad 301e 	strh.w	r3, [sp, #30]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
  41f4b8:	ab04      	add	r3, sp, #16
  41f4ba:	9a00      	ldr	r2, [sp, #0]
  41f4bc:	a907      	add	r1, sp, #28
  41f4be:	a808      	add	r0, sp, #32
  41f4c0:	4f24      	ldr	r7, [pc, #144]	; (41f554 <draw_series_bg+0x160>)
  41f4c2:	47b8      	blx	r7
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41f4c4:	3401      	adds	r4, #1
  41f4c6:	b2e4      	uxtb	r4, r4
  41f4c8:	454c      	cmp	r4, r9
  41f4ca:	d9e3      	bls.n	41f494 <draw_series_bg+0xa0>
    if(ext->vdiv_cnt != 0) {
  41f4cc:	f895 7021 	ldrb.w	r7, [r5, #33]	; 0x21
  41f4d0:	b387      	cbz	r7, 41f534 <draw_series_bg+0x140>
        if(bg_dsc.border_width != 0) {
  41f4d2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
  41f4d6:	b97b      	cbnz	r3, 41f4f8 <draw_series_bg+0x104>
            div_i_end   = ext->vdiv_cnt + 1;
  41f4d8:	3701      	adds	r7, #1
  41f4da:	b2ff      	uxtb	r7, r7
            div_i_start = 0;
  41f4dc:	2400      	movs	r4, #0
        p1.y = 0 + y_ofs;
  41f4de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  41f4e2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        p2.y = h + y_ofs - 1;
  41f4e6:	9b02      	ldr	r3, [sp, #8]
  41f4e8:	441e      	add	r6, r3
  41f4ea:	b2b6      	uxth	r6, r6
  41f4ec:	3e01      	subs	r6, #1
  41f4ee:	f8ad 601e 	strh.w	r6, [sp, #30]
  41f4f2:	f8dd 9000 	ldr.w	r9, [sp]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41f4f6:	e01b      	b.n	41f530 <draw_series_bg+0x13c>
            div_i_start = 1;
  41f4f8:	2401      	movs	r4, #1
  41f4fa:	e7f0      	b.n	41f4de <draw_series_bg+0xea>
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * div_i) / (ext->vdiv_cnt + 1);
  41f4fc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41f500:	ebaa 0303 	sub.w	r3, sl, r3
  41f504:	fb03 f304 	mul.w	r3, r3, r4
  41f508:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
  41f50c:	3201      	adds	r2, #1
  41f50e:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
  41f512:	fa08 f383 	sxtah	r3, r8, r3
  41f516:	b21b      	sxth	r3, r3
  41f518:	f8ad 3020 	strh.w	r3, [sp, #32]
            p2.x = p1.x;
  41f51c:	f8ad 301c 	strh.w	r3, [sp, #28]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
  41f520:	ab04      	add	r3, sp, #16
  41f522:	464a      	mov	r2, r9
  41f524:	a907      	add	r1, sp, #28
  41f526:	a808      	add	r0, sp, #32
  41f528:	4e0a      	ldr	r6, [pc, #40]	; (41f554 <draw_series_bg+0x160>)
  41f52a:	47b0      	blx	r6
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41f52c:	3401      	adds	r4, #1
  41f52e:	b2e4      	uxtb	r4, r4
  41f530:	42bc      	cmp	r4, r7
  41f532:	d9e3      	bls.n	41f4fc <draw_series_bg+0x108>
}
  41f534:	b01f      	add	sp, #124	; 0x7c
  41f536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f53a:	bf00      	nop
  41f53c:	0041245d 	.word	0x0041245d
  41f540:	0040833d 	.word	0x0040833d
  41f544:	004124a9 	.word	0x004124a9
  41f548:	00408095 	.word	0x00408095
  41f54c:	0040ed25 	.word	0x0040ed25
  41f550:	00408ae5 	.word	0x00408ae5
  41f554:	0040ed41 	.word	0x0040ed41

0041f558 <get_next_axis_label>:
 * Get next label from iterator created by lv_chart_create_label_iter()
 * @param iterator iterator to get label from
 * @param[out] buf buffer to point next label to
 */
static void get_next_axis_label(lv_chart_label_iterator_t * iterator, char * buf)
{
  41f558:	b538      	push	{r3, r4, r5, lr}
  41f55a:	460d      	mov	r5, r1
    uint32_t label_len = 0;
    if(iterator->is_reverse_iter) {
  41f55c:	7a43      	ldrb	r3, [r0, #9]
  41f55e:	b9d3      	cbnz	r3, 41f596 <get_next_axis_label+0x3e>
  41f560:	2400      	movs	r4, #0
  41f562:	e01f      	b.n	41f5a4 <get_next_axis_label+0x4c>
        const char * label_start;
        /* count the length of the current label*/
        while((*iterator->current_pos != '\n') &&
              (iterator->current_pos != iterator->list_start)) {
            iterator->current_pos--;
  41f564:	3901      	subs	r1, #1
  41f566:	6041      	str	r1, [r0, #4]
            label_len++;
  41f568:	3401      	adds	r4, #1
        while((*iterator->current_pos != '\n') &&
  41f56a:	6841      	ldr	r1, [r0, #4]
  41f56c:	780b      	ldrb	r3, [r1, #0]
  41f56e:	2b0a      	cmp	r3, #10
  41f570:	d002      	beq.n	41f578 <get_next_axis_label+0x20>
              (iterator->current_pos != iterator->list_start)) {
  41f572:	6802      	ldr	r2, [r0, #0]
        while((*iterator->current_pos != '\n') &&
  41f574:	4291      	cmp	r1, r2
  41f576:	d1f5      	bne.n	41f564 <get_next_axis_label+0xc>
        }

        label_start = iterator->current_pos;

        if(*iterator->current_pos == '\n') {
  41f578:	2b0a      	cmp	r3, #10
  41f57a:	d00e      	beq.n	41f59a <get_next_axis_label+0x42>
            /* skip newline*/
            iterator->current_pos--;
        }
        else {
            /* it is last label in list (first one from the beginning )*/
            label_len++;
  41f57c:	3401      	adds	r4, #1
        }

        /* do not allow output buffer overflow */
        if(label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
  41f57e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  41f582:	d901      	bls.n	41f588 <get_next_axis_label+0x30>
            label_len = LV_CHART_AXIS_TICK_LABEL_MAX_LEN;
  41f584:	f44f 7480 	mov.w	r4, #256	; 0x100
        }

        strncpy(buf, label_start, label_len);
  41f588:	4622      	mov	r2, r4
  41f58a:	4628      	mov	r0, r5
  41f58c:	4b11      	ldr	r3, [pc, #68]	; (41f5d4 <get_next_axis_label+0x7c>)
  41f58e:	4798      	blx	r3

        if(*iterator->current_pos == '\n') iterator->current_pos++;
    }

    /* terminate the string */
    buf[label_len] = '\0';
  41f590:	2300      	movs	r3, #0
  41f592:	552b      	strb	r3, [r5, r4]
  41f594:	bd38      	pop	{r3, r4, r5, pc}
  41f596:	2400      	movs	r4, #0
  41f598:	e7e7      	b.n	41f56a <get_next_axis_label+0x12>
            iterator->current_pos--;
  41f59a:	1e4b      	subs	r3, r1, #1
  41f59c:	6043      	str	r3, [r0, #4]
            label_start++;
  41f59e:	3101      	adds	r1, #1
  41f5a0:	e7ed      	b.n	41f57e <get_next_axis_label+0x26>
                label_len++;
  41f5a2:	3401      	adds	r4, #1
        while(iterator->current_pos[label_len] != '\n' &&
  41f5a4:	6843      	ldr	r3, [r0, #4]
  41f5a6:	191a      	adds	r2, r3, r4
  41f5a8:	5d1b      	ldrb	r3, [r3, r4]
  41f5aa:	2b0a      	cmp	r3, #10
  41f5ac:	bf18      	it	ne
  41f5ae:	2b00      	cmpne	r3, #0
  41f5b0:	d004      	beq.n	41f5bc <get_next_axis_label+0x64>
            if(label_len < LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
  41f5b2:	2cff      	cmp	r4, #255	; 0xff
  41f5b4:	d8f5      	bhi.n	41f5a2 <get_next_axis_label+0x4a>
                buf[label_len] = iterator->current_pos[label_len];
  41f5b6:	552b      	strb	r3, [r5, r4]
                label_len++;
  41f5b8:	3401      	adds	r4, #1
  41f5ba:	e7f3      	b.n	41f5a4 <get_next_axis_label+0x4c>
        iterator->current_pos += label_len;
  41f5bc:	6042      	str	r2, [r0, #4]
        if(label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
  41f5be:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  41f5c2:	d901      	bls.n	41f5c8 <get_next_axis_label+0x70>
            label_len = LV_CHART_AXIS_TICK_LABEL_MAX_LEN;
  41f5c4:	f44f 7480 	mov.w	r4, #256	; 0x100
        if(*iterator->current_pos == '\n') iterator->current_pos++;
  41f5c8:	7813      	ldrb	r3, [r2, #0]
  41f5ca:	2b0a      	cmp	r3, #10
  41f5cc:	d1e0      	bne.n	41f590 <get_next_axis_label+0x38>
  41f5ce:	3201      	adds	r2, #1
  41f5d0:	6042      	str	r2, [r0, #4]
  41f5d2:	e7dd      	b.n	41f590 <get_next_axis_label+0x38>
  41f5d4:	004280dd 	.word	0x004280dd

0041f5d8 <draw_y_ticks>:
{
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
}

static void draw_y_ticks(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask, uint8_t which_axis)
{
  41f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f5dc:	b0e5      	sub	sp, #404	; 0x194
  41f5de:	4604      	mov	r4, r0
  41f5e0:	460d      	mov	r5, r1
  41f5e2:	4616      	mov	r6, r2
  41f5e4:	469b      	mov	fp, r3
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41f5e6:	4b97      	ldr	r3, [pc, #604]	; (41f844 <draw_y_ticks+0x26c>)
  41f5e8:	4798      	blx	r3
    lv_chart_axis_cfg_t * y_axis = (which_axis == LV_CHART_AXIS_PRIMARY_Y) ?
                                   &ext->y_axis : &ext->secondary_y_axis;
  41f5ea:	f1bb 0f00 	cmp.w	fp, #0
  41f5ee:	d167      	bne.n	41f6c0 <draw_y_ticks+0xe8>
  41f5f0:	f100 0740 	add.w	r7, r0, #64	; 0x40

    if(y_axis->list_of_values == NULL && y_axis->num_tick_marks == 0)  return;
  41f5f4:	6839      	ldr	r1, [r7, #0]
  41f5f6:	2900      	cmp	r1, #0
  41f5f8:	d065      	beq.n	41f6c6 <draw_y_ticks+0xee>
  41f5fa:	f8b5 8006 	ldrh.w	r8, [r5, #6]
  41f5fe:	f8b5 a002 	ldrh.w	sl, [r5, #2]
  41f602:	eba8 080a 	sub.w	r8, r8, sl
  41f606:	fa1f f888 	uxth.w	r8, r8
  41f60a:	f108 0801 	add.w	r8, r8, #1
  41f60e:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f612:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  41f616:	9306      	str	r3, [sp, #24]
  41f618:	b29b      	uxth	r3, r3
  41f61a:	f9b5 2000 	ldrsh.w	r2, [r5]
  41f61e:	b290      	uxth	r0, r2
  41f620:	1a1b      	subs	r3, r3, r0
  41f622:	b29b      	uxth	r3, r3
  41f624:	3301      	adds	r3, #1
  41f626:	b21b      	sxth	r3, r3
    lv_coord_t h     = lv_area_get_height(series_area);
    lv_coord_t w     = lv_area_get_width(series_area);
    char buf[LV_CHART_AXIS_TICK_LABEL_MAX_LEN + 1]; /* up to N symbols per label + null terminator */

    /* chose correct side of the chart */
    if(which_axis == LV_CHART_AXIS_PRIMARY_Y)
  41f628:	f1bb 0f00 	cmp.w	fp, #0
  41f62c:	d100      	bne.n	41f630 <draw_y_ticks+0x58>
        x_ofs = series_area->x1;
  41f62e:	9206      	str	r2, [sp, #24]
    else
        x_ofs = series_area->x2;

    /* calculate the size of tick marks */
    if(y_axis->major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f630:	79ba      	ldrb	r2, [r7, #6]
  41f632:	2aff      	cmp	r2, #255	; 0xff
  41f634:	d04d      	beq.n	41f6d2 <draw_y_ticks+0xfa>
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
    else
        major_tick_len = y_axis->major_tick_len;
  41f636:	b253      	sxtb	r3, r2
  41f638:	9308      	str	r3, [sp, #32]

    if(y_axis->minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f63a:	79fb      	ldrb	r3, [r7, #7]
  41f63c:	2bff      	cmp	r3, #255	; 0xff
  41f63e:	d052      	beq.n	41f6e6 <draw_y_ticks+0x10e>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    else
        minor_tick_len = y_axis->minor_tick_len;
  41f640:	b25b      	sxtb	r3, r3
  41f642:	9307      	str	r3, [sp, #28]

    /* tick lines on secondary y axis are drawn in other direction*/
    if(which_axis == LV_CHART_AXIS_SECONDARY_Y) {
  41f644:	f1bb 0f01 	cmp.w	fp, #1
  41f648:	d057      	beq.n	41f6fa <draw_y_ticks+0x122>
        major_tick_len *= -1;
        minor_tick_len *= -1;
    }

    iter_dir = (y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) ? LV_CHART_LABEL_ITERATOR_REVERSE :
  41f64a:	793a      	ldrb	r2, [r7, #4]
  41f64c:	0852      	lsrs	r2, r2, #1
  41f64e:	f082 0201 	eor.w	r2, r2, #1
               LV_CHART_LABEL_ITERATOR_FORWARD;
    iter = create_axis_label_iter(y_axis->list_of_values, iter_dir);
  41f652:	ad0a      	add	r5, sp, #40	; 0x28
  41f654:	f002 0201 	and.w	r2, r2, #1
  41f658:	4628      	mov	r0, r5
  41f65a:	4b7b      	ldr	r3, [pc, #492]	; (41f848 <draw_y_ticks+0x270>)
  41f65c:	4798      	blx	r3
  41f65e:	ab5f      	add	r3, sp, #380	; 0x17c
  41f660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  41f664:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*determine the number of options */
    num_of_labels = iter.items_left;
  41f668:	f89d 9184 	ldrb.w	r9, [sp, #388]	; 0x184

    /* we can't have string labels without ticks step, set to 1 if not specified */
    if(y_axis->num_tick_marks == 0) y_axis->num_tick_marks = 1;
  41f66c:	797b      	ldrb	r3, [r7, #5]
  41f66e:	b90b      	cbnz	r3, 41f674 <draw_y_ticks+0x9c>
  41f670:	2301      	movs	r3, #1
  41f672:	717b      	strb	r3, [r7, #5]

    /* calculate total number of ticks */
    if(num_of_labels < 2)
  41f674:	f1b9 0f01 	cmp.w	r9, #1
  41f678:	d948      	bls.n	41f70c <draw_y_ticks+0x134>
        num_scale_ticks = y_axis->num_tick_marks;
    else
        num_scale_ticks = (y_axis->num_tick_marks * (num_of_labels - 1));
  41f67a:	797b      	ldrb	r3, [r7, #5]
  41f67c:	f109 35ff 	add.w	r5, r9, #4294967295
  41f680:	fb15 f503 	smulbb	r5, r5, r3
  41f684:	b2ed      	uxtb	r5, r5

    lv_style_int_t label_dist  = which_axis == LV_CHART_AXIS_PRIMARY_Y ?
  41f686:	f1bb 0f00 	cmp.w	fp, #0
  41f68a:	d141      	bne.n	41f710 <draw_y_ticks+0x138>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f68c:	2212      	movs	r2, #18
  41f68e:	2101      	movs	r1, #1
  41f690:	4620      	mov	r0, r4
  41f692:	4b6e      	ldr	r3, [pc, #440]	; (41f84c <draw_y_ticks+0x274>)
  41f694:	4798      	blx	r3
  41f696:	9009      	str	r0, [sp, #36]	; 0x24
                                 lv_obj_get_style_pad_left(chart, LV_CHART_PART_SERIES_BG)  : lv_obj_get_style_pad_right(chart, LV_CHART_PART_SERIES_BG);

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
  41f698:	a81b      	add	r0, sp, #108	; 0x6c
  41f69a:	4b6d      	ldr	r3, [pc, #436]	; (41f850 <draw_y_ticks+0x278>)
  41f69c:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_BG, &line_dsc);
  41f69e:	aa1b      	add	r2, sp, #108	; 0x6c
  41f6a0:	2100      	movs	r1, #0
  41f6a2:	4620      	mov	r0, r4
  41f6a4:	4b6b      	ldr	r3, [pc, #428]	; (41f854 <draw_y_ticks+0x27c>)
  41f6a6:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  41f6a8:	a812      	add	r0, sp, #72	; 0x48
  41f6aa:	4b6b      	ldr	r3, [pc, #428]	; (41f858 <draw_y_ticks+0x280>)
  41f6ac:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(chart, LV_CHART_PART_BG, &label_dsc);
  41f6ae:	aa12      	add	r2, sp, #72	; 0x48
  41f6b0:	2100      	movs	r1, #0
  41f6b2:	4620      	mov	r0, r4
  41f6b4:	4b69      	ldr	r3, [pc, #420]	; (41f85c <draw_y_ticks+0x284>)
  41f6b6:	4798      	blx	r3

    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41f6b8:	2400      	movs	r4, #0
  41f6ba:	f8cd b014 	str.w	fp, [sp, #20]
  41f6be:	e032      	b.n	41f726 <draw_y_ticks+0x14e>
                                   &ext->y_axis : &ext->secondary_y_axis;
  41f6c0:	f100 0750 	add.w	r7, r0, #80	; 0x50
  41f6c4:	e796      	b.n	41f5f4 <draw_y_ticks+0x1c>
    if(y_axis->list_of_values == NULL && y_axis->num_tick_marks == 0)  return;
  41f6c6:	797b      	ldrb	r3, [r7, #5]
  41f6c8:	2b00      	cmp	r3, #0
  41f6ca:	d196      	bne.n	41f5fa <draw_y_ticks+0x22>

                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
            }
        }
    }
}
  41f6cc:	b065      	add	sp, #404	; 0x194
  41f6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
  41f6d2:	4a63      	ldr	r2, [pc, #396]	; (41f860 <draw_y_ticks+0x288>)
  41f6d4:	fb82 0203 	smull	r0, r2, r2, r3
  41f6d8:	441a      	add	r2, r3
  41f6da:	17db      	asrs	r3, r3, #31
  41f6dc:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
  41f6e0:	b25b      	sxtb	r3, r3
  41f6e2:	9308      	str	r3, [sp, #32]
  41f6e4:	e7a9      	b.n	41f63a <draw_y_ticks+0x62>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
  41f6e6:	9b08      	ldr	r3, [sp, #32]
  41f6e8:	005a      	lsls	r2, r3, #1
  41f6ea:	4b5e      	ldr	r3, [pc, #376]	; (41f864 <draw_y_ticks+0x28c>)
  41f6ec:	fb83 0302 	smull	r0, r3, r3, r2
  41f6f0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  41f6f4:	b25b      	sxtb	r3, r3
  41f6f6:	9307      	str	r3, [sp, #28]
  41f6f8:	e7a4      	b.n	41f644 <draw_y_ticks+0x6c>
        major_tick_len *= -1;
  41f6fa:	9b08      	ldr	r3, [sp, #32]
  41f6fc:	425b      	negs	r3, r3
  41f6fe:	b25b      	sxtb	r3, r3
  41f700:	9308      	str	r3, [sp, #32]
        minor_tick_len *= -1;
  41f702:	9b07      	ldr	r3, [sp, #28]
  41f704:	425b      	negs	r3, r3
  41f706:	b25b      	sxtb	r3, r3
  41f708:	9307      	str	r3, [sp, #28]
  41f70a:	e79e      	b.n	41f64a <draw_y_ticks+0x72>
        num_scale_ticks = y_axis->num_tick_marks;
  41f70c:	797d      	ldrb	r5, [r7, #5]
  41f70e:	e7ba      	b.n	41f686 <draw_y_ticks+0xae>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41f710:	2213      	movs	r2, #19
  41f712:	2101      	movs	r1, #1
  41f714:	4620      	mov	r0, r4
  41f716:	4b4d      	ldr	r3, [pc, #308]	; (41f84c <draw_y_ticks+0x274>)
  41f718:	4798      	blx	r3
  41f71a:	9009      	str	r0, [sp, #36]	; 0x24
  41f71c:	e7bc      	b.n	41f698 <draw_y_ticks+0xc0>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f71e:	2301      	movs	r3, #1
            if(is_tick_with_label(i, y_axis)) {
  41f720:	bb6b      	cbnz	r3, 41f77e <draw_y_ticks+0x1a6>
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41f722:	3401      	adds	r4, #1
  41f724:	b2e4      	uxtb	r4, r4
  41f726:	1c6b      	adds	r3, r5, #1
  41f728:	429c      	cmp	r4, r3
  41f72a:	dacf      	bge.n	41f6cc <draw_y_ticks+0xf4>
                   y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / num_scale_ticks;
  41f72c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  41f730:	eba8 0303 	sub.w	r3, r8, r3
  41f734:	fb03 f304 	mul.w	r3, r3, r4
  41f738:	fb93 f3f5 	sdiv	r3, r3, r5
  41f73c:	4453      	add	r3, sl
  41f73e:	b21b      	sxth	r3, r3
        p2.y = p1.y =
  41f740:	f8ad 318e 	strh.w	r3, [sp, #398]	; 0x18e
  41f744:	f8ad 318a 	strh.w	r3, [sp, #394]	; 0x18a
        if(p2.y - label_dsc.font->line_height > mask->y2) return;
  41f748:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41f74a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  41f74e:	1a98      	subs	r0, r3, r2
  41f750:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
  41f754:	4288      	cmp	r0, r1
  41f756:	dcb9      	bgt.n	41f6cc <draw_y_ticks+0xf4>
        if(p2.y + label_dsc.font->line_height < mask->y1) {
  41f758:	4413      	add	r3, r2
  41f75a:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
  41f75e:	4293      	cmp	r3, r2
  41f760:	da12      	bge.n	41f788 <draw_y_ticks+0x1b0>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f762:	2c00      	cmp	r4, #0
  41f764:	d0db      	beq.n	41f71e <draw_y_ticks+0x146>
  41f766:	797a      	ldrb	r2, [r7, #5]
  41f768:	fbb4 f3f2 	udiv	r3, r4, r2
  41f76c:	fb02 4313 	mls	r3, r2, r3, r4
  41f770:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f774:	d101      	bne.n	41f77a <draw_y_ticks+0x1a2>
  41f776:	2301      	movs	r3, #1
  41f778:	e7d2      	b.n	41f720 <draw_y_ticks+0x148>
  41f77a:	2300      	movs	r3, #0
  41f77c:	e7d0      	b.n	41f720 <draw_y_ticks+0x148>
                get_next_axis_label(&iter, buf);
  41f77e:	a91e      	add	r1, sp, #120	; 0x78
  41f780:	a85f      	add	r0, sp, #380	; 0x17c
  41f782:	4b39      	ldr	r3, [pc, #228]	; (41f868 <draw_y_ticks+0x290>)
  41f784:	4798      	blx	r3
            continue;
  41f786:	e7cc      	b.n	41f722 <draw_y_ticks+0x14a>
        if(which_axis == LV_CHART_AXIS_PRIMARY_Y)
  41f788:	9b05      	ldr	r3, [sp, #20]
  41f78a:	b9b3      	cbnz	r3, 41f7ba <draw_y_ticks+0x1e2>
            p1.x--;
  41f78c:	9b06      	ldr	r3, [sp, #24]
  41f78e:	3b01      	subs	r3, #1
  41f790:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
        if((num_of_labels != 0) && (i == 0 || i % y_axis->num_tick_marks == 0))
  41f794:	f1b9 0f00 	cmp.w	r9, #0
  41f798:	d014      	beq.n	41f7c4 <draw_y_ticks+0x1ec>
  41f79a:	b13c      	cbz	r4, 41f7ac <draw_y_ticks+0x1d4>
  41f79c:	797a      	ldrb	r2, [r7, #5]
  41f79e:	fbb4 f3f2 	udiv	r3, r4, r2
  41f7a2:	fb02 4313 	mls	r3, r2, r3, r4
  41f7a6:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f7aa:	d10b      	bne.n	41f7c4 <draw_y_ticks+0x1ec>
            p2.x = p1.x - major_tick_len; /* major tick */
  41f7ac:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
  41f7b0:	9a08      	ldr	r2, [sp, #32]
  41f7b2:	1a9b      	subs	r3, r3, r2
  41f7b4:	f8ad 3188 	strh.w	r3, [sp, #392]	; 0x188
  41f7b8:	e00a      	b.n	41f7d0 <draw_y_ticks+0x1f8>
            p1.x++;
  41f7ba:	9b06      	ldr	r3, [sp, #24]
  41f7bc:	3301      	adds	r3, #1
  41f7be:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
  41f7c2:	e7e7      	b.n	41f794 <draw_y_ticks+0x1bc>
            p2.x = p1.x - minor_tick_len; /* minor tick */
  41f7c4:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
  41f7c8:	9a07      	ldr	r2, [sp, #28]
  41f7ca:	1a9b      	subs	r3, r3, r2
  41f7cc:	f8ad 3188 	strh.w	r3, [sp, #392]	; 0x188
        if(y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) {
  41f7d0:	793b      	ldrb	r3, [r7, #4]
  41f7d2:	f013 0f02 	tst.w	r3, #2
  41f7d6:	d013      	beq.n	41f800 <draw_y_ticks+0x228>
            if(i != 0)
  41f7d8:	b954      	cbnz	r4, 41f7f0 <draw_y_ticks+0x218>
            else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
  41f7da:	f013 0f01 	tst.w	r3, #1
  41f7de:	d018      	beq.n	41f812 <draw_y_ticks+0x23a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f7e0:	ab1b      	add	r3, sp, #108	; 0x6c
  41f7e2:	4632      	mov	r2, r6
  41f7e4:	a962      	add	r1, sp, #392	; 0x188
  41f7e6:	a863      	add	r0, sp, #396	; 0x18c
  41f7e8:	f8df b080 	ldr.w	fp, [pc, #128]	; 41f86c <draw_y_ticks+0x294>
  41f7ec:	47d8      	blx	fp
  41f7ee:	e010      	b.n	41f812 <draw_y_ticks+0x23a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f7f0:	ab1b      	add	r3, sp, #108	; 0x6c
  41f7f2:	4632      	mov	r2, r6
  41f7f4:	a962      	add	r1, sp, #392	; 0x188
  41f7f6:	a863      	add	r0, sp, #396	; 0x18c
  41f7f8:	f8df b070 	ldr.w	fp, [pc, #112]	; 41f86c <draw_y_ticks+0x294>
  41f7fc:	47d8      	blx	fp
  41f7fe:	e008      	b.n	41f812 <draw_y_ticks+0x23a>
            if(i != num_scale_ticks)
  41f800:	42ac      	cmp	r4, r5
  41f802:	d014      	beq.n	41f82e <draw_y_ticks+0x256>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f804:	ab1b      	add	r3, sp, #108	; 0x6c
  41f806:	4632      	mov	r2, r6
  41f808:	a962      	add	r1, sp, #392	; 0x188
  41f80a:	a863      	add	r0, sp, #396	; 0x18c
  41f80c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 41f86c <draw_y_ticks+0x294>
  41f810:	47d8      	blx	fp
        if(num_of_labels != 0) {
  41f812:	f1b9 0f00 	cmp.w	r9, #0
  41f816:	d084      	beq.n	41f722 <draw_y_ticks+0x14a>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f818:	b354      	cbz	r4, 41f870 <draw_y_ticks+0x298>
  41f81a:	797a      	ldrb	r2, [r7, #5]
  41f81c:	fbb4 f3f2 	udiv	r3, r4, r2
  41f820:	fb02 4313 	mls	r3, r2, r3, r4
  41f824:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f828:	d162      	bne.n	41f8f0 <draw_y_ticks+0x318>
  41f82a:	2301      	movs	r3, #1
  41f82c:	e021      	b.n	41f872 <draw_y_ticks+0x29a>
            else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
  41f82e:	f013 0f01 	tst.w	r3, #1
  41f832:	d0ee      	beq.n	41f812 <draw_y_ticks+0x23a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f834:	ab1b      	add	r3, sp, #108	; 0x6c
  41f836:	4632      	mov	r2, r6
  41f838:	a962      	add	r1, sp, #392	; 0x188
  41f83a:	a863      	add	r0, sp, #396	; 0x18c
  41f83c:	f8df b02c 	ldr.w	fp, [pc, #44]	; 41f86c <draw_y_ticks+0x294>
  41f840:	47d8      	blx	fp
  41f842:	e7e6      	b.n	41f812 <draw_y_ticks+0x23a>
  41f844:	00408095 	.word	0x00408095
  41f848:	0041f365 	.word	0x0041f365
  41f84c:	00407445 	.word	0x00407445
  41f850:	0040ed25 	.word	0x0040ed25
  41f854:	00408ae5 	.word	0x00408ae5
  41f858:	0040ded5 	.word	0x0040ded5
  41f85c:	0040896d 	.word	0x0040896d
  41f860:	88888889 	.word	0x88888889
  41f864:	55555556 	.word	0x55555556
  41f868:	0041f559 	.word	0x0041f559
  41f86c:	0040ed41 	.word	0x0040ed41
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f870:	2301      	movs	r3, #1
            if(is_tick_with_label(i, y_axis)) {
  41f872:	2b00      	cmp	r3, #0
  41f874:	f43f af55 	beq.w	41f722 <draw_y_ticks+0x14a>
                get_next_axis_label(&iter, buf);
  41f878:	a91e      	add	r1, sp, #120	; 0x78
  41f87a:	a85f      	add	r0, sp, #380	; 0x17c
  41f87c:	4b26      	ldr	r3, [pc, #152]	; (41f918 <draw_y_ticks+0x340>)
  41f87e:	4798      	blx	r3
                _lv_txt_get_size(&size, buf, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
  41f880:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
  41f884:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41f886:	2104      	movs	r1, #4
  41f888:	9102      	str	r1, [sp, #8]
  41f88a:	f647 4118 	movw	r1, #31768	; 0x7c18
  41f88e:	9101      	str	r1, [sp, #4]
  41f890:	f9bd 1056 	ldrsh.w	r1, [sp, #86]	; 0x56
  41f894:	9100      	str	r1, [sp, #0]
  41f896:	a91e      	add	r1, sp, #120	; 0x78
  41f898:	a80f      	add	r0, sp, #60	; 0x3c
  41f89a:	f8df b080 	ldr.w	fp, [pc, #128]	; 41f91c <draw_y_ticks+0x344>
  41f89e:	47d8      	blx	fp
                a.y1 = p2.y - size.y / 2;
  41f8a0:	f8bd 218a 	ldrh.w	r2, [sp, #394]	; 0x18a
  41f8a4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  41f8a8:	2b00      	cmp	r3, #0
  41f8aa:	db23      	blt.n	41f8f4 <draw_y_ticks+0x31c>
  41f8ac:	f3c3 034f 	ubfx	r3, r3, #1, #16
  41f8b0:	1ad1      	subs	r1, r2, r3
  41f8b2:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
                a.y2 = p2.y + size.y / 2;
  41f8b6:	4413      	add	r3, r2
  41f8b8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                if(which_axis == LV_CHART_AXIS_PRIMARY_Y) {
  41f8bc:	9b05      	ldr	r3, [sp, #20]
  41f8be:	b9db      	cbnz	r3, 41f8f8 <draw_y_ticks+0x320>
                    a.x1 = p2.x - size.x - label_dist;
  41f8c0:	f8bd 2188 	ldrh.w	r2, [sp, #392]	; 0x188
  41f8c4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  41f8c8:	1ad3      	subs	r3, r2, r3
  41f8ca:	b29b      	uxth	r3, r3
  41f8cc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  41f8d0:	1a5b      	subs	r3, r3, r1
  41f8d2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                    a.x2 = p2.x - label_dist;
  41f8d6:	1a52      	subs	r2, r2, r1
  41f8d8:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
  41f8dc:	2300      	movs	r3, #0
  41f8de:	9300      	str	r3, [sp, #0]
  41f8e0:	ab1e      	add	r3, sp, #120	; 0x78
  41f8e2:	aa12      	add	r2, sp, #72	; 0x48
  41f8e4:	4631      	mov	r1, r6
  41f8e6:	a810      	add	r0, sp, #64	; 0x40
  41f8e8:	f8df b034 	ldr.w	fp, [pc, #52]	; 41f920 <draw_y_ticks+0x348>
  41f8ec:	47d8      	blx	fp
  41f8ee:	e718      	b.n	41f722 <draw_y_ticks+0x14a>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f8f0:	2300      	movs	r3, #0
  41f8f2:	e7be      	b.n	41f872 <draw_y_ticks+0x29a>
                a.y1 = p2.y - size.y / 2;
  41f8f4:	3301      	adds	r3, #1
  41f8f6:	e7d9      	b.n	41f8ac <draw_y_ticks+0x2d4>
                    a.x1 = p2.x + label_dist;
  41f8f8:	f8bd 3188 	ldrh.w	r3, [sp, #392]	; 0x188
  41f8fc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  41f900:	1899      	adds	r1, r3, r2
  41f902:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
                    a.x2 = p2.x + size.x + label_dist;
  41f906:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
  41f90a:	440b      	add	r3, r1
  41f90c:	fa12 f383 	uxtah	r3, r2, r3
  41f910:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  41f914:	e7e2      	b.n	41f8dc <draw_y_ticks+0x304>
  41f916:	bf00      	nop
  41f918:	0041f559 	.word	0x0041f559
  41f91c:	00417e85 	.word	0x00417e85
  41f920:	0040df1d 	.word	0x0040df1d

0041f924 <draw_x_ticks>:

static void draw_x_ticks(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask)
{
  41f924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f928:	b0e5      	sub	sp, #404	; 0x194
  41f92a:	9006      	str	r0, [sp, #24]
  41f92c:	460c      	mov	r4, r1
  41f92e:	9204      	str	r2, [sp, #16]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41f930:	4ba3      	ldr	r3, [pc, #652]	; (41fbc0 <draw_x_ticks+0x29c>)
  41f932:	4798      	blx	r3
  41f934:	4606      	mov	r6, r0

    if(ext->x_axis.list_of_values == NULL && ext->x_axis.num_tick_marks == 0) return;
  41f936:	6c83      	ldr	r3, [r0, #72]	; 0x48
  41f938:	2b00      	cmp	r3, #0
  41f93a:	d044      	beq.n	41f9c6 <draw_x_ticks+0xa2>
    uint8_t num_scale_ticks;
    uint8_t major_tick_len, minor_tick_len;
    lv_chart_label_iterator_t iter;
    lv_point_t p1;
    lv_point_t p2;
    lv_coord_t x_ofs = series_area->x1;
  41f93c:	f9b4 3000 	ldrsh.w	r3, [r4]
  41f940:	461a      	mov	r2, r3
  41f942:	9308      	str	r3, [sp, #32]
    lv_coord_t y_ofs = series_area->y1;
  41f944:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f948:	88e3      	ldrh	r3, [r4, #6]
  41f94a:	fa1f f98a 	uxth.w	r9, sl
  41f94e:	eba3 0309 	sub.w	r3, r3, r9
  41f952:	b29b      	uxth	r3, r3
  41f954:	3301      	adds	r3, #1
  41f956:	b29b      	uxth	r3, r3
  41f958:	9305      	str	r3, [sp, #20]
  41f95a:	b21d      	sxth	r5, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f95c:	88a4      	ldrh	r4, [r4, #4]
  41f95e:	b293      	uxth	r3, r2
  41f960:	9309      	str	r3, [sp, #36]	; 0x24
  41f962:	1ae4      	subs	r4, r4, r3
  41f964:	b2a4      	uxth	r4, r4
  41f966:	3401      	adds	r4, #1
  41f968:	b2a4      	uxth	r4, r4
  41f96a:	fa0f fb84 	sxth.w	fp, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41f96e:	2211      	movs	r2, #17
  41f970:	2101      	movs	r1, #1
  41f972:	9f06      	ldr	r7, [sp, #24]
  41f974:	4638      	mov	r0, r7
  41f976:	4b93      	ldr	r3, [pc, #588]	; (41fbc4 <draw_x_ticks+0x2a0>)
  41f978:	4798      	blx	r3
  41f97a:	9007      	str	r0, [sp, #28]
    lv_coord_t h     = lv_area_get_height(series_area);
    lv_coord_t w     = lv_area_get_width(series_area);
    lv_style_int_t label_dist  = lv_obj_get_style_pad_bottom(chart, LV_CHART_PART_SERIES_BG);

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  41f97c:	a856      	add	r0, sp, #344	; 0x158
  41f97e:	4b92      	ldr	r3, [pc, #584]	; (41fbc8 <draw_x_ticks+0x2a4>)
  41f980:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(chart, LV_CHART_PART_BG, &label_dsc);
  41f982:	aa56      	add	r2, sp, #344	; 0x158
  41f984:	2100      	movs	r1, #0
  41f986:	4638      	mov	r0, r7
  41f988:	4b90      	ldr	r3, [pc, #576]	; (41fbcc <draw_x_ticks+0x2a8>)
  41f98a:	4798      	blx	r3

    /* calculate the size of tick marks */
    if(ext->x_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f98c:	f896 804e 	ldrb.w	r8, [r6, #78]	; 0x4e
  41f990:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  41f994:	d01c      	beq.n	41f9d0 <draw_x_ticks+0xac>
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
    else
        major_tick_len = ext->x_axis.major_tick_len;

    if(ext->x_axis.minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f996:	f896 704f 	ldrb.w	r7, [r6, #79]	; 0x4f
  41f99a:	2fff      	cmp	r7, #255	; 0xff
  41f99c:	d023      	beq.n	41f9e6 <draw_x_ticks+0xc2>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    else
        minor_tick_len = ext->x_axis.minor_tick_len;

    if(h + y_ofs > mask->y2) return;
  41f99e:	4455      	add	r5, sl
  41f9a0:	9a04      	ldr	r2, [sp, #16]
  41f9a2:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  41f9a6:	429d      	cmp	r5, r3
  41f9a8:	dc0a      	bgt.n	41f9c0 <draw_x_ticks+0x9c>
    if(h + y_ofs + label_dist  + label_dsc.font->line_height + major_tick_len < mask->y1) return;
  41f9aa:	9b07      	ldr	r3, [sp, #28]
  41f9ac:	441d      	add	r5, r3
  41f9ae:	9b58      	ldr	r3, [sp, #352]	; 0x160
  41f9b0:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
  41f9b4:	4455      	add	r5, sl
  41f9b6:	4445      	add	r5, r8
  41f9b8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  41f9bc:	429d      	cmp	r5, r3
  41f9be:	da1b      	bge.n	41f9f8 <draw_x_ticks+0xd4>
                              };
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
            }
        }
    }
}
  41f9c0:	b065      	add	sp, #404	; 0x194
  41f9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(ext->x_axis.list_of_values == NULL && ext->x_axis.num_tick_marks == 0) return;
  41f9c6:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  41f9ca:	2b00      	cmp	r3, #0
  41f9cc:	d0f8      	beq.n	41f9c0 <draw_x_ticks+0x9c>
  41f9ce:	e7b5      	b.n	41f93c <draw_x_ticks+0x18>
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
  41f9d0:	4b7f      	ldr	r3, [pc, #508]	; (41fbd0 <draw_x_ticks+0x2ac>)
  41f9d2:	fb83 230b 	smull	r2, r3, r3, fp
  41f9d6:	445b      	add	r3, fp
  41f9d8:	ea4f 78eb 	mov.w	r8, fp, asr #31
  41f9dc:	ebc8 08e3 	rsb	r8, r8, r3, asr #3
  41f9e0:	fa5f f888 	uxtb.w	r8, r8
  41f9e4:	e7d7      	b.n	41f996 <draw_x_ticks+0x72>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
  41f9e6:	ea4f 0348 	mov.w	r3, r8, lsl #1
  41f9ea:	4f7a      	ldr	r7, [pc, #488]	; (41fbd4 <draw_x_ticks+0x2b0>)
  41f9ec:	fb87 2703 	smull	r2, r7, r7, r3
  41f9f0:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
  41f9f4:	b2ff      	uxtb	r7, r7
  41f9f6:	e7d2      	b.n	41f99e <draw_x_ticks+0x7a>
    lv_draw_line_dsc_init(&line_dsc);
  41f9f8:	a853      	add	r0, sp, #332	; 0x14c
  41f9fa:	4b77      	ldr	r3, [pc, #476]	; (41fbd8 <draw_x_ticks+0x2b4>)
  41f9fc:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_BG, &line_dsc);
  41f9fe:	aa53      	add	r2, sp, #332	; 0x14c
  41fa00:	2100      	movs	r1, #0
  41fa02:	9806      	ldr	r0, [sp, #24]
  41fa04:	4b75      	ldr	r3, [pc, #468]	; (41fbdc <draw_x_ticks+0x2b8>)
  41fa06:	4798      	blx	r3
    if(ext->type == LV_CHART_TYPE_COLUMN) {
  41fa08:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
  41fa0c:	2b02      	cmp	r3, #2
  41fa0e:	d024      	beq.n	41fa5a <draw_x_ticks+0x136>
    iter = create_axis_label_iter(ext->x_axis.list_of_values, LV_CHART_LABEL_ITERATOR_FORWARD);
  41fa10:	ac0a      	add	r4, sp, #40	; 0x28
  41fa12:	2201      	movs	r2, #1
  41fa14:	6cb1      	ldr	r1, [r6, #72]	; 0x48
  41fa16:	4620      	mov	r0, r4
  41fa18:	4b71      	ldr	r3, [pc, #452]	; (41fbe0 <draw_x_ticks+0x2bc>)
  41fa1a:	4798      	blx	r3
  41fa1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  41fa20:	ab64      	add	r3, sp, #400	; 0x190
  41fa22:	e903 0007 	stmdb	r3, {r0, r1, r2}
    num_of_labels = iter.items_left;
  41fa26:	f89d 318c 	ldrb.w	r3, [sp, #396]	; 0x18c
  41fa2a:	4619      	mov	r1, r3
    if(ext->x_axis.num_tick_marks == 0) ext->x_axis.num_tick_marks = 1;
  41fa2c:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
  41fa30:	b913      	cbnz	r3, 41fa38 <draw_x_ticks+0x114>
  41fa32:	2301      	movs	r3, #1
  41fa34:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
    if(num_of_labels < 2)
  41fa38:	2901      	cmp	r1, #1
  41fa3a:	d92e      	bls.n	41fa9a <draw_x_ticks+0x176>
        num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
  41fa3c:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
  41fa40:	1e4d      	subs	r5, r1, #1
  41fa42:	fb15 f503 	smulbb	r5, r5, r3
  41fa46:	b2ed      	uxtb	r5, r5
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41fa48:	2400      	movs	r4, #0
  41fa4a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  41fa4e:	9706      	str	r7, [sp, #24]
  41fa50:	f8dd a020 	ldr.w	sl, [sp, #32]
  41fa54:	46b0      	mov	r8, r6
  41fa56:	460e      	mov	r6, r1
  41fa58:	e059      	b.n	41fb0e <draw_x_ticks+0x1ea>
        uint32_t ser_num = _lv_ll_get_len(&ext->series_ll);
  41fa5a:	4630      	mov	r0, r6
  41fa5c:	4b61      	ldr	r3, [pc, #388]	; (41fbe4 <draw_x_ticks+0x2c0>)
  41fa5e:	4798      	blx	r3
        lv_coord_t col_w = w / ((ser_num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
  41fa60:	1c41      	adds	r1, r0, #1
  41fa62:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  41fa64:	fb03 f301 	mul.w	r3, r3, r1
  41fa68:	fbbb f3f3 	udiv	r3, fp, r3
  41fa6c:	b21b      	sxth	r3, r3
        x_ofs += col_w / 2 + (col_w * (ser_num) / 2);
  41fa6e:	fb03 f200 	mul.w	r2, r3, r0
  41fa72:	0852      	lsrs	r2, r2, #1
  41fa74:	4618      	mov	r0, r3
  41fa76:	2b00      	cmp	r3, #0
  41fa78:	db0d      	blt.n	41fa96 <draw_x_ticks+0x172>
  41fa7a:	eb02 0260 	add.w	r2, r2, r0, asr #1
  41fa7e:	9809      	ldr	r0, [sp, #36]	; 0x24
  41fa80:	fa10 fb82 	uxtah	fp, r0, r2
  41fa84:	fa0f f28b 	sxth.w	r2, fp
  41fa88:	9208      	str	r2, [sp, #32]
        w -= col_w * ser_num + col_w;
  41fa8a:	fb11 f303 	smulbb	r3, r1, r3
  41fa8e:	1ae4      	subs	r4, r4, r3
  41fa90:	fa0f fb84 	sxth.w	fp, r4
  41fa94:	e7bc      	b.n	41fa10 <draw_x_ticks+0xec>
        x_ofs += col_w / 2 + (col_w * (ser_num) / 2);
  41fa96:	1c58      	adds	r0, r3, #1
  41fa98:	e7ef      	b.n	41fa7a <draw_x_ticks+0x156>
        num_scale_ticks = ext->x_axis.num_tick_marks;
  41fa9a:	f896 504d 	ldrb.w	r5, [r6, #77]	; 0x4d
  41fa9e:	e7d3      	b.n	41fa48 <draw_x_ticks+0x124>
            p2.y = p1.y + minor_tick_len; /* minor tick */
  41faa0:	9b06      	ldr	r3, [sp, #24]
  41faa2:	441a      	add	r2, r3
  41faa4:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / num_scale_ticks;
  41faa8:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
  41faac:	ebab 0303 	sub.w	r3, fp, r3
  41fab0:	fb03 f300 	mul.w	r3, r3, r0
  41fab4:	fb93 f3f1 	sdiv	r3, r3, r1
  41fab8:	4453      	add	r3, sl
  41faba:	b21b      	sxth	r3, r3
  41fabc:	f8ad 3180 	strh.w	r3, [sp, #384]	; 0x180
  41fac0:	f8ad 317c 	strh.w	r3, [sp, #380]	; 0x17c
        if(i != num_scale_ticks)
  41fac4:	42ac      	cmp	r4, r5
  41fac6:	d012      	beq.n	41faee <draw_x_ticks+0x1ca>
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  41fac8:	ab53      	add	r3, sp, #332	; 0x14c
  41faca:	9a04      	ldr	r2, [sp, #16]
  41facc:	a95f      	add	r1, sp, #380	; 0x17c
  41face:	a860      	add	r0, sp, #384	; 0x180
  41fad0:	4f45      	ldr	r7, [pc, #276]	; (41fbe8 <draw_x_ticks+0x2c4>)
  41fad2:	47b8      	blx	r7
        if(num_of_labels != 0) {
  41fad4:	b1ce      	cbz	r6, 41fb0a <draw_x_ticks+0x1e6>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41fad6:	b1b4      	cbz	r4, 41fb06 <draw_x_ticks+0x1e2>
  41fad8:	f898 204d 	ldrb.w	r2, [r8, #77]	; 0x4d
  41fadc:	fbb4 f3f2 	udiv	r3, r4, r2
  41fae0:	fb02 4313 	mls	r3, r2, r3, r4
  41fae4:	f013 0fff 	tst.w	r3, #255	; 0xff
  41fae8:	d12e      	bne.n	41fb48 <draw_x_ticks+0x224>
  41faea:	2301      	movs	r3, #1
  41faec:	e00c      	b.n	41fb08 <draw_x_ticks+0x1e4>
        else if((ext->x_axis.options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
  41faee:	f898 304c 	ldrb.w	r3, [r8, #76]	; 0x4c
  41faf2:	f013 0f01 	tst.w	r3, #1
  41faf6:	d0ed      	beq.n	41fad4 <draw_x_ticks+0x1b0>
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  41faf8:	ab53      	add	r3, sp, #332	; 0x14c
  41fafa:	9a04      	ldr	r2, [sp, #16]
  41fafc:	a95f      	add	r1, sp, #380	; 0x17c
  41fafe:	a860      	add	r0, sp, #384	; 0x180
  41fb00:	4f39      	ldr	r7, [pc, #228]	; (41fbe8 <draw_x_ticks+0x2c4>)
  41fb02:	47b8      	blx	r7
  41fb04:	e7e6      	b.n	41fad4 <draw_x_ticks+0x1b0>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41fb06:	2301      	movs	r3, #1
            if(is_tick_with_label(i, &(ext->x_axis))) {
  41fb08:	bb03      	cbnz	r3, 41fb4c <draw_x_ticks+0x228>
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41fb0a:	3401      	adds	r4, #1
  41fb0c:	b2e4      	uxtb	r4, r4
  41fb0e:	4620      	mov	r0, r4
  41fb10:	4629      	mov	r1, r5
  41fb12:	1c6b      	adds	r3, r5, #1
  41fb14:	429c      	cmp	r4, r3
  41fb16:	f6bf af53 	bge.w	41f9c0 <draw_x_ticks+0x9c>
        p1.y = h + y_ofs;
  41fb1a:	9b05      	ldr	r3, [sp, #20]
  41fb1c:	eb09 0203 	add.w	r2, r9, r3
  41fb20:	b292      	uxth	r2, r2
  41fb22:	f8ad 2182 	strh.w	r2, [sp, #386]	; 0x182
        if((num_of_labels != 0) && (i == 0 || i % ext->x_axis.num_tick_marks == 0))
  41fb26:	2e00      	cmp	r6, #0
  41fb28:	d0ba      	beq.n	41faa0 <draw_x_ticks+0x17c>
  41fb2a:	b144      	cbz	r4, 41fb3e <draw_x_ticks+0x21a>
  41fb2c:	f898 704d 	ldrb.w	r7, [r8, #77]	; 0x4d
  41fb30:	fbb4 f3f7 	udiv	r3, r4, r7
  41fb34:	fb07 4313 	mls	r3, r7, r3, r4
  41fb38:	f013 0fff 	tst.w	r3, #255	; 0xff
  41fb3c:	d1b0      	bne.n	41faa0 <draw_x_ticks+0x17c>
            p2.y = p1.y + major_tick_len; /* major tick */
  41fb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41fb40:	441a      	add	r2, r3
  41fb42:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
  41fb46:	e7af      	b.n	41faa8 <draw_x_ticks+0x184>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41fb48:	2300      	movs	r3, #0
  41fb4a:	e7dd      	b.n	41fb08 <draw_x_ticks+0x1e4>
                get_next_axis_label(&iter, buf);
  41fb4c:	a912      	add	r1, sp, #72	; 0x48
  41fb4e:	a861      	add	r0, sp, #388	; 0x184
  41fb50:	4b26      	ldr	r3, [pc, #152]	; (41fbec <draw_x_ticks+0x2c8>)
  41fb52:	4798      	blx	r3
                _lv_txt_get_size(&size, buf, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
  41fb54:	f9bd 3168 	ldrsh.w	r3, [sp, #360]	; 0x168
  41fb58:	2204      	movs	r2, #4
  41fb5a:	9202      	str	r2, [sp, #8]
  41fb5c:	f647 4218 	movw	r2, #31768	; 0x7c18
  41fb60:	9201      	str	r2, [sp, #4]
  41fb62:	f9bd 2166 	ldrsh.w	r2, [sp, #358]	; 0x166
  41fb66:	9200      	str	r2, [sp, #0]
  41fb68:	9a58      	ldr	r2, [sp, #352]	; 0x160
  41fb6a:	a912      	add	r1, sp, #72	; 0x48
  41fb6c:	a80f      	add	r0, sp, #60	; 0x3c
  41fb6e:	4f20      	ldr	r7, [pc, #128]	; (41fbf0 <draw_x_ticks+0x2cc>)
  41fb70:	47b8      	blx	r7
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
  41fb72:	f8bd 117c 	ldrh.w	r1, [sp, #380]	; 0x17c
  41fb76:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
  41fb7a:	2b00      	cmp	r3, #0
  41fb7c:	db1e      	blt.n	41fbbc <draw_x_ticks+0x298>
  41fb7e:	f3c3 024f 	ubfx	r2, r3, #1, #16
  41fb82:	1a8b      	subs	r3, r1, r2
  41fb84:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  41fb88:	f8bd 317e 	ldrh.w	r3, [sp, #382]	; 0x17e
  41fb8c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  41fb90:	181f      	adds	r7, r3, r0
  41fb92:	f8ad 7042 	strh.w	r7, [sp, #66]	; 0x42
  41fb96:	440a      	add	r2, r1
  41fb98:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
                               (p2.y + size.y + label_dist)
  41fb9c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
  41fba0:	4413      	add	r3, r2
  41fba2:	fa10 f383 	uxtah	r3, r0, r3
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
  41fba6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
  41fbaa:	2300      	movs	r3, #0
  41fbac:	9300      	str	r3, [sp, #0]
  41fbae:	ab12      	add	r3, sp, #72	; 0x48
  41fbb0:	aa56      	add	r2, sp, #344	; 0x158
  41fbb2:	9904      	ldr	r1, [sp, #16]
  41fbb4:	a810      	add	r0, sp, #64	; 0x40
  41fbb6:	4f0f      	ldr	r7, [pc, #60]	; (41fbf4 <draw_x_ticks+0x2d0>)
  41fbb8:	47b8      	blx	r7
  41fbba:	e7a6      	b.n	41fb0a <draw_x_ticks+0x1e6>
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
  41fbbc:	3301      	adds	r3, #1
  41fbbe:	e7de      	b.n	41fb7e <draw_x_ticks+0x25a>
  41fbc0:	00408095 	.word	0x00408095
  41fbc4:	00407445 	.word	0x00407445
  41fbc8:	0040ded5 	.word	0x0040ded5
  41fbcc:	0040896d 	.word	0x0040896d
  41fbd0:	88888889 	.word	0x88888889
  41fbd4:	55555556 	.word	0x55555556
  41fbd8:	0040ed25 	.word	0x0040ed25
  41fbdc:	00408ae5 	.word	0x00408ae5
  41fbe0:	0041f365 	.word	0x0041f365
  41fbe4:	0041638d 	.word	0x0041638d
  41fbe8:	0040ed41 	.word	0x0040ed41
  41fbec:	0041f559 	.word	0x0041f559
  41fbf0:	00417e85 	.word	0x00417e85
  41fbf4:	0040df1d 	.word	0x0040df1d

0041fbf8 <draw_axes>:

static void draw_axes(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask)
{
  41fbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41fbfa:	4604      	mov	r4, r0
  41fbfc:	460d      	mov	r5, r1
  41fbfe:	4616      	mov	r6, r2
    draw_y_ticks(chart, series_area, mask, LV_CHART_AXIS_PRIMARY_Y);
  41fc00:	2300      	movs	r3, #0
  41fc02:	4f06      	ldr	r7, [pc, #24]	; (41fc1c <draw_axes+0x24>)
  41fc04:	47b8      	blx	r7
    draw_y_ticks(chart, series_area, mask, LV_CHART_AXIS_SECONDARY_Y);
  41fc06:	2301      	movs	r3, #1
  41fc08:	4632      	mov	r2, r6
  41fc0a:	4629      	mov	r1, r5
  41fc0c:	4620      	mov	r0, r4
  41fc0e:	47b8      	blx	r7
    draw_x_ticks(chart, series_area, mask);
  41fc10:	4632      	mov	r2, r6
  41fc12:	4629      	mov	r1, r5
  41fc14:	4620      	mov	r0, r4
  41fc16:	4b02      	ldr	r3, [pc, #8]	; (41fc20 <draw_axes+0x28>)
  41fc18:	4798      	blx	r3
  41fc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41fc1c:	0041f5d9 	.word	0x0041f5d9
  41fc20:	0041f925 	.word	0x0041f925

0041fc24 <draw_series_column>:
{
  41fc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41fc28:	b0a3      	sub	sp, #140	; 0x8c
  41fc2a:	4604      	mov	r4, r0
  41fc2c:	468a      	mov	sl, r1
  41fc2e:	4615      	mov	r5, r2
    if(_lv_area_intersect(&com_area, series_area, clip_area) == false) return;
  41fc30:	a820      	add	r0, sp, #128	; 0x80
  41fc32:	4b68      	ldr	r3, [pc, #416]	; (41fdd4 <draw_series_column+0x1b0>)
  41fc34:	4798      	blx	r3
  41fc36:	b910      	cbnz	r0, 41fc3e <draw_series_column+0x1a>
}
  41fc38:	b023      	add	sp, #140	; 0x8c
  41fc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41fc3e:	4620      	mov	r0, r4
  41fc40:	4b65      	ldr	r3, [pc, #404]	; (41fdd8 <draw_series_column+0x1b4>)
  41fc42:	4798      	blx	r3
  41fc44:	4607      	mov	r7, r0
  41fc46:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41fc4a:	f8ba 2000 	ldrh.w	r2, [sl]
  41fc4e:	1a9b      	subs	r3, r3, r2
  41fc50:	b29b      	uxth	r3, r3
  41fc52:	3301      	adds	r3, #1
  41fc54:	b21b      	sxth	r3, r3
  41fc56:	461e      	mov	r6, r3
  41fc58:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41fc5a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  41fc5e:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  41fc62:	1a9b      	subs	r3, r3, r2
  41fc64:	b29b      	uxth	r3, r3
  41fc66:	3301      	adds	r3, #1
  41fc68:	fa1f fb83 	uxth.w	fp, r3
  41fc6c:	fa0f f38b 	sxth.w	r3, fp
  41fc70:	9302      	str	r3, [sp, #8]
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
  41fc72:	9000      	str	r0, [sp, #0]
  41fc74:	4b59      	ldr	r3, [pc, #356]	; (41fddc <draw_series_column+0x1b8>)
  41fc76:	4798      	blx	r3
  41fc78:	f8b7 8022 	ldrh.w	r8, [r7, #34]	; 0x22
  41fc7c:	fb00 8808 	mla	r8, r0, r8, r8
  41fc80:	fbb6 f8f8 	udiv	r8, r6, r8
  41fc84:	fa0f f388 	sxth.w	r3, r8
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
  41fc88:	2b00      	cmp	r3, #0
  41fc8a:	db26      	blt.n	41fcda <draw_series_column+0xb6>
  41fc8c:	105b      	asrs	r3, r3, #1
  41fc8e:	9304      	str	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41fc90:	2214      	movs	r2, #20
  41fc92:	2102      	movs	r1, #2
  41fc94:	4620      	mov	r0, r4
  41fc96:	4b52      	ldr	r3, [pc, #328]	; (41fde0 <draw_series_column+0x1bc>)
  41fc98:	4798      	blx	r3
  41fc9a:	4681      	mov	r9, r0
    lv_draw_rect_dsc_init(&col_dsc);
  41fc9c:	a809      	add	r0, sp, #36	; 0x24
  41fc9e:	4b51      	ldr	r3, [pc, #324]	; (41fde4 <draw_series_column+0x1c0>)
  41fca0:	4798      	blx	r3
    lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES, &col_dsc);
  41fca2:	aa09      	add	r2, sp, #36	; 0x24
  41fca4:	2102      	movs	r1, #2
  41fca6:	4620      	mov	r0, r4
  41fca8:	4b4f      	ldr	r3, [pc, #316]	; (41fde8 <draw_series_column+0x1c4>)
  41fcaa:	4798      	blx	r3
    col_dsc.bg_grad_dir = LV_GRAD_DIR_NONE;
  41fcac:	2300      	movs	r3, #0
  41fcae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    col_dsc.bg_opa = LV_OPA_COVER;
  41fcb2:	23ff      	movs	r3, #255	; 0xff
  41fcb4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    col_a.y2 = series_area->y2 + col_dsc.radius;
  41fcb8:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  41fcbc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  41fcc0:	4413      	add	r3, r2
  41fcc2:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
  41fcc6:	462a      	mov	r2, r5
  41fcc8:	4651      	mov	r1, sl
  41fcca:	a807      	add	r0, sp, #28
  41fccc:	4b41      	ldr	r3, [pc, #260]	; (41fdd4 <draw_series_column+0x1b0>)
  41fcce:	4798      	blx	r3
    if(mask_ret == false) return;
  41fcd0:	2800      	cmp	r0, #0
  41fcd2:	d0b1      	beq.n	41fc38 <draw_series_column+0x14>
  41fcd4:	2300      	movs	r3, #0
  41fcd6:	9303      	str	r3, [sp, #12]
  41fcd8:	e063      	b.n	41fda2 <draw_series_column+0x17e>
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
  41fcda:	3301      	adds	r3, #1
  41fcdc:	e7d6      	b.n	41fc8c <draw_series_column+0x68>
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  41fcde:	2200      	movs	r2, #0
  41fce0:	e012      	b.n	41fd08 <draw_series_column+0xe4>
            x_act += col_w;
  41fce2:	462e      	mov	r6, r5
        _LV_LL_READ_BACK(ext->series_ll, ser) {
  41fce4:	4621      	mov	r1, r4
  41fce6:	9800      	ldr	r0, [sp, #0]
  41fce8:	4b40      	ldr	r3, [pc, #256]	; (41fdec <draw_series_column+0x1c8>)
  41fcea:	4798      	blx	r3
  41fcec:	4604      	mov	r4, r0
  41fcee:	2c00      	cmp	r4, #0
  41fcf0:	d053      	beq.n	41fd9a <draw_series_column+0x176>
            if(ser->hidden) continue;
  41fcf2:	7a23      	ldrb	r3, [r4, #8]
  41fcf4:	f013 0f02 	tst.w	r3, #2
  41fcf8:	d1f4      	bne.n	41fce4 <draw_series_column+0xc0>
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  41fcfa:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
  41fcfe:	f013 0f01 	tst.w	r3, #1
  41fd02:	d1ec      	bne.n	41fcde <draw_series_column+0xba>
  41fd04:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
            col_a.x1 = x_act;
  41fd08:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
            col_a.x2 = col_a.x1 + col_w - col_space;
  41fd0c:	fa18 f586 	uxtah	r5, r8, r6
  41fd10:	b2ad      	uxth	r5, r5
  41fd12:	eba5 0309 	sub.w	r3, r5, r9
  41fd16:	b21b      	sxth	r3, r3
  41fd18:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            x_act += col_w;
  41fd1c:	b22d      	sxth	r5, r5
            if(col_a.x2 < series_mask.x1) continue;
  41fd1e:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  41fd22:	428b      	cmp	r3, r1
  41fd24:	dbdd      	blt.n	41fce2 <draw_series_column+0xbe>
            if(col_a.x1 > series_mask.x2) break;
  41fd26:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  41fd2a:	429e      	cmp	r6, r3
  41fd2c:	dc35      	bgt.n	41fd9a <draw_series_column+0x176>
            col_dsc.bg_color = ser->color;
  41fd2e:	88a3      	ldrh	r3, [r4, #4]
  41fd30:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            lv_coord_t p_act = (start_point + i) % ext->point_cnt;
  41fd34:	9b01      	ldr	r3, [sp, #4]
  41fd36:	441a      	add	r2, r3
  41fd38:	8c79      	ldrh	r1, [r7, #34]	; 0x22
  41fd3a:	fb92 f3f1 	sdiv	r3, r2, r1
  41fd3e:	fb01 2213 	mls	r2, r1, r3, r2
  41fd42:	b212      	sxth	r2, r2
            y_tmp            = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
  41fd44:	6823      	ldr	r3, [r4, #0]
  41fd46:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
  41fd4a:	7a23      	ldrb	r3, [r4, #8]
  41fd4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
  41fd50:	330c      	adds	r3, #12
  41fd52:	f937 0013 	ldrsh.w	r0, [r7, r3, lsl #1]
  41fd56:	1a09      	subs	r1, r1, r0
  41fd58:	9e02      	ldr	r6, [sp, #8]
  41fd5a:	fb06 f101 	mul.w	r1, r6, r1
            y_tmp            = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
  41fd5e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  41fd62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41fd66:	1a1b      	subs	r3, r3, r0
  41fd68:	fb91 f3f3 	sdiv	r3, r1, r3
            col_a.y1         = h - y_tmp + series_area->y1;
  41fd6c:	ebab 0303 	sub.w	r3, fp, r3
  41fd70:	f8ba 1002 	ldrh.w	r1, [sl, #2]
  41fd74:	fa11 f383 	uxtah	r3, r1, r3
  41fd78:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
  41fd7c:	6823      	ldr	r3, [r4, #0]
  41fd7e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  41fd82:	4b1b      	ldr	r3, [pc, #108]	; (41fdf0 <draw_series_column+0x1cc>)
  41fd84:	429a      	cmp	r2, r3
  41fd86:	d006      	beq.n	41fd96 <draw_series_column+0x172>
                lv_draw_rect(&col_a, &series_mask, &col_dsc);
  41fd88:	aa09      	add	r2, sp, #36	; 0x24
  41fd8a:	a907      	add	r1, sp, #28
  41fd8c:	a81e      	add	r0, sp, #120	; 0x78
  41fd8e:	4b19      	ldr	r3, [pc, #100]	; (41fdf4 <draw_series_column+0x1d0>)
  41fd90:	4798      	blx	r3
            x_act += col_w;
  41fd92:	462e      	mov	r6, r5
  41fd94:	e7a6      	b.n	41fce4 <draw_series_column+0xc0>
  41fd96:	462e      	mov	r6, r5
  41fd98:	e7a4      	b.n	41fce4 <draw_series_column+0xc0>
    for(i = 0; i < ext->point_cnt; i++) {
  41fd9a:	9b03      	ldr	r3, [sp, #12]
  41fd9c:	3301      	adds	r3, #1
  41fd9e:	b29b      	uxth	r3, r3
  41fda0:	9303      	str	r3, [sp, #12]
  41fda2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  41fda4:	9a03      	ldr	r2, [sp, #12]
  41fda6:	429a      	cmp	r2, r3
  41fda8:	f4bf af46 	bcs.w	41fc38 <draw_series_column+0x14>
        lv_coord_t x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
  41fdac:	9a03      	ldr	r2, [sp, #12]
  41fdae:	9201      	str	r2, [sp, #4]
  41fdb0:	9905      	ldr	r1, [sp, #20]
  41fdb2:	fb02 f601 	mul.w	r6, r2, r1
  41fdb6:	fb96 f3f3 	sdiv	r3, r6, r3
        x_act += series_area->x1 + x_ofs;
  41fdba:	f8ba 6000 	ldrh.w	r6, [sl]
  41fdbe:	9a04      	ldr	r2, [sp, #16]
  41fdc0:	4416      	add	r6, r2
  41fdc2:	fa13 f686 	uxtah	r6, r3, r6
  41fdc6:	b236      	sxth	r6, r6
        _LV_LL_READ_BACK(ext->series_ll, ser) {
  41fdc8:	9800      	ldr	r0, [sp, #0]
  41fdca:	4b0b      	ldr	r3, [pc, #44]	; (41fdf8 <draw_series_column+0x1d4>)
  41fdcc:	4798      	blx	r3
  41fdce:	4604      	mov	r4, r0
  41fdd0:	e78d      	b.n	41fcee <draw_series_column+0xca>
  41fdd2:	bf00      	nop
  41fdd4:	004155b3 	.word	0x004155b3
  41fdd8:	00408095 	.word	0x00408095
  41fddc:	0041638d 	.word	0x0041638d
  41fde0:	00407445 	.word	0x00407445
  41fde4:	0041245d 	.word	0x0041245d
  41fde8:	0040833d 	.word	0x0040833d
  41fdec:	004161ab 	.word	0x004161ab
  41fdf0:	ffff83e8 	.word	0xffff83e8
  41fdf4:	004124a9 	.word	0x004124a9
  41fdf8:	00416193 	.word	0x00416193

0041fdfc <draw_series_line>:
{
  41fdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41fe00:	b0d7      	sub	sp, #348	; 0x15c
  41fe02:	4604      	mov	r4, r0
  41fe04:	9108      	str	r1, [sp, #32]
  41fe06:	9207      	str	r2, [sp, #28]
    if(_lv_area_intersect(&com_area, series_area, clip_area) == false) return;
  41fe08:	a854      	add	r0, sp, #336	; 0x150
  41fe0a:	4ba1      	ldr	r3, [pc, #644]	; (420090 <draw_series_line+0x294>)
  41fe0c:	4798      	blx	r3
  41fe0e:	b910      	cbnz	r0, 41fe16 <draw_series_line+0x1a>
}
  41fe10:	b057      	add	sp, #348	; 0x15c
  41fe12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41fe16:	4620      	mov	r0, r4
  41fe18:	4b9e      	ldr	r3, [pc, #632]	; (420094 <draw_series_line+0x298>)
  41fe1a:	4798      	blx	r3
  41fe1c:	4607      	mov	r7, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41fe1e:	9908      	ldr	r1, [sp, #32]
  41fe20:	888b      	ldrh	r3, [r1, #4]
  41fe22:	f9b1 2000 	ldrsh.w	r2, [r1]
  41fe26:	920d      	str	r2, [sp, #52]	; 0x34
  41fe28:	fa1f f982 	uxth.w	r9, r2
  41fe2c:	eba3 0309 	sub.w	r3, r3, r9
  41fe30:	b29b      	uxth	r3, r3
  41fe32:	3301      	adds	r3, #1
  41fe34:	b21b      	sxth	r3, r3
  41fe36:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41fe38:	88cb      	ldrh	r3, [r1, #6]
  41fe3a:	f8b1 b002 	ldrh.w	fp, [r1, #2]
  41fe3e:	eba3 030b 	sub.w	r3, r3, fp
  41fe42:	b29b      	uxth	r3, r3
  41fe44:	3301      	adds	r3, #1
  41fe46:	fa1f fa83 	uxth.w	sl, r3
  41fe4a:	fa0f f38a 	sxth.w	r3, sl
  41fe4e:	930c      	str	r3, [sp, #48]	; 0x30
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
  41fe50:	9a07      	ldr	r2, [sp, #28]
  41fe52:	a850      	add	r0, sp, #320	; 0x140
  41fe54:	4b8e      	ldr	r3, [pc, #568]	; (420090 <draw_series_line+0x294>)
  41fe56:	4798      	blx	r3
    if(mask_ret == false) return;
  41fe58:	2800      	cmp	r0, #0
  41fe5a:	d0d9      	beq.n	41fe10 <draw_series_line+0x14>
    lv_draw_line_dsc_init(&line_dsc);
  41fe5c:	a84d      	add	r0, sp, #308	; 0x134
  41fe5e:	4b8e      	ldr	r3, [pc, #568]	; (420098 <draw_series_line+0x29c>)
  41fe60:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_SERIES, &line_dsc);
  41fe62:	aa4d      	add	r2, sp, #308	; 0x134
  41fe64:	2102      	movs	r1, #2
  41fe66:	4620      	mov	r0, r4
  41fe68:	4b8c      	ldr	r3, [pc, #560]	; (42009c <draw_series_line+0x2a0>)
  41fe6a:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41fe6c:	222c      	movs	r2, #44	; 0x2c
  41fe6e:	2102      	movs	r1, #2
  41fe70:	4620      	mov	r0, r4
  41fe72:	4b8b      	ldr	r3, [pc, #556]	; (4200a0 <draw_series_line+0x2a4>)
  41fe74:	4798      	blx	r3
  41fe76:	900b      	str	r0, [sp, #44]	; 0x2c
    if(has_area) {
  41fe78:	2802      	cmp	r0, #2
  41fe7a:	d829      	bhi.n	41fed0 <draw_series_line+0xd4>
    bool has_fade = false;
  41fe7c:	2300      	movs	r3, #0
  41fe7e:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_draw_rect_dsc_init(&point_dsc);
  41fe80:	a81d      	add	r0, sp, #116	; 0x74
  41fe82:	4b88      	ldr	r3, [pc, #544]	; (4200a4 <draw_series_line+0x2a8>)
  41fe84:	4798      	blx	r3
    point_dsc.bg_opa = line_dsc.opa;
  41fe86:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
  41fe8a:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    point_dsc.radius = LV_RADIUS_CIRCLE;
  41fe8e:	f647 73ff 	movw	r3, #32767	; 0x7fff
  41fe92:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41fe96:	2203      	movs	r2, #3
  41fe98:	2102      	movs	r1, #2
  41fe9a:	4620      	mov	r0, r4
  41fe9c:	4b82      	ldr	r3, [pc, #520]	; (4200a8 <draw_series_line+0x2ac>)
  41fe9e:	4798      	blx	r3
  41fea0:	9004      	str	r0, [sp, #16]
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  41fea2:	f9bd 3136 	ldrsh.w	r3, [sp, #310]	; 0x136
  41fea6:	2b00      	cmp	r3, #0
  41fea8:	db36      	blt.n	41ff18 <draw_series_line+0x11c>
  41feaa:	9a04      	ldr	r2, [sp, #16]
  41feac:	ebb2 0f63 	cmp.w	r2, r3, asr #1
  41feb0:	dd05      	ble.n	41febe <draw_series_line+0xc2>
  41feb2:	f89d 313d 	ldrb.w	r3, [sp, #317]	; 0x13d
  41feb6:	f043 0310 	orr.w	r3, r3, #16
  41feba:	f88d 313d 	strb.w	r3, [sp, #317]	; 0x13d
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  41febe:	9709      	str	r7, [sp, #36]	; 0x24
  41fec0:	4638      	mov	r0, r7
  41fec2:	4b7a      	ldr	r3, [pc, #488]	; (4200ac <draw_series_line+0x2b0>)
  41fec4:	4798      	blx	r3
  41fec6:	4606      	mov	r6, r0
    int16_t mask_fade_id = LV_MASK_ID_INV;
  41fec8:	f04f 33ff 	mov.w	r3, #4294967295
  41fecc:	930e      	str	r3, [sp, #56]	; 0x38
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  41fece:	e123      	b.n	420118 <draw_series_line+0x31c>
        lv_draw_rect_dsc_init(&area_dsc);
  41fed0:	a832      	add	r0, sp, #200	; 0xc8
  41fed2:	4b74      	ldr	r3, [pc, #464]	; (4200a4 <draw_series_line+0x2a8>)
  41fed4:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES, &area_dsc);
  41fed6:	aa32      	add	r2, sp, #200	; 0xc8
  41fed8:	2102      	movs	r1, #2
  41feda:	4620      	mov	r0, r4
  41fedc:	4b74      	ldr	r3, [pc, #464]	; (4200b0 <draw_series_line+0x2b4>)
  41fede:	4798      	blx	r3
        area_dsc.border_width = 0;
  41fee0:	2300      	movs	r3, #0
  41fee2:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
        has_fade = area_dsc.bg_grad_dir == LV_GRAD_DIR_VER ? true : false;
  41fee6:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
  41feea:	2b01      	cmp	r3, #1
  41feec:	bf0c      	ite	eq
  41feee:	2301      	moveq	r3, #1
  41fef0:	2300      	movne	r3, #0
  41fef2:	930f      	str	r3, [sp, #60]	; 0x3c
        if(has_fade) {
  41fef4:	d1c4      	bne.n	41fe80 <draw_series_line+0x84>
                                   area_dsc.bg_grad_color_stop, series_area->y2);
  41fef6:	f9bd 10d2 	ldrsh.w	r1, [sp, #210]	; 0xd2
            lv_draw_mask_fade_init(&mask_fade_p, series_area, area_dsc.bg_main_color_stop, series_area->y1,
  41fefa:	9d08      	ldr	r5, [sp, #32]
  41fefc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  41ff00:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  41ff04:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
  41ff08:	9001      	str	r0, [sp, #4]
  41ff0a:	b2c9      	uxtb	r1, r1
  41ff0c:	9100      	str	r1, [sp, #0]
  41ff0e:	4629      	mov	r1, r5
  41ff10:	a847      	add	r0, sp, #284	; 0x11c
  41ff12:	4d68      	ldr	r5, [pc, #416]	; (4200b4 <draw_series_line+0x2b8>)
  41ff14:	47a8      	blx	r5
  41ff16:	e7b3      	b.n	41fe80 <draw_series_line+0x84>
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  41ff18:	3301      	adds	r3, #1
  41ff1a:	e7c6      	b.n	41feaa <draw_series_line+0xae>
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  41ff1c:	f04f 0800 	mov.w	r8, #0
  41ff20:	e112      	b.n	420148 <draw_series_line+0x34c>
                    if(has_fade) mask_fade_id = lv_draw_mask_add(&mask_fade_p, NULL);
  41ff22:	2100      	movs	r1, #0
  41ff24:	a847      	add	r0, sp, #284	; 0x11c
  41ff26:	4b64      	ldr	r3, [pc, #400]	; (4200b8 <draw_series_line+0x2bc>)
  41ff28:	4798      	blx	r3
  41ff2a:	900e      	str	r0, [sp, #56]	; 0x38
                    lv_draw_rect(&a, &series_mask, &area_dsc);
  41ff2c:	aa32      	add	r2, sp, #200	; 0xc8
  41ff2e:	a950      	add	r1, sp, #320	; 0x140
  41ff30:	a810      	add	r0, sp, #64	; 0x40
  41ff32:	4b62      	ldr	r3, [pc, #392]	; (4200bc <draw_series_line+0x2c0>)
  41ff34:	4798      	blx	r3
                    lv_draw_mask_remove_id(mask_line_id);
  41ff36:	4630      	mov	r0, r6
  41ff38:	4b61      	ldr	r3, [pc, #388]	; (4200c0 <draw_series_line+0x2c4>)
  41ff3a:	4798      	blx	r3
                    lv_draw_mask_remove_id(mask_fade_id);
  41ff3c:	980e      	ldr	r0, [sp, #56]	; 0x38
  41ff3e:	4b60      	ldr	r3, [pc, #384]	; (4200c0 <draw_series_line+0x2c4>)
  41ff40:	4798      	blx	r3
            if(point_radius) {
  41ff42:	9a04      	ldr	r2, [sp, #16]
  41ff44:	b1e2      	cbz	r2, 41ff80 <draw_series_line+0x184>
                point_area.x2 = point_area.x1 + point_radius;
  41ff46:	f8bd 314c 	ldrh.w	r3, [sp, #332]	; 0x14c
  41ff4a:	b292      	uxth	r2, r2
  41ff4c:	1899      	adds	r1, r3, r2
  41ff4e:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
                point_area.x1 -= point_radius;
  41ff52:	1a9b      	subs	r3, r3, r2
  41ff54:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                point_area.y2 = point_area.y1 + point_radius;
  41ff58:	f8bd 314e 	ldrh.w	r3, [sp, #334]	; 0x14e
  41ff5c:	18d1      	adds	r1, r2, r3
  41ff5e:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
                point_area.y1 -= point_radius;
  41ff62:	1a9b      	subs	r3, r3, r2
  41ff64:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                if(ser->points[p_act] != LV_CHART_POINT_DEF) {
  41ff68:	9b03      	ldr	r3, [sp, #12]
  41ff6a:	681b      	ldr	r3, [r3, #0]
  41ff6c:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
  41ff70:	4b54      	ldr	r3, [pc, #336]	; (4200c4 <draw_series_line+0x2c8>)
  41ff72:	429a      	cmp	r2, r3
  41ff74:	d004      	beq.n	41ff80 <draw_series_line+0x184>
                    lv_draw_rect(&point_area, clip_area, &point_dsc);
  41ff76:	aa1d      	add	r2, sp, #116	; 0x74
  41ff78:	9907      	ldr	r1, [sp, #28]
  41ff7a:	a812      	add	r0, sp, #72	; 0x48
  41ff7c:	4b4f      	ldr	r3, [pc, #316]	; (4200bc <draw_series_line+0x2c0>)
  41ff7e:	4798      	blx	r3
        for(i = 0; i < ext->point_cnt; i++) {
  41ff80:	3501      	adds	r5, #1
  41ff82:	b2ad      	uxth	r5, r5
            p_act = (start_point + i) % ext->point_cnt;
  41ff84:	46a6      	mov	lr, r4
        for(i = 0; i < ext->point_cnt; i++) {
  41ff86:	8c79      	ldrh	r1, [r7, #34]	; 0x22
  41ff88:	428d      	cmp	r5, r1
  41ff8a:	f080 80a1 	bcs.w	4200d0 <draw_series_line+0x2d4>
            p1.x = p2.x;
  41ff8e:	f9bd 3148 	ldrsh.w	r3, [sp, #328]	; 0x148
  41ff92:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
            p1.y = p2.y;
  41ff96:	f9bd 314a 	ldrsh.w	r3, [sp, #330]	; 0x14a
  41ff9a:	f8ad 314e 	strh.w	r3, [sp, #334]	; 0x14e
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
  41ff9e:	9b06      	ldr	r3, [sp, #24]
  41ffa0:	fb05 f303 	mul.w	r3, r5, r3
  41ffa4:	1e48      	subs	r0, r1, #1
  41ffa6:	fb93 f3f0 	sdiv	r3, r3, r0
  41ffaa:	444b      	add	r3, r9
  41ffac:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
            p_act = (start_point + i) % ext->point_cnt;
  41ffb0:	eb08 0305 	add.w	r3, r8, r5
  41ffb4:	fb93 f4f1 	sdiv	r4, r3, r1
  41ffb8:	fb01 3414 	mls	r4, r1, r4, r3
  41ffbc:	b224      	sxth	r4, r4
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
  41ffbe:	9e03      	ldr	r6, [sp, #12]
  41ffc0:	6833      	ldr	r3, [r6, #0]
  41ffc2:	f933 1014 	ldrsh.w	r1, [r3, r4, lsl #1]
  41ffc6:	7a33      	ldrb	r3, [r6, #8]
  41ffc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
  41ffcc:	330c      	adds	r3, #12
  41ffce:	f937 0013 	ldrsh.w	r0, [r7, r3, lsl #1]
  41ffd2:	1a09      	subs	r1, r1, r0
  41ffd4:	9a05      	ldr	r2, [sp, #20]
  41ffd6:	fb01 f102 	mul.w	r1, r1, r2
            y_tmp = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
  41ffda:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  41ffde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41ffe2:	1a1b      	subs	r3, r3, r0
  41ffe4:	fb91 f3f3 	sdiv	r3, r1, r3
            p2.y  = h - y_tmp + y_ofs;
  41ffe8:	ebaa 0303 	sub.w	r3, sl, r3
  41ffec:	fa1b f383 	uxtah	r3, fp, r3
  41fff0:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
            if(i != 0 && ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF) {
  41fff4:	2d00      	cmp	r5, #0
  41fff6:	d0a4      	beq.n	41ff42 <draw_series_line+0x146>
  41fff8:	6833      	ldr	r3, [r6, #0]
  41fffa:	f933 101e 	ldrsh.w	r1, [r3, lr, lsl #1]
  41fffe:	4a31      	ldr	r2, [pc, #196]	; (4200c4 <draw_series_line+0x2c8>)
  420000:	4291      	cmp	r1, r2
  420002:	d09e      	beq.n	41ff42 <draw_series_line+0x146>
  420004:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
  420008:	4b2e      	ldr	r3, [pc, #184]	; (4200c4 <draw_series_line+0x2c8>)
  42000a:	429a      	cmp	r2, r3
  42000c:	d099      	beq.n	41ff42 <draw_series_line+0x146>
                lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  42000e:	ab4d      	add	r3, sp, #308	; 0x134
  420010:	aa50      	add	r2, sp, #320	; 0x140
  420012:	a952      	add	r1, sp, #328	; 0x148
  420014:	a853      	add	r0, sp, #332	; 0x14c
  420016:	4e2c      	ldr	r6, [pc, #176]	; (4200c8 <draw_series_line+0x2cc>)
  420018:	47b0      	blx	r6
                lv_coord_t y_top = LV_MATH_MIN(p1.y, p2.y);
  42001a:	f9bd 014a 	ldrsh.w	r0, [sp, #330]	; 0x14a
  42001e:	f9bd 214e 	ldrsh.w	r2, [sp, #334]	; 0x14e
  420022:	4603      	mov	r3, r0
  420024:	4290      	cmp	r0, r2
  420026:	bfa8      	it	ge
  420028:	4613      	movge	r3, r2
  42002a:	4619      	mov	r1, r3
  42002c:	930a      	str	r3, [sp, #40]	; 0x28
                if(has_area && y_top <= clip_area->y2) {
  42002e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  420030:	2b02      	cmp	r3, #2
  420032:	d986      	bls.n	41ff42 <draw_series_line+0x146>
  420034:	9b07      	ldr	r3, [sp, #28]
  420036:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  42003a:	4299      	cmp	r1, r3
  42003c:	dc81      	bgt.n	41ff42 <draw_series_line+0x146>
                    lv_draw_mask_line_points_init(&mask_line_p, p1.x, p1.y, p2.x, p2.y, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  42003e:	f9bd 3148 	ldrsh.w	r3, [sp, #328]	; 0x148
  420042:	f9bd 114c 	ldrsh.w	r1, [sp, #332]	; 0x14c
  420046:	f04f 0e03 	mov.w	lr, #3
  42004a:	f8cd e004 	str.w	lr, [sp, #4]
  42004e:	9000      	str	r0, [sp, #0]
  420050:	a812      	add	r0, sp, #72	; 0x48
  420052:	4e1e      	ldr	r6, [pc, #120]	; (4200cc <draw_series_line+0x2d0>)
  420054:	47b0      	blx	r6
                    mask_line_id = lv_draw_mask_add(&mask_line_p, NULL);
  420056:	2100      	movs	r1, #0
  420058:	a812      	add	r0, sp, #72	; 0x48
  42005a:	4b17      	ldr	r3, [pc, #92]	; (4200b8 <draw_series_line+0x2bc>)
  42005c:	4798      	blx	r3
  42005e:	4606      	mov	r6, r0
                    a.x1 = p1.x;
  420060:	f9bd 314c 	ldrsh.w	r3, [sp, #332]	; 0x14c
  420064:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                    a.x2 = p2.x - 1;
  420068:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
  42006c:	3b01      	subs	r3, #1
  42006e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                    a.y1 = y_top;
  420072:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  420076:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
                    a.y2 = series_area->y2;
  42007a:	9b08      	ldr	r3, [sp, #32]
  42007c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  420080:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                    if(has_fade) mask_fade_id = lv_draw_mask_add(&mask_fade_p, NULL);
  420084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  420086:	2b00      	cmp	r3, #0
  420088:	f43f af50 	beq.w	41ff2c <draw_series_line+0x130>
  42008c:	e749      	b.n	41ff22 <draw_series_line+0x126>
  42008e:	bf00      	nop
  420090:	004155b3 	.word	0x004155b3
  420094:	00408095 	.word	0x00408095
  420098:	0040ed25 	.word	0x0040ed25
  42009c:	00408ae5 	.word	0x00408ae5
  4200a0:	00406eb9 	.word	0x00406eb9
  4200a4:	0041245d 	.word	0x0041245d
  4200a8:	00407445 	.word	0x00407445
  4200ac:	00416193 	.word	0x00416193
  4200b0:	0040833d 	.word	0x0040833d
  4200b4:	0040fe91 	.word	0x0040fe91
  4200b8:	0040fbb1 	.word	0x0040fbb1
  4200bc:	004124a9 	.word	0x004124a9
  4200c0:	0040fc35 	.word	0x0040fc35
  4200c4:	ffff83e8 	.word	0xffff83e8
  4200c8:	0040ed41 	.word	0x0040ed41
  4200cc:	0040fcd1 	.word	0x0040fcd1
  4200d0:	9e03      	ldr	r6, [sp, #12]
        if(point_radius) {
  4200d2:	9904      	ldr	r1, [sp, #16]
  4200d4:	b1d9      	cbz	r1, 42010e <draw_series_line+0x312>
            point_area.x2 = point_area.x1 + point_radius;
  4200d6:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
  4200da:	b289      	uxth	r1, r1
  4200dc:	1858      	adds	r0, r3, r1
  4200de:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
            point_area.x1 -= point_radius;
  4200e2:	1a5b      	subs	r3, r3, r1
  4200e4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            point_area.y2 = point_area.y1 + point_radius;
  4200e8:	f8bd 314a 	ldrh.w	r3, [sp, #330]	; 0x14a
  4200ec:	18c8      	adds	r0, r1, r3
  4200ee:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            point_area.y1 -= point_radius;
  4200f2:	1a5b      	subs	r3, r3, r1
  4200f4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
  4200f8:	6833      	ldr	r3, [r6, #0]
  4200fa:	f933 201e 	ldrsh.w	r2, [r3, lr, lsl #1]
  4200fe:	4b24      	ldr	r3, [pc, #144]	; (420190 <draw_series_line+0x394>)
  420100:	429a      	cmp	r2, r3
  420102:	d004      	beq.n	42010e <draw_series_line+0x312>
                lv_draw_rect(&point_area, clip_area, &point_dsc);
  420104:	aa1d      	add	r2, sp, #116	; 0x74
  420106:	9907      	ldr	r1, [sp, #28]
  420108:	a812      	add	r0, sp, #72	; 0x48
  42010a:	4b22      	ldr	r3, [pc, #136]	; (420194 <draw_series_line+0x398>)
  42010c:	4798      	blx	r3
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  42010e:	4631      	mov	r1, r6
  420110:	9809      	ldr	r0, [sp, #36]	; 0x24
  420112:	4b21      	ldr	r3, [pc, #132]	; (420198 <draw_series_line+0x39c>)
  420114:	4798      	blx	r3
  420116:	4606      	mov	r6, r0
  420118:	2e00      	cmp	r6, #0
  42011a:	f43f ae79 	beq.w	41fe10 <draw_series_line+0x14>
        if(ser->hidden) continue;
  42011e:	7a33      	ldrb	r3, [r6, #8]
  420120:	f013 0f02 	tst.w	r3, #2
  420124:	d1f3      	bne.n	42010e <draw_series_line+0x312>
        line_dsc.color = ser->color;
  420126:	88b3      	ldrh	r3, [r6, #4]
  420128:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
        point_dsc.bg_color = ser->color;
  42012c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        area_dsc.bg_color = ser->color;
  420130:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        area_dsc.bg_grad_color = ser->color;
  420134:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  420138:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
  42013c:	f013 0f01 	tst.w	r3, #1
  420140:	f47f aeec 	bne.w	41ff1c <draw_series_line+0x120>
  420144:	f9b6 8006 	ldrsh.w	r8, [r6, #6]
        p1.x = 0 + x_ofs;
  420148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  42014a:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
        p2.x = 0 + x_ofs;
  42014e:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
        int32_t y_tmp = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin[ser->y_axis]) * h;
  420152:	6833      	ldr	r3, [r6, #0]
  420154:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
  420158:	7a32      	ldrb	r2, [r6, #8]
  42015a:	f3c2 0280 	ubfx	r2, r2, #2, #1
  42015e:	320c      	adds	r2, #12
  420160:	f937 1012 	ldrsh.w	r1, [r7, r2, lsl #1]
  420164:	1a5b      	subs	r3, r3, r1
  420166:	980c      	ldr	r0, [sp, #48]	; 0x30
  420168:	9005      	str	r0, [sp, #20]
  42016a:	fb00 f303 	mul.w	r3, r0, r3
        y_tmp = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
  42016e:	eb07 0242 	add.w	r2, r7, r2, lsl #1
  420172:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  420176:	1a52      	subs	r2, r2, r1
  420178:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
  42017c:	ebaa 0303 	sub.w	r3, sl, r3
  420180:	fa1b f383 	uxtah	r3, fp, r3
  420184:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
        for(i = 0; i < ext->point_cnt; i++) {
  420188:	2500      	movs	r5, #0
  42018a:	9603      	str	r6, [sp, #12]
  42018c:	46c6      	mov	lr, r8
  42018e:	e6fa      	b.n	41ff86 <draw_series_line+0x18a>
  420190:	ffff83e8 	.word	0xffff83e8
  420194:	004124a9 	.word	0x004124a9
  420198:	004161ab 	.word	0x004161ab

0042019c <draw_cursors>:
{
  42019c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4201a0:	b09f      	sub	sp, #124	; 0x7c
  4201a2:	4604      	mov	r4, r0
  4201a4:	460d      	mov	r5, r1
  4201a6:	4690      	mov	r8, r2
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
  4201a8:	a81c      	add	r0, sp, #112	; 0x70
  4201aa:	4b70      	ldr	r3, [pc, #448]	; (42036c <draw_cursors+0x1d0>)
  4201ac:	4798      	blx	r3
    if(mask_ret == false) return;
  4201ae:	b910      	cbnz	r0, 4201b6 <draw_cursors+0x1a>
}
  4201b0:	b01f      	add	sp, #124	; 0x7c
  4201b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4201b6:	4620      	mov	r0, r4
  4201b8:	4b6d      	ldr	r3, [pc, #436]	; (420370 <draw_cursors+0x1d4>)
  4201ba:	4798      	blx	r3
    if(_lv_ll_is_empty(&ext->cursors_ll)) return;
  4201bc:	f100 060c 	add.w	r6, r0, #12
  4201c0:	4630      	mov	r0, r6
  4201c2:	4b6c      	ldr	r3, [pc, #432]	; (420374 <draw_cursors+0x1d8>)
  4201c4:	4798      	blx	r3
  4201c6:	2800      	cmp	r0, #0
  4201c8:	d1f2      	bne.n	4201b0 <draw_cursors+0x14>
    lv_draw_line_dsc_init(&line_dsc);
  4201ca:	a817      	add	r0, sp, #92	; 0x5c
  4201cc:	4b6a      	ldr	r3, [pc, #424]	; (420378 <draw_cursors+0x1dc>)
  4201ce:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_CURSOR, &line_dsc);
  4201d0:	aa17      	add	r2, sp, #92	; 0x5c
  4201d2:	2103      	movs	r1, #3
  4201d4:	4620      	mov	r0, r4
  4201d6:	4b69      	ldr	r3, [pc, #420]	; (42037c <draw_cursors+0x1e0>)
  4201d8:	4798      	blx	r3
    lv_draw_rect_dsc_init(&point_dsc);
  4201da:	a802      	add	r0, sp, #8
  4201dc:	4b68      	ldr	r3, [pc, #416]	; (420380 <draw_cursors+0x1e4>)
  4201de:	4798      	blx	r3
    point_dsc.bg_opa = line_dsc.opa;
  4201e0:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
  4201e4:	f88d 3014 	strb.w	r3, [sp, #20]
    point_dsc.radius = LV_RADIUS_CIRCLE;
  4201e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
  4201ec:	f8ad 3008 	strh.w	r3, [sp, #8]
  4201f0:	2203      	movs	r2, #3
  4201f2:	4611      	mov	r1, r2
  4201f4:	4620      	mov	r0, r4
  4201f6:	4b63      	ldr	r3, [pc, #396]	; (420384 <draw_cursors+0x1e8>)
  4201f8:	4798      	blx	r3
  4201fa:	4607      	mov	r7, r0
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  4201fc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
  420200:	2b00      	cmp	r3, #0
  420202:	db0d      	blt.n	420220 <draw_cursors+0x84>
  420204:	ebb7 0f63 	cmp.w	r7, r3, asr #1
  420208:	dd05      	ble.n	420216 <draw_cursors+0x7a>
  42020a:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
  42020e:	f043 0310 	orr.w	r3, r3, #16
  420212:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    _LV_LL_READ_BACK(ext->cursors_ll, cursor) {
  420216:	4630      	mov	r0, r6
  420218:	4b5b      	ldr	r3, [pc, #364]	; (420388 <draw_cursors+0x1ec>)
  42021a:	4798      	blx	r3
  42021c:	4604      	mov	r4, r0
  42021e:	e06a      	b.n	4202f6 <draw_cursors+0x15a>
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  420220:	3301      	adds	r3, #1
  420222:	e7ef      	b.n	420204 <draw_cursors+0x68>
            p1.x = series_area->x1 + cursor->point.x;
  420224:	882b      	ldrh	r3, [r5, #0]
  420226:	8822      	ldrh	r2, [r4, #0]
  420228:	4413      	add	r3, r2
  42022a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            p1.y = series_area->y1 + cursor->point.y;
  42022e:	886b      	ldrh	r3, [r5, #2]
  420230:	8862      	ldrh	r2, [r4, #2]
  420232:	4413      	add	r3, r2
  420234:	b21b      	sxth	r3, r3
  420236:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            p2.x = series_area->x2;
  42023a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  42023e:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            p2.y = p1.y;
  420242:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  420246:	ab17      	add	r3, sp, #92	; 0x5c
  420248:	aa1c      	add	r2, sp, #112	; 0x70
  42024a:	a91a      	add	r1, sp, #104	; 0x68
  42024c:	a81b      	add	r0, sp, #108	; 0x6c
  42024e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 420394 <draw_cursors+0x1f8>
  420252:	47c8      	blx	r9
  420254:	e05b      	b.n	42030e <draw_cursors+0x172>
            p1.x = series_area->x1 + cursor->point.x;
  420256:	882b      	ldrh	r3, [r5, #0]
  420258:	8822      	ldrh	r2, [r4, #0]
  42025a:	4413      	add	r3, r2
  42025c:	b21b      	sxth	r3, r3
  42025e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            p1.y = series_area->y1;
  420262:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
  420266:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            p2.x = p1.x;
  42026a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = series_area->y1 + cursor->point.y;
  42026e:	886b      	ldrh	r3, [r5, #2]
  420270:	8862      	ldrh	r2, [r4, #2]
  420272:	4413      	add	r3, r2
  420274:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  420278:	ab17      	add	r3, sp, #92	; 0x5c
  42027a:	aa1c      	add	r2, sp, #112	; 0x70
  42027c:	a91a      	add	r1, sp, #104	; 0x68
  42027e:	a81b      	add	r0, sp, #108	; 0x6c
  420280:	f8df 9110 	ldr.w	r9, [pc, #272]	; 420394 <draw_cursors+0x1f8>
  420284:	47c8      	blx	r9
  420286:	e046      	b.n	420316 <draw_cursors+0x17a>
            p1.x = series_area->x1;
  420288:	f9b5 2000 	ldrsh.w	r2, [r5]
  42028c:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            p1.y = series_area->y1 + cursor->point.y;
  420290:	886b      	ldrh	r3, [r5, #2]
  420292:	8861      	ldrh	r1, [r4, #2]
  420294:	440b      	add	r3, r1
  420296:	b21b      	sxth	r3, r3
  420298:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            p2.x = p1.x + cursor->point.x;
  42029c:	8821      	ldrh	r1, [r4, #0]
  42029e:	fa11 f282 	uxtah	r2, r1, r2
  4202a2:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            p2.y = p1.y;
  4202a6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  4202aa:	ab17      	add	r3, sp, #92	; 0x5c
  4202ac:	aa1c      	add	r2, sp, #112	; 0x70
  4202ae:	a91a      	add	r1, sp, #104	; 0x68
  4202b0:	a81b      	add	r0, sp, #108	; 0x6c
  4202b2:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 420394 <draw_cursors+0x1f8>
  4202b6:	47c8      	blx	r9
  4202b8:	e031      	b.n	42031e <draw_cursors+0x182>
            p1.x = series_area->x1 + cursor->point.x;
  4202ba:	882b      	ldrh	r3, [r5, #0]
  4202bc:	8822      	ldrh	r2, [r4, #0]
  4202be:	4413      	add	r3, r2
  4202c0:	b21b      	sxth	r3, r3
  4202c2:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            p1.y = series_area->y1 + cursor->point.y;
  4202c6:	886a      	ldrh	r2, [r5, #2]
  4202c8:	8861      	ldrh	r1, [r4, #2]
  4202ca:	440a      	add	r2, r1
  4202cc:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            p2.x = p1.x;
  4202d0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = series_area->y2;
  4202d4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  4202d8:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  4202dc:	ab17      	add	r3, sp, #92	; 0x5c
  4202de:	aa1c      	add	r2, sp, #112	; 0x70
  4202e0:	a91a      	add	r1, sp, #104	; 0x68
  4202e2:	a81b      	add	r0, sp, #108	; 0x6c
  4202e4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 420394 <draw_cursors+0x1f8>
  4202e8:	47c8      	blx	r9
  4202ea:	e01c      	b.n	420326 <draw_cursors+0x18a>
    _LV_LL_READ_BACK(ext->cursors_ll, cursor) {
  4202ec:	4621      	mov	r1, r4
  4202ee:	4630      	mov	r0, r6
  4202f0:	4b26      	ldr	r3, [pc, #152]	; (42038c <draw_cursors+0x1f0>)
  4202f2:	4798      	blx	r3
  4202f4:	4604      	mov	r4, r0
  4202f6:	2c00      	cmp	r4, #0
  4202f8:	f43f af5a 	beq.w	4201b0 <draw_cursors+0x14>
        line_dsc.color = cursor->color;
  4202fc:	88a3      	ldrh	r3, [r4, #4]
  4202fe:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        point_dsc.bg_color = cursor->color;
  420302:	f8ad 300a 	strh.w	r3, [sp, #10]
        if(cursor->axes & LV_CHART_CURSOR_RIGHT) {
  420306:	79a3      	ldrb	r3, [r4, #6]
  420308:	f013 0f01 	tst.w	r3, #1
  42030c:	d18a      	bne.n	420224 <draw_cursors+0x88>
        if(cursor->axes & LV_CHART_CURSOR_UP) {
  42030e:	79a3      	ldrb	r3, [r4, #6]
  420310:	f013 0f02 	tst.w	r3, #2
  420314:	d19f      	bne.n	420256 <draw_cursors+0xba>
        if(cursor->axes & LV_CHART_CURSOR_LEFT) {
  420316:	79a3      	ldrb	r3, [r4, #6]
  420318:	f013 0f04 	tst.w	r3, #4
  42031c:	d1b4      	bne.n	420288 <draw_cursors+0xec>
        if(cursor->axes & LV_CHART_CURSOR_DOWN) {
  42031e:	79a3      	ldrb	r3, [r4, #6]
  420320:	f013 0f08 	tst.w	r3, #8
  420324:	d1c9      	bne.n	4202ba <draw_cursors+0x11e>
        if(point_radius) {
  420326:	2f00      	cmp	r7, #0
  420328:	d0e0      	beq.n	4202ec <draw_cursors+0x150>
            point_area.x1 = series_area->x1 + cursor->point.x - point_radius;
  42032a:	882a      	ldrh	r2, [r5, #0]
  42032c:	8823      	ldrh	r3, [r4, #0]
  42032e:	4413      	add	r3, r2
  420330:	b29b      	uxth	r3, r3
  420332:	b2b9      	uxth	r1, r7
  420334:	1a5b      	subs	r3, r3, r1
  420336:	f8ad 3000 	strh.w	r3, [sp]
            point_area.x2 = series_area->x1 + cursor->point.x + point_radius;
  42033a:	8823      	ldrh	r3, [r4, #0]
  42033c:	441a      	add	r2, r3
  42033e:	fa11 f282 	uxtah	r2, r1, r2
  420342:	f8ad 2004 	strh.w	r2, [sp, #4]
            point_area.y1 = series_area->y1 + cursor->point.y - point_radius;
  420346:	886a      	ldrh	r2, [r5, #2]
  420348:	8863      	ldrh	r3, [r4, #2]
  42034a:	4413      	add	r3, r2
  42034c:	b29b      	uxth	r3, r3
  42034e:	1a5b      	subs	r3, r3, r1
  420350:	f8ad 3002 	strh.w	r3, [sp, #2]
            point_area.y2 = series_area->y1 + cursor->point.y + point_radius;
  420354:	8863      	ldrh	r3, [r4, #2]
  420356:	441a      	add	r2, r3
  420358:	fa11 f282 	uxtah	r2, r1, r2
  42035c:	f8ad 2006 	strh.w	r2, [sp, #6]
            lv_draw_rect(&point_area, clip_area, &point_dsc);
  420360:	aa02      	add	r2, sp, #8
  420362:	4641      	mov	r1, r8
  420364:	4668      	mov	r0, sp
  420366:	4b0a      	ldr	r3, [pc, #40]	; (420390 <draw_cursors+0x1f4>)
  420368:	4798      	blx	r3
  42036a:	e7bf      	b.n	4202ec <draw_cursors+0x150>
  42036c:	004155b3 	.word	0x004155b3
  420370:	00408095 	.word	0x00408095
  420374:	00416431 	.word	0x00416431
  420378:	0040ed25 	.word	0x0040ed25
  42037c:	00408ae5 	.word	0x00408ae5
  420380:	0041245d 	.word	0x0041245d
  420384:	00407445 	.word	0x00407445
  420388:	00416193 	.word	0x00416193
  42038c:	004161ab 	.word	0x004161ab
  420390:	004124a9 	.word	0x004124a9
  420394:	0040ed41 	.word	0x0040ed41

00420398 <lv_chart_signal>:
{
  420398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42039a:	4607      	mov	r7, r0
  42039c:	460c      	mov	r4, r1
  42039e:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  4203a0:	2908      	cmp	r1, #8
  4203a2:	d007      	beq.n	4203b4 <lv_chart_signal+0x1c>
    res = ancestor_signal(chart, sign, param);
  4203a4:	4b23      	ldr	r3, [pc, #140]	; (420434 <lv_chart_signal+0x9c>)
  4203a6:	681b      	ldr	r3, [r3, #0]
  4203a8:	4798      	blx	r3
  4203aa:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  4203ac:	2801      	cmp	r0, #1
  4203ae:	d010      	beq.n	4203d2 <lv_chart_signal+0x3a>
}
  4203b0:	4630      	mov	r0, r6
  4203b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        info->result = lv_chart_get_style(chart, info->part);
  4203b4:	7811      	ldrb	r1, [r2, #0]
  4203b6:	4b20      	ldr	r3, [pc, #128]	; (420438 <lv_chart_signal+0xa0>)
  4203b8:	4798      	blx	r3
  4203ba:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  4203bc:	b108      	cbz	r0, 4203c2 <lv_chart_signal+0x2a>
  4203be:	2601      	movs	r6, #1
  4203c0:	e7f6      	b.n	4203b0 <lv_chart_signal+0x18>
        else return ancestor_signal(chart, sign, param);
  4203c2:	4b1c      	ldr	r3, [pc, #112]	; (420434 <lv_chart_signal+0x9c>)
  4203c4:	681b      	ldr	r3, [r3, #0]
  4203c6:	462a      	mov	r2, r5
  4203c8:	4621      	mov	r1, r4
  4203ca:	4638      	mov	r0, r7
  4203cc:	4798      	blx	r3
  4203ce:	4606      	mov	r6, r0
  4203d0:	e7ee      	b.n	4203b0 <lv_chart_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4203d2:	2c07      	cmp	r4, #7
  4203d4:	d005      	beq.n	4203e2 <lv_chart_signal+0x4a>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4203d6:	4638      	mov	r0, r7
  4203d8:	4b18      	ldr	r3, [pc, #96]	; (42043c <lv_chart_signal+0xa4>)
  4203da:	4798      	blx	r3
  4203dc:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  4203de:	b16c      	cbz	r4, 4203fc <lv_chart_signal+0x64>
  4203e0:	e7e6      	b.n	4203b0 <lv_chart_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4203e2:	4917      	ldr	r1, [pc, #92]	; (420440 <lv_chart_signal+0xa8>)
  4203e4:	4628      	mov	r0, r5
  4203e6:	4b17      	ldr	r3, [pc, #92]	; (420444 <lv_chart_signal+0xac>)
  4203e8:	4798      	blx	r3
  4203ea:	4606      	mov	r6, r0
  4203ec:	e7e0      	b.n	4203b0 <lv_chart_signal+0x18>
            _lv_ll_remove(&ext->series_ll, ser);
  4203ee:	4621      	mov	r1, r4
  4203f0:	4628      	mov	r0, r5
  4203f2:	4b15      	ldr	r3, [pc, #84]	; (420448 <lv_chart_signal+0xb0>)
  4203f4:	4798      	blx	r3
            lv_mem_free(ser);
  4203f6:	4620      	mov	r0, r4
  4203f8:	4b14      	ldr	r3, [pc, #80]	; (42044c <lv_chart_signal+0xb4>)
  4203fa:	4798      	blx	r3
        while(ext->series_ll.head != NULL) {
  4203fc:	686b      	ldr	r3, [r5, #4]
  4203fe:	b15b      	cbz	r3, 420418 <lv_chart_signal+0x80>
            ser = _lv_ll_get_head(&ext->series_ll);
  420400:	4628      	mov	r0, r5
  420402:	4b13      	ldr	r3, [pc, #76]	; (420450 <lv_chart_signal+0xb8>)
  420404:	4798      	blx	r3
  420406:	4604      	mov	r4, r0
            if(!ser->ext_buf_assigned) lv_mem_free(ser->points);
  420408:	7a03      	ldrb	r3, [r0, #8]
  42040a:	f013 0f01 	tst.w	r3, #1
  42040e:	d1ee      	bne.n	4203ee <lv_chart_signal+0x56>
  420410:	6800      	ldr	r0, [r0, #0]
  420412:	4b0e      	ldr	r3, [pc, #56]	; (42044c <lv_chart_signal+0xb4>)
  420414:	4798      	blx	r3
  420416:	e7ea      	b.n	4203ee <lv_chart_signal+0x56>
        _lv_ll_clear(&ext->series_ll);
  420418:	4628      	mov	r0, r5
  42041a:	4b0e      	ldr	r3, [pc, #56]	; (420454 <lv_chart_signal+0xbc>)
  42041c:	4798      	blx	r3
        lv_obj_clean_style_list(chart, LV_CHART_PART_SERIES);
  42041e:	2102      	movs	r1, #2
  420420:	4638      	mov	r0, r7
  420422:	4c0d      	ldr	r4, [pc, #52]	; (420458 <lv_chart_signal+0xc0>)
  420424:	47a0      	blx	r4
        lv_obj_clean_style_list(chart, LV_CHART_PART_CURSOR);
  420426:	2103      	movs	r1, #3
  420428:	4638      	mov	r0, r7
  42042a:	47a0      	blx	r4
        lv_obj_clean_style_list(chart, LV_CHART_PART_SERIES_BG);
  42042c:	2101      	movs	r1, #1
  42042e:	4638      	mov	r0, r7
  420430:	47a0      	blx	r4
  420432:	e7bd      	b.n	4203b0 <lv_chart_signal+0x18>
  420434:	20414864 	.word	0x20414864
  420438:	0041f3a5 	.word	0x0041f3a5
  42043c:	00408095 	.word	0x00408095
  420440:	0042f8c0 	.word	0x0042f8c0
  420444:	00408321 	.word	0x00408321
  420448:	00416245 	.word	0x00416245
  42044c:	00416681 	.word	0x00416681
  420450:	00416189 	.word	0x00416189
  420454:	004162dd 	.word	0x004162dd
  420458:	00405cd5 	.word	0x00405cd5

0042045c <lv_chart_create>:
{
  42045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  420460:	b083      	sub	sp, #12
  420462:	9100      	str	r1, [sp, #0]
    lv_obj_t * chart = lv_obj_create(par, copy);
  420464:	4b78      	ldr	r3, [pc, #480]	; (420648 <lv_chart_create+0x1ec>)
  420466:	4798      	blx	r3
  420468:	4605      	mov	r5, r0
    LV_ASSERT_MEM(chart);
  42046a:	4b78      	ldr	r3, [pc, #480]	; (42064c <lv_chart_create+0x1f0>)
  42046c:	4798      	blx	r3
  42046e:	b180      	cbz	r0, 420492 <lv_chart_create+0x36>
    if(chart == NULL) return NULL;
  420470:	2d00      	cmp	r5, #0
  420472:	f000 80e5 	beq.w	420640 <lv_chart_create+0x1e4>
    lv_chart_ext_t * ext = lv_obj_allocate_ext_attr(chart, sizeof(lv_chart_ext_t));
  420476:	215c      	movs	r1, #92	; 0x5c
  420478:	4628      	mov	r0, r5
  42047a:	4b75      	ldr	r3, [pc, #468]	; (420650 <lv_chart_create+0x1f4>)
  42047c:	4798      	blx	r3
  42047e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  420480:	4b72      	ldr	r3, [pc, #456]	; (42064c <lv_chart_create+0x1f0>)
  420482:	4798      	blx	r3
  420484:	b958      	cbnz	r0, 42049e <lv_chart_create+0x42>
  420486:	4622      	mov	r2, r4
  420488:	2300      	movs	r3, #0
  42048a:	4872      	ldr	r0, [pc, #456]	; (420654 <lv_chart_create+0x1f8>)
  42048c:	4972      	ldr	r1, [pc, #456]	; (420658 <lv_chart_create+0x1fc>)
  42048e:	4788      	blx	r1
  420490:	e7fe      	b.n	420490 <lv_chart_create+0x34>
    LV_ASSERT_MEM(chart);
  420492:	462a      	mov	r2, r5
  420494:	2300      	movs	r3, #0
  420496:	486f      	ldr	r0, [pc, #444]	; (420654 <lv_chart_create+0x1f8>)
  420498:	496f      	ldr	r1, [pc, #444]	; (420658 <lv_chart_create+0x1fc>)
  42049a:	4788      	blx	r1
  42049c:	e7fe      	b.n	42049c <lv_chart_create+0x40>
    if(ext == NULL) {
  42049e:	b14c      	cbz	r4, 4204b4 <lv_chart_create+0x58>
    _lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
  4204a0:	210c      	movs	r1, #12
  4204a2:	4620      	mov	r0, r4
  4204a4:	4e6d      	ldr	r6, [pc, #436]	; (42065c <lv_chart_create+0x200>)
  4204a6:	47b0      	blx	r6
    _lv_ll_init(&ext->cursors_ll, sizeof(lv_chart_cursor_t));
  4204a8:	2108      	movs	r1, #8
  4204aa:	f104 000c 	add.w	r0, r4, #12
  4204ae:	47b0      	blx	r6
    for(i = 0; i < _LV_CHART_AXIS_LAST; i++) {
  4204b0:	2300      	movs	r3, #0
  4204b2:	e00f      	b.n	4204d4 <lv_chart_create+0x78>
        lv_obj_del(chart);
  4204b4:	4628      	mov	r0, r5
  4204b6:	4b6a      	ldr	r3, [pc, #424]	; (420660 <lv_chart_create+0x204>)
  4204b8:	4798      	blx	r3
        return NULL;
  4204ba:	2500      	movs	r5, #0
  4204bc:	e0c0      	b.n	420640 <lv_chart_create+0x1e4>
        ext->ymin[i]                  = LV_CHART_YMIN_DEF;
  4204be:	f103 020c 	add.w	r2, r3, #12
  4204c2:	2100      	movs	r1, #0
  4204c4:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
        ext->ymax[i]                  = LV_CHART_YMAX_DEF;
  4204c8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  4204cc:	2164      	movs	r1, #100	; 0x64
  4204ce:	8091      	strh	r1, [r2, #4]
    for(i = 0; i < _LV_CHART_AXIS_LAST; i++) {
  4204d0:	3301      	adds	r3, #1
  4204d2:	b2db      	uxtb	r3, r3
  4204d4:	2b01      	cmp	r3, #1
  4204d6:	d9f2      	bls.n	4204be <lv_chart_create+0x62>
    ext->hdiv_cnt              = LV_CHART_HDIV_DEF;
  4204d8:	2303      	movs	r3, #3
  4204da:	f884 3020 	strb.w	r3, [r4, #32]
    ext->vdiv_cnt              = LV_CHART_VDIV_DEF;
  4204de:	2305      	movs	r3, #5
  4204e0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    ext->point_cnt             = LV_CHART_PNUM_DEF;
  4204e4:	230a      	movs	r3, #10
  4204e6:	8463      	strh	r3, [r4, #34]	; 0x22
    ext->type                  = LV_CHART_TYPE_LINE;
  4204e8:	2301      	movs	r3, #1
  4204ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    ext->update_mode           = LV_CHART_UPDATE_MODE_SHIFT;
  4204ee:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
  4204f2:	f36f 0300 	bfc	r3, #0, #1
  4204f6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    _lv_memset_00(&ext->x_axis, sizeof(ext->x_axis));
  4204fa:	f104 0948 	add.w	r9, r4, #72	; 0x48
  4204fe:	2108      	movs	r1, #8
  420500:	4648      	mov	r0, r9
  420502:	4e58      	ldr	r6, [pc, #352]	; (420664 <lv_chart_create+0x208>)
  420504:	47b0      	blx	r6
    _lv_memset_00(&ext->y_axis, sizeof(ext->y_axis));
  420506:	f104 0840 	add.w	r8, r4, #64	; 0x40
  42050a:	2108      	movs	r1, #8
  42050c:	4640      	mov	r0, r8
  42050e:	47b0      	blx	r6
    _lv_memset_00(&ext->secondary_y_axis, sizeof(ext->secondary_y_axis));
  420510:	f104 0350 	add.w	r3, r4, #80	; 0x50
  420514:	9301      	str	r3, [sp, #4]
  420516:	2108      	movs	r1, #8
  420518:	4618      	mov	r0, r3
  42051a:	47b0      	blx	r6
    ext->x_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  42051c:	23ff      	movs	r3, #255	; 0xff
  42051e:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
    ext->x_axis.minor_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  420522:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    ext->y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  420526:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    ext->y_axis.minor_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  42052a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    ext->secondary_y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  42052e:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
    ext->secondary_y_axis.minor_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  420532:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
    lv_style_list_init(&ext->style_series_bg);
  420536:	f104 0b24 	add.w	fp, r4, #36	; 0x24
  42053a:	4658      	mov	r0, fp
  42053c:	4e4a      	ldr	r6, [pc, #296]	; (420668 <lv_chart_create+0x20c>)
  42053e:	47b0      	blx	r6
    lv_style_list_init(&ext->style_series);
  420540:	f104 072c 	add.w	r7, r4, #44	; 0x2c
  420544:	4638      	mov	r0, r7
  420546:	47b0      	blx	r6
    lv_style_list_init(&ext->style_cursors);
  420548:	f104 0a34 	add.w	sl, r4, #52	; 0x34
  42054c:	4650      	mov	r0, sl
  42054e:	47b0      	blx	r6
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(chart);
  420550:	4b46      	ldr	r3, [pc, #280]	; (42066c <lv_chart_create+0x210>)
  420552:	681b      	ldr	r3, [r3, #0]
  420554:	2b00      	cmp	r3, #0
  420556:	d033      	beq.n	4205c0 <lv_chart_create+0x164>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(chart);
  420558:	4b45      	ldr	r3, [pc, #276]	; (420670 <lv_chart_create+0x214>)
  42055a:	681b      	ldr	r3, [r3, #0]
  42055c:	2b00      	cmp	r3, #0
  42055e:	d035      	beq.n	4205cc <lv_chart_create+0x170>
    lv_obj_set_signal_cb(chart, lv_chart_signal);
  420560:	4944      	ldr	r1, [pc, #272]	; (420674 <lv_chart_create+0x218>)
  420562:	4628      	mov	r0, r5
  420564:	4b44      	ldr	r3, [pc, #272]	; (420678 <lv_chart_create+0x21c>)
  420566:	4798      	blx	r3
    lv_obj_set_design_cb(chart, lv_chart_design);
  420568:	4944      	ldr	r1, [pc, #272]	; (42067c <lv_chart_create+0x220>)
  42056a:	4628      	mov	r0, r5
  42056c:	4b44      	ldr	r3, [pc, #272]	; (420680 <lv_chart_create+0x224>)
  42056e:	4798      	blx	r3
    if(copy == NULL) {
  420570:	9b00      	ldr	r3, [sp, #0]
  420572:	2b00      	cmp	r3, #0
  420574:	d030      	beq.n	4205d8 <lv_chart_create+0x17c>
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
  420576:	9800      	ldr	r0, [sp, #0]
  420578:	4b42      	ldr	r3, [pc, #264]	; (420684 <lv_chart_create+0x228>)
  42057a:	4798      	blx	r3
  42057c:	4606      	mov	r6, r0
        lv_style_list_copy(&ext->style_series, &ext_copy->style_series);
  42057e:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  420582:	4638      	mov	r0, r7
  420584:	4f40      	ldr	r7, [pc, #256]	; (420688 <lv_chart_create+0x22c>)
  420586:	47b8      	blx	r7
        lv_style_list_copy(&ext->style_series_bg, &ext_copy->style_series_bg);
  420588:	f106 0124 	add.w	r1, r6, #36	; 0x24
  42058c:	4658      	mov	r0, fp
  42058e:	47b8      	blx	r7
        lv_style_list_copy(&ext->style_cursors, &ext_copy->style_cursors);
  420590:	f106 0134 	add.w	r1, r6, #52	; 0x34
  420594:	4650      	mov	r0, sl
  420596:	47b8      	blx	r7
        ext->type       = ext_copy->type;
  420598:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
  42059c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        ext->hdiv_cnt   = ext_copy->hdiv_cnt;
  4205a0:	f896 3020 	ldrb.w	r3, [r6, #32]
  4205a4:	f884 3020 	strb.w	r3, [r4, #32]
        ext->vdiv_cnt   = ext_copy->vdiv_cnt;
  4205a8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  4205ac:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        ext->point_cnt  = ext_copy->point_cnt;
  4205b0:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  4205b2:	8463      	strh	r3, [r4, #34]	; 0x22
        _lv_memcpy_small(ext->ymin, ext_copy->ymin, sizeof(ext->ymin));
  4205b4:	f106 0118 	add.w	r1, r6, #24
    uint8_t * d8 = (uint8_t *)dst;
  4205b8:	f104 0218 	add.w	r2, r4, #24
  4205bc:	2304      	movs	r3, #4
  4205be:	e01c      	b.n	4205fa <lv_chart_create+0x19e>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(chart);
  4205c0:	4628      	mov	r0, r5
  4205c2:	4b32      	ldr	r3, [pc, #200]	; (42068c <lv_chart_create+0x230>)
  4205c4:	4798      	blx	r3
  4205c6:	4b29      	ldr	r3, [pc, #164]	; (42066c <lv_chart_create+0x210>)
  4205c8:	6018      	str	r0, [r3, #0]
  4205ca:	e7c5      	b.n	420558 <lv_chart_create+0xfc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(chart);
  4205cc:	4628      	mov	r0, r5
  4205ce:	4b30      	ldr	r3, [pc, #192]	; (420690 <lv_chart_create+0x234>)
  4205d0:	4798      	blx	r3
  4205d2:	4b27      	ldr	r3, [pc, #156]	; (420670 <lv_chart_create+0x214>)
  4205d4:	6018      	str	r0, [r3, #0]
  4205d6:	e7c3      	b.n	420560 <lv_chart_create+0x104>
        lv_obj_set_size(chart, LV_DPI * 3, LV_DPI * 2);
  4205d8:	f44f 7294 	mov.w	r2, #296	; 0x128
  4205dc:	f44f 71de 	mov.w	r1, #444	; 0x1bc
  4205e0:	4628      	mov	r0, r5
  4205e2:	4b2c      	ldr	r3, [pc, #176]	; (420694 <lv_chart_create+0x238>)
  4205e4:	4798      	blx	r3
        lv_theme_apply(chart, LV_THEME_CHART);
  4205e6:	210a      	movs	r1, #10
  4205e8:	4628      	mov	r0, r5
  4205ea:	4b2b      	ldr	r3, [pc, #172]	; (420698 <lv_chart_create+0x23c>)
  4205ec:	4798      	blx	r3
  4205ee:	e027      	b.n	420640 <lv_chart_create+0x1e4>
        *d8 = *s8;
  4205f0:	f811 0b01 	ldrb.w	r0, [r1], #1
  4205f4:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4205f8:	3b01      	subs	r3, #1
    while(len) {
  4205fa:	2b00      	cmp	r3, #0
  4205fc:	d1f8      	bne.n	4205f0 <lv_chart_create+0x194>
        _lv_memcpy_small(ext->ymax, ext_copy->ymax, sizeof(ext->ymax));
  4205fe:	f106 021c 	add.w	r2, r6, #28
    uint8_t * d8 = (uint8_t *)dst;
  420602:	341c      	adds	r4, #28
  420604:	2304      	movs	r3, #4
  420606:	e004      	b.n	420612 <lv_chart_create+0x1b6>
        *d8 = *s8;
  420608:	f812 1b01 	ldrb.w	r1, [r2], #1
  42060c:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  420610:	3b01      	subs	r3, #1
    while(len) {
  420612:	2b00      	cmp	r3, #0
  420614:	d1f8      	bne.n	420608 <lv_chart_create+0x1ac>
        _lv_memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
  420616:	2208      	movs	r2, #8
  420618:	f106 0148 	add.w	r1, r6, #72	; 0x48
  42061c:	4648      	mov	r0, r9
  42061e:	4c1f      	ldr	r4, [pc, #124]	; (42069c <lv_chart_create+0x240>)
  420620:	47a0      	blx	r4
        _lv_memcpy(&ext->y_axis, &ext_copy->y_axis, sizeof(lv_chart_axis_cfg_t));
  420622:	2208      	movs	r2, #8
  420624:	f106 0140 	add.w	r1, r6, #64	; 0x40
  420628:	4640      	mov	r0, r8
  42062a:	47a0      	blx	r4
        _lv_memcpy(&ext->secondary_y_axis, &ext_copy->secondary_y_axis, sizeof(lv_chart_axis_cfg_t));
  42062c:	2208      	movs	r2, #8
  42062e:	f106 0150 	add.w	r1, r6, #80	; 0x50
  420632:	9801      	ldr	r0, [sp, #4]
  420634:	47a0      	blx	r4
        lv_obj_refresh_style(chart, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  420636:	22ff      	movs	r2, #255	; 0xff
  420638:	4611      	mov	r1, r2
  42063a:	4628      	mov	r0, r5
  42063c:	4b18      	ldr	r3, [pc, #96]	; (4206a0 <lv_chart_create+0x244>)
  42063e:	4798      	blx	r3
}
  420640:	4628      	mov	r0, r5
  420642:	b003      	add	sp, #12
  420644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420648:	00406815 	.word	0x00406815
  42064c:	00415e79 	.word	0x00415e79
  420650:	00405941 	.word	0x00405941
  420654:	0042c154 	.word	0x0042c154
  420658:	00415e85 	.word	0x00415e85
  42065c:	004160df 	.word	0x004160df
  420660:	004081f5 	.word	0x004081f5
  420664:	00416af1 	.word	0x00416af1
  420668:	00409de1 	.word	0x00409de1
  42066c:	20414860 	.word	0x20414860
  420670:	20414864 	.word	0x20414864
  420674:	00420399 	.word	0x00420399
  420678:	004058dd 	.word	0x004058dd
  42067c:	004208e9 	.word	0x004208e9
  420680:	00405919 	.word	0x00405919
  420684:	00408095 	.word	0x00408095
  420688:	0040acbd 	.word	0x0040acbd
  42068c:	0040806d 	.word	0x0040806d
  420690:	00408045 	.word	0x00408045
  420694:	00406c39 	.word	0x00406c39
  420698:	004182f9 	.word	0x004182f9
  42069c:	004167cd 	.word	0x004167cd
  4206a0:	00407861 	.word	0x00407861

004206a4 <lv_chart_add_series>:
{
  4206a4:	b570      	push	{r4, r5, r6, lr}
  4206a6:	4604      	mov	r4, r0
  4206a8:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  4206aa:	4b24      	ldr	r3, [pc, #144]	; (42073c <lv_chart_add_series+0x98>)
  4206ac:	4798      	blx	r3
  4206ae:	b928      	cbnz	r0, 4206bc <lv_chart_add_series+0x18>
  4206b0:	4622      	mov	r2, r4
  4206b2:	2300      	movs	r3, #0
  4206b4:	4822      	ldr	r0, [pc, #136]	; (420740 <lv_chart_add_series+0x9c>)
  4206b6:	4923      	ldr	r1, [pc, #140]	; (420744 <lv_chart_add_series+0xa0>)
  4206b8:	4788      	blx	r1
  4206ba:	e7fe      	b.n	4206ba <lv_chart_add_series+0x16>
    lv_chart_ext_t * ext    = lv_obj_get_ext_attr(chart);
  4206bc:	4620      	mov	r0, r4
  4206be:	4b22      	ldr	r3, [pc, #136]	; (420748 <lv_chart_add_series+0xa4>)
  4206c0:	4798      	blx	r3
  4206c2:	4605      	mov	r5, r0
    lv_chart_series_t * ser = _lv_ll_ins_head(&ext->series_ll);
  4206c4:	4b21      	ldr	r3, [pc, #132]	; (42074c <lv_chart_add_series+0xa8>)
  4206c6:	4798      	blx	r3
  4206c8:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ser);
  4206ca:	4b1c      	ldr	r3, [pc, #112]	; (42073c <lv_chart_add_series+0x98>)
  4206cc:	4798      	blx	r3
  4206ce:	b1a8      	cbz	r0, 4206fc <lv_chart_add_series+0x58>
    if(ser == NULL) return NULL;
  4206d0:	b194      	cbz	r4, 4206f8 <lv_chart_add_series+0x54>
    ser->color  = color;
  4206d2:	80a6      	strh	r6, [r4, #4]
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
  4206d4:	8c68      	ldrh	r0, [r5, #34]	; 0x22
  4206d6:	0040      	lsls	r0, r0, #1
  4206d8:	4b1d      	ldr	r3, [pc, #116]	; (420750 <lv_chart_add_series+0xac>)
  4206da:	4798      	blx	r3
  4206dc:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(ser->points);
  4206de:	4b17      	ldr	r3, [pc, #92]	; (42073c <lv_chart_add_series+0x98>)
  4206e0:	4798      	blx	r3
  4206e2:	b188      	cbz	r0, 420708 <lv_chart_add_series+0x64>
    if(ser->points == NULL) {
  4206e4:	6821      	ldr	r1, [r4, #0]
  4206e6:	b9a9      	cbnz	r1, 420714 <lv_chart_add_series+0x70>
        _lv_ll_remove(&ext->series_ll, ser);
  4206e8:	4621      	mov	r1, r4
  4206ea:	4628      	mov	r0, r5
  4206ec:	4b19      	ldr	r3, [pc, #100]	; (420754 <lv_chart_add_series+0xb0>)
  4206ee:	4798      	blx	r3
        lv_mem_free(ser);
  4206f0:	4620      	mov	r0, r4
  4206f2:	4b19      	ldr	r3, [pc, #100]	; (420758 <lv_chart_add_series+0xb4>)
  4206f4:	4798      	blx	r3
        return NULL;
  4206f6:	2400      	movs	r4, #0
}
  4206f8:	4620      	mov	r0, r4
  4206fa:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(ser);
  4206fc:	4622      	mov	r2, r4
  4206fe:	2300      	movs	r3, #0
  420700:	4816      	ldr	r0, [pc, #88]	; (42075c <lv_chart_add_series+0xb8>)
  420702:	4910      	ldr	r1, [pc, #64]	; (420744 <lv_chart_add_series+0xa0>)
  420704:	4788      	blx	r1
  420706:	e7fe      	b.n	420706 <lv_chart_add_series+0x62>
    LV_ASSERT_MEM(ser->points);
  420708:	6822      	ldr	r2, [r4, #0]
  42070a:	2300      	movs	r3, #0
  42070c:	4813      	ldr	r0, [pc, #76]	; (42075c <lv_chart_add_series+0xb8>)
  42070e:	490d      	ldr	r1, [pc, #52]	; (420744 <lv_chart_add_series+0xa0>)
  420710:	4788      	blx	r1
  420712:	e7fe      	b.n	420712 <lv_chart_add_series+0x6e>
    ser->start_point = 0;
  420714:	2300      	movs	r3, #0
  420716:	80e3      	strh	r3, [r4, #6]
    ser->ext_buf_assigned = false;
  420718:	7a22      	ldrb	r2, [r4, #8]
    ser->y_axis = LV_CHART_AXIS_PRIMARY_Y;
  42071a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  42071e:	f363 0282 	bfi	r2, r3, #2, #1
  420722:	7222      	strb	r2, [r4, #8]
    for(i = 0; i < ext->point_cnt; i++) {
  420724:	e005      	b.n	420732 <lv_chart_add_series+0x8e>
        *p_tmp = def;
  420726:	f248 32e8 	movw	r2, #33768	; 0x83e8
  42072a:	f821 2b02 	strh.w	r2, [r1], #2
    for(i = 0; i < ext->point_cnt; i++) {
  42072e:	3301      	adds	r3, #1
  420730:	b29b      	uxth	r3, r3
  420732:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
  420734:	4293      	cmp	r3, r2
  420736:	d3f6      	bcc.n	420726 <lv_chart_add_series+0x82>
  420738:	e7de      	b.n	4206f8 <lv_chart_add_series+0x54>
  42073a:	bf00      	nop
  42073c:	00415e79 	.word	0x00415e79
  420740:	0042c168 	.word	0x0042c168
  420744:	00415e85 	.word	0x00415e85
  420748:	00408095 	.word	0x00408095
  42074c:	004160f1 	.word	0x004160f1
  420750:	004165bd 	.word	0x004165bd
  420754:	00416245 	.word	0x00416245
  420758:	00416681 	.word	0x00416681
  42075c:	0042c154 	.word	0x0042c154

00420760 <lv_chart_set_div_line_count>:
{
  420760:	b570      	push	{r4, r5, r6, lr}
  420762:	4604      	mov	r4, r0
  420764:	460e      	mov	r6, r1
  420766:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420768:	4b0e      	ldr	r3, [pc, #56]	; (4207a4 <lv_chart_set_div_line_count+0x44>)
  42076a:	4798      	blx	r3
  42076c:	b928      	cbnz	r0, 42077a <lv_chart_set_div_line_count+0x1a>
  42076e:	4622      	mov	r2, r4
  420770:	2300      	movs	r3, #0
  420772:	480d      	ldr	r0, [pc, #52]	; (4207a8 <lv_chart_set_div_line_count+0x48>)
  420774:	490d      	ldr	r1, [pc, #52]	; (4207ac <lv_chart_set_div_line_count+0x4c>)
  420776:	4788      	blx	r1
  420778:	e7fe      	b.n	420778 <lv_chart_set_div_line_count+0x18>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  42077a:	4620      	mov	r0, r4
  42077c:	4b0c      	ldr	r3, [pc, #48]	; (4207b0 <lv_chart_set_div_line_count+0x50>)
  42077e:	4798      	blx	r3
    if(ext->hdiv_cnt == hdiv && ext->vdiv_cnt == vdiv) return;
  420780:	f890 3020 	ldrb.w	r3, [r0, #32]
  420784:	42b3      	cmp	r3, r6
  420786:	d007      	beq.n	420798 <lv_chart_set_div_line_count+0x38>
    ext->hdiv_cnt = hdiv;
  420788:	f880 6020 	strb.w	r6, [r0, #32]
    ext->vdiv_cnt = vdiv;
  42078c:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    lv_obj_invalidate(chart);
  420790:	4620      	mov	r0, r4
  420792:	4b08      	ldr	r3, [pc, #32]	; (4207b4 <lv_chart_set_div_line_count+0x54>)
  420794:	4798      	blx	r3
  420796:	bd70      	pop	{r4, r5, r6, pc}
    if(ext->hdiv_cnt == hdiv && ext->vdiv_cnt == vdiv) return;
  420798:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
  42079c:	42ab      	cmp	r3, r5
  42079e:	d1f3      	bne.n	420788 <lv_chart_set_div_line_count+0x28>
  4207a0:	e7f9      	b.n	420796 <lv_chart_set_div_line_count+0x36>
  4207a2:	bf00      	nop
  4207a4:	00415e79 	.word	0x00415e79
  4207a8:	0042c168 	.word	0x0042c168
  4207ac:	00415e85 	.word	0x00415e85
  4207b0:	00408095 	.word	0x00408095
  4207b4:	00405f59 	.word	0x00405f59

004207b8 <lv_chart_set_update_mode>:
{
  4207b8:	b538      	push	{r3, r4, r5, lr}
  4207ba:	4604      	mov	r4, r0
  4207bc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  4207be:	4b0e      	ldr	r3, [pc, #56]	; (4207f8 <lv_chart_set_update_mode+0x40>)
  4207c0:	4798      	blx	r3
  4207c2:	b928      	cbnz	r0, 4207d0 <lv_chart_set_update_mode+0x18>
  4207c4:	4622      	mov	r2, r4
  4207c6:	2300      	movs	r3, #0
  4207c8:	480c      	ldr	r0, [pc, #48]	; (4207fc <lv_chart_set_update_mode+0x44>)
  4207ca:	490d      	ldr	r1, [pc, #52]	; (420800 <lv_chart_set_update_mode+0x48>)
  4207cc:	4788      	blx	r1
  4207ce:	e7fe      	b.n	4207ce <lv_chart_set_update_mode+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4207d0:	4620      	mov	r0, r4
  4207d2:	4b0c      	ldr	r3, [pc, #48]	; (420804 <lv_chart_set_update_mode+0x4c>)
  4207d4:	4798      	blx	r3
    if(ext->update_mode == update_mode) return;
  4207d6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  4207da:	f003 0301 	and.w	r3, r3, #1
  4207de:	42ab      	cmp	r3, r5
  4207e0:	d008      	beq.n	4207f4 <lv_chart_set_update_mode+0x3c>
    ext->update_mode = update_mode;
  4207e2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  4207e6:	f365 0300 	bfi	r3, r5, #0, #1
  4207ea:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    lv_obj_invalidate(chart);
  4207ee:	4620      	mov	r0, r4
  4207f0:	4b05      	ldr	r3, [pc, #20]	; (420808 <lv_chart_set_update_mode+0x50>)
  4207f2:	4798      	blx	r3
  4207f4:	bd38      	pop	{r3, r4, r5, pc}
  4207f6:	bf00      	nop
  4207f8:	00415e79 	.word	0x00415e79
  4207fc:	0042c168 	.word	0x0042c168
  420800:	00415e85 	.word	0x00415e85
  420804:	00408095 	.word	0x00408095
  420808:	00405f59 	.word	0x00405f59

0042080c <lv_chart_set_ext_array>:
{
  42080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42080e:	4605      	mov	r5, r0
  420810:	460c      	mov	r4, r1
  420812:	4617      	mov	r7, r2
  420814:	461e      	mov	r6, r3
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420816:	4b15      	ldr	r3, [pc, #84]	; (42086c <lv_chart_set_ext_array+0x60>)
  420818:	4798      	blx	r3
  42081a:	b928      	cbnz	r0, 420828 <lv_chart_set_ext_array+0x1c>
  42081c:	462a      	mov	r2, r5
  42081e:	2300      	movs	r3, #0
  420820:	4813      	ldr	r0, [pc, #76]	; (420870 <lv_chart_set_ext_array+0x64>)
  420822:	4914      	ldr	r1, [pc, #80]	; (420874 <lv_chart_set_ext_array+0x68>)
  420824:	4788      	blx	r1
  420826:	e7fe      	b.n	420826 <lv_chart_set_ext_array+0x1a>
    LV_ASSERT_NULL(ser);
  420828:	4620      	mov	r0, r4
  42082a:	4b10      	ldr	r3, [pc, #64]	; (42086c <lv_chart_set_ext_array+0x60>)
  42082c:	4798      	blx	r3
  42082e:	b120      	cbz	r0, 42083a <lv_chart_set_ext_array+0x2e>
    if(chart == NULL || ser == NULL) return;
  420830:	2c00      	cmp	r4, #0
  420832:	bf18      	it	ne
  420834:	2d00      	cmpne	r5, #0
  420836:	d106      	bne.n	420846 <lv_chart_set_ext_array+0x3a>
  420838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(ser);
  42083a:	4622      	mov	r2, r4
  42083c:	2300      	movs	r3, #0
  42083e:	480c      	ldr	r0, [pc, #48]	; (420870 <lv_chart_set_ext_array+0x64>)
  420840:	490c      	ldr	r1, [pc, #48]	; (420874 <lv_chart_set_ext_array+0x68>)
  420842:	4788      	blx	r1
  420844:	e7fe      	b.n	420844 <lv_chart_set_ext_array+0x38>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420846:	4628      	mov	r0, r5
  420848:	4b0b      	ldr	r3, [pc, #44]	; (420878 <lv_chart_set_ext_array+0x6c>)
  42084a:	4798      	blx	r3
  42084c:	4605      	mov	r5, r0
    if(!ser->ext_buf_assigned && ser->points) lv_mem_free(ser->points);
  42084e:	7a23      	ldrb	r3, [r4, #8]
  420850:	f013 0f01 	tst.w	r3, #1
  420854:	d103      	bne.n	42085e <lv_chart_set_ext_array+0x52>
  420856:	6820      	ldr	r0, [r4, #0]
  420858:	b108      	cbz	r0, 42085e <lv_chart_set_ext_array+0x52>
  42085a:	4b08      	ldr	r3, [pc, #32]	; (42087c <lv_chart_set_ext_array+0x70>)
  42085c:	4798      	blx	r3
    ser->ext_buf_assigned = true;
  42085e:	7a23      	ldrb	r3, [r4, #8]
  420860:	f043 0301 	orr.w	r3, r3, #1
  420864:	7223      	strb	r3, [r4, #8]
    ser->points = array;
  420866:	6027      	str	r7, [r4, #0]
    ext->point_cnt = point_cnt;
  420868:	846e      	strh	r6, [r5, #34]	; 0x22
  42086a:	e7e5      	b.n	420838 <lv_chart_set_ext_array+0x2c>
  42086c:	00415e79 	.word	0x00415e79
  420870:	0042c168 	.word	0x0042c168
  420874:	00415e85 	.word	0x00415e85
  420878:	00408095 	.word	0x00408095
  42087c:	00416681 	.word	0x00416681

00420880 <lv_chart_get_series_area>:
{
  420880:	b570      	push	{r4, r5, r6, lr}
  420882:	4605      	mov	r5, r0
  420884:	460c      	mov	r4, r1
    lv_area_copy(series_area, &chart->coords);
  420886:	f100 0110 	add.w	r1, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
  42088a:	4622      	mov	r2, r4
  42088c:	2308      	movs	r3, #8
  42088e:	e004      	b.n	42089a <lv_chart_get_series_area+0x1a>
        *d8 = *s8;
  420890:	f811 0b01 	ldrb.w	r0, [r1], #1
  420894:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  420898:	3b01      	subs	r3, #1
    while(len) {
  42089a:	2b00      	cmp	r3, #0
  42089c:	d1f8      	bne.n	420890 <lv_chart_get_series_area+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  42089e:	2212      	movs	r2, #18
  4208a0:	2100      	movs	r1, #0
  4208a2:	4628      	mov	r0, r5
  4208a4:	4e0f      	ldr	r6, [pc, #60]	; (4208e4 <lv_chart_get_series_area+0x64>)
  4208a6:	47b0      	blx	r6
    series_area->x1 += lv_obj_get_style_pad_left(chart, LV_CHART_PART_BG);
  4208a8:	8823      	ldrh	r3, [r4, #0]
  4208aa:	fa13 f080 	uxtah	r0, r3, r0
  4208ae:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4208b0:	2213      	movs	r2, #19
  4208b2:	2100      	movs	r1, #0
  4208b4:	4628      	mov	r0, r5
  4208b6:	47b0      	blx	r6
    series_area->x2 -= lv_obj_get_style_pad_right(chart, LV_CHART_PART_BG);
  4208b8:	b280      	uxth	r0, r0
  4208ba:	88a3      	ldrh	r3, [r4, #4]
  4208bc:	1a18      	subs	r0, r3, r0
  4208be:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4208c0:	2210      	movs	r2, #16
  4208c2:	2100      	movs	r1, #0
  4208c4:	4628      	mov	r0, r5
  4208c6:	47b0      	blx	r6
    series_area->y1 += lv_obj_get_style_pad_top(chart, LV_CHART_PART_BG);
  4208c8:	8863      	ldrh	r3, [r4, #2]
  4208ca:	fa13 f080 	uxtah	r0, r3, r0
  4208ce:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4208d0:	2211      	movs	r2, #17
  4208d2:	2100      	movs	r1, #0
  4208d4:	4628      	mov	r0, r5
  4208d6:	47b0      	blx	r6
    series_area->y2 -= lv_obj_get_style_pad_bottom(chart, LV_CHART_PART_BG);
  4208d8:	b280      	uxth	r0, r0
  4208da:	88e3      	ldrh	r3, [r4, #6]
  4208dc:	1a18      	subs	r0, r3, r0
  4208de:	80e0      	strh	r0, [r4, #6]
  4208e0:	bd70      	pop	{r4, r5, r6, pc}
  4208e2:	bf00      	nop
  4208e4:	00407445 	.word	0x00407445

004208e8 <lv_chart_design>:
{
  4208e8:	b570      	push	{r4, r5, r6, lr}
  4208ea:	b098      	sub	sp, #96	; 0x60
  4208ec:	4604      	mov	r4, r0
  4208ee:	460d      	mov	r5, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  4208f0:	2a02      	cmp	r2, #2
  4208f2:	d003      	beq.n	4208fc <lv_chart_design+0x14>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  4208f4:	b132      	cbz	r2, 420904 <lv_chart_design+0x1c>
    return LV_DESIGN_RES_OK;
  4208f6:	2000      	movs	r0, #0
}
  4208f8:	b018      	add	sp, #96	; 0x60
  4208fa:	bd70      	pop	{r4, r5, r6, pc}
        return ancestor_design(chart, clip_area, mode);
  4208fc:	4b20      	ldr	r3, [pc, #128]	; (420980 <lv_chart_design+0x98>)
  4208fe:	681b      	ldr	r3, [r3, #0]
  420900:	4798      	blx	r3
  420902:	e7f9      	b.n	4208f8 <lv_chart_design+0x10>
        lv_draw_rect_dsc_init(&bg_dsc);
  420904:	a803      	add	r0, sp, #12
  420906:	4b1f      	ldr	r3, [pc, #124]	; (420984 <lv_chart_design+0x9c>)
  420908:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_BG, &bg_dsc);
  42090a:	aa03      	add	r2, sp, #12
  42090c:	2100      	movs	r1, #0
  42090e:	4620      	mov	r0, r4
  420910:	4b1d      	ldr	r3, [pc, #116]	; (420988 <lv_chart_design+0xa0>)
  420912:	4798      	blx	r3
        lv_draw_rect(&chart->coords, clip_area, &bg_dsc);
  420914:	aa03      	add	r2, sp, #12
  420916:	4629      	mov	r1, r5
  420918:	f104 0010 	add.w	r0, r4, #16
  42091c:	4b1b      	ldr	r3, [pc, #108]	; (42098c <lv_chart_design+0xa4>)
  42091e:	4798      	blx	r3
        lv_chart_get_series_area(chart, &series_area);
  420920:	a901      	add	r1, sp, #4
  420922:	4620      	mov	r0, r4
  420924:	4b1a      	ldr	r3, [pc, #104]	; (420990 <lv_chart_design+0xa8>)
  420926:	4798      	blx	r3
        draw_series_bg(chart, &series_area, clip_area);
  420928:	462a      	mov	r2, r5
  42092a:	a901      	add	r1, sp, #4
  42092c:	4620      	mov	r0, r4
  42092e:	4b19      	ldr	r3, [pc, #100]	; (420994 <lv_chart_design+0xac>)
  420930:	4798      	blx	r3
        draw_axes(chart, &series_area, clip_area);
  420932:	462a      	mov	r2, r5
  420934:	a901      	add	r1, sp, #4
  420936:	4620      	mov	r0, r4
  420938:	4b17      	ldr	r3, [pc, #92]	; (420998 <lv_chart_design+0xb0>)
  42093a:	4798      	blx	r3
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  42093c:	4620      	mov	r0, r4
  42093e:	4b17      	ldr	r3, [pc, #92]	; (42099c <lv_chart_design+0xb4>)
  420940:	4798      	blx	r3
  420942:	4606      	mov	r6, r0
        if(ext->type & LV_CHART_TYPE_LINE) draw_series_line(chart, &series_area, clip_area);
  420944:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  420948:	f013 0f01 	tst.w	r3, #1
  42094c:	d10b      	bne.n	420966 <lv_chart_design+0x7e>
        if(ext->type & LV_CHART_TYPE_COLUMN) draw_series_column(chart, &series_area, clip_area);
  42094e:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
  420952:	f013 0f02 	tst.w	r3, #2
  420956:	d10c      	bne.n	420972 <lv_chart_design+0x8a>
        draw_cursors(chart, &series_area, clip_area);
  420958:	462a      	mov	r2, r5
  42095a:	a901      	add	r1, sp, #4
  42095c:	4620      	mov	r0, r4
  42095e:	4b10      	ldr	r3, [pc, #64]	; (4209a0 <lv_chart_design+0xb8>)
  420960:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  420962:	2000      	movs	r0, #0
  420964:	e7c8      	b.n	4208f8 <lv_chart_design+0x10>
        if(ext->type & LV_CHART_TYPE_LINE) draw_series_line(chart, &series_area, clip_area);
  420966:	462a      	mov	r2, r5
  420968:	a901      	add	r1, sp, #4
  42096a:	4620      	mov	r0, r4
  42096c:	4b0d      	ldr	r3, [pc, #52]	; (4209a4 <lv_chart_design+0xbc>)
  42096e:	4798      	blx	r3
  420970:	e7ed      	b.n	42094e <lv_chart_design+0x66>
        if(ext->type & LV_CHART_TYPE_COLUMN) draw_series_column(chart, &series_area, clip_area);
  420972:	462a      	mov	r2, r5
  420974:	a901      	add	r1, sp, #4
  420976:	4620      	mov	r0, r4
  420978:	4b0b      	ldr	r3, [pc, #44]	; (4209a8 <lv_chart_design+0xc0>)
  42097a:	4798      	blx	r3
  42097c:	e7ec      	b.n	420958 <lv_chart_design+0x70>
  42097e:	bf00      	nop
  420980:	20414860 	.word	0x20414860
  420984:	0041245d 	.word	0x0041245d
  420988:	0040833d 	.word	0x0040833d
  42098c:	004124a9 	.word	0x004124a9
  420990:	00420881 	.word	0x00420881
  420994:	0041f3f5 	.word	0x0041f3f5
  420998:	0041fbf9 	.word	0x0041fbf9
  42099c:	00408095 	.word	0x00408095
  4209a0:	0042019d 	.word	0x0042019d
  4209a4:	0041fdfd 	.word	0x0041fdfd
  4209a8:	0041fc25 	.word	0x0041fc25

004209ac <invalidate_lines>:
/**
 * invalid area of the new line data lines on a chart
 * @param obj pointer to chart object
 */
static void invalidate_lines(lv_obj_t * chart, uint16_t i)
{
  4209ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4209b0:	b084      	sub	sp, #16
  4209b2:	4681      	mov	r9, r0
  4209b4:	4688      	mov	r8, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4209b6:	4b3c      	ldr	r3, [pc, #240]	; (420aa8 <invalidate_lines+0xfc>)
  4209b8:	4798      	blx	r3
    if(i >= ext->point_cnt) return;
  4209ba:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  4209bc:	4543      	cmp	r3, r8
  4209be:	d96a      	bls.n	420a96 <invalidate_lines+0xea>
  4209c0:	4682      	mov	sl, r0

    lv_area_t series_area;
    lv_chart_get_series_area(chart, &series_area);
  4209c2:	a902      	add	r1, sp, #8
  4209c4:	4648      	mov	r0, r9
  4209c6:	4b39      	ldr	r3, [pc, #228]	; (420aac <invalidate_lines+0x100>)
  4209c8:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4209ca:	f8bd 400c 	ldrh.w	r4, [sp, #12]
  4209ce:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  4209d2:	1b64      	subs	r4, r4, r5
  4209d4:	b2a4      	uxth	r4, r4
  4209d6:	3401      	adds	r4, #1
  4209d8:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4209da:	2290      	movs	r2, #144	; 0x90
  4209dc:	2102      	movs	r1, #2
  4209de:	4648      	mov	r0, r9
  4209e0:	4e33      	ldr	r6, [pc, #204]	; (420ab0 <invalidate_lines+0x104>)
  4209e2:	47b0      	blx	r6
  4209e4:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  4209e6:	2203      	movs	r2, #3
  4209e8:	2102      	movs	r1, #2
  4209ea:	4648      	mov	r0, r9
  4209ec:	47b0      	blx	r6
    const uint8_t * s8 = (const uint8_t *)src;
  4209ee:	ab02      	add	r3, sp, #8
    uint8_t * d8 = (uint8_t *)dst;
  4209f0:	4669      	mov	r1, sp
  4209f2:	2208      	movs	r2, #8
    while(len) {
  4209f4:	2a00      	cmp	r2, #0
  4209f6:	d151      	bne.n	420a9c <invalidate_lines+0xf0>
    lv_style_int_t line_width = lv_obj_get_style_line_width(chart, LV_CHART_PART_SERIES);
    lv_style_int_t point_radius = lv_obj_get_style_size(chart, LV_CHART_PART_SERIES);

    lv_area_t coords;
    lv_area_copy(&coords, &series_area);
    coords.y1 -= line_width + point_radius;
  4209f8:	b2bf      	uxth	r7, r7
  4209fa:	b286      	uxth	r6, r0
  4209fc:	19bb      	adds	r3, r7, r6
  4209fe:	b29b      	uxth	r3, r3
  420a00:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  420a04:	1ad2      	subs	r2, r2, r3
  420a06:	f8ad 2002 	strh.w	r2, [sp, #2]
    coords.y2 += line_width + point_radius;
  420a0a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  420a0e:	4413      	add	r3, r2
  420a10:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(i < ext->point_cnt - 1) {
  420a14:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
  420a18:	3a01      	subs	r2, #1
  420a1a:	4590      	cmp	r8, r2
  420a1c:	da19      	bge.n	420a52 <invalidate_lines+0xa6>
        coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
  420a1e:	fb04 f308 	mul.w	r3, r4, r8
  420a22:	fb93 f3f2 	sdiv	r3, r3, r2
  420a26:	442b      	add	r3, r5
  420a28:	b29b      	uxth	r3, r3
  420a2a:	1bdb      	subs	r3, r3, r7
  420a2c:	b29b      	uxth	r3, r3
  420a2e:	1b9b      	subs	r3, r3, r6
  420a30:	f8ad 3000 	strh.w	r3, [sp]
        coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
  420a34:	fb08 4304 	mla	r3, r8, r4, r4
  420a38:	fb93 f2f2 	sdiv	r2, r3, r2
  420a3c:	442a      	add	r2, r5
  420a3e:	fa17 f282 	uxtah	r2, r7, r2
  420a42:	fa16 f282 	uxtah	r2, r6, r2
  420a46:	f8ad 2004 	strh.w	r2, [sp, #4]
        lv_obj_invalidate_area(chart, &coords);
  420a4a:	4669      	mov	r1, sp
  420a4c:	4648      	mov	r0, r9
  420a4e:	4b19      	ldr	r3, [pc, #100]	; (420ab4 <invalidate_lines+0x108>)
  420a50:	4798      	blx	r3
    }

    if(i > 0) {
  420a52:	f1b8 0f00 	cmp.w	r8, #0
  420a56:	d01e      	beq.n	420a96 <invalidate_lines+0xea>
        coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
  420a58:	f108 33ff 	add.w	r3, r8, #4294967295
  420a5c:	fb03 f304 	mul.w	r3, r3, r4
  420a60:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
  420a64:	3a01      	subs	r2, #1
  420a66:	fb93 f3f2 	sdiv	r3, r3, r2
  420a6a:	442b      	add	r3, r5
  420a6c:	b29b      	uxth	r3, r3
  420a6e:	1bdb      	subs	r3, r3, r7
  420a70:	b29b      	uxth	r3, r3
  420a72:	1b9b      	subs	r3, r3, r6
  420a74:	f8ad 3000 	strh.w	r3, [sp]
        coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
  420a78:	fb04 f408 	mul.w	r4, r4, r8
  420a7c:	fb94 f4f2 	sdiv	r4, r4, r2
  420a80:	4425      	add	r5, r4
  420a82:	fa17 f785 	uxtah	r7, r7, r5
  420a86:	fa16 f687 	uxtah	r6, r6, r7
  420a8a:	f8ad 6004 	strh.w	r6, [sp, #4]
        lv_obj_invalidate_area(chart, &coords);
  420a8e:	4669      	mov	r1, sp
  420a90:	4648      	mov	r0, r9
  420a92:	4b08      	ldr	r3, [pc, #32]	; (420ab4 <invalidate_lines+0x108>)
  420a94:	4798      	blx	r3
    }
}
  420a96:	b004      	add	sp, #16
  420a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *d8 = *s8;
  420a9c:	f813 6b01 	ldrb.w	r6, [r3], #1
  420aa0:	f801 6b01 	strb.w	r6, [r1], #1
        len--;
  420aa4:	3a01      	subs	r2, #1
  420aa6:	e7a5      	b.n	4209f4 <invalidate_lines+0x48>
  420aa8:	00408095 	.word	0x00408095
  420aac:	00420881 	.word	0x00420881
  420ab0:	00407445 	.word	0x00407445
  420ab4:	00405ef5 	.word	0x00405ef5

00420ab8 <invalidate_columns>:
 * invalid area of the new column data lines on a chart
 * @param chart pointer to chart object
 * @param mask mask, inherited from the design function
 */
static void invalidate_columns(lv_obj_t * chart, uint16_t i)
{
  420ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  420aba:	b085      	sub	sp, #20
  420abc:	4605      	mov	r5, r0
  420abe:	460f      	mov	r7, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420ac0:	4b1b      	ldr	r3, [pc, #108]	; (420b30 <invalidate_columns+0x78>)
  420ac2:	4798      	blx	r3
  420ac4:	4606      	mov	r6, r0

    lv_area_t series_area;
    lv_chart_get_series_area(chart, &series_area);
  420ac6:	a902      	add	r1, sp, #8
  420ac8:	4628      	mov	r0, r5
  420aca:	4b1a      	ldr	r3, [pc, #104]	; (420b34 <invalidate_columns+0x7c>)
  420acc:	4798      	blx	r3
  420ace:	f8bd 400c 	ldrh.w	r4, [sp, #12]
  420ad2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  420ad6:	1ae4      	subs	r4, r4, r3
  420ad8:	b2a4      	uxth	r4, r4
  420ada:	3401      	adds	r4, #1
  420adc:	b224      	sxth	r4, r4

    lv_area_t col_a;
    lv_coord_t w     = lv_area_get_width(&series_area);
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
  420ade:	4630      	mov	r0, r6
  420ae0:	4b15      	ldr	r3, [pc, #84]	; (420b38 <invalidate_columns+0x80>)
  420ae2:	4798      	blx	r3
  420ae4:	8c71      	ldrh	r1, [r6, #34]	; 0x22
  420ae6:	fb00 1001 	mla	r0, r0, r1, r1
  420aea:	fbb4 f6f0 	udiv	r6, r4, r0
  420aee:	b233      	sxth	r3, r6
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
  420af0:	2202      	movs	r2, #2
  420af2:	fb93 f3f2 	sdiv	r3, r3, r2

    lv_coord_t x_act;
    x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
  420af6:	fb04 f407 	mul.w	r4, r4, r7
  420afa:	fb94 f1f1 	sdiv	r1, r4, r1
    x_act += series_area.x1 + x_ofs;
  420afe:	f8bd 4008 	ldrh.w	r4, [sp, #8]
  420b02:	441c      	add	r4, r3
  420b04:	fa11 f484 	uxtah	r4, r1, r4
  420b08:	b2a4      	uxth	r4, r4
  420b0a:	b227      	sxth	r7, r4

    lv_obj_get_coords(chart, &col_a);
  420b0c:	4669      	mov	r1, sp
  420b0e:	4628      	mov	r0, r5
  420b10:	4b0a      	ldr	r3, [pc, #40]	; (420b3c <invalidate_columns+0x84>)
  420b12:	4798      	blx	r3
    col_a.x1 = x_act;
  420b14:	f8ad 7000 	strh.w	r7, [sp]
    col_a.x2 = col_a.x1 + col_w;
  420b18:	4434      	add	r4, r6
  420b1a:	f8ad 4004 	strh.w	r4, [sp, #4]

    _lv_inv_area(lv_obj_get_disp(chart), &col_a);
  420b1e:	4628      	mov	r0, r5
  420b20:	4b07      	ldr	r3, [pc, #28]	; (420b40 <invalidate_columns+0x88>)
  420b22:	4798      	blx	r3
  420b24:	4669      	mov	r1, sp
  420b26:	4b07      	ldr	r3, [pc, #28]	; (420b44 <invalidate_columns+0x8c>)
  420b28:	4798      	blx	r3
}
  420b2a:	b005      	add	sp, #20
  420b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  420b2e:	bf00      	nop
  420b30:	00408095 	.word	0x00408095
  420b34:	00420881 	.word	0x00420881
  420b38:	0041638d 	.word	0x0041638d
  420b3c:	00405ac1 	.word	0x00405ac1
  420b40:	00405a0d 	.word	0x00405a0d
  420b44:	00409695 	.word	0x00409695

00420b48 <lv_chart_refresh>:
{
  420b48:	b510      	push	{r4, lr}
  420b4a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420b4c:	4b06      	ldr	r3, [pc, #24]	; (420b68 <lv_chart_refresh+0x20>)
  420b4e:	4798      	blx	r3
  420b50:	b928      	cbnz	r0, 420b5e <lv_chart_refresh+0x16>
  420b52:	4622      	mov	r2, r4
  420b54:	2300      	movs	r3, #0
  420b56:	4805      	ldr	r0, [pc, #20]	; (420b6c <lv_chart_refresh+0x24>)
  420b58:	4905      	ldr	r1, [pc, #20]	; (420b70 <lv_chart_refresh+0x28>)
  420b5a:	4788      	blx	r1
  420b5c:	e7fe      	b.n	420b5c <lv_chart_refresh+0x14>
    lv_obj_invalidate(chart);
  420b5e:	4620      	mov	r0, r4
  420b60:	4b04      	ldr	r3, [pc, #16]	; (420b74 <lv_chart_refresh+0x2c>)
  420b62:	4798      	blx	r3
  420b64:	bd10      	pop	{r4, pc}
  420b66:	bf00      	nop
  420b68:	00415e79 	.word	0x00415e79
  420b6c:	0042c168 	.word	0x0042c168
  420b70:	00415e85 	.word	0x00415e85
  420b74:	00405f59 	.word	0x00405f59

00420b78 <lv_chart_set_y_range>:
{
  420b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420b7a:	4606      	mov	r6, r0
  420b7c:	460d      	mov	r5, r1
  420b7e:	4617      	mov	r7, r2
  420b80:	461c      	mov	r4, r3
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420b82:	4b16      	ldr	r3, [pc, #88]	; (420bdc <lv_chart_set_y_range+0x64>)
  420b84:	4798      	blx	r3
  420b86:	b110      	cbz	r0, 420b8e <lv_chart_set_y_range+0x16>
    if(axis >= _LV_CHART_AXIS_LAST) {
  420b88:	2d01      	cmp	r5, #1
  420b8a:	d906      	bls.n	420b9a <lv_chart_set_y_range+0x22>
  420b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420b8e:	4632      	mov	r2, r6
  420b90:	2300      	movs	r3, #0
  420b92:	4813      	ldr	r0, [pc, #76]	; (420be0 <lv_chart_set_y_range+0x68>)
  420b94:	4913      	ldr	r1, [pc, #76]	; (420be4 <lv_chart_set_y_range+0x6c>)
  420b96:	4788      	blx	r1
  420b98:	e7fe      	b.n	420b98 <lv_chart_set_y_range+0x20>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420b9a:	4630      	mov	r0, r6
  420b9c:	4b12      	ldr	r3, [pc, #72]	; (420be8 <lv_chart_set_y_range+0x70>)
  420b9e:	4798      	blx	r3
    if(ext->ymin[axis] == ymin && ext->ymax[axis] == ymax) return;
  420ba0:	f105 030c 	add.w	r3, r5, #12
  420ba4:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
  420ba8:	42bb      	cmp	r3, r7
  420baa:	d107      	bne.n	420bbc <lv_chart_set_y_range+0x44>
  420bac:	f105 030c 	add.w	r3, r5, #12
  420bb0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  420bb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  420bb8:	42a3      	cmp	r3, r4
  420bba:	d0e7      	beq.n	420b8c <lv_chart_set_y_range+0x14>
    ext->ymin[axis] = ymin;
  420bbc:	f105 030c 	add.w	r3, r5, #12
  420bc0:	f820 7013 	strh.w	r7, [r0, r3, lsl #1]
    ext->ymax[axis] = (ymax == ymin ? ymax + 1 : ymax);
  420bc4:	42a7      	cmp	r7, r4
  420bc6:	d101      	bne.n	420bcc <lv_chart_set_y_range+0x54>
  420bc8:	3401      	adds	r4, #1
  420bca:	b224      	sxth	r4, r4
  420bcc:	350c      	adds	r5, #12
  420bce:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  420bd2:	80ac      	strh	r4, [r5, #4]
    lv_chart_refresh(chart);
  420bd4:	4630      	mov	r0, r6
  420bd6:	4b05      	ldr	r3, [pc, #20]	; (420bec <lv_chart_set_y_range+0x74>)
  420bd8:	4798      	blx	r3
  420bda:	e7d7      	b.n	420b8c <lv_chart_set_y_range+0x14>
  420bdc:	00415e79 	.word	0x00415e79
  420be0:	0042c168 	.word	0x0042c168
  420be4:	00415e85 	.word	0x00415e85
  420be8:	00408095 	.word	0x00408095
  420bec:	00420b49 	.word	0x00420b49

00420bf0 <lv_chart_set_type>:
{
  420bf0:	b538      	push	{r3, r4, r5, lr}
  420bf2:	4604      	mov	r4, r0
  420bf4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420bf6:	4b0b      	ldr	r3, [pc, #44]	; (420c24 <lv_chart_set_type+0x34>)
  420bf8:	4798      	blx	r3
  420bfa:	b928      	cbnz	r0, 420c08 <lv_chart_set_type+0x18>
  420bfc:	4622      	mov	r2, r4
  420bfe:	2300      	movs	r3, #0
  420c00:	4809      	ldr	r0, [pc, #36]	; (420c28 <lv_chart_set_type+0x38>)
  420c02:	490a      	ldr	r1, [pc, #40]	; (420c2c <lv_chart_set_type+0x3c>)
  420c04:	4788      	blx	r1
  420c06:	e7fe      	b.n	420c06 <lv_chart_set_type+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420c08:	4620      	mov	r0, r4
  420c0a:	4b09      	ldr	r3, [pc, #36]	; (420c30 <lv_chart_set_type+0x40>)
  420c0c:	4798      	blx	r3
    if(ext->type == type) return;
  420c0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  420c12:	42ab      	cmp	r3, r5
  420c14:	d004      	beq.n	420c20 <lv_chart_set_type+0x30>
    ext->type = type;
  420c16:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    lv_chart_refresh(chart);
  420c1a:	4620      	mov	r0, r4
  420c1c:	4b05      	ldr	r3, [pc, #20]	; (420c34 <lv_chart_set_type+0x44>)
  420c1e:	4798      	blx	r3
  420c20:	bd38      	pop	{r3, r4, r5, pc}
  420c22:	bf00      	nop
  420c24:	00415e79 	.word	0x00415e79
  420c28:	0042c168 	.word	0x0042c168
  420c2c:	00415e85 	.word	0x00415e85
  420c30:	00408095 	.word	0x00408095
  420c34:	00420b49 	.word	0x00420b49

00420c38 <lv_chart_set_point_count>:
{
  420c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  420c3c:	4680      	mov	r8, r0
  420c3e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420c40:	4b48      	ldr	r3, [pc, #288]	; (420d64 <lv_chart_set_point_count+0x12c>)
  420c42:	4798      	blx	r3
  420c44:	b928      	cbnz	r0, 420c52 <lv_chart_set_point_count+0x1a>
  420c46:	4642      	mov	r2, r8
  420c48:	2300      	movs	r3, #0
  420c4a:	4847      	ldr	r0, [pc, #284]	; (420d68 <lv_chart_set_point_count+0x130>)
  420c4c:	4947      	ldr	r1, [pc, #284]	; (420d6c <lv_chart_set_point_count+0x134>)
  420c4e:	4788      	blx	r1
  420c50:	e7fe      	b.n	420c50 <lv_chart_set_point_count+0x18>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420c52:	4640      	mov	r0, r8
  420c54:	4b46      	ldr	r3, [pc, #280]	; (420d70 <lv_chart_set_point_count+0x138>)
  420c56:	4798      	blx	r3
  420c58:	4607      	mov	r7, r0
    if(ext->point_cnt == point_cnt) return;
  420c5a:	8c46      	ldrh	r6, [r0, #34]	; 0x22
  420c5c:	42ae      	cmp	r6, r5
  420c5e:	d07e      	beq.n	420d5e <lv_chart_set_point_count+0x126>
    if(point_cnt < 1) point_cnt = 1;
  420c60:	b905      	cbnz	r5, 420c64 <lv_chart_set_point_count+0x2c>
  420c62:	2501      	movs	r5, #1
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  420c64:	46b9      	mov	r9, r7
  420c66:	4638      	mov	r0, r7
  420c68:	4b42      	ldr	r3, [pc, #264]	; (420d74 <lv_chart_set_point_count+0x13c>)
  420c6a:	4798      	blx	r3
  420c6c:	4604      	mov	r4, r0
  420c6e:	e02c      	b.n	420cca <lv_chart_set_point_count+0x92>
                LV_ASSERT_MEM(new_points);
  420c70:	4652      	mov	r2, sl
  420c72:	2300      	movs	r3, #0
  420c74:	4840      	ldr	r0, [pc, #256]	; (420d78 <lv_chart_set_point_count+0x140>)
  420c76:	493d      	ldr	r1, [pc, #244]	; (420d6c <lv_chart_set_point_count+0x134>)
  420c78:	4788      	blx	r1
  420c7a:	e7fe      	b.n	420c7a <lv_chart_set_point_count+0x42>
                            ser->points[(i + ser->start_point) % point_cnt_old]; /*Copy old contents to new array*/
  420c7c:	6821      	ldr	r1, [r4, #0]
  420c7e:	88e2      	ldrh	r2, [r4, #6]
  420c80:	441a      	add	r2, r3
  420c82:	fb92 f0f6 	sdiv	r0, r2, r6
  420c86:	fb06 2210 	mls	r2, r6, r0, r2
  420c8a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
                        new_points[i] =
  420c8e:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
                    for(i = 0; i < point_cnt_old; i++) {
  420c92:	3301      	adds	r3, #1
  420c94:	b29b      	uxth	r3, r3
  420c96:	42b3      	cmp	r3, r6
  420c98:	d3f0      	bcc.n	420c7c <lv_chart_set_point_count+0x44>
  420c9a:	4633      	mov	r3, r6
  420c9c:	e007      	b.n	420cae <lv_chart_set_point_count+0x76>
  420c9e:	2300      	movs	r3, #0
  420ca0:	e7f9      	b.n	420c96 <lv_chart_set_point_count+0x5e>
                        new_points[i] = def; /*Fill up the rest with default value*/
  420ca2:	f248 32e8 	movw	r2, #33768	; 0x83e8
  420ca6:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
                    for(i = point_cnt_old; i < point_cnt; i++) {
  420caa:	3301      	adds	r3, #1
  420cac:	b29b      	uxth	r3, r3
  420cae:	429d      	cmp	r5, r3
  420cb0:	d8f7      	bhi.n	420ca2 <lv_chart_set_point_count+0x6a>
                lv_mem_free(ser->points);
  420cb2:	6820      	ldr	r0, [r4, #0]
  420cb4:	4b31      	ldr	r3, [pc, #196]	; (420d7c <lv_chart_set_point_count+0x144>)
  420cb6:	4798      	blx	r3
                ser->points = new_points;
  420cb8:	f8c4 a000 	str.w	sl, [r4]
        ser->start_point = 0;
  420cbc:	2300      	movs	r3, #0
  420cbe:	80e3      	strh	r3, [r4, #6]
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  420cc0:	4621      	mov	r1, r4
  420cc2:	4648      	mov	r0, r9
  420cc4:	4b2e      	ldr	r3, [pc, #184]	; (420d80 <lv_chart_set_point_count+0x148>)
  420cc6:	4798      	blx	r3
  420cc8:	4604      	mov	r4, r0
  420cca:	2c00      	cmp	r4, #0
  420ccc:	d043      	beq.n	420d56 <lv_chart_set_point_count+0x11e>
        if(!ser->ext_buf_assigned) {
  420cce:	7a23      	ldrb	r3, [r4, #8]
  420cd0:	f013 0f01 	tst.w	r3, #1
  420cd4:	d1f2      	bne.n	420cbc <lv_chart_set_point_count+0x84>
            if(ser->start_point != 0) {
  420cd6:	88e3      	ldrh	r3, [r4, #6]
  420cd8:	b1f3      	cbz	r3, 420d18 <lv_chart_set_point_count+0xe0>
                lv_coord_t * new_points = lv_mem_alloc(sizeof(lv_coord_t) * point_cnt);
  420cda:	0068      	lsls	r0, r5, #1
  420cdc:	4b29      	ldr	r3, [pc, #164]	; (420d84 <lv_chart_set_point_count+0x14c>)
  420cde:	4798      	blx	r3
  420ce0:	4682      	mov	sl, r0
                LV_ASSERT_MEM(new_points);
  420ce2:	4b20      	ldr	r3, [pc, #128]	; (420d64 <lv_chart_set_point_count+0x12c>)
  420ce4:	4798      	blx	r3
  420ce6:	2800      	cmp	r0, #0
  420ce8:	d0c2      	beq.n	420c70 <lv_chart_set_point_count+0x38>
                if(new_points == NULL) return;
  420cea:	f1ba 0f00 	cmp.w	sl, #0
  420cee:	d036      	beq.n	420d5e <lv_chart_set_point_count+0x126>
                if(point_cnt >= point_cnt_old) {
  420cf0:	42b5      	cmp	r5, r6
  420cf2:	d2d4      	bcs.n	420c9e <lv_chart_set_point_count+0x66>
  420cf4:	2300      	movs	r3, #0
  420cf6:	e00c      	b.n	420d12 <lv_chart_set_point_count+0xda>
                            ser->points[(i + ser->start_point) % point_cnt_old]; /*Copy old contents to new array*/
  420cf8:	6821      	ldr	r1, [r4, #0]
  420cfa:	88e2      	ldrh	r2, [r4, #6]
  420cfc:	441a      	add	r2, r3
  420cfe:	fb92 f0f6 	sdiv	r0, r2, r6
  420d02:	fb06 2210 	mls	r2, r6, r0, r2
  420d06:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
                        new_points[i] =
  420d0a:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
                    for(i = 0; i < point_cnt; i++) {
  420d0e:	3301      	adds	r3, #1
  420d10:	b29b      	uxth	r3, r3
  420d12:	429d      	cmp	r5, r3
  420d14:	d8f0      	bhi.n	420cf8 <lv_chart_set_point_count+0xc0>
  420d16:	e7cc      	b.n	420cb2 <lv_chart_set_point_count+0x7a>
                ser->points = lv_mem_realloc(ser->points, sizeof(lv_coord_t) * point_cnt);
  420d18:	0069      	lsls	r1, r5, #1
  420d1a:	6820      	ldr	r0, [r4, #0]
  420d1c:	4b1a      	ldr	r3, [pc, #104]	; (420d88 <lv_chart_set_point_count+0x150>)
  420d1e:	4798      	blx	r3
  420d20:	6020      	str	r0, [r4, #0]
                LV_ASSERT_MEM(ser->points);
  420d22:	4b10      	ldr	r3, [pc, #64]	; (420d64 <lv_chart_set_point_count+0x12c>)
  420d24:	4798      	blx	r3
  420d26:	b130      	cbz	r0, 420d36 <lv_chart_set_point_count+0xfe>
                if(ser->points == NULL) return;
  420d28:	6823      	ldr	r3, [r4, #0]
  420d2a:	b1c3      	cbz	r3, 420d5e <lv_chart_set_point_count+0x126>
                if(point_cnt > point_cnt_old) {
  420d2c:	42b5      	cmp	r5, r6
  420d2e:	d9c5      	bls.n	420cbc <lv_chart_set_point_count+0x84>
                    for(i = point_cnt_old - 1; i < point_cnt; i++) {
  420d30:	1e73      	subs	r3, r6, #1
  420d32:	b29b      	uxth	r3, r3
  420d34:	e00c      	b.n	420d50 <lv_chart_set_point_count+0x118>
                LV_ASSERT_MEM(ser->points);
  420d36:	6822      	ldr	r2, [r4, #0]
  420d38:	2300      	movs	r3, #0
  420d3a:	480f      	ldr	r0, [pc, #60]	; (420d78 <lv_chart_set_point_count+0x140>)
  420d3c:	490b      	ldr	r1, [pc, #44]	; (420d6c <lv_chart_set_point_count+0x134>)
  420d3e:	4788      	blx	r1
  420d40:	e7fe      	b.n	420d40 <lv_chart_set_point_count+0x108>
                        ser->points[i] = def;
  420d42:	6822      	ldr	r2, [r4, #0]
  420d44:	f248 31e8 	movw	r1, #33768	; 0x83e8
  420d48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    for(i = point_cnt_old - 1; i < point_cnt; i++) {
  420d4c:	3301      	adds	r3, #1
  420d4e:	b29b      	uxth	r3, r3
  420d50:	429d      	cmp	r5, r3
  420d52:	d8f6      	bhi.n	420d42 <lv_chart_set_point_count+0x10a>
  420d54:	e7b2      	b.n	420cbc <lv_chart_set_point_count+0x84>
    ext->point_cnt = point_cnt;
  420d56:	847d      	strh	r5, [r7, #34]	; 0x22
    lv_chart_refresh(chart);
  420d58:	4640      	mov	r0, r8
  420d5a:	4b0c      	ldr	r3, [pc, #48]	; (420d8c <lv_chart_set_point_count+0x154>)
  420d5c:	4798      	blx	r3
  420d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  420d62:	bf00      	nop
  420d64:	00415e79 	.word	0x00415e79
  420d68:	0042c168 	.word	0x0042c168
  420d6c:	00415e85 	.word	0x00415e85
  420d70:	00408095 	.word	0x00408095
  420d74:	00416193 	.word	0x00416193
  420d78:	0042c154 	.word	0x0042c154
  420d7c:	00416681 	.word	0x00416681
  420d80:	004161ab 	.word	0x004161ab
  420d84:	004165bd 	.word	0x004165bd
  420d88:	004168ed 	.word	0x004168ed
  420d8c:	00420b49 	.word	0x00420b49

00420d90 <lv_chart_set_next>:
{
  420d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420d92:	4606      	mov	r6, r0
  420d94:	460c      	mov	r4, r1
  420d96:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420d98:	4b25      	ldr	r3, [pc, #148]	; (420e30 <lv_chart_set_next+0xa0>)
  420d9a:	4798      	blx	r3
  420d9c:	b928      	cbnz	r0, 420daa <lv_chart_set_next+0x1a>
  420d9e:	4632      	mov	r2, r6
  420da0:	2300      	movs	r3, #0
  420da2:	4824      	ldr	r0, [pc, #144]	; (420e34 <lv_chart_set_next+0xa4>)
  420da4:	4924      	ldr	r1, [pc, #144]	; (420e38 <lv_chart_set_next+0xa8>)
  420da6:	4788      	blx	r1
  420da8:	e7fe      	b.n	420da8 <lv_chart_set_next+0x18>
    LV_ASSERT_NULL(ser);
  420daa:	4620      	mov	r0, r4
  420dac:	4b20      	ldr	r3, [pc, #128]	; (420e30 <lv_chart_set_next+0xa0>)
  420dae:	4798      	blx	r3
  420db0:	b928      	cbnz	r0, 420dbe <lv_chart_set_next+0x2e>
  420db2:	4622      	mov	r2, r4
  420db4:	2300      	movs	r3, #0
  420db6:	481f      	ldr	r0, [pc, #124]	; (420e34 <lv_chart_set_next+0xa4>)
  420db8:	491f      	ldr	r1, [pc, #124]	; (420e38 <lv_chart_set_next+0xa8>)
  420dba:	4788      	blx	r1
  420dbc:	e7fe      	b.n	420dbc <lv_chart_set_next+0x2c>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420dbe:	4630      	mov	r0, r6
  420dc0:	4b1e      	ldr	r3, [pc, #120]	; (420e3c <lv_chart_set_next+0xac>)
  420dc2:	4798      	blx	r3
  420dc4:	4605      	mov	r5, r0
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
  420dc6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  420dca:	f013 0f01 	tst.w	r3, #1
  420dce:	d10f      	bne.n	420df0 <lv_chart_set_next+0x60>
        ser->points[ser->start_point] =
  420dd0:	6823      	ldr	r3, [r4, #0]
  420dd2:	88e2      	ldrh	r2, [r4, #6]
  420dd4:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
        ser->start_point = (ser->start_point + 1) % ext->point_cnt;
  420dd8:	88e3      	ldrh	r3, [r4, #6]
  420dda:	3301      	adds	r3, #1
  420ddc:	8c41      	ldrh	r1, [r0, #34]	; 0x22
  420dde:	fb93 f2f1 	sdiv	r2, r3, r1
  420de2:	fb01 3312 	mls	r3, r1, r2, r3
  420de6:	80e3      	strh	r3, [r4, #6]
        lv_chart_refresh(chart);
  420de8:	4630      	mov	r0, r6
  420dea:	4b15      	ldr	r3, [pc, #84]	; (420e40 <lv_chart_set_next+0xb0>)
  420dec:	4798      	blx	r3
  420dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ser->points[ser->start_point] = y;
  420df0:	6823      	ldr	r3, [r4, #0]
  420df2:	88e2      	ldrh	r2, [r4, #6]
  420df4:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
        if(ext->type & LV_CHART_TYPE_LINE) invalidate_lines(chart, ser->start_point);
  420df8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  420dfc:	f013 0f01 	tst.w	r3, #1
  420e00:	d003      	beq.n	420e0a <lv_chart_set_next+0x7a>
  420e02:	88e1      	ldrh	r1, [r4, #6]
  420e04:	4630      	mov	r0, r6
  420e06:	4b0f      	ldr	r3, [pc, #60]	; (420e44 <lv_chart_set_next+0xb4>)
  420e08:	4798      	blx	r3
        if(ext->type & LV_CHART_TYPE_COLUMN) invalidate_columns(chart, ser->start_point);
  420e0a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  420e0e:	f013 0f02 	tst.w	r3, #2
  420e12:	d003      	beq.n	420e1c <lv_chart_set_next+0x8c>
  420e14:	88e1      	ldrh	r1, [r4, #6]
  420e16:	4630      	mov	r0, r6
  420e18:	4b0b      	ldr	r3, [pc, #44]	; (420e48 <lv_chart_set_next+0xb8>)
  420e1a:	4798      	blx	r3
        ser->start_point = (ser->start_point + 1) % ext->point_cnt; /*update the x for next incoming y*/
  420e1c:	88e3      	ldrh	r3, [r4, #6]
  420e1e:	3301      	adds	r3, #1
  420e20:	8c69      	ldrh	r1, [r5, #34]	; 0x22
  420e22:	fb93 f2f1 	sdiv	r2, r3, r1
  420e26:	fb01 3312 	mls	r3, r1, r2, r3
  420e2a:	80e3      	strh	r3, [r4, #6]
  420e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  420e2e:	bf00      	nop
  420e30:	00415e79 	.word	0x00415e79
  420e34:	0042c168 	.word	0x0042c168
  420e38:	00415e85 	.word	0x00415e85
  420e3c:	00408095 	.word	0x00408095
  420e40:	00420b49 	.word	0x00420b49
  420e44:	004209ad 	.word	0x004209ad
  420e48:	00420ab9 	.word	0x00420ab9

00420e4c <lv_cont_get_style>:
}

static lv_style_list_t * lv_cont_get_style(lv_obj_t * cont, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  420e4c:	b909      	cbnz	r1, 420e52 <lv_cont_get_style+0x6>
        case LV_CONT_PART_MAIN:
            style_dsc_p = &cont->style_list;
  420e4e:	3028      	adds	r0, #40	; 0x28
            break;
  420e50:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  420e52:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  420e54:	4770      	bx	lr
	...

00420e58 <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
  420e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  420e5c:	b083      	sub	sp, #12
  420e5e:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  420e60:	2214      	movs	r2, #20
  420e62:	2100      	movs	r1, #0
  420e64:	4b3c      	ldr	r3, [pc, #240]	; (420f58 <lv_cont_layout_center+0x100>)
  420e66:	4798      	blx	r3
  420e68:	4607      	mov	r7, r0
    lv_obj_t * child;
    uint32_t obj_num         = 0;
    lv_coord_t h_tot         = 0;

    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    _LV_LL_READ(cont->child_ll, child) {
  420e6a:	1d35      	adds	r5, r6, #4
  420e6c:	4628      	mov	r0, r5
  420e6e:	4b3b      	ldr	r3, [pc, #236]	; (420f5c <lv_cont_layout_center+0x104>)
  420e70:	4798      	blx	r3
  420e72:	4604      	mov	r4, r0
    lv_coord_t h_tot         = 0;
  420e74:	f04f 0800 	mov.w	r8, #0
    uint32_t obj_num         = 0;
  420e78:	46c1      	mov	r9, r8
    _LV_LL_READ(cont->child_ll, child) {
  420e7a:	e004      	b.n	420e86 <lv_cont_layout_center+0x2e>
  420e7c:	4621      	mov	r1, r4
  420e7e:	4628      	mov	r0, r5
  420e80:	4b37      	ldr	r3, [pc, #220]	; (420f60 <lv_cont_layout_center+0x108>)
  420e82:	4798      	blx	r3
  420e84:	4604      	mov	r4, r0
  420e86:	b1a4      	cbz	r4, 420eb2 <lv_cont_layout_center+0x5a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  420e88:	4620      	mov	r0, r4
  420e8a:	4b36      	ldr	r3, [pc, #216]	; (420f64 <lv_cont_layout_center+0x10c>)
  420e8c:	4798      	blx	r3
  420e8e:	2800      	cmp	r0, #0
  420e90:	d1f4      	bne.n	420e7c <lv_cont_layout_center+0x24>
  420e92:	2104      	movs	r1, #4
  420e94:	4620      	mov	r0, r4
  420e96:	4b34      	ldr	r3, [pc, #208]	; (420f68 <lv_cont_layout_center+0x110>)
  420e98:	4798      	blx	r3
  420e9a:	2800      	cmp	r0, #0
  420e9c:	d1ee      	bne.n	420e7c <lv_cont_layout_center+0x24>
        h_tot += lv_obj_get_height(child) + inner;
  420e9e:	4620      	mov	r0, r4
  420ea0:	4b32      	ldr	r3, [pc, #200]	; (420f6c <lv_cont_layout_center+0x114>)
  420ea2:	4798      	blx	r3
  420ea4:	4438      	add	r0, r7
  420ea6:	4480      	add	r8, r0
  420ea8:	fa0f f888 	sxth.w	r8, r8
        obj_num++;
  420eac:	f109 0901 	add.w	r9, r9, #1
  420eb0:	e7e4      	b.n	420e7c <lv_cont_layout_center+0x24>
    }

    if(obj_num == 0) return;
  420eb2:	f1b9 0f00 	cmp.w	r9, #0
  420eb6:	d102      	bne.n	420ebe <lv_cont_layout_center+0x66>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
        last_cord += lv_obj_get_height(child) + inner;
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
}
  420eb8:	b003      	add	sp, #12
  420eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    h_tot -= inner;
  420ebe:	eba8 0807 	sub.w	r8, r8, r7
  420ec2:	fa0f f888 	sxth.w	r8, r8
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  420ec6:	2101      	movs	r1, #1
  420ec8:	4630      	mov	r0, r6
  420eca:	4b29      	ldr	r3, [pc, #164]	; (420f70 <lv_cont_layout_center+0x118>)
  420ecc:	4798      	blx	r3
    lv_coord_t last_cord = -(h_tot / 2);
  420ece:	4643      	mov	r3, r8
  420ed0:	f1b8 0f00 	cmp.w	r8, #0
  420ed4:	db0a      	blt.n	420eec <lv_cont_layout_center+0x94>
  420ed6:	ea4f 0863 	mov.w	r8, r3, asr #1
  420eda:	f1c8 0800 	rsb	r8, r8, #0
  420ede:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  420ee2:	4628      	mov	r0, r5
  420ee4:	4b23      	ldr	r3, [pc, #140]	; (420f74 <lv_cont_layout_center+0x11c>)
  420ee6:	4798      	blx	r3
  420ee8:	4604      	mov	r4, r0
  420eea:	e019      	b.n	420f20 <lv_cont_layout_center+0xc8>
    lv_coord_t last_cord = -(h_tot / 2);
  420eec:	f108 0301 	add.w	r3, r8, #1
  420ef0:	e7f1      	b.n	420ed6 <lv_cont_layout_center+0x7e>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  420ef2:	eb08 0363 	add.w	r3, r8, r3, asr #1
  420ef6:	b21b      	sxth	r3, r3
  420ef8:	9300      	str	r3, [sp, #0]
  420efa:	2300      	movs	r3, #0
  420efc:	461a      	mov	r2, r3
  420efe:	4631      	mov	r1, r6
  420f00:	4620      	mov	r0, r4
  420f02:	f8df 907c 	ldr.w	r9, [pc, #124]	; 420f80 <lv_cont_layout_center+0x128>
  420f06:	47c8      	blx	r9
        last_cord += lv_obj_get_height(child) + inner;
  420f08:	4620      	mov	r0, r4
  420f0a:	4b18      	ldr	r3, [pc, #96]	; (420f6c <lv_cont_layout_center+0x114>)
  420f0c:	4798      	blx	r3
  420f0e:	4438      	add	r0, r7
  420f10:	4480      	add	r8, r0
  420f12:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  420f16:	4621      	mov	r1, r4
  420f18:	4628      	mov	r0, r5
  420f1a:	4b17      	ldr	r3, [pc, #92]	; (420f78 <lv_cont_layout_center+0x120>)
  420f1c:	4798      	blx	r3
  420f1e:	4604      	mov	r4, r0
  420f20:	b1a4      	cbz	r4, 420f4c <lv_cont_layout_center+0xf4>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  420f22:	4620      	mov	r0, r4
  420f24:	4b0f      	ldr	r3, [pc, #60]	; (420f64 <lv_cont_layout_center+0x10c>)
  420f26:	4798      	blx	r3
  420f28:	2800      	cmp	r0, #0
  420f2a:	d1f4      	bne.n	420f16 <lv_cont_layout_center+0xbe>
  420f2c:	2104      	movs	r1, #4
  420f2e:	4620      	mov	r0, r4
  420f30:	4b0d      	ldr	r3, [pc, #52]	; (420f68 <lv_cont_layout_center+0x110>)
  420f32:	4798      	blx	r3
  420f34:	2800      	cmp	r0, #0
  420f36:	d1ee      	bne.n	420f16 <lv_cont_layout_center+0xbe>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  420f38:	4620      	mov	r0, r4
  420f3a:	4b0c      	ldr	r3, [pc, #48]	; (420f6c <lv_cont_layout_center+0x114>)
  420f3c:	4798      	blx	r3
  420f3e:	fa1f f888 	uxth.w	r8, r8
  420f42:	4603      	mov	r3, r0
  420f44:	2800      	cmp	r0, #0
  420f46:	dad4      	bge.n	420ef2 <lv_cont_layout_center+0x9a>
  420f48:	1c43      	adds	r3, r0, #1
  420f4a:	e7d2      	b.n	420ef2 <lv_cont_layout_center+0x9a>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  420f4c:	2101      	movs	r1, #1
  420f4e:	4630      	mov	r0, r6
  420f50:	4b0a      	ldr	r3, [pc, #40]	; (420f7c <lv_cont_layout_center+0x124>)
  420f52:	4798      	blx	r3
  420f54:	e7b0      	b.n	420eb8 <lv_cont_layout_center+0x60>
  420f56:	bf00      	nop
  420f58:	00407445 	.word	0x00407445
  420f5c:	00416189 	.word	0x00416189
  420f60:	0041619d 	.word	0x0041619d
  420f64:	00405dc9 	.word	0x00405dc9
  420f68:	00406dad 	.word	0x00406dad
  420f6c:	00405bb1 	.word	0x00405bb1
  420f70:	00405751 	.word	0x00405751
  420f74:	00416193 	.word	0x00416193
  420f78:	004161ab 	.word	0x004161ab
  420f7c:	00405781 	.word	0x00405781
  420f80:	00406201 	.word	0x00406201

00420f84 <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
  420f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  420f88:	b083      	sub	sp, #12
  420f8a:	4680      	mov	r8, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
  420f8c:	4b2d      	ldr	r3, [pc, #180]	; (421044 <lv_cont_layout_grid+0xc0>)
  420f8e:	4798      	blx	r3
  420f90:	9000      	str	r0, [sp, #0]
  420f92:	2214      	movs	r2, #20
  420f94:	2100      	movs	r1, #0
  420f96:	4640      	mov	r0, r8
  420f98:	4c2b      	ldr	r4, [pc, #172]	; (421048 <lv_cont_layout_grid+0xc4>)
  420f9a:	47a0      	blx	r4
  420f9c:	4681      	mov	r9, r0
    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
  420f9e:	2100      	movs	r1, #0
  420fa0:	4640      	mov	r0, r8
  420fa2:	4b2a      	ldr	r3, [pc, #168]	; (42104c <lv_cont_layout_grid+0xc8>)
  420fa4:	4798      	blx	r3
  420fa6:	4b2a      	ldr	r3, [pc, #168]	; (421050 <lv_cont_layout_grid+0xcc>)
  420fa8:	4798      	blx	r3
  420faa:	fa1f f989 	uxth.w	r9, r9
  420fae:	fa19 f080 	uxtah	r0, r9, r0
  420fb2:	fa1f fb80 	uxth.w	fp, r0

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  420fb6:	2101      	movs	r1, #1
  420fb8:	4640      	mov	r0, r8
  420fba:	4b26      	ldr	r3, [pc, #152]	; (421054 <lv_cont_layout_grid+0xd0>)
  420fbc:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  420fbe:	2212      	movs	r2, #18
  420fc0:	2100      	movs	r1, #0
  420fc2:	4640      	mov	r0, r8
  420fc4:	47a0      	blx	r4
  420fc6:	4606      	mov	r6, r0
  420fc8:	9001      	str	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  420fca:	2210      	movs	r2, #16
  420fcc:	2100      	movs	r1, #0
  420fce:	4640      	mov	r0, r8
  420fd0:	47a0      	blx	r4
  420fd2:	4682      	mov	sl, r0
    /* Align the children */
    lv_coord_t left = lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
    lv_coord_t act_x = left;
    lv_coord_t act_y = lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
    lv_obj_t * child;
    _LV_LL_READ_BACK(cont->child_ll, child) {
  420fd4:	f108 0504 	add.w	r5, r8, #4
  420fd8:	4628      	mov	r0, r5
  420fda:	4b1f      	ldr	r3, [pc, #124]	; (421058 <lv_cont_layout_grid+0xd4>)
  420fdc:	4798      	blx	r3
  420fde:	4604      	mov	r4, r0
  420fe0:	e00d      	b.n	420ffe <lv_cont_layout_grid+0x7a>
        if(act_x + obj_w > w_fit + left) {
            act_x = left;
            act_y += y_ofs;
        }

        lv_obj_set_pos(child, act_x, act_y);
  420fe2:	4652      	mov	r2, sl
  420fe4:	4631      	mov	r1, r6
  420fe6:	4620      	mov	r0, r4
  420fe8:	4b1c      	ldr	r3, [pc, #112]	; (42105c <lv_cont_layout_grid+0xd8>)
  420fea:	4798      	blx	r3
        act_x += inner + obj_w;
  420fec:	444f      	add	r7, r9
  420fee:	fa16 f687 	uxtah	r6, r6, r7
  420ff2:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  420ff4:	4621      	mov	r1, r4
  420ff6:	4628      	mov	r0, r5
  420ff8:	4b19      	ldr	r3, [pc, #100]	; (421060 <lv_cont_layout_grid+0xdc>)
  420ffa:	4798      	blx	r3
  420ffc:	4604      	mov	r4, r0
  420ffe:	b1cc      	cbz	r4, 421034 <lv_cont_layout_grid+0xb0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  421000:	4620      	mov	r0, r4
  421002:	4b18      	ldr	r3, [pc, #96]	; (421064 <lv_cont_layout_grid+0xe0>)
  421004:	4798      	blx	r3
  421006:	2800      	cmp	r0, #0
  421008:	d1f4      	bne.n	420ff4 <lv_cont_layout_grid+0x70>
  42100a:	2104      	movs	r1, #4
  42100c:	4620      	mov	r0, r4
  42100e:	4b16      	ldr	r3, [pc, #88]	; (421068 <lv_cont_layout_grid+0xe4>)
  421010:	4798      	blx	r3
  421012:	2800      	cmp	r0, #0
  421014:	d1ee      	bne.n	420ff4 <lv_cont_layout_grid+0x70>
        lv_coord_t obj_w = lv_obj_get_width(child);
  421016:	4620      	mov	r0, r4
  421018:	4b14      	ldr	r3, [pc, #80]	; (42106c <lv_cont_layout_grid+0xe8>)
  42101a:	4798      	blx	r3
  42101c:	4607      	mov	r7, r0
        if(act_x + obj_w > w_fit + left) {
  42101e:	1832      	adds	r2, r6, r0
  421020:	9800      	ldr	r0, [sp, #0]
  421022:	9901      	ldr	r1, [sp, #4]
  421024:	1843      	adds	r3, r0, r1
  421026:	429a      	cmp	r2, r3
  421028:	dddb      	ble.n	420fe2 <lv_cont_layout_grid+0x5e>
            act_y += y_ofs;
  42102a:	44da      	add	sl, fp
  42102c:	fa0f fa8a 	sxth.w	sl, sl
            act_x = left;
  421030:	460e      	mov	r6, r1
  421032:	e7d6      	b.n	420fe2 <lv_cont_layout_grid+0x5e>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  421034:	2101      	movs	r1, #1
  421036:	4640      	mov	r0, r8
  421038:	4b0d      	ldr	r3, [pc, #52]	; (421070 <lv_cont_layout_grid+0xec>)
  42103a:	4798      	blx	r3
}
  42103c:	b003      	add	sp, #12
  42103e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421042:	bf00      	nop
  421044:	00407681 	.word	0x00407681
  421048:	00407445 	.word	0x00407445
  42104c:	00405a81 	.word	0x00405a81
  421050:	00405bb1 	.word	0x00405bb1
  421054:	00405751 	.word	0x00405751
  421058:	00416193 	.word	0x00416193
  42105c:	0040603d 	.word	0x0040603d
  421060:	004161ab 	.word	0x004161ab
  421064:	00405dc9 	.word	0x00405dc9
  421068:	00406dad 	.word	0x00406dad
  42106c:	00405b81 	.word	0x00405b81
  421070:	00405781 	.word	0x00405781

00421074 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
  421074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  421078:	b089      	sub	sp, #36	; 0x24
  42107a:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  42107c:	2101      	movs	r1, #1
  42107e:	4bc2      	ldr	r3, [pc, #776]	; (421388 <lv_cont_refr_autofit+0x314>)
  421080:	4798      	blx	r3
  421082:	b110      	cbz	r0, 42108a <lv_cont_refr_autofit+0x16>
    else {
        LV_LOG_ERROR("LV_LAYOUT_MAX_RECURSION reached! You may have encountered issue #1539.");
    }

    recursion_level--;
}
  421084:	b009      	add	sp, #36	; 0x24
  421086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  42108a:	4620      	mov	r0, r4
  42108c:	4bbf      	ldr	r3, [pc, #764]	; (42138c <lv_cont_refr_autofit+0x318>)
  42108e:	4798      	blx	r3
  421090:	4605      	mov	r5, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
  421092:	7803      	ldrb	r3, [r0, #0]
  421094:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  421098:	d103      	bne.n	4210a2 <lv_cont_refr_autofit+0x2e>
  42109a:	7843      	ldrb	r3, [r0, #1]
  42109c:	f013 0f0f 	tst.w	r3, #15
  4210a0:	d0f0      	beq.n	421084 <lv_cont_refr_autofit+0x10>
    recursion_level++;
  4210a2:	4abb      	ldr	r2, [pc, #748]	; (421390 <lv_cont_refr_autofit+0x31c>)
  4210a4:	6813      	ldr	r3, [r2, #0]
  4210a6:	3301      	adds	r3, #1
  4210a8:	6013      	str	r3, [r2, #0]
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
  4210aa:	2b0a      	cmp	r3, #10
  4210ac:	dd04      	ble.n	4210b8 <lv_cont_refr_autofit+0x44>
    recursion_level--;
  4210ae:	4ab8      	ldr	r2, [pc, #736]	; (421390 <lv_cont_refr_autofit+0x31c>)
  4210b0:	6813      	ldr	r3, [r2, #0]
  4210b2:	3b01      	subs	r3, #1
  4210b4:	6013      	str	r3, [r2, #0]
  4210b6:	e7e5      	b.n	421084 <lv_cont_refr_autofit+0x10>
        lv_obj_t * par               = lv_obj_get_parent(cont);
  4210b8:	4620      	mov	r0, r4
  4210ba:	4bb6      	ldr	r3, [pc, #728]	; (421394 <lv_cont_refr_autofit+0x320>)
  4210bc:	4798      	blx	r3
  4210be:	4680      	mov	r8, r0
        lv_area_copy(&parent_area, &par->coords);
  4210c0:	f100 0110 	add.w	r1, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
  4210c4:	aa04      	add	r2, sp, #16
  4210c6:	2308      	movs	r3, #8
  4210c8:	e004      	b.n	4210d4 <lv_cont_refr_autofit+0x60>
        *d8 = *s8;
  4210ca:	f811 0b01 	ldrb.w	r0, [r1], #1
  4210ce:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4210d2:	3b01      	subs	r3, #1
    while(len) {
  4210d4:	2b00      	cmp	r3, #0
  4210d6:	d1f8      	bne.n	4210ca <lv_cont_refr_autofit+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4210d8:	2212      	movs	r2, #18
  4210da:	2100      	movs	r1, #0
  4210dc:	4640      	mov	r0, r8
  4210de:	4eae      	ldr	r6, [pc, #696]	; (421398 <lv_cont_refr_autofit+0x324>)
  4210e0:	47b0      	blx	r6
        parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
  4210e2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4210e6:	fa13 f080 	uxtah	r0, r3, r0
  4210ea:	f8ad 0010 	strh.w	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4210ee:	2213      	movs	r2, #19
  4210f0:	2100      	movs	r1, #0
  4210f2:	4640      	mov	r0, r8
  4210f4:	47b0      	blx	r6
        parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
  4210f6:	b280      	uxth	r0, r0
  4210f8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4210fc:	1a18      	subs	r0, r3, r0
  4210fe:	f8ad 0014 	strh.w	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421102:	2210      	movs	r2, #16
  421104:	2100      	movs	r1, #0
  421106:	4640      	mov	r0, r8
  421108:	47b0      	blx	r6
        parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
  42110a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  42110e:	fa13 f080 	uxtah	r0, r3, r0
  421112:	f8ad 0012 	strh.w	r0, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  421116:	2211      	movs	r2, #17
  421118:	2100      	movs	r1, #0
  42111a:	4640      	mov	r0, r8
  42111c:	47b0      	blx	r6
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
  42111e:	b280      	uxth	r0, r0
  421120:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  421124:	1a18      	subs	r0, r3, r0
  421126:	f8ad 0016 	strh.w	r0, [sp, #22]
        lv_obj_get_coords(cont, &ori);
  42112a:	a902      	add	r1, sp, #8
  42112c:	4620      	mov	r0, r4
  42112e:	4e9b      	ldr	r6, [pc, #620]	; (42139c <lv_cont_refr_autofit+0x328>)
  421130:	47b0      	blx	r6
        lv_obj_get_coords(cont, &tight_area);
  421132:	4669      	mov	r1, sp
  421134:	4620      	mov	r0, r4
  421136:	47b0      	blx	r6
        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
  421138:	1d26      	adds	r6, r4, #4
  42113a:	4630      	mov	r0, r6
  42113c:	4b98      	ldr	r3, [pc, #608]	; (4213a0 <lv_cont_refr_autofit+0x32c>)
  42113e:	4798      	blx	r3
  421140:	f080 0001 	eor.w	r0, r0, #1
        if(has_children) {
  421144:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
  421148:	d103      	bne.n	421152 <lv_cont_refr_autofit+0xde>
        lv_area_copy(&parent_area, &par->coords);
  42114a:	a902      	add	r1, sp, #8
  42114c:	aa06      	add	r2, sp, #24
  42114e:	2308      	movs	r3, #8
  421150:	e09c      	b.n	42128c <lv_cont_refr_autofit+0x218>
            tight_area.x1 = LV_COORD_MAX;
  421152:	f647 4318 	movw	r3, #31768	; 0x7c18
  421156:	f8ad 3000 	strh.w	r3, [sp]
            tight_area.y1 = LV_COORD_MAX;
  42115a:	f8ad 3002 	strh.w	r3, [sp, #2]
            tight_area.x2 = LV_COORD_MIN;
  42115e:	f248 33e8 	movw	r3, #33768	; 0x83e8
  421162:	f8ad 3004 	strh.w	r3, [sp, #4]
            tight_area.y2 = LV_COORD_MIN;
  421166:	f8ad 3006 	strh.w	r3, [sp, #6]
            _LV_LL_READ(cont->child_ll, child_i) {
  42116a:	4630      	mov	r0, r6
  42116c:	4b8d      	ldr	r3, [pc, #564]	; (4213a4 <lv_cont_refr_autofit+0x330>)
  42116e:	4798      	blx	r3
  421170:	4607      	mov	r7, r0
  421172:	e004      	b.n	42117e <lv_cont_refr_autofit+0x10a>
  421174:	4639      	mov	r1, r7
  421176:	4630      	mov	r0, r6
  421178:	4b8b      	ldr	r3, [pc, #556]	; (4213a8 <lv_cont_refr_autofit+0x334>)
  42117a:	4798      	blx	r3
  42117c:	4607      	mov	r7, r0
  42117e:	2f00      	cmp	r7, #0
  421180:	d055      	beq.n	42122e <lv_cont_refr_autofit+0x1ba>
                if(lv_obj_get_hidden(child_i) != false) continue;
  421182:	4638      	mov	r0, r7
  421184:	4b89      	ldr	r3, [pc, #548]	; (4213ac <lv_cont_refr_autofit+0x338>)
  421186:	4798      	blx	r3
  421188:	2800      	cmp	r0, #0
  42118a:	d1f3      	bne.n	421174 <lv_cont_refr_autofit+0x100>
                if(ext->fit_left != LV_FIT_PARENT) {
  42118c:	782b      	ldrb	r3, [r5, #0]
  42118e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  421192:	2b20      	cmp	r3, #32
  421194:	d00e      	beq.n	4211b4 <lv_cont_refr_autofit+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  421196:	2217      	movs	r2, #23
  421198:	2100      	movs	r1, #0
  42119a:	4638      	mov	r0, r7
  42119c:	4b7e      	ldr	r3, [pc, #504]	; (421398 <lv_cont_refr_autofit+0x324>)
  42119e:	4798      	blx	r3
                    tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
  4211a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
  4211a4:	1a18      	subs	r0, r3, r0
  4211a6:	f9bd 3000 	ldrsh.w	r3, [sp]
  4211aa:	4298      	cmp	r0, r3
  4211ac:	bfa8      	it	ge
  4211ae:	4618      	movge	r0, r3
  4211b0:	f8ad 0000 	strh.w	r0, [sp]
                if(ext->fit_right != LV_FIT_PARENT) {
  4211b4:	782b      	ldrb	r3, [r5, #0]
  4211b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4211ba:	2b80      	cmp	r3, #128	; 0x80
  4211bc:	d00e      	beq.n	4211dc <lv_cont_refr_autofit+0x168>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  4211be:	2218      	movs	r2, #24
  4211c0:	2100      	movs	r1, #0
  4211c2:	4638      	mov	r0, r7
  4211c4:	4b74      	ldr	r3, [pc, #464]	; (421398 <lv_cont_refr_autofit+0x324>)
  4211c6:	4798      	blx	r3
                    tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
  4211c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  4211cc:	4418      	add	r0, r3
  4211ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  4211d2:	4298      	cmp	r0, r3
  4211d4:	bfb8      	it	lt
  4211d6:	4618      	movlt	r0, r3
  4211d8:	f8ad 0004 	strh.w	r0, [sp, #4]
                if(ext->fit_top != LV_FIT_PARENT) {
  4211dc:	786b      	ldrb	r3, [r5, #1]
  4211de:	f003 0303 	and.w	r3, r3, #3
  4211e2:	2b02      	cmp	r3, #2
  4211e4:	d00e      	beq.n	421204 <lv_cont_refr_autofit+0x190>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  4211e6:	2215      	movs	r2, #21
  4211e8:	2100      	movs	r1, #0
  4211ea:	4638      	mov	r0, r7
  4211ec:	4b6a      	ldr	r3, [pc, #424]	; (421398 <lv_cont_refr_autofit+0x324>)
  4211ee:	4798      	blx	r3
                    tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
  4211f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
  4211f4:	1a18      	subs	r0, r3, r0
  4211f6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  4211fa:	4298      	cmp	r0, r3
  4211fc:	bfa8      	it	ge
  4211fe:	4618      	movge	r0, r3
  421200:	f8ad 0002 	strh.w	r0, [sp, #2]
                if(ext->fit_bottom != LV_FIT_PARENT) {
  421204:	786b      	ldrb	r3, [r5, #1]
  421206:	f003 030c 	and.w	r3, r3, #12
  42120a:	2b08      	cmp	r3, #8
  42120c:	d0b2      	beq.n	421174 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  42120e:	2216      	movs	r2, #22
  421210:	2100      	movs	r1, #0
  421212:	4638      	mov	r0, r7
  421214:	4b60      	ldr	r3, [pc, #384]	; (421398 <lv_cont_refr_autofit+0x324>)
  421216:	4798      	blx	r3
                    tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
  421218:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  42121c:	4418      	add	r0, r3
  42121e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  421222:	4298      	cmp	r0, r3
  421224:	bfb8      	it	lt
  421226:	4618      	movlt	r0, r3
  421228:	f8ad 0006 	strh.w	r0, [sp, #6]
  42122c:	e7a2      	b.n	421174 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  42122e:	2212      	movs	r2, #18
  421230:	2100      	movs	r1, #0
  421232:	4620      	mov	r0, r4
  421234:	4f58      	ldr	r7, [pc, #352]	; (421398 <lv_cont_refr_autofit+0x324>)
  421236:	47b8      	blx	r7
            tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
  421238:	b280      	uxth	r0, r0
  42123a:	f8bd 3000 	ldrh.w	r3, [sp]
  42123e:	1a18      	subs	r0, r3, r0
  421240:	f8ad 0000 	strh.w	r0, [sp]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  421244:	2213      	movs	r2, #19
  421246:	2100      	movs	r1, #0
  421248:	4620      	mov	r0, r4
  42124a:	47b8      	blx	r7
            tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  42124c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  421250:	fa13 f080 	uxtah	r0, r3, r0
  421254:	f8ad 0004 	strh.w	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421258:	2210      	movs	r2, #16
  42125a:	2100      	movs	r1, #0
  42125c:	4620      	mov	r0, r4
  42125e:	47b8      	blx	r7
            tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
  421260:	b280      	uxth	r0, r0
  421262:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  421266:	1a18      	subs	r0, r3, r0
  421268:	f8ad 0002 	strh.w	r0, [sp, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  42126c:	2211      	movs	r2, #17
  42126e:	2100      	movs	r1, #0
  421270:	4620      	mov	r0, r4
  421272:	47b8      	blx	r7
            tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  421274:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  421278:	fa13 f080 	uxtah	r0, r3, r0
  42127c:	f8ad 0006 	strh.w	r0, [sp, #6]
  421280:	e763      	b.n	42114a <lv_cont_refr_autofit+0xd6>
        *d8 = *s8;
  421282:	f811 0b01 	ldrb.w	r0, [r1], #1
  421286:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  42128a:	3b01      	subs	r3, #1
    while(len) {
  42128c:	2b00      	cmp	r3, #0
  42128e:	d1f8      	bne.n	421282 <lv_cont_refr_autofit+0x20e>
        switch(ext->fit_left) {
  421290:	782b      	ldrb	r3, [r5, #0]
  421292:	f3c3 1301 	ubfx	r3, r3, #4, #2
  421296:	2b02      	cmp	r3, #2
  421298:	d037      	beq.n	42130a <lv_cont_refr_autofit+0x296>
  42129a:	d83b      	bhi.n	421314 <lv_cont_refr_autofit+0x2a0>
  42129c:	2b01      	cmp	r3, #1
  42129e:	d103      	bne.n	4212a8 <lv_cont_refr_autofit+0x234>
                new_area.x1 = tight_area.x1;
  4212a0:	f9bd 3000 	ldrsh.w	r3, [sp]
  4212a4:	f8ad 3018 	strh.w	r3, [sp, #24]
        switch(ext->fit_right) {
  4212a8:	782b      	ldrb	r3, [r5, #0]
  4212aa:	099b      	lsrs	r3, r3, #6
  4212ac:	2b02      	cmp	r3, #2
  4212ae:	d041      	beq.n	421334 <lv_cont_refr_autofit+0x2c0>
  4212b0:	d845      	bhi.n	42133e <lv_cont_refr_autofit+0x2ca>
  4212b2:	2b01      	cmp	r3, #1
  4212b4:	d103      	bne.n	4212be <lv_cont_refr_autofit+0x24a>
                new_area.x2 = tight_area.x2;
  4212b6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  4212ba:	f8ad 301c 	strh.w	r3, [sp, #28]
        switch(ext->fit_top) {
  4212be:	786b      	ldrb	r3, [r5, #1]
  4212c0:	f003 0303 	and.w	r3, r3, #3
  4212c4:	2b02      	cmp	r3, #2
  4212c6:	d04a      	beq.n	42135e <lv_cont_refr_autofit+0x2ea>
  4212c8:	d84e      	bhi.n	421368 <lv_cont_refr_autofit+0x2f4>
  4212ca:	2b01      	cmp	r3, #1
  4212cc:	d103      	bne.n	4212d6 <lv_cont_refr_autofit+0x262>
                new_area.y1 = tight_area.y1;
  4212ce:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  4212d2:	f8ad 301a 	strh.w	r3, [sp, #26]
        switch(ext->fit_bottom) {
  4212d6:	786b      	ldrb	r3, [r5, #1]
  4212d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4212dc:	2b02      	cmp	r3, #2
  4212de:	d069      	beq.n	4213b4 <lv_cont_refr_autofit+0x340>
  4212e0:	d86d      	bhi.n	4213be <lv_cont_refr_autofit+0x34a>
  4212e2:	2b01      	cmp	r3, #1
  4212e4:	d103      	bne.n	4212ee <lv_cont_refr_autofit+0x27a>
                new_area.y2 = tight_area.y2;
  4212e6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  4212ea:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  4212ee:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  4212f2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  4212f6:	429a      	cmp	r2, r3
  4212f8:	d071      	beq.n	4213de <lv_cont_refr_autofit+0x36a>
            lv_obj_invalidate(cont);
  4212fa:	4620      	mov	r0, r4
  4212fc:	4b2c      	ldr	r3, [pc, #176]	; (4213b0 <lv_cont_refr_autofit+0x33c>)
  4212fe:	4798      	blx	r3
            lv_area_copy(&cont->coords, &new_area);
  421300:	f104 0110 	add.w	r1, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  421304:	aa06      	add	r2, sp, #24
  421306:	2308      	movs	r3, #8
  421308:	e082      	b.n	421410 <lv_cont_refr_autofit+0x39c>
                new_area.x1 = parent_area.x1;
  42130a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  42130e:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  421312:	e7c9      	b.n	4212a8 <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  421314:	f1b9 0f00 	cmp.w	r9, #0
  421318:	d009      	beq.n	42132e <lv_cont_refr_autofit+0x2ba>
  42131a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  42131e:	f9bd 2000 	ldrsh.w	r2, [sp]
  421322:	4293      	cmp	r3, r2
  421324:	bfa8      	it	ge
  421326:	4613      	movge	r3, r2
  421328:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  42132c:	e7bc      	b.n	4212a8 <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  42132e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  421332:	e7f9      	b.n	421328 <lv_cont_refr_autofit+0x2b4>
                new_area.x2 = parent_area.x2;
  421334:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  421338:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  42133c:	e7bf      	b.n	4212be <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  42133e:	f1b9 0f00 	cmp.w	r9, #0
  421342:	d009      	beq.n	421358 <lv_cont_refr_autofit+0x2e4>
  421344:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  421348:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  42134c:	4293      	cmp	r3, r2
  42134e:	bfb8      	it	lt
  421350:	4613      	movlt	r3, r2
  421352:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  421356:	e7b2      	b.n	4212be <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  421358:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  42135c:	e7f9      	b.n	421352 <lv_cont_refr_autofit+0x2de>
                new_area.y1 = parent_area.y1;
  42135e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  421362:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  421366:	e7b6      	b.n	4212d6 <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  421368:	f1b9 0f00 	cmp.w	r9, #0
  42136c:	d009      	beq.n	421382 <lv_cont_refr_autofit+0x30e>
  42136e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  421372:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  421376:	4293      	cmp	r3, r2
  421378:	bfa8      	it	ge
  42137a:	4613      	movge	r3, r2
  42137c:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  421380:	e7a9      	b.n	4212d6 <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  421382:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  421386:	e7f9      	b.n	42137c <lv_cont_refr_autofit+0x308>
  421388:	00406dad 	.word	0x00406dad
  42138c:	00408095 	.word	0x00408095
  421390:	20414870 	.word	0x20414870
  421394:	004059ad 	.word	0x004059ad
  421398:	00407445 	.word	0x00407445
  42139c:	00405ac1 	.word	0x00405ac1
  4213a0:	00416431 	.word	0x00416431
  4213a4:	00416189 	.word	0x00416189
  4213a8:	0041619d 	.word	0x0041619d
  4213ac:	00405dc9 	.word	0x00405dc9
  4213b0:	00405f59 	.word	0x00405f59
                new_area.y2 = parent_area.y2;
  4213b4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  4213b8:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  4213bc:	e797      	b.n	4212ee <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  4213be:	f1b9 0f00 	cmp.w	r9, #0
  4213c2:	d009      	beq.n	4213d8 <lv_cont_refr_autofit+0x364>
  4213c4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  4213c8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  4213cc:	4293      	cmp	r3, r2
  4213ce:	bfb8      	it	lt
  4213d0:	4613      	movlt	r3, r2
  4213d2:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  4213d6:	e78a      	b.n	4212ee <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  4213d8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  4213dc:	e7f9      	b.n	4213d2 <lv_cont_refr_autofit+0x35e>
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  4213de:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
  4213e2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  4213e6:	429a      	cmp	r2, r3
  4213e8:	d187      	bne.n	4212fa <lv_cont_refr_autofit+0x286>
  4213ea:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  4213ee:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  4213f2:	429a      	cmp	r2, r3
  4213f4:	d181      	bne.n	4212fa <lv_cont_refr_autofit+0x286>
           cont->coords.y2 != new_area.y2) {
  4213f6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
  4213fa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  4213fe:	429a      	cmp	r2, r3
  421400:	f47f af7b 	bne.w	4212fa <lv_cont_refr_autofit+0x286>
  421404:	e653      	b.n	4210ae <lv_cont_refr_autofit+0x3a>
        *d8 = *s8;
  421406:	f812 0b01 	ldrb.w	r0, [r2], #1
  42140a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  42140e:	3b01      	subs	r3, #1
    while(len) {
  421410:	2b00      	cmp	r3, #0
  421412:	d1f8      	bne.n	421406 <lv_cont_refr_autofit+0x392>
            lv_obj_invalidate(cont);
  421414:	4620      	mov	r0, r4
  421416:	4b13      	ldr	r3, [pc, #76]	; (421464 <lv_cont_refr_autofit+0x3f0>)
  421418:	4798      	blx	r3
            cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
  42141a:	69e3      	ldr	r3, [r4, #28]
  42141c:	aa02      	add	r2, sp, #8
  42141e:	2102      	movs	r1, #2
  421420:	4620      	mov	r0, r4
  421422:	4798      	blx	r3
            par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
  421424:	f8d8 301c 	ldr.w	r3, [r8, #28]
  421428:	4622      	mov	r2, r4
  42142a:	2101      	movs	r1, #1
  42142c:	4640      	mov	r0, r8
  42142e:	4798      	blx	r3
            if(lv_obj_get_auto_realign(cont)) {
  421430:	4620      	mov	r0, r4
  421432:	4b0d      	ldr	r3, [pc, #52]	; (421468 <lv_cont_refr_autofit+0x3f4>)
  421434:	4798      	blx	r3
  421436:	b920      	cbnz	r0, 421442 <lv_cont_refr_autofit+0x3ce>
            _LV_LL_READ(cont->child_ll, child_i) {
  421438:	4630      	mov	r0, r6
  42143a:	4b0c      	ldr	r3, [pc, #48]	; (42146c <lv_cont_refr_autofit+0x3f8>)
  42143c:	4798      	blx	r3
  42143e:	4604      	mov	r4, r0
  421440:	e00d      	b.n	42145e <lv_cont_refr_autofit+0x3ea>
                lv_obj_realign(cont);
  421442:	4620      	mov	r0, r4
  421444:	4b0a      	ldr	r3, [pc, #40]	; (421470 <lv_cont_refr_autofit+0x3fc>)
  421446:	4798      	blx	r3
  421448:	e7f6      	b.n	421438 <lv_cont_refr_autofit+0x3c4>
                child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
  42144a:	69e3      	ldr	r3, [r4, #28]
  42144c:	aa02      	add	r2, sp, #8
  42144e:	2103      	movs	r1, #3
  421450:	4620      	mov	r0, r4
  421452:	4798      	blx	r3
            _LV_LL_READ(cont->child_ll, child_i) {
  421454:	4621      	mov	r1, r4
  421456:	4630      	mov	r0, r6
  421458:	4b06      	ldr	r3, [pc, #24]	; (421474 <lv_cont_refr_autofit+0x400>)
  42145a:	4798      	blx	r3
  42145c:	4604      	mov	r4, r0
  42145e:	2c00      	cmp	r4, #0
  421460:	d1f3      	bne.n	42144a <lv_cont_refr_autofit+0x3d6>
  421462:	e624      	b.n	4210ae <lv_cont_refr_autofit+0x3a>
  421464:	00405f59 	.word	0x00405f59
  421468:	00405be1 	.word	0x00405be1
  42146c:	00416189 	.word	0x00416189
  421470:	00406675 	.word	0x00406675
  421474:	0041619d 	.word	0x0041619d

00421478 <lv_cont_create>:
{
  421478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42147a:	4607      	mov	r7, r0
  42147c:	460e      	mov	r6, r1
    lv_obj_t * cont = lv_obj_create(par, copy);
  42147e:	4b3b      	ldr	r3, [pc, #236]	; (42156c <lv_cont_create+0xf4>)
  421480:	4798      	blx	r3
  421482:	4605      	mov	r5, r0
    LV_ASSERT_MEM(cont);
  421484:	4b3a      	ldr	r3, [pc, #232]	; (421570 <lv_cont_create+0xf8>)
  421486:	4798      	blx	r3
  421488:	b1c8      	cbz	r0, 4214be <lv_cont_create+0x46>
    if(cont == NULL) return NULL;
  42148a:	2d00      	cmp	r5, #0
  42148c:	d065      	beq.n	42155a <lv_cont_create+0xe2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  42148e:	4b39      	ldr	r3, [pc, #228]	; (421574 <lv_cont_create+0xfc>)
  421490:	681b      	ldr	r3, [r3, #0]
  421492:	b1d3      	cbz	r3, 4214ca <lv_cont_create+0x52>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  421494:	4b38      	ldr	r3, [pc, #224]	; (421578 <lv_cont_create+0x100>)
  421496:	681b      	ldr	r3, [r3, #0]
  421498:	b1eb      	cbz	r3, 4214d6 <lv_cont_create+0x5e>
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
  42149a:	2102      	movs	r1, #2
  42149c:	4628      	mov	r0, r5
  42149e:	4b37      	ldr	r3, [pc, #220]	; (42157c <lv_cont_create+0x104>)
  4214a0:	4798      	blx	r3
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  4214a2:	4628      	mov	r0, r5
  4214a4:	4b36      	ldr	r3, [pc, #216]	; (421580 <lv_cont_create+0x108>)
  4214a6:	4798      	blx	r3
    if(ext == NULL) {
  4214a8:	4604      	mov	r4, r0
  4214aa:	b1d0      	cbz	r0, 4214e2 <lv_cont_create+0x6a>
    LV_ASSERT_MEM(ext);
  4214ac:	4b30      	ldr	r3, [pc, #192]	; (421570 <lv_cont_create+0xf8>)
  4214ae:	4798      	blx	r3
  4214b0:	b9e0      	cbnz	r0, 4214ec <lv_cont_create+0x74>
  4214b2:	4622      	mov	r2, r4
  4214b4:	2300      	movs	r3, #0
  4214b6:	4833      	ldr	r0, [pc, #204]	; (421584 <lv_cont_create+0x10c>)
  4214b8:	4933      	ldr	r1, [pc, #204]	; (421588 <lv_cont_create+0x110>)
  4214ba:	4788      	blx	r1
  4214bc:	e7fe      	b.n	4214bc <lv_cont_create+0x44>
    LV_ASSERT_MEM(cont);
  4214be:	462a      	mov	r2, r5
  4214c0:	2300      	movs	r3, #0
  4214c2:	4830      	ldr	r0, [pc, #192]	; (421584 <lv_cont_create+0x10c>)
  4214c4:	4930      	ldr	r1, [pc, #192]	; (421588 <lv_cont_create+0x110>)
  4214c6:	4788      	blx	r1
  4214c8:	e7fe      	b.n	4214c8 <lv_cont_create+0x50>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  4214ca:	4628      	mov	r0, r5
  4214cc:	4b2f      	ldr	r3, [pc, #188]	; (42158c <lv_cont_create+0x114>)
  4214ce:	4798      	blx	r3
  4214d0:	4b28      	ldr	r3, [pc, #160]	; (421574 <lv_cont_create+0xfc>)
  4214d2:	6018      	str	r0, [r3, #0]
  4214d4:	e7de      	b.n	421494 <lv_cont_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  4214d6:	4628      	mov	r0, r5
  4214d8:	4b2d      	ldr	r3, [pc, #180]	; (421590 <lv_cont_create+0x118>)
  4214da:	4798      	blx	r3
  4214dc:	4b26      	ldr	r3, [pc, #152]	; (421578 <lv_cont_create+0x100>)
  4214de:	6018      	str	r0, [r3, #0]
  4214e0:	e7db      	b.n	42149a <lv_cont_create+0x22>
        lv_obj_del(cont);
  4214e2:	4628      	mov	r0, r5
  4214e4:	4b2b      	ldr	r3, [pc, #172]	; (421594 <lv_cont_create+0x11c>)
  4214e6:	4798      	blx	r3
        return NULL;
  4214e8:	2500      	movs	r5, #0
  4214ea:	e036      	b.n	42155a <lv_cont_create+0xe2>
    ext->fit_left   = LV_FIT_NONE;
  4214ec:	7823      	ldrb	r3, [r4, #0]
    ext->fit_top    = LV_FIT_NONE;
  4214ee:	7862      	ldrb	r2, [r4, #1]
    ext->fit_bottom = LV_FIT_NONE;
  4214f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  4214f4:	f36f 0283 	bfc	r2, #2, #2
  4214f8:	7062      	strb	r2, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
  4214fa:	f003 030f 	and.w	r3, r3, #15
  4214fe:	f36f 0303 	bfc	r3, #0, #4
  421502:	7023      	strb	r3, [r4, #0]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
  421504:	4924      	ldr	r1, [pc, #144]	; (421598 <lv_cont_create+0x120>)
  421506:	4628      	mov	r0, r5
  421508:	4b24      	ldr	r3, [pc, #144]	; (42159c <lv_cont_create+0x124>)
  42150a:	4798      	blx	r3
    if(copy == NULL) {
  42150c:	b33e      	cbz	r6, 42155e <lv_cont_create+0xe6>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  42150e:	4630      	mov	r0, r6
  421510:	4b1b      	ldr	r3, [pc, #108]	; (421580 <lv_cont_create+0x108>)
  421512:	4798      	blx	r3
        ext->fit_left            = copy_ext->fit_left;
  421514:	7803      	ldrb	r3, [r0, #0]
  421516:	f3c3 1301 	ubfx	r3, r3, #4, #2
  42151a:	7822      	ldrb	r2, [r4, #0]
  42151c:	f363 1205 	bfi	r2, r3, #4, #2
  421520:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
  421522:	7803      	ldrb	r3, [r0, #0]
  421524:	099b      	lsrs	r3, r3, #6
  421526:	b2d2      	uxtb	r2, r2
  421528:	f363 1287 	bfi	r2, r3, #6, #2
  42152c:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
  42152e:	7842      	ldrb	r2, [r0, #1]
  421530:	7863      	ldrb	r3, [r4, #1]
  421532:	f362 0301 	bfi	r3, r2, #0, #2
  421536:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
  421538:	7843      	ldrb	r3, [r0, #1]
  42153a:	f3c3 0381 	ubfx	r3, r3, #2, #2
  42153e:	7862      	ldrb	r2, [r4, #1]
  421540:	f363 0283 	bfi	r2, r3, #2, #2
  421544:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
  421546:	7802      	ldrb	r2, [r0, #0]
  421548:	7823      	ldrb	r3, [r4, #0]
  42154a:	f362 0303 	bfi	r3, r2, #0, #4
  42154e:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  421550:	22ff      	movs	r2, #255	; 0xff
  421552:	4611      	mov	r1, r2
  421554:	4628      	mov	r0, r5
  421556:	4b12      	ldr	r3, [pc, #72]	; (4215a0 <lv_cont_create+0x128>)
  421558:	4798      	blx	r3
}
  42155a:	4628      	mov	r0, r5
  42155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(par != NULL) {
  42155e:	2f00      	cmp	r7, #0
  421560:	d0fb      	beq.n	42155a <lv_cont_create+0xe2>
            lv_theme_apply(cont, LV_THEME_CONT);
  421562:	210b      	movs	r1, #11
  421564:	4628      	mov	r0, r5
  421566:	4b0f      	ldr	r3, [pc, #60]	; (4215a4 <lv_cont_create+0x12c>)
  421568:	4798      	blx	r3
  42156a:	e7f6      	b.n	42155a <lv_cont_create+0xe2>
  42156c:	00406815 	.word	0x00406815
  421570:	00415e79 	.word	0x00415e79
  421574:	2041486c 	.word	0x2041486c
  421578:	20414868 	.word	0x20414868
  42157c:	00405941 	.word	0x00405941
  421580:	00408095 	.word	0x00408095
  421584:	0042c154 	.word	0x0042c154
  421588:	00415e85 	.word	0x00415e85
  42158c:	00408045 	.word	0x00408045
  421590:	0040806d 	.word	0x0040806d
  421594:	004081f5 	.word	0x004081f5
  421598:	00421d31 	.word	0x00421d31
  42159c:	004058dd 	.word	0x004058dd
  4215a0:	00407861 	.word	0x00407861
  4215a4:	004182f9 	.word	0x004182f9

004215a8 <lv_cont_set_layout>:
{
  4215a8:	b538      	push	{r3, r4, r5, lr}
  4215aa:	4604      	mov	r4, r0
  4215ac:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  4215ae:	4b0d      	ldr	r3, [pc, #52]	; (4215e4 <lv_cont_set_layout+0x3c>)
  4215b0:	4798      	blx	r3
  4215b2:	b928      	cbnz	r0, 4215c0 <lv_cont_set_layout+0x18>
  4215b4:	4622      	mov	r2, r4
  4215b6:	2300      	movs	r3, #0
  4215b8:	480b      	ldr	r0, [pc, #44]	; (4215e8 <lv_cont_set_layout+0x40>)
  4215ba:	490c      	ldr	r1, [pc, #48]	; (4215ec <lv_cont_set_layout+0x44>)
  4215bc:	4788      	blx	r1
  4215be:	e7fe      	b.n	4215be <lv_cont_set_layout+0x16>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  4215c0:	4620      	mov	r0, r4
  4215c2:	4b0b      	ldr	r3, [pc, #44]	; (4215f0 <lv_cont_set_layout+0x48>)
  4215c4:	4798      	blx	r3
    if(ext->layout == layout) return;
  4215c6:	7803      	ldrb	r3, [r0, #0]
  4215c8:	f003 030f 	and.w	r3, r3, #15
  4215cc:	42ab      	cmp	r3, r5
  4215ce:	d008      	beq.n	4215e2 <lv_cont_set_layout+0x3a>
    ext->layout = layout;
  4215d0:	7803      	ldrb	r3, [r0, #0]
  4215d2:	f365 0303 	bfi	r3, r5, #0, #4
  4215d6:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
  4215d8:	69e3      	ldr	r3, [r4, #28]
  4215da:	2200      	movs	r2, #0
  4215dc:	2101      	movs	r1, #1
  4215de:	4620      	mov	r0, r4
  4215e0:	4798      	blx	r3
  4215e2:	bd38      	pop	{r3, r4, r5, pc}
  4215e4:	00415e79 	.word	0x00415e79
  4215e8:	0042c168 	.word	0x0042c168
  4215ec:	00415e85 	.word	0x00415e85
  4215f0:	00408095 	.word	0x00408095

004215f4 <lv_cont_set_fit4>:
{
  4215f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4215f8:	4604      	mov	r4, r0
  4215fa:	4688      	mov	r8, r1
  4215fc:	4617      	mov	r7, r2
  4215fe:	461e      	mov	r6, r3
  421600:	f89d 5018 	ldrb.w	r5, [sp, #24]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  421604:	4b1a      	ldr	r3, [pc, #104]	; (421670 <lv_cont_set_fit4+0x7c>)
  421606:	4798      	blx	r3
  421608:	b928      	cbnz	r0, 421616 <lv_cont_set_fit4+0x22>
  42160a:	4622      	mov	r2, r4
  42160c:	2300      	movs	r3, #0
  42160e:	4819      	ldr	r0, [pc, #100]	; (421674 <lv_cont_set_fit4+0x80>)
  421610:	4919      	ldr	r1, [pc, #100]	; (421678 <lv_cont_set_fit4+0x84>)
  421612:	4788      	blx	r1
  421614:	e7fe      	b.n	421614 <lv_cont_set_fit4+0x20>
    lv_obj_invalidate(cont);
  421616:	4620      	mov	r0, r4
  421618:	4b18      	ldr	r3, [pc, #96]	; (42167c <lv_cont_set_fit4+0x88>)
  42161a:	4798      	blx	r3
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  42161c:	4620      	mov	r0, r4
  42161e:	4b18      	ldr	r3, [pc, #96]	; (421680 <lv_cont_set_fit4+0x8c>)
  421620:	4798      	blx	r3
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
  421622:	7803      	ldrb	r3, [r0, #0]
  421624:	f3c3 1301 	ubfx	r3, r3, #4, #2
  421628:	4543      	cmp	r3, r8
  42162a:	d012      	beq.n	421652 <lv_cont_set_fit4+0x5e>
    ext->fit_left   = left;
  42162c:	7803      	ldrb	r3, [r0, #0]
  42162e:	f368 1305 	bfi	r3, r8, #4, #2
    ext->fit_right  = right;
  421632:	f367 1387 	bfi	r3, r7, #6, #2
  421636:	7003      	strb	r3, [r0, #0]
    ext->fit_top    = top;
  421638:	7843      	ldrb	r3, [r0, #1]
  42163a:	f366 0301 	bfi	r3, r6, #0, #2
    ext->fit_bottom = bottom;
  42163e:	f365 0383 	bfi	r3, r5, #2, #2
  421642:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
  421644:	69e3      	ldr	r3, [r4, #28]
  421646:	2200      	movs	r2, #0
  421648:	2101      	movs	r1, #1
  42164a:	4620      	mov	r0, r4
  42164c:	4798      	blx	r3
  42164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
  421652:	7803      	ldrb	r3, [r0, #0]
  421654:	ebb7 1f93 	cmp.w	r7, r3, lsr #6
  421658:	d1e8      	bne.n	42162c <lv_cont_set_fit4+0x38>
  42165a:	7843      	ldrb	r3, [r0, #1]
  42165c:	f003 0303 	and.w	r3, r3, #3
  421660:	42b3      	cmp	r3, r6
  421662:	d1e3      	bne.n	42162c <lv_cont_set_fit4+0x38>
  421664:	7843      	ldrb	r3, [r0, #1]
  421666:	f3c3 0381 	ubfx	r3, r3, #2, #2
  42166a:	42ab      	cmp	r3, r5
  42166c:	d1de      	bne.n	42162c <lv_cont_set_fit4+0x38>
  42166e:	e7ee      	b.n	42164e <lv_cont_set_fit4+0x5a>
  421670:	00415e79 	.word	0x00415e79
  421674:	0042c168 	.word	0x0042c168
  421678:	00415e85 	.word	0x00415e85
  42167c:	00405f59 	.word	0x00405f59
  421680:	00408095 	.word	0x00408095

00421684 <lv_cont_get_layout>:
{
  421684:	b510      	push	{r4, lr}
  421686:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  421688:	4b07      	ldr	r3, [pc, #28]	; (4216a8 <lv_cont_get_layout+0x24>)
  42168a:	4798      	blx	r3
  42168c:	b928      	cbnz	r0, 42169a <lv_cont_get_layout+0x16>
  42168e:	4622      	mov	r2, r4
  421690:	2300      	movs	r3, #0
  421692:	4806      	ldr	r0, [pc, #24]	; (4216ac <lv_cont_get_layout+0x28>)
  421694:	4906      	ldr	r1, [pc, #24]	; (4216b0 <lv_cont_get_layout+0x2c>)
  421696:	4788      	blx	r1
  421698:	e7fe      	b.n	421698 <lv_cont_get_layout+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  42169a:	4620      	mov	r0, r4
  42169c:	4b05      	ldr	r3, [pc, #20]	; (4216b4 <lv_cont_get_layout+0x30>)
  42169e:	4798      	blx	r3
    return ext->layout;
  4216a0:	7800      	ldrb	r0, [r0, #0]
}
  4216a2:	f000 000f 	and.w	r0, r0, #15
  4216a6:	bd10      	pop	{r4, pc}
  4216a8:	00415e79 	.word	0x00415e79
  4216ac:	0042c168 	.word	0x0042c168
  4216b0:	00415e85 	.word	0x00415e85
  4216b4:	00408095 	.word	0x00408095

004216b8 <lv_cont_layout_col>:
{
  4216b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4216bc:	b085      	sub	sp, #20
  4216be:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4216c0:	2212      	movs	r2, #18
  4216c2:	2100      	movs	r1, #0
  4216c4:	4c3c      	ldr	r4, [pc, #240]	; (4217b8 <lv_cont_layout_col+0x100>)
  4216c6:	47a0      	blx	r4
  4216c8:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4216ca:	2213      	movs	r2, #19
  4216cc:	2100      	movs	r1, #0
  4216ce:	4648      	mov	r0, r9
  4216d0:	47a0      	blx	r4
  4216d2:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4216d4:	2210      	movs	r2, #16
  4216d6:	2100      	movs	r1, #0
  4216d8:	4648      	mov	r0, r9
  4216da:	47a0      	blx	r4
  4216dc:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4216de:	2214      	movs	r2, #20
  4216e0:	2100      	movs	r1, #0
  4216e2:	4648      	mov	r0, r9
  4216e4:	47a0      	blx	r4
  4216e6:	9002      	str	r0, [sp, #8]
    lv_layout_t type = lv_cont_get_layout(cont);
  4216e8:	4648      	mov	r0, r9
  4216ea:	4b34      	ldr	r3, [pc, #208]	; (4217bc <lv_cont_layout_col+0x104>)
  4216ec:	4798      	blx	r3
    switch(type) {
  4216ee:	2803      	cmp	r0, #3
  4216f0:	d01c      	beq.n	42172c <lv_cont_layout_col+0x74>
  4216f2:	2804      	cmp	r0, #4
  4216f4:	d013      	beq.n	42171e <lv_cont_layout_col+0x66>
  4216f6:	2802      	cmp	r0, #2
  4216f8:	d004      	beq.n	421704 <lv_cont_layout_col+0x4c>
            hpad_corr = 0;
  4216fa:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_LEFT;
  4216fe:	2301      	movs	r3, #1
  421700:	9303      	str	r3, [sp, #12]
            break;
  421702:	e001      	b.n	421708 <lv_cont_layout_col+0x50>
            align     = LV_ALIGN_IN_TOP_LEFT;
  421704:	2301      	movs	r3, #1
  421706:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421708:	2101      	movs	r1, #1
  42170a:	4648      	mov	r0, r9
  42170c:	4b2c      	ldr	r3, [pc, #176]	; (4217c0 <lv_cont_layout_col+0x108>)
  42170e:	4798      	blx	r3
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421710:	f109 0804 	add.w	r8, r9, #4
  421714:	4640      	mov	r0, r8
  421716:	4b2b      	ldr	r3, [pc, #172]	; (4217c4 <lv_cont_layout_col+0x10c>)
  421718:	4798      	blx	r3
  42171a:	4604      	mov	r4, r0
  42171c:	e010      	b.n	421740 <lv_cont_layout_col+0x88>
            hpad_corr = -right;
  42171e:	f1c6 0a00 	rsb	sl, r6, #0
  421722:	fa0f fa8a 	sxth.w	sl, sl
            align     = LV_ALIGN_IN_TOP_RIGHT;
  421726:	2303      	movs	r3, #3
  421728:	9303      	str	r3, [sp, #12]
            break;
  42172a:	e7ed      	b.n	421708 <lv_cont_layout_col+0x50>
            hpad_corr = 0;
  42172c:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_MID;
  421730:	2302      	movs	r3, #2
  421732:	9303      	str	r3, [sp, #12]
  421734:	e7e8      	b.n	421708 <lv_cont_layout_col+0x50>
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421736:	4621      	mov	r1, r4
  421738:	4640      	mov	r0, r8
  42173a:	4b23      	ldr	r3, [pc, #140]	; (4217c8 <lv_cont_layout_col+0x110>)
  42173c:	4798      	blx	r3
  42173e:	4604      	mov	r4, r0
  421740:	2c00      	cmp	r4, #0
  421742:	d031      	beq.n	4217a8 <lv_cont_layout_col+0xf0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  421744:	4620      	mov	r0, r4
  421746:	4b21      	ldr	r3, [pc, #132]	; (4217cc <lv_cont_layout_col+0x114>)
  421748:	4798      	blx	r3
  42174a:	2800      	cmp	r0, #0
  42174c:	d1f3      	bne.n	421736 <lv_cont_layout_col+0x7e>
  42174e:	2104      	movs	r1, #4
  421750:	4620      	mov	r0, r4
  421752:	4b1f      	ldr	r3, [pc, #124]	; (4217d0 <lv_cont_layout_col+0x118>)
  421754:	4798      	blx	r3
  421756:	2800      	cmp	r0, #0
  421758:	d1ed      	bne.n	421736 <lv_cont_layout_col+0x7e>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  42175a:	2215      	movs	r2, #21
  42175c:	2100      	movs	r1, #0
  42175e:	4620      	mov	r0, r4
  421760:	f8df b054 	ldr.w	fp, [pc, #84]	; 4217b8 <lv_cont_layout_col+0x100>
  421764:	47d8      	blx	fp
  421766:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421768:	2216      	movs	r2, #22
  42176a:	2100      	movs	r1, #0
  42176c:	4620      	mov	r0, r4
  42176e:	47d8      	blx	fp
  421770:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  421772:	2217      	movs	r2, #23
  421774:	2100      	movs	r1, #0
  421776:	4620      	mov	r0, r4
  421778:	47d8      	blx	fp
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
  42177a:	eb0a 0300 	add.w	r3, sl, r0
  42177e:	b2ad      	uxth	r5, r5
  421780:	19aa      	adds	r2, r5, r6
  421782:	b212      	sxth	r2, r2
  421784:	9200      	str	r2, [sp, #0]
  421786:	b21b      	sxth	r3, r3
  421788:	9a03      	ldr	r2, [sp, #12]
  42178a:	4649      	mov	r1, r9
  42178c:	4620      	mov	r0, r4
  42178e:	f8df b04c 	ldr.w	fp, [pc, #76]	; 4217dc <lv_cont_layout_col+0x124>
  421792:	47d8      	blx	fp
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
  421794:	4620      	mov	r0, r4
  421796:	4b0f      	ldr	r3, [pc, #60]	; (4217d4 <lv_cont_layout_col+0x11c>)
  421798:	4798      	blx	r3
  42179a:	9b02      	ldr	r3, [sp, #8]
  42179c:	4418      	add	r0, r3
  42179e:	4406      	add	r6, r0
  4217a0:	443e      	add	r6, r7
  4217a2:	4435      	add	r5, r6
  4217a4:	b22d      	sxth	r5, r5
  4217a6:	e7c6      	b.n	421736 <lv_cont_layout_col+0x7e>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  4217a8:	2101      	movs	r1, #1
  4217aa:	4648      	mov	r0, r9
  4217ac:	4b0a      	ldr	r3, [pc, #40]	; (4217d8 <lv_cont_layout_col+0x120>)
  4217ae:	4798      	blx	r3
}
  4217b0:	b005      	add	sp, #20
  4217b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4217b6:	bf00      	nop
  4217b8:	00407445 	.word	0x00407445
  4217bc:	00421685 	.word	0x00421685
  4217c0:	00405751 	.word	0x00405751
  4217c4:	00416193 	.word	0x00416193
  4217c8:	004161ab 	.word	0x004161ab
  4217cc:	00405dc9 	.word	0x00405dc9
  4217d0:	00406dad 	.word	0x00406dad
  4217d4:	00405bb1 	.word	0x00405bb1
  4217d8:	00405781 	.word	0x00405781
  4217dc:	00406201 	.word	0x00406201

004217e0 <lv_cont_layout_row>:
{
  4217e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4217e4:	b085      	sub	sp, #20
  4217e6:	4607      	mov	r7, r0
    lv_layout_t type = lv_cont_get_layout(cont);
  4217e8:	4b4d      	ldr	r3, [pc, #308]	; (421920 <lv_cont_layout_row+0x140>)
  4217ea:	4798      	blx	r3
  4217ec:	4604      	mov	r4, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
  4217ee:	4638      	mov	r0, r7
  4217f0:	4b4c      	ldr	r3, [pc, #304]	; (421924 <lv_cont_layout_row+0x144>)
  4217f2:	4798      	blx	r3
  4217f4:	4680      	mov	r8, r0
    switch(type) {
  4217f6:	2c06      	cmp	r4, #6
  4217f8:	d031      	beq.n	42185e <lv_cont_layout_row+0x7e>
  4217fa:	2c07      	cmp	r4, #7
  4217fc:	d03b      	beq.n	421876 <lv_cont_layout_row+0x96>
  4217fe:	2c05      	cmp	r4, #5
  421800:	d006      	beq.n	421810 <lv_cont_layout_row+0x30>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  421802:	2801      	cmp	r0, #1
  421804:	d04b      	beq.n	42189e <lv_cont_layout_row+0xbe>
            vpad_corr = 0;
  421806:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  42180a:	2301      	movs	r3, #1
  42180c:	9303      	str	r3, [sp, #12]
  42180e:	e00a      	b.n	421826 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421810:	2210      	movs	r2, #16
  421812:	2100      	movs	r1, #0
  421814:	4638      	mov	r0, r7
  421816:	4b44      	ldr	r3, [pc, #272]	; (421928 <lv_cont_layout_row+0x148>)
  421818:	4798      	blx	r3
  42181a:	4681      	mov	r9, r0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  42181c:	f1b8 0f01 	cmp.w	r8, #1
  421820:	d01a      	beq.n	421858 <lv_cont_layout_row+0x78>
  421822:	2301      	movs	r3, #1
  421824:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421826:	2101      	movs	r1, #1
  421828:	4638      	mov	r0, r7
  42182a:	4b40      	ldr	r3, [pc, #256]	; (42192c <lv_cont_layout_row+0x14c>)
  42182c:	4798      	blx	r3
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  42182e:	f1b8 0f01 	cmp.w	r8, #1
  421832:	d039      	beq.n	4218a8 <lv_cont_layout_row+0xc8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  421834:	2212      	movs	r2, #18
  421836:	2100      	movs	r1, #0
  421838:	4638      	mov	r0, r7
  42183a:	4b3b      	ldr	r3, [pc, #236]	; (421928 <lv_cont_layout_row+0x148>)
  42183c:	4798      	blx	r3
  42183e:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  421840:	2214      	movs	r2, #20
  421842:	2100      	movs	r1, #0
  421844:	4638      	mov	r0, r7
  421846:	4b38      	ldr	r3, [pc, #224]	; (421928 <lv_cont_layout_row+0x148>)
  421848:	4798      	blx	r3
  42184a:	4682      	mov	sl, r0
    _LV_LL_READ_BACK(cont->child_ll, child) {
  42184c:	1d3d      	adds	r5, r7, #4
  42184e:	4628      	mov	r0, r5
  421850:	4b37      	ldr	r3, [pc, #220]	; (421930 <lv_cont_layout_row+0x150>)
  421852:	4798      	blx	r3
  421854:	4604      	mov	r4, r0
  421856:	e043      	b.n	4218e0 <lv_cont_layout_row+0x100>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  421858:	2303      	movs	r3, #3
  42185a:	9303      	str	r3, [sp, #12]
  42185c:	e7e3      	b.n	421826 <lv_cont_layout_row+0x46>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  42185e:	2801      	cmp	r0, #1
  421860:	d004      	beq.n	42186c <lv_cont_layout_row+0x8c>
            vpad_corr = 0;
  421862:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  421866:	2307      	movs	r3, #7
  421868:	9303      	str	r3, [sp, #12]
  42186a:	e7dc      	b.n	421826 <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  42186c:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  421870:	2308      	movs	r3, #8
  421872:	9303      	str	r3, [sp, #12]
  421874:	e7d7      	b.n	421826 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  421876:	2211      	movs	r2, #17
  421878:	2100      	movs	r1, #0
  42187a:	4638      	mov	r0, r7
  42187c:	4b2a      	ldr	r3, [pc, #168]	; (421928 <lv_cont_layout_row+0x148>)
  42187e:	4798      	blx	r3
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  421880:	fa1f f980 	uxth.w	r9, r0
  421884:	f1c9 0900 	rsb	r9, r9, #0
  421888:	fa0f f989 	sxth.w	r9, r9
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
  42188c:	f1b8 0f01 	cmp.w	r8, #1
  421890:	d002      	beq.n	421898 <lv_cont_layout_row+0xb8>
  421892:	2304      	movs	r3, #4
  421894:	9303      	str	r3, [sp, #12]
  421896:	e7c6      	b.n	421826 <lv_cont_layout_row+0x46>
  421898:	2306      	movs	r3, #6
  42189a:	9303      	str	r3, [sp, #12]
  42189c:	e7c3      	b.n	421826 <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  42189e:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  4218a2:	2303      	movs	r3, #3
  4218a4:	9303      	str	r3, [sp, #12]
  4218a6:	e7be      	b.n	421826 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4218a8:	2213      	movs	r2, #19
  4218aa:	2100      	movs	r1, #0
  4218ac:	4638      	mov	r0, r7
  4218ae:	4b1e      	ldr	r3, [pc, #120]	; (421928 <lv_cont_layout_row+0x148>)
  4218b0:	4798      	blx	r3
  4218b2:	4606      	mov	r6, r0
  4218b4:	e7c4      	b.n	421840 <lv_cont_layout_row+0x60>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  4218b6:	4273      	negs	r3, r6
  4218b8:	f8cd 9000 	str.w	r9, [sp]
  4218bc:	b21b      	sxth	r3, r3
  4218be:	9a03      	ldr	r2, [sp, #12]
  4218c0:	4639      	mov	r1, r7
  4218c2:	4620      	mov	r0, r4
  4218c4:	f8df b080 	ldr.w	fp, [pc, #128]	; 421948 <lv_cont_layout_row+0x168>
  4218c8:	47d8      	blx	fp
        last_cord += lv_obj_get_width(child) + inner;
  4218ca:	4620      	mov	r0, r4
  4218cc:	4b19      	ldr	r3, [pc, #100]	; (421934 <lv_cont_layout_row+0x154>)
  4218ce:	4798      	blx	r3
  4218d0:	4450      	add	r0, sl
  4218d2:	4406      	add	r6, r0
  4218d4:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  4218d6:	4621      	mov	r1, r4
  4218d8:	4628      	mov	r0, r5
  4218da:	4b17      	ldr	r3, [pc, #92]	; (421938 <lv_cont_layout_row+0x158>)
  4218dc:	4798      	blx	r3
  4218de:	4604      	mov	r4, r0
  4218e0:	b1bc      	cbz	r4, 421912 <lv_cont_layout_row+0x132>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  4218e2:	4620      	mov	r0, r4
  4218e4:	4b15      	ldr	r3, [pc, #84]	; (42193c <lv_cont_layout_row+0x15c>)
  4218e6:	4798      	blx	r3
  4218e8:	2800      	cmp	r0, #0
  4218ea:	d1f4      	bne.n	4218d6 <lv_cont_layout_row+0xf6>
  4218ec:	2104      	movs	r1, #4
  4218ee:	4620      	mov	r0, r4
  4218f0:	4b13      	ldr	r3, [pc, #76]	; (421940 <lv_cont_layout_row+0x160>)
  4218f2:	4798      	blx	r3
  4218f4:	2800      	cmp	r0, #0
  4218f6:	d1ee      	bne.n	4218d6 <lv_cont_layout_row+0xf6>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  4218f8:	f1b8 0f01 	cmp.w	r8, #1
  4218fc:	d0db      	beq.n	4218b6 <lv_cont_layout_row+0xd6>
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
  4218fe:	f8cd 9000 	str.w	r9, [sp]
  421902:	4633      	mov	r3, r6
  421904:	9a03      	ldr	r2, [sp, #12]
  421906:	4639      	mov	r1, r7
  421908:	4620      	mov	r0, r4
  42190a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 421948 <lv_cont_layout_row+0x168>
  42190e:	47d8      	blx	fp
  421910:	e7db      	b.n	4218ca <lv_cont_layout_row+0xea>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  421912:	2101      	movs	r1, #1
  421914:	4638      	mov	r0, r7
  421916:	4b0b      	ldr	r3, [pc, #44]	; (421944 <lv_cont_layout_row+0x164>)
  421918:	4798      	blx	r3
}
  42191a:	b005      	add	sp, #20
  42191c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421920:	00421685 	.word	0x00421685
  421924:	004067ed 	.word	0x004067ed
  421928:	00407445 	.word	0x00407445
  42192c:	00405751 	.word	0x00405751
  421930:	00416193 	.word	0x00416193
  421934:	00405b81 	.word	0x00405b81
  421938:	004161ab 	.word	0x004161ab
  42193c:	00405dc9 	.word	0x00405dc9
  421940:	00406dad 	.word	0x00406dad
  421944:	00405781 	.word	0x00405781
  421948:	00406201 	.word	0x00406201

0042194c <lv_cont_layout_pretty>:
{
  42194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421950:	b08d      	sub	sp, #52	; 0x34
  421952:	4604      	mov	r4, r0
  421954:	9006      	str	r0, [sp, #24]
    lv_layout_t type = lv_cont_get_layout(cont);
  421956:	4bac      	ldr	r3, [pc, #688]	; (421c08 <lv_cont_layout_pretty+0x2bc>)
  421958:	4798      	blx	r3
  42195a:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t w_obj         = lv_obj_get_width(cont);
  42195c:	4620      	mov	r0, r4
  42195e:	4bab      	ldr	r3, [pc, #684]	; (421c0c <lv_cont_layout_pretty+0x2c0>)
  421960:	4798      	blx	r3
  421962:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421964:	2210      	movs	r2, #16
  421966:	2100      	movs	r1, #0
  421968:	4620      	mov	r0, r4
  42196a:	4ba9      	ldr	r3, [pc, #676]	; (421c10 <lv_cont_layout_pretty+0x2c4>)
  42196c:	4798      	blx	r3
  42196e:	9004      	str	r0, [sp, #16]
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
  421970:	4623      	mov	r3, r4
  421972:	3304      	adds	r3, #4
  421974:	9302      	str	r3, [sp, #8]
  421976:	4618      	mov	r0, r3
  421978:	4ba6      	ldr	r3, [pc, #664]	; (421c14 <lv_cont_layout_pretty+0x2c8>)
  42197a:	4798      	blx	r3
    if(child_rs == NULL) return;                /*Return if no child*/
  42197c:	2800      	cmp	r0, #0
  42197e:	f000 8184 	beq.w	421c8a <lv_cont_layout_pretty+0x33e>
  421982:	4625      	mov	r5, r4
  421984:	4682      	mov	sl, r0
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421986:	2101      	movs	r1, #1
  421988:	4620      	mov	r0, r4
  42198a:	4ba3      	ldr	r3, [pc, #652]	; (421c18 <lv_cont_layout_pretty+0x2cc>)
  42198c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  42198e:	2212      	movs	r2, #18
  421990:	2100      	movs	r1, #0
  421992:	4620      	mov	r0, r4
  421994:	4c9e      	ldr	r4, [pc, #632]	; (421c10 <lv_cont_layout_pretty+0x2c4>)
  421996:	47a0      	blx	r4
  421998:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  42199a:	2213      	movs	r2, #19
  42199c:	2100      	movs	r1, #0
  42199e:	4628      	mov	r0, r5
  4219a0:	47a0      	blx	r4
  4219a2:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4219a4:	2214      	movs	r2, #20
  4219a6:	2100      	movs	r1, #0
  4219a8:	4628      	mov	r0, r5
  4219aa:	47a0      	blx	r4
  4219ac:	4683      	mov	fp, r0
    while(child_rs != NULL) {
  4219ae:	e08a      	b.n	421ac6 <lv_cont_layout_pretty+0x17a>
  4219b0:	464d      	mov	r5, r9
                    if(child_rc != NULL && obj_num != 0) {
  4219b2:	2c00      	cmp	r4, #0
  4219b4:	bf18      	it	ne
  4219b6:	2f00      	cmpne	r7, #0
  4219b8:	d056      	beq.n	421a68 <lv_cont_layout_pretty+0x11c>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
  4219ba:	4621      	mov	r1, r4
  4219bc:	9802      	ldr	r0, [sp, #8]
  4219be:	4b97      	ldr	r3, [pc, #604]	; (421c1c <lv_cont_layout_pretty+0x2d0>)
  4219c0:	4798      	blx	r3
  4219c2:	4604      	mov	r4, r0
  4219c4:	e050      	b.n	421a68 <lv_cont_layout_pretty+0x11c>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
  4219c6:	4621      	mov	r1, r4
  4219c8:	9802      	ldr	r0, [sp, #8]
  4219ca:	4b95      	ldr	r3, [pc, #596]	; (421c20 <lv_cont_layout_pretty+0x2d4>)
  4219cc:	4798      	blx	r3
  4219ce:	4604      	mov	r4, r0
            if(obj_num == 0)
  4219d0:	b907      	cbnz	r7, 4219d4 <lv_cont_layout_pretty+0x88>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
  4219d2:	4682      	mov	sl, r0
        } while(child_rc != NULL);
  4219d4:	2c00      	cmp	r4, #0
  4219d6:	d046      	beq.n	421a66 <lv_cont_layout_pretty+0x11a>
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
  4219d8:	4620      	mov	r0, r4
  4219da:	4b92      	ldr	r3, [pc, #584]	; (421c24 <lv_cont_layout_pretty+0x2d8>)
  4219dc:	4798      	blx	r3
  4219de:	2800      	cmp	r0, #0
  4219e0:	d1f1      	bne.n	4219c6 <lv_cont_layout_pretty+0x7a>
  4219e2:	2104      	movs	r1, #4
  4219e4:	4620      	mov	r0, r4
  4219e6:	4b90      	ldr	r3, [pc, #576]	; (421c28 <lv_cont_layout_pretty+0x2dc>)
  4219e8:	4798      	blx	r3
  4219ea:	2800      	cmp	r0, #0
  4219ec:	d1eb      	bne.n	4219c6 <lv_cont_layout_pretty+0x7a>
                lv_coord_t w = lv_obj_get_width(child_rc);
  4219ee:	4620      	mov	r0, r4
  4219f0:	4b86      	ldr	r3, [pc, #536]	; (421c0c <lv_cont_layout_pretty+0x2c0>)
  4219f2:	4798      	blx	r3
  4219f4:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  4219f6:	2217      	movs	r2, #23
  4219f8:	2100      	movs	r1, #0
  4219fa:	4620      	mov	r0, r4
  4219fc:	4d84      	ldr	r5, [pc, #528]	; (421c10 <lv_cont_layout_pretty+0x2c4>)
  4219fe:	47a8      	blx	r5
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
  421a00:	fa16 f680 	uxtah	r6, r6, r0
  421a04:	b2b6      	uxth	r6, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  421a06:	2218      	movs	r2, #24
  421a08:	2100      	movs	r1, #0
  421a0a:	4620      	mov	r0, r4
  421a0c:	47a8      	blx	r5
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
  421a0e:	fa16 f080 	uxtah	r0, r6, r0
  421a12:	b280      	uxth	r0, r0
                if(w_row + w > w_obj) {
  421a14:	fa09 f380 	sxtah	r3, r9, r0
  421a18:	9a03      	ldr	r2, [sp, #12]
  421a1a:	4293      	cmp	r3, r2
  421a1c:	dcc8      	bgt.n	4219b0 <lv_cont_layout_pretty+0x64>
                w_row += w + pinner; /*Add the object width + inner padding*/
  421a1e:	4458      	add	r0, fp
  421a20:	fa19 f980 	uxtah	r9, r9, r0
  421a24:	fa0f f989 	sxth.w	r9, r9
                lv_coord_t h = lv_obj_get_height(child_rc);
  421a28:	4620      	mov	r0, r4
  421a2a:	4b80      	ldr	r3, [pc, #512]	; (421c2c <lv_cont_layout_pretty+0x2e0>)
  421a2c:	4798      	blx	r3
  421a2e:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  421a30:	2215      	movs	r2, #21
  421a32:	2100      	movs	r1, #0
  421a34:	4620      	mov	r0, r4
  421a36:	4e76      	ldr	r6, [pc, #472]	; (421c10 <lv_cont_layout_pretty+0x2c4>)
  421a38:	47b0      	blx	r6
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
  421a3a:	fa15 f580 	uxtah	r5, r5, r0
  421a3e:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421a40:	2216      	movs	r2, #22
  421a42:	2100      	movs	r1, #0
  421a44:	4620      	mov	r0, r4
  421a46:	47b0      	blx	r6
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  421a48:	fa15 f080 	uxtah	r0, r5, r0
  421a4c:	b200      	sxth	r0, r0
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
  421a4e:	4580      	cmp	r8, r0
  421a50:	bfb8      	it	lt
  421a52:	4680      	movlt	r8, r0
                obj_num++;
  421a54:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
  421a56:	2108      	movs	r1, #8
  421a58:	4620      	mov	r0, r4
  421a5a:	4b73      	ldr	r3, [pc, #460]	; (421c28 <lv_cont_layout_pretty+0x2dc>)
  421a5c:	4798      	blx	r3
  421a5e:	2800      	cmp	r0, #0
  421a60:	d0b1      	beq.n	4219c6 <lv_cont_layout_pretty+0x7a>
  421a62:	464d      	mov	r5, r9
  421a64:	e000      	b.n	421a68 <lv_cont_layout_pretty+0x11c>
  421a66:	464d      	mov	r5, r9
        if(obj_num == 0) {
  421a68:	2f00      	cmp	r7, #0
  421a6a:	d139      	bne.n	421ae0 <lv_cont_layout_pretty+0x194>
            if(child_rc != NULL) {
  421a6c:	b1e4      	cbz	r4, 421aa8 <lv_cont_layout_pretty+0x15c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  421a6e:	2215      	movs	r2, #21
  421a70:	2100      	movs	r1, #0
  421a72:	4620      	mov	r0, r4
  421a74:	4e66      	ldr	r6, [pc, #408]	; (421c10 <lv_cont_layout_pretty+0x2c4>)
  421a76:	47b0      	blx	r6
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
  421a78:	b285      	uxth	r5, r0
  421a7a:	9b04      	ldr	r3, [sp, #16]
  421a7c:	18eb      	adds	r3, r5, r3
  421a7e:	b21b      	sxth	r3, r3
  421a80:	9300      	str	r3, [sp, #0]
  421a82:	2300      	movs	r3, #0
  421a84:	2202      	movs	r2, #2
  421a86:	9906      	ldr	r1, [sp, #24]
  421a88:	4620      	mov	r0, r4
  421a8a:	4f69      	ldr	r7, [pc, #420]	; (421c30 <lv_cont_layout_pretty+0x2e4>)
  421a8c:	47b8      	blx	r7
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
  421a8e:	4620      	mov	r0, r4
  421a90:	4b66      	ldr	r3, [pc, #408]	; (421c2c <lv_cont_layout_pretty+0x2e0>)
  421a92:	4798      	blx	r3
                h_row += mtop;
  421a94:	4405      	add	r5, r0
  421a96:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421a98:	2216      	movs	r2, #22
  421a9a:	2100      	movs	r1, #0
  421a9c:	4620      	mov	r0, r4
  421a9e:	47b0      	blx	r6
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  421aa0:	fa15 f080 	uxtah	r0, r5, r0
  421aa4:	fa0f f880 	sxth.w	r8, r0
        if(child_rc == NULL) break;
  421aa8:	2c00      	cmp	r4, #0
  421aaa:	f000 80ea 	beq.w	421c82 <lv_cont_layout_pretty+0x336>
        act_y += pinner + h_row;           /*y increment*/
  421aae:	44d8      	add	r8, fp
  421ab0:	9b04      	ldr	r3, [sp, #16]
  421ab2:	fa13 f888 	uxtah	r8, r3, r8
  421ab6:	fa0f f388 	sxth.w	r3, r8
  421aba:	9304      	str	r3, [sp, #16]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
  421abc:	4621      	mov	r1, r4
  421abe:	9802      	ldr	r0, [sp, #8]
  421ac0:	4b57      	ldr	r3, [pc, #348]	; (421c20 <lv_cont_layout_pretty+0x2d4>)
  421ac2:	4798      	blx	r3
  421ac4:	4682      	mov	sl, r0
    while(child_rs != NULL) {
  421ac6:	f1ba 0f00 	cmp.w	sl, #0
  421aca:	f000 80da 	beq.w	421c82 <lv_cont_layout_pretty+0x336>
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
  421ace:	9b05      	ldr	r3, [sp, #20]
  421ad0:	9a07      	ldr	r2, [sp, #28]
  421ad2:	189d      	adds	r5, r3, r2
  421ad4:	b22d      	sxth	r5, r5
  421ad6:	4654      	mov	r4, sl
        uint32_t obj_num = 0;
  421ad8:	2700      	movs	r7, #0
        lv_coord_t h_row = 0;
  421ada:	46b8      	mov	r8, r7
  421adc:	46a9      	mov	r9, r5
  421ade:	e77b      	b.n	4219d8 <lv_cont_layout_pretty+0x8c>
        else if(obj_num == 1) {
  421ae0:	2f01      	cmp	r7, #1
  421ae2:	d015      	beq.n	421b10 <lv_cont_layout_pretty+0x1c4>
            w_row -= pinner * obj_num;
  421ae4:	fb1b f307 	smulbb	r3, fp, r7
  421ae8:	1aeb      	subs	r3, r5, r3
  421aea:	b21b      	sxth	r3, r3
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
  421aec:	9a03      	ldr	r2, [sp, #12]
  421aee:	1ad3      	subs	r3, r2, r3
  421af0:	3f01      	subs	r7, #1
  421af2:	fbb3 f7f7 	udiv	r7, r3, r7
  421af6:	b23d      	sxth	r5, r7
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
  421af8:	9806      	ldr	r0, [sp, #24]
  421afa:	4b4e      	ldr	r3, [pc, #312]	; (421c34 <lv_cont_layout_pretty+0x2e8>)
  421afc:	4798      	blx	r3
  421afe:	2801      	cmp	r0, #1
  421b00:	d017      	beq.n	421b32 <lv_cont_layout_pretty+0x1e6>
                inv = 1;
  421b02:	2301      	movs	r3, #1
  421b04:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_LEFT;
  421b06:	9309      	str	r3, [sp, #36]	; 0x24
                align = LV_ALIGN_IN_TOP_RIGHT;
  421b08:	f8dd 9014 	ldr.w	r9, [sp, #20]
  421b0c:	4656      	mov	r6, sl
  421b0e:	e03e      	b.n	421b8e <lv_cont_layout_pretty+0x242>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  421b10:	2215      	movs	r2, #21
  421b12:	2100      	movs	r1, #0
  421b14:	4650      	mov	r0, sl
  421b16:	4b3e      	ldr	r3, [pc, #248]	; (421c10 <lv_cont_layout_pretty+0x2c4>)
  421b18:	4798      	blx	r3
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
  421b1a:	9b04      	ldr	r3, [sp, #16]
  421b1c:	fa13 f380 	uxtah	r3, r3, r0
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
  421b20:	b21b      	sxth	r3, r3
  421b22:	9300      	str	r3, [sp, #0]
  421b24:	2300      	movs	r3, #0
  421b26:	2202      	movs	r2, #2
  421b28:	9906      	ldr	r1, [sp, #24]
  421b2a:	4650      	mov	r0, sl
  421b2c:	4d40      	ldr	r5, [pc, #256]	; (421c30 <lv_cont_layout_pretty+0x2e4>)
  421b2e:	47a8      	blx	r5
  421b30:	e7ba      	b.n	421aa8 <lv_cont_layout_pretty+0x15c>
                inv = -1;
  421b32:	f04f 33ff 	mov.w	r3, #4294967295
  421b36:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_RIGHT;
  421b38:	2303      	movs	r3, #3
  421b3a:	9309      	str	r3, [sp, #36]	; 0x24
  421b3c:	e7e4      	b.n	421b08 <lv_cont_layout_pretty+0x1bc>
                                         inv * (act_x + mleft),
  421b3e:	eb09 0a07 	add.w	sl, r9, r7
  421b42:	2215      	movs	r2, #21
  421b44:	2100      	movs	r1, #0
  421b46:	4630      	mov	r0, r6
  421b48:	4b31      	ldr	r3, [pc, #196]	; (421c10 <lv_cont_layout_pretty+0x2c4>)
  421b4a:	4798      	blx	r3
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
  421b4c:	9b04      	ldr	r3, [sp, #16]
  421b4e:	fa13 f280 	uxtah	r2, r3, r0
                            lv_obj_align(child_tmp, cont, align,
  421b52:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  421b56:	fb1a f303 	smulbb	r3, sl, r3
  421b5a:	b212      	sxth	r2, r2
  421b5c:	9200      	str	r2, [sp, #0]
  421b5e:	b21b      	sxth	r3, r3
  421b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
  421b62:	9906      	ldr	r1, [sp, #24]
  421b64:	4630      	mov	r0, r6
  421b66:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 421c30 <lv_cont_layout_pretty+0x2e4>
  421b6a:	47d0      	blx	sl
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
  421b6c:	4630      	mov	r0, r6
  421b6e:	4b27      	ldr	r3, [pc, #156]	; (421c0c <lv_cont_layout_pretty+0x2c0>)
  421b70:	4798      	blx	r3
  421b72:	182b      	adds	r3, r5, r0
  421b74:	443b      	add	r3, r7
  421b76:	9a08      	ldr	r2, [sp, #32]
  421b78:	441a      	add	r2, r3
  421b7a:	4491      	add	r9, r2
  421b7c:	fa0f f989 	sxth.w	r9, r9
                if(child_tmp == child_rc) break;
  421b80:	42b4      	cmp	r4, r6
  421b82:	d091      	beq.n	421aa8 <lv_cont_layout_pretty+0x15c>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
  421b84:	4631      	mov	r1, r6
  421b86:	9802      	ldr	r0, [sp, #8]
  421b88:	4b25      	ldr	r3, [pc, #148]	; (421c20 <lv_cont_layout_pretty+0x2d4>)
  421b8a:	4798      	blx	r3
  421b8c:	4606      	mov	r6, r0
            while(child_tmp != NULL) {
  421b8e:	2e00      	cmp	r6, #0
  421b90:	d08a      	beq.n	421aa8 <lv_cont_layout_pretty+0x15c>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
  421b92:	4630      	mov	r0, r6
  421b94:	4b23      	ldr	r3, [pc, #140]	; (421c24 <lv_cont_layout_pretty+0x2d8>)
  421b96:	4798      	blx	r3
  421b98:	2800      	cmp	r0, #0
  421b9a:	d1f1      	bne.n	421b80 <lv_cont_layout_pretty+0x234>
  421b9c:	2104      	movs	r1, #4
  421b9e:	4630      	mov	r0, r6
  421ba0:	4b21      	ldr	r3, [pc, #132]	; (421c28 <lv_cont_layout_pretty+0x2dc>)
  421ba2:	4798      	blx	r3
  421ba4:	2800      	cmp	r0, #0
  421ba6:	d1eb      	bne.n	421b80 <lv_cont_layout_pretty+0x234>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  421ba8:	2217      	movs	r2, #23
  421baa:	2100      	movs	r1, #0
  421bac:	4630      	mov	r0, r6
  421bae:	f8df a060 	ldr.w	sl, [pc, #96]	; 421c10 <lv_cont_layout_pretty+0x2c4>
  421bb2:	47d0      	blx	sl
  421bb4:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  421bb6:	2218      	movs	r2, #24
  421bb8:	2100      	movs	r1, #0
  421bba:	4630      	mov	r0, r6
  421bbc:	47d0      	blx	sl
  421bbe:	9008      	str	r0, [sp, #32]
                    switch(type) {
  421bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  421bc2:	2b09      	cmp	r3, #9
  421bc4:	d004      	beq.n	421bd0 <lv_cont_layout_pretty+0x284>
  421bc6:	2b0a      	cmp	r3, #10
  421bc8:	d036      	beq.n	421c38 <lv_cont_layout_pretty+0x2ec>
  421bca:	2b08      	cmp	r3, #8
  421bcc:	d1ce      	bne.n	421b6c <lv_cont_layout_pretty+0x220>
  421bce:	e7b6      	b.n	421b3e <lv_cont_layout_pretty+0x1f2>
                                         inv * (act_x + mleft),
  421bd0:	eb09 0a07 	add.w	sl, r9, r7
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  421bd4:	4630      	mov	r0, r6
  421bd6:	4b15      	ldr	r3, [pc, #84]	; (421c2c <lv_cont_layout_pretty+0x2e0>)
  421bd8:	4798      	blx	r3
  421bda:	ebb8 0000 	subs.w	r0, r8, r0
  421bde:	d410      	bmi.n	421c02 <lv_cont_layout_pretty+0x2b6>
  421be0:	9b04      	ldr	r3, [sp, #16]
  421be2:	eb03 0260 	add.w	r2, r3, r0, asr #1
                            lv_obj_align(child_tmp, cont, align,
  421be6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  421bea:	fb1a f303 	smulbb	r3, sl, r3
  421bee:	b212      	sxth	r2, r2
  421bf0:	9200      	str	r2, [sp, #0]
  421bf2:	b21b      	sxth	r3, r3
  421bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  421bf6:	9906      	ldr	r1, [sp, #24]
  421bf8:	4630      	mov	r0, r6
  421bfa:	f8df a034 	ldr.w	sl, [pc, #52]	; 421c30 <lv_cont_layout_pretty+0x2e4>
  421bfe:	47d0      	blx	sl
                            break;
  421c00:	e7b4      	b.n	421b6c <lv_cont_layout_pretty+0x220>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  421c02:	3001      	adds	r0, #1
  421c04:	e7ec      	b.n	421be0 <lv_cont_layout_pretty+0x294>
  421c06:	bf00      	nop
  421c08:	00421685 	.word	0x00421685
  421c0c:	00405b81 	.word	0x00405b81
  421c10:	00407445 	.word	0x00407445
  421c14:	00416193 	.word	0x00416193
  421c18:	00405751 	.word	0x00405751
  421c1c:	0041619d 	.word	0x0041619d
  421c20:	004161ab 	.word	0x004161ab
  421c24:	00405dc9 	.word	0x00405dc9
  421c28:	00406dad 	.word	0x00406dad
  421c2c:	00405bb1 	.word	0x00405bb1
  421c30:	00406201 	.word	0x00406201
  421c34:	004067ed 	.word	0x004067ed
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
  421c38:	9b04      	ldr	r3, [sp, #16]
  421c3a:	eb03 0a08 	add.w	sl, r3, r8
  421c3e:	fa1f fa8a 	uxth.w	sl, sl
  421c42:	4630      	mov	r0, r6
  421c44:	4b12      	ldr	r3, [pc, #72]	; (421c90 <lv_cont_layout_pretty+0x344>)
  421c46:	4798      	blx	r3
  421c48:	b280      	uxth	r0, r0
  421c4a:	ebaa 0a00 	sub.w	sl, sl, r0
  421c4e:	fa1f fa8a 	uxth.w	sl, sl
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421c52:	2216      	movs	r2, #22
  421c54:	2100      	movs	r1, #0
  421c56:	4630      	mov	r0, r6
  421c58:	4b0e      	ldr	r3, [pc, #56]	; (421c94 <lv_cont_layout_pretty+0x348>)
  421c5a:	4798      	blx	r3
  421c5c:	b282      	uxth	r2, r0
  421c5e:	ebaa 0202 	sub.w	r2, sl, r2
                            lv_obj_align(child_tmp, cont, align,
  421c62:	eb09 0307 	add.w	r3, r9, r7
  421c66:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  421c6a:	fb13 f301 	smulbb	r3, r3, r1
  421c6e:	b212      	sxth	r2, r2
  421c70:	9200      	str	r2, [sp, #0]
  421c72:	b21b      	sxth	r3, r3
  421c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
  421c76:	9906      	ldr	r1, [sp, #24]
  421c78:	4630      	mov	r0, r6
  421c7a:	f8df a020 	ldr.w	sl, [pc, #32]	; 421c9c <lv_cont_layout_pretty+0x350>
  421c7e:	47d0      	blx	sl
                            break;
  421c80:	e774      	b.n	421b6c <lv_cont_layout_pretty+0x220>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  421c82:	2101      	movs	r1, #1
  421c84:	9806      	ldr	r0, [sp, #24]
  421c86:	4b04      	ldr	r3, [pc, #16]	; (421c98 <lv_cont_layout_pretty+0x34c>)
  421c88:	4798      	blx	r3
}
  421c8a:	b00d      	add	sp, #52	; 0x34
  421c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421c90:	00405bb1 	.word	0x00405bb1
  421c94:	00407445 	.word	0x00407445
  421c98:	00405781 	.word	0x00405781
  421c9c:	00406201 	.word	0x00406201

00421ca0 <lv_cont_refr_layout>:
{
  421ca0:	b538      	push	{r3, r4, r5, lr}
  421ca2:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  421ca4:	2101      	movs	r1, #1
  421ca6:	4b1a      	ldr	r3, [pc, #104]	; (421d10 <lv_cont_refr_layout+0x70>)
  421ca8:	4798      	blx	r3
  421caa:	b100      	cbz	r0, 421cae <lv_cont_refr_layout+0xe>
  421cac:	bd38      	pop	{r3, r4, r5, pc}
    lv_layout_t type = lv_cont_get_layout(cont);
  421cae:	4620      	mov	r0, r4
  421cb0:	4b18      	ldr	r3, [pc, #96]	; (421d14 <lv_cont_refr_layout+0x74>)
  421cb2:	4798      	blx	r3
  421cb4:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
  421cb6:	2100      	movs	r1, #0
  421cb8:	4620      	mov	r0, r4
  421cba:	4b17      	ldr	r3, [pc, #92]	; (421d18 <lv_cont_refr_layout+0x78>)
  421cbc:	4798      	blx	r3
  421cbe:	2800      	cmp	r0, #0
  421cc0:	d0f4      	beq.n	421cac <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_OFF) return;
  421cc2:	2d00      	cmp	r5, #0
  421cc4:	d0f2      	beq.n	421cac <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_CENTER) {
  421cc6:	2d01      	cmp	r5, #1
  421cc8:	d012      	beq.n	421cf0 <lv_cont_refr_layout+0x50>
    else if(type == LV_LAYOUT_COLUMN_LEFT || type == LV_LAYOUT_COLUMN_MID || type == LV_LAYOUT_COLUMN_RIGHT) {
  421cca:	1eab      	subs	r3, r5, #2
  421ccc:	b2db      	uxtb	r3, r3
  421cce:	2b02      	cmp	r3, #2
  421cd0:	d912      	bls.n	421cf8 <lv_cont_refr_layout+0x58>
    else if(type == LV_LAYOUT_ROW_TOP || type == LV_LAYOUT_ROW_MID || type == LV_LAYOUT_ROW_BOTTOM) {
  421cd2:	1f6b      	subs	r3, r5, #5
  421cd4:	b2db      	uxtb	r3, r3
  421cd6:	2b02      	cmp	r3, #2
  421cd8:	d912      	bls.n	421d00 <lv_cont_refr_layout+0x60>
    else if(type == LV_LAYOUT_PRETTY_MID || type == LV_LAYOUT_PRETTY_TOP || type == LV_LAYOUT_PRETTY_BOTTOM) {
  421cda:	f1a5 0308 	sub.w	r3, r5, #8
  421cde:	b2db      	uxtb	r3, r3
  421ce0:	2b02      	cmp	r3, #2
  421ce2:	d911      	bls.n	421d08 <lv_cont_refr_layout+0x68>
    else if(type == LV_LAYOUT_GRID) {
  421ce4:	2d0b      	cmp	r5, #11
  421ce6:	d1e1      	bne.n	421cac <lv_cont_refr_layout+0xc>
        lv_cont_layout_grid(cont);
  421ce8:	4620      	mov	r0, r4
  421cea:	4b0c      	ldr	r3, [pc, #48]	; (421d1c <lv_cont_refr_layout+0x7c>)
  421cec:	4798      	blx	r3
  421cee:	e7dd      	b.n	421cac <lv_cont_refr_layout+0xc>
        lv_cont_layout_center(cont);
  421cf0:	4620      	mov	r0, r4
  421cf2:	4b0b      	ldr	r3, [pc, #44]	; (421d20 <lv_cont_refr_layout+0x80>)
  421cf4:	4798      	blx	r3
  421cf6:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_col(cont);
  421cf8:	4620      	mov	r0, r4
  421cfa:	4b0a      	ldr	r3, [pc, #40]	; (421d24 <lv_cont_refr_layout+0x84>)
  421cfc:	4798      	blx	r3
  421cfe:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_row(cont);
  421d00:	4620      	mov	r0, r4
  421d02:	4b09      	ldr	r3, [pc, #36]	; (421d28 <lv_cont_refr_layout+0x88>)
  421d04:	4798      	blx	r3
  421d06:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_pretty(cont);
  421d08:	4620      	mov	r0, r4
  421d0a:	4b08      	ldr	r3, [pc, #32]	; (421d2c <lv_cont_refr_layout+0x8c>)
  421d0c:	4798      	blx	r3
  421d0e:	bd38      	pop	{r3, r4, r5, pc}
  421d10:	00406dad 	.word	0x00406dad
  421d14:	00421685 	.word	0x00421685
  421d18:	00405a81 	.word	0x00405a81
  421d1c:	00420f85 	.word	0x00420f85
  421d20:	00420e59 	.word	0x00420e59
  421d24:	004216b9 	.word	0x004216b9
  421d28:	004217e1 	.word	0x004217e1
  421d2c:	0042194d 	.word	0x0042194d

00421d30 <lv_cont_signal>:
{
  421d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  421d32:	4607      	mov	r7, r0
  421d34:	460c      	mov	r4, r1
  421d36:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  421d38:	2908      	cmp	r1, #8
  421d3a:	d013      	beq.n	421d64 <lv_cont_signal+0x34>
    res = ancestor_signal(cont, sign, param);
  421d3c:	4b2a      	ldr	r3, [pc, #168]	; (421de8 <lv_cont_signal+0xb8>)
  421d3e:	681b      	ldr	r3, [r3, #0]
  421d40:	4798      	blx	r3
  421d42:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  421d44:	2801      	cmp	r0, #1
  421d46:	d113      	bne.n	421d70 <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  421d48:	2c07      	cmp	r4, #7
  421d4a:	d01b      	beq.n	421d84 <lv_cont_signal+0x54>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
  421d4c:	2c04      	cmp	r4, #4
  421d4e:	d01f      	beq.n	421d90 <lv_cont_signal+0x60>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
  421d50:	2c01      	cmp	r4, #1
  421d52:	d024      	beq.n	421d9e <lv_cont_signal+0x6e>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  421d54:	2c02      	cmp	r4, #2
  421d56:	d029      	beq.n	421dac <lv_cont_signal+0x7c>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  421d58:	2c03      	cmp	r4, #3
  421d5a:	d109      	bne.n	421d70 <lv_cont_signal+0x40>
        lv_cont_refr_autofit(cont);
  421d5c:	4638      	mov	r0, r7
  421d5e:	4b23      	ldr	r3, [pc, #140]	; (421dec <lv_cont_signal+0xbc>)
  421d60:	4798      	blx	r3
  421d62:	e005      	b.n	421d70 <lv_cont_signal+0x40>
        info->result = lv_cont_get_style(cont, info->part);
  421d64:	7811      	ldrb	r1, [r2, #0]
  421d66:	4b22      	ldr	r3, [pc, #136]	; (421df0 <lv_cont_signal+0xc0>)
  421d68:	4798      	blx	r3
  421d6a:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  421d6c:	b110      	cbz	r0, 421d74 <lv_cont_signal+0x44>
  421d6e:	2601      	movs	r6, #1
}
  421d70:	4630      	mov	r0, r6
  421d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else return ancestor_signal(cont, sign, param);
  421d74:	4b1c      	ldr	r3, [pc, #112]	; (421de8 <lv_cont_signal+0xb8>)
  421d76:	681b      	ldr	r3, [r3, #0]
  421d78:	462a      	mov	r2, r5
  421d7a:	4621      	mov	r1, r4
  421d7c:	4638      	mov	r0, r7
  421d7e:	4798      	blx	r3
  421d80:	4606      	mov	r6, r0
  421d82:	e7f5      	b.n	421d70 <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  421d84:	491b      	ldr	r1, [pc, #108]	; (421df4 <lv_cont_signal+0xc4>)
  421d86:	4628      	mov	r0, r5
  421d88:	4b1b      	ldr	r3, [pc, #108]	; (421df8 <lv_cont_signal+0xc8>)
  421d8a:	4798      	blx	r3
  421d8c:	4606      	mov	r6, r0
  421d8e:	e7ef      	b.n	421d70 <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  421d90:	4638      	mov	r0, r7
  421d92:	4b1a      	ldr	r3, [pc, #104]	; (421dfc <lv_cont_signal+0xcc>)
  421d94:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  421d96:	4638      	mov	r0, r7
  421d98:	4b14      	ldr	r3, [pc, #80]	; (421dec <lv_cont_signal+0xbc>)
  421d9a:	4798      	blx	r3
  421d9c:	e7e8      	b.n	421d70 <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  421d9e:	4638      	mov	r0, r7
  421da0:	4b16      	ldr	r3, [pc, #88]	; (421dfc <lv_cont_signal+0xcc>)
  421da2:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  421da4:	4638      	mov	r0, r7
  421da6:	4b11      	ldr	r3, [pc, #68]	; (421dec <lv_cont_signal+0xbc>)
  421da8:	4798      	blx	r3
  421daa:	e7e1      	b.n	421d70 <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  421dac:	4638      	mov	r0, r7
  421dae:	4b14      	ldr	r3, [pc, #80]	; (421e00 <lv_cont_signal+0xd0>)
  421db0:	4798      	blx	r3
  421db2:	88ab      	ldrh	r3, [r5, #4]
  421db4:	882a      	ldrh	r2, [r5, #0]
  421db6:	1a9b      	subs	r3, r3, r2
  421db8:	b29b      	uxth	r3, r3
  421dba:	3301      	adds	r3, #1
  421dbc:	b21b      	sxth	r3, r3
  421dbe:	4298      	cmp	r0, r3
  421dc0:	d006      	beq.n	421dd0 <lv_cont_signal+0xa0>
            lv_cont_refr_layout(cont);
  421dc2:	4638      	mov	r0, r7
  421dc4:	4b0d      	ldr	r3, [pc, #52]	; (421dfc <lv_cont_signal+0xcc>)
  421dc6:	4798      	blx	r3
            lv_cont_refr_autofit(cont);
  421dc8:	4638      	mov	r0, r7
  421dca:	4b08      	ldr	r3, [pc, #32]	; (421dec <lv_cont_signal+0xbc>)
  421dcc:	4798      	blx	r3
  421dce:	e7cf      	b.n	421d70 <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  421dd0:	4638      	mov	r0, r7
  421dd2:	4b0c      	ldr	r3, [pc, #48]	; (421e04 <lv_cont_signal+0xd4>)
  421dd4:	4798      	blx	r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  421dd6:	88eb      	ldrh	r3, [r5, #6]
  421dd8:	886a      	ldrh	r2, [r5, #2]
  421dda:	1a9b      	subs	r3, r3, r2
  421ddc:	b29b      	uxth	r3, r3
  421dde:	3301      	adds	r3, #1
  421de0:	b21b      	sxth	r3, r3
  421de2:	4298      	cmp	r0, r3
  421de4:	d1ed      	bne.n	421dc2 <lv_cont_signal+0x92>
  421de6:	e7c3      	b.n	421d70 <lv_cont_signal+0x40>
  421de8:	2041486c 	.word	0x2041486c
  421dec:	00421075 	.word	0x00421075
  421df0:	00420e4d 	.word	0x00420e4d
  421df4:	0042f8cc 	.word	0x0042f8cc
  421df8:	00408321 	.word	0x00408321
  421dfc:	00421ca1 	.word	0x00421ca1
  421e00:	00405b81 	.word	0x00405b81
  421e04:	00405bb1 	.word	0x00405bb1

00421e08 <lv_img_get_style>:
}

static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  421e08:	b909      	cbnz	r1, 421e0e <lv_img_get_style+0x6>
        case LV_IMG_PART_MAIN:
            style_dsc_p = &img->style_list;
  421e0a:	3028      	adds	r0, #40	; 0x28
            break;
  421e0c:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  421e0e:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  421e10:	4770      	bx	lr
	...

00421e14 <lv_img_design>:
{
  421e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421e18:	b0af      	sub	sp, #188	; 0xbc
  421e1a:	4604      	mov	r4, r0
  421e1c:	9103      	str	r1, [sp, #12]
  421e1e:	4617      	mov	r7, r2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
  421e20:	4ba2      	ldr	r3, [pc, #648]	; (4220ac <lv_img_design+0x298>)
  421e22:	4798      	blx	r3
  421e24:	4605      	mov	r5, r0
    if(mode == LV_DESIGN_COVER_CHK) {
  421e26:	2f02      	cmp	r7, #2
  421e28:	d00e      	beq.n	421e48 <lv_img_design+0x34>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  421e2a:	2f00      	cmp	r7, #0
  421e2c:	f040 825d 	bne.w	4222ea <lv_img_design+0x4d6>
        if(ext->h == 0 || ext->w == 0) return true;
  421e30:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  421e34:	2b00      	cmp	r3, #0
  421e36:	f000 8256 	beq.w	4222e6 <lv_img_design+0x4d2>
  421e3a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  421e3e:	2b00      	cmp	r3, #0
  421e40:	f040 8087 	bne.w	421f52 <lv_img_design+0x13e>
  421e44:	2001      	movs	r0, #1
  421e46:	e253      	b.n	4222f0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  421e48:	2202      	movs	r2, #2
  421e4a:	2100      	movs	r1, #0
  421e4c:	4620      	mov	r0, r4
  421e4e:	4b98      	ldr	r3, [pc, #608]	; (4220b0 <lv_img_design+0x29c>)
  421e50:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  421e52:	b108      	cbz	r0, 421e58 <lv_img_design+0x44>
  421e54:	2003      	movs	r0, #3
  421e56:	e24b      	b.n	4222f0 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  421e58:	7d2a      	ldrb	r2, [r5, #20]
  421e5a:	f002 0303 	and.w	r3, r2, #3
  421e5e:	3b02      	subs	r3, #2
  421e60:	b2db      	uxtb	r3, r3
  421e62:	2b01      	cmp	r3, #1
  421e64:	f240 82f6 	bls.w	422454 <lv_img_design+0x640>
        if(ext->cf != LV_IMG_CF_TRUE_COLOR && ext->cf != LV_IMG_CF_RAW) return LV_DESIGN_RES_NOT_COVER;
  421e68:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  421e6c:	2a20      	cmp	r2, #32
  421e6e:	bf18      	it	ne
  421e70:	2a08      	cmpne	r2, #8
  421e72:	d001      	beq.n	421e78 <lv_img_design+0x64>
  421e74:	2002      	movs	r0, #2
  421e76:	e23b      	b.n	4222f0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  421e78:	f248 02ac 	movw	r2, #32940	; 0x80ac
  421e7c:	2100      	movs	r1, #0
  421e7e:	4620      	mov	r0, r4
  421e80:	4b8c      	ldr	r3, [pc, #560]	; (4220b4 <lv_img_design+0x2a0>)
  421e82:	4798      	blx	r3
        if(lv_obj_get_style_image_opa(img, LV_IMG_PART_MAIN) != LV_OPA_COVER) return LV_DESIGN_RES_NOT_COVER;
  421e84:	28ff      	cmp	r0, #255	; 0xff
  421e86:	d001      	beq.n	421e8c <lv_img_design+0x78>
  421e88:	2002      	movs	r0, #2
  421e8a:	e231      	b.n	4222f0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  421e8c:	2206      	movs	r2, #6
  421e8e:	2100      	movs	r1, #0
  421e90:	4620      	mov	r0, r4
  421e92:	4b87      	ldr	r3, [pc, #540]	; (4220b0 <lv_img_design+0x29c>)
  421e94:	4798      	blx	r3
        angle_final += ext->angle;
  421e96:	89ab      	ldrh	r3, [r5, #12]
        if(angle_final != 0) return LV_DESIGN_RES_NOT_COVER;
  421e98:	42d8      	cmn	r0, r3
  421e9a:	d001      	beq.n	421ea0 <lv_img_design+0x8c>
  421e9c:	2002      	movs	r0, #2
  421e9e:	e227      	b.n	4222f0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  421ea0:	2207      	movs	r2, #7
  421ea2:	2100      	movs	r1, #0
  421ea4:	4620      	mov	r0, r4
  421ea6:	4b82      	ldr	r3, [pc, #520]	; (4220b0 <lv_img_design+0x29c>)
  421ea8:	4798      	blx	r3
        zoom_final = (zoom_final * ext->zoom) >> 8;
  421eaa:	8a6b      	ldrh	r3, [r5, #18]
  421eac:	fb03 f300 	mul.w	r3, r3, r0
  421eb0:	121f      	asrs	r7, r3, #8
        if(zoom_final == LV_IMG_ZOOM_NONE) {
  421eb2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
  421eb6:	d02e      	beq.n	421f16 <lv_img_design+0x102>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(img), lv_obj_get_height(img), 0, zoom_final, &ext->pivot);
  421eb8:	4620      	mov	r0, r4
  421eba:	4b7f      	ldr	r3, [pc, #508]	; (4220b8 <lv_img_design+0x2a4>)
  421ebc:	4798      	blx	r3
  421ebe:	4680      	mov	r8, r0
  421ec0:	4620      	mov	r0, r4
  421ec2:	4b7e      	ldr	r3, [pc, #504]	; (4220bc <lv_img_design+0x2a8>)
  421ec4:	4798      	blx	r3
  421ec6:	350e      	adds	r5, #14
  421ec8:	9501      	str	r5, [sp, #4]
  421eca:	b2bf      	uxth	r7, r7
  421ecc:	9700      	str	r7, [sp, #0]
  421ece:	2300      	movs	r3, #0
  421ed0:	4602      	mov	r2, r0
  421ed2:	4641      	mov	r1, r8
  421ed4:	a819      	add	r0, sp, #100	; 0x64
  421ed6:	4d7a      	ldr	r5, [pc, #488]	; (4220c0 <lv_img_design+0x2ac>)
  421ed8:	47a8      	blx	r5
            a.x1 += img->coords.x1;
  421eda:	8a22      	ldrh	r2, [r4, #16]
  421edc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  421ee0:	4413      	add	r3, r2
  421ee2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            a.y1 += img->coords.y1;
  421ee6:	8a63      	ldrh	r3, [r4, #18]
  421ee8:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
  421eec:	4419      	add	r1, r3
  421eee:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
            a.x2 += img->coords.x1;
  421ef2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
  421ef6:	440a      	add	r2, r1
  421ef8:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            a.y2 += img->coords.y1;
  421efc:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
  421f00:	4413      	add	r3, r2
  421f02:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  421f06:	2200      	movs	r2, #0
  421f08:	a919      	add	r1, sp, #100	; 0x64
  421f0a:	9803      	ldr	r0, [sp, #12]
  421f0c:	4b6d      	ldr	r3, [pc, #436]	; (4220c4 <lv_img_design+0x2b0>)
  421f0e:	4798      	blx	r3
  421f10:	b950      	cbnz	r0, 421f28 <lv_img_design+0x114>
  421f12:	2002      	movs	r0, #2
  421f14:	e1ec      	b.n	4222f0 <lv_img_design+0x4dc>
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  421f16:	2200      	movs	r2, #0
  421f18:	f104 0110 	add.w	r1, r4, #16
  421f1c:	9803      	ldr	r0, [sp, #12]
  421f1e:	4b69      	ldr	r3, [pc, #420]	; (4220c4 <lv_img_design+0x2b0>)
  421f20:	4798      	blx	r3
  421f22:	b908      	cbnz	r0, 421f28 <lv_img_design+0x114>
  421f24:	2002      	movs	r0, #2
  421f26:	e1e3      	b.n	4222f0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  421f28:	2220      	movs	r2, #32
  421f2a:	2100      	movs	r1, #0
  421f2c:	4620      	mov	r0, r4
  421f2e:	4b60      	ldr	r3, [pc, #384]	; (4220b0 <lv_img_design+0x29c>)
  421f30:	4798      	blx	r3
  421f32:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  421f34:	2800      	cmp	r0, #0
  421f36:	f040 828f 	bne.w	422458 <lv_img_design+0x644>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  421f3a:	f248 02a0 	movw	r2, #32928	; 0x80a0
  421f3e:	2100      	movs	r1, #0
  421f40:	4620      	mov	r0, r4
  421f42:	4b5b      	ldr	r3, [pc, #364]	; (4220b0 <lv_img_design+0x29c>)
  421f44:	4798      	blx	r3
  421f46:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_image_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  421f48:	2800      	cmp	r0, #0
  421f4a:	f000 8287 	beq.w	42245c <lv_img_design+0x648>
  421f4e:	2002      	movs	r0, #2
  421f50:	e1ce      	b.n	4222f0 <lv_img_design+0x4dc>
        lv_draw_rect_dsc_init(&bg_dsc);
  421f52:	a819      	add	r0, sp, #100	; 0x64
  421f54:	4b5c      	ldr	r3, [pc, #368]	; (4220c8 <lv_img_design+0x2b4>)
  421f56:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(img, LV_IMG_PART_MAIN, &bg_dsc);
  421f58:	aa19      	add	r2, sp, #100	; 0x64
  421f5a:	2100      	movs	r1, #0
  421f5c:	4620      	mov	r0, r4
  421f5e:	4b5b      	ldr	r3, [pc, #364]	; (4220cc <lv_img_design+0x2b8>)
  421f60:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  421f62:	2233      	movs	r2, #51	; 0x33
  421f64:	2100      	movs	r1, #0
  421f66:	4620      	mov	r0, r4
  421f68:	4b51      	ldr	r3, [pc, #324]	; (4220b0 <lv_img_design+0x29c>)
  421f6a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  421f6c:	b110      	cbz	r0, 421f74 <lv_img_design+0x160>
            bg_dsc.border_opa = LV_OPA_TRANSP;
  421f6e:	2300      	movs	r3, #0
  421f70:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  421f74:	2207      	movs	r2, #7
  421f76:	2100      	movs	r1, #0
  421f78:	4620      	mov	r0, r4
  421f7a:	4e4d      	ldr	r6, [pc, #308]	; (4220b0 <lv_img_design+0x29c>)
  421f7c:	47b0      	blx	r6
        zoom_final = (zoom_final * ext->zoom) >> 8;
  421f7e:	8a6f      	ldrh	r7, [r5, #18]
  421f80:	fb07 f700 	mul.w	r7, r7, r0
  421f84:	123f      	asrs	r7, r7, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  421f86:	2206      	movs	r2, #6
  421f88:	2100      	movs	r1, #0
  421f8a:	4620      	mov	r0, r4
  421f8c:	47b0      	blx	r6
        angle_final += ext->angle;
  421f8e:	89ab      	ldrh	r3, [r5, #12]
  421f90:	18c3      	adds	r3, r0, r3
  421f92:	9304      	str	r3, [sp, #16]
        lv_coord_t obj_w = lv_obj_get_width(img);
  421f94:	4620      	mov	r0, r4
  421f96:	4b48      	ldr	r3, [pc, #288]	; (4220b8 <lv_img_design+0x2a4>)
  421f98:	4798      	blx	r3
  421f9a:	4680      	mov	r8, r0
  421f9c:	9005      	str	r0, [sp, #20]
        lv_coord_t obj_h = lv_obj_get_height(img);
  421f9e:	4620      	mov	r0, r4
  421fa0:	4b46      	ldr	r3, [pc, #280]	; (4220bc <lv_img_design+0x2a8>)
  421fa2:	4798      	blx	r3
  421fa4:	4602      	mov	r2, r0
  421fa6:	9006      	str	r0, [sp, #24]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  421fa8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  421fac:	9307      	str	r3, [sp, #28]
  421fae:	fa1f f987 	uxth.w	r9, r7
                                         angle_final, zoom_final, &ext->pivot);
  421fb2:	f105 0a0e 	add.w	sl, r5, #14
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  421fb6:	f8cd a004 	str.w	sl, [sp, #4]
  421fba:	f8cd 9000 	str.w	r9, [sp]
  421fbe:	4641      	mov	r1, r8
  421fc0:	a808      	add	r0, sp, #32
  421fc2:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 4220c0 <lv_img_design+0x2ac>
  421fc6:	47d8      	blx	fp
        bg_coords.x1 += img->coords.x1;
  421fc8:	8a22      	ldrh	r2, [r4, #16]
  421fca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  421fce:	4413      	add	r3, r2
  421fd0:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_coords.y1 += img->coords.y1;
  421fd4:	8a63      	ldrh	r3, [r4, #18]
  421fd6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  421fda:	4419      	add	r1, r3
  421fdc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        bg_coords.x2 += img->coords.x1;
  421fe0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  421fe4:	440a      	add	r2, r1
  421fe6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        bg_coords.y2 += img->coords.y1;
  421fea:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  421fee:	4413      	add	r3, r2
  421ff0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  421ff4:	2212      	movs	r2, #18
  421ff6:	2100      	movs	r1, #0
  421ff8:	4620      	mov	r0, r4
  421ffa:	47b0      	blx	r6
        bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  421ffc:	b280      	uxth	r0, r0
  421ffe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  422002:	1a18      	subs	r0, r3, r0
  422004:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  422008:	2213      	movs	r2, #19
  42200a:	2100      	movs	r1, #0
  42200c:	4620      	mov	r0, r4
  42200e:	47b0      	blx	r6
        bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  422010:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  422014:	fa13 f080 	uxtah	r0, r3, r0
  422018:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  42201c:	2210      	movs	r2, #16
  42201e:	2100      	movs	r1, #0
  422020:	4620      	mov	r0, r4
  422022:	47b0      	blx	r6
        bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  422024:	b280      	uxth	r0, r0
  422026:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  42202a:	1a18      	subs	r0, r3, r0
  42202c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  422030:	2211      	movs	r2, #17
  422032:	2100      	movs	r1, #0
  422034:	4620      	mov	r0, r4
  422036:	47b0      	blx	r6
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  422038:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  42203c:	fa13 f080 	uxtah	r0, r3, r0
  422040:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
  422044:	aa19      	add	r2, sp, #100	; 0x64
  422046:	9903      	ldr	r1, [sp, #12]
  422048:	a808      	add	r0, sp, #32
  42204a:	4b21      	ldr	r3, [pc, #132]	; (4220d0 <lv_img_design+0x2bc>)
  42204c:	4798      	blx	r3
        if(zoom_final == 0) return LV_DESIGN_RES_OK;
  42204e:	b90f      	cbnz	r7, 422054 <lv_img_design+0x240>
  422050:	2000      	movs	r0, #0
  422052:	e14d      	b.n	4222f0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  422054:	2202      	movs	r2, #2
  422056:	2100      	movs	r1, #0
  422058:	4620      	mov	r0, r4
  42205a:	47b0      	blx	r6
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  42205c:	b980      	cbnz	r0, 422080 <lv_img_design+0x26c>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
  42205e:	7d2b      	ldrb	r3, [r5, #20]
  422060:	f003 0303 	and.w	r3, r3, #3
  422064:	2b01      	cmp	r3, #1
  422066:	d93d      	bls.n	4220e4 <lv_img_design+0x2d0>
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  422068:	2b02      	cmp	r3, #2
  42206a:	f000 8122 	beq.w	4222b2 <lv_img_design+0x49e>
            lv_draw_img(&img->coords, clip_area, NULL, NULL);
  42206e:	2300      	movs	r3, #0
  422070:	461a      	mov	r2, r3
  422072:	9903      	ldr	r1, [sp, #12]
  422074:	f104 0010 	add.w	r0, r4, #16
  422078:	4c16      	ldr	r4, [pc, #88]	; (4220d4 <lv_img_design+0x2c0>)
  42207a:	47a0      	blx	r4
    return LV_DESIGN_RES_OK;
  42207c:	2000      	movs	r0, #0
  42207e:	e137      	b.n	4222f0 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  422080:	201c      	movs	r0, #28
  422082:	4b15      	ldr	r3, [pc, #84]	; (4220d8 <lv_img_design+0x2c4>)
  422084:	4798      	blx	r3
  422086:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  422088:	2201      	movs	r2, #1
  42208a:	2100      	movs	r1, #0
  42208c:	4620      	mov	r0, r4
  42208e:	47b0      	blx	r6
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
  422090:	2300      	movs	r3, #0
  422092:	4602      	mov	r2, r0
  422094:	a908      	add	r1, sp, #32
  422096:	4658      	mov	r0, fp
  422098:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4220e0 <lv_img_design+0x2cc>
  42209c:	47c0      	blx	r8
            lv_draw_mask_add(mp, img + 8);
  42209e:	f504 7118 	add.w	r1, r4, #608	; 0x260
  4220a2:	4658      	mov	r0, fp
  4220a4:	4b0d      	ldr	r3, [pc, #52]	; (4220dc <lv_img_design+0x2c8>)
  4220a6:	4798      	blx	r3
  4220a8:	e7d9      	b.n	42205e <lv_img_design+0x24a>
  4220aa:	bf00      	nop
  4220ac:	00408095 	.word	0x00408095
  4220b0:	00407445 	.word	0x00407445
  4220b4:	00406eb9 	.word	0x00406eb9
  4220b8:	00405b81 	.word	0x00405b81
  4220bc:	00405bb1 	.word	0x00405bb1
  4220c0:	00412869 	.word	0x00412869
  4220c4:	00415829 	.word	0x00415829
  4220c8:	0041245d 	.word	0x0041245d
  4220cc:	0040833d 	.word	0x0040833d
  4220d0:	004124a9 	.word	0x004124a9
  4220d4:	0040d5ed 	.word	0x0040d5ed
  4220d8:	00416965 	.word	0x00416965
  4220dc:	0040fbb1 	.word	0x0040fbb1
  4220e0:	0040fe2d 	.word	0x0040fe2d
            lv_draw_img_dsc_init(&img_dsc);
  4220e4:	a810      	add	r0, sp, #64	; 0x40
  4220e6:	4b8e      	ldr	r3, [pc, #568]	; (422320 <lv_img_design+0x50c>)
  4220e8:	4798      	blx	r3
            lv_obj_init_draw_img_dsc(img, LV_IMG_PART_MAIN, &img_dsc);
  4220ea:	aa10      	add	r2, sp, #64	; 0x40
  4220ec:	2100      	movs	r1, #0
  4220ee:	4620      	mov	r0, r4
  4220f0:	4b8c      	ldr	r3, [pc, #560]	; (422324 <lv_img_design+0x510>)
  4220f2:	4798      	blx	r3
            img_dsc.zoom = zoom_final;
  4220f4:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  4220f8:	f1b9 0f00 	cmp.w	r9, #0
  4220fc:	f000 80d7 	beq.w	4222ae <lv_img_design+0x49a>
            img_dsc.angle = angle_final;
  422100:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  422104:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            img_dsc.pivot.x = ext->pivot.x;
  422108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  42210c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            img_dsc.pivot.y = ext->pivot.y;
  422110:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  422114:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            img_dsc.antialias = ext->antialias;
  422118:	7d6a      	ldrb	r2, [r5, #21]
  42211a:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
  42211e:	f362 0300 	bfi	r3, r2, #0, #1
  422122:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            lv_coord_t zoomed_src_w = (int32_t)((int32_t)ext->w * zoom_final) >> 8;
  422126:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
  42212a:	fb08 f807 	mul.w	r8, r8, r7
  42212e:	ea4f 2828 	mov.w	r8, r8, asr #8
  422132:	fa0f f388 	sxth.w	r3, r8
            if(zoomed_src_w <= 0) return LV_DESIGN_RES_OK;
  422136:	2b00      	cmp	r3, #0
  422138:	f340 80b9 	ble.w	4222ae <lv_img_design+0x49a>
            lv_coord_t zoomed_src_h = (int32_t)((int32_t)ext->h * zoom_final) >> 8;
  42213c:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
  422140:	fb0b fb07 	mul.w	fp, fp, r7
  422144:	ea4f 2b2b 	mov.w	fp, fp, asr #8
  422148:	fa0f f38b 	sxth.w	r3, fp
            if(zoomed_src_h <= 0) return LV_DESIGN_RES_OK;
  42214c:	2b00      	cmp	r3, #0
  42214e:	f340 80ae 	ble.w	4222ae <lv_img_design+0x49a>
            lv_obj_get_coords(img, &zoomed_coords);
  422152:	a90a      	add	r1, sp, #40	; 0x28
  422154:	4620      	mov	r0, r4
  422156:	4b74      	ldr	r3, [pc, #464]	; (422328 <lv_img_design+0x514>)
  422158:	4798      	blx	r3
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
  42215a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  42215e:	fb03 f307 	mul.w	r3, r3, r7
  422162:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  422166:	eb01 2123 	add.w	r1, r1, r3, asr #8
  42216a:	b289      	uxth	r1, r1
  42216c:	fa0f fe81 	sxth.w	lr, r1
  422170:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
  422174:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  422178:	fb03 f307 	mul.w	r3, r3, r7
  42217c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
  422180:	eb02 2223 	add.w	r2, r2, r3, asr #8
  422184:	b292      	uxth	r2, r2
  422186:	b210      	sxth	r0, r2
  422188:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
  42218c:	9b05      	ldr	r3, [sp, #20]
  42218e:	3b01      	subs	r3, #1
  422190:	fb03 f307 	mul.w	r3, r3, r7
  422194:	eb01 2323 	add.w	r3, r1, r3, asr #8
  422198:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
  42219c:	9b06      	ldr	r3, [sp, #24]
  42219e:	3b01      	subs	r3, #1
  4221a0:	fb03 f307 	mul.w	r3, r3, r7
  4221a4:	eb02 2323 	add.w	r3, r2, r3, asr #8
  4221a8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
  4221ac:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  4221b0:	459e      	cmp	lr, r3
  4221b2:	dd03      	ble.n	4221bc <lv_img_design+0x3a8>
  4221b4:	892b      	ldrh	r3, [r5, #8]
  4221b6:	1ac9      	subs	r1, r1, r3
  4221b8:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
  4221bc:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  4221c0:	4298      	cmp	r0, r3
  4221c2:	dd03      	ble.n	4221cc <lv_img_design+0x3b8>
  4221c4:	896b      	ldrh	r3, [r5, #10]
  4221c6:	1ad2      	subs	r2, r2, r3
  4221c8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            _lv_img_buf_get_transformed_area(&clip_real, lv_obj_get_width(img), lv_obj_get_height(img), angle_final, zoom_final,
  4221cc:	4620      	mov	r0, r4
  4221ce:	4b57      	ldr	r3, [pc, #348]	; (42232c <lv_img_design+0x518>)
  4221d0:	4798      	blx	r3
  4221d2:	4607      	mov	r7, r0
  4221d4:	4620      	mov	r0, r4
  4221d6:	4b56      	ldr	r3, [pc, #344]	; (422330 <lv_img_design+0x51c>)
  4221d8:	4798      	blx	r3
  4221da:	f8cd a004 	str.w	sl, [sp, #4]
  4221de:	f8cd 9000 	str.w	r9, [sp]
  4221e2:	9b07      	ldr	r3, [sp, #28]
  4221e4:	4602      	mov	r2, r0
  4221e6:	4639      	mov	r1, r7
  4221e8:	a80c      	add	r0, sp, #48	; 0x30
  4221ea:	4f52      	ldr	r7, [pc, #328]	; (422334 <lv_img_design+0x520>)
  4221ec:	47b8      	blx	r7
            clip_real.x1 += img->coords.x1;
  4221ee:	8a23      	ldrh	r3, [r4, #16]
  4221f0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  4221f4:	441a      	add	r2, r3
  4221f6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
            clip_real.x2 += img->coords.x1;
  4221fa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
  4221fe:	4413      	add	r3, r2
  422200:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            clip_real.y1 += img->coords.y1;
  422204:	8a63      	ldrh	r3, [r4, #18]
  422206:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
  42220a:	441a      	add	r2, r3
  42220c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
            clip_real.y2 += img->coords.y1;
  422210:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
  422214:	4413      	add	r3, r2
  422216:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
  42221a:	9a03      	ldr	r2, [sp, #12]
  42221c:	a90c      	add	r1, sp, #48	; 0x30
  42221e:	4608      	mov	r0, r1
  422220:	4b45      	ldr	r3, [pc, #276]	; (422338 <lv_img_design+0x524>)
  422222:	4798      	blx	r3
  422224:	2800      	cmp	r0, #0
  422226:	d042      	beq.n	4222ae <lv_img_design+0x49a>
            coords_tmp.y1 = zoomed_coords.y1;
  422228:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  42222c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
  422230:	896a      	ldrh	r2, [r5, #10]
  422232:	fa12 f383 	uxtah	r3, r2, r3
  422236:	b29b      	uxth	r3, r3
  422238:	3b01      	subs	r3, #1
  42223a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  42223e:	e023      	b.n	422288 <lv_img_design+0x474>
                    lv_draw_img(&coords_tmp, &clip_real, ext->src, &img_dsc);
  422240:	ab10      	add	r3, sp, #64	; 0x40
  422242:	682a      	ldr	r2, [r5, #0]
  422244:	a90c      	add	r1, sp, #48	; 0x30
  422246:	a80e      	add	r0, sp, #56	; 0x38
  422248:	4c3c      	ldr	r4, [pc, #240]	; (42233c <lv_img_design+0x528>)
  42224a:	47a0      	blx	r4
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  42224c:	fa1f f388 	uxth.w	r3, r8
  422250:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  422254:	441a      	add	r2, r3
  422256:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  42225a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  42225e:	4413      	add	r3, r2
  422260:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  422264:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  422268:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
  42226c:	429a      	cmp	r2, r3
  42226e:	dbe7      	blt.n	422240 <lv_img_design+0x42c>
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  422270:	fa1f f38b 	uxth.w	r3, fp
  422274:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  422278:	441a      	add	r2, r3
  42227a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  42227e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
  422282:	4413      	add	r3, r2
  422284:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  422288:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
  42228c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  422290:	429a      	cmp	r2, r3
  422292:	f6bf aef3 	bge.w	42207c <lv_img_design+0x268>
                coords_tmp.x1 = zoomed_coords.x1;
  422296:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  42229a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
  42229e:	892a      	ldrh	r2, [r5, #8]
  4222a0:	fa12 f383 	uxtah	r3, r2, r3
  4222a4:	b29b      	uxth	r3, r3
  4222a6:	3b01      	subs	r3, #1
  4222a8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  4222ac:	e7da      	b.n	422264 <lv_img_design+0x450>
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  4222ae:	2000      	movs	r0, #0
  4222b0:	e01e      	b.n	4222f0 <lv_img_design+0x4dc>
            lv_draw_label_dsc_init(&label_dsc);
  4222b2:	a810      	add	r0, sp, #64	; 0x40
  4222b4:	4b22      	ldr	r3, [pc, #136]	; (422340 <lv_img_design+0x52c>)
  4222b6:	4798      	blx	r3
            lv_obj_init_draw_label_dsc(img, LV_IMG_PART_MAIN, &label_dsc);
  4222b8:	aa10      	add	r2, sp, #64	; 0x40
  4222ba:	2100      	movs	r1, #0
  4222bc:	4620      	mov	r0, r4
  4222be:	4b21      	ldr	r3, [pc, #132]	; (422344 <lv_img_design+0x530>)
  4222c0:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  4222c2:	f248 02a9 	movw	r2, #32937	; 0x80a9
  4222c6:	2100      	movs	r1, #0
  4222c8:	4620      	mov	r0, r4
  4222ca:	4b1f      	ldr	r3, [pc, #124]	; (422348 <lv_img_design+0x534>)
  4222cc:	4798      	blx	r3
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
  4222ce:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
  4222d2:	682b      	ldr	r3, [r5, #0]
  4222d4:	2200      	movs	r2, #0
  4222d6:	9200      	str	r2, [sp, #0]
  4222d8:	aa10      	add	r2, sp, #64	; 0x40
  4222da:	9903      	ldr	r1, [sp, #12]
  4222dc:	f104 0010 	add.w	r0, r4, #16
  4222e0:	4c1a      	ldr	r4, [pc, #104]	; (42234c <lv_img_design+0x538>)
  4222e2:	47a0      	blx	r4
  4222e4:	e6ca      	b.n	42207c <lv_img_design+0x268>
        if(ext->h == 0 || ext->w == 0) return true;
  4222e6:	2001      	movs	r0, #1
  4222e8:	e002      	b.n	4222f0 <lv_img_design+0x4dc>
    else if(mode == LV_DESIGN_DRAW_POST) {
  4222ea:	2f01      	cmp	r7, #1
  4222ec:	d003      	beq.n	4222f6 <lv_img_design+0x4e2>
    return LV_DESIGN_RES_OK;
  4222ee:	2000      	movs	r0, #0
}
  4222f0:	b02f      	add	sp, #188	; 0xbc
  4222f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4222f6:	2202      	movs	r2, #2
  4222f8:	2100      	movs	r1, #0
  4222fa:	4620      	mov	r0, r4
  4222fc:	4b14      	ldr	r3, [pc, #80]	; (422350 <lv_img_design+0x53c>)
  4222fe:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  422300:	b938      	cbnz	r0, 422312 <lv_img_design+0x4fe>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  422302:	2233      	movs	r2, #51	; 0x33
  422304:	2100      	movs	r1, #0
  422306:	4620      	mov	r0, r4
  422308:	4b11      	ldr	r3, [pc, #68]	; (422350 <lv_img_design+0x53c>)
  42230a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  42230c:	bb30      	cbnz	r0, 42235c <lv_img_design+0x548>
    return LV_DESIGN_RES_OK;
  42230e:	2000      	movs	r0, #0
  422310:	e7ee      	b.n	4222f0 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(img + 8);
  422312:	f504 7018 	add.w	r0, r4, #608	; 0x260
  422316:	4b0f      	ldr	r3, [pc, #60]	; (422354 <lv_img_design+0x540>)
  422318:	4798      	blx	r3
            _lv_mem_buf_release(param);
  42231a:	4b0f      	ldr	r3, [pc, #60]	; (422358 <lv_img_design+0x544>)
  42231c:	4798      	blx	r3
  42231e:	e7f0      	b.n	422302 <lv_img_design+0x4ee>
  422320:	0040d341 	.word	0x0040d341
  422324:	00408a35 	.word	0x00408a35
  422328:	00405ac1 	.word	0x00405ac1
  42232c:	00405b81 	.word	0x00405b81
  422330:	00405bb1 	.word	0x00405bb1
  422334:	00412869 	.word	0x00412869
  422338:	004155b3 	.word	0x004155b3
  42233c:	0040d5ed 	.word	0x0040d5ed
  422340:	0040ded5 	.word	0x0040ded5
  422344:	0040896d 	.word	0x0040896d
  422348:	00406e31 	.word	0x00406e31
  42234c:	0040df1d 	.word	0x0040df1d
  422350:	00407445 	.word	0x00407445
  422354:	0040fc59 	.word	0x0040fc59
  422358:	00416715 	.word	0x00416715
            lv_draw_rect_dsc_init(&draw_dsc);
  42235c:	a819      	add	r0, sp, #100	; 0x64
  42235e:	4b40      	ldr	r3, [pc, #256]	; (422460 <lv_img_design+0x64c>)
  422360:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  422362:	2700      	movs	r7, #0
  422364:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  422368:	f88d 709a 	strb.w	r7, [sp, #154]	; 0x9a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  42236c:	f88d 708e 	strb.w	r7, [sp, #142]	; 0x8e
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
  422370:	aa19      	add	r2, sp, #100	; 0x64
  422372:	4639      	mov	r1, r7
  422374:	4620      	mov	r0, r4
  422376:	4b3b      	ldr	r3, [pc, #236]	; (422464 <lv_img_design+0x650>)
  422378:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  42237a:	2207      	movs	r2, #7
  42237c:	4639      	mov	r1, r7
  42237e:	4620      	mov	r0, r4
  422380:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 422470 <lv_img_design+0x65c>
  422384:	47c8      	blx	r9
            zoom_final = (zoom_final * ext->zoom) >> 8;
  422386:	f8b5 8012 	ldrh.w	r8, [r5, #18]
  42238a:	fb08 f800 	mul.w	r8, r8, r0
  42238e:	ea4f 2828 	mov.w	r8, r8, asr #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  422392:	2206      	movs	r2, #6
  422394:	4639      	mov	r1, r7
  422396:	4620      	mov	r0, r4
  422398:	47c8      	blx	r9
            angle_final += ext->angle;
  42239a:	89ab      	ldrh	r3, [r5, #12]
  42239c:	4403      	add	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  42239e:	8aa1      	ldrh	r1, [r4, #20]
  4223a0:	8a22      	ldrh	r2, [r4, #16]
  4223a2:	1a89      	subs	r1, r1, r2
  4223a4:	b289      	uxth	r1, r1
  4223a6:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4223a8:	8ae2      	ldrh	r2, [r4, #22]
  4223aa:	8a60      	ldrh	r0, [r4, #18]
  4223ac:	1a12      	subs	r2, r2, r0
  4223ae:	b292      	uxth	r2, r2
  4223b0:	3201      	adds	r2, #1
                                             angle_final, zoom_final, &ext->pivot);
  4223b2:	350e      	adds	r5, #14
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
  4223b4:	9501      	str	r5, [sp, #4]
  4223b6:	fa1f f088 	uxth.w	r0, r8
  4223ba:	9000      	str	r0, [sp, #0]
  4223bc:	b21b      	sxth	r3, r3
  4223be:	b212      	sxth	r2, r2
  4223c0:	b209      	sxth	r1, r1
  4223c2:	a810      	add	r0, sp, #64	; 0x40
  4223c4:	4d28      	ldr	r5, [pc, #160]	; (422468 <lv_img_design+0x654>)
  4223c6:	47a8      	blx	r5
            bg_coords.x1 += img->coords.x1;
  4223c8:	8a22      	ldrh	r2, [r4, #16]
  4223ca:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  4223ce:	4413      	add	r3, r2
  4223d0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            bg_coords.y1 += img->coords.y1;
  4223d4:	8a63      	ldrh	r3, [r4, #18]
  4223d6:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
  4223da:	4419      	add	r1, r3
  4223dc:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            bg_coords.x2 += img->coords.x1;
  4223e0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  4223e4:	440a      	add	r2, r1
  4223e6:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            bg_coords.y2 += img->coords.y1;
  4223ea:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
  4223ee:	4413      	add	r3, r2
  4223f0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4223f4:	2212      	movs	r2, #18
  4223f6:	4639      	mov	r1, r7
  4223f8:	4620      	mov	r0, r4
  4223fa:	47c8      	blx	r9
            bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  4223fc:	b280      	uxth	r0, r0
  4223fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  422402:	1a18      	subs	r0, r3, r0
  422404:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  422408:	2213      	movs	r2, #19
  42240a:	4639      	mov	r1, r7
  42240c:	4620      	mov	r0, r4
  42240e:	47c8      	blx	r9
            bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  422410:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  422414:	fa13 f080 	uxtah	r0, r3, r0
  422418:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  42241c:	2210      	movs	r2, #16
  42241e:	4639      	mov	r1, r7
  422420:	4620      	mov	r0, r4
  422422:	47c8      	blx	r9
            bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  422424:	b280      	uxth	r0, r0
  422426:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  42242a:	1a18      	subs	r0, r3, r0
  42242c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  422430:	2211      	movs	r2, #17
  422432:	4639      	mov	r1, r7
  422434:	4620      	mov	r0, r4
  422436:	47c8      	blx	r9
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  422438:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  42243c:	fa13 f080 	uxtah	r0, r3, r0
  422440:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
  422444:	aa19      	add	r2, sp, #100	; 0x64
  422446:	9903      	ldr	r1, [sp, #12]
  422448:	f104 0010 	add.w	r0, r4, #16
  42244c:	4b07      	ldr	r3, [pc, #28]	; (42246c <lv_img_design+0x658>)
  42244e:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  422450:	4638      	mov	r0, r7
  422452:	e74d      	b.n	4222f0 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  422454:	2002      	movs	r0, #2
  422456:	e74b      	b.n	4222f0 <lv_img_design+0x4dc>
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  422458:	2002      	movs	r0, #2
  42245a:	e749      	b.n	4222f0 <lv_img_design+0x4dc>
        return LV_DESIGN_RES_COVER;
  42245c:	2001      	movs	r0, #1
  42245e:	e747      	b.n	4222f0 <lv_img_design+0x4dc>
  422460:	0041245d 	.word	0x0041245d
  422464:	0040833d 	.word	0x0040833d
  422468:	00412869 	.word	0x00412869
  42246c:	004124a9 	.word	0x004124a9
  422470:	00407445 	.word	0x00407445

00422474 <lv_img_get_auto_size>:
{
  422474:	b510      	push	{r4, lr}
  422476:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  422478:	4b07      	ldr	r3, [pc, #28]	; (422498 <lv_img_get_auto_size+0x24>)
  42247a:	4798      	blx	r3
  42247c:	b928      	cbnz	r0, 42248a <lv_img_get_auto_size+0x16>
  42247e:	4622      	mov	r2, r4
  422480:	2300      	movs	r3, #0
  422482:	4806      	ldr	r0, [pc, #24]	; (42249c <lv_img_get_auto_size+0x28>)
  422484:	4906      	ldr	r1, [pc, #24]	; (4224a0 <lv_img_get_auto_size+0x2c>)
  422486:	4788      	blx	r1
  422488:	e7fe      	b.n	422488 <lv_img_get_auto_size+0x14>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  42248a:	4620      	mov	r0, r4
  42248c:	4b05      	ldr	r3, [pc, #20]	; (4224a4 <lv_img_get_auto_size+0x30>)
  42248e:	4798      	blx	r3
    return ext->auto_size == 0 ? false : true;
  422490:	7d00      	ldrb	r0, [r0, #20]
}
  422492:	f3c0 0080 	ubfx	r0, r0, #2, #1
  422496:	bd10      	pop	{r4, pc}
  422498:	00415e79 	.word	0x00415e79
  42249c:	0042c168 	.word	0x0042c168
  4224a0:	00415e85 	.word	0x00415e85
  4224a4:	00408095 	.word	0x00408095

004224a8 <lv_img_set_src>:
{
  4224a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4224ac:	b086      	sub	sp, #24
  4224ae:	4605      	mov	r5, r0
  4224b0:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  4224b2:	4b63      	ldr	r3, [pc, #396]	; (422640 <lv_img_set_src+0x198>)
  4224b4:	4798      	blx	r3
  4224b6:	b928      	cbnz	r0, 4224c4 <lv_img_set_src+0x1c>
  4224b8:	462a      	mov	r2, r5
  4224ba:	2300      	movs	r3, #0
  4224bc:	4861      	ldr	r0, [pc, #388]	; (422644 <lv_img_set_src+0x19c>)
  4224be:	4962      	ldr	r1, [pc, #392]	; (422648 <lv_img_set_src+0x1a0>)
  4224c0:	4788      	blx	r1
  4224c2:	e7fe      	b.n	4224c2 <lv_img_set_src+0x1a>
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
  4224c4:	4630      	mov	r0, r6
  4224c6:	4b61      	ldr	r3, [pc, #388]	; (42264c <lv_img_set_src+0x1a4>)
  4224c8:	4798      	blx	r3
  4224ca:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
  4224cc:	4628      	mov	r0, r5
  4224ce:	4b60      	ldr	r3, [pc, #384]	; (422650 <lv_img_set_src+0x1a8>)
  4224d0:	4798      	blx	r3
  4224d2:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
  4224d4:	2f03      	cmp	r7, #3
  4224d6:	d06e      	beq.n	4225b6 <lv_img_set_src+0x10e>
    lv_img_decoder_get_info(src_img, &header);
  4224d8:	a905      	add	r1, sp, #20
  4224da:	4630      	mov	r0, r6
  4224dc:	4b5d      	ldr	r3, [pc, #372]	; (422654 <lv_img_set_src+0x1ac>)
  4224de:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  4224e0:	2f00      	cmp	r7, #0
  4224e2:	d17b      	bne.n	4225dc <lv_img_set_src+0x134>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  4224e4:	7d23      	ldrb	r3, [r4, #20]
  4224e6:	f003 0303 	and.w	r3, r3, #3
  4224ea:	3b01      	subs	r3, #1
  4224ec:	b2db      	uxtb	r3, r3
  4224ee:	2b01      	cmp	r3, #1
  4224f0:	d802      	bhi.n	4224f8 <lv_img_set_src+0x50>
            lv_mem_free(ext->src);
  4224f2:	6820      	ldr	r0, [r4, #0]
  4224f4:	4b58      	ldr	r3, [pc, #352]	; (422658 <lv_img_set_src+0x1b0>)
  4224f6:	4798      	blx	r3
        ext->src = src_img;
  4224f8:	6026      	str	r6, [r4, #0]
    if(src_type == LV_IMG_SRC_SYMBOL) {
  4224fa:	2f02      	cmp	r7, #2
  4224fc:	d12c      	bne.n	422558 <lv_img_set_src+0xb0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4224fe:	f248 028e 	movw	r2, #32910	; 0x808e
  422502:	2100      	movs	r1, #0
  422504:	4628      	mov	r0, r5
  422506:	4b55      	ldr	r3, [pc, #340]	; (42265c <lv_img_set_src+0x1b4>)
  422508:	4798      	blx	r3
  42250a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  42250c:	f248 0280 	movw	r2, #32896	; 0x8080
  422510:	2100      	movs	r1, #0
  422512:	4628      	mov	r0, r5
  422514:	f8df 816c 	ldr.w	r8, [pc, #364]	; 422684 <lv_img_set_src+0x1dc>
  422518:	47c0      	blx	r8
  42251a:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  42251c:	f248 0281 	movw	r2, #32897	; 0x8081
  422520:	2100      	movs	r1, #0
  422522:	4628      	mov	r0, r5
  422524:	47c0      	blx	r8
        _lv_txt_get_size(&size, src_img, font, letter_space, line_space,
  422526:	2300      	movs	r3, #0
  422528:	9302      	str	r3, [sp, #8]
  42252a:	f647 4318 	movw	r3, #31768	; 0x7c18
  42252e:	9301      	str	r3, [sp, #4]
  422530:	9000      	str	r0, [sp, #0]
  422532:	4653      	mov	r3, sl
  422534:	464a      	mov	r2, r9
  422536:	4631      	mov	r1, r6
  422538:	a804      	add	r0, sp, #16
  42253a:	4e49      	ldr	r6, [pc, #292]	; (422660 <lv_img_set_src+0x1b8>)
  42253c:	47b0      	blx	r6
        header.w = size.x;
  42253e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  422542:	9b05      	ldr	r3, [sp, #20]
  422544:	f362 2394 	bfi	r3, r2, #10, #11
  422548:	9305      	str	r3, [sp, #20]
        header.h = size.y;
  42254a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  42254e:	0c1b      	lsrs	r3, r3, #16
  422550:	f362 134f 	bfi	r3, r2, #5, #11
  422554:	f8ad 3016 	strh.w	r3, [sp, #22]
    ext->src_type = src_type;
  422558:	7d21      	ldrb	r1, [r4, #20]
  42255a:	f367 0101 	bfi	r1, r7, #0, #2
    ext->w        = header.w;
  42255e:	9b05      	ldr	r3, [sp, #20]
  422560:	f3c3 238a 	ubfx	r3, r3, #10, #11
  422564:	8123      	strh	r3, [r4, #8]
    ext->h        = header.h;
  422566:	f8bd 0016 	ldrh.w	r0, [sp, #22]
  42256a:	f3c0 104a 	ubfx	r0, r0, #5, #11
  42256e:	b282      	uxth	r2, r0
  422570:	8160      	strh	r0, [r4, #10]
    ext->cf       = header.cf;
  422572:	f89d 0014 	ldrb.w	r0, [sp, #20]
  422576:	f360 01c7 	bfi	r1, r0, #3, #5
  42257a:	7521      	strb	r1, [r4, #20]
    ext->pivot.x = header.w / 2;
  42257c:	f3c3 0349 	ubfx	r3, r3, #1, #10
  422580:	81e3      	strh	r3, [r4, #14]
    ext->pivot.y = header.h / 2;
  422582:	1053      	asrs	r3, r2, #1
  422584:	8223      	strh	r3, [r4, #16]
    if(lv_img_get_auto_size(img) != false) {
  422586:	4628      	mov	r0, r5
  422588:	4b36      	ldr	r3, [pc, #216]	; (422664 <lv_img_set_src+0x1bc>)
  42258a:	4798      	blx	r3
  42258c:	b130      	cbz	r0, 42259c <lv_img_set_src+0xf4>
        lv_obj_set_size(img, ext->w, ext->h);
  42258e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
  422592:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  422596:	4628      	mov	r0, r5
  422598:	4b33      	ldr	r3, [pc, #204]	; (422668 <lv_img_set_src+0x1c0>)
  42259a:	4798      	blx	r3
    if(ext->angle || ext->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_pad(img);
  42259c:	89a3      	ldrh	r3, [r4, #12]
  42259e:	b91b      	cbnz	r3, 4225a8 <lv_img_set_src+0x100>
  4225a0:	8a63      	ldrh	r3, [r4, #18]
  4225a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4225a6:	d002      	beq.n	4225ae <lv_img_set_src+0x106>
  4225a8:	4628      	mov	r0, r5
  4225aa:	4b30      	ldr	r3, [pc, #192]	; (42266c <lv_img_set_src+0x1c4>)
  4225ac:	4798      	blx	r3
    lv_obj_invalidate(img);
  4225ae:	4628      	mov	r0, r5
  4225b0:	4b2f      	ldr	r3, [pc, #188]	; (422670 <lv_img_set_src+0x1c8>)
  4225b2:	4798      	blx	r3
  4225b4:	e00f      	b.n	4225d6 <lv_img_set_src+0x12e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
  4225b6:	7d03      	ldrb	r3, [r0, #20]
  4225b8:	f003 0303 	and.w	r3, r3, #3
  4225bc:	3b01      	subs	r3, #1
  4225be:	b2db      	uxtb	r3, r3
  4225c0:	2b01      	cmp	r3, #1
  4225c2:	d802      	bhi.n	4225ca <lv_img_set_src+0x122>
            lv_mem_free(ext->src);
  4225c4:	6800      	ldr	r0, [r0, #0]
  4225c6:	4b24      	ldr	r3, [pc, #144]	; (422658 <lv_img_set_src+0x1b0>)
  4225c8:	4798      	blx	r3
        ext->src      = NULL;
  4225ca:	2300      	movs	r3, #0
  4225cc:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
  4225ce:	7d23      	ldrb	r3, [r4, #20]
  4225d0:	f043 0303 	orr.w	r3, r3, #3
  4225d4:	7523      	strb	r3, [r4, #20]
}
  4225d6:	b006      	add	sp, #24
  4225d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
  4225dc:	1e7b      	subs	r3, r7, #1
  4225de:	b2db      	uxtb	r3, r3
  4225e0:	2b01      	cmp	r3, #1
  4225e2:	d88a      	bhi.n	4224fa <lv_img_set_src+0x52>
        if(ext->src != src_img) {
  4225e4:	f8d4 8000 	ldr.w	r8, [r4]
  4225e8:	4546      	cmp	r6, r8
  4225ea:	d086      	beq.n	4224fa <lv_img_set_src+0x52>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  4225ec:	7d23      	ldrb	r3, [r4, #20]
  4225ee:	f003 0303 	and.w	r3, r3, #3
  4225f2:	3b01      	subs	r3, #1
  4225f4:	b2db      	uxtb	r3, r3
  4225f6:	2b01      	cmp	r3, #1
  4225f8:	d901      	bls.n	4225fe <lv_img_set_src+0x156>
            const void * old_src = NULL;
  4225fa:	f04f 0800 	mov.w	r8, #0
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
  4225fe:	4630      	mov	r0, r6
  422600:	4b1c      	ldr	r3, [pc, #112]	; (422674 <lv_img_set_src+0x1cc>)
  422602:	4798      	blx	r3
  422604:	3001      	adds	r0, #1
  422606:	4b1c      	ldr	r3, [pc, #112]	; (422678 <lv_img_set_src+0x1d0>)
  422608:	4798      	blx	r3
  42260a:	4681      	mov	r9, r0
            LV_ASSERT_MEM(new_str);
  42260c:	4b0c      	ldr	r3, [pc, #48]	; (422640 <lv_img_set_src+0x198>)
  42260e:	4798      	blx	r3
  422610:	b928      	cbnz	r0, 42261e <lv_img_set_src+0x176>
  422612:	464a      	mov	r2, r9
  422614:	2300      	movs	r3, #0
  422616:	4819      	ldr	r0, [pc, #100]	; (42267c <lv_img_set_src+0x1d4>)
  422618:	490b      	ldr	r1, [pc, #44]	; (422648 <lv_img_set_src+0x1a0>)
  42261a:	4788      	blx	r1
  42261c:	e7fe      	b.n	42261c <lv_img_set_src+0x174>
            if(new_str == NULL) return;
  42261e:	f1b9 0f00 	cmp.w	r9, #0
  422622:	d0d8      	beq.n	4225d6 <lv_img_set_src+0x12e>
            strcpy(new_str, src_img);
  422624:	4631      	mov	r1, r6
  422626:	4648      	mov	r0, r9
  422628:	4b15      	ldr	r3, [pc, #84]	; (422680 <lv_img_set_src+0x1d8>)
  42262a:	4798      	blx	r3
            ext->src = new_str;
  42262c:	f8c4 9000 	str.w	r9, [r4]
            if(old_src) lv_mem_free(old_src);
  422630:	f1b8 0f00 	cmp.w	r8, #0
  422634:	f43f af61 	beq.w	4224fa <lv_img_set_src+0x52>
  422638:	4640      	mov	r0, r8
  42263a:	4b07      	ldr	r3, [pc, #28]	; (422658 <lv_img_set_src+0x1b0>)
  42263c:	4798      	blx	r3
  42263e:	e75c      	b.n	4224fa <lv_img_set_src+0x52>
  422640:	00415e79 	.word	0x00415e79
  422644:	0042c168 	.word	0x0042c168
  422648:	00415e85 	.word	0x00415e85
  42264c:	0040d62d 	.word	0x0040d62d
  422650:	00408095 	.word	0x00408095
  422654:	00413909 	.word	0x00413909
  422658:	00416681 	.word	0x00416681
  42265c:	0040733d 	.word	0x0040733d
  422660:	00417e85 	.word	0x00417e85
  422664:	00422475 	.word	0x00422475
  422668:	00406c39 	.word	0x00406c39
  42266c:	0040597d 	.word	0x0040597d
  422670:	00405f59 	.word	0x00405f59
  422674:	00428001 	.word	0x00428001
  422678:	004165bd 	.word	0x004165bd
  42267c:	0042c154 	.word	0x0042c154
  422680:	00427f1d 	.word	0x00427f1d
  422684:	00407445 	.word	0x00407445

00422688 <lv_img_create>:
{
  422688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42268c:	4680      	mov	r8, r0
  42268e:	460f      	mov	r7, r1
    lv_obj_t * img = lv_obj_create(par, copy);
  422690:	4b4c      	ldr	r3, [pc, #304]	; (4227c4 <lv_img_create+0x13c>)
  422692:	4798      	blx	r3
  422694:	4605      	mov	r5, r0
    LV_ASSERT_MEM(img);
  422696:	4b4c      	ldr	r3, [pc, #304]	; (4227c8 <lv_img_create+0x140>)
  422698:	4798      	blx	r3
  42269a:	b190      	cbz	r0, 4226c2 <lv_img_create+0x3a>
    if(img == NULL) return NULL;
  42269c:	2d00      	cmp	r5, #0
  42269e:	d070      	beq.n	422782 <lv_img_create+0xfa>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  4226a0:	4b4a      	ldr	r3, [pc, #296]	; (4227cc <lv_img_create+0x144>)
  4226a2:	681b      	ldr	r3, [r3, #0]
  4226a4:	b19b      	cbz	r3, 4226ce <lv_img_create+0x46>
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(img, sizeof(lv_img_ext_t));
  4226a6:	2118      	movs	r1, #24
  4226a8:	4628      	mov	r0, r5
  4226aa:	4b49      	ldr	r3, [pc, #292]	; (4227d0 <lv_img_create+0x148>)
  4226ac:	4798      	blx	r3
  4226ae:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  4226b0:	4b45      	ldr	r3, [pc, #276]	; (4227c8 <lv_img_create+0x140>)
  4226b2:	4798      	blx	r3
  4226b4:	b988      	cbnz	r0, 4226da <lv_img_create+0x52>
  4226b6:	4622      	mov	r2, r4
  4226b8:	2300      	movs	r3, #0
  4226ba:	4846      	ldr	r0, [pc, #280]	; (4227d4 <lv_img_create+0x14c>)
  4226bc:	4946      	ldr	r1, [pc, #280]	; (4227d8 <lv_img_create+0x150>)
  4226be:	4788      	blx	r1
  4226c0:	e7fe      	b.n	4226c0 <lv_img_create+0x38>
    LV_ASSERT_MEM(img);
  4226c2:	462a      	mov	r2, r5
  4226c4:	2300      	movs	r3, #0
  4226c6:	4843      	ldr	r0, [pc, #268]	; (4227d4 <lv_img_create+0x14c>)
  4226c8:	4943      	ldr	r1, [pc, #268]	; (4227d8 <lv_img_create+0x150>)
  4226ca:	4788      	blx	r1
  4226cc:	e7fe      	b.n	4226cc <lv_img_create+0x44>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  4226ce:	4628      	mov	r0, r5
  4226d0:	4b42      	ldr	r3, [pc, #264]	; (4227dc <lv_img_create+0x154>)
  4226d2:	4798      	blx	r3
  4226d4:	4b3d      	ldr	r3, [pc, #244]	; (4227cc <lv_img_create+0x144>)
  4226d6:	6018      	str	r0, [r3, #0]
  4226d8:	e7e5      	b.n	4226a6 <lv_img_create+0x1e>
    if(ext == NULL) {
  4226da:	2c00      	cmp	r4, #0
  4226dc:	d054      	beq.n	422788 <lv_img_create+0x100>
    ext->src       = NULL;
  4226de:	2600      	movs	r6, #0
  4226e0:	6026      	str	r6, [r4, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
  4226e2:	7d23      	ldrb	r3, [r4, #20]
    ext->cf        = LV_IMG_CF_UNKNOWN;
  4226e4:	f043 0303 	orr.w	r3, r3, #3
  4226e8:	f366 03c7 	bfi	r3, r6, #3, #5
  4226ec:	7523      	strb	r3, [r4, #20]
    ext->w         = lv_obj_get_width(img);
  4226ee:	4628      	mov	r0, r5
  4226f0:	4b3b      	ldr	r3, [pc, #236]	; (4227e0 <lv_img_create+0x158>)
  4226f2:	4798      	blx	r3
  4226f4:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(img);
  4226f6:	4628      	mov	r0, r5
  4226f8:	4b3a      	ldr	r3, [pc, #232]	; (4227e4 <lv_img_create+0x15c>)
  4226fa:	4798      	blx	r3
  4226fc:	8160      	strh	r0, [r4, #10]
    ext->angle = 0;
  4226fe:	81a6      	strh	r6, [r4, #12]
    ext->zoom = LV_IMG_ZOOM_NONE;
  422700:	f44f 7380 	mov.w	r3, #256	; 0x100
  422704:	8263      	strh	r3, [r4, #18]
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
  422706:	7d63      	ldrb	r3, [r4, #21]
  422708:	f043 0301 	orr.w	r3, r3, #1
  42270c:	7563      	strb	r3, [r4, #21]
    ext->auto_size = 1;
  42270e:	7d23      	ldrb	r3, [r4, #20]
  422710:	f043 0304 	orr.w	r3, r3, #4
  422714:	7523      	strb	r3, [r4, #20]
    ext->offset.x  = 0;
  422716:	80a6      	strh	r6, [r4, #4]
    ext->offset.y  = 0;
  422718:	80e6      	strh	r6, [r4, #6]
    ext->pivot.x = 0;
  42271a:	81e6      	strh	r6, [r4, #14]
    ext->pivot.y = 0;
  42271c:	8226      	strh	r6, [r4, #16]
    lv_obj_set_signal_cb(img, lv_img_signal);
  42271e:	4932      	ldr	r1, [pc, #200]	; (4227e8 <lv_img_create+0x160>)
  422720:	4628      	mov	r0, r5
  422722:	4b32      	ldr	r3, [pc, #200]	; (4227ec <lv_img_create+0x164>)
  422724:	4798      	blx	r3
    lv_obj_set_design_cb(img, lv_img_design);
  422726:	4932      	ldr	r1, [pc, #200]	; (4227f0 <lv_img_create+0x168>)
  422728:	4628      	mov	r0, r5
  42272a:	4b32      	ldr	r3, [pc, #200]	; (4227f4 <lv_img_create+0x16c>)
  42272c:	4798      	blx	r3
    if(copy == NULL) {
  42272e:	2f00      	cmp	r7, #0
  422730:	d02f      	beq.n	422792 <lv_img_create+0x10a>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  422732:	4638      	mov	r0, r7
  422734:	4b30      	ldr	r3, [pc, #192]	; (4227f8 <lv_img_create+0x170>)
  422736:	4798      	blx	r3
        ext->auto_size     = copy_ext->auto_size;
  422738:	7d03      	ldrb	r3, [r0, #20]
  42273a:	f3c3 0380 	ubfx	r3, r3, #2, #1
  42273e:	7d22      	ldrb	r2, [r4, #20]
  422740:	f363 0282 	bfi	r2, r3, #2, #1
  422744:	7522      	strb	r2, [r4, #20]
        ext->zoom          = copy_ext->zoom;
  422746:	8a43      	ldrh	r3, [r0, #18]
  422748:	8263      	strh	r3, [r4, #18]
        ext->angle         = copy_ext->angle;
  42274a:	8983      	ldrh	r3, [r0, #12]
  42274c:	81a3      	strh	r3, [r4, #12]
        ext->antialias     = copy_ext->antialias;
  42274e:	7d42      	ldrb	r2, [r0, #21]
  422750:	7d63      	ldrb	r3, [r4, #21]
  422752:	f362 0300 	bfi	r3, r2, #0, #1
  422756:	7563      	strb	r3, [r4, #21]
        ext->offset.x     = copy_ext->offset.x;
  422758:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  42275c:	80a3      	strh	r3, [r4, #4]
        ext->offset.y     = copy_ext->offset.y;
  42275e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  422762:	80e3      	strh	r3, [r4, #6]
        ext->pivot.x     = copy_ext->pivot.x;
  422764:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  422768:	81e3      	strh	r3, [r4, #14]
        ext->pivot.y     = copy_ext->pivot.y;
  42276a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  42276e:	8223      	strh	r3, [r4, #16]
        lv_img_set_src(img, copy_ext->src);
  422770:	6801      	ldr	r1, [r0, #0]
  422772:	4628      	mov	r0, r5
  422774:	4b21      	ldr	r3, [pc, #132]	; (4227fc <lv_img_create+0x174>)
  422776:	4798      	blx	r3
        lv_obj_refresh_style(img, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  422778:	22ff      	movs	r2, #255	; 0xff
  42277a:	4611      	mov	r1, r2
  42277c:	4628      	mov	r0, r5
  42277e:	4b20      	ldr	r3, [pc, #128]	; (422800 <lv_img_create+0x178>)
  422780:	4798      	blx	r3
}
  422782:	4628      	mov	r0, r5
  422784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(img);
  422788:	4628      	mov	r0, r5
  42278a:	4b1e      	ldr	r3, [pc, #120]	; (422804 <lv_img_create+0x17c>)
  42278c:	4798      	blx	r3
        return NULL;
  42278e:	2500      	movs	r5, #0
  422790:	e7f7      	b.n	422782 <lv_img_create+0xfa>
        lv_theme_apply(img, LV_THEME_IMAGE);
  422792:	210f      	movs	r1, #15
  422794:	4628      	mov	r0, r5
  422796:	4b1c      	ldr	r3, [pc, #112]	; (422808 <lv_img_create+0x180>)
  422798:	4798      	blx	r3
        lv_obj_set_click(img, false);
  42279a:	4631      	mov	r1, r6
  42279c:	4628      	mov	r0, r5
  42279e:	4b1b      	ldr	r3, [pc, #108]	; (42280c <lv_img_create+0x184>)
  4227a0:	4798      	blx	r3
        lv_obj_set_adv_hittest(img, true); /*Images have fast hit-testing*/
  4227a2:	2101      	movs	r1, #1
  4227a4:	4628      	mov	r0, r5
  4227a6:	4b1a      	ldr	r3, [pc, #104]	; (422810 <lv_img_create+0x188>)
  4227a8:	4798      	blx	r3
        if(par != NULL) {
  4227aa:	f1b8 0f00 	cmp.w	r8, #0
  4227ae:	d004      	beq.n	4227ba <lv_img_create+0x132>
            ext->auto_size = 1;
  4227b0:	7d23      	ldrb	r3, [r4, #20]
  4227b2:	f043 0304 	orr.w	r3, r3, #4
  4227b6:	7523      	strb	r3, [r4, #20]
  4227b8:	e7e3      	b.n	422782 <lv_img_create+0xfa>
            ext->auto_size = 0;
  4227ba:	7d23      	ldrb	r3, [r4, #20]
  4227bc:	f36f 0382 	bfc	r3, #2, #1
  4227c0:	7523      	strb	r3, [r4, #20]
  4227c2:	e7de      	b.n	422782 <lv_img_create+0xfa>
  4227c4:	00406815 	.word	0x00406815
  4227c8:	00415e79 	.word	0x00415e79
  4227cc:	20414874 	.word	0x20414874
  4227d0:	00405941 	.word	0x00405941
  4227d4:	0042c154 	.word	0x0042c154
  4227d8:	00415e85 	.word	0x00415e85
  4227dc:	00408045 	.word	0x00408045
  4227e0:	00405b81 	.word	0x00405b81
  4227e4:	00405bb1 	.word	0x00405bb1
  4227e8:	00422815 	.word	0x00422815
  4227ec:	004058dd 	.word	0x004058dd
  4227f0:	00421e15 	.word	0x00421e15
  4227f4:	00405919 	.word	0x00405919
  4227f8:	00408095 	.word	0x00408095
  4227fc:	004224a9 	.word	0x004224a9
  422800:	00407861 	.word	0x00407861
  422804:	004081f5 	.word	0x004081f5
  422808:	004182f9 	.word	0x004182f9
  42280c:	0040571d 	.word	0x0040571d
  422810:	004056e1 	.word	0x004056e1

00422814 <lv_img_signal>:
{
  422814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422818:	b085      	sub	sp, #20
  42281a:	4607      	mov	r7, r0
  42281c:	460c      	mov	r4, r1
  42281e:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  422820:	2908      	cmp	r1, #8
  422822:	d020      	beq.n	422866 <lv_img_signal+0x52>
    res = ancestor_signal(img, sign, param);
  422824:	4b98      	ldr	r3, [pc, #608]	; (422a88 <lv_img_signal+0x274>)
  422826:	681b      	ldr	r3, [r3, #0]
  422828:	4798      	blx	r3
  42282a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  42282c:	2801      	cmp	r0, #1
  42282e:	d120      	bne.n	422872 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  422830:	2c07      	cmp	r4, #7
  422832:	d02a      	beq.n	42288a <lv_img_signal+0x76>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  422834:	4638      	mov	r0, r7
  422836:	4b95      	ldr	r3, [pc, #596]	; (422a8c <lv_img_signal+0x278>)
  422838:	4798      	blx	r3
  42283a:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  42283c:	bb5c      	cbnz	r4, 422896 <lv_img_signal+0x82>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  42283e:	7d03      	ldrb	r3, [r0, #20]
  422840:	f003 0303 	and.w	r3, r3, #3
  422844:	3b01      	subs	r3, #1
  422846:	b2db      	uxtb	r3, r3
  422848:	2b01      	cmp	r3, #1
  42284a:	d812      	bhi.n	422872 <lv_img_signal+0x5e>
            lv_mem_free(ext->src);
  42284c:	6800      	ldr	r0, [r0, #0]
  42284e:	4b90      	ldr	r3, [pc, #576]	; (422a90 <lv_img_signal+0x27c>)
  422850:	4798      	blx	r3
            ext->src      = NULL;
  422852:	2300      	movs	r3, #0
  422854:	f8c8 3000 	str.w	r3, [r8]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
  422858:	f898 3014 	ldrb.w	r3, [r8, #20]
  42285c:	f043 0303 	orr.w	r3, r3, #3
  422860:	f888 3014 	strb.w	r3, [r8, #20]
  422864:	e005      	b.n	422872 <lv_img_signal+0x5e>
        info->result = lv_img_get_style(img, info->part);
  422866:	7811      	ldrb	r1, [r2, #0]
  422868:	4b8a      	ldr	r3, [pc, #552]	; (422a94 <lv_img_signal+0x280>)
  42286a:	4798      	blx	r3
  42286c:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  42286e:	b120      	cbz	r0, 42287a <lv_img_signal+0x66>
  422870:	2601      	movs	r6, #1
}
  422872:	4630      	mov	r0, r6
  422874:	b005      	add	sp, #20
  422876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else return ancestor_signal(img, sign, param);
  42287a:	4b83      	ldr	r3, [pc, #524]	; (422a88 <lv_img_signal+0x274>)
  42287c:	681b      	ldr	r3, [r3, #0]
  42287e:	462a      	mov	r2, r5
  422880:	4621      	mov	r1, r4
  422882:	4638      	mov	r0, r7
  422884:	4798      	blx	r3
  422886:	4606      	mov	r6, r0
  422888:	e7f3      	b.n	422872 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  42288a:	4983      	ldr	r1, [pc, #524]	; (422a98 <lv_img_signal+0x284>)
  42288c:	4628      	mov	r0, r5
  42288e:	4b83      	ldr	r3, [pc, #524]	; (422a9c <lv_img_signal+0x288>)
  422890:	4798      	blx	r3
  422892:	4606      	mov	r6, r0
  422894:	e7ed      	b.n	422872 <lv_img_signal+0x5e>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  422896:	2c04      	cmp	r4, #4
  422898:	d027      	beq.n	4228ea <lv_img_signal+0xd6>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  42289a:	2c06      	cmp	r4, #6
  42289c:	d02f      	beq.n	4228fe <lv_img_signal+0xea>
    else if(sign == LV_SIGNAL_HIT_TEST) {
  42289e:	2c0a      	cmp	r4, #10
  4228a0:	d1e7      	bne.n	422872 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4228a2:	2207      	movs	r2, #7
  4228a4:	2100      	movs	r1, #0
  4228a6:	4638      	mov	r0, r7
  4228a8:	f8df a200 	ldr.w	sl, [pc, #512]	; 422aac <lv_img_signal+0x298>
  4228ac:	47d0      	blx	sl
        zoom = (zoom * ext->zoom) >> 8;
  4228ae:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  4228b2:	fb03 f300 	mul.w	r3, r3, r0
  4228b6:	121c      	asrs	r4, r3, #8
  4228b8:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  4228bc:	2206      	movs	r2, #6
  4228be:	2100      	movs	r1, #0
  4228c0:	4638      	mov	r0, r7
  4228c2:	47d0      	blx	sl
        angle += ext->angle;
  4228c4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  4228c8:	4403      	add	r3, r0
  4228ca:	fa0f fa83 	sxth.w	sl, r3
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  4228ce:	f9b8 b008 	ldrsh.w	fp, [r8, #8]
  4228d2:	4638      	mov	r0, r7
  4228d4:	4b72      	ldr	r3, [pc, #456]	; (422aa0 <lv_img_signal+0x28c>)
  4228d6:	4798      	blx	r3
  4228d8:	4583      	cmp	fp, r0
  4228da:	f000 8086 	beq.w	4229ea <lv_img_signal+0x1d6>
            info->result = lv_obj_is_point_on_coords(img, info->point);
  4228de:	6829      	ldr	r1, [r5, #0]
  4228e0:	4638      	mov	r0, r7
  4228e2:	4b70      	ldr	r3, [pc, #448]	; (422aa4 <lv_img_signal+0x290>)
  4228e4:	4798      	blx	r3
  4228e6:	7128      	strb	r0, [r5, #4]
  4228e8:	e7c3      	b.n	422872 <lv_img_signal+0x5e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  4228ea:	7d03      	ldrb	r3, [r0, #20]
  4228ec:	f003 0303 	and.w	r3, r3, #3
  4228f0:	2b02      	cmp	r3, #2
  4228f2:	d1be      	bne.n	422872 <lv_img_signal+0x5e>
            lv_img_set_src(img, ext->src);
  4228f4:	6801      	ldr	r1, [r0, #0]
  4228f6:	4638      	mov	r0, r7
  4228f8:	4b6b      	ldr	r3, [pc, #428]	; (422aa8 <lv_img_signal+0x294>)
  4228fa:	4798      	blx	r3
  4228fc:	e7b9      	b.n	422872 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4228fe:	2207      	movs	r2, #7
  422900:	2100      	movs	r1, #0
  422902:	4638      	mov	r0, r7
  422904:	4d69      	ldr	r5, [pc, #420]	; (422aac <lv_img_signal+0x298>)
  422906:	47a8      	blx	r5
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
  422908:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  42290c:	fb03 f300 	mul.w	r3, r3, r0
  422910:	121c      	asrs	r4, r3, #8
  422912:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  422916:	2206      	movs	r2, #6
  422918:	2100      	movs	r1, #0
  42291a:	4638      	mov	r0, r7
  42291c:	47a8      	blx	r5
        transf_angle += ext->angle;
  42291e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  422922:	4403      	add	r3, r0
  422924:	b21d      	sxth	r5, r3
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
  422926:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  42292a:	bf08      	it	eq
  42292c:	2d00      	cmpeq	r5, #0
  42292e:	d126      	bne.n	42297e <lv_img_signal+0x16a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422930:	2212      	movs	r2, #18
  422932:	2100      	movs	r1, #0
  422934:	4638      	mov	r0, r7
  422936:	4d5d      	ldr	r5, [pc, #372]	; (422aac <lv_img_signal+0x298>)
  422938:	47a8      	blx	r5
  42293a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  42293c:	2213      	movs	r2, #19
  42293e:	2100      	movs	r1, #0
  422940:	4638      	mov	r0, r7
  422942:	47a8      	blx	r5
  422944:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  422946:	2210      	movs	r2, #16
  422948:	2100      	movs	r1, #0
  42294a:	4638      	mov	r0, r7
  42294c:	47a8      	blx	r5
  42294e:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  422950:	2211      	movs	r2, #17
  422952:	2100      	movs	r1, #0
  422954:	4638      	mov	r0, r7
  422956:	47a8      	blx	r5
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, left);
  422958:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
  42295c:	454b      	cmp	r3, r9
  42295e:	bfb8      	it	lt
  422960:	464b      	movlt	r3, r9
  422962:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
  422964:	4543      	cmp	r3, r8
  422966:	bfb8      	it	lt
  422968:	4643      	movlt	r3, r8
  42296a:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
  42296c:	42a3      	cmp	r3, r4
  42296e:	bfb8      	it	lt
  422970:	4623      	movlt	r3, r4
  422972:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);
  422974:	4298      	cmp	r0, r3
  422976:	bfb8      	it	lt
  422978:	4618      	movlt	r0, r3
  42297a:	8678      	strh	r0, [r7, #50]	; 0x32
  42297c:	e779      	b.n	422872 <lv_img_signal+0x5e>
            lv_coord_t w = lv_obj_get_width(img);
  42297e:	4638      	mov	r0, r7
  422980:	4b47      	ldr	r3, [pc, #284]	; (422aa0 <lv_img_signal+0x28c>)
  422982:	4798      	blx	r3
  422984:	4682      	mov	sl, r0
            lv_coord_t h = lv_obj_get_height(img);
  422986:	4638      	mov	r0, r7
  422988:	4b49      	ldr	r3, [pc, #292]	; (422ab0 <lv_img_signal+0x29c>)
  42298a:	4798      	blx	r3
  42298c:	4681      	mov	r9, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
  42298e:	f108 030e 	add.w	r3, r8, #14
  422992:	9301      	str	r3, [sp, #4]
  422994:	b2a4      	uxth	r4, r4
  422996:	9400      	str	r4, [sp, #0]
  422998:	462b      	mov	r3, r5
  42299a:	4602      	mov	r2, r0
  42299c:	4651      	mov	r1, sl
  42299e:	a802      	add	r0, sp, #8
  4229a0:	4c44      	ldr	r4, [pc, #272]	; (422ab4 <lv_img_signal+0x2a0>)
  4229a2:	47a0      	blx	r4
            lv_coord_t pad_ori = img->ext_draw_pad;
  4229a4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
  4229a8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  4229ac:	1a9a      	subs	r2, r3, r2
  4229ae:	429a      	cmp	r2, r3
  4229b0:	bfb8      	it	lt
  4229b2:	461a      	movlt	r2, r3
  4229b4:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
  4229b6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  4229ba:	1a9a      	subs	r2, r3, r2
  4229bc:	428a      	cmp	r2, r1
  4229be:	bfb8      	it	lt
  4229c0:	460a      	movlt	r2, r1
  4229c2:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
  4229c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  4229c8:	441a      	add	r2, r3
  4229ca:	eba2 020a 	sub.w	r2, r2, sl
  4229ce:	428a      	cmp	r2, r1
  4229d0:	bfb8      	it	lt
  4229d2:	460a      	movlt	r2, r1
  4229d4:	b212      	sxth	r2, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
  4229d6:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  4229da:	440b      	add	r3, r1
  4229dc:	eba3 0309 	sub.w	r3, r3, r9
  4229e0:	4293      	cmp	r3, r2
  4229e2:	bfb8      	it	lt
  4229e4:	4613      	movlt	r3, r2
  4229e6:	867b      	strh	r3, [r7, #50]	; 0x32
  4229e8:	e7a2      	b.n	422930 <lv_img_signal+0x11c>
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  4229ea:	f9b8 b00a 	ldrsh.w	fp, [r8, #10]
  4229ee:	4638      	mov	r0, r7
  4229f0:	4b2f      	ldr	r3, [pc, #188]	; (422ab0 <lv_img_signal+0x29c>)
  4229f2:	4798      	blx	r3
  4229f4:	4583      	cmp	fp, r0
  4229f6:	f47f af72 	bne.w	4228de <lv_img_signal+0xca>
  4229fa:	f1ba 0f00 	cmp.w	sl, #0
  4229fe:	bf08      	it	eq
  422a00:	f5b9 7f80 	cmpeq.w	r9, #256	; 0x100
  422a04:	d108      	bne.n	422a18 <lv_img_signal+0x204>
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  422a06:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  422a0a:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
  422a0e:	2102      	movs	r1, #2
  422a10:	fb93 f3f1 	sdiv	r3, r3, r1
  422a14:	429a      	cmp	r2, r3
  422a16:	d02e      	beq.n	422a76 <lv_img_signal+0x262>
            lv_coord_t w = lv_obj_get_width(img);
  422a18:	4638      	mov	r0, r7
  422a1a:	4b21      	ldr	r3, [pc, #132]	; (422aa0 <lv_img_signal+0x28c>)
  422a1c:	4798      	blx	r3
  422a1e:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(img);
  422a20:	4638      	mov	r0, r7
  422a22:	4b23      	ldr	r3, [pc, #140]	; (422ab0 <lv_img_signal+0x29c>)
  422a24:	4798      	blx	r3
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
  422a26:	f108 030e 	add.w	r3, r8, #14
  422a2a:	9301      	str	r3, [sp, #4]
  422a2c:	b2a4      	uxth	r4, r4
  422a2e:	9400      	str	r4, [sp, #0]
  422a30:	4653      	mov	r3, sl
  422a32:	4602      	mov	r2, r0
  422a34:	4649      	mov	r1, r9
  422a36:	a802      	add	r0, sp, #8
  422a38:	4c1e      	ldr	r4, [pc, #120]	; (422ab4 <lv_img_signal+0x2a0>)
  422a3a:	47a0      	blx	r4
            coords.x1 += img->coords.x1;
  422a3c:	8a3a      	ldrh	r2, [r7, #16]
  422a3e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  422a42:	4413      	add	r3, r2
  422a44:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 += img->coords.y1;
  422a48:	8a7b      	ldrh	r3, [r7, #18]
  422a4a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
  422a4e:	4419      	add	r1, r3
  422a50:	f8ad 100a 	strh.w	r1, [sp, #10]
            coords.x2 += img->coords.x1;
  422a54:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  422a58:	440a      	add	r2, r1
  422a5a:	f8ad 200c 	strh.w	r2, [sp, #12]
            coords.y2 += img->coords.y1;
  422a5e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  422a62:	4413      	add	r3, r2
  422a64:	f8ad 300e 	strh.w	r3, [sp, #14]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
  422a68:	2200      	movs	r2, #0
  422a6a:	6829      	ldr	r1, [r5, #0]
  422a6c:	a802      	add	r0, sp, #8
  422a6e:	4b12      	ldr	r3, [pc, #72]	; (422ab8 <lv_img_signal+0x2a4>)
  422a70:	4798      	blx	r3
  422a72:	7128      	strb	r0, [r5, #4]
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  422a74:	e6fd      	b.n	422872 <lv_img_signal+0x5e>
  422a76:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
  422a7a:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
  422a7e:	fb93 f3f1 	sdiv	r3, r3, r1
  422a82:	429a      	cmp	r2, r3
  422a84:	d1c8      	bne.n	422a18 <lv_img_signal+0x204>
  422a86:	e72a      	b.n	4228de <lv_img_signal+0xca>
  422a88:	20414874 	.word	0x20414874
  422a8c:	00408095 	.word	0x00408095
  422a90:	00416681 	.word	0x00416681
  422a94:	00421e09 	.word	0x00421e09
  422a98:	0042f8d4 	.word	0x0042f8d4
  422a9c:	00408321 	.word	0x00408321
  422aa0:	00405b81 	.word	0x00405b81
  422aa4:	004082b1 	.word	0x004082b1
  422aa8:	004224a9 	.word	0x004224a9
  422aac:	00407445 	.word	0x00407445
  422ab0:	00405bb1 	.word	0x00405bb1
  422ab4:	00412869 	.word	0x00412869
  422ab8:	00415655 	.word	0x00415655

00422abc <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
  422abc:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422abe:	4b05      	ldr	r3, [pc, #20]	; (422ad4 <lv_label_get_dot_tmp+0x18>)
  422ac0:	4798      	blx	r3
    if(ext->dot_tmp_alloc) {
  422ac2:	7cc3      	ldrb	r3, [r0, #19]
  422ac4:	f013 0f01 	tst.w	r3, #1
  422ac8:	d101      	bne.n	422ace <lv_label_get_dot_tmp+0x12>
        return ext->dot.tmp_ptr;
    }
    else {
        return ext->dot.tmp;
  422aca:	3004      	adds	r0, #4
    }
}
  422acc:	bd08      	pop	{r3, pc}
        return ext->dot.tmp_ptr;
  422ace:	6840      	ldr	r0, [r0, #4]
  422ad0:	bd08      	pop	{r3, pc}
  422ad2:	bf00      	nop
  422ad4:	00408095 	.word	0x00408095

00422ad8 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
  422ad8:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422ada:	4b09      	ldr	r3, [pc, #36]	; (422b00 <lv_label_dot_tmp_free+0x28>)
  422adc:	4798      	blx	r3
  422ade:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
  422ae0:	7cc3      	ldrb	r3, [r0, #19]
  422ae2:	f013 0f01 	tst.w	r3, #1
  422ae6:	d003      	beq.n	422af0 <lv_label_dot_tmp_free+0x18>
  422ae8:	6840      	ldr	r0, [r0, #4]
  422aea:	b108      	cbz	r0, 422af0 <lv_label_dot_tmp_free+0x18>
        lv_mem_free(ext->dot.tmp_ptr);
  422aec:	4b05      	ldr	r3, [pc, #20]	; (422b04 <lv_label_dot_tmp_free+0x2c>)
  422aee:	4798      	blx	r3
    }
    ext->dot_tmp_alloc = false;
  422af0:	7ce3      	ldrb	r3, [r4, #19]
  422af2:	f36f 0300 	bfc	r3, #0, #1
  422af6:	74e3      	strb	r3, [r4, #19]
    ext->dot.tmp_ptr   = NULL;
  422af8:	2300      	movs	r3, #0
  422afa:	6063      	str	r3, [r4, #4]
  422afc:	bd10      	pop	{r4, pc}
  422afe:	bf00      	nop
  422b00:	00408095 	.word	0x00408095
  422b04:	00416681 	.word	0x00416681

00422b08 <lv_label_revert_dots>:
{
  422b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  422b0a:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422b0c:	4b16      	ldr	r3, [pc, #88]	; (422b68 <lv_label_revert_dots+0x60>)
  422b0e:	4798      	blx	r3
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
  422b10:	7c83      	ldrb	r3, [r0, #18]
  422b12:	f003 0307 	and.w	r3, r3, #7
  422b16:	2b02      	cmp	r3, #2
  422b18:	d000      	beq.n	422b1c <lv_label_revert_dots+0x14>
  422b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  422b1c:	4604      	mov	r4, r0
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
  422b1e:	6881      	ldr	r1, [r0, #8]
  422b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
  422b24:	4299      	cmp	r1, r3
  422b26:	d0f8      	beq.n	422b1a <lv_label_revert_dots+0x12>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
  422b28:	4b10      	ldr	r3, [pc, #64]	; (422b6c <lv_label_revert_dots+0x64>)
  422b2a:	681b      	ldr	r3, [r3, #0]
  422b2c:	3903      	subs	r1, #3
  422b2e:	6800      	ldr	r0, [r0, #0]
  422b30:	4798      	blx	r3
  422b32:	4606      	mov	r6, r0
    char * dot_tmp = lv_label_get_dot_tmp(label);
  422b34:	4638      	mov	r0, r7
  422b36:	4b0e      	ldr	r3, [pc, #56]	; (422b70 <lv_label_revert_dots+0x68>)
  422b38:	4798      	blx	r3
    uint8_t i      = 0;
  422b3a:	2300      	movs	r3, #0
    while(ext->text[byte_i + i] != '\0') {
  422b3c:	e003      	b.n	422b46 <lv_label_revert_dots+0x3e>
        ext->text[byte_i + i] = dot_tmp[i];
  422b3e:	5cc5      	ldrb	r5, [r0, r3]
  422b40:	548d      	strb	r5, [r1, r2]
        i++;
  422b42:	3301      	adds	r3, #1
  422b44:	b2db      	uxtb	r3, r3
    while(ext->text[byte_i + i] != '\0') {
  422b46:	6821      	ldr	r1, [r4, #0]
  422b48:	18f2      	adds	r2, r6, r3
  422b4a:	eb01 0e02 	add.w	lr, r1, r2
  422b4e:	5c8d      	ldrb	r5, [r1, r2]
  422b50:	2d00      	cmp	r5, #0
  422b52:	d1f4      	bne.n	422b3e <lv_label_revert_dots+0x36>
    ext->text[byte_i + i] = dot_tmp[i];
  422b54:	5cc3      	ldrb	r3, [r0, r3]
  422b56:	f88e 3000 	strb.w	r3, [lr]
    lv_label_dot_tmp_free(label);
  422b5a:	4638      	mov	r0, r7
  422b5c:	4b05      	ldr	r3, [pc, #20]	; (422b74 <lv_label_revert_dots+0x6c>)
  422b5e:	4798      	blx	r3
    ext->dot_end = LV_LABEL_DOT_END_INV;
  422b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
  422b64:	60a3      	str	r3, [r4, #8]
  422b66:	e7d8      	b.n	422b1a <lv_label_revert_dots+0x12>
  422b68:	00408095 	.word	0x00408095
  422b6c:	204000b0 	.word	0x204000b0
  422b70:	00422abd 	.word	0x00422abd
  422b74:	00422ad9 	.word	0x00422ad9

00422b78 <get_txt_coords>:
}

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
  422b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  422b7c:	4606      	mov	r6, r0
  422b7e:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
  422b80:	4b12      	ldr	r3, [pc, #72]	; (422bcc <get_txt_coords+0x54>)
  422b82:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422b84:	2212      	movs	r2, #18
  422b86:	2100      	movs	r1, #0
  422b88:	4630      	mov	r0, r6
  422b8a:	4d11      	ldr	r5, [pc, #68]	; (422bd0 <get_txt_coords+0x58>)
  422b8c:	47a8      	blx	r5
  422b8e:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  422b90:	2213      	movs	r2, #19
  422b92:	2100      	movs	r1, #0
  422b94:	4630      	mov	r0, r6
  422b96:	47a8      	blx	r5
  422b98:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  422b9a:	2210      	movs	r2, #16
  422b9c:	2100      	movs	r1, #0
  422b9e:	4630      	mov	r0, r6
  422ba0:	47a8      	blx	r5
  422ba2:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  422ba4:	2211      	movs	r2, #17
  422ba6:	2100      	movs	r1, #0
  422ba8:	4630      	mov	r0, r6
  422baa:	47a8      	blx	r5

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
  422bac:	8823      	ldrh	r3, [r4, #0]
  422bae:	4498      	add	r8, r3
  422bb0:	f8a4 8000 	strh.w	r8, [r4]
    area->x2 -= right;
  422bb4:	88a3      	ldrh	r3, [r4, #4]
  422bb6:	eba3 0309 	sub.w	r3, r3, r9
  422bba:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
  422bbc:	8863      	ldrh	r3, [r4, #2]
  422bbe:	441f      	add	r7, r3
  422bc0:	8067      	strh	r7, [r4, #2]
    area->y2 -= bottom;
  422bc2:	88e3      	ldrh	r3, [r4, #6]
  422bc4:	1a18      	subs	r0, r3, r0
  422bc6:	80e0      	strh	r0, [r4, #6]
  422bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  422bcc:	00405ac1 	.word	0x00405ac1
  422bd0:	00407445 	.word	0x00407445

00422bd4 <lv_label_set_dot_tmp>:
{
  422bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  422bd6:	4606      	mov	r6, r0
  422bd8:	460f      	mov	r7, r1
  422bda:	4615      	mov	r5, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422bdc:	4b13      	ldr	r3, [pc, #76]	; (422c2c <lv_label_set_dot_tmp+0x58>)
  422bde:	4798      	blx	r3
  422be0:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
  422be2:	4630      	mov	r0, r6
  422be4:	4b12      	ldr	r3, [pc, #72]	; (422c30 <lv_label_set_dot_tmp+0x5c>)
  422be6:	4798      	blx	r3
    if(len > sizeof(char *)) {
  422be8:	2d04      	cmp	r5, #4
  422bea:	d911      	bls.n	422c10 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
  422bec:	1c68      	adds	r0, r5, #1
  422bee:	4b11      	ldr	r3, [pc, #68]	; (422c34 <lv_label_set_dot_tmp+0x60>)
  422bf0:	4798      	blx	r3
  422bf2:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
  422bf4:	b1b8      	cbz	r0, 422c26 <lv_label_set_dot_tmp+0x52>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
  422bf6:	462a      	mov	r2, r5
  422bf8:	4639      	mov	r1, r7
  422bfa:	4b0f      	ldr	r3, [pc, #60]	; (422c38 <lv_label_set_dot_tmp+0x64>)
  422bfc:	4798      	blx	r3
        ext->dot.tmp_ptr[len] = '\0';
  422bfe:	6863      	ldr	r3, [r4, #4]
  422c00:	2200      	movs	r2, #0
  422c02:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
  422c04:	7ce3      	ldrb	r3, [r4, #19]
  422c06:	f043 0301 	orr.w	r3, r3, #1
  422c0a:	74e3      	strb	r3, [r4, #19]
    return true;
  422c0c:	2001      	movs	r0, #1
  422c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
  422c10:	7ce3      	ldrb	r3, [r4, #19]
  422c12:	f36f 0300 	bfc	r3, #0, #1
  422c16:	74e3      	strb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
  422c18:	462a      	mov	r2, r5
  422c1a:	4639      	mov	r1, r7
  422c1c:	1d20      	adds	r0, r4, #4
  422c1e:	4b06      	ldr	r3, [pc, #24]	; (422c38 <lv_label_set_dot_tmp+0x64>)
  422c20:	4798      	blx	r3
    return true;
  422c22:	2001      	movs	r0, #1
  422c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false;
  422c26:	2000      	movs	r0, #0
}
  422c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  422c2a:	bf00      	nop
  422c2c:	00408095 	.word	0x00408095
  422c30:	00422ad9 	.word	0x00422ad9
  422c34:	004165bd 	.word	0x004165bd
  422c38:	004167cd 	.word	0x004167cd

00422c3c <lv_label_set_offset_y>:
{
  422c3c:	b538      	push	{r3, r4, r5, lr}
  422c3e:	4604      	mov	r4, r0
  422c40:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422c42:	4b03      	ldr	r3, [pc, #12]	; (422c50 <lv_label_set_offset_y+0x14>)
  422c44:	4798      	blx	r3
    ext->offset.y        = y;
  422c46:	8205      	strh	r5, [r0, #16]
    lv_obj_invalidate(label);
  422c48:	4620      	mov	r0, r4
  422c4a:	4b02      	ldr	r3, [pc, #8]	; (422c54 <lv_label_set_offset_y+0x18>)
  422c4c:	4798      	blx	r3
  422c4e:	bd38      	pop	{r3, r4, r5, pc}
  422c50:	00408095 	.word	0x00408095
  422c54:	00405f59 	.word	0x00405f59

00422c58 <lv_label_set_offset_x>:
{
  422c58:	b538      	push	{r3, r4, r5, lr}
  422c5a:	4604      	mov	r4, r0
  422c5c:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422c5e:	4b03      	ldr	r3, [pc, #12]	; (422c6c <lv_label_set_offset_x+0x14>)
  422c60:	4798      	blx	r3
    ext->offset.x        = x;
  422c62:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
  422c64:	4620      	mov	r0, r4
  422c66:	4b02      	ldr	r3, [pc, #8]	; (422c70 <lv_label_set_offset_x+0x18>)
  422c68:	4798      	blx	r3
  422c6a:	bd38      	pop	{r3, r4, r5, pc}
  422c6c:	00408095 	.word	0x00408095
  422c70:	00405f59 	.word	0x00405f59

00422c74 <lv_label_set_align>:
{
  422c74:	b538      	push	{r3, r4, r5, lr}
  422c76:	4604      	mov	r4, r0
  422c78:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422c7a:	4b0c      	ldr	r3, [pc, #48]	; (422cac <lv_label_set_align+0x38>)
  422c7c:	4798      	blx	r3
  422c7e:	b928      	cbnz	r0, 422c8c <lv_label_set_align+0x18>
  422c80:	4622      	mov	r2, r4
  422c82:	2300      	movs	r3, #0
  422c84:	480a      	ldr	r0, [pc, #40]	; (422cb0 <lv_label_set_align+0x3c>)
  422c86:	490b      	ldr	r1, [pc, #44]	; (422cb4 <lv_label_set_align+0x40>)
  422c88:	4788      	blx	r1
  422c8a:	e7fe      	b.n	422c8a <lv_label_set_align+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422c8c:	4620      	mov	r0, r4
  422c8e:	4b0a      	ldr	r3, [pc, #40]	; (422cb8 <lv_label_set_align+0x44>)
  422c90:	4798      	blx	r3
    if(ext->align == align) return;
  422c92:	7c83      	ldrb	r3, [r0, #18]
  422c94:	f3c3 1301 	ubfx	r3, r3, #4, #2
  422c98:	42ab      	cmp	r3, r5
  422c9a:	d006      	beq.n	422caa <lv_label_set_align+0x36>
    ext->align = align;
  422c9c:	7c83      	ldrb	r3, [r0, #18]
  422c9e:	f365 1305 	bfi	r3, r5, #4, #2
  422ca2:	7483      	strb	r3, [r0, #18]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
  422ca4:	4620      	mov	r0, r4
  422ca6:	4b05      	ldr	r3, [pc, #20]	; (422cbc <lv_label_set_align+0x48>)
  422ca8:	4798      	blx	r3
  422caa:	bd38      	pop	{r3, r4, r5, pc}
  422cac:	00415e79 	.word	0x00415e79
  422cb0:	0042c168 	.word	0x0042c168
  422cb4:	00415e85 	.word	0x00415e85
  422cb8:	00408095 	.word	0x00408095
  422cbc:	00405f59 	.word	0x00405f59

00422cc0 <lv_label_get_text>:
{
  422cc0:	b510      	push	{r4, lr}
  422cc2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422cc4:	4b06      	ldr	r3, [pc, #24]	; (422ce0 <lv_label_get_text+0x20>)
  422cc6:	4798      	blx	r3
  422cc8:	b928      	cbnz	r0, 422cd6 <lv_label_get_text+0x16>
  422cca:	4622      	mov	r2, r4
  422ccc:	2300      	movs	r3, #0
  422cce:	4805      	ldr	r0, [pc, #20]	; (422ce4 <lv_label_get_text+0x24>)
  422cd0:	4905      	ldr	r1, [pc, #20]	; (422ce8 <lv_label_get_text+0x28>)
  422cd2:	4788      	blx	r1
  422cd4:	e7fe      	b.n	422cd4 <lv_label_get_text+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422cd6:	4620      	mov	r0, r4
  422cd8:	4b04      	ldr	r3, [pc, #16]	; (422cec <lv_label_get_text+0x2c>)
  422cda:	4798      	blx	r3
}
  422cdc:	6800      	ldr	r0, [r0, #0]
  422cde:	bd10      	pop	{r4, pc}
  422ce0:	00415e79 	.word	0x00415e79
  422ce4:	0042c168 	.word	0x0042c168
  422ce8:	00415e85 	.word	0x00415e85
  422cec:	00408095 	.word	0x00408095

00422cf0 <lv_label_get_long_mode>:
{
  422cf0:	b510      	push	{r4, lr}
  422cf2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422cf4:	4b07      	ldr	r3, [pc, #28]	; (422d14 <lv_label_get_long_mode+0x24>)
  422cf6:	4798      	blx	r3
  422cf8:	b928      	cbnz	r0, 422d06 <lv_label_get_long_mode+0x16>
  422cfa:	4622      	mov	r2, r4
  422cfc:	2300      	movs	r3, #0
  422cfe:	4806      	ldr	r0, [pc, #24]	; (422d18 <lv_label_get_long_mode+0x28>)
  422d00:	4906      	ldr	r1, [pc, #24]	; (422d1c <lv_label_get_long_mode+0x2c>)
  422d02:	4788      	blx	r1
  422d04:	e7fe      	b.n	422d04 <lv_label_get_long_mode+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422d06:	4620      	mov	r0, r4
  422d08:	4b05      	ldr	r3, [pc, #20]	; (422d20 <lv_label_get_long_mode+0x30>)
  422d0a:	4798      	blx	r3
    return ext->long_mode;
  422d0c:	7c80      	ldrb	r0, [r0, #18]
}
  422d0e:	f000 0007 	and.w	r0, r0, #7
  422d12:	bd10      	pop	{r4, pc}
  422d14:	00415e79 	.word	0x00415e79
  422d18:	0042c168 	.word	0x0042c168
  422d1c:	00415e85 	.word	0x00415e85
  422d20:	00408095 	.word	0x00408095

00422d24 <lv_label_get_align>:
{
  422d24:	b510      	push	{r4, lr}
  422d26:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422d28:	4b09      	ldr	r3, [pc, #36]	; (422d50 <lv_label_get_align+0x2c>)
  422d2a:	4798      	blx	r3
  422d2c:	b928      	cbnz	r0, 422d3a <lv_label_get_align+0x16>
  422d2e:	4622      	mov	r2, r4
  422d30:	2300      	movs	r3, #0
  422d32:	4808      	ldr	r0, [pc, #32]	; (422d54 <lv_label_get_align+0x30>)
  422d34:	4908      	ldr	r1, [pc, #32]	; (422d58 <lv_label_get_align+0x34>)
  422d36:	4788      	blx	r1
  422d38:	e7fe      	b.n	422d38 <lv_label_get_align+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422d3a:	4620      	mov	r0, r4
  422d3c:	4b07      	ldr	r3, [pc, #28]	; (422d5c <lv_label_get_align+0x38>)
  422d3e:	4798      	blx	r3
    lv_label_align_t align = ext->align;
  422d40:	7c80      	ldrb	r0, [r0, #18]
  422d42:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
  422d46:	2803      	cmp	r0, #3
  422d48:	d000      	beq.n	422d4c <lv_label_get_align+0x28>
}
  422d4a:	bd10      	pop	{r4, pc}
        align = LV_LABEL_ALIGN_LEFT;
  422d4c:	2000      	movs	r0, #0
  422d4e:	e7fc      	b.n	422d4a <lv_label_get_align+0x26>
  422d50:	00415e79 	.word	0x00415e79
  422d54:	0042c168 	.word	0x0042c168
  422d58:	00415e85 	.word	0x00415e85
  422d5c:	00408095 	.word	0x00408095

00422d60 <lv_label_get_recolor>:
{
  422d60:	b510      	push	{r4, lr}
  422d62:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422d64:	4b07      	ldr	r3, [pc, #28]	; (422d84 <lv_label_get_recolor+0x24>)
  422d66:	4798      	blx	r3
  422d68:	b928      	cbnz	r0, 422d76 <lv_label_get_recolor+0x16>
  422d6a:	4622      	mov	r2, r4
  422d6c:	2300      	movs	r3, #0
  422d6e:	4806      	ldr	r0, [pc, #24]	; (422d88 <lv_label_get_recolor+0x28>)
  422d70:	4906      	ldr	r1, [pc, #24]	; (422d8c <lv_label_get_recolor+0x2c>)
  422d72:	4788      	blx	r1
  422d74:	e7fe      	b.n	422d74 <lv_label_get_recolor+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422d76:	4620      	mov	r0, r4
  422d78:	4b05      	ldr	r3, [pc, #20]	; (422d90 <lv_label_get_recolor+0x30>)
  422d7a:	4798      	blx	r3
    return ext->recolor == 0 ? false : true;
  422d7c:	7c80      	ldrb	r0, [r0, #18]
}
  422d7e:	f3c0 1080 	ubfx	r0, r0, #6, #1
  422d82:	bd10      	pop	{r4, pc}
  422d84:	00415e79 	.word	0x00415e79
  422d88:	0042c168 	.word	0x0042c168
  422d8c:	00415e85 	.word	0x00415e85
  422d90:	00408095 	.word	0x00408095

00422d94 <lv_label_get_letter_on>:
{
  422d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422d98:	b08f      	sub	sp, #60	; 0x3c
  422d9a:	4604      	mov	r4, r0
  422d9c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422d9e:	4b91      	ldr	r3, [pc, #580]	; (422fe4 <lv_label_get_letter_on+0x250>)
  422da0:	4798      	blx	r3
  422da2:	b928      	cbnz	r0, 422db0 <lv_label_get_letter_on+0x1c>
  422da4:	4622      	mov	r2, r4
  422da6:	2300      	movs	r3, #0
  422da8:	488f      	ldr	r0, [pc, #572]	; (422fe8 <lv_label_get_letter_on+0x254>)
  422daa:	4990      	ldr	r1, [pc, #576]	; (422fec <lv_label_get_letter_on+0x258>)
  422dac:	4788      	blx	r1
  422dae:	e7fe      	b.n	422dae <lv_label_get_letter_on+0x1a>
    LV_ASSERT_NULL(pos_in);
  422db0:	4628      	mov	r0, r5
  422db2:	4b8c      	ldr	r3, [pc, #560]	; (422fe4 <lv_label_get_letter_on+0x250>)
  422db4:	4798      	blx	r3
  422db6:	b928      	cbnz	r0, 422dc4 <lv_label_get_letter_on+0x30>
  422db8:	462a      	mov	r2, r5
  422dba:	2300      	movs	r3, #0
  422dbc:	488a      	ldr	r0, [pc, #552]	; (422fe8 <lv_label_get_letter_on+0x254>)
  422dbe:	498b      	ldr	r1, [pc, #556]	; (422fec <lv_label_get_letter_on+0x258>)
  422dc0:	4788      	blx	r1
  422dc2:	e7fe      	b.n	422dc2 <lv_label_get_letter_on+0x2e>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
  422dc4:	882f      	ldrh	r7, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422dc6:	2212      	movs	r2, #18
  422dc8:	2100      	movs	r1, #0
  422dca:	4620      	mov	r0, r4
  422dcc:	4e88      	ldr	r6, [pc, #544]	; (422ff0 <lv_label_get_letter_on+0x25c>)
  422dce:	47b0      	blx	r6
  422dd0:	b280      	uxth	r0, r0
  422dd2:	1a3f      	subs	r7, r7, r0
  422dd4:	b23b      	sxth	r3, r7
  422dd6:	9304      	str	r3, [sp, #16]
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
  422dd8:	886d      	ldrh	r5, [r5, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  422dda:	2210      	movs	r2, #16
  422ddc:	2100      	movs	r1, #0
  422dde:	4620      	mov	r0, r4
  422de0:	47b0      	blx	r6
  422de2:	b280      	uxth	r0, r0
  422de4:	1a2d      	subs	r5, r5, r0
  422de6:	b22b      	sxth	r3, r5
  422de8:	9305      	str	r3, [sp, #20]
    get_txt_coords(label, &txt_coords);
  422dea:	a90c      	add	r1, sp, #48	; 0x30
  422dec:	4620      	mov	r0, r4
  422dee:	4b81      	ldr	r3, [pc, #516]	; (422ff4 <lv_label_get_letter_on+0x260>)
  422df0:	4798      	blx	r3
    const char * txt         = lv_label_get_text(label);
  422df2:	4620      	mov	r0, r4
  422df4:	4b80      	ldr	r3, [pc, #512]	; (422ff8 <lv_label_get_letter_on+0x264>)
  422df6:	4798      	blx	r3
  422df8:	4680      	mov	r8, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
  422dfa:	4620      	mov	r0, r4
  422dfc:	4b7f      	ldr	r3, [pc, #508]	; (422ffc <lv_label_get_letter_on+0x268>)
  422dfe:	4798      	blx	r3
  422e00:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  422e02:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  422e06:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  422e0a:	1a9b      	subs	r3, r3, r2
  422e0c:	b29b      	uxth	r3, r3
  422e0e:	3301      	adds	r3, #1
  422e10:	b21b      	sxth	r3, r3
  422e12:	9307      	str	r3, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  422e14:	f248 028e 	movw	r2, #32910	; 0x808e
  422e18:	2100      	movs	r1, #0
  422e1a:	4620      	mov	r0, r4
  422e1c:	4b78      	ldr	r3, [pc, #480]	; (423000 <lv_label_get_letter_on+0x26c>)
  422e1e:	4798      	blx	r3
  422e20:	4607      	mov	r7, r0
  422e22:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  422e24:	f248 0281 	movw	r2, #32897	; 0x8081
  422e28:	2100      	movs	r1, #0
  422e2a:	4620      	mov	r0, r4
  422e2c:	47b0      	blx	r6
  422e2e:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  422e30:	f248 0280 	movw	r2, #32896	; 0x8080
  422e34:	2100      	movs	r1, #0
  422e36:	4620      	mov	r0, r4
  422e38:	47b0      	blx	r6
  422e3a:	9003      	str	r0, [sp, #12]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  422e3c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  422e40:	7cab      	ldrb	r3, [r5, #18]
  422e42:	f013 0f40 	tst.w	r3, #64	; 0x40
  422e46:	d133      	bne.n	422eb0 <lv_label_get_letter_on+0x11c>
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
  422e48:	2500      	movs	r5, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  422e4a:	f013 0f80 	tst.w	r3, #128	; 0x80
  422e4e:	d001      	beq.n	422e54 <lv_label_get_letter_on+0xc0>
  422e50:	f045 0502 	orr.w	r5, r5, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  422e54:	f013 0f07 	tst.w	r3, #7
  422e58:	d101      	bne.n	422e5e <lv_label_get_letter_on+0xca>
  422e5a:	f045 0510 	orr.w	r5, r5, #16
    lv_label_align_t align = lv_label_get_align(label);
  422e5e:	4620      	mov	r0, r4
  422e60:	4b68      	ldr	r3, [pc, #416]	; (423004 <lv_label_get_letter_on+0x270>)
  422e62:	4798      	blx	r3
  422e64:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  422e66:	2801      	cmp	r0, #1
  422e68:	d101      	bne.n	422e6e <lv_label_get_letter_on+0xda>
  422e6a:	f045 0504 	orr.w	r5, r5, #4
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  422e6e:	f1b9 0f02 	cmp.w	r9, #2
  422e72:	d101      	bne.n	422e78 <lv_label_get_letter_on+0xe4>
  422e74:	f045 0508 	orr.w	r5, r5, #8
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  422e78:	2400      	movs	r4, #0
  422e7a:	4626      	mov	r6, r4
    while(txt[line_start] != '\0') {
  422e7c:	eb08 0b06 	add.w	fp, r8, r6
  422e80:	f818 3006 	ldrb.w	r3, [r8, r6]
  422e84:	2b00      	cmp	r3, #0
  422e86:	d055      	beq.n	422f34 <lv_label_get_letter_on+0x1a0>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
  422e88:	9500      	str	r5, [sp, #0]
  422e8a:	9b07      	ldr	r3, [sp, #28]
  422e8c:	9a03      	ldr	r2, [sp, #12]
  422e8e:	9902      	ldr	r1, [sp, #8]
  422e90:	4658      	mov	r0, fp
  422e92:	4f5d      	ldr	r7, [pc, #372]	; (423008 <lv_label_get_letter_on+0x274>)
  422e94:	47b8      	blx	r7
  422e96:	4430      	add	r0, r6
        if(pos.y <= y + letter_height) {
  422e98:	eb04 030a 	add.w	r3, r4, sl
  422e9c:	9a05      	ldr	r2, [sp, #20]
  422e9e:	429a      	cmp	r2, r3
  422ea0:	dd08      	ble.n	422eb4 <lv_label_get_letter_on+0x120>
        y += letter_height + line_space;
  422ea2:	9b06      	ldr	r3, [sp, #24]
  422ea4:	4453      	add	r3, sl
  422ea6:	fa14 f383 	uxtah	r3, r4, r3
  422eaa:	b21c      	sxth	r4, r3
        line_start = new_line_start;
  422eac:	4606      	mov	r6, r0
  422eae:	e7e5      	b.n	422e7c <lv_label_get_letter_on+0xe8>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  422eb0:	2501      	movs	r5, #1
  422eb2:	e7ca      	b.n	422e4a <lv_label_get_letter_on+0xb6>
  422eb4:	4607      	mov	r7, r0
            uint32_t tmp = new_line_start;
  422eb6:	a90e      	add	r1, sp, #56	; 0x38
  422eb8:	f841 0d14 	str.w	r0, [r1, #-20]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
  422ebc:	4b53      	ldr	r3, [pc, #332]	; (42300c <lv_label_get_letter_on+0x278>)
  422ebe:	681b      	ldr	r3, [r3, #0]
  422ec0:	4640      	mov	r0, r8
  422ec2:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
  422ec4:	280a      	cmp	r0, #10
  422ec6:	d003      	beq.n	422ed0 <lv_label_get_letter_on+0x13c>
  422ec8:	f818 3007 	ldrb.w	r3, [r8, r7]
  422ecc:	b903      	cbnz	r3, 422ed0 <lv_label_get_letter_on+0x13c>
  422ece:	3701      	adds	r7, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
  422ed0:	f1b9 0f01 	cmp.w	r9, #1
  422ed4:	d130      	bne.n	422f38 <lv_label_get_letter_on+0x1a4>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  422ed6:	9500      	str	r5, [sp, #0]
  422ed8:	9b03      	ldr	r3, [sp, #12]
  422eda:	9a02      	ldr	r2, [sp, #8]
  422edc:	1bb9      	subs	r1, r7, r6
  422ede:	4658      	mov	r0, fp
  422ee0:	4c4b      	ldr	r4, [pc, #300]	; (423010 <lv_label_get_letter_on+0x27c>)
  422ee2:	47a0      	blx	r4
  422ee4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  422ee8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  422eec:	1a9b      	subs	r3, r3, r2
  422eee:	b29b      	uxth	r3, r3
  422ef0:	3301      	adds	r3, #1
  422ef2:	b21b      	sxth	r3, r3
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
  422ef4:	2b00      	cmp	r3, #0
  422ef6:	da00      	bge.n	422efa <lv_label_get_letter_on+0x166>
  422ef8:	3301      	adds	r3, #1
  422efa:	105c      	asrs	r4, r3, #1
  422efc:	4603      	mov	r3, r0
  422efe:	2800      	cmp	r0, #0
  422f00:	da00      	bge.n	422f04 <lv_label_get_letter_on+0x170>
  422f02:	1c43      	adds	r3, r0, #1
  422f04:	f343 034f 	sbfx	r3, r3, #1, #16
  422f08:	1ae4      	subs	r4, r4, r3
  422f0a:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  422f0c:	2300      	movs	r3, #0
  422f0e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;
  422f12:	930a      	str	r3, [sp, #40]	; 0x28
    if(new_line_start > 0) {
  422f14:	2f00      	cmp	r7, #0
  422f16:	d162      	bne.n	422fde <lv_label_get_letter_on+0x24a>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
  422f18:	4c3e      	ldr	r4, [pc, #248]	; (423014 <lv_label_get_letter_on+0x280>)
  422f1a:	6823      	ldr	r3, [r4, #0]
  422f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
  422f1e:	4658      	mov	r0, fp
  422f20:	4798      	blx	r3
  422f22:	4605      	mov	r5, r0
    return logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
  422f24:	6823      	ldr	r3, [r4, #0]
  422f26:	4631      	mov	r1, r6
  422f28:	4640      	mov	r0, r8
  422f2a:	4798      	blx	r3
}
  422f2c:	4428      	add	r0, r5
  422f2e:	b00f      	add	sp, #60	; 0x3c
  422f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422f34:	4637      	mov	r7, r6
  422f36:	e7cb      	b.n	422ed0 <lv_label_get_letter_on+0x13c>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
  422f38:	f1b9 0f02 	cmp.w	r9, #2
  422f3c:	d111      	bne.n	422f62 <lv_label_get_letter_on+0x1ce>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  422f3e:	9500      	str	r5, [sp, #0]
  422f40:	9b03      	ldr	r3, [sp, #12]
  422f42:	9a02      	ldr	r2, [sp, #8]
  422f44:	1bb9      	subs	r1, r7, r6
  422f46:	4658      	mov	r0, fp
  422f48:	4c31      	ldr	r4, [pc, #196]	; (423010 <lv_label_get_letter_on+0x27c>)
  422f4a:	47a0      	blx	r4
  422f4c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  422f50:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  422f54:	1a9b      	subs	r3, r3, r2
  422f56:	b29b      	uxth	r3, r3
  422f58:	3301      	adds	r3, #1
  422f5a:	b29b      	uxth	r3, r3
        x += lv_area_get_width(&txt_coords) - line_w;
  422f5c:	1a1b      	subs	r3, r3, r0
  422f5e:	b21c      	sxth	r4, r3
  422f60:	e7d4      	b.n	422f0c <lv_label_get_letter_on+0x178>
    lv_coord_t x = 0;
  422f62:	2400      	movs	r4, #0
  422f64:	e7d2      	b.n	422f0c <lv_label_get_letter_on+0x178>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
  422f66:	4652      	mov	r2, sl
  422f68:	9905      	ldr	r1, [sp, #20]
  422f6a:	9802      	ldr	r0, [sp, #8]
  422f6c:	4b2a      	ldr	r3, [pc, #168]	; (423018 <lv_label_get_letter_on+0x284>)
  422f6e:	4798      	blx	r3
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
  422f70:	fa04 f380 	sxtah	r3, r4, r0
  422f74:	9a04      	ldr	r2, [sp, #16]
  422f76:	429a      	cmp	r2, r3
  422f78:	db2e      	blt.n	422fd8 <lv_label_get_letter_on+0x244>
  422f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  422f7c:	18f2      	adds	r2, r6, r3
  422f7e:	4297      	cmp	r7, r2
  422f80:	d02a      	beq.n	422fd8 <lv_label_get_letter_on+0x244>
  422f82:	eb06 0209 	add.w	r2, r6, r9
  422f86:	f818 2002 	ldrb.w	r2, [r8, r2]
  422f8a:	b32a      	cbz	r2, 422fd8 <lv_label_get_letter_on+0x244>
            x += gw;
  422f8c:	4404      	add	r4, r0
            x += letter_space;
  422f8e:	9a03      	ldr	r2, [sp, #12]
  422f90:	fa12 f484 	uxtah	r4, r2, r4
  422f94:	b224      	sxth	r4, r4
            i_act = i;
  422f96:	4699      	mov	r9, r3
        while(i + line_start < new_line_start) {
  422f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  422f9a:	4433      	add	r3, r6
  422f9c:	429f      	cmp	r7, r3
  422f9e:	d9bb      	bls.n	422f18 <lv_label_get_letter_on+0x184>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
  422fa0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 423020 <lv_label_get_letter_on+0x28c>
  422fa4:	f8da 3000 	ldr.w	r3, [sl]
  422fa8:	a90a      	add	r1, sp, #40	; 0x28
  422faa:	4658      	mov	r0, fp
  422fac:	4798      	blx	r3
  422fae:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  422fb0:	f8da 3000 	ldr.w	r3, [sl]
  422fb4:	2100      	movs	r1, #0
  422fb6:	980a      	ldr	r0, [sp, #40]	; 0x28
  422fb8:	4458      	add	r0, fp
  422fba:	4798      	blx	r3
  422fbc:	4682      	mov	sl, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  422fbe:	f015 0f01 	tst.w	r5, #1
  422fc2:	d0d0      	beq.n	422f66 <lv_label_get_letter_on+0x1d2>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
  422fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  422fc6:	f81b 1003 	ldrb.w	r1, [fp, r3]
  422fca:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
  422fce:	4b13      	ldr	r3, [pc, #76]	; (42301c <lv_label_get_letter_on+0x288>)
  422fd0:	4798      	blx	r3
  422fd2:	2800      	cmp	r0, #0
  422fd4:	d1e0      	bne.n	422f98 <lv_label_get_letter_on+0x204>
  422fd6:	e7c6      	b.n	422f66 <lv_label_get_letter_on+0x1d2>
                i = i_act;
  422fd8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
                break;
  422fdc:	e79c      	b.n	422f18 <lv_label_get_letter_on+0x184>
  422fde:	f04f 0900 	mov.w	r9, #0
  422fe2:	e7d9      	b.n	422f98 <lv_label_get_letter_on+0x204>
  422fe4:	00415e79 	.word	0x00415e79
  422fe8:	0042c168 	.word	0x0042c168
  422fec:	00415e85 	.word	0x00415e85
  422ff0:	00407445 	.word	0x00407445
  422ff4:	00422b79 	.word	0x00422b79
  422ff8:	00422cc1 	.word	0x00422cc1
  422ffc:	00408095 	.word	0x00408095
  423000:	0040733d 	.word	0x0040733d
  423004:	00422d25 	.word	0x00422d25
  423008:	00417cf9 	.word	0x00417cf9
  42300c:	204000bc 	.word	0x204000bc
  423010:	00417dd9 	.word	0x00417dd9
  423014:	204000b4 	.word	0x204000b4
  423018:	00413b3d 	.word	0x00413b3d
  42301c:	00417b45 	.word	0x00417b45
  423020:	204000b8 	.word	0x204000b8

00423024 <lv_label_get_text_sel_start>:
{
  423024:	b510      	push	{r4, lr}
  423026:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423028:	4b05      	ldr	r3, [pc, #20]	; (423040 <lv_label_get_text_sel_start+0x1c>)
  42302a:	4798      	blx	r3
  42302c:	b110      	cbz	r0, 423034 <lv_label_get_text_sel_start+0x10>
}
  42302e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  423032:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423034:	4622      	mov	r2, r4
  423036:	2300      	movs	r3, #0
  423038:	4802      	ldr	r0, [pc, #8]	; (423044 <lv_label_get_text_sel_start+0x20>)
  42303a:	4903      	ldr	r1, [pc, #12]	; (423048 <lv_label_get_text_sel_start+0x24>)
  42303c:	4788      	blx	r1
  42303e:	e7fe      	b.n	42303e <lv_label_get_text_sel_start+0x1a>
  423040:	00415e79 	.word	0x00415e79
  423044:	0042c168 	.word	0x0042c168
  423048:	00415e85 	.word	0x00415e85

0042304c <lv_label_get_text_sel_end>:
{
  42304c:	b510      	push	{r4, lr}
  42304e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423050:	4b05      	ldr	r3, [pc, #20]	; (423068 <lv_label_get_text_sel_end+0x1c>)
  423052:	4798      	blx	r3
  423054:	b110      	cbz	r0, 42305c <lv_label_get_text_sel_end+0x10>
}
  423056:	f64f 70ff 	movw	r0, #65535	; 0xffff
  42305a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  42305c:	4622      	mov	r2, r4
  42305e:	2300      	movs	r3, #0
  423060:	4802      	ldr	r0, [pc, #8]	; (42306c <lv_label_get_text_sel_end+0x20>)
  423062:	4903      	ldr	r1, [pc, #12]	; (423070 <lv_label_get_text_sel_end+0x24>)
  423064:	4788      	blx	r1
  423066:	e7fe      	b.n	423066 <lv_label_get_text_sel_end+0x1a>
  423068:	00415e79 	.word	0x00415e79
  42306c:	0042c168 	.word	0x0042c168
  423070:	00415e85 	.word	0x00415e85

00423074 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
  423074:	2a02      	cmp	r2, #2
  423076:	f000 812a 	beq.w	4232ce <lv_label_design+0x25a>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  42307a:	b10a      	cbz	r2, 423080 <lv_label_design+0xc>
    return LV_DESIGN_RES_OK;
  42307c:	2000      	movs	r0, #0
  42307e:	4770      	bx	lr
{
  423080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  423084:	b0ab      	sub	sp, #172	; 0xac
  423086:	460f      	mov	r7, r1
  423088:	4606      	mov	r6, r0
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  42308a:	4b92      	ldr	r3, [pc, #584]	; (4232d4 <lv_label_design+0x260>)
  42308c:	4798      	blx	r3
  42308e:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  423090:	2204      	movs	r2, #4
  423092:	2100      	movs	r1, #0
  423094:	4630      	mov	r0, r6
  423096:	4c90      	ldr	r4, [pc, #576]	; (4232d8 <lv_label_design+0x264>)
  423098:	47a0      	blx	r4
  42309a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  42309c:	2205      	movs	r2, #5
  42309e:	2100      	movs	r1, #0
  4230a0:	4630      	mov	r0, r6
  4230a2:	47a0      	blx	r4
        lv_area_copy(&bg_coords, &label->coords);
  4230a4:	f106 0410 	add.w	r4, r6, #16
    uint8_t * d8 = (uint8_t *)dst;
  4230a8:	aa06      	add	r2, sp, #24
  4230aa:	2308      	movs	r3, #8
  4230ac:	e004      	b.n	4230b8 <lv_label_design+0x44>
        *d8 = *s8;
  4230ae:	f814 5b01 	ldrb.w	r5, [r4], #1
  4230b2:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  4230b6:	3b01      	subs	r3, #1
    while(len) {
  4230b8:	2b00      	cmp	r3, #0
  4230ba:	d1f8      	bne.n	4230ae <lv_label_design+0x3a>
        bg_coords.x1 -= w;
  4230bc:	fa1f f989 	uxth.w	r9, r9
  4230c0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  4230c4:	eba3 0309 	sub.w	r3, r3, r9
  4230c8:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_coords.x2 += w;
  4230cc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  4230d0:	4499      	add	r9, r3
  4230d2:	f8ad 901c 	strh.w	r9, [sp, #28]
        bg_coords.y1 -= h;
  4230d6:	b280      	uxth	r0, r0
  4230d8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  4230dc:	1a1b      	subs	r3, r3, r0
  4230de:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
  4230e2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4230e6:	4418      	add	r0, r3
  4230e8:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
  4230ec:	a815      	add	r0, sp, #84	; 0x54
  4230ee:	4b7b      	ldr	r3, [pc, #492]	; (4232dc <lv_label_design+0x268>)
  4230f0:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
  4230f2:	aa15      	add	r2, sp, #84	; 0x54
  4230f4:	2100      	movs	r1, #0
  4230f6:	4630      	mov	r0, r6
  4230f8:	4b79      	ldr	r3, [pc, #484]	; (4232e0 <lv_label_design+0x26c>)
  4230fa:	4798      	blx	r3
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
  4230fc:	aa15      	add	r2, sp, #84	; 0x54
  4230fe:	4639      	mov	r1, r7
  423100:	a806      	add	r0, sp, #24
  423102:	4b78      	ldr	r3, [pc, #480]	; (4232e4 <lv_label_design+0x270>)
  423104:	4798      	blx	r3
        get_txt_coords(label, &txt_coords);
  423106:	a908      	add	r1, sp, #32
  423108:	4630      	mov	r0, r6
  42310a:	4b77      	ldr	r3, [pc, #476]	; (4232e8 <lv_label_design+0x274>)
  42310c:	4798      	blx	r3
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
  42310e:	aa08      	add	r2, sp, #32
  423110:	4639      	mov	r1, r7
  423112:	a80a      	add	r0, sp, #40	; 0x28
  423114:	4b75      	ldr	r3, [pc, #468]	; (4232ec <lv_label_design+0x278>)
  423116:	4798      	blx	r3
        if(!is_common) return LV_DESIGN_RES_OK;
  423118:	b910      	cbnz	r0, 423120 <lv_label_design+0xac>
}
  42311a:	b02b      	add	sp, #172	; 0xac
  42311c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_label_align_t align = lv_label_get_align(label);
  423120:	4630      	mov	r0, r6
  423122:	4b73      	ldr	r3, [pc, #460]	; (4232f0 <lv_label_design+0x27c>)
  423124:	4798      	blx	r3
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  423126:	f898 3012 	ldrb.w	r3, [r8, #18]
  42312a:	f013 0f40 	tst.w	r3, #64	; 0x40
  42312e:	d13f      	bne.n	4231b0 <lv_label_design+0x13c>
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  423130:	2400      	movs	r4, #0
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  423132:	f013 0f80 	tst.w	r3, #128	; 0x80
  423136:	d13d      	bne.n	4231b4 <lv_label_design+0x140>
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  423138:	f013 0f07 	tst.w	r3, #7
  42313c:	d101      	bne.n	423142 <lv_label_design+0xce>
  42313e:	f044 0410 	orr.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  423142:	2801      	cmp	r0, #1
  423144:	d039      	beq.n	4231ba <lv_label_design+0x146>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  423146:	2802      	cmp	r0, #2
  423148:	d03a      	beq.n	4231c0 <lv_label_design+0x14c>
        lv_draw_label_dsc_init(&label_draw_dsc);
  42314a:	a80c      	add	r0, sp, #48	; 0x30
  42314c:	4b69      	ldr	r3, [pc, #420]	; (4232f4 <lv_label_design+0x280>)
  42314e:	4798      	blx	r3
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
  423150:	4630      	mov	r0, r6
  423152:	4b69      	ldr	r3, [pc, #420]	; (4232f8 <lv_label_design+0x284>)
  423154:	4798      	blx	r3
  423156:	9011      	str	r0, [sp, #68]	; 0x44
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
  423158:	4630      	mov	r0, r6
  42315a:	4b68      	ldr	r3, [pc, #416]	; (4232fc <lv_label_design+0x288>)
  42315c:	4798      	blx	r3
  42315e:	9012      	str	r0, [sp, #72]	; 0x48
        label_draw_dsc.ofs_x = ext->offset.x;
  423160:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  423164:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        label_draw_dsc.ofs_y = ext->offset.y;
  423168:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  42316c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        label_draw_dsc.flag = flag;
  423170:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
  423174:	aa0c      	add	r2, sp, #48	; 0x30
  423176:	2100      	movs	r1, #0
  423178:	4630      	mov	r0, r6
  42317a:	4b61      	ldr	r3, [pc, #388]	; (423300 <lv_label_design+0x28c>)
  42317c:	4798      	blx	r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  42317e:	f898 2012 	ldrb.w	r2, [r8, #18]
  423182:	f002 0307 	and.w	r3, r2, #7
  423186:	3b03      	subs	r3, #3
  423188:	b2db      	uxtb	r3, r3
  42318a:	2b01      	cmp	r3, #1
  42318c:	d91b      	bls.n	4231c6 <lv_label_design+0x152>
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  42318e:	f8d8 3000 	ldr.w	r3, [r8]
  423192:	2200      	movs	r2, #0
  423194:	9200      	str	r2, [sp, #0]
  423196:	aa0c      	add	r2, sp, #48	; 0x30
  423198:	a90a      	add	r1, sp, #40	; 0x28
  42319a:	a808      	add	r0, sp, #32
  42319c:	4d59      	ldr	r5, [pc, #356]	; (423304 <lv_label_design+0x290>)
  42319e:	47a8      	blx	r5
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  4231a0:	f898 3012 	ldrb.w	r3, [r8, #18]
  4231a4:	f003 0307 	and.w	r3, r3, #7
  4231a8:	2b04      	cmp	r3, #4
  4231aa:	d034      	beq.n	423216 <lv_label_design+0x1a2>
    return LV_DESIGN_RES_OK;
  4231ac:	2000      	movs	r0, #0
  4231ae:	e7b4      	b.n	42311a <lv_label_design+0xa6>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  4231b0:	2401      	movs	r4, #1
  4231b2:	e7be      	b.n	423132 <lv_label_design+0xbe>
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  4231b4:	f044 0402 	orr.w	r4, r4, #2
  4231b8:	e7be      	b.n	423138 <lv_label_design+0xc4>
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  4231ba:	f044 0404 	orr.w	r4, r4, #4
  4231be:	e7c2      	b.n	423146 <lv_label_design+0xd2>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  4231c0:	f044 0408 	orr.w	r4, r4, #8
  4231c4:	e7c1      	b.n	42314a <lv_label_design+0xd6>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
  4231c6:	f002 0230 	and.w	r2, r2, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  4231ca:	2a20      	cmp	r2, #32
  4231cc:	bf18      	it	ne
  4231ce:	2a10      	cmpne	r2, #16
  4231d0:	d1dd      	bne.n	42318e <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  4231d2:	f8d8 1000 	ldr.w	r1, [r8]
  4231d6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  4231da:	9402      	str	r4, [sp, #8]
  4231dc:	f647 4218 	movw	r2, #31768	; 0x7c18
  4231e0:	9201      	str	r2, [sp, #4]
  4231e2:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  4231e6:	9200      	str	r2, [sp, #0]
  4231e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4231ea:	a805      	add	r0, sp, #20
  4231ec:	4d46      	ldr	r5, [pc, #280]	; (423308 <lv_label_design+0x294>)
  4231ee:	47a8      	blx	r5
            if(size.x > lv_area_get_width(&txt_coords)) {
  4231f0:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  4231f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  4231f8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  4231fc:	1a5b      	subs	r3, r3, r1
  4231fe:	b29b      	uxth	r3, r3
  423200:	3301      	adds	r3, #1
  423202:	b21b      	sxth	r3, r3
  423204:	429a      	cmp	r2, r3
  423206:	ddc2      	ble.n	42318e <lv_label_design+0x11a>
                label_draw_dsc.flag &= ~LV_TXT_FLAG_RIGHT;
  423208:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
  42320c:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
  423210:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  423214:	e7bb      	b.n	42318e <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  423216:	f8d8 1000 	ldr.w	r1, [r8]
  42321a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  42321e:	9402      	str	r4, [sp, #8]
  423220:	f647 4218 	movw	r2, #31768	; 0x7c18
  423224:	9201      	str	r2, [sp, #4]
  423226:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  42322a:	9200      	str	r2, [sp, #0]
  42322c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  42322e:	a805      	add	r0, sp, #20
  423230:	4c35      	ldr	r4, [pc, #212]	; (423308 <lv_label_design+0x294>)
  423232:	47a0      	blx	r4
            if(size.x > lv_area_get_width(&txt_coords)) {
  423234:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  423238:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  42323c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  423240:	1a5b      	subs	r3, r3, r1
  423242:	b29b      	uxth	r3, r3
  423244:	3301      	adds	r3, #1
  423246:	b21b      	sxth	r3, r3
  423248:	429a      	cmp	r2, r3
  42324a:	dc23      	bgt.n	423294 <lv_label_design+0x220>
            if(size.y > lv_area_get_height(&txt_coords)) {
  42324c:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423250:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  423254:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  423258:	1a5b      	subs	r3, r3, r1
  42325a:	b29b      	uxth	r3, r3
  42325c:	3301      	adds	r3, #1
  42325e:	b21b      	sxth	r3, r3
  423260:	429a      	cmp	r2, r3
  423262:	dda3      	ble.n	4231ac <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x;
  423264:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  423268:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
  42326c:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  423270:	fa13 f382 	uxtah	r3, r3, r2
  423274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  423276:	8912      	ldrh	r2, [r2, #8]
  423278:	fa12 f383 	uxtah	r3, r2, r3
  42327c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  423280:	f8d8 3000 	ldr.w	r3, [r8]
  423284:	2200      	movs	r2, #0
  423286:	9200      	str	r2, [sp, #0]
  423288:	aa0c      	add	r2, sp, #48	; 0x30
  42328a:	a90a      	add	r1, sp, #40	; 0x28
  42328c:	a808      	add	r0, sp, #32
  42328e:	4c1d      	ldr	r4, [pc, #116]	; (423304 <lv_label_design+0x290>)
  423290:	47a0      	blx	r4
  423292:	e78b      	b.n	4231ac <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  423294:	f8b8 400e 	ldrh.w	r4, [r8, #14]
  423298:	fa14 f282 	uxtah	r2, r4, r2
  42329c:	b294      	uxth	r4, r2
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
  42329e:	2220      	movs	r2, #32
  4232a0:	4611      	mov	r1, r2
  4232a2:	980e      	ldr	r0, [sp, #56]	; 0x38
  4232a4:	4b19      	ldr	r3, [pc, #100]	; (42330c <lv_label_design+0x298>)
  4232a6:	4798      	blx	r3
  4232a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  4232ac:	fa14 f480 	uxtah	r4, r4, r0
  4232b0:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y;
  4232b4:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  4232b8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  4232bc:	f8d8 3000 	ldr.w	r3, [r8]
  4232c0:	2200      	movs	r2, #0
  4232c2:	9200      	str	r2, [sp, #0]
  4232c4:	aa0c      	add	r2, sp, #48	; 0x30
  4232c6:	a90a      	add	r1, sp, #40	; 0x28
  4232c8:	a808      	add	r0, sp, #32
  4232ca:	47a8      	blx	r5
  4232cc:	e7be      	b.n	42324c <lv_label_design+0x1d8>
        return LV_DESIGN_RES_NOT_COVER;
  4232ce:	2002      	movs	r0, #2
  4232d0:	4770      	bx	lr
  4232d2:	bf00      	nop
  4232d4:	00408095 	.word	0x00408095
  4232d8:	00407445 	.word	0x00407445
  4232dc:	0041245d 	.word	0x0041245d
  4232e0:	0040833d 	.word	0x0040833d
  4232e4:	004124a9 	.word	0x004124a9
  4232e8:	00422b79 	.word	0x00422b79
  4232ec:	004155b3 	.word	0x004155b3
  4232f0:	00422d25 	.word	0x00422d25
  4232f4:	0040ded5 	.word	0x0040ded5
  4232f8:	00423025 	.word	0x00423025
  4232fc:	0042304d 	.word	0x0042304d
  423300:	0040896d 	.word	0x0040896d
  423304:	0040df1d 	.word	0x0040df1d
  423308:	00417e85 	.word	0x00417e85
  42330c:	00413b3d 	.word	0x00413b3d

00423310 <lv_label_get_style>:
    switch(type) {
  423310:	b909      	cbnz	r1, 423316 <lv_label_get_style+0x6>
            style_dsc_p = &label->style_list;
  423312:	3028      	adds	r0, #40	; 0x28
            break;
  423314:	4770      	bx	lr
            style_dsc_p = NULL;
  423316:	2000      	movs	r0, #0
}
  423318:	4770      	bx	lr
	...

0042331c <lv_label_refr_text>:
{
  42331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  423320:	b09b      	sub	sp, #108	; 0x6c
  423322:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423324:	4b95      	ldr	r3, [pc, #596]	; (42357c <lv_label_refr_text+0x260>)
  423326:	4798      	blx	r3
    if(ext->text == NULL) return;
  423328:	6803      	ldr	r3, [r0, #0]
  42332a:	2b00      	cmp	r3, #0
  42332c:	d049      	beq.n	4233c2 <lv_label_refr_text+0xa6>
  42332e:	4606      	mov	r6, r0
    get_txt_coords(label, &txt_coords);
  423330:	a918      	add	r1, sp, #96	; 0x60
  423332:	4628      	mov	r0, r5
  423334:	4b92      	ldr	r3, [pc, #584]	; (423580 <lv_label_refr_text+0x264>)
  423336:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  423338:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  42333c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  423340:	1ae4      	subs	r4, r4, r3
  423342:	b2a4      	uxth	r4, r4
  423344:	3401      	adds	r4, #1
  423346:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  423348:	f248 028e 	movw	r2, #32910	; 0x808e
  42334c:	2100      	movs	r1, #0
  42334e:	4628      	mov	r0, r5
  423350:	4b8c      	ldr	r3, [pc, #560]	; (423584 <lv_label_refr_text+0x268>)
  423352:	4798      	blx	r3
  423354:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  423356:	f248 0281 	movw	r2, #32897	; 0x8081
  42335a:	2100      	movs	r1, #0
  42335c:	4628      	mov	r0, r5
  42335e:	4f8a      	ldr	r7, [pc, #552]	; (423588 <lv_label_refr_text+0x26c>)
  423360:	47b8      	blx	r7
  423362:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  423364:	f248 0280 	movw	r2, #32896	; 0x8080
  423368:	2100      	movs	r1, #0
  42336a:	4628      	mov	r0, r5
  42336c:	47b8      	blx	r7
  42336e:	4607      	mov	r7, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  423370:	7cb3      	ldrb	r3, [r6, #18]
  423372:	f013 0f40 	tst.w	r3, #64	; 0x40
  423376:	d127      	bne.n	4233c8 <lv_label_refr_text+0xac>
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  423378:	2200      	movs	r2, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  42337a:	f013 0f80 	tst.w	r3, #128	; 0x80
  42337e:	d125      	bne.n	4233cc <lv_label_refr_text+0xb0>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  423380:	f013 0f07 	tst.w	r3, #7
  423384:	d101      	bne.n	42338a <lv_label_refr_text+0x6e>
  423386:	f042 0210 	orr.w	r2, r2, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
  42338a:	6831      	ldr	r1, [r6, #0]
  42338c:	9202      	str	r2, [sp, #8]
  42338e:	9401      	str	r4, [sp, #4]
  423390:	f8cd 9000 	str.w	r9, [sp]
  423394:	463b      	mov	r3, r7
  423396:	4642      	mov	r2, r8
  423398:	a817      	add	r0, sp, #92	; 0x5c
  42339a:	4c7c      	ldr	r4, [pc, #496]	; (42358c <lv_label_refr_text+0x270>)
  42339c:	47a0      	blx	r4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
  42339e:	7cb3      	ldrb	r3, [r6, #18]
  4233a0:	f013 0307 	ands.w	r3, r3, #7
  4233a4:	d015      	beq.n	4233d2 <lv_label_refr_text+0xb6>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
  4233a6:	2b03      	cmp	r3, #3
  4233a8:	d039      	beq.n	42341e <lv_label_refr_text+0x102>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  4233aa:	2b04      	cmp	r3, #4
  4233ac:	f000 8104 	beq.w	4235b8 <lv_label_refr_text+0x29c>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
  4233b0:	2b02      	cmp	r3, #2
  4233b2:	f000 8180 	beq.w	4236b6 <lv_label_refr_text+0x39a>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
  4233b6:	2b01      	cmp	r3, #1
  4233b8:	f000 821c 	beq.w	4237f4 <lv_label_refr_text+0x4d8>
    lv_obj_invalidate(label);
  4233bc:	4628      	mov	r0, r5
  4233be:	4b74      	ldr	r3, [pc, #464]	; (423590 <lv_label_refr_text+0x274>)
  4233c0:	4798      	blx	r3
}
  4233c2:	b01b      	add	sp, #108	; 0x6c
  4233c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  4233c8:	2201      	movs	r2, #1
  4233ca:	e7d6      	b.n	42337a <lv_label_refr_text+0x5e>
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  4233cc:	f042 0202 	orr.w	r2, r2, #2
  4233d0:	e7d6      	b.n	423380 <lv_label_refr_text+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4233d2:	2212      	movs	r2, #18
  4233d4:	2100      	movs	r1, #0
  4233d6:	4628      	mov	r0, r5
  4233d8:	4e6b      	ldr	r6, [pc, #428]	; (423588 <lv_label_refr_text+0x26c>)
  4233da:	47b0      	blx	r6
  4233dc:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4233de:	2213      	movs	r2, #19
  4233e0:	2100      	movs	r1, #0
  4233e2:	4628      	mov	r0, r5
  4233e4:	47b0      	blx	r6
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
  4233e6:	4420      	add	r0, r4
  4233e8:	f8bd 405c 	ldrh.w	r4, [sp, #92]	; 0x5c
  4233ec:	4420      	add	r0, r4
  4233ee:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4233f2:	2210      	movs	r2, #16
  4233f4:	2100      	movs	r1, #0
  4233f6:	4628      	mov	r0, r5
  4233f8:	47b0      	blx	r6
  4233fa:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4233fc:	2211      	movs	r2, #17
  4233fe:	2100      	movs	r1, #0
  423400:	4628      	mov	r0, r5
  423402:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  423404:	1822      	adds	r2, r4, r0
  423406:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  42340a:	4402      	add	r2, r0
  42340c:	b212      	sxth	r2, r2
  42340e:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
        lv_obj_set_size(label, size.x, size.y);
  423412:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
  423416:	4628      	mov	r0, r5
  423418:	4b5e      	ldr	r3, [pc, #376]	; (423594 <lv_label_refr_text+0x278>)
  42341a:	4798      	blx	r3
  42341c:	e7ce      	b.n	4233bc <lv_label_refr_text+0xa0>
        lv_anim_init(&a);
  42341e:	a806      	add	r0, sp, #24
  423420:	4b5d      	ldr	r3, [pc, #372]	; (423598 <lv_label_refr_text+0x27c>)
  423422:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  423424:	9506      	str	r5, [sp, #24]
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
  423426:	f64f 73ff 	movw	r3, #65535	; 0xffff
  42342a:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  42342e:	2220      	movs	r2, #32
  423430:	4611      	mov	r1, r2
  423432:	4640      	mov	r0, r8
  423434:	4b59      	ldr	r3, [pc, #356]	; (42359c <lv_label_refr_text+0x280>)
  423436:	4798      	blx	r3
  423438:	4438      	add	r0, r7
  42343a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  42343e:	fb03 f300 	mul.w	r3, r3, r0
                                        ext->anim_speed) *
  423442:	89b0      	ldrh	r0, [r6, #12]
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  423444:	fb93 f3f0 	sdiv	r3, r3, r0
  423448:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  42344c:	b29b      	uxth	r3, r3
    a->playback_delay = delay;
  42344e:	9311      	str	r3, [sp, #68]	; 0x44
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
  423450:	9313      	str	r3, [sp, #76]	; 0x4c
        if(size.x > lv_area_get_width(&txt_coords)) {
  423452:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
  423456:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  42345a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  42345e:	1a5b      	subs	r3, r3, r1
  423460:	b29b      	uxth	r3, r3
  423462:	3301      	adds	r3, #1
  423464:	b29b      	uxth	r3, r3
  423466:	b219      	sxth	r1, r3
  423468:	428a      	cmp	r2, r1
  42346a:	dd49      	ble.n	423500 <lv_label_refr_text+0x1e4>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
  42346c:	b292      	uxth	r2, r2
  42346e:	1a9b      	subs	r3, r3, r2
  423470:	b21a      	sxth	r2, r3
    a->start = start;
  423472:	2100      	movs	r1, #0
  423474:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  423476:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  423478:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  42347a:	4c49      	ldr	r4, [pc, #292]	; (4235a0 <lv_label_refr_text+0x284>)
  42347c:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  42347e:	89b0      	ldrh	r0, [r6, #12]
  423480:	4b48      	ldr	r3, [pc, #288]	; (4235a4 <lv_label_refr_text+0x288>)
  423482:	4798      	blx	r3
    a->time     = duration;
  423484:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  423486:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  423488:	4621      	mov	r1, r4
  42348a:	4628      	mov	r0, r5
  42348c:	4b46      	ldr	r3, [pc, #280]	; (4235a8 <lv_label_refr_text+0x28c>)
  42348e:	4798      	blx	r3
            if(anim_cur) {
  423490:	2800      	cmp	r0, #0
  423492:	d032      	beq.n	4234fa <lv_label_refr_text+0x1de>
                act_time = anim_cur->act_time;
  423494:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  423496:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  42349a:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
  42349e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4234a0:	428a      	cmp	r2, r1
  4234a2:	da11      	bge.n	4234c8 <lv_label_refr_text+0x1ac>
                a.act_time = act_time;      /*To keep the old position*/
  4234a4:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  4234a6:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
  4234aa:	f36f 0200 	bfc	r2, #0, #1
  4234ae:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                if(playback_now) {
  4234b2:	b14b      	cbz	r3, 4234c8 <lv_label_refr_text+0x1ac>
                    a.playback_now = 1;
  4234b4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  4234b8:	f043 0301 	orr.w	r3, r3, #1
  4234bc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  4234c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  4234c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4234c4:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  4234c6:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  4234c8:	a806      	add	r0, sp, #24
  4234ca:	4b38      	ldr	r3, [pc, #224]	; (4235ac <lv_label_refr_text+0x290>)
  4234cc:	4798      	blx	r3
            hor_anim = true;
  4234ce:	2401      	movs	r4, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  4234d0:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4234d4:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  4234d8:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  4234dc:	1a5b      	subs	r3, r3, r1
  4234de:	b29b      	uxth	r3, r3
  4234e0:	3301      	adds	r3, #1
  4234e2:	b29b      	uxth	r3, r3
  4234e4:	b219      	sxth	r1, r3
  4234e6:	428a      	cmp	r2, r1
  4234e8:	dd00      	ble.n	4234ec <lv_label_refr_text+0x1d0>
  4234ea:	b184      	cbz	r4, 42350e <lv_label_refr_text+0x1f2>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  4234ec:	4930      	ldr	r1, [pc, #192]	; (4235b0 <lv_label_refr_text+0x294>)
  4234ee:	4628      	mov	r0, r5
  4234f0:	4b30      	ldr	r3, [pc, #192]	; (4235b4 <lv_label_refr_text+0x298>)
  4234f2:	4798      	blx	r3
            ext->offset.y = 0;
  4234f4:	2300      	movs	r3, #0
  4234f6:	8233      	strh	r3, [r6, #16]
  4234f8:	e760      	b.n	4233bc <lv_label_refr_text+0xa0>
            bool playback_now = false;
  4234fa:	2300      	movs	r3, #0
            int32_t act_time = 0;
  4234fc:	461a      	mov	r2, r3
  4234fe:	e7ce      	b.n	42349e <lv_label_refr_text+0x182>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  423500:	4927      	ldr	r1, [pc, #156]	; (4235a0 <lv_label_refr_text+0x284>)
  423502:	4628      	mov	r0, r5
  423504:	4b2b      	ldr	r3, [pc, #172]	; (4235b4 <lv_label_refr_text+0x298>)
  423506:	4798      	blx	r3
            ext->offset.x = 0;
  423508:	2400      	movs	r4, #0
  42350a:	81f4      	strh	r4, [r6, #14]
  42350c:	e7e0      	b.n	4234d0 <lv_label_refr_text+0x1b4>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
  42350e:	b292      	uxth	r2, r2
  423510:	1a9a      	subs	r2, r3, r2
  423512:	b292      	uxth	r2, r2
  423514:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  423518:	1ad2      	subs	r2, r2, r3
  42351a:	b212      	sxth	r2, r2
    a->start = start;
  42351c:	2100      	movs	r1, #0
  42351e:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  423520:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  423522:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  423524:	4f22      	ldr	r7, [pc, #136]	; (4235b0 <lv_label_refr_text+0x294>)
  423526:	9707      	str	r7, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  423528:	89b0      	ldrh	r0, [r6, #12]
  42352a:	4b1e      	ldr	r3, [pc, #120]	; (4235a4 <lv_label_refr_text+0x288>)
  42352c:	4798      	blx	r3
    a->time     = duration;
  42352e:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  423530:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  423532:	4639      	mov	r1, r7
  423534:	4628      	mov	r0, r5
  423536:	4b1c      	ldr	r3, [pc, #112]	; (4235a8 <lv_label_refr_text+0x28c>)
  423538:	4798      	blx	r3
            if(anim_cur) {
  42353a:	b1e8      	cbz	r0, 423578 <lv_label_refr_text+0x25c>
                act_time = anim_cur->act_time;
  42353c:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  42353e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
  423542:	f004 0401 	and.w	r4, r4, #1
            if(act_time < a.time) {
  423546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  423548:	429a      	cmp	r2, r3
  42354a:	da11      	bge.n	423570 <lv_label_refr_text+0x254>
                a.act_time = act_time;      /*To keep the old position*/
  42354c:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  42354e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  423552:	f36f 0300 	bfc	r3, #0, #1
  423556:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
                if(playback_now) {
  42355a:	b14c      	cbz	r4, 423570 <lv_label_refr_text+0x254>
                    a.playback_now = 1;
  42355c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  423560:	f043 0301 	orr.w	r3, r3, #1
  423564:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  423568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  42356a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  42356c:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  42356e:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  423570:	a806      	add	r0, sp, #24
  423572:	4b0e      	ldr	r3, [pc, #56]	; (4235ac <lv_label_refr_text+0x290>)
  423574:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  423576:	e721      	b.n	4233bc <lv_label_refr_text+0xa0>
            int32_t act_time = 0;
  423578:	2200      	movs	r2, #0
  42357a:	e7e4      	b.n	423546 <lv_label_refr_text+0x22a>
  42357c:	00408095 	.word	0x00408095
  423580:	00422b79 	.word	0x00422b79
  423584:	0040733d 	.word	0x0040733d
  423588:	00407445 	.word	0x00407445
  42358c:	00417e85 	.word	0x00417e85
  423590:	00405f59 	.word	0x00405f59
  423594:	00406c39 	.word	0x00406c39
  423598:	0041538d 	.word	0x0041538d
  42359c:	00413b3d 	.word	0x00413b3d
  4235a0:	00422c59 	.word	0x00422c59
  4235a4:	00415511 	.word	0x00415511
  4235a8:	004154dd 	.word	0x004154dd
  4235ac:	00415445 	.word	0x00415445
  4235b0:	00422c3d 	.word	0x00422c3d
  4235b4:	004153d9 	.word	0x004153d9
        lv_anim_init(&a);
  4235b8:	a806      	add	r0, sp, #24
  4235ba:	4b99      	ldr	r3, [pc, #612]	; (423820 <lv_label_refr_text+0x504>)
  4235bc:	4798      	blx	r3
    a->var     = var;
  4235be:	9506      	str	r5, [sp, #24]
    a->repeat_cnt       = cnt;
  4235c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4235c4:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        if(size.x > lv_area_get_width(&txt_coords)) {
  4235c8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4235cc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  4235d0:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  4235d4:	1a5b      	subs	r3, r3, r1
  4235d6:	b29b      	uxth	r3, r3
  4235d8:	3301      	adds	r3, #1
  4235da:	b21b      	sxth	r3, r3
  4235dc:	429a      	cmp	r2, r3
  4235de:	dd3e      	ble.n	42365e <lv_label_refr_text+0x342>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
  4235e0:	2220      	movs	r2, #32
  4235e2:	4611      	mov	r1, r2
  4235e4:	4640      	mov	r0, r8
  4235e6:	4b8f      	ldr	r3, [pc, #572]	; (423824 <lv_label_refr_text+0x508>)
  4235e8:	4798      	blx	r3
  4235ea:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
  4235ee:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  4235f2:	1a82      	subs	r2, r0, r2
  4235f4:	b212      	sxth	r2, r2
    a->start = start;
  4235f6:	2100      	movs	r1, #0
  4235f8:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  4235fa:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  4235fc:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  4235fe:	4c8a      	ldr	r4, [pc, #552]	; (423828 <lv_label_refr_text+0x50c>)
  423600:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  423602:	89b0      	ldrh	r0, [r6, #12]
  423604:	4b89      	ldr	r3, [pc, #548]	; (42382c <lv_label_refr_text+0x510>)
  423606:	4798      	blx	r3
    a->time     = duration;
  423608:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  42360a:	4621      	mov	r1, r4
  42360c:	4628      	mov	r0, r5
  42360e:	4b88      	ldr	r3, [pc, #544]	; (423830 <lv_label_refr_text+0x514>)
  423610:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  423612:	b310      	cbz	r0, 42365a <lv_label_refr_text+0x33e>
  423614:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  423616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  423618:	4293      	cmp	r3, r2
  42361a:	da06      	bge.n	42362a <lv_label_refr_text+0x30e>
                a.act_time = act_time;      /*To keep the old position*/
  42361c:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  42361e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  423622:	f36f 0300 	bfc	r3, #0, #1
  423626:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  42362a:	a806      	add	r0, sp, #24
  42362c:	4b81      	ldr	r3, [pc, #516]	; (423834 <lv_label_refr_text+0x518>)
  42362e:	4798      	blx	r3
            hor_anim = true;
  423630:	2101      	movs	r1, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  423632:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423636:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  42363a:	f8bd 0062 	ldrh.w	r0, [sp, #98]	; 0x62
  42363e:	1a1b      	subs	r3, r3, r0
  423640:	b29b      	uxth	r3, r3
  423642:	3301      	adds	r3, #1
  423644:	b21b      	sxth	r3, r3
  423646:	429a      	cmp	r2, r3
  423648:	dd00      	ble.n	42364c <lv_label_refr_text+0x330>
  42364a:	b179      	cbz	r1, 42366c <lv_label_refr_text+0x350>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  42364c:	497a      	ldr	r1, [pc, #488]	; (423838 <lv_label_refr_text+0x51c>)
  42364e:	4628      	mov	r0, r5
  423650:	4b7a      	ldr	r3, [pc, #488]	; (42383c <lv_label_refr_text+0x520>)
  423652:	4798      	blx	r3
            ext->offset.y = 0;
  423654:	2300      	movs	r3, #0
  423656:	8233      	strh	r3, [r6, #16]
  423658:	e6b0      	b.n	4233bc <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  42365a:	2300      	movs	r3, #0
  42365c:	e7db      	b.n	423616 <lv_label_refr_text+0x2fa>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  42365e:	4972      	ldr	r1, [pc, #456]	; (423828 <lv_label_refr_text+0x50c>)
  423660:	4628      	mov	r0, r5
  423662:	4b76      	ldr	r3, [pc, #472]	; (42383c <lv_label_refr_text+0x520>)
  423664:	4798      	blx	r3
            ext->offset.x = 0;
  423666:	2100      	movs	r1, #0
  423668:	81f1      	strh	r1, [r6, #14]
  42366a:	e7e2      	b.n	423632 <lv_label_refr_text+0x316>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
  42366c:	b292      	uxth	r2, r2
  42366e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  423672:	4252      	negs	r2, r2
  423674:	1ad2      	subs	r2, r2, r3
  423676:	b212      	sxth	r2, r2
    a->start = start;
  423678:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  42367a:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  42367c:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  42367e:	4c6e      	ldr	r4, [pc, #440]	; (423838 <lv_label_refr_text+0x51c>)
  423680:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  423682:	89b0      	ldrh	r0, [r6, #12]
  423684:	4b69      	ldr	r3, [pc, #420]	; (42382c <lv_label_refr_text+0x510>)
  423686:	4798      	blx	r3
    a->time     = duration;
  423688:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  42368a:	4621      	mov	r1, r4
  42368c:	4628      	mov	r0, r5
  42368e:	4b68      	ldr	r3, [pc, #416]	; (423830 <lv_label_refr_text+0x514>)
  423690:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  423692:	b170      	cbz	r0, 4236b2 <lv_label_refr_text+0x396>
  423694:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  423696:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  423698:	4293      	cmp	r3, r2
  42369a:	da06      	bge.n	4236aa <lv_label_refr_text+0x38e>
                a.act_time = act_time;      /*To keep the old position*/
  42369c:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  42369e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  4236a2:	f36f 0300 	bfc	r3, #0, #1
  4236a6:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  4236aa:	a806      	add	r0, sp, #24
  4236ac:	4b61      	ldr	r3, [pc, #388]	; (423834 <lv_label_refr_text+0x518>)
  4236ae:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  4236b0:	e684      	b.n	4233bc <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  4236b2:	2300      	movs	r3, #0
  4236b4:	e7ef      	b.n	423696 <lv_label_refr_text+0x37a>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
  4236b6:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
  4236ba:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  4236be:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  4236c2:	1a5b      	subs	r3, r3, r1
  4236c4:	b29b      	uxth	r3, r3
  4236c6:	3301      	adds	r3, #1
  4236c8:	b21b      	sxth	r3, r3
  4236ca:	429a      	cmp	r2, r3
  4236cc:	dc03      	bgt.n	4236d6 <lv_label_refr_text+0x3ba>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  4236ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4236d2:	60b3      	str	r3, [r6, #8]
  4236d4:	e672      	b.n	4233bc <lv_label_refr_text+0xa0>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
  4236d6:	4b5a      	ldr	r3, [pc, #360]	; (423840 <lv_label_refr_text+0x524>)
  4236d8:	681b      	ldr	r3, [r3, #0]
  4236da:	6830      	ldr	r0, [r6, #0]
  4236dc:	4798      	blx	r3
  4236de:	2803      	cmp	r0, #3
  4236e0:	d803      	bhi.n	4236ea <lv_label_refr_text+0x3ce>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  4236e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4236e6:	60b3      	str	r3, [r6, #8]
  4236e8:	e668      	b.n	4233bc <lv_label_refr_text+0xa0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4236ea:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  4236ee:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  4236f2:	1ae4      	subs	r4, r4, r3
  4236f4:	b2a4      	uxth	r4, r4
  4236f6:	3401      	adds	r4, #1
  4236f8:	b2a4      	uxth	r4, r4
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
  4236fa:	222e      	movs	r2, #46	; 0x2e
  4236fc:	4611      	mov	r1, r2
  4236fe:	4640      	mov	r0, r8
  423700:	4b48      	ldr	r3, [pc, #288]	; (423824 <lv_label_refr_text+0x508>)
  423702:	4798      	blx	r3
  423704:	4438      	add	r0, r7
            p.x = lv_area_get_width(&txt_coords) -
  423706:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  42370a:	4420      	add	r0, r4
  42370c:	f8ad 0014 	strh.w	r0, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423710:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  423714:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
  423718:	1a9b      	subs	r3, r3, r2
  42371a:	b29b      	uxth	r3, r3
  42371c:	3301      	adds	r3, #1
  42371e:	b29b      	uxth	r3, r3
  423720:	b218      	sxth	r0, r3
            p.y = lv_area_get_height(&txt_coords);
  423722:	f8ad 0016 	strh.w	r0, [sp, #22]
  423726:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
  42372a:	eb09 0401 	add.w	r4, r9, r1
            y_overed = p.y %
  42372e:	fb90 f2f4 	sdiv	r2, r0, r4
  423732:	fb04 0212 	mls	r2, r4, r2, r0
  423736:	b210      	sxth	r0, r2
            if(y_overed >= lv_font_get_line_height(font)) {
  423738:	4288      	cmp	r0, r1
  42373a:	db16      	blt.n	42376a <lv_label_refr_text+0x44e>
                p.y -= y_overed;
  42373c:	1a9b      	subs	r3, r3, r2
                p.y += lv_font_get_line_height(font);
  42373e:	b289      	uxth	r1, r1
  423740:	fa11 f383 	uxtah	r3, r1, r3
  423744:	f8ad 3016 	strh.w	r3, [sp, #22]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
  423748:	a905      	add	r1, sp, #20
  42374a:	4628      	mov	r0, r5
  42374c:	4b3d      	ldr	r3, [pc, #244]	; (423844 <lv_label_refr_text+0x528>)
  42374e:	4798      	blx	r3
  423750:	4607      	mov	r7, r0
            size_t txt_len = strlen(ext->text);
  423752:	6834      	ldr	r4, [r6, #0]
  423754:	4620      	mov	r0, r4
  423756:	4b3c      	ldr	r3, [pc, #240]	; (423848 <lv_label_refr_text+0x52c>)
  423758:	4798      	blx	r3
  42375a:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
  42375c:	4b3b      	ldr	r3, [pc, #236]	; (42384c <lv_label_refr_text+0x530>)
  42375e:	681b      	ldr	r3, [r3, #0]
  423760:	4639      	mov	r1, r7
  423762:	4620      	mov	r0, r4
  423764:	4798      	blx	r3
  423766:	9006      	str	r0, [sp, #24]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  423768:	e00c      	b.n	423784 <lv_label_refr_text+0x468>
                p.y -= y_overed;
  42376a:	1a9b      	subs	r3, r3, r2
  42376c:	b29b      	uxth	r3, r3
                p.y -= line_space;
  42376e:	eba3 0909 	sub.w	r9, r3, r9
  423772:	f8ad 9016 	strh.w	r9, [sp, #22]
  423776:	e7e7      	b.n	423748 <lv_label_refr_text+0x42c>
                _lv_txt_encoded_prev(ext->text, &byte_id);
  423778:	4b35      	ldr	r3, [pc, #212]	; (423850 <lv_label_refr_text+0x534>)
  42377a:	681b      	ldr	r3, [r3, #0]
  42377c:	a906      	add	r1, sp, #24
  42377e:	6830      	ldr	r0, [r6, #0]
  423780:	4798      	blx	r3
                letter_id--;
  423782:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  423784:	9c06      	ldr	r4, [sp, #24]
  423786:	f104 0803 	add.w	r8, r4, #3
  42378a:	45c1      	cmp	r9, r8
  42378c:	d3f4      	bcc.n	423778 <lv_label_refr_text+0x45c>
  42378e:	f04f 0900 	mov.w	r9, #0
  423792:	46cb      	mov	fp, r9
  423794:	e012      	b.n	4237bc <lv_label_refr_text+0x4a0>
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
  423796:	6830      	ldr	r0, [r6, #0]
  423798:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  42379c:	f85a 2d50 	ldr.w	r2, [sl, #-80]!
  4237a0:	4b2c      	ldr	r3, [pc, #176]	; (423854 <lv_label_refr_text+0x538>)
  4237a2:	681b      	ldr	r3, [r3, #0]
  4237a4:	4410      	add	r0, r2
  4237a6:	4798      	blx	r3
  4237a8:	4481      	add	r9, r0
  4237aa:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
  4237ae:	4b2a      	ldr	r3, [pc, #168]	; (423858 <lv_label_refr_text+0x53c>)
  4237b0:	681b      	ldr	r3, [r3, #0]
  4237b2:	4651      	mov	r1, sl
  4237b4:	6830      	ldr	r0, [r6, #0]
  4237b6:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
  4237b8:	f10b 0b01 	add.w	fp, fp, #1
  4237bc:	f1bb 0f03 	cmp.w	fp, #3
  4237c0:	d9e9      	bls.n	423796 <lv_label_refr_text+0x47a>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
  4237c2:	6831      	ldr	r1, [r6, #0]
  4237c4:	464a      	mov	r2, r9
  4237c6:	4421      	add	r1, r4
  4237c8:	4628      	mov	r0, r5
  4237ca:	4b24      	ldr	r3, [pc, #144]	; (42385c <lv_label_refr_text+0x540>)
  4237cc:	4798      	blx	r3
  4237ce:	2800      	cmp	r0, #0
  4237d0:	f43f adf4 	beq.w	4233bc <lv_label_refr_text+0xa0>
  4237d4:	2300      	movs	r3, #0
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  4237d6:	2b02      	cmp	r3, #2
  4237d8:	d805      	bhi.n	4237e6 <lv_label_refr_text+0x4ca>
                    ext->text[byte_id_ori + i] = '.';
  4237da:	6831      	ldr	r1, [r6, #0]
  4237dc:	191a      	adds	r2, r3, r4
  4237de:	202e      	movs	r0, #46	; 0x2e
  4237e0:	5488      	strb	r0, [r1, r2]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  4237e2:	3301      	adds	r3, #1
  4237e4:	e7f7      	b.n	4237d6 <lv_label_refr_text+0x4ba>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
  4237e6:	6833      	ldr	r3, [r6, #0]
  4237e8:	2200      	movs	r2, #0
  4237ea:	f803 2008 	strb.w	r2, [r3, r8]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
  4237ee:	3703      	adds	r7, #3
  4237f0:	60b7      	str	r7, [r6, #8]
  4237f2:	e5e3      	b.n	4233bc <lv_label_refr_text+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4237f4:	2210      	movs	r2, #16
  4237f6:	2100      	movs	r1, #0
  4237f8:	4628      	mov	r0, r5
  4237fa:	4e19      	ldr	r6, [pc, #100]	; (423860 <lv_label_refr_text+0x544>)
  4237fc:	47b0      	blx	r6
  4237fe:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  423800:	2211      	movs	r2, #17
  423802:	2100      	movs	r1, #0
  423804:	4628      	mov	r0, r5
  423806:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  423808:	1821      	adds	r1, r4, r0
  42380a:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  42380e:	4401      	add	r1, r0
  423810:	b209      	sxth	r1, r1
  423812:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
        lv_obj_set_height(label, size.y);
  423816:	4628      	mov	r0, r5
  423818:	4b12      	ldr	r3, [pc, #72]	; (423864 <lv_label_refr_text+0x548>)
  42381a:	4798      	blx	r3
  42381c:	e5ce      	b.n	4233bc <lv_label_refr_text+0xa0>
  42381e:	bf00      	nop
  423820:	0041538d 	.word	0x0041538d
  423824:	00413b3d 	.word	0x00413b3d
  423828:	00422c59 	.word	0x00422c59
  42382c:	00415511 	.word	0x00415511
  423830:	004154dd 	.word	0x004154dd
  423834:	00415445 	.word	0x00415445
  423838:	00422c3d 	.word	0x00422c3d
  42383c:	004153d9 	.word	0x004153d9
  423840:	204000c4 	.word	0x204000c4
  423844:	00422d95 	.word	0x00422d95
  423848:	00428001 	.word	0x00428001
  42384c:	204000b0 	.word	0x204000b0
  423850:	204000bc 	.word	0x204000bc
  423854:	204000c0 	.word	0x204000c0
  423858:	204000b8 	.word	0x204000b8
  42385c:	00422bd5 	.word	0x00422bd5
  423860:	00407445 	.word	0x00407445
  423864:	00406d6d 	.word	0x00406d6d

00423868 <lv_label_signal>:
{
  423868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42386c:	4607      	mov	r7, r0
  42386e:	460c      	mov	r4, r1
  423870:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  423872:	2908      	cmp	r1, #8
  423874:	d014      	beq.n	4238a0 <lv_label_signal+0x38>
    res = ancestor_signal(label, sign, param);
  423876:	4b31      	ldr	r3, [pc, #196]	; (42393c <lv_label_signal+0xd4>)
  423878:	681b      	ldr	r3, [r3, #0]
  42387a:	4798      	blx	r3
  42387c:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  42387e:	2801      	cmp	r0, #1
  423880:	d114      	bne.n	4238ac <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  423882:	2c07      	cmp	r4, #7
  423884:	d01d      	beq.n	4238c2 <lv_label_signal+0x5a>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423886:	4638      	mov	r0, r7
  423888:	4b2d      	ldr	r3, [pc, #180]	; (423940 <lv_label_signal+0xd8>)
  42388a:	4798      	blx	r3
  42388c:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  42388e:	bb2c      	cbnz	r4, 4238dc <lv_label_signal+0x74>
        if(ext->static_txt == 0) {
  423890:	7c83      	ldrb	r3, [r0, #18]
  423892:	f013 0f08 	tst.w	r3, #8
  423896:	d01a      	beq.n	4238ce <lv_label_signal+0x66>
        lv_label_dot_tmp_free(label);
  423898:	4638      	mov	r0, r7
  42389a:	4b2a      	ldr	r3, [pc, #168]	; (423944 <lv_label_signal+0xdc>)
  42389c:	4798      	blx	r3
  42389e:	e005      	b.n	4238ac <lv_label_signal+0x44>
        info->result = lv_label_get_style(label, info->part);
  4238a0:	7811      	ldrb	r1, [r2, #0]
  4238a2:	4b29      	ldr	r3, [pc, #164]	; (423948 <lv_label_signal+0xe0>)
  4238a4:	4798      	blx	r3
  4238a6:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  4238a8:	b118      	cbz	r0, 4238b2 <lv_label_signal+0x4a>
  4238aa:	2601      	movs	r6, #1
}
  4238ac:	4630      	mov	r0, r6
  4238ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else return ancestor_signal(label, sign, param);
  4238b2:	4b22      	ldr	r3, [pc, #136]	; (42393c <lv_label_signal+0xd4>)
  4238b4:	681b      	ldr	r3, [r3, #0]
  4238b6:	462a      	mov	r2, r5
  4238b8:	4621      	mov	r1, r4
  4238ba:	4638      	mov	r0, r7
  4238bc:	4798      	blx	r3
  4238be:	4606      	mov	r6, r0
  4238c0:	e7f4      	b.n	4238ac <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4238c2:	4922      	ldr	r1, [pc, #136]	; (42394c <lv_label_signal+0xe4>)
  4238c4:	4628      	mov	r0, r5
  4238c6:	4b22      	ldr	r3, [pc, #136]	; (423950 <lv_label_signal+0xe8>)
  4238c8:	4798      	blx	r3
  4238ca:	4606      	mov	r6, r0
  4238cc:	e7ee      	b.n	4238ac <lv_label_signal+0x44>
            lv_mem_free(ext->text);
  4238ce:	6800      	ldr	r0, [r0, #0]
  4238d0:	4b20      	ldr	r3, [pc, #128]	; (423954 <lv_label_signal+0xec>)
  4238d2:	4798      	blx	r3
            ext->text = NULL;
  4238d4:	2300      	movs	r3, #0
  4238d6:	f8c8 3000 	str.w	r3, [r8]
  4238da:	e7dd      	b.n	423898 <lv_label_signal+0x30>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  4238dc:	2c04      	cmp	r4, #4
  4238de:	d016      	beq.n	42390e <lv_label_signal+0xa6>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  4238e0:	2c02      	cmp	r4, #2
  4238e2:	d1e3      	bne.n	4238ac <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4238e4:	8abb      	ldrh	r3, [r7, #20]
  4238e6:	8a3a      	ldrh	r2, [r7, #16]
  4238e8:	1a9b      	subs	r3, r3, r2
  4238ea:	b29b      	uxth	r3, r3
  4238ec:	3301      	adds	r3, #1
  4238ee:	b29b      	uxth	r3, r3
  4238f0:	88aa      	ldrh	r2, [r5, #4]
  4238f2:	8829      	ldrh	r1, [r5, #0]
  4238f4:	1a52      	subs	r2, r2, r1
  4238f6:	b292      	uxth	r2, r2
  4238f8:	3201      	adds	r2, #1
  4238fa:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  4238fc:	429a      	cmp	r2, r3
  4238fe:	d00d      	beq.n	42391c <lv_label_signal+0xb4>
            lv_label_revert_dots(label);
  423900:	4638      	mov	r0, r7
  423902:	4b15      	ldr	r3, [pc, #84]	; (423958 <lv_label_signal+0xf0>)
  423904:	4798      	blx	r3
            lv_label_refr_text(label);
  423906:	4638      	mov	r0, r7
  423908:	4b14      	ldr	r3, [pc, #80]	; (42395c <lv_label_signal+0xf4>)
  42390a:	4798      	blx	r3
  42390c:	e7ce      	b.n	4238ac <lv_label_signal+0x44>
        lv_label_revert_dots(label);
  42390e:	4638      	mov	r0, r7
  423910:	4b11      	ldr	r3, [pc, #68]	; (423958 <lv_label_signal+0xf0>)
  423912:	4798      	blx	r3
        lv_label_refr_text(label);
  423914:	4638      	mov	r0, r7
  423916:	4b11      	ldr	r3, [pc, #68]	; (42395c <lv_label_signal+0xf4>)
  423918:	4798      	blx	r3
  42391a:	e7c7      	b.n	4238ac <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  42391c:	8afb      	ldrh	r3, [r7, #22]
  42391e:	8a7a      	ldrh	r2, [r7, #18]
  423920:	1a9b      	subs	r3, r3, r2
  423922:	b29b      	uxth	r3, r3
  423924:	3301      	adds	r3, #1
  423926:	b29b      	uxth	r3, r3
  423928:	88ea      	ldrh	r2, [r5, #6]
  42392a:	8869      	ldrh	r1, [r5, #2]
  42392c:	1a52      	subs	r2, r2, r1
  42392e:	b292      	uxth	r2, r2
  423930:	3201      	adds	r2, #1
  423932:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  423934:	429a      	cmp	r2, r3
  423936:	d1e3      	bne.n	423900 <lv_label_signal+0x98>
  423938:	e7b8      	b.n	4238ac <lv_label_signal+0x44>
  42393a:	bf00      	nop
  42393c:	20414878 	.word	0x20414878
  423940:	00408095 	.word	0x00408095
  423944:	00422ad9 	.word	0x00422ad9
  423948:	00423311 	.word	0x00423311
  42394c:	0042f8e4 	.word	0x0042f8e4
  423950:	00408321 	.word	0x00408321
  423954:	00416681 	.word	0x00416681
  423958:	00422b09 	.word	0x00422b09
  42395c:	0042331d 	.word	0x0042331d

00423960 <lv_label_set_text>:
{
  423960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  423962:	4607      	mov	r7, r0
  423964:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423966:	4b31      	ldr	r3, [pc, #196]	; (423a2c <lv_label_set_text+0xcc>)
  423968:	4798      	blx	r3
  42396a:	b928      	cbnz	r0, 423978 <lv_label_set_text+0x18>
  42396c:	463a      	mov	r2, r7
  42396e:	2300      	movs	r3, #0
  423970:	482f      	ldr	r0, [pc, #188]	; (423a30 <lv_label_set_text+0xd0>)
  423972:	4930      	ldr	r1, [pc, #192]	; (423a34 <lv_label_set_text+0xd4>)
  423974:	4788      	blx	r1
  423976:	e7fe      	b.n	423976 <lv_label_set_text+0x16>
    lv_obj_invalidate(label);
  423978:	4638      	mov	r0, r7
  42397a:	4b2f      	ldr	r3, [pc, #188]	; (423a38 <lv_label_set_text+0xd8>)
  42397c:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  42397e:	4638      	mov	r0, r7
  423980:	4b2e      	ldr	r3, [pc, #184]	; (423a3c <lv_label_set_text+0xdc>)
  423982:	4798      	blx	r3
  423984:	4604      	mov	r4, r0
    if(text == NULL) text = ext->text;
  423986:	b31d      	cbz	r5, 4239d0 <lv_label_set_text+0x70>
    LV_ASSERT_STR(text);
  423988:	4628      	mov	r0, r5
  42398a:	4b28      	ldr	r3, [pc, #160]	; (423a2c <lv_label_set_text+0xcc>)
  42398c:	4798      	blx	r3
  42398e:	b308      	cbz	r0, 4239d4 <lv_label_set_text+0x74>
    if(ext->text == text && ext->static_txt == 0) {
  423990:	6826      	ldr	r6, [r4, #0]
  423992:	42b5      	cmp	r5, r6
  423994:	d024      	beq.n	4239e0 <lv_label_set_text+0x80>
        if(ext->text != NULL && ext->static_txt == 0) {
  423996:	b11e      	cbz	r6, 4239a0 <lv_label_set_text+0x40>
  423998:	7ca3      	ldrb	r3, [r4, #18]
  42399a:	f013 0f08 	tst.w	r3, #8
  42399e:	d038      	beq.n	423a12 <lv_label_set_text+0xb2>
        size_t len = strlen(text) + 1;
  4239a0:	4628      	mov	r0, r5
  4239a2:	4b27      	ldr	r3, [pc, #156]	; (423a40 <lv_label_set_text+0xe0>)
  4239a4:	4798      	blx	r3
        ext->text = lv_mem_alloc(len);
  4239a6:	3001      	adds	r0, #1
  4239a8:	4b26      	ldr	r3, [pc, #152]	; (423a44 <lv_label_set_text+0xe4>)
  4239aa:	4798      	blx	r3
  4239ac:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  4239ae:	4b1f      	ldr	r3, [pc, #124]	; (423a2c <lv_label_set_text+0xcc>)
  4239b0:	4798      	blx	r3
  4239b2:	2800      	cmp	r0, #0
  4239b4:	d033      	beq.n	423a1e <lv_label_set_text+0xbe>
        if(ext->text == NULL) return;
  4239b6:	6820      	ldr	r0, [r4, #0]
  4239b8:	b148      	cbz	r0, 4239ce <lv_label_set_text+0x6e>
        strcpy(ext->text, text);
  4239ba:	4629      	mov	r1, r5
  4239bc:	4b22      	ldr	r3, [pc, #136]	; (423a48 <lv_label_set_text+0xe8>)
  4239be:	4798      	blx	r3
        ext->static_txt = 0;
  4239c0:	7ca3      	ldrb	r3, [r4, #18]
  4239c2:	f36f 03c3 	bfc	r3, #3, #1
  4239c6:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  4239c8:	4638      	mov	r0, r7
  4239ca:	4b20      	ldr	r3, [pc, #128]	; (423a4c <lv_label_set_text+0xec>)
  4239cc:	4798      	blx	r3
  4239ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(text == NULL) text = ext->text;
  4239d0:	6805      	ldr	r5, [r0, #0]
  4239d2:	e7d9      	b.n	423988 <lv_label_set_text+0x28>
    LV_ASSERT_STR(text);
  4239d4:	462a      	mov	r2, r5
  4239d6:	2300      	movs	r3, #0
  4239d8:	4815      	ldr	r0, [pc, #84]	; (423a30 <lv_label_set_text+0xd0>)
  4239da:	4916      	ldr	r1, [pc, #88]	; (423a34 <lv_label_set_text+0xd4>)
  4239dc:	4788      	blx	r1
  4239de:	e7fe      	b.n	4239de <lv_label_set_text+0x7e>
    if(ext->text == text && ext->static_txt == 0) {
  4239e0:	7ca3      	ldrb	r3, [r4, #18]
  4239e2:	f013 0f08 	tst.w	r3, #8
  4239e6:	d1d6      	bne.n	423996 <lv_label_set_text+0x36>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
  4239e8:	4630      	mov	r0, r6
  4239ea:	4b15      	ldr	r3, [pc, #84]	; (423a40 <lv_label_set_text+0xe0>)
  4239ec:	4798      	blx	r3
  4239ee:	1c41      	adds	r1, r0, #1
  4239f0:	4630      	mov	r0, r6
  4239f2:	4b17      	ldr	r3, [pc, #92]	; (423a50 <lv_label_set_text+0xf0>)
  4239f4:	4798      	blx	r3
  4239f6:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  4239f8:	4b0c      	ldr	r3, [pc, #48]	; (423a2c <lv_label_set_text+0xcc>)
  4239fa:	4798      	blx	r3
  4239fc:	b928      	cbnz	r0, 423a0a <lv_label_set_text+0xaa>
  4239fe:	6822      	ldr	r2, [r4, #0]
  423a00:	2300      	movs	r3, #0
  423a02:	4814      	ldr	r0, [pc, #80]	; (423a54 <lv_label_set_text+0xf4>)
  423a04:	490b      	ldr	r1, [pc, #44]	; (423a34 <lv_label_set_text+0xd4>)
  423a06:	4788      	blx	r1
  423a08:	e7fe      	b.n	423a08 <lv_label_set_text+0xa8>
        if(ext->text == NULL) return;
  423a0a:	6823      	ldr	r3, [r4, #0]
  423a0c:	2b00      	cmp	r3, #0
  423a0e:	d1db      	bne.n	4239c8 <lv_label_set_text+0x68>
  423a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_mem_free(ext->text);
  423a12:	4630      	mov	r0, r6
  423a14:	4b10      	ldr	r3, [pc, #64]	; (423a58 <lv_label_set_text+0xf8>)
  423a16:	4798      	blx	r3
            ext->text = NULL;
  423a18:	2300      	movs	r3, #0
  423a1a:	6023      	str	r3, [r4, #0]
  423a1c:	e7c0      	b.n	4239a0 <lv_label_set_text+0x40>
        LV_ASSERT_MEM(ext->text);
  423a1e:	6822      	ldr	r2, [r4, #0]
  423a20:	2300      	movs	r3, #0
  423a22:	480c      	ldr	r0, [pc, #48]	; (423a54 <lv_label_set_text+0xf4>)
  423a24:	4903      	ldr	r1, [pc, #12]	; (423a34 <lv_label_set_text+0xd4>)
  423a26:	4788      	blx	r1
  423a28:	e7fe      	b.n	423a28 <lv_label_set_text+0xc8>
  423a2a:	bf00      	nop
  423a2c:	00415e79 	.word	0x00415e79
  423a30:	0042c168 	.word	0x0042c168
  423a34:	00415e85 	.word	0x00415e85
  423a38:	00405f59 	.word	0x00405f59
  423a3c:	00408095 	.word	0x00408095
  423a40:	00428001 	.word	0x00428001
  423a44:	004165bd 	.word	0x004165bd
  423a48:	00427f1d 	.word	0x00427f1d
  423a4c:	0042331d 	.word	0x0042331d
  423a50:	004168ed 	.word	0x004168ed
  423a54:	0042c154 	.word	0x0042c154
  423a58:	00416681 	.word	0x00416681

00423a5c <lv_label_set_text_fmt>:
{
  423a5c:	b40e      	push	{r1, r2, r3}
  423a5e:	b570      	push	{r4, r5, r6, lr}
  423a60:	b083      	sub	sp, #12
  423a62:	4605      	mov	r5, r0
  423a64:	9e07      	ldr	r6, [sp, #28]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423a66:	4b1d      	ldr	r3, [pc, #116]	; (423adc <lv_label_set_text_fmt+0x80>)
  423a68:	4798      	blx	r3
  423a6a:	b928      	cbnz	r0, 423a78 <lv_label_set_text_fmt+0x1c>
  423a6c:	462a      	mov	r2, r5
  423a6e:	2300      	movs	r3, #0
  423a70:	481b      	ldr	r0, [pc, #108]	; (423ae0 <lv_label_set_text_fmt+0x84>)
  423a72:	491c      	ldr	r1, [pc, #112]	; (423ae4 <lv_label_set_text_fmt+0x88>)
  423a74:	4788      	blx	r1
  423a76:	e7fe      	b.n	423a76 <lv_label_set_text_fmt+0x1a>
    LV_ASSERT_STR(fmt);
  423a78:	4630      	mov	r0, r6
  423a7a:	4b18      	ldr	r3, [pc, #96]	; (423adc <lv_label_set_text_fmt+0x80>)
  423a7c:	4798      	blx	r3
  423a7e:	b928      	cbnz	r0, 423a8c <lv_label_set_text_fmt+0x30>
  423a80:	4632      	mov	r2, r6
  423a82:	2300      	movs	r3, #0
  423a84:	4816      	ldr	r0, [pc, #88]	; (423ae0 <lv_label_set_text_fmt+0x84>)
  423a86:	4917      	ldr	r1, [pc, #92]	; (423ae4 <lv_label_set_text_fmt+0x88>)
  423a88:	4788      	blx	r1
  423a8a:	e7fe      	b.n	423a8a <lv_label_set_text_fmt+0x2e>
    lv_obj_invalidate(label);
  423a8c:	4628      	mov	r0, r5
  423a8e:	4b16      	ldr	r3, [pc, #88]	; (423ae8 <lv_label_set_text_fmt+0x8c>)
  423a90:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423a92:	4628      	mov	r0, r5
  423a94:	4b15      	ldr	r3, [pc, #84]	; (423aec <lv_label_set_text_fmt+0x90>)
  423a96:	4798      	blx	r3
  423a98:	4604      	mov	r4, r0
    if(fmt == NULL) {
  423a9a:	b93e      	cbnz	r6, 423aac <lv_label_set_text_fmt+0x50>
        lv_label_refr_text(label);
  423a9c:	4628      	mov	r0, r5
  423a9e:	4b14      	ldr	r3, [pc, #80]	; (423af0 <lv_label_set_text_fmt+0x94>)
  423aa0:	4798      	blx	r3
}
  423aa2:	b003      	add	sp, #12
  423aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  423aa8:	b003      	add	sp, #12
  423aaa:	4770      	bx	lr
    if(ext->text != NULL && ext->static_txt == 0) {
  423aac:	6800      	ldr	r0, [r0, #0]
  423aae:	b138      	cbz	r0, 423ac0 <lv_label_set_text_fmt+0x64>
  423ab0:	7ca3      	ldrb	r3, [r4, #18]
  423ab2:	f013 0f08 	tst.w	r3, #8
  423ab6:	d103      	bne.n	423ac0 <lv_label_set_text_fmt+0x64>
        lv_mem_free(ext->text);
  423ab8:	4b0e      	ldr	r3, [pc, #56]	; (423af4 <lv_label_set_text_fmt+0x98>)
  423aba:	4798      	blx	r3
        ext->text = NULL;
  423abc:	2300      	movs	r3, #0
  423abe:	6023      	str	r3, [r4, #0]
    va_start(args, fmt);
  423ac0:	a908      	add	r1, sp, #32
  423ac2:	9101      	str	r1, [sp, #4]
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
  423ac4:	4630      	mov	r0, r6
  423ac6:	4b0c      	ldr	r3, [pc, #48]	; (423af8 <lv_label_set_text_fmt+0x9c>)
  423ac8:	4798      	blx	r3
  423aca:	6020      	str	r0, [r4, #0]
    ext->static_txt = 0; /*Now the text is dynamically allocated*/
  423acc:	7ca3      	ldrb	r3, [r4, #18]
  423ace:	f36f 03c3 	bfc	r3, #3, #1
  423ad2:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  423ad4:	4628      	mov	r0, r5
  423ad6:	4b06      	ldr	r3, [pc, #24]	; (423af0 <lv_label_set_text_fmt+0x94>)
  423ad8:	4798      	blx	r3
  423ada:	e7e2      	b.n	423aa2 <lv_label_set_text_fmt+0x46>
  423adc:	00415e79 	.word	0x00415e79
  423ae0:	0042c168 	.word	0x0042c168
  423ae4:	00415e85 	.word	0x00415e85
  423ae8:	00405f59 	.word	0x00405f59
  423aec:	00408095 	.word	0x00408095
  423af0:	0042331d 	.word	0x0042331d
  423af4:	00416681 	.word	0x00416681
  423af8:	00417f55 	.word	0x00417f55

00423afc <lv_label_set_text_static>:
{
  423afc:	b570      	push	{r4, r5, r6, lr}
  423afe:	4605      	mov	r5, r0
  423b00:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423b02:	4b10      	ldr	r3, [pc, #64]	; (423b44 <lv_label_set_text_static+0x48>)
  423b04:	4798      	blx	r3
  423b06:	b928      	cbnz	r0, 423b14 <lv_label_set_text_static+0x18>
  423b08:	462a      	mov	r2, r5
  423b0a:	2300      	movs	r3, #0
  423b0c:	480e      	ldr	r0, [pc, #56]	; (423b48 <lv_label_set_text_static+0x4c>)
  423b0e:	490f      	ldr	r1, [pc, #60]	; (423b4c <lv_label_set_text_static+0x50>)
  423b10:	4788      	blx	r1
  423b12:	e7fe      	b.n	423b12 <lv_label_set_text_static+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423b14:	4628      	mov	r0, r5
  423b16:	4b0e      	ldr	r3, [pc, #56]	; (423b50 <lv_label_set_text_static+0x54>)
  423b18:	4798      	blx	r3
  423b1a:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
  423b1c:	7c83      	ldrb	r3, [r0, #18]
  423b1e:	f013 0f08 	tst.w	r3, #8
  423b22:	d105      	bne.n	423b30 <lv_label_set_text_static+0x34>
  423b24:	6800      	ldr	r0, [r0, #0]
  423b26:	b118      	cbz	r0, 423b30 <lv_label_set_text_static+0x34>
        lv_mem_free(ext->text);
  423b28:	4b0a      	ldr	r3, [pc, #40]	; (423b54 <lv_label_set_text_static+0x58>)
  423b2a:	4798      	blx	r3
        ext->text = NULL;
  423b2c:	2300      	movs	r3, #0
  423b2e:	6023      	str	r3, [r4, #0]
    if(text != NULL) {
  423b30:	b126      	cbz	r6, 423b3c <lv_label_set_text_static+0x40>
        ext->static_txt = 1;
  423b32:	7ca3      	ldrb	r3, [r4, #18]
  423b34:	f043 0308 	orr.w	r3, r3, #8
  423b38:	74a3      	strb	r3, [r4, #18]
        ext->text       = (char *)text;
  423b3a:	6026      	str	r6, [r4, #0]
    lv_label_refr_text(label);
  423b3c:	4628      	mov	r0, r5
  423b3e:	4b06      	ldr	r3, [pc, #24]	; (423b58 <lv_label_set_text_static+0x5c>)
  423b40:	4798      	blx	r3
  423b42:	bd70      	pop	{r4, r5, r6, pc}
  423b44:	00415e79 	.word	0x00415e79
  423b48:	0042c168 	.word	0x0042c168
  423b4c:	00415e85 	.word	0x00415e85
  423b50:	00408095 	.word	0x00408095
  423b54:	00416681 	.word	0x00416681
  423b58:	0042331d 	.word	0x0042331d

00423b5c <lv_label_set_long_mode>:
{
  423b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  423b5e:	4605      	mov	r5, r0
  423b60:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423b62:	4b20      	ldr	r3, [pc, #128]	; (423be4 <lv_label_set_long_mode+0x88>)
  423b64:	4798      	blx	r3
  423b66:	b928      	cbnz	r0, 423b74 <lv_label_set_long_mode+0x18>
  423b68:	462a      	mov	r2, r5
  423b6a:	2300      	movs	r3, #0
  423b6c:	481e      	ldr	r0, [pc, #120]	; (423be8 <lv_label_set_long_mode+0x8c>)
  423b6e:	491f      	ldr	r1, [pc, #124]	; (423bec <lv_label_set_long_mode+0x90>)
  423b70:	4788      	blx	r1
  423b72:	e7fe      	b.n	423b72 <lv_label_set_long_mode+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423b74:	4628      	mov	r0, r5
  423b76:	4b1e      	ldr	r3, [pc, #120]	; (423bf0 <lv_label_set_long_mode+0x94>)
  423b78:	4798      	blx	r3
  423b7a:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
  423b7c:	491d      	ldr	r1, [pc, #116]	; (423bf4 <lv_label_set_long_mode+0x98>)
  423b7e:	4628      	mov	r0, r5
  423b80:	4e1d      	ldr	r6, [pc, #116]	; (423bf8 <lv_label_set_long_mode+0x9c>)
  423b82:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
  423b84:	491d      	ldr	r1, [pc, #116]	; (423bfc <lv_label_set_long_mode+0xa0>)
  423b86:	4628      	mov	r0, r5
  423b88:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  423b8a:	491d      	ldr	r1, [pc, #116]	; (423c00 <lv_label_set_long_mode+0xa4>)
  423b8c:	4628      	mov	r0, r5
  423b8e:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  423b90:	491c      	ldr	r1, [pc, #112]	; (423c04 <lv_label_set_long_mode+0xa8>)
  423b92:	4628      	mov	r0, r5
  423b94:	47b0      	blx	r6
    ext->offset.x = 0;
  423b96:	2300      	movs	r3, #0
  423b98:	81e3      	strh	r3, [r4, #14]
    ext->offset.y = 0;
  423b9a:	8223      	strh	r3, [r4, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
  423b9c:	1efb      	subs	r3, r7, #3
  423b9e:	b2db      	uxtb	r3, r3
  423ba0:	2b02      	cmp	r3, #2
  423ba2:	d810      	bhi.n	423bc6 <lv_label_set_long_mode+0x6a>
        ext->expand = 1;
  423ba4:	7ca3      	ldrb	r3, [r4, #18]
  423ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  423baa:	74a3      	strb	r3, [r4, #18]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  423bac:	7ca3      	ldrb	r3, [r4, #18]
  423bae:	f003 0307 	and.w	r3, r3, #7
  423bb2:	2b02      	cmp	r3, #2
  423bb4:	d00c      	beq.n	423bd0 <lv_label_set_long_mode+0x74>
    ext->long_mode = long_mode;
  423bb6:	7ca3      	ldrb	r3, [r4, #18]
  423bb8:	f367 0302 	bfi	r3, r7, #0, #3
  423bbc:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  423bbe:	4628      	mov	r0, r5
  423bc0:	4b11      	ldr	r3, [pc, #68]	; (423c08 <lv_label_set_long_mode+0xac>)
  423bc2:	4798      	blx	r3
  423bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->expand = 0;
  423bc6:	7ca3      	ldrb	r3, [r4, #18]
  423bc8:	f36f 13c7 	bfc	r3, #7, #1
  423bcc:	74a3      	strb	r3, [r4, #18]
  423bce:	e7ed      	b.n	423bac <lv_label_set_long_mode+0x50>
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  423bd0:	68a2      	ldr	r2, [r4, #8]
  423bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  423bd6:	429a      	cmp	r2, r3
  423bd8:	d0ed      	beq.n	423bb6 <lv_label_set_long_mode+0x5a>
        lv_label_revert_dots(label);
  423bda:	4628      	mov	r0, r5
  423bdc:	4b0b      	ldr	r3, [pc, #44]	; (423c0c <lv_label_set_long_mode+0xb0>)
  423bde:	4798      	blx	r3
  423be0:	e7e9      	b.n	423bb6 <lv_label_set_long_mode+0x5a>
  423be2:	bf00      	nop
  423be4:	00415e79 	.word	0x00415e79
  423be8:	0042c168 	.word	0x0042c168
  423bec:	00415e85 	.word	0x00415e85
  423bf0:	00408095 	.word	0x00408095
  423bf4:	004060f5 	.word	0x004060f5
  423bf8:	004153d9 	.word	0x004153d9
  423bfc:	00406135 	.word	0x00406135
  423c00:	00422c59 	.word	0x00422c59
  423c04:	00422c3d 	.word	0x00422c3d
  423c08:	0042331d 	.word	0x0042331d
  423c0c:	00422b09 	.word	0x00422b09

00423c10 <lv_label_set_recolor>:
{
  423c10:	b538      	push	{r3, r4, r5, lr}
  423c12:	4604      	mov	r4, r0
  423c14:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423c16:	4b0e      	ldr	r3, [pc, #56]	; (423c50 <lv_label_set_recolor+0x40>)
  423c18:	4798      	blx	r3
  423c1a:	b928      	cbnz	r0, 423c28 <lv_label_set_recolor+0x18>
  423c1c:	4622      	mov	r2, r4
  423c1e:	2300      	movs	r3, #0
  423c20:	480c      	ldr	r0, [pc, #48]	; (423c54 <lv_label_set_recolor+0x44>)
  423c22:	490d      	ldr	r1, [pc, #52]	; (423c58 <lv_label_set_recolor+0x48>)
  423c24:	4788      	blx	r1
  423c26:	e7fe      	b.n	423c26 <lv_label_set_recolor+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423c28:	4620      	mov	r0, r4
  423c2a:	4b0c      	ldr	r3, [pc, #48]	; (423c5c <lv_label_set_recolor+0x4c>)
  423c2c:	4798      	blx	r3
    if(ext->recolor == en) return;
  423c2e:	7c83      	ldrb	r3, [r0, #18]
  423c30:	f3c3 1380 	ubfx	r3, r3, #6, #1
  423c34:	42ab      	cmp	r3, r5
  423c36:	d008      	beq.n	423c4a <lv_label_set_recolor+0x3a>
    ext->recolor = en == false ? 0 : 1;
  423c38:	b945      	cbnz	r5, 423c4c <lv_label_set_recolor+0x3c>
  423c3a:	2200      	movs	r2, #0
  423c3c:	7c83      	ldrb	r3, [r0, #18]
  423c3e:	f362 1386 	bfi	r3, r2, #6, #1
  423c42:	7483      	strb	r3, [r0, #18]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
  423c44:	4620      	mov	r0, r4
  423c46:	4b06      	ldr	r3, [pc, #24]	; (423c60 <lv_label_set_recolor+0x50>)
  423c48:	4798      	blx	r3
  423c4a:	bd38      	pop	{r3, r4, r5, pc}
    ext->recolor = en == false ? 0 : 1;
  423c4c:	2201      	movs	r2, #1
  423c4e:	e7f5      	b.n	423c3c <lv_label_set_recolor+0x2c>
  423c50:	00415e79 	.word	0x00415e79
  423c54:	0042c168 	.word	0x0042c168
  423c58:	00415e85 	.word	0x00415e85
  423c5c:	00408095 	.word	0x00408095
  423c60:	0042331d 	.word	0x0042331d

00423c64 <lv_label_create>:
{
  423c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  423c68:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
  423c6a:	4b6b      	ldr	r3, [pc, #428]	; (423e18 <lv_label_create+0x1b4>)
  423c6c:	4798      	blx	r3
  423c6e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
  423c70:	4b6a      	ldr	r3, [pc, #424]	; (423e1c <lv_label_create+0x1b8>)
  423c72:	4798      	blx	r3
  423c74:	b1b0      	cbz	r0, 423ca4 <lv_label_create+0x40>
    if(new_label == NULL) return NULL;
  423c76:	2c00      	cmp	r4, #0
  423c78:	f000 8085 	beq.w	423d86 <lv_label_create+0x122>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  423c7c:	4b68      	ldr	r3, [pc, #416]	; (423e20 <lv_label_create+0x1bc>)
  423c7e:	681b      	ldr	r3, [r3, #0]
  423c80:	b1b3      	cbz	r3, 423cb0 <lv_label_create+0x4c>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
  423c82:	2114      	movs	r1, #20
  423c84:	4620      	mov	r0, r4
  423c86:	4b67      	ldr	r3, [pc, #412]	; (423e24 <lv_label_create+0x1c0>)
  423c88:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
  423c8a:	4620      	mov	r0, r4
  423c8c:	4b66      	ldr	r3, [pc, #408]	; (423e28 <lv_label_create+0x1c4>)
  423c8e:	4798      	blx	r3
  423c90:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  423c92:	4b62      	ldr	r3, [pc, #392]	; (423e1c <lv_label_create+0x1b8>)
  423c94:	4798      	blx	r3
  423c96:	b988      	cbnz	r0, 423cbc <lv_label_create+0x58>
  423c98:	462a      	mov	r2, r5
  423c9a:	2300      	movs	r3, #0
  423c9c:	4863      	ldr	r0, [pc, #396]	; (423e2c <lv_label_create+0x1c8>)
  423c9e:	4964      	ldr	r1, [pc, #400]	; (423e30 <lv_label_create+0x1cc>)
  423ca0:	4788      	blx	r1
  423ca2:	e7fe      	b.n	423ca2 <lv_label_create+0x3e>
    LV_ASSERT_MEM(new_label);
  423ca4:	4622      	mov	r2, r4
  423ca6:	2300      	movs	r3, #0
  423ca8:	4860      	ldr	r0, [pc, #384]	; (423e2c <lv_label_create+0x1c8>)
  423caa:	4961      	ldr	r1, [pc, #388]	; (423e30 <lv_label_create+0x1cc>)
  423cac:	4788      	blx	r1
  423cae:	e7fe      	b.n	423cae <lv_label_create+0x4a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  423cb0:	4620      	mov	r0, r4
  423cb2:	4b60      	ldr	r3, [pc, #384]	; (423e34 <lv_label_create+0x1d0>)
  423cb4:	4798      	blx	r3
  423cb6:	4b5a      	ldr	r3, [pc, #360]	; (423e20 <lv_label_create+0x1bc>)
  423cb8:	6018      	str	r0, [r3, #0]
  423cba:	e7e2      	b.n	423c82 <lv_label_create+0x1e>
    if(ext == NULL) {
  423cbc:	2d00      	cmp	r5, #0
  423cbe:	d065      	beq.n	423d8c <lv_label_create+0x128>
    ext->text       = NULL;
  423cc0:	2300      	movs	r3, #0
  423cc2:	602b      	str	r3, [r5, #0]
    ext->static_txt = 0;
  423cc4:	7caa      	ldrb	r2, [r5, #18]
    ext->align      = LV_LABEL_ALIGN_AUTO;
  423cc6:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->dot_end    = LV_LABEL_DOT_END_INV;
  423cca:	f64f 71ff 	movw	r1, #65535	; 0xffff
  423cce:	60a9      	str	r1, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
  423cd0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  423cd4:	f363 0202 	bfi	r2, r3, #0, #3
  423cd8:	74aa      	strb	r2, [r5, #18]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  423cda:	2219      	movs	r2, #25
  423cdc:	81aa      	strh	r2, [r5, #12]
    ext->offset.x = 0;
  423cde:	81eb      	strh	r3, [r5, #14]
    ext->offset.y = 0;
  423ce0:	822b      	strh	r3, [r5, #16]
    ext->dot.tmp_ptr   = NULL;
  423ce2:	606b      	str	r3, [r5, #4]
    ext->dot_tmp_alloc = 0;
  423ce4:	7cea      	ldrb	r2, [r5, #19]
  423ce6:	f363 0200 	bfi	r2, r3, #0, #1
  423cea:	74ea      	strb	r2, [r5, #19]
    lv_obj_set_design_cb(new_label, lv_label_design);
  423cec:	4952      	ldr	r1, [pc, #328]	; (423e38 <lv_label_create+0x1d4>)
  423cee:	4620      	mov	r0, r4
  423cf0:	4b52      	ldr	r3, [pc, #328]	; (423e3c <lv_label_create+0x1d8>)
  423cf2:	4798      	blx	r3
    lv_obj_set_signal_cb(new_label, lv_label_signal);
  423cf4:	4952      	ldr	r1, [pc, #328]	; (423e40 <lv_label_create+0x1dc>)
  423cf6:	4620      	mov	r0, r4
  423cf8:	4b52      	ldr	r3, [pc, #328]	; (423e44 <lv_label_create+0x1e0>)
  423cfa:	4798      	blx	r3
    if(copy == NULL) {
  423cfc:	2f00      	cmp	r7, #0
  423cfe:	d04a      	beq.n	423d96 <lv_label_create+0x132>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  423d00:	4638      	mov	r0, r7
  423d02:	4b49      	ldr	r3, [pc, #292]	; (423e28 <lv_label_create+0x1c4>)
  423d04:	4798      	blx	r3
  423d06:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
  423d08:	4638      	mov	r0, r7
  423d0a:	4b4f      	ldr	r3, [pc, #316]	; (423e48 <lv_label_create+0x1e4>)
  423d0c:	4798      	blx	r3
  423d0e:	4601      	mov	r1, r0
  423d10:	4620      	mov	r0, r4
  423d12:	4b4e      	ldr	r3, [pc, #312]	; (423e4c <lv_label_create+0x1e8>)
  423d14:	4798      	blx	r3
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
  423d16:	4638      	mov	r0, r7
  423d18:	4b4d      	ldr	r3, [pc, #308]	; (423e50 <lv_label_create+0x1ec>)
  423d1a:	4798      	blx	r3
  423d1c:	4601      	mov	r1, r0
  423d1e:	4620      	mov	r0, r4
  423d20:	4b4c      	ldr	r3, [pc, #304]	; (423e54 <lv_label_create+0x1f0>)
  423d22:	4798      	blx	r3
        lv_label_set_align(new_label, lv_label_get_align(copy));
  423d24:	4638      	mov	r0, r7
  423d26:	4b4c      	ldr	r3, [pc, #304]	; (423e58 <lv_label_create+0x1f4>)
  423d28:	4798      	blx	r3
  423d2a:	4601      	mov	r1, r0
  423d2c:	4620      	mov	r0, r4
  423d2e:	4b4b      	ldr	r3, [pc, #300]	; (423e5c <lv_label_create+0x1f8>)
  423d30:	4798      	blx	r3
        if(copy_ext->static_txt == 0)
  423d32:	7cb3      	ldrb	r3, [r6, #18]
  423d34:	f013 0f08 	tst.w	r3, #8
  423d38:	d13e      	bne.n	423db8 <lv_label_create+0x154>
            lv_label_set_text(new_label, lv_label_get_text(copy));
  423d3a:	4638      	mov	r0, r7
  423d3c:	4b48      	ldr	r3, [pc, #288]	; (423e60 <lv_label_create+0x1fc>)
  423d3e:	4798      	blx	r3
  423d40:	4601      	mov	r1, r0
  423d42:	4620      	mov	r0, r4
  423d44:	4b47      	ldr	r3, [pc, #284]	; (423e64 <lv_label_create+0x200>)
  423d46:	4798      	blx	r3
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
  423d48:	7cb3      	ldrb	r3, [r6, #18]
  423d4a:	f003 0307 	and.w	r3, r3, #7
  423d4e:	2b02      	cmp	r3, #2
  423d50:	d03a      	beq.n	423dc8 <lv_label_create+0x164>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
  423d52:	7cf3      	ldrb	r3, [r6, #19]
  423d54:	f013 0f01 	tst.w	r3, #1
  423d58:	d055      	beq.n	423e06 <lv_label_create+0x1a2>
  423d5a:	6870      	ldr	r0, [r6, #4]
  423d5c:	2800      	cmp	r0, #0
  423d5e:	d052      	beq.n	423e06 <lv_label_create+0x1a2>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
  423d60:	4b41      	ldr	r3, [pc, #260]	; (423e68 <lv_label_create+0x204>)
  423d62:	4798      	blx	r3
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
  423d64:	4602      	mov	r2, r0
  423d66:	6869      	ldr	r1, [r5, #4]
  423d68:	4620      	mov	r0, r4
  423d6a:	4b40      	ldr	r3, [pc, #256]	; (423e6c <lv_label_create+0x208>)
  423d6c:	4798      	blx	r3
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
  423d6e:	7cf2      	ldrb	r2, [r6, #19]
  423d70:	7ceb      	ldrb	r3, [r5, #19]
  423d72:	f362 0300 	bfi	r3, r2, #0, #1
  423d76:	74eb      	strb	r3, [r5, #19]
        ext->dot_end       = copy_ext->dot_end;
  423d78:	68b3      	ldr	r3, [r6, #8]
  423d7a:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  423d7c:	22ff      	movs	r2, #255	; 0xff
  423d7e:	4611      	mov	r1, r2
  423d80:	4620      	mov	r0, r4
  423d82:	4b3b      	ldr	r3, [pc, #236]	; (423e70 <lv_label_create+0x20c>)
  423d84:	4798      	blx	r3
}
  423d86:	4620      	mov	r0, r4
  423d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(new_label);
  423d8c:	4620      	mov	r0, r4
  423d8e:	4b39      	ldr	r3, [pc, #228]	; (423e74 <lv_label_create+0x210>)
  423d90:	4798      	blx	r3
        return NULL;
  423d92:	2400      	movs	r4, #0
  423d94:	e7f7      	b.n	423d86 <lv_label_create+0x122>
        lv_theme_apply(new_label, LV_THEME_LABEL);
  423d96:	2112      	movs	r1, #18
  423d98:	4620      	mov	r0, r4
  423d9a:	4b37      	ldr	r3, [pc, #220]	; (423e78 <lv_label_create+0x214>)
  423d9c:	4798      	blx	r3
        lv_obj_set_click(new_label, false);
  423d9e:	2100      	movs	r1, #0
  423da0:	4620      	mov	r0, r4
  423da2:	4b36      	ldr	r3, [pc, #216]	; (423e7c <lv_label_create+0x218>)
  423da4:	4798      	blx	r3
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
  423da6:	2100      	movs	r1, #0
  423da8:	4620      	mov	r0, r4
  423daa:	4b28      	ldr	r3, [pc, #160]	; (423e4c <lv_label_create+0x1e8>)
  423dac:	4798      	blx	r3
        lv_label_set_text(new_label, "Text");
  423dae:	4934      	ldr	r1, [pc, #208]	; (423e80 <lv_label_create+0x21c>)
  423db0:	4620      	mov	r0, r4
  423db2:	4b2c      	ldr	r3, [pc, #176]	; (423e64 <lv_label_create+0x200>)
  423db4:	4798      	blx	r3
  423db6:	e7e6      	b.n	423d86 <lv_label_create+0x122>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
  423db8:	4638      	mov	r0, r7
  423dba:	4b29      	ldr	r3, [pc, #164]	; (423e60 <lv_label_create+0x1fc>)
  423dbc:	4798      	blx	r3
  423dbe:	4601      	mov	r1, r0
  423dc0:	4620      	mov	r0, r4
  423dc2:	4b30      	ldr	r3, [pc, #192]	; (423e84 <lv_label_create+0x220>)
  423dc4:	4798      	blx	r3
  423dc6:	e7bf      	b.n	423d48 <lv_label_create+0xe4>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
  423dc8:	682f      	ldr	r7, [r5, #0]
  423dca:	6830      	ldr	r0, [r6, #0]
  423dcc:	4b2e      	ldr	r3, [pc, #184]	; (423e88 <lv_label_create+0x224>)
  423dce:	4798      	blx	r3
  423dd0:	4601      	mov	r1, r0
  423dd2:	4638      	mov	r0, r7
  423dd4:	4b2d      	ldr	r3, [pc, #180]	; (423e8c <lv_label_create+0x228>)
  423dd6:	4798      	blx	r3
  423dd8:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
  423dda:	4b10      	ldr	r3, [pc, #64]	; (423e1c <lv_label_create+0x1b8>)
  423ddc:	4798      	blx	r3
  423dde:	b928      	cbnz	r0, 423dec <lv_label_create+0x188>
  423de0:	682a      	ldr	r2, [r5, #0]
  423de2:	2300      	movs	r3, #0
  423de4:	4811      	ldr	r0, [pc, #68]	; (423e2c <lv_label_create+0x1c8>)
  423de6:	4912      	ldr	r1, [pc, #72]	; (423e30 <lv_label_create+0x1cc>)
  423de8:	4788      	blx	r1
  423dea:	e7fe      	b.n	423dea <lv_label_create+0x186>
            if(ext->text == NULL) return NULL;
  423dec:	682f      	ldr	r7, [r5, #0]
  423dee:	b187      	cbz	r7, 423e12 <lv_label_create+0x1ae>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
  423df0:	f8d6 8000 	ldr.w	r8, [r6]
  423df4:	4640      	mov	r0, r8
  423df6:	4b24      	ldr	r3, [pc, #144]	; (423e88 <lv_label_create+0x224>)
  423df8:	4798      	blx	r3
  423dfa:	4602      	mov	r2, r0
  423dfc:	4641      	mov	r1, r8
  423dfe:	4638      	mov	r0, r7
  423e00:	4b23      	ldr	r3, [pc, #140]	; (423e90 <lv_label_create+0x22c>)
  423e02:	4798      	blx	r3
  423e04:	e7a5      	b.n	423d52 <lv_label_create+0xee>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
  423e06:	2204      	movs	r2, #4
  423e08:	18b1      	adds	r1, r6, r2
  423e0a:	18a8      	adds	r0, r5, r2
  423e0c:	4b20      	ldr	r3, [pc, #128]	; (423e90 <lv_label_create+0x22c>)
  423e0e:	4798      	blx	r3
  423e10:	e7ad      	b.n	423d6e <lv_label_create+0x10a>
            if(ext->text == NULL) return NULL;
  423e12:	2400      	movs	r4, #0
  423e14:	e7b7      	b.n	423d86 <lv_label_create+0x122>
  423e16:	bf00      	nop
  423e18:	00406815 	.word	0x00406815
  423e1c:	00415e79 	.word	0x00415e79
  423e20:	20414878 	.word	0x20414878
  423e24:	00405941 	.word	0x00405941
  423e28:	00408095 	.word	0x00408095
  423e2c:	0042c154 	.word	0x0042c154
  423e30:	00415e85 	.word	0x00415e85
  423e34:	00408045 	.word	0x00408045
  423e38:	00423075 	.word	0x00423075
  423e3c:	00405919 	.word	0x00405919
  423e40:	00423869 	.word	0x00423869
  423e44:	004058dd 	.word	0x004058dd
  423e48:	00422cf1 	.word	0x00422cf1
  423e4c:	00423b5d 	.word	0x00423b5d
  423e50:	00422d61 	.word	0x00422d61
  423e54:	00423c11 	.word	0x00423c11
  423e58:	00422d25 	.word	0x00422d25
  423e5c:	00422c75 	.word	0x00422c75
  423e60:	00422cc1 	.word	0x00422cc1
  423e64:	00423961 	.word	0x00423961
  423e68:	00428001 	.word	0x00428001
  423e6c:	00422bd5 	.word	0x00422bd5
  423e70:	00407861 	.word	0x00407861
  423e74:	004081f5 	.word	0x004081f5
  423e78:	004182f9 	.word	0x004182f9
  423e7c:	0040571d 	.word	0x0040571d
  423e80:	0042f8dc 	.word	0x0042f8dc
  423e84:	00423afd 	.word	0x00423afd
  423e88:	004166f5 	.word	0x004166f5
  423e8c:	004168ed 	.word	0x004168ed
  423e90:	004167cd 	.word	0x004167cd

00423e94 <lv_msgbox_close_ready_cb>:
    }
}

#if LV_USE_ANIMATION
static void lv_msgbox_close_ready_cb(lv_anim_t * a)
{
  423e94:	b508      	push	{r3, lr}
    lv_obj_del(a->var);
  423e96:	6800      	ldr	r0, [r0, #0]
  423e98:	4b01      	ldr	r3, [pc, #4]	; (423ea0 <lv_msgbox_close_ready_cb+0xc>)
  423e9a:	4798      	blx	r3
  423e9c:	bd08      	pop	{r3, pc}
  423e9e:	bf00      	nop
  423ea0:	004081f5 	.word	0x004081f5

00423ea4 <lv_msgbox_get_style>:
{
  423ea4:	b538      	push	{r3, r4, r5, lr}
  423ea6:	4604      	mov	r4, r0
  423ea8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  423eaa:	4b13      	ldr	r3, [pc, #76]	; (423ef8 <lv_msgbox_get_style+0x54>)
  423eac:	4798      	blx	r3
  423eae:	b928      	cbnz	r0, 423ebc <lv_msgbox_get_style+0x18>
  423eb0:	4622      	mov	r2, r4
  423eb2:	2300      	movs	r3, #0
  423eb4:	4811      	ldr	r0, [pc, #68]	; (423efc <lv_msgbox_get_style+0x58>)
  423eb6:	4912      	ldr	r1, [pc, #72]	; (423f00 <lv_msgbox_get_style+0x5c>)
  423eb8:	4788      	blx	r1
  423eba:	e7fe      	b.n	423eba <lv_msgbox_get_style+0x16>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  423ebc:	4620      	mov	r0, r4
  423ebe:	4b11      	ldr	r3, [pc, #68]	; (423f04 <lv_msgbox_get_style+0x60>)
  423ec0:	4798      	blx	r3
    switch(part) {
  423ec2:	2d40      	cmp	r5, #64	; 0x40
  423ec4:	d007      	beq.n	423ed6 <lv_msgbox_get_style+0x32>
  423ec6:	2d41      	cmp	r5, #65	; 0x41
  423ec8:	d00b      	beq.n	423ee2 <lv_msgbox_get_style+0x3e>
  423eca:	b10d      	cbz	r5, 423ed0 <lv_msgbox_get_style+0x2c>
            style_dsc_p = NULL;
  423ecc:	2000      	movs	r0, #0
  423ece:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &mbox->style_list;
  423ed0:	f104 0028 	add.w	r0, r4, #40	; 0x28
            break;
  423ed4:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BG) : NULL;
  423ed6:	6880      	ldr	r0, [r0, #8]
  423ed8:	b148      	cbz	r0, 423eee <lv_msgbox_get_style+0x4a>
  423eda:	2100      	movs	r1, #0
  423edc:	4b0a      	ldr	r3, [pc, #40]	; (423f08 <lv_msgbox_get_style+0x64>)
  423ede:	4798      	blx	r3
  423ee0:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BTN) : NULL;
  423ee2:	6880      	ldr	r0, [r0, #8]
  423ee4:	b128      	cbz	r0, 423ef2 <lv_msgbox_get_style+0x4e>
  423ee6:	2101      	movs	r1, #1
  423ee8:	4b07      	ldr	r3, [pc, #28]	; (423f08 <lv_msgbox_get_style+0x64>)
  423eea:	4798      	blx	r3
  423eec:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BG) : NULL;
  423eee:	2000      	movs	r0, #0
  423ef0:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BTN) : NULL;
  423ef2:	2000      	movs	r0, #0
}
  423ef4:	bd38      	pop	{r3, r4, r5, pc}
  423ef6:	bf00      	nop
  423ef8:	00415e79 	.word	0x00415e79
  423efc:	0042c168 	.word	0x0042c168
  423f00:	00415e85 	.word	0x00415e85
  423f04:	00408095 	.word	0x00408095
  423f08:	00405c0d 	.word	0x00405c0d

00423f0c <mbox_realign>:
{
  423f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  423f10:	b083      	sub	sp, #12
  423f12:	4683      	mov	fp, r0
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  423f14:	4b2b      	ldr	r3, [pc, #172]	; (423fc4 <mbox_realign+0xb8>)
  423f16:	4798      	blx	r3
  423f18:	4604      	mov	r4, r0
    lv_coord_t w = lv_obj_get_width_fit(mbox);
  423f1a:	4658      	mov	r0, fp
  423f1c:	4b2a      	ldr	r3, [pc, #168]	; (423fc8 <mbox_realign+0xbc>)
  423f1e:	4798      	blx	r3
  423f20:	9001      	str	r0, [sp, #4]
    if(ext->text) {
  423f22:	6860      	ldr	r0, [r4, #4]
  423f24:	b110      	cbz	r0, 423f2c <mbox_realign+0x20>
        lv_obj_set_width(ext->text, w);
  423f26:	9901      	ldr	r1, [sp, #4]
  423f28:	4b28      	ldr	r3, [pc, #160]	; (423fcc <mbox_realign+0xc0>)
  423f2a:	4798      	blx	r3
    if(ext->btnm) {
  423f2c:	68a3      	ldr	r3, [r4, #8]
  423f2e:	2b00      	cmp	r3, #0
  423f30:	d045      	beq.n	423fbe <mbox_realign+0xb2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  423f32:	2210      	movs	r2, #16
  423f34:	2140      	movs	r1, #64	; 0x40
  423f36:	4658      	mov	r0, fp
  423f38:	4d25      	ldr	r5, [pc, #148]	; (423fd0 <mbox_realign+0xc4>)
  423f3a:	47a8      	blx	r5
  423f3c:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  423f3e:	2211      	movs	r2, #17
  423f40:	2140      	movs	r1, #64	; 0x40
  423f42:	4658      	mov	r0, fp
  423f44:	47a8      	blx	r5
  423f46:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  423f48:	2214      	movs	r2, #20
  423f4a:	2140      	movs	r1, #64	; 0x40
  423f4c:	4658      	mov	r0, fp
  423f4e:	47a8      	blx	r5
  423f50:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  423f52:	2210      	movs	r2, #16
  423f54:	2141      	movs	r1, #65	; 0x41
  423f56:	4658      	mov	r0, fp
  423f58:	47a8      	blx	r5
  423f5a:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  423f5c:	2211      	movs	r2, #17
  423f5e:	2141      	movs	r1, #65	; 0x41
  423f60:	4658      	mov	r0, fp
  423f62:	47a8      	blx	r5
  423f64:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  423f66:	f248 028e 	movw	r2, #32910	; 0x808e
  423f6a:	2141      	movs	r1, #65	; 0x41
  423f6c:	4658      	mov	r0, fp
  423f6e:	4b19      	ldr	r3, [pc, #100]	; (423fd4 <mbox_realign+0xc8>)
  423f70:	4798      	blx	r3
  423f72:	4683      	mov	fp, r0
        const char ** btnm_map = lv_btnmatrix_get_map_array(ext->btnm);
  423f74:	68a0      	ldr	r0, [r4, #8]
  423f76:	4b18      	ldr	r3, [pc, #96]	; (423fd8 <mbox_realign+0xcc>)
  423f78:	4798      	blx	r3
        for(i = 0; btnm_map[i][0] != '\0'; i++) {
  423f7a:	2300      	movs	r3, #0
        uint16_t btnm_lines = 1;
  423f7c:	2101      	movs	r1, #1
        for(i = 0; btnm_map[i][0] != '\0'; i++) {
  423f7e:	e001      	b.n	423f84 <mbox_realign+0x78>
  423f80:	3301      	adds	r3, #1
  423f82:	b29b      	uxth	r3, r3
  423f84:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  423f88:	7812      	ldrb	r2, [r2, #0]
  423f8a:	b122      	cbz	r2, 423f96 <mbox_realign+0x8a>
            if(btnm_map[i][0] == '\n') btnm_lines++;
  423f8c:	2a0a      	cmp	r2, #10
  423f8e:	d1f7      	bne.n	423f80 <mbox_realign+0x74>
  423f90:	3101      	adds	r1, #1
  423f92:	b289      	uxth	r1, r1
  423f94:	e7f4      	b.n	423f80 <mbox_realign+0x74>
  423f96:	f9bb 2008 	ldrsh.w	r2, [fp, #8]
        lv_coord_t btn_h = font_h + btn_top + btn_bottom;
  423f9a:	4452      	add	r2, sl
  423f9c:	fa19 f282 	uxtah	r2, r9, r2
        lv_obj_set_size(ext->btnm, w, btn_h * btnm_lines + bg_inner * (btnm_lines - 1) + bg_top + bg_bottom);
  423fa0:	f101 39ff 	add.w	r9, r1, #4294967295
  423fa4:	fb19 f808 	smulbb	r8, r9, r8
  423fa8:	fb11 8202 	smlabb	r2, r1, r2, r8
  423fac:	fa17 f282 	uxtah	r2, r7, r2
  423fb0:	fa16 f282 	uxtah	r2, r6, r2
  423fb4:	b212      	sxth	r2, r2
  423fb6:	9901      	ldr	r1, [sp, #4]
  423fb8:	68a0      	ldr	r0, [r4, #8]
  423fba:	4b08      	ldr	r3, [pc, #32]	; (423fdc <mbox_realign+0xd0>)
  423fbc:	4798      	blx	r3
}
  423fbe:	b003      	add	sp, #12
  423fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423fc4:	00408095 	.word	0x00408095
  423fc8:	00407681 	.word	0x00407681
  423fcc:	00406d2d 	.word	0x00406d2d
  423fd0:	00407445 	.word	0x00407445
  423fd4:	0040733d 	.word	0x0040733d
  423fd8:	0041e719 	.word	0x0041e719
  423fdc:	00406c39 	.word	0x00406c39

00423fe0 <lv_msgbox_signal>:
{
  423fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  423fe4:	b082      	sub	sp, #8
  423fe6:	4607      	mov	r7, r0
  423fe8:	460c      	mov	r4, r1
  423fea:	4615      	mov	r5, r2
    char c_trans = 0;
  423fec:	2300      	movs	r3, #0
  423fee:	f88d 3007 	strb.w	r3, [sp, #7]
    if(sign == LV_SIGNAL_CONTROL) {
  423ff2:	2918      	cmp	r1, #24
  423ff4:	d010      	beq.n	424018 <lv_msgbox_signal+0x38>
    if(sign == LV_SIGNAL_GET_STYLE) {
  423ff6:	2c08      	cmp	r4, #8
  423ff8:	d023      	beq.n	424042 <lv_msgbox_signal+0x62>
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
  423ffa:	2c09      	cmp	r4, #9
  423ffc:	d031      	beq.n	424062 <lv_msgbox_signal+0x82>
    res = ancestor_signal(mbox, sign, param);
  423ffe:	4b6e      	ldr	r3, [pc, #440]	; (4241b8 <lv_msgbox_signal+0x1d8>)
  424000:	681b      	ldr	r3, [r3, #0]
  424002:	462a      	mov	r2, r5
  424004:	4621      	mov	r1, r4
  424006:	4638      	mov	r0, r7
  424008:	4798      	blx	r3
  42400a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  42400c:	2801      	cmp	r0, #1
  42400e:	d044      	beq.n	42409a <lv_msgbox_signal+0xba>
}
  424010:	4630      	mov	r0, r6
  424012:	b002      	add	sp, #8
  424014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        c_trans = *((char *)param);
  424018:	7813      	ldrb	r3, [r2, #0]
  42401a:	f88d 3007 	strb.w	r3, [sp, #7]
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
  42401e:	2b12      	cmp	r3, #18
  424020:	d006      	beq.n	424030 <lv_msgbox_signal+0x50>
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
  424022:	f89d 3007 	ldrb.w	r3, [sp, #7]
  424026:	2b11      	cmp	r3, #17
  424028:	d006      	beq.n	424038 <lv_msgbox_signal+0x58>
        param = &c_trans;
  42402a:	f10d 0507 	add.w	r5, sp, #7
  42402e:	e7e2      	b.n	423ff6 <lv_msgbox_signal+0x16>
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
  424030:	2314      	movs	r3, #20
  424032:	f88d 3007 	strb.w	r3, [sp, #7]
  424036:	e7f4      	b.n	424022 <lv_msgbox_signal+0x42>
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
  424038:	ad02      	add	r5, sp, #8
  42403a:	2313      	movs	r3, #19
  42403c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  424040:	e7d9      	b.n	423ff6 <lv_msgbox_signal+0x16>
        info->result = lv_msgbox_get_style(mbox, info->part);
  424042:	7829      	ldrb	r1, [r5, #0]
  424044:	4638      	mov	r0, r7
  424046:	4b5d      	ldr	r3, [pc, #372]	; (4241bc <lv_msgbox_signal+0x1dc>)
  424048:	4798      	blx	r3
  42404a:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  42404c:	b108      	cbz	r0, 424052 <lv_msgbox_signal+0x72>
  42404e:	2601      	movs	r6, #1
  424050:	e7de      	b.n	424010 <lv_msgbox_signal+0x30>
        else return ancestor_signal(mbox, sign, param);
  424052:	4b59      	ldr	r3, [pc, #356]	; (4241b8 <lv_msgbox_signal+0x1d8>)
  424054:	681b      	ldr	r3, [r3, #0]
  424056:	462a      	mov	r2, r5
  424058:	4621      	mov	r1, r4
  42405a:	4638      	mov	r0, r7
  42405c:	4798      	blx	r3
  42405e:	4606      	mov	r6, r0
  424060:	e7d6      	b.n	424010 <lv_msgbox_signal+0x30>
        lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  424062:	4638      	mov	r0, r7
  424064:	4b56      	ldr	r3, [pc, #344]	; (4241c0 <lv_msgbox_signal+0x1e0>)
  424066:	4798      	blx	r3
        if(ext->btnm && info->part == LV_MSGBOX_PART_BTN_BG) {
  424068:	6880      	ldr	r0, [r0, #8]
  42406a:	b110      	cbz	r0, 424072 <lv_msgbox_signal+0x92>
  42406c:	782b      	ldrb	r3, [r5, #0]
  42406e:	2b40      	cmp	r3, #64	; 0x40
  424070:	d007      	beq.n	424082 <lv_msgbox_signal+0xa2>
        else if(ext->btnm && info->part == LV_MSGBOX_PART_BTN) {
  424072:	2800      	cmp	r0, #0
  424074:	f000 809e 	beq.w	4241b4 <lv_msgbox_signal+0x1d4>
  424078:	782b      	ldrb	r3, [r5, #0]
  42407a:	2b41      	cmp	r3, #65	; 0x41
  42407c:	d007      	beq.n	42408e <lv_msgbox_signal+0xae>
        return LV_RES_OK;
  42407e:	2601      	movs	r6, #1
  424080:	e7c6      	b.n	424010 <lv_msgbox_signal+0x30>
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BG);
  424082:	2100      	movs	r1, #0
  424084:	4b4f      	ldr	r3, [pc, #316]	; (4241c4 <lv_msgbox_signal+0x1e4>)
  424086:	4798      	blx	r3
  424088:	7068      	strb	r0, [r5, #1]
        return LV_RES_OK;
  42408a:	2601      	movs	r6, #1
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BG);
  42408c:	e7c0      	b.n	424010 <lv_msgbox_signal+0x30>
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BTN);
  42408e:	2101      	movs	r1, #1
  424090:	4b4c      	ldr	r3, [pc, #304]	; (4241c4 <lv_msgbox_signal+0x1e4>)
  424092:	4798      	blx	r3
  424094:	7068      	strb	r0, [r5, #1]
        return LV_RES_OK;
  424096:	2601      	movs	r6, #1
  424098:	e7ba      	b.n	424010 <lv_msgbox_signal+0x30>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  42409a:	2c07      	cmp	r4, #7
  42409c:	d039      	beq.n	424112 <lv_msgbox_signal+0x132>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  42409e:	4638      	mov	r0, r7
  4240a0:	4b47      	ldr	r3, [pc, #284]	; (4241c0 <lv_msgbox_signal+0x1e0>)
  4240a2:	4798      	blx	r3
  4240a4:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_COORD_CHG) {
  4240a6:	2c02      	cmp	r4, #2
  4240a8:	d039      	beq.n	42411e <lv_msgbox_signal+0x13e>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  4240aa:	2c04      	cmp	r4, #4
  4240ac:	d047      	beq.n	42413e <lv_msgbox_signal+0x15e>
    else if(sign == LV_SIGNAL_RELEASED) {
  4240ae:	2c0e      	cmp	r4, #14
  4240b0:	d049      	beq.n	424146 <lv_msgbox_signal+0x166>
        sign == LV_SIGNAL_CONTROL || sign == LV_SIGNAL_GET_EDITABLE ||
  4240b2:	f1a4 0318 	sub.w	r3, r4, #24
  4240b6:	b2db      	uxtb	r3, r3
    else if(
  4240b8:	2c16      	cmp	r4, #22
  4240ba:	bf18      	it	ne
  4240bc:	2b01      	cmpne	r3, #1
  4240be:	d901      	bls.n	4240c4 <lv_msgbox_signal+0xe4>
        sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS) {
  4240c0:	2c17      	cmp	r4, #23
  4240c2:	d1a5      	bne.n	424010 <lv_msgbox_signal+0x30>
        if(ext->btnm) {
  4240c4:	f8d8 0008 	ldr.w	r0, [r8, #8]
  4240c8:	b118      	cbz	r0, 4240d2 <lv_msgbox_signal+0xf2>
            ext->btnm->signal_cb(ext->btnm, sign, param);
  4240ca:	69c3      	ldr	r3, [r0, #28]
  4240cc:	462a      	mov	r2, r5
  4240ce:	4621      	mov	r1, r4
  4240d0:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
  4240d2:	2c16      	cmp	r4, #22
  4240d4:	d049      	beq.n	42416a <lv_msgbox_signal+0x18a>
        if(ext->btnm && (sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS)) {
  4240d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4240da:	2b00      	cmp	r3, #0
  4240dc:	d098      	beq.n	424010 <lv_msgbox_signal+0x30>
  4240de:	3c16      	subs	r4, #22
  4240e0:	b2e4      	uxtb	r4, r4
  4240e2:	2c01      	cmp	r4, #1
  4240e4:	d894      	bhi.n	424010 <lv_msgbox_signal+0x30>
            lv_state_t state = lv_obj_get_state(mbox, LV_MSGBOX_PART_BG);
  4240e6:	2100      	movs	r1, #0
  4240e8:	4638      	mov	r0, r7
  4240ea:	4b36      	ldr	r3, [pc, #216]	; (4241c4 <lv_msgbox_signal+0x1e4>)
  4240ec:	4798      	blx	r3
  4240ee:	4604      	mov	r4, r0
            if(state & LV_STATE_FOCUSED) {
  4240f0:	f010 0f02 	tst.w	r0, #2
  4240f4:	d052      	beq.n	42419c <lv_msgbox_signal+0x1bc>
                lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED);
  4240f6:	2102      	movs	r1, #2
  4240f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
  4240fc:	4b32      	ldr	r3, [pc, #200]	; (4241c8 <lv_msgbox_signal+0x1e8>)
  4240fe:	4798      	blx	r3
            if(state & LV_STATE_EDITED) {
  424100:	f014 0f04 	tst.w	r4, #4
  424104:	d150      	bne.n	4241a8 <lv_msgbox_signal+0x1c8>
                lv_obj_clear_state(ext->btnm, LV_STATE_EDITED);
  424106:	2104      	movs	r1, #4
  424108:	f8d8 0008 	ldr.w	r0, [r8, #8]
  42410c:	4b2f      	ldr	r3, [pc, #188]	; (4241cc <lv_msgbox_signal+0x1ec>)
  42410e:	4798      	blx	r3
  424110:	e77e      	b.n	424010 <lv_msgbox_signal+0x30>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  424112:	492f      	ldr	r1, [pc, #188]	; (4241d0 <lv_msgbox_signal+0x1f0>)
  424114:	4628      	mov	r0, r5
  424116:	4b2f      	ldr	r3, [pc, #188]	; (4241d4 <lv_msgbox_signal+0x1f4>)
  424118:	4798      	blx	r3
  42411a:	4606      	mov	r6, r0
  42411c:	e778      	b.n	424010 <lv_msgbox_signal+0x30>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
  42411e:	4638      	mov	r0, r7
  424120:	4b2d      	ldr	r3, [pc, #180]	; (4241d8 <lv_msgbox_signal+0x1f8>)
  424122:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  424124:	88ab      	ldrh	r3, [r5, #4]
  424126:	882a      	ldrh	r2, [r5, #0]
  424128:	1a9b      	subs	r3, r3, r2
  42412a:	b29b      	uxth	r3, r3
  42412c:	3301      	adds	r3, #1
  42412e:	b21b      	sxth	r3, r3
  424130:	4298      	cmp	r0, r3
  424132:	f43f af6d 	beq.w	424010 <lv_msgbox_signal+0x30>
            mbox_realign(mbox);
  424136:	4638      	mov	r0, r7
  424138:	4b28      	ldr	r3, [pc, #160]	; (4241dc <lv_msgbox_signal+0x1fc>)
  42413a:	4798      	blx	r3
  42413c:	e768      	b.n	424010 <lv_msgbox_signal+0x30>
        mbox_realign(mbox);
  42413e:	4638      	mov	r0, r7
  424140:	4b26      	ldr	r3, [pc, #152]	; (4241dc <lv_msgbox_signal+0x1fc>)
  424142:	4798      	blx	r3
  424144:	e764      	b.n	424010 <lv_msgbox_signal+0x30>
        if(ext->btnm) {
  424146:	6880      	ldr	r0, [r0, #8]
  424148:	2800      	cmp	r0, #0
  42414a:	f43f af61 	beq.w	424010 <lv_msgbox_signal+0x30>
            uint32_t btn_id = lv_btnmatrix_get_focused_btn(ext->btnm);
  42414e:	4b24      	ldr	r3, [pc, #144]	; (4241e0 <lv_msgbox_signal+0x200>)
  424150:	4798      	blx	r3
  424152:	9000      	str	r0, [sp, #0]
            if(btn_id != LV_BTNMATRIX_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
  424154:	f64f 73ff 	movw	r3, #65535	; 0xffff
  424158:	4298      	cmp	r0, r3
  42415a:	f43f af59 	beq.w	424010 <lv_msgbox_signal+0x30>
  42415e:	466a      	mov	r2, sp
  424160:	2110      	movs	r1, #16
  424162:	4638      	mov	r0, r7
  424164:	4b1f      	ldr	r3, [pc, #124]	; (4241e4 <lv_msgbox_signal+0x204>)
  424166:	4798      	blx	r3
  424168:	e752      	b.n	424010 <lv_msgbox_signal+0x30>
            lv_indev_t * indev         = lv_indev_get_act();
  42416a:	4b1f      	ldr	r3, [pc, #124]	; (4241e8 <lv_msgbox_signal+0x208>)
  42416c:	4798      	blx	r3
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
  42416e:	4b1f      	ldr	r3, [pc, #124]	; (4241ec <lv_msgbox_signal+0x20c>)
  424170:	4798      	blx	r3
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
  424172:	2804      	cmp	r0, #4
  424174:	d1af      	bne.n	4240d6 <lv_msgbox_signal+0xf6>
                if(lv_group_get_editing(lv_obj_get_group(mbox))) lv_btnmatrix_set_focused_btn(ext->btnm, 0);
  424176:	4638      	mov	r0, r7
  424178:	4b1d      	ldr	r3, [pc, #116]	; (4241f0 <lv_msgbox_signal+0x210>)
  42417a:	4798      	blx	r3
  42417c:	4b1d      	ldr	r3, [pc, #116]	; (4241f4 <lv_msgbox_signal+0x214>)
  42417e:	4798      	blx	r3
  424180:	b128      	cbz	r0, 42418e <lv_msgbox_signal+0x1ae>
  424182:	2100      	movs	r1, #0
  424184:	f8d8 0008 	ldr.w	r0, [r8, #8]
  424188:	4b1b      	ldr	r3, [pc, #108]	; (4241f8 <lv_msgbox_signal+0x218>)
  42418a:	4798      	blx	r3
  42418c:	e7a3      	b.n	4240d6 <lv_msgbox_signal+0xf6>
                else lv_btnmatrix_set_focused_btn(ext->btnm, LV_BTNMATRIX_BTN_NONE);
  42418e:	f64f 71ff 	movw	r1, #65535	; 0xffff
  424192:	f8d8 0008 	ldr.w	r0, [r8, #8]
  424196:	4b18      	ldr	r3, [pc, #96]	; (4241f8 <lv_msgbox_signal+0x218>)
  424198:	4798      	blx	r3
  42419a:	e79c      	b.n	4240d6 <lv_msgbox_signal+0xf6>
                lv_obj_clear_state(ext->btnm, LV_STATE_FOCUSED);
  42419c:	2102      	movs	r1, #2
  42419e:	f8d8 0008 	ldr.w	r0, [r8, #8]
  4241a2:	4b0a      	ldr	r3, [pc, #40]	; (4241cc <lv_msgbox_signal+0x1ec>)
  4241a4:	4798      	blx	r3
  4241a6:	e7ab      	b.n	424100 <lv_msgbox_signal+0x120>
                lv_obj_set_state(ext->btnm, LV_STATE_EDITED);
  4241a8:	2104      	movs	r1, #4
  4241aa:	f8d8 0008 	ldr.w	r0, [r8, #8]
  4241ae:	4b06      	ldr	r3, [pc, #24]	; (4241c8 <lv_msgbox_signal+0x1e8>)
  4241b0:	4798      	blx	r3
  4241b2:	e72d      	b.n	424010 <lv_msgbox_signal+0x30>
        return LV_RES_OK;
  4241b4:	2601      	movs	r6, #1
  4241b6:	e72b      	b.n	424010 <lv_msgbox_signal+0x30>
  4241b8:	2041487c 	.word	0x2041487c
  4241bc:	00423ea5 	.word	0x00423ea5
  4241c0:	00408095 	.word	0x00408095
  4241c4:	00406de1 	.word	0x00406de1
  4241c8:	00408d95 	.word	0x00408d95
  4241cc:	00408fed 	.word	0x00408fed
  4241d0:	0042f8f8 	.word	0x0042f8f8
  4241d4:	00408321 	.word	0x00408321
  4241d8:	00405b81 	.word	0x00405b81
  4241dc:	00423f0d 	.word	0x00423f0d
  4241e0:	0041e779 	.word	0x0041e779
  4241e4:	0040589d 	.word	0x0040589d
  4241e8:	00404c51 	.word	0x00404c51
  4241ec:	00404c5d 	.word	0x00404c5d
  4241f0:	004080bd 	.word	0x004080bd
  4241f4:	00403ae1 	.word	0x00403ae1
  4241f8:	0041e5a5 	.word	0x0041e5a5

004241fc <lv_msgbox_create>:
{
  4241fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4241fe:	b083      	sub	sp, #12
  424200:	4607      	mov	r7, r0
  424202:	460e      	mov	r6, r1
    lv_obj_t * mbox = lv_cont_create(par, copy);
  424204:	4b60      	ldr	r3, [pc, #384]	; (424388 <lv_msgbox_create+0x18c>)
  424206:	4798      	blx	r3
  424208:	4604      	mov	r4, r0
    LV_ASSERT_MEM(mbox);
  42420a:	4b60      	ldr	r3, [pc, #384]	; (42438c <lv_msgbox_create+0x190>)
  42420c:	4798      	blx	r3
  42420e:	b190      	cbz	r0, 424236 <lv_msgbox_create+0x3a>
    if(mbox == NULL) return NULL;
  424210:	2c00      	cmp	r4, #0
  424212:	d03b      	beq.n	42428c <lv_msgbox_create+0x90>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(mbox);
  424214:	4b5e      	ldr	r3, [pc, #376]	; (424390 <lv_msgbox_create+0x194>)
  424216:	681b      	ldr	r3, [r3, #0]
  424218:	b19b      	cbz	r3, 424242 <lv_msgbox_create+0x46>
    lv_msgbox_ext_t * ext = lv_obj_allocate_ext_attr(mbox, sizeof(lv_msgbox_ext_t));
  42421a:	2110      	movs	r1, #16
  42421c:	4620      	mov	r0, r4
  42421e:	4b5d      	ldr	r3, [pc, #372]	; (424394 <lv_msgbox_create+0x198>)
  424220:	4798      	blx	r3
  424222:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  424224:	4b59      	ldr	r3, [pc, #356]	; (42438c <lv_msgbox_create+0x190>)
  424226:	4798      	blx	r3
  424228:	b988      	cbnz	r0, 42424e <lv_msgbox_create+0x52>
  42422a:	462a      	mov	r2, r5
  42422c:	2300      	movs	r3, #0
  42422e:	485a      	ldr	r0, [pc, #360]	; (424398 <lv_msgbox_create+0x19c>)
  424230:	495a      	ldr	r1, [pc, #360]	; (42439c <lv_msgbox_create+0x1a0>)
  424232:	4788      	blx	r1
  424234:	e7fe      	b.n	424234 <lv_msgbox_create+0x38>
    LV_ASSERT_MEM(mbox);
  424236:	4622      	mov	r2, r4
  424238:	2300      	movs	r3, #0
  42423a:	4857      	ldr	r0, [pc, #348]	; (424398 <lv_msgbox_create+0x19c>)
  42423c:	4957      	ldr	r1, [pc, #348]	; (42439c <lv_msgbox_create+0x1a0>)
  42423e:	4788      	blx	r1
  424240:	e7fe      	b.n	424240 <lv_msgbox_create+0x44>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(mbox);
  424242:	4620      	mov	r0, r4
  424244:	4b56      	ldr	r3, [pc, #344]	; (4243a0 <lv_msgbox_create+0x1a4>)
  424246:	4798      	blx	r3
  424248:	4b51      	ldr	r3, [pc, #324]	; (424390 <lv_msgbox_create+0x194>)
  42424a:	6018      	str	r0, [r3, #0]
  42424c:	e7e5      	b.n	42421a <lv_msgbox_create+0x1e>
    if(ext == NULL) {
  42424e:	b305      	cbz	r5, 424292 <lv_msgbox_create+0x96>
    ext->text = NULL;
  424250:	2300      	movs	r3, #0
  424252:	606b      	str	r3, [r5, #4]
    ext->btnm = NULL;
  424254:	60ab      	str	r3, [r5, #8]
    ext->anim_time = LV_MSGBOX_CLOSE_ANIM_TIME;
  424256:	23c8      	movs	r3, #200	; 0xc8
  424258:	81ab      	strh	r3, [r5, #12]
    lv_obj_set_signal_cb(mbox, lv_msgbox_signal);
  42425a:	4952      	ldr	r1, [pc, #328]	; (4243a4 <lv_msgbox_create+0x1a8>)
  42425c:	4620      	mov	r0, r4
  42425e:	4b52      	ldr	r3, [pc, #328]	; (4243a8 <lv_msgbox_create+0x1ac>)
  424260:	4798      	blx	r3
    if(copy == NULL) {
  424262:	b1de      	cbz	r6, 42429c <lv_msgbox_create+0xa0>
        lv_msgbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  424264:	4630      	mov	r0, r6
  424266:	4b51      	ldr	r3, [pc, #324]	; (4243ac <lv_msgbox_create+0x1b0>)
  424268:	4798      	blx	r3
  42426a:	4606      	mov	r6, r0
        ext->text = lv_label_create(mbox, copy_ext->text);
  42426c:	6841      	ldr	r1, [r0, #4]
  42426e:	4620      	mov	r0, r4
  424270:	4b4f      	ldr	r3, [pc, #316]	; (4243b0 <lv_msgbox_create+0x1b4>)
  424272:	4798      	blx	r3
  424274:	6068      	str	r0, [r5, #4]
        if(copy_ext->btnm) ext->btnm = lv_btnmatrix_create(mbox, copy_ext->btnm);
  424276:	68b1      	ldr	r1, [r6, #8]
  424278:	b119      	cbz	r1, 424282 <lv_msgbox_create+0x86>
  42427a:	4620      	mov	r0, r4
  42427c:	4b4d      	ldr	r3, [pc, #308]	; (4243b4 <lv_msgbox_create+0x1b8>)
  42427e:	4798      	blx	r3
  424280:	60a8      	str	r0, [r5, #8]
        lv_obj_refresh_style(mbox, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  424282:	22ff      	movs	r2, #255	; 0xff
  424284:	4611      	mov	r1, r2
  424286:	4620      	mov	r0, r4
  424288:	4b4b      	ldr	r3, [pc, #300]	; (4243b8 <lv_msgbox_create+0x1bc>)
  42428a:	4798      	blx	r3
}
  42428c:	4620      	mov	r0, r4
  42428e:	b003      	add	sp, #12
  424290:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_del(mbox);
  424292:	4620      	mov	r0, r4
  424294:	4b49      	ldr	r3, [pc, #292]	; (4243bc <lv_msgbox_create+0x1c0>)
  424296:	4798      	blx	r3
        return NULL;
  424298:	2400      	movs	r4, #0
  42429a:	e7f7      	b.n	42428c <lv_msgbox_create+0x90>
        ext->text = lv_label_create(mbox, NULL);
  42429c:	2100      	movs	r1, #0
  42429e:	4620      	mov	r0, r4
  4242a0:	4b43      	ldr	r3, [pc, #268]	; (4243b0 <lv_msgbox_create+0x1b4>)
  4242a2:	4798      	blx	r3
  4242a4:	6068      	str	r0, [r5, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
  4242a6:	2101      	movs	r1, #1
  4242a8:	4b45      	ldr	r3, [pc, #276]	; (4243c0 <lv_msgbox_create+0x1c4>)
  4242aa:	4798      	blx	r3
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
  4242ac:	2101      	movs	r1, #1
  4242ae:	6868      	ldr	r0, [r5, #4]
  4242b0:	4b44      	ldr	r3, [pc, #272]	; (4243c4 <lv_msgbox_create+0x1c8>)
  4242b2:	4798      	blx	r3
        lv_label_set_text(ext->text, "Message");
  4242b4:	4944      	ldr	r1, [pc, #272]	; (4243c8 <lv_msgbox_create+0x1cc>)
  4242b6:	6868      	ldr	r0, [r5, #4]
  4242b8:	4b44      	ldr	r3, [pc, #272]	; (4243cc <lv_msgbox_create+0x1d0>)
  4242ba:	4798      	blx	r3
        lv_cont_set_layout(mbox, LV_LAYOUT_COLUMN_MID);
  4242bc:	2103      	movs	r1, #3
  4242be:	4620      	mov	r0, r4
  4242c0:	4b43      	ldr	r3, [pc, #268]	; (4243d0 <lv_msgbox_create+0x1d4>)
  4242c2:	4798      	blx	r3
 * @param hor horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
  4242c4:	2301      	movs	r3, #1
  4242c6:	9300      	str	r3, [sp, #0]
  4242c8:	2200      	movs	r2, #0
  4242ca:	4611      	mov	r1, r2
  4242cc:	4620      	mov	r0, r4
  4242ce:	4d41      	ldr	r5, [pc, #260]	; (4243d4 <lv_msgbox_create+0x1d8>)
  4242d0:	47a8      	blx	r5
        lv_coord_t fit_w = lv_obj_get_width_fit(par);
  4242d2:	4638      	mov	r0, r7
  4242d4:	4b40      	ldr	r3, [pc, #256]	; (4243d8 <lv_msgbox_create+0x1dc>)
  4242d6:	4798      	blx	r3
  4242d8:	4605      	mov	r5, r0
        if(lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_SMALL) {
  4242da:	2000      	movs	r0, #0
  4242dc:	4b3f      	ldr	r3, [pc, #252]	; (4243dc <lv_msgbox_create+0x1e0>)
  4242de:	4798      	blx	r3
  4242e0:	b998      	cbnz	r0, 42430a <lv_msgbox_create+0x10e>
            lv_obj_set_width(mbox, fit_w);
  4242e2:	4629      	mov	r1, r5
  4242e4:	4620      	mov	r0, r4
  4242e6:	4b3e      	ldr	r3, [pc, #248]	; (4243e0 <lv_msgbox_create+0x1e4>)
  4242e8:	4798      	blx	r3
        lv_obj_align(mbox, NULL, LV_ALIGN_CENTER, 0, 0);
  4242ea:	2100      	movs	r1, #0
  4242ec:	9100      	str	r1, [sp, #0]
  4242ee:	460b      	mov	r3, r1
  4242f0:	460a      	mov	r2, r1
  4242f2:	4620      	mov	r0, r4
  4242f4:	4d3b      	ldr	r5, [pc, #236]	; (4243e4 <lv_msgbox_create+0x1e8>)
  4242f6:	47a8      	blx	r5
        lv_obj_set_event_cb(mbox, lv_msgbox_default_event_cb);
  4242f8:	493b      	ldr	r1, [pc, #236]	; (4243e8 <lv_msgbox_create+0x1ec>)
  4242fa:	4620      	mov	r0, r4
  4242fc:	4b3b      	ldr	r3, [pc, #236]	; (4243ec <lv_msgbox_create+0x1f0>)
  4242fe:	4798      	blx	r3
        lv_theme_apply(mbox, LV_THEME_MSGBOX);
  424300:	2118      	movs	r1, #24
  424302:	4620      	mov	r0, r4
  424304:	4b3a      	ldr	r3, [pc, #232]	; (4243f0 <lv_msgbox_create+0x1f4>)
  424306:	4798      	blx	r3
  424308:	e7c0      	b.n	42428c <lv_msgbox_create+0x90>
            lv_obj_set_width(mbox, LV_MATH_MIN(fit_w, LV_DPX(400)));
  42430a:	462e      	mov	r6, r5
  42430c:	2000      	movs	r0, #0
  42430e:	4b39      	ldr	r3, [pc, #228]	; (4243f4 <lv_msgbox_create+0x1f8>)
  424310:	4798      	blx	r3
  424312:	f44f 73c8 	mov.w	r3, #400	; 0x190
  424316:	fb03 f300 	mul.w	r3, r3, r0
  42431a:	3350      	adds	r3, #80	; 0x50
  42431c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  424320:	db2e      	blt.n	424380 <lv_msgbox_create+0x184>
  424322:	2000      	movs	r0, #0
  424324:	4b33      	ldr	r3, [pc, #204]	; (4243f4 <lv_msgbox_create+0x1f8>)
  424326:	4798      	blx	r3
  424328:	f44f 73c8 	mov.w	r3, #400	; 0x190
  42432c:	fb03 f300 	mul.w	r3, r3, r0
  424330:	3350      	adds	r3, #80	; 0x50
  424332:	4a31      	ldr	r2, [pc, #196]	; (4243f8 <lv_msgbox_create+0x1fc>)
  424334:	fb82 1203 	smull	r1, r2, r2, r3
  424338:	17db      	asrs	r3, r3, #31
  42433a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  42433e:	42b3      	cmp	r3, r6
  424340:	dc19      	bgt.n	424376 <lv_msgbox_create+0x17a>
  424342:	2000      	movs	r0, #0
  424344:	4b2b      	ldr	r3, [pc, #172]	; (4243f4 <lv_msgbox_create+0x1f8>)
  424346:	4798      	blx	r3
  424348:	f44f 73c8 	mov.w	r3, #400	; 0x190
  42434c:	fb03 f300 	mul.w	r3, r3, r0
  424350:	3350      	adds	r3, #80	; 0x50
  424352:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  424356:	db15      	blt.n	424384 <lv_msgbox_create+0x188>
  424358:	2000      	movs	r0, #0
  42435a:	4b26      	ldr	r3, [pc, #152]	; (4243f4 <lv_msgbox_create+0x1f8>)
  42435c:	4798      	blx	r3
  42435e:	f44f 73c8 	mov.w	r3, #400	; 0x190
  424362:	fb03 f300 	mul.w	r3, r3, r0
  424366:	3350      	adds	r3, #80	; 0x50
  424368:	4a23      	ldr	r2, [pc, #140]	; (4243f8 <lv_msgbox_create+0x1fc>)
  42436a:	fb82 1203 	smull	r1, r2, r2, r3
  42436e:	17dd      	asrs	r5, r3, #31
  424370:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
  424374:	b22d      	sxth	r5, r5
  424376:	4629      	mov	r1, r5
  424378:	4620      	mov	r0, r4
  42437a:	4b19      	ldr	r3, [pc, #100]	; (4243e0 <lv_msgbox_create+0x1e4>)
  42437c:	4798      	blx	r3
  42437e:	e7b4      	b.n	4242ea <lv_msgbox_create+0xee>
  424380:	2301      	movs	r3, #1
  424382:	e7dc      	b.n	42433e <lv_msgbox_create+0x142>
  424384:	2501      	movs	r5, #1
  424386:	e7f6      	b.n	424376 <lv_msgbox_create+0x17a>
  424388:	00421479 	.word	0x00421479
  42438c:	00415e79 	.word	0x00415e79
  424390:	2041487c 	.word	0x2041487c
  424394:	00405941 	.word	0x00405941
  424398:	0042c154 	.word	0x0042c154
  42439c:	00415e85 	.word	0x00415e85
  4243a0:	00408045 	.word	0x00408045
  4243a4:	00423fe1 	.word	0x00423fe1
  4243a8:	004058dd 	.word	0x004058dd
  4243ac:	00408095 	.word	0x00408095
  4243b0:	00423c65 	.word	0x00423c65
  4243b4:	0041e455 	.word	0x0041e455
  4243b8:	00407861 	.word	0x00407861
  4243bc:	004081f5 	.word	0x004081f5
  4243c0:	00422c75 	.word	0x00422c75
  4243c4:	00423b5d 	.word	0x00423b5d
  4243c8:	0042f8f0 	.word	0x0042f8f0
  4243cc:	00423961 	.word	0x00423961
  4243d0:	004215a9 	.word	0x004215a9
  4243d4:	004215f5 	.word	0x004215f5
  4243d8:	00407681 	.word	0x00407681
  4243dc:	00414d6d 	.word	0x00414d6d
  4243e0:	00406d2d 	.word	0x00406d2d
  4243e4:	00406201 	.word	0x00406201
  4243e8:	004245e9 	.word	0x004245e9
  4243ec:	004057b5 	.word	0x004057b5
  4243f0:	004182f9 	.word	0x004182f9
  4243f4:	00414d4d 	.word	0x00414d4d
  4243f8:	66666667 	.word	0x66666667

004243fc <lv_msgbox_set_text>:
{
  4243fc:	b538      	push	{r3, r4, r5, lr}
  4243fe:	4604      	mov	r4, r0
  424400:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  424402:	4b0f      	ldr	r3, [pc, #60]	; (424440 <lv_msgbox_set_text+0x44>)
  424404:	4798      	blx	r3
  424406:	b928      	cbnz	r0, 424414 <lv_msgbox_set_text+0x18>
  424408:	4622      	mov	r2, r4
  42440a:	2300      	movs	r3, #0
  42440c:	480d      	ldr	r0, [pc, #52]	; (424444 <lv_msgbox_set_text+0x48>)
  42440e:	490e      	ldr	r1, [pc, #56]	; (424448 <lv_msgbox_set_text+0x4c>)
  424410:	4788      	blx	r1
  424412:	e7fe      	b.n	424412 <lv_msgbox_set_text+0x16>
    LV_ASSERT_STR(txt);
  424414:	4628      	mov	r0, r5
  424416:	4b0a      	ldr	r3, [pc, #40]	; (424440 <lv_msgbox_set_text+0x44>)
  424418:	4798      	blx	r3
  42441a:	b928      	cbnz	r0, 424428 <lv_msgbox_set_text+0x2c>
  42441c:	462a      	mov	r2, r5
  42441e:	2300      	movs	r3, #0
  424420:	4808      	ldr	r0, [pc, #32]	; (424444 <lv_msgbox_set_text+0x48>)
  424422:	4909      	ldr	r1, [pc, #36]	; (424448 <lv_msgbox_set_text+0x4c>)
  424424:	4788      	blx	r1
  424426:	e7fe      	b.n	424426 <lv_msgbox_set_text+0x2a>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  424428:	4620      	mov	r0, r4
  42442a:	4b08      	ldr	r3, [pc, #32]	; (42444c <lv_msgbox_set_text+0x50>)
  42442c:	4798      	blx	r3
    lv_label_set_text(ext->text, txt);
  42442e:	4629      	mov	r1, r5
  424430:	6840      	ldr	r0, [r0, #4]
  424432:	4b07      	ldr	r3, [pc, #28]	; (424450 <lv_msgbox_set_text+0x54>)
  424434:	4798      	blx	r3
    mbox_realign(mbox);
  424436:	4620      	mov	r0, r4
  424438:	4b06      	ldr	r3, [pc, #24]	; (424454 <lv_msgbox_set_text+0x58>)
  42443a:	4798      	blx	r3
  42443c:	bd38      	pop	{r3, r4, r5, pc}
  42443e:	bf00      	nop
  424440:	00415e79 	.word	0x00415e79
  424444:	0042c168 	.word	0x0042c168
  424448:	00415e85 	.word	0x00415e85
  42444c:	00408095 	.word	0x00408095
  424450:	00423961 	.word	0x00423961
  424454:	00423f0d 	.word	0x00423f0d

00424458 <lv_msgbox_set_anim_time>:
{
  424458:	b538      	push	{r3, r4, r5, lr}
  42445a:	4604      	mov	r4, r0
  42445c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  42445e:	4b07      	ldr	r3, [pc, #28]	; (42447c <lv_msgbox_set_anim_time+0x24>)
  424460:	4798      	blx	r3
  424462:	b928      	cbnz	r0, 424470 <lv_msgbox_set_anim_time+0x18>
  424464:	4622      	mov	r2, r4
  424466:	2300      	movs	r3, #0
  424468:	4805      	ldr	r0, [pc, #20]	; (424480 <lv_msgbox_set_anim_time+0x28>)
  42446a:	4906      	ldr	r1, [pc, #24]	; (424484 <lv_msgbox_set_anim_time+0x2c>)
  42446c:	4788      	blx	r1
  42446e:	e7fe      	b.n	42446e <lv_msgbox_set_anim_time+0x16>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  424470:	4620      	mov	r0, r4
  424472:	4b05      	ldr	r3, [pc, #20]	; (424488 <lv_msgbox_set_anim_time+0x30>)
  424474:	4798      	blx	r3
    ext->anim_time      = anim_time;
  424476:	8185      	strh	r5, [r0, #12]
  424478:	bd38      	pop	{r3, r4, r5, pc}
  42447a:	bf00      	nop
  42447c:	00415e79 	.word	0x00415e79
  424480:	0042c168 	.word	0x0042c168
  424484:	00415e85 	.word	0x00415e85
  424488:	00408095 	.word	0x00408095

0042448c <lv_msgbox_get_active_btn>:
{
  42448c:	b510      	push	{r4, lr}
  42448e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  424490:	4b0e      	ldr	r3, [pc, #56]	; (4244cc <lv_msgbox_get_active_btn+0x40>)
  424492:	4798      	blx	r3
  424494:	b928      	cbnz	r0, 4244a2 <lv_msgbox_get_active_btn+0x16>
  424496:	4622      	mov	r2, r4
  424498:	2300      	movs	r3, #0
  42449a:	480d      	ldr	r0, [pc, #52]	; (4244d0 <lv_msgbox_get_active_btn+0x44>)
  42449c:	490d      	ldr	r1, [pc, #52]	; (4244d4 <lv_msgbox_get_active_btn+0x48>)
  42449e:	4788      	blx	r1
  4244a0:	e7fe      	b.n	4244a0 <lv_msgbox_get_active_btn+0x14>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  4244a2:	4620      	mov	r0, r4
  4244a4:	4b0c      	ldr	r3, [pc, #48]	; (4244d8 <lv_msgbox_get_active_btn+0x4c>)
  4244a6:	4798      	blx	r3
  4244a8:	4604      	mov	r4, r0
    if(ext->btnm == NULL) return LV_BTNMATRIX_BTN_NONE;
  4244aa:	6880      	ldr	r0, [r0, #8]
  4244ac:	b150      	cbz	r0, 4244c4 <lv_msgbox_get_active_btn+0x38>
    uint16_t id = lv_btnmatrix_get_active_btn(ext->btnm);
  4244ae:	4b0b      	ldr	r3, [pc, #44]	; (4244dc <lv_msgbox_get_active_btn+0x50>)
  4244b0:	4798      	blx	r3
    if(id == LV_BTNMATRIX_BTN_NONE) {
  4244b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4244b6:	4298      	cmp	r0, r3
  4244b8:	d000      	beq.n	4244bc <lv_msgbox_get_active_btn+0x30>
}
  4244ba:	bd10      	pop	{r4, pc}
        id = lv_btnmatrix_get_focused_btn(ext->btnm);
  4244bc:	68a0      	ldr	r0, [r4, #8]
  4244be:	4b08      	ldr	r3, [pc, #32]	; (4244e0 <lv_msgbox_get_active_btn+0x54>)
  4244c0:	4798      	blx	r3
  4244c2:	bd10      	pop	{r4, pc}
    if(ext->btnm == NULL) return LV_BTNMATRIX_BTN_NONE;
  4244c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4244c8:	e7f7      	b.n	4244ba <lv_msgbox_get_active_btn+0x2e>
  4244ca:	bf00      	nop
  4244cc:	00415e79 	.word	0x00415e79
  4244d0:	0042c168 	.word	0x0042c168
  4244d4:	00415e85 	.word	0x00415e85
  4244d8:	00408095 	.word	0x00408095
  4244dc:	0041e749 	.word	0x0041e749
  4244e0:	0041e779 	.word	0x0041e779

004244e4 <lv_msgbox_get_anim_time>:
{
  4244e4:	b510      	push	{r4, lr}
  4244e6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  4244e8:	4b06      	ldr	r3, [pc, #24]	; (424504 <lv_msgbox_get_anim_time+0x20>)
  4244ea:	4798      	blx	r3
  4244ec:	b928      	cbnz	r0, 4244fa <lv_msgbox_get_anim_time+0x16>
  4244ee:	4622      	mov	r2, r4
  4244f0:	2300      	movs	r3, #0
  4244f2:	4805      	ldr	r0, [pc, #20]	; (424508 <lv_msgbox_get_anim_time+0x24>)
  4244f4:	4905      	ldr	r1, [pc, #20]	; (42450c <lv_msgbox_get_anim_time+0x28>)
  4244f6:	4788      	blx	r1
  4244f8:	e7fe      	b.n	4244f8 <lv_msgbox_get_anim_time+0x14>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  4244fa:	4620      	mov	r0, r4
  4244fc:	4b04      	ldr	r3, [pc, #16]	; (424510 <lv_msgbox_get_anim_time+0x2c>)
  4244fe:	4798      	blx	r3
}
  424500:	8980      	ldrh	r0, [r0, #12]
  424502:	bd10      	pop	{r4, pc}
  424504:	00415e79 	.word	0x00415e79
  424508:	0042c168 	.word	0x0042c168
  42450c:	00415e85 	.word	0x00415e85
  424510:	00408095 	.word	0x00408095

00424514 <lv_msgbox_start_auto_close>:
{
  424514:	b570      	push	{r4, r5, r6, lr}
  424516:	b094      	sub	sp, #80	; 0x50
  424518:	4604      	mov	r4, r0
  42451a:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  42451c:	4b26      	ldr	r3, [pc, #152]	; (4245b8 <lv_msgbox_start_auto_close+0xa4>)
  42451e:	4798      	blx	r3
  424520:	b928      	cbnz	r0, 42452e <lv_msgbox_start_auto_close+0x1a>
  424522:	4622      	mov	r2, r4
  424524:	2300      	movs	r3, #0
  424526:	4825      	ldr	r0, [pc, #148]	; (4245bc <lv_msgbox_start_auto_close+0xa8>)
  424528:	4925      	ldr	r1, [pc, #148]	; (4245c0 <lv_msgbox_start_auto_close+0xac>)
  42452a:	4788      	blx	r1
  42452c:	e7fe      	b.n	42452c <lv_msgbox_start_auto_close+0x18>
    if(lv_msgbox_get_anim_time(mbox) != 0) {
  42452e:	4620      	mov	r0, r4
  424530:	4b24      	ldr	r3, [pc, #144]	; (4245c4 <lv_msgbox_start_auto_close+0xb0>)
  424532:	4798      	blx	r3
  424534:	b9b0      	cbnz	r0, 424564 <lv_msgbox_start_auto_close+0x50>
        lv_anim_init(&a);
  424536:	a803      	add	r0, sp, #12
  424538:	4b23      	ldr	r3, [pc, #140]	; (4245c8 <lv_msgbox_start_auto_close+0xb4>)
  42453a:	4798      	blx	r3
    a->var     = var;
  42453c:	9403      	str	r4, [sp, #12]
    a->exec_cb = exec_cb;
  42453e:	2300      	movs	r3, #0
  424540:	9304      	str	r3, [sp, #16]
    a->start = start;
  424542:	9309      	str	r3, [sp, #36]	; 0x24
    a->current = start;
  424544:	930a      	str	r3, [sp, #40]	; 0x28
    a->end   = end;
  424546:	2301      	movs	r3, #1
  424548:	930b      	str	r3, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
  42454a:	4b20      	ldr	r3, [pc, #128]	; (4245cc <lv_msgbox_start_auto_close+0xb8>)
  42454c:	9306      	str	r3, [sp, #24]
        lv_anim_set_time(&a, lv_msgbox_get_anim_time(mbox));
  42454e:	4620      	mov	r0, r4
  424550:	4b1c      	ldr	r3, [pc, #112]	; (4245c4 <lv_msgbox_start_auto_close+0xb0>)
  424552:	4798      	blx	r3
    a->time     = duration;
  424554:	900c      	str	r0, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
  424556:	426d      	negs	r5, r5
  424558:	950d      	str	r5, [sp, #52]	; 0x34
        lv_anim_start(&a);
  42455a:	a803      	add	r0, sp, #12
  42455c:	4b1c      	ldr	r3, [pc, #112]	; (4245d0 <lv_msgbox_start_auto_close+0xbc>)
  42455e:	4798      	blx	r3
}
  424560:	b014      	add	sp, #80	; 0x50
  424562:	bd70      	pop	{r4, r5, r6, pc}
        lv_anim_init(&a);
  424564:	a803      	add	r0, sp, #12
  424566:	4b18      	ldr	r3, [pc, #96]	; (4245c8 <lv_msgbox_start_auto_close+0xb4>)
  424568:	4798      	blx	r3
    a->var     = var;
  42456a:	9403      	str	r4, [sp, #12]
    a->exec_cb = exec_cb;
  42456c:	4b19      	ldr	r3, [pc, #100]	; (4245d4 <lv_msgbox_start_auto_close+0xc0>)
  42456e:	9304      	str	r3, [sp, #16]
        lv_anim_set_values(&a, lv_obj_get_height(mbox), 0);
  424570:	4620      	mov	r0, r4
  424572:	4b19      	ldr	r3, [pc, #100]	; (4245d8 <lv_msgbox_start_auto_close+0xc4>)
  424574:	4798      	blx	r3
    a->start = start;
  424576:	9009      	str	r0, [sp, #36]	; 0x24
    a->current = start;
  424578:	900a      	str	r0, [sp, #40]	; 0x28
    a->end   = end;
  42457a:	2600      	movs	r6, #0
  42457c:	960b      	str	r6, [sp, #44]	; 0x2c
        lv_anim_set_time(&a, lv_msgbox_get_anim_time(mbox));
  42457e:	4620      	mov	r0, r4
  424580:	4b10      	ldr	r3, [pc, #64]	; (4245c4 <lv_msgbox_start_auto_close+0xb0>)
  424582:	4798      	blx	r3
    a->time     = duration;
  424584:	900c      	str	r0, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
  424586:	426d      	negs	r5, r5
  424588:	950d      	str	r5, [sp, #52]	; 0x34
        lv_anim_start(&a);
  42458a:	a803      	add	r0, sp, #12
  42458c:	4d10      	ldr	r5, [pc, #64]	; (4245d0 <lv_msgbox_start_auto_close+0xbc>)
  42458e:	47a8      	blx	r5
    a->exec_cb = exec_cb;
  424590:	4b12      	ldr	r3, [pc, #72]	; (4245dc <lv_msgbox_start_auto_close+0xc8>)
  424592:	9304      	str	r3, [sp, #16]
        lv_anim_set_values(&a, lv_obj_get_width(mbox), 0);
  424594:	4620      	mov	r0, r4
  424596:	4b12      	ldr	r3, [pc, #72]	; (4245e0 <lv_msgbox_start_auto_close+0xcc>)
  424598:	4798      	blx	r3
    a->start = start;
  42459a:	9009      	str	r0, [sp, #36]	; 0x24
    a->current = start;
  42459c:	900a      	str	r0, [sp, #40]	; 0x28
    a->end   = end;
  42459e:	960b      	str	r6, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
  4245a0:	4b0a      	ldr	r3, [pc, #40]	; (4245cc <lv_msgbox_start_auto_close+0xb8>)
  4245a2:	9306      	str	r3, [sp, #24]
        lv_anim_start(&a);
  4245a4:	a803      	add	r0, sp, #12
  4245a6:	47a8      	blx	r5
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
  4245a8:	9600      	str	r6, [sp, #0]
  4245aa:	4633      	mov	r3, r6
  4245ac:	4632      	mov	r2, r6
  4245ae:	4631      	mov	r1, r6
  4245b0:	4620      	mov	r0, r4
  4245b2:	4c0c      	ldr	r4, [pc, #48]	; (4245e4 <lv_msgbox_start_auto_close+0xd0>)
  4245b4:	47a0      	blx	r4
  4245b6:	e7d3      	b.n	424560 <lv_msgbox_start_auto_close+0x4c>
  4245b8:	00415e79 	.word	0x00415e79
  4245bc:	0042c168 	.word	0x0042c168
  4245c0:	00415e85 	.word	0x00415e85
  4245c4:	004244e5 	.word	0x004244e5
  4245c8:	0041538d 	.word	0x0041538d
  4245cc:	00423e95 	.word	0x00423e95
  4245d0:	00415445 	.word	0x00415445
  4245d4:	00406d6d 	.word	0x00406d6d
  4245d8:	00405bb1 	.word	0x00405bb1
  4245dc:	00406d2d 	.word	0x00406d2d
  4245e0:	00405b81 	.word	0x00405b81
  4245e4:	004215f5 	.word	0x004215f5

004245e8 <lv_msgbox_default_event_cb>:
}
#endif

static void lv_msgbox_default_event_cb(lv_obj_t * mbox, lv_event_t event)
{
    if(event != LV_EVENT_VALUE_CHANGED) return;
  4245e8:	2910      	cmp	r1, #16
  4245ea:	d000      	beq.n	4245ee <lv_msgbox_default_event_cb+0x6>
  4245ec:	4770      	bx	lr
{
  4245ee:	b510      	push	{r4, lr}
  4245f0:	4604      	mov	r4, r0

    uint32_t btn_id = lv_msgbox_get_active_btn(mbox);
  4245f2:	4b05      	ldr	r3, [pc, #20]	; (424608 <lv_msgbox_default_event_cb+0x20>)
  4245f4:	4798      	blx	r3
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
  4245f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4245fa:	4298      	cmp	r0, r3
  4245fc:	d003      	beq.n	424606 <lv_msgbox_default_event_cb+0x1e>

    lv_msgbox_start_auto_close(mbox, 0);
  4245fe:	2100      	movs	r1, #0
  424600:	4620      	mov	r0, r4
  424602:	4b02      	ldr	r3, [pc, #8]	; (42460c <lv_msgbox_default_event_cb+0x24>)
  424604:	4798      	blx	r3
  424606:	bd10      	pop	{r4, pc}
  424608:	0042448d 	.word	0x0042448d
  42460c:	00424515 	.word	0x00424515

00424610 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  424610:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  424612:	4810      	ldr	r0, [pc, #64]	; (424654 <sysclk_init+0x44>)
  424614:	4b10      	ldr	r3, [pc, #64]	; (424658 <sysclk_init+0x48>)
  424616:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  424618:	213e      	movs	r1, #62	; 0x3e
  42461a:	2000      	movs	r0, #0
  42461c:	4b0f      	ldr	r3, [pc, #60]	; (42465c <sysclk_init+0x4c>)
  42461e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  424620:	4b0f      	ldr	r3, [pc, #60]	; (424660 <sysclk_init+0x50>)
  424622:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  424624:	2800      	cmp	r0, #0
  424626:	d0fb      	beq.n	424620 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  424628:	4b0e      	ldr	r3, [pc, #56]	; (424664 <sysclk_init+0x54>)
  42462a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  42462c:	4a0e      	ldr	r2, [pc, #56]	; (424668 <sysclk_init+0x58>)
  42462e:	4b0f      	ldr	r3, [pc, #60]	; (42466c <sysclk_init+0x5c>)
  424630:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  424632:	4b0f      	ldr	r3, [pc, #60]	; (424670 <sysclk_init+0x60>)
  424634:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  424636:	2800      	cmp	r0, #0
  424638:	d0fb      	beq.n	424632 <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  42463a:	2002      	movs	r0, #2
  42463c:	4b0d      	ldr	r3, [pc, #52]	; (424674 <sysclk_init+0x64>)
  42463e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  424640:	2000      	movs	r0, #0
  424642:	4b0d      	ldr	r3, [pc, #52]	; (424678 <sysclk_init+0x68>)
  424644:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  424646:	4b0d      	ldr	r3, [pc, #52]	; (42467c <sysclk_init+0x6c>)
  424648:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  42464a:	480d      	ldr	r0, [pc, #52]	; (424680 <sysclk_init+0x70>)
  42464c:	4b02      	ldr	r3, [pc, #8]	; (424658 <sysclk_init+0x48>)
  42464e:	4798      	blx	r3
  424650:	bd08      	pop	{r3, pc}
  424652:	bf00      	nop
  424654:	07270e00 	.word	0x07270e00
  424658:	00425449 	.word	0x00425449
  42465c:	00424f09 	.word	0x00424f09
  424660:	00424f5d 	.word	0x00424f5d
  424664:	00424f6d 	.word	0x00424f6d
  424668:	20183f01 	.word	0x20183f01
  42466c:	400e0600 	.word	0x400e0600
  424670:	00424f7d 	.word	0x00424f7d
  424674:	00424e79 	.word	0x00424e79
  424678:	00424eb5 	.word	0x00424eb5
  42467c:	00425339 	.word	0x00425339
  424680:	11e1a300 	.word	0x11e1a300

00424684 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  424684:	b510      	push	{r4, lr}
  424686:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  424688:	4b10      	ldr	r3, [pc, #64]	; (4246cc <spi_master_init+0x48>)
  42468a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  42468c:	2380      	movs	r3, #128	; 0x80
  42468e:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  424690:	6863      	ldr	r3, [r4, #4]
  424692:	f043 0301 	orr.w	r3, r3, #1
  424696:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  424698:	6863      	ldr	r3, [r4, #4]
  42469a:	f043 0310 	orr.w	r3, r3, #16
  42469e:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4246a0:	6863      	ldr	r3, [r4, #4]
  4246a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4246a6:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4246a8:	2100      	movs	r1, #0
  4246aa:	4620      	mov	r0, r4
  4246ac:	4b08      	ldr	r3, [pc, #32]	; (4246d0 <spi_master_init+0x4c>)
  4246ae:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4246b0:	6863      	ldr	r3, [r4, #4]
  4246b2:	f023 0302 	bic.w	r3, r3, #2
  4246b6:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4246b8:	6863      	ldr	r3, [r4, #4]
  4246ba:	f023 0304 	bic.w	r3, r3, #4
  4246be:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4246c0:	2100      	movs	r1, #0
  4246c2:	4620      	mov	r0, r4
  4246c4:	4b03      	ldr	r3, [pc, #12]	; (4246d4 <spi_master_init+0x50>)
  4246c6:	4798      	blx	r3
  4246c8:	bd10      	pop	{r4, pc}
  4246ca:	bf00      	nop
  4246cc:	00424fad 	.word	0x00424fad
  4246d0:	00424fd9 	.word	0x00424fd9
  4246d4:	00424fef 	.word	0x00424fef

004246d8 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4246d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4246dc:	4604      	mov	r4, r0
  4246de:	460d      	mov	r5, r1
  4246e0:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4246e2:	4915      	ldr	r1, [pc, #84]	; (424738 <spi_master_setup_device+0x60>)
  4246e4:	4618      	mov	r0, r3
  4246e6:	4b15      	ldr	r3, [pc, #84]	; (42473c <spi_master_setup_device+0x64>)
  4246e8:	4798      	blx	r3
  4246ea:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4246ec:	2300      	movs	r3, #0
  4246ee:	461a      	mov	r2, r3
  4246f0:	6829      	ldr	r1, [r5, #0]
  4246f2:	4620      	mov	r0, r4
  4246f4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 424754 <spi_master_setup_device+0x7c>
  4246f8:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4246fa:	2208      	movs	r2, #8
  4246fc:	6829      	ldr	r1, [r5, #0]
  4246fe:	4620      	mov	r0, r4
  424700:	4b0f      	ldr	r3, [pc, #60]	; (424740 <spi_master_setup_device+0x68>)
  424702:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  424704:	b2fa      	uxtb	r2, r7
  424706:	6829      	ldr	r1, [r5, #0]
  424708:	4620      	mov	r0, r4
  42470a:	4b0e      	ldr	r3, [pc, #56]	; (424744 <spi_master_setup_device+0x6c>)
  42470c:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  42470e:	2208      	movs	r2, #8
  424710:	6829      	ldr	r1, [r5, #0]
  424712:	4620      	mov	r0, r4
  424714:	4b0c      	ldr	r3, [pc, #48]	; (424748 <spi_master_setup_device+0x70>)
  424716:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  424718:	0872      	lsrs	r2, r6, #1
  42471a:	6829      	ldr	r1, [r5, #0]
  42471c:	4620      	mov	r0, r4
  42471e:	4b0b      	ldr	r3, [pc, #44]	; (42474c <spi_master_setup_device+0x74>)
  424720:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  424722:	f086 0201 	eor.w	r2, r6, #1
  424726:	f002 0201 	and.w	r2, r2, #1
  42472a:	6829      	ldr	r1, [r5, #0]
  42472c:	4620      	mov	r0, r4
  42472e:	4b08      	ldr	r3, [pc, #32]	; (424750 <spi_master_setup_device+0x78>)
  424730:	4798      	blx	r3
  424732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424736:	bf00      	nop
  424738:	08f0d180 	.word	0x08f0d180
  42473c:	004250b3 	.word	0x004250b3
  424740:	00425099 	.word	0x00425099
  424744:	004250cb 	.word	0x004250cb
  424748:	00425045 	.word	0x00425045
  42474c:	00425001 	.word	0x00425001
  424750:	00425023 	.word	0x00425023
  424754:	004250f9 	.word	0x004250f9

00424758 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  424758:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  42475a:	6843      	ldr	r3, [r0, #4]
  42475c:	f013 0f04 	tst.w	r3, #4
  424760:	d005      	beq.n	42476e <spi_select_device+0x16>
		return 1;
  424762:	2301      	movs	r3, #1
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  424764:	b143      	cbz	r3, 424778 <spi_select_device+0x20>
		if (device->id < MAX_NUM_WITH_DECODER) {
  424766:	6809      	ldr	r1, [r1, #0]
  424768:	290f      	cmp	r1, #15
  42476a:	d902      	bls.n	424772 <spi_select_device+0x1a>
  42476c:	bd08      	pop	{r3, pc}
		return 0;
  42476e:	2300      	movs	r3, #0
  424770:	e7f8      	b.n	424764 <spi_select_device+0xc>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  424772:	4b06      	ldr	r3, [pc, #24]	; (42478c <spi_select_device+0x34>)
  424774:	4798      	blx	r3
  424776:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  424778:	6809      	ldr	r1, [r1, #0]
  42477a:	2903      	cmp	r1, #3
  42477c:	d8f6      	bhi.n	42476c <spi_select_device+0x14>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  42477e:	2301      	movs	r3, #1
  424780:	fa03 f101 	lsl.w	r1, r3, r1
  424784:	43c9      	mvns	r1, r1
  424786:	4b01      	ldr	r3, [pc, #4]	; (42478c <spi_select_device+0x34>)
  424788:	4798      	blx	r3
		}
	}
}
  42478a:	e7ef      	b.n	42476c <spi_select_device+0x14>
  42478c:	00424fd9 	.word	0x00424fd9

00424790 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  424790:	b570      	push	{r4, r5, r6, lr}
  424792:	460d      	mov	r5, r1
  424794:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
  424796:	4606      	mov	r6, r0
  424798:	b158      	cbz	r0, 4247b2 <_read+0x22>
		return -1;
  42479a:	f04f 36ff 	mov.w	r6, #4294967295
  42479e:	e00a      	b.n	4247b6 <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4247a0:	4b06      	ldr	r3, [pc, #24]	; (4247bc <_read+0x2c>)
  4247a2:	6818      	ldr	r0, [r3, #0]
  4247a4:	4b06      	ldr	r3, [pc, #24]	; (4247c0 <_read+0x30>)
  4247a6:	681b      	ldr	r3, [r3, #0]
  4247a8:	4629      	mov	r1, r5
  4247aa:	4798      	blx	r3
		ptr++;
  4247ac:	3501      	adds	r5, #1
		nChars++;
  4247ae:	3601      	adds	r6, #1
	for (; len > 0; --len) {
  4247b0:	3c01      	subs	r4, #1
  4247b2:	2c00      	cmp	r4, #0
  4247b4:	dcf4      	bgt.n	4247a0 <_read+0x10>
	}
	return nChars;
}
  4247b6:	4630      	mov	r0, r6
  4247b8:	bd70      	pop	{r4, r5, r6, pc}
  4247ba:	bf00      	nop
  4247bc:	2043a3e0 	.word	0x2043a3e0
  4247c0:	2043a3d8 	.word	0x2043a3d8

004247c4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4247c4:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4247c6:	3801      	subs	r0, #1
  4247c8:	2802      	cmp	r0, #2
  4247ca:	d80f      	bhi.n	4247ec <_write+0x28>
  4247cc:	4614      	mov	r4, r2
  4247ce:	2500      	movs	r5, #0
		return -1;
	}

	for (; len != 0; --len) {
  4247d0:	b18c      	cbz	r4, 4247f6 <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4247d2:	4b0a      	ldr	r3, [pc, #40]	; (4247fc <_write+0x38>)
  4247d4:	6818      	ldr	r0, [r3, #0]
  4247d6:	1c4e      	adds	r6, r1, #1
  4247d8:	4b09      	ldr	r3, [pc, #36]	; (424800 <_write+0x3c>)
  4247da:	681b      	ldr	r3, [r3, #0]
  4247dc:	7809      	ldrb	r1, [r1, #0]
  4247de:	4798      	blx	r3
  4247e0:	2800      	cmp	r0, #0
  4247e2:	db06      	blt.n	4247f2 <_write+0x2e>
			return -1;
		}
		++nChars;
  4247e4:	3501      	adds	r5, #1
	for (; len != 0; --len) {
  4247e6:	3c01      	subs	r4, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4247e8:	4631      	mov	r1, r6
  4247ea:	e7f1      	b.n	4247d0 <_write+0xc>
		return -1;
  4247ec:	f04f 35ff 	mov.w	r5, #4294967295
  4247f0:	e001      	b.n	4247f6 <_write+0x32>
			return -1;
  4247f2:	f04f 35ff 	mov.w	r5, #4294967295
	}
	return nChars;
}
  4247f6:	4628      	mov	r0, r5
  4247f8:	bd70      	pop	{r4, r5, r6, pc}
  4247fa:	bf00      	nop
  4247fc:	2043a3e0 	.word	0x2043a3e0
  424800:	2043a3dc 	.word	0x2043a3dc

00424804 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  424804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  424808:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  42480c:	4b9a      	ldr	r3, [pc, #616]	; (424a78 <board_init+0x274>)
  42480e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  424810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  424814:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  424818:	4b98      	ldr	r3, [pc, #608]	; (424a7c <board_init+0x278>)
  42481a:	2200      	movs	r2, #0
  42481c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  424820:	695a      	ldr	r2, [r3, #20]
  424822:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  424826:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  424828:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  42482c:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  424830:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  424834:	f3c6 304e 	ubfx	r0, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  424838:	f006 0507 	and.w	r5, r6, #7
  42483c:	3504      	adds	r5, #4
    ways    = CCSIDR_WAYS(ccsidr);
  42483e:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  424842:	fab6 f486 	clz	r4, r6
    wshift  = __CLZ(ways) & 0x1f;
  424846:	f004 041f 	and.w	r4, r4, #31
  __ASM volatile ("dsb");
  42484a:	f3bf 8f4f 	dsb	sy
  42484e:	e00e      	b.n	42486e <board_init+0x6a>
    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
            } while(tmpways--);
  424850:	4613      	mov	r3, r2
              sw = ((tmpways << wshift) | (sets << sshift));
  424852:	fa03 f204 	lsl.w	r2, r3, r4
  424856:	fa00 f105 	lsl.w	r1, r0, r5
  42485a:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  42485c:	4987      	ldr	r1, [pc, #540]	; (424a7c <board_init+0x278>)
  42485e:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
            } while(tmpways--);
  424862:	1e5a      	subs	r2, r3, #1
  424864:	2b00      	cmp	r3, #0
  424866:	d1f3      	bne.n	424850 <board_init+0x4c>
        } while(sets--);
  424868:	1e43      	subs	r3, r0, #1
  42486a:	b110      	cbz	r0, 424872 <board_init+0x6e>
  42486c:	4618      	mov	r0, r3
         int32_t tmpways = ways;
  42486e:	4633      	mov	r3, r6
  424870:	e7ef      	b.n	424852 <board_init+0x4e>
  424872:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  424876:	460b      	mov	r3, r1
  424878:	694a      	ldr	r2, [r1, #20]
  42487a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  42487e:	614a      	str	r2, [r1, #20]
  424880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  424884:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  424888:	4a7d      	ldr	r2, [pc, #500]	; (424a80 <board_init+0x27c>)
  42488a:	497e      	ldr	r1, [pc, #504]	; (424a84 <board_init+0x280>)
  42488c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  42488e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  424892:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  424894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  424898:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  42489c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4248a0:	f022 0201 	bic.w	r2, r2, #1
  4248a4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4248a8:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4248ac:	f022 0201 	bic.w	r2, r2, #1
  4248b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4248b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4248b8:	f3bf 8f6f 	isb	sy
  4248bc:	200a      	movs	r0, #10
  4248be:	4c72      	ldr	r4, [pc, #456]	; (424a88 <board_init+0x284>)
  4248c0:	47a0      	blx	r4
  4248c2:	200b      	movs	r0, #11
  4248c4:	47a0      	blx	r4
  4248c6:	200c      	movs	r0, #12
  4248c8:	47a0      	blx	r4
  4248ca:	2010      	movs	r0, #16
  4248cc:	47a0      	blx	r4
  4248ce:	2011      	movs	r0, #17
  4248d0:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4248d2:	4e6e      	ldr	r6, [pc, #440]	; (424a8c <board_init+0x288>)
  4248d4:	f44f 7880 	mov.w	r8, #256	; 0x100
  4248d8:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4248dc:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4248e0:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4248e4:	4c6a      	ldr	r4, [pc, #424]	; (424a90 <board_init+0x28c>)
  4248e6:	f44f 6500 	mov.w	r5, #2048	; 0x800
  4248ea:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4248ec:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4248f0:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4248f2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4248f6:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4248f8:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  4248fa:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4248fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
  424900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  424904:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  424906:	6f63      	ldr	r3, [r4, #116]	; 0x74
  424908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  42490c:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  42490e:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  424912:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  424916:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  42491a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  42491e:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  424920:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  424924:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  424926:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  424928:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  42492c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  42492e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  424932:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  424934:	6f62      	ldr	r2, [r4, #116]	; 0x74
  424936:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  42493a:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  42493c:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  42493e:	4a55      	ldr	r2, [pc, #340]	; (424a94 <board_init+0x290>)
  424940:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  424944:	f043 0310 	orr.w	r3, r3, #16
  424948:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  42494c:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  424950:	2310      	movs	r3, #16
  424952:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  424954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  424958:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  42495a:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  42495c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  424960:	6f11      	ldr	r1, [r2, #112]	; 0x70
  424962:	4319      	orrs	r1, r3
  424964:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  424966:	6f51      	ldr	r1, [r2, #116]	; 0x74
  424968:	4319      	orrs	r1, r3
  42496a:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  42496c:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  42496e:	2208      	movs	r2, #8
  424970:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  424972:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  424976:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  424978:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  42497a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  42497e:	6f21      	ldr	r1, [r4, #112]	; 0x70
  424980:	f021 0108 	bic.w	r1, r1, #8
  424984:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  424986:	6f61      	ldr	r1, [r4, #116]	; 0x74
  424988:	f021 0108 	bic.w	r1, r1, #8
  42498c:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  42498e:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  424990:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  424992:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  424996:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  424998:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  42499a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  42499e:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4249a0:	f022 0210 	bic.w	r2, r2, #16
  4249a4:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4249a6:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4249a8:	f022 0210 	bic.w	r2, r2, #16
  4249ac:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4249ae:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4249b0:	2300      	movs	r3, #0
  4249b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4249b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4249ba:	4630      	mov	r0, r6
  4249bc:	4f36      	ldr	r7, [pc, #216]	; (424a98 <board_init+0x294>)
  4249be:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  4249c0:	2300      	movs	r3, #0
  4249c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4249c6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4249ca:	4630      	mov	r0, r6
  4249cc:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  4249ce:	2301      	movs	r3, #1
  4249d0:	22ff      	movs	r2, #255	; 0xff
  4249d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4249d6:	4630      	mov	r0, r6
  4249d8:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  4249da:	2301      	movs	r3, #1
  4249dc:	223f      	movs	r2, #63	; 0x3f
  4249de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4249e2:	482e      	ldr	r0, [pc, #184]	; (424a9c <board_init+0x298>)
  4249e4:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  4249e6:	2301      	movs	r3, #1
  4249e8:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4249ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4249f0:	4620      	mov	r0, r4
  4249f2:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  4249f4:	2301      	movs	r3, #1
  4249f6:	4642      	mov	r2, r8
  4249f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4249fc:	4630      	mov	r0, r6
  4249fe:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  424a00:	2301      	movs	r3, #1
  424a02:	462a      	mov	r2, r5
  424a04:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424a08:	4630      	mov	r0, r6
  424a0a:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  424a0c:	2301      	movs	r3, #1
  424a0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  424a12:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424a16:	4822      	ldr	r0, [pc, #136]	; (424aa0 <board_init+0x29c>)
  424a18:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  424a1a:	2300      	movs	r3, #0
  424a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
  424a20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424a24:	4630      	mov	r0, r6
  424a26:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  424a28:	f44f 7100 	mov.w	r1, #512	; 0x200
  424a2c:	4630      	mov	r0, r6
  424a2e:	4b1d      	ldr	r3, [pc, #116]	; (424aa4 <board_init+0x2a0>)
  424a30:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  424a32:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424a36:	2074      	movs	r0, #116	; 0x74
  424a38:	4c1b      	ldr	r4, [pc, #108]	; (424aa8 <board_init+0x2a4>)
  424a3a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  424a3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424a40:	2075      	movs	r0, #117	; 0x75
  424a42:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  424a44:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424a48:	2076      	movs	r0, #118	; 0x76
  424a4a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  424a4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424a50:	207b      	movs	r0, #123	; 0x7b
  424a52:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  424a54:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424a58:	2018      	movs	r0, #24
  424a5a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  424a5c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424a60:	2006      	movs	r0, #6
  424a62:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  424a64:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424a68:	2053      	movs	r0, #83	; 0x53
  424a6a:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  424a6c:	2053      	movs	r0, #83	; 0x53
  424a6e:	4b0f      	ldr	r3, [pc, #60]	; (424aac <board_init+0x2a8>)
  424a70:	4798      	blx	r3
  424a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424a76:	bf00      	nop
  424a78:	400e1850 	.word	0x400e1850
  424a7c:	e000ed00 	.word	0xe000ed00
  424a80:	400e0c00 	.word	0x400e0c00
  424a84:	5a00080c 	.word	0x5a00080c
  424a88:	00424f8d 	.word	0x00424f8d
  424a8c:	400e1200 	.word	0x400e1200
  424a90:	400e0e00 	.word	0x400e0e00
  424a94:	40088000 	.word	0x40088000
  424a98:	00424bd5 	.word	0x00424bd5
  424a9c:	400e1600 	.word	0x400e1600
  424aa0:	400e1400 	.word	0x400e1400
  424aa4:	00424abb 	.word	0x00424abb
  424aa8:	00424c95 	.word	0x00424c95
  424aac:	00424c7d 	.word	0x00424c7d

00424ab0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  424ab0:	b90a      	cbnz	r2, 424ab6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  424ab2:	6601      	str	r1, [r0, #96]	; 0x60
  424ab4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  424ab6:	6641      	str	r1, [r0, #100]	; 0x64
  424ab8:	4770      	bx	lr

00424aba <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  424aba:	6301      	str	r1, [r0, #48]	; 0x30
  424abc:	4770      	bx	lr

00424abe <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  424abe:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  424ac0:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  424ac4:	d039      	beq.n	424b3a <pio_set_peripheral+0x7c>
  424ac6:	d813      	bhi.n	424af0 <pio_set_peripheral+0x32>
  424ac8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  424acc:	d025      	beq.n	424b1a <pio_set_peripheral+0x5c>
  424ace:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  424ad2:	d10a      	bne.n	424aea <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  424ad4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  424ad6:	4313      	orrs	r3, r2
  424ad8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  424ada:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  424adc:	6f43      	ldr	r3, [r0, #116]	; 0x74
  424ade:	ea21 0102 	bic.w	r1, r1, r2
  424ae2:	400b      	ands	r3, r1
  424ae4:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  424ae6:	6042      	str	r2, [r0, #4]
  424ae8:	4770      	bx	lr
	switch (ul_type) {
  424aea:	2900      	cmp	r1, #0
  424aec:	d1fb      	bne.n	424ae6 <pio_set_peripheral+0x28>
  424aee:	4770      	bx	lr
  424af0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  424af4:	d020      	beq.n	424b38 <pio_set_peripheral+0x7a>
  424af6:	d809      	bhi.n	424b0c <pio_set_peripheral+0x4e>
  424af8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  424afc:	d1f3      	bne.n	424ae6 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  424afe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  424b00:	4313      	orrs	r3, r2
  424b02:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  424b04:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  424b06:	4313      	orrs	r3, r2
  424b08:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  424b0a:	e7ec      	b.n	424ae6 <pio_set_peripheral+0x28>
	switch (ul_type) {
  424b0c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  424b10:	d012      	beq.n	424b38 <pio_set_peripheral+0x7a>
  424b12:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  424b16:	d00f      	beq.n	424b38 <pio_set_peripheral+0x7a>
  424b18:	e7e5      	b.n	424ae6 <pio_set_peripheral+0x28>
{
  424b1a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  424b1c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  424b1e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  424b20:	43d3      	mvns	r3, r2
  424b22:	401c      	ands	r4, r3
  424b24:	4021      	ands	r1, r4
  424b26:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  424b28:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  424b2a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  424b2c:	4023      	ands	r3, r4
  424b2e:	400b      	ands	r3, r1
  424b30:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  424b32:	6042      	str	r2, [r0, #4]
}
  424b34:	f85d 4b04 	ldr.w	r4, [sp], #4
  424b38:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  424b3a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  424b3c:	6f03      	ldr	r3, [r0, #112]	; 0x70
  424b3e:	ea21 0102 	bic.w	r1, r1, r2
  424b42:	400b      	ands	r3, r1
  424b44:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  424b46:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  424b48:	4313      	orrs	r3, r2
  424b4a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  424b4c:	e7cb      	b.n	424ae6 <pio_set_peripheral+0x28>

00424b4e <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  424b4e:	6441      	str	r1, [r0, #68]	; 0x44
  424b50:	4770      	bx	lr
	...

00424b54 <pio_set_input>:
{
  424b54:	b570      	push	{r4, r5, r6, lr}
  424b56:	4604      	mov	r4, r0
  424b58:	460d      	mov	r5, r1
  424b5a:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  424b5c:	4b0d      	ldr	r3, [pc, #52]	; (424b94 <pio_set_input+0x40>)
  424b5e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  424b60:	f006 0201 	and.w	r2, r6, #1
  424b64:	4629      	mov	r1, r5
  424b66:	4620      	mov	r0, r4
  424b68:	4b0b      	ldr	r3, [pc, #44]	; (424b98 <pio_set_input+0x44>)
  424b6a:	4798      	blx	r3
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  424b6c:	f016 0f0a 	tst.w	r6, #10
  424b70:	d009      	beq.n	424b86 <pio_set_input+0x32>
		p_pio->PIO_IFER = ul_mask;
  424b72:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  424b74:	f016 0f02 	tst.w	r6, #2
  424b78:	d107      	bne.n	424b8a <pio_set_input+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
  424b7a:	f016 0f08 	tst.w	r6, #8
  424b7e:	d006      	beq.n	424b8e <pio_set_input+0x3a>
			p_pio->PIO_IFSCER = ul_mask;
  424b80:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  424b84:	e003      	b.n	424b8e <pio_set_input+0x3a>
		p_pio->PIO_IFDR = ul_mask;
  424b86:	6265      	str	r5, [r4, #36]	; 0x24
  424b88:	e7f4      	b.n	424b74 <pio_set_input+0x20>
		p_pio->PIO_IFSCDR = ul_mask;
  424b8a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  424b8e:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  424b90:	6025      	str	r5, [r4, #0]
  424b92:	bd70      	pop	{r4, r5, r6, pc}
  424b94:	00424b4f 	.word	0x00424b4f
  424b98:	00424ab1 	.word	0x00424ab1

00424b9c <pio_set_output>:
{
  424b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  424b9e:	4604      	mov	r4, r0
  424ba0:	460d      	mov	r5, r1
  424ba2:	4616      	mov	r6, r2
  424ba4:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
  424ba6:	4b09      	ldr	r3, [pc, #36]	; (424bcc <pio_set_output+0x30>)
  424ba8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  424baa:	9a06      	ldr	r2, [sp, #24]
  424bac:	4629      	mov	r1, r5
  424bae:	4620      	mov	r0, r4
  424bb0:	4b07      	ldr	r3, [pc, #28]	; (424bd0 <pio_set_output+0x34>)
  424bb2:	4798      	blx	r3
	if (ul_multidrive_enable) {
  424bb4:	b12f      	cbz	r7, 424bc2 <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
  424bb6:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
  424bb8:	b92e      	cbnz	r6, 424bc6 <pio_set_output+0x2a>
		p_pio->PIO_CODR = ul_mask;
  424bba:	6365      	str	r5, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  424bbc:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  424bbe:	6025      	str	r5, [r4, #0]
  424bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
  424bc2:	6565      	str	r5, [r4, #84]	; 0x54
  424bc4:	e7f8      	b.n	424bb8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  424bc6:	6325      	str	r5, [r4, #48]	; 0x30
  424bc8:	e7f8      	b.n	424bbc <pio_set_output+0x20>
  424bca:	bf00      	nop
  424bcc:	00424b4f 	.word	0x00424b4f
  424bd0:	00424ab1 	.word	0x00424ab1

00424bd4 <pio_configure>:
{
  424bd4:	b570      	push	{r4, r5, r6, lr}
  424bd6:	b082      	sub	sp, #8
  424bd8:	4604      	mov	r4, r0
  424bda:	4615      	mov	r5, r2
  424bdc:	461e      	mov	r6, r3
	switch (ul_type) {
  424bde:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  424be2:	d014      	beq.n	424c0e <pio_configure+0x3a>
  424be4:	d90a      	bls.n	424bfc <pio_configure+0x28>
  424be6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  424bea:	d023      	beq.n	424c34 <pio_configure+0x60>
  424bec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  424bf0:	d020      	beq.n	424c34 <pio_configure+0x60>
  424bf2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  424bf6:	d017      	beq.n	424c28 <pio_configure+0x54>
		return 0;
  424bf8:	2000      	movs	r0, #0
  424bfa:	e013      	b.n	424c24 <pio_configure+0x50>
	switch (ul_type) {
  424bfc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  424c00:	d005      	beq.n	424c0e <pio_configure+0x3a>
  424c02:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  424c06:	d002      	beq.n	424c0e <pio_configure+0x3a>
  424c08:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  424c0c:	d1f4      	bne.n	424bf8 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  424c0e:	462a      	mov	r2, r5
  424c10:	4620      	mov	r0, r4
  424c12:	4b10      	ldr	r3, [pc, #64]	; (424c54 <pio_configure+0x80>)
  424c14:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  424c16:	f006 0201 	and.w	r2, r6, #1
  424c1a:	4629      	mov	r1, r5
  424c1c:	4620      	mov	r0, r4
  424c1e:	4b0e      	ldr	r3, [pc, #56]	; (424c58 <pio_configure+0x84>)
  424c20:	4798      	blx	r3
	return 1;
  424c22:	2001      	movs	r0, #1
}
  424c24:	b002      	add	sp, #8
  424c26:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  424c28:	461a      	mov	r2, r3
  424c2a:	4629      	mov	r1, r5
  424c2c:	4b0b      	ldr	r3, [pc, #44]	; (424c5c <pio_configure+0x88>)
  424c2e:	4798      	blx	r3
	return 1;
  424c30:	2001      	movs	r0, #1
		break;
  424c32:	e7f7      	b.n	424c24 <pio_configure+0x50>
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  424c34:	f006 0301 	and.w	r3, r6, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  424c38:	9300      	str	r3, [sp, #0]
  424c3a:	f3c6 0380 	ubfx	r3, r6, #2, #1
  424c3e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  424c42:	bf14      	ite	ne
  424c44:	2200      	movne	r2, #0
  424c46:	2201      	moveq	r2, #1
  424c48:	4629      	mov	r1, r5
  424c4a:	4620      	mov	r0, r4
  424c4c:	4c04      	ldr	r4, [pc, #16]	; (424c60 <pio_configure+0x8c>)
  424c4e:	47a0      	blx	r4
	return 1;
  424c50:	2001      	movs	r0, #1
		break;
  424c52:	e7e7      	b.n	424c24 <pio_configure+0x50>
  424c54:	00424abf 	.word	0x00424abf
  424c58:	00424ab1 	.word	0x00424ab1
  424c5c:	00424b55 	.word	0x00424b55
  424c60:	00424b9d 	.word	0x00424b9d

00424c64 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  424c64:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  424c66:	4770      	bx	lr

00424c68 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  424c68:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  424c6a:	4770      	bx	lr

00424c6c <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  424c6c:	4b02      	ldr	r3, [pc, #8]	; (424c78 <pio_get_pin_group+0xc>)
  424c6e:	eb03 1050 	add.w	r0, r3, r0, lsr #5
#endif
	return p_pio;
}
  424c72:	0240      	lsls	r0, r0, #9
  424c74:	4770      	bx	lr
  424c76:	bf00      	nop
  424c78:	00200707 	.word	0x00200707

00424c7c <pio_set_pin_high>:
{
  424c7c:	b510      	push	{r4, lr}
  424c7e:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
  424c80:	4b03      	ldr	r3, [pc, #12]	; (424c90 <pio_set_pin_high+0x14>)
  424c82:	4798      	blx	r3
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  424c84:	f004 041f 	and.w	r4, r4, #31
  424c88:	2301      	movs	r3, #1
  424c8a:	40a3      	lsls	r3, r4
  424c8c:	6303      	str	r3, [r0, #48]	; 0x30
  424c8e:	bd10      	pop	{r4, pc}
  424c90:	00424c6d 	.word	0x00424c6d

00424c94 <pio_configure_pin>:
{
  424c94:	b5f0      	push	{r4, r5, r6, r7, lr}
  424c96:	b083      	sub	sp, #12
  424c98:	4604      	mov	r4, r0
  424c9a:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
  424c9c:	4b42      	ldr	r3, [pc, #264]	; (424da8 <pio_configure_pin+0x114>)
  424c9e:	4798      	blx	r3
  424ca0:	4606      	mov	r6, r0
	switch (ul_flags & PIO_TYPE_Msk) {
  424ca2:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
  424ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  424caa:	d055      	beq.n	424d58 <pio_configure_pin+0xc4>
  424cac:	d80a      	bhi.n	424cc4 <pio_configure_pin+0x30>
  424cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  424cb2:	d02d      	beq.n	424d10 <pio_configure_pin+0x7c>
  424cb4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  424cb8:	d03c      	beq.n	424d34 <pio_configure_pin+0xa0>
  424cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  424cbe:	d014      	beq.n	424cea <pio_configure_pin+0x56>
		return 0;
  424cc0:	2000      	movs	r0, #0
  424cc2:	e023      	b.n	424d0c <pio_configure_pin+0x78>
	switch (ul_flags & PIO_TYPE_Msk) {
  424cc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  424cc8:	d058      	beq.n	424d7c <pio_configure_pin+0xe8>
  424cca:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  424cce:	d055      	beq.n	424d7c <pio_configure_pin+0xe8>
  424cd0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  424cd4:	d1f4      	bne.n	424cc0 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  424cd6:	f004 011f 	and.w	r1, r4, #31
  424cda:	2401      	movs	r4, #1
  424cdc:	462a      	mov	r2, r5
  424cde:	fa04 f101 	lsl.w	r1, r4, r1
  424ce2:	4b32      	ldr	r3, [pc, #200]	; (424dac <pio_configure_pin+0x118>)
  424ce4:	4798      	blx	r3
	return 1;
  424ce6:	4620      	mov	r0, r4
		break;
  424ce8:	e010      	b.n	424d0c <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  424cea:	f004 041f 	and.w	r4, r4, #31
  424cee:	2701      	movs	r7, #1
  424cf0:	fa07 f404 	lsl.w	r4, r7, r4
  424cf4:	4622      	mov	r2, r4
  424cf6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424cfa:	4b2d      	ldr	r3, [pc, #180]	; (424db0 <pio_configure_pin+0x11c>)
  424cfc:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  424cfe:	ea05 0207 	and.w	r2, r5, r7
  424d02:	4621      	mov	r1, r4
  424d04:	4630      	mov	r0, r6
  424d06:	4b2b      	ldr	r3, [pc, #172]	; (424db4 <pio_configure_pin+0x120>)
  424d08:	4798      	blx	r3
	return 1;
  424d0a:	4638      	mov	r0, r7
}
  424d0c:	b003      	add	sp, #12
  424d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  424d10:	f004 041f 	and.w	r4, r4, #31
  424d14:	2701      	movs	r7, #1
  424d16:	fa07 f404 	lsl.w	r4, r7, r4
  424d1a:	4622      	mov	r2, r4
  424d1c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424d20:	4b23      	ldr	r3, [pc, #140]	; (424db0 <pio_configure_pin+0x11c>)
  424d22:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  424d24:	ea05 0207 	and.w	r2, r5, r7
  424d28:	4621      	mov	r1, r4
  424d2a:	4630      	mov	r0, r6
  424d2c:	4b21      	ldr	r3, [pc, #132]	; (424db4 <pio_configure_pin+0x120>)
  424d2e:	4798      	blx	r3
	return 1;
  424d30:	4638      	mov	r0, r7
		break;
  424d32:	e7eb      	b.n	424d0c <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  424d34:	f004 041f 	and.w	r4, r4, #31
  424d38:	2701      	movs	r7, #1
  424d3a:	fa07 f404 	lsl.w	r4, r7, r4
  424d3e:	4622      	mov	r2, r4
  424d40:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  424d44:	4b1a      	ldr	r3, [pc, #104]	; (424db0 <pio_configure_pin+0x11c>)
  424d46:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  424d48:	ea05 0207 	and.w	r2, r5, r7
  424d4c:	4621      	mov	r1, r4
  424d4e:	4630      	mov	r0, r6
  424d50:	4b18      	ldr	r3, [pc, #96]	; (424db4 <pio_configure_pin+0x120>)
  424d52:	4798      	blx	r3
	return 1;
  424d54:	4638      	mov	r0, r7
		break;
  424d56:	e7d9      	b.n	424d0c <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  424d58:	f004 041f 	and.w	r4, r4, #31
  424d5c:	2701      	movs	r7, #1
  424d5e:	fa07 f404 	lsl.w	r4, r7, r4
  424d62:	4622      	mov	r2, r4
  424d64:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  424d68:	4b11      	ldr	r3, [pc, #68]	; (424db0 <pio_configure_pin+0x11c>)
  424d6a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  424d6c:	ea05 0207 	and.w	r2, r5, r7
  424d70:	4621      	mov	r1, r4
  424d72:	4630      	mov	r0, r6
  424d74:	4b0f      	ldr	r3, [pc, #60]	; (424db4 <pio_configure_pin+0x120>)
  424d76:	4798      	blx	r3
	return 1;
  424d78:	4638      	mov	r0, r7
		break;
  424d7a:	e7c7      	b.n	424d0c <pio_configure_pin+0x78>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  424d7c:	f004 011f 	and.w	r1, r4, #31
  424d80:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  424d82:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  424d86:	ea05 0304 	and.w	r3, r5, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  424d8a:	9300      	str	r3, [sp, #0]
  424d8c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  424d90:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  424d94:	bf14      	ite	ne
  424d96:	2200      	movne	r2, #0
  424d98:	2201      	moveq	r2, #1
  424d9a:	fa04 f101 	lsl.w	r1, r4, r1
  424d9e:	4630      	mov	r0, r6
  424da0:	4d05      	ldr	r5, [pc, #20]	; (424db8 <pio_configure_pin+0x124>)
  424da2:	47a8      	blx	r5
	return 1;
  424da4:	4620      	mov	r0, r4
		break;
  424da6:	e7b1      	b.n	424d0c <pio_configure_pin+0x78>
  424da8:	00424c6d 	.word	0x00424c6d
  424dac:	00424b55 	.word	0x00424b55
  424db0:	00424abf 	.word	0x00424abf
  424db4:	00424ab1 	.word	0x00424ab1
  424db8:	00424b9d 	.word	0x00424b9d

00424dbc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  424dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  424dbe:	4604      	mov	r4, r0
  424dc0:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  424dc2:	4b11      	ldr	r3, [pc, #68]	; (424e08 <pio_handler_process+0x4c>)
  424dc4:	4798      	blx	r3
  424dc6:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  424dc8:	4620      	mov	r0, r4
  424dca:	4b10      	ldr	r3, [pc, #64]	; (424e0c <pio_handler_process+0x50>)
  424dcc:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  424dce:	4005      	ands	r5, r0
  424dd0:	d001      	beq.n	424dd6 <pio_handler_process+0x1a>
  424dd2:	2400      	movs	r4, #0
  424dd4:	e003      	b.n	424dde <pio_handler_process+0x22>
  424dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  424dd8:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
  424dda:	2c06      	cmp	r4, #6
  424ddc:	d811      	bhi.n	424e02 <pio_handler_process+0x46>
		while (status != 0) {
  424dde:	b18d      	cbz	r5, 424e04 <pio_handler_process+0x48>
			if (gs_interrupt_sources[i].id == ul_id) {
  424de0:	0123      	lsls	r3, r4, #4
  424de2:	4a0b      	ldr	r2, [pc, #44]	; (424e10 <pio_handler_process+0x54>)
  424de4:	58d0      	ldr	r0, [r2, r3]
  424de6:	42b0      	cmp	r0, r6
  424de8:	d1f6      	bne.n	424dd8 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  424dea:	eb02 1304 	add.w	r3, r2, r4, lsl #4
  424dee:	6859      	ldr	r1, [r3, #4]
  424df0:	420d      	tst	r5, r1
  424df2:	d0f1      	beq.n	424dd8 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  424df4:	461f      	mov	r7, r3
  424df6:	68db      	ldr	r3, [r3, #12]
  424df8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  424dfa:	687b      	ldr	r3, [r7, #4]
  424dfc:	ea25 0503 	bic.w	r5, r5, r3
  424e00:	e7ea      	b.n	424dd8 <pio_handler_process+0x1c>
  424e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  424e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  424e06:	bf00      	nop
  424e08:	00424c65 	.word	0x00424c65
  424e0c:	00424c69 	.word	0x00424c69
  424e10:	20414880 	.word	0x20414880

00424e14 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  424e14:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  424e16:	210a      	movs	r1, #10
  424e18:	4801      	ldr	r0, [pc, #4]	; (424e20 <PIOA_Handler+0xc>)
  424e1a:	4b02      	ldr	r3, [pc, #8]	; (424e24 <PIOA_Handler+0x10>)
  424e1c:	4798      	blx	r3
  424e1e:	bd08      	pop	{r3, pc}
  424e20:	400e0e00 	.word	0x400e0e00
  424e24:	00424dbd 	.word	0x00424dbd

00424e28 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  424e28:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  424e2a:	210b      	movs	r1, #11
  424e2c:	4801      	ldr	r0, [pc, #4]	; (424e34 <PIOB_Handler+0xc>)
  424e2e:	4b02      	ldr	r3, [pc, #8]	; (424e38 <PIOB_Handler+0x10>)
  424e30:	4798      	blx	r3
  424e32:	bd08      	pop	{r3, pc}
  424e34:	400e1000 	.word	0x400e1000
  424e38:	00424dbd 	.word	0x00424dbd

00424e3c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  424e3c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  424e3e:	210c      	movs	r1, #12
  424e40:	4801      	ldr	r0, [pc, #4]	; (424e48 <PIOC_Handler+0xc>)
  424e42:	4b02      	ldr	r3, [pc, #8]	; (424e4c <PIOC_Handler+0x10>)
  424e44:	4798      	blx	r3
  424e46:	bd08      	pop	{r3, pc}
  424e48:	400e1200 	.word	0x400e1200
  424e4c:	00424dbd 	.word	0x00424dbd

00424e50 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  424e50:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  424e52:	2110      	movs	r1, #16
  424e54:	4801      	ldr	r0, [pc, #4]	; (424e5c <PIOD_Handler+0xc>)
  424e56:	4b02      	ldr	r3, [pc, #8]	; (424e60 <PIOD_Handler+0x10>)
  424e58:	4798      	blx	r3
  424e5a:	bd08      	pop	{r3, pc}
  424e5c:	400e1400 	.word	0x400e1400
  424e60:	00424dbd 	.word	0x00424dbd

00424e64 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  424e64:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  424e66:	2111      	movs	r1, #17
  424e68:	4801      	ldr	r0, [pc, #4]	; (424e70 <PIOE_Handler+0xc>)
  424e6a:	4b02      	ldr	r3, [pc, #8]	; (424e74 <PIOE_Handler+0x10>)
  424e6c:	4798      	blx	r3
  424e6e:	bd08      	pop	{r3, pc}
  424e70:	400e1600 	.word	0x400e1600
  424e74:	00424dbd 	.word	0x00424dbd

00424e78 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  424e78:	2803      	cmp	r0, #3
  424e7a:	d010      	beq.n	424e9e <pmc_mck_set_division+0x26>
  424e7c:	2804      	cmp	r0, #4
  424e7e:	d011      	beq.n	424ea4 <pmc_mck_set_division+0x2c>
  424e80:	2802      	cmp	r0, #2
  424e82:	d012      	beq.n	424eaa <pmc_mck_set_division+0x32>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  424e84:	2300      	movs	r3, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  424e86:	490a      	ldr	r1, [pc, #40]	; (424eb0 <pmc_mck_set_division+0x38>)
  424e88:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  424e8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  424e8e:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  424e90:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  424e92:	4b07      	ldr	r3, [pc, #28]	; (424eb0 <pmc_mck_set_division+0x38>)
  424e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  424e96:	f013 0f08 	tst.w	r3, #8
  424e9a:	d0fa      	beq.n	424e92 <pmc_mck_set_division+0x1a>
}
  424e9c:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  424e9e:	f44f 7340 	mov.w	r3, #768	; 0x300
			break;
  424ea2:	e7f0      	b.n	424e86 <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  424ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
			break;
  424ea8:	e7ed      	b.n	424e86 <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  424eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
  424eae:	e7ea      	b.n	424e86 <pmc_mck_set_division+0xe>
  424eb0:	400e0600 	.word	0x400e0600

00424eb4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  424eb4:	4a13      	ldr	r2, [pc, #76]	; (424f04 <pmc_switch_mck_to_pllack+0x50>)
  424eb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  424eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  424ebc:	4318      	orrs	r0, r3
  424ebe:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  424ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  424ec4:	4a0f      	ldr	r2, [pc, #60]	; (424f04 <pmc_switch_mck_to_pllack+0x50>)
  424ec6:	6e92      	ldr	r2, [r2, #104]	; 0x68
  424ec8:	f012 0f08 	tst.w	r2, #8
  424ecc:	d102      	bne.n	424ed4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  424ece:	b1a3      	cbz	r3, 424efa <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
  424ed0:	3b01      	subs	r3, #1
  424ed2:	e7f7      	b.n	424ec4 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  424ed4:	4a0b      	ldr	r2, [pc, #44]	; (424f04 <pmc_switch_mck_to_pllack+0x50>)
  424ed6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  424ed8:	f023 0303 	bic.w	r3, r3, #3
  424edc:	f043 0302 	orr.w	r3, r3, #2
  424ee0:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  424ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  424ee6:	4a07      	ldr	r2, [pc, #28]	; (424f04 <pmc_switch_mck_to_pllack+0x50>)
  424ee8:	6e92      	ldr	r2, [r2, #104]	; 0x68
  424eea:	f012 0f08 	tst.w	r2, #8
  424eee:	d102      	bne.n	424ef6 <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  424ef0:	b12b      	cbz	r3, 424efe <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
  424ef2:	3b01      	subs	r3, #1
  424ef4:	e7f7      	b.n	424ee6 <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
  424ef6:	2000      	movs	r0, #0
  424ef8:	4770      	bx	lr
			return 1;
  424efa:	2001      	movs	r0, #1
  424efc:	4770      	bx	lr
			return 1;
  424efe:	2001      	movs	r0, #1
}
  424f00:	4770      	bx	lr
  424f02:	bf00      	nop
  424f04:	400e0600 	.word	0x400e0600

00424f08 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  424f08:	b9a0      	cbnz	r0, 424f34 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  424f0a:	4a0e      	ldr	r2, [pc, #56]	; (424f44 <pmc_switch_mainck_to_xtal+0x3c>)
  424f0c:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  424f0e:	4b0e      	ldr	r3, [pc, #56]	; (424f48 <pmc_switch_mainck_to_xtal+0x40>)
  424f10:	4003      	ands	r3, r0
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  424f12:	0209      	lsls	r1, r1, #8
  424f14:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  424f16:	4319      	orrs	r1, r3
  424f18:	4b0c      	ldr	r3, [pc, #48]	; (424f4c <pmc_switch_mainck_to_xtal+0x44>)
  424f1a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  424f1c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  424f1e:	4b09      	ldr	r3, [pc, #36]	; (424f44 <pmc_switch_mainck_to_xtal+0x3c>)
  424f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  424f22:	f013 0f01 	tst.w	r3, #1
  424f26:	d0fa      	beq.n	424f1e <pmc_switch_mainck_to_xtal+0x16>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  424f28:	4a06      	ldr	r2, [pc, #24]	; (424f44 <pmc_switch_mainck_to_xtal+0x3c>)
  424f2a:	6a11      	ldr	r1, [r2, #32]
  424f2c:	4b08      	ldr	r3, [pc, #32]	; (424f50 <pmc_switch_mainck_to_xtal+0x48>)
  424f2e:	430b      	orrs	r3, r1
  424f30:	6213      	str	r3, [r2, #32]
  424f32:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  424f34:	4903      	ldr	r1, [pc, #12]	; (424f44 <pmc_switch_mainck_to_xtal+0x3c>)
  424f36:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  424f38:	4a06      	ldr	r2, [pc, #24]	; (424f54 <pmc_switch_mainck_to_xtal+0x4c>)
  424f3a:	401a      	ands	r2, r3
  424f3c:	4b06      	ldr	r3, [pc, #24]	; (424f58 <pmc_switch_mainck_to_xtal+0x50>)
  424f3e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  424f40:	620b      	str	r3, [r1, #32]
  424f42:	4770      	bx	lr
  424f44:	400e0600 	.word	0x400e0600
  424f48:	ffc8fffc 	.word	0xffc8fffc
  424f4c:	00370001 	.word	0x00370001
  424f50:	01370000 	.word	0x01370000
  424f54:	fec8fffc 	.word	0xfec8fffc
  424f58:	01370002 	.word	0x01370002

00424f5c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  424f5c:	4b02      	ldr	r3, [pc, #8]	; (424f68 <pmc_osc_is_ready_mainck+0xc>)
  424f5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  424f60:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  424f64:	4770      	bx	lr
  424f66:	bf00      	nop
  424f68:	400e0600 	.word	0x400e0600

00424f6c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  424f6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  424f70:	4b01      	ldr	r3, [pc, #4]	; (424f78 <pmc_disable_pllack+0xc>)
  424f72:	629a      	str	r2, [r3, #40]	; 0x28
  424f74:	4770      	bx	lr
  424f76:	bf00      	nop
  424f78:	400e0600 	.word	0x400e0600

00424f7c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  424f7c:	4b02      	ldr	r3, [pc, #8]	; (424f88 <pmc_is_locked_pllack+0xc>)
  424f7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  424f80:	f000 0002 	and.w	r0, r0, #2
  424f84:	4770      	bx	lr
  424f86:	bf00      	nop
  424f88:	400e0600 	.word	0x400e0600

00424f8c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  424f8c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  424f90:	4b05      	ldr	r3, [pc, #20]	; (424fa8 <pmc_enable_periph_clk+0x1c>)
  424f92:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  424f96:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  424f9a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  424f9e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  424fa2:	2000      	movs	r0, #0
  424fa4:	4770      	bx	lr
  424fa6:	bf00      	nop
  424fa8:	400e0600 	.word	0x400e0600

00424fac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  424fac:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  424fae:	4b07      	ldr	r3, [pc, #28]	; (424fcc <spi_enable_clock+0x20>)
  424fb0:	4298      	cmp	r0, r3
  424fb2:	d003      	beq.n	424fbc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  424fb4:	4b06      	ldr	r3, [pc, #24]	; (424fd0 <spi_enable_clock+0x24>)
  424fb6:	4298      	cmp	r0, r3
  424fb8:	d004      	beq.n	424fc4 <spi_enable_clock+0x18>
  424fba:	bd08      	pop	{r3, pc}
  424fbc:	2015      	movs	r0, #21
  424fbe:	4b05      	ldr	r3, [pc, #20]	; (424fd4 <spi_enable_clock+0x28>)
  424fc0:	4798      	blx	r3
  424fc2:	bd08      	pop	{r3, pc}
  424fc4:	202a      	movs	r0, #42	; 0x2a
  424fc6:	4b03      	ldr	r3, [pc, #12]	; (424fd4 <spi_enable_clock+0x28>)
  424fc8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  424fca:	e7f6      	b.n	424fba <spi_enable_clock+0xe>
  424fcc:	40008000 	.word	0x40008000
  424fd0:	40058000 	.word	0x40058000
  424fd4:	00424f8d 	.word	0x00424f8d

00424fd8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  424fd8:	6843      	ldr	r3, [r0, #4]
  424fda:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  424fde:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  424fe0:	6843      	ldr	r3, [r0, #4]
  424fe2:	0409      	lsls	r1, r1, #16
  424fe4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  424fe8:	430b      	orrs	r3, r1
  424fea:	6043      	str	r3, [r0, #4]
  424fec:	4770      	bx	lr

00424fee <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  424fee:	6843      	ldr	r3, [r0, #4]
  424ff0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  424ff4:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  424ff6:	6843      	ldr	r3, [r0, #4]
  424ff8:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  424ffc:	6041      	str	r1, [r0, #4]
  424ffe:	4770      	bx	lr

00425000 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  425000:	b93a      	cbnz	r2, 425012 <spi_set_clock_polarity+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  425002:	310c      	adds	r1, #12
  425004:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425008:	f023 0301 	bic.w	r3, r3, #1
  42500c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425010:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  425012:	310c      	adds	r1, #12
  425014:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425018:	f043 0301 	orr.w	r3, r3, #1
  42501c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425020:	4770      	bx	lr

00425022 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  425022:	b93a      	cbnz	r2, 425034 <spi_set_clock_phase+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  425024:	310c      	adds	r1, #12
  425026:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42502a:	f023 0302 	bic.w	r3, r3, #2
  42502e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425032:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  425034:	310c      	adds	r1, #12
  425036:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42503a:	f043 0302 	orr.w	r3, r3, #2
  42503e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425042:	4770      	bx	lr

00425044 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  425044:	2a04      	cmp	r2, #4
  425046:	d003      	beq.n	425050 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  425048:	b182      	cbz	r2, 42506c <spi_configure_cs_behavior+0x28>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  42504a:	2a08      	cmp	r2, #8
  42504c:	d01c      	beq.n	425088 <spi_configure_cs_behavior+0x44>
  42504e:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  425050:	310c      	adds	r1, #12
  425052:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425056:	f023 0308 	bic.w	r3, r3, #8
  42505a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  42505e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425062:	f043 0304 	orr.w	r3, r3, #4
  425066:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  42506a:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  42506c:	310c      	adds	r1, #12
  42506e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425072:	f023 0308 	bic.w	r3, r3, #8
  425076:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  42507a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42507e:	f023 0304 	bic.w	r3, r3, #4
  425082:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425086:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  425088:	310c      	adds	r1, #12
  42508a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42508e:	f043 0308 	orr.w	r3, r3, #8
  425092:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
  425096:	e7da      	b.n	42504e <spi_configure_cs_behavior+0xa>

00425098 <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  425098:	310c      	adds	r1, #12
  42509a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42509e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4250a2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4250a6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4250aa:	431a      	orrs	r2, r3
  4250ac:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  4250b0:	4770      	bx	lr

004250b2 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4250b2:	4401      	add	r1, r0
  4250b4:	3901      	subs	r1, #1
  4250b6:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4250ba:	1e43      	subs	r3, r0, #1
  4250bc:	2bfe      	cmp	r3, #254	; 0xfe
  4250be:	d801      	bhi.n	4250c4 <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
  4250c0:	b200      	sxth	r0, r0
  4250c2:	4770      	bx	lr
		return -1;
  4250c4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4250c8:	4770      	bx	lr

004250ca <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4250ca:	b192      	cbz	r2, 4250f2 <spi_set_baudrate_div+0x28>
{
  4250cc:	b410      	push	{r4}
  4250ce:	4614      	mov	r4, r2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4250d0:	310c      	adds	r1, #12
  4250d2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4250d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4250da:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4250de:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
  4250e2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4250e6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    return 0;
  4250ea:	2000      	movs	r0, #0
}
  4250ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4250f0:	4770      	bx	lr
        return -1;
  4250f2:	f04f 30ff 	mov.w	r0, #4294967295
  4250f6:	4770      	bx	lr

004250f8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4250f8:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4250fa:	310c      	adds	r1, #12
  4250fc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  425100:	b2a4      	uxth	r4, r4
  425102:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  425106:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
  42510a:	061b      	lsls	r3, r3, #24
  42510c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  425110:	4314      	orrs	r4, r2
  425112:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
  425116:	f85d 4b04 	ldr.w	r4, [sp], #4
  42511a:	4770      	bx	lr

0042511c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  42511c:	6943      	ldr	r3, [r0, #20]
  42511e:	f013 0f02 	tst.w	r3, #2
  425122:	d002      	beq.n	42512a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  425124:	61c1      	str	r1, [r0, #28]
	return 0;
  425126:	2000      	movs	r0, #0
  425128:	4770      	bx	lr
		return 1;
  42512a:	2001      	movs	r0, #1
}
  42512c:	4770      	bx	lr

0042512e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  42512e:	6943      	ldr	r3, [r0, #20]
  425130:	f013 0f01 	tst.w	r3, #1
  425134:	d003      	beq.n	42513e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  425136:	6983      	ldr	r3, [r0, #24]
  425138:	700b      	strb	r3, [r1, #0]
	return 0;
  42513a:	2000      	movs	r0, #0
  42513c:	4770      	bx	lr
		return 1;
  42513e:	2001      	movs	r0, #1
}
  425140:	4770      	bx	lr

00425142 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  425142:	b430      	push	{r4, r5}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  425144:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
  425148:	d317      	bcc.n	42517a <usart_set_async_baudrate+0x38>
		over = HIGH_FRQ_SAMPLE_DIV;
  42514a:	2410      	movs	r4, #16
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  42514c:	fb01 f104 	mul.w	r1, r1, r4
  425150:	084b      	lsrs	r3, r1, #1
  425152:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  425156:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  42515a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  42515c:	1e5d      	subs	r5, r3, #1
  42515e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  425162:	428d      	cmp	r5, r1
  425164:	d810      	bhi.n	425188 <usart_set_async_baudrate+0x46>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  425166:	2c08      	cmp	r4, #8
  425168:	d009      	beq.n	42517e <usart_set_async_baudrate+0x3c>
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  42516a:	0412      	lsls	r2, r2, #16
  42516c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  425170:	431a      	orrs	r2, r3
  425172:	6202      	str	r2, [r0, #32]

	return 0;
  425174:	2000      	movs	r0, #0
}
  425176:	bc30      	pop	{r4, r5}
  425178:	4770      	bx	lr
		over = LOW_FRQ_SAMPLE_DIV;
  42517a:	2408      	movs	r4, #8
  42517c:	e7e6      	b.n	42514c <usart_set_async_baudrate+0xa>
		p_usart->US_MR |= US_MR_OVER;
  42517e:	6841      	ldr	r1, [r0, #4]
  425180:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  425184:	6041      	str	r1, [r0, #4]
  425186:	e7f0      	b.n	42516a <usart_set_async_baudrate+0x28>
		return 1;
  425188:	2001      	movs	r0, #1
  42518a:	e7f4      	b.n	425176 <usart_set_async_baudrate+0x34>

0042518c <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  42518c:	2340      	movs	r3, #64	; 0x40
  42518e:	6003      	str	r3, [r0, #0]
  425190:	4770      	bx	lr

00425192 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  425192:	2388      	movs	r3, #136	; 0x88
  425194:	6003      	str	r3, [r0, #0]
  425196:	4770      	bx	lr

00425198 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  425198:	2310      	movs	r3, #16
  42519a:	6003      	str	r3, [r0, #0]
  42519c:	4770      	bx	lr

0042519e <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  42519e:	2324      	movs	r3, #36	; 0x24
  4251a0:	6003      	str	r3, [r0, #0]
  4251a2:	4770      	bx	lr

004251a4 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  4251a4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4251a8:	6003      	str	r3, [r0, #0]
  4251aa:	4770      	bx	lr

004251ac <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  4251ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4251b0:	6003      	str	r3, [r0, #0]
  4251b2:	4770      	bx	lr

004251b4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4251b4:	6943      	ldr	r3, [r0, #20]
  4251b6:	f013 0f02 	tst.w	r3, #2
  4251ba:	d004      	beq.n	4251c6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4251bc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4251c0:	61c1      	str	r1, [r0, #28]
	return 0;
  4251c2:	2000      	movs	r0, #0
  4251c4:	4770      	bx	lr
		return 1;
  4251c6:	2001      	movs	r0, #1
}
  4251c8:	4770      	bx	lr

004251ca <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4251ca:	6943      	ldr	r3, [r0, #20]
  4251cc:	f013 0f01 	tst.w	r3, #1
  4251d0:	d005      	beq.n	4251de <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4251d2:	6983      	ldr	r3, [r0, #24]
  4251d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4251d8:	600b      	str	r3, [r1, #0]

	return 0;
  4251da:	2000      	movs	r0, #0
  4251dc:	4770      	bx	lr
		return 1;
  4251de:	2001      	movs	r0, #1
}
  4251e0:	4770      	bx	lr
	...

004251e4 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4251e4:	4b01      	ldr	r3, [pc, #4]	; (4251ec <usart_disable_writeprotect+0x8>)
  4251e6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  4251ea:	4770      	bx	lr
  4251ec:	55534100 	.word	0x55534100

004251f0 <usart_reset>:
{
  4251f0:	b510      	push	{r4, lr}
  4251f2:	4604      	mov	r4, r0
	usart_disable_writeprotect(p_usart);
  4251f4:	4b09      	ldr	r3, [pc, #36]	; (42521c <usart_reset+0x2c>)
  4251f6:	4798      	blx	r3
	p_usart->US_MR = 0;
  4251f8:	2300      	movs	r3, #0
  4251fa:	6063      	str	r3, [r4, #4]
	p_usart->US_RTOR = 0;
  4251fc:	6263      	str	r3, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4251fe:	62a3      	str	r3, [r4, #40]	; 0x28
	usart_reset_tx(p_usart);
  425200:	4620      	mov	r0, r4
  425202:	4b07      	ldr	r3, [pc, #28]	; (425220 <usart_reset+0x30>)
  425204:	4798      	blx	r3
	usart_reset_rx(p_usart);
  425206:	4620      	mov	r0, r4
  425208:	4b06      	ldr	r3, [pc, #24]	; (425224 <usart_reset+0x34>)
  42520a:	4798      	blx	r3
	usart_reset_status(p_usart);
  42520c:	4620      	mov	r0, r4
  42520e:	4b06      	ldr	r3, [pc, #24]	; (425228 <usart_reset+0x38>)
  425210:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
  425212:	4620      	mov	r0, r4
  425214:	4b05      	ldr	r3, [pc, #20]	; (42522c <usart_reset+0x3c>)
  425216:	4798      	blx	r3
  425218:	bd10      	pop	{r4, pc}
  42521a:	bf00      	nop
  42521c:	004251e5 	.word	0x004251e5
  425220:	00425193 	.word	0x00425193
  425224:	0042519f 	.word	0x0042519f
  425228:	004251a5 	.word	0x004251a5
  42522c:	004251ad 	.word	0x004251ad

00425230 <usart_init_rs232>:
{
  425230:	b570      	push	{r4, r5, r6, lr}
  425232:	4605      	mov	r5, r0
  425234:	460c      	mov	r4, r1
  425236:	4616      	mov	r6, r2
	usart_reset(p_usart);
  425238:	4b10      	ldr	r3, [pc, #64]	; (42527c <usart_init_rs232+0x4c>)
  42523a:	4798      	blx	r3
	ul_reg_val = 0;
  42523c:	2200      	movs	r2, #0
  42523e:	4b10      	ldr	r3, [pc, #64]	; (425280 <usart_init_rs232+0x50>)
  425240:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  425242:	b1b4      	cbz	r4, 425272 <usart_init_rs232+0x42>
  425244:	4632      	mov	r2, r6
  425246:	6821      	ldr	r1, [r4, #0]
  425248:	4628      	mov	r0, r5
  42524a:	4b0e      	ldr	r3, [pc, #56]	; (425284 <usart_init_rs232+0x54>)
  42524c:	4798      	blx	r3
  42524e:	4602      	mov	r2, r0
  425250:	b988      	cbnz	r0, 425276 <usart_init_rs232+0x46>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  425252:	6863      	ldr	r3, [r4, #4]
  425254:	68a1      	ldr	r1, [r4, #8]
  425256:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  425258:	6921      	ldr	r1, [r4, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  42525a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  42525c:	68e1      	ldr	r1, [r4, #12]
  42525e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  425260:	4907      	ldr	r1, [pc, #28]	; (425280 <usart_init_rs232+0x50>)
  425262:	6808      	ldr	r0, [r1, #0]
  425264:	4303      	orrs	r3, r0
  425266:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  425268:	6869      	ldr	r1, [r5, #4]
  42526a:	430b      	orrs	r3, r1
  42526c:	606b      	str	r3, [r5, #4]
}
  42526e:	4610      	mov	r0, r2
  425270:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  425272:	2201      	movs	r2, #1
  425274:	e7fb      	b.n	42526e <usart_init_rs232+0x3e>
  425276:	2201      	movs	r2, #1
  425278:	e7f9      	b.n	42526e <usart_init_rs232+0x3e>
  42527a:	bf00      	nop
  42527c:	004251f1 	.word	0x004251f1
  425280:	204148f0 	.word	0x204148f0
  425284:	00425143 	.word	0x00425143

00425288 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  425288:	e7fe      	b.n	425288 <Dummy_Handler>
	...

0042528c <Reset_Handler>:
{
  42528c:	b500      	push	{lr}
  42528e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  425290:	4b1e      	ldr	r3, [pc, #120]	; (42530c <Reset_Handler+0x80>)
  425292:	4a1f      	ldr	r2, [pc, #124]	; (425310 <Reset_Handler+0x84>)
  425294:	429a      	cmp	r2, r3
  425296:	d009      	beq.n	4252ac <Reset_Handler+0x20>
  425298:	4b1c      	ldr	r3, [pc, #112]	; (42530c <Reset_Handler+0x80>)
  42529a:	4a1d      	ldr	r2, [pc, #116]	; (425310 <Reset_Handler+0x84>)
  42529c:	e003      	b.n	4252a6 <Reset_Handler+0x1a>
                        *pDest++ = *pSrc++;
  42529e:	6811      	ldr	r1, [r2, #0]
  4252a0:	6019      	str	r1, [r3, #0]
  4252a2:	3304      	adds	r3, #4
  4252a4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4252a6:	491b      	ldr	r1, [pc, #108]	; (425314 <Reset_Handler+0x88>)
  4252a8:	428b      	cmp	r3, r1
  4252aa:	d3f8      	bcc.n	42529e <Reset_Handler+0x12>
                        *pDest++ = *pSrc++;
  4252ac:	4b1a      	ldr	r3, [pc, #104]	; (425318 <Reset_Handler+0x8c>)
  4252ae:	e002      	b.n	4252b6 <Reset_Handler+0x2a>
                *pDest++ = 0;
  4252b0:	2200      	movs	r2, #0
  4252b2:	601a      	str	r2, [r3, #0]
  4252b4:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4252b6:	4a19      	ldr	r2, [pc, #100]	; (42531c <Reset_Handler+0x90>)
  4252b8:	4293      	cmp	r3, r2
  4252ba:	d3f9      	bcc.n	4252b0 <Reset_Handler+0x24>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4252bc:	4a18      	ldr	r2, [pc, #96]	; (425320 <Reset_Handler+0x94>)
  4252be:	4b19      	ldr	r3, [pc, #100]	; (425324 <Reset_Handler+0x98>)
  4252c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4252c4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4252c6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4252ca:	fab3 f383 	clz	r3, r3
  4252ce:	095b      	lsrs	r3, r3, #5
  4252d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4252d2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4252d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4252d8:	2200      	movs	r2, #0
  4252da:	4b13      	ldr	r3, [pc, #76]	; (425328 <Reset_Handler+0x9c>)
  4252dc:	701a      	strb	r2, [r3, #0]
	return flags;
  4252de:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4252e0:	4a12      	ldr	r2, [pc, #72]	; (42532c <Reset_Handler+0xa0>)
  4252e2:	6813      	ldr	r3, [r2, #0]
  4252e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4252e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4252ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4252ee:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  4252f2:	b129      	cbz	r1, 425300 <Reset_Handler+0x74>
		cpu_irq_enable();
  4252f4:	2201      	movs	r2, #1
  4252f6:	4b0c      	ldr	r3, [pc, #48]	; (425328 <Reset_Handler+0x9c>)
  4252f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4252fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4252fe:	b662      	cpsie	i
        __libc_init_array();
  425300:	4b0b      	ldr	r3, [pc, #44]	; (425330 <Reset_Handler+0xa4>)
  425302:	4798      	blx	r3
        main();
  425304:	4b0b      	ldr	r3, [pc, #44]	; (425334 <Reset_Handler+0xa8>)
  425306:	4798      	blx	r3
  425308:	e7fe      	b.n	425308 <Reset_Handler+0x7c>
  42530a:	bf00      	nop
  42530c:	20400000 	.word	0x20400000
  425310:	00431b8c 	.word	0x00431b8c
  425314:	20400a98 	.word	0x20400a98
  425318:	20400a98 	.word	0x20400a98
  42531c:	2043a814 	.word	0x2043a814
  425320:	e000ed00 	.word	0xe000ed00
  425324:	00400000 	.word	0x00400000
  425328:	204000e4 	.word	0x204000e4
  42532c:	e000ed88 	.word	0xe000ed88
  425330:	00427201 	.word	0x00427201
  425334:	00426435 	.word	0x00426435

00425338 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  425338:	4b3c      	ldr	r3, [pc, #240]	; (42542c <SystemCoreClockUpdate+0xf4>)
  42533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  42533c:	f003 0303 	and.w	r3, r3, #3
  425340:	2b01      	cmp	r3, #1
  425342:	d020      	beq.n	425386 <SystemCoreClockUpdate+0x4e>
  425344:	b183      	cbz	r3, 425368 <SystemCoreClockUpdate+0x30>
  425346:	2b02      	cmp	r3, #2
  425348:	d039      	beq.n	4253be <SystemCoreClockUpdate+0x86>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  42534a:	4b38      	ldr	r3, [pc, #224]	; (42542c <SystemCoreClockUpdate+0xf4>)
  42534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  42534e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  425352:	2b70      	cmp	r3, #112	; 0x70
  425354:	d062      	beq.n	42541c <SystemCoreClockUpdate+0xe4>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  425356:	4b35      	ldr	r3, [pc, #212]	; (42542c <SystemCoreClockUpdate+0xf4>)
  425358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  42535a:	f3c2 1202 	ubfx	r2, r2, #4, #3
  42535e:	4934      	ldr	r1, [pc, #208]	; (425430 <SystemCoreClockUpdate+0xf8>)
  425360:	680b      	ldr	r3, [r1, #0]
  425362:	40d3      	lsrs	r3, r2
  425364:	600b      	str	r3, [r1, #0]
  425366:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  425368:	4b32      	ldr	r3, [pc, #200]	; (425434 <SystemCoreClockUpdate+0xfc>)
  42536a:	695b      	ldr	r3, [r3, #20]
  42536c:	f013 0f80 	tst.w	r3, #128	; 0x80
  425370:	d004      	beq.n	42537c <SystemCoreClockUpdate+0x44>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  425372:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  425376:	4b2e      	ldr	r3, [pc, #184]	; (425430 <SystemCoreClockUpdate+0xf8>)
  425378:	601a      	str	r2, [r3, #0]
  42537a:	e7e6      	b.n	42534a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  42537c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  425380:	4b2b      	ldr	r3, [pc, #172]	; (425430 <SystemCoreClockUpdate+0xf8>)
  425382:	601a      	str	r2, [r3, #0]
  425384:	e7e1      	b.n	42534a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  425386:	4b29      	ldr	r3, [pc, #164]	; (42542c <SystemCoreClockUpdate+0xf4>)
  425388:	6a1b      	ldr	r3, [r3, #32]
  42538a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  42538e:	d003      	beq.n	425398 <SystemCoreClockUpdate+0x60>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  425390:	4a29      	ldr	r2, [pc, #164]	; (425438 <SystemCoreClockUpdate+0x100>)
  425392:	4b27      	ldr	r3, [pc, #156]	; (425430 <SystemCoreClockUpdate+0xf8>)
  425394:	601a      	str	r2, [r3, #0]
  425396:	e7d8      	b.n	42534a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  425398:	4a28      	ldr	r2, [pc, #160]	; (42543c <SystemCoreClockUpdate+0x104>)
  42539a:	4b25      	ldr	r3, [pc, #148]	; (425430 <SystemCoreClockUpdate+0xf8>)
  42539c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  42539e:	4b23      	ldr	r3, [pc, #140]	; (42542c <SystemCoreClockUpdate+0xf4>)
  4253a0:	6a1b      	ldr	r3, [r3, #32]
  4253a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4253a6:	2b10      	cmp	r3, #16
  4253a8:	d005      	beq.n	4253b6 <SystemCoreClockUpdate+0x7e>
  4253aa:	2b20      	cmp	r3, #32
  4253ac:	d1cd      	bne.n	42534a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4253ae:	4a22      	ldr	r2, [pc, #136]	; (425438 <SystemCoreClockUpdate+0x100>)
  4253b0:	4b1f      	ldr	r3, [pc, #124]	; (425430 <SystemCoreClockUpdate+0xf8>)
  4253b2:	601a      	str	r2, [r3, #0]
          break;
  4253b4:	e7c9      	b.n	42534a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4253b6:	4a22      	ldr	r2, [pc, #136]	; (425440 <SystemCoreClockUpdate+0x108>)
  4253b8:	4b1d      	ldr	r3, [pc, #116]	; (425430 <SystemCoreClockUpdate+0xf8>)
  4253ba:	601a      	str	r2, [r3, #0]
          break;
  4253bc:	e7c5      	b.n	42534a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4253be:	4b1b      	ldr	r3, [pc, #108]	; (42542c <SystemCoreClockUpdate+0xf4>)
  4253c0:	6a1b      	ldr	r3, [r3, #32]
  4253c2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4253c6:	d016      	beq.n	4253f6 <SystemCoreClockUpdate+0xbe>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4253c8:	4a1b      	ldr	r2, [pc, #108]	; (425438 <SystemCoreClockUpdate+0x100>)
  4253ca:	4b19      	ldr	r3, [pc, #100]	; (425430 <SystemCoreClockUpdate+0xf8>)
  4253cc:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4253ce:	4b17      	ldr	r3, [pc, #92]	; (42542c <SystemCoreClockUpdate+0xf4>)
  4253d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4253d2:	f003 0303 	and.w	r3, r3, #3
  4253d6:	2b02      	cmp	r3, #2
  4253d8:	d1b7      	bne.n	42534a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4253da:	4814      	ldr	r0, [pc, #80]	; (42542c <SystemCoreClockUpdate+0xf4>)
  4253dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  4253de:	f3c2 420a 	ubfx	r2, r2, #16, #11
  4253e2:	4913      	ldr	r1, [pc, #76]	; (425430 <SystemCoreClockUpdate+0xf8>)
  4253e4:	680b      	ldr	r3, [r1, #0]
  4253e6:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4253ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
  4253ec:	b2d2      	uxtb	r2, r2
  4253ee:	fbb3 f3f2 	udiv	r3, r3, r2
  4253f2:	600b      	str	r3, [r1, #0]
  4253f4:	e7a9      	b.n	42534a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4253f6:	4a11      	ldr	r2, [pc, #68]	; (42543c <SystemCoreClockUpdate+0x104>)
  4253f8:	4b0d      	ldr	r3, [pc, #52]	; (425430 <SystemCoreClockUpdate+0xf8>)
  4253fa:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4253fc:	4b0b      	ldr	r3, [pc, #44]	; (42542c <SystemCoreClockUpdate+0xf4>)
  4253fe:	6a1b      	ldr	r3, [r3, #32]
  425400:	f003 0370 	and.w	r3, r3, #112	; 0x70
  425404:	2b10      	cmp	r3, #16
  425406:	d005      	beq.n	425414 <SystemCoreClockUpdate+0xdc>
  425408:	2b20      	cmp	r3, #32
  42540a:	d1e0      	bne.n	4253ce <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 3U;
  42540c:	4a0a      	ldr	r2, [pc, #40]	; (425438 <SystemCoreClockUpdate+0x100>)
  42540e:	4b08      	ldr	r3, [pc, #32]	; (425430 <SystemCoreClockUpdate+0xf8>)
  425410:	601a      	str	r2, [r3, #0]
          break;
  425412:	e7dc      	b.n	4253ce <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 2U;
  425414:	4a0a      	ldr	r2, [pc, #40]	; (425440 <SystemCoreClockUpdate+0x108>)
  425416:	4b06      	ldr	r3, [pc, #24]	; (425430 <SystemCoreClockUpdate+0xf8>)
  425418:	601a      	str	r2, [r3, #0]
          break;
  42541a:	e7d8      	b.n	4253ce <SystemCoreClockUpdate+0x96>
    SystemCoreClock /= 3U;
  42541c:	4a04      	ldr	r2, [pc, #16]	; (425430 <SystemCoreClockUpdate+0xf8>)
  42541e:	6813      	ldr	r3, [r2, #0]
  425420:	4908      	ldr	r1, [pc, #32]	; (425444 <SystemCoreClockUpdate+0x10c>)
  425422:	fba1 1303 	umull	r1, r3, r1, r3
  425426:	085b      	lsrs	r3, r3, #1
  425428:	6013      	str	r3, [r2, #0]
  42542a:	4770      	bx	lr
  42542c:	400e0600 	.word	0x400e0600
  425430:	204000e8 	.word	0x204000e8
  425434:	400e1810 	.word	0x400e1810
  425438:	00b71b00 	.word	0x00b71b00
  42543c:	003d0900 	.word	0x003d0900
  425440:	007a1200 	.word	0x007a1200
  425444:	aaaaaaab 	.word	0xaaaaaaab

00425448 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  425448:	4b17      	ldr	r3, [pc, #92]	; (4254a8 <system_init_flash+0x60>)
  42544a:	4298      	cmp	r0, r3
  42544c:	d912      	bls.n	425474 <system_init_flash+0x2c>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  42544e:	4b17      	ldr	r3, [pc, #92]	; (4254ac <system_init_flash+0x64>)
  425450:	4298      	cmp	r0, r3
  425452:	d914      	bls.n	42547e <system_init_flash+0x36>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  425454:	4b16      	ldr	r3, [pc, #88]	; (4254b0 <system_init_flash+0x68>)
  425456:	4298      	cmp	r0, r3
  425458:	d915      	bls.n	425486 <system_init_flash+0x3e>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  42545a:	4b16      	ldr	r3, [pc, #88]	; (4254b4 <system_init_flash+0x6c>)
  42545c:	4298      	cmp	r0, r3
  42545e:	d916      	bls.n	42548e <system_init_flash+0x46>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  425460:	4b15      	ldr	r3, [pc, #84]	; (4254b8 <system_init_flash+0x70>)
  425462:	4298      	cmp	r0, r3
  425464:	d917      	bls.n	425496 <system_init_flash+0x4e>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  425466:	4b15      	ldr	r3, [pc, #84]	; (4254bc <system_init_flash+0x74>)
  425468:	4298      	cmp	r0, r3
  42546a:	d919      	bls.n	4254a0 <system_init_flash+0x58>
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  42546c:	4a14      	ldr	r2, [pc, #80]	; (4254c0 <system_init_flash+0x78>)
  42546e:	4b15      	ldr	r3, [pc, #84]	; (4254c4 <system_init_flash+0x7c>)
  425470:	601a      	str	r2, [r3, #0]
  425472:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  425474:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  425478:	4b12      	ldr	r3, [pc, #72]	; (4254c4 <system_init_flash+0x7c>)
  42547a:	601a      	str	r2, [r3, #0]
  42547c:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  42547e:	4a12      	ldr	r2, [pc, #72]	; (4254c8 <system_init_flash+0x80>)
  425480:	4b10      	ldr	r3, [pc, #64]	; (4254c4 <system_init_flash+0x7c>)
  425482:	601a      	str	r2, [r3, #0]
  425484:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  425486:	4a11      	ldr	r2, [pc, #68]	; (4254cc <system_init_flash+0x84>)
  425488:	4b0e      	ldr	r3, [pc, #56]	; (4254c4 <system_init_flash+0x7c>)
  42548a:	601a      	str	r2, [r3, #0]
  42548c:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  42548e:	4a10      	ldr	r2, [pc, #64]	; (4254d0 <system_init_flash+0x88>)
  425490:	4b0c      	ldr	r3, [pc, #48]	; (4254c4 <system_init_flash+0x7c>)
  425492:	601a      	str	r2, [r3, #0]
  425494:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  425496:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  42549a:	4b0a      	ldr	r3, [pc, #40]	; (4254c4 <system_init_flash+0x7c>)
  42549c:	601a      	str	r2, [r3, #0]
  42549e:	4770      	bx	lr
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4254a0:	4a0c      	ldr	r2, [pc, #48]	; (4254d4 <system_init_flash+0x8c>)
  4254a2:	4b08      	ldr	r3, [pc, #32]	; (4254c4 <system_init_flash+0x7c>)
  4254a4:	601a      	str	r2, [r3, #0]
  4254a6:	4770      	bx	lr
  4254a8:	015ef3bf 	.word	0x015ef3bf
  4254ac:	02bde77f 	.word	0x02bde77f
  4254b0:	041cdb3f 	.word	0x041cdb3f
  4254b4:	057bceff 	.word	0x057bceff
  4254b8:	06dac2bf 	.word	0x06dac2bf
  4254bc:	0839b67f 	.word	0x0839b67f
  4254c0:	04000600 	.word	0x04000600
  4254c4:	400e0c00 	.word	0x400e0c00
  4254c8:	04000100 	.word	0x04000100
  4254cc:	04000200 	.word	0x04000200
  4254d0:	04000300 	.word	0x04000300
  4254d4:	04000500 	.word	0x04000500

004254d8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4254d8:	4b0a      	ldr	r3, [pc, #40]	; (425504 <_sbrk+0x2c>)
  4254da:	681b      	ldr	r3, [r3, #0]
  4254dc:	b153      	cbz	r3, 4254f4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4254de:	4b09      	ldr	r3, [pc, #36]	; (425504 <_sbrk+0x2c>)
  4254e0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4254e2:	181a      	adds	r2, r3, r0
  4254e4:	4908      	ldr	r1, [pc, #32]	; (425508 <_sbrk+0x30>)
  4254e6:	4291      	cmp	r1, r2
  4254e8:	db08      	blt.n	4254fc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4254ea:	4610      	mov	r0, r2
  4254ec:	4a05      	ldr	r2, [pc, #20]	; (425504 <_sbrk+0x2c>)
  4254ee:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4254f0:	4618      	mov	r0, r3
  4254f2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4254f4:	4a05      	ldr	r2, [pc, #20]	; (42550c <_sbrk+0x34>)
  4254f6:	4b03      	ldr	r3, [pc, #12]	; (425504 <_sbrk+0x2c>)
  4254f8:	601a      	str	r2, [r3, #0]
  4254fa:	e7f0      	b.n	4254de <_sbrk+0x6>
		return (caddr_t) -1;	
  4254fc:	f04f 30ff 	mov.w	r0, #4294967295
}
  425500:	4770      	bx	lr
  425502:	bf00      	nop
  425504:	204148f4 	.word	0x204148f4
  425508:	2045fffc 	.word	0x2045fffc
  42550c:	2043ca18 	.word	0x2043ca18

00425510 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  425510:	f04f 30ff 	mov.w	r0, #4294967295
  425514:	4770      	bx	lr

00425516 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  425516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  42551a:	604b      	str	r3, [r1, #4]

	return 0;
}
  42551c:	2000      	movs	r0, #0
  42551e:	4770      	bx	lr

00425520 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  425520:	2001      	movs	r0, #1
  425522:	4770      	bx	lr

00425524 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  425524:	2000      	movs	r0, #0
  425526:	4770      	bx	lr

00425528 <event_handler>:

/************************************************************************/
/* HANDLERS E EVENTS                                                               */
/************************************************************************/

static void event_handler(lv_obj_t * obj, lv_event_t event) {
  425528:	b508      	push	{r3, lr}
	if(event == LV_EVENT_CLICKED) {
  42552a:	2906      	cmp	r1, #6
  42552c:	d002      	beq.n	425534 <event_handler+0xc>
		printf("Clicked\n");
	}
	else if(event == LV_EVENT_VALUE_CHANGED) {
  42552e:	2910      	cmp	r1, #16
  425530:	d004      	beq.n	42553c <event_handler+0x14>
  425532:	bd08      	pop	{r3, pc}
		printf("Clicked\n");
  425534:	4803      	ldr	r0, [pc, #12]	; (425544 <event_handler+0x1c>)
  425536:	4b04      	ldr	r3, [pc, #16]	; (425548 <event_handler+0x20>)
  425538:	4798      	blx	r3
  42553a:	bd08      	pop	{r3, pc}
		printf("Toggled\n");
  42553c:	4803      	ldr	r0, [pc, #12]	; (42554c <event_handler+0x24>)
  42553e:	4b02      	ldr	r3, [pc, #8]	; (425548 <event_handler+0x20>)
  425540:	4798      	blx	r3
	}
}
  425542:	e7f6      	b.n	425532 <event_handler+0xa>
  425544:	00430ffc 	.word	0x00430ffc
  425548:	00427251 	.word	0x00427251
  42554c:	00431008 	.word	0x00431008

00425550 <my_flush_cb>:

/************************************************************************/
/* port lvgl                                                            */
/************************************************************************/

void my_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p) {
  425550:	b570      	push	{r4, r5, r6, lr}
  425552:	4605      	mov	r5, r0
  425554:	460c      	mov	r4, r1
  425556:	4616      	mov	r6, r2
	ili9341_set_top_left_limit(area->x1, area->y1);   ili9341_set_bottom_right_limit(area->x2, area->y2);
  425558:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  42555c:	f9b4 0000 	ldrsh.w	r0, [r4]
  425560:	4b0d      	ldr	r3, [pc, #52]	; (425598 <my_flush_cb+0x48>)
  425562:	4798      	blx	r3
  425564:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  425568:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  42556c:	4b0b      	ldr	r3, [pc, #44]	; (42559c <my_flush_cb+0x4c>)
  42556e:	4798      	blx	r3
	ili9341_copy_pixels_to_screen(color_p,  (area->x2 - area->x1) * (area->y2 - area->y1));
  425570:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  425574:	f9b4 1000 	ldrsh.w	r1, [r4]
  425578:	1a5b      	subs	r3, r3, r1
  42557a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  42557e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  425582:	1a89      	subs	r1, r1, r2
  425584:	fb01 f103 	mul.w	r1, r1, r3
  425588:	4630      	mov	r0, r6
  42558a:	4b05      	ldr	r3, [pc, #20]	; (4255a0 <my_flush_cb+0x50>)
  42558c:	4798      	blx	r3
	
	/* IMPORTANT!!!
	* Inform the graphics library that you are ready with the flushing*/
	lv_disp_flush_ready(disp_drv);
  42558e:	4628      	mov	r0, r5
  425590:	4b04      	ldr	r3, [pc, #16]	; (4255a4 <my_flush_cb+0x54>)
  425592:	4798      	blx	r3
  425594:	bd70      	pop	{r4, r5, r6, pc}
  425596:	bf00      	nop
  425598:	00400ee9 	.word	0x00400ee9
  42559c:	00400f09 	.word	0x00400f09
  4255a0:	00400f59 	.word	0x00400f59
  4255a4:	00414dc5 	.word	0x00414dc5

004255a8 <my_input_read>:
}

bool my_input_read(lv_indev_drv_t * drv, lv_indev_data_t*data) {
  4255a8:	b510      	push	{r4, lr}
  4255aa:	b082      	sub	sp, #8
  4255ac:	460c      	mov	r4, r1
	int px, py, pressed;
	
	if (readPoint(&px, &py)) {
  4255ae:	4669      	mov	r1, sp
  4255b0:	a801      	add	r0, sp, #4
  4255b2:	4b07      	ldr	r3, [pc, #28]	; (4255d0 <my_input_read+0x28>)
  4255b4:	4798      	blx	r3
  4255b6:	b940      	cbnz	r0, 4255ca <my_input_read+0x22>
		data->state = LV_INDEV_STATE_PR;
	}
	else {
		data->state = LV_INDEV_STATE_REL;
  4255b8:	2300      	movs	r3, #0
  4255ba:	73a3      	strb	r3, [r4, #14]
	}
	
	data->point.x = px;
  4255bc:	9b01      	ldr	r3, [sp, #4]
  4255be:	8023      	strh	r3, [r4, #0]
	data->point.y = py;
  4255c0:	9b00      	ldr	r3, [sp, #0]
  4255c2:	8063      	strh	r3, [r4, #2]
	return false; /*No buffering now so no more data read*/
}
  4255c4:	2000      	movs	r0, #0
  4255c6:	b002      	add	sp, #8
  4255c8:	bd10      	pop	{r4, pc}
		data->state = LV_INDEV_STATE_PR;
  4255ca:	2301      	movs	r3, #1
  4255cc:	73a3      	strb	r3, [r4, #14]
  4255ce:	e7f5      	b.n	4255bc <my_input_read+0x14>
  4255d0:	00400c45 	.word	0x00400c45

004255d4 <AFEC_pot_Callback>:
static void AFEC_pot_Callback(void){
  4255d4:	b510      	push	{r4, lr}
  4255d6:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  4255d8:	4b0a      	ldr	r3, [pc, #40]	; (425604 <AFEC_pot_Callback+0x30>)
  4255da:	2206      	movs	r2, #6
  4255dc:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4255de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	g_ul_value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  4255e0:	4b09      	ldr	r3, [pc, #36]	; (425608 <AFEC_pot_Callback+0x34>)
  4255e2:	601a      	str	r2, [r3, #0]
	g_is_conversion_done = true;
  4255e4:	2101      	movs	r1, #1
  4255e6:	4a09      	ldr	r2, [pc, #36]	; (42560c <AFEC_pot_Callback+0x38>)
  4255e8:	7011      	strb	r1, [r2, #0]
	ecg.value=g_ul_value;
  4255ea:	681b      	ldr	r3, [r3, #0]
  4255ec:	a902      	add	r1, sp, #8
  4255ee:	f841 3d04 	str.w	r3, [r1, #-4]!
	xQueueSendFromISR(xQueueECG,&ecg,0);
  4255f2:	2300      	movs	r3, #0
  4255f4:	461a      	mov	r2, r3
  4255f6:	4806      	ldr	r0, [pc, #24]	; (425610 <AFEC_pot_Callback+0x3c>)
  4255f8:	6800      	ldr	r0, [r0, #0]
  4255fa:	4c06      	ldr	r4, [pc, #24]	; (425614 <AFEC_pot_Callback+0x40>)
  4255fc:	47a0      	blx	r4
}
  4255fe:	b002      	add	sp, #8
  425600:	bd10      	pop	{r4, pc}
  425602:	bf00      	nop
  425604:	40064000 	.word	0x40064000
  425608:	2043a138 	.word	0x2043a138
  42560c:	2043a134 	.word	0x2043a134
  425610:	2043a3e4 	.word	0x2043a3e4
  425614:	004020c9 	.word	0x004020c9

00425618 <RTT_init>:
{
  425618:	b570      	push	{r4, r5, r6, lr}
  42561a:	4605      	mov	r5, r0
  42561c:	460e      	mov	r6, r1
	rtt_sel_source(RTT, false);
  42561e:	4c13      	ldr	r4, [pc, #76]	; (42566c <RTT_init+0x54>)
  425620:	2100      	movs	r1, #0
  425622:	4620      	mov	r0, r4
  425624:	4b12      	ldr	r3, [pc, #72]	; (425670 <RTT_init+0x58>)
  425626:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  425628:	4629      	mov	r1, r5
  42562a:	4620      	mov	r0, r4
  42562c:	4b11      	ldr	r3, [pc, #68]	; (425674 <RTT_init+0x5c>)
  42562e:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  425630:	4620      	mov	r0, r4
  425632:	4b11      	ldr	r3, [pc, #68]	; (425678 <RTT_init+0x60>)
  425634:	4798      	blx	r3
  425636:	4604      	mov	r4, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  425638:	480c      	ldr	r0, [pc, #48]	; (42566c <RTT_init+0x54>)
  42563a:	4b0f      	ldr	r3, [pc, #60]	; (425678 <RTT_init+0x60>)
  42563c:	4798      	blx	r3
  42563e:	4284      	cmp	r4, r0
  425640:	d0fa      	beq.n	425638 <RTT_init+0x20>
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  425642:	4d0a      	ldr	r5, [pc, #40]	; (42566c <RTT_init+0x54>)
  425644:	19a1      	adds	r1, r4, r6
  425646:	4628      	mov	r0, r5
  425648:	4b0c      	ldr	r3, [pc, #48]	; (42567c <RTT_init+0x64>)
  42564a:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  42564c:	4b0c      	ldr	r3, [pc, #48]	; (425680 <RTT_init+0x68>)
  42564e:	2208      	movs	r2, #8
  425650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  425654:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  425658:	2180      	movs	r1, #128	; 0x80
  42565a:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  42565e:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN | RTT_MR_RTTINCIEN);
  425660:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  425664:	4628      	mov	r0, r5
  425666:	4b07      	ldr	r3, [pc, #28]	; (425684 <RTT_init+0x6c>)
  425668:	4798      	blx	r3
  42566a:	bd70      	pop	{r4, r5, r6, pc}
  42566c:	400e1830 	.word	0x400e1830
  425670:	00400711 	.word	0x00400711
  425674:	004006fd 	.word	0x004006fd
  425678:	00400765 	.word	0x00400765
  42567c:	00400779 	.word	0x00400779
  425680:	e000e100 	.word	0xe000e100
  425684:	0040073d 	.word	0x0040073d

00425688 <config_AFEC_pot>:
static void config_AFEC_pot(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback){
  425688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42568c:	b08a      	sub	sp, #40	; 0x28
  42568e:	4604      	mov	r4, r0
  425690:	460d      	mov	r5, r1
  425692:	4616      	mov	r6, r2
  425694:	4698      	mov	r8, r3
	afec_enable(afec);
  425696:	4b21      	ldr	r3, [pc, #132]	; (42571c <config_AFEC_pot+0x94>)
  425698:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  42569a:	a804      	add	r0, sp, #16
  42569c:	4b20      	ldr	r3, [pc, #128]	; (425720 <config_AFEC_pot+0x98>)
  42569e:	4798      	blx	r3
	afec_init(afec, &afec_cfg);
  4256a0:	a904      	add	r1, sp, #16
  4256a2:	4620      	mov	r0, r4
  4256a4:	4b1f      	ldr	r3, [pc, #124]	; (425724 <config_AFEC_pot+0x9c>)
  4256a6:	4798      	blx	r3
	reg = afec->AFEC_MR;
  4256a8:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4256aa:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  4256ae:	6063      	str	r3, [r4, #4]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4256b0:	a803      	add	r0, sp, #12
  4256b2:	4b1d      	ldr	r3, [pc, #116]	; (425728 <config_AFEC_pot+0xa0>)
  4256b4:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4256b6:	2300      	movs	r3, #0
  4256b8:	f88d 300d 	strb.w	r3, [sp, #13]
	afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  4256bc:	b2b7      	uxth	r7, r6
  4256be:	aa03      	add	r2, sp, #12
  4256c0:	4639      	mov	r1, r7
  4256c2:	4620      	mov	r0, r4
  4256c4:	4b19      	ldr	r3, [pc, #100]	; (42572c <config_AFEC_pot+0xa4>)
  4256c6:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4256c8:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4256ca:	f44f 7300 	mov.w	r3, #512	; 0x200
  4256ce:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  4256d0:	a801      	add	r0, sp, #4
  4256d2:	4b17      	ldr	r3, [pc, #92]	; (425730 <config_AFEC_pot+0xa8>)
  4256d4:	4798      	blx	r3
	afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  4256d6:	a901      	add	r1, sp, #4
  4256d8:	4620      	mov	r0, r4
  4256da:	4b16      	ldr	r3, [pc, #88]	; (425734 <config_AFEC_pot+0xac>)
  4256dc:	4798      	blx	r3
	afec_set_callback(afec, afec_channel,	callback, 1);
  4256de:	2301      	movs	r3, #1
  4256e0:	4642      	mov	r2, r8
  4256e2:	4631      	mov	r1, r6
  4256e4:	4620      	mov	r0, r4
  4256e6:	4c14      	ldr	r4, [pc, #80]	; (425738 <config_AFEC_pot+0xb0>)
  4256e8:	47a0      	blx	r4
	NVIC_SetPriority(afec_id, 4);
  4256ea:	b26b      	sxtb	r3, r5
  if(IRQn < 0) {
  4256ec:	2b00      	cmp	r3, #0
  4256ee:	db0e      	blt.n	42570e <config_AFEC_pot+0x86>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4256f0:	4a12      	ldr	r2, [pc, #72]	; (42573c <config_AFEC_pot+0xb4>)
  4256f2:	2180      	movs	r1, #128	; 0x80
  4256f4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4256f6:	095b      	lsrs	r3, r3, #5
  4256f8:	f005 051f 	and.w	r5, r5, #31
  4256fc:	2201      	movs	r2, #1
  4256fe:	fa02 f505 	lsl.w	r5, r2, r5
  425702:	4a0f      	ldr	r2, [pc, #60]	; (425740 <config_AFEC_pot+0xb8>)
  425704:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
  425708:	b00a      	add	sp, #40	; 0x28
  42570a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  42570e:	f005 010f 	and.w	r1, r5, #15
  425712:	4a0c      	ldr	r2, [pc, #48]	; (425744 <config_AFEC_pot+0xbc>)
  425714:	440a      	add	r2, r1
  425716:	2180      	movs	r1, #128	; 0x80
  425718:	7611      	strb	r1, [r2, #24]
  42571a:	e7ec      	b.n	4256f6 <config_AFEC_pot+0x6e>
  42571c:	00401731 	.word	0x00401731
  425720:	004015a9 	.word	0x004015a9
  425724:	004015f9 	.word	0x004015f9
  425728:	004015d9 	.word	0x004015d9
  42572c:	00401559 	.word	0x00401559
  425730:	004015e3 	.word	0x004015e3
  425734:	0040158b 	.word	0x0040158b
  425738:	004016a5 	.word	0x004016a5
  42573c:	e000e400 	.word	0xe000e400
  425740:	e000e100 	.word	0xe000e100
  425744:	e000ecfc 	.word	0xe000ecfc

00425748 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  425748:	b530      	push	{r4, r5, lr}
  42574a:	b083      	sub	sp, #12
  42574c:	4604      	mov	r4, r0
  42574e:	460d      	mov	r5, r1
	uint32_t val = 0;
  425750:	2300      	movs	r3, #0
  425752:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  425754:	4b28      	ldr	r3, [pc, #160]	; (4257f8 <usart_serial_getchar+0xb0>)
  425756:	4298      	cmp	r0, r3
  425758:	d013      	beq.n	425782 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  42575a:	4b28      	ldr	r3, [pc, #160]	; (4257fc <usart_serial_getchar+0xb4>)
  42575c:	429c      	cmp	r4, r3
  42575e:	d017      	beq.n	425790 <usart_serial_getchar+0x48>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  425760:	4b27      	ldr	r3, [pc, #156]	; (425800 <usart_serial_getchar+0xb8>)
  425762:	429c      	cmp	r4, r3
  425764:	d01b      	beq.n	42579e <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  425766:	4b27      	ldr	r3, [pc, #156]	; (425804 <usart_serial_getchar+0xbc>)
  425768:	429c      	cmp	r4, r3
  42576a:	d01f      	beq.n	4257ac <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  42576c:	4b26      	ldr	r3, [pc, #152]	; (425808 <usart_serial_getchar+0xc0>)
  42576e:	429c      	cmp	r4, r3
  425770:	d023      	beq.n	4257ba <usart_serial_getchar+0x72>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  425772:	4b26      	ldr	r3, [pc, #152]	; (42580c <usart_serial_getchar+0xc4>)
  425774:	429c      	cmp	r4, r3
  425776:	d02a      	beq.n	4257ce <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  425778:	4b25      	ldr	r3, [pc, #148]	; (425810 <usart_serial_getchar+0xc8>)
  42577a:	429c      	cmp	r4, r3
  42577c:	d031      	beq.n	4257e2 <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  42577e:	b003      	add	sp, #12
  425780:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
  425782:	4629      	mov	r1, r5
  425784:	4620      	mov	r0, r4
  425786:	4b23      	ldr	r3, [pc, #140]	; (425814 <usart_serial_getchar+0xcc>)
  425788:	4798      	blx	r3
  42578a:	2800      	cmp	r0, #0
  42578c:	d1f9      	bne.n	425782 <usart_serial_getchar+0x3a>
  42578e:	e7e4      	b.n	42575a <usart_serial_getchar+0x12>
		while (uart_read((Uart*)p_usart, data));
  425790:	4629      	mov	r1, r5
  425792:	4620      	mov	r0, r4
  425794:	4b1f      	ldr	r3, [pc, #124]	; (425814 <usart_serial_getchar+0xcc>)
  425796:	4798      	blx	r3
  425798:	2800      	cmp	r0, #0
  42579a:	d1f9      	bne.n	425790 <usart_serial_getchar+0x48>
  42579c:	e7e0      	b.n	425760 <usart_serial_getchar+0x18>
		while (uart_read((Uart*)p_usart, data));
  42579e:	4629      	mov	r1, r5
  4257a0:	4620      	mov	r0, r4
  4257a2:	4b1c      	ldr	r3, [pc, #112]	; (425814 <usart_serial_getchar+0xcc>)
  4257a4:	4798      	blx	r3
  4257a6:	2800      	cmp	r0, #0
  4257a8:	d1f9      	bne.n	42579e <usart_serial_getchar+0x56>
  4257aa:	e7dc      	b.n	425766 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4257ac:	4629      	mov	r1, r5
  4257ae:	4620      	mov	r0, r4
  4257b0:	4b18      	ldr	r3, [pc, #96]	; (425814 <usart_serial_getchar+0xcc>)
  4257b2:	4798      	blx	r3
  4257b4:	2800      	cmp	r0, #0
  4257b6:	d1f9      	bne.n	4257ac <usart_serial_getchar+0x64>
  4257b8:	e7d8      	b.n	42576c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4257ba:	a901      	add	r1, sp, #4
  4257bc:	4620      	mov	r0, r4
  4257be:	4b16      	ldr	r3, [pc, #88]	; (425818 <usart_serial_getchar+0xd0>)
  4257c0:	4798      	blx	r3
  4257c2:	2800      	cmp	r0, #0
  4257c4:	d1f9      	bne.n	4257ba <usart_serial_getchar+0x72>
		*data = (uint8_t)(val & 0xFF);
  4257c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4257ca:	702b      	strb	r3, [r5, #0]
  4257cc:	e7d1      	b.n	425772 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  4257ce:	a901      	add	r1, sp, #4
  4257d0:	4620      	mov	r0, r4
  4257d2:	4b11      	ldr	r3, [pc, #68]	; (425818 <usart_serial_getchar+0xd0>)
  4257d4:	4798      	blx	r3
  4257d6:	2800      	cmp	r0, #0
  4257d8:	d1f9      	bne.n	4257ce <usart_serial_getchar+0x86>
		*data = (uint8_t)(val & 0xFF);
  4257da:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4257de:	702b      	strb	r3, [r5, #0]
  4257e0:	e7ca      	b.n	425778 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4257e2:	a901      	add	r1, sp, #4
  4257e4:	4620      	mov	r0, r4
  4257e6:	4b0c      	ldr	r3, [pc, #48]	; (425818 <usart_serial_getchar+0xd0>)
  4257e8:	4798      	blx	r3
  4257ea:	2800      	cmp	r0, #0
  4257ec:	d1f9      	bne.n	4257e2 <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
  4257ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4257f2:	702b      	strb	r3, [r5, #0]
}
  4257f4:	e7c3      	b.n	42577e <usart_serial_getchar+0x36>
  4257f6:	bf00      	nop
  4257f8:	400e0800 	.word	0x400e0800
  4257fc:	400e0a00 	.word	0x400e0a00
  425800:	400e1a00 	.word	0x400e1a00
  425804:	400e1c00 	.word	0x400e1c00
  425808:	40024000 	.word	0x40024000
  42580c:	40028000 	.word	0x40028000
  425810:	4002c000 	.word	0x4002c000
  425814:	0042512f 	.word	0x0042512f
  425818:	004251cb 	.word	0x004251cb

0042581c <usart_serial_putchar>:
{
  42581c:	b538      	push	{r3, r4, r5, lr}
  42581e:	4604      	mov	r4, r0
  425820:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  425822:	4b27      	ldr	r3, [pc, #156]	; (4258c0 <usart_serial_putchar+0xa4>)
  425824:	4298      	cmp	r0, r3
  425826:	d013      	beq.n	425850 <usart_serial_putchar+0x34>
	if (UART1 == (Uart*)p_usart) {
  425828:	4b26      	ldr	r3, [pc, #152]	; (4258c4 <usart_serial_putchar+0xa8>)
  42582a:	4298      	cmp	r0, r3
  42582c:	d018      	beq.n	425860 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  42582e:	4b26      	ldr	r3, [pc, #152]	; (4258c8 <usart_serial_putchar+0xac>)
  425830:	4298      	cmp	r0, r3
  425832:	d01d      	beq.n	425870 <usart_serial_putchar+0x54>
	if (UART3 == (Uart*)p_usart) {
  425834:	4b25      	ldr	r3, [pc, #148]	; (4258cc <usart_serial_putchar+0xb0>)
  425836:	4298      	cmp	r0, r3
  425838:	d022      	beq.n	425880 <usart_serial_putchar+0x64>
	if (USART0 == p_usart) {
  42583a:	4b25      	ldr	r3, [pc, #148]	; (4258d0 <usart_serial_putchar+0xb4>)
  42583c:	4298      	cmp	r0, r3
  42583e:	d027      	beq.n	425890 <usart_serial_putchar+0x74>
	if (USART1 == p_usart) {
  425840:	4b24      	ldr	r3, [pc, #144]	; (4258d4 <usart_serial_putchar+0xb8>)
  425842:	4298      	cmp	r0, r3
  425844:	d02c      	beq.n	4258a0 <usart_serial_putchar+0x84>
	if (USART2 == p_usart) {
  425846:	4b24      	ldr	r3, [pc, #144]	; (4258d8 <usart_serial_putchar+0xbc>)
  425848:	4298      	cmp	r0, r3
  42584a:	d031      	beq.n	4258b0 <usart_serial_putchar+0x94>
	return 0;
  42584c:	2000      	movs	r0, #0
}
  42584e:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  425850:	4629      	mov	r1, r5
  425852:	4620      	mov	r0, r4
  425854:	4b21      	ldr	r3, [pc, #132]	; (4258dc <usart_serial_putchar+0xc0>)
  425856:	4798      	blx	r3
  425858:	2800      	cmp	r0, #0
  42585a:	d1f9      	bne.n	425850 <usart_serial_putchar+0x34>
		return 1;
  42585c:	2001      	movs	r0, #1
  42585e:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  425860:	4629      	mov	r1, r5
  425862:	4620      	mov	r0, r4
  425864:	4b1d      	ldr	r3, [pc, #116]	; (4258dc <usart_serial_putchar+0xc0>)
  425866:	4798      	blx	r3
  425868:	2800      	cmp	r0, #0
  42586a:	d1f9      	bne.n	425860 <usart_serial_putchar+0x44>
		return 1;
  42586c:	2001      	movs	r0, #1
  42586e:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  425870:	4629      	mov	r1, r5
  425872:	4620      	mov	r0, r4
  425874:	4b19      	ldr	r3, [pc, #100]	; (4258dc <usart_serial_putchar+0xc0>)
  425876:	4798      	blx	r3
  425878:	2800      	cmp	r0, #0
  42587a:	d1f9      	bne.n	425870 <usart_serial_putchar+0x54>
		return 1;
  42587c:	2001      	movs	r0, #1
  42587e:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  425880:	4629      	mov	r1, r5
  425882:	4620      	mov	r0, r4
  425884:	4b15      	ldr	r3, [pc, #84]	; (4258dc <usart_serial_putchar+0xc0>)
  425886:	4798      	blx	r3
  425888:	2800      	cmp	r0, #0
  42588a:	d1f9      	bne.n	425880 <usart_serial_putchar+0x64>
		return 1;
  42588c:	2001      	movs	r0, #1
  42588e:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  425890:	4629      	mov	r1, r5
  425892:	4620      	mov	r0, r4
  425894:	4b12      	ldr	r3, [pc, #72]	; (4258e0 <usart_serial_putchar+0xc4>)
  425896:	4798      	blx	r3
  425898:	2800      	cmp	r0, #0
  42589a:	d1f9      	bne.n	425890 <usart_serial_putchar+0x74>
		return 1;
  42589c:	2001      	movs	r0, #1
  42589e:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  4258a0:	4629      	mov	r1, r5
  4258a2:	4620      	mov	r0, r4
  4258a4:	4b0e      	ldr	r3, [pc, #56]	; (4258e0 <usart_serial_putchar+0xc4>)
  4258a6:	4798      	blx	r3
  4258a8:	2800      	cmp	r0, #0
  4258aa:	d1f9      	bne.n	4258a0 <usart_serial_putchar+0x84>
		return 1;
  4258ac:	2001      	movs	r0, #1
  4258ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  4258b0:	4629      	mov	r1, r5
  4258b2:	4620      	mov	r0, r4
  4258b4:	4b0a      	ldr	r3, [pc, #40]	; (4258e0 <usart_serial_putchar+0xc4>)
  4258b6:	4798      	blx	r3
  4258b8:	2800      	cmp	r0, #0
  4258ba:	d1f9      	bne.n	4258b0 <usart_serial_putchar+0x94>
		return 1;
  4258bc:	2001      	movs	r0, #1
  4258be:	bd38      	pop	{r3, r4, r5, pc}
  4258c0:	400e0800 	.word	0x400e0800
  4258c4:	400e0a00 	.word	0x400e0a00
  4258c8:	400e1a00 	.word	0x400e1a00
  4258cc:	400e1c00 	.word	0x400e1c00
  4258d0:	40024000 	.word	0x40024000
  4258d4:	40028000 	.word	0x40028000
  4258d8:	4002c000 	.word	0x4002c000
  4258dc:	0042511d 	.word	0x0042511d
  4258e0:	004251b5 	.word	0x004251b5

004258e4 <configure_lcd>:
static void configure_lcd(void) {
  4258e4:	b510      	push	{r4, lr}
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);  //
  4258e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4258ea:	2074      	movs	r0, #116	; 0x74
  4258ec:	4c0b      	ldr	r4, [pc, #44]	; (42591c <configure_lcd+0x38>)
  4258ee:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  4258f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4258f4:	2075      	movs	r0, #117	; 0x75
  4258f6:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  4258f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4258fc:	2076      	movs	r0, #118	; 0x76
  4258fe:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  425900:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425904:	207b      	movs	r0, #123	; 0x7b
  425906:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  425908:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  42590c:	2018      	movs	r0, #24
  42590e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  425910:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  425914:	2006      	movs	r0, #6
  425916:	47a0      	blx	r4
  425918:	bd10      	pop	{r4, pc}
  42591a:	bf00      	nop
  42591c:	00424c95 	.word	0x00424c95

00425920 <configure_console>:
static void configure_console(void) {
  425920:	b570      	push	{r4, r5, r6, lr}
  425922:	b08a      	sub	sp, #40	; 0x28
	const usart_serial_options_t uart_serial_options = {
  425924:	4b1a      	ldr	r3, [pc, #104]	; (425990 <configure_console+0x70>)
  425926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  425928:	ac0a      	add	r4, sp, #40	; 0x28
  42592a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  42592e:	4d19      	ldr	r5, [pc, #100]	; (425994 <configure_console+0x74>)
  425930:	4b19      	ldr	r3, [pc, #100]	; (425998 <configure_console+0x78>)
  425932:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  425934:	4a19      	ldr	r2, [pc, #100]	; (42599c <configure_console+0x7c>)
  425936:	4b1a      	ldr	r3, [pc, #104]	; (4259a0 <configure_console+0x80>)
  425938:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  42593a:	4a1a      	ldr	r2, [pc, #104]	; (4259a4 <configure_console+0x84>)
  42593c:	4b1a      	ldr	r3, [pc, #104]	; (4259a8 <configure_console+0x88>)
  42593e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  425940:	9b06      	ldr	r3, [sp, #24]
  425942:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  425944:	9b07      	ldr	r3, [sp, #28]
  425946:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  425948:	9b08      	ldr	r3, [sp, #32]
  42594a:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  42594c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42594e:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  425950:	2400      	movs	r4, #0
  425952:	9404      	str	r4, [sp, #16]
  425954:	200e      	movs	r0, #14
  425956:	4b15      	ldr	r3, [pc, #84]	; (4259ac <configure_console+0x8c>)
  425958:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  42595a:	4a15      	ldr	r2, [pc, #84]	; (4259b0 <configure_console+0x90>)
  42595c:	4669      	mov	r1, sp
  42595e:	4628      	mov	r0, r5
  425960:	4b14      	ldr	r3, [pc, #80]	; (4259b4 <configure_console+0x94>)
  425962:	4798      	blx	r3
		usart_enable_tx(p_usart);
  425964:	4628      	mov	r0, r5
  425966:	4b14      	ldr	r3, [pc, #80]	; (4259b8 <configure_console+0x98>)
  425968:	4798      	blx	r3
		usart_enable_rx(p_usart);
  42596a:	4628      	mov	r0, r5
  42596c:	4b13      	ldr	r3, [pc, #76]	; (4259bc <configure_console+0x9c>)
  42596e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  425970:	4e13      	ldr	r6, [pc, #76]	; (4259c0 <configure_console+0xa0>)
  425972:	6833      	ldr	r3, [r6, #0]
  425974:	4621      	mov	r1, r4
  425976:	6898      	ldr	r0, [r3, #8]
  425978:	4d12      	ldr	r5, [pc, #72]	; (4259c4 <configure_console+0xa4>)
  42597a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  42597c:	6833      	ldr	r3, [r6, #0]
  42597e:	4621      	mov	r1, r4
  425980:	6858      	ldr	r0, [r3, #4]
  425982:	47a8      	blx	r5
	setbuf(stdout, NULL);
  425984:	6833      	ldr	r3, [r6, #0]
  425986:	4621      	mov	r1, r4
  425988:	6898      	ldr	r0, [r3, #8]
  42598a:	47a8      	blx	r5
}
  42598c:	b00a      	add	sp, #40	; 0x28
  42598e:	bd70      	pop	{r4, r5, r6, pc}
  425990:	0042f904 	.word	0x0042f904
  425994:	40028000 	.word	0x40028000
  425998:	2043a3e0 	.word	0x2043a3e0
  42599c:	0042581d 	.word	0x0042581d
  4259a0:	2043a3dc 	.word	0x2043a3dc
  4259a4:	00425749 	.word	0x00425749
  4259a8:	2043a3d8 	.word	0x2043a3d8
  4259ac:	00424f8d 	.word	0x00424f8d
  4259b0:	08f0d180 	.word	0x08f0d180
  4259b4:	00425231 	.word	0x00425231
  4259b8:	0042518d 	.word	0x0042518d
  4259bc:	00425199 	.word	0x00425199
  4259c0:	204000ec 	.word	0x204000ec
  4259c4:	00427a95 	.word	0x00427a95

004259c8 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  4259c8:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4259ca:	460a      	mov	r2, r1
  4259cc:	4601      	mov	r1, r0
  4259ce:	4802      	ldr	r0, [pc, #8]	; (4259d8 <vApplicationStackOverflowHook+0x10>)
  4259d0:	4b02      	ldr	r3, [pc, #8]	; (4259dc <vApplicationStackOverflowHook+0x14>)
  4259d2:	4798      	blx	r3
  4259d4:	e7fe      	b.n	4259d4 <vApplicationStackOverflowHook+0xc>
  4259d6:	bf00      	nop
  4259d8:	004311dc 	.word	0x004311dc
  4259dc:	00427251 	.word	0x00427251

004259e0 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  4259e0:	4770      	bx	lr

004259e2 <vApplicationMallocFailedHook>:
  4259e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4259e6:	b672      	cpsid	i
  4259e8:	f383 8811 	msr	BASEPRI, r3
  4259ec:	f3bf 8f6f 	isb	sy
  4259f0:	f3bf 8f4f 	dsb	sy
  4259f4:	b662      	cpsie	i
  4259f6:	e7fe      	b.n	4259f6 <vApplicationMallocFailedHook+0x14>

004259f8 <TC3_Handler>:
void TC3_Handler(void){
  4259f8:	b500      	push	{lr}
  4259fa:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC1, 0);
  4259fc:	2100      	movs	r1, #0
  4259fe:	4806      	ldr	r0, [pc, #24]	; (425a18 <TC3_Handler+0x20>)
  425a00:	4b06      	ldr	r3, [pc, #24]	; (425a1c <TC3_Handler+0x24>)
  425a02:	4798      	blx	r3
  425a04:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  425a06:	9b01      	ldr	r3, [sp, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  425a08:	4b05      	ldr	r3, [pc, #20]	; (425a20 <TC3_Handler+0x28>)
  425a0a:	2240      	movs	r2, #64	; 0x40
  425a0c:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  425a0e:	2202      	movs	r2, #2
  425a10:	601a      	str	r2, [r3, #0]
}
  425a12:	b003      	add	sp, #12
  425a14:	f85d fb04 	ldr.w	pc, [sp], #4
  425a18:	40010000 	.word	0x40010000
  425a1c:	004007ef 	.word	0x004007ef
  425a20:	40064000 	.word	0x40064000

00425a24 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  425a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  425a28:	b085      	sub	sp, #20
  425a2a:	4606      	mov	r6, r0
  425a2c:	460c      	mov	r4, r1
  425a2e:	4617      	mov	r7, r2
  425a30:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  425a32:	4608      	mov	r0, r1
  425a34:	4b1e      	ldr	r3, [pc, #120]	; (425ab0 <TC_init+0x8c>)
  425a36:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  425a38:	4d1e      	ldr	r5, [pc, #120]	; (425ab4 <TC_init+0x90>)
  425a3a:	9500      	str	r5, [sp, #0]
  425a3c:	ab02      	add	r3, sp, #8
  425a3e:	aa03      	add	r2, sp, #12
  425a40:	4629      	mov	r1, r5
  425a42:	4640      	mov	r0, r8
  425a44:	f8df 908c 	ldr.w	r9, [pc, #140]	; 425ad4 <TC_init+0xb0>
  425a48:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  425a4a:	9a02      	ldr	r2, [sp, #8]
  425a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  425a50:	4639      	mov	r1, r7
  425a52:	4630      	mov	r0, r6
  425a54:	4b18      	ldr	r3, [pc, #96]	; (425ab8 <TC_init+0x94>)
  425a56:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  425a58:	9a03      	ldr	r2, [sp, #12]
  425a5a:	fbb5 f2f2 	udiv	r2, r5, r2
  425a5e:	fbb2 f2f8 	udiv	r2, r2, r8
  425a62:	4639      	mov	r1, r7
  425a64:	4630      	mov	r0, r6
  425a66:	4b15      	ldr	r3, [pc, #84]	; (425abc <TC_init+0x98>)
  425a68:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  425a6a:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  425a6c:	2b00      	cmp	r3, #0
  425a6e:	db17      	blt.n	425aa0 <TC_init+0x7c>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  425a70:	4a13      	ldr	r2, [pc, #76]	; (425ac0 <TC_init+0x9c>)
  425a72:	2180      	movs	r1, #128	; 0x80
  425a74:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  425a76:	095b      	lsrs	r3, r3, #5
  425a78:	f004 041f 	and.w	r4, r4, #31
  425a7c:	2201      	movs	r2, #1
  425a7e:	fa02 f404 	lsl.w	r4, r2, r4
  425a82:	4a10      	ldr	r2, [pc, #64]	; (425ac4 <TC_init+0xa0>)
  425a84:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  425a88:	2210      	movs	r2, #16
  425a8a:	4639      	mov	r1, r7
  425a8c:	4630      	mov	r0, r6
  425a8e:	4b0e      	ldr	r3, [pc, #56]	; (425ac8 <TC_init+0xa4>)
  425a90:	4798      	blx	r3
	tc_start(TC, TC_CHANNEL);
  425a92:	4639      	mov	r1, r7
  425a94:	4630      	mov	r0, r6
  425a96:	4b0d      	ldr	r3, [pc, #52]	; (425acc <TC_init+0xa8>)
  425a98:	4798      	blx	r3
}
  425a9a:	b005      	add	sp, #20
  425a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  425aa0:	f004 010f 	and.w	r1, r4, #15
  425aa4:	4a0a      	ldr	r2, [pc, #40]	; (425ad0 <TC_init+0xac>)
  425aa6:	440a      	add	r2, r1
  425aa8:	2180      	movs	r1, #128	; 0x80
  425aaa:	7611      	strb	r1, [r2, #24]
  425aac:	e7e3      	b.n	425a76 <TC_init+0x52>
  425aae:	bf00      	nop
  425ab0:	00424f8d 	.word	0x00424f8d
  425ab4:	11e1a300 	.word	0x11e1a300
  425ab8:	004007bd 	.word	0x004007bd
  425abc:	004007df 	.word	0x004007df
  425ac0:	e000e400 	.word	0xe000e400
  425ac4:	e000e100 	.word	0xe000e100
  425ac8:	004007e7 	.word	0x004007e7
  425acc:	004007d7 	.word	0x004007d7
  425ad0:	e000ecfc 	.word	0xe000ecfc
  425ad4:	004007f7 	.word	0x004007f7

00425ad8 <task_process>:
static void task_process(void *pvParameters) {
  425ad8:	b570      	push	{r4, r5, r6, lr}
  425ada:	b084      	sub	sp, #16
	TC_init(TC1, ID_TC3, 0, 250);
  425adc:	23fa      	movs	r3, #250	; 0xfa
  425ade:	2200      	movs	r2, #0
  425ae0:	211a      	movs	r1, #26
  425ae2:	4826      	ldr	r0, [pc, #152]	; (425b7c <task_process+0xa4>)
  425ae4:	4c26      	ldr	r4, [pc, #152]	; (425b80 <task_process+0xa8>)
  425ae6:	47a0      	blx	r4
	xQueueECG = xQueueCreate(250, sizeof(int));
  425ae8:	2200      	movs	r2, #0
  425aea:	2104      	movs	r1, #4
  425aec:	20fa      	movs	r0, #250	; 0xfa
  425aee:	4b25      	ldr	r3, [pc, #148]	; (425b84 <task_process+0xac>)
  425af0:	4798      	blx	r3
  425af2:	4c25      	ldr	r4, [pc, #148]	; (425b88 <task_process+0xb0>)
  425af4:	6020      	str	r0, [r4, #0]
	RTT_init(pllPreScale, irqRTTvalue);
  425af6:	2101      	movs	r1, #1
  425af8:	2020      	movs	r0, #32
  425afa:	4b24      	ldr	r3, [pc, #144]	; (425b8c <task_process+0xb4>)
  425afc:	4798      	blx	r3
	config_AFEC_pot(AFEC_POT, AFEC_POT_ID, AFEC_POT_CHANNEL, AFEC_pot_Callback);
  425afe:	4b24      	ldr	r3, [pc, #144]	; (425b90 <task_process+0xb8>)
  425b00:	2206      	movs	r2, #6
  425b02:	2128      	movs	r1, #40	; 0x28
  425b04:	4823      	ldr	r0, [pc, #140]	; (425b94 <task_process+0xbc>)
  425b06:	4d24      	ldr	r5, [pc, #144]	; (425b98 <task_process+0xc0>)
  425b08:	47a8      	blx	r5
	if (xQueueECG == NULL){
  425b0a:	6823      	ldr	r3, [r4, #0]
  425b0c:	b913      	cbnz	r3, 425b14 <task_process+0x3c>
		printf("falha em criar a fila \n");
  425b0e:	4823      	ldr	r0, [pc, #140]	; (425b9c <task_process+0xc4>)
  425b10:	4b23      	ldr	r3, [pc, #140]	; (425ba0 <task_process+0xc8>)
  425b12:	4798      	blx	r3
static void task_process(void *pvParameters) {
  425b14:	2500      	movs	r5, #0
  425b16:	e00e      	b.n	425b36 <task_process+0x5e>
			if(ecg.value > 3280 && !flag_pico){
  425b18:	9903      	ldr	r1, [sp, #12]
  425b1a:	f5b1 6f4d 	cmp.w	r1, #3280	; 0xcd0
  425b1e:	d900      	bls.n	425b22 <task_process+0x4a>
  425b20:	b1d5      	cbz	r5, 425b58 <task_process+0x80>
			ecgi.ecg = ecg.value;
  425b22:	9b03      	ldr	r3, [sp, #12]
  425b24:	9301      	str	r3, [sp, #4]
			ecgi.bpm = bpm;
  425b26:	9602      	str	r6, [sp, #8]
			xQueueSend(xQueueEcgInfo,&ecgi,0);
  425b28:	2300      	movs	r3, #0
  425b2a:	461a      	mov	r2, r3
  425b2c:	a901      	add	r1, sp, #4
  425b2e:	481d      	ldr	r0, [pc, #116]	; (425ba4 <task_process+0xcc>)
  425b30:	6800      	ldr	r0, [r0, #0]
  425b32:	4c1d      	ldr	r4, [pc, #116]	; (425ba8 <task_process+0xd0>)
  425b34:	47a0      	blx	r4
		if (xQueueReceive( xQueueECG, &(ecg), ( TickType_t ) 10/ portTICK_PERIOD_MS)) {
  425b36:	2300      	movs	r3, #0
  425b38:	220a      	movs	r2, #10
  425b3a:	a903      	add	r1, sp, #12
  425b3c:	4812      	ldr	r0, [pc, #72]	; (425b88 <task_process+0xb0>)
  425b3e:	6800      	ldr	r0, [r0, #0]
  425b40:	4c1a      	ldr	r4, [pc, #104]	; (425bac <task_process+0xd4>)
  425b42:	47a0      	blx	r4
  425b44:	2800      	cmp	r0, #0
  425b46:	d0f6      	beq.n	425b36 <task_process+0x5e>
			if (flag_pico && ecg.value <= 3280){
  425b48:	2d00      	cmp	r5, #0
  425b4a:	d0e5      	beq.n	425b18 <task_process+0x40>
  425b4c:	9b03      	ldr	r3, [sp, #12]
  425b4e:	f5b3 6f4d 	cmp.w	r3, #3280	; 0xcd0
  425b52:	d8e1      	bhi.n	425b18 <task_process+0x40>
				flag_pico = 0;
  425b54:	2500      	movs	r5, #0
  425b56:	e7df      	b.n	425b18 <task_process+0x40>
				printf("%d: %d ms\n", ecg.value, g_dT);
  425b58:	4c15      	ldr	r4, [pc, #84]	; (425bb0 <task_process+0xd8>)
  425b5a:	6822      	ldr	r2, [r4, #0]
  425b5c:	4815      	ldr	r0, [pc, #84]	; (425bb4 <task_process+0xdc>)
  425b5e:	4d10      	ldr	r5, [pc, #64]	; (425ba0 <task_process+0xc8>)
  425b60:	47a8      	blx	r5
				double valor_bpm = 60000/g_dT;
  425b62:	6823      	ldr	r3, [r4, #0]
  425b64:	f64e 2660 	movw	r6, #60000	; 0xea60
  425b68:	fb96 f6f3 	sdiv	r6, r6, r3
				printf("bpm: %d\n", bpm);
  425b6c:	4631      	mov	r1, r6
  425b6e:	4812      	ldr	r0, [pc, #72]	; (425bb8 <task_process+0xe0>)
  425b70:	47a8      	blx	r5
				g_dT = 0;
  425b72:	2300      	movs	r3, #0
  425b74:	6023      	str	r3, [r4, #0]
				flag_pico = 1;
  425b76:	2501      	movs	r5, #1
  425b78:	e7d3      	b.n	425b22 <task_process+0x4a>
  425b7a:	bf00      	nop
  425b7c:	40010000 	.word	0x40010000
  425b80:	00425a25 	.word	0x00425a25
  425b84:	00401e65 	.word	0x00401e65
  425b88:	2043a3e4 	.word	0x2043a3e4
  425b8c:	00425619 	.word	0x00425619
  425b90:	004255d5 	.word	0x004255d5
  425b94:	40064000 	.word	0x40064000
  425b98:	00425689 	.word	0x00425689
  425b9c:	004311a4 	.word	0x004311a4
  425ba0:	00427251 	.word	0x00427251
  425ba4:	2043a3e8 	.word	0x2043a3e8
  425ba8:	00401ee5 	.word	0x00401ee5
  425bac:	004022cd 	.word	0x004022cd
  425bb0:	2043a124 	.word	0x2043a124
  425bb4:	004311bc 	.word	0x004311bc
  425bb8:	004311c8 	.word	0x004311c8

00425bbc <RTT_Handler>:
{
  425bbc:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  425bbe:	4805      	ldr	r0, [pc, #20]	; (425bd4 <RTT_Handler+0x18>)
  425bc0:	4b05      	ldr	r3, [pc, #20]	; (425bd8 <RTT_Handler+0x1c>)
  425bc2:	4798      	blx	r3
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  425bc4:	f010 0f02 	tst.w	r0, #2
  425bc8:	d003      	beq.n	425bd2 <RTT_Handler+0x16>
		g_dT++;
  425bca:	4a04      	ldr	r2, [pc, #16]	; (425bdc <RTT_Handler+0x20>)
  425bcc:	6813      	ldr	r3, [r2, #0]
  425bce:	3301      	adds	r3, #1
  425bd0:	6013      	str	r3, [r2, #0]
  425bd2:	bd08      	pop	{r3, pc}
  425bd4:	400e1830 	.word	0x400e1830
  425bd8:	00400775 	.word	0x00400775
  425bdc:	2043a124 	.word	0x2043a124

00425be0 <RTC_Handler>:
{
  425be0:	b530      	push	{r4, r5, lr}
  425be2:	b083      	sub	sp, #12
	uint32_t ul_status = rtc_get_status(RTC);
  425be4:	4812      	ldr	r0, [pc, #72]	; (425c30 <RTC_Handler+0x50>)
  425be6:	4b13      	ldr	r3, [pc, #76]	; (425c34 <RTC_Handler+0x54>)
  425be8:	4798      	blx	r3
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  425bea:	f010 0f04 	tst.w	r0, #4
  425bee:	d115      	bne.n	425c1c <RTC_Handler+0x3c>
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  425bf0:	4d0f      	ldr	r5, [pc, #60]	; (425c30 <RTC_Handler+0x50>)
  425bf2:	2104      	movs	r1, #4
  425bf4:	4628      	mov	r0, r5
  425bf6:	4c10      	ldr	r4, [pc, #64]	; (425c38 <RTC_Handler+0x58>)
  425bf8:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  425bfa:	2102      	movs	r1, #2
  425bfc:	4628      	mov	r0, r5
  425bfe:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  425c00:	2101      	movs	r1, #1
  425c02:	4628      	mov	r0, r5
  425c04:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  425c06:	2108      	movs	r1, #8
  425c08:	4628      	mov	r0, r5
  425c0a:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  425c0c:	2110      	movs	r1, #16
  425c0e:	4628      	mov	r0, r5
  425c10:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  425c12:	2120      	movs	r1, #32
  425c14:	4628      	mov	r0, r5
  425c16:	47a0      	blx	r4
}
  425c18:	b003      	add	sp, #12
  425c1a:	bd30      	pop	{r4, r5, pc}
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  425c1c:	a902      	add	r1, sp, #8
  425c1e:	2300      	movs	r3, #0
  425c20:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  425c24:	4b05      	ldr	r3, [pc, #20]	; (425c3c <RTC_Handler+0x5c>)
  425c26:	6818      	ldr	r0, [r3, #0]
  425c28:	4b05      	ldr	r3, [pc, #20]	; (425c40 <RTC_Handler+0x60>)
  425c2a:	4798      	blx	r3
  425c2c:	e7e0      	b.n	425bf0 <RTC_Handler+0x10>
  425c2e:	bf00      	nop
  425c30:	400e1860 	.word	0x400e1860
  425c34:	004006f5 	.word	0x004006f5
  425c38:	004006f9 	.word	0x004006f9
  425c3c:	2043a3ec 	.word	0x2043a3ec
  425c40:	004021d9 	.word	0x004021d9

00425c44 <RTC_init>:
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  425c44:	b082      	sub	sp, #8
  425c46:	b570      	push	{r4, r5, r6, lr}
  425c48:	b082      	sub	sp, #8
  425c4a:	4605      	mov	r5, r0
  425c4c:	460c      	mov	r4, r1
  425c4e:	a906      	add	r1, sp, #24
  425c50:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  425c54:	2002      	movs	r0, #2
  425c56:	4b1e      	ldr	r3, [pc, #120]	; (425cd0 <RTC_init+0x8c>)
  425c58:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  425c5a:	2100      	movs	r1, #0
  425c5c:	4628      	mov	r0, r5
  425c5e:	4b1d      	ldr	r3, [pc, #116]	; (425cd4 <RTC_init+0x90>)
  425c60:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  425c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
  425c64:	9300      	str	r3, [sp, #0]
  425c66:	9b08      	ldr	r3, [sp, #32]
  425c68:	9a07      	ldr	r2, [sp, #28]
  425c6a:	9906      	ldr	r1, [sp, #24]
  425c6c:	4628      	mov	r0, r5
  425c6e:	4e1a      	ldr	r6, [pc, #104]	; (425cd8 <RTC_init+0x94>)
  425c70:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  425c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  425c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  425c76:	990a      	ldr	r1, [sp, #40]	; 0x28
  425c78:	4628      	mov	r0, r5
  425c7a:	4e18      	ldr	r6, [pc, #96]	; (425cdc <RTC_init+0x98>)
  425c7c:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  425c7e:	b261      	sxtb	r1, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  425c80:	094a      	lsrs	r2, r1, #5
  425c82:	b2e4      	uxtb	r4, r4
  425c84:	f004 001f 	and.w	r0, r4, #31
  425c88:	2301      	movs	r3, #1
  425c8a:	4083      	lsls	r3, r0
  425c8c:	4814      	ldr	r0, [pc, #80]	; (425ce0 <RTC_init+0x9c>)
  425c8e:	f102 0620 	add.w	r6, r2, #32
  425c92:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  425c96:	f102 0660 	add.w	r6, r2, #96	; 0x60
  425c9a:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
  if(IRQn < 0) {
  425c9e:	2900      	cmp	r1, #0
  425ca0:	db10      	blt.n	425cc4 <RTC_init+0x80>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  425ca2:	480f      	ldr	r0, [pc, #60]	; (425ce0 <RTC_init+0x9c>)
  425ca4:	4408      	add	r0, r1
  425ca6:	2180      	movs	r1, #128	; 0x80
  425ca8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  425cac:	490c      	ldr	r1, [pc, #48]	; (425ce0 <RTC_init+0x9c>)
  425cae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	rtc_enable_interrupt(rtc,  irq_type);
  425cb2:	990d      	ldr	r1, [sp, #52]	; 0x34
  425cb4:	4628      	mov	r0, r5
  425cb6:	4b0b      	ldr	r3, [pc, #44]	; (425ce4 <RTC_init+0xa0>)
  425cb8:	4798      	blx	r3
}
  425cba:	b002      	add	sp, #8
  425cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  425cc0:	b002      	add	sp, #8
  425cc2:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  425cc4:	f004 040f 	and.w	r4, r4, #15
  425cc8:	4907      	ldr	r1, [pc, #28]	; (425ce8 <RTC_init+0xa4>)
  425cca:	2080      	movs	r0, #128	; 0x80
  425ccc:	5508      	strb	r0, [r1, r4]
  425cce:	e7ed      	b.n	425cac <RTC_init+0x68>
  425cd0:	00424f8d 	.word	0x00424f8d
  425cd4:	00400529 	.word	0x00400529
  425cd8:	00400635 	.word	0x00400635
  425cdc:	004005a1 	.word	0x004005a1
  425ce0:	e000e100 	.word	0xe000e100
  425ce4:	0040053f 	.word	0x0040053f
  425ce8:	e000ed14 	.word	0xe000ed14

00425cec <toggleDot>:
{
  425cec:	b510      	push	{r4, lr}
	if(flag_dot == 1){ flag_dot = 0; lv_label_set_text_fmt(labelDot, "#",17,15);}
  425cee:	4b0d      	ldr	r3, [pc, #52]	; (425d24 <toggleDot+0x38>)
  425cf0:	781b      	ldrb	r3, [r3, #0]
  425cf2:	b2db      	uxtb	r3, r3
  425cf4:	2b01      	cmp	r3, #1
  425cf6:	d00a      	beq.n	425d0e <toggleDot+0x22>
	else { flag_dot = 1; lv_label_set_text_fmt(labelDot, ":",17,15); }
  425cf8:	2201      	movs	r2, #1
  425cfa:	4b0a      	ldr	r3, [pc, #40]	; (425d24 <toggleDot+0x38>)
  425cfc:	701a      	strb	r2, [r3, #0]
  425cfe:	230f      	movs	r3, #15
  425d00:	2211      	movs	r2, #17
  425d02:	4909      	ldr	r1, [pc, #36]	; (425d28 <toggleDot+0x3c>)
  425d04:	4809      	ldr	r0, [pc, #36]	; (425d2c <toggleDot+0x40>)
  425d06:	6800      	ldr	r0, [r0, #0]
  425d08:	4c09      	ldr	r4, [pc, #36]	; (425d30 <toggleDot+0x44>)
  425d0a:	47a0      	blx	r4
  425d0c:	bd10      	pop	{r4, pc}
	if(flag_dot == 1){ flag_dot = 0; lv_label_set_text_fmt(labelDot, "#",17,15);}
  425d0e:	2200      	movs	r2, #0
  425d10:	4b04      	ldr	r3, [pc, #16]	; (425d24 <toggleDot+0x38>)
  425d12:	701a      	strb	r2, [r3, #0]
  425d14:	230f      	movs	r3, #15
  425d16:	2211      	movs	r2, #17
  425d18:	4906      	ldr	r1, [pc, #24]	; (425d34 <toggleDot+0x48>)
  425d1a:	4804      	ldr	r0, [pc, #16]	; (425d2c <toggleDot+0x40>)
  425d1c:	6800      	ldr	r0, [r0, #0]
  425d1e:	4c04      	ldr	r4, [pc, #16]	; (425d30 <toggleDot+0x44>)
  425d20:	47a0      	blx	r4
  425d22:	bd10      	pop	{r4, pc}
  425d24:	2043a120 	.word	0x2043a120
  425d28:	004311d8 	.word	0x004311d8
  425d2c:	2043a140 	.word	0x2043a140
  425d30:	00423a5d 	.word	0x00423a5d
  425d34:	004311d4 	.word	0x004311d4

00425d38 <task_clock>:
static void task_clock(void *pvParameters) {
  425d38:	b500      	push	{lr}
  425d3a:	b091      	sub	sp, #68	; 0x44
	calendar rtc_initial = {2018, 5, 6, 18, 19, 6 ,1};
  425d3c:	ac09      	add	r4, sp, #36	; 0x24
  425d3e:	4d1c      	ldr	r5, [pc, #112]	; (425db0 <task_clock+0x78>)
  425d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  425d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  425d44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  425d48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN | RTC_IER_SECEN);
  425d4c:	4e19      	ldr	r6, [pc, #100]	; (425db4 <task_clock+0x7c>)
  425d4e:	2306      	movs	r3, #6
  425d50:	9305      	str	r3, [sp, #20]
  425d52:	466c      	mov	r4, sp
  425d54:	ad0b      	add	r5, sp, #44	; 0x2c
  425d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  425d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  425d5a:	682b      	ldr	r3, [r5, #0]
  425d5c:	6023      	str	r3, [r4, #0]
  425d5e:	ab09      	add	r3, sp, #36	; 0x24
  425d60:	cb0c      	ldmia	r3, {r2, r3}
  425d62:	2102      	movs	r1, #2
  425d64:	4630      	mov	r0, r6
  425d66:	4c14      	ldr	r4, [pc, #80]	; (425db8 <task_clock+0x80>)
  425d68:	47a0      	blx	r4
	rtc_get_time(RTC, &hour, &minute, &second);
  425d6a:	ab06      	add	r3, sp, #24
  425d6c:	aa07      	add	r2, sp, #28
  425d6e:	a908      	add	r1, sp, #32
  425d70:	4630      	mov	r0, r6
  425d72:	4c12      	ldr	r4, [pc, #72]	; (425dbc <task_clock+0x84>)
  425d74:	47a0      	blx	r4
		printf("uhuulllll");
  425d76:	4812      	ldr	r0, [pc, #72]	; (425dc0 <task_clock+0x88>)
  425d78:	4b12      	ldr	r3, [pc, #72]	; (425dc4 <task_clock+0x8c>)
  425d7a:	4798      	blx	r3
		if( xSemaphoreTake(xSemaphore, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ){
  425d7c:	2300      	movs	r3, #0
  425d7e:	220a      	movs	r2, #10
  425d80:	4619      	mov	r1, r3
  425d82:	4811      	ldr	r0, [pc, #68]	; (425dc8 <task_clock+0x90>)
  425d84:	6800      	ldr	r0, [r0, #0]
  425d86:	4c11      	ldr	r4, [pc, #68]	; (425dcc <task_clock+0x94>)
  425d88:	47a0      	blx	r4
  425d8a:	2801      	cmp	r0, #1
  425d8c:	d1f3      	bne.n	425d76 <task_clock+0x3e>
			toggleDot();
  425d8e:	4b10      	ldr	r3, [pc, #64]	; (425dd0 <task_clock+0x98>)
  425d90:	4798      	blx	r3
			rtc_get_time(RTC, &hour, &minute, &second);
  425d92:	ab06      	add	r3, sp, #24
  425d94:	aa07      	add	r2, sp, #28
  425d96:	a908      	add	r1, sp, #32
  425d98:	4806      	ldr	r0, [pc, #24]	; (425db4 <task_clock+0x7c>)
  425d9a:	4c08      	ldr	r4, [pc, #32]	; (425dbc <task_clock+0x84>)
  425d9c:	47a0      	blx	r4
			lv_label_set_text_fmt(labelTempo, "%02d # %02d",hour,minute);
  425d9e:	9b07      	ldr	r3, [sp, #28]
  425da0:	9a08      	ldr	r2, [sp, #32]
  425da2:	490c      	ldr	r1, [pc, #48]	; (425dd4 <task_clock+0x9c>)
  425da4:	480c      	ldr	r0, [pc, #48]	; (425dd8 <task_clock+0xa0>)
  425da6:	6800      	ldr	r0, [r0, #0]
  425da8:	4c0c      	ldr	r4, [pc, #48]	; (425ddc <task_clock+0xa4>)
  425daa:	47a0      	blx	r4
  425dac:	e7e3      	b.n	425d76 <task_clock+0x3e>
  425dae:	bf00      	nop
  425db0:	0042f914 	.word	0x0042f914
  425db4:	400e1860 	.word	0x400e1860
  425db8:	00425c45 	.word	0x00425c45
  425dbc:	00400543 	.word	0x00400543
  425dc0:	0043116c 	.word	0x0043116c
  425dc4:	00427251 	.word	0x00427251
  425dc8:	2043a3ec 	.word	0x2043a3ec
  425dcc:	004022cd 	.word	0x004022cd
  425dd0:	00425ced 	.word	0x00425ced
  425dd4:	00431178 	.word	0x00431178
  425dd8:	2043a150 	.word	0x2043a150
  425ddc:	00423a5d 	.word	0x00423a5d

00425de0 <lv_principal>:
void lv_principal(void){
  425de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  425de4:	b083      	sub	sp, #12
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
  425de6:	4daf      	ldr	r5, [pc, #700]	; (4260a4 <lv_principal+0x2c4>)
  425de8:	47a8      	blx	r5
  425dea:	4caf      	ldr	r4, [pc, #700]	; (4260a8 <lv_principal+0x2c8>)
  425dec:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  425dee:	4baf      	ldr	r3, [pc, #700]	; (4260ac <lv_principal+0x2cc>)
  425df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  425df2:	2229      	movs	r2, #41	; 0x29
  425df4:	2100      	movs	r1, #0
  425df6:	4eae      	ldr	r6, [pc, #696]	; (4260b0 <lv_principal+0x2d0>)
  425df8:	47b0      	blx	r6
  425dfa:	47a8      	blx	r5
  425dfc:	47a0      	blx	r4
	lv_obj_t * img2 = lv_img_create(lv_scr_act(), NULL);
  425dfe:	2100      	movs	r1, #0
  425e00:	4bac      	ldr	r3, [pc, #688]	; (4260b4 <lv_principal+0x2d4>)
  425e02:	4798      	blx	r3
  425e04:	4606      	mov	r6, r0
	lv_img_set_src(img2, &miniLogo);
  425e06:	49ac      	ldr	r1, [pc, #688]	; (4260b8 <lv_principal+0x2d8>)
  425e08:	4bac      	ldr	r3, [pc, #688]	; (4260bc <lv_principal+0x2dc>)
  425e0a:	4798      	blx	r3
	lv_obj_align(img2, NULL, LV_ALIGN_IN_TOP_RIGHT, -10, 5);
  425e0c:	2305      	movs	r3, #5
  425e0e:	9300      	str	r3, [sp, #0]
  425e10:	f06f 0309 	mvn.w	r3, #9
  425e14:	2203      	movs	r2, #3
  425e16:	2100      	movs	r1, #0
  425e18:	4630      	mov	r0, r6
  425e1a:	4ea9      	ldr	r6, [pc, #676]	; (4260c0 <lv_principal+0x2e0>)
  425e1c:	47b0      	blx	r6
  425e1e:	47a8      	blx	r5
  425e20:	47a0      	blx	r4
	lv_obj_t * btnPower = lv_btn_create(lv_scr_act(), NULL);
  425e22:	2100      	movs	r1, #0
  425e24:	4ba7      	ldr	r3, [pc, #668]	; (4260c4 <lv_principal+0x2e4>)
  425e26:	4798      	blx	r3
  425e28:	4607      	mov	r7, r0
	lv_obj_set_event_cb(btnPower, event_handler);
  425e2a:	49a7      	ldr	r1, [pc, #668]	; (4260c8 <lv_principal+0x2e8>)
  425e2c:	4ba7      	ldr	r3, [pc, #668]	; (4260cc <lv_principal+0x2ec>)
  425e2e:	4798      	blx	r3
	lv_obj_set_width(btnPower, 40);  lv_obj_set_height(btnPower, 40);
  425e30:	2128      	movs	r1, #40	; 0x28
  425e32:	4638      	mov	r0, r7
  425e34:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 426100 <lv_principal+0x320>
  425e38:	47c0      	blx	r8
  425e3a:	2128      	movs	r1, #40	; 0x28
  425e3c:	4638      	mov	r0, r7
  425e3e:	4ba4      	ldr	r3, [pc, #656]	; (4260d0 <lv_principal+0x2f0>)
  425e40:	4798      	blx	r3
	lv_obj_align(btnPower, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -10, -10);
  425e42:	f06f 0309 	mvn.w	r3, #9
  425e46:	9300      	str	r3, [sp, #0]
  425e48:	2206      	movs	r2, #6
  425e4a:	2100      	movs	r1, #0
  425e4c:	4638      	mov	r0, r7
  425e4e:	47b0      	blx	r6
  425e50:	f641 73f8 	movw	r3, #8184	; 0x1ff8
  425e54:	2229      	movs	r2, #41	; 0x29
  425e56:	2100      	movs	r1, #0
  425e58:	4638      	mov	r0, r7
  425e5a:	4e95      	ldr	r6, [pc, #596]	; (4260b0 <lv_principal+0x2d0>)
  425e5c:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  425e5e:	f641 73f8 	movw	r3, #8184	; 0x1ff8
  425e62:	2239      	movs	r2, #57	; 0x39
  425e64:	2100      	movs	r1, #0
  425e66:	4638      	mov	r0, r7
  425e68:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  425e6a:	2300      	movs	r3, #0
  425e6c:	2230      	movs	r2, #48	; 0x30
  425e6e:	4619      	mov	r1, r3
  425e70:	4638      	mov	r0, r7
  425e72:	f8df 9290 	ldr.w	r9, [pc, #656]	; 426104 <lv_principal+0x324>
  425e76:	47c8      	blx	r9
	labelPower = lv_label_create(btnPower, NULL);
  425e78:	2100      	movs	r1, #0
  425e7a:	4638      	mov	r0, r7
  425e7c:	4f95      	ldr	r7, [pc, #596]	; (4260d4 <lv_principal+0x2f4>)
  425e7e:	47b8      	blx	r7
  425e80:	f8df a284 	ldr.w	sl, [pc, #644]	; 426108 <lv_principal+0x328>
  425e84:	f8ca 0000 	str.w	r0, [sl]
	lv_label_set_recolor(labelPower, true);
  425e88:	2101      	movs	r1, #1
  425e8a:	f8df 9280 	ldr.w	r9, [pc, #640]	; 42610c <lv_principal+0x32c>
  425e8e:	47c8      	blx	r9
	lv_label_set_text(labelPower, "#ffffff  " LV_SYMBOL_POWER " ");
  425e90:	4991      	ldr	r1, [pc, #580]	; (4260d8 <lv_principal+0x2f8>)
  425e92:	f8da 0000 	ldr.w	r0, [sl]
  425e96:	f8df b278 	ldr.w	fp, [pc, #632]	; 426110 <lv_principal+0x330>
  425e9a:	47d8      	blx	fp
  425e9c:	47a8      	blx	r5
  425e9e:	47a0      	blx	r4
	lv_obj_t * labelBat = lv_label_create(lv_scr_act(), NULL);
  425ea0:	2100      	movs	r1, #0
  425ea2:	47b8      	blx	r7
  425ea4:	4682      	mov	sl, r0
	lv_label_set_long_mode(labelBat, LV_LABEL_LONG_BREAK);
  425ea6:	2101      	movs	r1, #1
  425ea8:	4b8c      	ldr	r3, [pc, #560]	; (4260dc <lv_principal+0x2fc>)
  425eaa:	4798      	blx	r3
	lv_label_set_recolor(labelBat, true);
  425eac:	2101      	movs	r1, #1
  425eae:	4650      	mov	r0, sl
  425eb0:	47c8      	blx	r9
	lv_obj_align(labelBat, NULL, LV_ALIGN_IN_TOP_RIGHT, -80, 25);
  425eb2:	2319      	movs	r3, #25
  425eb4:	9300      	str	r3, [sp, #0]
  425eb6:	f06f 034f 	mvn.w	r3, #79	; 0x4f
  425eba:	2203      	movs	r2, #3
  425ebc:	2100      	movs	r1, #0
  425ebe:	4650      	mov	r0, sl
  425ec0:	4e7f      	ldr	r6, [pc, #508]	; (4260c0 <lv_principal+0x2e0>)
  425ec2:	47b0      	blx	r6
	lv_label_set_text(labelBat, "#2D9613  " LV_SYMBOL_BATTERY_3 " 76% ");
  425ec4:	4986      	ldr	r1, [pc, #536]	; (4260e0 <lv_principal+0x300>)
  425ec6:	4650      	mov	r0, sl
  425ec8:	47d8      	blx	fp
	lv_obj_set_width(labelBat, 150);
  425eca:	2196      	movs	r1, #150	; 0x96
  425ecc:	4650      	mov	r0, sl
  425ece:	47c0      	blx	r8
  425ed0:	47a8      	blx	r5
  425ed2:	47a0      	blx	r4
	labelTempo = lv_label_create(lv_scr_act(), NULL);
  425ed4:	2100      	movs	r1, #0
  425ed6:	47b8      	blx	r7
  425ed8:	f8df a238 	ldr.w	sl, [pc, #568]	; 426114 <lv_principal+0x334>
  425edc:	f8ca 0000 	str.w	r0, [sl]
	lv_label_set_long_mode(labelTempo, LV_LABEL_LONG_BREAK);
  425ee0:	2101      	movs	r1, #1
  425ee2:	4b7e      	ldr	r3, [pc, #504]	; (4260dc <lv_principal+0x2fc>)
  425ee4:	4798      	blx	r3
	lv_label_set_recolor(labelTempo, true);
  425ee6:	2101      	movs	r1, #1
  425ee8:	f8da 0000 	ldr.w	r0, [sl]
  425eec:	47c8      	blx	r9
	lv_obj_align(labelTempo, NULL, LV_ALIGN_IN_TOP_MID, 0, 25);
  425eee:	2319      	movs	r3, #25
  425ef0:	9300      	str	r3, [sp, #0]
  425ef2:	2300      	movs	r3, #0
  425ef4:	2202      	movs	r2, #2
  425ef6:	4619      	mov	r1, r3
  425ef8:	f8da 0000 	ldr.w	r0, [sl]
  425efc:	47b0      	blx	r6
	lv_obj_set_width(labelTempo, 150);
  425efe:	2196      	movs	r1, #150	; 0x96
  425f00:	f8da 0000 	ldr.w	r0, [sl]
  425f04:	47c0      	blx	r8
  425f06:	47a8      	blx	r5
  425f08:	47a0      	blx	r4
	 labelDot = lv_label_create(lv_scr_act(), NULL);
  425f0a:	2100      	movs	r1, #0
  425f0c:	47b8      	blx	r7
  425f0e:	f8df a208 	ldr.w	sl, [pc, #520]	; 426118 <lv_principal+0x338>
  425f12:	f8ca 0000 	str.w	r0, [sl]
	lv_label_set_long_mode(  labelDot, LV_LABEL_LONG_BREAK);
  425f16:	2101      	movs	r1, #1
  425f18:	4b70      	ldr	r3, [pc, #448]	; (4260dc <lv_principal+0x2fc>)
  425f1a:	4798      	blx	r3
	lv_label_set_recolor(  labelDot, true);
  425f1c:	2101      	movs	r1, #1
  425f1e:	f8da 0000 	ldr.w	r0, [sl]
  425f22:	47c8      	blx	r9
	lv_obj_align( labelDot, NULL, LV_ALIGN_IN_TOP_MID, 14, 25);
  425f24:	2319      	movs	r3, #25
  425f26:	9300      	str	r3, [sp, #0]
  425f28:	230e      	movs	r3, #14
  425f2a:	2202      	movs	r2, #2
  425f2c:	2100      	movs	r1, #0
  425f2e:	f8da 0000 	ldr.w	r0, [sl]
  425f32:	47b0      	blx	r6
	lv_label_set_text( labelDot, "#000000 : ");
  425f34:	496b      	ldr	r1, [pc, #428]	; (4260e4 <lv_principal+0x304>)
  425f36:	f8da 0000 	ldr.w	r0, [sl]
  425f3a:	47d8      	blx	fp
	lv_obj_set_width( labelDot, 150);
  425f3c:	2196      	movs	r1, #150	; 0x96
  425f3e:	f8da 0000 	ldr.w	r0, [sl]
  425f42:	47c0      	blx	r8
  425f44:	47a8      	blx	r5
  425f46:	47a0      	blx	r4
	lv_obj_t * labelOx = lv_label_create(lv_scr_act(), NULL);
  425f48:	2100      	movs	r1, #0
  425f4a:	47b8      	blx	r7
  425f4c:	4682      	mov	sl, r0
	lv_label_set_long_mode(labelOx, LV_LABEL_LONG_BREAK);
  425f4e:	2101      	movs	r1, #1
  425f50:	4b62      	ldr	r3, [pc, #392]	; (4260dc <lv_principal+0x2fc>)
  425f52:	4798      	blx	r3
	lv_label_set_recolor(labelOx, true);
  425f54:	2101      	movs	r1, #1
  425f56:	4650      	mov	r0, sl
  425f58:	47c8      	blx	r9
	lv_obj_align(labelOx, NULL, LV_ALIGN_IN_LEFT_MID, 40, 20);
  425f5a:	2314      	movs	r3, #20
  425f5c:	9300      	str	r3, [sp, #0]
  425f5e:	2328      	movs	r3, #40	; 0x28
  425f60:	2207      	movs	r2, #7
  425f62:	2100      	movs	r1, #0
  425f64:	4650      	mov	r0, sl
  425f66:	47b0      	blx	r6
	lv_label_set_text(labelOx, "#000000 OXIGENIO");
  425f68:	495f      	ldr	r1, [pc, #380]	; (4260e8 <lv_principal+0x308>)
  425f6a:	4650      	mov	r0, sl
  425f6c:	47d8      	blx	fp
	lv_obj_set_width(labelOx, 150);
  425f6e:	2196      	movs	r1, #150	; 0x96
  425f70:	4650      	mov	r0, sl
  425f72:	47c0      	blx	r8
  425f74:	47a8      	blx	r5
  425f76:	47a0      	blx	r4
	labelOxNum = lv_label_create(lv_scr_act(), NULL);
  425f78:	2100      	movs	r1, #0
  425f7a:	47b8      	blx	r7
  425f7c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 42611c <lv_principal+0x33c>
  425f80:	f8ca 0000 	str.w	r0, [sl]
	lv_obj_align(labelOxNum, NULL, LV_ALIGN_IN_LEFT_MID, 40 , 42);
  425f84:	232a      	movs	r3, #42	; 0x2a
  425f86:	9300      	str	r3, [sp, #0]
  425f88:	2328      	movs	r3, #40	; 0x28
  425f8a:	2207      	movs	r2, #7
  425f8c:	2100      	movs	r1, #0
  425f8e:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  425f90:	4b56      	ldr	r3, [pc, #344]	; (4260ec <lv_principal+0x30c>)
  425f92:	f248 028e 	movw	r2, #32910	; 0x808e
  425f96:	2100      	movs	r1, #0
  425f98:	f8da 0000 	ldr.w	r0, [sl]
  425f9c:	4e54      	ldr	r6, [pc, #336]	; (4260f0 <lv_principal+0x310>)
  425f9e:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  425fa0:	f641 73f8 	movw	r3, #8184	; 0x1ff8
  425fa4:	f248 0289 	movw	r2, #32905	; 0x8089
  425fa8:	2100      	movs	r1, #0
  425faa:	f8da 0000 	ldr.w	r0, [sl]
  425fae:	4e40      	ldr	r6, [pc, #256]	; (4260b0 <lv_principal+0x2d0>)
  425fb0:	47b0      	blx	r6
  425fb2:	47a8      	blx	r5
  425fb4:	47a0      	blx	r4
	lv_obj_t * labelOxUni = lv_label_create(lv_scr_act(), NULL);
  425fb6:	2100      	movs	r1, #0
  425fb8:	47b8      	blx	r7
  425fba:	4682      	mov	sl, r0
	lv_label_set_long_mode(labelOxUni, LV_LABEL_LONG_BREAK);
  425fbc:	2101      	movs	r1, #1
  425fbe:	4b47      	ldr	r3, [pc, #284]	; (4260dc <lv_principal+0x2fc>)
  425fc0:	4798      	blx	r3
	lv_label_set_recolor(labelOxUni, true);
  425fc2:	2101      	movs	r1, #1
  425fc4:	4650      	mov	r0, sl
  425fc6:	47c8      	blx	r9
	lv_obj_align(labelOxUni, NULL, LV_ALIGN_IN_LEFT_MID, 105, 60);
  425fc8:	233c      	movs	r3, #60	; 0x3c
  425fca:	9300      	str	r3, [sp, #0]
  425fcc:	2369      	movs	r3, #105	; 0x69
  425fce:	2207      	movs	r2, #7
  425fd0:	2100      	movs	r1, #0
  425fd2:	4650      	mov	r0, sl
  425fd4:	4e3a      	ldr	r6, [pc, #232]	; (4260c0 <lv_principal+0x2e0>)
  425fd6:	47b0      	blx	r6
	lv_label_set_text(labelOxUni, "#CA1041 SpO2%");
  425fd8:	4946      	ldr	r1, [pc, #280]	; (4260f4 <lv_principal+0x314>)
  425fda:	4650      	mov	r0, sl
  425fdc:	47d8      	blx	fp
	lv_obj_set_width(labelOxUni, 150);
  425fde:	2196      	movs	r1, #150	; 0x96
  425fe0:	4650      	mov	r0, sl
  425fe2:	47c0      	blx	r8
  425fe4:	47a8      	blx	r5
  425fe6:	47a0      	blx	r4
	lv_obj_t * labelBa = lv_label_create(lv_scr_act(), NULL);
  425fe8:	2100      	movs	r1, #0
  425fea:	47b8      	blx	r7
  425fec:	4682      	mov	sl, r0
	lv_label_set_long_mode(labelBa, LV_LABEL_LONG_BREAK);
  425fee:	2101      	movs	r1, #1
  425ff0:	4b3a      	ldr	r3, [pc, #232]	; (4260dc <lv_principal+0x2fc>)
  425ff2:	4798      	blx	r3
	lv_label_set_recolor(labelBa, true);
  425ff4:	2101      	movs	r1, #1
  425ff6:	4650      	mov	r0, sl
  425ff8:	47c8      	blx	r9
	lv_obj_align(labelBa, NULL, LV_ALIGN_IN_LEFT_MID, 40, -50);
  425ffa:	f06f 0331 	mvn.w	r3, #49	; 0x31
  425ffe:	9300      	str	r3, [sp, #0]
  426000:	2328      	movs	r3, #40	; 0x28
  426002:	2207      	movs	r2, #7
  426004:	2100      	movs	r1, #0
  426006:	4650      	mov	r0, sl
  426008:	47b0      	blx	r6
	lv_label_set_text(labelBa, "#000000 BATIMENTOS");
  42600a:	493b      	ldr	r1, [pc, #236]	; (4260f8 <lv_principal+0x318>)
  42600c:	4650      	mov	r0, sl
  42600e:	47d8      	blx	fp
	lv_obj_set_width(labelBa, 150);
  426010:	2196      	movs	r1, #150	; 0x96
  426012:	4650      	mov	r0, sl
  426014:	47c0      	blx	r8
  426016:	47a8      	blx	r5
  426018:	47a0      	blx	r4
	labelBaNum = lv_label_create(lv_scr_act(), NULL);
  42601a:	2100      	movs	r1, #0
  42601c:	47b8      	blx	r7
  42601e:	f8df a100 	ldr.w	sl, [pc, #256]	; 426120 <lv_principal+0x340>
  426022:	f8ca 0000 	str.w	r0, [sl]
	lv_obj_align(labelBaNum, NULL, LV_ALIGN_IN_LEFT_MID, 40 , -28);
  426026:	f06f 031b 	mvn.w	r3, #27
  42602a:	9300      	str	r3, [sp, #0]
  42602c:	2328      	movs	r3, #40	; 0x28
  42602e:	2207      	movs	r2, #7
  426030:	2100      	movs	r1, #0
  426032:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  426034:	4b2d      	ldr	r3, [pc, #180]	; (4260ec <lv_principal+0x30c>)
  426036:	f248 028e 	movw	r2, #32910	; 0x808e
  42603a:	2100      	movs	r1, #0
  42603c:	f8da 0000 	ldr.w	r0, [sl]
  426040:	4e2b      	ldr	r6, [pc, #172]	; (4260f0 <lv_principal+0x310>)
  426042:	47b0      	blx	r6
	lv_obj_set_style_local_text_color(labelBaNum, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_GREEN);
  426044:	f04f 0300 	mov.w	r3, #0
  426048:	2204      	movs	r2, #4
  42604a:	f362 0302 	bfi	r3, r2, #0, #3
  42604e:	f36f 03c7 	bfc	r3, #3, #5
  426052:	f36f 230c 	bfc	r3, #8, #5
  426056:	f36f 334f 	bfc	r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  42605a:	f248 0289 	movw	r2, #32905	; 0x8089
  42605e:	2100      	movs	r1, #0
  426060:	f8da 0000 	ldr.w	r0, [sl]
  426064:	4e12      	ldr	r6, [pc, #72]	; (4260b0 <lv_principal+0x2d0>)
  426066:	47b0      	blx	r6
  426068:	47a8      	blx	r5
  42606a:	47a0      	blx	r4
	lv_obj_t *labelBaUni = lv_label_create(lv_scr_act(), NULL);
  42606c:	2100      	movs	r1, #0
  42606e:	47b8      	blx	r7
  426070:	4604      	mov	r4, r0
	lv_label_set_long_mode(labelBaUni, LV_LABEL_LONG_BREAK);
  426072:	2101      	movs	r1, #1
  426074:	4b19      	ldr	r3, [pc, #100]	; (4260dc <lv_principal+0x2fc>)
  426076:	4798      	blx	r3
	lv_label_set_recolor(labelBaUni, true);
  426078:	2101      	movs	r1, #1
  42607a:	4620      	mov	r0, r4
  42607c:	47c8      	blx	r9
	lv_obj_align(labelBaUni, NULL, LV_ALIGN_IN_LEFT_MID, 97, -13);
  42607e:	f06f 030c 	mvn.w	r3, #12
  426082:	9300      	str	r3, [sp, #0]
  426084:	2361      	movs	r3, #97	; 0x61
  426086:	2207      	movs	r2, #7
  426088:	2100      	movs	r1, #0
  42608a:	4620      	mov	r0, r4
  42608c:	4d0c      	ldr	r5, [pc, #48]	; (4260c0 <lv_principal+0x2e0>)
  42608e:	47a8      	blx	r5
	lv_label_set_text(labelBaUni, "#2D9613 BPM");
  426090:	491a      	ldr	r1, [pc, #104]	; (4260fc <lv_principal+0x31c>)
  426092:	4620      	mov	r0, r4
  426094:	47d8      	blx	fp
	lv_obj_set_width(labelBaUni, 150);
  426096:	2196      	movs	r1, #150	; 0x96
  426098:	4620      	mov	r0, r4
  42609a:	47c0      	blx	r8
}
  42609c:	b003      	add	sp, #12
  42609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4260a2:	bf00      	nop
  4260a4:	00414ce5 	.word	0x00414ce5
  4260a8:	00403659 	.word	0x00403659
  4260ac:	0042f904 	.word	0x0042f904
  4260b0:	004079c1 	.word	0x004079c1
  4260b4:	00422689 	.word	0x00422689
  4260b8:	0042b49c 	.word	0x0042b49c
  4260bc:	004224a9 	.word	0x004224a9
  4260c0:	00406201 	.word	0x00406201
  4260c4:	0041da75 	.word	0x0041da75
  4260c8:	00425529 	.word	0x00425529
  4260cc:	004057b5 	.word	0x004057b5
  4260d0:	00406d6d 	.word	0x00406d6d
  4260d4:	00423c65 	.word	0x00423c65
  4260d8:	00431044 	.word	0x00431044
  4260dc:	00423b5d 	.word	0x00423b5d
  4260e0:	00431054 	.word	0x00431054
  4260e4:	00431068 	.word	0x00431068
  4260e8:	00431074 	.word	0x00431074
  4260ec:	2040000c 	.word	0x2040000c
  4260f0:	00407a41 	.word	0x00407a41
  4260f4:	00431088 	.word	0x00431088
  4260f8:	00431098 	.word	0x00431098
  4260fc:	004310ac 	.word	0x004310ac
  426100:	00406d2d 	.word	0x00406d2d
  426104:	00407981 	.word	0x00407981
  426108:	2043a14c 	.word	0x2043a14c
  42610c:	00423c11 	.word	0x00423c11
  426110:	00423961 	.word	0x00423961
  426114:	2043a150 	.word	0x2043a150
  426118:	2043a140 	.word	0x2043a140
  42611c:	2043a148 	.word	0x2043a148
  426120:	2043a13c 	.word	0x2043a13c

00426124 <lv_screen_chart>:
void lv_screen_chart(void) {
  426124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  426128:	b082      	sub	sp, #8
  42612a:	f8df 915c 	ldr.w	r9, [pc, #348]	; 426288 <lv_screen_chart+0x164>
  42612e:	47c8      	blx	r9
  426130:	f8df 8158 	ldr.w	r8, [pc, #344]	; 42628c <lv_screen_chart+0x168>
  426134:	47c0      	blx	r8
	chart = lv_chart_create(lv_scr_act(), NULL);
  426136:	2100      	movs	r1, #0
  426138:	4b40      	ldr	r3, [pc, #256]	; (42623c <lv_screen_chart+0x118>)
  42613a:	4798      	blx	r3
  42613c:	4c40      	ldr	r4, [pc, #256]	; (426240 <lv_screen_chart+0x11c>)
  42613e:	6020      	str	r0, [r4, #0]
	lv_obj_set_size(chart, 110, 40);
  426140:	2228      	movs	r2, #40	; 0x28
  426142:	216e      	movs	r1, #110	; 0x6e
  426144:	4b3f      	ldr	r3, [pc, #252]	; (426244 <lv_screen_chart+0x120>)
  426146:	4798      	blx	r3
	lv_obj_align(chart, NULL, LV_ALIGN_IN_TOP_MID, 45, 80);
  426148:	2350      	movs	r3, #80	; 0x50
  42614a:	9300      	str	r3, [sp, #0]
  42614c:	232d      	movs	r3, #45	; 0x2d
  42614e:	2202      	movs	r2, #2
  426150:	2100      	movs	r1, #0
  426152:	6820      	ldr	r0, [r4, #0]
  426154:	4f3c      	ldr	r7, [pc, #240]	; (426248 <lv_screen_chart+0x124>)
  426156:	47b8      	blx	r7
	lv_chart_set_type(chart, LV_CHART_TYPE_LINE);
  426158:	2101      	movs	r1, #1
  42615a:	6820      	ldr	r0, [r4, #0]
  42615c:	4b3b      	ldr	r3, [pc, #236]	; (42624c <lv_screen_chart+0x128>)
  42615e:	4798      	blx	r3
#endif

#if LV_USE_CHART
static inline void lv_chart_set_range(lv_obj_t * chart, lv_coord_t ymin, lv_coord_t ymax)
{
    lv_chart_set_y_range(chart, LV_CHART_AXIS_PRIMARY_Y, ymin,  ymax);
  426160:	f640 73ff 	movw	r3, #4095	; 0xfff
  426164:	2200      	movs	r2, #0
  426166:	4611      	mov	r1, r2
  426168:	6820      	ldr	r0, [r4, #0]
  42616a:	4d39      	ldr	r5, [pc, #228]	; (426250 <lv_screen_chart+0x12c>)
  42616c:	47a8      	blx	r5
	lv_chart_set_point_count(chart, CHAR_DATA_LEN);
  42616e:	21fa      	movs	r1, #250	; 0xfa
  426170:	6820      	ldr	r0, [r4, #0]
  426172:	4b38      	ldr	r3, [pc, #224]	; (426254 <lv_screen_chart+0x130>)
  426174:	4798      	blx	r3
	lv_chart_set_div_line_count(chart, 0, 0);
  426176:	2200      	movs	r2, #0
  426178:	4611      	mov	r1, r2
  42617a:	6820      	ldr	r0, [r4, #0]
  42617c:	4b36      	ldr	r3, [pc, #216]	; (426258 <lv_screen_chart+0x134>)
  42617e:	4798      	blx	r3
	lv_chart_set_update_mode(chart, LV_CHART_UPDATE_MODE_SHIFT);
  426180:	2100      	movs	r1, #0
  426182:	6820      	ldr	r0, [r4, #0]
  426184:	4b35      	ldr	r3, [pc, #212]	; (42625c <lv_screen_chart+0x138>)
  426186:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  426188:	237f      	movs	r3, #127	; 0x7f
  42618a:	222c      	movs	r2, #44	; 0x2c
  42618c:	2102      	movs	r1, #2
  42618e:	6820      	ldr	r0, [r4, #0]
  426190:	4d33      	ldr	r5, [pc, #204]	; (426260 <lv_screen_chart+0x13c>)
  426192:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  426194:	2301      	movs	r3, #1
  426196:	2223      	movs	r2, #35	; 0x23
  426198:	2102      	movs	r1, #2
  42619a:	6820      	ldr	r0, [r4, #0]
  42619c:	4d31      	ldr	r5, [pc, #196]	; (426264 <lv_screen_chart+0x140>)
  42619e:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  4261a0:	23ff      	movs	r3, #255	; 0xff
  4261a2:	2221      	movs	r2, #33	; 0x21
  4261a4:	2102      	movs	r1, #2
  4261a6:	6820      	ldr	r0, [r4, #0]
  4261a8:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  4261aa:	2300      	movs	r3, #0
  4261ac:	2222      	movs	r2, #34	; 0x22
  4261ae:	2102      	movs	r1, #2
  4261b0:	6820      	ldr	r0, [r4, #0]
  4261b2:	47a8      	blx	r5
	ser1 = lv_chart_add_series(chart, LV_COLOR_GREEN);
  4261b4:	2604      	movs	r6, #4
  4261b6:	f04f 0100 	mov.w	r1, #0
  4261ba:	f366 0102 	bfi	r1, r6, #0, #3
  4261be:	f36f 01c7 	bfc	r1, #3, #5
  4261c2:	f36f 210c 	bfc	r1, #8, #5
  4261c6:	f36f 314f 	bfc	r1, #13, #3
  4261ca:	6820      	ldr	r0, [r4, #0]
  4261cc:	4b26      	ldr	r3, [pc, #152]	; (426268 <lv_screen_chart+0x144>)
  4261ce:	4798      	blx	r3
  4261d0:	4601      	mov	r1, r0
  4261d2:	4b26      	ldr	r3, [pc, #152]	; (42626c <lv_screen_chart+0x148>)
  4261d4:	6018      	str	r0, [r3, #0]
	lv_chart_set_ext_array(chart, ser1, ser1_data, CHAR_DATA_LEN);
  4261d6:	23fa      	movs	r3, #250	; 0xfa
  4261d8:	4a25      	ldr	r2, [pc, #148]	; (426270 <lv_screen_chart+0x14c>)
  4261da:	6820      	ldr	r0, [r4, #0]
  4261dc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 426290 <lv_screen_chart+0x16c>
  4261e0:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4261e2:	2301      	movs	r3, #1
  4261e4:	2290      	movs	r2, #144	; 0x90
  4261e6:	2102      	movs	r1, #2
  4261e8:	6820      	ldr	r0, [r4, #0]
  4261ea:	47a8      	blx	r5
  4261ec:	47c8      	blx	r9
  4261ee:	47c0      	blx	r8
	labelFloor = lv_label_create(lv_scr_act(), NULL);
  4261f0:	2100      	movs	r1, #0
  4261f2:	4b20      	ldr	r3, [pc, #128]	; (426274 <lv_screen_chart+0x150>)
  4261f4:	4798      	blx	r3
  4261f6:	4d20      	ldr	r5, [pc, #128]	; (426278 <lv_screen_chart+0x154>)
  4261f8:	6028      	str	r0, [r5, #0]
	lv_obj_align(labelFloor, NULL, LV_ALIGN_IN_TOP_LEFT, -5 , 0);
  4261fa:	2400      	movs	r4, #0
  4261fc:	9400      	str	r4, [sp, #0]
  4261fe:	f06f 0304 	mvn.w	r3, #4
  426202:	2201      	movs	r2, #1
  426204:	4621      	mov	r1, r4
  426206:	47b8      	blx	r7
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  426208:	4b1c      	ldr	r3, [pc, #112]	; (42627c <lv_screen_chart+0x158>)
  42620a:	f248 028e 	movw	r2, #32910	; 0x808e
  42620e:	4621      	mov	r1, r4
  426210:	6828      	ldr	r0, [r5, #0]
  426212:	4f1b      	ldr	r7, [pc, #108]	; (426280 <lv_screen_chart+0x15c>)
  426214:	47b8      	blx	r7
	lv_obj_set_style_local_text_color(labelFloor, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_GREEN);
  426216:	f04f 0300 	mov.w	r3, #0
  42621a:	f366 0302 	bfi	r3, r6, #0, #3
  42621e:	f364 03c7 	bfi	r3, r4, #3, #5
  426222:	f364 230c 	bfi	r3, r4, #8, #5
  426226:	f364 334f 	bfi	r3, r4, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  42622a:	f248 0289 	movw	r2, #32905	; 0x8089
  42622e:	4621      	mov	r1, r4
  426230:	6828      	ldr	r0, [r5, #0]
  426232:	4c14      	ldr	r4, [pc, #80]	; (426284 <lv_screen_chart+0x160>)
  426234:	47a0      	blx	r4
}
  426236:	b002      	add	sp, #8
  426238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42623c:	0042045d 	.word	0x0042045d
  426240:	2043a3fc 	.word	0x2043a3fc
  426244:	00406c39 	.word	0x00406c39
  426248:	00406201 	.word	0x00406201
  42624c:	00420bf1 	.word	0x00420bf1
  426250:	00420b79 	.word	0x00420b79
  426254:	00420c39 	.word	0x00420c39
  426258:	00420761 	.word	0x00420761
  42625c:	004207b9 	.word	0x004207b9
  426260:	00407a01 	.word	0x00407a01
  426264:	00407981 	.word	0x00407981
  426268:	004206a5 	.word	0x004206a5
  42626c:	2043a3f0 	.word	0x2043a3f0
  426270:	2043a400 	.word	0x2043a400
  426274:	00423c65 	.word	0x00423c65
  426278:	2043a144 	.word	0x2043a144
  42627c:	2040003c 	.word	0x2040003c
  426280:	00407a41 	.word	0x00407a41
  426284:	004079c1 	.word	0x004079c1
  426288:	00414ce5 	.word	0x00414ce5
  42628c:	00403659 	.word	0x00403659
  426290:	0042080d 	.word	0x0042080d

00426294 <task_lcd>:
static void task_lcd(void *pvParameters) {
  426294:	b508      	push	{r3, lr}
	lv_principal();
  426296:	4b06      	ldr	r3, [pc, #24]	; (4262b0 <task_lcd+0x1c>)
  426298:	4798      	blx	r3
	lv_screen_chart();
  42629a:	4b06      	ldr	r3, [pc, #24]	; (4262b4 <task_lcd+0x20>)
  42629c:	4798      	blx	r3
		lv_tick_inc(50);
  42629e:	2032      	movs	r0, #50	; 0x32
  4262a0:	4b05      	ldr	r3, [pc, #20]	; (4262b8 <task_lcd+0x24>)
  4262a2:	4798      	blx	r3
		lv_task_handler();
  4262a4:	4b05      	ldr	r3, [pc, #20]	; (4262bc <task_lcd+0x28>)
  4262a6:	4798      	blx	r3
		vTaskDelay(50);
  4262a8:	2032      	movs	r0, #50	; 0x32
  4262aa:	4b05      	ldr	r3, [pc, #20]	; (4262c0 <task_lcd+0x2c>)
  4262ac:	4798      	blx	r3
  4262ae:	e7f6      	b.n	42629e <task_lcd+0xa>
  4262b0:	00425de1 	.word	0x00425de1
  4262b4:	00426125 	.word	0x00426125
  4262b8:	004150e5 	.word	0x004150e5
  4262bc:	004176c1 	.word	0x004176c1
  4262c0:	00402b15 	.word	0x00402b15

004262c4 <lv_alarme>:
{
  4262c4:	b510      	push	{r4, lr}
  4262c6:	b082      	sub	sp, #8
  4262c8:	4b0c      	ldr	r3, [pc, #48]	; (4262fc <lv_alarme+0x38>)
  4262ca:	4798      	blx	r3
  4262cc:	4b0c      	ldr	r3, [pc, #48]	; (426300 <lv_alarme+0x3c>)
  4262ce:	4798      	blx	r3
	mbox1 = lv_msgbox_create(lv_scr_act(), NULL);
  4262d0:	2100      	movs	r1, #0
  4262d2:	4b0c      	ldr	r3, [pc, #48]	; (426304 <lv_alarme+0x40>)
  4262d4:	4798      	blx	r3
  4262d6:	4c0c      	ldr	r4, [pc, #48]	; (426308 <lv_alarme+0x44>)
  4262d8:	6020      	str	r0, [r4, #0]
	lv_msgbox_set_text(mbox1, "Cuidado! Sua oxigenacao esta abaixo de 90.");
  4262da:	490c      	ldr	r1, [pc, #48]	; (42630c <lv_alarme+0x48>)
  4262dc:	4b0c      	ldr	r3, [pc, #48]	; (426310 <lv_alarme+0x4c>)
  4262de:	4798      	blx	r3
	lv_obj_set_width(mbox1, 200);
  4262e0:	21c8      	movs	r1, #200	; 0xc8
  4262e2:	6820      	ldr	r0, [r4, #0]
  4262e4:	4b0b      	ldr	r3, [pc, #44]	; (426314 <lv_alarme+0x50>)
  4262e6:	4798      	blx	r3
	lv_obj_align(mbox1, NULL, LV_ALIGN_CENTER, 0, 0); /*Align to the corner*/
  4262e8:	6820      	ldr	r0, [r4, #0]
  4262ea:	2100      	movs	r1, #0
  4262ec:	9100      	str	r1, [sp, #0]
  4262ee:	460b      	mov	r3, r1
  4262f0:	460a      	mov	r2, r1
  4262f2:	4c09      	ldr	r4, [pc, #36]	; (426318 <lv_alarme+0x54>)
  4262f4:	47a0      	blx	r4
}
  4262f6:	b002      	add	sp, #8
  4262f8:	bd10      	pop	{r4, pc}
  4262fa:	bf00      	nop
  4262fc:	00414ce5 	.word	0x00414ce5
  426300:	00403659 	.word	0x00403659
  426304:	004241fd 	.word	0x004241fd
  426308:	2043a7e8 	.word	0x2043a7e8
  42630c:	00431018 	.word	0x00431018
  426310:	004243fd 	.word	0x004243fd
  426314:	00406d2d 	.word	0x00406d2d
  426318:	00406201 	.word	0x00406201

0042631c <task_main>:
static void task_main(void *pvParameters) {
  42631c:	b510      	push	{r4, lr}
  42631e:	b084      	sub	sp, #16
  426320:	e03d      	b.n	42639e <task_main+0x82>
			printf("ox: %d \n", ox);
  426322:	f89d 100f 	ldrb.w	r1, [sp, #15]
  426326:	482e      	ldr	r0, [pc, #184]	; (4263e0 <task_main+0xc4>)
  426328:	4b2e      	ldr	r3, [pc, #184]	; (4263e4 <task_main+0xc8>)
  42632a:	4798      	blx	r3
			int oxi=ox;
  42632c:	f89d 400f 	ldrb.w	r4, [sp, #15]
			lv_label_set_text_fmt(labelOxNum, "%d", oxi);
  426330:	4622      	mov	r2, r4
  426332:	492d      	ldr	r1, [pc, #180]	; (4263e8 <task_main+0xcc>)
  426334:	4b2d      	ldr	r3, [pc, #180]	; (4263ec <task_main+0xd0>)
  426336:	6818      	ldr	r0, [r3, #0]
  426338:	4b2d      	ldr	r3, [pc, #180]	; (4263f0 <task_main+0xd4>)
  42633a:	4798      	blx	r3
			if(oxi<90){
  42633c:	2c59      	cmp	r4, #89	; 0x59
  42633e:	dc16      	bgt.n	42636e <task_main+0x52>
				if(entrou==0){
  426340:	4b2c      	ldr	r3, [pc, #176]	; (4263f4 <task_main+0xd8>)
  426342:	681b      	ldr	r3, [r3, #0]
  426344:	2b00      	cmp	r3, #0
  426346:	d134      	bne.n	4263b2 <task_main+0x96>
					lv_alarme();
  426348:	4b2b      	ldr	r3, [pc, #172]	; (4263f8 <task_main+0xdc>)
  42634a:	4798      	blx	r3
					vTaskDelay(3000);
  42634c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  426350:	4b2a      	ldr	r3, [pc, #168]	; (4263fc <task_main+0xe0>)
  426352:	4798      	blx	r3
					lv_msgbox_set_anim_time(mbox1,3);
  426354:	4c2a      	ldr	r4, [pc, #168]	; (426400 <task_main+0xe4>)
  426356:	2103      	movs	r1, #3
  426358:	6820      	ldr	r0, [r4, #0]
  42635a:	4b2a      	ldr	r3, [pc, #168]	; (426404 <task_main+0xe8>)
  42635c:	4798      	blx	r3
					lv_msgbox_start_auto_close(mbox1, 0);
  42635e:	2100      	movs	r1, #0
  426360:	6820      	ldr	r0, [r4, #0]
  426362:	4b29      	ldr	r3, [pc, #164]	; (426408 <task_main+0xec>)
  426364:	4798      	blx	r3
					entrou=1;
  426366:	2201      	movs	r2, #1
  426368:	4b22      	ldr	r3, [pc, #136]	; (4263f4 <task_main+0xd8>)
  42636a:	601a      	str	r2, [r3, #0]
  42636c:	e021      	b.n	4263b2 <task_main+0x96>
				entrou=0;
  42636e:	2200      	movs	r2, #0
  426370:	4b20      	ldr	r3, [pc, #128]	; (4263f4 <task_main+0xd8>)
  426372:	601a      	str	r2, [r3, #0]
  426374:	e01d      	b.n	4263b2 <task_main+0x96>
			lv_chart_set_next(chart, ser1, ecg.ecg);
  426376:	4c25      	ldr	r4, [pc, #148]	; (42640c <task_main+0xf0>)
  426378:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  42637c:	4b24      	ldr	r3, [pc, #144]	; (426410 <task_main+0xf4>)
  42637e:	6819      	ldr	r1, [r3, #0]
  426380:	6820      	ldr	r0, [r4, #0]
  426382:	4b24      	ldr	r3, [pc, #144]	; (426414 <task_main+0xf8>)
  426384:	4798      	blx	r3
			lv_chart_refresh(chart);
  426386:	6820      	ldr	r0, [r4, #0]
  426388:	4b23      	ldr	r3, [pc, #140]	; (426418 <task_main+0xfc>)
  42638a:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  42638c:	2300      	movs	r3, #0
  42638e:	2203      	movs	r2, #3
  426390:	2102      	movs	r1, #2
  426392:	6820      	ldr	r0, [r4, #0]
  426394:	4c21      	ldr	r4, [pc, #132]	; (42641c <task_main+0x100>)
  426396:	47a0      	blx	r4
		vTaskDelay(25);
  426398:	2019      	movs	r0, #25
  42639a:	4b18      	ldr	r3, [pc, #96]	; (4263fc <task_main+0xe0>)
  42639c:	4798      	blx	r3
		if ( xQueueReceive( xQueueOx, &ox, 0 )) {
  42639e:	2300      	movs	r3, #0
  4263a0:	461a      	mov	r2, r3
  4263a2:	f10d 010f 	add.w	r1, sp, #15
  4263a6:	481e      	ldr	r0, [pc, #120]	; (426420 <task_main+0x104>)
  4263a8:	6800      	ldr	r0, [r0, #0]
  4263aa:	4c1e      	ldr	r4, [pc, #120]	; (426424 <task_main+0x108>)
  4263ac:	47a0      	blx	r4
  4263ae:	2800      	cmp	r0, #0
  4263b0:	d1b7      	bne.n	426322 <task_main+0x6>
		if (xQueueReceive( xQueueEcgInfo, &(ecg), ( TickType_t )  100 / portTICK_PERIOD_MS)) {
  4263b2:	2300      	movs	r3, #0
  4263b4:	2264      	movs	r2, #100	; 0x64
  4263b6:	a901      	add	r1, sp, #4
  4263b8:	481b      	ldr	r0, [pc, #108]	; (426428 <task_main+0x10c>)
  4263ba:	6800      	ldr	r0, [r0, #0]
  4263bc:	4c19      	ldr	r4, [pc, #100]	; (426424 <task_main+0x108>)
  4263be:	47a0      	blx	r4
  4263c0:	2800      	cmp	r0, #0
  4263c2:	d0e9      	beq.n	426398 <task_main+0x7c>
			printf(" aquiiiiii %d\n", ecg.bpm);
  4263c4:	9902      	ldr	r1, [sp, #8]
  4263c6:	4819      	ldr	r0, [pc, #100]	; (42642c <task_main+0x110>)
  4263c8:	4b06      	ldr	r3, [pc, #24]	; (4263e4 <task_main+0xc8>)
  4263ca:	4798      	blx	r3
			 		  if(ecg.bpm > 0) {
  4263cc:	9a02      	ldr	r2, [sp, #8]
  4263ce:	2a00      	cmp	r2, #0
  4263d0:	ddd1      	ble.n	426376 <task_main+0x5a>
		 				   lv_label_set_text_fmt(labelBaNum, "%d", ecg.bpm);
  4263d2:	4905      	ldr	r1, [pc, #20]	; (4263e8 <task_main+0xcc>)
  4263d4:	4b16      	ldr	r3, [pc, #88]	; (426430 <task_main+0x114>)
  4263d6:	6818      	ldr	r0, [r3, #0]
  4263d8:	4b05      	ldr	r3, [pc, #20]	; (4263f0 <task_main+0xd4>)
  4263da:	4798      	blx	r3
  4263dc:	e7cb      	b.n	426376 <task_main+0x5a>
  4263de:	bf00      	nop
  4263e0:	00431184 	.word	0x00431184
  4263e4:	00427251 	.word	0x00427251
  4263e8:	00431190 	.word	0x00431190
  4263ec:	2043a148 	.word	0x2043a148
  4263f0:	00423a5d 	.word	0x00423a5d
  4263f4:	2043a11c 	.word	0x2043a11c
  4263f8:	004262c5 	.word	0x004262c5
  4263fc:	00402b15 	.word	0x00402b15
  426400:	2043a7e8 	.word	0x2043a7e8
  426404:	00424459 	.word	0x00424459
  426408:	00424515 	.word	0x00424515
  42640c:	2043a3fc 	.word	0x2043a3fc
  426410:	2043a3f0 	.word	0x2043a3f0
  426414:	00420d91 	.word	0x00420d91
  426418:	00420b49 	.word	0x00420b49
  42641c:	00407981 	.word	0x00407981
  426420:	2043a3f8 	.word	0x2043a3f8
  426424:	004022cd 	.word	0x004022cd
  426428:	2043a3e8 	.word	0x2043a3e8
  42642c:	00431194 	.word	0x00431194
  426430:	2043a13c 	.word	0x2043a13c

00426434 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  426434:	b530      	push	{r4, r5, lr}
  426436:	b099      	sub	sp, #100	; 0x64
	/* board and sys init */
	board_init();
  426438:	4b49      	ldr	r3, [pc, #292]	; (426560 <main+0x12c>)
  42643a:	4798      	blx	r3
	sysclk_init();
  42643c:	4b49      	ldr	r3, [pc, #292]	; (426564 <main+0x130>)
  42643e:	4798      	blx	r3
	configure_console();
  426440:	4b49      	ldr	r3, [pc, #292]	; (426568 <main+0x134>)
  426442:	4798      	blx	r3

	/* LCd int */
	configure_lcd();
  426444:	4b49      	ldr	r3, [pc, #292]	; (42656c <main+0x138>)
  426446:	4798      	blx	r3
	ili9341_init();
  426448:	4b49      	ldr	r3, [pc, #292]	; (426570 <main+0x13c>)
  42644a:	4798      	blx	r3
	configure_touch();
  42644c:	4b49      	ldr	r3, [pc, #292]	; (426574 <main+0x140>)
  42644e:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  426450:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  426454:	4b48      	ldr	r3, [pc, #288]	; (426578 <main+0x144>)
  426456:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_backlight_on();
	
	
	
	/*LittlevGL init*/
	lv_init();
  426458:	4b48      	ldr	r3, [pc, #288]	; (42657c <main+0x148>)
  42645a:	4798      	blx	r3
	lv_disp_drv_t disp_drv;                 /*A variable to hold the drivers. Can be local variable*/
	lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
  42645c:	a80b      	add	r0, sp, #44	; 0x2c
  42645e:	4b48      	ldr	r3, [pc, #288]	; (426580 <main+0x14c>)
  426460:	4798      	blx	r3
	lv_disp_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);  /*Initialize `disp_buf` with the buffer(s) */
  426462:	4c48      	ldr	r4, [pc, #288]	; (426584 <main+0x150>)
  426464:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  426468:	2200      	movs	r2, #0
  42646a:	4947      	ldr	r1, [pc, #284]	; (426588 <main+0x154>)
  42646c:	4620      	mov	r0, r4
  42646e:	4d47      	ldr	r5, [pc, #284]	; (42658c <main+0x158>)
  426470:	47a8      	blx	r5
	disp_drv.buffer = &disp_buf;            /*Set an initialized buffer*/
  426472:	940c      	str	r4, [sp, #48]	; 0x30
	disp_drv.flush_cb = my_flush_cb;        /*Set a flush callback to draw to the display*/
  426474:	4b46      	ldr	r3, [pc, #280]	; (426590 <main+0x15c>)
  426476:	930e      	str	r3, [sp, #56]	; 0x38
	lv_disp_t * disp;
	disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
  426478:	a80b      	add	r0, sp, #44	; 0x2c
  42647a:	4b46      	ldr	r3, [pc, #280]	; (426594 <main+0x160>)
  42647c:	4798      	blx	r3
	
	/* Init input on LVGL */
	lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);      /*Basic initialization*/
  42647e:	a804      	add	r0, sp, #16
  426480:	4b45      	ldr	r3, [pc, #276]	; (426598 <main+0x164>)
  426482:	4798      	blx	r3
	indev_drv.type = LV_INDEV_TYPE_POINTER;
  426484:	2501      	movs	r5, #1
  426486:	f88d 5010 	strb.w	r5, [sp, #16]
	indev_drv.read_cb = my_input_read;
  42648a:	4b44      	ldr	r3, [pc, #272]	; (42659c <main+0x168>)
  42648c:	9305      	str	r3, [sp, #20]
	/*Register the driver in LVGL and save the created input device object*/
	lv_indev_t * my_indev = lv_indev_drv_register(&indev_drv);
  42648e:	a804      	add	r0, sp, #16
  426490:	4b43      	ldr	r3, [pc, #268]	; (4265a0 <main+0x16c>)
  426492:	4798      	blx	r3
	
	xQueueOx = xQueueCreate(32, sizeof(char));
  426494:	2200      	movs	r2, #0
  426496:	4629      	mov	r1, r5
  426498:	2020      	movs	r0, #32
  42649a:	4c42      	ldr	r4, [pc, #264]	; (4265a4 <main+0x170>)
  42649c:	47a0      	blx	r4
  42649e:	4b42      	ldr	r3, [pc, #264]	; (4265a8 <main+0x174>)
  4264a0:	6018      	str	r0, [r3, #0]
	xQueueEcgInfo = xQueueCreate(32, sizeof(ecgInfo));
  4264a2:	2200      	movs	r2, #0
  4264a4:	2108      	movs	r1, #8
  4264a6:	2020      	movs	r0, #32
  4264a8:	47a0      	blx	r4
  4264aa:	4b40      	ldr	r3, [pc, #256]	; (4265ac <main+0x178>)
  4264ac:	6018      	str	r0, [r3, #0]
	xSemaphore = xSemaphoreCreateBinary();
  4264ae:	2203      	movs	r2, #3
  4264b0:	2100      	movs	r1, #0
  4264b2:	4628      	mov	r0, r5
  4264b4:	47a0      	blx	r4
  4264b6:	4b3e      	ldr	r3, [pc, #248]	; (4265b0 <main+0x17c>)
  4264b8:	6018      	str	r0, [r3, #0]

	if (xTaskCreate(task_lcd, "LCD", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  4264ba:	2300      	movs	r3, #0
  4264bc:	9303      	str	r3, [sp, #12]
  4264be:	9302      	str	r3, [sp, #8]
  4264c0:	9301      	str	r3, [sp, #4]
  4264c2:	9300      	str	r3, [sp, #0]
  4264c4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4264c8:	493a      	ldr	r1, [pc, #232]	; (4265b4 <main+0x180>)
  4264ca:	483b      	ldr	r0, [pc, #236]	; (4265b8 <main+0x184>)
  4264cc:	4c3b      	ldr	r4, [pc, #236]	; (4265bc <main+0x188>)
  4264ce:	47a0      	blx	r4
  4264d0:	42a8      	cmp	r0, r5
  4264d2:	d002      	beq.n	4264da <main+0xa6>
		printf("Failed to create lcd task\r\n");
  4264d4:	483a      	ldr	r0, [pc, #232]	; (4265c0 <main+0x18c>)
  4264d6:	4b3b      	ldr	r3, [pc, #236]	; (4265c4 <main+0x190>)
  4264d8:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_clock, "CLK", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  4264da:	2300      	movs	r3, #0
  4264dc:	9303      	str	r3, [sp, #12]
  4264de:	9302      	str	r3, [sp, #8]
  4264e0:	9301      	str	r3, [sp, #4]
  4264e2:	9300      	str	r3, [sp, #0]
  4264e4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4264e8:	4937      	ldr	r1, [pc, #220]	; (4265c8 <main+0x194>)
  4264ea:	4838      	ldr	r0, [pc, #224]	; (4265cc <main+0x198>)
  4264ec:	4c33      	ldr	r4, [pc, #204]	; (4265bc <main+0x188>)
  4264ee:	47a0      	blx	r4
  4264f0:	2801      	cmp	r0, #1
  4264f2:	d002      	beq.n	4264fa <main+0xc6>
		printf("Failed to create clk task\r\n");
  4264f4:	4836      	ldr	r0, [pc, #216]	; (4265d0 <main+0x19c>)
  4264f6:	4b33      	ldr	r3, [pc, #204]	; (4265c4 <main+0x190>)
  4264f8:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_aps2, "APS2", TASK_APS2_STACK_SIZE, NULL, TASK_APS2_PRIORITY, NULL) != pdPASS) {
  4264fa:	2300      	movs	r3, #0
  4264fc:	9303      	str	r3, [sp, #12]
  4264fe:	9302      	str	r3, [sp, #8]
  426500:	9301      	str	r3, [sp, #4]
  426502:	9300      	str	r3, [sp, #0]
  426504:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  426508:	4932      	ldr	r1, [pc, #200]	; (4265d4 <main+0x1a0>)
  42650a:	4833      	ldr	r0, [pc, #204]	; (4265d8 <main+0x1a4>)
  42650c:	4c2b      	ldr	r4, [pc, #172]	; (4265bc <main+0x188>)
  42650e:	47a0      	blx	r4
  426510:	2801      	cmp	r0, #1
  426512:	d002      	beq.n	42651a <main+0xe6>
		printf("Failed to create APS task\r\n");
  426514:	4831      	ldr	r0, [pc, #196]	; (4265dc <main+0x1a8>)
  426516:	4b2b      	ldr	r3, [pc, #172]	; (4265c4 <main+0x190>)
  426518:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_main, "main", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  42651a:	2300      	movs	r3, #0
  42651c:	9303      	str	r3, [sp, #12]
  42651e:	9302      	str	r3, [sp, #8]
  426520:	9301      	str	r3, [sp, #4]
  426522:	9300      	str	r3, [sp, #0]
  426524:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  426528:	492d      	ldr	r1, [pc, #180]	; (4265e0 <main+0x1ac>)
  42652a:	482e      	ldr	r0, [pc, #184]	; (4265e4 <main+0x1b0>)
  42652c:	4c23      	ldr	r4, [pc, #140]	; (4265bc <main+0x188>)
  42652e:	47a0      	blx	r4
  426530:	2801      	cmp	r0, #1
  426532:	d002      	beq.n	42653a <main+0x106>
		printf("Failed to create Main task\r\n");
  426534:	482c      	ldr	r0, [pc, #176]	; (4265e8 <main+0x1b4>)
  426536:	4b23      	ldr	r3, [pc, #140]	; (4265c4 <main+0x190>)
  426538:	4798      	blx	r3
	}
	

	if (xTaskCreate(task_process, "process", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  42653a:	2300      	movs	r3, #0
  42653c:	9303      	str	r3, [sp, #12]
  42653e:	9302      	str	r3, [sp, #8]
  426540:	9301      	str	r3, [sp, #4]
  426542:	9300      	str	r3, [sp, #0]
  426544:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  426548:	4928      	ldr	r1, [pc, #160]	; (4265ec <main+0x1b8>)
  42654a:	4829      	ldr	r0, [pc, #164]	; (4265f0 <main+0x1bc>)
  42654c:	4c1b      	ldr	r4, [pc, #108]	; (4265bc <main+0x188>)
  42654e:	47a0      	blx	r4
  426550:	2801      	cmp	r0, #1
  426552:	d002      	beq.n	42655a <main+0x126>
		printf("Failed to create process task\r\n");
  426554:	4827      	ldr	r0, [pc, #156]	; (4265f4 <main+0x1c0>)
  426556:	4b1b      	ldr	r3, [pc, #108]	; (4265c4 <main+0x190>)
  426558:	4798      	blx	r3
	}
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  42655a:	4b27      	ldr	r3, [pc, #156]	; (4265f8 <main+0x1c4>)
  42655c:	4798      	blx	r3
  42655e:	e7fe      	b.n	42655e <main+0x12a>
  426560:	00424805 	.word	0x00424805
  426564:	00424611 	.word	0x00424611
  426568:	00425921 	.word	0x00425921
  42656c:	004258e5 	.word	0x004258e5
  426570:	0040140d 	.word	0x0040140d
  426574:	004008f9 	.word	0x004008f9
  426578:	400e1200 	.word	0x400e1200
  42657c:	00405611 	.word	0x00405611
  426580:	00414c6d 	.word	0x00414c6d
  426584:	2043a0f8 	.word	0x2043a0f8
  426588:	204148f8 	.word	0x204148f8
  42658c:	00414cc5 	.word	0x00414cc5
  426590:	00425551 	.word	0x00425551
  426594:	00414e75 	.word	0x00414e75
  426598:	00414fad 	.word	0x00414fad
  42659c:	004255a9 	.word	0x004255a9
  4265a0:	00414fd9 	.word	0x00414fd9
  4265a4:	00401e65 	.word	0x00401e65
  4265a8:	2043a3f8 	.word	0x2043a3f8
  4265ac:	2043a3e8 	.word	0x2043a3e8
  4265b0:	2043a3ec 	.word	0x2043a3ec
  4265b4:	004310b8 	.word	0x004310b8
  4265b8:	00426295 	.word	0x00426295
  4265bc:	004026bd 	.word	0x004026bd
  4265c0:	004310bc 	.word	0x004310bc
  4265c4:	00427251 	.word	0x00427251
  4265c8:	004310d8 	.word	0x004310d8
  4265cc:	00425d39 	.word	0x00425d39
  4265d0:	004310dc 	.word	0x004310dc
  4265d4:	004310f8 	.word	0x004310f8
  4265d8:	00400389 	.word	0x00400389
  4265dc:	00431100 	.word	0x00431100
  4265e0:	0043111c 	.word	0x0043111c
  4265e4:	0042631d 	.word	0x0042631d
  4265e8:	00431124 	.word	0x00431124
  4265ec:	00431144 	.word	0x00431144
  4265f0:	00425ad9 	.word	0x00425ad9
  4265f4:	0043114c 	.word	0x0043114c
  4265f8:	00402815 	.word	0x00402815

004265fc <arm_sin_f32>:
  4265fc:	ee06 0a90 	vmov	s13, r0
  426600:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 426670 <arm_sin_f32+0x74>
  426604:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  426608:	ee26 7a87 	vmul.f32	s14, s13, s14
  42660c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  426610:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  426614:	d504      	bpl.n	426620 <arm_sin_f32+0x24>
  426616:	ee17 3a90 	vmov	r3, s15
  42661a:	3b01      	subs	r3, #1
  42661c:	ee07 3a90 	vmov	s15, r3
  426620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  426624:	eddf 6a13 	vldr	s13, [pc, #76]	; 426674 <arm_sin_f32+0x78>
  426628:	ee77 7a67 	vsub.f32	s15, s14, s15
  42662c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  426630:	eebc 7ae7 	vcvt.u32.f32	s14, s15
  426634:	ee17 3a10 	vmov	r3, s14
  426638:	f3c3 0308 	ubfx	r3, r3, #0, #9
  42663c:	ee07 3a10 	vmov	s14, r3
  426640:	eef8 6a47 	vcvt.f32.u32	s13, s14
  426644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  426648:	ee77 7ae6 	vsub.f32	s15, s15, s13
  42664c:	4a0a      	ldr	r2, [pc, #40]	; (426678 <arm_sin_f32+0x7c>)
  42664e:	ee37 7a67 	vsub.f32	s14, s14, s15
  426652:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  426656:	ed91 6a00 	vldr	s12, [r1]
  42665a:	edd1 6a01 	vldr	s13, [r1, #4]
  42665e:	ee27 7a06 	vmul.f32	s14, s14, s12
  426662:	ee67 7aa6 	vmul.f32	s15, s15, s13
  426666:	ee77 7a27 	vadd.f32	s15, s14, s15
  42666a:	ee17 0a90 	vmov	r0, s15
  42666e:	4770      	bx	lr
  426670:	3e22f983 	.word	0x3e22f983
  426674:	44000000 	.word	0x44000000
  426678:	004311f4 	.word	0x004311f4

0042667c <__aeabi_drsub>:
  42667c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  426680:	e002      	b.n	426688 <__adddf3>
  426682:	bf00      	nop

00426684 <__aeabi_dsub>:
  426684:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00426688 <__adddf3>:
  426688:	b530      	push	{r4, r5, lr}
  42668a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  42668e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  426692:	ea94 0f05 	teq	r4, r5
  426696:	bf08      	it	eq
  426698:	ea90 0f02 	teqeq	r0, r2
  42669c:	bf1f      	itttt	ne
  42669e:	ea54 0c00 	orrsne.w	ip, r4, r0
  4266a2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4266a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4266aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4266ae:	f000 80e2 	beq.w	426876 <__adddf3+0x1ee>
  4266b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4266b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4266ba:	bfb8      	it	lt
  4266bc:	426d      	neglt	r5, r5
  4266be:	dd0c      	ble.n	4266da <__adddf3+0x52>
  4266c0:	442c      	add	r4, r5
  4266c2:	ea80 0202 	eor.w	r2, r0, r2
  4266c6:	ea81 0303 	eor.w	r3, r1, r3
  4266ca:	ea82 0000 	eor.w	r0, r2, r0
  4266ce:	ea83 0101 	eor.w	r1, r3, r1
  4266d2:	ea80 0202 	eor.w	r2, r0, r2
  4266d6:	ea81 0303 	eor.w	r3, r1, r3
  4266da:	2d36      	cmp	r5, #54	; 0x36
  4266dc:	bf88      	it	hi
  4266de:	bd30      	pophi	{r4, r5, pc}
  4266e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4266e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4266e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4266ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4266f0:	d002      	beq.n	4266f8 <__adddf3+0x70>
  4266f2:	4240      	negs	r0, r0
  4266f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4266f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4266fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  426700:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  426704:	d002      	beq.n	42670c <__adddf3+0x84>
  426706:	4252      	negs	r2, r2
  426708:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  42670c:	ea94 0f05 	teq	r4, r5
  426710:	f000 80a7 	beq.w	426862 <__adddf3+0x1da>
  426714:	f1a4 0401 	sub.w	r4, r4, #1
  426718:	f1d5 0e20 	rsbs	lr, r5, #32
  42671c:	db0d      	blt.n	42673a <__adddf3+0xb2>
  42671e:	fa02 fc0e 	lsl.w	ip, r2, lr
  426722:	fa22 f205 	lsr.w	r2, r2, r5
  426726:	1880      	adds	r0, r0, r2
  426728:	f141 0100 	adc.w	r1, r1, #0
  42672c:	fa03 f20e 	lsl.w	r2, r3, lr
  426730:	1880      	adds	r0, r0, r2
  426732:	fa43 f305 	asr.w	r3, r3, r5
  426736:	4159      	adcs	r1, r3
  426738:	e00e      	b.n	426758 <__adddf3+0xd0>
  42673a:	f1a5 0520 	sub.w	r5, r5, #32
  42673e:	f10e 0e20 	add.w	lr, lr, #32
  426742:	2a01      	cmp	r2, #1
  426744:	fa03 fc0e 	lsl.w	ip, r3, lr
  426748:	bf28      	it	cs
  42674a:	f04c 0c02 	orrcs.w	ip, ip, #2
  42674e:	fa43 f305 	asr.w	r3, r3, r5
  426752:	18c0      	adds	r0, r0, r3
  426754:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  426758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  42675c:	d507      	bpl.n	42676e <__adddf3+0xe6>
  42675e:	f04f 0e00 	mov.w	lr, #0
  426762:	f1dc 0c00 	rsbs	ip, ip, #0
  426766:	eb7e 0000 	sbcs.w	r0, lr, r0
  42676a:	eb6e 0101 	sbc.w	r1, lr, r1
  42676e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  426772:	d31b      	bcc.n	4267ac <__adddf3+0x124>
  426774:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  426778:	d30c      	bcc.n	426794 <__adddf3+0x10c>
  42677a:	0849      	lsrs	r1, r1, #1
  42677c:	ea5f 0030 	movs.w	r0, r0, rrx
  426780:	ea4f 0c3c 	mov.w	ip, ip, rrx
  426784:	f104 0401 	add.w	r4, r4, #1
  426788:	ea4f 5244 	mov.w	r2, r4, lsl #21
  42678c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  426790:	f080 809a 	bcs.w	4268c8 <__adddf3+0x240>
  426794:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  426798:	bf08      	it	eq
  42679a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  42679e:	f150 0000 	adcs.w	r0, r0, #0
  4267a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4267a6:	ea41 0105 	orr.w	r1, r1, r5
  4267aa:	bd30      	pop	{r4, r5, pc}
  4267ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4267b0:	4140      	adcs	r0, r0
  4267b2:	eb41 0101 	adc.w	r1, r1, r1
  4267b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4267ba:	f1a4 0401 	sub.w	r4, r4, #1
  4267be:	d1e9      	bne.n	426794 <__adddf3+0x10c>
  4267c0:	f091 0f00 	teq	r1, #0
  4267c4:	bf04      	itt	eq
  4267c6:	4601      	moveq	r1, r0
  4267c8:	2000      	moveq	r0, #0
  4267ca:	fab1 f381 	clz	r3, r1
  4267ce:	bf08      	it	eq
  4267d0:	3320      	addeq	r3, #32
  4267d2:	f1a3 030b 	sub.w	r3, r3, #11
  4267d6:	f1b3 0220 	subs.w	r2, r3, #32
  4267da:	da0c      	bge.n	4267f6 <__adddf3+0x16e>
  4267dc:	320c      	adds	r2, #12
  4267de:	dd08      	ble.n	4267f2 <__adddf3+0x16a>
  4267e0:	f102 0c14 	add.w	ip, r2, #20
  4267e4:	f1c2 020c 	rsb	r2, r2, #12
  4267e8:	fa01 f00c 	lsl.w	r0, r1, ip
  4267ec:	fa21 f102 	lsr.w	r1, r1, r2
  4267f0:	e00c      	b.n	42680c <__adddf3+0x184>
  4267f2:	f102 0214 	add.w	r2, r2, #20
  4267f6:	bfd8      	it	le
  4267f8:	f1c2 0c20 	rsble	ip, r2, #32
  4267fc:	fa01 f102 	lsl.w	r1, r1, r2
  426800:	fa20 fc0c 	lsr.w	ip, r0, ip
  426804:	bfdc      	itt	le
  426806:	ea41 010c 	orrle.w	r1, r1, ip
  42680a:	4090      	lslle	r0, r2
  42680c:	1ae4      	subs	r4, r4, r3
  42680e:	bfa2      	ittt	ge
  426810:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  426814:	4329      	orrge	r1, r5
  426816:	bd30      	popge	{r4, r5, pc}
  426818:	ea6f 0404 	mvn.w	r4, r4
  42681c:	3c1f      	subs	r4, #31
  42681e:	da1c      	bge.n	42685a <__adddf3+0x1d2>
  426820:	340c      	adds	r4, #12
  426822:	dc0e      	bgt.n	426842 <__adddf3+0x1ba>
  426824:	f104 0414 	add.w	r4, r4, #20
  426828:	f1c4 0220 	rsb	r2, r4, #32
  42682c:	fa20 f004 	lsr.w	r0, r0, r4
  426830:	fa01 f302 	lsl.w	r3, r1, r2
  426834:	ea40 0003 	orr.w	r0, r0, r3
  426838:	fa21 f304 	lsr.w	r3, r1, r4
  42683c:	ea45 0103 	orr.w	r1, r5, r3
  426840:	bd30      	pop	{r4, r5, pc}
  426842:	f1c4 040c 	rsb	r4, r4, #12
  426846:	f1c4 0220 	rsb	r2, r4, #32
  42684a:	fa20 f002 	lsr.w	r0, r0, r2
  42684e:	fa01 f304 	lsl.w	r3, r1, r4
  426852:	ea40 0003 	orr.w	r0, r0, r3
  426856:	4629      	mov	r1, r5
  426858:	bd30      	pop	{r4, r5, pc}
  42685a:	fa21 f004 	lsr.w	r0, r1, r4
  42685e:	4629      	mov	r1, r5
  426860:	bd30      	pop	{r4, r5, pc}
  426862:	f094 0f00 	teq	r4, #0
  426866:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  42686a:	bf06      	itte	eq
  42686c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  426870:	3401      	addeq	r4, #1
  426872:	3d01      	subne	r5, #1
  426874:	e74e      	b.n	426714 <__adddf3+0x8c>
  426876:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  42687a:	bf18      	it	ne
  42687c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  426880:	d029      	beq.n	4268d6 <__adddf3+0x24e>
  426882:	ea94 0f05 	teq	r4, r5
  426886:	bf08      	it	eq
  426888:	ea90 0f02 	teqeq	r0, r2
  42688c:	d005      	beq.n	42689a <__adddf3+0x212>
  42688e:	ea54 0c00 	orrs.w	ip, r4, r0
  426892:	bf04      	itt	eq
  426894:	4619      	moveq	r1, r3
  426896:	4610      	moveq	r0, r2
  426898:	bd30      	pop	{r4, r5, pc}
  42689a:	ea91 0f03 	teq	r1, r3
  42689e:	bf1e      	ittt	ne
  4268a0:	2100      	movne	r1, #0
  4268a2:	2000      	movne	r0, #0
  4268a4:	bd30      	popne	{r4, r5, pc}
  4268a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4268aa:	d105      	bne.n	4268b8 <__adddf3+0x230>
  4268ac:	0040      	lsls	r0, r0, #1
  4268ae:	4149      	adcs	r1, r1
  4268b0:	bf28      	it	cs
  4268b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4268b6:	bd30      	pop	{r4, r5, pc}
  4268b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4268bc:	bf3c      	itt	cc
  4268be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4268c2:	bd30      	popcc	{r4, r5, pc}
  4268c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4268c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4268cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4268d0:	f04f 0000 	mov.w	r0, #0
  4268d4:	bd30      	pop	{r4, r5, pc}
  4268d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4268da:	bf1a      	itte	ne
  4268dc:	4619      	movne	r1, r3
  4268de:	4610      	movne	r0, r2
  4268e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4268e4:	bf1c      	itt	ne
  4268e6:	460b      	movne	r3, r1
  4268e8:	4602      	movne	r2, r0
  4268ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4268ee:	bf06      	itte	eq
  4268f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4268f4:	ea91 0f03 	teqeq	r1, r3
  4268f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4268fc:	bd30      	pop	{r4, r5, pc}
  4268fe:	bf00      	nop

00426900 <__aeabi_ui2d>:
  426900:	f090 0f00 	teq	r0, #0
  426904:	bf04      	itt	eq
  426906:	2100      	moveq	r1, #0
  426908:	4770      	bxeq	lr
  42690a:	b530      	push	{r4, r5, lr}
  42690c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  426910:	f104 0432 	add.w	r4, r4, #50	; 0x32
  426914:	f04f 0500 	mov.w	r5, #0
  426918:	f04f 0100 	mov.w	r1, #0
  42691c:	e750      	b.n	4267c0 <__adddf3+0x138>
  42691e:	bf00      	nop

00426920 <__aeabi_i2d>:
  426920:	f090 0f00 	teq	r0, #0
  426924:	bf04      	itt	eq
  426926:	2100      	moveq	r1, #0
  426928:	4770      	bxeq	lr
  42692a:	b530      	push	{r4, r5, lr}
  42692c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  426930:	f104 0432 	add.w	r4, r4, #50	; 0x32
  426934:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  426938:	bf48      	it	mi
  42693a:	4240      	negmi	r0, r0
  42693c:	f04f 0100 	mov.w	r1, #0
  426940:	e73e      	b.n	4267c0 <__adddf3+0x138>
  426942:	bf00      	nop

00426944 <__aeabi_f2d>:
  426944:	0042      	lsls	r2, r0, #1
  426946:	ea4f 01e2 	mov.w	r1, r2, asr #3
  42694a:	ea4f 0131 	mov.w	r1, r1, rrx
  42694e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  426952:	bf1f      	itttt	ne
  426954:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  426958:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  42695c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  426960:	4770      	bxne	lr
  426962:	f092 0f00 	teq	r2, #0
  426966:	bf14      	ite	ne
  426968:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  42696c:	4770      	bxeq	lr
  42696e:	b530      	push	{r4, r5, lr}
  426970:	f44f 7460 	mov.w	r4, #896	; 0x380
  426974:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  426978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  42697c:	e720      	b.n	4267c0 <__adddf3+0x138>
  42697e:	bf00      	nop

00426980 <__aeabi_ul2d>:
  426980:	ea50 0201 	orrs.w	r2, r0, r1
  426984:	bf08      	it	eq
  426986:	4770      	bxeq	lr
  426988:	b530      	push	{r4, r5, lr}
  42698a:	f04f 0500 	mov.w	r5, #0
  42698e:	e00a      	b.n	4269a6 <__aeabi_l2d+0x16>

00426990 <__aeabi_l2d>:
  426990:	ea50 0201 	orrs.w	r2, r0, r1
  426994:	bf08      	it	eq
  426996:	4770      	bxeq	lr
  426998:	b530      	push	{r4, r5, lr}
  42699a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  42699e:	d502      	bpl.n	4269a6 <__aeabi_l2d+0x16>
  4269a0:	4240      	negs	r0, r0
  4269a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4269a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4269aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4269ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4269b2:	f43f aedc 	beq.w	42676e <__adddf3+0xe6>
  4269b6:	f04f 0203 	mov.w	r2, #3
  4269ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4269be:	bf18      	it	ne
  4269c0:	3203      	addne	r2, #3
  4269c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4269c6:	bf18      	it	ne
  4269c8:	3203      	addne	r2, #3
  4269ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4269ce:	f1c2 0320 	rsb	r3, r2, #32
  4269d2:	fa00 fc03 	lsl.w	ip, r0, r3
  4269d6:	fa20 f002 	lsr.w	r0, r0, r2
  4269da:	fa01 fe03 	lsl.w	lr, r1, r3
  4269de:	ea40 000e 	orr.w	r0, r0, lr
  4269e2:	fa21 f102 	lsr.w	r1, r1, r2
  4269e6:	4414      	add	r4, r2
  4269e8:	e6c1      	b.n	42676e <__adddf3+0xe6>
  4269ea:	bf00      	nop

004269ec <__aeabi_dmul>:
  4269ec:	b570      	push	{r4, r5, r6, lr}
  4269ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4269f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4269f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4269fa:	bf1d      	ittte	ne
  4269fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  426a00:	ea94 0f0c 	teqne	r4, ip
  426a04:	ea95 0f0c 	teqne	r5, ip
  426a08:	f000 f8de 	bleq	426bc8 <__aeabi_dmul+0x1dc>
  426a0c:	442c      	add	r4, r5
  426a0e:	ea81 0603 	eor.w	r6, r1, r3
  426a12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  426a16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  426a1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  426a1e:	bf18      	it	ne
  426a20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  426a24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  426a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  426a2c:	d038      	beq.n	426aa0 <__aeabi_dmul+0xb4>
  426a2e:	fba0 ce02 	umull	ip, lr, r0, r2
  426a32:	f04f 0500 	mov.w	r5, #0
  426a36:	fbe1 e502 	umlal	lr, r5, r1, r2
  426a3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  426a3e:	fbe0 e503 	umlal	lr, r5, r0, r3
  426a42:	f04f 0600 	mov.w	r6, #0
  426a46:	fbe1 5603 	umlal	r5, r6, r1, r3
  426a4a:	f09c 0f00 	teq	ip, #0
  426a4e:	bf18      	it	ne
  426a50:	f04e 0e01 	orrne.w	lr, lr, #1
  426a54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  426a58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  426a5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  426a60:	d204      	bcs.n	426a6c <__aeabi_dmul+0x80>
  426a62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  426a66:	416d      	adcs	r5, r5
  426a68:	eb46 0606 	adc.w	r6, r6, r6
  426a6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  426a70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  426a74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  426a78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  426a7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  426a80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  426a84:	bf88      	it	hi
  426a86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  426a8a:	d81e      	bhi.n	426aca <__aeabi_dmul+0xde>
  426a8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  426a90:	bf08      	it	eq
  426a92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  426a96:	f150 0000 	adcs.w	r0, r0, #0
  426a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  426a9e:	bd70      	pop	{r4, r5, r6, pc}
  426aa0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  426aa4:	ea46 0101 	orr.w	r1, r6, r1
  426aa8:	ea40 0002 	orr.w	r0, r0, r2
  426aac:	ea81 0103 	eor.w	r1, r1, r3
  426ab0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  426ab4:	bfc2      	ittt	gt
  426ab6:	ebd4 050c 	rsbsgt	r5, r4, ip
  426aba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  426abe:	bd70      	popgt	{r4, r5, r6, pc}
  426ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  426ac4:	f04f 0e00 	mov.w	lr, #0
  426ac8:	3c01      	subs	r4, #1
  426aca:	f300 80ab 	bgt.w	426c24 <__aeabi_dmul+0x238>
  426ace:	f114 0f36 	cmn.w	r4, #54	; 0x36
  426ad2:	bfde      	ittt	le
  426ad4:	2000      	movle	r0, #0
  426ad6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  426ada:	bd70      	pople	{r4, r5, r6, pc}
  426adc:	f1c4 0400 	rsb	r4, r4, #0
  426ae0:	3c20      	subs	r4, #32
  426ae2:	da35      	bge.n	426b50 <__aeabi_dmul+0x164>
  426ae4:	340c      	adds	r4, #12
  426ae6:	dc1b      	bgt.n	426b20 <__aeabi_dmul+0x134>
  426ae8:	f104 0414 	add.w	r4, r4, #20
  426aec:	f1c4 0520 	rsb	r5, r4, #32
  426af0:	fa00 f305 	lsl.w	r3, r0, r5
  426af4:	fa20 f004 	lsr.w	r0, r0, r4
  426af8:	fa01 f205 	lsl.w	r2, r1, r5
  426afc:	ea40 0002 	orr.w	r0, r0, r2
  426b00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  426b04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  426b08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  426b0c:	fa21 f604 	lsr.w	r6, r1, r4
  426b10:	eb42 0106 	adc.w	r1, r2, r6
  426b14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  426b18:	bf08      	it	eq
  426b1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  426b1e:	bd70      	pop	{r4, r5, r6, pc}
  426b20:	f1c4 040c 	rsb	r4, r4, #12
  426b24:	f1c4 0520 	rsb	r5, r4, #32
  426b28:	fa00 f304 	lsl.w	r3, r0, r4
  426b2c:	fa20 f005 	lsr.w	r0, r0, r5
  426b30:	fa01 f204 	lsl.w	r2, r1, r4
  426b34:	ea40 0002 	orr.w	r0, r0, r2
  426b38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  426b3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  426b40:	f141 0100 	adc.w	r1, r1, #0
  426b44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  426b48:	bf08      	it	eq
  426b4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  426b4e:	bd70      	pop	{r4, r5, r6, pc}
  426b50:	f1c4 0520 	rsb	r5, r4, #32
  426b54:	fa00 f205 	lsl.w	r2, r0, r5
  426b58:	ea4e 0e02 	orr.w	lr, lr, r2
  426b5c:	fa20 f304 	lsr.w	r3, r0, r4
  426b60:	fa01 f205 	lsl.w	r2, r1, r5
  426b64:	ea43 0302 	orr.w	r3, r3, r2
  426b68:	fa21 f004 	lsr.w	r0, r1, r4
  426b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  426b70:	fa21 f204 	lsr.w	r2, r1, r4
  426b74:	ea20 0002 	bic.w	r0, r0, r2
  426b78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  426b7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  426b80:	bf08      	it	eq
  426b82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  426b86:	bd70      	pop	{r4, r5, r6, pc}
  426b88:	f094 0f00 	teq	r4, #0
  426b8c:	d10f      	bne.n	426bae <__aeabi_dmul+0x1c2>
  426b8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  426b92:	0040      	lsls	r0, r0, #1
  426b94:	eb41 0101 	adc.w	r1, r1, r1
  426b98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  426b9c:	bf08      	it	eq
  426b9e:	3c01      	subeq	r4, #1
  426ba0:	d0f7      	beq.n	426b92 <__aeabi_dmul+0x1a6>
  426ba2:	ea41 0106 	orr.w	r1, r1, r6
  426ba6:	f095 0f00 	teq	r5, #0
  426baa:	bf18      	it	ne
  426bac:	4770      	bxne	lr
  426bae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  426bb2:	0052      	lsls	r2, r2, #1
  426bb4:	eb43 0303 	adc.w	r3, r3, r3
  426bb8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  426bbc:	bf08      	it	eq
  426bbe:	3d01      	subeq	r5, #1
  426bc0:	d0f7      	beq.n	426bb2 <__aeabi_dmul+0x1c6>
  426bc2:	ea43 0306 	orr.w	r3, r3, r6
  426bc6:	4770      	bx	lr
  426bc8:	ea94 0f0c 	teq	r4, ip
  426bcc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  426bd0:	bf18      	it	ne
  426bd2:	ea95 0f0c 	teqne	r5, ip
  426bd6:	d00c      	beq.n	426bf2 <__aeabi_dmul+0x206>
  426bd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  426bdc:	bf18      	it	ne
  426bde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  426be2:	d1d1      	bne.n	426b88 <__aeabi_dmul+0x19c>
  426be4:	ea81 0103 	eor.w	r1, r1, r3
  426be8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  426bec:	f04f 0000 	mov.w	r0, #0
  426bf0:	bd70      	pop	{r4, r5, r6, pc}
  426bf2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  426bf6:	bf06      	itte	eq
  426bf8:	4610      	moveq	r0, r2
  426bfa:	4619      	moveq	r1, r3
  426bfc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  426c00:	d019      	beq.n	426c36 <__aeabi_dmul+0x24a>
  426c02:	ea94 0f0c 	teq	r4, ip
  426c06:	d102      	bne.n	426c0e <__aeabi_dmul+0x222>
  426c08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  426c0c:	d113      	bne.n	426c36 <__aeabi_dmul+0x24a>
  426c0e:	ea95 0f0c 	teq	r5, ip
  426c12:	d105      	bne.n	426c20 <__aeabi_dmul+0x234>
  426c14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  426c18:	bf1c      	itt	ne
  426c1a:	4610      	movne	r0, r2
  426c1c:	4619      	movne	r1, r3
  426c1e:	d10a      	bne.n	426c36 <__aeabi_dmul+0x24a>
  426c20:	ea81 0103 	eor.w	r1, r1, r3
  426c24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  426c28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  426c2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  426c30:	f04f 0000 	mov.w	r0, #0
  426c34:	bd70      	pop	{r4, r5, r6, pc}
  426c36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  426c3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  426c3e:	bd70      	pop	{r4, r5, r6, pc}

00426c40 <__aeabi_ddiv>:
  426c40:	b570      	push	{r4, r5, r6, lr}
  426c42:	f04f 0cff 	mov.w	ip, #255	; 0xff
  426c46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  426c4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  426c4e:	bf1d      	ittte	ne
  426c50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  426c54:	ea94 0f0c 	teqne	r4, ip
  426c58:	ea95 0f0c 	teqne	r5, ip
  426c5c:	f000 f8a7 	bleq	426dae <__aeabi_ddiv+0x16e>
  426c60:	eba4 0405 	sub.w	r4, r4, r5
  426c64:	ea81 0e03 	eor.w	lr, r1, r3
  426c68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  426c6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  426c70:	f000 8088 	beq.w	426d84 <__aeabi_ddiv+0x144>
  426c74:	ea4f 3303 	mov.w	r3, r3, lsl #12
  426c78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  426c7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  426c80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  426c84:	ea4f 2202 	mov.w	r2, r2, lsl #8
  426c88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  426c8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  426c90:	ea4f 2600 	mov.w	r6, r0, lsl #8
  426c94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  426c98:	429d      	cmp	r5, r3
  426c9a:	bf08      	it	eq
  426c9c:	4296      	cmpeq	r6, r2
  426c9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  426ca2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  426ca6:	d202      	bcs.n	426cae <__aeabi_ddiv+0x6e>
  426ca8:	085b      	lsrs	r3, r3, #1
  426caa:	ea4f 0232 	mov.w	r2, r2, rrx
  426cae:	1ab6      	subs	r6, r6, r2
  426cb0:	eb65 0503 	sbc.w	r5, r5, r3
  426cb4:	085b      	lsrs	r3, r3, #1
  426cb6:	ea4f 0232 	mov.w	r2, r2, rrx
  426cba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  426cbe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  426cc2:	ebb6 0e02 	subs.w	lr, r6, r2
  426cc6:	eb75 0e03 	sbcs.w	lr, r5, r3
  426cca:	bf22      	ittt	cs
  426ccc:	1ab6      	subcs	r6, r6, r2
  426cce:	4675      	movcs	r5, lr
  426cd0:	ea40 000c 	orrcs.w	r0, r0, ip
  426cd4:	085b      	lsrs	r3, r3, #1
  426cd6:	ea4f 0232 	mov.w	r2, r2, rrx
  426cda:	ebb6 0e02 	subs.w	lr, r6, r2
  426cde:	eb75 0e03 	sbcs.w	lr, r5, r3
  426ce2:	bf22      	ittt	cs
  426ce4:	1ab6      	subcs	r6, r6, r2
  426ce6:	4675      	movcs	r5, lr
  426ce8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  426cec:	085b      	lsrs	r3, r3, #1
  426cee:	ea4f 0232 	mov.w	r2, r2, rrx
  426cf2:	ebb6 0e02 	subs.w	lr, r6, r2
  426cf6:	eb75 0e03 	sbcs.w	lr, r5, r3
  426cfa:	bf22      	ittt	cs
  426cfc:	1ab6      	subcs	r6, r6, r2
  426cfe:	4675      	movcs	r5, lr
  426d00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  426d04:	085b      	lsrs	r3, r3, #1
  426d06:	ea4f 0232 	mov.w	r2, r2, rrx
  426d0a:	ebb6 0e02 	subs.w	lr, r6, r2
  426d0e:	eb75 0e03 	sbcs.w	lr, r5, r3
  426d12:	bf22      	ittt	cs
  426d14:	1ab6      	subcs	r6, r6, r2
  426d16:	4675      	movcs	r5, lr
  426d18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  426d1c:	ea55 0e06 	orrs.w	lr, r5, r6
  426d20:	d018      	beq.n	426d54 <__aeabi_ddiv+0x114>
  426d22:	ea4f 1505 	mov.w	r5, r5, lsl #4
  426d26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  426d2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  426d2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  426d32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  426d36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  426d3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  426d3e:	d1c0      	bne.n	426cc2 <__aeabi_ddiv+0x82>
  426d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  426d44:	d10b      	bne.n	426d5e <__aeabi_ddiv+0x11e>
  426d46:	ea41 0100 	orr.w	r1, r1, r0
  426d4a:	f04f 0000 	mov.w	r0, #0
  426d4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  426d52:	e7b6      	b.n	426cc2 <__aeabi_ddiv+0x82>
  426d54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  426d58:	bf04      	itt	eq
  426d5a:	4301      	orreq	r1, r0
  426d5c:	2000      	moveq	r0, #0
  426d5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  426d62:	bf88      	it	hi
  426d64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  426d68:	f63f aeaf 	bhi.w	426aca <__aeabi_dmul+0xde>
  426d6c:	ebb5 0c03 	subs.w	ip, r5, r3
  426d70:	bf04      	itt	eq
  426d72:	ebb6 0c02 	subseq.w	ip, r6, r2
  426d76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  426d7a:	f150 0000 	adcs.w	r0, r0, #0
  426d7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  426d82:	bd70      	pop	{r4, r5, r6, pc}
  426d84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  426d88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  426d8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  426d90:	bfc2      	ittt	gt
  426d92:	ebd4 050c 	rsbsgt	r5, r4, ip
  426d96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  426d9a:	bd70      	popgt	{r4, r5, r6, pc}
  426d9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  426da0:	f04f 0e00 	mov.w	lr, #0
  426da4:	3c01      	subs	r4, #1
  426da6:	e690      	b.n	426aca <__aeabi_dmul+0xde>
  426da8:	ea45 0e06 	orr.w	lr, r5, r6
  426dac:	e68d      	b.n	426aca <__aeabi_dmul+0xde>
  426dae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  426db2:	ea94 0f0c 	teq	r4, ip
  426db6:	bf08      	it	eq
  426db8:	ea95 0f0c 	teqeq	r5, ip
  426dbc:	f43f af3b 	beq.w	426c36 <__aeabi_dmul+0x24a>
  426dc0:	ea94 0f0c 	teq	r4, ip
  426dc4:	d10a      	bne.n	426ddc <__aeabi_ddiv+0x19c>
  426dc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  426dca:	f47f af34 	bne.w	426c36 <__aeabi_dmul+0x24a>
  426dce:	ea95 0f0c 	teq	r5, ip
  426dd2:	f47f af25 	bne.w	426c20 <__aeabi_dmul+0x234>
  426dd6:	4610      	mov	r0, r2
  426dd8:	4619      	mov	r1, r3
  426dda:	e72c      	b.n	426c36 <__aeabi_dmul+0x24a>
  426ddc:	ea95 0f0c 	teq	r5, ip
  426de0:	d106      	bne.n	426df0 <__aeabi_ddiv+0x1b0>
  426de2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  426de6:	f43f aefd 	beq.w	426be4 <__aeabi_dmul+0x1f8>
  426dea:	4610      	mov	r0, r2
  426dec:	4619      	mov	r1, r3
  426dee:	e722      	b.n	426c36 <__aeabi_dmul+0x24a>
  426df0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  426df4:	bf18      	it	ne
  426df6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  426dfa:	f47f aec5 	bne.w	426b88 <__aeabi_dmul+0x19c>
  426dfe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  426e02:	f47f af0d 	bne.w	426c20 <__aeabi_dmul+0x234>
  426e06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  426e0a:	f47f aeeb 	bne.w	426be4 <__aeabi_dmul+0x1f8>
  426e0e:	e712      	b.n	426c36 <__aeabi_dmul+0x24a>

00426e10 <__aeabi_d2uiz>:
  426e10:	004a      	lsls	r2, r1, #1
  426e12:	d211      	bcs.n	426e38 <__aeabi_d2uiz+0x28>
  426e14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  426e18:	d211      	bcs.n	426e3e <__aeabi_d2uiz+0x2e>
  426e1a:	d50d      	bpl.n	426e38 <__aeabi_d2uiz+0x28>
  426e1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  426e20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  426e24:	d40e      	bmi.n	426e44 <__aeabi_d2uiz+0x34>
  426e26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  426e2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  426e2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  426e32:	fa23 f002 	lsr.w	r0, r3, r2
  426e36:	4770      	bx	lr
  426e38:	f04f 0000 	mov.w	r0, #0
  426e3c:	4770      	bx	lr
  426e3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  426e42:	d102      	bne.n	426e4a <__aeabi_d2uiz+0x3a>
  426e44:	f04f 30ff 	mov.w	r0, #4294967295
  426e48:	4770      	bx	lr
  426e4a:	f04f 0000 	mov.w	r0, #0
  426e4e:	4770      	bx	lr

00426e50 <__aeabi_d2f>:
  426e50:	ea4f 0241 	mov.w	r2, r1, lsl #1
  426e54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  426e58:	bf24      	itt	cs
  426e5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  426e5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  426e62:	d90d      	bls.n	426e80 <__aeabi_d2f+0x30>
  426e64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  426e68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  426e6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  426e70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  426e74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  426e78:	bf08      	it	eq
  426e7a:	f020 0001 	biceq.w	r0, r0, #1
  426e7e:	4770      	bx	lr
  426e80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  426e84:	d121      	bne.n	426eca <__aeabi_d2f+0x7a>
  426e86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  426e8a:	bfbc      	itt	lt
  426e8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  426e90:	4770      	bxlt	lr
  426e92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  426e96:	ea4f 5252 	mov.w	r2, r2, lsr #21
  426e9a:	f1c2 0218 	rsb	r2, r2, #24
  426e9e:	f1c2 0c20 	rsb	ip, r2, #32
  426ea2:	fa10 f30c 	lsls.w	r3, r0, ip
  426ea6:	fa20 f002 	lsr.w	r0, r0, r2
  426eaa:	bf18      	it	ne
  426eac:	f040 0001 	orrne.w	r0, r0, #1
  426eb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  426eb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  426eb8:	fa03 fc0c 	lsl.w	ip, r3, ip
  426ebc:	ea40 000c 	orr.w	r0, r0, ip
  426ec0:	fa23 f302 	lsr.w	r3, r3, r2
  426ec4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  426ec8:	e7cc      	b.n	426e64 <__aeabi_d2f+0x14>
  426eca:	ea7f 5362 	mvns.w	r3, r2, asr #21
  426ece:	d107      	bne.n	426ee0 <__aeabi_d2f+0x90>
  426ed0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  426ed4:	bf1e      	ittt	ne
  426ed6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  426eda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  426ede:	4770      	bxne	lr
  426ee0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  426ee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  426ee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  426eec:	4770      	bx	lr
  426eee:	bf00      	nop

00426ef0 <__aeabi_uldivmod>:
  426ef0:	b953      	cbnz	r3, 426f08 <__aeabi_uldivmod+0x18>
  426ef2:	b94a      	cbnz	r2, 426f08 <__aeabi_uldivmod+0x18>
  426ef4:	2900      	cmp	r1, #0
  426ef6:	bf08      	it	eq
  426ef8:	2800      	cmpeq	r0, #0
  426efa:	bf1c      	itt	ne
  426efc:	f04f 31ff 	movne.w	r1, #4294967295
  426f00:	f04f 30ff 	movne.w	r0, #4294967295
  426f04:	f000 b97a 	b.w	4271fc <__aeabi_idiv0>
  426f08:	f1ad 0c08 	sub.w	ip, sp, #8
  426f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  426f10:	f000 f806 	bl	426f20 <__udivmoddi4>
  426f14:	f8dd e004 	ldr.w	lr, [sp, #4]
  426f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  426f1c:	b004      	add	sp, #16
  426f1e:	4770      	bx	lr

00426f20 <__udivmoddi4>:
  426f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  426f24:	468c      	mov	ip, r1
  426f26:	460d      	mov	r5, r1
  426f28:	4604      	mov	r4, r0
  426f2a:	9e08      	ldr	r6, [sp, #32]
  426f2c:	2b00      	cmp	r3, #0
  426f2e:	d151      	bne.n	426fd4 <__udivmoddi4+0xb4>
  426f30:	428a      	cmp	r2, r1
  426f32:	4617      	mov	r7, r2
  426f34:	d96d      	bls.n	427012 <__udivmoddi4+0xf2>
  426f36:	fab2 fe82 	clz	lr, r2
  426f3a:	f1be 0f00 	cmp.w	lr, #0
  426f3e:	d00b      	beq.n	426f58 <__udivmoddi4+0x38>
  426f40:	f1ce 0c20 	rsb	ip, lr, #32
  426f44:	fa01 f50e 	lsl.w	r5, r1, lr
  426f48:	fa20 fc0c 	lsr.w	ip, r0, ip
  426f4c:	fa02 f70e 	lsl.w	r7, r2, lr
  426f50:	ea4c 0c05 	orr.w	ip, ip, r5
  426f54:	fa00 f40e 	lsl.w	r4, r0, lr
  426f58:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  426f5c:	0c25      	lsrs	r5, r4, #16
  426f5e:	fbbc f8fa 	udiv	r8, ip, sl
  426f62:	fa1f f987 	uxth.w	r9, r7
  426f66:	fb0a cc18 	mls	ip, sl, r8, ip
  426f6a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  426f6e:	fb08 f309 	mul.w	r3, r8, r9
  426f72:	42ab      	cmp	r3, r5
  426f74:	d90a      	bls.n	426f8c <__udivmoddi4+0x6c>
  426f76:	19ed      	adds	r5, r5, r7
  426f78:	f108 32ff 	add.w	r2, r8, #4294967295
  426f7c:	f080 8123 	bcs.w	4271c6 <__udivmoddi4+0x2a6>
  426f80:	42ab      	cmp	r3, r5
  426f82:	f240 8120 	bls.w	4271c6 <__udivmoddi4+0x2a6>
  426f86:	f1a8 0802 	sub.w	r8, r8, #2
  426f8a:	443d      	add	r5, r7
  426f8c:	1aed      	subs	r5, r5, r3
  426f8e:	b2a4      	uxth	r4, r4
  426f90:	fbb5 f0fa 	udiv	r0, r5, sl
  426f94:	fb0a 5510 	mls	r5, sl, r0, r5
  426f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  426f9c:	fb00 f909 	mul.w	r9, r0, r9
  426fa0:	45a1      	cmp	r9, r4
  426fa2:	d909      	bls.n	426fb8 <__udivmoddi4+0x98>
  426fa4:	19e4      	adds	r4, r4, r7
  426fa6:	f100 33ff 	add.w	r3, r0, #4294967295
  426faa:	f080 810a 	bcs.w	4271c2 <__udivmoddi4+0x2a2>
  426fae:	45a1      	cmp	r9, r4
  426fb0:	f240 8107 	bls.w	4271c2 <__udivmoddi4+0x2a2>
  426fb4:	3802      	subs	r0, #2
  426fb6:	443c      	add	r4, r7
  426fb8:	eba4 0409 	sub.w	r4, r4, r9
  426fbc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  426fc0:	2100      	movs	r1, #0
  426fc2:	2e00      	cmp	r6, #0
  426fc4:	d061      	beq.n	42708a <__udivmoddi4+0x16a>
  426fc6:	fa24 f40e 	lsr.w	r4, r4, lr
  426fca:	2300      	movs	r3, #0
  426fcc:	6034      	str	r4, [r6, #0]
  426fce:	6073      	str	r3, [r6, #4]
  426fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  426fd4:	428b      	cmp	r3, r1
  426fd6:	d907      	bls.n	426fe8 <__udivmoddi4+0xc8>
  426fd8:	2e00      	cmp	r6, #0
  426fda:	d054      	beq.n	427086 <__udivmoddi4+0x166>
  426fdc:	2100      	movs	r1, #0
  426fde:	e886 0021 	stmia.w	r6, {r0, r5}
  426fe2:	4608      	mov	r0, r1
  426fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  426fe8:	fab3 f183 	clz	r1, r3
  426fec:	2900      	cmp	r1, #0
  426fee:	f040 808e 	bne.w	42710e <__udivmoddi4+0x1ee>
  426ff2:	42ab      	cmp	r3, r5
  426ff4:	d302      	bcc.n	426ffc <__udivmoddi4+0xdc>
  426ff6:	4282      	cmp	r2, r0
  426ff8:	f200 80fa 	bhi.w	4271f0 <__udivmoddi4+0x2d0>
  426ffc:	1a84      	subs	r4, r0, r2
  426ffe:	eb65 0503 	sbc.w	r5, r5, r3
  427002:	2001      	movs	r0, #1
  427004:	46ac      	mov	ip, r5
  427006:	2e00      	cmp	r6, #0
  427008:	d03f      	beq.n	42708a <__udivmoddi4+0x16a>
  42700a:	e886 1010 	stmia.w	r6, {r4, ip}
  42700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  427012:	b912      	cbnz	r2, 42701a <__udivmoddi4+0xfa>
  427014:	2701      	movs	r7, #1
  427016:	fbb7 f7f2 	udiv	r7, r7, r2
  42701a:	fab7 fe87 	clz	lr, r7
  42701e:	f1be 0f00 	cmp.w	lr, #0
  427022:	d134      	bne.n	42708e <__udivmoddi4+0x16e>
  427024:	1beb      	subs	r3, r5, r7
  427026:	0c3a      	lsrs	r2, r7, #16
  427028:	fa1f fc87 	uxth.w	ip, r7
  42702c:	2101      	movs	r1, #1
  42702e:	fbb3 f8f2 	udiv	r8, r3, r2
  427032:	0c25      	lsrs	r5, r4, #16
  427034:	fb02 3318 	mls	r3, r2, r8, r3
  427038:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  42703c:	fb0c f308 	mul.w	r3, ip, r8
  427040:	42ab      	cmp	r3, r5
  427042:	d907      	bls.n	427054 <__udivmoddi4+0x134>
  427044:	19ed      	adds	r5, r5, r7
  427046:	f108 30ff 	add.w	r0, r8, #4294967295
  42704a:	d202      	bcs.n	427052 <__udivmoddi4+0x132>
  42704c:	42ab      	cmp	r3, r5
  42704e:	f200 80d1 	bhi.w	4271f4 <__udivmoddi4+0x2d4>
  427052:	4680      	mov	r8, r0
  427054:	1aed      	subs	r5, r5, r3
  427056:	b2a3      	uxth	r3, r4
  427058:	fbb5 f0f2 	udiv	r0, r5, r2
  42705c:	fb02 5510 	mls	r5, r2, r0, r5
  427060:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  427064:	fb0c fc00 	mul.w	ip, ip, r0
  427068:	45a4      	cmp	ip, r4
  42706a:	d907      	bls.n	42707c <__udivmoddi4+0x15c>
  42706c:	19e4      	adds	r4, r4, r7
  42706e:	f100 33ff 	add.w	r3, r0, #4294967295
  427072:	d202      	bcs.n	42707a <__udivmoddi4+0x15a>
  427074:	45a4      	cmp	ip, r4
  427076:	f200 80b8 	bhi.w	4271ea <__udivmoddi4+0x2ca>
  42707a:	4618      	mov	r0, r3
  42707c:	eba4 040c 	sub.w	r4, r4, ip
  427080:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  427084:	e79d      	b.n	426fc2 <__udivmoddi4+0xa2>
  427086:	4631      	mov	r1, r6
  427088:	4630      	mov	r0, r6
  42708a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42708e:	f1ce 0420 	rsb	r4, lr, #32
  427092:	fa05 f30e 	lsl.w	r3, r5, lr
  427096:	fa07 f70e 	lsl.w	r7, r7, lr
  42709a:	fa20 f804 	lsr.w	r8, r0, r4
  42709e:	0c3a      	lsrs	r2, r7, #16
  4270a0:	fa25 f404 	lsr.w	r4, r5, r4
  4270a4:	ea48 0803 	orr.w	r8, r8, r3
  4270a8:	fbb4 f1f2 	udiv	r1, r4, r2
  4270ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4270b0:	fb02 4411 	mls	r4, r2, r1, r4
  4270b4:	fa1f fc87 	uxth.w	ip, r7
  4270b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4270bc:	fb01 f30c 	mul.w	r3, r1, ip
  4270c0:	42ab      	cmp	r3, r5
  4270c2:	fa00 f40e 	lsl.w	r4, r0, lr
  4270c6:	d909      	bls.n	4270dc <__udivmoddi4+0x1bc>
  4270c8:	19ed      	adds	r5, r5, r7
  4270ca:	f101 30ff 	add.w	r0, r1, #4294967295
  4270ce:	f080 808a 	bcs.w	4271e6 <__udivmoddi4+0x2c6>
  4270d2:	42ab      	cmp	r3, r5
  4270d4:	f240 8087 	bls.w	4271e6 <__udivmoddi4+0x2c6>
  4270d8:	3902      	subs	r1, #2
  4270da:	443d      	add	r5, r7
  4270dc:	1aeb      	subs	r3, r5, r3
  4270de:	fa1f f588 	uxth.w	r5, r8
  4270e2:	fbb3 f0f2 	udiv	r0, r3, r2
  4270e6:	fb02 3310 	mls	r3, r2, r0, r3
  4270ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4270ee:	fb00 f30c 	mul.w	r3, r0, ip
  4270f2:	42ab      	cmp	r3, r5
  4270f4:	d907      	bls.n	427106 <__udivmoddi4+0x1e6>
  4270f6:	19ed      	adds	r5, r5, r7
  4270f8:	f100 38ff 	add.w	r8, r0, #4294967295
  4270fc:	d26f      	bcs.n	4271de <__udivmoddi4+0x2be>
  4270fe:	42ab      	cmp	r3, r5
  427100:	d96d      	bls.n	4271de <__udivmoddi4+0x2be>
  427102:	3802      	subs	r0, #2
  427104:	443d      	add	r5, r7
  427106:	1aeb      	subs	r3, r5, r3
  427108:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  42710c:	e78f      	b.n	42702e <__udivmoddi4+0x10e>
  42710e:	f1c1 0720 	rsb	r7, r1, #32
  427112:	fa22 f807 	lsr.w	r8, r2, r7
  427116:	408b      	lsls	r3, r1
  427118:	fa05 f401 	lsl.w	r4, r5, r1
  42711c:	ea48 0303 	orr.w	r3, r8, r3
  427120:	fa20 fe07 	lsr.w	lr, r0, r7
  427124:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  427128:	40fd      	lsrs	r5, r7
  42712a:	ea4e 0e04 	orr.w	lr, lr, r4
  42712e:	fbb5 f9fc 	udiv	r9, r5, ip
  427132:	ea4f 441e 	mov.w	r4, lr, lsr #16
  427136:	fb0c 5519 	mls	r5, ip, r9, r5
  42713a:	fa1f f883 	uxth.w	r8, r3
  42713e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  427142:	fb09 f408 	mul.w	r4, r9, r8
  427146:	42ac      	cmp	r4, r5
  427148:	fa02 f201 	lsl.w	r2, r2, r1
  42714c:	fa00 fa01 	lsl.w	sl, r0, r1
  427150:	d908      	bls.n	427164 <__udivmoddi4+0x244>
  427152:	18ed      	adds	r5, r5, r3
  427154:	f109 30ff 	add.w	r0, r9, #4294967295
  427158:	d243      	bcs.n	4271e2 <__udivmoddi4+0x2c2>
  42715a:	42ac      	cmp	r4, r5
  42715c:	d941      	bls.n	4271e2 <__udivmoddi4+0x2c2>
  42715e:	f1a9 0902 	sub.w	r9, r9, #2
  427162:	441d      	add	r5, r3
  427164:	1b2d      	subs	r5, r5, r4
  427166:	fa1f fe8e 	uxth.w	lr, lr
  42716a:	fbb5 f0fc 	udiv	r0, r5, ip
  42716e:	fb0c 5510 	mls	r5, ip, r0, r5
  427172:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  427176:	fb00 f808 	mul.w	r8, r0, r8
  42717a:	45a0      	cmp	r8, r4
  42717c:	d907      	bls.n	42718e <__udivmoddi4+0x26e>
  42717e:	18e4      	adds	r4, r4, r3
  427180:	f100 35ff 	add.w	r5, r0, #4294967295
  427184:	d229      	bcs.n	4271da <__udivmoddi4+0x2ba>
  427186:	45a0      	cmp	r8, r4
  427188:	d927      	bls.n	4271da <__udivmoddi4+0x2ba>
  42718a:	3802      	subs	r0, #2
  42718c:	441c      	add	r4, r3
  42718e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  427192:	eba4 0408 	sub.w	r4, r4, r8
  427196:	fba0 8902 	umull	r8, r9, r0, r2
  42719a:	454c      	cmp	r4, r9
  42719c:	46c6      	mov	lr, r8
  42719e:	464d      	mov	r5, r9
  4271a0:	d315      	bcc.n	4271ce <__udivmoddi4+0x2ae>
  4271a2:	d012      	beq.n	4271ca <__udivmoddi4+0x2aa>
  4271a4:	b156      	cbz	r6, 4271bc <__udivmoddi4+0x29c>
  4271a6:	ebba 030e 	subs.w	r3, sl, lr
  4271aa:	eb64 0405 	sbc.w	r4, r4, r5
  4271ae:	fa04 f707 	lsl.w	r7, r4, r7
  4271b2:	40cb      	lsrs	r3, r1
  4271b4:	431f      	orrs	r7, r3
  4271b6:	40cc      	lsrs	r4, r1
  4271b8:	6037      	str	r7, [r6, #0]
  4271ba:	6074      	str	r4, [r6, #4]
  4271bc:	2100      	movs	r1, #0
  4271be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4271c2:	4618      	mov	r0, r3
  4271c4:	e6f8      	b.n	426fb8 <__udivmoddi4+0x98>
  4271c6:	4690      	mov	r8, r2
  4271c8:	e6e0      	b.n	426f8c <__udivmoddi4+0x6c>
  4271ca:	45c2      	cmp	sl, r8
  4271cc:	d2ea      	bcs.n	4271a4 <__udivmoddi4+0x284>
  4271ce:	ebb8 0e02 	subs.w	lr, r8, r2
  4271d2:	eb69 0503 	sbc.w	r5, r9, r3
  4271d6:	3801      	subs	r0, #1
  4271d8:	e7e4      	b.n	4271a4 <__udivmoddi4+0x284>
  4271da:	4628      	mov	r0, r5
  4271dc:	e7d7      	b.n	42718e <__udivmoddi4+0x26e>
  4271de:	4640      	mov	r0, r8
  4271e0:	e791      	b.n	427106 <__udivmoddi4+0x1e6>
  4271e2:	4681      	mov	r9, r0
  4271e4:	e7be      	b.n	427164 <__udivmoddi4+0x244>
  4271e6:	4601      	mov	r1, r0
  4271e8:	e778      	b.n	4270dc <__udivmoddi4+0x1bc>
  4271ea:	3802      	subs	r0, #2
  4271ec:	443c      	add	r4, r7
  4271ee:	e745      	b.n	42707c <__udivmoddi4+0x15c>
  4271f0:	4608      	mov	r0, r1
  4271f2:	e708      	b.n	427006 <__udivmoddi4+0xe6>
  4271f4:	f1a8 0802 	sub.w	r8, r8, #2
  4271f8:	443d      	add	r5, r7
  4271fa:	e72b      	b.n	427054 <__udivmoddi4+0x134>

004271fc <__aeabi_idiv0>:
  4271fc:	4770      	bx	lr
  4271fe:	bf00      	nop

00427200 <__libc_init_array>:
  427200:	b570      	push	{r4, r5, r6, lr}
  427202:	4e0f      	ldr	r6, [pc, #60]	; (427240 <__libc_init_array+0x40>)
  427204:	4d0f      	ldr	r5, [pc, #60]	; (427244 <__libc_init_array+0x44>)
  427206:	1b76      	subs	r6, r6, r5
  427208:	10b6      	asrs	r6, r6, #2
  42720a:	bf18      	it	ne
  42720c:	2400      	movne	r4, #0
  42720e:	d005      	beq.n	42721c <__libc_init_array+0x1c>
  427210:	3401      	adds	r4, #1
  427212:	f855 3b04 	ldr.w	r3, [r5], #4
  427216:	4798      	blx	r3
  427218:	42a6      	cmp	r6, r4
  42721a:	d1f9      	bne.n	427210 <__libc_init_array+0x10>
  42721c:	4e0a      	ldr	r6, [pc, #40]	; (427248 <__libc_init_array+0x48>)
  42721e:	4d0b      	ldr	r5, [pc, #44]	; (42724c <__libc_init_array+0x4c>)
  427220:	1b76      	subs	r6, r6, r5
  427222:	f00a fc9d 	bl	431b60 <_init>
  427226:	10b6      	asrs	r6, r6, #2
  427228:	bf18      	it	ne
  42722a:	2400      	movne	r4, #0
  42722c:	d006      	beq.n	42723c <__libc_init_array+0x3c>
  42722e:	3401      	adds	r4, #1
  427230:	f855 3b04 	ldr.w	r3, [r5], #4
  427234:	4798      	blx	r3
  427236:	42a6      	cmp	r6, r4
  427238:	d1f9      	bne.n	42722e <__libc_init_array+0x2e>
  42723a:	bd70      	pop	{r4, r5, r6, pc}
  42723c:	bd70      	pop	{r4, r5, r6, pc}
  42723e:	bf00      	nop
  427240:	00431b6c 	.word	0x00431b6c
  427244:	00431b6c 	.word	0x00431b6c
  427248:	00431b74 	.word	0x00431b74
  42724c:	00431b6c 	.word	0x00431b6c

00427250 <iprintf>:
  427250:	b40f      	push	{r0, r1, r2, r3}
  427252:	b500      	push	{lr}
  427254:	4907      	ldr	r1, [pc, #28]	; (427274 <iprintf+0x24>)
  427256:	b083      	sub	sp, #12
  427258:	ab04      	add	r3, sp, #16
  42725a:	6808      	ldr	r0, [r1, #0]
  42725c:	f853 2b04 	ldr.w	r2, [r3], #4
  427260:	6881      	ldr	r1, [r0, #8]
  427262:	9301      	str	r3, [sp, #4]
  427264:	f000 ffac 	bl	4281c0 <_vfiprintf_r>
  427268:	b003      	add	sp, #12
  42726a:	f85d eb04 	ldr.w	lr, [sp], #4
  42726e:	b004      	add	sp, #16
  427270:	4770      	bx	lr
  427272:	bf00      	nop
  427274:	204000ec 	.word	0x204000ec

00427278 <malloc>:
  427278:	4b02      	ldr	r3, [pc, #8]	; (427284 <malloc+0xc>)
  42727a:	4601      	mov	r1, r0
  42727c:	6818      	ldr	r0, [r3, #0]
  42727e:	f000 b803 	b.w	427288 <_malloc_r>
  427282:	bf00      	nop
  427284:	204000ec 	.word	0x204000ec

00427288 <_malloc_r>:
  427288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42728c:	f101 060b 	add.w	r6, r1, #11
  427290:	2e16      	cmp	r6, #22
  427292:	b083      	sub	sp, #12
  427294:	4605      	mov	r5, r0
  427296:	f240 809e 	bls.w	4273d6 <_malloc_r+0x14e>
  42729a:	f036 0607 	bics.w	r6, r6, #7
  42729e:	f100 80bd 	bmi.w	42741c <_malloc_r+0x194>
  4272a2:	42b1      	cmp	r1, r6
  4272a4:	f200 80ba 	bhi.w	42741c <_malloc_r+0x194>
  4272a8:	f000 fbb6 	bl	427a18 <__malloc_lock>
  4272ac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4272b0:	f0c0 8293 	bcc.w	4277da <_malloc_r+0x552>
  4272b4:	0a73      	lsrs	r3, r6, #9
  4272b6:	f000 80b8 	beq.w	42742a <_malloc_r+0x1a2>
  4272ba:	2b04      	cmp	r3, #4
  4272bc:	f200 8179 	bhi.w	4275b2 <_malloc_r+0x32a>
  4272c0:	09b3      	lsrs	r3, r6, #6
  4272c2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4272c6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4272ca:	00c3      	lsls	r3, r0, #3
  4272cc:	4fbf      	ldr	r7, [pc, #764]	; (4275cc <_malloc_r+0x344>)
  4272ce:	443b      	add	r3, r7
  4272d0:	f1a3 0108 	sub.w	r1, r3, #8
  4272d4:	685c      	ldr	r4, [r3, #4]
  4272d6:	42a1      	cmp	r1, r4
  4272d8:	d106      	bne.n	4272e8 <_malloc_r+0x60>
  4272da:	e00c      	b.n	4272f6 <_malloc_r+0x6e>
  4272dc:	2a00      	cmp	r2, #0
  4272de:	f280 80aa 	bge.w	427436 <_malloc_r+0x1ae>
  4272e2:	68e4      	ldr	r4, [r4, #12]
  4272e4:	42a1      	cmp	r1, r4
  4272e6:	d006      	beq.n	4272f6 <_malloc_r+0x6e>
  4272e8:	6863      	ldr	r3, [r4, #4]
  4272ea:	f023 0303 	bic.w	r3, r3, #3
  4272ee:	1b9a      	subs	r2, r3, r6
  4272f0:	2a0f      	cmp	r2, #15
  4272f2:	ddf3      	ble.n	4272dc <_malloc_r+0x54>
  4272f4:	4670      	mov	r0, lr
  4272f6:	693c      	ldr	r4, [r7, #16]
  4272f8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4275e0 <_malloc_r+0x358>
  4272fc:	4574      	cmp	r4, lr
  4272fe:	f000 81ab 	beq.w	427658 <_malloc_r+0x3d0>
  427302:	6863      	ldr	r3, [r4, #4]
  427304:	f023 0303 	bic.w	r3, r3, #3
  427308:	1b9a      	subs	r2, r3, r6
  42730a:	2a0f      	cmp	r2, #15
  42730c:	f300 8190 	bgt.w	427630 <_malloc_r+0x3a8>
  427310:	2a00      	cmp	r2, #0
  427312:	f8c7 e014 	str.w	lr, [r7, #20]
  427316:	f8c7 e010 	str.w	lr, [r7, #16]
  42731a:	f280 809d 	bge.w	427458 <_malloc_r+0x1d0>
  42731e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  427322:	f080 8161 	bcs.w	4275e8 <_malloc_r+0x360>
  427326:	08db      	lsrs	r3, r3, #3
  427328:	f103 0c01 	add.w	ip, r3, #1
  42732c:	1099      	asrs	r1, r3, #2
  42732e:	687a      	ldr	r2, [r7, #4]
  427330:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  427334:	f8c4 8008 	str.w	r8, [r4, #8]
  427338:	2301      	movs	r3, #1
  42733a:	408b      	lsls	r3, r1
  42733c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  427340:	4313      	orrs	r3, r2
  427342:	3908      	subs	r1, #8
  427344:	60e1      	str	r1, [r4, #12]
  427346:	607b      	str	r3, [r7, #4]
  427348:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  42734c:	f8c8 400c 	str.w	r4, [r8, #12]
  427350:	1082      	asrs	r2, r0, #2
  427352:	2401      	movs	r4, #1
  427354:	4094      	lsls	r4, r2
  427356:	429c      	cmp	r4, r3
  427358:	f200 808b 	bhi.w	427472 <_malloc_r+0x1ea>
  42735c:	421c      	tst	r4, r3
  42735e:	d106      	bne.n	42736e <_malloc_r+0xe6>
  427360:	f020 0003 	bic.w	r0, r0, #3
  427364:	0064      	lsls	r4, r4, #1
  427366:	421c      	tst	r4, r3
  427368:	f100 0004 	add.w	r0, r0, #4
  42736c:	d0fa      	beq.n	427364 <_malloc_r+0xdc>
  42736e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  427372:	46cc      	mov	ip, r9
  427374:	4680      	mov	r8, r0
  427376:	f8dc 300c 	ldr.w	r3, [ip, #12]
  42737a:	459c      	cmp	ip, r3
  42737c:	d107      	bne.n	42738e <_malloc_r+0x106>
  42737e:	e16d      	b.n	42765c <_malloc_r+0x3d4>
  427380:	2a00      	cmp	r2, #0
  427382:	f280 817b 	bge.w	42767c <_malloc_r+0x3f4>
  427386:	68db      	ldr	r3, [r3, #12]
  427388:	459c      	cmp	ip, r3
  42738a:	f000 8167 	beq.w	42765c <_malloc_r+0x3d4>
  42738e:	6859      	ldr	r1, [r3, #4]
  427390:	f021 0103 	bic.w	r1, r1, #3
  427394:	1b8a      	subs	r2, r1, r6
  427396:	2a0f      	cmp	r2, #15
  427398:	ddf2      	ble.n	427380 <_malloc_r+0xf8>
  42739a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  42739e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4273a2:	9300      	str	r3, [sp, #0]
  4273a4:	199c      	adds	r4, r3, r6
  4273a6:	4628      	mov	r0, r5
  4273a8:	f046 0601 	orr.w	r6, r6, #1
  4273ac:	f042 0501 	orr.w	r5, r2, #1
  4273b0:	605e      	str	r6, [r3, #4]
  4273b2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4273b6:	f8cc 8008 	str.w	r8, [ip, #8]
  4273ba:	617c      	str	r4, [r7, #20]
  4273bc:	613c      	str	r4, [r7, #16]
  4273be:	f8c4 e00c 	str.w	lr, [r4, #12]
  4273c2:	f8c4 e008 	str.w	lr, [r4, #8]
  4273c6:	6065      	str	r5, [r4, #4]
  4273c8:	505a      	str	r2, [r3, r1]
  4273ca:	f000 fb2b 	bl	427a24 <__malloc_unlock>
  4273ce:	9b00      	ldr	r3, [sp, #0]
  4273d0:	f103 0408 	add.w	r4, r3, #8
  4273d4:	e01e      	b.n	427414 <_malloc_r+0x18c>
  4273d6:	2910      	cmp	r1, #16
  4273d8:	d820      	bhi.n	42741c <_malloc_r+0x194>
  4273da:	f000 fb1d 	bl	427a18 <__malloc_lock>
  4273de:	2610      	movs	r6, #16
  4273e0:	2318      	movs	r3, #24
  4273e2:	2002      	movs	r0, #2
  4273e4:	4f79      	ldr	r7, [pc, #484]	; (4275cc <_malloc_r+0x344>)
  4273e6:	443b      	add	r3, r7
  4273e8:	f1a3 0208 	sub.w	r2, r3, #8
  4273ec:	685c      	ldr	r4, [r3, #4]
  4273ee:	4294      	cmp	r4, r2
  4273f0:	f000 813d 	beq.w	42766e <_malloc_r+0x3e6>
  4273f4:	6863      	ldr	r3, [r4, #4]
  4273f6:	68e1      	ldr	r1, [r4, #12]
  4273f8:	68a6      	ldr	r6, [r4, #8]
  4273fa:	f023 0303 	bic.w	r3, r3, #3
  4273fe:	4423      	add	r3, r4
  427400:	4628      	mov	r0, r5
  427402:	685a      	ldr	r2, [r3, #4]
  427404:	60f1      	str	r1, [r6, #12]
  427406:	f042 0201 	orr.w	r2, r2, #1
  42740a:	608e      	str	r6, [r1, #8]
  42740c:	605a      	str	r2, [r3, #4]
  42740e:	f000 fb09 	bl	427a24 <__malloc_unlock>
  427412:	3408      	adds	r4, #8
  427414:	4620      	mov	r0, r4
  427416:	b003      	add	sp, #12
  427418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42741c:	2400      	movs	r4, #0
  42741e:	230c      	movs	r3, #12
  427420:	4620      	mov	r0, r4
  427422:	602b      	str	r3, [r5, #0]
  427424:	b003      	add	sp, #12
  427426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42742a:	2040      	movs	r0, #64	; 0x40
  42742c:	f44f 7300 	mov.w	r3, #512	; 0x200
  427430:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  427434:	e74a      	b.n	4272cc <_malloc_r+0x44>
  427436:	4423      	add	r3, r4
  427438:	68e1      	ldr	r1, [r4, #12]
  42743a:	685a      	ldr	r2, [r3, #4]
  42743c:	68a6      	ldr	r6, [r4, #8]
  42743e:	f042 0201 	orr.w	r2, r2, #1
  427442:	60f1      	str	r1, [r6, #12]
  427444:	4628      	mov	r0, r5
  427446:	608e      	str	r6, [r1, #8]
  427448:	605a      	str	r2, [r3, #4]
  42744a:	f000 faeb 	bl	427a24 <__malloc_unlock>
  42744e:	3408      	adds	r4, #8
  427450:	4620      	mov	r0, r4
  427452:	b003      	add	sp, #12
  427454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  427458:	4423      	add	r3, r4
  42745a:	4628      	mov	r0, r5
  42745c:	685a      	ldr	r2, [r3, #4]
  42745e:	f042 0201 	orr.w	r2, r2, #1
  427462:	605a      	str	r2, [r3, #4]
  427464:	f000 fade 	bl	427a24 <__malloc_unlock>
  427468:	3408      	adds	r4, #8
  42746a:	4620      	mov	r0, r4
  42746c:	b003      	add	sp, #12
  42746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  427472:	68bc      	ldr	r4, [r7, #8]
  427474:	6863      	ldr	r3, [r4, #4]
  427476:	f023 0803 	bic.w	r8, r3, #3
  42747a:	45b0      	cmp	r8, r6
  42747c:	d304      	bcc.n	427488 <_malloc_r+0x200>
  42747e:	eba8 0306 	sub.w	r3, r8, r6
  427482:	2b0f      	cmp	r3, #15
  427484:	f300 8085 	bgt.w	427592 <_malloc_r+0x30a>
  427488:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4275e4 <_malloc_r+0x35c>
  42748c:	4b50      	ldr	r3, [pc, #320]	; (4275d0 <_malloc_r+0x348>)
  42748e:	f8d9 2000 	ldr.w	r2, [r9]
  427492:	681b      	ldr	r3, [r3, #0]
  427494:	3201      	adds	r2, #1
  427496:	4433      	add	r3, r6
  427498:	eb04 0a08 	add.w	sl, r4, r8
  42749c:	f000 8155 	beq.w	42774a <_malloc_r+0x4c2>
  4274a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4274a4:	330f      	adds	r3, #15
  4274a6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4274aa:	f02b 0b0f 	bic.w	fp, fp, #15
  4274ae:	4659      	mov	r1, fp
  4274b0:	4628      	mov	r0, r5
  4274b2:	f000 fadd 	bl	427a70 <_sbrk_r>
  4274b6:	1c41      	adds	r1, r0, #1
  4274b8:	4602      	mov	r2, r0
  4274ba:	f000 80fc 	beq.w	4276b6 <_malloc_r+0x42e>
  4274be:	4582      	cmp	sl, r0
  4274c0:	f200 80f7 	bhi.w	4276b2 <_malloc_r+0x42a>
  4274c4:	4b43      	ldr	r3, [pc, #268]	; (4275d4 <_malloc_r+0x34c>)
  4274c6:	6819      	ldr	r1, [r3, #0]
  4274c8:	4459      	add	r1, fp
  4274ca:	6019      	str	r1, [r3, #0]
  4274cc:	f000 814d 	beq.w	42776a <_malloc_r+0x4e2>
  4274d0:	f8d9 0000 	ldr.w	r0, [r9]
  4274d4:	3001      	adds	r0, #1
  4274d6:	bf1b      	ittet	ne
  4274d8:	eba2 0a0a 	subne.w	sl, r2, sl
  4274dc:	4451      	addne	r1, sl
  4274de:	f8c9 2000 	streq.w	r2, [r9]
  4274e2:	6019      	strne	r1, [r3, #0]
  4274e4:	f012 0107 	ands.w	r1, r2, #7
  4274e8:	f000 8115 	beq.w	427716 <_malloc_r+0x48e>
  4274ec:	f1c1 0008 	rsb	r0, r1, #8
  4274f0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4274f4:	4402      	add	r2, r0
  4274f6:	3108      	adds	r1, #8
  4274f8:	eb02 090b 	add.w	r9, r2, fp
  4274fc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  427500:	eba1 0909 	sub.w	r9, r1, r9
  427504:	4649      	mov	r1, r9
  427506:	4628      	mov	r0, r5
  427508:	9301      	str	r3, [sp, #4]
  42750a:	9200      	str	r2, [sp, #0]
  42750c:	f000 fab0 	bl	427a70 <_sbrk_r>
  427510:	1c43      	adds	r3, r0, #1
  427512:	e89d 000c 	ldmia.w	sp, {r2, r3}
  427516:	f000 8143 	beq.w	4277a0 <_malloc_r+0x518>
  42751a:	1a80      	subs	r0, r0, r2
  42751c:	4448      	add	r0, r9
  42751e:	f040 0001 	orr.w	r0, r0, #1
  427522:	6819      	ldr	r1, [r3, #0]
  427524:	60ba      	str	r2, [r7, #8]
  427526:	4449      	add	r1, r9
  427528:	42bc      	cmp	r4, r7
  42752a:	6050      	str	r0, [r2, #4]
  42752c:	6019      	str	r1, [r3, #0]
  42752e:	d017      	beq.n	427560 <_malloc_r+0x2d8>
  427530:	f1b8 0f0f 	cmp.w	r8, #15
  427534:	f240 80fb 	bls.w	42772e <_malloc_r+0x4a6>
  427538:	6860      	ldr	r0, [r4, #4]
  42753a:	f1a8 020c 	sub.w	r2, r8, #12
  42753e:	f022 0207 	bic.w	r2, r2, #7
  427542:	eb04 0e02 	add.w	lr, r4, r2
  427546:	f000 0001 	and.w	r0, r0, #1
  42754a:	f04f 0c05 	mov.w	ip, #5
  42754e:	4310      	orrs	r0, r2
  427550:	2a0f      	cmp	r2, #15
  427552:	6060      	str	r0, [r4, #4]
  427554:	f8ce c004 	str.w	ip, [lr, #4]
  427558:	f8ce c008 	str.w	ip, [lr, #8]
  42755c:	f200 8117 	bhi.w	42778e <_malloc_r+0x506>
  427560:	4b1d      	ldr	r3, [pc, #116]	; (4275d8 <_malloc_r+0x350>)
  427562:	68bc      	ldr	r4, [r7, #8]
  427564:	681a      	ldr	r2, [r3, #0]
  427566:	4291      	cmp	r1, r2
  427568:	bf88      	it	hi
  42756a:	6019      	strhi	r1, [r3, #0]
  42756c:	4b1b      	ldr	r3, [pc, #108]	; (4275dc <_malloc_r+0x354>)
  42756e:	681a      	ldr	r2, [r3, #0]
  427570:	4291      	cmp	r1, r2
  427572:	6862      	ldr	r2, [r4, #4]
  427574:	bf88      	it	hi
  427576:	6019      	strhi	r1, [r3, #0]
  427578:	f022 0203 	bic.w	r2, r2, #3
  42757c:	4296      	cmp	r6, r2
  42757e:	eba2 0306 	sub.w	r3, r2, r6
  427582:	d801      	bhi.n	427588 <_malloc_r+0x300>
  427584:	2b0f      	cmp	r3, #15
  427586:	dc04      	bgt.n	427592 <_malloc_r+0x30a>
  427588:	4628      	mov	r0, r5
  42758a:	f000 fa4b 	bl	427a24 <__malloc_unlock>
  42758e:	2400      	movs	r4, #0
  427590:	e740      	b.n	427414 <_malloc_r+0x18c>
  427592:	19a2      	adds	r2, r4, r6
  427594:	f043 0301 	orr.w	r3, r3, #1
  427598:	f046 0601 	orr.w	r6, r6, #1
  42759c:	6066      	str	r6, [r4, #4]
  42759e:	4628      	mov	r0, r5
  4275a0:	60ba      	str	r2, [r7, #8]
  4275a2:	6053      	str	r3, [r2, #4]
  4275a4:	f000 fa3e 	bl	427a24 <__malloc_unlock>
  4275a8:	3408      	adds	r4, #8
  4275aa:	4620      	mov	r0, r4
  4275ac:	b003      	add	sp, #12
  4275ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4275b2:	2b14      	cmp	r3, #20
  4275b4:	d971      	bls.n	42769a <_malloc_r+0x412>
  4275b6:	2b54      	cmp	r3, #84	; 0x54
  4275b8:	f200 80a3 	bhi.w	427702 <_malloc_r+0x47a>
  4275bc:	0b33      	lsrs	r3, r6, #12
  4275be:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4275c2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4275c6:	00c3      	lsls	r3, r0, #3
  4275c8:	e680      	b.n	4272cc <_malloc_r+0x44>
  4275ca:	bf00      	nop
  4275cc:	20400518 	.word	0x20400518
  4275d0:	2043a184 	.word	0x2043a184
  4275d4:	2043a154 	.word	0x2043a154
  4275d8:	2043a17c 	.word	0x2043a17c
  4275dc:	2043a180 	.word	0x2043a180
  4275e0:	20400520 	.word	0x20400520
  4275e4:	20400920 	.word	0x20400920
  4275e8:	0a5a      	lsrs	r2, r3, #9
  4275ea:	2a04      	cmp	r2, #4
  4275ec:	d95b      	bls.n	4276a6 <_malloc_r+0x41e>
  4275ee:	2a14      	cmp	r2, #20
  4275f0:	f200 80ae 	bhi.w	427750 <_malloc_r+0x4c8>
  4275f4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4275f8:	00c9      	lsls	r1, r1, #3
  4275fa:	325b      	adds	r2, #91	; 0x5b
  4275fc:	eb07 0c01 	add.w	ip, r7, r1
  427600:	5879      	ldr	r1, [r7, r1]
  427602:	f1ac 0c08 	sub.w	ip, ip, #8
  427606:	458c      	cmp	ip, r1
  427608:	f000 8088 	beq.w	42771c <_malloc_r+0x494>
  42760c:	684a      	ldr	r2, [r1, #4]
  42760e:	f022 0203 	bic.w	r2, r2, #3
  427612:	4293      	cmp	r3, r2
  427614:	d273      	bcs.n	4276fe <_malloc_r+0x476>
  427616:	6889      	ldr	r1, [r1, #8]
  427618:	458c      	cmp	ip, r1
  42761a:	d1f7      	bne.n	42760c <_malloc_r+0x384>
  42761c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  427620:	687b      	ldr	r3, [r7, #4]
  427622:	60e2      	str	r2, [r4, #12]
  427624:	f8c4 c008 	str.w	ip, [r4, #8]
  427628:	6094      	str	r4, [r2, #8]
  42762a:	f8cc 400c 	str.w	r4, [ip, #12]
  42762e:	e68f      	b.n	427350 <_malloc_r+0xc8>
  427630:	19a1      	adds	r1, r4, r6
  427632:	f046 0c01 	orr.w	ip, r6, #1
  427636:	f042 0601 	orr.w	r6, r2, #1
  42763a:	f8c4 c004 	str.w	ip, [r4, #4]
  42763e:	4628      	mov	r0, r5
  427640:	6179      	str	r1, [r7, #20]
  427642:	6139      	str	r1, [r7, #16]
  427644:	f8c1 e00c 	str.w	lr, [r1, #12]
  427648:	f8c1 e008 	str.w	lr, [r1, #8]
  42764c:	604e      	str	r6, [r1, #4]
  42764e:	50e2      	str	r2, [r4, r3]
  427650:	f000 f9e8 	bl	427a24 <__malloc_unlock>
  427654:	3408      	adds	r4, #8
  427656:	e6dd      	b.n	427414 <_malloc_r+0x18c>
  427658:	687b      	ldr	r3, [r7, #4]
  42765a:	e679      	b.n	427350 <_malloc_r+0xc8>
  42765c:	f108 0801 	add.w	r8, r8, #1
  427660:	f018 0f03 	tst.w	r8, #3
  427664:	f10c 0c08 	add.w	ip, ip, #8
  427668:	f47f ae85 	bne.w	427376 <_malloc_r+0xee>
  42766c:	e02d      	b.n	4276ca <_malloc_r+0x442>
  42766e:	68dc      	ldr	r4, [r3, #12]
  427670:	42a3      	cmp	r3, r4
  427672:	bf08      	it	eq
  427674:	3002      	addeq	r0, #2
  427676:	f43f ae3e 	beq.w	4272f6 <_malloc_r+0x6e>
  42767a:	e6bb      	b.n	4273f4 <_malloc_r+0x16c>
  42767c:	4419      	add	r1, r3
  42767e:	461c      	mov	r4, r3
  427680:	684a      	ldr	r2, [r1, #4]
  427682:	68db      	ldr	r3, [r3, #12]
  427684:	f854 6f08 	ldr.w	r6, [r4, #8]!
  427688:	f042 0201 	orr.w	r2, r2, #1
  42768c:	604a      	str	r2, [r1, #4]
  42768e:	4628      	mov	r0, r5
  427690:	60f3      	str	r3, [r6, #12]
  427692:	609e      	str	r6, [r3, #8]
  427694:	f000 f9c6 	bl	427a24 <__malloc_unlock>
  427698:	e6bc      	b.n	427414 <_malloc_r+0x18c>
  42769a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  42769e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4276a2:	00c3      	lsls	r3, r0, #3
  4276a4:	e612      	b.n	4272cc <_malloc_r+0x44>
  4276a6:	099a      	lsrs	r2, r3, #6
  4276a8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4276ac:	00c9      	lsls	r1, r1, #3
  4276ae:	3238      	adds	r2, #56	; 0x38
  4276b0:	e7a4      	b.n	4275fc <_malloc_r+0x374>
  4276b2:	42bc      	cmp	r4, r7
  4276b4:	d054      	beq.n	427760 <_malloc_r+0x4d8>
  4276b6:	68bc      	ldr	r4, [r7, #8]
  4276b8:	6862      	ldr	r2, [r4, #4]
  4276ba:	f022 0203 	bic.w	r2, r2, #3
  4276be:	e75d      	b.n	42757c <_malloc_r+0x2f4>
  4276c0:	f859 3908 	ldr.w	r3, [r9], #-8
  4276c4:	4599      	cmp	r9, r3
  4276c6:	f040 8086 	bne.w	4277d6 <_malloc_r+0x54e>
  4276ca:	f010 0f03 	tst.w	r0, #3
  4276ce:	f100 30ff 	add.w	r0, r0, #4294967295
  4276d2:	d1f5      	bne.n	4276c0 <_malloc_r+0x438>
  4276d4:	687b      	ldr	r3, [r7, #4]
  4276d6:	ea23 0304 	bic.w	r3, r3, r4
  4276da:	607b      	str	r3, [r7, #4]
  4276dc:	0064      	lsls	r4, r4, #1
  4276de:	429c      	cmp	r4, r3
  4276e0:	f63f aec7 	bhi.w	427472 <_malloc_r+0x1ea>
  4276e4:	2c00      	cmp	r4, #0
  4276e6:	f43f aec4 	beq.w	427472 <_malloc_r+0x1ea>
  4276ea:	421c      	tst	r4, r3
  4276ec:	4640      	mov	r0, r8
  4276ee:	f47f ae3e 	bne.w	42736e <_malloc_r+0xe6>
  4276f2:	0064      	lsls	r4, r4, #1
  4276f4:	421c      	tst	r4, r3
  4276f6:	f100 0004 	add.w	r0, r0, #4
  4276fa:	d0fa      	beq.n	4276f2 <_malloc_r+0x46a>
  4276fc:	e637      	b.n	42736e <_malloc_r+0xe6>
  4276fe:	468c      	mov	ip, r1
  427700:	e78c      	b.n	42761c <_malloc_r+0x394>
  427702:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  427706:	d815      	bhi.n	427734 <_malloc_r+0x4ac>
  427708:	0bf3      	lsrs	r3, r6, #15
  42770a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  42770e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  427712:	00c3      	lsls	r3, r0, #3
  427714:	e5da      	b.n	4272cc <_malloc_r+0x44>
  427716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  42771a:	e6ed      	b.n	4274f8 <_malloc_r+0x270>
  42771c:	687b      	ldr	r3, [r7, #4]
  42771e:	1092      	asrs	r2, r2, #2
  427720:	2101      	movs	r1, #1
  427722:	fa01 f202 	lsl.w	r2, r1, r2
  427726:	4313      	orrs	r3, r2
  427728:	607b      	str	r3, [r7, #4]
  42772a:	4662      	mov	r2, ip
  42772c:	e779      	b.n	427622 <_malloc_r+0x39a>
  42772e:	2301      	movs	r3, #1
  427730:	6053      	str	r3, [r2, #4]
  427732:	e729      	b.n	427588 <_malloc_r+0x300>
  427734:	f240 5254 	movw	r2, #1364	; 0x554
  427738:	4293      	cmp	r3, r2
  42773a:	d822      	bhi.n	427782 <_malloc_r+0x4fa>
  42773c:	0cb3      	lsrs	r3, r6, #18
  42773e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  427742:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  427746:	00c3      	lsls	r3, r0, #3
  427748:	e5c0      	b.n	4272cc <_malloc_r+0x44>
  42774a:	f103 0b10 	add.w	fp, r3, #16
  42774e:	e6ae      	b.n	4274ae <_malloc_r+0x226>
  427750:	2a54      	cmp	r2, #84	; 0x54
  427752:	d829      	bhi.n	4277a8 <_malloc_r+0x520>
  427754:	0b1a      	lsrs	r2, r3, #12
  427756:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  42775a:	00c9      	lsls	r1, r1, #3
  42775c:	326e      	adds	r2, #110	; 0x6e
  42775e:	e74d      	b.n	4275fc <_malloc_r+0x374>
  427760:	4b20      	ldr	r3, [pc, #128]	; (4277e4 <_malloc_r+0x55c>)
  427762:	6819      	ldr	r1, [r3, #0]
  427764:	4459      	add	r1, fp
  427766:	6019      	str	r1, [r3, #0]
  427768:	e6b2      	b.n	4274d0 <_malloc_r+0x248>
  42776a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  42776e:	2800      	cmp	r0, #0
  427770:	f47f aeae 	bne.w	4274d0 <_malloc_r+0x248>
  427774:	eb08 030b 	add.w	r3, r8, fp
  427778:	68ba      	ldr	r2, [r7, #8]
  42777a:	f043 0301 	orr.w	r3, r3, #1
  42777e:	6053      	str	r3, [r2, #4]
  427780:	e6ee      	b.n	427560 <_malloc_r+0x2d8>
  427782:	207f      	movs	r0, #127	; 0x7f
  427784:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  427788:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  42778c:	e59e      	b.n	4272cc <_malloc_r+0x44>
  42778e:	f104 0108 	add.w	r1, r4, #8
  427792:	4628      	mov	r0, r5
  427794:	9300      	str	r3, [sp, #0]
  427796:	f001 fe2f 	bl	4293f8 <_free_r>
  42779a:	9b00      	ldr	r3, [sp, #0]
  42779c:	6819      	ldr	r1, [r3, #0]
  42779e:	e6df      	b.n	427560 <_malloc_r+0x2d8>
  4277a0:	2001      	movs	r0, #1
  4277a2:	f04f 0900 	mov.w	r9, #0
  4277a6:	e6bc      	b.n	427522 <_malloc_r+0x29a>
  4277a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4277ac:	d805      	bhi.n	4277ba <_malloc_r+0x532>
  4277ae:	0bda      	lsrs	r2, r3, #15
  4277b0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4277b4:	00c9      	lsls	r1, r1, #3
  4277b6:	3277      	adds	r2, #119	; 0x77
  4277b8:	e720      	b.n	4275fc <_malloc_r+0x374>
  4277ba:	f240 5154 	movw	r1, #1364	; 0x554
  4277be:	428a      	cmp	r2, r1
  4277c0:	d805      	bhi.n	4277ce <_malloc_r+0x546>
  4277c2:	0c9a      	lsrs	r2, r3, #18
  4277c4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4277c8:	00c9      	lsls	r1, r1, #3
  4277ca:	327c      	adds	r2, #124	; 0x7c
  4277cc:	e716      	b.n	4275fc <_malloc_r+0x374>
  4277ce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4277d2:	227e      	movs	r2, #126	; 0x7e
  4277d4:	e712      	b.n	4275fc <_malloc_r+0x374>
  4277d6:	687b      	ldr	r3, [r7, #4]
  4277d8:	e780      	b.n	4276dc <_malloc_r+0x454>
  4277da:	08f0      	lsrs	r0, r6, #3
  4277dc:	f106 0308 	add.w	r3, r6, #8
  4277e0:	e600      	b.n	4273e4 <_malloc_r+0x15c>
  4277e2:	bf00      	nop
  4277e4:	2043a154 	.word	0x2043a154

004277e8 <memcmp>:
  4277e8:	2a03      	cmp	r2, #3
  4277ea:	b470      	push	{r4, r5, r6}
  4277ec:	d922      	bls.n	427834 <memcmp+0x4c>
  4277ee:	ea40 0301 	orr.w	r3, r0, r1
  4277f2:	079b      	lsls	r3, r3, #30
  4277f4:	d011      	beq.n	42781a <memcmp+0x32>
  4277f6:	7803      	ldrb	r3, [r0, #0]
  4277f8:	780c      	ldrb	r4, [r1, #0]
  4277fa:	42a3      	cmp	r3, r4
  4277fc:	d11d      	bne.n	42783a <memcmp+0x52>
  4277fe:	440a      	add	r2, r1
  427800:	3101      	adds	r1, #1
  427802:	e005      	b.n	427810 <memcmp+0x28>
  427804:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  427808:	f811 4b01 	ldrb.w	r4, [r1], #1
  42780c:	42a3      	cmp	r3, r4
  42780e:	d114      	bne.n	42783a <memcmp+0x52>
  427810:	4291      	cmp	r1, r2
  427812:	d1f7      	bne.n	427804 <memcmp+0x1c>
  427814:	2000      	movs	r0, #0
  427816:	bc70      	pop	{r4, r5, r6}
  427818:	4770      	bx	lr
  42781a:	680d      	ldr	r5, [r1, #0]
  42781c:	6806      	ldr	r6, [r0, #0]
  42781e:	42ae      	cmp	r6, r5
  427820:	460c      	mov	r4, r1
  427822:	4603      	mov	r3, r0
  427824:	f101 0104 	add.w	r1, r1, #4
  427828:	f100 0004 	add.w	r0, r0, #4
  42782c:	d108      	bne.n	427840 <memcmp+0x58>
  42782e:	3a04      	subs	r2, #4
  427830:	2a03      	cmp	r2, #3
  427832:	d8f2      	bhi.n	42781a <memcmp+0x32>
  427834:	2a00      	cmp	r2, #0
  427836:	d1de      	bne.n	4277f6 <memcmp+0xe>
  427838:	e7ec      	b.n	427814 <memcmp+0x2c>
  42783a:	1b18      	subs	r0, r3, r4
  42783c:	bc70      	pop	{r4, r5, r6}
  42783e:	4770      	bx	lr
  427840:	4621      	mov	r1, r4
  427842:	4618      	mov	r0, r3
  427844:	e7d7      	b.n	4277f6 <memcmp+0xe>
  427846:	bf00      	nop

00427848 <memcpy>:
  427848:	4684      	mov	ip, r0
  42784a:	ea41 0300 	orr.w	r3, r1, r0
  42784e:	f013 0303 	ands.w	r3, r3, #3
  427852:	d16d      	bne.n	427930 <memcpy+0xe8>
  427854:	3a40      	subs	r2, #64	; 0x40
  427856:	d341      	bcc.n	4278dc <memcpy+0x94>
  427858:	f851 3b04 	ldr.w	r3, [r1], #4
  42785c:	f840 3b04 	str.w	r3, [r0], #4
  427860:	f851 3b04 	ldr.w	r3, [r1], #4
  427864:	f840 3b04 	str.w	r3, [r0], #4
  427868:	f851 3b04 	ldr.w	r3, [r1], #4
  42786c:	f840 3b04 	str.w	r3, [r0], #4
  427870:	f851 3b04 	ldr.w	r3, [r1], #4
  427874:	f840 3b04 	str.w	r3, [r0], #4
  427878:	f851 3b04 	ldr.w	r3, [r1], #4
  42787c:	f840 3b04 	str.w	r3, [r0], #4
  427880:	f851 3b04 	ldr.w	r3, [r1], #4
  427884:	f840 3b04 	str.w	r3, [r0], #4
  427888:	f851 3b04 	ldr.w	r3, [r1], #4
  42788c:	f840 3b04 	str.w	r3, [r0], #4
  427890:	f851 3b04 	ldr.w	r3, [r1], #4
  427894:	f840 3b04 	str.w	r3, [r0], #4
  427898:	f851 3b04 	ldr.w	r3, [r1], #4
  42789c:	f840 3b04 	str.w	r3, [r0], #4
  4278a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4278a4:	f840 3b04 	str.w	r3, [r0], #4
  4278a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4278ac:	f840 3b04 	str.w	r3, [r0], #4
  4278b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4278b4:	f840 3b04 	str.w	r3, [r0], #4
  4278b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4278bc:	f840 3b04 	str.w	r3, [r0], #4
  4278c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4278c4:	f840 3b04 	str.w	r3, [r0], #4
  4278c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4278cc:	f840 3b04 	str.w	r3, [r0], #4
  4278d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4278d4:	f840 3b04 	str.w	r3, [r0], #4
  4278d8:	3a40      	subs	r2, #64	; 0x40
  4278da:	d2bd      	bcs.n	427858 <memcpy+0x10>
  4278dc:	3230      	adds	r2, #48	; 0x30
  4278de:	d311      	bcc.n	427904 <memcpy+0xbc>
  4278e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4278e4:	f840 3b04 	str.w	r3, [r0], #4
  4278e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4278ec:	f840 3b04 	str.w	r3, [r0], #4
  4278f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4278f4:	f840 3b04 	str.w	r3, [r0], #4
  4278f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4278fc:	f840 3b04 	str.w	r3, [r0], #4
  427900:	3a10      	subs	r2, #16
  427902:	d2ed      	bcs.n	4278e0 <memcpy+0x98>
  427904:	320c      	adds	r2, #12
  427906:	d305      	bcc.n	427914 <memcpy+0xcc>
  427908:	f851 3b04 	ldr.w	r3, [r1], #4
  42790c:	f840 3b04 	str.w	r3, [r0], #4
  427910:	3a04      	subs	r2, #4
  427912:	d2f9      	bcs.n	427908 <memcpy+0xc0>
  427914:	3204      	adds	r2, #4
  427916:	d008      	beq.n	42792a <memcpy+0xe2>
  427918:	07d2      	lsls	r2, r2, #31
  42791a:	bf1c      	itt	ne
  42791c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  427920:	f800 3b01 	strbne.w	r3, [r0], #1
  427924:	d301      	bcc.n	42792a <memcpy+0xe2>
  427926:	880b      	ldrh	r3, [r1, #0]
  427928:	8003      	strh	r3, [r0, #0]
  42792a:	4660      	mov	r0, ip
  42792c:	4770      	bx	lr
  42792e:	bf00      	nop
  427930:	2a08      	cmp	r2, #8
  427932:	d313      	bcc.n	42795c <memcpy+0x114>
  427934:	078b      	lsls	r3, r1, #30
  427936:	d08d      	beq.n	427854 <memcpy+0xc>
  427938:	f010 0303 	ands.w	r3, r0, #3
  42793c:	d08a      	beq.n	427854 <memcpy+0xc>
  42793e:	f1c3 0304 	rsb	r3, r3, #4
  427942:	1ad2      	subs	r2, r2, r3
  427944:	07db      	lsls	r3, r3, #31
  427946:	bf1c      	itt	ne
  427948:	f811 3b01 	ldrbne.w	r3, [r1], #1
  42794c:	f800 3b01 	strbne.w	r3, [r0], #1
  427950:	d380      	bcc.n	427854 <memcpy+0xc>
  427952:	f831 3b02 	ldrh.w	r3, [r1], #2
  427956:	f820 3b02 	strh.w	r3, [r0], #2
  42795a:	e77b      	b.n	427854 <memcpy+0xc>
  42795c:	3a04      	subs	r2, #4
  42795e:	d3d9      	bcc.n	427914 <memcpy+0xcc>
  427960:	3a01      	subs	r2, #1
  427962:	f811 3b01 	ldrb.w	r3, [r1], #1
  427966:	f800 3b01 	strb.w	r3, [r0], #1
  42796a:	d2f9      	bcs.n	427960 <memcpy+0x118>
  42796c:	780b      	ldrb	r3, [r1, #0]
  42796e:	7003      	strb	r3, [r0, #0]
  427970:	784b      	ldrb	r3, [r1, #1]
  427972:	7043      	strb	r3, [r0, #1]
  427974:	788b      	ldrb	r3, [r1, #2]
  427976:	7083      	strb	r3, [r0, #2]
  427978:	4660      	mov	r0, ip
  42797a:	4770      	bx	lr

0042797c <memset>:
  42797c:	b470      	push	{r4, r5, r6}
  42797e:	0786      	lsls	r6, r0, #30
  427980:	d046      	beq.n	427a10 <memset+0x94>
  427982:	1e54      	subs	r4, r2, #1
  427984:	2a00      	cmp	r2, #0
  427986:	d041      	beq.n	427a0c <memset+0x90>
  427988:	b2ca      	uxtb	r2, r1
  42798a:	4603      	mov	r3, r0
  42798c:	e002      	b.n	427994 <memset+0x18>
  42798e:	f114 34ff 	adds.w	r4, r4, #4294967295
  427992:	d33b      	bcc.n	427a0c <memset+0x90>
  427994:	f803 2b01 	strb.w	r2, [r3], #1
  427998:	079d      	lsls	r5, r3, #30
  42799a:	d1f8      	bne.n	42798e <memset+0x12>
  42799c:	2c03      	cmp	r4, #3
  42799e:	d92e      	bls.n	4279fe <memset+0x82>
  4279a0:	b2cd      	uxtb	r5, r1
  4279a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4279a6:	2c0f      	cmp	r4, #15
  4279a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4279ac:	d919      	bls.n	4279e2 <memset+0x66>
  4279ae:	f103 0210 	add.w	r2, r3, #16
  4279b2:	4626      	mov	r6, r4
  4279b4:	3e10      	subs	r6, #16
  4279b6:	2e0f      	cmp	r6, #15
  4279b8:	f842 5c10 	str.w	r5, [r2, #-16]
  4279bc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4279c0:	f842 5c08 	str.w	r5, [r2, #-8]
  4279c4:	f842 5c04 	str.w	r5, [r2, #-4]
  4279c8:	f102 0210 	add.w	r2, r2, #16
  4279cc:	d8f2      	bhi.n	4279b4 <memset+0x38>
  4279ce:	f1a4 0210 	sub.w	r2, r4, #16
  4279d2:	f022 020f 	bic.w	r2, r2, #15
  4279d6:	f004 040f 	and.w	r4, r4, #15
  4279da:	3210      	adds	r2, #16
  4279dc:	2c03      	cmp	r4, #3
  4279de:	4413      	add	r3, r2
  4279e0:	d90d      	bls.n	4279fe <memset+0x82>
  4279e2:	461e      	mov	r6, r3
  4279e4:	4622      	mov	r2, r4
  4279e6:	3a04      	subs	r2, #4
  4279e8:	2a03      	cmp	r2, #3
  4279ea:	f846 5b04 	str.w	r5, [r6], #4
  4279ee:	d8fa      	bhi.n	4279e6 <memset+0x6a>
  4279f0:	1f22      	subs	r2, r4, #4
  4279f2:	f022 0203 	bic.w	r2, r2, #3
  4279f6:	3204      	adds	r2, #4
  4279f8:	4413      	add	r3, r2
  4279fa:	f004 0403 	and.w	r4, r4, #3
  4279fe:	b12c      	cbz	r4, 427a0c <memset+0x90>
  427a00:	b2c9      	uxtb	r1, r1
  427a02:	441c      	add	r4, r3
  427a04:	f803 1b01 	strb.w	r1, [r3], #1
  427a08:	429c      	cmp	r4, r3
  427a0a:	d1fb      	bne.n	427a04 <memset+0x88>
  427a0c:	bc70      	pop	{r4, r5, r6}
  427a0e:	4770      	bx	lr
  427a10:	4614      	mov	r4, r2
  427a12:	4603      	mov	r3, r0
  427a14:	e7c2      	b.n	42799c <memset+0x20>
  427a16:	bf00      	nop

00427a18 <__malloc_lock>:
  427a18:	4801      	ldr	r0, [pc, #4]	; (427a20 <__malloc_lock+0x8>)
  427a1a:	f001 bf87 	b.w	42992c <__retarget_lock_acquire_recursive>
  427a1e:	bf00      	nop
  427a20:	2043a7fc 	.word	0x2043a7fc

00427a24 <__malloc_unlock>:
  427a24:	4801      	ldr	r0, [pc, #4]	; (427a2c <__malloc_unlock+0x8>)
  427a26:	f001 bf83 	b.w	429930 <__retarget_lock_release_recursive>
  427a2a:	bf00      	nop
  427a2c:	2043a7fc 	.word	0x2043a7fc

00427a30 <rand>:
  427a30:	b410      	push	{r4}
  427a32:	4b0c      	ldr	r3, [pc, #48]	; (427a64 <rand+0x34>)
  427a34:	480c      	ldr	r0, [pc, #48]	; (427a68 <rand+0x38>)
  427a36:	6819      	ldr	r1, [r3, #0]
  427a38:	4c0c      	ldr	r4, [pc, #48]	; (427a6c <rand+0x3c>)
  427a3a:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  427a3e:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  427a42:	fb00 f002 	mul.w	r0, r0, r2
  427a46:	fb04 0003 	mla	r0, r4, r3, r0
  427a4a:	fba2 2304 	umull	r2, r3, r2, r4
  427a4e:	4403      	add	r3, r0
  427a50:	3201      	adds	r2, #1
  427a52:	f143 0300 	adc.w	r3, r3, #0
  427a56:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  427a5a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  427a5e:	bc10      	pop	{r4}
  427a60:	4770      	bx	lr
  427a62:	bf00      	nop
  427a64:	204000ec 	.word	0x204000ec
  427a68:	5851f42d 	.word	0x5851f42d
  427a6c:	4c957f2d 	.word	0x4c957f2d

00427a70 <_sbrk_r>:
  427a70:	b538      	push	{r3, r4, r5, lr}
  427a72:	4c07      	ldr	r4, [pc, #28]	; (427a90 <_sbrk_r+0x20>)
  427a74:	2300      	movs	r3, #0
  427a76:	4605      	mov	r5, r0
  427a78:	4608      	mov	r0, r1
  427a7a:	6023      	str	r3, [r4, #0]
  427a7c:	f7fd fd2c 	bl	4254d8 <_sbrk>
  427a80:	1c43      	adds	r3, r0, #1
  427a82:	d000      	beq.n	427a86 <_sbrk_r+0x16>
  427a84:	bd38      	pop	{r3, r4, r5, pc}
  427a86:	6823      	ldr	r3, [r4, #0]
  427a88:	2b00      	cmp	r3, #0
  427a8a:	d0fb      	beq.n	427a84 <_sbrk_r+0x14>
  427a8c:	602b      	str	r3, [r5, #0]
  427a8e:	bd38      	pop	{r3, r4, r5, pc}
  427a90:	2043a810 	.word	0x2043a810

00427a94 <setbuf>:
  427a94:	2900      	cmp	r1, #0
  427a96:	bf0c      	ite	eq
  427a98:	2202      	moveq	r2, #2
  427a9a:	2200      	movne	r2, #0
  427a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  427aa0:	f000 b800 	b.w	427aa4 <setvbuf>

00427aa4 <setvbuf>:
  427aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  427aa8:	4c61      	ldr	r4, [pc, #388]	; (427c30 <setvbuf+0x18c>)
  427aaa:	6825      	ldr	r5, [r4, #0]
  427aac:	b083      	sub	sp, #12
  427aae:	4604      	mov	r4, r0
  427ab0:	460f      	mov	r7, r1
  427ab2:	4690      	mov	r8, r2
  427ab4:	461e      	mov	r6, r3
  427ab6:	b115      	cbz	r5, 427abe <setvbuf+0x1a>
  427ab8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  427aba:	2b00      	cmp	r3, #0
  427abc:	d064      	beq.n	427b88 <setvbuf+0xe4>
  427abe:	f1b8 0f02 	cmp.w	r8, #2
  427ac2:	d006      	beq.n	427ad2 <setvbuf+0x2e>
  427ac4:	f1b8 0f01 	cmp.w	r8, #1
  427ac8:	f200 809f 	bhi.w	427c0a <setvbuf+0x166>
  427acc:	2e00      	cmp	r6, #0
  427ace:	f2c0 809c 	blt.w	427c0a <setvbuf+0x166>
  427ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  427ad4:	07d8      	lsls	r0, r3, #31
  427ad6:	d534      	bpl.n	427b42 <setvbuf+0x9e>
  427ad8:	4621      	mov	r1, r4
  427ada:	4628      	mov	r0, r5
  427adc:	f001 fb0e 	bl	4290fc <_fflush_r>
  427ae0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  427ae2:	b141      	cbz	r1, 427af6 <setvbuf+0x52>
  427ae4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  427ae8:	4299      	cmp	r1, r3
  427aea:	d002      	beq.n	427af2 <setvbuf+0x4e>
  427aec:	4628      	mov	r0, r5
  427aee:	f001 fc83 	bl	4293f8 <_free_r>
  427af2:	2300      	movs	r3, #0
  427af4:	6323      	str	r3, [r4, #48]	; 0x30
  427af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  427afa:	2200      	movs	r2, #0
  427afc:	61a2      	str	r2, [r4, #24]
  427afe:	6062      	str	r2, [r4, #4]
  427b00:	061a      	lsls	r2, r3, #24
  427b02:	d43a      	bmi.n	427b7a <setvbuf+0xd6>
  427b04:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  427b08:	f023 0303 	bic.w	r3, r3, #3
  427b0c:	f1b8 0f02 	cmp.w	r8, #2
  427b10:	81a3      	strh	r3, [r4, #12]
  427b12:	d01d      	beq.n	427b50 <setvbuf+0xac>
  427b14:	ab01      	add	r3, sp, #4
  427b16:	466a      	mov	r2, sp
  427b18:	4621      	mov	r1, r4
  427b1a:	4628      	mov	r0, r5
  427b1c:	f001 ff0a 	bl	429934 <__swhatbuf_r>
  427b20:	89a3      	ldrh	r3, [r4, #12]
  427b22:	4318      	orrs	r0, r3
  427b24:	81a0      	strh	r0, [r4, #12]
  427b26:	2e00      	cmp	r6, #0
  427b28:	d132      	bne.n	427b90 <setvbuf+0xec>
  427b2a:	9e00      	ldr	r6, [sp, #0]
  427b2c:	4630      	mov	r0, r6
  427b2e:	f7ff fba3 	bl	427278 <malloc>
  427b32:	4607      	mov	r7, r0
  427b34:	2800      	cmp	r0, #0
  427b36:	d06b      	beq.n	427c10 <setvbuf+0x16c>
  427b38:	89a3      	ldrh	r3, [r4, #12]
  427b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  427b3e:	81a3      	strh	r3, [r4, #12]
  427b40:	e028      	b.n	427b94 <setvbuf+0xf0>
  427b42:	89a3      	ldrh	r3, [r4, #12]
  427b44:	0599      	lsls	r1, r3, #22
  427b46:	d4c7      	bmi.n	427ad8 <setvbuf+0x34>
  427b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  427b4a:	f001 feef 	bl	42992c <__retarget_lock_acquire_recursive>
  427b4e:	e7c3      	b.n	427ad8 <setvbuf+0x34>
  427b50:	2500      	movs	r5, #0
  427b52:	6e61      	ldr	r1, [r4, #100]	; 0x64
  427b54:	2600      	movs	r6, #0
  427b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
  427b5a:	f043 0302 	orr.w	r3, r3, #2
  427b5e:	2001      	movs	r0, #1
  427b60:	60a6      	str	r6, [r4, #8]
  427b62:	07ce      	lsls	r6, r1, #31
  427b64:	81a3      	strh	r3, [r4, #12]
  427b66:	6022      	str	r2, [r4, #0]
  427b68:	6122      	str	r2, [r4, #16]
  427b6a:	6160      	str	r0, [r4, #20]
  427b6c:	d401      	bmi.n	427b72 <setvbuf+0xce>
  427b6e:	0598      	lsls	r0, r3, #22
  427b70:	d53e      	bpl.n	427bf0 <setvbuf+0x14c>
  427b72:	4628      	mov	r0, r5
  427b74:	b003      	add	sp, #12
  427b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  427b7a:	6921      	ldr	r1, [r4, #16]
  427b7c:	4628      	mov	r0, r5
  427b7e:	f001 fc3b 	bl	4293f8 <_free_r>
  427b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  427b86:	e7bd      	b.n	427b04 <setvbuf+0x60>
  427b88:	4628      	mov	r0, r5
  427b8a:	f001 fb0f 	bl	4291ac <__sinit>
  427b8e:	e796      	b.n	427abe <setvbuf+0x1a>
  427b90:	2f00      	cmp	r7, #0
  427b92:	d0cb      	beq.n	427b2c <setvbuf+0x88>
  427b94:	6bab      	ldr	r3, [r5, #56]	; 0x38
  427b96:	2b00      	cmp	r3, #0
  427b98:	d033      	beq.n	427c02 <setvbuf+0x15e>
  427b9a:	9b00      	ldr	r3, [sp, #0]
  427b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  427ba0:	6027      	str	r7, [r4, #0]
  427ba2:	429e      	cmp	r6, r3
  427ba4:	bf1c      	itt	ne
  427ba6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  427baa:	81a2      	strhne	r2, [r4, #12]
  427bac:	f1b8 0f01 	cmp.w	r8, #1
  427bb0:	bf04      	itt	eq
  427bb2:	f042 0201 	orreq.w	r2, r2, #1
  427bb6:	81a2      	strheq	r2, [r4, #12]
  427bb8:	b292      	uxth	r2, r2
  427bba:	f012 0308 	ands.w	r3, r2, #8
  427bbe:	6127      	str	r7, [r4, #16]
  427bc0:	6166      	str	r6, [r4, #20]
  427bc2:	d00e      	beq.n	427be2 <setvbuf+0x13e>
  427bc4:	07d1      	lsls	r1, r2, #31
  427bc6:	d51a      	bpl.n	427bfe <setvbuf+0x15a>
  427bc8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  427bca:	4276      	negs	r6, r6
  427bcc:	2300      	movs	r3, #0
  427bce:	f015 0501 	ands.w	r5, r5, #1
  427bd2:	61a6      	str	r6, [r4, #24]
  427bd4:	60a3      	str	r3, [r4, #8]
  427bd6:	d009      	beq.n	427bec <setvbuf+0x148>
  427bd8:	2500      	movs	r5, #0
  427bda:	4628      	mov	r0, r5
  427bdc:	b003      	add	sp, #12
  427bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  427be2:	60a3      	str	r3, [r4, #8]
  427be4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  427be6:	f015 0501 	ands.w	r5, r5, #1
  427bea:	d1f5      	bne.n	427bd8 <setvbuf+0x134>
  427bec:	0593      	lsls	r3, r2, #22
  427bee:	d4c0      	bmi.n	427b72 <setvbuf+0xce>
  427bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  427bf2:	f001 fe9d 	bl	429930 <__retarget_lock_release_recursive>
  427bf6:	4628      	mov	r0, r5
  427bf8:	b003      	add	sp, #12
  427bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  427bfe:	60a6      	str	r6, [r4, #8]
  427c00:	e7f0      	b.n	427be4 <setvbuf+0x140>
  427c02:	4628      	mov	r0, r5
  427c04:	f001 fad2 	bl	4291ac <__sinit>
  427c08:	e7c7      	b.n	427b9a <setvbuf+0xf6>
  427c0a:	f04f 35ff 	mov.w	r5, #4294967295
  427c0e:	e7b0      	b.n	427b72 <setvbuf+0xce>
  427c10:	f8dd 9000 	ldr.w	r9, [sp]
  427c14:	45b1      	cmp	r9, r6
  427c16:	d004      	beq.n	427c22 <setvbuf+0x17e>
  427c18:	4648      	mov	r0, r9
  427c1a:	f7ff fb2d 	bl	427278 <malloc>
  427c1e:	4607      	mov	r7, r0
  427c20:	b920      	cbnz	r0, 427c2c <setvbuf+0x188>
  427c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  427c26:	f04f 35ff 	mov.w	r5, #4294967295
  427c2a:	e792      	b.n	427b52 <setvbuf+0xae>
  427c2c:	464e      	mov	r6, r9
  427c2e:	e783      	b.n	427b38 <setvbuf+0x94>
  427c30:	204000ec 	.word	0x204000ec
	...
  427c40:	eba2 0003 	sub.w	r0, r2, r3
  427c44:	4770      	bx	lr
  427c46:	bf00      	nop

00427c48 <strcmp>:
  427c48:	7802      	ldrb	r2, [r0, #0]
  427c4a:	780b      	ldrb	r3, [r1, #0]
  427c4c:	2a01      	cmp	r2, #1
  427c4e:	bf28      	it	cs
  427c50:	429a      	cmpcs	r2, r3
  427c52:	d1f5      	bne.n	427c40 <setvbuf+0x19c>
  427c54:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  427c58:	ea40 0401 	orr.w	r4, r0, r1
  427c5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  427c60:	f06f 0c00 	mvn.w	ip, #0
  427c64:	ea4f 7244 	mov.w	r2, r4, lsl #29
  427c68:	b312      	cbz	r2, 427cb0 <strcmp+0x68>
  427c6a:	ea80 0401 	eor.w	r4, r0, r1
  427c6e:	f014 0f07 	tst.w	r4, #7
  427c72:	d16a      	bne.n	427d4a <strcmp+0x102>
  427c74:	f000 0407 	and.w	r4, r0, #7
  427c78:	f020 0007 	bic.w	r0, r0, #7
  427c7c:	f004 0503 	and.w	r5, r4, #3
  427c80:	f021 0107 	bic.w	r1, r1, #7
  427c84:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  427c88:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  427c8c:	f014 0f04 	tst.w	r4, #4
  427c90:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  427c94:	fa0c f405 	lsl.w	r4, ip, r5
  427c98:	ea62 0204 	orn	r2, r2, r4
  427c9c:	ea66 0604 	orn	r6, r6, r4
  427ca0:	d00a      	beq.n	427cb8 <strcmp+0x70>
  427ca2:	ea63 0304 	orn	r3, r3, r4
  427ca6:	4662      	mov	r2, ip
  427ca8:	ea67 0704 	orn	r7, r7, r4
  427cac:	4666      	mov	r6, ip
  427cae:	e003      	b.n	427cb8 <strcmp+0x70>
  427cb0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  427cb4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  427cb8:	fa82 f54c 	uadd8	r5, r2, ip
  427cbc:	ea82 0406 	eor.w	r4, r2, r6
  427cc0:	faa4 f48c 	sel	r4, r4, ip
  427cc4:	bb6c      	cbnz	r4, 427d22 <strcmp+0xda>
  427cc6:	fa83 f54c 	uadd8	r5, r3, ip
  427cca:	ea83 0507 	eor.w	r5, r3, r7
  427cce:	faa5 f58c 	sel	r5, r5, ip
  427cd2:	b995      	cbnz	r5, 427cfa <strcmp+0xb2>
  427cd4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  427cd8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  427cdc:	fa82 f54c 	uadd8	r5, r2, ip
  427ce0:	ea82 0406 	eor.w	r4, r2, r6
  427ce4:	faa4 f48c 	sel	r4, r4, ip
  427ce8:	fa83 f54c 	uadd8	r5, r3, ip
  427cec:	ea83 0507 	eor.w	r5, r3, r7
  427cf0:	faa5 f58c 	sel	r5, r5, ip
  427cf4:	4325      	orrs	r5, r4
  427cf6:	d0db      	beq.n	427cb0 <strcmp+0x68>
  427cf8:	b99c      	cbnz	r4, 427d22 <strcmp+0xda>
  427cfa:	ba2d      	rev	r5, r5
  427cfc:	fab5 f485 	clz	r4, r5
  427d00:	f024 0407 	bic.w	r4, r4, #7
  427d04:	fa27 f104 	lsr.w	r1, r7, r4
  427d08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  427d0c:	fa23 f304 	lsr.w	r3, r3, r4
  427d10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  427d14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  427d18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  427d1c:	eba0 0001 	sub.w	r0, r0, r1
  427d20:	4770      	bx	lr
  427d22:	ba24      	rev	r4, r4
  427d24:	fab4 f484 	clz	r4, r4
  427d28:	f024 0407 	bic.w	r4, r4, #7
  427d2c:	fa26 f104 	lsr.w	r1, r6, r4
  427d30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  427d34:	fa22 f204 	lsr.w	r2, r2, r4
  427d38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  427d3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  427d40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  427d44:	eba0 0001 	sub.w	r0, r0, r1
  427d48:	4770      	bx	lr
  427d4a:	f014 0f03 	tst.w	r4, #3
  427d4e:	d13c      	bne.n	427dca <strcmp+0x182>
  427d50:	f010 0403 	ands.w	r4, r0, #3
  427d54:	d128      	bne.n	427da8 <strcmp+0x160>
  427d56:	f850 2b08 	ldr.w	r2, [r0], #8
  427d5a:	f851 3b08 	ldr.w	r3, [r1], #8
  427d5e:	fa82 f54c 	uadd8	r5, r2, ip
  427d62:	ea82 0503 	eor.w	r5, r2, r3
  427d66:	faa5 f58c 	sel	r5, r5, ip
  427d6a:	b95d      	cbnz	r5, 427d84 <strcmp+0x13c>
  427d6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  427d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
  427d74:	fa82 f54c 	uadd8	r5, r2, ip
  427d78:	ea82 0503 	eor.w	r5, r2, r3
  427d7c:	faa5 f58c 	sel	r5, r5, ip
  427d80:	2d00      	cmp	r5, #0
  427d82:	d0e8      	beq.n	427d56 <strcmp+0x10e>
  427d84:	ba2d      	rev	r5, r5
  427d86:	fab5 f485 	clz	r4, r5
  427d8a:	f024 0407 	bic.w	r4, r4, #7
  427d8e:	fa23 f104 	lsr.w	r1, r3, r4
  427d92:	fa22 f204 	lsr.w	r2, r2, r4
  427d96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  427d9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  427d9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  427da2:	eba0 0001 	sub.w	r0, r0, r1
  427da6:	4770      	bx	lr
  427da8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  427dac:	f020 0003 	bic.w	r0, r0, #3
  427db0:	f850 2b08 	ldr.w	r2, [r0], #8
  427db4:	f021 0103 	bic.w	r1, r1, #3
  427db8:	f851 3b08 	ldr.w	r3, [r1], #8
  427dbc:	fa0c f404 	lsl.w	r4, ip, r4
  427dc0:	ea62 0204 	orn	r2, r2, r4
  427dc4:	ea63 0304 	orn	r3, r3, r4
  427dc8:	e7c9      	b.n	427d5e <strcmp+0x116>
  427dca:	f010 0403 	ands.w	r4, r0, #3
  427dce:	d01a      	beq.n	427e06 <strcmp+0x1be>
  427dd0:	eba1 0104 	sub.w	r1, r1, r4
  427dd4:	f020 0003 	bic.w	r0, r0, #3
  427dd8:	07e4      	lsls	r4, r4, #31
  427dda:	f850 2b04 	ldr.w	r2, [r0], #4
  427dde:	d006      	beq.n	427dee <strcmp+0x1a6>
  427de0:	d20f      	bcs.n	427e02 <strcmp+0x1ba>
  427de2:	788b      	ldrb	r3, [r1, #2]
  427de4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  427de8:	1ae4      	subs	r4, r4, r3
  427dea:	d106      	bne.n	427dfa <strcmp+0x1b2>
  427dec:	b12b      	cbz	r3, 427dfa <strcmp+0x1b2>
  427dee:	78cb      	ldrb	r3, [r1, #3]
  427df0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  427df4:	1ae4      	subs	r4, r4, r3
  427df6:	d100      	bne.n	427dfa <strcmp+0x1b2>
  427df8:	b91b      	cbnz	r3, 427e02 <strcmp+0x1ba>
  427dfa:	4620      	mov	r0, r4
  427dfc:	f85d 4b10 	ldr.w	r4, [sp], #16
  427e00:	4770      	bx	lr
  427e02:	f101 0104 	add.w	r1, r1, #4
  427e06:	f850 2b04 	ldr.w	r2, [r0], #4
  427e0a:	07cc      	lsls	r4, r1, #31
  427e0c:	f021 0103 	bic.w	r1, r1, #3
  427e10:	f851 3b04 	ldr.w	r3, [r1], #4
  427e14:	d848      	bhi.n	427ea8 <strcmp+0x260>
  427e16:	d224      	bcs.n	427e62 <strcmp+0x21a>
  427e18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  427e1c:	fa82 f54c 	uadd8	r5, r2, ip
  427e20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  427e24:	faa5 f58c 	sel	r5, r5, ip
  427e28:	d10a      	bne.n	427e40 <strcmp+0x1f8>
  427e2a:	b965      	cbnz	r5, 427e46 <strcmp+0x1fe>
  427e2c:	f851 3b04 	ldr.w	r3, [r1], #4
  427e30:	ea84 0402 	eor.w	r4, r4, r2
  427e34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  427e38:	d10e      	bne.n	427e58 <strcmp+0x210>
  427e3a:	f850 2b04 	ldr.w	r2, [r0], #4
  427e3e:	e7eb      	b.n	427e18 <strcmp+0x1d0>
  427e40:	ea4f 2313 	mov.w	r3, r3, lsr #8
  427e44:	e055      	b.n	427ef2 <strcmp+0x2aa>
  427e46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  427e4a:	d14d      	bne.n	427ee8 <strcmp+0x2a0>
  427e4c:	7808      	ldrb	r0, [r1, #0]
  427e4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  427e52:	f1c0 0000 	rsb	r0, r0, #0
  427e56:	4770      	bx	lr
  427e58:	ea4f 6212 	mov.w	r2, r2, lsr #24
  427e5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  427e60:	e047      	b.n	427ef2 <strcmp+0x2aa>
  427e62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  427e66:	fa82 f54c 	uadd8	r5, r2, ip
  427e6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  427e6e:	faa5 f58c 	sel	r5, r5, ip
  427e72:	d10a      	bne.n	427e8a <strcmp+0x242>
  427e74:	b965      	cbnz	r5, 427e90 <strcmp+0x248>
  427e76:	f851 3b04 	ldr.w	r3, [r1], #4
  427e7a:	ea84 0402 	eor.w	r4, r4, r2
  427e7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  427e82:	d10c      	bne.n	427e9e <strcmp+0x256>
  427e84:	f850 2b04 	ldr.w	r2, [r0], #4
  427e88:	e7eb      	b.n	427e62 <strcmp+0x21a>
  427e8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  427e8e:	e030      	b.n	427ef2 <strcmp+0x2aa>
  427e90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  427e94:	d128      	bne.n	427ee8 <strcmp+0x2a0>
  427e96:	880b      	ldrh	r3, [r1, #0]
  427e98:	ea4f 4212 	mov.w	r2, r2, lsr #16
  427e9c:	e029      	b.n	427ef2 <strcmp+0x2aa>
  427e9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  427ea2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  427ea6:	e024      	b.n	427ef2 <strcmp+0x2aa>
  427ea8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  427eac:	fa82 f54c 	uadd8	r5, r2, ip
  427eb0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  427eb4:	faa5 f58c 	sel	r5, r5, ip
  427eb8:	d10a      	bne.n	427ed0 <strcmp+0x288>
  427eba:	b965      	cbnz	r5, 427ed6 <strcmp+0x28e>
  427ebc:	f851 3b04 	ldr.w	r3, [r1], #4
  427ec0:	ea84 0402 	eor.w	r4, r4, r2
  427ec4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  427ec8:	d109      	bne.n	427ede <strcmp+0x296>
  427eca:	f850 2b04 	ldr.w	r2, [r0], #4
  427ece:	e7eb      	b.n	427ea8 <strcmp+0x260>
  427ed0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  427ed4:	e00d      	b.n	427ef2 <strcmp+0x2aa>
  427ed6:	f015 0fff 	tst.w	r5, #255	; 0xff
  427eda:	d105      	bne.n	427ee8 <strcmp+0x2a0>
  427edc:	680b      	ldr	r3, [r1, #0]
  427ede:	ea4f 2212 	mov.w	r2, r2, lsr #8
  427ee2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  427ee6:	e004      	b.n	427ef2 <strcmp+0x2aa>
  427ee8:	f04f 0000 	mov.w	r0, #0
  427eec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  427ef0:	4770      	bx	lr
  427ef2:	ba12      	rev	r2, r2
  427ef4:	ba1b      	rev	r3, r3
  427ef6:	fa82 f44c 	uadd8	r4, r2, ip
  427efa:	ea82 0403 	eor.w	r4, r2, r3
  427efe:	faa4 f58c 	sel	r5, r4, ip
  427f02:	fab5 f485 	clz	r4, r5
  427f06:	fa02 f204 	lsl.w	r2, r2, r4
  427f0a:	fa03 f304 	lsl.w	r3, r3, r4
  427f0e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  427f12:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  427f16:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  427f1a:	4770      	bx	lr

00427f1c <strcpy>:
  427f1c:	ea80 0201 	eor.w	r2, r0, r1
  427f20:	4684      	mov	ip, r0
  427f22:	f012 0f03 	tst.w	r2, #3
  427f26:	d14f      	bne.n	427fc8 <strcpy+0xac>
  427f28:	f011 0f03 	tst.w	r1, #3
  427f2c:	d132      	bne.n	427f94 <strcpy+0x78>
  427f2e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  427f32:	f011 0f04 	tst.w	r1, #4
  427f36:	f851 3b04 	ldr.w	r3, [r1], #4
  427f3a:	d00b      	beq.n	427f54 <strcpy+0x38>
  427f3c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  427f40:	439a      	bics	r2, r3
  427f42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  427f46:	bf04      	itt	eq
  427f48:	f84c 3b04 	streq.w	r3, [ip], #4
  427f4c:	f851 3b04 	ldreq.w	r3, [r1], #4
  427f50:	d116      	bne.n	427f80 <strcpy+0x64>
  427f52:	bf00      	nop
  427f54:	f851 4b04 	ldr.w	r4, [r1], #4
  427f58:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  427f5c:	439a      	bics	r2, r3
  427f5e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  427f62:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  427f66:	d10b      	bne.n	427f80 <strcpy+0x64>
  427f68:	f84c 3b04 	str.w	r3, [ip], #4
  427f6c:	43a2      	bics	r2, r4
  427f6e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  427f72:	bf04      	itt	eq
  427f74:	f851 3b04 	ldreq.w	r3, [r1], #4
  427f78:	f84c 4b04 	streq.w	r4, [ip], #4
  427f7c:	d0ea      	beq.n	427f54 <strcpy+0x38>
  427f7e:	4623      	mov	r3, r4
  427f80:	f80c 3b01 	strb.w	r3, [ip], #1
  427f84:	f013 0fff 	tst.w	r3, #255	; 0xff
  427f88:	ea4f 2333 	mov.w	r3, r3, ror #8
  427f8c:	d1f8      	bne.n	427f80 <strcpy+0x64>
  427f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  427f92:	4770      	bx	lr
  427f94:	f011 0f01 	tst.w	r1, #1
  427f98:	d006      	beq.n	427fa8 <strcpy+0x8c>
  427f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
  427f9e:	f80c 2b01 	strb.w	r2, [ip], #1
  427fa2:	2a00      	cmp	r2, #0
  427fa4:	bf08      	it	eq
  427fa6:	4770      	bxeq	lr
  427fa8:	f011 0f02 	tst.w	r1, #2
  427fac:	d0bf      	beq.n	427f2e <strcpy+0x12>
  427fae:	f831 2b02 	ldrh.w	r2, [r1], #2
  427fb2:	f012 0fff 	tst.w	r2, #255	; 0xff
  427fb6:	bf16      	itet	ne
  427fb8:	f82c 2b02 	strhne.w	r2, [ip], #2
  427fbc:	f88c 2000 	strbeq.w	r2, [ip]
  427fc0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  427fc4:	d1b3      	bne.n	427f2e <strcpy+0x12>
  427fc6:	4770      	bx	lr
  427fc8:	f811 2b01 	ldrb.w	r2, [r1], #1
  427fcc:	f80c 2b01 	strb.w	r2, [ip], #1
  427fd0:	2a00      	cmp	r2, #0
  427fd2:	d1f9      	bne.n	427fc8 <strcpy+0xac>
  427fd4:	4770      	bx	lr
  427fd6:	bf00      	nop
	...

00428000 <strlen>:
  428000:	f890 f000 	pld	[r0]
  428004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  428008:	f020 0107 	bic.w	r1, r0, #7
  42800c:	f06f 0c00 	mvn.w	ip, #0
  428010:	f010 0407 	ands.w	r4, r0, #7
  428014:	f891 f020 	pld	[r1, #32]
  428018:	f040 8049 	bne.w	4280ae <strlen+0xae>
  42801c:	f04f 0400 	mov.w	r4, #0
  428020:	f06f 0007 	mvn.w	r0, #7
  428024:	e9d1 2300 	ldrd	r2, r3, [r1]
  428028:	f891 f040 	pld	[r1, #64]	; 0x40
  42802c:	f100 0008 	add.w	r0, r0, #8
  428030:	fa82 f24c 	uadd8	r2, r2, ip
  428034:	faa4 f28c 	sel	r2, r4, ip
  428038:	fa83 f34c 	uadd8	r3, r3, ip
  42803c:	faa2 f38c 	sel	r3, r2, ip
  428040:	bb4b      	cbnz	r3, 428096 <strlen+0x96>
  428042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  428046:	fa82 f24c 	uadd8	r2, r2, ip
  42804a:	f100 0008 	add.w	r0, r0, #8
  42804e:	faa4 f28c 	sel	r2, r4, ip
  428052:	fa83 f34c 	uadd8	r3, r3, ip
  428056:	faa2 f38c 	sel	r3, r2, ip
  42805a:	b9e3      	cbnz	r3, 428096 <strlen+0x96>
  42805c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  428060:	fa82 f24c 	uadd8	r2, r2, ip
  428064:	f100 0008 	add.w	r0, r0, #8
  428068:	faa4 f28c 	sel	r2, r4, ip
  42806c:	fa83 f34c 	uadd8	r3, r3, ip
  428070:	faa2 f38c 	sel	r3, r2, ip
  428074:	b97b      	cbnz	r3, 428096 <strlen+0x96>
  428076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  42807a:	f101 0120 	add.w	r1, r1, #32
  42807e:	fa82 f24c 	uadd8	r2, r2, ip
  428082:	f100 0008 	add.w	r0, r0, #8
  428086:	faa4 f28c 	sel	r2, r4, ip
  42808a:	fa83 f34c 	uadd8	r3, r3, ip
  42808e:	faa2 f38c 	sel	r3, r2, ip
  428092:	2b00      	cmp	r3, #0
  428094:	d0c6      	beq.n	428024 <strlen+0x24>
  428096:	2a00      	cmp	r2, #0
  428098:	bf04      	itt	eq
  42809a:	3004      	addeq	r0, #4
  42809c:	461a      	moveq	r2, r3
  42809e:	ba12      	rev	r2, r2
  4280a0:	fab2 f282 	clz	r2, r2
  4280a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4280a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4280ac:	4770      	bx	lr
  4280ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4280b2:	f004 0503 	and.w	r5, r4, #3
  4280b6:	f1c4 0000 	rsb	r0, r4, #0
  4280ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4280be:	f014 0f04 	tst.w	r4, #4
  4280c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4280c6:	fa0c f505 	lsl.w	r5, ip, r5
  4280ca:	ea62 0205 	orn	r2, r2, r5
  4280ce:	bf1c      	itt	ne
  4280d0:	ea63 0305 	ornne	r3, r3, r5
  4280d4:	4662      	movne	r2, ip
  4280d6:	f04f 0400 	mov.w	r4, #0
  4280da:	e7a9      	b.n	428030 <strlen+0x30>

004280dc <strncpy>:
  4280dc:	ea40 0301 	orr.w	r3, r0, r1
  4280e0:	f013 0f03 	tst.w	r3, #3
  4280e4:	b470      	push	{r4, r5, r6}
  4280e6:	4603      	mov	r3, r0
  4280e8:	d024      	beq.n	428134 <strncpy+0x58>
  4280ea:	b1a2      	cbz	r2, 428116 <strncpy+0x3a>
  4280ec:	780c      	ldrb	r4, [r1, #0]
  4280ee:	701c      	strb	r4, [r3, #0]
  4280f0:	3a01      	subs	r2, #1
  4280f2:	3301      	adds	r3, #1
  4280f4:	3101      	adds	r1, #1
  4280f6:	b13c      	cbz	r4, 428108 <strncpy+0x2c>
  4280f8:	b16a      	cbz	r2, 428116 <strncpy+0x3a>
  4280fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4280fe:	f803 4b01 	strb.w	r4, [r3], #1
  428102:	3a01      	subs	r2, #1
  428104:	2c00      	cmp	r4, #0
  428106:	d1f7      	bne.n	4280f8 <strncpy+0x1c>
  428108:	b12a      	cbz	r2, 428116 <strncpy+0x3a>
  42810a:	441a      	add	r2, r3
  42810c:	2100      	movs	r1, #0
  42810e:	f803 1b01 	strb.w	r1, [r3], #1
  428112:	429a      	cmp	r2, r3
  428114:	d1fb      	bne.n	42810e <strncpy+0x32>
  428116:	bc70      	pop	{r4, r5, r6}
  428118:	4770      	bx	lr
  42811a:	460e      	mov	r6, r1
  42811c:	f851 5b04 	ldr.w	r5, [r1], #4
  428120:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  428124:	ea24 0405 	bic.w	r4, r4, r5
  428128:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  42812c:	d105      	bne.n	42813a <strncpy+0x5e>
  42812e:	f843 5b04 	str.w	r5, [r3], #4
  428132:	3a04      	subs	r2, #4
  428134:	2a03      	cmp	r2, #3
  428136:	d8f0      	bhi.n	42811a <strncpy+0x3e>
  428138:	e7d7      	b.n	4280ea <strncpy+0xe>
  42813a:	4631      	mov	r1, r6
  42813c:	e7d6      	b.n	4280ec <strncpy+0x10>
  42813e:	bf00      	nop

00428140 <__sprint_r.part.0>:
  428140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  428144:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  428146:	049c      	lsls	r4, r3, #18
  428148:	4693      	mov	fp, r2
  42814a:	d52f      	bpl.n	4281ac <__sprint_r.part.0+0x6c>
  42814c:	6893      	ldr	r3, [r2, #8]
  42814e:	6812      	ldr	r2, [r2, #0]
  428150:	b353      	cbz	r3, 4281a8 <__sprint_r.part.0+0x68>
  428152:	460e      	mov	r6, r1
  428154:	4607      	mov	r7, r0
  428156:	f102 0908 	add.w	r9, r2, #8
  42815a:	e919 0420 	ldmdb	r9, {r5, sl}
  42815e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  428162:	d017      	beq.n	428194 <__sprint_r.part.0+0x54>
  428164:	3d04      	subs	r5, #4
  428166:	2400      	movs	r4, #0
  428168:	e001      	b.n	42816e <__sprint_r.part.0+0x2e>
  42816a:	45a0      	cmp	r8, r4
  42816c:	d010      	beq.n	428190 <__sprint_r.part.0+0x50>
  42816e:	4632      	mov	r2, r6
  428170:	f855 1f04 	ldr.w	r1, [r5, #4]!
  428174:	4638      	mov	r0, r7
  428176:	f001 f8bb 	bl	4292f0 <_fputwc_r>
  42817a:	1c43      	adds	r3, r0, #1
  42817c:	f104 0401 	add.w	r4, r4, #1
  428180:	d1f3      	bne.n	42816a <__sprint_r.part.0+0x2a>
  428182:	2300      	movs	r3, #0
  428184:	f8cb 3008 	str.w	r3, [fp, #8]
  428188:	f8cb 3004 	str.w	r3, [fp, #4]
  42818c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428190:	f8db 3008 	ldr.w	r3, [fp, #8]
  428194:	f02a 0a03 	bic.w	sl, sl, #3
  428198:	eba3 030a 	sub.w	r3, r3, sl
  42819c:	f8cb 3008 	str.w	r3, [fp, #8]
  4281a0:	f109 0908 	add.w	r9, r9, #8
  4281a4:	2b00      	cmp	r3, #0
  4281a6:	d1d8      	bne.n	42815a <__sprint_r.part.0+0x1a>
  4281a8:	2000      	movs	r0, #0
  4281aa:	e7ea      	b.n	428182 <__sprint_r.part.0+0x42>
  4281ac:	f001 fa0a 	bl	4295c4 <__sfvwrite_r>
  4281b0:	2300      	movs	r3, #0
  4281b2:	f8cb 3008 	str.w	r3, [fp, #8]
  4281b6:	f8cb 3004 	str.w	r3, [fp, #4]
  4281ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4281be:	bf00      	nop

004281c0 <_vfiprintf_r>:
  4281c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4281c4:	b0ad      	sub	sp, #180	; 0xb4
  4281c6:	461d      	mov	r5, r3
  4281c8:	468b      	mov	fp, r1
  4281ca:	4690      	mov	r8, r2
  4281cc:	9307      	str	r3, [sp, #28]
  4281ce:	9006      	str	r0, [sp, #24]
  4281d0:	b118      	cbz	r0, 4281da <_vfiprintf_r+0x1a>
  4281d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4281d4:	2b00      	cmp	r3, #0
  4281d6:	f000 80f3 	beq.w	4283c0 <_vfiprintf_r+0x200>
  4281da:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4281de:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4281e2:	07df      	lsls	r7, r3, #31
  4281e4:	b281      	uxth	r1, r0
  4281e6:	d402      	bmi.n	4281ee <_vfiprintf_r+0x2e>
  4281e8:	058e      	lsls	r6, r1, #22
  4281ea:	f140 80fc 	bpl.w	4283e6 <_vfiprintf_r+0x226>
  4281ee:	048c      	lsls	r4, r1, #18
  4281f0:	d40a      	bmi.n	428208 <_vfiprintf_r+0x48>
  4281f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4281f6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4281fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4281fe:	f8ab 100c 	strh.w	r1, [fp, #12]
  428202:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  428206:	b289      	uxth	r1, r1
  428208:	0708      	lsls	r0, r1, #28
  42820a:	f140 80b3 	bpl.w	428374 <_vfiprintf_r+0x1b4>
  42820e:	f8db 3010 	ldr.w	r3, [fp, #16]
  428212:	2b00      	cmp	r3, #0
  428214:	f000 80ae 	beq.w	428374 <_vfiprintf_r+0x1b4>
  428218:	f001 031a 	and.w	r3, r1, #26
  42821c:	2b0a      	cmp	r3, #10
  42821e:	f000 80b5 	beq.w	42838c <_vfiprintf_r+0x1cc>
  428222:	2300      	movs	r3, #0
  428224:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  428228:	930b      	str	r3, [sp, #44]	; 0x2c
  42822a:	9311      	str	r3, [sp, #68]	; 0x44
  42822c:	9310      	str	r3, [sp, #64]	; 0x40
  42822e:	9303      	str	r3, [sp, #12]
  428230:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  428234:	46ca      	mov	sl, r9
  428236:	f8cd b010 	str.w	fp, [sp, #16]
  42823a:	f898 3000 	ldrb.w	r3, [r8]
  42823e:	4644      	mov	r4, r8
  428240:	b1fb      	cbz	r3, 428282 <_vfiprintf_r+0xc2>
  428242:	2b25      	cmp	r3, #37	; 0x25
  428244:	d102      	bne.n	42824c <_vfiprintf_r+0x8c>
  428246:	e01c      	b.n	428282 <_vfiprintf_r+0xc2>
  428248:	2b25      	cmp	r3, #37	; 0x25
  42824a:	d003      	beq.n	428254 <_vfiprintf_r+0x94>
  42824c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  428250:	2b00      	cmp	r3, #0
  428252:	d1f9      	bne.n	428248 <_vfiprintf_r+0x88>
  428254:	eba4 0508 	sub.w	r5, r4, r8
  428258:	b19d      	cbz	r5, 428282 <_vfiprintf_r+0xc2>
  42825a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  42825c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42825e:	f8ca 8000 	str.w	r8, [sl]
  428262:	3301      	adds	r3, #1
  428264:	442a      	add	r2, r5
  428266:	2b07      	cmp	r3, #7
  428268:	f8ca 5004 	str.w	r5, [sl, #4]
  42826c:	9211      	str	r2, [sp, #68]	; 0x44
  42826e:	9310      	str	r3, [sp, #64]	; 0x40
  428270:	dd7a      	ble.n	428368 <_vfiprintf_r+0x1a8>
  428272:	2a00      	cmp	r2, #0
  428274:	f040 84b0 	bne.w	428bd8 <_vfiprintf_r+0xa18>
  428278:	9b03      	ldr	r3, [sp, #12]
  42827a:	9210      	str	r2, [sp, #64]	; 0x40
  42827c:	442b      	add	r3, r5
  42827e:	46ca      	mov	sl, r9
  428280:	9303      	str	r3, [sp, #12]
  428282:	7823      	ldrb	r3, [r4, #0]
  428284:	2b00      	cmp	r3, #0
  428286:	f000 83e0 	beq.w	428a4a <_vfiprintf_r+0x88a>
  42828a:	2000      	movs	r0, #0
  42828c:	f04f 0300 	mov.w	r3, #0
  428290:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  428294:	f104 0801 	add.w	r8, r4, #1
  428298:	7862      	ldrb	r2, [r4, #1]
  42829a:	4605      	mov	r5, r0
  42829c:	4606      	mov	r6, r0
  42829e:	4603      	mov	r3, r0
  4282a0:	f04f 34ff 	mov.w	r4, #4294967295
  4282a4:	f108 0801 	add.w	r8, r8, #1
  4282a8:	f1a2 0120 	sub.w	r1, r2, #32
  4282ac:	2958      	cmp	r1, #88	; 0x58
  4282ae:	f200 82de 	bhi.w	42886e <_vfiprintf_r+0x6ae>
  4282b2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4282b6:	0221      	.short	0x0221
  4282b8:	02dc02dc 	.word	0x02dc02dc
  4282bc:	02dc0229 	.word	0x02dc0229
  4282c0:	02dc02dc 	.word	0x02dc02dc
  4282c4:	02dc02dc 	.word	0x02dc02dc
  4282c8:	028902dc 	.word	0x028902dc
  4282cc:	02dc0295 	.word	0x02dc0295
  4282d0:	02bd00a2 	.word	0x02bd00a2
  4282d4:	019f02dc 	.word	0x019f02dc
  4282d8:	01a401a4 	.word	0x01a401a4
  4282dc:	01a401a4 	.word	0x01a401a4
  4282e0:	01a401a4 	.word	0x01a401a4
  4282e4:	01a401a4 	.word	0x01a401a4
  4282e8:	02dc01a4 	.word	0x02dc01a4
  4282ec:	02dc02dc 	.word	0x02dc02dc
  4282f0:	02dc02dc 	.word	0x02dc02dc
  4282f4:	02dc02dc 	.word	0x02dc02dc
  4282f8:	02dc02dc 	.word	0x02dc02dc
  4282fc:	01b202dc 	.word	0x01b202dc
  428300:	02dc02dc 	.word	0x02dc02dc
  428304:	02dc02dc 	.word	0x02dc02dc
  428308:	02dc02dc 	.word	0x02dc02dc
  42830c:	02dc02dc 	.word	0x02dc02dc
  428310:	02dc02dc 	.word	0x02dc02dc
  428314:	02dc0197 	.word	0x02dc0197
  428318:	02dc02dc 	.word	0x02dc02dc
  42831c:	02dc02dc 	.word	0x02dc02dc
  428320:	02dc019b 	.word	0x02dc019b
  428324:	025302dc 	.word	0x025302dc
  428328:	02dc02dc 	.word	0x02dc02dc
  42832c:	02dc02dc 	.word	0x02dc02dc
  428330:	02dc02dc 	.word	0x02dc02dc
  428334:	02dc02dc 	.word	0x02dc02dc
  428338:	02dc02dc 	.word	0x02dc02dc
  42833c:	021b025a 	.word	0x021b025a
  428340:	02dc02dc 	.word	0x02dc02dc
  428344:	026e02dc 	.word	0x026e02dc
  428348:	02dc021b 	.word	0x02dc021b
  42834c:	027302dc 	.word	0x027302dc
  428350:	01f502dc 	.word	0x01f502dc
  428354:	02090182 	.word	0x02090182
  428358:	02dc02d7 	.word	0x02dc02d7
  42835c:	02dc029a 	.word	0x02dc029a
  428360:	02dc00a7 	.word	0x02dc00a7
  428364:	022e02dc 	.word	0x022e02dc
  428368:	f10a 0a08 	add.w	sl, sl, #8
  42836c:	9b03      	ldr	r3, [sp, #12]
  42836e:	442b      	add	r3, r5
  428370:	9303      	str	r3, [sp, #12]
  428372:	e786      	b.n	428282 <_vfiprintf_r+0xc2>
  428374:	4659      	mov	r1, fp
  428376:	9806      	ldr	r0, [sp, #24]
  428378:	f000 fdac 	bl	428ed4 <__swsetup_r>
  42837c:	bb18      	cbnz	r0, 4283c6 <_vfiprintf_r+0x206>
  42837e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  428382:	f001 031a 	and.w	r3, r1, #26
  428386:	2b0a      	cmp	r3, #10
  428388:	f47f af4b 	bne.w	428222 <_vfiprintf_r+0x62>
  42838c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  428390:	2b00      	cmp	r3, #0
  428392:	f6ff af46 	blt.w	428222 <_vfiprintf_r+0x62>
  428396:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42839a:	07db      	lsls	r3, r3, #31
  42839c:	d405      	bmi.n	4283aa <_vfiprintf_r+0x1ea>
  42839e:	058f      	lsls	r7, r1, #22
  4283a0:	d403      	bmi.n	4283aa <_vfiprintf_r+0x1ea>
  4283a2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4283a6:	f001 fac3 	bl	429930 <__retarget_lock_release_recursive>
  4283aa:	462b      	mov	r3, r5
  4283ac:	4642      	mov	r2, r8
  4283ae:	4659      	mov	r1, fp
  4283b0:	9806      	ldr	r0, [sp, #24]
  4283b2:	f000 fd4d 	bl	428e50 <__sbprintf>
  4283b6:	9003      	str	r0, [sp, #12]
  4283b8:	9803      	ldr	r0, [sp, #12]
  4283ba:	b02d      	add	sp, #180	; 0xb4
  4283bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4283c0:	f000 fef4 	bl	4291ac <__sinit>
  4283c4:	e709      	b.n	4281da <_vfiprintf_r+0x1a>
  4283c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4283ca:	07d9      	lsls	r1, r3, #31
  4283cc:	d404      	bmi.n	4283d8 <_vfiprintf_r+0x218>
  4283ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4283d2:	059a      	lsls	r2, r3, #22
  4283d4:	f140 84aa 	bpl.w	428d2c <_vfiprintf_r+0xb6c>
  4283d8:	f04f 33ff 	mov.w	r3, #4294967295
  4283dc:	9303      	str	r3, [sp, #12]
  4283de:	9803      	ldr	r0, [sp, #12]
  4283e0:	b02d      	add	sp, #180	; 0xb4
  4283e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4283e6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4283ea:	f001 fa9f 	bl	42992c <__retarget_lock_acquire_recursive>
  4283ee:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4283f2:	b281      	uxth	r1, r0
  4283f4:	e6fb      	b.n	4281ee <_vfiprintf_r+0x2e>
  4283f6:	4276      	negs	r6, r6
  4283f8:	9207      	str	r2, [sp, #28]
  4283fa:	f043 0304 	orr.w	r3, r3, #4
  4283fe:	f898 2000 	ldrb.w	r2, [r8]
  428402:	e74f      	b.n	4282a4 <_vfiprintf_r+0xe4>
  428404:	9608      	str	r6, [sp, #32]
  428406:	069e      	lsls	r6, r3, #26
  428408:	f100 8450 	bmi.w	428cac <_vfiprintf_r+0xaec>
  42840c:	9907      	ldr	r1, [sp, #28]
  42840e:	06dd      	lsls	r5, r3, #27
  428410:	460a      	mov	r2, r1
  428412:	f100 83ef 	bmi.w	428bf4 <_vfiprintf_r+0xa34>
  428416:	0658      	lsls	r0, r3, #25
  428418:	f140 83ec 	bpl.w	428bf4 <_vfiprintf_r+0xa34>
  42841c:	880e      	ldrh	r6, [r1, #0]
  42841e:	3104      	adds	r1, #4
  428420:	2700      	movs	r7, #0
  428422:	2201      	movs	r2, #1
  428424:	9107      	str	r1, [sp, #28]
  428426:	f04f 0100 	mov.w	r1, #0
  42842a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  42842e:	2500      	movs	r5, #0
  428430:	1c61      	adds	r1, r4, #1
  428432:	f000 8116 	beq.w	428662 <_vfiprintf_r+0x4a2>
  428436:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  42843a:	9102      	str	r1, [sp, #8]
  42843c:	ea56 0107 	orrs.w	r1, r6, r7
  428440:	f040 8114 	bne.w	42866c <_vfiprintf_r+0x4ac>
  428444:	2c00      	cmp	r4, #0
  428446:	f040 835c 	bne.w	428b02 <_vfiprintf_r+0x942>
  42844a:	2a00      	cmp	r2, #0
  42844c:	f040 83b7 	bne.w	428bbe <_vfiprintf_r+0x9fe>
  428450:	f013 0301 	ands.w	r3, r3, #1
  428454:	9305      	str	r3, [sp, #20]
  428456:	f000 8457 	beq.w	428d08 <_vfiprintf_r+0xb48>
  42845a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  42845e:	2330      	movs	r3, #48	; 0x30
  428460:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  428464:	9b05      	ldr	r3, [sp, #20]
  428466:	42a3      	cmp	r3, r4
  428468:	bfb8      	it	lt
  42846a:	4623      	movlt	r3, r4
  42846c:	9301      	str	r3, [sp, #4]
  42846e:	b10d      	cbz	r5, 428474 <_vfiprintf_r+0x2b4>
  428470:	3301      	adds	r3, #1
  428472:	9301      	str	r3, [sp, #4]
  428474:	9b02      	ldr	r3, [sp, #8]
  428476:	f013 0302 	ands.w	r3, r3, #2
  42847a:	9309      	str	r3, [sp, #36]	; 0x24
  42847c:	d002      	beq.n	428484 <_vfiprintf_r+0x2c4>
  42847e:	9b01      	ldr	r3, [sp, #4]
  428480:	3302      	adds	r3, #2
  428482:	9301      	str	r3, [sp, #4]
  428484:	9b02      	ldr	r3, [sp, #8]
  428486:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  42848a:	930a      	str	r3, [sp, #40]	; 0x28
  42848c:	f040 8217 	bne.w	4288be <_vfiprintf_r+0x6fe>
  428490:	9b08      	ldr	r3, [sp, #32]
  428492:	9a01      	ldr	r2, [sp, #4]
  428494:	1a9d      	subs	r5, r3, r2
  428496:	2d00      	cmp	r5, #0
  428498:	f340 8211 	ble.w	4288be <_vfiprintf_r+0x6fe>
  42849c:	2d10      	cmp	r5, #16
  42849e:	f340 8490 	ble.w	428dc2 <_vfiprintf_r+0xc02>
  4284a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4284a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4284a6:	4ec4      	ldr	r6, [pc, #784]	; (4287b8 <_vfiprintf_r+0x5f8>)
  4284a8:	46d6      	mov	lr, sl
  4284aa:	2710      	movs	r7, #16
  4284ac:	46a2      	mov	sl, r4
  4284ae:	4619      	mov	r1, r3
  4284b0:	9c06      	ldr	r4, [sp, #24]
  4284b2:	e007      	b.n	4284c4 <_vfiprintf_r+0x304>
  4284b4:	f101 0c02 	add.w	ip, r1, #2
  4284b8:	f10e 0e08 	add.w	lr, lr, #8
  4284bc:	4601      	mov	r1, r0
  4284be:	3d10      	subs	r5, #16
  4284c0:	2d10      	cmp	r5, #16
  4284c2:	dd11      	ble.n	4284e8 <_vfiprintf_r+0x328>
  4284c4:	1c48      	adds	r0, r1, #1
  4284c6:	3210      	adds	r2, #16
  4284c8:	2807      	cmp	r0, #7
  4284ca:	9211      	str	r2, [sp, #68]	; 0x44
  4284cc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4284d0:	9010      	str	r0, [sp, #64]	; 0x40
  4284d2:	ddef      	ble.n	4284b4 <_vfiprintf_r+0x2f4>
  4284d4:	2a00      	cmp	r2, #0
  4284d6:	f040 81e4 	bne.w	4288a2 <_vfiprintf_r+0x6e2>
  4284da:	3d10      	subs	r5, #16
  4284dc:	2d10      	cmp	r5, #16
  4284de:	4611      	mov	r1, r2
  4284e0:	f04f 0c01 	mov.w	ip, #1
  4284e4:	46ce      	mov	lr, r9
  4284e6:	dced      	bgt.n	4284c4 <_vfiprintf_r+0x304>
  4284e8:	4654      	mov	r4, sl
  4284ea:	4661      	mov	r1, ip
  4284ec:	46f2      	mov	sl, lr
  4284ee:	442a      	add	r2, r5
  4284f0:	2907      	cmp	r1, #7
  4284f2:	9211      	str	r2, [sp, #68]	; 0x44
  4284f4:	f8ca 6000 	str.w	r6, [sl]
  4284f8:	f8ca 5004 	str.w	r5, [sl, #4]
  4284fc:	9110      	str	r1, [sp, #64]	; 0x40
  4284fe:	f300 82ec 	bgt.w	428ada <_vfiprintf_r+0x91a>
  428502:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  428506:	f10a 0a08 	add.w	sl, sl, #8
  42850a:	1c48      	adds	r0, r1, #1
  42850c:	2d00      	cmp	r5, #0
  42850e:	f040 81de 	bne.w	4288ce <_vfiprintf_r+0x70e>
  428512:	9b09      	ldr	r3, [sp, #36]	; 0x24
  428514:	2b00      	cmp	r3, #0
  428516:	f000 81f8 	beq.w	42890a <_vfiprintf_r+0x74a>
  42851a:	3202      	adds	r2, #2
  42851c:	a90e      	add	r1, sp, #56	; 0x38
  42851e:	2302      	movs	r3, #2
  428520:	2807      	cmp	r0, #7
  428522:	9211      	str	r2, [sp, #68]	; 0x44
  428524:	9010      	str	r0, [sp, #64]	; 0x40
  428526:	e88a 000a 	stmia.w	sl, {r1, r3}
  42852a:	f340 81ea 	ble.w	428902 <_vfiprintf_r+0x742>
  42852e:	2a00      	cmp	r2, #0
  428530:	f040 838c 	bne.w	428c4c <_vfiprintf_r+0xa8c>
  428534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  428536:	2b80      	cmp	r3, #128	; 0x80
  428538:	f04f 0001 	mov.w	r0, #1
  42853c:	4611      	mov	r1, r2
  42853e:	46ca      	mov	sl, r9
  428540:	f040 81e7 	bne.w	428912 <_vfiprintf_r+0x752>
  428544:	9b08      	ldr	r3, [sp, #32]
  428546:	9d01      	ldr	r5, [sp, #4]
  428548:	1b5e      	subs	r6, r3, r5
  42854a:	2e00      	cmp	r6, #0
  42854c:	f340 81e1 	ble.w	428912 <_vfiprintf_r+0x752>
  428550:	2e10      	cmp	r6, #16
  428552:	4d9a      	ldr	r5, [pc, #616]	; (4287bc <_vfiprintf_r+0x5fc>)
  428554:	f340 8450 	ble.w	428df8 <_vfiprintf_r+0xc38>
  428558:	46d4      	mov	ip, sl
  42855a:	2710      	movs	r7, #16
  42855c:	46a2      	mov	sl, r4
  42855e:	9c06      	ldr	r4, [sp, #24]
  428560:	e007      	b.n	428572 <_vfiprintf_r+0x3b2>
  428562:	f101 0e02 	add.w	lr, r1, #2
  428566:	f10c 0c08 	add.w	ip, ip, #8
  42856a:	4601      	mov	r1, r0
  42856c:	3e10      	subs	r6, #16
  42856e:	2e10      	cmp	r6, #16
  428570:	dd11      	ble.n	428596 <_vfiprintf_r+0x3d6>
  428572:	1c48      	adds	r0, r1, #1
  428574:	3210      	adds	r2, #16
  428576:	2807      	cmp	r0, #7
  428578:	9211      	str	r2, [sp, #68]	; 0x44
  42857a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  42857e:	9010      	str	r0, [sp, #64]	; 0x40
  428580:	ddef      	ble.n	428562 <_vfiprintf_r+0x3a2>
  428582:	2a00      	cmp	r2, #0
  428584:	f040 829d 	bne.w	428ac2 <_vfiprintf_r+0x902>
  428588:	3e10      	subs	r6, #16
  42858a:	2e10      	cmp	r6, #16
  42858c:	f04f 0e01 	mov.w	lr, #1
  428590:	4611      	mov	r1, r2
  428592:	46cc      	mov	ip, r9
  428594:	dced      	bgt.n	428572 <_vfiprintf_r+0x3b2>
  428596:	4654      	mov	r4, sl
  428598:	46e2      	mov	sl, ip
  42859a:	4432      	add	r2, r6
  42859c:	f1be 0f07 	cmp.w	lr, #7
  4285a0:	9211      	str	r2, [sp, #68]	; 0x44
  4285a2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4285a6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4285aa:	f300 8369 	bgt.w	428c80 <_vfiprintf_r+0xac0>
  4285ae:	f10a 0a08 	add.w	sl, sl, #8
  4285b2:	f10e 0001 	add.w	r0, lr, #1
  4285b6:	4671      	mov	r1, lr
  4285b8:	e1ab      	b.n	428912 <_vfiprintf_r+0x752>
  4285ba:	9608      	str	r6, [sp, #32]
  4285bc:	f013 0220 	ands.w	r2, r3, #32
  4285c0:	f040 838c 	bne.w	428cdc <_vfiprintf_r+0xb1c>
  4285c4:	f013 0110 	ands.w	r1, r3, #16
  4285c8:	f040 831a 	bne.w	428c00 <_vfiprintf_r+0xa40>
  4285cc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4285d0:	f000 8316 	beq.w	428c00 <_vfiprintf_r+0xa40>
  4285d4:	9807      	ldr	r0, [sp, #28]
  4285d6:	460a      	mov	r2, r1
  4285d8:	4601      	mov	r1, r0
  4285da:	3104      	adds	r1, #4
  4285dc:	8806      	ldrh	r6, [r0, #0]
  4285de:	9107      	str	r1, [sp, #28]
  4285e0:	2700      	movs	r7, #0
  4285e2:	e720      	b.n	428426 <_vfiprintf_r+0x266>
  4285e4:	9608      	str	r6, [sp, #32]
  4285e6:	f043 0310 	orr.w	r3, r3, #16
  4285ea:	e7e7      	b.n	4285bc <_vfiprintf_r+0x3fc>
  4285ec:	9608      	str	r6, [sp, #32]
  4285ee:	f043 0310 	orr.w	r3, r3, #16
  4285f2:	e708      	b.n	428406 <_vfiprintf_r+0x246>
  4285f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4285f8:	f898 2000 	ldrb.w	r2, [r8]
  4285fc:	e652      	b.n	4282a4 <_vfiprintf_r+0xe4>
  4285fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  428602:	2600      	movs	r6, #0
  428604:	f818 2b01 	ldrb.w	r2, [r8], #1
  428608:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  42860c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  428610:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  428614:	2909      	cmp	r1, #9
  428616:	d9f5      	bls.n	428604 <_vfiprintf_r+0x444>
  428618:	e646      	b.n	4282a8 <_vfiprintf_r+0xe8>
  42861a:	9608      	str	r6, [sp, #32]
  42861c:	2800      	cmp	r0, #0
  42861e:	f040 8408 	bne.w	428e32 <_vfiprintf_r+0xc72>
  428622:	f043 0310 	orr.w	r3, r3, #16
  428626:	069e      	lsls	r6, r3, #26
  428628:	f100 834c 	bmi.w	428cc4 <_vfiprintf_r+0xb04>
  42862c:	06dd      	lsls	r5, r3, #27
  42862e:	f100 82f3 	bmi.w	428c18 <_vfiprintf_r+0xa58>
  428632:	0658      	lsls	r0, r3, #25
  428634:	f140 82f0 	bpl.w	428c18 <_vfiprintf_r+0xa58>
  428638:	9d07      	ldr	r5, [sp, #28]
  42863a:	f9b5 6000 	ldrsh.w	r6, [r5]
  42863e:	462a      	mov	r2, r5
  428640:	17f7      	asrs	r7, r6, #31
  428642:	3204      	adds	r2, #4
  428644:	4630      	mov	r0, r6
  428646:	4639      	mov	r1, r7
  428648:	9207      	str	r2, [sp, #28]
  42864a:	2800      	cmp	r0, #0
  42864c:	f171 0200 	sbcs.w	r2, r1, #0
  428650:	f2c0 835d 	blt.w	428d0e <_vfiprintf_r+0xb4e>
  428654:	1c61      	adds	r1, r4, #1
  428656:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  42865a:	f04f 0201 	mov.w	r2, #1
  42865e:	f47f aeea 	bne.w	428436 <_vfiprintf_r+0x276>
  428662:	ea56 0107 	orrs.w	r1, r6, r7
  428666:	f000 824d 	beq.w	428b04 <_vfiprintf_r+0x944>
  42866a:	9302      	str	r3, [sp, #8]
  42866c:	2a01      	cmp	r2, #1
  42866e:	f000 828c 	beq.w	428b8a <_vfiprintf_r+0x9ca>
  428672:	2a02      	cmp	r2, #2
  428674:	f040 825c 	bne.w	428b30 <_vfiprintf_r+0x970>
  428678:	980b      	ldr	r0, [sp, #44]	; 0x2c
  42867a:	46cb      	mov	fp, r9
  42867c:	0933      	lsrs	r3, r6, #4
  42867e:	f006 010f 	and.w	r1, r6, #15
  428682:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  428686:	093a      	lsrs	r2, r7, #4
  428688:	461e      	mov	r6, r3
  42868a:	4617      	mov	r7, r2
  42868c:	5c43      	ldrb	r3, [r0, r1]
  42868e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  428692:	ea56 0307 	orrs.w	r3, r6, r7
  428696:	d1f1      	bne.n	42867c <_vfiprintf_r+0x4bc>
  428698:	eba9 030b 	sub.w	r3, r9, fp
  42869c:	9305      	str	r3, [sp, #20]
  42869e:	e6e1      	b.n	428464 <_vfiprintf_r+0x2a4>
  4286a0:	2800      	cmp	r0, #0
  4286a2:	f040 83c0 	bne.w	428e26 <_vfiprintf_r+0xc66>
  4286a6:	0699      	lsls	r1, r3, #26
  4286a8:	f100 8367 	bmi.w	428d7a <_vfiprintf_r+0xbba>
  4286ac:	06da      	lsls	r2, r3, #27
  4286ae:	f100 80f1 	bmi.w	428894 <_vfiprintf_r+0x6d4>
  4286b2:	065b      	lsls	r3, r3, #25
  4286b4:	f140 80ee 	bpl.w	428894 <_vfiprintf_r+0x6d4>
  4286b8:	9a07      	ldr	r2, [sp, #28]
  4286ba:	6813      	ldr	r3, [r2, #0]
  4286bc:	3204      	adds	r2, #4
  4286be:	9207      	str	r2, [sp, #28]
  4286c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4286c4:	801a      	strh	r2, [r3, #0]
  4286c6:	e5b8      	b.n	42823a <_vfiprintf_r+0x7a>
  4286c8:	9807      	ldr	r0, [sp, #28]
  4286ca:	4a3d      	ldr	r2, [pc, #244]	; (4287c0 <_vfiprintf_r+0x600>)
  4286cc:	9608      	str	r6, [sp, #32]
  4286ce:	920b      	str	r2, [sp, #44]	; 0x2c
  4286d0:	6806      	ldr	r6, [r0, #0]
  4286d2:	2278      	movs	r2, #120	; 0x78
  4286d4:	2130      	movs	r1, #48	; 0x30
  4286d6:	3004      	adds	r0, #4
  4286d8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4286dc:	f043 0302 	orr.w	r3, r3, #2
  4286e0:	9007      	str	r0, [sp, #28]
  4286e2:	2700      	movs	r7, #0
  4286e4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4286e8:	2202      	movs	r2, #2
  4286ea:	e69c      	b.n	428426 <_vfiprintf_r+0x266>
  4286ec:	9608      	str	r6, [sp, #32]
  4286ee:	2800      	cmp	r0, #0
  4286f0:	d099      	beq.n	428626 <_vfiprintf_r+0x466>
  4286f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4286f6:	e796      	b.n	428626 <_vfiprintf_r+0x466>
  4286f8:	f898 2000 	ldrb.w	r2, [r8]
  4286fc:	2d00      	cmp	r5, #0
  4286fe:	f47f add1 	bne.w	4282a4 <_vfiprintf_r+0xe4>
  428702:	2001      	movs	r0, #1
  428704:	2520      	movs	r5, #32
  428706:	e5cd      	b.n	4282a4 <_vfiprintf_r+0xe4>
  428708:	f043 0301 	orr.w	r3, r3, #1
  42870c:	f898 2000 	ldrb.w	r2, [r8]
  428710:	e5c8      	b.n	4282a4 <_vfiprintf_r+0xe4>
  428712:	9608      	str	r6, [sp, #32]
  428714:	2800      	cmp	r0, #0
  428716:	f040 8393 	bne.w	428e40 <_vfiprintf_r+0xc80>
  42871a:	4929      	ldr	r1, [pc, #164]	; (4287c0 <_vfiprintf_r+0x600>)
  42871c:	910b      	str	r1, [sp, #44]	; 0x2c
  42871e:	069f      	lsls	r7, r3, #26
  428720:	f100 82e8 	bmi.w	428cf4 <_vfiprintf_r+0xb34>
  428724:	9807      	ldr	r0, [sp, #28]
  428726:	06de      	lsls	r6, r3, #27
  428728:	4601      	mov	r1, r0
  42872a:	f100 8270 	bmi.w	428c0e <_vfiprintf_r+0xa4e>
  42872e:	065d      	lsls	r5, r3, #25
  428730:	f140 826d 	bpl.w	428c0e <_vfiprintf_r+0xa4e>
  428734:	3104      	adds	r1, #4
  428736:	8806      	ldrh	r6, [r0, #0]
  428738:	9107      	str	r1, [sp, #28]
  42873a:	2700      	movs	r7, #0
  42873c:	07d8      	lsls	r0, r3, #31
  42873e:	f140 8222 	bpl.w	428b86 <_vfiprintf_r+0x9c6>
  428742:	ea56 0107 	orrs.w	r1, r6, r7
  428746:	f000 821e 	beq.w	428b86 <_vfiprintf_r+0x9c6>
  42874a:	2130      	movs	r1, #48	; 0x30
  42874c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  428750:	f043 0302 	orr.w	r3, r3, #2
  428754:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  428758:	2202      	movs	r2, #2
  42875a:	e664      	b.n	428426 <_vfiprintf_r+0x266>
  42875c:	9608      	str	r6, [sp, #32]
  42875e:	2800      	cmp	r0, #0
  428760:	f040 836b 	bne.w	428e3a <_vfiprintf_r+0xc7a>
  428764:	4917      	ldr	r1, [pc, #92]	; (4287c4 <_vfiprintf_r+0x604>)
  428766:	910b      	str	r1, [sp, #44]	; 0x2c
  428768:	e7d9      	b.n	42871e <_vfiprintf_r+0x55e>
  42876a:	9907      	ldr	r1, [sp, #28]
  42876c:	9608      	str	r6, [sp, #32]
  42876e:	680a      	ldr	r2, [r1, #0]
  428770:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  428774:	f04f 0000 	mov.w	r0, #0
  428778:	460a      	mov	r2, r1
  42877a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  42877e:	3204      	adds	r2, #4
  428780:	2001      	movs	r0, #1
  428782:	9001      	str	r0, [sp, #4]
  428784:	9207      	str	r2, [sp, #28]
  428786:	9005      	str	r0, [sp, #20]
  428788:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  42878c:	9302      	str	r3, [sp, #8]
  42878e:	2400      	movs	r4, #0
  428790:	e670      	b.n	428474 <_vfiprintf_r+0x2b4>
  428792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  428796:	f898 2000 	ldrb.w	r2, [r8]
  42879a:	e583      	b.n	4282a4 <_vfiprintf_r+0xe4>
  42879c:	f898 2000 	ldrb.w	r2, [r8]
  4287a0:	2a6c      	cmp	r2, #108	; 0x6c
  4287a2:	bf03      	ittte	eq
  4287a4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4287a8:	f043 0320 	orreq.w	r3, r3, #32
  4287ac:	f108 0801 	addeq.w	r8, r8, #1
  4287b0:	f043 0310 	orrne.w	r3, r3, #16
  4287b4:	e576      	b.n	4282a4 <_vfiprintf_r+0xe4>
  4287b6:	bf00      	nop
  4287b8:	00431a2c 	.word	0x00431a2c
  4287bc:	00431a3c 	.word	0x00431a3c
  4287c0:	00431a10 	.word	0x00431a10
  4287c4:	004319fc 	.word	0x004319fc
  4287c8:	9907      	ldr	r1, [sp, #28]
  4287ca:	680e      	ldr	r6, [r1, #0]
  4287cc:	460a      	mov	r2, r1
  4287ce:	2e00      	cmp	r6, #0
  4287d0:	f102 0204 	add.w	r2, r2, #4
  4287d4:	f6ff ae0f 	blt.w	4283f6 <_vfiprintf_r+0x236>
  4287d8:	9207      	str	r2, [sp, #28]
  4287da:	f898 2000 	ldrb.w	r2, [r8]
  4287de:	e561      	b.n	4282a4 <_vfiprintf_r+0xe4>
  4287e0:	f898 2000 	ldrb.w	r2, [r8]
  4287e4:	2001      	movs	r0, #1
  4287e6:	252b      	movs	r5, #43	; 0x2b
  4287e8:	e55c      	b.n	4282a4 <_vfiprintf_r+0xe4>
  4287ea:	9907      	ldr	r1, [sp, #28]
  4287ec:	9608      	str	r6, [sp, #32]
  4287ee:	f8d1 b000 	ldr.w	fp, [r1]
  4287f2:	f04f 0200 	mov.w	r2, #0
  4287f6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4287fa:	1d0e      	adds	r6, r1, #4
  4287fc:	f1bb 0f00 	cmp.w	fp, #0
  428800:	f000 82e5 	beq.w	428dce <_vfiprintf_r+0xc0e>
  428804:	1c67      	adds	r7, r4, #1
  428806:	f000 82c4 	beq.w	428d92 <_vfiprintf_r+0xbd2>
  42880a:	4622      	mov	r2, r4
  42880c:	2100      	movs	r1, #0
  42880e:	4658      	mov	r0, fp
  428810:	9301      	str	r3, [sp, #4]
  428812:	f001 f91d 	bl	429a50 <memchr>
  428816:	9b01      	ldr	r3, [sp, #4]
  428818:	2800      	cmp	r0, #0
  42881a:	f000 82e5 	beq.w	428de8 <_vfiprintf_r+0xc28>
  42881e:	eba0 020b 	sub.w	r2, r0, fp
  428822:	9205      	str	r2, [sp, #20]
  428824:	9607      	str	r6, [sp, #28]
  428826:	9302      	str	r3, [sp, #8]
  428828:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  42882c:	2400      	movs	r4, #0
  42882e:	e619      	b.n	428464 <_vfiprintf_r+0x2a4>
  428830:	f898 2000 	ldrb.w	r2, [r8]
  428834:	2a2a      	cmp	r2, #42	; 0x2a
  428836:	f108 0701 	add.w	r7, r8, #1
  42883a:	f000 82e9 	beq.w	428e10 <_vfiprintf_r+0xc50>
  42883e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  428842:	2909      	cmp	r1, #9
  428844:	46b8      	mov	r8, r7
  428846:	f04f 0400 	mov.w	r4, #0
  42884a:	f63f ad2d 	bhi.w	4282a8 <_vfiprintf_r+0xe8>
  42884e:	f818 2b01 	ldrb.w	r2, [r8], #1
  428852:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  428856:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  42885a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  42885e:	2909      	cmp	r1, #9
  428860:	d9f5      	bls.n	42884e <_vfiprintf_r+0x68e>
  428862:	e521      	b.n	4282a8 <_vfiprintf_r+0xe8>
  428864:	f043 0320 	orr.w	r3, r3, #32
  428868:	f898 2000 	ldrb.w	r2, [r8]
  42886c:	e51a      	b.n	4282a4 <_vfiprintf_r+0xe4>
  42886e:	9608      	str	r6, [sp, #32]
  428870:	2800      	cmp	r0, #0
  428872:	f040 82db 	bne.w	428e2c <_vfiprintf_r+0xc6c>
  428876:	2a00      	cmp	r2, #0
  428878:	f000 80e7 	beq.w	428a4a <_vfiprintf_r+0x88a>
  42887c:	2101      	movs	r1, #1
  42887e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  428882:	f04f 0200 	mov.w	r2, #0
  428886:	9101      	str	r1, [sp, #4]
  428888:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  42888c:	9105      	str	r1, [sp, #20]
  42888e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  428892:	e77b      	b.n	42878c <_vfiprintf_r+0x5cc>
  428894:	9a07      	ldr	r2, [sp, #28]
  428896:	6813      	ldr	r3, [r2, #0]
  428898:	3204      	adds	r2, #4
  42889a:	9207      	str	r2, [sp, #28]
  42889c:	9a03      	ldr	r2, [sp, #12]
  42889e:	601a      	str	r2, [r3, #0]
  4288a0:	e4cb      	b.n	42823a <_vfiprintf_r+0x7a>
  4288a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4288a4:	9904      	ldr	r1, [sp, #16]
  4288a6:	4620      	mov	r0, r4
  4288a8:	f7ff fc4a 	bl	428140 <__sprint_r.part.0>
  4288ac:	2800      	cmp	r0, #0
  4288ae:	f040 8139 	bne.w	428b24 <_vfiprintf_r+0x964>
  4288b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4288b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4288b6:	f101 0c01 	add.w	ip, r1, #1
  4288ba:	46ce      	mov	lr, r9
  4288bc:	e5ff      	b.n	4284be <_vfiprintf_r+0x2fe>
  4288be:	9910      	ldr	r1, [sp, #64]	; 0x40
  4288c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4288c2:	1c48      	adds	r0, r1, #1
  4288c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4288c8:	2d00      	cmp	r5, #0
  4288ca:	f43f ae22 	beq.w	428512 <_vfiprintf_r+0x352>
  4288ce:	3201      	adds	r2, #1
  4288d0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4288d4:	2101      	movs	r1, #1
  4288d6:	2807      	cmp	r0, #7
  4288d8:	9211      	str	r2, [sp, #68]	; 0x44
  4288da:	9010      	str	r0, [sp, #64]	; 0x40
  4288dc:	f8ca 5000 	str.w	r5, [sl]
  4288e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4288e4:	f340 8108 	ble.w	428af8 <_vfiprintf_r+0x938>
  4288e8:	2a00      	cmp	r2, #0
  4288ea:	f040 81bc 	bne.w	428c66 <_vfiprintf_r+0xaa6>
  4288ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4288f0:	2b00      	cmp	r3, #0
  4288f2:	f43f ae1f 	beq.w	428534 <_vfiprintf_r+0x374>
  4288f6:	ab0e      	add	r3, sp, #56	; 0x38
  4288f8:	2202      	movs	r2, #2
  4288fa:	4608      	mov	r0, r1
  4288fc:	931c      	str	r3, [sp, #112]	; 0x70
  4288fe:	921d      	str	r2, [sp, #116]	; 0x74
  428900:	46ca      	mov	sl, r9
  428902:	4601      	mov	r1, r0
  428904:	f10a 0a08 	add.w	sl, sl, #8
  428908:	3001      	adds	r0, #1
  42890a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42890c:	2b80      	cmp	r3, #128	; 0x80
  42890e:	f43f ae19 	beq.w	428544 <_vfiprintf_r+0x384>
  428912:	9b05      	ldr	r3, [sp, #20]
  428914:	1ae4      	subs	r4, r4, r3
  428916:	2c00      	cmp	r4, #0
  428918:	dd2e      	ble.n	428978 <_vfiprintf_r+0x7b8>
  42891a:	2c10      	cmp	r4, #16
  42891c:	4db3      	ldr	r5, [pc, #716]	; (428bec <_vfiprintf_r+0xa2c>)
  42891e:	dd1e      	ble.n	42895e <_vfiprintf_r+0x79e>
  428920:	46d6      	mov	lr, sl
  428922:	2610      	movs	r6, #16
  428924:	9f06      	ldr	r7, [sp, #24]
  428926:	f8dd a010 	ldr.w	sl, [sp, #16]
  42892a:	e006      	b.n	42893a <_vfiprintf_r+0x77a>
  42892c:	1c88      	adds	r0, r1, #2
  42892e:	f10e 0e08 	add.w	lr, lr, #8
  428932:	4619      	mov	r1, r3
  428934:	3c10      	subs	r4, #16
  428936:	2c10      	cmp	r4, #16
  428938:	dd10      	ble.n	42895c <_vfiprintf_r+0x79c>
  42893a:	1c4b      	adds	r3, r1, #1
  42893c:	3210      	adds	r2, #16
  42893e:	2b07      	cmp	r3, #7
  428940:	9211      	str	r2, [sp, #68]	; 0x44
  428942:	e88e 0060 	stmia.w	lr, {r5, r6}
  428946:	9310      	str	r3, [sp, #64]	; 0x40
  428948:	ddf0      	ble.n	42892c <_vfiprintf_r+0x76c>
  42894a:	2a00      	cmp	r2, #0
  42894c:	d165      	bne.n	428a1a <_vfiprintf_r+0x85a>
  42894e:	3c10      	subs	r4, #16
  428950:	2c10      	cmp	r4, #16
  428952:	f04f 0001 	mov.w	r0, #1
  428956:	4611      	mov	r1, r2
  428958:	46ce      	mov	lr, r9
  42895a:	dcee      	bgt.n	42893a <_vfiprintf_r+0x77a>
  42895c:	46f2      	mov	sl, lr
  42895e:	4422      	add	r2, r4
  428960:	2807      	cmp	r0, #7
  428962:	9211      	str	r2, [sp, #68]	; 0x44
  428964:	f8ca 5000 	str.w	r5, [sl]
  428968:	f8ca 4004 	str.w	r4, [sl, #4]
  42896c:	9010      	str	r0, [sp, #64]	; 0x40
  42896e:	f300 8085 	bgt.w	428a7c <_vfiprintf_r+0x8bc>
  428972:	f10a 0a08 	add.w	sl, sl, #8
  428976:	3001      	adds	r0, #1
  428978:	9905      	ldr	r1, [sp, #20]
  42897a:	f8ca b000 	str.w	fp, [sl]
  42897e:	440a      	add	r2, r1
  428980:	2807      	cmp	r0, #7
  428982:	9211      	str	r2, [sp, #68]	; 0x44
  428984:	f8ca 1004 	str.w	r1, [sl, #4]
  428988:	9010      	str	r0, [sp, #64]	; 0x40
  42898a:	f340 8082 	ble.w	428a92 <_vfiprintf_r+0x8d2>
  42898e:	2a00      	cmp	r2, #0
  428990:	f040 8118 	bne.w	428bc4 <_vfiprintf_r+0xa04>
  428994:	9b02      	ldr	r3, [sp, #8]
  428996:	9210      	str	r2, [sp, #64]	; 0x40
  428998:	0758      	lsls	r0, r3, #29
  42899a:	d535      	bpl.n	428a08 <_vfiprintf_r+0x848>
  42899c:	9b08      	ldr	r3, [sp, #32]
  42899e:	9901      	ldr	r1, [sp, #4]
  4289a0:	1a5c      	subs	r4, r3, r1
  4289a2:	2c00      	cmp	r4, #0
  4289a4:	f340 80e7 	ble.w	428b76 <_vfiprintf_r+0x9b6>
  4289a8:	46ca      	mov	sl, r9
  4289aa:	2c10      	cmp	r4, #16
  4289ac:	f340 8218 	ble.w	428de0 <_vfiprintf_r+0xc20>
  4289b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4289b2:	4e8f      	ldr	r6, [pc, #572]	; (428bf0 <_vfiprintf_r+0xa30>)
  4289b4:	9f06      	ldr	r7, [sp, #24]
  4289b6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4289ba:	2510      	movs	r5, #16
  4289bc:	e006      	b.n	4289cc <_vfiprintf_r+0x80c>
  4289be:	1c88      	adds	r0, r1, #2
  4289c0:	f10a 0a08 	add.w	sl, sl, #8
  4289c4:	4619      	mov	r1, r3
  4289c6:	3c10      	subs	r4, #16
  4289c8:	2c10      	cmp	r4, #16
  4289ca:	dd11      	ble.n	4289f0 <_vfiprintf_r+0x830>
  4289cc:	1c4b      	adds	r3, r1, #1
  4289ce:	3210      	adds	r2, #16
  4289d0:	2b07      	cmp	r3, #7
  4289d2:	9211      	str	r2, [sp, #68]	; 0x44
  4289d4:	f8ca 6000 	str.w	r6, [sl]
  4289d8:	f8ca 5004 	str.w	r5, [sl, #4]
  4289dc:	9310      	str	r3, [sp, #64]	; 0x40
  4289de:	ddee      	ble.n	4289be <_vfiprintf_r+0x7fe>
  4289e0:	bb42      	cbnz	r2, 428a34 <_vfiprintf_r+0x874>
  4289e2:	3c10      	subs	r4, #16
  4289e4:	2c10      	cmp	r4, #16
  4289e6:	f04f 0001 	mov.w	r0, #1
  4289ea:	4611      	mov	r1, r2
  4289ec:	46ca      	mov	sl, r9
  4289ee:	dced      	bgt.n	4289cc <_vfiprintf_r+0x80c>
  4289f0:	4422      	add	r2, r4
  4289f2:	2807      	cmp	r0, #7
  4289f4:	9211      	str	r2, [sp, #68]	; 0x44
  4289f6:	f8ca 6000 	str.w	r6, [sl]
  4289fa:	f8ca 4004 	str.w	r4, [sl, #4]
  4289fe:	9010      	str	r0, [sp, #64]	; 0x40
  428a00:	dd51      	ble.n	428aa6 <_vfiprintf_r+0x8e6>
  428a02:	2a00      	cmp	r2, #0
  428a04:	f040 819b 	bne.w	428d3e <_vfiprintf_r+0xb7e>
  428a08:	9b03      	ldr	r3, [sp, #12]
  428a0a:	9a08      	ldr	r2, [sp, #32]
  428a0c:	9901      	ldr	r1, [sp, #4]
  428a0e:	428a      	cmp	r2, r1
  428a10:	bfac      	ite	ge
  428a12:	189b      	addge	r3, r3, r2
  428a14:	185b      	addlt	r3, r3, r1
  428a16:	9303      	str	r3, [sp, #12]
  428a18:	e04e      	b.n	428ab8 <_vfiprintf_r+0x8f8>
  428a1a:	aa0f      	add	r2, sp, #60	; 0x3c
  428a1c:	4651      	mov	r1, sl
  428a1e:	4638      	mov	r0, r7
  428a20:	f7ff fb8e 	bl	428140 <__sprint_r.part.0>
  428a24:	2800      	cmp	r0, #0
  428a26:	f040 813f 	bne.w	428ca8 <_vfiprintf_r+0xae8>
  428a2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  428a2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428a2e:	1c48      	adds	r0, r1, #1
  428a30:	46ce      	mov	lr, r9
  428a32:	e77f      	b.n	428934 <_vfiprintf_r+0x774>
  428a34:	aa0f      	add	r2, sp, #60	; 0x3c
  428a36:	4659      	mov	r1, fp
  428a38:	4638      	mov	r0, r7
  428a3a:	f7ff fb81 	bl	428140 <__sprint_r.part.0>
  428a3e:	b960      	cbnz	r0, 428a5a <_vfiprintf_r+0x89a>
  428a40:	9910      	ldr	r1, [sp, #64]	; 0x40
  428a42:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428a44:	1c48      	adds	r0, r1, #1
  428a46:	46ca      	mov	sl, r9
  428a48:	e7bd      	b.n	4289c6 <_vfiprintf_r+0x806>
  428a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  428a4c:	f8dd b010 	ldr.w	fp, [sp, #16]
  428a50:	2b00      	cmp	r3, #0
  428a52:	f040 81d4 	bne.w	428dfe <_vfiprintf_r+0xc3e>
  428a56:	2300      	movs	r3, #0
  428a58:	9310      	str	r3, [sp, #64]	; 0x40
  428a5a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  428a5e:	f013 0f01 	tst.w	r3, #1
  428a62:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  428a66:	d102      	bne.n	428a6e <_vfiprintf_r+0x8ae>
  428a68:	059a      	lsls	r2, r3, #22
  428a6a:	f140 80de 	bpl.w	428c2a <_vfiprintf_r+0xa6a>
  428a6e:	065b      	lsls	r3, r3, #25
  428a70:	f53f acb2 	bmi.w	4283d8 <_vfiprintf_r+0x218>
  428a74:	9803      	ldr	r0, [sp, #12]
  428a76:	b02d      	add	sp, #180	; 0xb4
  428a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428a7c:	2a00      	cmp	r2, #0
  428a7e:	f040 8106 	bne.w	428c8e <_vfiprintf_r+0xace>
  428a82:	9a05      	ldr	r2, [sp, #20]
  428a84:	921d      	str	r2, [sp, #116]	; 0x74
  428a86:	2301      	movs	r3, #1
  428a88:	9211      	str	r2, [sp, #68]	; 0x44
  428a8a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  428a8e:	9310      	str	r3, [sp, #64]	; 0x40
  428a90:	46ca      	mov	sl, r9
  428a92:	f10a 0a08 	add.w	sl, sl, #8
  428a96:	9b02      	ldr	r3, [sp, #8]
  428a98:	0759      	lsls	r1, r3, #29
  428a9a:	d504      	bpl.n	428aa6 <_vfiprintf_r+0x8e6>
  428a9c:	9b08      	ldr	r3, [sp, #32]
  428a9e:	9901      	ldr	r1, [sp, #4]
  428aa0:	1a5c      	subs	r4, r3, r1
  428aa2:	2c00      	cmp	r4, #0
  428aa4:	dc81      	bgt.n	4289aa <_vfiprintf_r+0x7ea>
  428aa6:	9b03      	ldr	r3, [sp, #12]
  428aa8:	9908      	ldr	r1, [sp, #32]
  428aaa:	9801      	ldr	r0, [sp, #4]
  428aac:	4281      	cmp	r1, r0
  428aae:	bfac      	ite	ge
  428ab0:	185b      	addge	r3, r3, r1
  428ab2:	181b      	addlt	r3, r3, r0
  428ab4:	9303      	str	r3, [sp, #12]
  428ab6:	bb72      	cbnz	r2, 428b16 <_vfiprintf_r+0x956>
  428ab8:	2300      	movs	r3, #0
  428aba:	9310      	str	r3, [sp, #64]	; 0x40
  428abc:	46ca      	mov	sl, r9
  428abe:	f7ff bbbc 	b.w	42823a <_vfiprintf_r+0x7a>
  428ac2:	aa0f      	add	r2, sp, #60	; 0x3c
  428ac4:	9904      	ldr	r1, [sp, #16]
  428ac6:	4620      	mov	r0, r4
  428ac8:	f7ff fb3a 	bl	428140 <__sprint_r.part.0>
  428acc:	bb50      	cbnz	r0, 428b24 <_vfiprintf_r+0x964>
  428ace:	9910      	ldr	r1, [sp, #64]	; 0x40
  428ad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428ad2:	f101 0e01 	add.w	lr, r1, #1
  428ad6:	46cc      	mov	ip, r9
  428ad8:	e548      	b.n	42856c <_vfiprintf_r+0x3ac>
  428ada:	2a00      	cmp	r2, #0
  428adc:	f040 8140 	bne.w	428d60 <_vfiprintf_r+0xba0>
  428ae0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  428ae4:	2900      	cmp	r1, #0
  428ae6:	f000 811b 	beq.w	428d20 <_vfiprintf_r+0xb60>
  428aea:	2201      	movs	r2, #1
  428aec:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  428af0:	4610      	mov	r0, r2
  428af2:	921d      	str	r2, [sp, #116]	; 0x74
  428af4:	911c      	str	r1, [sp, #112]	; 0x70
  428af6:	46ca      	mov	sl, r9
  428af8:	4601      	mov	r1, r0
  428afa:	f10a 0a08 	add.w	sl, sl, #8
  428afe:	3001      	adds	r0, #1
  428b00:	e507      	b.n	428512 <_vfiprintf_r+0x352>
  428b02:	9b02      	ldr	r3, [sp, #8]
  428b04:	2a01      	cmp	r2, #1
  428b06:	f000 8098 	beq.w	428c3a <_vfiprintf_r+0xa7a>
  428b0a:	2a02      	cmp	r2, #2
  428b0c:	d10d      	bne.n	428b2a <_vfiprintf_r+0x96a>
  428b0e:	9302      	str	r3, [sp, #8]
  428b10:	2600      	movs	r6, #0
  428b12:	2700      	movs	r7, #0
  428b14:	e5b0      	b.n	428678 <_vfiprintf_r+0x4b8>
  428b16:	aa0f      	add	r2, sp, #60	; 0x3c
  428b18:	9904      	ldr	r1, [sp, #16]
  428b1a:	9806      	ldr	r0, [sp, #24]
  428b1c:	f7ff fb10 	bl	428140 <__sprint_r.part.0>
  428b20:	2800      	cmp	r0, #0
  428b22:	d0c9      	beq.n	428ab8 <_vfiprintf_r+0x8f8>
  428b24:	f8dd b010 	ldr.w	fp, [sp, #16]
  428b28:	e797      	b.n	428a5a <_vfiprintf_r+0x89a>
  428b2a:	9302      	str	r3, [sp, #8]
  428b2c:	2600      	movs	r6, #0
  428b2e:	2700      	movs	r7, #0
  428b30:	4649      	mov	r1, r9
  428b32:	e000      	b.n	428b36 <_vfiprintf_r+0x976>
  428b34:	4659      	mov	r1, fp
  428b36:	08f2      	lsrs	r2, r6, #3
  428b38:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  428b3c:	08f8      	lsrs	r0, r7, #3
  428b3e:	f006 0307 	and.w	r3, r6, #7
  428b42:	4607      	mov	r7, r0
  428b44:	4616      	mov	r6, r2
  428b46:	3330      	adds	r3, #48	; 0x30
  428b48:	ea56 0207 	orrs.w	r2, r6, r7
  428b4c:	f801 3c01 	strb.w	r3, [r1, #-1]
  428b50:	f101 3bff 	add.w	fp, r1, #4294967295
  428b54:	d1ee      	bne.n	428b34 <_vfiprintf_r+0x974>
  428b56:	9a02      	ldr	r2, [sp, #8]
  428b58:	07d6      	lsls	r6, r2, #31
  428b5a:	f57f ad9d 	bpl.w	428698 <_vfiprintf_r+0x4d8>
  428b5e:	2b30      	cmp	r3, #48	; 0x30
  428b60:	f43f ad9a 	beq.w	428698 <_vfiprintf_r+0x4d8>
  428b64:	3902      	subs	r1, #2
  428b66:	2330      	movs	r3, #48	; 0x30
  428b68:	f80b 3c01 	strb.w	r3, [fp, #-1]
  428b6c:	eba9 0301 	sub.w	r3, r9, r1
  428b70:	9305      	str	r3, [sp, #20]
  428b72:	468b      	mov	fp, r1
  428b74:	e476      	b.n	428464 <_vfiprintf_r+0x2a4>
  428b76:	9b03      	ldr	r3, [sp, #12]
  428b78:	9a08      	ldr	r2, [sp, #32]
  428b7a:	428a      	cmp	r2, r1
  428b7c:	bfac      	ite	ge
  428b7e:	189b      	addge	r3, r3, r2
  428b80:	185b      	addlt	r3, r3, r1
  428b82:	9303      	str	r3, [sp, #12]
  428b84:	e798      	b.n	428ab8 <_vfiprintf_r+0x8f8>
  428b86:	2202      	movs	r2, #2
  428b88:	e44d      	b.n	428426 <_vfiprintf_r+0x266>
  428b8a:	2f00      	cmp	r7, #0
  428b8c:	bf08      	it	eq
  428b8e:	2e0a      	cmpeq	r6, #10
  428b90:	d352      	bcc.n	428c38 <_vfiprintf_r+0xa78>
  428b92:	46cb      	mov	fp, r9
  428b94:	4630      	mov	r0, r6
  428b96:	4639      	mov	r1, r7
  428b98:	220a      	movs	r2, #10
  428b9a:	2300      	movs	r3, #0
  428b9c:	f7fe f9a8 	bl	426ef0 <__aeabi_uldivmod>
  428ba0:	3230      	adds	r2, #48	; 0x30
  428ba2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  428ba6:	4630      	mov	r0, r6
  428ba8:	4639      	mov	r1, r7
  428baa:	2300      	movs	r3, #0
  428bac:	220a      	movs	r2, #10
  428bae:	f7fe f99f 	bl	426ef0 <__aeabi_uldivmod>
  428bb2:	4606      	mov	r6, r0
  428bb4:	460f      	mov	r7, r1
  428bb6:	ea56 0307 	orrs.w	r3, r6, r7
  428bba:	d1eb      	bne.n	428b94 <_vfiprintf_r+0x9d4>
  428bbc:	e56c      	b.n	428698 <_vfiprintf_r+0x4d8>
  428bbe:	9405      	str	r4, [sp, #20]
  428bc0:	46cb      	mov	fp, r9
  428bc2:	e44f      	b.n	428464 <_vfiprintf_r+0x2a4>
  428bc4:	aa0f      	add	r2, sp, #60	; 0x3c
  428bc6:	9904      	ldr	r1, [sp, #16]
  428bc8:	9806      	ldr	r0, [sp, #24]
  428bca:	f7ff fab9 	bl	428140 <__sprint_r.part.0>
  428bce:	2800      	cmp	r0, #0
  428bd0:	d1a8      	bne.n	428b24 <_vfiprintf_r+0x964>
  428bd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428bd4:	46ca      	mov	sl, r9
  428bd6:	e75e      	b.n	428a96 <_vfiprintf_r+0x8d6>
  428bd8:	aa0f      	add	r2, sp, #60	; 0x3c
  428bda:	9904      	ldr	r1, [sp, #16]
  428bdc:	9806      	ldr	r0, [sp, #24]
  428bde:	f7ff faaf 	bl	428140 <__sprint_r.part.0>
  428be2:	2800      	cmp	r0, #0
  428be4:	d19e      	bne.n	428b24 <_vfiprintf_r+0x964>
  428be6:	46ca      	mov	sl, r9
  428be8:	f7ff bbc0 	b.w	42836c <_vfiprintf_r+0x1ac>
  428bec:	00431a3c 	.word	0x00431a3c
  428bf0:	00431a2c 	.word	0x00431a2c
  428bf4:	3104      	adds	r1, #4
  428bf6:	6816      	ldr	r6, [r2, #0]
  428bf8:	9107      	str	r1, [sp, #28]
  428bfa:	2201      	movs	r2, #1
  428bfc:	2700      	movs	r7, #0
  428bfe:	e412      	b.n	428426 <_vfiprintf_r+0x266>
  428c00:	9807      	ldr	r0, [sp, #28]
  428c02:	4601      	mov	r1, r0
  428c04:	3104      	adds	r1, #4
  428c06:	6806      	ldr	r6, [r0, #0]
  428c08:	9107      	str	r1, [sp, #28]
  428c0a:	2700      	movs	r7, #0
  428c0c:	e40b      	b.n	428426 <_vfiprintf_r+0x266>
  428c0e:	680e      	ldr	r6, [r1, #0]
  428c10:	3104      	adds	r1, #4
  428c12:	9107      	str	r1, [sp, #28]
  428c14:	2700      	movs	r7, #0
  428c16:	e591      	b.n	42873c <_vfiprintf_r+0x57c>
  428c18:	9907      	ldr	r1, [sp, #28]
  428c1a:	680e      	ldr	r6, [r1, #0]
  428c1c:	460a      	mov	r2, r1
  428c1e:	17f7      	asrs	r7, r6, #31
  428c20:	3204      	adds	r2, #4
  428c22:	9207      	str	r2, [sp, #28]
  428c24:	4630      	mov	r0, r6
  428c26:	4639      	mov	r1, r7
  428c28:	e50f      	b.n	42864a <_vfiprintf_r+0x48a>
  428c2a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  428c2e:	f000 fe7f 	bl	429930 <__retarget_lock_release_recursive>
  428c32:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  428c36:	e71a      	b.n	428a6e <_vfiprintf_r+0x8ae>
  428c38:	9b02      	ldr	r3, [sp, #8]
  428c3a:	9302      	str	r3, [sp, #8]
  428c3c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  428c40:	3630      	adds	r6, #48	; 0x30
  428c42:	2301      	movs	r3, #1
  428c44:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  428c48:	9305      	str	r3, [sp, #20]
  428c4a:	e40b      	b.n	428464 <_vfiprintf_r+0x2a4>
  428c4c:	aa0f      	add	r2, sp, #60	; 0x3c
  428c4e:	9904      	ldr	r1, [sp, #16]
  428c50:	9806      	ldr	r0, [sp, #24]
  428c52:	f7ff fa75 	bl	428140 <__sprint_r.part.0>
  428c56:	2800      	cmp	r0, #0
  428c58:	f47f af64 	bne.w	428b24 <_vfiprintf_r+0x964>
  428c5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  428c5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428c60:	1c48      	adds	r0, r1, #1
  428c62:	46ca      	mov	sl, r9
  428c64:	e651      	b.n	42890a <_vfiprintf_r+0x74a>
  428c66:	aa0f      	add	r2, sp, #60	; 0x3c
  428c68:	9904      	ldr	r1, [sp, #16]
  428c6a:	9806      	ldr	r0, [sp, #24]
  428c6c:	f7ff fa68 	bl	428140 <__sprint_r.part.0>
  428c70:	2800      	cmp	r0, #0
  428c72:	f47f af57 	bne.w	428b24 <_vfiprintf_r+0x964>
  428c76:	9910      	ldr	r1, [sp, #64]	; 0x40
  428c78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428c7a:	1c48      	adds	r0, r1, #1
  428c7c:	46ca      	mov	sl, r9
  428c7e:	e448      	b.n	428512 <_vfiprintf_r+0x352>
  428c80:	2a00      	cmp	r2, #0
  428c82:	f040 8091 	bne.w	428da8 <_vfiprintf_r+0xbe8>
  428c86:	2001      	movs	r0, #1
  428c88:	4611      	mov	r1, r2
  428c8a:	46ca      	mov	sl, r9
  428c8c:	e641      	b.n	428912 <_vfiprintf_r+0x752>
  428c8e:	aa0f      	add	r2, sp, #60	; 0x3c
  428c90:	9904      	ldr	r1, [sp, #16]
  428c92:	9806      	ldr	r0, [sp, #24]
  428c94:	f7ff fa54 	bl	428140 <__sprint_r.part.0>
  428c98:	2800      	cmp	r0, #0
  428c9a:	f47f af43 	bne.w	428b24 <_vfiprintf_r+0x964>
  428c9e:	9810      	ldr	r0, [sp, #64]	; 0x40
  428ca0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428ca2:	3001      	adds	r0, #1
  428ca4:	46ca      	mov	sl, r9
  428ca6:	e667      	b.n	428978 <_vfiprintf_r+0x7b8>
  428ca8:	46d3      	mov	fp, sl
  428caa:	e6d6      	b.n	428a5a <_vfiprintf_r+0x89a>
  428cac:	9e07      	ldr	r6, [sp, #28]
  428cae:	3607      	adds	r6, #7
  428cb0:	f026 0207 	bic.w	r2, r6, #7
  428cb4:	f102 0108 	add.w	r1, r2, #8
  428cb8:	e9d2 6700 	ldrd	r6, r7, [r2]
  428cbc:	9107      	str	r1, [sp, #28]
  428cbe:	2201      	movs	r2, #1
  428cc0:	f7ff bbb1 	b.w	428426 <_vfiprintf_r+0x266>
  428cc4:	9e07      	ldr	r6, [sp, #28]
  428cc6:	3607      	adds	r6, #7
  428cc8:	f026 0607 	bic.w	r6, r6, #7
  428ccc:	e9d6 0100 	ldrd	r0, r1, [r6]
  428cd0:	f106 0208 	add.w	r2, r6, #8
  428cd4:	9207      	str	r2, [sp, #28]
  428cd6:	4606      	mov	r6, r0
  428cd8:	460f      	mov	r7, r1
  428cda:	e4b6      	b.n	42864a <_vfiprintf_r+0x48a>
  428cdc:	9e07      	ldr	r6, [sp, #28]
  428cde:	3607      	adds	r6, #7
  428ce0:	f026 0207 	bic.w	r2, r6, #7
  428ce4:	f102 0108 	add.w	r1, r2, #8
  428ce8:	e9d2 6700 	ldrd	r6, r7, [r2]
  428cec:	9107      	str	r1, [sp, #28]
  428cee:	2200      	movs	r2, #0
  428cf0:	f7ff bb99 	b.w	428426 <_vfiprintf_r+0x266>
  428cf4:	9e07      	ldr	r6, [sp, #28]
  428cf6:	3607      	adds	r6, #7
  428cf8:	f026 0107 	bic.w	r1, r6, #7
  428cfc:	f101 0008 	add.w	r0, r1, #8
  428d00:	9007      	str	r0, [sp, #28]
  428d02:	e9d1 6700 	ldrd	r6, r7, [r1]
  428d06:	e519      	b.n	42873c <_vfiprintf_r+0x57c>
  428d08:	46cb      	mov	fp, r9
  428d0a:	f7ff bbab 	b.w	428464 <_vfiprintf_r+0x2a4>
  428d0e:	252d      	movs	r5, #45	; 0x2d
  428d10:	4276      	negs	r6, r6
  428d12:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  428d16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  428d1a:	2201      	movs	r2, #1
  428d1c:	f7ff bb88 	b.w	428430 <_vfiprintf_r+0x270>
  428d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  428d22:	b9b3      	cbnz	r3, 428d52 <_vfiprintf_r+0xb92>
  428d24:	4611      	mov	r1, r2
  428d26:	2001      	movs	r0, #1
  428d28:	46ca      	mov	sl, r9
  428d2a:	e5f2      	b.n	428912 <_vfiprintf_r+0x752>
  428d2c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  428d30:	f000 fdfe 	bl	429930 <__retarget_lock_release_recursive>
  428d34:	f04f 33ff 	mov.w	r3, #4294967295
  428d38:	9303      	str	r3, [sp, #12]
  428d3a:	f7ff bb50 	b.w	4283de <_vfiprintf_r+0x21e>
  428d3e:	aa0f      	add	r2, sp, #60	; 0x3c
  428d40:	9904      	ldr	r1, [sp, #16]
  428d42:	9806      	ldr	r0, [sp, #24]
  428d44:	f7ff f9fc 	bl	428140 <__sprint_r.part.0>
  428d48:	2800      	cmp	r0, #0
  428d4a:	f47f aeeb 	bne.w	428b24 <_vfiprintf_r+0x964>
  428d4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428d50:	e6a9      	b.n	428aa6 <_vfiprintf_r+0x8e6>
  428d52:	ab0e      	add	r3, sp, #56	; 0x38
  428d54:	2202      	movs	r2, #2
  428d56:	931c      	str	r3, [sp, #112]	; 0x70
  428d58:	921d      	str	r2, [sp, #116]	; 0x74
  428d5a:	2001      	movs	r0, #1
  428d5c:	46ca      	mov	sl, r9
  428d5e:	e5d0      	b.n	428902 <_vfiprintf_r+0x742>
  428d60:	aa0f      	add	r2, sp, #60	; 0x3c
  428d62:	9904      	ldr	r1, [sp, #16]
  428d64:	9806      	ldr	r0, [sp, #24]
  428d66:	f7ff f9eb 	bl	428140 <__sprint_r.part.0>
  428d6a:	2800      	cmp	r0, #0
  428d6c:	f47f aeda 	bne.w	428b24 <_vfiprintf_r+0x964>
  428d70:	9910      	ldr	r1, [sp, #64]	; 0x40
  428d72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428d74:	1c48      	adds	r0, r1, #1
  428d76:	46ca      	mov	sl, r9
  428d78:	e5a4      	b.n	4288c4 <_vfiprintf_r+0x704>
  428d7a:	9a07      	ldr	r2, [sp, #28]
  428d7c:	9903      	ldr	r1, [sp, #12]
  428d7e:	6813      	ldr	r3, [r2, #0]
  428d80:	17cd      	asrs	r5, r1, #31
  428d82:	4608      	mov	r0, r1
  428d84:	3204      	adds	r2, #4
  428d86:	4629      	mov	r1, r5
  428d88:	9207      	str	r2, [sp, #28]
  428d8a:	e9c3 0100 	strd	r0, r1, [r3]
  428d8e:	f7ff ba54 	b.w	42823a <_vfiprintf_r+0x7a>
  428d92:	4658      	mov	r0, fp
  428d94:	9607      	str	r6, [sp, #28]
  428d96:	9302      	str	r3, [sp, #8]
  428d98:	f7ff f932 	bl	428000 <strlen>
  428d9c:	2400      	movs	r4, #0
  428d9e:	9005      	str	r0, [sp, #20]
  428da0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  428da4:	f7ff bb5e 	b.w	428464 <_vfiprintf_r+0x2a4>
  428da8:	aa0f      	add	r2, sp, #60	; 0x3c
  428daa:	9904      	ldr	r1, [sp, #16]
  428dac:	9806      	ldr	r0, [sp, #24]
  428dae:	f7ff f9c7 	bl	428140 <__sprint_r.part.0>
  428db2:	2800      	cmp	r0, #0
  428db4:	f47f aeb6 	bne.w	428b24 <_vfiprintf_r+0x964>
  428db8:	9910      	ldr	r1, [sp, #64]	; 0x40
  428dba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428dbc:	1c48      	adds	r0, r1, #1
  428dbe:	46ca      	mov	sl, r9
  428dc0:	e5a7      	b.n	428912 <_vfiprintf_r+0x752>
  428dc2:	9910      	ldr	r1, [sp, #64]	; 0x40
  428dc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428dc6:	4e20      	ldr	r6, [pc, #128]	; (428e48 <_vfiprintf_r+0xc88>)
  428dc8:	3101      	adds	r1, #1
  428dca:	f7ff bb90 	b.w	4284ee <_vfiprintf_r+0x32e>
  428dce:	2c06      	cmp	r4, #6
  428dd0:	bf28      	it	cs
  428dd2:	2406      	movcs	r4, #6
  428dd4:	9405      	str	r4, [sp, #20]
  428dd6:	9607      	str	r6, [sp, #28]
  428dd8:	9401      	str	r4, [sp, #4]
  428dda:	f8df b070 	ldr.w	fp, [pc, #112]	; 428e4c <_vfiprintf_r+0xc8c>
  428dde:	e4d5      	b.n	42878c <_vfiprintf_r+0x5cc>
  428de0:	9810      	ldr	r0, [sp, #64]	; 0x40
  428de2:	4e19      	ldr	r6, [pc, #100]	; (428e48 <_vfiprintf_r+0xc88>)
  428de4:	3001      	adds	r0, #1
  428de6:	e603      	b.n	4289f0 <_vfiprintf_r+0x830>
  428de8:	9405      	str	r4, [sp, #20]
  428dea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  428dee:	9607      	str	r6, [sp, #28]
  428df0:	9302      	str	r3, [sp, #8]
  428df2:	4604      	mov	r4, r0
  428df4:	f7ff bb36 	b.w	428464 <_vfiprintf_r+0x2a4>
  428df8:	4686      	mov	lr, r0
  428dfa:	f7ff bbce 	b.w	42859a <_vfiprintf_r+0x3da>
  428dfe:	9806      	ldr	r0, [sp, #24]
  428e00:	aa0f      	add	r2, sp, #60	; 0x3c
  428e02:	4659      	mov	r1, fp
  428e04:	f7ff f99c 	bl	428140 <__sprint_r.part.0>
  428e08:	2800      	cmp	r0, #0
  428e0a:	f43f ae24 	beq.w	428a56 <_vfiprintf_r+0x896>
  428e0e:	e624      	b.n	428a5a <_vfiprintf_r+0x89a>
  428e10:	9907      	ldr	r1, [sp, #28]
  428e12:	f898 2001 	ldrb.w	r2, [r8, #1]
  428e16:	680c      	ldr	r4, [r1, #0]
  428e18:	3104      	adds	r1, #4
  428e1a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  428e1e:	46b8      	mov	r8, r7
  428e20:	9107      	str	r1, [sp, #28]
  428e22:	f7ff ba3f 	b.w	4282a4 <_vfiprintf_r+0xe4>
  428e26:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  428e2a:	e43c      	b.n	4286a6 <_vfiprintf_r+0x4e6>
  428e2c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  428e30:	e521      	b.n	428876 <_vfiprintf_r+0x6b6>
  428e32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  428e36:	f7ff bbf4 	b.w	428622 <_vfiprintf_r+0x462>
  428e3a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  428e3e:	e491      	b.n	428764 <_vfiprintf_r+0x5a4>
  428e40:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  428e44:	e469      	b.n	42871a <_vfiprintf_r+0x55a>
  428e46:	bf00      	nop
  428e48:	00431a2c 	.word	0x00431a2c
  428e4c:	00431a24 	.word	0x00431a24

00428e50 <__sbprintf>:
  428e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  428e54:	460c      	mov	r4, r1
  428e56:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  428e5a:	8989      	ldrh	r1, [r1, #12]
  428e5c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  428e5e:	89e5      	ldrh	r5, [r4, #14]
  428e60:	9619      	str	r6, [sp, #100]	; 0x64
  428e62:	f021 0102 	bic.w	r1, r1, #2
  428e66:	4606      	mov	r6, r0
  428e68:	69e0      	ldr	r0, [r4, #28]
  428e6a:	f8ad 100c 	strh.w	r1, [sp, #12]
  428e6e:	4617      	mov	r7, r2
  428e70:	f44f 6180 	mov.w	r1, #1024	; 0x400
  428e74:	6a62      	ldr	r2, [r4, #36]	; 0x24
  428e76:	f8ad 500e 	strh.w	r5, [sp, #14]
  428e7a:	4698      	mov	r8, r3
  428e7c:	ad1a      	add	r5, sp, #104	; 0x68
  428e7e:	2300      	movs	r3, #0
  428e80:	9007      	str	r0, [sp, #28]
  428e82:	a816      	add	r0, sp, #88	; 0x58
  428e84:	9209      	str	r2, [sp, #36]	; 0x24
  428e86:	9306      	str	r3, [sp, #24]
  428e88:	9500      	str	r5, [sp, #0]
  428e8a:	9504      	str	r5, [sp, #16]
  428e8c:	9102      	str	r1, [sp, #8]
  428e8e:	9105      	str	r1, [sp, #20]
  428e90:	f000 fd48 	bl	429924 <__retarget_lock_init_recursive>
  428e94:	4643      	mov	r3, r8
  428e96:	463a      	mov	r2, r7
  428e98:	4669      	mov	r1, sp
  428e9a:	4630      	mov	r0, r6
  428e9c:	f7ff f990 	bl	4281c0 <_vfiprintf_r>
  428ea0:	1e05      	subs	r5, r0, #0
  428ea2:	db07      	blt.n	428eb4 <__sbprintf+0x64>
  428ea4:	4630      	mov	r0, r6
  428ea6:	4669      	mov	r1, sp
  428ea8:	f000 f928 	bl	4290fc <_fflush_r>
  428eac:	2800      	cmp	r0, #0
  428eae:	bf18      	it	ne
  428eb0:	f04f 35ff 	movne.w	r5, #4294967295
  428eb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  428eb8:	065b      	lsls	r3, r3, #25
  428eba:	d503      	bpl.n	428ec4 <__sbprintf+0x74>
  428ebc:	89a3      	ldrh	r3, [r4, #12]
  428ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  428ec2:	81a3      	strh	r3, [r4, #12]
  428ec4:	9816      	ldr	r0, [sp, #88]	; 0x58
  428ec6:	f000 fd2f 	bl	429928 <__retarget_lock_close_recursive>
  428eca:	4628      	mov	r0, r5
  428ecc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  428ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00428ed4 <__swsetup_r>:
  428ed4:	b538      	push	{r3, r4, r5, lr}
  428ed6:	4b30      	ldr	r3, [pc, #192]	; (428f98 <__swsetup_r+0xc4>)
  428ed8:	681b      	ldr	r3, [r3, #0]
  428eda:	4605      	mov	r5, r0
  428edc:	460c      	mov	r4, r1
  428ede:	b113      	cbz	r3, 428ee6 <__swsetup_r+0x12>
  428ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  428ee2:	2a00      	cmp	r2, #0
  428ee4:	d038      	beq.n	428f58 <__swsetup_r+0x84>
  428ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  428eea:	b293      	uxth	r3, r2
  428eec:	0718      	lsls	r0, r3, #28
  428eee:	d50c      	bpl.n	428f0a <__swsetup_r+0x36>
  428ef0:	6920      	ldr	r0, [r4, #16]
  428ef2:	b1a8      	cbz	r0, 428f20 <__swsetup_r+0x4c>
  428ef4:	f013 0201 	ands.w	r2, r3, #1
  428ef8:	d01e      	beq.n	428f38 <__swsetup_r+0x64>
  428efa:	6963      	ldr	r3, [r4, #20]
  428efc:	2200      	movs	r2, #0
  428efe:	425b      	negs	r3, r3
  428f00:	61a3      	str	r3, [r4, #24]
  428f02:	60a2      	str	r2, [r4, #8]
  428f04:	b1f0      	cbz	r0, 428f44 <__swsetup_r+0x70>
  428f06:	2000      	movs	r0, #0
  428f08:	bd38      	pop	{r3, r4, r5, pc}
  428f0a:	06d9      	lsls	r1, r3, #27
  428f0c:	d53c      	bpl.n	428f88 <__swsetup_r+0xb4>
  428f0e:	0758      	lsls	r0, r3, #29
  428f10:	d426      	bmi.n	428f60 <__swsetup_r+0x8c>
  428f12:	6920      	ldr	r0, [r4, #16]
  428f14:	f042 0308 	orr.w	r3, r2, #8
  428f18:	81a3      	strh	r3, [r4, #12]
  428f1a:	b29b      	uxth	r3, r3
  428f1c:	2800      	cmp	r0, #0
  428f1e:	d1e9      	bne.n	428ef4 <__swsetup_r+0x20>
  428f20:	f403 7220 	and.w	r2, r3, #640	; 0x280
  428f24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  428f28:	d0e4      	beq.n	428ef4 <__swsetup_r+0x20>
  428f2a:	4628      	mov	r0, r5
  428f2c:	4621      	mov	r1, r4
  428f2e:	f000 fd2f 	bl	429990 <__smakebuf_r>
  428f32:	89a3      	ldrh	r3, [r4, #12]
  428f34:	6920      	ldr	r0, [r4, #16]
  428f36:	e7dd      	b.n	428ef4 <__swsetup_r+0x20>
  428f38:	0799      	lsls	r1, r3, #30
  428f3a:	bf58      	it	pl
  428f3c:	6962      	ldrpl	r2, [r4, #20]
  428f3e:	60a2      	str	r2, [r4, #8]
  428f40:	2800      	cmp	r0, #0
  428f42:	d1e0      	bne.n	428f06 <__swsetup_r+0x32>
  428f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  428f48:	061a      	lsls	r2, r3, #24
  428f4a:	d5dd      	bpl.n	428f08 <__swsetup_r+0x34>
  428f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  428f50:	81a3      	strh	r3, [r4, #12]
  428f52:	f04f 30ff 	mov.w	r0, #4294967295
  428f56:	bd38      	pop	{r3, r4, r5, pc}
  428f58:	4618      	mov	r0, r3
  428f5a:	f000 f927 	bl	4291ac <__sinit>
  428f5e:	e7c2      	b.n	428ee6 <__swsetup_r+0x12>
  428f60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  428f62:	b151      	cbz	r1, 428f7a <__swsetup_r+0xa6>
  428f64:	f104 0340 	add.w	r3, r4, #64	; 0x40
  428f68:	4299      	cmp	r1, r3
  428f6a:	d004      	beq.n	428f76 <__swsetup_r+0xa2>
  428f6c:	4628      	mov	r0, r5
  428f6e:	f000 fa43 	bl	4293f8 <_free_r>
  428f72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  428f76:	2300      	movs	r3, #0
  428f78:	6323      	str	r3, [r4, #48]	; 0x30
  428f7a:	2300      	movs	r3, #0
  428f7c:	6920      	ldr	r0, [r4, #16]
  428f7e:	6063      	str	r3, [r4, #4]
  428f80:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  428f84:	6020      	str	r0, [r4, #0]
  428f86:	e7c5      	b.n	428f14 <__swsetup_r+0x40>
  428f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  428f8c:	2309      	movs	r3, #9
  428f8e:	602b      	str	r3, [r5, #0]
  428f90:	f04f 30ff 	mov.w	r0, #4294967295
  428f94:	81a2      	strh	r2, [r4, #12]
  428f96:	bd38      	pop	{r3, r4, r5, pc}
  428f98:	204000ec 	.word	0x204000ec

00428f9c <register_fini>:
  428f9c:	4b02      	ldr	r3, [pc, #8]	; (428fa8 <register_fini+0xc>)
  428f9e:	b113      	cbz	r3, 428fa6 <register_fini+0xa>
  428fa0:	4802      	ldr	r0, [pc, #8]	; (428fac <register_fini+0x10>)
  428fa2:	f000 b805 	b.w	428fb0 <atexit>
  428fa6:	4770      	bx	lr
  428fa8:	00000000 	.word	0x00000000
  428fac:	0042921d 	.word	0x0042921d

00428fb0 <atexit>:
  428fb0:	2300      	movs	r3, #0
  428fb2:	4601      	mov	r1, r0
  428fb4:	461a      	mov	r2, r3
  428fb6:	4618      	mov	r0, r3
  428fb8:	f001 b88e 	b.w	42a0d8 <__register_exitproc>

00428fbc <__sflush_r>:
  428fbc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  428fc0:	b29a      	uxth	r2, r3
  428fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  428fc6:	460d      	mov	r5, r1
  428fc8:	0711      	lsls	r1, r2, #28
  428fca:	4680      	mov	r8, r0
  428fcc:	d43a      	bmi.n	429044 <__sflush_r+0x88>
  428fce:	686a      	ldr	r2, [r5, #4]
  428fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  428fd4:	2a00      	cmp	r2, #0
  428fd6:	81ab      	strh	r3, [r5, #12]
  428fd8:	dd6f      	ble.n	4290ba <__sflush_r+0xfe>
  428fda:	6aac      	ldr	r4, [r5, #40]	; 0x28
  428fdc:	2c00      	cmp	r4, #0
  428fde:	d049      	beq.n	429074 <__sflush_r+0xb8>
  428fe0:	2200      	movs	r2, #0
  428fe2:	b29b      	uxth	r3, r3
  428fe4:	f8d8 6000 	ldr.w	r6, [r8]
  428fe8:	f8c8 2000 	str.w	r2, [r8]
  428fec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  428ff0:	d067      	beq.n	4290c2 <__sflush_r+0x106>
  428ff2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  428ff4:	075f      	lsls	r7, r3, #29
  428ff6:	d505      	bpl.n	429004 <__sflush_r+0x48>
  428ff8:	6869      	ldr	r1, [r5, #4]
  428ffa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  428ffc:	1a52      	subs	r2, r2, r1
  428ffe:	b10b      	cbz	r3, 429004 <__sflush_r+0x48>
  429000:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  429002:	1ad2      	subs	r2, r2, r3
  429004:	2300      	movs	r3, #0
  429006:	69e9      	ldr	r1, [r5, #28]
  429008:	4640      	mov	r0, r8
  42900a:	47a0      	blx	r4
  42900c:	1c44      	adds	r4, r0, #1
  42900e:	d03c      	beq.n	42908a <__sflush_r+0xce>
  429010:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  429014:	692a      	ldr	r2, [r5, #16]
  429016:	602a      	str	r2, [r5, #0]
  429018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  42901c:	2200      	movs	r2, #0
  42901e:	81ab      	strh	r3, [r5, #12]
  429020:	04db      	lsls	r3, r3, #19
  429022:	606a      	str	r2, [r5, #4]
  429024:	d447      	bmi.n	4290b6 <__sflush_r+0xfa>
  429026:	6b29      	ldr	r1, [r5, #48]	; 0x30
  429028:	f8c8 6000 	str.w	r6, [r8]
  42902c:	b311      	cbz	r1, 429074 <__sflush_r+0xb8>
  42902e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  429032:	4299      	cmp	r1, r3
  429034:	d002      	beq.n	42903c <__sflush_r+0x80>
  429036:	4640      	mov	r0, r8
  429038:	f000 f9de 	bl	4293f8 <_free_r>
  42903c:	2000      	movs	r0, #0
  42903e:	6328      	str	r0, [r5, #48]	; 0x30
  429040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  429044:	692e      	ldr	r6, [r5, #16]
  429046:	b1ae      	cbz	r6, 429074 <__sflush_r+0xb8>
  429048:	682c      	ldr	r4, [r5, #0]
  42904a:	602e      	str	r6, [r5, #0]
  42904c:	0791      	lsls	r1, r2, #30
  42904e:	bf0c      	ite	eq
  429050:	696b      	ldreq	r3, [r5, #20]
  429052:	2300      	movne	r3, #0
  429054:	1ba4      	subs	r4, r4, r6
  429056:	60ab      	str	r3, [r5, #8]
  429058:	e00a      	b.n	429070 <__sflush_r+0xb4>
  42905a:	4623      	mov	r3, r4
  42905c:	4632      	mov	r2, r6
  42905e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  429060:	69e9      	ldr	r1, [r5, #28]
  429062:	4640      	mov	r0, r8
  429064:	47b8      	blx	r7
  429066:	2800      	cmp	r0, #0
  429068:	eba4 0400 	sub.w	r4, r4, r0
  42906c:	4406      	add	r6, r0
  42906e:	dd04      	ble.n	42907a <__sflush_r+0xbe>
  429070:	2c00      	cmp	r4, #0
  429072:	dcf2      	bgt.n	42905a <__sflush_r+0x9e>
  429074:	2000      	movs	r0, #0
  429076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42907a:	89ab      	ldrh	r3, [r5, #12]
  42907c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429080:	81ab      	strh	r3, [r5, #12]
  429082:	f04f 30ff 	mov.w	r0, #4294967295
  429086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42908a:	f8d8 4000 	ldr.w	r4, [r8]
  42908e:	2c1d      	cmp	r4, #29
  429090:	d8f3      	bhi.n	42907a <__sflush_r+0xbe>
  429092:	4b19      	ldr	r3, [pc, #100]	; (4290f8 <__sflush_r+0x13c>)
  429094:	40e3      	lsrs	r3, r4
  429096:	43db      	mvns	r3, r3
  429098:	f013 0301 	ands.w	r3, r3, #1
  42909c:	d1ed      	bne.n	42907a <__sflush_r+0xbe>
  42909e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4290a2:	606b      	str	r3, [r5, #4]
  4290a4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4290a8:	6929      	ldr	r1, [r5, #16]
  4290aa:	81ab      	strh	r3, [r5, #12]
  4290ac:	04da      	lsls	r2, r3, #19
  4290ae:	6029      	str	r1, [r5, #0]
  4290b0:	d5b9      	bpl.n	429026 <__sflush_r+0x6a>
  4290b2:	2c00      	cmp	r4, #0
  4290b4:	d1b7      	bne.n	429026 <__sflush_r+0x6a>
  4290b6:	6528      	str	r0, [r5, #80]	; 0x50
  4290b8:	e7b5      	b.n	429026 <__sflush_r+0x6a>
  4290ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4290bc:	2a00      	cmp	r2, #0
  4290be:	dc8c      	bgt.n	428fda <__sflush_r+0x1e>
  4290c0:	e7d8      	b.n	429074 <__sflush_r+0xb8>
  4290c2:	2301      	movs	r3, #1
  4290c4:	69e9      	ldr	r1, [r5, #28]
  4290c6:	4640      	mov	r0, r8
  4290c8:	47a0      	blx	r4
  4290ca:	1c43      	adds	r3, r0, #1
  4290cc:	4602      	mov	r2, r0
  4290ce:	d002      	beq.n	4290d6 <__sflush_r+0x11a>
  4290d0:	89ab      	ldrh	r3, [r5, #12]
  4290d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4290d4:	e78e      	b.n	428ff4 <__sflush_r+0x38>
  4290d6:	f8d8 3000 	ldr.w	r3, [r8]
  4290da:	2b00      	cmp	r3, #0
  4290dc:	d0f8      	beq.n	4290d0 <__sflush_r+0x114>
  4290de:	2b1d      	cmp	r3, #29
  4290e0:	d001      	beq.n	4290e6 <__sflush_r+0x12a>
  4290e2:	2b16      	cmp	r3, #22
  4290e4:	d102      	bne.n	4290ec <__sflush_r+0x130>
  4290e6:	f8c8 6000 	str.w	r6, [r8]
  4290ea:	e7c3      	b.n	429074 <__sflush_r+0xb8>
  4290ec:	89ab      	ldrh	r3, [r5, #12]
  4290ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4290f2:	81ab      	strh	r3, [r5, #12]
  4290f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4290f8:	20400001 	.word	0x20400001

004290fc <_fflush_r>:
  4290fc:	b538      	push	{r3, r4, r5, lr}
  4290fe:	460d      	mov	r5, r1
  429100:	4604      	mov	r4, r0
  429102:	b108      	cbz	r0, 429108 <_fflush_r+0xc>
  429104:	6b83      	ldr	r3, [r0, #56]	; 0x38
  429106:	b1bb      	cbz	r3, 429138 <_fflush_r+0x3c>
  429108:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  42910c:	b188      	cbz	r0, 429132 <_fflush_r+0x36>
  42910e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  429110:	07db      	lsls	r3, r3, #31
  429112:	d401      	bmi.n	429118 <_fflush_r+0x1c>
  429114:	0581      	lsls	r1, r0, #22
  429116:	d517      	bpl.n	429148 <_fflush_r+0x4c>
  429118:	4620      	mov	r0, r4
  42911a:	4629      	mov	r1, r5
  42911c:	f7ff ff4e 	bl	428fbc <__sflush_r>
  429120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  429122:	07da      	lsls	r2, r3, #31
  429124:	4604      	mov	r4, r0
  429126:	d402      	bmi.n	42912e <_fflush_r+0x32>
  429128:	89ab      	ldrh	r3, [r5, #12]
  42912a:	059b      	lsls	r3, r3, #22
  42912c:	d507      	bpl.n	42913e <_fflush_r+0x42>
  42912e:	4620      	mov	r0, r4
  429130:	bd38      	pop	{r3, r4, r5, pc}
  429132:	4604      	mov	r4, r0
  429134:	4620      	mov	r0, r4
  429136:	bd38      	pop	{r3, r4, r5, pc}
  429138:	f000 f838 	bl	4291ac <__sinit>
  42913c:	e7e4      	b.n	429108 <_fflush_r+0xc>
  42913e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  429140:	f000 fbf6 	bl	429930 <__retarget_lock_release_recursive>
  429144:	4620      	mov	r0, r4
  429146:	bd38      	pop	{r3, r4, r5, pc}
  429148:	6da8      	ldr	r0, [r5, #88]	; 0x58
  42914a:	f000 fbef 	bl	42992c <__retarget_lock_acquire_recursive>
  42914e:	e7e3      	b.n	429118 <_fflush_r+0x1c>

00429150 <_cleanup_r>:
  429150:	4901      	ldr	r1, [pc, #4]	; (429158 <_cleanup_r+0x8>)
  429152:	f000 bbaf 	b.w	4298b4 <_fwalk_reent>
  429156:	bf00      	nop
  429158:	0042a1c1 	.word	0x0042a1c1

0042915c <std.isra.0>:
  42915c:	b510      	push	{r4, lr}
  42915e:	2300      	movs	r3, #0
  429160:	4604      	mov	r4, r0
  429162:	8181      	strh	r1, [r0, #12]
  429164:	81c2      	strh	r2, [r0, #14]
  429166:	6003      	str	r3, [r0, #0]
  429168:	6043      	str	r3, [r0, #4]
  42916a:	6083      	str	r3, [r0, #8]
  42916c:	6643      	str	r3, [r0, #100]	; 0x64
  42916e:	6103      	str	r3, [r0, #16]
  429170:	6143      	str	r3, [r0, #20]
  429172:	6183      	str	r3, [r0, #24]
  429174:	4619      	mov	r1, r3
  429176:	2208      	movs	r2, #8
  429178:	305c      	adds	r0, #92	; 0x5c
  42917a:	f7fe fbff 	bl	42797c <memset>
  42917e:	4807      	ldr	r0, [pc, #28]	; (42919c <std.isra.0+0x40>)
  429180:	4907      	ldr	r1, [pc, #28]	; (4291a0 <std.isra.0+0x44>)
  429182:	4a08      	ldr	r2, [pc, #32]	; (4291a4 <std.isra.0+0x48>)
  429184:	4b08      	ldr	r3, [pc, #32]	; (4291a8 <std.isra.0+0x4c>)
  429186:	6220      	str	r0, [r4, #32]
  429188:	61e4      	str	r4, [r4, #28]
  42918a:	6261      	str	r1, [r4, #36]	; 0x24
  42918c:	62a2      	str	r2, [r4, #40]	; 0x28
  42918e:	62e3      	str	r3, [r4, #44]	; 0x2c
  429190:	f104 0058 	add.w	r0, r4, #88	; 0x58
  429194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  429198:	f000 bbc4 	b.w	429924 <__retarget_lock_init_recursive>
  42919c:	00429f05 	.word	0x00429f05
  4291a0:	00429f29 	.word	0x00429f29
  4291a4:	00429f65 	.word	0x00429f65
  4291a8:	00429f85 	.word	0x00429f85

004291ac <__sinit>:
  4291ac:	b510      	push	{r4, lr}
  4291ae:	4604      	mov	r4, r0
  4291b0:	4812      	ldr	r0, [pc, #72]	; (4291fc <__sinit+0x50>)
  4291b2:	f000 fbbb 	bl	42992c <__retarget_lock_acquire_recursive>
  4291b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4291b8:	b9d2      	cbnz	r2, 4291f0 <__sinit+0x44>
  4291ba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4291be:	4810      	ldr	r0, [pc, #64]	; (429200 <__sinit+0x54>)
  4291c0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4291c4:	2103      	movs	r1, #3
  4291c6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4291ca:	63e0      	str	r0, [r4, #60]	; 0x3c
  4291cc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4291d0:	6860      	ldr	r0, [r4, #4]
  4291d2:	2104      	movs	r1, #4
  4291d4:	f7ff ffc2 	bl	42915c <std.isra.0>
  4291d8:	2201      	movs	r2, #1
  4291da:	2109      	movs	r1, #9
  4291dc:	68a0      	ldr	r0, [r4, #8]
  4291de:	f7ff ffbd 	bl	42915c <std.isra.0>
  4291e2:	2202      	movs	r2, #2
  4291e4:	2112      	movs	r1, #18
  4291e6:	68e0      	ldr	r0, [r4, #12]
  4291e8:	f7ff ffb8 	bl	42915c <std.isra.0>
  4291ec:	2301      	movs	r3, #1
  4291ee:	63a3      	str	r3, [r4, #56]	; 0x38
  4291f0:	4802      	ldr	r0, [pc, #8]	; (4291fc <__sinit+0x50>)
  4291f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4291f6:	f000 bb9b 	b.w	429930 <__retarget_lock_release_recursive>
  4291fa:	bf00      	nop
  4291fc:	2043a7f8 	.word	0x2043a7f8
  429200:	00429151 	.word	0x00429151

00429204 <__sfp_lock_acquire>:
  429204:	4801      	ldr	r0, [pc, #4]	; (42920c <__sfp_lock_acquire+0x8>)
  429206:	f000 bb91 	b.w	42992c <__retarget_lock_acquire_recursive>
  42920a:	bf00      	nop
  42920c:	2043a80c 	.word	0x2043a80c

00429210 <__sfp_lock_release>:
  429210:	4801      	ldr	r0, [pc, #4]	; (429218 <__sfp_lock_release+0x8>)
  429212:	f000 bb8d 	b.w	429930 <__retarget_lock_release_recursive>
  429216:	bf00      	nop
  429218:	2043a80c 	.word	0x2043a80c

0042921c <__libc_fini_array>:
  42921c:	b538      	push	{r3, r4, r5, lr}
  42921e:	4c0a      	ldr	r4, [pc, #40]	; (429248 <__libc_fini_array+0x2c>)
  429220:	4d0a      	ldr	r5, [pc, #40]	; (42924c <__libc_fini_array+0x30>)
  429222:	1b64      	subs	r4, r4, r5
  429224:	10a4      	asrs	r4, r4, #2
  429226:	d00a      	beq.n	42923e <__libc_fini_array+0x22>
  429228:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  42922c:	3b01      	subs	r3, #1
  42922e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  429232:	3c01      	subs	r4, #1
  429234:	f855 3904 	ldr.w	r3, [r5], #-4
  429238:	4798      	blx	r3
  42923a:	2c00      	cmp	r4, #0
  42923c:	d1f9      	bne.n	429232 <__libc_fini_array+0x16>
  42923e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  429242:	f008 bc97 	b.w	431b74 <_fini>
  429246:	bf00      	nop
  429248:	00431b84 	.word	0x00431b84
  42924c:	00431b80 	.word	0x00431b80

00429250 <__fputwc>:
  429250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  429254:	b082      	sub	sp, #8
  429256:	4680      	mov	r8, r0
  429258:	4689      	mov	r9, r1
  42925a:	4614      	mov	r4, r2
  42925c:	f000 fb54 	bl	429908 <__locale_mb_cur_max>
  429260:	2801      	cmp	r0, #1
  429262:	d036      	beq.n	4292d2 <__fputwc+0x82>
  429264:	464a      	mov	r2, r9
  429266:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  42926a:	a901      	add	r1, sp, #4
  42926c:	4640      	mov	r0, r8
  42926e:	f000 fee5 	bl	42a03c <_wcrtomb_r>
  429272:	1c42      	adds	r2, r0, #1
  429274:	4606      	mov	r6, r0
  429276:	d025      	beq.n	4292c4 <__fputwc+0x74>
  429278:	b3a8      	cbz	r0, 4292e6 <__fputwc+0x96>
  42927a:	f89d e004 	ldrb.w	lr, [sp, #4]
  42927e:	2500      	movs	r5, #0
  429280:	f10d 0a04 	add.w	sl, sp, #4
  429284:	e009      	b.n	42929a <__fputwc+0x4a>
  429286:	6823      	ldr	r3, [r4, #0]
  429288:	1c5a      	adds	r2, r3, #1
  42928a:	6022      	str	r2, [r4, #0]
  42928c:	f883 e000 	strb.w	lr, [r3]
  429290:	3501      	adds	r5, #1
  429292:	42b5      	cmp	r5, r6
  429294:	d227      	bcs.n	4292e6 <__fputwc+0x96>
  429296:	f815 e00a 	ldrb.w	lr, [r5, sl]
  42929a:	68a3      	ldr	r3, [r4, #8]
  42929c:	3b01      	subs	r3, #1
  42929e:	2b00      	cmp	r3, #0
  4292a0:	60a3      	str	r3, [r4, #8]
  4292a2:	daf0      	bge.n	429286 <__fputwc+0x36>
  4292a4:	69a7      	ldr	r7, [r4, #24]
  4292a6:	42bb      	cmp	r3, r7
  4292a8:	4671      	mov	r1, lr
  4292aa:	4622      	mov	r2, r4
  4292ac:	4640      	mov	r0, r8
  4292ae:	db02      	blt.n	4292b6 <__fputwc+0x66>
  4292b0:	f1be 0f0a 	cmp.w	lr, #10
  4292b4:	d1e7      	bne.n	429286 <__fputwc+0x36>
  4292b6:	f000 fe69 	bl	429f8c <__swbuf_r>
  4292ba:	1c43      	adds	r3, r0, #1
  4292bc:	d1e8      	bne.n	429290 <__fputwc+0x40>
  4292be:	b002      	add	sp, #8
  4292c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4292c4:	89a3      	ldrh	r3, [r4, #12]
  4292c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4292ca:	81a3      	strh	r3, [r4, #12]
  4292cc:	b002      	add	sp, #8
  4292ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4292d2:	f109 33ff 	add.w	r3, r9, #4294967295
  4292d6:	2bfe      	cmp	r3, #254	; 0xfe
  4292d8:	d8c4      	bhi.n	429264 <__fputwc+0x14>
  4292da:	fa5f fe89 	uxtb.w	lr, r9
  4292de:	4606      	mov	r6, r0
  4292e0:	f88d e004 	strb.w	lr, [sp, #4]
  4292e4:	e7cb      	b.n	42927e <__fputwc+0x2e>
  4292e6:	4648      	mov	r0, r9
  4292e8:	b002      	add	sp, #8
  4292ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4292ee:	bf00      	nop

004292f0 <_fputwc_r>:
  4292f0:	b530      	push	{r4, r5, lr}
  4292f2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4292f4:	f013 0f01 	tst.w	r3, #1
  4292f8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4292fc:	4614      	mov	r4, r2
  4292fe:	b083      	sub	sp, #12
  429300:	4605      	mov	r5, r0
  429302:	b29a      	uxth	r2, r3
  429304:	d101      	bne.n	42930a <_fputwc_r+0x1a>
  429306:	0590      	lsls	r0, r2, #22
  429308:	d51c      	bpl.n	429344 <_fputwc_r+0x54>
  42930a:	0490      	lsls	r0, r2, #18
  42930c:	d406      	bmi.n	42931c <_fputwc_r+0x2c>
  42930e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  429310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  429314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  429318:	81a3      	strh	r3, [r4, #12]
  42931a:	6662      	str	r2, [r4, #100]	; 0x64
  42931c:	4628      	mov	r0, r5
  42931e:	4622      	mov	r2, r4
  429320:	f7ff ff96 	bl	429250 <__fputwc>
  429324:	6e63      	ldr	r3, [r4, #100]	; 0x64
  429326:	07da      	lsls	r2, r3, #31
  429328:	4605      	mov	r5, r0
  42932a:	d402      	bmi.n	429332 <_fputwc_r+0x42>
  42932c:	89a3      	ldrh	r3, [r4, #12]
  42932e:	059b      	lsls	r3, r3, #22
  429330:	d502      	bpl.n	429338 <_fputwc_r+0x48>
  429332:	4628      	mov	r0, r5
  429334:	b003      	add	sp, #12
  429336:	bd30      	pop	{r4, r5, pc}
  429338:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42933a:	f000 faf9 	bl	429930 <__retarget_lock_release_recursive>
  42933e:	4628      	mov	r0, r5
  429340:	b003      	add	sp, #12
  429342:	bd30      	pop	{r4, r5, pc}
  429344:	6da0      	ldr	r0, [r4, #88]	; 0x58
  429346:	9101      	str	r1, [sp, #4]
  429348:	f000 faf0 	bl	42992c <__retarget_lock_acquire_recursive>
  42934c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429350:	9901      	ldr	r1, [sp, #4]
  429352:	b29a      	uxth	r2, r3
  429354:	e7d9      	b.n	42930a <_fputwc_r+0x1a>
  429356:	bf00      	nop

00429358 <_malloc_trim_r>:
  429358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42935a:	4f24      	ldr	r7, [pc, #144]	; (4293ec <_malloc_trim_r+0x94>)
  42935c:	460c      	mov	r4, r1
  42935e:	4606      	mov	r6, r0
  429360:	f7fe fb5a 	bl	427a18 <__malloc_lock>
  429364:	68bb      	ldr	r3, [r7, #8]
  429366:	685d      	ldr	r5, [r3, #4]
  429368:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  42936c:	310f      	adds	r1, #15
  42936e:	f025 0503 	bic.w	r5, r5, #3
  429372:	4429      	add	r1, r5
  429374:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  429378:	f021 010f 	bic.w	r1, r1, #15
  42937c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  429380:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  429384:	db07      	blt.n	429396 <_malloc_trim_r+0x3e>
  429386:	2100      	movs	r1, #0
  429388:	4630      	mov	r0, r6
  42938a:	f7fe fb71 	bl	427a70 <_sbrk_r>
  42938e:	68bb      	ldr	r3, [r7, #8]
  429390:	442b      	add	r3, r5
  429392:	4298      	cmp	r0, r3
  429394:	d004      	beq.n	4293a0 <_malloc_trim_r+0x48>
  429396:	4630      	mov	r0, r6
  429398:	f7fe fb44 	bl	427a24 <__malloc_unlock>
  42939c:	2000      	movs	r0, #0
  42939e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4293a0:	4261      	negs	r1, r4
  4293a2:	4630      	mov	r0, r6
  4293a4:	f7fe fb64 	bl	427a70 <_sbrk_r>
  4293a8:	3001      	adds	r0, #1
  4293aa:	d00d      	beq.n	4293c8 <_malloc_trim_r+0x70>
  4293ac:	4b10      	ldr	r3, [pc, #64]	; (4293f0 <_malloc_trim_r+0x98>)
  4293ae:	68ba      	ldr	r2, [r7, #8]
  4293b0:	6819      	ldr	r1, [r3, #0]
  4293b2:	1b2d      	subs	r5, r5, r4
  4293b4:	f045 0501 	orr.w	r5, r5, #1
  4293b8:	4630      	mov	r0, r6
  4293ba:	1b09      	subs	r1, r1, r4
  4293bc:	6055      	str	r5, [r2, #4]
  4293be:	6019      	str	r1, [r3, #0]
  4293c0:	f7fe fb30 	bl	427a24 <__malloc_unlock>
  4293c4:	2001      	movs	r0, #1
  4293c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4293c8:	2100      	movs	r1, #0
  4293ca:	4630      	mov	r0, r6
  4293cc:	f7fe fb50 	bl	427a70 <_sbrk_r>
  4293d0:	68ba      	ldr	r2, [r7, #8]
  4293d2:	1a83      	subs	r3, r0, r2
  4293d4:	2b0f      	cmp	r3, #15
  4293d6:	ddde      	ble.n	429396 <_malloc_trim_r+0x3e>
  4293d8:	4c06      	ldr	r4, [pc, #24]	; (4293f4 <_malloc_trim_r+0x9c>)
  4293da:	4905      	ldr	r1, [pc, #20]	; (4293f0 <_malloc_trim_r+0x98>)
  4293dc:	6824      	ldr	r4, [r4, #0]
  4293de:	f043 0301 	orr.w	r3, r3, #1
  4293e2:	1b00      	subs	r0, r0, r4
  4293e4:	6053      	str	r3, [r2, #4]
  4293e6:	6008      	str	r0, [r1, #0]
  4293e8:	e7d5      	b.n	429396 <_malloc_trim_r+0x3e>
  4293ea:	bf00      	nop
  4293ec:	20400518 	.word	0x20400518
  4293f0:	2043a154 	.word	0x2043a154
  4293f4:	20400920 	.word	0x20400920

004293f8 <_free_r>:
  4293f8:	2900      	cmp	r1, #0
  4293fa:	d044      	beq.n	429486 <_free_r+0x8e>
  4293fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  429400:	460d      	mov	r5, r1
  429402:	4680      	mov	r8, r0
  429404:	f7fe fb08 	bl	427a18 <__malloc_lock>
  429408:	f855 7c04 	ldr.w	r7, [r5, #-4]
  42940c:	4969      	ldr	r1, [pc, #420]	; (4295b4 <_free_r+0x1bc>)
  42940e:	f027 0301 	bic.w	r3, r7, #1
  429412:	f1a5 0408 	sub.w	r4, r5, #8
  429416:	18e2      	adds	r2, r4, r3
  429418:	688e      	ldr	r6, [r1, #8]
  42941a:	6850      	ldr	r0, [r2, #4]
  42941c:	42b2      	cmp	r2, r6
  42941e:	f020 0003 	bic.w	r0, r0, #3
  429422:	d05e      	beq.n	4294e2 <_free_r+0xea>
  429424:	07fe      	lsls	r6, r7, #31
  429426:	6050      	str	r0, [r2, #4]
  429428:	d40b      	bmi.n	429442 <_free_r+0x4a>
  42942a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  42942e:	1be4      	subs	r4, r4, r7
  429430:	f101 0e08 	add.w	lr, r1, #8
  429434:	68a5      	ldr	r5, [r4, #8]
  429436:	4575      	cmp	r5, lr
  429438:	443b      	add	r3, r7
  42943a:	d06d      	beq.n	429518 <_free_r+0x120>
  42943c:	68e7      	ldr	r7, [r4, #12]
  42943e:	60ef      	str	r7, [r5, #12]
  429440:	60bd      	str	r5, [r7, #8]
  429442:	1815      	adds	r5, r2, r0
  429444:	686d      	ldr	r5, [r5, #4]
  429446:	07ed      	lsls	r5, r5, #31
  429448:	d53e      	bpl.n	4294c8 <_free_r+0xd0>
  42944a:	f043 0201 	orr.w	r2, r3, #1
  42944e:	6062      	str	r2, [r4, #4]
  429450:	50e3      	str	r3, [r4, r3]
  429452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  429456:	d217      	bcs.n	429488 <_free_r+0x90>
  429458:	08db      	lsrs	r3, r3, #3
  42945a:	1c58      	adds	r0, r3, #1
  42945c:	109a      	asrs	r2, r3, #2
  42945e:	684d      	ldr	r5, [r1, #4]
  429460:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  429464:	60a7      	str	r7, [r4, #8]
  429466:	2301      	movs	r3, #1
  429468:	4093      	lsls	r3, r2
  42946a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  42946e:	432b      	orrs	r3, r5
  429470:	3a08      	subs	r2, #8
  429472:	60e2      	str	r2, [r4, #12]
  429474:	604b      	str	r3, [r1, #4]
  429476:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  42947a:	60fc      	str	r4, [r7, #12]
  42947c:	4640      	mov	r0, r8
  42947e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  429482:	f7fe bacf 	b.w	427a24 <__malloc_unlock>
  429486:	4770      	bx	lr
  429488:	0a5a      	lsrs	r2, r3, #9
  42948a:	2a04      	cmp	r2, #4
  42948c:	d852      	bhi.n	429534 <_free_r+0x13c>
  42948e:	099a      	lsrs	r2, r3, #6
  429490:	f102 0739 	add.w	r7, r2, #57	; 0x39
  429494:	00ff      	lsls	r7, r7, #3
  429496:	f102 0538 	add.w	r5, r2, #56	; 0x38
  42949a:	19c8      	adds	r0, r1, r7
  42949c:	59ca      	ldr	r2, [r1, r7]
  42949e:	3808      	subs	r0, #8
  4294a0:	4290      	cmp	r0, r2
  4294a2:	d04f      	beq.n	429544 <_free_r+0x14c>
  4294a4:	6851      	ldr	r1, [r2, #4]
  4294a6:	f021 0103 	bic.w	r1, r1, #3
  4294aa:	428b      	cmp	r3, r1
  4294ac:	d232      	bcs.n	429514 <_free_r+0x11c>
  4294ae:	6892      	ldr	r2, [r2, #8]
  4294b0:	4290      	cmp	r0, r2
  4294b2:	d1f7      	bne.n	4294a4 <_free_r+0xac>
  4294b4:	68c3      	ldr	r3, [r0, #12]
  4294b6:	60a0      	str	r0, [r4, #8]
  4294b8:	60e3      	str	r3, [r4, #12]
  4294ba:	609c      	str	r4, [r3, #8]
  4294bc:	60c4      	str	r4, [r0, #12]
  4294be:	4640      	mov	r0, r8
  4294c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4294c4:	f7fe baae 	b.w	427a24 <__malloc_unlock>
  4294c8:	6895      	ldr	r5, [r2, #8]
  4294ca:	4f3b      	ldr	r7, [pc, #236]	; (4295b8 <_free_r+0x1c0>)
  4294cc:	42bd      	cmp	r5, r7
  4294ce:	4403      	add	r3, r0
  4294d0:	d040      	beq.n	429554 <_free_r+0x15c>
  4294d2:	68d0      	ldr	r0, [r2, #12]
  4294d4:	60e8      	str	r0, [r5, #12]
  4294d6:	f043 0201 	orr.w	r2, r3, #1
  4294da:	6085      	str	r5, [r0, #8]
  4294dc:	6062      	str	r2, [r4, #4]
  4294de:	50e3      	str	r3, [r4, r3]
  4294e0:	e7b7      	b.n	429452 <_free_r+0x5a>
  4294e2:	07ff      	lsls	r7, r7, #31
  4294e4:	4403      	add	r3, r0
  4294e6:	d407      	bmi.n	4294f8 <_free_r+0x100>
  4294e8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4294ec:	1aa4      	subs	r4, r4, r2
  4294ee:	4413      	add	r3, r2
  4294f0:	68a0      	ldr	r0, [r4, #8]
  4294f2:	68e2      	ldr	r2, [r4, #12]
  4294f4:	60c2      	str	r2, [r0, #12]
  4294f6:	6090      	str	r0, [r2, #8]
  4294f8:	4a30      	ldr	r2, [pc, #192]	; (4295bc <_free_r+0x1c4>)
  4294fa:	6812      	ldr	r2, [r2, #0]
  4294fc:	f043 0001 	orr.w	r0, r3, #1
  429500:	4293      	cmp	r3, r2
  429502:	6060      	str	r0, [r4, #4]
  429504:	608c      	str	r4, [r1, #8]
  429506:	d3b9      	bcc.n	42947c <_free_r+0x84>
  429508:	4b2d      	ldr	r3, [pc, #180]	; (4295c0 <_free_r+0x1c8>)
  42950a:	4640      	mov	r0, r8
  42950c:	6819      	ldr	r1, [r3, #0]
  42950e:	f7ff ff23 	bl	429358 <_malloc_trim_r>
  429512:	e7b3      	b.n	42947c <_free_r+0x84>
  429514:	4610      	mov	r0, r2
  429516:	e7cd      	b.n	4294b4 <_free_r+0xbc>
  429518:	1811      	adds	r1, r2, r0
  42951a:	6849      	ldr	r1, [r1, #4]
  42951c:	07c9      	lsls	r1, r1, #31
  42951e:	d444      	bmi.n	4295aa <_free_r+0x1b2>
  429520:	6891      	ldr	r1, [r2, #8]
  429522:	68d2      	ldr	r2, [r2, #12]
  429524:	60ca      	str	r2, [r1, #12]
  429526:	4403      	add	r3, r0
  429528:	f043 0001 	orr.w	r0, r3, #1
  42952c:	6091      	str	r1, [r2, #8]
  42952e:	6060      	str	r0, [r4, #4]
  429530:	50e3      	str	r3, [r4, r3]
  429532:	e7a3      	b.n	42947c <_free_r+0x84>
  429534:	2a14      	cmp	r2, #20
  429536:	d816      	bhi.n	429566 <_free_r+0x16e>
  429538:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  42953c:	00ff      	lsls	r7, r7, #3
  42953e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  429542:	e7aa      	b.n	42949a <_free_r+0xa2>
  429544:	10aa      	asrs	r2, r5, #2
  429546:	2301      	movs	r3, #1
  429548:	684d      	ldr	r5, [r1, #4]
  42954a:	4093      	lsls	r3, r2
  42954c:	432b      	orrs	r3, r5
  42954e:	604b      	str	r3, [r1, #4]
  429550:	4603      	mov	r3, r0
  429552:	e7b0      	b.n	4294b6 <_free_r+0xbe>
  429554:	f043 0201 	orr.w	r2, r3, #1
  429558:	614c      	str	r4, [r1, #20]
  42955a:	610c      	str	r4, [r1, #16]
  42955c:	60e5      	str	r5, [r4, #12]
  42955e:	60a5      	str	r5, [r4, #8]
  429560:	6062      	str	r2, [r4, #4]
  429562:	50e3      	str	r3, [r4, r3]
  429564:	e78a      	b.n	42947c <_free_r+0x84>
  429566:	2a54      	cmp	r2, #84	; 0x54
  429568:	d806      	bhi.n	429578 <_free_r+0x180>
  42956a:	0b1a      	lsrs	r2, r3, #12
  42956c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  429570:	00ff      	lsls	r7, r7, #3
  429572:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  429576:	e790      	b.n	42949a <_free_r+0xa2>
  429578:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  42957c:	d806      	bhi.n	42958c <_free_r+0x194>
  42957e:	0bda      	lsrs	r2, r3, #15
  429580:	f102 0778 	add.w	r7, r2, #120	; 0x78
  429584:	00ff      	lsls	r7, r7, #3
  429586:	f102 0577 	add.w	r5, r2, #119	; 0x77
  42958a:	e786      	b.n	42949a <_free_r+0xa2>
  42958c:	f240 5054 	movw	r0, #1364	; 0x554
  429590:	4282      	cmp	r2, r0
  429592:	d806      	bhi.n	4295a2 <_free_r+0x1aa>
  429594:	0c9a      	lsrs	r2, r3, #18
  429596:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  42959a:	00ff      	lsls	r7, r7, #3
  42959c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4295a0:	e77b      	b.n	42949a <_free_r+0xa2>
  4295a2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4295a6:	257e      	movs	r5, #126	; 0x7e
  4295a8:	e777      	b.n	42949a <_free_r+0xa2>
  4295aa:	f043 0101 	orr.w	r1, r3, #1
  4295ae:	6061      	str	r1, [r4, #4]
  4295b0:	6013      	str	r3, [r2, #0]
  4295b2:	e763      	b.n	42947c <_free_r+0x84>
  4295b4:	20400518 	.word	0x20400518
  4295b8:	20400520 	.word	0x20400520
  4295bc:	20400924 	.word	0x20400924
  4295c0:	2043a184 	.word	0x2043a184

004295c4 <__sfvwrite_r>:
  4295c4:	6893      	ldr	r3, [r2, #8]
  4295c6:	2b00      	cmp	r3, #0
  4295c8:	d073      	beq.n	4296b2 <__sfvwrite_r+0xee>
  4295ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4295ce:	898b      	ldrh	r3, [r1, #12]
  4295d0:	b083      	sub	sp, #12
  4295d2:	460c      	mov	r4, r1
  4295d4:	0719      	lsls	r1, r3, #28
  4295d6:	9000      	str	r0, [sp, #0]
  4295d8:	4616      	mov	r6, r2
  4295da:	d526      	bpl.n	42962a <__sfvwrite_r+0x66>
  4295dc:	6922      	ldr	r2, [r4, #16]
  4295de:	b322      	cbz	r2, 42962a <__sfvwrite_r+0x66>
  4295e0:	f013 0002 	ands.w	r0, r3, #2
  4295e4:	6835      	ldr	r5, [r6, #0]
  4295e6:	d02c      	beq.n	429642 <__sfvwrite_r+0x7e>
  4295e8:	f04f 0900 	mov.w	r9, #0
  4295ec:	4fb0      	ldr	r7, [pc, #704]	; (4298b0 <__sfvwrite_r+0x2ec>)
  4295ee:	46c8      	mov	r8, r9
  4295f0:	46b2      	mov	sl, r6
  4295f2:	45b8      	cmp	r8, r7
  4295f4:	4643      	mov	r3, r8
  4295f6:	464a      	mov	r2, r9
  4295f8:	bf28      	it	cs
  4295fa:	463b      	movcs	r3, r7
  4295fc:	9800      	ldr	r0, [sp, #0]
  4295fe:	f1b8 0f00 	cmp.w	r8, #0
  429602:	d050      	beq.n	4296a6 <__sfvwrite_r+0xe2>
  429604:	69e1      	ldr	r1, [r4, #28]
  429606:	6a66      	ldr	r6, [r4, #36]	; 0x24
  429608:	47b0      	blx	r6
  42960a:	2800      	cmp	r0, #0
  42960c:	dd58      	ble.n	4296c0 <__sfvwrite_r+0xfc>
  42960e:	f8da 3008 	ldr.w	r3, [sl, #8]
  429612:	1a1b      	subs	r3, r3, r0
  429614:	4481      	add	r9, r0
  429616:	eba8 0800 	sub.w	r8, r8, r0
  42961a:	f8ca 3008 	str.w	r3, [sl, #8]
  42961e:	2b00      	cmp	r3, #0
  429620:	d1e7      	bne.n	4295f2 <__sfvwrite_r+0x2e>
  429622:	2000      	movs	r0, #0
  429624:	b003      	add	sp, #12
  429626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42962a:	4621      	mov	r1, r4
  42962c:	9800      	ldr	r0, [sp, #0]
  42962e:	f7ff fc51 	bl	428ed4 <__swsetup_r>
  429632:	2800      	cmp	r0, #0
  429634:	f040 8133 	bne.w	42989e <__sfvwrite_r+0x2da>
  429638:	89a3      	ldrh	r3, [r4, #12]
  42963a:	6835      	ldr	r5, [r6, #0]
  42963c:	f013 0002 	ands.w	r0, r3, #2
  429640:	d1d2      	bne.n	4295e8 <__sfvwrite_r+0x24>
  429642:	f013 0901 	ands.w	r9, r3, #1
  429646:	d145      	bne.n	4296d4 <__sfvwrite_r+0x110>
  429648:	464f      	mov	r7, r9
  42964a:	9601      	str	r6, [sp, #4]
  42964c:	b337      	cbz	r7, 42969c <__sfvwrite_r+0xd8>
  42964e:	059a      	lsls	r2, r3, #22
  429650:	f8d4 8008 	ldr.w	r8, [r4, #8]
  429654:	f140 8083 	bpl.w	42975e <__sfvwrite_r+0x19a>
  429658:	4547      	cmp	r7, r8
  42965a:	46c3      	mov	fp, r8
  42965c:	f0c0 80ab 	bcc.w	4297b6 <__sfvwrite_r+0x1f2>
  429660:	f413 6f90 	tst.w	r3, #1152	; 0x480
  429664:	f040 80ac 	bne.w	4297c0 <__sfvwrite_r+0x1fc>
  429668:	6820      	ldr	r0, [r4, #0]
  42966a:	46ba      	mov	sl, r7
  42966c:	465a      	mov	r2, fp
  42966e:	4649      	mov	r1, r9
  429670:	f000 fa3e 	bl	429af0 <memmove>
  429674:	68a2      	ldr	r2, [r4, #8]
  429676:	6823      	ldr	r3, [r4, #0]
  429678:	eba2 0208 	sub.w	r2, r2, r8
  42967c:	445b      	add	r3, fp
  42967e:	60a2      	str	r2, [r4, #8]
  429680:	6023      	str	r3, [r4, #0]
  429682:	9a01      	ldr	r2, [sp, #4]
  429684:	6893      	ldr	r3, [r2, #8]
  429686:	eba3 030a 	sub.w	r3, r3, sl
  42968a:	44d1      	add	r9, sl
  42968c:	eba7 070a 	sub.w	r7, r7, sl
  429690:	6093      	str	r3, [r2, #8]
  429692:	2b00      	cmp	r3, #0
  429694:	d0c5      	beq.n	429622 <__sfvwrite_r+0x5e>
  429696:	89a3      	ldrh	r3, [r4, #12]
  429698:	2f00      	cmp	r7, #0
  42969a:	d1d8      	bne.n	42964e <__sfvwrite_r+0x8a>
  42969c:	f8d5 9000 	ldr.w	r9, [r5]
  4296a0:	686f      	ldr	r7, [r5, #4]
  4296a2:	3508      	adds	r5, #8
  4296a4:	e7d2      	b.n	42964c <__sfvwrite_r+0x88>
  4296a6:	f8d5 9000 	ldr.w	r9, [r5]
  4296aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4296ae:	3508      	adds	r5, #8
  4296b0:	e79f      	b.n	4295f2 <__sfvwrite_r+0x2e>
  4296b2:	2000      	movs	r0, #0
  4296b4:	4770      	bx	lr
  4296b6:	4621      	mov	r1, r4
  4296b8:	9800      	ldr	r0, [sp, #0]
  4296ba:	f7ff fd1f 	bl	4290fc <_fflush_r>
  4296be:	b370      	cbz	r0, 42971e <__sfvwrite_r+0x15a>
  4296c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4296c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4296c8:	f04f 30ff 	mov.w	r0, #4294967295
  4296cc:	81a3      	strh	r3, [r4, #12]
  4296ce:	b003      	add	sp, #12
  4296d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4296d4:	4681      	mov	r9, r0
  4296d6:	4633      	mov	r3, r6
  4296d8:	464e      	mov	r6, r9
  4296da:	46a8      	mov	r8, r5
  4296dc:	469a      	mov	sl, r3
  4296de:	464d      	mov	r5, r9
  4296e0:	b34e      	cbz	r6, 429736 <__sfvwrite_r+0x172>
  4296e2:	b380      	cbz	r0, 429746 <__sfvwrite_r+0x182>
  4296e4:	6820      	ldr	r0, [r4, #0]
  4296e6:	6923      	ldr	r3, [r4, #16]
  4296e8:	6962      	ldr	r2, [r4, #20]
  4296ea:	45b1      	cmp	r9, r6
  4296ec:	46cb      	mov	fp, r9
  4296ee:	bf28      	it	cs
  4296f0:	46b3      	movcs	fp, r6
  4296f2:	4298      	cmp	r0, r3
  4296f4:	465f      	mov	r7, fp
  4296f6:	d904      	bls.n	429702 <__sfvwrite_r+0x13e>
  4296f8:	68a3      	ldr	r3, [r4, #8]
  4296fa:	4413      	add	r3, r2
  4296fc:	459b      	cmp	fp, r3
  4296fe:	f300 80a6 	bgt.w	42984e <__sfvwrite_r+0x28a>
  429702:	4593      	cmp	fp, r2
  429704:	db4b      	blt.n	42979e <__sfvwrite_r+0x1da>
  429706:	4613      	mov	r3, r2
  429708:	6a67      	ldr	r7, [r4, #36]	; 0x24
  42970a:	69e1      	ldr	r1, [r4, #28]
  42970c:	9800      	ldr	r0, [sp, #0]
  42970e:	462a      	mov	r2, r5
  429710:	47b8      	blx	r7
  429712:	1e07      	subs	r7, r0, #0
  429714:	ddd4      	ble.n	4296c0 <__sfvwrite_r+0xfc>
  429716:	ebb9 0907 	subs.w	r9, r9, r7
  42971a:	d0cc      	beq.n	4296b6 <__sfvwrite_r+0xf2>
  42971c:	2001      	movs	r0, #1
  42971e:	f8da 3008 	ldr.w	r3, [sl, #8]
  429722:	1bdb      	subs	r3, r3, r7
  429724:	443d      	add	r5, r7
  429726:	1bf6      	subs	r6, r6, r7
  429728:	f8ca 3008 	str.w	r3, [sl, #8]
  42972c:	2b00      	cmp	r3, #0
  42972e:	f43f af78 	beq.w	429622 <__sfvwrite_r+0x5e>
  429732:	2e00      	cmp	r6, #0
  429734:	d1d5      	bne.n	4296e2 <__sfvwrite_r+0x11e>
  429736:	f108 0308 	add.w	r3, r8, #8
  42973a:	e913 0060 	ldmdb	r3, {r5, r6}
  42973e:	4698      	mov	r8, r3
  429740:	3308      	adds	r3, #8
  429742:	2e00      	cmp	r6, #0
  429744:	d0f9      	beq.n	42973a <__sfvwrite_r+0x176>
  429746:	4632      	mov	r2, r6
  429748:	210a      	movs	r1, #10
  42974a:	4628      	mov	r0, r5
  42974c:	f000 f980 	bl	429a50 <memchr>
  429750:	2800      	cmp	r0, #0
  429752:	f000 80a1 	beq.w	429898 <__sfvwrite_r+0x2d4>
  429756:	3001      	adds	r0, #1
  429758:	eba0 0905 	sub.w	r9, r0, r5
  42975c:	e7c2      	b.n	4296e4 <__sfvwrite_r+0x120>
  42975e:	6820      	ldr	r0, [r4, #0]
  429760:	6923      	ldr	r3, [r4, #16]
  429762:	4298      	cmp	r0, r3
  429764:	d802      	bhi.n	42976c <__sfvwrite_r+0x1a8>
  429766:	6963      	ldr	r3, [r4, #20]
  429768:	429f      	cmp	r7, r3
  42976a:	d25d      	bcs.n	429828 <__sfvwrite_r+0x264>
  42976c:	45b8      	cmp	r8, r7
  42976e:	bf28      	it	cs
  429770:	46b8      	movcs	r8, r7
  429772:	4642      	mov	r2, r8
  429774:	4649      	mov	r1, r9
  429776:	f000 f9bb 	bl	429af0 <memmove>
  42977a:	68a3      	ldr	r3, [r4, #8]
  42977c:	6822      	ldr	r2, [r4, #0]
  42977e:	eba3 0308 	sub.w	r3, r3, r8
  429782:	4442      	add	r2, r8
  429784:	60a3      	str	r3, [r4, #8]
  429786:	6022      	str	r2, [r4, #0]
  429788:	b10b      	cbz	r3, 42978e <__sfvwrite_r+0x1ca>
  42978a:	46c2      	mov	sl, r8
  42978c:	e779      	b.n	429682 <__sfvwrite_r+0xbe>
  42978e:	4621      	mov	r1, r4
  429790:	9800      	ldr	r0, [sp, #0]
  429792:	f7ff fcb3 	bl	4290fc <_fflush_r>
  429796:	2800      	cmp	r0, #0
  429798:	d192      	bne.n	4296c0 <__sfvwrite_r+0xfc>
  42979a:	46c2      	mov	sl, r8
  42979c:	e771      	b.n	429682 <__sfvwrite_r+0xbe>
  42979e:	465a      	mov	r2, fp
  4297a0:	4629      	mov	r1, r5
  4297a2:	f000 f9a5 	bl	429af0 <memmove>
  4297a6:	68a2      	ldr	r2, [r4, #8]
  4297a8:	6823      	ldr	r3, [r4, #0]
  4297aa:	eba2 020b 	sub.w	r2, r2, fp
  4297ae:	445b      	add	r3, fp
  4297b0:	60a2      	str	r2, [r4, #8]
  4297b2:	6023      	str	r3, [r4, #0]
  4297b4:	e7af      	b.n	429716 <__sfvwrite_r+0x152>
  4297b6:	6820      	ldr	r0, [r4, #0]
  4297b8:	46b8      	mov	r8, r7
  4297ba:	46ba      	mov	sl, r7
  4297bc:	46bb      	mov	fp, r7
  4297be:	e755      	b.n	42966c <__sfvwrite_r+0xa8>
  4297c0:	6962      	ldr	r2, [r4, #20]
  4297c2:	6820      	ldr	r0, [r4, #0]
  4297c4:	6921      	ldr	r1, [r4, #16]
  4297c6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4297ca:	eba0 0a01 	sub.w	sl, r0, r1
  4297ce:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4297d2:	f10a 0001 	add.w	r0, sl, #1
  4297d6:	ea4f 0868 	mov.w	r8, r8, asr #1
  4297da:	4438      	add	r0, r7
  4297dc:	4540      	cmp	r0, r8
  4297de:	4642      	mov	r2, r8
  4297e0:	bf84      	itt	hi
  4297e2:	4680      	movhi	r8, r0
  4297e4:	4642      	movhi	r2, r8
  4297e6:	055b      	lsls	r3, r3, #21
  4297e8:	d544      	bpl.n	429874 <__sfvwrite_r+0x2b0>
  4297ea:	4611      	mov	r1, r2
  4297ec:	9800      	ldr	r0, [sp, #0]
  4297ee:	f7fd fd4b 	bl	427288 <_malloc_r>
  4297f2:	4683      	mov	fp, r0
  4297f4:	2800      	cmp	r0, #0
  4297f6:	d055      	beq.n	4298a4 <__sfvwrite_r+0x2e0>
  4297f8:	4652      	mov	r2, sl
  4297fa:	6921      	ldr	r1, [r4, #16]
  4297fc:	f7fe f824 	bl	427848 <memcpy>
  429800:	89a3      	ldrh	r3, [r4, #12]
  429802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  429806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  42980a:	81a3      	strh	r3, [r4, #12]
  42980c:	eb0b 000a 	add.w	r0, fp, sl
  429810:	eba8 030a 	sub.w	r3, r8, sl
  429814:	f8c4 b010 	str.w	fp, [r4, #16]
  429818:	f8c4 8014 	str.w	r8, [r4, #20]
  42981c:	6020      	str	r0, [r4, #0]
  42981e:	60a3      	str	r3, [r4, #8]
  429820:	46b8      	mov	r8, r7
  429822:	46ba      	mov	sl, r7
  429824:	46bb      	mov	fp, r7
  429826:	e721      	b.n	42966c <__sfvwrite_r+0xa8>
  429828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  42982c:	42b9      	cmp	r1, r7
  42982e:	bf28      	it	cs
  429830:	4639      	movcs	r1, r7
  429832:	464a      	mov	r2, r9
  429834:	fb91 f1f3 	sdiv	r1, r1, r3
  429838:	9800      	ldr	r0, [sp, #0]
  42983a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  42983c:	fb03 f301 	mul.w	r3, r3, r1
  429840:	69e1      	ldr	r1, [r4, #28]
  429842:	47b0      	blx	r6
  429844:	f1b0 0a00 	subs.w	sl, r0, #0
  429848:	f73f af1b 	bgt.w	429682 <__sfvwrite_r+0xbe>
  42984c:	e738      	b.n	4296c0 <__sfvwrite_r+0xfc>
  42984e:	461a      	mov	r2, r3
  429850:	4629      	mov	r1, r5
  429852:	9301      	str	r3, [sp, #4]
  429854:	f000 f94c 	bl	429af0 <memmove>
  429858:	6822      	ldr	r2, [r4, #0]
  42985a:	9b01      	ldr	r3, [sp, #4]
  42985c:	9800      	ldr	r0, [sp, #0]
  42985e:	441a      	add	r2, r3
  429860:	6022      	str	r2, [r4, #0]
  429862:	4621      	mov	r1, r4
  429864:	f7ff fc4a 	bl	4290fc <_fflush_r>
  429868:	9b01      	ldr	r3, [sp, #4]
  42986a:	2800      	cmp	r0, #0
  42986c:	f47f af28 	bne.w	4296c0 <__sfvwrite_r+0xfc>
  429870:	461f      	mov	r7, r3
  429872:	e750      	b.n	429716 <__sfvwrite_r+0x152>
  429874:	9800      	ldr	r0, [sp, #0]
  429876:	f000 f99f 	bl	429bb8 <_realloc_r>
  42987a:	4683      	mov	fp, r0
  42987c:	2800      	cmp	r0, #0
  42987e:	d1c5      	bne.n	42980c <__sfvwrite_r+0x248>
  429880:	9d00      	ldr	r5, [sp, #0]
  429882:	6921      	ldr	r1, [r4, #16]
  429884:	4628      	mov	r0, r5
  429886:	f7ff fdb7 	bl	4293f8 <_free_r>
  42988a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42988e:	220c      	movs	r2, #12
  429890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  429894:	602a      	str	r2, [r5, #0]
  429896:	e715      	b.n	4296c4 <__sfvwrite_r+0x100>
  429898:	f106 0901 	add.w	r9, r6, #1
  42989c:	e722      	b.n	4296e4 <__sfvwrite_r+0x120>
  42989e:	f04f 30ff 	mov.w	r0, #4294967295
  4298a2:	e6bf      	b.n	429624 <__sfvwrite_r+0x60>
  4298a4:	9a00      	ldr	r2, [sp, #0]
  4298a6:	230c      	movs	r3, #12
  4298a8:	6013      	str	r3, [r2, #0]
  4298aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4298ae:	e709      	b.n	4296c4 <__sfvwrite_r+0x100>
  4298b0:	7ffffc00 	.word	0x7ffffc00

004298b4 <_fwalk_reent>:
  4298b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4298b8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4298bc:	d01f      	beq.n	4298fe <_fwalk_reent+0x4a>
  4298be:	4688      	mov	r8, r1
  4298c0:	4606      	mov	r6, r0
  4298c2:	f04f 0900 	mov.w	r9, #0
  4298c6:	687d      	ldr	r5, [r7, #4]
  4298c8:	68bc      	ldr	r4, [r7, #8]
  4298ca:	3d01      	subs	r5, #1
  4298cc:	d411      	bmi.n	4298f2 <_fwalk_reent+0x3e>
  4298ce:	89a3      	ldrh	r3, [r4, #12]
  4298d0:	2b01      	cmp	r3, #1
  4298d2:	f105 35ff 	add.w	r5, r5, #4294967295
  4298d6:	d908      	bls.n	4298ea <_fwalk_reent+0x36>
  4298d8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4298dc:	3301      	adds	r3, #1
  4298de:	4621      	mov	r1, r4
  4298e0:	4630      	mov	r0, r6
  4298e2:	d002      	beq.n	4298ea <_fwalk_reent+0x36>
  4298e4:	47c0      	blx	r8
  4298e6:	ea49 0900 	orr.w	r9, r9, r0
  4298ea:	1c6b      	adds	r3, r5, #1
  4298ec:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4298f0:	d1ed      	bne.n	4298ce <_fwalk_reent+0x1a>
  4298f2:	683f      	ldr	r7, [r7, #0]
  4298f4:	2f00      	cmp	r7, #0
  4298f6:	d1e6      	bne.n	4298c6 <_fwalk_reent+0x12>
  4298f8:	4648      	mov	r0, r9
  4298fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4298fe:	46b9      	mov	r9, r7
  429900:	4648      	mov	r0, r9
  429902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  429906:	bf00      	nop

00429908 <__locale_mb_cur_max>:
  429908:	4b04      	ldr	r3, [pc, #16]	; (42991c <__locale_mb_cur_max+0x14>)
  42990a:	4a05      	ldr	r2, [pc, #20]	; (429920 <__locale_mb_cur_max+0x18>)
  42990c:	681b      	ldr	r3, [r3, #0]
  42990e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  429910:	2b00      	cmp	r3, #0
  429912:	bf08      	it	eq
  429914:	4613      	moveq	r3, r2
  429916:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  42991a:	4770      	bx	lr
  42991c:	204000ec 	.word	0x204000ec
  429920:	2040092c 	.word	0x2040092c

00429924 <__retarget_lock_init_recursive>:
  429924:	4770      	bx	lr
  429926:	bf00      	nop

00429928 <__retarget_lock_close_recursive>:
  429928:	4770      	bx	lr
  42992a:	bf00      	nop

0042992c <__retarget_lock_acquire_recursive>:
  42992c:	4770      	bx	lr
  42992e:	bf00      	nop

00429930 <__retarget_lock_release_recursive>:
  429930:	4770      	bx	lr
  429932:	bf00      	nop

00429934 <__swhatbuf_r>:
  429934:	b570      	push	{r4, r5, r6, lr}
  429936:	460c      	mov	r4, r1
  429938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42993c:	2900      	cmp	r1, #0
  42993e:	b090      	sub	sp, #64	; 0x40
  429940:	4615      	mov	r5, r2
  429942:	461e      	mov	r6, r3
  429944:	db14      	blt.n	429970 <__swhatbuf_r+0x3c>
  429946:	aa01      	add	r2, sp, #4
  429948:	f000 fc9c 	bl	42a284 <_fstat_r>
  42994c:	2800      	cmp	r0, #0
  42994e:	db0f      	blt.n	429970 <__swhatbuf_r+0x3c>
  429950:	9a02      	ldr	r2, [sp, #8]
  429952:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  429956:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  42995a:	fab2 f282 	clz	r2, r2
  42995e:	0952      	lsrs	r2, r2, #5
  429960:	f44f 6380 	mov.w	r3, #1024	; 0x400
  429964:	f44f 6000 	mov.w	r0, #2048	; 0x800
  429968:	6032      	str	r2, [r6, #0]
  42996a:	602b      	str	r3, [r5, #0]
  42996c:	b010      	add	sp, #64	; 0x40
  42996e:	bd70      	pop	{r4, r5, r6, pc}
  429970:	89a2      	ldrh	r2, [r4, #12]
  429972:	2300      	movs	r3, #0
  429974:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  429978:	6033      	str	r3, [r6, #0]
  42997a:	d004      	beq.n	429986 <__swhatbuf_r+0x52>
  42997c:	2240      	movs	r2, #64	; 0x40
  42997e:	4618      	mov	r0, r3
  429980:	602a      	str	r2, [r5, #0]
  429982:	b010      	add	sp, #64	; 0x40
  429984:	bd70      	pop	{r4, r5, r6, pc}
  429986:	f44f 6380 	mov.w	r3, #1024	; 0x400
  42998a:	602b      	str	r3, [r5, #0]
  42998c:	b010      	add	sp, #64	; 0x40
  42998e:	bd70      	pop	{r4, r5, r6, pc}

00429990 <__smakebuf_r>:
  429990:	898a      	ldrh	r2, [r1, #12]
  429992:	0792      	lsls	r2, r2, #30
  429994:	460b      	mov	r3, r1
  429996:	d506      	bpl.n	4299a6 <__smakebuf_r+0x16>
  429998:	f101 0243 	add.w	r2, r1, #67	; 0x43
  42999c:	2101      	movs	r1, #1
  42999e:	601a      	str	r2, [r3, #0]
  4299a0:	611a      	str	r2, [r3, #16]
  4299a2:	6159      	str	r1, [r3, #20]
  4299a4:	4770      	bx	lr
  4299a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4299a8:	b083      	sub	sp, #12
  4299aa:	ab01      	add	r3, sp, #4
  4299ac:	466a      	mov	r2, sp
  4299ae:	460c      	mov	r4, r1
  4299b0:	4606      	mov	r6, r0
  4299b2:	f7ff ffbf 	bl	429934 <__swhatbuf_r>
  4299b6:	9900      	ldr	r1, [sp, #0]
  4299b8:	4605      	mov	r5, r0
  4299ba:	4630      	mov	r0, r6
  4299bc:	f7fd fc64 	bl	427288 <_malloc_r>
  4299c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4299c4:	b1d8      	cbz	r0, 4299fe <__smakebuf_r+0x6e>
  4299c6:	9a01      	ldr	r2, [sp, #4]
  4299c8:	4f15      	ldr	r7, [pc, #84]	; (429a20 <__smakebuf_r+0x90>)
  4299ca:	9900      	ldr	r1, [sp, #0]
  4299cc:	63f7      	str	r7, [r6, #60]	; 0x3c
  4299ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4299d2:	81a3      	strh	r3, [r4, #12]
  4299d4:	6020      	str	r0, [r4, #0]
  4299d6:	6120      	str	r0, [r4, #16]
  4299d8:	6161      	str	r1, [r4, #20]
  4299da:	b91a      	cbnz	r2, 4299e4 <__smakebuf_r+0x54>
  4299dc:	432b      	orrs	r3, r5
  4299de:	81a3      	strh	r3, [r4, #12]
  4299e0:	b003      	add	sp, #12
  4299e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4299e4:	4630      	mov	r0, r6
  4299e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4299ea:	f000 fc5f 	bl	42a2ac <_isatty_r>
  4299ee:	b1a0      	cbz	r0, 429a1a <__smakebuf_r+0x8a>
  4299f0:	89a3      	ldrh	r3, [r4, #12]
  4299f2:	f023 0303 	bic.w	r3, r3, #3
  4299f6:	f043 0301 	orr.w	r3, r3, #1
  4299fa:	b21b      	sxth	r3, r3
  4299fc:	e7ee      	b.n	4299dc <__smakebuf_r+0x4c>
  4299fe:	059a      	lsls	r2, r3, #22
  429a00:	d4ee      	bmi.n	4299e0 <__smakebuf_r+0x50>
  429a02:	f023 0303 	bic.w	r3, r3, #3
  429a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
  429a0a:	f043 0302 	orr.w	r3, r3, #2
  429a0e:	2101      	movs	r1, #1
  429a10:	81a3      	strh	r3, [r4, #12]
  429a12:	6022      	str	r2, [r4, #0]
  429a14:	6122      	str	r2, [r4, #16]
  429a16:	6161      	str	r1, [r4, #20]
  429a18:	e7e2      	b.n	4299e0 <__smakebuf_r+0x50>
  429a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429a1e:	e7dd      	b.n	4299dc <__smakebuf_r+0x4c>
  429a20:	00429151 	.word	0x00429151

00429a24 <__ascii_mbtowc>:
  429a24:	b082      	sub	sp, #8
  429a26:	b149      	cbz	r1, 429a3c <__ascii_mbtowc+0x18>
  429a28:	b15a      	cbz	r2, 429a42 <__ascii_mbtowc+0x1e>
  429a2a:	b16b      	cbz	r3, 429a48 <__ascii_mbtowc+0x24>
  429a2c:	7813      	ldrb	r3, [r2, #0]
  429a2e:	600b      	str	r3, [r1, #0]
  429a30:	7812      	ldrb	r2, [r2, #0]
  429a32:	1c10      	adds	r0, r2, #0
  429a34:	bf18      	it	ne
  429a36:	2001      	movne	r0, #1
  429a38:	b002      	add	sp, #8
  429a3a:	4770      	bx	lr
  429a3c:	a901      	add	r1, sp, #4
  429a3e:	2a00      	cmp	r2, #0
  429a40:	d1f3      	bne.n	429a2a <__ascii_mbtowc+0x6>
  429a42:	4610      	mov	r0, r2
  429a44:	b002      	add	sp, #8
  429a46:	4770      	bx	lr
  429a48:	f06f 0001 	mvn.w	r0, #1
  429a4c:	e7f4      	b.n	429a38 <__ascii_mbtowc+0x14>
  429a4e:	bf00      	nop

00429a50 <memchr>:
  429a50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  429a54:	2a10      	cmp	r2, #16
  429a56:	db2b      	blt.n	429ab0 <memchr+0x60>
  429a58:	f010 0f07 	tst.w	r0, #7
  429a5c:	d008      	beq.n	429a70 <memchr+0x20>
  429a5e:	f810 3b01 	ldrb.w	r3, [r0], #1
  429a62:	3a01      	subs	r2, #1
  429a64:	428b      	cmp	r3, r1
  429a66:	d02d      	beq.n	429ac4 <memchr+0x74>
  429a68:	f010 0f07 	tst.w	r0, #7
  429a6c:	b342      	cbz	r2, 429ac0 <memchr+0x70>
  429a6e:	d1f6      	bne.n	429a5e <memchr+0xe>
  429a70:	b4f0      	push	{r4, r5, r6, r7}
  429a72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  429a76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  429a7a:	f022 0407 	bic.w	r4, r2, #7
  429a7e:	f07f 0700 	mvns.w	r7, #0
  429a82:	2300      	movs	r3, #0
  429a84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  429a88:	3c08      	subs	r4, #8
  429a8a:	ea85 0501 	eor.w	r5, r5, r1
  429a8e:	ea86 0601 	eor.w	r6, r6, r1
  429a92:	fa85 f547 	uadd8	r5, r5, r7
  429a96:	faa3 f587 	sel	r5, r3, r7
  429a9a:	fa86 f647 	uadd8	r6, r6, r7
  429a9e:	faa5 f687 	sel	r6, r5, r7
  429aa2:	b98e      	cbnz	r6, 429ac8 <memchr+0x78>
  429aa4:	d1ee      	bne.n	429a84 <memchr+0x34>
  429aa6:	bcf0      	pop	{r4, r5, r6, r7}
  429aa8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  429aac:	f002 0207 	and.w	r2, r2, #7
  429ab0:	b132      	cbz	r2, 429ac0 <memchr+0x70>
  429ab2:	f810 3b01 	ldrb.w	r3, [r0], #1
  429ab6:	3a01      	subs	r2, #1
  429ab8:	ea83 0301 	eor.w	r3, r3, r1
  429abc:	b113      	cbz	r3, 429ac4 <memchr+0x74>
  429abe:	d1f8      	bne.n	429ab2 <memchr+0x62>
  429ac0:	2000      	movs	r0, #0
  429ac2:	4770      	bx	lr
  429ac4:	3801      	subs	r0, #1
  429ac6:	4770      	bx	lr
  429ac8:	2d00      	cmp	r5, #0
  429aca:	bf06      	itte	eq
  429acc:	4635      	moveq	r5, r6
  429ace:	3803      	subeq	r0, #3
  429ad0:	3807      	subne	r0, #7
  429ad2:	f015 0f01 	tst.w	r5, #1
  429ad6:	d107      	bne.n	429ae8 <memchr+0x98>
  429ad8:	3001      	adds	r0, #1
  429ada:	f415 7f80 	tst.w	r5, #256	; 0x100
  429ade:	bf02      	ittt	eq
  429ae0:	3001      	addeq	r0, #1
  429ae2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  429ae6:	3001      	addeq	r0, #1
  429ae8:	bcf0      	pop	{r4, r5, r6, r7}
  429aea:	3801      	subs	r0, #1
  429aec:	4770      	bx	lr
  429aee:	bf00      	nop

00429af0 <memmove>:
  429af0:	4288      	cmp	r0, r1
  429af2:	b5f0      	push	{r4, r5, r6, r7, lr}
  429af4:	d90d      	bls.n	429b12 <memmove+0x22>
  429af6:	188b      	adds	r3, r1, r2
  429af8:	4298      	cmp	r0, r3
  429afa:	d20a      	bcs.n	429b12 <memmove+0x22>
  429afc:	1884      	adds	r4, r0, r2
  429afe:	2a00      	cmp	r2, #0
  429b00:	d051      	beq.n	429ba6 <memmove+0xb6>
  429b02:	4622      	mov	r2, r4
  429b04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  429b08:	f802 4d01 	strb.w	r4, [r2, #-1]!
  429b0c:	4299      	cmp	r1, r3
  429b0e:	d1f9      	bne.n	429b04 <memmove+0x14>
  429b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  429b12:	2a0f      	cmp	r2, #15
  429b14:	d948      	bls.n	429ba8 <memmove+0xb8>
  429b16:	ea41 0300 	orr.w	r3, r1, r0
  429b1a:	079b      	lsls	r3, r3, #30
  429b1c:	d146      	bne.n	429bac <memmove+0xbc>
  429b1e:	f100 0410 	add.w	r4, r0, #16
  429b22:	f101 0310 	add.w	r3, r1, #16
  429b26:	4615      	mov	r5, r2
  429b28:	f853 6c10 	ldr.w	r6, [r3, #-16]
  429b2c:	f844 6c10 	str.w	r6, [r4, #-16]
  429b30:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  429b34:	f844 6c0c 	str.w	r6, [r4, #-12]
  429b38:	f853 6c08 	ldr.w	r6, [r3, #-8]
  429b3c:	f844 6c08 	str.w	r6, [r4, #-8]
  429b40:	3d10      	subs	r5, #16
  429b42:	f853 6c04 	ldr.w	r6, [r3, #-4]
  429b46:	f844 6c04 	str.w	r6, [r4, #-4]
  429b4a:	2d0f      	cmp	r5, #15
  429b4c:	f103 0310 	add.w	r3, r3, #16
  429b50:	f104 0410 	add.w	r4, r4, #16
  429b54:	d8e8      	bhi.n	429b28 <memmove+0x38>
  429b56:	f1a2 0310 	sub.w	r3, r2, #16
  429b5a:	f023 030f 	bic.w	r3, r3, #15
  429b5e:	f002 0e0f 	and.w	lr, r2, #15
  429b62:	3310      	adds	r3, #16
  429b64:	f1be 0f03 	cmp.w	lr, #3
  429b68:	4419      	add	r1, r3
  429b6a:	4403      	add	r3, r0
  429b6c:	d921      	bls.n	429bb2 <memmove+0xc2>
  429b6e:	1f1e      	subs	r6, r3, #4
  429b70:	460d      	mov	r5, r1
  429b72:	4674      	mov	r4, lr
  429b74:	3c04      	subs	r4, #4
  429b76:	f855 7b04 	ldr.w	r7, [r5], #4
  429b7a:	f846 7f04 	str.w	r7, [r6, #4]!
  429b7e:	2c03      	cmp	r4, #3
  429b80:	d8f8      	bhi.n	429b74 <memmove+0x84>
  429b82:	f1ae 0404 	sub.w	r4, lr, #4
  429b86:	f024 0403 	bic.w	r4, r4, #3
  429b8a:	3404      	adds	r4, #4
  429b8c:	4421      	add	r1, r4
  429b8e:	4423      	add	r3, r4
  429b90:	f002 0203 	and.w	r2, r2, #3
  429b94:	b162      	cbz	r2, 429bb0 <memmove+0xc0>
  429b96:	3b01      	subs	r3, #1
  429b98:	440a      	add	r2, r1
  429b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
  429b9e:	f803 4f01 	strb.w	r4, [r3, #1]!
  429ba2:	428a      	cmp	r2, r1
  429ba4:	d1f9      	bne.n	429b9a <memmove+0xaa>
  429ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  429ba8:	4603      	mov	r3, r0
  429baa:	e7f3      	b.n	429b94 <memmove+0xa4>
  429bac:	4603      	mov	r3, r0
  429bae:	e7f2      	b.n	429b96 <memmove+0xa6>
  429bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  429bb2:	4672      	mov	r2, lr
  429bb4:	e7ee      	b.n	429b94 <memmove+0xa4>
  429bb6:	bf00      	nop

00429bb8 <_realloc_r>:
  429bb8:	2900      	cmp	r1, #0
  429bba:	f000 8095 	beq.w	429ce8 <_realloc_r+0x130>
  429bbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  429bc2:	460d      	mov	r5, r1
  429bc4:	4616      	mov	r6, r2
  429bc6:	b083      	sub	sp, #12
  429bc8:	4680      	mov	r8, r0
  429bca:	f106 070b 	add.w	r7, r6, #11
  429bce:	f7fd ff23 	bl	427a18 <__malloc_lock>
  429bd2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  429bd6:	2f16      	cmp	r7, #22
  429bd8:	f02e 0403 	bic.w	r4, lr, #3
  429bdc:	f1a5 0908 	sub.w	r9, r5, #8
  429be0:	d83c      	bhi.n	429c5c <_realloc_r+0xa4>
  429be2:	2210      	movs	r2, #16
  429be4:	4617      	mov	r7, r2
  429be6:	42be      	cmp	r6, r7
  429be8:	d83d      	bhi.n	429c66 <_realloc_r+0xae>
  429bea:	4294      	cmp	r4, r2
  429bec:	da43      	bge.n	429c76 <_realloc_r+0xbe>
  429bee:	4bc4      	ldr	r3, [pc, #784]	; (429f00 <_realloc_r+0x348>)
  429bf0:	6899      	ldr	r1, [r3, #8]
  429bf2:	eb09 0004 	add.w	r0, r9, r4
  429bf6:	4288      	cmp	r0, r1
  429bf8:	f000 80b4 	beq.w	429d64 <_realloc_r+0x1ac>
  429bfc:	6843      	ldr	r3, [r0, #4]
  429bfe:	f023 0101 	bic.w	r1, r3, #1
  429c02:	4401      	add	r1, r0
  429c04:	6849      	ldr	r1, [r1, #4]
  429c06:	07c9      	lsls	r1, r1, #31
  429c08:	d54c      	bpl.n	429ca4 <_realloc_r+0xec>
  429c0a:	f01e 0f01 	tst.w	lr, #1
  429c0e:	f000 809b 	beq.w	429d48 <_realloc_r+0x190>
  429c12:	4631      	mov	r1, r6
  429c14:	4640      	mov	r0, r8
  429c16:	f7fd fb37 	bl	427288 <_malloc_r>
  429c1a:	4606      	mov	r6, r0
  429c1c:	2800      	cmp	r0, #0
  429c1e:	d03a      	beq.n	429c96 <_realloc_r+0xde>
  429c20:	f855 3c04 	ldr.w	r3, [r5, #-4]
  429c24:	f023 0301 	bic.w	r3, r3, #1
  429c28:	444b      	add	r3, r9
  429c2a:	f1a0 0208 	sub.w	r2, r0, #8
  429c2e:	429a      	cmp	r2, r3
  429c30:	f000 8121 	beq.w	429e76 <_realloc_r+0x2be>
  429c34:	1f22      	subs	r2, r4, #4
  429c36:	2a24      	cmp	r2, #36	; 0x24
  429c38:	f200 8107 	bhi.w	429e4a <_realloc_r+0x292>
  429c3c:	2a13      	cmp	r2, #19
  429c3e:	f200 80db 	bhi.w	429df8 <_realloc_r+0x240>
  429c42:	4603      	mov	r3, r0
  429c44:	462a      	mov	r2, r5
  429c46:	6811      	ldr	r1, [r2, #0]
  429c48:	6019      	str	r1, [r3, #0]
  429c4a:	6851      	ldr	r1, [r2, #4]
  429c4c:	6059      	str	r1, [r3, #4]
  429c4e:	6892      	ldr	r2, [r2, #8]
  429c50:	609a      	str	r2, [r3, #8]
  429c52:	4629      	mov	r1, r5
  429c54:	4640      	mov	r0, r8
  429c56:	f7ff fbcf 	bl	4293f8 <_free_r>
  429c5a:	e01c      	b.n	429c96 <_realloc_r+0xde>
  429c5c:	f027 0707 	bic.w	r7, r7, #7
  429c60:	2f00      	cmp	r7, #0
  429c62:	463a      	mov	r2, r7
  429c64:	dabf      	bge.n	429be6 <_realloc_r+0x2e>
  429c66:	2600      	movs	r6, #0
  429c68:	230c      	movs	r3, #12
  429c6a:	4630      	mov	r0, r6
  429c6c:	f8c8 3000 	str.w	r3, [r8]
  429c70:	b003      	add	sp, #12
  429c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429c76:	462e      	mov	r6, r5
  429c78:	1be3      	subs	r3, r4, r7
  429c7a:	2b0f      	cmp	r3, #15
  429c7c:	d81e      	bhi.n	429cbc <_realloc_r+0x104>
  429c7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  429c82:	f003 0301 	and.w	r3, r3, #1
  429c86:	4323      	orrs	r3, r4
  429c88:	444c      	add	r4, r9
  429c8a:	f8c9 3004 	str.w	r3, [r9, #4]
  429c8e:	6863      	ldr	r3, [r4, #4]
  429c90:	f043 0301 	orr.w	r3, r3, #1
  429c94:	6063      	str	r3, [r4, #4]
  429c96:	4640      	mov	r0, r8
  429c98:	f7fd fec4 	bl	427a24 <__malloc_unlock>
  429c9c:	4630      	mov	r0, r6
  429c9e:	b003      	add	sp, #12
  429ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429ca4:	f023 0303 	bic.w	r3, r3, #3
  429ca8:	18e1      	adds	r1, r4, r3
  429caa:	4291      	cmp	r1, r2
  429cac:	db1f      	blt.n	429cee <_realloc_r+0x136>
  429cae:	68c3      	ldr	r3, [r0, #12]
  429cb0:	6882      	ldr	r2, [r0, #8]
  429cb2:	462e      	mov	r6, r5
  429cb4:	60d3      	str	r3, [r2, #12]
  429cb6:	460c      	mov	r4, r1
  429cb8:	609a      	str	r2, [r3, #8]
  429cba:	e7dd      	b.n	429c78 <_realloc_r+0xc0>
  429cbc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  429cc0:	eb09 0107 	add.w	r1, r9, r7
  429cc4:	f002 0201 	and.w	r2, r2, #1
  429cc8:	444c      	add	r4, r9
  429cca:	f043 0301 	orr.w	r3, r3, #1
  429cce:	4317      	orrs	r7, r2
  429cd0:	f8c9 7004 	str.w	r7, [r9, #4]
  429cd4:	604b      	str	r3, [r1, #4]
  429cd6:	6863      	ldr	r3, [r4, #4]
  429cd8:	f043 0301 	orr.w	r3, r3, #1
  429cdc:	3108      	adds	r1, #8
  429cde:	6063      	str	r3, [r4, #4]
  429ce0:	4640      	mov	r0, r8
  429ce2:	f7ff fb89 	bl	4293f8 <_free_r>
  429ce6:	e7d6      	b.n	429c96 <_realloc_r+0xde>
  429ce8:	4611      	mov	r1, r2
  429cea:	f7fd bacd 	b.w	427288 <_malloc_r>
  429cee:	f01e 0f01 	tst.w	lr, #1
  429cf2:	d18e      	bne.n	429c12 <_realloc_r+0x5a>
  429cf4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  429cf8:	eba9 0a01 	sub.w	sl, r9, r1
  429cfc:	f8da 1004 	ldr.w	r1, [sl, #4]
  429d00:	f021 0103 	bic.w	r1, r1, #3
  429d04:	440b      	add	r3, r1
  429d06:	4423      	add	r3, r4
  429d08:	4293      	cmp	r3, r2
  429d0a:	db25      	blt.n	429d58 <_realloc_r+0x1a0>
  429d0c:	68c2      	ldr	r2, [r0, #12]
  429d0e:	6881      	ldr	r1, [r0, #8]
  429d10:	4656      	mov	r6, sl
  429d12:	60ca      	str	r2, [r1, #12]
  429d14:	6091      	str	r1, [r2, #8]
  429d16:	f8da 100c 	ldr.w	r1, [sl, #12]
  429d1a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  429d1e:	1f22      	subs	r2, r4, #4
  429d20:	2a24      	cmp	r2, #36	; 0x24
  429d22:	60c1      	str	r1, [r0, #12]
  429d24:	6088      	str	r0, [r1, #8]
  429d26:	f200 8094 	bhi.w	429e52 <_realloc_r+0x29a>
  429d2a:	2a13      	cmp	r2, #19
  429d2c:	d96f      	bls.n	429e0e <_realloc_r+0x256>
  429d2e:	6829      	ldr	r1, [r5, #0]
  429d30:	f8ca 1008 	str.w	r1, [sl, #8]
  429d34:	6869      	ldr	r1, [r5, #4]
  429d36:	f8ca 100c 	str.w	r1, [sl, #12]
  429d3a:	2a1b      	cmp	r2, #27
  429d3c:	f200 80a2 	bhi.w	429e84 <_realloc_r+0x2cc>
  429d40:	3508      	adds	r5, #8
  429d42:	f10a 0210 	add.w	r2, sl, #16
  429d46:	e063      	b.n	429e10 <_realloc_r+0x258>
  429d48:	f855 3c08 	ldr.w	r3, [r5, #-8]
  429d4c:	eba9 0a03 	sub.w	sl, r9, r3
  429d50:	f8da 1004 	ldr.w	r1, [sl, #4]
  429d54:	f021 0103 	bic.w	r1, r1, #3
  429d58:	1863      	adds	r3, r4, r1
  429d5a:	4293      	cmp	r3, r2
  429d5c:	f6ff af59 	blt.w	429c12 <_realloc_r+0x5a>
  429d60:	4656      	mov	r6, sl
  429d62:	e7d8      	b.n	429d16 <_realloc_r+0x15e>
  429d64:	6841      	ldr	r1, [r0, #4]
  429d66:	f021 0b03 	bic.w	fp, r1, #3
  429d6a:	44a3      	add	fp, r4
  429d6c:	f107 0010 	add.w	r0, r7, #16
  429d70:	4583      	cmp	fp, r0
  429d72:	da56      	bge.n	429e22 <_realloc_r+0x26a>
  429d74:	f01e 0f01 	tst.w	lr, #1
  429d78:	f47f af4b 	bne.w	429c12 <_realloc_r+0x5a>
  429d7c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  429d80:	eba9 0a01 	sub.w	sl, r9, r1
  429d84:	f8da 1004 	ldr.w	r1, [sl, #4]
  429d88:	f021 0103 	bic.w	r1, r1, #3
  429d8c:	448b      	add	fp, r1
  429d8e:	4558      	cmp	r0, fp
  429d90:	dce2      	bgt.n	429d58 <_realloc_r+0x1a0>
  429d92:	4656      	mov	r6, sl
  429d94:	f8da 100c 	ldr.w	r1, [sl, #12]
  429d98:	f856 0f08 	ldr.w	r0, [r6, #8]!
  429d9c:	1f22      	subs	r2, r4, #4
  429d9e:	2a24      	cmp	r2, #36	; 0x24
  429da0:	60c1      	str	r1, [r0, #12]
  429da2:	6088      	str	r0, [r1, #8]
  429da4:	f200 808f 	bhi.w	429ec6 <_realloc_r+0x30e>
  429da8:	2a13      	cmp	r2, #19
  429daa:	f240 808a 	bls.w	429ec2 <_realloc_r+0x30a>
  429dae:	6829      	ldr	r1, [r5, #0]
  429db0:	f8ca 1008 	str.w	r1, [sl, #8]
  429db4:	6869      	ldr	r1, [r5, #4]
  429db6:	f8ca 100c 	str.w	r1, [sl, #12]
  429dba:	2a1b      	cmp	r2, #27
  429dbc:	f200 808a 	bhi.w	429ed4 <_realloc_r+0x31c>
  429dc0:	3508      	adds	r5, #8
  429dc2:	f10a 0210 	add.w	r2, sl, #16
  429dc6:	6829      	ldr	r1, [r5, #0]
  429dc8:	6011      	str	r1, [r2, #0]
  429dca:	6869      	ldr	r1, [r5, #4]
  429dcc:	6051      	str	r1, [r2, #4]
  429dce:	68a9      	ldr	r1, [r5, #8]
  429dd0:	6091      	str	r1, [r2, #8]
  429dd2:	eb0a 0107 	add.w	r1, sl, r7
  429dd6:	ebab 0207 	sub.w	r2, fp, r7
  429dda:	f042 0201 	orr.w	r2, r2, #1
  429dde:	6099      	str	r1, [r3, #8]
  429de0:	604a      	str	r2, [r1, #4]
  429de2:	f8da 3004 	ldr.w	r3, [sl, #4]
  429de6:	f003 0301 	and.w	r3, r3, #1
  429dea:	431f      	orrs	r7, r3
  429dec:	4640      	mov	r0, r8
  429dee:	f8ca 7004 	str.w	r7, [sl, #4]
  429df2:	f7fd fe17 	bl	427a24 <__malloc_unlock>
  429df6:	e751      	b.n	429c9c <_realloc_r+0xe4>
  429df8:	682b      	ldr	r3, [r5, #0]
  429dfa:	6003      	str	r3, [r0, #0]
  429dfc:	686b      	ldr	r3, [r5, #4]
  429dfe:	6043      	str	r3, [r0, #4]
  429e00:	2a1b      	cmp	r2, #27
  429e02:	d82d      	bhi.n	429e60 <_realloc_r+0x2a8>
  429e04:	f100 0308 	add.w	r3, r0, #8
  429e08:	f105 0208 	add.w	r2, r5, #8
  429e0c:	e71b      	b.n	429c46 <_realloc_r+0x8e>
  429e0e:	4632      	mov	r2, r6
  429e10:	6829      	ldr	r1, [r5, #0]
  429e12:	6011      	str	r1, [r2, #0]
  429e14:	6869      	ldr	r1, [r5, #4]
  429e16:	6051      	str	r1, [r2, #4]
  429e18:	68a9      	ldr	r1, [r5, #8]
  429e1a:	6091      	str	r1, [r2, #8]
  429e1c:	461c      	mov	r4, r3
  429e1e:	46d1      	mov	r9, sl
  429e20:	e72a      	b.n	429c78 <_realloc_r+0xc0>
  429e22:	eb09 0107 	add.w	r1, r9, r7
  429e26:	ebab 0b07 	sub.w	fp, fp, r7
  429e2a:	f04b 0201 	orr.w	r2, fp, #1
  429e2e:	6099      	str	r1, [r3, #8]
  429e30:	604a      	str	r2, [r1, #4]
  429e32:	f855 3c04 	ldr.w	r3, [r5, #-4]
  429e36:	f003 0301 	and.w	r3, r3, #1
  429e3a:	431f      	orrs	r7, r3
  429e3c:	4640      	mov	r0, r8
  429e3e:	f845 7c04 	str.w	r7, [r5, #-4]
  429e42:	f7fd fdef 	bl	427a24 <__malloc_unlock>
  429e46:	462e      	mov	r6, r5
  429e48:	e728      	b.n	429c9c <_realloc_r+0xe4>
  429e4a:	4629      	mov	r1, r5
  429e4c:	f7ff fe50 	bl	429af0 <memmove>
  429e50:	e6ff      	b.n	429c52 <_realloc_r+0x9a>
  429e52:	4629      	mov	r1, r5
  429e54:	4630      	mov	r0, r6
  429e56:	461c      	mov	r4, r3
  429e58:	46d1      	mov	r9, sl
  429e5a:	f7ff fe49 	bl	429af0 <memmove>
  429e5e:	e70b      	b.n	429c78 <_realloc_r+0xc0>
  429e60:	68ab      	ldr	r3, [r5, #8]
  429e62:	6083      	str	r3, [r0, #8]
  429e64:	68eb      	ldr	r3, [r5, #12]
  429e66:	60c3      	str	r3, [r0, #12]
  429e68:	2a24      	cmp	r2, #36	; 0x24
  429e6a:	d017      	beq.n	429e9c <_realloc_r+0x2e4>
  429e6c:	f100 0310 	add.w	r3, r0, #16
  429e70:	f105 0210 	add.w	r2, r5, #16
  429e74:	e6e7      	b.n	429c46 <_realloc_r+0x8e>
  429e76:	f850 3c04 	ldr.w	r3, [r0, #-4]
  429e7a:	f023 0303 	bic.w	r3, r3, #3
  429e7e:	441c      	add	r4, r3
  429e80:	462e      	mov	r6, r5
  429e82:	e6f9      	b.n	429c78 <_realloc_r+0xc0>
  429e84:	68a9      	ldr	r1, [r5, #8]
  429e86:	f8ca 1010 	str.w	r1, [sl, #16]
  429e8a:	68e9      	ldr	r1, [r5, #12]
  429e8c:	f8ca 1014 	str.w	r1, [sl, #20]
  429e90:	2a24      	cmp	r2, #36	; 0x24
  429e92:	d00c      	beq.n	429eae <_realloc_r+0x2f6>
  429e94:	3510      	adds	r5, #16
  429e96:	f10a 0218 	add.w	r2, sl, #24
  429e9a:	e7b9      	b.n	429e10 <_realloc_r+0x258>
  429e9c:	692b      	ldr	r3, [r5, #16]
  429e9e:	6103      	str	r3, [r0, #16]
  429ea0:	696b      	ldr	r3, [r5, #20]
  429ea2:	6143      	str	r3, [r0, #20]
  429ea4:	f105 0218 	add.w	r2, r5, #24
  429ea8:	f100 0318 	add.w	r3, r0, #24
  429eac:	e6cb      	b.n	429c46 <_realloc_r+0x8e>
  429eae:	692a      	ldr	r2, [r5, #16]
  429eb0:	f8ca 2018 	str.w	r2, [sl, #24]
  429eb4:	696a      	ldr	r2, [r5, #20]
  429eb6:	f8ca 201c 	str.w	r2, [sl, #28]
  429eba:	3518      	adds	r5, #24
  429ebc:	f10a 0220 	add.w	r2, sl, #32
  429ec0:	e7a6      	b.n	429e10 <_realloc_r+0x258>
  429ec2:	4632      	mov	r2, r6
  429ec4:	e77f      	b.n	429dc6 <_realloc_r+0x20e>
  429ec6:	4629      	mov	r1, r5
  429ec8:	4630      	mov	r0, r6
  429eca:	9301      	str	r3, [sp, #4]
  429ecc:	f7ff fe10 	bl	429af0 <memmove>
  429ed0:	9b01      	ldr	r3, [sp, #4]
  429ed2:	e77e      	b.n	429dd2 <_realloc_r+0x21a>
  429ed4:	68a9      	ldr	r1, [r5, #8]
  429ed6:	f8ca 1010 	str.w	r1, [sl, #16]
  429eda:	68e9      	ldr	r1, [r5, #12]
  429edc:	f8ca 1014 	str.w	r1, [sl, #20]
  429ee0:	2a24      	cmp	r2, #36	; 0x24
  429ee2:	d003      	beq.n	429eec <_realloc_r+0x334>
  429ee4:	3510      	adds	r5, #16
  429ee6:	f10a 0218 	add.w	r2, sl, #24
  429eea:	e76c      	b.n	429dc6 <_realloc_r+0x20e>
  429eec:	692a      	ldr	r2, [r5, #16]
  429eee:	f8ca 2018 	str.w	r2, [sl, #24]
  429ef2:	696a      	ldr	r2, [r5, #20]
  429ef4:	f8ca 201c 	str.w	r2, [sl, #28]
  429ef8:	3518      	adds	r5, #24
  429efa:	f10a 0220 	add.w	r2, sl, #32
  429efe:	e762      	b.n	429dc6 <_realloc_r+0x20e>
  429f00:	20400518 	.word	0x20400518

00429f04 <__sread>:
  429f04:	b510      	push	{r4, lr}
  429f06:	460c      	mov	r4, r1
  429f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  429f0c:	f000 f9f6 	bl	42a2fc <_read_r>
  429f10:	2800      	cmp	r0, #0
  429f12:	db03      	blt.n	429f1c <__sread+0x18>
  429f14:	6d23      	ldr	r3, [r4, #80]	; 0x50
  429f16:	4403      	add	r3, r0
  429f18:	6523      	str	r3, [r4, #80]	; 0x50
  429f1a:	bd10      	pop	{r4, pc}
  429f1c:	89a3      	ldrh	r3, [r4, #12]
  429f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  429f22:	81a3      	strh	r3, [r4, #12]
  429f24:	bd10      	pop	{r4, pc}
  429f26:	bf00      	nop

00429f28 <__swrite>:
  429f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  429f2c:	4616      	mov	r6, r2
  429f2e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  429f32:	461f      	mov	r7, r3
  429f34:	05d3      	lsls	r3, r2, #23
  429f36:	460c      	mov	r4, r1
  429f38:	4605      	mov	r5, r0
  429f3a:	d507      	bpl.n	429f4c <__swrite+0x24>
  429f3c:	2200      	movs	r2, #0
  429f3e:	2302      	movs	r3, #2
  429f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  429f44:	f000 f9c4 	bl	42a2d0 <_lseek_r>
  429f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  429f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  429f50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  429f54:	81a2      	strh	r2, [r4, #12]
  429f56:	463b      	mov	r3, r7
  429f58:	4632      	mov	r2, r6
  429f5a:	4628      	mov	r0, r5
  429f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  429f60:	f000 b8a4 	b.w	42a0ac <_write_r>

00429f64 <__sseek>:
  429f64:	b510      	push	{r4, lr}
  429f66:	460c      	mov	r4, r1
  429f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  429f6c:	f000 f9b0 	bl	42a2d0 <_lseek_r>
  429f70:	89a3      	ldrh	r3, [r4, #12]
  429f72:	1c42      	adds	r2, r0, #1
  429f74:	bf0e      	itee	eq
  429f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  429f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  429f7e:	6520      	strne	r0, [r4, #80]	; 0x50
  429f80:	81a3      	strh	r3, [r4, #12]
  429f82:	bd10      	pop	{r4, pc}

00429f84 <__sclose>:
  429f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  429f88:	f000 b908 	b.w	42a19c <_close_r>

00429f8c <__swbuf_r>:
  429f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  429f8e:	460d      	mov	r5, r1
  429f90:	4614      	mov	r4, r2
  429f92:	4606      	mov	r6, r0
  429f94:	b110      	cbz	r0, 429f9c <__swbuf_r+0x10>
  429f96:	6b83      	ldr	r3, [r0, #56]	; 0x38
  429f98:	2b00      	cmp	r3, #0
  429f9a:	d04b      	beq.n	42a034 <__swbuf_r+0xa8>
  429f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  429fa0:	69a3      	ldr	r3, [r4, #24]
  429fa2:	60a3      	str	r3, [r4, #8]
  429fa4:	b291      	uxth	r1, r2
  429fa6:	0708      	lsls	r0, r1, #28
  429fa8:	d539      	bpl.n	42a01e <__swbuf_r+0x92>
  429faa:	6923      	ldr	r3, [r4, #16]
  429fac:	2b00      	cmp	r3, #0
  429fae:	d036      	beq.n	42a01e <__swbuf_r+0x92>
  429fb0:	b2ed      	uxtb	r5, r5
  429fb2:	0489      	lsls	r1, r1, #18
  429fb4:	462f      	mov	r7, r5
  429fb6:	d515      	bpl.n	429fe4 <__swbuf_r+0x58>
  429fb8:	6822      	ldr	r2, [r4, #0]
  429fba:	6961      	ldr	r1, [r4, #20]
  429fbc:	1ad3      	subs	r3, r2, r3
  429fbe:	428b      	cmp	r3, r1
  429fc0:	da1c      	bge.n	429ffc <__swbuf_r+0x70>
  429fc2:	3301      	adds	r3, #1
  429fc4:	68a1      	ldr	r1, [r4, #8]
  429fc6:	1c50      	adds	r0, r2, #1
  429fc8:	3901      	subs	r1, #1
  429fca:	60a1      	str	r1, [r4, #8]
  429fcc:	6020      	str	r0, [r4, #0]
  429fce:	7015      	strb	r5, [r2, #0]
  429fd0:	6962      	ldr	r2, [r4, #20]
  429fd2:	429a      	cmp	r2, r3
  429fd4:	d01a      	beq.n	42a00c <__swbuf_r+0x80>
  429fd6:	89a3      	ldrh	r3, [r4, #12]
  429fd8:	07db      	lsls	r3, r3, #31
  429fda:	d501      	bpl.n	429fe0 <__swbuf_r+0x54>
  429fdc:	2d0a      	cmp	r5, #10
  429fde:	d015      	beq.n	42a00c <__swbuf_r+0x80>
  429fe0:	4638      	mov	r0, r7
  429fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  429fe4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  429fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  429fea:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  429fee:	81a2      	strh	r2, [r4, #12]
  429ff0:	6822      	ldr	r2, [r4, #0]
  429ff2:	6661      	str	r1, [r4, #100]	; 0x64
  429ff4:	6961      	ldr	r1, [r4, #20]
  429ff6:	1ad3      	subs	r3, r2, r3
  429ff8:	428b      	cmp	r3, r1
  429ffa:	dbe2      	blt.n	429fc2 <__swbuf_r+0x36>
  429ffc:	4621      	mov	r1, r4
  429ffe:	4630      	mov	r0, r6
  42a000:	f7ff f87c 	bl	4290fc <_fflush_r>
  42a004:	b940      	cbnz	r0, 42a018 <__swbuf_r+0x8c>
  42a006:	6822      	ldr	r2, [r4, #0]
  42a008:	2301      	movs	r3, #1
  42a00a:	e7db      	b.n	429fc4 <__swbuf_r+0x38>
  42a00c:	4621      	mov	r1, r4
  42a00e:	4630      	mov	r0, r6
  42a010:	f7ff f874 	bl	4290fc <_fflush_r>
  42a014:	2800      	cmp	r0, #0
  42a016:	d0e3      	beq.n	429fe0 <__swbuf_r+0x54>
  42a018:	f04f 37ff 	mov.w	r7, #4294967295
  42a01c:	e7e0      	b.n	429fe0 <__swbuf_r+0x54>
  42a01e:	4621      	mov	r1, r4
  42a020:	4630      	mov	r0, r6
  42a022:	f7fe ff57 	bl	428ed4 <__swsetup_r>
  42a026:	2800      	cmp	r0, #0
  42a028:	d1f6      	bne.n	42a018 <__swbuf_r+0x8c>
  42a02a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42a02e:	6923      	ldr	r3, [r4, #16]
  42a030:	b291      	uxth	r1, r2
  42a032:	e7bd      	b.n	429fb0 <__swbuf_r+0x24>
  42a034:	f7ff f8ba 	bl	4291ac <__sinit>
  42a038:	e7b0      	b.n	429f9c <__swbuf_r+0x10>
  42a03a:	bf00      	nop

0042a03c <_wcrtomb_r>:
  42a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
  42a03e:	4606      	mov	r6, r0
  42a040:	b085      	sub	sp, #20
  42a042:	461f      	mov	r7, r3
  42a044:	b189      	cbz	r1, 42a06a <_wcrtomb_r+0x2e>
  42a046:	4c10      	ldr	r4, [pc, #64]	; (42a088 <_wcrtomb_r+0x4c>)
  42a048:	4d10      	ldr	r5, [pc, #64]	; (42a08c <_wcrtomb_r+0x50>)
  42a04a:	6824      	ldr	r4, [r4, #0]
  42a04c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42a04e:	2c00      	cmp	r4, #0
  42a050:	bf08      	it	eq
  42a052:	462c      	moveq	r4, r5
  42a054:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  42a058:	47a0      	blx	r4
  42a05a:	1c43      	adds	r3, r0, #1
  42a05c:	d103      	bne.n	42a066 <_wcrtomb_r+0x2a>
  42a05e:	2200      	movs	r2, #0
  42a060:	238a      	movs	r3, #138	; 0x8a
  42a062:	603a      	str	r2, [r7, #0]
  42a064:	6033      	str	r3, [r6, #0]
  42a066:	b005      	add	sp, #20
  42a068:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42a06a:	460c      	mov	r4, r1
  42a06c:	4906      	ldr	r1, [pc, #24]	; (42a088 <_wcrtomb_r+0x4c>)
  42a06e:	4a07      	ldr	r2, [pc, #28]	; (42a08c <_wcrtomb_r+0x50>)
  42a070:	6809      	ldr	r1, [r1, #0]
  42a072:	6b49      	ldr	r1, [r1, #52]	; 0x34
  42a074:	2900      	cmp	r1, #0
  42a076:	bf08      	it	eq
  42a078:	4611      	moveq	r1, r2
  42a07a:	4622      	mov	r2, r4
  42a07c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  42a080:	a901      	add	r1, sp, #4
  42a082:	47a0      	blx	r4
  42a084:	e7e9      	b.n	42a05a <_wcrtomb_r+0x1e>
  42a086:	bf00      	nop
  42a088:	204000ec 	.word	0x204000ec
  42a08c:	2040092c 	.word	0x2040092c

0042a090 <__ascii_wctomb>:
  42a090:	b121      	cbz	r1, 42a09c <__ascii_wctomb+0xc>
  42a092:	2aff      	cmp	r2, #255	; 0xff
  42a094:	d804      	bhi.n	42a0a0 <__ascii_wctomb+0x10>
  42a096:	700a      	strb	r2, [r1, #0]
  42a098:	2001      	movs	r0, #1
  42a09a:	4770      	bx	lr
  42a09c:	4608      	mov	r0, r1
  42a09e:	4770      	bx	lr
  42a0a0:	238a      	movs	r3, #138	; 0x8a
  42a0a2:	6003      	str	r3, [r0, #0]
  42a0a4:	f04f 30ff 	mov.w	r0, #4294967295
  42a0a8:	4770      	bx	lr
  42a0aa:	bf00      	nop

0042a0ac <_write_r>:
  42a0ac:	b570      	push	{r4, r5, r6, lr}
  42a0ae:	460d      	mov	r5, r1
  42a0b0:	4c08      	ldr	r4, [pc, #32]	; (42a0d4 <_write_r+0x28>)
  42a0b2:	4611      	mov	r1, r2
  42a0b4:	4606      	mov	r6, r0
  42a0b6:	461a      	mov	r2, r3
  42a0b8:	4628      	mov	r0, r5
  42a0ba:	2300      	movs	r3, #0
  42a0bc:	6023      	str	r3, [r4, #0]
  42a0be:	f7fa fb81 	bl	4247c4 <_write>
  42a0c2:	1c43      	adds	r3, r0, #1
  42a0c4:	d000      	beq.n	42a0c8 <_write_r+0x1c>
  42a0c6:	bd70      	pop	{r4, r5, r6, pc}
  42a0c8:	6823      	ldr	r3, [r4, #0]
  42a0ca:	2b00      	cmp	r3, #0
  42a0cc:	d0fb      	beq.n	42a0c6 <_write_r+0x1a>
  42a0ce:	6033      	str	r3, [r6, #0]
  42a0d0:	bd70      	pop	{r4, r5, r6, pc}
  42a0d2:	bf00      	nop
  42a0d4:	2043a810 	.word	0x2043a810

0042a0d8 <__register_exitproc>:
  42a0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42a0dc:	4d2c      	ldr	r5, [pc, #176]	; (42a190 <__register_exitproc+0xb8>)
  42a0de:	4606      	mov	r6, r0
  42a0e0:	6828      	ldr	r0, [r5, #0]
  42a0e2:	4698      	mov	r8, r3
  42a0e4:	460f      	mov	r7, r1
  42a0e6:	4691      	mov	r9, r2
  42a0e8:	f7ff fc20 	bl	42992c <__retarget_lock_acquire_recursive>
  42a0ec:	4b29      	ldr	r3, [pc, #164]	; (42a194 <__register_exitproc+0xbc>)
  42a0ee:	681c      	ldr	r4, [r3, #0]
  42a0f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  42a0f4:	2b00      	cmp	r3, #0
  42a0f6:	d03e      	beq.n	42a176 <__register_exitproc+0x9e>
  42a0f8:	685a      	ldr	r2, [r3, #4]
  42a0fa:	2a1f      	cmp	r2, #31
  42a0fc:	dc1c      	bgt.n	42a138 <__register_exitproc+0x60>
  42a0fe:	f102 0e01 	add.w	lr, r2, #1
  42a102:	b176      	cbz	r6, 42a122 <__register_exitproc+0x4a>
  42a104:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  42a108:	2401      	movs	r4, #1
  42a10a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  42a10e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  42a112:	4094      	lsls	r4, r2
  42a114:	4320      	orrs	r0, r4
  42a116:	2e02      	cmp	r6, #2
  42a118:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  42a11c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  42a120:	d023      	beq.n	42a16a <__register_exitproc+0x92>
  42a122:	3202      	adds	r2, #2
  42a124:	f8c3 e004 	str.w	lr, [r3, #4]
  42a128:	6828      	ldr	r0, [r5, #0]
  42a12a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  42a12e:	f7ff fbff 	bl	429930 <__retarget_lock_release_recursive>
  42a132:	2000      	movs	r0, #0
  42a134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42a138:	4b17      	ldr	r3, [pc, #92]	; (42a198 <__register_exitproc+0xc0>)
  42a13a:	b30b      	cbz	r3, 42a180 <__register_exitproc+0xa8>
  42a13c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  42a140:	f7fd f89a 	bl	427278 <malloc>
  42a144:	4603      	mov	r3, r0
  42a146:	b1d8      	cbz	r0, 42a180 <__register_exitproc+0xa8>
  42a148:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  42a14c:	6002      	str	r2, [r0, #0]
  42a14e:	2100      	movs	r1, #0
  42a150:	6041      	str	r1, [r0, #4]
  42a152:	460a      	mov	r2, r1
  42a154:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  42a158:	f04f 0e01 	mov.w	lr, #1
  42a15c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  42a160:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  42a164:	2e00      	cmp	r6, #0
  42a166:	d0dc      	beq.n	42a122 <__register_exitproc+0x4a>
  42a168:	e7cc      	b.n	42a104 <__register_exitproc+0x2c>
  42a16a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  42a16e:	430c      	orrs	r4, r1
  42a170:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  42a174:	e7d5      	b.n	42a122 <__register_exitproc+0x4a>
  42a176:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  42a17a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  42a17e:	e7bb      	b.n	42a0f8 <__register_exitproc+0x20>
  42a180:	6828      	ldr	r0, [r5, #0]
  42a182:	f7ff fbd5 	bl	429930 <__retarget_lock_release_recursive>
  42a186:	f04f 30ff 	mov.w	r0, #4294967295
  42a18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42a18e:	bf00      	nop
  42a190:	20400928 	.word	0x20400928
  42a194:	004319f8 	.word	0x004319f8
  42a198:	00427279 	.word	0x00427279

0042a19c <_close_r>:
  42a19c:	b538      	push	{r3, r4, r5, lr}
  42a19e:	4c07      	ldr	r4, [pc, #28]	; (42a1bc <_close_r+0x20>)
  42a1a0:	2300      	movs	r3, #0
  42a1a2:	4605      	mov	r5, r0
  42a1a4:	4608      	mov	r0, r1
  42a1a6:	6023      	str	r3, [r4, #0]
  42a1a8:	f7fb f9b2 	bl	425510 <_close>
  42a1ac:	1c43      	adds	r3, r0, #1
  42a1ae:	d000      	beq.n	42a1b2 <_close_r+0x16>
  42a1b0:	bd38      	pop	{r3, r4, r5, pc}
  42a1b2:	6823      	ldr	r3, [r4, #0]
  42a1b4:	2b00      	cmp	r3, #0
  42a1b6:	d0fb      	beq.n	42a1b0 <_close_r+0x14>
  42a1b8:	602b      	str	r3, [r5, #0]
  42a1ba:	bd38      	pop	{r3, r4, r5, pc}
  42a1bc:	2043a810 	.word	0x2043a810

0042a1c0 <_fclose_r>:
  42a1c0:	b570      	push	{r4, r5, r6, lr}
  42a1c2:	b159      	cbz	r1, 42a1dc <_fclose_r+0x1c>
  42a1c4:	4605      	mov	r5, r0
  42a1c6:	460c      	mov	r4, r1
  42a1c8:	b110      	cbz	r0, 42a1d0 <_fclose_r+0x10>
  42a1ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  42a1cc:	2b00      	cmp	r3, #0
  42a1ce:	d03c      	beq.n	42a24a <_fclose_r+0x8a>
  42a1d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42a1d2:	07d8      	lsls	r0, r3, #31
  42a1d4:	d505      	bpl.n	42a1e2 <_fclose_r+0x22>
  42a1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a1da:	b92b      	cbnz	r3, 42a1e8 <_fclose_r+0x28>
  42a1dc:	2600      	movs	r6, #0
  42a1de:	4630      	mov	r0, r6
  42a1e0:	bd70      	pop	{r4, r5, r6, pc}
  42a1e2:	89a3      	ldrh	r3, [r4, #12]
  42a1e4:	0599      	lsls	r1, r3, #22
  42a1e6:	d53c      	bpl.n	42a262 <_fclose_r+0xa2>
  42a1e8:	4621      	mov	r1, r4
  42a1ea:	4628      	mov	r0, r5
  42a1ec:	f7fe fee6 	bl	428fbc <__sflush_r>
  42a1f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  42a1f2:	4606      	mov	r6, r0
  42a1f4:	b133      	cbz	r3, 42a204 <_fclose_r+0x44>
  42a1f6:	69e1      	ldr	r1, [r4, #28]
  42a1f8:	4628      	mov	r0, r5
  42a1fa:	4798      	blx	r3
  42a1fc:	2800      	cmp	r0, #0
  42a1fe:	bfb8      	it	lt
  42a200:	f04f 36ff 	movlt.w	r6, #4294967295
  42a204:	89a3      	ldrh	r3, [r4, #12]
  42a206:	061a      	lsls	r2, r3, #24
  42a208:	d422      	bmi.n	42a250 <_fclose_r+0x90>
  42a20a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  42a20c:	b141      	cbz	r1, 42a220 <_fclose_r+0x60>
  42a20e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  42a212:	4299      	cmp	r1, r3
  42a214:	d002      	beq.n	42a21c <_fclose_r+0x5c>
  42a216:	4628      	mov	r0, r5
  42a218:	f7ff f8ee 	bl	4293f8 <_free_r>
  42a21c:	2300      	movs	r3, #0
  42a21e:	6323      	str	r3, [r4, #48]	; 0x30
  42a220:	6c61      	ldr	r1, [r4, #68]	; 0x44
  42a222:	b121      	cbz	r1, 42a22e <_fclose_r+0x6e>
  42a224:	4628      	mov	r0, r5
  42a226:	f7ff f8e7 	bl	4293f8 <_free_r>
  42a22a:	2300      	movs	r3, #0
  42a22c:	6463      	str	r3, [r4, #68]	; 0x44
  42a22e:	f7fe ffe9 	bl	429204 <__sfp_lock_acquire>
  42a232:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42a234:	2200      	movs	r2, #0
  42a236:	07db      	lsls	r3, r3, #31
  42a238:	81a2      	strh	r2, [r4, #12]
  42a23a:	d50e      	bpl.n	42a25a <_fclose_r+0x9a>
  42a23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a23e:	f7ff fb73 	bl	429928 <__retarget_lock_close_recursive>
  42a242:	f7fe ffe5 	bl	429210 <__sfp_lock_release>
  42a246:	4630      	mov	r0, r6
  42a248:	bd70      	pop	{r4, r5, r6, pc}
  42a24a:	f7fe ffaf 	bl	4291ac <__sinit>
  42a24e:	e7bf      	b.n	42a1d0 <_fclose_r+0x10>
  42a250:	6921      	ldr	r1, [r4, #16]
  42a252:	4628      	mov	r0, r5
  42a254:	f7ff f8d0 	bl	4293f8 <_free_r>
  42a258:	e7d7      	b.n	42a20a <_fclose_r+0x4a>
  42a25a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a25c:	f7ff fb68 	bl	429930 <__retarget_lock_release_recursive>
  42a260:	e7ec      	b.n	42a23c <_fclose_r+0x7c>
  42a262:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a264:	f7ff fb62 	bl	42992c <__retarget_lock_acquire_recursive>
  42a268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a26c:	2b00      	cmp	r3, #0
  42a26e:	d1bb      	bne.n	42a1e8 <_fclose_r+0x28>
  42a270:	6e66      	ldr	r6, [r4, #100]	; 0x64
  42a272:	f016 0601 	ands.w	r6, r6, #1
  42a276:	d1b1      	bne.n	42a1dc <_fclose_r+0x1c>
  42a278:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a27a:	f7ff fb59 	bl	429930 <__retarget_lock_release_recursive>
  42a27e:	4630      	mov	r0, r6
  42a280:	bd70      	pop	{r4, r5, r6, pc}
  42a282:	bf00      	nop

0042a284 <_fstat_r>:
  42a284:	b538      	push	{r3, r4, r5, lr}
  42a286:	460b      	mov	r3, r1
  42a288:	4c07      	ldr	r4, [pc, #28]	; (42a2a8 <_fstat_r+0x24>)
  42a28a:	4605      	mov	r5, r0
  42a28c:	4611      	mov	r1, r2
  42a28e:	4618      	mov	r0, r3
  42a290:	2300      	movs	r3, #0
  42a292:	6023      	str	r3, [r4, #0]
  42a294:	f7fb f93f 	bl	425516 <_fstat>
  42a298:	1c43      	adds	r3, r0, #1
  42a29a:	d000      	beq.n	42a29e <_fstat_r+0x1a>
  42a29c:	bd38      	pop	{r3, r4, r5, pc}
  42a29e:	6823      	ldr	r3, [r4, #0]
  42a2a0:	2b00      	cmp	r3, #0
  42a2a2:	d0fb      	beq.n	42a29c <_fstat_r+0x18>
  42a2a4:	602b      	str	r3, [r5, #0]
  42a2a6:	bd38      	pop	{r3, r4, r5, pc}
  42a2a8:	2043a810 	.word	0x2043a810

0042a2ac <_isatty_r>:
  42a2ac:	b538      	push	{r3, r4, r5, lr}
  42a2ae:	4c07      	ldr	r4, [pc, #28]	; (42a2cc <_isatty_r+0x20>)
  42a2b0:	2300      	movs	r3, #0
  42a2b2:	4605      	mov	r5, r0
  42a2b4:	4608      	mov	r0, r1
  42a2b6:	6023      	str	r3, [r4, #0]
  42a2b8:	f7fb f932 	bl	425520 <_isatty>
  42a2bc:	1c43      	adds	r3, r0, #1
  42a2be:	d000      	beq.n	42a2c2 <_isatty_r+0x16>
  42a2c0:	bd38      	pop	{r3, r4, r5, pc}
  42a2c2:	6823      	ldr	r3, [r4, #0]
  42a2c4:	2b00      	cmp	r3, #0
  42a2c6:	d0fb      	beq.n	42a2c0 <_isatty_r+0x14>
  42a2c8:	602b      	str	r3, [r5, #0]
  42a2ca:	bd38      	pop	{r3, r4, r5, pc}
  42a2cc:	2043a810 	.word	0x2043a810

0042a2d0 <_lseek_r>:
  42a2d0:	b570      	push	{r4, r5, r6, lr}
  42a2d2:	460d      	mov	r5, r1
  42a2d4:	4c08      	ldr	r4, [pc, #32]	; (42a2f8 <_lseek_r+0x28>)
  42a2d6:	4611      	mov	r1, r2
  42a2d8:	4606      	mov	r6, r0
  42a2da:	461a      	mov	r2, r3
  42a2dc:	4628      	mov	r0, r5
  42a2de:	2300      	movs	r3, #0
  42a2e0:	6023      	str	r3, [r4, #0]
  42a2e2:	f7fb f91f 	bl	425524 <_lseek>
  42a2e6:	1c43      	adds	r3, r0, #1
  42a2e8:	d000      	beq.n	42a2ec <_lseek_r+0x1c>
  42a2ea:	bd70      	pop	{r4, r5, r6, pc}
  42a2ec:	6823      	ldr	r3, [r4, #0]
  42a2ee:	2b00      	cmp	r3, #0
  42a2f0:	d0fb      	beq.n	42a2ea <_lseek_r+0x1a>
  42a2f2:	6033      	str	r3, [r6, #0]
  42a2f4:	bd70      	pop	{r4, r5, r6, pc}
  42a2f6:	bf00      	nop
  42a2f8:	2043a810 	.word	0x2043a810

0042a2fc <_read_r>:
  42a2fc:	b570      	push	{r4, r5, r6, lr}
  42a2fe:	460d      	mov	r5, r1
  42a300:	4c08      	ldr	r4, [pc, #32]	; (42a324 <_read_r+0x28>)
  42a302:	4611      	mov	r1, r2
  42a304:	4606      	mov	r6, r0
  42a306:	461a      	mov	r2, r3
  42a308:	4628      	mov	r0, r5
  42a30a:	2300      	movs	r3, #0
  42a30c:	6023      	str	r3, [r4, #0]
  42a30e:	f7fa fa3f 	bl	424790 <_read>
  42a312:	1c43      	adds	r3, r0, #1
  42a314:	d000      	beq.n	42a318 <_read_r+0x1c>
  42a316:	bd70      	pop	{r4, r5, r6, pc}
  42a318:	6823      	ldr	r3, [r4, #0]
  42a31a:	2b00      	cmp	r3, #0
  42a31c:	d0fb      	beq.n	42a316 <_read_r+0x1a>
  42a31e:	6033      	str	r3, [r6, #0]
  42a320:	bd70      	pop	{r4, r5, r6, pc}
  42a322:	bf00      	nop
  42a324:	2043a810 	.word	0x2043a810
  42a328:	00474345 	.word	0x00474345

0042a32c <cmaps>:
  42a32c:	0000002d 0001000e 00000000 0042a650     -...........P.B.
  42a33c:	0000000e                                ....

0042a340 <glyph_bitmap>:
  42a340:	fffffd7f f05f80ff ffa7ffff f0fd7ff7     ......_.........
  42a350:	0f007e00 00f801c0 e007003f 1f00fc00     .~......?.......
  42a360:	00f00380 c00f007e 1200f000 00c00300     ....~...........
  42a370:	801f00fc 7e00f003 01c00f00 003f00f8     .......~......?.
  42a380:	fc00e007 03801f00 ffbdffff c0fffff9     ................
  42a390:	ffffff2d ffffd7fe ffb2ffff f4ffa7ff     -...............
  42a3a0:	0080fd7f 000e0070 3800c001 00000700     ....p......8....
  42a3b0:	001c00e0 70008003 ff3f0e00 ffc5ff47     .......p..?.G...
  42a3c0:	1c00e0f8 00800300 000e0070 3800c001     ........p......8
  42a3d0:	00000700 001c00e0 7f008003 f9ff8dff     ................
  42a3e0:	7fc0ffff f4ffa7ff 0080fd7f 000e0070     ............p...
  42a3f0:	3800c001 00000700 001c00e0 70008003     ...8...........p
  42a400:	ff3f0e00 ffd9ff47 e00000ff 03001c00     ..?.G...........
  42a410:	00700080 c001000e 07003800 00e00000     ..p......8......
  42a420:	8f03001c f8ffb1ff 00c0ff7f 07000000     ................
  42a430:	00f00100 c00f003e 3f00f801 00e00700     ....>......?....
  42a440:	801f00fc 7e00f003 01c00f00 ffeeffff     .......~........
  42a450:	e0ff3ffb 03001c00 00700080 c001000e     .?........p.....
  42a460:	07003800 00e00000 8003001c 06007000     .8...........p..
  42a470:	ff000000 f3ff87ff 0070fc7f c001000e     ..........p.....
  42a480:	07003800 00e00000 8003001c 0e007000     .8...........p..
  42a490:	ffff0100 ffd9ff37 e00000ff 03001c00     ....7...........
  42a4a0:	00700080 c001000e 07003800 00e00000     ..p......8......
  42a4b0:	8f03001c f8ffb1ff ffc0ff7f f3ff87ff     ................
  42a4c0:	0070fc7f c001000e 07003800 00e00000     ..p......8......
  42a4d0:	8003001c 0e007000 ffff0100 ffddff37     .....p......7...
  42a4e0:	fc00e0ff 03801f00 007e00f0 f801c00f     ..........~.....
  42a4f0:	07003f00 00fc00e0 ff03801f f9ffbdff     .?..............
  42a500:	ffc0ffff f7ffa7ff 00f0fd7f c00f007e     ............~...
  42a510:	3f00f801 00e00700 801f00fc 7e00f003     ...?...........~
  42a520:	00c00f00 000a00f8 e0000003 03001c00     ................
  42a530:	00700080 c001000e 07003800 00e00000     ..p......8......
  42a540:	8003001c 02007000 ffa7ffff f0fd7ff7     .....p..........
  42a550:	0f007e00 00f801c0 e007003f 1f00fc00     .~......?.......
  42a560:	00f00380 ff0f007e ddff77ff 00e0ffff     ....~....w......
  42a570:	801f00fc 7e00f003 01c00f00 003f00f8     .......~......?.
  42a580:	fc00e007 03801f00 ffbdffff c0fffff9     ................
  42a590:	ffa7ffff f0fd7ff7 0f007e00 00f801c0     .........~......
  42a5a0:	e007003f 1f00fc00 00f00380 ff0f007e     ?...........~...
  42a5b0:	d9ff77ff 0000ffff 001c00e0 70008003     .w.............p
  42a5c0:	01000e00 003800c0 e0000007 03001c00     ......8.........
  42a5d0:	ffb1ff8f c0ff7ff8 000080ff 0000ff01     ................

0042a5e0 <glyph_dsc>:
	...
  42a5e8:	18800000 0e05030e 00000006 00fe0403     ................
  42a5f8:	18800008 00031e13 18800050 01131d03     ........P.......
  42a608:	1880005b 00031e13 188000a3 00031e13     [...............
  42a618:	188000eb 01031e13 18800133 00031e13     ........3.......
  42a628:	1880017b 00031e13 188001c3 01031d13     {...............
  42a638:	18800208 00031e13 18800250 00031e13     ........P.......
  42a648:	06000298 07011003                       ........

0042a650 <glyph_id_ofs_list_0>:
  42a650:	02000100 06050403 0a090807 00000c0b     ................

0042a660 <cmaps>:
  42a660:	0000002d 0001000e 00000000 0042b48c     -.............B.
  42a670:	0000000e                                ....

0042a674 <glyph_bitmap>:
  42a674:	ffffff1f ffffff9f ffffffdf ffffffcf     ................
  42a684:	ffffffef ffffffe7 bf3f3ee0 fdffffff     .........>?.....
  42a694:	ff7f7cfc 4fffffff ffffffff ffff7fcc     .|.....O........
  42a6a4:	ffe3f3ff fffeffff ffffff1f fffff89f     ................
  42a6b4:	80ffe7ff ff010000 000000f0 0000fe3f     ............?...
  42a6c4:	c0ff0f00 ff010000 000000f8 0000ff3f     ............?...
  42a6d4:	e0ff0700 ff000000 000000fc 0080ff1f     ................
  42a6e4:	f0ff0300 7f000000 000000fe 00c0ff0f     ................
  42a6f4:	f8ff0100 3f000000 000000ff 00e0ff07     .......?........
  42a704:	fcff0000 1f000000 000080ff 00f0ff03     ................
  42a714:	fe7f0000 0f000000 0000c0ff 00f8ff01     ................
  42a724:	ff3f0000 07000000 0000e0ff 00fcff00     ..?.............
  42a734:	ff1f0000 01000080 0000f0ff 00fe0f00     ................
  42a744:	7f000000 00000080 0000e007 001c0e00     ................
  42a754:	f8010000 00000000 0000807f 00fc1f00     ................
  42a764:	ff030000 000000e0 0000fe7f c0ff0f00     ................
  42a774:	ff010000 000000f8 0000ff3f e0ff0700     ........?.......
  42a784:	ff000000 000000fc 0080ff1f f0ff0300     ................
  42a794:	7f000000 000000fe 00c0ff0f f8ff0100     ................
  42a7a4:	3f000000 000000ff 00e0ff07 fcff0000     ...?............
  42a7b4:	1f000000 000080ff 00f0ff03 fe7f0000     ................
  42a7c4:	0f000000 0000c0ff 00f8ff01 ff3f0000     ..............?.
  42a7d4:	07000000 0000e0ff 00fcff00 ff1f0000     ................
  42a7e4:	03000080 0000f0ff fffe7f00 ffc7ffff     ................
  42a7f4:	feffff9f ffffe73f fffdf1ff 8fffffff     ....?...........
  42a804:	ffffff3f ffffcffc 0480ffff e7f1380c     ?............8..
  42a814:	ffffbfcf ffffffff ffffffff ffffffff     ................
  42a824:	ffffffff 068fdfff fff7f120 ffffffff     ........ .......
  42a834:	ffffffff ffffffff ffffffff ffffffff     ................
  42a844:	3effffff ff7f081c 4fffffff ffffffff     ...>.......O....
  42a854:	ffff7fcc ff83f3ff f0feffff ffffff1f     ................
  42a864:	ffff009e 00c0e7ff f8010000 00000000     ................
  42a874:	0000003f 00e00f00 fc010000 00000000     ?...............
  42a884:	0000803f 00f00700 fe000000 00000000     ?...............
  42a894:	0000c01f 00f80300 7f000000 00000000     ................
  42a8a4:	0000e00f 00fc0100 3f000000 00000080     ...........?....
  42a8b4:	0000f007 00fe0000 1f000000 000000c0     ................
  42a8c4:	0000f803 007f0000 0f000000 000000e0     ................
  42a8d4:	0000fc01 803f0000 07000000 000000f0     ......?.........
  42a8e4:	0000fe00 c01f0000 03000000 000000f8     ................
  42a8f4:	ff001f00 e0f8ffff ffffff1f ffff0704     ................
  42a904:	ff01e0ff 08f8ffff feffff3f ffffc701     ........?.......
  42a914:	003ec0ff 07000000 000000f0 0000fe00     ..>.............
  42a924:	c01f0000 03000000 000000f8 00007f00     ................
  42a934:	e00f0000 01000000 000000fc 00803f00     .............?..
  42a944:	f0070000 00000000 000000fe 00c01f00     ................
  42a954:	f8030000 00000000 0000007f 00e00f00     ................
  42a964:	fc010000 00000000 0000803f 00f00700     ........?.......
  42a974:	fe000000 00000000 0000c01f 00f80300     ................
  42a984:	7f000000 00000000 0000e00f 00fc0100     ................
  42a994:	3f000000 00000080 0000f007 fffe0000     ...?............
  42a9a4:	1fc0ffff feffff9f ffffe703 ff7df0ff     ..............}.
  42a9b4:	8fffffff ffffff3f ffffcffc ff80ffff     ....?...........
  42a9c4:	ffffffff ffffff5f ffffccff 87f3ffff     ...._...........
  42a9d4:	feffffff ffff3ff0 ff019eff c0e7ffff     .....?..........
  42a9e4:	01000000 000000f8 00003f00 e00f0000     .........?......
  42a9f4:	01000000 000000fc 00803f00 f0070000     .........?......
  42aa04:	00000000 000000fe 00c01f00 f8030000     ................
  42aa14:	00000000 0000007f 00e00f00 fc010000     ................
  42aa24:	00000000 0000803f 00f00700 fe000000     ....?...........
  42aa34:	00000000 0000c01f 00f80300 7f000000     ................
  42aa44:	00000000 0000e00f 00fc0100 3f000000     ...............?
  42aa54:	00000080 0000f007 00fe0000 1f000000     ................
  42aa64:	000000c0 0000f803 011f0000 f8ffffff     ................
  42aa74:	ffff7fe0 ff0f04ff 03eeffff f9ffffff     ................
  42aa84:	ffff7ff0 ff0f7efe c0dfffff 03000000     .....~..........
  42aa94:	000000f8 00007f00 e00f0000 01000000     ................
  42aaa4:	000000fc 00803f00 f0070000 00000000     .....?..........
  42aab4:	000000fe 00c01f00 f8030000 00000000     ................
  42aac4:	0000007f 00e00f00 fc010000 00000000     ................
  42aad4:	0000803f 00f00700 fe000000 00000000     ?...............
  42aae4:	0000c01f 00f80300 7f000000 00000000     ................
  42aaf4:	0000e00f 00fc0100 3f000000 00000080     ...........?....
  42ab04:	0000f007 00fe0000 1f000000 000000c0     ................
  42ab14:	0000f803 017f0000 c7ffffff ffff7fe0     ................
  42ab24:	ff0f3cfe 83f1ffff ffffffff ffff7f80     .<..............
  42ab34:	ff1ffcff 80ffffff 00000000 00000000     ................
  42ab44:	000c0000 03000000 000000c0 00007e00     .............~..
  42ab54:	f01f0000 07000000 000080ff 00f0ff00     ................
  42ab64:	fe3f0000 07000000 0000c0ff 00f8ff01     ..?.............
  42ab74:	ff3f0000 07000000 0000e0ff 00fcff00     ..?.............
  42ab84:	ff1f0000 03000080 0000f0ff 00fe7f00     ................
  42ab94:	ff0f0000 010000c0 0000f8ff 00ff3f00     .............?..
  42aba4:	ff070000 000000e0 0000fcff 80ff1f00     ................
  42abb4:	ff030000 000000f0 0000fe7f c0ff0f00     ................
  42abc4:	ff010000 000000f8 0000ff3f e0ff0700     ........?.......
  42abd4:	ff000000 000000fc 0080ff1f f0ff0300     ................
  42abe4:	1f000000 fffffffe ff9ffff8 e707ffff     ................
  42abf4:	eeffffff ffffff1d ff3ff0f9 077efeff     ..........?...~.
  42ac04:	dfffffff 000000c0 0000f803 007f0000     ................
  42ac14:	0f000000 000000e0 0000fc01 803f0000     ..............?.
  42ac24:	07000000 000000f0 0000fe00 c01f0000     ................
  42ac34:	03000000 000000f8 00007f00 e00f0000     ................
  42ac44:	01000000 000000fc 00803f00 f0070000     .........?......
  42ac54:	00000000 000000fe 00c01f00 f8030000     ................
  42ac64:	00000000 0000007f 00e00f00 fc010000     ................
  42ac74:	00000000 0000803f 00f00700 fe000000     ....?...........
  42ac84:	00000000 0000c01f 00f80300 7f000000     ................
  42ac94:	00000000 0000e003 001c0000 00000000     ................
  42aca4:	ffff7f80 ff0fffff c0ffffff ffffff7f     ................
  42acb4:	ffff63f0 1f0ffeff 81ffffff fffffff8     .c..............
  42acc4:	00803fe0 f0070000 00000000 000000fe     .?..............
  42acd4:	00c01f00 f8030000 00000000 0000007f     ................
  42ace4:	00e00f00 fc010000 00000000 0000803f     ............?...
  42acf4:	00f00700 fe000000 00000000 0000c01f     ................
  42ad04:	00f80300 7f000000 00000000 0000e00f     ................
  42ad14:	00fc0100 3f000000 00000080 0000f007     .......?........
  42ad24:	00fe0000 1f000000 000000c0 0000f803     ................
  42ad34:	007f0000 0f000000 000000e0 0000fc01     ................
  42ad44:	803f0000 07000000 000000f0 fffffe00     ..?.............
  42ad54:	9f1ff8ff 03ffffff ffffffe7 ffff1dee     ................
  42ad64:	3ff0f9ff 7efeffff ffffff07 0000c0df     ...?...~........
  42ad74:	00f80300 7f000000 00000000 0000e00f     ................
  42ad84:	00fc0100 3f000000 00000080 0000f007     .......?........
  42ad94:	00fe0000 1f000000 000000c0 0000f803     ................
  42ada4:	007f0000 0f000000 000000e0 0000fc01     ................
  42adb4:	803f0000 07000000 000000f0 0000fe00     ..?.............
  42adc4:	c01f0000 03000000 000000f8 00007f00     ................
  42add4:	e00f0000 01000000 000000fc 00803f00     .............?..
  42ade4:	f0070000 00000000 000000fe 00c01f00     ................
  42adf4:	f8030000 00000000 ffff007f 1fe0c7ff     ................
  42ae04:	3cfeffff ffffff07 ffff81f1 3f80ffff     ...<...........?
  42ae14:	fcffffff ffffff0f ff7f80ff 0fffffff     ................
  42ae24:	ffffffff ffff7fc0 ff63f0ff 0ffeffff     ..........c.....
  42ae34:	ffffff1f fffff881 803fe0ff 07000000     ..........?.....
  42ae44:	000000f0 0000fe00 c01f0000 03000000     ................
  42ae54:	000000f8 00007f00 e00f0000 01000000     ................
  42ae64:	000000fc 00803f00 f0070000 00000000     .....?..........
  42ae74:	000000fe 00c01f00 f8030000 00000000     ................
  42ae84:	0000007f 00e00f00 fc010000 00000000     ................
  42ae94:	0000803f 00f00700 fe000000 00000000     ?...............
  42aea4:	0000c01f 00f80300 7f000000 00000000     ................
  42aeb4:	0000e00f 00fc0100 3f000000 00000080     ...........?....
  42aec4:	0000f007 fffe0000 1ff8ffff ffffff9f     ................
  42aed4:	ffffe703 ff1deeff f8f9ffff feffff3f     ............?...
  42aee4:	ffffc77f 00fedfff ff030000 000000f0     ................
  42aef4:	0000fe7f c0ff0f00 ff010000 000000f8     ................
  42af04:	0000ff3f e0ff0700 ff000000 000000fc     ?...............
  42af14:	0080ff1f f0ff0300 7f000000 000000fe     ................
  42af24:	00c0ff0f f8ff0100 3f000000 000000ff     ...........?....
  42af34:	00e0ff07 fcff0000 1f000000 000080ff     ................
  42af44:	00f0ff03 fe7f0000 0f000000 0000c0ff     ................
  42af54:	00f8ff01 ff3f0000 07000000 0000e0ff     ......?.........
  42af64:	00fcff00 ff1f0000 03000080 0000f0ff     ................
  42af74:	fffe7f00 ffc7ffff feffff9f ffffe73f     ............?...
  42af84:	fffdf1ff 8fffffff ffffff3f ffffcffc     ........?.......
  42af94:	7f80ffff ffffffff ffffff4f ff7fccff     ........O.......
  42afa4:	e3f3ffff feffffff ffff1fff fff89fff     ................
  42afb4:	ffe7ffff 01000080 0000f0ff 00fe3f00     .............?..
  42afc4:	ff0f0000 010000c0 0000f8ff 00ff3f00     .............?..
  42afd4:	ff070000 000000e0 0000fcff 80ff1f00     ................
  42afe4:	ff030000 000000f0 0000fe7f c0ff0f00     ................
  42aff4:	ff010000 000000f8 0000ff3f e0ff0700     ........?.......
  42b004:	ff000000 000000fc 0080ff1f f0ff0300     ................
  42b014:	7f000000 000000fe 00c0ff0f f8ff0100     ................
  42b024:	3f000000 000000ff 00e0ff07 fcff0000     ...?............
  42b034:	1f000000 000080ff 00f0ff01 fc0f0000     ................
  42b044:	00000000 0000807f 00e02100 080f0000     .........!......
  42b054:	03000000 000000f0 00007e00 c01f0000     .........~......
  42b064:	03000000 000000f8 00007f00 e00f0000     ................
  42b074:	01000000 000000fc 00803f00 f0070000     .........?......
  42b084:	00000000 000000fe 00c01f00 f8030000     ................
  42b094:	00000000 0000007f 00e00f00 fc010000     ................
  42b0a4:	00000000 0000803f 00f00700 fe000000     ....?...........
  42b0b4:	00000000 0000c01f 00f80300 7f000000     ................
  42b0c4:	00000000 0000e00f 00fc0100 3f000000     ...............?
  42b0d4:	00000080 0000f007 00fe0000 1f000000     ................
  42b0e4:	000000c0 0000f803 007f0000 03000000     ................
  42b0f4:	000000e0 00001c00 80000000 ffffff7f     ................
  42b104:	ffff4fff 7fccffff f3ffffff ffffffe3     .O..............
  42b114:	ff1ffffe f89fffff e7ffffff 000080ff     ................
  42b124:	00f0ff01 fe3f0000 0f000000 0000c0ff     ......?.........
  42b134:	00f8ff01 ff3f0000 07000000 0000e0ff     ......?.........
  42b144:	00fcff00 ff1f0000 03000080 0000f0ff     ................
  42b154:	00fe7f00 ff0f0000 010000c0 0000f8ff     ................
  42b164:	00ff3f00 ff070000 000000e0 0000fcff     .?..............
  42b174:	80ff1f00 ff030000 000000f0 0000fe7f     ................
  42b184:	c0ff0f00 ff010000 000000f8 0000ff3f     ............?...
  42b194:	e0ff0700 ff000000 000000fc 0080ff1f     ................
  42b1a4:	f0ff0300 1f000000 fffffffe ff9ffff8     ................
  42b1b4:	e707ffff eeffffff ffffff1d ff3ff8f9     ..............?.
  42b1c4:	c77ffeff dfffffff 000000fe 00f0ff03     ................
  42b1d4:	fe7f0000 0f000000 0000c0ff 00f8ff01     ................
  42b1e4:	ff3f0000 07000000 0000e0ff 00fcff00     ..?.............
  42b1f4:	ff1f0000 03000080 0000f0ff 00fe7f00     ................
  42b204:	ff0f0000 010000c0 0000f8ff 00ff3f00     .............?..
  42b214:	ff070000 000000e0 0000fcff 80ff1f00     ................
  42b224:	ff030000 000000f0 0000fe7f c0ff0f00     ................
  42b234:	ff010000 000000f8 0000ff3f e0ff0700     ........?.......
  42b244:	ff000000 000000fc 0080ff1f f0ff0300     ................
  42b254:	7f000000 fffffffe ff9fffc7 e73ffeff     ..............?.
  42b264:	f1ffffff fffffffd ff3f8fff cffcffff     ..........?.....
  42b274:	ffffffff ffff7f80 ff4fffff ccffffff     ..........O.....
  42b284:	ffffff7f ffffe3f3 1ffffeff 9fffffff     ................
  42b294:	fffffff8 0080ffe7 f0ff0100 3f000000     ...............?
  42b2a4:	000000fe 00c0ff0f f8ff0100 3f000000     ...............?
  42b2b4:	000000ff 00e0ff07 fcff0000 1f000000     ................
  42b2c4:	000080ff 00f0ff03 fe7f0000 0f000000     ................
  42b2d4:	0000c0ff 00f8ff01 ff3f0000 07000000     ..........?.....
  42b2e4:	0000e0ff 00fcff00 ff1f0000 03000080     ................
  42b2f4:	0000f0ff 00fe7f00 ff0f0000 010000c0     ................
  42b304:	0000f8ff 00ff3f00 ff070000 000000e0     .....?..........
  42b314:	0000fcff 80ff1f00 ff030000 000000f0     ................
  42b324:	fffffe1f 9ffff8ff 07ffffff ffffffe7     ................
  42b334:	ffff1dee 3ff0f9ff 7efeffff ffffff07     .......?...~....
  42b344:	0000c0df 00f80300 7f000000 00000000     ................
  42b354:	0000e00f 00fc0100 3f000000 00000080     ...........?....
  42b364:	0000f007 00fe0000 1f000000 000000c0     ................
  42b374:	0000f803 007f0000 0f000000 000000e0     ................
  42b384:	0000fc01 803f0000 07000000 000000f0     ......?.........
  42b394:	0000fe00 c01f0000 03000000 000000f8     ................
  42b3a4:	00007f00 e00f0000 01000000 000000fc     ................
  42b3b4:	00803f00 f0070000 00000000 000000fe     .?..............
  42b3c4:	00c01f00 f8030000 00000000 ffff007f     ................
  42b3d4:	1fe0c7ff 3cfeffff ffffff07 ffff81f1     .......<........
  42b3e4:	3f80ffff fcffffff ffffff0f 3f3e80ff     ...?..........>?
  42b3f4:	ffffffbf 007cfcfd 00000000 00000000     ......|.........
	...
  42b410:	f1010000 fffffffd e0e3efff              ............

0042b41c <glyph_dsc>:
	...
  42b424:	39200000 200c0621 00000019 00fc0809     .. 9!.. ........
  42b434:	39200022 0007462b 3920019b 032c4307     ". 9+F.... 9.C,.
  42b444:	392001d6 0007462b 3920034f 0008462b     .. 9+F..O. 9+F..
  42b454:	392004c8 0307432b 39200631 0007462b     .. 9+C..1. 9+F..
  42b464:	392007aa 0007462b 39200923 0307432b     .. 9+F..#. 9+C..
  42b474:	39200a8c 0007462b 39200c05 0007462b     .. 9+F.... 9+F..
  42b484:	0e000d7e 0f032509                       ~....%..

0042b48c <glyph_id_ofs_list_0>:
  42b48c:	02000100 06050403 0a090807 00000c0b     ................

0042b49c <miniLogo>:
  42b49c:	05c08c04 00000c94 0042b4a8              ..........B.

0042b4a8 <miniLogo_map>:
  42b4a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b4f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b508:	ffffffff ffffffff ffffffff ffffffff     ................
  42b518:	ffffffff ffffffff ffffffff ffffffff     ................
  42b528:	ffffffff ffffffff ffffffff ffffffff     ................
  42b538:	ffffffff ffffffff ffffffff ffffffff     ................
  42b548:	ffffffff ffffffff ffffffff ffffffff     ................
  42b558:	ffffffff ffffffff ffffffff ffffffff     ................
  42b568:	ffffffff ffffffff ffffffff ffffffff     ................
  42b578:	ffffffff ffffffff ffffffff ffffffff     ................
  42b588:	ffffffff ffffffff ffffffff ffffffff     ................
  42b598:	ffffffff ffffffff ffffffff 7bdfffff     ...............{
  42b5a8:	ffffdef7 ffffffff ffffffff ffffffff     ................
  42b5b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b5c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b5d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b5e8:	39cfffff 739e8d6d ffff9ce7 ffffffff     ...9m..s........
  42b5f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b608:	ffffffff ffffffff ffffffff ffffffff     ................
  42b618:	ffffffff ffffffff ffffffff ffffffff     ................
  42b628:	ffffffff deffffff a63cae75 ef85e744     ........u.<.D...
  42b638:	ffffbdef ffffffff ffffffff ffffffff     ................
  42b648:	ffffffff ffffffff ffffffff ffffffff     ................
  42b658:	ffffffff ffffffff ffffffff ffffffff     ................
  42b668:	ffffffff ffffffff ffffffff e8443ad7     .............:D.
  42b678:	a63ca63c 529ec63c ffffffff ffffffff     <.<.<..R........
  42b688:	ffffffff ffffffff ffffffff ffffffff     ................
  42b698:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6b8:	95aeffff a63cc73c a63ca63c 19cf084d     ....<.<.<.<.M...
  42b6c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b6f8:	ffffffff ffffffff a63c539e a63ca63c     .........S<.<.<.
  42b708:	a63ca63c ffff3196 def7ffff f8c65adf     <.<..1.......Z..
  42b718:	19cff7c6 ffff9ce7 ffffffff ffffffff     ................
  42b728:	ffffffff ffffffff ffffffff ffffffff     ................
  42b738:	ffffffff ffffffff ffffffff 94a6ffff     ................
  42b748:	a63cc63c a63ca63c ce7da634 9ce7def7     <.<.<.<.4.}.....
  42b758:	6c65539e 094d2955 73a62a5d ffffffff     .SelU)M.]*.s....
  42b768:	ffffffff ffffffff ffffffff ffffffff     ................
  42b778:	ffffffff ffffffff ffffffff ffffffff     ................
  42b788:	ffffffff e84439d7 a63ca63c a63ca63c     .....9D.<.<.<.<.
  42b798:	7be7ae75 e744108e a63cc63c e744a63c     u..{..D.<.<.<.D.
  42b7a8:	ffffb5ae ffffffff ffffffff ffffffff     ................
  42b7b8:	ffffffff ffffffff dfffffff 3df79eff     ...............=
  42b7c8:	9fff1df7 ffffdfff ffffffff c63cef85     ..............<.
  42b7d8:	a63ca63c 318ea634 e84cb6b6 a63ca63c     <.<.4..1..L.<.<.
  42b7e8:	a63ca63c 5bdf6b65 ffffffff ffffffff     <.<.ek.[........
  42b7f8:	ffffffff ffffffff dfffffff d7d4bcee     ................
  42b808:	cea112b3 6d996d99 32bbcea1 fdf618d5     .....m.m...2....
  42b818:	9ce7ffff c744ad75 084da63c ef8518c7     ....u.D.<.M.....
  42b828:	a63ca63c a63ca63c 95ae0955 ffffdfff     <.<.<.<.U.......
  42b838:	ffffffff ffffffff ffffffff 7effffff     ...............~
  42b848:	50aa17d5 2a888b90 09880988 09880988     ...P...*........
  42b858:	ab902a88 3ae6d1b2 5ad7ffff 2955f085     .*.....:...Z..U)
  42b868:	bdef118e e7448d6d e744c744 74a64a5d     ....m.D.D.D.]J.t
  42b878:	ffffbdef ffffffff ffffffff ffffffff     ................
  42b888:	5ef7ffff 0c99d4c3 09882988 09880988     ...^.....)......
  42b898:	09880988 09880988 4a880988 fae5efa1     ...........J....
  42b8a8:	bdefdfff 9ce718c7 39cfffff 739eb5ae     ...........9...s
  42b8b8:	3ad7b5b6 ffffdef7 ffffffff ffffffff     ...:............
  42b8c8:	ffffffff 1df7ffff 4a88b1b2 09880988     ...........J....
  42b8d8:	09880988 09880988 09880988 09880988     ................
  42b8e8:	09880988 96ccec98 dfff1df7 ffffdfff     ................
  42b8f8:	ffffffff ffffffff ffffffff ffffffff     ................
  42b908:	ffffffff ffffffff 3ef7ffff 298812b3     ...........>...)
  42b918:	09880988 09880988 09880988 09880988     ................
  42b928:	09880988 09880988 09880988 6d994a88     .............J.m
  42b938:	12b3d1b2 d4c332bb 5bee96cc ffffbfff     .....2.....[....
  42b948:	ffffffff ffffffff ffffffff 7effffff     ...............~
  42b958:	8b90f4c3 09880988 09880988 09880988     ................
  42b968:	09880988 09880988 09880988 09880988     ................
  42b978:	09880988 09880988 09880988 4a880988     ...............J
  42b988:	d4c32c99 fffffdf6 ffffffff ffffffff     .,..............
  42b998:	ffffffff 4d9978dd 09880988 09880988     .....x.M........
  42b9a8:	09880988 8b900988 09884a88 09880988     .........J......
  42b9b8:	09880988 09880988 09880988 09880988     ................
  42b9c8:	09880988 09880988 32bb6a88 ffff1df7     .........j.2....
  42b9d8:	ffffffff ffffffff d1b25ef7 09882a88     .........^...*..
  42b9e8:	09880988 09880988 cb900988 cea115c4     ................
  42b9f8:	09880988 09880988 09880988 09880988     ................
  42ba08:	09880988 09880988 09880988 09880988     ................
  42ba18:	96cc8a90 ffffdfff ffffffff b9e5ffff     ................
  42ba28:	0988ab90 09880988 09880988 09880988     ................
  42ba38:	dcee70aa 2a8832bb 09880988 09880988     .p...2.*........
  42ba48:	09880988 09880988 09880988 09880988     ................
  42ba58:	09880988 09880988 bcee0fa2 ffffffff     ................
  42ba68:	ffffffff 298852bb 09880988 09880988     .....R.)........
  42ba78:	09880988 96cc2988 93c37eff 09884a88     .....)...~...J..
  42ba88:	09880988 09880988 09880988 09880988     ................
  42ba98:	09880988 09880988 09880988 cb900988     ................
  42baa8:	dffff7d4 ffffffff 8da11df7 09880988     ................
  42bab8:	09880988 09880988 0c990988 3ef77bee     .............{.>
  42bac8:	4a8815c4 09880988 09880988 09880988     ...J............
  42bad8:	09880988 09880988 09880988 09880988     ................
  42bae8:	09880988 52bb2a88 ffff7eff d9e5ffff     .....*.R.~......
  42baf8:	09886a88 09880988 09880988 09880988     .j..............
  42bb08:	ddf690b2 76ccd9e5 09886a88 29880988     .......v.j.....)
  42bb18:	09880988 09880988 09880988 09880988     ................
  42bb28:	09880988 09880988 09880988 dcf6efa1     ................
  42bb38:	ffffffff 098855cc 09880988 8b900988     .....U..........
  42bb48:	09882a88 d7d42a88 55cc38d5 8b90f7d4     .*...*...8.U....
  42bb58:	cb900988 6d9932bb 09880988 09880988     .....2.m........
  42bb68:	09880988 09880988 09880988 09880988     ................
  42bb78:	4d990988 ffff3be6 53bbffff 09880988     ...M.;.....S....
  42bb88:	6d990988 b1b23bee 4d990988 f2b25bee     ...m.;.....M.[..
  42bb98:	38d573bb 0988cb90 5ef790aa 6a9076cc     .s.8.......^.v.j
  42bba8:	09880988 09880988 09880988 09880988     ................
  42bbb8:	09880988 09880988 79ddcb90 dfffffff     ...........y....
  42bbc8:	0988b1b2 8b900988 9fff76cc 6a9096cc     .........v.....j
  42bbd8:	7beef1b2 12b34d99 0c9958dd 76cc0988     ...{.M...X.....v
  42bbe8:	3be6dcf6 09880faa 09880988 09880988     ...;............
  42bbf8:	09880988 09880988 09880988 cb900988     ................
  42bc08:	ffff78dd 12bbdfff 2c990c99 1ae632bb     .x.........,.2..
  42bc18:	b9e5f7d4 d7d48ea1 4a88f7d4 78ddb1b2     ...........J...x
  42bc28:	ec902d99 f4c3fae5 38dd76cc 2faa50aa     .-.......v.8.P./
  42bc38:	2faa2faa 2faa2faa 2faa2faa 2faa2faa     ././././././././
  42bc48:	2faa2faa 1ae6b1b2 ffffffff 58dd7bee     ././.........{.X
  42bc58:	3be678dd aea115cc b3c31ae6 f1b2fae5     .x.;............
  42bc68:	2faa2988 6d9999dd 7bee70aa aea1cea1     .)./...m.p.{....
  42bc78:	fae579dd dae5dae5 dae5dae5 dae5dae5     .y..............
  42bc88:	dae5dae5 dae5dae5 1ae6dae5 ffff7eff     .............~..
  42bc98:	99ddffff 90b290b2 cc9050aa 58dd6a90     .........P...j.X
  42bca8:	1ae67bee 09886d99 b9ddcea1 96ccefa1     .{...m..........
  42bcb8:	8b9058dd 2d992988 efa1efa1 efa1efa1     .X...).-........
  42bcc8:	efa1efa1 efa1efa1 efa1efa1 efa1efa1     ................
  42bcd8:	9ceef1b2 ffffffff 298879dd 09880988     .........y.)....
  42bce8:	2a880988 bfffb4c3 8a90d7d4 6d990988     ...*...........m
  42bcf8:	52bb99dd 12bb9cee 09882988 09880988     ...R.....)......
  42bd08:	09880988 09880988 09880988 09880988     ................
  42bd18:	09880988 cea10988 ffffbcee dcf6ffff     ................
  42bd28:	09882c99 09880988 70aa0988 f1b29cee     .,.........p....
  42bd38:	09882a88 38d52c99 9cee79dd 09884d99     .*...,.8.y...M..
  42bd48:	09880988 09880988 09880988 09880988     ................
  42bd58:	09880988 09880988 2a880988 5ef712b3     ...........*...^
  42bd68:	ffffffff d1b2dfff 09882988 09880988     .........)......
  42bd78:	12bbec98 09882c99 ec900988 7eff38d5     .....,.......8.~
  42bd88:	4a8858dd 09880988 09880988 09880988     .X.J............
  42bd98:	09880988 09880988 09880988 09880988     ................
  42bda8:	96cc8b90 ffffdfff ffffffff ab9058dd     .............X..
  42bdb8:	09880988 09880988 09884a88 09880988     .........J......
  42bdc8:	d7d4ab90 12bbbfff 09880988 09880988     ................
  42bdd8:	09880988 09880988 09880988 09880988     ................
  42bde8:	09880988 cea10988 ffff5bee ffffffff     .........[......
  42bdf8:	3df7ffff 09882faa 09880988 09880988     ...=./..........
  42be08:	09880988 6a900988 bcee55cc 09886d99     .......j.U...m..
  42be18:	09880988 09880988 09880988 09880988     ................
  42be28:	09880988 09880988 4a880988 9fffd4c3     ...........J....
  42be38:	ffffffff ffffffff f7d4dfff 0988ec90     ................
  42be48:	09880988 09880988 09880988 32bb2a88     .............*.2
  42be58:	6a8835cc 09880988 09880988 09880988     .5.j............
  42be68:	09880988 09880988 09880988 09880988     ................
  42be78:	7bee6d99 ffffffff ffffffff ffffffff     .m.{............
  42be88:	52bb3df7 09886a90 09880988 09880988     .=.R.j..........
  42be98:	09880988 cb90ab90 09880988 09880988     ................
  42bea8:	09880988 09880988 09880988 09880988     ................
  42beb8:	09880988 b7d4ab90 ffffdfff ffffffff     ................
  42bec8:	ffffffff ffffffff 70aa7bee 09880988     .........{.p....
  42bed8:	09880988 09880988 09880988 09880988     ................
  42bee8:	09880988 09880988 09880988 09880988     ................
  42bef8:	09880988 09880988 f4c38a90 ffff9fff     ................
  42bf08:	ffffffff ffffffff ffffffff ffffffff     ................
  42bf18:	2faabcee 09880988 09880988 09880988     .../............
  42bf28:	09880988 09880988 09880988 09880988     ................
  42bf38:	09880988 09880988 09880988 d4c38a90     ................
  42bf48:	ffff7eff ffffffff ffffffff ffffffff     .~..............
  42bf58:	ffffffff ffffffff b1b2fdf6 09884a88     .............J..
  42bf68:	09880988 09880988 09880988 09880988     ................
  42bf78:	09880988 09880988 09880988 09880988     ................
  42bf88:	14c4ab90 ffff7eff ffffffff ffffffff     .....~..........
  42bf98:	ffffffff ffffffff ffffffff ffffffff     ................
  42bfa8:	14c43df7 6a886d99 09880988 09880988     .=...m.j........
  42bfb8:	09880988 09880988 09880988 09880988     ................
  42bfc8:	8a900988 58dd0faa ffff9fff ffffffff     .......X........
  42bfd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bfe8:	ffffffff ffffffff fae59fff 8ea193bb     ................
  42bff8:	2a888b90 09880988 09880988 09880988     ...*............
  42c008:	4a880988 2faacb90 bcee55cc ffffffff     ...J.../.U......
  42c018:	ffffffff ffffffff ffffffff ffffffff     ................
  42c028:	ffffffff ffffffff ffffffff ffffffff     ................
  42c038:	7effffff d7d45bee 0faa53bb 4d996d99     ...~.[...S...m.M
  42c048:	4d994d99 70aa8ea1 38ddd4c3 bfffbcee     .M.M...p...8....
  42c058:	ffffffff ffffffff ffffffff ffffffff     ................
  42c068:	ffffffff ffffffff ffffffff ffffffff     ................
  42c078:	ffffffff ffffffff ffffffff bfffffff     ................
  42c088:	fdf67eff bceebcee 3df7dcf6 bfff7eff     .~.........=.~..
  42c098:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0b8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c0f8:	ffffffff ffffffff ffffffff bfffdfff     ................
  42c108:	7ef79ef7 5def7def 3def3def 3def3def     ...~.}.].=.=.=.=
  42c118:	3def3def 5def5def 9ef77def bfff9ef7     .=.=.].].}......
  42c128:	ffffdfff ffffffff ffffffff ffffffff     ................
  42c138:	ffffffff 454c4449 00000000 51726d54     ....IDLE....TmrQ
  42c148:	00000000 20726d54 00637653 2074754f     ....Tmr Svc.Out 
  42c158:	6d20666f 726f6d65 00000079 0000ffff     of memory.......
  42c168:	4c4c554e 696f7020 7265746e 00000000     NULL pointer....
  42c178:	6f5f766c 00006a62 0000ffff 640a6f4e     lv_obj......No.d
  42c188:	00617461                                ata.

0042c18c <_lv_bpp1_opa_table>:
  42c18c:	0000ff00                                ....

0042c190 <_lv_bpp2_opa_table>:
  42c190:	ffaa5500                                .U..

0042c194 <_lv_bpp4_opa_table>:
  42c194:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

0042c1a4 <_lv_bpp8_opa_table>:
  42c1a4:	03020100 07060504 0b0a0908 0f0e0d0c     ................
  42c1b4:	13121110 17161514 1b1a1918 1f1e1d1c     ................
  42c1c4:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
  42c1d4:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
  42c1e4:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
  42c1f4:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
  42c204:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
  42c214:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
  42c224:	83828180 87868584 8b8a8988 8f8e8d8c     ................
  42c234:	93929190 97969594 9b9a9998 9f9e9d9c     ................
  42c244:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
  42c254:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  42c264:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  42c274:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  42c284:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  42c294:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0042c2a4 <wcorr.10557>:
  42c2a4:	81808080 83828281 87868584 8d8c8a89     ................
  42c2b4:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
  42c2c4:	000000b5 0000ffff ffaa5500 33221100     .........U...."3
  42c2d4:	77665544 bbaa9988 ffeeddcc ffaa5500     DUfw.........U..
  42c2e4:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........
  42c2f4:	006e6962                                bin.

0042c2f8 <cmaps>:
  42c2f8:	00000020 0001005f 00000000 00000000      ..._...........
  42c308:	00020000 000000b0 0060f7f3 0042f68c     ..........`...B.
  42c318:	00000000 0003003b                       ....;...

0042c320 <glyph_dsc>:
	...
  42c328:	03c00000 00000000 03c00000 00000a03     ................
  42c338:	0580000f 05000505 09d0001c 00000a0a     ................
  42c348:	08b0004e fe000f09 0bd00092 00000a0c     N...............
  42c358:	09a000ce ff000b0a 02f00105 05000503     ................
  42c368:	04b0010d fd010e04 04c00129 fd000e04     ........).......
  42c378:	05a00145 05000606 08200157 02000708     E.......W. .....
  42c388:	03300173 fe000503 0560017b 03000305     s.0.....{.`.....
  42c398:	03300183 00000303 04f00188 ffff0e07     ..0.............
  42c3a8:	095001b9 00000a09 053001e6 00000a04     ..P.......0.....
  42c3b8:	081001fa 00000a08 08000222 00000a08     ........".......
  42c3c8:	0960024a 00000a0a 0810027c 00000a08     J.`.....|.......
  42c3d8:	08a002a4 00000a09 086002d1 00000a08     ..........`.....
  42c3e8:	090002f9 00000a09 08a00326 00000a08     ........&.......
  42c3f8:	0330034e 00000803 0330035a fd000b03     N.0.....Z.0.....
  42c408:	0820036b 01000808 0820038b 02000608     k. ....... .....
  42c418:	082003a3 01000808 080003c3 00000a08     .. .............
  42c428:	0e8003eb fd000d0e 0a400446 00ff0a0c     ........F.@.....
  42c438:	0aa00482 00010a09 0a2004af 00000a0a     .......... .....
  42c448:	0b9004e1 00010a0a 09600513 00010a08     ..........`.....
  42c458:	08e0053b 00010a08 0ad00563 00000a0a     ;.......c.......
  42c468:	0b600595 00010a09 045005c2 00010a02     ..`.......P.....
  42c478:	073005cc 00ff0a07 0a1005ef 00010a0a     ..0.............
  42c488:	08500621 00010a08 0d600649 00010a0b     !.P.....I.`.....
  42c498:	0b600680 00010a09 0bc006ad 00000a0c     ..`.............
  42c4a8:	0a2006e9 00010a09 0bc00716 fd000d0c     .. .............
  42c4b8:	0a300764 00010a09 08b00791 00000a09     d.0.............
  42c4c8:	083007be 00000a09 0b1007eb 00010a09     ..0.............
  42c4d8:	09f00818 00ff0a0b 0fc0084f 00000a10     ........O.......
  42c4e8:	0970089f 00000a0a 091008d1 00ff0a0b     ..p.............
  42c4f8:	09300908 00000a09 04b00935 fd010e04     ..0.....5.......
  42c508:	04f00951 ffff0e07 04b00982 fd000e04     Q...............
  42c518:	0830099e 02010607 070009b3 ff000107     ..0.............
  42c528:	086009b7 09010205 086009bc 00000808     ..`.......`.....
  42c538:	099009dc 00010b08 08000a08 00000808     ................
  42c548:	09900a28 00000b09 08900a5a 00000808     (.......Z.......
  42c558:	04f00a7a 00000b06 09b00a9b fd000b09     z...............
  42c568:	09900acd 00010b08 03e00af9 00010b02     ................
  42c578:	04000b04 fdfe0e05 08a00b27 00010b08     ........'.......
  42c588:	03e00b53 00010b02 0ed00b5e 0001080d     S.......^.......
  42c598:	09900b92 00010808 08e00bb2 00000809     ................
  42c5a8:	09900bd6 fd010b08 09900c02 fd000b09     ................
  42c5b8:	05c00c34 00010805 07000c48 00000807     4.......H.......
  42c5c8:	05d00c64 00000a06 09800c82 00010808     d...............
  42c5d8:	07d00ca2 00ff0809 0c900cc6 0000080d     ................
  42c5e8:	07c00cfa 00000808 07d00d1a fdff0b09     ................
  42c5f8:	07500d4c 00000807 04f00d68 fd000e05     L.P.....h.......
  42c608:	04300d8b fd010e02 04f00d99 fd000e05     ..0.............
  42c618:	08200dbc 03000308 05e00dc8 06000506     .. .............
  42c628:	04600dd7 03000304 0e000ddd feff0f0f     ..`.............
  42c638:	0e000e4e 00000b0e 0e000e9b ff000d0e     N...............
  42c648:	0e000ef6 00000b0e 09a00f43 00000b0a     ........C.......
  42c658:	0e000f7a fe000f0e 0e000fe3 fe000f0e     z...............
  42c668:	0fc0104c ff000d10 0e0010b4 fe000f0e     L...............
  42c678:	0fc0111d 00000b10 0e001175 fe000f0e     ........u.......
  42c688:	070011de ff000c07 0a801208 ff000c0b     ................
  42c698:	0fc0124a fe000e10 0e0012ba 00000b0e     J...............
  42c6a8:	0c401307 fe010e0a 0c40134d fe000f0d     ..@.....M.@.....
  42c6b8:	0c4013af ff000d0d 0c401404 ff000d0d     ..@.......@.....
  42c6c8:	0c401459 fe010e0a 0c40149f ffff0d0e     Y.@.......@.....
  42c6d8:	08c014fa ff000d09 08c01535 ff000d09     ........5.......
  42c6e8:	0c401570 ff000d0d 0c4015c5 0300040d     p.@.......@.....
  42c6f8:	0fc015df 00000b10 11801637 fe000f12     ........7.......
  42c708:	0fc016be feff0f11 0e00173e ff000d0e     ........>.......
  42c718:	0c401799 0100080d 0c4017cd 0100080d     ..@.......@.....
  42c728:	11801801 00000b12 0e001864 00000b0e     ........d.......
  42c738:	0e0018b1 fe000f0e 0e00191a feff0f0f     ................
  42c748:	0c40198b ff000d0d 0c4019e0 fe000f0d     ..@.......@.....
  42c758:	0c401a42 ff000d0d 08c01a97 feff0f0a     B.@.............
  42c768:	0c401ae2 fe000f0d 0c401b44 fe000f0d     ..@.....D.@.....
  42c778:	0fc01ba6 00000b10 0e001bfe feff0f10     ................
  42c788:	0a801c76 fe000f0b 11801cc9 ff000d12     v...............
  42c798:	11801d3e 00000a12 11801d98 00000a12     >...............
  42c7a8:	11801df2 00000a12 11801e4c 00000a12     ........L.......
  42c7b8:	11801ea6 00000a12 11801f00 ff000c12     ................
  42c7c8:	0c401f6c fe000f0c 0c401fc6 fe000f0d     l.@.......@.....
  42c7d8:	0e002028 feff0f0f 11802099 00000b12     ( ....... ......
  42c7e8:	0a8020fc fe000f0b 0e10214f 00000a0f     . ......O!......

0042c7f8 <gylph_bitmap>:
  42c7f8:	0dd9a00e 800cc890 11600ab7 1fd9800b     ..........`.....
  42c808:	88f09109 f080081f 00000088 3c200d00     .............. <
  42c818:	000f0000 ff2f0069 01f7ffff 10a6115c     ....i./.....\...
  42c828:	c3006900 00880000 ff9f00d2 12f0ffff     .i..............
  42c838:	20e223c5 c003d200 04f00000 000000b0     .#. ............
  42c848:	00000070 0000000e 0000e000 30eaef19     p..............0
  42c858:	a7e6d60c 000ef402 e0801f00 ef6f0000     ..............o.
  42c868:	16000050 0000e5ff 01f00a0e 135fe000     P............._.
  42c878:	b06e5ef8 91fecf05 000e0000 70000000     .^n............p
  42c888:	dd080000 00a70030 04d0024b 007700c0     ....0...K.....w.
  42c898:	00201dd0 a7d0034b dc070000 30ccc434     .. .K.......4..0
  42c8a8:	2d1d0000 0000d022 b3003ba6 3ac00500     ...-"....;.....:
  42c8b8:	1d00a300 d0000d20 0400a600 4d0040cc     .... ........@.M
  42c8c8:	000030fc 00c018f7 d005f201 6ebb0000     .0.............n
  42c8d8:	5f000040 070000f3 8003dbe6 ba1d302f     @.._......../0..
  42c8e8:	01005fa0 b41f40df 03c0fe48 b240fcbf     ._...@..H.....@.
  42c8f8:	00000000 f0011f00 00f0001f 0bf10300     ................
  42c908:	4f400f90 9b007d00 aa00aa00 7d009b00     ..@O.}.........}
  42c918:	0f004f00 03900b40 0e005ef1 04c00860     .O..@....^..`...
  42c928:	00f301f0 00e600f5 01f500e6 08f004f3     ................
  42c938:	5e600ec0 00930000 09c2a688 dd4d40fe     ..`^.........@M.
  42c948:	509342b1 00005200 00005004 0000a008     .B.P.R...P......
  42c958:	1f00a008 03f3ffff 0030b339 0000a008     ........9.0.....
  42c968:	0100a008 601ef603 00002ce1 f9ff0300     .......`.,......
  42c978:	00103303 402ef503 400e0000 00e00400     .3.....@...@....
  42c988:	00009a00 0400400e 9a0000f0 400e0000     .....@.........@
  42c998:	00f00300 00009a00 0300500e 9a0000f0     .........P......
  42c9a8:	500e0000 00f00300 fe4c0000 b64f0070     ...P......L.p.O.
  42c9b8:	b00d908f f4325f00 4fe70000 a40c0020     ....._2....O ...
  42c9c8:	ca0000f2 0e00402f 0500db70 68fb04f2     ..../@..p......h
  42c9d8:	cf0400f9 fbef00e7 ab00cb44 ab00ab00     ........D.......
  42c9e8:	ab00ab00 ab00ab00 df07ab00 858e10ea     ................
  42c9f8:	0001c07e 0000f106 0000f006 0000900d     ~...............
  42ca08:	1c0000cc db0100c0 e51d0000 ff7f4244     ............DB..
  42ca18:	ff7ff9ff 4424f0ff 0000905f 090000bc     ......$D_.......
  42ca28:	3f0000e1 040010d8 0000d06d 0010f402     ...?....m.......
  42ca38:	75bdf402 df19d07d 000010ea 0000a00d     ...u}...........
  42ca48:	0000ac00 00e10700 404f0000 f6020010     ..........O@....
  42ca58:	1d00f500 00f500a0 ffffff7f 333313f3     ..............33
  42ca68:	000030f7 0000f500 00f50000 f0ffff09     .0..............
  42ca78:	4044b40a 0000800c 0000700e 40fcff0f     ..D@.....p.....@
  42ca88:	f25c3403 f7000000 f7000010 f16c858e     .4\...........l.
  42ca98:	30fbdf08 d5ef2a00 57d63f00 00c00c40     ...0.*...?.W@...
  42caa8:	00f40200 5b4f0000 fe04a1ff 3fd05d84     ......O[.....].?
  42cab8:	303f0080 f20300e8 dc45f806 e9df0500     ..?0......E.....
  42cac8:	ffff9f10 44449dfd 04009ce9 0b0000f2     ......DD........
  42cad8:	2f0000b0 ad000040 f6010000 e0080000     .../@...........
  42cae8:	800e0000 106f0000 fe9e0100 63be0091     ......o........c
  42caf8:	600fc06e cc006f00 02c02b20 00e2ffef     n..`.o.. +......
  42cb08:	d04c42dc 1f00205f 0200f255 35d50ef5     .BL._ ..U......5
  42cb18:	ef1a00de bf0310ea a42f20ea 008ee14b     ......... /.K...
  42cb28:	009de900 714fdd00 ff07ff29 02009efc     ......Oq).......
  42cb38:	0000ac10 6507f602 ef0ab08f 532e00d7     .......e.......S
  42cb48:	000000f5 3f000000 532ee452 000000f5     .......?R..S....
  42cb58:	2e000000 210df652 000001d0 00310000     ....R..!......1.
  42cb68:	01f26c00 0f00d68e 0a0000c3 000040fb     .l...........@..
  42cb78:	0070ee17 00c30500 1f000000 03f3ffff     ..p.............
  42cb88:	00303333 00000000 1f000000 03f3ffff     330.............
  42cb98:	04303333 0e000000 000010d7 0020f95c     330.........\. .
  42cba8:	00f22a00 06b1af03 1c0082de 00000060     .*..........`...
  42cbb8:	07000000 9e10eadf 01c06e74 00f00600     ........tn......
  42cbc8:	00c00900 00208e00 0000f206 00007008     ...... ......p..
  42cbd8:	00000000 0000800b 0000900c daef6c00     .............l..
  42cbe8:	3d000040 d91610a4 09e50100 90ca98ee     @..=............
  42cbf8:	43bd800a 0fd3c0af 0c00f213 063c69c0     ...C.........i<.
  42cc08:	c00700d0 d0064b3b 2cc00700 00f2033c     ....;K.....,<...
  42cc18:	0f4ac00c 9e43bd10 800ac5e3 cf91ee09     ..J...C.........
  42cc28:	00e50190 00000000 10a43d00 00000028     .........=..(...
  42cc38:	d9ef7c00 00000010 0000f10c d73f0000     .|............?.
  42cc48:	00000000 00006eb9 0ef20200 09000050     .....n......P...
  42cc58:	00d007a0 00301f00 7f0000f4 00fbffff     ......0.........
  42cc68:	3333e700 f005204f 900c0000 0000900c     ..33O ..........
  42cc78:	ff8ff106 e308c4fe 8ef24b33 581f0000     ........3K.....X
  42cc88:	f11800e0 f8ffff8f 3733e308 00008ef6     ..........37....
  42cc98:	00e0c809 338e9d00 ff787f34 0070fdff     .......34.x...p.
  42cca8:	40fbcf07 6a96cf00 00e20af5 601f3000     ...@...j.....0.`
  42ccb8:	4f000000 00000020 0000204f 00601f00     ...O ...O ....`.
  42ccc8:	e20a0000 01300000 f56a96cf fbdf0700     ......0...j.....
  42ccd8:	feff8f40 448e00a4 8e70cf46 f3070000     @......DF.p.....
  42cce8:	0000008e 00008eda 008e9d00 8e9d0000     ................
  42ccf8:	da000000 0700008e 46448ef3 ff8f70bf     ..........DF.p..
  42cd08:	8f00a4fe 8ef6ffff 8e414444 8e000000     ........DDA.....
  42cd18:	8f000000 8ec0ffff 8e203333 8e000000     ........33 .....
  42cd28:	8e000000 8f424444 8ff9ffff 8ef6ffff     ....DDB.........
  42cd38:	8e414444 8e000000 8e000000 8f000000     DDA.............
  42cd48:	8ec0ffff 8e203333 8e000000 8e000000     ....33 .........
  42cd58:	00000000 50fccf07 6a96cf00 00e20af6     .......P...j....
  42cd68:	601f2000 4f000000 00000020 0000204f     . .`...O ...O ..
  42cd78:	00601fb9 e30ab900 00b90000 f86a96cf     ..`...........j.
  42cd88:	fcdf0700 00008e60 00e0e808 008e8e00     ....`...........
  42cd98:	e0e80800 8f8e0000 e8ffffff 9e3333e3     .............33.
  42cda8:	0800008e 0000e0e8 00008e8e 00e0e808     ................
  42cdb8:	8e8e8e00 8e8e8e8e 8e8e8e8e c0ffff02     ................
  42cdc8:	00bc4404 00c00900 00009c00 0000c009     .D..............
  42cdd8:	0900009c ba0020c0 608fb50e 8e80fe3c     ..... .....`<...
  42cde8:	504f0000 f604008e 3f008e00 038e0070     ..OP.......?p...
  42cdf8:	8e0000f8 0000c02e 00f6ec8e 7fb08f00     ................
  42ce08:	008e0030 8e00e10a 00cc0000 1e00008e     0...............
  42ce18:	00008ea0 00008e00 00008e00 00008e00     ................
  42ce28:	00008e00 00008e00 00008e00 00008e00     ................
  42ce38:	44448e00 ffff8f40 00008ef2 f7e80800     ..DD@...........
  42ce48:	fe020000 0000f18f a0dce8bf 8d9e4f00     .............O..
  42ce58:	870d302f 069cd0e8 018d7ee0 e807e5e7     /0.......~......
  42ce68:	00fc06d0 0a008d7e d0e80720 7e000000     ....~... ......~
  42ce78:	0800108e 0000fce8 00f98f8e f6e6e808     ................
  42ce88:	098e8e00 e0e808f3 8e8ee10c e8b81e00     ................
  42ce98:	ee3f00e0 6f00008e 0000e0e8 cf0700ae     ..?....o........
  42cea8:	000050eb f96b96cf 00e20a00 1f605f00     .P....k......_`.
  42ceb8:	0a000060 00204fd0 4ff00600 06000020     `....O ....O ...
  42cec8:	00601ff0 0ad00a00 5f0000e2 96cf0060     ..`........_`...
  42ced8:	0000fa6b 50ebdf07 fdff8f00 45e40870     k......P....p..E
  42cee8:	008eb08f e0385f00 8ef50100 483f0000     ....._8.......?H
  42cef8:	d04d01e0 b2ffff8f 1033e308 00008e00     ..M.......3.....
  42cf08:	00e00800 07000000 0050ebcf 6b96cf00     ..........P....k
  42cf18:	e20a00f9 605f0000 0000601f 204fd00a     ......_`.`....O 
  42cf28:	f0060000 0000204f 601ff005 d00a0000     ....O .....`....
  42cf38:	0000e20a df01605f 00fa5a85 fcdf0800     ...._`...Z......
  42cf48:	00000050 9421ec01 1b000000 0000c1ff     P.....!.........
  42cf58:	00120000 70fdff8f 8f45e408 00008eb0     .......p..E.....
  42cf68:	00e0385f 008ef501 e0383f00 8fd04d01     _8.......?8..M..
  42cf78:	08c2ffff 00da33e3 f602008e 0500e008     .....3..........
  42cf88:	fd9e01f3 64ce00a2 402f706b f8010000     .......dkp/@....
  42cf98:	06000000 000095fd 50ee6a01 9f000000     .........j.P....
  42cfa8:	05002000 47a53ff1 ef4b00eb ffff10e9     . ...?.G..K.....
  42cfb8:	4424ffff 004044bd 0000c009 00009c00     ..$D.D@.........
  42cfc8:	00c00900 009c0000 c0090000 9c000000     ................
  42cfd8:	09000000 000000c0 9c00009c a90b0000     ................
  42cfe8:	ba0000c0 0b00009c 0000c0a9 00009cba     ................
  42cff8:	00c0a90b 008eba00 f4940d00 0cf50300     ................
  42d008:	00fd68f8 10e9ef09 0000b00c 205fc00a     .h............_ 
  42d018:	00f50100 8e0000e9 00f00800 1f00700e     .............p..
  42d028:	00f10560 c900ad00 f4030000 0000303f     `...........?0..
  42d038:	00c0ba0c f55f0000 00000000 6f0000ee     ......_........o
  42d048:	b00d0010 1ff20200 f13f0060 0bd00800     ........`.?.....
  42d058:	e68b00b0 06700d00 9be600f0 01202f00     ......p....../ .
  42d068:	4ff103f5 00008d10 0eb009ca 0000d860     ...O........`...
  42d078:	09600e6f 0000f3b2 04109f1f 0000d0f9     o.`.............
  42d088:	0000fb0c 000080ef 0000f607 3f00309f     .............0.?
  42d098:	a00d0050 9d00f208 04cc0000 2f0000f3     P............../
  42d0a8:	0000709e 0000fc06 10fe0900 4d4f0000     .p............OM
  42d0b8:	e80100b0 0b00f702 207f00d0 0b00207f     ........... . ..
  42d0c8:	00b00cd0 2f009c00 302f0050 0c009e00     ......./P./0....
  42d0d8:	e8000090 0000f105 00e6f305 fd0c0000     ................
  42d0e8:	00000000 0000403f 00f30200 2f000000     ....?@........./
  42d0f8:	00000030 0000f302 ffffff4f 4a444491     0.......O....DDJ
  42d108:	030000f3 010000f6 000000ea 000000cc     ................
  42d118:	0000109e 0000406f 0000703f 4444d41e     ....o@..?p....DD
  42d128:	ffffff36 8df68ffc 8d008d31 8d008d00     6.......1.......
  42d138:	8d008d00 8d008d00 8d008d00 8f318d00     ..............1.
  42d148:	00005df6 0000f200 0000800b 0100006d     .]..........m...
  42d158:	0b0000f2 6d000080 f2010000 700b0000     .......m.......p
  42d168:	006d0000 00f20100 00700b00 00006d00     ..m.......p..m..
  42d178:	f3bff201 f302f325 f302f302 f302f302     ....%...........
  42d188:	f302f302 f302f302 f325f302 ad00f3bf     ..........%.....
  42d198:	c41e0000 a0850800 100ee200 0b97005b     ............[...
  42d1a8:	eee00250 0be0eeee b00900c0 10eacf04     P...............
  42d1b8:	b05d740b f0040000 f2eece04 f214821f     .t].............
  42d1c8:	f204104f f23d701f f2d7df04 000000ba     O....p=.........
  42d1d8:	000000ba 000000ba 30fc8eba f34bd5bf     ...........0..K.
  42d1e8:	ca0010be 7e0000ba 7e0000ba ca0010be     .......~...~....
  42d1f8:	f35bd5bf 30fc8eb9 60fd7d00 f448f709     ..[....0.}.`..H.
  42d208:	2000502f 0000005f 0000005f 2000502f     /P. _..._.../P. 
  42d218:	f448f709 60fd7d00 1f000000 01000040     ..H..}.`....@...
  42d228:	000000f4 ef08401f f70af4c4 f542ff48     .....@......H.B.
  42d238:	5ff40700 452f0000 f40100f0 6f00502f     ..._../E..../P.o
  42d248:	7e63ae40 fc8e00f4 8e00404f d50a40fc     @.c~....O@...@..
  42d258:	202ff438 ee5f8c00 215fffee 702f1111     8./ .._..._!../p
  42d268:	f8091000 7d00e446 9e0080fe 41f405e3     ....F..}.......A
  42d278:	cf00c008 d329f0ff 00d00820 0800d008     ......). .......
  42d288:	d00800d0 00d00800 0000d008 604efc7e     ............~.N`
  42d298:	f67f74af 5f00502f 0000f065 00005ff6     .t../P._e...._..
  42d2a8:	00f6620f f709f606 0750ff47 00f5c4ef     .b......G.P.....
  42d2b8:	203f0000 b06e64cb 80fdae03 0000ba00     ..? .dn.........
  42d2c8:	0000ba00 0000ba00 fb8eba00 6dc5bf20     ............ ..m
  42d2d8:	0300bed0 0000baf2 0000baf4 0000baf5     ................
  42d2e8:	0000baf5 0000baf5 00a8baf5 babababa     ................
  42d2f8:	babababa 00b00a00 00000099 0a00ab00     ................
  42d308:	00ab00b0 ab00b00a 00b00a00 b00a00ab     ................
  42d318:	4e06aa00 baa0df71 ba000000 ba000000     ...Nq...........
  42d328:	ba000000 bac01c00 ba00cc01 bb00d11c     ................
  42d338:	bf0060cf bd00e1db ba00dc11 ba703f00     .`...........?p.
  42d348:	baf30700 babababa babababa 9eb9baba     ................
  42d358:	d4df15fa ed45fb0b bef24ae6 00f60600     ......E..J......
  42d368:	00a07b0e c900204f f10300ba a09b0c00     .{..O ..........
  42d378:	00103f00 0300bac9 9b0c00f1 103f00a0     .?............?.
  42d388:	9eb9c900 b4bf20fb 00bed05d 00baf203     ..... ..].......
  42d398:	00baf400 00baf500 00baf500 00baf500     ................
  42d3a8:	7d00f500 9f0060fd 2f708f74 057f0050     ...}.`..t.p/P...
  42d3b8:	f30100f0 2f00005f 0700f532 48f709f0     ...._../2......H
  42d3c8:	df0700f7 8eb900d6 c4bf30fc 10bef33a     .........0..:...
  42d3d8:	00baca00 00ba7e00 10be7e00 d5bfca00     .....~...~......
  42d3e8:	7ebaf35b 00ba30fc 00ba0000 00ba0000     [..~.0..........
  42d3f8:	8e000000 af403ffc 2ff48e74 457f0050     .....?@.t../P..E
  42d408:	f40100f0 2f00005f 0700f542 48f70af4     ...._../B......H
  42d418:	ef0840ff 0000f4c4 00401f00 00f40100     .@........@.....
  42d428:	401f0000 fd4b8eb9 0b10be71 00ba00b0     ...@..K.q.......
  42d438:	ba00a00b 00a00b00 13eadf05 6fa035f7     .............5.o
  42d448:	ee010000 6a011096 000030ef 6f646cd9     .......j.0...ldo
  42d458:	70fdae62 0800d008 ffcf00d0 20d329f0     b..p.........). 
  42d468:	0800d008 d00800d0 00d00800 0051f505     ..............Q.
  42d478:	00c8e39f 00c8f302 00c8f302 00c8f302     ................
  42d488:	00c9f302 00abf303 835ff307 df06f37e     .........._.~...
  42d498:	900df3c5 6ea00a00 00f30100 007d00f5     .......n......}.
  42d4a8:	600ec009 f0243f00 b9c80000 ff060000     ...`.?$.........
  42d4b8:	0f000030 00c800c0 0d00f106 cf00d056     0...........V...
  42d4c8:	1ff00360 009c2f30 07b8009a 400ef1b2     `...0/.........@
  42d4d8:	0cd6e005 0f00e074 997c006f a0af0000     ....t...o.|.....
  42d4e8:	0040ff01 0b00f405 304f00e0 d009e107     ..@.......O0....
  42d4f8:	d900402f 3f0000d9 4f0000d0 e70100e1     /@.....?...O....
  42d508:	b00b00bb 107e701e 900df305 6fa00a00     .....p~........o
  42d518:	00f30100 007d00f6 600dc009 f0342f00     ......}....`./4.
  42d528:	a9c90000 ff050000 0e000020 000000c0     ........ .......
  42d538:	940000e5 1b0000ad 000020fc a1ffff5f     ......... .._...
  42d548:	00f43733 0000e701 8e0000cb 404f0010     37............O@
  42d558:	33a31e00 fcffff26 0fa06e00 00f40192     ...3&....n......
  42d568:	f401401f 3f303f00 306f00c0 1f00f401     .@...?0?..o0....
  42d578:	00f40140 fa00401f 8bea0520 8b8b8b8b     @....@.. .......
  42d588:	8b8b8b8b 8b8b8b8b 0250be8b f00500ae     ..........P.....
  42d598:	05005f00 104f00f0 4f10df00 00f00550     ._....O....OP...
  42d5a8:	f005005f 2a005f00 00e40be0 b440ec07     _...._.*......@.
  42d5b8:	c0df251e 00000001 2b30cc04 0057c001     .%........0+..W.
  42d5c8:	c0012b93 0630cc05 0bf60fa1 000000e2     .+....0.........
	...
  42d5e0:	fb7b0200 04000000 d0ffff9d ffaf0300     ..{.............
  42d5f0:	00fdffff ffffaf00 00d0dfff b6ffff0a     ................
  42d600:	0000ed10 000094af 0a00d00e 000000f1     ................
  42d610:	af0000ed 0e000010 f10a00d0 fd450000     ..............E.
  42d620:	10af0000 d0ffef01 00f19d17 0efcff5f     ............_...
  42d630:	0010ffff ff31fdaf 0000e0ff bd030001     ......1.........
  42d640:	000000a3 18500000 84888888 ddbffa05     ......P.........
  42d650:	affddddd 00107fe4 e04eca00 0000104f     ..........N.O...
  42d660:	effe0ec8 cf000010 ee3fe0ef 0ef8eeee     ..........?.....
  42d670:	66768ff6 f86feb66 000010af 3fe08fcc     ..vff.o........?
  42d680:	c8000010 65dffc0e cfee5555 ffff5fc2     .......eUU..._..
  42d690:	572cf9ff 77770575 ffff7577 ffffff1f     ..,Wu.wwwu......
  42d6a0:	2fffffff ffffffff ff0effef 01feffff     .../............
  42d6b0:	11110010 feef1011 ffffff0e 2ffffffe     .............../
  42d6c0:	ffffffff ff1fffff 68ffffff 88880787     ...........h....
  42d6d0:	87688688 88888807 1fffff86 ffffffff     ..h.............
  42d6e0:	ff2fffff dfffffff ffff0dfd 0000fdff     ../.............
  42d6f0:	01000000 00000050 f81d0000 00000000     ....P...........
  42d700:	00fddf01 1d000000 602de2ff fedf0100     ..........-`....
  42d710:	00f7df20 00e2ff1d df71ff8f 080020fe      .........q.. ..
  42d720:	e2fffeff 8f000000 0020feff ff080000     .......... .....
  42d730:	000000e2 207d0000 00000000 00000000     ......} ........
  42d740:	0b00607f 00f6efe2 ff4ff8bf 04d1ff6b     .`........O.k...
  42d750:	10fdffff e1ff5f00 ffbf0000 ff0b00f6     ....._..........
  42d760:	bf60ffdf f5ff14fd 4f00d1cf 001017f6     ..`........O....
  42d770:	00006003 00001100 00000000 000000ff     .`..............
  42d780:	ff216f00 0600f712 16ff61ff f91f60ff     .o!......a...`..
  42d790:	9f10ff01 01e06ff1 f60e10ff ff0180af     .....o..........
  42d7a0:	cffa0810 10ff0160 80affc06 0800aa00     ....`...........
  42d7b0:	00d07ffb f70d0000 0000f81f 07f18f00     ................
  42d7c0:	2a0091ff 9f0070ff f9ffeeff cf050000     ...*.p..........
  42d7d0:	0050fdff 44020000 00000020 00000000     ..P....D .......
  42d7e0:	00000000 00a0ff0a 0c000000 0000c0ff     ................
  42d7f0:	ffdfd603 0e306dfd ffffffff ff5fe0ff     .....m0......._.
  42d800:	ffffaaff f4ff1af5 a1ff4f00 00d0ff03     .........O......
  42d810:	0430ff0d 0f00f0ff ff4f40ff ffbf22fb     ..0......@O.."..
  42d820:	ffff2ff4 f2ffffff fffffe09 0090efff     ./..............
  42d830:	e5ff5e50 00000005 00c0ff0c 04000000     P^..............
  42d840:	00004077 03000000 00410310 9f000000     w@........A.....
  42d850:	00f50df5 fd1b0000 00f58dff b1df0200     ................
  42d860:	00f5ff2d 3ef84f00 00f5bfc2 ff55ff07     -....O.>......U.
  42d870:	40fe39fe ff8fe39f f66ff5ff ffff2aac     .9.@......o..*..
  42d880:	e673ffff ffff5f00 00f1ffff d7ff6f00     ..s.._.......o..
  42d890:	00f2ff7f 90ff6f00 00f2ff0d 90ff6f00     .....o.......o..
  42d8a0:	00f2ff0d 70ff4f00 00e1ff0b 33000000     .....O.p.......3
  42d8b0:	00000000 b0ff0b00 00000000 00c0ff0c     ................
  42d8c0:	0c000000 0000c0ff ff0c0000 000000c0     ................
  42d8d0:	c0ff0c00 8f000000 f8ffffff ff2e0000     ................
  42d8e0:	00e2ffff ffef0200 000020fe e2ff2d00     ......... ...-..
  42d8f0:	99790000 9928de82 fbffff97 ffffbf22     ..y...(....."...
  42d900:	ffffffff ffffffff faffffff ccaccfb3     ................
  42d910:	cccccccc bb0600ca 30babbbb ff4f0000     ...........0..O.
  42d920:	e1ffffff 30ef0000 fb060000 00f80900     .......0........
  42d930:	cf000000 00d04f50 2f000000 4284dfe1     ....PO...../...B
  42d940:	4b340000 fdfffff9 ffff0100 fffffffb     ..4K............
  42d950:	ffff8b98 fffffffc ffffffff fffffffc     ................
  42d960:	ffffffff ffff9ffb ffffffff 000000f6     ................
  42d970:	33000000 ff8d0100 00ef00c6 ffffff4e     ...3........N...
  42d980:	ff04dfe4 ff4c00b3 00f90eff ff8f0000     ......L.........
  42d990:	0100c06f 8effffff de010050 0000edee     o.......P.......
  42d9a0:	00000000 22222200 21000000 10ffffff     ....."""...!....
  42d9b0:	fff80800 0010bcfb fcfff41e df010010     ................
  42d9c0:	e8effec0 10fe8e44 ffff1afe fd00c1ff     ....D...........
  42d9d0:	94bb2800 00000000 02007002 ef0200ef     .(.......p......
  42d9e0:	fffffffd ffffffff ffffffff ffffffff     ................
  42d9f0:	4734ffff 0500f0ff 050000ff 000000c0     ..4G............
  42da00:	70020000 02000000 000000ef 00f0ef02     ...p............
  42da10:	ffffff0d ffff2002 1f8ef0ff 00ffffff     ..... ..........
  42da20:	ffffffe7 ff5f3ff0 9008ffff f0ff4734     .....?_.....4G..
  42da30:	05000000 000000ff 00c00500 00000000     ................
  42da40:	00000000 07000000 00000070 05007002     ........p....p..
  42da50:	000000fa 8100f02e 0200604f dd01f0ef     ........O`......
  42da60:	ffdff007 1e32f0ff fffff680 278ef0ff     ......2........'
  42da70:	ffffb9e0 730ef0ff ffff9bf1 543ff0ff     .......s......?T
  42da80:	ffff9af0 0a89f0ff 4734d8c0 7f00f0ff     ..........4G....
  42da90:	0000f343 f602f05f 0000b00c 0000c005     C..._...........
  42daa0:	000010bf 09000000 000000e3 02000000     ................
  42dab0:	88370010 88888888 ffffef73 feffffff     ..7.....s.......
  42dac0:	ffdf32fe f9ffffff fdff7f00 10fdffff     .2..............
  42dad0:	7fa0ffcf ffffffff ff0700fa a05ff3ff     .............._.
  42dae0:	ffcf0000 00000330 00fccf00 00000000     ....0...........
  42daf0:	ccccffcf ffcccccc ffffffaf 04f9ffff     ................
  42db00:	31000030 0600e01f 00e01ff9 e01ffa7f     0..1............
  42db10:	1ffaff09 faffafe0 ffffeb1f ffff1ffa     ................
  42db20:	ff1ffaff 1ffaffff faffffe6 ff5fe01f     .............._.
  42db30:	04e01ffa e01ffaff 0ffa3e00 d70200d0     .........>......
  42db40:	00000000 00000200 0c000000 000020fb     ............. ..
  42db50:	ffff0000 00000090 e6ffff0f ff000000     ................
  42db60:	30fcffff ffff0f00 0091ffff ffffffff     ...0............
  42db70:	ff0fe6ff ffffffff fffffff2 0ffdffff     ................
  42db80:	ffffffff ffff00f8 00b2ffff fdffff0f     ................
  42db90:	ff000040 0000f7ff a1ff0f00 00000000     @...............
  42dba0:	0000406a 14000000 44012044 ffff0d42     j@......D .DB...
  42dbb0:	f1ffdf10 0ff3ffff ff3fffff ffff40ff     ..........?..@..
  42dbc0:	f4fffff4 4fffff0f ff40ffff fffff4ff     .......O..@.....
  42dbd0:	ffff0ff4 40ffff4f fff4ffff ff0ff4ff     ....O..@........
  42dbe0:	ffff4fff f4ffff40 0ff4ffff ff4fffff     .O..@.........O.
  42dbf0:	ffff30ff c0ff9ff3 00fcff09 44444414     .0...........DDD
  42dc00:	ff0d4244 ffffffff fffffff1 3fffffff     DB.............?
  42dc10:	ffffffff fffff4ff ffffffff ffffff4f     ............O...
  42dc20:	fff4ffff ffffffff ffff4fff f4ffffff     .........O......
  42dc30:	ffffffff ff4fffff ffffffff fffffff4     ......O.........
  42dc40:	4fffffff ffffffff ff9ff3ff fcffffff     ...O............
  42dc50:	00100200 e20f4200 0ffb0300 fb0430fe     .....B.......0..
  42dc60:	04f4ff0f ffff0ffb ff0ffb54 0ffbfaff     ........T.......
  42dc70:	fbffffff ffffff0f ffff0ffb ff0ffbd6     ................
  42dc80:	0ffb14fd fb04c1ff 0400fb0f 00a00cfb     ................
  42dc90:	0000fa03 00000000 00120000 00000000     ................
  42dca0:	0060ff03 2e000000 0000f5ff ffef0100     ..`.............
  42dcb0:	000040ff ffffff1d cf0000f3 feffffff     .@..............
  42dcc0:	ffff0a20 e0ffffff ffffff0e 03f2ffff      ...............
  42dcd0:	99999999 88055099 88888888 ffff0f70     .....P......p...
  42dce0:	f3ffffff ffffff0f 0bf4ffff ffffffff     ................
  42dcf0:	0000d1ff 00000000 00903f00 00fc3f00     .........?...?..
  42dd00:	10fd3f00 10fd3f00 10fd3f00 10fd1f00     .?...?...?......
  42dd10:	f4cf0000 cf000000 000000f4 0000f4cf     ................
  42dd20:	00f4cf00 e0cf0000 a4000000 00000000     ................
  42dd30:	10cd0000 fd1f0000 3f000010 000010fd     ...........?....
  42dd40:	0010fd3f 10fd3f00 fd3f0000 ff080000     ?....?....?.....
  42dd50:	ff080090 ff080090 ff080090 ff020090     ................
  42dd60:	07000090 00000080 50040000 00000000     ...........P....
  42dd70:	0060ff02 3f000000 000000f7 70ff0300     ..`....?.......p
  42dd80:	00000000 0000f73f ff9a9906 ff8099c9     ....?...........
  42dd90:	ffffffff ffff3dff f2ffffff f73f1101     .....=........?.
  42dda0:	00001011 0070ff03 3f000000 000000f7     ......p....?....
  42ddb0:	70ff0300 00000000 0000d30c 99996900     ...p.........i..
  42ddc0:	0f989999 ffffffff ffdff3ff ffffffff     ................
  42ddd0:	00000020 00000000 64560100 00000000      .........Vd....
  42dde0:	effebf03 000010f9 0310fa7f 0800e4df     ................
  42ddf0:	b409a0ff 4f50ff1e ff0b20ff efe1ff26     ......PO. ..&...
  42de00:	ffcf09ff bffaff63 ffff09ff 1ef6ff54     ....c.......T...
  42de10:	fbdf51ff 03b0ff09 3004e2ef 0010fc5f     .Q.........0_...
  42de20:	6a95ff2c 000090ff fddf4900 00000092     ,..j.....I......
	...
  42de38:	000020cd 00000000 00f58f00 00406614     . ...........f@.
  42de48:	ef040000 ffefffac 00000091 00a1ff1c     ................
  42de58:	0030fe4d f59f0000 f4ef31ab 05b10700     M.0......1......
  42de68:	7fe1ffff fe0f10fe f5ff2d30 0c90ff4f     ........0-..O...
  42de78:	af00e0ff 60ff5ff6 00f4ff02 fbefff06     ....._.`........
  42de88:	fd4f0000 ff3e0010 020000c0 0154e8df     ..O...>.......T.
  42de98:	0000e3bf ffae0500 60ff0760 00000000     ........`..`....
  42dea8:	4e000000 000000f6 00000000 0000a101     ...N............
	...
  42dec0:	d03e0000 00000000 ff0c0000 00000080     ..>.............
  42ded0:	ff060000 000020ff ef000000 0000fbff     ..... ..........
  42dee0:	8f000000 00f4cffc 2f000000 d0ff00fb     .........../....
  42def0:	0b000000 ff0fc0ff 04000070 ff01fdff     ........p.......
  42df00:	000010ff 2fe0ffdf 0000faff 9bffff7f     ......./........
  42df10:	00f3ffff b0ffff1f c0ffff0e feffff0a     ................
  42df20:	ffffff24 ffffff60 ffffffff cccc06fa     $...`...........
  42df30:	cccccccc 000030cb 36000000 00000000     .....0.....6....
  42df40:	807f0000 0000dbdd fff8ef8d ff07b0ff     ................
  42df50:	6f55fdff aff86ff4 740500e2 207e90ff     ..Uo.o.....t..~ 
  42df60:	fa3f0000 00000000 50b2ef02 2e01004a     ..?........PJ...
  42df70:	8ff41dfd d1ffffb0 fbffff0b 0020feff     .............. .
  42df80:	12fbffcf 02000021 0000c09f 5b000000     ....!..........[
  42df90:	07000000 000000a0 b0ff0800 08000000     ................
  42dfa0:	00b0ffff 95ff0800 0800b0ff ff0590ff     ................
  42dfb0:	90ff07b0 b0ff0500 0000909f 4000fd05     ...............@
  42dfc0:	03000000 00204c10 0bb60000 000020fe     .....L ...... ..
  42dfd0:	fe2ef0cf f4cf0020 20fe2e00 0000f4cf     .... ...... ....
  42dfe0:	f4cffe2e 2e000000 0000f4ff f42e0000     ................
  42dff0:	00000000 00001300 30080000 00000000     ...........0....
  42e000:	bf000000 bbbb08f3 0b0090bb ff39ffff     ..............9.
  42e010:	00f1ffff f0cfcf8f f10a0000 942f3800     .............8/.
  42e020:	0a000080 2f0000f1 00000090 0000f10a     ......./........
  42e030:	0000902f 30f10a03 00902f00 f8cb1f00     /......0./......
  42e040:	eb2f00f8 ff39bbbb 1f00e2ff b0ffffff     ../...9.........
  42e050:	0020fd9f 00000000 00d10800 00878837     .. .........7...
  42e060:	ef000000 00a0ffff ffff0000 ccccfdff     ................
  42e070:	ffffffb6 ffffffff ffffffff ffffffff     ................
  42e080:	ffffffff ffffffff ffffffff ffffffff     ................
  42e090:	ffffffff ffffffff ffffffff ffffffff     ................
  42e0a0:	ffafffff ffffffff 000000f9 00000000     ................
  42e0b0:	dd010000 00000010 d1ff1d00 01000000     ................
  42e0c0:	10fdffdf ff1d0000 00d1ffff ffff9f00     ................
  42e0d0:	0000f9ff c1ff1c01 00000010 00c0ff0c     ................
  42e0e0:	0c000000 0000c0ff ff0c0000 790000c0     ...............y
  42e0f0:	b3ff3b99 ffff9799 ff2b44b2 feffffff     .;.......D+.....
  42e100:	ffffefdd ffffffff accfb3fa cccccccc     ................
  42e110:	0000cacc 02000000 00000000 ff040000     ................
  42e120:	000000c7 ffaf0000 000000f0 fdff1f00     ................
  42e130:	00000000 c0ffff06 00000000 00f7ff08     ................
  42e140:	00000000 0030ff0c 04000000 0000c0ff     ......0.........
  42e150:	ef010000 4a0000f3 f8df0230 fedf0500     .......J0.......
  42e160:	00fbef15 ffffef00 0000faff ffffff0b     ................
  42e170:	000000f7 a2ffff7f 02000000 000085ba     ................
  42e180:	04000000 00000086 faff0610 d1df0200     ................
  42e190:	01f13cef e00efadf fadf21af f6ef9f00     .<.......!......
  42e1a0:	0000fadf fbffff8d 06000000 0000fdff     ................
  42e1b0:	ffef4800 6f0000f6 f6fffbff cff30e00     .H.....o........
  42e1c0:	00f6ff23 04f20aee fe09f6ff ff0400fc     #...............
  42e1d0:	10da08f1 00620200 00000000 00000000     ......b.........
  42e1e0:	87f9ff6f ff080000 08f798ff f9ff8fa6     o...............
  42e1f0:	a8ff9059 ccfcffff ff8ffa0f fff1ffff     Y...............
  42e200:	ffffffa8 8ffa1fff f1ffffff ffffa8ff     ................
  42e210:	fa1fffff ffffff8f ffa8fff1 1fffffff     ................
  42e220:	ffff7ffa e3fff0ff 21222212 ffffff0f     .........""!....
  42e230:	ac0000f9 50cbcccc 99490000 00959999     .......P..I.....
  42e240:	ffffff0e fd00f6ff 4f222222 00c00ff6     ........"""O....
  42e250:	f3ff0100 000000fc c06fff1f ff020000     ..........o.....
  42e260:	fffffff6 6fffffff ffdcffff fffff6ff     .......o........
  42e270:	ffff05b0 00f6ff6f fff6ff0f ff06c0ff     ....o...........
  42e280:	ffff6fff f6ffffed ffffff9f 0010fdff     .o..............
  42e290:	00000000 f0ffff01 ffff0400 ff0600d0     ................
  42e2a0:	080080ff 0030ffff aaffff0a ffff0ca6     ......0.........
  42e2b0:	ff0ef8ff 0be1ffff 60ffdfdd fd4f0000     ...........`..O.
  42e2c0:	7f000000 000000f3 0000a0bf 0010ff00     ................
  42e2d0:	00f80300 c0030000 00000000 00000020     ............ ...
  42e2e0:	b5ef5504 ff000052 b0ff1ffd ffff0f00     .U..R...........
  42e2f0:	0000fcff 3353ffff ff0f0020 57fbff97     ......S3 ......W
  42e300:	aff8ff00 0ff8c6ff fcff8aff f8ffa14a     ............J...
  42e310:	22e3ffaf ff8aff0f fff4ffff ffffaff8     ..."............
  42e320:	8aff4fff f4ffffff ffaf5235 0040ffff     .O......5R....@.
  42e330:	ffffff0a 7f0000f4 20feffff 10010000     ........... ....
  42e340:	00000000 0000af00 8f010000 000030fa     .............0..
  42e350:	ffffef02 bf000050 10ffffff ffff1f00     ....P...........
  42e360:	0300f5ff ffffffff ff5f0070 00f9ffff     ........p._.....
  42e370:	ffffff08 df00c0ff ffffffff ffff9f20     ............ ...
  42e380:	0efdffff ffffffff 2202f2ff 21222222     ...........""""!
  42e390:	ff080000 000000c0 00a20900 bb5b0000     ..............[.
  42e3a0:	bbbbbbbb ffffa3bb ffffffff 0cfcfbff     ................
  42e3b0:	0d1de130 0bfcfc11 0d1de030 fefffc10     0.......0.......
  42e3c0:	fefeefff f1fffcef a070085a f3fffc5f     ........Z.p._...
  42e3d0:	c292297b bffffc7f bfbbbbcb 0bfcfccb     {)..............
  42e3e0:	0d000020 cffffc00 cfcccccc ff9ffbcc      ...............
  42e3f0:	ffffffff 0000f6ff 00000000 00000002     ................
  42e400:	05000000 0000b0df ef070000 0000d0ff     ................
  42e410:	ffff1800 000070ff ffffff29 3b0000ff     .....p..)......;
  42e420:	ffffffff ff0a00f8 ffffffff ff0f00f1     ................
  42e430:	ffffffff 9a0400a0 ffffafaa 00000020     ............ ...
  42e440:	fbff0e00 00000000 f4ff0e00 00000000     ................
  42e450:	c0ff0e00 00000000 50ff0e00 00000000     ...........P....
  42e460:	00fd0d00 00000000 00b30400 55350000     ..............5U
  42e470:	0f000255 f4f2ffff ffffff00 ff0ff42f     U.........../...
  42e480:	f3fff2ff 32ffffff ffff1f22 fff7ffff     .......2".......
  42e490:	ffffffff ffffff8f fffff8ff 8fffffff     ................
  42e4a0:	ffffffff fffffff8 ff8fffff f8ffffff     ................
  42e4b0:	ffffffff ffff8fff 8af8ffff aaaaaaaa     ................
  42e4c0:	00000030 00315524 03000000 ffffffaf     0...$U1.........
  42e4d0:	020000c7 defeffbf 00f6ffff 10b5ff5f     ............_...
  42e4e0:	ff8e0300 00d3dfb0 00000000 0018f58f     ................
  42e4f0:	c8feae05 00600410 ffffdf02 0000f8ff     ......`.........
  42e500:	95ff0c00 40ff7d34 a2020000 77000000     ....4}.@.......w
  42e510:	00000000 00960200 00000000 ff0d0000     ................
  42e520:	00000050 0e000000 000060ff 00000000     P........`......
  42e530:	0000da05 bb5b0000 bbbbbbbb ff20babb     ......[....... .
  42e540:	ffffffff 90ffffff 222212fc 0f222222     ..........""""".
  42e550:	ff5ffcf7 ffffffff 5ffcfa2c ffffffff     .._.....,.._....
  42e560:	fcfa21ff ffffff5f fa27ffff 666626fc     .!.._.....'..&ff
  42e570:	1f666666 bbbbfefa bbbbbbbb ffafb1bf     fff.............
  42e580:	ffffffff 0050ffff 00000000 00000000     ......P.........
  42e590:	bbbbbb5b babbbbbb ffffff20 ffffffff     [....... .......
  42e5a0:	12fc90ff 21222222 fcf70f00 ffffff5f     ...."""!...._...
  42e5b0:	fa0c00f8 ffff5ffc 0100f8ff ff5ffcfa     ....._........_.
  42e5c0:	00f8ffff 26fcfa07 63666666 fefa0f00     .......&fffc....
  42e5d0:	bbbbbbbb b1bfbbbb ffffffaf ffffffff     ................
  42e5e0:	00000050 00000000 bb5b0000 bbbbbbbb     P.........[.....
  42e5f0:	ff20babb ffffffff 90ffffff 222212fc     .. ...........""
  42e600:	0f000010 ff5ffcf7 0000d0ff 5ffcfa0c     ......_........_
  42e610:	00d0ffff fcfa0100 d0ffff5f fa070000     ........_.......
  42e620:	666626fc 0f000050 bbbbfefa bbbbbbbb     .&ffP...........
  42e630:	ffafb1bf ffffffff 0050ffff 00000000     ..........P.....
  42e640:	00000000 bbbbbb5b babbbbbb ffffff20     ....[....... ...
  42e650:	ffffffff 12fc90ff 00000022 fcf70f00     ........".......
  42e660:	0030ff5f fa0c0000 30ff5ffc 01000000     _.0......_.0....
  42e670:	ff5ffcfa 00000030 26fcfa07 00001066     .._.0......&f...
  42e680:	fefa0f00 bbbbbbbb b1bfbbbb ffffffaf     ................
  42e690:	ffffffff 00000050 00000000 bb5b0000     ....P.........[.
  42e6a0:	bbbbbbbb ff20babb ffffffff 90ffffff     ...... .........
  42e6b0:	000000fc 0f000000 0000fcf7 00000000     ................
  42e6c0:	00fcfa0c 00000000 fcfa0100 00000000     ................
  42e6d0:	fa070000 000000fc 0f000000 bbbbfefa     ................
  42e6e0:	bbbbbbbb ffafb1bf ffffffff 0050ffff     ..............P.
	...
  42e6fc:	0000b207 00000000 00fadf0a 00000000     ................
  42e70c:	f53da900 04000000 00e00240 00000010     ..=.....@.......
  42e71c:	600bf8af 6c000000 ffffff30 ffffffff     ...`...l0.......
  42e72c:	f9aff4ff 00500c00 05406d00 c0040050     ......P..m@.P...
  42e73c:	00100000 00000000 00e83ec4 00000000     .........>......
  42e74c:	faef2e00 00000000 4f000000 000000fa     ...........O....
	...
  42e764:	10010000 07000000 00b3ffef 8ffdaf00     ................
  42e774:	ff0420ff b0ff09fd 12fdfe0a f50ef0af     . ..............
  42e784:	f30e2c5d 1233ff0f ff0ff59f f6ff07f3     ],....3.........
  42e794:	06e2ff0f fe0ff6ff f57f1324 2c7df50d     ........$.....},
  42e7a4:	ff0af30d f0bf11fd 0bfeff03 7f00a0ff     ................
  42e7b4:	10febffe dcac0300 00000081 00004334     ............4C..
  42e7c4:	ff7f6605 ff5066f9 ffffffff 666635ff     .f...fP......5ff
  42e7d4:	50666666 cccccc1c ff02c4cc ffffffff     fffP............
  42e7e4:	fbf32f60 02f66d7f f5b72fff f22f60df     `/...m.../...`/.
  42e7f4:	f65d7ffb b72fff02 2f60dff5 5d7ffbf2     ..].../...`/...]
  42e804:	2fff02f6 60dff5b7 7ffbf32f ff01f66d     .../...`/...m...
  42e814:	ffffffff ccbc0750 0090cccc 00000000     ....P...........
  42e824:	00200100 00000000 0050ff04 02000000     .. .......P.....
  42e834:	0050ffff 39040000 0000feff 39ff0400     ..P....9.......9
  42e844:	0000a0ff 39ffff04 040000b0 20ffffff     .......9....... 
  42e854:	ff040000 00b0ffff ffff0400 0000b0ff     ................
  42e864:	ffffff04 040000b0 b0ffffff bf000000     ................
  42e874:	00b0ffff ff0d0000 0000b0ff ffff0000     ................
  42e884:	000000b0 60a80900 00000000 17000000     .......`........
  42e894:	88888888 02004087 ffffffef 00f4ffff     .....@..........
  42e8a4:	cfffff3e f7ffcfff f9ffef03 ff09f808     >...............
  42e8b4:	ffff3ef8 2e4020fe ffdff8ff 01e1ffff     .>... @.........
  42e8c4:	9ff8ffef 80ffffff f8ff8f00 f9ffff09     ................
  42e8d4:	ff09c202 ff9f00f8 4efe4efe 0900f8ff     .........N.N....
  42e8e4:	ffffffff 00f7ffff ffff8f00 c1ffffff     ................
  42e8f4:	00000000 ef030000 03e2ffff bfcefbfb     ................
  42e904:	031dffa4 f1fffaa1 af1f3ad0 ffffffff     .........:......
  42e914:	fffffffa ffafffff faffffff ffffffff     ................
  42e924:	ffffafff fffaffff ffffffff ffffffaf     ................
  42e934:	fffffaff adffffff ffffffff aaaa29f8     .............)..
  42e944:	0000a8aa 00000000 00000300 00000000     ................
  42e954:	0800f104 01000020 f70b10ff 2f000000     .... ........../
  42e964:	94ff0cf1 ff454444 ffffff1b f1ffffff     ....DDE.........
  42e974:	ffffff8f 00fdffff 0000f77f 00000000     ................
  42e984:	0000606f 00000000 00000030 00000000     o`......0.......

0042e994 <kern_class_values>:
  42e994:	00000100 00000000 00000100 00000002     ................
  42e9a4:	00000200 00000000 00000000 00000000     ................
  42e9b4:	00010000 00000000 00000000 00000000     ................
  42e9c4:	000a0100 0000fb06 f3f40000 04050b02     ................
  42e9d4:	010b02f7 00070209 00000000 00000000     ................
  42e9e4:	020d0000 000000fe 00000000 00000000     ................
  42e9f4:	f9000400 00000000 0404fc00 00fe0000     ................
  42ea04:	fe0002fe fcfffe00 00000000 fd0000fe     ................
  42ea14:	fe0000fd 0000fc00 00000000 fe000000     ................
  42ea24:	00fd00fe 00e500fa 0400fc00 fc000007     ................
  42ea34:	04070202 000004fc 000000f3 00000000     ................
  42ea44:	00000000 000000f8 00000000 00000000     ................
  42ea54:	fa000000 f700f5fd 000000fe 00090000     ................
  42ea64:	01fffef9 0000fc00 0000effe 00000000     ................
  42ea74:	00000000 09feee00 00000000 00000000     ................
  42ea84:	00000000 000000f7 00000000 07000000     ................
  42ea94:	00000200 000000fc 00000000 00000000     ................
  42eaa4:	00000000 02090000 00000001 00000000     ................
	...
  42ead4:	000000f8 00000000 00000000 00000000     ................
  42eae4:	00000000 02000000 fe070204 fe040000     ................
  42eaf4:	0602e1f9 00fd0004 00070008 00eb0007     ................
  42eb04:	070007fd 000204fe 00fe0100 0012fc00     ................
  42eb14:	00070012 07040309 f8000000 00000000     ................
  42eb24:	0200fe01 02fcfdfc 0000fe00 0000f700     ................
	...
  42eb3c:	0000f100 00000000 00000000 00000000     ................
  42eb4c:	00f40100 000000f2 1600fe00 0202fdfd     ................
  42eb5c:	02fd00fe 00f40000 00000000 00000000     ................
  42eb6c:	00ea0000 00000002 00000000 00000000     ................
  42eb7c:	0d00f200 00f80000 eaf10007 0007fcf1     ................
  42eb8c:	0300f100 00fd00fb 00000000 00000000     ................
  42eb9c:	06000000 0000e507 00000000 00000000     ................
  42ebac:	000b0000 00000002 02020000 ff00fcfd     ................
  42ebbc:	0000feff 000000fe 00fe00fc fa00fcfb     ................
  42ebcc:	00fcf9f9 00fc00fc fe000000 00020000     ................
  42ebdc:	0100fe02 02000000 000000fe ff0202fe     ................
  42ebec:	fc000000 0000ff00 01000000 00fe0300     ................
  42ebfc:	00fc00fd 0700fe00 00fe0000 00000000     ................
  42ec0c:	fefe01ff 00fe0000 000000fe 00000000     ................
  42ec1c:	ffff0000 00fdfe00 00000000 fe000001     ................
  42ec2c:	fefefe00 00000000 00000000 0000ff00     ................
  42ec3c:	fdfe0000 f900fd00 0004f9fe 0402fc00     ................
  42ec4c:	fffa0006 f5ff00fd f402fe02 01000002     ................
  42ec5c:	fef400f4 f500feed 00060400 00000003     ................
  42ec6c:	fc000000 00f900fd 00fe0000 00fe0000     ................
  42ec7c:	00000000 ff00ffff 000000fd 00000000     ................
  42ec8c:	fe00fefe 0000fefd 000000fe 00000000     ................
  42ec9c:	00000000 fd00fefe fc00fe00 fd000002     ................
  42ecac:	00020201 00000000 0000fe00 02000000     ................
  42ecbc:	00fe0000 00fdfefe 00000000 00020000     ................
  42eccc:	000000fe 00fdfe00 fe0700fc 0000f901     ................
  42ecdc:	f7f4f506 fe0002fc fc00fcf1 fc03fc00     ................
  42ecec:	00fa00f2 02ff0100 000200fe f500f7f9     ................
  42ecfc:	f9fbfbfb fc00fafd 010001fa 0000fe00     ................
  42ed0c:	02000200 00000000 00000000 fe000000     ................
  42ed1c:	ff00ff00 fbfc00fe f900fffb 00000000     ................
  42ed2c:	00fe0000 01000000 000000ff 00000002     ................
  42ed3c:	00000000 00000b00 00000000 00000002     ................
  42ed4c:	000000fe 00000000 00000000 000200fc     ................
	...
  42ed68:	000000fe 000000fc 00f9f500 f5fd0000     ................
  42ed78:	02fe0000 0000fa00 00000000 00000000     ................
  42ed88:	fc0000fc 00000000 00000000 00000000     ................
  42ed98:	00fc0002 03000000 fcfc0200 fdfefe00     ................
  42eda8:	00000000 00f90000 fefd00fe f9fafb00     ................
  42edb8:	00fc00fe 000000f9 00001200 fd000001     ................
  42edc8:	f6000200 00000000 07fceb00 00f7fe07     ................
  42edd8:	f500fd02 f002fdff 030003fe f9f8fdf8     ................
  42ede8:	f30000f7 00000d00 000000ff fafeffff     ................
  42edf8:	00eb00f9 00000000 00000000 00000001     ................
	...
  42ee14:	ff00fe00 0000fdfe 00fe00fc 00000000     ................
	...
  42ee2c:	00ff0000 040000fc fb0003ff fafffe02     ................
  42ee3c:	fefd00fe fcfd00fe fffe0000 00fdfcfe     ................
  42ee4c:	0200fe00 00fb00fe 00fc0000 fcfc00fc     ................
  42ee5c:	00000002 00000000 0002fc00 fdfe00fd     ................
  42ee6c:	fefefef9 fffdfeff 00000000 fefefe00     ................
  42ee7c:	00000000 fe00fe03 fe000000 fdfefefd     ................
  42ee8c:	090200fe 00fa00ff fe0004fe 0003fdf7     ................
  42ee9c:	02fcf500 fe0002fc fd00f9fe fc000001     ................
  42eeac:	02000000 00fcfc02 fefdfefc 01fc00fe     ................
  42eebc:	0007fcfc 00000000 00000000 00000002     ................
	...
  42eee0:	000000fc 00000000 00000000 00000000     ................
	...
  42ef0c:	000000fe 00000000 00000000 00000000     ................
	...
  42ef28:	fefe0000 00000000 00000000 00000000     ................
  42ef38:	fd0000fd fefe0000 00000000 000000fe     ................
  42ef48:	0000ff00 fe000000 00000000 00fc00fd     ................
  42ef58:	00f90000 0004fb02 0000f5fe f700fefb     ................
  42ef68:	0000fafa f7f7fef6 00fa00f5 00fd0f02     ................
  42ef78:	fefffefb f8fcfafc 00fefbf7 0100fe00     ................
  42ef88:	fef00000 f8fb0507 00f90100 04fefef5     ................
  42ef98:	0001fdeb f4fdf100 0000f0fe 010d00f0     ................
  42efa8:	0000fe00 feff0000 f100fef7 00000000     ................
  42efb8:	00fe00f9 00f5faff f9fdff00 00fe00fe     ................
  42efc8:	f6000000 fef9f9fe fcfefafc f9fefc00     ................
  42efd8:	fcfd00fd 0100fcfe 00f9fe00 00fc0004     ................
  42efe8:	03000000 09fc0200 fdfefe00 00000000     ................
  42eff8:	00f90000 fefd00fe f9fafb00 02fc00fe     ................
  42f008:	00000009 00001200 fd000001 00000200     ................
	...
  42f024:	0000fcfe ff000000 fe000000 fc0000fe     ................
  42f034:	fc0000fe 00ff0400 00000000 00000100     ................
  42f044:	04030000 f900fe02 f90700fc 09fcfcf9     ................
  42f054:	feed0204 fe00fe04 00f8fe02 fefd02fe     ................
  42f064:	0000fef9 fa000407 06fdf400 fd01f7fd     ................
  42f074:	09fef9f9 00fd0002 070200fa faf7f8fb     ................
  42f084:	f0010007 fefc02fe f8fb00fb 00fefdfd     ................
  42f094:	fefbfb00 fe050700 fdf400f4 fff3f800     ................
  42f0a4:	faf9fcf9 fd000006 00fefc00 0400fcfe     ................
  42f0b4:	000002f9 fbfe00f4 faf9fefc f900fbf9     ................
  42f0c4:	f9fcfbfe 010000fe f900fc0b fcfe00fe     ................
  42f0d4:	f7fafafb 0004fcfd fdf500fd f8f90401     ................
  42f0e4:	fe07f9fc 04fceb01 00f8fcfb fefdf7f9     ................
  42f0f4:	f9fbfefe 070000ff 00f1fe06 f705fbf3     ................
  42f104:	f7f8fcf1 0004f9f5 fd000000 fd020000     ................
  42f114:	04fc0204 fff90000 0100ff00 0000fe01     ................
  42f124:	00000000 000000fe 00070200 0000fd00     ................
  42f134:	fefe0000 000000fd 00000201 00020000     ................
  42f144:	000900fe fd010104 00000400 00000200     ................
	...
  42f15c:	06000700 00000000 00000000 00000000     ................
  42f16c:	00f30000 070004fe 03160000 0202fcfc     ................
  42f17c:	00f501fe 00f30b00 00000000 00000000     ................
  42f18c:	09f10000 0000001f 00000000 00000000     ................
  42f19c:	0000f300 00000000 00000000 00000000     ................
	...
  42f1b8:	fc0000fc 000000fe 00000000 00000000     ................
	...
  42f1d0:	00fa00fe 00000100 fefc1d02 02fa0607     ................
  42f1e0:	02020000 000000fd 00000000 00000000     ................
  42f1f0:	000006e3 00000000 00000000 00000000     ................
  42f200:	fa000000 fa000000 00000000 0000fffb     ................
  42f210:	fd00fb00 0000f500 00000000 00000000     ................
  42f220:	0000f100 00010000 00000000 0000fe00     ................
  42f230:	00fd00fc 000000fa 00fd02fc fbfefa00     ................
  42f240:	00fa0000 00f500fe ee0000fe f8fef7fc     ................
  42f250:	00f10000 0000fffa 00000000 fcfd0000     ................
  42f260:	0000fcfe 00fb0000 04fe03fb fefbfe00     ................
  42f270:	fd00fcfc fa02feff 000000ff 00fdfeec     ................
  42f280:	f5fe00fb fe0000fe 000000fe fe000200     ................
  42f290:	0004fefc 00000000 00000000 00000000     ................
	...
  42f2bc:	00030000 00000000 fe00fb00 fc000000     ................
  42f2cc:	00000002 00fcfefa fe00fa00 0000f500     ................
  42f2dc:	00ea0000 00f5f8fc fe00f100 000000fd     ................
  42f2ec:	00000000 fffdfe00 000001fd 0700fd04     ................
  42f2fc:	f9fefe0b 05040b03 030903fa 00060506     ................
	...
  42f314:	0b0e0000 fe00fefc 00120a12 00020000     ................
  42f324:	00000800 000000fc 00000000 00fe0000     ................
  42f334:	00000000 03000000 00000000 f7fefded     ................
  42f344:	f10000f5 00000000 00000000 00000000     ................
  42f354:	00000000 0000fc00 00000000 fe000000     ................
	...
  42f36c:	00000003 fefded00 0000f5f7 000000f7     ................
	...
  42f38c:	000000fe fe0002fb f9020402 02fe0000     ................
  42f39c:	00000200 00fa0000 00fcfefe 0e00f7fe     ................
  42f3ac:	fefb00fe 00fcfe00 fdfcfafe fc000000     ................
	...
  42f3c4:	0000fe00 00000000 00030000 ed000000     ................
  42f3d4:	f5f7fefd 00f10000 00000000 00000b00     ................
	...
  42f3ec:	fdf900fc fefe07fe 01ff01f7 0500fafe     ................
  42f3fc:	02010200 00fdf7fb f7fafcf7 fcfc00f7     ................
  42f40c:	fefefdfd fe00fefd 030003ff 000700fe     ................
	...
  42f424:	fe000000 0000fefe 00ff00fa 000000fc     ................
	...
  42f43c:	000000f3 00000000 00000000 fd00fefe     ................
  42f44c:	00000000 fc0000fe fc0002fe fa00fefc     ................
  42f45c:	fdfefbfe 0000fc00 00000000 00000000     ................
  42f46c:	0700f100 00fc0000 fd000000 0000fe00     ................
  42f47c:	fe0000ff 0000fb00 f9f9fd09 00020202     ................
  42f48c:	020302fa fe070207 f70000fa faf90000     ................
  42f49c:	00fc0000 fd00fcfd fe00fd00 f9fe0003     ................
  42f4ac:	000008fe 00fc00fe 00fb0300 0002fe02     ................
  42f4bc:	fe00f900 02fe00ff 000000fe 00fbfdf7     ................
  42f4cc:	f50000f9 00fe0800 000100fc f9fe00fe     ................
  42f4dc:	0002fe00 fe000000 fd020000 fd000001     ................
  42f4ec:	00fd00fe 00000000 00000000 00000000     ................
  42f4fc:	00000000 000500f2 0000fe00 00000000     ................
  42f50c:	0000fefe 05000400 00000000 01f3f200     ................
  42f51c:	f704070a 08000902 00000400 00000000     ................
  42f52c:	00000000 00000c00 00000000 00000000     ................
	...

0042f544 <kern_classes>:
  42f544:	0042e994 0042f554 0042f5f0 0000313d     ..B.T.B...B.=1..

0042f554 <kern_left_class_mapping>:
  42f554:	02010000 05040300 08070602 0a090a09     ................
  42f564:	0d000c0b 11100f0e 140c1312 00000014     ................
  42f574:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  42f584:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  42f594:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  42f5a4:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  42f5b4:	0000093d 00000000 00000000 00000000     =...............
	...

0042f5f0 <kern_right_class_mapping>:
  42f5f0:	02010000 05040300 08070602 0a090a09     ................
  42f600:	0e0d0c0b 0c11100f 15141312 00000015     ................
  42f610:	19181716 19191917 1a191917 19191919     ................
  42f620:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  42f630:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  42f640:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  42f650:	00000931 00000000 00000000 00000000     1...............
	...

0042f68c <unicode_list_1>:
  42f68c:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  42f69c:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  42f6ac:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
  42f6bc:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
  42f6cc:	efc9efc8 efe3efcb f014efe5 f017f015     ................
  42f6dc:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
  42f6ec:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
  42f6fc:	f712f4aa 0000f7f2 0000ffff              ............

0042f708 <lv_anim_path_def>:
  42f708:	00415131 00000000 0000ffff              1QA.........

0042f714 <hex.5775>:
  42f714:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  42f724:	00000000                                ....

0042f728 <sin0_90_table>:
  42f728:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
  42f738:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
  42f748:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
  42f758:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
  42f768:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
  42f778:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
  42f788:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
  42f798:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
  42f7a8:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
  42f7b8:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
  42f7c8:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
  42f7d8:	7ffa7feb 00007fff 2074754f 6d20666f     ........Out of m
  42f7e8:	726f6d65 63202c79 74276e61 6c6c6120     emory, can't all
  42f7f8:	7461636f 20612065 2077656e 66667562     ocate a new buff
  42f808:	28207265 72636e69 65736165 756f7920     er (increase you
  42f818:	564c2072 4d454d5f 5a49535f 65682f45     r LV_MEM_SIZE/he
  42f828:	73207061 29657a69 00000000 66206f4e     ap size)....No f
  42f838:	20656572 66667562 202e7265 72636e49     ree buffer. Incr
  42f848:	65736165 5f564c20 5f4d454d 5f465542     ease LV_MEM_BUF_
  42f858:	5f58414d 2e4d554e 00000000 3b2e2c20     MAX_NUM..... ,.;
  42f868:	005f2d3a 0000ffff 00001084 000018c6     :-_.............
  42f878:	008c80ef 625f766c 00006e74 0000000a     ....lv_btn......
  42f888:	625f766c 616d6e74 78697274 00000000     lv_btnmatrix....
  42f898:	316e7442 00000000 326e7442 00000000     Btn1....Btn2....
  42f8a8:	336e7442 00000000 346e7442 00000000     Btn3....Btn4....
  42f8b8:	356e7442 00000000 635f766c 74726168     Btn5....lv_chart
  42f8c8:	00000000 635f766c 00746e6f 695f766c     ....lv_cont.lv_i
  42f8d8:	0000676d 74786554 00000000 6c5f766c     mg..Text....lv_l
  42f8e8:	6c656261 00000000 7373654d 00656761     abel....Message.
  42f8f8:	6d5f766c 6f626773 00000078 0001c200     lv_msgbox.......
  42f908:	000000c0 00000800 00000000 000007e2     ................
  42f918:	00000005 00000006 00000012 00000013     ................
  42f928:	00000006 00000001 0000ffff              ............

0042f934 <ecg>:
  42f934:	0000050a 00000508 00000506 00000505     ................
  42f944:	00000503 00000501 00000500 000004fe     ................
  42f954:	000004fc 000004fb 000004f9 000004f8     ................
  42f964:	000004f6 000004f5 000004f3 000004f2     ................
  42f974:	000004f1 000004ef 000004ee 000004ed     ................
  42f984:	000004eb 000004ea 000004e9 000004e7     ................
  42f994:	000004e6 000004e5 000004e3 000004e2     ................
  42f9a4:	000004e1 000004e0 000004df 000004de     ................
  42f9b4:	000004dd 000004dc 000004db 000004da     ................
  42f9c4:	000004d9 000004d8 000004d8 000004d7     ................
  42f9d4:	000004d7 000004d6 000004d6 000004d5     ................
  42f9e4:	000004d5 000004d5 000004d4 000004d4     ................
  42f9f4:	000004d4 000004d4 000004d3 000004d3     ................
  42fa04:	000004d3 000004d3 000004d2 000004d2     ................
  42fa14:	000004d1 000004d1 000004d0 000004d0     ................
  42fa24:	000004cf 000004ce 000004cd 000004cc     ................
  42fa34:	000004cb 000004ca 000004c8 000004c7     ................
  42fa44:	000004c6 000004c4 000004c3 000004c2     ................
  42fa54:	000004c1 000004bf 000004be 000004bd     ................
  42fa64:	000004bc 000004bb 000004ba 000004b9     ................
  42fa74:	000004b8 000004b8 000004b7 000004b7     ................
  42fa84:	000004b6 000004b6 000004b6 000004b6     ................
  42fa94:	000004b6 000004b6 000004b6 000004b6     ................
  42faa4:	000004b6 000004b6 000004b6 000004b6     ................
  42fab4:	000004b6 000004b5 000004b5 000004b5     ................
  42fac4:	000004b5 000004b5 000004b4 000004b4     ................
  42fad4:	000004b3 000004b2 000004b2 000004b1     ................
  42fae4:	000004b0 000004af 000004ae 000004ad     ................
  42faf4:	000004ad 000004ab 000004aa 000004a9     ................
  42fb04:	000004a8 000004a7 000004a6 000004a5     ................
  42fb14:	000004a3 000004a2 000004a1 000004a0     ................
  42fb24:	0000049f 0000049d 0000049c 0000049b     ................
  42fb34:	0000049a 00000498 00000497 00000496     ................
  42fb44:	00000495 00000493 00000492 00000491     ................
  42fb54:	00000490 0000048e 0000048d 0000048c     ................
  42fb64:	0000048b 0000048a 00000489 00000487     ................
  42fb74:	00000486 00000485 00000484 00000483     ................
  42fb84:	00000482 00000480 0000047f 0000047e     ............~...
  42fb94:	0000047c 0000047b 00000479 00000478     |...{...y...x...
  42fba4:	00000476 00000474 00000472 00000470     v...t...r...p...
  42fbb4:	0000046e 0000046c 00000469 00000467     n...l...i...g...
  42fbc4:	00000464 00000462 0000045f 0000045c     d...b..._...\...
  42fbd4:	00000459 00000456 00000453 00000450     Y...V...S...P...
  42fbe4:	0000044d 00000449 00000446 00000443     M...I...F...C...
  42fbf4:	0000043f 0000043c 00000438 00000435     ?...<...8...5...
  42fc04:	00000431 0000042e 0000042a 00000427     1.......*...'...
  42fc14:	00000423 00000420 0000041c 00000418     #... ...........
  42fc24:	00000415 00000411 0000040d 00000409     ................
  42fc34:	00000405 00000401 000003fd 000003f9     ................
  42fc44:	000003f5 000003f1 000003ec 000003e8     ................
  42fc54:	000003e4 000003df 000003da 000003d6     ................
  42fc64:	000003d1 000003cc 000003c7 000003c2     ................
  42fc74:	000003bd 000003b8 000003b3 000003ad     ................
  42fc84:	000003a8 000003a2 0000039d 00000397     ................
  42fc94:	00000391 0000038b 00000385 0000037f     ................
  42fca4:	00000379 00000373 0000036d 00000366     y...s...m...f...
  42fcb4:	00000360 00000359 00000353 0000034c     `...Y...S...L...
  42fcc4:	00000346 0000033f 00000339 00000332     F...?...9...2...
  42fcd4:	0000032b 00000325 0000031e 00000318     +...%...........
  42fce4:	00000311 0000030b 00000305 000002fe     ................
  42fcf4:	000002f8 000002f2 000002ec 000002e6     ................
  42fd04:	000002e1 000002db 000002d5 000002d0     ................
  42fd14:	000002ca 000002c5 000002bf 000002ba     ................
  42fd24:	000002b5 000002af 000002aa 000002a5     ................
  42fd34:	000002a0 0000029a 00000295 00000290     ................
  42fd44:	0000028a 00000285 00000280 0000027a     ............z...
  42fd54:	00000275 00000270 0000026a 00000265     u...p...j...e...
  42fd64:	0000025f 0000025a 00000254 0000024e     _...Z...T...N...
  42fd74:	00000249 00000243 0000023d 00000237     I...C...=...7...
  42fd84:	00000232 0000022c 00000226 00000220     2...,...&... ...
  42fd94:	0000021a 00000214 0000020e 00000208     ................
  42fda4:	00000202 000001fc 000001f6 000001ef     ................
  42fdb4:	000001e9 000001e3 000001dd 000001d7     ................
  42fdc4:	000001d0 000001ca 000001c4 000001be     ................
  42fdd4:	000001b8 000001b2 000001ab 000001a5     ................
  42fde4:	0000019f 00000199 00000193 0000018d     ................
  42fdf4:	00000187 00000182 0000017c 00000176     ........|...v...
  42fe04:	00000170 0000016b 00000165 00000160     p...k...e...`...
  42fe14:	0000015b 00000155 00000150 0000014b     [...U...P...K...
  42fe24:	00000146 00000142 0000013d 00000138     F...B...=...8...
  42fe34:	00000134 00000130 0000012c 00000128     4...0...,...(...
  42fe44:	00000124 00000120 0000011c 00000119     $... ...........
  42fe54:	00000115 00000112 0000010e 0000010a     ................
  42fe64:	00000107 00000103 00000100 000000fc     ................
  42fe74:	000000f8 000000f4 000000f0 000000ec     ................
  42fe84:	000000e8 000000e3 000000df 000000da     ................
  42fe94:	000000d5 000000d0 000000cb 000000c6     ................
  42fea4:	000000c0 000000bb 000000b6 000000b0     ................
  42feb4:	000000ab 000000a6 000000a1 0000009c     ................
  42fec4:	00000097 00000093 0000008e 0000008a     ................
  42fed4:	00000086 00000082 0000007e 0000007b     ........~...{...
  42fee4:	00000078 00000075 00000073 00000070     x...u...s...p...
  42fef4:	0000006e 0000006c 0000006a 00000068     n...l...j...h...
  42ff04:	00000066 00000064 00000062 00000060     f...d...b...`...
  42ff14:	0000005e 0000005d 0000005b 00000059     ^...]...[...Y...
  42ff24:	00000057 00000055 00000052 00000050     W...U...R...P...
  42ff34:	0000004e 0000004b 00000048 00000046     N...K...H...F...
  42ff44:	00000043 00000040 0000003d 0000003b     C...@...=...;...
  42ff54:	00000038 00000035 00000032 00000030     8...5...2...0...
  42ff64:	0000002d 0000002b 00000029 00000026     -...+...)...&...
  42ff74:	00000024 00000023 00000021 0000001f     $...#...!.......
  42ff84:	0000001e 0000001d 0000001c 0000001b     ................
  42ff94:	0000001a 00000019 00000019 00000018     ................
  42ffa4:	00000017 00000017 00000016 00000016     ................
  42ffb4:	00000015 00000015 00000014 00000013     ................
  42ffc4:	00000012 00000012 00000011 0000000f     ................
  42ffd4:	0000000e 0000000d 0000000c 0000000a     ................
  42ffe4:	00000009 00000007 00000006 00000005     ................
  42fff4:	00000004 00000003 00000002 00000001     ................
	...
  43001c:	00000001 00000002 00000004 00000005     ................
  43002c:	00000007 00000009 0000000b 0000000e     ................
  43003c:	00000010 00000013 00000016 00000019     ................
  43004c:	0000001b 0000001e 00000021 00000024     ........!...$...
  43005c:	00000027 0000002a 0000002c 0000002f     '...*...,.../...
  43006c:	00000031 00000033 00000036 00000038     1...3...6...8...
  43007c:	00000039 0000003b 0000003d 0000003f     9...;...=...?...
  43008c:	00000040 00000042 00000043 00000045     @...B...C...E...
  43009c:	00000046 00000048 0000004a 0000004b     F...H...J...K...
  4300ac:	0000004d 0000004f 00000051 00000053     M...O...Q...S...
  4300bc:	00000056 00000058 0000005b 0000005d     V...X...[...]...
  4300cc:	00000060 00000063 00000066 00000069     `...c...f...i...
  4300dc:	0000006c 00000070 00000073 00000076     l...p...s...v...
  4300ec:	00000079 0000007c 00000080 00000083     y...|...........
  4300fc:	00000086 00000089 0000008c 0000008f     ................
  43010c:	00000091 00000094 00000097 00000099     ................
  43011c:	0000009b 0000009e 000000a0 000000a2     ................
  43012c:	000000a4 000000a6 000000a8 000000aa     ................
  43013c:	000000ac 000000ae 000000b0 000000b3     ................
  43014c:	000000b5 000000b7 000000ba 000000bc     ................
  43015c:	000000bf 000000c1 000000c4 000000c7     ................
  43016c:	000000ca 000000cd 000000d0 000000d3     ................
  43017c:	000000d7 000000da 000000dd 000000e1     ................
  43018c:	000000e4 000000e8 000000eb 000000ef     ................
  43019c:	000000f2 000000f6 000000f9 000000fc     ................
  4301ac:	00000100 00000103 00000106 00000109     ................
  4301bc:	0000010d 00000110 00000113 00000116     ................
  4301cc:	00000119 0000011c 00000120 00000123     ........ ...#...
  4301dc:	00000126 0000012a 0000012d 00000130     &...*...-...0...
  4301ec:	00000134 00000138 0000013b 0000013f     4...8...;...?...
  4301fc:	00000143 00000147 0000014b 0000014f     C...G...K...O...
  43020c:	00000154 00000158 0000015d 00000161     T...X...]...a...
  43021c:	00000166 0000016b 0000016f 00000174     f...k...o...t...
  43022c:	00000179 0000017d 00000182 00000187     y...}...........
  43023c:	0000018b 00000190 00000195 00000199     ................
  43024c:	0000019e 000001a2 000001a6 000001aa     ................
  43025c:	000001ae 000001b3 000001b7 000001bb     ................
  43026c:	000001bf 000001c3 000001c7 000001cb     ................
  43027c:	000001cf 000001d3 000001d7 000001db     ................
  43028c:	000001df 000001e3 000001e8 000001ec     ................
  43029c:	000001f0 000001f5 000001fa 000001ff     ................
  4302ac:	00000203 00000208 0000020d 00000212     ................
  4302bc:	00000217 0000021d 00000222 00000227     ........"...'...
  4302cc:	0000022c 00000231 00000236 0000023c     ,...1...6...<...
  4302dc:	00000241 00000246 0000024b 00000250     A...F...K...P...
  4302ec:	00000254 00000259 0000025e 00000262     T...Y...^...b...
  4302fc:	00000267 0000026b 00000270 00000274     g...k...p...t...
  43030c:	00000278 0000027d 00000281 00000285     x...}...........
  43031c:	00000289 0000028e 00000292 00000296     ................
  43032c:	0000029a 0000029f 000002a3 000002a7     ................
  43033c:	000002ac 000002b0 000002b5 000002b9     ................
  43034c:	000002be 000002c3 000002c7 000002cc     ................
  43035c:	000002d1 000002d6 000002db 000002e0     ................
  43036c:	000002e5 000002ea 000002ef 000002f4     ................
  43037c:	000002f9 000002fe 00000303 00000309     ................
  43038c:	0000030e 00000313 00000318 0000031d     ................
  43039c:	00000323 00000328 0000032d 00000333     #...(...-...3...
  4303ac:	00000338 0000033d 00000343 00000348     8...=...C...H...
  4303bc:	0000034d 00000353 00000358 0000035d     M...S...X...]...
  4303cc:	00000363 00000368 0000036e 00000373     c...h...n...s...
  4303dc:	00000379 0000037e 00000384 00000389     y...~...........
  4303ec:	0000038f 00000394 0000039a 0000039f     ................
  4303fc:	000003a5 000003aa 000003b0 000003b5     ................
  43040c:	000003bb 000003c0 000003c6 000003cb     ................
  43041c:	000003d1 000003d6 000003dc 000003e1     ................
  43042c:	000003e6 000003ec 000003f1 000003f7     ................
  43043c:	000003fc 00000401 00000407 0000040c     ................
  43044c:	00000411 00000416 0000041c 00000421     ............!...
  43045c:	00000426 0000042c 00000431 00000436     &...,...1...6...
  43046c:	0000043c 00000441 00000446 0000044c     <...A...F...L...
  43047c:	00000451 00000457 0000045c 00000462     Q...W...\...b...
  43048c:	00000467 0000046d 00000472 00000478     g...m...r...x...
  43049c:	0000047e 00000483 00000489 0000048f     ~...............
  4304ac:	00000494 0000049a 000004a0 000004a6     ................
  4304bc:	000004ab 000004b1 000004b7 000004bd     ................
  4304cc:	000004c3 000004c8 000004ce 000004d4     ................
  4304dc:	000004da 000004df 000004e5 000004eb     ................
  4304ec:	000004f1 000004f7 000004fc 00000502     ................
  4304fc:	00000508 0000050e 00000514 0000051a     ................
  43050c:	00000520 00000526 0000052c 00000532      ...&...,...2...
  43051c:	00000538 0000053e 00000544 0000054b     8...>...D...K...
  43052c:	00000551 00000557 0000055d 00000564     Q...W...]...d...
  43053c:	0000056a 00000571 00000577 0000057e     j...q...w...~...
  43054c:	00000584 0000058b 00000592 00000598     ................
  43055c:	0000059f 000005a6 000005ac 000005b3     ................
  43056c:	000005ba 000005c1 000005c8 000005cf     ................
  43057c:	000005d6 000005dd 000005e4 000005ec     ................
  43058c:	000005f3 000005fa 00000601 00000609     ................
  43059c:	00000610 00000617 0000061f 00000626     ............&...
  4305ac:	0000062e 00000635 0000063d 00000644     ....5...=...D...
  4305bc:	0000064c 00000653 0000065b 00000663     L...S...[...c...
  4305cc:	0000066a 00000672 0000067a 00000681     j...r...z.......
  4305dc:	00000689 00000691 00000699 000006a1     ................
  4305ec:	000006a9 000006b1 000006b9 000006c1     ................
  4305fc:	000006c9 000006d1 000006d9 000006e1     ................
  43060c:	000006ea 000006f2 000006fb 00000703     ................
  43061c:	0000070c 00000715 0000071d 00000726     ............&...
  43062c:	0000072f 00000738 00000740 00000749     /...8...@...I...
  43063c:	00000752 0000075b 00000764 0000076d     R...[...d...m...
  43064c:	00000775 0000077e 00000787 00000790     u...~...........
  43065c:	00000798 000007a1 000007aa 000007b2     ................
  43066c:	000007bb 000007c3 000007cc 000007d4     ................
  43067c:	000007dc 000007e5 000007ed 000007f6     ................
  43068c:	000007fe 00000806 0000080f 00000817     ................
  43069c:	00000820 00000829 00000831 0000083a      ...)...1...:...
  4306ac:	00000843 0000084c 00000855 0000085e     C...L...U...^...
  4306bc:	00000867 00000870 00000879 00000883     g...p...y.......
  4306cc:	0000088c 00000895 0000089e 000008a7     ................
  4306dc:	000008b0 000008b9 000008c2 000008cb     ................
  4306ec:	000008d3 000008dc 000008e4 000008ec     ................
  4306fc:	000008f4 000008fc 00000903 0000090a     ................
  43070c:	00000911 00000918 0000091f 00000925     ............%...
  43071c:	0000092b 00000931 00000937 0000093d     +...1...7...=...
  43072c:	00000943 00000949 0000094e 00000954     C...I...N...T...
  43073c:	00000959 0000095f 00000964 0000096a     Y..._...d...j...
  43074c:	0000096f 00000974 0000097a 0000097f     o...t...z.......
  43075c:	00000985 0000098b 00000990 00000996     ................
  43076c:	0000099b 000009a1 000009a6 000009ac     ................
  43077c:	000009b1 000009b7 000009bc 000009c1     ................
  43078c:	000009c6 000009cb 000009cf 000009d4     ................
  43079c:	000009d8 000009dc 000009e0 000009e4     ................
  4307ac:	000009e8 000009eb 000009ee 000009f1     ................
  4307bc:	000009f4 000009f7 000009f9 000009fb     ................
  4307cc:	000009fe 00000a00 00000a02 00000a03     ................
  4307dc:	00000a05 00000a07 00000a08 00000a0a     ................
  4307ec:	00000a0b 00000a0c 00000a0d 00000a0e     ................
  4307fc:	00000a0f 00000a10 00000a11 00000a12     ................
  43080c:	00000a13 00000a14 00000a14 00000a15     ................
  43081c:	00000a16 00000a16 00000a16 00000a17     ................
  43082c:	00000a17 00000a17 00000a17 00000a17     ................
  43083c:	00000a16 00000a16 00000a16 00000a15     ................
  43084c:	00000a15 00000a14 00000a13 00000a12     ................
  43085c:	00000a11 00000a10 00000a0f 00000a0e     ................
  43086c:	00000a0c 00000a0b 00000a09 00000a08     ................
  43087c:	00000a06 00000a04 00000a02 00000a01     ................
  43088c:	000009ff 000009fc 000009fa 000009f8     ................
  43089c:	000009f6 000009f4 000009f1 000009ef     ................
  4308ac:	000009ec 000009ea 000009e7 000009e5     ................
  4308bc:	000009e2 000009e0 000009dd 000009db     ................
  4308cc:	000009d8 000009d6 000009d3 000009d1     ................
  4308dc:	000009ce 000009cc 000009c9 000009c7     ................
  4308ec:	000009c4 000009c2 000009c0 000009be     ................
  4308fc:	000009bc 000009b9 000009b7 000009b5     ................
  43090c:	000009b3 000009b1 000009af 000009ad     ................
  43091c:	000009ab 000009a9 000009a7 000009a5     ................
  43092c:	000009a3 000009a1 0000099f 0000099d     ................
  43093c:	0000099b 00000999 00000997 00000995     ................
  43094c:	00000993 00000991 0000098f 0000098d     ................
  43095c:	0000098b 00000989 00000987 00000985     ................
  43096c:	00000983 00000981 0000097f 0000097d     ............}...
  43097c:	0000097b 00000979 00000977 00000975     {...y...w...u...
  43098c:	00000973 00000971 0000096f 0000096d     s...q...o...m...
  43099c:	0000096b 00000969 00000967 00000965     k...i...g...e...
  4309ac:	00000963 00000961 0000095f 0000095d     c...a..._...]...
  4309bc:	0000095c 0000095a 00000958 00000956     \...Z...X...V...
  4309cc:	00000955 00000953 00000952 00000950     U...S...R...P...
  4309dc:	0000094f 0000094d 0000094c 0000094a     O...M...L...J...
  4309ec:	00000949 00000948 00000947 00000946     I...H...G...F...
  4309fc:	00000945 00000943 00000942 00000941     E...C...B...A...
  430a0c:	00000941 00000940 0000093f 0000093e     A...@...?...>...
  430a1c:	0000093e 0000093d 0000093d 0000093c     >...=...=...<...
  430a2c:	0000093c 0000093b 0000093b 0000093a     <...;...;...:...
  430a3c:	00000939 00000938 00000937 00000936     9...8...7...6...
  430a4c:	00000935 00000934 00000932 00000930     5...4...2...0...
  430a5c:	0000092e 0000092c 00000929 00000927     ....,...)...'...
  430a6c:	00000924 00000920 0000091d 00000919     $... ...........
  430a7c:	00000915 00000910 0000090b 00000906     ................
  430a8c:	00000901 000008fc 000008f6 000008f0     ................
  430a9c:	000008ea 000008e4 000008de 000008d8     ................
  430aac:	000008d1 000008cb 000008c5 000008be     ................
  430abc:	000008b8 000008b2 000008ac 000008a6     ................
  430acc:	000008a0 0000089a 00000894 0000088f     ................
  430adc:	00000889 00000884 0000087e 00000879     ........~...y...
  430aec:	00000873 0000086d 00000868 00000862     s...m...h...b...
  430afc:	0000085c 00000856 00000850 0000084a     \...V...P...J...
  430b0c:	00000844 0000083d 00000837 00000830     D...=...7...0...
  430b1c:	00000829 00000821 0000081a 00000812     )...!...........
  430b2c:	0000080a 00000802 000007fa 000007f2     ................
  430b3c:	000007eb 000007e4 000007dd 000007d7     ................
  430b4c:	000007d2 000007cd 000007c9 000007c6     ................
  430b5c:	000007c3 000007c2 000007c2 000007c3     ................
  430b6c:	000007c5 000007c8 000007cd 000007d3     ................
  430b7c:	000007da 000007e2 000007eb 000007f6     ................
  430b8c:	00000802 0000080f 0000081e 0000082e     ................
  430b9c:	0000083f 00000851 00000865 0000087a     ?...Q...e...z...
  430bac:	00000890 000008a7 000008c0 000008da     ................
  430bbc:	000008f4 00000910 0000092d 0000094c     ........-...L...
  430bcc:	0000096b 0000098b 000009ad 000009cf     k...............
  430bdc:	000009f3 00000a17 00000a3c 00000a63     ........<...c...
  430bec:	00000a8a 00000ab2 00000adb 00000b05     ................
  430bfc:	00000b2f 00000b5b 00000b86 00000bb3     /...[...........
  430c0c:	00000be0 00000c0d 00000c3b 00000c69     ........;...i...
  430c1c:	00000c97 00000cc6 00000cf5 00000d23     ............#...
  430c2c:	00000d51 00000d80 00000dad 00000ddb     Q...............
  430c3c:	00000e07 00000e33 00000e5e 00000e87     ....3...^.......
  430c4c:	00000eaf 00000ed5 00000ef9 00000f1c     ................
  430c5c:	00000f3c 00000f5a 00000f76 00000f8f     <...Z...v.......
  430c6c:	00000fa6 00000fbb 00000fcd 00000fdc     ................
  430c7c:	00000fe8 00000ff2 00000ff9 00000ffd     ................
  430c8c:	00000fff 00000ffd 00000ff9 00000ff1     ................
  430c9c:	00000fe8 00000fdb 00000fcb 00000fb9     ................
  430cac:	00000fa4 00000f8d 00000f73 00000f57     ........s...W...
  430cbc:	00000f38 00000f17 00000ef3 00000ecd     8...............
  430ccc:	00000ea6 00000e7c 00000e50 00000e23     ....|...P...#...
  430cdc:	00000df3 00000dc3 00000d91 00000d5d     ............]...
  430cec:	00000d29 00000cf4 00000cbd 00000c86     )...............
  430cfc:	00000c4e 00000c16 00000bdd 00000ba4     N...............
  430d0c:	00000b6b 00000b31 00000af8 00000ac0     k...1...........
  430d1c:	00000a87 00000a4f 00000a18 000009e1     ....O...........
  430d2c:	000009ab 00000976 00000942 0000090e     ....v...B.......
  430d3c:	000008dc 000008ac 0000087c 0000084e     ........|...N...
  430d4c:	00000821 000007f6 000007cc 000007a4     !...............
  430d5c:	0000077d 00000758 00000734 00000712     }...X...4.......
  430d6c:	000006f1 000006d2 000006b4 00000698     ................
  430d7c:	0000067e 00000664 0000064d 00000636     ~...d...M...6...
  430d8c:	00000621 0000060e 000005fb 000005ea     !...............
  430d9c:	000005da 000005cc 000005be 000005b2     ................
  430dac:	000005a7 0000059e 00000595 0000058e     ................
  430dbc:	00000588 00000583 0000057e 0000057b     ........~...{...
  430dcc:	00000579 00000577 00000576 00000576     y...w...v...v...
  430ddc:	00000576 00000577 00000579 0000057b     v...w...y...{...
  430dec:	0000057e 00000582 00000585 0000058a     ~...............
  430dfc:	0000058e 00000593 00000598 0000059e     ................
  430e0c:	000005a3 000005a9 000005af 000005b5     ................
  430e1c:	000005bb 000005c1 000005c7 000005cd     ................
  430e2c:	000005d3 000005d9 000005df 000005e5     ................
  430e3c:	000005eb 000005f0 000005f6 000005fb     ................
  430e4c:	00000600 00000604 00000609 0000060d     ................
  430e5c:	00000611 00000615 00000618 0000061c     ................
  430e6c:	0000061f 00000621 00000624 00000626     ....!...$...&...
  430e7c:	00000628 00000629 0000062b 0000062c     (...)...+...,...
  430e8c:	0000062d 0000062d 0000062e 0000062e     -...-...........
  430e9c:	0000062e 0000062e 0000062d 0000062c     ........-...,...
  430eac:	0000062c 0000062b 0000062a 00000628     ,...+...*...(...
  430ebc:	00000627 00000625 00000623 00000621     '...%...#...!...
  430ecc:	0000061f 0000061d 0000061b 00000618     ................
  430edc:	00000616 00000613 00000610 0000060d     ................
  430eec:	0000060a 00000606 00000603 000005ff     ................
  430efc:	000005fc 000005f8 000005f4 000005f1     ................
  430f0c:	000005ed 000005e9 000005e5 000005e0     ................
  430f1c:	000005dc 000005d8 000005d4 000005d0     ................
  430f2c:	000005cb 000005c7 000005c3 000005be     ................
  430f3c:	000005ba 000005b5 000005b1 000005ad     ................
  430f4c:	000005a8 000005a4 0000059f 0000059b     ................
  430f5c:	00000597 00000592 0000058e 0000058a     ................
  430f6c:	00000586 00000582 0000057e 0000057a     ........~...z...
  430f7c:	00000576 00000572 0000056e 0000056a     v...r...n...j...
  430f8c:	00000567 00000563 0000055f 0000055c     g...c..._...\...
  430f9c:	00000558 00000555 00000551 0000054e     X...U...Q...N...
  430fac:	0000054a 00000547 00000544 00000540     J...G...D...@...
  430fbc:	0000053d 0000053a 00000536 00000533     =...:...6...3...
  430fcc:	0000052f 0000052c 00000529 00000525     /...,...)...%...
  430fdc:	00000522 0000051e 0000051b 00000517     "...............
  430fec:	00000514 00000510 0000050d 00000509     ................
  430ffc:	63696c43 0a64656b 00000000 67676f54     Clicked.....Togg
  43100c:	0a64656c 00000000                       led.....

00431014 <g_ecgSize>:
  431014:	000005b2 64697543 216f6461 61755320     ....Cuidado! Sua
  431024:	69786f20 616e6567 206f6163 61747365      oxigenacao esta
  431034:	61626120 206f7869 39206564 00002e30      abaixo de 90...
  431044:	66666623 20666666 9180ef20 00000020     #ffffff  ... ...
  431054:	39443223 20333136 8189ef20 25363720     #2D9613  ... 76%
  431064:	00000020 30303023 20303030 0000203a      ...#000000 : ..
  431074:	30303023 20303030 4749584f 4f494e45     #000000 OXIGENIO
  431084:	00000000 31414323 20313430 324f7053     ....#CA1041 SpO2
  431094:	00000025 30303023 20303030 49544142     %...#000000 BATI
  4310a4:	544e454d 0000534f 39443223 20333136     MENTOS..#2D9613 
  4310b4:	004d5042 0044434c 6c696146 74206465     BPM.LCD.Failed t
  4310c4:	7263206f 65746165 64636c20 73617420     o create lcd tas
  4310d4:	000a0d6b 004b4c43 6c696146 74206465     k...CLK.Failed t
  4310e4:	7263206f 65746165 6b6c6320 73617420     o create clk tas
  4310f4:	000a0d6b 32535041 00000000 6c696146     k...APS2....Fail
  431104:	74206465 7263206f 65746165 53504120     ed to create APS
  431114:	73617420 000a0d6b 6e69616d 00000000      task...main....
  431124:	6c696146 74206465 7263206f 65746165     Failed to create
  431134:	69614d20 6174206e 0a0d6b73 00000000      Main task......
  431144:	636f7270 00737365 6c696146 74206465     process.Failed t
  431154:	7263206f 65746165 6f727020 73736563     o create process
  431164:	73617420 000a0d6b 75756875 6c6c6c6c      task...uhuullll
  431174:	0000006c 64323025 25202320 00643230     l...%02d # %02d.
  431184:	203a786f 0a206425 00000000 00006425     ox: %d .....%d..
  431194:	75716120 69696969 25206969 00000a64      aquiiiiii %d...
  4311a4:	686c6166 6d652061 69726320 61207261     falha em criar a
  4311b4:	6c696620 000a2061 203a6425 6d206425      fila ..%d: %d m
  4311c4:	00000a73 3a6d7062 0a642520 00000000     s...bpm: %d.....
  4311d4:	00000023 0000003a 63617473 766f206b     #...:...stack ov
  4311e4:	6c667265 2520776f 73252078 00000a0d     erflow %x %s....

004311f4 <sinTable_f32>:
  4311f4:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  431204:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  431214:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  431224:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  431234:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  431244:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  431254:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  431264:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  431274:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  431284:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  431294:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  4312a4:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  4312b4:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  4312c4:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  4312d4:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  4312e4:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  4312f4:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  431304:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  431314:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  431324:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  431334:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  431344:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  431354:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  431364:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  431374:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  431384:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  431394:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  4313a4:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  4313b4:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  4313c4:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  4313d4:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  4313e4:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  4313f4:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  431404:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  431414:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  431424:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  431434:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  431444:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  431454:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  431464:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  431474:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  431484:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  431494:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  4314a4:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  4314b4:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  4314c4:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  4314d4:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  4314e4:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  4314f4:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  431504:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  431514:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  431524:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  431534:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  431544:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  431554:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  431564:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  431574:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  431584:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  431594:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  4315a4:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  4315b4:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  4315c4:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  4315d4:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  4315e4:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  4315f4:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  431604:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  431614:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  431624:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  431634:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  431644:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  431654:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  431664:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  431674:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  431684:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  431694:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  4316a4:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  4316b4:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  4316c4:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  4316d4:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  4316e4:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  4316f4:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  431704:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  431714:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  431724:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  431734:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  431744:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  431754:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  431764:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  431774:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  431784:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  431794:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  4317a4:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  4317b4:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  4317c4:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  4317d4:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  4317e4:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  4317f4:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  431804:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  431814:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  431824:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  431834:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  431844:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  431854:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  431864:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  431874:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  431884:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  431894:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  4318a4:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  4318b4:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  4318c4:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  4318d4:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  4318e4:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  4318f4:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  431904:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  431914:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  431924:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  431934:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  431944:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  431954:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  431964:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  431974:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  431984:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  431994:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  4319a4:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  4319b4:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  4319c4:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  4319d4:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  4319e4:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  4319f4:	80000000                                ....

004319f8 <_global_impure_ptr>:
  4319f8:	204000f0 33323130 37363534 42413938     ..@ 0123456789AB
  431a08:	46454443 00000000 33323130 37363534     CDEF....01234567
  431a18:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  431a28:	0000296c                                l)..

00431a2c <blanks.7217>:
  431a2c:	20202020 20202020 20202020 20202020                     

00431a3c <zeroes.7218>:
  431a3c:	30303030 30303030 30303030 30303030     0000000000000000
  431a4c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00431a5c <_ctype_>:
  431a5c:	20202000 20202020 28282020 20282828     .         ((((( 
  431a6c:	20202020 20202020 20202020 20202020                     
  431a7c:	10108820 10101010 10101010 10101010      ...............
  431a8c:	04040410 04040404 10040404 10101010     ................
  431a9c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  431aac:	01010101 01010101 01010101 10101010     ................
  431abc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  431acc:	02020202 02020202 02020202 10101010     ................
  431adc:	00000020 00000000 00000000 00000000      ...............
	...

00431b60 <_init>:
  431b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  431b62:	bf00      	nop
  431b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
  431b66:	bc08      	pop	{r3}
  431b68:	469e      	mov	lr, r3
  431b6a:	4770      	bx	lr

00431b6c <__init_array_start>:
  431b6c:	00428f9d 	.word	0x00428f9d

00431b70 <__frame_dummy_init_array_entry>:
  431b70:	0040018d                                ..@.

00431b74 <_fini>:
  431b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  431b76:	bf00      	nop
  431b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  431b7a:	bc08      	pop	{r3}
  431b7c:	469e      	mov	lr, r3
  431b7e:	4770      	bx	lr

00431b80 <__fini_array_start>:
  431b80:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <dseg30>:
2040000c:	4bb1 0041 4aa5 0041 001f 0000 fc00 0002     .KA..JA.........
2040001c:	0020 2040                                    .@ 

20400020 <font_dsc>:
20400020:	a340 0042 a5e0 0042 a32c 0042 0000 0000     @.B...B.,.B.....
20400030:	0000 0201 0000 0000 0000 0000               ............

2040003c <dseg70>:
2040003c:	4bb1 0041 4aa5 0041 0046 0000 f700 0004     .KA..JA.F.......
2040004c:	0050 2040                                   P.@ 

20400050 <font_dsc>:
20400050:	a674 0042 b41c 0042 a660 0042 0000 0000     t.B...B.`.B.....
20400060:	0000 0201 0000 0000 0000 0000               ............

2040006c <uxCriticalNesting>:
2040006c:	aaaa aaaa                                   ....

20400070 <font_dsc>:
20400070:	c7f8 0042 c320 0042 c2f8 0042 f544 0042     ..B. .B...B.D.B.
20400080:	0010 2802 0000 0000 0000 0000               ...(........

2040008c <lv_font_montserrat_14>:
2040008c:	4bb1 0041 4aa5 0041 0010 0003 ff00 0001     .KA..JA.........
2040009c:	0070 2040                                   p.@ 

204000a0 <mem_buf_small>:
204000a0:	c7dc 2040 0010 0000 c7ec 2040 0010 0000     ..@ ......@ ....

204000b0 <_lv_txt_encoded_get_byte_id>:
204000b0:	7ac1 0041                                   .zA.

204000b4 <_lv_txt_encoded_get_char_id>:
204000b4:	7aed 0041                                   .zA.

204000b8 <_lv_txt_encoded_next>:
204000b8:	7969 0041                                   iyA.

204000bc <_lv_txt_encoded_prev>:
204000bc:	7a69 0041                                   izA.

204000c0 <_lv_txt_encoded_size>:
204000c0:	7935 0041                                   5yA.

204000c4 <_lv_txt_get_encoded_length>:
204000c4:	7b19 0041                                   .{A.

204000c8 <lv_btnmatrix_def_map>:
204000c8:	f898 0042 f8a0 0042 f8a8 0042 f884 0042     ..B...B...B...B.
204000d8:	f8b0 0042 f8b8 0042 1140 0043               ..B...B.@.C.

204000e4 <g_interrupt_enabled>:
204000e4:	0001 0000                                   ....

204000e8 <SystemCoreClock>:
204000e8:	0900 003d                                   ..=.

204000ec <_impure_ptr>:
204000ec:	00f0 2040                                   ..@ 

204000f0 <impure_data>:
204000f0:	0000 0000 03dc 2040 0444 2040 04ac 2040     ......@ D.@ ..@ 
	...
20400198:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204001a8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400518 <__malloc_av_>:
	...
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 

20400920 <__malloc_sbrk_base>:
20400920:	ffff ffff                                   ....

20400924 <__malloc_trim_threshold>:
20400924:	0000 0002                                   ....

20400928 <__atexit_recursive_mutex>:
20400928:	a7ec 2043                                   ..C 

2040092c <__global_locale>:
2040092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040094c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040096c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040098c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a0c:	a091 0042 9a25 0042 0000 0000 1a5c 0043     ..B.%.B.....\.C.
20400a1c:	1a58 0043 1140 0043 1140 0043 1140 0043     X.C.@.C.@.C.@.C.
20400a2c:	1140 0043 1140 0043 1140 0043 1140 0043     @.C.@.C.@.C.@.C.
20400a3c:	1140 0043 1140 0043 ffff ffff ffff ffff     @.C.@.C.........
20400a4c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400a74:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
